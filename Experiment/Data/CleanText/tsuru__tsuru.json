{
    "fsouza": "duplicate of #71.\n. why?\n. imho, the current readme is good enough\n. Interesting. Let me take a look :)\n. After one month of use, the error didn't show up. Closing this :)\n. Reopening because we need to confirm before removing the user.\n. Reopening because we need to confirm before removing the team.\n. this is supposed to work.\nI'll test it later.\n. I gave it some love and found that when a user is member of many teams, adding a key or creating an app does not work as expected. \n. I will put this on hold, it can be solved with gandalf :)\n. Blocked on #160.\n. Done by @flaviamissi.\n. Closed by 4c9f9295025392e65679e6cd2f115b74e5e06688.\n. how is this command supposed to work? environment variables are restrict to the shell. Will it write to /etc/profile?\n. this is bash sucking.\nI'll check and fix.\n. reopening this one...\nit is now a bug, because tsuru's user does not have permission to delete the repository, so this code does not work: https://github.com/timeredbull/tsuru/commit/d7e8f8a187e2a072aecb252e6a3f1108ad67519d#commitcomment-1680981.\n. Blocked on #160.\n. Blocked on #160.\n. Closing it, because now we heal the vm when it's terminated :-)\n. I put this on hold, since it's a big change, and I'm getting a break from this issue.\n. Closing this one. We have it working on master. Still using a fork of goamz/iam, once the following CLs get merged, we can sed 's;github.com/fsouza/go-iam;launchpad.net/goamz/iam;'.\n1. https://codereview.appspot.com/6823060/\n2. https://codereview.appspot.com/6855104/\n3. https://codereview.appspot.com/6858081/\n. What kind of non-contributor users would use tsuru on Mac OS?\n. ops, I was thinking of the server, not the command line.\nIt definitely makes sense to add brew formulas for command lines (service and app).\n. there was no race, just a problem with api/app.\n. This is a huge change. I will try to send small (but working) commits.\n. Actually, it works: https://github.com/timeredbull/tsuru/blob/848b7805e5536765778f90704885b1dddf0d14df/api/service/service_instance.go#L119\n. This is done. There are two places that still invoke juju without the -e parameter, but they are up to issue #110.\n% find . -name \\*.go | xargs grep Command\\(\\\"juju\\\" | grep -v \"\\-e\"\n./api/app/app.go:   cmd := exec.Command(\"juju\", \"deploy\", \"--repository=/home/charms\", \"local:\"+a.Framework, a.Name)\n./collector/collector.go:   return exec.Command(\"juju\", \"status\").Output()\n. https://github.com/golang/glog\n. I can't reproduce this:\n% tsuru app list\n+-------------+---------+--------------+\n| Application | State   | Ip           |\n+-------------+---------+--------------+\n| mysqlapi    | started | 10.170.1.193 |\n| flaviapp    | started | 10.170.1.195 |\n| xikin       | started | 10.170.1.196 |\n+-------------+---------+--------------+\n% tsuru app create helloworld django\nThere is already an app named \"helloworld\".\n% tsuru app list\n+-------------+---------+--------------+\n| Application | State   | Ip           |\n+-------------+---------+--------------+\n| mysqlapi    | started | 10.170.1.193 |\n| flaviapp    | started | 10.170.1.195 |\n| xikin       | started | 10.170.1.196 |\n+-------------+---------+--------------+\n. I can reproduce it now, I've changed the issue summary.\n. @andrewsmedina @flaviamissi I will drop grant and revoke too, they may sound ambiguous (is it grant a user access to a team, or a team access to an app?).\n. Fixed by @andrewsmedina in #123.\n. Happened because agent-state has became down:\nxikin:\n    charm: local:centos/gunicorn-18\n    exposed: false\n    relations: {}\n    units:\n      xikin/3:\n        agent-state: down\n        machine: 17\n        public-address: server-1155.novalocal\n. This issue isn't about duplicate direct calls to response.WriteHeader.\nFor example, http.Error calls response.WriteHeader, so we can't call response.WriteHeader and then call http.Error (or vice-versa).\nWriteHeader function logs this warning to standard output (by default), you can see this bug if you run tsuru server on foreground and run tsuru client - or crane - against it). I don't know which tsuru/crane call raises the warning. \n. +1\n. Blocked on #177.\n. Actually, there are five possible states:\n- error\n- creating\n- installing\n- started\n- pending\nIt would be hard to be more atomic using just juju status output, mainly because we run collector in one minute intervals. We could add an agent to the app unit, but I don't think this is really necessary.\n. just testing hub...\n. I'm willing to implement this on next days, but first we need to get #200 done.\n. Actually, I should get some sleep before comment on issues. This issue does not depend on #200.\n. I'm closing this issue, because currently adding a new unit is \"cloning\" the application image.\nWe could change this issue for \"clone apps\", but this is issue #760.\n. Duplicate of #252.\n. Duplicate of #248.\n. It's implemented in juju. It's up to the provisioner to manage all units.\n. We have lots of this one.\n. This is too old, and hard to fix, as the app can have more than one address.\n. I don't know how exaclty it's fixed, but after the huge refactoring I did while fixing #169 and #171, I fixed this issue.\n. o_o'\n. Reopening because there's another case that does not work as expected (when .tsuru_token does not exist).\n% tsuru app-list\nYou must provide the Authorization header\n. Wouldn't it be better to improve config package so it support validation?\n. We have config checkers now, so we can close this issue.\n. I think we don't have these urls. All of they are configurable (even IAM endpoint, which is very unlikely to change). We can add a note in our future configuration page.\n. This is no longer valid.\n. Related to #191.\n. The problem is that juju was not in path. When exec.Cmd isn't able to find the executable, CombinedOutput returns nil and an error explaining what happened (there's no stderr for an executable that does not exist). We ignore this error because in case where the execution failed it just gave to us \"exit status 1\" or \"exit status 128\" (for example). This also affects deployment.\nWe should at least log the error.\n. This is about SSH. See \"ENVIRONMENTS\" session in ssh man page for details on how to fix it.\n. Fixed by c4b5fae202d58f769fc0f6aefcac2fb171a4c86c.\n. Duplicate of #81.\n. Fixed and released, including homebrew.\n. Github should not close this issue, sorry x)\n. Closed by 087b6f9c987aab81695b4145c647b74d475eeeb9.\n. Fixed and released.\n. Reopening because we can cross compile the clients, but they don't work as expected.\nuser.Current does not work when cgo is disabled. We can use os.ExpandEnv instead.\n. I believe 70c8bed609719692486857979917ac739e66ef09 has fixed this one.\n. Well, id did not: https://travis-ci.org/globocom/tsuru/builds/3828531.\n. This isn't easily fixable. The user can change the proxy used for the app (tsuru env-set http_proxy=http://users-proxy.com:3128), so monitoring it from outside would be hard.\nWe could actively monitor the connection with the proxy running an agent in the app's vm, but it's not worth it. We can do that if this issue is raised again in the future, but not now.\n. Blocked on globocom/gandalf#70.\n. I've added a script that cross compiles tsuru, tsuru-admin and crane on all supported platforms: https://github.com/globocom/tsuru/blob/master/misc/build-clients.bash.\nWhat we need now is an automatic upload process and website update whenever the version changes :-)\n. If I kill git-daemon, circus won't spawn it again. Gandalf should not start git-daemon, we should move it to circus.ini.\n. Just noticed that this one can be closed x)\n. closed by 0189649f6c08d195cbaaf4ee735a780c093af259. :-P\n. Blocked on #244.\nExcept for the load balancer, everything works. Once #244 is done, we can finish this issue, registering units in the load balancer as they're added to the app.\n. One note from tests: juju's remove-unit is very unstable, I'd recommend making n calls to remove-unit (where n is the number of units) instead of one with all units.\n. Blocked on #244.\nExcept for the load balancer, everything works. Once #244 is done, we can finish this issue, unregistering instances from the load balancer as they're removed from the app.\n. CreateAppHandler and Juju provisioner should also handle this change.\n. Indeed, I fixed it when implemented juju provisioner.\n. Done :-)\n. Work in progress version available at: http://tsuru.rtfd.org/config.\n. FWIW, I did not fix this because I'm not entirely aware of the impact of this change in tsuru-circus.\n. Here is what we already handle:\n- dropped connection (when MongoDB is restarted and the connection is lost, tsuru reconnects)\n- MongoDB dies (circus will automatically repair and start it)\n- data loss (see #234)\nI can't think of any other issue that we could recover automatically. I'm closing this issue now, and we might open some other in the future.\n. We have a page for downloading client now, and it's linked in the client. Closing this issue.\n. It's an already fixed data race in mgo.\n. @aoqfonseca: #85.\n. Merging #574 here\nUsage:\n% tsr install-platform <url-to-platform>\nThe URL may point to a JSON/YAML file describing a platform:\njson\n{\n    \"name\": \"blabla\",\n    \"docker-file\": \"<url to the dockerfile>\",\n    \"juju-charm\": \"<url to the juju charm or name in the charm store>\"\n}\nThis would create the platform in the database and the platform in the provisioner. \nHere is an example for Python:\njson\n{\n    \"name\": \"python\",\n    \"docker-file\": \"https://raw.github.com/flaviamissi/basebuilder/master/python/Dockerfile\",\n    \"juju-charm\": \"git://github.com/globocom/charms.git#precise/python\"\n}\nThis is related to #283, but it isn't about the user being able to create new platforms, it's about the admin being able to create new platforms without having to insert them in the database and importing in a way that depends on the provisioner.\n. Just to be clear, there are two data races in the report, but they're related.\n. I don't think we should do that, handling this on diverse platforms would be hell. This issue is way old, from a time where we didn't support any package manager, now we have brew and apt-get for clients, besides the pre-built binaries.\n. Blocked on #388.\n. Blocked on #388.\n. Blocked on #388.\n. Here is the current status:\n```\n% ack \"func [A-Z]\"\nauth.go\n34:func CreateUser(w http.ResponseWriter, r http.Request) error {\n110:func ChangePassword(w http.ResponseWriter, r http.Request, u auth.User) error {\n173:func CreateTeam(w http.ResponseWriter, r http.Request, u auth.User) error {\n188:func RemoveTeam(w http.ResponseWriter, r http.Request, u auth.User) error {\n208:func ListTeams(w http.ResponseWriter, r http.Request, u auth.User) error {\n285:func AddUserToTeam(w http.ResponseWriter, r http.Request, u auth.User) error {\n345:func RemoveUserFromTeam(w http.ResponseWriter, r http.Request, u auth.User) error {\n407:func AddKeyToUser(w http.ResponseWriter, r http.Request, u auth.User) error {\n455:func RemoveKeyFromUser(w http.ResponseWriter, r http.Request, u auth.User) error {\n467:func RemoveUser(w http.ResponseWriter, r http.Request, u *auth.User) error {\nservice_consumption.go\n19:func CreateInstanceHandler(w http.ResponseWriter, r http.Request, u auth.User) error {\n79:func RemoveServiceInstanceHandler(w http.ResponseWriter, r http.Request, u auth.User) error {\n93:func ServicesInstancesHandler(w http.ResponseWriter, r http.Request, u auth.User) error {\n106:func ServiceInstanceStatusHandler(w http.ResponseWriter, r http.Request, u auth.User) error {\n131:func ServiceInfoHandler(w http.ResponseWriter, r http.Request, u auth.User) error {\n161:func Doc(w http.ResponseWriter, r http.Request, u auth.User) error {\nservice_provision.go\n25:func ServicesHandler(w http.ResponseWriter, r http.Request, u auth.User) error {\n38:func CreateHandler(w http.ResponseWriter, r http.Request, u auth.User) error {\n87:func UpdateHandler(w http.ResponseWriter, r http.Request, u auth.User) error {\n107:func DeleteHandler(w http.ResponseWriter, r http.Request, u auth.User) error {\n154:func GrantServiceAccessToTeamHandler(w http.ResponseWriter, r http.Request, u auth.User) error {\n170:func RevokeServiceAccessFromTeamHandler(w http.ResponseWriter, r http.Request, u auth.User) error {\n190:func AddDocHandler(w http.ResponseWriter, r http.Request, u auth.User) error {\n207:func GetDocHandler(w http.ResponseWriter, r http.Request, u auth.User) error {\n``\n. Another update.service_consumption.go` is ok now:\n```\n% ack \"func [A-Z]\"\nauth.go\n36:func CreateUser(w http.ResponseWriter, r http.Request) error {\n114:func ChangePassword(w http.ResponseWriter, r http.Request, t auth.Token) error {\n199:func CreateTeam(w http.ResponseWriter, r http.Request, t auth.Token) error {\n218:func RemoveTeam(w http.ResponseWriter, r http.Request, t auth.Token) error {\n238:func ListTeams(w http.ResponseWriter, r http.Request, t auth.Token) error {\n319:func AddUserToTeam(w http.ResponseWriter, r http.Request, t auth.Token) error {\n383:func RemoveUserFromTeam(w http.ResponseWriter, r http.Request, t auth.Token) error {\n449:func AddKeyToUser(w http.ResponseWriter, r http.Request, t auth.Token) error {\n501:func RemoveKeyFromUser(w http.ResponseWriter, r http.Request, t auth.Token) error {\n517:func RemoveUser(w http.ResponseWriter, r http.Request, t *auth.Token) error {\nservice_provision.go\n25:func ServicesHandler(w http.ResponseWriter, r http.Request, t auth.Token) error {\n42:func CreateHandler(w http.ResponseWriter, r http.Request, t auth.Token) error {\n95:func UpdateHandler(w http.ResponseWriter, r http.Request, t auth.Token) error {\n119:func DeleteHandler(w http.ResponseWriter, r http.Request, t auth.Token) error {\n170:func GrantServiceAccessToTeamHandler(w http.ResponseWriter, r http.Request, t auth.Token) error {\n190:func RevokeServiceAccessFromTeamHandler(w http.ResponseWriter, r http.Request, t auth.Token) error {\n214:func AddDocHandler(w http.ResponseWriter, r http.Request, t auth.Token) error {\n235:func GetDocHandler(w http.ResponseWriter, r http.Request, t auth.Token) error {\n```\n. Blocked on #388.\n. Reopening, because I'm stupid :-( \nRelated breakage: https://travis-ci.org/globocom/tsuru/builds/6258049\n. Blocked on #388.\n. Closed by https://github.com/globocom/go-gandalfclient/commit/5c5b1c9f23624ac999ab5b0321bbd6628cf4bbaf.\n. Done by @evandroflores.\n. That's a great job, thank you very much!\nI would prefer to keep this out of tsuru repository and link it in tsuru's docs.\nAnyway, let's see what others think.\ncc: @andrewsmedina @flaviamissi @gauperes.\n. @hfeeki that would be nice too. Thank you!\nI've filled #311, so we don't forget to add the link in our documentation.\n. I believe we can just change user-create so it requires email confirmation. Do you think it's enough?\n. @hfeeki I'm a little confused. What's the difference between creating a user and registering a user?\nI still believe that we are talking about changes in user-create (email confirmation and no passwords).\nAnyway, as pointed by @rochacon, the email confirmation should be configurable (as well as the SMTP server information).\n. Currently, admin users can disable user registration and still create users, preventing only anonymous users from registering themselves.\n. Closing this one. I filled #319 so we document the pair of links :-)\n. The links to the binaries are:\ncollector: https://s3.amazonaws.com/tsuru/dist-server/tsuru-collector.tar.gz\nwebserver: https://s3.amazonaws.com/tsuru/dist-server/tsuru-webserver.tar.gz\n. poor zookeeper\n. Hi @isaiah, this token need to be generated during the installation process and be defined in the machine environment (via /etc/profile, for example). @andrewsmedina is working on the tsr command line, that will be used to manage the server, being able to start the collector, the api server, generate tokens and do other management tasks.\nAt the moment, generating a token is a complicate task: you need to create a user (using the tsuru command line); add him to the admin team (defined in the tsuru.conf file) and them use tsuru-admin to generate the token:\n% tsuru-admin login user@email.com\nPassword:\n% tsuru-admin token-gen gandalf\nApplication token: \"secret123\".\nThen you should get the token and export it as the TSURU_TOKEN environment variable in the gandalf machine. As I said, @andrewsmedina is working to get it way easier. I believe it will be working tomorrow :)\nBTW, are you using lxc or juju?\n. Missing manifest file and documentation, sorry.\n. @hfeeki yes, but that's the point. You should not be able to delete your account if you're not logged in.\nActually, even after login, this command should ask for the user password again (I will raise an issue later).\n. This issue is no longer valid. Just tested the last version:\n% tsuru team-user-remove developers xxx@aaa.com\nError: You can not remove this user from this team, because it is the last user within the team, and a team can not be orphaned\n. -1\nTsuru is served by an HTTP API, and the HTTP way of saying that the response for a given request does not have any content is the status code 204 (no content), not an empty string. app-list already return 204 when it's empty. \nIn other words: tsuru is fine, abyss is broken.\n. @hfeeki: not, at least not now. Clients should be checking the status code. Thanks for reporting this issue.\n. @andrewsmedina I think you confused tokens and targets. What @evandroflores did was supporting multiple targets. @hfeeki asked for multiple user tokens in the token file.\n@hfeeki this seems a reasonable feature, but then how tsuru would know which token it should send in requests?\n. We had not seen this failure in the last months, I'm closing this issue.\n. I believe 274a8b2c6291c9df8ecb954fe8111ce30d63fc5a fixed this.\n. That's #268.\n. 2 - No, it means that we can change how it's structured. Today, hooks are the top-level in the app.conf. By moving it to a \"hooks\" section, we leave open rooms for other kind of settings.\nToday:\nyaml\npre-restart:\n  - command1\n  - command2\npost-restart:\n  - command1\n  - command2\n<other-hook>:\n  - command1\nMy proposal:\nyaml\nhooks:\n  - pre-restart:\n    - command1\n    - command2\n  - post-restart:\n    - command1\n    - command2\n  - <other hook>:\n    - command1\n<other-settings>:\n  # ...\n4 - Not sure. I was just wandering.\n. After some chatting in IRC, I'm closing this issue :-)\n. Containers ftw :-)\n. @fullofcaffeine the Procfile contains the command that you want to use to start your app. Here is how a Procfile would look like (running unicorn in a Rails or Sinatra project):\nmy_app: bundle exec unicorn -l 127.0.0.1:8888\nFor more details on Procfiles: https://devcenter.heroku.com/articles/procfile\nI've opened #392. We need to add docs on Procfile, or a link to Heroku's documentation.\n. @fullofcaffeine actually, the use of Procfiles is the bigger similarity. Procfile was invented by Heroku, and is definitely a great idea :)\n. Sometimes it works, sometimes it doesn't:\n% tsuru log --app mongoapi --lines 15\n% tsuru log --app mongoapi --lines 15\n% tsuru log --app mongoapi --lines 15\n% tsuru log --app mongoapi --lines 15\n2013-02-06 18:25:14 [tsuru]: Skipping pre-restart hooks...\n2013-02-06 18:25:48 [tsuru]: Skipping pos-restart hooks...\n2013-03-01 14:44:07 [tsuru]:  ---> Tsuru receiving push\n2013-03-01 14:44:07 [tsuru]:  ---> Cloning your code in your machines\n2013-03-01 14:44:11 [tsuru]: Cloning into '/home/application/current'...\n2013-03-01 14:44:11 [tsuru]:  ---> Installing dependencies\n2013-03-01 14:44:42 [tsuru]: executing hook to restart\n2013-03-01 14:44:45 [tsuru]: Got error while executing command: exit status 1... Skipping hooks execution\n2013-03-01 14:44:45 [tsuru]: Skipping pre-restart hooks...\n2013-03-01 14:44:45 [tsuru]:  ---> Restarting your app\n2013-03-01 14:44:48 [tsuru]: tsuru-app: no process found\n2013-03-01 14:44:48 [tsuru]: WARNING: project not running, skipping stop\n2013-03-01 14:46:01 [tsuru]: Skipping pos-restart hooks...\n2013-03-01 14:46:01 [tsuru]:  ---> Deploy done!\n2013-03-01 14:47:20 [tsuru]: setting env a with value 1\nFor lower values, it always works:\n% tsuru log --app mongoapi --lines 2\n2013-03-01 14:46:01 [tsuru]:  ---> Deploy done!\n2013-03-01 14:47:20 [tsuru]: setting env a with value 1\n% tsuru log --app mongoapi --lines 2\n2013-03-01 14:46:01 [tsuru]:  ---> Deploy done!\n2013-03-01 14:47:20 [tsuru]: setting env a with value 1\n% tsuru log --app mongoapi --lines 2\n2013-03-01 14:46:01 [tsuru]:  ---> Deploy done!\n2013-03-01 14:47:20 [tsuru]: setting env a with value 1\n% tsuru log --app mongoapi --lines 2\n2013-03-01 14:46:01 [tsuru]:  ---> Deploy done!\n2013-03-01 14:47:20 [tsuru]: setting env a with value 1\n% tsuru log --app mongoapi --lines 2\n2013-03-01 14:46:01 [tsuru]:  ---> Deploy done!\n2013-03-01 14:47:20 [tsuru]: setting env a with value 1\n--source seems to work fine:\n% tsuru log --app mysql\n2013-03-26 20:39:56 [tsuru]: Got error while executing command: exit status 1... Skipping hooks execution\n2013-03-26 20:39:56 [tsuru]: Skipping pre-restart hooks...\n2013-03-26 20:40:11 [tsuru-provisioner]: Failed to restart the app (exit status 1): Starting...\n2013-03-26 20:40:11 [tsuru-provisioner]: Timed out. Try to raise the --timeout value\n2013-03-26 20:40:11 [tsuru-provisioner]: Timed out. Try to raise the --timeout value\n2013-03-26 20:40:24 [tsuru]: running 'circusctl status'\n2013-03-26 20:40:31 [app]: Starting gunicorn 0.14.6\n2013-03-26 20:40:31 [app]: Listening at: http://0.0.0.0:8888 (31018)\n2013-03-26 20:40:31 [app]: Using worker: sync\n2013-03-26 20:40:31 [app]: Booting worker with pid: 31027\n% tsuru log --app mysql --source tsuru-provisioner\n2013-03-26 20:40:11 [tsuru-provisioner]: Timed out. Try to raise the --timeout value\n2013-03-26 20:40:11 [tsuru-provisioner]: Timed out. Try to raise the --timeout value\n2013-03-26 20:40:11 [tsuru-provisioner]: Failed to restart the app (exit status 1): Starting...\n% tsuru log --app mysql --source tsuru\n2013-03-26 20:21:03 [tsuru]: setting env MYSQLAPI_SHARED_SERVER with value 10.10.10.10\n2013-03-26 20:21:16 [tsuru]: executing hook to restart\n2013-03-26 20:21:19 [tsuru]: Got error while executing command: exit status 1... Skipping hooks execution\n2013-03-26 20:21:19 [tsuru]: Skipping pre-restart hooks...\n2013-03-26 20:21:24 [tsuru]: Skipping pos-restart hooks...\n2013-03-26 20:35:14 [tsuru]: setting env MYSQLAPI_SHARED_SERVER with value localhost\n2013-03-26 20:39:53 [tsuru]: executing hook to restart\n2013-03-26 20:39:56 [tsuru]: Got error while executing command: exit status 1... Skipping hooks execution\n2013-03-26 20:39:56 [tsuru]: Skipping pre-restart hooks...\n2013-03-26 20:40:24 [tsuru]: running 'circusctl status'\n% tsuru log --app mysql --source app\n2013-03-26 20:35:55 [app]: Starting gunicorn 0.14.6\n2013-03-26 20:35:55 [app]: Connection in use: ('0.0.0.0', 8888)\n2013-03-26 20:35:55 [app]: Retrying in 1 second.\n2013-03-26 20:35:56 [app]: Listening at: http://0.0.0.0:8888 (30694)\n2013-03-26 20:35:56 [app]: Using worker: sync\n2013-03-26 20:35:56 [app]: Booting worker with pid: 30697\n2013-03-26 20:40:31 [app]: Starting gunicorn 0.14.6\n2013-03-26 20:40:31 [app]: Listening at: http://0.0.0.0:8888 (31018)\n2013-03-26 20:40:31 [app]: Using worker: sync\n2013-03-26 20:40:31 [app]: Booting worker with pid: 31027\n. Assigned myself to this. Thanks for reporting.\n. Hi @fullofcaffeine. At the moment, we don't support PHP, because unfortunately we don't host any PHP applications, so maintaining a PHP charm without using it would be harder, but we would definitely like to have Tsuru supporting PHP.\nWould you like to add new charm. Regarding the LAMP part, the charm would be only \"LAP\", the \"M\" is provided as a Tsuru service, and we have mysqlapi already.\nThank you for the suggestion!\n. We now support PHP using Docker. Please see: https://github.com/flaviamissi/basebuilder/tree/master/php.\n. This issue is partially solved by 8557a15cce38d2b78ba6e4c7613ea8c329dbea2a. Now the token is generated using 32 random bytes and the current time server (including nanoseconds information).\nI've included a test that creates 10 tokens concurrently and check whether they're not equal: https://github.com/globocom/tsuru/commit/8557a15cce38d2b78ba6e4c7613ea8c329dbea2a#L1R17.\nWe already have timeout on tokens. A token expires after an amount of time (configurable).\nWe still need to limit the number of simultaneous sessions (#400), store account activity (#397) and invalidate tokens when user logs out (#401).\n. Blocked on #189.\n. I will move this issue away from the 0.9.0 milestone, we still don't want to remove the content of the keys in tsuru-server 0.9.0.\nIn future versions, we will store only the name of the key. But for 0.9.0, we will have both the name and the content (see #189), guaranteeing compatibility with older versions of the client. With tsuru-server 0.9.0, users will still be able to add and remove keys using tsuru-client 0.13 or older.\n. Are we still going in this direction?\n. Related to #382 and #419.\n. Is it finished?\n. \n. But there's no state in the app. Are we going to create it?\n. +1\n. What kind of info?\n. Another proposal is to move it to tsuru-admin (extending it to receive multiple apps - see #391). I've actually used \"tsuru run\" for executing administrative tasks in all apps.\n. I'm removing this issue from the milestone \"Public cloud\". I agree that we should do it, but we don't need it before launching the public cloud :-) \n. Depends on #440.\n. I'm working on it in globocom/docker-cluster\n. Actually, docker run accepts -m parameter.\nAnyway, it should be a per-image setting, which means that we don't need to change our code.\n. Yep.\n. Depends on #439.\n. Reopening, because GitHub is stupid.\n. Depends on #458.\n. Merged via https://github.com/globocom/tsuru/commit/c4d67917b9e6e562698ffa23019906aed6eaf335. Thank you very much!\n. It's fixed now, please update your tsuru version.\nThanks for reporting! :-)\n. I'm reopening it and putting it on hold. I've tested the checkout approach only with local bare repositories, it does not work with remote repositories (via git-daemon).\nThere are some alternatives, but I will leave it for someday :-)\n. Interesting, could you share more of your progress?\n. Sorry for the giant delay and thanks for the amazing work!\nWhat do you think of the following flow?\n1. git push tsuru master\n2. pre-receive gets the push, starts the generation of the archive and notifies Tsuru with the URL of the archive, to be served by Gandalf. It is an interesting feature for Gandalf, since other git repository managers also provide this feature\n3. Tsuru invokes the /var/lib/tsuru/deploy script with the environment variables and the URL to the archive\nAs you can see, this is the flow that you designed, but without using third part solutions like S3 or FTP.\n. I want to get it working by the end of this weekend, but there's an issue with security: by allowing containers to access the Gandalf API, containers may be able to manage users and repositories. One alternative is using another HTTP service for serving the archive and the application token to make sure that only containers from an app have access to its code. The ideal solution is having some kind of authentication in Gandalf.\nCurrently, we use network rules to block this access which is bad. Tsuru should be as secure in a flat environment as it is a segregated one.\n. Yes, but if the endpoint for the archive is the same, containers will have network access to the Gandalf API, being able to delete an entire repository, for example.\nOne solution is to split in two endpoints: one that manages the users and repositories; and other that serves the archive using the hash logic that you described.\nThe ideal solution is to make Gandalf more secure, but we need to define exactly how we want to authenticate users in Gandalf.\n. Indeed, this is another issue. I was just wondering whether we could fix both together. Anyway, this will be implemented until Sunday, hopefully with some security issues addressed :)\n. Tsuru won't know about the archive server. You will still be able to use anything you want. The flow will be:\n- pre-receive generates the archive and store it somewhere that is \"curlable\" from Docker nodes\n- pre-receive calls Tsuru with the URL of the archive\nSo you could still use FTP, S3 or rsync+http. archive-server is just a temporary solution while we don't support authentication on Gandalf. Later it will be merged with Gandalf. And they don't need to be in the same machine, archive-server just needs access to the bare repositories filesystem.\nThe only change that matters is changing Tsuru so it's able to receive the URL of the archive instead of the URL of the git repository, and changing the script in the image to run curl instead of git clone/pull.\nRegarding using nginx, it would be an authentication backend, we still need to manage users and passwords.\n. We use a file server to store the repositories.\nThe point is that you don't need to use the archive-server. Using the archive-server, the pre-receive would looks something like that:\nid=`curl -d 'repository=blablabla&refid=master' localhost:2020/`\ncurl -H \"Authorization: bearer ${TSURU_TOKEN}\"  -d \"archive-url=http://archive-server:2121?id=$d&commit=nono\" -s -N --max-time 1800 $TSURU_URL\nUsing S3, you could do something like that:\ngit archive --format=tar.gz --output=archive.tar.gz master\ns3cmd put -P archive.tar.gz s3://mybucket/something\ncurl -H \"Authorization: bearer ${TSURU_TOKEN}\"  -d \"archive-url=https://s3.amazonaws.com/mybucket/archive.tar.gz&commit=nono\" -s -N --max-time 1800 $TSURU_URL\nGandalf does not authenticate users via ssh-keys.\nI didn't understand the POST and GET thing. Not authenticating POST requests would mean that containers would be able to create users and add keys to users. What about DELETE and PUT?\n. Sorry, my bad. I just had a busy weekend, but it should be ready in the next two or three days, unless I've missed something in the code.\n. Today is the day. I will finish the integration and run some tests with vagrant.\n. I just finished some tests, and decided to take a longer path. I want to refactor our deployment process.\nI'm thinking of something like the flow below:\n\n. Just had another idea: what about keep the method app.DeployApp, receiving a set of options via struct type.\nSomething like:\n```\ntype DeployOptions struct {\n    App          *App\n    Version      string\n    Commit       string\n    ArchiveURL   string\n    OutputStream io.Writer\n}\nfunc DeployApp(opts DeployOptions) error {\n    // something\n    if opts.ArchiveURL != \"\" {\n        // Provisioner.ArchiveDeploy\n    } else {\n        // Provisioner.GitDeploy\n    }\n}\n```\nAnd this method makes a decision between Provisioner.GitDeploy and Provisioner.ArchiveDeploy.\nAny thoughts?\n. @guestisp thanks!\n. Not yet, sorry. I had some troubles with the varnishapi. Now I'm back.\n. It's merged now, thanks for your contribution! :)\n. Hi @KettlebellAddict, we should specify that better, or improve the error message, but the failures are:\n- no reachable servers: in order to run most of Tsuru tests, you need to have MongoDB running on port 2017 (default port)\n- dial tcp 127.0.0.1:11300: connection refused: in order to run tests from the package queue, beanstalkd must be running\nPanics like this one are also related to MongoDB.\nThere is one good error message, but I believe you didn't get that far reading the failures: Could not connect to Redis server: dial tcp 127.0.0.1:6379: connection refused. Redis is required to run tests from the package router/hipache\n. Thank you very much! :-)\n. Well, I was using an old version of Tsuru. I will close this issue after releasing a new version and requiring it in the server.\n. #226.\n. Again, now with app-create:\n% tsuru app-create xikin python\nError: invalid character '-' in numeric literal\n. This was an issue on my machine. Sorry for the noise.\n. Thank you very much!\n. Did you mean blocked by #495? :P\n. duvido\n. This was more of an idea than anything else. I don't think we're heading to this direction anymore.\n. Reopening, since it is indeed a bug in Tsuru. tsuru team-create \" \" should reproduce it in the command line.\n. I disagree with that. The client should handle the messages.\nIn order to make it easier to clients to internationalize Tsuru's feedback, we could improve the feedback, but the server should not handle multiple languages itself.\n. @ramonPires yeah, something like that. Instead of customizing error code, we should use HTTP status codes as much as possible. I'm aware that it won't be always possible to do so. \n. Most of these messages are \"info\" messages, not really errors. We could fix it by introducing log levels.\nQueue handlers must loop forever, but the \"connection refused\" side effect is a bug, IMO.\n. It does not fail anymore, now we have default values for database configuration :)\n. tsuru/basebuilder now provides support for that. See the Java platform: https://github.com/tsuru/basebuilder/blob/master/java/install#L8.\n. Ops x)\n. I think there's a basebuilder Lua platform now. Closing this issue.\n. http://sphinx-doc.org/latest/intl.html\n. Blocked on kr/godep#9.\n. Blocked on kr/godep#16.\n. I've started globocom/tsuru-deb.\n. % sudo apt-add-repository ppa:tsuru/ppa\n% sudo apt-get update\n% sudo apt-get install tsuru-server\nNow we have:\n- tsuru-server\n- gandalf-server\n- docker-registry (Go version)\n- nodejs (0.8.25)\n- node-hipache\n- tsuru (client)\n- crane (client)\nWe build server packages only on amd64, and client packages on amd64 and i386. I'll update docs.\n. Hi @thedrow, thanks for your feedback. Could you please point me to a service that uses YAML for configuration files? I don't see where the \"de-facto\" thing comes from. The point of this issue is making the life of non-developers Tsuru administrators easier, and the sysadmin people is not used to yaml yet :)\nRegarding the indentation argument, configuration is not code. Indentation does not matter on configuration files, I've never seen or heard about a configuration file that sucks and people thought: \"oh, it sucks because it lacks indentation\", but I'd like to hear more from your experience. I've never needed indentation on service configurations files.\nPlease understand that this is not about software development tools or frameworks. I truly agree with Rails's  config.yaml or GAE's app.yaml files, they indeed represent some hierarchy.\n. This is about configuration of services, not development tools. Do Travis-CI and Coveralls use YAML for their server configuration?\nThe common configuration idiom is also human readable, and it's common. What's the problem with the sample below?\nconf\nlisten = 0.0.0.0:8080\ndatabase-url = mongodb://127.0.0.1:27017/tsuru\nNow see this:\nyaml\nlisten: 0.0.0.0:8080\ndatabase:\n  url: mongodb://127.0.0.1:27017/tsuru\nIndentation made it worst, now it takes more time to get the relevant information, because of the syntax.\n. Yes, in that case I'd agree, but it's not pragmatic: we will never have 50 lines in Tsuru's database configuration. We will never have 50 lines in any of Tsuru's  \"group\" of settings.\n. I will work in the actual configuration and provide two configuration samples, so we can compare them.\nI regret my second statement in the previous message: while I don't wanna have a group with more than 50 children, I cannot control it.\nThanks for the help, @thedrow :)\n. Seems like YAML is common now x)\n. I didn't know node.js is JavaScript. I can't write JavaScript code, closing the issue.\n. @guestisp could you share your configuration?\nAlso, when it hangs, can you run docker ps -a to see if any of the containers have failed?\nAlso, could you list containers in Tsuru database and post output here? You will need to run:\n```\n% mongo tsuru\n\ndb.docker.find()\n\noutput here\n```\nThanks and sorry for the noise :(\n. I'm trying to reproduce the deployment issue in a brand new setup right now, please hold on for some minutes.\nRegarding the EOF error, it usually means that Tsuru server has panicked. All panic messages are directed to the standard error stream. Did you capture stdout and stderr? If not, could you stop and start the API server using the command below?\n% tsr api > tsr-api.out 2>tsr-api.err &\nSo if you get another EOF, you'd be able to post the stderr content here.\n. Just found that our config does have an issue. I managed to get it to work, here is my config file:\nlisten: \":8080\"\nhost: http://0.0.0.0:8080\ndatabase:\n  url: 127.0.0.1:27017\n  name: tsuru\ngit:\n  unit-repo: /home/application/current\n  api-server: http://127.0.0.1:8000\n  rw-host: ec2-54-221-140-134.compute-1.amazonaws.com\n  ro-host: 172.17.42.1\nauth:\n  token-expire-days: 14\n  user-registration: true\n  hash-cost: 4\nbucket-support: false\nprovisioner: docker\nqueue-server: \"127.0.0.1:11300\"\nadmin-team: admin\nhipache:\n  domain: cloud-test.souza.cc\ndocker:\n  servers:\n    - http://localhost:4243\n  collection: docker\n  repository-namespace: tsuru\n  router: hipache\n  deploy-cmd: /var/lib/tsuru/deploy\n  ssh-agent-port: 4545\n  run-cmd:\n    bin: /var/lib/tsuru/start\n    port: \"8888\"\n  ssh:\n    add-key-cmd: /var/lib/tsuru/add-key\n    public-key: /home/ubuntu/.ssh/id_rsa.pub\n    user: ubuntu\nThe configuration file needed three changes:\n1. rw-host (ec2-54-221-140-134.compute-1.amazonaws.com)\n2. ro-host was wrong, the correct value is 172.17.42.1\n3. domain (cloud-test.souza.cc)\nI have some questions:\n- Could you please share your configuration file?\n- Which command did you use to import the tsuru/php image?\n- Is the container 585b458df5e8 still running? Can you inspect it (docker -H 127.0.0.1:4243 inspect 585b458df5e8)? What happens if you run curl localhost:49154?\n. > This is to use your public cloud? Why should I point to amazon ?\nYep, that was just an example. Your private cloud should work just fine.\nThere was a bug in our image builder, that was fixed yesterday at 16:02 GMT. Did you generate the tsuru/php before that? Can you regenerate it? In order to do that, you will need to delete all apps, then remove the tsuru/php image (docker rmi tsuru/php) and then run docker build again.\nThank you.\n. @beastie7 could you change /etc/tsuru/tsuru.conf?\nIn the docker:ssh session (last line), please add:\nsshd-path: sudo /usr/sbin/sshd\nSo it will look like:\n``` yaml\nOMIT\ndocker:\n  servers:\n    - http://localhost:4243\n  # OMIT\n  ssh:\n    add-key-cmd: /var/lib/tsuru/add-key\n    public-key: /home/ubuntu/.ssh/id_rsa.pub\n    user: ubuntu\n    sshd-path: sudo /usr/sbin/sshd\n```\nIf it fail too, could you please provide the output of docker logs <container-id>? Thanks! :)\n. Wrong project, see fsouza/go-dockerclient#31.\n. Thanks for your suggestion, it makes sense. We should support flags that override options defined in the configuration file, so we don't need to duplicate the file to change just one setting (like the log file).\nJust FYI, syslog includes the PID in every log line.\n. This issues is from a time we had two daemons in a single binary: the api and the collector. Now we have just one daemon, with a single file configuration.\nAlso, we can see the name of the executable in syslog, so grepping for tsurud is fine (it used to be not fine to grep for tsr).\n. This command could live both in tsuru-admin and tsr.\n- tsr: would be used after installation, to add new platforms;\n- tsuru-admin: would be used by administrators to add new platforms in a running instance of Tsuru.\n. While I like the idea, I'm skeptical about the configuration flag.\nWe may migrate for just using kill instead of stop. I don't think we should have an option for that.\n. I'm keen on merging this pull request, but it needs some adjusts:\n- add tests for the kill method\n- remove the flag, just use kill instead of stop during deployment\n- remove the *.go~ files\n- keep the version as is (let me handle the release)\n- format the code (run gofmt -s -w . in the root of the project)\nAlso, I'd like to hear from others before merging it.\nThanks for your contribution.\n. I like the idea. We could call the command  \"scale\".\nThen we can adapt the syntax to also solve #647.\n. Since tsuru now supports plugins, this could be a tsuru plugin that checks the amount of units and adjusts it properly. If we see people using it more than unit-add and unit-remove, we can switch over to scale.\nRight now, I'm closing this issue, since it will probably not be a feature in the tsuru client.\n. Nope, unit-remove cannot block. Tsuru also have the Juju provisioner, and blocking until a virtual machine dies is bad.\nWe should investigate the timeout issue, but that's another issue. This issue is about making unit-remove non-blocking.\n. We would need to use the queue. Binding requires an ip address.\n. We solved the beanstalkd HA problem by removing beanstalkd :)\n. @guestisp yep, that's the goal here :)\n. It was probably some error in the configuration file. Did you check the upstart log? (/var/log/upstart/<job>.log)\n. @alanjds may we close this issue?\n. No problem, thank you very much! I think it was some error in the configuration file.\n. @alanjds indeed. We have an issue for that: #283 :)\n. @alanjds did you use the deb package?\n. @alanjds my bad. It's fixed now. Thanks for reporting! :)\n. Done in tsuru/tsuru-client#10.\n. Hi @enyachoke, are you using the docker provisioner? How did you install Tsuru? Which version of tsr?\nThanks and sorry for the noise :(\n. I see. Could you remove the files pre-receive and pre-receive.py from the bare-template directory of Gandalf? (probably /home/git/bare-template).\nThese files are used to check whether the app is available before pushing code to it, but this check makes sense only with Juju, when using the Docker provisioner, we don't use the pre-receive hook, only the post-receive.\n. Hmm, could you share your configuration file?\n. Is the docker-ssh-agent running? Can you share the options that it's running?\n% ps -ef | grep ssh-agent\n. That's weird. From the info I have now, I can't tell why it's looking for the user achachiez. Can we chat in IRC later today? Would you be available at 22h00 -0200?\nSorry for the noise :(\n. I don't think so. It can be a markdown file in our repository, like in Docker.\n. We already support that, just define the docker:registry setting. We need to document all docker options :(\nThanks for reporting!\n. Reopening, so we can fix two cases:\n1. Validate the existence of the specified team\n2. Validate that the user is a member of the specified team\n. Sorry, I meant in the connection of the router manager in Tsuru and Redis:\nfunc connect() redis.Conn {\n    if pool == nil {\n        srv, err := config.GetString(\"hipache:redis-server\")\n        if err != nil {\n            srv = \"localhost:6379\"\n        }\n        pool = redis.NewPool(func() (redis.Conn, error) {\n            return redis.Dial(\"tcp\", srv)\n        }, 10)\n    }\n    pool.IdleTimeout = 180e9\n    return pool.Get()\n}\nThat 10 is the max number of idle connections, and the 180e9 (3 seconds) is the idle timeout for one connection. These value should be configurable. Something like:\nmaxIdleConnections, _ := config.GetInt(\"hipache:max-idle-db-connections\")\nif maxIdleConnections == 0 {\n    maxIdleConnections = 10\n}\nidleTimeout, _ := config.GetDuration(\"hipache:idle-timeout-db-connections\")\nif idleTimeout == 0 {\n    idleTimeout = 180e9\n}\n. @andrewsmedina do you remember what kind of improvements you were looking for when you opened this issue?\nMay we close this issue?\n. unit-add already uses action's pipeline.\n. What's missing from the guide now?\n. I'm closing this issue now, because it's pretty old, and tsuru is known to work well with latest Docker version.\nThanks for reporting!\n. FWIW, @joaopaulovieira is working on this issue.\n. Reopening, I will add docs before actually closing this issue. Sorry about that.\n. You can create an app that depends on environment variable and deploy it. If everything is ok, the queue is working fine. Here is a Flask example:\n``` python\nimport os\nfrom flask import Flask\napp = Flask(name)\n@app.route(\"/\")\ndef app_name():\n    return \"APPNAME: %s\" % os.environ.get(\"TSURU_APPNAME\")\n```\nUsing gunicorn, you can write the following Procfile (the name of the file above should be app.py):\nyaml\nweb: gunicorn -b 0.0.0.0:$PORT app:app\n. We now have a doc page for the scheduler, so we're good to close this issue! :)\n. Running another deploy will also rebalance them.\nAnyway, we could add an administrative command for rebalacing containers. Doing that automatically doesn't seem like a good idea for me.\n. @andrewsmedina automatically means no flexibility. We could have a flag, but it doesn't make sense either. Providing the command is more flexible.\nAfter all, with the manual command, \"automatic rebalancing\" would be a two-line script.\n. @andrewsmedina the number of units doesn't increase or decrease automatically, neither the number of nodes. Somebody needs to configure the trigger, and the trigger may be \"add the node to Tsuru and run this command to rebalance all the things\".\n. Coming together with #1136.\n. So, working on it now, here's what we're going to do:\n1. Introduce the concept of a process\n2. Each app can have multiple processes, and each process can have multiple units\n3. In the first deployment, tsuru will create one process per Procfile entry, and one unit per process\n4. For now, tsuru will provide only one public port for the application, binding it to the process named web, just like in Heroku. We can evolve it in the future so users can have multiple web processes\n5. Users will be able to define per-process environment variables (env-set -p to specify the process, where p is optional and there are two scopes: application-level and process-level environment variables, with higher precedence for process-level scope)\n6. Users will scale units in a per-process basis (unit-add -p and unit-remove -p, where p is not optional)\n7. Users will be able to start, stop and restart processes individually or the entire application (app-restart, app-start and app-stop with an optional -p flag)\nThat's what I thought so far, questions or comments?\n. @jblancett yes, it would. Is this a problem for you? Could you give more details on your scenario? Are the processes of your applications sharing some files/directories in the filesystem?\n. I'm closing this issue, and moving the effort to #1136.\nAt this point, we're already creating and scaling units based on Procfile entries (processes), we're still working to get status reporting and logging to work.\n. I suspect it causes #639.\n. We don't have multiple daemons in the package anymore, so this issue is no longer valid.\nThanks for reporting!\n. Now we have only one daemon, and the /etc/tsuru/tsuru.conf matches only this daemon.\n. We change the way we handle quota. You'll need to run a script to fix it in MongoDB, you can save the following in a JavaScript file:\ndb.users.update({}, {$set: {quota: {limit: -1, inuse: 0}}});\ndb.apps.update({}, {$set: {quota: {limit: -1, inuse: 0}}});\nAnd then run:\n% mongo <dbname> <filename.js>\nI will update our release notes. Thanks for reporting :)\n. What's the value of docker:registry setting?\n. Please try just docker-registry.mycloud.com:8080, without the http prefix.\n. We don't have multiple provisioners anymore, and now we have different sections for installing and managing, that covers what we needed in this issue.\n. ssh agent no longer exists :) Closing this issue.\n. @cweagans what's suggested above is using an object storage like S3. So both Swift and Ceph Object Storage qualify. \nDoes Flynn support connecting apps to Ceph Block Storage or does it use Ceph just like S3?\n. Ceph Block Storage is like NFS (from the Block Storage user point of view). Ceph Object Storage is like S3.\nAs far as I can tell, mounting a Ceph block storage inside a container would require fuse, which is not possible in a Docker container, but we will run some experiments. Thanks!\n. I think we can close this issue now that we use the \"tsuru\" organization. What do you think?\n. Unfortunately this won't work. Each app has its own image. Currently there are two solutions:\n1. update the application image\n2. recreate the application\nWe should think about other solutions, but I don't have any ideas right now. Do you have any suggestion?\n. It doesn't make any difference whether we pull or not the image every time. We don't use the image. Whenever I create an app named \"myblog\" from the \"php\" platform, Tsuru will use the php image to create the myblog image and then\nThe image used by an application is a fork of the platform image, created by the time of the first deploy, so updates in the platform image do not affect the image of the application.\n. @guestisp there is a trade-off on being fast most of the time versus being always up to date. So far, we have chosen the fast path because it makes more sense for us, but you do have some relevant points. Anyway, we still want to have this fast path available.\nSo, on every 10 deploys, tsuru will pull the platform image to avoid the multilayer issue. One way we can fix your issue is to make this number configurable. Whenever it equals to 1, tsuru will always build the container from \"scratch\" (scratch == the platform image).\nWhat do you think?\n. @nightshade427 hmm, I haven't thought about that. Could you explain what you're thinking of?\n. @nightshade427 sorry, I miscommunicated. My doubt is about the configuration. At a first glance, I thought about a global setting. Do you think it makes sense to have it as an application setting? How do you imagine the user interface for that? A parameter for app-create? An entry in app.yaml?\nThanks!\n. I've just tested it and it no longer happens. Looks like this was the best kind of issue: somehow it fixed itself :)\n. I don't think this is a bug. What happens when you run tsuru on tinycore64 and why should it work with tinycore?\n. Thanks, this is related to #442 and #458.\n. It's \"solved\". I will add a test for the case and run some tests with Vagrant before making a release.\n. @nightshade427 sorry for the giant delay, we're still trying to fix it on saucy, but it seems to work on precise.\nWhich version of Ubuntu you're using?\n. #633 will probably fix this.\nThe problem is with the queue. This code checks whether the units in the message are started, but it's possible that the queue handler runs before collector updates the units of the app.\nAnother possibility is to change the list of units before enqueuing the message, which is a little harder. The unit-agent is the way to go :) \n. It affects tsr 0.3.3. Previous versions are not affected. Which version of tsr you're using?\nI have a fix in mind, later today it will be fixed.\n. Actually, this is an issue on docker-cluster. Fixing there.\n. Fixed and released in tsuru-server 0.3.10.\n. It should not be normal. Can you list the items in the queue?\n. I will try to reproduce this. The error \"Failed to get message from the queue\" means that there are no messages in the queue, which is strange in your case, since you have so many records in Redis. I still think that the queue itself is empty, but we're probably doing something else wrong.\n. I think redismq overcomplicate the problem. We could use plain redis, with a limited list. So, every queue would be a list in redis.\nIn terms of calls, Put would be:\nRPUSH <key> <value> \nLTRIM 0 <list-size>\nAnd Get would be:\nLPOP <key>\nWhat do you think? That would remove the dependency in the redismq package, while still using Redis for the work queue. redismq is good at solving problems that we don't really have (multiple consumers).\n. The consumer is the same, but it's distributed. It doesn't matter whether we have 1 or 10 machines, Redis will handle this nicely (we can use MULTI for RPUSH + LTRIM), and LPOP is atomic.\n. Do you want to do this?\n. Sure, I will do it later today.\nHere are snippets that call Queue.Put:\nhttps://github.com/globocom/tsuru/blob/master/app/queue.go#L220\nhttps://github.com/globocom/tsuru/blob/master/provision/juju/queue.go#L118\n. What errors are you getting?\n. Do you have multiple docker nodes? Are you using a private registry?\n. As of tsuru-server 0.6.0, round robin is known to be working fine. Closing this issue. Please reopen if you find any issue.\n. It's supposed to remove the image: https://github.com/globocom/tsuru/blob/4073fbfe52c4151082f467f39df604e7d15a8405/provision/docker/provisioner.go#L196\nIf it's not removing, this is a bug :(\n. @guestisp do you mean the image with the name of the app?\n. I don't think it makes much difference to remove the platform image, keeping it is good, because in theory we will always be using it, don't you think?\n. Not really, you just need to push it to the registry. Tsuru will always run a docker pull before creating containers.\n. But yeah, when you opened the issue Tsuru did not do that, now it does :)\n. I don't think this is going to be merged as-is, closing the pull request right now.\n. Yep, but for versions 0.8.7, 0.8.8 and 0.8.9.\nThese are harder to track because we don't have tags for them. We could split the repository.\n. There's no queue in tsuru anymore, so there's no regenerate-apprc anymore. Closing this issue.\n. tsuru deploy is a bad name. \"deploy\" is a verb, an action. When I read \"tsuru deploy -a appname\", I think you're deploying the app appname, not asking for the list of deployments.\n. LGTM\n. Sorry for the giant delay. It looks good to me, perhaps some nitpicks:\n- split the function in smaller parts. It's already a monster :s \n- make the TSURU_APP_DIR an environment variable that is available in all applications, just like TSURU_APPNAME and TSURU_HOST\n- document the new settings\nIf we want, we can fix all these things in the future.\n@andrewsmedina do you want to merge it?\n. We now have app locks, so this bug is no longer possible. Thanks for reporting!\n. I've updated the issue description to make it clear how badly I messed up the default scheduler. I'm fixing it right now. I will issue a new release as soon as it's fixed.\n. @nightshade427 Please upgrade to 0.3.10 and give it another try, and sorry for breaking your cluster :(\n. \\o/\nIs it ok to close this issue?\n. Thanks for reporting. Can you try again with the last master version?\n. Sorry, I've miscommunicated myself. I removed this package earlier today, it was broken and unused. Can you confirm your local repository is up to date?\nI've just managed to build it in a brand new Ubuntu VM:\n% mkdir -p $GOPATH/src/github.com/globocom\n% cd !$\n% git clone git://github.com/globocom/tsuru.git\n% cd tsuru\n% make get\nInstalling production dependencies... ok\nInstalling test dependencies... ok\ngo get github.com/kr/godep\ngodep restore ./...\ngodep go clean ./..\n. @jblancett can you give it another try? Thanks!\n. Cool. Is it ok to close this issue?\n. Thank you!\n. @nightshade427 If it uses go's standard http package, the answer is yes.\n. @nightshade427 yep, and an advantage would be able to explore parallelism, because Go runtime is able to explore more than one processor.\nBut I don't know gorouter, I cannot say it's better :)\n. I will review and fix this page.\n. @jezdez can you confirm that the post-receive file exists in the bare template \"hooks\" dir?\n. Are TSURU_HOST and TSURU_TOKEN environment variables defined in the /etc/profile file?\n. Looks like this is a missing step from our docs. Sorry about that.\nYou will need to export two environment variables, one with the HTTP host of the Tsuru API (TSURU_HOST) and the other with a token to authenticate with the API (TSURU_TOKEN). The easiest way to do that is adding these environment variables to the /etc/profile file, by running the following command:\nbash\n$ cat >> /etc/profile <END\nexport TSURU_HOST=http://localhost:8080 # the address of your tsuru server\nexport TSURU_TOKEN=`tsr token`\nEND\nAs you can see, the command tsr token will generate a new token for you.\nThere is another way, where tsuru configures the post-receive script remotely, so we can \"hard code\" the host and the token in the script itself. We plan to describe this approach in the correct version of the documentation.\n. @jezdez can you share the gandalf.conf file? Maybe it's missing the bare-template setting.\nIt's probably /etc/gandalf.conf.\n. Ops, another step missing from our docs. Sorry about that. Are you able to deploy the application now?\n. 0.5.0 is coming, with this issue fixed :)\n. @jezdez can you give it another try?\n. This is fixed, as we now define the address of the app on app creation.\n. Yep. We want to make the authentication method pluggable as well, so we would be able to support stuff like oauth, openid, mfa, etc.\nWe will need this within the next months, so it's not far.\n. I spoke with ibm guys, they're doing this issue in their enterprise edition of tsuru. We can close this issue.\n. What about just move-containers?\n. Closing this issue in favor of #758 :)\n. Hi @pulecp, have you run the syncdb command?\n. Looks like the app is running apache... What's the platform of the application? Is it Python?\n% tsuru app-info --app mysql-api | grep Platform\nIf it's Python, could you confirm how you created the image? And what's the content of the Procfile?\nThanks!\n. Are you using the address of the mysql-api application, as reported by Tsuru? Do you have a hipache instance running?\n. Ah, that's why there's this apache2 server. Please let me know about you progress :)\n. @pulecp cool! Are you able to bind your application to the instance and access the database?\n. @pulecp if the apprc file has been serialized (check this with the command described by @guestisp), could you confirm that the container has network access to the MySQL instance?\nSomething like:\n% tsuru run --app blog2 'nc -z $MYSQL_HOST 3306'\nThe output should be something like: Connection to <host> port 3306 [tcp/mysql] succeeded!.\nIf it works, try restarting the application, just in case:\n% tsuru restart --app blog2\n. Seems like it's working. Can you try restarting the application?\n% tsuru restart --app blog2\n. @pulecp can you confirm that the wp-config.php file contains the values from the apprc file?\n. I think it's a bug with the way we get the address of the unit. tsuru exposes the unit address to the service API, and mysqlapi authorizes the address provided by tsuru.\n@guestisp ALLOWED_HOSTS is the list of hosts that can access a Django project via HTTP, when DEBUG is disabled. It has nothing to do with the hosts that are allowed to access the database.\n@pulecp can you share your tsuru.conf file?\n. @pulecp can you confirm that the user was authorized only for 127.0.0.1?\n. I see. That's indeed a bug. It's because tsuru will take the address of the docker node and use it to bind the container to the service instance.\nI don't see how we can fix it right now, but I will keep this issue open and mark it as a bug.\n. Using latest version of tsuru and registering the docker node with a public address is known to work. I'm closing this issue.\n. Hi @drowe, I should improve our docs for this. When you call tsuru-admin docker-node-add, you should not use 127.0.0.1 in the host of the node. How did you call it?\n. @lucciano tsuru-bootstrap doesn't add any service, you need to do it yourself. Did you register the mysql service within your tsuru setup?\nThanks!\n. What do you mean?\n. \\o/\n. What if the active instance goes down before unlocking the mutex?\n. There's a mutex, because the process is parallel within a single instance. The issue described by @cezarsa  is that this mutex is not distributed across multiple instances. Having an active-passive environment makes the inconsistency less likely to happen, but doesn't fix it.\n. We've removed the ssh-agent dependency without removing the use of ssh and without requiring lxc-execute, so we're good now.\nClosing this issue.\n. ops! x)\n. This has been improved already, so I'm closing this issue.\nThanks for opening it in the first place!\n. Sorry about that, it's fixed now. Please run:\n% brew update\n% brew install tsuru-admin\n. We should handle SIGTERM too.\n. \n. @tarsis is it done? :)\n. Hmm, this is an interesting feature. How is it configured within hipache? Is it just another frontend: entry?\nFor example:\n127.0.0.1:6379> rpush frontend:*.myapp.configured-domain.com myapp http://192.168.1.123:45987 http://192.168.1.123:45988\n(integer) 3\n127.0.0.1:6379> lrange frontend:*.myapp.configured-domain.com 0 -1\n1) \"myapp\"\n2) \"http://192.168.1.123:45987\"\n3) \"http://192.168.1.123:45988\"\n. Interesting. What's the output when you try to define a cname with wildcard?\n. I understand. I think it's a fair feature to have.\n. Should it be TSURU_APPDIR?\n. The problem is the =.\nDuplicate of #738.\n. Wow, this is old as hell. I will fix the documentation.\n. Related to the client and the server, they don't need to live in the same machine. You may run the client on your laptop and the server in your data center.\nI'm reopening the issue, please let us know if there's other ways we can help you.\n. @akshitha123 may I close this issue?\n. Thanks!\n. Sorry for the delay. How did you install tsuru? Did you use the deb package?\nCan you add the following line to the /etc/default/tsuru-server file?\nexport HOME=/var/lib/tsuru\nAlso, it looks like there's something listening on the port 8080 (maybe tsuru itself). Can you check it with netstat?\n% netstat -an | grep LISTEN\nLast, but not least, please add to your configuration file the \"juju:bootstrap-collection\" key. You can call it \"juju_bootstrap\". I've fixed the configuration file in the package to include this setting.\n. Hi @akshitha123. Did you run juju bootstrap? The docs aren't clear, but you need tu run it with the tsuru user:\n% sudo su - tsuru\n% juju bootstrap\nThen you will need to configure the /var/lib/tsuru/.juju/environments.yaml file according to your environment (open it and set AWS credentials and bucket).\n. @akshitha123 did you manage to get it working?\n. Ops! Sorry about that :(\n. Hi @akshitha123, is it working for you or did you give up? Is there anything we can do to help you? :)\n. @thbeh can you try removing the tsuru/php image and rebuilding it? It's probably a bug related to some stale image in the public docker index. We removed our image from there. Try running:\n% docker rmi tsuru/php\n% docker build --no-cache --rm -t tsuru/php https://raw.githubusercontent.com/tsuru/basebuilder/master/php/Dockerfile\nSorry for the mess.\n. Cool! Please let us know if you need any further help!\n. container(s)-move already behave like this. We ignore failures in the remove, so I'm closing this issue :)\n0.6.0 is closer now \\o/\n. tsuru uses gandalf for serving git repositories. You're probably already using it. But, in order to use gandalf, you will need to:\n1. install and configure gandalf: http://docs.tsuru.io/en/latest/docker.html#installing-gandalf\n2. change tsuru.conf, so it knows what's the address of the gandalf API (it's the git:api-server)\n. @thbeh may I close this issue?\n. Thank you!\n. Fair enough. \n. We can change the bind/unbind URLs to adapt this change:\nBind would be a POST to /resources/<instance-name>/bind, and unbind would be a DELETE to /resources/<instance-name>/bind, and both calls would take the same parameters.\nExamples, from curl calls:\n% curl -d 'app-host=app.cloud.tsuru.io&unit-host=192.168.1.1' service-api.com/resources/<instance-name>/bind\n% curl -XDELETE -d 'app-host=app.cloud.tsuru.io&unit-host=192.168.1.1' service-api.com/resources/<instance-name>/bind\n. It's never as easy as we think. Reopening...\n. I believe @cezarsa is already working on that.\n. May we close this issue now?\n. Thanks!\n. Hi @wpjunior, thanks for contributing!\nAre you maintaining the package?\n. Cool! As we improve our versioning scheme for the client, we may integrate it with the package in the future.\nThank you very much!\n. Indeed it does, thank you!\n. I don't think we're moving towards this direction, yaml is just fine :) \n. Does this issue still make sense?\n. Gandalf 0.4.1 now supports the readonly-host configuration variable.\nI'm releasing it on our ppa right now.\n. As of tsuru 0.6.0, we don't have a centralized SSH key anymore. Now tsuru generates a key pair per container, and handles all the key stuff. This is no longer valid.\n. Let's investigate this issue :)\n. Seems like the problem is with circus, and it doesn't affect the latest version of tsuru, because it no longer uses circus for serializing environment variables. Anyway, the code still exists on tsuru-circus, I'm going to fix it there.\n. This issue is now fixed, you will need to upgrade to tsuru-circus 0.8.3.\nThanks for reporting, and sorry for the huge delay!\n. I'm putting this issue on hold. See dotcloud/docker#7020.\n. docker/docker#7020 is now fixed. It will probably be included in the 1.3 release of Docker.\nI'm adding this issue to the 0.8.0 milestone.\n. Moving this to milestone 0.9.0, because we don't want tsuru 0.8.0 to depend on Docker 1.3.\n. I've removed the easy tag. It's not that easy.\n. Hi @tepafoo, indeed it was and the Dockerfile is now fixed, but the issue is the \"Platform successfully added!\" message.\n. That's a nice suggestion, thanks!\n. The problem is that app.SerializeEnvVars is called in background. There are some possible solutions:\n- Don't spawn a goroutine for SerializeEnVars\n- Keep the app locked until SerializeEnvVars exits\n- Always reload the app from the database inside SerializeEnvVars (or start the gorountine with two calls app.GetAppByName + SerializeEnvVars)\n. @minhdanh tsuru will capture anything that is sent to the standard output and standard error. You will need to adapt your process to log everything to these streams, then you will be able to see your access log using tsuru log.\n. Since tsuru-server 0.6.0 is out, we now fully support node management via tsuru-admin.\nI'm closing this issue, feel free to open new issues if you find any issue!\n. @jasoncox is it your second node? Are you using a docker registry?\n. @jasoncox I'm glad you figured it out. It's not entirely your fault, it's is poorly documented :(\nThere's no mention to the registry in our docs. We need to document multi-node setups on Docker.\nThis is related to issues #499, #634, #643 and #663.\n. @jasoncox you can bootstrap a single instance server with tsuru/now. tsuru-bootstrap adds vagrant to tsuru-now.\n. We changed how we handle logs, and it's now persistent :)\n. This issue is now fixed. The problem was the way circus handled \"set\" commands. Whenever a new \"set\" command is issued, circus replaces the process. The problem is how tsuru replaces the process: the replacement process starts before stopping the old one, and circus only stops the old process when the new is up and running, which never happens if the new process isn't able to bind to the 8888 port (the old process is still bound to it).\nThe solution, applied to tsuru-circus, is calling \"stop\" + \"set\" + \"start\" instead of just \"set\".\n. Indeed it is, my bad :(\nCan you post the output of tsuru-admin target-list?\n. @jasoncox looks like I really messed up :(\nI've just pushed the fix, can you upgrade tsuru-admin to 0.4.2?\nSorry for the mess!\n. Closed by 5190b931e30f227b317119fa8d165b6e03392fe4.\n. @jonaskac can you share your tsuru configuration? Which steps you took in order to get tsuru up and running?\nThanks for reporting.\n. You get this with both platforms? Can you check the owner of /home/application/current directory?\nTry something like:\n% tsuru run -a <appname> -- ls -la\n. I've removed 0.7.0 milestone, as we're unsure whether we want this feature.\n. This has been superseded by #1090.\n. It's no more! I will remove the stuff related to it from tsuru-deb right before releasing tsuru server 0.7.0, so we're not quite there yet :)\n. I've just pushed this feature. Before closing the issue, I will add more tests to the command.\n. @jonaskac yes, definitely. If your backing up process consumes too much I/O, CPU or any other resource, launching another unit for running the command would prevent slowness in your application due to resource fighting.\n. These are debug logs, but I must admit that they're not that useful. I will omit some of them, even when debug is on.\nThanks for reporting.\n. You can reset it in the database, but I'm curious: how did you end-up in this situation? Did the deployment fail and the app remained locked? \n. It has been implemented and released in the 0.6.0 version.\n. Most of the restrictions come actually from DNS, a label cannot have more than 63 characters and the characters restrictions also are inherited from DNS, so I'm marking this issue as invalid.\n. Do you mean replacing underscores with dashes? Users could end up with two different apps having the same DNS entry (e.g. my-app and my_app).\n. Not having the problem is easier.\n. @andrewsmedina what about at least warning users? I mean:\n% git remote -v\ntsuru   git@host:hello.git (fetch)\ntsuru   git@host:hello.git (push)\n% tsuru app-remove hello_world -y\nApp \"hello\" successfully removed!\nGood bye cruel world.\n. What's myservice. The service instance or the service itself?\nAlso, the callback would be just a path? Do we want to support query string in this path?\n. Good. I think it makes sense.\n. @jonaskac seems like a bug in circus.\nCan you try using ${CORDOVA_ENV} instead? Just to make sure that it's not misinterpreting the environment variable. Something like:\nyaml\nhooks:\n  restart:\n    before-each:\n      - cp www/js/config.${CORDOVA_ENV}.js www/js/config.js\n. @jonaskac does it work with tsuru run 'echo $CORDOVA_ENV'?\nIs it failing on tsuru run or in the hook as well?\n. @jonaskac It's because if your run tsuru run echo $MYVAR it will expand \"MYVAR\" on your machine and then execute tsuru. When you use \"single quotes\", bash doesn't expand variables. You can see the difference by running:\n% tsuru run echo $HOME\n% tsuru run 'echo $HOME'\nThe first will execute in the remote machine the command \"echo \" (for example, /Users/jonaskac), the second will execute in the remote machine the command \"echo $HOME\", and HOME will be expanded in the environment of your application.\n. This issue is on \"quarantine\" now. Let's see if travis gets more stable now. After getting some successful sequent builds, we can close it.\n. I mostly give up. Everything seems to be fine, but somehow travis is really slow for accessing Launchpad.\nEventually it will get better, or we will not depend on anything that is on Launchpad. Right now, I refuse to care. Good bye cruel world.\n. I ended-up adding support for the new quota scheme as part of the work for this issue. Now tsuru-admin has four new commands: show-user-quota, change-user-quota, show-app-quota and change-app-quota.\nEach of this command is also a new endpoint in the tsuru remote API.\n. Thank you, and sorry for the delay!\n. \"upload\" is also a good name for the command.\n. @nekrox could you elaborate better your use case?\n. @nekrox that's probably a subject for another issue, do you mind opening it?\nThanks!\n. Reopening, forgot the progress bar...\n. I'm removing it from the 0.7.0 milestone, we have tsuru deploy now and tsuru/basebuilder#39 will enable war deployment.\nWe also expect to allow users to specify memory amount in the future, and properly balance units across docker nodes, in an algorithm that is aware of the memory capability of the node. But this is future.\n. We have plans and war deployment now! :)\n. @bobobo1618 can you share the output of tsuru app-info -a <appname>?\n. This \"error\" state is guilty. Is the app still running? Can you send requests to it?\n. Could you please post the output of the command below?\n% tsuru run -a <appname> /home/application/.venv/bin/circusctl status\nThanks!\n. @msabramo does it get more stable with the /etc/hosts change?\n. I see. We should look into something more reliable than xip.io. Can you try something like tsuru-api.192.168.50.4xip.io:8080 as target and see if that helps? Maybe the problem is with using .xip.io instead of something.<ip>.xip.io.\nRegarding the amount of memory, we already allocate 1GB, I think that allocating 2GB can be too intrusive. Users can always edit the Vagrant file.\nIt's nice to know that the talk helped you getting started, please let us know if you need further help. I'm floating around hotel, conference, airport and other kind of poor wifi connections, so it has been hard to keep online for long time in our IRC channel, but that should change next week :)\n. Hi @christianromney, thanks for contributing! Unfortunately, this is a dup of #873.\n. The lock is member of the app, and app-remove removes the app from the database. When there's no app, there are no locks. Something else is going on, we need to investigate.\nWhen the app is removed, the last step is removing it from the database, before that, tsuru does the following:\n- destroy the app in the provisioner, in case of docker:\n  - remove each container of the app\n  - remove the image of the app\n  - remove the entry from the router configuration\n- remove the repository from Gandalf\n- invalidate the application token\n- free the user quota for creating a new app\n- drop the log collection associated to the app\nYou can check for failures in any of these steps in the log. Can you see if you catch something there?\nThanks for reporting!\n. Ops, I've misunderstood your issue, sorry about that. Please ignore my previous message.\nThe problem in ignoring locks on app-remove is that we may end with some inconsistency in the database, gandalf, or something else.\nImagine the app is locked because we're adding new units, and before ending the process we remove the app, what will happen to the new unit? It may be removed by the provisioner, or it may left running forever (causing the image removal to fail).\nWe need to detect these eternal locks and fix them. In order to prevent other stalls, we could also have a tsuru-admin command for forcing an app removal.\n. @bobobo1618 we've thought about having an \"expires\" on locks, but as soon as you have a hard timeout, someone will legally hit it :(\nMaybe letting tsuru-admin do something would help. As we track down causes for eternal locks.\n. @bobobo1618 is the image committed in the host, with the proper repository name? Are you using a private registry?\nThanks for reporting!\n. @bobobo1618 don't you get any \"please wait\" from the tsuru api while deploying it?\nCan you try running pip install -r requirements.txt inside an isolated docker container and see whether this work? We can use the dockerfile/python image:\n% docker run dockerfile/python sudo pip install <package>\n. Hi @bobobo1618, sorry for the huge delay, do you have any updates on this? Thanks!\n. I will close this issue, lot has changed since in one year. @bobobo1618 please let us know if you face this or any other issue again in the future.\n. Pasting some chat with @jblancett here:\n\n. Hi @sroze, actually you can, either by changing the provided hook, or by pushing anything to tsuru's master, I mean:\n% git push tsuru <local branch, tag or commit>:master\nFor instance:\n% git push tsuru 0.5.0:master\n% git push tsuru production:master\n. Reopening, because we need docs! x)\n. We no longer require the concept of \"version\", so I don't think that this issue makes sense anymore.\n. It depends on which version of docker you're using. Latest docker version (1.2.0) introduced restart policies, which tsuru doesn't support yet. With previous version of docker, you can run docker with the -r flag.\n. I will investigate this issue. Thanks for reporting!\n. @jblancett thanks for it. It's released in launchpad already.\n. Thanks!\n. Nice change, just a nitpick.\n. @andrewsmedina and quotas will be team based as well?\n. @andrewsmedina so what prevents a user from create one million of apps by just creating another team?\n. We've renamed the package, sorry about that, please do:\n% sudo apt-get remove tsuru\n% sudo apt-get install tsuru-client\n. I believe it's the same as #906, as of tsuru-server 0.6.2, now you need to add new docker nodes using tsuru-admin docker-node-add, instead of listing them in the tsuru configuration file.\n. @jonaskac can you provide the command you're running? Thanks!\n. Hmm, I just had a look in the source: this error happens when there are no nodes in the cluster. Did you run tsuru-admin docker-node-add?\nI'm marking this issue as a bug, so we properly handle this case, with a better error message.\n. Hmm, it's possible. archive-server generates archives in background, so if the repository takes sometime to generate, it may reply that it's still generating. As you can see this code: https://github.com/tsuru/archive-server/blob/master/server.go#L77.\nWe should adjust our script to wait if it gets Content-Type text + body == BUILDING. Marked as a bug.\n. @jonaskac can you try with the hook that I've pushed? Thanks! Here is the link: https://github.com/tsuru/tsuru/blob/1957fe89885050295cf0fef27ce1c677f25bfae8/misc/git-hooks/pre-receive.archive-server\n. Cool! Let's keep this on our watch-list! :)\n. With the latest version of our platforms, it's fixed :)\n. I think it's worth, but please use 2375 port instead of 4243, this it the official Docker port now.\nThank you!\n. @msabramo did it work after upgrading tsuru-unit-agent? May we close this issue?\n. The latest version of tsuru client is 0.11.1. Do you mind running apt-get show tsuru-client? tsr 0.6.x requires tsuru 0.11.x, tsr 0.7.x (current master) requires tsuru-client 0.12.x (current master).\n. Thank you!\n. That's nice, thank you! :)\n. It's merged, but GitHub is dumb sometimes. Manually closing it :)\n. Hey @msabramo, we're working to enable the usage of virtualenv in the Python platform, we need some changes in tsuru itself.\nRegarding the virtualenv name, we've renamed it to .circus_env already, and we will probably have something like .app_env as well.\nThanks for reporting this.\n. We're ready to support virtualenvs in our next release, closing this issue.\n. We've somehow started it at diaats: https://github.com/tsuru/diaats\nStill needs lots of improvements, though.\n. Hi @jblancett, next version of tsuru will have the command app-set-team-owner in the tsuru client. This command will have two different behaviors:\n1. When the user is not an admin, he/she can set one of the teams that he/she is member of as the owner of the app\n2. When the user is an admin, he/she can set any team as the new owner of the app\nThis will be included in tsuru-client 0.13.0 and tsuru-server 0.8.0. You can try it using our nightly build packages or running master.\nThank you!\n. Thanks for handling this! Just the gitignore nit and we're good to go.\n. Thank you! :)\n. Tomorrow, with luck.\n. Reopening, we really need to support offline commands.\n. Closed via tsuru/crane@987d3e3a1250f5d0639c4b605852f7260e1c2115 (wrong commit message there, sorry).\n. Additional information: it happens only when the user is admin.\n. I will try to handle this pull request within the next days.\n. We're actually going to leave this for someone else x)\nI will close this pull request, because we're failing to get feedbacks from the PR author. Still hoping to get some OpenStack support in the future! :-)\n. I don't think so. The token belongs to the user, we should not hand it over to someone else. Even worse is the case where OAuth is enabled: is it fair to give a GitHub user token, owned by tsuru, to a third party service? I mean, tsuru asked for permission to access some data, and then give the key to this data to a third party service. Sounds like some kind of violation, but I'm unsure, I'm not very familiar with OAuth.\nIf the service needs some tsuru user's data, we should provide an authorization flow for that in the API, so the service gets an exclusive token (scoped, ideally). If the service needs data that is in the OAuth provider, the service should handle this, or we might think of a different flow for generating tokens, but I don't think that tsuru should intermediate authentication between the service and the OAuth provider.\nCould you elaborate on your use case? Currently, there's no shared authentication between tsuru and any service.\nThanks!\n. We're now cherry picking on minor releases, so we can close this issue.\n. We have now an \"advanced\" healthcheck that will be invoked when we access /healhtcheck?check=all.\nCurrently, it will check:\n- routers\n- docker (node and registry)\n- database\n- gandalf\n- iaas (CloudStack and EC2)\nWe may add others checkers in the future, it's quite simply, just using the hc package. \n. Hey @msabramo. Yes, it is one of the Docker host, I'm sorry tsuru doesn't provide which node failed, we should definitely improve it.\nAre you able to track down which node is failing?\n. I don't think that it makes sense for a guesser to talk to the API to ensure that the app exists. The goal of the guesser is to guess a name, so it returns a string or an error.\nThe proper flow would be to return the current directory name and then let the command use it as the app name, without checking whether the app exists in the API, just like GitGuesser does. I know that this might cause a confusion. For instance:\n% tsuru app-info my-app\nError: App my-little-app not found.\nWhere does \"my-little-app\" come from? We could track down the guesser and improve the error message:\n% tsuru app-info\nError: App my-little-app not found (name guessed from the current directory)\nOr:\n% tsuru app-info\nError: App my-little-app not found (name guessed from git remote tsuru)\nLast, but not least, this PR broke the build: https://travis-ci.org/tsuru/tsuru/builds/40730618\n. I don't see any progress here, so I will close this issue.\nThanks for contributing!\n. Hi @kinosang, care to share the error when restarting the API? It should be in the file /var/log/upstart/tsuru-server-api.log.\nDo you get any error in the syslog? Can you have a look there? \nThanks for reporting.\n. Can you share what else is in the configuration file? You can hide the values of the entries, I just want to ensure that it is properly formatted, indentation matters in YAML.\nThank you again!\n. Please try removing the commented part, or just move it to the end of the file.\nI have the impression that I've seen some failures related to comments in the config file in the past, please let me know whether this solves the problem, so we can try to properly reproduce and report a bug in the config parsing.\nThanks!\n. Will try to reproduce.\n. @kinosang managed to get it working. Here is my configuration file:\n``` yaml\nlisten: \"0.0.0.0:8080\"\nadmin-listen: \"127.0.0.1:8888\"\nhost: http://192.168.50.4:8080\ndebug: true\nadmin-team: admin\ndatabase:\n  url: 127.0.0.1:27017\n  name: tsurudb\ngit:\n  unit-repo: /home/application/current\n  api-server: http://127.0.0.1:8000\n  rw-host: 192.168.50.4\n  ro-host: 192.168.50.4\nauth:\n  user-registration: true\n  scheme: native\nprovisioner: docker\nhipache:\n  domain: 192.168.50.4.nip.io\nqueue: redis\nredis-queue:\n  host: localhost\n  port: 6379\ndocker:\n  collection: docker_containers\n  registry: 192.168.50.4:3030\n  repository-namespace: tsuru\n  router: hipache\n  deploy-cmd: /var/lib/tsuru/deploy\n  segregate: true\n  cluster:\n    storage: mongodb\n    mongo-url: 127.0.0.1:27017\n    mongo-database: dockercluster\n  run-cmd:\n    bin: /var/lib/tsuru/start\n    port: \"8888\"\n  ssh:\n    add-key-cmd: /var/lib/tsuru/add-key\n    user: ubuntu\n  sharedfs:\n    hostdir: /home/vagrant/storage\n    mountpoint: /storage\n    app-isolation: true\n```\nI will now try with your config, changing some values.\n. Just got it working using your config, can you confirm that your configuration file doesn't mix tabs and spaces?\nHere is the config:\nyaml\nlisten: 0.0.0.0:8080\nhost: http://192.168.50.4:8080\ndebug: true\nadmin-team: admin\nauth:\n    user-registration: true\n    scheme: native\ndatabase:\n    url: localhost:27017\n    name: tsurudb\nqueue: redis\nredis-queue:\n    host: localhost\n    port: 6379\ngit:\n    unit-repo: /home/application/current\n    api-server: http://localhost:8000\nprovisioner: docker\ndocker:\n    segregate: true\n    router: hipache\n    collection: docker_containers\n    repository-namespace: tsuru\n    deploy-cmd: /var/lib/tsuru/deploy\n    cluster:\n        storage: mongodb\n        mongo-url: localhost:27017\n        mongo-database: cluster\n    scheduler:\n        redis-server: localhost:6379\n        redis-prefix: docker-cluster\n    run-cmd:\n        bin: /var/lib/tsuru/start\n        port: 8888\n    ssh:\n        add-key-cmd: /var/lib/tsuru/add-key\n        user: ubuntu\n    registry: 192.168.50.4:3030\n    sharedfs:\n        hostdir: /mnt/storage/dockerstor\n        mountpoint: /storage\n        app-isolation: true\nhipache:\n    domain: 192.168.50.4.nip.io\n    redis-server: localhost:6379\n. Nice! Is it working? May I close this issue?\n. I'm reopening this issue, there's some bad behavior causing some strange characters in the output:\n\nThe name of the Procfile is actually \"Procfile\", not \"=Procfile\", and I don't know where that weirdo \ufffdHOSTNAME=e1bba89e7018 comes from.\nI believe we're mixing some Docker special characters with the command output.\n. This is no longer valid due to recent changes in the way we handle processes and environment variables.\n. This is now done. mongoapi was the Barrichello API.\n. Thank you!\n. \n. \n. Thank you!\n. Since we took a different path, I'm closing this issue.\n. We could try to get a better diagnostic of the error, but I don't think Gandalf can be too specific, because it doesn't talk to tsuru when receiving code and it has no notion of teams, only users and repositories, so it can only tell that the user doesn't have access to the repository.\n. @msabramo do you think we can close this issue now? We've improved both tsuru-bootstrap and our contributing page.\n. Thank you!\n. Since #1020 is merged, can we close this issue?\nFTR, I've missed it before as well, thanks for opening this issue and sending the pull request!\n. Thank you!\n. The full log deployment is now available in the dashboard.\n. We have app-plan-change now.\n. Thank you!\n. Hey @msabramo, thanks for working on this and sorry for the delay. Could you please add a test?\n. @msabramo can I take this pull request over and provide the needed fixes and tests?\n. This is now merged. I thought github would close this automatically.\n. This issue is now pretty straightforward, something like:\n```\nimport \"github.com/tsuru/hc\"\nfunc main() {\n    ...\n    fmt.Println(\"Checking the status of components:\")\n    results = hc.Check()\n    // loop through results printing status, failing if result.Status is not equal to hc.HealthCheckOK\n    ...\n}\n```\nHere's how the healthcheck handler works: https://github.com/tsuru/tsuru/blob/9a921e4fa5876d0ffef218b50b61af9d11233fba/api/healthcheck.go#L23:#L35.\n@msabramo do you wanna work on it? Thank you!\n. We haven't see many failues in travis recently, maybe it was a temporary issue with MongoDB?\nIt started happening suddenly, and then stopped happening suddenly. @msabramo what do you think?\n. @dcarley sure! Seems to be OOM errors again. I'm thinking about creating a fork or a branch for further investigation.\n. @dnsaoki2 has just fixed it via cf3a571ad08c92f129e175c68d0f2ba2a9b07738.\n@dcarley thanks for raising it again1\n. Seems like they didn't include EBSOptimized option in the RunInstances type. I've just opened go-amz/amz#23.\n. Hey @msabramo, thanks for contributing! I don't think we should have a comment that is specific to an editor in our files.\nUsers that care about file type detection in their preferred editor, can add special comments to their own tsuru.conf file, but we should get specific here. If we start adding stuff that are specific to editors, at some point we will have to draw a line, so I'd prefer to draw the line today.\nThank you again, and sorry for not merging this one!\n. I think we can supersede this issue with the filters in app-list (see #1134).\n. Closing this issue, because it was a question and it's now answered. Please feel free to open new issues in the future!\n. Thank you!\n. We aren't going to remove it, see #1137.\n. I think so, running some tests can prove it\nFTR, you can link a selected area: https://github.com/tsuru/tsuru/blob/master/app/app.go#L402:L404.\n. What's the output that you get when running go test ./...?\n. Closed via #1118.\n. Nope, you can work on it, if you will.\n. @dcarley thank you for pointing it!\n. @wpjunior do you wanna work on it?\n. This is different because we're concatenating only in the end of the string.\n. Thanks!\n. @lucasweiblen the code looks good, can you rename the test \"TestProvisionerAddUnitsWithoutContainers\" to \"TestProvisionerAddUnitsWithNoDeploys\"?\nThanks!\n. LGTM.\nLet's wait for @cezarsa :)\n. Thanks!\n. @lucasweiblen could you please add a test for this? This test can help us in the case we change GetRepository to return a pointer, for example (currently it doesn't, so this code is still safe).\nYou can do something like TestAppMarshalJSON, but without the call to repository.Manager().CreateRepository(\"name\", nil), and expecting the repository to be empty.\nThanks for contributing!\n. The name is good, thanks!\n. \"no reachable servers\" is an error from our mongodb driver, we should definitely improve it.\nCan you ensure that you can connect to the configured mongo-url? You can run the command mongo 192.168.25.12:27017 to check that.\nThanks for reporting!\n. No problem, the error didn't help at all. I've just created issue #1125 for improving the error message.\nThanks for reporting.\n. Closed via #1126.\n. Hi @mdekkers. Yes, it has been moved and the documentation has been fixed by #1122, but we haven't updated the live documentation yet.\nThanks for reporting.\n. The verbose mode is better, because some commands match multiple calls in the API, so we would not be able to determine which JSON to display.\n. So, here is some progress (testing on Windows 8.1):\n\nMy tsuru-bootstrap VM is down at the moment, I will let it provisioning my VM and get some sleep now, tomorrow morning I get back to tests!\nI can provide a 32 or 64-bits executable for users willing to test it on other Windows versions, I have access only to Windows 8.1.\n. os.IsNotExist doesn't behave as expected on Windows:\nC:\\Users\\f>tsuru wat\nexec: \".tsuru/plugins/wat\": file does not exist\n. app-shell kinda works:\n```\nC:\\Users\\f>tsuru app-shell -a tsuru-dashboard\nubuntu@b1d8218b5ac3:/$ ls\nbasebuilder.tar.gz  \u2190[0m\u2190[01;34mboot\u2190[0m  \u2190[01;34metc\u2190[0m   \u2190[01;34mlib\u2190[0m    \u2190\n[01;34mmedia\u2190[0m  \u2190[01;34mopt\u2190[0m   \u2190[01;34mroot\u2190[0m  \u2190[01;34msbin\u2190[0m  \u2190[01;34m\nsys\u2190[0m  \u2190[01;34musr\u2190[0m\n\u2190[01;34mbin\u2190[0m                 \u2190[01;34mdev\u2190[0m   \u2190[01;34mhome\u2190[0m  \u2190[01;34mlib6\n4\u2190[0m  \u2190[01;34mmnt\u2190[0m    \u2190[01;34mproc\u2190[0m  \u2190[01;34mrun\u2190[0m   \u2190[01;34msrv\u2190[0m\n\u2190[30;42mtmp\u2190[0m  \u2190[01;34mvar\u2190[0m\nubuntu@b1d8218b5ac3:/$ cat /etc/passwd\nroot:x:0:0:root:/root:/bin/bash\ndaemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin\nbin:x:2:2:bin:/bin:/usr/sbin/nologin\nsys:x:3:3:sys:/dev:/usr/sbin/nologin\nsync:x:4:65534:sync:/bin:/bin/sync\ngames:x:5:60:games:/usr/games:/usr/sbin/nologin\nman:x:6:12:man:/var/cache/man:/usr/sbin/nologin\nlp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin\nmail:x:8:8:mail:/var/mail:/usr/sbin/nologin\nnews:x:9:9:news:/var/spool/news:/usr/sbin/nologin\nuucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin\nproxy:x:13:13:proxy:/bin:/usr/sbin/nologin\nwww-data:x:33:33:www-data:/var/www:/usr/sbin/nologin\nbackup:x:34:34:backup:/var/backups:/usr/sbin/nologin\nlist:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin\nirc:x:39:39:ircd:/var/run/ircd:/usr/sbin/nologin\ngnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologi\nn\nnobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin\nlibuuid:x:100:101::/var/lib/libuuid:\nsyslog:x:101:104::/home/syslog:/bin/false\nubuntu:x:1000:1000::/home/ubuntu:/bin/bash\nsshd:x:102:65534::/var/run/sshd:/usr/sbin/nologin\nubuntu@b1d8218b5ac3:/$ exit\nC:\\Users\\f>\n```\nThe issue is with the colors, I don't know if we care. Users can always disable colors in their current session.\n. Done for tsuru-client:https://github.com/tsuru/tsuru-client/releases/tag/0.15.2\nWe don't need for crane right now, but we will include a Windows binary in the next crane release! Closing the issue then :-)\n. This isn't only at master, as this change has been released in tsuru 0.15.1.\n. After some discussion, we decided to keep the -h and fix the panic itself, so we don't register the -h nor --help when these flags are already present.\n. \n. I'm closing this issue. We've finished all the changes in the tsuru code base, and there's now one last thing that we need to do in bs: add support for metrics, collecting them from Docker. I've just opened tsuru/bs#2 for handling metrics. \n. We have a direction: just create whatever exists in tsuru in Gandalf, just like the function in the start-up does today. Removing the brainstorm tag, it's now even easier.\n. LGTM\n@cezarsa @andrewsmedina any objections to merging it?\n. Hi @lucasweiblen, thanks for working on this.\nI'd prefer to have a \"Filter\" type, that declares the filters explicitly:\ntype Filter struct {\n    Name      *regexp.Regexp\n    Platform  string\n    TeamOwner string\n    UserOwner string\n}\nAnd then declare a method in the filter that builds the query:\nfunc (f *Filter) Query() bson.M {\n    return bson.M{\n        \"name\":      bson.M{\"$regexp\": f.Name.String()},\n        \"platform\":  f.Platform,\n        \"teamowner\": f.TeamOwner,\n        \"owner\":     f.UserOwner,\n    }\n}\nI know it doesn't look like it makes much difference, but I think it's a better choice when talking about semantics because (1) it's explicit that the name is a regexp (2) the type names makes it explicit that it's is a filter.\nWhat do you think?\n. Thank you!\n. Are you going to send a pull request to the tsuru-client repository as well?\n. Thank you!\n. @woutersterp can you see whether your container is running? Can you get anything from docker logs <container-id> in the Docker node?\n. Are you using our buildpack platform? As far as I can tell, it's broken :-( I was working on it, but got lost somewhere. I will try to fix it today and get back to you!\nSorry for the mess :-( If you're not using our buildpack platform, please let me know!\n. Cool, nice to know! I've opened gliderlabs/herokuish#15, that would fix tsuru. I will give it some time for taking some approach, if nothing happens, we may go with a fork of herokuish.\nThanks for reporting, and please do not hesitate to send any feedback regarding your tsuru experience!\n. Fixed by #1155.\n. See #1241.\n. It's implemented and tested at master, we now have a new setting for defining the maximum amount of workers.\n. Hi @mwduarte, this package that you showed should work fine. I've just opened #1154 so we can improve version reporting in the nightly package.\nThanks for reporting this issue! We're already working to fix it.\n. Thank you! Please include something like \"Closes #[issue-number]\" in future commit messages, so GitHub will automatically close the issue when the pull request gets merged!\nYou can also use other terms like \"Fix/Fixes\" (which is better for issues that are bugs, not the case for #1145).\n. Hi @mwduarte, that's indeed a great idea! We can prepend the name of the app to the container name. We could have something like:\nCONTAINER    IMAGE                                      NAME\nf38c20134f7f 10.0.2.5:3030/tsuru/app-staticapp:v4       staticapp/5d89a412bffb45b45200\nac6886b616e0 10.0.2.5:3030/tsuru/app-staticapp:v4       staticapp/7f886d0fbc053268490c\n59b75aeec3f5 10.0.2.5:3030/tsuru/app-php-roger:v1       php-roger/1dc52b858a670ece33c3\n2de8bdb2a5d3 10.0.2.5:3030/tsuru/app-goapp:v2           goapp/8d80ce42c3c838c0db20\n55b31fbdc06a 10.0.2.5:3030/tsuru/app-teste-andre:v15    teste-andre/e68ad01f9b6c9f7b6d55\nf1e99e07c43b 10.0.2.5:3030/tsuru/app-lucas:v12          lucas/56c1c2cd91ae6eb41db7\ne7b5e5d760ab 10.0.2.5:3030/tsuru/app-postgresapi:v2     postgresapi/a77ccd093dd1f9df0d9b\n8f81ae580c64 10.0.2.5:3030/tsuru/app-mongoapi:v13       mongoapi/265593476e0eb43ffdb9\n9c127ce1c4e4 10.0.2.5:3030/tsuru/app-blog:v6            blog/38ba8eaa4f3ba62861e6\n5a0de9db199d 10.0.2.5:3030/tsuru/app-mysql-api:v1       mysql-api/ffdfe3d8cbe2cc28e331\nf6e318168ef6 10.0.2.5:3030/tsuru/app-tsuru-dashboard:v1 tsuru-dashboard/eb54ad666e2076ec68d7\nWhat do you think?\n. @mwduarte definitely in the next release. It may be available in the nightly package/master at some point in the next week. This is really easy to do, just prepend the name of the app in this code: https://github.com/tsuru/tsuru/blob/master/provision/docker/actions.go#L100.\nSomething like:\ncontName := args.app.GetName() + \"/\" + randomString()\n. @jblancett yeah, we need to send some headers in the response so ordinary reverse proxies would accept that (we could use the Upgrade header, just like WebSockets).\nSpeaking exactly about ELB, that would not work, even with the Upgrade header users still need to configure the load balancer to use plain TCP (or plain SSL if you're going to use tsuru + TLS).\n. @jblancett as far as I can tell, you'd need to change the code in both the client and the server (untested):\ndiff\ndiff --git a/api/shell.go b/api/shell.go\nindex 209cb1a..54622c2 100644\n--- a/api/shell.go\n+++ b/api/shell.go\n@@ -31,6 +31,9 @@ func remoteShellHandler(w http.ResponseWriter, r *http.Request, t auth.Token) er\n    if err != nil {\n        return err\n    }\n+   w.Header().Set(\"Connection\", \"Upgrade\")\n+   w.Header().Set(\"Upgrade\", \"socket\")\n+   w.WriteHeader(http.StatusOK)\n    hj, ok := w.(http.Hijacker)\n    if !ok {\n        return &errors.HTTP{\ndiff --git a/cmd/shell.go b/cmd/shell.go\nindex b0b4e10..9df619d 100644\n--- a/cmd/shell.go\n+++ b/cmd/shell.go\n@@ -82,11 +82,12 @@ func (c *ShellToContainerCmd) Run(context *Context, client *Client) error {\n    if err != nil {\n        return err\n    }\n-   request.Close = true\n    token, err := ReadToken()\n    if err == nil {\n        request.Header.Set(\"Authorization\", \"bearer \"+token)\n    }\n+   request.Header.Set(\"Connection\", \"Upgrade\")\n+   request.Header.Set(\"Upgrade\", \"websocket\")\n    parsedURL, _ := url.Parse(serverURL)\n    host := parsedURL.Host\n    if _, _, err := net.SplitHostPort(host); err != nil {\n@@ -125,10 +126,12 @@ func (c *ShellToContainerCmd) Run(context *Context, client *Client) error {\n        var message string\n        if httpError == http.StatusNotFound {\n            message = fmt.Sprintf(\"App %s not found\", appName)\n-       } else {\n+       } else if httpError != http.StatusOK {\n            message = http.StatusText(httpError)\n        }\n-       return &errors.HTTP{Code: httpError, Message: message}\n+       if message != \"\" {\n+           return &errors.HTTP{Code: httpError, Message: message}\n+       }\n    }\n    context.Stdout.Write([]byte(readStr))\n    errs := make(chan error, 2)\nI can have a look soon, and check whether this actually works.\n. @mikkoc no, because ELB doesn't support WebSockets or any other kind of connection upgrade with the HTTP listener :-(\n. I'm closing this issue, because we're now using WebSockets in app-shell.\nUsing TCP listeners is still required in ELB, as they don't support WebSockets with HTTP listeners.\n. Hi @jblancett, it doesn't work behind nginx yet, because we don't set the proper headers for WebSocket. #1148 fixed just the communication with TLS enabled servers.\n. Yep, something is wrong with godep at Go tip. Nothing related to your changes, I will try to send a bug report to godep tomorrow.\n. Thanks for contributing, again! :-)\n. Argh, actually I forgot to check if Docker accepts slashes in the name of the container, and turns out it doesn't. I will use a dash instead.\n. @marceloboeira you should check runtime.GOOS, or use build tags/file suffix to conditionally include a file in the build.\nSomething like:\n```\n% cat home_windows.go\npackage cmd\nimport \"os\"\nvar home = os.Getenv(\"HOMEPATH\")\n% cat home_unix.go\npackage cmd\n// +build: !windows\nimport \"os\"\nvar home = os.Getenv(\"HOME\")\n```\nAnd then use the variable home in the JoinWithUserDir function.\n. Hi @robsonpeixoto, thanks for reporting! This is already fixed at master. The issue is that we called exec start in the API, and then resize the TTY of the exec, but exec start returns when the exec is no longer alive, so calling resize on a exec that exited results in \"bad file descriptor\".\ntsuru-server 0.11 will include the fix.\n. I will close this pull request, as @raulgbrmf is currently working on an alternative solution.\n@lucasweiblen thanks for contributing!\n. As of docker/distribution#422, image removal is not supported yet, and will be available in Docker Registry 2.1 + Docker 1.7. I'm closing this issue now, so users will be able to use Docker 1.6 + Registry 2.0 with tsuru-server 0.11.\n. Thank you!\n. Thank you!\n. I think that all of this \"it's a ...\" is not necessary. We could go with just \"In order to use Gandalf, you need to change tsuru.conf accordingly:\".\nThis way we don't need to change the number again if we add or remove a bullet.\nWhat do you think?\n. The failure is probably from an intermittent test:\n```\nFAIL: auto_scale_test.go:334: S.TestAutoScaleConfigRunRebalanceOnly\nauto_scale_test.go:403:\n    c.Assert(evts, check.HasLen, 1)\n... obtained []docker.autoScaleEvent = []docker.autoScaleEvent(nil)\n... n int = 1\nOOPS: 331 passed, 1 FAILED\n--- FAIL: Test (41.13s)\n```\n@cezarsa have you seen this failure before?\n. @annashipman merging it, thank you!\n. Thank you!\n. @haifengkao what do you mean exactly? Having a dedicated port in hipache for the application? Or binding the application to more than one port, other than the provided $PORT?\n. Hi @dmitryck, thanks for raising this question.\ntsuru provides an environment for running your application, with Docker nodes for hosting application code. We indeed has this flaw in our documentation, and there's an issue for improving our documentation regarding the architecture of a running cloud: #162. This topic has also been raised by another user/contributor in issue #560, but then we moved the discussion to something else.\nI'm not sure I get the question right, but tsuru doesn't impose any development workflow, but I can talk about our internal workflow, which is very similar to the case you described: \nIn the local machine, developers will have only tsuru client installed, there's no other component running on a developer machine. Whenever he/she wants to deploy the application code to some environment, they will just invoke git push or tsuru app-deploy.\nFor B and C, you can have one central tsuru API server managing multiple Docker pools:\n\nAnd the developer can choose the pool they want to use in their application:\n% tsuru pool-list\n+-------+-----------------------+\n| Team  | Pools                 |\n+-------+-----------------------+\n| admin | testingpool, prodpool |\n+-------+-----------------------+\n% tsuru app-create myapp-test python --pool testingpool\n% tsuru app-create myapp-prod python --pool prodpool\nFor more details, see: http://docs.tsuru.io/en/master/using/application-pool.html.\nThe pool management has been redesigned and the working flow I've described below is landing in the next version of tsuru (to be launched later today).\nI'm not sure this answer your question, so please us know if there's any other point you need clarification!\n. Hi @dmitryck! \nYes, each tsuru app has one Git repository. In this case, you'd have two Git repositories, and you'd need to push the code to the testing app, check that it works, and then push the code to the prod app.\nSo, suppose that your code is in the directory \"/Users/me/projects/awesomeapp\", and you have two applications: \"awesome-test\" and \"awesome-prod\". Now think that you have just finished a new feature and wants to send it to production, but before you want to ensure that it works in the testing environment, the flow would be:\n``` shell\n% pwd\n/Users/me/projects/awesomeapp\n% git push [awesome-test repository] master\n[ensure that the feature is working in the testing environment]\n% git push [awesome-prod repository] master\n```\nPlease not that you do not need two pools for that, you could have both apps within a single pool.\nAs an alternative to the two git push calls, you could also use tsuru app-swap:\n``` shell\n% pwd\n/Users/me/projects/awesomeapp\n% git push [awesome-test repository] master\n[ensure that the feature is working in the testing environment]\n% tsuru app-swap awesome-test awesome-prod\n```\n. Hi @dcarley, this is a bug with Read the Docs that do not detect the new tags right away, so we need to wait some time before pointing latest to the new tag (stable works automatically, that's why we're referring to it now in our links).\nI've just rebuilt the latest version to match 0.11.0 docs: http://docs.tsuru.io/en/latest/contributing/index.html#running-the-tests\nThanks for reporting it!\n. Hi @haifengkao, thanks for reporting this. I've fixed this bug earlier today, everything should work fine in tomorrow's nightly packages. You can also try it building from source (running tsuru now again).\n. @haifengkao how are you calling tsuru-now? Can you share your parameters?\n. @haifengkao ah, just confirmed, our task that regenerates the nightly package has failed, so the package is still broken. Sorry about that :-(\nI will let you know when we fix it.\nIf you prefer, you can download tsr from master:\n% sudo apt-add-repository ppa:tsuru/golang\n% sudo apt-get update\n% sudo apt-get install golang\n% echo 'export GOPATH=$HOME' >> $HOME/.bashrc\n% source $HOME/.bashrc\n% go get github.com/tsuru/tsuru/cmd/tsr\n% sudo stop tsuru-server-api\n% sudo sed -i \"s;/usr/bin/tsr;$HOME/bin/tsr;\" /etc/init/tsuru-server-api.conf\n% sudo start tsuru-server-api\n. @haifengkao we've regenerated all nightly packages, can you try again? Thanks!\n. @haifengkao I'm glad it works now! Running --tsuru-pkg-stable is ideal, unless you're planning to test upcoming changes or willing to contribute to tsuru (in this case you'd install tsuru from source).\nMay I close this issue?\n. Hi @luissombra, the buildpack platform is indeed broken.\nI've just opened issue tsuru/basebuilder#85. \n. @luissombra tsuru/basebuilder#85 is now fixed, finally! :D\n. Nice catch, thanks!\n. Thanks!\n. Thank you!\n@Tails this is probably going to be in our next release (0.13).\n. Hi @dmitryck, tsuru is looking for the \"ubuntu\" user inside the container created for building the application image. Which platform you're using? Did you create it? How did you install it?\n. @dcarley thanks! We're testing it locally right now.\n. I'm working on this, but instead of adding a new command, I will follow up on @lucasweiblen's work and implement filters in the clients, extending it so we have a filter for locked applications.\n. At master unit-remove doesn't run in background anymore, and we ensure the application is locked during the entire process.\n@jblancett do you think it's fine to close this issue?\n. @RichardKnop indeed, but it vendors unused packages and test files along with the relevant code. When running go test ./..., we don't want to run test for our dependencies, so we just dropped it out.\nAn alternative solution would be to stop using go test ./..., but we preferred to switch to govendor instead.\n. \n. I'm going to work on this issue. I thought about the following statuses:\n- pending: when the node is being created (i.e.: bs is not running yet) \n- error: when the bs creation task fails\n- waiting: when the bs container is successfully created and the host is ready for running containers\n. Thank you!\n. Thank you!\n. Thank you!\n. Thank you!\n. Since this is not going to happen in the 0.12 release, I'm closing this issue.\n@dcarley thanks for opening it!\n. I'm deliberately merging #1146 in this one. We could have two more hooks:\n- rollback (when user invokes app-deploy-rollback)\n- \"deploy aborted\" (when the deployment is aborted, because of a healthcheck failure - invoked only if build hooks has been invoked)\n. Hi @dhilton, we should return 404 in user-remove as well. Please feel free to send the pull request.\nThank you!\n. @dhilton thanks for reporting and fixing the user-remove inconsistency.\nHave you seen this kind of inconsistency in other endpoints as well?\n. I think we're done with all not founds. I'm closing this issue, @dhilton please feel free to reopen it if you find status code inconsistencies in the API.\nThanks!\n. Thank you!\n. Just pushed that. Now when the service API returns 200, we read the body and display it to the user.\n. This is not the expected behavior. Thanks for reporting!\nWhen reusing the name, we could issue an error message saying that the key is duplicate and asking whether the user wants to override it. The -y would apply as well.\n. We can fix this by solving tsuru/gandalf#193 and tsuru/gandalf#194, along with some change in tsuru API code to:\n- accept a force parameter in the add key handle\n- when force is false and the key already exists (i.e. Gandalf returns 409 on key-add), report the error to the user\n- when force is true and the key already exists (i.e. Gandalf returns 409 on key-add), call the update key endpoint (tsuru/gandalf#193).\nIn the client, we would implement a behavior similar to app-swap:\n- if the user doesn't provide the -y flag, display the error message saying that the key is duplicate and ask whether the user wants to replace it\n- if the user provide the -y flag, just send force=true to the tsuru API\n. I don't think that this is a bug, nor that we should handle this scenario.\nIn order to safely fix this issue, we'd need to have something like an agent running in the node, and both the node and the API would agree on the host ID.\nJust normalizing the IP address doesn't fix the issue, because multiple names could point to the same node. Just resolving the name doesn't fix the issue either, because the node could have a Docker daemon bound to multiple network interfaces.\n@mtekel could you give more context on how you faced this issue in the first moment? Thanks!\n. @erichnascimento one of tsuru-client's dependencies use bazaar. In order to install tsuru-client using go get, you do need to have bazaar installed.\nYou may download a pre-built binary as well: https://github.com/tsuru/tsuru-client/releases/tag/0.16.0.\n. Can you provide more information on your environment?\nIt works here:\n% tsuru target-list\n  ...\n* mytarget (tsuru.company.com)\n  ...\n% tsuru app-shell -a xxx-test\nubuntu@1ff727eab0c5:/$\nHow did you install tsuru?\n. This error message comes from net.Dial, but we don't call net.Dial directly. So, it's likely to be a bug in the websocket library, probably because you have an old version of it.\nHere's the explicit part in the code where they handle implicit ports: https://github.com/golang/net/blob/master/websocket/client.go#L67-L79 (according to golang/net@5058c78c3627b31e484a81463acd51c7cecc06f3, this code has been written in December 2014 and committed in January 2015).\nIf this is your case, running godep restore before building the client should fix the issue.\n. @jpprins1 this is actually a JSON stream, and not an array. You'd need to capture the streaming and eval the object every time you get a full object.\nYou'd need to find a way of handling JSON streaming with AngularJS :S\n. Hi @jpprins1, we can definitely make this adjustment in the API. Thanks for reporting!\n. @jpprins1 latest release of tsuru already take this on the querystring:\n% curl -XDELETE -H \"Authorization: Bearer ${TSURU_TOKEN}\" ${TSURU_TARGET}/apps/myapp/units?units=1&process=web\nWe're no longer sending anything in the body for DELETE requests.\n. We could have a flag in env-set and env-unset, for example:\n% tsuru env-set -a myapp NAME=VALUE --no-restart\n% tsuru env-unset -a myapp OLDNAME=OLDVALUE --no-restart\n% tsuru app-deploy -a myapp .\n. woot.\n. Seems like it's back :-(\n. Docker will report a HostPort on stopped containers only if we're using the tsuru port allocator (which isn't the default option), so I suggest that we do not call AddRoute when the HostPort is 0.\n@flaviamissi do you wanna work on that?\n. @flaviamissi this is not urgent, as it doesn't compromise the behavior of tsuru, so please take your time! We'll let you know if someone else start working on this issue.\n. @flaviamissi thanks for working on that :-)\n. Hi @gciotta, thanks for contributing and sorry for the late response. The failure is indeed unrelated, I will merge the pull request.\n. Thank you!\n. Seems like this as an issue with my own VM and network, I cannot reproduce it in other environments.\n. @sfcgeorge thanks for opening this issue.\nWhat exactly doesn't work? Have you tried it?\n. It has been fixed in the PR #1300.\n. @andrestc makes sense! Ideally, docker-machine will become the reference iaas implementation, so it's a fair approach.\n. As discussed off-PR, @raelmax will work on two improvements in this PR:\n- use os.MkdirAll instead of os.Stat + os.Mkdir\n- add a test reproducing the bug and ensure that it passes with the fix\n@raelmax thanks for contributing! :D\n. We're getting ready for a new tsuru-admin release, so I will merge this pull request and do the pending changes.\n@raelmax thanks for contirbuting.\n. Actually, the bug is that whenever we delete an app, we have a risk of deleting the images of another app. The fix is coming in the next minutes, along with tsurud 0.12.4-rc2, I will describe the bug better in the commit message.\nPlease disregard tsuru/deploy-agent@108344d271cd0951d87e1cae983d86045bc222a0, it has nothing to do with it.\n. I'm moving to planb instead of Vulcand.\n. Forgot to close this issue. The problem was related to disk usage. We've added some DropDatabase calls to all TearDownSuite calls (almost all, actually). Just dropping collections was not enough for freeing up disk space.\n. @diego-araujo I think that the code looks good from a functional point of view, just some small changes in the code and it's good to merge.\nThank you very much for contributing!\n. @diego-araujo thanks! There's one last comment here: https://github.com/tsuru/tsuru/pull/1324/files#diff-73d61840c61ef2ef3c5dc66747efaaabR11\nCan you remove the import alias there? Then we're good to merge!\n. Thank you!\n. Hi @vmalaga, I'm glad you figured it out.\nMaybe we should improve docs on this subject :-( The Dockerfile's in the platforms repository are not supposed to be provided as a parameter to platform-add/platform-update, they're used for automatically building images at Docker Hub (maybe we should support the same workflow that docker build does).\nSo, if you want to use the Python platform, with no changes, you can grab the prebuilt image by simply running (if you're with tsurud 0.13.x and tsuru-admin 0.12.x):\n% tsuru-admin platform-add python\nIf you're using tsurud 0.12.x and tsuru-admin 0.11.x, you can run (notice that I'm still using basebuilder here):\n% tsuru-admin platform-add python -d https://raw.githubusercontent.com/tsuru/basebuilder/master/python/Dockerfile\nNow, if you're with tsuru-admin 0.12.x and tsurud 0.12.x, you won't be able to run platform-add nor platform-update. We kept the new API compatible with older tsuru-admin, but we didn't keep tsuru-admin compatible with older API.\nSorry about the mess.\n. I've changed from enhancement to bug because I remember that tsuru-admin pool-list used to display that, so this is a regression.\n. Woot.\n. Or maybe add units in stopped state?\n. Sounds like fsouza/go-dockerclient#455. Should we have a minor release or just wait for 1.0?\n. I don't think that this is the question :P Right now, if someone uses tsuru-bootstrap or tsuru-now, app-run/app-shell won't work. So, can we wait for 1.0? Or can we just pin the version of Docker in tsuru-now?\n. @andrestc sounds good.\n. *sounds good to close lol\n. Hi Joan, it sounds like a problem with the archive-server. Can you confirm that it's up and running, and on which host?\nIf you're running everything on the same machine, you should look for a process archive-server. And you should look for ARCHIVE_SERVER_* variables in ~git/.profile.\n. It seems like it's properly configured. Can you check archive-server logs?\n% cat /var/log/upstart/archive-server.log\nAnd also the contents of the pre-receive hook (this path may differ, in case of doubt, check /etc/gandalf.conf to confirm where the bare-template is):\n% cat /home/git/bare-template/hooks/pre-receive\n. @magichk is archive-server running?\n$ status archive-server\n. What's the version of archive-server?\n$ archive-server -version\nCan you change the pre-receive for one of your apps (/var/lib/gandalf/repositories/<app-name>.git/hooks/pre-receive), change the -el in the first line to -elx and try pushing again? Here's how the pre-receive file should look like: https://gist.github.com/fsouza/4834151266b87f43411d.\nYou can update it with the following command (remember to replace app-name with the name of the app:\n$ curl -Lo /var/lib/gandalf/repositories/<app-name>.git/hoos/pre-receive https://gist.githubusercontent.com/fsouza/4834151266b87f43411d/raw/fd6e3e65c73e526c52f6436ad3a877554585482d/pre-receive-archive-debug.bash\n. So, sounds like the script is not loading the required environment variables. You listed it in ~git/.profile and ~git/.bash_profile, so we need to figure that out. Are you using the git user in your push? If you run git remote -v locally, does the output look like the one below?\n$ git remote -v\norigin  https://github.com/tsuru/tsuru-dashboard.git (fetch)\norigin  https://github.com/tsuru/tsuru-dashboard.git (push)\ntsuru   git@[my-tsuru-server]:[my-app].git (fetch)\ntsuru   git@[my-tsuru-server]:[my-app].git (push)\nIs the remote git@something:appname.git? If so, what's the output of the command:\n$ ls -ld ~git\nThat should expand the home of the git user (you can also find it in /etc/passwd). Is it /home/git?\nCan you also check if you have a ~git/.bashrc file and export environment variables there? As a last resort, can you try exporting the environment variables in /etc/profile?\n@gwmoura this error is happening at Gandalf machine, it's before using the platform, it's even before calling the Tsuru API.\n. Interesting, can you try changing the value of TSURU_HOST to http://127.0.0.1:8080 instead?\nThis value comes from the tsuru.conf file (/etc/tsuru/tsuru.conf).\n. Ahh, this command is running from within the container, so you need to set host to some IP that is accessible from the container. The valid private IP address of your host is probably going to work.\nOn tsuru-bootstrap, we use 192.168.50.4, which is the IP address that we define in the Vagrantfile.\n. Awesome! Did you setup all components manually? Do you see any points that we could improve in our documentation?\n. @andrewsmedina how does the API identify a drag and drop deploy? Using the origin?\n. As we talked offline, just pushed some changes:\n1. Abandon #1383 \n2. Remove permission for drag-and-drop\n3. git-based deployments are only accepted and recognized if the internal token is being used (i.e. Gandalf made the API call)\n4. Provide a permission and deployment type for archive-url based deployment (currently a hidden feature of the tsuru API)\n. If there's a risk of doing something wrong, we should remove guessing altogether, as we did in app-remove. Otherwise users will replace tsuru app-deploy with tsuru app-deploy -y.\n. @andrewsmedina the issue is not only long-running deployments. If the API process dies (because OOM errors, for example), I may end-up with an outstanding lock and a container with an empty id.\n. This is fixed on master (here is the broken code: https://github.com/tsuru/tsuru/blob/1.0.0-rc6/api/pool.go#L48-L56).\nCan we include the fix in tsuru 1.0? :D\n. @morpheyesh I'm sorry, I had some issues locally and wasn't able to work on that. I am definitely going to investigate this issue today. Thanks for your patience.\n. @cezarsa cool, thanks for that information!\n. @morpheyesh thanks!\n. Hm, I think we do that to ensure that keys are not shared (this would break gandalf key validation).\nI'd suggest hashing the body of the key and using that for index (it wouldn't be unique anymore, tho). Also, I think this issue belongs to Gandalf, so we should probably close it here and open a new one there, linking this issue.\n. @guilhermebr thanks for investigating it! :)\n. \n. That's a bug in tsuru-admin, you can't add a platform because you don't have a target defined, but tsuru-admin is lost. tsuru reacts properly, but tsuru-admin doesn't:\n```\n% tsuru app-list\nError: No target defined. Please use target-add/target-set to define a target.\nFor more details, please run \"tsuru help target\".\n% tsuru-admin platform-add ruby\nError: Failed to connect to tsuru server (), it's probably down.\n```\n@HudsonAfonso you can check the list of available targets with the command tsuru target-list, and choose one usingtsuru target-set,tsuru help target will provide more information :)\n. \n. Hey @htbase, you probably want to set amazonec2-region: us-west-2, then amazonec2-zone to one of the datacenters in the west-2 region.\nSee https://docs.docker.com/machine/drivers/aws/#options. Can you update this line too? So it matches the length of the previous lines.\nThank you!\n. I believe this could be an environment variable present in all applications, just like TSURU_APPNAME and TSURU_HOST. What do you think?\n. Can you add another - as well?\nThanks!\n. Please use \"tsuru\", all lower, we're trying to standardize it :)\n. Do you mind to take the opportunity to remove this line? I don't know where it came from, but it should not be here x)\n. Please drop this line, we prefer to keep only patterns related to tsuru in the .gitignore file.\n. Please use fmt.Sprintf instead of this concatenation.\nThanks for contributing!\n. I think we can drop the \"yourself\" and improve the text to detail the error, something like:\nPlease ensure that MongoDB and Redis are started before running test suite. If you see some tests failures with messages like \"dial tcp 127.0.0.1:6379: connection refused\" and \"no reachable server\", the most likely reason is that these services are not running.\nThank you!\n. Yes, definitely. Thank you!\n. The change looks good, but I'd like to take this opportunity to rename this variable to \"length\". Using l as a variable name is confuse :-(\nAnd I'm sorry, because I think I wrote this code in the first place. Do you mind just renaming this variable? After that, we can merge the pull request.\n. I'd rather do fmt.Errorf(\"mongodb: %s\", err), so we can catch other failures in mgo.Dial as well (including authentication errors).\n. I don't think that this function belongs to this package. It should be in the package \"router\".\n. You can prealloc this list with:\nroutersList := make([]Router, 0, len(routers))\n. I think that just \"List\" is better.\n. Hi @lucasweiblen, this solution wouldn't actually work, because that would ask MongoDB to give apps that have platform == \"\", the solution you proposed is the right one.\n. That's fine, if you prefer, you can add the new platform only in the test that you're going to use it.\n. Please ensure you have a deferred call for removing the platform. Thank you!\n. Can you also check that it begins with \"appname/\"?\nSomething like:\nc.Assert(strings.HasPreffix(cont.Name, app.GetName() + \"/\"), check.Equals, true)\n. I don't think there's much else to review. With Andrews' suggestion, most changes move to the client, that will now need to issue to API calls and combine the results.\nSo, you will:\n1. remove the service doc handler (or convert it into a handler that returns full information of the service)\n2. add a handler for listing instances of a service (that the user has access to, obviously)\nAnd then comes the client changes.\nThank you!\n. Could you remove this import alias? The package is already named saml.\n. Can you remove this import alias as well?\n. ditto\n. Can you remove this comment?\nAlso, I think we can make the whole condition smaller by combining if and assignment:\ngolang\nif _, ok := params[\"callback\"]; ok {\n    return nil, s.callback(params)\n}\nWhat do you think?\n. Please remove these comments.\n. Please remove this comments as well :-)\n. Can you split this string in multiple lines? Something like:\ngolang\nb64Xml := \"PD94...\" +\n        \"continuation\" +\n        \"continuation\"\n. Please remove this comment.\n. Please remove this comment as well.\n. Ah, BTW, please keep the comment above the string declaration, just so we can know what's this cryptographic string.\n. Could you remove this blank line?\n. ditto\n. Please remove this blank line.\n. You don't need the parenthesis for grouping here, as it's a single variable. Please do:\ngo\nvar tokenExpire time.Duration\n. I'd remove the use for production. Just say it's a experimental feature and let people decide whether they want to go to production with experimental stuff.. ",
    "andrewsmedina": "tsuru already have a healthcheck service. and tsuru-circus support metrics collection with statsd.\n. this issue is not valid anymore. currently is possible to use external log managers like logstash or fluentd using the bs syslog backend: https://github.com/tsuru/bs#log_backends\n. should be nice that \"app info\" shows git repository too.\n. For this, is need know the service machine\n. I think that the commands should be:\n$ glb env set VAR value\n$ glb env get VAR\nvalue\n. fixed. thank you.\n. I fixed it restarting gunicorn instead reloading\n. mysqlapi already supports two topologies, mysql shared and one vm per app\n. +1\n. it should be solved by #737.\n. it should be solved by #737.\n. Another state case is:\njuju states: (machine) agent-state: running; instance-state: runnging; (unit) agent-state: install_error\ntsuru state: error\n. -1 for these subcommands:\ntsuru/crane team add-user -> [not sure yet]\ntsuru/crane team remove-user -> [not sure yet]\nMy proposal for it is:\ntsuru/crane team-add-user -> [team-user-add]\ntsuru/crane team-remove-user -> [team-user-remove]\nAnd -1 for use \"get\", \"set\", \"unset\", \"list\" without context.\n. it is need to block the deploy while the app status is not \"started\"\n. ok.\n. We have tsuru now to do it: https://github.com/tsuru/now\n. @savorywatt not yet.\nfirst of all tsuru should have a way to get some metrics for the applications units (containers) like memory and cpu consumption and some \"router\" metrics like response time.\nwith these data will be possible take the decision if an app needs more units.\n. duplicated of #620\n. Fixed it adding copy_env = True in circus.ini\n. It's by github.com/globocom/tsuru-circus \n. I'm :+1: for reimplement the git stuff in pure-go\n. We fixed it monitoring the communication using nc.\nnc -z APP-IP 22\nnc -z APP-IP 8080\n. Each service should implements ways to be resilient.\n. tsuru service-status already indicates when an app can't communicate with a service.\n. In the future we will have support to multi region.\n. We fixed it monitoring the communication using nc.\nnc -z APP-IP 22\nnc -z APP-IP 8080\n. @elimisteve thanks for contributing.\n. closing because juju is no longer supported by tsuru.\n. closing because juju is no longer supported by tsuru.\n. We use the db package for check db connections and another things. I believe that this issue is not valid anymore.\n. :+1: \n. +1 for remove \"Handler\" suffix but I'm -1 for capitalizing. there is no need to the handlers be exported.\n. closing because juju is no longer supported by tsuru.\n. Hi @jonaskac. Surely we can meet. Can you email us to continue this conversation in private? Our email is tsuru@corp.globo.com\nThank you\n. Nice job!\nI agree with @fsouza to keep this out of tsuru repository.\n. @hfeeki juju is a service orchestration. juju does more that configure management. It enables you to build entire environments in the cloud (ec2, hp cloud, openstack), etc.\nbut, tsuru can support other provisioners. \nStill in development phase a provisioner based on  lxc (linux containers) that use shell to configure the instances.\n. The lxc provision is part of tsuru project: https://github.com/globocom/tsuru/tree/master/provision/local\n. Closing. Now we have docs about how to create your own platforms (http://docs.tsuru.io/en/latest/add-a-platform.html) and how to use buildpacks (http://docs.tsuru.io/en/latest/using/buildpacks.html) with tsuru.\n. closing because juju is no longer supported by tsuru.\n. tsuru hooks are in https://github.com/globocom/tsuru/tree/master/misc/git-hooks\n. I know. I'm just trying to help who will solve this issue.\n. @isaiah you can use \"tsr\" to generate the token:\n$ tsr token\n. how configure bare template is already documented in http://docs.tsuru.io/en/stable/installing/gandalf.html\n. I'm +1 for stop using . in gocheck imports.\n. The email is not necessary because the \"user-remove\" removes the logged in user.\n. +1\n. +1\n. +1\n. Hi @hfeeki,\n1 - if the user isn't logged in he is not able to view the user-info output.\n2 - this issue (#331) was done by @evandroflores\n. Blocked by https://github.com/globocom/gandalf/issues/74\n. app-info is returning the read only git url:\n$ tsuru app-info -a ble\nApplication: ble\nRepository: git://localhost/ble.git\n...\n. @guestisp I think that the \"host key issue\" is related with #635\n. 1- I'm +1 for rename app.conf to app.yaml.\n2 - This means to use the app.yaml to get/store the metadata for the app creation, like appname or framework?\n3 - I'm +1.\n4 - Why?\n. @flaviamissi  We can close this issue?\n. @hfeeki thanks for contribute\n. @bardusco bardusco is working on this issue https://github.com/bardusco/tsuru/tree/docker\n. To deploy a ruby app using tsuru, it's need a Procfile and a Gemfile in the root of your project. \nLike heroku, a Procfile is a file that contains the way to run your app:\nweb: bundle exec rails server -p 8888\nThen you can use the tsuru client to create your app:\n$ tsuru app-create yourappname ruby\nIt will return a git remote url. Add this remote in your project:\n$ git remote add tsuru git@url:yourappname.git\nWait tsuru create your machine, before push your code. To see if your app is already \"started\" use app-info command:\n$ tsuru app-info --app yourappname\nThe result will be something like it :\nApplication: yourappname\nRepository: git@url:yourappname.git\nPlatform: ruby\nTeams: yourteam\nAddress: url.com\nUnits:\n+---------+---------+\n| Unit    | State   |\n+---------+---------+\n| aaps/0  | started |\n+---------+---------+\nTo deploy, just push the code to tsuru remote:\n$ git push tsuru master\nI added an issue (#376) to create a quickstart for rails app's like the django quickstart (http://docs.tsuru.io/en/latest/apps/quickstart/python.html).\n. Hi @seansay,\nI saw that you are trying to connect with the tsuru server on port 80.\nHowever, this script uses the sample lxc configuration which the port is defined with 8080.\nhttps://github.com/globocom/tsuru/blob/master/etc/tsuru-lxc.conf#L1\n. instead:\n$ api &\n$ collector &\nwill be:\n$ tsr api &\n$ tsr collector &\n. @isaiah thank you!\n. @fsouza I dont know. Tagging as brainstorm. \n. closing because juju is no longer supported by tsuru. this field has been removed.\n. service instance name and apps binded.\n. I'm -1 for do it now.\nWhen a problem occurs in the app tsuru log and tsuru run are the only tools we have to assist in troubleshooting.\n. @flaviamissi to run commands like django managers:\n./manage.py do_something\n. I think this issue is no longer valid. Currently the provision.App interface has a public method SerializeEnvVars: https://github.com/tsuru/tsuru/blob/master/provision/provision.go#L94\n. \\o/\n. It can help https://github.com/dotcloud/docker/blob/f6b5cd77ebfff7b18dbfcdb8bfddce0f93305e23/lxc_template.go#L92\n. @fsouza I was fixed by https://github.com/globocom/tsuru/pull/742 ?\n. It's need to remove the old images too.\n. @fsouza can you close this issue?\n. closed by https://github.com/globocom/tsuru-circus/commit/28c6eb96e57d6bb4d49c9a23d5accb978dc34293\n. closed by https://github.com/globocom/tsuru-circus/commit/28c6eb96e57d6bb4d49c9a23d5accb978dc34293\n. Hi @arouca,\nfirst verify is the 'cloud.tsuru.io:8080' target alread exists. For do it, use 'tsuru target-list' command.\nIf it exists, set this target with: 'tsuru target-set targetname'.\nIf it does not exist, add a new target: 'tsuru target-add cloud cloud.tsuru.io:8080 -s'\n. @arouca on target creation you defined the name how 'cloud'. You can see it on the 'target-list' output. \nThe target-list output follow this pattern:\ntargetname (targeturl)\nWell, you should use:\ntsuru target-set cloud\n. This warning happens to remember you that your client is outdated. Update it that the warning goes.\n. @arouca forget my last response. It is a bug on tsuru. I will fix it now :)\nThanks for reporting.\n. Hi @nedmax, there are two issues here.\nOne is about dashboard handle access token expiration. I created a issue for it: https://github.com/globocom/abyss/issues/47\nAnd the another issue (cli) is that the 'npuratti@gmail.com' account does not exist.\n. @guestisp we want to do it, but we need to think how we will do it.\n. @guestisp an option is make the gandalf serve the archive.\n. Hi @raninho, thank for contribute. But on add the travis badge it is not needed to remove the drone badge\n. I can't reproduce it.\n. my proposal is add a new swap command that changes the router between two apps:\n$ tsuru swap app1 app2\n. @flaviamissi  closed! :)\n. Done! https://github.com/globocom/tsuru/tree/master/router/elb\n. @dgryski thank you! \n. I don't know if we should use circus in the docker-setup. I think that first we need to answer: \"What is the goal of docker-setup\".\n. What kind of enviroment will be provided by this script? Development, production? If production, I'm + 1 for circus, but other things is needed. If development/test I'm -1\n. @flaviamissi ok! I'm +1 for it\n. @dgryski thank you :)\n. @dgryski Thank you! :+1: \n. @dgryski thanks you, In the future we can add a user parameter and make it to work with any username.\n. @enyachoke the docker provisioner works similarly to heroku.\n. Tsuru suports buildpacks: http://docs.tsuru.io/en/latest/using/buildpacks.html \n. @sidnei thank you!\n. @beastie7 how @dgryski said the docker provisioner use lxc. Actually the docker provisioner is better than lxc provisioner.\nThe lxc provisioner was created before the dotcloud opened the source of the docker code.\nThe lxc provisioner has not support multi units and has no scalabillity.\nWell, the docker provisioner support multi units, is scalable, is based in images, use aufs and etc. If you want to use the tsuru with lxc, using the docker is the best way.\n. Is just remove it and the docs related\n. haproxy should be an alternative to hipache\n. Currently, we have support to Hipache, planb, Galeb, Vulcand and we will introduce the support for Fusis. \nI believe that we don't need to support another router.\nBut if someone wants to add this support, feel free to reopen this issue.\n. @sidnei thank you! :+1: \n. I dont know if this problem is in tsuru or in the base images.\n. @dgryski Thank you!\n. closing because juju is no longer supported by tsuru.\n. blocked by #495 and vpc support in juju\n. @fsouza yes :)\n. closing because juju is no longer supported by tsuru.\n. Versioning tsuru api is very complex. To simplify it we will versioning tsuru via git tag.\n. Must be happening some error in the removal process. When an error happens on cluster (in the removal process) the container does not be removed from database.\nBut, the provisioner silences the errors returned (but it is logged): https://github.com/globocom/tsuru/blob/master/provision/docker/provisioner.go#L181\n. Tsuru runs the deploy command (git pull) with the user defined in docker:ssh:user. For the tsuru base images we use ubuntu:\nhttps://github.com/globocom/tsuru/blob/master/etc/tsuru-docker.conf#L37\nhttps://github.com/globocom/tsuru/blob/master/provision/docker/commands.go#L28\n. On deploy, tsuru creates a new image: https://github.com/globocom/tsuru/blob/master/provision/docker/docker.go#L206\nBut you are right, the startInBackground should not remove the image. \n. @dgryski thank you :)\n. This issue is essential to tsuru  once the docker has a layer limitation: https://github.com/dotcloud/docker/pull/2905#issuecomment-29358479\n. Hi @dmitryck,\nthe admin-listen is a old config key. Currently, tsuru-server does not uses this key. I will create an issue to update the tsuru deb default config file.\nThe listen key is the used to define the port for the tsuru api. If there is nothing listening 8080 the tsuru-server is not starting. There is some problem on tsuru-server.\nCan you see the startup log? If you are using ubuntu with tsuru package from ppa, you can see the logs in /var/log/upstart/tsuru-server-api.log\n. @dmitryck you should add a \"routers\" section in the config. There is a config sample: http://docs.tsuru.io/en/stable/reference/config.html#sample-file\n. it was already merged\n. Blocked by #527\n. what do you want? A administrative command that removes the log entries from database. Or a schedule that remove the log entries in a time interval.\n. With the new deploy workflow added in 0.6.0 it is fixed.\n. Hi @ramonPires thanks for reporting this issue.\nYou have added a team with the ' ' name. We will fix it validating the team name in tsuru api.\n. @ramonPires yes it is. The name of \"web admin\" project is abyss: https://github.com/globocom/abyss\n. These errors are related with the queue system\n. @gustavohenrique thank you!\n. We can use the http://luarocks.org/ to install the dependencies.\n. block by #537.\n. blocker by https://github.com/flaviamissi/basebuilder/issues/3\n. \"Just one question: do yoi have any drawings for Tsuru Architecture?\"\nYes. It is under development:\nhttp://docs.tsuru.io/en/latest/provisioners/docker/architecture.html\nhttp://docs.tsuru.io/en/latest/overview.html\nhttp://docs.tsuru.io/en/latest/faq.html\nhttp://docs.tsuru.io/en/latest/why.html\n\"For example, will be possible to split each components on multiple servers, like one git server, 5 node servers (with docker), 6 mysql servers, and so on?\"\nThe default script is just a all in one. But you can split all components (git server, mongo, docker nodes). \n\"Could you please point me to the code the does this ?\"\nHere tsuru calls the docker cluster: https://github.com/globocom/tsuru/blob/master/provision/docker/docker.go#L144\nTsuru using the default cluster scheduler algorithm: https://github.com/globocom/tsuru/blob/master/provision/docker/docker.go#L63\nThe default cluster scheduler (round robin): https://github.com/globocom/docker-cluster/blob/master/cluster/scheduler.go#L44\n. @guestisp my mistake!\nThe link for round robin scheduler is https://github.com/globocom/docker-cluster/blob/master/cluster/scheduler.go#L44\n. Hi @guestisp, the right path is github.com/globocom/tsuru/cmd/tsr\n. I'm -1 to kill instead stop. When the container process uses fork docker kill kills only the container process.\n. Yes. You can se it here:\nhttps://github.com/dotcloud/docker/blob/master/container.go#L1096\nhttps://github.com/dotcloud/docker/blob/master/container.go#L1110\nhttp://lxc.sourceforge.net/man/lxc-kill.html\n. @guestisp the lxc-stop call kill with the same signal. The behaviour its not a problem. this (docker stop) works with processes that can not be stopped, with processes that use fork and etc..\nI don't know why you're always falling with the timeout. What platform are you running and what is your procfile?\n. is not necessary execute docker kill to heal ghost units. the docker stop & docker start fix this problem.\n. What docker version are you using? I think that your docker version is incompatible with tsuru.\n. The version that we have using is:\nClient version: 0.5.3\nServer version: 0.5.3\nGit commit: 17c92b8\nGo version: go1.1.2\n. I'm +1. But I think that \"bundle\" should be a better name.\n. @guestisp the buldpack is a way to create a custom platform. The bundle/template is a way to bootstrap environments platform + services.\n. @guestisp they are distinct things\n. @ramonPires and @guestisp we have another issue to add buildpack support in tsuru. I think @guestisp  thought this issue tries to solve the same problem that buildpack solves\n. @guestisp I'm sorry for the confusion. the \"solves\" I said is related to the purpose of this issue.\nWell, with regard to the stop timeout problem that you are having I'm trying to reproduce and fix it. When I have more information I'll let you know.\n. A way to fix this issue is ignore the errors when the app does not have any units. \nWhat do you guys think about that?\n. If we ignore this error, on deploy, when the container is created it will be fixed\n. This issue is already fixed.\nAfter a failure adding or removing routes from a router it was possible for applications to have incorrect route entries in the router. This happened because router failures generally also prevented rollback commands from successfully executing in the router. To prevent this problem from happening in the future tsuru will now check if the router is consistent after every operation that interacts with external routers. (app-deploy, app-swap, containers-move, healing process...)\nIf this check is not successful tsuru will schedule a message in it\u2019s internal queue system (monsterqueue) that will keep trying to ensure routers are consistent. This should completely remove the possibility of having incorrect route entries after failures.\n. One way is to change the code that uses the beanstalk and use the AMPQ protocol. This enables the use of any queue server that implements this protocol.\n. +1\n. The healthcheck (http://docs.tsuru.io/en/master/using/tsuru.yaml.html?highlight=healthcheck#healthcheck) fix this problem.\nIf healthcheck is configured in tsuru.yml, tsuru will only finish the deploy if the healthcheck is ok, if not tsuru will rollback the deploy.\n. I cant reproduce this problem. it still happens?\n. We should document about how to create a new platform and the dockerfile pattern.\n. We will support both for while. The only advantage of basebuild platforms with relation to buildpack is able to optimize any specific platform.\n. @alanjds thank you!\n. It is related with #594 problem.\n. @dgryski I believe that it will works after my fixes on gandalf/tsuru install scripts.\n. hi @alanjds I'm working to update the tsuru setup scripts to use deb packages. until I finish it, it'll be unstable. :(\n. This issue is not necessary anymore. The tsuru-admin will be deprecated and all admin command are moved to tsuru client.\n. crane will be discontinued in the future. So this issue is not necessary.. @enyachoke If you need more help, let us know\n. On deploy, tsuru creates a container and executes a \"build\" process that is clone the code and install the deps. After that tsuru creates an image based on this container, using docker image. Then is started n containers based in this image, where n is the number of app units.\nI think that the build process is similar with the slug generation process, but we use the native docker tool to do it. To store this images we use the docker registry instead the s3/riak.\nWell, if it still  necessary/usefull to use slugs it is possible to create a provisioner that uses slug instead images.\n. I thing that you should create something stored centrally (s3, depth, and, ...) to pull from without needs to create a brand new container for each server. One \"base image\" for 200 servers and not 200 containers.. Slugs seems good.\nTsuru does it. But we use docker registry to store the images.\n. I think the log should be pluggable and customizable. depending on the cloud you will want to use logplex, syslog, sentry or default in mongo...\n. this issue is already fixed. currently is possible to use external log managers like logstash or fluentd using the bs syslog backend: https://github.com/tsuru/bs#log_backends\n. this changelog should be in the deb format?\n. A easy way to fix it is to use circus on static apps.\n. what do you think of a jenkins plugin that runs the deploy if everything is ok?\n. duplicated of  #750\n. @guestisp can I close this issue?\n. @sidnei thank you \n. It is not only important for scheduler. It is important. now an app is born belong to all user teams. In several cases, this user does not want/can't share the app with the other teams.\nI'm + 1 for this issue and I suggest something like:\ntsuru app-create appname platform -t teamname\nor: \ntsuru app-create appname platform\nYou belongs to more than one team, choose one to be owner for this app:\nteam1 (default)\nteam2\n. blocked by #619.\n. duplicated of #384.\n. @fsouza the improvements are already implemented by @cezarsa.\nclosing.\n. I'm +1 to create a documentation about it.\nYou can use the registry (docker push and docker pull) to distribute the images on each node.\n. You can export environment variables with these values. You can get a token with tsr token.\nHere is an example: https://github.com/dgryski/tsuru-bootstrap/blob/master/new-installer.sh#L63\n. @guestisp no. Generate a new token does not invalidate another token.\n. @guestisp can I close this issue?\n. Are you using tsuru from master? \n. @guestisp what git issue?\nWe can use a \"x.x.x-dev\" version when the is not released yet. It will help you?\n. Tsuru from deb packages 0.2.x works with docker 0.6.3. Tsuru from master (0.3.0) works with docker 0.7.x.\n. I running tsuru from master with gandalf from ppa. I will update the gandalf to try reproduce this bug.\n. I can't reproduce it using tsr 0.3.0-dev. \n. Hi @guestisp. You should use hipache:redis-server to configure redis on tsuru.\nTo configure it on hipache you should set the redisHost on hipache config.js: https://github.com/dotcloud/hipache/blob/master/config/config.json#L18\n. @guestisp can I close this issue?\n. This is related to  #636. The support for docker 0.7.0 is not done yet. So, the tsuru master is broken :(  My fault. I'm working to fix it.\n. Can you enable the debug mode for the tsuru api, and send the log output?\nTo enable the debug mode just set the debug as true on tsuru.conf. And to redirect the log to a file just configure the log:file:\ndebug: true\nlog:\n    file: /var/log/tsuru.log\n. :+1: \n. You are using a private registry?\n. Tsuru calls docker via http api. How is the command that you are using to start docker server?\nThe docker default is docker -d. The docker tsuru package starts docker using docker -H localhost:4243 -d. \nThe other thing to check is verify if the nodes values in tsuru.conf is ok.\n. Can you check your tsuru.conf. Here is a multi node example: https://gist.github.com/andrewsmedina/8050149\n. hi @guestisp I cant reproduce it.\nCan you check the docker version of your two nodes?\n. @guestisp Thanks to report :)\n. @fsouza why automatically rebalance is a bad idea? \n. @fsouza I agree with you that with a manual command the \"automatic rebalancing\" would be easy. \nBut I think that it is useful is some cases. An example is a cloud where the number of units increases and decreases with a very large frequency.\n. @fsouza it's possible increase the number of nodes automatically, using a monitoring system or with a cron that spawn a new node when tsuru has x units.. But how I said, it can be done using a script that uses the manual command that \"move unit between nodes\".\n. We want to make this issue, but I believe we can only touch on it in the 0.6.0 version. \nIf anyone would like to contribute to this issue, we can help :)\n. this may be related to #639.\n. @nightshade427 I'm trying to reproduce it.  it happens with one or more nodes?\n. I can't reproduce it using tsr 0.3.0-dev. \n. I will put it in the 0.4.0 milestone and release the 0.3.0 tomorrow.\n. @nightshade427 I cant reproduce it since 0.3. Can I close this issue?\n. Now all services uses the same package because they use the same binary.\n. @guestisp released!\n. @guestisp can you paste your gandalf.conf?\n. I think that it's need to document it. But I don't know if is a good way gandalf uses \"git\" user by default.\n. the docker requires go 1.2\n. @guestisp we will fix it. I only explained what the problem was.\n. Hi @guestisp when we close the issues #648 and #639 we will release the tsuru-server 0.3.0 version. You can see the 0.3.0 milestone progress here: https://github.com/globocom/tsuru/issues?milestone=23&state=open\n. This bug is related to abyss project: https://github.com/globocom/abyss/issues/59\n. It is invalid :)\nI'm using tsr api from master (0.3.0-dev) and tsr collector from ppa (0.2.x).\n. You can install it using our ppa: \nsudo apt-get install docker-registry\n. why not tsr api ?\n. HI @hfeeki you can use godep to build tsuru:\n```\ninstall godep\ngo get github.com/kr/godep\ninstall tsuru and friends\ngo get -v github.com/globocom/tsuru/cmd/tsr\ncd $GOPATH/src/github.com/globocom/tsuru\ngodep restore ./...\ngodep go clean ./...\ncd cmd/tsr\ngodep go install\n```\n. @hfeeki to install tsuru from source on linux, is needed install the libdevmapper. There is two ways to do it, install from source or using our ppa.\nUsing our ppa: \nsudo add-apt-repository ppa:tsuru/lvm2\nsudo apt-get update\nsudo apt-get install -q libdevmapper-dev\nOr compile for source, should be something like:\ngit clone https://git.fedorahosted.org/git/lvm2.git /usr/local/lvm2\ncd /usr/local/lvm2\ngit checkout -q v2_02_103\ncd /usr/local/lvm2\n./configure --enable-static_link\nmake device-mapper\nmake install_device-mapper\n. @hfeeki what distro are you using?\n. @hfeeki linux distribution\n. @hfeeki we have removed the docker dependency. can you try to install again? \n. @guestisp can I close this issue?\n. Hi @guestisp, I have updated the mysqlapi readme: \nTo install a shared setup for mysqlapi. What do you need is:\nInstall dependencies: \n$ pip install -r requirements.txt\nConfig the api database (used to save the mysqls metadata):\n$ export MYSQLAPI_DB_NAME=mysqlapi\n $ export MYSQLAPI_DB_USER=root\n $ export MYSQLAPI_DB_PASSWORD=password\n $ export MYSQLAPI_DB_HOST=localhost\nCreate the database schema with syncdb:\n$ python manage.py syncdb\nExport the environs used to set the mysql use to create the instances:\n$ export MYSQLAPI_SHARED_SERVER=mysqlhost.com\n$ export MYSQLAPI_SHARED_SERVER_PUBLIC_HOST=publichost.com\n$ export MYSQLAPI_SHARED_USER=user\n$ export MYSQLAPI_SHARED_PASSWORD=pass\nAfter it you can run the api:\n$ gunicorn wsgi -b 0.0.0.0:8888\nIf you need you can enable the debug mode, exporting this environ:\n$ export MYSQLAPI_DEBUG=1\n. To verify if the problem is with the tsururun`,  try to do it:\n$ tsuru run 'ls -lsa' -a mysql-api\nWell, after you executed syncdb with lxc-attach do you have submited this service to tsuru? In the mysql docs and here this a topic about it: http://docs.tsuru.io/en/latest/services/build.html#creating-a-service-manifest\n. @guestisp do you have installed the tsuru-ssh-agent on node machines.\nIf yes, you should check two thing. The first is the config about it on tsuru.conf. The config should be something like it:\ndocker:\n  ssh-agent-port: 4545\n  ssh:\n    add-key-cmd: /var/lib/tsuru/add-key\n    public-key: /var/lib/tsuru/.ssh/id_rsa.pub\n    user: ubuntu\n    sshd-path: sudo /usr/sbin/sshd\nThe other thing is to check the private/public keys defined on tsuru.conf (on api machine) and /etc/default/tsuru (on node machine). The keys should be the same.\n. Compare the keys content. To see the tsuru api key value you can do:\ncat /var/lib/tsuru/.ssh/id_rsa\nAnd to see the key used by the agent:\ncat /var/lib/tsuru/.ssh/id_rsa\n. On multiple nodes its need to share the key between the nodes.\n. Try to do the opposite, copy the keys that are in /var/lib/tsuru/.ssh/ in the tsuru api machine to the /var/lib/tsuru/.ssh in the nodes machines.\n. Nice! This issue can be closed?\n. @guestisp I know. We are working on it.  Thanks\n. /cc @morpheu \n. @nightshade427 tsuru now depends on libdevmapper which version isn't yet available on ubuntu. You should include another ppa to fix missing depends - sudo apt-add-repository ppa:tsuru/lvm2 -y && sudo apt-get update.\n. reopening the issue, this missing documentation\n. tsuru router support multiple cnames but the app collection does not support it yet.\n. After a deploy try to do the command below to see if tsuru is injecting the evns:\n$ tsuru run -a appname cat ../apprc\n. this bug has been fixed with the 0.4 release.\n. I think that the node information is useful for operation team / cloud admins. \n. @guestisp we are working to add several things to improve the multi node administration on tsr 0.4 and 0.5 \n. We use the github milestones: https://github.com/globocom/tsuru/issues/milestones\n. in the tsr 0.7.0 and tsuru 0.12.0 the app-info command shows host, container ip, and container port to the admin users.\n. The workflow is a little different. First, on deploy tsuru will inject the public key defined in tsuru.conf inside the container (in the authorized_keys).\nThe run workflow:\n1. tsuru client run the command\n2. tsuru client connect to the tsuru api\n3. tsuru api calls the docker agent using http on 4545 port\n4. the agent executes the command using ssh inside the container\nThere is an issue (#663) to create an agent that will run inside the container. With it will be not necessary to connect on container using ssh, we can use http. And the keys will be not necessary.\n. Currently tsuru does not have a \"filesystem\" service. I think that will be useful in some case, but it is a bad idea for the common cases and it brakes the 12 factor: http://12factor.net/backing-services.\nA example is the wp-content and upload files. You should use an object storage like s3 or swift to do it instead share a dir between the units.\n. What do you means is include the unit name? if yes, I'm +1 with this issue.\nthere is an issue (#375) to add information about the unit in tsuru log output.\n. In docker provisioner the unit name is the container id.\n. @lynxnathan yes :-)\nThe idea is make tsuru works with go get\n. Thanks for report. We have done an issue (#600) that improved the deploy output that was released on 0.3.1. \nBut still there are more things to do, to improve it the output.\n. In the 0.6.0 and 0.7.0 version the deploy log has been improved.\n. I think that it will conflicts with modifications made via tsuru cli. \nFollowing your example, if the number of the units on app.yaml is setted to 10 and access have been due to higher than expected, someone added 10 more units via tsuru cli, now you app has 20 units. On deploy the number of the units will be restored to 10.\nI think that i will have the same problem with autoscale.\n. There is two ideas here. One is to rename app.yml to tsuru.yml and the another is put the depedence control on tsuru.yml.\nThe rename the app.yml to tsuru.yml is simple to do. We can do it and deprecate the use of app(.yml/yaml).\nPut the dependence control is hard to do and I think that it will make this control more complicated I the most cases. \nCurrently, each platform control how it will install the dependencies. This makes simpler the way to build a new platform. And makes the way used to install deps similar to what is used by developers. By example: in ruby is used Gemfiles, in python requirements.txt and in node.js package.json.\nAnd it is placed in the root because that is the default used by these platforms.\nI think changing the way that this is done to put this information in tsuru.yml will give more work to the developer when he want to use tsuru.\n. the way is to create a platform to support this\n. We will support buildback in the future. There is an issue related with it (#486) and there is an experiment a buildback platform: https://github.com/dgryski/tsuru-bootstrap/tree/master/heroku \nBut it is not production ready.\nNow, related with the modules support. What I tried to say is that you can create platforms that support apache modules, something like, modules.conf or in the app.yaml:\n- modules:\n    - mod_rewrite\n    - mod_wsgi\nThe default plataforms does not support it, and the default platforms does not use apache. But you can create platforms that support it. You can create the your php platform that uses apache and support apache modules.\n. This system inconsistency does not exist.\nThere is an image by platform (php, python, java) and an image by deploy (myapp-revision1).\nOn deploy tsuru creates a new image based on the last app deploy image, like myapp-revision2 based on myapp-revision1.\nOn add-unit tsuru uses the last deploy image, like myapp-revision2.\n. If you are using segregate node, tsuru always will get an image from registry.\n. @guestisp the unit image is sent to registry: https://github.com/globocom/tsuru/blob/master/provision/docker/docker.go#L365\n. @guestisp do you defined the docker:registry in the tsuru.conf.\n. @guestisp in this case, tsuru will try to use the docker-registry.mycloud.tld:8080/tsuru/test1:latest image and will raise an error. :(\nHow do you installed the registry?\n. You can do it to see if the image is on registry:\nregistry=your-registry-url.com\nappname=your-app-name\ncurl ${registry}/v1/repositories/tsuru/${appname}/images\n. A way is to do something so that a platform is updated, on the next deploy all apps that use this platform use the updated image.\n. closed by #780\n. It is not duplicated of https://github.com/globocom/tsuru/issues/591 and https://github.com/globocom/tsuru/issues/283 ?\n. @guestisp you're right. It should fix this issue. thank you\n. closed by https://github.com/globocom/tsuru/commit/2bb29427608a1297ac2b0e9eaafc5dd661a12204\n. It's a blocker but it is intermittent. We should work on it this week\n. @guestisp this happens in all deploys?\n. You can use the segregator scheduler to do it: http://docs.tsuru.io/en/latest/provisioners/docker/schedulers.html\n. You can have multiple nodes for the same team. But the node is chosen randomly.\n. We have support for N nodes to N teams. And we have a fallback support, if is no nodes is setted for a team, segregate scheduler will get the fallback nodes for this team. \nfallback nodes are the nodes without teams.\n. yes. :)\n. @guestisp can I close this issue?\n. Tinycore is used by boot2docker. To works with tinycore we should distribute a tsr version without cgo.\n. If you want to use tsuru on boot2docker, what you can do is compile tsr with cgo disabled.\n. You can use the 'pre restart' hook: \nhooks:\n  restart:\n    before:\n      - your command\n. is execute inside the container.\n. Can you use the command below and paste the result:\ntsuru run 'cat ../apprc' -a appname\n. It is a bug. the issue #695 should fix it.\n. @guestisp can I close this issue?\n. Te problem is in the getImage function: https://github.com/globocom/tsuru/blob/master/provision/docker/docker.go#L449\n. @marcelometal thank you!\n. @marcelometal thank you!\n. The tsuru-bootstrap uses the last tsr version and docker 0.8.0 and seems that everything is ok\n. this bug has been fixed with the 0.4 release.\n. @guestisp can I close this issue?\n. @guestisp the scheduler storage is configured? Here is an example for the scheduler configuration: https://github.com/dgryski/tsuru-bootstrap/blob/master/tsuru.conf#L170\n. @guestisp do you mean the platform image, like \"tsuru/php\"? Tsuru should not remove this image when an app is removed because this image can be used by more than one app.\n. @guestisp It is fixed? Can I close this issue?\n. @guestisp ok, thank you.\n. Hi @guestisp,\nHow I commented in the issue #679, the host info is usefull for the\ncloud admins, but not for the final user (developer).\nFor the final user the host info should be irrelevant.\nWhat you/we can do is show the information about the host only for admin users.\nRelated to #434, it is need to add some tests.\nThank you!\n. Related to #679, the container id is enough to find and  solve any problems on the unit. We are creating commands (on tsuru and abyss) to help and make the support and troubleshooting easier. \nRelated #434, we can add some code to test when the conf is defined and when the conf is not defined.\n. @luizgpsantos thank you!\n. Do you mean something like it: https://github.com/globocom/tsuru/blob/master/docs/releases/tsuru/0.8.6.rst ?\n. We can track it getting the github history of the cmd package: https://github.com/globocom/tsuru/commits/master/cmd\n. @guestisp we are changing the way that the environs are injected. We are creating a \"binary\" to do it on each container. \nRelatd to #633.\n. @guestisp  The circus will be used. On container start the binary will be executed, the binary will call the tsuru api to get the envs, then will inject the envs and execute circus.\n. @guestisp we can have a command tsuru deploy -a appname to list the app deploys.\n. +1\n. I like tsuru deploy-list \n. LGTM. /cc @fsouza \n. The circus already has support for statsd. It can be enabled on circus.ini.\nhttp://circus.readthedocs.org/en/latest/for-ops/using-plugins/#fullstats\n. Currently we use bs to get the metrics (cpu, memory, io) from all containers. For more info you can see the tsuru docs and bs docs about it.\n. @guestisp thank you for this pull request. See my comments on commits.\n. @guestisp I like the idea to encrypt the name of directories, but we will need a 'salt' to do it.\nIs needed some tests for this changes too.\n. I think that only salt is enough\n. Why use enctryption without a salt is usefull?\n. @guestisp you cant access docker:shardfs:mountpoint. what you can do is inject it as an environment variable.\n. @guestisp here is an example: https://github.com/globocom/tsuru/blob/master/app/actions.go#L243\n. @guestisp I will revise and create some tests for this PR. :)\n. @guestisp I believe that until the weekend this pull request will be merged\n. @guestisp sharedfs is necessary because on the creation of the container does not yet exist /home/application/current?\nI think that the way to avoid it is just mount the volume when the units are started. To do it the method that start and create the build container should not be the same method that start and create the app container.\n. I have looked the pagodabox writable storage and the stackato persistent file system:\nhttps://pagodabox.com/features/shared-writable-storage\nhttp://docs.stackato.com/user/services/filesystem.html\nThe pagodabox way is more clean and simpler. \nFor now we can use the sharedfs.py to do the symlinks and in the future if we split the build/start logic and create something to parse the app.yaml we can remove the sharedfs.\n. @guestisp and @fsouza thank you! :)\n. @guestisp can you send a pr with this change?\n. I'm +1. But I think that to do it is a bit more complicated than use rsyslog from container.\nI think that we need to do:\n- change the tsuru-circus to send the stderr and stdout of the applications to syslog.\n- change all images to support (r)syslog\n- make a way to configure rsyslog\n. this issue is already fixed. currently is possible to use external log managers like logstash or fluentd using the bs syslog backend: https://github.com/tsuru/bs#log_backends\n. What version of tsuru and docker you are using?\n. I'm +1 for this idea.\nWe can write a scheduler that support geographical regions.\n. which docker version?\n. @nightshade427 can you enter on mongodb and execute this query?\ndb[\"docker-containers\"].find()\n. @nightshade427 this is an intermittent problem. \nI'm looking to know why and when it happens and fix it.\nFor now, If you remove your app and try again, will works fine.\n. @nightshade427 I have made a change that should fix it.\n. @nightshade427 can you install tsr from source and test if it solve your problem?\n. @guestisp we are moving all projects to tsuru organization. we started to move the projects on Friday, we will finish it this week :)\n. @nightshade427 tsuru-server is 0.3.9 is released :)\n. @nightshade427 after the update do you have removed and created the abyss app?\n. I think that it is related to #716.\nLooking your config you are using multi node with the default (no segregate) scheduler.\n. @guestisp thank you!\nI have two considerations:\n1) I think that the memory parameter should be named and optional. Something like:\n$ tsuru app-create appname platformname --memory 512\n2) The docker:memory should not be mandatory.\n. LGTM, I will make some tests before accept this PR.\n. @guestisp a have create all needed tests in the custom-memory branch. I will merge it. But I see that the Swap is never defined yet.\n. @guestisp Thank you! \nCan you create a test for this issue? You can use this test as example: https://github.com/globocom/tsuru/blob/master/api/auth_test.go#L210\n. You can use go test -gocheck.f TESTNAME to execute a specific test. \nTo install the deps you can use make deps.\n. @guestisp you are right the test already exists.\n. @guestisp Thank you!\n. @guestisp the idea is not remove hipache, but just add the gorouter support. so you can choose the best solution for your cloud.\nwe can create a queue support for etcd too.\n. currently, we have support to Hipache, planb, Galeb, Vulcand and we will introduce the support for Fusis. \nI believe that we don't need to support another router.\nBut if someone wants to add this support, feel free to reopen this issue.\n. @jezdez thank you to report it. We are updating and fixing this documentation page. \n. @jezdez currently we don't have Postgres service, but you can use an external Postgres database. To install the OS dependencies you can use the \"requirements.apt\". \nThe \"requirements.apt\" works like the \"requirements.txt\".\n. This ip was used by the juju provisioner. in the docker provisioner the url is dynamically generated (after the first deploy).\n. We can use the Provisioner.Addr before deploy, but not save it on the database. Because hipache:domain can be changed.\n. @guestisp you are right. The app.Ip is changed after app is saved on database.\nIt is need create some tests for it too.\n/cc @fsouza \n. We can write two tests: one to verify that the app.Ip is being filled by provisioner.Addr. And another to verify that the api is returning the ip in json.\n. by the way drone.io integration with the tsuru: http://drone.readthedocs.org/en/latest/deployment.html#tsuru\n. drone creates a key for each repository to be used by deployment plugins. :)\n. @guestisp I will reopen because, I think that would be nice a integration between tsuru + travisci and jenkins too.\n. tsuru deploy and pre-receive hook enable the continuous integration but it's needed a way to the user get an application token, to make possible the CI access the tsuru api.\n. @heynemann thank you!\n. @guestisp we will create a golang interface for authorization and authentication. So will be possible implement backends for pure oauth, oauth + openid, eg.\nI think there is two ways, to manage the oauth token, one is store the oauth token in the .tsuru_token in the user machine.\nThe other way is create a collection to store the oauth sessions.\n. @guestisp Wich oauth server are you using?\n. @guestisp we can use the github http basic authentication: .\n On login github returns the data about the user, we can use it (in the first login) instead a user-create.\n. @guestisp there is two flow to authenticate using github oauth api. The flow that you are describing is the \"web flow\": https://developer.github.com/v3/oauth/#web-application-flow\nI have no idea how to do it works via \"tsuru client\".\nThe another flow is to use the basic authentication: https://developer.github.com/v3/oauth/#non-web-application-flow\n. I think that for the \"github\" auth backend the best way is to use the basic auth. If to use basic info is a problem, the user can generate a token via github admin: https://developer.github.com/v3/oauth_authorizations/#create-a-new-authorization\n. +1\n. @guestisp this command is to move all containers from a node to another. Why the --all or --regex?\n. We can configure bare:template via gandalf api, using curl: https://github.com/tsuru/gandalf/blob/master/webserver/main.go#L49\n. @pulecp I followed the tutorial and it is working. You are using a  shared server?\nMy environ:\n$ tsuru env-get -a mysql-api\nDJANGO_SETTINGS_MODULE=mysqlapi.settings\nMYSQLAPI_DB_HOST=192.168.50.4\nMYSQLAPI_DB_NAME=mysqlapi\nMYSQLAPI_DB_PASSWORD=mypass\nMYSQLAPI_DB_USER=tsuru\nMYSQLAPI_SHARED_PASSWORD=mypass\nMYSQLAPI_SHARED_SERVER=192.168.50.4\nMYSQLAPI_SHARED_SERVER_PUBLIC_HOST=192.168.50.4\nMYSQLAPI_SHARED_USER=tsuru\nTSURU_APPNAME=*** (private variable)\nTSURU_APP_TOKEN=*** (private variable)\nTSURU_HOST=*** (private variable)\n. +1, the I think that we can use \"clone\" app instead \"fork\". And I think that will work fine with swap command.\n. @guestisp we can use \"clone\" to clone an app. And we can use \"swap\" to change the router between two apps, making a blue/green deployment with zero downtime :)\n. @fsouza I updated the issue with more information.\n. @guestisp High availability is one of the reasons to have two or more instances of tsuru api.\n. related to https://github.com/dotcloud/docker/issues/1228\n. @guestisp the agent is still needed util the docker create a command to do it.\n. @guestisp yes.\n. @guestisp what problems you are having to run the tests?\n. @iurisilvio thank you!\n. It is already fixed, but not released: https://github.com/tsuru/tsuru/commit/2ddb55813977c36147a3cbafb4ab4d5c3d8c5525\n. @guestisp thank you\n. we don't have the collector anymore. but, the tsuru-circus makes a ping in the api. Thus the api knows that the unit is alive.\n. the major problem to be solved in this issue is how do we remove platforms that are being used\n. @fsouza updated\n. @cezarsa can I close this issue?\n. closing because juju is no longer supported by tsuru.\n. The \"nc: Address..\" is a fake process, it does not affect your application. The real problem should be: \"httpd (pid 129) already running\".\nWhat platform you are using?\n. @thbeh what tsuru platform are you using? php? python? what command are you using to create and deploy your app?\n. I think that we can inject these data as environment variables instead to do commands to return these values.\n. I'm implementing this issue injecting TSURU_TARGET and TSURU_TOKEN as environment variable. \n. @jadsonlourenco by default tsuru send the log to syslog (/var/log/syslog). If you are using the ubuntu ppa packages and the tsuru-server-api is not being started properly you should see the upstart log (/var/log/upstart/tsuru-server-api.log)\n. you are using 8080 port for tsuru-server-api and 80 for hipache?\n. @jadsonlourenco can you compare your conf with this config: https://github.com/tsuru/now/blob/master/run.bash#L33\n. what target url you are using?\n. the target should be the ip:port. port is setted in listen config field: https://github.com/tsuru/now/blob/master/run.bash#L34\n. if you are using ubuntu you should enable the api changing this file /etc/default/tsuru-server\n. by the way if you are using ubuntu, you can use the tsuru now project for the first tsuru installation: https://github.com/tsuru/now\n. @jadsonlourenco the dashboard is a python app. To install the dashboard you should:\n1 - create a python app\n2 - clone the tsuru-dashboard project : https://github.com/tsuru/tsuru-dashboard/\n3 - push to tsuru\n. done! :)\n. @bobobo1618 with json it's easy to make syntax errors, like you said. but with yaml it's easy to make semantic errors.\ncheck and fix syntax errors its easier thant fix semantic errors.\n. No. Closing.\n. @bobobo1618 It is a bug =/\nWe must fix gandalf to returns the read only url for the repositories.\n. it is done in 0.6.0\n. +1\n. @msabramo I think that your problem is different. You need to have an admin user to create an user.\n. @scorphus thank you!\n. @philiptzou what tsuru version are you using?\n. LGTM \n. @scorphus Thank you! \n. I think that it is not a bug. Rebalance by cluster should be an option.\n. @morpheu you are right.\n. Hi @scorphus. Can you add a test for it in app package. The cname tests in the app package are here: https://github.com/tsuru/tsuru/blob/2eff079c1d5f8d1f5416578b4fb7f23835de79fd/app/app_test.go#L1058\n. @scorphus thank you!\n. @minhdanh the log command is tsuru log. You can see all available commands with tsuru:\n```\n$ tsuru\ntsuru version 0.9.0.\nUsage: tsuru command [args]\nAvailable commands:\n  app-create\n  app-grant\n  ...\n  log\n  ...\n```\n. @minhdanh fixed. thank you!\n. @minhdanh the process specified in the Procfile should send the log to stdout / stderr instead send it to a file.\ntsuru captures everything that is sent to stdout / sdterr by your process.\n. @philiptzou thank you!\n. what do you think that should be improved?\n. Hi @minhdanh thank you for your feedback. There are two issues in your feedback:\n- fix installation guide\n- improve the structure/navigation of the documentation\nI think that we should do the both things, but already have an issue related with the \"fix installation guide\": #747. And I believe that this commit already have fixed it: https://github.com/tsuru/tsuru/commit/fe0ceeaf29a95bee59e6e78e182d747892284b9c#diff-8b757c383a281d8adf793fa2022d90f1\nHow @tarsis referred to improve the documentation he fixed, I would like to know what improvements he or anyone thinking about.\nRelated with \"improve the structure/navigation of the documentation\" I think that is very important by I dont know exactly how we can fix it.\nps: there is a topic about \"what is an unit, what an application\", is the faq page: http://docs.tsuru.io/en/latest/faq.html\n. @ilovenwd done. thank you!\n. Hi @jasoncox the tsuru-node-agent was removed. What command are you using to add nodes? The doc about it is here: http://docs.tsuru.io/en/0.5.0/provisioners/docker/schedulers.html#adding-node-to-a-pool\n. @jasoncox  what is the error output? \n. What target you are using? The same for \"tsuru\" client? Are you using tsuru-admin 0.4.0?\n. @jonaskac what version of ubuntu are you using?\n. This is a docker bug: https://github.com/dotcloud/docker/issues/5663 . You can fix it updating the docker version to 1.x.\n. @jonaskac can I close this issue?\n. This problem is caused by ssh issues with the docker 0.11 and ubuntu 14.04: https://github.com/dotcloud/docker/issues/5663 . You can fix it updating the docker version to 1.x.\n. @jonaskac can I close this issue?\n. @jonaskac what do you want to put in a screen session?\n. currently \"-a/--app\" is a pattern used by all comands. I think that if we change it for \"app-info\" we should change it for all commands.\nbut in some commands we can't change it. \nso, i'm -1 for this change.\n. +1 for warning \n. @fsouza myservice is a service instance. The callback is a path. I don't know if we want to support querystrings.\n. it's look like a bug to me. I will try investigate to know why its happen.\n. Try to run:\ntsuru run 'echo $VARIABLE'\nYou should but echo inside of quotes to avoid shell expand the variables in your (local) machine.\n. @jonaskac I create a static app with this app.yml\nhooks:\n  build:\n    - echo \"bla\"\n    - echo $TSURU_HOST\nAnd it works fine: \nremote: Cloning into '/home/application/current'...\nremote: /\nremote: requirements.apt not found.\nremote: Skipping...\nremote: bla\nremote: http://tsuruhost...\n. $ git push origin localbranch:master\n. @danvanwijk thank you!\n. +1 for user and app quota\n. +1\n. +1\n. @diegotoral thank you!\n. There are two ways to recover these units:\n1) Restart all these containers and fix the ip using \"tsuru-admin fix-containers\"\n2) Using the \"tsuru-admin containers-move\" with the same host as source and destiny\nI usually use the second option.\n. the idea is to use the team owner as the app owner and remove the user owner attribute.\n. @fsouza yes.\n. @jblancett yes. It works with yml or yaml: https://github.com/tsuru/tsuru/issues/477\n. I will create a make release <version> to automate the release process creating the tag and updating the version string.\n. currently is possible to use external log managers like logstash or fluentd using the bs syslog backend: https://github.com/tsuru/bs#log_backends\n. closed by https://github.com/tsuru/tsuru-client/commit/a4c7640563e4a29c219482b8cbe5c37596d97c9f\n. Hi @philiptzou, we try to follow the milestones to make the majors releases:  https://github.com/tsuru/tsuru/milestones. Fortunately, I'm working on the last 0.7 issue. After that we will start the 0.7 release process.\n. Add a  server in the tsuru.conf should not be mandatory. Currently, it is a bug. But in the 0.7 it is fixed by https://github.com/tsuru/tsuru/commit/526ee0cc35e3ee5fd16679094201b63702f4bf8a\n. @msabramo thank you!\n. @jblancett thank you!\n. reopening this issue, docs is needed. /cc @joaopaulovieira \n. @jblancett the tsuru already has a setting for this. You should define the logfile in the log:file setting.\n. @jblancett thank you!\n. @flaviamissi  8.0 or 0.8?\n. @msabramo this was closed because anyone was looking for this PR. Fell free to reopen this issue when you will try to test tsuru + openstack.\n. Why the team and user info is not enough?\n. @albertoleal thank you!\n. @msabramo can you update the TestGuessingCommandFailToGuess: https://github.com/tsuru/tsuru/blob/master/cmd/guess_test.go#L160 ?\n. @msabramo thank you!\n. @msabramo thank you!\n. @msabramo what is the advantage to use your script instead to use brew and apt-get?\n. We had this same problem in the past. The way we did to solve this problem was to create an internal guide on using the tsuru. A \u201cquick start\u201d document with the \u201ctsuru-target\u201d  address and another things.\nAnd we did some workshops explaining the purpose of the tsuru (decrease the time that an application goes into production) and how to use tsuru.\n. @sroze thank you!\n. tsuru try to execute a command in all app units. tsuru don't verify the unit state. it is a bug.\ntsuru should verify if the unit is started and I think that should be a way to tsuru identify a container used to create the deploy image (that IMHO is not an unit).\n. @wpjunior I believe that what do you want is \"clone/fork\" applications: https://github.com/tsuru/tsuru/issues/760\nAm I right?\n. Hi @alexanderjardim apparently the process is dying and being restarted by upstart.\ntsr api send log to syslog, so you can see the logs using tail -f /var/log/syslog. I will try to reproduce the problem, but I believe that the api log should help us to know what's happening. \n. @alexanderjardim can you share your tsuru.conf? \nps: a tip, the tsuru api process name is tsr, not tsuru :)\n. Seems that the key listen is missing from your tsuru.conf. Can you check you tsuru.conf. There is an example on the documentation: http://docs.tsuru.io/en/latest/installing/api.html#installing\n. I think that this command should be a crane command too.\n. @yokomizor thank you!\n. It is a good feature for public clouds :)\n. @guestisp thank you!\n. the tests are broken because it is need to start the MongoDB and Redis before run the tests. \nI have add the docs label for this issue, because we should document it.\n. tsuru dashboard (https://github.com/tsuru/tsuru-dashboard) has a deploy page, but it is not integrated with tsuru api.\n. @msabramo thank you!\n. @msabramo thank you!\n. This idea is awesome! @msabramo can you add a test for this new behaviour?\n. @msabramo this feature is very cool! :) thank you!\n. We forgot to add the dependency in Godeps.json. :(\n. @msabramo you can use godep save ./...  to add the new deps to Godep.json.\n. @msabramo thank you!\n. @msabramo thank you!\n. @msabramo thank you!\n. @msabramo thank you!\n. @msabramo thank you!\n. @msabramo thank you!\n. @msabramo can you add some tests?\n. @msabramo thank you!\n. @msabramo can you add a test?\n. @msabramo thank you!\n. @msabramo thank you! Can you add some tests to check Context-Type in the header?\n. @msabramo thank you!\n. @msabramo looks fine send the log to stderr to. But I thinking if it should be a default behaviour or configurable.\n. I dont know if have some drawbacks, but I thinking if there is a case that we dont want send the log to file/syslog + stderr.\nAnother thing, we should send all log data to stderr or just send the error level is enough?\n. @msabramo can you add tests for multiLogger?\n. @msabramo thank you!\n. :+1: \n. Hi @gwmoura. You are trying to add a node that already exist. If the docker:servers is configured tsuru will try to add the node defined in the conf. I belive that you have added the node defined in tsuru.conf before.\nTo fix it try to remove the docker:servers from tsuru.conf and restart tsr.\n. @msabramo I think that we can deprecate this config. And add nodes only using the tsuru-admin command.\n. @msabramo @joaopaulovieira is working in the issue https://github.com/tsuru/tsuru/issues/967\nIn that issue he will make the /healthcheck check for the MongoDB, Redis, Docker nodes, eg.\nYou should wait @joaopaulovieira finish his work and reuse the methods that checks these availability.\n. @msabramo nice idea! We have some ideas to improve the tsuru website. One of the ideas we have is create a gif showing a simple deploy workflow. But we want/should add videos and blog posts about tsuru, how to use, how scale, eg.\nCurrently, no one is working on creating the gif. If you can and want to work with it would be great.\nThere is a related issue https://github.com/tsuru/tsuru/issues/630\n. It looks like some problem with Travis CI + MongoDB. In drone.io we don't have this problem: https://drone.io/github.com/tsuru/tsuru\n. @msabramo thank you!\n. @msabramo thank you!\n. @msabramo thank you!\n. tsuru does not use logrus.\n. @msabramo thank you!\n. In the 0.10.0 tsuru will support more than one router. It is already working on master. So the docker:router is the default router and you can set custom routers by plan.\nSo, the \"hipache:domain\" can be empty. For now, I believe that you can read the \"docker:router\" if the router is hipache you shoud print the \"hipache:domain\" value if not you can ignore it or another way is print the \"galeb:domain\".\n. @msabramo the best practice here is to get the port from the \"PORT\" environment variable.\n. @msabramo thank you!\n. @msabramo thank you!\n. can we close this issue ? I'm +1 for #1070\n. @msabramo thank you! it is a very nice feature.\nCan you add a test?\n. @msabramo thank you!\n. why not just use tsuru-admin docker-node-list ?\n. @msabramo thank you!\n. @msabramo thank you!\n. /cc @fsouza \n. @sroze can you update the docs about healthcheck (http://docs.tsuru.io/en/master/using/tsuru.yaml.html#healthcheck) ? \n. @sroze thank you!\n. @msabramo user-create will be removed from tsuru-admin in the next tsuru-admin release. To create an user you should use tsuru client.\n. @lucasweiblen thank you!\n. @msabramo thank you!\n. @msabramo thank you!\n. is necessary to add docs about this command in tsuru client usage guide.\n. @vmalaga to mount nfs in a docker container this container should be a \"privileged\" container. tsuru does not support container with \"privileged\" mode.\nwhat you can do is mount nfs in the node and share this volume with your app. the \"shared fs\" is not documented yet. \nYou can see more info here: https://github.com/tsuru/tsuru/issues/985\n. @vmalaga with shared volumes enabled tsuru will create shared volumes for all apps. But, is possible create isolated volumes for each app:\ndocker:\n  sharedfs:\n    app-isolation: true\n. @lucasweiblen thank you!\n. LGTM. \n. closed by #1121 \n. @lucasweiblen thank you!\n. @sroze thank you!\n. @lucasweiblen thank you!\n. @lucasweiblen thank you!\n. @lucasweiblen no. Feel free to work on in this issue.\n. @fsouza LGTM\n. @dmvieira thank you!\n. You can send the serialized \"Service\" and add a \"Instances\" attribute.\n. @lucasweiblen thank you!\n. No problem. By the way, you can enable https in tsuru api without nginx. Just changing some config values: http://docs.tsuru.io/en/stable/reference/config.html?highlight=https#use-tls\n. @mwduarte anyone can contribute with tsuru. To contribute is just send a pull request :)\nYou can see the docs about how to contribute http://docs.tsuru.io/en/stable/contributing/index.html . But if you need help let us know.\n@lucasweiblen feel free to work in this issue \n. You ELB should be a tcp balancer not a http to app-shell works fine.\n. @robsonpeixoto thank for report. tsuru does not support docker registry 2.0 (docker/distribution) yet.\n. @vmalaga thanks for report. this issue is already fixed on master.\n. @scorphus wow! thank you!\n. this issue was fixed by tsuru/bs. @vmalaga can we close this issue?\n. :+1: \n. @vmalaga can you see the tsuru log output. By default tsuru send log to syslog (/var/log/syslog)\n. this issue is fixed since 0.11.1. @vmalaga can we close this issue?\n. I'm +1 to use net.URL instead string.\n. @leandrosouza can you add a test for this case?\n. Thinking more about this issue I believe that we can solve it in a flexible way introducing roles and permissions.\nAn user can have more than one role, and a role can have one or more permissions. In this way \"team leader\" can be a \"role\".\nWhat do you think about it?\n. I believe that issue https://github.com/tsuru/tsuru/issues/1278 should fix this issue\n. fixed by https://github.com/tsuru/tsuru/commit/eb6bf7be75f98610fe30d6ab3cc88cc1a661f11e\n. @RichardKnop we have a make test. But the test command runs go test ./...: https://github.com/tsuru/tsuru/blob/master/Makefile#L29\n. hi @RichardKnop, your code looks good to me. But I think that to add team leader to an team is a not flexible way to solve the authorization problem.\nMy proposal is to introduce roles and permissions, that solve your problem in a flexible way. An user can have more than one role, and a role can have one or more permissions. In this way \"team leader\" can be a \"role\".\nWhat do you think about it?\n. @RichardKnop we will add the issue #1220 to be done in the milestone after 0.12. ok?\n. @RichardKnop I believe that we will start to use API versioning in 1.0.\n. @RichardKnop there are some libs that parse json from a stream. https://github.com/brianmario/yajl-ruby is one of them.\n. ```\n$ tsuru version\ntsuru version 0.17.0\n$ tsurud version\ntsurud version 0.12.0.\n```\nMy tsuru client is from source.\n. I was using godep restore, but my version of websocket was from code.google. so the godep was not getting update to the right version.\nthanks\n. @jpprins1 you can use oboejs to parse json stream with angular: http://oboejs.com/examples\n. Hi @dmitryck you can add a cname record in you dns for your three domains  with hipache address as value of these cname's.\nAfter that you should use the tsuru command: tsuru cname-add to define the app cname:\ntsuru cname-add <cname> -a <appname>\n. @dmitryck when you add a cname via \"tsuru cname-add\", tsuru store this info in the MongoDB and add this new \"cname\" conf in the hipache (via Redis). So, it does not need restarts.\nAbout add new router backends, you need to change the tsuru.conf nad restart the tsuru api. The routers (hipache) don't needed to be restarted. The tsuru api restart does not affect the running applications.\n. @dmitryck can we close this issue?\n. I believe that issue https://github.com/tsuru/tsuru/issues/1278 should fix this issue\n. @dmitryck your app should be bound to 0.0.0.0 to be accessed outside of the container.\n. @dmitryck can you paste your Procfile ?\n. @dmitryck your Procfile is ok. can you try to access the application externally by <host-ip>:<port> ? Another think that you can try is to use the \"tsuru-admin app-routes-rebuild\" command. \n. Sorry about that. What I mean is to you try to access externally your application by <hostip>:<port>.  You can see these info using app-info command.\n. @dmitryck in the docs there is no -b 0.0.0.0 the there is -e production. When the -e production is defined rails server binds the application to 0.0.0.0\n. hi @dmitryck can you close this issue?\n. @leandrosouza  I update the docs about how to use metrics with tsuru: http://docs.tsuru.io/en/master/advanced_topics/metrics.html\nWe recommend to use Logstash + Elasticsearch in the docs has a example of Logstash config.\n. This doc is for tsurud 0.12+. How you are sending metrics to logstash?\n. You don't need StatsD to send metrics to Logstash. You just need Logstash and Elasticsearch. To enable it you should define these enviroment variables in your app: LOGSTASH_HOST and LOGSTASH_PORT.\nps: The metrics sent by units using Circus was removed from tsuru since 0.12.x.\n. @leandrosouza what version of dashboard are you using? try to use the version from master.\n. The way that tsuru handle metrics has changed, tsuru 1.0 has no StatsD support. So this issue is not valid.\n. @ggarnier thank you!\n. @ggarnier seems like is something with travis. I restarted the build and all tests pass now. :)\nIt is necessary to update the tsuru/cmd package in https://github.com/tsuru/tsuru-client, https://github.com/tsuru/tsuru-admin and https://github.com/tsuru/crane to reflect these changes in the clients. \n. @ggarnier thank you!\n. @ggarnier if you need help let us know\n. +1 to make capped size configurable\n. @dmitryck tsuru abstracts some docker options. By example, you can limit memory and cpu using plans and related with mount there is a conf to sharefs in units: https://github.com/tsuru/tsuru/pull/734\n. This issue isn't easy. This change will affect all service operations.\n. @blacksector it happened with you? can you help us to reproduce this problem?\n. @combor thanks for contribute. Can you add a test? You can take this test as example: https://github.com/tsuru/tsuru/blob/master/provision/docker/bs/cmd_test.go#L19\n. Can you look at the tsurud upstart log and paste de error here? the log should be in /var/log/upstart/tsuru-server-api.log\n. Looks like that something is restarting the process. A possible reason can be that your machine is out of memory. Can you try again and see the syslog (/var/log/syslog) to check if is this problem?\n. @flaviamissi thank you! can you also check if HotsPot is empty?\n. @flaviamissi thank you!\n. Since 0.13.0 it is need to add a role with the team.create permission to a user can create teams. You can create a role with this permission and add it as default role:\ntsuru role-default-add --user-create team-creator\nYou can see more about permissions and default role here: http://docs.tsuru.io/en/0.13.0/managing/users-and-permissions.html?highlight=permissions#default-roles\n. @flaviamissi in the documentation there are some mentions about it. You can see them in the user and permissions page [0] and in the release notes [1].\n[0] - https://docs.tsuru.io/0.13/managing/users-and-permissions.html\n[1] - https://docs.tsuru.io/0.13/releases/tsurud/0.13.0.html#backward-incompatible-changes-action-needed\n. I'm not a OpenShift 3 user, so I will describe somethings that differs tsuru from the another PaaS's.\nTwo things makes tsuru different, your main objective and the fact that tsuru is more two years being used in production by Globo.com and another companies like Hotel Urbano, JusBrasil, QDQmedia.\nThe tsuru main objective is to be a tool to make the deploy simple and fast, shorting the time to a application takes to be production ready with scalability and high availability. \nThinking in this objective tsuru has some features to make this objective possible:\n- healthcheck that enables deploy with zero downtime\n- application swap to enable blue/green deployment\n- auto healing for tsuru nodes and application units\n- auto scale (by service)\n- administration tools\n- powerfull role based access mechanism for managing users and permissions\n. @wpjunior thank you\n. we should move the platforms documentation to https://github.com/tsuru/platforms. A good example is the php platform: https://github.com/tsuru/platforms/blob/master/php/README.md\n. @reoring thank you!\n. @ggarnier thank you!\n. this issues was fixed in tsuru 1.0\n. @reoring can you wait for 1.0?\n. @fsouza just pin Docker version in tsuru now will not solve this problem for people that uses tsuru with Docker 1:10 in production. So I'm +1 to add this fix in a minor release.\n. @andrestc I believe we should close this issue when this feature is done\n. @ggarnier thank you!\n. @ggarnier thank you!\n. Hi @myhro, the env-get is the command missing here. Thank you for report.\n. Hi @badri, \ncurrently we do things like it using the tsuru plugin system: https://docs.tsuru.io/stable/using/cli/plugins.html?highlight=plugin#creating-your-own-plugin.\nYou can add custom routes in your service api and call them using a plugin. tsuru api has a route to be a proxy to custom service api routes.\nA good example is the healthcheck service api, that has a command to add urls in zabbix: https://github.com/tsuru/healthcheck-as-a-service/blob/master/healthcheck/api.py#L49 and the plugin: https://github.com/tsuru/healthcheck-as-a-service/blob/master/healthcheck/plugin.py#L53\n. @wpjunior thank you!\n. @fsouza the \"drag and drop\" deploy will be handled as a \"upload\" deploy?\n. @fsouza yes, the api uses the origin to identify the drag and drop deploy\n. @fsouza thank you!\n. @blacksector tsuru does not have a DoS protection. You can disable the user registration and to use an oauth service provider to handle user accounts.\n. fixed https://github.com/tsuru/tsuru-client/commit/4c5e438dde583c6a5f26867d8bc5f7dc28d82907\n. There are two ways to install a platform. With a Dockerfile ou based on a Docker image. Why you don't want to create your own Dockerfile?\n. @rodrigodealer thank you!\n. @jpic thank you!\n. @jpic thank you!\n. @pedrosnk thank you!\n. +1 for removing guessing name based on directory name.\n. I'm +1 for fix the extra units problem. \nIgnore empty containers will avoid the extra units problem. But I believe that removing empty containers in insertEmptyContainerInDB is not a simple task because this method is called concurrently on start containers.\na disclaimer: unlock applications that deploy takes too long can cause another problems. a possible fix is to implement a way to cancel/stop deploys.\n. I know that this issue is not only with long running deployments. This is the reason that I'm +1 for this issue :)\nI have added the disclaimer about long running deployments, because some people can use unlock in this case thinking that is a good solution, but in almost of the cases isn't.\n. I believe that this issue was fixed by https://github.com/tsuru/tsuru/commit/943486736ee5ce0c623f67bfd057181c2cfb8eab\n. This problem can be caused by a problem with Gandalf. Check if Gandalf is configured and running.\n. the problem is with the git:api-server value, the http scheme is missing\n. what is the error now?\n. @cqteixeira the api log shows that the Gandalf is not properly configured in tsuru.conf: \nWARNING: \"Gandalf\" is not working: fail - unexpected status -\nThe config should be like this: https://github.com/tsuru/tsuru/blob/master/etc/tsuru.conf#L10\n. @cqteixeira can you check the gandalf healthcheck? You can do it acessing http://tsuru-gandalf-01.vpc:8000/healthcheck\n. @dnsaoki2 is working to improve this output message \n. the version between tsuru from vm and the other host are incompatible.\nyou can check the version with tsuru version and tsurud version\n. With tsurud 1.0 and tsuru 1.0.1 releases I believe that this problem was fixed. @niccolox can we close this issue?\n. It will be included in tsuru 1.0\n. fixed in 1.0.0rc7\n. @guilhermef has sent today a PR to planb (tsuru router) that fix this problem: https://github.com/tsuru/planb/pull/11\n. @fnzv yes, you should install tsuru client from source too.\n. @wpjunior thank you!\n. closed by https://github.com/tsuru/tsuru-client/commit/ec103ee80bec166fb167f959a4e075e600fcc0a2\n. @morpheu thank you!\n. @resilva87 Install plataforms from image is a best pratice but the -d/--dockerfile still works. To work you should get the Dockerfiles from basebuilder repository: https://github.com/tsuru/basebuilder.\n. @cqteixeira thank you!\n. @fsouza thank you!\n. I'm -1 for this change. This PR makes the warning message to big and is not specific by client and platform and is useful only for brew and apt users.\n. @morpheyesh thanks for the contribution. Can you add a test for this PR?\n. @morpheyesh thank you!\n. talking with @morpheu and @cezarsa our conclusion is that define a default healthcheck when use_in_router is not defined is a behaviour not a bug. We should add docs about this behaviour.\n. @guilhermebruzzi thank you!\n. Hi @bgrant0607 do you want help with code?. @otherpirate thank you!\n. @guilhermebr thank you!\n. @gwmoura thank you!\n. @avelino thank you!\n. @gwmoura thank you!\n. fixed in https://github.com/tsuru/tsuru/pull/1496\n. @felipeweb thank for contribute. \ntsuru uses govendor https://github.com/kardianos/govendor to vendorize dependencies. You should vendorize godps too.\nIf you need help let us know.\n. @felipeweb the tests are broken because thub.com/google/gops/internal and github.com/google/gops/agent are not vendorized\nyou can see the tests output here: https://travis-ci.org/tsuru/tsuru/builds/177308721\n. @felipeweb thank you!\n. @framsouza have you added your ssh public key with tsuru key-add?. @framsouza you should add the key using tsuru client. add it manually should not work. I'm +1 for this issue. But, we should decide how it will be configured. We have some options:\n\nuse .gitignore\ncreate a new ignore file '.tsuruignore'\nadd this config in tsuru.yml\nall of the above. We can have a config 'ignorefile' in tsuru.yml. By default we can use .tsuruignore. But this conf can be defined as .gitignore.. @brunobbbs thank you!. Why not to create MongoDB a case insensitive index?. the app paramenter is not needed. You should use container.AppName instead this parameter. \nhttps://github.com/globocom/tsuru/blob/master/provision/docker/docker.go#L123\n. Can you remove the blank lines? In golang it is common dont use the blank lines inside a function.\n. this variable is not used\n. go fmt ./... is missing here.\n. what happens if you pass 0 in this parameter?\n. You can ignore my second consideration. ;)\n. where the swap value is defined?\n. @msabramo I think that is need to run gofmt -s -w . here to fix this identation.\n. You should use the Context.Stdout to send the output. There is an example here: https://github.com/tsuru/tsuru/blob/master/cmd/cmd.go#L337\n. why %q instead %s ?\n. Can you remove this empty line?\n. Can you remove these comments?\n. You should use fmt.Fprintf instead fmt.Printf:\n\nfmt.Fprintf(context.Stdout, \"Done reading config file: %s\\n\", configPath)\n. the \":\" is missing\n. You should use camel case instead of underscores.\n. you can remove this line\n. you can put this handler in a router.go.\n. I don't know. @fsouza what do you think about it?\n. Remember to add a test to check that this handler is accessed only by admins.\n. @lucasweiblen all api tests pass here.\n. I believe that this test is wrong. You are overriding the first request by the second without call setEnv with the first request. So, this test only set the last environ. To fix it you should call setEnv twice, once by request.\n. I believe that you should add a code to test this new setEnvsToApp behaviour.\n. I'm -1 for to add this field.\nI believe that the better approach is to add a service.FindServiceInstanceByName(\"name\", &user) method and to split this handler in two handlers, one to get the service info and another to get service instances by service name.\n. The copyright year should be 2015\n. Can you remove the empty line inside the functions?\n. This function will never returns an error. I believe that a better approach is remove the global vars requestExpire and defaultRequestExpiration and change this function to returns the expire time instead to load it in the global vars.\n. The OldT is a typo?\n. // SAMLRequests returns the saml_requests collections from MongoDB.\nshoud be a better comment\n. the Request type can be private. it is used only by the saml package.\n. the GetEmail, SetAuth and SetEmail getters/setters is not needed. You can access the request directly.\n. the Response type can be private. it is used only by the saml package.\n. this line should be removed\n. this line should be removed\n. this line should be removed\n. the fmt.Sprintf is unecessary here. You can just return schemeData[\"request_id\"]\n. this return is unecessary. you can remove it\n. can you remove this empty line?\n. can you remove this empty line?\n. this else is unecessary you can just return the value:\nif err != nil {\n   // your code\n}\nreturn value\n. can you revert this change?\n. the indentation is wrong here. can you fix it?\n. this two lines are unnecessary. can you remove them?\n. you should use 1000 instead int(1000)\n. Theerrorshould not be ignored here. You should change this function to returnTemplateanderror`:\nfunc getEmailResetPasswordTemplate() (*template.Template, error) {\n. The error should not be ignored here. You should change this function to return Template and error.\n. This config parameter is to long. I believe that reset-password and reset-password-sucessfully is a better option. Another good option is to use namepscaes\n. you should remove this empty line\n. and fix the order of imports\n. Actually the registry should be accessible by the nodes\n. You can ommit tsuru here\n. You can ommit tsuru here again\n. The app name should be informed via -a parameter\n. This line is not necessary. The app.ValidateOrigin will validate it.. this empty line should be removed. ",
    "flaviamissi": "Related to #28\n. Depends on #28\n. It should also verify if TSURU_HOST is already written before writes it in /etc/profile.\n. Indeed ;P\n. It's in the description:\n\"\nShould have a command to export (write in /etc/profile) (...)\n\"\n. Yeah, but this problem is in gitosis... we can make something more flexible when we finish gandalf, by I don't see how it's possible now with gitosis. Do you have any idea?\n. I made it retrieve the doc field in service's document.\nSo when you do\n$ tsuru service doc mysql\ntsuru gets the doc stored in mongo and retrieve it, followed by a new line, like this:\n```\nSome docs for mysql service\n```\n. This issue shouldn't be about the upload of the service doc?\n. We've implemented service doc add/retrieve and doc consumption.\nSince this issue is about sending doc to a service (add), I'm closing it, because it's done (by @andrewsmedina).\n. We decided to generate the manifest file, with the needed structure.\n$ crane template\nGenerated file \"manifest.yaml\" in current path\nAnd the file content should be something like:\nid: servicename\nendpoint:\n  production: production-endpoint.com\n  test: test-endpoint.com:8080\n. we should try to reproduce it again, since we've updated juju and a lot of stuff changed.\n. I just closed issue #84, that was related to it.\nNow instead of referencing the ObjectId we can use the name, that is stored in _id field, which in my opnion is much better.\n. Maybe this links can help us:\nhttp://golang.org/pkg/net/http/httputil/#NewChunkedReader\nhttp://golang.org/pkg/net/http/httputil/#NewChunkedWriter\n. With this approach the call to the service's api will happen before the database update.\nThe whole bind action should be atomic, if there are any errors while updating the database, it should undo the service call to api, which can be performed by calling the unbind action from the service's api.\n. Also, the related authorization code should check for this field before denying access to services.\n. I made a good progress on that today. There's still a need to search for more points that may do that check without using the GetServiceOrError function, I'll do that tomorrow.\n. Hey!\nMy thoughts:\ntsuru app add-team -> tsuru add-team (grant?)\ntsuru app remove-team -> tsuru remove-team (revoke?)\ntsuru app create -> tsuru app-create (just \"create\"?)\ntsuru app remove -> tsuru app-remove (just \"remove\"?)\ntsuru app list -> tsuru app-list (just \"list\"?)\nI'd rather remove the app subcommand and use the $> tsuru list like approach. We already use that in crane, and since tsuru's CLI is foccused on apps (with extra commands),  it just makes sense.\n@andrewsmedina, what is your opinion on that?\n. I search the code and didn't find it.\nSo I'm marking the bug as invalid.\n. Well, this is a descriptive bug :)\nI'll try to reproduce it and fix what I find.\nThanks\n. I guess this issue fits better for the problem: https://github.com/timeredbull/tsuru/issues/89 :)\n. I expressed myself wrong, actually, tsuru should explain it's behavior for the current configurations.\n. fixed by https://github.com/globocom/gandalf/issues/55\n. relates to #179\n. This test seems to be intermitent because of this test.\nIt seems that sometimes, the app called battery is not being destroyed as it should.\n. We decided to support manual scaling for this.\nWe are going to support unit adition/removal via command line, and on app creation the user will be able to specify the minimum number of units that he/she wants for the app.\nWe'll also automatically create an Elastic Load Balancing for each application in order to load balance application traffic across instances.\nWe also plan to support Amazon's Auto Scaling Groups, through this feature, we'll be able to solve this issue without human intervention. Maybe the best way to get into that is to create another provisioner specific to ec2 that supports this, since juju does not support it.\nSo, the first solution to this problem will not be self-healing, as it requires human intervention.\n. Solved by using circus to start gandalf webserver (which starts git daemon).\n. Moved script to github.com/globocom/tsuru-backuper\n. tsuru client!\n. +1\n. Depends on #315.\n. Thank you, @hfeeki!\nI'm +1 to keep it out of tsuru, though we should definitely reference your repository in our docs!\n. Hi!\nWith juju provisioner (the default) we use our own charms[1] to add languages/frameworks support. You can check it out in our charms repository.\nIf you need anything else, we are also available via irc, #tsuru @ freenode.net, come join us!\n[1] see http://jujucharms.com for more info on how charms works\n. but we still need documentation! x)\n. OH! sorry :P\n. Hi @isaiah, the docker provisioner is not ready for usage yet... I saw your repository but I did not quite understand what you want to accomplish. What ever it is, I am the one currently working on tsuru docker provisioner, would you like to join efforts? You can join us on freenode.net, we're on #tsuru channel. Hope to see you there ;)\nThanks!\n. +1\nAlthough we have to be careful to not let any trash left behind..\n. You mean here http://docs.tsuru.io/en/latest/apps/client/usage.html ?\n. OH, thanks!\n. Additionally, tsuru should store this information on the application's document on mongodb.\n. blocked by globocom/go-gandalfclient#2\n. Hi,\nThis is an amazon error thrown by boto, did you configure your credentials in tsuru.conf?\nWhen creating an application, tsuru will create an IAM user and a S3 bucket, one of these actions must be triggering this error.\n. In your tsuru.conf mark the bucket-support flag to false, I've just changed the default value of this flag to false to avoid this issue again.\n. Did you configure gandalf properly? Check if the user which is running gandalf have write permission in the git:bare:location (in /etc/gandalf.conf). The directory specified there should also exist.\n. If you want to speak directly with us, you can reach us in our irc channel, #tsuru @ freenode.net.\n. Thank you, @garyburd!\n. Thanks for the feedback, @ansible07! This is exactly what we want to provide, we have a lot to improve in our docs, and we hope to do it soon.\nWe also have a FAQ page in our plans, and a good elevator pitch in the README is also a good call.\nWe should give some love to tsuru docs this week, since we've got a lot of feedback on what we're missing, and we know it's really important.\nThanks again for the precious feedback!\n. I just finished writing it and I'd love feedbacks, please take a look: https://github.com/globocom/tsuru/blob/master/docs/why.rst\nI'm closing the issue, we can reopen it if something pops up.\n. I released the first version of it, please take a look.\nI'll mark this doc as alpha and leave this issue open for future improvements, when we think it's okay, we close it.\n. Yeap, but I'll keep the alpha state on the doc, so we can still improve it at any time.\nClosing it.\n. I've merged what @bardusco started and I'm going to continue his work.\n. FTR: http://docs.tsuru.io/en/latest/apps/quickstart/ruby.html\n. --source needs more investigation, I looked it out with @andrewsmedina and we got the same problem with the --lines filter.\n. Talking with @andrewsmedina and @fsouza we decide to freeze this issue. We need to decide if it is really going to be on the provisioner, maybe it'll be better if we have a Deployer interface responsible for that.\nLet's brainstorm.\n. I removed the on hold label. We're going to create a new package called deploy, with a deployer interface.\nWhen tsuru is requested to deploy an application, it should call the registered deployer to do the magic.\n. Closed with https://github.com/globocom/tsuru/commit/454546686915427370c4d2def8914b52e939448a\n. Yes, it can be done. But you will also need to manage the IaaS communication (and write a whole new provisioner). It'd be easier if you write your own php charm (or perhaps search in juju store and adapt an existent one...).\nIt's really easy to write a charm for tsuru, take a look at our charms repository\n. Hi,\nThe default provisioner (Juju) handles scaling manually. You can add and remove instances from your application using unit-add and unit-remove commands.\nIt also uses amazon's ELB for load balancing, for each created app tsuru will create an equivalent load balancer and automatically attach your instances to it.\n. Closing this issue, if it's still unclear don't hesitate reopening it. You may also reach us on our irc channel #tsuru @ freenode.net.\n. This function should also take care of storing image information in mongo.\n. Blocked by https://github.com/globocom/tsuru/issues/409\n. Blocked by #413\n. So I was wondering... Every time an user deploys code, tsuru will generate an image from the container, as time passes we're gonna have lots of image (one for each deploy, although it might be good to store the last one, in case of rollback), I think we should remove the image after we run a container with it.\nIn AddUnit action we can generate an image based on the running container and just run it (or perhaps use the last generate one).\nThere is one matter: I don't know how docker behaves in this case (removing a parent image and trying to generate another from a container that uses it). We should try it.\n. I see... I think you're right, I'm gonna try it and comment back with the result.\nThanks ;]\n. I've simplified the deployment process, now we run the deploy command and the application process in the same container, e.g.:\ndocker run -d -t -p 8888 tsuru/python /bin/bash -c \"/var/tsuru/deploy git://githost.com/app.git && circusd\"\nWorks like a charm.\n. That's great, thanks @isaiah!\n. OH, I guess I tripped on the mayonnaise here. Marking as invalid and closing\n. Actually, thinking again docker ps won't do the trick. What we need is to detect when the installation process is finished, this can be done by checking whether the deploy command has finished (and the application is running), which I'm not sure how to do... We always can perform a net.Dial at the application's host using the container ip and docker:port config, I'm don't know if this is the best approach.\nThoughts are welcome.\n. I agree that tsuru run is actually an administrative command.\nRegarding the troubleshooting, @andrewsmedina, would you mind to provide an example of how could it help? I've not used this cmd with this purpose, only for performing administrative tasks, like cating a file (apprc, for instance) or removing the /home/application/current whenever the git pull presents some sort of issue (usually caused by user misuse).\n. We also should call router.RemoveRoute\n. Also move route creation to container.create\n. The images we have on our cloud are already configured to limit the memory to 128MB, we now need to pass the -run config parameter on every deploy (because of the change in issue #437).\nWe should inspect the running container of the vm and use the value there to fill the Memory config.\n. Sorry, no news yet. An alternative is use cgroups.\n. Hi,\nTalking to @andrewsmedina and @fsouza, we changed a bit those steps:\n- run the deploy script via docker run passing the platform image if the application doesn't have any previously stored image (which means it's its first deployment)\n- use the previously generated container to create an image (docker commit, no push until we have our private registry)\n- store the image id\n- destroy the container used as base for the generated image\n- run another container using the generated image, running circusd and sshd\nHappy coding @andrewsmedina :)\n. We should also remove the containers that were running before the deploy (if there are any).\nAdditionally, we should do those steps according to the number of units the application has.\n. It doesn't seems to be an issue anymore, I tried to reproduce it in several ways and none of them this happened.\nI'm closing the issue, we may reopen it at anytime if this misbehavior shows itself again.\n. closed by https://github.com/globocom/tsuru/commit/f773281ad9d715caa7f85c360511704553ab7577\n. Also unable to reproduce, I'm closing and we can reopen if we see it again.\n. @andrewsmedina can we close this?\n. the stop is now here\n. Thank you!\n. I'll add your name to the contributors list :)\n. IMHO, it's a script that sets up a tsuru environment with docker as provisioner and hipache as router.\nIn the tsuru environment setting part, we can use some tool to do the process management magic.\nAnd when I say we should have it in docker-setup script, I mean that this script should make use of a script that configures circus to manage the processes. In real life, this should be a separated script, just like the others, so one does not HAVE to use circus to the task... Maybe I expressed myself wrong :)\nHow do you think of it?\n. IMHO, it would be great if the script is suitable for both, production and development/test environments.\n. thank you!\n. Already removed the default docker:register conf, now tsuru won't try to push anything into the registry.\nWe only need the docs now.\n. Well, there were no errors on the docker side, the container is correctly removed on it, just not in the database:\n$ sudo tail -f /var/log/syslog | grep tsr | grep -v \"regenerate-apprc\"\n2013/07/12 10:23:37 GET /v1.1/containers/4016dd8b4f8e/json\n2013/07/12 10:23:37 GET /v1.1/containers/4016dd8b4f8e/json\n2013/07/12 10:23:37 POST /v1.1/containers/4016dd8b4f8e/stop?t=10\n2013/07/12 10:23:47 Container 4016dd8b4f8ebc2101a9f4cd808afc019c0ef27b965ed491ebb5d32de994a4c1 failed to exit within 10 seconds of SIGTERM - using the force\n2013/07/12 10:23:47 DELETE /v1.1/containers/4016dd8b4f8e\n2013/07/12 10:23:47 DELETE /v1.1/images/tsuru/shout\nJul 12 10:23:37 ubuntu 2013-07-12T10:23:37-03:00 ubuntu tsr[32516]: 2013/07/12 10:23:37 Collecting status from provisioner\nJul 12 10:23:37 ubuntu 2013-07-12T10:23:37-03:00 ubuntu tsr[32516]: 2013/07/12 10:23:37 collected data for [container 4016dd8b4f8e] - [app shout]\nJul 12 10:23:37 ubuntu 2013-07-12T10:23:37-03:00 ubuntu tsr[32516]: 2013/07/12 10:23:37 result for [container 4016dd8b4f8e] - [app shout]\nJul 12 10:23:37 ubuntu 2013-07-12T10:23:37-03:00 ubuntu tsr[32516]: 2013/07/12 10:23:37 updating status from provisioner\nJul 12 10:23:47 ubuntu 2013-07-12T10:23:47-03:00 ubuntu tsr[32510]: 2013/07/12 10:23:47 Removing container 4016dd8b4f8e from docker\nJul 12 10:23:47 ubuntu 2013-07-12T10:23:47-03:00 ubuntu tsr[32510]: 2013/07/12 10:23:47 running the cmd: ssh-keygen with the args: [-R 172.16.42.9]\nJul 12 10:23:47 ubuntu 2013-07-12T10:23:47-03:00 ubuntu tsr[32510]: 2013/07/12 10:23:47 Removing container 4016dd8b4f8e from database\nThe only kinda weird thing here is the docker daemon output (it's mixed with the syslog stuff because I run the daemon on bg):\n2013/07/12 10:23:47 Container 4016dd8b4f8ebc2101a9f4cd808afc019c0ef27b965ed491ebb5d32de994a4c1 failed to exit within 10 seconds of SIGTERM - using the force\nTsuru only logs that it's removing the container, nothing else.\n. It surely might be, I actually found this while trying to reproduce the image problem.\n. I've compiled docker from master and it seems to have solved that issue although we don't actually know what was happening.\nSo it seems that the image thing is not related with that... I'll keep digging.\n. Not quite fixed.\n. Closed by https://github.com/globocom/tsuru/commit/c321d653ea3cba4aabb21ad0f05715e6a20baefd\n. Well, in this case it seems to be related to the deploy, although the deploy itself does not fail at all.\nI just went through the same steps I did before and obtained the same errors all over again.\n. Not able to reproduce anymore, but I found this issue on docker.\nAdditionally, I've updated the docker binary again and the problem seems to have stopped, although I'm not sure if this was actually what fixed it.\nI tested with tsuru on commit https://github.com/globocom/tsuru/commit/c321d653ea3cba4aabb21ad0f05715e6a20baefd and docker on 3dbf9c6\n. Relates to #162 \n. I started this, a draft can be found in this gist. We surely need an image to better illustrate.\n. We decided to run docker export and docker import on the images, this action would flatten the layers for us, see https://github.com/dotcloud/docker/issues/332#issuecomment-23034961\n. We have no control in the unbind scenario since this is tsuru's responsibility, thus we should let the unbind happen, check if another container has the same HostAddr as the removed one and enqueue the bind action for that container. So we won't actually avoid the unbind but fix it when it is need. \n. Actually, this information can be usable to tsuru itself, thus it might be stored by tsuru on the app struct (by now), something like a deploy field.\n. I thought we were talking about units... right?\nI'm not sure if this also applies to application creation, I think this is the case only if the user runs a bind before pushing code to the application (in case of docker...). But I think this is case is more complicated to address, because of the differences between provisioners unit management...\n. Hi @ramonPires, thanks for reporting this bug!\nWe will fix the platform listing issue as fast as we can. I'm opening an issue related to this in the abyss project.\nAbout the error messages, the messages that still in english even when you select portuguese as your language are the messages sent from tsuru api, we do not have i18n to those messages but we plan to, although this might take some time to be implemented.\n. Thanks @ramonPires, just opened another issue for that (on abyss).\nI've split this issue into 3 others thus I'm closing this one.\n. Yes, that might be for the best.\nBut what exactly you mean with feedback improvement? Can you explain that a little better? Do you have something in mind?\n. Hi @fullofcaffeine, we are prioritizing the users that are already subscribed, and we plan to not take long to do it, so you may ask your friends to join us at http://try.tsuru.io and they'll get an invitation soon!\nThanks for trying tsuru!\n. The nc thing (which is actually a net.Dial call should be handled with care.\nThat's because we are dialing to the host port mapped to container's 8888 port and although when the application is bound into a port it should be port 8888 (defined in tsuru.conf) the application is not necessarily bound to a port.\nThus if we use net.Dial to check if this port is answering we can have an inconsistent state for applications that does not bound to any port.\nMaybe it's worth a new issue for discussion about that dialing.\n. +1 to log levels.\nI don't really know what is happening to tsuru loop the error when beanstalkd is down, if it's a bug it should be fixed, but FTR tsuru should not run without beanstalkd running.\n. The team member can push to other apps? Has he/she added it's key with tsuru key-add ?\n. this is a duplication of #506 \n. Hi,\n1. We have a healer concept. Currently we have a healer that fix a 'ghost' docker container.\n   We need another healer to create a new unit in case of unit failure (for juju provisioner we already have a healer that does it).\n2. Yes! @dgryski has created an image that works with buildpacks. I think that in the future tsuru may support something like:\n$ tsuru app-create myapp buildpack https://github.com/kr/heroku-buildpack-go/blob/master/bin/compile\n3. We have a mysql service, but it does not support clusterization. If you need a mysql service with cluster support you may either extend our service to do it or build your own service and submit it to us so we can add it to our public cloud.\n4. You'll have to write some go code. First take a look at this interface and read our existent routers implementation (hipache router is a good call). If you can share your code we'll be glad to accept a pull request.\n. This behavior is normal, tsuru wont create units unless you deploy some code to your application.\n. We are currently updating tsuru to work with the latest docker release. You are probably facing an effect of this.\nWe can tell you when we're done so you can update your tsuru version and everything should work.\n. Everything should work fine now, can you update tsuru? (where did you install it from?)\n. The version was my bad, just updated it. For now you should install it from source, we are facing an issue with our build system so we are not generating binaries since yesterday.\nAdditionally, the fix that should solve your issue is on github.com/go-dockerclient, you should update it too before building tsr.\n. Which go version you are using? Can you paste your $ go version output? This line imports net/http/cookiejar: unrecognized import path \"net/http/cookiejar\" will give you problems compiling the binary.\nYou will probably need to update your go version.\n. It seems I was able to build the 0.2.3 version and upload it to s3, can you download and try this binary http://tsuru.s3.amazonaws.com/dist-server/tsr-master.tar.gz ?\n. running a container by hand gives the same result?\n. are you checking with tsuru app-info? do you have tsr collector running?\n. The regenerate-apprc errors are helpful for debugging, but tsuru does not have log levels yet (#115).\n. I had the same issue on creating an application, just repeated the operation without restarting anything and it worked. I am going to start investigating it.\nEverything seems to be working for you now, is that right?\n. can you post the output of a deploy using time? I deployed a wordpress on a tsuru fresh install on ubuntu 12.04 using our script, here is my output with time:\n```\n$ time git push git@192.168.56.102:blog.git master \nCounting objects: 3, done.\nDelta compression using up to 4 threads.\nCompressing objects: 100% (2/2), done.\nWriting objects: 100% (2/2), 224 bytes | 0 bytes/s, done.\nTotal 2 (delta 1), reused 0 (delta 0)\nremote: /\nremote: /\nremote: Reading package lists...\nremote: Building dependency tree...\nremote: Reading state information...\nremote: php5-mysql is already the newest version.\nremote: 0 upgraded, 0 newly installed, 0 to remove and 0 not upgraded.\nremote: From git://192.168.56.102/blog\nremote:    023f919..08b1f67  master     -> origin/master\nremote: sudo: unable to resolve host 5761b4a93279\nremote: \nremote:  ---> App will be restarted, please check its log for more details...\nremote: \nTo git@192.168.56.102:blog.git\n   6c97658..08b1f67  master -> master\nreal    0m11.062s\nuser    0m0.022s\nsys     0m0.014s\n``\n. And my first deploy, which installsphp5-mysql`:\n```\n$ time git push git@192.168.56.102:blog2.git master\nCounting objects: 1158, done.\nDelta compression using up to 4 threads.\nCompressing objects: 100% (1127/1127), done.\nWriting objects: 100% (1158/1158), 4.01 MiB | 6.74 MiB/s, done.\nTotal 1158 (delta 67), reused 0 (delta 0)\nremote: Cloning into '/home/application/current'...\nremote: /\nremote: Reading package lists...\nremote: Building dependency tree...\nremote: Reading state information...\nremote: The following extra packages will be installed:\nremote:   libmysqlclient18 mysql-common\nremote: The following NEW packages will be installed:\nremote:   libmysqlclient18 mysql-common php5-mysql\nremote: 0 upgraded, 3 newly installed, 0 to remove and 0 not upgraded.\nremote: Need to get 1042 kB of archives.\nremote: After this operation, 3928 kB of additional disk space will be used.\nremote: Get:1 http://archive.ubuntu.com/ubuntu/ quantal/main mysql-common all 5.5.27-0ubuntu2 [13.7 kB]\nremote: Get:2 http://archive.ubuntu.com/ubuntu/ quantal/main libmysqlclient18 amd64 5.5.27-0ubuntu2 [949 kB\n]\nremote: Get:3 http://archive.ubuntu.com/ubuntu/ quantal/main php5-mysql amd64 5.4.6-1ubuntu1 [79.0 kB]\nremote: Fetched 1042 kB in 6s (157 kB/s)\nremote: Selecting previously unselected package mysql-common.\nremote: (Reading database ... 23874 files and directories currently installed.)\nremote: Unpacking mysql-common (from .../mysql-common_5.5.27-0ubuntu2_all.deb) ...\nremote: Selecting previously unselected package libmysqlclient18:amd64.\nremote: Unpacking libmysqlclient18:amd64 (from .../libmysqlclient18_5.5.27-0ubuntu2_amd64.deb) ...\nremote: Selecting previously unselected package php5-mysql.\nremote: Unpacking php5-mysql (from .../php5-mysql_5.4.6-1ubuntu1_amd64.deb) ...\nremote: Processing triggers for libapache2-mod-php5 ...\nremote:  * Reloading web server config\nremote:    ...done.\nremote: Setting up mysql-common (5.5.27-0ubuntu2) ...\nremote: Setting up libmysqlclient18:amd64 (5.5.27-0ubuntu2) ...\nremote: Setting up php5-mysql (5.4.6-1ubuntu1) ...\nremote: Processing triggers for libc-bin ...\nremote: ldconfig deferred processing now taking place\nremote: Processing triggers for libapache2-mod-php5 ...\nremote:  * Reloading web server config\nremote:    ...done.\nremote: sudo: unable to resolve host e95852bacd23\nremote: \nremote: Creating config file /etc/php5/mods-available/mysql.ini with new version\nremote: \nremote: Creating config file /etc/php5/mods-available/mysqli.ini with new version\nremote: \nremote: Creating config file /etc/php5/mods-available/pdo_mysql.ini with new version\nremote: \nremote:  ---> App will be restarted, please check its log for more details...\nremote: \nTo git@192.168.56.102:blog2.git\n * [new branch]      master -> master\nreal    0m19.076s\nuser    0m1.194s\nsys     0m0.224s\n```\n. Yes, this is probably due to your environment.\nI was able to reproduce the Could not add route: EOF error, here are the steps:\n1. restart redis: $ sudo service redis-server restart\n2. immediately try to create a new application with tsuru client\n3. you should get exactly the same error.\nThis is probably due to a connection error with redis while it is still starting. If you get this error on a different situation please report to us. We should try to improve this error message (EOF), although it looks like a panic it is not, it is the original error message sent from the driver. Maybe we wrap this message, dont know yet.\n. The error may not be related to redis startup, but I am pretty sure it is related to redis connection.\nEverytime you create an application tsuru calls the Provision method of the configured provisioner (docker in this case), and all this method does is talk to mongodb and redis.\nReminding the error message: Could not add route: EOF, it does not seems to me that the error can be in another place.\nAbout your connection refused error on hipache logs, are you able to connect using telnet to the host:port hipache is repassing?\n. It seems reasonable for me to use kill instead of stop, although stop should be working.\n. Hi,\nTsuru will automatically provide S3 support for applications, you can use it via environment variables.\ntsuru.io use those variables, you can find it here.\n. Can we close this? Any other thing we may help you with?\n. Yes, just set bucket-support to true on tsuru.conf, see http://docs.tsuru.io/en/latest/config.html#amazon-web-services-aws-configuration for details.\n. Blocked by #657\n. Blocked by globocom/docker-cluster#17\n. Hi,\nthe clone is performed from inside the application's containers. Could you paste your gandalf.conf file? Also double check your host conf, it's value should not be localhost.\n. can you tell which versions you where using and where did you install gandalf and tsuru from?\n. You are right @guestisp, when using multiple docker nodes you must use a registry to host images, otherwise you'll have this problem. The fix to this is to configure docker:registry in tsuru.conf, I may be wrong, but if you don't care whether your images are public or not you can use the public docker registry at https://registry.docker.io/, but if you need your images to be private you need to configure your own registry, checkout this post.\n. You can try registry.docker.io:443 but I'm not sure this will work... But if you still seeing this issue even with a private registry you must be having another problem.. have you retried from scratch? I mean, did you removed your app and created again after setting up the registry?\n. Hmm this can be a docker bug: https://github.com/dotcloud/docker/issues/1319#issuecomment-22224355\n. I agree with @fsouza on that, if the new docket nodes are spawned automatically, there should be a call to announce that node on tsuru, so why not make two calls, one for announcement and another for re-balancing? This could be done easily via user-data \n. Hmm it also could be a parameter on the announcement command, something like tsr docker-node-add --rebalance\n. The sysadmin might want to split the administrative api from the api machine.\n. Are you able to login into a container using this private key?\nIf it works, can you try to stop the docker-ssh-agent and start it by hand? e.g. tsr docker-ssh-agent &\n. This is correct if you app has 3 units, is that right?\nTsuru will run the command on each unit and display the result for each one.\n. Tsuru does a docker pull on each docker node, so you have to remove the images from the docker nodes, this way tsuru will perform the docker pull again and use the new image.\n. Actually you can perform a docker pull instead of a docker rmi. We know it's not good for operation to run the same command on each node, although there are lots of ways to do it. I will propose a tsr command to do that automatically, something like tsr docker-update-image tsuru/python, what do you think?\nUnfortunately for now you will have to run them on each node.\n. can you suggest it here: https://github.com/globocom/tsuru/issues/692 ?\n. You're right, it's a duplication of #283. I'll close and we'll use for future reference.\n. How about slugifying the app name?\n. Well, this is easy to solve, right? Just store the slug in a unique field. But maybe it could annoy the user a little... \n. okay then xD\u200b\n. FYI, travis failure seems some kind of intermittent break, unrelated to my code.\n. all done!\n. OH, when is 8.0 coming?\n. LOL, yes 0.8!\n. You do have a point. I'm pretty sure it is an OAuth violation to pass your user token to another application..\nOur issue is that we need to identify the user in someway with the OAuth backend, and we have no way of doing so only with the username. But since any request from Tsuru to the service API is performed by a logged user, perhaps we can assume the user is already logged in via the same backend and simply\nperform our operations with a \"bot service user\", giving the needed permissions for the user on the resources we created. The resource would not belong to the user, but he/she would have full access to it.\nIt's the only idea I have to solve this... any thoughts?\n. Well in the last case it is enough.\n. Can you share your tsuru.conf? Plus the change you do that break its startup.\n. Is the expected behavior not to add any ports on the new container?\n. Depends on the priority @fsouza, if it's something that has to be delivered quick then I can't work on it, otherwise yeah I can take it (:\n. Awesome, thanks! :D \n. good call @andrewsmedina, done!\n. :metal: !\n. @andrewsmedina should we add a note in the docs in that case?\n. no prob\n. yup, done\n. done!\n. ",
    "emerleite": "Maybe 90% of globo.com developers? :)\n. :+1: \n. <3\n. ",
    "rochacon": "What about https://launchpad.net/loggo? Seems way more cleaner then glog.\n. What operations will be available to an inactive user? Will still be possible to add an inactive (unconfirmed) user to a team/project?\nI think that this flexibility is really good and useful for \"sysadmins\". I see tsuru's use mostly inside companies, were a new employee will receive a tsuru user/access with it's permission already set. In this case the confirmation is unnecessary.\nMaybe the e-mail confirmation must be configurable?\n. I started something like this some time ago, I have a working Gandalf charm which may be a start.\nI'm looking forward to setup the remaining charms, but this may take some time.\n. ",
    "savorywatt": "is this being worked on? Just curious\n. ",
    "rafaelcaricio": "I also would like to have this info in the environment. \n+1 for it!\n. I care about getting this fixed, so I'm offering USD 5.00 to the first person to fix it. \nIf you're not able to fix this yourself but you care about it too, throw in a few bucks with me and we'll get it fixed faster :) \nThe offer is made at http://www.freedomsponsors.org so if you fix this issue (according to the acceptance criteria described there) please use that site to request your payment.\n. ",
    "guilhermearaujo": "Is this still being considered?\n. ",
    "aoqfonseca": "Would be nice to have a command listing all availables charms . \n. ",
    "bardusco": "I care about getting this fixed, so I'm offering USD 120.00 to the first person to fix it. \nIf you're not able to fix this yourself but you care about it too, throw in a few bucks with me and we'll get it fixed faster :) \nThe offer is made at http://www.freedomsponsors.org/core/issue/390/cmdtsr-cmdtsuru-admin-platform-management so if you fix this issue (according to the acceptance criteria described there) please use that site to request your payment.\n. Hi seansay, by default Tsuru listen at port 8080.\nYou can configure it via tsuru client target command line as in\ntsuru target-add default 198.211.xxx.xxx:8080\nOr change the server port in /etc/tsuru/tsuru.conf\nOn Apr 7, 2013 12:58 AM, \"seansay\" notifications@github.com wrote:\n\nI setup a fresh new ubuntu 12.10 server, and run this\ncurl https://raw.github.com/globocom/tsuru/master/misc/lxc-setup.bash | bash\nand installing client and set target in my laptop, when I create user\ntsuru user-create test@test.com\nPassword:\nConfirm:\nError: dial tcp 198.211.xx.xxx:80: connection refused\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/globocom/tsuru/issues/383\n.\n. \n",
    "tarsisazevedo": "yep! :dart: \n. Hi @alanjds this issue was resolved in #283 and was released on tsuru-admin 0.3.0 version.\nPlease update your installation and try the new platform-add command!\n. Related #810 \n. We have tsuru app-deploy-list. Can we close it?\n. We should update the docker docs to explain these confs\n. thanks!\n. We can block new deploys for the apps or don't let the command remove platforms with apps.\nWhat do you think?\n. Done! :)\n. Yes @guestisp. It build an image and push to registry.\n. done :)\n. The tsuru-admin documentation is wrong. We remove the admin endpoint. Now you can use the default endpoint to admin cmds\nPlease set your target to default tsuru-server address and try again.\n. Sorry @minhdanh :)\nTsuru has two target endpoints: default and admin.\nplatform-add use the default endpoint (I think it is your-host:8080)\nPlease change your target to default, tsuru-admin target-set default, and run platform-add again!\n. Hi, you should be logged (or create an new user) and be an admin user.\nTo be an admin user, you should be in an admin team. This team is configured on /etc/tsuru/tsuru.conf.\nhttp://docs.tsuru.io/en/latest/config.html#admin-users\nI will improve the tsuru-admin to be more clear about admin user and team configuration.\n. \n. Sorry @minhdanh, these commands (docker-pool-, docker-node-) will be available in next tsuru version (0.5.0).\nI updated the docs before release tsuru. :(\nYou can use the old commands until we release it.\nPlease follow the old documentation.\nWe will release the new tsuru version as soon as possible :D\n. Sorry @minhdanh it's the wrong link. Here is the right one :D\nI will correct it in the first comment too! Thanks!\nps: sorry again, but I delete your previous comment unintentionally. #shameonme\n. Hi @minhdanh, we have one issue blocking the next release. Once it is resolved, we will launch the new version. \nAs the number of nodes (instances of docker) to deploy, you can have more than one.\nUsing docker there are two ways to configure several nodes: \n1 - Listing it in tsuru.conf (simple way):\n...\nprovider: docker\ndocker:\n   servers:\n      - http://docker-machine-ip\n   segregate: false\n...\n2 - Using segregate scheduler: \n...\nprovider: docker\ndocker:\n   segregate: true\n...\nUsing segregate scheduler you have to add nodes one by one following the documentation.\n. I think we have to let the configs explicit in tsuru api server section of install tsuru on ubuntu.\n. Sorry @jasoncox, but I don't understand what's the error.\n. done :)\n. I think it's a good way to go.\n. Thanks @msabramo \n. @msabramo if you just register your node (tsuru-admin docker-node-add --register) there is no difference. But if you add a node in your IaaS with tsuru, we save some infos about your node, so we can handle node errors (putting it on quarantine and create another node in your IaaS).\n. Thanks @msabramo :)\n. Hi, we'll test with our openstack and I hope we can merge it soon! \nThanks!\n. Hi @msabramo, I try with this conf:\niaas:\n    openstack:\n        api_endpoint: http://open-stack-address/v2.0/tokens\n        ProjectName: admin\n        Username: admin\n        Password: pass\n        ImageID: 552e2b8d-8153-47f4-86c8-6747394efd83\n        FlavorID: \"1\"\n        ZoneName: nova\nThanks a lot!\n. +1 for templates. I thinks it's more flexible than tsuru.yml.\nAnd in the future, scaler can vary some parameters on templates to scale nodes. \n. @fsouza \n\n. done with tsuru/tsuru@00dc2c8e45af81f83ce3f1b3896a9236eb9fb224\n. sorry, my fault! :(\nI'm fixing it and I'll release a new version of tsuru-admin as soon as possible.\n. Closed by tsuru/tsuru-admin@99a9471bda625f6229226fca40ff175121e91d18 :)\n. Thanks! :)\n. Can we close it @guestisp?\n. Done in tsuru/tsuru-client@23d65cc33af445d8670b656c7497852970a0050e and tsuru/tsuru@9ff7dac3810891538cfdede59db82a5c4e1b54ab\n. duplicated in #1084\n. done at tsuru/tsuru-admin@afd45efa384ba9d9e1731aeb364000717e312bc1 and tsuru/tsuru-client@a6f5cf0420cd4cef4c1e2830931e51139acd5532\n. Thanks! \n. resolved at tsuru/tsuru@59726900304c2746024a217ee2731fd98cdd19e6\nand tsuru/tsuru@8dbd61a619bdb999116d895e187e986bbd90a22a\nand tsuru/tsuru@65e8c58fdac9c72156cdecee36fc60134a660f56\n. We tested it and this not happening. If connection between client and tsuru api was lost the build continues and the image is pushed (tested at amazon and locally).\nThis error may be due to connection loss between tsuru api and docker. \nWe'll change tsuru to not register the platform in database before image ready, and failed platform won't appear in tsuru platform-list\n. +1\n. Thanks @dhilton!\n. :+1: \n. closed at tsuru/tsuru-admin@692c404b33ac67f0b3f268ec18e648a4059b2960\n. It's a side effect of this commit tsuru/tsuru-client@5febbbffcb684981a5fb8c084fa13ad69e17664e \nBefore that, tsuru client used to create hard link instead of symlink.\nI think we can add --follow-link flag in tsuru app-deploy  to follow symlink.\n. :clap: :clap: :clap: :clap: :clap: :clap: \n. Hi @avelino, thanks for this PR, but we have a policy to just update license in files we change.\nWe have a script to check that in misc/check-license.sh.\n. thanks @wpjunior :)\n. I think tsuru should disallow to add new units in stopped apps, what do you think?\n. I agree @cezarsa, but we can mix two options, 1 and 3, in one feature.\nWe can extend unit-add with a flag to start stopped units, what do you think?\n. done at tsuru/tsuru-client@750497585af82d2d9fa3668c29ba8b3454748392\n. @wiliamsouza you can update your crane from source now and it will works!\nI'll release crane packages as soon as possible!\nThanks for reporting! \\o/\n. I think the problem is this line at docker-cluster.\nTo fix that we can try to delete first on v2 registry, and if it fails, try to v1.\n. Hi @vmalaga, we decide to normalize tsuru api before release 1.0 and it takes a while to be done, sorry.\nWe have a release candidate package on ppa:tsuru/rc with this issue included, and we are about to release oficial package next week.\n. \ud83d\udc4d for remove\n. Thanks! \\o/\n. Hi @fnzv, yes you have to use tsuru app-deploy -i <docker image>\n. @fnzv there is a release candidate ppa for tsuru packages, ppa:tsuru/rc. You can use it to install these packages.\n. @fnzv tsuru need a way to run your image. So you have to provide an image with an entrypoint or a Procfile in one of the following paths: /home/application/current or /app/user or /\n. Thanks :)\n. \n\n. Hi @sstrato, I'm testing the PR but I'm getting an error in this line.\nI see the json is not returning info about AZ, but the machine is up and running with all correct metadata.\nThe return is that:\nmap[string]interface {}{\n    \"private\":[]interface {}{\n         map[string]interface {}{\n             \"OS-EXT-IPS-MAC:mac_addr\":\"fa:16:3e:53:14:0b\", \n             \"OS-EXT-IPS:type\":\"fixed\", \n             \"addr\":\"10.0.0.4\",\n             \"version\":4\n          }\n      }\n}\nI'm using the latest devstack with basic conf. \nI don't know if the code has a bug or I'm running the wrong version of OpenStack.\n. You can use log.Debug here.\n. if timeout is 0 there is a chance that task will not run. Is this a expected behavior?\n. No, sorry \ud83d\ude04 \n. ",
    "jonaskac": "@andrewsmedina I would really like to make this one, we are in big need of it in our system today. However I would need some pointers. I'm in Rio right now, would it be possible to sit down and talk about it this week? \n. :+1: \n. I used Tsuru Now for the install. Have used the config that came with it.\n. The answer that I get when I run this command is\n```\nWelcome to Ubuntu 14.04 LTS (GNU/Linux 3.2.0-31-generic x86_64)\n\nDocumentation:  https://help.ubuntu.com/\n```\n\nAnd nothing more.\nI've tried both \ntsuru run -a <appname> -- ls -la\n&\ntsuru run ls -al -a <appname>\nThe later one is the one that is documented. Both give the same result.\n. Could it be that the user when pulling from the repo gets changed to \"git\" from \"ubuntu\"? (Seems to be my problem anyway)\nI've managed to create a docker and run it interactively with the image of the one generated by tsuru. When reaching the docker that way it doesn't have a $USER variable set, which might be the reason?\n. I solved it by removing reset from the base/deploy . Don't really see the reason to have it there either, since there shouldn't be anything written in the directory if you follow the 12-factor principles. Right?\nMaybe a rm -rf . before the fetch could be a better solution? Alternatively git co . ?\n. @andrewsmedina the host machine is a Ubuntu 12.04 LTS.\nIf I start a docker with the image, and run the command as sudo everything works fine.\nI've also tried to move the order in the deploy script of the nodejs and static files so it looks like this at the top:\nbash\nsource ${SOURCE_DIR}/config\nsource ${SOURCE_DIR}/base/deploy\ninstead of\nbash\nsource ${SOURCE_DIR}/base/deploy\nsource ${SOURCE_DIR}/config\nAs it was before.\nDidn't work though, so far running it as sudo has been the only solution.\n. This commit solves the problem with run. commit\nHowever it doesn't solve the problem with the pushes :(\n. I managed to solve the problem by updating the kernel with these commands:\n``` bash\nwget http://kernel.ubuntu.com/~kernel-ppa/mainline/v3.13-trusty/linux-headers-3.13.0-031300-generic_3.13.0-031300.201401192235_amd64.deb\nwget http://kernel.ubuntu.com/~kernel-ppa/mainline/v3.13-trusty/linux-headers-3.13.0-031300_3.13.0-031300.201401192235_all.deb\nwget http://kernel.ubuntu.com/~kernel-ppa/mainline/v3.13-trusty/linux-image-3.13.0-031300-generic_3.13.0-031300.201401192235_amd64.deb\nsudo dpkg -i linux-headers-3.13.0-.deb linux-image-3.13.0-.deb\n```\n. Yes, solution was to upgrade to ubuntu 14.04 LTS on host.\n. Yes, updating to ubuntu 14.04 LTS solved the problem.\n. Could this be something that can be used for making backups?\nLets say that you make a script that gets the database and outputs it, and when done closes the unit?\n. :+1:  looking forward to the feature!\n. Hey! I tried doing that, but I kept getting other errors.\nThe reason I keep getting it is because my connection keeps going down, and when I loose the connection the process gets interrupted on the server. Or that's what it seems like.\nCould you put it in a screen maybe? To make it possible to me to go back to after a loss of connection? \n. Maybe it should be a different issue, or rename this one.\nI keep getting locked apps because I've got a bad connection to the server, and when I loose the connection it freezes, and quits. This means that the lock is still there and doesn't get released, except for with the proposed solution by @cezarsa .\nThis particular problem would be solved if I could reconnect to the server after a loss of connection. Or at least that the server finishes the task until done and releases the lock.\nClear? :)\n. It has worked before, so can it have been introduced recently?\nSeems to only be a problem when I run the cordova basebuilder (haven't tested with static, but should be the same) on nodejs it's working. \nCould it have to do with when the hooks are loaded? And the app.yaml file is loaded?\n. Ok, that seems to work, but the problem is still there with the app.yaml file.\n. Have I put mine on the wrong trigger?\nIt looks like this (should obvioulsy have posted this earlier):\nyaml\nhooks:\n restart:\n  before-each:\n   - cp www/js/config.$CORDOVA_ENV.js www/js/config.js\n. That solved it :)\n. Hmmm, this seems really random, now I can see the variable when I run env-get, but cant reach it via the scripts e.g:\nbash\ntsuru run echo $CORDOVA_ENV\n. @fsouza if I add the quotes it seems to work. Any reason for this? Shouldn't it work anyway?\n. Ok, using quotes solved the problem.\nAnd I moved everything to build, which solved the other issue, that it wasn't using the before restart hook. Still solves my problem though :)\nThanks for the help!\n. Sounds like a really smart plan. Since I guess that most developers already have a github account or something internal in the company. This just becomes an extra step. :+1: \n. Thanks @fsouza  @morpheu solved it.\n. It was actually a bug, my docker setup was responding on the old port for tsuru now which I think was 2379.\nWhen I corrected that the error disappeared.\n. Realized that this may be a stupid request?\nI'm not that into the internals of hipache, but maybe if I point multiple hipache instances to the redis-server, this could solve the problem?\n. Sweet! That's exactly what I was looking for :)...\n. @fsouza yeah, sounds like it. I added some outputs to the pre-receive hook to see what was happening, and then all started working fine. Seems like that was enough of a delay.\n. @fsouza seems to work.\n. :+1: \n. :+1: \n. :+1: \n. Hey!\nIs there a working solution for this? The docker solution doesn't seem to have been release yet, and this is making my system to feel like jelly. \n. Thanks @morpheu!\n. :+1: \nWould be awesome if the load balancer, whatever one you use, could be updated via Tsuru.\n. @cezarsa thanks man, they ar stopping my units from starting. The point is that tsuru is only going to be provisioning dockers right? The agent is obsolete?\nMy point is that if the tsuru server stops working for some reason, the dockers and load balancing functions will keep working if they are on different servers?\n. Great, that's what I'm looking for.\nHowever, my tsuru server is running and I'm getting this error:\n\nhttp://localhost:2375: cannot connect to Docker endpoint\nAnd it might be because of that that I'm getting that error in the containers.\n. This is the output:\nJan  9 21:01:25 tsuru tsr[9020]: FATAL: listen tcp 0.0.0.0:8080: bind: address already in use\n\nHmmm, which is alright I guess since the tsuru server is up and running. Right?\n. :+1: \n. :+1: \n. ",
    "guestisp": "What do you think if I add something like\n} else {\n   c.RemoveUser(u.Email)\n   return err.......\n}\nin https://github.com/globocom/tsuru/blob/master/api/auth.go#L62 ?\nThis should remove user from gandalf if user creation in tsuru doesn't go well. It should make create user atomic.\n. I can confirm and there is also a host key issue with latest version of gandalf and go-gandalfclient\n. Any update on this ?\n. Is this solved? How can I limit memory in each container?\n. Any hint on how to automate the use of cgroups in tsuru ?\nAny ETA for a fix of this ?\n. I think yes. I did that PR exactly for this.\n. Any update on this?\nIt is an issue that should be addresses as soon as possible because a failed deploy will break the repository state. (for example, repository updated and app non running or not updated)\n. News ?\n. @andrewsmedina OK but this should get high priority. In this development phase of Tsuru, bad pushes are frequent and have to create foolish commit just to trigger the hook slow down operations. The same is for the missing platform update capability ( #690  )\nThese 2 bugs should be fixed before others as they are preventing the correct use of tsuru.\nBy the way, one solution would be build a container with a sort of slugbuilder, push it to registry and then refert to the newly created image:\n1. git push\n2. pre-receive hook pipes repository to slugbuilder also passing the docker node where image should be placed\n3. slugbuilder create a new container and run hooks inside of if\n4. slugbuilder store container image to the central repository\n5. slugbuilder calls docker's remote api (at the address passed by pre-receive hook) creating and running the new container off the built image\n6. slugbuild calls tsuru (via an internal API) telling tsuru the new image id\n. Even better:\n1. git push\n2. pre-receive calls slugbuilder piping the repository\n3. slugbuilder run hooks and create a new image stored on central registry\n4. slugbuilder call tsuru deploy passing the new image name stored on registry\n5. tsuru does the rest, by using the new image name instead of git metadata\nInstead of passing git version , you have to pass the slug image:\ntype Provisioner interface {\n    Deploy(app provision.App, slugImage string, w io.Writer) error\n}\nIt's just a POC, you will loose streaming logs from slugbuilder in this way.\n. Let's make some order.\nActually, deploy workflow (with docker) is as follow:\n1. git push\n2. post-receive hook that trigger api:deploy action in tsuru\n3. api:deploy calls the provisoner\n4. provisoner start a new container based on choosen platform\n5. inside each platform image, there is a \"git pull\" that fetch the archive from gandalf\n6. each platform images has some script to manage hooks\nSo:\ngit push -> post-receive -> api:deploy -> start container -> git pull -> hooks.py\nMoving to pre-receive will need to change the workflow as follow:\ngit push -> pre-receive -> slugbuilder with new image stored on registry -> api:deploy -> start slugged image -> hooks.py\nMore deeper, this: https://github.com/globocom/tsuru/blob/1494db3214b0d4cfb856be87c0bc1f997385d104/provision/docker/docker.go#L437 could be replaced by using the image generated by slugbuilder. Platform image would be moved on slugbuilder (that will be the only component using platform images)\n. Another, easier, way would be to create a tgz archive on pre-recieve, storing that somewhere (S3, local storage, etc etc) and replace \"git pull\" inside each docker node with a \"wget | tgz\".\nThis should fix without changes to tsuru code. Let me try.....\n. Great news! Seems to work. I'm still doing some tests but so far i'm able to push and deploy an app by using pre-receive and without any slugbuilder, just plain git.\n. IT WORK!\n. Sure, i'm working on it right now. Is working perfectly, i'm just refining some things.\nby the way, is something like the following (copy-paste from my test, tons of debug string enabled and so on). You need an FTP server where to push the git archive (mostly the same as heroku does with slugs, they build some images and store somewhere)\npre-receive:\n```\n!/bin/bash -el\nwhile read oldrev newrev refname\ndo\n    env\n    app_dir=${PWD##*/}\n    app_name=${app_dir/.git/}\n    url=\"${TSURU_HOST}/apps/${app_name}/repository/clone\"\necho \"Pushing ${app_name}\"\necho ${app_dir}\necho ${app_name}\necho ${newrev}\n\nSHA256=$(echo -n ${app_name}${newrev} | sha256sum | awk '{print $1}')\n\necho ${SHA256}\n\ngit archive $newrev --format=tar | curl -s -u usr:pwd -T - ftp://my.ftp.server.tld/htdocs/${SHA256}.tar && \\\n/usr/bin/curl -H \"Authorization: bearer ${TSURU_TOKEN}\" -d \"version=${newrev}&commit=${newrev}\" -s -N --max-time 1800 $url\n\ndone\n```\nNo changes to Tsuru code.\nBasebuilder, deploy, look at this:\nhttps://github.com/guestisp/basebuilder/blob/master/base/deploy\nTrying to reconstruct the proper hash on deploy phase. Without hashing, all is working properly.\nI'm having trouble getting app_name in deploy. It's the only issue left. I can also use the plain newrev as filename but I prefere to calculate an SHA256 hash in this way:\n${app_name}${newrev}\nto ensure no collisions\n. Obviously the central FTP server could be replaced by an object storage, an NFS share, and so on..........\nOn deploy, curl could be replaced by any other system that will fetch the archive. No need to make the archive reachable from internet. Mine is just a test.\n. Fixed!\n. The only missing thing is to change the return value from curl when deploying.\nActually return code is 0 even if remote docker server is not reachable (this because the curl request is good)\nWe need to catch the deploy status, this could be easily done by writing something like \"Deploy done.\" when everything is ok (just after \"App will be restarted...\". On pre-receive we could catch this line and change the hook return code if missing. It's easy, just wrapping the whole hook inside \n(\ncurrent pre-receive hook\n) | while IFS='' read line; do\n   if [[ ${line} == *Deploy done* ]]; then \n      exit 0; \n   fi\ndone\nexit 1\n. This fix everything. It look for a string ---> App will be restarted, please check its logs for more details... to detect if push was ok or not.\nThe only needed change in tsuru code is to return a well-defined string telling hook if deploy was OK.\nSomething like `--TSURU-200-DEPLOYOK--\". This string will be filtered by pre-receive hook and not snown to users.\nIs this: https://github.com/globocom/tsuru/blob/a12ac3abac03d116d536e6b3bd99f2745fddebd7/provision/docker/provisioner.go#175 a good place where to put the status string ? If yes, I can do a PR with status string customizable from a setting\n```\n!/bin/bash -el\nset -e\nfunction deploy() {\n    while read oldrev newrev refname\n    do\n        app_dir=${PWD##*/}\n        app_name=${app_dir/.git/}\n        url=\"${TSURU_HOST}/apps/${app_name}/repository/clone\"\n    SHA256=$(echo -n ${app_name}${newrev} | sha256sum | awk '{print $1}')\n\n    git archive $newrev --format=tar | curl -s -u user:password -T - ftp://your.ftp.server.tld/htdocs/${SHA256}.tar && \\\n    /usr/bin/curl -H \"Authorization: bearer ${TSURU_TOKEN}\" -d \"version=${newrev}&commit=${newrev}\" -s -N --max-time 1800 $url\n\n    return $?\ndone\n\n}\nwhile IFS='' read line; do\n   echo ${line}\nif [[ \"${line}\" =~ \"---> App will be restarted, please check its logs for more details...\" ]]; then\n      exit 0\n   fi\ndone < <(deploy)\nexit 1\n```\nWe need to add some settings to gandalf, like the FTP host where to push the archive. \nHelp needed in adding FTP (and S3 or similiar) support to gandalf....\n. +1\nAs you know I'm not a Go developer, so I've developed the easiest way (for me) to get this working, and it works. \nI'm unable to add features to Gandalf (by the way, i've fixed some open issues, check my PRs)\nIf you can develop this features, it would be great, but you should add support for remote storage, like S3. In our production environment we will use an object storage to store repositories.\nI don't wanna rush you, but this should be addresses asap.\nI don't think notify tsuru is needed. If you place the archive inside Gandalf with a guessable name (like the SHA like I did) the deploy script already know where the archive is.\nOnly thing to change is the return code. You could add something like\n--TSURU-APP-<appname_or_sha>-DEPLOY-RETURNCODE:0-- in provisoner.go and detect that from pre-receive hook. With a regexp you can trigger an exit based on the value passed by tsuru, in this example: 0\nWhy an hugly string like this? Because that string must not be present in any of deploy output (like apt-get, pip install, etc etc based on requirements.apt, requirements.txt) or the hook will break with a wrong exit code.\nIf you like I can do this right now.\n. You are right but keep in mind that containers needs to access gandalf just on deploy phase.\nWhen container is up and running (and thus users has access to them) you don't need gandalf.\nThat's why i'm using a SHA to name the archive. You could:\n1. create a very very long SHA (512?) based on:\n   a) app name\n   b) newrev\n   c) a semi-random salt (sha1 on a fixed string \"tsuru\" plus the appname plus \"custom random string wrote in gandalf.conf)\n2. pass the random salt to containers as deploy argument (and not as env var)\n3. deploy will reconstruct the sha filename based on these piecies.\nIt's a workaround, but this will make very hard (if not impossible at all) for a container to access others repositories because they don't have the random salt, nor the newrev value, nor the appname. App name is prevedible, but you can't know the commit hash (newrev) or the random salt made by tsuru\nSome examples:\nappname is \"test\"\nnewrev is \"da39a3ee5e6b4b0d3255bfef95601890afd80709\"\nsemi-random salt:\nSHA1(\"tsuru\" + \"test\" + \"UYtNhwVI4YxsnGDLfDb0XaS3mTTNfqCH\") => b161f2eb03037cb15deeceab80f1530cd27d34a9\nUYtNhwVI4YxsnGDLfDb0XaS3mTTNfqCH is the random string wrote in gandalf.conf\narchive would be:\nSHA512(test+da39a3ee5e6b4b0d3255bfef95601890afd80709+b161f2eb03037cb15deeceab80f1530cd27d34a9) => 9c150e9411c4605b8796a65c7a2539d84aa26782cb9db63f47d6ed460c78c34db58e97ab6697252e65dc2e772d12bbca60820f20ac7aea41bb7b187a69dca269.tar\nOn deploy you will pass the semi-random salt: b161f2eb03037cb15deeceab80f1530cd27d34a9\nCustomers doens't know the random string used to create the semi-random salt, so they wouldn't be able to generate archive filenames.\n(you can also set a timed expire, for example, 5 minutes from the generation)\n. Yes, but that is another issue.\nBy the way, this: https://github.com/progrium/buildstep should be evaluated replacing the actual basebuilder. It takes an archive (for example the same archive that git archive does) and creates a docker image ready to be deployed.\nIt should automatically fix #690\n. Great news.\n. As I can see here:\nhttps://github.com/tsuru/archive-server/blob/master/archive.go#90\nyou are directly calling git archive to create the tarball.\nThis obviously need a direct access to the bare-repository directory during git push, thus forcing the placement of archive-server on the same machine as Gandalf. (keep in mind that on pre-receive, new commits are still not \"committed\" to the repository and so would be unreachable from outside the hook, you can't clone the repository and fetch the new upcoming commit from an external server)\nThis could be a big limitation. in a working environment, you probably store archive images to an object storage and forcing the usage of this archive server will prevent this feature.\nFor example, how can I push the archive to an Amazon S3 bucker, Ceph storage or a plain rsync server?\nEvery time I need a new storage system, I have to customize the archive server.\nWith my proof of concept, you just need a storage client for pushing, like http://code.google.com/p/boto/source/browse/trunk/s3put?r=695 for S3, rsync, scp, unison or whatever you want.\nAs wrote previously in this issue, probably best way to fix this (#458) is to trigger the archive creation directly from the gandalf's pre-receive hook and push it somewhere. (S3, Ceph, OpenStack Swift, ...) and not from the archive server.\nSomething like this:\n1. Gandalf makes a totally random UUID (add more entropy or salts if you like, it doesn't matter) and pass this back to tsuru in /apps/${app_name}/repository/clone/${totally_random_string}\"\n2. Gandalf push the archive somewhere (using any system binary like s3put, rsync, scp, curl or anything else)\n3. Tsuru start the container creation and pass the UUID to be used as archive name to deploy script coming from basebuilder\nThis makes the archive totally random and unguessable from other apps.\nIt would be a much easier way to fix this issue.\nOk for the archive server, but you can't trigger the archive creation from that. (anyway, why not using nginx with authentication?)\n. If you call git-archive from the archive-server, archive-server must be run on the same machine as bare repos, and actually repos are created on the same machine as gandalf.\nHow do you run gandalf and archive-server on 2 different servers and at the same time store repos on a third machine? Actually, this is not possible without using a shared storage for git repos (that could be tricky or expensive)\nCould you please explain me how can I use an S3 storage with archive-server ? I know you are still developing, but I don't see how this would be possible.\nNginx: you can use it with a standard Bearer auth by using tsuru token. \nPOST request doesn't need to be authetnicated (gandalf is also authenticating users/apps via ssh-keys) and GET request would be authenticated by nginx through tsuru api server. On POST you save the archive, on GET you'll fetch it (this is what i've planned to use in my POC, just a bounch of lines of php or python code and 2 endpoint in tsuru api, one for storing the archive url, one for getting it )\n. Ok, now it's clear, your latest examples describe exactly the same environment that I wanna get.\nFor POST/GET: your latest example:\ncurl -H \"Authorization: bearer ${TSURU_TOKEN}\"  -d \"archive-url=https://s3.amazonaws.com/mybucket/archive.tar.gz&commit=nono\" -s -N --max-time 1800 $TSURU_URL\ndescribed what I was talking about. You are directly posting the archive url to tsuru by using a common token (common for the whole gandalf server regardless the pushed app)\nAnyway, this:\ngit archive --format=tar.gz --output=archive.tar.gz master\ns3cmd put -P archive.tar.gz s3://mybucket/something\ncurl -H \"Authorization: bearer ${TSURU_TOKEN}\"  -d \"archive-url=https://s3.amazonaws.com/mybucket/archive.tar.gz&commit=nono\" -s -N --max-time 1800 $TSURU_URL\nis exactly what I'm talking about and what I'm waiting for.\n. News on this ? I don't see any changes in gandalf's hook or in tsuru code passing the archive url when deploying\n. No problem. I'm just waiting for an updated package (preferably with my sharedfs feature) so that I can test on a infrastructure without tons of dependencies needed to build code.\n. News on this and archive server?\n. Great.\n. Your latest idea seems good to me.\n. Is this finished ?\n. Why not ini files like MySQL or PHP ?\nThey are key/value based and could also use groups.\n. Based on this:\nhttps://raw.github.com/globocom/tsuru/master/etc/tsuru-docker.conf\nseems possible to define multiple docker servers by adding reference in configuration file, like the following:\ndocker:\n  servers:\n    - http://server1:4243\n    - http://server2:4243\n    - http://server3:4243\n    - http://server4:4243\n    - http://server5:4243\nWhich algorithm is used to choose a server from the list?\nIn case of App deployment made by multiple units, each unit will be placed on a different docker server ?\n. > > In case of App deployment made by multiple units, each unit will be placed on a different docker server ?\n\nYes\n\nCould you please point me to the code the does this ?\n. Il 11/10/2013 18:21, Andrews Medina ha scritto:\n\nTsuru using the default cluster scheduler algorithm:\nhttps://github.com/globocom/tsuru/blob/master/provision/docker/docker.go#L63\nThe default cluster scheduler (round robin):\nhttps://github.com/globocom/tsuru/blob/master/provision/docker/docker.go#L63\n\nYou wrote the same line twice...\n\nCorbelli Alessandro\nGUEST.it s.r.l. - CTO\nViale Giulio Cesare 25/A\n47838 Riccione (RN)\n. Il 11/10/2013 21:55, Andrews Medina ha scritto:\n\n@guestisp https://github.com/guestisp my mistake!\nThe link for round robin scheduler is\nhttps://github.com/globocom/docker-cluster/blob/master/cluster/scheduler.go#L44\n\nThank you very much.\nI have (many) other questions:\n1. Do you also have a sort of health manager that\n   will preriodically checks for apps heatlh and\n   take some actions in case of failure?\nFor example, let's assume an app scaled to 5 units.\nNormally, each unit will be placed on a different\ndocker node due to the round robin scheduler.\nWhat happens in case of one unit failure? Is tsuru\nsmart enough to create a new unit ? Will this new\nunit be placed on a different node (with the same\nround robin scheduler) ?\n1. Any plans for Heroku's buildpack support?\n2. Let's assume a cluster made with 10 mysql nodes.\n   Which algorithm is used to choose a node when\n   creating a mysql service? As above, any health manager\n   for mysql instances?\n3. How can I create a redundant and load-balanced router?\n. Thank you.\nI'm trying tsuru with no success, I always see\n0 units for my apps:\n$ tsuru app-list\n+-------------+-------------------------+---------+--------+\n| Application | Units State Summary     | Address | Ready? |\n+-------------+-------------------------+---------+--------+\n| test        | 0 of 0 units in-service |         | Yes    |\n| test2       | 0 of 0 units in-service |         | Yes    |\n+-------------+-------------------------+---------+--------+\nand in syslog:\nOct 17 16:52:50 tsuru-server tsr[13070]: 2013/10/17 16:52:50 Failed to \nget message from the queue: Timed out waiting for message after 5s.. \nTrying again...\nOct 17 16:52:50 tsuru-server tsr[13070]: 2013/10/17 16:52:50 Dispatching \n\"regenerate-apprc\" message to handler function.\nOct 17 16:52:50 tsuru-server tsr[13070]: 2013/10/17 16:52:50 Error \nhandling \"regenerate-apprc\" for the app \"test2\": all units must be started.\nOn 17/10/2013 16:50, Flavia Missi wrote:\n\nHi,\n1.\nWe have a |healer| concept. Currently we have a healer that fix a\n'ghost' docker container.\nWe need another healer to create a new unit in case of unit failure\n(for juju provisioner we already have a healer that does it).\n2.\n```\nYes! @dgryski https://github.com/dgryski has created an image that\nworks with |buildpacks|\nhttps://github.com/dgryski/tsuru-bootstrap/tree/master/heroku. I\nthink that in the future tsuru may support something like:\n|$ tsuru app-create myapp buildpack\nhttps://github.com/kr/heroku-buildpack-go/blob/master/bin/compile|\n```\n3.\nWe have a mysql service <github.com/globocom/mysqlapi>, but it does\nnot support clusterization. If you need a mysql service with cluster\nsupport you may either extend our service to do it or build your own\nservice and submit it to us so we can add it to our public cloud.\n4.\nYou'll have to write some go code. First take a look at this\ninterface\n<https://github.com/globocom/tsuru/blob/master/router/router.go#L33>\nand read our existent routers implementation (hipache router\n<https://github.com/globocom/tsuru/tree/master/router/hipache> is a\ngood call). If you can share your code we'll be glad to accept a\npull request.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/globocom/tsuru/issues/560#issuecomment-26513579.\n\n\nCorbelli Alessandro\nCTO\nGUEST.it s.r.l.\nViale Giulio Cesare 25/A\n47838 - Riccione (RN)\ntel: +39.0541649292\nfax: +39.0541664611\nalessandro.corbelli@guest.it\nhttp://www.guest.it\n. That's what I did:\n$ tsuru app-list\n+-------------+-------------------------+---------+--------+\n| Application | Units State Summary     | Address | Ready? |\n+-------------+-------------------------+---------+--------+\n| test        | 0 of 0 units in-service |         | Yes    |\n| test2       | 0 of 0 units in-service |         | Yes    |\n| test3       | 0 of 0 units in-service |         | Yes    |\n+-------------+-------------------------+---------+--------+\n$ git push git@192.168.0.141:test3.git master\nCounting objects: 3, done.\nWriting objects: 100% (3/3), 237 bytes, done.\nTotal 3 (delta 0), reused 0 (delta 0)\nremote: No such image\nTo git@192.168.0.141:test3.git\n- [new branch]      master -> master\n$ tsuru app-list\n+-------------+-------------------------+---------+--------+\n| Application | Units State Summary     | Address | Ready? |\n+-------------+-------------------------+---------+--------+\n| test        | 0 of 0 units in-service |         | Yes    |\n| test2       | 0 of 0 units in-service |         | Yes    |\n| test3       | 0 of 0 units in-service |         | Yes    |\n+-------------+-------------------------+---------+--------+\nOct 17 17:07:58 tsuru-server gandalf-listener[14013]: Executing \ngit-receive-pack /var/repositories/test3.git\nOct 17 17:07:58 tsuru-server tsr[13070]: 2013/10/17 17:07:58 [pipeline] \nrunning the Forward for the create-container action\nOct 17 17:07:58 tsuru-server tsr[13070]: 2013/10/17 17:07:58 create \ncontainer for app test3, based on image tsuru/php, with cmds \n[/var/lib/tsuru/deploy git://192.168.0.141/test3.git origin/master]\n2013/10/17 17:07:58 POST /v1.5/containers/create\nOct 17 17:07:58 tsuru-server tsr[13070]: 2013/10/17 17:07:58 error on \ncreating container in docker test3 - No such image\nOct 17 17:07:58 tsuru-server tsr[13070]: 2013/10/17 17:07:58 error on \ncreate container for app test3 - No such image\nOct 17 17:07:58 tsuru-server tsr[13070]: 2013/10/17 17:07:58 [pipeline] \nerror running the Forward for the create-container action - No such image\nOct 17 17:07:58 tsuru-server tsr[13070]: 2013/10/17 17:07:58 error on \nexecute deploy pipeline for app test3 - No such image\n$ docker images\n2013/10/17 17:08:50 GET /v1.4/images/json\nREPOSITORY          TAG                 ID                  CREATED \n         SIZE\nbase                ubuntu-quantal      b750fe79269d        6 months ago \n        24.65 kB (virtual 180.1 MB)\ntsuru/php           latest              2f67231d217e        2 hours ago \n         388.9 kB (virtual 649.3 MB)\nOn 17/10/2013 17:02, Flavia Missi wrote:\n\nThis behavior is normal, tsuru wont create units unless you deploy some\ncode to your application.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/globocom/tsuru/issues/560#issuecomment-26514786.\n\n\nCorbelli Alessandro\nCTO\nGUEST.it s.r.l.\nViale Giulio Cesare 25/A\n47838 - Riccione (RN)\ntel: +39.0541649292\nfax: +39.0541664611\nalessandro.corbelli@guest.it\nhttp://www.guest.it\n. Ok thank you.\nDo you have an ETA or a workaround?\nOn 17/10/2013 20:05, Flavia Missi wrote:\n\nWe are currently updating tsuru to work with the latest docker release\nhttp://docs.docker.io/en/latest/api/docker_remote_api_v1.6/. You are\nprobably facing an effect of this.\nWe can tell you when we're done so you can update your tsuru version and\neverything should work.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/globocom/tsuru/issues/560#issuecomment-26532811.\n\n\nCorbelli Alessandro\nCTO\nGUEST.it s.r.l.\nViale Giulio Cesare 25/A\n47838 - Riccione (RN)\ntel: +39.0541649292\nfax: +39.0541664611\nalessandro.corbelli@guest.it\nhttp://www.guest.it\n. I've used the one-liner wrote here:\nhttp://docs.tsuru.io/en/latest/docker.html\nDid you update the tsr-master.tar.gz on S3?\nBecause i'm still on version 0.2.2.\nIl 17/10/2013 21:18, Flavia Missi ha scritto:\n\nEverything should work fine now, can you update tsuru? (where did you\ninstall it from?)\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/globocom/tsuru/issues/560#issuecomment-26540282.\n\n\nCorbelli Alessandro\nGUEST.it s.r.l. - CTO\nViale Giulio Cesare 25/A\n47838 Riccione (RN)\n. Using sources there is a broken import:\n$ go get github.com/globocom/tsuru/tsr\npackage github.com/globocom/tsuru/tsr\n    imports github.com/globocom/tsuru/tsr\n    imports github.com/globocom/tsuru/tsr: import \n\"github.com/globocom/tsuru/tsr\": cannot find package\nIl 17/10/2013 21:18, Flavia Missi ha scritto:\n\nEverything should work fine now, can you update tsuru? (where did you\ninstall it from?)\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/globocom/tsuru/issues/560#issuecomment-26540282.\n\n\nCorbelli Alessandro\nGUEST.it s.r.l. - CTO\nViale Giulio Cesare 25/A\n47838 Riccione (RN)\n. I'm absolutely new to Go.\nI'm trying to use your docs but they seems to\nbe not correct or updated.\nI did this:\n$ go get github.com/globocom/tsuru/cmd/tsr\npackage github.com/dotcloud/docker\n    imports code.google.com/p/go.net/websocket\n    imports github.com/dotcloud/tar\n    imports net/http/cookiejar: unrecognized import path \"net/http/cookiejar\"\nand now ? How can I build the tsr binary?\nSources was properly downloaded.\nIl 17/10/2013 21:40, Flavia Missi ha scritto:\n\nThe version was my bad, just updated it. For now you should install it\nfrom source, we are facing an issue with our build system so we are not\ngenerating binaries since yesterday.\nAdditionally, the fix that should solve your issue is on\n|github.com/go-dockerclient|, you should update it too before building\n|tsr|.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/globocom/tsuru/issues/560#issuecomment-26542977.\n\n\nCorbelli Alessandro\nGUEST.it s.r.l. - CTO\nViale Giulio Cesare 25/A\n47838 Riccione (RN)\n. $ go version\ngo version go1\ni'm on ubuntu 12.04.3 as suggested by your docs.\n$ dpkg -l | grep golang\nii  golang-go                        2:1-5 \nGo programming language compiler\nii  golang-src                       2:1-5 \nGo programming language compiler - source files\nIl 17/10/2013 21:47, Flavia Missi ha scritto:\n\nWhich go version you are using? Can you paste your |$ go version|\noutput? This line |imports net/http/cookiejar: unrecognized import path\n\"net/http/cookiejar\"| will give you problems compiling the binary.\nYou will probably need to update your go version.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/globocom/tsuru/issues/560#issuecomment-26544257.\n\n\nCorbelli Alessandro\nGUEST.it s.r.l. - CTO\nViale Giulio Cesare 25/A\n47838 Riccione (RN)\n. It seems good, now I have active units but\nwith no IP set.\nIl 17/10/2013 22:10, Flavia Missi ha scritto:\n\nIt seems I was able to build the 0.2.3 version and upload it to s3, can\nyou download and try this binary\nhttp://tsuru.s3.amazonaws.com/dist-server/tsr-master.tar.gz ?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/globocom/tsuru/issues/560#issuecomment-26546399.\n\n\nCorbelli Alessandro\nGUEST.it s.r.l. - CTO\nViale Giulio Cesare 25/A\n47838 Riccione (RN)\n. I have to try.\nI'm having tons of error regarding regenerate-apprc\nand they are pretty annoing.\nIl 17/10/2013 22:17, Flavia Missi ha scritto:\n\nrunning a container by hand gives the same result?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/globocom/tsuru/issues/560#issuecomment-26546907.\n\n\nCorbelli Alessandro\nGUEST.it s.r.l. - CTO\nViale Giulio Cesare 25/A\n47838 Riccione (RN)\n. Yes to both question.\nIl 17/10/2013 22:18, Flavia Missi ha scritto:\n\nare you checking with tsuru app-info? do you have |tsr collector| running?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/globocom/tsuru/issues/560#issuecomment-26547127.\n\n\nCorbelli Alessandro\nGUEST.it s.r.l. - CTO\nViale Giulio Cesare 25/A\n47838 Riccione (RN)\n. It frooze here:\n$ git push git@192.168.0.141:test6.git master\nCounting objects: 5, done.\nDelta compression using up to 4 threads.\nCompressing objects: 100% (2/2), done.\nWriting objects: 100% (3/3), 276 bytes, done.\nTotal 3 (delta 0), reused 0 (delta 0)\nremote: Cloning into '/home/application/current'...\nremote: /\nremote: requirements.apt not found.\nremote: Skipping...\nIl 17/10/2013 22:17, Flavia Missi ha scritto:\n\nrunning a container by hand gives the same result?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/globocom/tsuru/issues/560#issuecomment-26546907.\n\n\nCorbelli Alessandro\nGUEST.it s.r.l. - CTO\nViale Giulio Cesare 25/A\n47838 Riccione (RN)\n. I would like to debug what is wrong here but\nit's impossible, there is nothing useful in\nlog files, only issue regarding regenerate-apprc\nIl 17/10/2013 22:24, Flavia Missi ha scritto:\n\nThe regenerate-apprc errors are helpful for debugging, but tsuru does\nnot have log levels yet (#115\nhttps://github.com/globocom/tsuru/issues/115).\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/globocom/tsuru/issues/560#issuecomment-26548532.\n\n\nCorbelli Alessandro\nGUEST.it s.r.l. - CTO\nViale Giulio Cesare 25/A\n47838 Riccione (RN)\n. Il 17/10/2013 22:37, Francisco Souza ha scritto:\n\n@guestisp https://github.com/guestisp could you share your configuration?\n\nI'm using the oneliner wrote on your docs, without any\ncustomization.\n\nAlso, when it hangs, can you run |docker ps -a| to see if any of the\ncontainers have failed?\n\nID                  IMAGE               COMMAND                CREATED \n            STATUS              PORTS\n05abf671a8bb        5f7e870b3a7e        ifconfig               17 \nminutes ago      Exit 0\n8d65a4c7a907        5f7e870b3a7e        ls                     17 \nminutes ago      Exit 0\n585b458df5e8        31b7f8b36e89        /bin/bash -c /var/li   30 \nminutes ago      Up 30 minutes       49154->8888\nfd8c1e938bf6        c6959dd35119        /bin/sh -c /var/lib/   4 hours \nago         Exit 0\n25831b4d6d3a        7d3b9f844c3f        /bin/sh -c /var/lib/   4 hours \nago         Exit 0\n7e564e1092ac        6d70fbec7067        /bin/sh -c cp /var/l   4 hours \nago         Exit 0\nb11646c3b514        0f034cc3754c        /bin/sh -c cp /var/l   4 hours \nago         Exit 0\n63a17a382395        87656e32e4d2        /bin/sh -c cp /var/l   4 hours \nago         Exit 0\na5808f2bbbdc        4a12cc06aa45        /bin/sh -c tar -xvf    4 hours \nago         Exit 0\nc168af3eebbf        c35570512b3e        /bin/sh -c mkdir /va   4 hours \nago         Exit 0\n6be40db2cf4d        bacf792bcbdd        /bin/sh -c wget http   4 hours \nago         Exit 0\nab932ab5dc2a        bacf792bcbdd        /bin/sh -c wget http   4 hours \nago         Exit 0\n6b8764fc561e        b750fe79269d        /bin/sh -c apt-get i   4 hours \nago         Exit 0\n25afa8a08354        2f67231d217e        /bin/bash              4 hours \nago         Exit 0\n8c4a8f916e37        4c95d5c54519        /bin/sh -c /var/lib/   8 hours \nago         Exit 0\n0a655993f84e        352f1e7e11c4        /bin/sh -c /var/lib/   8 hours \nago         Exit 0\n89cb91585634        7da896fb0727        /bin/sh -c cp /var/l   8 hours \nago         Exit 0\nec27b0f778de        779c6006fd94        /bin/sh -c cp /var/l   8 hours \nago         Exit 0\n3bb14ee5ebbf        9caba6a972e3        /bin/sh -c cp /var/l   8 hours \nago         Exit 0\n59507dac6cbd        e68bf3a7c7de        /bin/sh -c tar -xvf    8 hours \nago         Exit 0\n2709c44bfbd2        db52a44a3617        /bin/sh -c mkdir /va   8 hours \nago         Exit 0\n1787facadbca        e9aba011dee5        /bin/sh -c wget http   8 hours \nago         Exit 0\n3a7446f9e143        b750fe79269d        /bin/sh -c apt-get i   8 hours \nago         Exit 0\nthese images doesn't exists!\n\nAlso, could you list containers in Tsuru database and post output here?\nYou will need to run:\n|% mongo tsuru\n\ndb.docker.find()\noutput here\n{ \"_id\" : \"585b458df5e8\", \"appname\" : \"test\", \"type\" : \"php\", \"ip\" : \n\"172.17.0.22\", \"port\" : \"8888\", \"hostaddr\" : \"localhost\", \"hostport\" : \n\"49154\", \"status\" : \"running\", \"version\" : \"\", \"image\" : \"tsuru/test\" }\n{ \"_id\" : \"83362db752c3\", \"appname\" : \"test6\", \"type\" : \"php\", \"ip\" : \n\"\", \"port\" : \"8888\", \"hostaddr\" : \"localhost\", \"hostport\" : \"\", \"status\" \n: \"created\", \"version\" : \"\", \"image\" : \"\" }\n{ \"_id\" : \"72805d681af9\", \"appname\" : \"test6\", \"type\" : \"php\", \"ip\" : \n\"\", \"port\" : \"8888\", \"hostaddr\" : \"localhost\", \"hostport\" : \"\", \"status\" \n: \"created\", \"version\" : \"\", \"image\" : \"\" }\n{ \"_id\" : \"ecb9f91bf6db\", \"appname\" : \"test5\", \"type\" : \"php\", \"ip\" : \n\"\", \"port\" : \"8888\", \"hostaddr\" : \"localhost\", \"hostport\" : \"\", \"status\" \n: \"created\", \"version\" : \"\", \"image\" : \"\" }\n{ \"_id\" : \"6e6bfd3a6e03\", \"appname\" : \"test\", \"type\" : \"php\", \"ip\" : \"\", \n\"port\" : \"8888\", \"hostaddr\" : \"localhost\", \"hostport\" : \"\", \"status\" : \n\"created\", \"version\" : \"\", \"image\" : \"\" }\n{ \"_id\" : \"57c3d208c29a\", \"appname\" : \"test\", \"type\" : \"php\", \"ip\" : \"\", \n\"port\" : \"8888\", \"hostaddr\" : \"localhost\", \"hostport\" : \"\", \"status\" : \n\"created\", \"version\" : \"\", \"image\" : \"\" }\n{ \"_id\" : \"ff6b94c7de5a\", \"appname\" : \"test\", \"type\" : \"php\", \"ip\" : \"\", \n\"port\" : \"8888\", \"hostaddr\" : \"localhost\", \"hostport\" : \"\", \"status\" : \n\"created\", \"version\" : \"\", \"image\" : \"\" }\n. Another issue (they seems random)\n\n\n$ tsuru app-create test7 php\nError: Tsuru failed to create the app \"test7\": Could not add route: EOF\nOct 17 22:45:23 tsuru-server tsr[27101]: 2013/10/17 22:45:23 Got error \nwhile creating app: Tsuru failed to create the app \"test7\": Could not \nadd route: EOF\nOct 17 22:45:24 tsuru-server tsr[27101]: 2013/10/17 22:45:24 Tsuru \nfailed to create the app \"test7\": Could not add route: EOF\nIl 17/10/2013 22:37, Francisco Souza ha scritto:\n\n@guestisp https://github.com/guestisp could you share your configuration?\nAlso, when it hangs, can you run |docker ps -a| to see if any of the\ncontainers have failed?\nAlso, could you list containers in Tsuru database and post output here?\nYou will need to run:\n|% mongo tsuru\n\ndb.docker.find()\noutput here\n|\n|\n\nThanks and sorry for the noise :(\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/globocom/tsuru/issues/560#issuecomment-26550335.\n\n\nCorbelli Alessandro\nGUEST.it s.r.l. - CTO\nViale Giulio Cesare 25/A\n47838 Riccione (RN)\n. I did this yesterday but so far seems stable.\nI've created a startup script that brings everything\ndown and start up again with proper permission.\nI think that default tsuru-docker installer doesn't do\neverything ok.\nOn 18/10/2013 15:45, Francisco Souza wrote:\n\nI'm trying to reproduce the deployment issue in a brand new setup right\nnow, please hold on for some minutes.\nRegarding the EOF error, it usually means that Tsuru server has\npanicked. All panic messages are directed to the standard error stream.\nDid you capture stdout and stderr? If not, could you stop and start the\nAPI server using the command below?\n|% tsr api > tsr-api.out 2>tsr-api.err &\n|\nSo if you get another EOF, you'd be able to post the stderr content here.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/globocom/tsuru/issues/560#issuecomment-26596462.\n\n\nCorbelli Alessandro\nCTO\nGUEST.it s.r.l.\nViale Giulio Cesare 25/A\n47838 - Riccione (RN)\ntel: +39.0541649292\nfax: +39.0541664611\nalessandro.corbelli@guest.it\nhttp://www.guest.it\n. On 18/10/2013 16:04, Francisco Souza wrote:\n\nThe configuration file needed three changes:\n1. rw-host (/ec2-54-221-140-134.compute-1.amazonaws.com/)\n2. ro-host was wrong, the correct value is /172.17.42.1/\n3. domain (/cloud-test.souza.cc/)\n\nThis is to use your public cloud? Why should I point to\namazon ?\n\nI have some questions:\n- Could you please share your configuration file?\n\nlisten: \":8080\"\nhost: http://192.168.0.141:8080\ndatabase:\n   url: 127.0.0.1:27017\n   name: tsuru\ngit:\n   unit-repo: /home/application/current\n   api-server: http://127.0.0.1:8000\n   rw-host: 192.168.0.141\n   ro-host: 192.168.0.141\nauth:\n   token-expire-days: 14\n   user-registration: true\n   hash-cost: 4\nbucket-support: false\nprovisioner: docker\nqueue-server: \"127.0.0.1:11300\"\nadmin-team: admin\nhipache:\n   domain: test.localhost\ndocker:\n   servers:\n     - http://localhost:4243\n   collection: docker\n   repository-namespace: tsuru\n   router: hipache\n   deploy-cmd: /var/lib/tsuru/deploy\n   ssh-agent-port: 4545\n   run-cmd:\n     bin: /var/lib/tsuru/start\n     port: \"8888\"\n   ssh:\n     add-key-cmd: /var/lib/tsuru/add-key\n     public-key: /home/ubuntu/.ssh/id_rsa.pub\n     user: ubuntu\n\n\nWhich command did you use to import the |tsuru/php| image?\n\n\ndocker build -t tsuru/php \nhttps://raw.github.com/flaviamissi/basebuilder/master/php/Dockerfile\n\n\nIs the container |585b458df5e8| still running? Can you inspect it\n  (|docker -H 127.0.0.1:4243 inspect 585b458df5e8|)?\n\n\nYes I'm able to inspect:\n$ docker inspect 585b458df5e8 | grep ID\n     \"ID\": \n\"585b458df5e8c81718ea89c33f8a0635f4f7529663c9393ef12b0f509ad3a69c\",\n\nWhat happens if\n    you run |curl localhost:49154|?\n\n$ curl http://localhost:49154\ncurl: (7) couldn't connect to host\n. On 18/10/2013 16:48, Francisco Souza wrote:\n\nThere was a bug in our image builder, that was fixed yesterday at 16:02\nGMT. Did you generate the |tsuru/php| before that? Can you regenerate\nit? In order to do that, you will need to delete all apps, then remove\nthe |tsuru/php| image (|docker rmi tsuru/php|) and then run |docker\nbuild| again.\n\nRebuilt right now\nhttp://pastebin.com/raw.php?i=2MTpDAx9\n$ docker images\nREPOSITORY          TAG                 ID                  CREATED \n         SIZE\nbase                ubuntu-quantal      b750fe79269d        6 months ago \n        24.65 kB (virtual 180.1 MB)\ntsuru/php           latest              d1015e32d5a8        5 minutes \nago       388.9 kB (virtual 648.6 MB)\n$ tsuru app-list\n$ tsuru app-create test1 php\nError: Tsuru failed to create the app \"test1\": Could not add route: EOF\nnothing logged to stderr/stdout\nRestarting all services:\n$ tsuru app-create test1 php\nApp \"test1\" is being created!\nUse app-info to check the status of the app and its units.\nYour repository for \"test1\" project is \"git@192.168.0.141:test1.git\"\n$ git push git@192.168.0.141:test1.git master\nCounting objects: 113, done.\nDelta compression using up to 4 threads.\nCompressing objects: 100% (74/74), done.\nWriting objects: 100% (113/113), 9.89 KiB, done.\nTotal 113 (delta 0), reused 0 (delta 0)\nremote: Cloning into '/home/application/current'...\nremote: /\nremote: requirements.apt not found.\nremote: Skipping...\nremote:\nremote:  ---> App will be restarted, please check its log for more \ndetails...\nremote:\nTo git@192.168.0.141:test1.git\n- [new branch]      master -> master\n$ tsuru app-info --app test1\nApplication: test1\nRepository: git@192.168.0.141:test1.git\nPlatform: php\nTeams: myteam\nAddress: test1.prova.localhost\nUnits:\n+--------------+---------+\n| Unit         | State   |\n+--------------+---------+\n| 26c18bcc16bc | started |\n+--------------+---------+\n$ tsuru app-list\n+-------------+-------------------------+-----------------------+--------+\n| Application | Units State Summary     | Address               | Ready? |\n+-------------+-------------------------+-----------------------+--------+\n| test1       | 1 of 1 units in-service | test1.prova.localhost | Yes    |\n+-------------+-------------------------+-----------------------+--------+\nSometimes works, sometimes not.\nhipache router and tsr daemons seems to be very,very unstable.\n\nCorbelli Alessandro\nCTO\nGUEST.it s.r.l.\nViale Giulio Cesare 25/A\n47838 - Riccione (RN)\ntel: +39.0541649292\nfax: +39.0541664611\nalessandro.corbelli@guest.it\nhttp://www.guest.it\n. On 18/10/2013 17:50, Flavia Missi wrote:\n\nI had the same issue on creating an application, just repeated the\noperation without restarting anything and it worked. I am going to start\ninvestigating it.\n\nYes, same issue here.\n\nEverything seems to be working for you now, is that right?\n\nSeems to work but:\n1. it very very slow on starting containers. More or less 30 seconds\nafter pushing. During this time, app is unavailable and I'm testing\nwith a very simple php app (just a phpinfo file)\n1. It's very slow when pushing, like here:\n$ git push git@192.168.0.141:test1.git master\nCounting objects: 5, done.\nDelta compression using up to 4 threads.\nCompressing objects: 100% (2/2), done.\nWriting objects: 100% (3/3), 303 bytes, done.\nTotal 3 (delta 0), reused 0 (delta 0)\nremote: /\nremote: /\nremote: requirements.apt not found.\nremote: Skipping...\nremote: From git://192.168.0.141/test1\nremote:    0a57d01..9ad096e  master     -> origin/master\n\n\n------------ 10-15 seconds with no output ------------ <<\n\n\nremote:\nremote:  ---> App will be restarted, please check its log for more \ndetails...\nremote:\nTo git@192.168.0.141:test1.git\n    0a57d01..9ad096e  master -> master\n. $ time tsuru app-create test1 php\nApp \"test1\" is being created!\nUse app-info to check the status of the app and its units.\nYour repository for \"test1\" project is \"git@192.168.0.141:test1.git\"\nreal    0m5.168s\nuser    0m0.024s\nsys 0m0.000s\n$ time git push git@192.168.0.141:test1.git master\nCounting objects: 116, done.\nDelta compression using up to 4 threads.\nCompressing objects: 100% (76/76), done.\nWriting objects: 100% (116/116), 10.15 KiB, done.\nTotal 116 (delta 0), reused 0 (delta 0)\nremote: Cloning into '/home/application/current'...\nremote: /\nremote: requirements.apt not found.\nremote: Skipping...\nremote:\nremote:  ---> App will be restarted, please check its log for more \ndetails...\nremote:\nTo git@192.168.0.141:test1.git\n- [new branch]      master -> master\nreal    0m4.412s\nuser    0m0.028s\nsys 0m0.016s\n$ date > foo\n$ git commit -am 'test'\n[master 4e1dcea] test\n  1 file changed, 1 insertion(+), 1 deletion(-)\n$ time git push git@192.168.0.141:test1.git master\nCounting objects: 5, done.\nDelta compression using up to 4 threads.\nCompressing objects: 100% (2/2), done.\nWriting objects: 100% (3/3), 304 bytes, done.\nTotal 3 (delta 0), reused 0 (delta 0)\nremote: /\nremote: /\nremote: requirements.apt not found.\nremote: Skipping...\nremote: From git://192.168.0.141/test1\nremote:    9ad096e..4e1dcea  master     -> origin/master\nremote:\nremote:  ---> App will be restarted, please check its log for more \ndetails...\nremote:\nTo git@192.168.0.141:test1.git\n    9ad096e..4e1dcea  master -> master\nreal    0m14.123s\nuser    0m0.020s\nsys 0m0.004s\n$ time git push git@192.168.0.141:test1.git master\nCounting objects: 5, done.\nDelta compression using up to 4 threads.\nCompressing objects: 100% (2/2), done.\nWriting objects: 100% (3/3), 305 bytes, done.\nTotal 3 (delta 0), reused 0 (delta 0)\nremote: /\nremote: From git://192.168.0.141/test1\nremote:    4e1dcea..10a7eca  master     -> origin/master\nremote:\nremote:  ---> App will be restarted, please check its log for more \ndetails...\nremote:\nTo git@192.168.0.141:test1.git\n    4e1dcea..10a7eca  master -> master\nreal    0m15.410s\nuser    0m0.012s\nsys 0m0.016s\nFirst push, 4 seconds, second push 15 seconds.\nBut what is really slow is container creation.\nGit will ends and container will be usable\nafter 30 second at minimum but this could be\ndue to my environment.\nIl 18/10/2013 19:09, Flavia Missi ha scritto:\n\ncan you post the output of a deploy using |time|? I deployed a wordpress\non a tsuru fresh install on ubuntu 12.04 using our script, here is my\noutput with time:\n|$ time git push git@192.168.56.102:blog.git master\nCounting objects: 3, done.\nDelta compression using up to 4 threads.\nCompressing objects: 100% (2/2), done.\nWriting objects: 100% (2/2), 224 bytes | 0 bytes/s, done.\nTotal 2 (delta 1), reused 0 (delta 0)\nremote: /\nremote: /\nremote: Reading package lists...\nremote: Building dependency tree...\nremote: Reading state information...\nremote: php5-mysql is already the newest version.\nremote: 0 upgraded, 0 newly installed, 0 to remove and 0 not upgraded.\nremote: From git://192.168.56.102/blog\nremote:    023f919..08b1f67  master     -> origin/master\nremote: sudo: unable to resolve host 5761b4a93279\nremote:\nremote:  ---> App will be restarted, please check its log for more details...\nremote:\nTo git@192.168.56.102:blog.git\n    6c97658..08b1f67  master -> master\nreal    0m11.062s\nuser    0m0.022s\nsys     0m0.014s\n|\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/globocom/tsuru/issues/560#issuecomment-26612682.\n\n\nCorbelli Alessandro\nGUEST.it s.r.l. - CTO\nViale Giulio Cesare 25/A\n47838 Riccione (RN)\n. In my environment, hipache is the most\nunstable components, 90% of my issue\nseems to be related to a not working\nhipache. Restarting it manually, fix\nmany errors.\nAfter this, docker is also unstable, many\ntimes doesn't create/run container properly\nand to fix I have to add/remove units from tsuru.\nIl 18/10/2013 19:12, Flavia Missi ha scritto:\n\nAnd my first deploy, which installs |php-mysql|:\n|remote: Get:3 http://archive.ubuntu.com/ubuntu/ quantal/main php5-mysql amd64 5.4.6-1ubuntu1 [79.0 kB]\nremote: Fetched 1042 kB in 6s (157 kB/s)\nremote: Selecting previously unselected package mysql-common.\nremote: (Reading database ... 23874 files and directories currently installed.)\nremote: Unpacking mysql-common (from .../mysql-common_5.5.27-0ubuntu2_all.deb) ...\nremote: Selecting previously unselected package libmysqlclient18:amd64.\nremote: Unpacking libmysqlclient18:amd64 (from .../libmysqlclient18_5.5.27-0ubuntu2_amd64.deb) ...\nremote: Selecting previously unselected package php5-mysql.\nremote: Unpacking php5-mysql (from .../php5-mysql_5.4.6-1ubuntu1_amd64.deb) ...\nremote: Processing triggers for libapache2-mod-php5 ...\nremote:  * Reloading web server config\nremote:    ...done.\nremote: Setting up mysql-common (5.5.27-0ubuntu2) ...\nremote: Setting up libmysqlclient18:amd64 (5.5.27-0ubuntu2) ...\nremote: Setting up php5-mysql (5.4.6-1ubuntu1) ...\nremote: Processing triggers for libc-bin ...\nremote: ldconfig deferred processing now taking place\nremote: Processing triggers for libapache2-mod-php5 ...\nremote:  * Reloading web server config\nremote:    ...done.\nremote: sudo: unable to resolve host e95852bacd23\nremote:\nremote: Creating config file /etc/php5/mods-available/mysql.ini with new version\nremote:\nremote: Creating config file /etc/php5/mods-available/mysqli.ini with new version\nremote:\nremote: Creating config file /etc/php5/mods-available/pdo_mysql.ini with new version\nremote:\nremote:  ---> App will be restarted, please check its log for more details...\nremote:\nTo git@192.168.56.102:blog2.git\n- [new branch]      master -> master\nreal    0m19.076s\nuser    0m1.194s\nsys     0m0.224s\n|\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/globocom/tsuru/issues/560#issuecomment-26612915.\n\n\nCorbelli Alessandro\nGUEST.it s.r.l. - CTO\nViale Giulio Cesare 25/A\n47838 Riccione (RN)\n. I've never restarted redis server so my EOF\nerror is not related to redis. Even in my\nforce startup script (killall + start)\nredis is not called because I've never had\nissue with it.\nAs wrote some seconds ago, my primary issues\nare with hipache and docker.\nIl 18/10/2013 22:18, Flavia Missi ha scritto:\n\nYes, this is probably due to your environment.\nI was able to reproduce the |Could not add route: EOF| error, here are\nthe steps:\n1. restart redis: |$ sudo service redis-server restart|\n2. immediately try to create a new application with tsuru client\n3. you should get exactly the same error.\nThis is probably due to a connection error with redis while it is still\nstarting. If you get this error on a different situation please report\nto us. We should try to improve this error message (EOF), although it\nlooks like a panic it is not, it is the original error message sent from\nthe driver. Maybe we wrap this message, dont know yet.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/globocom/tsuru/issues/560#issuecomment-26626539.\n\n\nCorbelli Alessandro\nGUEST.it s.r.l. - CTO\nViale Giulio Cesare 25/A\n47838 Riccione (RN)\n. $ tsuru app-list\n+-------------+-------------------------+---------------------------+--------+\n| Application | Units State Summary     | Address                   | \nReady? |\n+-------------+-------------------------+---------------------------+--------+\n| test        | 3 of 3 units in-service | test.192.168.0.141.xip.io | \nYes    |\n+-------------+-------------------------+---------------------------+--------+\n2 units active, but backend are not reachable:\n(worker #7834) test.192.168.0.141.xip.io: backend #0 is dead \n({\"code\":\"ECONNREFUSED\",\"errno\":\"ECONNREFUSED\",\"syscall\":\"connect\"}) \nwhile handling request for /\nand still getting EOF, but redis is up and running from\n22:41:\n$ ps aux | grep redis\nredis     1138  0.1  0.1  10680  1644 ?        Ss   22:41   0:04 \n/usr/bin/redis-server /etc/redis/redis.conf\n$ tsuru unit-add --app test 5\nError: Could not add route: Could not add route: EOF\nale@ale-deskop:~/tsuru/prova$ tsuru unit-add --app test 5\nUnits successfully added!\nhow can I check for running units?\nIl 18/10/2013 22:18, Flavia Missi ha scritto:\n\nYes, this is probably due to your environment.\nI was able to reproduce the |Could not add route: EOF| error, here are\nthe steps:\n1. restart redis: |$ sudo service redis-server restart|\n2. immediately try to create a new application with tsuru client\n3. you should get exactly the same error.\nThis is probably due to a connection error with redis while it is still\nstarting. If you get this error on a different situation please report\nto us. We should try to improve this error message (EOF), although it\nlooks like a panic it is not, it is the original error message sent from\nthe driver. Maybe we wrap this message, dont know yet.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/globocom/tsuru/issues/560#issuecomment-26626539.\n\n\nCorbelli Alessandro\nGUEST.it s.r.l. - CTO\nViale Giulio Cesare 25/A\n47838 Riccione (RN)\n. Il 21/10/2013 19:11, Flavia Missi ha scritto:\n\nThe error may not be related to redis startup, but I am pretty sure it\nis related to redis connection.\nEverytime you create an application tsuru calls the Provision\nhttps://github.com/globocom/tsuru/blob/master/provision/docker/provisioner.go#L57\nmethod of the configured provisioner (docker in this case), and all this\nmethod does in talk to mongodb and redis.\nReminding the error message: |Could not add route: EOF|, it does not\nseems to me that the error can be in another place.\n\nOk\n\nAbout your connection refused error on hipache logs, are you able to\nconnect using telnet to the host:port hipache is redirecting?\n\nI have both issue but most of the time issue are related to a non\nworking docker container. It seems that docker looses the mount point.\nLast time i've tried I had to reboot and then delete all container and\nstart it again.\n. I'll start over with Ubuntu 13.04 due to this:\nhttps://github.com/globocom/tsuru/commit/26e7106b00d07a04c242033090ef523801a24764\npreviously i was using 12.04 LTS as wrote on docs.\n. When pushing to an existing app, I get 14 second (it's single file app):\n$ time git push git@192.168.0.142:test1.git master\nCounting objects: 5, done.\nDelta compression using up to 4 threads.\nCompressing objects: 100% (3/3), done.\nWriting objects: 100% (3/3), 324 bytes, done.\nTotal 3 (delta 0), reused 0 (delta 0)\nremote: /\nremote: /\nremote: requirements.apt not found.\nremote: Skipping...\nremote: From git://192.168.0.142/test1\nremote:    b8ac9e3..1f449c9  master     -> origin/master\nremote: \nremote:  ---> App will be restarted, please check its log for more details...\nremote: \nTo git@192.168.0.142:test1.git\n   b8ac9e3..1f449c9  master -> master\nreal    0m14.322s\nuser    0m0.008s\nsys 0m0.012s\ntsuru slow down just after this line:\nremote:    b8ac9e3..1f449c9  master     -> origin/master\nI think it's related to this docker error:\n2013/10/22 13:21:58 Container e62b2ad387309357a111fa2b2cdf94e1e79d650a5d8a62322b6077edf75c55e8 failed to exit within 10 seconds of SIGTERM - using the force\nit seems that docker is unable to terminate the container. In fact, tsuru waits for 10 seconds (more or less) with no output.\nAdding more verbose output for git push should be good, but you need to check why containers stop to respond.\n(it happens every time)\n. I can confirm. most issue are caused by docker timeout:\nContainer 665d632fd9b8feffde8c26bf7781b3318237a67ee893ceb4bb5738536fc1074d failed to exit within 10 seconds of SIGTERM - using the force\nthis is when removing units from an app. It tooks exactly 10 seconds to remove a unit.\nsolving this, should solve 99% of my issues.\n. $ docker stop c49a68b2b574\n2013/10/22 13:48:57 POST /v1.4/containers/c49a68b2b574/stop?t=10\n2013/10/22 13:49:07 Container c49a68b2b5742d7b36906c3cb0a541facc76ab3e532396fb666b5a9df56eaed1 failed to exit within 10 seconds of SIGTERM - using the force\nc49a68b2b574\nkill is working:\n$ docker kill 72a61e17f215\n2013/10/22 13:49:39 POST /v1.4/containers/72a61e17f215/kill\n72a61e17f215\nwhy not directly using kill? Instances are volatile, a kill should not affect anything else.\n. Yes, stop should be working but as long instances are volatile,\nkill should be better (and faster) than stop.\nYou don't need to have a graceful stop because on volatile instances.\nOn 23/10/2013 14:49, Flavia Missi wrote:\n\nIt seems reasonable for me to use kill instead of stop, although stop\nshould be working.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/globocom/tsuru/issues/560#issuecomment-26901616.\n. On 23/10/2013 15:09, Andrews Medina wrote:\nI'm -1 to kill instead stop. When the container process uses fork\n|docker kill| kills only the container process.\n\nAre you sure about this?\nBecause \"kill\" is directly called by docker in case of timeout.\n\nCorbelli Alessandro\nCTO\nGUEST.it s.r.l.\nViale Giulio Cesare 25/A\n47838 - Riccione (RN)\ntel: +39.0541649292\nfax: +39.0541664611\nalessandro.corbelli@guest.it\nhttp://www.guest.it\n. You are right but I think this is a docker issue.\nFor example, a standard \"stop\" does the following:\nhttps://github.com/dotcloud/docker/blob/master/container.go#L1129\nit send a SIGTERM to the process 1 of container, then waits for a timeout.\nThe only difference between kill and stop is the signal number (and the timeout).\nI think that docker should call lxc-stop that will kill every daemon inside a container:\nhttp://lxc.sourceforge.net/man/lxc-stop.html\nsending a SIGTERM to process 1 or sending a KILLKILL doesn't change too much.\nI'm not a docker expert but calling lxc-stop instead lxc-kill on process1 should resolve.\n. I'm on Ubuntu 13.04 64bit and I'm using your standard php image.\n. You can close, but give me just a confirm:\nwith s3 capabilities, tsuru will automatically\ncreates bucket on S3 for each deployed app ?\nIl 18/10/2013 21:13, Flavia Missi ha scritto:\n\nCan we close this? Any other thing we may help you with?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/globocom/tsuru/issues/567#issuecomment-26622058.\n\n\nCorbelli Alessandro\nGUEST.it s.r.l. - CTO\nViale Giulio Cesare 25/A\n47838 Riccione (RN)\n. I know that a PID is available but it doesn't make\nan easier troubleshooting.\nOn 18/10/2013 15:24, Francisco Souza wrote:\n\nThanks for your suggestion, it makes sense. We should support flags that\noverride options defined in the configuration file, so we don't need to\nduplicate the file to change just one setting (like the log file).\nJust FYI, syslog includes the PID in every log line.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/globocom/tsuru/issues/572#issuecomment-26594983.\n\n\nCorbelli Alessandro\nCTO\nGUEST.it s.r.l.\nViale Giulio Cesare 25/A\n47838 - Riccione (RN)\ntel: +39.0541649292\nfax: +39.0541664611\nalessandro.corbelli@guest.it\nhttp://www.guest.it\n. Why not using a buildpack for this?\nHeroku's buildpack will allow a greater flexibility, and you can also provide a Wordpress buildpack with apache+php+wordpress preinstalled.\n. Are you saying that a bundle/template will also call a buildpack ? In this case, it's ok.\n. More or less yes.\nramonPires notifications@github.com ha scritto:\n\n@andrewsmedina i think the @guestisp  is trying to say is something\nlike OpenShift Cartridge\nhttps://www.openshift.com/developers/download-cartridges .\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/globocom/tsuru/issues/573#issuecomment-27112650\n. I'm not trying to \"solve\" anything..\nMy biggest issue with tsuru is docker's timeout when stopping containers and is the same issue that you have experienced today.\nSolved this will allow me to start with some deeper test in my infrastructure but actually I can't wait minutes when stopping or removing units.\n. Thank you. The stop timeout is the only big issue that I have with tsuru.\n (But the missing of auto restart feature by health manager will be an issue very soon)\n. Sorry, my mistake. It was a typo in tsuru.conf\n. Directly using kill I think is the better way.\nActually, this is my very first code in Go and I'm just having issue on reading config file.\nI'm testing a kill-forced version with success, now I'm able to push and remove units in a couple of seconds.\n\nIf a kill is good for your, please add it in the next build so I can test more.\n. This is the right pull request: https://github.com/globocom/tsuru/pull/577\n. That's why I've asked for kill instead stop.\nBy the way, stopping a container should require just a couple of seconds, if you are seeing blocks, probably you are reaching docker's timeout (set to 10 seconds by tsuru)\n17 units, 10 seconds/each = 170 second = more or less 3 minutes as you are experiencing\nPlease check your logs, I think that you are having same issue as mine.\n. Updates or ETA on this?\nunit-remove should also block, this isn't an issue as long docker containers can be stopped without reaching the timeout. Real issue is docker unable to stop containers.\n. Updates on this?\nYou have bypassed the blocking issue, but contaiers are still not sopped properly without forcing the kill.\n. Why not automatically change the number of unit ?\nFor example, after swapping, tsuru could automatically remove 1 unit from app1 and add 1 unit to app2, then remove another unit from app1 and bring it to app2 and so on.\nMagno Torres notifications@github.com ha scritto:\n\nSuppose that we have 10 units into app1 and just 2 units into app2 . If\nwe are not attempted about it and use the command \"tsuru swap app1\napp2\", we will end up with a application with too few units to handle\nwith the original demand. If we really know what we are doing, may\ntsuru could have a flag \"-y, or --force\". Or we can just deny until\nhave at least the same amount of units into the destination app to\navoid contention\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/globocom/tsuru/issues/582\n. Any plans to support AMPQ?\nBy the way, as a (ugly) workaround you could use the same MongoDB database that you are using in tsuru to also host queue. You could \"encapsulate\" the whole beanstalk message in a mongo record. Something like this:\n\n+---+-------------------+\n| 1 | beanstalk message |\n| 2 | beanstalk message |\n+---+-------------------+\n. Actually, docker is unable to detect a failed container.\nBy manually killing the \"lxc-start\" process, docker still see it as running with \"docker ps\"\n. Updates or ETA on this?\n. What do you mean with this?\nNew docker nodes will be automatically discovered and added to tsuru cluster? If yes, this is GREAT!\n. Perfect!\n. Is this needed anymore?\nSupporting buildpacks bypass the platform\n. How do you pull from repository, actually?\nLet's assume a multiple docker nodes environment.\nIf I understood properly when you need to publish an app you will create a docker container with the pulled git code and then one or multiple images based on this container.\nThis is good only for one server because on multiple servers you need to create multiple containers for the same app. (One container for each docker node)\nA standard app with 2 units spanned across 2 servers will result in 4 pieces (2 containers and 2 images)\nMore servers means more wasted space just for the containers.\nI thing that you should create something stored centrally (s3, depth, and, ...) to pull from without needs to create a brand new container for each server. One \"base image\" for 200 servers and not 200 containers..\nSlugs seems good.\n. > Tsuru does it. But we use docker registry to store the images.\nAre you referring to tsuru/static or tsuru/php container or to the customer's container?\nAs I understood, for each new deploy you start from a tsuru/static or tsuru/php (it depends on the choosen platform) container, than you will create a new container with the git code inside of it and then you fork one or more images from it.\nI don't think that pushing customer's container to public docker registry should be good, many customers should have legal restriction on this. For example I don't like that my private code will be pushed out of my network.\nTsuru should be 'self-contained' and should work with no need for external server this is why I'm asking for a shared storage support (S3, Ceph, NFS, local san...)\nI'll +1 to slug. This will allow greater flexibility and automatically add buldpack supports. Will be a milestone for tsuru.\n(slug or anything else that does the same)\n. Quick update:\ndocker registry is good (and it also have S3 support) as long as you use a local server:\nhttps://github.com/dotcloud/docker-registry/blob/master/README.md\nso, if you are not using this, please add a tsuru configuration for the regitry url.\nIn this case I'll be able to use a local registry with a local S3-compatible storage.\nShould be pretty easy to implement, it's just a configuration paramenter and 2 commands to be executed when creating an image:\ndocker tag <image_id> <repository_host>:5000/<image_name>\n docker push <repository_host>:5000/<image_name>\n. +1\n. +1. In this case stopped apps could all be sold at a lower price.\n. Do you like a dedicated log file for this ?\n. I will not limit to Jenkins or any specific CI server.\nIf you create a Jenkins plugin only jenkins will be usable in tsuru and a php developer would be interested in xinc , for example\n. BTW something to stop build process if CI server returns KO is needed.\nActually I don't know how to stop a build and revert to the previous commit after pushing.\n. Yes\n. Cool, sorry for the wrong report.\nYes, I think that you should give some improvements on docs and on website, this will bring you more users and market share.\nSPOT MODE ON:    we are website developers :-)     SPOT MODE OFF\n. There aren't idleTimeout nor maxIdleConnections in hipache, i've looked at sources.\n. First issue: http://docs.tsuru.io/en/latest/docker.html commands on section \"Creating directory for bare template\" command should be changed as follow:\n$ sudo mkdir -p /home/git/bare-template/hooks\n$ for cmd in post-receive pre-receive pre-receive.py; do curl https://raw.github.com/globocom/tsuru/master/misc/git-hooks/${cmd} | sudo tee /home/git/bare-template/hooks/${cmd}; done\n$ sudo chmod +x /home/git/bare-template/hooks/*\n$ sudo chown -R git:git /home/git/bare-template\n. Yes i've seen this.\nWhat happens in case of multiple \"tsr token\" exectuions? The latest token will invalidate the previous one ?\n. I don't know, I have to check\nCould you update your ubuntu repo with latest version of tsuru and gandalf so that I'll be able to install ?\nI'm testing a big infrastructure for tsuru and I'm not able to install the whole build stack on each node.\n. This seems caused by docker not forwarding the internal port to the host\n. Right now, yes but I'm having issue with git, I don't know if this issue is solved in master.\nBut i've also tried with deb packages and the issue was present.\nYou should always update version number on any commit, actually I have the same version on deb package and on master. This is causing big confusion.\n. @andrewsmedina for git issue, see #635 \n\"x.x.x-dev\" doesn't help to detect to which commit the binary is pointing to\nCan't you use something:\n\"x.x.x-first_7_digits_from_commit_sha1\" ?\nBy the way, are you able to use the latest docker version ? I think that tsuru doesn't detect mapped ports due to this: https://github.com/globocom/tsuru/commit/daac0cef1e0fee51b02bdd3448e470d0ee447092\nCan you update tsuru/gandalf deb repository so that I can reinstall everything from package manager?\n. Any updates ? I would like to deeply test tsuru with an installation made by multiple servers\nAny changes to use an older docker version? Which is the latest working version with tsuru ?\n. I think to have solved this by downgrading both tsuru and gandalf.\nLatest gandalf's versione and latest tsuru's version are not compatible.\n. Working versions are from you ubuntu packages.\nNot working version was built from git, through \"go get\"\n. Ok let me know.\nIf everything is running fine, could you update your ppa (not replacing but by adding a dev version, so that I can fallback)\nI'm tryting to use tsuru in a multiple server architecture. Actually I have every services splitted on one or more nodes:\n1 gandalf\n1 redis\n1 tsuru\n5 dockers\n5 routers\nExpect for some issue (already opened here on github) seems to work fine. Please look at replacing beanstalk with RedisMQ ( https://github.com/globocom/tsuru/issues/642 ), it should be pretty easy for you.\n. Seems to be fixed in tsr 0.3.0 with gandalf from ubuntu repository\n. By looking at source code, i've found this settings:\n     hipache:redis-server\nshoud I use this inside \"hipache\" node on tsuru.conf ?\n. I'm using docker 0.6.7 in this test and tsuru from deb packages , not from master\nInviato da iPhone\n\nIl giorno 06/dic/2013, alle ore 20:32, Andrews Medina notifications@github.com ha scritto:\nThis is related to #636. The support for docker 0.7.0 is not done yet. So, the tsuru master is broken :( My fault. I'm working to fix it.\n\u2014\nReply to this email directly or view it on GitHub.\n. Same issue with docker 0.6.5\n. Broken with each docker version 0.5.3 -> 0.7.0\n. Great! Tsuru log is what i was looking for.\nThis is the error:\n    2013/12/06 23:34:29 DEBUG: [pipeline] error running the Forward for the set-network-info action - Container port 8888 is not mapped to any host port\n\nIt's the same error that I have on docker 0.7 (actually i'm on 0.6.7, i'll try to downgrade again)\n. Same issue with 0.6.5\nTsuru is unable to map port 8888\n. Works on 0.6.0\ntsuru-ssh-agent must be placed on the same server as docker, I think that this should be wrote on docs.\n. Great!\n. I would like to test this and remove beanstalkd.\nI've set this in my tsuru.conf:\nqueue: redis\nredis-queue: \n   host: 127.0.0.1\n   port: 6379\nhow can I check if this is ok and redis is used as a queue ?\n. I've deployed a PHP application and it workerd properly.\nBUT: on first push it was blocked on:\n$ git push git@git.mycloud.net:test1.git master\nCounting objects: 157, done.\nDelta compression using up to 4 threads.\nCompressing objects: 100% (104/104), done.\nWriting objects: 100% (157/157), 13.69 KiB, done.\nTotal 157 (delta 6), reused 0 (delta 0)\nremote: Cloning into '/home/application/current'...\nremote: /\nremote: requirements.apt not found.\nremote: Skipping...\nI had to ctrl+c and start it again, but due to #458 every time I have to create a new commit and push it again. (Bug #458 should be addresses ASAP, it will be a huge improvement)\n. This seems to be triggered when using multiple docker nodes.\nI'm not sure but I thing that on first call a server is choosen from the pool to spawn a container based on the selected platform:\n2013/12/08 13:08:31 DEBUG: create container for app test, based on image tsuru/php, with cmds [/var/lib/tsuru/deploy git://git.mycloud.com/test.git origin/master TSURU_APPNAME='test' TSURU_HOST='http://10.0.0.1:8080' TSURU_APP_TOKEN='92e461abb50d9c7cb4b06023b3f14f27b8a7a487' ]\nthen on the second call, used to spawn a unit from the previous container, another server is selected:\n2013/12/08 13:08:32 DEBUG: create container for app test, based on image tsuru/test, with cmds [/bin/bash -c /var/lib/tsuru/start && /var/lib/tsuru/add-key ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDDEJvG4U1Qw7FboPmsYmdxfSho/Yi8HouMXQOgmCT2ONkaV4SKTz30lbhcwDXWilqbBLqEYOd1AJqSgg3pvbdVv2UZjP9KsxGQsEOnJ+ORn+2nJzLGn5ZuFREa0kyuix8ccTTW3K/fJ3oRPZUa4MhW5yAuYVmkwCa0wd9UedxDr0o6V26aRvveB0AGFqrtE5aLGOz3h7pIfT1qA+zPhammgcfXSNMrkIyRanUv7y0dg+AVx2JRWJFz94U/KUHtAZBt1W93kOY9eDmNSvxj7DRKwVMw14wUIpo8nzAY1fvdJw+9+hDNix5xYBGUTvlIVshiCAA8bDAXBwSz/Zq2TCDL ubuntu@api && sudo /usr/sbin/sshd -D]\nI'm not sure on this (there isn't any reference to the selected node in log file) but:\n1. everything works when using just one node\n2. each of my (3) nodes are working properly when directly used in tsuru.\n. No.\n. Still broken in tsr 0.3.0 and docker 0.7.0 without private registry (standard tsuru conf)\n2013/12/17 22:53:25 DEBUG: create container for app test, based on image tsuru/php, with cmds [/var/lib/tsuru/deploy git://git.mycloud.com/test.git origin/master TSURU_APPNAME='test' TSURU_HOST='http://10.0.0.1:8080' TSURU_APP_TOKEN='dc8d2956399388198aa407d0fe25b4e02fbcb092' ]\n2013/12/17 22:53:25 DEBUG: [pipeline] running the Forward for the start-container action\n2013/12/17 22:53:25 DEBUG: starting container b23ac31a1bdf4d22f1a305045964ac8ec8e4ad0811308db912570ee085121a47\n2013/12/17 22:53:25 DEBUG: [pipeline] running the Forward for the insert-container action\n2013/12/17 22:53:25 ERROR: Process failed for container \"b23ac31a1bdf4d22f1a305045964ac8ec8e4ad0811308db912570ee085121a47\": API error (500): wait: wait: no such container: b23ac31a1bdf4d22f1a305045964ac8ec8e4ad0811308db912570ee085121a47\n2013/12/17 22:53:25 DEBUG: [pipeline] error running the Forward for the provisioner-deploy action - API error (500): wait: wait: no such container: b23ac31a1bdf4d22f1a305045964ac8ec8e4ad0811308db912570ee085121a47\n2013/12/17 22:53:25 ERROR: API error (500): wait: wait: no such container: b23ac31a1bdf4d22f1a305045964ac8ec8e4ad0811308db912570ee085121a47\nThis happens only when using multiple docker hosts\n. All configurations are good\nBy using just one node i dont have any issue\nOnly when using multiple nodes it doesn't work\nI think because on first call one node is choosen to spawn the image but on the second call another node is choosen to create the container from the previous image but the image was created on a different node\n. I've tryed both, with no registry and with a private registry (see #663)\nThe issue is still present.\nUsing a public registry is not a solution for me, but I can try. How can I use that registry without setting \"https\" as wrote here: https://github.com/globocom/tsuru/issues/663#issuecomment-30856510 ?\n. I always start from scratch\n. Is possible to add the docker host to log file ?\nFor example:\nThis is the first step, when tsuru spawn a new container from the base image:\n2013/12/18 17:39:40 DEBUG: create container for app test, based on image docker-registry.mycloud.com:8080/tsuru/php, with cmds [/var/lib/tsuru/deploy git://git.mycloud.com/test.git origin/master TSURU_APPNAME='test' TSURU_HOST='http://10.0.0.1:8080' TSURU_APP_TOKEN='2290338204e68feb24ee303bfd43d7331e87acb1' ]\nLet's assume this is done to host docker01\nAfter that, tsuru try to start a new container based on the previous one:\n2013/12/18 17:39:41 DEBUG: starting container 3fb8153cb81912b232dfb6f80e4d0af969e18d1af3ae233c04e14b1942a8dfd1\n2013/12/18 17:39:41 DEBUG: [pipeline] running the Forward for the insert-container action\n2013/12/18 17:39:41 ERROR: Process failed for container \"3fb8153cb81912b232dfb6f80e4d0af969e18d1af3ae233c04e14b1942a8dfd1\": API error (500): wait: wait: no such container: 3fb8153cb81912b232dfb6f80e4d0af969e18d1af3ae233c04e14b1942a8dfd1\n2013/12/18 17:39:41 DEBUG: [pipeline] error running the Forward for the provisioner-deploy action - API error (500): wait: wait: no such container: 3fb8153cb81912b232dfb6f80e4d0af969e18d1af3ae233c04e14b1942a8dfd1\n2013/12/18 17:39:41 ERROR: API error (500): wait: wait: no such container: 3fb8153cb81912b232dfb6f80e4d0af969e18d1af3ae233c04e14b1942a8dfd1\nI think that action startContainer 3fb8153cb81912b232dfb6f80e4d0af969e18d1af3ae233c04e14b1942a8dfd1 is not called on the same docker node as the createContainer  called previously\n. Mine is almost the same\n. This is mine:\ndocker:\n  registry: docker-registry.mycloud.com:8080\n  servers:\n    - http://docker01.mycloud.com:4243\n    - http://docker02.mycloud.com:4243\n    - http://docker03.mycloud.com:4243\n  collection: docker\n  repository-namespace: tsuru\n  router: hipache\n  deploy-cmd: /var/lib/tsuru/deploy\n  ssh-agent-port: 4545\n  run-cmd:\n    bin: /var/lib/tsuru/start\n    port: \"8888\"\n  ssh:\n    add-key-cmd: /var/lib/tsuru/add-key\n    public-key: /home/ubuntu/.ssh/id_rsa.pub\n    user: ubuntu\n. I've tried to use a wrong repository. With a wrong registry, first request (obviously) fails:\n2013/12/20 09:35:27 DEBUG: create container for app test, based on image wrong-registry.mycloud.com/tsuru/php, with cmds [/var/lib/tsuru/deploy git://git.mycloud.com/test.git origin/master TSURU_APPNAME='test' TSURU_HOST='http://10.0.0.1:8080' TSURU_APP_TOKEN='dac09590e9e5ff929ed6881451ed5197d1fae72f' ]\n2013/12/20 09:35:27 ERROR: error on creating container in docker test - No such image\n2013/12/20 09:35:27 ERROR: error on create container for app test - No such image\nWhen using a correct registry, the same request is OK:\n2013/12/20 09:36:32 DEBUG: create container for app test, based on image docker-registry.mycloud.com:8080/tsuru/php, with cmds [/var/lib/tsuru/deploy git://git.mycloud.com/test.git origin/master TSURU_APPNAME='test' TSURU_HOST='http://10.0.0.1:8080' TSURU_APP_TOKEN='d55f94afeed99cc2b0e107904fde1594b2d4cd0a' ]\n2013/12/20 09:36:32 DEBUG: [pipeline] running the Forward for the start-container action\n2013/12/20 09:36:32 DEBUG: starting container 87a9df06ed88b918bbe5d0e2c1ddadf77e1b205295347eeb9ecabe833eedf293\nWhat is always failing is the \"insert-container\" action:\n2013/12/20 09:36:33 DEBUG: [pipeline] running the Forward for the insert-container action\n2013/12/20 09:36:33 ERROR: Process failed for container \"87a9df06ed88b918bbe5d0e2c1ddadf77e1b205295347eeb9ecabe833eedf293\": API error (500): wait: wait: no such container: 87a9df06ed88b918bbe5d0e2c1ddadf77e1b205295347eeb9ecabe833eedf293\n2013/12/20 09:36:33 DEBUG: [pipeline] error running the Forward for the provisioner-deploy action - API error (500): wait: wait: no such container: 87a9df06ed88b918bbe5d0e2c1ddadf77e1b205295347eeb9ecabe833eedf293\n2013/12/20 09:36:33 ERROR: API error (500): wait: wait: no such container: 87a9df06ed88b918bbe5d0e2c1ddadf77e1b205295347eeb9ecabe833eedf293\n. I don't think so. In my case, the issue is always present and only when configuring more than 1 node in tsuru.conf\nWith just one node, all is working properly.\n. News about this? I'm really blocked.\n. $ docker version\nClient version: 0.7.2\nGo version (client): go1.2\nGit commit (client): 28b162e\nServer version: 0.7.2\nGit commit (server): 28b162e\nGo version (server): go1.2\nLast stable version: 0.7.2\n. Solved. This seems to be mandatory in case of multiple nodes. I think you should document this.\nscheduler:\n    redis-server: myredis.com:6379\n    redis-prefix: docker-cluster\n. +1 for this\n\nIl giorno 11/dic/2013, alle ore 21:27, Nick Ricketts notifications@github.com ha scritto:\nNeed a way to rebalance the container across servers when a new one is added.\nUse Case:\nI have 1 server and add 20 containers to it. The server is now to full to load any more containers so I add another server. I would like to rebalance the app across the old server and the new server, so that 10 is on each server.\nCurrently I have to \"tsuru app-remove\" then \"tsuru app-create\" \"tsuru unit-add 19\", to get it to balance across the servers.\n\u2014\nReply to this email directly or view it on GitHub.\n. Actually how do you differentiate a \"worker\" from a \"web\" in tsuru ?\nThere is no such distinction or am I missing something ?\n. Ok but in this case the same container will act as both worker and web, AFAIK.\nYou have to create 2 different container, with a different procfile for each of them.\n. An example ?\n\nIl 10/11/2014 17:22, Josh Blancett ha scritto:\n\n:+1: can this be brought back up?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/tsuru/tsuru/issues/647#issuecomment-62409351.\n. Sorry for this, i've just read the last mail notification.\n\nIl 10/11/2014 20:57, Josh Blancett ha scritto:\n\n@guestisp https://github.com/guestisp original post has the use case\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/tsuru/tsuru/issues/647#issuecomment-62444430.\n. Great! Waiting for updated .deb\n. Thanks but it doesnt work.\nSee #662\n. 0.3.0 is incompatible with\n\n$ gandalf-server -version\ngandalf-webserver version 0.2.0\nfrom your PPA\nIt doesnt't generate the repo url:\n$ tsuru app-create test php\nApp \"test\" is being created!\nUse app-info to check the status of the app and its units.\nYour repository for \"test\" project is \"\"\n. Here's a trace:\n2013/12/17 22:09:00 http: panic serving 10.0.0.1:35695: interface conversion: string is not error: missing method Error\ngoroutine 31 [running]:\nnet/http.func\u00b7007()\n    /usr/lib/go/src/pkg/net/http/server.go:1022 +0xac\nencoding/json.func\u00b7002()\n    /usr/lib/go/src/pkg/encoding/json/encode.go:236 +0x9b\ngithub.com/globocom/gandalf/repository.(*Repository).SshURL(0xc20012ce70, 0xc2000007d8, 0x0)\n    /home/myuser/go/src/github.com/globocom/gandalf/repository/repository.go:103 +0x125\ngithub.com/globocom/gandalf/repository.(*Repository).MarshalJSON(0xc20012ce70, 0xc20012ce70, 0x160, 0x0, 0xc20012ce70, ...)\n    /home/myuser/go/src/github.com/globocom/gandalf/repository/repository.go:32 +0x3c\nencoding/json.(*encodeState).reflectValueQuoted(0xc2000fa2c0, 0x6d6800, 0xc20012ce70, 0x160, 0x0, ...)\n    /usr/lib/go/src/pkg/encoding/json/encode.go:290 +0x1b9d\nencoding/json.(*encodeState).reflectValue(0xc2000fa2c0, 0x6d6800, 0xc20012ce70, 0x160)\n    /usr/lib/go/src/pkg/encoding/json/encode.go:268 +0x48\nencoding/json.(*encodeState).marshal(0xc2000fa2c0, 0x6d6800, 0xc20012ce70, 0x0, 0x0, ...)\n    /usr/lib/go/src/pkg/encoding/json/encode.go:239 +0xa7\nencoding/json.Marshal(0x6d6800, 0xc20012ce70, 0xc2000007a0, 0x4, 0xc200152e50, ...)\n    /usr/lib/go/src/pkg/encoding/json/encode.go:131 +0x60\ngithub.com/globocom/gandalf/api.GetRepository(0xc20010e7c0, 0xc2000cfe00, 0xc20015b270)\n    /home/myuser/go/src/github.com/globocom/gandalf/api/handler.go:162 +0xfe\nnet/http.HandlerFunc.ServeHTTP(0x787b40, 0xc20010e7c0, 0xc2000cfe00, 0xc20015b270)\n    /usr/lib/go/src/pkg/net/http/server.go:1149 +0x3e\ngithub.com/bmizerany/pat.(*PatternServeMux).ServeHTTP(0xc200000798, 0xc20010e7c0, 0xc2000cfe00, 0xc20015b270)\n    /home/myuser/go/src/github.com/bmizerany/pat/mux.go:109 +0x1a4\nnet/http.serverHandler.ServeHTTP(0xc20009ac80, 0xc20010e7c0, 0xc2000cfe00, 0xc20015b270)\n    /usr/lib/go/src/pkg/net/http/server.go:1517 +0x16c\nnet/http.(*conn).serve(0xc20012bab0)\n    /usr/lib/go/src/pkg/net/http/server.go:1096 +0x765\ncreated by net/http.(*Server).Serve\n    /usr/lib/go/src/pkg/net/http/server.go:1564 +0x266\n. $ cat /etc/gandalf.conf \nbin-path: /usr/bin/gandalf-ssh\ndatabase:\n  url: 127.0.0.1:27017\n  name: gandalf\ngit:\n  bare:\n    location: /var/lib/gandalf/repositories\n    template: /home/git/bare-template\nhost: myhost.com\nbind: 0.0.0.0:8000\n. uid: git\nwas missing. I think you should handle this.\nI can confirm that tsr 0.3.0 work properly with docker 0.7.0\n. So? Can't you fix your ubuntu repository?\nI would like to test the latest version with docker 0.7 support.\n. I've that you have fixed the repository, but is still without latest version.\nCould you push the latest version ?\n. Also, quota is not configured:\n$ grep -i quota /etc/tsuru/tsuru.conf \n$\n. Thank you, it worked.\n. http://docker-registry.mycloud.com:8080\n. Without http I think that image is detected properly, but i'm still hitting #643 \nI was trying to use a custom registry to bypass issue #643 with multiple docker nodes.\n2013/12/18 17:39:40 DEBUG: create container for app test, based on image docker-registry.mycloud.com:8080/tsuru/php, with cmds [/var/lib/tsuru/deploy git://git.mycloud.com/test.git origin/master TSURU_APPNAME='test' TSURU_HOST='http://10.0.0.1:8080' TSURU_APP_TOKEN='2290338204e68feb24ee303bfd43d7331e87acb1' ]\n2013/12/18 17:39:41 DEBUG: [pipeline] running the Forward for the start-container action\n2013/12/18 17:39:41 DEBUG: starting container 3fb8153cb81912b232dfb6f80e4d0af969e18d1af3ae233c04e14b1942a8dfd1\n2013/12/18 17:39:41 DEBUG: [pipeline] running the Forward for the insert-container action\n2013/12/18 17:39:41 ERROR: Process failed for container \"3fb8153cb81912b232dfb6f80e4d0af969e18d1af3ae233c04e14b1942a8dfd1\": API error (500): wait: wait: no such container: 3fb8153cb81912b232dfb6f80e4d0af969e18d1af3ae233c04e14b1942a8dfd1\n2013/12/18 17:39:41 DEBUG: [pipeline] error running the Forward for the provisioner-deploy action - API error (500): wait: wait: no such container: 3fb8153cb81912b232dfb6f80e4d0af969e18d1af3ae233c04e14b1942a8dfd1\n2013/12/18 17:39:41 ERROR: API error (500): wait: wait: no such container: 3fb8153cb81912b232dfb6f80e4d0af969e18d1af3ae233c04e14b1942a8dfd1\n. I'm already using it. As wrote above my issue is with #643\n. +1\nWho is trying to execute what... And where\n. This is what is happening by manually running gunicorn inside the container:\n```\ngunicorn wsgi -b 0.0.0.0:8888 -k gevent\n2014-01-01 16:51:50 [2917] [INFO] Starting gunicorn 0.14.6\n2014-01-01 16:51:50 [2917] [INFO] Listening at: http://0.0.0.0:8888 (2917)\n2014-01-01 16:51:50 [2917] [INFO] Using worker: gevent\n2014-01-01 16:51:50 [2920] [INFO] Booting worker with pid: 2920\n2014-01-01 16:51:51 [2920] [INFO] Worker exiting (pid: 2920)\n2014-01-01 16:51:52 [2917] [INFO] Shutting down: Master\n2014-01-01 16:51:52 [2917] [INFO] Reason: Worker failed to boot.\n```\n. News about this ?\n. Manually running gunicorn (after manually setting all environment vars) i'm getting this from tsuru:\n$ tsuru service-add mysql test_mysql\nError: Failed to create the instance test_mysql: int() argument must be a string or a number, not 'NoneType'\nBy the way, python app needs this var:\nMYSQLAPI_HOST=myhost\nthat is not wrote on docs. Without this, python app doesn't connect to DB, because of this:\nhttps://github.com/globocom/mysqlapi/blob/master/mysqlapi/settings.py#L21\nhttps://github.com/globocom/mysqlapi/issues/27\nFix in https://github.com/guestisp/mysqlapi/commit/a01e9a23918a00f8629ff8a0868618554a5561ca\n. No, I'm still waiting for an answer.\nPython app doesn't start automatically via procfile (it always restart in a couple of seconds)\nI have to manually start it from inside the container and after that i'm receiving this:\n$ tsuru service-add mysql test_mysql\nError: Failed to create the instance test_mysql: int() argument must be a string or a number, not 'NoneType'\n. Any help?\nmysqlapi doesn't start properly on tsuru...\n. I'm no trying to install mysqlapi on a standalone server but on a tsuru application following your mysql guide.\ndependances are installed by tsuru, when pushing to it, from the requirements.txt file and all is installed properly.\nWhat is not working, from tsuru client, is \ntsuru run --app mysql-api -- python manage.py syncdb --noinput\nThat does nothing.\nI've manually run it from inside the container with lxc-attach, gunicorn starts properly, but no requests are served.\n. $ tsuru app-list\n+-------------+-------------------------+-----------------+--------+\n| Application | Units State Summary     | Address         | Ready? |\n+-------------+-------------------------+-----------------+--------+\n| mysql       | 0 of 1 units in-service | mysql.local.lan | Yes    |\n+-------------+-------------------------+-----------------+--------+\n$ tsuru run 'ls -lsa' -a mysql\n$\nYes, i've published the service.\n. This is my tsuru.conf:\nssh-agent-port: 4545\nrun-cmd:\n    bin: /var/lib/tsuru/start\n    port: \"8888\"\nssh:\n    add-key-cmd: /var/lib/tsuru/add-key\n    public-key: /var/lib/tsuru/.ssh/id_rsa.pub\n    user: ubuntu\n    sshd-path: sudo /usr/sbin/sshd\nssh-agent is running on each node.\nHow can I ensure that public/private keys are correct? How is creating that ?\n. Ok, but I think tsuru needs a public key obteined by the private key on docker node, right?\nWhat happens in case of multiple nodes? Can I save multiple public keys ?\n. Still doesn't work. I'm also unable to see the auth request in /var/log/auth.log\n. I've synced keys between docker node and tsuru api server.\nNow both public and private keys are the same on both hosts but still doesn't work.\n. How can I try to directly login to the container with the key? The container IP is natted.\nI think there is an issue with key location. When manually running \ntsr docker-ssh-agent &\ntsuru is looking for key in: /home/ubuntu/.ssh/id_rsa but I have this:\n```\n$ cat /etc/default/tsuru-server\nTSR_API_ENABLED=no\nTSR_COLLECTOR_ENABLED=no\nTSR_SSH_AGENT_ENABLED=yes\nTSR_SSH_AGENT_USER=tsuru\nTSR_SSH_AGENT_LISTEN=0.0.0.0:4545\nTSR_SSH_AGENT_PRIVATE_KEY=/var/lib/tsuru/.ssh/id_rsa\n```\nby the way, i've copied /var/lib/tsuru/.ssh/* in /home/ubuntu/.ssh/ but now is asking for a password.\n. ON API SERVER:\n```\nroot@api:/var/lib/tsuru/.ssh# cd /var/lib/tsuru/.ssh/\nroot@api:/var/lib/tsuru/.ssh# ls\nid_rsa  id_rsa.pub\nroot@api:/var/lib/tsuru/.ssh# rm \nroot@api:/var/lib/tsuru/.ssh# ls\nroot@api:/var/lib/tsuru/.ssh#\nroot@api:/var/lib/tsuru/.ssh# ssh-keygen -f /var/lib/tsuru/.ssh/id_rsa\nGenerating public/private rsa key pair.\nEnter passphrase (empty for no passphrase): \nEnter same passphrase again: \nYour identification has been saved in /var/lib/tsuru/.ssh/id_rsa.\nYour public key has been saved in /var/lib/tsuru/.ssh/id_rsa.pub.\nThe key fingerprint is:\nc0:0c:3d:c5:8c:40:8f:b7:18:55:77:89:37:9a:6b:30 root@api\nThe key's randomart image is:\n+--[ RSA 2048]----+\n|   .+o.o ....   |\n|     B+ o...+    |\n|    o .   + .   |\n|     + oE o      |\n|    . . So .     |\n|          o      |\n|         .       |\n|                 |\n|                 |\n+-----------------+\nroot@api:/var/lib/tsuru/.ssh# ls\nid_rsa  id_rsa.pub\nroot@api:/var/lib/tsuru/.ssh# md5sum \n9753f7cf1d84922c333a490ebc5ca3d3  id_rsa\nac1086c6406406c15d3f2757a5515dc7  id_rsa.pub\nservice tsuru-server-api restart\ntsuru-server-api stop/waiting\ntsuru-server-api start/running, process 21889\n```\nON DOCKER NODE:\n```\ncd /var/lib/tsuru/.ssh/\nmd5sum *\n9753f7cf1d84922c333a490ebc5ca3d3  id_rsa\nac1086c6406406c15d3f2757a5515dc7  id_rsa.pub\nservice tsuru-ssh-agent restart\ntsuru-ssh-agent stop/waiting\ntsuru-ssh-agent start/running, process 21332\n```\nON CLIENT:\n$ tsuru run -a test 'ls'\n$\nWHEN RUNNING docker-ssh-agent MANUALLY ON DOCKER NODE (password is asked after 'tsuru run'):\n```\ntsr docker-ssh-agent\nubuntu@172.17.0.9's password: \n```\n. Should I redeploy the app after changing keys ?\n. Solved.\nApps must be redeployed after key changes.\nOn tsuru.conf ssh user must be \"ubuntu\" and the same must be on upstart configuration on docker node.\n. Yes but you should update docs. Most of my issue are due to lacks of documentation\n. +1 for this\n. Yes, envs are injected, but in that file I can everything replicated 3 times. Is that normal?\nBy the way, my issue was due to a wrong reverse-dns on mysql node. Now it works.\n```\n$ tsuru run -a wordpress 'cat ../apprc'\ngenerated by tsuru at 14 Jan 14 17:15 +0100\nexport TSURU_APPNAME=\"wordpress\"\nexport TSURU_HOST=\"http://1.2.3.200:8080\"\nexport TSURU_APP_TOKEN=\"756f6dbbd43abe1435585e6f0204182718933e35\"\nexport MYSQL_PASSWORD=\"0f803b9eabac27ed847d8c596291458d75100bb9\"\nexport MYSQL_USER=\"wp_db\"\nexport MYSQL_DATABASE_NAME=\"wp_db\"\nexport MYSQL_HOST=\"sql01.my.lan.tld\"\nexport MYSQL_PORT=\"3306\"\ngenerated by tsuru at 14 Jan 14 17:15 +0100\nexport TSURU_APPNAME=\"wordpress\"\nexport TSURU_HOST=\"http://1.2.3.200:8080\"\nexport TSURU_APP_TOKEN=\"756f6dbbd43abe1435585e6f0204182718933e35\"\nexport MYSQL_PASSWORD=\"0f803b9eabac27ed847d8c596291458d75100bb9\"\nexport MYSQL_USER=\"wp_db\"\nexport MYSQL_DATABASE_NAME=\"wp_db\"\nexport MYSQL_HOST=\"sql01.my.lan.tld\"\nexport MYSQL_PORT=\"3306\"\ngenerated by tsuru at 14 Jan 14 17:15 +0100\nexport TSURU_APPNAME=\"wordpress\"\nexport TSURU_HOST=\"http://1.2.3.200:8080\"\nexport TSURU_APP_TOKEN=\"756f6dbbd43abe1435585e6f0204182718933e35\"\nexport MYSQL_PASSWORD=\"0f803b9eabac27ed847d8c596291458d75100bb9\"\nexport MYSQL_USER=\"wp_db\"\nexport MYSQL_DATABASE_NAME=\"wp_db\"\nexport MYSQL_HOST=\"sql01.my.lan.tld\"\nexport MYSQL_PORT=\"3306\"\n```\n. Right, my app has 3 units.\nCould you add something like:\n```\ngenerated by tsuru at 14 Jan 14 17:15 +0100 on \n```\nthis will allow a better troubleshooting.\n. Yes.\n. For example? Do you have a roadmap ?\n. I don't think that this info is usefull just for admins.\nEnd users should also know where their app lives, it semplify troubleshooting and relationship with tech-support in case of issue.\n. Now it's clear\nSo, on install, docker node should create a pair of public and private keys. \nPublic key must be moved on api server for deployment on every app creation and private key should remain on docker node to be used for login to container\nNo need to put public key on docker node and private on api server\n. I'm not looking for a filesystem service but to something that allow me to mount, for example, an nfs share inside the container after pushing\nI would like to try with restart:before-each and build hooks\u2026 it should work....\n. The same apply with app.yml file\n. Yes, unit name or container id as above sample output.\n. Probably some parsing should be done on gandalf server in a hook\nIs push was ok, the hook could trigger tsuru api to add/remove units and so on...\n. Can't you prioritize operations? Operations made from cli overwrite/ignore settings made from app.yaml\nBy the way, usually who is managing the app via git is the same that has access to tsuru cli, I think he knows that will be a conflict.\nI think most of time apps will be managed through app.yaml, you already use git to publish, so there is no need to use another command (tsuru cli) when you can do the same operation directly from a file and git.\nIn this case, git will give much more flexibility than a dedicated command.\n. Ok now it's clear to me\n\nIl giorno 18/gen/2014, alle ore 16:02, Andrews Medina notifications@github.com ha scritto:\nThere is two ideas here. One is to rename app.yml to tsuru.yml and the another is put the depedence control on tsuru.yml.\nThe rename the app.yml to tsuru.yml is simple to do. We can do it and deprecate the use of app(.yml/yaml).\nPut the dependence control is hard to do and I think that it will make this control more complicated I the most cases.\nCurrently, each platform control how it will install the dependencies. This makes simpler the way to build a new platform. And makes the way used to install deps similar to what is used by developers. By example: in ruby is used Gemfiles, in python requirements.txt and in node.js package.json.\nAnd it is placed in the root because that is the default used by these platforms.\nI think changing the way that this is done to put this information in tsuru.yml will give more work to the developer when he want to use tsuru.\n\u2014\nReply to this email directly or view it on GitHub.\n. Pretty bad to create a platform every time.\nThis way doest allow customers to activate modules for their applications\n\nBuild pack support like heroku or something similar should be adopted in tsuru\nFor example, the standard platforms in tsuru doesn't support mod_rewrite that is needed by almost every webapps. mod_rewrite is disabled by default in Ubuntu. \n. I'm adding support to this but \"deploy\" script seems to be never called.\nI thing it's the same issue that prevent hooks to be executed: #682\nI'm using this app.yaml file:\napache:\n    modules:\n        - rewrite\n        - alias\nAnd pushing changes on our fork https://github.com/guestisp/basebuilder\nI've added \"apache\" node because the same app could be deployed on multiple platform (nginx, apache, and so on) to there is no need to change the app.yaml file based on the publishing platform.\n. Yes, great work!\n. I have to remove them from registry or from each docker node? In the second case, it's pretty bad, I have to remove images from tens of nodes\nCan I remove images with running container based on them?\n. Probably something like \ntsuru-admin platform-update\nis better.\n. Let me explain what I'm trying to do:\nI have some apps that are using \"php\" platform.\nI've made some improvements on \"php\" platform (as for https://github.com/flaviamissi/basebuilder/pull/9 )\nNow I would like to upgrade docker images so that every future push will use the updated image and I would also avoid to repushing code to each platform. can I use \"tsuru restart\" for republish exiting code with upgraded platform ?\n. I've pulled the new image on each docker node, but even with this, the deployment still run the old platform.\n. What do you mean with \"update the application image\" ? Any command to run from docker node?\nNo, I don't have any idea about this, this is why I'm asking to you. Can't you pull the image every time from the registry? something like buildpacks in heroku. They are pulled every time and thus always updated\nActually I have 38 different php platform and the same number of apps :-)\n. Ok, so, there a 3 images:\n1. One platform image (on the registry)\n2. One base image used for each app unit\n3. One container forked from app's base image\nthe last one is the image used by application. each app unit will fork a new container based from \"2\"\nIn case of 5 units, we have 7 \"images\":\n1. One platform image (on the registry)\n2. One base image used for each app unit\n3. 5 container forked from app's base image\nOne way to solve this issue is to skip the creation of \"2\" so that each container will be always based on platform image but this will expose to another issue: let's assume an app created for the first time with 1 unit. \nThat unit will be a fork of platform image at the time of the first push. Some days after this, sysadmin updates the platform image.\nNow, the customers adds some units to the app. New units will be different from the first one because of new platform image.\n. What will happens if admin update a platform image on registry and a user scales an existing app that will be striped on a new node?\nI think that system will become inconsistent. Node1 has the older version of platform image and node2 will pull the updated image from registry.\n. The image you are referring to is created on docker node and not on registry (I don't know if this is a bug)\nIf I add more nodes the deploy image doesn't exist on newly created node.\nBy the way, any changes to force update of a platform without destroying each app and redeploy all again?\n-----Original Message-----\nFrom: Andrews Medina notifications@github.com\nTo: globocom/tsuru tsuru@noreply.github.com\nCc: \"GUEST.it\" alessandro.corbelli@guest.it\nSent: ven, 07 mar 2014 18:29\nSubject: Re: [tsuru] How to upgrade platforms? (#690)\nThis system inconsistency does not exist.\nThere is an image by platform (php, python, java) and an image by deploy (myapp-revision1).\nOn deploy tsuru creates a new image based on the last app deploy image, like myapp-revision2 based on myapp-revision1.\nOn add-unit tsuru uses the last deploy image, like myapp-revision2.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/globocom/tsuru/issues/690#issuecomment-37046750\n. Platform image is coming from registry but the unit image used as master for each units is not saved on registry but only on docker node.\n-----Original Message-----\nFrom: Andrews Medina notifications@github.com\nTo: globocom/tsuru tsuru@noreply.github.com\nCc: \"GUEST.it\" alessandro.corbelli@guest.it\nSent: ven, 07 mar 2014 22:34\nSubject: Re: [tsuru] How to upgrade platforms? (#690)\nIf you are using segregate node, tsuru always will get an image from registry.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/globocom/tsuru/issues/690#issuecomment-37070133\n. So, something is not working properly in my environment\n-----Original Message-----\nFrom: Andrews Medina notifications@github.com\nTo: globocom/tsuru tsuru@noreply.github.com\nCc: \"GUEST.it\" alessandro.corbelli@guest.it\nSent: sab, 08 mar 2014 3:55\nSubject: Re: [tsuru] How to upgrade platforms? (#690)\n@guestisp the unit image is sent to registry: https://github.com/globocom/tsuru/blob/master/provision/docker/docker.go#L365\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/globocom/tsuru/issues/690#issuecomment-37087117\n. docker:registry is set and i'm able to use a custom registry (i'm always using a custom registry) but the app image is not pushed on registry after cloning:\n(output truncated)\nOn docker node:\n```\n$ docker images | grep php\ndocker-registry.mycloud.tld:8080/tsuru/php      latest              99c452f02d9a\n$ docker ps         \nCONTAINER ID        IMAGE   \n4d7252c80b07        docker-registry.mycloud.tld:8080/tsuru/test1:latest\n```\nOn docker registry:\n```\n$ docker images -a\nREPOSITORY                                   TAG          \ndocker-registry.mycloud.tld:8080/tsuru/php   latest       \ntsuru/php                                    latest           \nbase                                         ubuntu-quantal \n$ docker ps\nCONTAINER ID        IMAGE            \n$ docker ps -a | head -n 3\nCONTAINER ID        IMAGE     \nfc366b0ba5b4        f496c4a38fb3\n7cf2fa831af2        24c41a93de59\n```\napp name is \"test1\" and is using platform \"php\" from registry (docker-registry.mycloud.tld:8080/tsuru/php)\nas you can see, on docker registry there is not \"test1\" image but only the original platform image.\nSo, what will happen in case of unit add ? A new image is created starting from \"docker-registry.mycloud.tld:8080/tsuru/php\" ?\nApp image is referenced in \"docker ps\" output on docker node (docker-registry.mycloud.tld:8080/tsuru/test1) but there is no such image on registry\n. I'm using the registry provided with your PPA but I'm planning to move to the official docker registry because it has native support for Amazon S3.\nregistry is working properly and tsuru is able to fetch images but it seems to be unable to push unit image.\napp scaling is working properly or at least was working properly until Wednesday.\n-----Original Message-----\nFrom: Andrews Medina notifications@github.com\nTo: globocom/tsuru tsuru@noreply.github.com\nCc: \"GUEST.it\" alessandro.corbelli@guest.it\nSent: lun, 10 mar 2014 19:43\nSubject: Re: [tsuru] How to upgrade platforms? (#690)\n@guestisp in this case, tsuru will try to use the docker-registry.mycloud.tld:8080/tsuru/test1:latest image and will raise an error. :(\nHow do you installed the registry?\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/globocom/tsuru/issues/690#issuecomment-37218602\n. Here is a log\n$ sudo tail -n 10000 /tmp/tsuru.log  | grep -v 'regenerate-apprc'\n2014/03/13 10:08:36 DEBUG: [pipeline] running the Forward for the start-container action\n2014/03/13 10:08:36 DEBUG: starting container c5aa6f12c562781c0db9878535d1079f3979dbee449f83486dc4f3917c6ce429\n2014/03/13 10:08:37 DEBUG: commiting container c5aa6f12c562781c0db9878535d1079f3979dbee449f83486dc4f3917c6ce429\n2014/03/13 10:08:37 DEBUG: image 43d2c31917ed6f15ec6bc6cdc5659f4299beb1952528a02027ae4f0b928021a7 generated from container c5aa6f12c562781c0db9878535d1079f3979dbee449f83486dc4f3917c6ce429\n2014/03/13 10:08:37 DEBUG: Removing container c5aa6f12c562781c0db9878535d1079f3979dbee449f83486dc4f3917c6ce429 from docker\n2014/03/13 10:08:38 DEBUG: Removing container c5aa6f12c562781c0db9878535d1079f3979dbee449f83486dc4f3917c6ce429 from database\n2014/03/13 10:08:38 DEBUG: [pipeline] running the Forward for the create-container action\n2014/03/13 10:08:38 DEBUG: create container for app test1, based on image docker-registry.mycloud.tld:8080/tsuru/test1, with cmds [/bin/bash -c /var/lib/tsuru/start && /var/lib/tsuru/add-key ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC1N3PDHT4sMfZz6WT0AH6aCTRZCzEhsAX/m/3eJRTTJQ3VYgamzY9NUTyMFAyA9ObVbZMAxL/p+cxM5B1LDlZimdZpwbmVUYs9Enp8NiqJtal0mqp+AEsA3XQ5tyC7K9/SzjA+gzKOC8unklw2xmJrUhg4xWlYCuc2v1Auy5dhzpAxneQkIZVDVmGO2A/sNiP0kKNcjkKXk3jOX2YVBUFaDQK2/2+pX61W6dzJLa234dNQnj8qqVYl2xYGO7tX433n8S8I7lT0KCMquDXF6ZOvkrg+uYA2pHhzbJ4Iziiv0byk8C5qPJy42Ny6XHl6anp/Y3Co+siH4cMsLV7WZ3qJ root@api && sudo /usr/sbin/sshd -D]\n2014/03/13 10:08:38 DEBUG: [pipeline] running the Forward for the start-container action\n2014/03/13 10:08:38 DEBUG: starting container cb42bba71378604ae98b5fbf84dcf4ceab58c8005cebf286352400522f59e2c4\n2014/03/13 10:08:38 DEBUG: [pipeline] running the Forward for the set-network-info action\n2014/03/13 10:08:38 DEBUG: [pipeline] running the Forward for the add-route action\n2014/03/13 10:08:38 DEBUG: [pipeline] running the Forward for the increment-deploy action\n2014/03/13 10:08:38 DEBUG: [pipeline] running the Forward for the save-units action\n2014/03/13 10:08:38 DEBUG: [pipeline] running the Forward for the inject-environs action\n2014/03/13 10:08:38 DEBUG: [pipeline] running the Forward for the bind-service action\n2014/03/13 10:08:38 DEBUG: Dispatching \"bind-service\" message to handler function.\n2014/03/13 10:08:38 ERROR: Unknown unit in the message.\n2014/03/13 10:08:43 DEBUG: Failed to get message from the queue: Timed out waiting for message after 5s.. Trying again...\n2014/03/13 10:08:48 DEBUG: Failed to get message from the queue: Timed out waiting for message after 5s.. Trying again...\n2014/03/13 10:08:53 DEBUG: Failed to get message from the queue: Timed out waiting for message after 5s.. Trying again...\n2014/03/13 10:08:58 DEBUG: Failed to get message from the queue: Timed out waiting for message after 5s.. Trying again...\n2014/03/13 10:09:03 DEBUG: Failed to get message from the queue: Timed out waiting for message after 5s.. Trying again...\n2014/03/13 10:09:05 DEBUG: Collecting status from provisioner\n2014/03/13 10:09:05 DEBUG: collected data for [container cb42bba71378604ae98b5fbf84dcf4ceab58c8005cebf286352400522f59e2c4] - [app test1]\n2014/03/13 10:09:05 DEBUG: result for [container cb42bba71378604ae98b5fbf84dcf4ceab58c8005cebf286352400522f59e2c4] - [app test1]\n2014/03/13 10:09:05 DEBUG: collected data for [container 369dd68fa6872eff9a792c43f9341a188dccef3126b33942ac145b4c74b28e8b] - [app mysql]\n2014/03/13 10:09:05 DEBUG: result for [container 369dd68fa6872eff9a792c43f9341a188dccef3126b33942ac145b4c74b28e8b] - [app mysql]\n2014/03/13 10:09:05 DEBUG: updating status from provisioner\n2014/03/13 10:09:05 DEBUG: Collecting status from provisioner finished\n2014/03/13 10:09:08 DEBUG: Failed to get message from the queue: Timed out waiting for message after 5s.. Trying again...\n2014/03/13 10:09:13 DEBUG: Failed to get message from the queue: Timed out waiting for message after 5s.. Trying again...\n2014/03/13 10:09:18 DEBUG: Failed to get message from the queue: Timed out waiting for message after 5s.. Trying again...\n2014/03/13 10:09:23 DEBUG: Failed to get message from the queue: Timed out waiting for message after 5s.. Trying again...\n2014/03/13 10:09:28 DEBUG: Failed to get message from the queue: Timed out waiting for message after 5s.. Trying again...\n2014/03/13 10:09:33 DEBUG: Failed to get message from the queue: Timed out waiting for message after 5s.. Trying again...\n2014/03/13 10:09:38 DEBUG: Failed to get message from the queue: Timed out waiting for message after 5s.. Trying again...\ncommit() function is called, but there is no such image on docker registry:\nx@docker-registry:~$ docker ps -a --no-trunc | grep 43d2c31917ed6f\nx@docker-registry:~$ docker images --no-trunc | grep 43d2c31917ed6f\nThis is strange because scale is working well\n2014/03/13 10:16:53 DEBUG: create container for app test1, based on image docker-registry.mycloud.tld:8080/tsuru/test1, with cmds [/bin/bash -c /var/lib/tsuru/start && /var/lib/tsuru/add-key ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC1N3PDHT4sMfZz6WT0AH6aCTRZCzEhsAX/m/3eJRTTJQ3VYgamzY9NUTyMFAyA9ObVbZMAxL/p+cxM5B1LDlZimdZpwbmVUYs9Enp8NiqJtal0mqp+AEsA3XQ5tyC7K9/SzjA+gzKOC8unklw2xmJrUhg4xWlYCuc2v1Auy5dhzpAxneQkIZVDVmGO2A/sNiP0kKNcjkKXk3jOX2YVBUFaDQK2/2+pX61W6dzJLa234dNQnj8qqVYl2xYGO7tX433n8S8I7lT0KCMquDXF6ZOvkrg+uYA2pHhzbJ4Iziiv0byk8C5qPJy42Ny6XHl6anp/Y3Co+siH4cMsLV7WZ3qJ root@api && sudo /usr/sbin/sshd -D]\n2014/03/13 10:16:53 DEBUG: [pipeline] running the Forward for the start-container action\n2014/03/13 10:16:53 DEBUG: starting container 84869ecc87485143947ea12d7b94aab73a2dc0eeb2707e5657326f5810d88c2a\n2014/03/13 10:16:53 DEBUG: [pipeline] running the Forward for the set-network-info action\n2014/03/13 10:16:53 DEBUG: [pipeline] running the Forward for the add-route action\n2014/03/13 10:16:53 DEBUG: [pipeline] running the Forward for the create-container action\n2014/03/13 10:16:53 DEBUG: create container for app test1, based on image docker-registry.mycloud.tld:8080/tsuru/test1, with cmds [/bin/bash -c /var/lib/tsuru/start && /var/lib/tsuru/add-key ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC1N3PDHT4sMfZz6WT0AH6aCTRZCzEhsAX/m/3eJRTTJQ3VYgamzY9NUTyMFAyA9ObVbZMAxL/p+cxM5B1LDlZimdZpwbmVUYs9Enp8NiqJtal0mqp+AEsA3XQ5tyC7K9/SzjA+gzKOC8unklw2xmJrUhg4xWlYCuc2v1Auy5dhzpAxneQkIZVDVmGO2A/sNiP0kKNcjkKXk3jOX2YVBUFaDQK2/2+pX61W6dzJLa234dNQnj8qqVYl2xYGO7tX433n8S8I7lT0KCMquDXF6ZOvkrg+uYA2pHhzbJ4Iziiv0byk8C5qPJy42Ny6XHl6anp/Y3Co+siH4cMsLV7WZ3qJ root@api && sudo /usr/sbin/sshd -D]\nbut I don't see this image\ndocker-registry.mycloud.tld:8080/tsuru/test1\non registry:\n```\nx@docker-registry:~$ docker images      \nREPOSITORY                               \ndocker-registry.mycloud.tld:8080/tsuru/php \ntsuru/php                              \n \n \n \n \nbase        \nx@docker-registry:~$ docker ps  \nCONTAINER ID        IMAGE   \n.\n$ tsuru app-info -a test1\nApplication: test1\nRepository: git@git.mycloud.tld:test1.git\nPlatform: php\nTeams: sviluppatori\nAddress: test1.mycloud.it\nOwner: x\nUnits:\n+------------------------------------------------------------------+---------+\n| Unit                                                             | State   |\n+------------------------------------------------------------------+---------+\n| 3b03340334d5acc9100b6787dd2f864564e9371af77ff67053ce569426592435 | started |\n| 84869ecc87485143947ea12d7b94aab73a2dc0eeb2707e5657326f5810d88c2a | started |\n| cb42bba71378604ae98b5fbf84dcf4ceab58c8005cebf286352400522f59e2c4 | started |\n+------------------------------------------------------------------+---------+\n```\n. There isn't, output is\n[]\n. Also related  to #720\nJust to recap:\nOn deploy tsuru fetchs the platform image from the repository and start a new container from it.\nIt also push the newly created container back to the registry so that all units will spawn the same container version when scaling.\nIs this correct ?\nOn unit-add, the app container image is pulled from the repository and started on docker node.\nWhat happens when pushing to git ? The updated platform image would be fetched from registry and a new app container is started from it ? I don't think so, If I read tsuru code properly, you are just triggering a new \"deploy\" script fetching the git code.\nWhat happens in case of a security hole like the following: http://goo.gl/M5meRW ?\nOn tsuru, each affected customers should destroy and recreate the app to trigger a new container generation from the updated image.\nOne way to fix is to trigger the whole deploy process (pull platform image, create container from it, push it back to registry) on each push and decommissioning the old container image.\n. Setting should be global and also per app.\nAdmin could set 1 as full build limit forcing every app to be built every time and change setting for just some apps.\nThis setting should not exposed to customers or you have to consider some situations\nIn a situation like heroku you must ensure that users will be updated as soon as possible. What will happen if some user created apps with a very high limit? Many apps stay bugged for a long time.\nAnother thing to consider is to add a command  like \"app-rebuild\" to force a rebuild of a working app or to force rebuild on next deploy.\nIn a similar way, we need for another command : \"app-configure --rebuild-freq 8\" to change a rebuild frequency for a running app.\nLast but not least, admin must be able to schedule a rebuild of one or more apps in a single command in case of bugs so that every apps will be built from scratch on the first upcoming push regardless users settings.\n. Probably something like\ntsuru-admin platform-update\nis better.\n. I think that this: https://github.com/globocom/tsuru/blob/master/api/auth.go#L63 should be moved between lines 48 and 49\n. Any ETA for this?\nIt's a blocking bug.\n. In my case is always present. I'm trying to debug why service binding doesn't work as expected (#702) but I'm unable to run command inside a container from tsuru cli.\n. At least in my latest 4 deploys\n. Is possibile to set multiple nodes to the same team and round-robin between them ?\nAs I can see, one team is bound to a single node.\n. Perfect. In that case, only that team can use the defined node ?\n. So, team1 set to docker1, docker2, docker3\nOnly team1 can use these nodes and every app will be created over these.\nfallback set to docker4, docker5, docker6\nevery other users will be created on docker4-6 and just on them\n. Yes\n. Pre restart is executed directly from docker node or from container?\n. Inside container is not possible to mount a volume due to docker design.\n. I'm receiving this:\n$ tsuru run -a wordpress2 'cat ../apprc'\nError: Container does not contain any mapped port\nDid you push a badly compiled version of tsuru server in ubutu repo? \nI've seen this error with older versions of tsuru non compatible with docker 0.7, it was fixed and now, after an update from ubuntu repo, i'm still getting into this.\n. Damn.\nAny ETA for this fix ?\n. I think yes\n. Docker 0.8 works properly with latest tsr version coming from PPA\n. I don't like the idea to force a different name between app and platform.\nMore deeply, which is the exact issue? Why tsuru is unable to detect if \"php\" is an app or a platform ?\n. I've found a way to mount a shared FS with no need for fuse support inside container.\nIt should be done pretty easily with api and volumes.\nWhen creating the container, we need to pass the Volume node to API, for example:\n\"Volumes\":{\n    \"/mnt/shared\": {}\n},\nAfter that, we can bind an host directory (that could be shared FS like a S3QL volume, Gluster, ....) inside the container by passing \"Bind\" node to the API:\n\"Binds\":[\"/node/mount/point:/mnt/shared\"],\nCan someone tell me how to pass these parameters with dockerclient in tsuru ?\nAs a POC it's a quick fix. The \"harder\" part is to create a mount bind with appname so that all units for the same apps will share the same FS, in example:\napp name: \"test\"\nFS on docker node: /mnt/s3ql/test\nbind mount inside docker: /mnt/shared\n\"Bind JSON\": \"Binds\":[\"/mnt/s3ql/test:/mnt/shared\"],\n. Step1 could be done here:\nhttps://github.com/globocom/tsuru/blob/master/provision/docker/docker.go#145\nStep2 here:\nhttps://github.com/globocom/tsuru/blob/master/provision/docker/docker.go#382\nalso passing the app name\nwhat do you think ?\n. Ok working on this: https://github.com/guestisp/tsuru/tree/add-shared-volumes-support\nActually I'm able to bind mount an external test share.\nI have to fetch the app name when running containers and add some configurable option like container mount point.\n. Fixed.\n. Is this included in tsuru coming from PPA?\nI've deployed the same app at least 15 times today\nwith no issue\nIl 18/02/2014 20:40, Francisco Souza ha scritto:\n\nThe recent change in the container creation has broken the deployment\nprocess. The problem is that we run pull only when the image is not\nfound in the docker node, so the image never gets updated.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/globocom/tsuru/issues/715.\n. I'm using 0.3.3 but I think that \"tsr version\" was updated after your repository:\n\n```\n$ sudo dpkg -l | grep tsuru-server\nii  tsuru-server                        0.3.3-0ubuntu1ppa2~saucy1        amd64        tsuru-server is the server side of the Tsuru PaaS.\n$ tsr version\ntsr version 0.3.2.\n```\n. I have this in log:\n2014/02/20 18:14:55 DEBUG: Failed to get message from the queue: Timed out waiting for message after 5s.. Trying again...\n. This is an extract:\n4431) \"redismq::tsuru-app::failed::size::1392912943\"\n4432) \"redismq::tsuru-app::rate::1392913273\"\n4433) \"redismq::tsuru-app::working::handler-1392912099997913288::rate::1392913324\"\n4434) \"redismq::tsuru-app::working::handler-1392913890590862913::rate::1392913894\"\n4435) \"redismq::tsuru-app::size::1392913656\"\n4436) \"redismq::tsuru-app::working::handler-1392912099997913288::rate::1392913443\"\n4437) \"redismq::tsuru-app::working::handler-1392912099997913288::rate::1392913680\"\n4438) \"redismq::tsuru-app::working::handler-1392912099997913288::rate::1392913650\"\n4439) \"redismq::tsuru-app::working::handler-1392912099997913288::rate::1392913610\"\n4440) \"redismq::tsuru-app::working::handler-1392912099997913288::rate::1392913344\"\n4441) \"redismq::tsuru-app::rate::1392913452\"\n4442) \"redismq::tsuru-app::failed::size::1392913401\"\n4443) \"redismq::tsuru-app::working::handler-1392912099997913288::rate::1392913408\"\n4444) \"redismq::tsuru-app::rate::1392913198\"\n4445) \"redismq::tsuru-app::rate::1392914585\"\n4446) \"redismq::tsuru-app::size::1392911923\"\n4447) \"redismq::tsuru-app::size::1392914370\"\n4448) \"redismq::tsuru-app::working::handler-1392912099997913288::rate::1392913348\"\n4449) \"redismq::tsuru-app::working::handler-1392912099997913288::rate::1392913387\"\n4450) \"redismq::tsuru-app::working::handler-1392911921889879414::rate::1392911929\"\n4451) \"redismq::tsuru-app::failed::size::1392913143\"\n4452) \"redismq::tsuru-app::working::handler-1392912099997913288::rate::1392913753\"\n4453) \"redismq::tsuru-app::size::1392913355\"\n4454) \"redismq::tsuru-app::working::handler-1392912099997913288::rate::1392913218\"\n4455) \"redismq::tsuru-app::size::1392911268\"\n4456) \"redismq::tsuru-app::size::1392913625\"\n4457) \"redismq::tsuru-app::size::1392913299\"\n4458) \"redismq::tsuru-app::size::1392913609\"\n4459) \"redismq::tsuru-app::working::handler-1392913890590862913::rate::1392914603\"\n4460) \"redismq::tsuru-app::size::1392914488\"\n4461) \"redismq::tsuru-app::size::1392914557\"\n4462) \"redismq::tsuru-app::failed::size::1392912183\"\n4463) \"redismq::tsuru-app::size::1392912046\"\n4464) \"redismq::tsuru-app::rate::1392914564\"\n4465) \"redismq::tsuru-app::working::handler-1392912099997913288::rate::1392913216\"\n4466) \"redismq::tsuru-app::working::handler-1392912099997913288::rate::1392913302\"\n4467) \"redismq::tsuru-app::failed::size::1392913477\"\n4468) \"redismq::tsuru-app::rate::1392913184\"\n4469) \"redismq::tsuru-app::size::1392913587\"\n4470) \"redismq::tsuru-app::failed::size::1392912049\"\n4471) \"redismq::tsuru-app::working::handler-1392912099997913288::rate::1392913640\"\n4472) \"redismq::tsuru-app::rate::1392913484\"\n4473) \"redismq::tsuru-app::rate::1392913373\"\n4474) \"redismq::tsuru-app::size::1392914281\"\n4475) \"redismq::tsuru-app::failed::size::1392913625\"\n4476) \"redismq::tsuru-app::size::1392913283\"\n4477) \"redismq::tsuru-app::working::handler-1392912099997913288::rate::1392913261\"\n4478) \"redismq::tsuru-app::working::handler-1392912099997913288::rate::1392913612\"\n4479) \"redismq::tsuru-app::failed::size::1392914271\"\n4480) \"redismq::tsuru-app::failed::size::1392912127\"\nThe same is happening with beanstalkd. Same error is logged.\nI don't know if this is causing issue during deploy but i'm unable to spin up a docker container with \"git push\". Pushing to gandalf is ok, post-receive hooks is run but nothing happens from tsuru.\n. Can this be related to my issue when starting a new container after pushing?\n-----Original Message-----\nFrom: Francisco Souza notifications@github.com\nTo: globocom/tsuru tsuru@noreply.github.com\nCc: \"GUEST.it\" alessandro.corbelli@guest.it\nSent: gio, 20 feb 2014 19:47\nSubject: Re: [tsuru] queue/redis: queue is filling up (#717)\nI will try to reproduce this. The error \"Failed to get message from the queue\" means that there are no messages in the queue, which is strange in your case, since you have so many records in Redis. I still think that the queue itself is empty, but we're probably doing something else wrong.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/globocom/tsuru/issues/717#issuecomment-35654917\n. Tomorrow I'll look into this trying to make a fix.\nJust for information: can I make a garbage collector that will purge expired items, for example after 1 day?\n. What are these:\nredis 127.0.0.1:6379[3]> KEYS *\n1) \"redismq::tsuru-app::working::handler-1395826939823373286::heartbeat\"\n2) \"redismq::queues\"\n3) \"redismq::tsuru-app::working::factory::heartbeat\"\n4) \"tsuru-app::workers\"\npushing an app added 1 and 3, but no one is removing them\n. In case of a fully redundant environment, we could have multiple tsuru server, thus multiple consumers.\n. Ok, +1 for me.\n. I'm not able to do this. To hard for me, i'm not a Go programmer.\nBy the way,  I don't see any code calling .Put outside queue package. Could you point me to that ?\n. Yes.\n. On git push, no errors. It does nothing.\nOn app remove I'm getting errors \"immutable cluster\" because tsuru doesn't find any registered docker node.\nI've solved by using segregated schedulers and setting one node to my team (I've also quickly tested a fallback with no success)\n-----Original Message-----\nFrom: Francisco Souza notifications@github.com\nTo: globocom/tsuru tsuru@noreply.github.com\nCc: \"GUEST.it\" alessandro.corbelli@guest.it\nSent: ven, 21 feb 2014 1:07\nSubject: Re: [tsuru] provison/docker: round robin doesn't work anymore (#719)\nWhat errors are you getting?\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/globocom/tsuru/issues/719#issuecomment-35685124\n. Yes it is with segregate setting set to false , storage shouldn't be used in favor of servers node.\nI was forced to set segregate to true to fix this issue.\n-----Original Message-----\nFrom: Andrews Medina notifications@github.com\nTo: globocom/tsuru tsuru@noreply.github.com\nCc: \"GUEST.it\" alessandro.corbelli@guest.it\nSent: ven, 21 feb 2014 1:29\nSubject: Re: [tsuru] provison/docker: round robin doesn't work anymore (#719)\n@guestisp the scheduler storage is configured? Here is an example for the scheduler configuration: https://github.com/dgryski/tsuru-bootstrap/blob/master/tsuru.conf#L170\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/globocom/tsuru/issues/719#issuecomment-35686621\n. I'll try to check deeply on Monday but in my installation only container is removed.\n. Golden image is not removed.\nIt will be removed the container and it's image, but not the image coming from the registry.\n. no, that one is removed.\ni mean the image with the name of the original image coming from repository\n. This is why I wrote \"if not used\".\n-----Original Message-----\nFrom: Andrews Medina notifications@github.com\nTo: globocom/tsuru tsuru@noreply.github.com\nCc: \"GUEST.it\" alessandro.corbelli@guest.it\nSent: ven, 07 mar 2014 17:41\nSubject: Re: [tsuru] provison/docker: remove image if not used (#720)\n@guestisp do you mean the platform image, like \"tsuru/php\"? Tsuru should not remove this image when an app is removed because this image can be used by more than one app.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/globocom/tsuru/issues/720#issuecomment-37041733\n. If you keep the platform image on each docker node, every time we need to update a platform, we have to clean the image on each node. If you have 100 nodes.......\n. Ok, i'll try to do more tests\n. This:\n$ docker version\nClient version: 0.8.1\nGo version (client): go1.2\nGit commit (client): a1598d1\nServer version: 0.8.1\nGit commit (server): a1598d1\nGo version (server): go1.2\nLast stable version: 0.8.1\nis not compatible with this:\n$ /usr/bin/tsr.orig version\ntsr version 0.3.5.\n0.3.6 seems to work properly\n. You can close, in case of more issue i'll reopen this.\n. Still getting this.\n```\n$ tsuru app-info -a wordpress\nApplication: wordpress\nRepository: git@git.mycloud.tld:wordpress.git\nPlatform: php\nTeams: sviluppatori\nAddress: wordpress.mycloud.tld\nUnits:\n+------------------------------------------------------------------+---------+\n| Unit                                                             | State   |\n+------------------------------------------------------------------+---------+\n| 74b3f68300a68410932cd5acb132236abb43c89493f3eb67b4c418e211abc87a | started |\n+------------------------------------------------------------------+---------+\n$ tsuru unit-add -a wordpress 2\nError: No such container\n```\n. Obviously container is there and is working\n$ docker ps | grep 74b3f68300a6                                             \n74b3f68300a6        docker-registry.mycloud.tld:8080/tsuru/wordpress:latest   /bin/bash -c /var/li   6 days ago          Up 6 days           0.0.0.0:49219->8888/tcp   db5a56a4a1e0c0b0e9df\n. mongodb:\n{\n   \"_id\":ObjectId(\"530cdb5512801f11d169ea8c\"),\n   \"env\":{\n      \"TSURU_APPNAME\":{\n         \"name\":\"TSURU_APPNAME\",\n         \"value\":\"wordpress\",\n         \"public\":false,\n         \"instancename\":\"\"\n      },\n      \"TSURU_HOST\":{\n         \"name\":\"TSURU_HOST\",\n         \"value\":\"http://1.2.3.200:8080\",\n         \"public\":false,\n         \"instancename\":\"\"\n      },\n      \"TSURU_APP_TOKEN\":{\n         \"name\":\"TSURU_APP_TOKEN\",\n         \"value\":\"d5f684b66f4e7eba0aa50cbe9d803d7b817084f2\",\n         \"public\":false,\n         \"instancename\":\"\"\n      }\n   },\n   \"framework\":\"php\",\n   \"name\":\"wordpress\",\n   \"ip\":\"wordpress.mycloud.tld\",\n   \"cname\":\"\",\n   \"units\":[\n      {\n         \"name\":\"74b3f68300a68410932cd5acb132236abb43c89493f3eb67b4c418e211abc87a\",\n         \"type\":\"php\",\n         \"machine\":0,\n         \"instanceid\":\"\",\n         \"ip\":\"docker01.mycloud.tld\",\n         \"state\":\"started\"\n      }\n   ],\n   \"teams\":[\n      \"sviluppatori\"\n   ],\n   \"owner\":\"x@y.tld\",\n   \"state\":\"ready\",\n   \"deploys\":2,\n   \"quota\":{\n      \"limit\":-1,\n      \"inuse\":0\n   }\n}\n. In redis node is stored properly for the container id:\nGET docker-cluster:74b3f68300a68410932cd5acb132236abb43c89493f3eb67b4c418e211abc87a\n\"docker01\"\nbut there is not mapping between node and url:\nGET docker-cluster:node:docker01\n(nil)\ndocker01 is referenced as server0:\nGET docker-cluster:node:server0\n\"http://docker01.mycloud.tld:4243\"\nManually setting the key:\nSET docker-cluster:node:docker01 \"http://docker01.mycloud.tld:4243\"\nOK\nmake everything working:\n$ tsuru unit-add -a wordpress 1\nUnits successfully added!\n. I don't think that #679 is usefull only for admin. Even end-user could be interested in knowing where each unit is and it also simplify relationship with a tech-support\n434 which kind of test. Obviously is not a perfect fix, users should be able to choose the amount of memory (and also CPU cycles) per app and based on plans, but at least this could set an upper limit different from the whole ram available on node. Probably, 256MB or 512MB for each app is a good starting point (like Heroku)\n. Feel free to improve my changes, I'm not a Go programmer so I don't write good code.\n. News or plans for this, at least for capability to bind/create services (like mysql db) directly from app.yaml\n. Thank you\n. Or even better, generate apprc just on deploy. In case of many unpushed apps this loop could cause a DoS and huge overhead\n. Will circus be used to inject vars with the binary ? In case of no, my php platform will broke.\n. Ok. I've forgot that my php platform doens't use circus to manage apprc but is using a wrapper to php-fpm https://github.com/guestisp/basebuilder/blob/master/php/php5-fpm so as long circus will restart php5-fpm everything should work as expected\n. Why a binary and not a script ? I think that a binary will be harder to customize and will not be possible to dynamically fetch an updated version during image creation \nSomething like \nADD https://github.com/globocom/tsuru-unit-agent/raw/master/unit-agent.py /unit-agent.py\nin a Dockerfile\n. In this case, to know which commint an app is pointing to are needed two commands or two api requests\n'tsuru deploy' could be used to se all deploys for an app (with date and so on) but the actual commit should be shown in app-info\n. +1\nWhy not '''tsuru app-deploys''' ?\n. This generate more confusion.\nDeploys are related to an app.\nIn tsuru cli (that I'm not using, we are creating a php cli) all commands related to an app has app- as prefix, so app-deploys seems better to me.\n. Working on this.\n. Sorry I had an older version of dockerclient.\n. Cool but which kind of metrics sends?\nI was talking about container's memory/cpu/swap usage and so on but if circus has native support for statsd, statsd aggregator is the way to go\n. Fixed as your suggestions.\n. Do you think will be usefull to add a configuration hashed-path that isolates mount point with an SHA1 on AppName? Like /mnt/path/app1 => /mnt/path/cbf1566d6793ea11d9600790af1d28f5b9826e64 just to make a bit harder to detect mount points?\n. A 'static' salt defined in tsuru.conf could be added so that the calculated SHA would be salt+appname\nWhich kind of tests do you need? My knowledge of Go is too low to write unit tests for this.\nActually, it works. hostdir and mountpoint must be defined or volume is not created. app-isolation is not mandatory.\nIf you merge, I can also add support to app.yaml so that users can map one or more directories to be shared (like wordpress' wp-content). https://pagodabox.com/features/shared-writable-storage\nA bind mount would be perfect, but is not possible to mount inside a docker container, so I'll use symlinks.\n. How can I access to mountpoint settings from inside container ?\n. Configuration changes:\ndocker:\n  sharedfs:\n    hostdir: /path/to/basedir/on/docker/node\n    mountpoint: /mountpoint/inside/container\n    app-isolation: false # if TRUE, hostdir will be isolated by appname, like: /path/to/basedir/on/docker/node/APPNAME/. Default to false\n    encrypt-hostdir: false # if TRUE and app-isolation set to TRUE, app-hostdir on docker node will be encrypted with a salt\n    salt: \"\" # Salt to use for encryption. Could also be empty, if no salt is needed\n. Only salt and removing encrypt-hostdir ?\n. Doing in your way doesn't allow to use encryption without a salt.\nI can change it, but it will be less powerful\n. Just to make a little bit harder detect mount point as you also need to know the app name to create the real encrypted path used as mount, even with a blank salt.\nBy the way encryption is not needed, containers cannot access other mountpoints as they are binded in startup phase and from Inside a container you can't use mount so you can't escape or change the mount.\nActually I'm out of office and I can't push to github until late afternoon.\nFeel free to fix this PR , it's a single line change.\nIt's just a small security measure.\n. Could you please merge ?\nHow can I access to docker:sharedfs:mountpoint setting from container ? I need the value of this var to mount shared folders inside each app containers.\n. That would be good, but I have to do from Go on container start. Any hint on how and where ?\n. Docker's Remote API support custom envs passed in container creation.\nSo, I can pass the value of docker:sharedfs:mountpoint and docker:sharedfs:hostdir during creation (the same place where I added the sharedfs mountpoint). This should solve my issue.\n. Ok, i'll try.\n. Cant' use this. setEnvsToApp il called after using start, I need to set mountpoint before starting the application, not after. I'll go by using Env in docker-client\n. I'm setting env when creating the container:\n$ docker inspect b648b414eda7 | grep Env -A 2\n        \"Env\": [\n            \"PIPPO=/mnt/shared\"\n        ],\nbut is not exposed inside container:\n$ tsuru run -a test1 'env' | grep PIPPO\n$ tsuru run -a test1 'sudo env' | grep PIPPO\n$\nare you cleaning envs somewhere in tsuru code ?\n. Done.\nI think (and hope) you can safely merge so that I can proceed adding support to deploy scripts\n. I've added support to shared directories in my basebuilder fork.\nKeep in mind that my fork is much different from yours, merge could be not easy (but usefull)\n. Any news on this PR?\n. Can someone merge this? I really need shared storage support. Not all apps are able to use a remote object storage like Amazon S3 natively.\n. Awesome. Keep in mind that this PR is related to some changes on basebuilder, you have to add this file: https://github.com/guestisp/basebuilder/blob/master/sharedfs.py\nand these lines:\nhttps://github.com/guestisp/basebuilder/blob/master/base/deploy#L34\nhttps://github.com/guestisp/basebuilder/blob/master/base/deploy#L35\nhttps://github.com/guestisp/basebuilder/blob/master/base/deploy#L39\nhttps://github.com/guestisp/basebuilder/blob/master/base/deploy#L49\nbut probably these should be refactored by using the new unit-agent\n. Sharedfs.py is needed to link the shared folder where user wants to inside app dir.\nFor example, in case of WordPress, user want to link the shared directory in /home/application/current/wp-content\ntsuru bind a shared volume in a fixed place, as set it tsuru.conf, but users would like to be able to use multiple locations inside their applications by setting shared dirs in app.yaml\nLook at writable storage docs of pagodabox.\n. In a next release Sharedfs.py could be replaced by unit agent.\nBut why do you want to remove the script? Any issue with that?\n. news?\n. Thank you\n. Keep in mind that you have to fix basebuilder (or, better, the newly created unit-agent) with sharedfs.py to get this working. Shared FS must be mounted and linked accordingly to app.yml\n. I can't send a PR because my basebuilder is out of sync from yours.\nYou have to call this script: https://github.com/guestisp/basebuilder/blob/master/sharedfs.py in base/deploy\nLook at this: https://github.com/guestisp/basebuilder/blob/master/base/deploy\n. fluentd.org is also an interesting project.\n. Pretty easy to do container-side and you don't need to make rsyslog configurable. It's a one line configuration that will send everything to a remote rsyslog.\nThe real issue is how to aggregate and manage logs from a centralized location.\nI've seen that Globocom is using ElasticSearch (there is a case study on ES site), so you know that kind of better than me.\nProbably, best way is:\n- install rsyslog on each container with everything sent to a central location by adding \"app name\" as prefix\n- install fluentd in the central location. \"syslog\" as \"IN\", elasticsearch as \"OUT\" with \"app name\" as an additional \"tag\" (from rsyslog prefix)\n- install elasticsearch somewhere\n- install \"i don't know who\" software to provide a GUI for endusers.\nI'm new to this but there is a sample howto on fluentd side and seems to be easy.\nAs a quick and dirty workaround: install rsyslog on each container, send everything to a central rsyslog (10 minutes, not more, 2 lines in each Dockerfile) and then customize \"tsuru\" to fetch log from this central server.\n. At the same time, provide a Statsd+Graphite integration in tsuru-circus and apache/nginx to catch metrics for each container like cpu,ram,req/s,bytes in,bytes out.\nWe could:\na) use https://github.com/etsy/logster to parse the same access/error log as fluentd and increase a statsd counter\nb) write a custom output plugin for fluentd that will push metrics to statsd. http://docs.fluentd.org/articles/plugin-development#writing-non-buffered-output-plugins \n. Docker 0.9 and latest tsuru but with my patches for sharedfs\nSeems to be a race condition, i've destroyed, created and pushed an app very quickly with the same name, probably in db there was the older container ID.\nAfter a new destroy+create+push all went well.\nIn fact, app removal is too quick, I think this could make some issue. Is not possible to wait for at least db update ?\n. Great! but keep it simple, very, very, very simple.\nI think that my idea to use DNS is easy to do and simple to manage, or you could also bind servers to regions like region to teams with segregated scheduler.\nKeep in mind that both things (teams and geo) should be supported at the same time.\n. As you are refactoring some code of Scheduler and added support to unit migrations, this issue could be addressed.\nDocker hosts could be grouped by region (something like the segregated scheduler) and unit move could be extended by allowing migration from a region to another. (mostly the same as it does actually but with valid destination hosts choosen by region)\n. Which version are you using?\n. Yes, that's the easier way.\nP.S: I really don't know why sources are placed in different repositories and not all under \"globocom\" or even better under a \"tsuru\" user. This would help troubleshooting, cloning and forking.\n. Great!\n. Can you post your tsuru.conf ?\n. Your config is wrong. You are missing docker node, something like this:\ndocker:\n  allow-memory-set: true\n  registry: docker-registry.mycloud.tld:8080\n  servers:\n    - http://docker01.mycloud.tld:4243\n  collection: docker\n  repository-namespace: tsuru\n  router: hipache\n  deploy-cmd: /var/lib/tsuru/deploy\n  ssh-agent-port: 4545\n  run-cmd:\n    bin: /var/lib/tsuru/start\n    port: \"8888\"\n  ssh:\n    add-key-cmd: /var/lib/tsuru/add-key\n    public-key: /var/lib/tsuru/.ssh/id_rsa.pub\n    user: ubuntu\n    sshd-path: sudo /usr/sbin/sshd\n  segregate: true\n  scheduler:\n    redis-server: 127.0.0.1:6379\n    redis-prefix: docker-cluster\n  sharedfs:\n    hostdir: /mnt/test\n    mountpoint: /mnt/shared\n    app-isolation: true\n    salt: \"4JwCKpf4D1tx\"\n    encrypt-hostdir: true\n. Strange. Could you try to copy-paste my config?\nThere are some extra settings not used in your tsuru version but will be ignored.\n. Could you please check in redis if docker nodes are wrote properly when pushing?\nI don't have redis db here with me so I'm unable to explain better, but in redis there is a mapping between apps and docker nodes.\nLook inside redis db, it's simple to understand the structure.\nI had issue with mapping triggering the same error as your.\nDid you add or remove docker nodes recently?\nI think that tsuru is unable to choose the proper docker node probably due to a missing association in redis.\n. LGTM but actually I don't have mine to double check.\n. For the 1, i'll try to fix, but I don't know how to do. Let me check in tsuru code...\nFor the 2, docker:memory is not mandatory, actually I'm not using it but honestly, I don't think will be users that allows all container to use the whole ram with no restrictions.\n. Done, could you please check.\nIs GuessingCommand the only way to use optional arguments from CLI ?\n. Added support for maximum configurable memory.\nConfiguration changes:\ndocker:\n   memory: 256\n   max-allowed-memory: 512\n   allow-memory-set: true\nif docker:max-allowed-memory is set, customers wont be able to request more than max-allowed-memoryMB:\n$ /tmp/tsuru app-create mem2 php --memory 256\nError: Invalid memory size. You cannot request more than 128 MB.\n. Swap is defined in app.go#58 but is not used.\nProbably the best way to use swap is by adding support for service plan in tsuru, defining cpu, memory and swap limits at the same time\nThis PR is a quick fix that allows to set memory so that I can try some metrics and scaling capability.\nIf you want, after merge I can do a new PR by adding support to swap but I don't know how useful will be.\n. Yes. Can you tell me how to execute just tsuru tests without recopile everything? \nI don't have a full dev environment, for example i'm missing godep\n. Can you write this test? I'm unable to reproduce a full dev environment and pass test because your GH repository is hardcoded everywhere that makes impossible to use my GH.\nI've made tons of symlinks trying to bypass this but is not a good way.\nActually is impossible to fork and build tsuru with go get or make the only way to build is manually with go build -o /tmp/tsr ./cmd/tsr after symlinking globocom/tsuru to myuser/tsuru\nObviously, is no good.\n. Isn't this the test you are asking for?\nhttps://github.com/globocom/tsuru/blob/master/api/auth_test.go#L236\n. Fixed can you confirm ?\n. If you remove hipache for gorouter, please evaluate removal of redis replacing it with https://github.com/coreos/etcd\n. For dependencies : removing hipache would also remove redis requirement and etcd, written in go, would be a perfect replacement as key/value store and message queue.\n. Missing config is related to #758 \n. Everywhere in tsuru app url is called ip.\nActually this PR expose public url as ip, but I think would be better to expose as public_url\nLet me know.\n. Well, actually Provison.Addr is working as expected even before first deploy because Provisoner.Addr is calling Router.Addr and Router.Addr makes address from appName and hipache:domain\nIt think will be safe to use Addr even before deploy\n. Changed in which situations?\nThis PR doens't save on database, app.Ip is set just before return and after the pipeline (where save is made, I think)\n. Which tests? This doesn't add features, I've already changed the existing test to check for app.ip in expected output on testcreateapp\n. There is: https://github.com/guestisp/tsuru/blob/fix-724-return-public-url-after-app-create/api/app_test.go#L440\n. Exactly, but how do you generate/store the ssh key needed by git/gandalf in Drone ?\n. Perfect! I didn't know that\n. Ok and this allow an easier integration with many other systems, as you don't need to generate and store a keypair but just save a token. (it also remove git requirement for the CI server)\n. Do you have any draft for this implementation?\nWe are developing our oAuth system and probably best way to integrate in tsuru is to delegate token generation to oAuth server. On requests, tsuru will asks oAuth for a token verify: POST https://our.oauth.server/oauth/verify_token?access_token=ffffffffffff\nverify_token reply with a json with user datas (user_id, username, firstname, etc etc). Something like Facebook /me endpoint.\nBut how does tsuru map oauth userid inside mongodb?\n. So, if I understood properly, you will proxy auth request to a remote oauth server, if set in config, right? Then tsuru just save the generated token somewhere.\nThis is good, but how do you manage the mapping between generated token and the real user_id? Will you use a /validate endpoint from the oauth server that will reply with user_id ?\nhttps://developer.github.com/v3/oauth_authorizations/#check-an-authorization\nActually we are using a PHP oAuth server with many APIs made by us in front of it to allow token creation/deletation (mostly, in a identical way as github)\n. if you use github auth you force customers to use github for sign in.\nWhy not using the oauth resource owner password workflow that is much the same as github does with authentications api (in fact, I don't understand why github created a different authentication schema to do the same thing as oauth)\nBy the way, suggested workflow would be authorization workflow, where users need to declare the app (tsuru-client or anything else), get a client_id and client_secret and use that on CLI. It could be tricky, but is the most secure way.\n. web flow is the safest but is not usable in tsuru client without manual users configuration (they should manually add a new application to github, get id and secret and add these to tsuru client). It's tricky but safe.\nThe 'non web' flow is based on basic auth but is not safe as web flow because users must use auth info (user+pass) with tsuru client. This is exactly the kind of thing that oAuth is supposed to avoid: disclosure of auth data to each client application.\n. A better way and safer way is to use the full oauth workflow like google does on App Engine:\nhttps://console.developers.google.com/start/appengine\nUsers need to login from google console with gcloud auth login\nThis will spawn a very simple webserver listening on http://localhost:8085 for oauth reply and at the same time, will open a browser window pointing to Google oauth server.\nThis will use the full oauth workflow with no need to ask for user credential.\nI'm testing something similiar in our custom CLI. Porting that in Go should not be too hard.\n. It works flawlessly and user/pass are never asked by the CLI\n. +1\nmove-container [--all | --regex ] destination\n. Yes by with my suggestion you can use the same command to move all containers or just the ones marching a regex.\nIt's the same thing but more flexible\n. tsr[883]: Error handling \"regenerate-apprc\" for the app \"blog\": all units must be started. is expected.\napprc is generated after the first successful deploy.\nBased on http://pastebin.com/raw.php?i=1cyt6cQc, you are missing some vars needed by gandalf to clone the repository.\nOn tsuru api server: tsr token\nThen on gandalf:\necho \"export TSURU_TOKEN=xxxxxx\" | sudo tee /home/git/.bash_profile\necho \"export TSURU_HOST=yyyyyy\" | sudo tee /home/git/.bash_profile\nreplace xxxxxx with the generated token.\nreplace yyyyyy with full api url (http://..........:8080)\nAlso, try adding some \"echo\" to the post-receive hooks. Seems to be ignored by your push. Output is too short.\n. Did you chmod +x the hook?\nCould you post output of ls -la /home/git/bare-template/hooks/post-receive and the same for the hook automatically copied in repository ?\nKeep in mind that you are using a wrong version PHP platform. \nMine version is not compatible with actual tsuru version and is just a proof of concept.\nThere is an issue in https://raw.githubusercontent.com/flaviamissi/basebuilder/master/php/Dockerfile pointing to my repo. This is not good.\nRemove all PHP images from your docker node and if you wanna try, follow this:\nmkdir /tmp/php\ncd /tmp/php\nwget https://raw.githubusercontent.com/flaviamissi/basebuilder/master/php/Dockerfile -O Dockerfile\nsed -i 's/guestisp/tsuru/g' Dockerfile\ndocker build -no-cache -t tsuru/php .\nPython platform seems good.\n. Hooks should be automatically copied by Gandalf in \n/var/lib/gandalf/repositories/blog.git/hooks\nTry to manually copy it from the bare repository to /var/lib/gandalf/repositories/blog.git/hooks\n. Can I see your gandalf.conf ?\n$ cat /etc/gandalf.conf\n. Try adding\ntemplate: /home/git/bare-template under bare node.\n. You are right, template location is mandatory for tsuru use but not for Gandalf itself\nI'll open an issue for this.\nEDIT: it's not a gandalf issue. git:bare:template should be wrote on tsuru docs and not forced on gandalf.\n. Doing this results in 2 different way to configure the same thing.\nYou have to manually configure gandalf.conf and after that, configure again via api.\nIt's much easier to configure everything in gandalf.conf and write it on docs.\nA better way could be pass hooks directly from trsuru, when creating repository, in this case, tsuru will automatically configure the repository for proper use, setting hooks and everything else is needed by tsuru itself. For example you could pass a simple tarball in https://github.com/tsuru/gandalf/blob/master/webserver/main.go#L42 api.NewRepository. Gandalf check if there is a tar posted and it will extract it to the newly created repo. In this case, you can share the same gandalf installation with or without tsuru apps.\nNon-tsuru repos will be managed by gandalf as usual. \nTsuru repos will be automatically configure by tsuru via tar posted through api.\n. I had tons of issue with mysqlapi service, most of them caused by syncdb command not executed properly.\nI'm unable to help you more than this but I'm pretty sure that your python service is respawning frequently. Try to check circus logs.\n. Also, you don't need to replace guestisp with sed anymore, the issue was fixed.\n. Which error are you getting ?\nTry: tsuru run -a blog2 'cat ../apprc'\n. try to hardcode values in wp-config.php with no use of getenv, just as test.\n. This means that you have wrote a wrong host in wp-config.php\n. It should. Mysqlapi bind each user to each app ip.\n. I think it's a bug introduced by this : https://github.com/tsuru/mysqlapi/commit/8b5179e38e884b8194505a42035f1953ec43c235\nI'll double check tomorrow but that settings wasn't present when I've tried mysqlapi with success.\n. Try using the real ip and not 127.0.0.1 when setting docker nodes is tsuru.conf\n. +1 for \"clone\" instead \"fork\" but I don't understand how do you think to use the swap feature.\nAre you thinking about swapping between two environments, for example, to bring in production the cloned environment ? It would be nice, but how do you manage changes to services, like dbs?\n. Sounds good.\n. any news on this ?. Which kind of help do you need?. I can try to work on this in my spare time (please remember that I'm not a Go programmer) but i need to know where and how to fecth the current deployed app and not the gitrepository.\nMaybe some of code used for rebalancing could be used? Rebalance should move the running app with any uploaded files and not using the git repo. Are you referring to environments with multiple tsuru api server running in parallel in load balancing ? How many resources are needed by tsuru api server to justify a loadbalancing?\nI think that an active-passive setup is much more common, actually, and in this case you don't need any external locking.\n. Sure, but I don't think that, right now, someone is using Tsuru in production with thousands of users.\nThere are still many issues to fix before a production-ready and large scale environment.\nBy the way, why not directly using Mongo for locking purposes? AFAIK mongo support a write lock on database level.\n. You can have high availability with an active-passive setup without any locking issue.\n. Which mutex? In a active-passive environment you don't use semaphores, locks or something similiar. Only one instance is running, so there is no concurrency and thus no requirements for lock capability.\nBTW, you would have the same issue in a standalone system. What will happens if the active (and only) instance goes down? When you bring it up (manually) again, the mutex is still locked ? That's the same.\n. Ok, now it's clear.\n. +100 :) this also removes the need of ssh agent. On docker node you will need just docker with no tsuru dependances.\n. In the same was as memory limit?\nI'll do this today.\n. Ok.\n. Can someone test my PR ? It should work.\nunit tests not run, i'm still having issue with them\n. Seems to work properly, i've tried many settings from both tsuru.conf and cli.\n. Actually, this:\n```\ngithub.com/globocom/tsuru/testing\n../../go/src/github.com/globocom/tsuru/testing/setup.go:10: imported and not used: \"github.com/tsuru/gandalf/testing\"\n../../go/src/github.com/globocom/tsuru/testing/setup.go:82: undefined: testing\nFAIL    _/home/ale/GIT/tsuru/cmd/tsr [build failed]\n```\nbut previously I had many other issue, i'll open a new issue here on github next time it happens\n. Working on this.\n. Fixed\n. GREAT!\nWill this build the new image on current server and push it back to the central repository?\n. +1\n. Related to this, segregate scheduler should also be able to detect rack placement for each server to  automatically use as much rack as possible.\nLet's assume 4 docker nodes in 2 rack. You'll have 3 bodes in rack 1 and one node in rack 2\nCustomers want to create an app with 3 units.\nActually there is a chance that all units would be created all on nodes in rack1\nScheduler should be able to detect this and automatically place at least 1 unit in rack2, for redundancy.\nSomething like ceph's crushmap.\n. FYI: http://ceph.com/docs/master/rados/operations/crush-map/\nas workaround we can use virtual instances for each docker servers and manage the server placement from the hypervisor.\nA node failure will automatically recreate docker server on a new node and tsuru automatically creates the loosed units, right?\nBut best way is to make tsuru aware of network topology.\n. Which target did you set with tsuru client?\nSeems that you are trying to run commands through hipache and not through api\n. Ok now it's clear\n. Sure.\n. Sure.\n. Why it's a pain?\nIs easier to write in json than yaml as you don't have to double check indentation and so on.\n. Exactly.\nWith yaml a wrong indentation could work but with unexpected results. This is no good in a platform configuration file. You could easily make destructive operation due to a missing space or tabulation.\nIn json any error would invalidate the whole file thus you can't have unexpected results.\n. This would be solved by supporting only buildpacks and not platform images through basebuilder:\nhttps://github.com/tsuru/basebuilder/issues/61\nwith buildpack this issue will not be present, because on each deploy, the whole platform is built.\n. +10!\nThis could be better:\nenv:\n  - MY_VAR_ON_ALL_ENVS: 3\n  prod:\n    - MAX_PROCS: 5\n    - WHATEVER_VAR: 2\n  dev:\n    - MAX_PROCS: 1\n    - WHATEVER_VAR: 1\nno default node. Default envs are placed directly under env node.\n. +1\n06/ott/2014 ha scritto:\n\ncurrently, the tsuru api has an endpoint to list all deploys. The idea\nis create an endpoint that list deploy by app and enable the deploy\ndetails to non-admin users.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/tsuru/tsuru/issues/939\n. Any example on how to use this?\nWhy not using oAuth when generating a shared key ?\n. On 06/11/2014 16:39, Magno Torres wrote:\nWould be great to have a better healthcheck for tsuru api to analyze all\ncomponents necessary for the correct work of tsuru like gandalf, git\ndaemon, registry, mongo, redis, swift, IaaS, etc.\nIt would be useful for people starting with tsuru to find which service\nis missing from what is needed to the api (e.g. try\ntsuruapi.yourcompany.com/healthcheck?check=all before open a issue)\n\n+1\n\nCorbelli Alessandro\nCTO\nGUEST.it s.r.l.\nViale Giulio Cesare 25/A\n47838 - Riccione (RN)\ntel: +39.0541649292\nfax: +39.0541664611\nalessandro.corbelli@guest.it\nhttp://www.guest.it\n. I had similiar issue in the past.\nTsuru should be more verbose on this kind of errors.\nadmins should know which node is failing.\nObviously this should be wrote on a logfile and\nnot on console. Customers shouldn't know which\nnode is having trouble.\nIl 07/11/2014 20:44, Francisco Souza ha scritto:\n\nHey @msabramo https://github.com/msabramo. Yes, it is one of the\nDocker host, I'm sorry tsuru doesn't provide which node failed, we\nshould definitely improve it.\nAre you able to track down which node is failing?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/tsuru/tsuru/issues/973#issuecomment-62200977.\n. Which error ?\n. Seems that some changes in Docker provisoner broke my SharedFS implementation.\nActually i'm unable to develop on tsuru due to busy work in my company, I hope some guys from Globo could fix this.\n. I'm talking about the tsuru connection to docker, not docker itself.\nSomething here: https://github.com/tsuru/tsuru/tree/master/provision/docker\n. So, there is no issue with Shared FS? I'm asking this because sharedfs feature was added by me and i would like to know if is creating troubles.\n. Thank you. Great news.\n. Exactly.\n. Interesting reading.\nIMHO, that implementation already exists in tsuru with SharedFS capability as per #734 \n. Pretty strange, if sharedfs implementation is still the one made by me, i was able to use it properly and test with a couple of wordpress sites.\n. I'm too busy with my primary employment, i'm not able to work on tsuru in the short time\n. +1 for a flag.\n. You could use etcd if you need a shared key/value store between servers \n. +1. Here there is something usefull for Proxmox: https://github.com/joernott/go-proxmox\n. I don't know, i'm still waiting for some test hardware to use with Proxmox.\n\nWhere did you find the method CreateQemuVM  ?\n. Just for reference, proxmox api docs is here: http://pve.proxmox.com/pve-docs/api-viewer/\n. For opennebula there is a Go client here: https://github.com/megamsys/opennebula-go\n. I have a working Proxmox cluster if you need some tests\n. I understand, but native integration is easier to use for users and doesn't require an additional abstraction level to maange in case of issues.\nOpenNebula is one of the most used private cloud software out there, like OpenStack, native support would be great, much more than DigitalOcean, IMHO.\nDigitalOcean is a VPS provider, that could be used via Docker Machine, but full-iaas like OpenNebula or OpenStack should be native in tsuru, I think.. Any update about this ?. Thank you. Which version of tsuru client? Because:\n```\n$ tsuru version\ntsuru version 1.0.1.\n$ tsuru install\ntsuru: \"install\" is not a tsuru command. See \"tsuru help\".\nDid you mean?\n    plugin-install\n``\n. I had to build from source. Now with1.1.0-rc1.` the installer is running.\n. I've installed the client from ubuntu PPA but they are not updated:\n$ dpkg -l | grep tsuru\nii  tsuru-client                                                1.0.1-0~xenial1                                             amd64        tsuru is the command line interface for the tsuru server\n. https://launchpad.net/~tsuru/+archive/ubuntu/ppa\nOnly 1.0.1 available\n. Is very, very slow.\nSometimes tsuru api doesn't start, i have to uninstall and reinstall again\nSometime the python platform doesn't download properly, it's the 7th time that i reinstall from scratch\nI don't have any connection issue and I'm using a quadcore with ssd as my laptop\n. Currently, python image was downloaded, but the installer hanged immediatly after without logging anything.\n. It seem waiting for something....\n. Cool. I think you should include docs changes in this PR so that when merged, docs are updated automatically.\n. Non exactly. In this way, you create new docker nodes. I'm talking about scaling the existing node, not adding a new one.\nOn some IaaS (AWS or Google), add ram to an existing docker node is cheaper than spin up a new node.\nYou could add an hard-limit, something like 64GB. If the current docker node as < 64GB set, you add more ram to the existing node. When you reach the 64GB, you can create a new node.\n64GB is just an example. You could evaluate multiple data like memory, total containers running and so on.\n. Sorry for the delay\nAdding new nodes with increased capacity, migrate all containers on it and removing the older one could be ok.. I've asked for this some hours ago in gitter without knowing the existance of this issue \nIt's a very useful feature, if not mandatory, for security reasons. Currently would be impossible to update Apache or nginx (as example) without forcing all users to push the app again.. seems that someone is unable to fetch the IP address:\n$ head .tsuru/installs/tsuru/machines/mytest-test-2/config.json \n{\n    \"ConfigVersion\": 3,\n    \"Driver\": {\n        \"IPAddress\": \"\",\n        \"MachineName\": \"mytest-test-2\",\n        \"SSHUser\": \"docker-user\",\n        \"SSHPort\": 22,\n        \"SSHKeyPath\": \"/home/x/.tsuru/installs/tsuru/machines/mytest-test-2/id_rsa\",\n        \"StorePath\": \"/home/x/.tsuru/installs/tsuru\",\n        \"SwarmMaster\": false,\nIPAddress is empty. anyone?. Any update?. Trying right now... let's see.... It doesn't work:\n```\nError: Error bootstrapping tsuru: failed to create node: Instructions:\nDockerMachine IaaS required params:\n  driver=                         Driver to be used by docker machine. Can be set on the IaaS configuration.\nOptional params:\n  name=                             Hostname for the created machine\n  docker-install-url= Remote script to be used for docker installation. Defaults to: http://get.docker.com. Can be set on the IaaS configuration.\n  insecure-registry=   Registry to be added as insecure-registry to the docker engine. Can be set on the IaaS configuration.\n  docker-flags=              Arbitrary docker engine flags. Can be set on the IaaS configuration.\n: multiple errors reported (2):\nerror #0: Error with pre-create check: \"Project with ID \\\"myproject-test\\\" not found. googleapi: Error 403: Insufficient Permission, insufficientPermissions\"\nfailed to create host\n```\nhosts:\n  core:\n    size: 1\n    driver:\n       options:\n          google-zone: europe-west1-d\n  apps:\n    size: 3\n    dedicated: true\n    driver:\n       options:\n          google-zone: [europe-west1-d, us-east1-d, us-central1-f]\n          google-machine-type: n1-standard-2\ndriver:\n  name: google\n  options:\n    google-project: myproject-test\n    google-machine-type: n1-standard-1\ncomponents:\n    tsuru:\n        version: latest. I've not configured any google credentials. The whole tsuru.cnf file was posted above and i've not configured anything else.\n[\n    {\n        \"Id\": \"38b9cfe00866474b5b49a88c58018b440e22546a9013ca2b7f55b0b5467f981c\",\n        \"Created\": \"2016-12-07T23:31:04.073480243Z\",\n        \"Path\": \"/bin/tsurud\",\n        \"Args\": [\n            \"api\"\n        ],\n        \"State\": {\n            \"Status\": \"running\",\n            \"Running\": true,\n            \"Paused\": false,\n            \"Restarting\": false,\n            \"OOMKilled\": false,\n            \"Dead\": false,\n            \"Pid\": 25529,\n            \"ExitCode\": 0,\n            \"Error\": \"\",\n            \"StartedAt\": \"2016-12-07T23:31:04.627385619Z\",\n            \"FinishedAt\": \"0001-01-01T00:00:00Z\"\n        },\n        \"Image\": \"sha256:7b08cf174c8542095e86765688cfe4f5743ee6603d94ee778b90047ebea6a8c6\",\n        \"ResolvConfPath\": \"/var/lib/docker/containers/38b9cfe00866474b5b49a88c58018b440e22546a9013ca2b7f55b0b5467f981c/resolv.conf\",\n        \"HostnamePath\": \"/var/lib/docker/containers/38b9cfe00866474b5b49a88c58018b440e22546a9013ca2b7f55b0b5467f981c/hostname\",\n        \"HostsPath\": \"/var/lib/docker/containers/38b9cfe00866474b5b49a88c58018b440e22546a9013ca2b7f55b0b5467f981c/hosts\",\n        \"LogPath\": \"/var/lib/docker/containers/38b9cfe00866474b5b49a88c58018b440e22546a9013ca2b7f55b0b5467f981c/38b9cfe00866474b5b49a88c58018b440e22546a9013ca2b7f55b0b5467f981c-json.log\",\n        \"Name\": \"/tsuru.1.5kk75ea9fqelo9wq9nz58vj6n\",\n        \"RestartCount\": 0,\n        \"Driver\": \"aufs\",\n        \"MountLabel\": \"\",\n        \"ProcessLabel\": \"\",\n        \"AppArmorProfile\": \"\",\n        \"ExecIDs\": null,\n        \"HostConfig\": {\n            \"Binds\": [\n                \"/etc/docker/certs.d:/certs:ro\"\n            ],\n            \"ContainerIDFile\": \"\",\n            \"LogConfig\": {\n                \"Type\": \"json-file\",\n                \"Config\": {}\n            },\n            \"NetworkMode\": \"default\",\n            \"PortBindings\": null,\n            \"RestartPolicy\": {\n                \"Name\": \"\",\n                \"MaximumRetryCount\": 0\n            },\n            \"AutoRemove\": false,\n            \"VolumeDriver\": \"\",\n            \"VolumesFrom\": null,\n            \"CapAdd\": null,\n            \"CapDrop\": null,\n            \"Dns\": null,\n            \"DnsOptions\": null,\n            \"DnsSearch\": null,\n            \"ExtraHosts\": null,\n            \"GroupAdd\": null,\n            \"IpcMode\": \"\",\n            \"Cgroup\": \"\",\n            \"Links\": null,\n            \"OomScoreAdj\": 0,\n            \"PidMode\": \"\",\n            \"Privileged\": false,\n            \"PublishAllPorts\": false,\n            \"ReadonlyRootfs\": false,\n            \"SecurityOpt\": null,\n            \"UTSMode\": \"\",\n            \"UsernsMode\": \"\",\n            \"ShmSize\": 67108864,\n            \"Runtime\": \"runc\",\n            \"ConsoleSize\": [\n                0,\n                0\n            ],\n            \"Isolation\": \"\",\n            \"CpuShares\": 0,\n            \"Memory\": 0,\n            \"CgroupParent\": \"\",\n            \"BlkioWeight\": 0,\n            \"BlkioWeightDevice\": null,\n            \"BlkioDeviceReadBps\": null,\n            \"BlkioDeviceWriteBps\": null,\n            \"BlkioDeviceReadIOps\": null,\n            \"BlkioDeviceWriteIOps\": null,\n            \"CpuPeriod\": 0,\n            \"CpuQuota\": 0,\n            \"CpusetCpus\": \"\",\n            \"CpusetMems\": \"\",\n            \"Devices\": null,\n            \"DiskQuota\": 0,\n            \"KernelMemory\": 0,\n            \"MemoryReservation\": 0,\n            \"MemorySwap\": 0,\n            \"MemorySwappiness\": -1,\n            \"OomKillDisable\": false,\n            \"PidsLimit\": 0,\n            \"Ulimits\": null,\n            \"CpuCount\": 0,\n            \"CpuPercent\": 0,\n            \"IOMaximumIOps\": 0,\n            \"IOMaximumBandwidth\": 0\n        },\n        \"GraphDriver\": {\n            \"Name\": \"aufs\",\n            \"Data\": null\n        },\n        \"Mounts\": [\n            {\n                \"Source\": \"/etc/docker/certs.d\",\n                \"Destination\": \"/certs\",\n                \"Mode\": \"ro\",\n                \"RW\": false,\n                \"Propagation\": \"rprivate\"\n            }\n        ],\n        \"Config\": {\n            \"Hostname\": \"38b9cfe00866\",\n            \"Domainname\": \"\",\n            \"User\": \"\",\n            \"AttachStdin\": false,\n            \"AttachStdout\": false,\n            \"AttachStderr\": false,\n            \"ExposedPorts\": {\n                \"8080/tcp\": {}\n            },\n            \"Tty\": false,\n            \"OpenStdin\": false,\n            \"StdinOnce\": false,\n            \"Env\": [\n                \"MONGODB_ADDR=mongo\",\n                \"MONGODB_PORT=27017\",\n                \"REDIS_ADDR=redis\",\n                \"REDIS_PORT=6379\",\n                \"HIPACHE_DOMAIN=1.1.1.1.nip.io\",\n                \"REGISTRY_ADDR=10.132.0.2\",\n                \"REGISTRY_PORT=5000\",\n                \"TSURU_ADDR=http://1.1.1.1\",\n                \"TSURU_PORT=8080\",\n                \"IAAS_CONF={\\\"dockermachine\\\":{\\\"ca-path\\\":\\\"/certs\\\",\\\"driver\\\":{\\\"name\\\":\\\"google\\\",\\\"options\\\":{\\\"google-machine-type\\\":\\\"n1-standard-1\\\",\\\"google-project\\\":\\\"myproject-test\\\"}}}}\",\n                \"PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\"\n            ],\n            \"Cmd\": null,\n            \"Image\": \"tsuru/api:latest\",\n            \"Volumes\": null,\n            \"WorkingDir\": \"\",\n            \"Entrypoint\": [\n                \"/bin/tsurud\",\n                \"api\"\n            ],\n            \"OnBuild\": null,\n            \"Labels\": {\n                \"com.docker.swarm.node.id\": \"00dvjfhovzg94gg61r1i9q3id\",\n                \"com.docker.swarm.service.id\": \"5ai8k0eb2xn6ofv8t3bs98yyh\",\n                \"com.docker.swarm.service.name\": \"tsuru\",\n                \"com.docker.swarm.task\": \"\",\n                \"com.docker.swarm.task.id\": \"5kk75ea9fqelo9wq9nz58vj6n\",\n                \"com.docker.swarm.task.name\": \"tsuru.1\"\n            }\n        },\n        \"NetworkSettings\": {\n            \"Bridge\": \"\",\n            \"SandboxID\": \"adacdd2f167b8ec226ef5944cf3cd4a5b8a32998cbe52a98719986f0d1ea648b\",\n            \"HairpinMode\": false,\n            \"LinkLocalIPv6Address\": \"\",\n            \"LinkLocalIPv6PrefixLen\": 0,\n            \"Ports\": {\n                \"8080/tcp\": null\n            },\n            \"SandboxKey\": \"/var/run/docker/netns/adacdd2f167b\",\n            \"SecondaryIPAddresses\": null,\n            \"SecondaryIPv6Addresses\": null,\n            \"EndpointID\": \"\",\n            \"Gateway\": \"\",\n            \"GlobalIPv6Address\": \"\",\n            \"GlobalIPv6PrefixLen\": 0,\n            \"IPAddress\": \"\",\n            \"IPPrefixLen\": 0,\n            \"IPv6Gateway\": \"\",\n            \"MacAddress\": \"\",\n            \"Networks\": {\n                \"ingress\": {\n                    \"IPAMConfig\": {\n                        \"IPv4Address\": \"10.255.0.9\"\n                    },\n                    \"Links\": null,\n                    \"Aliases\": [\n                        \"38b9cfe00866\"\n                    ],\n                    \"NetworkID\": \"19qhk3jxcrx1oaclr6xvny9uy\",\n                    \"EndpointID\": \"5e446740e0e6301b9eb0b092010b3b9876cb11057e52584356e0f9df86453b6e\",\n                    \"Gateway\": \"\",\n                    \"IPAddress\": \"10.255.0.9\",\n                    \"IPPrefixLen\": 16,\n                    \"IPv6Gateway\": \"\",\n                    \"GlobalIPv6Address\": \"\",\n                    \"GlobalIPv6PrefixLen\": 0,\n                    \"MacAddress\": \"02:42:0a:ff:00:09\"\n                },\n                \"tsuru\": {\n                    \"IPAMConfig\": {\n                        \"IPv4Address\": \"10.0.9.11\"\n                    },\n                    \"Links\": null,\n                    \"Aliases\": [\n                        \"38b9cfe00866\"\n                    ],\n                    \"NetworkID\": \"1rqs26rvcad0itugcya0rtdqf\",\n                    \"EndpointID\": \"06e658fcf8437a6363579686acd3155218b3401cdd548fe2788736706f1b4367\",\n                    \"Gateway\": \"\",\n                    \"IPAddress\": \"10.0.9.11\",\n                    \"IPPrefixLen\": 24,\n                    \"IPv6Gateway\": \"\",\n                    \"GlobalIPv6Address\": \"\",\n                    \"GlobalIPv6PrefixLen\": 0,\n                    \"MacAddress\": \"02:42:0a:00:09:0b\"\n                }\n            }\n        }\n    }\n]. So, currently, is not possible to use docker-machine with Google ?. Another (maybe much easier) solution could be to copy the local json file used by docker-machine (it should be here: $HOME/.config/gcloud/application_default_credentials.json to the API controller\nEDIT: yes, I can confirm that auth credential are located here: $HOME/.config/gcloud/application_default_credentials.json\nYou can copy this file somewhere on the api container and set GOOGLE_APPLICATION_CREDENTIALS env variable pointing to the file \nThis will solve the install bug, but what happens in case of autoscaling ? These credentials are based on an oAuth token, that would expire and must be renewed. You can't use this from the api container without refreshing it\nI think would be the same with Amazon via docker-machine. How do you manage the token refresh ?. I'm new on GCE and I'm not sure on how to use the metadata server.\nProbably, making tsuru able to refresh the oAuth token would be the best thing.. Anyway, docker-machine is already able to use the metadata server as source for credential, but in my case this doesn't work, so something else should be configured, i don't think it's \"plug&play\"\nAnyway, let me try to check if the following is returning the access token like wrote on google docs\ncurl \"http://metadata.google.internal/computeMetadata/v1/instance/service-accounts/default/token\" \\\n-H \"Metadata-Flavor: Google\". It worked.\n{\"access_token\":\"x\",\"expires_in\":3599,\"token_type\":\"Bearer\"}\nbut tsuru is unable to add nodes. It worked:\n{\"access_token\":\"x\",\"expires_in\":3599,\"token_type\":\"Bearer\"}. This is strange. From Docker I'm able to get the token but tsuru isn't able to create nodes . Should I configure the iaas in tsuru.conf ? Because I've not set that, the tsuru.conf is created automatically by the installer.. > I would try installing docker-machine on a vm at gce and try creating another machine from it.\nIs what i'm trying to do right now. I've installed tsuru from Ubuntu but there isn't any dockermachine support, so i'm trying to build from scratch. tsurud running from sources, but i'm still hitting the same issue:\nerror #0: Error with pre-create check: \"Project with ID \\\"x\\\" not found. googleapi: Error 403: Insufficient Permission, insufficientPermissions\"\nbut:\n$ curl \"http://metadata.google.internal/computeMetadata/v1/instance/service-accounts/default/token\" -H \"Metadata-Flavor: Google\" && echo\n{\"access_token\":\"x\",\"expires_in\":3461,\"token_type\":\"Bearer\"}\nSo, the api controller (this time is not a docker container) is able to access to metadata server, but docker-machine don't. I'm sorry for this, i've missed the update.\nI'll try ASAP. Why not packing the app via git-archive ? This will skip the .git/ directory and any other ignored files.\nYou can also add additional files to be ignored in the export by \"tagging\" them with export-ignore git attribute https://git-scm.com/docs/gitattributes. I'm sorry but i've missed your update. I've replied on the other issue.. +100 for this. I'm not interested in swarm, but in plain docker/docker-machine support.\nDo you have plan to deprecate native docker support ?. > We have no plans to deprecate native docker support. On the other hand, we also have no plans to add more features to this provisioner as they would demand lots of work.\nSure, but supporting only kubernetes, makes tsuru much similiar to any other PaaS out there (openshift, deis, ...) and increase (a lot) the hardware requirements for a production environment (kuberneted, needs tons of servers/virtualmachines to do their best). Too many moving parts, IMHO. Any help ?. I've looked inside the VM and there isn't any container running tsuru (don't know if tsuru is running in a container). Any update on this?. It doesn't work. virtualbox-boot2docker-url seems to be ignored.. Sorry, my mistake. the install-config.yml must be specified in command line with -c argument, I thought it was read as default..... It will set Memory to 0 that means unlimited.\n0_1024_1024 is always 0.\n. +1\n. ",
    "evandroflores": "Issue implemented on branch targets\n. ",
    "hfeeki": "Ok, no problem. I think we can use this vm to do more integration test.  @andrewsmedina  \"I would prefer to keep this out of tsuru repository and link it in tsuru's docs.\" \nThanks. If you have any question/suggestions , please tell me.  @andrewsmedina @flaviamissi @gauperes @fsouza \nNext I will provision abyss+django, etc.  And I very hope more documents about tsuru projects. \n. More feature needed: I think user name field is needed, thanks. \n. I think independent user-register command will give user better user experiences. Because the user just need fill in just email address(maybe plus user name) field, do not need to fill password. And if user need to chose a password in the first step, maybe he/she will forget it after he/she verified the email address. So I think user-register command is necessary.   @fsouza  \"I believe we can just change user-create so it requires email confirmation.\" \n. user-register: \n  input: user name(optional), user email\n  output: send a email with confirmation code to this address\nuser-create:\n  input: confirmation code , user name, user email, user password\nIn the user-register , on web ui, customer just need to fill one field.\n. Why not chose chef or puppet or ansible to do provision? Why  juju ?\n. Very glad to hear tsuru will support lxc. What is the project name? Can I get it in github ? \n. But If I not logged in , this cmd will execute then it will failed. \n. empty string will cause next problem: \n...\nFile \"/usr/lib/python2.7/json/__init__.py\", line 326, in loads\n    return _default_decoder.decode(s)\n  File \"/usr/lib/python2.7/json/decoder.py\", line 366, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/usr/lib/python2.7/json/decoder.py\", line 384, in raw_decode\n    raise ValueError(\"No JSON object could be decoded\")\nValueError: No JSON object could be decoded\n. Does error string will change from text message to json style error ? \n. 1 Maybe token file will be like this:  \nabc@aaa.com TOKEN1\ncde@bbb.com TOKEN2                                 \naac@ccc.com TOKEN3\n2 add a new file: .tsuru_current_user , it's only one line is: abc@aaa.com \n3 add a new cmd: current-user-set  \n4 username is needed again. \n. How to skip to create an IAM user and S3 bucket ? I just want to test tsuru . \n. Now the new error: \nError: Tsuru failed to create the app \"testapp\": Could not create git bare repository: exit status 128\n. ok, thanks.\n. Now , godep can not working. \n```\ngo get github.com/kr/godep \ngithub.com/kr/godep\n../../kr/godep/save.go:5: import /home/ubuntu/.go/pkg/linux_amd64/github.com/kr/fs.a: not a package file\n```\n```\ngodep restore ./...\nSorry, command-not-found has crashed! Please file a bug report at:\nhttps://bugs.launchpad.net/command-not-found/+filebug\nPlease include the following information with the report:\ncommand-not-found version: 0.2.44\n```\n. Now it  can not working. \n. The new error info: \n```\ngo get github.com/dotcloud/docker \ngithub.com/dotcloud/docker/graphdriver/devmapper\n38: error: 'dm_task_set_add_node' undeclared (first use in this function)\n38: error: 'dm_add_node_t' undeclared (first use in this function)\n```\n. The new error: \n```\n~$ go get -v github.com/globocom/tsuru/cmd/tsr\ngithub.com/globocom/tsuru/cmd/tsr\ngithub.com/globocom/tsuru/cmd/tsr\n/home/ubuntu/go/pkg/tool/linux_amd64/6l: running gcc failed: Cannot allocate memory\n```\n. what is \"distro\" ? \n. ubuntu 12.04 \n. ",
    "gauperes": "Hi,\nYes, we do have a web client for tsuru. You can find it here: https://github.com/globocom/abyss.\nIt still is an ongoing project and we expect to get back to it over the next months.\n. ",
    "isaiah": "After a lot of hacks I managed to get tsuru working, the documentation does need more work. One question I have for the git hooks is that how can the hook that run on the gandalf server get access to the environment variables like \"TSURU_TOKEN\" etc? If I'm right, those variables are only available inside the containers, in /home/application/apprc. Am I doing anything wrong here? I would like to help with the document, at the moment one surely cannot get it work by following the instructions.\n. Thanks for you expaination @fsouza , I am using docker to deploy a ruby application. Just pulled from master, found that the token and user are decoupled now.\n. Also #408 caused a lot of trouble on debugging this issue, when I tried to call the api manually.\n. Every time the we commit the image, the same repository name is used, so we only get the same number of images as apps. \nIMHO docker does it incrementally, the repository name is like a branch to git, and the image id is a revision, so it won't work if we remove the parent image. According to docker document:\nWhen you commit your container only the differences between the image the container \nwas created from and the current state of the container will be stored (as a diff).\nCorrect me if I am wrong.\n. ",
    "petry": "Please, look at a dictionary the definition of enhancement.\n. ",
    "jamesgraves": "I'd like to see the Elevator Pitch in one of the first paragraphs of the README just to say what is this software even for.\nPerhaps in another document like a FAQ, you could explain at least a little of the 'why' behind the creation of tsuru.  As I mentioned on HN, I'd want to know how it compares to the other PaaS offerings, and what specifically you are trying to fix that is currently difficult to do with those.  Is it: ease of deployment, more robustness, less single points of failure, support for more application type, and so on.\n. ",
    "fullofcaffeine": "It's not entirely clear though, I would never use rails server (which defaults to webrick) to run a Rails app on a production/staging server. I think a better question would be:\n\"How to deploy a Rails/Rack app on Tsuru using Unicorn as the app server?\"\nThis would be much more useful, IMHO.\nCheers.\n. Thanks @fsouza. So if I understood it right, Tsuru's architecture is very similar to Heroku's, and one could potentially refer to Heroku's docs for reference? If so, this is very awesome :)\n. Cool, you guys are doing a great job with Tsuru. It just seems much more pragmatic and down-to-earth than the other similar solutions. I'm in the process of testing it now. I hate devops, and the though of having a quick way to deploy my apps without Heroku exorbitant prices is really appealing, also it's a great learning experience! Keep up the great work!\n. I'm currently using Chef to turn my devops tasks into code, and automate everything I can. It works great, but sometimes it's harder to generalize recipes, and if you want to go the \"apps on the same server\" route, it also becomes a bit clunkier (but perfectly possible). \nI'm wondering if Chef could be used as a provisioner in place of juju? This way, I could possibly reuse my cookbook.\n. ",
    "cezarsa": "Fixed by a75af809c0ddba4b8514e5ec32491384d10318e6 and some other commits with improvements in logs\n. We're using negroni default logger, however it isn't really useful since it doesn't include a timestamp for the requests. We should improve it.\n. As of 7b1262cb79c361bad5474f70b13b7b1a52344025 tsuru now uses the unit-agent if available at the platform image.\nNow the only thing the agent does is ensure apprc is created with the env vars and starting the app afterwards. However, it can evolve to something more sophisticated like automatically registering the new unit in tsuru, this could be useful when doing auto scale.\n. Unit agent is now used if available. Closing this.\n. An admin command called containers-rebalance was created. Docs at http://docs.tsuru.io/en/latest/apps/tsuru-admin/usage.html\n. This issue has been partially solved by @renanoliveira in 35a6f172e963bcf6350cd7a67735e22f73983e21. Now tsuru won't allow using the same app name as a platform name.\nDo you guys think we should still change how the app image name is generated?\n. Closing this issue, tsuru now has basic support for authenticating with an oauth server. Docs at http://docs.tsuru.io/en/latest/config.html#auth-oauth\nAny further discussions/features can be tracked with new issues.\n. The container-move admin command was created. Docs at http://docs.tsuru.io/en/latest/apps/tsuru-admin/usage.html\n. The containers-move admin command was created. Docs at http://docs.tsuru.io/en/latest/apps/tsuru-admin/usage.html\n. Commit cb9d0937844d6849807cd83f5790b4fe3d2244a5 deals with this issue. However it's not a perfect solution. If multiple units are being added to different apps and each request end up being handled by different tsuru-api servers a perfect distribution is not guaranteed.\nI think this scenario will not be very common for now, and we can just switch the lock mechanism to something external to the process (redis?) latter when and if this become a problem. What do you guys think?\n. Yeah, multiple tsuru api servers behind a load balancer.\nI'm not sure whether stress tests against the api were made. You may be right, but there's always the possibility of the api becoming a bottleneck with thousands of users.\n. Commits 80de7cb27bd1084f29fd7ccbc118e6910d442efa and 283e0fe9514dbb7abfc3071729ebf7a30c7902e5 handle this issue.\nFrom now on using beanstalkd as a queue is deprecated as it does not support pub/sub. It could be simulated with multiple tubes and some multiplexing code in the api but we've chosen not to go down this rabbit hole. Beanstalkd queue implementation will be removed in the future.\nIt makes sense to use redis as the only queue backend, lots of people use it, it's well supported and actively developed. Also, having only one officially supported backend means less code for us to maintain.\n. A better approach to this seem to be https://github.com/stretchr/graceful however it depends on API only available to Go 1.3+ (as described in https://code.google.com/p/go/issues/detail?id=4674)\nWhat do you think about requiring Go 1.3?\n. Commit 558f65091dc1803cb843928a71e1d0e0665ce050 address a part of this issue, it handles waiting for requests to finish and not listening for further connections.\nHowever we also need to:\n- [x] Stop healing and wait for current healings to finish;\n- [x] Stop queue processing and wait for current jobs to finish;\n- [x] Stop node auto scaling checks and wait for current scaling processes to finish;\n- [x] Stop log pub/sub connections to close log -f requests\n. Finished but forgot to reference issue in commits. :/\n. Thanks!!!\n. Yeah, I also think allowing only to remove platforms without any apps is the way to go.\n. Yep, the original idea is already working and any further improvements can be done in a different issue.\n. Closed by 28c27aa3251afaf87459bc3061c4925ae4ce9ed5\n. @jadsonlourenco Hi, could you try installing tsuru again with the following script and report any errors in the output:\ncurl -sL https://raw.github.com/tsuru/now/master/run.bash | bash\nThis script should create a working demo environment for Tsuru. It will also install the python platform and deploy the tsuru-dashboard project as a demonstration.\n. The library we're using (goauth2) already refreshes the token when it expires and a refresh_token is available.\nThe reasoning behind always calling info-url on every request it is to allow tsuru to detect tokens that were manually revoked by the user. \n. Fixed by 996c9679b1d7e4b9cdcf882547b1ce02717858ad\n. Fixed by cc563a4652c93ad73e3d0ba92c1b5a4b2877a9e9\n. Hi there. This have already been fixed on master and it will be released in the next version. Which version are you using?\n. Actually it won't move containers from one pool to another. What will\nhappen will be that some containers won't be moved at all, since the\nalgorithm won't be able to find a suitable destination (one in the same\npool) for some containers in crowded nodes.\nOn Jun 17, 2014 8:55 PM, \"Paulo Sousa\" notifications@github.com wrote:\n\nIt's a bug cause if you run rebalance today, tsuru will move containers\nfrom one segregated pool to another.\nPaulo Sousa\nEm 17/06/2014, \u00e0s 20:37, Andrews Medina notifications@github.com\nescreveu:\nI think that it is not a bug. Rebalance by cluster should be an option.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/tsuru/tsuru/issues/823#issuecomment-46379639.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/tsuru/tsuru/issues/823#issuecomment-46380897.\n. To reset it in the database you can run something similar to:\nmongo tsurudb --eval \"db.apps.update({name: 'appname'}, {\\$set: {lock: {}}})\"\n. @jonaskac We tracked down a common source of persistent locks when a deploy is aborted in the middle. We'll release it latter today in 0.6.1, master is also already fixed. \nWe'll probably also add a command to force remove a lock in tsuru-admin, this will help in other cases when the lock isn't released (hard crash in tsr, machine failure...)\n. Command added to tsuru-admin, tsuru/tsuru-admin@c7b27c662fa93823c349c31bac2366ea3a190c84\n. Thanks!!!\n. Done as of 5dc20765b9cd2c9e202aec3d58f13f70c12407ab\n. We tracked down a common source of persistent locks when a deploy is aborted in the middle. We'll release it latter today in 0.6.1, master is also already fixed. \nWe'll probably also add a command to force remove a lock in tsuru-admin, this will help in other cases when the lock isn't released (hard crash in tsr, machine failure...)\n. We've added the app-unlock command to tsuru-admin. It's already available on master tsuru/tsuru-admin@c7b27c662fa93823c349c31bac2366ea3a190c84\n. The app-unlock command is already available in the latest release of tsuru-admin. Automatically removing the locks won't be implemented since if the lock still exists, there's a chance we have some inconsistencies which should be verified before removing it.\n. Done in tsuru, tsuru-client, tsuru-admin, docker-cluster.\n. Done\n. This issue is fixed in master, restart policy is set to always when starting containers, and started units call /apps/{app}/units/register to fix routes.\n. We plan doing something like that in the near future, one possible problem is how to healthcheck worker applications which don't listen on any port.\n\nTo avoid the downtime for now, a simple solution is using the \"swap\" command. You create 2 apps in tsuru and deploy the updated code to app2, after it's working and responding well you simply call tsuru swap app1 app2. This will cause the routes to be swapped between the apps, and the updated app will start responding on the URL of the old app, now you can safely update the original app.\n. Yeah, something in the app.yaml is a good idea for configuring health checks.\nWe haven't implemented anything in regard to #647 yet, we're giving it some more time while we figure out if the added complexity is really worth it, configuring health checks is just one of the things that would get more complex, and we aim Tsuru to be as simple as possible.\nTo scale independently the idea is to still having multiple Tsuru apps. One trick (not very pretty) you can make to have only one source base with a single Procfile is having something like that in your Procfile:\nweb: bash -c \"[[ ! -z $WEB_APP ]] && web_command\"\nworker: bash -c \"[[ ! -z $WORKER_APP ]] && worker_command\"\nNow you'll call tsuru env-set WEB_APP=1 -a web_app and the same thing for the worker app, not very pretty, I told you, but a possible solution if separating the projects source base would be too complex.\n. Done in 64f81f2a776401b6b5dec5f681bab1a47639e950. This is now available in 0.7.0\n. Thanks!\n. Healing config options are described in http://docs.tsuru.io/en/master/reference/config.html#docker-healing-heal-nodes\nInspecting previous healing processes is possible using http://docs.tsuru.io/en/master/reference/tsuru-admin.html#docker-healing-list\n. From now own tsuru-unit-agent is responsible for parsing the yaml file.\nFor backward compatible reasons the load order of the yaml file is [\"tsuru.yaml\", \"tsuru.yml\", \"app.yaml\", \"app.yml\"].\n. Version 0.7.0 has been released \\o/\nRelease notes in http://docs.tsuru.io/en/latest/releases/tsr/0.7.0.html\n. You're right, the deployment process should report a better error message when the archive is not found. The problem seems to be that we're running curl in silent mode in the platform, I'll take a look at it. Thanks for keep trying tsuru :)\n. Sorry for that, I've just pushed a fix for it in tsuru/tsuru-unit-agent@f31046c174dcc721b227a59c145dc327e197adf9. You'll have to run a tsuru-admin platform-update on your platform to get this update though.\n. Closed by pull request #924 \n. Done\n. Plans are in. New commands plan-list, plan-create, plan-remove and app-create --plan added to docs.\n. This have been addressed in #929 and it will be available in 0.8.0 soon to be released.\n. Yes, we execute the same actions used during deploy. The health check will be called and the routes will only change if it's successful.\n. The origin of this error is most likely\nhttps://github.com/tsuru/docker-cluster/blob/master/cluster/image.go#L213\nSo, yeah, docker-cluster would be the place to fix it.\nWe could create a wrapping error with node information. More places in\ndocker cluster could probably benefit from similar error handling.\n. I think we should go even further. tsuru could support something like node templates, each template would have predefined values for any number of config options. This could be supported by a command like:\n```\n$ tsuru-admin node-template-add tpl1 iaas=ec2 image=myimage type=medium1\n$ tsuru-admin node-template-add tpl2 iaas=other image=otherimage type=large\nand then\n$ tsuru-admin docker-node-add template=tpl1\n$ tsuru-admin docker-node-add template=tpl2\n```\nThis would be useful for node auto scaling in the future, we could have some way to define that new nodes should be created using tpl1 and tpl2 and the scaler would try to keep the same number of nodes with each template. Not sure if this is a good idea yet.\nWould this solve your problem?\n. This was an oversight, every iaas provider should support user data, we'll take a look at it.\n. Back to brainstorm phase.\nTo support tcp/udp traffic we need a different IP per app. The initial idea was creating routers that would directly use either ELB for AWS deployments or Cloudstack Load Balancer API for Cloudstack deployments. \nThe problem is, neither ELB nor Cloudstack allow creating a load balancer that would balance to the same backend IP but on different ports. This puts a stop on our plan of balancing directly to docker containers.\nOne possible idea about how to overcome this is to create new virtualmachines acting as load balancers, in a similar approach to how it's done in https://github.com/tsuru/rpaas. But the overhead would probably be too big, and it might lead to a vast amount of underused virtualmachines.\nAny suggestions are welcome.\n. @dcarley You're right, calling router interface methods in the app package seems the cleanest way to go for this issue.\nThe reason the router is called by the provisioner today is because it's part of the deploy pipeline. This way, if adding new backends to the router fails for some reason, the pipeline will rollback the addition of new units and old units will remain working. I don't see a problem with both packages referencing the router.\n. Closed by tsuru/tsuru-admin@dea414ab6a7221733e71de57cd3f215d85c67576\n. Services don't necessarily run on containers. If you have an external service and simply want to expose it to your application containers you could use something like https://github.com/tsuru/eviaas (check it out, I've just added a nice readme to it) to export the information of the external services to the applications and let them connect directly instead of relying of localhost forwarding.\n. Closed by 18214aaac643c7f6d8546bf610eb8da1b37b825c and 8d4a8138c1acaf8ff999ab2c126920a3ccf54953\n. Thanks!\n. Hi, I manually applied this PR in 073ec31a999366252e922cdc09213fb010217807. Then I ended up moving things around a bit in b21bbaa51e7b7a8a6f0027515fa39a583bd56242.\nThis check now works for both tsr api and tsr token as the token command also needs a tsuru.conf file.\nThanks!\n. Good call @msabramo. It's definitely related to OOMs as we can see in https://travis-ci.org/tsuru/tsuru/jobs/46092093#L2702\n[10314713.731361] Out of memory in UB 197947879: OOM killed process 1852 (mongod) score 0 vm:3174284kB, rss:70808kB, swap:2168kB\n[10314821.568655] Out of memory in UB 197947879: OOM killed process 8832 (mysqld) score 0 vm:908892kB, rss:107020kB, swap:0kB\n[10314821.635923] Out of memory in UB 197947879: OOM killed process 9137 (sh) score 0 vm:4348kB, rss:672kB, swap:0kB\n[10314821.636752] Out of memory in UB 197947879: OOM killed process 9141 (sleep) score 0 vm:4252kB, rss:528kB, swap:0kB\nHowever I'm not sure about how to solve this. We could try killing some processes before starting the tests. We don't need mysqld running. Also setting GOMAXPROCS=1 might help.\n. I broke it again yesterday. Looks like another flaky test that doesn't\nbreak locally. I couldn't debug it long enough but at least it's happening\nacross all CIs, I'll fix it today.\n. Let's give it a try, thanks!\n. basically: tsuru/tsuru -> fsouza/go-dockerclient -> docker/docker -> logrus\n. Thanks!\n. This won't help as yaml entries are parsed as an unordered map.\nFrom the latest travis builds we can see that the problem is really related to processes being killed by lack of available memory.\n. Waiting for go-amz/amz#3 being merged. We'll also need to switch from go-amz v1 branch to v2 (or v2-dev) branch.\n. Seems like travis doesn't support \"-o\", could you try something like: top -b -n 1 | grep \"^ *[0-9]\" | sort -rn -k 6\nAlso, it would be useful to run the same commands at the end of the before_script section so we can see what are our initial conditions.\n. We don't need neither postgresql nor mysql, stopping them in before_script may help:\n- sudo /etc/init.d/postgresql stop\n- sudo /etc/init.d/mysql stop\n. As soon as 0.10.0 is released it will be possible to have two separate hipache routers in each location, the router will be part of the plan chosen when creating an application. You'll be able to have multiple hipache configurations in tsuru.conf. (I'll add documentation for this feature early next week)\nThis way something like this would be possible:\n```\nServer 1\nTsuru-server-api\nDocker registry\nDatabase (mongodb)\nServer A on Location 1\nHipache 1\nRedis 1\nDocker Server for Server A on Location 1\nServer B on Location 2\nHipache 2\nRedis 2\nDocker Server for Server B on Location 2\n```\nIn tsuru.conf you would have:\nrouters:\n  hipache1:\n    type: hipache\n    redis-server: redis1\n  hipache2:\n    type: hipache\n    redis-server: redis2\nNote that this still assumes that you have a single mongodb database, which of course could still use replica sets for HA.\n. @jblancett That's not what the change I described is about. We'll keep supporting hipache with redis master/slave configuration the same way it works today, and you'll never have to declare redis slave servers in tsuru.conf.\nThe new routers: config key was created for supporting multiple routers configurations. As a side effect, this allow us to have multiple routers of the same kind, and that's the scenario I tried to describe.\nHaving multiple completely independent hipache routers would not be a common configuration, but it could be useful if you want routers in geographically separated regions. Master/Slave replication would be quite expensive in this case, and that's where having multiple routers could be useful. In each entry inside the routers: key you have to declare only which is the master redis server for that router. \n. Thanks!\n. I'm okay with the idea of logging this information when starting the API. However, exposing cluster.Cluster in the Provisioner interface is not a good idea. We had other provisioners in the past, and we want to keep the Provisioner interface without docker specific information.\nA better option would be having something like:\ntype MessageProvisioner interface {\n    StartupMessage() string\n}\nAnd then implementing StartupMessage in dockerProvisioner to return a string containing node information. Could you make it that way?\n. Thank you!\n. tsuru-unit-agent hasn't been removed, and it probably won't. However, errors registering the unit could be ignored when starting an existing container. I'll take a look at it.\n. They should keep working independently, it's a bug that they currently don't.\nThe problem is, the agent is responsible for fetching an updated version of environment variables from the API (set with tsuru env-set) every time the container starts. It's also responsible for notifying the the API that the container is healthy and alive.\nHowever, if the API is not available the moment the container starts, it should still be able to start using previously set environment variables, and it should keep trying to notify the API that it's alive until the moment the API comes back.\n. Where is this error being printed to? Could you try running tsr api --config=<your conf>  while also running tail -f /var/log/syslog | grep tsr?\n. This is on hold of docker/docker#10052. If it end up not being merged we'll probably switch to managing port allocation in tsuru, but this is going to need more time. I've removed this from the 0.10.0 milestone for now.\n. PR to docker has been refused. We'll switch to managing port allocation in tsuru.\n. I'm in for leniency in both docker-node-remove and containers-move using unambiguous url fragments.\nNot sure about nicknames though, not enough benefits for the added code complexity.\n. No need for this anymore after 3e1e6aa5fb65da59ef1173b1df07cc685f11b5dd. Thank you @msabramo.\n. It would be better to handle this inside while handling the verbosity code. The json is still valid without the \"\\n\" and besides these cases, we can't control how json.Marshal() (doesn't add \\n) and json.NewEncoder().Encode() (adds \\n) will work in the future.\nSo, to be safe, adding something like that while dumping the request would be better:\nif requestDump[len(requestDump)-1] != '\\n' {\n    fmt.Println()\n}\n. Could you change the commit message to reflect this change? Also do you think it would be useful to apply the same handling to the code that dumps the response?\n. Thanks!\n. This error is already logged using the configured logger in the method calling CreateOnGandalf(), see https://github.com/tsuru/tsuru/blob/master/api/auth.go#L77-L85\n. I think we should not duplicate this commands in tsuru-admin. The behavior of existing tsuru client commands could be used simply allowing administrators to add, remove or list users from any team.\n. Also, with tsuru env-set A=\"a\\\"a\" breaks with:\n/bin/bash: -c: line 0: unexpected EOF while looking for matching `\"'\n/bin/bash: -c: line 1: syntax error: unexpected end of file\n. Fixed by 5c06d2e48ed6533a15a48b0977e1348eb3b2341e and tsuru/tsuru-unit-agent@182e3a6fbfdfddc719df395a7f2c13a4b98653be\n. Also, instead of having a single repository with multiple Dockerfiles (as was the case with tsuru/dockerized-setup), now each project has its own Dockerfile and all tsuru components are already available as docker images. tsuru installer uses these images to start tsuru components.. Yes, the scheduler will always try to distribute your application equally across the available hosts.\n. This is somewhat difficult for us to implement currently, and I'm not sure if this should even be a goal. We would have to control which volume is available on each Node and how they map with units. Units would have different data available to them unless we backed this volumes in a network storage. All that would add a lot of complexity.\nUsing an external object storage (Swift / AWS S3...) is generally the recommended approach for storing data. If this doesn't work, it's feasible to mount external nfs/smb endpoints inside the container itself using hooks in tsuru.yaml.\nDo you have a use case where either of these approaches wouldn't work?\n. Closed, related commits: f18234d 1ef726a 5fe4ab3 7fd90b6 db01d5d 358dc7b 083720d 07da6b5 60ea8e9 aac3970 9bdaf97 cfa802c 491dbae a170eed 018b7f4 93c91e6 a75acff 7e9f8d8 54940be 018e085 7f071f0 a809ef7 59e0926 df9f40f a7b0826 a27d1b4 74f755c 869c86b 0df1f23 9af245b 5c89d6c 9a921e4 1abcdf9 741e78a \nI really need to remember to reference issue in commits :/\n. Also, please notice that this PR solves half of the problem. After removing all units from an application, one should be able to call tsuru unit-add to bring the application back to life.\nHowever, there's a check in the provisioner which doesn't allow adding units to applications with 0 units. This could be handled in another PR, but it has to go before everything works.\n. @lucasweiblen Yes, this check has to be changed. We cannot simply erase it because we still need to make sure the application have at least 1 deploy before adding new units. So we could change length < 1 to a.GetDeploys() == 0. This might have a bit of an impact in this package's tests.\n. @lucasweiblen I think a more simple alternative is making the deploys attribute in FakeApp public, here:\nhttps://github.com/tsuru/tsuru/blob/master/provision/provisiontest/fake_provisioner.go#L39\nAnd in tests calling AddUnits test do something like:\napp := provisiontest.NewFakeApp(...)\napp.Deploys = 1\n. Thanks a lot Lucas.\n. After talking with @magnotorres and @fsouza we think the API should return 410 error if the container does not exist anymore with some specific message. 404 is too risky and could happen by accident. e.g. misconfigured DNS\n. This was fixed by tsuru/bs.\n. \"--dry is considered harmful\" - Abraham Lincoln\n. Thanks Lucas!\n. Related: 51c1900fc1a3ce230621a91a020135a0010e0dc5, 7328ae5b24b343489c6160068bef48035f260bf3, f1f0fcabdaaf64b111c46f13dfd52f7470f956b4, 34146c488d0784a204ac6223e3fbb8ec5ae5e1c3\nWe'll use http://github.com/tsuru/redisqueue for queue management.\n. redisqueue is no more, long live http://github.com/tsuru/monsterqueue.\ntsuru defaults to using it with mongodb instead of redis.\n. I'm rather intrigued by this bug. unit-add doesn't create a KeepAliveWriter instance. The only place it's created is in the deploy handler in api/deploy.go. Also, the only place \"please wait\" string appears is in this same handler.\nI don't see how a \"please wait\" string can show up during a unit-add operation. There is something really wrong going on.\n. Thanks for reporting @mwduarte! We're taking a look at it right now.\n. @mwduarte We found out that this is a bug on master currently, but it's not affecting the current 0.10.3 stable release. How did you install tsuru server? If you are using tsuru/now it defaults to installing nightly build packages. To confirm this, could you please run apt-cache show tsuru-server?\n. Thanks!\n. Actually docker:ssh:user is still necessary, it was removed from docs by mistake.\nHowever, the current name is misleading. This config is used to select the username chosen to start the docker container. We should change it to docker:user and use docker:ssh:user as a fallback for backward compatibility.\n. Running wordpress applications as tsuru apps needs some consideration since they don't really adhere to twelve-factor practices. There are two options, the first is to never update or install plugins and themes when running on tsuru, they should be installed locally and then pushed to tsuru.\nThe other option is what you suggested, using sharedfs for plugins and themes. Unfortunately it's not throughly documented yet (see #985). Basically you need to add to your tsuru.conf:\ndocker:\n  sharedfs:\n    hostdir: /shared\n    mountpoint: /shared\n    app-isolation: true\n. Setting app-isolation: true will accomplish this.\nYou can have something like:\nhostdir: /apps-data\nmountpoint: /shared\napp-isolation: true\nWith this you'll have /shared inside the container point to /apps-data/<appname> in the host machine. Thus, if you create a wp-content directory inside it you'll have /shared/wp-content point to /apps-data/<appname>/wp-content.\nAll apps will still have access to a shared mount point, however they will be in completely isolated subdirectories.\n. You'd have to manually setup your shared directory in each node. One possibility is making /apps-data a NFS mount.\n. Fixed by 2526c238def63d5c4c2a9a72f1ef33cb2f7fbe18 and tsuru/tsuru-client@a721fd5ae815ef583437a62a690b58add36f9903\nNow if an admin user runs tsuru team-list it will show all teams.\n. Hipache can listen on port any port configured on hipache.conf file, but it will only listen on this one port, as far as I know, there's no way of making it listen on multiple ports. Hipache routing is based on the Host HTTP header so listening on only one port is enough for routing HTTP based applications.\nCan you provide a scenario where having hipache listening on multiple ports would be useful?\n. You can make a request to hipache using only ip and port, however you would need to specify the Host header in the request as hipache needs it to route the request.\nSomething like curl -H \"Host: app.host.name\" <hipache_ip>:<hipache_port>\n. By default, node status checking is passive, meaning tsuru will only update it when trying to create a new container in such node. This can be changed by setting docker:healing:active-monitoring-interval in your tsuru.conf file. However, I think that's not what you want to activate since you do not seem to be using tsuru IaaS providers to create your nodes and as such tsuru wouldn't be able to recreate them.\nA more useful setting would be enabling docker:healing:heal-containers-timeout. A sensible value would be something like 180 seconds. By enabling this configuration tsuru will start monitoring status updates from each individual container. When any container spends more than 180 seconds without a status update tsuru will deem them unresponsive and will try to actively check if they are alive. If they are not alive tsuru will move them to some other node available. When moving the containers tsuru will eventually check the unresponsive node and update its status and you will have all your containers working correctly even with one node down.\n. There are two types of healing in tsuru, \"node\" and \"container\". You won't benefit from node healing if you're not using IaaS providers, however container healing will work just fine.\nContainer healing is enabled simply if docker:healing:heal-containers-timeout has a value > 0, you don't need to enable other docker:healing:* options.\n. We should handle the removal of untracked containers automatically, it's a bug that these containers keep running after the node comes back to life. Issue #1135 tracks a solution for this problem and we'll tackle it soon.\nI think a good idea is also having an admin command to check if there are untracked containers and possibly remove them.\n. We've improved and made safer a lot of the replace units pipeline (used in restart, deploy, env-set, ...) during the development of 0.12.0. I just tried it now and wasn't able to cause inconsistencies with app-restart anymore.\nAlso, tsuru will now explicitly log that a rollback is happening and which steps are being executed to rollback to previous state.\n. I like this idea, we already considered something of the sort. One problem we have implementing this today is that we don't have the original application code used in git push or app-deploy. Our default hooks make sure the generated archive is removed and we also do not save the archive name.\nSome things would have to change. One option is making the generated archive persistent and tsuru storing the last generated archive's name in its database. Another option would be creating a docker image importing from scratch containing only the application's code and pushing it docker registry. One possible advantage of latter is that using this image would remove the need for an external storage for archives.\n. Running app-deploy is even worse on that matter, no archive is created on any external storage. Uploaded files are sent directly from tsuru server to a container based on the platform's image, when this container is commited it's already mixed with platform files.\n. @vmalaga I think you found a bug in the latest release. The default scheduler isn't working anymore, this default scheduler isn't recommended for production environments but it should either be removed or remain working. \nGood news is it should be an easy fix. Please, try setting in you tsuru.conf:\ndocker:\n    segregate: true\nThis will enable the segregate scheduler and should get you past this error.\n. @vmalaga This was caused by another bug in the unit-remove scheduling algorithm, we'll release 0.11.1 probably later today and it will fix this issue.\n. That's a very nice approach. I definitely agree that we need a better router support and vuncand seems like a nice option. SNI support is specially useful. We would love to receive these contributions and merge these changes!\nSome points about a router implementation for vulcand: I think it would be preferable to integrate with vulcand's HTTP API instead of directly interfacing with etcd.\nAlso, we could have a new interface called something like router.SecureRouter including only methods to add/remove certificates. API handlers for cert-{add/remove} would check if chosen route implements this interface and fail otherwise.\n. It's okay to depend on vulcand's api package, no problem adding one more dependency, we only need to remember adding it to Godeps.\nYou can take your time on it. We are kind of busy right now getting lean containers off the ground, but we may be able to start working on routers in the future. I'll make sure to ping you if we get to it though, so there's no risk of us working on the same thing.\n. Me and @fsouza are going to give it a shot today and tomorrow, not sure how far we'll get but we hope to get some basic support for vulcand working.\n. Sure, we would love to take a look at it. Meanwhile, we're also working on #1209, things will break on your branch because of it but we can help fixing it.\n. @dcarley We were able to successfully run your branch after changing the tests to use a etcd engine instead of memng. After your pull request (mailgun/vulcand#214) is merged upstream we can change it back.\nWould you like to create a pull request for us to merge it and apply our changes on top of it? (Actually we can create it and merge it if you say it's okay)\n. Oh and thanks a lot for working on it! That was really nice work, it's working perfectly! As soon as it's merged we'll even update tsuru/now to use vulcand instead of hipache by default.\n. Thanks a lot @dcarley I've just merged it. I'm adding etcd as a dependency in our CI servers right now. I don't think it's too big of a problem to depend on it, we already do that for MongoDB and Redis and there's the advantage that the code running on tests is the same tsuru will run in production. After memng is fixed and if running etcd proves to be too much of a hassle we can change the code to use it.\nAbout your thoughts:\n1. It's necessary for app-swap to work correctly. The way the code for app-swap code works isn't very straightforward, I'll take a look at simplifying it and making app-swap work.\n2. I agree, I'll take a look at it.\n3. I see this could happen if someone manually called vulcand api inserting entries with the same ID tsuru would use, I don't think that's a problem. Is there a situation where tsuru itself would cause this problem to happen?\n4. I don't think that's too much of a problem, we can try some proposed solutions latter and maybe contribute back some lacking functionality.\n5. Yep, we'll keep supporting hipache, it's our only router that works with websockets currently.\n. You're right, I just pushed 5803382e9ce77c0b40e3d1a49bd6066333d25d52 dropping the Path rule\n. No need for a default pool I think, and as the validation is already in place we can close this.\n. Thank you!\n. Hi @RichardKnop thanks for contributing. I think it makes sense.\nCould you only add a test case for this behavior? It should be similar to TestOAuthLogin in oauth_test.go only setting the scope config to multiple values before running.\n. There's no need to change all this because of tests. The previous version was fine.\nIn tests, instead of:\nparams[\"scope\"] = \"user-create team-user-create\"\nsimply call:\nconfig.Set(\"auth:oauth:scope\", \"user-create team-user-create\")\ndefer config.Set(\"auth:oauth:scope\", \"myscope\")\nThe defer is just to set the value back to what was set in SetUpSuite and prevent other tests from being affected. \nThis way you won't have to change the Token struct neither handleToken signature.\nIn the c.Assert(s.bodies[0],... assert you'll make sure the proper scope was send on the request.\n. Why would you need the scope to be stored in the database? It will already be available in the config file. If it's value is changed in the config file users won't be able to authenticate and will have to log in again.\n. A new authorization system will be introduced in tsuru 0.13.0 and should solve this issue. More details are available in http://docs.tsuru.io/en/master/managing/users-and-permissions.html\n. This will be taken care of in 0.12.0 as the big-sibling container already remove units that aren't registered in tsuru anymore.\nOne advantage of having the restart policy set is that for short failures (e.g. restarting the docker daemon) it will bring the containers back faster than the healing process would be able to detect and fix the failure.\n. @saliceti Yeah, that's it. We're still working on this documentation and it's expected to improve before we release 0.12.0. Also, it's part of the initiative started in #1136, because of it application containers will be a lot cheaper. We are working on a seamless migration from one model to the other, bs containers will be started automatically and older containers will remain working.\n. These API calls return a list of \\n separated JSON chunks, so before parsing them you'd have to split the response by \\n and parse each chunk individually. This same protocol is used by all blocking API calls to stream responses back to client. (logs, deploy, app restart...)\nEach json chunk can have only two possible fields, Message and Error. If Error is not empty the stream will end and the operation should be considered unsuccessful.\nI can see this as a not ideal for third-party clients, as in the case of service bind, getting the list of exported fields from this stream would not be pretty. We're open to having a different kind of response depending on the request's Accept header. Maybe we could support something like application/json-stream and application/json.\n. We're being conservative about websockets usage for now. Using them only when data has to be sent the other way around.\nDoing 1 is fine. We're moving some parts of tsuru architecture to 3 (using monsterqueue) but I don't think adding this extra layer is necessary for platform-add/update as getting logs back from the async task to stream back to the client would be tricky.\n. Thanks!\n. Not actually a bug. Running simply tsuru-admin containers-rebalance would rebalance containers from removed nodes to other existing nodes.\nHowever, if after removing a node with pool=mypoolname we run a rebalance filtering by this same pool (tsuru-admin containers-rebalance -f pool=mypoolname) containers from the removed node will not be rebalanced. This happens because the the filter will only consider containers from nodes matching it, since the node was removed its containers won't be selected for rebalance.\nTwo things I think can be done to improve this behavior:\n1. Add an option to the containers-rebalance command to make it rebalance only containers from nodes that were removed.\n2. Add a new option to docker-node-update, something like --disable to completely disable a node while keeping it in the pool. This would cause rebalance command to consider containers in this node but they would all be redistributed in the pool.\nI think both options should be implemented\n. Closed by commits ff2810fc7efdacc6236e637c876ad46a782ff0c0 1063d2872c1ee3b4184a0984c3bd99355e054ac3 effc104801ed95fd08bb9115f3f385b755f48745 71adcc3ed3f1d7f52fe5f4e7358f48d7843cd671\n. Thanks for reporting! The RemoveBackend method is now removing all cnames associated to this backend. This should be the correct implementation and I've added a generic test to make sure all routers behave like this.\n. Merged into #1247 \n. Another option is having three entries in the routers entry in your tsuru.conf file. Something like:\nrouters:\n  aaa-router:\n    type: hipache\n    domain: aaa.com\n  bbb-router:\n    type: hipache\n    domain: bbb.com\n...\nAs @andrewsmedina said you'll need DNS entries pointing .aaa.com, .bbb.com to the IP address of your hipache server.\nWhen creating a new application you'll then have to select a plan with the chosen router.\nThe same thing applies if you choose to use vulcand instead of hipache.\n. A new authorization system will be introduced in tsuru 0.13.0 and should solve this issue. More details are available in http://docs.tsuru.io/en/master/managing/users-and-permissions.html\n. Yep, let's close this. Events are now in the client doc and we'll soon release 1.1.\n. Thank you for sharing your thoughts on this. One of the new features we're currently working is allowing docker images to be deployed directly to tsuru. This is the first step towards having a similar workflow to heroku docker. You can track issue #1314 for updates.\nAfter this step is done it'll theoretically be possible to deploy a Dockerfile generated by heroku docker:init to tsuru. We still have to test this further and see if any issues will arise but it would be great to achieve this level of compatibility with heroku.\n. Hello Diego, thanks a lot for contributing!\nCan you take a look at the failures reported by our CI server?\nOne of the problems is probably related to the missing xmlsec1 library, you can fix this by adding a new entry to the addons:apt:packages section in the .travis.yaml file.\nThere are also failures related to code formatting and you can fix them by running goimports on your code.\n. Adding units without starting them would cause their healthcheck and startup hooks to never be executed. Possible errors would only show up later when the user tries to start the units. On a normal workflow these errors would happen during the unit-add command making the command abort and rollback the added units.\nI'm voting for either 1 or 3. The most explicity solution seems to be 1 and if the user wants the behavior of 3 it's as simple as tsuru app-start && tsuru unit-add.\n. Closed by eb720ab3d02d02f291761d22888a112406e0a1ee. Now users can see each other if permissions for at least one role without global context match. Also, users with no roles are excluded from the list.\n. Thanks!\n. It's now possible for healing to run after the machine is unresponsive or not working. See https://tsuru-admin.readthedocs.org/en/latest/reference.html#update-node-healing-configuration for more information.\n. Hi, using Google Cloud as an IaaS is not yet supported. We're working on integrating tsuru with docker machines and this would enable tsuru to use any IaaS provider supported by docker machines. However, there's no deadline for this at the moment.\n. The documentation for adding new nodes is here https://docs.tsuru.io/stable/installing/adding-nodes.html and here https://tsuru-admin.readthedocs.org/en/latest/reference.html#add-a-new-docker-node\nIf you're using GCE you'll have to add it as an \"unmanaged node\" using the command tsuru-admin docker-node-add --register address=http://<machineip>:<dockerport> pool=theonepool\n. There was a --register parameter missing from the example command I showed you. I've just edited it.\n. git push connects to the server using ssh, it's not necessary to expose the gandalf server to the world if it's on the same machine as tsuru api (even though you can do it by editing /etc/gandalf.conf). If ssh port 22 is open on your firewall git push should work as expected. Are you trying to push to git@<externalip>:<appname>.git?\n. If the nodes are visible in tsuru-admin docker-node-list as ready and they have the same pool metadata you're ready to use them. Try creating a new app with tsuru app-create, deploying it and adding an extra unit with tsuru unit-add 1 -a <appname>. After this you should have 2 units for this app with 1 in each node. You can verify this by running tsuru app-info -a <appname> after the units are added.\nThe nodes are not linked. They don't need to directly access each other. It's only necessary for the tsuru api server (tsurud) to be able to reach them. For now, tsuru does not support docker networking which would allow containers in different hosts to be linked (as in docker run --link).\n. @blacksector So I think we're mixing things up. Let's take a step back. How did you install tsuru? Was it using the tsuru/now or tsuru-bootstrap scripts?\nIf that was the case these scripts are for development and evaluation purpose, if you run them on two different machines they will install two independent full installations of tsuru with all its components duplicated. This may be the source of confusion.\nIf you simply want to add another node to an existing tsuru installation you can either install only docker yourself on the machine or run tsuru/now with --template dockerfarm and --host-ip <ip where tsurud is running>. This way there won't be a second database and tsurud won't be installed on this second machine.\nFor a simple installation you should have a single machine running tsurud. If you want to configure tsuru server with HA them you can have multiple machines running tsurud but they should be behind a load balancer and should all use the same tsuru.conf file pointing to a single MongoDB database.\nIt's also possible to configure MongoDB with HA and you can find more information about this on MongoDB docs.\n. Implemented in 38c9a41f69eb037b7f56a91526d3f6bbcbed041d\n. I think guessing based on git remote name is relatively safer than directory name. I'm in favor of removing guessing based on directory name altogether. \n. We already considered in the past allowing an application to have multiple processes listening for http traffic. One way of allowing this would be registering subdomains for the application name in the router. A test application with web1 and web2 processes would have routes added for: \nweb1.test.apps.mycompany.com\nweb2.test.apps.mycompany.com\nThis does not exist yet but it is something we probably want to think about.\nIn your example, allowing myapp.dev.apps.mycompany.com would complicate things if a new app named dev with a process named myapp was created.\n. Handlers still missing events:\nGenerated with tsuru-api-docs --no-method GET --no-search \"event\\.\"\n- [ ] registerUnit\n- [ ] setUnitStatus\n- [ ] setNodeStatus\n- [ ] addLog\n- [ ] forceDeleteLock\n- [ ] regenerateAPIToken\n- [ ] templateCreate\n- [ ] templateDestroy\n- [ ] templateUpdate\n- [ ] machineDestroy\n- [ ] addRole\n- [ ] removeDefaultRole\n- [ ] removeRole\n- [ ] addPermissions\n- [ ] assignRole\n- [ ] dissociateRole\n- [ ] removePermissions\n- [ ] addDefaultRole\n- [ ] addPlan\n- [ ] removePlan\n- [ ] platformAdd\n- [ ] platformUpdate\n- [ ] platformRemove\n- [ ] addTeamToPoolHandler\n- [ ] removeTeamToPoolHandler\n- [ ] poolUpdateHandler\n- [ ] addPoolHandler\n- [ ] removePoolHandler\n- [ ] changeUserQuota\n- [ ] changeAppQuota\n- [ ] samlCallbackLogin\n- [ ] addNodeHandler\n- [ ] nodeContainerCreate\n- [ ] moveContainerHandler\n- [ ] autoScaleRunHandler\n- [ ] updateNodeHandler\n- [ ] nodeContainerDelete\n- [ ] autoScaleDeleteRule\n- [ ] removeNodeHandler\n- [ ] rebalanceContainersHandler\n- [ ] nodeHealingDelete\n- [ ] nodeContainerUpdate\n- [ ] nodeContainerUpgrade\n- [ ] autoScaleSetRule\n- [ ] nodeHealingUpdate\n- [ ] logsConfigSetHandler\n- [ ] moveContainersHandler\n. This issue happens because https://github.com/tsuru/tsuru/blob/633d8e01e74d8d4fb80443da1eea74a1ccd91dbf/provision/docker/handlers.go#L242 is expanding the template and overriding all params.Metadata with the template contents instead of merging them (as was done previously when the iaas package was responsible for merging the template parameters). We'll fix this for 1.1.\n@morpheyesh One workaround for now is not using the template= when adding a new node and instead passing all template parameters you want to use directly to the docker-node-add call.\n. To address this issue we initially thought about creating the concept of app tokens and @ggarnier started working on this in #1935. However, we soon realized that this would not solve all of the use cases we had for tokens and the proposal changed to creating team tokens but I think it will also be not enough to address all possible uses of tokens.\nI'd like to propose a new concept here, the creation of tsuru tokens, tsuru tokens would still be attached to a team initially as a way to make it easier to find them, but these tokens will also possibly have any role of any context assigned to them, and assigning roles will change who can view the tokens.\nHere is some example on how I imagine these tokens working:\nWho can create the token: users with token.create on (team myteam)\n$ tsuru token-create --team myteam --description \"token x\"\nWho can list the token: users with token.read on (team myteam)\n$ tsuru token-list\n+----------+--------+-------------+-------+\n| Token ID | Team   | Description | Roles |\n+----------+--------+-------------+-------+\n| xxxxxxxx | myteam | token x     |       |\n+----------+--------+-------------+-------+\nWho can assign the token: users with token.update on (team myteam) AND with team-member role on (team myteam)\n$ tsuru role-assign team-member <token id> myteam\nWho can list the token: users with token.read on (team myteam) AND with team-member role on (team myteam)\n```\n$ tsuru token-list\n+----------+--------+-------------+--------------------------+\n| Token ID | Team   | Description | Roles                    |\n+----------+--------+-------------+--------------------------+\n| xxxxxxxx | myteam | token x     | team-member(team myteam) |\n+----------+--------+-------------+--------------------------+\n```\nWho can assign the token: users with token.update on (team myteam) AND with pool-manager role on (pool mypool)\n$ tsuru role-assign pool-manager <token id> mypool\nWho can list the token: users with token.read on (team myteam) AND with team-member role on (team myteam) AND with pool-manager role on (pool mypool)\n$ tsuru token-list\n+----------+--------+-------------+---------------------------+\n| Token ID | Team   | Description | Roles                     |\n+----------+--------+-------------+---------------------------+\n| xxxxxxxx | myteam | token x     | team-member(team myteam)  |\n|          |        |             | pool-manager(pool mypool) |\n+----------+--------+-------------+---------------------------+. Hi @resilva87, you don't need to add the --dockerfile parameter anymore. All platforms on the tsuru/platforms are automatically built by docker hub itself.\nTo add a new platform simply run:\ntsuru-admin platform-add go\nIt will automatically download the tsuru/go platform from docker hub.\nAlternatively you can call add the --image parameter with the full name of an image in any registry.\n. No problem. Thanks for letting us know, I'll update the documentation to reflect the new default way of adding platforms.\nHowever, the way described in the documentation would also work. Because it's using the tsuru/basebuilder (not the tsuru/platforms) repository. The Dockerfile in tsuru/basebuilder has a single line FROM tsuru/<platform> which would also cause tsuru to use the pre-built image. This was done for backwards compatibility but I can see how it can be confusing to new users since there's now a tsuru/platforms repository and intuitively it should be the one used.\n. I agree with @andrewsmedina. The installation instructions are already described in http://docs.tsuru.io/en/latest/using/install-client.html which is linked in the current warning. If we merge this we would have to remember to always update the same instructions in two different places and this could lead to inconsistencies. It also doesn't scale as the message would only get bigger as more platforms were added.\nI'm closing this for now. Feel free to comment if you have any other suggestion on how to improve this.\n. Work has been done and tsuru now has experimental implementations for swarm, kubernetes and mesos provisioners.. Thanks @morpheyesh. The initial idea is to start this once #1448 is finished. Then I'll try to write a very basic provisioner, possibly breaking the minimal Provisioner interface in more parts to allow us to have a initial version faster (no app-shell, no app-run, no metrics, no rollback, ...). After that we'll need all the help we can get testing it and adding the missing features.\n. A minimal swarm provisioner was added over various commits and can be used experimentally. Further improvements/fixes will be tracked on separated issues.. Could you show us the output of some commands?\nwhich tsurud\ntsurud --version\nps aux | grep tsurud\nThis error is only supposed to happen with tsurud versions < 1.0.1. I can't find any spot where we still send HostConfig on a Start call and we've been running tsurud 1.1.0 with Docker 1.12 successfully for some time now.\n. The problem seems to be related to app tokens expiring. Ever since tsuru 0.12 (https://github.com/tsuru/tsuru/commit/a43447bced5ca0339e2dfd9ee331004ed3638aa2) app tokens do not expire anymore. However, if you have some apps created in a previous version it's possible that they have an expiration date set in mongodb. To fix this you can simply run this command in your mongodb console:\ndb.tokens.update({appname: {$ne: \"\"}}, {$set: {expires: 0}}, {multi: true})\nSorry for the trouble.\n. Yeah, glad this fixes your problem and sorry for the trouble. (I've also edited your comment to remove the token values just to be safe \ud83d\ude03)\n. So, we decided not to pursue this right now. The way Mesos works makes it the most challenging orchestrator to adapt to the tsuru workflow.\nUsing Mesos directly would involve a huge amount of work so we also considered integrating with DC/OS and Marathon APIs, however even this proved challenging. I'll try to enumerate some problems we faced, please note that there are probably some workarounds for some issues I write here, we only judged the development cost would be too high to overcome them.\n\n\nIt's only possible to authenticate to DC/OS API either interactively or through short-lived (5 days) tokens. This would make it impossible for tsuru to rely on tokens. We would have to disable authentication and rely on network ACLs to control access to the API.\n\n\nA big part of tsuru workflow is the ability to build application images using our platforms, it's also possible to deploy pre-built images directly but that's not the main use-case for tsuru. To ensure our main use-case works we need to be able to run API calls similar to docker commit and docker push.\nNeither Mesos, DC/OS nor Marathon provides a similar API. The approach used in the kubernetes provisioner of having a sidecar container mounting the docker socket and using it locally to commit/push could be used, but it would require using the Docker containerizer which doesn't support Pods (required for sidecar containers).\n\n\nBeing stuck with the Docker containerizer had further drawbacks, as it also doesn't support exec in a running container, which would be required for tsuru app-run/app-shell commands that are essential for most tsuru users.\n\n\nFor these reasons I'm closing this issue as we don't have any plans on continue working on Mesos integration. This may change in the future with new versions of the mentioned components being released. New issues/feature-requests can be opened then.\n. Hey there. Do you have an example application with this multi-buildpack setup that you could share? I'd love to try reproducing it and finding where the bottleneck is. Taking more than one hour to deploy an app is certainly not expected for most cases and should be considered a bug.\nThat said, our buildpack platform is not the most optimized way to deploy applications on tsuru. Our focus is mostly on the specific platforms available in https://github.com/tsuru/platforms. Our ruby platform contains some basic support for nodejs (node and npm commands are available and you can use them on build hooks), have you tried it?\n. I like the idea of grouping by target, once upon a time I even tinkered with this idea and I can bring this code back. It had the added benefit of maintaining backwards compatibility with the current dash separated commands.\nOne thing to consider is that our current CLI API already has the concept of topics (try tsuru help target). This idea could be expanded with the creation of a topic for each target and adding documentation for each new topic as we go.. One thing we have to consider is how we're going to make this relationship happen. Currently pools already have a list of teams which are allowed to use them, I think that adding another list with possible routers would get messy.\nAdding a list of possible pools to each router entry would also get messy, we'd only be moving the mess elsewhere. Imagine having a pool where a single router can be used and such router can only be used on this same pool. Every other router entry would have to include a list of all possible pools excluding this one.\nAnother solution would be combining a white list and black list approach. Where we would be able set the more appropriate list in each situation.. Yep, great. I also think this is the way to go.. I'd rather simply add the pool field to the list result than supporting customization of the returned fields. Customization could lead to the added complexity of either creating a pattern for allowing this or using something as convoluted as GraphQL.. Maybe set chmod +x build-compose.sh?. Supporting oauth login inside a VM is kinda tricky but we shouldn't be locking the console in any case, in the very least an error message should be printed.\nOne alternative would be printing the auth URL in the console and let the client handle it. However, because the oauth callback url is set to localhost opening it on the VM guest wouldn't work because the server was started inside the VM host. A text-based browser (lynx, links, etc...) would be needed to complete the oauth flow. We could even add automatic support for text-based browsers as a fallback inside the tsuru client itself.\nAlso, I'm not sure if you're aware, but it's possible use the tsuru client inside a non-interactive environment by exporting a user token after logging in somewhere a browser is available. Simply run: \n$ tsuru token-show\nThen inside the VM you can use tsuru directly without the need for login:\n$ export TSURU_TOKEN=<generated token>\n$ tsuru app-list\n. I think we should consider freezing the console on tsuru login a bug, some indication that we're trying to open a browser and an error message if that's not possible should be added. If it's okay to you I'd like to keep this issue open. I'll just update it's title to make the problem clearer.. Only the check is wrong, this warning shouldn't be printed in this case. Setting pubsub:redis-cluster-addrs will work as expected and the cluster will be used. Marking as bug as we need to fix redis connection settings validation in the checker.. Fixed by tsuru/tsuru#1625.. Yeah, I think we should only prevent the addition of new units if they are with StatusStopped. Also, this logic should move to the app package.. I think this has been fixed, right @guilhermebr ?. So, there are some problems here, this env vars handling code is old and kinda convoluted right now. Private env vars were originally created to be used by envs set by services, this is why there was a commit forbidding the deletion of private env vars in the past. The correct way to remove them would be unbinding the service.\nLater on though we decided to allow users to directly set env vars as private, however, this wasn't implemented correctly causing this problem we have being unable to unset them. I agree that we should allow unsetting them but we also must forbid unsetting envs that were injected when binding a service, otherwise this is just too dangerous. Also, new test cases should be added to validate such scenarios.\nI can give it a shot on making this look correct and update this PR if you do not mind.. This was fixed as a side-effect of tsuru/tsuru#1625.. LGTM. Oops indeed. fixed. Just fix the variable shadowing in app/app.go:907 and I think we're ready to go.. Thank you for your contribution!. Done. Thanks!. fixed by https://github.com/tsuru/tsuru/pull/1765. The bug is probably on the deploy-agent project, somewhere around https://github.com/tsuru/deploy-agent/blob/master/tasks.go#L144.. Currently we support multiple provisioners, which are responsible for scheduling app units (see https://docs.tsuru.io/master/managing/provisioners.html)\nEvery pool must have an associated provisioner and every app must belong to pool, this way tsuru knows which provisioner to use for the app.\nThe bug described in this issue arrises when we use the tsuru app-update command to change an app's pool. If the provisioner of the new pool is the same as the one from the old pool everything works fine, on the next app-restart or app-deploy tsuru will create the units on the new pool and the old units will be removed.\nHowever, if the provisioners are different we leave behind all the resources created by the old provisioner, this happens because on the new provisioner it'll be as if the app didn't exist before.\nAs an example, imagine you have an application app1 created originally on a pool with provisioner swarm. When a deploy happens tsuru will create a new Swarm Service called app1-web which will then create containers for this service.\nIf we then update the application's pool to one with provisioner kubernetes, on the next deploy tsuru will simply create a new Kubernetes Deployment and leave the old Swarm Service behind. This happens because the kubernetes provisioner is not aware (nor should be) of the existence of a Swarm Service for this application.\nOne possible solution would be simply forbidding the pool change if the new pool has a different provisioner.\nAnother, more complex, solution would involve trying to destroy the resources from the old provisioner once it's been created on the new one. This would involve some changes in the way app-update works though, as currently it does not restart the application to make the pool change effective.. Yep, the more complex solution would be better. The simple solution could be used as a stopgap to avoid inconsistencies while we work on getting the complex one right though.. Sure, that would be great.. Closed by #1786. If you call getPoolsSatisfyConstraints(false, \"team\", team) (notice false as the first argument), you'll have a list of all pools available for the team, both public and private. You can use the return from this call in the error message directly, there's no need to call it with \"*\" as an argument.. Thanks a lot for contributing!. Thanks a lot for working on this!. Thank you for contributing!. Hi, this error happened when tsuru was trying to push the platform to the internal registry configured in your tsuru.conf file in the docker:registry key. It's possible you'll have to configure docker:registry-auth:* keys for your registry if it requires authentication.. Thanks! :). Nice catch, thank you!. Thank you for working on this.. I agree that rebuild routes should be able to fix this, but I think the health check data is already in Mongo. We save it as part of the image custom data read from tsuru.yaml and sent to tsuru by the deploy-agent.. We plan on eventually deprecating GET /deploys and using only the event API calls (after tsuru 2.0 whenever it may be) but for now you're right, it's useful to have it in the DeployData.. I think I'm okay with allowing users to set the commit value when making the deploy API call. Tests must be fixed to match the new behavior though. @andrestc @guilhermebr @ggarnier: Any opinions on this?. I'm approving this for now, but I think we should revisit this code in the future and try to simplify this code.\nWhat bothers me most is the impact this PR has in the codebase (+1,742 \u2212734) with no apparent benefit and no new features at all. This is a refactor that adds complexity and makes it harder to maintain the codebase.\nBy looking at the code the added complexity seems to be two-fold. First we have increased test complexity by defining mock callbacks with the expected behavior for each storage call on every test, this adds up fast and in my opinion it would be far simpler to use a real storage implementation in the tests. The second reason is more complex. I think the Quota interfaces for the 2 services (AppQuotaService, UserQuotaService) are too big and finding a new abstraction for the concept of Quotas would allow us to simplify the interface reducing the number of methods and ideally having a single Service interface that can be used for both app and user quotas.\nThinking about Quotas conceptually they can be defined as \"Maximum number of items of a type X per object Y\". This way user quotas would be \"Maximum number of items of type App per object User\" and app quotas would be \"Maximum number of items of type Unit per object App\". This abstraction might allow us to have a single interface that would something like:\ntype QuotaService interface {\n  Set(type, object string, limit int)\n  Get(type, object string) int\n  Inc(type, object string)\n  ...\n}\nThis would be quite a departure from today's model but I think in the end it would allow us to simplify code all around and make it easier to understand.\n. We must not forget to eventually update the image GC to be aware of versioned platform images: https://github.com/tsuru/tsuru/blob/0b4c233f1bcd430551870631a69fba7dfbc0f3ba/app/image/gc/gc.go. I was thinking on something similar last week. Rather than multiple tokens in a single file I think it would be easier to manage having multiple token files, one for each target in .tsuru/token.d/<target name>.\nTo ease the migration process tsuru client could be changed to always look for the old .tsuru/token file if .tsuru/token.d/<target name> does not exist.\nThe second part of this change (changing the target for a single command or for a single shell instance) could be accomplished by changing how we handle the TSURU_TARGET environment variable.\nCurrently this environment variable must be a URL, we could change it to allow a target name. When selecting a target, tsuru would first list the existing targets from .tsuru/targets and if a target with name $TSURU_TARGET exists we would use it. If none exists we would fallback to the old behavior of using $TSURU_TARGET as a URL.. I agree, I think it would be nice to support --target argument in the tsuru command.. My idea is that we'll eventually remove the token management code from tsuru/tsuru/cmd and have it only in go-tsuruclient. I'll work on changing the cmd package do depend on it soon and remove all this duplicated code. For now there's no need to change it, I'll soon work on this refactor/integration.. Thank you, I'll merge this in the tsuru client later.. Closed by #2177. This doesn't make sense, it looks like an automated bot doing merging existing branches on many different repos. Reported to github and closing PR.. If both old and new provisioners implement the VolumeProvisioner interface, wouldn't it be safe to allow the update to run?. @fsouza volta Chico!. That's weird. Are you passing the --config flag to tsuru install-create? If so, could you share it?. Thanks, I was able to reproduce the problem, a fix is on its way.. Please change this to simply return a string. The caller then can use fmt.Printf for now. If we start using some logging library in the future this would cause less changes.\n. Could you rename it to MessageProvisioner? It's more generic and allow us to add other messages in the future.\n. Could you change this to simply StartupMessage() (string, error) ?\n. One last change, I promise :)\nWe don't need p.cluster here. You can directly call dockerCluster().UnfilteredNodes() as dockerCluster() already takes care of initializing and using a single cluster instance for the whole package.\nWith this change you can remove cluster attribute from the struct.\n. I think you missed changing the method signature here.\n. Please, remove this empty line\n. I think you can keep it there. router.go is completely unrelated in this package. It makes a certain sense to keep it in plan.go since routers are part of plans.\n. It's safer for this field to be a string. Go regexp engine isn't completely compatible with mongodb engine, so a valid mongodb regexp might not be compilable by Go. Turning this into a string will let MongoDB be responsible for parsing and validating the regexp.\n. One small nitpick, it might be better to create a new type, something like RunArgs, to group this parameters and send them along the way to sourced and run. Having two booleans in the signature may start getting messy in the future and lead to bugs where the two are swapped by mistake.\n. Could you add a simple test for this function in fake_provisioner_test.go? Similar to https://github.com/tsuru/tsuru/blob/master/provision/provisiontest/fake_provisioner_test.go#L871. Just to make sure this code is executed during tests.\n. Should this be pool.update.constraint(s) to match the read permission?. I think this last $and isn't needed, it could be {\"target.type\": evt.Target.Type, \"target.value\": \"\"}.. You can use strings.TrimSpace here. It also handles \\n and other space chars.. I think this was removed by mistake maybe? The call to GetKind is necessary because it has a side-effect (updating the opts.Kind attribute). The name GetKind is terrible and misleading, but this should not be removed.. I don't think this should be moved further down. We usually have the evt.Done defer right after error checking the event creation to make the code easier to follow.. Use http.StatusBadRequest here.. This handler is missing calls to permission.Check and event.New.. I think we should check for empty reason and fail with http.StatusBadRequest if enabled == false. Shouldn't it be !rollback here since this comes directly from the enabled form field? Maybe renaming the parameter from rollback bool to rollbackEnabled bool would make this clearer.\nAlso you should update both fields on mongodb on a single request. i.e. bson.M{\"$set\": bson.M{\"disablerollback\": rollback, \"reason\": reason}}. This will probably always fail. This happens because the imgId here most likely isn't a full image id, it's just the version suffix. The logic for transforming the received suffix into a full image id currently is here in the Deploy method. You should probably extract it to a function and use it in both places.\n. The received image id here should already be a full image id (see previous comment on app.RollbackUpdate). So there's no need for this call to fmt.Sprintf simply filter with {\"_id\": img}.. There is already a test suite declared on this package. It's inside the app/image/image_test.go file. You don't need this file.. Use check.ErrorMatches to basically validate the error message being returned.. You should test more scenarios (or add more test funcs) like enabling the image after it's been disabled.. Oh okay then for some reason github collapsed the changes to image_test.go and I missed them.. If you remove the _test suffix here, you must also remove the import for \"github.com/tsuru/tsuru/app/image\". Otherwise this won't even compile.. I think this logic should be based on DeployKind instead of origin. The origin is only informative and can be spoofed.. debug?. Maybe we should add some extra parenthesis on the last condition just to make precedence cleared when reading? evt.Target == b.Target || b.Target == Target{} || (b.Target.Type == evt.Target.Type && b.Target.Value == \"\"). Right on, fixed now.. So, there's a catch when using $addToSet with a complex document. Map order matters for MongoDB, so {id: 1, ip: 2} is a different document from {ip: 2, id: 1}, and since Go maps are orderless we can't rely on them here. bson.D should be used instead.. Is it right to return here? This would cause future calls to Shutdown to freeze forever.. Sending o b.shutdown here may freeze indefinitely so either this should be selected with ctx.Done() or this could simply call close(b.shutdown) since we're already waiting on b.done below.. fixed!. I think you can also remove the -f from this call as it doesn't make much sense along with the || true now.. Included by accident?. What about using provision.EnvsForApp()? This way dynamic vars like TSURU_HOST and PORT will also be injected.. Please remove this commented code. This block should also be removed.. Is this function unused? If so, please remove it.. SetUpTest should continue to exist with a call to dbtest.ClearAllCollections(s.storage.Apps().Database) to ensure a clean db on each test.\nAlso, the database:name in SetUpSuite should be changed not to conflict with the database:name used in provision/suite_test.go, because tests from different packages run in parallel. . Yep, fixed.. I think it's safe to simply ignore the error here, verbosity will be 0 anyway.. Also, the \"users\" field must be segmented per role, I imagined a possible output being:\n{\n   \"<team name>\": {\n      \"users\": \n         { \n            \"role1\": [\"user1\", \"user2\"],\n            \"team-member\": [\"user3\": \"user4\"]\n         }\n   }\n} . I don't think that's how we should get users for a team. The meaning here should be users with roles with ContextType == CtxTeam and a ContextValue equal to the current team. See my suggestion below for the output grouped by role.\nI think this loop would look something like: (untested pseudocode)\nroleUserMap := map[string][]string{}\nfor _, user := range users {\n  for _, roleInstance := range user.Roles {\n    role := permission.FindRole(roleInstance.Name)\n    if role.ContextType == permission.CtxTeam && roleInstance.ContextValue == team.Name {\n      roleUserMap[role.Name] = append(roleUserMap[role.Name], user.Email)\n    }\n  }\n}\nYou could cache FindRole results in a map to avoid repeated lookups to the same role in different users.. What do you think about moving this check to func Deploy in app/deploy.go? This way we wouldn't have to worry about adding this same logic to every provisioner.\nAlso I don't think there's need to call GetAppImageBySuffix here, the app package will have done this already and the imageID here would be a full valid imageID not a suffix.. Added basic commands description linking to the client docs for now.. Defaults to swarm actually.. Removed by accident?. Oops, yeah, changing to 1.5.. You're right, I'll move the this check out of here to avoid starting this goroutine if the event is not cancelable.. Could you add this to your global .gitignore file instead of here? We try not to have IDE specific patterns here.. Typo: alllowed -> allowed. Please use only spaces in the comment instead of tab+space. Linter failed here with \napi/app.go:464::warning: declaration of \"err\" shadows declaration at api/app.go:398 (vetshadow)\nTo avoid this you can declare var currentPool, newPool *provision.Pool in the beginning of the if block, and use = instead of := \n. Variables in Go have block scope, by using := inside the if block you're actually declaring a new variable err that only happens to have the same name as the external err variable. This can cause subtle and hard to find errors as changing the value of the inner variable doesn't change the outer one. That's the reason why go vet complains about it. Check https://play.golang.org/p/JD-at0fAbg for a better example.. Other structs here add tags to make json fields lowercase, shouldn't we do the same thing here?. After an error will the update status jump directly to UpdateStateRollback* states without ever getting to UpdateStateCompleted? If so, maybe we should also consider UpdateStateRollbackCompleted as a final state.. I don't think this method is necessary anymore, there are no calls left with p == nil callers could switch to Get(p.GetName()). Empty line \ud83d\ude1b . Can't we remove this method (along with UploadDeploy) now as it'll no longer be used?. I think you could use net.URLToHost(nodeAddr) here instead of a regex.. Done!. I don't think this validate call is necessary. Actually it can cause errors if the address is not a URL as is the case for kubernetes provisioner nodes.. If this struct were public it could be used do deserialize data in the client.. I think log.Errorf would be more appropriate here.. We should return cont.ID both here and after a StartContainer error to allow the container to be removed even after a failure. Another possibility is removing the container inside this function if we are to return an error.. I think having \"hooks\": yaml.Hooks, would work here.. What do you think about moving the defer RemoveContainer(containerID) call to this function instead of returning the ID and making the parent remove it?. I think the only reason why Repository and Tag is needed here is because of a bug in docker-cluster, as it isn't storing information about the image if they are not present. Let's leave it like this for now but we may be able to simplify this in the future.. Oh right, you can only remove it after it's been pushed. \ud83d\udc4d . Return containerID here to ensure removal in case of partial failure.. Calling RunServer with false for the dryMode is quite problematic, this is the cause of all the race conditions in the tests and this happens because the test isn't closing the old server and calling shutdown on multiple initialized components. Calling shutdown.Do() before the test exits should be able to fix this. However, I'm not sure if some of our packages can safely handle being reinitialized after a shutdown.. We shouldn't have docker specific errors in the app package as especially since this is only implemented in the provision/docker provisioner and would not work as expected when using kubernetes or swarm provisioners.\nIf we're to handle already running errors in the app package a new error could be created in the provision package, something like provision.ErrAppAlreadyStarted and all provisioners would be able to return it.. Also, I don't think we should blindly trust on the information provided by MongoDB as it might be stale, the start operation should still be issued to the containers and we could check the returned startErr and handle it accordingly.. Doesn't 404 here mean instance not found?. Taking a quick look at the code it looks like the InstanceInfo object is actually a map[string]string, do we really only accept label and value keys?. Ugh okay, if this is what the docs say let's keep it like this. But without this assurance we have no way to check if a given instance exists in the service. :(. Typo: resoUrces. Wouldn't it be safer to move this initialization to SetUpTest? Declaring it here makes it possible for a callback set by one test to leak to another test. The same applies to all other suites with mock instances.. By starting a goroutine here we are ignoring possible errors during listening. Maybe we should have a channel for errors to capture then, something like:\nerrCh := make(chan error, 2)\nif httpsSrv != nil {\n  go func() { errCh <- startHttpsServer(httpsSrv, listen, ...) }()\n}\nif httpSrv != nil {\n  go func() { errCh <- startHttpServer(httpSrv, listen) }()\n}\nreturn <-errCh\nAlso, I don't think we should call fatal in createServers since we're able to return errors. We should simply return the errors and let the caller call fatal for any returned error.. I think we can use -ec here, imageTagAndPush used to rely on -e to stop after a possible docker pull error.. Fixed. Must have separated buffers for stdout and stderr and can use bytes.Buffer instead of safe.Buffer.. I think it would be better to return the original error here, returning plan not found may mislead the end user.. I also think the original error should be returned here. To reduce the indentation levels and avoid shadowing the err variable inside the if below I think we could try exiting earlier, as soon as we find some conditions match leaving the logic always on the first level. I was thinking in something like:\nplan, err := s.storage.FindDefault()\n    if err == nil || err != appTypes.ErrPlanDefaultNotFound {\n        return plan, err\n    }\n    plans, err := s.storage.FindAll()\n    if err != nil {\n        return nil, err\n    }\n    if len(plans) != 0 {\n        return nil, appTypes.ErrPlanDefaultNotFound\n    }\n    ... create plan .... You can use req.SetBasicAuth() here instead of manually encoding the auth header.. Calling client.CommitContainer for each tag is not necessary and it may cause a performance hit, it should be called only once (for the original tag), after the Commit is done we should call client.TagImage to tag the latest tag. This will also allow us to move the commit logic and the image size logic to outside the for loop (removing the ugly if i == 0 block).\nOnly the PushImage logic should be inside this for loop.. You should use the more robust image.SplitImageName (in the app/image pkg) function to split the image as it already handle some corner cases.. Nitpick, moving this line and the line below it to the line above should allow us to preserve the old indentation level shortening the diff for this PR. Something like:\n\"sh\", \"-ec\", strings.Join(append([]string{fmt.Sprintf(`\n...\n`, .... No need for Sprintf() and concat here, just make it a single string.. I did this to match the paths for existing assignRole and dissociateRole (POST /roles/{name}/user and DELETE /roles/{name}/user/{email}).\nMy idea was to also use the same existing commands role-assign and role-dissociate in the CLI and matching the paths replacing only user with token would make the client logic easier to understand.. I think we should call err = errors.Wrapf(ctx.Err(), ... here. This way we would be able to differentiate between DeadlineExceeded and explicit cancelation of events.. What do you think about always running something like:\ncontext=$(mkdir -d)\ndocker build -t tsuru-build -f Dockerfile.build $context\nrmdir $context\nThis would ensure the build runs almost instantaneously if the image is already up to date but it would also rebuild the image if changes to Dockerfile.build were detected, instead of requiring the tsuru-build to be removed manually.. Going with Webhook. Nope, removing this. \ud83d\udc4d . \ud83d\udc4d . \ud83d\udc4d . Nope, no reason, moving it. Yeah, ugly. I think this should be either generated or removed, I'm not sure if we really need this GetTargetType anymore. I'll address this in another PR.. \ud83d\udc4d . \ud83d\udc4d . \ud83d\udc4d . \ud83d\udc4d . I'd suggest renaming this function to NewFakeAppWithPool and creating a NewFakeApp function calling it with test-default as the pool value. This would prevent a large amount of changes to unrelated packages in this PR.. Do we need to list all pools here since the node belong to a single pool?. After messing with kubectl a bit I found that it's possible to list pods from all namespaces with a single request, I think this should be used here, the only catch is that apparently we have to create the request more manually, something like: \nrestCli, err := rest.RESTClientFor(client.restConfig)\nvar podList apiv1.PodList\nerr = restCli.Get().\n    Resource(\"pods\").\n    VersionedParams(&metav1.ListOptions{\n<opts>\n}, scheme.ParameterCodec).\n    Do().\n    Into(&podList)\n. This can be handled by setting the appropriate LabelSelector in the ListOptions struct, something like tsuru.io/pool in poolNames would be safe.. Yep, this was for compatibility as we have 3 seconds hardcoded in provision/docker. Using interval seconds here didn't seem right as the meaning is quite different from when it's used in the probes.. I think custom_data and create_data must be defined as:\ncustom_data:\n  type: object\n  additionalProperties:\n    type: string. The same Cluster definition can be used in the update call.. We should use errors.Wrap[f] instead of fmt.Errorf. Should be --target-value here.. By setting app.UUID here future calls to GetUUID() will always return it even if an error occurred while storing it on the database and this value won't ever be stored. It would be safer to only set app.UUID after a successful call to DB Update.. I don't think this logic should be here. Here you could simply call os.Setenv(\"TSURU_TARGET\", target) and move this logic to the ReadTarget() using the TSURU_TARGET env as the target variable here.\nAlso, instead of manually parsing the targets file you can call the getTargets() function there which already returns a map[string]string for all targets in the targets file.. Good catch, it was supposed to be 10 seconds.. *fromm. Is this here because ajg/form can't handle duration types?. FindByPool is already used by existing provisioners to choose a pool for an app, modifying it this way will possibly allow for apps to use the wrong cluster.\nI suggest adding a new method only to the service, something like FindAny(pool string) and calling FindByPool() and if none is found calling FindByProvisioner() and picking the first one.. I think you can use image.SplitImageName here, there are some edge cases from what I remember.. I don't think this will work as a shell is not automatically started for running the command, this should probably be:\nsuggestion\n            cmds:   []string{\"cat\", \"/home/application/archive.tar.gz\"},. stderr is never used, maybe it could be used here as in:\nsuggestion\n            writer.CloseWithError(errors.Wrapf(err, \"error reading archive, stderr: %q\", stderr.String()))\n. Shouldn't the default section be actually outside the switch statement to ensure the annotation tsuru.io/extra-labels,annotation itself is added to the node?. should be Get token. There is no situation where this could return 204, this line can be removed.. I'm sorry I forgot about this part when we were discussing this issue.\nWe need to check for permission to read the found token, for team tokens we have two different checks that need to be made, the first one is just like the other handlers checking if we can read the token:\nallowed := permission.Check(t, permission.PermTeamTokenRead,\n    permission.Context(permTypes.CtxTeam, teamToken.Team),\n)\nif !allowed {\n    return permission.ErrUnauthorized\n}\nThe second is particular to team tokens, we only let the user see the token value if the token permissions is a subset of user permissions, if it's not we must set the token value to an empty string. The logic will be the same as in https://github.com/tsuru/tsuru/blob/a80bbcacaec00b4e268cfe1cc023456427c4bed3/auth/team_token.go#L229-L235\nI think this logic can be extracted to a new public function and this handler will call it.. Do we really need these conditions? My worry is adding new hooks in the future and having to remember to change this line.. From what I can see this could lead to multiple repeated ports as we could have multiple ports mapping to the same target port. Should we deduplicate ports, or add them to a Set first?. :). Should we validate the protocol as only UDP and TCP are valid?. Redeclaration of defaultPort. For consistency we could use the constant apiv1.ProtocolTCP.. Should the default env really be removed when loading an invalid config?. This will be a pain to handle... Both pod names and process names can have . in their names. Serializing this to mongodb as a map this will cause an error as keys aren't allowed to have dots. We would need to change the way we serialize this to mongodb to use a list with keys and values to correctly allow dots here. This will probably mean using different structs for yaml parsing and database serialization. :(. Oops, no point, it was from an earlier attempt.. Calling addPod means that we're adding the pod app to a queue responsible for ensuring the router targets are correct. This must be called onDelete because the router may still be pointing to a target related to the pod being deleted and if so calling addPod will remove such target.. Imagine we have a the following configuraration: \n\"kubernetes\": {\n    \"groups\": {\n        \"pod1\": {\n            \"web\": {\n                \"ports\": [\n                    {\n                        \"port\": 1080,\n                        \"target_port\": 8000\n                    },\n                    {\n                        \"port\": 2080,\n                        \"target_port\": 8000\n                    }\n                ]\n            }\n        }\n    }\n}\nIt is valid, but it would fail here because we would have 2 entries setting ContainerPort to 8000. In this situation having a single port entry would be the right thing to do.. There's already a ClusterProvisioner so I changed it to ProvisionClusterProvisioner. We're losing the original err here. Maybe something like:\nerr = errors.Wrapf(derr, \"error provisioning cluster: %v - error deleting cluster\", err). nitpick, this is the same as doing: err = errors.Wrap(err, \"error provisioning cluster\") and a bit clearer I guess.. ",
    "lisongx": "@andrewsmedina @bardusco \nthx guys;)\nsolved\n. ",
    "dgryski": "Just ran into this.  Can either the quickstart guide or the http://docs.tsuru.io/en/latest/lxc.html guide be updated to mention adding the port number to the target?\n. I've started playing with this here: https://github.com/dgryski/tsuru-bootstrap/tree/master/heroku\n. My guess would be because docker integration is coming, which is a superset of the functionality lxc provides.\n. So, is this bug really just \"rm -rf provision/lcx\" and all associated code refs?  Should we wait until docker support is more polished?\n. Is this in addition to or instead of hipache ?  (Or unrelated)\n. I'll update the tests.\n. I'll be more careful about running unit tests in the future, now that I'm actually modifying Go code.\n. I wonder if this is related to removing the image problem that breaks second/third deploys?\n. A reminder to myself to check the perms on /home/application. \"Operation not permitted\" is not the same as \"permission denied\"\n. I think this was bad interaction between docker's overlay filesystem and linux kernel 3.5.0.  I upgraded my kernel to 3.8.0 and the problem went away.\nI've updated my bootstrap instructions.\n. I've been running tsuru and docker both from master and, while I've seen this error, hasn't been related to failed deploys.  I think it comes from a cleanup phase, but as I said doesn't affect deploys.\n. There have been a number of changes to the heroku buildpack implementation I use -- I'm not sure my code works anymore.  I'll take a look at it this weekend and push any required fixes.\n. I think my heroku buildpack might be out-of-date.  There have been changes to https://github.com/progrium/buildstep that I haven't kept up with :/\n. I can add this to the tsuru-bootstrap setup scripts.\n. ",
    "alanjds": "+1\n. +1\nWould be awsome.\n. Does your \"playground\" already works?\n. +1\n. Hi. Sorry for the mute time. As I am not actively using tsuru on the past months, I cannot assure that the issue exists yet, neither that it is fixed.\nSorry. Feel free to close it. I`ll ask to reopen if needed.\nThanks for the help.\n. @dgryski Well, your buildpack installed with success, and created the platform. I has able to create-app and pushed.\n...just that nothing occurred on push. Unsure if is my install or your buildpack.\n. Hum... I need to say: Besides undocumented, its looks kinda weird.\nCould some solution like @dgryski 's install.sh become the \"for now\" standard?\nFor me, the ideal is a tsr subcommand, but maybe this is too coupled for \"right now\"\n. I worked around via \"$ chown git:git /var/lib/gandalf/repositories/\"\n. Nicer would be the gandalf install to do this\n. Nice. If needing some help, just ask :)\n. @fsouza Yep. Installed via PPA\n. ",
    "arouca": "@andrewsmedina I already have the target:\ngandalf:~ arouca$ tsuru target-list\n  cloud (cloud.tsuru.io:8080)\nWhat command should I type?\ntsuru target-set targetname\nor \ntsuru target-set cloud.tsuru.io?\n. Thks! It works.\nI tried to login now and I'm getting this warning:\n\nWARNING: You're using an unsupported version of tsuru.\nYou must have at least version 0.7.15, your current\nversion is 0.8.\nPlease go to http://docs.tsuru.io/en/latest/install/client.html\nand download the last version.\n\nShould I rollback to an old version?\n. ",
    "enyachoke": "How about doing the build on the git server and storing the image on a central registry. \n. I think this should be considered seriously. Heroku-like slugs produced by build step are far light weight and portable.\n. Does tsuru have a reference implementation for a provider in-case someone wants to build a herokuish provisioner \n. I'm using tsr version 0.2.6. I used the curl method to install. But I was already using gandlif for another project. \n. Okay I did that. But I get this So where are the logs\nCounting objects: 8, done.\nDelta compression using up to 4 threads.\nCompressing objects: 100% (7/7), done.\nWriting objects: 100% (8/8), 1.46 KiB, done.\nTotal 8 (delta 0), reused 0 (delta 0)\nremote: remote: \nremote:  ---> App failed to start, please check its logs for more details...\nremote: \nTo git@pyxishost.dev:sample.git\n * [new branch]      master -> master\n. I ran tsuru log and got this\n2013-11-04 21:12:55 +0300 [tsuru]: Q2013/11/04 18:12:55 Unable to find user achachiez: User not found in /etc/passwd\n2013-11-04 21:12:55 +0300 [tsuru]:  ---> App failed to start, please check its logs for more details..\n. ```\nlisten: \":8080\"\nhost: http://0.0.0.0:8080\ndatabase:\n  url: 127.0.0.1:27017\n  name: tsuru\ngit:\n  unit-repo: /home/application/current\n  api-server: http://127.0.0.1:8000\n  rw-host: pyxisapp.dev\n  ro-host: pyxisapp.dev\nauth:\n  token-expire-days: 14\n  user-registration: true\n  hash-cost: 4\nbucket-support: false\nprovisioner: docker\nqueue-server: \"127.0.0.1:11300\"\nadmin-team: admin\nhipache:\n  domain: pyxisapp.dev\ndocker:\n  servers:\n    - http://localhost:4243\n  collection: docker\n  repository-namespace: tsuru\n  router: hipache\n  deploy-cmd: /var/lib/tsuru/deploy\n  ssh-agent-port: 4545\n  run-cmd:\n    bin: /var/lib/tsuru/start\n    port: \"8888\"\n  ssh:\n    add-key-cmd: /var/lib/tsuru/add-key\n    public-key: /home/ubuntu/.ssh/id_rsa.pub\n    user: ubuntu\n```\n. Looks like it is \nps -ef | grep ssh-agent\n```\ntsuru     1204     1  0 05:01 ?        00:00:00 /usr/bin/tsr docker-ssh-agent -l 0.0.0.0:4545 -u tsuru -k /var/lib/tsuru/.ssh/id_rsa\n1000      3503  3457  0 05:55 ?        00:00:00 /usr/bin/ssh-agent /usr/bin/dbus-launch --exit-with-session /usr/bin/im-launch cinnamon-session-cinnamon\n1000     10793  7761  0 23:54 pts/9    00:00:00 grep --color=auto ssh-agent\n``\n. I finally used a fresh vagrant vm and got Tsuru to work. Know let me learn some golang and start hacking. Closing this.\n. If you have noticed I'm late to the party but I'm trying to catch-up. So first I don't really understand how the build process for the docker provisioner works. But here is what I think. Why don't we use this https://github.com/flynn/slugbuilder  or build step to build the slug on the git server and store it somewhere maybe s3  or riak. We can use this in a pre-receive hook unlike now when we use a post-receive meaning we may commit code that failed to build. I already have s pre-receive hook that builds the image I'm trying to use https://github.com/s3tools/s3cmd to upload to riak. After the slug is on riak we can the simply use https://github.com/flynn/slugrunner to lauch units on demand.\n. Back to the issue. I think it will be a good Idea to take the build process out of the API server. How about creating a script (Can be anything python,perl,php,ruby) that is initiated by a pre-receive hook. The script will create a container and start the build process and userdocker attach` to get real-time stdout. That way the user doing the push will get real-time out put. When we finall finish the build we send a request to the API server with the name of the image or slug and the commit sha fingerprint. The API server the creates a deploy version starts the units and if everything goes well returns code 200 to the script which returns code 0 and the push succeeds. If anything goes wrong during this process the script does all the required cleaning to leave everything in a consistent state and returns a non-zero code and the push fails. Slug or No slug? For this on I think the thing is we should be using builpacks they offer far my flexibility like we don't have to create images for everything somebody will  wish to deploy we just let them create a buildpack,we don't have to require the the user to specify a platform beforehand. This way we will only have two docker images. One the builds the images or slugs and another that just runs what ever it is given. \n. ",
    "ghost": "Thank you for your help, I managed to build the code. I created a pull request which further clarifies the existing instructions. I hope you accept contributions from the community. \n. Or a docker file with a custom container :+1: \n. The command upload can upload a Dockerfile with assets to create a custom container, for example: https://github.com/sameersbn/docker-gitlab\n. Oh i have the last version of docker, maybe that version is the problem with other thing. When i create a new docker node in other server/host and add this to tsuru in a pool with a x team. And i deploy an app when i do a push this error apear: No nodes found in pools. \nAnyway i willl try with an earlier version\n. @gabrielclima your answer https://github.com/tsuru/tsuru/issues/1936#issuecomment-370723173 solved the issue for me as well. I patched the file and did\n$ cd ~/go/src/github.com/tsuru/tsuru-client\n$ make build\n$ cp ./bin/tsuru /usr/local/bin/tsuru\nand things started working for me. ",
    "ggarnier": "Instrumentation has been solved via #1535 . This should be solved with #1599 . @fsouza when you use the blue-green plugin, you already have a TAG environment variable available.\n. @andrewsmedina can you help me understand the build error?\n. @andrewsmedina ok, I'll do it!\n. What should we do when you try to add or remove units to a sleeping app?\n. I see 3 possible solutions here:\n1 - disallow to add new units when current units aren't started (stopped or asleep, for example)\n2 - add new units with the same state of the old units\n3 - start all units after adding\nI think the third one makes more sense\n. I like the 1st option because it's the least surprising one - you don't do anything the user didn't ask for.\n. @dfleury that's right, those are the possible status values. You can also pass more than one value: tsuru app-list -s stopped,asleep\n. Related to #1550 . I just updated the media page with a couple of links listed here.. @caarlos0 thanks!. @guestisp you can also check our blog for more info about deploying Tsuru to Google Cloud: https://blog.tsuru.io/tsuru-paas-on-google-cloud-platform-21640abb4386. @brunobbbs thanks!. Maybe. If something goes wrong after step 2, users would have no roles (old or new). In your proposal, users would have both old and new roles.. Maybe it would be better to replace setRoutes method with addRoute and removeRoute. What do you think, @cezarsa?. @cezarsa StatusStopped or StatusAsleep. Related to #1475 . I don't think a target-update command is needed. A target is just a name-address pair, updating one of these fields is exactly the same as removing it and adding a new target.. @cezarsa this was fixed in tsuru/tsuru#1618. I'm just making a small adjustment in the integration test to close this issue.. I think we should validate team and pool names just like we currently do with app names: https://github.com/tsuru/tsuru/blob/18a6895c0a336edf50d1c06d8ed0d9fdbd1fea7b/app/app.go#L973-L981. @rafaelfragosom thanks!. I think the syntax should be tsuru app-quota-change <new limit> -a <app> - although this would break the command current contract.. Refs #1994. Refs #1994. Refs #1994. @jrwren our base platform already supports a TSURU_PLATFORM_DEBUG env var to show debugging info during deploys: https://github.com/tsuru/base-platform/blob/master/deploy#L7-L9. \nMaybe you could add a -v flag to the deploy endpoint, and when it's set, TSURU_PLATFORM_DEBUG env var could be set in the build container.. Refs #1994. @VitorFalcao I think the easiest way is checking how we validate input data in other routes, like team creation:\nhttps://github.com/tsuru/tsuru/blob/afc0745897538d611768016338c393118af2bd72/auth/team.go#L54\nPlease let me now if you need some help. You can do something like this:\nhttps://github.com/tsuru/tsuru/blob/f9d62e093a53bb10e3e82b96de5553fc8535f7e9/api/pool.go#L183-L186. I think the best option is the third one. You can check if each pool exists before saving the cluster, and only save if all pools exist.. It would be great to support Kubernetes CronJobs, but we would have to think how to handle these definitions for other provisioners (Docker and Swarm). @mouradsm @yusef-ho how are you running the installation?. @VitorFalcao I still didn't investigate on this issue. I just noticed that, after deploying an app a couple of times in my local environment, a few old deploy pods weren't removed. I'd have to check the provisioner/kubernetes package to help understand what could be causing this.. Duplicated. @anchepiece great! Let us know if you need some help. @anchepiece thanks!. @VitorFalcao thank you!. Hi @heitorsilva, tsuru client has a command tsuru node list that lists all registered nodes. It supports a -f flag to filter nodes by metadata, like pool (tsuru node list -f pool=dev). But when you call this command, it's actually calling /node from tsuru api (which returns all nodes) and applying the filter in the results.\nThe idea is to add support to filter by metadata in the api. Take a look at the handler for this api here: https://github.com/tsuru/tsuru/blob/34ef467ab4d7e5f93dca7fcd22eb6d7e289b92d8/api/node.go#L235-L242\nAn example of api that supports filters is the events list: https://github.com/tsuru/tsuru/blob/34ef467ab4d7e5f93dca7fcd22eb6d7e289b92d8/api/event.go#L28. 1. yes, we set IgnoreUnknownKeys and IgnoreCase by default in all routes\n2. ListNodes already accepts a list of addresses. You can change the api to accept a address parameter and pass this value to ListNodes (and even accept multiple address parameters). But to accept other filters, we would have to change the ListNodes signature, and change all 3 implementations (docker, kubernetes and swarm). You can leave this part to a second PR. @dmitryck actually, the credentials aren't used for pulling images from docker hub, but to push them to your internal registry. The configuration should be something like this:\ndocker:\n  registry: <myinternalregistry>\n  registry-auth:\n    username: <myname>\n    password: <mypassword>. When you run tsuru platform-add python, it:\n\nPulls python image from docker hub\nPushes python image to your private registry\n\nThe first step doesn't require credentials, but the second one does, if your private registry is authenticated. The error comes from the second step.. You need to configure the docker:registry key in tsuru.conf file. That's the address used to fetch platform images, and to push and pull app images.\nIf you don't want to use a private registry, you can use docker hub as registry. Just set docker:registry config to docker.io:\ndocker:\n  registry: docker.io. Or you could just leave it empty, the default is fetching from docker hub. I think we should include the linked contents by default. If you want to ignore it, you can add it to the .tsuruignore file.\n@biancarosa do you want to take a shot at this? :). @cezarsa PTAL. Hello @codygee237, what exactly do you want to translate? The documentation?\nWe currently doesn't have multilanguage support in our docs, but feel free to contribute!. @gabrielclima I don't think we changed anything related to platforms between 1.5.0 rc1 and rc3. Which is your tsuru server version?\nDo you get this error with other platforms?. I can't reproduce this error. Can you give more information about your environment?. @gabrielclima fixed in tsuru-client 1.5.1. Thanks for reporting!. Refs #1994. This was fixed in tsuru/tsuru-client#79 :\ntsuru app-deploy-list -a myapp\n+------------------+------------+-----------------+-----------------------------+-------+\n| Image (Rollback) | Origin     | User            | Date (Duration)             | Error |\n+------------------+------------+-----------------+-----------------------------+-------+\n| v1 (*)           | app-deploy | jamesATbond.gov | 09 May 18 19:25 -03 (01:54) |       |\n+------------------+------------+-----------------+-----------------------------+-------+. Refs #1994. Refs #1994. Refs #1994. Refs #1994. Related to #1977. Related to #1977. Fixed in #2128. @aman12592 the idea is adding support to a new flag in /apps endpoint (something like nameOnly=true). If this flag is present, we would return only the app names (no need to check units status).\nThe code for this is in api/app.go file. Let us know if you need more help.. @juanjcsr I prefer the second option, because it keeps the contract of the API:\n[\n    {\"name\": \"app-name1\"},\n    {\"name\": \"app-name2\"}\n]. Hi @juanjcsr. We started documenting tsuru API using OpenAPI spec. You can add the new flag in the parameters section of AppList: https://github.com/tsuru/tsuru/blob/0ab5d0f4b21a98148bd592601c17b2cbd4484abd/docs/reference/api.yaml#L271. I just found out a couple of adjustments I need to make:\n\n[x] app, cluster, volume: updates shouldn't validate names. Currently it would be impossible to update an app a name longer than 40 characters\n[x] event webhook: improve the error message for invalid name (Error: Status: 400 Bad Request, Body: name does not match regex \"^[a-z][a-z0-9-]{0,39}$\"). @cezarsa PTAL. @theag3nt probably the easiest way to run a development environment is using docker compose: https://docs.tsuru.io/stable/contributing/compose.html\n\nYou could also try tsuru installer: https://docs.tsuru.io/stable/installing/using-tsuru-installer.html\nIf you find something is missing, confusing or outdated in our docs, feel free to contribute to it also, we would really appreciate!. I think listing all volumes and filtering on the client may not be a good option, as the number of volumes could be really large.\nI vote for changing the volumes api to support filtering by binded app, and adding this call to the client.. @liangyuanpeng by default, tsuru installer uses virtualbox driver. You can change this configuration with driver:name key in the config file. Take a look at the documentation for more details: https://docs.tsuru.io/stable/installing/using-tsuru-installer.html. Maybe, I don't know what could happen in this case.. @andrestc PTAL. Closed as invalid. Nice, thanks!. I don't see the purpose of these changes.. The command is correct. Which version of tsuru-client are you using? You can check with tsuru version.. We could also support selecting which ports will be added as liveness/readiness probes.. We could support disabling port expose for a specific process using an empty array:\nkubernetes:\n  groups:\n    mypod:\n      web:\n        ports:\n          - target_port: 8000\n      worker:\n        ports: []\nProcesses declared in Procfile and omitted in this config would expose the default port, and processes declared in this config with an empty array wouldn't expose any ports.\nWhat do you think of this approach?. I agree. I didn't know this was a valid yaml (the worker: part), that's why I made that suggestion.. Thanks!. How did you do the installation? Could you try with newer tsuru version? Version 1.1.1 is really old.. This is probably the same as #2221 . Please try this workaround: https://github.com/tsuru/tsuru/issues/2221#issuecomment-440746601. @yehudimikhael we just made a small fix in the build script (#2219). Can you checkout the master branch and try again?. We did simulate this bug, but we still don't know the cause.. @guestisp while this problem with boot2docker isn't fixed, you can make a workaround to make tsuru installer work again. Add this to install-config.yml file:\ndriver:\n  name: virtualbox\n  options:\n    virtualbox-boot2docker-url: https://github.com/boot2docker/boot2docker/releases/download/v18.06.1-ce/boot2docker.iso. Closed in favor of #2236 . @andrestc you should add a reference to logs:queue-size in the docs.. @davidkroell thanks for the contribution!. @davidkroell the example applications are in https://github.com/tsuru/platforms repo. You can find a sample PHP application here: https://github.com/tsuru/platforms/tree/master/examples/php.\nFeel free to make pull requests to contribute both to the sample app and documentation.. Closes #2230 . Refs #2213 . Can you share the logs?. We should set these paths and filenames as constants somewhere.. Copyright 2017 :). Isn't this the same as c.Assert(builders, check.Not(check.DeepEquals(alt1))) and c.Assert(builders, check.Not(check.DeepEquals(alt2)))?. Do you really need this updatePlatform parameter? Couldn't you just set it to true when plaform param is set?. Just a tiny detail: I would remove docker from this error message. And downcase the word It's. I think you could invert this logic to improve the code readability:\nbackend, ok := f.backends[name]\nif !ok {\n    w.WriteHeader(http.StatusNotFound)\n    return\n}\nreq := &routesReq{}\n.... I think this code would be easier to understand if you extracted these 3 ifs to a function, like blockMatchesEvent(b, evt). Shouldn't this defer be defined after CreateTeam?. It would be nice to set a specific error here (something like ErrMethodNotAllowed), instead of parsing the error message.. You could replace these 404 and 405 with http.StatusNotFound and http.StatusMethodNotAllowed. I think we could use a different name here, like ImageRepository, to avoid confusion with the repository package.. Shouldn't this be called only after you check that there isn't already a cluster with that name (line 84)?. \"configured in tsuru.conf file\". You could replace 404 with http.StatusNotFound. Here too. Did you miss a / between archiveDirPath and archiveFileName?. Agreed!. You could cache the result of this function, to avoid calling it multiple times for the same role. Could you add some tests for this?. You are calling permission.FindRole for each role of each user. If a team has 10 different users with a common role, you would be making the same request 10 times.\nA suggestion to improve this would be creating a map with the role names as keys, and the roles as values. Before calling permission.FindRole, you could check if that value is already in the map to avoid these unnecessary requests.\nHere's an example of how you could do it:\ncachedRoles := make(map[string]Role)\nfor _, user := range users {\n    for _, roleInstance := range user.Roles {\n        role, ok := cachedRoles[roleInstance.Name]\n        if !ok {\n            role, err = permission.FindRole(roleInstance.Name)\n            if err != nil {...}\n            cachedRoles[roleInstance.Name] = role\n        }\n        ...\n    }\n}. You could use imageName here. I think you could add a test case with an unknown tag value. You could use c.Assert(allImages, check.HasLen, 1). Here too. Here too. You could add a test for this function. Shouldn't allowedValues return values change to map[poolConstraintType][]string, error?. The problem is that I call runCommandInContainer also in runBuildHooks function, and I can't remove it there, because it's commited. You could use repo, tag := splitImageName(newImage) here. Where is this function being used? It's just like splitImageName function here: https://github.com/tsuru/tsuru/blob/073b2dc4191889096a1313e2e7689876d3882065/builder/docker/builder.go#L277. I think you could replace not implements with doesn't implement. These two error messages could be equal (opts.BuildFromFile or opts.ArchiveURL != \"\"). 2018. 2018. This test case is duplicated. Thanks, I forgot to remove it.. Just a detail, I would extract the default plan creation to a separate private function, to let the code easier do read.. @cezarsa done. I think you forgot to remove this line. Why did you remove the token id from the assign role path? I think it should keep the same path as the dissociate role endpoint.. You can omit the InUse field here. The default value for int fields is 0.. You don't need to remove this. We clear the DB before running each test.. 2018. You don't need AppQuotaService here. 2018. The package name is already mgo, you don't need to specify it.. 2018. You could use quota.Unlimited instead of -1, it's more expressive. Or even more, create a function authTypes.NewUnlimitedQuota that returns authTypes.Quota{Limit: quota.Unlimited}}. Here too. You could just return err here.. You don't need to keep two ErrAppNotFound types. I think it's better to keep just the one in appTypes.. Shouldn't you just set app.Quota.Limit = quota.Unlimited?. You don't need to set the import name here, check is the default.. [nit] copyright comment missing. [nit] 2018. Typo in webhoookCollection. Is there a case where len(parts) is 0?. You're mixing Webhook and WebHook cases. We should choose one of them. You could replace this if with return pod.Spec.ActiveDeadlineSeconds != nil && *pod.Spec.ActiveDeadlineSeconds >= int64(0) || pod.DeletionTimestamp != nil. The problem is that this would list pods from all namespaces, not only the ones we use for pools - which include kube-system. This could be dangerous. We need the namespace to list pods with a specific selector in https://github.com/ggarnier/tsuru/blob/8a066b8e3d34f6f5a6836c3962bbd42f04fa7989/provision/kubernetes/helpers.go#L413.\nBut with this alternative you just found out to list pods from all namespaces could replace this.. [nit] why don't you use if client.GetCluster().Name == newclient.GetCluster().Name { directly? This sameCluster variable isn't used elsewhere. [nit] 2018. Shouldn't you create the PVC in the app namespace?. Shouldn't this be inside storage/mongodb pkg?. You could extract these 4 lines to a separate function, just to avoid repetition. You don't need this bson tag here. I personally don't like using values like names as collection ids. Specially in cases like this, where it's the name of another entity (platform). I'd prefer using the platform name as a regular field, and creating an index for it.. This should be Dial1Full300ClientWithPool. I'd add a cleanup in Create and Update methods to trim spaces and remove duplicated tags.. I tried, but the support to custom marshaling is limited. I'd have to implement encoding.TextUnmarshaler in the CacheExpiration field itself, and it also doesn't allow setting the field to nil (which I do when this field is omitted). Yes. We could make a PR to ajg/form to add support to time.Duration fields, but the project seems abandoned (the latest commit was 2 years ago).. Maybe app.GetPlatformVersion could already return latest when version is empty?. Shouldn't you return an error when the image is not found?. @cezarsa actually image.SplitImageName returns the tag as latest when omitted, and we wouldn't be able do differenciate between go and go:latest.. Actually if your docker image exposes a port, this one will be used. The port in $PORT variable is used only when the image doesn't expose any ports.. Then it will show an error message, and the deploy will fail.. I added that to avoid saving an empty healthcheck structure for every app without HC. But you have a point. I don't think it's worth. A duplicated port would lead to an error creating the deployment, and the error message clearly shows what's wrong, like in this example:\nService \"multiport-web\" is invalid: spec.ports[2]: Duplicate value: core.ServicePort{Name:\"\", Protocol:\"TCP\", Port:9999, TargetPort:intstr.IntOrString{Type:0, IntVal:0, StrVal:\"\"}, NodePort:0}. Just like in duplicated ports, the error message is clear in this case:\nService \"multiport-web\" is invalid: spec.ports[0].protocol: Unsupported value: \"FOO\": supported values: \"TCP\", \"UDP\". That makes sense. I'll change to remove the default envs only when err == nil && len(portsConfig) == 0 (no ports exposed for this process).. What's the point of this change?. You could join these 2 ifs into one.. Why do you call addPod on onDelete method?. You can remove this sentence, as you already explained before that the image could expose a port or use the $PORT variable.. The app should listen to $PORT or to the exposed port.. You don't need to check the token here. You could use newToken returned by servicemanager.TeamToken.Create. We should escape some characters from header names and values, to avoid command injection.\nsuggestion\n        s := fmt.Sprintf(\"%s: %s\", header.Name, header.Value)\n        headersCurl = append(headersCurl, fmt.Sprintf(\"-H %q\", s)). ",
    "dsinyakov": "Hi Andrews. I was playing a few days with tsuru+lxc. I am wondering why lxc is being removed?\n. thanks @andrewsmedina and @dgryski. That makes sense\n. Hi Magno,\nWhat issues you may encounter with each app running in a separate container? Just to clarify, Is your idea to put several apps (10/20) into one container?\n. > Which algorithm is used to choose a server from the list?\nFrom what I remember last looking into the docker cluster code - it was round robin algorithm\n\nIn case of App deployment made by multiple units, each unit will be placed on a different docker server ?\n\nYes\nTsuru core team may correct me.\n. Docker logs with debug enabled:\n\n2013/10/14 16:44:24 POST /v1.1/containers/create\n[debug] api.go:963 Calling POST /containers/{name:.*}/start\n2013/10/14 16:44:24 POST /v1.1/containers/82eb917e0e4f/start\n[debug] network.go:367 Acquiring 0\n[debug] network.go:367 Acquiring 49153\n[debug] network_proxy.go:102 Starting proxy on tcp/[::]:49153 for tcp/172.17.0.2:8888\n[debug] api.go:963 Calling POST /containers/{name:.*}/wait\n2013/10/14 16:44:24 POST /v1.1/containers/82eb917e0e4f/wait\n[debug] container.go:956 Waiting for process\n[error] container.go:966 82eb917e0e4f8e12a02db062fd2bf42ecb31fa154161ed3a84538bc8af123eab: Process: exit status 1\n[debug] container.go:969 Process finished\n[debug] network.go:630 Unmaping tcp/49153\n[error] network_proxy.go:106 Stopping proxy on tcp/[::]:49153 for tcp/172.17.0.2:8888 (accept tcp [::]:49153: use of closed network connection)\n[debug] network.go:359 Releasing 49153\n[debug] api.go:963 Calling POST /containers/{name:.*}/attach\n2013/10/14 16:44:24 POST /v1.1/containers/82eb917e0e4f/attach?logs=1&stdout=1\n[debug] api.go:963 Calling POST /containers/{name:.*}/attach\n2013/10/14 16:44:24 POST /v1.1/containers/82eb917e0e4f/attach?logs=1&stderr=1\n[debug] api.go:963 Calling POST /commit\n2013/10/14 16:44:24 POST /v1.1/commit?container=82eb917e0e4f&repo=tsuru%2Fhw7\n[error] api.go:353 EOF\n[debug] image.go:91 Start untar layer\n[debug] archive.go:119 [tar autodetect] n: 10\n[debug] archive.go:124 Archive compression detected: tar\n[debug] image.go:95 Untar time: 0.005917997s\n[debug] api.go:963 Calling DELETE /containers/{name:.*}\n2013/10/14 16:44:24 DELETE /v1.1/containers/82eb917e0e4f\n[debug] api.go:963 Calling POST /containers/create\n2013/10/14 16:44:24 POST /v1.1/containers/create\n[debug] api.go:963 Calling POST /containers/{name:.*}/start\n2013/10/14 16:44:24 POST /v1.1/containers/ef3c353c97f0/start\n[debug] network.go:367 Acquiring 0\n[debug] network.go:367 Acquiring 49154\n[debug] network_proxy.go:102 Starting proxy on tcp/[::]:49154 for tcp/172.17.0.3:8888\n[debug] api.go:963 Calling GET /containers/{name:.*}/json\n2013/10/14 16:44:24 GET /v1.1/containers/ef3c353c97f0/json\n[debug] container.go:956 Waiting for process\n[error] container.go:966 ef3c353c97f07d38bebd028a9ef35c13d696a2970175c96ca29bbdfaba947dc0: Process: exit status 255\n[debug] container.go:969 Process finished\n[debug] network.go:630 Unmaping tcp/49154\n[error] network_proxy.go:106 Stopping proxy on tcp/[::]:49154 for tcp/172.17.0.3:8888 (accept tcp [::]:49154: use of closed network connection)\n[debug] network.go:359 Releasing 49154\n[debug] api.go:963 Calling GET /containers/{name:.*}/json\n\n. I am using 0.6.3 now. Used to have 0.5.2, and issue reproduced also in that version. Previously, docker-setup.bash script would just pull the latest version from https://get.docker.io/builds/Linux/x86_64/docker-latest.\nWhat version is supported by tsuru? \n. I was unable to reset to 17c92b8\ngit reset --hard 17c92b8\nfatal: ambiguous argument '17c92b8': unknown revision or path not in the working tree.\nSo I rolled back to versions 0.5.3, 0.5.2, 0.5.1 till 0.4.8. \nStill the same error.\n. Adding sshd-path: sudo /usr/sbin/sshd fixed the issue. Thanks!\n. Sorry folks for duplicate. Somehow github showed I owned 0 bugs submitted for a while, so I thought I missed the submission part and resubmitted. I've added so more details though, I'll transfer those to original bug. \n. ",
    "magnotorres": "Sorry, I didn't expressed myself well. The aufs has a limit of layer it supports as you can see here: https://github.com/dotcloud/docker/issues/332. As we don't know when docker will automatically solve it, we need to have a workaround in the meantime :)\n. Great Flavia, thanks! \n. Maybe the better way to deal with it is to have a administrative command (via cli?) to remove the log entries(storing those in a logfile)  and we can use that via cron the way we want \n. You are totally right, forget about application, it's totally related to units! :)\n. Done. https://github.com/globocom/tsuru/blob/19a5ae30e6ce3e1b65ad14751bb155d4f9e456a5/docs/services/mysql-example.rst\n. humm, maybe isn't a good aproach, let me explain. The main purpose of the swap command is to perform a safe deploy without surprises. If during a swap command more units are added, we may have issues into this new units(what is hard but could happen) ending with a broke app into production\n. Hi @alanjds! You will need to add it directly into mongodb. Take a look at platforms-setup.js bellow:\nfunction setup_platforms() {\n    # this function should be called in the provisioner specific installation script\n    # because mongo usually takes some time to startup, and it's not safe to call it from here\n    # so call it after everything runs\n    if [ ! -f platforms-setup.js ]; then\n        curl -O https://raw.github.com/globocom/tsuru/master/misc/platforms-setup.js\n    fi\n    mongo tsuru platforms-setup.js\n}\n. +1\n. +1\n. @jnana-rb the command \"tsuru\" absorbed all the tsuru-admin commands, so, just type tsuru app-unlock -a svcpack. Tsuru will figure out if you have the admin privileges to perform the desired action. Hi Jonas! Here we have a Redis with HA thanks to Sentinel. We let 2 Redis that can be promoted to master any time(but only one will be), and we put one redis slave(they can't be promoted to master) per hipache machine. That way we can scale the hipache instances as we need\n. Hi @gfronza! Here at Globo.com we are using planb(https://github.com/tsuru/planb - a go router with the same hipache api, better performance and steroids ;-) ). To have HA, we create a VIP and point it to the VMs with planb router (as many) we needed, each one with a redis slave(to improve the read performance and latency). The redis master only receive writes from tsuru api(and sync to the redis slaves). Is also possible to configure a healthcheck, making a HTTP request to the Host: ping and if everything is ok with the planb, it will respond \"OK\".\nIt's also possible to have multiple VIPs with isolated planb routers and also other routers like vulcand or galeb. \nWe have a lot of applications (> 500) and routers here(routers planb/galeb per environment: dev/homolog/prod/etc), and we deal with a lot of requests/s, with great performance and speed.\nFeel free to ask anything you want, and good luck!\n. \\o/\n. \\o/\n. Ok, now it(the tsuru admins) can be checked with the Role admin(global), that's enough, tks! =)\n. \ud83d\udc4d  for remove\n. +1\n. Hi @guestisp we are planning to do that next year, maybe in the second quarter . Try to use rpaas.py as plugin name:\ntsuru.exe plugin-install rpaas.py https://raw.githubusercontent.com/tsuru/rpaas/master/rpaas/plugin.py. It will only work with Kubernetes and maybe Swarm for now.\nWe will deprecate Swarm unfortunately\n[]s Magno\nhttp://www.magnotorres.com.br\n--\nSHIFT ZZ\nOn Wed, May 23, 2018 at 4:21 PM, GUEST.it notifications@github.com wrote:\n\nAs subject, how do they work? From docs, is not clear if Swarm or\nKubernetes are needed as provisoner or if we can use plain docker\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/tsuru/tsuru/issues/2063, or mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AELajnbdcDShai8-f2k4EdYn_BNpcHtpks5t1bafgaJpZM4ULCdg\n.\n. \n",
    "dmitryck": "@fsouza Hello!\nin tsuru.conf  there is lines:\nlisten: \"0.0.0.0:8080\"\nadmin-listen: \"0.0.0.0:8081\"\nafter all configuration and start tsuru-server there is a netstat -lptun out:\nProto Recv-Q Send-Q Local Address Foreign Address State       PID/Program name\ntcp        0      0 0.0.0.0:80              0.0.0.0:*               LISTEN      950/node\ntcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      985/sshd\ntcp        0      0 127.0.0.1:3131          0.0.0.0:*               LISTEN      952/archive-server\ntcp        0      0 127.0.0.1:8000          0.0.0.0:*               LISTEN      956/gandalf-server\ntcp        0      0 127.0.0.1:27017         0.0.0.0:*               LISTEN      1011/mongod\ntcp        0      0 0.0.0.0:6379            0.0.0.0:*               LISTEN      1027/redis-server *\ntcp6       0      0 ::1:80                  :::*                    LISTEN      950/node\ntcp6       0      0 :::22                   :::*                    LISTEN      985/sshd\ntcp6       0      0 :::3232                 :::*                    LISTEN      952/archive-server\ntcp6       0      0 :::6379                 :::*                    LISTEN      1027/redis-server *\ni see there is nothing is listening 8080 and 8081 ports\nit's fine or not??\nbecause i could not create a user in developer machine\nin terminal, after user-create there is an error like curl [tsuru-target-ip]:80  - No application configured etc.\n. @andrewsmedina \nThank you!!\nit's strange, that is a trouble with starting a tsuru-server, because terminal output prints no errors.. just a PID:\nsudo start tsuru-server-api\npassword for dmitryck: \ntsuru-server-api start/running, process 1680\nso, i thought that everything is fine.....\nAnd you right, is an error in log file:\ncat /var/log/upstart/tsuru-server-api.log\nError: You must configure your default router \"hipache\" in \"routers:hipache\".\nOpening config file: /etc/tsuru/tsuru.conf\nin my tsuru.conf file there is a hipache in docker section:\ndocker:\n  servers:\n    - http://localhost:4243\n  collection: docker\n  repository-namespace: tsuru\n  router: hipache\nso... how can i understand, must be another section in tsuru.config, where i must have a routers:hipache ?\n. Thank you @fsouza very match!!\nIt's very useful information!!\nBut a have another question, seeing this picture:\nIf i have create TWO application in tsuru (test and prod) with two different pools, i will have TWO GIT repository of my code too?? One git repository on one tsuru app? And there will be no one central GIT control of my application?\nIs this right?:\n1. at first, i GIT PUSH (or app-deploy) my TEST APP CODE to TESTINGPOOL, and testing\n2. then, if testing app is correct, i must some how get it code into my PROD APP\n3. and then i GIT PUSH (or app-deploy) my PROD APP CODE to PRODPOOL\n??\nsorry if i say something wrong...)\nOr there ALWAYS ONE GIT REPOSITORY of my app, created in tsuru, no matter if i testing it somewhere or not ..?\nAnd deploy app to testingpool or prodpool is always a ONE deploy from one directory of app code, just with some different parameters, witch tels tsuru, to what pool i want deploy my new code .. ?\nTHANX!\n\nPS. All this belongs to workflow of development web apps in tsuru. As there are no ready example from A to Z (dev, test, prod), I try to collect this information from documentation and forums... and understand a basic method, how i must use tsuru in this process.\n. @fsouza \nThanx a lot!!\nNow i need just to start tsuru workflow, but i can't do it - always some troubles(\nIn proccess...)\nPS. i think that tsuru one of the best paas!\nand i want as soon as possible start working with it\n. @fsouza, ok... i got it! thank you...\ni create platform with ruby 2.2.2 installed from official docker repository \nhttps://github.com/docker-library/ruby/blob/4ccabb5557ce2001aa1ae2a5f719340eb33c0383/2.2/Dockerfile\ni created it by command tsuru-admin platform-add.. and params\nbut when i run inside this new platform container command:\ncat /etc/passwd | grep ubuntu\nthere is no output - no user named ubuntu..\nso it's true - no user ubuntu)\ni don't understand, for now.. how can i fix it, and deploy ruby app\n\nPS. and don't understand, what part of deploying process demands do some operations from this user ubuntu..  because, it seems, there is no configs or something like this, where ubuntu user is mentioned.. pps. and i thought that default is always root..\n. thank you @andrewsmedina and @cezarsa for help!! i'll try soon how it works...\nand another two questions\n1. tsuru cname-add (cname) -a (appname) - this command make some config file at fact somewere in tsuru server or not?\n2. when i make changes in tsuru.conf and add a \"routers\" i need to restart tsuru-server-api...\n   so... when i want to add a new site, example ddd.com - a can't add it without restarting and stoping three other working sites aaa.com, bbb.com and ccc.com? \nadding a new site it's always restart for update config?\n. @andrewsmedina \nI see..\nThank you!!\n. @andrewsmedina \nYes, 0.0.0.0:8888 and 127.0.0.1:8888 inside app container are curl'ing well.. RubyOnRails welcome page code on both...\n. @andrewsmedina \nweb: bundle exec rails server -p 8888\nis it correct? docker port  always connect to =>8888\n. @andrewsmedina, thank you..\n\"access the application externally by : ?\" - what does it mean? \"by : ?\"\ntsuru-admin app-routes-rebuild - \"Nothing to do, routes already correct\"\n. @andrewsmedina\nfrom host machine (from inside), access externally is:\ncurl: (52) Empty reply from server \nyes.. emty reply..... \nand other apps, that working well from outside, are response well on a specific port from inside of host machine\n. @andrewsmedina \nand.. from app-info..\nUnits [web]: 1\n+------------+---------+-----------+-------+------------+\n| Unit       | State   | Host      | Port  | IP         |\n+------------+---------+-----------+-------+------------+\n| 43fa35d554 | started | 127.0.0.1 | 32774 | 172.17.0.7 |\n+------------+---------+-----------+-------+------------+\ni don't understand what is the IP mean - last column...\ni login to a host machine, where is the docker and tsuru api server\nrun\ndocker ps\nsee all app containers with docker port info\nand curl\n0.0.0.0:{PORT} .. by each app\nright?\nand the apps that not response outside are - curl: (52) Empty reply from server \nbut strange, that they are response from inside of container, so they are running inside is 100%\n. @andrewsmedina \ni understood what was a problem..\nbind 0.0.0.0 to app\nfor sinatra in code:\nset :bind, '0.0.0.0'\nset :port, 8888\nfor rails in Procfile:\nweb: bundle exec rails s -b 0.0.0.0 -p 8888\nsuppose, the app server was not listening 0.0.0.0 and not bind it to app.. or something...\nbut...\n1. why curl 0.0.0.0:8888 inside app container are working well before?\nand.. \n2. in tsuru docs in ruby on rails app deploy section, there is no -b 0.0.0.0 instruction..\nmaybe in my rails configuration something wrong?\nthanx\n. @andrewsmedina \nok, thank you!!\nthat options are enough for me.. !\nand any other docker start options, in future tsuru versions, would be available?\nmaybe by adding original docker start string like ' --volumes-from ' and others.. so in adding docker options there will be no limits.. \nps. tsuru docs are contains not all possibilities for config file, i guess...? because sharedfs - i didn't see that section..\n. @andrewsmedina \nand i can mount only one volume?\nin docker i can use several times -v\nin tsuru sharedfs - only once?\n. Hello, @cezarsa \nI have the same issue, but registry config in tsuru.conf file dosn't help\ndocker:\n  registry-auth:\n    username: <myname>\n    password: <mypassword>\nIs this correct config?\nthank you\nFirst time (two years erlier) when i use tsuru - there was no error like this\nMaybe docker ships now with this feature (auth in docker hub by default)\nBut it's very strange, why install platform on my server via tsuru need some auth on docker hub. @ggarnier ok, understood.. thanx!\nAnd it seems strange to me, why installation tsuru platform (pull) ask for the credentials. @ggarnier \nThank you for answer! But i can not fix it yet...(\nThis part of output  from docker info command on my server\n...\nRegistry: https://index.docker.io/v1/\nLabels:\nExperimental: false\nInsecure Registries:\n 0.0.0.0:6000\n 127.0.0.0/8\nthis means that docker use this https://index.docker.io/v1/ registry for pulling and pushing? or only pulling?\nor 0.0.0.0:6000 this some insecure registry is my local registry.. and in tsuru config i must put this string?\nor i must configuring and run additional docker registry container on my server.. like https://docs.docker.com/registry/deploying/ in this manual, put it config/credentials in tsuru.conf and only after that tsuru platform-add will work?\ni don't understand what exactly tsuru (or docker) whant's from me..)\nand what exactly wrong or missing in config or system\nps. fews years earlier there is no problem like this.. i added platforms without any auth or registry and etc. So now i'm confused a little bit. ",
    "ramonPires": "@flaviamissi i think that should have a button in app that redirect to abyss project to  open a issue.\n. the front-end app is open to changes? Because i think this kind of issue could be reported in there.\n. I think  instead of bring the message ,you could bring  the number of message code,and on the client, in this case the django app would handle with i18n by itself based on this code.\n. and perhaps provide an api to create these \"bundles\" .\n. @andrewsmedina i think the @guestisp  is trying to say is something like OpenShift Cartridge https://www.openshift.com/developers/download-cartridges .\n. ",
    "marcospereira": "Yes. The key was added and the team member can push to other apps. I had created a new app to prove that it is not a problem with my user.\n. ",
    "philiptzou": "Try this: https://github.com/guokr/tsuru-postgresapi\n. @bobobo1618 Thank you! Could you submit a pull request so I can merge your modifications back to the master?\n. @bobobo1618 I know. But AWS support is always welcome.\n. @bobobo1618 Sorry! I totally forgot it...\n. @andrewsmedina \nbash\nvagrant@tsuru-server:~$ tsr version\ntsr version 0.4.0.\nbash\nphilip@philip-debian:~$ tsuru version\ntsuru version 0.9.0.\n. @andrewsmedina \nAnd you should run the env-set in a batch to reappear the bug.Type the command word by word manually is too slow for a machine.\n. ",
    "bobobo1618": "I've been running the above for a while now and it works great. Added a few modifications for my particular app but other than that it's been perfect.\n. They're app specific, they don't really belong in master :)\n. You already merged it in dude https://github.com/guokr/tsuru-postgresapi/commit/cc1fee400188240a8b74f7c292b8b9d8f30d5024 :)\n. Aha, found the docs for it:\nhttp://docs.tsuru.io/en/latest/provisioners/docker/schedulers.html\nIt'd be very helpful if it was listed in a clearer way on the main documentation page though.\n. As a user I'd really prefer not to have this happen.\nJSON might be a standard format but it's a pain for humans to write. Since the manifest is something that humans write, I think it's a better idea to leave it as YAML.\n. And in JSON you have to check commas and quotation marks everywhere ;)\nIndentation adds meaning and is managed by my text editor, which makes it pretty easy to work with.\n. Sorry, I searched the issue list and saw nothing.\nI'm running from the Ubuntu PPA.\nOn Thu, Jun 12, 2014, at 0:33, Cezar S\u00e1 Espinola wrote:\nHi there. This have already been fixed on master and it will be\n  released in the next version. Which version are you using?\n\u2014\nReply to this email directly or [1]view it on GitHub.\nReferences\n1. https://github.com/tsuru/tsuru/issues/815#issuecomment-45749314\n. P.S. The app unit is running and ready as shown by both app-list and visiting the app URL through a browser.\n. Before derp:\nApplication: <redacted>\nRepository: <redacted>\nPlatform: python\nTeams: admin\nAddress: <redacted>\nOwner: <redacted>\nTeam owner:\nDeploys: 6\nUnits:\n+------------------------------------------------------------------+---------+\n| Unit                                                             | State   |\n+------------------------------------------------------------------+---------+\n| f0eed82f849ea2b37cd9636c75e06f84d1ec36bfead4e2ccf57ac84f3cead43d | started |\n+------------------------------------------------------------------+---------+\nCommands:\n2014-08-19 14:58:43 +1000 [tsuru][api]:  ---> Started unit 1/1...\n2014-08-19 14:58:43 +1000 [tsuru][api]: ---- Removing 1 old unit ----\n2014-08-19 14:59:04 +1000 [tsuru][api]:  ---> Removed old unit 1/1\n2014-08-19 14:59:17 +1000 [tsuru][api]: running 'python stuff'\n2014-08-19 15:00:53 +1000 [tsuru][api]: running 'which python'\n2014-08-19 15:00:55 +1000 [tsuru][api]: running 'which python'\n2014-08-19 15:00:56 +1000 [tsuru][api]: running 'which python'\n2014-08-19 15:01:10 +1000 [tsuru][api]: running 'ls  /home/application/.venv/'\n2014-08-19 15:01:11 +1000 [tsuru][api]: running 'which python'\n2014-08-19 15:01:13 +1000 [tsuru][api]: running 'ls  /home/application/.venv/'\nAfter:\nApplication: <redacted>\nRepository: <redacted>\nPlatform: python\nTeams: admin\nAddress: <redacted>\nOwner: <redacted>\nTeam owner:\nDeploys: 6\nUnits:\n+------------------------------------------------------------------+-------+\n| Unit                                                             | State |\n+------------------------------------------------------------------+-------+\n| f0eed82f849ea2b37cd9636c75e06f84d1ec36bfead4e2ccf57ac84f3cead43d | error |\n+------------------------------------------------------------------+-------+\n. I gathered :/\nYes, the app is still running and responsive through the HTTP interface it provides. I'd tell you more if I could find any logs from Tsuru but I haven't been able to find a single one in any of the standard locations (/var/log etc.) so far.\n. The only real alternative I can think of for fixing eternal locks is a timeout and I'm not sure that solves the problem at all :/\n. That's not the source of my lock unfortunately, the command would be better. I can definitely see issues where a build hook locks up and the ability to kill it will be needed.\n. Awesome, thanks :)\n. - Committed in the host: The Docker node that the image was being built on has the image, yes\n- Proper registry name: It's using the correct namespace from our tsuru.conf, yes\n- Private registry: No, we're not. At the moment there's only one server that actually runs Docker apps.\nI should point out that removing the requirements.txt from the Git repo and installing requirements with a tsuru run command afterwards works fine.\nAlso, other apps running on the same Tsuru deployment (like the Redis and Postgres APIs) do not have this issue at all.\nI'm rather certain that the reason is that the pip install takes a great deal of time.\n. Ah, an update - it appears that I was mistaken about the image being committed. An image was present but not the correct image (a successful build that didn't include pip worked fine).\n. Hmm, it also appears it's not time related, it appears to be pip related, specifically one of the packages my app depends on. The strange thing is it's never happened locally.\nA ten minute sleep in my build hooks worked fine. pip installing pip and curdling worked fine. Pip installing my actual deps did not terminate this time for some reason. I have a feeling this is actually a Docker problem.\n. When I use pip, I get the 'please wait' messages at the end, after the container has finished (as per docker ps) but these messages never finish. Tsuru also stops reporting the logs towards the end.\nCurdling appears to segfault, not sure if that's related.\n. Also, splitting up the pip install into individual build commands (94, one per package) seems to terminate fine and Tsuru's happy with the result unless I install it into the virtualenv, where it seems to hang like above.\n. Nope! Haven't touched Tsuru because of this and one of the other issues I reported.\n. ",
    "thedrow": "YAML is de-facto the new standard for configuration files. Almost every new service uses those.\nI presume you are not a Python developer so you are not used to the fact that indentation matters.\nI'm -1 on this.\n. Travis-CI and Coveralls are the most popular. There are many more. I can list many examples if you want to be these are just what immediately pops out of my mind.\nYAML is intended to be human readable. That's why it's perfect for configuration. Because it allows you to quickly grasp what is going on.\n. Add 50 more lines to the database configuration and order them randomly.\n. ",
    "neverping": "I think it's important for all client-side developers.\nI can imagine a world where a client-side developer, who now can be a server side developer, be finally a system administrator. Javascript will empower the world.\nThe circle is now complete.\n. That's a pity. =(\n. ",
    "thiagopnts": ":+1:\n. ",
    "andrestc": "Hi @sidnei, this issue problably went lost and was fixed along the way. Currently we are using a client with a 5s timeout. And, as can be seen on travis, we arent facing this issue on service tests anymore:\nok      github.com/tsuru/tsuru/service  1.533s\nThanks for reporting and I'm sorry that it took all this time to answer.\n. Closing this due to inactivity. Feel free to re-open.. Closing this as #1599 adds support for volumes on swarm and kubernetes.. I think this could be supported as a param to app-deploy, tsuru app-deploy -a app --rebuild .; would not cover the git deploy workflow, tho.\n. This is fixed by using the docker-machine iaas.. docker-cluster is on \"maintenance\" mode only and we will limit the number of changes to its code to mostly bug fixes.. Closed by #1478 . Closing to keep just #630 to track this.. Hi @CvX,\nWe are currently working on a component called tsuru installer that is bundled in tsuru client. It is still in experimental state but we have plans to improve it and make it production ready. You can check its documentation here.. Closed as we started using goreleaser to release our binaries across all our projects. Implemented in #1476 \n. Hi @dmitryck, I'm closing this as the issue seems resolved. As pointed by @fsouza, we should work on #162, to improve our documentation on this subject.\nThanks and feel free to re-open/open a new issue if needed.\n. We have added support for configuring app TLS certificates and passing them to the router. Currently, only planB is integrated with tsuru api to store the certificates and terminate the TLS connections. Release notes\nWe support certificate-set -a <app> -c <cname>, certificate-unset -a <app> -c <cname> and certificate-list -a <app> and currently tsuru does not store any copy of the pub or private keys.\nTo enable TLS support in a router, it must implement the router.TLSRouter interface:\ntype TLSRouter interface {\n    AddCertificate(cname, certificate, key string) error\n    RemoveCertificate(cname string) error\n    GetCertificate(cname string) (string, error)\n}\nThis should be fairly easy to do for vulcand since it already supports setting certificates using its api.\nShould we keep this issue until all routers support TLS or create issues for each router that fits? cc @cezarsa @dcarley . @cezarsa I believe we can close this issue since pool is a required parameter for docker-node-add. Or do you think we should also support default pools for docker-node-add?\n. This is also useful for worker kinds of units that should always run a single unit. We added support for the dockermachine iaas and the reference documentation was added here.\nI think we can close this issue and wait for some feedback to further extend this iaas(there are probably more options we can support to let the user customize the docker engine). What do you think, @fsouza?\nOnce this get stable, we can create issues to implement our own iaas's using dockermachine drivers.\n. I think we can close this one once the event-list cmd is ready, since we are dropping user actions in favor of events. cc @cezarsa, @andrewsmedina \n. it's now possible for iaase's to create a machine with a customized protocol (port was already in place). The particular iaas just need to set Protocol and Port on to the desired one in the iaas.Machine{}.\nI don't think we need to support iaas:<name>:node-protocol and iaas:<name>:node-port for all iaas' since in some of them this wont be configurable(docker machine always uses 2376 and https, for example). Do you think we can close this issue, @fsouza?\n. I think we can close this one since #1424 will cover events for app-unlock. Sounds good, @tarsisazevedo?\n. @fsouza, since we moved from bs-* commands to node-containers, do you think this one still applies? cc @cezarsa \n. Closing this due to inactivity. Feel free to re-open.. We decided not to implement this.. :+1: \n. Hi @fnzv, \nYou should install tsuru from source (using the --tsuru-from-source option when running now) or using our nightly builds (using the --tsuru-pkg-nightly option), since the stable version (which is installed by default from now) does not support deplying images yet. This feature is in our RC for the 1.0 release.\n. This is handled by the BindSyncer, added on https://github.com/tsuru/tsuru/pull/1645. Hi @morpheyesh, thanks for opening the issue. How did you ran tsuru now?\n. One way to support this would be to mount volumes on the swarm services to store each component's data and enable sharing this data across each node using services like EFS on AWS.\nWe would need to implement the storage's creation on each cloud provider. The default could be as is: mounting a volume without backing it up on a storage provider.. We are actually trying to share data that is stored by the tsuru client, on your local machine, once you run tsuru install, not between the servers. To do that, we are making the API aware of the installation done by the client and it will be responsible for storing all information regarding it. Once that is done, anyone with a tsuru client pointing to that target (and having the right privileges) will be able to manage the installation: add new hosts for the components, scale the components and etc.\n. Hi @gwmoura, @guestisp \nWe are currently working on a docker machine based iaas(#1223). Docker machine has several drivers that provide support the iaas's (including google cloud platform). We are also going to support docker machine 3rd party drivers, which means we can use the open nebula one.\nInstead of creating new iaas implementations we should try the docker machine iaas with their drivers, report issues and check if we can improve our implementation or their drivers (since they are also open source).\nI'll be pushing a WIP version soon (and create issues of what its missing). Would be good to get some feedback on it.\n. Since docker-machine support is pretty stable, we recommend new iaas to be ran as docker-machine drivers. We have no plans to add new iaas' to tsuru itself and we plan on moving our own implementations to docker-machine drivers.. We are adding a OpenAPI reference. Work is being tracked in: https://github.com/tsuru/tsuru/issues/1992.. I see you ran ./tsuru-installer install to start the installation process. I believe you are using a deprecated version of the installer (which used to be a standalone binary). The supported installer now runs inside the tsuru client.\nCould you try installing tsuru client(instructions) and then running tsuru install?\n. How did you install tsuru before installing it from source? The installer\ncmd is available since 1.1 and this client is available on brew and etc.\nEm 3 de out de 2016 16:21, \"GUEST.it\" notifications@github.com escreveu:\n\nI had to build from source. Now with 1.1.0-rc1. the installer is running.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/tsuru/tsuru/issues/1470#issuecomment-251200039, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/ACzu44VR3GV4Bzfh9rXN1rnn_bQnOZcSks5qwVWjgaJpZM4KM5iE\n.\n. We rely on docker swarm to download and start our services from docker images, sometimes pulling the images take too long (because of slow internet or docker hub rate limits) and the API is not able to start because of the required components.\n\nI think your failure regarding the python platform is actually related with docker registry not starting properly(because of the reasons stated above).\nWe should probably add better checks to verify if the components are being pulled and wait more before failing the installation. I'll add a issue about that.\nDid you manage to get the installation to succeed?\nThanks for reporting.\n. @guestisp we released the packages for tsuru 1.1.1 (including for ubuntu). You original issue is fixed on this release.\nFeel free to re-open this issue you face it on this new release.\n. The installer now uses docker compose for setting up its components. So, to customize a component one must provide a custom compose file based on the default one. There is a easier way to customize the api version (as it tends to be the most common case, by using components:tsuru-image config.. @IngCr3at1on that seems to do it, but has the draw back that we will request swarm to pull their images one by one. I think we could address that by:\n1. removing the api from the slice of tsuru components, and renaming it to something like TsuruDependencies.\n2. after looping thru the dependencies (installing them), loop thru them again here waiting for their healthchecks to pass.\n3. after all dependencies healthchecks pass, call the API installation directly.\nAnother approach would be to start goroutines for each component installation and wait for their healthcheck to pass (but i think configuring timeouts can be a little trickier for this case)\nI think I\u00b4m fine with both solutions, what do you think @IngCr3at1on?\n. @IngCr3at1on I agree with you, we should have timeouts of both cases. I just said it would be trickier to have them configured if we decided to do the healthchecks inside the goroutines because of the dependencies between the services(some of them will require a longer timeout). If we do the checking on the main goroutine, its essentially the same for both of my suggestions.\nMaybe we can go with a 'not so long timeout' as default and expose it as some configuration for users with slow connection for example.\n. Hi @otherpirate, thanks for contributing. In addition to @andrewsmedina`s notes, can you also run check the formating with gofmt and goimports? Some checks failed on our CI.\nI'm also +1 on adding the documentation to this PR.\n. Closed via 23cbb8d. LGTM, thanks.\n. Currently tsuru already supports memory based scaling, I believe this would cover your use case.\n. Oh, I see. Sorry for the confusion.\nI don\u00b4t think this can be done to a running instance , e.g on AWS you must stop the instance before being able to change its instance type (and increasing ram). I think this adds some complexity and corner cases that we need to address if we would add this feature, for example: tsuru needs to move the containers out of the machine before stopping it(to prevent apps from being unavailable), what to do if this is the only node?\nMaybe the way to do it is to have the auto scale being able to create a new node with a different plan, move the containers to the new node and remove the older node. Would that have different costs than resizing an already provisioned node?\n. Hi @avelino, thanks for trying out the installer and raising this issue.\nIs this happening every time you try running the install on debian? Some users of docker-machine have experienced this in the past and it was actually caused by the instance taking too long to start on digital ocean. Maybe thats something we should handle in the installer (or in docker-machine itself).\n. Closed via 6425bd1 and 58299316\n. On tsuru 1.3 routers will be independent of plans and will have to be set directly at the app.\nThis was added by several commits, from 5803b947e to e71e16adfdc and the required migration was added in 02a3806ac59.. This running the installer from master, right? \nThe installer is already using the node-add cmd to add nodes which, at the moment, will only work on tsuru/api:latest. By default, the installer uses tsuru/api:v1.\nTo make the installation work on master, you can provide a configuration file with (tsuru install -c file.yml):\ncomponents:\n    tsuru:\n        version: latest\nThis wont be needed once we release the client and the api as tsuru/api:v1 will be updated with the new api route.\n. I think we could use naming conventions for this, e.g, every routable process should have it\u00b4s name prefixed with web-, e.g, the process web-abc would be adressable as  abc.<app>.<router address>.com.\n. We decided to keep the prefix as the pool name and added some replace magic to keep it a valid hostname.. Thanks for reporting @guestisp. Tsuru relies on the docker-machine driver to be able to open those ports, supplying the --<driver-name>-open-port to the driver and opening the needed ports.\nTo be able to automatically open this port (as done on the azure and ec2 drivers), we should add support to this flag on the google driver (in the docker/machine repo) as tracked by this issue.\nA note about manually opening the ports, when drivers do not support the flag, should probably be added to this docs section.. Docker machine PR waiting for approval.. As of fe13182a2 tsuru install will automatically open the 8080 port on google cloud.. Hi @guestisp, thanks for reporting this. I think you are facing the same issue described here. Take a look at my answer and see if that fix it for you.. Seems like you had some kind of permission problem when creating the node: \n\"Project with ID \\\"myproject-test\\\" not found. googleapi: Error 403: Insufficient Permission, insufficientPermissions\"\nCan you ssh into your core host and do a docker inspect on the api container? I would like to check how the IAAS_CONF env is set.\nI'll try getting access to an google cloud engine account in the following days so I can try debugging it.. Any chance your are configuring your google cloud credentials thru environment variables? These wont work since they need to be on the config file (to be sent over to the api so it can configure it's iaas). This should probably be added to the docs.. It seems that the google driver uses the default gce client, that looks for some .json file with the credentials. You probably have this file somewhere on your machine and the local google driver is able to use it.\nThe problem is that to be able to create the application nodes, the docker-machine iaas runs the driver in the api container and this file wont be available there.\nI think the installer should provide a way to create the application machines from the local driver, instead of using the docker-machine iaas as a fallback for situations like this one. We can also check if we can PR a change to the docker/machine google driver to be able to set the credentials directy, but I think thats not the usual gce way.\n. On amazon you can use amazonec2-access-key and amazonec2-secret-key which do not auto expire.\nA quick and temporary fix would be to do the same as the virtualbox driver here, using the local driver to create the nodes and registering them on the API. This would fix the installer but the docker-machine iaas configuration would still not work on this setup (so no autoscaling and healing as you said).\nThe google client also checks if we are on GCE and has a way to fetch the credentials from a metadata server, this should work from the api (and would fix all the issues without the need to copy the .json and mounting it on the API container) but I dont know why it is not. \nTry accessing http://metadata.google.internal from inside the machine provisioned with docker-machine and also from inside the tsuru api container and see what you get. Maybe that can help you debug this? I'll also try to get access to a GCE account to help you.. Could you try running curl from inside the api container? Go to the host where the api is running, get the container name and do:\ndocker exec -it <container-name> apk add --update curl && curl \"http://metadata.google.internal/computeMetadata/v1/instance/service-accounts/default/token\" -H \"Metadata-Flavor: Google\". that config is done by the environment variable IAAS_CONF on the tsuru api container. It is correctly configured since it was able to try to create the node using your project id(set on the conf).\nI'll be able to test the installer on google on the next few days. I can only guess now but I'm suspicious that the docker-machine google driver is not fetching the credentials from the metadata server correctly. I would try installing docker-machine on a vm at gce and try creating another machine from it.. I think you need to configure your instance to properly be able to issue commands to the google api from inside it.\nTake a look at https://groups.google.com/forum/#!topic/gce-discussion/f0PW-bGEWvk and https://cloud.google.com/compute/docs/access/create-enable-service-accounts-for-instances?hl=en_US. Looking at the google driver, the machine is created with some default scopes. \nI think we need to figure out what scopes are needed to create a new instance and run the installer with the google-scopes configured with the needed scopes. This should be added automatically on the installer (and documented).\nI belive this is what is needed to make the api installed with the installer able to create the nodes.. Im +1 for the .tsuruignore file without any configuration in tsuru.yml as first approach. Initial node container support for swarm was introduced.. When calling Shutdown and PowerOff the DO client tries to decode the response body. You should return some content on the fakeserver for these endpoints.. Running the build again, I think this failed randomly.. @felipeweb no, sorry for taking so long! thanks!. LGTM!. We could bring that code back (I would like to maintain the compatibility for at least one version, I don't think we need to keep this forever).\nI like the idea of having a help topic for each target (adding their related subcommands etc). . > Another solution would be combining a white list and black list approach. Where we would be able set the more appropriate list in each situation.\nI like the idea of being able to provide a white list or a black list. With this approach, I think it is better to keep relationship only on the router. The number of pools is probably way bigger them the number of routers and thus checking/updating this kind of information in each pool can give some maintenance burden.\nImagine having 3 different pools: dev, productionA, productionB and two routers production, development, we could:\n\nprovide a whitelist to development, enabling it on dev pool\nprovide a blacklist to production, enabling it on every pool except for the dev one\n\nThis way, when adding new production pools, router production would be automatically available. The UI would be something like this:\n+--------------+---------+----------------+\n| Name         | Type    | Availability   |\n+--------------+---------+----------------+\n| production   | galeb   | Excluding: dev |\n+--------------+---------+----------------+\n| development  | galeb   | Including: dev |\n+--------------+---------+----------------+\nA new cmd would need to be added to the cli to be able to set those lists.\n. I think we just need to figure out how we gonna handle the tsuru install case and im +1 for merging this! We should update the documentation regarding the new syntax  and also add documentation for each topic for the 1.3 release. Hi @avelino, thanks for this but we decided to keep the file creation date at the copyright headers. This seems to be the most common in other projects under BSD license.. LGTM, just added a doc comment. Left some comments, I think we should add some tests for this.. LGTM. Currently, there is no built-in solution for this, and it's very unlikely that we will get a tsuru discovery merged on prometheus core. \nIt should be fairly easy to build a small worker that fetches the /apps route on tsuru API to get every units addresses. This worker would then write a json file to be used by prometheus file discovery. \nAnother possible solution is to write a small HTTP server that implements our service API. You could bind apps that expose the /metrics to these service. The service would be called everytime a unit is added/remove and would be able to keep the json file up to date.. Hi, @brust, i've decided to do a little experimenting since I'm interested in this aswell. I was able to build a POC using jq and tsuru curl.\nThis gets all apps and output their units address (only the ones with the web process, adding a /metrics suffix) and also adds a prometheus label to each unit with its application name.\nbash\ntsuru curl /apps | jq -c '[.[] | .units | .[] | select(.ProcessName == \"web\") | {\"targets\": [.Address.Host+\"/metrics\"], \"labels\":{\"appname\":.AppName}}]'\nThe output is something like:\njson\n[\n   {\n      \"targets\":[\n         \"127.0.0.1:32769/metrics\",\n         \"127.0.0.1:32768/metrics\"\n      ],\n      \"labels\":{\n         \"appname\":\"tsuru-dashboard\"\n      }\n   },\n   {\n      \"targets\":[\n         \"127.0.0.1:32770/metrics\"\n      ],\n      \"labels\":{\n         \"appname\":\"static\"\n      }\n   }\n]\nThis has the disadvantage that every application will be targets for scrapping (even those without the /metrics endpoint). With the addition of application tags(#1550, #1556), to be released on tsuru 1.3, you will be able to filter applications based on tags and could use a tag to point what applications should be scrapped by prometheus, easily filtering them on the /apps endpoint.\nYou can run something like this every minute and write its output to a directory where prometheus fetches the config (he does the diffing between the current one and the new one).. Added a single comment (reinforcing the need to add more tests that call app.RollBackUpdate directly). LGTM, thanks. looks good, except for the error message (left a comment there). LGTM, thanks!. We already have a env that is used mostly on the tests: TSURU_DISABLE_COLORS, maybe we should just document it somewhere. I'm not sure we need a flag for that. LGTM, thanks. I think that is probably safer. I was able to reproduce this on 1.3.0-rc3. Thanks for reporting.. As discussed, I think volume-create should receive the pool as a parameter, instead of provisioner to account for the cases where we have multiple kubernetes clusters. Only apps from that same pool should be able to bind to that volume (even if two pools share the same kubernetes cluster).. Volume support was added to both swarm and kubernetes on an experimental version. Available on tsuru 1.4.. Solved by 994624023 and 3de38021f9f.\n```\n$ tsuru app stop\nError: tsuru wasn't able to guess the name of the app.\nUse the --app flag to specify it.\ntsuru remote not declared.\n``. Should we allow adding units **only** if all current units are started or should we allow adding units if there are some units instarting,error` etc states? ping @cezarsa @ggarnier . Your hosts:core:size should be 1 or you should provide a list with two ips\nEm 26 de jun de 2017 19:45, \"Nathan Flurry\" notifications@github.com\nescreveu:\n\nHello,\nI'm trying to install Tsuru using the experimental tsuru install and it\nseems to fail when attempting to add the second node to the swarm. Here is\nthe log:\n$ tsuru install -c tsuru-config.yml\nRunning pre-install checks...\nRunning pre-create checks...\nCreating machine...\n(tsuru-1) No SSH key specified. Assuming an existing key at the default location.\nWaiting for machine to be running, this may take a few minutes...\nDetecting operating system of created instance...\nWaiting for SSH to be available...\nDetecting the provisioner...\nProvisioning with ubuntu(upstart)...\nInstalling Docker...\nCopying certs to the local machine directory...\nCopying certs to the remote machine...\nSetting Docker configuration on the remote daemon...\nChecking connection to Docker...\nDocker is up and running!\nWaiting for SSH to be available...\nDetecting the provisioner...\nInstalling Docker...\nCopying certs to the local machine directory...\nCopying certs to the remote machine...\nSetting Docker configuration on the remote daemon...\nCreating registry certificate...\nUploading registry certificate...\nRunning pre-create checks...\nCreating machine...\n(tsuru-2) No SSH key specified. Assuming an existing key at the default location.\nWaiting for machine to be running, this may take a few minutes...\nDetecting operating system of created instance...\nWaiting for SSH to be available...\nDetecting the provisioner...\nProvisioning with ubuntu(upstart)...\nInstalling Docker...\nCopying certs to the local machine directory...\nCopying certs to the remote machine...\nSetting Docker configuration on the remote daemon...\nChecking connection to Docker...\nDocker is up and running!\nWaiting for SSH to be available...\nDetecting the provisioner...\nInstalling Docker...\nCopying certs to the local machine directory...\nCopying certs to the remote machine...\nSetting Docker configuration on the remote daemon...\nUploading registry certificate...\nError: failed to setup swarm cluster: machine tsuru-2 failed to join swarm: API error (503): {\"message\":\"This node is already part of a swarm. Use \\\"docker swarm leave\\\" to leave this swarm and join another one.\"}\nAnd here is my config:\nhosts:\n    core:\n        size: 2\n        driver:\n            options:\n                generic-ip-address: [\"\"]\ndriver:\n    name: generic\n    options:\n        generic-ssh-port: 22\n        generic-ssh-user: root\nThanks!\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/tsuru/tsuru/issues/1606, or mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ACzu4-RaOHPjmgHf8m67Z06PX0wSn2Msks5sIDSMgaJpZM4OF8dS\n.\n. Hey @NathanFlurry, thanks for reporting this (don't need to apologize). \n\nI think you are the first one to use the generic driver with multiple nodes and might have stumbled upon a bug (or at least something that should be better documented). \nThe generic driver requires ssh keys to be able to ssh to your nodes and setup docker (you can customize they ssh key path using generic-ssh-key). The first two nodes (the core nodes) are created from your local machine, and thus docker-machine is able to find the ssh keys on your default location(~/.ssh). \nThe third node, is created using the tsuru iaas (which is configured by tsuru installer to use the same driver as you did for the first two nodes). The problems is that the tsuru api node (and container) has no access to your ssh keys (and probably shouldnt).\nIn this case, I will fix the installer to handle the generic driver as it does for the virtualbox: create machines from the local machine instead of using the iaas from the api.. https://github.com/tsuru/tsuru-client/commit/679e27b33c356d2737018705f1efca79a91ce532 should fix this. This also happens for pools:\n$ tsuru pool add test\nPool successfully registered.\n$ tsuru pool add Test\nPool successfully registered.. This works on the swarm provisioner, so may be exclusive to the docker provisioner. hey @brunoarueira, I'm sorry but i've just commited a fix to fix the pool issue by using the same validation as we do for the app name (https://github.com/tsuru/tsuru/commit/089f3488acafb54c2dc49bfe383987ddc8dc8e04)\nIf you want, you can just update this PR to fix the team name case, by using the validation.ValidateName, and force push this branch with the changes from master.\n. hey @brunoarueira, are you still working on this?. LGTM, thansk @brunoarueira . The shutdown output is now:\ntsuru is shutting down, waiting for pending connections to finish.\nrunning shutdown for node healer...\nrunning shutdown for log pub/sub connections...\nrunning shutdown for log pub/sub connections. DONE.\nrunning shutdown for *http.Server...\nrunning shutdown for queued tasks...\nrunning shutdown for node healer. DONE.\nrunning shutdown for *http.Server. DONE.\nListening stopped: http: Server closed\nrunning shutdown for queued tasks. DONE.\nThe Stringer thing was added so the output for http.Server would look a bit better.. @cezarsa I think we still have some dependencies on gorilla/context, namely, the gandalftest uses gorilla/pat that currently relies on gorilla/context. I think we can try doing a PR and seeing if they do accept it but do you think this blocks this PR?. LGTM overall except for a few comments. PTAL @cezarsa \n. PTAL @cezarsa @ggarnier . Hi @VitorFalcao, thanks for reaching out. We have decided to implement this as a standalone project: https://github.com/tsuru/kubernetes-router that implements tsuru Router API. So this issue won't be implemented as is.\nI'll open some issues to kubernetes-router in a few days so others can contribute.. LGTM, left just a single suggestion for docs. PTAL @ggarnier . Closed by https://github.com/tsuru/tsuru-client/pull/88. We should probably mention that platforms need to be updated. I'd suggest adding: https://github.com/emerleite/tsuru-bluegreen\nThanks!. @VitorFalcao yes, i think so.. I think we could return 400 in this case.\nEm 16 de out de 2017 19:23, \"Nope\" notifications@github.com escreveu:\n\n@andrestc https://github.com/andrestc The updateCluster method of\napi/cluster already has a 404 code specified for when the cluster does\nnot exist. Is there any problem in returning the same code for when a pool\ndoes not exist?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/tsuru/tsuru/pull/1783#issuecomment-337047505, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/ACzu41LVcEvlg0InNDAPEytXS-wcmJVgks5ss8kvgaJpZM4P5__T\n.\n. Thats ok, just make sure to add a message describing the error cause in the\nbody of the response\n\nEm 16 de out de 2017 19:39, \"Nope\" notifications@github.com escreveu:\n\n@andrestc https://github.com/andrestc The method already uses that code\nfor Invalid data\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/tsuru/tsuru/pull/1783#issuecomment-337051471, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/ACzu4waatB3lLe-5xjMjfz-LHaOTC7ufks5ss8zygaJpZM4P5__T\n.\n. Should I add the block containing lines 463-473 to the if block in line 437 in api/app.go?\nI think its ok as is. How are the routers configured on tsuru.conf?. Hi @philm, the \"router:type\" configuration must be changed to \"planb\". The tls feature is exclusively implemented by planb. Can you change it and tell me if it works?. We should probably delegate this action to the RebuildRoutes func, done after deploying to the provisioner. As a bonus, we should store the healthcheck data on mongo to be able to restore it when routes rebuild is called from the cli.. Thanks, @JonathanAlcantara. Reach out if you need any help.. This is something we plan to add in the future, but probably as one namespace per pool.. @harshapic we adressed this by supporting a namespace per pool.. done, @ggarnier.. Hi @jnana-rb, sorry for taking so long to answer this.\n\nThe correct configuration is:\nvolume-plans:\n  ebs:\n    kubernetes:\n      storage-class: standard\nI'll update the docs accordingly.. Closed by https://github.com/tsuru/tsuru/pull/2007. This log output is somewhat strange, I suspect there is something fishy about\ndocker-machine in your setup:\n\nThis machine has been allocated an IP address, but Docker Machine could not\nreach it successfully.\nSSH for the machine should still work, but connecting to exposed ports, such as\nthe Docker daemon port (usually :2376), may not work properly.\nYou may need to add the route manually, or use another related workaround.\nThis could be due to a VPN, proxy, or host file configuration issue.\n\nWhat OS are you running on the host machine? Can you also provide the contents\nof both configuration files?\n. Ref #1992.. Link to the failed integration test run: https://circleci.com/gh/tsuru/integration_gce/362. Also https://github.com/tsuru/tsuru/issues/1530. LGTM. I re-triggered the tests because it failed randomly.. We have no plans to deprecate native docker support. On the other hand, we also have no plans to add more features to this provisioner as they would demand lots of work. . Thats why we dont have plans to remove docker-cluster support.\nBut we also lack arms to be able to add more features to it. As an example, orchestrating volumes is hard and would require lots engineering effort to implement.. PTAL, @ggarnier . Thanks!. @cezarsa can we merge this?. LGTM, thanks!. I'm a bit worried about compatibility issues with docker-cluster. Currently, the CpuShare field on docker pools is used to configure the --cpu-shares on docker. I think using ResourceCPU from the CpuShare plan field would make plans work either on docker or on Kubernetes and never on both. \nOn docker, we use the CpuShare to set the --cpu-shares flag:\n\nSet this flag to a value greater or less than the default of 1024 to increase or reduce the container\u2019s weight, and give it access to a greater or lesser proportion of the host machine\u2019s CPU cycles. This is only enforced when CPU cycles are constrained. When plenty of CPU cycles are available, all containers use as much CPU as they need. In that way, this is a soft limit. --cpu-shares does not prevent containers from being scheduled in swarm mode. It prioritizes container CPU resources for the available CPU cycles. It does not guarantee or reserve any specific CPU access.\n\nI think the best approach would be to add a new field to plans, to be used as ResourceCPU on Kubernetes and as --cpus flag on docker:\n\nSpecify how much of the available CPU resources a container can use. For instance, if the host machine has two CPUs and you set --cpus=\"1.5\", the container is guaranteed at most one and a half of the CPUs. This is the equivalent of setting --cpu-period=\"100000\" and --cpu-quota=\"150000\". Available in Docker 1.13 and higher.\n\nBut I would like others to also give opnions on this.. I see some mixed environments especially with users that want to start and try using tsuru with Kubernetes before committing to it. Whats your take on this, @cezarsa ?. PTAL, @ggarnier \n. We haven't been able to experiment with any of the alternatives. I think the main challenge is to find a library that is able to abstract away many cloud providers behind a common interface.\nIf docker/machine still receives bug fixes, I guess it's okay to keep it until an obviously better solution is created by the community.. Yes, thanks @tkivisik. This was fixed by tsuru/tsuru-client#106. I agree on filtering on the API, but we might need to also filter on the client just to make sure that a newer client doesn't show all existent volumes if the user is running older version of the API (one that does not support the filter).. I think we could merge this as is for a 1.6.x release, since the update is broken atm and work on implementing the volume migration ASAP.. Thanks!. LGTM.. Thanks for contributing! Left a few comments about minor issues.. PTAL @cezarsa \n. Looks good, you can proceed with the tests. LGTM.. This does not make sense. Release branchs are kept and never merged back into master.. If tsuru.yaml has nothing configurated under kubernetes: we should keep the current behavior (first process or the process called web exposes the 8888).\nIf tsuru.yaml has anything under kubernetes: I think its better if we require that every open port should be explicitly set (more secure and Its what I would expect). So the following yaml means that no port is being exposed on the worker process.\n```\nkubernetes:\n  groups:\n    mypod:\n      web:\n        ports:\n          - target_port: 8000\n      worker:\n````\n. @cezarsa maybe we should add a compatibility matrix between tsuru and kubernetes somewhere on our docs?\nAnd make the provisioner fail as soon as it detects a cluster running an known unsuported version?. I think it should be forget instead of forgot. I would also change stay for is placed\n. I would use to instead of for\n. pushing instead of push\n. simple instead of simples\n. I would just say Creating the app\n. I think the +++++++++++++++++++++++++++++++++++++++++++++++ lines need to be the same length as Building a development environment with Docker Compose. else sphinx complains. I think  is missing here. You should check if the iaasName iaas a valid iaas name (it exists).. I think you don't need the first check: (dbTpl.IaaSName != iaasName).. I would try to be a little more carefull here, something like:\ngo\nif err != nil && err != mgo.NotFound {\n    return err\n}\nif err == nil {\n    return &errors.HTTP{Code: http.StatusConflict, Message: fmt.Sprintf(\"template name \\\"%s\\\" already used\", paramTemplate.Name)}\n}\n... the rest of the code here.. I think we could create the event before checking for the template existence. I think it's good to have this failure recorded on the events.. Is this customHandler really needed?. I think this CustomData should not be an app.DeployOptions, It should probably be created from the request form values with event.FormToCustomData. I don't think this event needs to be cancelable. not needed once we add this to the CustomData when creating the event. this should be added to 1.3 instead of 1.0. I dont think all errors from app.RollbackUpdate should be treated as http.StatusNotFound. This should be kept as 2013 (the year when the file was created).. Same as commented before.. Same as commented before.. Same as commented before.. Same as commented before.. I think this should be \"while disabling rollback\" instead of \"enabling\".. I dont think http.StatusConflict is the right choice here, e.g, if the image is not found we should probably return a BadRequest and for generic errors we should return InternalServerError.. I think the errors here are backwards: first case should be http.StatusBadRequest. You actually do not need the second case (you can just return the error directly and it will be represented as a http.StatusInternalServerError by our error handling middleware.. Maybe we could define these as structs so we can keep the context? (what image and what version were not found?)\nCheck this example here.. I think you could add more tests to this func (the same cases your did for the handler, but calling app.RollBackUpdate directly) as @cezarsa said. The rest lgtm. I think we could use a empty slice of contexts here (instead of getting the contexts from the user token) so we also take into account apps that the user has no permission on.. I think \"This pool has apps, you need to migrate or remove them before removing the pool\" reads better. What do you think?. PermPlatformUpdate is actually used by admins to update platforms installed in tsuru (we should not use it here). We can add a new permission, e.g 'PermAppImageReset', to check here.. yes!. should add \"or platform\" to this error message.. I think we could check here if app.Platform is different then p.Name and only if thats true, set app.UpdatePlatform to true.. I think an http.StatusBadRequest would fit better here. Also, perhaps we should allow rollback too (cc @cezarsa)? Maybe we could move this logic to the app.ValidateOrigin func.. should be something like \"update role\". should this be newName == \"\" || newName == name?. I think you can write this as:\n((opts.App.GetPlatform() == \"\") && (opts.Kind != DeployImage && opts.Kind != DeployRollback)). s/pool/team. Why trimming here?. using validation.ValidateName both Abacaxi and TEAM become invalid names, so I think the error to check should be ErrInvalidTeamName. could you also wrap this message on an \"ValidationError\" from the tsuru error package?. maybe capitalize  X-Agent-Version?. same as above. i would just return http.StatusBadRequest here as http.StatusUpgradeRequired actually means that the protocol version is not supported. maybe use one of the clients in https://github.com/tsuru/tsuru/blob/master/net/client.go#L37?. much better. this should be \"1.4\" instead of \"1.0\" as the route is being added on tsuru v1.4.. please, remove the blank lines between statements. You can pass down the Team as a filter to app.List() so you don't need to loop over the returned apps\nsomething as: app.List(&app.Filter{Extra: map[string][]string{\"teams\": team.Name}}) . You could use provision.ListPoolsForTeam. Before doing anything, I think you should probably check if the user token t has permission to read the team information, using PermTeamRead. You can see how other handlers do that, e.g,  https://github.com/tsuru/tsuru/blob/master/api/app.go#L230.. We should probably have a different list of apps that include only the ones owned by the team. You can use the TeamOwner field on the app.Filter.. This should be a map[string][]string and all fields should just include the name, e.g, instead of users being the apiUser struct, should just include the user names. yes, It would be nice to add tests to the handler also.. What version of tsuru client are you using? I cant do that:\n$ tsuru pool constraint set pool1 shalsh-gnr team1\nError: invalid constraint type. Valid types are: team,router,service. maybe we can add some sections on how to add and update clusters? I can work on that on a next PR.. I would add: Node containers, e.g big-sibling, are also.... use user instead of customer maybe?. just a nitpick: maybe we should call this KindNames?. This should be 2017. Maybe add that this plugins are maintained by the community. Is this needed? e.AckCancel returns nil when the event is not cancelable: https://github.com/tsuru/tsuru/blob/71a5faae63ac65f0263578e08a5722349aa94b1d/event/event.go#L1006. I think it would be better to go for http.StatusBadRequest as we've been using http.StatusForbidden for credentials only.. done. nice catch. updated. I don't think so. Ref: https://docs.tsuru.io/stable/services/api.html#additional-info-about-an-instance\n404: when the API doesn\u2019t have extra info about the service instance. There\u2019s no need to include anything in the response body.\nAlso: https://github.com/tsuru/tsuru/blob/master/service/endpoint.go#L371. Yeah, I got misled by the docs: https://docs.tsuru.io/stable/services/api.html#additional-info-about-an-instance\nI'll fix this.. APITokenGet looks more common for an API.. application/json. I think I'd use UserGet (ignoring the /info on the endpoint). Maybe just: API Token.. Same as above. Just SSHKeyAddData?. UserGetResponse. UserQuotaGetResponse. I think we can drop the consumes here.. application/json. done. Good idea.. I think there is no way this handler will return 401 (it will return 204 for a user that has no permissions). This is already handled by the middleware: https://github.com/tsuru/tsuru/blob/master/api/middleware.go#L119. This is already handled by the middleware: https://github.com/tsuru/tsuru/blob/master/api/middleware.go#L119. I think we agreed to use Get here, e.g: WebHookGet. nit: I think we could refactor this function to use a map string -> TargetType. Just curious: any specific reason for this, instead of calling <-ctx.Done() from within the select statement?. \ud83d\udc4d . sleep 3 for compatibility with docker-cluster?. I think renaming this to DEPLOYAGENT_DOCKERFILE_BUILD would make this clearer. I think we could extract the tar creation logic to a common place shared by the builders. I think we could extract the tar creation logic to a common place shared by the builders. nice catch. updated. Maybe we could use custom decoding for the service.Broker type?\nhttps://github.com/ajg/form#custom-marshaling. I think we should start checking the error on every r.ParseForm() call.. Perhaps we should return \"\" here?. I think it would be better here if we tested that only the app name is set, e.g:\nc.Assert(apps[0], check.Equals, App{Name: \"app1\"}). Instead of using a []interface{}, I think it is better to use a []miniApp here and then set each miniApp's name on the loop.. Hi @juanjcsr, thanks for getting back. I was thinking about this issue one more time and I think we could simplify (pun not intended) our approach:\nInstead of using nameOnly as a query flag, we could use simplified then simply return the entire miniApp without the units (which is the complex part). You could do that just by skipping the call to app.Units if this flag is set.\nWhat do you think?\n. These comments are not really necessary.. This should be in: formData. The process field should be a string and its not required (a user may request that the whole app be restarted).. I think we can use minifyApp here, passing a AppUnitsResponse with .Error = nil and .Units = nil.. I decided against it because image.SplitImageName always returns a \"latest\" tag and it is not possible to distinguish when one was actually passed or it was set because there was no tag. I think the edge cases only apply to image names (such as handling the repository path and so on). . I think you can remove the \\n here:\nsuggestion\n        fmt.Fprintln(w, \"OK\"). I think this doesn't need to be set to debug, a regular Print looks ok.. Nit: Could not connect to the log database. 2019. I think ClusterProvisioner is more clear (since we can update and delete cluster, CreateClusterProvisioner seems a bit off).. suggestion\nduring server execution (after loaded by server) this feature will gracefully. suggestion\n    stopCh chan bool\n    stopDoneCh chan bool. suggestion\n    close(cv.stopCh)\n    select {\n        case <-cv.stopDoneCh:\n            return nil\n        case <-ctx.Done:\n            return ctx.Err()\n     }. suggestion\n                                        cv.stopDoneCh <- true\n                    return. ",
    "tupy": ":clap: \n. +1\n. ",
    "nightshade427": "Ya, I don't like the automatic idea either. Manual admin command that doesn't bring down the app while rebalancing would be perfect.\n. I think as long as the rebalance doesn't bring down the app and obeys the scheduler node partitioning info, it would be okay to automatically rebalance. But, I would be happy to have even a manual admin command.\n. Talking on irc a few months back sounded like it was going to be started that week. Was wondering if there was any progress on this so I can update my ops team. Thanks again for the awesome project :)\n. Inside Procfile\nweb: xxxxxx\nworker: yyyyyy\n. Right that's what the feature request is for :)\n. It just randomly hangs. This is with one nodes or multiple.\nThanks for looking into this. :)\n. Ya, it just randomly hangs after a few days. Going to be hard to reproduce I think. But, it does happen a lot :(\n. Sounds good :)\n. worked like a charm, thanks :)\n. +1, that means I can give an even higher number to avoid full builds an keep faster path longer. Would this configuration be per app?\n. You mentioned to expose the configuration of the default of 10, so you can change it to 1. I was just saying if it was exposed so you can set it to 1 I can instead set it to 100 and enjoy faster deploy path longer (default is 10). \nI was also wondering if this configuration was for all of Tsuru or on a per app basis?\n. Part of app create as optional parameter would be great. That would be most flexible I would think.\n. I tested it and send to work. Only issue I had was hipache dependencies inside tsuru ppa are wrong and load wrong version of node.\n. 13.10 saucy \nThanks for looking into it :)\n. Yep working here as well. I had to stop using hipache/node from tsuru ppa since it doesn't seem to work on saucy. But, I now use latest hipache from npm and all is well. :)\n. ```\nroot@p:~# tsr version\ntsr version 0.3.8.\ntsuru version 0.8.9.1.\n.\nClient version: 0.8.1\nGo version (client): go1.2\nGit commit (client): a1598d1\nServer version: 0.8.1\nGit commit (server): a1598d1\nGo version (server): go1.2\nLast stable version: 0.9.0, please update docker\n. I have tried 0.7.x, 0.8.x, 0.9 all have same error.\n. This is using latest tsuru and docker-registry from tsuru ppa on Ubuntu 13.10\n. I can push image into the docker-registry and remove them fine. But, it seems when tsuru tries to deploy containers the docker-registry endpoint for getting at specific image doesn't work?\n.\n{ \"_id\" : ObjectId(\"532ddf1fe7bb07aa8237a991\"), \"id\" : \"\", \"appna\nme\" : \"abyss\", \"type\" : \"python\", \"ip\" : \"\", \"hostaddr\" : \"\", \"ho\nstport\" : \"\", \"status\" : \"created\", \"version\" : \"\", \"image\" : \"\",\n \"name\" : \"ebac898f9c6d8b7f5957\" }\n```\ndocker ps shows no running containers.\n. Thanks for looking into the issue. :)\nNo, it happens constantly. I can't deploy any containers at all. I always have this error no matter what platform and app I deploy. I have tried php, python, lisp, ruby using various apps. \nAbout a month or so ago I used to be able to deploy containers fine.\n. Wow! That was fast, thanks :)\nAny idea when it will be in ppa?\nAnything I can do help? Maybe help test?\n. Should I follow http://docs.tsuru.io/en/latest/contribute/setting-up-your-tsuru-development-environment.html?\n. Awesome will test out first thing tomorrow and report back. Thanks :)\n. same error, version\ntsuru version 0.8.10\ntsr version 0.3.9\nIf I do a manul docker pull from registry I can pull the app image fine docker pull localhost:8080/tsuru/abyss. Somethings is happening when doing a git deploy, it build images, puts them in registry, then fails with the above image missing error when trying to start a container/unit.\n. Okay here is something interesting. If I remove all images from tsuru's local docker so that they only exist in registry, and do a clean app-create; git push, I get\ngit push tsuru master\nCounting objects: 4861, done.\nDelta compression using up to 8 threads.\nCompressing objects: 100% (2374/2374), done.\nWriting objects: 100% (4861/4861), 3.13 MiB | 0 bytes/s, done.\nTotal 4861 (delta 2401), reused 4448 (delta 2067)\nremote: No such image\nBut if I pull the base python image locally I can git push fine with no errors, but log shows error for missing the abyss image from above. This makes me thing that docker and docker-registry is working since tsuru can push and remove images from registry and such, and I can manually using the docker commands pull the app images that tsuru placed there in the registry. This means that something in tsuru app deploy workflow cant pull images from registry for some reason?\n. Sure, posted registry part above, but here is full config just in case:\n```\nlisten: \"0.0.0.0:8081\"\nhost: http://p.fqdn.com:8081\ndebug: true\ngit:\n  unit-repo: /home/application/current\n  api-server: http://127.0.0.1:8000\n  rw-host: p.fqdn.com\n  ro-host: p.fqdn.com\nauth:\n  # token-expire-days: 7\n  # hash-cost: 10\n  user-registration: true\nprovisioner: docker\nhipache:\n  domain: fqdn.com\ndocker:\n  servers:\n    - http://n.fqdn.com:4243\n    - http://p.fqdn.com:4243\n  collection: docker-containers\n  registry: p.fqdn.com:8080\n  repository-namespace: tsuru\n  router: hipache\n  deploy-cmd: /var/lib/tsuru/deploy\n  ssh-agent-port: 4545\n  seggregate: false\n  scheduler:\n    redis-server: 127.0.0.1:6379\n    redis-prefix: docker-cluster\n  run-cmd:\n    bin: /var/lib/tsuru/start\n    port: \"8888\"\n  ssh:\n    add-key-cmd: /var/lib/tsuru/add-key\n    public-key: /var/lib/tsuru/.ssh/id_rsa.pub\n``\n. Yeah there was copy paste issue, sorry. Check above, I updated it. :)\n. Same error :(\n. The containers aren't even started viadocker ps`, its empty list. Mongo data is shown above. But, from look of things I don't even think it got far enough into the deploy workflow to add stuff to routing (redis). Its almost like tsuru can't pull images from registry. But I can use docker commands to do so. I'll take a look in redis though and see if anything is there.\n. Redis\n1) \"docker-cluster:image:p.fqdn.com:8080/tsuru/abyss\"\n2) \"docker-cluster:nodes\"\n3) \"frontend:abyss.fqdn.com\"\n4) \"docker-cluster:node:server0\"\n5) \"docker-cluster:node:server1\"\n. All values look correct as well for each key, abyss front end only had \"abyss\" in it as it didn't get a chance to enter in routing info before it died. But, rest all have correct values. It's really like tsuru can't pull image from registry just place them into registry and remove them registry.\n. Yeah it fresh everything, i redeployed the cluster.\n. Going to deploy single mode, one docker node, no registry, and see if I still get the error. I really think it's something in tsuru not pulling from registry correctly.\n. Yeah I'm using multi node and default most everything.\n716 is related to #715 which was closed? So is it still an issue? Or another issue with similar symptoms?\n. Awesome!!!\n. Yeah I did new single node cluster with docker registry and deployed so must be scheduler. Thanks, looking forward to the fix. Let me know when it's in ppa and I will test it out :)\n. Deploying cluster now, well let you know shortly, thanks!!\n. Worked!!! \nThanks so much :)\n. Yep :)\n. Is gorouter as good at handling long running requests as hipache? Hipache is async so on long running requests it is able to fulfill other requests no problem without using a bunch of threads. Does gorouter operate similarly?\n. Awesome, because I really love that I only need a thread a per core with hipache and can still keep up with lots of load. If we switch to gorouter and keep this behavior it would be awesome because we wouldn't need yet another dependency (node in this case).\n. Doesn't hipache use multiple CPUs and cores? Looks like it uses cluster module to do this. It also manages it memory so each managed process is kept in check and doesn't take over too many resources.\n+1 if we can keep this one thread per core/cpu async behavior and keep dependencies down (which it looks like is the case)\n. I looks like hipache supports this just fine. Can we surface this in Tsuru somehow?\n. https://github.com/dotcloud/hipache/blob/master/README.md#wildcard-domains-support\n. If I do set-cname *.myapp.configured-domain.com I get \"Error: Invalid cname\"\nIf I do set-cname it.myapp.configured-domain.com I get \"Error: Could not setCName route: Invalid CNAME it.myapp.configured-domain.com. You can't use Tsuru's application domain.\"\n. Any traction on this issue?\n. ",
    "heynemann": ":+1: \n. You are very welcome!\n. AWE-SO-ME!\n. ",
    "jblancett": ":+1: can this be brought back up?\n. @guestisp original post has the use case\n. scale each process in procfile independently without having to deploy them as separate apps with different procfiles\n. @fsouza sounds like that would remove the possibility of having all processes under 1 roof (current method)?\n. imo scaling them out independently should be optional - but I'm open to whatever\n. this is with latest master\n. I can't seem to find where this dependency actually comes from, its not in the Godeps.json\n. my server kept locking up during compile so I gave up on compiling it and used the latest .deb since there was a release yesterday.  thanks\n. Yep\n. :+1: has there been any more consideration on this?  Would definitely be useful.\nCurrently the only way I know of to do this is do a platform-update and then redeploy the app with a small insignificant change.  Not really the best approach\n. :+1: I like this idea.  There would also need to be a way to add a 'deploy' rsa key of sorts that would be deployed to each unit so it would have access to pull from private git repos.\nAdding that deploy key to each unit would be really helpful too because if any dependencies are private they could also use that key.\nFor example, I have some rails apps that pull a few private gems.  To get it to work in tsuru I had to create a read only deploy user and hardcode the username and password into https:// strings in the Gemfile.  Would be able to use traditional git url with above approach\n. @cezarsa oh thats a great workaround I wasn't aware of!\nI understand the issue with the worker processes, I too have some apps that will need to run workers.\nI was thinking the check could be configurable, with just a few basic options like tcp check, http response check, or no check.  Configured in the app.yaml or something like that.\nSince you mentioned workers, has multiple tasks in Procfile been implemented to be able to use workers?  like mentioned here: https://github.com/tsuru/tsuru/issues/647\nI wasn't aware of a way to deal with workers other than commiting a different Procfile to the worker 'app'\nI would imagine implementing that would make configurable health checks per app even more tedious since it would be different per Procfile task per app\n. Thanks for the tips!  I definitely see what you mean.\nI love that you guys have kept things so clean and simple, its why I love tsuru! So wouldn't want to change that.\nMaybe a simpler short term solution to above issue is just have a configurable delay before switching to the new containers.  So if you know your app takes about 2 minutes to start up, you could set the delay to 2 minutes to compensate.  It wouldn't be perfect, but would be better than it is now.  There could even be a global option set in tsuru.conf and a way to override it per app in app.yaml\nThen health checks could be addressed later\n. awesome! thanks!\n. for reference, the health check is configured in tsuru.yaml http://docs.tsuru.io/en/0.7.0/using/tsuru.yaml.html\n. after talking with @fsouza in irc, he pointed out removing the pre-stop stanza from the init script fixes this issue.  I then came across https://bugs.launchpad.net/upstart/+bug/703800\nso it is a long standing known bug in upstart\n@fsouza said pre-stop will be removed, so this issue can be closed\n. I like this idea.  Makes it more obvious this is a tsuru specific file\nAlso would like some clarification, does this file get used with both spellings of the extension? (yaml vs yml)  I've seen both used in different places\n. nice! thanks\n. nice and simple solution.  leaving this here for reference:\nhttps://github.com/tsuru/basebuilder/commit/4150cf3f1b6dd40ef94db195b6ef47af369bf764\n. :+1: love this idea!\n. :+1: any more thought been put into this?  Would be great to use the healthcheck for more than just deploys\n. thanks!\n. maybe the restart subcommand could have a flag you pass to it, like --rebuild or something, that forces a rebuild of the units instead of just restarting the process\n. thanks @cezarsa!  It looks like the units are getting replaced instead of restarted, this is done without any downtime?\n. sounds great! looking forward to it - thanks\n. oh nice! I'll get a pull request up to add that to docs here shortly.\n. I had thought about that as well. done\n. :+1:  this is troublesome when trying to switch from dead targets\n. :+1: \n. :+1:\n. you can add a flag to dh_installinit, I'll get a pull request up shortly\n. so normally dh_installinit would be doing this automatically, but I believe because of the --no-start flag added to it in the rules file, it is not.  So either this will need to be removed, which I believe has been discussed before, or we could add a bit to the postinst script to check for TSR_API_ENABLED in /etc/default/tsuru-server, and execute a restart if that is a yes and service is already running.\nWhich approach would be preferred?\n. :+1: templates would be an even better solution\n. btw I meant to say tsuru.conf there, the main config.  Not a different default for each app :X\n. I also tried manually adding the region param to an existing node, but on delete still got the same error:\nError: region creation param required\nAlso just to clarify:  when I do get the above error, the node does get removed from mongodb, just doesn't get terminated.\n. @cezarsa thanks!\n. :+1:\n. Bringing this back up since the addition of new router options makes it even more important.  Need a way to migrate if changing routers\n. nice thanks!\n. :+1: \n. @cezarsa looks like its been merged now :)\n. https://aws.amazon.com/blogs/aws/now-available-new-c4-instances/\nWith these brand new instance types, ebs-optimized is automatically selected\n. this is great news! thanks :)\n. The multiple hipaches is already possible by using redis slaves.  Tsuru only needs to write to the redis master.\n. I believe its better to not have to specify all your routers in tsuru.conf.\nTsuru only needs to write to the primary redis, which is then distributed to the slaves via pubsub\nThis means you can scale out the routers independently of tsuru and tsuru doesn't even have to be aware of where they are.\nto put it simply, pubsub > push\nI really hope tsuru doesn't move away from this possibility by making you specify all of your routers\n. @cezarsa I understand now thanks for clearing that up!  Sounds like a good plan :+1:\n. @kinosang have you seen the tsuru-dashboard? Maybe you can expand upon it to do what you want.\nhttps://github.com/tsuru/tsuru-dashboard\n. Another thing that would make the containers smaller is using debian as a base instead of ubuntu\n. :+1: this is awesome love this idea!\n. @andrewsmedina any idea why it is that app-shell doesn't work through a reverse proxy like that?  Some kind of weirdness in the headers or something?\n. I've been trying to get it to work through nginx.  I do have upgrade headers set up for websockets what else would it need?\n. @fsouza thanks for that would love to see this implemented :)\n. this was fixed via https://github.com/tsuru/tsuru/issues/1148\n. its working through mine\n. I take that back, my mistake >.<\n. sounds good @cezarsa thanks!\n. excellent, thanks! :)\n. :+1: and related to #1094 \n. @cezarsa how does this work out across multiple docker nodes?\n. :+1: makes sense to me\n. this turned out to be a problem with my service api, sorry for the confusion. closing\n. Maybe there could even be a configurable amount of time where tsuru would automatically do this if the app image gets too old\n. ahh yes I can see how that would be an issue.  if the app is deployed via app-deploy it does it even still use archive-server?\n. :+1:\n. Another thought on this.  If number of expected units for an app were stored in the database, rather than just counting the number of active units, it would avoid this problem all together.\n. ",
    "gmeans": "+1 discussed in IRC\n. ",
    "morpheu": "Closing issue since tsuru-server last stable release is now builded for AMD64 Raring \n. You're right ... I will fix it and release a new version in a few minutes ... thanks\n. New package available ... closing issue\n. @hfeeki, tsuru now depends on libdevmapper which version isn't yet available on ubuntu. You should include another ppa to fix missing depends - sudo apt-add-repository ppa:tsuru/lvm2 -y && sudo apt-get update.\n. Swap should always be memory value + desired swap size, eg: memory size 512Mb, swap should be 1024Mb if you want 512Mb of swap. If swap value is set to a value less than memory size, lxc will throw an error.\n. It's a bug cause if you run rebalance today, tsuru will move containers\nfrom one segregated pool to another.\nPaulo Sousa\nEm 17/06/2014, \u00e0s 20:37, Andrews Medina notifications@github.com escreveu:\nI think that it is not a bug. Rebalance by cluster should be an option.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/tsuru/tsuru/issues/823#issuecomment-46379639.\n. Now tsuru works with customs ppa archives. You should add repositories.apt to your project with ppa archive format lines.\n. I've found an example used by a npm module. Basically, it's a post-commit hook which auto-generate git tag based on package.json version - https://coderwall.com/p/mk18zq. We could use similar approach checking some file - maybe tsr/main.go ? - or any other file with tsuru version.\n. Fixed on new tsuru-client package. Now tsuru-client replaces old tsuru package\n. Hi Marc,\nThis error message only occurs when target is already set and target maybe is down. Today, when user forget to set a target he receive a message: \"Error: No target defined. Please use target-add/target-set to define a target.\"\n. I've deleted superseded tsuru-server from PPA - which also used to generate old tsuru client. Thanks!\n. Fixed with latest tsuru-client and tsuru-admin packages on PPA\n. Yes, it's a docker issue already reported here: https://github.com/docker/docker/issues/7276\n. Already fixed with commit https://github.com/docker/docker/commit/aab89e8179561a69128ecc495d1fcf62fa6a4b0f - adds ptrace rule to allow ptracing ourselves - but not released yet.\n. Unfortunately, no :( Even if you manually edit apparmor docker policy,\ndocker will always rewrite it on restart.\nOn Wed, Jan 7, 2015 at 8:24 PM, Jonas Kac notifications@github.com wrote:\n\nHey!\nIs there a working solution for this? The docker solution doesn't seem to\nhave been release yet, and this is making my system to feel like jelly.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/tsuru/tsuru/issues/997#issuecomment-69103522.\n. Starting with docker 1.3.0, there is an extra option on docker run,  --security-opt,  which allow us to choose a different apparmor profile other than docker default built in. Tsuru should support an extra option on conf for docker apparmor profile. According with ptrace docker issue, we just need to create a profile based on docker default including \"ptrace peer=@{profile_name}\" - I tested it and works fine :)\n. I figure out that problem lies in app-shell trying plain http request on SSL endpoint\n. fixed on tsuru/tsuru-unit-agent@e75e8af\n. Thanks!\n. +1 for remove it\n\nOn Fri, Apr 15, 2016 at 3:12 PM, Andrews Medina notifications@github.com\nwrote:\n\n+1 for removing guessing name based on directory name.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly or view it on GitHub\nhttps://github.com/tsuru/tsuru/issues/1404#issuecomment-210570382\n. No, ppa:tsuru/ppa is currently deprecated. Tsuru packages are now hosted by packagecloud.io - including support for Red Hat distributions. Here is the link to tsuru doc about package cloud packages installation. . Ok. Method is now escaped as well.. \n",
    "cweagans": "The way that Flynn handles this is by having a Ceph service, and you connect your app to that service. I don't accept that using s3 is a good solution. If I'm going through all the trouble of hosting my own PaaS, why would I offload file storage to somebody else?\n. I think it uses Ceph Block Storage, but personally, I'd rather use something like NFS.\n. There are a few applications that don't support using S3 as a storage service. For those applications, it would be cool if the platform could compensate a bit, though I agree that building a full-blown network-backed redundant storage service is totally out of scope and too complex.\nI'd suggest creating a service that's basically an S3 gateway. The container would simply mount s3 inside, and then expose NFS mounts when new instances of the service are created. This way, the data container can be responsible for authenticating with S3 and handling those details, and the only thing the consuming containers need to worry about is mounting an NFS volume from the Storage service.\nWould this be a reasonable middle-ground? I know mounting S3 isn't really ideal, but it certainly helps those apps where application-level S3 management isn't desired or possible.\n. ",
    "lynxnathan": "Hi, is this related to #666 ? I'm also hitting this lovely numbered issue.\n. ",
    "jezdez": "I tried the docker docs again today, after the new release. But sadly I was not able to successfully deploy. I was able to push the code of a Python app to the server, but not deploy step was shown during the git push. It simply showed that:\n<Pal:jezdez> ~/Code/git/jezdez [git:master] $ git push tsuru master\nPseudo-terminal will not be allocated because stdin is not a terminal.\nCounting objects: 1708, done.\nDelta compression using up to 4 threads.\nCompressing objects: 100% (1577/1577), done.\nWriting objects: 100% (1708/1708), 544.98 KiB | 0 bytes/s, done.\nTotal 1708 (delta 1066), reused 0 (delta 0)\nTo git@websushi.org:jezdez.git\n * [new branch]      master -> master\n<Pal:jezdez> ~/Code/git/jezdez [git:master] $\nAny way to debug this?\n. @fsouza Yep:\n```\nroot@websushi:/home/git/bare-template/hooks# ls -la\ntotal 12\ndrwxr-xr-x 2 git git 4096 May  7 07:58 .\ndrwxr-xr-x 3 git git 4096 May  7 04:35 ..\n-rwxr-xr-x 1 git git  292 May  7 11:26 post-receive\nroot@websushi:/home/git/bare-template/hooks# cat post-receive \n!/bin/bash -el\nwhile read oldrev newrev refname\ndo\n    COMMIT=${newrev}\ndone\napp_dir=${PWD##*/}\napp_name=${app_dir/.git/}\nurl=\"${TSURU_HOST}/apps/${app_name}/repository/clone\"\ncurl -H \"Authorization: bearer ${TSURU_TOKEN}\" -d \"version=origin/master&commit=${COMMIT}\" -s -N --max-time 1800 $url\nroot@websushi:/home/git/bare-template/hooks# \n```\n. Nope,\nroot@websushi:/etc# ack-grep TSURU_HOST\nroot@websushi:/etc# ack-grep TSURU_HOST\nroot@websushi:/etc#\n. Err, forgot the other one,\nroot@websushi:/etc# ack-grep TSURU_TOKEN\nroot@websushi:/etc#\n. @fsouza Ah, okay. I had to modify your snippet a bit:\n$ cat >> /etc/profile <<END\nexport TSURU_HOST=http://localhost:8080 # the address of your tsuru server\nexport TSURU_TOKEN=`tsr token`\nEND\nSadly, this didn't help though, the result was the same as above. No deploy message. Are you sure /etc/profile is used when git pushing to the server?\n. @fsouza https://gist.github.com/jezdez/84ee1e3b6430acee359b\n. @fsouza Aha! Uncommenting the git:bare:template key and restarting gandalf fixed it. Not sure why it was commented out\n. @fsouza I'll try tonight in more detail, it definitely tried installing the Python dependencies but failed with a missing pg_config for psycopg2. In other words likely something about a missing Postgres service.\n. ",
    "msabramo": "Is this addressed by the new tsuru deploy that is possible now with 0.7?\nhttps://github.com/tsuru/tsuru/issues/874\n. Could you please provide a link to the commit that added this? I'm trying to figure out what it does so that I can manually remove a platform...\n. Ah never mind -- I found the commit -- https://github.com/tsuru/tsuru-admin/commit/b76e61308f8f3446d7c33dc6ddd3c7f6b3d28158\n. Looking forward to 0.7!\n. I just ran into this issue with:\nmonkey@tsuru:/etc$ dpkg -l | grep tsuru\nii  crane                                0.5.4-0~trusty1                     amd64        crane is the command line interface for the tsuru server, used by service administrators\nii  tsuru                                0.10.1-0~trusty1                    amd64        tsuru is the command line interface for the tsuru server\nii  tsuru-admin                          0.5.1-0~trusty1                     amd64        tsuru-admin is the command line interface used by cloud admins\nii  tsuru-server                         0.6.2.1-1~trusty1                   amd64        tsuru-server is the server side of the Tsuru PaaS.\nWhen is the next version planned to be released?\n. I think I'm having the same problem. run works and then it doesn't.\nvagrant@vagrant-ubuntu-trusty-64:~/ProfileSvc$ tsuru run -a profilesvc /home/application/.venv/bin/circusctl status\nError: App must be available to run commands\n. ```\nvagrant@vagrant-ubuntu-trusty-64:~/ProfileSvc$ while true; do date; tsuru run pserve development.ini; sleep 5; done\nThu Sep 18 05:02:56 UTC 2014\nError: App must be available to run commands\nThu Sep 18 05:03:07 UTC 2014\nError: App must be available to run commands\nThu Sep 18 05:03:17 UTC 2014\nError: App must be available to run commands\nThu Sep 18 05:03:28 UTC 2014\nError: App must be available to run commands\nThu Sep 18 05:03:38 UTC 2014\nError: App must be available to run commands\nThu Sep 18 05:03:49 UTC 2014\nError: App must be available to run commands\nThu Sep 18 05:04:00 UTC 2014\nError: App must be available to run commands\nThu Sep 18 05:04:10 UTC 2014\nError: App must be available to run commands\nThu Sep 18 05:04:21 UTC 2014\nError: App must be available to run commands\nThu Sep 18 05:04:32 UTC 2014\nError: App must be available to run commands\n...\nvagrant@vagrant-ubuntu-trusty-64:~/ProfileSvc$ while true; do date; tsuru app-info; tsuru run pserve development.ini; sleep 5; done\nThu Sep 18 05:06:21 UTC 2014\nApplication: profilesvc\nRepository: git@192.168.50.4.xip.io:profilesvc.git\nPlatform: python\nTeams: admin\nAddress: profilesvc.192.168.50.4.xip.io\nOwner: admin@example.com\nTeam owner:\nDeploys: 4\nUnits:\n+------------------------------------------------------------------+-------+\n| Unit                                                             | State |\n+------------------------------------------------------------------+-------+\n| 4f987d2261d374aa52e2e739ab2e05edbd4c4e2b29b5767a34ec0b75f6cd4665 | error |\n+------------------------------------------------------------------+-------+\nError: App must be available to run commands\n^C\nvagrant@vagrant-ubuntu-trusty-64:~/ProfileSvc$ ^C\nvagrant@vagrant-ubuntu-trusty-64:~/ProfileSvc$ ^C\nvagrant@vagrant-ubuntu-trusty-64:~/ProfileSvc$ while true; do echo \"===================================\"; date; tsuru app-info; tsuru run pserve development.ini; sleep 5; done\n===================================\nThu Sep 18 05:06:56 UTC 2014\nApplication: profilesvc\nRepository: git@192.168.50.4.xip.io:profilesvc.git\nPlatform: python\nTeams: admin\nAddress: profilesvc.192.168.50.4.xip.io\nOwner: admin@example.com\nTeam owner:\nDeploys: 4\nUnits:\n+------------------------------------------------------------------+-------+\n| Unit                                                             | State |\n+------------------------------------------------------------------+-------+\n| 4f987d2261d374aa52e2e739ab2e05edbd4c4e2b29b5767a34ec0b75f6cd4665 | error |\n+------------------------------------------------------------------+-------+\nError: App must be available to run commands\nThu Sep 18 05:07:12 UTC 2014\nApplication: profilesvc\nRepository: git@192.168.50.4.xip.io:profilesvc.git\nPlatform: python\nTeams: admin\nAddress: profilesvc.192.168.50.4.xip.io\nOwner: admin@example.com\nTeam owner:\nDeploys: 4\nUnits:\n+------------------------------------------------------------------+-------+\n| Unit                                                             | State |\n+------------------------------------------------------------------+-------+\n| 4f987d2261d374aa52e2e739ab2e05edbd4c4e2b29b5767a34ec0b75f6cd4665 | error |\n+------------------------------------------------------------------+-------+\nTraceback (most recent call last):\n  File \"/usr/local/bin/pserve\", line 11, in \n    sys.exit(main())\n  File \"/usr/local/lib/python2.7/dist-packages/pyramid/scripts/pserve.py\", line 51, in main\n    return command.run()\n  File \"/usr/local/lib/python2.7/dist-packages/pyramid/scripts/pserve.py\", line 316, in run\n    global_conf=vars)\n  File \"/usr/local/lib/python2.7/dist-packages/pyramid/scripts/pserve.py\", line 340, in loadapp\n    return loadapp(app_spec, name=name, relative_to=relative_to, kw)\n  File \"/usr/local/lib/python2.7/dist-packages/paste/deploy/loadwsgi.py\", line 247, in loadapp\n    return loadobj(APP, uri, name=name, kw)\n  File \"/usr/local/lib/python2.7/dist-packages/paste/deploy/loadwsgi.py\", line 271, in loadobj\n    global_conf=global_conf)\n  File \"/usr/local/lib/python2.7/dist-packages/paste/deploy/loadwsgi.py\", line 296, in loadcontext\n    global_conf=global_conf)\n  File \"/usr/local/lib/python2.7/dist-packages/paste/deploy/loadwsgi.py\", line 320, in _loadconfig\n    return loader.get_context(object_type, name, global_conf)\n  File \"/usr/local/lib/python2.7/dist-packages/paste/deploy/loadwsgi.py\", line 454, in get_context\n    section)\n  File \"/usr/local/lib/python2.7/dist-packages/paste/deploy/loadwsgi.py\", line 476, in _context_from_use\n    object_type, name=use, global_conf=global_conf)\n  File \"/usr/local/lib/python2.7/dist-packages/paste/deploy/loadwsgi.py\", line 406, in get_context\n    global_conf=global_conf)\n  File \"/usr/local/lib/python2.7/dist-packages/paste/deploy/loadwsgi.py\", line 296, in loadcontext\n    global_conf=global_conf)\n  File \"/usr/local/lib/python2.7/dist-packages/paste/deploy/loadwsgi.py\", line 328, in _loadegg\n    return loader.get_context(object_type, name, global_conf)\n  File \"/usr/local/lib/python2.7/dist-packages/paste/deploy/loadwsgi.py\", line 620, in get_context\n    object_type, name=name)\n  File \"/usr/local/lib/python2.7/dist-packages/paste/deploy/loadwsgi.py\", line 640, in find_egg_entry_point\n    pkg_resources.require(self.spec)\n  File \"/usr/lib/python2.7/dist-packages/pkg_resources.py\", line 725, in require\n    needed = self.resolve(parse_requirements(requirements))\n  File \"/usr/lib/python2.7/dist-packages/pkg_resources.py\", line 628, in resolve\n    raise DistributionNotFound(req)\npkg_resources.DistributionNotFound: profilesvc\nProcess exited with: 1. Reason was:  ()\n```\n. There's something really strange going on here where the app keeps switching between being available and unavailable.\n```\nvagrant@vagrant-ubuntu-trusty-64:~/ProfileSvc$ while true; do\n\necho \"===================================\"; date\ntsuru run lsb_release -- -a\nsleep 5\ndone\n\n===================================\nThu Sep 18 05:13:15 UTC 2014\nError: App must be available to run commands\n===================================\nThu Sep 18 05:13:25 UTC 2014\nError: App must be available to run commands\n===================================\nThu Sep 18 05:13:36 UTC 2014\nError: App must be available to run commands\n===================================\nThu Sep 18 05:13:47 UTC 2014\nError: App must be available to run commands\n===================================\nThu Sep 18 05:13:58 UTC 2014\nError: App must be available to run commands\n===================================\nThu Sep 18 05:14:09 UTC 2014\nError: App must be available to run commands\n===================================\nThu Sep 18 05:14:20 UTC 2014\nError: App must be available to run commands\n===================================\nThu Sep 18 05:14:32 UTC 2014\nError: App must be available to run commands\n===================================\nThu Sep 18 05:14:43 UTC 2014\nError: App must be available to run commands\n===================================\nThu Sep 18 05:14:54 UTC 2014\nError: App must be available to run commands\n===================================\nThu Sep 18 05:15:05 UTC 2014\nError: App must be available to run commands\n===================================\nThu Sep 18 05:15:16 UTC 2014\nError: App must be available to run commands\n===================================\nThu Sep 18 05:15:27 UTC 2014\nError: App must be available to run commands\n===================================\nThu Sep 18 05:15:38 UTC 2014\nError: App must be available to run commands\n===================================\nThu Sep 18 05:15:48 UTC 2014\nError: App must be available to run commands\n===================================\nThu Sep 18 05:16:01 UTC 2014\nError: App must be available to run commands\n===================================\nThu Sep 18 05:16:12 UTC 2014\nError: App must be available to run commands\n===================================\nThu Sep 18 05:16:23 UTC 2014\nError: App must be available to run commands\n===================================\nThu Sep 18 05:16:33 UTC 2014\nError: App must be available to run commands\n===================================\nThu Sep 18 05:16:44 UTC 2014\nError: App must be available to run commands\n===================================\nThu Sep 18 05:16:55 UTC 2014\nError: App must be available to run commands\n===================================\nThu Sep 18 05:17:06 UTC 2014\nError: App must be available to run commands\n===================================\nThu Sep 18 05:17:19 UTC 2014\nError: App must be available to run commands\n===================================\nThu Sep 18 05:17:30 UTC 2014\nDistributor ID: Ubuntu\nDescription:    Ubuntu 14.04.1 LTS\nRelease:    14.04\nCodename:   trusty\nNo LSB modules are available.\n===================================\nThu Sep 18 05:17:42 UTC 2014\nDistributor ID: Ubuntu\nDescription:    Ubuntu 14.04.1 LTS\nRelease:    14.04\nCodename:   trusty\nNo LSB modules are available.\n===================================\nThu Sep 18 05:17:56 UTC 2014\nNo LSB modules are available.\nDistributor ID: Ubuntu\nDescription:    Ubuntu 14.04.1 LTS\nRelease:    14.04\nCodename:   trusty\n===================================\nThu Sep 18 05:18:07 UTC 2014\nError: App must be available to run commands\n===================================\nThu Sep 18 05:18:19 UTC 2014\nError: App must be available to run commands\n===================================\nThu Sep 18 05:18:32 UTC 2014\nError: App must be available to run commands\n===================================\nThu Sep 18 05:18:43 UTC 2014\nDistributor ID: Ubuntu\nDescription:    Ubuntu 14.04.1 LTS\nRelease:    14.04\nCodename:   trusty\nNo LSB modules are available.\n===================================\nThu Sep 18 05:18:54 UTC 2014\nDistributor ID: Ubuntu\nDescription:    Ubuntu 14.04.1 LTS\nRelease:    14.04\nCodename:   trusty\nNo LSB modules are available.\n===================================\nThu Sep 18 05:19:07 UTC 2014\nNo LSB modules are available.\nDistributor ID: Ubuntu\nDescription:    Ubuntu 14.04.1 LTS\nRelease:    14.04\nCodename:   trusty\n===================================\nThu Sep 18 05:19:19 UTC 2014\nDistributor ID: Ubuntu\nDescription:    Ubuntu 14.04.1 LTS\nRelease:    14.04\nCodename:   trusty\nNo LSB modules are available.\n===================================\nThu Sep 18 05:19:30 UTC 2014\nError: App must be available to run commands\n===================================\nThu Sep 18 05:19:43 UTC 2014\nError: App must be available to run commands\n===================================\nThu Sep 18 05:19:54 UTC 2014\nError: App must be available to run commands\n```\nLet me know how I can help debug this.\n. I am exploring the possibility that the problem is with the DNS resolution of xip.io. At one point I tried using the xip.io hostname (192.168.50.4.xip.io) and it failed and then using 192.168.50.4 afterwards, it worked.\nAs a result, I now experimenting with having this in my /etc/hosts file:\n192.168.50.4 192.168.50.4.xip.io\n. So far it's been pretty good. I ran the while loop I showed above and so far it's been working 100%\nAt one point, something happened with tsuru when I did a push, the push failed because of a lack of memory, but then I pushed later and it worked.\nMaybe the Vagrantfile should allocate a little bit more memory to the VM?\nI'll try running my while loop again and also just generally using Tsuru in a VM a few more days and see whether I get the errors I was getting.\nThanks!!! I'm really liking Tsuru. Incidentally, I was a guy who came and talked to you and your colleagues after your OSCon talk and that talk was a big part of me picking Tsuru as the first PaaS to try of the various ones out there.\n. :+1 with the latest PPAs I get a warning that the client is too old. Things work, but I'd like to get rid of the warning for when I demo Tsuru to others in my org. \n. What is the relationship between specifying docker servers in tsuru.conf and adding them via tsuru-admin docker-node-add? Do they do exactly the same thing? Are there differences to choose one over the other?\n. Do you think that it's worth it to include the example so people know that they can specify docker servers in the conf file? This is useful when writing provisioning stuff with ansible, chef, puppet, etc. \n. > I think it's worth, but please use 2375 port instead of 4243, this it the official Docker port now.\nUpdated with fd63932.\n. This error is really curious:\n[docker-cluster][error] Ignored error trying to pull image in node \"http://10.128.40.73:4243\": Error: image tsuru/python not found\nbecause I do actually have a tsuru/python Docker image on that node:\nmonkey@tsuru:~/anonweb$ docker -H 10.128.40.73:4243 images | egrep 'REPO|tsuru/python'\nREPOSITORY          TAG                 IMAGE ID            CREATED             VIRTUAL SIZE\ntsuru/python        latest              0770ecca161d        6 hours ago         489.2 MB\nI can even create a container using the tsuru/python image:\nmonkey@tsuru:~/anonweb$ docker -H 10.128.40.73:4243 run -it tsuru/python /bin/bash\nroot@4bb479216cfc:/# dpkg -l | grep ' python2.7'\nii  python2.7                       2.7.6-8                       amd64        Interactive high-level object-oriented language (version 2.7)\nii  python2.7-dev                   2.7.6-8                       amd64        Header files and a static library for Python (v2.7)\nii  python2.7-minimal               2.7.6-8                       amd64        Minimal subset of the Python language (version 2.7)\nso why is Tsuru saying image tsuru/python not found?\n. The above was with the round-robin scheduler. I also tried setting up the segregate scheduler and I installed a docker-registry on my tsuru-api node (even though the docs at http://docs.tsuru.io/en/0.6.2/installing/index.html didn't mention it, I thought it might be necessary because my tsuru-bootstrap node has it, along with a 'registry' key in its /etc/tsuru/tsuru.conf file) and I made sure to push the tsuru/python image to that registry.\nmonkey@tsuru-node-1:~$ docker tag tsuru/python tsuru.corp.surveymonkey.com:3030/tsuru/python\nmonkey@tsuru-node-1:~$ docker push tsuru.corp.surveymonkey.com:3030/tsuru/python\nThe push refers to a repository [tsuru.corp.surveymonkey.com:3030/tsuru/python] (len: 1)\nSending image list\nPushing repository tsuru.corp.surveymonkey.com:3030/tsuru/python (1 tags)\nImage 511136ea3c5a already pushed, skipping\nImage bfb8b5a2ad34 already pushed, skipping\nImage c1f3bdbd8355 already pushed, skipping\nImage 897578f527ae already pushed, skipping\nImage 9387bcc9826e already pushed, skipping\nImage 809ed259f845 already pushed, skipping\nImage 96864a7d2df3 already pushed, skipping\nImage a9a41b9b194e already pushed, skipping\nImage b41aecffb82c already pushed, skipping\nImage 44d78d739a26 already pushed, skipping\nImage 2a8d728df12a already pushed, skipping\nImage b4ab9c6fcfb9 already pushed, skipping\nImage f7872a5e6bb6 already pushed, skipping\nImage 3641b6035e31 already pushed, skipping\nImage 0770ecca161d already pushed, skipping\nPushing tag for rev [0770ecca161d] on {http://tsuru.corp.surveymonkey.com:3030/v1/repositories/tsuru/python/tags/latest}\nmonkey@tsuru:~/anonweb$ curl http://127.0.0.1:3030/v1/images/0770ecca161d72120a4630b42979e7536c37616be2907c530d46c3fdbeeacbd4/json; echo\n{\"id\":\"0770ecca161d72120a4630b42979e7536c37616be2907c530d46c3fdbeeacbd4\",\"parent\":\"3641b6035e319748381173b7469b2b9099dc6f46cf927658c2f5cdd71b50b976\",\"created\":\"2014-09-20T16:51:39.660344881Z\",\"container\":\"9cbb1568c71d56591c06b5971fa8c5248a788dcb5426098530e486bb6b6487e8\",\"container_config\":{\"Hostname\":\"219bedda65d6\",\"Domainname\":\"\",\"User\":\"\",\"Memory\":0,\"MemorySwap\":0,\"CpuShares\":0,\"Cpuset\":\"\",\"AttachStdin\":false,\"AttachStdout\":false,\"AttachStderr\":false,\"PortSpecs\":null,\"ExposedPorts\":null,\"Tty\":false,\"OpenStdin\":false,\"StdinOnce\":false,\"Env\":[\"PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\"],\"Cmd\":[\"/bin/sh\",\"-c\",\"/var/lib/tsuru/base/install\"],\"Image\":\"3641b6035e319748381173b7469b2b9099dc6f46cf927658c2f5cdd71b50b976\",\"Volumes\":null,\"WorkingDir\":\"\",\"Entrypoint\":null,\"NetworkDisabled\":false,\"OnBuild\":[]},\"docker_version\":\"1.2.0\",\"config\":{\"Hostname\":\"219bedda65d6\",\"Domainname\":\"\",\"User\":\"\",\"Memory\":0,\"MemorySwap\":0,\"CpuShares\":0,\"Cpuset\":\"\",\"AttachStdin\":false,\"AttachStdout\":false,\"AttachStderr\":false,\"PortSpecs\":null,\"ExposedPorts\":null,\"Tty\":false,\"OpenStdin\":false,\"StdinOnce\":false,\"Env\":[\"PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\"],\"Cmd\":[\"/bin/bash\"],\"Image\":\"3641b6035e319748381173b7469b2b9099dc6f46cf927658c2f5cdd71b50b976\",\"Volumes\":null,\"WorkingDir\":\"\",\"Entrypoint\":null,\"NetworkDisabled\":false,\"OnBuild\":[]},\"architecture\":\"amd64\",\"os\":\"linux\",\"Size\":256278237}\nStill getting the error when doing git push tsuru tsuru. \nmonkey@tsuru:~/anonweb$ git push tsuru tsuru\nCounting objects: 47058, done.\nDelta compression using up to 8 threads.\nCompressing objects: 100% (11156/11156), done.\nWriting objects: 100% (47058/47058), 100.00 MiB | 27.44 MiB/s, done.\nTotal 47058 (delta 35326), reused 47002 (delta 35285)\nremote: text\nremote: text\nremote: text\nremote: text\nremote: Exit status 7\nTo git@tsuru.corp.surveymonkey.com:anonweb.git\n ! [remote rejected] tsuru -> tsuru (pre-receive hook declined)\nerror: failed to push some refs to 'git@tsuru.corp.surveymonkey.com:anonweb.git'\n/var/log/syslog has this:\nSep 20 17:03:18 tsuru gandalf-listener[24481]: Executing git-receive-pack /var/lib/gandalf/repositories/anonweb.git\nSep 20 17:03:27 tsuru tsr[24419]: [pipeline] running the Forward for the provisioner-deploy action\nSep 20 17:03:27 tsuru tsr[24419]: [pipeline] running the Forward for the insert-empty-container action\nSep 20 17:03:27 tsuru tsr[24419]: [pipeline] running the Forward for the create-container action\nSep 20 17:03:27 tsuru tsr[24419]: create container for app anonweb, based on image tsuru/python, with cmds [/var/lib/tsuru/deploy archive http://127.0.0.1:3232/?id=c369c09edf93b770da119f58744cc0d08db3cd4520a877973aef9e1fb33629b8a1eca8312bf42741f2bbc8c2a050860a648aec5588e7e6c852a66ae55df17590 TSURU_APPNAME=anonweb TSURU_HOST=http://tsuru.corp.surveymonkey.com:8080 TSURU_APP_TOKEN=1203083e74e20fef08ea46ce8dcbcfd5d4bdf832 ]\nSep 20 17:03:27 tsuru tsr[24419]: [scheduler] Possible nodes for container ed320d0ebf1b64531f64: []string{\"10.128.40.73\"}\nSep 20 17:03:27 tsuru tsr[24419]: [scheduler] Chosen node for container ed320d0ebf1b64531f64: \"http://10.128.40.73:4243\" Count: 0\nSep 20 17:03:27 tsuru tsr[24419]: [docker-cluster][error] Ignored error trying to pull image in node \"http://10.128.40.73:4243\": Error: image tsuru/python not found\nSep 20 17:03:27 tsuru tsr[24419]: [pipeline] running the Forward for the start-container action\nSep 20 17:03:27 tsuru tsr[24419]: starting container da850863921ff6c414012e333c6192955b5e0209ccc22276856a10e676da5a28\nSep 20 17:03:27 tsuru tsr[24419]: [pipeline] running the Forward for the update-database-container action\nSep 20 17:03:27 tsuru tsr[24419]: [pipeline] running the Forward for the follow-logs-and-commit action\nSep 20 17:03:27 tsuru tsr[24419]: [pipeline] error running the Forward for the follow-logs-and-commit action - Exit status 7\nSep 20 17:03:27 tsuru tsr[24419]: [pipeline] running Backward for update-database-container action\nSep 20 17:03:27 tsuru tsr[24419]: [pipeline] running Backward for start-container action\nSep 20 17:03:27 tsuru tsr[24419]: [pipeline] running Backward for create-container action\nSep 20 17:03:28 tsuru tsr[24419]: [pipeline] running Backward for insert-empty-container action\nSep 20 17:03:28 tsuru tsr[24419]: error on execute deploy pipeline for app anonweb - Exit status 7\nSep 20 17:03:28 tsuru tsr[24419]: [pipeline] error running the Forward for the provisioner-deploy action - Exit status 7\nSep 20 17:03:28 tsuru tsr[24419]: Exit status 7\n. Ah, it looks like the command referenced in the above log message (/var/lib/tsuru/deploy archive http://127.0.0.1:3232/?id=71b4ff5036b47f936ba5c2e88182508c1f9baac14333297206b5a2eb6d64f2bec15436cb82842c28a3e3a604a2e54b637ab7dbe5500ff28507ee347015899b64 TSURU_APPNAME=anonweb TSURU_HOST=http://tsuru.corp.surveymonkey.com:8080 TSURU_APP_TOKEN=1203083e74e20fef08ea46ce8dcbcfd5d4bdf832) is executed within a newly created Docker container.\nI tried executing it myself and indeed it exits with exit code 7, which is what the log above is indicating as well.\nmonkey@tsuru:~/anonweb$ docker -H 10.128.40.73:4243 run -it tsuru/python /bin/bash\nroot@d19a38ce936a:/# /var/lib/tsuru/deploy archive http://127.0.0.1:3232/?id=71b4ff5036b47f936ba5c2e88182508c1f9baac14333297206b5a2eb6d64f2bec15436cb82842c28a3e3a604a2e54b637ab7dbe5500ff28507ee347015899b64 TSURU_APPNAME=anonweb TSURU_HOST=http://tsuru.corp.surveymonkey.com:8080 TSURU_APP_TOKEN=1203083e74e20fef08ea46ce8dcbcfd5d4bdf832\nroot@d19a38ce936a:/# echo $?\n7\nIt would be nice if this deploy command reported errors to stderr to inform about what went wrong.\n. OK, I fixed this. By looking at the above output I saw 127.0.0.1:3232, so then I realized that I set ARCHIVE_SERVER_READ incorrectly in /home/git/.bash_profile. I changed it to a public IP and this problem went away and my git push now succeeds! Although my container immediately exits with an error, but that's another issue (#917). \n. Fixed by @cezarsa with https://github.com/tsuru/basebuilder/commit/ed987ddd6be1e352c11417dc6632cab630b5bd14\nThanks!\n. Oh nevermind, I see that these files are in /var/lib/tsuru in the docker container.\nI don't know if the log message can be made clearer (with cmds => with cmds inside container)? But I'll close this, since it's mostly a misunderstanding on my part.\n. The error is coming from this line: https://github.com/tsuru/tsuru-unit-agent/blob/master/tsuru_unit_agent/tasks.py#L60\n. OK, I managed to fix this by creating an app.yaml file with:\nyaml\nhooks:\n  restart:\n    after:\n      - echo \"Executing a restart hook defined in app.yaml\"\nHowever, I think I'll keep this open, as it was my impression that the app.yaml was optional. I didn't need one to get my app working with tsuru-bootstrap.\nSo maybe tsuru_unit_agent/tasks.py should check for whether app_data is None?\n. It seems that this function (run_restart_hooks) was added in commit https://github.com/tsuru/tsuru-unit-agent/commit/ac2333c3a1153c247a101dd4152e758121f91b67 by @cezarsa on Sept. 18, so it seems that this was probably a recent breakage...? (well, assuming that it was not intended to make the app.yaml required).\n. Thanks!\n. monkey@tsuru:~/anonweb$ tsuru-admin platform-update python -d https://raw.githubusercontent.com/tsuru/basebuilder/master/python/Dockerfile\n...\nRemoving intermediate container d862ac070ffa\nSuccessfully built 2e615cdecc96\nPlatform successfully updated!\nI then tried recreating my app and repushing and it failed the same way -- it seems that the Docker container in my node was not updated.\nI then tried removing the Docker images from my node and I figured that Tsuru would automatically repush the images when I pushed my app, but this did not work -- it seems that I broke my node actually because now I get:\nmonkey@tsuru:~/anonweb$ git push tsuru tsuru\nCounting objects: 47058, done.\nDelta compression using up to 8 threads.\nCompressing objects: 100% (11156/11156), done.\nWriting objects: 100% (47058/47058), 100.00 MiB | 36.75 MiB/s, done.\nTotal 47058 (delta 35327), reused 47002 (delta 35285)\nremote: text\nremote: text\nremote: text\nremote: text\nremote: No nodes found in pools [{pool1 []}]\nTo git@tsuru.corp.surveymonkey.com:anonweb.git\n ! [remote rejected] tsuru -> tsuru (pre-receive hook declined)\nerror: failed to push some refs to 'git@tsuru.corp.surveymonkey.com:anonweb.git'\nI am guessing that this is because my node has no Docker images:\nmonkey@tsuru-node-1:~$ docker images\nREPOSITORY          TAG                 IMAGE ID            CREATED             VIRTUAL SIZE\nmonkey@tsuru-node-1:~$\nHow do I get Tsuru to push a new Docker container to my nodes?\n. OK, @fsouza explained on IRC:\n\nwhen you do a tsuru-admin platform-add or platform-update, tsuru will call docker build in one of the nodes\n\nI did eventually get a new image in my Docker node. It's unclear to me whether platform-update can overwrite the existing image in a Docker node, because I was impatient and starting deleting images manually.\nAnd after that, I did a git push without an app.yaml file and things worked!\nThanks again!\n. Ah, I think that I didn't get that error perhaps because I had been using an old version of the client, as described in #920 -- with a fresh brew install on OS X I saw this error, so I'll close this. Thanks!\n. This is with running a tsr that came with the apt package:\nmonkey@tsuru:~/go/src/github.com/tsuru/tsuru$ ps -fp $(pgrep -f 'tsr api')\nUID        PID  PPID  C STIME TTY          TIME CMD\ntsuru     4530     1  0 06:43 ?        00:00:00 /usr/bin/tsr api --config=/etc/tsuru/tsuru.conf\nmonkey@tsuru:~/go/src/github.com/tsuru/tsuru$ /usr/bin/tsr version\ntsr version 0.6.2.1.\nCuriously, I tried building my own tsr and that ended up having the same version number but a different problem when trying to connect to it.\n```\nmonkey@tsuru:~/go/src/github.com/tsuru/tsuru$ git log -n 1\ncommit eb241b0f7b5e9bdf07fb7e5a7e3dc1ce0687d5cf\nMerge: 526ee0c 7e0a413\nAuthor: Tarsis Azevedo tarsis.azevedo@gmail.com\nDate:   Sun Sep 21 14:28:15 2014 -0300\nMerge pull request #918 from msabramo/tweak_docs/understanding/concepts.rst\n\ndocs/understanding/concepts.rst: Doc tweaks\n\nmonkey@tsuru:~/go/src/github.com/tsuru/tsuru$ go build  -o tsr ./cmd/tsr\nmonkey@tsuru:~/go/src/github.com/tsuru/tsuru$ sudo stop tsuru-server-api\ntsuru-server-api stop/waiting\nmonkey@tsuru:~/go/src/github.com/tsuru/tsuru$ ./tsr version\ntsr version 0.6.2.1.\nmonkey@tsuru:~/go/src/github.com/tsuru/tsuru$ ./tsr api --config=/etc/tsuru/tsuru.conf\nUsing the database \"tsurudb\" from the server \"127.0.0.1:27017\".\nUsing \"docker\" provisioner.\nUsing \"native\" auth scheme.\ntsuru HTTP server listening at 0.0.0.0:8080...\nmonkey@tsuru:~/go/src/github.com/tsuru/tsuru-client/tsuru$ git log -n 1\ncommit c3a70adb8fe19cfcfdfcfcae0a0cd13f140f9148\nAuthor: Andrews Medina andrewsmedina@gmail.com\nDate:   Fri Sep 19 11:04:20 2014 -0300\nadded a command to automate the release process.\n\nmonkey@tsuru:~/go/src/github.com/tsuru/tsuru-client/tsuru$ ./tsuru app-list\n\nWARNING: You're using an unsupported version of tsuru.\nYou must have at least version 0.12.0, your current\nversion is 0.11.2.\nPlease go to http://docs.tsuru.io/en/latest/using/install-client.html\nand download the last version.\n\n+-------------+-------------------------+-----------------------------+--------+\n| Application | Units State Summary     | Address                     | Ready? |\n+-------------+-------------------------+-----------------------------+--------+\n| anonweb     | 1 of 1 units in-service | anonweb.10.128.40.70.xip.io | Yes    |\n+-------------+-------------------------+-----------------------------+--------+\n```\nI'd like to get rid of the warning so that I can demo Tsuru to other folks in my org soon and I fear that the warning will distract people a little bit during a demo.\n. Warning is printed here: https://github.com/tsuru/tsuru/blob/master/cmd/client.go#L60\n. Hmmm. The stock tsr from the PPA reports:\n```\nmonkey@tsuru:~/go/src/github.com/tsuru/tsuru-client$ curl -s -i http://localhost:8080/apps | grep 'Supported-Tsuru:'\nSupported-Tsuru: 0.11.0\nmonkey@tsuru:~/go/src/github.com/tsuru/tsuru-client$ /usr/bin/tsuru version\ntsuru version 0.10.1.\n```\nI wonder why it depends on a newer version than what is shipped?\n. monkey@tsuru:~$ apt-cache show tsuru-client\nPackage: tsuru-client\nPriority: extra\nSection: devel\nInstalled-Size: 6725\nMaintainer: Globo.com <tsuru@corp.globo.com>\nArchitecture: amd64\nVersion: 0.11.2-1~trusty1\nReplaces: tsuru\nFilename: pool/main/t/tsuru-client/tsuru-client_0.11.2-1~trusty1_amd64.deb\nSize: 1232674\nMD5sum: 236849798cb094b5c75a7956ac5ce906\nSHA1: 439f8f818a87de4eccfdce86e66221fa9a061962\nSHA256: 5964ddda47357cc80f444b613b7a99a4e9ebe8e55de2a77f1e718ec32d6a3119\nDescription-en: tsuru is the command line interface for the tsuru server\n Tsuru is an open source platform as a service software. This package installs\n the client used by application developers to communicate with tsuru server.\nDescription-md5: be9c0dd9553a3864b50af4a9f81e5a86\nBut wait a second, I don't have tsuru-client installed; I have tsuru installed?\nmonkey@tsuru:~$ dpkg -l | grep tsuru\nii  crane                                0.5.4-0~trusty1                     amd64        crane is the command line interface for the tsuru server, used by service administrators\nii  tsuru                                0.10.1-0~trusty1                    amd64        tsuru is the command line interface for the tsuru server\nii  tsuru-admin                          0.5.1-0~trusty1                     amd64        tsuru-admin is the command line interface used by cloud admins\nii  tsuru-server                         0.6.2.1-1~trusty1                   amd64        tsuru-server is the server side of the Tsuru PaaS.\nmonkey@tsuru:~$ dpkg -L tsuru\n/.\n/etc\n/etc/bash-completion.d\n/etc/bash-completion.d/tsuru\n/usr\n/usr/bin\n/usr/bin/tsuru\nDid the package change names from tsuru to tsuru-client by any chance?\n. @fsouza told me on IRC that the package name did change from tsuru to tsuru-client. I did sudo apt-get install tsuru-client and that fixed the problem.\nI submitted https://github.com/tsuru/tsuru/pull/922 to update the docs, which @fsouza just merged.\n. https://github.com/tsuru/tsuru/pull/924 fixes this problem for me in my local copy of the Sphinx docs.\n. Ditto. I just ran into this as well. \n. This looks related to this issue in pip: https://github.com/pypa/pip/issues/1742\n. @dstufft says in https://github.com/pypa/pip/issues/1742#issuecomment-44197785:\n\nSo pip itself bundles some software, html5lib being one of those, on various Linux distros they \nunbundle that software and cause pip to import it normally instead of using it's own bundled copy.\nWhat this means is that if you install an incompatible version of one of pip's dependencies into the \nglobal Python, then you'll break pip because pip will import that and attempt to use that instead of \nthe correct one installed by apt-get.\n\nMaybe the python builder should be installing the app into a virtualenv to avoid this problem. I think what is happening is my app depends on html5lib and it's getting installed into the system Python and breaking pip.\n. Confirmed that this app installs html5lib.\nmonkey@tsuru:~/createweb$ grep html5lib requirements.txt\nhtml5lib==0.95\nmonkey@tsuru:~/createweb$ git push tsuru tsuru\n...\nremote: Traceback (most recent call last):\nremote:   File \"/usr/lib/python2.7/dist-packages/pip/basecommand.py\", line 122, in main\nremote:     status = self.run(options, args)\nremote:   File \"/usr/lib/python2.7/dist-packages/pip/commands/install.py\", line 278, in run\nremote:     requirement_set.prepare_files(finder, force_root_egg_info=self.bundle, bundle=self.bundle)\nremote:   File \"/usr/lib/python2.7/dist-packages/pip/req.py\", line 1177, in prepare_files\nremote:     url = finder.find_requirement(req_to_install, upgrade=self.upgrade)\nremote:   File \"/usr/lib/python2.7/dist-packages/pip/index.py\", line 256, in find_requirement\nremote:     page_versions.extend(self._package_versions(page.links, req.name.lower()))\nremote:   File \"/usr/lib/python2.7/dist-packages/pip/index.py\", line 432, in _package_versions\nremote:     for link in self._sort_links(links):\nremote:   File \"/usr/lib/python2.7/dist-packages/pip/index.py\", line 422, in _sort_links\nremote:     for link in links:\nremote:   File \"/usr/lib/python2.7/dist-packages/pip/index.py\", line 769, in links\nremote:     for anchor in self.parsed.findall(\".//a\"):\nremote: AttributeError: 'Document' object has no attribute 'findall'\nremote:\nremote: Storing debug log for failure in /home/ubuntu/.pip/pip.log\nremote: Exit status 1\nTo git@tsuru.corp.surveymonkey.com:createweb.git\n ! [remote rejected] tsuru -> tsuru (pre-receive hook declined)\nerror: failed to push some refs to 'git@tsuru.corp.surveymonkey.com:createweb.git'\nmonkey@tsuru:~/createweb$ tsuru run --once -- pip freeze | grep html5lib\nhtml5lib==0.95\n. Interestingly, there is already a virtualenv called /home/application/.venv but this has tsuru stuff in it; not the application's packages.\nPerhaps there should be virtualenvs for both tsuru and the application -- e.g.:\n- /home/tsuru/.venv -- tsuru's packages\n- /home/application/.venv - application's packages\nThis would keep stuff out of the system Python and prevent it from breaking stuff.\n. One thing that would sort of help here as a workaround for issues like this is a tsuru command that:\n- Removes the application -- tsuru app-remove --app=(app name) --assume-yes\n- Waits for the application to be gone -- this can take a few seconds for app to go away; during this time attempts to create the app again will fail because it already exists\n- Creates the app again -- tsuru app-create (app name) (platform) --team (team)\n- Does a push of the app -- git push tsuru (sha1)\nI keep having to do the above steps manually, so a command that automated this would be welcome.\ntsuru app-rebuild?\n. Great news, @fsouza! Thanks!\n. Just upgraded to tsuru-server 0.8.2-0ubuntu1~trusty1 and verified that this is fixed. Thanks!!\nI did have to manually restart tsuru-server-api after the apt-get upgrade, which was somewhat unexpected, so I filed https://github.com/tsuru/tsuru/issues/968\n. :+1: love this idea as well!\nThat would be super powerful to be able to easily deploy any Docker container to tsuru infrastructure.\nI might also want this for our internal apps so that we could roll back to an earlier version.\n. :+1: \nI also just noticed this was missing and mentioned it on IRC and @jblancett pointed me to this issue.\n. Check out #1034.\n. Why was this closed? I was considering trying it out at some point. \n. I have a private OpenStack (Metacloud) at my disposal. I'd love to help test this. Maybe you could post some quick instructions on how to get it up and running for testing?\n. :+1: and willing to help\n. @joaopaulovieira: You might want to look at https://github.com/tsuru/gandalf/pull/178. In that PR, I enhanced /healthcheck for gandalf so that it outputs a detailed JSON response:\n```\n$ http http://127.0.0.1:8000/healthcheck/\nHTTP/1.1 200 OK\nCache-Control: private, max-age=0\nContent-Length: 189\nContent-Type: application/json\nDate: Sat, 03 Jan 2015 16:56:49 GMT\nServer: gandalf-webserver/0.5.2\nX-Gandalf-Version: 0.5.2\n{\n    \"database\": {\n        \"name\": \"gandalf\",\n        \"url\": \"127.0.0.1:27017\"\n    },\n    \"git\": {\n        \"bare_location\": \"/var/lib/gandalf/repositories\",\n        \"bare_template\": \"/home/git/bare-template\"\n    },\n    \"pid\": 17442,\n    \"status\": \"OK\",\n    \"uid\": 502\n}\n``\n. As @andrewsmedina said in https://github.com/tsuru/gandalf/pull/178, perhaps there should be a new /healthcheck.json endpoint?\n. Probably arestart` needs to be added to https://github.com/tsuru/tsuru-deb/blob/master/tsuru-server-deb/debian/tsuru-server.postinst ?\n. http://askubuntu.com/questions/492871/what-is-the-right-way-to-restart-dependent-services-while-package-installation\n. Or maybe using Dnsmasq is simpler. \n. This may not be possible to fix in tsuru because these errors come from hipache -- e.g.:\n- https://github.com/hipache/hipache/blob/master/static/error_400.html\nUnless hipache allows customizing the error pages?\n. The Hipache docs at https://github.com/hipache/hipache say:\n\nWhen something wrong happens (e.g., a backend times out), or when a request for an undefined virtual host comes in, Hipache will display an error page. Those error pages can be customized, and a configuration parameter is available to specify where these custom pages are located.\n. Here's how to configure custom error pages:\n\nserver.staticDir: The absolute path of the directory containing your custom static error pages. Default value null means it uses Hipache's pages.\n\n\nFrom https://github.com/hipache/hipache/commit/c3fef07457c9d03a944f5c3ddbe031618e59b41e\nThese seem to be static pages though so it still looks difficult if not impossible to include the application name unless each tsuru application gets its own directory of static error pages. \n. I'm poking around with changing hipache to do what I want:\nhttps://github.com/hipache/hipache/pull/193\n. https://github.com/tsuru/tsuru-client/pull/3 addresses some of this, because it prints the app-info in JSON. It doesn't combine output of app-info, env-get, etc. though.\n. Hmmm, I also ran into this error when sshing to one of my Docker nodes and attempting to manually start a container.\nmonkey@tsuru-node-1:~$ docker run -it docker.corp.surveymonkey.com:5000/tsuru/doula-next:latest\nTraceback (most recent call last):\n  File \"/usr/local/bin/tsuru_unit_agent\", line 9, in <module>\n    load_entry_point('tsuru-unit-agent==0.2.5', 'console_scripts', 'tsuru_unit_agent')()\n  File \"/usr/local/lib/python2.7/dist-packages/tsuru_unit_agent/main.py\", line 48, in main\n    actions[args.action](args)\n  File \"/usr/local/lib/python2.7/dist-packages/tsuru_unit_agent/main.py\", line 22, in deploy_action\n    client = run_action(args, run_hooks=False)\n  File \"/usr/local/lib/python2.7/dist-packages/tsuru_unit_agent/main.py\", line 10, in run_action\n    envs = client.register_unit(args.app_name)\n  File \"/usr/local/lib/python2.7/dist-packages/tsuru_unit_agent/client.py\", line 25, in register_unit\n    tsuru_envs = response.json()\nTypeError: 'list' object is not callable\n. Something is wacko in this container.\nubuntu@1490f671a11c:/home/application/current/bin$ pip --version\nTraceback (most recent call last):\n  File \"/usr/bin/pip\", line 9, in <module>\n    load_entry_point('pip==1.5.4', 'console_scripts', 'pip')()\n  File \"/usr/lib/python2.7/dist-packages/pkg_resources.py\", line 351, in load_entry_point\n    return get_distribution(dist).load_entry_point(group, name)\n  File \"/usr/lib/python2.7/dist-packages/pkg_resources.py\", line 2363, in load_entry_point\n    return ep.load()\n  File \"/usr/lib/python2.7/dist-packages/pkg_resources.py\", line 2088, in load\n    entry = __import__(self.module_name, globals(),globals(), ['__name__'])\n  File \"/usr/lib/python2.7/dist-packages/pip/__init__.py\", line 11, in <module>\n    from pip.vcs import git, mercurial, subversion, bazaar  # noqa\n  File \"/usr/lib/python2.7/dist-packages/pip/vcs/mercurial.py\", line 9, in <module>\n    from pip.download import path_to_url\n  File \"/usr/lib/python2.7/dist-packages/pip/download.py\", line 23, in <module>\n    from requests.adapters import BaseAdapter\nImportError: No module named adapters\n. I strongly suspect that this is due to the fact that my app uses the requests python module and the requirements.txt specifies an old version of requests (requests==0.14.0) that doesn't work well with the Ubuntu-installed pip. I need the virtualenv support that was recently added to the python platform, but I'm having trouble upgrading the platform, because I keep getting \"no space left on device\" errors (see https://github.com/tsuru/tsuru/issues/973). \n. Ah yes, removing requests from requirements.txt fixed these problems.\n. Here are my mongo databases, in case that's relevant:\n```\nmonkey@tsuru:~/Doula$ mongo\nMongoDB shell version: 2.4.9\nconnecting to: test\n\nshow dbs\narchives        0.203125GB\ncluster 0.203125GB\ndocker_provision_handlers_tests_cluster_stor    0.203125GB\ndocker_provision_tests_cluster_stor     0.203125GB\ngandalf 0.203125GB\nlocal   0.078125GB\ntest    (empty)\ntsuru   0.203125GB\ntsuru_log_api_tests     0.203125GB\ntsurudb 0.203125GB\n```\n. Here's yet another error (why do the errors keep changing?)\n\nmonkey@tsuru:~$ tsuru-admin platform-update python --dockerfile https://raw.githubusercontent.com/tsuru/basebuilder/master/python/Dockerfile\nError: API error (500): mkdir /var/lib/docker/tmp/docker-build494848273: no space left on device\n. @fsouza: Thanks! I haven't figured out which node it is. I have quite a few, so I'll have to go through them. I'll let you know if I figure it out.\n. @fsouza: Hey, if I wanted to improve the error handling so that it prints the node that it failing, which repo do you think I would need to modify?\nI can't figure out if it's in tsuru/tsuru, tsuru/tsuru-admin, tsuru/docker-cluster, etc.\n. @andrewsmedina Updated the test with 9ccdfcd\n. @andrewsmedina: Actually I like 88ca018 a little bit more because it makes the testing.FailingFakeGuesser return an explicit ErrorMessage and then check for it.\n. Travis CI failure looks to be a transient thing unrelated to my code.\n. @fsouza: Thanks for cleaning this up. I started on addressing your comments, but never quite had the time to finish. Much appreciated.\n. 1. Less steps. Adds the brew tap/PPA, installs the packages, sets the target, logs in, and adds the ssh key. \n2. Configurable with env variables. So what I do locally at our company is I have another curlable script that sets env variables like TSURU_TARGET and TSURU_PASSWORD and then it calls this script. Result is I give prospective tsuru users one line to copy and paste and run and it gets them all set up. \n3. It works the same on OS X or Ubuntu so folks don't have to search for the right command to use. \nNow of course none if this is rocket science and I think the tsuru clients are plenty easy to install, but I've spent a good amount of time on tsuru so I feel vested in it, but now I want to begin to \"sell\" tsuru to other folks in the company. These people are smart but have deadlines on their projects and might be skeptical about new things and if there is any friction, it gives them an excuse to ignore tsuru and just use our existing deployment infrastructure, which has it's share of problems but it works okay and they know how to get stuff done with it. \nThis was sort of an experiment to see how ridiculously easy I could make it to get started in tsuru. If it's ridiculously easy, it will be easier for me to sell other folks on using it and to sell that I should spend more time on it. \n. Just had another idea...\nWhat if instead of the script living on the Internet, the script is dynamically generated and served up by the tsuru server? Then the tsuru server could insert its own address. Sort of like with OpenStack, when you download the rc file environment variables in it. \n. I guess the error is occurring in gandalf-listener here:\nhttps://github.com/tsuru/gandalf/blob/master/bin/gandalf.go#L203\n. Thanks, @andrewsmedina!\n. It took me a while to realize that it was just a test failure and it still built the binary. I then did go install and I could run it out of $GOPATH/bin - is this the normal way to build and run when developing? I have very little experience with GoLang so pointers in the Contributing docs on how to work efficiently in GoLang would be appreciated!\n. Also, the contributing docs point to a doc advising setting up a vagrant VM with tsuru-bootstrap, but that didn't have Go installed. \n. > setting up a vagrant VM with tsuru-bootstrap, but that didn't have Go installed\nSee https://github.com/tsuru/tsuru-bootstrap/pull/9\n. Yep, let's close. \n. I guess a future enhancement could be to use some kind of fuzzy matching instead of a simple prefix match.\n. I just added the fuzzy string matching (using http://godoc.org/github.com/sajari/fuzzy) and sorted output which should make writing tests easier...\n. I just added a test: TestInvalidCommandFuzzyMatch01\n. Added a couple more tests.\n. I think the test failures are something unrelated???\n. Oops didn't know about Godeps.json. Thanks for fixing!\n. Cool. Golang tips very much appreciated since I'm very new to Golang. I'm more of a Python guy. \n. @fsouza and @andrewsmedina: Any thoughts on this?\n. Rebased this on to master\n. @andrewsmedina: Updated. Please review again.\n. Added tests. Good to go now?\n. I just updated this to check for the WWW-Authenticate header in several of the tests:\ngo\nc.Assert(\n    recorder.Header().Get(\"WWW-Authenticate\"),\n    gocheck.Equals,\n    \"Bearer realm=\\\"tsuru\\\" scope=\\\"tsuru\\\"\")\n. Added check for Content-Type to several tests.\ngo\nc.Assert(\n    recorder.Header().Get(\"Content-Type\"),\n    gocheck.Equals,\n    \"application/json\")\n. @fsouza, @andrewsmedina: What do you guys think of this?\n. What's the drawback if it always logs to stderr?\n. Yeah. I don't know either. In Python, logging is very configurable as you can have multiple loggers with different handlers. The golang stdlib log module seems less flexible. \nI was looking at some alternatives like logrus and log15 - these seem nice but that's a big change so I'd leave that up to you guys. \n. @fsouza: Absolutely. I haven't had as much time to work on tsuru so go for it!\n. My idea was to hit /healthcheck before asking for passwords. \n. This might work better after https://github.com/tsuru/tsuru/issues/967 is done, because currently if the healthcheck fails it just says tsuru might be down. \n. I wonder if there is any way to improve the error message sice this caused confusion. \n. The short and simple one that I just mentioned could even be made into an animated gif and featured on tsuru.io, the github page, etc. \nFor a little inspiration, see https://github.com/Frozenball/pytest-sugar/blob/master/README.rst\n. Test failed with go tip but not go 1.4, I think the tests fail intermittently and not related to my change.\n. How does this look now?\n. Good to go?\n. Nice! Thanks for extending to to tsr token!\n. Some ideas at https://github.com/travis-ci/travis-ci/issues/3075#issuecomment-68629130\nTry adding sudo dmesg to after_failure to see if OOMs are happening. \n. There are a few ideas for solving OOM failures over at https://github.com/travis-ci/travis-ci/issues/3075#issuecomment-68629130\nI wonder if we can add a ps or top that sorts by memory to see what processes are using the most memory.\n. Maybe something like this?\n```\nvagrant@vagrant-ubuntu-trusty-64:~$ top -b -n 1 -o RES | head -n 15\ntop - 05:59:04 up 6 min,  1 user,  load average: 0.01, 0.18, 0.13\nTasks: 103 total,   1 running, 102 sleeping,   0 stopped,   0 zombie\n%Cpu(s):  3.1 us,  1.8 sy,  0.3 ni, 94.5 id,  0.2 wa,  0.0 hi,  0.1 si,  0.0 st\nKiB Mem:   1017856 total,   572344 used,   445512 free,    27980 buffers\nKiB Swap:        0 total,        0 used,        0 free.   234176 cached Mem\nPID USER      PR  NI    VIRT    RES    SHR S %CPU %MEM     TIME+ COMMAND\n 1093 zookeep+  20   0 1355588  39936  11944 S  0.0  3.9   0:01.53 java\n 1605 root      20   0  112688  34532   1092 S  0.0  3.4   0:00.00 ruby\n 1454 root      20   0  182348  34432   2724 S  0.0  3.4   0:01.67 puppet\n 1287 root      20   0  966408  25200   5872 S  0.0  2.5   0:00.30 nodejs\n 1271 root      20   0  966408  25192   5872 S  0.0  2.5   0:00.30 nodejs\n 1281 root      20   0  966408  25140   5872 S  0.0  2.5   0:00.31 nodejs\n 1292 root      20   0  966408  25128   5872 S  0.0  2.5   0:00.30 nodejs\n 1029 root      20   0  966408  23620   5840 S  0.0  2.3   0:00.36 node\n``\n. Added thetop` command above in https://github.com/tsuru/tsuru/pull/1060\n. From looking at the last Travis CI job, it looks like maybe the tests are just putting too much data into MongoDB?\n$ mongostat -n 1\nconnected to: 127.0.0.1\ninsert  query update delete getmore command flushes mapped  vsize    res faults                   locked db idx miss %     qr|qw   ar|aw  netIn netOut  conn       time \n    *0     *0     *0     *0       0     1|0       0  2.58g  5.38g    24m      0 tsuru_api_handler_test:0.0%          0       0|0     0|0    62b     9k     1   19:03:28 \nDone. Your build exited with 1.\nNote that this is after the first mongod was killed and a new one was spun up. Presumably, the one that was killed was using even more memory before it was killed.\n. @cezarsa did a few tweaks I think that might've fixed it. E.g.:\n- https://github.com/tsuru/tsuru/commit/9e79730b23576a21907f96df22f95f478cfc4046\n- https://github.com/tsuru/tsuru/commit/63c56db8837e53413e635592693aa307b70e1046\n. Hmmm I guess it didn't work :-(\n. @andrewsmedina: Yep, you're right.\n8f0422a...4adbec1 patch-12 -> patch-12 (forced update)\n. I wonder what's going on here:\ngo build github.com/tsuru/tsuru/api: \n/home/travis/.gvm/gos/go1.4/pkg/tool/linux_amd64/6g: signal: killed\n. @andrewsmedina had a very similar change: #1049 \n. Closing in favor of #1049, which was just merged. \n. Ah, same as what I did in https://github.com/tsuru/tsuru/pull/1048 after you pointed out before_script. I think you got lucky here as it seems to fail intermittently. \n. Hmm I couldn't find my printf output in the Travis logs. \ngo\n    fmt.Printf(\"db/storage.go: Apps(): s = %v\\n\", s)\n    nameIndex := mgo.Index{Key: []string{\"name\"}, Unique: true}\n    fmt.Printf(\"db/storage.go: Apps(): nameIndex = %v\\n\", nameIndex)\n    c := s.Collection(\"apps\")\n    fmt.Printf(\"db/storage.go: Apps(): c = %v\\n\", c)\nI wonder if the error is occurring in something already compiled like gandalf?\n. Oops, why the heck did I open a PR for this? :smile: \n. Oh maybe this means that something else that tsuru is using is using logrus?\n. Ah, interesting. Thanks!\nI wonder if you guys are open to using logrus in tsuru? I read a little about it and it seemed like it had some neat features over the golang stdlib logger like coloring and such.\n. @cezarsa: Just updated it to use ps -aux --sort -rss | head -n 10. That seems a little nicer only because we don't have to use grep and then lose the column headers.\n. From looking at the last Travis CI job, it looks like maybe the tests are just putting too much data into MongoDB?\n$ mongostat -n 1\nconnected to: 127.0.0.1\ninsert  query update delete getmore command flushes mapped  vsize    res faults                   locked db idx miss %     qr|qw   ar|aw  netIn netOut  conn       time \n    *0     *0     *0     *0       0     1|0       0  2.58g  5.38g    24m      0 tsuru_api_handler_test:0.0%          0       0|0     0|0    62b     9k     1   19:03:28 \nDone. Your build exited with 1.\nNote that this is after the first mongod was killed and a new one was spun up. Presumably, the one that was killed was using even more memory before it was killed.\n. @cezarsa: OK, see https://github.com/tsuru/tsuru/pull/1062\nBut I think MongoDB is using far more memory than postgresql and mysql. Perhaps we need to be clearing out the data that gets stored in there in between tests?\n. @cezarsa, @andrewsmedina: Want to merge this so we get this info on every build and see if we're making progress reducing memory usage?\n. Why did you close?\n. Also see https://github.com/travis-ci/travis-ci/issues/2904#issuecomment-148485284\n. Nice! :+1: \n. Tangential to this PR, but...\nI wonder if it's desirable and possible to print the Docker nodes that tsuru knows about?\nIt seems useful to know what your Docker nodes are, especially since I've seen at least a few times on gitter/IRC, people were puzzled when they got an error about having a node in the config file that was already registered.\n. Also see https://github.com/tsuru/tsuru/pull/1071\n. I think this can probably be done more in the style of what @cezarsa suggested in #1071 -- instead of reading stuff out of the config in app/server.go, I could have it tell the router to output any interesting information about itself...\n. Updated this to be more like #1071 and now it's more general and can print info about hipache or galeb routers.\n. Just updated again, applying the same comments that @cezarsa suggested in #1071.\n. Good point!\n. @andrewsmedina: Updated to use PORT\n. Closing in favor of #1070 \n. Updated 3 tests in cmd/cmd_test.go. Please review again.\n. Good question. A few reasons.\n1. A beginner doesn't know about tsuru-admin yet when they are first installing tsuru. I remember that when I first setup tsuru, I was following the steps to install tsuru api, gandalf, archive-server, mongodb, docker registry, etc. and I had the distinct feeling of not understanding what the purpose of all these things was and how they talked to each other. In fact, I still don't understand a lot of things like archiver-server and tsuru-unit-agent. Logging a bunch of info when the server starts up -- I feel like that might help to clarify a bit how the system works -- i.e.: the user gets some clue of what tsr api does, after they've installed it. I don't think I knew when I first walked through the install.\n2. When the system is first set up or if things get borked, the user may not an admin account to login with to use tsuru-admin. Or maybe they haven't installed tsuru-admin yet.\n3. Some folks are really into logging everything for monitoring, diagnosing, compliance, etc. At SurveyMonkey, we are big fans of Splunk and the more you make your servers log, the more data you can search through with Splunk. This is true for other stuff like logstash, kibana, etc.\n. @cezarsa: Updated. What do you think of it now?\n. @cezarsa: Thanks for the comments! I updated:\n$ git push -f msabramo show_docker_nodes_at_startup\nCounting objects: 8, done.\nDelta compression using up to 8 threads.\nCompressing objects: 100% (8/8), done.\nWriting objects: 100% (8/8), 1.24 KiB | 0 bytes/s, done.\nTotal 8 (delta 6), reused 0 (delta 0)\nTo git@github.com:msabramo/tsuru.git\n + b28ab9a...fa81073 show_docker_nodes_at_startup -> show_docker_nodes_at_startup (forced update)\n. Hmmm, don't know why Travis CI test is failing.\n. OK, @cezarsa, Travis test is passing now, I think thanks to https://github.com/tsuru/tsuru/commit/54c4480b685f84597628ace335ccba44ecb817a5 (Thanks, @tarsisazevedo!)\n. :+1: for making it consistent.\nBonus points for being lenient. \nBonus bonus points for doing the nickname thing. Could borrow code from docker?\n. Ping\n. Interesting. \nIn any case I think this happened because I had some modified files. \n. Updated to use this:\ndiff\ndiff --git a/cmd/client.go b/cmd/client.go\nindex 75d5148..dfcf3e4 100644\n--- a/cmd/client.go\n+++ b/cmd/client.go\n@@ -60,6 +60,9 @@ func (c *Client) Do(request *http.Request) (*http.Response, error) {\n                        return nil, err\n                }\n                fmt.Fprintf(c.context.Stdout, string(requestDump))\n+               if requestDump[len(requestDump)-1] != '\\n' {\n+                       fmt.Fprintln(c.context.Stdout)\n+               }\n                fmt.Fprintf(c.context.Stdout, \"*************************** </Request uri=%q> **********************************\\n\", request.URL.RequestURI())\n        }\n        response, err := c.HTTPClient.Do(request)\n. Yep. Updated.\n. Ah okay, thanks. I suspect what is happening is that it's sending that message to the syslog where I didn't see it.\nIf I set this in /etc/tsuru/tsuru.conf:\nyaml\nlog:\n    file: /dev/stdout\nthen I get a nice error on stdout:\n2015/01/15 14:24:21 ERROR: error trying to create user \"user@company.com\" in gandalf \n(http://127.0.0.1:8000): Failed to create user in the git server: Failed to connect to Gandalf \nserver (http://127.0.0.1:8000) - Post http://127.0.0.1:8000/user: dial tcp 127.0.0.1:8000: \nconnection refused\n2015/01/15 14:24:21 ERROR: Failed to create user in the git server: Failed to connect to \nGandalf server (http://127.0.0.1:8000) - Post http://127.0.0.1:8000/user: dial \ntcp 127.0.0.1:8000: connection refused\nI wonder if:\nyaml\nlog:\n    file: /dev/stdout\nshould be the default since maybe folks are more likely to notice an error on stdout than in the syslog?\n. The get-code target is the one that is actually failing.\n. go get -x -u -d -t ./...\nfails as well in the same way.\n```\n$ go get -x -u -d -t ./...\n...\ncd /Users/marca/go/src/github.com/tsuru/tsuru\ngit remote -v\ncd /Users/marca/go/src/github.com/tsuru/tsuru\ngit remote -v\ncd /Users/marca/go/src/github.com/tsuru/tsuru\ngit remote -v\ncd /Users/marca/go/src/github.com/tsuru/tsuru\ngit remote -v\n$ echo $?\n1\n```\n. Possibly fixed by https://github.com/tsuru/tsuru/commit/54c4480b685f84597628ace335ccba44ecb817a5 ?\n. Yep, fixed by https://github.com/tsuru/tsuru/commit/54c4480b685f84597628ace335ccba44ecb817a5\nThanks, @tarsisazevedo!\n. :+1:\n. @lucasweiblen is shredding it up lately! Thanks for all your work!\n. > Containers should kill themselves\nSuicide is never the answer.\nSorry, couldn't resist :)\n. Updated.\n. I think it's a habit of mine to quote user input stuff in case it's blank. You can change to %s if you want or I can do it when I'm back at a keyboard. \n. > Can you remove this empty line?\nDone.\n. Maybe add echo and sleep so that we can see when it retries and how long it takes?\n. Cool, thanks!. Changed it to use c.Context.Stdout in the latest version.\n. Done.\n. Thanks! Updated. \n. oops\n. \u276f git push -f msabramo change_sample_port_in_docs_from_8888_to_8100\nCounting objects: 5, done.\nDelta compression using up to 8 threads.\nCompressing objects: 100% (5/5), done.\nWriting objects: 100% (5/5), 549 bytes | 0 bytes/s, done.\nTotal 5 (delta 4), reused 0 (delta 0)\nTo git@github.com:msabramo/tsuru.git\n + bf83b60...0344355 change_sample_port_in_docs_from_8888_to_8100 -> change_sample_port_in_docs_from_8888_to_8100 (forced update)\n. Done\n. Done\n. Done\n. Done. Don't worry about asking for more changes if you see 'em. :smile: \n. Indeed! Just updated. Thanks!\n. ",
    "avelino": "+1\n. When my host (machine installed tsuru-client is debian), I've tested with Debian and Ubuntu on param digitalocean-image\n. upgrade issue, run on debian:\n```\nDigest: sha256:8d559a152572caf7a7400910d2f80ba46e5c4e105789265a837edda2a8f2c5db\nStatus: Downloaded newer image for tsuru/dashboard:latest\n---- Getting process from image ----\n---- Inspecting image \"tsuru/dashboard:latest\" ----\n  ---> Process \"web\" found with commands: [\"gunicorn --access-logfile - -b 0.0.0.0:$PORT -w 2 abyss.wsgi -k gevent\"]\n---- Pushing image \"198.211.109.227:5000/tsuru/app-tsuru-dashboard:v1\" to tsuru ----\nThe push refers to a repository [198.211.109.227:5000/tsuru/app-tsuru-dashboard]\n---- Starting 1 new unit [web: 1] ----\n* ROLLING BACK AFTER FAILURE *\n ---> Error in scheduler after previous errors (error in docker node \"https://198.211.109.227:2376\": API error (500): {\"message\":\"Get https://198.211.109.227:5000/v1/_ping: dial tcp 198.211.109.227:5000: getsockopt: connection refused\"}\n) trying to create container: error in scheduler: No nodes found with one of the following metadata: pool=theonepool <---\nError in scheduler after previous errors (error in docker node \"https://198.211.109.227:2376\": API error (500): {\"message\":\"Get https://198.211.109.227:5000/v1/_ping: dial tcp 198.211.109.227:5000: getsockopt: connection refused\"}\n) trying to create container: error in scheduler: No nodes found with one of the following metadata: pool=theonepool\nError: Error bootstrapping tsuru: failed to deploy dashboard app:\n. Fixed, thanks\n\u25b6 tsuru install-create --config do.yml\nRunning pre-install checks...\nCreating CA: /Users/avelino/.tsuru/installs/tsuru/certs/ca.pem\nCreating client certificate: /Users/avelino/.tsuru/installs/tsuru/certs/cert.pem\nRunning pre-create checks...\nCreating machine...\n(tsuru-1) Creating SSH key...\n(tsuru-1) Assuming Digital Ocean private SSH is located at ~/.ssh/id_rsa\n(tsuru-1) Creating Digital Ocean droplet...\n(tsuru-1) Waiting for IP address to be assigned to the Droplet...\nWaiting for machine to be running, this may take a few minutes...\nDetecting operating system of created instance...\nWaiting for SSH to be available...\nDetecting the provisioner...\nProvisioning with debian...\nCopying certs to the local machine directory...\nCopying certs to the remote machine...\nSetting Docker configuration on the remote daemon...\nChecking connection to Docker...\nDocker is up and running!\nWaiting for SSH to be available...\nDetecting the provisioner...\nCopying certs to the local machine directory...\nCopying certs to the remote machine...\nSetting Docker configuration on the remote daemon...\nCreating registry certificate...\nUploading registry certificate...\nDeploying compose file in cluster manager....\nCreating network tsuru_tsuru\nCreating service tsuru_registry\nCreating service tsuru_tsuru\nCreating service tsuru_redis\nCreating service tsuru_mongo\nCreating service tsuru_planb\nRestarting docker in tsuru-1\nWaiting for SSH to be available...\nDetecting the provisioner...\nWaiting for Tsuru API to become responsive...\n+Opening config file: /etc/tsuru/tsuru.conf\n0Done reading config file: /etc/tsuru/tsuru.conf\n```. ubuntu 16.04 x86:\n```\navelino@cr69 ~ $ tsuru install -c test.conf\nRunning pre-install checks...\nRunning pre-create checks...\nCreating machine...\n(tsuru-1) Creating SSH key...\n(tsuru-1) Creating Digital Ocean droplet...\n(tsuru-1) Waiting for IP address to be assigned to the Droplet...\nWaiting for machine to be running, this may take a few minutes...\nDetecting operating system of created instance...\nWaiting for SSH to be available...\nDetecting the provisioner...\nProvisioning with ubuntu(systemd)...\nInstalling Docker...\nCopying certs to the local machine directory...\nCopying certs to the remote machine...\nSetting Docker configuration on the remote daemon...\nChecking connection to Docker...\nDocker is up and running!\nWaiting for SSH to be available...\nDetecting the provisioner...\nInstalling Docker...\nCopying certs to the local machine directory...\nCopying certs to the remote machine...\nSetting Docker configuration on the remote daemon...\nUploading registry certificate...\nError: failed to provision components machines: failed to provision machines: error uploading registry certificates to ...: Something went wrong running an SSH command!\ncommand : cp /home/root/certs/.pem /home/root/certs/...:5000/\nerr     : exit status 1\noutput  : cp: cannot stat '/home/root/certs/.pem': No such file or directory\navelino@cr69 ~ $\n```\nubuntu 14.04 x86:\n```\navelino@cr69 ~ $ tsuru install -c test.conf\nRunning pre-install checks...\nRunning pre-create checks...\nCreating machine...\n(tsuru-1) Creating SSH key...\n(tsuru-1) Creating Digital Ocean droplet...\n(tsuru-1) Waiting for IP address to be assigned to the Droplet...\nWaiting for machine to be running, this may take a few minutes...\n^[^[Detecting operating system of created instance...\nWaiting for SSH to be available...\nDetecting the provisioner...\nProvisioning with ubuntu(upstart)...\nInstalling Docker...\nCopying certs to the local machine directory...\nCopying certs to the remote machine...\nSetting Docker configuration on the remote daemon...\nChecking connection to Docker...\nDocker is up and running!\nWaiting for SSH to be available...\nDetecting the provisioner...\nInstalling Docker...\nCopying certs to the local machine directory...\nCopying certs to the remote machine...\nSetting Docker configuration on the remote daemon...\nUploading registry certificate...\nError: failed to provision components machines: failed to provision machines: error uploading registry certificates to ...: Something went wrong running an SSH command!\ncommand : cp /home/root/certs/.pem /home/root/certs/...:5000/\nerr     : exit status 1\noutput  : cp: cannot stat \u2018/home/root/certs/.pem\u2019: No such file or directory\navelino@cr69 ~ $\n. Fixed, thanks\n\u25b6 tsuru install-create --config do.yml\nRunning pre-install checks...\nCreating CA: /Users/avelino/.tsuru/installs/tsuru/certs/ca.pem\nCreating client certificate: /Users/avelino/.tsuru/installs/tsuru/certs/cert.pem\nRunning pre-create checks...\nCreating machine...\n(tsuru-1) Creating SSH key...\n(tsuru-1) Assuming Digital Ocean private SSH is located at ~/.ssh/id_rsa\n(tsuru-1) Creating Digital Ocean droplet...\n(tsuru-1) Waiting for IP address to be assigned to the Droplet...\nWaiting for machine to be running, this may take a few minutes...\nDetecting operating system of created instance...\nWaiting for SSH to be available...\nDetecting the provisioner...\nProvisioning with debian...\nCopying certs to the local machine directory...\nCopying certs to the remote machine...\nSetting Docker configuration on the remote daemon...\nChecking connection to Docker...\nDocker is up and running!\nWaiting for SSH to be available...\nDetecting the provisioner...\nCopying certs to the local machine directory...\nCopying certs to the remote machine...\nSetting Docker configuration on the remote daemon...\nCreating registry certificate...\nUploading registry certificate...\nDeploying compose file in cluster manager....\nCreating network tsuru_tsuru\nCreating service tsuru_registry\nCreating service tsuru_tsuru\nCreating service tsuru_redis\nCreating service tsuru_mongo\nCreating service tsuru_planb\nRestarting docker in tsuru-1\nWaiting for SSH to be available...\nDetecting the provisioner...\nWaiting for Tsuru API to become responsive...\n+Opening config file: /etc/tsuru/tsuru.conf\n0Done reading config file: /etc/tsuru/tsuru.conf\n```. \n. Why use IP? Wouldn't it be better (and transparent for all operating systems) use hostname (that solves docker)?. ",
    "pulecp": "Thanks for help. I added TSURU_TOKEN and TSURU_HOST how you wrote.\nYou are right. Push is ignored:\n```\nroot@a:~/wordpress# echo \"\" >> readme.html \nroot@a:~/wordpress# git commit -a -m 'initial project versionsssssssssss'\n[master d31b3f7] initial project versionsssssssssss\n1 file changed, 1 insertion(+)\nroot@a:~/wordpress# git push git@a.example.com:blog.git master\nCounting objects: 5, done.\nCompressing objects: 100% (3/3), done.\nWriting objects: 100% (3/3), 288 bytes, done.\nTotal 3 (delta 2), reused 0 (delta 0)\nTo git@a.example.com:blog.git\n514d9a9..d31b3f7  master -> master\nroot@a:~/wordpress#\n```\n/home/git/bare-template/hooks/post-receive\n```\n!/bin/bash -el\necho \"STARTING POST-RECEIVE HOOKS\"\nwhile read oldrev newrev refname\ndo\n    COMMIT=${newrev}\ndone\napp_dir=${PWD##*/}\napp_name=${app_dir/.git/}\nurl=\"${TSURU_HOST}/apps/${app_name}/repository/clone\"\ncurl -H \"Authorization: bearer ${TSURU_TOKEN}\" -d \"version=origin/master&commit=${COMMIT}\" -s -N --max-time 1800 $url\necho \"ENDING POST-RECEIVE HOOKS\"\n```\nI tried run this script and app is now deployed:\n```\nCOMMIT=d31b3f745bec58268df16fdc68ceb1cfdee1c02a\nTSURU_HOST=http://a.example.com:8080\nTSURU_TOKEN=37e64db48450d052407feb88ddcc9395b146a394\napp_dir=${PWD##*/}\napp_dir=blog\napp_name=${app_dir/.git/}\necho \"app_dir: $app_dir\"\necho \"app_name: $app_name\"\nurl=\"${TSURU_HOST}/apps/${app_name}/repository/clone\"\ncurl -H \"Authorization: bearer ${TSURU_TOKEN}\" -d \"version=origin/master&commit=${COMMIT}\" -s -N --max-time 1800 $url\n```\nand output of this script:\n```\napp_dir: blog\napp_name: blog\nDEPLOY git://192.168.222.2/blog.git origin/master TSURU_APPNAME=blog TSURU_HOST=http://a.example.com TSURU_APP_TOKEN=5f370c398bff6281abd8380ed7690b6b60b9bce9\nNEWREV: origin/master\nAPPREPO: git://192.168.222.2/blog.git\nAPPNAME: blog\nSHA256: b3894841c111a19f588841e48ab3cf148fb11640c21800ca3e7ff3fe28214fbf\ncurl http://tsuru.guest.it/b3894841c111a19f588841e48ab3cf148fb11640c21800ca3e7ff3fe28214fbf.tar | tar x > /dev/null 2>&1\n/var/lib/tsuru/base/deploy: line 28: curl: command not found\n---> App will be restarted, please check its logs for more details...\n```\nNew problem in syslog after manual start hook above:\ntsr[892]: Failed to get message from the queue: Timed out waiting for message after 5s.. Trying again...\nSo....\n1) why is not called this hook\n2) why wordpress address return \"Application Not Responding, Please try again in a few moments.\"\n. permissions are OK:\nls -la /home/git/bare-template/hooks/post-receive\n-rwxr-xr-x 1 git git 360 Apr  3 12:17 /home/git/bare-template/hooks/post-receive\nWhere do I find hooks automatically copied in repository? I suppose that it's in\n/var/lib/gandalf/repositories/blog.git/\nbut I can see here only some sample: http://pastebin.com/raw.php?i=UuN4pZhx\nI'll try another PHP image....\n. - new PHP works!\n- app deployment works when I copied hook manualy to repository!\nhere is my /etc/gandalf.conf\nbin-path: /usr/bin/gandalf-ssh\ngit:\n  bare:\n    location: /var/lib/gandalf/repositories\nauthorized-keys-path: /home/git/.ssh/authorized_keys\nhost: 192.168.222.2\nbind: 0.0.0.0:8000\nuid: git\n. Yeah, that was problem. Thanks for you help.\nIn default is\ntemplate: /home/git/bare-template\ncommented. It should be fixed for example here in doc: http://docs.tsuru.io/en/latest/docker.html\n. Yes, that's okay. I'm using Ubuntu 12.04 and mysql-server (5.5.35-0ubuntu0.12.04.2). Some debug below:\n```\nroot@a:~# crane list\n+----------+-----------+\n| Services | Instances |\n+----------+-----------+\n| mysqlapi |           |\n+----------+-----------+\nroot@a:~# tsuru service-list\n+----------+-----------+\n| Services | Instances |\n+----------+-----------+\n| mysqlapi |           |\n+----------+-----------+\nroot@a:~# tsuru env-get -a mysql-api\nDJANGO_SETTINGS_MODULE=mysqlapi.settings\nMYSQLAPI_DB_HOST=192.168.222.2\nMYSQLAPI_DB_NAME=mysqlapi\nMYSQLAPI_DB_PASSWORD=mypass\nMYSQLAPI_DB_USER=tsuru\nMYSQLAPI_SHARED_PASSWORD=mypass\nMYSQLAPI_SHARED_SERVER=192.168.222.2\nMYSQLAPI_SHARED_SERVER_PUBLIC_HOST=192.168.222.2\nMYSQLAPI_SHARED_USER=tsuru\nTSURU_APPNAME= (private variable)\nTSURU_APP_TOKEN= (private variable)\nTSURU_HOST=*** (private variable)\nroot@a:~# tsuru app-list\n+-------------+-------------------------+---------------------+--------+\n| Application | Units State Summary     | Address             | Ready? |\n+-------------+-------------------------+---------------------+--------+\n| blog        | 1 of 1 units in-service | blog.example.com      | Yes    |\n| blog2       | 1 of 1 units in-service | blog2.example.com     | Yes    |\n| mysql-api   | 1 of 1 units in-service | mysql-api.example.com | Yes    |\n+-------------+-------------------------+---------------------+--------+\nroot@a:~# ping  mysql-api.example.com\nPING mysql-api.example.com (192.168.222.2) 56(84) bytes of data.\n64 bytes from 192.168.222.2: icmp_req=1 ttl=64 time=0.053 ms\n64 bytes from 192.168.222.2: icmp_req=2 ttl=64 time=0.059 ms\n^C\nroot@a:~# netstat -tulnp | grep 8888\nroot@a:~#\nroot@a:~# tsuru service-add mysqlapi mysql_instance\nError: Failed to create the instance mysql_instance: <!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML 2.0//EN\">\n\n404 Not Found\n\nNot Found\nThe requested URL /resources was not found on this server.\n\nApache/2.2.22 (Ubuntu) Server at mysql-api.example.com Port 8888\n\n```\n. Hi, @fsouza. Yes, I have:\n```\nroot@a:~# tsuru run --app mysql-api -- python manage.py syncdb --noinput\nCreating tables ...\nInstalling custom SQL ...\nInstalling indexes ...\nInstalled 0 object(s) from 0 fixture(s)\nroot@a:~# tsuru service-add mysqlapi mysql_instance\nError: Failed to create the instance mysql_instance: <!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML 2.0//EN\">\n\n404 Not Found\n\nNot Found\nThe requested URL /resources was not found on this server.\n\nApache/2.2.22 (Ubuntu) Server at mysql-api.example.com Port 8888\n\nroot@a:~#\n```\n. I think, that \"routing\" into application doesn't work. I need forward port 8888 from app to public ip.\n. OMG, it looks like I installed python as php. Wait for response. I'll try it again with corrected installed platform.\nhere was problem (I wgeted php, and add it as python, typo :-/):\nwget https://raw.githubusercontent.com/flaviamissi/basebuilder/master/php/Dockerfile -O Dockerfile\nsed -i 's/guestisp/tsuru/g' Dockerfile\ndocker build --no-cache -t tsuru/python .\n. Nice. Thanks @fsouza.\nroot@a:~# tsuru service-add mysqlapi mysql_instance\nService successfully added.\n. @fsouza no, I don't know, what I'm doing bad. Wordpress is returning \"Error establishing a database connection\"\n```\nroot@a:~/wordpress# tsuru bind blog2sql -a blog2\nInstance \"blog2sql\" is now bound to the app \"blog2\".\nThe following environment variables are now available for use in your app:\n\nMYSQL_PASSWORD\nMYSQL_USER\nMYSQL_DATABASE_NAME\nMYSQL_HOST\nMYSQL_PORT\n\nFor more details, please check the documentation for the service, using service-doc command.\nroot@a:~/wordpress# grep getenv wp-config.php\ndefine('DB_NAME', getenv('MYSQL_DATABASE_NAME'));\ndefine('DB_USER', getenv('MYSQL_USER'));\ndefine('DB_PASSWORD', getenv('MYSQL_PASSWORD'));\ndefine('DB_HOST', getenv('MYSQL_HOST'));\nroot@a:~/wordpress#\n.\nroot@a:~# tsuru run -a blog2 'cat ../apprc'\ngenerated by tsuru at 08 Apr 14 21:02 +0000\nexport TSURU_APPNAME=\"blog2\"\nexport TSURU_HOST=\"http://192.168.222.2\"\nexport TSURU_APP_TOKEN=\"some-token\"\nexport MYSQL_PASSWORD=\"some-password\"\nexport MYSQL_USER=\"blog2sql\"\nexport MYSQL_DATABASE_NAME=\"blog2sql\"\nexport MYSQL_HOST=\"192.168.222.2\"\nexport MYSQL_PORT=\"3306\"\n```\nDo I have to rewrite it to wp-config.php?\n. nc with '-z' does nothing\n```\nroot@a:~/wordpress# tsuru run --app blog2 'nc $MYSQL_HOST 3306'\n[\n5.5.35-0ubuntu0.12.04.2+gc933GL'\ufffd\ufffd|]=Y)^}yi$t=mysql_native_passwordroot@a:~/wordpress2#\nroot@a:~/wordpress# netstat -tulnap | grep 3306\ntcp        0      0 0.0.0.0:3306            0.0.0.0:*               LISTEN      1054/mysqld\ntcp        0      0 192.168.222.2:3306      172.17.0.4:43010        TIME_WAIT   -          \ntcp        0      0 192.168.222.2:3306      172.17.0.3:33895        ESTABLISHED 1054/mysqld\ntcp        0      0 192.168.222.2:3306      172.17.0.4:42982        TIME_WAIT   -          \ntcp        0      0 192.168.222.2:3306      172.17.0.4:42970        TIME_WAIT   -          \ntcp        0      0 192.168.222.2:3306      172.17.0.4:43014        TIME_WAIT   -          \ntcp        0      0 192.168.222.2:3306      172.17.0.4:43006        TIME_WAIT   -          \ntcp        0      0 192.168.222.2:3306      172.17.0.4:43018        TIME_WAIT   -          \ntcp        0      0 192.168.222.2:3306      172.17.0.4:42954        TIME_WAIT   -          \ntcp        0      0 192.168.222.2:3306      172.17.0.4:42998        TIME_WAIT   -          \ntcp        0      0 192.168.222.2:3306      172.17.0.4:42978        TIME_WAIT   -          \ntcp        0      0 192.168.222.2:3306      172.17.0.4:42966        TIME_WAIT   -          \ntcp        0      0 192.168.222.2:3306      172.17.0.4:42986        TIME_WAIT   -          \ntcp        0      0 192.168.222.2:3306      172.17.0.4:43026        TIME_WAIT   -          \ntcp        0      0 192.168.222.2:3306      172.17.0.4:43002        TIME_WAIT   -          \ntcp        0      0 192.168.222.2:3306      172.17.0.4:43022        TIME_WAIT   -          \ntcp        0      0 192.168.222.2:3306      172.17.0.4:42994        TIME_WAIT   -          \ntcp        0      0 192.168.222.2:3306      172.17.0.4:42989        TIME_WAIT   -                \ntcp        0      0 192.168.222.2:3306      172.17.0.4:42974        TIME_WAIT   -          \ntcp        0      0 192.168.222.2:3306      172.17.0.4:42958        TIME_WAIT   -                \ntcp        0      0 192.168.222.2:3306      172.17.0.4:42962        TIME_WAIT   -          \nroot@a:~/wordpress#\n```\n. I tried it, no change :-/\n. I tried reboot whole server. No improvement.\nI hardcoded mysql credentials and I'm getting another error:\nCould not connect: Can't connect to local MySQL server through socket '/var/run/mysqld/mysqld.sock' (2)\n. Sry,. that was output of following script in index.php:\n$link = mysql_connect('192.168.222.2', 'blog2sql', 'password');\nif (!$link) {\n        die('Could not connect: ' . mysql_error());\n}\necho 'Connected successfully';\nmysql_close($link);\nPage isn't loaded sometimes and sometimes returns:\nCould not connect: Access denied for user 'blog2sql'@'172.17.0.5' (using password: YES)\nIt's weird :-/. So I tried:\n```\nmysql> delete from mysql.user where user = 'blog2sql';\nQuery OK, 1 row affected (0.00 sec)\nmysql> grant all privileges on . to 'blog2sql'@'%' identified by 'password';\nQuery OK, 0 rows affected (0.00 sec)\nroot@a:~/wordpress# mysql -ublog2sql -p\nEnter password: \nERROR 1045 (28000): Access denied for user 'blog2sql'@'localhost' (using password: YES)\nroot@a:~/wordpress#\n```\nStill not working. I'll try tomorrow some remote database.\n. @fsouza  yeah, wp-config contains right credentials:\nroot@a:~/wordpress2# grep DB wp-config.php | grep -v \"^#\"\ndefine('DB_NAME', 'blog2sql');\ndefine('DB_USER', 'blog2sql');\ndefine('DB_PASSWORD', 'password');\ndefine('DB_HOST', '192.168.222.2');\ndefine('DB_CHARSET', 'utf8');\ndefine('DB_COLLATE', '');\n. Problem solved! Database users are allowed connect only from localhost by tsuru in default. So:\ndelete from mysql.user where user = 'blog2sql';\ngrant all privileges on *.* to 'blog2sql'@'%' identified by 'password';\nI changed already early binding addres of MySQL to \"0.0.0.0\".\nSo where is problem? Shouldn't be binded mysql service to localhost in app and 'DB_HOST' set to localhost?\n. @fsouza here is my tsuru.conf: http://pastebin.com/raw.php?i=xEEpiBw8\n. @fsouza yes, a new user created for new blog is allowed log in from 127.0.0.1. Here is output from mysql:\n| 127.0.0.1 | blogsql          |\n. ",
    "drowe": "Can you link to some docs as to how this can be resolved by \"registering the docker node with a public address\"?  I'm running into this same issue with the grant only on 127.0.0.1 - but I'm not sure how to correct?\n. Hi @fsouza - I probably used 127.0.0.1 - since I'm using everything on the same host for now as a test run.\nHow should I add the node if tsuru is running on the same host as Docker?  Should I use the docker0 interface bridge IP, or the fully external public IP?  I asked about this in IRC and was told this would be a huge security risk?\n. ",
    "lucciano": "It's not working form me, I am using tsuru-bootstrap (vagrant/virtalbox)\nvagrant@vagrant-ubuntu-trusty-64:~$ tsuru service-list \ndosn't return anything\n. ",
    "aledbf": "I just found https://gist.github.com/andrewsmedina/8050149\nClosing\n. ",
    "bnuhero": "+1\n. ",
    "scorphus": "I'll dig this one as soon as possible.\n. @andrewsmedina Absolutely, I'll add that missing test and push to this branch.\n. Thanks, @msabramo!. YAY! My pleasure! :wink: \n. I wasn't aware of that env var, thanks!\nAbout the flag itself, IMHO it's nice having it. We're already used to it, as so many cli utilities use it. It's kinda default flag.. ",
    "akshitha123": "thanks :)\n. yea\nOn Wed, May 14, 2014 at 8:13 PM, Francisco Souza\nnotifications@github.comwrote:\n\n@akshitha123 https://github.com/akshitha123 may I close this issue?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/tsuru/tsuru/issues/785#issuecomment-43089362\n.\n. error: open /var/lib/tsuru/.juju/environments.yaml: no such file or directory\n. thanku so much :)\n\nOn Thu, May 15, 2014 at 5:34 PM, Francisco Souza\nnotifications@github.comwrote:\n\nHi @akshitha123 https://github.com/akshitha123. Did you run juju\nbootstrap? The docs aren't clear, but you need tu run it with the tsuru\nuser:\n% sudo su - tsuru\n% juju bootstrap\nThen you will need to configure the /var/lib/tsuru/.juju/environments.yamlfile according to your environment (open it and set AWS credentials and\nbucket).\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/tsuru/tsuru/issues/787#issuecomment-43201079\n.\n. actually no , we had to show it today :P\n\nOn Thu, May 15, 2014 at 9:42 PM, Francisco Souza\nnotifications@github.comwrote:\n\n@akshitha123 https://github.com/akshitha123 did you manage to get it\nworking?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/tsuru/tsuru/issues/787#issuecomment-43230603\n.\n. that's k :)\n\nOn Thu, May 15, 2014 at 10:12 PM, Francisco Souza\nnotifications@github.comwrote:\n\nOps! Sorry about that :(\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/tsuru/tsuru/issues/787#issuecomment-43234469\n.\n. btw i hav client and server installed on the same machine\n. \n",
    "thbeh": "Hi,\nI am currently on Ubuntu 12.04.4 LTS\nRegards\nBeh\nOn Wed, May 14, 2014 at 10:48 AM, Andrews Medina\nnotifications@github.comwrote:\n\nThe \"nc: Address..\" is a fake process, it does not affect your\napplication. The real problem should be: \"httpd (pid 129) already running\".\nWhat platform you are using?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/tsuru/tsuru/issues/790#issuecomment-43036963\n.\n. I am using php.\ntsuru app-create testblog php\n\nAs per instruction on http://docs.tsuru.io/en/latest/apps/quickstart/php.html\n. Thanks. It work now.\nissue #790 can be closed.\n. Great. i will test it out. thanks\n. yes, please. Thanks.\nOn Sat, Jun 28, 2014 at 1:07 AM, Francisco Souza notifications@github.com\nwrote:\n\n@thbeh https://github.com/thbeh may I close this issue?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/tsuru/tsuru/issues/792#issuecomment-47375091.\n. \n",
    "jadsonlourenco": "the target that just installed, tsuru-server. I also see now that the tsuru is not running on port should, 8080, as it is in the configuration file. \nHave redid the installation process several times and the same thing happens. I'll keep trying. \nAny way to \"debug\" to collect the errors on the server? Missed this in the documentation?\nTY!\n. Nothing yet. Where do I get the log of the tsuru, on server?\n. I managed to find the log, because applications run on the tsuru containers, not as services on the host system, as I thought.\n. then it is because of the installation packages from the PPA does not work? if i setup a VM CentOS it will work properly? \nI saw the logs and found the problem, and all services can rise, tsuru-server-api  is up, but hipache, I think, is not targeting correctly.\n. yes, I'm using the default config of tsuru, just change the public IP\n. @andrewsmedina yes i try with this method of installation but get error also. I'll go with this method now, in vagrant, i hope work. Soon back.\nand the config is equal.\nTY for help! (valeu mesmo, rsrs)\n. unfortunately the same error, using a VM Ubuntu 12.04 both vagrant and in DigitalOcean always get this error when I try to access with tsuru-client, for any action, I always get the same response, this HTML code of hipache.\n. the IP of machine, or the fake domain (from etc/hosts), this for local VM. For digitalOcean a true subdomain and IP also.\n. for example: my VM has the IP \"192.168.50.10\", in port 80 get the hipache, but no pingo on others ports like 8080, 8888. If I add the tsuru-target for the IP with port 8080 receive the error that server is down, course.\n. My final answer is based on that installation, using this script. Have him set the variables needed in the beginning, right?\n. ok, thanks for your help. It is a problem with the docker, it is running but is not rising containers, I'll investigate further. But it is not a problem with the Tsuru, good! \nclosing here, thanks again. \nPS: @andrewsmedina and the question I asked about the Dashboard?\n. @andrewsmedina thanks, I'll do this!\nBut at moment I can't up the tsuru server. I've done several tests with various versions of Ubuntu. The Docker times does not work properly, or tsuru-api does not up, etc. As I said at the beginning of the topic could install and test the server Tsuru last week, but not now. I'll take a break and try again next week, maybe work. I've tested other alternative systems: Deis.io, Flynn, Stackato, etc. But Tsuru has Brazilian blood, and has a great architecture planned, for example the \"swap\". Thanks.\nSee ya.\n. ",
    "wpjunior": "Yes, N3RD3X is my old nickname, I wrote PKGBUILD file today, is working file.\n. if maintain all destination app environment variables, all right.\n. Yeah!, It is a good opportunity to learn more go lang! \n. OK:\nhttps://github.com/tsuru/tsuru/blob/master/cmd/shell.go#L83\n. Done!\n. suggestion\n    c.Assert(recorder.Body.String(), check.Equals, \"tsuruteam/app-otherapp:mytag\\nOK\\n\"). suggestion\n    c.Assert(recorder.Body.String(), check.Equals, \"tsuruteam/app-otherapp:mytag\\nOK\\n\"). ",
    "gabrielpjordao": ":+1: on this. Would definitely be useful. \n. +1 on this :-) \n. Thank you guys! ;-) \n. ",
    "tepafoo": "Maybe try adding a \"RUN apt-get update\" line before the failing step?\n. ",
    "minhdanh": "Thanks @tarsis, but I absolutely have no idea what you're saying :-( Can you please be more specific? I'm quite new to tsuru.\n. Hi, as I changed the default endpoint and set the target to default, then run platform-add again, I got this error:\nError: You're not authenticated or your session has expired. Please use \"login\" command for authentication.\nIs there something still missing?\n. Thanks @tarsis , I've just made it.\n. So I guess you need to update the documentation again :D\nhttp://docs.tsuru.io/en/latest/apps/recovery.html\n. Well, one more thing with tsuru log is that I don't get what I need from it. I have a Rails app, but as I access it from the browser, tsuru log -f doesn't show any log of the HTTP requests. Besides, when there's some error with the app, I cannot find any error here, too. What I get is almost the log of a git push deploy.\n. @fsouza Can you please explain it in more details?\n. So, at the moment, I can only deploy apps to a single tsuru server only, right?\nI'm also eager for the new version. Will it be available within 1 month?\n. Actually, as a first time user trying to get tsuru up and running, I have a lot of problems that took me days to overcome. In my opinion, the documentation is very hard to follow and rather confusing. For example, as I navigated to the latest documentation page (to install tsuru), I didn't know what to read first: Using tsuru, Runing tsuru, Install tsuru, configure and run tsuru... They seem not in a favored order. I think it would be nice if you have such a \"Quick start\" guide or something... Besides, some of the concepts of tsuru are not very clear. I cannot find any page which mentions what a unit is, what is the relationship between a unit and a node, unit and app... So a good explanation page of the concepts would be nice, too.\n. ",
    "jasoncox": "I was wondering the same thing, how to access detailed logs?\n. Hi @andrewsmedina I was following the wrong docs, its working now! Thank you!\n. @fsouza, it is a second node... my mistake I need to set up a private registry. I found that out by searching other issues.\n. @fsouza I'd like to help with the docs... whats the preferred method for bootstrapping a server? tsuru/now?\n. @andrewsmedina  Error: 404 page not found\nAlso tsr version returns 0.5.0, but it was compiled from https://github.com/tsuru/tsuru/archive/0.5.1.tar.gz\ntsuru-admin, tsuru both return the latest version as expected.\n. I built all from the release package, I think the version in tsr is wrong.\n. ",
    "tatiana": "BTW: the command is: tsuru-admin app-unlock --app <app-name>\n. ",
    "jnana-rb": "root@vagrant-ubuntu-trusty-64:/home/vagrant# tsuru-admin app-unlock --app svcpack\ntsuru-admin: command not found\nroot@vagrant-ubuntu-trusty-64:/home/vagrant# tsurud version\ntsurud version 1.5.0-rc15. hash c72388547d65bbdeac2fb6c914f7d5270e1d5eb6\nroot@vagrant-ubuntu-trusty-64:/home/vagrant# tsuru version\ntsuru version 1.4.0.\nfound that tsuru-admin is deprecated, what's the alternative?. volume-plans:\n  ebs:\n    kubernetes:\n      storage-class: standard\nThis works. Thanks.. ",
    "sroze": "That makes a lot of sense because right now (I think) we can't push other banches than master: that means that we can't really handle continuous integration of multiple banches... With this in mind, just sending the repository URL (and maybe the credentials) and branch to deploy is perfect !\n. :+1: it would be nice !\n. :+1: \nAnything technical to point out quickly to avoid waiting the doc ?\n. Thanks !\n. @andrewsmedina I updated previous commit base on your comments and added the documentation bullet (and rebuilt this morning as previous Travis build failed to launch) \n. So I also removed this default for status.\n. ",
    "gfronza": "I'm sorry for raising this old topic, but it seemed the right place to ask my question.\n@magnotorres you said that you have as many hipache instances as you need, but for tsuru would be like it was only one at a time? I mean for HA. Say I want to avoid a single point of failure (hipache router) would I have multiple servers (running hipache) with a floating VIP and then use this VIP to link docker router in the tsuru.conf? Is there a better way of getting HA in tsuru/hipache?\n. ",
    "gcirne": "+1\n. ",
    "robsonpeixoto": ":heart: this idea\n. Support to ELB or Cloudstack is really required? The HAProxy will help a lot.\n. Thanks @fsouza \n. ",
    "joaopaulovieira": "I forgot to thank you, @jblancett !\nThe fix for this bug is already on the list of bug fixes in 0.9.0 release.\nThanks again. (:\n. Should be yes, @msabramo.\nThe healthcheck routes that are being created for services are only returning \"working\" and will conflict with the .json return you implemented.\nAnd as @andrewsmedina mentioned, some information would not need to be exposed in json.\none solution is leaving the optional json return in Tsuru API and have a struct error to return both the response of \"working\" as json.\n. ",
    "alexanderjardim": "Hey,\n\nNov 19 12:52:03 vagrant-ubuntu-trusty-64 tsr[6979]: FATAL: key \"listen\" not found\nNov 19 12:52:03 vagrant-ubuntu-trusty-64 kernel: [ 2199.406493] init: tsuru-server-api main process (6979) terminated with status 1\nNov 19 12:52:03 vagrant-ubuntu-trusty-64 kernel: [ 2199.406501] init: tsuru-server-api main process ended, respawning\nNov 19 12:52:03 vagrant-ubuntu-trusty-64 tsr[6988]: FATAL: key \"listen\" not found\nNov 19 12:52:03 vagrant-ubuntu-trusty-64 kernel: [ 2199.418271] init: tsuru-server-api main process (6988) terminated with status 1\nNov 19 12:52:03 vagrant-ubuntu-trusty-64 kernel: [ 2199.418277] init: tsuru-server-api main process ended, respawning\nNov 19 12:52:03 vagrant-ubuntu-trusty-64 tsr[6997]: FATAL: key \"listen\" not found\nNov 19 12:52:03 vagrant-ubuntu-trusty-64 kernel: [ 2199.430504] init: tsuru-server-api main process (6997) terminated with status 1\nNov 19 12:52:03 vagrant-ubuntu-trusty-64 kernel: [ 2199.430512] init: tsuru-server-api main process ended, respawning\nNov 19 12:52:03 vagrant-ubuntu-trusty-64 tsr[7004]: FATAL: key \"listen\" not found\nNov 19 12:52:03 vagrant-ubuntu-trusty-64 kernel: [ 2199.442096] init: tsuru-server-api main process (7004) terminated with status 1\nNov 19 12:52:03 vagrant-ubuntu-trusty-64 kernel: [ 2199.442103] init: tsuru-server-api respawning too fast, stopped\nNov 19 13:17:01 vagrant-ubuntu-trusty-64 CRON[7160]: (root) CMD (   cd / && run-parts --report /etc/cron.hourly)\n. Hm, okay. There was a typo at my tsuru.conf\nNow it is working.\n. \n",
    "kinosang": "And if it remove app-isolation: true from my config file, tsuru will startup normally but it will return an error when I try to deploy a git repo to server.\n. @guestisp It's PANIC: interface conversion: interface is nil, not map[interface {}]interface {}\n. ~~And by the way, segregate: true will make tsuru-server-api crashed when I start the service.~~\nThis one is solved by removing docker:server configuration from tsuru.conf. I think it's better to add tips for this into tsuru's docs.\n. @guestisp I don't think it's caused by changes in Docker provisoner, I downgraded my Docker to 1.0.1, and got the same trouble. One of my friends let the system works well with Docker 1.0.1, Tsuru lastest and ceph 0.80.7 on Ubuntu.\n. @fsouza It says invalid value \"/etc/tsuru/tsuru.conf\" for flag --config: YAML error: line 45: mapping values are not allowed in this context\n43    sharedfs:\n44\u00a0\u00a0\u00a0\u00a0    hostdir: /mnt/storage/dockerstor\n45\u00a0\u00a0\u00a0\u00a0    mountpoint: /storage\n46        app-isolation: true\n. @fsouza Here's all of my tsuru.conf:\n```\nlisten: \"0.0.0.0:8080\"\ndebug: true\nhost: http://abc.com:8080\nadmin-team: admin\nauth:\n    user-registration: true\n    scheme: native\ndatabase:\n    url: localhost:27017\n    name: tsurudb\nqueue: redis\nredis-queue:\n    host: localhost\n    port: 6379\ngit:\n    unit-repo: /home/application/current\n    api-server: http://localhost:8000\nprovisioner: docker\ndocker:\n    segregate: true\n    router: hipache\n    collection: docker_containers\n    repository-namespace: tsuru\n    deploy-cmd: /var/lib/tsuru/deploy\n    cluster:\n        storage: mongodb\n        mongo-url: localhost:27017\n        mongo-database: cluster\n    scheduler:\n        redis-server: localhost:6379\n        redis-prefix: docker-cluster\n    run-cmd:\n        bin: /var/lib/tsuru/start\n        port: \"8888\"\n    ssh:\n        add-key-cmd: /var/lib/tsuru/add-key\n        user: ubuntu\n    registry: main.abc.com:5000\nservers:\n- http://node1.abc.com:4243\n- http://node1.abc.com:4243\n- http://node1.abc.com:4243\nsharedfs:\n\nhostdir: /mnt/storage/dockerstor\n\u00a0\u00a0\u00a0\u00a0    mountpoint: /storage\n        app-isolation: true\nhipache:\n    domain: main.abc.com\n    redis-server: localhost:6379\n```\n. @fsouza Got the same failure.\n\u00cf\nlisten: 0.0.0.0:8080\ndebug: true\nhost: http://abc.com:8080\nadmin-team: admin\nauth:\n    user-registration: true\n    scheme: native\ndatabase:\n    url: localhost:27017\n    name: tsurudb\nqueue: redis\nredis-queue:\n    host: localhost\n    port: 6379\ngit:\n    unit-repo: /home/application/current\n    api-server: http://localhost:8000\nprovisioner: docker\ndocker:\n    segregate: true\n    router: hipache\n    collection: docker_containers\n    repository-namespace: tsuru\n    deploy-cmd: /var/lib/tsuru/deploy\n    cluster:\n        storage: mongodb\n        mongo-url: localhost:27017\n        mongo-database: cluster\n    scheduler:\n        redis-server: localhost:6379\n        redis-prefix: docker-cluster\n    run-cmd:\n        bin: /var/lib/tsuru/start\n        port: 8888\n    ssh:\n        add-key-cmd: /var/lib/tsuru/add-key\n        user: ubuntu\n    registry: main.abc.com:5000\n    sharedfs:\n\u00a0\u00a0\u00a0\u00a0    hostdir: /mnt/storage/dockerstor\n\u00a0\u00a0\u00a0\u00a0    mountpoint: /storage\n        app-isolation: true\nhipache:\n    domain: main.abc.com\n    redis-server: localhost:6379\n. Yep, I think it's caused by some listchars, maybe at the end of hostdir line.\nThx for your help. @fsouza \n@guestisp It's not a bug but a mistake.\n. @fsouza Yes, it works well.\n. Shared FS works well, the problem just caused by a mistake in tsuru.conf .-- Sent with Mailbox.app\nChino Chang\nWebsite: 7in0.me\nE-mail: me@7in0.me\nOn Wed, Nov 26, 2014 at 2:17 AM, GUEST.it notifications@github.com\nwrote:\n\nSo, there is no issue with Shared FS? I'm asking this because sharedfs feature was added by me and i would like to know if is creating troubles.\nReply to this email directly or view it on GitHub:\nhttps://github.com/tsuru/tsuru/issues/992#issuecomment-64445493\n. It may caused by ufw.\nAnd after I disabled ufw, I got this:\n\nremote: Deploying on platform PHP 5.4-1        \nremote: tar: Removing leading `/' from member names        \nremote: \nremote: \nremote: \nremote: ========================================        \nremote:  Parsing Apache modules to enable        \nremote: ========================================        \nremote: \nremote:    No Apache modules to enable.        \nremote: \nremote: \nremote: \nremote: ========================================        \nremote:  Parsing Composer dependances...        \nremote: ========================================        \nremote: \nremote:    Missing composer.json file or 'vendor' directory exists. Skipping composer...        \nremote: Traceback (most recent call last):        \nremote:   File \"/usr/local/bin/tsuru_unit_agent\", line 9, in <module>        \nremote:     load_entry_point('tsuru-unit-agent==0.3.4', 'console_scripts', 'tsuru_unit_agent')()        \nremote:   File \"/usr/local/lib/python2.7/dist-packages/tsuru_unit_agent/main.py\", line 50, in main        \nremote:     actions[args.action](args)        \nremote:   File \"/usr/local/lib/python2.7/dist-packages/tsuru_unit_agent/main.py\", line 27, in deploy_action        \nremote:     tasks.write_circus_conf(envs=envs)        \nremote:   File \"/usr/local/lib/python2.7/dist-packages/tsuru_unit_agent/tasks.py\", line 111, in write_circus_conf        \nremote:     with open(procfile_path) as f:        \nremote: IOError: [Errno 2] No such file or directory: '/home/application/current/Procfile'        \nremote: Exit status 1\n. Already solved by updating platforms.\n. @jonaskac It's still an assumption. I'll try to do it after I get start with Golang.\n. @cezarsa That sounds good. But can we choose which location to deploy our applications? Sometimes we want to deploy an application on some special locations instead of all the locations.\n. @jblancett Oh, I just forgot it. But I think it's better to manage location with tsuru-admin.\n. @jblancett Ok, you are right. I'll try to build my own user panel to manage all of my routers instead of make change on tsuru.\n. @jonaskac @cezarsa @jblancett Okay, all guys, I think the function I need might not be a part of tsuru, it's more like a function of a user panel. I'm writing a panel to control tsuru, docker registry and routers. Images can be transfer between locations by user, load balance is optional, and it doesn't need to make changes on tsuru and docker.\nIt will look like:\n```\nMain Server: my panel\nLocation 1 (might have multi server):\nTsuru-server-api\nDocker registry\nmongodb\nHipache\nRedis\nDocker\nsome other things\nLocation n: ...\n```\n. @jblancett Yep, already got it.\n. ",
    "dcarley": "I've had a looked, with my limited understanding of the Tsuru codebase, at how the DR solution might be implemented. I'd appreciate your thoughts.\nIt seems like it could be done without modifying the router(s) by looping over App.Units() and using the existing (Add|Remove)(Route|Backend) methods to achieve consistency. This would mean that it'd work for all present and future routers. Although you wouldn't be able to identify/remove orphaned entries.\nIn which case I guess it would make sense to put this functionality in App, maybe as a RebuildRoutes() method, since it knows about each app's units and router. However App isn't currently responsible for adding/removing routes/backends for created/deleted units, it's the provisioner that does. Should App do that instead?\n. Thanks @cezarsa !\nI got quite a long way into implementing this before realising that units didn't know about where the container is running, and then got horribly lost thinking about what bc6f586353358c9e8cdac03f8ddf3fd69caf5c95 now does :+1: \n. It looks like this is back:\n- Go 1.5: https://travis-ci.org/tsuru/tsuru/jobs/76511670\n- Go tip: https://travis-ci.org/tsuru/tsuru/jobs/76511671\nIt makes it hard for external contributors to tell whether the project is stable and whether their pull requests are working. Can you re-open this issue?\n. Thanks, both!\n. Lucas completed this in tsuru/tsuru-admin#2\n. Makes sense, thanks.\n. Both of those points sound good.\nvulcand has an api package that I think means we could do it all in Go without implementing an HTTP client. It'll bring in a lot of dependencies though. What would you prefer?\nNo promises as to how soon this will get implemented..\n. Hold up, I have a branch with vulcand implementing the router interface. But the tests rely on an upstream pull request being merged. I'll push in a few hours, if you want to look?\n. Here it is: https://github.com/tsuru/tsuru/compare/tsuru:master...dcarley:vulcand_router\n. I've rebased against #1209: https://github.com/tsuru/tsuru/compare/tsuru:master...dcarley:vulcand_router_net_url\nFeel free to take those commits and tack some on the end to fix the memng problem. I'm not sure how to best handle that, whether you want to include etcd as a dependency for the tests?\nSome random thoughts as I was doing this:\n- As mentioned in one of the commits, I didn't use router.Retrieve() because I wasn't clear what it's purpose was. Does this matter?\n- It might be useful to have some generic integration tests for everything that implements the router.Router interface because there are some inconsistencies or undefined behaviours, e.g. how to handle duplicate routes.\n- It would be possible to get vulcand into an inconsistent state whereby it would refuse to add backends/routes because they already exist. I guess this might be the problem for other routers too? Does that matter?\n- vulcand doesn't have any pretty \"application not configured\" and \"application not responding\" pages like Hipache does by default. Although there's a discussion in mailgun/vulcand#54 about how it might be possible with fallback routes and another backend.\n- As pointed out on the memng pull request and mailgun/vulcand#78, vulcand doesn't current support websockets. It's probably not a problem for us (at GDS) and I guess other people can always choose to use a different router if that's a feature that they want.\n. > It's necessary for app-swap to work correctly. The way the code for app-swap code works isn't very straightforward, I'll take a look at simplifying it and making app-swap work.\nI'm using router.Store() in AddBackend() and router.Remove() in RemoveBackend(), and I think the tests confirm that Swap() is doing the right thing. I'm just not using router.Retrieve() anywhere because it wasn't clear what the arguments were or why I shouldn't use the same private functions that are used to construct names.\n\nI see this could happen if someone manually called vulcand api inserting entries with the same ID tsuru would use, I don't think that's a problem. Is there a situation where tsuru itself would cause this problem to happen?\n\nProbably not. I might be worrying for no reason.\nOther points, don't worry and thanks!\nI'm not sure that ae02a3b94753b3ad30bb4c1f2bdb47a2032e13cb is correct. From memory, although I should have said in the commit message, it only matches requests for GET /.\n. :+1:\n. In hindsight, it might be better if the tests startup an instance of vulcand and send requests through it. Closer to integration testing. If you don't object and I get some spare time then I'll look into it.\n. Sadly, I'm no longer using Tsuru.\nI'm really glad for you and your users that you landed this feature though :tada:. Thanks!\n. Thanks!!\n. I've found myself needing to parse the output of various sub-commands but struggled because of:\n- column headers (e.g. tsuru app-list | awk '{print $2}' contains Application)\n- ASCII tables (e.g. tsuru app-list | awk '{print $2}' contains empty lines)\n- wrapped lines within a row (e.g. Metadata column in tsuru-admin docker-node-list)\nI wonder if a generic solution would be to introduce a CLI flag for all sub-commands that replaces the ASCII table with single-row tab-delimited output? And/or default to that behaviour if the output is not a TTY (e.g. pipe)?\n. ",
    "diranged": "This definitely works for certain services where the endpoints don't change... like a logging service. However, its less good for endpoints that might change. The advantage of using the existing 'iptables redirection model' is that you can change container configurations as things are running. For example, lets say we migrate our prod-db1 host to prod-db2 (kind of an ugly example, I know..). The other thing is that having a simpler model to refer to the 'local docker container' host would be good just for ease of use.\nEither way, I think this basic model should just be added into the services model.. its simpler for the administrators and the users of the system IMO.\n. ",
    "gwmoura": "I changed hipache.redis-server from 127.0.0.1:6379 to tsuru.local:6379 and redis-queue.host from 127.0.0.1 to 0.0.0.0\nMy tsuru.conf\n```\nlisten: \"0.0.0.0:8080\"\ndebug: true\nadmin-listen: \"0.0.0.0:8081\"\nhost: http://tsuru.local:8080\nUncomment the following lines to enable HTTPS on Tsuru. You will need the\npaths to the certificate and key files.\n\nuse-tls: true\ntls-cert-file: /path/to/cert.pem\ntls-key-file: /path/to/key.pem\nDatabase configuration. Tsuru API needs a MongoDB server. By default, it will\nconnect on localhost, in the default port, and use the database \"tsuru\".\nUncomment and customize the lines below to change these values.\n\ndatabase:\n  url: 127.0.0.1:27017\n  name: tsuru\nGit configuration. These settings refer to Gandalf, the git management tool\nused by Tsuru.\n\n* unit-repo: it's the path where Tsuru will clone app code in units. This\nvalue should not change after its initial definition.\n* api-server: HTTP URL where Gandalf is accessible. Tsuru will use this URL\nto create users and repositories.\n* rw-host: rw-host is the host string that will be used for reading and\nwriting in Git repositories. It will be used to build the SSH\nURL for the git repository, and need to be accessible from the\ninternet.\n* ro-host: ro-host is the host string that will be used for reading data\nfrom Git repositories. It will be used to build the read-only\nURL for the repository. This host need to be accessible from\nunits. You may use the private IP of the Gandalf host.\ngit:\n  unit-repo: /home/application/current\n  api-server: http://tsuru.local:8000\n  #rw-host: tsuru.local\n  #ro-host: 10.10.10.10\nS3 Bucket support. When this flag is defined as true, Tsuru will create a S3\nbucket per application. Bucket creation depends on AWS settings (next\nsection).\n\nbucket-support: false\nAWS configuration. Tsuru communicates with AWS to manage user credentials on\nIAM, load balancers on ELB and buckets on S3.\n\nUncomment these settings if you want to create S3 buckets and manage ELB\ninstances per app.\n\naws:\naccess-key-id: access-id-here\nsecret-access-key: secret-very-secret\nec2:\nendpoint: https://ec2.us-east-1.amazonaws.com\niam:\nendpoint: https://iam.amazonaws.com/\ns3:\nregion-name: us-west-1\nendpoint: https://ec2.us-west-1.amazonaws.com\nbucketEndpoint: https://s3-us-west-1.amazonaws.com\nlocation-constraint: true\nlowercase-bucket: true\nAuthentication configuration.\n\n* token-expire-days: this option controls the time (in days) for a token\nto expire.\n* hash-cost: Tsuru uses bcrypt for password hashing, here you can control\nthe cost of the hashing.\n* user-registration: by default, users are not able to register themselves\nin Tsuru server (via the \"user-create\" command).\nChanging this options to true enables the user-create\ncommand.\nauth:\ntoken-expire-days: 7\nhash-cost: 10\nuser-registration: true\n  scheme: native\nTsuru uses provisioners for creating units per app. There are two\nprovisioners: Docker and Juju. In order to use the Juju provisioner, you need\nto uncomment the lines below and specify the settings you need.\n\nJuju configuration includes the following options:\n\n* charms-path: the path to the local charms distribution. Tsuru's charms\nare hosted at github.com/globocom/charms.\n* units-collection: the name of the database collection that Juju\nprovisioner will use to store information about its\nunits.\n* use-elb: when defined as true, Juju provisioner will create ELB\ninstances when provisioning a new app.\n* elb-endpoint: HTTP endpoint to the Elastic Load Balancing API.\n* elb-collection: the name of the database collection the Juju provision\nwill use to store information about ELB instances.\n* elb-avail-zones: list of availability zones for the load balancer. This\noption is not necessary in VPC mode.\n* elb-use-vpc: defines whether ELB instances should use VPC or ordinary\nEC2 networking. When in VPC mode, all load balancers will\nbe created in internal mode. For more details, check AWS\ndocs: https://aws.amazon.com/elasticloadbalancing.\n* elb-vpc-subnets: list of subnets to use in VPC mode.\n* elb-vpc-secgroups: list of security groups to use in VPC mode.\n\nprovisioner: juju\njuju:\nbootstrap-collection: juju_bootstrap\ncharms-path: /home/charms\nunits-collection: juju_units\nuse-elb: false\nelb-endpoint: https://elasticloadbalancing.amazonaws.com\nelb-collection: juju_load_balancers\nelb-avail-zones:\n- us-west-1a\nelb-use-vpc: false\nelb-vpc-subnets:\n- network1\n- network2\nelb-vpc-secgroups:\n- secgroup1\n- secgroup2\nBelow are settings for the Docker provisioner. Tsuru uses Docker in a\nclustered environment, so there are some settings related to the scheduling\nof containers in the cluster.\n\n* servers: list of docker servers. Used in non-segregated mode (see\nsegregate for more details).\n* collection: name of the database collection that Docker provisioner will\nuse to store information about containers in the cluster.\n* repository-namespace: the namespace to use in Docker images. For\ninstance, an app named blog will have an image\n/blog.\n* router: the router to use.\n* deploy-cmd: command to run every time user runs deploy. When using\nTsuru's default images, just uncomment the line.\n* segregate: indicates whether tsuru should use a scheduler that\nsegregates containers among Docker nodes. When using this\nscheduler, each team will have a group of Docker nodes and\nTsuru will spawn new containers for that team only on these\nnodes. This scheduler can be used to segregate subnets per\nteam.\n* scheduler: configuration for the scheduler. In order to make the\ncluster run faster, it's recommended to use the Redis\nstorage. It will store the relation between containers and\nnodes.\n* run-cmd: command that will start the application. Also includes the port\nthat will be used for redirecting traffic. This is the port\nthat applications should bind.\n* ssh: Tsuru will start the container with a SSH server. This section\ncontains options that describe which command will be used to\nadd the public key to containers, the public key path, the user\nand the path to the SSH server (which is optional).\n\nprovisioner: docker\nhipache:\ndomain: cloud.company.com\ndocker:\n  registry: tsuru.local:8080\n  servers:\n    - http://tsuru.local:4243\n  collection: docker_containers\n  repository-namespace: tsuru\n  router: hipache\n  deploy-cmd: /var/lib/tsuru/deploy\n  segregate: false\n  scheduler:\n    redis-server: 0.0.0.0:6379\n    redis-prefix: docker-cluster\nredis-password: s3cr3t\ncluster:\n    storage: mongodb\n    mongo-url: 127.0.0.1:27017\n    mongo-database: cluster\n  run-cmd:\n    bin: /var/lib/tsuru/start\n    port: \"8888\"\n  ssh:\n    add-key-cmd: /var/lib/tsuru/add-key\n    public-key: /home/ubuntu/.ssh/id_rsa.pub\n    user: ubuntu\n    sshd-path: /usr/sbin/sshd\nThe address of the queue server (beanstalkd). By default, it's\n127.0.0.1:11300. Uncomment and change for connecting in a different\nBeanstalkd instance.\n\nqueue-server: \"127.0.0.1:11300\"\nqueue: redis\nredis-queue:\n  host: 0.0.0.0\n  port: 6379\nThe name of the admin team. When ommited, no team will be able to administrate Tsuru.\n\nadmin-team: admin\nQuota information. Tsuru supports two kind of quotas: number of units per app\nand number of apps per user.\n\nquota:\nunits-per-app: 2\napps-per-user: 2\nhipache:\n  domain: tsuru.local\n  redis-server: tsuru.local:6379\n``\n. @andrewsmedina edited mytsuru.conf` and my server is running now.\nthankyou\n. This problem accour with another platform, like Python or Ruby?\n. @blacksector in your node 2, the mongodb is the same of node 1? The user data are saved in mongodb, if your node 2 is configured to use one mongodb and your node 1 have another mongodb, the login will fail because the user not exists in database\n. @blacksector you can update section database: in your tsuru.conf\n. @aamirmushtaq this files are of the image tsuru/planb? If yes plan not have a setting to limit the data log, you can configure planb to send log to syslog or stdout - https://github.com/tsuru/planb#start-up-flags. To change the config, you can remove the container and rerun change the --access-log value. \n. :+1: for remove :grin:\n. I belive deploy a os whitout apps is not a role of the tsuru. Tsuru is a paas he was made to deploy apps.\n. @guestisp on this project exists just the method CreateQemuVM, is only this you need for the proxmox?\n. @guestisp I'm sorry for delay, I want create add IaaS support for google cloud platform, I am studying how do it, it's not a promise, but I'm gonna try help you, I need conciliate work and open source :smile:\n. :wink:\n. maybe, tsuru can work like heroku - https://github.com/heroku/docker-go#appjson, for the first step, tsuru can require a tsuru.yaml with informations about the platform.\nex:\ntsuru app-create appname python this command will create a tsuru.yaml with:\n```\ntsuru.yaml\nimage: tsuru/python\n```\ntsuru app-create appname this command will create a empty tsuru.yaml with:\n```\ntsuru.yaml\nimage:\n```\non git push, tsuru read the tsuru.yaml to know the platform and on tsuru app-deploy if -i option not passed tsuru read from tsuru.yaml\nThis is only one option, to broke this task in little tasks without lost the user behavior\n. @andrewsmedina you can check now!\n. @andrestc, is it good now? :smile:\n. @ArxdSilva thank you! Typos fixed. :smile: \n. :wink: you are welcome\n. I think better use tsuru.yml for this config. How we use to deploy app, the .gitignore can ignore paths or files used in production. Normally config files and vendor paths are added on .gitignore. the problem can be here:\n\nremote: +++ curl -sN -F archive=@/tmp/blog_06cbe2fdf4fe516aaa07aab4bfdae937c887627a_4b40dbfbca1549de8fdd0848a7f1f51c.tar.gz http://127.0.0.1:3131/\nremote: ++ result='no reachable servers'\nremote: ValueError: No JSON object could be decoded\n\nCheck if your archive-server is up and listening on port 3131. @accbel, sorry for delay, On your tsuru.conf file is configured to point  to your remote mongodb?\nYou can configure the mongodb host for archive-server passing a paramenter -mongodb=. \nlook this link: https://github.com/tsuru/archive-server/blob/03201ff6981dbc6d5c8da02b561c70a65c4138f8/Dockerfile#L9 . Great, you can close this issue now :smile:. ",
    "ribasushi": "@msabramo Ignore me - I didn't read the commit date on the \"referenced\" part of the issue. FAIL.\n. ",
    "wagnersza": "nice!\n. under construction in https://github.com/tsuru/dockerized-setup\n. Error with Virtualbox 6.0 and 5.2\nIn VirtualBox the machine exist, but in docker-machine ls command it doesn't apear\n$ docker-machine ls\nNAME   ACTIVE   DRIVER   STATE   URL   SWARM   DOCKER   ERRORS\nDocke Machine is working well\n```\n$ docker-machine create default -d virtualbox\n$ docker-machine ls\nNAME      ACTIVE   DRIVER       STATE     URL                         SWARM   DOCKER     ERRORS\ndefault   -        virtualbox   Running   tcp://192.168.99.101:2376           v18.09.3\n```\n```\n$ tsuru install-create\nRunning pre-install checks...\nCreating CA: /Users/wagnersza/.tsuru/installs/tsuru/certs/ca.pem\nCreating client certificate: /Users/wagnersza/.tsuru/installs/tsuru/certs/cert.pem\nRunning pre-create checks...\n(tsuru-1) Image cache directory does not exist, creating it at /Users/wagnersza/.tsuru/installs/tsuru/cache...\n(tsuru-1) No default Boot2Docker ISO found locally, downloading the latest release...\n(tsuru-1) Latest release for github.com/boot2docker/boot2docker is v18.09.3\n(tsuru-1) Downloading /Users/wagnersza/.tsuru/installs/tsuru/cache/boot2docker.iso from https://github.com/boot2docker/boot2docker/releases/download/v18.09.3/boot2docker.iso...\n(tsuru-1) 0%....10%....20%....30%....40%....50%....60%....70%....80%....90%....100%\nCreating machine...\n(tsuru-1) Copying /Users/wagnersza/.tsuru/installs/tsuru/cache/boot2docker.iso to /Users/wagnersza/.tsuru/installs/tsuru/machines/tsuru-1/boot2docker.iso...\n(tsuru-1) Creating VirtualBox VM...\n(tsuru-1) Creating SSH key...\n(tsuru-1) Starting the VM...\n(tsuru-1) Check network to re-create if needed...\n(tsuru-1) Waiting for an IP...\nWaiting for machine to be running, this may take a few minutes...\nDetecting operating system of created instance...\nWaiting for SSH to be available...\nDetecting the provisioner...\nProvisioning with boot2docker...\nCopying certs to the local machine directory...\nCopying certs to the remote machine...\nSetting Docker configuration on the remote daemon...\nChecking connection to Docker...\nDocker is up and running!\nWaiting for SSH to be available...\nDetecting the provisioner...\nCopying certs to the local machine directory...\nCopying certs to the remote machine...\nSetting Docker configuration on the remote daemon...\nCreating registry certificate...\nUploading registry certificate...\nDeploying tsuru config...\nDeploying compose file in cluster manager....\nError: ssh command error:\ncommand : sudo docker deploy -c /tmp/compose.yml tsuru\nerr     : exit status 1\noutput  : Top-level object must be a mapping\n```. ",
    "CvX": "Hi, what's the status of this idea? I see that referenced repo is now deprecated.. ",
    "leandrosouza": "pre-receive debug\nremote: +++ curl -sNd 'path=/var/lib/gandalf/repositories/tsuru-dashboard.git&refid=7f6f0aa1a7ef65e995f6f03b0e5689cfec886fc2' http://127.0.0.1:3131/\nremote: ++ result='no reachable servers'\nremote: ++ python\nremote: Traceback (most recent call last):\nremote:   File \"<stdin>\", line 2, in <module>\nremote:   File \"/usr/lib/python2.7/json/__init__.py\", line 338, in loads\nremote:     return _default_decoder.decode(s)\nremote:   File \"/usr/lib/python2.7/json/decoder.py\", line 366, in decode\nremote:     obj, end = self.raw_decode(s, idx=_w(s, 0).end())\nremote:   File \"/usr/lib/python2.7/json/decoder.py\", line 384, in raw_decode\nremote:     raise ValueError(\"No JSON object could be decoded\")\nremote: ValueError: No JSON object could be decoded\nremote: + archive_id=\n. Thanks @fsouza It's work for me.\n. +1\n. +1\nI've the same idea/problem\n. nice\n+1\n. More logs from statsd\n{\"index\":{\"_index\":\".measure-tsuru-2015.09.20\",\"_type\":\"gauge\"}}\n{\"ns\":\"tsuru\",\"grp\":\"dashboard\",\"tgt\":\"cc6ebdbcf9a7cpu_max\",\"act\":\"\",\"val\":\"0\",\"@timestamp\":\"1442791573000\"}\n{\"index\":{\"_index\":\".measure-tsuru-2015.09.20\",\"_type\":\"gauge\"}}\n{\"ns\":\"tsuru\",\"grp\":\"dashboard\",\"tgt\":\"cc6ebdbcf9a7mem_max\",\"act\":\"\",\"val\":\"0\",\"@timestamp\":\"1442791573000\"}\n{\"index\":{\"_index\":\".measure-tsuru-2015.09.20\",\"_type\":\"gauge\"}}\n{\"ns\":\"tsuru\",\"grp\":\"dashboard\",\"tgt\":\"cc6ebdbcf9a7mem_pct_max\",\"act\":\"\",\"val\":\"0\",\"@timestamp\":\"1442791573000\"}\n. Do you know if it works in tsuru version 0.11.x ? \n. I'm trying to use logstash but when I send the metrics return this error. \n{:timestamp=>\"2015-09-23T03:08:33.524000+0000\", :message=>\"Trouble parsing json\", :source=>\"message\", :raw=>\"tsuru.dashboard.1fc97a7412a0.net.connections:17|g\", :exception=>#, :level=>:warn}\nMy logstash conf:\n```\ninput {\n    udp {\n        port => 1984\n    }\n}\nfilter {\n    json {\n        source => \"message\"\n    }\nif \"_jsonparsefailure\" in [tags] {\n    mutate {\n        add_field => {\n            client => \"error\"\n            metric => \"metric_error\"\n        }\n    }\n}\n\n}\noutput {\n    elasticsearch {\n        protocol => \"http\"\n        host => \"localhost\"\n        index => \".measure-%{client}-%{+YYYY.MM.dd}\"\n        index_type => \"%{metric}\"\n    }\n}\n```\nLogstash version 1.5.4\n. I am using the environments in each unit\nSTATSD_HOST=myhost and STATSD_PORT=1984 \n. I put the variables but the metrics never send to logstash.\nLOGSTASH_HOST and LOGSTASH_PORT\nLooking the circus code I saw the options backend and the default backend is statsd. \nWhen I set the new variable like logstash  ( TSURU_METRICS_BACKEND=logstash ) the metrics was sent to logstash hosts.\nNow the graphs still not renders, because the data is empty.\nIt's a result of get from dashboard to render the graphs\n{\"max\": \"4.60\", \"data\": [], \"min\": \"0.00\"}\n. I am using the master version\n$ git pull\nAlready up-to-date.\n. ",
    "danielfree": "@cezarsa You are right, for legacy apps that use filesystem dir to read/write files, external nfs/smb endpoints can do the job, thanks.\n. ",
    "vmalaga": "@cezarsa I am trying to mount an external nfs vol with the hook on trusu.yaml but i get an error from the container:\nremote: mount.nfs: Operation not permitted\nremote: Exit status 32\nI have at requirements.apt nfs-common and start the rpcbind and rpc.statd daemons needed for nfs locking, this is my tsuru.yaml\nhooks:\n  build:\n    - sudo /sbin/rpcbind\n    - sudo /sbin/rpc.statd\n    - sudo mkdir /home/ubuntu/mailbox && sudo mount -t nfs nfs02:/mnt/VMAIL /home/ubuntu/mailbox\nYou know if I need anything else? \n. I have try shared fs at tsuru.conf but this option mount this volumen on every app-container without any option to decide which app can mount it\nThere is any option for this ?\n. @andrewsmedina what i mean is, if i have 2 NFS vols and i want that \n- nfsserver:/vol01 is mounted on app_cms and app_erp\n- nfsserver:/vol02 is mounted on app_db and app_db2 but not at the rest of apps\nWhat i can't find is if i can have more than one sharedfs on tsuru\nCould be nice to have a NFS service so only apps that require a nfs vol could be started in privileged mode and have a sharedfs, not all apps\n. @cezarsa I am working with _sharedfs and _app-isolation: true \nbut I found that when deploy the app and the directory for that app is created, is created with root owner and 755 permisions, so the user ubuntu that run the app inside container don't have permisions on the sharedfs\nIf change the umask of user root on each node,  create the directory with the right permissions, but i don't know if there other solution for this.\nAlso I have created a user-group ubuntu with gid 1000 on each node, but is not using it\n. This is how are created all directories for apps:\nroot@tsr01:/TSURU/dockersharedfs# ls -l \ntotal 60\ndrwxr-xr-x 2 root root 4096 may 25 13:19 itapps\ndrwxr-xr-x 2 root root 4096 may 23 00:04 itapps-static\ndrwxr-xr-x 2 root root 4096 may 24 21:47 mongoexpress\ndrwxr-xr-x 2 root root 4096 may 24 21:47 mysqlapi\ndrwxr-xr-x 2 root root 4096 may 23 00:43 oracleapp\ndrwxr-xr-x 2 root root 4096 may 24 21:47 postgresapi\ndrwxr-xr-x 2 root root 4096 may 25 10:31 qapps\ndrwxr-xr-x 3 root root 4096 may 25 13:12 qhelpdesk\ndrwxr-xr-x 2 root root 4096 may 24 21:47 redisapi\ndrwxr-xr-x 2 root root 4096 may 23 13:42 rediscommander\ndrwxr-xr-x 2 root root 4096 may 24 21:47 service-rabbitmq\ndrwxr-xr-x 2 root root 4096 may 24 21:47 tsurudashboard\nAnd if I try to create a file with ubuntu user I get a permission denied:\nubuntu@fda4d416e60e:/$ touch /sharedfs/test1.txt\ntouch: cannot touch \u2018/sharedfs/test1.txt\u2019: Permission denied\nubuntu@fda4d416e60e:/$ sudo touch /sharedfs/test1.txt\nubuntu@fda4d416e60e:/$ ls -l /sharedfs/\ntotal 0\n-rw-r--r-- 1 root root 0 may 25  2015 test1.txt\n. @guestisp who create the subdir at the sharedfs, docker daemon ?\nis possible that new versions of docker change it\n. Hi @guestisp \nyou have been able to figure out why this happens, I still have the problem and we solve with a chmod crontab\n. Yes I am using docker nodes provisioned by us on a ubuntu server.\nI have read at the docs that all the docker:healing:* options are only for IaaS or i can use this params also for manualy provisioned nodes ?\n. great, now it works like you say with this params:\nhealing:\n        heal-containers-timeout: 10\n        active-monitoring-interval: 5\nbut now i have find the problem that if a docker node fail with N app-dockers running on it, this containers are healing to other node, but when the node returns starts all the dockers had running before the fail, generating inconsistency between what is actually running and what tsuru believes there running\nI have see that when the node returns one of the first request is one like this from tsuru api\nINFO[0195] GET /v1.18/containers/json\nIt might be a good idea to check those json data with the running units, if you are not doing already\ni need to do _docker stop $(docker ps -a -q) when the node start to avoid inconsistency beause _containers-rebalance don't resolve the problem.\nyou know if this is the normal behavior of docker?\n. ok wait for the next release for the fix.\n. closed\n. @cezarsa you're right, with the segregate scheduler there is not any problem.\nok I use segregate from now.\nthanks\n. @cezarsa I am testing the units scale and see that the segregate scheduler fails removing units from system.\nNow don't generate a runtime error, but the unit is not removed from pool\n```\nroot@tsrmgr:~# tsuru app-info -a qhelpdesk\nApplication: qhelpdesk\nRepository: git@tsrmgr.qdqmedia.com:qhelpdesk.git\nPlatform: python\nTeams: cmsteam\nAddress: qhelpdesk.tsuru.qdqmedia.com\nOwner: xxxx@qdqmedia.com\nTeam owner: cmsteam\nDeploys: 43\nPool: prod\nUnits: 2\n+------------+---------+--------------------+-------+--------------+\n| Unit       | State   | Host               | Port  | IP           |\n+------------+---------+--------------------+-------+--------------+\n| 370483ca65 | started | tsr01.qdqmedia.com | 32829 | 172.17.0.102 |\n| a26eaf42fc | started | tsr03.qdqmedia.com | 32833 | 172.17.0.115 |\n+------------+---------+--------------------+-------+--------------+\nService instances: 1\n+----------+--------------+\n| Service  | Instance     |\n+----------+--------------+\n| postgres | qhelpdesk_db |\n+----------+--------------+\nApp Plan:\n+---------------+--------+------+-----------+--------+---------+\n| Name          | Memory | Swap | Cpu Share | Router | Default |\n+---------------+--------+------+-----------+--------+---------+\n| autogenerated | 0 MB   | 0 MB | 100       |        | false   |\n+---------------+--------+------+-----------+--------+---------+\n```\nroot@tsrmgr:~# tsuru unit-remove 1 -a qhelpdesk\nUnits successfully removed!\nand at syslog i see that, but the node choosen to remove the unit is invalid\nMay 29 11:21:36 tsrmgr tsr[11584]: [scheduler] Possible nodes for remove a container: []string{\"tsr02.qdqmedia.com\", \"tsr03.qdqmedia.com\", \"tsr01.qdqmedia.com\"}\nMay 29 11:21:36 tsrmgr tsr[11584]: [scheduler] Chosen node for remove a container: \"http://tsr02.qdqmedia.com:2375\" Count: 6\n. If I can help you testing any thing say me\n. yes, sorry\n. on our tsuru installation we have solve this limitation with the bind mount, keeping in mind that is a cluster and need nfs or other cluster filesystem to share it with all node member on the cluster\nif you have this config on tsuru.conf and /mnt/tsuru is a nfs volumen\nsharedfs:\n    hostdir: /mnt/tsuru\n    mountpoint: /sharedvol\n    app-isolation: true\ninside your apps you will have on /sharedvol the contents of  /mnt/tsuru/appname\nand if you want the contents of other nfs or filesystem for this app, could mount it with bind\nmount -o bind /mnt/vol1 /mnt/tsuru/appname/vol1 inside your app /sharedvol/vol1\n. I'm sorry, but after the apt-get update tsurud not been restarted after doing now works\n. @fsouza ok thanks\n. I think with the new v2 api can't DELETE by tags, need the digest or manifests\nhttps://docs.docker.com/registry/spec/api/\nhttps://github.com/docker/distribution/blob/master/docs/spec/api.md#deleting-an-image\n. Hi @tarsisazevedo when is going out this feature, I see you say with 1.0 milestone, but it take's a long time.\n. Hi @tarsisazevedo \nThis night i have updated our tsuru instance but the DELETE on registry is still requested on v1 api and return a 404 error\nregistry_v2          | 172.16.70.100 - - [04/Oct/2016:15:07:10 +0000] \"DELETE /v1/repositories/tsuru/app-varnishapi:v10/ HTTP/1.1\" 404 19 \"\" \"Go-http-client/1.1\"\nis this issue fixed on tsuru 1.0 ?\nPD: I have apps with more than 300 tags\n. Hi @andrewsmedina we are now with the last version of tsuru and the log is from today\nroot@tsurudev:~# tsurud version\ntsurud version 1.1.0.\nalthough in the log I see v2 calls has also calls to v1 with 404 reponses  trying to delete tags layers. send you the log\nregistry.txt\n. with debug on the  pre-receive hook I see the error is produced by curl trying to athenticate with tsuru\nremote: + curl -H 'Authorization: bearer bf1181bb84ef7fe24c8f035cf3941b3843450580' -d 'archive-url=http://172.16.70.100:3232/?id=72343cd1c23b9f2c6a49251f0f54f5b78f552a7b55096bf7c834daddbf88cbb2b820258daa95b1585c13469a24ca18383bea7d3c4337b3f97beefa2c8c59ca6e&commit=e534dd4666612544ff22a1d991376037495a08a2&user=admin@qdqmedia.com' -s -N http://172.16.70.100:8080/apps/billing/repository/clone\nAlso I can see the value of bearer comes from TSURU_TOKEN variable\nremote: + export TSURU_TOKEN=bf1181bb84ef7fe24c8f035cf3941b3843450580\nremote: + TSURU_TOKEN=bf1181bb84ef7fe24c8f035cf3941b3843450580\n- Is it possible that TSURU TOKEN have a wrong value? \n- where came from TSURU_TOKEN?\n- Can I regenerate this token with a valid value ?\ntsuru.txt\n. Hi @cezarsa \nyes is possible, more of this apps was created on 2015-04-xx and some of then never updated since 2015.\nI have 2 type of tokens on mongo, one with appname but useremail empty and other with useremail but appname empty\n{\n    \"_id\": ObjectID(\"552b01088fd7c95a3b301712\"),\n    \"token\": \"<removed token>\",\n    \"creation\": ISODate(\"2015-04-12T23:34:32.911Z\"),\n    \"expires\": \"31536000000000000\",\n    \"useremail\": \"\",\n    \"appname\": \"service-mysql\"\n}\n{\n    \"_id\": ObjectID(\"553182208fd7c95a3b36a6d0\"),\n    \"token\": \"<removed token>\",\n    \"creation\": ISODate(\"2015-04-17T21:58:56.184Z\"),\n    \"expires\": 604800000000000,\n    \"useremail\": \"vmalaga@qdqmedia.com\",\n    \"appname\": \"\"\n}\nBut I can see on the last apps created the expires: 0 \nI am going to set it on all apps.\n{\n    \"_id\": ObjectID(\"56026ecf6fafc954a6c1b208\"),\n    \"token\": \"<removed token>\",\n    \"creation\": ISODate(\"2016-09-23T09:20:15.978Z\"),\n    \"expires\": 0,\n    \"useremail\": \"\",\n    \"appname\": \"landerdash\"\n}\nRegards\n. ",
    "mwduarte": "Hi Vicente, about the sharedfs support on tsuru take a look in issue #1163.\nI had the same doubt about this feature of tsuru you are having now.\nThere, I post the steps I follow to discovery how it works.\nRegards.\nDate: Fri, 24 Apr 2015 07:35:48 -0700\nFrom: notifications@github.com\nTo: tsuru@noreply.github.com\nSubject: Re: [tsuru] Support docker data volume as service (#1100)\n@andrewsmedina what i mean is, if i have 2 NFS vols and i want that \nnfsserver:/vol01 is mounted on app_cms and app_erp\nnfsserver:/vol02 is mounted on app_db and app_db2 but not at the rest of apps\nWhat i can't find is if i can have more than one sharedfs on tsuru\nCould be nice to have a NFS service so only apps that require a nfs vol could be started in privileged mode and have a sharedfs, not all apps\n\u2014\nReply to this email directly or view it on GitHub.\n. Bellow are the tsr daemon logs:\nMar 27 14:56:55 ts tsr[17652]: [pipeline] running the Forward for the reserve-units-to-add action\nMar 27 14:56:55 ts tsr[17652]: [pipeline] running the Forward for the provision-add-units action\nMar 27 14:56:55 ts tsr[17652]: [pipeline] running the Forward for the provision-add-units-to-host action\nMar 27 14:56:55 ts tsr[17652]: [pipeline] running the Forward for the insert-empty-container action\nMar 27 14:56:55 ts tsr[17652]: message repeated 2 times: [ [pipeline] running the Forward for the insert-empty-container action]\nMar 27 14:56:55 ts tsr[17652]: [pipeline] running the Forward for the create-container action\nMar 27 14:56:55 ts tsr[17652]: create container for app teste-andre, based on image 10.0.2.5:3030/tsuru/app-teste-andre:v5, with cmds [/bin/bash -lc tsuru_unit_agent http://10.0.2.5:8080 b165d8bba78a89e9e2288b25068f7d097adbd6dc teste-andre /var/lib/tsuru/start && tail -f /dev/null]\nMar 27 14:56:55 ts tsr[17652]: [pipeline] running the Forward for the create-container action\nMar 27 14:56:55 ts tsr[17652]: create container for app teste-andre, based on image 10.0.2.5:3030/tsuru/app-teste-andre:v5, with cmds [/bin/bash -lc tsuru_unit_agent http://10.0.2.5:8080 b165d8bba78a89e9e2288b25068f7d097adbd6dc teste-andre /var/lib/tsuru/start && tail -f /dev/null]\nMar 27 14:56:55 ts tsr[17652]: [pipeline] running the Forward for the create-container action\nMar 27 14:56:55 ts tsr[17652]: create container for app teste-andre, based on image 10.0.2.5:3030/tsuru/app-teste-andre:v5, with cmds [/bin/bash -lc tsuru_unit_agent http://10.0.2.5:8080 b165d8bba78a89e9e2288b25068f7d097adbd6dc teste-andre /var/lib/tsuru/start && tail -f /dev/null]\nMar 27 14:56:55 ts tsr[17652]: [scheduler] Possible nodes for container 488f100a37fe964fab4b: []string{\"127.0.0.1\"}\nMar 27 14:56:55 ts tsr[17652]: [scheduler] Possible nodes for container a5d1d178eb8151e51c99: []string{\"127.0.0.1\"}\nMar 27 14:56:55 ts tsr[17652]: [scheduler] Possible nodes for container 6b99527f13e905228d0a: []string{\"127.0.0.1\"}\nMar 27 14:56:55 ts tsr[17652]: [scheduler] Chosen node for container 488f100a37fe964fab4b: \"http://127.0.0.1:2375\" Count: 20004\nMar 27 14:56:55 ts tsr[17652]: [scheduler] Chosen node for container a5d1d178eb8151e51c99: \"http://127.0.0.1:2375\" Count: 30005\nMar 27 14:56:55 ts tsr[17652]: [scheduler] Chosen node for container 6b99527f13e905228d0a: \"http://127.0.0.1:2375\" Count: 40006\nMar 27 14:56:55 ts tsr[17652]: [pipeline] running the Forward for the start-container action\nMar 27 14:56:55 ts tsr[17652]: starting container 70dffc323b6ebb60b33a679ad7baec8805b91a5089cbbac958835ab03156db79\nMar 27 14:56:55 ts tsr[17652]: [pipeline] running the Forward for the start-container action\nMar 27 14:56:55 ts tsr[17652]: starting container 1bda4cbc467cc7746cf498bc7f47682736795425589c1384d36e03ba83083509\nMar 27 14:56:55 ts tsr[17652]: [pipeline] running the Forward for the start-container action\nMar 27 14:56:55 ts tsr[17652]: starting container cd00afcaed7145a41088699a8382082ea556677dcb9358e4340df7308c44202d\nMar 27 14:56:55 ts kernel: [23521.967971] device veth955fb67 entered promiscuous mode\nMar 27 14:56:55 ts kernel: [23521.968178] IPv6: ADDRCONF(NETDEV_UP): veth955fb67: link is not ready\nMar 27 14:56:55 ts kernel: [23522.039382] IPv6: ADDRCONF(NETDEV_CHANGE): veth955fb67: link becomes ready\nMar 27 14:56:55 ts kernel: [23522.039403] docker0: port 3(veth955fb67) entered forwarding state\nMar 27 14:56:55 ts kernel: [23522.039409] docker0: port 3(veth955fb67) entered forwarding state\nMar 27 14:56:55 ts kernel: [23522.067676] device vetha4cd083 entered promiscuous mode\nMar 27 14:56:55 ts kernel: [23522.067989] IPv6: ADDRCONF(NETDEV_UP): vetha4cd083: link is not ready\nMar 27 14:56:55 ts kernel: [23522.067997] docker0: port 4(vetha4cd083) entered forwarding state\nMar 27 14:56:55 ts kernel: [23522.068005] docker0: port 4(vetha4cd083) entered forwarding state\nMar 27 14:56:56 ts tsr[17652]: [pipeline] running the Forward for the update-database-container action\nMar 27 14:56:56 ts tsr[17652]: [pipeline] running the Forward for the set-network-info action\nMar 27 14:56:56 ts kernel: [23522.183255] IPv6: ADDRCONF(NETDEV_CHANGE): vetha4cd083: link becomes ready\nMar 27 14:56:56 ts kernel: [23522.243364] device veth6f8f120 entered promiscuous mode\nMar 27 14:56:56 ts kernel: [23522.243612] IPv6: ADDRCONF(NETDEV_UP): veth6f8f120: link is not ready\nMar 27 14:56:56 ts kernel: [23522.243616] docker0: port 5(veth6f8f120) entered forwarding state\nMar 27 14:56:56 ts kernel: [23522.243653] docker0: port 5(veth6f8f120) entered forwarding state\nMar 27 14:56:56 ts tsr[17652]: [pipeline] running the Forward for the update-database-container action\nMar 27 14:56:56 ts tsr[17652]: [pipeline] running the Forward for the set-network-info action\nMar 27 14:56:56 ts kernel: [23522.393128] IPv6: ADDRCONF(NETDEV_CHANGE): veth6f8f120: link becomes ready\nMar 27 14:56:56 ts tsr[17652]: [pipeline] running the Forward for the update-database-container action\nMar 27 14:56:56 ts tsr[17652]: [pipeline] running the Forward for the set-network-info action\nMar 27 14:56:56 ts tsr[17652]: [pipeline] running the Forward for the bind-and-healthcheck action\nMar 27 14:56:56 ts tsr[17652]: [pipeline] running the Forward for the add-new-routes action\nMar 27 14:56:56 ts tsr[17652]: [pipeline] running the Forward for the update-app-image action\nMar 27 14:57:10 ts kernel: [23537.052951] docker0: port 3(veth955fb67) entered forwarding state\nMar 27 14:57:11 ts kernel: [23537.116208] docker0: port 4(vetha4cd083) entered forwarding state\nMar 27 14:57:11 ts kernel: [23537.244172] docker0: port 5(veth6f8f120) entered forwarding state\nMar 27 14:59:44 ts tsr[17652]: [scheduler] Possible nodes for remove a container: []string{\"127.0.0.1\"}\nMar 27 14:59:44 ts tsr[17652]: [scheduler] Chosen node for remove a container: \"http://127.0.0.1:2375\" Count: 7\nMar 27 14:59:44 ts tsr[17652]: Removing container 946d0f24cad76ce41e43f254b1e38a32ff9d2379d96893bca0f814e3eeb70815 from docker\nMar 27 14:59:54 ts kernel: [23700.517058] docker0: port 6(veth854092f) entered disabled state\nMar 27 14:59:54 ts kernel: [23700.518852] device veth854092f left promiscuous mode\nMar 27 14:59:54 ts kernel: [23700.518863] docker0: port 6(veth854092f) entered disabled state\nMar 27 14:59:54 ts tsr[17652]: Removing container 946d0f24cad76ce41e43f254b1e38a32ff9d2379d96893bca0f814e3eeb70815 from database\nMar 27 14:59:54 ts tsr[17652]: [scheduler] Possible nodes for remove a container: []string{\"127.0.0.1\"}\nMar 27 14:59:54 ts tsr[17652]: [scheduler] Chosen node for remove a container: \"http://127.0.0.1:2375\" Count: 6\nMar 27 14:59:54 ts tsr[17652]: Removing container 3cb8dc472e792a9e6859129747445fa899e40af2e6dd51b8bf97c84d14f3cd68 from docker\nMar 27 15:00:04 ts kernel: [23710.992979] docker0: port 7(vethec4f481) entered disabled state\nMar 27 15:00:04 ts kernel: [23710.994530] device vethec4f481 left promiscuous mode\nMar 27 15:00:04 ts kernel: [23710.994538] docker0: port 7(vethec4f481) entered disabled state\nMar 27 15:00:05 ts tsr[17652]: Removing container 3cb8dc472e792a9e6859129747445fa899e40af2e6dd51b8bf97c84d14f3cd68 from database\nMar 27 15:00:05 ts tsr[17652]: [scheduler] Possible nodes for remove a container: []string{\"127.0.0.1\"}\nMar 27 15:00:05 ts tsr[17652]: [scheduler] Chosen node for remove a container: \"http://127.0.0.1:2375\" Count: 5\nMar 27 15:00:05 ts tsr[17652]: Removing container f7ee55a888f73549c6751da7e36c0fd98104a3defc991ab771c5929c0813c05c from docker\nMar 27 15:00:15 ts kernel: [23721.362719] docker0: port 1(veth8d7fd45) entered disabled state\nMar 27 15:00:15 ts kernel: [23721.365374] device veth8d7fd45 left promiscuous mode\nMar 27 15:00:15 ts kernel: [23721.365388] docker0: port 1(veth8d7fd45) entered disabled state\nMar 27 15:00:15 ts tsr[17652]: Removing container f7ee55a888f73549c6751da7e36c0fd98104a3defc991ab771c5929c0813c05c from database\nMar 27 15:00:15 ts tsr[17652]: [scheduler] Possible nodes for remove a container: []string{\"127.0.0.1\"}\nMar 27 15:00:15 ts tsr[17652]: [scheduler] Chosen node for remove a container: \"http://127.0.0.1:2375\" Count: 4\nMar 27 15:00:15 ts tsr[17652]: Removing container 1fc403394f6bedba01612ef83641de225298727381d25aa32407e87d4cdf975f from docker\nMar 27 15:00:25 ts kernel: [23731.857324] docker0: port 2(veth08434a7) entered disabled state\nMar 27 15:00:25 ts kernel: [23731.859081] device veth08434a7 left promiscuous mode\nMar 27 15:00:25 ts kernel: [23731.859093] docker0: port 2(veth08434a7) entered disabled state\nMar 27 15:00:25 ts tsr[17652]: Removing container 1fc403394f6bedba01612ef83641de225298727381d25aa32407e87d4cdf975f from database\nMar 27 15:00:30 ts dhclient: DHCPREQUEST of 10.0.2.5 on eth0 to 10.0.2.3 port 67 (xid=0x62447cb0)\nMar 27 15:00:30 ts dhclient: DHCPACK of 10.0.2.5 from 10.0.2.3\nMar 27 15:00:30 ts dhclient: bound to 10.0.2.5 -- renewal in 480 seconds.\n. I follow the instructions on tsuru/now (https://github.com/tsuru/now), running the command:\n./run.bash --host-name paas.rbs.com.br\nBellow the required information and the Ubuntu release used.\nRegards.\nmilton_duarte@ts:~$ uname -a\nLinux ts 3.16.0-30-generic #40~14.04.1-Ubuntu SMP Thu Jan 15 17:43:14 UTC 2015 x86_64 x86_64 x86_64 GNU/Linux\nmilton_duarte@ts:~$ apt-cache show tsuru-server\nPackage: tsuru-server\nPriority: extra\nSection: devel\nInstalled-Size: 10593\nMaintainer: Globo.com tsuru@corp.globo.com\nArchitecture: amd64\nVersion: 0.10.3+1SNAPSHOT20150326034511+0000-1~trusty1\nDepends: sysv-rc (>= 2.88dsf-24) | file-rc (>= 0.8.16), libsqlite3-0\nFilename: pool/main/t/tsuru-server/tsuru-server_0.10.3+1SNAPSHOT20150326034511+0000-1~trusty1_amd64.deb\nSize: 2199860\nMD5sum: d337faa422f083808ffd1f439694e2f8\nSHA1: 72c43a3071059fc84fff7f2eacdf97dd0ab49a4f\nSHA256: 6ef575016c806fdc616484921c27f770b9c6da239b482ef93e954365a6ccc6fc\nDescription-en: tsuru-server is the server side of the Tsuru PaaS.\n This package includes two services: Tsuru API and Tsuru SSH agent. All jobs\n are disabled by default, to enable any of them, edit the file\n /etc/default/tsuru-server.\nDescription-md5: 178d777e45d5e11c7dc989a386051f86\nPackage: tsuru-server\nStatus: install ok installed\nPriority: extra\nSection: devel\nInstalled-Size: 10593\nMaintainer: Globo.com tsuru@corp.globo.com\nArchitecture: amd64\nVersion: 0.10.3+1SNAPSHOT20150325034212+0000-1~trusty1\nDepends: sysv-rc (>= 2.88dsf-24) | file-rc (>= 0.8.16), libsqlite3-0\nConffiles:\n /etc/init.d/tsuru-server-api 28e8722356b6e2222fb3e8509e53bfe4\n /etc/tsuru/tsuru.conf 58240701018750de2bf0d265788cff3d\n /etc/default/tsuru-server eaacbaa4149df8f0fc5668d020fce19c\n /etc/init/tsuru-server-api.conf 607abb968aa4df1950bfa8cbc10dcf83\nDescription-en: tsuru-server is the server side of the Tsuru PaaS.\n This package includes two services: Tsuru API and Tsuru SSH agent. All jobs\n are disabled by default, to enable any of them, edit the file\n /etc/default/tsuru-server.\nDescription-md5: 178d777e45d5e11c7dc989a386051f86\nHomepage: http://tsuru.io\nPackage: tsuru-server\nPriority: extra\nSection: devel\nInstalled-Size: 10023\nMaintainer: Globo.com tsuru@corp.globo.com\nArchitecture: amd64\nVersion: 0.10.3-0~trusty1\nDepends: sysv-rc (>= 2.88dsf-24) | file-rc (>= 0.8.16), libsqlite3-0\nFilename: pool/main/t/tsuru-server/tsuru-server_0.10.3-0~trusty1_amd64.deb\nSize: 2097060\nMD5sum: ceadc4a069740859ed023535cb73eacf\nSHA1: a77cb362f434bba30a8722dc81b237ce9f5bc838\nSHA256: dc2b041a73aa055cb0191feecf6bbb884393ce16cb2c0e3efd5aec2688259403\nDescription-en: tsuru-server is the server side of the Tsuru PaaS.\n This package includes two services: Tsuru API and Tsuru SSH agent. All jobs\n are disabled by default, to enable any of them, edit the file\n /etc/default/tsuru-server.\nDescription-md5: 178d777e45d5e11c7dc989a386051f86\n. Ok @cezarsa , I'll install the version bellow, it's ok related to this issue, right?\nThanks.\nPackage: tsuru-server\nPriority: extra\nSection: devel\nInstalled-Size: 10023\nMaintainer: Globo.com tsuru@corp.globo.com\nArchitecture: amd64\nVersion: 0.10.3-0~trusty1\nDepends: sysv-rc (>= 2.88dsf-24) | file-rc (>= 0.8.16), libsqlite3-0\nFilename: pool/main/t/tsuru-server/tsuru-server_0.10.3-0~trusty1_amd64.deb\nSize: 2097060\nMD5sum: ceadc4a069740859ed023535cb73eacf\nSHA1: a77cb362f434bba30a8722dc81b237ce9f5bc838\nSHA256: dc2b041a73aa055cb0191feecf6bbb884393ce16cb2c0e3efd5aec2688259403\nDescription-en: tsuru-server is the server side of the Tsuru PaaS.\n This package includes two services: Tsuru API and Tsuru SSH agent. All jobs\n are disabled by default, to enable any of them, edit the file\n /etc/default/tsuru-server.\nDescription-md5: 178d777e45d5e11c7dc989a386051f86\n. Thanks all, you are really doing a great job here.\nCongrats, again.\nBest regards.\n. That's great.\nWhen you think it will be available? Next release? Soon in build night?\nI attached bellow, some itens we can monitor using Jangaraj's  (https://github.com/jangaraj/Zabbix-Docker-Monitoring) Docker monitoring module for zabbix.\nThis way will be very easy to manage Tsuru Apps and physical resources using this tool that we already use at enterprise level to monitor, alert and remediate issues.\n\n\n\n\nRegards\n. Hi @lucasweiblen, I understood that @fsouza and the active contributors of the tsuru project will do it, if not and if you are familiar, it will be better if you can make this improvement,  I can do it but (and I would be very glad doing it, this is an amazing project) I'm starting contributing to the project and, at this time, I'm not know enough about the process to do it.\nThanks in advance.\nRegards.\n. Hi everybody, I found better explanation about shared mounts an App-isolation in issue #734, now I'm understand it better, I think it is enough from security perspective.\nI'm testing it now.\nThanks\n. It worked like a charm! Great!\nI'm sorry by the inconvenience.\nRegards.\nsharedfs:\n    hostdir: /shared\n    mountpoint: /shared\n    app-isolation: true\n    encrypt-hostdir: true \n    salt: \"kskriTTyndhdyyy948245678$#kk*(\" \nmilton_duarte@ts:~$ ll /shared\ntotal 4\ndrwxr-xr-x 2 root root 4096 Apr 10 14:45 9fd9a069d93020c73d19ab3d629069ca6f0b91e9\nmilton_duarte@ts:~$ docker ps | grep static3\n40bbffa1f957        10.0.2.5:3030/tsuru/app-static3:v1            \"/bin/bash -lc 'tsur   3 minutes ago       Up 3 minutes        0.0.0.0:49210->8888/tcp   e6c4f01157d914c98226   \nmilton_duarte@ts:~$ docker inspect 40bbffa1f957\n```\n        \"TSURU_SHAREDFS_MOUNTPOINT=/shared\",\n\"Volumes\": {\n    \"/shared\": {}\n},\n\n\"HostConfig\": {\n    \"Binds\": [\n        \"/shared/9fd9a069d93020c73d19ab3d629069ca6f0b91e9:/shared:rw\"\n    ],\n\"Volumes\": {\n    \"/shared\": \"/shared/9fd9a069d93020c73d19ab3d629069ca6f0b91e9\"\n},\n\"VolumesRW\": {\n    \"/shared\": true\n}\n```\n}\n]\nmilton_duarte@ts:/shared$ docker exec -it 40bbffa1f957 bash\nubuntu@40bbffa1f957:/$ ll /shared\ntotal 8\ndrwxr-xr-x  2 ubuntu ubuntu 4096 Apr 10 17:45 ./\ndrwxr-xr-x 55 root   root   4096 Apr 10 17:45 ../\nubuntu@40bbffa1f957:/$ touch /shared/teste1.txt\nubuntu@40bbffa1f957:/$ ll /shared\ntotal 8\ndrwxr-xr-x  2 ubuntu ubuntu 4096 Apr 10 17:56 ./\ndrwxr-xr-x 55 root   root   4096 Apr 10 17:45 ../\n-rw-r--r--  1 ubuntu ubuntu    0 Apr 10 17:56 teste1.txt\n. ",
    "devekko": "interesting write up using Maestro and Drupal and the file share issue\nhttp://www.luiselizondo.net/a-production-ready-docker-workflow-part-2-the-storage-problem/\n4 part series\n. its also interesting from the Drupal paas called Aegir perspective\nthe article using solution architecture similar in many ways to Aegir\n. looking into this further\nHeroku is using Docker for local app development \nit has Heroku Docker \nToday, Heroku is releasing a beta version of heroku docker:release. This new CLI functionality leverages the increasing availability of Docker on the desktop, and combines the benefits of local container development with the proven Heroku Cedar container runtime. Using Docker and heroku docker:release, developers can run apps in containers similar to the Heroku runtime and get high fidelity dev/prod parity, whether they\u2019re developing on OS X, Linux or Windows.\nhttps://blog.heroku.com/archives/2015/5/5/introducing_heroku_docker_release_build_deploy_heroku_apps_with_docker\nhttps://github.com/heroku/docker-ruby\nhttps://github.com/heroku?utf8=%E2%9C%93&query=docker\n. hi\nI came across Devstep, haven't tried a Devstep to Tsuru spike yet.. but, it might be easier/better, than Heroku Docker\nhttp://fgrehm.viewdocs.io/devstep/\nhttp://niccolox.org/devstep-for-local-docker-buildpack-development/\n. cool\nneed to try to push from Devstep apps to Tsuru\nmy next experiment was to add the Buildpacks listed in Tsuru into Devstep \npersonally, unsure if I want to be tied to Dockerfiles\nI think LXC/LXD and other container strategies have advantages and even the mighty Docker doesnt do configuration management on machines, networking, databases etc... Ansible etc aren't going away\nanyway, speculative for sure\n. mongo was working after install, dashboard loaded, could create app, its just on git push it crashed\ntried a few times, rebuilt, etc... wordpress and drupal... \nam wondering if its mongodb locale issues\nhttp://stackoverflow.com/questions/19668570/mongodb-localefacet-s-create-c-locale-name-not-valid\ndevekko@tsuru1:~$ locale -a\nC\nC.UTF-8\nPOSIX\nen_US.utf8\n/var/log/upstart/tsuru-server-api.log\ncould not create queue instance, please check queue:mongo-url and queue:mongo-database config entries. error: no reachable servers\nOpening config file: /etc/tsuru/tsuru.conf\nDone reading config file: /etc/tsuru/tsuru.conf\nWARNING: Setting \"docker:segregate\" is not necessary anymore, this is the default behavior from now on.\nWARNING: Using \"redis-queue:\" is deprecated. Please change your tsuru.conf to use \"pubsub:\" options. See http://docs.tsuru.io/en/latest/reference/config.html#pubsub for more details.\nUsing mongodb database \"tsurudb\" from the server \"127.0.0.1:27017\".\n. logs are big\n-rw-r-----  1 root root   2.6G Dec 10 18:31 tsuru-server-api.log\n-rw-r-----  1 root root   1.5G Dec 10 10:13 tsuru-server-api.log.save\ndevekko@tsuru1:/var/log/upstart$ sudo grep -r 'memory'\ndocker.log:WARN[0002] Your kernel does not support swap memory limit. \ndocker.log:WARN[0000] Your kernel does not support swap memory limit. \ndocker.log:WARN[0006] Your kernel does not support swap memory limit. \ndocker.log:WARN[0003] Your kernel does not support swap memory limit. \ndocker.log:WARN[0001] Your kernel does not support swap memory limit. \ndocker.log:WARN[0003] Your kernel does not support swap memory limit. \ndocker.log:WARN[0001] Your kernel does not support swap memory limit. \ndocker.log:WARN[0008] Your kernel does not support swap memory limit.\n. trying this\nhttps://gist.github.com/steakknife/9094991\nhttps://github.com/docker/docker/issues/4250\ndevekko@tsuru1:/var/log/upstart$ # enable swap resource limiting\ndevekko@tsuru1:/var/log/upstart$ sudo sed -i 's/(GRUB_CMDLINE_LINUX_DEFAULT=\")\"/\\1cgroup_enable=memory swapaccount=1\"/' /etc/default/grub \ndevekko@tsuru1:/var/log/upstart$ sudo update-grub\nGenerating grub configuration file ...\nFound linux image: /boot/vmlinuz-3.19.0-39-generic\nFound initrd image: /boot/initrd.img-3.19.0-39-generic\nFound linux image: /boot/vmlinuz-3.19.0-25-generic\nFound initrd image: /boot/initrd.img-3.19.0-25-generic\nFound memtest86+ image: /memtest86+.elf\nFound memtest86+ image: /memtest86+.bin\ndone\ndevekko@tsuru1:/var/log/upstart$ sudo reboot\nchanged swappiness to 10\nno joy\ngoing to rebuild and make sure I didnt mess up the client - server config somehow\n. is it this?\nhttps://github.com/docker/docker/issues/847\nthe VM is 8gb ram\n. closing, not sure how I got the error\nI did create the VM by cloning one with 512mb of RAM and maybe somehow it hadn't reset available RAM in Proxmox? not sure\nbut closed.. thanks\n. ",
    "lucasweiblen": "does this means just to remove the following lines?\nhttps://github.com/tsuru/tsuru/blob/master/app/app.go#L402\nhttps://github.com/tsuru/tsuru/blob/master/app/app.go#L403\nhttps://github.com/tsuru/tsuru/blob/master/app/app.go#L404\n. heheh didnt know how to select a area, thanx :+1: \nI would like to try to solve this issue but I am having some problems running the tests inside the box provisioned by tsuru-bootstrap.\nDo you have any idea what could possibly be happening?\nI tried go get ./... and make test , both returning some strange issues. do I need to setup something before?\n. browsing the issues I found #1018 .. if I remember well I'm having the same problems but almost sure Mongo and Redis were running.. will try again tonight!\n. well, it seems Mongo and Redis were not running when I tried yesterday hehe, now I'm managing to run the tests.. thanks\nthink I will handle #1018 as well \n. anybody working on this issue?\n. I will give it a try!\nThanks @msabramo :)\n. hey @cezarsa, thanks for the feedback!\nI will try to find this check in the provisioner in order to handle this second half of the problem. \n. @cezarsa could you please confirm if this is the check you were talking about? thanks\nhttps://github.com/tsuru/tsuru/blob/master/provision/docker/provisioner.go#L564:L566\n. thanks for the tip @cezarsa, I will have a look at this tonight.\n. @cezarsa as you said , some tests(4 or 5) are now failing because the number of deploys is 0. To setup a deploy in the tests I would need to do something like this, right?\nhttps://github.com/tsuru/tsuru/blob/master/provision/docker/provisioner_test.go#L104:L129\nIs there a better way to do that?\n. @cezarsa much simpler approach! thank you very much.\nI have changed AddUnits and fixed the broken tests. If anything is still missing please let me know!\n. @fsouza done\n. @fsouza sure... I will add the test.\n. accepting suggestions for the test name.. not so creative today :/\n. anyone working on this issue?\n. nice\n. yeah, I agree with you @fsouza! Thanks for the feedback and suggestions.\n. yes, I'm planning to start working there today\n. in this case we would need to display documentation for the service AND service-info right? Is there a better way to do this than returning the JSON representation of a map? \nsomething like: \nb, _ := json.Marshal(instances)\nserviceMap := map[string][]byte{\"doc\": s.Doc, \"info\": b}\nb2, _ := json.Marshal(serviceMap)\nw.Write(b2)\nreturn nil\n. good idea! thanx @andrewsmedina \n. nice, didn't know that! thanks\n. @mwduarte are you or anyone from the team working on this issue? If not, I'd gladly open a PR :smile: \n. are you guys having trouble with Travis? any ideas why this build is breaking?\n. hehehe it happens! :smile: \n. sure @fsouza! I will fix this is another PR (with other minor stuff that I found today browsing  the source code/documentation (typos and that kind of stuff) since this one got merged hehe, is that ok?\n. no problems, man.. will fix this tonight\n. yep! :smile: \n. thanks, I will move to the right package :smile: \n. thanks @andrewsmedina \nthere is already a router.go file in the api package but it's a file used for registering the handlers with Gorilla Mux router (or some stuff like that ..). \nhttps://github.com/tsuru/tsuru/blob/master/api/router.go\nIf I put there it will be strange, no? Is it ok if I rename this existent router.go(with delayedRouter stuff) file to delayed_router.go and just use the router.go file for the listRouters handler?\n. :+1: @cezarsa \n. sure!\n. had to change the struct name to PlanRouter because of the interface Router. is there a better way to handle this?\n. @fsouza tried here your suggestion for the query method which was way cleaner but somehow api tests were breaking  because the query was returning 0 elements.. don't know all corners of mgo so perhaps I'm missing something here.. if that's the case please let me know\n. add this to test filtering of platforms in api_test. If there's a better way to do this let me know.\n. hi @andrewsmedina .. yes, the solution that I've found is working, the tests are passing but its not as clean as the solution @fsouza suggested:\nfunc (f *Filter) Query() bson.M {\n    return bson.M{\n        \"name\":      bson.M{\"$regexp\": f.Name.String()},\n        \"platform\":  f.Platform,\n        \"teamowner\": f.TeamOwner,\n        \"owner\":     f.UserOwner,\n    }\n}\nSo if you have any suggestions to improve my solution , please let me know :)\n. Good point @cezarsa. Thanks! I will change this.\n. cool! I'll move this to the specific test, it makes more sense to add the platform just there.\n. sure\n. cool, Andrews. I agree it's a better approach. :smile: \nLet's see if the guys have any other suggestions and I can start working on improving this PR.\nThanks for your feedback.\n. thanks @fsouza.. will work on these improvements :smile:\n. ",
    "mdekkers": "thanks, I think it's time to go to sleep - mongodb was bound to localhost...\n. ",
    "woutersterp": "Hi @fsouza,\nThanks for your reply.\nThe port configuration was the problem, I opened all the ports between the docker nodes and the tsuru-server and the push is going well.\nI pushed the dashboard successfully, but our own apps, pushed using buildpack, won't work, although they where working on a local installation of Tsuru. They still keep sending \"Please wait..\".\nThe log of a docker container building for node.js project:\n```\nBUILDPACK:\n-----> Node.js app detected\n   Node engine:         0.10.x\n   Npm engine:          2.x\n   Start mechanism:     Procfile\n   node_modules source: package.json\n   node_modules cached: false\n\n   NPM_CONFIG_PRODUCTION=true\n   NODE_MODULES_CACHE=true\n\n-----> Installing binaries\n       Resolving node version 0.10.x via semver.io...\n       Downloading and installing node 0.10.38...\n       Resolving npm version 2.x via semver.io...\n       Downloading and installing npm 2.7.3 (replacing version 1.4.28)...\n-----> Building dependencies\n       Installing node modules\n       npm WARN package.json node-example@0.0.1 No description\n       npm WARN package.json node-example@0.0.1 No repository field.\n       npm WARN package.json node-example@0.0.1 No README data\n-----> Checking startup method\n       Found Procfile\n-----> Finalizing build\n       Creating runtime environment\n       Exporting binary paths\n       Cleaning up build artifacts\n-----> Build successful!\n       node-example@0.0.1 /tmp/build\n       \u2514\u2500\u2500 (empty)\n-----> Discovering process types\n       Procfile declares types -> web\n```\nThis is the same output as in the Git console. From there it keeps on 'spamming' please wait messages.\nAny suggestions where to look next?\n. Thanks for your reply @fsouza!\nI was indeed using the buildpack platform and I also found out it was broken, since my colleague also had problems with a Dokku instance using buildpack. \nNow I've written my own docker base image for the Play-framework we mostly use. Tsuru is working fine with this image.\n. ",
    "dmvieira": "Thank you too ;)\nEm 05/04/2015 15:50, \"Andrews Medina\" notifications@github.com escreveu:\n\n@dmvieira https://github.com/dmvieira thank you!\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/tsuru/tsuru/pull/1150#issuecomment-89831642.\n. \n",
    "adamclerk": "Nevermind. I missed the !m. I also ran a modified version of the function through playground\nhttps://play.golang.org/p/mXg9fTBl_s\nas you were :sry: :sweat_smile:\n. ",
    "mikkoc": "We are indeed using HTTP listener on the ELB, not TCP.\nAm I right in assuming that patch will make app-shell work with an HTTP ELB?\n. ",
    "marceloboeira": "@fsouza sorry if it is a 'rookie' question, but I'm starting to study GO, so I just want to make sure, does tsuru already have a proper way to check the target environment OS ? so it can be checked and handled here: \nhttps://github.com/tsuru/tsuru/blob/3ecf7dfef31452791f47dbd1e67aa3e519e49bf0/cmd/utils.go#L19\nSo far I could not find anything specific, so  I was thinking about using something like:\nos.Getenv(\"WINVER\") or even os.PathSeparator to identify the OS, and then check the HOMEPATHor HOME properly. \nIf you could clear that for me, I would be happy to send a pl soon as possible. Thanks.\nReference:\nhttp://stackoverflow.com/questions/19847594/how-to-reliably-detect-os-platform-in-go \n. @fsouza alright, get it, thanks :+1: \n. ",
    "dinf-uern": "ok @cezarsa, thanks for your reply. This configuration can be acomplished individually per application? how can i bind the folder /home/application/wp-content into the container to the folder /apps-data/app1/wp-content in the host machine for only one application? \n. nice feature!\n. ",
    "arxdsilva": "@vmalaga , @dinf-uern due to inactivity and not related to Tsuru problems, we'll close this Issue, If you get into any other problem, feel free to create a new Issue or comment here. Thanks!. @johnsudaar we've decided to keep the image and just disable It on the structure, so If you ever decide on reverting your disable, you'll be able to. It'll also be required to give and see a reason on why It's rollback was disabled.. @mateuspontes  thanks for helping, this behavior happens because the new user does not have the PermUserUpdate, instead It has only PermTeamCreate and PermRoleUpdateAssign, that makes this check to fail and enter on this If to return nil.\nA easier solution is to modify how this if works, so we can always return at least the user data info.. @etandel could you please try again to reproduce this behavior? I did the same steps and could not get into the same results, maybe It was fixed and we did not give any feedback here.. Since no more info was given I'll keep this closed while the author does not get into it again.. Thank you for contributing @luzfcb! \n[update]: If you want you can provide your personal e-mail to add into CONTRIBUTOR's file, for now I'll put as It is in your commit.. @framsouza due to inactivity and lack of answer we'll close It, feel free to comment about this and we'll be glad to help you solving It. . @guestisp I was able to reproduce your problem, It seams that the installer needs to provision a few API permissions before creating any node. \nFor now we're doing it on .yml file but It'll be automatic soon in the installer. If you want to try yourself, you can add this on your tsuru.yml file:\ndriver:\n  name: google\n  options:\n    google-project: myproject-test\n    google-machine-type: n1-standard-1\n    google-scopes: \"https://www.googleapis.com/auth/devstorage.read_only,https://www.googleapis.com/auth/logging.write,https://www.googleapis.com/auth/monitoring.write,https://www.googleapis.com/auth/compute\"\nThis will give to your instance the Read/Write permissions needed to create nodes.. @guestisp we have solved this here, could you check If It's working for you?. @guestisp closing since we got no feedback, If you get any other issue related or want to discuss we can reopen. https://github.com/tsuru/tsuru-client/commit/decc0edf0742296bf28915c7faff69e16eb891c7 solved this issue. @acobster Can you update your Tsuru version and try again? I did the same steps and could not get into the same output.. Wouldnt It be simpler just to enable on a certain environment? It'll only have access If It's enabled, this way we can avoid people getting confused.. By associating roles to teams, we should instead of just updating all users, make a bind between user-team, so whenever a user gets added to a team, It'll get It's roles and If he/she ever gets disassociated to that team, the roles will be lost. \nThis might require some refactoring on how we see teams and roles.. @caiolenthus thanks for the feedback! I've just added some docs about this. Ye, my mistake, I was about to delete the branch locally and could not remember If I made the PR.. As an update, this is now live: https://tsuru.io/media/. @JaSei, as @cezarsa  said, It'll be loaded and It should not appear, just to add here is where your config is loaded in tsuru's code.. Hi @guestisp, don't know If you remember, but you recently placed here an issue similar on GCE but about adding nodes, so taking a look here might help (since you stopped answering there) solving some problems: https://github.com/tsuru/tsuru/issues/1511. (update) Hi! I could reproduce this on older version of tsuru-client, but when updating the client we get a similar behavior to It, but stopping before your container gets built, by not finding the Procfile. This happens because It's only uploading the whole folder, instead of just the files.\n```shell\n\u279c  Github t app deploy pTest/main.py pTest/Procfile -a pyn2\nUploading files (0.00MB)... 100.00% Processing.... ok\n-- Using python version: 2.7.13 (default) --\n/home/application/current /\n/\n---- Running build hooks ----\nopen /home/application/current/Procfile: no such file or directory\nExit status 1\n\u279c  tsuru-client git:(deploy-dir) t app deploy list -a pyn2\n+------------------+------------+-----------------------------+-------------------------+---------------+\n| Image (Rollback) | Origin     | User                        | Date (Duration)         | Error         |\n+------------------+------------+-----------------------------+-------------------------+---------------+\n|                  | app-deploy | arthur.silva@corp.globo.com | Jul  5 10:08:50 (00:11) | Exit status 1 |\n+------------------+------------+-----------------------------+-------------------------+---------------+\n```. @lucasmundim , the expected behavior that tsuru is having is what we should expect, since If we ignore the path It'll break other deployment possibilities that relies on the path. As an alternative I thought about parsing a flag so the user can identify this kind of behavior and the client can handle this as expected by the user, also pinging @cezarsa, @andrestc, @morpheu, @magnotorres, @guilhermebr and @ggarnier to validate it.\nThis https://github.com/tsuru/tsuru-client/pull/42 introduces a \"-f/--files-only\" that can be used when parsing paths to single files that the user wants to use on root of the project, the important part of using a flag is that It does not break the normal path behavior but also forces the user to know that this different alternative is going to the root project directory.. Did some improvements to what @andrestc suggested, I was ignoring the error on user.AddRole(), not anymore. Also moved role.Name = newRoleName to where It's really needed.. @cezarsa that was something that kept me thinking about where it'd be best, thanks!. Hi @guiferpa, not all at once, there's two ways of doing this, either by making various requests to the API and normalizing It so you can model and generate a output or making a new call that will handle all this in the API and return It properly.\nI like the second more and It might be much easier, let me know If you need any help.\nThanks!. Would this extend to app-quota-change's <new limit>?. Thanks @cezarsa \ud83d\udc4d . @rafaelfragosom sure, go for it :D . Sorry guys, missclick on mobile . It should be deploy instead of deploying\n. doesn't exist a is better than not exists one\n. replace Buildind for Building\n. It already does here after returning dbTpl.Update. Yes, that was mistaken. I moved to this file the suite_test part from app/image/image_test.go.. It's already done, the import was a mistake made while merging the master fork . I think http.StatusConflict would be better, what do you think?. Would not be better PermAppUpdateImageReset?. Done! (:. shouldnt this be 'team updated'?. Done, forgot that code from import cycle problems, also changed the rest to meet what was requested :D. This should be added on your global .gitignore, not here :D . Just because that's a auto generated and not necessary.. @guiferpa It's best not to ignore these errors. Here and on the other error checks you can return the error so the user can handle them.. yes, this way. ",
    "annashipman": "Oh yes, good thinking. I'll rebase.\nI can't see why Travis has failed.\n. I've updated it as you suggested.\n. ",
    "haifengkao": "I mean the first one: having a dedicated port in hipache for the application\n. This issue has been brought up by some Dokku users. I don't know what their scenarios are. But for me, I want to avoid DNS lookup time. If I can use ip address/port to specify the server locations, the response time can be greatly reduced. \nUsing paid DNS like Amazon Route 53 can be another option, but it's faster if no DNS is involved.\n. I have been running tsuru now for several times, but I still got \n\nremote: error in docker node \"http://127.0.0.1:2375\": persistent connection closed\n\nIs there a way to verify whether tsuru now really pulls the fixed version?\n. run.bash --template server --host-ip 164.32.231.153 --host-name some.domain.com\n. Thanks, it works now. This kind of issue worries me. Should I use run.bash --tsuru-pkg-stable in the future to avoid the same issue? \n. Thanks. Issue closed.\n. ",
    "guilhermebr": "Closing this issue due age and inactivity.. I Think It's related to MongoDB index size limit.\nhttps://docs.mongodb.com/manual/reference/limits/#indexes\n\nThe total size of an index entry, which can include structural overhead depending on the BSON type, must be less than 1024 bytes.\n\nYour ssh key has 1404 bytes\n. Just to confirm...\n```\n\nuse gandalf\ndb.key.insert({ \"_id\" : ObjectId(\"580ab9a5eb405662432ad209\"), \"name\" : \"rsa\", \"body\" : \"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAAEAQDYIxAN9cckJOMI5XQFuD+BaTUlJKtG8d29CUMrvDw7LTvT8D+j8chLmQ0EDydLli99PT/omqZVsPmKY6VM44gSvXj/j18zRvhLMHTcRM5wfw4G1MDlS6cRC3BJlSChb2knJqodK5rxDOhfsrcoYCT5Vfsm46al95g1QjuCkNluVF2XbyuO3iDabetWxmgvzVFNiFNf/TlM2GiEpVNpERkc1uPCq2pv0RbiEo1dC6urb1h06+mRP4JIbAWwK2GChe/2pH1L3IhldzEuLrx7S/WfhVuBakIUzu8KheiUfl2puSSMQzV1lJFVmulQtFl+/p+TMaj0r7LwcvDRN1g/0QnsUzCado4r/NVGzl8ycAnjYuWOL+TGjIsSfQIY2PqnLQjDYNRQqh9iTFYU6MUJiTETgtRXAz5NVAYUONwF0G8Xi35SuGc70eutoK3NdW5ctBb2Ie0U87nFQiHI8QBNOPjaziDKxwDCLHMrJB8JYW36sM73WszDePE9c9Tg8SJoTfggQgG8tUjJjfEsMIIISVcCNmrtE1gUVpPWlkjkycgnV4BZwCPNhuX5bFQeEBj/GRfUVNsSFAsnqC3D5za5SpiVCXuXDlhQsJbFGkNQN+S01GLEIMVXP7mUo8SUsUQV4BhHh2NKpf9fGtOI465pe4TYYycEML2AsBSWtgvy+yQiEJDGlLbYF8PgSuDowod3ei87khysXUEe0fSjTq2IqGC+jpeEFFTKHNOX8E5mzBDknCeeEgMY70lT/W9pYgaWuCaUOW/hytqaapTACMCdIaZ0qR9HwDx7NppR1YmwVtBc6bTBDgbUmvobtk3V1KqqDLTBR4gxghdI/ito7ZqBLY63K1ROZYeB/Tqf31oHaF1RBj97oaMY3dnkd92AaQva77Bq4MO1B1Efk5nQTsH52aQ+9Pjk9lOcWzQr5aY1bdsUaMD/jdLAEHq+/xTuWUM4NROn0e0Twb3yZBfzkmVN5hv+pRwYGdLc1s2NsUw5Ip6esaJKAqEV5Ef/jA8MX8exuBj/SHZjlj0A68ze6sZJkxZW8sc5gpaPRJ3gjWr0OCN7yQ8zgkUdu7qhxD5agNEOfPdQNU/Fm20ROhsiIAw7rCT3K8DeeR0TniKFhssPwhMAMdsBYDOAcrdpzHwFIGRGflGSyUyvV9NYH5GXZNA+EaqIrIG1xBTsmCQQSL/xzg4CqRXzALaQvQIvbmy6qN6TZXliTphBDgpWvqluJPdYG+bDEgBIBw0ByGqRGKoEUjbcz+oNr78GGNNmG9GOsxCSM9d7+xXn1HsevyjhmJXlbT/b/QrLX3Fzcahb/A5jcquAvqBPY5icCDj7YEPeKTDIi10dfp9cEWQBzXnsF9+Oj/1b\"})\nWriteResult({\n    \"nInserted\" : 0,\n    \"writeError\" : {\n        \"code\" : 17280,\n        \"errmsg\" : \"WiredTigerIndex::insert: key too large to index, failing  1416 { : \\\"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAAEAQDYIxAN9cckJOMI5XQFuD+BaTUlJKtG8d29CUMrvDw7LTvT8D+j8chLmQ0EDydLli99PT/omqZVsPmKY6VM44gSvXj/j18zRvhLMHTcRM5wfw4G1M...\\\" }\"\n    }\n})\n```\n. @fsouza You're welcome =]\nI agree with the solution... I can take a look at this.\n. @cezarsa PTAL\n. @andrestc yeah worked! thank you =] \n. I agree with both changes.\n\nseparated commands are more natural and intuitive, and will decrease considerably the number of commands to list.\nand group both service and admin commands into manage subcommand will prevent mistakes.. lgtm. @guestisp you can set the default application auth with:\ngcloud auth application-default login . fixed returning the error directly. \ncommit: https://github.com/tsuru/tsuru-client/commit/4992c50f9408d3acd33b34bbc792885bbb8e792d\n. @gabrielclima are you still planning to work on this? . @gfleury I'm coming back to work on this. @gfleury probably #1838 will affect only in the tests.\nPlease add the test case for Rollback (you can base on docker test). @andrestc PTAL. @ggarnier PTAL\n. @cezarsa PTAL. We can also accept an env with the path to Procfile and tsuru.yaml, like in Honcho: https://honcho.readthedocs.io/en/latest/using_procfiles.html. @cezarsa PTAL\n. @ggarnier PTAL\n. @cezarsa PTAL\n. @vitormcruz Have you tried with the last version of tsuru-client? . @yehudimikhael I will check about the install-create error.\nabout docker-compose, you can follow the steps covered in the docs: https://docs.tsuru.io/master/contributing/compose.html\n. @yehudimikhael what macos version?. the new version of boot2docker has already been released: https://github.com/boot2docker/boot2docker/releases/tag/v18.09.1. @diaopk you need an endpoint to bind-unit (even if returns nil), like here:\nhttps://github.com/tsuru/mongoapi/blob/master/main.go#L32\nhttps://github.com/tsuru/mongoapi/blob/master/handler.go#L41. @diaopk can you post your entire service in a gist? also the tsuru api log at the moment of bind?. @diaopk when service was bound to app, it injects the MongoDB envs inside app, you can check with tsuru env-get -a myapp.\nSo inside your app, you need to get the mongodb address by the env.\nYou are trying to connect to MongoDB using the localhost address 127.0.0.1, so the app is trying to connect inside the unit. You need to use a public address for mongodb that unit can reach.\nunit=running app container. @wagnersza to see the machine in docker-machine you need to pass the path:\ndocker-machine -s $HOME/.tsuru/installs/tsuru ls. @htbase are you using virtualbox 6.0.0? If possible try with version 5.2.0 as reported in this issue: https://github.com/tsuru/tsuru/issues/2243\nI will take a look at this issue today.. @htbase what version of tsuru-client are you using?. We are close to release tsuru 1.7.0 which will fix this. \nIn the meantime, you can get tsuru client code and build from the master.\nhttps://github.com/tsuru/tsuru-client. @avelino I already removed IP from node1, but API needs because the agent-deploy can't access docker dns to resolve API name.. Just a minor thing about readability... you're using removeIaaS  ~20 lines later. It's not \"1.5\"?. Sure! I'm just moving the tests to builder package and I will remove both methods from provider in a next commit. Can you add a test to this case?. Sure, I can move this to SetUpTest and remove the Reset() method. I actually moved the function to the image package and forgot to remove it from docker. I'm not sure... it's two different situations. \nBuildFromFile is not supported yet by Tsuru and ArchiveURL is not supported for now only by kubernetes Builder. Why this global var instead of using servicemanager package like in others packages?. It's returning the error (\"default plan not found\"). But return an error about insert plan when the request is about create app don't will confuse the end user? \nBecause of this I returned the \"default plan not found\" error and just logged the insert error. @cezarsa PTAL. Commit deploy can be made by ArchiveURL and ArchiveFile methods.\nThe difference is the method git pre-receive hook uses.. @gfleury you can check for o.Commit and for app Token. If have both so it's of Kind DeployGit.. You don't need to set customData again with the same info. @gfleury Sorry I made a mistake, you need to back the second customData definition, but you can remove the second deployEvt.\nin the second customData use something different like run mycmd arg2 then the last test checking the web command in running unit will match the app:v1. For sure, I will move this and app/images/image.go DB things to storage/mongodb in a separated commit. minor thing, but maybe replace p to c here and in the cases below, just to keep the pattern. ",
    "luissombra": "ok @fsouza \n. ",
    "brodock": ":+1: \n. ",
    "Tails": "So how is this going? I would love to use Tsuru for the autoscaling feature, but as far as I know it relies on being able to dynamically add hosts, and therefore have an IaaS interface...\n. ",
    "RichardKnop": "@cezarsa How about now?\nI have added a unit test. Modified the code a little bit.\n. Yes the problem is, if I don't change the Token struct, the scope is not persisted in the database. It's not a public property.\n. However in Oauth2 you can request a different scope when requesting access token. You can pass a scope in query string or POST body, otherwise it will fall back to the default scope.\nIt will be also useful for granular permissions for users as you will need to keep track of granted scopes in that case.\nLong story short, scope can be different for each access token.\nEDIT: Maybe I am thinking about this wrong.\nSee also this issue. I was thinking access token scope could be used for user permissions: https://github.com/tsuru/tsuru/issues/1220\n. @cezarsa I'm closing this for now. I might need to rethink how to approach this.\n. Godeps does support vendoring now btw... so you can continue using godeps.\n. @fsouza Ok, makes sense.\nIn my projects I usually have a Makefile and run tests like:\nmake test\nSee here: https://github.com/RichardKnop/machinery/blob/master/Makefile#L17\n. @andrewsmedina I think that would be better approach. Do you have a road map for proper roles and permissions?\nWe opted for a simpler approach of team leads to solve our current use case but adding proper acl would be preferable in the long run. However adding roles and permissions would be a big task.\n. @andrewsmedina Btw, do you know why the Travis build fails for Go tip but works on 1.4? All tests pass.\ngo build -x -o tsr ./cmd/tsr\nworks on my Mac.\n. @andrewsmedina Thanks\n. ",
    "dhilton": "Our current thinking is that option 2 gets us to a workable place quicker, but we note that option 3 is a longer term goal. We've looked at https://github.com/shavac/go.sec - specifically adding the ACL and RBAC mentioned there as it comes with a MongoDB engine, which makes integrating it with the Server application in Tsuru easier. This option 3 however, will require quite a change we reckon based on an initial view formed by reading the code of the client, admin client and the dashboard. \nCloud Foundry for example implements a similar organisation, space, team and user model http://docs.pivotal.io/pivotalcf/concepts/roles.html \nThe scenarios we see :\n- TL installs the Tsuru client\n- TL creates Users on Tsuru using the Tsuru client - one for each member of the team\n- TL adds the new users to the correct Team\n- TL will manually send login details to Users\n- TL can remove Users if someone leaves the Team\n- TL will need to monitor their own Quota this is not part of the scope of this story\n- Normal Devs cannot allocate a Team to a Pool\n- TL cannot allocate a Team to a Pool\n- TL can call team-user-remove\n- Normal Dev cannot call team-user-remove\n- Normal Dev cannot add new Users\n- Normal Dev cannot add Users to a Team\n- Normal Dev cannot app-set-team-owner to change the team owner\n- TL would like to unlock apps if they are locked - this is not in current scope\nWhere TL is a \"Team lead\" role. A team can have multiple team leads who are a subset of the team members. \nThis type of change would allow us to operate a federated, self-service model across multiple parts of our organisation. \n. I think we'd love that kind of setup - but the worry is how long / large such an implementation might be and the casscading breaking changes in commandline tools and the dashboard. As long as that type of cross repo change is managed correctly, it's all good - I guess the only outstanding question is around how much of a priority this is for all parties. We'll have a chat internally see what we can do.\n. I'm having a look now - we're running a suite of performance tests which create and delete lots of teams, apps and such like - will see if we have any other such issues.\n. ",
    "saliceti": "@cezarsa What is a big-sibling container?\nGot it: https://github.com/tsuru/bs#bs\nCheers\n. https://github.com/tsuru/dockerized-setup uses docker-machine to create the tsuru admin docker node.\nThen we should be able to add new docker nodes via docker-machine.\nBut it doesn't work because the nodes are created with TLS verification and tsuru doesn't support it.\n. ",
    "keymon": "Thank you for your feedback. \nAs the related PR #1240 has been merged, feel free to close this issue.\n. An alternative is just create a simple Dockerfile which just refers to the desired image. It can be hosted in a github repo or a gist.\n. cool\n. ",
    "lucasgomide": "One more suggest..\n\ndeploy successful. \n",
    "mtekel": "Thanks, that would fix the issue + add some nice key management options.\n. Hi,\nI realize this is not too important. We had some scripts that would automatically add new nodes to tsuru. We then realized that if we change naming, then we could end up with some nodes being added twice. This is also problem with SSH - it keeps node IDs based on hostname, not on whatever the node resolves to. So when you ssh to the same node under new name, it asks you to verify identity, as it has never seen that node before (it doesn't check/realize that it is the same ssh daemon it connects to).\nIn the end, agent (perhaps running in a big sibling container) should clearly identify the node, but I realize this is not a priority now.\n. ",
    "erichnascimento": "@fsouza, thank you!\n. ",
    "jpprins1": "Ah didn't know about JSON streams ;) Thanks for the explanation and I'll try oboejs! \n. Ok, great!!\n. ",
    "gciotta": "Hi,\nI believe the build failed for reasons unrelated to the change, maybe someone can re-trigger it? Also, just to explain the reasoning behind this PR, the options mentioned in the tutorial are not present in the stock config file installed by hipache  anymore, only the driver option is there.\n. ",
    "sfcgeorge": "From the install docs \"Ubuntu Server 14.04 LTS 64-bit machine. This is currently the supported environment for tsuru\". Scaleway does support Ubuntu Server 14.04 but it's 32bit ARM, I think this causes several problems.\nFirst I tried Tsuru Now:\ncurl -sL https://raw.githubusercontent.com/tsuru/now/master/run.bash | bash\nThe error I got was:\nE: Unable to locate package linux-image-extra-3.2.34-30\nI believe this is because Scaleway builds their own kernel. I used their tool to obtain headers but apt isn't aware that the headers now exist so it still doesn't work.\nNext I tried installing everything manually, starting with Gandalf as per the docs:\nsudo apt-get update\nsudo apt-get install curl python-software-properties\nsudo apt-add-repository ppa:tsuru/ppa -y\nsudo apt-get update\nsudo apt-get install gandalf-server\nFailed with error:\nE: Unable to locate package gandalf-server\nI'm not experienced with Linux but I guess when it says \"unable to locate package\" it means specifically an armhf package.\n. ",
    "hugobrilhante": "I had the same problem. \nI tried the following steps:\nsudo apt-get update\nsudo apt-get install curl python-software-properties\nsudo apt-add-repository ppa:tsuru/ppa -y\nsudo apt-get update\nI get the stack:\n``` bash\nW: Failed to fetch http://ppa.launchpad.net/tsuru/ppa/ubuntu/dists/wily/main/binary-amd64/Packages  404  Not Found                                                                                                \nW: Failed to fetch http://ppa.launchpad.net/tsuru/ppa/ubuntu/dists/wily/main/binary-i386/Packages  404  Not Found\nE: Some index files failed to download. They have been ignored, or old ones used instead.\n```\nI try to run:\nsudo apt-get install gandalf-server\nFailed with error:\nbash\nE: Unable to locate package gandalf-server\nI checked the PPA there is no version for vivid:\ntsuru ppa\n. ",
    "blacksector": "Although this is old, a work around if you fall into this problem is to just delete a key from: \n/home/git/.ssh/authorized_keys\nThen just restart, and it should be back to normal.\n. @andrewsmedina No idea, I simply did a key add and it added it, after removing it when I tried again, it failed.\nStrangest I have seen.\n. @andrewsmedina Great, thank you! I'll keep user registration disabled and separately create apps for users. Thanks! :) \n. Fixed. The issue can be closed now, I was missing a tsuru.yml file and I simply did this:\nphp\nphp:\n    frontend:\n        name: nginx\n    interpretor:\n        name: fpm54\n    composer: true\nWorks now!\n. This is the current status:\nhttps://gist.github.com/blacksector/64c4056e6cf4af31e4bb\nStill wondering why it is throwing those errors but it works.\n. Oh man I was looking for Docker support! But great thank you! I'll see if I can manually do that myself with Google Cloud.\nA quick question, how do I add a new node? to the cluster? Tsuru generated the \"theonepool\" and the \"autogenerated\" plan but I dont know how to add a new machine to the cluster. Any ideas? Sorry, completely new to the PaaS environment and Tsuru itself, just learning how to get used to it. :)\n. Great thanks a lot @cezarsa ! :) Will try that out right now \n. Would this need to be executed on the first node or the node you want to add?\nAnd no worries thanks, I am just setting up the main VM first :)\n. Hi, another question.\nDo you know how to deploy to Google Cloud? After I installed it, Tsuru doesnt want to connect. I went into the Tsuru config file in /etc/tsuru/tsuru.conf and the issue is it is using Google's internal IP address, after changing it and opening firewall rules to port 8080 it connects and registers users. But unfortunately git push doesnt work because it is listening to 127.0.0.1. Can the git port be changed to the external ip address of the server?\n. Yes I tried. And ok good news, it worked, but then the domains didnt work. \nSo instead I opened all my firewall ports from 1-65000 on google cloud tcp :) I hope thats secure? \n. Thanks a ton by the way @cezarsa ! I'll close this now? :)\n. @cezarsa What should the docker port be? I came down to this: 2375. I am trying to link two completely separate systems. After I use the --register and the full command it shows \"ready\" on tsuru-admin docker-node-list\nBut are they linked? When I try to log in from node 1 through node 2 it doesnt work. Do you have maybe a detailed guide on how to? I cannot seem to find anything on the docs. Sorry!\n. @gwmoura Thanks for that! Well do you know how I can link the two?\n@cezarsa The nodes show each other as \"ready\" but when logging in the databases are separated, now the question is, is there no security feature? Like requiring a special token to work? Or is it that both nodes have the command docker-node-add executed in order to be \"ready\"? In that case I'll just keep one node as the front end node and the rest even though they have their own registration and separate database will just be linked to the first node in the background?\n. @gwmoura I see and just simply change it to the database ip and port of the first node right? Thanks :) \n. @cezarsa Oh I see aahh makes more sense, the tsuru/now is what was causing the confusion, that and my obliviousness. So instead of using tsuru/now or the bootstrap scripts or any other install I should simply create them separately with a load balancer, and all the configuration manually. Makes sense :)\nReally sorry about all the confusion  thank you though! Really helpful\n. ",
    "raulgbrmf": "Issue fixed by commit 7e7f368\n. Issue closed by commit #b4aa433.\n. The commit c6a353a in tsuru/tsuru-client is related to this issue.\n. ",
    "diego-araujo": "Hi Cezar,\nThanks for your prompt response, now has been fixed.\nThis is my first go code, therefore any feedback is welcome! \n. Hi Andrews,\nThanks for the tips, all changes were implemented \n. done!\n. done :)\n. ",
    "pritchardjonathan": "Thanks!\n. ",
    "dnsaoki2": "@andrewsmedina thank you\n. ",
    "pedrosnk": "Thanks guys :heart: :blue_heart: :green_heart: :purple_heart:\n. ",
    "myhro": "Thank you, Andrews. I really didn't expected for it to be fixed so quickly. :-)\n. ",
    "magichk": "Hi,\nThanks for your reply. Yes, I'm running all the processes in the same host and here you have what the host is listening to:\n\nroot@tsuru:~# netstat -ntap | grep ESCUCHAR\ntcp        0      0 0.0.0.0:80              0.0.0.0:*               ESCUCHAR    886/node\ntcp        0      0 :4243        0.0.0.0:*               ESCUCHAR    771/docker\ntcp        0      0 127.0.0.1:4243          0.0.0.0:*               ESCUCHAR    771/docker\ntcp        0      0 0.0.0.0:22              0.0.0.0:*               ESCUCHAR    926/sshd\ntcp        0      0 127.0.0.1:3131          0.0.0.0:*               ESCUCHAR    888/archive-server\ntcp        0      0 127.0.0.1:11300         0.0.0.0:*               ESCUCHAR    980/beanstalkd\ntcp        0      0 0.0.0.0:27017           0.0.0.0:*               ESCUCHAR    937/mongod\ntcp        0      0 0.0.0.0:6379            0.0.0.0:*               ESCUCHAR    1203/redis-server *\ntcp6       0      0 ::1:80                  :::*                    ESCUCHAR    886/node\ntcp6       0      0 :::8080                 :::*                    ESCUCHAR    1565/tsurud\ntcp6       0      0 :::22                   :::*                    ESCUCHAR    926/sshd\ntcp6       0      0 :::3232                 :::*                    ESCUCHAR    888/archive-server\ntcp6       0      0 :::8000                 :::*                    ESCUCHAR    893/gandalf-server\ntcp6       0      0 :::6379                 :::*                    ESCUCHAR    1203/redis-server *\n\nAt the bottom of the /home/git/.profile I put the following:\n\nexport ARCHIVE_SERVER_READ=http://:3232 ARCHIVE_SERVER_WRITE=http://127.0.0.1:3131 TSURU_HOST=http://127.0.0.1:8080 TSURU_TOKEN=XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nIn the official documentation, I read that variables are included at the end of the file /home/git/.bash_profile, so I did the same.\nDo I have a wrong configuration?\nThanks for all,\nJoan.\n. When I went to check archive-server.log I saw that I didn't have this log. I have the logs until 26/2/16 but now the logs rotate and I have the compress files archive-server.log.1.gz  I unzip this file and this is the content :\n\nroot@tsuru:~/wordpress/wordpress# cat /var/log/upstart/archive-server.log.1\n2016/02/26 08:25:12 [INFO] saving archive \"1e555644a05928baa19cb968336298ca7bfe76ca9b5d025ace3a3760837f1f03cd621378ae72ccd121999792738c21f85af16bbb4e4c94c5d9d9d7520e1874d7\"\n2016/02/26 08:29:45 [INFO] saving archive \"0f880b6b80ce8ab426ce7759b03ef4960f1a346c4b051eaf1de86d0af1166b41688003069180f60858336db276d4b3b86222c36b4b96e9176098f4efb61c1f3c\"\n2016/02/26 08:32:04 [INFO] saving archive \"aa1884a233d635ac113a194098c10a24e24e44e00a8f768598fb159809e66736f0b4dec3e29c7a30c65feb6827701e256b3a79a0047a76eb47e5dc7600017d3e\"\n2016/02/26 08:33:50 [INFO] saving archive \"f458304c88a7c12b9ba76f2735d75b6437691ecb63e83e92a847d1d4f7e10768dad3ca91746151591105310c5606b436a5d5e2aa7a9ff8d8ad30f7f486ee219b\"\n2016/02/26 08:52:46 [INFO] saving archive \"3413bfd8247c24ea525376b0db26b9c28cc67e81d632acbf0734608f1f3ae88c6d24048f9ae629de256a1c56d61ce140c45bacefa7cacdbb7a0ec9d906de83b3\"\n2016/02/26 08:53:43 [INFO] saving archive \"53d7b785206a49b95325266987a4d6d36a809723140eebb8d33e97a34c23eb93b1f46af730938f06ca1565adf10b4aca3ad6efc7e763e1a52ee616ce2d72e9cf\"\n2016/02/26 08:54:36 [INFO] saving archive \"55e44859099d4549d89162190fdf5a8e836fdc0e9fc92dae5fe85d81902bda3c4980559b61cdc612a706fafab29fb31a4274beaaf7147c7f2bf0b6273b61e07f\"\n2016/02/26 08:56:21 [INFO] saving archive \"818dff7dc8ea5035aab586357895f055493f6e3615e687ced401ef196e2acfd1e8de6ae3df98c3cca1f70308fe8d39788d75304b57dc0e638b2cd3590388c595\"\n2016/02/26 08:56:38 [INFO] saving archive \"89bc1f7fba8c6b2b586b0038cd3e1322f2fda9f8c2de59c0507b6a188a7464ec54352f9c432f00920a80dcccf88f335e0ddf3f70416d8369f7d93f64de66caa3\"\n2016/02/26 08:57:08 [INFO] saving archive \"58fb2a6ec2651bbd51a2c7193ee5e28f2bf5e9f4864d996584c3f31594cbbf1309f2fe3368a18a422fd19260938f2e4b1e4925e13b41af1862a5bbef56a1d8d9\"\n2016/02/26 08:57:28 [INFO] saving archive \"4ca33516fcb20446f11a5fafd961bcd31c37d37e1e4d7f6a33c384e50cdfddd97839b7615783b3ac8c580cda050eabf35d4a4cbc361b1fc873f5c69f294365a2\"\n2016/02/26 09:22:52 [INFO] saving archive \"eaebf2f179db87529d2d4d04cacde70beb97d924be2627bf20ad9269c6c98d343addc8ba69f48e75cb83ff120e6b103a81f56f0cc1fbf731fd131f9c00422060\"\n\nMy config of gandalf is this:\n\nroot@tsuru:~/wordpress/wordpress# cat /etc/gandalf.conf\nbin-path: /usr/bin/gandalf-ssh\ndatabase:\n  url: 127.0.0.1:27017\n  name: gandalf\ngit:\n  bare:\n    location: /var/lib/gandalf/repositories\n    template: /home/git/bare-template\nhost: localhost\nbind: \"0.0.0.0:8000\"\nuid: git\napi:\n  request:\n    maxMemory: 2097152\nrepository:\n  tempDir: /tmp\n\nAnd the content of /home/git/bare-template/hooks/pre-receive are this:\n\nwhile read oldrev newrev refname\ndo\n        set +e\n        echo $refname | grep -v tags/master$ | grep -q /master$\n        status=$?\n        set -e\n        if [ $status = 0 ]\n        then\n                COMMIT=${newrev}\n        fi\ndone\nif [ -z ${COMMIT} ]\nthen\n  echo \"ERROR: please push to master\"\n  exit 3\nfi\nwait_archive() {\n        url=\"${1}&keep=1\"\n        content_type=curl -sI $url | grep Content-Type | awk '{print $2}'\n        while echo $content_type | grep -v application/x-gzip\n        do\n                sleep 1\n                content_type=curl -sI $url | grep Content-Type | awk '{print $2}'\n        done\n}\ngit_archive_all() {\n    REV=$1; FILE=$2\n    TMP_WORK_DIR=$(mktemp -d)\n    chmod 755 $TMP_WORK_DIR\n    unset GIT_DIR GIT_WORK_TREE\n    git clone -q $PWD $TMP_WORK_DIR &> /dev/null\n    pushd $TMP_WORK_DIR > /dev/null\n    git config advice.detachedHead false\n    git checkout $REV > /dev/null\n    git submodule update --init --recursive > /dev/null\n    find -name .git -prune -exec rm -rf {} \\; > /dev/null\n    tar zcf /tmp/$FILE .\n    popd > /dev/null\n    rm -rf $TMP_WORK_DIR > /dev/null\n}\nsave_archive() {\n        url=\"${ARCHIVE_SERVER_WRITE}/\"\n        result=curl -sN -F archive=@/tmp/${1} $url\n        python <<END\nimport json\nprint json.loads(u\"\"\"${result}\"\"\")[\"id\"]\nEND\n}\nAPP_DIR=${PWD##*/}\nAPP_NAME=${APP_DIR/.git/}\nUUID=python -c 'import uuid; print uuid.uuid4().hex'\nARCHIVE_FILE_NAME=${APP_NAME}${COMMIT}${UUID}.tar.gz\ngit_archive_all $COMMIT $ARCHIVE_FILE_NAME\narchive_id=save_archive $ARCHIVE_FILE_NAME\narchive_url=\"${ARCHIVE_SERVER_READ}/?id=$archive_id\"\nwait_archive $archive_url\nurl=\"${TSURU_HOST}/apps/${APP_NAME}/deploy\"\ncurl -H \"Authorization: bearer ${TSURU_TOKEN}\" -d \"archive-url=${archive_url}&commit=${COMMIT}&user=${TSURU_USER}\" -s -N $url | tee /tmp/deploy-${APP_NAME}.log\nrm /tmp/${ARCHIVE_FILE_NAME}\ntail -1 /tmp/deploy-${APP_NAME}.log | grep -q \"^OK$\"\n\nThanks for all.\n. hi !  Yes , I try this and the terminal return this:\nshell\nroot@tsuru:~# status archive-server\narchive-server start/running, process 888\nroot@tsuru:~# ps ax | grep archive-server\n  888 ?        Ssl    0:30 /usr/bin/archive-server -dir=/var/lib/archive-server/archives -read-http=0.0.0.0:3232 -write-http=127.0.0.1:3131 -mongodb=127.0.0.1:27017 -dbname=archives\n18994 pts/2    S+     0:00 grep --color=auto archive-server. My version of archive-server is this : \n\nroot@tsuru:~/wordpress/wordpress# archive-server -version\narchive-server version 0.2.1\n\nI download your pre-receive file with -elx at the final of the first line and execute the git push. When I try to execute git push the terminal returns this:\n\nroot@tsuru:~/wordpress/wordpress# git push tsuru master\nCounting objects: 1410, done.\nCompressing objects: 100% (1387/1387), done.\nWriting objects: 100% (1410/1410), 6.92 MiB | 3.28 MiB/s, done.\nTotal 1410 (delta 114), reused 0 (delta 0)\nremote: + '[' '' ']'\nremote: + '[' -d /etc/profile.d ']'\nremote: + for i in '/etc/profile.d/.sh'\nremote: + '[' -r /etc/profile.d/bash_completion.sh ']'\nremote: + . /etc/profile.d/bash_completion.sh\nremote: ++ '[' -n '4.3.11(1)-release' -a -n '' -a -z '' ']'\nremote: + for i in '/etc/profile.d/.sh'\nremote: + '[' -r /etc/profile.d/Z97-byobu.sh ']'\nremote: + . /etc/profile.d/Z97-byobu.sh\nremote: ++ '[' -n '' ']'\nremote: ++ '[' '' = byobu ']'\nremote: ++ '[' '' = byobu-screen ']'\nremote: ++ '[' '' = byobu-tmux ']'\nremote: + unset i\nremote: + read oldrev newrev refname\nremote: + set +e\nremote: + grep -v 'tags/master$'\nremote: + grep -q '/master$'\nremote: + echo refs/heads/master\nremote: + status=0\nremote: + set -e\nremote: + '[' 0 = 0 ']'\nremote: + COMMIT=f5ccae132631012ad80af518b1b93bcd0bee89d3\nremote: + read oldrev newrev refname\nremote: + '[' -z f5ccae132631012ad80af518b1b93bcd0bee89d3 ']'\nremote: + APP_DIR=aplicacio1.git\nremote: + APP_NAME=aplicacio1\nremote: ++ python -c 'import uuid; print uuid.uuid4().hex'\nremote: + UUID=9e8312e2952e47dba58917751aec24fd\nremote: + ARCHIVE_FILE_NAME=aplicacio1_f5ccae132631012ad80af518b1b93bcd0bee89d3_9e8312e2952e47dba58917751aec24fd.tar.gz\nremote: + git_archive_all f5ccae132631012ad80af518b1b93bcd0bee89d3 aplicacio1_f5ccae132631012ad80af518b1b93bcd0bee89d3_9e8312e2952e47dba58917751aec24fd.tar.gz\nremote: + REV=f5ccae132631012ad80af518b1b93bcd0bee89d3\nremote: + FILE=aplicacio1_f5ccae132631012ad80af518b1b93bcd0bee89d3_9e8312e2952e47dba58917751aec24fd.tar.gz\nremote: ++ mktemp -d\nremote: + TMP_WORK_DIR=/tmp/tmp.YFqlLD73eu\nremote: + chmod 755 /tmp/tmp.YFqlLD73eu\nremote: + unset GIT_DIR GIT_WORK_TREE\nremote: + git clone -q /var/lib/gandalf/repositories/aplicacio1.git /tmp/tmp.YFqlLD73eu\nremote: + pushd /tmp/tmp.YFqlLD73eu\nremote: + git config advice.detachedHead false\nremote: + git checkout f5ccae132631012ad80af518b1b93bcd0bee89d3\nremote: HEAD se encuentra en f5ccae1... test\nremote: + git submodule update --init --recursive\nremote: + find -name .git -prune -exec rm -rf '{}' ';'\nremote: + tar zcf /tmp/aplicacio1_f5ccae132631012ad80af518b1b93bcd0bee89d3_9e8312e2952e47dba58917751aec24fd.tar.gz .\nremote: + popd\nremote: + rm -rf /tmp/tmp.YFqlLD73eu\nremote: ++ save_archive aplicacio1_f5ccae132631012ad80af518b1b93bcd0bee89d3_9e8312e2952e47dba58917751aec24fd.tar.gz\nremote: ++ url=/\nremote: +++ curl -sN -F archive=@/tmp/aplicacio1_f5ccae132631012ad80af518b1b93bcd0bee89d3_9e8312e2952e47dba58917751aec24fd.tar.gz /\nremote: ++ result=\nremote: ++ python\nremote: Traceback (most recent call last):\nremote:   File \"\", line 2, in \nremote:   File \"/usr/lib/python2.7/json/init.py\", line 338, in loads\nremote:     return _default_decoder.decode(s)\nremote:   File \"/usr/lib/python2.7/json/decoder.py\", line 366, in decode\nremote:     obj, end = self.raw_decode(s, idx=_w(s, 0).end())\nremote:   File \"/usr/lib/python2.7/json/decoder.py\", line 384, in raw_decode\nremote:     raise ValueError(\"No JSON object could be decoded\")\nremote: ValueError: No JSON object could be decoded\nremote: + archive_id=\nTo git@localhost:aplicacio1.git\n ! [remote rejected] master -> master (pre-receive hook declined)\nerror: failed to push some refs to 'git@localhost:aplicacio1.git'\n. Hi,\n\nIf I run git push command after including the enviroment variables at the end of /etc/default and /home/git/.bashrc the return is a different error.  I think that now the process is deploying the application into tsuru app but it doesn't connect to http://127.0.0.1:8080 yet.\nWhen I execute the command git remote -v the result is the following: \n\nroot@tsuru:~/wordpress/wordpress# git remote -v \ntsuru git@localhost:aplicacio1.git (fetch)\ntsuru git@localhost:aplicacio1.git (push)\n\nAnd now when I run git push tsuru master the terminal show this: \n\nroot@tsuru:~/wordpress/wordpress# git push tsuru master\nCounting objects: 1410, done.\nCompressing objects: 100% (1387/1387), done.\nWriting objects: 100% (1410/1410), 6.92 MiB | 4.59 MiB/s, done.\nTotal 1410 (delta 114), reused 0 (delta 0)\nremote: + '[' '' ']'\nremote: + '[' -d /etc/profile.d ']'\nremote: + for i in '/etc/profile.d/.sh'\nremote: + '[' -r /etc/profile.d/bash_completion.sh ']'\nremote: + . /etc/profile.d/bash_completion.sh\nremote: ++ '[' -n '4.3.11(1)-release' -a -n '' -a -z '' ']'\nremote: + for i in '/etc/profile.d/.sh'\nremote: + '[' -r /etc/profile.d/Z97-byobu.sh ']'\nremote: + . /etc/profile.d/Z97-byobu.sh\nremote: ++ '[' -n '' ']'\nremote: ++ '[' '' = byobu ']'\nremote: ++ '[' '' = byobu-screen ']'\nremote: ++ '[' '' = byobu-tmux ']'\nremote: + unset i\nremote: + export ARCHIVE_SERVER_READ=http://:3232\nremote: + ARCHIVE_SERVER_READ=http://:3232\nremote: + export ARCHIVE_SERVER_WRITE=http://127.0.0.1:3131\nremote: + ARCHIVE_SERVER_WRITE=http://127.0.0.1:3131\nremote: + export TSURU_HOST=http://127.0.0.1:8080\nremote: + TSURU_HOST=http://127.0.0.1:8080\nremote: + export TSURU_TOKEN=2387254bd9fa6abfc8087d04587aa29326ac7ee79eb8029794627890b7a10e00\nremote: + TSURU_TOKEN=2387254bd9fa6abfc8087d04587aa29326ac7ee79eb8029794627890b7a10e00\nremote: + read oldrev newrev refname\nremote: + set +e\nremote: + grep -q '/master$'\nremote: + grep -v 'tags/master$'\nremote: + echo refs/heads/master\nremote: + status=0\nremote: + set -e\nremote: + '[' 0 = 0 ']'\nremote: + COMMIT=f5ccae132631012ad80af518b1b93bcd0bee89d3\nremote: + read oldrev newrev refname\nremote: + '[' -z f5ccae132631012ad80af518b1b93bcd0bee89d3 ']'\nremote: + APP_DIR=aplicacio1.git\nremote: + APP_NAME=aplicacio1\nremote: ++ python -c 'import uuid; print uuid.uuid4().hex'\nremote: + UUID=fda3cd94f0c941f5b85d102e22d0672d\nremote: + ARCHIVE_FILE_NAME=aplicacio1_f5ccae132631012ad80af518b1b93bcd0bee89d3_fda3cd94f0c941f5b85d102e22d0672d.tar.gz\nremote: + git_archive_all f5ccae132631012ad80af518b1b93bcd0bee89d3 aplicacio1_f5ccae132631012ad80af518b1b93bcd0bee89d3_fda3cd94f0c941f5b85d102e22d0672d.tar.gz\nremote: + REV=f5ccae132631012ad80af518b1b93bcd0bee89d3\nremote: + FILE=aplicacio1_f5ccae132631012ad80af518b1b93bcd0bee89d3_fda3cd94f0c941f5b85d102e22d0672d.tar.gz\nremote: ++ mktemp -d\nremote: + TMP_WORK_DIR=/tmp/tmp.dOJ1hAdoC0\nremote: + chmod 755 /tmp/tmp.dOJ1hAdoC0\nremote: + unset GIT_DIR GIT_WORK_TREE\nremote: + git clone -q /var/lib/gandalf/repositories/aplicacio1.git /tmp/tmp.dOJ1hAdoC0\nremote: + pushd /tmp/tmp.dOJ1hAdoC0\nremote: + git config advice.detachedHead false\nremote: + git checkout f5ccae132631012ad80af518b1b93bcd0bee89d3\nremote: HEAD se encuentra en f5ccae1... test\nremote: + git submodule update --init --recursive\nremote: + find -name .git -prune -exec rm -rf '{}' ';'\nremote: + tar zcf /tmp/aplicacio1_f5ccae132631012ad80af518b1b93bcd0bee89d3_fda3cd94f0c941f5b85d102e22d0672d.tar.gz .\nremote: + popd\nremote: + rm -rf /tmp/tmp.dOJ1hAdoC0\nremote: ++ save_archive aplicacio1_f5ccae132631012ad80af518b1b93bcd0bee89d3_fda3cd94f0c941f5b85d102e22d0672d.tar.gz\nremote: ++ url=http://127.0.0.1:3131/\nremote: +++ curl -sN -F archive=@/tmp/aplicacio1_f5ccae132631012ad80af518b1b93bcd0bee89d3_fda3cd94f0c941f5b85d102e22d0672d.tar.gz http://127.0.0.1:3131/\nremote: ++ result='{\"id\":\"189fc6374c6ca78036c63184c507d8a456c9e834d6c0dc88657950f0fc05854b5133b32ab0bc4e7591cd13313721c3436b309383557b2625c4d9f04915107a2e\"}'\nremote: ++ python\nremote: + archive_id=189fc6374c6ca78036c63184c507d8a456c9e834d6c0dc88657950f0fc05854b5133b32ab0bc4e7591cd13313721c3436b309383557b2625c4d9f04915107a2e\nremote: + archive_url='http://:3232/?id=189fc6374c6ca78036c63184c507d8a456c9e834d6c0dc88657950f0fc05854b5133b32ab0bc4e7591cd13313721c3436b309383557b2625c4d9f04915107a2e'\nremote: + wait_archive 'http://:3232/?id=189fc6374c6ca78036c63184c507d8a456c9e834d6c0dc88657950f0fc05854b5133b32ab0bc4e7591cd13313721c3436b309383557b2625c4d9f04915107a2e'\nremote: + url='http://:3232/?id=189fc6374c6ca78036c63184c507d8a456c9e834d6c0dc88657950f0fc05854b5133b32ab0bc4e7591cd13313721c3436b309383557b2625c4d9f04915107a2e&keep=1'\nremote: ++ awk '{print $2}'\nremote: ++ grep Content-Type\nremote: ++ curl -sI 'http://:3232/?id=189fc6374c6ca78036c63184c507d8a456c9e834d6c0dc88657950f0fc05854b5133b32ab0bc4e7591cd13313721c3436b309383557b2625c4d9f04915107a2e&keep=1'\nremote: + content_type=$'application/x-gzip\\r'\nremote: + grep -v application/x-gzip\nremote: + echo $'application/x-gzip\\r'\nremote: + url=http://127.0.0.1:8080/apps/aplicacio1/deploy\nremote: + tee /tmp/deploy-aplicacio1.log\nremote: + curl -H 'Authorization: bearer 2387254bd9fa6abfc8087d04587aa29326ac7ee79eb8029794627890b7a10e00' -d 'archive-url=http://:3232/?id=189fc6374c6ca78036c63184c507d8a456c9e834d6c0dc88657950f0fc05854b5133b32ab0bc4e7591cd13313721c3436b309383557b2625c4d9f04915107a2e&commit=f5ccae132631012ad80af518b1b93bcd0bee89d3&user=admin@csuc.cat' -s -N http://127.0.0.1:8080/apps/aplicacio1/deploy\nremote: stdin: is not a tty\nremote: 2016/03/03 09:06:33 Post http://0.0.0.0:8080/apps/aplicacio1/units/register: dial tcp 0.0.0.0:8080: getsockopt: connection refused\nremote: Exit status 1\nremote: + rm /tmp/aplicacio1_f5ccae132631012ad80af518b1b93bcd0bee89d3_fda3cd94f0c941f5b85d102e22d0672d.tar.gz\nremote: + grep -q '^OK$'\nremote: + tail -1 /tmp/deploy-aplicacio1.log\nTo git@localhost:aplicacio1.git\n ! [remote rejected] master -> master (pre-receive hook declined)\nerror: failed to push some refs to 'git@localhost:aplicacio1.git'\n\nI see that git has the enviroment variables but when they try to connect to TSURU_HOST they don't connect :( Do you know why?  If I execute cat /tmp/deploy-aplicacio1.log I see this:\n\nroot@tsuru:~/wordpress/wordpress# cat /tmp/deploy-aplicacio1.log \nstdin: is not a tty\n2016/03/03 09:06:33 Post http://0.0.0.0:8080/apps/aplicacio1/units/register: dial tcp 0.0.0.0:8080: getsockopt: connection refused\nExit status 1\n\nI hope this helps to other users also so they can install tsuru without the same problems than me! Thanks!\n. I change in /etc/tsuru/tsuru.conf 0.0.0.0:8080 like this: \n\nlisten: \"0.0.0.0:8080\"\nhost: http://127.0.0.1:8080\n\nI restart the tsuru-server-api and when I try to execute git push tsuru master the result are this: \n\nremote: + curl -H 'Authorization: bearer 2387254bd9fa6abfc8087d04587aa29326ac7ee79eb8029794627890b7a10e00' -d 'archive-url=http://:3232/?id=9cff253628180a6c8bfbd2790d6daf45d3575b8f0a4fdf845da2f0772b20c03313abe1913a72b56a9c6e93be7ac7ffe2bbf2052a254ab2e0833b844aa0d2ff12&commit=f5ccae132631012ad80af518b1b93bcd0bee89d3&user=admin@csuc.cat' -s -N http://127.0.0.1:8080/apps/aplicacio1/deploy\nremote: stdin: is not a tty\nremote: 2016/03/03 14:24:13 Post http://127.0.0.1:8080/apps/aplicacio1/units/register: dial tcp 127.0.0.1:8080: getsockopt: connection refused\nremote: Exit status 1\nremote: + rm /tmp/aplicacio1_f5ccae132631012ad80af518b1b93bcd0bee89d3_6aaca225f69e49c3a6285e3193911e12.tar.gz\nremote: + grep -q '^OK$'\nremote: + tail -1 /tmp/deploy-aplicacio1.log\nTo git@localhost:aplicacio1.git\n ! [remote rejected] master -> master (pre-receive hook declined)\nerror: failed to push some refs to 'git@localhost:aplicacio1.git'\n\nI see in the error that it doesn't connect to 127.0.0.1 at port 8080 and I try to connect with telnet and I can connect to host on port 8080. \n\nroot@tsuru:~/wordpress/wordpress# telnet 127.0.0.1 8080\nTrying 127.0.0.1...\nConnected to 127.0.0.1.\nEscape character is '^]'.\n\nBut when I press return key the terminal return following:\n\nroot@tsuru:~/wordpress/wordpress# telnet 127.0.0.1 8080\nTrying 127.0.0.1...\nConnected to 127.0.0.1.\nEscape character is '^]'.\nHTTP/1.1 400 Bad Request\nConnection closed by foreign host.\n. Yes !!!!!!!!!!!\n\nI change 127.0.0.1 to my private IP and now when I run git push tsuru master works!!! :-D :+1:  and when I execute netstat -ntap | grep LISTEN i view that the app works on port 32768 and it's accesible from Firefox.\nThanks for all =) !!!!\n. Hi, \nYes, sure, I can document the process that I followed to run tsuru. I will re-install manually all the services and I will document it. I'll post it here when it's done!\nThanks.\n. ",
    "dfleury": "@ggarnier thank you\n. ",
    "rodrigodealer": "Let me know if you think I should squash my commits.\n. That would be great. \ud83d\udc4d \n. Done.\n. Good point! \n. ",
    "jpic": "Fixed !\n. Absolutely, I shouldn't have used github's editor ^^\n. ",
    "cacarico": "When I try to create a root user for api I receive this error message:\nError: Failed to connect to Gandalf server (tsuru-gandalf-01.vpc:8000) - Post tsuru-gandalf-01.vpc:8000/user: unsupported protocol scheme \"tsuru-gandalf-01.vpc\"\nGandalf logs shows no errors\nroot@ip-10-0-3-242:~# tail -10 /var/log/upstart/gandalf-server.log \nRepository location: /var/lib/gandalf/repositories\ngandalf-webserver 0.7.3 listening on localhost:8000\nRepository location: /var/lib/gandalf/repositories\ngandalf-webserver 0.7.3 listening on 0.0.0.0:8000\n. Error: no reachable servers, again ;(\n. When I try to create a user it gives me \"Error: no reachable servers\".\nMy logs are:\nAPI:\nUsing mongodb database \"tsurudb\" from the server \"tsuru-mongo-01.vpc:27017\".\nRegistered router \"hipache\": hipache router \"tsuru-planb-01.vpc\" with redis at \"tsuru-redis-01.vpc:6379\".\nDefault router is \"hipache\".\nUsing \"gandalf\" repository manager.\nUsing \"docker\" provisioner.\nDocker provisioner reports the following nodes:\nUsing \"native\" auth scheme.\nChecking components status:\n    WARNING: \"Gandalf\" is not working: fail - unexpected status - \n    WARNING: \"docker\" is not working: fail - error - no nodes available for running containers\n    Components checked.\ntsuru HTTP server listening at 0.0.0.0:8080...\nMONGO:\n2016-04-28T01:58:56.554+0000 I NETWORK  [initandlisten] connection accepted from 10.0.3.87:51187 #14 (6 connections now open)\n2016-04-28T01:59:01.906+0000 I NETWORK  [initandlisten] connection accepted from 10.0.3.87:51188 #15 (7 connections now open)\n2016-04-28T01:59:02.018+0000 I NETWORK  [conn14] end connection 10.0.3.87:51187 (6 connections now open)\n2016-04-28T01:59:02.020+0000 I NETWORK  [conn15] end connection 10.0.3.87:51188 (5 connections now open)\nGANDALF:\nroot@ip-10-0-3-242:~# tail /var/log/upstart/gandalf-server.log\nRepository location: /var/lib/gandalf/repositories\ngandalf-webserver 0.7.3 listening on 0.0.0.0:8000\nARCHIVE:\nroot@ip-10-0-3-242:~# tail /var/log/upstart/archive-server.log\n2016/04/28 01:35:09 [INFO] Starting read server at \"10.0.3.242:3232\"\n2016/04/28 01:35:09 [INFO] Starting write server at \"127.0.0.1:3131\"\nps ax of gandalf server \nroot@ip-10-0-3-242:~# ps ax| grep \"archive\\|gandalf\"\n 3403 ?        Ssl    0:00 /usr/bin/archive-server -dir=/var/lib/archive-server/archives -read-http=10.0.3.242:3232 -write-http=127.0.0.1:3131 -mongodb=10.0.3.131:27017 -dbname=archives\n 3595 ?        Ssl    0:00 /usr/bin/gandalf-server -config=/etc/gandalf.conf\nNothing appears at log\n. @andrewsmedina \ngit:\n    api-server: http://tsuru-gandalf-01.vpc:8000\n. Sorry,\nThere was a mongodb parameter for gandalf that was wrong.\nThe main problem was the outpur: \"Error: no reachable servers\".\nNow it is working properly,\nTy\n. ",
    "ervilis": "Very thank you @guilhermef . Problem solved.\n. ",
    "gabrielclima": "@andrewsmedina im working on it\nwhats the expected message error? can i use \"this application is already started and running\"?. @guilhermebr yes, i'll finish this PR. \nSorry about the delay. . @gfleury im using tsuru-client 1.5.0-rc1 now and works fine. \ni'll look to 1.5.0-rc3 commits\n. @ggarnier 1.5.0 rc3 has vendor upgrade, im looking for github.com/Nvveen/Gotty/gotty.go, github.com/tsuru/tsuru/io/stream_writer.go and github.com/moby/moby/pkg/jsonmessage/jsonmessage.go history\n\nDo you get this error with other platforms?\n\nyes, all others platforms, also using tsuru platform-add your-platform-name --dockerfile https://raw.githubusercontent.com/tsuru/platforms/master/python/Dockerfile \n. > I was facing it, I've updated tsuru-client and tsuru (api) to latest master branch, and now is working normal.\nCan you update both and try again @gabrielclima?\n@gfleury i have already updated to master and was not solved\n. > I assume that you guys already patched it, but I actually ran into it in my own project and the fix was quite simple - Docker uses a forked library using its original repo's name, per https://github.com/moby/moby/blob/master/vendor.conf#L148. If you correct your vendor tool to grab that fork instead, it all works fine.\n\nTHIS IS PLATFORM-RELATED! You won't reproduce this issue in all environments.\n\ni have updated the gotty \"github.com/Nvveen/Gotty\" import to gotty \"github.com/ijc/Gotty\" and it works fine now =)\nthis commit github.com/ijc/Gotty/6018b68 solve it\nguys, i tryed to update the import and the vendor but the file github.com/moby/moby/pkg/jsonmessage/jsonmessage.go is from docker repository and when i use dep ensure, dep reverts the changes to keep the original repository (gotty \"github.com/Nvveen/Gotty\") because docker use this import with this name. Docker uses a vendor that has a trick to use an import with project name but from another fork repository. Dep has no this feature =| \nWhat we can make?. > I can't reproduce this error. Can you give more information about your environment?\n@ggarnier im using Ubuntu 17.10:\nDistributor ID: Ubuntu\nDescription:    Ubuntu 17.10\nRelease:    17.10\nCodename:   artfu\nand golang 1.8\nGOARCH=\"amd64\"\nGOBIN=\"\"\nGOEXE=\"\"\nGOHOSTARCH=\"amd64\"\nGOHOSTOS=\"linux\"\nGOOS=\"linux\"\nGOPATH=\"/home/gabriel/go\"\nGORACE=\"\"\nGOROOT=\"/usr/lib/go-1.8\"\nGOTOOLDIR=\"/usr/lib/go-1.8/pkg/tool/linux_amd64\"\nGCCGO=\"gccgo\"\nCC=\"gcc\"\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build233005855=/tmp/go-build -gno-record-gcc-switches\"\nCXX=\"g++\"\nCGO_ENABLED=\"1\"\nPKG_CONFIG=\"pkg-config\"\nCGO_CFLAGS=\"-g -O2\"\nCGO_CPPFLAGS=\"\"\nCGO_CXXFLAGS=\"-g -O2\"\nCGO_FFLAGS=\"-g -O2\"\nCGO_LDFLAGS=\"-g -O2\". ",
    "fnzv": "shell\ntsuru app-deploy -i ubuntu-core \nflag provided but not defined: -i\nUsage:\n-a, --app (= \"\")\n    The name of the app.\n-h, --help  (= false)\n    Display help and exit\n?\nI have installed tsuru with curl -sL https://raw.githubusercontent.com/tsuru/now/master/run.bash | bash\n. i installed run.bash with --tsuru-from-source but i still get the same error, do i need to compile from source also the tsuru client? (i have installed it from ppa)\n. @tarsisazevedo  I used tsuru/rc ppa and now this is what happens.\nroot@tsuru-rc:/home/application/current# tsuru-admin platform-add ubuntu -i ubuntu\nStep 1 : FROM ubuntu\nPulling from library/ubuntu\nDigest: sha256:f1b592e2de671105255a0c0b7b2f71a92b829403e8fc845e3482667ecc301780\nStatus: Image is up to date for ubuntu:latest\n ---> 12543ced0f6f\nSuccessfully built 12543ced0f6f\nPlatform successfully added!\n\nroot@tsuru-rc:/home/application/current# tsuru app-create ubuntutest ubuntu -t admin\nApp \"ubuntutest\" has been created!\nUse app-info to check the status of the app and its units.\nYour repository for \"ubuntutest\" project is \"git@10.0.0.18.nip.io:ubuntutest.git\"\n\ntsuru app-deploy -i ubuntu --app ubuntutest\nDeploying image... ok\n---- Pulling image to tsuru ----\nPulling from library/ubuntu\nDigest: sha256:f1b592e2de671105255a0c0b7b2f71a92b829403e8fc845e3482667ecc301780\nStatus: Image is up to date for ubuntu:latest\n---- Getting process from image ----\n  ---> Procfile not found, trying to get entrypoint\nYou should provide a entrypoint in image or a Procfile in the following locations: /home/application/current or /app/user or /.\n. I copied this ubuntu Dockerfile ( https://github.com/dockerfile/ubuntu/blob/master/Dockerfile) in all the paths but same error.\nI added also ENTRYPOINT [\"/bin/bash\"] on the Dockerfile but still same warning, the app is created but not deployed(i can see it on tsuru app-list).\nI don't know what kind of Procfile is needed if i want only to deploy a ubuntu with no applications on it\n. ",
    "mateuspontes": "There are many ways to solve this, I think the best solution is to check Roles in ListUsers() before the loop, but this logic is owned by createAPIUser. I created a test case and push some code inside the createAPIUser to solve that too, maybe not the best way.. ",
    "morpheyesh": "@fsouza @tarsisazevedo  Anything?\n. @cezarsa cool man! thanks! \n. @fsouza you can close this..\n. @andrewsmedina take a look..\n. I can help..@cezarsa\n.  i think i did ./run.bash or curl -sL https://raw.githubusercontent.com/tsuru/now/master/run.bash | bash . same thing!\n. +-----------------------+---------+--------+--------------------------------------------------------------------------------------------------+\n| Address               | IaaS ID | Status | Metadata                                                                                         |\n+-----------------------+---------+--------+--------------------------------------------------------------------------------------------------+\n| http://127.0.0.1:2375 |         | ready  | DisabledUntil=2016-09-13T13:14:35Z                                                               |\n|                       |         |        | LastError=API error (400): {\"message\":\"starting container with HostConfig was deprecated since \u21b5 |\n|                       |         |        | v1.10 and removed in v1.12\"}                                                                     |\n|                       |         |        | LastSuccess=2016-09-13T09:48:39Z                                                                 |\n|                       |         |        | pool=theonepool                                                                                  |\n+-----------------------+---------+--------+--------------------------------------------------------------------------------------------------+\n. ",
    "resilva87": "Hi @cezarsa, that did the trick, thanks.\nI know you guys have several things to deal with but I think it would be great if that information could be updated in https://docs.tsuru.io/stable/managing/add-platform.html\n. Thanks @andrewsmedina and @cezarsa. I've successfully installed a new platform with basebuilder repo.\nThis can be closed :+1: \n. ",
    "guilhermebruzzi": "The problem was a issue on tsuru-client, this PR should fix it: https://github.com/tsuru/tsuru-client/pull/19\n. P.S.: I was only able to run tsuru server and test this PR after this commit (not present on this PR): https://github.com/tsuru/tsuru/commit/5c7a955d83ff4e9d1c87fd1d29f847f4bcf4272d\n. @andrewsmedina :D\n. ",
    "etandel": "BTW, I'm using the precompiled release of tusur, version 1.0.1.\n. ",
    "afranioce": "The dokku (mini-heroku) has this feature, it is also open-source if it can help.\nI look forward to version 1.3. Its is cool! Add more v\u00eddeos on your channel youtube. The tsuru client install doc needs to be updated . ",
    "IngCr3at1on": "@andrestc just glanced at the code after finding the issue from the hacktoberfest tag...\nCould this not be resolved by completely the healthcheck function and calling it before any other calls?\n. @andrestc only problem with no timeouts is that if any one service never passes health checks you'll get stuck in the install loop instead of returning an error.\n. @andrestc my mistake; I'd probably go the route of waiting on the main goroutine as you said. The configurable timeout is a good idea as well I think.\n. ",
    "bgrant0607": "Let us know how we can help.. @andrewsmedina I was more thinking about answering questions, giving you pointers to code/docs, helping you understand the K8s roadmap if there's something you need that doesn't exist yet, etc.. ",
    "otherpirate": "The docs are up to date!\n. Hi, @andrewsmedina \nI did the changes, can you review please?\n. Hi, @andrestc \nI checked the code with gofmt, no more problems\n. @andrewsmedina \nI sorted the imports by alphabetical order\nCould you review again?\n. ",
    "raphamorim": "\ud83d\udc4d  :octocat: \n. ",
    "mbajur": "Sorry, i'm affraid i'm not able to share that app with you. It's my company's commercial app :(\nOh yes, i just tried ruby platform and it took like a minute to finish. So that's impressive :) It's still a pitty that im not able to use docker/buildpack in cause of it's slowliness but i can live with that for now. Thanks!\nIf you need anything to let you debug that, please just let me know.\n. ",
    "felipeweb": "@andrewsmedina is vendorize https://github.com/tsuru/tsuru/pull/1496/commits/c14de3e719c9e951f0ec957013ff2eda2ac680d4\n. @andrewsmedina  sorry my fault. all missing dependencies added here https://github.com/tsuru/tsuru/pull/1496/commits/7727822062d98e8835d54d858480731ded8d7d7f\n. i will fix the tests. I`m trying to understand why my changes causes a EOF error . thank you for help @andrestc  i open other PR #1525 . @andrestc,  do i need to change something in PR?. ",
    "framsouza": "tsuru app-info\nApplication: fram\nDescription:\nRepository: git@10.50.1.51:fram.git\nPlatform: php\nTeams: rivendel\nAddress: fram.52.90.71.140.xip.io\nOwner: fram.souza14@gmail.com\nTeam owner: rivendel\nDeploys: 0\nPool: rivendelpool\nQuota: 0/-1 units\nApp Plan:\n+---------------+--------+------+-----------+--------+---------+\n| Name          | Memory | Swap | Cpu Share | Router | Default |\n+---------------+--------+------+-----------+--------+---------+\n| autogenerated | 0      | 0    | 100       |        | false   |\n+---------------+--------+------+-----------+--------+---------+\n. yes, i add manually in authorized_keys ... follow file gandalf.conf\nshell\nbin-path: /usr/bin/gandalf-ssh\ndatabase:\n  url: 10.50.1.235:27017\n  name: gandalf\ngit:\n  bare:\n    location: /var/lib/gandalf/repositories\n    template: /home/git/bare-template\nhost: localhost\nbind: 54.237.232.220:8000\nuid: git\napi:\n  request:\n    maxMemory: 2097152\nrepository:\n  tempDir: /tmp\ntsuru.conf\nshell\nlisten: \"0.0.0.0:8080\"\ndebug: true\nhost: http://0.0.0.0:8080 \ngit:\n    api-server: http://54.237.232.220:8000\nauth:\n    user-registration: true\n    scheme: native\ndatabase:\n    url: 0.0.0.0:27017\n    name: tsurudb\npubsub:\n    redis-host: 0.0.0.0\n    redis-port: 6379\nqueue:\n    mongo-url: 0.0.0.0:27017\n    mongo-database: queuedb\nprovisioner: docker\ndocker:\n    router: hipache\n    collection: docker_containers\n    repository-namespace: tsuru\n    deploy-cmd: /var/lib/tsuru/deploy\n    bs:\n        image: tsuru/bs:v1\n        reporter-interval: 10\n        socket: /var/run/docker.sock\n    cluster:\n        storage: mongodb\n        mongo-url: 0.0.0.0:27017\n        mongo-database: cluster\n    run-cmd:\n        bin: /var/lib/tsuru/start\n        port: \"8888\"\n    ssh:\n        add-key-cmd: /var/lib/tsuru/add-key\n        user: ubuntu\nrouters:\n    hipache:\n        type: hipache\n        domain: 54.157.55.191\n        redis-server: 0.0.0.0:6379\niaas:\n  default: ec2\n  node-protocol: http\n  node-port: 2375\n  ec2:\n    key-id: xxxx\n    secret-key: xxxxxx. ",
    "accbel": "Hey @framsouza \nDid you install Gandalf after creating cluster's root user? I had this same issue on my Tsuru setup (API installation, root-user creation and tsuru-dashboard deploy) and I got it solved after executing \"tsurud gandalf-sync\" just after Gandalf installation. I think it's worth trying. Hi @gwmoura. Thanks for replying\nYes, all the components were properly started but after some digging I've found the root cause. The message 'no reachable servers' means that archive-server cannot reach MongoDB instance.\nAt the Gandalf installation docs there is no mention about how to configure archive-server in a proper way when you have a distributed setup (mongodb isn't available at localhost) and a default archive-server configuration file is placed at /etc/default/archive-server that points to a local MongoDB instance.\nI think it's worth to append a few lines in the docs about archive-server configuration details. What you think?\nThanks for your help!. @gwmoura yeah, my tsuru.conf was properly configured but I didn't touch any of archive-server scripts/files except /etc/default/archive-server just to make it work. I've expected archive-server to work smoothly just by following the docs. Anyway, it is working now.. ",
    "acobster": "Yep, working now! Darn gremlins.. ",
    "caiolenthus": "So...\nI found the solution in one of several tests I did.\nThanks anyway and, if possible, put some direct reference to this functionality in the documentation.\ntsuru role-assign team-member myuser@mydomain.com mygroup. ",
    "heitorsilva": "I didn't knew that @cezarsa... Thanks! That solves my case for now...\nHow would you like to handle this issue?. Sure! No problem... Thank you.. Hello guys!\nWhat do you mean by filtering? What should be filtered here?\nI'm completely out of context / blind, but I wanna help with this issue.... Thank you @ggarnier! If I have more doubts, I'll ask again.... @ggarnier sorry to bother, but I want to ask some things... I've seen that on the eventList, it's being used a form decoder, and it's being applied some \"rules\" to it, like:\n- IgnoreUnknownKeys\n- IgnoreCase\n\nare these rules the default for every form decoding?\nshould I use the same method to pass the filter for ListNodes? we'll receive a filter param and will pass it to the ListNodes?\n\nAm I missing something, or is it really simple as that?. ",
    "brust": "@andrestc Thanks, I'll try it!. ",
    "NathanFlurry": "That seemed to do the trick. It might be nice to give a warning or something when that happens. Thanks!. Looks like it worked, thanks!. ",
    "guiferpa": "I will see it, this case. Exists any issue as task for Tsuru API to serve this datas?. tsuru/tsuru-client#48. Up. I am work on it. Currently the package to .ListPoolsForTeam is pool, right?. I gonna create some tests for .ListPoolsForTeam, I think something wrong is happening.. With this command, create a pool constraint with correct and valid context\n- tsuru pool-constraint-set pool1 team team1\nWith this command, create an pool constraint with fail and invalid context\n- tsuru pool-constraint-set pool1 slash-gnr team1\nI found this case when used .ListPoolsForTeam and did not get info about the pool. I used tsuru pool-constraint-set pool1 team1 as the command, and then the Tsuru API created team1 as context and not value in database.\nI think this case a bug, as the context isn't being properly validated.\nWhat do you think about it?. json\n{\n    ...\n    \"Roles\": [\n        {\n            \"Name\": \"AllowAll\",\n            \"ContextType\": \"global\",\n            \"ContextValue\": \"team1\"\n        }\n    ]\n    ...\n}\n\nUser response scope from /teams/{name}\n\nSo, but by example, I need Roles from apiUser in my tsuru CLI for format an roles output. What to do this case?. tsuru version 1.3.0-rc2. I do not understand, Do I need sweep the user.Roles for get roleInstance.Name ?. Like this?\ngolang\n...\nfor _, roleInstance := range user.Roles {\n  role, ok := cachedRoles[roleInstance.Name]\n  if !ok {\n   role, err := permission.FindRole(roleInstance.Name)\n   if err != nil {\n     return &errors.HTTP{\n          Code: http.StatusNotFound, \n          Message: err.Error()\n     }\n   }\n   cachedRoles[roleInstance.Name] = role\n  }\n.... ",
    "daniellima": "Ok, feel free to do it. I am new to tsuru and Go in general and don't think I will have time to fix this correctly, at least for now. . ",
    "brunoarueira": "@ggarnier Should I change to use regex then? I'll change after your answer!. \ud83d\udc4d  @andrestc, I'll do in a sec.. Sorry, I've been busy in the last days. I'll fix the last review and submit again.. @andrestc \ud83d\udc4d . You're welcome!. my bad, I'll fix \ud83d\ude05 . sure!. ",
    "jrwren": "I'd love to tackle this. Can you give me some pointers on where to start? I spent 5 minutes looking for where app-deploy is at and it was not obvious.\nI just realized that this is from over a year ago, maybe it is no longer applicable?. ",
    "VitorFalcao": "Hi @andrestc I would like to work on this issue. Could you please give me some pointers, since I am new to the project?. @ggarnier I would like to fix this bug. Do you have any tips or preference on how it should be fixed?. Thank you. If the pool does not exist, should the function return an \"errors.New()\"? If so, what should be the message?. @ggarnier I have a doubt regarding the scenario where the client wants to add the clsuter to more than one one pool. Let's say not all of the pools exist. What should the application do in this case? \n\nAdd the cluster to the existing pools and silently ignore the non-existent ones; or\nAdd the cluster to the existing pools and return a warning saying which pool(s) do not exist; or\nDo not add the cluster to any pool and return an error specifying which pool(s) do not exist;\n\nThank you.. @ggarnier Hi, I would like to start contributing to the project. Could you please elaborate on the issue?. Hi @cezarsa I've just started contributing to the project and this issue seems interesting. Could you please elaborate on it?. @cezarsa Thank you for the explanation. I guess the more complex solution would be better, right? At least, IMHO, it seems more user friendly. What do you think?. @cezarsa Should I submit a PR with the stopgap and then work on the complex solution?\n. @cezarsa I am trying to figure out all the resources a provisioner creates and I wanted to know when exactly it does that. Is it only when the command app-restart or app-deploy is issued? I want to make sure I don't leave anything behind.. @andrestc Sure! Working on it.. @andrestc Should I also validate if the pool exists in the method updateCluster in api/cluster? And before the createCluster method there is a comment section specifying the possible return codes and their meanings. Should I add 404 to that list?. @andrestc The updateCluster method of api/cluster already has a 404 code specified for when the cluster does not exist. Is there any problem in returning the same code for when a pool does not exist?. @andrestc The method already uses that code for Invalid data. Thank you guys for the feedback and sorry for the silly mistakes. @cezarsa Could you please explain to me why this happens?. Thank you very much. I wasn't aware of the block scope.. ",
    "rafaelfragosom": "Can I get this one? It's really simple.. @ArxdSilva Let me know if that's okay.. @andrestc Thank you! It's updated.. I understand, but why not?. ",
    "gfleury": "I'm looking for something similar, Kubernetes already has a cronjob resource controller. Which could be used for tsuru kubernetes provisioners. However for pure docker/tsuru this is something to discuss.\nAnd even using kubernetes cronjob it will only match the items 1 and 3. In my case item 3 would be enough.. Having a Procfile with one extra line like \n(crontab -l 2>/dev/null; echo \"/5 *  * * echo Hello > /proc/1/fd/1 2> /proc/1/fd/2\") | crontab - && sudo cron -f\nAlso works for Ubuntu based images/platforms.... But a bit hacky, it seems not related to the original topic of the issue (having it into the command line), but I'm trying to discuss the ways of having a task scheduler within Tsuru...\nEven the logs looks somehow not that bad.. \n2018-04-03 17:34:06 +0200 [tsuru][api]:  ---> 1 old units pending termination\n2018-04-03 17:34:07 +0200 [tsuru][api]:  ---> waiting healthcheck on 1 created units\n2018-04-03 17:34:07 +0200 [web][32cd8a8ca7eb]: 2018-04-03 15:34:07 [1] [INFO] Starting gunicorn 18.0\n2018-04-03 17:34:07 +0200 [web][32cd8a8ca7eb]: 2018-04-03 15:34:07 [1] [INFO] Listening at: http://0.0.0.0:8888 (1)\n2018-04-03 17:34:07 +0200 [web][32cd8a8ca7eb]: 2018-04-03 15:34:07 [1] [INFO] Using worker: sync\n2018-04-03 17:34:07 +0200 [web][32cd8a8ca7eb]: 2018-04-03 15:34:07 [237] [INFO] Booting worker with pid: 237\n2018-04-03 17:34:15 +0200 [tsuru][api]:  ---> 1 of 1 new units ready\n2018-04-03 17:34:15 +0200 [tsuru][api]:  ---> Done updating units\n2018-04-03 17:35:01 +0200 [crontab][ade102a41bd6]: Hello\n2018-04-03 17:40:01 +0200 [crontab][ade102a41bd6]: Hello\nMaybe using just cron -f as Procfile line and move the rest to the deployment hooks on tsuru.yml.. For docker seems that the controller will need to be in tsuru it self, maybe with github.com/robfig/cron. Or maybe extending gc.go to support more options in scheduling. \nFor docker swarm seems a bit confusing as they have a few feature requests around it but I couldn't find anything solid on that topic. \nFor Kubernetes we already know.. @ggarnier I was facing the same issue. In my situation was the lack of permissions for the Tsuru service account (for deleting pods). If you were using RBAC, it could be the same. \nThe error was being hidden because cleanupPod() is only called by defer, so I guess that err is just being ignored. I'm adding a logging into cleanupPod just to make it more explicit by log when the deletion fails. \nhttps://github.com/gfleury/tsuru-helm-chart/commit/a7ab1e44b8af4800e4aa5db7a2c1ea87e44a1694\n. +1, any ETA?. @gabrielclima  Thats something anoying happening on tsuru-client\ntry, \ntsuru -v 2 platform-add python\nThis should work even with the error... I will take a look later. . I was facing it, I've updated tsuru-client and tsuru (api) to latest master branch, and now is working normal. \nCan you update both and try again @gabrielclima?. As I'm not doing any interaction direct with Kubernetes, can I just use docker tests on it?\ndiff --git a/provision/kubernetes/provisioner_test.go b/provision/kubernetes/provisioner_test.go\nindex 4e442da54..34c5da966 100644\n--- a/provision/kubernetes/provisioner_test.go\n+++ b/provision/kubernetes/provisioner_test.go\n@@ -25,6 +25,7 @@ import (\n        \"github.com/tsuru/tsuru/provision/cluster\"\n        \"github.com/tsuru/tsuru/provision/nodecontainer\"\n        \"github.com/tsuru/tsuru/provision/provisiontest\"\n+       \"github.com/tsuru/tsuru/provision/docker\"\n        \"github.com/tsuru/tsuru/safe\"\n        \"gopkg.in/check.v1\"\n        \"k8s.io/api/apps/v1beta2\"\n@@ -854,6 +855,10 @@ ignored docker push output\n        c.Assert(units, check.HasLen, 1)\n }\n+func (s S) TestRollbackDeploy(c check.C) {\n+       docker.TestRollbackDeploy(c)\n+}\n+\n func (s S) TestImageDeployInspectError(c check.C) {\n        a, _, rollback := s.defaultReactions(c)\n        defer rollback(). I guess there is a lot of changes on #1838 that will affect this. . Since there is a few dependencies on docker rollback test, I'm just importing. . Rebased with master. . @guilhermebr can you check this one? Took a bit longer to fix the tests, but I guess that is ok now. \n. Instead of the rebase, as it was an small change and had a lot of commits I just did a force update on the source branch. . Hmm, ok. Makes sense then. . I guess, that the difference now from origin and kind is a bit confusing for me. So, I've changed to kind being how the file is coming from and from origin being from where. But I'm not sure to be honest. From what I understood is, deployment kind and data origin. Is that right?. Hi, \nFirst part, having it separated in directories, looking by how it is implemented now, is easier to do this way. \nSecond part solve the problem and it's declarative, but can mess the head of guys that don't have a shell background, because then it's a mix of setting env vars and parameters. \n$ TSURU_TARGET=target1 tsuru app-log -a app1\nThis is very helpful for using it embedded on CI jobs/scripts or something similar, for daily use it is safe, can prevent acting on the wrong target. But I would say that something similar to, \n$ tsuru -target target1 app-log -a app1\nis more easy to use and remember on a daily basis. . So seems that we have the token management a bit spread among tsuru and go-tsuruclient now.. ReadToken is implemented on both places and writetoken is implemented on tsuru/tsuru. Is there some guideline on how to do it? is go-tsuruclient going to be the shared package between all other packages?. Hmmm, but do we have this amount of mixed environments, with docker and kubernetes on same Tsuru using same plans? If yes then it's better to implement a new field on Plan, otherwise documentation should be enough. . Ok, I guess that creating an specific field for k8s cpushares should be the best approach, I will take a look on that. . Hi @guilhermebr, correct me if I'm wrong, but this was the \"behavior\" before since o.Commit was being set to empty if the token wasn't from an app. And then rely only if commit id was empty or not to define if it was from kind DeployGit. \nChecking the token inside getKind() seems a different from how it was being done before, as getKind only rely on the DeploymentOptions to define the kind. (DeploymentOptions were being defined to force a Kind). I'm not sure how is the best way. The way I've done is following the same 'idea' from before. . Done.. ",
    "yusef-ho": "I have the same issue.... ",
    "rof20004": "The problem is the documentation. tsuru-server do not exists anymore, the name has changed to tsurud.\n/etc/default/tsurud. ",
    "anchepiece": "Looks like the documentation is missing as well:\nhttp://tsuru-client.readthedocs.io/en/master/reference.html#cluster-management\nI'll take a quick poke around.. Created a pull request here:\nhttps://github.com/tsuru/tsuru-client/pull/65\nand here (install_test.go):\nhttps://github.com/tsuru/tsuru/pull/1778\nI'll check through the command listing for similar missing dialogs. \nedit: I went through and there are no other instances.\nHope that helps!. @ggarnier Just a heads up, the documentation was updated and correctly reflects the client arguments (I like to follow through with any commits)\n. ",
    "rodrigo-brito": "I will try.. @cezarsa the constraint  * for the field team returns the default pool too. Is it correct for this case? Can I include it in the error message?. @cezarsa fixed \u267b\ufe0f . \ud83d\ude04 . Ok, no problem!. ",
    "philm": "Thanks, @andrestc. Here you go:\nrouters:\n  hipache:\n    default: true\n    type: hipache\n    domain: $PUBLIC_ADDR\n    redis-server: $REDIS_ADDR:$REDIS_PORT\n($PUBLIC_ADDR is set to a var that looks like this: mysubdomain.mydomain.com). @andrestc - that did the trick. :) Thanks for the quick turnaround. \nGreat project! We are evaluating it with several customers.. ",
    "nielsonsantana": "Hi @cezarsa. It solved the issue. . ",
    "biancarosa": "What's the expected behavior? Ignore the folder or deploy it?. ",
    "htbase": "Did you solve this @GuilhermeGPG ? I'm having the same issue, with EC2\nMy security group in amazon has all ports available, so communication is not a problem\n. Thanks @fsouza . I\u2019m actually using amazonec2 driver\nTried a few times and the same behaviour every time\nOn Feb 4, 2019, at 3:07 AM, Guilherme Rezende notifications@github.com<mailto:notifications@github.com> wrote:\n@htbasehttps://github.com/htbase are you using virtualbox 6.0.0? If possible try with version 5.2.0 as reported in this issue: #2243https://github.com/tsuru/tsuru/issues/2243\nI will take a look at this issue today.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHubhttps://github.com/tsuru/tsuru/issues/2261#issuecomment-460208969, or mute the threadhttps://github.com/notifications/unsubscribe-auth/ALUyOYm2IsZjJsmV0dcCXlgdNAStIlSFks5vKBSAgaJpZM4agcXl.\n. Hi @guilhermebr \nAny luck with this issue?. Any ideas folks?. ",
    "RafaelGomides": "It is important to define in the documentation what this TOKEN is and how to achieve it?. ",
    "JonathanAlcantara": "I'm giving a look at this issue.. I didn't implement the tests for this yet, because I don't know whether I understood properly the issue.. ",
    "pzduniak": "I assume that you guys already patched it, but I actually ran into it in my own project and the fix was quite simple - Docker uses a forked library using its original repo's name, per https://github.com/moby/moby/blob/master/vendor.conf#L148. If you correct your vendor tool to grab that fork instead, it all works fine.\nTHIS IS PLATFORM-RELATED! You won't reproduce this issue in all environments.. https://golang.github.io/dep/docs/Gopkg.toml.html#source\nMost likely should suffice in your case.. ",
    "vladiibine": "OS:\n$ lsb_release -a                                                                    (master)\nNo LSB modules are available.\nDistributor ID: Ubuntu\nDescription:    Ubuntu 16.04.4 LTS\nRelease:    16.04\nCodename:   xenial\n...then docker version - you didn't ask for it, but info about one's docker version never hurt anyone :P\n```\n$ docker version                                                                    (master)\nClient:\n Version:   17.12.1-ce\n API version:   1.35\n Go version:    go1.9.4\n Git commit:    7390fc6\n Built: Tue Feb 27 22:17:40 2018\n OS/Arch:   linux/amd64\nServer:\n Engine:\n  Version:  17.12.1-ce\n  API version:  1.35 (minimum version 1.12)\n  Go version:   go1.9.4\n  Git commit:   7390fc6\n  Built:    Tue Feb 27 22:16:13 2018\n  OS/Arch:  linux/amd64\n  Experimental: false\n```\n```\n$ cat install-compose.yml                                                           (master)\nversion: \"3\"\nservices:\n  redis:\n    image: redis:latest\n    networks:\n      - tsuru\n    volumes:\n      - redis-data:/data\nmongo:\n    image: mongo:latest\n    networks:\n      - tsuru\n    volumes:\n      - mongo-data:/data/db\n      - mongo-config:/data/configdb\nplanb:\n    image: tsuru/planb:latest\n    command: --listen :8080 --read-redis-host redis --write-redis-host redis --access-log stdout\n    ports:\n      - 80:8080\n    networks:\n      - tsuru\n    depends_on:\n      - redis\nregistry:\n    image: registry:2\n    environment:\n      - \"REGISTRY_STORAGE_FILESYSTEM_ROOTDIRECTORY=/var/lib/registry\"\n      - \"REGISTRY_HTTP_TLS_CERTIFICATE=/certs/{{CLUSTER_PRIVATE_ADDR}}:5000/registry-cert.pem\"\n      - \"REGISTRY_HTTP_TLS_KEY=/certs/{{CLUSTER_PRIVATE_ADDR}}:5000/registry-key.pem\"\n    volumes:\n      - \"/etc/docker/certs.d:/certs:ro\"\n      - registry-data:/var/lib/registry\n    ports:\n      - 5000:5000\n    networks:\n      - tsuru\ntsuru:\n    image: \"{{TSURU_API_IMAGE}}\"\n    volumes:\n      - \"/etc/docker/certs.d:/certs:ro\"\n      - \"/etc/tsuru/tsuru.conf:/etc/tsuru/tsuru.conf:ro\"\n    ports:\n      - 8080:8080\n    networks:\n      - tsuru\n    depends_on:\n      - redis\n      - mongo\n      - registry\n      - planb\n    environment:\n      - MONGODB_ADDR=mongo\n      - MONGODB_PORT=27017\n      - REDIS_ADDR=redis\n      - REDIS_PORT=6379\n      - HIPACHE_DOMAIN={{CLUSTER_ADDR}}.nip.io\n      - REGISTRY_ADDR={{CLUSTER_PRIVATE_ADDR}}\n      - REGISTRY_PORT=5000\n      - TSURU_ADDR=http://{{CLUSTER_ADDR}}\n      - TSURU_PORT=8080\nnetworks:\n  tsuru:\n    driver: overlay\n    ipam:\n      driver: default\n      config:\n        - subnet: 10.0.9.0/24\nvolumes:\n  mongo-data:\n  mongo-config:\n  redis-data:\n  registry-data:\n```\n$ cat install-config.yml                                                            (master)\ndriver:\n  name: virtualbox\ndocker-flags:\n- experimental\ncomponents:\n  install-dashboard: true\n  tsuru-image: tsuru/api:v1\n  tsuru:\n    config:\n      auth:\n        hash-cost: 4\n        token-expire-days: 2\n        user-registration: true\n      database:\n        name: tsuru\n        url: $MONGODB_ADDR:$MONGODB_PORT\n      docker:\n        auto-scale:\n          enabled: true\n          run-interval: $DOCKER_AUTOSCALE_RUN_INTERVAL\n        bs:\n          socket: /var/run/docker.sock\n        cluster:\n          mongo-database: cluster\n          mongo-url: $MONGODB_ADDR:$MONGODB_PORT\n          storage: mongodb\n        collection: docker\n        deploy-cmd: /var/lib/tsuru/deploy\n        registry: $REGISTRY_ADDR:$REGISTRY_PORT\n        repository-namespace: tsuru\n        router: hipache\n        run-cmd:\n          bin: /var/lib/tsuru/start\n          port: \"8888\"\n        tls:\n          root-path: /certs\n      host: $TSURU_ADDR:8080\n      listen: 0.0.0.0:8080\n      log:\n        disable-syslog: true\n        use-stderr: true\n      provisioner: docker\n      queue:\n        mongo-database: queuedb\n        mongo-url: $MONGODB_ADDR:$MONGODB_PORT\n      quota:\n        apps-per-user: 2\n        units-per-app: 4\n      repo-manager: none\n      routers:\n        hipache:\n          domain: $HIPACHE_DOMAIN\n          redis-server: $REDIS_ADDR:$REDIS_PORT\n          type: hipache\n      tls:\n        cert-file: /certs/cert.pem\n        key-file: /certs/key.pem\n      use-tls: false\nname: tsuru\nhosts:\n  apps:\n    size: 1\n  core:\n    size: 1\n. oh, I noticed now that the sed command would have made sense when applied to install-config.yml. However I applied it on the other file, as the docs say.. Update: tried installing tsuru after running the sed command on install-config.yml - same error.. Another update:\nWhile trying to install kubernetes locally \"somehow\", I tried installing minikube and first and going a different install route.\nI had a problem with networking there too, and ran into this issue:\nhttps://github.com/kubernetes/minikube/issues/1224\nThe highly liked comment there seemed to help. ifconfig vboxnet0 up seemed to help on that install.\nI ran that, and though ultimately my problem wasn't solved, I at least got rid of the docker error.\nHere's the new log, after running sudo ifconfig vboxnet0 up\n```\n(tmp2) 21:52]shefuto ~/personal/tsuru-shtt $ rm -rf ~/.tsuru \n(tmp2) 21:52]shefuto ~/personal/tsuru-shtt $ $GOPATH/bin/tsuru install create -c install-config.yml -e install-compose.yml\nRunning pre-install checks...\nCreating CA: /home/shefuto/.tsuru/installs/tsuru/certs/ca.pem\nCreating client certificate: /home/shefuto/.tsuru/installs/tsuru/certs/cert.pem\nRunning pre-create checks...\n(tsuru-1) Image cache directory does not exist, creating it at /home/shefuto/.tsuru/installs/tsuru/cache...\n(tsuru-1) No default Boot2Docker ISO found locally, downloading the latest release...\n(tsuru-1) Latest release for github.com/boot2docker/boot2docker is v18.03.0-ce\n(tsuru-1) Downloading /home/shefuto/.tsuru/installs/tsuru/cache/boot2docker.iso from https://github.com/boot2docker/boot2docker/releases/download/v18.03.0-ce/boot2docker.iso...\n(tsuru-1) 0%....10%....20%....30%....40%....50%....60%....70%....80%....90%....100%\nCreating machine...\n(tsuru-1) Copying /home/shefuto/.tsuru/installs/tsuru/cache/boot2docker.iso to /home/shefuto/.tsuru/installs/tsuru/machines/tsuru-1/boot2docker.iso...\n(tsuru-1) Creating VirtualBox VM...\n(tsuru-1) Creating SSH key...\n(tsuru-1) Starting the VM...\n(tsuru-1) Check network to re-create if needed...\n(tsuru-1) Waiting for an IP...\nWaiting for machine to be running, this may take a few minutes...\nDetecting operating system of created instance...\nWaiting for SSH to be available...\nDetecting the provisioner...\nProvisioning with boot2docker...\nCopying certs to the local machine directory...\nCopying certs to the remote machine...\nSetting Docker configuration on the remote daemon...\nChecking connection to Docker...\nDocker is up and running!\nWaiting for SSH to be available...\nDetecting the provisioner...\nCopying certs to the local machine directory...\nCopying certs to the remote machine...\naSetting Docker configuration on the remote daemon...\nlert 0Creating registry certificate...\nUploading registry certificate...\nDeploying tsuru config...\nDeploying compose file in cluster manager....\nCreating network tsuru_tsuru\nCreating service tsuru_planb\nCreating service tsuru_registry\nCreating service tsuru_tsuru\nCreating service tsuru_redis\nCreating service tsuru_mongo\nRestarting docker in tsuru-1\nWaiting for SSH to be available...\nDetecting the provisioner...\nWaiting for Tsuru API to become responsive...\n+Opening config file: /etc/tsuru/tsuru.conf\n0Done reading config file: /etc/tsuru/tsuru.conf\n\u0001\nPassword: \u0001\nConfirm: \u0001\u0001\n\u0001 Root user successfully created.\nBootstrapping Tsuru API...adding target\nNew target tsuru -> http://192.168.99.101:8080 added to target list and defined as the current target\nlog in with default user: admin@example.com Password: \nSuccessfully logged in!\nadding pool\nError: Error bootstrapping tsuru: failed to add pool: Failed to connect to tsuru server (http://192.168.99.101:8080), it's probably down.\n(tmp2) 22:00]shefuto ~/personal/tsuru-shtt $ alert 0\n(tmp2) 22:00]shefuto ~/personal/tsuru-shtt $ tsuru app-list\n(tmp2) 22:01]shefuto ~/personal/tsuru-shtt $ tsuru app-list\nError: Failed to connect to tsuru server (http://192.168.99.101:8080), it's probably down.\n(tmp2) 22:01]shefuto ~/personal/tsuru-shtt $ tsuru app-list\n(tmp2) 22:01]shefuto ~/personal/tsuru-shtt $ tsuru app-list\nError: Failed to connect to tsuru server (http://192.168.99.101:8080), it's probably down.\n(tmp2) 22:01]shefuto ~/personal/tsuru-shtt $ tsuru app-list\n(tmp2) 22:02]shefuto ~/personal/tsuru-shtt $ tsuru app-list\nError: Failed to connect to tsuru server (http://192.168.99.101:8080), it's probably down.\n(tmp2) 22:02]shefuto ~/personal/tsuru-shtt $ tsuru app-list\n(tmp2) 22:02]shefuto ~/personal/tsuru-shtt $ tsuru app-list\nError: Failed to connect to tsuru server (http://192.168.99.101:8080), it's probably down.\n```\n. ",
    "auyer": "I am under the impression that this is configured in the Travis Web UI, not in yml the file.. ",
    "jonnyguio": "Refs #1992 . In my opinion, it's important to be as clear as possible what the context of the operation. Quota, for instance, is also a component of the app, so \"QuotaChange\" wouldn't be clear if it's about changing an user quota or an app quota. \nOn the other hand, as there are no other usage of ssh keys, I think that the User part could be left out.. true. fixed that. Checking the API code, the DELETE /1.0/pool{pool} asserts if there are no more apps in the pool to remove. If it has any, it returns FORBIDDEN (403).. I need double check the Go automatic imports. . Yes. Changing to reference UnlimitedQuota, both in app and in quota. Now to create a generic unlimited quota just copy from that struct.. I agree that should just keep one. Just thought it could be out of the scope of this PR. Since it's just changing some references without any major logic change, I'm moving forward with changing to only the one in appTypes.. I was searching for something like this! This will generate a map[string]string, right?. ",
    "ernani": "How is this being perceived? Do we have something already in the roadmap? What would be the main challenges going forward with each of these?. ",
    "aman12592": "@ggarnier I would like to contribute towards resolving the issue. If you could please provide any points on getting started would be of great help. . ",
    "juanjcsr": "Hi! I am working on this issue. Is there any preferred format for the output?\nI can return the names in a simple array like this:\n[\n   \"app-name1\",\n   \"app-name2\"\n] \nOr the output could be more complex, such as:\n[\n    {\"name\": \"app-name1\"},\n    {\"name\": \"app-name2\"}\n]\nOr, if there is another output format, I can make it happen :smile: \n. Hi @ggarnier ! I think I managed to solve this issue.  I added a new bool flag nameOnly that when it is true, returns only the name of the apps and then skips the retrieval of the unit.  \nI also added a test to check the correct use of the new flag if the resulting array has the correct format.\nHowever, I do not know how I can document this feature.  I looked around the docs but I could not find a reference to the API endpoint parameters. Do you have some inputs on where to look?. Done :) Thank you for your input!. I agree. In fact, that was my first attempt. However, since miniApp struct fields implement json decoder without  omitempty, I ended with the following JSON which I think it is not correct since it implies the App has all its fields empty.\n[{\n    \"name\": \"App1\",\n    \"pool\": \"\",\n    \"teamowner\": \"\",\n    \"plan\": {\n        \"name\": \"\",\n        \"memory\": 0,\n        \"swap\": 0,\n        \"cpushare\": 0\n    },\n    \"units\": null,\n    \"cname\": null,\n    \"ip\": \"\",\n    \"routers\": null,\n    \"lock\": null,\n    \"tags\": null\n}]\nIn order to try and test another attempt, I added omitemptyto miniApp  and ended with a result much closer to the expected solution: \n[{\"name\":\"App1\",\"plan\":{\"name\":\"\",\"memory\":0,\"swap\":0,\"cpushare\":0}}]\nHowever, I feel this is not quite right since I had to modify the whole miniApp json struct just for this issue. That is why I went with []interface{}\nI looked around but almost every solution used reflection to remove the empty struct fields on the fly which I think its an overhead... What do you think? . I think this is a way better solution. It solves the original issue while still being fast by skipping the Units part. \nI will upload my changes latter today and will also add documentation to it.. Hi! I updated the test case. It now checks for an empty units array.. Hi @andrestc, I updated my code to support a new simplified flag that returns an array of miniApp without the app.Units part.. ",
    "ianbibby": "@ggarnier, I would be happy to pick up this issue.. ",
    "tkivisik": "Should this issue be closed?. ",
    "theag3nt": "I'll have a look at this if you don't mind.. @ayr-ton Not much yet. I had some trouble setting up a full build and test environment with tsuru-bootstrap. I've read it's deprecated, but as it's still included in the documentation I expected it to mostly work. Did some small fixes, but still stuck at the dashboard install. But I think I'll let it go, and I either try the docker-compose method, or set up a VM with the installer.\nNonetheless, I still want to implement a fix, I was just a bit delayed. \ud83d\ude42. @ayr-ton The README is probably fine, I've just jumped straight to the Contribution chapter of the documentation where Vagrant with tsuru-bootstrap is still listed as an option. Maybe that part of the documentation could be improved.. @ggarnier Thanks, I've managed to setup an environment with docker-compose and minikube. It wasn't easy but now I have an application with a bound volume, so I can at least reproduce the current situation.\nI had a look in the source code for the client's app-info and volume-list commands and the server's /apps/<app> and /volumes endpoints. As I see there is currently no direct way of filtering the volume list before it's returned by the API. At a first glance, I think there are two possibilities:\n\nExtend the /volume endpoint with an app parameter (like some other endpoints) so it can return only the volumes currently bound to the specified app. I will look into this and propose a more detailed solution if this is preferred.\nFilter the list of all volumes from /volume endpoint on the client side. This is much easier I think.\n\nEither way, the app-info command will have to be extended by adding one more API call to the server (/volumes endpoint), and adding the results to the printed output. Mostly affecting AppInfo.Run(), AppInfo.Show(), app and app.String().\nWhat do you think?. Sure. I already have a version for the client side filtering, so I'll finish that against the current API. After that I'll do the API changes and update the client to use them.. ",
    "ayr-ton": "@theag3nt Any findings on this one?. @theag3nt Hmmm... maybe there's an opportunity to updated the README.md providing new getting started instructions. \\o/. ",
    "123bless": "Change. ",
    "marcopollivier": "Thank you, @andrestc . I will fix it soon.  . @andrestc Fixed =)\n\n. ",
    "vitormcruz": "I am sorry for the delay, yes, I was just following the getting started\ninstructions with a new created VM.\nOn Fri, Nov 9, 2018 at 11:29 AM Guilherme Rezende notifications@github.com\nwrote:\n\n@vitormcruz https://github.com/vitormcruz Have you tried with the last\nversion of tsuru-client?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/tsuru/tsuru/issues/2204#issuecomment-437359454, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AA9H06Ed8hnA-0wSNgiu6UliJeLYn1bIks5utYMmgaJpZM4X9Gvo\n.\n. \n",
    "yehudimikhael": "Thanks @guilhermebr.\n. @guilhermebr But this link is for installation in linux environment. Are there any for Mac? Why am I getting error with / pkg / linux_amd64 using OS X.\n\n. @guilhermebr  High Sierra . @ggarnier it's working.\nBut if you can change port 22 of tsuru_gandalf_1 then I had to disable the remote service on my mac to work.\n\nAfter you disable the os x remote service. It worked\n\n. ",
    "nettoclaudio": "I'd the same issue. Taking a look inside the VM, it seems the Tsuru API was unable to reach the MongoDB service thus it dies. I did try to reach it inside another container in the same stack and got the \"connection refused\" message.\n\npublishing ports for swarm services does not work, making the published port not accessible (\"connection refused\")\n\nThat looks like a problem on the latest version of boot2docker ISO (18.09.0). You can follow the issue at:\n- https://github.com/boot2docker/boot2docker/issues/1349\n- https://github.com/boot2docker/boot2docker/pull/1353\n- https://github.com/moby/moby/pull/38204\nUnfortunately, we've to wait for the next release of boot2docker (18.09.1).. Hi @rafaeleyng.\nI've tried to reproduce this problem on my environment but the installation works on my machine \ud83d\ude04. I mean, the problem does not happen here. I added my tsuru install-create logs below so we can compare that with yours. \nI'm testing it using:\n\nmacOS Mojave version 10.14.3\nVirtualBox Version 6.0.0 r127566 (Qt5.6.3)\nBoot2Docker version 18.09.3\nTsuru client version 1.7.0.-rc2\n\n```\n$ tsuru install-create\nRunning pre-install checks...\nCreating CA: /Users/claudio.netto/.tsuru/installs/tsuru/certs/ca.pem\nCreating client certificate: /Users/claudio.netto/.tsuru/installs/tsuru/certs/cert.pem\nRunning pre-create checks...\n(tsuru-1) Image cache directory does not exist, creating it at /Users/claudio.netto/.tsuru/installs/tsuru/cache...\n(tsuru-1) No default Boot2Docker ISO found locally, downloading the latest release...\n(tsuru-1) Latest release for github.com/boot2docker/boot2docker is v18.09.3\n(tsuru-1) Downloading /Users/claudio.netto/.tsuru/installs/tsuru/cache/boot2docker.iso from https://github.com/boot2docker/boot2docker/releases/download/v18.09.3/boot2docker.iso...\n(tsuru-1) 0%....10%....20%....30%....40%....50%....60%....70%....80%....90%....100%\nCreating machine...\n(tsuru-1) Copying /Users/claudio.netto/.tsuru/installs/tsuru/cache/boot2docker.iso to /Users/claudio.netto/.tsuru/installs/tsuru/machines/tsuru-1/boot2docker.iso...\n(tsuru-1) Creating VirtualBox VM...\n(tsuru-1) Creating SSH key...\n(tsuru-1) Starting the VM...\n(tsuru-1) Check network to re-create if needed...\n(tsuru-1) Waiting for an IP...\nWaiting for machine to be running, this may take a few minutes...\nDetecting operating system of created instance...\nWaiting for SSH to be available...\nDetecting the provisioner...\nProvisioning with boot2docker...\nCopying certs to the local machine directory...\nCopying certs to the remote machine...\nSetting Docker configuration on the remote daemon...\nChecking connection to Docker...\nDocker is up and running!\nWaiting for SSH to be available...\nDetecting the provisioner...\nCopying certs to the local machine directory...\nCopying certs to the remote machine...\nSetting Docker configuration on the remote daemon...\nCreating registry certificate...\nUploading registry certificate...\nDeploying tsuru config...\nDeploying compose file in cluster manager...\nCreating network tsuru_tsuru\nCreating service tsuru_registry\nCreating service tsuru_tsuru\nCreating service tsuru_redis\nCreating service tsuru_mongo\nCreating service tsuru_planb\nRestarting docker in tsuru-1\nWaiting for SSH to be available...\nDetecting the provisioner...\nWaiting for Tsuru API to become responsive...\n+Opening config file: /etc/tsuru/tsuru.conf\n0Done reading config file: /etc/tsuru/tsuru.conf\nOWarning: configuration didn't declare a database driver, using default driver.\n@Using \"mongodb\" database \"tsuru\" from the server \"mongo:27017\".\nPassword:\nConfirm:\n Root user successfully created.\nBootstrapping Tsuru API...adding target\nNew target tsuru -> http://192.168.99.102:8080 added to target list and defined as the current target\nlog in with default user: admin@example.com Password:\nSuccessfully logged in!\nadding pool\nPool successfully registered.\nadding node https://10.0.2.15:2376\nNode successfully registered.\nadding platform\nStep 1/1 : FROM tsuru/python\nlatest: Pulling from tsuru/python\n84ed7d2f608f: Pull complete\nbe2bf1c4a48d: Pull complete\na5bdc6303093: Pull complete\ne9055237d68d: Pull complete\n31a3c702015d: Pull complete\n4503ee978ade: Pull complete\n127904d41f30: Pull complete\n58a1ab0cd29e: Pull complete\n6bd1b1a202cc: Pull complete\nd76da29fcde2: Pull complete\nea6a555085c4: Pull complete\nDigest: sha256:52a4012756a2d5ccc4adea86310471ea572a75b6443ec324186908bd23a09467\nStatus: Downloaded newer image for tsuru/python:latest\n ---> fe9e7ccb5c3e\nSuccessfully built fe9e7ccb5c3e\nSuccessfully tagged 10.0.2.15:5000/tsuru/python:v1\nPlatform successfully added!\nadding team\nTeam \"admin\" successfully created!\nadding dashboard\nApp \"tsuru-dashboard\" has been created!\nUse app-info to check the status of the app and its units.\ndeploying dashboard\nDeploying image... ok\n---- Getting process from image ----\nlatest: Pulling from tsuru/dashboard\n84ed7d2f608f: Already exists\nbe2bf1c4a48d: Already exists\na5bdc6303093: Already exists\ne9055237d68d: Already exists\n31a3c702015d: Already exists\n4503ee978ade: Already exists\n127904d41f30: Already exists\n58a1ab0cd29e: Already exists\n6bd1b1a202cc: Already exists\nd76da29fcde2: Already exists\nea6a555085c4: Already exists\n217806b90206: Pull complete\nda58df25a166: Pull complete\n2865015c89e1: Pull complete\ne2a8e71f6997: Pull complete\n29ba446e4896: Pull complete\n3fa57371359a: Pull complete\n3c0ea03f9975: Pull complete\nDigest: sha256:c950354c4d24758fe670cad45e0b7b974eb1783cc9529b3eaafa7a1741ed481b\nStatus: Downloaded newer image for tsuru/dashboard:latest\n---- Inspecting image \"tsuru/dashboard:latest\" ----\n  ---> Process \"web\" found with commands: [\"gunicorn --access-logfile - -b 0.0.0.0:$PORT -w 2 abyss.wsgi -k gevent\"]\n---- Getting tsuru.yaml from image ----\nlatest: Pulling from tsuru/dashboard\nDigest: sha256:c950354c4d24758fe670cad45e0b7b974eb1783cc9529b3eaafa7a1741ed481b\nStatus: Image is up to date for tsuru/dashboard:latest\n---- Running build hooks ----\n ---> Running \"python manage.py migrate --noinput && python manage.py createcachetable && python manage.py collectstatic --noinput\"\nlatest: Pulling from tsuru/dashboard\nDigest: sha256:c950354c4d24758fe670cad45e0b7b974eb1783cc9529b3eaafa7a1741ed481b\nStatus: Image is up to date for tsuru/dashboard:latest\nOperations to perform:\n  Apply all migrations: contenttypes, sessions\nRunning migrations:\n  No migrations to apply.\nCache table 'tsuru_cache' already exists.\n0 static files copied to '/home/application/current/abyss/static', 204 unmodified.\n---- Pushing image \"10.0.2.15:5000/tsuru/app-tsuru-dashboard:v1\" to tsuru ----\nThe push refers to repository [10.0.2.15:5000/tsuru/app-tsuru-dashboard]\n0c1f11864af7: Pushed\n050b5588dde9: Pushed\nfcbfd7f4d088: Pushed\nb2c28a605d58: Pushed\n335098da3ad1: Pushed\na7a9df8d4c5f: Pushed\nc45d42123451: Pushed\n66778786e05e: Pushed\nf0bf53b3bc2a: Mounted from tsuru/python\n70d292b4df9f: Mounted from tsuru/python\na73cccc1a52b: Mounted from tsuru/python\n323a53597134: Mounted from tsuru/python\ne8b3fb80259b: Mounted from tsuru/python\n1eb562196a49: Mounted from tsuru/python\n873df38fd846: Mounted from tsuru/python\n2c77720cf318: Mounted from tsuru/python\n1f6b6c7dc482: Mounted from tsuru/python\nc8dbbe73b68c: Mounted from tsuru/python\n2fb7bfc6145d: Mounted from tsuru/python\nv1: digest: sha256:112d0806a098d73dd49220ddf1ffb8e5e6e3f04fff519f79ee4a0640a2e6699b size: 4298\n---- Starting 1 new unit [web: 1] ----\n ---> Started unit 67eddf7f7e [web]\n---- Binding and checking 1 new unit ----\n ---> healthcheck fail(67eddf7f7e): Get http://10.0.2.15:32768/healthcheck/: EOF. Trying again in 3s\n ---> healthcheck successful(67eddf7f7e)\n ---> Bound and checked unit 67eddf7f7e [web]\n---- Adding routes to new units ----\n ---> Added route to unit 67eddf7f7e [web]\n---- Setting router healthcheck (Path: /) ----\nOK\nApplying iptables workaround for docker 1.12...\nFailed to apply iptables rule: ssh command error:\ncommand : PATH=$PATH:/usr/sbin/:/usr/local/sbin; sudo iptables -D DOCKER-ISOLATION -i docker_gwbridge -o docker0 -j DROP\nerr     : exit status 1\noutput  : iptables: Bad rule (does a matching rule exist in that chain?).\n. Maybe it is not needed anymore?\nFailed to apply iptables rule: ssh command error:\ncommand : PATH=$PATH:/usr/sbin/:/usr/local/sbin; sudo iptables -D DOCKER-ISOLATION -i docker0 -o docker_gwbridge -j DROP\nerr     : exit status 1\noutput  : iptables: Bad rule (does a matching rule exist in that chain?).\n. Maybe it is not needed anymore?\n--- Installation Overview ---\nCore Hosts:\n+----------------+-------+---------+\n| IP             | State | Manager |\n+----------------+-------+---------+\n| 192.168.99.102 | ready | true    |\n+----------------+-------+---------+\nCore Components:\n+----------------+-------+----------+\n| Component      | Ports | Replicas |\n+----------------+-------+----------+\n| tsuru_redis    |       | 1        |\n+----------------+-------+----------+\n| tsuru_planb    | 80    | 1        |\n+----------------+-------+----------+\n| tsuru_mongo    |       | 1        |\n+----------------+-------+----------+\n| tsuru_registry | 5000  | 1        |\n+----------------+-------+----------+\n| tsuru_tsuru    | 8080  | 1        |\n+----------------+-------+----------+\nConfigured default user:\nUsername: admin@example.com\nPassword: \nApps Hosts:\n+------------------------+---------+--------+----------------------------------+\n| Address                | IaaS ID | Status | Metadata                         |\n+------------------------+---------+--------+----------------------------------+\n| https://10.0.2.15:2376 |         | ready  | LastSuccess=2019-03-14T22:59:44Z |\n|                        |         |        | pool=theonepool                  |\n+------------------------+---------+--------+----------------------------------+\nApps:\n+-----------------+------------+---------------------------------------+\n| Application     | Units      | Address                               |\n+-----------------+------------+---------------------------------------+\n| tsuru-dashboard | 1 starting | tsuru-dashboard.192.168.99.102.nip.io |\n+-----------------+------------+---------------------------------------+\n```\nI noticed in your logs that Tsuru tries to send the platform container image to 192.168.99.114 address. I think it should send it using the Registry's container address (related to 10.0.2.15 address in my logs). I can't understand why it does that. Your VM (tsuru-1) has two networks adapters? If yes, they are using NAT and Host-only adapters respectively? Can you share the ip address output from the VM?. ",
    "diaopk": "I still got the same error. I actually have 4 endpoints /resources, /resources/mongo_instance/bind, /resources/mongo_instance/bind-app and /resources/mongo_instance/bind-unit to handle post requests. The one for /resources/mongo_instance/bind-app responds the json object like I show above and the other three don't have data response. I just send back status code 201. Not sure if I am doing the right way.. @guilhermebr Sorry for the late reply. Due to the busy work and study, I am finally back here. The service has been successfully bound to the application. However, the app doesn't seem to be able to connect the mongodb service. I still have no ideas how to connect to the service. Can you give me any guidances for doing so? \nBasically what I have done is  a node.js server trying to connect to mongodb service and mogoapi from https://github.com/tsuru/mongoapi. Both have been deployed. \nFor the service, I modified the file https://github.com/tsuru/mongoapi/blob/master/service.yaml to:\nid: mongodb\nendpoint:\n  production: node-mongoapi.192.168.99.100.nip.io\nThe endpoint is my service url. Other things remain the original.\nFor the node.js app, the manifest file I used to bind the service is like this:\nid: mongodb\nusername: admin@example.com\npassword: admin123\nteam: admin\nendpoint:\n  production: http://node.192.168.99.100.nip.io\nThe db url I try to connect is the default value, which is mongodb://127.0.0.1:27017.\nThen when I tried to call the connection method in node.js app to the mongodb service, I got the connection errors from mongodb:\n2018-12-17T16:28:05Z [ web ][ 36408482d786 ]: - testconnect() err: MongoNetworkError: failed to connect to server [localhost:27017] on first connect [MongoNetworkError: connect ECONNREFUSED 127.0.0.1:27017]\nAm I missing something? Thanks!!\n. @guilhermebr I ran tsuru env-get -a myapp and I can see the there are some mongoapi related env variables. But values are invisible. How can I actually see them?. @guilhermebr I still got some points that get me confused about service binding. From the document https://docs.tsuru.io/stable/services/build.html, does the MongoDB service need to be created myself or is it already there available to use to my app?\nI actually have a server written in node.js with all required endpoints defined in it. Normally in the localhost I need to run the server and MongoDB in separated processes. I can bind the service to the app but I still don't know where the MongoDB service comes from. Never mind I am a kind of newbie\ud83d\ude25, Thanks!. ",
    "rafaeleyng": "Just tested it on 1.7.0-rc2 and the same error is still happening.. I've tried with tsuru-client 1.7.0-rc1 (with VirtualBox 6.0.0) and got:\n$ tsuru install-create\nRunning pre-install checks...\nRunning pre-create checks...\nCreating machine...\n(tsuru-1) Copying /Users/rafael.eyng/.tsuru/installs/tsuru/cache/boot2docker.iso to /Users/rafael.eyng/.tsuru/installs/tsuru/machines/tsuru-1/boot2docker.iso...\n(tsuru-1) Creating VirtualBox VM...\n(tsuru-1) Creating SSH key...\nError: failed to provision components machines: failed to provision machines: error creating machine failed to create host: Error creating machine: Error in driver during machine creation: write |1: broken pipe. My error above was unrelated. That problem was that the disk image for the machine I was trying to create (tsuru-1) already existed.. ",
    "brunoa19": "Hey @guilhermebr Using 1.6 client and trying to spin up both core and app servers in ec2. ",
    "WhittlesJr": "Nope, just tsuru install create in both versions. Excellent, thank you!. ",
    "guilhermef": "There's a scenario where timeout is 0 ?\n. ",
    "davidkroell": "What if more than one port is exposed?. Ok, I am going to add this in the docs too. "
}