{
    "andris9": "Hi, thanks for the patch but I can't accept it.\nBy the standard all lines in an e-mail message must end with \\r\\n (RFC 2821, p.2.3.7). Most clients also accept bare \\n endings but they should never create these by their own (Thunderbird, Outlook etc). So instead what the code really needs would be some kind of line end detection to be able to handle both cases (as some e-mail generators, mainly PHP scripts etc. tend to use only \\n)\n. Hi, HTML part of the body in this e-mail is inside a nested multipart message. Check inside bodyAlternate to see if the HTML body is there as everything that is not on the first level in the message is put to the bodyAlternate\n. Ok. it should not be null in any case so there's something weird going on. I don't have time to deal with it this week but I'll try to look at it next week.\n. Gracefully handle mails with quoted charset. Closed by eed76d54b14f684f562905f85607e82213600236.\n. Fixed with 9125fc75d6ab0a1f2bab83220e57e2fe7f79ce34\n. thanks! i pulled the patch\n. Don't make a plain text body from HTML if plain text body exists. Closed by 78f7c0320cf76a56ee023622c74ef7b4227e05a6.\n. thanks, pulled the changes\n. If you meant that the library should parse 8bit messages then the new version supports this\n. Hi,\nI'm not sure what you mean - should I add a config param to turn off the replace() command in line #28?\n. If you'd do that, it would be cool :)\n. Thanks, pulled it.\n. thanks!\n. Thanks, changed it with 8d651769474d3cfdd2b2aabc170913524e203883\n. Hi,\nThis doesn't seem right. decodeURIComponent is there for a reason. unescape decodes from ISO Latin character set while decodeURIComponent does the same thing for UTF-8 - that's the only difference between those two functions.\nIn the other hand the main difference between urlencoding and mime quoted printable encoding is that quoted printable uses = character instead of the percentage % character. So when we replace all = to % and back, we can use relatively speedy native functions, even when JavaScript actually doesn't support quoted printable encoding.\nFor example when we have an UTF-8 word Wei\u00df then the quoted printable string would look like Wei=c3=9f (C3 and 9F make up the UTF-8 code point for \u00df). When decoding Wei%C3%9F (the urlencoded version of the same string) with unescape we get Wei\u00c3\u009f and with  decodeURIComponent we get Wei\u00df as needed.\n. OK, now I get it - if there's a percentage sign in the text then it breaks the encoding. It really is a bug - I checked RFC2045 and it doesn't require % characters to be encoded.\nBut using unescape doesn't fix the bug - the real fix would be to replace all the % characters before decoding, something like that:\ndecodeURIComponent(qp_text.replace(/%/g,'%25').replace(/=/g,'%'));\n. Thanks!\n. Thanks for pointing this out, I wasn't aware of such behavior from postfix. Could you do a pull request for this patch? And since the correct behavior for line endings would still be using <CR+LF> not just <LF> then the regexp should rather be smth. like ...\\r?\\n\n. Supporting non-standard behaviors is fine when parsing incoming e-mails. A great share of mail composers out there generate invalid mime formatted e-mails that still needs to be somehow parsed by the receiver.\n. Any newline character sequence is now OK so this should not be an issue anymore\n. If Apple Mail is sending attachments in quoted-printable then it is no good news. Currently all non text/* content typed parts are treated as binary base64, see https://github.com/andris9/mailparser/blob/master/mailparser.js#L462\n. This should be more or less resolved with the latest update to v0.2. The only issue being that if charset is not defined for the quoted-printable attachment, utf-8 is assumed. I guess a better solution would be not messing with the encodings at all and convert the text directly to a Buffer but I need to update the quoted-printable encoder for this, currently it can only output utf-8.\n. I updated the parser so the incoming stream is converted to binary and is not decoded/encoded. There's still a small issue - all line endings will be converted to \\n event if the original file has \\r\\n. I need to investigate this, maybe \\r\\n would be a better choice.\n. Thanks!\n. Hi, which version of node.js are you using? mailparses requires node-iconv as dependency, does it compiles in your system correctly?\n. E-mail sources are usually plain 7bit ascii, so there shouldn't be a problem with this. You should take note, that line endings need to be by the standard \\r\\n, not plain \\n and also if you are not using raw smtp feed, then punctuation in the line beginnings should not be touched - this can be achieved with the following param:\nvar mp = new MailParser({fix_smtp_escapes: 0});\n. It probably would make sense if mailparser would handle it by itself. Though this is common behavior for mailparser as it doesn't support nested multipart messages - when I first created it, I kind of missed how nested multipart messages are composed and didn't include support for these. The body should still be found from bodyAlternate I think.\n. With the upgrade to v0.2 Sparrow mails should be treated corectly - inline text/* attachments will be used as text contents\n. Thanks!\n. Thanks! I think I copy-pasted the line and changed only function name but didn't check the variables :S\n. Hi, could you upload the eml file, since the copied version seems to be incomplete, probably there's some kind of character limit in github issues.\n. Hi, i never received the message. Could you create a Gist from the .eml file and link it here?\n. I can't reproduce SEGFAULT with node v0.6.11 (Debian) and v0.6.10 (MacOSX), the e-mail parses fine with the provided code and the attached file is saved to disk as ./attachments/weibo_photo.PNG Currently I can't check with older node versions.\n. Hi,\nthis is not possible, as mimelib-noiconv is good only for utf-8/latin1/ascii charsets but e-mails tend to use any kind of charsets, for example one of the most popular ones is win-1252 which can only be handled with node-iconv\n. Thanks. I reviewed the patch and noticed that the added test passes without including any of the modifications, so is the current version really broken? If I check the headers object in the test, both 'content-type' and 'subject' properties are there as they should. Could you explain a bit more what this patch is supposed to fix, or provide a better test that fails with current version but passes with the patch?\n. Perfect! Thanks!\n. Fixed with 8831c3fdd2ab744f3731c3851ec805a6816a1c4e\n. Yeah, you're absolutely right. It just occured to me some days ago that the behavior with \"References\" header can not be correct, since originally I planned it like the \"Message-Id\" header field where there's only one value, but \"References\" can include multiple. Thus the output should also not be a string but an array. Haven't had time to fix it yet but I'll look into it.\n. You can now use a 'references' property to access the reference id values as an array\nmailparser.on(\"end\", function(mail){\n    console.log(mail.references); // if references are present this is an array\n});\n. Yeah, you're right, added proper In-Reply-To support with a143aa13b7e43d84485ef6e1dc96f6400bc13bfe\nAlso added support for multiple fields - if there's more than one References or In-Reply-To field, the used values are concated into one single array.\nAbout RFCs - you can't parse an e-mail strictly following RFC rules since almost every composer breaks a rule or two. For example linebreaks are a common issue, by the specs it should always be <CR><LF> but often it's just <LF>. 8 bit values are used where they're not supposed to, attachment filenames are usually defined with the wrong property etc. A good parser needs to be extremely forgiving.\n. There is no workaround for using node-iconv as parsed e-mails can be (and are) in any imaginable charset and thus it is not possible to use mailparser in Windows.\n. yes, you're right - _encodeString was meant for headers not for content\n. Do you try to reuse the same MailParser object?\neg.\n```\nvar mailparser = new MailParser([options]);\n// handle first letter\nmailparser.write(maildata)\nmailparser.end()\n// handle second letter\nmailparser.write(maildata)\nmailparser.end()\n```\nOr are you using separate instances?\n```\n// handle first letter\nvar mailparser1 = new MailParser([options]);\nmailparser1.write(maildata)\nmailparser1.end()\n// handle second letter\nvar mailparser2 = new MailParser([options]);\nmailparser2.write(maildata)\nmailparser2.end()\n```\n. This is probably an iconv issue not mailparsers, you should try if you can install and use the iconv module yourself and any other module that depends on it\n. I have no idea what the error means. Could you run Mailparser tests to see what the result is\ngit clone https://github.com/andris9/mailparser.git\ncd mailparser\nnpm install\nnpm test\n. OK, this seems like it is actually a node-iconv issue, see https://github.com/bnoordhuis/node-iconv/issues/31 for details\nI can't do much about it so I'll close this issue here.\n. You should use attachment streaming if you have large files (streamAttachments: true) and save the files to somewhere where large chunks of data is handled better than in node - ie. to a ram disk or a real disk. This should help lower memory consumption.\n. Thanks for notifying about this, I was not aware of the project. \nI guess the best solution would be setting both \"iconv\" and \"iconv-lite\" to the optionalDependencies in the package.json file and in the script try to detect if \"iconv\" exists and if not, then fallback to \"iconv-lite\"\n. I created a simple wrapper for iconv and iconv-lite that can be installed in windows - encoding, I've already applied it to some parts of the stack (mimelib) but not yet to all. So whenever I get a chance, I'll replace all iconv dependencies with this new library. It requires some code changes as well, so I can't just replace the name in package.json\n. I replaced all occurences of Iconv modules with encoding module, so mailparser is now compatible with Windows\n. Yeah, it's a node-iconv issue, it doesn't play so well with windows yet. I've thought about replacing node-iconv with more windows friendly iconv-lite but that doesn't support transliteration and some encodings (yet).\n. You should be listening to the imap stream error event, mailparser does not emit any errors by itself.\n```\nvar imapstream = new ImapStream();\nimapstream.pipe(mailparser);\nimapstream.on(\"error\", function(err){\n    console.log(\"The stream failed for \" + err);\n});\n```\n. I can't confirm this issue, the encoded text is parsed correctly. Could you run the following commands to test it out:\ngit clone git://github.com/andris9/mailparser.git\ncd mailparser\nnpm install\nnpm test\nThen look for a test named \"gb2312 mime words\" in the script output and see if it passed or not.\n. No idea, what is causing it. The same scripts outputs the following log for me:\n```\nREMAINDER: From: 'Sender Name' sender@example.com\nTo: 'Receiver Name' receiver@example.com\nSubject: Hello world!\nHow are you today?\nLINE 1 (1): From: 'Sender Name' sender@example.com\nLINE 2 (1): To: 'Receiver Name' receiver@example.com\nLINE 3 (1): Subject: Hello world!\nLINE 4 (1): \nLINE 5 (2): How are you today?\nFrom: [ { address: 'sender@example.com', name: 'Sender Name' } ]\nSubject: Hello world!\nText body: How are you today?\n```\n. Hi, are you using windows or linux?\n. iso-2022-jp is supported by mailparser but it depends on the node-iconv module. if the module fails to install on your system, then a replacement (iconv-lite) module is used instead but that one doesn't support the iso-2022-jp. \nif you are using linux then you could try the following fix:\n- navigate to yourapp/node_modules/mailparser/node_modules/encoding\n- run \"npm install iconv@1.1.3\"\n. @mazamachi Yeah, sorry for that. I run my own applications on platforms without compilation support so I have moved away from native modules like node-iconv. You could use an older version of Mailparser though:\nnpm install mailparser@0.6.2 iconv --save\nThe older version has different api, see the docs for it here. Could you somehow narrow it down to just mailparser - currently it is not clear from the code if the problem lies in mailparser on in the unrelated IMAP module.\n. Maybe there's an error with parsing a specific e-mail or smth - if I run the provided code with my own gmail inbox, then all listed e-mails are parsed fine. There might be as well some memory issues, if the inbox listed contains too many unseen messages.\n. Could you make a npm shrinkkwrap file so I could install the same dependencies for testing\nRun in your project directory:\nnpm shrinkwrap\nCopy the contents from generated npm-shrinkwrap.json here and delete the file.\n. Strange, i tested the code on MacOSX and CentOS 6 and i didn't get any errors. Anything I sent to the inbox selected was logged to console as expected and no errors whatsoever :S\n. Ok, I'm closing this issue as I'm not able to reproduce the bug but if you find any info (maybe its platform specific etc.) then let me know\n. Hi, mailparser expects full mime encoded message as the input but you are providing just an excerpt of it. There is no header for example, the mail starts with a boundary marker instead. Load full message source from the imap instead of just body and everything should work ok.\n. Thanks for letting me know, I was not aware of such an issue. Fixed with 4a7df413c306d8d66d692c64d4f3f76d1b83c57a\n. I updated the code to keep the trailing space as well f348e3edb22b26508fe41b8ac972728cf312400f\n. No problems, it was just a small change - I somehow missed the signature exception part from the specs myself.\n. Hi, I updated the logic of how alternative contents are handled (instead of returning in an array, the values are joined), could you check if the updated version (v0.3.0) is doing what you expect.\n. Are you using attachment streaming or not?\nnew MailParser({streamAttachments: true});\n. When streaming, base64 data needs to be processed before it can be converted to 8bit - data is converted in chunks that divide by 4 (4 bytes of base64 converts into 3 bytes of 8bit data) and all non-base64 characters need to be removed from the string before the conversion (mostly whitespace).\nCurrent stream interface for mailparser that handles the conversion is not the best (no back pressuring etc) and I haven't tried to optimize it, since in node v0.10 the whole stream concept is going to be changed. So I guess, the problem with high CPU usage will stay for a bit. Currently I'd suggest you to feed the mailparser stream more slowly, so it would have enought time to clean old stuff out.\n. I don't think there is a quick solution with the current code to lower CPU usage, so I'll close this issue as wontfix.\n. Hi, this seems to be a bug, I'll look into it. You're right - instead of cid there should be contentId\n. Fixed with f0e13591b00e32702b9c1ffd15c3c81fe7644aac pushed to npm as v0.3.3 - all attachments have contentId set (either from the source or auto generated)\n. Hi, I created a test and it parsed the e-mail correctly. See the test here: https://gist.github.com/anonymous/5233144\n. Can not confirm, using this gist the e-mail parses just fine: https://gist.github.com/andris9/5243960\n. Hi, i need some more information about this. What version of node are you using and are you using Linux, Mac or Windows? Additionally I need the source of this message that was parsed, otherwise I have no idea of what went wrong. Header section would be enough, or at least the header subject line.\nIf you are using Windows, then you need to be able to compile iconv module as iconv-lite that is used as default under Windows does not support most Asian character sets. Linux and Mac should be mostly fine regarding this (you should check though if you have node_modules/mailparser/node_modules/iconv directory in your program directory)\n. In this case you probably have problems with the iconv module. Try if you can install it from source and if not, report to the node-iconv maintainer. There's nothing I can do about it.\n. Thanks!\n. I changed it so that -index is removed from the original name when checking for duplicates, so with your example the result would be\n- somename.txt\n- somename-1-1.txt\n- somename-2.txt\nAnd if a file name somename-1-1.txt already exists, it would be changed to somename-1-1-3.txt and so on\n. Actually, If you just want an unique identificator, you can create one by yourself by adding it to the attachment object. The attachment object emitted with \"attachment\" is the same that is returned with \"end\" in the attachments array.\n``` javascript\nmp.on(\"attachment\", function(attachment){\n    attachment.myUniqueID = crypto.randomBytes(20);\n    var output = fs.createWriteStream(attachment.generatedFileName);\n    attachment.stream.pipe(output);\n});\nmp.on(\"end\", function(mail){\n    mail.attachments.forEach(function(attachment){\n        console.log(attachment.myUniqueID.toString(\"hex\"));\n    });\n});\n``\n. No, there is no way of knowing the size beforehand unless buffering is used.\n. hey, wouldn't it be a better solution if you check that if the parsed body does not have html content but has attachments then you generate the missing html in your own code? the thing is that not all attachments are supposed to end up as links in the html but only the ones that are on the same nesting level in the multipart tree. so while this update might work well in your case, it might not be very suitable for others.\n. I guess you're right, I should clarify a little bit whatshowAttachmentLinks` is actually meant to do - it is supposed to mimic the behavior of some desktop clients that allow dragging and dropping attachments inside the message where these are displayed as file icons, it does not try to list every attachment but only those that are actually placed inside the rich text content by the sender.\n. Hi, could you provide an example or a test case where 'end' is fired several times?\n. Hi, the file is quite large and thus the data is not written in one chunk to the stdin but several times. On every write, another \"end\" handler is added and mailparser.end() is called. You should change your script like this instead:\njavascript\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf8');\nprocess.stdin.pipe(mailParser)\nmailParser.on('end', function(mail){\n    console.log('end has fired');\n});\n. You should create a wrapper around mailparser that process the mails one by one and returns the needed promise - mailparser itselfi is not going to have any flow control in it.\n. Listen for the headers event:\njavascript\nmailparser.on(\"headers\", function(header){\n    console.log(header.subject);\n});\n. These warnings are from the iconv module. Theres nothing I can do about it.\n. Sorry, I don't really get it. At first, you should not feed data.toString() to parser, since this breaks 8bit non-utf8 e-mails, use just data. Additionally, isn't mail-listener already using mailparser so you wouldn't have to?\n. I guess you should file an issue with mail-listener then, I really don't know how and what for mail-listener is using mailparser. I still suggest to not pass strings to mailparser but buffers if it is possible, otherwise non-utf8 8-bit messages will be handled invalidly\n. Hi, from where are you getting the input? If from SMTP then this might be a SMTP dot escape issue. To overcome this add unescapeSMTP option when creating the mailparser object.\nvar mailparser = new MailParser({unescapeSMTP: true});\n. Yes, you need to create a new parser object for every message. Addind more examples is a good idea.\n. You cant reuse mailparser, you need to create a new instace every time you need to parse a new message\n. Yeah, I have fixed this in newer libmime, see here but due to the lack of time I haven't been able to back port it to the older mimelib (see here) that the mailparser uses. \n. Well this is a complicated situation, the concatenation is there on purpose. Is the name property and content-id values something common with these e-mails? Could you also provide a sample message, so I could check how other e-mail clients are handling this situation?\n. I tested the e-mail source you sent with different modifications and it seems that gmail is not showing the attached XML file even if I remove name property and content-id. I need to dig into it a bit more, maybe different text/plain elements should be concatted only if these are found in a multipart/related subpart. Not sure yet.\n. There is not much point in turning mailparser to a readable stream as it emits different types of values (message headers, attachment headers, different attachments, different body types etc.)\n. Added with 7d1fd802be23208e6f37e3ec251694c071ff1d9a, see the docs for date field. Pushed to npm as v0.4.1\n. Attachment streaming support in mailparser is pretty bad as there is no backpressure handling whatsoever. Not using streaming is much more reliable in mailparser. I'm not even sure if and how adding backpressure support to mailparser would be possible, probably requires a lot of re-writing\n. thanks!\n. Could you provide such message that uses quoted printable encoding inside 7bit blocks?\n. Thanks, I can verify this error. I shortened the input to this failing message:\n```\nContent-Type: text/plain; charset=iso-2022-jp\nContent-Transfer-Encoding: 7bit\n[ESC]\u001b$B%^%$%1%k\u001b[ESC](B\n```\n(where [ESC] is ascii char 0x1B)\nI'll try to see what is the real reason the text is not being decoded properly. Expected output would be \u30de\u30a4\u30b1\u30eb but currently I see \\u001b$B%^%$%1%k\\u001b(B\n. Well, it seems there is nothing wrong with mailparser so I'm closing this issue. The value is not decoded to UTF-8 because the default iconv-lite used by encoding module is not able to convert it. If I install node-iconv as well then everything works fine (npm install iconv --save in the project folder).\nIs there a reason you can't use node-iconv and want to use plain javascript decoder?\n. Could you paste the entire message, otherwise i can't see if there is anything wrong with it or not.\n. do you create a new mailparser instance for every message or do you try to reuse the same?\n. Stream-wise, mailparser is managed pretty badly. It uses Stream1 type streams and does not implement proper back-pressure. I have newer stream implementations for Base64 and Quoted-Printable that use Streams2 but just replacing the old implementations with new ones would not solve anything as the data is passed to the base64 decoder without checking the back-pressure anyway and it would just pile up there. Mailparser would need a major refactoring to overcome these issues.\n. I've been planning to rewrite it for some time by now but do not have any time for it. I do not know another streaming parser.\n. If you could copy and paste the email sources that make mailparser explode, it would be a great help \u2013 if I get an actual example that throws on parsing, I could find the bug myself. Right not it is near impossible to tell if and what might be the problem.\n. ok, good to know\n. Could you try to upgrade node to v0.10.32? The version you are using has a known segfault bug.\n. Mailparser is a forgiving parser as a lot (if not most of) the e-mail messages are invalid. Some use too long lines, some fail to define the correct charset, some set unicode attachment filenames invalidly etc. So being strict only makes sense if you're building a format validator which mailparser is not.\n. Sure, published as v0.4.8\n. Thanks. The non-breaking spaces are unwanted, I get these because of my keyboard locale \u2013 I have to press Alt to get the pipe characters and next if I press the space key before I have released the Alt, I get non-breaking space instead of the regular one.\n. I don't really see what is the issue here, could you elaborate what do you expect instead of the current behavior?\n. Thats not exactly how the dates in email work. Firstly the received is known to be used loosely by transmitting servers which means that even though in theory the value can be tokenized it should be treated as human readable text. x-received is not even a standard so we cant really assume anything about the formatting.\nFor example here's a received header from a random email in my inbox:\nReceived: from mx1006.sendsmaily.info (149.154.156.6) by\n   mx1008.sendsmaily.info id hk0p9a19s3go for <andris.reinman@gmail.com>;\n   Tue, 17 Jun 2014 15:18:56 +0300 (envelope-from <bounce@mx1008.sendsmaily.info>)\nTrying to parse the date out of this fails as there's a string value where timezone name is expected.\nHow the dates are actually handled is that in addition to the message itself, the receiving server stores some metadata about the message, which includes the internaldate value \u2013 this is the time that the message was received by the server.\nHere's an example IMAP query against Gmail IMAP where I ask for the internaldate value and date header value (date is included in the envelope property)\ntag1 fetch 49 (internaldate envelope)\n* 49 FETCH (INTERNALDATE \"09-Feb-2015 00:51:32 +0000\" ENVELOPE (\"Mon, 09 Feb 2015 00:51:30 +0000\" ...)\ntag1 OK Success\nAs you can see the values are slightly different (only for few seconds but still these are different values), header date shows when the message was sent (or actually, when it was claimed to be sent as we can't verify it) and internaldate shows when the message was received. When GMail displays you the message you see the internaldate value but if you ask for the date value in IMAP (either by ENVELOPE or BODY[HEADER.FIELDS (DATE)]), you always get the value form the Date header.\nAnyway I would not change the current date handling as the date property should include the Date header value but adding a separate informational received property that includes the date from either the first received or x-received header would make sense. So if  you'd change the PR to not mix these values with actual date I'd pull it.\n. uuencode support is not in great demand, so if there isn't any substantial bugfixes in the uue module, I wouldn't upgrade at this point. In the long term it doesn't make much sense to keep supporting Node v0.8 but dropping support for such unimportant change doesn't seem right either.\n. Yeah, I guess supporting 0.8 is an overkill by now. I upgraded all dependencies to latest and pushed as v0.5.0\n. Yes, this was a bug. It occurred when the attachment was the root node itself. Fixed in v0.4.9\n. Yes, seems like an issue with node itself\n. Could you provide full headers of this message or a test case that always fails, so I could verify the issue and could check what is actually going on?\n. Could you upload the same as a downloadable file? Whatever messes up the context gets lost when using gists. Right now I see only regular spaces and if I try to parse it with mailparser, it parser just fine.\n. No, it is not possible, mailparser parses only RFC822 messages but Outlook MSG uses a proprietary OLE2 compound document format\n. This was a bug. It was not only about the final part but about mixing unencoded key*X and encoded key*X* parts for the same key. I fixed the bug and released it as v0.5.2\n. Agree, this is mail client specific and inlined text/plain seems more like something that is not an attachment and should be rendered in place. As a comparison, OSX Mail App does not treat it as an attachment.\n. rfc2047 states the following for the encoded text part:\nencoded-text = 1*<Any printable ASCII character other than \"?\"\n               or SPACE>\nthat means that there must be at least 1 character between the ? symbols, otherwise the construct is not valid mime encoded word, so if this construct is not converted then it is not a bug.\nAnyway, could you provide a working example for this behavior as I do not seem to be able to properly reproduce it myself, =?utf-8?Q??= gets converted to empty string as expected.\n. See http://emailjs.org/ for stuff that works in browser.\n. Could you provide an example email where this is an issue? Current behavior prefers charsets defined in HTML source to the charset defined in the header.\n. Just to clarify, as it can not be detected from the pasted email, is the HTML content using UTF-8 as declared in the HTML header or is it using GBK as defined in the MIME header? Without your change, mailparser would prefer UTF-8 as declared in HTML, with your change it would prefer GBK from the MIME header.\n. Ok, I think you're right. If I think of it, then MIME header defines the encoding of the container, not the contents, so it should be preferred.\n. Published to npm as v0.5.3\n. You need to split, multiple messages in single file is not supported\n. You need to generate a separate parser for every message, so you could do something like this: \njavascript\nvar mailparser = new MailParser();\nmailparser.fileName = fileName;\n...\nmailparser.on('end', function(){\n     console.log(mailparser.fileName);\n});\n. It seems to me that these test cases are more meant for mail clients to properly display messages (eg. handling winmail.dat, choosing between html/text etc.) which are not so important in the context of mailparser. There doesn't seem to be anything too complex or weird in these test cases that needs to be cehcked against. Mailparser tests against smaller details, for example handling format=flowed like this.\n. Can't confirm. Could you provide an example script that can verify this behavior? Currently it I try to parse such message with mailparser I get the following object as the attachment with proper filename:\n{\n    contentType: 'image/jpeg',\n    fileName: 'jbaefhaf.jpg',\n    transferEncoding: 'base64',\n    contentId: 'part1.06030003.02000403@emaildomain.com',\n    contentDisposition: 'inline',\n    generatedFileName: 'jbaefhaf.jpg',\n    ....\n. I can't confirm this somehow. This is the script  I used:\n``` javascript\n'use strict';\nvar util = require('util');\nvar fs = require('fs');\nvar MailParser = require('mailparser').MailParser;\nvar mailparser = new MailParser();\nvar email = fs.readFileSync('t.eml');\n// setup an event listener when the parsing finishes\nmailparser.on('end', function (mail) {\n    console.log(util.inspect(mail, false, 22));\n});\n// send the email source to the parser\nmailparser.write(email);\nmailparser.end();\n```\nAnd this is its output:\n{ html: '<div>this is base64 message</div>',\n  text: 'this is base64 message',\n  headers:\n   { 'delivered-to': 'xxx@test.com',\n     received: 'by 10.202.46.82 with SMTP id u79csp1137209oiu; Wed, 16 Mar 2016 04:40:27 -0700 (PDT)',\n     'x-received': 'by 10.28.11.69 with SMTP id 66mr3940364wml.103.1458128427617; Wed, 16 Mar 2016 04:40:27 -0700 (PDT)',\n     'return-path': '<xxx@test.com>',\n     'content-type': 'multipart/mixed; boundary=\"----------=_1458128422-32889-18\"',\n     'content-transfer-encoding': 'binary',\n     'mime-version': '1.0',\n     'x-mailer': 'MIME-tools 5.507 (Entity 5.507)',\n     from: 'XXX YYY <yyy@test.com>',\n     'message-id': '<SOME-ID@mtest.com>',\n     sender: 'XXX YYY <yyy@test.com>',\n     subject: 'Re: Some subject',\n     to: 'XXX <xxx@test.com>',\n     date: 'Wed, 16 Mar 2016 12:40:22 +0100 (CET)' },\n  subject: 'Re: Some subject',\n  messageId: 'SOME-ID@mtest.com',\n  priority: 'normal',\n  from: [ { address: 'yyy@test.com', name: 'XXX YYY' } ],\n  to: [ { address: 'xxx@test.com', name: 'XXX' } ],\n  date: Wed Mar 16 2016 13:40:22 GMT+0200 (EET),\n  receivedDate: Wed Mar 16 2016 13:40:27 GMT+0200 (EET) }\n. Nodemailer and mailparser options do not match one-on-one so you should check first what are you actually passing as the attachment. You should also check how the msg attachment is included in the parsed message - is it a \"normal\" attachment, eg. inside multipart/mixed container or a forwarded embedded message eg. message/rfc822 container because these need special treatment. You could also compre the input and output and see the differences of these two messages which ahould give a hint of what might be wrong\n. Just to clarify \u2013 is there a problem with parsing (eg. the content option is empty) or is the problem with sending (the receiver does not see the attached message)? It would help a lot to see the source of the sent message to see if and how the attachment was added.\nIf the problem is in sending, not parsing then you could try to upgrade Nodemailer to the beta version (run npm install nodemailer@beta or set the nodemailer version as \"beta\" in the package.json dependencies) and see if it helps anything\n. Could you provide an example message source that fails proper parsing so I could test it and see what is going on?\n. Ok, sorry, didn't notice it at first. I'll look into it today\n. I checked and the problem is not in the parsing but in the sending side. Firstly you would have to use the beta version of nodemailer or wait until the end of this week when the beta is released as latest. Secondly, you need to remove duplicate content-type header before sending the mail.\nThis is the code that I used:\n``` javascript\nmailparser.on('end', function (mail_object) {\n// Remove, otherwise the message ends up with 2 content-type headers that messes the output\ndelete mail_object.headers['content-type'];\n\nvar mailOptions = {\n    headers: mail_object.headers,\n    html: mail_object.html,\n    attachments: mail_object.attachments\n};\n\n...\n```\n. Sorry, didn't notice this issue before.\nTNEF is Microsoft's proprietary format. Some data can be parsed out of it but not all and thus there's not much support for TNEF outside the Microsoft-world. MimeKit is written in .net which is also part of Microsoft-world and thus has access to proper TNEF handling.\nAnyway, for now I have no plans for adding support for it. If there would be a cross-platform and reliable TNEF parser written in javaScript then I probably would add it but I don't know any such parsers.\n. This seems to be something that is only QQ specific. RFC5322 unfolding means that only the line break is removed, not the WSP character. The only mail client I tested that removed the WSP was QQ webmail, all other clients behaved according to the standard and did not remove the WSP. If I would add this feature to mailparser then it would break a lot of valid messages.\n. Thanks! \n. Sorry, released as v0.6.0 just now\n. Oops, I usually try to guard against accessing properties of values coming from untrusted sources. Expecting regexes to succeed is never a good idea\n. Fix published as v0.6.1\n. Thats a typo, thanks!\n. Thanks!\n. You should probably try to resume the streams by calling parsedMsg.attachments[key].stream.resume() or something like that, I guess that Nodemailer is waiting for input from the attachment streams but it never receives anything.\nMailparser is an ancient code in the Node.js world, I guess it was written for Node v0.5 or something and as such the streaming interface is not totally compatible with the latest Node streams.\n. Create a new mailparser instance for every message you want to parse\n. How do you try to install it? This is what I see when installing from command line:\n$ npm install mailparser\n/Users/andris/Desktop\n\u2514\u2500\u252c mailparser@0.6.1\n  \u251c\u2500\u252c encoding@0.1.12\n  \u2502 \u2514\u2500\u2500 iconv-lite@0.4.13\n  \u251c\u2500\u2500 mime@1.3.4\n  \u251c\u2500\u252c mimelib@0.2.19\n  \u2502 \u2514\u2500\u2500 addressparser@0.3.2\n  \u2514\u2500\u252c uue@3.0.0\n    \u2514\u2500\u2500 extend@3.0.0\n. Are your running this command from the mailparser folder? This is when you should see the error you have\n. Thanks, this is a bug. Mailparser is quite old, I have fixed this issue in my other mail modules (see this function for example), I try to backport it whenever I have time\n. Could you provide a minimal test case example script to verify this? I can't do much with the description only\n. Can you provide such example message as well that has duplicate contents?\n. You should check whats exactly the data that you write to Mailparser. Are you sure that you do not get the html content twice from the message 'body' event?\n. How did you get the file, did you copy and paste it or did you open the eml file with an editor before you parsed it with Mailparser? Mailparser should be able to handle gbk charset but if you touch that file with an editor, it probably breaks the original characters and converts these to something else\n. Could you also add an unit test for this case?. I would need an example rfc822 message that is garbled up by mailparser like this.. The email subject is composed invalidly, it uses a base64 string that is split between a codepoint sequence. Parsing works in the IMAP parseHeader because the imap module concatenates the base64 chunks before decoding. This behavior is not allowed by the standards but it happens a lot, so mail handlers usually are able to process these values.\nActually I have fixed this in my other email libraries that handle encoded-words like the imap module but I have not fixed it in Mailparser which is quite old. I haven't had time to upgrade it to use the newer mime handling functions yet.\n\nThis is the updated and working method: decodeWords() in libmime\nThis is the method that is used by Mailparser and does not handle invalid base64 sequences: decodeMimeWords() in mimelib.\n\nFor now I don't know when I have time to upgrade Mailparser to the newer mime functions.. Thanks for pointing out. This was a bug in code, not in README. Fixed it and published as v2.0.1.. Spread operator is supported by Node.js v6+ which is the current LTS version.. Lambda added support for Node v6 a week or two ago. Current behavior is not a bug as format=flowed should be used without any transfer encoding applied. I think most MUAs beside Thunderbird have given up format=flowed a long ago as it is quite ambiguous, you never know how the recipient handles it.. Yeah, I guess, it would be time to start assuming utf-8 as the default. The change affects some automated tests though that are failing now. Could you try to fix the tests as well?. see v2.2.0. Now that I look at that stack trace it seems you are using some older version of Mailparser as these methods do not exist anymore. Coult you try to upgrade Mailparser and try again?. Mailparser is licensed under 1.1 or later which also covers 1.2\nI\u2019m not interested using a completely free license, I used MIT mostly in the past and all I got from it was huge amount of free help requests and about $50 in donations over a 5 year period.. @spectejb  By \"completely free\" I mean \"almost free of any obligations\" (and \"almost\" as there are still some obligations in MIT/BSD licenses even though these are minor ones) compared to EUPL that is more like GPL or even AGPL.. The information is actually all there, so I changed the master branch to include headerLines in the response, in addition to headers. It's an array of all header lines, where line is a 'binary' encoded string.\n$ node examples/simple-async.js\n{ attachments: [],\n  headers:\n   Map {\n     'from' => { value: [ { address: 'andris@kreata.ee', name: '' } ],\n     html:\n      '<span class=\"mp_address_group\"><a href=\"mailto:andris@kreata.ee\" class=\"mp_address_email\">andris@kreata.ee</a></span>',\n     text: 'andris@kreata.ee' },\n     'to' => { value: [ { address: 'andris.reinman@gmail.com', name: '' } ],\n     html:\n      '<span class=\"mp_address_group\"><a href=\"mailto:andris.reinman@gmail.com\" class=\"mp_address_email\">andris.reinman@gmail.com</a></span>',\n     text: 'andris.reinman@gmail.com' },\n     'subject' => 'test',\n     'date' => 2017-01-08T18:37:44.000Z },\n  headerLines:\n   [ { key: 'from', line: 'From: andris@kreata.ee' },\n     { key: 'to', line: 'To: andris.reinman@gmail.com' },\n     { key: 'subject', line: 'Subject: test' },\n     { key: 'date', line: 'Date: Sun, 8 Jan 2017 20:37:44 +0200' } ],\n.... I pushed the change to npm as v2.3.4. And remember - this is \"binary\" (8bit) encoding. If you want to convert it to unicode then do something like this:\nvar unicodeStr = Buffer.from(mail.headerLines[0].line, 'binary').toString();. Seems to be a bug in the parser, content is processed but callback is never triggered. Not sure when I have time to look at it. Thanks! Published new version of mailparser with the fixed mailsplit dependency as v2.4.1. Hey, thanks, there seem to be some conflicts so I can't merge, could you resolve these?. Thanks!. Could you provide a full message source file for debugging this issue?. Sounds reasonable as I have dropped using linkify in my own projects exactly for the same reason - autogenerated emails (cron outputs etc) can have extremely long plaintext parts and linkifying these takes forever.. Added option to disable linkify (skipTextLinks) and published mailparser as v2.4.2 \nhaven't updated the docs yet but you can see available options here:\nhttps://github.com/nodemailer/mailparser/blob/master/examples/simple-options.js. btw the skipTextLinks is for links only but there's also skipTextToHtml if you want to skip generating HTML from plain text entirely. Thanks! I noticed that the issue was created in your earlier PR here. Do you happen to have a testcase for such an email with base64 encoded flowed content?. I guess it is ok to convert enclosing urlencoded chars to correct form. Was the entire string url encoded? Eg %40 instead of @ or only the start and ending?. Is the numbering scheme also compatible with RFC3501 MIME parts or is the similarity unintentional?. That\u2019s how streams in nodejs work. If you do not read from the stream, it never ends.. ",
    "saschagehlich": "No, this is what bodyAlternate looks like with another mail (which is pretty much the same as I posted):\n[{\n    \"contentType\": \"multipart/related\",\n    \"data\": {\n        \"id\": \"1290628108340-2\",\n        \"body\": null\n    }\n}]\n. ",
    "nail": "Hello,\nI second that =)\nThanks for your module!\nRenaud\n. ",
    "O-Zone": "The same fix as made in eed76d5 is needed in mailparser.js function DataStore after line 442 where body headers charset are set.\nThanks for an awesome module! :-)\n. ",
    "sreuter": "It doesn't send emails at all... does it? :-)\n. I'm correcting this behaviour in my code now just before I pass the input to mailparser. If  is the correct behaviour (haven't looked this up myself), we shouldn't fix it here. Instead just making a note in the README.md should be fine . Opinions?\n. ",
    "dready92": "yes it sends emails , but accentuated chars are badly displayed\n. ",
    "baudehlo": "Yep, exactly that. Though also for my needs I'm already maintaining MAIL FROM and RCPT TOs, so I was thinking the API should be more like this:\nmp = new MailParser(\n    { \n      // all params optional\n      rcpt_to: ['to1@example.com', 'to2@example.com'],\n      mail_from: 'from@example.com',\n      fixup_smtp_escapes: 0 // defaults to 1\n    }\n  );\nWant me to fix that and send you a pull request (that also supports the old API, obviously)?\n. ",
    "aliasaria": "can i email you a sample email that is crashing for me?\n. try this code:\nnon_uri = \"100%\";\nconsole.log(decodeURIComponent(non_uri));\nin node.js to see the issue i am having. this link seems to have more info;\nhttp://xkr.us/articles/javascript/encode-compare/\n. ",
    "heroic": "I am using 0.4.12, and node-iconv compiled fine.\n. Hi, it seems iconv was not working ok, a reinstall got it up n running. On another note, if there a difference when I send data via redis, instead of a text file? Any specific requirement in terms of encoding etc?\n. ",
    "vgrichina": "Actually if I don't mistake the \"body\" event wasn't emitted at all. Should it be fixed to give text in bodyAlternate or bodyText?\n. ",
    "digitalrinaldo": "Copy and paste error with mail.txt\n. ",
    "dongyuwei": "var console = require('console'),\nfs          = require(\"fs\"),\nMailParser  = require(\"mailparser\").MailParser,\ndata = fs.readFileSync('./ipad-mail.eml','utf-8');\nconsole.log(data)\nvar mailparser  = new MailParser({\n    streamAttachments : true\n});\nvar path;\nmailparser.on(\"attachment\", function(attachment){\n    console.log(attachment);\n    if(attachment && attachment.fileName && /(.GIF|.JPEG|.JPG|.PNG)$/.test(attachment.fileName.toUpperCase())){\n        path = process.cwd() + \"/attachments/\" + \"weibo_\" + attachment.fileName;\n        attachment.stream.pipe(fs.createWriteStream(path));\n    }\n});\nmailparser.on(\"end\", function(mail){ \n});\nmailparser.write(data);\nmailparser.end();\nmailparser = null;\n//node -v\n//v0.6.2\n. see atachement.\n3ks.\nOn Sat, Feb 18, 2012 at 11:20 PM, Andris Reinman <\nreply@reply.github.com\n\nwrote:\nHi, could you upload the eml file, since the copied version seems to be\nincomplete, probably there's some kind of character limit in github issues.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/andris9/mailparser/issues/28#issuecomment-4034745\n\nReturn-Path: newdongyuwei@gmail.com\nReceived: from 192.168.0.100\n        by mx.google.com with ESMTPS id h9sm19556644ibh.11.2012.02.18.04.59.23\n        (version=TLSv1/SSLv3 cipher=OTHER);\n        Sat, 18 Feb 2012 04:59:27 -0800 (PST)\nSubject: Craigslist deploys nodejs based smtp server --haraka\nFrom: newdongyuwei newdongyuwei@gmail.com\nContent-Type: multipart/mixed; boundary=Apple-Mail-89C7B333-ABDC-4E03-8354-F584020EA7EE\nMessage-Id: 67963999-5260-4C5F-93D5-395D61EDE5B2@gmail.com\nDate: Sat, 18 Feb 2012 20:59:19 +0800\nTo: t@session.im\nContent-Transfer-Encoding: 7bit\nMime-Version: 1.0 (1.0)\nX-Mailer: iPad Mail (9A405)\n--Apple-Mail-89C7B333-ABDC-4E03-8354-F584020EA7EE\nContent-Transfer-Encoding: 7bit\nContent-Type: text/plain;\n    charset=us-ascii\n--Apple-Mail-89C7B333-ABDC-4E03-8354-F584020EA7EE\nContent-Disposition: inline;\n    filename=photo.PNG\nContent-Type: image/png;\n    name=photo.PNG\nContent-Transfer-Encoding: base64\n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\n13rgNgXLc6tWTTW/2z+446xcuUa/5ANBsGbNavGSQwGCZRk++ggQYOHHjhkOfAEIswior3XrZvHy\n+jvhNEZYnzFhwhTDdJ26AmXN6um/vQy4WMHCjwXduC7gx28P/ljiesIXpf76a7leD9ZsgFM77OUF\n2oe/PdZXoP+4drBmATMpVsCsSL16tWTgwJ8ESm2qVCmVXaj1WuU7bRNyHcTEFFF3MSitcJ1ymsVx\nqoPnSIAESIAESOB6IJDCWISvfLvwemhxhLUxNvaSEUxPhL1VsIxbLg++lcMXHi4+WIgJlxd7wHDD\nYu5PCLente9DqMRsAAKs0FAKsLjXX4D7ECzXdkssFoQ2b97YK8A75XXKB/ccWP3tZSEv3G8slyWr\nLPQP1mSrrdZ5f+nt8U77mEmAspOYgJkDtDuhwWmM3PplL9/tukA6X5ZghWsBYzlr1jx16bLcipza\nYa8LC4WPHTsuENoTG7AAGMqafRwD1ZvYuqx8TteNFWffoh0Yfwr/dircJwESIAESiAYCiZNsoqHn\n13kf/An/6BbcKyD4+wr/iIMQnVDhH/nsArVTuUhjD3ZrL85DUMQnSy3rvT2tfd83H+LQH6dgFxqt\nePTP3lbrPLZO6e3xTvuJFf5RVmKEf+RzGiO3fiGPFdyuC6TxZQlXMHztCDM9mDGxhH+kdWoHzlsB\nZTl9itOKD2YLxcN3XALVG0y5bml86/OXFu2g8O+PDs+TAAmQAAlczwQ4AxDi6F2rGYAQm83sJEAC\nJEACJEACJEACyZSAfx+OZAqE3SYBEiABEiABEiABEiCBaCZABSCaR5d9IwESIAESIAESIAESIAEf\nAlQAfIDwkARIgARIgARIgARIgASimQAVgGgeXfaNBEiABEiABEiABEiABHwIUAHwAcJDEiABEiAB\nEiABEiABEohmAlQAonl02TcSIAESIAESIAESIAES8CFABcAHCA9JgARIgARIgARIgARIIJoJUAGI\n5tFl30iABEiABEiABEiABEjAhwAVAB8gPCQBEiABEiABEiABEiCBaCZABSCaR5d9IwESIAESIAES\nIAESIAEfAlQAfIDwkARIgARIgARIgARIgASimQAVgGgeXfaNBEiABEiABEiABEiABHwIUAHwAcJD\nEiABEiABEiABEiABEohmAlQAonl02TcSIAESIAESIAESIAES8CFABcAHCA9JgARIgARIgARIgARI\n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\nwCLBLQmQAAmQAAmQAAmQ\n. I mailed it to you,3ks.\n. here it is:\nhttp://mail2http.googlecode.com/hg/test/ipad-mail.eml\n. I test this under ubuntu10.04.\nnode -v\nv0.6.2\nI'll try other version node. thank you.\n. good idea!\nBut this depend on npm, if npm changed,then we got bugs.\n. ",
    "skabbes": "Sorry about the buggy test, I didn't realize that your code was using process.nextTick, so it was actually buffering all the message before sending it out.  I added an updated test which fails on the current code, and passes with the new code.\n. ",
    "deepwell": "Fantastic, thanks!\n. I have verified that your unit test works.\nSo I removed and re-installed mailparser with the following and it now parses successfully:\n\u251c\u2500\u252c mailparser@0.2.28\n\u2502 \u251c\u2500\u252c encoding@0.1.4\n\u2502 \u2502 \u251c\u2500\u2500 iconv@1.2.3\n\u2502 \u2502 \u2514\u2500\u2500 iconv-lite@0.2.5\n\u2502 \u2514\u2500\u252c mimelib@0.2.6\n\u2502   \u2514\u2500\u2500 addressparser@0.1.2\nFor your reference these are the mailparser deps where it did not parse properly:\n\u251c\u2500\u252c mailparser@0.2.28\n\u2502 \u251c\u2500\u252c encoding@0.1.4\n\u2502 \u2502 \u251c\u2500\u2500 iconv@1.2.3\n\u2502 \u2502 \u2514\u2500\u2500 iconv-lite@0.2.5\n\u2502 \u2514\u2500\u252c mimelib@0.2.5\n\u2502   \u2514\u2500\u2500 addressparser@0.1.2\nThanks, looks like your fix to mimelib fixed it.\n. Raw email file exhibiting this problem: https://gist.github.com/deepwell/5043324\n. That's exactly what I expect, verified as fixed. Thanks!\n. Looks like it bumps the minimum node.js version to 0.10, not sure if you're okay with that.\n. I forgot to mention I'd really like this update because it fixes a crash for me on mail import. I've seen this a few times now and would like this fixed.\nHere's the node.js crash output:\ncrypto.js:240\n  this._binding.update(data, encoding);\n                ^\nTypeError: Not a string or buffer\n    at Hash.update (crypto.js:240:17)\n    at MailParser._finalizeContents (/Users/deepwell/ws/lib/node_modules/mailparser/lib/mailparser.js:902:40)\n    at MailParser._processStateBody (/Users/deepwell/ws/lib/node_modules/mailparser/lib/mailparser.js:389:26)\n    at MailParser._process (/Users/deepwell/ws/lib/node_modules/mailparser/lib/mailparser.js:233:22)\n    at processImmediate [as _immediateCallback] (timers.js:345:15)\nThe options I see are:\n1) Wait until you're comfortable merging this into mailparser\n2) Use my forked version of mailparser with this patch applied\nWhat do you recommend?\n. Thanks!\n. ",
    "abhishiv": "Thanks a lot for the quick fix. Just FYI, I have been going though rfc5322 and seems like in-reply-to behaves similarly to reference - \"one or more unique message identifiers\".\n. ",
    "jmls": "bummer. thanks for the quick response.\nJulian\nOn 11 May 2012 13:53, Andris Reinman\nreply@reply.github.com\nwrote:\n\nThere is no workaround for using node-iconv as parsed e-mails can be (and are) in any imaginable charset and thus it is not possible to use mailparser in Windows.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/andris9/mailparser/issues/33#issuecomment-5649844\n\n\nJulian Lyndon-Smith\nIT Director,\ndot.r\nhttp://www.dotr.com\n\"The bitterness of poor quality remains long after the sweetness of\nlow price is forgotten\u201d\nFollow dot.r on http://twitter.com/DotRlimited\n. ",
    "honza": "When I opened the bug I was reusing the same parser object. Later I wrote a function that creates its own instance of the parser which works fine. Let me know what I can do to help diagnose better (if you think this is a bug). Thanks\n. ",
    "s2young": "Same error in the test:\n\u2714 General tests - Many chunks\n\u2714 General tests - Many chunks - split line endings\n\u2714 General tests - Headers only\nnode: /root/.node-gyp/0.6.18/src/node_object_wrap.h:62: void node::ObjectWrap::Wrap(v8::Handlev8::Object): Assertion `handle->InternalFieldCount() > 0' failed.\n. Indeed. Sorry to trouble you and thanks for the help.\n. ",
    "mrneil": "I can answer my own question: I was doing something wrong.\nThe reason node stopped running is because it ran out of memory while parsing the message. I was logging on to the IMAP server to retrieve the attachment, but not logging off when done.\nThanks for a great piece of software!\n. ",
    "mscdex": "This is a bug in node-iconv. It seems that addon's Windows support is broken, you should file an issue about it.\n. ",
    "denisnazarov": "I was using an outdated version of npm, apologies. \n. ",
    "wiktor-k": "Is this issue really resolved? I'm parsing a format=flowed quoted-printable message and it seems like adding format=flowed disables un-quoting.\nExample message (the same as above but minimized):\n```\nSubject: Re: Why hard wrap at 72 in lists\nMessage-ID: f068f49d-7185-a49b-6404-8bbde5da2e97@metacode.biz\nDate: Tue, 22 Jan 2019 11:48:21 +0100\nMIME-Version: 1.0\nIn-Reply-To: 372c8adf-d0ba-0cda-e56b-9538db2e99da@interia.pl\nContent-Type: text/plain; charset=utf-8; format=flowed\nContent-Language: en-US\nContent-Transfer-Encoding: quoted-printable\n\nThe format=3Dflowed RFC supports having lines that are explicitly meant\nnot to be wrapped (they call them \"fixed lines\") but looks like\nmany format=3Dflowed MUAs don't give you a way to write such lines\nas you compose the email...\n\nFastMail doesn't want to implement format=3Dflowed as it's extra work and=\n=20\nthey want to focus on HTML mail (as evidenced by \"HTML has mostly won\"=20\nin their post).\n```\nI'm parsing it using the following code:\njs\nconst simpleParser = require('mailparser').simpleParser;\nconst fs = require('fs');\nsimpleParser(fs.readFileSync('mail.eml')).then(parsed => console.log(parsed.text));\nAnd it prints:\n```\n\nThe format=3Dflowed RFC supports having lines that are explicitly meant> not to be wrapped (they call them \"fixed lines\") but looks like\nmany format=3Dflowed MUAs don't give you a way to write such lines\nas you compose the email...\n\nFastMail doesn't want to implement format=3Dflowed as it's extra work and=\n=20\nthey want to focus on HTML mail (as evidenced by \"HTML has mostly won\"=20\nin their post).\n```\nIt's not un-quoted.. Are you using await inside an async function? For me the code works well (assuming source is a string or buffer or stream...). ",
    "chulgil": "yes i use linux system\n. Thanks, I was able to resolve well\n. ",
    "mazamachi": "I faced the same issue when parsing a mail encoded with iso-2022-jp.\nI installed iconv as @andris9 says, but didn't fix the problem.\nI found iconv has been removed from optional dependency. \nCurrently is there any way to decode iso-2022-jp mail?. ",
    "simontabor": "Worked perfectly before adding in mailparser, it doesn't seem to crash while getting a single plain text email (most of the time) but otherwise crashes half way through processing by the looks of it\n. Doesn't seem to be - inbox of ~1-5 message will still crash, sending new emails and trying to parse etc etc still causes a crash. I tried to look at memory issues but I don't think theres any issue with that, unless it's being force limited to something.\nCould be a dependency?\n. Everything IMAP/mail is now wrapped under a listener thing, but here is the shrinkwrap:\n``` json\n{\n  \"name\": \"test\",\n  \"version\": \"0.0.1\",\n  \"dependencies\": {\n    \"node-imap-listener\": {\n      \"version\": \"0.0.1\",\n      \"from\": \"git://github.com/simontabor/node-imap-listener.git\",\n      \"dependencies\": {\n        \"imap\": {\n          \"version\": \"0.6.1\"\n        },\n        \"mailparser\": {\n          \"version\": \"0.2.31\",\n          \"dependencies\": {\n            \"mimelib\": {\n              \"version\": \"0.2.7\",\n              \"dependencies\": {\n                \"addressparser\": {\n                  \"version\": \"0.1.3\"\n                }\n              }\n            },\n            \"encoding\": {\n              \"version\": \"0.1.5\",\n              \"dependencies\": {\n                \"iconv-lite\": {\n                  \"version\": \"0.2.6\"\n                }\n              }\n            },\n            \"mime\": {\n              \"version\": \"1.2.7\"\n            },\n            \"iconv\": {\n              \"version\": \"1.2.4\"\n            }\n          }\n        }\n      }\n    }\n  }\n}\n```\nThe code I'm now using:\n``` javascript\nvar MailListener = require('node-imap-listener');\nmodule.exports = function(usr,pw) {\n    var ml = new MailListener({\n        username: usr,\n        password: pw,\n        host: 'imap.gmail.com',\n        port: 993,\n        secure: true\n    });\n    ml.start();\n    ml.on('error',function(err) {\n        console.log(err);\n    });\n    ml.on('message',function(mail) {\n        console.log(mail);\n    });\n};\n```\nStill crashing randomly, just as before.\nCheers :)\n. I'll try a completely fresh install, I'm assuming it's iconv not being installed properly or something.\n. ",
    "spruce": "javascript\nLINE 1 (1): --e89a8f22bc2950ef0d04d32fe400\nLINE 2 (1): Content-Type: text/plain; charset=windows-1252\nLINE 3 (1): Content-Transfer-Encoding: quoted-printable\nLINE 4 (1): \nLINE 5 (2): Chat history is attached as =93WhatsApp Chat with A Name.txt=94\nLINE 6 (2): file to this email.\nLINE 7 (2): \nLINE 8 (2): --e89a8f22bc2950ef0d04d32fe400\nLINE 9 (2): Content-Type: text/plain; charset=UTF-8; name=\"WhatsApp Chat with A Name.txt\"\nLINE 10 (2): Content-Disposition: attachment; \nLINE 11 (2):    filename=\"WhatsApp Chat with A Name.txt\"\nLINE 12 (2): Content-Transfer-Encoding: base64\nLINE 13 (2): X-Attachment-Id: ebf4b800dd5455b1_0.1\nLINE 14 (2): \nLINE 15 (2): 77u/M\nThis outputs this:\njavascript\n{ text: 'Chat history is attached as \u201cWhatsApp Chat with A Name.txt\u201d\\nfile to this email.\\n\\n--\ne89a8f22bc2950ef0d04d32fe400\\nContent-Type: text/plain; charset=UTF-8; name=\"WhatsApp Chat with A \nName.txt\"\\nContent-Disposition: attachment; \\n\\tfilename=\"WhatsApp Chat with A Name.txt\"\\nContent-\nTransfer-Encoding: base64\\nX-Attachment-Id: ebf4b800dd5455b1_0.1\\n\\n77u/MTguMTEu ...\n... \n... WxtIGFuIHVuZA0NCg=--e89a8f22bc2950ef0d04d32fe400--\\n',\n  headers: \n   { '--e89a8f22bc2950ef0d04d32fe400': '',\n     'content-type': 'text/plain; charset=windows-1252',\n     'content-transfer-encoding': 'quoted-printable' },\n  priority: 'normal' }\n(no linefeeds)\nI don't how what's going wrong. (I thought it would be good to have a bit extra info)\n. ",
    "igstan": "Thank you for working on this. I was wondering, can't the trailing space be kept there in the final text property of the email object? If that space is trimmed I can't parse for email signatures and take actions on it, e.g. display the signature in a different HTML element with some particular CSS. On replying to some email, the same. Thunderbird for example strips email signatures from quotes when replying.\n. Thanks! I appreciate your quick response on this issue.\n. ",
    "pravincar": "Yeah I am streaming attachments. I'm wondering whether creating new Buffer objects  on each data event might be a problem.\n    var buffer = new Buffer(this.current.substr(0, this.current.length - this.current.length % 4),\"base64\");\nDo you also have high CPU utilization on parsing large files?\n. ",
    "Reggino": "Fix confirmed. Thanks a lot, great work!\n. @asbjornenge see https://github.com/andris9/mailparser/pull/62\n. Hmm okay, i get that! Thanks for your reply\nIs it an idea that the documentation is updated, stating that the showAttachmentLinks option is ignored by design when there is no HTML part in the e-mail?\n. ",
    "dontforget": "Hi!\nYes, that worked well, thanks.\nBut  I have problem with this type email. Mail parser doesn't return any text or html for it! \n```\nReceived: from 192.168.0.120 by ru-board.com for razuha@mail.com; Mon, 25 Mar 2013 16:28:28 -0500\nReceived: (from forum@localhost)\n    by ru-board.com (8.14.2/8.14.2/Submit) id r2PLSPju002170;\n    Mon, 25 Mar 2013 16:28:25 -0500\nDate: Mon, 25 Mar 2013 16:28:25 -0500\nMessage-Id: 201303252128.r2PLSPju002170@ru-board.com\nTo: razuha@mail.com\nReply-to: Ru-Board forum@mail.ru-board.com\nFrom: Ru-Board forum@mail.ru-board.com\nContent-Type: text/plain; charset=Windows-1251\nX-Mailer: RU.Board mailer (for any questions contact with support team)\nSubject: \u0421\u043f\u0430\u0441\u0438\u0431\u043e \u0437\u0430 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044e \u0432 \u041a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440\u043d\u044b\u0439 \u0444\u043e\u0440\u0443\u043c Ru.Board\nX-Greylist: Sender IP whitelisted, not delayed by milter-greylist-4.0 (ru-board.com [127.0.0.1]); Mon, 25 Mar 2013 16:28:32 -0500 (CDT)\n\u041a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440\u043d\u044b\u0439 \u0444\u043e\u0440\u0443\u043c Ru.Board\nhttp://forum.ru-board.com/board.cgi\n\u0412\u043d\u0438\u043c\u0430\u043d\u0438\u0435! \u042d\u0442\u043e \u043f\u0438\u0441\u044c\u043c\u043e \u0441\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043e \u0440\u043e\u0431\u043e\u0442\u043e\u043c, \u043d\u0430 \u043d\u0435\u0433\u043e \u043e\u0442\u0432\u0435\u0447\u0430\u0442\u044c \u043d\u0435 \u043d\u0430\u0434\u043e. \u0412\u0430\u0448\u0435 \u0438\u043c\u044f \u0438 \u043f\u0430\u0440\u043e\u043b\u044c \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u044b \u043d\u0438\u0436\u0435. \u0423\u0434\u0430\u0447\u043d\u043e\u0433\u043e \u0412\u0430\u043c \u043f\u043e\u0441\u0442\u0438\u043d\u0433\u0430 \u0432 \u043d\u0430\u0448\u0435\u0439 \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u0438!\n\u0418\u043c\u044f:  razuha\n\u041f\u0430\u0440\u043e\u043b\u044c:  m3Stys\n\u0418\u043c\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0438 \u043f\u0430\u0440\u043e\u043b\u044c \u0447\u0443\u0441\u0442\u0432\u0438\u0442\u0435\u043b\u044c\u043d\u044b \u043a \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0443.\n\u041f\u043e\u0436\u0430\u043b\u0443\u0439\u0441\u0442\u0430 \u043e\u0431\u0440\u0430\u0442\u0438\u0442\u0435 \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435, \u0447\u0442\u043e \u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0438\u0437\u043c\u0435\u043d\u044f\u0442\u044c \u0432\u0430\u0448 \u043f\u0430\u0440\u043e\u043b\u044c \u0432 \u043b\u044e\u0431\u043e\u0435 \u0432\u0440\u0435\u043c\u044f\n\u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u0443\u044f \u0432\u0430\u0448 \u041f\u0440\u043e\u0444\u0438\u043b\u044c. \u0415\u0441\u043b\u0438 \u0412\u044b \u0438\u0437\u043c\u0435\u043d\u044f\u0435\u0442\u0435 \u0432\u0430\u0448 \u0430\u0434\u0440\u0435\u0441 \u044d\u043b\u0435\u043a\u0442\u0440\u043e\u043d\u043d\u043e\u0439 \u043f\u043e\u0447\u0442\u044b,\n\u043d\u043e\u0432\u044b\u0439 \u043f\u0430\u0440\u043e\u043b\u044c \u0431\u0443\u0434\u0435\u0442 \u043f\u043e\u0441\u043b\u0430\u043d \u0412\u0430\u043c.\n```\nThanks again\n. ",
    "llinzzi": "On my mac everything gos well,but on CentOS 6.2 not ok.\n. Ok,Thanks.\n. ",
    "artoale": "Thanks to you for this great module! :)\n. This is probably not necessary, I put it here to be consistent with inReplyTo and References\n. ",
    "svmehta": "I tested it out and it works in the exact ordering I provided, but if I switch things around and call _generateFileName in the following order:\nsomename-1.txt\nsomename.txt\nsomename.txt\nthe resulting output would be:\nsomename-1.txt\nsomename-1.txt\nsomename-2.txt\nAgain leading to the duplicate... \nWould we be better off just giving each file some random hash (while ensuring no collisions just to be safe) that has nothing to do with the original name? The generated filename is mostly important for me to be able to uniquely join the attachment stream on end event to the correct attachment object.\n. ",
    "przemyslawpluta": "Thanks Andris.\n. Thanks.\n. ",
    "asbjornenge": "I'm also having this issue on v0.4.8. @Reggino was that fix ever merged?\n. @Reggino ah! Thanks :+1: \n. ",
    "sgabriel": "You can find my testcase in https://gist.github.com/sgabriel/5856504\n. ",
    "polarity": "I have the same need. I basically have an array of emails and want to process them. After all emails processed i need a callback/promise.\n. ",
    "sh4n3d4v15": "Hi, sorry, I'm not being very clear. I have just cloned the mail-listener project which, as you rightly say, uses mailparser like this:\njavascript\nmsg.on(\"data\", function(data) { // msg object is passed on.message from the imap fetch object\n //  console.log(data.toString()) running this line, I can output the data from the email, unparsed\n  return parser.write(data.toString()); // taking your advise, I have tried passing only data but still no attachment parsed\n});\nI'm realising that this could be the implementation of mail-listener and I will raise an issue with them, but it seems like it is just the parsing that is not working. I can log the mail, but not the attachments:\n``` javascript\nmailListener.on(\"mail:parsed\", function(mail){\n  console.log( mail )\n  // do something with mail object including attachments\n  console.log(\"emailParsed\", mail.attachments);\n  // mail processing code goes here\n});\n```\nI hope this makes it a bit clearer, this is a fantastic project and would be a life saver if I can have it working. Thanks again.\n. ",
    "moshest": "Thanks! My bad..\n. ",
    "interactiveblueprints": "This is closed but with version 0.4.4 we still have this issue.\n. ",
    "Dexus": "Have the same problem, so i work with the attachments first on \"end\". There are all data that i need.\n. ",
    "bblack": "Same problem here.\n. At the time I wrote this, I think it was 0.10.26. Definitely no later version than that. However, I now think this was not due to mailparser.\n. ",
    "fabiob": "I was checking the incoming message again, and I noticed something that might be helpful: in this case, aside from the Content-Type specifying text/plain, the mailer also included a filename for the attachment. So this could be used to mark this part as an attachment, instead of an alternative.\nHere's the relevant part of the source:\n------=_NextPart_000_0038_01CEE501.61A93450\nContent-Type: text/plain;\n    name=\"35131102916265010980550010010667321709662207.xml\"\nContent-Transfer-Encoding: quoted-printable\nContent-ID: <{E3FD5FC1-009F-4D1F-9CDD-7F2FFC06F8CE}>\nWhat do you think?\n. OFC, I'll send you the sample e-mail on your profile e-mail.\n. I'm currently using this hack, but it feels very, very dirty :)\njavascript\nvar inlines;\nif (mail.text && (inlines = mail.text.match(/(?:<\\?xml[^>]*\\?>\\S*)?<(\\w+)[^>]*>.*?<\\/\\1>/g))) {\n  console.log('Found ' + inlines.length + ' inline attachments');\n  for (var i = 0; i < inlines.length; i++) {\n    var xml = inlines[i];\n    var fn = 'inline-' + i + '.xml';\n    // parse the XML\n  }\n}\n. ",
    "jstedfast": "GMail will only display the first text part in a multipart/mixed as the message body.\nSome mail clients will render all parts which do not have a Content-Disposition header with a value of \"attachment\" inline as part of the body.\nEven so, you shouldn't concatenate text parts into 1 blob. IOW, keep the model separate from the view.\nAlso, the name property on Content-Type isn't necessarily a file name, that property is typically the \"filename\" parameter on the Content-Disposition header.\n(see http://tools.ietf.org/html/rfc2183 for more details)\n. The logic used by most mail clients for determining if something is an attachment or not is far more complicated than just \"does it have a filename parameter?\"\nTypically, what mail clients will do is render the message and any MIME parts left over (i.e. not referenced from an HTML body) are then shown as attachments.\nHowever, this is very mail-client specific.\nIMHO, a library should not treat anything as an attachment unless it explicitly has a Content-Disposition value of \"attachment\" (or anything other than \"inline\" if you want to be more accepting).\n. ",
    "andrezsanchez": "Ah, okay.  The reason I asked was because I thought it would be nice to be able to use mailparser as part of a sort of middleware system for email.  I guess using it as a readable stream isn't really necessary for this though.\n. ",
    "tobie": "Thanks!\n. ",
    "nswbmw": "mp.on(\"attachment\", function(attachment){\n    mailparser.end();\n});\nis this?\n. ",
    "chamerling": "Same issue. Any advices to not store the file on FS?\n. ",
    "elbrook": "This is the email I couldn't decode without the change. Thanks for looking at this.\nDelivered-To: michaeldickison@gmail.com\nReceived: by 10.58.34.72 with SMTP id x8csp84684vei;\n        Sun, 11 May 2014 03:15:21 -0700 (PDT)\nX-Received: by 10.66.226.145 with SMTP id rs17mr41953990pac.144.1399803320768;\n        Sun, 11 May 2014 03:15:20 -0700 (PDT)\nReturn-Path: \\u003C55q33kdickison@gmail.com\\u003E\nReceived: from mail-pa0-x235.google.com (mail-pa0-x235.google.com [2607:f8b0:400e:c03::235])\n        by mx.google.com with ESMTPS id ot9si6899423pac.53.2014.05.11.03.15.20\n        for \\u003Cmichaeldickison@gmail.com\\u003E\n        (version=TLSv1 cipher=ECDHE-RSA-RC4-SHA bits=128/128);\n        Sun, 11 May 2014 03:15:20 -0700 (PDT)\nReceived-SPF: pass (google.com: domain of 55q33kdickison@gmail.com designates 2607:f8b0:400e:c03::235 as permitted sender) client-ip=2607:f8b0:400e:c03::235;\nAuthentication-Results: mx.google.com;\n       spf=pass (google.com: domain of 55q33kdickison@gmail.com designates 2607:f8b0:400e:c03::235 as permitted sender) smtp.mail=55q33kdickison@gmail.com;\n       dkim=pass header.i=@gmail.com;\n       dmarc=pass (p=NONE dis=NONE) header.from=gmail.com\nReceived: by mail-pa0-x235.google.com with SMTP id kp14so6173596pab.26\n        for \\u003Cmichaeldickison@gmail.com\\u003E; Sun, 11 May 2014 03:15:20 -0700 (PDT)\nDKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;\n        d=gmail.com; s=20120113;\n        h=subject:from:content-type:message-id:date:to\n         :content-transfer-encoding:mime-version;\n        bh=aDcn+UjbZMSXgdU99lEABPkZ4SZ1jrFbXOWJ0Vasywg=;\n        b=Q/qFzTmwNaLpbfDWjZ8lJeaAwtV/7lYRwwItoaJBc9Psmwwo94RRyYsixtkKMYbu3e\n         +xzHDEh4coOM6J3LE+YQ3LYZB1teSYf7iSM/AMWFDVO2ha1IxCGAbT/v33u5XXMnMXbP\n         cIE/k6nb5zzAMMJ1W4ekRLxU7fQLkyreCVLAnOX3vqmxEtvqIXhLznvbOIy8fi4Vfgii\n         wr6rg/cR73q0B1E8u/i+2lWjupY0lFC7uOOMrlkRGiUs+LZgmu0RGjh9AMpHrw383+aU\n         8Au13x0jRh7vN3WO5mbRTVXJ6tifh7Gmn9s0rQJX0aawtBFMehZWkwiOhGlM2UkTgBGB\n         pPHg==\nX-Received: by 10.66.163.2 with SMTP id ye2mr42040406pab.110.1399803320393;\n        Sun, 11 May 2014 03:15:20 -0700 (PDT)\nReturn-Path: \\u003C55q33kdickison@gmail.com\\u003E\nReceived: from 192.168.11.5\n        by mx.google.com with ESMTPSA id as12sm33759530pac.43.2014.05.11.03.15.19\n        for \\u003Cmichaeldickison@gmail.com\\u003E\n        (version=TLSv1 cipher=ECDHE-RSA-RC4-SHA bits=128/128);\n        Sun, 11 May 2014 03:15:19 -0700 (PDT)\nSubject: =?iso-2022-jp?B?MzkbJEIhKhsoQg==?=\nFrom: 93 \\u003C55q33kdickison@gmail.com\\u003E\nContent-Type: text/plain;\n\\tcharset=iso-2022-jp\nX-Mailer: iPhone Mail (11D201)\nMessage-Id: \\u003C2C0E38AB-1F00-40D9-AE08-40BC9A11D0EB@gmail.com\\u003E\nDate: Sun, 11 May 2014 19:15:17 +0900\nTo: =?iso-2022-jp?B?GyRCJV4lJCUxJWsbKEI=?= \\u003Cmichaeldickison@gmail.com\\u003E\nContent-Transfer-Encoding: 7bit\nMime-Version: 1.0 (1.0)\n\\u001B$B%^%$%1%k\\u001B(B\n\\u001B$BJl$NF|$NEEOC!\\\"\\u001B(B\n\\u001B$B$\\\"$j$,$H$&!\\u003C\\u001B(B\n\\u001B$B;E;v!\\\"3Z$7$$$H%$%$$M!#\\u001B(B\n\\u001B$B855$$G$M!\\u003C\\u001B(B\n\\u001B$BFO$$$?$i!\\\"JV?.$7$F$_$F!#\\u001B(B\n93\n. Hm, maybe I'm doing some wrong.\nI had several messages in Japanese (JIS) that iconv-lite couldn't convert. By switching to iconv, jsencoding or jconv, the ones that were quoted-printable showed up fine.\nBut this one (and others) marked 7bit would still show up as $B%^%$%1%k etc. even with iconv, jsencoding or jconv (I've just double-checked this). The only difference, as far as I could tell, was the content-transfer-encoding, and adding the 7bit line to _finalize made them decode. It could easily be an issue on my side, but that's the only way I was able to fix it.\nI'm using mailparser's mail object at the end of a Imap body stream. I'm using node-imap for the Imap connection, so actually I guess it could be an issue with node-imap's body stream.\n(I had some trouble with iconv crashes, installation, etc, on nw, so that's why I'm using the js one now.)\n. ",
    "mbrio": "As soon as I get in front of a computer I will pass it on but for more info the account I'm checking is a Gmail account, and the emails that are not being decoded properly are being sent from another Gmail account, from the web interface. All emails being sent from the web interface are not being decoded properly for me.\n. In getting you the contents of the email I inadvertently fixed my own problem. I was using node-imap in conjunction with mailparser. My fetch call was only requesting the to, from, date, and subject headers, along with the text. Apparently when requesting only some headers the body of the email is no longer able to be parsed. When I requested the email in its entirety it parsed correctly.\n. ",
    "abpin": "Which version of node are you using?\n. If you are still having a problem, can you post your code on a gist? \n. ",
    "openwonk": "I create a new instance within smtp.on('dataReady') callback.  Is this event emitted for every new message?\nOriginally, I declared a new instance with all other general scope variables, but move it within the SMTP event.\n. ",
    "mftaher": "I get the same error. Is there any solution to this?\n. ",
    "steffenmllr": "Hmm ok so for the moment the only solution would be either to buffer them in memory or write/reading them to disk ? Do you have any plans for a rewrite or do you know any other alternatives how I could handle the problem ?\n. ",
    "danfinlay": "Since the major alternative right now is to fully load the files before dealing with them, building up back pressure in the parser (although not ideal) is still a marked improvement over the current behavior.\nI just ran into this, and was disappointed, this module has been stellar in every other respect.\n. For other people looking for ways to pipe mailparser attachments into Streams2 readable streams:  you can use the through module, which adds its own buffering and back-pressure management if you use this.queue(data) to pass data forward.\n. ",
    "dbkup": "Hello, just created an account to note that I am also having a problem with mailparser and node 0.10.31. \nParsing a mail fails with exit code -1073741819 (0xC0000005).\n'Message parsed' message in the example below never gets logged in console.\nThe code that I'm using for testing:\n``` javascript\n\"use strict\";\nvar MailParser = require(\"mailparser\").MailParser;\nvar fs = require(\"fs\");\nvar fname = 'fname.eml';\nvar eml = fs.createReadStream(fname);\nvar mailparser = new MailParser({streamAttachments: true});\nmailparser.on(\"end\", function (mail_object) {\n    console.log(\"Message parsed\");\n});\neml.pipe(mailparser);\n```\nThe email is sent from an exchange server with charset = ISO-8859-2. \nSome mails with charset = utf-8 sent from an android phone can be parsed. \nI am still investigating and will respond here with my findings. Maybe it's a node thing but I'd like to rule out mailparser before digging into the fs module. This fails on linux and windows OS.\nAlso I checked that parsing works correctly with node 0.10.29 and 0.10.30.\n. Hello Andris, thanks for your response. The e-mail in question is internal and can't be shared. I've also had issues when trying to debug the parsing as then the mail gets parsed correctly. I'll contact you with further information.\n. Finally resolved, the issue was with iconv-lite it seems. After I installed iconv proper module, per the notice in the readme, the offending mail was correctly parsed.\n. ",
    "tflanagan": "Wonderful, thanks man!\n. ",
    "gr2m": "Thanks for merging that fast!\nCould you bump the version & release? I'd like to send another pull request to https://github.com/chirag04/mail-listener2 which is using the \"attachment\" to also pass the mail argument as well, see https://github.com/gr2m/mail-listener2/commit/51c753e4905411dfdcbb153750462fa0035697ed\n. Thanks Andris, really appreciate your quick handling here, very encouraging :)\n. @andris9 I've run into a problem with this, this._currentNode.parentNode is not necessary the mail object, it can be another part of a multipart email. We need to pass the last .parentNode leaf here, I'll send another pull request. Sorry for missing that\n. ",
    "dcposch": "Wow, that was quick! Thanks\n. ",
    "AVVS": "@andris9 The use-case here is the following:\n1. User A sends an email to a group-list at 9 pm 4th of february. This is what the \"date\" header would reflect.\n2. Some time passes by, message is wondering around inside queues and finally gets to the recipient on 5th of february 11am\nThis message's delivery time differs greatly from when it was originally sent. Therefore one must use the delivery date and not the date when the message was originally sent. Furthermore, this is exactly what gmail does when displaying conversations - it sorts messages by the date from the received and x-received headers granted that they are present.\nI've added the PR that implements the desired behavior\n. Another idea is that If you really want to make this backwards compatible - you can add .receivedDate property along with the date, but I cant really think of any real use-case for this. IE, messages that were sent by the user will naturally lack received headers, and messages received by another user should be dated using received date\n. @andris9 updated PR, now it parses received and x-received headers into receivedDate property\n. ",
    "betagan": "Hi,\nThe raw email above is not valid according to RFC 2822. \nThe RFC says that either field-name and field-value have to be on the same line or if multiple lines are used for the field-value, every new line must begin with a whitespace character. \nThis means, that the following header would be valid, note the whitespace in line 2!\nTo:\n \"email4@outlook.com\" <email4@outlook.com>\nIf this is just a formatting issue with github and your email has the correct format, this might still be an issue with mailparser not supporting the multiline format (Long Header Fields) as I didn't check.\n. ",
    "stockholmux": "Glad I could help.\n. ",
    "breck7": "I used \"n\" to switch to v0.11.9 and my app worked fine. My guess is the fix for 9180 in the upcoming 0.12.1 will solve this for 12.\n. ",
    "S2-": "reading a bit and found out that format=flowed should only be a display property for reader applications, it should not change the content of the mail.\nhttp://joeclark.org/ffaq.html\n. ",
    "dfries": "This also fixed a problem I was having.  format=flowed messages were getting the whitespace and new line removed between the last word of one line and the first word of the next with a result of the two words running together without any whitespace in between, added the patch and it looks good.\n. ",
    "ben-rowe": "It appears to be an issue specifically with line 33 as it attempts to parse the date as such: '449\\tsat' is there any good way of skipping over these errors so the whole system does not crash out?\n. any time the received header contains what looks like a tab but i think it's slightly malformed (not opened it up in a hex editor) if removed the mail parses fine.\nhttps://gist.github.com/ben-rowe/8913f3b513f469d79b7e\n. try this: https://gist.github.com/ben-rowe/6f49a39aae76c75cae8e\nif not i set up a temporary download here:\nhttp://tempsend.com/5F9710B020\n. Awesome Thank you so much :)\n. ",
    "atiertant": "@andris9 tanks for your fast answer and fix.\n. ",
    "Sjonnie2nd": "Hello Andris,\nI also tried to reproduce it but you are right: name = \"\".\nAbout a year ago i received those emails and using mailParser I then got name: \"=?utf-8?Q??=\".\nI kept them in my todolist and I just recently picked it up.\nSeems that it (if there has been an issue) already was resolved.\nI'm sorry for the inconvenience.\n. Hi spyshow,\nYou are asking this at the wrong place.\nmailParser does not create emails but, the other way arround, does read them.\nYou might take a look at https://github.com/nodemailer/mailcomposer.\nI have no experience with Electron and don't know if you can use it within Electron.\nAlso \"how can i save it to the file system\" has nothing to do with mail parsing or composing. I could point you to some node.js methods but I expect that Electron has its own implementation. \nBut wait: when Googling on \"Electron file\" you get lots of hits. fe: https://ourcodeworld.com/articles/read/106/how-to-choose-read-save-delete-or-create-a-file-with-electron-framework. An update:\nThe issue with the html=false only happens with emails which are only 1 node with Content-Type: text/html, Content-Transfer-Encoding: base64. My mail-templates have only 1 node because... they are templates :) \nBut now everyday I receive emails from others which have the same problem.\nWhen debugging (2.2.0) it looks like it is caused by the async processing of the streams.\nAt first getTextContent() is looking at node.textContent, which is empty. After it node.textContent gets filled by contentStream.once('end', () => .. ) with... the right html content.\nEmails with Content-Type: multipart/alternative; are doing fine: \nAt first contentStream.once('end'..) is called (a few times) and at the end getTextContent() is called.\nI dont know what exactly is causing the issue. Im not that good with promisses, async processing etc..\nIt doesn't look to be caused by the pull requests. Perhaps by changes in dependencies like mailsplit, tlds or libbase64?. See my issue: #185 . ",
    "uggrock": "so I suppose there is no way to get out this information .... ",
    "runfan": "```\nSubject: =?UTF-8?B?UmU6IOmVv+aXuu+8jOWFs+S6juS9oOeahOW3peS9nA==?=\nTo: \"\" tt@qq.com\nReferences: 201510241556538367697@qq.com\nFrom: test@qq.com\nMessage-ID: 562CB66B.6060409@qq.com\nDate: Sun, 25 Oct 2015 19:00:59 +0800\nMIME-Version: 1.0\nIn-Reply-To: 201510241556538367697@qq.com\nContent-Type: text/html; charset=gbk\nContent-Transfer-Encoding: 8bit\n\n\n\n\n\n\u54e8\u5b50\u90ae\u4ef6\u6574\u4f53\u76f8\u5f53\u4e8e\u662f\u4ece\u5934\u5f00\u59cb\u505a\uff0c\u5728\u65b0\u7684\u4e1c\u897f\u51fa\u6765\u4e4b\u524d\uff0c\u65e7\u7684\u4e1c\u897f\u4e0d\u4f1a\u6709\u4efb\u4f55\u7684\u6539\u8fdb\u3002\u6211\u5df2\u7ecf\u6ca1\u6709\u5728\u65e7\u7684\u5185\u5bb9\u4e0a\u63d0\u4ea4\u8fc7\u4ee3\u7801\u4e86\u3002\n\n258\u96c6\u56e2--\u7528\u4f1a\u601d\u8003\u7684\u4e92\u8054\u7f51\u8fde\u63a5\u4f01\u4e1a\u4e00\u5207\n\n\u90ae\u7bb1\uff1atest@qq.com\n\u96c6\u56e2\u5b98\u7f51 http://www.258jituan.com \n\u5730\u5740\uff1a\u4e2d\u56fd\u53a6\u95e8\u5e02\u6e56\u91cc\u533a\u4e07\u8fbe\u5199\u5b57\u697cC2\u680b12\u697c\n\u3010 \u53a6\u95e8\u4e8c\u4e94\u516b\u96c6\u56e2\u6709\u9650\u516c\u53f8 \u3011\n```\n. \u6211\u7684\u90ae\u4ef6\u6e90\u6587\u662f\u4ee5 gbk \u7f16\u7801\u7684\uff0c\u6240\u4ee5\u5728MIME header\u4e2d\u4f7f\u7528\u7684 gbk \uff0c\u4f46\u662f html \u4e2d\u4f7f\u7528\u7684\u7f16\u7801\u662f utf-8 \u3002\u5982\u679c\u4ee5 utf-8 \u7f16\u7801\u6765\u5bf9\u90ae\u4ef6\u7684\u6b63\u6587\u8fdb\u884c\u89e3\u7801\uff0c\u6240\u6709\u5e26\u4e2d\u6587\u7684\u5730\u65b9\u5c31\u4f1a\u51fa\u73b0\u4e71\u7801\u3002\n\u4e0a\u6587\u4e3a\u4e86\u65b9\u4fbf\u663e\u793a\uff0c\u6211\u5df2\u7ecf\u628a\u6b63\u6587\u7684\u7f16\u7801\u8f6c\u6210\u4e86utf-8\u3002\n. got it\n. ",
    "faressoft": "Sorry, I just noticed that I am using the wrong attribute .html instead of .text\n. ",
    "seriousme": "My apologies. I overlooked the small tests in https://github.com/andris9/mailparser/blob/master/test/mailparser.js\nand only saw the one nested.eml ;-)\nKind regards,\nHans\n. ",
    "dukejones": "And here's part of the resulting parsed object:\n{\n    \"text\": \"X-Received: by 10.66.121.132 with SMTP id lk4mr11149397pab.7.1452901003511;\\n        Fri, 15 Jan 2016 15:36:43 -0800 (PST)\\nX-BeenThere: googlegroup@example.com\\nReceived: by 10.107.132.229 with SMTP id o98ls959155ioi.29.gmail; Fri, 15 Jan\\n 2016 15:36:43 -0800 (PST)\\nX-Received: by 10.98.42.74 with SMTP id q71mr18573100pfq.18.1452901003333;\\n        Fri, 15 Jan 2016 15:36:43 -0800 (PST)\\nReturn-Path: <person@example.com>\\nReceived: from mail-pf0-x234.google.com (mail-pf0-x234.google.com. [2607:f8b0:400e:c00::234])\\n        by mx.google.com with ESMTPS id v18si19529451pfi.243.2016.01.15.15.36.43\\n        for <googlegroup@example.com>\\n        (version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);\\n        Fri, 15 Jan 2016 15:36:43 -0800 (PST)\\nReceived-SPF: pass (google.com: domain of person@example.com designates 2607:f8b0:400e:c00::234 as permitted sender) client-ip=2607:f8b0:400e:c00::234;\\nAuthentication-Results: mx.google.com;\\n       spf=pass (google.com: domain of person@example.com designates 2607:f8b0:400e:c00::234 as permitted sender) smtp.mailfrom=person@example.com;\\n       dkim=pass header.i=@iiij-org.20150623.gappssmtp.com\\nReceived: by mail-pf0-x234.google.com with SMTP id e65so125228478pfe.0\\n        for <googlegroup@example.com>; Fri, 15 Jan 2016 15:36:43 -0800 (PST)\\nDKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;\\n        d=iiij-org.20150623.gappssmtp.com; s=20150623;\\n        h=from:content-type:content-transfer-encoding:subject:message-id:date\\n         :to:mime-version;\\n        bh=zWEGA6i1loUwya0QLwuyJVOH2F4tJhI4z1naDvpks/M=;\\n        b=Bh10Y3eUh0lG5CqS8N/EzfsOzFXByVK/fpHunhSqo3PG+ovnU6jhg5GFvB+jEyIGGp\\n         35YdVSoYns4LVzjGKMx2hXZ3tdzzTKbEX/CpakAGk8dfISEnMEdLd7UXpvZ8ygLrcW/j\\n         vTy2vTTofrIhm/G8JNNSIjBvfbXKdUh/GOhPsAGCSxmL0F656dmxOZyPV4mmUyzHFsSp\\n         r7CrvlRkQfq2nqgrkzVGH/GhOd3np270vo5wxo6XTHNv+qiPs9d2+qp4cP+Bj5KkWt75\\n         sSLLpAByw5f9tM2a2v4/yCbuDL+H1piqjounAH+iJ7czqmm2FutdwHtlZ0f5J/HPvAEv\\n         Crhg==\\nX-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;\\n        d=1e100.net; s=20130820;\\n        h=x-gm-message-state:from:content-type:content-transfer-encoding\\n         :subject:message-id:date:to:mime-version;\\n        bh=zWEGA6i1loUwya0QLwuyJVOH2F4tJhI4z1naDvpks/M=;\\n        b=kao0Xi9mkZtQnvoENAjnEeEqh7Y4k0lNALbKLdbDt5m2zoYpvg43A7h5ImajH9S0Rx\\n         baS9+qkha6lJGKMzWRGxSBVabUfOfUzmJ+YudAwaKNcvaMe12WCm7fTNrCQ3rdyAIOgi\\n         mYd6NFRNIHsFv0Eupdc03A7mqTiGNmY7tNH6ufCUXQCdHQoC+LcaSZ4fyjCJy7lU2uia\\n         +Lol+AGlTWpO+haU9BLFPaEG1gO1iz+YAnb7evAMZG6V94ToN5BgH9qys7L3FAYYwJ4h\\n         b5sZqJBlKutvJLB/YliTgOiGXLRSkSy0TIXgy1r+PUYyfcT11gkd7r9GhFbDynA1k7Fw\\n         ix7w==\\nX-Gm-Message-State: ALoCoQlAAsuWcQ/y8neXJZSUpWBCMRbayBgQWWVc2XBm51hrlrblAoVfdTD9lLBs5UqHj8bC6iHheeEbTSyvSzFm+lGxAIZOXA==\\nX-Received: by 10.98.2.150 with SMTP id 144mr18877084pfc.11.1452901002898;\\n        Fri, 15 Jan 2016 15:36:42 -0800 (PST)\\nReturn-Path: <person@example.com>\\nReceived: from [10.0.1.19] (DN12439j6.stanford.edu. [68.65.166.102])\\n        by smtp.gmail.com with ESMTPSA id r12sm17807044pfi.9.2016.01.15.15.36.41\\n        for <googlegroup@example.com>\\n        (version=TLSv1/SSLv3 cipher=OTHER);\\n        Fri, 15 Jan 2016 15:36:42 -0800 (PST)\\nFrom: Someone <person@example.com>\\nContent-Type: text/plain; charset=us-ascii\\nContent-Transfer-Encoding: 7bit\\nSubject: hello everyone\\nMessage-Id: <2CA66061-0660-4CD9-8B7A-031256EE7A7C@iiij.org>\\nDate: Fri, 15 Jan 2016 15:36:39 -0800\\nTo: test <googlegroup@example.com>\\nMime-Version: 1.0 (Mac OS X Mail 9.1 \\\\(3096.5\\\\))\\nX-Mailer: Apple Mail (2.3096.5)\\n\\nHello @tammyc look at this: hello hello\\n\",\n    \"headers\": {\n        \"x-received\": [\n            \"by 10.66.121.132 with SMTP id lk4mr11149397pab.7.1452901003511; Fri, 15 Jan 2016 15:36:43 -0800 (PST)\",\n            \"by 10.98.42.74 with SMTP id q71mr18573100pfq.18.1452901003333; Fri, 15 Jan 2016 15:36:43 -0800 (PST)\",\n            \"by 10.98.2.150 with SMTP id 144mr18877084pfc.11.1452901002898; Fri, 15 Jan 2016 15:36:42 -0800 (PST)\"\n        ],\n        \"x-beenthere\": \"googlegroup@example.com\",\n        \"received\": [\n            \"by 10.107.132.229 with SMTP id o98ls959155ioi.29.gmail; Fri, 15 Jan 2016 15:36:43 -0800 (PST)\",\n            \"from mail-pf0-x234.google.com (mail-pf0-x234.google.com. [2607:f8b0:400e:c00::234]) by mx.google.com with ESMTPS id v18si19529451pfi.243.2016.01.15.15.36.43 for <googlegroup@example.com> (version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128); Fri, 15 Jan 2016 15:36:43 -0800 (PST)\",\n            \"by mail-pf0-x234.google.com with SMTP id e65so125228478pfe.0 for <googlegroup@example.com>; Fri, 15 Jan 2016 15:36:43 -0800 (PST)\",\n            \"from [10.0.1.19] (DN12439j6.stanford.edu. [68.65.166.102]) by smtp.gmail.com with ESMTPSA id r12sm17807044pfi.9.2016.01.15.15.36.41 for <googlegroup@example.com> (version=TLSv1/SSLv3 cipher=OTHER); Fri, 15 Jan 2\n. i think it's google groups mangling the email.\n. ",
    "lauracpierre": "Hi, \nCould you please have a look at this? At least please tell us if this sounds like a bug or not something mailparser should deal with?\nThank you!\n. Ok, this is weird one. \nWill keep debugging on my end. Thanks for your time and will close this issue. \n. ",
    "melimanrique": "I'm processing the attachments like this: (didn't gave this info before as I though wasn't relevant) \nJS\nvar attachment_array = [];\nattachments.map(function(attachment){\n  var new_attachment = {\n    filename: attachment.fileName,\n    content: attachment.content,\n    contentType: attachment.contentType,\n    contentDisposition: attachment.contentDisposition,\n    encoding: attachment.transferEncoding,\n    cid: attachment.contentId\n  };\n  attachment_array.push(new_attachment);\n }\n});\nIt is included inside a message/rfc822 container as an embedded message. This is what the mail_object.attachments looks like when printing in console: \nJS\n  { contentType: 'message/rfc822',\n    contentDisposition: 'attachment',\n    generatedFileName: 'attachment.eml',\n    contentId: 'c3641c93181a2e01761b628aa86d60ae@mailparser',\n    checksum: '...',\n    length: ..,\n    content: <Buffer  ... > }\nHow should it be treated then? \n. @andris9 do you know how should I treat the attachment? \n. ",
    "ricardopolo": "@andris9, I am working with @melimanrique in this issue. After multiple tests I can confirm is an issue in MailParser and  not in not NodeMailer or other components. I change our mail server from Haraka to https://github.com/andris9/smtp-server to be sure it is not related. I also tried upgrading to the beta versions and the issue persists.\nSo this is what I see:\nWhen we  a message as attachment from from Outlook it looks like a regular attachment\n\nBut when we pass it to MailParser, we see the attachment like this\njs\n     { contentType: 'message/rfc822',\n       contentDisposition: 'attachment',\n       generatedFileName: 'attachment.eml',\n       contentId: 'c3641c93181a2e01761b628aa86d60ae@mailparser',\n       checksum: 'dc8f3704841b339c5f1ef564032d3cf6',\n       length: 71878,\n       content: <Buffer 52 65 63 65 69 76 65 64 3a 20 66 72 6f 6d 20 42 4c 32 50 52 30 35 4d 42 31 31 36 2e 6e 61 6d 70 72 64 30 35 2e 70 72 6f 64 2e 6f 75 74 6c 6f 6f 6b 2e ... > }\nAs you can see it does not contain a fileName as a regular attachment, it contains a generatedFileName.\nWhat I can guess is that outlook does not attach it as a typical attachment, but creates another Mime tree that confuses MailParser.\nThis is the stream that generates this issue:\nhttps://gist.github.com/ricardopolo/8d44147861c42c2bacef\nAny advice please?\n. Yes of course, I already attached it in my last message https://gist.github.com/ricardopolo/8d44147861c42c2bacef\nPlease tell me if you need any more information @andris9 \n. Great @andris9. You do a great job in your projects! Thanks :smile: \n. Any comment @andris9? Thanks \ud83d\ude04 \n. ",
    "Sebmaster": "Seems like mimelib can deal with that case properly now as well. So I dropped the code duplication.\nThe currently failing test fails in master too, not sure what's up with that.. ",
    "ials-picosoft": "One private method was changed, to resolve problem.\nMailParser.prototype._generateFileName = function(fileName, contentType) {\n    var cnt=0;\n    var path=require('path');\n    var oos={};\n    oos.ext=path.extname(fileName||'attachment');\n    oos.name=path.basename(fileName||'attachment', oos.ext);\n    if (contentType){\n        var de=mime.extension(contentType);\n        if(de && (!oos.ext || oos.ext!='.'+de)){ \n           oos.ext='.'+de; \n        }\n    }\n    fileName=oos.name+(oos.ext || '');\n    while(fileName in this._fileNames){\n       cnt++;\n       fileName=oos.name+'-'+cnt.toString()+(oos.ext||'');\n    }\n    this._fileNames[fileName]=1;\n    return fileName;\n};\n. ",
    "hsachdevah": "I am facing the same problem as well\n. I observed that end event runs for as many times as there are is a number of \"Subject:\" statements in the content.\n. ",
    "andrewbruno": "If you remove the following code, does it still fire twice?\nself.mailParser.on('headers', function (headers) {\n    console.log(headers);\n  });\n. ",
    "tajinder": "Can you release a new version with my fix in it ?\n. Thanks :)\n. ",
    "LionNatsu": "I have this problem too.\nError: Encoding not recognized: 'ISO-2022-JP' (searched as: 'iso2022jp')\n    at Object.getCodec (/home/lion/repos/aosc/email-bot/node_modules/iconv-lite/lib/index.js:102:23)\n    at Object.getDecoder (/home/lion/repos/aosc/email-bot/node_modules/iconv-lite/lib/index.js:118:23)\n    at Object.decode (/home/lion/repos/aosc/email-bot/node_modules/iconv-lite/lib/index.js:36:25)\n    at convertIconvLite (/home/lion/repos/aosc/email-bot/node_modules/encoding/lib/encoding.js:91:26)\n    at convert (/home/lion/repos/aosc/email-bot/node_modules/encoding/lib/encoding.js:51:22)\n    at Object.decodeBase64 (/home/lion/repos/aosc/email-bot/node_modules/mimelib/lib/mimelib.js:248:16)\n    at Object.decodeMimeWord (/home/lion/repos/aosc/email-bot/node_modules/mimelib/lib/mimelib.js:321:25)\n    at Object.module.exports.decodeMimeWord (/home/lion/repos/aosc/email-bot/node_modules/mimelib/lib/mimelib.js:55:41)\n    at MailParser.<anonymous> (/home/lion/repos/aosc/email-bot/node_modules/mailparser/lib/mailparser.js:1388:24)\n    at RegExp.[Symbol.replace] (native)\nI think it should handle this (when it calls to mimelib) and raise an error event.\n. ",
    "timelesshaze": "Fixed by #154 \n. Fixed by #170 . Yes, I'll create one for each case tonight / tomorrow.. I added a test case for values using the default encoding.\nIt fails for the current master (e4eba50) without the fix.. ",
    "hugovart": "parsedMsg.attachments[key].stream.resume() didn't do the trick: TypeError: Object #<Base64Stream> has no method 'resume'. I am at node v0.10.41\nparsedMsg.attachments[key].stream is\n{ domain: null,\n  _events: { error: { [Function: g] listener: [Function] } },\n  _maxListeners: 10,\n  writable: true,\n  checksum: { _binding: {}, _options: undefined },\n  length: 874780,\n  current: '' }\nsince length is 874780, does not it supposed to received the content already? I checked, Base64Stream.prototype.end function from streams.js function is called.\nDo you have a suggestion of an up to date alternative to MailParser?\n. ",
    "darren-white72": "I use the following \nnpm install mailparser --save\n. I think I have found the issue. \nThe project folder I'm using is called mailReader, when I run the command to install your module within this folder I get the error.\nI have just tried to install your module in a folder called testing and it worked with no issues.\nLooks like you can't install the module if the parent folder contains the word mail.\nThank you for you quick response.\n. ",
    "igorjos": "Here is a part of the code that actually takes care about message parsing:\n``` javascript\nsequencer.on('message', function(msg, seqno) \n{\n    var parser = new MailParser();\n    var body = '';\nclearTimeout(timer);\n\nmsg.on(\"body\", function(stream, info)\n{\n    var buffer = '';\n\n    stream.setEncoding('utf8');\n\n    stream.on('data', function(chunk) \n    {\n        //buffer += chunk.toString('utf8');     \n        body += chunk;\n    });\n\n    stream.once('end', function() \n    {\n\n        parser.write(body.toString('UTF-8'));                                            \n    });\n\n});\n\nmsg.once(\"end\", function()\n{   \n    console.log('MESSAGE LOAD ENDS');\n    parser.end();   \n    timer = setTimeout(function(){ parseIsDone() }, 2000);\n});\n\nparser.on('end', function(mailObj)\n{\n    console.log('PARSER ENDED PARSING');\n    messages.push(mailObj);\n\n});\n\n});\nsequencer.once('end', function()\n{\n    console.log('SEQUENCER IS DONE, WAITING ON PARSER');\n});\nfunction parseIsDone()\n{\n    console.log('PARSER DONE EVENT');\n    def.resolve(messages);\n    messages = [];\n    clearTimeout(timer);\n};\n```\nAs you can see I'm using the sequencer from node-imap: \nvar f = localImap.seq.fetch(from+':'+to, { bodies: ['HEADER.FIELDS (FROM SUBJECT)',''] });\nwhere localimap is the IMAP connection to GMAIL \nonce it fetch the messages it calls for the method from the above and parse each message by using promises. \nAs addition to my first comment not all messages are having duplicate HTML, as I can see PayPal messages are okay, but Aliexpress for example are duplicated in the content.\nIn case you need more info please let me know, meanwhile I will do some workaround like in case content is duplicated to replace it or smth.\nThanks\n. You need (nodejs) message object or to send you that message to your mail? (Both fits for me)\n. ",
    "Yonysun": "I retrieved the mail withthe pop3 protocol and then saved it to local database,before the save step, I convert the mail buffer to string,using the follow code:\nclient.retrieve(i,function (err2,fullMail) {\n                // console.log(err2,fullMail);\n                if(!err2){\n                    if(fullMail){\n                         var mailSrc = fullMail.toString('binary');\n                         // execute the step of saving mail\n                         // ...\n                    }\n                }\n});\nthis is the parse code:\n```\n    var MailParser = require(\"mailparser\").MailParser;\n    var mailparser = new MailParser({\n        streamAttachments: true\n    });\n    mailparser.on(\"end\", function(mail_object){\n        // console.log(\"mailObject:\", mail_object);\n        _callback(mail_object);\n    });\nmailparser.end();\n\n```\nbefore the parse step,I get the mailSrc from local database,and printed it in the console:\n```\nUser-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:45.0) Gecko/20100101\n Thunderbird/45.2.0\nContent-Type: text/plain; charset=\"gbk\"; format=flowed\nContent-Transfer-Encoding: 8bit\nX-MS-Exchange-Organization-AuthAs: Internal\nX-MS-Exchange-Organization-AuthMechanism: 06\nMIME-Version: 1.0\nsdfaf\u00b5\u00d8\u00b7\u00bd\u00c8\u00f6\u00b7\u00a2\u00b8\u00e5\u00ca\u00b1\u00b4\u00f3\u00b9\u00f8\u00b7\u00b9\u00c9\u00cf\u00b5\u00db\u00b8\u00f8\n```\nI copied the last line \nsdfaf\u00b5\u00d8\u00b7\u00bd\u00c8\u00f6\u00b7\u00a2\u00b8\u00e5\u00ca\u00b1\u00b4\u00f3\u00b9\u00f8\u00b7\u00b9\u00c9\u00cf\u00b5\u00db\u00b8\u00f8\nthen decode it with the 'iconv-lite' module, and the result is correct:\nsdfaf\u5730\u65b9\u6492\u53d1\u7a3f\u65f6\u5927\u9505\u996d\u4e0a\u5e1d\u7ed9\nbut the mailparser result is:\nsdfaf\u788c\u8134\u8def\u9646\u8120\u679a\u8def\u5784\u8d42\u6c13\u8122\u5364\u9e93\u8d38\u9e7f\u9176\u8def\u9e7f\u8121\u8127\u788c\u8139\u8d42\u9176\n. thank you andris9.\nthe issue is solved already. \nI converted the mail source to base64 charset before saving to local database,and it works correctly\n. ",
    "spyshow": "any solution???. ",
    "yutent": "Thanks for answering, here the email that is garbled.\nemail.eml.zip\n. ",
    "farskipper": "@alanhoff if you need support for older versions of node, check out this fork that removes ES6 sugar and shims modern Buffer APIs so it works on node4 (I needed this b/c AWS Lambda only supports node 4.3 right now)\nhttps://www.npmjs.com/package/mailparser-node4\nhttps://www.npmjs.com/package/mailsplit-node4. Awesome! I missed that announcement. I'll make a note on my fork. ",
    "subhashkaker": "Please update the mail split version (committed and added a pull request for the same) in mail parser as it was a defect of mail split and they resolved in v4.1.0.. ",
    "danieltigse": "why did you close it? I am using version 2.3.2 and I still receiving html: false. ",
    "cavinsmith": "Damn Yandex. Has same problem. @xenbyte I started using mailparser-mit as fallback when html & text are empty.\nfor your case result is:\n{ html: '<div><p style=\"margin:0px;padding:0px;color:rgb(34,34,34);font-family:-apple-system,system-ui,Arial,sans-serif;font-size:16px;font-style:normal;font-variant-ligatures:normal;font-variant-caps:normal;font-weight:400;text-align:start;text-transform:none;white-space:normal;background-color:rgb(255,255,255);\">\u0412 \u0441\u0442\u0430\u0442\u044c\u044f\u0445 \u043d\u0430 \u0440\u0443\u0441\u0441\u043a\u043e\u043c \u044f\u0437\u044b\u043a\u0435 \u0442\u0435\u043c\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f<span>\u00a0</span><code style=\"font-family:Menlo,Monaco,&quot;Courier New&quot;,monospace;font-size:14px;white-space:normal;\">F#</code><span>\u00a0</span>\u0441\u043e\u0432\u043c\u0435\u0441\u0442\u043d\u043e \u0441<span>\u00a0</span><code style=\"font-family:Menlo,Monaco,&quot;Courier New&quot;,monospace;font-size:14px;white-space:normal;\">WPF</code><span>\u00a0</span>\u0443\u0434\u0435\u043b\u044f\u044e\u0442 \u043d\u0435\u043c\u043d\u043e\u0433\u043e \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u044f.</p>\u00a0<p style=\"margin:0px;padding:0px;color:rgb(34,34,34);font-family:-apple-system,system-ui,Arial,sans-serif;font-size:16px;font-style:normal;font-variant-ligatures:normal;font-variant-caps:normal;font-weight:400;text-align:start;text-transform:none;white-space:normal;background-color:rgb(255,255,255);\">\u0421\u0435\u0433\u043e\u0434\u043d\u044f \u044f \u043f\u043e\u043f\u0440\u043e\u0431\u0443\u044e \u043f\u043e\u0437\u043d\u0430\u043a\u043e\u043c\u0438\u0442\u044c \u0432\u0430\u0441 \u0441 \u043e\u0434\u043d\u043e\u0439 \u0438\u0437<span>\u00a0</span><code style=\"font-family:Menlo,Monaco,&quot;Courier New&quot;,monospace;font-size:14px;white-space:normal;\">F#</code><span>\u00a0</span>\u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0437\u043d\u0430\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0443\u043f\u0440\u043e\u0449\u0430\u0435\u0442 \u0442\u0430\u043a\u0443\u044e \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0443.</p>\u00a0<p style=\"margin:0px;padding:0px;color:rgb(34,34,34);font-family:-apple-system,system-ui,Arial,sans-serif;font-size:16px;font-style:normal;font-variant-ligatures:normal;font-variant-caps:normal;font-weight:400;text-align:start;text-transform:none;white-space:normal;background-color:rgb(255,255,255);\">\u0412 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0434\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0430\u0446\u0438\u043e\u043d\u043d\u043e\u0433\u043e \u043f\u0440\u0438\u043c\u0435\u0440\u0430 \u0432\u043e\u0437\u044c\u043c\u0435\u043c \u043e\u0434\u043d\u043e \u0438\u0437 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0445 \u0437\u0430\u0434\u0430\u043d\u0438\u0439 \u043f\u043e<span>\u00a0</span><code style=\"font-family:Menlo,Monaco,&quot;Courier New&quot;,monospace;font-size:14px;white-space:normal;\">WPF</code>, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0434\u0430\u044e\u0442 \u0441\u043e\u0438\u0441\u043a\u0430\u0442\u0435\u043b\u044f\u043c \u043d\u0430 \u0434\u043e\u043b\u0436\u043d\u043e\u0441\u0442\u044c Junior-\u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430 \u0434\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u0438\u0445 \u0437\u043d\u0430\u043d\u0438\u0439.</p>\u00a0<p style=\"margin:0px;padding:0px;color:rgb(34,34,34);font-family:-apple-system,system-ui,Arial,sans-serif;font-size:16px;font-style:normal;font-variant-ligatures:normal;font-variant-caps:normal;font-weight:400;text-align:start;text-transform:none;white-space:normal;background-color:rgb(255,255,255);\">\u0421\u0430\u043c\u043e \u0437\u0430\u0434\u0430\u043d\u0438\u0435 \u0437\u0432\u0443\u0447\u0438\u0442 \u0442\u0430\u043a</p>\u00a0<blockquote style=\"display:block;margin:12px 0px;padding:18px 20px;background:rgb(255,247,215);color:rgb(34,34,34);font-family:-apple-system,system-ui,Arial,sans-serif;font-size:16px;font-style:normal;font-variant-ligatures:normal;font-variant-caps:normal;font-weight:400;text-align:start;text-transform:none;white-space:normal;\">\u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0445, \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0445 \u0432 \u0444\u0430\u0439\u043b\u0435 Students.xml.<br /><br />\u0423\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0439 \u0444\u0430\u0439\u043b \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043e \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u0430\u0445: \u0444\u0430\u043c\u0438\u043b\u0438\u044f, \u0438\u043c\u044f, \u0432\u043e\u0437\u0440\u0430\u0441\u0442, \u043f\u043e\u043b.</blockquote><p style=\"margin:0px;padding:0px;color:rgb(34,34,34);font-family:-apple-system,system-ui,Arial,sans-serif;font-size:16px;font-style:normal;font-variant-ligatures:normal;font-variant-caps:normal;font-weight:400;text-align:start;text-transform:none;white-space:normal;background-color:rgb(255,255,255);\">\u041a\u043e\u043d\u0435\u0447\u043d\u043e, \u0435\u0441\u0442\u044c \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0446\u0438\u0438 \u0438 \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u044f \u043d\u0430 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e, \u043d\u043e \u043d\u0435 \u0431\u0443\u0434\u0435\u043c \u043a\u043e\u043f\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0438\u0445 \u0446\u0435\u043b\u0438\u043a\u043e\u043c. \u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u0447\u0430\u0441\u0442\u0438 \u0431\u0443\u0434\u0443\u0442 \u043f\u0440\u0438\u0432\u0435\u0434\u0435\u043d\u044b \u0432 \u0442\u0435\u043a\u0441\u0442\u0435 \u043f\u0440\u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438, \u0430 \u043f\u043e\u043b\u043d\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u0430<span>\u00a0</span><a style=\"background-color:transparent;color:rgb(153,34,152);text-decoration:none;\" href=\"https://github.com/FoggyFinder/StudentsWpfTestTask/blob/master/README.md\">\u0437\u0434\u0435\u0441\u044c</a></p>\u00a0<p style=\"margin:0px;padding:0px;color:rgb(34,34,34);font-family:-apple-system,system-ui,Arial,sans-serif;font-size:16px;font-style:normal;font-variant-ligatures:normal;font-variant-caps:normal;font-weight:400;text-align:start;text-transform:none;white-space:normal;background-color:rgb(255,255,255);\">\u0414\u043b\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u0441\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043f\u0443\u0441\u0442\u043e\u0439 \u043a\u043e\u043d\u0441\u043e\u043b\u044c\u043d\u044b\u0439 \u043f\u0440\u043e\u0435\u043a\u0442 \u0434\u043b\u044f .NET Framework \u0432 Visual Studio (\u0438\u043b\u0438 \u043b\u044e\u0431\u043e\u0439 \u0434\u0440\u0443\u0433\u043e\u0439 \u043f\u0440\u0435\u0434\u043f\u043e\u0447\u0438\u0442\u0430\u0435\u043c\u043e\u0439 IDE). \u0415\u0441\u043b\u0438 \u043d\u0435 \u0445\u043e\u0442\u0438\u0442\u0435 \u0432\u0438\u0434\u0435\u0442\u044c \u043e\u0442\u043b\u0430\u0434\u043e\u0447\u043d\u0443\u044e \u043a\u043e\u043d\u0441\u043e\u043b\u044c, \u0442\u043e \u043d\u0443\u0436\u043d\u043e \u0431\u0443\u0434\u0435\u0442 \u043f\u043e\u043c\u0435\u043d\u044f\u0442\u044c \u0442\u0438\u043f \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430\u0445 \u043f\u0440\u043e\u0435\u043a\u0442\u0430.</p>\u00a0<p style=\"margin:0px;padding:0px;color:rgb(34,34,34);font-family:-apple-system,system-ui,Arial,sans-serif;font-size:16px;font-style:normal;font-variant-ligatures:normal;font-variant-caps:normal;font-weight:400;text-align:start;text-transform:none;white-space:normal;background-color:rgb(255,255,255);\">\u0420\u0430\u0431\u043e\u0442\u0443 \u043d\u0430\u0434 \u043d\u0430\u0448\u0438\u043c \u043f\u0440\u043e\u0441\u0442\u044b\u043c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435\u043c \u043d\u0430\u0447\u043d\u0435\u043c \u0441 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0433\u043e \u0448\u0430\u0433\u0430 \u2014 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0433\u043b\u0430\u0432\u043d\u044b\u0445 \u0442\u0438\u043f\u043e\u0432 \u0434\u0430\u043d\u043d\u044b\u0445 (\u0442\u0435\u0445, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0435 \u0437\u0430\u0432\u0438\u0441\u044f\u0442 \u043e\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u0430).</p>\u00a0<p style=\"margin:0px;padding:0px;color:rgb(34,34,34);font-family:-apple-system,system-ui,Arial,sans-serif;font-size:16px;font-style:normal;font-variant-ligatures:normal;font-variant-caps:normal;font-weight:400;text-align:start;text-transform:none;white-space:normal;background-color:rgb(255,255,255);\">\u0412\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u0441\u044f F# \u2014 \u0442\u0438\u043f\u0430\u043c\u0438 \u043a\u043e\u0442\u043e\u0440\u044b\u0435 (\u043f\u043e\u043a\u0430) \u043d\u0435 \u0438\u043c\u0435\u044e\u0442 \u0441\u0432\u043e\u0438\u0445 \u0430\u043d\u0430\u043b\u043e\u0433\u043e\u0432 \u0432 C# \u2014 \u0437\u0430\u043f\u0438\u0441\u0438 (<code style=\"font-family:Menlo,Monaco,&quot;Courier New&quot;,monospace;font-size:14px;white-space:normal;\">Record</code>) \u0438 \u0440\u0430\u0437\u043c\u0435\u0447\u0435\u043d\u043d\u044b\u0435 \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f (<code style=\"font-family:Menlo,Monaco,&quot;Courier New&quot;,monospace;font-size:14px;white-space:normal;\">Discriminated Union</code>).</p>\u00a0<pre style=\"font-family:monospace,monospace;font-size:16px;display:block;overflow-x:auto;overflow-y:hidden;margin:0px;padding:0px;word-break:break-all;color:rgb(34,34,34);font-style:normal;font-variant-ligatures:normal;font-variant-caps:normal;font-weight:400;text-align:start;text-transform:none;background-color:rgb(255,255,255);\"><code style=\"font-family:Menlo,Monaco,&quot;Courier New&quot;,monospace;font-size:14px;display:block;overflow-x:auto;padding:17px 20px 20px;color:rgb(56,58,66);background:rgb(251,253,255);white-space:pre-wrap;border:1px solid rgb(229,232,236);\"><span style=\"color:#a626a4;\"><span style=\"color:#a626a4;\">type</span></span> <span style=\"color:#986801;\"><span style=\"color:#986801;\">Gender</span></span> = |<span style=\"color:#986801;\"><span style=\"color:#986801;\">Male</span></span> |<span style=\"color:#986801;\"><span style=\"color:#986801;\">Female</span></span>\\n<span style=\"color:#a626a4;\"><span style=\"color:#a626a4;\">type</span></span> <span style=\"color:#986801;\"><span style=\"color:#986801;\">Student</span></span> = {<span style=\"color:#986801;\"><span style=\"color:#986801;\">FirstName</span></span> : string; <span style=\"color:#986801;\"><span style=\"color:#986801;\">LastName</span></span> : string; <span style=\"color:#986801;\"><span style=\"color:#986801;\">Age</span></span> : int; <span style=\"color:#986801;\"><span style=\"color:#986801;\">Gender</span></span> : <span style=\"color:#986801;\"><span style=\"color:#986801;\">Gender</span></span>}</code></pre>\u00a0<p style=\"margin:0px;padding:0px;color:rgb(34,34,34);font-family:-apple-system,system-ui,Arial,sans-serif;font-size:16px;font-style:normal;font-variant-ligatures:normal;font-variant-caps:normal;font-weight:400;text-align:start;text-transform:none;white-space:normal;background-color:rgb(255,255,255);\">\u0417\u0434\u0435\u0441\u044c, \u043f\u043e\u0436\u0430\u043b\u0443\u0439, \u0441\u0442\u043e\u0438\u0442 \u043e\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c\u0441\u044f. \u0415\u0441\u0442\u044c \u0435\u0449\u0435 \u043e\u0434\u0438\u043d \u043c\u043e\u043c\u0435\u043d\u0442, \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u0432 \u0437\u0430\u0434\u0430\u043d\u0438\u0438 \u043d\u0435 \u0441\u0434\u0435\u043b\u0430\u043b\u0438 \u0430\u043a\u0446\u0435\u043d\u0442 \u2014 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0437\u0430\u043f\u0438\u0441\u0438. \u0412 \u0442\u0435\u043e\u0440\u0438\u0438 \u043c\u043e\u0436\u0435\u0442 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u043e\u0432\u0430\u0442\u044c \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u044b, \u0443 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0431\u0443\u0434\u0443\u0442 \u0441\u043e\u0432\u043f\u0430\u0434\u0430\u0442\u044c \u0432\u0441\u0435 \u043f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u044b\u0435 \u043f\u043e\u043b\u044f.</p></div>',\n  headers: \n   { received: \n      [ 'from mxback6o.mail.yandex.net ([127.0.0.1]) by mxback6o.mail.yandex.net with LMTP id Oy4HaqgM; Tue, 6 Mar 2018 16:14:41 +0300',\n        'from mxback6o.mail.yandex.net (localhost.localdomain [127.0.0.1]) by mxback6o.mail.yandex.net (Yandex) with ESMTP id DF3273741356; Tue,  6 Mar 2018 16:14:41 +0300 (MSK)',\n        'from localhost (localhost [::1]) by mxback6o.mail.yandex.net (nwsmtp/Yandex) with ESMTP id FoCIGMjnNc-Ef3K4xx9; Tue, 06 Mar 2018 16:14:41 +0300',\n        'by web59g.yandex.ru with HTTP; Tue, 06 Mar 2018 16:14:41 +0300' ],\n     'x-yandex-front': 'mxback6o.mail.yandex.net',\n     'x-yandex-timemark': '1520342081',\n     'dkim-signature': 'v=1; a=rsa-sha256; c=relaxed/relaxed; d=onlinepbx.ru; s=mail; t=1520342081; bh=gaT0Cm4oB2AS/d3cu5nDSosdipvAXZZF5+zwQNPokkU=; h=From:To:Subject:Message-Id:Date; b=a2bc6FBI4Ekitg0soY7va6YWGhiR/DU0Ro/z3N5l2oRLPvgXcjDPd5ha7hNQohawv AgOeAJjloLLnwxGtqNrAIouG9R71VtkzCO1UNxkElmcz0Xesy/zX7tC/ru6qk3CSqc E4JGLwRh5S9BjoExz9hzL4TlvDqXYH+BYJDu/i4s=',\n     'authentication-results': 'mxback6o.mail.yandex.net; dkim=pass header.i=@onlinepbx.ru',\n     'x-yandex-spam': '1',\n     'x-yandex-sender-uid': '1130000020367446',\n     from: '402@onlinepbx.ru',\n     to: 'Alex Malex <ya.alexmalex2017@yandex.ru>',\n     subject: '0i2-4roejpwfskldn',\n     'mime-version': '1.0',\n     'message-id': '<601841520342081@web59g.yandex.ru>',\n     'x-mailer': 'Yamail [ http://yandex.ru ] 5.0',\n     date: 'Tue, 06 Mar 2018 18:14:41 +0500',\n     'content-transfer-encoding': 'base64',\n     'content-type': 'text/html; charset=utf-8',\n     'return-path': '402@onlinepbx.ru',\n     'x-yandexsms-digest': '050d8b58959f03dd2513981afe6dc1b8',\n     'x-yandex-forward': '7eefaa6f17cb3bab01341734f69f1bde' },\n  subject: '0i2-4roejpwfskldn',\n  messageId: '601841520342081@web59g.yandex.ru',\n  priority: 'normal',\n  from: [ { address: '402@onlinepbx.ru', name: '' } ],\n  to: \n   [ { address: 'ya.alexmalex2017@yandex.ru', name: 'Alex Malex' } ],\n  date: 2018-03-06T13:14:41.000Z,\n  receivedDate: 2018-03-06T13:14:41.000Z }. ",
    "spectejb": "Thanks for confirming, @andris9! \nI am learning a lot about licenses and would love to understand more about the meaning behind not being interested in a \"completely free license.\"  Can you help me understand what you mean by EUPL not being free?  Thanks so much!. ",
    "flohdot": "Hi, I see that the rest of the nodemailer project has gone back to MIT, as per other repos and the website (https://nodemailer.com/about/license/). Is this one intentionally still using EUPL? Thanks! . ",
    "250ok-mikeyoung": "Thanks! I can work with this.  Any idea when this will be published as an npm package? . ",
    "peernohell": "I have investigate a bit.\nWhat I have found is in mail-parser.js line 143:\nif (this.curnode && this.curnode.decoder && this.curnode.decoder.readable) {\n            (this.curnode.contentStream || this.curnode.decoder).once('end', () => {\n                finish();\n            });\n            this.curnode.decoder.end();\nWhat is different from an email with content is that this.curnode.contentStream didn't exists. so we add the event on the decoder, but when we call decoder.end() as the decoder have state.ending and state.finished both true endWritable is not called.\nI'm not sur what is wrong but what I found inside mailsplit is that the last not is the rfc822 and not the one with only the header (content-type: text/plain + subject: ok) and think it's the main issue.\nI try to investigate mailsplit but I really don't know that library and I don't understand what is wrong, and why it stop on the parent node (rfc822 one).\nI hop I will give you some insight. I will try again to search the origine of the issue but it's start to be hard to me to find time and to understand exactly what's wrong in mailsplit :/\n. Hi,\nI have find a fix on https://github.com/andris9/mailsplit/pull/6 but as the maintener never give me a response I don't know if he will merge it :/\nAlso, if you want I have work on a monkey patch that can be added into simple-parser.\nYou just need to add this code after the last require:\n```javascript\n// monkey patch mailsplit.\nconst HEAD = 0x01;\nconst BODY = 0x02;\nSplitter.prototype.processLine = function (line, final, next) {\n    let flush = false;\nif (this.line && line) {\n    line = Buffer.concat([this.line, line]);\n    this.line = false;\n} else if (this.line && !line) {\n    line = this.line;\n    this.line = false;\n}\n\nif (!line) {\n    line = Buffer.alloc(0);\n}\n\nif (this.nodeCounter > this.maxChildNodes) {\n    let err = new Error('Max allowed child nodes exceeded');\n    err.code = 'EMAXLEN';\n    return next(err);\n}\n\n// we check boundary outside the HEAD/BODY scope as it may appear anywhere\nlet boundary = this.checkBoundary(line);\nif (boundary) {\n    // reached boundary, switch context\n    switch (boundary) {\n        case 1:\n            // next child\n            this.newNode(this.node);\n            flush = true;\n            break;\n        case 2:\n            // reached end of children, keep current node\n            break;\n        case 3: {\n            // next sibling\n            let parentNode = this.node.parentNode;\n            if (parentNode && parentNode.contentType === 'message/rfc822') {\n                // special case where immediate parent is an inline message block\n                // move up another step\n                parentNode = parentNode.parentNode;\n            }\n            this.newNode(parentNode);\n            flush = true;\n            break;\n        }\n        case 4:\n            // special case when boundary close a node with only header.\n            if (this.node && this.node._headerlen && !this.node.headers) {\n                this.node.parseHeaders();\n                this.push(this.node);\n            }\n            // move up\n            if (this.tree.length) {\n                this.node = this.tree.pop();\n            }\n            this.state = BODY;\n            break;\n    }\n\n    return next(\n        null,\n        {\n            node: this.node,\n            type: 'data',\n            value: line\n        },\n        flush\n    );\n}\n\nswitch (this.state) {\n    case HEAD: {\n        this.node.addHeaderChunk(line);\n        if (this.node._headerlen > this.maxHeadSize) {\n            let err = new Error('Max header size for a MIME node exceeded');\n            err.code = 'EMAXLEN';\n            return next(err);\n        }\n        if (final || (line.length === 1 && line[0] === 0x0a) || (line.length === 2 && line[0] === 0x0d && line[1] === 0x0a)) {\n            let currentNode = this.node;\n\n            currentNode.parseHeaders();\n\n            // if the content is attached message then just continue\n            if (\n                currentNode.contentType === 'message/rfc822' &&\n                !this.config.ignoreEmbedded &&\n                (!currentNode.encoding || ['7bit', '8bit', 'binary'].includes(currentNode.encoding)) &&\n                currentNode.disposition !== 'attachment'\n            ) {\n                currentNode.messageNode = true;\n                this.newNode(currentNode);\n                if (currentNode.parentNode) {\n                    this.node._parentBoundary = currentNode.parentNode._boundary;\n                }\n            } else {\n                if (currentNode.contentType === 'message/rfc822') {\n                    currentNode.messageNode = false;\n                }\n                this.state = BODY;\n                if (currentNode.multipart && currentNode._boundary) {\n                    this.tree.push(currentNode);\n                }\n            }\n\n            return next(null, currentNode, flush);\n        }\n\n        return next();\n    }\n    case BODY: {\n        return next(\n            null,\n            {\n                node: this.node,\n                type: this.node.multipart ? 'data' : 'body',\n                value: line\n            },\n            flush\n        );\n    }\n}\n\nnext(null, false);\n\n}\n```\nIf you want me to push a pull request with the monkey patch I will be happy to do so.. What is strange is it's not the case. It's looklike %3Ce42a3f99a-db3d-1873-a31f-7dded34af1bb@thedomain.com%3E\nI will try to do a pull request the week end. ",
    "markin-io": "@barrymichaeldoyle I suppose you're trying use mailparser in a browser. If you're using webpack, It may be fixed by adding node: {    fs: 'empty' } into your webpack config. Sadly it turned out that mailparser is extremely slow in the browser. For example it takes 269ms to parse 6.5MB email in Node, but 10 seconds in a browser. . ",
    "rohitsud": "I agree with @markin-io that Mailparser is slow in browser. In fact, it simply failed to render an email in IE while on Chrome/FF the performance was of the order of seconds to parse a simple email.. ",
    "petersalomonsen": "I think this Pull Request will solve the problem: https://github.com/nodemailer/mailparser/pull/195. This PR should also solve the problem described here: https://github.com/nodemailer/mailparser/issues/193. Yes I added handling for base 64 root nodes, but that created the issue when the root node was an attachment. So fixing my own issues here :-) I've pushed a testcase to my branch now. Will submit a new PR.. ",
    "Redsandro": "Forgive me. It's a Map, not an Object. A map is ignored when logging as %j.. ",
    "misteral": "Ping @zaach any news?. ",
    "MrXyfir": "Further testing today makes this even more confusing. My system forwards incoming mail received by smtp-server to different addresses. This works just fine when testing with Ethereal. I'm trying to write integration tests for this process by spinning up a second smtp-server to catch the forwarded mail, and only there do I have this issue with the parsed mail not containing text and html.\nTo better outline what's going on:\n\n[x] Sending test mail to main smtp-server [works]\n[x] Receiving and parsing mail at main smtp-server [works]\n[x] Forwarding mail from main smtp-server (via nodemailer) [works]\n[x] Receiving forwarded mail at Ethereal [works, text/html parsed properly]\n[ ] Receiving forwarded mail at test smtp-server [does not parse correctly!]\n\nThis leads me to believe the issue is either in how the test smtp-server is retrieving the incoming email (is it incorrectly structured?) or for some reason the test simpleParser() is not handling the mail correctly. The only other possible option I can think is that mailparser is less lenient in allow errors in the email structure and thus something must be corrupted during the forwarding process since the original incoming mail is okay.\nThis code can be run on its own to show the issue:\n``js\nconst simpleParser = require('mailparser').simpleParser;\nsimpleParser(Content-Type: multipart/alternative;\nboundary=\"--_NmP-3590418990518888-Part_1\"\nContent-Type: multipart/alternative;\nboundary=\"--_NmP-6de21f1195337336-Part_1\"\nFrom: foo@example.com\nTo: test@example.com\nSubject: Hi\nMessage-ID: aa21f8fb-9994-fa70-c40a-014fcc785bfc@example.com\nDate: Wed, 23 Jan 2019 03:21:08 +0000\nMIME-Version: 1.0\nSender: foo@example.com\nReply-To: 1--61--22e3ae91-cf4c-418a-9474-d2f2fd3deff4--reply@example.com\n----_NmP-6de21f1195337336-Part_1\nContent-Type: text/plain\nContent-Transfer-Encoding: 7bit\nHello world?\n----_NmP-6de21f1195337336-Part_1\nContent-Type: text/html\nContent-Transfer-Encoding: 7bit\nHello world?\n----_NmP-6de21f1195337336-Part_1--`).then(console.log)\n```\nIs this email invalid? If so then it must be an smtp-server issue. If it's valid then it must be a simpleParser issue. MimeValidator tells me:\nErrors: MIME syntax violation\n(line 2) MIME syntax violation: header field name empty (boundary=\"--_NmP-3590418990518888-Part_1\"\n)\n(line 4) MIME syntax violation: header field name empty (boundary=\"--_NmP-6de21f1195337336-Part_1\"\n)\nMIME Lint tells me:\nWARNING: duplicate header 'Content-Type' at lines 3-4\nERROR: duplicate param 'multipart' in header 'Content-Type' at lines 3-4\nERROR: duplicate param 'alternative' in header 'Content-Type' at lines 3-4\nERROR: duplicate param '--_NmP-6de21f1195337336-Part_1' in header \n       'Content-Type' at lines 3-4\nERROR: missing mandatory header 'return-path' lines 1-12\nOK: found part multipart/alternative line 14\nOK: preamble 14: \nOK: found part text/plain line 19\nOK: found part text/html line 25. SOLVED: I should know better than to blame anyone other than myself. The issue had to do with including the headers from the original email into the forwarded email.\nIt's still interesting to note that other email services did not have an issue parsing the incorrectly formed email -- providing the illusion that the email was correct! -- while mailparser did in fact have issues.. ",
    "WeiAnAn": "Yes, it is compatible with MIME parts.. ",
    "wiflux": "I am also getting same issue email with attachment and email with inline image. After parsing these emails not getting email body html. . "
}