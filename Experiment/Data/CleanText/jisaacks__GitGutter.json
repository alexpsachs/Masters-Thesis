{
    "micheleorselli": "+1 Same issue for me too. My color theme is solarized dark \n. ",
    "naro": "Same here. I've tried different themes. I'm on OSX.\n. I had the same problem but it was caused by directory tree symlinked to the main project tree. See #5\ngit_project_opened_in_sublime\n|\n|-- file1 (works fine)\n|-- dir1 (works fine)\n|-- dir2 (symlink to different GIT repository - all files inside this are marked as new by GitGutter)\nI've fixed it by normalizing to realpath (resolving symlinks). See https://github.com/naro/GitGutter/commit/ab342b6a90c34abbfc49c72a9f72251d238589b3\n. ",
    "nchaulet": "Same for me, on ubuntu.\n. Same on Ubuntu\n. ",
    "brunto": "+1 Same issue.\n. ",
    "monptitjojo": "+1 Same issue on OSX Mountain Lion\n. Same problem on OSX, git command need HEAD in uppercase. I change it again in the new version otherwise I see all line as new (the temporary file created is empty due to git command error).\n. ",
    "Calvein": ":+1:  same here on Ubuntu, even with Monokai and the default theme.\n. I still have the problem on Ubuntu but instead of those strange lines I have \"+\" everywhere even on files I havn't touched.\nEDIT : @mreq Thanks.\n. :+1: this is a great feature but for some reason my lines are 1 or 2 pixels bigger when the annotation is displayed, which makes the editor to jump and it's a bit distracting.. ",
    "mreq": "+1 for Ubuntu\n. @Calvein check #3 -> #9\n. Then README should say to use git clone ... \"Git Gutter\". Most of the users (including me) use the Package Control.\n. Great, but @mauricerkelly is right. This is just a temporary fix.\n. @jisaacks Wouldn't it be easier to correct the repositories.json in package control? So that the plugin and this repo have the same name.\n. @jisaacks definitely better. That's the right way to go.\n. +1 on Ubuntu, same\n. ",
    "cristinecula": "The problem is in Packages/Git Gutter/git_gutter.py\nThe paths for the icons use GitGutter as part of the path, but the package is installed in Git Gutter by the Package Manager.\n. Sorry about that,\nI didn't mean to add that to the commit.\n. I had to add that to my own version to make it work with files with DOS line-endings, but I chose to undo the change in the plugin. Instead, I have changed all files in my repo that had DOS line-endings to UNIX, which is a much better solution.\nIn this regard, git diff has the more useful --ignore-space-at-eol option, which diff lacks.\n. ",
    "jisaacks": "@cristinecula is right, I didn't realize the path would be different when installed via package manager. @mreq 's pull request will fix this for package manager but also break it for installations via git clone. I will work on a fix for this ASAP.\n. This issue should now be fixed. The install directory should update from Git Gutter to GitGutter correcting the path to the icon assets.\n. @Calvein as @mreq said, this issue was brought up in #3 and I just closed it so you should be good now. :)\n. @Pautomagi that is only if you install GitGutter-Edge.\n. >  For some reason my package manager only displayed the edge version\nThe install command will not list packages you already have installed. :)\n. @mauricerkelly you are right, I will add to this PR to make it work for both scenarios.\n. @mreq I plan to write a method that checks which folder exists and cache it as the location to use. That will be the real fix, I will merge yours into it as well though. I will work on this tonight. Thanks. :)\n. @mreq yeah I guess I could do that, but then it would show up in the menu as GitGutter instead of Git Gutter but maybe that is better than taking the performance hit of having to check which location is correct.\n. I put in pull request to package_control_channel that should resolve this issue when merged.\n. The pull request was updated, your installation directory should auto update from Git Gutter to GitGutter \n@mreq thanks pointing out what the problem was, (even though your PR is no longer needed it is still appreciated :)\n. This is resolved with e80f25ab34d212f53ac0b8e4208331db0f4eb6ed\n. I am fine changing from head to HEAD but I do not want to ignore white space,\nPlease remove that. You can make it a requested feature and I may add an optional setting you can set to make it ignore white space (or you can make that a separate PR) but I do not want that to be the default.\n. merged\n. merged\n. This is a problem, I am not currently sure the best way to handle this though, but it is something I am thinking about.\nThe problem is, the file is not in your repo, so as far as the diff is concerned, all the lines are new. \nA possible solution would be to parse the .gitignore to see if the current file matches any of the regex's, but this could be expensive especially for long .gitignore files. \n. @genezys That might work, I was also considering checking if lines-added == total-lines then don't process.\n. as @danillos  said this is a duplicate. Please see issue #1 \nFYI I plan to pull the PR and have this fixed tonight.\n. I am using the unix diff tool to determine the changes against the repo at HEAD. I believe that is just how unix diff treats changes, if new lines are touching modified lines, they are all treated as a single modified code block.\n. Cool, I am going to go ahead and close this issue then. \n. This is a duplicate and fixed by #4\n. Thanks. Merged.\n. I will load this on a Win7 machine sometime this weekend and see what I can figure out.\n. @joeybaker is this issue resolved?\n. @joeybaker hmm, I will put an entry like that into my color scheme and see if it borks it up for me as well, and see what I can figure out.\n. @stephenway your settings look exactly like mine (with just one of the color values different) and mine works fine.\n@joeybaker I swapped my settings with your example, mine still worked fine.\nCan you guys confirm that your installation of \"GitGutter\" in installed a directory named GitGutter and not Git Gutter. There was an issue before with the icons not working because the file path was incorrect.\nAlso when you fire up Sublime and get the borked looking icon type ctrl+` to open a console and look for an error coming from git_gutter.py\n. Merged.\n. Guys please give me some specific info:\n- Is it a file that is in .gitignore (a known issue #6)\n- Is it a new file that has not been added yet (via git add filename)\n- or is it a file that is already being tracked and marking lines that are unchanged ( since the last commit ) as changed?\n. Also there was a fix recently that fixed all lines showing as modified when they had different line endings. Have you upgraded to the latest version?\n. I just added 2 new commits that might resolve this:\n0fbfb3c855\nc4ddb487e2\nDoes the issue still happen after you update to the newest version/code with these changes?\n. Is this still an issue for anyone?\n. I am going to close this issue out, I believe it to be fixed and have not heard otherwise. Feel free to reopen if needed.\n. This is happening because an event listener is being fired on every modification. Not sure if there is anything that can be done about that, and it actually sounds like a possible sublime bug.\nIf you don't like it, you can turn off Git Gutter's live mode in your Package.sublime-settings file:\njson\n\"git_gutter_live_mode\": false\nYour undo will work normal again.\n. This is fixed with #22 \n. I am assuming this would also fix issue #12 (It looks like the permission denied problem was because it was trying to reopen an already opened file?)\n. Merged\n. @genezys if you want to add a troubleshooting section to the bottom of the README explaining what you just said, and steps to make diff available in windows command line, that would probably be very beneficial.\n. @genezys Sounds good :)\n. @ashmoran  follow these steps\n- In sublime, type **ctrl+** to open your console\n- Make a change to a file, look for an error in the console\n- If that did not generate an error; type this into your consoleview.run_command('git_gutter')`\nOnce you get an error message, if you cannot decipher whats wrong, post it here.\n. Can you confirm that it is installed?\nAre you trying this on a file that is currently being tracked by git, and you have made changes?\nIf yes for all, here are some possible troubleshooting steps you might use to diagnose the problem:\n- Open the GitGutter directory in your Packages directory\n- open the file git_gutter_handler.py\n- locate to the function __init__\n- print these lines after the variables are defined:\npython\nprint self.git_temp_file.name\nprint self.buf_temp_file.name\nNow when you run git gutter, in the same console you have been using, you should see the path to the 2 temp files it uses to process the diff.\nIf you see the files paths, opens them up and look at the contents, what do you see?\nIf you still don't see any output, try these steps:\n- In the GitGutter directory open git_gutter.py\n- locate the run function\n- make this the first line of the function print \"Yes git gutter is runnung\"\n- Run git gutter again and confirm it is actually running be seeing the above string as output.\n. @ashmoran No problem, glad it is working for ya, I am going to close this issue now then.\n. @garrettstj what OS are you using?\n. Obviously people are still having an issue so I am reopening.\n. I will look into this when I get a chance. In the mean time if you want to help trouble shoot this, something you can do is install via git and checkout older commits and see if you can pinpoint if/where this issue was introduced. \n. @aprescott I was noticing this last night. Very strange. Thanks for pointing it out.\n. @aprescott I pushed a change fbf65a8594f9309e5539133dd483f37334ad4429 that I think fixes the issue you reported (at least it did for me) can you pull/upgrade to the latest code and see if that fixes it for you.\n. @DavidLGoldberg did you try disabling GitGutter before step 1 and see if there is no longer a performance issue when you close and reopen?\nI followed your steps but I am unable to reproduce on my 2011 Macbook.\n. @JLMorales did you upgrade GitGutter from an old version, or was it a new installation?\nI think there is a bug when you upgrade GitGutter from a version before it had GitGutter.sublime-settings and it immediate starts trying to use GitGutter.sublime-settings after upgrading but is unable to until sublime restarts.\n. @JLMorales a lot as bean added since that fork. Something new is probably conflicting with you. You could try checking out older commits and try to pinpoint which commit screws things up for you.\n. @shmup you can set the git path without editing the source. You just need to specify it in the settings, see the read me\n. @shmup hmm, why don't you try adding print self.settings.get('git_binary') and check the console to see what it says? It should be what you have specified in the settings.\n. I think @AndreasHeiberg's comment is most likely what most people are experiencing and should resolve the issue. Is anyone still having trouble?\n. OK been 3 months and it seems like that is the issue so I am closing this for now.\n. @Iristyle You (or anyone who has used both) can write one and do a PR . I didn't find out about Modific until after I published mine, so I have never used it.\nFrom what I read on it's README, it seems like pro GitGutter is live mode and distinguishing icons. And the pros for Modific are it supports multi SCMs. But I don't know anything more than anyone who has read the README.\n. > Modific does listen to Sublime events and runs its hl_changes after save\nGitGutter runs as you type, you don't have to save to trigger it, that is what I meant by live mode. Also there is work being done to make GitGutter work in threads also.\nGitGutter also colors the icons based on your color scheme.\nI cannot say which is better, obviously if you are not using git than Modific is the one to use. \nYou can always temporarily disable Modific and try out GitGutter and see for yourself which you prefer.\n. @laughedelic, the features that Modific has that GitGutter does not, are not features that I care about. If someone else want to do a pull request I may merge them in, but I am not going to spend what little time I get to spend on side projects ( I am a husband and father ) to work on features I do not need or care for.\nGitGutter much better fits my needs than Modific, so why would I spend a lot of time rewriting Modific so that it can have the same features as my plugin? If someone else wants to update Modific to have live mode, thats fine and thats their right ( this is all open source stuff :)\nIf Modific fits your needs better than GitGutter than please go ahead and use Modific. If you want to have the best of both worlds, then put some effort into it and do a pull request to add the features you like from one to another.\nI do like the idea of being able to look at a block of modified code and see what it was, and even convert it back to what it was. I would only want this feature tho if it was well polished, and I don't believe ST2 offers a way to add this feature in a polished way. I do not think the way Modific goes about it is very polished, but Aleks was working within the contraints of what you can do with a ST2 plugin. Maybe the new ST3 will make adding polished features like this possible.\nI hope I am not coming across like a dick. I put a lot of work in GitGutter and it has become quite popular and I do not want to throw that away because their is a similar plugin made by someone else. I do think the major advantage of GitGutter is the live mode, I do not think it would be so easy to just add this feature to Modific. It was not easy getting the performance of GitGutter able to support live mode but I designed it that way from the start.\n. There has been a lot of ports of git gutter so I added a section listing them in the read me and included modific in the list.\n. This does work, but for me it is making it run slower, I am started to get the slow plugin notification.\nNow sure why that is, I pulled your code into a branch, I can switch between your branch and master and the notification is always showing up here, but not in master.\nI also tried merging in your other threading PR but that didn't help either.\nI benched marked it using start = time.time() in the beginning of git_gutter.run, and print str( time.time() - start ) at the end. In master it runs usually around 0.008 seconds, here it usually runs at the same pace, but with an occasional spike to around 0.13 or so, but that is enough to get the warning.\nPlease look into this and see if you can do anything to speed it up, I would very much like to pull in this fix but I can't have the slow plugin notification constantly popping up.\nThanks! :)\n. @frantic, I Don't think #23 is the issue, not sure what it is. It is frustrating because the undo works so much better this way. I restarted my computer and didn't run anything else but sublime and a terminal, still I get this:\n\nA plugin (git_gutter_events) may be making Sublime Text unresponsive by taking too long (0.028443s) in its on_modified callback.\nThis message can be disabled via the detect_slow_plugins setting\n\nFor comparison I am using a MBP Core i5/2.4, 4GB, HDD, so my system isn't quite as fast as yours.\n. @frantic I think that last commit fixed it, I tested for a few minutes and couldn't get it to warn me anymore. \n. @frantic please pull master back into this and fix the conflicts, thanks!\n. @frantic I am not very experienced with python actually .. Is the defining of exec_diff inside of diff and write_git_file inside if update_git_file in order to create a closure around the callback? \n. @frantic the code looks good, I just need to test it locally before merging, I am leaving for holiday tonight, so it may be a couple days before I get to it, but didn't want you to think I was leaving ya hanging.\n. @frantic, I was testing your code tonight, there is a small issue.\nThe fix to the undo had originally created an issue ( #26 ) where there was a flicker when adding/removing lines. It was because there was a small delay (the timeout). I was bugged by the flicker so I figured out a fix, if we used a window command instead of a text command, we don't have a speed problem anymore (so we don't need the timeout) and the undo does not break.\nOk so when I merge this into that fix, the flicker comes back. I think it is because there is a delay when waiting for the callback from the second thread.\nTo reproduce, insert a few lines, then delete all the inserted lines, watch the icons - you will see the \"+\" marks flicker into the wrong spot for a split second while waiting, then go to the correct spots.\nIt is minor but it is enough to distract me while I am coding.\n. @frantic I wonder if there is a way we can make the threading a feature that can be turned on in the settings like the git_gutter_live_mode setting. Speaking of that setting, it might also solve your problem.\n. @frantic just wanted to let you know, there is now a setting (for ST3 only) called non_bocking that you can turn on to make it run in a separate thread. :)\n. The only think I can think of, would be to keep a track of what modifications are in the file at what lines, then see the cursor line position, then move the cursor to the first one after where is it at, or to the first if it is after all of them.\nThis isn't something I personally would want to work on at this time, I would probably accept a pull request though.\nAlthough, what I think would be really awesome, would be to draw onto the mini map, the locations of the modifications, then you could jump to them by clicking on the mini map. I haven't had time to look into that though.\n. This is now implemented via PR: #64 \n. Can no longer reproduce.\n. @AlexanderRuf If you add the instructions to the read me, I would gladly merge them in. :)\n. Merged, and yep you did it right! :)\nAlthough you could have added fixes #28 to the commit to have this issue closed automatically when merged. Just FYI for next time.\n. @bradsokol, sorry for not getting back to you sooner. Go ahead and release your own version, I don't want to have to support other vcs types. I also really don't want to change the name since it is already established.\nI would appreciate it though, if you kept a link to my repo in your read me.\nThanks.\n. @monptitjojo Consider making this a pull request if you want it merged in.\n. Fixed by #33 \n. @alisey I wanted to let you know I am not ignoring your PR, just been busy lately. Hope to find time to get to it soon.\n. @alisey would you mind updating the windows section of the README to reflect your changes here?\n. @gotva it looks like I just needed to remove that break. That last commit was by @monptitjojo maybe he can clarify what the intention actually was there. \n@gotva Reopen if this doesn't fix for you, (Don't know how I let that slip by w/ an err and merge it in) I was only able to reproduce and fix the first error in your issue though (but the second doesn't look like a real issue)\n. @badmanski your problem is more related to #168 than this old issue.\n. Unfortunately I am not rich enough to buy a retina macbook to test on :(\nYou can do a pull request, it should be as simple as adding 2x size icons and adding a settings option to turn on \"retina\" mode and use a different icon based on that setting. I am curious how it looks in retina though, I always assumed it would look OK just smaller.\n. Hmmm.. So it stretches the icons causing a blur? I would have assumed it would just render them smaller but crisp.\nIf that is the case then it might not be as simple as I suggested, I mean, it stretched the small ones then it may also stretch 2x icons just making them really big and blurry.\nI am not sure how that works in regular applications, (I am normally a web developer)\nGlad you like the plugin :)\n. @unphased did you ever test 32x32 icons? \n. @brentd look at his fork .. He just added a 2 to the name of the hi res images. \n. @WMeldon so you are using the hi-res icons for the non hidpi screens too? Are you going to make a pull request?\nAlso I was curious.. haven't tested yet myself, does GitGutter and BracketHighlighter play nice together?\n. Fixed by #63 \n@unphased If you still have an problem with icon placement at different text sizes please open a separate issue. \n. @unphased it's based on dicts from your theme, instructions are in the read me. \n. Thanks, I believe @wuub is actually working on this, https://github.com/wuub/GitGutter/commits/master\n. @wuub yeah I was wondering why you were porting GitGutter but not SublimeREPL. Remember to do a pull request for your changes when they are ready. :+1: thanks.\n. @JeanMertz @kingkorf, I have not checked out ST3 yet myself, however I am assuming @wuub is still working on it since he has not made a pull request yet.\nWith those changes, do the icons still work in ST2 and just not in ST3 or are they not working in either?\nIf they are not working in either version, then either the path to your icons is wrong or the png file format is wrong. (There are multiple PNG formats PNG-8/PNG-24 and only one ( I forget which ) is supported for use as icons in ST2 not sure about 3 )\nHowever, if it IS working in 2 but not in 3, then that probably means the rules for display those icons has changed from version 2 to version 3 and will require some investigation. For example, if v2 only supports PNG-8 and v3 only supports PNG-24 then we would have to use 2 sets of icons in the correct format for each version.\n. @wuub ouch!\n. fixed by PR #40 \n. @ccampbell I was very surprised that this _did not_ break my colors. I was expecting the colors to no longer work because I have no section in my theme file defined as *.git_gutter\nSo I am guessing if it looks for markup.deleted.git_gutter and does not find it, it will fall back to markup.deleted?\n. Fixed by #38\n. @maelnor, that is weird. I don't believe there is any reference to UTF-8withBOM in the code. Please open an issue with steps to reproduce.\n@wuub thanks for your work ok this. I have a lot piling up right now (and I want to take care of some of the older things first) but I will get to this (and test in OSX) as soon as I can.\n. @wuub, Can you please update your PR so it can be automatically merged.\n:+1: Thanks!\n. Fixed by #42 \n. @sorahn Thanks for reporting. If you make a pull request that does this I will accept it. It shouldn't be very hard, just make it fall back to what it currently is now if not set in preferences. For an example of how to make a preference fall back look here I am falling back to true if live mode is not set.\n. @sorahn give it a try, you may like Python. If you have trouble just do a pull request so I can see what you have and let me know what you are having trouble with and I will be glad to help out. Or if that doesn't sound interesting to you, that's cool too; I can work on it. :)\n. @sorahn when you create a pull request it automatically creates a new issue. It's just part of the process, so don't worry about it. Your code looks solid, does it fix it for your git installation? can you also show an example of what your preferences looks like to set the git path. I may want to add that to the read me so other people can benefit from it as well. Thanks. \n. > I thought you could attach code to existing issues.\nNot that I am aware of. \n\nI will test this tomorrow on my machine (I'm on my phone right now) and merge it in. :+1: \n. @sorahn I got on my wife's macbook and installed git via homebrew so I could test this. Funny thing is, it installed git here: /usr/bin/git as well as /usr/local/bin/git which is a symlink to /usr/local/Cellar/git/1.7.11.1/bin/git \nWhen I run which git it lists the one at /usr/bin/git and it worked with GitGutter in Sublime without needing to specify the path.\nSo I am curious why your installation of git via brew did not put one in /usr/bin/git. I wonder, can you try copying your symlink at /usr/local/bin/git to /usr/bin/git and see if that fixes the issue. If so, that may be a better fix, and I would rather not add more complexity to the GitGutter codebase if I don't need to. If that works, as a bonus, it should also work for your other git plugin that you said could not find git.\nTry it and let me know.\n. @sorahn so if i understood you correctly it sounds like the symlink is the better solution and this pull request is no longer needed. Do you agree?\n. Alright I merged it in. Sorry it took so long, I got struck with a pretty bad flu.\nThis is is not fixed by 5eed7662682dba18db49366afb76ab658c81d229\n. Sublime was working in 3, there might be a regression. Please check out the commit 643fc48b0213c36ba30031857c4ec07410b71aa4 and see if that fixes it.\n. I wonder if it would also be worth while to submit this issue to sublime package control\nMaybe @wbond can shed some light on this issue. I currently have no idea what package control does.\n. Related: https://github.com/wbond/sublime_package_control/issues/349\n~~This could potentially be resolved by a flag in the packages.json file to unpack the plugin.~~\n~~vote for this here: https://github.com/wbond/sublime_package_control/issues/291~~\nPlease go to sublime_package_control/issues/349 an vote for the .no-sublime-package which would fix this.\n. This should now be fixed by #52 \n. How is this different from #45?\nAlso what is the purpose of the sublime menu?\n. @RazerM, I pulled in the other request for 2 reasons:\n1. I asked the the author to do them that way so I felt like I owed it to him.\n2. My other setting live_mode is implemented the same way.\nHowever, if your method really is the proper way of doing it, I would like to merge this in as well.\nIf you would be so kind as to do these steps so I can merge it in:\n- Update the live_mode setting to also be the same way\n- Update the README and explain how to set these settings\n- make this branch auto merge able.\nActually, now that I think of it, I am not sure if live_mode should be a global setting. People might just want to use in on a case by case basis if certain repos/files cause performance problems. What do you think?\n. Actually as I look this over more, I do think this is a cleaner way to do it, and I definitely think all the settings for the package should be consistant.\nSo If you don't mind doing those steps listed above, I will gladly merge this in.\nThanks. :+1: \n. @sorahn I appreciate the offer. I think most of the work is already done in @RazerM's code, it just needs some additional tweaks. I would also like to give him the opportunity to get his code pulled it, since he put effort into it already.\n. @RazerM that sounds good.\n. @RazerM looks good, I will try to get to this tonight.\n. Work has been done to make it compatible for ST3 #40\nWhat is not working? No icons show up? Did you open the console ctrl+` and look for errors?\n. Try changing these 2 lines:\nhttps://github.com/jisaacks/GitGutter/blob/master/git_gutter_handler.py#L77\nhttps://github.com/jisaacks/GitGutter/blob/master/git_gutter_handler.py#L142\nChange the string git to /usr/bin/git see if that fixes your problem. It looks like it is having trouble finding the git executable, this way you will specify the exact path.\nIf that fixes it, I have a couple pull requests in the pipeline that add the ability for you to set the path to git (that I will merge in soon)\n. Thanks. I haven't tested yet but by the looks of it, I think it may break in v2. If so, some work would need to be done to ensure it is backwards compatible.\n. I just merged a pull request that was related to encoding. Can you update and see if that fixes the problem?\nIf not, are any of the .js files open source? If so please link to them, trouble shooting would be easier with access to a known file to cause the error.\n. Can you gist me a javascript file that produces this error?\n. @muzehyun I am unable to reproduce, can you please gist me a file that produces this error?\nThanks.\n. I don't believe there is any way (available to plugins via the API) to detect if an icon is clicked on.\n. I would like this feature as well. I do not know of anyway to tap into the mini map from a plug in tho.\n. @wpowers in the mean time, the jump to next/prev change might help you.\n. @davidfooks Not that I am aware of.\n. Cool. I wonder if this resolves anyones issues in #20.\n. Hmm. I did notice that Sublime 3 API introduced async (non blocking) methods for all events that run in separate threads. ( e.g. on_modified_async )\nI wouldn't want to make GitGutter run in a separate thread by default because it causes a very small delay from when you make an edit to when the gutter icons update (and I did not like that.) But I was considering making a setting to specify to use the async non blocking events. That might solve your issue, it would be a ST3 only feature tho.\n. I added a setting non_blocking that will run GitGutter in a seperate thread and should not block/lock up sublime.\nThis is a ST3 only feature because it relies on the *_async events introduced in ST3.\n. If you look in this file I would use some print statements to make sure that the asynchronous methods (and not the synchronous) are the ones that are actually running.\n. @despairblue Thanks for the info, if you would, please open a new issue about settings being ignored. (you can link to this issue if you want)\nI would rather not reopen this issue since what you are describing doesn't seem to match the original bug reported.\n. From the screenshot of that plugin it looks like it is using all the gutter icons. There is only 1 allowed per line. Just a guess but I bet the VintageLines snags them all up on load leaving GitGutter useless.\nI don't think any plugins that use the gutter real estate will be compatible.\n. @deiga are you using both plugins? do the gitgutter icons cover the vintage line numbers?\n. I am closing this issue. In my opinion, you should decide what you want your gutter real estate used for: VintageLines, GitGutter, BracketHighlight, etc. and use one. If you decide to use more than one I cannot guarantee or support how they play together.\n. There would have to be a change to Sublime's core to allow for multiple\ngutter icons and I really don't see that happening.\nOn Saturday, March 9, 2013, David L. Goldberg wrote:\n\nSublime has no ability to stack gutters left to right? If so I'd probably\nput line number, git, or vice versa, not sure which would be more\nreadable yet :)\nWould this have to be a change to sublime's core or might it be\npossible via a plugin, if so I can try to work on it eventually.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/jisaacks/GitGutter/issues/58#issuecomment-14671772\n.\n. Right, because we are trying to get the diff for a file that isn't committed yet. GitGutter should still work but yeah it shouldn't blow up your console with errors.\n\nIt would be possible to check git for if the file exists first, but I don't want to have to run yet another external command for every operation. I think the best answer would be to just trap that error in a try-catch\n. SO it turns out I already put that inside a try catch see code\nI just tried to reproduce your error myself and was unable.\nWhat is the whole stack trace of the error?\n. @gwenzek thanks for brining this to my attention. I do not have time to work on this feature myself right now. If anyone wants to try to tackle it, go for it.\n. Merged. So weird thing I noticed. Most of the files went up in bytes (which you would expect since they went up in size) except for the changed.png which actually went down in bytes. \n. Yes I was notified but I haven't had time to look at it yet.\nOn Saturday, March 9, 2013, David L. Goldberg wrote:\n\njisaacks, can you do me a favor and let me know if you get this request or\nnot. It's my first time doing a pull request, pretty sure it will message\nyou etc...\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/jisaacks/GitGutter/pull/64#issuecomment-14665562\n.\n. I don't have time to thoroughly look at this right now but I glanced at it and have 1 question:\n\nIn the move_to_change method you are capturing an exception, what exception are you expecting and why?\n. Merged. However, I kind of did butcher it. Feel free to look at the changes I made and ask any questions.\n. Try closing sublime completely and reopening it. The upgrade changes the way live mode is set, but during the upgrade the sublime settings file gets loaded into sublime, but sublime won't be able to read it until you close/reopen sublime.\n. If you look at where it reads/loads the git_binary path from settings, it falls back to \"git\" if it did not get a setting. It would probably be wise to make the live_mode setting use similar logic to make it fall back to \"True\" if it did not get anything from the settings.\nBasically something like this after it sets live_mode status:\npython\nif self.live_mode is None:\n    self.live_mode = True\n. Fixed by #66 \n. 1. I am a little confused by that error message because nothing in GitGutter actually ever refers to _GitGutter.git_gutter_change. Only thing I can think of is that sublime is looking for that based on the file name _git_gutter_change.py I wonder if you try renaming that file to git_gutter_base_change.py if it has any effect?\n2. > With package control the plugin has issues with decoding the graphics.\nWhat build number are you using? This was an issue but should be fixed after build 3014\n. What build did you have before? was it a dev build? Because 3019 is the first non dev build to introduce:\n\nAPI: view.add_regions() will accept package relative paths for the icon\n\nWhich was actually added in dev build 3014\nDid you install via git clone or package control?\n. How was it installed before? via git clone?\n. @wagenet are you still having an issue?\n. Its all good, I am going to go ahead and close this issue then, thanks.\n. I love the idea. I currently have no idea if it is possible to put icons in either of those places, if its possible I would love to work on such a feature. I haven't looked at the new ST3 API features in depth tho. If you know of a way or another plugin that puts icons in those places I love to know about it. Thanks. \n. @paulandrieux  This isn't possible with the current API\n. @willstott101 thanks for sharing. From first glance, it looks like they cannot be set via the API. Usually they list that type of thing prefixed with API:. But maybe it just isn't documented (wouldn't surprise me.)\n. As far as I know, that cannot be manipulated in the way necessary for gitgutter to work. If someone can show me an API that allows it, I would love to add the functionality. Until then I am going to close the issue.\n. Are you not able to use the git path setting to solve this?\n. @xu-cheng were you able to get it working?\n. Well I am going to go ahead and close this then.\n. In the on_load_async method you have if not self.non_blocking: but shouldn't it be if self.non_blocking:\nAlso I am still trying to figure out why the onload methods are needed?\n. I understand now. I am mulling it over.\nThere is a few things here. \nThis is going to be a rarely used setting, so I don't want to have a lot of code devoted to it. \nI am also wondering if live mode should just be updated to only work on save, to address both problems, I am assuming people would only use those settings to gain performance, so if you are using one you are probably going to want to use both anyways, I think.\nI am concerned about when you are in the standard way, if loading sublime will trigger GitGutter to run twice (on load, on activated) and slow down your boot up time. I don't think it would be too terrible for non live_mode users to just have to click ctrl+s after opening a file to trigger it.\n. @DavidLGoldberg I strongly prefer live mode. I know many people do like live mode, and it's one of the most requested features for the vim port of GitGutter. Its interesting to see your point tho, I never thought anyone would opt out of live mode for any reason other than performance.\n@hugo-agbonon I don't see anything wrong with this code. When I get a chance to test it I will most likely merge it in. I don't have time right now though, I have a presentation I am giving monday and I need to prepare for that.\n. Can you give some more details please. I personally have never used that feature of git.\n. @kofalt that makes sense. Thanks for explaining. You are correct that is where the diff is happening but you may not have noticed that its not actually diff'ing the file or the repo. There is a function called update_buf_file that creates a temp file with the contents of what is in sublime text. There is another function called update_git_file that creates a temp file with the contents of what git has for that file. Then it asks git to diff those 2 temp files. So I am wondering if maybe in the update_git_file function, it can ask for the contents to be smudged, since the contents of the sublime file are already smudged (if I am understanding correctly.)\n. It introduces a slight delay between modification and icon change. Because of this, if you delete a line that has an icon on it, the icon will quickly (and incorrectly) appear on the line below it (the line that your cursor is now on). This only lasts for a fraction of a second before the icon disappears.\nMost people won't be bothered by this and may not even notice it at all. I however, find it distracting.\n. Thanks for brining this up, I never noticed because I have never used bookmarks before. I am not sure if there is a way to determine if a specific line already has an associated region (icon), or a way to get the key of such region.\nIf there is, then I could add a setting to GitGutter that allows you to specify which regions not to overwrite. (e.g. bookmark, bracket-highlights, etc.)\nI took a glance at the API and all I see is the View.get_regions(key) method. I will have to experiment to see if I can use the keys set in a setting to determine if a specific line has a region for that key, and if so not to mark it.\n. I just notcied the original issue was reported months ago. I guess it just wasn't on my radar until it just got the bump by @lorin \n. @abusalimov I have no idea what you are talking about\non a side note: The possible solution I referred to a while ago, I have tested and confirmed it would work. However you would have to specify what regions were protected for GitGutter to not override them. Then anytime GitGutter is about to add an icon, it would have to grab all the regions for all the protected regions (each protected region could have many regions of that type on the screen) and make sure that non of them occupy the space that GitGutter wants to put an icon. I am afraid of this slowing GitGutter down, so I am not sure if this is a feature I want to add. It may only be useful in non blocking mode, which is only available in ST3.\nAlso the OP states:\n\nI can't tell from the line wether there's a bookmark, that's annoying. \n\nIf you told GitGutter to not override then specific regions you would have the reversed problem:\n\nI can't tell from the line wether there's a change, that's annoying. \n\nSo again, not sure if this feature is worth it.\n. @abusalimov I understand the logic required to make this work, I have a working branch locally with the functionality. And in my code as in your gist (in the lines_of_regions method) it requires a nested for loop.\nLets say the user has specified 30 protected regions (they could easily if using SublimeLinter and BracketHighlighter) and lets says each protected region type has 5 actual regions by that name on the view.\nThat would be 150 calls to lines.update(line.begin() for line in self.view.lines(region)) just to check if it is OK to place an icon. And it would need to do this for every keystroke if using live mode.\nI am not saying no to this feature, but these are the things that affect the decision. I may just add the feature with a warning that I recommend only using this feature in non blocking mode (which is ST3 only.)\n\n@lorin I have also considered a toggle for git gutter to clear the icons, that would allow you to toggle back and forth between viewing git_gutter/bookmarks/whatever\n. @abusalimov I added a branch called protected-regions it defaults to no protected regions so you would need to specify any you want to protect in your user settings. Please check it out and let me know your thoughts.\n. @abusalimov \n\nfor every single line of the resulting diff \n\nNot exactly, just for every line that has changed and GitGutter wants to place an icon on. But either way, you are still correct, better to only calculate it once.\nWould you like to make a pull request with your version?\n. @abusalimov well in the case of boomarks you can listen for text commands via the on_text_command sublime text event listener and check the command name to see if it contains the string bookmark. That doesn't solve the general problem though.\nIt would be nice if in the method where we are checking for protected regions, if a protected region is found, place an event listener on the region for when it gets cleared. I don't think that is possible.\nI'll keep thinking about it and see if I can come up with any clever ideas.\n. Lets keep this feature in the protected-regions branch for now.\n. I merged the protected-regions branch into master. However, I am trying to get people to test it out and report back to me (using GitGutter-EDGE) before I cut a release. Unfortunately, I haven't had a report of a single user installing and using protected-regions.\n. Thanks @develucas, what optimizations were you thinking?\n. This sounds like a reasonable request, I will look into it when I get a chance. I might not have much time to devote to OSS during the next couple months though. I don't think it would be too hard if anyone wants to take a shot at it. Basically there are events that trigger and then GitGutter adds the view to a collection, then runs on the view. If the add method on the view collection checked to see if it was in a list of ignored files from the settings, and then only proceeded to run the git_gutter command if not.\n. Do you know what part of your theme was overwriting your settings? Its possible the theme already had entries for markup.inserted and markup.deleted and the correct solution would not be to add new entries for the same thing after the existing ones, but instead to update the existing ones.\nAlso if you specify markup.deleted.git_gutter etc. then it should work from anywhere in your settings and not be overwritten.\nPlease try and check your theme, if I am correct than I would rather merge a pull request that just changes the example settings to specify markup.whatever.git_gutter\n. @nZac it looks like there is another definition with the same scope:\nstarting at line 406:\nxml\n        <dict>\n            <key>name</key>\n            <string>Inserted</string>\n            <key>scope</key>\n            <string>markup.inserted</string>\n            <key>settings</key>\n            <dict>\n                <key>background</key>\n                <string>#b5bd68</string>\n                <key>foreground</key>\n                <string>#1d1f21</string>\n            </dict>\n        </dict>\n        <dict>\n            <key>name</key>\n            <string>Deleted</string>\n            <key>scope</key>\n            <string>markup.deleted</string>\n            <key>settings</key>\n            <dict>\n                <key>background</key>\n                <string>#cc6666</string>\n                <key>foreground</key>\n                <string>#1d1f21</string>\n            </dict>\n        </dict>\nNotice the scopes are the same: markup.inserted, markup.deleted. I am guessing when you added your additions to the beginning, these definitions were overwriting them. And when you added to the end, yours were overwriting these.\nHowever, if you made your scopes the more explicit markup.inserted.git_gutter, markup.deleted.git_gutter then you should be able to put them anywhere without them getting overridden.\nI am pretty sure that is what is going on, feel free to test and confirm/debunk my suspicions.\n. Can you please give steps on how to reproduce this?\n. I have been thinking about this issue.\nThe only reason it would make sense to also look in a global user settings for the git path, would be so the user can set the git path in one configuration file and have it picked up by all plugins that use git.\nSo I am not sure of any plugins that use git except for this one\nSo if you can show me another plugin, that is also using this setting, or get them to agree to use it, then I will pull it in. Otherwise it just feels like two separate places to set the same setting which might just confuse users.\nLastly, I believe you should use the git gutter setting preferred over the user setting. This is because the git gutter setting is more specific. If someone sets the global user setting to one git path and the git gutter setting to another git path (hardly likely but still) they would probably expect the git gutter setting to override the user setting because they are applying that one specifically to git gutter.\n. @shmup It looks like the git_command you speak of is not in Preferences.sublime-settings but in Git.sublime-settings so you cannot set it in the single user prefs file to back up either right? Or am I missing something?\nI wonder if we can get them on board, so people who use the Git and GitGutter package can just specify the git_path in one place and have it picked up by both plugins.\nYou do bring up a good point with only having to back up one file. That is a compelling enough reason on its own. :)\n. @shmup I opened an issue with him proposing the idea, we will see what David says.\n. @DavidLGoldberg off topic, but this isn't you is it? I didn't realize a billionaire was contributing to my project lol.\n. The command that is used to get the diff is git diff -U0 --no-color which in your example would produce output like\ndiff --git a/t b/t\nindex 7898192..c30627b 100644\n--- a/t\n+++ b/t\n@@ -1 +1,12 @@\n-a\n+a,\n+b\n+b\n+b\n+b\n+b\n+b\n+b\n+b\n+b\n+b\n+b\nThe part specifically that we look at is @@ -1 +1,12 @@\nThis basically means that this hunk of changes originally started at line 1 and occupied 1 line, it now starts at line 1 and occupies 12 lines. There isn't much data in that bit to determine which of those 12 lines are new/modified so it counts the whole hunk as modified.\nYou theoretically could probably parse the extra bit at the end of the output to determine this, but it would be complex, and this operation needs to be done with performance in mind since it is runs live as you type each character.\n. You could avoid the icon thing by parsing the modification blocks and only adding the appropriate insert icons and treat removed lines as is. But yeah, I am currently satisfied as is, and don't really feel compelled to dig into that right now either.\n. @unphased are we good to close this?\n. Do you still get this issue?\n. The error sounds like it was coming from trying to run a command on a window/view before its ready. I remember doing some work to fix that, so I don't think the error would should up anymore anyways. Feel free to reopen if you try sublime again and they reappear.\n. You can always set the ignore_whitespace setting to true.\n. This feature is already available, you can add git_gutter to the end of the scope.\nSo instead of \n\ngitgutter.deleted\n\nlike you suggested, it would be:\n\nmarkup.deleted.git_gutter\n\nWhich safely falls back to:\n\nmarkup.deleted\n\nI would however except a pull request that updates the read me, to explain this.\n. Go into the file and print out what it reads when it loads the settings in\nthe events file. See if its loaded the settings correctly. Also if you only\nused it for performance reasons I would recommend trying the non blocking\nmode in st3.\nOn Friday, April 5, 2013, Saad Malik wrote:\n\nOne more thing, I added the GitGutter package using the command line cd\nPackages && git clone ..... In the latest Package Control for ST3, the\npackages aren't expanded and trying to modify the GitGutter setting files\nwas givinlg \"Unable to open file\" error messages.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/jisaacks/GitGutter/issues/87#issuecomment-15989302\n.\n. This is the event file I was referring to where the settings are loaded. \n\nIf you put this inside that method:\nprint \"The settings are:\"\nprint self.settings.get('live_mode')\nprint self.settings.get('non_blocking')\nThen see what is outputed to the console. You open up the console with ctrl+`\nMake sure you are editing the file that is accessed via the Preferences > Package Settings > GitGutter menu.\n. @DisposaBoy This runs overtime there is a modification. I am trying to limit how much code is executed each run so it doesn't bog down if you are typing really fast. So I am unsure if not caching would be a good idea.\nI think waiting for plugin_loaded sounds right though, I would pull that change in.\n. @sigod can you please explain what patch fixed the issue?\n. @sigod OK, so the actual bug then is the reading of the settings. Are you using Windows as well? What version?\n. @bizoo I still need to look into why the settings are not being set. I have also been considering making non blocking the default in verision 3. I will take a look your link when I get a chance. Sorry about the delay, just been really swapped with things lately.\n. OK so after doing some reading, it looks like the settings are not available until after the plugin is loaded. I was not able to reproduce the issue locally but the settings are loaded when the GitGutterEvents class is instantiated. I am going to take a guess that the issue is this sometimes happens before the settings are ready (before plugin has loaded) so they are all getting set to None. I used the code @bizoo linked me to, to load the settings, I also made all the event handlers check to see if the settings have loaded yet, attempt to load them if not, and finally do nothing if the settings are not available yet.\nThis is all done in 6b54e38523 please update to this commit and let me know if this fixes the settings are ignored issue.\n. I opened up a new issue #120 which better describes the actual problem (the OP's issue is a symptom of.)\nIf anyone is still having problems getting settings to load please report on that issue.\n. @matthiasg Non blocking only works on ST3, this would be a feature for ST2 for when you can't use non blocking.\n\nhave to disable gitgutter while editing new files that have not yet been added to the git staging area or git repo\n\nYou can turn on this feature and it should stop git gutter from parsing on untracked (new) files.\n. This is where GitGutter uses git diff internally\nAnother optional flag is -w which tells git to ignore all white space changes. There is also the --ignore-space-at-eol which only ignores the white space at the end of a line.\nIf you wanted to add a setting, called ignore_whitespace that accepts the 3 values none (don't ignore white space) all (ignore all white space) and eol (only ignore white space at end of line). Then make the command I references use the appropriate flag. I would probably accept that.\nI would want none to be the default so to not change any current functionality by default.\n. If you don't want to do a pull request I may add this feature myself, but I have a pretty busy schedule for the next couple of months so it may be a while before I can get to it myself.\n. Fixed by #93 \n. Did you specify the git path in your settings?\n. Thats a fair point.\n. Just a wild guess, but are you using Vim Git Gutter?\n. They don't have the exact same name. Mine is the original and just\nGitGutter the one you are referring to is a vim port and appropriately\nnamed vim git gutter. And yes you should file the bug there.\nOn Saturday, April 27, 2013, victoredwardocallaghan wrote:\n\nSeems to be part of spf-13-vim, so yes. Should I file this bug there? Why\ndo these plugins have the same name?\nCheers,\nEdward.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/jisaacks/GitGutter/issues/95#issuecomment-17111463\n.\n. Closing as duplicate of #55 \n. Cool. Hopefully I can get to merging in some code this weekend. Been so busy lately.\n. @ltribolet Thanks for sharing!\n. A marker for a non versioned file, would end up being on every single line of the file. This would just be noise and would not be anything useful.\n. @brunosabot the problem with that is, I do not know of an efficient way to check if the file is versioned or not. I would have to check the .gitignore and test every line against the file path for the current file. It might be something it can be cached, (I never check git diff if its been less than 5 seconds.)\n\nAlso there are 3 cases:\n- a file that is ignored\n- a new file not tracked yet\n- a tracked file that has no changes to it.\nI would love to figure out a way to put a marker in the files tab on the top, and that could indicated weather the file is new, untracked, or modified but I do not know how to get a marker into that area.\nIf you want to do the work, and specify a flag that will make certain files (ignored, new) have a marker going (on every line) I may pull it in, if it is clean.\nI have a piece of code in place, that checks if every line is an addition (its either a new file or an ignored file) and it does not put the insert marker on every line, it just ignores the file (I would consider it noise.) In that part of the code you would have to check for a setting flag (something like show_markers_on_untracked_files that defaults to false.) You would need to treat new files, and ignored files separately. If it is both new and untracked, it should just be treated as untracked. I think the icon that should be used for new should be an asterisk (that is a common indicator for new file) and the icon for untracked, I am not sure, maybe an icon that looks like this:\n\n. @brunosabot thanks for the info, I did not know about those commands.\nIf I was going to try to put a marker on the open tabs, I would look into how themes like soda style those tabs, then see if there was a way I could modify the theme on the fly to put indicators on certain files. Not sure if that would work but thats where I would start. Even if that did work, it would probably be an ugly hack.\nAnyways, I will keep my eye open for your PR.\n. This looks ok, in what situation does a view not have a window tho?\n. @DisposaBoy ahh yes. I much prefer the way ST3 handles transient views. I have a major bug I can't seem to fix in my MaxPane plugin dealing with transient views in ST2 (but theres no issue in ST3.)\nI will pull this in when I get a chance. :+1: \n. If the icons are white, this most likely means that your theme does not specify the appropriate color defs to color the icons. That is how they look without a theme specifying how to color them.\nA quick way to test this, install a theme known to specify the colors. Here is a list\nIf switching to one of those themes causes the icons to color, then it definitely means you current them does not specify any colors for GitGutter. You can however modify your theme to add the colors.\n. The squares are valid icons, there are 3 primary icons; square for modification, + for insertions, and a notch for deletions.\nAre you saying that insertions and deletions are being marked with squares (modifications)?\n. @goldfire did changing your theme fix the issue?\n. Please install a theme that is known to have the correct color defs. Here is a list\nAre they still not colored?\n. @fbm-static Care to share with the rest of us, how you solved it?\n. @rushfly thanks for the update. Can someone else confirm this solves it for them too?\n. Why would you want to see this in GitGutter? Doesn't it make more sense to use an actual diff tool like kaleidoscope for that. I think GitGutter is only useful to see where your changes are since your last commit live during development.\nI really don't see why you would want this to show changes to a different commit. Are you working in a feature branch and trying to see all changes that are going to be merged back in?\nPlease explain a use case.\nThanks. \n. Hmm.. \nWell the way it works is, it puts what is currently in the HEAD into a temp file in the update_git_file method:\npython\nargs = [\n     self.git_binary_path,\n     '--git-dir=' + self.git_dir,\n     '--work-tree=' + self.git_tree,\n     'show',\n     'HEAD:' + self.git_path,\n]\nSo if you swapped HEAD with a commit hash like:\npython\nargs = [\n     self.git_binary_path,\n     '--git-dir=' + self.git_dir,\n     '--work-tree=' + self.git_tree,\n     'show',\n     '6f9987db:' + self.git_path,\n]\nYou would essentially be comparing against that commit. I am not sure the best UI for how the user would specify something other than HEAD to compare against. One possibility would be to use view.show_popup_menu with a list of all commit hashes. It would be nice if it was an autocomplete input field (like the cmd + shift + p menu) but not sure if that is possible.\nBut even once the user has selected the commit to use, would this be for the current view only, or all files? How long would it last .. until restarting sublime? Things to think about.\n. @Ajedi32 everything you stated sounds reasonable, I will take a look at implementing this when I get a free hour or so I can devote to knocking it out.\n. I created a branch called compare, it adds the ability to specify what commit or what branch, also with the ability to go back to head or view what you are comparing against.\nIt adds the commands in the main menu via View / GitGutter / Compare Against you can also run the commands via the normal sublime command palette\nCheck it out and let me know your thoughts.\n. Sorry about that! I just pushed up a commit that removes the trailing comma.\n. @Ajedi32 Did you get this working after my fix?\n. @Ajedi32 I have completed this feature, it is merged into master, please update to latest version of GitGutter. If you have any issues feel free to reopen or create a new issue (whichever is more appropriate for the circumstances)\nBTW, I am finding this feature quite useful when I am working on a branch to see what all is different since master (instead of HEAD). Thanks for suggesting it! :+1: \n. That makes sense, go ahead an open a new issue for that as it is an enhancement for this feature.\n. @Ajedi32 is correct. I can see someday maybe having the ability to allow you to click a gutter and see what the original code was with the option to revert, but the way I would want to implement it is not possible that I know if in the current API. So for now, use the regular git plugin for this feature.\n. GitGutter does not work with Subversion, only git.\n. Is this still happening if you update to latest version? I remember fixing another bug related to encoding types, that might have fixed this as well.\n. OK cool, I think it's already solved. Closing.\n. Thanks.\nI glanced over this. I am going to look at it more thoroughly when I get a chance.\nIn the mean time, a couple things:\n1. I see you loading the show_markers_on_untracked_file in the git_gutter_events.py but are not using it anywhere in any of the events. So It seems like loading it here is unnecessary.\n2. The method handle_files, what's happening here is not immediately obvious, if you can give me a brief explanation of what is happening here. That will make it easier on me when I look at it again.\nThanks, JD.\n. OK so I pulled this in and looked at it (so far only in ST3.) I think the asterisk * looks fine but I am not liking the way the x looks. I realize you mentioned this already. I don't have Photoshop on this machine, or I would try this myself, but if you compare the x with the insert icon + you will notice that the bars are much thicker on the +. I recommend trying to thicken the bars on the x and try to get it to look like a tilted +. and if not maybe we can try a differnt symbol that can be rendered more cleanly. \n. That's fair. I will work on the icons when I get a chance. Thanks\nOn Sunday, August 25, 2013, Bruno Sabot wrote:\n\nYes, the x is not as thick as the +, but I can't make the right icon with\nmy few photoshop knowledge. I assume the best you can do is to fix the icon\nyouself.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/jisaacks/GitGutter/pull/108#issuecomment-23225659\n.\n. Check the sublime terminal (press ctrl + ) and look for an error related to git gutter.\n. You said git path is configured. Can you confirm that your git path in settings is the same as when you go to the console and typewhich git`\n. @Harreh what is your current setting for git_binary in GitGutter settings? If you did not set it, make sure you have git installed and add it's path to the settings\n. In the line:\nError Detected while processing function GitGutter..65_run_diff:\n\nIt looks like you left a section out. It should have said what function and what file. I see line 13 but that doesn't mean much without the file.\nAlso did you just install GitGutter for the first time and it is not working, or was it previously working and has stopped working? If it was previously working, did it stop working after an update?\nDid you try:\n- Updating to latest version of GitGutter?\n- Restarting SublimeText?\nGitGutter stores some data in temporary files to run it's diff. It looks like it is a permissions problem with the temp files. Check that your current user has read/write permissions on C:\\DOCUME~1\\hxl\\LOCAL S~1\\temp\\VIo1D8.tmp\n. > as a plugin with gvim\nThis version of Git Gutter is for _Sublime Text_\nIt sounds like you are using Vim Git Gutter\n. Why is SublimeText installed under Dropbox?\n. Are you able to open up the file git_gutter_handler.py at C:\\Dropbox\\Apps\\SublimeText3\\Data\\Installed Packages\\GitGutter.sublime-package and edit it?\nIf so, try adding import encodings to the top with the rest of the imports.\nDoes that fix it?\nThe error is coming from here I think it is hitting an encoding it doesn't know how to handle. See here.\n. @Givemeyourgits yeah, I have seen that package before. I prefer to just use the command line for performing git actions tho. I do have the free git plugin but all I use it for is the git blame feature.\nGlad you like GitGutter, if you want to make a pull request with that change, that would be cool. Otherwise I'll just add the fix myself.\n. fixed by #112 \n. A possible fix for this:\n- You can get a list of named regions like so: view.get_regions(\"git_gutter_inserted\")\n- You can see if a region intersects another region like so: region_a.intersects(region_b)\n- GitGutter uses a single point (1 char long) region for each icon, but they are grouped by the region key (e.g. git_gutter_inserted)\n- GitGutter adds regions in the bind_icons method\nSo you could maintain a list (via settings) of regions you do not want GitGutter to overwrite, then check if any of the icons will intersect those regions, and if so, skip it.\nsomething like:\n``` python\ndef is_region_protected(self, region):\n    protected_regions = [\"some_region\", \"some_other_region\"] # should be loaded via settings\n    protected_region_sets = [self.view.get_regions(r) for r in protected_regions]\n    for regions in protected_region_sets:\n        for r in regions:\n            if r.intersects(region):\n                return True\nreturn False\n\n...\ninside bind_icons method\nunprotected_regions = [region for region in regions if not self.is_region_protected(region)]\nself.view.add_regions('git_gutter_%s' % event, unprotected_regions, scope, icon)\n```\nThis however would probably be very inefficient, especially with large lists of protected regions. This should however, give anyone interested in this problem a point in the right direction of how to solve it.\nIt's not currently high on my list of priorities, but who knows, if I get some free time, I may take a stab at it.\n. I am not a regular SublimeLinter user, I cannot reproduce this issue.\nWhen I make a change, the GitGutter markers show up almost instantly. Then the SublimeLinter markers show up about a second or two afterwards and coverup any of the conflicting GitGutter markers.\nIn the screen shot below both lines 2 & 3 have been modified, line 3 is not showing the modified icon, but instead the SublimeLinter illegal icon:\n\nCan someone describe how to reproduce the issue?\n. OK, well if no one is having this issue anymore I am going to close this.\n. For anyone having an issue, please take a look at the protected-regions branch. I adds a setting where you can set protected regions that git gutter will not override. You will need to check which region names sublime linter uses and set them as protected for git gutter to not override them.\nPlease try using that branch report pack any issues and if it helped.\n. @JerseyMilker a quick perusal of that packages code I found the erase_lint_marks method. So it looks like they may just be:\n- lint-underline-illegal\n- lint-underline-violation\n- lint-underline-warning\n- lint-outlines-illegal\n- lint-outlines-violation\n- lint-outlines-warning\n- lint-annotations\n. @tgirardi is there something wrong with just using Package Control: Disable Package when you are debugging and then using Package Control: Enable Package when you are finished?\n. @tgirardi I just checked, it seems it doesn't exactly require a restart, it stops git gutter from adding any new marks, but does not remove the current ones. Either way, it's not very convenient for you.\nI think that is a valid feature request and worthy of it's own ticket. Feel free to open a new issue and reference this one.\nI am not sure what the best solution is, and I am open to suggestions, but I agree - some sort of functionality would be useful.\n. @Zireael07 sorry, I have not gotten to it yet, with work, having kids, planning for Mother's Day, housework, and all other things in life, I just haven't had enough time to sit down and work on this yet. \n. I created a pull request on Package Control\nThat will allow users to install a release candidate of GitGutter to test out new releases. I hope that should alleviate the burden on cloning and manually installing other branches.\n. @Raynos after the above referenced PR is merged in, I plan to merge master into the protected-regions branch, then push it to the release-candiate branch. Then users who want to test simply need to disable git gutter (easy via package control) and install GitGutter-Release-Candidate via package control.\n. @FichteFoll Awesome, I was actually going to bring this up with Will, as something package control should support. I am not surprised it already exists (I hadn't looked for it yet). \nThat won't fix this issue, but it should satisfy #161\nThanks :+1: \n. > Well, I can confirm that Gitgutter-Edge has addressed these issues.\nIts probably time to cut a new release.\n. > What is Gitgutter-Edge?\nIt is a seperate package that points directly to the master of git gutter instead of the latest release. You will get fixes faster, but not as stable.\n. > Its probably time to cut a new release.\nI just cut a prerelease but after reading Package Control's prerelease section it looks like it probably will treat it as an official release. \n. Thanks @FichteFoll \n. @creativisionist have you looked at your preferences to make sure that SublimeLinters didn't accidentally get added to the ignored packages list?\n. @creativisionist have you tried completely shutting down sublime?\n. OK if I can get some volunteers. I will merge #254 into master. So you would need to use GitGutter-EDGE, and if it fixes the problem, I will cut a release for GitGutter with it. Also would need to figure out what regions need to be protected and add them to the settings. In fact, if anyone could add a comment here with what those regions are, that would be greatly appreciated. Thanks.\n. @studenton I need to fix some conflicts, rebase and then merge the PR into master. Then you would need to make sure to update to the newer version. I will ping this thread at that time. Should be able to some time in the next couple days.\n. @studenton that PR is now merged into master.\n. @studenton thanks for the feedback. What regions did you need to specify as protected for SublimeLinter? I would like to add it to the Read Me.\n. @studenton my lasted code add a setting for you to specify protected regions\nThe icons in the gutter are placed there using named regions. GitGutter has specific names it gives the regions when it puts an icon there, SublimeLinter should as well.\nWith the latest code, before placing an icon, it will check to see if a region (from the specificed protected regions setting) already occupies that line. If so, git gutter will not put the icon there.\nSo if you did not specify protected regions, then my fix is not actually doing it's job and the fact that you are no longer seeing the issue is probably just coincidental or a race condition.\nTo determine which regions should protect you will either need to look at the SublimeLinter source code to see what they are naming them, or contact the authors and ask them.\nLet me know if that clears it up :)\n. @davicho \n\nI go to it's settings they are empty.\n\nHow did you access the settings?\n\ncopying the settings from the repo online but didn't work.\n\nWhat didn't work?\n. @davicho \nYou said you went to:\n\nsublime text>preferences>package settings>sublimelinter>settings\n\nBut you need to go to:\nsublime text>preferences>package settings>GitGutter>settings\n. I have cut a release with protected regions so I am closing this issue.\n@develucas I added a section for protected regions to the README, however I wouldn't be opposed to having a section that also lists the region names for popular packages. If you wanted to make a PR and start that.\n@wprater the protected regions feature fixes your issue as well.\n. > README.md tells you, in a rather obscure way, to \"figure out the name\" of the protected_regions\nThat is because SublimeLinter is not the only package that may have conflicts. So it is up to the user to figure out what region names to protect. And like I said before, I have no problem listing common ones if someone wants to make a PR.\n. @nfantone you have a valid point, please make a PR with how you think it could be better explained. \n. @nfantone in order to place an icon in the gutter, you must do so via a region in sublime text. Here is the API for it:\nview.add_regions(key, [regions], <scope>, <icon>, <flags>)\nYou can read more about at https://www.sublimetext.com/docs/3/api_reference.html\nWhen you add regions, along with the optional icon you must give a key aka a _name_.\nSo this means any package that places icons in the gutter must be doing it via a region, and that region must have a name.\nHere is where git gutter does it: https://github.com/jisaacks/GitGutter/blob/master/git_gutter.py#L149\nSo if you specify the names of the regions you do not want git gutter to override. It can check if that region is there before putting an icon there. But the user unfortunately must go dig through the packags source to find the region names, something I do not wish to do. It would be nice if the package authors listed them in the read me.\nI hope that helps.\n. In fact, I wouldn't even be apposed to having some presets like \njavascript\n\"protected_regions_presets\" : [\"SublimeLinter\", \"BracketHighlighter\"]\nThat evaluate to a saved list or region names used by those packages.\nBut someone would need to maintain those lists.\n. @yaroslavyaroslav it would be unwise for a package to not prefix their region names with their package name.\n. @pirate you can either contact the author of that package or rummage through the source code. If you figure it out, please post back. Hopefully we can get a list of the common ones.\n. @pirate thats strange. I read through the issue you opened and I agree it must be one of the two situations you mentioned.\nIf you want to install GitGutter via git you can modify the code that checks for protected regions and with some debugging (basically manually determine what region BH has used and see if it is in the list being checked by GitGutter) may lead to some answers. \n. Can you please post a screen shot and can you check the sublime console for any errors. Also what OS are you on?\n. @falconvk can you please give me some extra info so I can try to reproduce this?\n. Are other changes showing up, just not changes within a submodule?\nI have never tested on a submodule repo before, I would not be surprised if it does not work.\nHowever, I cannot think of any reason it shouldn't work.\nThe submodule directory should contain it's own .git directory. GitGutter should automatically pic up the correct .git directory as it travels up the directory path all the way to / (root path) and uses the first .git folder it finds along the way. \nYou said it flashes correctly and then goes away? I am wondering if there could be something going on where the outer .git is overriding the inner .git (the submodule.) Not sure off hand why that would be though.\nWhen I get a chance I will create a repository with a submodule and see if I can reproduce the issue and track down what is causing it to go from the proper icons showing and then going away. In the meantime feel free to troubleshoot it yourself.\n. I have only looked at the code, I haven't had the time to check out your branch and run it. \nI like to manually run and play with new code changes (except for extremely simple ones) before I merge them into master. I have just been really busy lately, I will try to do this as soon as I can. Once I get a chance to look at it more thoroughly, if there is anything that needs changed I will let you know.\nThanks.\n. I just merged, everything looked good! :+1: \nThanks.\n. Thanks!!\n. This is a feature I am currently working on.\nThanks.\n. I have a branch called staged with what I have so far.\nSome notes:\n-  Trying to determine what changes are staged/unstaged in a dirty file (a file with unsaved changes) is very difficult. so I currently only have it distinguishing unstaged/staged when the file is clean (no unsaved changes.) If anyone can solve this problem it would be great!\n- The colors for the icons come from the colors scheme. GitGutter uses the format markup.change-type.git_gutter for example markup.inserted.git_gutter. Since color schemes in sublime text fall back, if the current color scheme does not define a color for markup.inserted.git_gutter it will fall back and use markup.inserted which many of the default color schemes have defined. I have extended this farther by making the colors for staged and unstaged defined like markup.inserted.git_gutter.staged and markup.inserted.git_gutter.unstaged. So needless to say if you want to checkout the staged branch and check it out, you will need to define these color defs. But it won't break if you don't have them defined. I have already added them to DeepBlueSee so you can use that color scheme to check this feature out.\n\nHere is a screenshot using the DeepBlueSee color scheme:\n\nThe green ones are staged and the faint ones are not staged.\n\nI would love to have some feedback on all of this from any interested parties.\n. @maffiou take a look at the compare branch and this issue: #104 \n. @maffiou There is a new feature (pulled in from the branch I linked previously) that lets you choose a commit to compare against. You can find it in the command palette.\n@mcmillion I am still working on this, its quite tricky. I have a pull request #136 but I am not convinced it is ready for prime time just yet. It does show the staged status even if the file is dirty now.\nIf you pull the latest code, I would love any feedback.\n. @maffiou Thanks man! BTW, did not know about flattr, just went and created an account.\n. @Raynos I am not exactly sure I understand what your issue is, but I think you are saying that of the 2 themes you want to use, Nexus, and JavaScriptNext, neither define the appropriate values needed for this branch.\nThe values that need to be defined (for git gutter in general) look like this:\n- markup.inserted.git_gutter\n- markup.deleted.git_gutter\n- markup.modified.git_gutter\nThen for this branch, it adds:\n- markup.inserted.git_gutter.staged\n- markup.deleted.git_gutter.unstaged\n- markup.modified.git_gutter.staged_unstaged (for lines that are mixed)\nThe way these color defs work in sublime text, is, each . narrows the scope, but falls back to the previous scope if not defined.\nSo when something needs to be colored like markup.inserted.git_gutter.staged sublime checks for the following values and uses the first one it finds:\n- markup.inserted.git_gutter.staged\n- markup.inserted.git_gutter\n- markup.inserted\n- markup\nIt looks like those themes define the markup.inserted etc. without the git_gutter or staged pieces, which should still work, except staged/unstaged changes will not be colored differently.\nIf you want to modify/patch the theme to make it work as desired for this branch, you just need to edit the theme and add the appropriate values.\nAlternatively if you just want to grab a theme to play with this branch that already has the needed color defs, you can use this theme\n. @Raynos actually, I think there is a way to tag a branch and have it installable as a separate version via Package Manager. I will look into that when I get some free cycles. I would rather not merge half baked features into master.\n. @deathaxe I am not sure I follow. What is the difference between HEAD and the current branch? Don't the both point to the same commit?. > The idea is to 'simply' compare to the HEAD as usual, but have different icons to indicate if the hunk is staged or not.\nThis is precisely what I was attempting to solve in my branch. I was getting results but its a very complex problem. Probably more complex than all of the rest of git gutter. And it's an edge case. Not worth the complexity in my opinion. Although it would be cool.. What version os sublime Are you using? Do you have none blocking mode on? There is currently an issue that seems like the settings are not loading correctly in version 3.\n. I think this is related to issue #120 which I just resolved, can you please update to the latest version (make sure if you have commit 6b54e38) and see if the non blocking mode solves the typing to lag.\nThanks.\n. Cool, gonna close then. :)\n. This should be resolved in 6b54e38\n. I went ahead and merged this. I am not sure if you are aware, but there is a pretty popular JavaScript package named underscore, so I found your name a little confusing. Just an FYI. :)\n. Thanks! :+1: \n. Were you able to get other packages to install?\n. What version of package control are you using?\n. Can anyone confirm that this issue is happening on Package Control version 2.0 or above? There was an issue with an older version of PC not installing packages. See the link above.\n. OK I am closing this out since I have been waiting on feedback for a month. If someone still has a problem installing with Package Control please: \n- make sure you have the latest version of package control. \n- check if you can install other packages\n  - If you cannot install other packages, open a bug on package control\n- If you have the latest version of package control, and git gutter is the only package you cannot install, the feel free to reopen.\n. Awesome! Thanks.\n. Try turning on non-blocking see if that helps.\n. So turning on non blocking had no effect, but turning off live mode made it better?\n. Hmm. My first thought, there was a bug about non blocking not working, which was actually the settings not being loaded, but if you are getting live mode setting to work, then thats probably not the issue.\n. @frk1705 I have non blocking off and live mode on. When I press and hold a key down, it repeats that key no problem. I am on OSX. Maybe its the size of your repo or the size of your file?\n. @sethgrid That is so weird. I am using ST build 3059 also, but not have any lagging issues at all. I am on OSX 10.9. One thing you can try, install GitGutter via git, then check out previous (older) commits to see if there is a specific commit where it goes form performing fast to performing slow. \n. So when live mode is on, GitGutter runs with every single modification. For example, when you type the word function, it would have run 8 times. Its likely that there was no change between the first and last character as to which icon git gutter should show.\nI am trying to think of a way to make git gutter not have to run one every single key stroke in order to give a live view. I am thinking through how this would work. I would like to make it so that git gutter only runs when:\n- you start making a change\n- once you stop typing\n- any time you change how many lines are in the document\n- any time you cut or paste into the document\nThis is easier said than done though, it doesn't seem like there is any information on what the modification was in the on_modify event that git gutter is running after. So I would have to figure that out some other way.\nI think if I can figure out a way to accomplish this, it should solve most performance problems.\n. @naxhh I just noticed your comment about NFS/vagrant. Trying to run Git Gutter over a network is going to be slow because it uses file operations. \n. @oleq Would you mind checking out an older commit and seeing if it starts performing better?\nIt seems like something has changed for you that is casing it to run slow, I want to confirm that it was a change in GitGutter causing it, and not something else.\n. @matthiasg I was thinking something similar for while you are typing on the same line but any anytime a modification changes how many lines there are, then run immediately.  This is because when a line is added/removed, it is most likely going to change what icons to show and want them to show up right away. Basically I want it to still feel really responsive and just be smart about not running at times when it doesn't need to.\n. @oleq Thanks for that, so if on the latest commit, if you turn show_markers_on_untracked_file back to false in the settings, it performs OK again?\n@matthiasg But my point its, if the first change is adding a new character, but the second change is adding a new line (e.g. users types ; then return), I would want it to run immediately so the icon for the new line shows up without delay. So only throttle while the modifications are on the same line.\n. I am very bewildered by this. I understand GitGutter running slow over a network, because it requires file operations and they are slow over a network.\nIf you look at the code in how it shows untracked/ignored files, it does the same as when it doesn't, it runs a git command (just with different args). It still runs the normal git command when you have show_markers_on_untracked_file set to false, in fact it requires extra processing. It doesn't skip that if not showing the icons, it just treats all lines as new (according to git they are) and decides not to show them if all lines are new.\nI also am confused as to why there would be any lag when non_blocking is on. When non blocking is on, git gutter runs in a separate thread, so unless it is just taxing your entire computer, I don't see how it would cause any lag. This only works in ST3 though, and there was a bug before about the settings not loading right, so when you set it to on, it wasn't actually being turned on.\nThe most perplexing part is, I never see any of this lag you guys are reporting (except for when over a network which then it grinds to a halt and becomes unusable), and I am not running a very fast machine. Anyways, I am not complaining and I am not implying you guys are making this up or anything, I believe you guys are having issues, just trying to wrap my head around why.\nI am working on a branch where I am trying to make it debounce the running while the line count has not changed. I want it to run immediately when you change how many lines there are though, since this is likely going to change the icons, and I really hate if there is a delay. I also made it run immediately when you paste or cut. It is not ready but I put a wip up in the debounce_add branch, if anyone wants to take a look or possibly contribute. I will work on this more when I can.\n. @naxhh sounds good, thanks. Let me know if you figure anything out.\n. Until the performance issues get resolved, I have turned show_markers_on_untracked_file off by default.\n. @titoBouzout Thanks for the input, your example seems reasonable. Also can you explain why async calls makes no difference I thought the whole purpose of them was to run in a separate thread and not block the editor?\n. Has anyone tried out the debounce_add branch? I would like some feedback from those having performance issues on how this branch performs, if possible.\nThis should run once when:\n- You start typing\n- You stop typing\n- You change the line count (e.g. press enter) while typing\nI consider you stopped typing when you have gone 0.1 seconds without typing. Feel free to play with this number. You can change it here.\nAlso test inserting multiple lines at a time, since it still runs for every new line.\nAny feedback would be great.\n. @entombedvirus Thanks for the feedback. That is disappointing though, when I tested this branch it seemed to keep git gutter from repeatedly running. If its only running when you start and stop typing, and still causing performance problems, thats not a good sign. I may try @titoBouzout's suggestion and see if it is any better, or look for anything that can be done to actually speed the performance instead of just limited how many times it runs. \n. Will anyone who is having issues please try #145 PR and see if that helps.\n. Related: \n\nhttps://twitter.com/halllo/statuses/458995748575916034\n. Fixed with #145 \n. Thanks @mikemerritt \n. > but the rest of the plugin seems to be working fine.\nCan you elaborate on what other parts are working. There are not many other features of GitGutter. Maybe you installed some other Git plugin?\n. Did you try setting the git path?\n. @AshwinRamesh \nplease try going to your terminal and run which git\nthen copy whatever it says and put in the git gutter settings like:\njson\n{\n  \"git_binary\": \"<the output from `which git` command>\"\n}\nYou can get to the git gutter settings from Preferences > Package Settings > GitGutter\nPlease let me know if that solves it.\n. Cool. I am going to go ahead an close this then.\n. Thanks, it looks like you removed the indentation, there used to be 2 spaces there. Can you add them back?\nAlso is there a reason why you unescaped the back slashes? They were added by someone else here: 1c11f576eccae4e995bca007a0de298160933a08 I always just assumed they were necessary.\n. I would assume they are unnecessary, (I know they are in OSX) but don't currently have easy access to a Windows machine to test on. If you have access to a windows machine and can easily test it, otherwise I will just merge this in as is.\n. Its #126 if anyone end up here.\n. Do you mean when you have multiple views into the same file?\n. @stephan-nordnes-eriksen I know what you mean by multiple rows/columns. But when you say with more than one file are you referring to having different files in each column/row (to me that does not make sense, why would gitgutter update a different file?) or do you mean the same file with different views in each column/row? \n. @stephan-nordnes-eriksen I want to try to reproduce this. Following your instructions, I open sublime on a directory that uses git. Set a 2 column layout. Open a file in the second column. I have that file in the second column active. Now you say to Do an update to the file. What do you mean by that?\n. @keeev I agree that I do not think it is worth repeating the entire thing for a single char change. Please make this more concisely say that you use a 3 instead of a 2 and I will merge this.\nThanks.\n. Have you looked at sublimerge?\n. It is supposed to. I commit in my terminal, I know git gutter refreshes on activate, so every time I move from my terminal to sublime after a commit it refreshes. I am guessing maybe since you are already in sublime it doesn't refresh after the commit. Try clicking away from sublime and then clicking back to the window, does that clear the gutter marks?\n. The command to run is git_gutter you can set custom key bindings via sublime > preferences > key bindings - user to create your own key binding to run it whenever you want. Look in the default keybindings file for the syntax.\nHowever, GitGutter only rechecks against the actual repository if its been over 5 seconds since the last check. This only matters after you make a commit and change what HEAD is. This is because the repo doesn't change as often as you type, and for performance reasons. So you may have to wait up to 5 seconds after committing before it reflects.\nThere is currently no wait to force a recheck of the git ref but I would consider added that as a feature. \n. So if you look here:\nThis is how it resets the time:\npython\nkey = ViewCollection.get_key(view)\nViewCollection.git_times[key] = time.time()\nYou could make a clear_git_time function on ViewCollection to clear the time like:\npython\nkey = ViewCollection.get_key(view)\nViewCollection.git_times[key] = 0\nThen in the git_gutter command you could accept a force argument that would run:\npython\nViewCollection.clear_git_time(this.view)\nBefore processing the changes, this would force a recheck of the git head before making changes.\nThen you could set a key binding to call git_gutter with the force flag, and run it everytime you commit to update.\nI may accept a pull request of something like that, I don't have the time to think it all the way through and implement it myself right now though.\n. Its weird, when I try to view Files Changed I get:\n\nSorry, Diff contents are not available for this pull request.\n\nAlso when I view your actual commit I get:\n\nSorry, diff information is not available.\n\nSo I can't actually see what code you want me to pull in.\nDoes it do that for you?\n. No there is not, but you can install it very easily with git. If you need\nhelp with that I can walk you through it. :)\nOn Thursday, February 6, 2014, Raynos (Jake Verbaten) \nnotifications@github.com wrote:\n\nWould love to test this.\nIs there an easy way to install Git Gutter Staged from sublime text\npackage control ?\n\nReply to this email directly or view it on GitHubhttps://github.com/jisaacks/GitGutter/pull/136#issuecomment-34384726\n.\n. @maliayas I am working on some infrastructure that will allow users to easily test pre releases. Once that is setup up, I am going to be focusing on the protected regions feature. #113 and #161 \n\nAfter that release I will probably shift my focus to this branch.\n. @mattsmith89 thanks, this is a new feature I just added. Is /Users/msmith/Dev/test_file.rb a file that is present in your current tree but does not exist in the branch you are comparing against?\n. The file referenced is the active file correct? Also any other notes you give me? like does it happen just after making a change to the file?\nI will try to reproduce, but so far haven't noticed it.\nThanks.\n. @mattsmith89 I believe my last commit should fix this issue. Please update and report back. Thanks.\n. I am sure it could be made to boost performance, but at its current state, not showing markers on new/ignored files I don't think will. Is there some reason why you think it does?\nAlso I do not understand what you mean about ctrl + z\n. So according to many reports, it seems show_markers_on_untracked_file is causing performance problems. I am going to merge this in for now, although, if I can get the performance problems solved, I would like to have it on by default. Mainly I just want it defaulted on for discoverability since many people didn't know it existed. \n. Thanks, does this happen if you restart sublime? I have been noticing some weird things with sublime packages, after updating them, some attributes seem lost. A restart usually fixes it though. Just want to rule that out.\n. it is supposed to be called, but if it isn't getting called that would be a sublime bug. Another possibility is that it gets called, just too late, again in theory that shouldn't happen.\nIf the bug was reproducible we could figure out exactly what is happening.\n. Right... maybe a compare against anything command that lets you enter whatever you want. It would just interpolate the value directly though, so sort of a use at your own risk.\n. @sohocoke Yes it does, please refer to this issue: #126 for tips and progress on making it faster.\nI am going to close this since it is basically a duplicate.\n. Thanks @divmain, I am on vacation right now but I will take a look at this when I can.\n. @divmain just took a glance at your code, it looks solid. I didn't test it yet, but I will. In the mean time I am going to update #126 and ask the people who are having issues to try this fork and see if it works.\n. Alright, I just checked out your fork and tested it, it seems to work fine for me. I was never having performance issues though, so not sure if it will solve them for those people. If it doesn't then I suspect there is something else going on. Like using a too large a file or repo maybe.\nI'll wait and see what others have to say, looks good to me tho. :+1: \n. Oh that makes sense, never thought about something like that.\n. Related: \n\nhttps://twitter.com/halllo/statuses/458995748575916034\n. @0m4r thanks for your comment. I did not know about the cygpath command. Also was git gutter edge not showing icons for you?\n. @flux242 I believe you may be correct based on the conversation in #191 \n. Thats not a bad idea. Maybe a setting like disable_for_lines_over and you can set your own number. In your case 100000. I think even a default like 20K would be reasonable. Negative numbers would mean never disable no matter how many lines. \n. @rchl if it is no longer necessary I'd like to avoid any bloat.\n. This is not currently something that can be done in ST. I have opened an issue with ST to allow for this to be done. You can vote for it here\n. Did you try setting the git path?\nOn Thursday, March 13, 2014, Goncalo Espinha notifications@github.com\nwrote:\n\nHi there,\nI have installed and reinstalled various times GitGutter and it still\ndoesn't work. I have tried verifying if I am using git and it is on. What\nshould I do to diagnose my problem?\nThanks\n\nReply to this email directly or view it on GitHubhttps://github.com/jisaacks/GitGutter/issues/152\n.\n. Open your user settings and remove git gutter from the ignored packages.\n\nOn Thursday, March 13, 2014, Josue Rodriguez notifications@github.com\nwrote:\n\nI also cannot install the package via the Sublime package manager, however\nit did work when i tried via commandline and git cloning.\nHere's my Sublime console output if it helps:\nignored packages updated to: [Vintage, GitGutter]\nException in thread Thread-18:\nTraceback (most recent call last):\n  File \"X/threading.py\", line 639, in _bootstrap_inner\n  File \"/Users/user/Library/Application Support/Sublime Text 3/Packages/Package Control/package_control/package_installer.py\", line 241, in run\n    self.result = self.manager.install_package(self.package)\n  File \"/Users/user/Library/Application Support/Sublime Text 3/Packages/Package Control/package_control/package_manager.py\", line 480, in install_package\n    package_bytes = download_manager.fetch(url, 'Error downloading package.')\n  File \"/Users/user/Library/Application Support/Sublime Text 3/Packages/Package Control/package_control/download_manager.py\", line 180, in fetch\n    return self.downloader.download(url, error_message, timeout, 3, prefer_cached)\n  File \"/Users/user/Library/Application Support/Sublime Text 3/Packages/Package Control/package_control/downloaders/urllib_downloader.py\", line 111, in download\n    http_file = self.opener.open(request, timeout=timeout)\n  File \"X/urllib/request.py\", line 473, in open\n  File \"X/urllib/request.py\", line 491, in _open\n  File \"X/urllib/request.py\", line 451, in _call_chain\n  File \"/Users/user/Library/Application Support/Sublime Text 3/Packages/Package Control/package_control/http/validating_https_handler.py\", line 44, in https_open\n    return self.do_open(http_class_wrapper, req)\n  File \"/Users/user/Library/Application Support/Sublime Text 3/Packages/Package Control/package_control/http/persistent_handler.py\", line 94, in do_open\n    if r.is_keep_alive():\n  File \"/Users/user/Library/Application Support/Sublime Text 3/Packages/Package Control/package_control/http/debuggable_http_response.py\", line 58, in is_keep_alive\n    if connection.lower() == 'keep-alive':\nAttributeError: 'NoneType' object has no attribute 'lower'\n\nReply to this email directly or view it on GitHubhttps://github.com/jisaacks/GitGutter/issues/152#issuecomment-37607540\n.\n. Have you checked both user and default? Because the output you pasted said\nit is.\n\nOn Friday, March 14, 2014, Goncalo Espinha notifications@github.com wrote:\n\n@jisaacks https://github.com/jisaacks I have verified my User Settings\nand GitGutter isn't in the \"ignored packages\".\n\nReply to this email directly or view it on GitHubhttps://github.com/jisaacks/GitGutter/issues/152#issuecomment-37637173\n.\n. Ahh, I was responding via email and I didn't notice I was talking to 2 different people. It was @josue that had the output about the ignored packages.\n. @Gespinha Have you installed via package control or git clone?\n\nAlso, did you check the console ctrl + ` for errors?\n. Are you saying that the path:\n\n/Users/myusername/Library/Application Support/Sublime Text 3/Packages/GitGutter\n\nDoes not exist for you?\nI am a little confused, because if git gutter is not there, then I do not know what would be looking for the view_collection.py file.\n. I assuming you have installed via package control? Package control has a command called list packages check it to see if it lists git gutter. If not, make sure you have the latest version of package control and try again. If you have the latest version of package control, and after you install via package control, it does not list git gutter when you ask it to list the installed packages - then install via git clone.\n. Oh you said you have also tried installing via command line and it didn't work. Can you please explain step by step what you did, and what happened.\nI am trying to determine if you just do not have it installed (which is sounds like) or if it is just not working.\n. OK when you tried git cloning, what directory did you do it in? Did the repo actually get cloned?\n. You also get no errors?\nTry this:\nAdd the following line just under the run method in git_gutter.py:\npython\nsublime.message_dialog(\"git gutter is running\")\nThen on your sublime text console (hit keys ctrl+` to open it) enter the command:\npython\nwindow.run_command(\"git_gutter\")\nDo you get a message dialog?\n. So when you are editing the GitGutter package, GitGutter works as normal?\nIf so, is it just the 1 repo that git gutter is not working in? Have you tried other repos?\n. Is this still an issue?\n. That would probably be an OK feature. You can do a pull request if you want, otherwise I may do it when I get the time.\n. BTW love your guys' t-shirts! :)\n. What is the difference between project A and B?\nThey are both git repos correct? Does project B have an uncommon path? like is it a networked folder?\nYou can press ctrl+` to open the sublime console and look for errors.\n. When using distraction free mode, Sublime Text hides gutter markers, probably because Jon Skinner considers them to be a distraction.\nI agree, to be able to see git gutter markers on ditraction free mode would be useful, but this shouldn't (and can't I believe) be a feature of Git Gutter but a feature of Sublime Text. A toggle (or more likely a user preference) to show/hide gutter markers in distraction free mode.\nI think the appropriate place to ask for a feature on sublime text is User Echo if you submit a feature request there and paste a link here as a comment, I will vote for it.\n. So there ia already a preference? Cool.\nWhat is it exactly? It is not listed in my default preferences.\nI tried:\njson\n    \"distraction_free\": {\n        \"gutter\": true\n    },\nIt looks like if you just use \"gutter\": true that is for your gutter when not in distraction free mode.\n. Ahh, I see now, I was looking at Preferences > settings - default but I needed to look at Preferences > settings - more > Distraction free\nDidn't realize there was a separate config for that.\n. If you manually check out the latest commit before my recent merge, does it start to work again?\n. Also try completely closing and restarting sublime, sometimes changes that involve config changes need a restart.\nAlso do you have non_blocking set to true or false? the new changes should only effect when you have it set to true, so if you have it set to false and it is still broken, that will be surprising.\n. You switch non_blocking to false. That fixed it, but also restarting fixed it when non_blocking was set to true?\nIs there still an issue?\n. @adawley nice catch, not sure if that would be related to the issue here or not. It does look like (in it's current state) if you turn non_blocking on, and live_mode off, then it would essentially never run.\nI will need to fix that asap. Or if you want to make a quick PR I will merge.\nThanks :+1: \n. I made the fix suggested by @adawley I am not positive that is what was going for @arsham\n. @adawley @arsham Is this still an issue?\n. I believe what I am going to do is define a plugin_unloaded method that clears the gutters. Then it will be as simple as disabling/enabling git gutter. You can probably set a your own key binding to toggle enabling/disabling git gutter. Also @csrl, I believe there is already a setting in the distraction free config to show gutter markers or not.\n. This would also fix #153 \n. @sigod that is what I would like to do.\nI started working on this. I have it to where I can easily make the gutter marks disappear when you disable via package control (using plugin_unloaded), however they do not reappear once you re-enable via package control (until you make and edit or something.) There was some problem I was running into when trying to hook into plugin_loaded to do it then. But now its been a few weeks since I worked on it and I cannot remember what the issue is off hand.\n. @sigod  oh I am sure I still have it on a branch somewhere, just didn't have the details in front of me while I was responding to you.\n. Would you mind rebasing so this can be merged?\n. You need to add the colors defs to the .thTheme file.\nIt's basically a task of copy and paste - just change the colors to something appropriate for the theme.\n@wesbos might even do a pull request (if he agreed on the colors.)\n. Awesome! Thanks, @wesbos\nSo @arnauddri it looks all you need to do now is update to the latest version. :+1: \n. Yikes. I pushed a commit last night. I can see from the output above it was my last commit that did this. I am on my phone right now. I'll push a fix as soon as I get to a computer. Sorry guys. \n. OK I just pushed a commit. \nI was working on making GitGutter smarter about loading the icons so I could have 2 versions of GitGutter (A normal version with regular releases and an EDGE version). It appears that commit broke it though, the reaseon is because I forgot to consider the .sublime-package when installed via PC.\nThanks to @itsnotvalid 's output I was able to quickly identify the problem.\nSo my last commit should fix that.\n. OK so it seems like some ST2 users are still having issues (details here: #168)\nIs anyone still having an issue with loading icons are is it safe to close this?\n. @ulyssesric you are correct, thank you for figuring that out. That is strange though. I tried this morning to see if I could figure out a way to accurately get the GitGutter directory in ST2 but so far no luck.\n@Altynai 's solution may work for some but it is not a general solution. It is hardcoding the path which may be correct for some but won't be for all. Especially once there is 2 versions of GitGutter (normal and edge)\n. Just pushed a change. The change only uses the plugin_dir() method in ST3 since the __file__ keyword in ST2 is flat out returning the wrong file.\nThis should make the icons work again for ST2. However, this will prevent ST2 from properly using the GitGutter-EDGE that I will be releasing (until I can figure out a better solution.) \n. Is this OK to close?\n. Thats bazaar. The error looks like it is coming from line 18 in view_collection.py:\n\nfrom git_gutter_handler import GitGutterHandler\n\nWhich has not changed in any of the recent commits.\nHowever, in the recent commits I did change to use relative imports but I see I missed that spot. so line 16 should be:\n\nfrom .git_gutter_handler import GitGutterHandler\n\ninstead of\n\nfrom GitGutter.git_gutter_handler import GitGutterHandler\n\nBut that should only effect ST3 not ST2. Just out of curiosity though, if you make that change manually does it change anything?\n. I just pushed a new commit. I believe it fixes this issue. Please test and confirm. Thanks!\n. It sounds like everyone having an issue still is with the icons not loaded which is issue #167. This issue should be for GitGutter not working at all and reporting an error like: ImportError: No module named git_gutter_handler\nIs anyone still seeing that? \n. I am going to close this out. If anyone is still experiencing this issue, feel free to reopen.\n. OK I am going to close that as a duplicate of #168 \n. Looks cool, is there a reason why you are loading the setting in the run_command and not in the load_settings method?\n. You are correct, the folded diff misled me. So far I have just looked at the diff on Github, it looks good though. I will run it and see about getting it merged when I get a chance. Thanks. :+1: \n. Hi @Duhemm I did check it. I have some thoughts on how I think it might fit better into the GitGutter world.\nGitGutter allows you to set what you are comparing against. The default is HEAD, but you can also choose a branch, tag, or specific commit. I think it makes more sense to show this than to show what branch you are on. Also to get this you just need to call ViewCollection.get_compare() so no extra system calls need to be executed. \nI might be inclined to have an option to also show what branch you are on. something like:\n\nInsterted: 2 Comparing against: master On branch: my_branch\n\nBut I would like to be able to turn off displaying the current branch since that requires an extra system call and my biggest complaint I get about git gutter is performance. Maybe have the show_status flag accept \"none\", \"all\", and \"some other name?\" Sort of like the ignore_whitespace flag. Not sure what to call the middle ground name though. Do you have any ideas? I do think the middle ground should be the default though.\nWhat are your thoughts?\n. Looks good! :shipit:\nI am going to manually test this again before I merge it, I might not get to that until this weekend. But everything looks fine.\nThanks for the great addition!\n. Duplicate of #55 \n. Thanks for your contribution.\nThe key bindings are like that because they are based on they vim movement keys:\n\nHowever, if you do not like it, you can always set your own user keybindings: Sublime > Preferences > Key Bindings - User.\n. GitGutter works on blocks of changes. A block of new lines, a block of deleted lines, or a block of modified lines. A block consists of changes on consecutive lines. So because there is a modification of an existing line, the entire block becomes a modification.\n. Have you tried setting debounce delay?\n. Hmm. I hardly ever restart and leave sublime open for days/weeks at a time. I haven't noticed anything myself. \nWhat OS are you using? And what version of GitGutter, Sublime, Package Control, and OS? (Yeah that is a lot of things that have versions numbers, sorry!)\n. @benweier \n\n@jisaacks Is SG not releasing the child process when it is finished?\n\nI assume SG stands for SublimeGit? I did not make that, but for GitGutter it executes git commands using GitGutterHandler.run_command, from my understanding, git like other shell commands should execute and exit (not stick around after they are finished.) \nYou can try sticking in a call to terminate, basically changing from:\npython\nreturn proc.stdout.read()\nto\npython\nresponse = proc.stdout.read()\nproc.terminate()\nreturn response\nand see if that solves it.\n. It is trying to run the git diff command. You can determine the exact command but printing the args defined here\nI would try printing the args to determine what the exact command comes to be, and try to execute the command (as the correct user) and make sure you have permissions to.\n. The only thing I can think of is maybe your path and the path of the user that sublime's python runs as are different?\nHave you tried manually setting the git_path?\n. @jasonsims did you ever try manually setting the git_path?\n. @andreasb if your issue is solved can you close this issue?\n. @jasonsims right, was on my phone and didn't notice. Thanks!\n. What value did you set for git_binary?\nAlso, you do have git installed and are in a git repo correct?\n. > I am really, really ignorant about this git world.\nYou have to initialize a git repository using git init have you done that?\n\nand your git gutter package is on everyone\u2019s favorite list.\n\nYou should probably learn to use git before using git gutter, otherwise git gutter won't be much use for you.\nI would recommend starting here: http://git-scm.com/book\n. Is this still an issue?\n. @ratrahan please comment with your status soon or I will have to close this issue.\n. @ratrahan since I have not heard back from you, I am going to close this out. Free free to reopen if you need to.\n. That would be a nice functionality. I would accept a pull request if you are willing to do the work. It shouldn't be too much effort. I could help you if you needed.\n. I think it looks good as well. I will need to do a manual test before merging though. Will try to do that soon. :+1: \nOff topic, @rahul-ramadas it seems you have converted a regular issue into a pull request, I did not know that was possible. Is there a button somewhere to do that, that I just have never noticed?\n. @DavidLGoldberg The settings code is necessary to allow the user to select whether or not to wrap. Is there a specific part that you feel is unnecessary? \n. @rahul-ramadas thats a neat trick, also I had not heard of the hub project before, that is pretty cool. Thanks! :)\n. Cool, code looks solid, will test this out when I can.\n. Can you please elaborate on what the problem is, and how to reproduce it?\n. Does the problem go away if you set live_mode to true?\n. If you installed the latest pre-release that pushed out yesterday, does that fix anything? It had some changes to the way non blocking mode works.\n. OK, since edge and the prelease are both pointing to the same thing currently I am going to assume that this issue is fixed. If it persists once you have 1.2 or greater feel free to reopen.\n. Can you confirm if d4f5a85165c10b18455d23abef46b4c2dff4698b fixed this?\n. @sigod, this is off topic, but wanted to let you know I appreciate the support you have been giving git gutter for quite some time now. Would you like me to add you as a collaborator?\n. Hi which version of git do you have installed?\n. @mostie it just looks like you were trying to run before you could crawl. You definitely need to be using git to get the benefits of GitGutter. I highly recommend reading the free git book. It is worth learning git. Going from not using version control, to using version control is probably the single greatest thing I ever did as a software developer. Once you are using and understand git, then GitGutter should make a lot more since to you.\nI am going to close this issue out now.\n. A KeyError is a python error in which you try to access an element on a list/dictionary using a key that does not exist. Are you editing a file named /Users/jhuckaby/git/Mirror-Bot/lib/Mirror.pm ?\n. You mentioned you restarted sublime. When you restarted it, did you leave the files you are on open? I am curious, do you get the same error if you close the files, then restart sublime?\nI have a suspicion that git gutter is thinking that files have already been added to it's index, when they haven't yet. Then it tries to grab them, then gets the key error.\n. @jhuckaby, I see. ... it should not require you to do that though, thats definitely a bug. It will take some investigation to figure out the exact cause.\nYou mentioned your version of osx and sublime. Can you also let me know you version of git gutter and version of package control.\n. Yeah press cmd+shift+p to open up the command pallete. Then type something like \"list packages\" to bring up the command \"Package Control: List Packages\", running that command should show a list of all packages installed by package control and their versions.\n. >  I can cause GitGutter to stop working again, simply by restarting my ST3 with windows left open.\nIf I can also get it to reproduce that easily, it should make tracking it down much simpler.\nAlso good idea on giving me your prefs, might help in reprodicung it locally. (when I get a change to actually work on this)\nIt might be as simple as making sure that the file is actually in the index when calling ViewCollection.get_key and otherwise adding it. Will need to determine exactly what is going on though to make sure that we fix the actual problem, not just the symptom.\n. Is this still an issue?\n. That's weird. The encoding/decoding name for hexadecimal in python is just hex, so I wonder why the view is returning hexadecimal as it's encoding. If you tried to decode with the string \"hex\" instead it would work.\nI wonder if this is something that was fixed in ST3.. will test when I get a chance.\n. > Me neither! I have no idea what's going on!\nProbably, you deleted the fork from your own account, which the PR was based on. So the PR went away?\n. Good catch. I wonder if that would also fix #188 \nI think this looks correct, will test then merge (once I get a chance, probably next week)\nthanks :+1: \n. When you restarted did you have open files in Sublime? Basically I am wondering if this is related to #188 \n. Hmm.. If its not running and there are no errors, not really sure what to go off of. Would you feel comfortable writing some python to debug it? Basically I could tell you where to place some print statements to try to track down at what point git gutter is getting to, if any at all.\n. OK, so, I find it easier to edit the package source code if it is manually installed via git instead of Package Control, because you won't have a .package file.\nYou will want to edit GitGutter which will be somewhere like cd \"%APPDATA%\\Sublime Text 3\\Packages\\GitGutter\" depending on your setup.\nThe first point of entry for GitGutter is in the event handlers. If you edit the git_gutter_events.py file you will see several on_x methods defined. You can make the first line of each method print(\"git gutter x\") where x is the name of the event. So for example, in the on_modified method you would add the line print(\"git gutter modified\"). This will let you see if the event listeners are being triggered or not.\nThe next break point should be the ViewCollection.add method. I would just add a line there like print(\"adding view\")\nThat calls, GitGutterHandler.reset I would add a print statement there as well. Which finally runs the git gutter command where you can put another print statement. If you put print statements in those places, you should be able to answer the following questions:\n- Are the events triggering?\n- Is the git gutter command being ran? (and if not, how close do we get)\nBy the way, you view the print statements in the sublime console, in case you weren't sure where they print to.\n. OK, so the command is executing. The next thing I would look at, is what does git gutter think has changes. this line is where it gets the lines that have changed. I would print it's output, that will tell us one of three things:\nA. It is not determining what lines have changed properly, which means we need to look at the code that determines that\nB. It is getting the correct line changes, but is failing to draw them.\nC. It never actually reaches that point, some other condition is happening.\n. The next place you want to look is right here\nThat piece of code returns the 3 empty arrays if either the file is not saved yet (on disk) or if it doesn't have the git path. I would print both self.on_disk() and self.git_path right there and see what they are. \n. > 'c:\\users\\bbayer\\appdata\\local\\temp\\tmp\nit looks like you might not have pasted the end of that line?\nAlso does the file c:\\users\\bbayer\\appdata\\local\\temp\\tmpp8v6ex exist on your system? if not does it exist on the D: drive?\n. What happens when you open cmd.exe and run:\nD:/bin/git.exe diff -U0 --no-color --patience c:\\users\\bbayer\\appdata\\local\\temp\\tmpu0hspx c:\\users\\bbayer\\appdata\\local\\temp\\tmp_qga86\nIs it different if you reverse the slashes in your git path:\nD:\\bin\\git.exe diff -U0 --no-color --patience c:\\users\\bbayer\\appdata\\local\\temp\\tmpu0hspx c:\\users\\bbayer\\appdata\\local\\temp\\tmp_qga86\n. Thats confusing. When you run the command manually you get the correct output, then when git gutter executes the command, it looks like it just returns an empty string.\nWhen you log the output (results) in git gutter, can you also log, encoding and decoded_results, just to see what they are.\nMaybe it is a problem with therun_command method. I do not know much about cygwin but I would take a simple command that has output. Maybe something like ls c: or echo foo and compare the output when you execute it manually on the command line, then test the output using the run_command method like:\npython\ntest_results = self.run_command([\"echo\", \"foo\"])\nprint(test_results)\nMaybe try a couple commands, are you able to get output from anything?\n. @bsbayer \n\nGitGutter doesn't play well with the git that comes with cygwin\n\nGood to know, and glad you have it working now :)\n. Is this still an issue?\n. Unfortunately I do not believe there is an API to support such a feature. I originally wanted to (and get many requests to) show that in the mini map, but there is no API for that either.\n. PATH is an environment variable. My best guess is that the process running git from within Sublime Text is using a different environment with different environment variables and so PATH is set to something else. \n. Did you restart after updating git? Also did you try setting the git path\n. Holy crap, what monitor are you using?\n. @digitalnature the icons are images, I do not think sublime supports that, so the only way would be to have multiple images at different sizes that the user can choose from, or to programmatically scale the images in python, neither of which do I really see as necessary. What issue are you having?\n. Thanks, would you mind condensing the two links into just one, since they point to the same repo.\n. Looks fine to me, Only adding 1 line of code, and doesn't look like it would effect anyone else.\n. At a glance it looks good. Can you make 2 changes please? \n- You removed the newlines at the end of each file you edited. Please put them back.\n- I try to follow PEP 8 which states lines should not exceed 79 chars. Can you fix this line?\nThanks :)\n. So sorry @natecavanaugh, got a new job and been busy ramping up for that. So forgot about this. Thanks for brining it to my attention. I will do my best to get this looked at before Sunday. :)\n. I have spent some time looking at this code. I want to get it merged in, but I must apologize I think there is a better way it can be implemented.\nI think it makes more sense to have the logic moved from git_gutter_handler file to the view_collection file. It is convenient in the handler because we are already loading the settings there, but I think it is fine to load the settings once in the view collection via a plugin_loaded function.\nYou can do that by putting the function at the end of the file like so:\npython\ndef plugin_loaded():\n    settings = sublime.load_settings('GitGutter.sublime-settings')\n    ViewCollection.compare_against = settings.get('compare_against', 'HEAD')\nThen the ViewCollection.get_compare can be defined like so:\npython\n@staticmethod\ndef get_compare(view):\n    compare = ViewCollection.compare_against\n    return view.settings().get('git_gutter_compare_against', compare)\nYou would then need to change the 3 places that this method is called to pass in the view. In the git_gutter_compare method you will need to grap the view like self.view = self.window.active_view(), most of the other methods in that file are doing the same thing. The other 2 places already have the view available at self.view\nAlso I think it makes sense to state in the GitGutter.sublime-settings comment; something to the effect that this setting is only for changing the default (which defaults to HEAD) and there is a command for temporarily changing.\n\nIf you have a specific reason why you think my suggestions are wrong, I am open for discussion. But this feels cleaner to me.\nAlso, thank you for being patient. :+1: \n. It looks great. Please give me a couple days to test it out, if there are no problems I will merge.\nThanks!\n. OK, I found one issue - I just fixed it myself though. You can read the commit message if curious.\nThanks\n. The actual issue seems to be as follows:\nThe way it currently works now is when the git gutter command runs, it checks if the view is untracked or ignored otherwise it processes the file as usual.\nThe problem is the methods that check if the file is ignored/untracked will always return false if show_markers_on_untracked_file is set to false.\nThis causes git gutter to process the changes in in a file that is already knows is untracked. Which will make all the lines be marked as new lines. But git gutter has special logic (that is outdated now that it has a better way of determining if a file is untracked) that will not show all the lines as inserted.\n\nThis should be changed as follows:\nThe methods that check if a file is untracked/ignored should actually return whether they are untracked or ignored (regardless if any settings). Then in the git gutter command (not the helper), it should only show the icons if the show_markers_on_untracked_file is set to true, otherwise skip processing the file any further.\nNot sure if that will fix the lag problem (because it would still need to keep checking if the file is untracked every time it runs) but it would be a big step in the right direction.\nI can do this myself, but I am starting a new job and am extremely busy and will be for the next few months. So not sure when I could get around to it. I would love a Pull Request if anyone is willing.\n. Does the lag go away if you set show markers on untracked files to true?\nOn Monday, June 15, 2015, Gabriel notifications@github.com wrote:\n\nHaving the same issue. I work with large untracked .dat files and even\nwith \"show_markers_on_untracked_file\": false the lag I get is so large it\nforces me to disable the plug-in every time I need to edit such a file.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jisaacks/GitGutter/issues/204#issuecomment-112262005.\n. @Gabriel-p so the thing is, when show markers on untracked files is true git gutter actually properly determines that the file is untracked and skips processing the diff. When it is set to false it does not make the check and still processes the diff, only a special rule that says if all the lines are marked as new (which they would be if untracked) it will not show any markers. This in and of itself is not great and should be fixed.\n\nSo if you have \"show_markers_on_untracked_file\": true and it is still lagging, then there is not much that can be done, because it is already not processing the file. It still needs to check if the file is tracked or not though. I do not think the size of the file would make a difference on the speed of which git can determine if the file is tracked or not. So I find it odd that you are still getting the error and it makes me think there may be some other issue going on.\n. > or be forced to disable it every time I need to edit a large un-tracked file.\nif you disable it does the problem go away?\nMaybe just adding that many icons is causing sublime to lag. If so, the solution I proposed in Dec would fix that. It really should not be that difficult to implement if you want to give it a try. I could also answer any questions you have.\n. @Gabriel-p I went ahead and did the work myself. I also cut a pre-release 1.1.3 with this in it. Please install and let me know if that makes the situation better.\n. Cheers! \n. Have you tried using git in the terminal since you upgraded? I think there was an issue where Yosemite upgraded git and you need to accept the terms before you can use it.\n. Did you try setting the git path?\n. OK I am going to close this issue then. Glad you got it working :+1: \n. :shipit: looks good to me.\n. Have you tried setting the git path?\n. Take a look at the READ ME, there is a section on setting the git path\n. @xenidev you are referencing the instructions for installing GitGutter on windows. You previously have said that git gutter is already installed though. I think you should be reading the part about adding the get_binary to your git gutter settings. Read this part here. Also you do not want to set it in your user settings, but your settings specifically for git gutter. Read this part.\n. > giving the lack of proper API I believe it is a good solution.\nI never wanted to implement this into git gutter because I didn't want to add any features that I could not polish.\n\nWhat do you think?\n\nI actually had an idea to split git gutter out into 2 packages:\n- An engine that parsed the git diff and broadcast changes. Other packages could subscribe to be notified of changes\n- the git gutter UI that uses the engine\nThis would allow for any plugins to be built on top of the engine. Without bloating the hell out of GitGutter.\nI actually had a working prototype a couple months ago, but I have been so busy with my new job I haven't had any time for Open Source.\nAlso, this would probably be the first ST package (first I know of) that would have a dependency on other packages. Would be nice if package control supported that kind of thing.\n. @druellan, Awesome, I had no idea someone was doing something similar. If I ever get time to look into that again I will compare and see how they tackled the problem. Thanks for the info.\n. Have you installed git? Did you try setting the git_path directory?\n. Ok first thing you want to do. Read the read me for this repo. It has some help. It explains the git path. Then if you are still stuck. Comment again and let me know what you have tried so that I may have some idea how to help you. \n. I looked into this when originally building gitgutter. I was unable to add a background while maintaining syntax highlighting. I thought syntax highlighting was more important. That was a few years ago so it may be possible now?. I dunno, I think if we add a feature that allows them to use their own icons, which I think we are considering, they would have a lot of freedom. I am afraid of getting too bloated by just implementing everything under the sun, even if it's not very useful.\n@r-stein @rchl thoughts?. Theme looks cool!\n. Please rebase this so I can merge it in :)\n. I don't want to support gitgutter edge. It doesn't follow any releases. It just points directly to master. It's a way to try out new features. If you want something more solid, install regular gitgutter.\nI am also fine with just deprecating gitgutter-edge all together and use pre-releases which sublime text supports.. Please open an issue with vim-git-gutter. This is the Sublime version.\n. I think if you don't want to see markers on ignored files, odds are you don't want to see them on untracked files either (since in both these cases they do not tell you anything about your edits just that the file is in fact ignored/untracked.) I don't see any compelling reason to make the user have to change 2 settings.\n. @maliayas I would not be opposed to adding it to show_status.\n. @maliayas I would prefer an object:\njavascript\n\"status_info\" {\n  \"lines_changed\": true,\n  \"branch\": false,\n  // etc. \n}\n. This isn't something I have had time to work on. It's not high on my list of priorities. However, it shouldn't be a very difficult thing to do if you (or anyone else) want to take a stab at it.\n. Ahh. Gotcha.\n. This is a known issue. Git gutter is running git commands as you make changes to determine the icons to show. When you are editing a file over a network it will be having to run git commands over that network and will be very slow. The current answer is to not use git gutter when editing files over a network.\nI would be open to ideas or PRs that attempt to solve this issue but it is not an issue I felt the need to try to solve since I think the majority use something like vim when editing files over a network.\nRelated: #79 \n. Oops. That was an auto closing from the commit message I believe.\n. Hmm, It works the same for me when I disable/enable git gutter. It always makes me make an extra click. The first click will activate the window, the next will position the cursor. However I am using OSX not Windows. \n. If you disable git gutter does the issue go away?\n. The only way I think this would be possible, would be to first check with git, to see if git considers the file as changed before processing it. -- That would break git gutter for files that have been changed but not saved yet.\n. @Gabriel-p that looks like it would work. I tried to look up the git docs to see if there was a way to get a list of the assume unchanged files and came up short.\n. > contained no actual update information\nThe only way that should have happened is if you upgraded directly to 1.2.1 from 1.2.0 which is highly unlikely since they were released about 60 seconds apart from each other.\n\nPlease don't force this stuff onto my screen again.\n\nI am not forcing anything onto your screen. gitgutter is a free program and you are free to not use it if you please. I put up the message to let people know the book exists, and to help a friend who put a lot of effort into making that book. \nI am not planning on pushing out new releases everyday, this was only the 3rd this year. I really didn't think anyone would be so bothered by it, and so far you are the only one who has complained. I am sorry if you think I was being spammy. If you never want to see the message again, I believe (not 100% positive) that if you install gitgutter-edge you won't see the release messages because it just points to master.\n. Thanks so much for wanting to support git gutter. I am thrilled that people enjoy it that much. If you want to make a donation, you can use square cash my username is $jisaacks. However, I do not want to obligate you to in anyway. I love open source and I love giving to the community and I do not expect anything back in return. I would also be just as happy with you making your donation to any charity of your choice! :)\nThanks again, cheers!\n. Hey @wjdp, I was tired when I wrote that last night and I hope I didn't come across the wrong way. I didn't mean to sound like a donation wouldn't be appreciated. It would. I just didn't want to come across as asking for donations. I hope that makes sense.\n. Yes, git gutter was switched to have non blocking on by default. This causes gitgutter to not run while you are typing but waits until you are finished typing to run. You can turn this off in the settings by setting \"non_blocking\": false\n. @entombedvirus This is a big PR. I appreciate the work you put into this. However, I want to make sure to review all of the code carefully since this changes so much. I may not be able to get to this for a month or two.\n. @sigod thanks so much for testing this out and figuring out it's issues. @entombedvirus is this something you are interested in resolving?\n. > I think it's unacceptable that such issue wasn't yet fixed\n@rchl Welcome to free software. Getting this issue which only effects a very small amount of user's isn't everyone's highest priority. The PR was reviewed, changes were requested, they never happened. Not my or anyone else's responsibility to spend time working on issues that don't effect them.\n\n@jisaacks Can we please merge this in?\n\n@ldionne if a fix is made, code is clean, and there are no regressions, I would be happy to merge. But this is not a feature I am going to work on myself. However I am very busy these days, having a full time job, a family and working on a book, doesn't leave me with ample amounts if time to dedicate to what I consider non critical issues. So If no one else can review it than it will have to wait until I can find the time. However if either @sigod or @r-stein sign off then it would be good enough for me (as long as a mac test is done, I think they are both windows guys.) Or if anyone else wants to volunteer to make sure this is a good merge and take responsibility for merging I would gladly add them as a collaborator.\n. Also is anyone would test on ST2 that would also be great, there are still a fair bit of users on ST2. Instructions on manually installing from git are in the read me :)\n. Also I'll close this PR once a new PR is submitted.\n. Is this a feature request? I am not aware of an API in sublime that would allow it.\n. I am going to close this as not possible. If someone discovers an API that would allow that, or if a new API gets added that would allow this, feel free to reopen. I would like it as a feature as well. It was an original goal but could not find an API that would allow it in a sensible way without resulting to major hackery of theme files.\n. @sigod have you by any chance been able to test this?\n@johnburnett can you rebase this?\n. Thanks, your code looks great! I will merge it once I get a chance to test it locally. Really wish Sublime Text had some testing/integration tools.\n. LGTM :shipit: \n. @sigod yep I will be working on one soon :)\n. @johnburnett is fixing #297 (which this PR introduced) something you would be willing to work on?\n. Also we make the check:\npython\nself.git_binary_path = shutil.which(\"git\")\nOnly in version 3 since it looks like python 2 (which sublime 2 uses) does not support it and it creating issues #298 and #301\n. I completely missed this as well. Thanks for bringing back up.\n. I would love to get this feature in. I have a few questions on top of the rebasing.\n@bbrks what is the +1 for here? Also is there anyway to break this up into a couple lines to make more readable?\n. @bbrks thanks, I pulled your branch down locally to play with for a bit.\n. What OS are you using?\n. Thanks for pointing this out.\n\nPlease note that the worktree feature is experimental. It may have some bugs, and its interface may change\n\nI think I may wait for it leave it's experimental phase and lock in it's interface before adding code to support it.\n. > Would it be possible to detect if git is not used and turn GitGutter off?\nSo there is already a function that checks looks for the root of the git repo and returns false if not found.\nI thought there was code in place someone to stop executing if that were the case, but I am not seeing it now.\nI do not get that error when I just tried it out myself though.\n. > Does that function work for two root directories within a single project?\n@Thomasdezeeuw that shouldn't effect it, it searches for the git repo on a per file bases, it does not care about projects. \nIf you are able to reproduce this error or do any more digging I would appreciate it! :)\n. Thanks @syohex \n. It looks like you are only setting shell=true and enabling env vars for windows. Is there a reason for that?\n. According to the docs for expandvars, it looks like it should Just Work\u2122\n. I agree. I think we should leave this closed for now and once #230 is fixed, if this is still a probably it should be reopened then.\n. @etler, I don't think this is something that I care to work on myself, I rarely make significantly white space only changes enough to ever care. However, if someone proposed a clean solution that could be off by default and turned on via settings, I would probably merge it.\n. Also, before you spend any effort, it might be worth checking to see if this setting helps you.\n. @azdavis @AviBueno Is it not working at all or just under certain circumstances?\n. Thanks for pointing this out, Will. I am currently on 3083 it appears to be working in this build. I Wonder what has changed. I will update ST and take a look when I can.\n. Thanks for reporting. yeah #267 would most likely be the same bug/fix. There is a check for the .git folder, there probably just needs to be a way to short circuit and not draw or saw anything in the case it is not found.\n. Thanks for reporting.\n. @jcranendonk yeah, I gave an idea for a possible solution in #266. I would welcome a PR. You may have to poke around a bit to figure out what is going on, but this is a good starting point: https://github.com/jisaacks/GitGutter/blob/6f3d9783aec01ac5efc8456bfe78c5fcdc6dec0c/git_gutter_handler.py#L50-L52\n. @statik213 Sorry I have not merged this yet. I have not manually tested it, but the code looks good.\nDo you still have plans to:\n\nGit Gutter would remove these files when they are not needed. I'll work on that next.\n\nIf so that would address #247 \nLet me know, thanks!\n. Thanks @statik213 \n\nI'd also suggest changing to using tempfile.mkstemp instead of NamedTemporaryFile\n\nIs that something you are willing to work on?\n. There was a fork for this some time ago: https://github.com/bradsokol/VcsGutter I do not know if it is maintained anymore.\n. FYI: When you check git gutter edge just make sure that you have updated to the latest commit.. @reintroducing if you are pulling via git you just need to make sure you pull the latest commits. If you are using Package Control, it will automatically update to the latest commit but I don't remember at what intervals, but you should be able to see what commit it is at you run \"package control > list packages\" and manually update if it is not already at the latest commit.. @suiwenfeng makes sense. is it something you'd be interested in working on?\n. @statik213 thanks for working on this.\n@sigod do you use windows or OSX? if so would you be able to test that this PR doesn't break anything?\n. Yeah you can change the git gutter settings  from \"show_status\": \"default\" to \"show_status\": \"none\".\n. Thanks, if you notice any others please let me know or make a PR :)\n. I think this is just the way git works. When you do a git mv then do a git diff doesn't it still show all lines as new? I could be wrong.\n. The windows in the version name is weird. Have you set the git path?\n. Thanks! \n. That looks great! Thanks so much for putting this together! :)\nI'll need to test it out and review before I can merge though. @sigod would you mind testing on windows?\n. @r-stein I do not know what I am doing wrong but I cannot get this to work at all. I added a print  as the first line to the on_hover method and it is never getting called.  This means the hover callback event is never triggering. I have not used sublime hover events before so I may be doing something wrong. I am on latest 3114 version. I also made sure all the deps got installed. Any ideas?\nAlso, if possible, I would prefer if you could break the event handler into a thin event handler that can be moved to the events file and then call a command that contains most of the logic if it passes all the prechecks. Does that make sense? Not sure if it would be possible but would make the organization better I think.\nThanks! :)\n. This is looking great! I wonder if we should wait to release this until 3116 is released? Thoughts?\n. Yeah, that makes since, I just want to be able to mention this feature in the change-log without the caveat of saying the hover won't work yet. Maybe thats not so bad though as long as they can use it with a keyboard shortcut.\n\nAside: Do you agree, that it would be a good idea to include a screenshot with a short description of the buttons in the README?\n\nYeah that sounds good.\n. Alright, so I was able to get the popup to open by adding my own keyboard shortcut. We should go ahead and add that to for all OS's since we are for the other commands. Once I got it open though, it was plain white background (my theme is a dark background) and the code was not colored formatted.\n. Also as soon as we can get this working nicely and with an easy way for the user to use it (e.g. keyboard shortcut, command palette.) I will go ahead and cut a release with it and just explain in the release notes how to use it now and that hover will work automatically once sublime adds it. :) \n. > It looks like the popup css has also only added in 3116 https://www.sublimetext.com/3dev\nThats a bummer. I wonder when it will be released. It has been several months since the current 3114 was released. I guess we can go ahead and release, it's still useful as is and will only get more useful. We can also explain that they can upgrade to dev build if they want to get the full effect asap. Thoughts?\n\nWhich keybinding would you suggest?\n\n\"ctrl+shift+alt+c\", \"d\" seems fine to me, why would we need the extra \"ctrl+d\"?\n\n(with d for diff) as this prefix is already used.\n\nWhich is already used?\n. > I have adapted it and it should now be highlighted in 3114.\nSweet. I don't see any commits changing anything for this though. (other the the ones adding the command)\n. @r-stein I'll take a look at this again tonight. Is there anything else you are planning to add? If not, will you go ahead and resolve any merge conflicts. :)\n. @r-stein can you make the screenshot some other code that is not related to the popup itself. As it is now, the user might think you are actually trying to get them to pay attention to the code (because it says show_diff_popup.) Viewers may be confused by that. I think a more generic code example will get people to focus more on the popup itself instead of the code that happens to be in the screen shot. Something like your original gif might be great.\nAlso I think a we should move the popup diff section screenshot. Actually as it is getting more verbose. I think this new order might make sense:\nMain Title\n\ndescription /w main screenshot\n\nInstallation\nNot working?\nAdvanced Features\n\nDiff Popup\nComparing against different commits/branches/tags\nJumping Between Changes\n\nSettings\nDoes that make sense?\n. Also, @sigod @r-stein, speaking of read me structure. If y'all want to add a maintainers section with all our names. I am perfectly fine with that. Up to y'all.\n. > or just write it below the title\nI think it makes sense to just have a Mainteners section at the bottom. Seems to be the standard that I have seen on most projects. It could lists collaborators (@jisaacks, @sigod, @r-stein) directly with link to all contributors\n. @r-stein was just playing around with this. Its working really well. It would be nice if the color scheme in the popup matched or if the popup would extend to show longer lines but those aren't deal breakers.\nSo as soon as you make those read me changes I'll go ahead merge this and cut a release.\n. Sounds great @r-stein I'll try to get this done tonight. :)\n. \ud83d\udc4d Thanks so much for all your work on this @r-stein \n. @sigod it should only get called if it cannot find git, which might explain why you are not seeing it.\n\nNow, do you still think that way?\nYou should REALLY check your code, AND REPLY!\n\n@Seraphli gitgutter is free software, everyone who spends time working on it does so for free. I am sorry this caused you an issue but we can resolve it politely.\nWe probably need to either kill the message dialog, or make it a status text, or rate limit how many times it can be called, maybe once per session.\nIs this something you would be willing to work on @Seraphli ?\n. Just cut a release to fix this. If you update please report back if it is resolved for you :)\n. > Is there something I can do to at least disable the plugin while waiting for an update?\nI just released a fix. What version are you using?\n. @hamidnazari did you restart sublime after upgrading?\n. I am sorry this upsets you. I did a lot to make sure that the message is always on the bottom of the change log and only shows up once per update (it will always be in the last x.x.x file.) I tried to make this as unobtrusive as possible. Also I don't cut releases that often, this was the first time in months. If this is still unacceptable to you, feel free to look into alternatives to GitGutter.\n. Thanks for reporting. Closing as duplicate of #298\n. Thanks for bringing this up. This is already reported in #297 We are going to try to fix this ASAP.\n. @r-stein I see you are doing a lot of work on GitGutter. Would you like me to add you as a collaborator?\n. Prior to the new version if GitGutter could not find your git binary it would silently fail. Now it shows this warning.\n. :shipit: LGTM\n. @r-stein thanks, I will test this on OSX with ST3 (when I get a chance) If it breaks linux/ST2 I will rely on people reporting issues. I have yet to find an integration tool for ST plugins and I don't want to get into the business of manually testing every version on every OS :)\n. :shipit: \n. @rchl I still have a fairly big staged branch where I was working on differentiating between staged and unstaged commits. It was looking promising but also becoming a pretty complex problem.\nIt's been a while since I touched it so the details are foggy at this point but you are welcome to poke around it if it peaks your interest. Might not be worth the complexity though.\n. > But I can't promise that I will have enough interest\nOh no worries at all! I wasn't trying to push it on you. \nBTW, you are killing it, loving how much you have been contributing. Thanks so much for all your hard work!\n. > Just had the same thing happen on mine and got it working. Steps taken:\n\n1 Cmd+Shift+P and 'Package Control Remove Package --> GitGutter'\n2 Realize sublime crashed hard...force quite restart\n3 Noticed that GIT itself wasn't noticing a branch, I typed git status and received:\nAgreeing to the Xcode/iOS license requires admin privileges, please re-run as root via sudo.\n4 Run sudo git status and agree to the terms in terminal.\n5. Cmd+Shift+P and 'Package Control Install Package --> GitGutter'\n6 \u00af(\u00b0_o)/\u00af \n7 Profit\n\nI believe this would still work without the uninstall/reinstall GitGutter steps.\n. So far looks good to me. I have not looked at the code thoroughly tho or tested locally. @sigod @r-stein do either you have time to look this over or test?\n. @r-stein thanks for looking this over and approving. What did you test this on Windows? Also @rchl what did you test this on? I can try to test this on OSX tonight.\n. @rchl thanks for pointing that out. This whole time I thought other people were cloning, manually squashing and then merging. That makes things simple!\n. Do these changes affect performance in anyway?\n. @rchl can you explain the overall goal of this PR. It seems you have removed the ViewCollection in favor of passing around the git_handler to individual classes. All of which are now sub commands on a single git gutter command. Other than reorganization is this buying us anything?\nI am not pushing back, just trying to understand if the goal is purely reorganization for future optimizations or if this has some other benefit?\n. @rchl, like I said, I wasn't pushing back, just trying to understand goals so we are all on the same page.\n@r-stein do you have thoughts on this.\nI will try to get this manually tested myself this weekend.\n@rchl You mentioned other Sublime packages running tests. Is that a thing now? When I first made GitGutter I could not find any examples of how to add tests to ST packages. I would love to get some sort of CI setup if possible.\n. I am very sorry @rchl, I have not forgot about you! I had a really busy weekend, forgot about it being Halloween. I am sure there won't be any issues but even still I want to discuss this PR with @r-stein since he has been doing a lot of maintaining lately and seemed to have some concerns.\n@r-stein what are your thoughts on this now? I know you had some concerns earlier, have they been addressed?\n@r-stein, @sigod also, do you have a twitter where I can I ask you some (unrelated to this PR) questions, if not, would y'all be up for a gitgutter slack channel, where we can discuss stuff?\n. @r-stein great thanks :)\n@rchl I will merge this soon. There is another PR you are planning after this right? We could probably cut another release after we get them all merged.\n. Is there a way we can just specify in the dependencies that we need version 1.11.0 or higher?\n. Thanks for putting all the work into this. \nWhy did you add a long comment describing what promises are in the top of your Promise class? Also all the comments in the class seem to follow a format like they are going to be parsed by some type of doc generator. Are you planning on something like that? Just curious.\n. > But feel free to point out any details that you think I should do differently.\nNope I was just asking. I personally live in the JavaScript world where promises are well known, but I don't know how well known they are among the Python community. But I wasn't criticizing, just asking.\nAgain thanks for all your hard work. Once everyone feels confidant enough to merge this in I'll cut a new release.\nAlso excited to see you added some testing stuff! \ud83d\udcaf \n. @rchl want to cut a release ASAP. Is this the last PR before I do that?\n. @rchl ok so once we merge in #323, #324 and #325. Do you think they are all good to merge now?\n. I'd like to get #309 also\n. @r-stein I would just add some text to the Diff Popup section in the README explaining the behavior. If you want to add the screenshot from the PR to the README thats fine too. However, the README is starting to get really long. I am wondering if maybe we should make the main README only about the main functionality and all other things like (popup, compare against, changing styles, etc.) should go in seperate READMEs that the main read me can link to? That doesn't need to happen for this release but might be good for next release? What do you think?\n. @r-stein thats fine, I'll also mention it in the changelog when I release. Once we break out the README into seperate docs we should go ahead and add the screenshot/table etc.\n. @rchl it looks like there is a conflict now after merging #309. Can you resolve and then I'll rebase/merge.\n. @rchl FYI it looks like you might have a different email in your git config than what you have for github. So all your commits aren't getting tied to your user and I think that explains why you are not showing up in the commit graph. I am not sure if you care or not but just thought I'd point that out.\nIf you want to fix it, you should just be able to add the email under your git config --global user.email as an additional email on your account and I believe all your previous commits should update to your account.\nAgain, not necessary,  up to you.\n. Ahh good catch. @r-stein that explains the conflict then!\n. @rchl no problem :) you're commits are showing up in the contributors graph now.\nOK, I think everything for the next release is merged. So Unless I hear differently I'll plan on cutting a release tomorrow. \ud83d\udc4d \ncc @r-stein @sigod \n. What if you add a new line, causing the + to show up. Then remove the new line. Will the + still go away?. OK Cool. . @deathaxe I would make it a separate PR since it is a different bug.. @deathaxe how close is #338 to being ready, perhaps we could get it merged in, and this wouldn't be an issue.\n@rchl @r-stein @sigod what are your thoughts?. @rchl which simpler PR are you referring to?. @rchl I went ahead and merged all those that you listed.. Do y'all have merge rights?\nLet's try this, if one of you approves, the other feel free to merge (prefer rebase.) That way you are always both signing off. Let's try that and see how that works.\nAnd lets try to add milestones, and an issue tracking each release if we can. I'll still cut the releases. . > So would prefer squashing all commits (or at least do it when it makes sense).\nMy only reasoning against squashing, is I like to give contributors, higher numbers in the commit graph if they did a lot of work. If someone wrote 50 commits, and we squash it to 1 commit, it puts them low on the commit graph, when in fact they helped out more than what the graph portrays.\n\n331 is one example where I would prefer squashing as it has some commits that fix earlier problem of the pull request or just adds changes that are later removed.\n\nIf it makes sense to squash it or merge, I am fine. I just prefer rebasing if possible because it usually makes the tree a little cleaner. But isn't always worth it.\nJust use your own judgement/discretion.\n\nBut I guess common sense should be applied on a case basis...\n\nExactly! :). Oh one last caveat, if someone wants to make a change that fundamentally changes gitgutter, or is controversial, etc. I'd like to be included in the decision before merging. Otherwise for bug fixes, small features, etc. Feel free as long as any other member approves first.. @rchl that makes sense.. @r-stein sounds good. @deathaxe if you want to generate the change log using your tool I can cut a release when y'all are ready.. @deathaxe I see you added a tag for 1.5.0\nA couple things.\nI see you added a message for 1.5.0 in release_messages/src This is good. But it's actually the release_messages/dest that package control uses to generate the releases. Nothing in the dest folder should be touched manually though. It gets generated from the src by running make build_release. See the makefile.\nCurrently it gets set as a prelease based on wheather or not the file name contains the text pre which currently you have it named as 1.5.0.txt. So we will need to rename it to pre or I can modify the build.rb file to determine if it is a pre-release by some other means? I am fine if we want to use some other indicator of whether it is a pre release.\nNo worries, though, and thanks for spear heading all this.\nBut to fix it, I think you need to rename /release_messages/src/messages/1.5.0.txt to something like /release_messages/src/messages/1.5.0-pre.txt, then run make build_release to actually build the release notes. Then commit those changes. Then change the tag to point to the new commit.\nThen I can run make release which will actually send the release to package control.\nLet me know if you have any questions. Thanks! :)\n. @deathaxe, Also you don't need to add the Changes since 1.4.0: to the message. Package control merges all the release notes base on what version to upgraded to and from, so you are always looking at everything that is new, and only what is new.. @deathaxe actually I think I mis spoke. Don't add the tag. That is what my make release script does.  Hmm. Actually by adding that tag, I think you did cut a release. But there will be no release messages when people update because the dest release messages were not generated. That's the reason I wanted to be responsible for cutting the releases.\nSo yeah, not really sure what we should do now since it's likely that everyone will be updated, just without any release notes.. Sounds good to me.. Is this something that only effects window/linux? I have never had an issue on OSX with retina/HiDPI displays.. If y'all want to kill GitGutter-edge, that's fine with me. I might have to be the one to kill it since I added it, not sure actually?\nHowever releases should be cut by myself. I have a script that handles everything for that. But I am happy to cut a release whenever ya'll feel ready, just let me know what version number and change log to set and I'll cut it.. > It shold not be that hard to join the packages by adding GitGutter-Edge to the previous_names array and removing the old entry. From Renaming a Package\nThat makes sense, is that something you can do or am I the only one with permissions to do so?. > it is not clear to me how pre-releases are handled by package control \nI believe it is whether or not the release is marked as one when you create a release via github. I am doing it via the github API. you can check it out here: https://github.com/jisaacks/GitGutter/blob/master/release_messages/src/release.sh#L3-L5\n\nI found GitSavvy ... Is it something we might use, too, to make the process of cutting a release a bit easier?\n\nIf I can easily add it to my release tool that I built, I am fine with it.. @deathaxe I am fine using that release strategy but how does it know which commits are new since the last release? We'd also have to start making our commit messages more uniform.\nAlso thanks for the info @FichteFoll . LGTM \ud83d\udc4d . @r-stein thanks for pointing that out :). @deathaxe can you please elaborate? is what @r-stein said incorrect? Or has something changed since then?. Thanks for explaining all that. :) @deathaxe . Would this be for 1.5.0 normal release? or another prerelease?. Sweet. I'll cut a release as either tonight or this weekend!\nCheers! and HUGE thanks to you both for your continued support! \ud83d\udcaf . Anyway for graceful degradation? Theres half a million installs of GitGutter. I have no clue how many are on 2.12 and don't want to break it for that many people. Ideas? cc. @r-stein . I tend to agree with @r-stein . Awesome! I will cut this later today \ud83d\udc4d . @deathaxe I just saw this after I cut the release. Sorry, I guess it can go in 1.6.1?. I wonder if we should add a section like:\n\nDid you check the troubleshooting section on the README?. FYI, @r-stein understands the popup much better than I do, so if he approves, than I approve.. Cool. As long as theres no opposition I'll cut this either tonight or tomorrow when I get time. :). I looked into this before and it seemed like a rabbit whole to me. Others are welcome to try but I would rather not add a feature that relies on hacks.. LGTM. The icon are just image files and they do not scale with the font size. So if your font is larger they will not take up the entire row. This is how they are implemented in Sublime and not something git gutter can change. If you decrease your font, you should get the appearance you want.. > Do you plan changes?\n\nI don't currently have any changes planned, but it's changed before. I don't foresee any changes anytime soon, and if there are in the future, it will just be one occurrence that doesn't get stripped so I don't think it's that bad.. Cool! You can make a PR updated the read me if you want?. @deathaxe when I go there, it says it is already set up.\n\n. @deathaxe that worked thanks. It is live now: http://jisaacks.github.io/GitGutter/. I appreciate all of the gratitude but lately it is @deathaxe that deserves all the credit. He has been doing a great job! Thank you very much @deathaxe.. should this be GitGutterHandler. git_binary_path_fallback instead of self.git_binary_path_fallback, I could be wrong, I didn't fully comprehend this yet, just glanced at it.\n. TIL  Did not know that instance members would fallback to static members if unset. I don't do much python outside of GitGutter, never seen that in another language before.\n. I agree. It's redundant.. I don't really understand how this will fix anything? If the id did not work why would the caption?\nDid you confirm that it was broken and this fixes it?. Hey Python, whatever happen to \n\nThere should be one-- and preferably only one --obvious way to do it.\n\n\ud83d\ude02 . We could just use \"Goto Next \u0394\" haha. But in all seriousness, git itself calls them diffs so it might make more since to use the same vocabulary. However, I personally like \"Goto Next Change\" myself. But I am OK with whatever most people agree on.. ",
    "brandonb927": "Just came here to +1 this issue https://dl.dropbox.com/u/3408044/Screenshots/2012-12-12_1347.png\n. Just updated through Package Control and all is well!\n. ",
    "Pautomagi": "Note regarding this and installing it trough the package manager. You will need to manually change the package folder name. It will download as GitGutter-Edge.\n. Sorry about that, I forgot to comment again. But that is right. For some reason my package manager only displayed the edge version so I assumed that the package had changed name @jisaacks .\n. ",
    "mauricerkelly": "This commit fixes the path if you are installing from Package Control, but breaks the path if you do a git clone.\n. Disagree - the author of the plugin should instead liaise with the Package Control people to ensure that the package is installed in a functioning manner. It should not be broken for a straight git clone.\n. ",
    "coderberry": "+1 on this pull request. It fixed my issues\n. ",
    "mikesplain": "+1 on this. Fixed issues for me.\n. ",
    "kizu": "+1 here, Mac OS 10.6.8, git version 1.7.2.1\n. ",
    "jedrichards": "Just installed a second ago from package control and seeing the same issue. Every line of every file in a clean repo is showing up with a \"+\".\n. ",
    "bencevans": "@jedrichards Apply these changes for now https://github.com/cristinecula/GitGutter/commit/ea141995b5d4b022c868d503b37805ca7a784ab2 and it sorts it.\n. Your Welcome :)   Nifty little plugin. :metal:\n. @idpro This doesn't look to be an issue with GitGutter but rather one with SideBarEnhancements (Assumed Link by Google Search).\nGood Luck!\n. ",
    "EpokK": "You need to replace 'head' by 'HEAD'. I agree with @cristinecula.\n. +1\n. ",
    "genezys": "How about doing a git status first to check the status of the file ?\n. Ok, I have a final version which supports both Mac OS X and Windows fluently (as long as git & diff are available in the PATH).\nhttps://github.com/genezys/GitGutter/commits/windows\n. Yes, this is the exact same issue.\n. Are you sure the git & diff command are available on your command line?\n\nVincent Robert\nLe 15 d\u00e9c. 2012 \u00e0 10:11, S0und notifications@github.com a \u00e9crit :\n\nFor some reason it's still not working under win7, when i start typing anything, this shows up in the console:\nTraceback (most recent call last):\nFile \".\\sublime_plugin.py\", line 362, in run_\nFile \".\\git_gutter.py\", line 8, in run\nFile \".\\view_collection.py\", line 32, in diff\nFile \".\\git_gutter_handler.py\", line 118, in diff\nFile \".\\git_gutter_handler.py\", line 129, in run_command\nFile \".\\subprocess.py\", line 633, in init\nFile \".\\subprocess.py\", line 842, in _execute_child\nWindowsError: [Error 2] The system cannot find the file specified\n\u2014\nReply to this email directly or view it on GitHub.\n. Can you confirm that the diff tool is directly available from the command line. The Git package uses the \"git diff\" command which uses the diff tool packaged with git but which is generally not directly available from the command line.\n. Not \"git diff\", but only \"diff\". You can have \"git diff\" available without having \"diff\" available. GitGutter uses the latter.\n. ## I will look into that when I'm back on a Windows station at work. Let me enjoy my Mac for a few more hours :)\n\nVincent Robert\nLe 15 d\u00e9c. 2012 \u00e0 16:29, JD Isaacks notifications@github.com a \u00e9crit :\n\n@genezys if you want to add a troubleshooting section to the bottom of the README explaining what you just said, and steps to make diff available in windows command line, that would probably be very beneficial.\n\u2014\nReply to this email directly or view it on GitHub.\n. \n",
    "danillos": "Duplicated \nView this https://github.com/jisaacks/GitGutter/issues/1\n. ",
    "benhoskings": "Ahh, right you are. I wasn't thinking in terms of a diff :)\nI experimented with diff -y, which does distinguish between changed and\ninserted lines, but its output would be harder to parse. (Even if it\nweren't in two columns, which makes it unfeasible.) I also checked out\nline-format and group-format, which looked promising but ultimately I don't\nthink it's worth pursuing.\nIn the end, the diff is generated by comparing old and new equally, and so\nis never going to produce what might be the most logical description of\njust the new, non-diff lines.\nCheers,\nBen\nOn 13 December 2012 11:40, JD Isaacks notifications@github.com wrote:\n\nI am using the unix diff tool to determine the changes against the repo at\nHEAD. I believe that is just how unix diff treats changes, if new lines are\ntouching modified lines, they are all treated as a single modified code\nblock.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/jisaacks/GitGutter/issues/8#issuecomment-11317247.\n\n\nCheers\nBen\n. ",
    "S0und": "i can confirm this, have the same issue, win7 x64\n. For some reason it's still not working under win7, when i start typing anything, this shows up in the console:\nTraceback (most recent call last):\n  File \".\\sublime_plugin.py\", line 362, in run_\n  File \".\\git_gutter.py\", line 8, in run\n  File \".\\view_collection.py\", line 32, in diff\n  File \".\\git_gutter_handler.py\", line 118, in diff\n  File \".\\git_gutter_handler.py\", line 129, in run_command\n  File \".\\subprocess.py\", line 633, in init\n  File \".\\subprocess.py\", line 842, in _execute_child\nWindowsError: [Error 2] The system cannot find the file specified\n. Looks like my environment variable was a bit messed up, Vintagelines wasn't helping neither. Everything is working now. Thanks!\n. ",
    "jamuspsi": "Yup.  Seems awesome if we can get this to work\n. ",
    "artzub": "I have got this problem in WinXP.\n. ",
    "sehe": "Great. Seems to work on windows XP now. Thanks\n. ",
    "joeybaker": "ah, progress: The issue seems to be caused by the following in my theme file:\n``` xml\n        \nname\ndiff.header\nscope\nmeta.diff\nsettings\n\nforeground\n#333333\nbackground\n#aaaaaa\n\n\n``\n. I'd say not. The workaround is to remove the setting above, but that is an unfortunate \"fix\" because the above setting does help style actual diff files. It would be great if GitGutter could DoTheRightThing\u2122 when that setting is present.\n. @jisaacks the package is installed toGitGutter` and there are no console messages\nStrangely, I followed @lankybutmacho's advice all is now well! uncommenting the lines (though I swear I did this before) leaves the correct behavior intact. Restarting ST2 doesn't make the problem re-appear, so short of marking Dec 13th off as a bad day, I'm now a happy camper, and can't reproduce the problem!\n. ",
    "stephenway": "Not sure if this helps but I had to disable a bit more than the previous example\nxml\n<dict>\n    <key>name</key>\n    <string>diff.header</string>\n    <key>scope</key>\n    <string>meta.diff, meta.diff.header</string>\n    <key>settings</key>\n    <dict>\n        <key>foreground</key>\n        <string>#75715E</string>\n    </dict>\n</dict>\n<dict>\n    <key>name</key>\n    <string>diff.deleted</string>\n    <key>scope</key>\n    <string>markup.deleted</string>\n    <key>settings</key>\n    <dict>\n        <key>foreground</key>\n        <string>#00A8C6</string>\n    </dict>\n</dict>\n<dict>\n    <key>name</key>\n    <string>diff.inserted</string>\n    <key>scope</key>\n    <string>markup.inserted</string>\n    <key>settings</key>\n    <dict>\n        <key>foreground</key>\n        <string>#A6E22E</string>\n    </dict>\n</dict>\n<dict>\n    <key>name</key>\n    <string>diff.changed</string>\n    <key>scope</key>\n    <string>markup.changed</string>\n    <key>settings</key>\n    <dict>\n        <key>foreground</key>\n        <string>#E6DB74</string>\n    </dict>\n</dict>\nFor now I'm just commenting it out for my main theme. Not sure how you would bypass it on your end.\n. ",
    "jbergstroem": "I get this too\n. ",
    "lankybutmacho": "I was having this issue as well. I commented out the lines in question, and then it worked fine. Strangely though, when I un-commented them, it continued to work fine. Not sure what the deal is, but it appears to be permanently fixed for me.\n. ",
    "fogleman": "Yeah, mainly I needed to normalize the git show output but I did the ST2 buffer as well as a precaution. If we are sure, we can remove that part.\n. ",
    "samueljohn": "what does git diff on_that_file show?\n. or git status.\n. I think, I observed this, too but I didn't recognize. Good catch.\n. Confirmed. Fixed. Thanks!\n. Awesome. Works. Thank you!\n. ",
    "pedro-couto": "Either way (appearing or not in status) the icons stay the same.\nAnd this happens to all files.\n. Thanks @pstadler that worked :+1:  :)\n. ",
    "mweibel": "+1\nI have this issue as well. \ngit diff or git status - it doesn't matter if there are changes on this file or not, always shows the square.\nI use OSX 10.7 and Git 1.8.0.2 if that might help track you down the issue. \n. Need to test it again but seems to be fixed :) Thanks\n. ",
    "kfuglsang": "Even when disabling live mode, the undo behavior is affected. I noticed that the chunks that are being undone are much larger when GitGutter is installed.\nWithout GitGutter installed, Sublime undoes one word at a time.\nI'm on Windows 8 x64 btw.\n. Confirmed that it works.\n. ",
    "ashmoran": "@jisaacks Thanks. Results:\n- No output on file change\n- No output on running view.run_command('git_gutter')\n. Well that was weird. I'd already checked it was installed. I copied the debugging lines you gave into the file, and this achieved nothing. Then when I went back to look at them, they'd disappeared. Then Package Control decided to update itself, at which point everything magically started working.\nI have absolutely no idea what went wrong, or what fixed it, but it works now. Sorry for the noise! And thanks for your help!\n. And\u2026 it just mysteriously stopped working again :-/\nI'm going to disable this package for now. Hopefully(?!) someone else will have the same issue and be able to diagnose it better. I might come back and have another go later. Unfortunately there's only so much time I can justify trying to get a package to work, and this one isn't critical to me.\nThanks for your help so far.\n. ",
    "cmer": "Same for me, I had to install it twice. Now it works. Very odd.\n. ",
    "batamire": "I had exactly the same problem.\nBoth git_temp_file and buf_temp_file had intended content.\nI solved it by removing this from my global gitconfig:\n[color]\n  ui = always\nWeird?\n. ",
    "gstjohn": "Having a problem getting it to run as well:\n\nTraceback (most recent call last):\n File \"./sublime_plugin.py\", line 339, in run_\n File \"./git_gutter.py\", line 42, in run\n File \"./view_collection.py\", line 36, in diff\n File \"./git_gutter_handler.py\", line 146, in diff\n File \"./git_gutter_handler.py\", line 162, in run_command\n File \"/System/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/subprocess.py\", line 623, in init\n   errread, errwrite)\n File \"/System/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/subprocess.py\", line 1141, in _execute_child\n   raise child_exception\nOSError: [Errno 2] No such file or directory\n. Great debugging @aprescott. I am experiencing all of the same as you. Latest Package Control upgrade doesn't fix the issue. Latest master commit doesn't fix it. Running OSX 10.8.2 with ST2 Dev Channel Build 2220.\n. \n",
    "bspingarn": "I too am getting that error. Running Mtn Lion and ST2 2.0.1 Build 2217.\nOSError: [Errno 2] No such file or directory\n    Traceback (most recent call last):\n      File \"./sublime_plugin.py\", line 339, in run_\n      File \"./git_gutter.py\", line 42, in run\n      File \"./view_collection.py\", line 36, in diff\n      File \"./git_gutter_handler.py\", line 146, in diff\n      File \"./git_gutter_handler.py\", line 162, in run_command\n      File \"/System/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/subprocess.py\", line 623, in __init__\n      File \"/System/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/subprocess.py\", line 1141, in _execute_child\n. ",
    "aprescott": "I was having the same problem with no changes and no output, as if it isn't installed. Originally installed with Package Control. I tried cloning the repo and in doing so discovered a way to reproduce working and broken states with both the cloned repo and Package Control.\nSystem is Mac OS X Lion 10.7.5. Assumes you have subl available as per the OS X documentation.\nBroken:\n- Either install Git Gutter with Package Control or have the package installed already.\n- (It was broken at this point for me.)\n- Quit Sublime Text with open windows.\n- Start Sublime Text from the dock so that it reopens windows that were open last time it was running.\n- Change lines, nothing will happen.\nWorking:\n- Either install Git Gutter with Package Control or have the package installed already.\n- Close all Sublime Text windows and quit Sublime Text so the process is not running.\n- cd to the directory containing a git repo + the files you want to edit and run subl . to open the directory.\n- Change lines, gutter icons show up.\nBroken:\n- Either install Git Gutter with Package Control or have the package installed already.\n- Close all windows and quit Sublime Text so the process is not running.\n- Open Sublime Text (through the dock) so it's an empty window.\n- Open a directory through Project > Recent projects. (For me, my project file has certain directories ignored like .sass-cache.)\n- Change lines, nothing will show up.\nWorking:\n- Same as the previous steps, but use subl (not subl .) instead of the dock before going to Project > Recent projects.\n- Works.\nWorking (somewhat redundant, but hey):\n- Close all windows and quit Sublime Text so the process is not running.\n- Open Sublime Text (with the dock) so it's an empty window.\n- Open a directory through Project > Recent projects. (.sass-cache not showing, because it's ignored int the project.)\n- Change lines, nothing will show, broken as above.\n- Quit Sublime Text without closing windows.\n- cd to the directory and run subl, which will reopen Sublime Text with the previous project windows open (.sass-cache not showing, so it's still a project not just a directory).\n- Change lines, gutter icons show up.\nSo it seems there is something to do with using subl? I'd guess the dock icon goes through a different execution path. Same for Spotlight.\n(Trying to use the dock icon + File > Open... for the first working steps above leads to it being broken. Using subl + File > Open... or File > Open recent... works fine.)\nJust for extra points, opening /Applications/Sublime Text 2.app/Contents/MacOS in Finder and starting it with Sublime Text 2 from there seems to also work.\nSo I guess if you want it working, quit the process and run it with subl or use /Applications/Sublime Text 2.app/Contents/MacOS.\n. > @aprescott I pushed a change fbf65a8 that I think fixes the issue you reported (at least it did for me) can you pull/upgrade to the latest code and see if that fixes it for you.\nSeems to still be broken with the same behaviour.\n. > I was having the same problem with no changes and no output, as if it isn't installed.\nJust a note to say that my problem of needing to use subl . as per a previous description still exists as of version 2013.03.10.11.15.25.\n. The bug I outlined above with the workaround of running subl from the command line seems to have resolved itself. Starting it from the Dock now has it functional.\n. ",
    "michaelprobst": "Still not working for me:\nTraceback (most recent call last):\n  File \"./sublime_plugin.py\", line 339, in run_\n  File \"./git_gutter.py\", line 32, in run\n  File \"./view_collection.py\", line 36, in diff\n  File \"./git_gutter_handler.py\", line 146, in diff\n  File \"./git_gutter_handler.py\", line 162, in run_command\n  File \"/System/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/subprocess.py\", line 623, in init\n  File \"/System/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/subprocess.py\", line 1141, in _execute_child\nOSError: [Errno 2] No such file or directory\n. ",
    "cherring": "I have also been having trouble with GitGutter. I have checked it out via git and the last working revision for me is https://github.com/jisaacks/GitGutter/commit/bb00c22e2d70fecebe07b740f472ab289bf7e55a\n. ",
    "DavidLGoldberg": "@jisaacks I'm not sure if this related slightly different symptoms of the same issue?\nI had a scare thinking we introduced a performance bug with the introduction of the jump code.  It turns out the same happens on the prior commit as well (didn't go too far back)\nCan reproduce on windows 7, 2 year old laptop:\n1. Close sublime.\n2. Open sublime to defaulted text file under git control\n3. Slow performance on view's typing.  Delayed response similar to VPN lag.  Was able to type a whole sentence without seeing the text.\n4. ctrl+shift+p -> package disable -> GitGutter\n5. Perfect performance\n6. ctrl+shift+p -> package enable -> GitGutter\n7. *Perfect performance <----------------------------- This is the weird part.\nI was able to reproduce this on several commit shas.  Is this a known sublime issue, or very specific to your plugin?  Perhaps you can cheat and fire a disable -> enable on load ;-)\nI'd be willing to bet there's one fix for both of these issues.\n. @jisaacks I've narrowed the issue down to about a line of code.  It should only happen on windows I believe.  I confirmed here at work as well.  It relates to the NamedTemporaryFile call.  The following article has some useful info:\nhttp://bugs.python.org/issue14243\nI can try to work on a fix either tonight or tomorrow night.  If you have any ideas but don't feel like fixing it, feel free to send them my way too.\nFor now turning off live_mode makes everything work fine.\n. @JLMorales did you try to turning off live_mode in the settings?  I actually prefer the plugin with it off anyway.  Definitely not worth abandoning the plugin because of live mode.\n. Sublime has no ability to stack gutters left to right? If so I'd probably put line number, git,  or vice versa, not sure which would be more readable yet :)\nWould this have to be a change to sublime's core or might it be possible via a plugin, if so I can try to work on it eventually.\n. yup.\n. Oops.  I would have kept the refactor commit off of this request if I knew it was going there.. \n. jisaacks, can you do me a favor and let me know if you get this request or not.  It's my first time doing a pull request, pretty sure it will message you etc...\n. StopIteration exception.  Unnecessary, I have removed that flow with a default value in the next function.  Better flow, and more readable.  I pushed it up, check it out.\n. Personally, I have turned off live_mode for performance.\nAlso, IMO, I think the plugin makes more sense with live mode off.  I like the +'s and -'s to be 1:1 with git status and the file system.  This is especially important for interpreted languages.  It's kind of weird to have sublime say something was \"added\", or \"removed\", then test it to only later realize it wasn't saved to begin with.\n. @jisaacks It's interesting yeah, I gave up on trying to improve it's performance on windows, when I found the live_mode flag, because I didn't really want it :-)  I definitely could see why others would though.  I think it correlates somewhat to the ratio of change / test, which I prefer to keep small.  Also, I'm a pretty neurotic ctrl+s, :w (file saver).  \nSpeaking of which the jump feature is a lot more useful at work with large legacy files than for my coding at home :-)\n. Just to clarify, this fixes an error in the console, no broken functionality, but I figure this is the right thing to do.  Started noticing it, while writing a plugin.\n. Did you try disabling live_mode?  I guess you want live_mode for local but not for network files?  That might help you though for a temporary work around.\n. Aside, from the important back up issue, it seems to be the standard for overrides for most of the plugins isn't it?  That is they allow 3, the plugin default, the plugin specific override or the global.\n. lol, not yet!\nIf this news keeps up though, I might have to change my name :-)\n. Did you restart sublime?  Or disabling and enabling gitgutter.  I think you need to do one of these.  You on windows by any chance?\n. Kind of related, thought I'd just ask, does sublime packaging have support for os specific default settings files (like the key bindings).  If so, I was thinking that potentially it would make sense for git gutter on windows to default to live_mode off.  I haven't seen a machine where the typing wasn't significantly delayed.  Not git gutter's fault per se of course but rather the delay to the git setups on windows.\n. I checked @rahul-ramadas's logic, looks good.  I'm not sure about the new settings code though.  @jisaacks is that necessary?  Anyway you guys probably know best.  I think this is how I originally coded it up (not configurable though, I do like it much better no wrapping.  Nice job!  Haven't tested it though, I'm all about Atom now :-)\n. Oops, nevermind.  I still haven't pulled it myself, but It looks perfect to me now.  Again, nice job!\n. maybe something to do with the tempfile code (not sure that's still in the code base)\n. ",
    "morales2k": "I am getting:\nError trying to parse settings: No data in \nC:\\Users{username}\\AppData\\Roaming\\Sublime Text 2\\Packages\\User\\GitGutter.sublime-settings:1:1\nThis opens in a dialog box before loading ST2, and it prevents it from loading entirely. The process is stuck thouch, but no gui is loaded. So I have to CTRL+SHIFT+ESC to end process and try again. To solve it, I had to delete the entire GitGutter folder from the user data folder as shown above. The settings file is there and it is filled with settings, but I am unsure what triggers this error.\nBefore this error, I was getting no file or directory error, and before that, I was getting a Windows(5) error in ST2 console, saying something about access denied.\nI am uninstalling it and installing it again. I want to see if I can make it work, but it seems like a long-shot. \nRunning windows7 here...\n. I did try it. It still gave errors.\nSent via the Samsung Galaxy S\u2122II Skyrocket\u2122 an AT&T 4G LTE smartphone.\"David L. Goldberg\" notifications@github.com wrote:@JLMorales did you try to turning off live_mode in the settings? I actually prefer the plugin with it off anyway. Definitely not worth abandoning the plugin because of live mode.\n\u2014\nReply to this email directly or view it on GitHub.\n. I'll try that, but right now it is doing something new, totally strange and weird.\nAfter closing the editor, and re-opening, it pops a warning saying:\nError trying to parse settings: No data in C:{path-to-Roaming}\\Sublime Text 2\\Packages\\User\\GitGutter.sublime-settings:1:1\nThe editor crashes - the process still runs in the machine, but the gui is gone. I have to manually navigate to the folder and delete the gitgutter folder... open the editor, remove the package via package control and re-install... same thing has kept happening... probably something is really messed in my configuration and I am unaware... \n. No, I didn't have it before.\nThanks for following up with my messed up install... I am almost sure it has to be some sort of corrupted installation file somewhere. After removing the files from the Packages folder, and removing the package from package manager (so it removes it from its list), I close ST2, and reopen, then install gitgutter again. \nUpon installing it, it shows me that dialog box again. At that point, it does not crash the editor, but closing and reopening gives me the behavior I explained in my previous post.\nI am not sure... but if the folders for Packages under that Roaming user folder, are just a user copy, then I must go find the rest of the files elsewhere so I can delete gitgutter from everywhere and clean install again... since the error I cannot use package manager to properly remove it... so I will have to find a way around that...\n. At the risk of sounding like a jerk, I switched to one of the projects that forked this one, and VCS Gutter worked outta the box for me. I would look into their codebase to check things out...\n. I don't have time right now, but after this project I'm finishing right now, I'll give that a shot. Will post back with the commit that works for me. Thanks for following up with this. Kudos - this is quite handy.\n. ",
    "msiemens": "For me the problem was, that when running the git diff command, git returned fatal: LF would be replaced by CRLF in, without any diff (I'm running a Windows computer). Running git config --global core.safecrlf warn solved this problem and now it works without problems.\nMaybe it would make sense to check the return state of git diff and at least print a warning to the console, if it fails.\n. ",
    "shmup": "It still happens on OS X, just so you're aware. It was fine, but I suppose I must assume it broke during an \"Upgrade/Overwrite All Packages\"?\nTraceback (most recent call last):\n  File \"./sublime_plugin.py\", line 339, in run_\n  File \"./git_gutter.py\", line 34, in run\n  File \"./view_collection.py\", line 36, in diff\n  File \"./git_gutter_handler.py\", line 147, in diff\n  File \"./git_gutter_handler.py\", line 163, in run_command\n  File \"/System/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/subprocess.py\", line 623, in __init__\n    errread, errwrite)\n  File \"/System/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/subprocess.py\", line 1141, in _execute_child\n    raise child_exception\nOSError: [Errno 2] No such file or directory\n. The fix for the issue currently is in git_gutter_handler.py, line 168:\nI changed self.git_binary_path = 'git' to the actual path '/usr/local/git/bin/git'.\n. @jisaacks I did have it specified in my settings, actually. I had to do that at a time for some reason, which also never really made sense to me, as git is in my PATH. It's in my settings just as I hard coded it in git_gut_handler.py, though. \n. @jisaacks, I finally tried really looking into it. Didn't take long, and the problem is just that I was adding the git_binary to my Preferences.sublime-settings, and it would probably be a good thing if the handler looked there too, right?\nI think it should first check Preference settings, and then GitGutter settings. Preferences is the file that people are likely going to edit anyways.\nI sent a pull request: https://github.com/jisaacks/GitGutter/pull/82\n. That one you pointed out also lets you set the git path in a setting, but calls it git_command:\nhttps://github.com/kemayo/sublime-text-2-git/wiki\nAlso the only reason I prefer to set settings in my user's copy is because that's all I have to keep backed up. One file versus many. It's obviously just a preference, and the merge really isn't necessary.\n. Ah, I was mistaken then. That plugin does only load from Git.sublime-settings, all right. But yeah, good idea on opening the issue, an agreement between you two would make a lot of sense.\n. ",
    "martin-brennan": "I had this same issue on Windows; I had the git.exe path set in my PATH variable and GitGutter was giving me the same list of errors. It was solved for me by setting the git_binary_path manually in the User settings.\n. ",
    "AdamWagner": "+1 \nI'm also having this issue. Using Mountain Lion.\n. ",
    "emil-nasso": "+1 here too. \nRunning osx here too. Anyone found a solution?\nEdit: I fixed it by setting an absolute path to the git binary in the git gutter preferences file.\nGit was in my path.\n. ",
    "RwwL": "I upgraded from Lion to Mountain Lion on Friday, and just noticed this issue this morning (the following Monday), though I can't say for sure that's what triggered it.\nLike @emil-nasso above, it appears to be fixed for me after setting the setting the absolute path to the git binary in the git gutter preferences file. Git was in my path as well.\n. ",
    "kalimaka": "I have the same problem (on windows, cygwin + port 1.8.3 git) but manage to see that it was due to path interpretation of git's cygwin. For instance, the following command do nothing : \nc:\\cygwin\\bin\\git.exe diff c:/temp/tmpruq0pn c:/temp/tmpr0qpbn\nbut changing the path of the files to : c:\\cygwin\\bin\\git.exe diff /cygdrive/c/temp/tmpruq0pn /cygdrive/c/temp/tmpr0qpbn return the expected result. \nSo, I've just replaced quickly (I may do something more convenient later, but it can help at present...) the lines in git_gutter_handler.py (l.138), to convert to cygwin path : \ndef diff(self):\n    if self.on_disk() and self.git_path:\n        self.update_git_file()\n        self.update_buf_file()\n        args = [\n            self.git_binary_path, 'diff', '-U0', '--no-color',\n            self.ignore_whitespace,\n            self.patience_switch,\n            #self.git_temp_file.name\n            self.run_command([\"c:\\\\cygwin\\\\bin\\\\cygpath.exe\", \"-u\", self.git_temp_file.name]),\n            #self.buf_temp_file.name\n            self.run_command([\"c:\\\\cygwin\\\\bin\\\\cygpath.exe\", \"-u\", self.buf_temp_file.name])\n        ]\nHope it helps\n. ",
    "andheiberg": "@emil-nasso and @RwwL the problem was resolved after adding the absolut path to git in my git gutter preferences. Btw the path can be found by running \"which git\" in terminal.\n. ",
    "smarigowda": "I had the same issue. It is resolved after adding absolute path to git.\n. ",
    "dennyluan": "Editing the path as mentioned above fixed this problem for me as well.\n. ",
    "arsen91": "Sorry for nooby question on the closed issue.. Where do I put the absolute path and what is the syntax?...\nThanks \n. ",
    "gtmsingh": "I had the same problem and I fixed it by editing the settings of GitGutter.\nI have added the git_binary pointing to the git.exe file in my computer in the user settings file of GitGutter\nPS. for windows users, please use \"\\\" instead of \"\\\" as the directory separator in the path pointing to the binary file\n. ",
    "DHedgecock": "Just worked through this on Windows 7 using ST3. This worked for me:\nAdd this to Environment Path(assuming this is where you have Git installed):\nC:\\Program Files (x86)\\Git\\bin\nLove this plugin by the way! --Thanks!\n. ",
    "Iristyle": "I didn't try yours out, because I didn't know what it might do different than Modific.\n- Modific uses different color circles for the type of change from git diff (based on current color scheme), while you are using the icons as you mention.\n- Modific does listen to Sublime events and runs its hl_changes after save, so that's the same (no toggle for that in Modific)\n- Looks like all the work in Modific is performed in background threads for perf\nThe rendering in Modific appears to be based on this:\n``` python\n    def hl_lines(self, lines, hl_key):\n        if (not len(lines)):\n            self.view.erase_regions(hl_key)\n            return\n    icon = settings.get('region_icon') or 'dot'\n    points = [self.view.text_point(l - 1, 0) for l in lines]\n    regions = [sublime.Region(p, p) for p in points]\n    self.view.add_regions(hl_key, regions, \"markup.\n\n```\nNot sure if yours is better, etc. \n. ",
    "Rowno": "Modific also has shortcuts for previewing of the commited code for current line and reverting modifications (super useful).\n. ",
    "laughedelic": "I like plus icon more than arrow in Modific, but live mode is not so useful for me. Why won't you join to Modific development (for example you could make a pull-request with live mode integration). BTW Modific has hotkeys for jumping between changes (your feature request #24). \n. @jisaacks, alright. Fine, I see your point. That was the answer I wanted and it explains everything.\n. ",
    "frantic": "I tested this PR speed like this:\n``` diff\ndiff --git a/git_gutter_handler.py b/git_gutter_handler.py\nindex a77a9ae..47aba0c 100644\n--- a/git_gutter_handler.py\n+++ b/git_gutter_handler.py\n@@ -1,5 +1,6 @@\n import git_helper\n import os\n+import time\n import sublime\n import subprocess\n import re\n@@ -23,7 +24,10 @@ class GitGutterHandler:\n def reset(self):\n     if self.on_disk() and self.git_path:\n\n\nGitGutter(self.view).run()\nstart = time.time()\nself.view.run_command('git_gutter')\n\nGitGutter(self.view).run()\n\n\nprint str( time.time() - start )\ndef get_git_path(self):\n     return self.git_path\n```\n\n\n(I relaunched Sublime after commenting in/out to be 100% sure it runs latest code)\nResults are same, I've never seen it taking more than 0.02 sec. Actually I have no idea why direct invokation of gutter coloring is slower than doing so from sublime.TextCommand. If #23 didn't help the problem has nothing to do with shell command slowness, but just in case could you try adding time.time() to run_command and see what fraction of overall time does it use?\nMac, Core i7/2.3Ghz, 8GB RAM, SSD\n. Just merged my both pull requests, average time taken is about 0.000616788864136\nLet's make sure we are on the same page:\n1. The code I used to test https://github.com/frantic/GitGutter/tree/slowness\n2. After each modification I restarted Sublime (your plugin is spread across 5 files, and Sublime seams to reload only individual plugin files on save, so not reloaded files still use old cached files)\n3. I have live mode turned on, so each modification triggers the event, I follow output from output panel\n. Have you tried my 'slowness' branch? Does it change anything?\nOn Wednesday, December 19, 2012, JD Isaacks wrote:\n\n@frantic https://github.com/frantic, I Don't think #23https://github.com/jisaacks/GitGutter/issues/23is the issue, not sure what it is. It is frustrating because the\nundo works so much better this way. I restarted my computer and didn't\nrun anything else but sublime and a terminal, still I get this:\nA plugin (git_gutter_events) may be making Sublime Text unresponsive by\ntaking too long (0.028443s) in its on_modified callback.\nThis message can be disabled via the detect_slow_plugins setting\nFor comparison I am using a MBP Core i5/2.4, 4GB, HDD, so my system isn't\nquite as fast as yours.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/jisaacks/GitGutter/pull/22#issuecomment-11513444.\n. Alright, another try. My assumption is that Sublime's run_command actually runs the command in next event loop cycle, thus it takes less time than direct GitGutter invokation. Lets try this.\n\n(I made a test just now, seams like my assumption is correct. You can try raising an exception in GitGutter.clear_all and see stack trace in both cases (with and without my patch))\n. I will, if you are ok with this code complexity trade off :)\n. Those inner functions are used as callbacks, because shell commands are executed in separate thread. I put them inside higher level functions to not clutter class implementation and easily refer callback param.\n. Yeah, I understand. Flicker on my hardware is hardly noticeable, but the delay when working with huge repo bothers me a lot. Probably my case is 1% so feel free to not merge this in :)\n. thanks! :)\n. ",
    "hamishcampbell": ":+1:\nI'll have a look at feasibility. Jumping to next change would be ace for quickly picking up where you left off. E.g. \"I was working on widget.py earlier, open and cycle through changes\".\n. ",
    "linjunpop": "Oops, it's cause by VintageLines, not GitGutter's problem\n. ",
    "Warry": "Sorry to dig this up, but did you found a workaround ?\n. ",
    "alexruf": "See pull request #29. It's my first patch submited on github i hope i did it right.\n. ",
    "bradsokol": "Any thoughts on this pull request?\nThanks.\n. Yes, the link is already there.\nThanks.\n. ",
    "nevinera": "git diff doesn't necessarily run a unix diff; he's parsing the output of the diff command, and that won't work unless git diff conforms.\n. Handy, did not know of that flag :-)\n. I would recomment using git for windows if you need to use windows programs that interact with git.\n. ",
    "alisey": "@nevinera: git diff -U  produces a unified diff, which is a different format. But I've updated the parsing function accordingly.\n. ",
    "gotva": "It works\nthanks :thumbsup: \n. ",
    "badmanski": "Hello,\nI experienced the same problem this morning:\nTraceback (most recent call last):\n  File \"./sublime_plugin.py\", line 205, in on_activated\n  File \"./sublime_plugin.py\", line 154, in run_timed_function\n  File \"./sublime_plugin.py\", line 204, in <lambda>\n  File \"./git_gutter_events.py\", line 44, in on_activated\n  File \"./view_collection.py\", line 18, in add\nImportError: No module named git_gutter_handler\nThe package is installed via package control. Tried uptade and reinstall the package, but it didn't help. Any suggestions? Thanks in advance.\n. @jisaacks yes, I have already figured it out, thanks\n. Hello, I have the same issue.\n. Thanks, @Reinmar , temporarily checked out to 5f332b7, will wait for updates on this issue :+1: \n. ",
    "brentd": "@jisaacks Here's what it looks like:\n\nIt doesn't look awful, just a little fuzzy when compared to the crispness of everything else :)\nGreat plugin btw. Really, really enjoying it. As soon as I get Photoshop set up on here I'll make retina versions of the icons and submit a PR.\n. Ahh, good point. I was hoping that Sublime would automatically select images with @2x suffixed to the file names as high dpi images like it does with themes, but I just did some testing and it doesn't.\nThe good news is that if you provide an image to add_regions that's too big for the gutter, it scales it down, so it shouldn't be too hard to \"fake\" this. Maybe. Will keep working on it :)\n. @WMeldon nicely done. How'd you get Sublime to use the hidpi images?\n. ",
    "unphased": "I've got an rMBP too. \nI think there is a bug where only a certain font height allows for the correct spacing, Now luckily for me that particular font size is a good size for me, but the program should definitely be scaling these indicators based on the line height, and at least in this plugin (on ST3) that is not the case. Still, it's still completely usable and I have spent far too much time tweaking the visual aspects of my new setup already. :smiley: \nNote in these pics I have colorized the icons using an image editor. \nHere I have 12pt Menlo \n\nLook what happens as I change it to 10pt: \n\nAnd at 8 pt you can see the subtracted lines marker overlap each other severely and the other markers are pretty much at the wrong position now: \n\nMaking it bigger like @brentd showed makes for a problem with the subtract lines marker, looks like the position of the markers is centered/relative to the line position itself... or something like that. \n\nSo that is my treatise on the positioning of these icons, now as for their sharpness it is clear that they are displayed using blending at 2x size in a way that gives them the blurring, I'll be back after I test 32x32 icons (hopefully they will not just end up twice as big)\n. @jisaacks Not got around to that yet, sorry\n. @WMeldon What is the method you used to colorize these icons? \n. I'm on a rMBP with ST3 (3011). Does anybody have a way to get this plugin going on ST3? thanks\nEdit: Somebody (@wuub?) please upstream the fix!\n. it is probably that you need to add highlights in the buffer for them to show up in the minimap. the git gutter marks don't fit this description. It should be possible to have an option for git gutter to add highlights as well though.\n. Here is the not very surprising result of my bisect session: \n```\nlust@new-host:~/Library/Application Support/Sublime Text 3/Packages/GitGutter 12:06:30\n\u276f git bisect start                                                                                          master[\u2713]0f9908b\u20161d4h4m\nlust@new-host:~/Library/Application Support/Sublime Text 3/Packages/GitGutter 12:07:38\n\u276f git bisect good 643fc48                                                                                   master[\u2713]0f9908b\u20161d4h5m\nlust@new-host:~/Library/Application Support/Sublime Text 3/Packages/GitGutter 12:07:50\n\u276f git bisect bad master                                                                                     master[\u2713]0f9908b\u20161d4h5m\nBisecting: 13 revisions left to test after this (roughly 4 steps)\n[e06e6c0cae0bb7538c7beb5a7a730260e4449444] Merge branch 'master' of github.com:akirk/GitGutter into akirk\nlust@new-host:~/Library/Application Support/Sublime Text 3/Packages/GitGutter 12:07:55\n\u276f git bisect good                                                                                        e06e6c0[\u2713]e06e6c0\u20167d16h10m\nBisecting: 6 revisions left to test after this (roughly 3 steps)\n[1c11f576eccae4e995bca007a0de298160933a08] Add details of new settings into README\nlust@new-host:~/Library/Application Support/Sublime Text 3/Packages/GitGutter 12:08:13\n\u276f git bisect bad                                                                                         1c11f57[\u2713]1c11f57\u20163d22h48m\nBisecting: 3 revisions left to test after this (roughly 2 steps)\n[e5d1c7c11213e3a870373eb9b8f35f389512ea77] Implement updated git binary path setting.\nlust@new-host:~/Library/Application Support/Sublime Text 3/Packages/GitGutter 12:08:20\n\u276f git bisect good                                                                                       e5d1c7c[\u2713]e5d1c7c\u201613d11h31m\nBisecting: 1 revision left to test after this (roughly 1 step)\n[b050297fa07daa69d1c71fa97b73f2f32cfdcfe4] Add default settings file\nlust@new-host:~/Library/Application Support/Sublime Text 3/Packages/GitGutter 12:08:25\n\u276f git bisect bad                                                                                         b050297[\u2713]b050297\u20163d22h49m\nBisecting: 0 revisions left to test after this (roughly 0 steps)\n[6b8246468d7cd5c87d746ba5d36c26845cec680d] Change live_mode implementation.\nlust@new-host:~/Library/Application Support/Sublime Text 3/Packages/GitGutter 12:08:34\n\u276f git bisect bad                                                                                         6b82464[\u2713]6b82464\u20163d22h49m\n6b8246468d7cd5c87d746ba5d36c26845cec680d is the first bad commit\ncommit 6b8246468d7cd5c87d746ba5d36c26845cec680d\nAuthor: Frazer McLean frazergmclean@gmail.com\nDate:   Tue Mar 5 18:18:47 2013 +0000\nChange live_mode implementation.\n\nRequires existing settings to be changed to new format, see README\n\n:100644 100644 b18362bd769e09f7315698db45cb1d399bd86d69 cde9ee4969a30bb97daa85f75a12c32ddcf16a31 M  git_gutter_events.py\nlust@new-host:~/Library/Application Support/Sublime Text 3/Packages/GitGutter 12:08:40\n\u276f                                                                                    \n```\n. This is weird. I have been completely closing (Cmd+Q) it each time I test something. \nNow I don't know why ST3 does this, but here's what it does: \nI made this change to git_gutter_events.py:\n\nUpon loading up ST3 initially the console contains: \n\nSo at this point livemode is not enabled, for whatever strange reason. \nThen mysteriously once the git_gutter_events.py file itself is opened up and saved, even if i save back the exact same content (I even tested this by editing it in TextEdit, completely independent of ST3), then ST3 will detect its change and subsequently I see this in the console \n\nSo the live mode functionality is clearly working but there is just some strangeness going on with the parsing of the settings files. Which I've been seeing a lot of issues with ST3 so far on that front, actually. But hopefully this helps narrow it down a bit. \n. Well, sure, but the main issue here is that this seems to fail (what might even be a race condition) out of the box.\nThat being said, it's probably a good idea to have the plugin actually select True for live mode (as you suggest) if the settings have failed to parse, just because why the hell would you ever want to use this plugin without live mode.\nBut the root of the problem lies a bit deeper. \nI'll turn this into a pull request. \n. Awesome, thanks for the crystal-clear explanation of how it works. \nDo you know if it's possible to know which line in the diff output maps to which line in the working buffer? \nI can tell from looking through some diffs with -U0 the format basically puts the line number, and what comes after the comma is the count of lines added or removed, with the shorthand of omitting the comma and second number if the second number is 1 (i.e. one line removed or one line added). I don't need to explain that to you since this plugin clearly works great as-is. So this means we know for each \"group\" how many are added and how many are removed. \nSo if we can just do an O(n) scan (where n is # lines) through the rest of the output there, only looking at the very first character (remember, parsing through all this output, just to find each @@ @@ header, means this operation is already O(n) runtime) we can construct our totally correct sequence of markers (which will be not all \"Modified\" markers!). Only we'll be assembling an extra list of markers there. Not that such a list isn't probably being constructed now, anyway. \nI think I know what I'll do during off-time at work tomorrow :D They're still stuck in the dark ages with Perforce. \n. Unfortunately I think this means that a deleted line could now be adjacent to a modified or inserted line, and that means the deletion top and bottom markers must now be multiplexed with the other icons. That's 4 additional icons!\nIt would be really cool, but considering how little of the code I can understand now after looking it over, I unfortunately cannot dig into it now. \n. Check it out, I took the sledgehammer approach to this piece of the git workflow. \n. Sure... plugin works fine, really.\n. +1! I was going to make a new issue that would have been an exact duplicate of this. \n. ",
    "WMeldon": "Decided to take a whack at this.  I didn't spend $2000 on a laptop to look at blurry icons...\n\nI'll check out how it looks on Windows in the morning.\n. @jisaacks After playing around with just the icons for a while, it looks like the important thing is that the icons are bigger than they need to be.  The line height seems to keep it in check.\nThe '2' part was just for switching back and forth quickly while I was testing.  \nIt LOOKS to be working in ST3 with my Retina MacBook and my NotRetina Windows 7.  Also works fine on ST2 from the looks of it.\nNow for the much more tedious task of Retinafying BracketHighlighter....\n. @jisaacks Yeah.  I was surprised myself.  I actually think making them even bigger might be a possible fix for the font size issue.\nAs for BracketHighlighter, it doesn't get along with GitGutter unfortunately.  As soon as you click to a different set GitGutter pops back to normal, but BH seems to dominate the gutter when it's active.\n. Just a note on this issue, that crazy orange blocks appear to be what sublime does when an image file isn't found.\n. ",
    "wuub": "I wanted to see how difficult it is to port a plug-in to ST3, and if it's event possible to serve both ST2 & ST3 the same code base. \nIt seems that in case of GitGutter it's surprisingly straightforward. AFAICT a version from my branch works on both ST3 (3007) and ST2 (2220) \nOn a side note, I don't think that porting SublimeREPL will go as soothly :)\n. AFAICT there is something going on with icon paths being tmTheme relative. I had plans on finishing this work today [+ take a look at supporting compressed packages], but then this happened https://forum.ramhost.us/bbs/viewtopic.php?id=770 and I'm recovering my server from backups for the last 3h or so. \nSorry for the delay. \n. Could you guys give it a go with ST3 3012? It seems icons are working OOB now w/o any additional changes or directories. \n. @whitequark: OSX? \n. @maelnor AFAICT the problem you describe is in fact present, but it's not related to the st3 port \nhttps://github.com/jisaacks/GitGutter/blob/master/git_gutter_handler.py#L30\nhttps://github.com/wuub/GitGutter/blob/master/git_gutter_handler.py#L35\n. no problem, I'll update it first thing in the morning :)\n. Done. There were some minor conflicts in git_gutter_handler.py, If you can please check if I didn't butcher anything there, but the whole thing still works with 2220 & 3012 after merge :)\n. ",
    "kingkorf": "Nice... trying that one out right now, but I'm getting the icon problem again (where the icons are suppose to be a block of yellow and red collors shows up). My icon paths in git_gutter.py point to the right icons... Any suggestions?\n. Nice one... never knew there was a console ;) It's working here too!\n. ",
    "JeanMertz": "I'm having the same issues as @kingkorf, images not being rendered correctly.\n. UPDATE Scratch my below comment, Akirk's path worked correctly. Thank you.\n@sublimehq The weird thing is that this used to work before, for now breaks since 2014.\nWhat is the correct path to point to?\nThis used to work before 2014:\nicon = '../GitGutter/icons/deleted_top'\nBut now this breaks (with the error as posted by the original requester). The following alternatives all failed:\n```\n/GitGutter/icons/deleted_top\nUnable to decode /GitGutter/icons/changed\nGitGutter/icons/deleted_top\nUnable to decode GitGutter/icons/changed\n```\nThese alternatives didn't show the above error in the console, but still showed a brown squared image instead of the correct image (I presume still because it can't find the image):\n```\nicons/deleted_top\n/icons/deleted_top\nreloading plugin GitGutter.git_gutter\n(still not showing image, but brown square instead)\n```\n. ",
    "akirk": "For the images not being rendered for me as well, I came up with this:\nUsing the console within ST3 (Ctrl-) showed me the following message:Unable to decode Packages/Theme - Default/../GitGutter/icons/inserted.png`.\nThe directory Packages/GitGutter/ exists but it turns out Packages/Theme - Default didn't, so the solution for me was to do:\nmkdir ~/Library/Application\\ Support/Sublime\\ Text\\ 3/Packages/Theme\\ -\\ Default and restart ST3.\n(you might need to adapt the paths according to your operating system)\n. ",
    "whitequark": "@wuub, doesn't seem to work for me.\n. @wuub, Debian Wheezy\n. ",
    "nZac": "This will also fix issue 39 that I submitted.\n. I updated the grammar scope to something more specific and it worked great after that.  See Issue 38.\n. @jisaacks,\nHere is a gist of my theme file.\nThoughts?\n. It looks like adding the .git_gutter fixed the issue, and I just noticed that has already been added to the README so this can be closed.\n. Has your theme file changed at all?\n. Can you create a gist with the theme in it?\n. @chetan-  Can you make a gist with the contents of your theme file?\n. ",
    "ccampbell": "@jisaacks Yup :smile: that's the way scopes work in TextMate/Sublime.  \nIt's designed so you can have generic colors that work across all languages, but themes can take advantage of more specific colors for specific languages/scopes.  \nFor example if you look at the default Python.tmLanguage file you will notice that all the scopes are defined like constant.numeric.float.python.\n. ",
    "maelnor": "Got an arror on some files.\nTraceback (most recent call last):\n  File \"C:\\Program Files\\Sublime Text 3\\sublime_plugin.py\", line 395, in run_\n    return self.run()\n  File \"C:\\Users\\deimos\\AppData\\Roaming\\Sublime Text 3\\Packages\\GitGutter\\git_gutter.py\", line 27, in run\n    inserted, modified, deleted = ViewCollection.diff(self.view)\n  File \"C:\\Users\\deimos\\AppData\\Roaming\\Sublime Text 3\\Packages\\GitGutter\\view_collection.py\", line 36, in diff\n    return ViewCollection.views[key].diff()\n  File \"C:\\Users\\deimos\\AppData\\Roaming\\Sublime Text 3\\Packages\\GitGutter\\git_gutter_handler.py\", line 127, in diff\n    self.update_buf_file()\n  File \"C:\\Users\\deimos\\AppData\\Roaming\\Sublime Text 3\\Packages\\GitGutter\\git_gutter_handler.py\", line 48, in update_buf_file\n    contents = self.view.substr(region).encode(encoding.replace(' ', ''))\nLookupError: unknown encoding: UTF-8withBOM\nMay be with BOM should be truncated? \n. @wuub my bad sorry. I missed that commit.\n. ",
    "sorahn": "@jisaacks I don't know anything about Python, but I''ll see what I can do!\n. Well I didn't mean to open a new issue.  Sorry about that!\n. I thought you could attach code to existing issues.  Anyway, my preference looks like this.\njson\n{\n  \"git_gutter_git_command\": \"/usr/local/bin/git\"\n}\nI tested this by having the update command run print out which git to verify that when I changed the preference, the output changed.\n. That's actually something I noticed when I got home to make this change.  My work machine did not have /usr/bin/git and my solution was to symlink /usr/local/bin/git (which, like yours was itself a symlink to the one in Cellar) to /usr/bin/git.\nMaybe i'm worse off not having git in /usr/bin, but its easy enough to add the ability to run any version of git on the system. \n. Well, I guess I maybe still see some value in offering people the option to override the default version of git if they want.  It's up to you.  My specific issue can be resolved with out this pull request though. \n. @jisaacks Do you want me to make another pull request for adjusting the git binary location the proper way, or just let that be resolved here.\n. ",
    "natewiebe13": "I can also confirm.\n. @jisaacks it works if you install the plugin as a folder, but with ST3, installing from Package Control installs the packages as zip file in the Installed Packages folder as described above. So it can't decode the images since they don't exist.\n. Something strange is going on. Cloned from github, fiddled around, then removed that and tried installing from PC again, and it worked. Not sure what happened.\n. ",
    "jamesandres": "Confirmed, I am getting this error also.\nUnable to decode Packages/Theme - Default/../GitGutter/icons/changed.png\n. @natewiebe13 That's my experience too. Package control doesn't work, the old style directory method does work.\n. ",
    "pstadler": "Same error here. Check out what happens while installing it via Package Control, I guess it's related:\nignored packages updated to: [Vintage, GitGutter]\nreloading Packages/User/Preferences.sublime-settings\nreloading Packages/User/Package Control.sublime-settings\nignored packages updated to: [Vintage]\nreloading Packages/User/Preferences.sublime-settings\nreloading plugin GitGutter.git_gutter\nreloading plugin GitGutter.git_gutter_events\nreloading plugin GitGutter.git_gutter_handler\nTraceback (most recent call last):\n  File \"/Applications/Sublime Text.app/Contents/MacOS/sublime_plugin.py\", line 68, in reload_plugin\n    m = imp.reload(m)\n  File \"X/imp.py\", line 252, in reload\nzlib.error: Error -5 while decompressing data: incomplete or truncated stream\nreloading plugin GitGutter.git_helper\nTraceback (most recent call last):\n  File \"/Applications/Sublime Text.app/Contents/MacOS/sublime_plugin.py\", line 68, in reload_plugin\n    m = imp.reload(m)\n  File \"X/imp.py\", line 252, in reload\nzipimport.ZipImportError: bad local file header in /Users/pstadler/Library/Application Support/Sublime Text 3/Installed Packages/GitGutter.sublime-package\nreloading plugin GitGutter.view_collection\nTraceback (most recent call last):\n  File \"/Applications/Sublime Text.app/Contents/MacOS/sublime_plugin.py\", line 68, in reload_plugin\n    m = imp.reload(m)\n  File \"X/imp.py\", line 252, in reload\nzipimport.ZipImportError: bad local file header in /Users/pstadler/Library/Application Support/Sublime Text 3/Installed Packages/GitGutter.sublime-package\n. It seems that the problem started with the following commit: https://github.com/wbond/sublime_package_control/commit/8efe5da390d0d4e3e0ca692b2f0d2c5a453f5ee3\nIssue here: https://github.com/wbond/sublime_package_control/issues/358\nPackages are now zipped in a .sublime-package file inside Installed Packages folder. Quick fix:\ncd ~/Library/Application\\ Support/Sublime\\ Text\\ 3/Packages \\\n    && mkdir GitGutter && unzip ../Installed\\ Packages/GitGutter.sublime-package -d GitGutter \\\n    && rm ../Installed\\ Packages/GitGutter.sublime-package\n. ",
    "rtgibbons": "Yeah, ST3 is moving to distributing these packages as a single package. So the Package Control is putting them into this format when it installs them. (the package is just a zip file)\n. ",
    "sublimehq": "Build 3014 and later allow icons to be placed in the gutter without having to be in the \"Theme - Default\" package, which should help with this issue.\n. Hi Jean,\nMany thanks for your email.\nDue to the high volume of emails we receive, we are unable to address each\nsupport question individually.\nPlease join our forum, http://www.sublimetext.com/forum/, where you can\npost questions and observations about the product.  You should be able to\nfind an answer from the community there.\nCheers\nSales Team\nSublime HQ Pty LTD\nOn Thu, Feb 28, 2013 at 6:08 PM, Jean Mertz notifications@github.comwrote:\n\n@sublimehq https://github.com/sublimehq The weird thing is that this\nused to work before, for now breaks since 2014.\nWhat is the correct path to point to?\nThis used to work before 2014:\nicon = '../GitGutter/icons/deleted_top'\nBut now this breaks (with the error as posted by the original requester).\nThe following alternatives all failed:\n/GitGutter/icons/deleted_top\nUnable to decode /GitGutter/icons/changed\nGitGutter/icons/deleted_top\nUnable to decode GitGutter/icons/changed\nThese alternatives didn't show the above error in the console, but still\nshowed a brown squared image instead of the correct image (I presume still\nbecause it can't find the image):\nicons/deleted_top\n/icons/deleted_top\nreloading plugin GitGutter.git_gutter\n(still not showing image, but brown square instead)\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/jisaacks/GitGutter/issues/46#issuecomment-14220046\n.\n\n\nRegards,\nSales\nSUBLIME HQ PTY LTD\n. ",
    "RazerM": "When I started it, #45 wasn't there. The menu uses the standard method of opening preference files, see Preferences > Package Settings in Sublime for other packages that do the same.\nThe default settings file is only there so it can be copied into the user settings file, as this is the convention used by Sublime itself as well as other packages.\nCompare: Package Control Default Settings, with my Package Control User Settings\nLooking at #45, I see it uses view.settings(), which from what I gather is meant for retrieving values which can be different for each open file, so not sure that's the best way to do it; I may be wrong.\n. @jisaacks I will change what you have asked and leave another comment when it is mergeable.\nWith regards to live_mode and the need for using on a case by case basis, project settings can be set as indicated in the Projects documentation, I could add this to the README when adding information about the new settings?\n. The changes have been rebased onto the latest commit, live_mode updated, and the README has been updated.\n. I had problems with encodings also, never realised _get_view_encoding already existed in the file but wasn't being used.\n. ",
    "staticdreams": "I'm no expert and it may be my mac.. but I able to use git from sublime (git plugin), with command line or otherwise.. but as soon as I open such project in ST3 I'm getting: \nTraceback (most recent call last):\n  File \"/Users/Peter/Library/Application Support/Sublime Text 3/Packages/GitGutter/git_gutter.py\", line 32, in run\n    inserted, modified, deleted = ViewCollection.diff(self.view)\n  File \"/Users/Peter/Library/Application Support/Sublime Text 3/Packages/GitGutter/view_collection.py\", line 36, in diff\n    return ViewCollection.views[key].diff()\n  File \"/Users/Peter/Library/Application Support/Sublime Text 3/Packages/GitGutter/git_gutter_handler.py\", line 146, in diff\n    results = self.run_command(args)\n  File \"/Users/Peter/Library/Application Support/Sublime Text 3/Packages/GitGutter/git_gutter_handler.py\", line 162, in run_command\n    startupinfo=startupinfo)\n  File \"X/subprocess.py\", line 818, in __init__\n  File \"X/subprocess.py\", line 1416, in _execute_child\nFileNotFoundError: [Errno 2] No such file or directory: 'git'\nI verified the existence of .git folder in my project. Also typing \"which git\" in terminal yields:\n/usr/bin/git\nIs there anything else I can do to debug this further?\n. Yes, that works much better now. Thanks!\nI also happened to a few other ST3 add ons I have been trying to install. Now I see where this is coming from.\nOn Tuesday, February 26, 2013 at 3:31 PM, JD Isaacks wrote:\n\nTry changing these 2 lines:\nhttps://github.com/jisaacks/GitGutter/blob/master/git_gutter_handler.py#L77\nhttps://github.com/jisaacks/GitGutter/blob/master/git_gutter_handler.py#L142\nChange the string git to /usr/bin/git see if that fixes your problem. It looks like it is having trouble finding the git executable, this way you will specify the exact path.\nIf that fixes it, I have a couple pull requests in the pipeline that add the ability for you to set the path to git (that I will merge in soon)\n\u2014\nReply to this email directly or view it on GitHub (https://github.com/jisaacks/GitGutter/issues/48#issuecomment-14117313).\n. \n",
    "alepee": "I deleted GItGutter and any other Git related utilities, and made a new install.\nProblem solved. I now run with:\n- Git\n- Gist\n- VCSGutter (forked from GitGutter)\n. ",
    "Dream-Work": "solved.\nread the initial doc and insert the dict in my theme.\n. ",
    "muzehyun": "Test any file that includes carriage return(0x0d) character.\nWhen I open the file, sublime opens it as 'UTF8' file.\nAnd I can see UnicodeDecodeError error.\nIf I change encoding to 'Windows 1252' manually, it works fine without error.\n\nTraceback (most recent call last):\n  File \"./sublime_plugin.py\", line 339, in run_\n  File \"./git_gutter.py\", line 32, in run\n  File \"./view_collection.py\", line 36, in diff\n  File \"./git_gutter_handler.py\", line 153, in diff\n  File \"/System/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/encodings/utf_8.py\", line 16, in decode\n    return codecs.utf_8_decode(input, errors, True)\nUnicodeDecodeError: 'utf8' codec can't decode byte 0x96 in position 23405: invalid start byte\n. ",
    "FichteFoll": "```\nTraceback (most recent call last):\n  File \"C:\\Program Files\\Sublime Text 3\\sublime_plugin.py\", line 535, in run_\n    return self.run()\n  File \"git_gutter in C:\\Users\\Fichte\\AppData\\Roaming\\Sublime Text 3\\Installed Packages\\GitGutter.sublime-package\", line 33, in run\n  File \"view_collection in C:\\Users\\Fichte\\AppData\\Roaming\\Sublime Text 3\\Installed Packages\\GitGutter.sublime-package\", line 51, in diff\n  File \"git_gutter_handler in C:\\Users\\Fichte\\AppData\\Roaming\\Sublime Text 3\\Installed Packages\\GitGutter.sublime-package\", line 161, in diff\nUnicodeDecodeError: 'utf-8' codec can't decode byte 0x93 in position 384: invalid start byte\nTraceback (most recent call last):\n  File \"git_gutter_handler in C:\\Users\\Fichte\\AppData\\Roaming\\Sublime Text 3\\Installed Packages\\GitGutter.sublime-package\", line 159, in diff\nUnicodeDecodeError: 'utf-8' codec can't decode byte 0x93 in position 384: invalid start byte\nDuring handling of the above exception, another exception occurred:\nTraceback (most recent call last):\n  File \"C:\\Program Files\\Sublime Text 3\\sublime_plugin.py\", line 535, in run_\n    return self.run()\n  File \"git_gutter in C:\\Users\\Fichte\\AppData\\Roaming\\Sublime Text 3\\Installed Packages\\GitGutter.sublime-package\", line 33, in run\n  File \"view_collection in C:\\Users\\Fichte\\AppData\\Roaming\\Sublime Text 3\\Installed Packages\\GitGutter.sublime-package\", line 51, in diff\n  File \"git_gutter_handler in C:\\Users\\Fichte\\AppData\\Roaming\\Sublime Text 3\\Installed Packages\\GitGutter.sublime-package\", line 161, in diff\nUnicodeDecodeError: 'utf-8' codec can't decode byte 0x93 in position 384: invalid start byte\n```\nFile: https://dl.dropboxusercontent.com/u/23263478/YAML%201.2.sublime-syntax\nCopying from the file and pasting to another one did not result in the above exception - neither did reverting to my latest commit. Interestingly, there doesn't actually appear to be a 0x93 byte in that file:\n``` py\n\n\n\ns = view.substr(sublime.Region(0, view.size()))\n\"\\x93\" in s\nFalse\nb\"\\x93\" in s.encode(\"utf8\")\nFalse\n```\n\n\n\n``` py\n\n\n\nf = open(view.file_name(), 'br'); s = f.read(); f.close(); b\"\\x93\" in s\nFalse\n```\n. @jisaacks \n\n\nI just checked, it seems it doesn't exactly require a restart, it stops git gutter from adding any new marks, but does not remove the current ones. Either way, it's not very convenient for you.\nI am not sure what the best solution is, and I am open to suggestions, but I agree - some sort of functionality would be useful.\n\nYou just have to define a global plugin_unloaded function in a root plugin file to remove the regions from all views, which will be triggered by ST when unloading a module, for example when disabling a package. This does not happen when closing ST or when just deleting the package from your HDD.\nSee also this discussion where I mentioned it a few days ago (including ST2 compatability) and this package where use this and explicitly state to remove/disable this package using Package Control only for these reasons (because otherwise users would get loads of \"unable to find ...tmTheme\" error messages).\n. Oh yes, I didn't see there was a separate issue for this already so I just stepped in as I read the referenced link from your package control PR.\nI should definitely cover this in the unofficial docs - noted.\n. @jisaacks, indeed. Package Control does not look at the \"releases\" page and does not look into your release or pre-release flagging there.\nIf you want to release a pre-release you need to use the pre-release section of semver in your tag name, which would then look like 1.1.2-beta.1 or 1.2.0-rc.1.\nUsers could then opt into the pre-releases by adding \"GitGutter\" to the \"install_prereleases\" setting you referenced.\n. Seems to have been a Sublime Text issue that occured with all processes spawned using subprocess. I couldn't run build systems either.\nRestart fixed it.\n. Here's another sample: It works on my HiDPI (1.25) Windows 10 machine but does not on my non-HiDPI Windows 7. Using Consolas on both.\n. Images would be awesome. That way the glyphs would also always be of the same size, which the \"approximately equals\" and \"not approximately equals\" glyphs are not for me. \n. Please use dots between numeric and non-numeirc identifiers, or you might be in for a surprise. SemVer  explictly does not use \"natural sort\".\n(Always triggers me when reading this in a semver-compliant situation.). The pre-release tag is picked up in https://packagecontrol.io/channel_v3.json. It's probably just the packagecontrol.io package info page that fails to render the pre-release for some reason. The release auto-tagging feature is not as mature as you might expect. I have reported a similar issue with PackageDev: https://github.com/wbond/packagecontrol.io/issues/93.\n\nThis was what I understood Package Control to work like, if I add the PRERELEASE tag.\n\nNo, Package Control only operates on tag names, not on \"github release flags\" or something. I also mentioned this here: https://github.com/jisaacks/GitGutter/pull/359#issuecomment-276697472\nStats are looking fine. There appear to be less installations on the weekend and the current numbers seem to be consistent. Furthermore, I don't think that updates count as installations, but I never worked on any stat sending-related code.\nIf you have any more questions, feel free to ask.. Package Control does not interact with Github's Releases, only with tags. Providing a pre-release works according to http://semver.org/, i.e. by adding a -pre-release suffix to a potential future release. See also https://github.com/SublimeText/PackageDev/tags.\nYou should include an update message in your next release indicating that previous GitGutter-Edge users should add GitGutter to their install_prereleases setting array in PC's setting file. See also https://packagecontrol.io/docs/settings.\nEdit: By the way, being a \"collaborator\" on a repository, i.e. having push access, is enough to communicate a change intend to me. I don't need specific confirmation from the repo owner because I assume the owner trusts their collaborators enough.. GitGutter and linters (i.e. SublimeLinter) seem like the most obvious contenders for gutter popups. Others that come to mind would be debuggers, but I haven't used any of those yet and have no idea about their usage of popups. It might come up in the future, however.\nRegarding a general solution, maybe a User setting could be introduced that will be shared by all contending packages. On first launch, they would insert their \"region\" or \"key\" in a list at some position, e.g. before or after a certain potential other key. Then it needs to look for a potential conflict with any of these higher in that list, similar to #477, before adding its own popup.\nOr, you know, just make a dependency that does all that. Make it provide a useful API like \"should I render a popup here?\" and have it store the default precedence list. Removes the need for all the duplicated code. Could take care of gutter icons as well, although that will be harder to synchronize.. ",
    "deathaxe": "Decode exceptions are handled.\nIn worst case empty output will be returned.. I prepared a simple fix for this issue locally by replacing the git show command by git archive. \nIt depends on the fix for Issue #340 which is not yet published due to pending PRs.. @kofalt: You could checkout the commits from my PR and help reviewing and bug hunting.. Good news for the bad news: I found the reason. This is not related to the smudge stuff but a more common issue. Will fix it.. Pushed the fix to master and the PR branch. Should work now.. ### How GitGutter works\nGitGutter basically creates 2 files in your temp folder (git_gutter_...) which are compared against each other using git diff --no-index ... <file1> <file2>.\nThe <file1> contains a copy of Sublime Text's view.\nThe <file2> contains the unzipped content of git archive --format=zip <hash> <file_name>\nThe <hash> is the current commit hash of your compare target (HEAD, branch, tag). <file2> is updated only, if this <hash> changes. The <file_name> is the relative path of the file within the index.\nAs descriped in some posts above smudge filters are applied to <file2> by git archive. \nConclusion\nThis means you can use smudge filters, which will manipulate the file when it is checked out, but you can't use smudge filters, which manipulate the working file before commit.\nThere is no way to apply any smudge filters on <file1>!\nDiff\nAs you stated correctly, we can't call git diff against the working file directly, as it may differ from what the view shows.\nCalling git diff against the temporary <file1> using the --git-dir and --work-tree arguments doesn't work reliably and would slow down the diff process, if the working tree was located on a remote machine.\nGitSavvy as an example uses git hash-object -w to create dummy commits for the local file, but this creates dangling objects for each modification in the database and also may slow down diffing on remote drives. This is no option!. GitGutter can't track other plugins adding or removing gutter icons and thus can't react on it. It only checks for existing gutter icons (protected_regions), if it is about to update its own gutter icons.\nIt is an intended behavior of GitGutter so far to update its gutter icons only, if either the view's content or the file from database has changed. The whole evaluation is aborted, if none of the files has changed to not unnecessarily run git and/or write file content repetitively to disk.\nAnyway, adding/removing bookmarks doesn't trigger any event, which would cause icons to update. A view must be (loaded, cloned), activated or modified to trigger GitGutter to evaluate changes.\n. The reason is, that the bookmark icon is simply added to the line, where a GitGutter icon already exists. So they fight against each other - maybe by name - and GitGutter seems to win sometimes. All GitGutter region names start with \"git_gutter_\" so I don't have an idea, why bookmarks should have a \"priority\" in between of \"added/deleted\" and \"changed\" regions. The only possible reason would be ST sorting by 'scope' name but not 'region_name'. The scopes are named like 'markup.added.git_gutter'. I'll have a look on it, but won't change scope names because of backward compatibility.\nThe only way was to check when one of the protected regions has changed and update gutter icons to avoid fighting. :-/ Some kind of messy.\nP.S.: For me bookmarks overwrite all gutter icons (added/deleted/changed).. This might address the problem with bookmarks, but we would need something to work for all protected_regions - just to keep consistent. As a user can define its own list of regions, this might be a quite tricky task.. With GitGutter 1.5.0 the file from git index is read once after loading or changing compare target. All diff operations are performed using local temporary files and thus don't depend on network speed any longer. All commans are run in the plugin_host using sublime.set_timeout_async() if available.\nGitGutter is disabled at all, if the open file is not part of a working tree.. Will be fixed together with Issue #161. GitGutter 1.5.0 is disabled at all, if git binary was not found on PATH or settings.. The colors of the icons are defined in the color scheme. If it misses the correct definitions, the icons are show white. This is nothing which can be fixed by GitGutter.\nPlease edit your color scheme.. I like this idea as it should by quite easy to realize and seems straight forward. I was thinking about the approach suggested by PR #136 to combine diffs from staging area and HEAD but found it quite heavy. \nI think I'll pick up this idea.\n. ### An idea how to handle Compare against staging area\nI find selecting the Compare against staging area  manually possibly not to be so user friendly and a bit tricky on the other hand.\n\nFrom user's view I would prefere to automatically compare against the staged file if exists.\nFrom the developer's view it is a bit tricky to set the compare target manually, because I can't compare against an empty staging area. Automatically switching compare target back to HEAD if a view does not show staged file might confuse users. The compare target is set per repository. Not all open views may show a staged file. If user changes views ... what to do?\n\nSo here is an idea:\nGitGutter compares against the HEAD by default, but can compare the view against the current branch, too.\nWhen comparing against...\n\nHEAD: The view is automatically compared against the staging area if not empty.\ncurrent branch: The view is always compared against the latest commit.\n\nThese two options would allow comparing against both staging area and latest commit without any additional command.\nSo all change markers will disapear as soon as a file gets staged. The staging status is shown in the status bar. Any further changes will start to add new gutter icons and the status bar text displays staged and modified.. Yes this is the point. The question is, how and when to enable people to compare against the staging area.\nOne option would be to add a Compare against staging area command as suggested by @RafalSkolasinski. The user would need to activly select the staging area to compare against by keybinding, command pallet or setting.\nBut if a view's file is not in the staging area, GitGutter needs to fallback to the HEAD anyway to have something to compare against. This can happen in two ways:\n\nKeep user selected compare target and simply compare against the HEAD.\nReset user selected compare target from 'staged' to 'HEAD'.\n\nOption 2 interferes with the feature of selecting a compare target per repository. Example: 2 tabs showing files of the same repo are open. 1 staged, 1 modified. User has the staged view on top editing something while compared against staging area. Now he switches to second (modified) tab. The compare target is reset to HEAD as not contained in the staging area. Switching back to the staged view, would now no longer compare against staging area as HEAD is the new target. -> No-Go.\nOption 1 is the better idea, as it would automatically compare against HEAD for unstaged files and compare against staging area if a file is staged. The new command would be named like Compare against HEAD or staging area then.\nSo the question is: Do I need to add this explicit command and setting value for it or can I automatically compare against staging area, if HEAD is the selected compare target? \nDoing so would extend the meaning of HEAD to include a staged file if available automatically without user interaction. If a user still wants to compare against the latest committed file the Compare against branch command could be used to select the current branch, which would not include staging area.\n. This is what I wanted to avoid because this requires to read both the staged and commited file, compare both to the view and merge results. This costs much more effort and time on large files. Even worse, a new scope is needed for a new set of icons, which will then need to be added to all color schemes to show up correctly. This is the approach from PR #136.\nJust switching between staged and commited files would just need to add one further method to read the staged file content. Nothing else need to be changed. The staging are is handled like any other compare target.\n. 1. The .staged and .unstaged scopes were never used in any GitGutter release.\n2. The staged branch is quite outdated and contains some unsolved issues in ways how to handle regions which were changed in both the staging area and the worktree.\n3. I tried to create a way to support the index as normal compare target such as any other branch/tag/commit in the status_porcelain2 branch, but it broke support for older git versions (<2.10) and introduces a couple of issues and complexities with all the existing \"Compare against functions\".  Therefore I did not progress on this path. The most tricky thing is to track the index for changes to avoid checking out its content after each keypress. I found a possible way, but it would require some bigger code changes I simple did not find the time/power for.\n\nI know about the region.redish and co, but I find them too blurry. The correct scope for such kinds of regions is simply markup.. Therefore it is not planed to support the region. ... stuff.. PR #354 Adds the first 7 digits of the hash to the beginning of the title of each commit. This would enable you to search by hash.. GitGutter 1.5.0 comes with a heavily improved algorithm to reduce the time needed to calculate the regions to add icons to from the git diff output. Benchmarks showed a decrease from ca. 10s to 0,1s for a file with 100k lines.\n\nPlease check, whether it works for you.. OK, thanks.. I close this issue\n\nthe original reason for this issue is quite old and out dated\nlater parts of the discussion target SublimeFixMacPath as solution which is part of the trouble shooting section now.. I am not quite sure how rsub works. But I guess this would require to forward the git commands via SSH to the remote machine and read the console output from the remotely located git command. This would require to open a SSH tunnel or use the rsub somehow. Don't think we'll do that.. Had a look onto rsub. It downloads the file to edit from the remote machine to a temporary local file using a special command server over SSH. As the whole working tree an git index database still remains on the remote machine (unaccessable for GitGutter) this feature can't be implemented to GitGutter. It is not possible.. You could set \"show_markers_on_untracked_file\": false to avoid showing markers for new files. This is my default setting, too, as I find markers on each line useless.. Fixed in 1.6.0-rc.1. Memory leaks were caused by view_collections.add(), which do no longer exist.. I am on it.. Fixed in 1.6.0-rc.1. Changes are evaluated on each activated or modified event. One of those is most likely be sent by ST on external file modification. Checked this with GitGutter 1.5.0.. Is fixed by PR #361 . GitGutter 1.5.0 comes with support for custom themes.\n\nBy default it provides two themes, which can be activated via settings.\n- Default.gitgutter-theme\n- Default HiDPI.gitgutter-theme\nThis should solve this issue until ST supports correct upscaling all resources.. Your issue was caused by a Preferences.sublime-settings recently added to the package to support PackageDev's settings completion/linting/tooltips.\nUnfortunately this file overrides all changes made to the GitGutter.sublime-settings.\nI renamed it to Preferences.sublime-settings-hints which keeps PackageDev working and fixes your issue.\nAlternatively all settings from GitGutter.sublime-settings can be placed into the Preferences by prefixing them with git_gutter_. This will depend on color schemes, too. I saw several color schemes showing added and modified lines with the same color. Marking the whole line is not a problem at all.. Loosing syntax highlighting is the drawback of marking the whole line, but this could be user's choice. I like the current solution and find marking the whole line looks not so good, but as it is no big effort, I could imagine to implement it.\nBut basically it's the same thing as with the size of gutter icons. It is basically ok on \"normal\" displays, but due to a lack of correct scaling those elements become nearly invisible on the new 12\" 4K/8K... life style ultrabook displays.. This issue is fixed by commit 967f807 as empty git output will result in a message box.. This is hard to fix as the path in the Main.sublime-menu is fixed. This would require to dynamically create a Main.sublime-menu file for settings.. GitGutter 1.5.0 shows file status in the status bar, if jinja2 library is available.\nSo I set \"show_markers_on_untracked_file\": false to hide the icons and use the status message.\nIs that ok?. This is actually a bug of git so far. as calling git show Filename.php works case insensitive but git show HEAD:Filename.php does not.. As from V1.4.0 GitGutter uses the PATH environment variable to lookup the git binary. Therefore git_binary setting is required for portable setups only or if the git can't be found/defined in the PATH for some reason.\nSee: README.md for details.. The debounce timer value is read from settings with default value provided. This way a valid value is passed to the timer under all circumstances.. I prepared a fix to run all git commands from within the working tree, which is published as soon as all required PRs are accepted.\nThis implicitly enables work-tree support.. Should work with GitGutter 1.5.0 Please check. As submodules work work-trees also do. It's the same mechanism.. Bug no longer exists with 1.5.0.\nIf I set \"ignore_whitespace\": \"eol\" and remove the last character of a line or modify it, the gutter icons show correctly.. Can you provide any examples, please?\nI tried to remove a letters from the last word of of lines and also replaced them by other ones. Both result in gutter icons being displayed as expected.\nThe ignore_whitespace: eol setting is translated to git command-line arguments and passed to git diff -U0 --no-color --no-index --ignore-space-at-eol ... which actually does the job of diffing.\nGitGutter then parses the unified diff output to extract the changed hunks.\nSo I am really interested in what may cause this issue?\n. I can't reproduce. Works great for me here.\nWhat OS and git are you using?\nI checked on Win10 x64 / Linux x64 using git 2.10.0+ I am on git 2.12.0 at the moment. Works for ST2 and ST3.\nGitGutter creates 2 temp files per view. One with content of the view and one from git. They are named like git_gutter_xe342 and live within the default temporary folder. \nCould you copy those 2 files with one symbol replaced at the end of line and do the follwing 2 checks?\n\nCompare manually to check, whether the replaced symbol is within one of the files.\nRun git diff -U0 --no-index --ignore-space-at-eol --patience <file1> <file2> to check, whether your git diff returns the line as modified?\n\nConsidering the change after 'ru': the output should contain something like this:\n@@ -10 +10 @@\n-               case 'ru':\n+               case 'ru';\n. This issue is mainly an issue of Sublime Text itself. I does not yet scale all GUI elements correctly, which causes some elements to nearly disapear on 4k / 8k screens. So we could discuss to handle it by GitGutter or not. I am quite happy with the current solution, but can understand people, who want to have an option to make the marker more visiblie.\nI was able to create a fix with only few changed lines of code to easily enable GitGutter to mark the whole line in the minimap or even resize the gutter markers locally. But this depends on the fix for Issue #340 which is not published as well due to some pending PRs.. What is not working? GitGutter does not support different minimap marker sizes right now. You can turn them on and off only. What I descriped is a new feature I prepared to allow you to set the size of the marker or even highlight the whole line of the minimap.. With GitGutter 1.5.0 the minimap size can be customized\nsee: show_in_minimap setting.. I prepared a fix to disable git_gutter if the open file is not part of a git repository, which is published as soon as all required PRs are accepted.. I never used neither one of them so I don't have an idea about the content of your request.\nI was already experimenting with creating links on each displayed change and revert them upon click on them with the old SequenceMatcher. Unfortunately I had to drop it due to the more complicated Differ engine being used right now. Adding links for single chunks is a bit tricky now even though not impossible.. With your SequenceMatcher I was able to just wrap a link tag like \u00b4 the chuckaround the modified region. Theon_navigate()` handler of the popup parsed it and created the text to add/delete/replace. These arguments I passed to your \"git_gutter_replace_text\" command, which was extended to handle all three operations. \nBut as SequenceMatcher often created very stupid diffs which were unreadable and reverts totally useless and even dangerous, I decided to use python's difflib.Differ(). It is far more complicated but produces better results in most use cases (not all).\nUnfortunately there is no easy way to inject links so easy as the algorithm is split into several parts which don't know the exact text point required for ST. I would either need to parse Differ's output and add them or find a way to calculate them during diff creation.\nI stopped thinking about it so far as all my approaches to do so made things even more complicated and error prone. Maybe I have a brilliant idea how to solve it after some idle time in the future.. The new git integration features of ST3200+ even support to revert single words. So GitGutter won't start implementing this feature anymore.. The issue you describe can mainly have 3 reasons.\n1. git show returns empty output and therefore the file to compare against is empty, too.\n2. Writing git's output to the temp file fails.\nquestions\n\nDo you see any exceptions or error messages about git in SublimeText's console?\nDo you compare against HEAD or a certain commit?\nThe issue can't be solved by restarting Sublime Text?\n\nthings to check\nCan you check the following steps, please:\n1. Do you find files biginning with git_gutter_... in your temporary directory? \n2. If so, please close all instances of SublimeText\n3. Delete any remaining temp file\n4. Open one file from your repo in Sublime Text\n5. Check if 2 git_gutter_... files are created (assuming one view with one file is open)\n6. Is one of the files empty?\nhow it works\nWhat GitGutter does is, calling git show to copy the file from your repo to a temporary file. The content of the view is written to a temporary file as well, but this seems to work well - as you see the +.\nBoth files are passed to git diff to find out the modifications.\n. In V1.4.0 all untracked or ignored files are marked with + if \"show_markers_on_untracked_file\": false \nIf you turn on this setting, you'll see gray x or * for those files. A patch is in queue with pull request #338.. Can you check, if the issue still exists in GitGutter-Edge? We patched some things related with untracked files handling and possible issues with invoking git command. Maybe they already fix your issue. If not I may provide a package with some debugging messages to find the reason.. I added some debugging messages to the current GitGutter-Edge commit and created a branch on my repo https://github.com/deathaxe/gitgutter/tree/debug so you can see what you download.\nThis is NOT meant for everyday use, just to find the reason for your issue.\nThe output in Sublime Text's console should look like this except you will get unix like pathes :-)\nGitGutter: update_git_file(16) git show: ['C:\\\\Program Files\\\\Git\\\\mingw64\\\\bin\\\\git.exe', '--git-dir=C:\\\\Apps\\\\Sublime\\\\Data\\\\Packages\\\\GitGutter\\\\.git', '--work-tree=C:\\\\Apps\\\\Sublime\\\\Data\\\\Packages\\\\GitGutter', 'show', 'HEAD:git_gutter_handler.py']\nGitGutter: git returns 0\nGitGutter: update_git_file(16) git show returned 16327 chars\nGitGutter: update_git_file(16) write 16327 bytes to c:\\users\\deathaxe\\appdata\\local\\temp\\git_gutter_dedfpd\nGitGutter: update_buf_file(16) view has 16327 chars\nGitGutter: update_buf_file(16) write 16327 bytes to c:\\users\\deathaxe\\appdata\\local\\temp\\git_gutter_isx33h\nGitGutter: git returns 0\nGitGutter: git stderr:\nwarning: LF will be replaced by CRLF in c:\\users\\deathaxe\\appdata\\local\\temp\\git_gutter_dedfpd.\nThe file will have its original line endings in your working directory.\nwarning: LF will be replaced by CRLF in c:\\users\\deathaxe\\appdata\\local\\temp\\git_gutter_isx33h.\nThe file will have its original line endings in your working directory.\nIn most cases I encountered issues with empty output of git show or other git commands failing were caused by calling git not from within the work-tree directory. I guess the --work-tree and --git-dir arguments we use to be handled buggy by git. Let's see, if its true.. Should this replace the 'Compare against Commit' or is a new 'Compare against File Commit' command prefered.\nAs the compare target is saved per directory now, both makes sense, somehow. First solution is easer - needs only two lines of code being changed. Could be included in PR #343 . I never made to completely solve this problem. No matter what I tried, sometimes files keep existing in the temp directory. I managed to find out why. Git ist started in the background with the tempfile name as argument. If then a view is closed before git is done, deleting the tempfile in a on_close() may fail hence the file not yet exists. As soon as git finishes it creates that file, but GitGutter doesn't know about that, as the reference to the view is no longer valid. So you would need a way to mark a view as pending, if git runs in the background to eighter cancel git or queue the temp file for deletion as soon as git has finished.\n. This issue may be caused by some versions of git itself. Some git commands randomly fail, if git is not called from within the working tree, but this is exactly what GitGutter does.\nI prepared a fix to run all git commands from within the working tree, which is published as soon as all required PRs are accepted.. Should work with GitGutter 1.5.0. Same as with work-tree support. Please check.. directwrite is my default since using ST without making fonts work in popups. Already tried to turn it on/off. Pasting the button icons to a normal view gets them rendered correctly. Tried with Segoe UI, Consolas, Source Code Pro font. Changing dpi_scale works for me, too, on Win10 but the copy button still shows wrong icon.\n. This bug is caused by GDI rendering shortcomings and is fixed with ST3 3127+ with DirectWrite being used for font rendering.\nFor those who still keep using GDI: This issue can't be fixed for you!\nFor further details see: https://github.com/SublimeTextIssues/Core/issues/1675#issuecomment-296256394. The issue is caused by keyboard mapping issues related to ST itself. It's nothing GitGutter can fix.. > Why did you add a long comment describing what promises are in the top of your Promise class?\n\nI am happy about this brief description as I basically saw constructs like that in js but always asked myself how to efficiently use them in other languages like python. This time I learned how those constructs are named - Promise.\n\nIMO each code should be self explaining. A short description like the Promise docstring about what a class does in general and how to use it should always be a part of code.\n. I tested the changes from this pull request and highly recommend merging.\n. May I suggest to create the buf_temp_file and git_temp_file even more lazily? Instead of creating them in the GitGutterHandler.init() I moved them to update_buf_file() and update_git_file() to see what happens.\nThe big advantage is, they are not created for files, which are not part of a git repository. \nAt the moment temporary files are always created as soon as any file is opened, but they are empty, if the view's file is not part of a git repo.\nI could create a pull request based on this one, If you want.\n. Ok, this release will push GitGutter to a new level anyway. The whole Promise thing is really impressive. No more lags while editing. Many people will be happy about it.\n. > E.g. if we have a setting git_gutter_enabled ...\n@r-stein: That's why I suggested gitgutter_ as prefix. The prefix should be named like the plugin. I also saw dots as separators. But mdpopups is the only one using them so far and I also tend to not like them as they somehow break naming convention. But this is only detail. \nIn general I think, settings should have a unique meaning. It is not essential to have a unique prefix for each plugin. As an example think of the growing number of  theme_... settings, like theme_accent_purple. This setting can be used by several Theme packages in the same way as only one of them will be active at a time. I also saw something like material_theme_accent_purple which I found not so good as it only works with material theme being active. Hope you have an idea about what I want to say with that example.\n@rchl I never would have came to the conclusion that this should enable per project settings. I am not sure if view.settings() is the right object for project settings. As the API documentation says view.settings() are private for a view. I guess they are stored in the session but not the project as well as window.settings(). To really add per project settings, you would need to use the window.set_project_data(data) function. They can read by window.project_data(). data is an object of Dict which solves your prefix discussion as you can add an gitgutter object to the project file like this:\njson\n{\n   \"folders\":[],\n   \"git_gutter\": {\n       \"git_binary\": \"\",\n       \"show_in_minimap\": true,\n       \"show_status\": true\n   }\n}\n. @r-stein: That's just perfect, exactly what is needed. Did not yet realize these documentation. \n. As there are git_gutter_* prefixed settings in use already, I would not recommend to start using new prefixes. It would be a bit confusing. I think it should be pretty clear that this prefix belongs to GitGutter.\n. All project-specific settings use git_gutter_ prefix since Fixed in 1.6.0-rc.1. This was my first concern, too, but it does not.\nI added some print(..) to the on_... event callbacks and did the following steps to check, what's happening.\n1. Open a file \"setup.py\" from another git repo in Sublime Text. \n2. Do some changes to see GitGutter running smoothly.\n3. Leave Sublime Text and open the same file in another editor and do some changes.\n4. Return to Sublime Text. As soon as the view gets focus the file gets reloaded and on_load_async is triggered. This works if the view is already in the foreground or if it is brought back to foreground with tab change.\nSo if the file is modified externally, it is reloaded as soon as the view gets focused by the reloading mechanism of Sublime Text. Any other change is done by user, which is handled by on_modified.\nI'll do some further investigation but can't see a situation this code change could break GitGutter.\n. I don't see on_activate either. No matter if I try with my \"fix\" from above or not, if a file is opened by Sublime Text (e.g.: sublime_text.ext setup.py) it doesn't show gutter icons at all. This seems related with core issues #1457 as Sublime Text does not wait for all plugins being loaded until redirecting plugin commands or events.\nI need to open the console and close it first to see changes. This works with hot_exit true and false.\nIn my case GitGutter loads too late to see the events at all. This could only fixed by a poll in the plugin_loaded() function.\nBut you are right somehow. The following solution might be better.\n``` python\n    # def on_load(self, view):\n    #     if self.live_mode():\n    #         self.debounce(view, 'load')\ndef on_activated(self, view):\n    if self.focus_change_mode() or self.live_mode():\n        self.debounce(view, 'activated')\n\n```\n. > The missing on_activated for initially open view is an existing bug ...\nI agree with you. Core Issue #5 describes the issue. Sublime Text calls an on_activate after its API is ready, but does not call on_activate_async. I added the missing call in sublime_plugin.py for testing and everything is fine.\n\n... technically it's possible to load the file without it being activated.\n\nI have even been looking for ways to avoid GitGutter from running in those situations. If a user runs \"find an replace in files\", which results in hundreds of files being opened and changed, git and diff is called for each of them concurrently. This may take a while and cost a lot of CPU and RAM and is absolutely unnecessary. The gutter needs to be updated only for visible views.\nIf a file like the mensioned setup.py is displayed in the first column and a second column is focused when leaving Sublime Text to change setup.py externally, it receives an on_modified as soon as Sublime Text is focused again. So it gets updated correctly even though it is not the active view at this moment. on_load is not called then anyway.\nOpening Sublime Text with a single file or adding a file to an existing window always results in the file being activated. If not it might not be visible and therefore GitGutter can ignore it. As soon as the file is activated it gets diffed.\nThe minimap as an example is repainted on the first scroll or modify event anyway, no matter if gutter was updated or not.\n. Fixed with PR #331 . > ... I have randomly seen a problem with all lines marked as added.\nMe, too. But this happens with 1.4.0 as well. All untracked files in my repo are marked, just as show_markers_on_untracked_file was true, but isn't. In my case I have a .gitignore in the root of my repo but if I open a file contained in a ignored sub folder, it is shown with all files added.\n. > So I misunderstood that setting and maybe you have too. It seems like it enables special marker when on, but when off, we are still supposed to see + markers.\nThis behaviour is as you recently posted.\nWith show_markers_on_untracked_file: false all untracked, ignored or files not existing on disk are marked with +. As the setting name quite clearly says, they shouldn't be there.\nIf this setting is true, GitGutter shows x for ignored and * for untracked files. If a file is neither untracked nor ignored + is displayed on each line. That's why the last commit with the on_disk() fix.\nI would be very unhappy, if I was not able to disable markers on untracked or ignored files at all. And it does not make sense to me to show them for files, which I told git to ignore as this is the same as the file would not be part of the repo.\n. I finally reverted the branch to nearly approved state, because I found out today, that git has problems with line ending conversion in some situations. This means using git directly as probosed, will not work for all users and results in the whole file being marked modified, even if it is not. \nThat's why I reverted those changes and would like to close this request, if no more issues or changes are desired by one of you.\n. I already was facing this issue with the \"-Edge\" version, too .\nI would suggest to use ...\npython\nsublime.find_resources(\"gitgutter_popup.css\")\nto get the filepath of the css.\n. I rebased and squashed the branch to the latest master.. If someone is willing to perform such a mass of changes only to satisfy linting, lets do this, if ongoing developments have finished. Maybe just before a next release. Otherwise this makes current  developements very hard.\n. SublimeLinter with pep8, pyflakes and pydocstyle will be applied to future code changes.\nHard line breaks in Markdown won't be applied as they break line wrapping on the github.. Did my best to follow the linter rules as close as possible where useful. Some rules applied or enforced by linters are just crap. As there are only few contributions by only few people I don't see any sense in adding support for coala-ci or something like that. I don't like adding stupid comments to disable linter warnings. Furthermore this PR is heavily outdated and therefore closed.\n. I may have a deeper look on this and add it to pr #338 if you want.. Let me ask two questions as I never used ST2, please:\n\nThere is only one thread all plugins are running in, isn't it?\nST2 does not support *_async events and so there is only sublime.set_timeout(...) whose callback is called in the main thread anyway?\nHow can a plugin make API calls thread safe? I could create a mutex or so, but this won't prevent other plugins from calling the same api at the same time.\n\nThe only idea I have is to check, whether a Promise to update gutter is active and prevent running twice to avoid race conditions.. @jisaacks Ok, but I would like to base it on pr #338, if possible.\nThis new pull request will include some bigger changes to git_gutter_show_diff.py as I found a signfificant performance issue with the protected regions handling while searching for a solution, yesterday.\nIt takes about 10 seconds to add gutter icons to 65k lines of code. After some first changes I could reduce that time to 0,2 seconds. But this needs some more work until ready to propose.. Nice!. Those commits were on a throw away \"preview\" branch. Did realize the references here, too late.\nThe fix is actually ready on my local branch but as it is based on some pending PR, I am not able to publish it. Unfortunatelly the reviewers seem to have no time to verify the quality of those PR, so I can't merge them or go on publishing fixes as they want all PRs being merged by rebase.. I periodically look for PRs being reviewed. But havn't been able to go on for about 2 month now. \nI tested everything with ST2 2221 and 3126 on Linux x64 and Windows x64. But I have no chance to check OS X compatibility. So I can't merge something without maybely breaking something on OS X. \nMerging not approved PRs is forbitten.. You could pull the preview branch from https://github.com/deathaxe/gitgutter. It is a throw away preview branch based on current master with all my open PR merged in. This may be good for testing all fixes/features in one run.. I tried to explain the changes and/or new functions in each pull request. It would be helpful to know, wheter something throws exceptions or if you realize some strange behaviour. \n\nYou could try to change the Gutter theme temporarily to \"Default HIDPI.gitgutter-theme\" to see whether the gutter icons are shown in double size correctly.\nI added a command \"Compare against File Commit\" which lists all commits with changes to the open file.\nYou could try the new Quick Panel commands \"Preferences: GitGutter ...\". > I am not completly sure how fixing the blinking is based on the pending PRs. I have just locally commented out that line (from #340 (comment)) and no problems since then. However we may also ensure that the _update_ui is on the main thread or something like this.\n\n@r-stein: It is not fixed at all. Those PRs are the base to publish the fix. I need this PRs approved to publish the fix for Issue #340. This package is simply too small to create many fixes without dependencies at a time. One step after another.\n. > We moved from syncroned handling to a separate thread to improve the performance. Unfortunatly the UI callbacks are still on that thread and remove and readd those icons instead of being on the main thread or just replace them.\n@r-stein: The issue is, GitGutter removes all regions first and than calculates and adds the updated ones. This is what the user sees as flickering, because calculating updated regions takes 100ms to 10s depending on file size right now. Moving things back to main thread will cause the GUI to freeze/lack again. I already prepeared a fix, but it is based on the mensioned PRs. Therefore it is not yet published. It is nearly impossible to keep everything together right now. Too many fixes in parallel which can't actually be handled totally seperatly. . I totally agree with @rchl about squashing. I also like clean history in the end, so you can clearly see a relationship between issues and the resulting changes. Smaller fixes like in #331 in code style or commits which were created during a developement discussion don't need to be kept after merging.. I am quite far with my solution for Issue #26 which also brings along significant lower latencies to add the gutter icons especially for large files.\nThe work is mainly based on PR #338 which could maybe solve Issue #279 even though I am not quite sure with that. This issue might also be caused by empty output of git or an exception in update_git_file() which would be caught silently at the moment. With PR #344 we would at least get an idea of it, as some recommended exception handlings would print issues with git execution in this situation to console.\nSo can we check PR #338 and PR #344 and merge it, so I can prepare to propose the performance update?\nPR #343 is splitted into several commits as it introduces some bigger changes I found useful to to act GitGutter somewhat smarter and clean up some cross references in the python modules. I guess a review of those changes takes a bit longer, so it is not so importand to have this merged, too.\nBut as the show_diff modue will change nearly completely to achieve the performance boosts it would make things easier, too. Otherwise I would need to resolve some conflicts with it later.. Can you check PR #351, #354, #355, #356 for remaining issues, please?\nI am nearly complete with preparing a PR to fix the following issues on top of those commits:\n- Issue #226: Show file status (commited, untracked, ignored) in taskbar by replacing git ls-files by git status\n- Issue #233: git diff will no longer be called for commited, untracked, ignored files/views\n- Issue #147 / #349:  Heavily reduced delays and removed flickering. ### Release strategy\n@jisaacks: Continued discussion from #359 \nWhen calling the git: generate changelog it asks for the tag to compare against with the most recent one as default value. The changelog contains all short messages of all commits younger then the selected tag. If the short message is formated correctly and contain useful information the changelog is ready. In worst case you might select a couple of commits not worth mensioning in the changelog, what might be easier than look through the commits and pick commit messages manually.\nAs we will need to add pre-release tags like 1.5.0-pre1 or 1.5.0-rc1 GitSavvy will suggest the latest pre-release as base for changelog creation. I would prefere to add release messages to final releases only containing everything since the last real release. Pre-release tags may be simple tags only, while final releases use full annotated tags?\nTagging suggestion\n1.5.0-pre1 - tag with maybe new features\n1.5.0-rc1  - feature freeze for bug fixing only. You mean:\n1.5.0-pre.1 - tag with maybe new features\n1.5.0-rc.1 - feature freeze for bug fixing only\nThanks for the tip!. @jisaacks: As GitGutter-Edge is already removed from package control repositories we may\n1. decide how to tag pre-releases\n2. mark the master as pre-release on some good state\n3. publish the new strategy and the way how to install pre-releases to people out there, who are interested in testing latest versions.\nI guess many people may wonder where and why GitGutter-Edge is gone.\nWe at least need to publish the information to add the following key to Package Control.sublime-settings  to be the replacement for GitGutter-Edge. \njs\n    \"install_prereleases\":\n    [\n        \"GitGutter\"\n    ],\nThere are some local commits pending I would like to merge to master and ask to cut of the next release then:\n1. Fix for work-tree support PR #365 \n2. Fix for annoying issue #340 which needs (1).\n3. Enhancement to resize the minimap marker or highlight the whole line, which requires (2). This changes few lines introduced by (2), but I want to keep it seperate.\n4. Fix for issue #74, which is a very small fix in the end to make GitGutter respect smudge filter settings correctly.\nI am not sure how long it takes to review all these changes so we might get ready for the next release not too far in the future.\n. Ok, will rebase the PR branches, autosquash the fixups and generate a PR with the changelog.. Thank you very much for patiently testing my changes! Cool to get these results publishedm soon.\nMaybe this is a good time to think about what could come after 1.5.0.\nHere are some ideas:\n\nUsing git status --porcelain=2 to read the current branch, commit hash and file status (staged,untracked,ignored) instead of using several git calls to receive these information could help reducing latencies and reduce number of program calls.\nThe information from 1. could help to correctly check for staged files and implement \"Compare against Staging Area\" functionality.\nThe settings module needs some attention, too, as it does not support project or view based settings very well.\nI would like to move more internal functions the 'modules' directory in order to hide them from ST.\nThe GitGutterHandler class got quite huge and may need to be splitted into smart pieces somehow. (Not yet sure how and where to split, right now)\nMaybe it is a good idea to flatten the promise chains a bit. I found a good tutorial how to do it. This could help splitting GitGutterHandler and make it easier to understand how the chain works.\n. ### release message\n\n\nI see you added a message for 1.5.0 in release_messages/src This is good. But it's actually the release_messages/dest that package control uses to generate the releases.\n\nThe basic structure how your scripts work is clear to me.\nI basically intended to provide you the changelog and leave creating the 'dest' files up to you on final release of 1.5.0. I was not aware of all release messages being merged as each message of each package looks differnt, I didn't simply realize it. This was the question in PR #376 how to handle it. I was afraid of release messages added to pre-releases would not be displayed to users not installing pre-releases. That's why I asked, whether it is sufficient to add them to pre-releases or releases only.\nSo the answer is: Add to pre-releases, too.\nnext steps\n\nSo yeah, not really sure what we should do now since it's likely that everyone will be updated, just without any release notes.\n\nThis shouldn't have been a final release but one, which is installed to users, who have GitGutter added to the list of \"install_prereleases\". This was what I understood Package Control to work like, if I add the PRERELEASE tag. So I obviously missed something. Sorry.\n\n\nYou could use my release message 1.5.0.txt from 'src' to create a release candidate 2 with the release message in 'dest' being added? Just rename and change it as you need. It's more efficient if you do I think (I have no ruby). I can than have a look on it and learn.\n\n\nI fixed some minor linting errors yesterday and created PR #378 . Maybe you can have a look for some regressions and if it is ok, merge and include it into 1.5.0-rc.2\n\n\npre-release naming\nSeveral packages use alpha,beta,rc to mark the several stages of pre-releases instead of pre only. I am basically fine with all kinds of naming. I indirectly asked for the naming strategy some posts above:\n\n1.5.0-pre.1 - tag with maybe new features\n1.5.0-rc.1 - feature freeze for bug fixing only\n\nToo indirect, maybe :-). I am a bit confused about the packagecontrol.io stats. \nWith GitGutter not in the list of install_prereleases, Package Control installs 1.4.0 as expected. \nWith GitGutter in that list Package Control lists and upgrades to 1.5.0-rc.1 as expected, too. \nThe stats show 0 installs today and only few yesterday.\nDoes this mean everybody in the world has GitGutter included in the list of  install_prereleases which are not displayed in the stats of 1.4.0?\nWhy is the 1.5.0-rc.1 not displayed as PRE like the PackageDev package? Is it because of the PRERELEASE tag on GitHub? I somehow miss something about pre-release handling in Package Control.\n. With the merge of PR #378 I am done with preparations for a final 1.5.0 release.\nNow it's up to @jisaacks when and how to make the final cut including the message in the 'dest' folder ;-)\nEDIT:\n\nYou should include an update message in your next release indicating that previous GitGutter-Edge users should add GitGutter to their install_prereleases setting array in PC's setting file.\n\n... as @FichteFoll suggests.. @FichteFoll : This was the first time I got in touch with that RELEASE / PRERELEASE thing on GitHub. I previously didn't care about it at all - using only tags. So I had to learn the difference between the PRERELEASE flag and pre-tag by appending any -rc, -pre etc. Thanks for updating me.. @jisaacks and @r-stein : We should maybe release a V1.5.1 to fix the Issue #381 for common users? I guess many will struggle with it.. Basically an setting about high-res may not be a bad idea, but I ask myself, whether this could be handled by support of custom icon packages like suggested in issue #256 in a more general way.. Since PR #361 added support for custom icon packages with a Default HIDPI.gutter-theme to support 4k/8k displays this PR might not be required anymore and therefore closed.. We want to change the strategy to use the pre-release feature of package control and therefore remove GitGutter-Edge as the -Edge has some pitfalls. The different package name makes some .sublime-menu and .sublime-commands not working.\nThe idea exists for a while now but in the last few days things moved on quite fast. \nYou can \n1. pull directly from master branch for now or\n2. install normal GitGutter package and give us some days to make up our mind for a final tagging scheme for pre releases.\nAdd the following setting to your Package Control.sublime-settings to tell it to install pre releases\njs\n    \"install_prereleases\":\n    [\n        \"GitGutter\"\n    ],. A TODO I learned from this for future is to handle git errors itself.. I tried GitGutter with Sublime Text 2 yesterday and recognized gutter icons not being updated while editing. In the end I saw the is_view_visible() method returning always False. Printing the view object showed up, they have different addresses. I changed the code, like proposed and it worked for ST2 and 3 as well.. Was sticking too much on ST2 ;-)\n\nwhy do we have to use ID for comparison\n\nIn ST3 the View class implements __eq__ by comparing id's. In ST3 the class definition is empty, so I guess object pointers are compared, which are not recognized equal even though two objects point to the same view.. Is it ok to merge?. The intended icons are:\n* = untracked (gray)\nx = ignored (gray)\n+ = new tracked file (green)\nWill be fixed in next release by PR #338 . Unfortunatelly there are some overlaps as this PR is somewhat older. But you are right. Let's check the other one first.. Rabased the work on new master state and already worked in the handful of tips from @rchl.. Thanks! This is exactly the feedback I need! \n1. I aggree with you that all information make it quite long. I already played around with hiding the 'File is modified' and show 'added/staged/commited' states only. This is what it behaves on my local development branch right now.\n2. To show 'added/staged' states and efficiently query 'ignored/untracked' files and branch name with a single git call, I created a patch to call \npython\n        args = [\n            settings.git_binary_path,\n            '--icase-pathspecs',\n            'status',\n            '--porcelain', '-b', '-s', '-u', '--ignored',\n            self._git_path\n        ]\nBy now, we need 3 git calls to query branch, ignored state and untracked.\nThis works pretty well right now, but I am not sattisfied with my handling of the git status yet. This needs some further fine tuning and cleanup. But it is work in progress and is as many things based on my fix for Issue #340  ;-)\nFor now I may shorten the status message, only. But I need to check, whether ST2 can handle the \u2260. I remember a dictionary like setting was discussed to enable/disable each element separately was discussed somewhere. May I create such a setting? I did not do so right now, because of compatibility concerns.\nExample\njs\n\"status_message\": {\n  \"repo_name\": true,        // In GitGutter\n  \"branch\": true,           // On master\n  \"compare_target\": true,   // Comparing against HEAD\n  \"file_state\": true,       // File is commited/modified/...\n  \"file_statistics\": true   // 1+ 2- 5*\n}\nSome of them are ment for future use.. Sounds great. Will try to do so.. Using one format string only will make it impossible to hide certain parts of the status message. The statistics would always show as 0+ 0- 0\u2260 for a commited file.\nSo we might split the format string in several parts to avoid such glitches. They could be joint together and added to the status bar as one string to avoid unwanted commas between them.\nHow about the following settings and their implementation?\n```js\n  // Format of the status message.\n  // Available variables are:\n  //   {repo}     repository name / folder name containing the .git directory\n  //   {branch}   checked out branch\n  //   {compare}  commit/branch/HEAD the file is compared to\n  //   {state}    One of added/modified/staged/untracked/ignored\n  \"status_bar_text_state\": \"On {branch}, Comparing against {compare}, File {state}\",\n// Modification statistics\n  //   Available variables are:\n  //   {deleted}  number of deleted regions\n  //   {inserted} number of inserted lines\n  //   {modified} number of modified lines\n  \"status_bar_text_stats\": \"{deleted}- {inserted}+ {modified}\u2260\",\n```\n. This is dark magic. Even works for ST2. Just crazy. The pitfall is the very long and maybe complicated template string for some users. Syntax is easy to understand for me, but is it for more genaral users, too? I have no idea how common this template language is.. Examples are a good idea. Most people will live with default value anyway, I think.\nI would change the setting to an array, so the entries can be split into single lines for better readability.\njs\n  \"status_bar_text\": [\n    \"On {{branch}}\",\n    \"{% if compare != 'HEAD' %}, Comparing against {{compare}}{% endif %}\",\n    \", File is {{state}}\",\n    \"{% if deleted != 0 %}, {{deleted}}-{% endif %}\",\n    \"{% if inserted != 0 %}, {{inserted}}+{% endif %}\",\n    \"{% if modified != 0 %}, {{modified}}\u2260{% endif %}\"\n  ],\nThe array is joint to a single string and passed to jinja2 Template.. I tend to use show_status_bar_text:true instead of show_status as it sounds a bit more accurate and may not interfere with the old string setting. What do you mean?. I rebased this branch on the current master and squashed away the old Enhancement: Status bar ... commit to keep only the commits intended to go to master. Please do a final check, if everything is still fine. If so, I will rebase the master on it.. From the traceback I guess you are running GitGutter 1.4.0?\nIf so, this issue is caused by a python bug on Windows. A workaround will come with next release. If you are interested in testing this bugfix, you may install GitGutter-Edge.. Since PR #361 added support for custom icon packages with a Default HIDPI.gutter-theme to support 4k/8k displays this PR might not be required anymore and therefore closed.. I am with you. This would make some things easier and more reliable. I would remove the ${package} thing then and keep the side-by-side setting thing only. But in fact this PR would not make your suggested step impossible. It makes settings independend from package name, only.\n2 questions with it:\n1. Am I right, we would need special version tags to mark pre releases?\n2. How to efficiently encourage people to move from GitGutter-Edge to Prereleases?\n. I confirm @jisaacks is the only one to cut releases. I would never ever do this on my own. I asked the question about tagging only because it is not clear to me how pre-releases are handled by package control and what is required to support them in general. I recently added PackageDev to the list of pre_releases but this is just the user side. I didn't check the devs one.\nOne idea about cutting releases and changelogs:\nI found GitSavvy having an interesting function called git: generate changelog. It uses the first word of the first commit message text separated by : to categorize changes. They use (fix,  enhancement, feature) as categories. I find this function quite useful to quickly generate a changelog from the existing commits, which then only needs little polish if all commit messages are formated correctly. Is it something we might use, too, to make the process of cutting a release a bit easier?. I don't know if you can or if it helps you to make things easier. It is a normal sublime text command which is called from command pallet. It creates a new view and adds all commit messages categorized.\nExample:\n```\nChanges since 1.4.0:\nOther:\n   - Fix release notes typo (#299)\n   - Fix typo in 1.4.0 release message\n   - Change the way the popup css files are loaded\n...\n  Fix:\n   - Show the correct branch or tag name in the 'compare against' status message.\nEnhancement:\n   - Make the status message somewhat smarter.\n   - Use jinja2 template engine to render status bar messages.\nFeature:\n   - Add 'Compare against file commit' and enable filtering by commit id (Issue #281)\n...\n```\nEvery message not beginning with <word>: is add to the Other: node. . @FichteFoll: Thanks very much for clarification.. ### Rebase and remove ${package} support\nAs we want to support one package only, it might not be required to support an envirionment variable ${package}. So I removed it and simplified the PR a bit to only keep side-by-side settings support.\nReleas strategy\nDiscussing in #341 maybe better?\n. Done.. Maybe related to #388. I finished working on this issue already a month ago. The pending PR #354 and #356 prevent me from publishing the solution as it is based on them and requires some of the changes introduced by them.\nAs you made this suggestion earlier this was my starting point, too with following result:\nMoving all of this to the main thread will have two effects.\n1. Step 2 (see below) may finish a bit quicker as inter process communication with plugin_host.exe is not required.\n2. User interface will lack again if files and changes grow.\nThe main reason for flickering is the time required to calculate the new regions. \nCurrent steps are:\n1. clear all regions (icons) -> icons removed\n2. convert the git diff result to regions\n3. add new regions. -> icons added\nStep 2 easily takes 100ms to 10s on larger files (ca. 100k lines) right now. This is what the user sees as flicker if the edited file becomes a bit larger with many diffs int it. The reason for the delay is the very heavy use of Sublime API functions which are called severel hundreds or thoughand times. Sublime API functions are \"very\" slow and working on the text buffer directly within an asynchronous function is a no go at all as the text buffer may change in the mean while.\nTherefore I had a look on SublimeLinter which parses text in a dedicated thread, too. They once read the whole text on the beginning of the whole process of parsing by view.substr() and work with this text to do their calculations. This avoids most issues if the underlying text changes a bit and is much faster. By using the same strategy I was able to reduce the time needed for step 2 to 1..10ms for most files. Parsing 100k lines needs 150ms (10s before!!!) only.\nSo I would be pleased to get at least the two PR #354 and #356 approved to be able to publish my work on Issue #340 so we can discuss it.\nThis work includes fixes for issues #239, #248, #290, two, and includes some patches to reduce the ammount of git file updates to decrease latency a bit.\n. @r-stein : Are you willing to review and discuss the changes introduced by this PR?\nI found a way to simplify the process of determining whether a view shows a valid file within a working tree and find this PR ready to merge.\nWould be nice, if the changes were double checked by anyone else to ensure I did not miss anything.. I may add a check for successful jinja2 import and temporary disable status bar text module until dependencies are satisfied. This error may occure if GitGutter is loaded the very first time without jinja2 package being installed yet. . For investigation I just started ST3 without any packages under Linux. After installing Package Control and GitGutter as the only packages I see python-jinja2 and markupsafe dependencies not beeing installed.\nIt's Package Control which doesn't parse the dependencies.json correctly and therefore ignores the moved packages.\njs\n{\n    \"*\": {\n        \"*\": [ // ignored by Package Control\n            \"markupsafe\",\n            \"python-jinja2\"\n        ],\n        \">=3080\": [ // installed by Package Control\n            \"pygments\",\n            \"python-markdown\",\n            \"mdpopups\"\n        ]\n    }\n}. @mlabarca : We added a fix so required dependencies should install now. Can you give it a try?. Yes, GitGutter needs some libraries to fully work. I also took situations in account where people might not use package control. This is what I was working like with ST2. I just copied portable version to a Linux VM to be able to test latest code changes, when I recently encountered the need to install Package Control to satisfy dependencies.\nThe dependencies are special ST packages created to work with Sublime Text. They are sometimes a little bit modified standard libraries to make them work with ST. So I don't know whether pip install can work all the time.\nWe could either include some basic libraries like markupsafe and python-jinja2 into GitGutter package or just fallback to a basic functional state. Means status bar text without the ability to modify.\n\nEdit: wow, the diff viewer popup is awesome useful! \ud83d\ude04\n\nYes, I love it very much, too.. Credit for the great diff popup goes to @r-stein.. The review thing is terrible here!!!\nWe need this:\njs\n{\n    \"*\": {\n        \"<3080\": [\n            \"markupsafe\",\n            \"python-jinja2\"\n        ],\n        \">=3080\": [\n            \"markupsafe\",\n            \"python-jinja2\",\n            \"pygments\",\n            \"python-markdown\",\n            \"mdpopups\"\n        ]\n    }\n}. But I encountered an issue with installing dependencies using ST2 on Linux. Package Control fails with an parse error. ST2 Windows works.\nsee: https://github.com/wbond/package_control/issues/1213. I tried on Linux ST2 some mins ago with same solution as yours. ST2 simply ignored the packages. The only thing make it work was to use \"<3080\".. Just double checked. Seems to work with \"*\", too. I caught myself somewhere.. I used this construct for two reasons:\n\nurls like to break the 80 chars limit and therefore doen't looks so good in the middle of the text. Having all links together at the bottom of the document keeps all the long lines in one place at least.\n\nSome urls are used in several places. So it's like a variable definition done once used many.. The 80 char limit was applied due to the coala PR and the complains about my reply not to apply this rule.\n\n\nWith MarkdownEditing package or text wrapping enabled, the text looks good in editor anyway.\n\n\nThe fact with changing several lines due to one word is a real drawback with git history in mind. A small change might look like a big one then.\n\n\nWhen creating the most recent commit I destroyed some links several times by Alt+Q wrapping. I found this a bit dangerous. Maybe it is a good idea to just replace the numbered foot notes by names. I agree with numbers might not be a good tagging strategy.\n\n\nI am not sure about what is the best \"coding style\" for markdown. I didn't use it too often in the past, even though I find it a quite cool thing.. I found daringfireball.net a good homepage with a set of helpful tips and rules.\nThe most important sentence about styling markdown in this document is:\n\nA Markdown-formatted document should be publishable as-is, as plain text,\nwithout looking like it\u2019s been marked up with tags or formatting instructions.\n\nLine length\nOnly very few sources even mension recommended line lengths at all, but Markdown is activly said not converting linebreaks to <br>. Even though this does not work for GitHub's post editor here.\nWith RFC plain text documents in mind a fixed line length might be a good idea.\nI tried your one sentence one line rule, which basicly sounds good, but it has one big disadvantage. Depending on length of a sentence a line can be very short or very long. Turning on auto line wrapping then may cause a sentence continue on a second line with only one or two words, followed by a line break and another sentence. This looks ugly. Without wrapping long lines are hard to read. This is not what I would like to look the text representation of the document.\nFormatting text\nSome pages recommend different styles for italic and bold as follows\n- _italic_ should be marked by underscore\n- **bold** by asterisk\n\nlists may be inteded by up to 3 characters\n\nGitHubs [style guide][2] states about tables:\n\ntables rows should/need not start or end with |\n\nLinks\nThe daringfireball.net page makes follwoing recommendation about links.\n\nThe point of reference-style links is not that they\u2019re easier to write. The point is that with reference-style links, your document source is vastly more readable. Compare the above examples: using reference-style links, the paragraph itself is only 81 characters long; with inline-style links, it\u2019s 176 characters; and as raw HTML, it\u2019s 234 characters. In the raw HTML, there\u2019s more markup than there is text.\nWith Markdown\u2019s reference-style links, a source document much more closely resembles the final output, as rendered in a browser. By allowing you to move the markup-related metadata out of the paragraph, you can add links without interrupting the narrative flow of your prose.\n\nThis is what I naturally was thinking about, when adding those references. They disturb text reading much less, then direct links. And IMHO it avoids to accidently wrap an url and draw it invalid.\n[2]: https://guides.github.com/pdfs/markdown-cheatsheet-online.pdf. @jisaacks / @r-stein : I just saw the GitGutter's readme not being rendered correctly on packagecontrol.io due to some line break issues.\nTo fix it and tell people about pre-releases, we might finish this PR, soon.\nDo you have any change requests left open or would you approve?. I don't enforce anything. I did a suggestion and posted some reasons for my decision. \nWhen I complained about PR #366 which suggested those line-breaks, I was shit stormed last autumn so found it a common rule to do and even tried to find some docs about it. In fact I hardly found any statement about line breaks in markdown at all. The only usable statement was found on daringfireball.net\nI use ST's wrapping feature Alt+Q to handle line breaks efficiently semi-automatically, so it wasn't so repetitive and expensive. It is dangerous sometimes, because wrapping urls breaks them.\nMany editors do not automatically wrap Markdown, so the rule ...\n\nA Markdown-formatted document should be publishable as-is, as plain text, without looking like it\u2019s been marked up with tags or formatting instructions.\n\n... made sense to me.\nIf line breaks are unwanted, I would suggest to have one line per paragraph. I tried with one line per sentence as suggested by @r-stein, but it causes ugly line breaks with auto wrapping enabled in an editor sometimes.\nA real disadvantage of line breaks as @r-stein stated is diff at all. Any small change which requires a line break makes the whole paragraph look changed.\n. Removed all hard line breaks and footnotes as I am with you in the end that limiting line length for GitHub readmes has too many disadvantages.. Yep. \"origin\" is somewhat too simple. Already have this in mind, but need to finish some ongoing bugfixes.. As this PR changes quite much, I would be pleased to any feedback about possible bugs in general. Are the gutter icons always updated as expected? Are there situations a modification in a text file or external status change of the file (stage, commit) is not recognized? Do you encounter any exceptions? Things like that would help. If no such strange things can be found and no one complains about code formating, I'd like to merge it to the master branch and ask to publish it as pre-release somewhat later, so more people can test it before final release.. Thank you very much for your feedback. Sounds good.\nYou are right with the initial delay. It is caused mainly by the debounce delay which is applied to all events right now. I was already thinking about to use it for 'modified' events only, but as SublimeText sends events like 'activated', 'loaded' very quickly and several times after each other on file (re-)loads, I did not jet find a good solution for it without causing git_gutter to run too often.\nI personally use \"debounce_delay\": 500 to reduce latency a bit. The default is 1000ms.. Thanks for your tip. There actually was nothing which prevented several evaluation runs at a time. \nI rebased all commits to the current master and squashed in all fixup! commits to not loose overview.\nTo avoid parallel runs I added a busy marker and ensure to limit debounce delay to a minimum on the other hand. On my way I decided to refactor the EventListener module, too, in order to catch the correct events.\nPlease give it another try. If no more issues occure, that's it.. @kofalt: As soon as an evaluation has finished, the next received event (modified,post-saved,activated) will trigger the next run. Means as soon as you continue writing, evaluation will start again. Did not encounter any issue with this strategy right now. I may add some kind of queue to start the next evaluation as soon as the old one finished, if any event was received in between, but didn't find it needed up to now.\nGitGutter is designed to run as much tasks as possible on a local filesystem. It reads from git repository only once after loading a file, calling \"Compare against ...\" or after a new commit was done on the compared branch or HEAD. The file is kept in local temp folder so most compare operations should finish in less than a second.. You are working with GitGutter 1.4.0, right?\nPlease pull directly from master branch and check whether GitGutter already works for you. It makes use of os.path.realpath(view.file_name()) to resolve symlinks since weekend. So GitGutter always works with the link source from now on and in future releases.\n. Weird coincidence? I just like this plugin and want to share my changes to the community. So I started contributing. And your issue is about something I was working on.\nLooks like os.path.realpath() does not correctly handle hardlinks/symlinks/junctions on Windows. On Linux I can put a link onto a file and directory and it's resolved correctly.\nWhat kind of link do you use?. If I found out how to make it work, yes. I added your lines of code, created a hardlink to a file in a repo, but it was still displayed unresolved (link instead of source). But this was a quick check only. That's why I asked for the kind of link you created. Windows supports the oooold *.lnk and NTFS makes use of junctions/symlinks/smartcopies/hardlinks. I need to dick a bit deeper into this topic and python docs for it.. It is a still open bug of python not to resolve symlinks on windwos with os.path.realpath().\nSee: http://bugs.python.org/issue9949\nI found an inofficial patch to solve this issue.\nHardlinks\nFrom my current knowledge Hardlinks won't be resolved. If you create a hardlink to a file this will always be an equal representation to the same set of data on disk. This is actually what Windows does since Vista with all its system files. They are stored in WinSxS but linked to where we are used to find them (System32).\nEven os.path.islink() returns False for a hardlinked file.. (x) means the file is ignored.\n(*) means untracked file. \n(+) is displayed on each line if the file is staged.\nGitGutter uses python function os.path.realpath to resolve all links along the filepath, so it sees the real path any link in the path points to. The resulting path is scanned for .git folder or file from bottom to top. As soon as one of the folders contains such a file, this is assumed the root of the working tree. All operations use this working tree as base.. Did you try with commit 57264b2f9abb3d670e576946683a7d1570448676 or current master? I ask because I realized os.path.realpath not to work as expected on Windows and created this commit to fix it.\nTo reproduce your issue, I recreated the folder structure you descriped as follows:\nC:\n+-workspace\n  |\n  + folderA\n  | |\n  | + .git\n  | |\n  | + folderB (symlink / junction)\n  | | |\n  | | + testfile\n  | |\n  | + .gitignore (contains /folderB)\n  |\n  + folderC\n    |\n    + .git\n    |\n    + folderD\n      |\n      + folderB (real folder)\n        |\n        + testfile\nIf I open C:\\workspace\\folderA\\folderB\\testfile the statusbar shows In folderC on master, File is ... as GitGutter resolves the symlink and uses C:\\workspace\\folderC\\folderD\\folderB\\testfile.\nSo folderB is ignored in folderA, but part of the repo in folderC as expected.\nI don't have bower and don't use it at all, so created the symlink of folderB using Windows' command line tool with following two alternitives:\nSymlink\nshell\ncd C:\\workspace\\folderA\nmklink /D folderB C:\\workspace\\folderC\\folderD\\folderB\nJunction\nshell\ncd C:\\workspace\\folderA\nmklink /J folderB C:\\workspace\\folderC\\folderD\\folderB\nIn both cases GitGutter shows status of testfile correctly, no matter from which filesystem entry point I have a look in it.. The statusbar shows PogoProducts as repository name. So GitGutter assumes C:\\workspace\\pogo\\PogoProducts as working tree root for the open file. \nFor some reason the link is not resolved.\n\n\nI guess pogo.cart.mobile is located in a repository on C:\\Workspace\\ as well?\n\n\nIguess pogo.cart.mobile is handled by a different repository?\n\n\nCan you open Sublime Text's console and enter the following line to the command line and enter it, while the file on your screenshot is open?\n\n\npython\n  from nt import _getfinalpathname; _getfinalpathname(view.file_name()).replace('\\\\\\\\?\\\\', '')\nThis should simply print the real path of this file to the console window, if everything works as expected.\nI am wondering, if this command causes any exceptions for some reason.\n. ## Just got it!\nYou are running ST2. The function required to resolve symlinks on Windows is not supported by python 2.6, which is the scripting engine of ST2.\nSo sorry, I can't fix it for you. \nWindows symlinks are supported with Sublime Text 3, only.. Not a problem! You couldn't know.. Symlinks are supported using pythons os.path.realpath() on linux and OSX.\nAs this function defaults to os.path.abspath() on Windows GitGutter 1.5.0 comes with a selfmade fix using a wndows API function.\nThis fix works only with python3 (ST3) and Windows Vista/7/8/8.1/10.. Ok about tagging. And how about release messages? Do we want to add release messages to pre-releases, too? \nIf yes, ...\n1. What should be included? People who install releases only, would like to see all changes since last release, but users installing pre-releases may be interested in changes since last pre-release only. Does not make a difference here, but maybe in the future.\n2. I would merge this PR and hand over the task of creating the release mesage and maybe tag to @jisaacks .\nMy suggestion (to limt effort):\n- Always add changelog to TAG message\n- Add release messages (x.x.x.txt) to final releases only.. Yes they can.. The popup module basically handles 2 lists: \n\nlist of all deleted lines in the hunk (old content from git database)\nlist with all added lines (new content from the view)\n\nList 1 is used ...\na) to show the content of the popup in \"default\" mode.\nb) as source for 'revert' and 'copy to clipboard' functions.\nList 1 and 2 are both used to create the content to show in \"diff\" mode.\nI recently found other packages to use the textwrap library to textwrap.dedent() code snippets. The textwrap is part of python's stdlibs and thus available by default.\nIt can replace @r-stein's _get_min_indent() function and is 10..25% faster.\nThis library also provides a wrap() function, which can be used to create a new deleted_lines_to_display list whose items contain correctly wrapped text content to be displayed.\nThis way diff popup can wrap text nearly the same way as ST does (always/never/auto). If the scope of the first character of the hovered line contains source. wrapping is disabled in auto mode. Could be enabled/disabled via button in the popup, too.\nIt works very well in \"default\" mode but still needs some work to wrap \"diff\" correctly.\nI am thinking about two new settings to control this feature. I am not yet able to automatically calculate wrap width from popup max_width, but maybe I'll learn how to.\n```JavaScript\n  // Limit the line length in diff popup to avoid horizontal scrolling.\n  // Possible values are:\n  // true: always wrap text.\n  // false: disable word wrap.\n  // \"auto\": disabled for source code.\n  \"diff_popup_word_wrap\": \"auto\",\n// The desired line length in characters.\n  \"diff_popup_wrap_width\": 80,\n```\n. I removed all those nbsp; replacements but the text does not wrap in popup anyway. So if I don't miss something the advantage is - it works. ;-). Text wrapping is supported by diff popup with GitGutter 1.7.0+ and mdpopups 2.0.0+.\nDiff popup uses the \"word_wrap\" from Preferences to decide whether to enable or disable the feature. The default value \"auto\" disables wrapping for all kinds of \"source.\" .. I think you can use it to cut a final release. I coudn't find any issues while working with it this week and as no issues have been opened yet we are ready to publish.. Added a tiny fix to master for optimization. Should be included into the release.. This issue may most likely be caused by different line endings of the working file and its copy in the git repository. GitGutter uses git archive command to read the file from repository, which should do correct translations but this seems not to work in your case. \nTo check whether this is the reason, please try the following:\n\nOpen command pallet\nType: Preferences: GitGutter Settings\nAdd the following entry to the GitGutter.sublime-settings\n\n\"ignore_whitespace\": \"eol\",\nThis will call git diff with --ignore-space-at-eol switch.. I am not quite sure if --ignore-space-at-eol ignores \\r\\n <-> \\n differences only. I guess it also ignores tabs and spaces.\nThat's why I created a PR which might solve the issue even with \"ignore_whitespace\": \"none\",.. GitGutter creates 2 temp files one for the content of the view and one for the file from index. They are passed to a git diff --no-index to get the changes.\nI guess the issue is caused by the way the temporary files are created.\nThe view content is read via Sublime API as python string, encoded with the view's encoding (utf-8 by default) and written to disk. The lines of the string we get from ST are always terminated with \\n. No matter what line-ending is set by the user in the front end. This makes sense as I normally don't want to struggle with that. As a result the temporary file contains \\n while the file read from git may contain \\r\\n as you can see from @sbalgas`s screenshots.\nI was not aware of that when I worked on the fix for issue #74.. > I put \"ignore_whitespace\": \"eol\", in my GitGutter Settings and I have the same problem.\n@sbalgas: Did you restart ST? GitGutter reads 'eol' setting only on startup at the moment.. Fix for the issue released with GitGutter 1.5.1. The \"ignore_whitespace\": \"eol\" was proposed as I accidently removed the line-feed mangling in on of the older versions (1.5.0 I guess). \n\n... still show as modified ...\n\nReally modified or green + signs?\n\n... pushed everything up to date ...\n\nDoes it mean, you saved a modified file in ST, than staged and commited it using git from shell or one of ST's git packages like GitSavvy? And after all file is still displayed as modified?\nWhich git version do you use? Some user recently concerned about file modifications at the end of lines not being tracked correctly, which was finally caused by his old git version.\nIf you set \"debug\": true in the GitGutter.sublime-settings you'll maybe get some messages which could help to find the reason. . The console output looks good so far.\nAre the gutter icons displayed on the left if you modify the file?\nOn the status bar you should see something like:\nIn Repository on master, File is modified, 4+, 5- ...\n\nIf not, GitGutter isn't active for the file, which may have one of the following reasons:\n- git binary not found\n- view is readonly\n- view is marked as scratch\n- view is not attached to a window\n- view is a REPL console view\n- view shows hexadecimal content\n- file is not part of a git working tree\nThe diff popup uses the diff results from which the gutter icons and status bar text are created. If no icons are visible diff popup won't be, too.\nThe git_binary setting should not be needed on Linux as GitGutter uses the PATH environment variable to find the git binary. The setting is required for portable setups only, of if a custom built of git is desired to use.. GitGutter required 2 file descriptors per view. They are needed to write the temporary files, whose pathes are passed to git to compare the view's content against the index. All files are accessed via with open ... as file statement to ensure the files are closed after writing.\nIf an operating system runs out of file descriptors this can't be handled by GitGutter.\nIn times of node and other heavy scripting engines which may access hundreds or thousands of files at a second a limit of 256 file descriptors seem absolutly outdated and not state of the art.\nWhat I may need to do is catch the exceptions while creating temporary files.. 1. What about the status bar message? What does it show?\n2. Any output in the console?\nThis issue is most likely be caused by a failed git call, which looks like the file in repository was empty.\nYou could check the following:\n\ncd to your repository's root:\nCall git rev-parse HEAD\nCopy the returned commit hash (e.g.: 0f02d04a)\nCall git archive --format=zip <hash> <filename> > test.zip\nTry to open the test.zip and check whether it contains the file and correct content.\n\nNote:\n- <hash>: is the output from 3.\n- <filename>: is the relative path to a file within your working tree.\nThis is basically what GitGutter does in order to read a file from repository.. When do you get those output? On loading ST3 or when opening on of those files? Do those output apply to GitGutter related files only? Do the \"Preferences: GitGutter Settings\" commands open the files?\nDid you install GitGutter using Package Control or did you pull from git directly? Make sure to have only one GitGutter installed. It must exist only in /home/useme/.config/sublime-text-3/Packages/GitGutter if pulled from git or in /home/useme/.config/sublime-text-3/Installed Packages/GitGutter.sublime-package if installed using Package Control.\nI never saw those errors. Looks as they are locked by another process or so.\nMaybe writing the required temporary files fails, too, which then would lead to all lines being marked as new, too. If git can't access the files, it can't determine the diffs and doesn't know whether the file is ignored or untracked.\nNot sure whether this is an issue caused by GitGutter itself. . #381 is about lines being displayed as modified due to different line endings. This issue here is caused by something else. A file access error or something like that.. @berginpanimayam: please answer the questions of post 2. Without any information issue can't be resolved. It's working fine for Windows and Linux on ST2 and 3 for me. So I need some info to get an idea, what could be wrong.. The console output of the installation looks good so far. Everything fine. If git archive returns a valid zip file with correct content when executed from normal terminal, we need to check further things.\nWhat does the status bar show if you work on a file which is part of a git repository?\nYou should see something like:\nIn Repository on Branch, File is modified, 4+ 3-, ...\n**Are all information there as expected?\nThe latest GitGutter release 1.5.1 prints error messages from git to console. Do you see messages in your console that look like:\nGitGutter 'git archive' failed with \"fatal: ....\"\nIf you don't see any message like that and no traceback to an unhandled exception can be found in console, the issue might be caused by file decoding.\nGitGutter tries to decode the file read from git using the current view's encoding with a fallback to utf-8. If this fails, an empty temporary git file is written to disk, which would then result in all files being marked as inserted.\nWhat file encoding do you use?\nDo you have Convert\u200bTo\u200bUTF8 plugin installed and in use?. It looks like the output read from git is always empty, which is in fact a very strange thing especially with the call of git rev-parse --abbrev-ref HEAD, which is used to read the current's branch name. If no error message is displayed and/or no exception it might be an issue related it is quite hard to guess the reason. \n\nDo you use other plugins which use git or external programs? \nDo they work normally? \nDo we talk about ST2 or ST3?\nMaybe you've got the chance to check both versions?\n\nIt looks like an issue related to process spawning or inter-process communication. GitGutter as well as other plugins follows the recommendations from python docs for running external programs. But something seems wrong with it at all.\nGitSavvy as an example uses the same function calls to run git. Does it work?\nCan you try with the following setting in GitGutter.sublime-settings ?\n\"git_binary\": \"git\",\nThis forces GitGutter to run git command without any path specifications, just as you do when calling git from shell.\n. In fact we already have the solution in README already.\n\nOn OSX you might need to install the package SublimeFixMacPath.\n\nBut you're right. This issue made me learn what's the sense of this package actually is.. The path to the git.exe must be part of the PATH environment variable. Means you must be able to just call git in the CMD.. > GitGutter.sublime-settings \"git_binary\": \"git\",\nIn this case you can leave this setting empty as it is the internal default value.. This issue was caused by introducing git cat-file --filters to fix both (#74, #409). I wasn't aware of it to be supported by git 2.11.0+ only. Added a fix to fallback to git cat-file -p if older git is detected. This will reintroduce #74 for those people, but there is no other solution.. There is no setting to do so. If you want to work with multiple/custom work-trees per repository you need to use git worktree add to checkout a custom work-tree from your repository. This creates a .git file which is resolved by git just like submodules are.. GitGutter uses python builtin path module to check whether you are within a worktree. Therefore it expects either a .git file or directory in the root of a worktree - the standard for ages. Otherwise git would need to be called for each view no matter whether we are within a repo or not. And even with being within a repo this would add just another 100ms of delay on Windows as this is the minimum required time to execute an external command.. > rm -rf ~/Library/Application\\ Support/Sublime\\ Text\\ 3/Packages/GitGutter/ and reinstalling via Package Control fixed it.\nSeems you were using the master branch directly. It should not but may contain some issues not cached by testing for some edge cases. Qualified feedback about latest commits is always welcome to help finding and fixing remaining issues before making a release.. > But running this in terminal gives: ...\nST doesn't run in user shell environment by default and therefore may use other versions of shell programs as found on the PATH.. All of the issues discussed in this thread were either resolved\n- end of line mangling bug\n- git cat-file --format not supported by git 2.10 and before (1f05f50)\nThe other major issue of git not being found by Sublime Text can be resolved by https://github.com/int3h/SublimeFixMacPath which was added to the troubleshooting section.\nIn order not to create too much confusion about already resolved issues I close the quite big thread at this point.. The basic idea of using jinja2 engine is to enable people to fully customize the status bar text using the template. By moving parts of the logic to python you'll break this feature. Maybe there is someone out there, who doesn't like commas at all or wants different separators?\nThe logic how to render the information needs to remain in the template. This is what it's meant for.. First of all: You don't need to be concerned about those messages. They are quite normal in your situation. They do not state a bug. I added those messages only, to enable users to hopefully provide some useful hints when faced to situations, GitGutter doesn't work as expected.\n\nThe issue seems to persist when I add a single (first) commit.\n\nReally? \nGitGutter uses git rev-parse to read the commit hash before trying to read the file content from git. This should prevent reading the whole file again and again even if it didn't change. This in fact fails, if there is no commit yet. But as soon as I add a single commit containing the new file everything is fine.\nThe main (design) problem at the moment is, that GitGutter tries to read and diff the file before checking whether it is tracked. \nTo solve this problem I plan to use git status to read the branch name, commit hash and file state with a single git call before trying to read and diff the file. GitGutter won't try to read anything from the git repo then, if a file is not tracked, ignored or committed.\nMeans, I already have a quite stable solution on my local machine, which solves this issue. I still need to fix some edge case issues related to the 'Compare against ...' system before I want to create a pull request for public discussion, because the information got from git status are useful only, if the working file is compared to HEAD. Comparing against another branch needs some special handling.. Absolutely ok. Thanks.. The next version of GitGutter is intended to avoid failing git calls at all.. I already thought about such a style, too. 2 things to care about:\n\nGitGutter shows deleted regions between 2 lines. From screenshot I see Atom uses row 25 only, to mark it display deleted regions. We would need to add \"deleted\" icons which show on row 24/25 or 25/26 with half size maybe.\nIf someone adds icons to GitGutter package please ensure to remove all EXIF/META/color profile data from the png files. As you'll see current icons are only 100 to 200 bytes of size. With color profiles they would have 2..4kB (or even more) of size - a waste. I used XnviewMP to create clean copies.. Yes of course,\n\nit's not a big deal.\n\nJust to have shouted out: Everyone is able to create its own packages which provide GitGutter themes.\nThe only thing you'll need to do is to \n1. add a folder with the icons named like in GitGutter's \"themes/Default\" folder\n2. add an empty (json) file called My Own Theme.gitgutter-theme to that folder.. Those icons are not very hard to create. They are 32x32 in size and must have transparent background with few pixels brushed white on the right. \nThe only possible issue with this icon style might be the color as all icons look the same way. It is essential that your color scheme defines the gitgutter scopes with different colors for inserted/modified/deleted rows. Otherwise you are not able to see the difference.. Depending on your line spacing settings, the bar icons won't be connected.\nI use following settings, so icons will be displayed using spaces, too.\njs\n{\n    \"line_padding_bottom\": 5,\n    \"line_padding_top\": 5,\n}. You are welcome to create a PR if it is so easy. I can't currently imagine how to use unicode characters as icons in the gutter area. The bars of the Bars themes already cover the whole height of the image resources. . The list of commits and branches shows the %s / %(subject) which is by default the first line of a commit message only. So just to understand you right - where can a single line contain line breaks?\nI am just interested in it as personally never saw such a situation.\nWouldn't they contain \\n, too?. Please replace all splitlines() in the file for consistency as a further requirement to accept this PR. Thanks.. Ok, thanks for your feedback so far.. I am thinking about it.\nI started playing around with git status last year with the default porcelain=1 as this will enable GitGutter to omit creating temporary files and calling diff at all for untracked/ignored/commited files and be able to check for the file being staged.\nWith the information of a file being staged or not we could decide to compare against the index or the database - what some users asked for. But I never found a way to efficiently check the index (staging area) for changes without reading the whole file content. I'd like to use the object id of staged files to track changes the same way I do with commit id's today. When I saw the git status porcelain=2 providing both object ids for the working file and staged file (if exist) I was happy to have a solution and a possible way to reduce number of required git calls.\nAll other information (branch name, upstream, file state) can be read from old git status, too. It only misses the object IDs and is a bit more tricky to parse. So I am not sure whether supporting both versions is worth the possibly added complexity.\nMaking use of git status to optimize work on current branch and support staging area already comes with some extra effort to handle the Compare against ... system as the output of git status is not valid when comparing against different commits or branches. I need to emulate git status somehow in those cases, so the user doesn't see a difference.\nI don't want to bloat GitGutter, but only add requested functions with minimal set of code and best possible performance.. I am thinking about using git --version on startup to check, whether git is working well. GitGutter checks for an entry in the settings or PATH right now, but even if they point to a valid git binary, it might not work properly. This repetitively raised issues like #388 in the past.. As issue #416 proved it is not acceptable.. ### Benchmark\nI did not manage to do some scientific measurements on timings, which even might be a bit tricky upon startup, but found each module being reloaded and printed to console to require a minimal set of time to be handled. \nI must confess this is not a primary factor to do this suggestion. I am worried more about the problem of multiple instances of all the created python objects due to the double loading bug.\nAutomatic package reloading\nIn fact files in sub modules are not reloaded automatically, but  Sublime Text 3 does not reload packages from root folder which use asynchronous API well, too. I experienced issues with ST's package reloading several times anyway. Everything works fine as long as a package uses synchronous api only.\nThis was in fact one reason to do some more investigation on package loading process. Another reason was the settings module which @rchl struggled with last year. Those issues with multiple instances were caused by the double loading bug.\n1. Developement\nDuring development the AutomaticPackageReloader can easily be used to reload all sub modules. I created a key binding Ctrl+F5 to reload sub packages, but you can ask it to automatically reload packages on save. It works very well - even better as ST3's default mechanism.\n2. Package Upgrade\nI read about possible issues during upgrade as well as python won't reload modules on its own, if they already exist in the cache. Therefore I had a look on how AutomaticPackageReloader works. It uses a modified version of GitSavvy's reloader.py to force reloading all sub modules in exactly the same order the original import run would do. It ensures not to create multiple instances of existing modules. It's some kind of magic, but works very well.\nThe proposed structure moves all modules to the sub directory. As a result all changes on existing modules would take effect after restarting ST only, if we do nothing. We could run into trouble only, if a new module is added to GitGutter, which is loaded by ST after upgrading and which makes use of changed existing modules, which are not reloaded.\nIf we want to address this rare possible issue we could use a modified reloader.py from GitSavvy and Package Control's event API to force reloading all sub modules after upgrading GitGutter. I played around with it already. This would require ca. 200 lines of code to handle all of it.\nPipe plugin_loaded / plugin_unloaded\nI would suggest to add those functions to the plugin.py in the main folder to let them be called by ST and explicitly add all required functions from sub modules there. This way the plugin.py is the one and only place where to handle module initialization. The git_gutter_settings.py is the only module at the moment, which makes use of plugin_loaded(). My work on fixing issue #184 will remove this function call as settings loading is handled somewhat different.  This results in none of the modules requiring those functions at all.\nAbuse __all__\nWhy do you think __all__ is abused by this use? I found many modules even in the stdlib, which make use of this property to explicitly manage a list of API functions to export. As a ST package needs to export ST API classes only, I find this solution quite appropriate. (doesn't mean it is :-) )\nThe main intention of this solution is to avoid the horrible long try ... except ... structures to handle ST2 and ST3 module imports. The __init__.py as well as any other module can make use of a relative import on ST2 and ST3. The plugin.py would be the only module which requires the try ... except ... structure to handle the imports separately for ST2 and ST3 in 4 lines of code. \nThe alternative is to explicitly import all required classes in the plugin.py directly in the same way the git_gutter.py does today. One long list of relative imports for ST3 in the try statement and one long list of absolute imports for ST2 in the except statement.\nThe plugin.py would look like:\n```python\n\"\"\"Load and Unload all GitGutter modules.\nThis module exports all modules, which Sublime Text needs to know about.\n\"\"\"\ntry:\n    from .modules.events import EventListener\n    from .modules.commands import (\n        GitGutterCommand, GitGutterCompareBranchCommand,\n        GitGutterCompareCachedCommand, GitGutterCompareCommitCommand,\n        GitGutterCompareFileCommitCommand, GitGutterCompareHeadCommand,\n        GitGutterCompareOriginCommand, GitGutterCompareTagCommand,\n        GitGutterNextChangeCommand, GitGutterPrevChangeCommand,\n        GitGutterShowCompareCommand)\n    from .modules.popup import (\n        GitGutterDiffPopupCommand, GitGutterReplaceTextCommand)\n    from .modules.settings import (\n        GitGutterEditSettingsCommand, GitGutterOpenFileCommand)\nexcept ValueError:\n    from modules.events import EventListener\n    from modules.commands import (\n        GitGutterCommand, GitGutterCompareBranchCommand,\n        GitGutterCompareCachedCommand, GitGutterCompareCommitCommand,\n        GitGutterCompareFileCommitCommand, GitGutterCompareHeadCommand,\n        GitGutterCompareOriginCommand, GitGutterCompareTagCommand,\n        GitGutterNextChangeCommand, GitGutterPrevChangeCommand,\n        GitGutterShowCompareCommand)\n    from modules.popup import (\n        GitGutterDiffPopupCommand, GitGutterReplaceTextCommand)\n    from modules.settings import (\n        GitGutterEditSettingsCommand, GitGutterOpenFileCommand)\n```\nNothing I would oppose to at all, but found the idea of using the __all__ more elegant. Same number of code lines in the end. So .... I managed to do some benchmarks by hacking the sublime_plugin.py with following results.\nLoading time\n1. master branch: 28ms\n2. local restructured dev branch: 18ms\nThe difference might be even lager when comparing the same but only restructured code base. \nThe local branch I used for (2) differs a lot from current master as it already makes use of some experimental features and changes. Even though it is somewhat larger it only needs 64% of the time to load compared to the current master branch. Ok, the absolute time might not be so much, but imagine 100 or 200 plugins with such a difference.. All python modules are moved to the sub directory modules to avoid double loading since 1.6.0-rc.1. Nice job.. Yes it got lost at some point, but it is included in PR #397 again.\nI honestly never touched this setting, so I didn't realize it's gone. I kept live_mode and focus_change_mode for backward compatibility. Maybe there is still somebody who needs it. Not sure. For all the other people it doesn't hurt.\n. Any comments?\nIf there is no opposition, I'd like to merge these commits to master to accomplish the new package structure and create a 1.6.0-rc.1 tag for it.. OK, thanks. It's not a problem at all if you are low on time. I did several tests and smaller fixups during the last weeks on my own. I just want to make sure, I don't introduce changes, some of the other contributors is completely opposed to.. Thank you very much for finding and fixing this issue.. I am running Windows 10 x64 with ST3 3126 (and 3131) and git for windows 2.12.2 installed on C:\\Program Files\\git\\.\nRemarks: If git is available on PATH (running git from command line works), you don't need to setup the \"git_binary\" explicitly.\nI removed my repository and installed GitGutter with Package Control as ordinary user and tried successfully with your settings file. Everything working as expected here.\n\n\nWhich git version do you use?\n   a) The latest commits didn't introduce any changes related to git version, but just to be sure.\n   b) Another user had issues with \"eol\" and older git versions.\n\n\nPlease add \"debug\": true, to your GitGutter.sublime-settings file to enable printing git error messages to Sublime Text's console.\n\n\nDoes the console show any Traceback or error messages?\n\n\nWhat does the statusbar show?\n    Something like In Repository on branch, File is modified, 1+ 2-\n\n\nMake sure %APPDATA%/Sublime Text 3/Installed Packages/GitGutter.sublime-package is the only instance. There must be no other folder in %APPDATA%/Sublime Text 3/Packages which could override parts of the installed package.\n\n\n. Thanks for your information.\n\nThe only message for GitGutter in the console is as follows:\nGitGutter: \"git diff\" failed with \"fatal: invalid diff option/value: --indent-heuristic\"\n\nA short search in git's docs show the --indent-heuristic parameter is supported by git 2.11 and above, only. Added this parameter as it seemed to improve the diff results.\nWill remove it.. Fixed in release 1.6.0. \"Bars\" are available with GitGutter 1.6.0-rc.1 So I guess you are still using GitGutter 1.5.1 ?. Fixed with release 1.6.0. I am having a look on https://github.com/SublimeTextIssues/Core/issues/1692#issuecomment-297815397 at the moment as I experienced the default ignored/untracked being rendered ugly in ST 3131. This issue can be fixed by downsizing normal icons to 16x16. Maybe should include it into 1.6.0?\nIt's only minor, so could also wait.. ## Diff Popup\nThe quickly closing popup looks like diff popup is fighting with another plugin, which tries to open a popup when hovering the gutter.\nGutter Icons\nYou write about icon size being a problem since sublime update. Do you mean update of Sublime Text or latest GitGutter 1.6.0? Which ST version do you use? Many things have changed since latest ST 3127+ dev builts especially with scaling all the GUI entities.\nI am running ST 3131 and GitGutter 1.6.0+ on a 1900x1200 screen on a Win10x64 box. ST 3126 is unusable with dpi_scale > 1 on my box so can't test it.\nST 3131 with \"dpi_scale\":1.6 gutter icons seem to be scaled correctly:\n\nST 3131 with  \"dpi_scale\":1.0:\n\nIn your case not even the position of the icon is correct. It looks like scaling gutter icons does not work at all in your case.\n. > This wasn't an issue until the recent sublime update that changed the default sublime theme\nDefault theme is unchanged until 1.6.0. So I guess you pulled directly from master?. If icons display the wrong way with dpi_scale:1.0 it is definitely an OS related issue in ST's core engine.\nSublimeLinter's tooltip engine is poorly buggy. I tried to activate it, too, but instantly deactivated it as it is unusable.. @slifin : I have opened https://github.com/SublimeTextIssues/Core/issues/1713 and would ask you to help @wbond to find the reason for your issue.. 1. The icons were updated to ensure they are displayed correctly on HighDPI screens in ab90cfbd85918cd27a6e2b9aff195ccf27e8c2ef\n2. Tooltip fighting with other packages can hardly be handled.. > Might it be possible to watch for the updates and force reload of GitGutter?\nGitGutter uses package control's event API to handle the \"after upgrade\" event and reload all of its submodules then. Unfortunately python seems to keep some old globals after module un- and reloading which causes issues if the module structure changes heavily.\nThe new structure is required to avoid some more serious issues, which caused several modules being instantiated twice or more times in the past.. GitGutter uses git archive to read a file's content from git's database as this is the only known way to apply smudge filters correctly. This change was made to fix Issue #74. \nSo any file marked as export-ignore will not be visible to GitGutter at all by nature. This could be fixed only by an alternative way of reading file content from git database with smudge filters being applied. The only known methods supporting smudge are git archive, git diff, git checkout. As checkout would overwrite the existing working file on disk, it can't be used.. \n\nAnd the fix for the filters doesn't even fix that issue properly. \n\nThis answer is too simple and therefore wrong. Smudge filters can be used to do any stupid stuff during checkout or commit, but there are technical limitations as GitGutter expects the checked out file to be located in %temp% directory and the content from view is not handled by git at all.\n\nIt looks like it adds a performance overhead too.\n\nCan't confirm this assertion. On the one hand several benchmarks made to compare git archive and git show calls were performed with same result. On the other hand files are read from git repository only once after opening a file and once after each \"Compare against ...\" call. Thus there is no performance impact during normal work.\n\nGitGutter should use export-ignore it to exclude release_messages/, tests/, and other non-production files from releases.\n\nGitGutter can't exclude release_messages/ as this folder contains the messages being displayed in ST after upgrading the packages. Parts of it may be worth consideration.\n\nI'd prefer to do without filters support. I don't think it will affect me as I don't use them.\n\nThe feedback on fix for issue #74 proved there are several people who work with filters, even though they need to follow some rules to make them work with GitGutter properly. Thus I won't reintroduce a bug in favor of a fix for another one because of a single's persons meaning.\nI'll accept a fix which addresses both issues, only!\n\nIt was only later when I decided to debug it I realized it was export-ignore\n\nVery much thanks for taking the time to debug this issue and find the reason for. I haven't been aware of this feature at all as I never needed to use it. The knowledge about it may help to find a solution somehow. Already have an idea.\n. We could and maybe this section needs some update with some of the most common issues we were facing during the past.\nEspecially OSX with its different environments seems a bit tricky.. > I do not have git installed on my Windows PC. \nIn this case GitGutter might not be the correct plugin for you.\n\nExpected behavior: show some error, or do nothing at all.\n\nIt shows the error messages compared to other packages which throw exceptions and sometimes even make ST unusable in this situation.\nIt is not useful to do nothing as even if git is not found it might be back on any time. You can leave ST, install git and switch back to ST. GitGutter will find git and run normally without any other interaction.\n\nGitGutter shows plus (+) icons\n\nThere are not only exceptions but errors returned by git itself, which might indicate issues. Handling errors during git calls is a big TODO. GitGutter sees an empty file read from git which is neither marked untracked nor ignored. Therefore it is marked inserted in this situation. \nIt was never designed to have GitGutter installed without git working properly. It's a bit tricky to add it without negative side effects.. An error dialog is a bit tricky as GitGutter tries to run normally each time a view gets active. This is necessary to allow changed settings (\"git_binary\") to take effect immediately. Same with git binary. It could possibly be unavailable temporarily, which should not disable evaluation until restart of ST or requiring to reopen a file.\nI am aware of this edge case and GitGutter used to act much worse in the past.\nI am thinking about calling git --version each time a view gets activated to check whether git is working properly. I already have an version offline, which disables GitGutter in case of invalid output then. Need to finalize it.. Damn!\nGitGutter started to use git cat-file --filters in order to fix Issue #409 which caused files being export-ignored in .gitattributes to appear as inserted. The --filters argument is required in order not to reintroduce Issue #74 which was the reason for issue #409. \n\nHowever the --filters argument wasn't added until git v2.11.0 (git/git@b9e62f6)\n\nSorry, but I actually was not aware of that.\n\nRemoving it will break support for smudge filters (issue #74)\nReverting to git archive will cause export-ignored files to be displayed as inserted again (issue #409)\n\nThere is no solution for both issues with git older than mentioned version/commit above!\n. Added a commit with a fallback to git cat-file -p on legacy git versions. Can someone with such an old git check this please?. > @r-stein is right. version 2.11 isn't available yet for Fedora 25 through the official repos and I guess that's the same on other distros.\nAnd this is why everybody blames Linux the better OS with better update support than Windows?. @tedmiston : \n\n\nYou might need to install https://github.com/int3h/SublimeFixMacPath on MacOSX to let GitGutter find git. Sublime Text is known to use different environment variables or even completely different environment than your login shell. \n\n\nThe debounce_delay is normally used during typing. Each change after a 200ms period should be evaluated already. If you type quick without break GitGutter will wait until you're done. Caution: Each time GitGutter starts an evaluation, the whole content of the view is written to disk, which might become much, with debounce: 0. I wouldn't recommend to use values smaller than 500.\n\n\nI found and fixed the reason for Git and GitGutter version not being displayed in the \"Support Info\" dialog some mins ago.\n. Done!. Thanks. @r-stein : Already done 3 months ago. But I called it \"Compare against Staging Area\" with \"compare_against\": \"CACHED\" as setting. I even declared it the default.\n\n\nThe reason I haven't published it were several other changes it relied on which require git 2.12.0\nWhat @logig describes works by luck here since GitGutter uses git cat-file to read the content from the tree which uses empty object_id to indicate the staging area.\nSo implementing would be easy.. The only issue with just leaving the object_id empty to get the file content from staging area is, We never know when it changes and thus it won't be updated after a second git add call. File content is read from git database only, if the commit hash changed. So this feature again needs git status or functions, which seem not available on older git versions.. The feature request and possible solutions to handle the staging area as compare target are discussed in #118 with same result as in this thread.\nTherefore I close this issue as \"duplicate\".. 1. Please open ST's console \n2. Execute the following command: view.encoding()\n3. Post the command's output here, please\nDo you use a third party package such as ConvertToUTF8 to add support for this encoding or does it work out of the box?\nWhich encoding is set in git to use for your repos?. Can you post the result of self.view.settings().get('origin_encoding') command, too, if you have one of your source files open? It should return something like shift_jis\nGitGutter reads the files from your repository as is without any charset convertion. This means the file your view is compared against is still shift_jis.\nThe content of the view was converted to utf-8. GitGutter uses the value of self.view.settings().get('origin_encoding') in case of installed ConvertToUTF8 package to get the original encoding of the view. \nI guess the return value is either wrong or python fails to encode the view content as shift_jis which causes a fallback to utf-8.\nAs a result the files passed to git diff are different and therefore anything is marked modified.. GitGutter 1.4.0 used git show to read the file content from repository. This command does not support smudge filters (see issue #74). Therefore 1.5.0 changed to git archive command, which introduced issue #409 as this commad supports smudge but ignores some files declared in .gitattributes. The current version therefore uses git cat-file --filters to read file content as this fixes both mentioned issues.\nI guess the git cat-file --filters command being used at the moment does no text decoding and therefore the file is saved to disk with Shift_JIS encoding. GitGutter tries to write the encoded view content to disk using the value from either view.settings().get('origin_encoding') or view.encoding() but this obviously fails as python doesn't know Shift_JIS out of the box.\nThe former command git show seems to output the file content as utf-8 which is the default for all high level outputs from git. Therefore no one ever saw GitGutter failing in encoding the view content back to the origin_encoding.\nThis is the third issue besides #74 and #409 related to reading files from git. I don't see a solution how modify GitGutter to fix all three issues at the moment. \nGitGutter supports all file encodings supported by python/Sublime Text out of the box.\nConvertToUTF8 is a big hack to try to work around missing file encodings. GitGutter can't make use of it as it doesn't publish any API to convert files in the background.\nStupid question from someone not dealing with eastern languages too often:\nWhy do you use a local (lagecy) file encoding to store files in a git repository? From my point of view ALL files on each computer should use utf-8 or utf-16 nowadays. If you would setup git to store files using utf-8, everything would work fine.\n. Two questions:\n\n\nWhich Sublime Text version do you use? (You can also use GitGutter: Support Info from command pallet)\n\n\nCan you create a little repository on github with a source/text file encoded in Shift_JIS which I could pull and use for debugging?\n\n\nThe python3 module of ST3 seems to be able to encode/decode 'Shift_JIS' out of the box. Using codecs of ST2 generates some totally different output. Without any reference I can't find out what's wrong and how to handle file encoding/decoding.\nI want to try to make GitGutter encode the view content correctly, so it matches the file read from git cat-file or vice versa.\n. Ok, I checked out your repo, installed ConvertToUtf8 and opened your main.c\nThe good news: The reason is much simpler then I original thought.\nThe bad news: It's not GitGutter which causes this issue but ConvertToUtf8 and/or ST.\nGitGutter just keeps disabled for the file as the view is marked as scratch by view.set_scratch(True).\nScratch views are most likely views with content not being saved to disk so don't need to be diffed. Terminal packages use scratch views as an example. New files not yet saved are marked as scratched, too.\nI would primarily blame ConvertToUtf8 not to reset the scratch flag after transcoding the file, but I found ST 3136 working properly with the same setup. Maybe the core devs added some extra checks to reset the scratch flag.\nOn ST 3126 I just called view.set_scratch(False) in console and voila ... GitGutter works properly. Git check's out files as is with Shift_JIS encoding and the view content is encoded correctly to Shift_JIS. Everything works fine.\nNote\nI added a number of checks to keep GitGutter calm down for views most likely not meant for normal use. This helps to save some resources and keep ST responsive or avoids edge cases.. Hacking around with files to display dynamic states is just bullshit. Furthermore the link above only describes a way how A File Icon can provide plenty icons for file types which are not known by ST as a file icon requires a scope. \nIt is just not possible with current API to do that. That's it.. GitGutter is disabled and would show Preferences and Support Info command only in following situations:\n\n\"git_gutter_enabled\" : false is set in preferences or view settings\n\"enabled\" : false is set in GitGutter.sublime-settings\nview is read only\nview is marked as scratch\nview has now window()\nview is a \"repl\" view\nview has \"hexadecimal\" encoding\n\"is_widget\": true is set in view settings\n\nA crashing event handler of any package can cause none of the following packages in the list being informed about events. Therefore they can't handle them.\nConvertToUTF8 package is known to mark a view as scratch during converting text encoding and sometimes not resetting that attribute. As a result, GitGutter keeps quite.. plugin_host is running the python VM with all the ST packages. All external processes such as git are called by python's subprocess module and will block the whole plugin_host during execution.  GitGutter uses a timeout of 30s to wait for git to complete before killing it. It is the way of executing external processes suggested by python 3 docs. \nAre there other packages present, which may have been calling git concurrently?  Or is GitGutter the only one?. It also runs git process on an event driven base, which might cause several instances being started at the same time, trying to read from same database. I already tried running several git instances in parallel threads for several views in the past, too, without such issues (on Windows).\nFrom my point of view git must be able to handle such situations. I guess this is something none of the ST packages can handle somehow.. If the database is already locked by one git instance, I would expect all other ones to wait for it to complete or return an error after some timeout (or immediately). \nI guess the first instance didn't remove the lock file correctly, which caused the second instance to wait forever. This is expected a bug of git itself. It must be able to handle concurrent database access correctly.\n. This issue most likely happens, if a changed hunk at the end of a maybe large file is deleted or moved. As GitGutter runs asynchronously, the line mapping being used to translate the diff lines to regions is sometimes no longer up to date.\nMaybe need to add some handling to fail silently.. The diff popup uses mdpopups.get_language_from_view(view) method to determine the syntax to use for highlighting. Highlighting itself is done by mdpopups. \nSmall hunks which don't represent fully qualified statements are most likely to fail highlighting correctly. I can't see a solution to fix that. In your situation, mdpopups can't know about the <?php which is required for highlighting.\nIf @facelessuser doesn't have an idea how to handle something like that, we need to live with it.. Thank you very much for this comprehensive description.\n\nI don't know what GitGutter is doing in the picture above,\n\nGitGutter manages both, a hidden copy of the tree object (committed file) and the content of the current view (working file). It calls git diff --no-index ... to evaluate the changes. The content of the popup above is currently rendered using information parsed from this diff result only as they are available without opening and parsing the two temporary files.\nGitGutter could be modified to hold a copy of the tree object's content in memory or a hidden output panel as well. Maybe it could use one mdpopups knows about or manages? This content would be updated only if GitGutter updates the tree object - not too often.\nThe information of the diff result could then be used to point to the region to use for rendering the correctly highlighted content (in default mode). In diff mode syntax highlighting is disabled anyway.\nI already thought about passing the whole tree object's content to mdpopups.syntax_highlight() but extracting the right piece of code from the resulting html seems difficult.. The idea behind loading the tree object into a hidden view was to avoid loading it repetitively and save some time. As output panels are defined per window, GitGutter would need to create one for each open view to achieve that, which I find a bad approach. One \"temporary\" panel used as scratch pad is ok. Furthermore HTML creation seems the most expensive task anyway, so adding the new function may not help. From this point of view, it was just enough to be able to pass the desired rendering boundaries with \npython\nmdpopups.syntax_highlight(view, source_content, start, end, **popup_kwargs)\nsource_content would contain the tree object's content and start, end maybe text positions or lines. In my case lines would make more sense as diff popup displays full lines only. Not sure if  parts of a line might need to be rendered some day, too.. > Now, not specifying by lines would be most problematic for Pygments\nSpecifying lines fits most needs I think and is just enough.\n\nHow GitGutter chooses to use syntax_highlight_from_view isn't really a concern for me, only that it can be applied for its use case.\n\nYou want to provide the ability to use the active view as source for highlighting instead of a hidden panel? Sounds reasonable, even though it wouldn't make sense for GitGutter. It rather would need to manage its own hidden output panel which is applied the content of the tree object of the active view to. \nWhat about a scenario with more than one package using this feature? In the end we might have 5 or 10 hidden output panels which all might more or less contain the content of the active view?\n\nAs far as mdpopups is concerned, I can see the benefit of being able to load up a whole view once and grab content from it multiple times.\n\nAgree. > I am thinking about providing the ability to use a view,\nSorry for my imprecise description of a view. \ud83d\ude04  Of course I had exactly this in mind. Referring to an active view only, wouldn't make sense at all.\n\n... generally solve issues like this, not specifically how to I solve GitGutter's issue.\n\nAbsolutely agree. This is what all packages/plugins should do. There is nothing worse than the hell of cross references between packages.\nSounds all well so far. Thank you very much for your time and the very constructive discussion.. mdpopups provides code highlighting out of the box. Therefore source which is known by mdpopups is highlighted in the diff popup as well as it is automatically put into a <div class=highlight> tag. To do that mdpopups relies on two methods. The legacy one uses pygments and the one we were discussing about here is to use an output_panel of ST to put the snippet into, apply the correct syntax and read out the highlighted code as html. It works quite well for known syntaxes if you set \"mdpopups.use_sublime_highlighter\": true\nThe only drawback is what the initial post intends to state. Some syntaxes rely on contexts, which might not be part of the code snippet which is to be displayed in the popup. Therefore highlighting fails.\nSo we made up our mind how to possibly solve this issue with the existing techniques and strategies being in use already.\nThere is no concrete plan to implement it at the moment. See mdpopups issues ... it's low priority and more or less a kind of study. \nIt will not become part of GitGutter if it will create any performance hit or comes with other possible side effects. I already did a lot of studies which have been dismissed without even proposing them due to too many disadvantages. \ud83d\ude09 \nA absolutely agree with you not to bloat the packages or create any cross references between packages or even fight against the core API. We'll just need to have a short look into the forum to see what it results in after a bigger update. Several such proposals were already declined.\nAny of such a bigger change will be proposed as a PR with the chance to discuss or decline it.. I'll definitely try to and find it doable, too.. Line padding also adds gaps between the icon rendering areas. There is no way to fix that.. Scope names in the README are up to date and do work. I modified the AYU mirage color scheme to make deletions render red.. This topic was discussed several times, but can't remember it to have dedicated issue. The most related topic might be something like \"dedicated gutter area for changes\". Users requested multiple icons per line several times to be able to somehow see information from SublimeLinter, ColorHelper, GitGutter at a glance rather than each plugin fighting for priority.. Everything looks fine so far. I am using exactly the same configuration except I am on ST 3142 by default, but this shouldn't matter. The \"git_binary\" setting should not be required as GitGutter looks up git in the global PATH environment, which seems to be set correctly on your system.\nDo you see any GitGutter message in the statusbar or does it keep completely quite? If yes, do you use ConvertToUTF8 package? It is known to mark the view as scratch while converting text but not resetting afterwards. GitGutter will keep disabled for scratch/readonly views.\nPlease see my first answer on #428 which contains a list of situations GitGutter is disabled.. Markdown Extended is a color scheme only. It doesn't cause the issue.\nI guess the command pallet shows the \"GitGutter: Support Info\" and the \"Preferences: GitGutter ...\" commands only?\nThe file(s) you are editing are located in an ordinary working tree which was created using git clone ... or git init command? No submodule, no symlink/hardlinked file, etc.\nDo you use english file names or some with unicode characters (e.g. Asian characters)? Maybe python has trouble with them even though it shouldn't?\nGitGutter just calls a cd <path_to_dir_of_open_file> and git ... just as you would do from command line. Seems GitGutter or git don't recognize the file of being part of a valid repository maybe. \nYou could ...\n1. Open command pallet\n2. Run \"Preferences: GitGutter Settings\"\n3. add \"debug\": true,\nThis causes GitGutter to print out error messages received from git during evaluation. Maybe we get some helpful information this way. I don't see any obvious reason for your problems so far.\nEDIT: You can try to pull latest GitGutter from master branch. I've added some debug messages telling you the reason why GitGutter is disabled for a view if \"debug\" is set true. Maybe this helps finding the issue.. Closing the issue because of missing feedback on an unconfirmed problem, which seems most likely not related to GitGutter.. Gutter icons are removed in 2 situations:\n\nThe package is disabled and therefore all the GitGutter python objects are deleted.\nGitGutter is disabled by a setting or the state of the view (see: https://github.com/jisaacks/GitGutter#gitgutter-keeps-completely-quite)\n\nI can reproduce icons to temporarily disappear when saving a python file within a Sublime Text package. Reloading the file deletes and recreates the GitGutterCommand. But the icons reappear as evaluation is triggered by the POST_SAVE event.\nSaving a text file or any source outside Sublime Text folder doesn't cause icons to disappear at all here.\nReason 2 might be triggered by another package which sets the view to read-only or scratch state or something like that. If this happens on POST_SAVE event, evaluation is canceled and icons are removed until next event with view in correct state.. Commit https://github.com/jisaacks/GitGutter/commit/e194745e561e8719719bc36b973df8b2c9fa0b67 fixes it. I wanted to wait for possibly required changes to help fixing #435 (if caused by GitGutter) and than create a 1.7.4. But as there have not been progress on it for some days now, I might do without it.. This graphical glitch happens, if the icon resources are not found. Saw something like that during development several times. If this happens restarting ST is the only solution, as the icon paths are cached somehow with the invalid resource.. Doesn't need to depend on SublimeFixMacPath. I also found all dependencies to fail loading for the first couple of startups. Not sure why.. In my case bs4 still resists to load.. Sublime Text 3143 seems to have some trouble with dependencies during the first couple of startups. I encountered nearly or even all dependency packages to raise exceptions during startup. This caused several packages not to start correctly. I guess its the same case with GitGutter.\nRestarting several times helps. Don't know why.. If you come from 3126 it might be a good idea to delete the Data/Cache folder. Not sure whether it helps with this particular issue, but found others caused by obsolete cache entries.. I think the main issue was/is the ignored package_control_loader.  It is responsible to add all the dependency packages to pythons sys.path. If this package is ignored none of the dependencies is found which crashes all packages, depending on them.\nStrange is, I intend all dependencies to be optional.\nIf mdpopups is not found, diff popup is disabled.\nIf jinja2 is not found, diff popup and extended status bar messages are disabled.. The package used py PC to load dependencies is actually named \"0_package_control_loader.sublime-package\".\nYou should find a line like reloading plugin GitGutter.plugin anyway. GitGutter starts without dependencies being available, too. I checked that earlier this day.\nAny other messages beginning with GitGutter in console? Maybe it's just disabled, because of any reason.\nYou could add \"debug\": true to the GitGutter.sublime-settings to possibly get more detailed information what goes wrong.\n. In this case, please check whether you find\n\"enabled\": false in Packages/User/GitGutter.sublime-settings (may use: Preferences: GitGutter Settings)\nor\n\"git_gutter_enable\": false in Packages/User/Preferences.sublime-settings (may use: Preferences Settings)\nThe later setting may also be part of project specific settings or may be caught in the session file somewhere.\nGitGutter provides true for that value by default. You can check that by running the following command from console for a freshly opened file (in a worktree).\nview.settings().get(\"git_gutter_enable\")\nIt should return True by default.. > When I type view.settings().get(\"git_gutter_enable\") on the console, it doesn't output anything.\nEven after a restart of ST?\nWith a look into code it may happen just right after update as the default value provided in the GitGutter/Preferences.sublime-settings file will be loaded by ST upon startup only.. In order to support enabling/disabling GitGutter via main menu or command pallet for single views, I moved the \"enabled\" setting to a Preferences.sublime-settings file which is located in the GitGutter package. This file is read by ST upon startup only. This means, if you just updated GitGutter without restarting ST, the value does not yet exist in memory. Therefore view.settings().get(\"git_gutter_enable\") returns None which is the empty output. This return value is interpreted as \"disable GitGutter\". Sorry I wasn't aware of that issue. \nA simple restart of ST should fix that issue. I modified the code on master to handle the None value as True, so GitGutter will be enabled by default if the setting was not found for any reason.. Issues, which might have caused this issue are resolved.. Yes I assumed it constant. Therefore I added the template hard-coded to the release.py\nDo you plan changes?. The \"Compare against ...\" commands call git to read the required data asynchronously and then the view.window().show_quick_panel() API function is called to display the quick panel with the compare targets. This may cause a little gap between hiding the command pallet and showing up the new quick panel, but I can't find a reason why it should require another key press to show.\nIt works properly on Windows, at least.\nIf I had to guess I'd say the panel is created but ST misses the initial paint call, required to show it up. If you then press any key or maybe even click with the mouse somewhere a repaint is requested and the panel is displayed. Maybe it's related to the asynchronous task the quick panels are created in?\nIs this issue related to the specific built or does it exist with earlier builts as well?\nI wrote another package \"Skins\" which calls the show_quick_panal() asynchronously. Could you check, whether it behaves the same way?\nMaybe we need to ask @wbond to provide some hints. Otherwise I'd need to make the calls synchronous, which might cause the GUI to freeze on large repos or slow network drives. I would like to avoid that.. Interesting but strange facts.\nIf you install the package via PC, it is copied to ~/Library/Application Support/Sublime Text 3/Installed Packages/Gitgutter.sublime-package which is just the zipped GitGutter folder.\nI can't imagine a reason for this issue to exist only in the zipped GitGutter version. Everything is pure OS independent python code, which should run off the zip the same way it does from the extracted folder. In deed it does no Windows. Just double checked it by installing GitGutter via PC on a second ST setup.\nWhat happens, if you open the quick panels by key bindings (e.g. \"super+shift+option+c\", \"c\") or just running the command from consoleview.run_command(\"git_gutter_compare_file_commit\")`?\nDoes the panel show immediately or do you need any key press, too?\n. Extracted package get loaded later then zipped ones.\nThere is no difference in handling commits/branches/... quick panels. All of them are implemented using one text command which calls git and shows the parsed output the same way. Therefore it sounds like some kind of race condition. Really strange.. I installed all of those packages, but I still can't reproduce on Windows.. I've created a debug branch and added a print command right before the function call which shows the quick panel. If you want, you can\n1. download https://github.com/jisaacks/GitGutter/archive/debug.zip\n2. rename the file to GitGutter.sublime-package\n3. replace the existing one in ~/Application Support/Sublime Text 3/Installed Packages\n4. open sublime text's console \n5. open the command pallet and run one of the Compare commands\nI'd expect you to immediately get a message like GitGutter: Show branches..., with a panel being displayed or not. In this case it's really a paint issue of ST. If the console message appears together with the panel on a key press, something is going wrong in GitGutter, which we need to investigate.. > indexing: crawldb not available, indexing abandoned\nThis is most likely caused by a corrupted index database. Should be fixed by clearing ~/Application Support/Sublime Text 3/Index folder. The index is rebuilt upon next start. This sometimes happens.\n\ntop level value must be an array\n\nIn rare cases I also saw this message in the past, but was never able to locate the source. It may be caused by GitGutter, not sure.\nAt least we know for sure something is interfering with GitGutter and we don't need to bother the core devs any further with that issue. I'll try to locate the source of the message. Maybe it points me to the reason.. I was just able to reproduce the issue by luck. I have no idea what triggered it, but I was able to localize the issue to the following line:\nhttps://github.com/jisaacks/GitGutter/blob/d9d9fb804f5d61c13ba2f8746af33a9f3c609075/modules/handler.py#L726\nset_timeout() is an alias for sublime.set_timeout_async() in ST3. \nI expanded the function and added some debug prints to find where exactly it gets interrupted.\n```python\n        print(\"execute_async:\", args)\n    def executor(resolve):\n        print(\"  -> executor\")\n\n        def on_time():\n            print(\"  -> on_time\")\n            return resolve(self.execute(args, decode))\n\n        set_timeout(on_time, 10)\n        print(\"  -> set_timeout called!\")\n\n    return Promise(executor)\n\n```\nIf I open the command panel and call \"GitGutter: Compare against Commits\" the console shows the following lines:\nGitGutter: Query commits...\nexecute_async: ['git', 'log', '--all', '--pretty=%h %s\\x07%an <%aE>\\x07%ad (%ar)', '--date=local', '--max-count=9000']\n  -> executor\n  -> set_timeout called!\nThis means the issue is located in the sublime.set_timeout_async() API function. GitGutter requests it to call on_time() a little later, but it waits for the next keypress/mouseclick to do so.\nOnce a key is pressed, console shows:\n-> on_time\nMaybe we need to ask @wbond what could cause this behavior. \nThe little time delay of 10ms should enable the plugin_host to trigger other plugin's functions between several git calls. If I reduce this time to 0 or increase it to 50 or so, on_time() is called correctly on my Windows box. \nNot sure whether it does on OSX, too.\n.  @SCdF: I pushed a commit to set the delay to 0. Could you download the debug.zip from the post above again and try, whether the panel appears immediately or not?\nAt least it does now on my Windows box.. Ok, will add it to the master check some things and publish it as ordinary release soon.. > I haven't had time to fully understand the context of the snippet\nThose structures were introduced with the use of the Promise class by @rchl a year ago. I first found this concept quite useful to chain asynchronous functions together, but today I find it a bit (too) complicated for that task and not the way python requires it. I honestly didn't catch all aspects of that Promise structures as well. They indeed cause some kind of JavaScript like confusion which is not the python way of life. \ud83d\ude09 \ud83d\ude04  Maybe I can find a better, smaller and more pythonic solution for that some day.\n\n... variables bound to the closure being modified by another bit of code.\n\nSounds logical somehow and would answer the question, why this happens when calling the command from command pallet only. Calling them from console or per key binding works properly.\nMy idea: If e.g. git_gutter_compare_commit is called from the command pallet an on_activate() event sent to the view as soon as the command pallet closes. This causes the EventListener to call the main git_gutter command to update the gutter icons and so on. At the nearly same time, the git_gutter_compare_commit runs git_gutter, too. Both end up in running some git commands via the GitGutterHandler class using the snippet from above.\nSo with the little delay both fired git_gutter commands may confuse the set_timeout function.\nBut there keeps one question open with it: If I explicitly use sublime.set_timeout() it works well even with 10ms delay. The issue is caused by sublime.set_timeout_async() only. Does that happen by luck or is it due to some kind of inter-process-communication or so?\nAnd in the end the structure is used in several debounce() scenarios and would/should cause trouble there, too?!\nHmm! With this situation and its side effects in mind I might end up in abandoning the Promise stuff and use a dedicated threads and queues to run everything after each other in a determined way without pushing anything to the set_timeout function.. Seems latest ST versions publish the login shell's environment to python already.\nSee: https://forum.sublimetext.com/t/how-do-i-get-sublime-to-look-in-usr-local-bin/24141\nA setting was added to Preferences to manipulate this behavior:\n// OS X only. If the user's default shell should be invoked to obtain the\n    // user's customized environment variables. May be a boolean, or a string\n    // of the path the shell to invoke. Sublime Text must be restarted for this\n    // to take effect.\n    \"shell_environment\": true,\nWith that in mind it might be redundant to add another dependency to GitGutter which does the same thing as SublimeFixMacPath does a well job on older setups already.\nThoughts?. Thank you for your efforts to create such a descriptive issue report!\nUnfortunately this issue can't be fixed. The gutter icons are normal pictures placed right next to the line number. There is no API or setting to tell ST something about desired vertical alignment.\nThe second issue about the version number will be fixed. I cleaned up the internal structure so the support module tries to read it from a no longer existing path. Good catch.. I did not yet play around with WSL myself as it is still beta in 1703 and some of my friends already crashed their installation with it. Don't have time for such. Therefore I don't have a complete idea of the number of edge cases required.\nThe major issue with calling git from a shell is the necessity to quote all git arguments as bash -c \"git diff -U0 --no-color --no-index ...\". At the moment those arguments are passed to pythons Popen as normal list of arguments beginning with git.\nA quick and dirty check with sh.exe which is provided by Git for Windows, this could be changed with little effort.\nBut this immediately arose another issue, which might cause much more trouble in several situations: \nWindows and Linux handle paths differently. GitGutter totally relies on python's os.path module as OS independent abstraction layer. Therefore it uses \\\\ as path separator on Windows but / would be required to handle bash in WSL. There are many other such differences (symlinks, environment variables, ... ).\nI guess I would need to touch any piece of code which is related to paths. And what if you want to use ST with repos on pure Windows then? You use the git in WSL to access your files on Windows? \nThis request ends up in something like calling git from a remote shell on a different OS using ssh or something like that.\nSorry, but I don't think I will support such weird things in soon. \nWindows is Windows Linux is Linux. The desperate act of integrating future into Windows is something special.\n. Thanks, Merged!. GitGutter doesn't update the icons by pure scrolling - only after loading/saving a file, activating a view or content modification. Therefore \n\nicons added to a line are not cleared by GitGutter in any way\nand any changes in settings don't have any effect.\n\nThe icons and the markers in the minimap are created by the same API function view.add_regions(). So if the minimap markers show correctly, GitGutter seems to correctly pass the required information to ST. \nIf another package temporarily adds icons to a line which has been occupied by GitGutter, GitGutter's icons are dropped, which would look like missing icons then. There are several packages out there which add icons to the gutter asynchronously. Maybe one of them is fighting with GitGutter's icons. I don't have an idea whether and how this could be related to quick scrolling. \nCould you try to setup a clean installation of ST with PC, GitGutter and its dependencies added only to check whether the issue remains? \n. Hmm, strange. In that case there are two last chances to find out whether the issue is caused by GitGutter.\nIn order to fix issue #446 GitGutter 1.7.5 uses real threads to evaluate and add the icons. ST API is considered thread safe but maybe its buggy somehow.\nTo check that, you could try to temporarily revert to GitGutter 1.7.4, which uses set_timeout_async() to do so. \n\nDownload https://github.com/jisaacks/GitGutter/archive/1.7.4.zip\nRename it to GitGutter.sublime-package\nPlace it into ~/Library/Application Support/Sublime Text 3/Installed Packages and replace the current one. (Hope PC doesn't update it immediately)\n\nIf the issue still remains then, you could try to use the console to add a bunch of icons and check whether they remain in the gutter after scrolling. Will create a little helper for that.\nEDIT: \n\nCreate a \"debug_regions.py\" in our User folder\nPaste the following content.\n\n```python\nimport sublime\nimport sublime_plugin\nclass DebugAddRegionsCommand(sublime_plugin.TextCommand):\ndef run(self, edit):\n    sublime.set_timeout_async(self.run_async, 0)\n\n\ndef run_async(self):\n    region = sublime.Region(0, self.view.size())\n    regions = [sublime.Region(r.a, r.a + 1) for r in self.view.lines(region)]\n\n    self.view.add_regions(\n        'debug_region',\n        regions=regions,\n        scope='markup.changed',\n        icon='Packages/Theme - Default/common/dot.png',\n        flags=sublime.DRAW_NO_FILL | sublime.DRAW_NO_OUTLINE)\n\nclass DebugClearRegionsCommand(sublime_plugin.TextCommand):\ndef run(self, edit):\n    self.view.erase_regions('debug_region')\n\n```\n\nIn console you can run: view.run_command(\"debug_add_regions\") to add a region to each line.\nTry scrolling and check whether gaps appear.\nIn console you can run: view.run_command(\"debug_clear_regions\") to remove the regions.\n. Sorry, didn't notice the zipfile to contain a single directory with the content being downloaded. \n\nWith the issue remaining after reverting to GitGutter 1.7.4 I am quite sure it's a bug in ST. The gutter icon rendering was updated recently to correctly support the 4k screens and fix an issue with heavy CPU usage caused by many regions added.\nIf we file an issue in the core section, the question will arise to create some procedure to reproduce the issue without any packages being installed. To really proof this issue is caused by the core, I would like to ask you one last thing to do.\nPlease move away the data directory again. Then paste the content of the code snippets from my last post to a python file within the new User directory, open a (large?) file which is not located within a git repository (to keep GitGutter disabled) and run the mentioned command from console. \nJust paste view.run_command(\"debug_add_regions\")  to the console and hit enter. This will add an icon to each row in your document. If those icons get lost, too, its definitely a core issue.. I can't reproduce this issue. Gutter icons are rock stable on Windows. Seems to be an OS related issue.\nI've created an issue https://github.com/SublimeTextIssues/Core/issues/1947. Could you please provide information to complete the environment section?\n. GitGutter themes can be created by everybody and may be contained in any package (with ST3).\nEveryone is free to modify existing icons or create new ones, place them in a separate package and add an empty <Theme Name>.gitgutter-theme file to the icon containing folder mark it as theme folder.\nGitGutter searches for the .gitgutter-theme file in all packages including sub directories and uses the icons of the same directory. . The points are:\n\nJust wanted to emphasize the possibilities.\nThe existing themes besides the Default one are just some examples.\nA theme author can add gutter themes to his package as well if he decides the default ones not to look cute in combination with his theme or color scheme. \nOf course GitGutter can provide dozens of themes and everyone is welcome to contribute. \nI tried different widths of bars and found thicker ones looking quite odd. Maybe a theme with the bars aligned centered would be a better solution?\nI am not a graphics specialist or themer. It took quite a while for me too to create the bunch of even very simple icons. I honestly don't like fiddling with gimp and co.. This error is most likely caused by an invalid value of one of the language maps used by mdpopups to do highlighting.\n\nDid you add/modify the \"mdpopups.sublime_user_lang_map\" in %APPDATA%\\Sublime Text 3\\Packages\\User\\Preferences.sublime-settings?\nIf it is set to false or null, the error you describe is triggered. \nIt must be an object:\n\"mdpopups.sublime_user_lang_map\": {\n    // ...\n}\nIf not, which syntax do you use?. You can set \"mdpopups.use_sublime_highlighter\": true if you want to enable color highlighting. Otherwise none of them is required by default.. I guess the question is answered and therefore close this issue.. With git for windows installed and registered to the PATH and works from console, GitGutter should find it out of the box on Windows. Tried it several times on my own. The error 193 indicates, that something was found on PATH which looks like git executable, but doesn't seem to be one. Otherwise WinError 2 file not found was raised.\nI guess GitGutter: Support Info command from command panel triggers the same error?\nDid you setup \"git_binary\" in either GitGutter.sublime-settings or Preferences.sublime-settings? If yes, they must point to a valid executable.  They shouldn't be required normally.\nI guess it shouldn't matter, but did you mix up 32/64bit apps somehow?\nDid you use git for windows setup or portable version with PATHs added manually?\nBy default PATH should contain C:\\Program Files\\Git\\cmd;C:\\Program Files\\Git\\mingw64\\bin somewhere. \nIf nothing helps, you can try to add \"git_binary\": \"C:\\Program Files\\Git\\mingw64\\bin\\git.exe\" to your Preferences.sublime-settings to explicitly tell GitGutter which exe to use.. Works fine for me, here. What I did to check:\n\nopen Powershell 64-bit\ninstall scoop, \nmove my local git to an unknown path to hide it away\ncall scoop install git\nset the path in GitGutter settings according to your example\nopen a repo in ST\n\nGit is found and executed. I tried with both 32/64bit ST on Windows x64 with git 2.14.2 x64\nThe configuration is correct, too. Therefore I am not sure what's wrong. The \"git.exe\" your configuration points to is not the real git binary, but only a helper which runs git. Maybe something is wrong with it.\nYou could try to set \"git_binary\": \"C:/Users/Jaaayz/scoop/apps/git/current/mingw64/bin/git.exe\"\nThis is the real git.exe installed by scoop.\n. SublimeLinter popups are nasty and buggy. See https://github.com/SublimeLinter/SublimeLinter3/issues/619\nThey don't check whether other popups are already open, therefore just replace them or even hide tooltips not opened by itself. The only solution is to turn off SublimeLinter popups.\nIt's not a bug of GitGutter and can't be solved here. As the API doesn't handle multiple instances of popup requests, to decide which popups to show or hide, this kind of popup fighting might not be solved too easily on a package level at all.\nThe only chance is to check whether a popup is visible and keep quite. This is what GitGutter already does. More is not possible.. You'd need some variables with general information about the whole repository status in the end?\nI already was playing around with using git status command to use it for several things internally. Unfortunately I ended up in using git status --porcelain=2 which is not supported by older git versions and had to drop it. I did not yet find a proper alternative without bloating the whole Promise() structure too much.\nBut maybe it's not too hard to query some status vars in the background in order to just provide them as variables for jinja2.. Supported by GitGutter 1.7.7+. Not a big deal to extend the commands with those arguments.. ... and count argument defaults to 1 if not present or < 1.. You can try the change. It's already merged to master. You can therefore simplify your functions soon. Need to check whether to work on the status issue before deciding when to make a next release.. Supported by GitGutter 1.7.7+. GitGutter searches for either a .git file or directory in the open file's directory or one of its parents to determine the \"root\" of the repository. If it doesn't find such a .git, the file is considered not to be part of such a repository.\nIn a normal git repository, you'll always have a .git directory in the working-tree root, which holds the index and the tree (database) of your repository.\nBeginning with git 2.5 or so it allows both, place the work-tree somewhere else and checkout multiple work-trees per database.\nIf you use git worktree add to checkout a second working tree of an already existing one, it will contain a .git file with the path to the real .git directory automatically. You can imagine it as a kind of link. This file is needed to let git know about the location of the database.\nExample:\n/data\n    |\n    +- work_tree\n    |  |\n    |  +- .git        (the real git directory)\n    |  |\n    |  +- file        (the file opened in ST)\n    |\n    +- work_tree_copy\n    |  |\n    |  +- .git        a file containing \"gitdir: /data/work_tree/.git.\"\n    |  |\n    |  +- file        maybe another version of \"work_tree/file\"\nIf your working tree does neither contain the real .git database folder nor such a link file, you'll need to create the link file manually in the root. Otherwise the folder is not recognized as working tree.\nJust create a text file with\ngitdir: /path/to/.git.\n. > Why???\nYou already answered:\n\nGitGutter: disabled for \"1.html\" because file not in a working tree\n\nIf the open file is not part of a git repository, GitGutter disables itself as it has nothing to say.\nDoes your folder \"test\" contain a directory called \".git\"?. Not sure what you try to do, but guess it is too much ...\n\nLeedeMacBook-Air:test lee$ git config --add core.worktree /users/lee/test\nLeedeMacBook-Air:test lee$ echo \"gitdir: $(git rev-parse --git-dir)\" > .git\n-bash: .git: Is a directory\nLeedeMacBook-Air:test lee$\n\nNot needed at all.\nIf your working folder is /users/lee/test it is enough to call git init to turn the folder into a git repository. git init creates the .git directory within test directory, which GitGutter looks for.\nEach file in /users/lee/test is now untracked.\nCalling git add . stages them. As they did not exist in git's database, they are marked as inserted (green + next to each line)\nCalling git commit will remove the green +.. > do not need you to explain the git principle, \nDoesn't look so to me.\n\nyou just need to tell me what's going to do next?\n\nMy last post contains the required steps. Nothing else needed.\n\n... and I created the .git file in the .git folder (git add.).\n\n???  not required! Too much!\nBy calling git init in /users/lee/test it is turned into a repository and all files within this directory are handled by GitGutter.. Google Translator can be pain for all participants.\n. I've passed your status lines to parse_output() function which converts it to the variables passed to jinja2. Printing all values returns: master origin/master 1 None 7 0 4 0 - the expected behavior.\nI added {{remote}} to my GitGutter.sublime-settings and committed it to my local branch to be one ahead of the remote as in your example. Status bar text renders well.\nIf you just updated, you might need to restart ST. The pattern used to parse the header line is compiled as global variable and therefore might not be loaded correctly.\n. The reason was identified in #462 and is fixed in GitGutter 1.7.8 which was committed some minutes ago. Should arrive soon.. Thanks for the hint. You are right - it's not in the online docs. I just used \"git status --help\" from my local setup which includes it. Maybe a git for windows thing?\nWill remove it.. Sublime Text does not provide the opportunity to apply a priority to gutter icons. You are lucky to see SublimeLinter to win the fight if both GitGutter and SublimeLinter occupy the gutter. From time to time ST seems to change the order internally which may cause SL icons to be hidden by GitGutter. \nAs @r-stein correctly stated the only (hacky) way to prevent GitGutter to hide higher prior icons is to not add a region to lines, which are already occupied by one of the listed scopes.\nThis feature is known to be not ideal but there is no better one available at the moment (ST 3152). Looks like something causes the default no longer to be applied at all. The button bar normally has a different color than the rest and the toolbar symbols must not be underlined.\nThe default stylesheet for popups is part of GitGutter.sublime-package named gitgutter_popup.css.\nMaybe something is overloading the default stylesheet or breaking correct loading.. GitGutter uses mdpopups for the diff popup. You can look for gitgutter_popup.css or check whether a mdpopups.css exists in your User package with malformed CSS. You could also have a look to ST's console. Maybe mdpopups complains about something?\nGitGutter looks for gitgutter_popup.css in the User package, the folder containing the selected gitgutter-theme and GitGutter package itself and merges all of them.\nThe only known package providing gitgutter-themes is MonokaiPro. Not sure about others.. Any errors in ST's console?\nCould you please do the following steps?\n\nadd \"mdpopups.debug\": 3, to your Preferences.sublime-settings\nhover a single changed line once (to keep console output small)\nPost the console output here?\n\nIt should look like:\n```\nmdpopups: =====CSS=====\nmdpopups: \nhtml {\n  --mdpopups-font-mono: \"sf mono\", Consolas, \"Liberation Mono\", Menlo, Courier, monospace;\n  --mdpopups-admon-fg: var(--foreground);\n  --mdpopups-admon-info-fg: var(--foreground);\n  --mdpopups-admon-error-fg: var(--foreground);\n  --mdpopups-admon-warning-fg: var(--foreground);\n  --mdpopups-admon-success-fg: var(--foreground);\n  --mdpopups-admon-bg: var(--background);\n  --mdpopups-admon-info-bg: var(--background);\n  --mdpopups-admon-error-bg: var(--background);\n  --mdpopups-admon-warning-bg: var(--background);\n  --mdpopups-admon-success-bg: var(--background);\n  --mdpopups-admon-accent: color(var(--background) blend(var(--foreground) 50%));\n  --mdpopups-admon-title-fg:  var(--foreground);\n  --mdpopups-admon-info-title-fg:  var(--foreground);\n  --mdpopups-admon-error-title-fg:  var(--foreground);\n  --mdpopups-admon-warning-title-fg:  var(--foreground);\n  --mdpopups-admon-success-title-fg:  var(--foreground);\n  --mdpopups-admon-info-accent: color(var(--background) blend(var(--bluish) 50%));\n  --mdpopups-admon-error-accent: color(var(--background) blend(var(--redish) 50%));\n  --mdpopups-admon-warning-accent: color(var(--background) blend(var(--orangish) 50%));\n  --mdpopups-admon-success-accent: color(var(--background) blend(var(--greenish) 50%));\n  --mdpopups-kbd-fg: var(--background);\n  --mdpopups-kbd-bg: var(--foreground);\n}\nhtml.light {\n  --mdpopups-hr: color(var(--foreground) blend(white 80%));\n  --mdpopups-kbd-border: color(var(--foreground) blend(white 80%));\n  --mdpopups-hl-border: color(var(--background) blend(black 90%));\n  --mdpopups-hl-bg: color(var(--background) blend(black 98%));\n}\nhtml.dark {\n  --mdpopups-hr: color(var(--foreground) blend(black 80%));\n  --mdpopups-kbd-border: color(var(--foreground) blend(black 80%));\n  --mdpopups-hl-border: color(var(--background) blend(white 90%));\n  --mdpopups-hl-bg: color(var(--background) blend(white 98%));\n}\nhtml, body { padding: 0; margin: 0; }\ndiv.mdpopups {\n  display: block;\n  margin: 0;\n  padding: 0;\n  font-size: 1rem;\n  line-height: 1.1rem;\n}\n.mdpopups .highlight,\n.mdpopups code,\n.mdpopups var,\n.mdpopups tt {\n  font-family: var(--mdpopups-font-mono);\n}\n.mdpopups div { display: block; }\n.mdpopups h1 { font-size: 1.5rem; }\n.mdpopups h2 { font-size: 1.4rem; }\n.mdpopups h3 { font-size: 1.3rem; }\n.mdpopups h4 { font-size: 1.2rem; }\n.mdpopups h5 { font-size: 1.1rem; }\n.mdpopups h6 { font-size: 1rem; }\n.mdpopups h1, .mdpopups h2, .mdpopups h3, .mdpopups h4, .mdpopups h5, .mdpopups h6 {\n  margin-top: 0.2rem;\n  margin-bottom: 0.2rem;\n}\n.mdpopups blockquote { display: block; font-style: italic; }\n.mdpopups hr {\n  display: block;\n  border-color: var(--mdpopups-hr);\n  border-style: solid;\n  border-width: 0 0 1px 0;\n  margin-top: 1rem;\n  margin-bottom: 1rem;\n}\n.mdpopups dl { display: block; }\n.mdpopups dt {\n  display: block;\n  font-style: italic;\n  font-weight: bold;\n  margin-bottom: 0.5rem;\n}\n.mdpopups dd {\n  display: block;\n  margin-left: 1.5rem;\n  margin-bottom: 0.5rem;\n}\n.mdpopups pre { display: block; }\n.mdpopups blockquote, .mdpopups ol, .mdpopups ul, .mdpopups dl, .mdpopups p {\n  padding: 0;\n  margin-top: 0;\n  margin-bottom: 0.5rem;\n  margin-left: 0;\n  margin-right: 0;\n}\n.mdpopups ul, .mdpopups ol { padding-left: 2rem; }\n.mdpopups kbd {\n  display: inline;\n  font-size: 0.9rem;\n  padding: 0.05rem 0.25rem;\n  border-radius: 0.25rem;\n  background-color: var(--mdpopups-kbd-bg);\n  color: var(--mdpopups-kbd-fg);\n  border: 1px solid var(--mdpopups-kbd-border);\n}\n.mdpopups .admonition {\n  display: block;\n  padding: 0 0.5rem 0.5rem 0.5rem;\n  border-radius: 0.25rem;\n  margin-bottom: 0.5rem;\n  background-color: var(--mdpopups-admon-bg);\n  color: var(--mdpopups-admon-fg);\n  border: 1px solid var(--mdpopups-admon-accent);\n}\n.mdpopups .admonition-title {\n  font-weight: 600;\n  font-size: 1.1rem;\n  margin: 0 -0.5rem 0.5rem -0.5rem;\n  padding: 0.1rem 0.5rem 0.1rem 0.5rem;\n  border-top-left-radius: 0.25rem;\n  border-top-right-radius: 0.25rem;\n  color:  var(--mdpopups-admon-title-fg);\n  background-color: var(--mdpopups-admon-accent);\n}\n.mdpopups .admonition.panel-success .admonition-title {\n  color: var(--mdpopups-admon-success-title-fg);\n  background-color: var(--mdpopups-admon-success-accent);\n}\n.mdpopups .admonition.panel-success {\n  color:  var(--mdpopups-admon-success-fg);\n  background-color: var(--mdpopups-admon-success-bg);\n  border-color: var(--mdpopups-admon-success-accent);\n}\n.mdpopups .admonition.panel-warning .admonition-title {\n  color: var(--mdpopups-admon-warning-title-fg);\n  background-color: var(--mdpopups-admon-warning-accent);\n}\n.mdpopups .admonition.panel-warning {\n  color:  var(--mdpopups-admon-warning-fg);\n  background-color: var(--mdpopups-admon-warning-bg);\n  border-color: var(--mdpopups-admon-warning-accent);\n}\n.mdpopups .admonition.panel-error .admonition-title {\n  color: var(--mdpopups-admon-error-title-fg);\n  background-color: var(--mdpopups-admon-error-accent);\n}\n.mdpopups .admonition.panel-error {\n  color:  var(--mdpopups-admon-error-fg);\n  background-color: var(--mdpopups-admon-error-bg);\n  border-color: var(--mdpopups-admon-error-accent);\n}\n.mdpopups .admonition.panel-info .admonition-title {\n  color: var(--mdpopups-admon-info-title-fg);\n  background-color: var(--mdpopups-admon-info-accent);\n}\n.mdpopups .admonition.panel-info {\n  color:  var(--mdpopups-admon-info-fg);\n  background-color: var(--mdpopups-admon-info-bg);\n  border-color: var(--mdpopups-admon-info-accent);\n}\n.mdpopups .highlight {\n  border: 1px solid var(--mdpopups-hl-border);\n  border-radius: 0.25rem;\n  font-size: 0.9rem;\n  background-color: var(--mdpopups-hl-bg);\n}\n.mdpopups div.highlight,\n.mdpopups pre.highlight {\n  padding: 0.5rem;\n  margin-bottom: 0.5rem;\n  font-size: 1rem;\n}\n.mdpopups code.highlight{\n  padding: 0.05rem 0.25rem;\n}\nhtml.dark {\n    --mdpopups-hl-bg: color(var(--background) blend(white 95%));\n    --diffpopup-tb-bg: color(var(--mdpopups-hl-bg) blend(white 95%));\n    --diffpopup-ins-bg: color(green blend(black 60%));\n    --diffpopup-ins-fg: color(green blend(white 40%));\n    --diffpopup-del-bg: color(red blend(black 60%));\n    --diffpopup-del-fg: color(red blend(white 40%));\n    --diffpopup-chg-ins-bg: color(#769908 blend(black 95%));\n    --diffpopup-chg-ins-fg: color(#769908 blend(white 20%));\n    --diffpopup-chg-del-bg: color(orangered blend(black 80%));\n    --diffpopup-chg-del-fg: color(orangered blend(white 40%));\n}\nhtml.light {\n    --mdpopups-hl-bg: color(var(--background) blend(black 95%));\n    --diffpopup-tb-bg: color(var(--mdpopups-hl-bg) blend(black 91%));\n    --diffpopup-ins-bg: color(green blend(white 25%));\n    --diffpopup-ins-fg: color(green blend(black 80%));\n    --diffpopup-del-bg: color(red blend(white 25%));\n    --diffpopup-del-fg: color(red blend(black 80%));\n    --diffpopup-chg-ins-bg: color(#93921b blend(white 20%));\n    --diffpopup-chg-ins-fg: color(#93921b blend(black 85%)); \n    --diffpopup-chg-del-bg: color(orangered blend(white 20%));\n    --diffpopup-chg-del-fg: color(orangered blend(black 85%));\n}\ndiv.git-gutter {\n    margin: 0;\n    padding: 0;\n}\n.git-gutter div.toolbar {\n    background-color: var(--diffpopup-tb-bg);\n    color: color(var(--foreground) blend(var(--diffpopup-tb-bg) 30%));\n    margin: 0;\n    padding: 0.0rem 0.4rem 0.2rem 0.4em;\n}\n.git-gutter div.toolbar symbol {\n    font-family: \"Roboto Mono\", \"Segoe UI\", monospace;\n    font-size: 1.2rem;\n    margin: 0;\n    padding: 0.0rem 0.1rem 0.0rem 0.1em;\n}\n.git-gutter a {\n    color: var(--foreground);\n    text-decoration: bold;\n}\n.git-gutter div.highlight {\n    font-family: \"sf mono\", \"Roboto Mono\", \"Liberation Mono\", Menlo, Courier, monospace;\n    border-style: none;\n    line-height: 1.3rem;\n    margin: 0;\n    padding: 0.7rem 0.7rem 0.6rem 0.7rem;\n}\n.git-gutter .highlight p {\n    margin: 0;\n}\n.git-gutter .hi-ins {\n    color: var(--diffpopup-ins-fg);\n    background-color: var(--diffpopup-ins-bg);\n}\n.git-gutter .hi-del {\n    color: var(--diffpopup-del-fg);\n    background-color: var(--diffpopup-del-bg);\n}\n.git-gutter .hi-chg-ins {\n    color: var(--diffpopup-chg-ins-fg);\n    background-color: var(--diffpopup-chg-ins-bg);\n}\n.git-gutter .hi-chg-del {\n    color: var(--diffpopup-chg-del-fg);\n    background-color: var(--diffpopup-chg-del-bg);\n}\n.lsp_popup .highlight {\n  border: 1px solid var(--mdpopups-hl-border);\n}\n.lsp_popup p,\n.lsp_popup li\n{\n    font-family: \"Roboto Mono\";\n}\nmdpopups: =====HTML OUTPUT=====\nmdpopups: \n\n\n\n   \u00d7\n  \n\n\n  \u2912\n \n\n  \u2191\n \n\n  \u2193\n \n\n\n   \u2248\n  \n\n\n\n   \u2398\n  \n\n\n\n   \u27f2\n  \n\n\n\n\n``. It's mdpopups which fails to parse your color scheme. It fails to read theforeground` color of an element, which causes the tracebacks. We could ask @facelessuser whether some recent changes may be responsible for that issues. I downloaded Material Theme, activated each of the provided color schemes without encountering any issues.\nDid any plugin like SublimeLinter create a patched (hacked) color scheme which might be broken? You can find it out by checking the \"color_scheme\" setting in your Preferences. If yes, a copy of that file might help to find the reason for the parse error.\nChanging the color scheme to a safe default value and deleting (moving away) the patched version should help.\n. I absolutely agree with your last statement. \nAll information are assigned to the main GitGutterCommand of a view, which is the reason for all commands to be proxied to it. Accessing those data directly might be a bad idea as the structure might change in the future.\nThere are some thoughts about using the EventListener as a kind of server to provide those information on a per event base and expose them to the rest of the components (clients). This would allow an API for external plugins, too. But it's kind of far away from implementation and would cause some significant changes.\nMost parts of the data processing would need to be moved from the GitGutterCommand over to the EventListener, which already handles a dictionary of all open views.\nThis would end up in some kind of DiffProvider which can be exposed as an API.\nThis would definitely need some time to be designed and tested.\nEDIT: If you just need to query the changed lines you could call:\nview.get_regions(\"git_gutter_inserted\")\nview.get_regions(\"git_gutter_deleted_top\")\nview.get_regions(\"git_gutter_deleted_bottom\")\nview.get_regions(\"git_gutter_deleted_changed\"). See: https://github.com/jisaacks/GitGutter#protected-regions\nFeel free to add as much protected regions to your personal configuration as you need.\nIt won't make sense to add all available plugins' regions to the default configuration.\nThe existing entries are quite common examples. SublimeLinter and LSP (will) cover most/all available languages, while Anaconda is just for some python devs.. Fixed in 1.7.9. No information provided. Thanks.. Fixed in 1.7.10. Thanks for finding, reporting and fixing \ud83d\udc4d \nThe -c argument is a basic one and should go back far enough to safely use it.. Basically I can see three options:\n\nUse the existing protected_regions\nAdd a new popup_protected_regions to disable diff popup for regions known to provide higher priority popup functionality.\nShow diff popup only for lines occupied by a git_gutter_... region.\n\nOption 1. and 3. should result in equal behavior while 3. is faster and easier to check as all git_gutter_... regions start at the beginning of a line so their beginning boundary is already equal to the point argument of the on_hover handler. It would further result in a consistent behavior as diff popup might not be expected if no gutter mark exists. But as you already stated, it would disable diff popup even though there is no other popup to show which is true for bookmarks and maybe others.\nOption 2 would add more flexibility to decide when to show the diff popup. With a little bit of help from foreign packages it could even be much faster than option 1 or 3. What I have in mind is each popup (e.g. SublimeLinter) adding an invisible sublime_linter.popup_region if it shows a popup, with the point from on_hover. The popup would need to implement the on_hide event to remove the region again.\nExample:\n```python\nimport sublime\nimport sublime_plugin\nclass EventListener(sublime_plugin.EventListener):\ndef on_hover(self, view, point, hover_zone):\n\n    failed = False\n\n    if hover_zone != sublime.HOVER_GUTTER:\n        return\n\n    def remove_region():\n        \"\"\"Remove popup region, if popup gets hidden.\"\"\"\n        view.erase_regions(\"package_name.popup_region\")\n\n    def on_async_done():\n        \"\"\"An async task is completed with the popup being finally added.\"\"\"\n        if failed:\n            return remove_region()\n\n        view.show_popup(content=\"Hello World\",\n                        location=point,\n                        on_hide=remove_region)\n\n    # simulate async task\n    sublime.set_timeout_async(on_async_done, 200)\n\n    # mark line as occupied by \"package_name\"\n    view.add_regions(\"package_name.popup_region\",\n                    regions=sublime.Region(point),\n                    flags=sublime.HIDDEN)\n\n```\nThe package_name.popup_region could then be checked by GitGutter and maybe vice versa.\n. > I may not have access to the gitgutter popup and a quick \"reset\"\nYou always have: ctrl+shift+alt+z\n\nOne gutter isn't enough...\n\nThe \"line changed\" gutter is something special and would be worth a dedicated area like in VS Code or Atom just right next to the line numbers. I could even imagine to use GitGutter to track normal files not part of a repo ;-) by just using a copy of the file when opened to do comparison.. Hmm. Reading @FichteFoll's suggestion triggered the following idea:\nHow about a dependency, which itself implements an EventListener that handles the on_hover(). It would than call an on_request_popup() method of all registered view_event_listeners which define it. This method returns True synchronously if a plugin attempts to show a popup. If more than one listeners return True a user defined priority list (changeable by settings) is used to decide for which EventListener to call an on_show_popup() method which a package uses to actually prepares and shows the popup.\nMeans all the stuff in the today's on_hover() method which is used to decide whether to show a popup or not is put into the on_request_popup() method and the rest which actually creates and shows the popup is put into the on_show_popup(). \nBy splitting on_hover() this way, each package has the chance to provide the requested handshake to avoid popup fighting on the fly. No need for the dependency to implement all the required checks of regions or scopes - just managing.\n. Sounds good.\nWhat if a package implements several event listeners which are meant to show popups? Call all on_show_popup() methods of that plugin and let it decide?\nHow about the on_request_popup() to return a priority?\nIf \"hover_popup_priorities\" does not contain a package's value the default one returned by on_request_popup() could be used to add an entry. \nAlternatively the \"hover_popup_priorities\" could be omitted and the priority returned by on_request_popup() be used only. A package would need to add a package specific setting to let the user change its priority.\n. It provides an option to disable diff popup when hovering the gutter area with the already existing technology of regions. It is somewhat stupid as it may need user interaction to work around popup fighting. The solution targets popup fighting with a certain hover area only, that's true.\nThe only general solution was to register all \"show_popup\" calls by name and create a global priority list which is used by ST to decide which popup to show if more than one is requested to be displayed. \nTherefore the only general solution was to improve popups management functionality in ST itself. Same applies to gutter icons, which would need some kind of priority, too.\n. GitGutter shows the files in the prg folder as untracked as git is not able to read those files. As it seems not to exist in your database it is displayed as untracked.\nDebug log:\nGitGutter: \"git cat-file\" failed with \"fatal: Not a valid object name 035a596ff46f1c32666235f52929b9fae5e13340:prg/prg001.asm\"\nGitGutter: \"git diff\" failed with \"usage: git diff --no-index <path> <path>\"\nGutGutter uses the plumping git cat-file command to read file content for some reasons, but the highlevel git show object:prg/prg001.asm fails as well - also from console.  It says fatal: Path 'prg/prg001.asm' exists on disk, but not in 'object'.\nSeems you somehow broke your database.\n. I ran the following to  commands to try to cleanup the repo, but without success. \ngit reflog expire --expire-unreachable=now --all\ngit gc --prune=now --aggressive\ngit fsck --full\nMaybe just this one snapshot which got broken. Not sure. Wasn't faced to such an issue up to now.\nMy GitExtensions can read the folder, too, even though it takes a while. Don't know which command is used to do so.. The git database is per design always case sensitive. All --icase-pathspecs arguments and settings don't apply to commands directly working with tree objects. . Good catch. This is indeed the wrong setting we try to read.. Not really sure, what you mean with \"new lines for subline with border\", but if it is about the gabs between the lines like in https://github.com/jisaacks/GitGutter/issues/433 the answer is no. \nThe lines are simple icons which fill the whole possible height. The gaps are caused by the line padding settings. No chance to fill the gap.\nThe community asked for a dedicated gutter to highlight such kind of changes without success.\nEDIT:\nYou can add the following line to your Preferences.sublime-settings to setup the builtin theme which tries to adapt the VSCode style.\n\"git_gutter_theme\": \"Bars.gitgutter-theme\",\nBu you'll see some gaps between the lines, which can't be removed.. Just to be sure (as not mentioned in your post): \nThe file you are looking for icons indicating text changes in is part of a git repository? \nIf not that's the answer. GitGutter compares the View content against the committed file and therefore works within git working trees only.\nWorks well here with exactly the same setup.\nTip: \nIf git is defined in the PATH environment it works out of the box in Sublime Text. You don't need to add the git_binary or enabled setting explicitly.. They normally should, but python sometimes doesn't seem to clean up objects and therefore files are not deleted sometimes. Under normal conditions files are cleaned up correctly (at least on Windows) but from time to time I found some zombies left behind. Mostly after I changed some pieces of code and reloaded GitGutter.. This issue rises some more questions, which may be worth discussing:\n\n\nOn Windows the temporary directory is located within the user profile path and therefore private for each user. On Unix/Linux it looks like the global /tmp folder is used. So the temporary files are public for each user being logged on.\n\n\nEven with \"portable\" setup, GitGutter causes files being placed outside the application directory, which somehow breaks the idea of \"portable\". \n\n\nTherefore I am wondering whether it was a better idea to place temporary files into ST's Data/Cache/GitGutter folder, which would solve both issues.. Fixed in 1.7.12. Duplicate of https://github.com/jisaacks/GitGutter/issues/484 and invalid as it is a Package Control issue.. How about the Git blame package? It allows to show the blame of each line via phantoms.\nNevertheless adding the inline blame to the diff popup might be a useful feature.. Not sure what you expect but as you always see the content of the working tree's file in your editor git blame always shows the most recent commit that changed the file. I found arguments to specify the amount of time to go back looking for changes but not a certain branch or path of branches to compare against.\nA blame popup in GitGutter would just show the result of git blame -Lx,y -- <filename>.\nThe issue with creating a popup for it is the question how to trigger the popup? Showing the popup when hovering the gutter area of a line will most likely result in the popup fighting against other plugins. The currently used methods to avoid it (protected_regions) would not work then as the blame popup would occupy each line which git blame returns a value for.. Do I understand correct?\nYou want to see the blame output of the content which is displayed within diff popup? So you can see who changed the line within the committed file you are currently comparing against? . If I read the git blame documentation correctly, specifying a branch name like \"esp32\" in your case just limits the range git blame walks back in history to look for changes. It does not specify the \"esp32\" to be the commit to take the source file to blame from.\nWith other words: Blame works for the working file only.\nSo what's possible is to call git blame against the changed lines of the working file (which are highlighted in the gutter area) to reveal the most recent commit the changes were introduced in. Your compare target might point to a commit which is much older and therefore changes are displayed which belong to different commits.\nFrom this point of view some kind of \"status line\" at the bottom of the popup with the author, date and commit of that change might make sense. As a result a button could be added to set the compare target exactly to that commit.. 1. Disabling the annotation by default is considerable but will most likely cause nobody to realize that feature. It is enabled in GitLens for VS Code by default as well. There are thousands of settings all over ST and its plugins to customize nearly everything. IMHO the effort to disable that feature if someone really doesn't like it is acceptable.\n2. Displaying the blame info in the diff popup for changed lines wouldn't make sense as you'd only see You (just now) if compared against HEAD. It might make sense if comparing against older commits/branches/... if the changed line was not modified in the working tree / editor. Furthermore the blame information is not related with the diff. It is an information worth to be displayed for any line, which makes the usage of a popup for that purpose hard without conflicting with other plugins occupying the gutter.\n3. Makes no sense as described in 2.\n\nThe scope for is comment.line.annotation.git_gutter in order to default to comment style. The line_annotation_scope setting was finally removed as it would result in requests to add custom diff scope settings as well. With that said a syntax definition or plugin defines a scope, which is a key do be addressed by color schemes to provide suitable colors for. This is how ST works. Any option to define fixed styles would work well only with one color scheme.\n\nBasically the phantom being used for line annotation is just a peace of HTML with the id gitgutter-line-annotation which a color scheme could even provide a custom embedded CSS for. \nI also thought about making use of mdpopups to render the phantom, which would have enabled us to use the diff_popup.css, but in the end I found it all too bloated in order to just provide the ability to define a fixed color, which wouldn't match any color scheme well anyway.. User feedback is respected, but with 400..600 downloads per day 10 votes at all are just a very minor amount. Unfortunately people only open issues or vote if the dislike something. Searching ST forum or other sources might also reveal as much posts of people liking the feature. So the current number of votes is just not enough to disable it by default.. Thanks. The one and only function being executed synchronously is git --version which is responsible to check for git to work properly. This function normally returns its result in 5ms on Linux and in 50ms on Windows, which is short enough to not realize it.\nAll other functions are executed in dedicated threads and can't block ST.\nI saw ST stalling caused by GitGutter only once maybe half a year ago. It was caused by Kaspersky Internet Security, which caused git --version to require up to 1.5 seconds to return a value. This issue was resolved after upgrading Windows 10 and KIS.\n. As this issue is caused by a delayed reaction of git itself, I labeled this issue invalid and don't see a way how GitGutter could fix such kind of issue.\nEven if ST wouldn't freeze, the user experience would be bad anyway due to heavy delays.. No, not at the moment, as it is required to enable/disable the menu commands. It is used to detect whether git is present and fully working. Otherwise it becomes hard to recover from such kind of issues ending up in uncaught exceptions or the tons of already posted \"All lines show green markers\" issues.\nI keep thinking about it, but I guess a possible solution might take some deeper changes here and there.. It's not only the version string which is interesting, but the information, whether git is still on duty. If it was only the version, it could be read upon startup once and cached for lifetime.\nIn fact most (all) posted issues about \"all lines are marked as new\" were a result of git not working properly or returning nonsense, which is hard to catch with the current implementation of Promises as they don't support an on_error callback.\nIf we remove the version check I promise such issues to be posted in the near future again and again.\nBased on git --version a clear status message is printed to console, if git stops working or returns back on duty. In the meanwhile all menu items are disabled and commands are hidden. \nOn the other hand ask yourself the question about the quality of the user experience, if the changes you made to the text are added to the gutter with a delay of about 10 seconds? At least 2 git calls are required for evaluation. If git --version takes about 5secs already, how long will real calls do?\nFinally git must not need more than 100ms to return its version as it does not interact with any database or file. In fact it does in 5ms on Linux and 50 due to poooor inter-process communication on windows. \nIt's not worth the effort to spawn a thread for a 5ms function. Spawning takes more time.. Maybe #497 can reduce the number of freezes and improve the situation with only a few code changes.. Any experiences about possible improvements on that with the latest GitGutter version?. The version needs to be checked at least once after opening a file as it is theoretically possible to have per file config for different git applications. . I have no idea why GitGutter should prevent the selection or tabs to be rendered, but after having a closer look into it, I found the TempFile class to use an ExceptionClass, which is not supported by python 2.6. \nMaybe the resulting uncaught exception causes the rendering issues on MacOS, even though it does not on Windows.\nPlease check, whether the patched version from https://github.com/jisaacks/GitGutter/tree/pr/fix-temp works for you.\n. Fixed in 1.7.14. Hmm. Maybe related to or caused by #495 or #498.\nCould you try GitGutter from the current master branch? It contains for those two issues, which might prevent temporary files from being created. If someone could prove those fixes work, I could cut another release.. you can delete that file. It is meant for quickly cutting releases and is not part of the normal package.\nIt is not compatible with py2. As I never used ST2, I am not interested in compatibility of that internally used dev script.. GitGutter queries the XDG_RUNTIME_DIR environment variable in the first place to retrieve a user specific temporary folder to put some required temporary files into. If this query returns a string it is assumed or required to point to a valid directory, which is /run/user/1000/snap.sublime-text)  in your case.\nGitGutter only creates a sub directory GitGutter at the moment.. Recently had to fix an ST2 regression ;-) So some still do use it. No real reason to drop it right now. I was wrong with makedirs() not being supported by ST2. Just misspelled it in my quick test.\nA possible fix is almost ready to PR.. Please check, whether PR #496 fixes your issue.. The amount of files open or contained by a project does not have any impact on CPU usage as GitGutter runs on the active view only. \nMaybe the size of your file can make a difference as each modification if the content needs to be saved to a temporary file on disk as git is too stupid to take it via stdin to do a diff. So if you work on very large files, saving the file after each modification can become an expensive task. \nBut otherwise I can't reproduce it. Sublime Text with GitGutter enabled takes at most 10% CPU while editing a file of 200k lines of code, dropping to 0% when idle. Quickly switching between files keeps GitGutter idle in case the files did not change. If not the git commands are even finished too quick show up in the task manager. \nWhat means big project? I work on projects of 500MB with about 400k files without any reasonable CPU usage caused by ST or GitGutter at all.\nHow about RAM usage? ST tends to crash, if it hits the systems RAM limit. \nWhat I can suggest at the moment is:\n\nTry to increase \"debounce_delay\": 1000, to reduce the number of evaluations.\n\nSet \"live_mode\": false for very large files.. I basically managed to create a first implementation to run git via wsl.exe but I guess you won't like the results very much.\n\n\ngit over WSL is about 2 to 3 times slower. Commands which take 7ms on Linux, 60ms on Windows now take 160 or even 200ms. Windows' interprocess communication itself is fucking slow, but the WSL shit ...\n\nThe killer is WSL truncating output of git in many situations. GitGutter reads the file content of a committed file by calling git cat-file. If a file is larger than 1...2kB the content is very often truncated, which causes all following lines to be marked changed or inserted.\n\nGoogling about this issue reveals it to be some kind of bug or limitation of WSL or the way Windows communicates with the linux layer. While there seem to be some workarounds for VS Code and nodeJS I did not manage to find approaches for python. \nNot sure whether its worth putting more effort in it. Honestly, I can't recommend WSL.\n. Support added in 1.8.0. The colors are defined in the color scheme (ayu-...tmTheme).\nIf you are using ST3176 you can create an ayu-mirage.sublime-color-scheme in your user directory with the following content.\n{\n    \"rules\":\n    [\n        {\n            \"scope\": \"markup.deleted.git_gutter\",\n            \"foreground\": \"#F92672\"\n        },\n        {\n            \"scope\": \"markup.changed.git_gutter\",\n            \"foreground\": \"#967EFB\"\n        },\n        {\n            \"scope\": \"markup.inserted.git_gutter\",\n            \"foreground\": \"#A6E22E\"\n        },\n        {\n            \"scope\": \"markup.ignored.git_gutter\",\n            \"foreground\": \"#565656\"\n        },\n        {\n            \"scope\": \"markup.untracked.git_gutter\",\n            \"foreground\": \"#565656\"\n        }\n    ]\n}\nIf you select that Packages/User/ayu-... .sublime-color-scheme ST will overload the color definitions from the original one with those you defined there.\nNote: For older ST builds refer to https://github.com/jisaacks/GitGutter#required-color-scheme-entries. The Command Palette contains a command called UI: Select Color Scheme\nIt lists all available color schemes. It will list ayu-mirage twice if you created the file in your User directory. One of them shows User/ in the second line (I use Theme Switcher which displays the second line better)\n\n. Looks like ST's default UI module hides color schemes of the same name located within the User directory. This makes sense for sublime-color-scheme files as they are merged without respect of their location, but does not work for the \"old\" tmTheme format. \nYou'd need to manually set the \"color_scheme\" setting in your preferences to \"ayu-mirage.sublime-color-scheme\" or use Theme Menu Switcher package. You point to the wrong path.\nUse \"color_scheme\": \"Packages/User/ayu-mirage.sublime-color-scheme\", as your custom file is located there.. Not needed (and not recommended). One of the charming features of the new sublime-color-scheme format is it works just the same way as the Preferences.sublime-settings do. So you just define the stuff you want to modify in a short readable file within your User package.\nIf the original color-scheme is updated the changes are applied normally.\nMoving the whole color scheme to the User file was the way you had to do it in the past as the tmTheme format doesn't support merging several files. The disadvantage is updates of the original file not to apply anymore.\nI just do exactly what I described above. Wrote a short ayu-dark.sublime-color-scheme with the stuff I wanted to change, selected it and that's it.. Therefore I use Theme Menu Switcher which shows the user file.\nEven if you copy the whole thing over, you'd need to rename it as ST won't show it otherwise anyway.. Added a section to the docs about it. See: https://jisaacks.github.io/GitGutter/coloring/. Maybe the publishing needs to be triggered somehow? \nTo check that, I forked the repo but the pages were not published via https://deathaxe.github.io/GitGutter as well. After changing the setting to \"master branch\" hitting save and revert it back to \"gh-pages\" branch the pages got published after some seconds.\nThe state about publishing is even visible at the page now.\n\n. OK.\n. There is no API in Sublime Text to mark or highlight tree items at all. So I guess there is no way to implement this feature at the moment.. The content of ST's view is always cached to disk using unix style line endings (the cache is required to for git diff to work). Therefore it's crucial to checkout the content of the committed file in unix style as well. In the past, this file was checked out to RAM and all line endings were translated to unix style by python.\nIn order to support WSL this is no longer possible. As it turned out WSL truncates large texts when read from a unix process via stdio it was required to let git write the file content to disk directly, forcing it to checkout text with unix style line endings.\nBy setting * -text you mark all files binary and tell git not do any translations. So this is neither a bug nor a regression of GitGutter. In order to support WSL GitGutter needs to relay on git to checkout files with unix style eols. \nIf you why ever need * -text to be applied the only solution is to set \"ignore_whitespace\": \"eol\", in your GitGutter.sublime-settings file or `\"git_gutter_ignore_whitespace\": \"eol\", in your Preferences or Project settings.. GitGutter does not write to that file at all.\nGitGutter does nothing else but running normal git commands like git cat-file, git ls-files, ... .\nIt's git which sets/resets locks each time it accesses the index to ensure only one running git instance to alter the index at a time.\nTherefore GitGutter sets the environment variable \"GIT_OPTIONAL_LOCKS\": 0 to tell git to omit as much unneeded locks as possible. But this behavior was added in one of the recent >2.14 versions and therefore is ignored by your quite old one. \n. GitGutter sets \"GIT_OPTIONAL_LOCKS\": 0 env to ask git to not lock the index as discussed in #506, already. This requires a quite recent built of git to work. Can't remember the version which starts supporting it. I use ST as git editor, too. The only situations I sometimes run into trouble are caused by ST's auto-reload feature, which locked files git wants to (re)move.\nDo you have several views open which show files being modified by the rebase operation?\n\nmy closing the git-rebase-todo no matter how long I wait. \n\nThis might happen as closing the git-rebase-todo causes a view with file of the repository being activated, which triggers a status update. Means GitGutter runs some git commands for that file.\n. The colors are defined in the color scheme. So this is what needs to be modified. GitGutter's Documentation contains a dedicated section describing briefly the way how to modify the gutter icon coloring.. As the support info display the correct git version, I wonder why it should not work.\nThe error message you see is displayed if calling git --version wouldn't return a valid version string which can be matched with a regex. This normally means git was not found or the command points to something else.\nIf you can run git from command prompt it is not required to configure the git_binary setting.\nGitGutter cb59a4a says you directly pull from master? Is it in sync with upstream?\nI honestly never tried with git older than 2.10 on Windows. Maybe some decoding issue of git's output. No idea. I always run git for windows without any special setups.. Could you try to add \"debug\": true to your GitGutter.sublime-settings file and have a look for some maybe more detailed error messages in the console?. Just added a little bit more debug info printing. Can you please pull from master and restart ST? Let's see what it says, then.. I was faced to such an issue last year ago. Suddenly it took git --version 5s to return the version. It should not take longer than 50 or 100ms. (On linux it takes only 2 .. 7ms!!) As git --version must be called synchronously as the TextCommands rely on it. ST freezes until the process call returns, which is the reason for the timeout. I hesitate to increase the value too much.\nSeems to be a Windows and/or AntiVirus issue. I updated AV software and everything was fine again.\n. Increased the timeout to 1 second. More would be too annoying. Git must return a version within 50 to 100ms on Windows in normal situations. Maybe we find a better solution to check for git working properly in the future, but at the moment nothing more can be done.\nTherefore I close the issue.. > Such commits are created once by 1000 commits for example\nThis was unimportant from a developers point of view as if such a function exists it would need to work even if such comments were added/modified in each commit. Otherwise you'd find users complaining about it not to work for sure.\nCommit messages in general are bound to certain file changes, which makes many ideas of your FR hard or impossible to implement using existing git concepts or functions.\nEven if someone was willing to add such kind of sophisticated annotations to a commit message, the line and column numbers would be valid for this particular commit only. If content was added or removed to a file before such an annotated line in a later commit, those annotations are automatically driven invalid or would require an automatic update in the new commit message. Means highlighting them in the current version of the text file would be impossible without adding a sophisticated logic to track code changes and keep them in sync with the annotations.\nAdding/deleting/editing annotations only wouldn't change a file but only the (which?) commit message and therefore not allow making a new commit. One would need to edit an existing commit message, which manipulates history. If those commits were pushed upstream already, it was even a no-go.\nHighlighting annotated pieces of code would require to run a blame for the whole file and parse all the messages to finally add some sublime.Regions to markup the code. They'd need to be kept up to date after each file manipulation - even if not yet saved or committed.\nGitGutter started to display file modifications in the gutter. All functions added over time are based on existing information, concepts and functions which are already implemented in git. GitGutter just displays  existing information or makes use of existing functions.\nThis FR goes far beyond that by adding additional logic to scan commits and parse their messages to extract certain tags which must play smoothly with all file changes.\nThis proprietary functionality would work for ST with GitGutter only. The information were useless for anybody working with other code editors or IDEs. I personally feel uncomfortable with the idea of storing annotations/comments in a separate location. \nLong sentence short: I don't think such a sophisticated functionality is within the scope of GitGutter. It was better implemented as a separate plugin.\n. GitGutter just runs git blame if the active line changes and calls an API function to add a phantom then. It does not interact with the find feature or actively removing any highlighting.\nIt is ST removing the find highlighting if a phantom is added or removed.\nNothing I can do to fix it from plugin side.. ### About word wrap\nIt is a known issue of phantoms to not play correct with that feature.\nTherefore the line annotation is set to \"auto\" by default, which should disable it if word wrap is enabled in your document. Maybe this logic does not work in your setup?\nAbout user-/project-/syntax-/view-specific settings\nPlease refer to the first paragraphs of http://jisaacks.github.io/GitGutter/settings/ to learn how to handle user-settings, project-settings or per-view-settings.\nYou can also use PackageDev to automatically receive completions for valid settings keys.\nAll settings need to be prefixed with git_gutter_ to be placed in user-/project-/syntax-/view-specific settings.. The issue is caused by ST's core and can't be fixed by GitGutter. Therefore line annotations are disabled in distraction free mode for now.. ST want's the text position to know where to add the phantom. The only way to add the phantom is therefore to define the position of the linefeed to add a text. The spacing is then added via the padding attribute in the CSS of the underlying minihtml.\nTherefore both suggestions you made are not possible with ST api.\n\nphantoms can not start later than with the linefeed\nphantoms can't be defined as click through\n\nOne could try to define the space between the eol and the beginning of the text as link, but this would always change the mouse cursor on hovering.\nClicking does not allow dragging or start a selection anyway.. This was the least possible. Wouldn't enable drag select though.. While normal clicks could be handled to set the cursor to the eol, working with multiple carets could not be handled properly as modification keys such as ctrl are not visible to phantoms.\nIntroducing a link would not really fix anything properly in the end. It doesn't feel much better. This issue is to be fixed by ST core by properly handling margins of phantoms to allow click through always or by flag.. 1. The spacing of line annotations is actually achieved by a margin-left CSS property. Unfortunately this margin does not allow to click through.\n2. Not possible as the positioning is done by text point. The most right position a phantom can be added to is the line feed. Otherwise the phantom would appear at the beginning or within the next line.\nBelieve me: If I knew about a proper solution I would have implemented it already.. To completely disable line annotations you'd need to set \"git_gutter_show_line_annotation\": false in your Preferences.sublime-settings.\nAnyway I wonder what causes the line shift. With \"git_gutter_show_line_annotation\": \"auto\", the annotations should be disabled, if word_wrap is detected or draw_centered is true, which is the case in distraction free mode. These are known situations causing this kind of shift or misplaced phantoms.\nShifting lines are indeed annoying and should not happen.. Just found looking at the wrong settings object. Therefore the draw_centered is not working as expected. Will fix that.\nIf you open the console with this view being open and enter the following commands one after the other, what do they return?\n```\nview.settings().get('word_wrap')\nview.scope_name(0)\n```\n. Author and date are displayed in the status bar by default. ST doesn't provide an API to add status bar items in an area of fixed size.\nGitGutter uses jinja2 to render all of its status bar content. You could try to reserve fixed number of characters for each element by using jinja2 templates. But this will work properly only, if you use a UI font of fixed width.. Yes and no.\nYes - the issue was hijack by @squallstar and I answered his question.\nNo - the issue was not closed because of the hijacked issue to be fixed but because I completely disabled line annotation for uncommitted lines for now. Sorry but I am too lazy to add another option for it now. \nThe issue was automatically closed by merging the fix. Click the commit hash link in the closing message for more info.. Please refer to http://jisaacks.github.io/GitGutter/coloring/#user-defined-color-scheme to learn how to change the color of the annotation.\nAnnotations are scoped as a special kind of comments - \"comment.line.annotation.git_gutter\". The color and font-style is to be defined by a color scheme by adding a rule for this scope.\nOther styling via CSS wouldn't make any sense as basically anything would break the inline text.. > my lines are 1 or 2 pixels bigger when the annotation\nI guess you've set line_padding_bottom and line_padding_top to 0?\nCan reproduce the issue with these settings. Seems like ST's default CSS adds some padding/margin, which cause the phantom to be higher than the line.\nWill fix it.. GitGutter provides the update message to briefly announce changes, new features or provide some infos about possible breaking changes, which might require a user to change settings etc.\nThe messages can't be disabled by GitGutter without completely dropping that feature for all users. You'd therefore need to open a feature request to Package Control to ask for a setting to disable update messages.. The update message of the release which introduced that feature clearly described the setting to disable this feature.\nUsage, settings, ... are described at http://jisaacks.github.io/GitGutter. \nThe link to that doc can be found in the README of this repo.\nLine annotation settings are described here:\nhttp://jisaacks.github.io/GitGutter/settings/#line-annotation\nOr just open Preferences: GitGutter Settings and look for \"line annotation\" in the left pane.. This can be achieved easily with the power of jinja2 already. Just enter {{line_commit[:7]}} to get only the first 7 chars printed.. Nope. Icons havn't been changed for ages.\nAccording to the screenshot I'd guess the actual (small) value of the line_padding_top, line_padding_bottom and a maybe small font_size settings causes GitGutter to use the \"space-saving\" alternative delete icon.\nIf the line height drops below 16px (in 96dpi) a smaller icon is used automatically as the normal arrows might not fit into the line or would leave too few space. This behavior was introduced years ago.. I always run the latest versions. The displayed icon is not bug, there is nothing broken, it is just an alternative icon, which is used for deleted hunks if the line height is too small (<16) to show the centered arrows.\nThe following settings e.g. will result in the line height to drop below 16 and cause the small deleted icon . It works with any ui_scale value the same way.\n\"font_size\": 10,\n    \"line_padding_bottom\": 0,\n    \"line_padding_top\": 0,\nIf this behavior has changed for you with recent builts of ST3 without changing any settings it must be related with ST's change to use \"logical pixel sizes\" which were introduced by the recent high-dpi changes. They might result in the line height being calculated logically correct for any screen resolution now.\n. 1. To repeat myself another time: Those icons (in the screenshots) are not meant to be centered!\n2. Your most recent screenshot shows an core issue with not correctly scaled images, which a plugin (GitGutter) can't fix. A plugin provides just a set of images for different resolutions: (16x16px for 96dpi, 32x32px for 4k, 48x48px or 8k screens). It is ST's task to scale the images correctly to avoid overlapping, which seems not to work for certain combinations of screens and values for the already mentioned settings.\nIt is possible that icons even have a gap, which is not meant to be there.\n\nThings get even worse with word wrapped lines.\n\nNote: settings provide enough vertical space to display the centered \"_arrow\" icons!\nThis is no GitGutter issue and there is no solution from plugin side.. This should happen with any phantom being added to such a line via any plugin as phantoms minimum height requires a positive padding value. All padding of phantoms was removed with 1.9.4 to avoid this issue with  line_padding_bottom/top: 0. But I guess there is no way to fix it for negative values.\nSorry buddy but this is how phantoms just work. Nothing a plugin can do against it.. Sorry, but the bump is useless. This issue can't be fixed by GitGutter as stated with the \"not possible with Sublime API\" label.. A plugin can't influence how phantoms change the content of a view. Phantoms are canvas objects of html content, which are injected into the normal text content at a predefined text position. I made sure to remove any margin or padding from that html objects to avoid any kind of extra spaces around the text, which would cause the phantom to exceed the normal line height. This is all a plugin can do.\nWhile working at the line annotation feature a couple of bugs and limitations with the phantom system were identified, which all need to be fixed by the coredevs @wbond or @jps. \nI tried my best to file detailed issue descriptions about everything I found.\nWe need to hope and wait.. GitGutter already priories bookmarks by the protected_regions setting, which contains all scopes which GitGutter should not overwrite gutter icons for.\nIf a line is occupied by a region (e.g. bookmark), GitGutter does not add another region to it, which would probably 2 icons to fight against each other.\nIf a bookmark is added to a line, which is already occupied by GitGutter, the behavior is undefined. In some cases the new bookmark gutter icon wins and is rendered, in some others it not. As GitGutter can't handle other plugin's functions and interactions with the regions API there is no way to work around that issue.\nGutter icon priority e.g. by region name or something like that was requested and discussed a couple of times in the past already.\nGutter icon fighting is a general issue for all plugins making use of it.. Line annotations are phantoms with the LAYOUT_INLINE flag which are added to the very last character of a line, so they are expected to always render after a line. It works well, if word wrapping is disabled. Therefore the default setting \"auto\" disables line annotations if word wrapping is enabled.\nWith \"git_gutter_show_line_annotation\": true line annotations are added even if word wrapping is enabled and might cause the line annotation to be displayed at the next line as ST includes it into its word wrapping. This behavior can't be changed.\nThe cursor behavior is completely handled by ST core. Adding phantoms to empty lines makes the cursor behave badly as well, hence no annotations are displayed then. If you don't like the cursor's behavior you would need to file an issue at https://github.com/SublimeTextIssues/Core/issues. It can't be fixed from plugin side.\nThe \"blame\" information are gathered once and published as line annotations and can be added to the status bar. Both use jinja2 to enable the user to fully customize the output. Creating a dedicated plugin would therefore reduce the flexibility of status bar customization and require the whole infrastructure of calling git and parsing the output to be copied and maintained twice. Not worth the effort.\nIf the line annotations cause issues, you can disable them and try \"Git Blame\" package, which adds phantoms with the same info to the next line via key binding.. You understood correctly. The current solution is the best possible with the available core functions.\nAll \"bugs\" related with \n\njumping cursors\nunclickable whitespace after line end\nline height shifts if phantoms are added with very small lines\nline annotation being wrapped to the next line\n...\n\nare caused by the underlying phantom API being used to render line annotation.. Thanks for your effort.\nI've pulled your changes and did some cosmetic changes:\n\npossible values in sublime-settings should be double quoted hence PackageDev uses them for auto-completion.\nAdded the new setting to the Preferences.sublime-settings-hints so PackageDev marks it a valid setting in Preferences\nAdd an entry to the documentation.. Thanks.. Can you checkout #529 please and try whether it fixes your issue and does not introduce any new side effects?. Fixed in 1.9.5. Fixed in 1.10.0. Does ST's console tell you anything else? Some traceback messages etc.?\n\nI personally never experienced this issue - not on Windows not on Linux. Don't know anybody who has a Mac by hand. No matter which folders/files I create - untracked or not - everything is fine.\nI wonder which kind of issue could crash the whole plugin_host.\nYour git is quite outdated. Did you consider updating?\nThe oldest version I personally tried GitGutter with was 1.10.0. Never had an older one in use.. Meant 2.10.0. 1. The infos provided by GitGutter are:\nrepo/branch, File is modified X+, Commit  infos\nThe Line L, Column C is added by Sublime Text, which makes it impossible for my knowledge to add anything else behind.\n\nGitGutter is meant to display information about the git repo. Can't see how the current class method is related with that task or why it conflicts with SublimeFunctionNameDisplay or any otherplugin used to provide infos about the current context. The linked plugin just uses ST's scopes to identify the context, which is not related with git in any way.. The run_blame basically was intended to be used as command. Binding it to the settings, which are needed for the event handling is actually an oversight. It should work the same way as the show_diff_popup.\n\nDon't think it makes much sense to run blame on multiple lines at a time. Handling that would need much more effort to parse git's results. Displaying tons of blame messages at the end of a line would be confusing anyway. The annotation is just meant for a quick info. For anything else GitSavvy's blame or Sublime Merge's blame function are much more suitable.. A first step was taken in the most recent commit on master, but it does work properly with Compare Against HEAD at the moment. Need to make use of ST's set_reference_document() API to keep the mini diff in sync if an older revision is selected via Compare Against..... Fixed in 1.10.0. Can't reproduce. Works well on my Ubuntu 18.04 VM.. Did you try to set \"debug: true\" in GitGutter.sublime-settings?\nWith some luck it may provide some more infos about the reason.\nIs the string from the \"Results:\" part (Gutter output \"does not match\" git diff) from console?\nWhat distro are u using?. The only thing I can see from your logs is an unsaved view and a \"test.log\" to be open, which is not within the repository. GitGutter itself does not create a message which matches the git diff != GitGutter \"gutter\" marks style.\nI absolutely can't find any entry point to start debugging. Whatever I try it works fine here on both, Windows and Linux.. Fixed in 1.10.0. Thank you very much. \nGuess I need to clarify the following statement:\n\n\"seems to become deprecated / obsolete for ST3200+ in its current form\"\n\nIt does not mean, we don't need to continue with GitGutter. As some of GitGutter's basic features were moved to ST core, I just wonder whether GitGutter could be made a bit lightert to avoid duplicated work and reduce CPU usage a bit (if it even matters).\nST's mini diff does a good job. My hope during the last dev cycle was to be able to leave all the diffing while typing to ST as it is much quicker and cheaper as calling git diff all the time.\nGitGutter could then concentrate on the additional features, like line annotations, diff popup, status messages etc. Unfortunatelly ST does not yet add diff markers to the minimap, wich I don't want to loose. So any bigger changes would need to wait anyway.\n. This is expected behavior if GitGutter runs on Sublime Text 3189+ with \"mini_diff\": true or \"mini_diff\": \"auto\" in order to not interfere with the new Incremental Diff feature of Sublime Text. In this situation GitGutter does not add gutter icons anymore to leave the space to other plugins like SublimeLinter.\nWe don't need two indicators about modifications at a time.\nGitGutter still works in the background to add modification indicators to the minimap as @sublimehq decided not to render them using the incremental diff feature.\nIf you prefer GitGutter's file modification icons in the gutter, you need to set \"mini_diff\": false in your Preferences.sublime-settings.\nNote: Same applies to the status bar. If \"show_git_status\": true is set in the Preferences, no repo name or branch name are printed by GitGutter.. I guess this is a question of taste. Basically ST3.2 introduces the most basic functions of GitGutter:\n\nmodification indicators in the gutter\nnavigate between modifications using ctrl+, and ctrl+..\nrevert modifications by ctrl+k, ctrl+z.\nST's inline diff feature may replace GitGutter's diff popup.\nstatus bar indicator with branch name and number of modified files in the repo.\n\nWhile GitGutter relies on git to calculate the modifications, Sublime Text uses its own builtin incremental diff algorithm, which might not always return the same result as git does. \nAll builtin actions like navigating or reverting relies on the incremental diff. \nThe pro is: You can revert single words in a line by simply marking them. \nThe contra is: If there are several modifications per line, you must select the line to make sure revert is applied to all of them. \nSame for navigation: While I like ST to select each hunk while navigating, it can be annoying if there are too many interline changes.\nWhat Sublime Text does not offer at the moment is:\n\nGitGutter's \"Compare Against...\" features.\nModification indicators in the minimap\nDiff Popup\nLine annotations\nStatus Bar Text Template\n\nBasically we could create a plugin for ST3.2+ which adds the most valuable features from GitGutter\n\nGitGutter's \"Compare Against...\" features.\nLine annotations\n\nwhile abandoning the ones which are provided by ST itself, which could help reducing CPU usage while editing files.\nBut I am not sure whether this would or should be part of a GitGutter 2.0 release or if it is worth creating a new plugin for dedicated use with ST3.2+.\nI consider the required changes to result in a nearly complete rewrite of GitGutter with the heavy risk of breaking things for users of older ST releases.. I had problems to find a proper name, too. Inline was my first choice, but thought a seperate function could make code a bit cleaner. As there are only two methods using it, inline is fine.\n. You mean it's not required and can be deleted? This is a hint for you, only.\n. Could change it to if ... else ... to ensure truncation. But what happens if an exception is caught? In worst case diff() works with an older version of the git-file, which is likely to be the unchanged if the user did noch change the \"compare against ...\" setting.\nI even thought about checking the active commit to compare against to avoid the git-file being pulled again and again each 5th second.\n. This was my concern, too, but the console shows an Unable to open /C/Apps/Sublime/Data/Packages/User/GitGutter.sublime-settings only, whose origin is not the os.path.exists() funciton. No other traceback or something like that here. Adding the is not None check doesn't change anything.\n. Is there any general guidline to use? I always struggle with myself about how to break and indent such lines correctly to make it look nice. As neither pyflakes nor pep8 complained I guessed it's ok. \nI am not so happy to need the parenthese to make the second line work perfect.\n. Remove blank lines before else or elif only or after \"endif\", too? I think to have read something about blank lines after an indention block in some style guidline - google or so. But I am not quite sure and see people handling this very differntly. For single lined statements, you are right. This looks a bit disconnected, but with larger blocks of code?\n. I was sticking too much to this Side-By-Side settings feature, that I did forget to test with simply creating a new file to see whats happening. Of course you are very right with that :-)\n. You mean that?\npython\nfile_name = self.view.file_name()\non_disk = file_name is not None and os.path.isfile(file_name)\n. This was just a wrong assumtion. I intended to prevent smaller files from being written to disk but kept in file buffer, but this can obviously not work. Will revert that.\n. OK, but this makes usage of mkstemp totally obsolete. I could use window-id and view-id to create a unique tempfile name.\n. The basic idea / hope is that python's tempfile handles temporary files efficient on each platform, but if not it does not make sence to open a file to get its name, close it and then reopen it again. Sure this will happen once only, but would be useless if tempfile has no advantages.\nI keep using tempfile with the hope python will make of platform functions handle tempfiles optimal on each platform. As the file is updated very frequently with live_mode: true I just want to avoid real disk usage too often. Windows has the feature to keep files created with the \"TEMPORARY\" attribute in RAM rather flushing them to disk.\nI am concerned of scenarios, where users edit huge code files of several MBs, which are written to disk second after second, which in the end might help wearing out SSDs. Maybe a bit too paranoid, but I think it's worth thinking about, anyway. I would like git diff to support stdin to provide the view's content to avoid tempfiles at all.\n. Regression! I returned git exit code in the results in the reverted changes, when running git diff directly against the file. This is obiously wrong and you are right as usual.\n. Ok, not a big deal. I removed it only, because in other argument lists last lines have no comma, too.\n. Actually this pull request breaks at least the already applied pull request #336 and maybe more.\nOther still open pull requests would break, too.\nThis brings neither functionality nor does it fix any bugs, so wait until all other pr's will be merged.\n. pydocstyle wants a docstring here by default.\n. I saw GitSavvy to import only those parts of libraries in some cases, they really needed and thought this might be a good idea in general such as you do with all the objects from git_gutter_compare module. And I expected python to throw an exception anyway, if it would not find STARTUPINFO, but this is wrong. Didn't know python ignores code blocks in if clauses at all, if the condition is not true.\nWill revert this.. The main idea was to make sure the promise is resolved which is ensured by finally now. I started to catch OSError and TimeoutError (which is not supported by python 2.6) as descriped in pythons docs. But when I renamed my git.exe to check what happens if it is not found, I saw several other Exceptions in console because of args[0] == None. I found the  traceback string not very useful here and it always looks like program error, but some of them might be quite usual, so just printing the exception's text only might be enough. This is what GitSavvy does on exceptions with starting git. Of course you are right, OSError should be the only one being thrown here at all, but due to some issues in the settings module, the situation of missing git.exe is not handled and settings.git_binary_path is None which causes Exceptions here. But I think we should handle this in a seperate topic as there are some more things to check with settings.\nThe alternitive might be to put some args checks to avoid Exceptions and catch OSError only, but I thought just catching all is easier and enough.. Are there any drawbacks using formattings? I am quite used to use the + for string concating in other languages, in some it is the only possible one ;-).  PythonSpeed even recommends \"\".join() for concation.\nI am totally with you formatting is the cleanest way with more complex string formatting.\nWe should just decide for one solution, that's rigt. As well as with quotation I think. Most strings have single quotes in the code and I accidently used double quotes here :-/ . After wbond's critics I had a look into some packages providing Main.sublime-menu. All of them provide a caption as well so I found it \"state of the art\" to do so, too, even though the empty menu item might have been an issue in Sublime Text itself. Does it hurt to add it?. r-stein gives the answer and the reason for my change. I never realized this menu entry and had a aha effect, when I saw in in the Main.sublime-menu. The first impression on this menu was just ... those items are missing something. @r-stein your might be right, but must we add GitGutter or is there a more elegant alternitive?. KDiff3 calls it Goto Next Delta, which might used as Goto Next Git Delta, but Goto Next Git Difference sounds good, too. Any further suggestions?. The PR's title should just reflect the title of the Issue, wich brought me to have a look on this file.. As usual you are basically right and maybe all the other devs are wrong with adding the title in there files. As most people do so I expected it a kind of unwritten standard. And even if it might have been a bug in a ST3 built to add empty menu item due to missing title, adding the title would avoid possible issues for sure.\nI already saw some efforts to translate SublimeText by local edited menu files, but I think this is very bad style. IMO this would require a translation tool like gettext or any other solution to handle it on caption text side by core using the english captions as key to lookup the translation. But I would not even try to think of something like that. Imagine you would need to provide transltion for all languages. Challanging, I think.. The point is to show the user what changes are meant. I would never have expected those menu items to represent a function of GitGutter.. And which of all that solutions is agreed by everybody? I ask kindly to finish the discussion on such details quickly as the current small PR's were meant to be the base for two bigger ones, which intend to fix some real open issues and implement some requested features.\nThe % is used in other modules, too. But your last suggestion does not look so bad, too ;-) as I also  try to avoid format strings where possible in other projects.. I expected it to catch anything then, just as I would write except Exception.. This try ... except block is to check, if python 3 is used with fallback to 2 only, isn't it? If any of those imports fails it's most likely due to python 2. If it was due to missing object, it would fail in except block, too, which would cause the whole module not to work, right?. git_binary_path is accessed this way in git_handler, too. Why is it wrong to do it exactly the same way here? And what if load_settings() was not yet run? Nothing. The command is handled as disabled by SublimeText until settings are loaded and git_binary_path is None. I don't see any issues with accessing it this way at all. \nBtw.: ;-) Settings module needs some review anyway, but pleeaase give me a chance to commit the 'Enhancement for compare against' and 'Fix for the gutter icons flickering' first. . Just to ensure I don't miss something:\nsettings.load_settings() is called by git_gutter_settings.plugin_loaded() which itself is called by ST3 as soon as API is ready and on loading the module by ST2. No API call like sublime.load_settings() must be called before this point anyway. So even a getter which tries to load settings would most likely fail at this point anyway. This change activly disables git_gutter command if API is not yet ready and therefore no settings are available anyway and thus prevents running git_handler with an empty args[0], which would cause an exception. SublimeText can fire events, but GitGutter ignores them until ready. And if no git was found at all, GitGutter shows its message box triggered in settings.load_settings() and is disabled then. \nSo seriously: There are very obvious issues with settings and how it stores values and reloads them from the backend files, but I can't see this to be one of them. \nIn the future I could imagine to try to update git_binary_path if git command fails with error 2 to check activly for changed location, but this is not what this PR intends to add.\nThis PR intents to prevent exceptions from resolving the Promise, which is created to run the git process. Issues with the settings module should go to a seperate one, I think.. Yes I did for consistent look to the other ones, but if vertical space is most importand you are right. Will revert those lines.. The idea is to encourage theme devs to add their own git_gutter_popup.css to modify the look of the diff popup. As a result there may be many packages containing this file in the future and merging all of them might lead to unpredictable results.\nBy now git_gutter_popup.css most likely exists in GitGutter package and maybe in User directory. So 2 files are to merge, where user settings overwrite the default settings from GitGutter.\nThis is what I intend to keep but without restricting the location of the css file.\n\nLoad default file from GitGutter package\nMerge in theme specific file to overwrite GitGutter defaults\nMerge in user specific file to overwrite 1 and 2.\n\nIf creating string list and merge by join is better, I am not refuced to change this again. ;-) even though I don't think it makes a big difference with 3 items.. Btw.: Replacing ${package} by the real folder name is used by Annaconda package, too, to make those commands work, even if the package is locally renamed. The only difference is they use $package_folder as variable.. Sure? I somehow liked the gray bar on the left.\nBtw. It quotes the default value from settings file  :-). All blocks quoting default values from settings file should have the same style.\nSo we need to decide whether to use > for all settings which draws them with normal font or use the codeblock to draw them in fixed font width to state it as a special setting.\nI found combinding both would be good, but can revert to one of them.. Sounds good.. ok.. With a second look on it, you might be right.\nI'll change it to code block but without highlighting.. All 4 lines or the file state only?. Interesting feedback :-) as I am looking for some style guides, too, at the moment as some situations are not totally clear to me how to solve correctly. I am always willing to make code as clean as  possible.. But why does SublimeLinter not complain about ?! Hmm.. I checked by setting to true and false in may user settings with success.\nFalse means 0 and therefore hides gutter icons from minimap.\nTrue means 1 and shows gutter icons with default width of 1px as before.\nDid you encounter any functional issues with it?. The width is calculated in number of chars. There is no technical reason for limitation, but 9px seemed a width of gutter markers, which still looked good. 15, 20 or even 30px cover too much text and look somehow ugly. But this is just a personal feeling.. ok.. Have no problem with it. Changed!. Use single quotes, please, to match the default quotation style used in most places / files.. I agree with you in general and never used text, too. Already thought about it, too but was not sure, whether there are people who prefer text. Therefore I kept it. . mdpopups 2.0.0 which is planed to be released in June, will require Sublime Text 3124 anyway.\nAs the wrapper class is obligatory since GitGutter 1.5.0 and supported by mdpopups only if ST 3119+ is installed, we might have issues with earlier builts anyway.\nI will add an announcement to the next release notes / messages about requirements.\nST 3119 is about 1 year old now and it is the first built with nearly complete minihtml support, so I guess it is acceptable to make it a requirement.. > icon issues have been fixed in the newest versions.\nBut is not in 3119+ which will still be supported.. I have no problem to remove it at all. I personally agree with you in all points. Makes code simpler.. mktemp does not touch the filesystem in any way. It just creates the path_name. Using mkstemp()  would cause an issue.. ",
    "stiff": "Then I guess we can close this issue :) Thanks for reply.\n. ",
    "deiga": "I haven't figured out how to add stuff only in the minimap, but basically you can just add sublime.DRAW_EMPTY_AS_OVERWRITE and set the background color according to the type.\n. I don't actually have this problem, my gitgutter icons show up just fine. \n. Yeah, I'm using both plugins. Gitgutter icons replace the the vintage line numbers, which could possibly be a bit awkward if I had a lot of changes in a file.\nIt would be great if the icons didn't cancel out, but I don't see how else it would work.\n. The only problem here is if ST allows us to add a hover overlay, otherwise gitgutter already reads the whole diff, so would be able to do it.\nAlso complex changes might prove problematic..\n. ",
    "wpowers": "+1 for this, I came here intending to ask the same question. Large files would be less challenging to find changes in.\n. Thanks - very cool!\n. ",
    "rafaelcgo": ":+1: as well. Would be a really neat feature!\n. Updated Xcode, xcode-select --install, restarted sublime.\nRemoved and Installed GitGutter.... Still won't work.\nI'm running El Capitan\n. @rchl Tried both with no success. Is there a way to check if GitGutter is finding git_binary, maybe via sublime console?\nI try the git gutter commands but no output is written on the console...\n. @rchl Thanks for the patience... Still not working. It used to work but I think the update crashed it somehow.\nSteps 2 and 3 on video: https://youtu.be/HohNN2HCUYU\n```\nstartup, version: 3126 osx x64 channel: stable\nexecutable: /Applications/Sublime Text.app/Contents/MacOS/Sublime Text\nworking dir: /\npackages path: /Users/------/Library/Application Support/Sublime Text 3/Packages\nstate path: /Users/------/Library/Application Support/Sublime Text 3/Local\nzip path: /Applications/Sublime Text.app/Contents/MacOS/Packages\nzip path: /Users/------/Library/Application Support/Sublime Text 3/Installed Packages\nignored_packages: [\"Vintage\"]\npre session restore time: 0.427512\nfirst paint time: 0.509015\nstartup time: 0.510583\nreloading plugin Default.auto_indent_tag\nreloading plugin Default.block\nreloading plugin Default.comment\nreloading plugin Default.convert_syntax\nreloading plugin Default.copy_path\nreloading plugin Default.delete_word\nreloading plugin Default.detect_indentation\nreloading plugin Default.duplicate_line\nreloading plugin Default.echo\nreloading plugin Default.exec\nreloading plugin Default.fold\nreloading plugin Default.font\nreloading plugin Default.goto_line\nreloading plugin Default.history_list\nreloading plugin Default.indentation\nreloading plugin Default.install_package_control\nreloading plugin Default.kill_ring\nreloading plugin Default.mark\nreloading plugin Default.new_templates\nreloading plugin Default.open_context_url\nreloading plugin Default.open_in_browser\nreloading plugin Default.pane\nreloading plugin Default.paragraph\nreloading plugin Default.paste_from_history\nreloading plugin Default.profile\nreloading plugin Default.quick_panel\nreloading plugin Default.run_syntax_tests\nreloading plugin Default.save_on_focus_lost\nreloading plugin Default.scroll\nreloading plugin Default.set_unsaved_view_name\nreloading plugin Default.settings\nreloading plugin Default.show_scope_name\nreloading plugin Default.side_bar\nreloading plugin Default.sort\nreloading plugin Default.swap_line\nreloading plugin Default.switch_file\nreloading plugin Default.symbol\nreloading plugin Default.transform\nreloading plugin Default.transpose\nreloading plugin Default.trim_trailing_white_space\nreloading plugin CSS.css_completions\nreloading plugin Diff.diff\nreloading plugin HTML.encode_html_entities\nreloading plugin HTML.html_completions\nreloading plugin 0_package_control_loader.00-package_control\nreloading plugin 0_package_control_loader.01-pygments\nreloading plugin 0_package_control_loader.50-markupsafe\nreloading plugin 0_package_control_loader.50-python-markdown\nreloading plugin 0_package_control_loader.50-pyyaml\nreloading plugin 0_package_control_loader.51-python-jinja2\nreloading plugin 0_package_control_loader.55-mdpopups\nreloading plugin Better CoffeeScript.CoffeeScript\nreloading plugin Fix Mac Path.FixPath\nreloading plugin Gist.gist\nreloading plugin Gist.helpers\nreloading plugin Gist.request\nreloading plugin Gist.settings\nreloading plugin Git.git_commands\nreloading plugin GitGutter.git_gutter\nreloading plugin GitGutter.git_gutter_compare\nreloading plugin GitGutter.git_gutter_events\nreloading plugin GitGutter.git_gutter_handler\nreloading plugin GitGutter.git_gutter_jump_to_changes\nreloading plugin GitGutter.git_gutter_popup\nreloading plugin GitGutter.git_gutter_settings\nreloading plugin GitGutter.git_gutter_show_diff\nreloading plugin GitGutter.git_helper\nreloading plugin GitGutter.promise\nreloading plugin GitStatusBar.git_status_bar\nreloading plugin Glue.init\nreloading plugin Glue.Glue\nreloading plugin Glue.GlueBrowser\nreloading plugin Glue.GlueCmds\nreloading plugin Glue.GlueIO\nreloading plugin Glue.GlueSidebarOpener\nreloading plugin LESS.less_completions\nreloading plugin Markdown Preview.helper\nreloading plugin Markdown Preview.markdown_settings\nreloading plugin Markdown Preview.markdown_wrapper\nreloading plugin Markdown Preview.MarkdownPreview\nreloading plugin Package Control.1_reloader\nreloading plugin Package Control.2_bootstrap\nreloading plugin Package Control.Package Control\nreloading plugin RSpec.OpenRSpecFile\nreloading plugin RSpec.RSpecCreateModule\nreloading plugin RSpec.RSpecDetectFileType\nreloading plugin RSpec.shared\nreloading plugin SideBarEnhancements.SideBar\nreloading plugin SideBarEnhancements.SideBarAPI\nreloading plugin SideBarEnhancements.SideBarDefaultDisable\nreloading plugin SideBarEnhancements.Stats\nreloading plugin SublimeLinter-rubocop.linter\nSublimeLinter: rubocop linter loaded \nreloading plugin SublimeLinter-ruby.linter\nSublimeLinter: ruby linter loaded \nreloading plugin TrailingSpaces.trailing_spaces\nreloading plugin Zen Tabs.TabsWorker\nreloading plugin Zen Tabs.ZenTabs\nreloading plugin Zen Tabs.ZenTabsTest\nreloading plugin Guard.guard\nreloading plugin SublimeLinter.commands\nreloading plugin SublimeLinter.sublimelinter\nplugins loaded\nLimit: 20\nFull path: False\nHighlight: True\nSublimeLinter: debug mode: on \nSublimeLinter: temp directory: /var/folders/05/p3_dh_4j6t11cp87vlc55zv00000gp/T/SublimeLinter3------- \nSublimeLinter: user shell: /bin/bash \nSublimeLinter: computed PATH using /bin/bash:\n/usr/local/bin\n/usr/local/heroku/bin\n/Users/------/.rvm/gems/ruby-2.0.0-p481/bin\n/Users/------/.rvm/gems/ruby-2.0.0-p481@global/bin\n/Users/------/.rvm/rubies/ruby-2.0.0-p481/bin\n/usr/local/heroku/bin\n/Users/------/bin\n/usr/bin\n/bin\n/usr/sbin\n/sbin\n/usr/local/bin\n/usr/local/heroku/bin\n/Users/------/.rvm/gems/ruby-2.0.0-p481/bin\n/Users/------/.rvm/gems/ruby-2.0.0-p481@global/bin\n/Users/------/.rvm/rubies/ruby-2.0.0-p481/bin\n/Users/------/bin\n/Users/------/.rvm/bin\n/Users/------/.rvm/bin\nSublimeLinter: ENV['GEM_HOME'] = '/Users/------/.rvm/gems/ruby-2.0.0-p481' \nreloading settings Packages/User/Preferences.sublime-settings\n``\n. @rchl  No output. The onlyGitGuttercommand that has any output isShow Comparing Against` which displays ' on a modal box \"GitGutter is comparing against: HEAD\"\n:(\n. @rchl It's working again. Don't have a clue what happened, but after an OS restart GitGutter has come back to life.. ",
    "Booyanach": "Would love this feature, I find it slightly odd that the API does not support this since some jslint plugins report on the minimap where the errors are.\n. ",
    "davidfooks": "Would it be possible to highlight the entire line in the minimap? (instead of just the border). I can't really see the pixel wide line with my colour scheme \"Slush & Poppies\" (even if I change it to bright pink it's quite hard to spot).\n. ",
    "notmyname": "It was batamire's comment on that thread that led to this patch.\n. ",
    "martindale": "I've switched over to the non_blocking setting and am still experiencing crippling lag on ST3, unfortunately.  Is there something I can do to help you test this?\n. ",
    "despairblue": "I think GitGutter ignores all user settings. If I just copy the default settings and change anything from false to true or the other way around I get:\nTraceback (most recent call last):\n  File \"/opt/sublime_text_3/sublime_plugin.py\", line 526, in run_\n    return self.run()\n  File \"git_gutter in /home/despairblue/.config/sublime-text-3/Installed Packages/GitGutter.sublime-package\", line 35, in run\n  File \"view_collection in /home/despairblue/.config/sublime-text-3/Installed Packages/GitGutter.sublime-package\", line 41, in untracked\nKeyError: '/home/despairblue/.config/sublime-text-3/Packages/User/GitGutter.sublime-settings'\nI tried to change live_mode and non_blocking to no avail.\n. Oh and I tried to print something in on_modified and on_modified_async with non_blocking set to true. Result: it's running on_modified.\nSo there seems to be a bug in the view_collection.py.\n. ",
    "somlor": "gotcha. ok, well let me know if you need me to do any testing for this. i'm guessing i could patch git_gutter_handler.py somewhere?\n. sorry, how to i pull a stack trace for this? \nfwiw, if i run sublime from within gnome (applications > programming), this error is never output to the sublime console. but if new.txt is already open in a tab when sublime is loading, this error appears in the console:\nTraceback (most recent call last):\n  File \"./sublime_plugin.py\", line 195, in on_modified\n  File \"./sublime_plugin.py\", line 154, in run_timed_function\n  File \"./sublime_plugin.py\", line 194, in <lambda>\n  File \"./git_gutter_events.py\", line 14, in on_modified\n  File \"./view_collection.py\", line 19, in add\n  File \"./git_gutter_handler.py\", line 45, in reset\nAttributeError: 'NoneType' object has no attribute 'run_command'\nthe original message:\nfatal: Path 'new.txt' does not exist in 'HEAD'\nonly shows up in my terminal if i run sublime from that same terminal like:\n$ subl &\n. ",
    "jiyinyiyong": "Same here, Seconds after I ran touch yinwang0/13-03-07.1.md, it prints in my terminal:\n\u27a4\u27a4 fatal: Path 'yinwang0/13-03-07.1.md' exists on disk, but not in 'HEAD'.\nfatal: Path 'yinwang0/13-03-07.1.md' exists on disk, but not in 'HEAD'.\nfatal: Path 'yinwang0/13-03-07.md' exists on disk, but not in 'HEAD'.\nAnd it prints error every time I switching to that buffer by a click.\nSeens nothing wrong in Sublime's console:\n```\nplugin init time: 3.08837\nloading bindings\nloading pointer bindings\nfound 1 files for base name Default.sublime-theme\ntheme loaded\napp ready\npre session restore time: 6.68927\nusing gamma: 1 (err: 0)\nstartup cache, total files: 118 cache hits: 118\nstartup time: 6.98839 (package setup was not run)\nloaded 1075 snippets\nPackage Control: Installing 3 upgrades\nPackage Control: Upgraded CoffeeScript to latest git commit\nreloading /home/chen/.config/sublime-text-2/Packages/GitGutter/GitGutter.sublime-settings\nReloading plugin /home/chen/.config/sublime-text-2/Packages/GitGutter/git_gutter.py\nReloading plugin /home/chen/.config/sublime-text-2/Packages/GitGutter/git_gutter_events.py\nReloading plugin /home/chen/.config/sublime-text-2/Packages/GitGutter/git_gutter_handler.py\nReloading plugin /home/chen/.config/sublime-text-2/Packages/GitGutter/git_helper.py\nReloading plugin /home/chen/.config/sublime-text-2/Packages/GitGutter/view_collection.py\nfound 9 files for base name Main.sublime-menu\nPackage Control: Upgraded GitGutter to v2013.03.06.09.17.02\nPackage Control: Upgraded PlistJsonConverter to latest git commit\nreloading /home/chen/.config/sublime-text-2/Packages/User/Package Control.sublime-settings\nWriting file /home/chen/code/page-site/_self/styl/global.styl with encoding UTF-8\nWriting file /home/chen/code/backup/yinwang0/13-03-03.3.md with encoding UTF-8\n```\n. ",
    "gwenzek": "Since build 3116, there is an \"hover\" api allowing to display a popup when overing over the gutter or any part of the code. See https://forum.sublimetext.com/t/dev-build-3116/21148 for more details.\nThis would be a really great addition to this very good plugin.\n. Just to be clear, it wasn't possible when the issue was opened 3 years ago.\nNow it is thanks to PR #296.\n. ",
    "rchl": "Hovering over the gutter to show the changes is already implemented.\n. Can't do much about it if it doesn't happen anymore and there are no repro steps. Closing.\n. IMO this adds too much complexity and settings that maybe 0.001 of users would bother to tweak.\nCurrent master has async invocations so the point of this improvement is made mostly moot now (ST2 still uses sync invocations but I don't think there is any point in actively supporting ST2 anymore anyway).\n(And this pull request is few years old so probably the author doesn't have interest in it anymore.)\n. With async invocation I don't think this is worth doing anymore. Also it adds quite a lot of unneeded complexity. If you strongly believe that this should be integrated then feel free to argue :)\nThanks for the work though.\n. Seems like a problem with wrong git_binary path. Closing.\n. Seems like a support question and looks like cause by wrong git_binary path. Closing.\n. No feedback for a long time. Closing.\n. Please file this bug again if it still reproduces after all the changes that were done in the meantime. For now closing.\n. Unlikely to still be a problem after 3 years and many changed. Closing.\n. I doubt you still have this problem after 3 years so closing.\nFeel free to open new issue if it's still the case and we can try to diagnose it.\n. It shouldn't cause GitGutter to slow down anymore as git runs asynchronously.\nShould there still be a configurable limit through? I'm not sure it is needed.\n. Very old report and probably doesn't happen anymore to you so will close. Please report new bug if you manager to reproduce. :)\n. As said, this is not a bug. Closing.\n. > Removed and Installed GitGutter.... Still won't work.\n@rafaelcgo Have you followed suggestion in the Readme to try SublimeFixMacPath?\nEventually just manually setting git_binary to point to git binary.\n. @rafaelcgo If it couldn't find the binary then actually it should show a error dialog. So I guess that part might be working.\nTry:\na) Restart sublime and open the console. Make sure that there are no errors related to gitgutter (you can paste here if you want).\nb) Make sure that git gutter package is not disabled (Package Control: Disable Packages should list it).\nc) Make sure that you are trying it out on a file that is tracked by git.\n. @rafaelcgo that looks quite tricky to figure out.\nOne last thing you should check is whether you get any error in the console on invoke one of 'Git Gutter: Compare Against... commands. These commands don't catch exceptions like the main functionality, so it might show the problem.\nIf not, I don't think I have any more suggestions. Would probably need to debug by adding some debugging code...\n. I guess protected_regions options should help here.\nBut maybe adding shortcuts to toggle GitGutter still would be of value.\n. It's essentially a dup of #161 so will resolve.\n. No feedback for a long time. Closing.\n. A lot has changed since 2014 and non_blocking setting was recently removed so probably this is not an issue anymore. Closing.\n. If you still have the issue (unlikely after all these years), please check memory and cpu usage to see where the issue is. Are there many git processes created or sublime is using more memory than expected, or...?\n. But GitGutter recalculates diff both when file is modified and when it's focused. Can you see why is that not happening for you? Are you using some non-standard settings that disable most of those actions?\n. @KevinLi Can't see your pull request :)\n. I think it still exists looking at the code. There is no rewriting of encoding from 'Hexadecimal' to 'hex'.\n. Dup of #230.\n. Issue with wrong git_binary path. Readme also mentions to install a package that should fix it without modifying git_binary setting.\nClosing. \n. Output returned by git must not be what GitGutter expected. GitGutter runs this command:\ngit for-each-ref --sort=-committerdate --format=%(subject)\\a%(refname)\\a%(objectname) refs/heads/\nIf you still have this problem (unlikely after a year) then you could try running this command manually in the repo and paste the output.\n. Please comment in #290 if you still see this issue.\n. With what content do you reproduce that and what encoding the file is in?\nI've tried with this content in a file encoded with utf8:\n```\n$ git log --oneline\n93a1866 \n$ git --no-pager log --oneline\n93a1866 \ud83d\udc3c\n```\nAfter committing no lines appear as changed.\n. From what I can understand from linked forum thread, the problem boils down to system triggering a drag of the tab when sublime's UI gets blocked during tab switch. If that is the case then #321 should help here.\nIf you still can reproduce this problem then please check once again when new version gets released (>1.3.0).\n. Please re-open for now. That rewrite doesn't introduce async invocations yet. That will come next.\n. More advanced users should feel free to test the fix for this in #321.\n. #321 integrated. Should be resolved in versions newer than 1.3.0.\n. I can't reproduce this problem on Windows but I wonder if it might have been a problem with GitGutter blocking the UI on tab focus and blocking cursor placement due to this. #321 should help if it is still a problem.\n. I'll assume that async invocations fixed this for those users who had the problem. At least in ST3.\nFor ST2 I don't think it's worth spending time on it.\n. Sorry but I can't see what can be done about it. There is nothing in this package than can make it crash. The only thing that can crash is the git itself (taking down plugin host with it) so the problem is not really on the package side. Should maybe try newer git version or something.\nIf this crash was more likely to be triggered with focus_change_mode: true then it might be that it will be better with current master which uses async invocations. But if git is crashing then not much can be done about it here.\n. Personally I think author can do whatever he wants really, but if he will piss off users, he will probably make them move away from the plugin, or fork it, and in the end loose on both fronts.\nI'll close it as it's not a bug. There is still #237 open with some related discussion.\n(Disclaimer: I'm not affiliated with the author :))\n. I think it's unacceptable that such issue wasn't yet fixed, even after the pull request was ready more than a year ago. Slowing down editing experience not only is bad for the user but also for the image of the editor itself. People will not realize what's the reason for the freezes and blame the editor.\nI'm working with local but big repo and switching between files and immediately trying to move the cursor freezes for a split second, which is already annoying enough for me.\nI'm not sure if @entombedvirus is still around but I've taken his changes and rebased on latest master. Also rewritten Promise implementation a bit and fixed some style issues. Unfortunately I had to squash all the commits as it would be too difficult to rebase with original commit structure. I'm not sure if there is any interest in such commit as it would be hard to review... Splitting it in smaller chunks would be rather time consuming and not sure how feasible as changes kinda depend on each other.\nI think @entombedvirus changes not only resolve the problem but also make the design of the code much nicer, with less globals, more code sharing and using TextCommands where it's more appropriate to use those then WindowCommands.\n\nLooks like async version of GitGutter causes Package Manager to hang.\n\nI think it was an unrelated issues. More related to having a git repo checked out in the packages directory than to the changes itself.\n. BTW. It would probably be fairly easy to reorganize the commit into two steps - big refactoring to remove globals and ViewCollection and then add async invocations on top of that. The first commit would still be big and fairly difficult to review though.\n. Sure, I could, but these are mostly @entombedvirus' changes so I don't necessarily want to \"steal\" them from him. :)\nAnd besides, if original pull request was not merged then why should I think that same changes will be merged now? :)\n. I'll do my best to get a pull request ready, separating refactoring from async fix.\nI have both Mac and Windows so can try both but if you will want to try my code, you just need to uninstall original GitGutter package and then clone the branch of the pull request into Sublime's Packages directory (on Mac that would probably be ~/Library/Application\\ Support/Sublime\\ Text\\ 3/Packages/).\n. Removal of ViewCollection was merged already and async invocations are to be merged soon (#321) so closing this now. Special thanks to @entombedvirus for the initial work. :)\nThere are still one or two minor fixes that can be picked from here. Namely:\n\nthe compare target is now per git dir.\n\nand\n\nuntracked and ignored file detection has been made lazy so as to minimize needless git invocations\n\nI will probably pick on those later.\n. The error suggests that None was passed to set_timeout. The code just passes settings.get('debounce_delay') there so if that returns None it can probably only mean that default settings from GitGutter.sublime-settings were not found. Can you investigate a bit? Maybe check if Git gutter settings menu item opens the right file? Also you can check using sublime.active_window().active_view().settings().get('debounce_delay') in the console if it returns expected value. Also same for other settings that plugin supports.\n. Although it would be trivial to make the code more resilient to such breakage by providing a default value in that case.\n. Will mark as dup of #284 as that one has more information.\n. Dup of #230.\n. I think it's most likely the same. The lag exists also when using GitGutter locally. It's less noticeable typically, but it both depends on file system, size of repository and platform so mileage may vary.\n. It wouldn't hurt to do it, I suppose. Do you still have this issue?\nAnd can you specify your OS and Sublime version?\n. (It's obviously on Windows.)\nI think we should just merge it. It seems harmless and fixes the issue for few people (#275 mentions couple including those who gave thumbs up).\n@jfultz, can you please rebase your branch on master? Otherwise I can just create  new, rebased pull request for it.\n. @wbond Do you still see this problem? I don't see anything like that on macOS Sierra. The file you pointed to doesn't seem to have any problems to me. But then it always points at master so it might not longer show what you tried to show.\n. Appears to have been fixed on master in the mean time.\nThanks for the pull request anyway. :)\n. Yep, will close as duplicate of #267.\n. Can't really see this problem on 1.3.0. Was it maybe fixed at some point?\n. Can't even see this problem in version this was reported for (1.2.2).\n. While I don't see the 'added' mark on such files, I've looked at the code and it is indeed invoking git which is pointless. So definitively a bug.\n. Although GitGutter allows to revert changes from its diff popup, it only supports that by 'chunk'. Supporting revert of specific lines wouldn't be trivial to implement and I'm not sure it's a job for such a plugin really. There are other, like GitSavvy, that are more about working with git.\n. GitGutter passes settings.get(\"debounce_delay\") as a second argument. Which means that for you the setting doesn't exist.\nCan you still reproduce this with latest version?\n. Closed as duplicate of #245.\n. Please see the bottom of the Readme on https://github.com/jisaacks/GitGutter\n. I agree. I think we have to live with it.\n. I've checked my temp directory and found 52000 git_gutter* files there :)\nSoon hopefully the ViewCollection will be gone so we can make nicer fix for this.\n. I have tried this in S3 console and it worked fine though. File was deleted.\n```\n\n\n\nimport tempfile\nt=tempfile.NamedTemporaryFile(prefix='aaa_test_')\nt.write(b'foo')\n3\nt\n\nt.close()\n```\n\n\n\nAlso tried with with in a small \"plugin\":\n```\nimport sublime\nimport tempfile\ntt = tempfile.NamedTemporaryFile(prefix='aaa_test_')\nwith tt:\n  tt.write(b'foo')\n```\nIn that case file is deleted immediately by the with construct so this shouldn't be used in GitGutter if file is to live longer.\nI think the clean solution that just calls close() on the file object from the on_close event should just work. But it will be easier to do with the rewrite that is currently pending.\n. That should be solvable but that it is a bit of a corner case that wouldn't be as important as removing temporary files in normal cases, IMO.\n. The code has changed quite significantly since this pull request and this problem also affects all platforms now. I have a fix that I will submit for review as soon as #321 is merged.\nThanks for working on this.\n. I'm working with submodule on a daily basis and it works for me.\nI assume that if you manually navigate to the submodule's directory and invoke git diff then you don't see those being shown as added? If so, is it possible that GitGutter is using different installation of git than your terminal and one of them has this problem? I've seen issues with submodule support in various apps depending on used git (for example msysgit versus cygwin).\nPlease at least state your OS and git version.\n. Is it reproducible for you on any public repo, so that I could try it locally? It works with the submodule for me in my repo.\nTried using both git 2.9.1 and git 2.7.4 (Apple Git-66).\n. Fixed by linked pull request.\n. @mccarthy It's in the PATH of your terminal but probably not of Sublime's. Since some time OSX is quite restrictive regarding which environment variables GUI applications inherit. You probably would have to install something like https://github.com/int3h/SublimeFixMacPath to make Sublime find git from /usr/local/bin/git automatically.\n. And #306 was merged so I think there is resolved now.\n. This is expected behaviour. If you are modifying the package then your changes will be lost on upgrade.\nAs for too small icons, there is #199 specifically for it so I'll close this issue.\n. I'm not sure if it's possible with current API but, in any case, there is #256 for implementing support for custom icons so you might wanna watch it. I might have a look later to check if it's possible to load resources from outside the package.\nBTW. Can you show a screenshot how it looks for you with default icons? I wonder if you think that default icons are too small or you have hit a bug with HiDPI where icons are abnormally small.\nBTW2. Have you tried https://packagecontrol.io/packages/PackageResourceViewer to extract image resources and modify them? Using this package preserves directory structure so it might just work fine with updates this way.\n. Should also update documentation.\n. Dup of #230.\n. As @sigod said, it was like that all along. There is an old issue #118 about differentiating staged and ustaged files.\n. Yes, saw that. It's mentioned in that issue.\nBut I can't promise that I will have enough interest to look into it myself. :)\n. I will just add, as it wasn't clear to me from your message, that it happens for me both on Win7 and Win10 on non-HiDPI screens.\n. @r-stein\nAd. 1.\nYou probably should admit that even if it doesn't make sense for the reasons you provided, it makes sense for a couple other reasons. Currently settings are loaded separately in basically all files (git_gutter.py, git_gutter_change.py, git_gutter_events.py, git_gutter_handler.py, git_gutter_popup.py, view_collection.py). It makes sense to have one class that handles settings for those reasons:\n- Testability. Plugin doesn't have tests currently so it's a moot point, but doesn't hurt to make it easier to test.\n- Readability and maintainability. Better to have same API everywhere than repeating code in all files and potentially having to modify all places if some logic/names change.\n- Handling setting changes. Currently if we would want to add change listener for settings (which makes sense but it's a separate issue) it would have to be done separately in all places.\nNow, as I'm basing these changes on original work from #240, which has one instance of settings per view, I was going for the same in the end. I see that this is probably unnecessary, though, so could modify this approach to have minimal number of settings instances, but there would be at least two with the way packages architecture is designed in sublime, I believe.\nSo would you be fine with solution that keeps settings in their own class but makes them be a global instance?\nAd. 4\nI shall fix that.\n. > Why would it be easier to test? \nBecause then settings would be mockable. Globals stand in a way of that.\n\nNeither the Sublime API nor the settings name will change so I don't see a maintainability problem. \n\nAs long as you are repeating code in all the files, maintainably suffers.\nhttps://en.wikipedia.org/wiki/Don%27t_repeat_yourself\n\nHow would you implement the change listener?\n\nsublime.Settings.add_on_change would either reload settings or just update specific keys and notify all listeners (various parts of the code would have to register a listener). In case of GitGutter it seems like most settings are checked directly every time they are needed to be checked so it doesn't apply to most of them, but there are some that are only initialized once (like git_binary) and those could be updated.\nAnyways, are you really suggesting that I should keep settings loading separate in all files and just have wrapper for some settings? Wouldn't that be less consistent? And as mentioned before, harder to maintain?\nIt seems like I have troubles convincing you that this change is better, so to avoid wasting more time, please state exactly what you would rather see or just say that this won't be accepted.\n. I've added commit that creates only one instance of settings as global. See if you like it more.\n. Thanks for merging.\nBTW. I intended for the changes to be squashed before integration. I didn't intend for the fixup commits to end up in the final branch history. It seems like Github has a way of squashing all commits before merging so that would be a good option to use next time. :)\n. Which keyboard layout are you using?\n. It does actually work for me in macOS Sierra. Do you have GitGutter entries Previous Change and Next Change in Sublime's menu and do those have the same shortcuts assigned as on the screenshot below?\n\nAlso does Goto menu entry blink when you use one of those shortcuts? If not then maybe you have some application installed that takes over those shortcuts and does its own action.\n. In any case, if the problem does not affect most macs then I don't think it's worth doing anything about that. You can always just add your own shortcuts that work for you.\nJust add those to your keyboard Keybindings in sublime and modify to your liking:\n{ \"keys\": [\"super+shift+option+j\"], \"command\": \"git_gutter_next_change\" },\n    { \"keys\": [\"super+shift+option+k\"], \"command\": \"git_gutter_prev_change\" },\n. > but we should keep the other commands (git_gutter, git_gutter_next_change, git_gutter_prev_change, and git_gutter_compare_against)\ngit_gutter command without arguments still works as before.\nThe problem with having them separate is that there will be no way of getting the existing GitGutterHandler from the main GitGutter command. At least not in a clean way.\nWhat I could probably do is to still have those commands you ask for but those would just act as a proxy and just invoke the newly introduced command on the view (view.run_command('git_gutter', args=...).\n. I would assume not, but I wouldn't know how to verify that really.\nThe main difference is that, I assume, Sublime internally creates one instance of TextCommand for each view instead of like before where it only created one instance of WindowCommand per window. But that alone seems like a negligible overhead, if you ask me.\n. I have placed a print in GitGutterCommand constructor and noticed that it's instantiated more times than necessary for each view.\n<GitGutter.git_gutter.GitGutterCommand object at 0x00000000050B6B00> <sublime.View object at 0x00000000049EDC18>\n<GitGutter.git_gutter.GitGutterCommand object at 0x00000000050B6E80> <sublime.View object at 0x00000000049EDC18>\n<GitGutter.git_gutter_popup.GitGutterDiffPopupCommand object at 0x00000000050B65F8> <sublime.View object at 0x00000000049EDC18>\nTwo are expected, not three. It seems that from git_gutter import GitGutterCommand import in git_gutter_popup.py makes that happen. Seems like git_gutter.py is evaluated twice in this case. I think I would also need to merge GitGutterDiffPopupCommand into main command to get rid of it.\n. Addressed that in latest commit.\n. Any update? I'm running with this code for my daily work and haven't spotted any problems.\n. Guys? Anyone has time to have a look and review?\n. ViewCollection was a hack in the first place. It was a global instance managing git handlers per view where the proper solution is to just have instances of TextCommand class per view. That is what TextCommand is designed for. Not using WindowCommand and then adding views managing on top of that. That really didn't make sense from the design point of view. Using WindowCommand didn't have any advantage. Those are to be used when the command relates to the window rather than individual view. And in case of GitGutter commands work in context of the view.\nAnd in general, I think I shouldn't need to convince anyone that globals are bad. Try adding some testing while having a global. Especially in Sublime where tests run in the same scope and at the same time when normal plugin code does.\nSo all in all this is to clean up code, make it easier to maintain, less likely to break and most importantly, to prepare for the next change which will introduce async invocations. Maybe it would be possible to add async handling on top of old ViewCollection but to be fair I haven't investigated that myself. These changes are based on the work done by someone else and I just personally thought they are very nice,  make the code much nicer and easier to work with.\nI understand you might be worried about such big changes introducing regressions but not doing them, on the other hand, makes it more difficult to fix problems and halts progress IMO.\n. Unittests are supported through this package for example: https://github.com/randy3k/UnitTesting\nhttps://github.com/niosus/EasyClangComplete has some tests that you can look at as an example.\nEasyClangComplete package even integrates its testing using github so that those run for each new commit (including pull requests).\n. As much as I would hate to delay integration of this change even more, I'm willing to do some rewrites to separate \"Change\" commands into its own command.\nThe idea I have is to separate parts needed by the \"Change\" commands from GitGutterHandler into separate class. \"Change\" commands don't really need most of the code from there, they can trigger some actions in GitGutterHandler through run_command('git_gutter') call with arguments.\n. Added commits that revert to using original commands as that was the controversial part.\nWe still need to make them act as proxy commands as only the main command creates the GitGutterHandler instance.\n. Any progress with testing?\n. Addressed latest comments and cleaned up branch history.\n. Yes, next one is planned.\n. I was trying to follow proper docstring formatting (roughly https://www.python.org/dev/peps/pep-0257/ )\nAnd I thought many might not be familiar with what Promises are so tried to be as descriptive as possible.\nBut feel free to point out any details that you think I should do differently.\n. I agree. Let's run with it for a while. I've been doing some last-minute refactorings of Promise code so I'm not 100% sure myself that everything works fine. :)\n. Been using whole day at work and didn't see a problem. :)\nI would like to maybe sneak in one more fix before release. For temporary files not being deleted.\n. All seems good to me. Everyone else happy too? :)\n. This and the #325 are the last ones.\n. I'm sorry. #324 also. #324 and #325 are regression fixes for my changes so important to have them.\n. Yes, I personally think they are all good and safe. #309 is a bigger change but I've tested and reviewed it so feel pretty confident about it too.\n. I'm fine with improving it later. Let's just release new version with this fix first. :)\n. These changes should also be on #309 and I don't care too much if they are merged through this or #309.\nBut it kinda makes sense to merge through here as these are regression fixes not directly related to #309.\n. @jisaacks thanks for making me aware of that, added other email now too. :)\n. That is true. The package claims that it supports per-project settings and it attempts to support them but does it wrong. sublime.load_settings('Preferences.sublime-settings') won't return project settings. To get project settings you need to access view.settings().\nGood thing is that adding the prefix to project settings won't break anything as it wasn't working already.\nI would suggest using git_gutter_* prefix. Seems in line with the name and file names used in the project and is general convention that I've seen used in various plugins (rather than using a dot).\nBut it will require smaller or bigger redesign so that view is always passed when asking for a setting.\n. I don't mind dot either. It's just I've never seen dot being used before but I've seen other convention being used quite a few times.\nI just have a slight tingling fear that dot could be problematic in accessing a JSON parsed to object as in those cases dot is often used to access object properties so having dot in a property could be problematic. But then, if it's not a problem in python/sublime implementation then dot sounds nicer actually.\n. Just noticed that some parts of the code handle project settings:\nreturn view.settings().get('git_gutter_compare_against', compare)\nSo this code is already using the git_gutter_* prefix. We could handle both git_gutter_ and git_gutter. prefixes at the same time to preserve backwards compatibility. Or just stick with existing convention.\n. That would break updating on focus when focusing file that was already open.\nI agree that is a bug or possible enhancement at least. \n. But it would be a problem on starting sublime with files already open. Those files won't get on_load or on_modified event and then focusing them would not trigger update.\n. The missing on_activated for initially open view is an existing bug that can be fixed by just forcibly calling on_activated method for active view from plugin_loaded(). But that is a problem only for initially open view. Focusing views after that will work fine because on_activated will trigger.\nYour second approach is probably not ideal either as technically it's possible to load the file without it being activated. Whether we want or not to run Git Gutter in that case is maybe not entirely clear but it would be safer to still run it.\n. This can probably be fixed easily on the GitGutterHandler level now. Checking if there is pending promise and dropping the request if so. That would be a generic way to fix this and potentially other similar cases where we trigger git too often.\n. It doesn't look like Sublime was restarted really. Maybe restart the computer just to be sure.\n. Actually it looks like you have the package extracted in the packages directory. Normally it installs to Installed Packages/GitGutter.sublime-package so you might have two installations of git gutter running simultaneously or something weird like that.\nTry removing the existing one (using Package Control or manually - whatever works), and install it again.\n. I'll be testing this today but so far I have randomly seen a problem with all lines marked as added.\n. Readme says that show_markers_on_untracked_file is by default on which isn't the case. Maybe you could also update that. Or maybe the setting should be on by default, to match what was happening until your fix.\n. > Readme says that show_markers_on_untracked_file is by default on which isn't the case. Maybe you could also update that. Or maybe the setting should be on by default, to match what was happening until your fix.\nActually, I was confused. Let me see if we are on the same page.\nWith show_markers_on_untracked_file off (default):\n- before your fix: untracked files show + marker on each line\n- after your fix: untracked files don't show any markers\nWith show_markers_on_untracked_file on:\n- before your fix: untracked files show * marker on each line\n- after your fix: untracked files show * marker on each line\n(I haven't checked behaviour for ignored files)\nSo I misunderstood that setting and maybe you have too. It seems like it enables special marker when on, but when off, we are still supposed to see + markers.\nI guess @jisaacks should chime in what is exactly the expected behaviour.\nBut I think + are expected on untracked files at least. That is basically to represent the file's state as it is in git.\n. > I would be very unhappy, if I was not able to disable markers on untracked or ignored files at all.\nI think the default should be to show the markers to match current behaviour. What I would suggest to do is to take your fix but also update default setting of that option to true to match documentation and current behaviour.\nBut I'm thinking those changes are crossing the boundaries of \"optimizations\" and maybe it would be better to split them into separate pull request.\n. IMO we don't really need to handle case when GitGutter code is modified. That's an edge case that should only affect GitGutter developers.\nIt would be enough that various git_gutter_*.py files use the same instance which is currently not the case.\n. Your suggestion using global() seems to work. And the global doesn't leak to other packages so it appears to be safe.\n. > SublimeLinter with pep8, pyflakes and pydocstyle will be applied to future code changes.\nHow will you ensure that? Pull requests come from external contributors and you can't know if they ensured that the code meets all the style checks.\nIt's good to have automatic checking of commits on the github level already.\nLocally you can use any other interface for style checking (before mentioned SublimeLinter for example).. @mamat-rahmat This plugin does not include any ruby or yaml files. Please don't add linter configurations for those. Keep it as simple as possible.. Previously GitGutter was blocking the editor when updating markers so you wouldn't see the markers flickering but you would experience freezes in the editor instead.\nI guess the bug is still valid. It can probably be fixed by delaying clearing of markers in some circumstances. But it won't necessarily be an easy fix.. As you said, in ST2 sublime.set_timeout is used which calls on the main thread so there is no problems with thread safety.\nIn ST3, starting from git call, we run everything in secondary thread. To be super safe, we could go back on the main thread right after doing the git call by resolving the promise from sublime.set_timeout call. But not sure it's necessary as ST3 API is thread safe.. @jisaacks can we get the simpler pull requests merged first? Kinda hard to keep track when they are piling up and possibly are sort of dependent.. Create only one instance of GitGutterSettings (fixes #334)\n337 opened 3 days ago by rchl\nSome usage optimization\n331 opened 6 days ago by deathaxe \u2022 Approved\nMake \"compare to\" functionality work per git directory (fixes #327)\n328 opened 7 days ago by rchl\nFix error invoking git which happens on all of my Windows systems.\n262 opened on Dec 18, 2015 by jfultz \u2022 Approved. I'm all up for trying it.. I think I do. At least I see the merge button.\nAs for \"prefer rebase\". I hate including fixup! commits or commits that just fix issues in the pull request in the final history. So would prefer squashing all commits (or at least do it when it makes sense).\n331 is one example where I would prefer squashing as it has some commits that fix earlier problem of the pull request or just adds changes that are later removed.\nBut I guess common sense should be applied on a case basis.... > My only reasoning against squashing, is I like to give contributors, higher numbers in the commit graph if they did a lot of work. If someone wrote 50 commits, and we squash it to 1 commit, it puts them low on the commit graph, when in fact they helped out more than what the graph portrays.\nI would hope that such trivial thing as stats wouldn't contribute to degradation of master branch history. :) It's much easier to blame the code, revert changes or just read the branch history if it's all nice and tidy. Also it's beneficial when creating changelogs.\nAnd creating a lot of commits should be discouraged in favor of creating more, smaller pull requests. :)\n\nIf it makes sense to squash it or merge, I am fine. I just prefer rebasing if possible because it usually makes the tree a little cleaner. But isn't always worth it.\n\nSquashing implies rebasing I believe. So it has the clean look of rebased branch + clean branch history.\nAll in all, that's just my opinion and what I would apply to my project. I'm not gonna force anything in here, just stating my way of doing things. :). @deathaxe Sorry, but I've reverted a bunch of your latest fixes from master as they didn't have  review.  As said in this thread, all changes should be reviewed by at least one person.\nAnd also those commits broke Mac and Linux + ST2 (I believe, looks like that from the code at least). Please resubmit those as pull requests and don't merge until reviewed.. Sorry, but you are not following the process. At least one person should approve the changes before they are merged - https://github.com/jisaacks/GitGutter/issues/341#issuecomment-262311323.\nPlease don't just merge fixes without review.. This is a workaround for a bug in Sublime. I would rather see you putting effort in convincing Sublime authors to fix it. :) It's also not ideal that a workaround requires a new setting that user has to find and toggle. If we would really go with a workaround, I'd try to find a way to autodect hiDPI mode and platform and apply such workaround automatically.\nAnd assuming that this is fixed in Sublime later, such workaround would then backfire by making all icons too big.. IMO it's not about resolution but about pixel density.\nWhether 1920x1200 or 3840x2160, if the pixel density would be the same in both cases, the marker would be equally well visible. All elements of the UI would have the same relative scale in both of those cases.\nWith higher pixel density (on retina or you 4k screen), where there a lot more more pixels packed per inch, to keep things readable, app needs to scale resources according to pixel density (or device pixel ratio). That is what Sublime is not doing here due to a bug. It  does it correctly on Mac and it does it correctly for its \"native\" UI elements. It just forgot to apply same logic to images specified through add_regions API.. See in this image: \n\nThose native UI/Theme graphic elements marked with green outline are handled properly. These are scaled according to the device's pixel ratio. They become ugly and blurry in effect but they have proper size at least.\nThe git gutter marker is not scaled so it's perfectly sharp, but too small.\nThe fix might be simple 5 minutes job. That fact that it didn't happen yet might be because it didn't get enough attention.\nAnd to be fair, Sublime development isn't staggeringly fast.. Superseded by #358 so closing.. > 2. handle timeouts\n\nWould be nice but is not supported by python 2.6\n\nYou could still handle it in ST3 bu using conditional block based on a constant defined earlier. Like in git_gutter_events.py, for example:\n```\nST3 = int(sublime.version()) >= 3000\n...\nif ST3:\n  process.communicate(timeout=15)\nelse\n  process.communicate()\n```. What does missing on_modified() event has to do with this change?\nAnd why do we have to use ID for comparison rather than comparing view object itself? It's not explained by the commit message.. >> What does missing on_modified() event has to do with this change?\n\nI tried GitGutter with Sublime Text 2 yesterday and recognized gutter icons not being updated while editing. \n\nSure, but you agree that this has nothing to do with ST2 not handling on_modified()? :) Just asking for correcting the commit message. :). As already said, it's a workaround for a bug in Sublime. I have recently reported it at https://github.com/SublimeTextIssues/Core/issues/1522 . I'd love if we wouldn't have to add more complexity and settings to workaround bugs.\nBut I understand that more pragmatic approach might be actually better for the users so I will not oppose to it. It can always be removed after Sublime bug is fixed.. Having settings initialized here servers the purpose of self-documenting the code that it's an exposed global. Otherwise it wouldn't be clear IMO.\n. Updated those three places to use parenthesis.\n. I'd call it \"Popup Stylesheet\" rather than \"Stylesheet Popup\". Latter has a different meaning than intended.\nSame below.\n. Small nit: This variable could be called deleted_lines for clarity and could be moved way down (together with hunk_content and hunk_lines) where added_lines is assigned as it's not used until return.\n. This breaks ST2.\n. Any established policy about that? :)\nI went back and forth between separating sublime imports and not, but was never sure what's the right thing to do. It's still inconsistent throughout the files so maybe apply some consistent logic to all of them?\n. Nice catch. I'll submit that as separate pull request.\n. I think there is no code that currently specifies flags but it would still be a correct thing to do to pass originally passed flags here (flags=flags).\n. Shouldn't it be flags=flags like before?\n. Nit: Maybe better to call these \"old_content\" and \"new_content\"? Or \"previous_content\", \"current_content\"?\nThat is because I don't think \"git_content\" is very accurate name when it only really includes removed lines.\n. This object is not used.\n. Nit: With such generic name maybe it should have a tag_name argument also?\n. I'd love for this to be bigger (maybe 18px). Currently it requires so much precision that it makes my wrist hurt almost. :)\nOf course you might choose to do that change in a separate fix.\n. But it throws there because there is no such module in ST2. At least on Windows.\nWould suggest moving it to where mdpopups is imported.\nPossibly same for difflib as you don't need it in ST2.\n. This exception will be caught so I don't really see the point of raising it. Or at least for having text for it.\n. The intention might be told clearer by explicitly removing that bitfield from the mask. Although in practice it won't really matter. At least with current set of flags available and used.\n. That was an old problem but git_gutter_handler argument is missing here. But instead of adding that, you should probably call *_impl() here.\n. Actually this is supposed to show a new diff so this needs to be solved differently. I'll add the fix to #325 and you should probably make the same change here. \n. Yes, I've added a fix in #325. As I've said there, I don't care too much which pull request integrates those.\n. Not sure I understand what you mean.\nThis code is used for navigating between changed chunks in the file. Content of the file doesn't change while doing that.\n. You don't want to preserve the highlight_diff state?\n. The meaning of this method is quite fuzzy. It checks two unrelated settings and then its name itself doesn't say what it really checks.\nBasically what I'm complaining about is the naming which I find very unclear which can easily lead to bugs as it's not clear at use site what it checks.\nI think it would be better to have those checks inline as I don't see what a good name could be for a method like that.\n. We can't really do anything about it so I don't see much point in this comment.\n. Original code truncated the file but maybe that's not necessary. In some rare case when exception is thrown and caught below, it might change behavior, but that would probably fail for other reasons also (promise would not be resolved).\n. Sorry for nitpicking but this is weird indentation (3 spaces). Should be 8 spaces.\n. Would personally prefer no blank lines before else or elif. Makes it look disconnected from whole if block.\n. I guess it's not a big deal. Probably can stay like that.\n. This will throw if file name is None. Which it is in many cases. In any case you should leave the comparison with None as it's cheaper check than accessing file system.\n. Where is that console message coming from? Neither from the GitGutter nor from Python I suppose? Basically I think that's unrelated message.\nJust check yourself in the python console:\n```\n\n\n\nimport os\nos.path.exists(None)\nTraceback (most recent call last):\n  File \"\", line 1, in \n  File \"./python3.3/genericpath.py\", line 18, in exists\nTypeError: can't specify None for path argument\n```\n. nit: parenthesis not need and abbreviations are bad.\nBTW. maybe os.path.isfile() is better (more specific) check?\n. I'd say it should be either multiplication of indentation used (in this case 4 spaces) or aligned with parenthesis (in other cases). 3 spaces just seemed wrong. :)\n. This looks wrong to me at least:\n\n\n\n```\nif foo:\n  ...\nelse bar:\n  ...\n```\nThe blank line before else.\n. To be fair just file_name and os.path.isfile(file_name) would be enough. Empty string is probably not gonna happen but it would be equally invalid as None if it did. But I don't insist on changing it.\n. Is specifying buffer size really necessary? What's the advantage? I think that this will potentially just use 1MB of memory for every open file. I think leaving buffer size for python to determine would be preferable.\n. a) Can you back up your claim about keeping it in RAM and O_TEMPFILE attribute (btw. I think you meant O_TMPFILE)? Documentation doesn't mention anything like that [1]. Besides, even if this API really does some optimizations to file writing to avoid writing to disk, they will not be in effect because you are closing the file so that particular call must end up with file being written to disk. Otherwise how would other part of the code be able to open it again?\nb) You are talking about O_TMPFILE (misspelled as O_TEMPFILE, I believe) and Windows which I think doesn't make sense because O_TMPFILE seems to be unix or linux specific.\nc) This code is platform independent so you shouldn't mention Windows specifically in any case.\nMy point is: it's probably better to just remove the whole comment.\n[1] https://docs.python.org/3/library/tempfile.html#tempfile.mkstemp\n. Why do you think that would be better?\nThat API has some differences to normal file creation and it's probably best to keep using it. Unless you have very good reason not to.\n. Maybe most benefits are lost when using it like that, but there might be still some. At least it shouldn't be worse than creating the file manually. It at least picks the appropriate location for the file automatically.\n. nit: It's a good practice to keep trailing commas from the perspective of git history. Adding more arguments won't require changing this line then.\n. Why not results[0]?\n. timeout seems python3 only. Does this break Sublime2 support?. Importing STARTUPINFO and probably the one after will throw on non-Windows.\n(IMO better to just import whole subprocess like before.). I think it's generally preferred to use string formatting in python:\nprint(\"... %s\" % exception).. Catching \"any\" exception is generally not recommended.\nWhy not just catch OSError?. To be fair why catch any exception at all if you are not doing any special handling but just re-printing it?. I'm not sure about that change. If we can't reproduce any problem maybe it was fixed in Sublime builds?\nSpecifying caption seems less generic and more error prone because it will override existing caption. And if, for example, Sublime Text would decide to slightly rename its menu item caption, the plugin would keep overriding it here.. Isn't \"Goto\" redundant given that it's in the \"Goto\" menu group?\nI guess I can't make a point that either one would be more consistent, but I don't think I see advantage of this change.. I won't insist on either having or not having Caption. I just think that it's not ideal to override caption of existing menu items, which seems what Sublime is doing. If it would only use provided caption if menu wouldn't exist already then it would maybe make more sense.\nAs it is now if, let's say, someone would translate the whole menu locally, then he wouldn't want it to be overridden my some plugin.\nBut maybe I'm worrying too much about corner cases.. Please have it in a separate try/except block.\nYou don't want to try to import everything from except block if this fails and you don't want to assume that TimeoutExpired doesn't exist if some other import failed to be imported.. Maybe makes sense to inherit from \"Exception\". Even if it won't really be triggered.. That might be pre-existing flaw, but if you are just accessing a 'git_binary_path' property of settings like this, you don't have guarantee that it was initialized (that load_settings() was called). Maybe you should add __get__ descriptor on the Settings class that will ensure that settings are loaded before returning the value.. unnecessary addition. wouldn't have a blank line here. It's just not correct. It probably only works by chance because GitGutterEvents trigger settings load when using settings.get('foo'). But it's not a new problem so can keep it for now.. Style nit: I think if not Foo reads better (more natural) than Foo is False / Foo is None.\nAnd if Foo is True can just be if Foo.. I think it makes sense to also create this in init. It doesn't do any expensive stuff on init. It was here only because it depended on GitGutterHandler.. Style nit: That did fit on one line just fine. No need to change it.\nI suppose you've done that so that it looks consistent in all classes but that is IMO not necessary. Taking least vertical space is more important.. That does fit on one line.. Fits one line.. Fits one line.. Fits one line.. You should add this new setting to GitGutter.sublime-settings and README.md. It doesn't make sense that the setting takes a number and yet the code handles all values as '2'. It would make more sense to make the setting be a boolean and be named, for example, large_gutter_icons. A setting named dpi_scale is very ambiguous - not clear what it applies to.. Nit: Would be clearer if you would write decode=False.. Nit: Would be clearer if you would write decode=False.. By autodetecting I meant doing everything in a way that wouldn't require any settings. So using either Python or system API (through ctypes on Windows I guess) to detect if running in hidpi mode and applying different icons.\nI don't know anything about dpi_scale but even if it actually does something, I don't think it's a good idea to use some undocumented setting for it.\n\nCan we just reopen that PR and I'll rename the high_res_icons setting to large_gutter_icons?\n\nSure, I'll reopen old PR.. ",
    "godbout": "Hi @jisaacks,\nMy mistake, sorry about that. The first time I've installed your plugin through package control and had the graphics issue. I then installed it through git clone but it seems I haven't removed the plugin from the new \"Installed Packages\" folder. Now I got a clean install and it works great (with build 3019).\nedit; HA. Bug from Sublime Text. I've actually removed the plugin through package control but Sublime Text reinstalled it automatically, even if it was already present in the Packages folder.\n. Was coming here to do the same \ud83d\ude02\ufe0f\nGreat work!. ",
    "wagenet": "@jisaacks I had the first ST3 Beta.\n. So I just tried removing GitGutter and reinstalling with Package Control. It appears to work fine. I'm leaving it open since there may still be a bug, but if you want to close this ticket go ahead.\n. @jisaacks I don't remember unfortunately. It's definitely possible.\n. Thing have been fine for me for a while. I should have commented. Sorry!\n. ",
    "gsterjov": "I had the same issue. Had git cloned it. Works fine when using package control.\nHope this helps\n. ",
    "Dan2552": "Also had this, removing and reinstalling worked\n. ",
    "Ajedi32": "I'm having this same issue on Ubuntu 12.04 LTS, Sublime Text 2.0.1, Build 2217:\n\nNote that the top icon is for a modified line, the red is for a deleted line, and the bottom is for an added line.\n. I updated Sublime Text to 2.0.2, Build 2221 and everything seems to be working now.\n. I know I had a specific use case in mind when I originally posted this, but it's been some time since then and to be honest I can't remember what it was right now.\nI suppose it would be pretty useful when resolving merge conflicts, since you could view the diff from the perspective of what you're merging in, or from the perspective of the branch you're merging from. Having the diff visible right in SublimeText could be very useful in that situation.\n. Yeah, I figured the change wouldn't be difficult.\n\nI am not sure the best UI for how the user would specify something other than HEAD to compare against.\n\nMy suggestion for the UI would be an option in the command palette to change GitGutter's base commit. After selecting that, an autocomplete panel similar to the log all option in the git plugin would appear which lets you select a commit by hash or branch name (or maybe even by commit message?). If that's too complicated, you could always just have a plain text entry box appear on the bottom of the screen which takes any valid git ref - that would be fine for my purposes.\n\nBut even once the user has selected the commit to use, would this be for the current view only, or all files?\n\nI would definitely go with all files. I'm fairly certain that if it only applied to the current view I would find myself constantly changing the reference commit every time I switched views, which would be very annoying.\n\nHow long would it last .. until restarting sublime? Things to think about.\n\nI would suggest that it last until you restart Sublime Text, or until the user specifies a new commit to use (or the user could specify HEAD to return to the default behavior). That sounds like reasonable behavior to me.\n. Cool! Thanks a lot. :smile: \n. It's not working for me at all:\n\n. @jisaacks Sorry, I must have missed your earlier comment about fixing the error. I'll try it out and get back to you soon.\n. Yeah, sorry I never got back to you after your fix. :pensive: I completely forgot about this issue.\nAnyway, I just tried the feature and it's working for me on master. :+1: I'm glad to hear you found my suggestion useful. I'm also finding it helpful for seeing the diff from master. I like to commit often when developing, so not having the diff reset every time I commit is very useful for me.\n. I did encounter one minor annoyance though with the UI for comparing against a specific commit. As-is, if I know the commit hash for the commit I want to compare against I can't just enter that in the command palette, I have to search by commit message instead. Not a big deal, but I'll open an issue for it anyway.\nThanks for your help. :smile: \n. Okay, here it is: #142\n. This use case (among others) is covered by the git plugin.\n. Actually, I think the best way of implementing this might be to have a separate command which allows you to enter arbitrary refs to compare against. This is because I have encountered several situations now where I wanted to input something more advanced like origin/master~, but couldn't.\n. ",
    "DouweM": "Oooh, this would be really cool! I really hope you figure it out @jisaacks!\n. ",
    "paulandrieux": "Any news about this feature ? \n. ",
    "nhajiyani": "This  is one thing I miss from Eclipse, will keep my eyes out for trying to see if there is a way to do this.\nThanks for this plugin\n. ",
    "willstott101": "@jisaacks From http://www.sublimetext.com/3 : \"Release Date: 29 August 2014, Added sidebar icons\"\n. ",
    "flowerett": "Is it possible to change folder colors instead of icon manipulations (like in Atom)?\n\n. ",
    "xu-cheng": "No, the problem is that git Cygwin can take in Windows style path, but always return UNIX style path. So GitGutter would get wrong style path and never find git repo.\n. @saamalik Are you sure that you don't have a second git installed ? Because it doesn't work for me.\n. @saamalik I'll have a try. Currently I use git from Github for Windows to solve the problem.\n. No it never worked for me. But I have already moved to Mac, haven't used Cygwin for a while. \n. ",
    "saamalik": "I added C:\\cygwin\\bin to my windows PATH, and my \"Cygwin\" git works fine with GitGutter\n. I'm positive I don't have another git installed:\nWhere git:\nC:\\Windows\\System32>where git\nC:\\cygwin\\bin\\git.exe\nAnd my PATH\nC:\\Windows\\System32>echo %PATH%\nC:\\Ruby200-x64\\bin;C:\\Windows\\system32;C:\\Windows;C:\\Windows\\System32\\Wbem;C:\\Program  Files\\Java\\jdk1.7.0_13\\bin;C:\\adt-bundle-windows-x86_64\\sdk\\platform-tools;C:\\Program Files (x86)\\QuickTime\\QTSystem\\;C:\\cygwin\\bin\n. @michael911009 I installed Cygwin / Sublime Text 3 on my home computer, and GitGutter works as expected with cygwin git. \n. I've been using cygwin git with GitGutter for the past 8 months--no issues.\n. @DavidLGoldberg Of course--I restarted Sublime (5 times). I never trust this auto-reload mumbo jumbo ;). Yes, on Windows 7.\n. One more thing, I added the GitGutter package using the command line cd Packages && git clone ..... In the latest Package Control for ST3, the packages aren't expanded and trying to modify the GitGutter setting files was giving \"Unable to open file\" error messages.\n. @jisaacks I already tried setting \"non-blocking\" in ST3, but like the other property it doesn't seem to effect. \nWhich file should I go into? I tried searching online for 'Sublime events file' but couldn't find any relevant links. The Sublime console does not display the settings, and the closest I got to looking at the applied settings was at this link: http://www.sublimetext.com/docs/2/settings.html. Unfortunately, view.settings().get('live_mode') doesn't return anything. \nI created a Packages/User/GitGutter.sublime-settings with live_mode to false, and that didn't work either. Could you please provide more instructions on how to turn on debugging to see what settings are actually applied.\nThanks.\n. @jisaacks I added the following to git_gutter_events.py\nprint(\"The settings are:\")\nprint(\"LIVE \" + str(self.settings.get('live_mode')))\nprint(\"Non Blocking \" + str(self.settings.get('non_blocking')))\nNo matter, what I added/modified to the GitGutter.sublime-settings (default and user), the results were always:\nThe settings are:\nLIVE None\nNon Blocking None\nI'm not a python dev, but it doesn't look like self.settings = sublime.load_settings('GitGutter.sublime-settings') is parsing the file, (or maybe it can't find them?). \nAnyway, the path to the two files GitGutter.sublime_settings:\ndefault: C:\\Users\\Saad\\AppData\\Roaming\\Sublime Text 3\\Packages\\GitGutter\\GitGutter.sublime-settings\nUser: C:\\Users\\Saad\\AppData\\Roaming\\Sublime Text 3\\Packages\\User\\GitGutter.sublime-settings\n. For the time being, I'm initializing non- blocking to True in\ngit_gutter_events.py.\nSent from my Galaxy Nexus\nOn Apr 7, 2013 2:25 PM, \"David L. Goldberg\" notifications@github.com\nwrote:\n\nKind of related, thought I'd just ask, does sublime packaging have support\nfor os specific default settings files (like the key bindings). If so, I\nwas thinking that potentially it would make sense for git gutter on windows\nto default to live_mode off. I haven't seen a machine where the typing\nwasn't significantly delayed. Not git gutter's fault per se of course but\nrather the delay to the git setups on windows.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/jisaacks/GitGutter/issues/87#issuecomment-16024611\n.\n. \n",
    "codeheroics": "Sorry, just fixed the error of the condition.\nThe onload methods were a way to get GitGutter to evaluate the files once at load, even if the evaluation on focus change was disabled.\nIf you think it's useless I'll remove it as the evaluation can always be triggered by saving anyway.\n. Yeah, after thinking about it, I guess non live_mode users probably disable it for performance, like I did.\nHowever, I think there's a gap between evaluation at each focus change, and evaluation only on save, the former being more convenient while not as consuming as the standard live_mode.\nMy setup at work being quite special, I wouldn't want non live_mode users who had no problem until now to be penalized just because I happen to have problems caused by it.\nHowever you're right, the standard way should not be hampered in any way by those changes. How about having the on_load methods only do stuff when not in live_mode ? It would be one more condition added, but it could avoid the double evaluation on boot.\n. ",
    "kofalt": "Hello @jisaacks!  I just ran into this today and I can help lend some context.\nGit filters allow you to modify files when checking out or committing. You can do a couple cool things with this: store & version an encrypted file alongside your normal source code, for example. I think the Windows Git client uses filters to solve compatibility problems with line endings as well.\nDocs are here but the pictures are pretty great:\n\n\nHere's a popular python library, edited locally as tabs, without messing up the diff:\n``` bash\nGrab an example repo\ngit clone https://github.com/kennethreitz/requests.git && cd requests\nCreate a filter called \"tabspace\"\ngit config filter.tabspace.smudge 'unexpand --tabs=4 --first-only'\ngit config filter.tabspace.clean  'expand   --tabs=4 --initial'\nTell git to run the filter on all python files\necho '*.py  filter=tabspace' >> .git/info/attributes\nBit silly: delete all tracked files & checkout again to trigger the filter\ngit rm -rf -q .\ngit reset -q .\ngit checkout .\nHave a look!\nsublime_text requests/cookies.py\n```\nYou'll see that the smudge filter has been applied and the file is indented with tabs, unlike its upstream variant. Meanwhile, git diff is empty, because the clean filter applies before diffing or comitting.\nYou'll also see that GitGutter thinks each line changed by a filter has a diff status:\n\nI think this is what @fd was getting at - that GitGutter's method for checking the diff (here?) doesn't account for git filters, which leads to erroneous reporting.\nI'm not sure of the best approach for a fix - all the information is stored in the standard git config files, so it's possible to smudge manually, but ideally there's a way to ask git to handle it for you.\n. That sounds right to me.\nAm I reading update_git_file correctly in that it is basically running git show HEAD:[file]?\nI was surprised to find no obvious ways to make git show apply a smudge filter. Considering asking the git maintainers for a flag. Or maybe I'm just missing something.\nI did find two cheeky ways to apply filters without messing with the repo:\n``` bash\nNot smudged\n$ git show HEAD:requests/cookies.py\n...\n    import threading\nSmudged! (renders in github as spaces; works IRL)\n$ git archive HEAD requests/cookies.py | tar x requests/cookies.py -O\n...\n    import threading\nAlso smudged! Doesn't use archives, but does touch disk\n$ mkdir -p ../oy\n$ git --work-tree=../oy checkout requests/cookies.py\n$ cat ../oy/requests/cookies.py\n...\n    import threading\n```\nIf you've got a more clever approach, that'd clearly be preferable :)\n. Hmm. I just noticed that after running git show you're writing the result to disk anyway for git to read. Given that, the second option might be a valid drop-in replacement.\n. That's awesome :+1: \nI still use git filters, so if you show me a way to test a new version of the plugin I will gladly do so!. I've got good news & bad news :smile: \nUsing my example above, on the tip of GitGutter master:\n\nUsing 173e502, the current tip of #372:\n\nSo that works!\nThe bad news is that it looks like it's easily confused by symlinks. \nSo if you use my example above, but:\n```bash\nLeave the directory we cloned into\ncd ..\nAlias the directory\nln -s requests/ link\nHave a look via the symlink\nsublime_text link/requests/cookies.py\n```\nYou'll see this:\n\nIt looks like I can reproduce that error without filters though. If you like I can file that as a separate ticket!. I don't think I posted here, but I can confirm that this branch fixed #74 for me :+1: \nIf you need any further testing, let me know!. To answer your questions:\n\nAre the gutter icons always updated as expected?\n\nYes, as far as I could tell. I even did some work over SSHFS and it was fine with a higher-latency file system. \n\nAre there situations a modification in a text file or external status change of the file (stage, commit) is not recognized?\n\nI could not find any situation where that happened - it does seem like there is a delay on initial file load (maybe it's the file opening, plus the 300ms debounce or what-not? maybe remove that specifically for file open?), but it's not very long.\n\nDo you encounter any exceptions? \n\nNope! And I've used it in repositories that do, and repos that do not, have smudge/clean filters. I have not checked on the other issues this PR closes.. That makes sense. I'm not afraid of thrashing I/O, so I might set that very low.\nOne thing worth testing is seeing what happens if the command takes longer than the debounce delay (maybe add a sleep to the command temporarily). Does a new update start processing even if an old one is still in flight? Etc.. Question: with your busy marker implementation, will it know to scan again after the in-flight one completes? If not, you could end up with stale data.\nI'll try to give the latest version a test later today :slightly_smiling_face: . Just an update: I've fallen pretty sick, so I won't be able to look at these new revisions. Might happen this weekend or something if I get better. But based on my previous experimenting it seemed to work well.. ",
    "zertrin": "Hi, I just found this issue because after setting up a .gitattribute filter to strip output data and metadata from ipython notebooks (https://github.com/kynan/nbstripout) and making sure that it is working in git bash when diffing, adding and commiting, GitGutter still shows me differences for these chunks (see screenshot below).\n\ngit status and git diff correctly report no changes to that file (even if the working copy differs from the index).\nI'm using GitGutter v1.5.0 with ST3\nMy .gitattribute file contains:\n*.ipynb filter=nbstripout\n\nand the filter is set up as the following:\nfilter.nbstripout.clean=\"c:/users/xxxxxxxxxx/appdata/local/continuum/anaconda3/python.exe\" \"c:/users/xxxxxxxxxx/appdata/local/continuum/anaconda3/lib/site-packages/nbstripout.py\"\nfilter.nbstripout.smudge=cat\nfilter.nbstripout.required=true\n\nI am suspecting that the problem comes from the fact that the smudge filter in my case would result in a different file than the one currently in the working copy (the commited file contains no outputs, while the one in the working copy still has the outputs that were subsequently filtered by the clean filter while adding and committing).\nSo I guess my question is: what files does GitGutter compares exactly to make a decision? Does GitGutter uses the working copy file at all? IMHO it shouldn't use the one in the working copy (that may not have been smudged yet). The comparison should be done between the \"working copy file after cleaning\" and the file in the index.\nHowever that raises the question of how can gitgutter associate the lines between the \"working copy\" and the \"working copy after applying the clean filter\" in order to show the diff on the \"working copy\" file...\n.... the more I write this comment, the more I see that this isn't easily solvable, and that assuming that the working copy file has to be already smudged may be the only solution.. Thanks for the detailed explanation! I'll live with it \ud83d\ude09 . ",
    "jamwaffles": "That's fair enough. I can always turn the option on for myself anyway. Thanks for the feedback, and for GitGutter itself.\n. ",
    "farzher": "I think non_blocking should be true by default, simply because it lags sublime if it's blocking. \nSeriously, I uninstalled it after how much it slowed down sublime, and only reinstalled it after finding the non_blocking option.\nAlso, every time I recommend the plugin to someone they complain about it lagging sublime and I have to tell them to go edit the settings.\nDoes non_blocking: false actually not lag for anyone?\n. ",
    "lgarron": "\nsimply because it lags sublime if it's blocking.\n\nIndeed, I'm finding this a bit frustrating. GitGutter is perfectly usable for most files, but I when I open a a medium-size file (\u224810,000 lines) Sublime quickly becomes unusable. I still can't tell if I've configured non_blocking correctly, so I end up disabling and enabling GitGutter several times a day.\n(And disabling takes 10 seconds, because of the delay due to GitGutter.)\n. > I still can't tell if I've configured non_blocking correctly\nI just looked into it a little, and found I also need \"focus_change_mode\": false in order to avoid locking up Sublime when I switch to those files. But I still see a beachball for one second when I save.\n. ",
    "lorin": "I hit this as well. Would love it if bookmarks would appear instead of git gutter marks.\n. > > I can't tell from the line wether there's a bookmark, that's annoying.\n\nIf you told GitGutter to not override then specific regions you would have the reversed problem.\n\nFor what it's worth, I'd prefer bookmarks to take precedence over git gutter markings, since it's easier for me to toggle a bookmark off to check if there's a git gutter marking (the bookmark keyboard shortcut is in my muscle memory)  than vice versa.\n. I tried clicking out of Sublime Text and back. It did eventually work, after I clicked off of Sublime and back on several times. \n. Is there a simple way to force GitGutter to do a refresh rather than clicking away from sublime and clicking back?\n. Thanks for the sketch of a potential solution. I don't have the cycles to work on this now either, but I have bookmarked this into my \"someday\" file, so I may circle back to this sometime in the future. I'll close out this issue for now.\n. ",
    "ZenithDK": "I am getting hit by this and the Linter issue #113 also.\nCan the gutter be made wider?\n. ",
    "DisposaBoy": "I'm pretty sure this is a Sublime Text issue/limitation. i.e there can be only 1 icon there at a time.\n. @jisaacks , the problem is that you're load and caching the settings on class instantiation. In ST3, at this point the Sublime Text API is not fully usable. You need to wait for plugin_loaded and/or possibly better/simpler: don't cache the settings, just load the settings file on demand.\n. @jisaacks \nI didn't notice any issue loading it on-demand (in my usage in other plugins). I assume it simply returns a reference to the already loaded settings data as opposed to reloading from disk. If it's an issue, and you want to get settings updates you can probably arrange for the cache to be updated with a callback. see add_on_change http://www.sublimetext.com/docs/3/api_reference.html\n. transient views e.g. those opened with window.open_file('...', sublime.TRANSIENT) or those that get previewed as you type inside the goto anything palette have no window associated unless you edit them at which point they are assigned a tab, etc.\n. ",
    "abusalimov": "~~That sounds rather weird, but for some reason prefixing all icon files with, say, \"icon_\" (and changing icon_path method accordingly) fixes the original issue. =\\~~\nP.S.: Sublime Text 3, build 3054\nP.P.S.: Sorry, it doesn't seem to be a robust fix, only some random types of mark gets covered with a bookmark. Still can't understand which and when exactly.\n. @jisaacks I don't think this would slow down GitGutter. All you need is to create a set of protected positions (beginnings of bookmarked lines) and check whether a position to be added is not in the set. Not a big deal for few regions types (\"bookmarks\", \"mark\", ...). Proof-of-concept: https://gist.github.com/abusalimov/7363673\nI don't insist that this is a show-stopper thing. But personally I have both VcsGutter and GitGutter disabled only because they break my daily workflow making bookmarks unusable. Again, I understand that many developers dont't bother when bookmarks get hidden or don't use bookmarks at all.\nP.S. It's a pity that Sublime can't combine two png images using their alpha channels. That would completely solve the issue without tricky hacks.\n. @jisaacks well, you are talking about the most general solution where the user could specify a list of protected regions. I'm sure that with resonable defaults provided (like with only bookmarks and marks taking precedence) and a warning about adding more region types this feature would be perfectly fine. After all, I'm pretty sure that counting even 1500 markers would be still faster than getting a fresh diff each time (which forks a subprocess for that). Anyway, the final decision is up to you, of course.\n. @jisaacks thank you.\nI can see that in your solution you read a setting and collect protected regions for every single line of the resulting diff which in turn can be rather big. I don't think that having lots of protected regions is real (see my previous comments), but I believe that there can be a huge diff with thousands lines. And that can really hurt the performance.\nIn the solution that I've suggested above you only need to prepare a set of protected regions once. After that a simple set lookup (which is really fast in Python) is performed for each diff line to be marked.\n. @jisaacks well, I'm new to github, and I'm afraid I'll get some free time to learn it only on the next weekend. So if this change is not too urgent, I could do it within a week.\nI also noticed that in my solution (I guess, in your too) there is a little bug: when removing a bookmark on a changed line this line would have no mark at all (because changed mark was not added because of the bookmark). May be you know, is there any hook to intercept changes on certain regions?\n. @jisaacks, I've just forked the repo. Should I commit into the protected-regions branch (maybe overriding changes you already made) or into the master?\n. ",
    "sundarv85": "+1 here. Is the current status still in protected-regisions branch?\n. ",
    "develucas": "I've tested your fix in the context of SublimeLinter and it seems it's working. I wish I had more time to do code review, the code requires optimization in my opinion.\nAfter installing GitGutter-Edge add following to user settings\n\"protected_regions\": [\"sublimelinter-error-gutter-marks\", \"sublimelinter-warning-gutter-marks\"]\nNow someone should extend the list of regions by bookmarks etc and update readme file.\n. I've tested fix from master branch and it seems it's working. I wish I had more time to do code review, the code requires optimization in my opinion.\nAfter installing GitGutter-Edge add following to user settings\n\"protected_regions\": [\"sublimelinter-error-gutter-marks\", \"sublimelinter-warning-gutter-marks\"]\nNow someone should extend the list of region names by other names (e.g. for bookmarks - there is another related issue with icons) and update readme file.\nWe're almost there :)\n. ",
    "g105b": "Hi all. I have been following this thread for a while as I use Sublime Linter and XDebug (which places debug breakpoints in the gutter).\nTried multiple things over the past weeks to avoid having GitGutter eat up the gutter icons, and today I tried removing Githutter completely and installing manually.\nAfter installing manually (cloning the repo into the Packages directory), Gitgutter no longer takes preference over the other gutter icons!\nSo whatever you've changed works. But please note that GitGutter-Edge still has the issue for me (Ubuntu 15.10 64bit).\n. I'm back. GitGutter has started drawing gutter icons over the top of the bookmarks and sublime linter / xdebug breakpoint indicators.\nThis issue is still open for me. Here's the contents of my GitGutter.sublime-settings (which makes no difference):\n{\n    \"protected_regions\": [\n        \"sublimelinter-warning-marks\",\n        \"sublimelinter-error-marks\",\n        \"sublimelinter-warning-gutter-marks\",\n        \"sublimelinter-error-gutter-marks\",\n        \"lint-underline-illegal\",\n        \"lint-underline-violation\",\n        \"lint-underline-warning\",\n        \"lint-outlines-illegal\",\n        \"lint-outlines-violation\",\n        \"lint-outlines-warning\",\n        \"lint-annotations\",\n    ]\n}\n. Activity on this thread made me try Gitgutter again after a long time. Worked really nicely at first, but it seems like I have to remove and reinstall Gitgutter multiple times per week to maintain consistent behaviour with bookmarks.\n. Will do - I'll keep my eye on it. Is there any logging I can turn on so I can provide these as soon as I notice gitgutter going over the top of bookmarks?\n. Roger that. Will reply back when the problem happens again. Still working fine today.\n. ",
    "sentience": "Likewise, the protected_regions setting is not working for me. SublimeLinter gutter icons are being overridden with GitGutter gutter icons, despite my having specified:\n{\n  \"protected_regions\": [\n    \"sublimelinter-warning-gutter-marks\",\n    \"sublimelinter-error-gutter-marks\"\n  ]\n}\n. ",
    "ocrow": "GitGutter.sublime-settings has the following, but bookmark icons are still overridden by GitGutter. \nIs this feature working?\n\"protected_regions\": [\n    \"sublimelinter-warning-gutter-marks\",\n    \"sublimelinter-error-gutter-marks\",\n    \"bookmarks\"\n  ]\n. I'm using normal bookmarks. SublimeText 3126; GitGutter v1.3.0.\n. I see a small greenish square in the first column to the left of the line number of any line that has been modified since the last commit. If I add a bookmark on a line that has not been edited, it appears as a large white right-pointing triangle arrow. \nIf I add a bookmark on any line that has been edited, the white bookmark arrow does not appear, which is the problem. It does not make any difference whether the bookmark is at the beginning of the line, the end of the line, or in the middle of the line. Similarly the bookmark may be for a single position or a selection. In each case the bookmark icon does not appear iff the start of the bookmark is within a line that was already marked by GitGutter as edited.\nIf I add a bookmark before editing the line, the bookmark arrow stays and the 'modified' square does not appear. I think that is expected behavior.\n. I removed my GitGutter user configuration, uninstalled & reinstalled GitGutter, restarted SublimeText, and all of that seems to have done the trick. I now can see bookmarks on top of GitGutter modified icons.\n. ",
    "r-stein": "@ocrow Do you use the normal bookmarks or have a bookmark package? Normal bookmarks should work and works for me.\n. @ocrow How does the line look like and where do you add a bookmark? The region detection should work for the whole line with https://github.com/jisaacks/GitGutter/pull/304, but might still have some flaws.\n. @ocrow Good that it works now =)\nAlso this whole issue should be fixed and I close it.\n. @g105b reinstalling GitGutter does not change the code, so it's weird that this would fix something. If you can provide reproducable examples where it fails, I would be glad to fix those.\n. There is no logging command and this is more about overlapping regions. You can paste this into the ST console and it should output all relevant informations about regions and lines:\npy\nregion_names = [\"bookmarks\"] + [\"git_gutter_\" + r for r in ['deleted_top', 'deleted_bottom', 'deleted_dual', 'inserted', 'changed', 'untracked', 'ignored']]; [(\"lines\", view.lines(sublime.Region(0, view.size())))] + [(r, view.get_regions(r)) for r in region_names]\nIn addition it would be nice if you could provide a small description in which order you have added the boomarks and the gitgutter informations.\n. It is very weird that it overwrites \"added\" and \"deleted\" icons, but not \"changed\" icons. We should have a look into the reason for that and try to adapt our way of adding the \"changed\" icons accordingly. It may have to do something with the name or the icon path.. You could also name the scope aaaaa, markup.inserted.git_gutter to keep backward compat. One could also create an EventListener to refresh the git gutter regions after some commands are executed.\n``` py\nimport sublime_plugin\nclass BookmarkGitgutterListener(sublime_plugin.EventListener):\n    def on_post_text_command(self, view, command_name, args):\n        if command_name == \"toggle_bookmark\":\n            view.window().run_command(\"git_gutter\") # not sure which arguments to pass to refresh the icons\n``. If you use the scoperegion.redish markup.deleted.git_gutterit will only use the color ofregion.redishif the colorscheme does not define a color formarkupormarkup.deletedormarkup.deleted.git_gutter`, imo it combines the best of both world. You always have color and it is not everything white, but a colorscheme can overwrite that color.\nIt looks like it would need a refactoring, but except from that I don't really see disadvantages. Nonetheless I am not sure whether we should expose that to the settings.. I don't think it is worth for enough people to have the background on the cost of syntax highlighting. Git is mostly used together with source code, hence syntax highlighting is important.\nOne could make a border around the lines, but then we would fight with other packages over that region highlighting and not only over the gutter icons. I would not want to provide support for the resulting issues.. May be worth to say, that the Package Control issue is not related to the code, but to git Packages. If you use have your packages as a git directory it automatically tries to pull from the remote. However if the remote is not existings this error pops up. I assume, that the same thing happens when the origin does not have the branch.\nJust open the Package Control settings Preferences >> Package Settings >> Package Control and and add \"ignore_vcs_packages\": true, to avoid this.\n. I would also like to have a an option to stage single chunks. Do you have an idea how to add them non-interactive with line numbers or something like this?. Do you think it would be better to use icons instead of text:\n\n. I have changed the text to symbols now and hope they are self explaining.\nActually I am using windows. So I can confirm it works there. I will test the backward compatibility with Build 3114 and ST2. Please review and feel free to ask questions.\nEspecially in the part of parsing the git diff I am not so confident with the structure and it's mainly based on the comment above. In addition I assume the flags ensure there are only + and - lines in the hunk and only extract the - lines for the inline diff.\n. The Hover event is only available in the dev build, it has been added in Build 3116. However you can easily turn it into a windowcommand, just change the start to:\npy\nclass GitGutterInlineDiffCommand(sublime_plugin.WindowCommand):\n    def run(self):\n        view = sublime.active_window().active_view()\n        point = view.line(view.sel()[0].b).a\nand add a keybinding for git_gutter_inline_diff\nAnd I will move the event listener to the events file.\n. I have added a command just in case. This will open the diff popup in the line of the first selection.\nWe could add a keybinding, e.g.\njs\n    { \"keys\": [\"ctrl+shift+alt+c\", \"d\"], \"command\": \"git_gutter_diff_popup\" },\nIn addition I added a setting to switch between text and icon buttons. We can still easily remove it and only keep icon.\n. I have also added a arrow-button to jump to the first, previous and next change, which will only be available if that change exists (i.e. disable first change if the popup is already the first change):\n\nIf someone else has an useful idea, feel free to suggest it.\n. ST does not seem to support html titles/tooltips yet, although they are still adding new features.\n. Yeah I don't find a good copy icon in unicode =/. Using texts is big and ugly (even bigger if we use \"next change\" instead of only \"next\"):\n\nIt might be the best to add a short explanation to the readme. I think after using the icons a few times, they are easy to recognize. In addition copying will give a status message, so one can just try to click on all buttons and see what is happening.\n. @jisaacks only the hover event is limited to 3116+. The popup itself can opened with a command in 3114 (this is not as cool as the hover event, but is not to bad either). We could add a keybinding or even an entry in the command panel. If people don't use it they won't notice it anyway and if people see it in the README and want to use it, they could trigger it manually.\nHence I don't think we need to wait for the new ST release, but should emphazise, that the hover event is not yet available in the README.\nHowever I am still in the process of improvement and getting feedback.\nAside: Do you agree, that it would be a good idea to include a screenshot with a short description of the buttons in the README?\n. It looks like the popup css has also only added in 3116 https://www.sublimetext.com/3dev. I will add a GitGutter: Show Diff Popup command. Which keybinding would you suggest? One could use \"ctrl+shift+alt+c\", \"d\" or \"ctrl+shift+alt+c\", \"ctrl+d\"  (with d for diff) as this prefix is already used.\n. > > (with d for diff) as this prefix is already used.\n\n\nWhich is already used?\n\n\n\"ctrl+shift+alt+c\" is already used as prefix for commands.\n. I just realised, that the syntax highlighting was, because the css support changed in 3119 (and I used new css). I have adapted it and it should now be highlighted in 3114.\n. The commit is https://github.com/jisaacks/GitGutter/pull/296/commits/f2f166829bdbcecf8d9cf8e699ae4c3f5c48a07b and as remark for the highlighting: mdpopups has a setting to switch between pygments and a integrated ST syntax highlighter. It might also be worth to add that to the README.\n. I would add a screenshort and short button description to the README, i.e.:\nGit Gutter\nA sublime text 2/3 plugin to show an icon in the gutter area indicating whether a line has been inserted, modified or deleted.\nScreenshot:\n\nDiff Popup\n\n| symbol | meaning if the symbol |\n| --- | --- |\n| \u00d7 | close the popup |\n| \u2912 | jump to first change |\n| \u2191 | jump to previous change |\n| \u2193 | jump to next change |\n| \u2398 | copy the content of the git state |\n| \u27f2 | revert changes to the state in git |\n...\nAlternative screenshot:\n\n. In addition I am still wondering whether it would be better to remove the optional button text and only stay with icons.\n. Look here: https://github.com/r-stein/GitGutter/tree/hover_popup for the changed README\n. @sigod The whole code highlighting is done by mdpopups not by me. It also uses pygments as highlighter by default (every user can change this at a global level). So it would be an issue there\n. Yes, I can change the screenshot and I agree to the structure.\n. Yes, I agree to such a section or just write it below the title\nGitGutter\nby X Y, ...\n. You can put \"mdpopups.use_sublime_highlighter\": true, into your user settings to get a matching color scheme as in the screenshots.\n. I have changed the README. You can also make additional changes and finish it for the release.\n. I actually just saw this forum thread https://forum.sublimetext.com/t/setting-priority-for-gutter-icons/8861/5 . However I would like to be added as a collaborator.\n. I think the problem is that it uses shutils.which on ST3, which is not available in ST2. However one could run a manual search for the executable.\n. Might be a good idea to merge and release https://github.com/jisaacks/GitGutter/pull/306 as a Bugfix before the next bigger release.\n. I have only tested it on windows with ST2 and ST3\n. You are using ST2?\n. I am looking forward to make the styling more flexible. I will also include the button styling and increase the size by default.\n. You can modify the font size by modifying the css file in version v1.4.0.\n. > I like this addition!! It would be great if it supported \"Beautiful diffs\" from git 2.9 (see here).\nI am currently using difflib to compare the diff, which is generated to show the gutter marks. So I don't see special support for that. However enabling the feature in your git config might improve both the gutter marks and the diff popup.\n\nI would also prefer if the diff works with a transparent background color (like here) and not with the font color. Not sure how\neasy that is.\n\nI am looking forward add a class for each type (equal, inserted, deleted, replace-inserted, replace-deleted) instead of inline styles and it will be configurable via a css file. Though ST minihtml css is very limited.\n\nFinally, there should be an option to make this the default.\n\nI was looking forward to add a setting for that (the keybinding has an argument already)\n. @jlegewie now there is a css file to configure each diff style\n@rchl I updatet the settings section, but I am not sure how much I should describe the new functionality in the README\n. All the icon are actually unicode characters. Therefore I would assume, that these characters are missing in your font. Do you use the default font or a special font?\n. I also use Windows and have the symbols on both Source Code Pro and the default font. Obviously changing the font just fix the popup is not a solution.\nNot sure how we should solve this. We could switch to image icons, but that will require tinting the image to fit the color scheme and might create new issues on high dpi displays.\nAlthrough the issues sound familar they and their solution are different and should not be merged.\n. It works for me with the same settings and in the font information I only have a small difference (I am using Windows 7)\nVersion: Version 1.0.17;PS Version 1.000;hotconv 1.0.70;makeotf.lib2.5.5900\nOpenType Layout, Digitally Signed, PostScript Outlines\n. I don't remember from where, but I just installed it. However since it is not just in Source Code Pro, but in every font, I doubt it is about the specific font installation.\n. I can confirm, that it does not exists in source code pro on U+27F2 either. I may switch to image icons instead of characters to resolve this issue, but even if I am going on this path it may take some time and I am afraid, that it will yield more issues.\nI also have the symbol with the default color scheme (monokai) and the default theme. Since directwrite is a Window API it might also be something with Windows 10 vs Windows 7.\n. - we could read the button text from the settings, so anyone could just search for a available character or text\n- we could just use images, load and tint them with the appropriate color (I think css tinting of images is not yet available, but scaling is)\n. @FichteFoll I am not so happy with \"approximately equals\" and the \"copy\" either. If anyone has a better idea for \"show/highlight differences\" and \"disable highlight diffences / highlight code\", I will be glad to change it\n@wbond Using icon fonts sounds like a good idea. This would have to be added to ST? (Aside from this it would also be useful to support tooltips.)\n. Can you check, whether GitGutter is enabled? If not just enable it again.\nSeveral people got problems with the update disabling packages.\n. Do you have any gitgutter related errors on the console(ctrl+``), when starting sublimetext or when you inputwindow.run_command(\"git_gutter\", {\"force_refresh\": True})?\n. You also don't have something likeComparing against: HEAD, Inserted: 3, Modified: 4` in the status line?\nSometimes it helps to remove a package and install it again via PackageControl.\n. If you see that in the status line it seems to be a problem with adding the stuff to the gutter. Not sure what the problem is though.\n. 1. The code works on my Win7, but I don't really see the point in moving the settings from a global variable to a class attribute/field. The main reason to avoid globals is to avoid global state changes with side effects, but settings are a global state anyway and we don't change them. Hence from my point of view this is not a reasonable goal.\n2. A settings wrapper to preprocess things like git path may still be useful.\n3. Removing ViewCollection seems to be a good idea.\n4. We should avoid calling self.settings.load_settings(), which calls sublime.load_settings,  in the __init__ because\n\nAt importing time, plugins may not call any API functions, with the exception of sublime.version(), sublime.platform(), sublime.architecture() and sublime.channel().\nAPI Reference\n. Although I appreciate your enthusiasm, I don't really understand your points.\n- Why would it be easier to test? If I change a setting in one setting object it will be propagated to all settings object. So I could easily change the settings for test purposes for any solution.\n- Neither the Sublime API nor the settings name will change so I don't see a maintainability problem. Readability may be debatable, but I don't think something one can significantly increase the readability of settings.get(\"key\", default_value).\n- How would you implement the change listener?\n\nAlso the number of settings instances is not relevant. Each instance just contains the settings id and a little object overhead and takes a negligible to create. Often plugins create a setting object each time they read a setting value.\nThe wrapper class would only be necessary to preprocess the setting for the command line arguments in git_gutter_handler.py?\n. Yes, I like it more with this change.\nJust to add, that settings have globally the same value see (from sublime.py):\n``` py\nclass Settings(object):\n    def init(self, id):\n        self.settings_id = id\ndef get(self, key, default=None):\n    if default is not None:\n        return sublime_api.settings_get_default(self.settings_id, key, default)\n    else:\n        return sublime_api.settings_get(self.settings_id, key)\n# ...\n\n```\nSo the result of locals, globals or instance variables is the same as long as they have the same id (GitGutter.sublime-settings).\n. @jisaacks Yes, it works on WIN with ST2 and ST3. (Also there are no OS dependent changes)\n. We essentially use the same dependencies as BracketHighlighter and many more packages. Also the Jinja2 Package and the Jinja2 dependency are different things. In contrast to the most other packages the jinja2 dependency is hosted on bitbucket and not on github. Therefore I would assume it was a temporary server and not an Package Control or configuration problem.\nThanks for the issue anyway :)\n. It is a nice idea to pass the branch to compare as an argument, but we should keep the other commands (git_gutter, git_gutter_next_change, git_gutter_prev_change, and git_gutter_compare_against).\nIt might be better to pass forward argument to git_gutter_next_change instead of the git_gutter_prev_change command, but this would break existing user created keybindings.\n. I would suggest the proxy solution for git_gutter_next_change and git_gutter_prev_change, because I assume several people have created a keybinding for those.\n. I am not sure about this changes, although I think that we can get rid of ViewCollection, because it has a lot of redundancy. However unifying all commands into one and dispatching them based on the arguments doesn't seem to be nice either.\nFor the unit tests: if we would change the key from view.file_name() to view.id() we would also have a GitGutterHandler per view. So the usual test \"create a view .. do stuff .. assert result/correct regions\" would also work.\nNonetheless I think this is acceptable and since all commands can be proxied it won't have disadvantages for the user and running async events will be a huge improvement.\n. @jisaacks I still don't like combining all commands into one to much. However since I don't have a better idea, I don't see a real issue with it, and it will lead to a major improvement, I approve to merge the PR.\nI don't have twitter or slack, but you can reach my via the email adress in my github account.\n. This seems to be a problem with the reliability of Bitbucket. Just try again after waiting some time.\n. I don't think so. Dependencies update automatically or can manually updated via the Package Control: Satisfy Dependencies command. Also this it not such an big issue, the old version has no problems, but it is just unnecessary.\n. Works on ST2+3 without a problem for me.\nAlso the comments are quite helpful wenn writing code, e.g. Anaconda shows them in a popup. They are especially important for utilities as the Promise.\n. Has it started to work with SourceTree or have you installed an other git binary?\n. From view the code of #309 is ready, but I am not sure how about the styling and what we should include into the README (e.g. an addition screenshot).\n. Using a separate documentation is a good idea. I added small descriptions about the button and the css in the the readme. I don't think it would be useful to add a description of the new feature in plaintext without a screenshot and maybe a table. So I would just let it as it is and hope the term \"difference highlighting\" together with the colors is clear enough.\n. This has been included in #309.\n. I think it would be better to prefix them with gitgutter., e.g. gitgutter.show_status\n. For example mdpopups uses a dot. I like that more, because it is a better distinction betwen the parts.\nE.g. if we have a setting git_gutter_enabled it could be the enabled setting of git_gutter or the gutter_enabled setting of git. However at the end this is not a real problem and I don't care to much about that detail.\n. ST2 has now window settings, hence your solution is ST3 only. view.settings() also reads the project specific settings (and also syntax specific and the User settings)\nhttps://www.sublimetext.com/docs/3/settings.html\n. Have you tried to restart Sublime Text?\n. Have you modified the git_gutter file in the past?\n. As far I know there is one set of moduls, which is initially loaded and an other set, which is used if you reload a module (e.g. work on it and save it or update it).\nThis could be avoided by using from GitGutter.git_gutter_settings import settings, but this would be problematic with the edge version.\nIn addition we could try in the git_gutter_settings.py something like (I haven't tested it):\npy\nif \"settings\" not in globals():\n    settings = ...\n. Oh yeah there is a version in which the folder is called GitGutter-Edge. We currently load the popup css from \"Packages/GitGutter/gitgutter_popup.css\". I am not sure, which is the best way to substitue GitGutter wie the corresponding folder.\n. @deathaxe Ah thanks =)\n. We should also disable to popup in such files\n. Can you try to remove/outcomment this line?The regions are overwritten by readding them anyway so this should not be necessary.. Oh sorry install PackageResourceViewer, press ctrl+shift+p and run the command \"PackageResourceViewer: Open Resource\". Aferwards select \"GitGutter/git_gutter_show_diff.py\" to open the file. Do the change and restart ST to be sure the changes are propagated.\n. ok nice =). We should also ensure to only thread save call api functions on ST2.. I am not completly sure how fixing the blinking is based on the pending PRs. I have just locally commented out that line (from https://github.com/jisaacks/GitGutter/issues/340#issuecomment-261960680) and no problems since then. However we may also ensure that the _update_ui is on the main thread or something like this.. We moved from syncroned handling to a separate thread to improve the performance. Unfortunatly the UI callbacks are still on that thread and remove and readd those icons instead of being on the main thread or just replace them. So its not a single commit, but the whole background rewrite.\nIt's super easy to fix, but I didn't want to conflict with pending PRs and mainly support the diff-popup.. I have created a PR #364 to fix the problem. You can checkout the branch and test it.. Updating is always somewhat problematic with bigger packages, because it only reloads some modules. However that should not happen, because I didn't change that file or the settings file.. > Thanks. Trying it now. It seems to work and makes complete sense. Still not sure why it caused flashing the old way. If I was just sitting there doing nothing, it still flashed. So what was the UI thread doing that would cause the erase to be done separate from the redraw? I even changed my cursor not to blink just in case that was the reason.\nIn the _update_ui method it removes the regions in line 68 and readds them in line 69 (deleted), 70 (inserted), and 71 (modified). If this runs on the main thread the whole method is executed and the redraws are done afterwards. Hence there are no redraws. If it runs on a separate thread each api call is executed on its own. Therefore they are first removed and then added.. I don't exactly know how Sublime Text handles it threads. However all plugin commands are run on the same thread. From my observations I assume the UI updates run on the same thread. Therefore the UI updates are not possible during the method, because the thread is busy. If the calls are from an other thread they can immediately be executed, because the UI thread is idle.. Using milestones seems to be a good idea to group PRs and issues for releases. Additionally creating an issue per release isn't bad either.. I think we should merge #372 and issue a release soon afterwards (maybe a prerelease a few days before). This fixes the flickering, which may annoy a lot of users.. I will create a small PR to improve the readability of the popup css since we now encourage people to change it.. Thanks. First of all: This not a bug, but the expected behavior. Hence it is an enhancement.\nThe reasoning with the blocks is still valid and the solution is not as simple as suggested. E.g.\nif you have\nc\nthen both\nc2\nd\nd\nand\nd\nc2\nd\nwill result in @@ -5 +5,3 @@ b, so can not assume that the first line changed and the rest was just added, but we need to analyse the whole hunk.. Using the word-diff option sounds reasonable, but if we change this we also need to change the diff popup. Since it works on the same git output and changing this output will break the popup. However using that output might improve it.. I also hat a similar issue in ST2. In addition you should not assume that there is an active view in the group, such that the id() function call raises an exception.. The statusbar is a little bit to verbose and a little inconsistent:\nComparing against: HEAD, File is modified, Deleted : 1 region, Inserted : 3 lines, Modified: 5\nWe may make the \"Comparing against\" and \"File is modified/added/commited\" optional and maybe add the branch and shorted the rest with symbols like:\n1-, 3+, 5\u2260. My suggestion would be to create a format string, e.g.:\njs\n\"status_bar_text\": \"Branch: {branch}, Comparing against: {compare_target}, File is {file_state} Deleted: {deleted} region, Inserted : {inserted} lines, Modified: {modified}\"\nWhich you can easily change to \njs\n\"status_bar_text\": \"On {branch}, {deleted}-, {inserted}+, {modified}\u2260\"\nI am aware that it currently works with several status, but it does not seem to hard to change that.\nWith a little documentation this seems to be the easiest and most flexible for the users and for us.\nWe just run\npy\ncurrent_branch = get_current_branch()\nstatus_bar_text.format(branch=current_branch, deleted=deleted, ...). I didn't though about that. My idea would be to support the jinja2 template engine instead. We have it as a ST3 dependency anyway for the popup.\nSetting:\njs\n\"status_bar_text\": \"On {{branch}}{% if deleted != 0 %}, {{deleted}}-, {% endif %}{% if inserted != 0 %}, {{inserted}}+{% endif %}{% if modified != 0 %}, {{modified}}\u2260{% endif %}\"\nCode:\npython\nimport jinja2\nstatus_bar_text = \"On {{branch}}{% if deleted != 0 %}, {{deleted}}-{% endif %}{% if inserted != 0 %}, {{inserted}}+{% endif %}{% if modified != 0 %}, {{modified}}\u2260{% endif %}\"\ntmpl = jinja2.environment.Template(status_bar_text)\nshow_text = tmpl.render(branch=\"master\", deleted=0, inserted=5, modified=12)\nThis gives a less readable setting, but think it is still not to complicated. Especially since the average user knows git and therefore is most likely a programmer himself.. Me must also adept the dependencies to require python-jinja for ST2.\nNot sure about the average user, but we could add a few example setting strings above.. We may also just remove GitGutter-Edge from the package control and use the prerelease feature.. Based on the docs we should move to tag based released anyway:\n\n4. Pick a Versioning Strategy\n(...)\nPlease note that branch-based releases have been deprecated and no new packages will be accepted that utilize that feature. Existing packages are encouraged to update to using tags.\n\nsource\nIt shold not be that hard to join the packages by adding GitGutter-Edge to the previous_names array and removing the old entry. From Renaming a Package. Anyone can create a PR, but you should add a message there, that you approve it.. Thanks for updating that info.. You mean the icons on the left side? The plus, the square and the arrows?. Close in favor of #372. Press ctrl+shift+p and execute the command with the entry \"Package Control: Satisfy Dependencies\". Which ST build are you using?. Satisfy dependencies does not work?. Which ST build are you using?. See #368 for the fix. It is parsed correctly, but it only uses the most specific entry.. * is less specific, but >=3080 does not match. Even in the example * is used as a fallback if the more specific one does not match.. A general note: I would prefer [title](line) over [title][1] ... [1]:<link>. It is a matter of taste I personally like that version more. Also the 80 char line limit is something I don't like in text documents (in contrast to source code). I usually add a newline at the end of a sentence and have soft-wrap enabled at text.*-scope. One problem with a 80 char limit is that you need to change the following lines, if you add or remove a word. However these points are not a reason not to approve the PR, because they are a matter of taste.. In LaTeX it is usually a good rule to have on line per sentence. In markdown this doesn't seem to bad either. A problem could be that some markdown to html converter adds a <br> at newlines (github doesn't do this at READMEs, not sure about the Package Control page).\nMarkdown is mostly for writing stuff readable with very limited structures. Selecting how to write, i.e. *italic* or _italic_ is mostly a personal preference. Same holds for the links.\nOne could argue for the inline links, that they are similar to the resulting document, because you can open them at the place without searching the reference.\nOn the other side the reference style mimics the typical paper structure, where you have citation like [1] in the text and a bibliography at the end of the document.\nHowever I don't care to much about the link style, but prefer the inline links.\n. You can see the README in rendered format here: https://github.com/deathaxe/GitGutter/tree/pr/readme. @jisaacks You can click on the upper tab at Files Changed and then top right at Review Changes and then Approve it. I think we should generally use that (relative new) technique instead of dropping comments.. I think this is distracting, because it is not directly clear that the overlapping arguments belong to the min function and are not Region args:\npy\nregion = sublime.Region(start, min(\n    end, start + self._minimap_size))\nI would prefer something like this:\npy\nregion = sublime.Region(\n    start, min(end, start + self._minimap_size))\nor (if line too long):\npy\nregion = sublime.Region(\n    start,\n    min(end, start + self._minimap_size))\nor (if line still too long):\npy\nregion_end = min(end, start + self._minimap_size)\nregion = sublime.Region(start, region_end)\n. Unfortunately it is the other way around: The colorschemes must support GitGutter. Hence we cannot do something about this.\nHowever you can use PackageResourceViewer and edit the colorscheme and add the entries from the GitGutter README.. I would create a pre tag since it does more than just fixing bugs. . For me you can merge this and #377 . That is currently not possible. It would also require a change at the mdpopups library, where I requested it to be unbreakable https://github.com/facelessuser/sublime-markdown-popups/issues/14.. Is there any advantage of using the textwrap.wrap() method to just using the default popup wrap and just omit the non-breakable spaces between the words?\nIn the inside diff you can just change the _to_html, which explicitly inserts &nbsp; to avoid wrapping. \nManually wrapping something and making it not able to wrap afterwards, instead of just keeping the default wrap ability, just doesn't look like a good idea to me.. Okay, that seems to be buggy in build 3131 and in 3126 it wraps bad, such that you need two scrollbars (where this version is~may be~ better ~?~).. I have created two issues for that:\nhttps://github.com/SublimeTextIssues/Core/issues/1686\nhttps://github.com/SublimeTextIssues/Core/issues/1687. I am also fine with it.. Sorry clicked the wrong button.. It would be good, if someone adds a short solution in the [troubleshooting] section.\n[troubleshooting]:https://github.com/jisaacks/GitGutter#-troubleshooting. If someone really run into #74 it is IMO acceptable to say \"You need to update you git to version 2.11+\", but it should and does just work for the simple cases.. Possible duplicate of #381.. You can just use a string instead of the list. The reason for the list is that a single string would be to lange for one line and json does not support multi line strings, so we just use a list and join it. This may be not intuitive, but I don't see a better solution.. We can only use icons (png images) for that, but if you want to use line icons it is possible.. I think the requirement of git version 2.12 is too much for the advantages, because that is the newest version of git and many people will use older ones. We may support both and check the git version if that is not too much overhead.. Do you see the possibility to support both with reasonable effort?. Have you tried some time measurement to check whether it is really faster?\nI am quite neutral to it, because currently every plugin is tighten together anyway. I see as an additional advantage, that you can conditionally load plugins, e.g. load popup only in ST3. Disadvantage would be, that the files are not automatically reloaded by saving during the development. In addition it may result in some problem on updating if the function signature changed and the files are not reloaded correct.\nHowever we should:\n- pipe plugin_loaded/plugin_unloaded to the subfiles\n- not abuse the __all__ import statement, but use something else. I am in general fine with it and think it's a good idea to improve the startup time, but I have currently not so much time+motivation to review and test it.. Open Preferences > Package Settings > Package Control > Settings - User and insert at a reasonable (correct JSON syntax) position: \njs\n    \"install_prereleases\": [\"GitGutter\"],. Actually the hover popup has nothing to do with the icon size and you can hover anywhere the gutter, e.g. just over the line number. You may just try to move the mouse over the line number and not move it afterwards, because the popup hides if you move your mouse away from it.\nIf that doesn't help please check the ST console ctrl+` for an error, which may occur.. Does it also hide if you trigger it from the command palette/keybinding? I assume it registers a movement away from the popup and hides it, you can try to edit the flags in this line to 'flags': 0 to avoid that.. If it also directly hides from the command palette then editing that file has no use. If you open the ST console ctrl+` and execute view.show_popup(\"test\") does a popup appear and persists?. Does the hover diff popup work as expected in small files?. For the icon sizes you can try to change the theme to Default HiDPI.gitgutter-theme. . You can try this: https://www.sublimetext.com/docs/3/revert.html. 1. have you tried to restart Sublime Text?\n2. Does any errors appear in the ST console ctrl+`?. GitGutter imports stuff from submodules, which is not always perfectly handles by Sublime Text (module is reloaded, but not all submodules and so on). Hence it is somethings necessary to restart ST after major updates to have all modules and submodules in the up-to-date version.. @RafalSkolasinski I fully agree with that https://github.com/jisaacks/GitGutter/issues/395#issuecomment-290784283 . We should \n- check for the git version\n- only add the flags if they are supported\n- support down to the lowest version, which is used by popular package managers\n- at least inform the user if his version is not supported anymore\n- favor compatibility over speed/minor improvements\nI don't think requiring version 2.11 (by changing the flag) was intentional, but nobody reported it in the beta-tests/pre-releases.. @deathaxe can't we just check the git version and select the corresponding diff method? Even if we create a setting \"diff_method\": \"traditional\"/\"archive\"/\"cat-file\" (with comment documentation), it would be okayish. However IMO it should have precedence to support all git versions, which ship with the common package managers, over supporting all project setups.. @deathaxe @jisaacks Since the change seem to work we should cut 2.7.1 soon to fix this issue for everyone.. Please see https://github.com/jisaacks/GitGutter/issues/416#issuecomment-304572606. Can you please run to check that these calls does not result in None:\npy\nsublime.load_settings('Preferences.sublime-settings').get('mdpopups.sublime_user_lang_map', {})\nand \npy\nfrom mdpopups.st_mapping import lang_map; lang_map. Open your user Preferences and check that there is no key with the name mdpopups.sublime_user_lang_map, i.e. not \"mdpopups.sublime_user_lang_map\": null,.. Weird, but this this does print None?\npy\nprint(sublime.load_settings('Preferences.sublime-settings').get('mdpopups.sublime_user_lang_map', {}))\nThen just try to add \"mdpopups.sublime_user_lang_map\": {}, to your user preferences (Preferences > Settings, right side) at best somewhere at the bottom. Not sure what's the problem, but maybe you have an other package, which sets this preference to null.. > Just realized that the popup was working where there was no diff - i.e when adding a few blank lines\nWe only need to call that function to create the syntax highlighting for the text before, so I expected this.\nGood that it works now =) I assume you have somewhere in a package a file Preferences.sublime-settings, which contains the line \"mdpopups.sublime_user_lang_map\": null, but I don't understand why someone would create such a package :/.. May be a good idea to add a \"Compare Against: Index\" command. How do you get the information \"a deleted line followed by added lines\"? here is the code to parse the diff and the explanation why we are doing it like this is in the comment, but we are interested in improving it. So it would be nice if you had a suggestion for that.. Yes, but that shows the code before and after.\nSo if we have\nBefore:\nA\nB\nand change it to\nAA\nBB\nThis will result in\n- A\n- B\n+ AA\n+ BB\nOn the other hand if we change it to \nAA\nD\nit will also result in\n- A\n- B\n+ AA\n+ D\n\nIn the first case I would mark both lines as change, but in the second I would the first line would be changed, then there would be a deleted block, and then there would be an added line. I don't think there is a good solution to decide whether it is similar enough to be a changed.. I am just saying that the + and - signs are not as useful as you may think at the first moment =).. No, thats fine I like educating ;) The deleted lines are shown in the hover diff popup by-the-way.. No there is no API for that.. Is it possible to set the icon per file? I though it was only per file type/extension.. > This may be caused by PHP syntax need <?php to work.\nThat's the reason, we just take the source code and use the code highlighter to highlight that specific part. This can obviously be problematic, but usually works well.. We create temporary files with the git_gutter_ prefix. However (if I am not mistaken) these files should just contain the content of the file you are currently working on and the corresponding content in the git to which we compare it.. To be sure: You see a diff when you type git diff *file_name* in the shell/cmd, which is opened in the corresponding folder?. Do you have any output in the ST console ctrl+`? Have you tried to restart Sublime Text?. The updates etc are handled by Package Control. If you want to do it manually you should install it manually and set the ignore_vcs_packages to true in your package control settings.. Just delete the two mdpopup settings.. You can use jinja2 to create the content line you want, but if I understand you correctly you also want to have additional variables, like staged files or untracked files?. I would say wrap is by default null/None to use the global setting and can be true/false to explicitly set it.. With those settings enabled GitGutter does not add an gutter icon at those positions to let SublimeLinter have the precedence in every case. If you disable it both at a gutter icon and I one of those icons will be visible. In your case the SublimeLinter icon is visible and when you remove it the hidden GitGutter icon will be shown again.\nIf the setting is disabled the GitGutter icon will only be added in the next GitGutter refresh.\nHence this is the expected behavior and I don't see how we can improve that (except maybe with a better understanding of the icon precedence).. Do you know in which git version this option has been added? We already hat some problems by using flags, which are not supported in older git version, but I don't think that is the case this time.. If this is not really an issue with other packages we can just use #477. That sounds nice and could not only work for gutter popups, but for all potential popup conflicts.\nI think for the priorities a dict may be better than a list: \njs\n\"hover_popup_priorities\": {\n    \"Anaconda\": 9,\n    \"GitGutter\": 5,\n    \"SublimeLinter\": 8,\n    //...\n}. If a package has several popup I would just add several settings, e.g.\njs\n\"hover_popup_priorities\": {\n    \"GitGutter.diff_popup\": 4,\n    \"GitGutter.revert_popup\": 5,\n    // ...\n}\nNot sure how to set the default priority, but we could maybe add a extra method popup_priority, which is called and initializes the value if it is not present (we also need to get the name from somewhere). My motivation for such a setting is that the user can decide which popup should be shown, e.g. someone may prefer a Linter of an other one or even GitGutter.. I don't think this in general solves the problem with other packages, but is a solution especially focused on SublimeLinter. I would prefer a more general solution, which also scales to other packages and is not only for GitGutter (I think if GitGutter and SublimeLinter start with general solution other developers will join), but I have no idea how this solution could look like.\nWe may wait few days and see of someone has a clever idea and merge it if no one has a suggestion.. I agree that this may be \"good enough\" for real world use cases =). This seems to be an issue with package control due to some recent changes of the github API.\nhttps://github.com/wbond/package_control/issues/1334. The problem with integrating git blame into the popup is that the popup only appears on changed lines.  Hence you would change the line to enable the popup and then press the git blame button to open the blame. This doesn't sound like a reasonable behavior.. Let's say you want to blame on line 34, but you didn't change the line. Then the git gutter popup won't appear on the line. Hence you need to change it to enable the popup and press the button.. If you only want to blame lines you have changed the button makes sense, but git blame is usually not only used on changed lines.. There are already similar packages for other editors as stated int the readme: https://github.com/gitgutter\nPorting a package to an other editor is a lot of work and should be done by people using the editor.. We use this command to decide whether we should enable gitgutter at all as you can see here. If it is a serious issue for you, you can use PackageResourceViewer and delete these two lines as workaround.. I also think we could add a \"dont_validate_and_assume_git_version\":  \"1.7.2\" setting, which will disable the call and on validate and just directly uses that version number if the setting is present and not empty.. I would add that option as opt-in and for only those people who really have such a performance issue.. Since ST3 is out of the beta it shouldn't be a big issue to drop ST2 support (as a lot of other packages do). I.e. just create a different branch for ST2 and don't deliver new features for it.. when retrieving self.git_binary_path_fallback will use the non-static field if present and the static otherwise and GitGutterHandler.git_binary_path_fallback will always use the static field. In the current code it would not make any difference, because we don't have a non-static field.\n. You initialize settings here and in line 106, so you could remove this.\n. Although I am aware that this is not from you, it might be better to use parentheses for line breaks as recommended in pep8:\n\nThe preferred way of wrapping long lines is by using Python's implied line continuation inside parentheses, brackets and braces. Long lines can be broken over multiple lines by wrapping expressions in parentheses. These should be used in preference to using a backslash for line continuation. \n. Please also wrap long import statements with parentheses\n. Please inherit from object (GitGutterCompareCommit(object)). On python 3 this is redundant, but for python 2 there are minor differences.\n. Same (inherit object)\n. same (inherit object)\n. same (inherit object)\n. Actually I didn't want to remove that line break. I will add it back.\n. I will take a look at that.\n. I played around with this and thought this would be better. The normal flag is \"HIDE_MOUSE_ON_MOVE_AWAY\". However if someone actively clicked on the popup he mostlikely want it to be persistant, so I make it persistant.\n. Since the style it not inline anymore I will remove it anyway.\n. I think I will switch to rem, because it is recommended in minihtml and maybe also make it a little bit bigger =)\n. Can you be a little more specific about this? I don't see an error on ST2 (it doesn't work there, because the popup is ST3 only).\n. I don't have the problem on windows with ST2, but sounds fair to only import them when necessary.\n. Yeah it is just to avoid everything to be imported, since it is not necessary on ST2 anyway. I want to check for version 3080, because it introduces the popup, even if mdpopups is available.\nYes, the message is not important at all.\n. The reason to call show_diff_popup (unsted of _impl as above) again is, that the point and therefore the line has changes. The diff_info is for that specific line/hunk and we must update that.\n. Not sure if that fix is necessary, because changing the file content would hide the popup and therefore the button. I just think the diff should be parsed differently. However it is also not problematic and hence I can also change it that way =)\n. Okay then I misunderstood something and will apply your suggestion\n. ups thanks\n. The other entries also start with \"Goto\", so this would be reasonable.\nWe may also add a link to GitGutter, e.g. \"GitGutter: Goto Next Change\", because it is not clear that the change is related to the git state. In addition we may disable that command outside of git files and if no change is available.. We could also rephrase it and include the information, that is targets the git stats, e.g. \"Goto Next Git Change\" or \"Goto Next Git Difference\".. While Delta is common as difference operator in mathematics and also often used in computer science, I would not assume everybody understands it. \nI vote for difference.. You should use \"\".join() when you build a sequence of many strings not to concat only 2 strings. First build them with an array and at the end join the array.\n\nI personally prefer \"{0}\".format(x) over %.\nHowever in such cases I would just use print(\"GitGutter failed to run git:\", exception) and add from __future__ import print_function to the top for ST2 compat.. This searched all gitgutter_popup.css files before. Now you changed it to only search those defined in a setting. I don't think that's an improvement.\nAlso it is performance wise better to create a (mutable) string array and join it than to add each single string, which creates a new immutable string.. Please use parens instead of \\ for line continuation.. It requires all dependencies. However since they are automatically installed, we should just omit that. People, who don't use Package Control are a small minority and they are listed above anyway.. Using citations > for this does not look good.. This should just be a block not a cited block.. I would just remove that line, because it is more distracting than helpful.. We should link to jinja2 not to the dependency and describe to \"how to use it\" not \"how it is handled in the background\".. This is not necessary it will automatically check the dependencies. You usually only need that command to check for updates on the dependencies.. Please use parens:\npython\ntemplate = (\n    settings.get('status_bar_text')\n    if _HAVE_JINJA2 else None\n)\n\nThe preferred way of wrapping long lines is by using Python's implied line continuation inside parentheses, brackets and braces. Long lines can be broken over multiple lines by wrapping expressions in parentheses. These should be used in preference to using a backslash for line continuation. \n\npep8. We may better use self.view.erase_status('00_git_gutter'). I would avoid that in the default mode. I don't think the file state is so interesting, because you know that anyway.. Just the file state. The compare against may be useful unless it is HEAD. The branch may also be helpful.. You must also handle the values True and False, because they were valid and hence still in some settings files.. Oh sorry for the late reply. Yes it does work without a problem. I still prefer something like return int(width) if 0 <= width <= 9 else 100000 or just width = int(width) a line above.. Is there any particular reason you have a fixed max width?. Better just write -1 here. I fully agree to this, but I still prefer to just allow the users to make it ugly. However you can do it as you want to :). For safety reason I would ensure that msg is a string, i.e. msg = 'GitGutter: ' + str(msg) or msg = 'GitGutter: {0}'.format(msg). I think we should just remove the \"text\" caption. It is just way to big for the popup and icon issues have been fixed in the newest versions.. I think this css is not support for 3118 and before. Not sure how problematic that is.. Yes, but \n1. even in 3119 it is not so common \n2. with the \"text buttons\" the button line is way to large and not better than just having the \"missing symbol\" icons and remember the order\n3. I don't think people really dig into the settings and decided to use it (people who do something like this also update their ST)\n4. I started with text buttons and moved to symbols and in the hindsight I should have removed them in the initial PR. Doesn't it result in a an issue to create the temp file before creating the directory?. ",
    "redochka": "Problem still there. Please check. ",
    "jhakonen": "I seem to have the same problem. Seems to be working partially in my case.\nThis works as expected:\n1. Add a bookmark to a line, bookmark icon (white right pointing arrow) appears on the line\n2. Modify the same line, bookmark icon remains, as expected\nHowever, this does not:\n1. Modify a line, GitGutter's changed icon (yellow square) appears\n2. Add a bookmark on the same line, changed icon remains, should have changed to bookmark icon, but did not.\n3. WORKAROUND: Modify another line, changed icon appears. At same time the previous line's icon updates from GitGutter's changed icon to bookmark icon.\nUsing ST3 3126, GitGutter 1.5.1.. ",
    "TauPan": "Forgot to mention that \"not work\" in this case means that I see no characters in the gutter.\nI just noticed that it doesn't work for many other files. M-x global-git-gutter-mode gives message: \"Here is not Git work tree\"\nAlso not helping:\n'(git-gutter:always-show-gutter t)\n'(git-gutter:window-width 1)\nAt some point it worked for a couple of files, but at the moment I can't make it work at all.\nI use Version: 0.28 from marmalade.\n. Ugh, entirely wrong github repository. Shame on me. -> Invalid\n. ",
    "michal-m": "I tried now that you mentioned it, but unfortunately it didn't seem to change anything. Every edit action (every single character change) seems delayed a bit.\nI did double check this and as soon as I remove GitGutter from ST3 things go back to normal.\nDon't think I mentioned it, but this is on Windows only - I haven't noticed such a problem on OS X. Below my current preferences:\n{\n  \"git_binary\": \"c:\\\\.msysgit\\\\bin\\\\git.exe\",\n  \"live_mode\": false,\n  \"non_blocking\": true\n}\n. ",
    "KatieK2": "I would also like to be able to disable GitGutter for some files. I think it would be best to specify files and directories for GitGutter to ignore in a config file. The reason for wanting this is that not all of the files I work on are in a Git repo.\nThanks for the very awesome plug-in!\n. Yuck - what happened there. Sorry about that - lemme fix it.\n. ",
    "zxqfox": "Is it possible to run git diff in different thread? It could remove this lag.\n. ",
    "enzy": "Too late, it was 10 months ago and I don't remeber a thing.\n. ",
    "derekleverenz": "I actually switched back to vim as my primary editor a while ago, so I'm not sure if this is still an issue. If it's helpful I can install sublime again and see if I still get this. Otherwise this is fine to close.\n. ",
    "archydragon": "I sincerely apologize for my inattention. Please check the next commit.\n. ",
    "ewendel": "I'm also experiencing this problem - ST3 seems to read both properties as 'None' regardless of their value in the settings file. I'm also initializing them both directly in the event file as of now.\n. ",
    "sigod": "Just had the same issue (st3, win7 x64). Fixed by patching events file.\n. @jisaacks I just initialize them directly, as @ewendel did.\n. @jisaacks Windows 7 x64.\n. @jisaacks \nThere is too little work for pull request.\n. Why not just leave it on package control?\n. Oh, I see, you need to handle it yourself.\n\nBut now its been a few weeks since I worked on it and I cannot remember what the issue is off hand.\n\nSorry to hear that. I myself ran into this problem few times. todo and fixme comments help a lot in this.\n. @ryanmargheriti See non blocking mode section in README.\n. Yes.\n. No, it doesn't fixed this issue.\n. @jisaacks, thanks. I'm glad to hear it. I would like it, of course.\n. Have you configured GitGutter properly? It must know your git's location if path to a git isn't presented in PATH environment variable.\n. Are you edit file that is located inside some repository? If file isn't tracked you must set show_markers_on_untracked_file to true.\n. > default settings\nYou should edit Settings \u2014 User.\n. Preferences -> Package Settings -> GitGutter -> Settings \u2014 User -> git_binary\n. Have you seen my comment about repository?\n\nI suppose I should get a '+' sign as soon as I start typing, right ?\n\nIf live mode turned on.\n. > have to admit I don't really understand about tracked or untracked, but changed it to yes\nBut file is located in git's repository, right? You can find some explanations here.\n\nI installed the package by copying it to packages directory out of zip file (from GitHub), didn't use the clone command\n\nBetter install Package Control, it's really useful.\n. Well, GitGutter is a tool for a tool. It won't work for you If you don't use git.\n. You're welcome :)\n. @mostie, also you'll find this helpful: Git Flow and GitHub Flow.\n. :+1: \n. > Could you recommend something to read?\nhttp://git-scm.com/doc\n\n\nI have to install Git but in order to do it I need to install msysgit first.\n\n\nYou can download Git here: http://git-scm.com/. I always choose Use Git from Git Bash only and everything is works fine.\n\nIf git is not in your PATH\nHow do i know?\n\nYou may examine PATH variable. Or just open Window's console and type git. You should know by output of this command whether Git is in your PATH or not.\n\nWhere can I do it? Preferences-Package Settings-GitGutter-Settings User?\n\nYes. Don't forget to replace \\ with \\\\.\n\nto the location of the git binary, e.g. in a portable environment;\nWhere is it?\n\nApparently, where Git is installed. In my system it is c:\\Program Files (x86)\\Git\\bin\\git.exe. \n. Yes. There's only one moment left: you have to use Git. GitGutter shows you the difference between current edited version of the file and the version that is stored in the Git repository (version which corresponds to the HEAD pointer, since there's can be a lot of versions of the same file). Therefor files must be tracked by Git.\nYou can use \"show_markers_on_untracked_file\": true, which I find very handy. Note that it works only if file is inside of the Git repository.\n. > Added \"show_markers_on_untracked_file\": true\u201d to my sublime settings file.\nIt's a GitGutter's option, so you must place it into GitGutter's settings file.\n\nIt is still not working but I do no know what the HEAD pointer is and how to work with it.\n\nWhat I meant was \"version of which Git thinks that it is a current version (i.e. version you currently work with)\". Read something like this, it should help you to start with Git.\nAlso, I noticed little yellow dots on your screenshot. Do you have some plugin installed that draws them? There's a slight chance it's conflicting with GitGutter. \n. +1 for idea\n. Wow, you literally rewrote whole GitGutter.\nI'll try it at day to day work.\n. Yes, I currently use it at work.\nWindows 7, x64. Latest Sublime Text 3.\n. Looks like async version of GitGutter causes Package Manager to hang.\n\nAlso, Package Manager never loads \"install package\" interface with GitGutter installed. Even if GitGutter disabled.\nNot sure what is going on.\n. > 100644 \u2192 100755\nWas change of file permissions intentional?\n. It cannot be merged right now as there's conflicts. You need to fix them first.\n. I'll test in the upcoming day or two. But I only can test it on Windows.\n. Tested it on Windows 10. Works without problems.\n. Maybe it's time to make a new release?\n. Interesting. I have somehow missed this PR.\n@bbrks Can you resolve conflicts?\n. @fatdollar @Zooce \nEdit git_binary in GitGutter's settings.\nI've just tried to make my git_binary incorrect and that's what I see now in logs:\nTraceback (most recent call last):\n  File \"C:\\Program Files\\Sublime Text 3\\sublime_plugin.py\", line 553, in run_\n    return self.run()\n  File \"git_gutter in C:\\Users\\sigod\\AppData\\Roaming\\Sublime Text 3\\Installed Packages\\GitGutter.sublime-package\", line 34, in run\n  File \"view_collection in C:\\Users\\sigod\\AppData\\Roaming\\Sublime Text 3\\Installed Packages\\GitGutter.sublime-package\", line 55, in untracked\n  File \"git_gutter_handler in C:\\Users\\sigod\\AppData\\Roaming\\Sublime Text 3\\Installed Packages\\GitGutter.sublime-package\", line 180, in untracked\n  File \"git_gutter_handler in C:\\Users\\sigod\\AppData\\Roaming\\Sublime Text 3\\Installed Packages\\GitGutter.sublime-package\", line 196, in handle_files\n  File \"git_gutter_handler in C:\\Users\\sigod\\AppData\\Roaming\\Sublime Text 3\\Installed Packages\\GitGutter.sublime-package\", line 261, in run_command\n  File \"./subprocess.py\", line 824, in __init__\n  File \"./subprocess.py\", line 1118, in _execute_child\nFileNotFoundError: [WinError 2] The system cannot find the file specified\n. @Zooce You need to escape backslash. Try C:\\\\Program Files (x86)\\\\Git\\\\bin\\\\git.exe.\n. @Zooce Then maybe you have x64 version of Git?\n. @Zooce, try C:\\\\Program Files\\\\Git\\\\bin\\\\git.exe. Though, you previous comment tells me it probably won't help.\nTry to update Git as a last resort.\n. @Zooce, looks like you are... Though, if it's work machine you can ask admins for help.\n. > The problem is that I open sublime text via subl from git bash\nWorks for me.\n. > I've been doing all of this in sublime text 2 and I'm not sure that this package is supported in sublime text 3. The collaborators would have to confirm that.\nThis package supports both, ST2 and ST3, versions. Though, I haven't used ST2 for a long time.\n. @mmcintyre123, same Git version?\n. Hi. You might want to try changes from this PR: #240.\n. Probably same as #223.\n. @AviBueno What screen resolution do you use?\n. Nice color schemes.\n. That's probably OK. Just a small artifact of Git's diff algorithm.\n. Yes, I use Windows. I'll check in a few days. Currently I'm too busy with the new project.\n. I'm using it for few days now. No issues so far. (Windows 7/10)\n. See #277\n. I've just updated Git and I've the exact same version now. GitGutter still works for me.\n\nThe windows in the version name is weird.\n\nThat's quite standard now.\n. #295\n. Very interesting. I'll try it later.\n\nDo you think it would be better to use icons instead of text\n\nHow about an option for this?\n. I see on your screenshot the pop up ignores configuration for drawing white space. Can it be fixed?\n. How bizarre. OS? Sublime's version?\n. What version exactly? 3114?\nIt looks more like a bug in Sublime/Package Manager.\n. You've mentioned messages boxes. What was written in them?\nIf you unignore GitGutter will it start spamming you again? What if you update Sublime?\n@absay What version of Sublime Text do you use? Also, look at the questions above.\n. Probably. But I don't get this message boxes. It just silently reports in the console.\n. Oh, I see. For some reason it doesn't get called for me.\nIntroduced in #242.\n@jisaacks @johnburnett ping\n. > it should only get called if it cannot find git, which might explain why you are not seeing it.\nYes, I guessed that because now GitGutter works even without setting git_binary. I tried setting incorrect path, but it just silently dumps error messages into the console.\n. Works for me. What's your OS?\n. > What do I have to make that custom icons didn't change on default after the GitGutter updatings?\nNothing. Whole package is overwritten on update. The issue ifself must be addressed.\n. What do you exactly mean? Nothing changed for me, but GitGutter was always showing +s for newly added files after they being staged.\n. Just updated. It still works on Windows 7. What's your OS?\n. ev?\n. ",
    "bizoo": "Any news about this issue ?\nCurrently, settings are ignored is ST3. I'm on Windows, but I suppose it's for all OS.\nAnd live_mode introduce too much lag (didn't try with non_blocking, cos I couldn't change the settings either).\nIf you want to cache the settings, you must use the module method plugin_loaded().\nThere are plenty of example in other plugins (https://github.com/bizoo/SortTabs/blob/master/auto_sort_tabs.py#L41)\n. Are you interested by a Pull request ?\nI really don't know if I'll have time to make it, so don't expect it.\n. Looks like everything works great now.\nThanks for this great plugin.\n. ",
    "matthiasg": "this would be a great merge (from a functional pov) since i currently have to disable gitgutter while editing new files that have not yet been added to the git staging area or git repo (or add them prematurely).\nThis happend even with \"non_blocking\": true, there is a multisecond delay while typing. Its obviously taking a long time to find out the file cannot be diffed yet.\n. i am using ST3... :)\nOn Fri, Nov 22, 2013 at 4:58 PM, JD Isaacks notifications@github.comwrote:\n\n@matthiasg https://github.com/matthiasg Non blocking only works on ST3,\nthis would be a feature for ST2 for when you can't use non blocking.\nhave to disable gitgutter while editing new files that have not yet been\nadded to the git staging area or git repo\nYou can turn on this featurehttps://github.com/jisaacks/GitGutter#untracked-filesand it should stop git gutter from parsing on untracked (new) files.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/jisaacks/GitGutter/pull/89#issuecomment-29083244\n.\n. same here .. also 3059 and live mode also made it a little faster but still noticeable, thus I disabled it for now\n. You could possibly just use a throttle function around the lookup. We use that to limit expensive unspecific searches in our UI .. E.g first change runs the check ... Next change within e.g 250ms gets new check queued to run in e.g another 250ms. But should within that timeframe a new change be recorded when there is a pending check already, cancel the old timer and create a new one at yet another 250ms in the future.\n\nNo expensive checks as to what was done specifically.\n-----Original Message-----\nFrom: \"JD Isaacks\" notifications@github.com\nSent: \u200e02.\u200e02.\u200e2014 23:35\nTo: \"jisaacks/GitGutter\" GitGutter@noreply.github.com\nCc: \"matthiasg\" mgt576@gmail.com\nSubject: Re: [GitGutter] sublime lags with gitgutter (#126)\nSo when live mode is on, GitGutter runs with every single modification. For example, when you type the word function, it would have run 8 times. Its likely that there was no change between the first and last character as to which icon git gutter should show.\nI am trying to think of a way to make git gutter not have to run one every single key stroke in order to give a live view. I am thinking through how this would work. I would like to make it so that git gutter only runs when:\nyou start making a change \nonce you stop typing \nany time you change how many lines are in the document \nany time you cut or paste into the document \nThis is easier said than done though, it doesn't seem like there is any information on what the modification was in the on_modify event that git gutter is running after. So I would have to figure that out some other way.\nI think if I can figure out a way to accomplish this, it should solve most performance problems.\n\u2014\nReply to this email directly or view it on GitHub.\n. if you triggered a on any change .. but throttled the action behind the\ntrigger .. it would run immediately after the first change but delay when\ntoo many changes come in quick succession..\nOn Mon, Feb 3, 2014 at 5:29 PM, JD Isaacks notifications@github.com wrote:\n\n@matthiasg https://github.com/matthiasg I was thinking something\nsimilar for while you are typing on the same line but any anytime a\nmodification changes how many lines there are, then run immediately. This\nis because when a line is added/removed, it is most likely going to change\nwhat icons to show and want them to show up right away. Basically I want it\nto still feel really responsive and just be smart about not running at\ntimes when it doesn't need to.\n\nReply to this email directly or view it on GitHubhttps://github.com/jisaacks/GitGutter/issues/126#issuecomment-33971614\n.\n. \n",
    "dantas": "Why are we not funding this? =)\n. ",
    "yesbox": "The point of this patch was to reduce the latency when typing with GitGutter with the added benefit of somewhat lowered CPU usage/battery drain. If the lag is gone with ST3 the patch no longer serves a purpose. Thanks for the feedback.\n. ",
    "mwillmott": "I have bodged this option for a while by just putting -w as an argument into the command you referenced. Just submitted a pull request for this with a tidied up option.\n. ",
    "SBoudrias": "@jisaacks Yeah, I resolved the configuration problem. But that was not the point of this issue.\nI just think this plugin shouldn't break sublime if it cannot find the git binary. Could alert or notify the user, but it should be careful not to use all sublime CPU resource and lagging the editor.\n. ",
    "victoredwardocallaghan": "Seems to be part of spf-13-vim, so yes. Should I file this bug there? Why do these plugins have the same name?\nCheers,\nEdward.\n. ",
    "ltribolet": "Same here on Windows 7\n. I reinstalled Git directly on C: directory root (c:/git) and it works. It seems that Sublime doesn't know to handle Windows paths with spaces inside.\n. ",
    "ryanmargheriti": "I am getting the same issue on Windows 8. \n. I am getting really bad sublime performance on Windows 8.1 with GitGutter installed. It can take up to a second and a half to respond to keypress. Upon disabling the plugin the issue disappears. \n. ",
    "halofx": "Reinstalling Git straightened things out for me also. Was able to install in \"Programs Files (x86)\". May not have had Git Bash installed before, as I actually use Git on the command line, through putty and not in Windows. Only have Git installed on Windows for using GitGutter with Sublime.\n. ",
    "brunosabot": "Currently, you can not make the difference between a non-versioned file and an unchanged file, that's what I really need and what I point out in this issue.\nIf it's possible to implement this behavior as an option, it will be great, but you may have a better idea to handle this.\nThanks,\nBruno\n. Hi,\nI start working on this request.\nIn my experience, it's impossible to put the marker on the tabs or on the opened files on the left panel. So the only way is to put the marker on every line to notify an untracked file.\nFYI, there is an easy mean to list untracked files: git ls-files --other --exclude-standard\nAnd, for ignored files: git ls-files --other --exclude-standard -i\nI will make my pull request after few enhancement/checking\nBruno\n. I look into themes to understand what is possible with tabs, and it actually does not allow to add states.\nThe different theme can alter style for tabs with modification, unactive tabs and active tabs.\nSo, did you still expect my pull request, even if it add the marker on every line of the file or did you think that adding a marker on the gutter for every line is unexpected, even if it's a setting?\n. Hi,\nYou're right for 1. I will make the fix soon.\nAbout 2, it's how I get untracked and ignored files as explained here: https://github.com/jisaacks/GitGutter/issues/100#issuecomment-19835418\n-- Bruno\n. Yes, the x is not as thick as the +, but I can't make the right icon with my few photoshop knowledge. I assume the best you can do is to fix the icon youself.\n. ",
    "goldfire": "Ah, I didn't think about the theme. I'm using Soda Dark.\n. ",
    "chetan": "I'm seeing this as well using the latest ST3 build (3053 dev channel right now). I cycled through all themes and it's still the same, albeit colored different sometimes. \n. @jisaacks the issue is not the white color, it's the square icons as in the screenshot above. \nOddly, on another machine I do get the correct icons. Both machines are running the same ST3 build and use synced preferences via dropbox (using the instructions on the package control site). \n. I just checked my problem machine and it doesn't appear to be a problem anymore. Previously I was seeing only squares no matter the type of change that was being represented. \n. ",
    "darrennolan": "I've had the same for a really long time.  Not sure why.\nST Dev 3061.\n\"color_scheme\": \"Packages/Color Scheme - Default/Twilight.tmTheme\"\n\"theme\": \"Phoenix Dark.sublime-theme\"\nFor all insertions, deletions or changes, it always comes up as a square.  Changing my theme just changes the color.  Co-worker sitting beside me has his working, so I setup my sublime the same as his, and that didn't resolve the matter.\n. ",
    "brownieboy": "I've just started getting the problem where the GitGutter icons show only as squares.  Sublime Text build 3103 on OS X El Cap 10.11.4.\nI tried renaming my ~/Library/Application Support/Sublime Text 3 and starting again from scratch.  The problem still happens, even with GitGutter and Package Control as the only installed packages.  Switching between different themes doesn't help.\nI have another Mac where the icons do show correctly.\n. ",
    "abiramipattar": "I Get the same error too..Any solutions?\n. ",
    "dornfeder": "same here...\n. ",
    "vohof": "same here...\n. ",
    "biin": "Same here..\nno Solution ???\n. ",
    "jmcbee": "I solved it.\n. ",
    "rushfly": "First, I removed gitgutter through package control.\nThen  deleted all files in the directory of \"Data\\Packages\\User\\Package Control.cache\" after close sublime.\nRun again and reinstall gitgutter, it's works!\n. ",
    "danicoolpak17": "Dear All, \nI was having the same error over and over again in ST3. I was trying to install AdvancedNewSideBar plugin and this error showed up over and over again. \nI tried this and it worked perfectly with me. Right click on ST3 ,(icon) or from installation dir ,open properties and set compatibility to your window version and them click on always run as administrator (I choose run as administrator for all users). \nThanks \nDani\n. ",
    "geedew": "@jisaacks Confirmed that it does not work (removing and wiping cache).\nThis continues for me on Windows 10, ST3\n. ",
    "hsandt": "I solved the problem by changing my GitGutter User preferences. In my case, the git binary path was wrong, not including the filename itself. It was set to C:\\Program Files (x86)\\Git\\bin instead of C:\\Program Files (x86)\\Git\\bin\\git.exe.\nOpen User\\GitGutter.sublime-settings (Preferences > Package Settings > GitGutter > Settings - User):\n{\n  \"git_binary\": \"C:\\\\Program Files (x86)\\\\Git\\\\bin\\\\git.exe\"  // replace with your own path, including .exe\n}\nLong story:\nAfter looking at the source code (git_gutter_handler.py), I searched on issues with Python subprocess.Popen and found a fix on http://stackoverflow.com/questions/3005437/windowserror-error-5-access-is-denied, some answers recalling you to call subprocess.Popen with the executable full path. By printing the arguments of Popen I realized that GitGutter really needs you to define the full executable path of git.\nhttps://github.com/jisaacks/GitGutter/issues/191 and https://github.com/jisaacks/GitGutter/issues/178#issuecomment-72684981 also refer to the git_binary setting, used as argument for Popen.\n. 1. So there is no \"margin\" property (an external space, not contained in the phantom area), only \"padding\"?\n2. What if we add an extra offset of 1 or 2 characters before the phantom? It would at least allow the user to click a little on the right of the eol, without wasting too much space in case the phantom text is actually big and needs a lot of space.. ",
    "s-a": "haha :) it seemed to work with svn too. sorry!\n. ",
    "markaduffy": "After a restart, it only seem to happen on one particular file. All other files are fine.\n. Its been fine for a while now.\n\u2014\nSent from Mailbox for iPhone\nOn Wed, Oct 30, 2013 at 6:52 PM, JD Isaacks notifications@github.com\nwrote:\n\nIs this still happening if you update to latest version? I remember fixing another bug related to encoding types, that might have fixed this as well.\nReply to this email directly or view it on GitHub:\nhttps://github.com/jisaacks/GitGutter/issues/107#issuecomment-27446903\n. \n",
    "Harreh": "Also having this issue. No issues reported in the console.\n. I'm not sure what you're expecting me to do. If you mean Sublime's console, then I get:\n```\n\n\n\nwhich git\n  File \"\", line 1\n    which git\n           ^\nSyntaxError: unexpected EOF while parsing\n```\n\n\n\nOtherwise you must mean my OS console, or terminal. Expect I'm on Windows so that command doesn't exist.\n. I have it set to:\nC:/Apps/Git/bin/git.exe\n(with or without git.exe, it's no different)\nI don't have git in my PATH environment variable, but it works from command line fine.\n. ",
    "mariusbrn": "Also with win7 (64bits) and sublime 3 but me i have a error in the console (installed via package manager):\n```\nTraceback (most recent call last):\n  File \"X/subprocess.py\", line 1090, in _execute_child\nFileNotFoundError: [WinError 2] Le fichier sp\u00e9cifi\u00e9 est introuvable\nDuring handling of the above exception, another exception occurred:\nTraceback (most recent call last):\n  File \"C:\\Program Files\\Sublime Text 3\\sublime_plugin.py\", line 526, in run_\n    return self.run()\n  File \"git_gutter in C:\\Users\\bob\\AppData\\Roaming\\Sublime Text 3\\Installed Packages\\GitGutter.sublime-package\", line 42, in run\n  File \"view_collection in C:\\Users\\bob\\AppData\\Roaming\\Sublime Text 3\\Installed Packages\\GitGutter.sublime-package\", line 36, in diff\n  File \"git_gutter_handler in C:\\Users\\bob\\AppData\\Roaming\\Sublime Text 3\\Installed Packages\\GitGutter.sublime-package\", line 153, in diff\n  File \"git_gutter_handler in C:\\Users\\bob\\AppData\\Roaming\\Sublime Text 3\\Installed Packages\\GitGutter.sublime-package\", line 196, in run_command\n  File \"X/subprocess.py\", line 818, in init\n  File \"X/subprocess.py\", line 1096, in _execute_child\nFileNotFoundError: [WinError 2] Le fichier sp\u00e9cifi\u00e9 est introuvable\n```\n. ",
    "Zeeker": "I have the same issue. Using Windows 7 64bit and Sublime Text 3.\nHere the error output from the console:\n```\nTraceback (most recent call last):\n  File \"X/subprocess.py\", line 1090, in _execute_child\nFileNotFoundError: [WinError 2] Das System kann die angegebene Datei nicht finden\nDuring handling of the above exception, another exception occurred:\nTraceback (most recent call last):\n  File \"D:\\Programme\\Sublime Text 3\\sublime_plugin.py\", line 526, in run_\n    return self.run()\n  File \"git_gutter in D:\\Programme\\Sublime Text 3\\Data\\Installed Packages\\GitGutter.sublime-package\", line 44, in run\n  File \"view_collection in D:\\Programme\\Sublime Text 3\\Data\\Installed Packages\\GitGutter.sublime-package\", line 51, in diff\n  File \"git_gutter_handler in D:\\Programme\\Sublime Text 3\\Data\\Installed Packages\\GitGutter.sublime-package\", line 153, in diff\n  File \"git_gutter_handler in D:\\Programme\\Sublime Text 3\\Data\\Installed Packages\\GitGutter.sublime-package\", line 233, in run_command\n  File \"X/subprocess.py\", line 818, in init\n  File \"X/subprocess.py\", line 1096, in _execute_child\nFileNotFoundError: [WinError 2] Das System kann die angegebene Datei nicht finden\n```\n. ",
    "tuzemec": "Had the same issue. \nFixed with adding C:\\Program Files (x86)\\Git\\bin to the system PATH variable and restarting Sublime 3.\n. ",
    "hiepnhl": "I have same issue. Has no effect at all, no error with git gutter in console :'(. I use Windows 8.1, ST3 build 3059, Monokai Extended color scheme \n\n. I dont use ConvertToUTF8. Don't get any message from GG in the status bar, completely quite like you said (other packages works well, no problem with them). I even try a portable ver, install only package control, monokai extended, GitGutter, all setups are default and it still isn't working. \nAnd the funny thing is, I download Atom, install, test: The Git Diff doesnt work, even under atom --safe. WTH??? Getting cursed by an unidentified black magic?\nSo I guess the problem is not the Git Gutter and Sublime Text, it's someting else. I confuse so much, completely no clue! Git was installed in the default way.\n. ",
    "mazhariqbal49": "Add your git binary (.exe) path in your git settings (Preferences > Package Settings > GitGutter > Settings - Default) \nLIKE: \n// Custom path to git binary when not in PATH\n\"git_binary\": \"C:\\Program Files (x86)\\Git\\bin\\git.exe\"\nNOTE: Your path should have double backslashes '\\' as a directory separator.\n. Add your git binary (.exe) path in your git settings (Preferences > Package Settings > GitGutter > Settings - Default) \nLIKE: \n// Custom path to git binary when not in PATH\n\"git_binary\": \"C:\\Program Files (x86)\\Git\\bin\\git.exe\"\nNOTE: Your path should have double backslashes '\\' as a directory separator.\n. Add your git binary (.exe) path in your git settings (Preferences > Package Settings > GitGutter > Settings - Default) \nLIKE: \n// Custom path to git binary when not in PATH\n\"git_binary\": \"C:\\Program Files (x86)\\Git\\bin\\git.exe\"\nNOTE: Your path should have double backslashes '\\' as a directory separator.\n. ",
    "heresfan": "\ncan this help?\n. it runs in windows XP as a plugin with gvim.\nI cd to the directory(C:\\DOCUM~1***) but can not found that tmp file\n. ",
    "Givemeyourgits": "I have the portable edition installed there.\nChristopher\nOn Sep 6, 2013, at 8:58 AM, \"JD Isaacks\" notifications@github.com<mailto:notifications@github.com> wrote:\nWhy is SublimeText installed under Dropbox?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/jisaacks/GitGutter/issues/111#issuecomment-23937840.\nThis email has been scanned by the MX Police managed email security.\n. That seemed to do it.\nIt did \u201cseem\u201d to work fine, I just wanted to get rid of the error as I was cleaning out plugins that did not work perfectly in ST3.  I had a few that \u201cseemed\u201d to work but gave me problems in other areas even though claim to be ST3 compatible.\nAlso, I have one plugin (Fuzzle File Nav) that is ST3 compatible, but Package Control 2 seems to pull the ST2 version, even though the author confirms he is pointing to the ST3 version.  So that looks like a Package Control issue.\nI think that line resolved the problem, I never seen any ill effect, it just worked as it supposed to, just wanted a clean boot up.\nThanks!\nBy the way, thanks for the awesome plugin, I love the included non-blocking mode for ST3.\nChristopher\nph: (800) 820-6772 (Main)\nfx:  (866) 334-2472\nFollow me on Twitterhttp://www.twitter.com/crspence! (@crspence)\nLinked In: http://www.linkedin.com/in/christopherspence\nAbout me: http://about.me/christopherspence\nFrom: JD Isaacks [mailto:notifications@github.com]\nSent: Friday, September 6, 2013 2:46 PM\nTo: jisaacks/GitGutter\nCc: Christopher R. Spence\nSubject: Re: [GitGutter] ST3 Error (#111)\nAre you able to open up the file git_gutter_handler.py at C:\\Dropbox\\Apps\\SublimeText3\\Data\\Installed Packages\\GitGutter.sublime-package and edit it?\nIf so, try adding import encodings to the top with the rest of the imports.\nDoes that fix it?\nThe error is coming from herehttps://github.com/jisaacks/GitGutter/blob/master/git_gutter_handler.py#L153 I think it is hitting an encoding it doesn't know how to handle. See herehttp://stackoverflow.com/questions/588792/ironpython-lookuperror-unknown-encoding-hex#answer-588802.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/jisaacks/GitGutter/issues/111#issuecomment-23961016.\nThis email has been scanned by the MX Police managed email security.\n. By the way, I\u2019m not sure if you have seen it, but there is a commercial Git Plugin (SublimeGit, runs I around $14 when currency converted).\nIt\u2019s not my plugin as I don\u2019t make them, but really liking it over the free Git plugin and he promises a lot of updates and continued support.\nI assume you\u2019re a heavy git user so thought you might be interested in checking it out.  It\u2019s in package control and free w/ nag screen or you can pay to remove the nag.\nhttps://sublimegit.net/\nChristopher\nph: (800) 820-6772 (Main)\nfx:  (866) 334-2472\nFollow me on Twitterhttp://www.twitter.com/crspence! (@crspence)\nLinked In: http://www.linkedin.com/in/christopherspence\nAbout me: http://about.me/christopherspence\nFrom: JD Isaacks [mailto:notifications@github.com]\nSent: Friday, September 6, 2013 2:46 PM\nTo: jisaacks/GitGutter\nCc: Christopher R. Spence\nSubject: Re: [GitGutter] ST3 Error (#111)\nAre you able to open up the file git_gutter_handler.py at C:\\Dropbox\\Apps\\SublimeText3\\Data\\Installed Packages\\GitGutter.sublime-package and edit it?\nIf so, try adding import encodings to the top with the rest of the imports.\nDoes that fix it?\nThe error is coming from herehttps://github.com/jisaacks/GitGutter/blob/master/git_gutter_handler.py#L153 I think it is hitting an encoding it doesn't know how to handle. See herehttp://stackoverflow.com/questions/588792/ironpython-lookuperror-unknown-encoding-hex#answer-588802.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/jisaacks/GitGutter/issues/111#issuecomment-23961016.\nThis email has been scanned by the MX Police managed email security.\n. ",
    "Xiphe": ":+1: \n. seems to be fixed for me, too - can't reproduce anymore.\n. ",
    "hd-deman": "+1 same bug\n. ",
    "jeroentbt": "Same here, looks like it's working now...\nDid not update anything either. Ghost in the machine?\nEveryone ok with closing this issue?\nhttps://github.com/SublimeLinter/SublimeLinter/issues/554\n. ",
    "Twipped": "I'm having this issue today.  Fresh install of ST3 and both SublimeLinter and GitGutter via Package Control.  If I remove GitGutter I can see the errors, but if I reinstall it the diffs override the errors.\nNot installed:\n\nInstalled:\n\n. ",
    "tusharmath": "I am facing the same problem. one possible solution would be to have a shortcut key through which I could just toggle the annotations.\n. ",
    "jesseleite": "I am having the same problem.  I personally love GitGutter, but it's so hard to use GitGutter and SublimeLinter at same time for this reason.\n. I should mention that I have disabled Sublime Linter in favour of GitGutter, because I rely on GitGutter more times a day than I need Sublime Linter :)  That said, if a solution was possible, whether it be on GitGutter's end or Linter's end, I would LOVE to have both enabled.\nUltimately, I think if SublimeLinter finds an error, it should take precedence over GitGutter.  That would be best of both worlds for me.\n. Interesting. I am not familiar enough with SublimeLinter to know what needs to be put into that setting's array... anyone have advice?\n. What is Gitgutter-Edge?\n. ",
    "thedamon": "I have been having this problem for a few months. It ceased for a day or two when I edited the GitGutter preferences, but came back shortly after.\nUsing ST3\nLooks like it would be worth re-opining this..\n. Totally. If you're comparing against your main repo (as I do), SublimeLinter isn't ever going to show anything unless the error was actually committed which makes the gutter marks only useful on untracked files\n. ",
    "tgirardi": "GitGutter also hides SublimeXDebug icons (a very popular sublime package for those who work with PHP), which is very annoying.\nA simple workaround would be to have a quick way of enabling/disabling GitGutter (Does this exist already?). That way I could, at least, disable GitGutter when using XDebug and re-enable it once I stop debugging.\n. Yes, it needs a restart.\n. ",
    "Raynos": "@jisaacks can you rebase or merge https://github.com/jisaacks/GitGutter/tree/protected-regions ? \nIt appears to be 6 months old & 40 commits behind\n. @jisaacks thanks :)\n. @jisaacks I just tried your branch. I'm afraid it won't work cleanly with my default theme :(\nThis might be an issue for https://github.com/EleazarCrusader/nexus-theme/issues/9\n. It might also be an issue with https://github.com/Benvie/JavaScriptNext.tmLanguage/blob/master/JavaScriptNext.tmTheme#L1493\nnot sure how to apply patches or where to apply them.\n. @jisaacks can we get these changes merged into master behind opt in config flags.\nIt makes it easier to try these changes without having to manually install a branch of gitgutter in sublime.\nSame thing for the protected regions branch.\n. Would love to test this.\nIs there an easy way to install Git Gutter Staged from sublime text package control ?\n. ",
    "Zireael07": "Has the branch been updated? I'd love to use Linter and GitGutter, but alas...\n. Can't wait to see a new release to be able to fix this problem.\n. ",
    "geddski": "Need this as well. Disabling plugins is not an acceptable solution.\n. ",
    "optikfluffel": ":+1: me too\n. ",
    "callumlocke": "Still need this.\n. ",
    "bridgesense": "Glad to see I'm not the only one. :)  Gitgutter isn't playing well with SublimeLint or Xdebug\nWell, I can confirm that Gitgutter-Edge has addressed these issues.\n. ",
    "Josh-a-e": "Yes please :+1:\n. ",
    "sebastienbarre": "Love GitGutter, but love SublimeLinter too. Is protected_regions merged in GitGutter-Edge (for ST3)?\nThanks\n. ",
    "thalesfsp": "Where's the solution?\n. ",
    "jonscottclark": "Really excited to see a release soon. Thanks for getting it sorted out, @jisaacks !\n. ",
    "creativisionist": "Installed GitGutter, tried to read and seemed like GitGutter-Edge found a resolution to overriding SublimeLinters. Uninstalled GitGutter, installed GitGutter-Edge. No resolution. Uninstalled GitGutter-Edge, none of SublimeLinters work now. Tried uninstalling and reinstalling SublimeLinters; same issue. Gutter is completely back to default, no errors read.\nHelp?\n. @jisaacks everything's enabled; only ignored pkg is \"Vintage\" -- unless there's another way to check this apart from Console and user pref file?\n. Definitely.  Although after letting the computer rest for a bit seems at least one of the linters are working now (spec for my .scss files) but not all of them.  Have anytime by chance for a screen share?  I really would like to use both the linters and GitGutter ideally if possible.\n. ",
    "tboyce12": "I disabled the GitGutter package. Now my more important gutter icons are showing up again. This is a great package, but not playing nice with others is a dealbreaker for me.\n. ",
    "FMCorz": "+1. I would like to be able to set the priority, the linter flags are more important to me.\n. ",
    "madevelopers": "Can't we set sublime to have a 2-column gutter? one column for git the other for linter?\n. ",
    "amitness": "I'm facing the same problem. The gutter marks hides the sublimelinter gutter mark. Had to disable this plugin.\n. Since the issue hasn't been fixed, I've switched to VCS Gutter. In that, the error gets the priority than the git gutter. If no errors are there, + sign is shown. Workaround for now until Gitgutter fixes this.\n. @jisaacks  I'm ready to help. I've installed GitGutter-EDGE. The problem is still there.\n. Great!\nOn 10/8/15, JD Isaacks notifications@github.com wrote:\n\n@studenton I need to fix some conflicts, rebase and then merge the PR into\nmaster. Then you would need to make sure to update to the newer version. I\nwill ping this thread at that time. Should be able to some time in the next\ncouple days.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/jisaacks/GitGutter/issues/113#issuecomment-146537905\n. @jisaacks The issue is fixed. Thanks a lot for the fix.\n. @jisaacks Sorry I didn't quite get you about regions. I just installed the newest version of Gitgutter edge and sublimelinter is taking the priority than the gitgutter now. Errors are given preference instead of +. That's what we wanted.\n. Yup you're correct. It was just coincidental. I checked it again on different files and the issue arose again. Sorry for the confusion. @jisaacks. \n. \n",
    "hadees": "It would actually be really cool if Git Gutter maybe showed an icon that both shows that the line changed and there is an error.  That way people know what errors they caused.\n. ",
    "davicho": "I must be missing something. Uninstalled GitGutter, installed GitGutter Edge but when I go to it's settings they are empty. I tired copying the settings from the repo online but didn't work. Am I missing a step?\n. @StyloBill I found the same behavior. I think it's a timing thing. SublimeLinter activates first and as soon GitGutter activates (which takes a bit longer), it overrides SublimeLinter. \n. @jisaacks I uninstalled gitgutter via \"remove package\" interface in sublime and installed gitgutter-edge same way too.\nOnce gitgutter-edge was installed I tried to access the \"protected regions\" you are talking about BUT I could not find it under packages settings: sublime text>preferences>package settings>sublimelinter>settings (both Settings Default and Settings User are empty).\nI tried copying and pasting this but no luck: https://github.com/jisaacks/GitGutter/blob/master/GitGutter.sublime-settings\nJust trying to figure out how to enable protected regions.\n. @jisaacks \nso sorry... juggling both has had a bit brain fired. THAT is what I meant: \nsublime text>preferences>package settings>GitGutter>settings (both default and user settings are empty)\nsee: https://www.dropbox.com/s/j4svhj3mjsr84zr/Screenshot%202015-10-31%2011.14.44.png?dl=0 \n. That works! Way to go @develucas!!! Cheers!\n. ",
    "vburlion": "After a bit of testing, it appears that when you uninstall GitGutter then install it again, the two packages behave as intended (SublimeLinter takes priority over GitGutter) but if you then close Sublime Text and open it again, GitGutter takes back priority over Sublime Linter, which is bad.\nMaybe @jisaacks could investigate on this?\nThanks!\n. ",
    "wprater": "it's also hiding my Xdebug breakpoint icons.  any fix in sight for that as well?\n. I think I found the ones I was looking for here https://github.com/martomo/SublimeTextXdebug/blob/master/xdebug/settings.py#L51-L53 \n@develucas here are some for Xdebug\n. @jisaacks the current line marker for xdebug will rarely show in a protected region.  I supposed this is because the file is not being modified, but the markers are being added.  thoughts for working around this?\n. ",
    "nfantone": "I know this is an old (closed) issue, but since it had helped me solved my problem I wanted to say to everyone that comes along facing the same thing, this is the solution. README.md tells you, in a rather obscure way, to \"figure out the name\" of the protected_regions. Those names are provided in the linked comment of @develucas. Also, you don't need to install GitGutter-Edge anymore, it'll now work with current stable release.\n. @jisaacks Yes, I was aware of that. I read your first comment. But you can't deny that for first comers, regular Sublime/git users or even advanced users with no or little previous knowledge of how the package works (which is most of us here, I tend to think) reading something like \"go figure out some random strings that my python script likes\" it's pretty vague and will get them lost. That's a given.\nI myself, have been using Sublime for years, and have no idea what a \"region\" is or why it needs \"protection\" of any kind. Perhaps I'm the only confused and/or ignorant person around. If that's the case, I apologize. I just wanted to help people struggling with the same problem I was having.\n. @jisaacks Sure thing. I'd love to do that. Thing is, I really don't know the explanation that needs to be written. That's the reason I ended up here and stumbled upon this issue. \nIf you could kindly explain me what a protected region is and how to figure out its name, I'll prepare the PR -- though, I fear that if you do that, you'll be writing the proper README.md yourself. So, maybe, I'm not the most suited person to do it.\n. ",
    "yaroslavyaroslav": "If someone helps, this is regions for anaconda linting:\n\"protected_regions\": [\"ERRORS\", \"ERRORS\", \"WARNINGS\", \"WARNINGS\", \"VIOLATIONS\", \"VIOLATIONS\"],\nGuess it's not \u2014\u00a0this line wirking only with \"live_mode\": false,\n. @jisaacks Here's the region name  anaconda-master/anaconda_lib/jediusages.py:\n105: region_name = 'anaconda.indicator.{}.{}'.format(self.text.view.id(), lineno)\nSo the first part is \"anaconda.indicator\", but it seems that in braces  are unique numbers. What can be done with this?\n. ",
    "xeroxoid": "Also for anyone (like me) having a problem with GitGutter overlapping JSHint errors, I found the region code in JSHint Gutter code.\nThis will fix it (even on stable GitGutter release):\n\"protected_regions\": [\"jshint_errors\"]\nflies away\n. ",
    "jadatkins": "The protected regions for SublimeLinter that are working for me are as follows. (First open Preferences > Package Settings > GitGutter > Settings \u2013 User. Then paste this in. Save and restart SublimeText.)\njson\n{\n  \"protected_regions\": [\n    \"sublimelinter-warning-marks\",\n    \"sublimelinter-error-marks\",\n    \"sublimelinter-warning-gutter-marks\",\n    \"sublimelinter-error-gutter-marks\",\n  ],\n}\n. @pirate I have no idea. I don't use that.\n. ",
    "pirate": "@jadatkins That worked for me, thanks!  Is there an equivalent region name for Sublime Bracket Highlighter like brackethighlighter-brackets?\n. Found them after a bit of digging in the bracket highlighter repo.  Here are all the Sublime Bracket Highlighter region keys.\n``` python\n\n\n\nview.settings().get('bh_regions')\n['bh_tag', 'bh_tag_center', 'bh_tag_open', 'bh_tag_close', 'bh_tag_content', 'bh_double_quote', 'bh_double_quote_center', 'bh_double_quote_open', 'bh_double_quote_close', 'bh_double_quote_content', 'bh_single_quote', 'bh_single_quote_center', 'bh_single_quote_open', 'bh_single_quote_close', 'bh_single_quote_content', 'bh_curly', 'bh_curly_center', 'bh_curly_open', 'bh_curly_close', 'bh_curly_content', 'bh_square', 'bh_square_center', 'bh_square_open', 'bh_square_close', 'bh_square_content', 'bh_round', 'bh_round_center', 'bh_round_open', 'bh_round_close', 'bh_round_content', 'bh_default', 'bh_default_center', 'bh_default_open', 'bh_default_close', 'bh_default_content', 'bh_c_define', 'bh_c_define_center', 'bh_c_define_open', 'bh_c_define_close', 'bh_c_define_content', 'bh_regex', 'bh_regex_center', 'bh_regex_open', 'bh_regex_close', 'bh_regex_content', 'bh_angle', 'bh_angle_center', 'bh_angle_open', 'bh_angle_close', 'bh_angle_content', 'bh_unmatched', 'bh_unmatched_center', 'bh_unmatched_open', 'bh_unmatched_close', 'bh_unmatched_content']\n\n\n\n```\nUnfortunately, adding these to my protected_regions GitGutter.sublime-settings seems to have no effect, git gutter marks are still drawn over the bracket marks...\n\nI contacted the BracketHighlighter author to see if he has any ideas.  https://github.com/facelessuser/BracketHighlighter/issues/317#issue-136800829\n. Thanks for linking straight to the line I needed :).  I ran some tests and found that function works exactly as expected when run from console, but gets an empty list of rendered by_curly_open regions when run from inside GitGutter, which leads me to believe @facelessuser is right, it is possible that GitGutter is running this function before BracketHighlighter renders.\n\n. ",
    "kylebebak": "@jadatkins adding these protected_regions worked great for me for about a week, and then suddenly it regressed and GitGutter started overwriting SublimeLinter again.\nI'm not sure why. Maybe a recent update to SublimeLinter changed the names of the protected regions. In any case, adding more protected_regions has solved the problem again for me.\n``` json\n\"protected_regions\": [\n    \"sublimelinter-warning-marks\",\n    \"sublimelinter-error-marks\",\n    \"sublimelinter-warning-gutter-marks\",\n    \"sublimelinter-error-gutter-marks\",\n    \"lint-underline-illegal\",\n    \"lint-underline-violation\",\n    \"lint-underline-warning\",\n    \"lint-outlines-illegal\",\n    \"lint-outlines-violation\",\n    \"lint-outlines-warning\",\n    \"lint-annotations\",\n  ]\n```\n. ",
    "jmrd98": "For the Anaconda package: \"protected_regions\": [\n                        \"anaconda-lint-outlines-illegal\", \n                        \"anaconda-lint-outlines-warning\", \n                        \"anaconda-lint-outlines-violation\"\n    ]\nJust as a reference to anyone arriving via google. Pertinent code in Anaconda here, line 228 as of the time of writing.\n. ",
    "ShengYun": "Hi jisaacks, is it ok to merge my pull request? or did I implement this in a wrong way?\n. :)You're welcome.\n. btw I'm really new to python, if anything improper in my code, please help to improve it:)\n. I fixed the pep8 issue, and there was a bug in my previous commit ^_^ sorry for that.\n. ",
    "tkoenig": "+1\n. ",
    "mcmillion": "Just got this worked into my theme.  Looks great.\n. ",
    "maffiou": "Cool stuff. \nI've just started to use gitGutter and it's amazing...\nI do a lot of patch amending, would it be possible to add a key combination to show the diffs between HEAD and HEAD^ as well as the ongoing changes (I appreciate it might be quite tricky)\n. @jisaacks  Sorry for not responding earlier, I've been stupidly busy lately. I'm using gitGutter every single day and love it. :+1:   Will try the latest version when I can risk it. :) \nFYI: I did try to flattr you but it doesn't seem to have been picked up... \n. ",
    "Adarma": "@jisaacks \nI want to add the colours to my theme, but notice some inconsistencies between the scopes you mention:\n- scope: markup.inserted.git_gutter\n- scope: markup.deleted.git_gutter\n- scope: markup.modified.git_gutter\n- scope: markup.inserted.git_gutter.staged\n- scope: markup.deleted.git_gutter.unstaged\n- scope: markup.modified.git_gutter.staged_unstaged\n... and the scopes in DeepBlueSee:\n- scope: markup.deleted.git_gutter, markup.deleted.git_gutter.staged\n- scope: markup.inserted.git_gutter, markup.inserted.git_gutter.staged\n- scope: markup.changed.git_gutter, markup.changed.git_gutter.staged\n- scope: markup.deleted.git_gutter.unstaged\n- scope: markup.inserted.git_gutter.unstaged\n- scope: markup.changed.git_gutter.unstaged\n- scope: markup.ignored.git_gutter\n- scope: markup.untracked.git_gutter\nSome Questions:\nShould it be markup.modified... or markup.changed... or do they do different things?\nIs markup.modified.git_gutter.staged_unstaged used?\nHow is markup.ignored.git_gutter used?\nhow is markup.untracked.git_gutter used?\nCould this be merged and released yet?\n. I think you are going down the rabbit hole with this comparing to the staging area stuff.\nThe idea is to 'simply' compare to the HEAD as usual, but have different icons to indicate if the hunk is staged or not.\n[I do realize this is not actually simple to implement...]. Was there any progress on this? I see there is still a \"staged\" branch.\nDoes compare against branch now compare to the staging area if staged?\nI'm upgrading a colour scheme to the \"sublime-color-scheme\" format and have these scopes:\n\nmarkup.deleted.git_gutter, markup.deleted.git_gutter.staged\nmarkup.inserted.git_gutter, markup.inserted.git_gutter.staged\nmarkup.changed.git_gutter, markup.changed.git_gutter.staged\nmarkup.deleted.git_gutter.unstaged\nmarkup.inserted.git_gutter.unstaged\nmarkup.changed.git_gutter.unstaged\nmarkup.ignored.git_gutter\nmarkup.untracked.git_gutter\n\nAre all these scopes still used?\nThe new SublimeLinter4 sets colours via its settings file rather than custom scopes defined in the color scheme. It has this setting to set the error colour:\n\n\"scope\": \"region.redish markup.error.sublime_linter\"\n\nAny plan to set colours a similar way?. Could you be more descriptive?\nI have no clue what you are requesting!\n. ",
    "RafalSkolasinski": "Hmm... I am not sure if this should be separate issue or comment here... I was checking possible options for compare_against and I think it's missing comparing against staged area. In the way that showed changes are consistent with git diff output.. @r-stein, thanks for pointing me to this issue.\nI'd like to point out that not many distros out there come with version 2.11 of git out of a box. \nFedora 25: 2.9.4\nUbuntu 16.04 (LTS): 2.7.4\nDebian Jessie: 2.1.4\nMaybe there could be way to workaround this issue without forcing people to upgrade git?. indeed bug already reported in https://github.com/jisaacks/GitGutter/issues/416\nclosing\n. ",
    "mihkel": "I'm running v3 dev channel build 3054. Tried the non blocking option but nothing changed.\n. Looks like it's OK now.\n. ",
    "channingwalton": "Hi, thanks for doing this. I didn't think about underscore, the name came from my company www.underscoreconsulting.com :/\n. ",
    "kim3er": "Hi,\nInstalled without a problem on a clean install of Mavericks and Sublime 3 (installed around November) via Package Control. ST2 had never been installed on system.\nUnable to install via Package Control on Mavericks (upgraded from Mountain Lion), running Sublime Text 2 & 3 in parallel. SB3 installed from early public alphas. Had to clone from source. PC said the plugin had been installed, but did not create a GitGutter directory anywhere (that I could see).\nRich\n. ",
    "NielsKSchjoedt": "Second one sounds like my setup\n. ",
    "aortmannm": "still not working well. turned off live mode\n. Yeah when I turn off live mode it works well.\n. ",
    "nshtg": "I have the same problems. Just try it out yourself by holding down any key while GitGutter is enabled. With non-Blocking mode disabled it is totally unusable and you see no character being set at all until you stop pressing that key. With non-blocking mode enabled its better but still really laggy in comparison to live-mode disabled.\nHave you thought about giving us the possibility to set a \"delay\" after which live_mode checks for differences? If I could set it to 1000ms I would be totally fine with the useability - Right now you can not really use live_mode at all.\n. Repo is really small (small LaTeX repo), <2mb and the filesizes make no difference, just tested it on a file with 122lines.\nIm on Windows and I doubt my hardware (i5-2500k on stationary and i5-3210M on Laptop each with 8GB Ram and SSD) are the problem... Weird thing.\n. ",
    "JeffDess": "Same problem here on Windows 7/Sublime 3 (3059), 15mb git repo. \nIn addition to the lag in typing, I also get a important lag when opening Sublime or switching tab (feels like it's frozen). The lag time is quite bad even with the non-blocking setting turned on. I also tried turning off both the live mode and focus change mode, that doesn't seem to slow Sublime except when I save a file. That would be great to have this performance issue fixed tough, seems like live mode and focus change are quite useful.\n. ",
    "sethgrid": "A few days ago, Sublime Text (build 3059) began to have a delayed response. All typing and clicks seemed to be delayed by up to a second or more. I disabled my plugins one-by-one and found that GitGutter was the issue. Normally, I use Sublime with two dozen open projects with over 1M lines of code. This slow behavior was just as dramatic with one open file that was 40 lines. I did not add any new plugins recently, but it is possible that Sublime updated itself and I did not notice. Setup: Sublime Text Build 3059, OS X 10.8.5. (edit: also tried non-blocking to no avail) (edit 2: live mode false made it a little faster, but still unusable)\n. Ah, I see that this is reported in an different issue. Moving this there. \n. ",
    "naxhh": "Same here, build 3059. Windows 7 x64.\ni5, 4gb ram. ssd, NFS folder with vagrant.\nnon blocking makes a bit fast.\nBut I endend up turning live mode to false...\nI need to restart st3 every time I change config, I don't know if its normal but...\n. @jisaacks In theory, the folder is on mi Pc and vagrant uses NFS to access it.\nIdk if I'm wrong there.\n. Hi again.\nI just tried disabling show_markers_on_untracked_file and runs smoother as @oleq said.\n. Just you to know. I tried all the configurations again with vagrant off.\nI've git installed on my pc so there is no requirement to use network.\nI know is hard to debug an error like this even more if you don't experienced the error.\nI will try to take some time this weekend and debug+test to see what I can found.\n. ",
    "oleq": "The same here. I experience a major delay while typing. It's even more visible while holding a key for 1-2 secs: I got to wait ~1 extra second to see my characters and get UI responsive.\nThere's no such problem while editing files which don't belong to any git repo and, of course, with GitGutter disabled. The funny thing is that it worked perfectly for me for a long time (love GG!) so it looks like a (more or less) recent performance loss.\nST 2.0.2 (2221),\nGit version 1.8.5.3\nUbuntu 12.04 with Ext4 FS (SSD)\n. git bisect always tells the truth :P\n```\nb34bfadfe50525f7ea2652b97e82e36dd0af31ae is the first bad commit\ncommit b34bfadfe50525f7ea2652b97e82e36dd0af31ae\nAuthor: JD Isaacks jd@jisaacks.com\nDate:   Mon Jan 27 19:54:18 2014 -0500\nMake show icons for new/ignored files on by default\n\n:100644 100644 e1d55a351062e8d2a51faaeb5b35422d026786f9 ebe1e4e1221ef3cffee6ab5cba0c8b6b47855564 M  GitGutter.sublime-settings\n:100644 100644 a75c0f06bb492b1965e88b2ba23f0251095d7d0f aad4c98cf2904bf562c48dffa3600bd151fb6d39 M  README.md\n```\nIndeed since b34bfadfe5 GG is slow as hell, while b34bfadfe5~1 is just fine. My research revealed that \"show_markers_on_untracked_file\": true, is a performance killer (not sure why though). Perhaps you should take a look on that (disabled by default?) and figure it out.\n. @naxhh Yes, show_markers_on_untracked_file: false makes a whole lot of a difference. It's just better. I did some research and that one is a performance killer for me (though it looks innocent):\ntime git ls-files --other --exclude-standard \nreal    0m0.022s\nuser    0m0.000s\nsys 0m0.016s\nIf I set show_markers_on_untracked_file: true and put return False before self.run_command it's just like show_markers_on_untracked_file: false (I mean: then it's fine). It looks like this one (extra) call makes a difference, a thin line between fair and poor performance.\n. @jisaacks Some debouncing would be perfect, I guess. I can't wait for the new release! ;)\n. ",
    "Reinmar": "I experience the same issue as @oleq on the same setup. Although, I had this problem for a long time, nothing has changed recently for me.\n. It may be related to #169.\n. Last good commit: 5f332b7.\nFirst bad: e5450eb.\n. The same happened to my ST2 on Ubuntu 12.04. I reinstalled GitGutter (cloned it in the right place) and nothing. GitGutter's options are displayed in the menu and there are no errors on the console. Git version: 1.9.3.\n. In previous comment I meant that I see no errors on the system console. But ST2's console logs:\nReloading plugin /home/piotrus/.config/sublime-text-2/Packages/GitGutter/git_gutter.py\nTraceback (most recent call last):\n  File \"./sublime_plugin.py\", line 62, in reload_plugin\n  File \"./git_gutter.py\", line 5, in <module>\n    from .view_collection import ViewCollection\nValueError: Attempted relative import in non-package\nReloading plugin /home/piotrus/.config/sublime-text-2/Packages/GitGutter/git_gutter_change.py\nTraceback (most recent call last):\n  File \"./sublime_plugin.py\", line 62, in reload_plugin\n  File \"./git_gutter_change.py\", line 4, in <module>\n    from .view_collection import ViewCollection\nValueError: Attempted relative import in non-package\nReloading plugin /home/piotrus/.config/sublime-text-2/Packages/GitGutter/git_gutter_compare.py\nReloading plugin /home/piotrus/.config/sublime-text-2/Packages/GitGutter/git_gutter_events.py\nReloading plugin /home/piotrus/.config/sublime-text-2/Packages/GitGutter/git_gutter_handler.py\nTraceback (most recent call last):\n  File \"./sublime_plugin.py\", line 62, in reload_plugin\n  File \"./git_gutter_handler.py\", line 8, in <module>\n    from . import git_helper\nValueError: Attempted relative import in non-package\nReloading plugin /home/piotrus/.config/sublime-text-2/Packages/GitGutter/git_helper.py\nReloading plugin /home/piotrus/.config/sublime-text-2/Packages/GitGutter/view_collection.py\nReloading plugin /home/piotrus/.config/sublime-text-2/Packages/HTML/encode_html_entities.py\nReloading plugin /home/piotrus/.config/sublime-text-2/Packages/HTML/html_completions.py\nReloading plugin /home/piotrus/.config/sublime-text-2/Packages/Package Control/Package Control.py\nplugin init time: 0.076307\nloading bindings\nloading pointer bindings\nfound 1 files for base name Default.sublime-theme\ntheme loaded\napp ready\npre session restore time: 0.185618\nusing gamma: 1 (err: 0)\nTraceback (most recent call last):\n  File \"./sublime_plugin.py\", line 205, in on_activated\n  File \"./sublime_plugin.py\", line 154, in run_timed_function\n  File \"./sublime_plugin.py\", line 204, in <lambda>\n  File \"./git_gutter_events.py\", line 44, in on_activated\n  File \"./view_collection.py\", line 18, in add\nImportError: No module named git_gutter_handler\nTraceback (most recent call last):\n  File \"./sublime_plugin.py\", line 205, in on_activated\n  File \"./sublime_plugin.py\", line 154, in run_timed_function\n  File \"./sublime_plugin.py\", line 204, in <lambda>\n  File \"./git_gutter_events.py\", line 44, in on_activated\n  File \"./view_collection.py\", line 18, in add\nImportError: No module named git_gutter_handler\nTraceback (most recent call last):\n  File \"./sublime_plugin.py\", line 205, in on_activated\n  File \"./sublime_plugin.py\", line 154, in run_timed_function\n  File \"./sublime_plugin.py\", line 204, in <lambda>\n  File \"./git_gutter_events.py\", line 44, in on_activated\n  File \"./view_collection.py\", line 18, in add\nImportError: No module named git_gutter_handler\nTraceback (most recent call last):\n  File \"./sublime_plugin.py\", line 205, in on_activated\n  File \"./sublime_plugin.py\", line 154, in run_timed_function\n  File \"./sublime_plugin.py\", line 204, in <lambda>\n  File \"./git_gutter_events.py\", line 44, in on_activated\n  File \"./view_collection.py\", line 18, in add\nImportError: No module named git_gutter_handler\nTraceback (most recent call last):\n  File \"./sublime_plugin.py\", line 205, in on_activated\n  File \"./sublime_plugin.py\", line 154, in run_timed_function\n  File \"./sublime_plugin.py\", line 204, in <lambda>\n  File \"./git_gutter_events.py\", line 44, in on_activated\n  File \"./view_collection.py\", line 18, in add\nImportError: No module named git_gutter_handler\nTraceback (most recent call last):\n  File \"./sublime_plugin.py\", line 205, in on_activated\n  File \"./sublime_plugin.py\", line 154, in run_timed_function\n  File \"./sublime_plugin.py\", line 204, in <lambda>\n  File \"./git_gutter_events.py\", line 44, in on_activated\n  File \"./view_collection.py\", line 18, in add\nImportError: No module named git_gutter_handler\nTraceback (most recent call last):\n  File \"./sublime_plugin.py\", line 195, in on_modified\n  File \"./sublime_plugin.py\", line 154, in run_timed_function\n  File \"./sublime_plugin.py\", line 194, in <lambda>\n  File \"./git_gutter_events.py\", line 24, in on_modified\n  File \"./view_collection.py\", line 18, in add\nImportError: No module named git_gutter_handler\nTraceback (most recent call last):\n  File \"./sublime_plugin.py\", line 195, in on_modified\n  File \"./sublime_plugin.py\", line 154, in run_timed_function\n  File \"./sublime_plugin.py\", line 194, in <lambda>\n  File \"./git_gutter_events.py\", line 24, in on_modified\n  File \"./view_collection.py\", line 18, in add\nImportError: No module named git_gutter_handler\nTraceback (most recent call last):\n  File \"./sublime_plugin.py\", line 195, in on_modified\n  File \"./sublime_plugin.py\", line 154, in run_timed_function\n  File \"./sublime_plugin.py\", line 194, in <lambda>\n  File \"./git_gutter_events.py\", line 24, in on_modified\n  File \"./view_collection.py\", line 18, in add\nImportError: No module named git_gutter_handler\nTraceback (most recent call last):\n  File \"./sublime_plugin.py\", line 195, in on_modified\n  File \"./sublime_plugin.py\", line 154, in run_timed_function\n  File \"./sublime_plugin.py\", line 194, in <lambda>\n  File \"./git_gutter_events.py\", line 24, in on_modified\n  File \"./view_collection.py\", line 18, in add\nImportError: No module named git_gutter_handler\nTraceback (most recent call last):\n  File \"./sublime_plugin.py\", line 195, in on_modified\n  File \"./sublime_plugin.py\", line 154, in run_timed_function\n  File \"./sublime_plugin.py\", line 194, in <lambda>\n  File \"./git_gutter_events.py\", line 24, in on_modified\n  File \"./view_collection.py\", line 18, in add\nImportError: No module named git_gutter_handler\nTraceback (most recent call last):\n  File \"./sublime_plugin.py\", line 195, in on_modified\n  File \"./sublime_plugin.py\", line 154, in run_timed_function\n  File \"./sublime_plugin.py\", line 194, in <lambda>\n  File \"./git_gutter_events.py\", line 24, in on_modified\n  File \"./view_collection.py\", line 18, in add\nImportError: No module named git_gutter_handler\nTraceback (most recent call last):\n  File \"./sublime_plugin.py\", line 195, in on_modified\n  File \"./sublime_plugin.py\", line 154, in run_timed_function\n  File \"./sublime_plugin.py\", line 194, in <lambda>\n  File \"./git_gutter_events.py\", line 24, in on_modified\n  File \"./view_collection.py\", line 18, in add\nImportError: No module named git_gutter_handler\nTraceback (most recent call last):\n  File \"./sublime_plugin.py\", line 195, in on_modified\n  File \"./sublime_plugin.py\", line 154, in run_timed_function\n  File \"./sublime_plugin.py\", line 194, in <lambda>\n  File \"./git_gutter_events.py\", line 24, in on_modified\n  File \"./view_collection.py\", line 18, in add\nImportError: No module named git_gutter_handler\nSo this is the same issue as in #168.\n. If I run ST2 from bash, then I can see it logs on the console. But ST has also its own internal console which you can open by CTRL+`.\n. ",
    "mikemerritt": "Disabling show_markers_on_untracked_file does improve it quite a bit but there is still a noticeable amount of lag.\nMy suggestion would be to trigger on any change but set an internal timer with a configurable delay (200ms default would probably be good). If another change event fires within that delay, cancel the previous timer and set up a new one.\nI've used this method before and it works quite well.\n. Can confirm it is now fixed with #145 \n. ",
    "titoBouzout": "GitGutter listen for \"on_modified\" which runs the whole thing everytime the user press a key. async calls makes no difference.\nYou should run a separated thread looping. Which will run GitGutter, every x milliseconds, only when something has been modified and if is not already running.\nProof of concept:\n```\nglobal something_modified = False\nglobal is_the_thread_running = False\nClass GitGutterListener\n  def on_modified(): # the important listener\n      something_modified  = True\n  def on_load():\n     something_modified  = True\n  def on_somethingelse():\n    something_modified  = True\ndef git_gutter_loop():\n    while True:\n        if is_the_thread_running == False and something_modified == True:\n            sublime.set_timeout(lambda:git_gutter_run_the_heavy_task(), 0)\n        sleep(0.4)\nif not 'running_loop' in globals():\n    global running_loop\n    running_loop = True\n    thread.start_new_thread(git_gutter_loop, ())\ndef git_gutter_run_the_heavy_task() # this should run in a thread.\n    something_modified  = False\n    is_the_thread_running  = True\n    # here hardcore git diff etc etc\n    is_the_thread_running  = False\n```\nIf you press \"a\" and hold it for a while, and see \"a\" instead of \"aaaaaaaaaaaaaa\", then something like this should be done, or the on_modified listener should be commented out. This lag leads to a terrible user experience which most of the time they will think is the editor lagging not the package.\n. You are welcome, Makes no difference because a heavy task is a heavy task, if I type \"aaaaaaaaaa\" and we run 10 processes, running these async will just make these all run at the same time, which is still very expensive. We should run 1 at a time, and in intervals. You can also see this flaw in many websites, on text inputs that filters list of data while you type something, the thing freezes after the very first keystrokes.\n. ",
    "entombedvirus": "Hey @jisaacks,\nI just recently found this issue thread while experiencing the UI lag. Here's what I found running your debounce_add branch:\nInstalling debounce_add branch of GitUtter\n- Removed Package Control's version of GitGutter\n- Cloned your repo and switched to your \"debounce_add\" branch\n- restarted sublime text.\nResults\nWith a blank user GitGutter settings (i.e all preferences set to their defaults), the lag while typing is still noticeable. With show_markers_on_untracked_file set to false, the lag is reduced and becomes  acceptable. I should also note that I am using this in a large git repo (2.4G).\nIn the interim, I think I am gonna run GitGutter master with live_mode: false, non_blocking: true, show_markers_on_untracked_file: false to get the best results.\n. Oh forgot to mention another highlight:\nuntracked and ignored file detection has been made lazy so as to minimize needless git invocations\n. @sigod did you get a chance to try it out? If so, what OS and Sublime version are you on?\n. Yep, makes sense. Let me know if I can help by answering questions etc. :)\nOn Friday, July 24, 2015, JD Isaacks notifications@github.com wrote:\n\n@entombedvirus https://github.com/entombedvirus This is a big PR. I\nappreciate the work you put into this. However, I want to make sure to\nreview all of the code carefully since this changes so much. I may not be\nable to get to this for a month or two.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jisaacks/GitGutter/pull/240#issuecomment-124526592.\n. hey @rchl, thanks for picking up where I left off :)\n\nSince I am no longer an active user of Sublime, I don't think I can give this PR the proper attention it deserves. Consider this a go-ahead from me to use the code in this PR however you see fit. If it's easier, you don't have to keep the git history intact: flatten away.\nIf you're up to it, IMO you should submit your fork as a separate entry in Package Control so that other users can just install your fork.\n. ",
    "divmain": "@jisaacks - I just submitted a pull request that solved this issue for me on ST3 + OSX Mavericks.\n. @jisaacks Ping\n. Sounds good, thanks.\nI was one of the folks who was effected by the performance issues.  And in my case, the culprit was an aggressively configured antivirus scanner.  It was interfering with every disk read operation, which slowed down all git operations considerably.  This patch resolved my issue until IT fixed the wider issue.\nI'd be surprised if this is the only cause of IO lag - hopefully this will help.  And thanks for a great plugin!\n. ",
    "TheBox193": "+1 Temporarily removed package for now.\n. ",
    "foxx": "Having the same problem today, was this fix released?\n. ",
    "yvess": "Had the also the same problem today, and first blamed gitgutter. But it was a wrong python interpreter setting in my .anaconda project file. I found it out with a look at \"View -> Show Console\"\n. ",
    "AshwinRamesh": "Oh woops. You are correct. Sorry I forgot I had the Git plugin installed, which is working. Essentially the icons are not showing and no errors in the log. Running version 3 of sublime on the latest dev patch\n. Sorry for the late reply. I reinstalled ST3 and it started working. weird...\n. ",
    "christopherdwhite": "Sorry about that, my mistakes. I completely overlooked the indentation and I think my Markdown editor removed the double back slashes and I didn't notice.\nWith that said, I'm not certain they need to be doubled. You shouldn't need to escape them for the markdown since they're in a code block. I'm less familiar with JSON, do you know if those should be included within Sublime Text?\n. I've talked to a couple people who are better with JSON than I am and they've given me mixed answers. I'll check it in Windows tomorrow at the office and let you know. \n. ",
    "stephan-nordnes-eriksen": "When you use multiple rows with more than one file. \"Layout > Rows: 2\" or  \"Layout > Columns: 2\" etc. \nRows mac hotkeys: cmd + alt + 1/2/3\nColumns mac hotkeys: cmd + alt + shift + 1/2/3\n. Maybe I wasn't clear enough. When you have, say 2, rows with a different file in each. When you update your file in the second row, you have to un-select that file and then select it again for git gutter to update the diff-view on the side of that file. \nIt is quite easy to test. Fire up sublime on a folder with git. Then use two rows, and open a file in the second row. Do an update to that file. Now you will see that gitgutter isn't updating. For instace, when you press enter / newline you won't get your usual green pluss sign on the side.\n. > Now you say to Do an update to the file. What do you mean by that?\nYeah, make a change in the file.\n\nRestarting Sublime always fixes it.\n\nI have noticed this as well, but for me the problem comes back quite soon after restart. I suspect maybe a conflict in some of the packages, but I don't know. I have the following installed:\n- ActionScript\n- Alignment\n- AppleScript\n- ASP\n- AutoSlim\n- Batch File\n- BracketHighlighter\n- C#\n- C++\n- Clipboard History\n- Clojure\n- CoffeeScript\n- Color Highlighter\n- Color Scheme - Default\n- ColorPicker\n- CSS\n- D\n- Default\n- Diff\n- eco\n- Emmet\n- Erlang\n- Git\n- GitGutter\n- Go\n- Google Spell Check\n- Graphviz\n- Groovy\n- Haskell\n- HTML\n- HTML2Jade\n- Jade\n- Java\n- JavaScript\n- Jinja2\n- JsFormat\n- JsMinifier\n- Language - English\n- LaTeX\n- LaTeXTools\n- LESS\n- Lisp\n- Lua\n- Makefile\n- Markdown\n- Matlab\n- Nodejs\n- Objective-C\n- OCaml\n- Package Control\n- Perl\n- PHP\n- Python\n- PyV8\n- R\n- Rails\n- Regular Expressions\n- RestructuredText\n- Ruby\n- Ruby Markers\n- Ruby Slim\n- RubyFormat\n- RubyTest\n- Sass\n- Scala\n- SCSS\n- ShellScript\n- SideBarEnhancements\n- SQL\n- SublimeCodeIntel\n- Table Editor\n- Tag\n- TCL\n- Terminal\n- Text\n- Textile\n- Theme - Default\n- Theme - Nil\n- TomDoc+\n- User\n- Vintage\n- WordCount\n- XML\n- YAML\n. ",
    "timhabermaas": "\nNow you say to Do an update to the file. What do you mean by that?\n\nEdit it, I guess. I have this issue as well occasionally, but can't reproduce it. Restarting Sublime always fixes it. \n. ",
    "keeev": "Mhm, looks like there's no need for that. \n. ",
    "MarkMurphy": "\nHave you looked at sublimerge?\n\nYes, I've tried it out and I'm not a fan. It shows this on their website  but doesn't offer this functionality out of the box and I'm not sure if purchasing a licence fixes that or not. Even if buying a licence does unlock that functionality I would still prefer to see an implementation that's more of a clone to what Netbeans does. The highlighting extending all the way across the view makes it much easier to compare. And I would like to see context options or buttons to do the any of the following: \nIn the context of either theirs or mine at the top of each file : \"Accept\", \"Accept & Next\"\nIn the context of a block of code in conflict a right click might reveal: \"Use mine before theirs\", \"Use theirs before mine\", \"Use this whole block\", \"Use this whole file\"\nWithin Netbeans I can currently do the following:\nRight clicking anywhere in the project file tree that is under source control, I can see Git -> \"Resolve conflicts...\" is there but disabled unless there are actually conflicts somewhere in the project.\n\nClicking on \"Resolve conflicts...\" opens this interface:\n\n. Sorry guys, I meant to put this in the SideBarGit repo. My bad. Love GitGutter :+1: \n. ",
    "jobedom": "I also get that. GitHub was behaving oddly while I was creating the pull request, so I think it may have been some sort of glitch. I created a new pull request.\n. Thanks! Sorry for the hassle.\n. ",
    "maliayas": "Will this be finished?\n. I understand. Thank you very much.\n. Agreed. So maybe we should put a statusbar indicator for both.\nOn the other hand, I think \"untracked\" indicator should be more noticeable than the \"ignored\" indicator in some way. But I don't know how.\n. Makes sense. But with its current string based style, it may become inflexible. Maybe there should be an array like this?\nstatus_info: [\"diff_stats\", \"branch\", \"ignored_flag\", \"untracked_flag\"]\n. I love the discussion :) Is object ordered in python? With array, users may change the order of the items.\n. Hi. Is there any improvement on this?\n[UNTRACKED] and [ignored] badges could be added to the status bar for this purpose. Note the emphasis via case.\n. Ok, thanks. I may give it a try.\nOn February 2, 2016 6:41:54 PM EET, JD Isaacks notifications@github.com wrote:\n\nThis isn't something I have had time to work on. It's not high on my\nlist of priorities. However, it shouldn't be a very difficult thing to\ndo if you (or anyone else) want to take a stab at it.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/jisaacks/GitGutter/issues/226#issuecomment-178679701\n. \n",
    "mokkabonna": "This would be great, I just made a reset(ustage)/checkout of selected hunk in the git package. https://github.com/kemayo/sublime-text-git/pull/404\nWith the gutter having no difference between the two it is a bit hard knowing which one to use.\n. ",
    "BarbzYHOOL": "This would be very useful\nIf it gets updated I might try the PR, just warn me. ",
    "than": "In action:\n\n. ",
    "mattsmith0308": "Compare against branch fails 80% of the time with this error.\n. No, the file is present in both branches. This is an intermittent bug but it happens more often than not.\n. Yes it is. I haven't noticed anything specifically that causes it to happen and the trace doesn't give much info but I will try to come up with more debugging info.\n. @jisaacks Resolved. Thanks!\n. ",
    "mandx": "@jisaacks Yes you are right, the \"problem\" goes away if I simply quit and open Sublime again. Then I tried to reproduce the issue, but never happened again. Looking at the code, could be that plugin_loaded() is not always called, and therefore the settings global variable may not be set?\n. ",
    "poswald": "FYI, I see this happen reproducibly in the ST3 console on startup if I pip install pylint into my system path (/usr/local/bin/pylint), and it goes away if I pip uninstall it.\n. ",
    "pconerly": ":+1: for being able to compare against anything.\n. ",
    "flux242": "ok, the invalid handle problem can be fixed by adding stdin=PIPE into the aragument list of the Popen function in the run_command(..)\nStill the plugin doesn't work for me. I've put some logging into the run_command function and now I'm really puzzled because it works for one git command and doesn't work for the diff. Here is the command with arguments logged, return code and the result:\n['c:/cygwin/bin/git.exe', '--git-dir=C:\\Alex\\Home\\projects\\qtzpk.git', '--work-tree=C:\\Alex\\Home\\projects\\qtzpk', 'show', 'HEAD:mainwindow.h']\n0\nb'#ifndef MAINWINDOW_H\\n#define MAINWINDOW_H\\n\\n#include \\n\\nnamespace Ui {\\nclass MainWindow;\\n}\\n\\nclass MainWindow : public QMainWindow\\n{\\n    Q_OBJECT\\n    \\npublic:\\n    explicit MainWindow(QWidget parent = 0);\\n    ~MainWindow();\\n    \\nprivate:\\n    Ui::MainWindow ui;\\n};\\n\\n#endif // MAINWINDOW_H\\n'\n['c:/cygwin/bin/git.exe', 'diff', '-U0', '--no-color', 'z:\\temp\\tmpa149o9', 'z:\\temp\\tmpo2fsyv']\n0\nb''\nThe first command returned a content of the current file which is correct, the second command diff always returns empty byteset. Two temp files are properly created and contain the original file and the current edited one.\nAny ideas? \n. good find 0m4r! Well it sounds to me to be a bug in the git binary then because other cygwin utilities like ls,cat,grep or even diff do understand dos paths.\n. ",
    "0m4r": "I did run into something similar.\nI have set up to use git from within cygwin and thought that GitGutter was not working, instead it was and the issue relies in the file path. I did modify the file git_gutter_handler.py diff function to be looking like:\n\n```\n        gitf = self.run_command(['cygpath', self.git_temp_file.name])\n        tmpf = self.run_command(['cygpath', self.buf_temp_file.name])\n    args = [\n        self.git_binary_path, 'diff', '-U0', '--no-color',\n        self.ignore_whitespace,\n        self.patience_switch,\n        gitf,\n        tmpf,\n    ]\n\n```\n\nand then, since I am on the \"-Edge\", the git_gutter.py icon_path function to in order to give a properpath for the icons.\n\npath = '../GitGutter-Edge'\n\nafter this, all started working.\nI recognize this is more a hack than a real solution, but I spent an hour last week on it.\nProbably a flag in the config to enable/disable cygwin stuff would be a much better idea.\n. yes and the reason is that the GitGutter-Edge is looking for icons in a path like 'GitGutter/icons' but that should be 'GitGutter-Edge/icons' or, well, something like that.\nI hope this helps and let me know if I can help more... (btw, with my setup even sublime-text-git suffers of this same kind of problem)\n. I cannot say where the bug is, but I have a way to workaround it :)\n. ",
    "JesseAldridge": "I see there are some settings for improving performance.  Maybe these settings could be automatically and intelligently turned on and off?  Like turning off live mode if I just pasted in 100K lines?  Or maybe toggling when slowness is detected.\n. Haven't noticed any lag problems in like six months now that I think about it.  So I guess 1.4 has been good enough for me.. ",
    "swichers": "That's going to be impossible because Windows cannot execute Linux binaries. GitGutter works fine with remote files (with the performance issue usually present when dealing with remote file systems).\n. ",
    "gespinha": "Yes, it did it now, but it didn't work. My git path returned as \"/usr/bin/git\" does this make any sense to you?\n. @jisaacks I have verified my User Settings and GitGutter isn't in the \"ignored packages\".\n@josue How do I install this via commandline and git cloning?\n. @jisaacks I have checked both and the values are the same:\n\"ignored_packages\":[\"Vintage\"]\n. @jisaacks oh, no problem.\n@josue I have tried installing via commandline and still doesn't work\nAny other way I can diagnose the problem?\nHow can I see the output?\n. GitGutter is not creating a folder for its files in my packages folder. I guess that is the reason why I am getting an error like this, is it not?\nFileNotFoundError: [Errno 2] No such file or directory: '/Users/myusername/Library/Application Support/Sublime Text 3/Packages/GitGutter/view_collection.py'\nBecause I have checked and I have no folder named \"GitGutter\"\n. Yes, I install GitGutter and the folder doesn't exist. The folder called \"GitGutter\".\n. I have git and latest version of Package Control installed.\nI have tried installing vie package control or git cloning.\nI'm just installing and restarting sublime text everytime.\n. I have tried disabling every package I have besides GitGutter and still doesn't work\n. Yes, I've cloned it and the repo is there, so it is cloning. The package still doesn't work though\n. Strange, I just noticed the package is working for the git_gutter.py file. And as I inserted the first line in under the run, the alert sign just popped out.\nWhat now?\n. Yes, I am using other packages and I tried to edit them too, but realised it only works for GitGutter's repo\n. ",
    "josue": "I also cannot install the package via the Sublime package manager, however it did work when i tried via commandline and git cloning.\nHere's my Sublime console output if it helps:\nignored packages updated to: [Vintage, GitGutter]\nException in thread Thread-18:\nTraceback (most recent call last):\n  File \"X/threading.py\", line 639, in _bootstrap_inner\n  File \"/Users/user/Library/Application Support/Sublime Text 3/Packages/Package Control/package_control/package_installer.py\", line 241, in run\n    self.result = self.manager.install_package(self.package)\n  File \"/Users/user/Library/Application Support/Sublime Text 3/Packages/Package Control/package_control/package_manager.py\", line 480, in install_package\n    package_bytes = download_manager.fetch(url, 'Error downloading package.')\n  File \"/Users/user/Library/Application Support/Sublime Text 3/Packages/Package Control/package_control/download_manager.py\", line 180, in fetch\n    return self.downloader.download(url, error_message, timeout, 3, prefer_cached)\n  File \"/Users/user/Library/Application Support/Sublime Text 3/Packages/Package Control/package_control/downloaders/urllib_downloader.py\", line 111, in download\n    http_file = self.opener.open(request, timeout=timeout)\n  File \"X/urllib/request.py\", line 473, in open\n  File \"X/urllib/request.py\", line 491, in _open\n  File \"X/urllib/request.py\", line 451, in _call_chain\n  File \"/Users/user/Library/Application Support/Sublime Text 3/Packages/Package Control/package_control/http/validating_https_handler.py\", line 44, in https_open\n    return self.do_open(http_class_wrapper, req)\n  File \"/Users/user/Library/Application Support/Sublime Text 3/Packages/Package Control/package_control/http/persistent_handler.py\", line 94, in do_open\n    if r.is_keep_alive():\n  File \"/Users/user/Library/Application Support/Sublime Text 3/Packages/Package Control/package_control/http/debuggable_http_response.py\", line 58, in is_keep_alive\n    if connection.lower() == 'keep-alive':\nAttributeError: 'NoneType' object has no attribute 'lower'\n. I have verified my User Settings and GitGutter isn't in the \"ignored packages\".\n@Gespinha see instructions for Installation > OSX\n. ",
    "jmromer": "I'm having this same issue, oddly enough. it works fine on one user account, but on this new one that I set up, GitGutter won't start and doesn't respond to window.run_command(\"git_gutter\"). I have a fresh install of Sublime Text on this account...I'll poke around and see if I can find what might be going on.\n. When I uninstall and reinstall GitGutter, it shows in when I List Packages in the command palette, yet there's no GitGutter directory under Packages, only a settings file for GitGutter under Installed Packages. And the console has the following from the installation:\nignored packages updated to: [Markdown, Vintage, GitGutter]\nfound 1 files for base name Soda Dark 3.sublime-theme\nErrors parsing theme:\nAnimated properties must have both target and speed specified\ntheme loaded\nreloading Packages/User/Preferences.sublime-settings\nfound 1 files for base name Soda Dark 3.sublime-theme\nErrors parsing theme:\nAnimated properties must have both target and speed specified\ntheme loaded\nReloading /Users/ridgway/Library/Application Support/Sublime Text 3/Packages/User/Preferences.sublime-settings\nignored packages updated to: [Markdown, Vintage]\nfound 1 files for base name Soda Dark 3.sublime-theme\nreloading Packages/User/Package Control.sublime-settings\nErrors parsing theme:\nAnimated properties must have both target and speed specified\ntheme loaded\nreloading Packages/User/Preferences.sublime-settings\nfound 1 files for base name Soda Dark 3.sublime-theme\nErrors parsing theme:\nAnimated properties must have both target and speed specified\ntheme loaded\nreloading plugin GitGutter.git_gutter\nreloading plugin GitGutter.git_gutter_change\nreloading plugin GitGutter.git_gutter_compare\nreloading plugin GitGutter.git_gutter_events\nreloading plugin GitGutter.git_gutter_handler\nreloading plugin GitGutter.git_helper\nreloading Packages/GitGutter/GitGutter.sublime-settings\nreloading plugin GitGutter.view_collection\nfound 12 files for base name Default.sublime-keymap\nfound 11 files for base name Main.sublime-menu\nReloading /Users/ridgway/Library/Application Support/Sublime Text 3/Packages/User/Preferences.sublime-settings\nNot sure why GitGutter's showing up under \"ignored packages\" but it's not there after installation\u2014neither in User or Default preferences.\n. Tried it again after uninstalling the Soda Dark theme:\nignored packages updated to: [Markdown, Vintage, GitGutter]\nfound 1 files for base name Default.sublime-theme\ntheme loaded\nreloading Packages/User/Preferences.sublime-settings\nfound 1 files for base name Default.sublime-theme\ntheme loaded\nReloading /Users/ridgway/Library/Application Support/Sublime Text 3/Packages/User/Preferences.sublime-settings\nreloading Packages/User/Package Control.sublime-settings\nignored packages updated to: [Markdown, Vintage]\nfound 1 files for base name Default.sublime-theme\ntheme loaded\nreloading Packages/User/Preferences.sublime-settings\nreloading plugin GitGutter.git_gutter\nreloading plugin GitGutter.git_gutter_change\nreloading plugin GitGutter.git_gutter_compare\nreloading plugin GitGutter.git_gutter_events\nreloading plugin GitGutter.git_gutter_handler\nreloading plugin GitGutter.git_helper\nreloading Packages/GitGutter/GitGutter.sublime-settings\nreloading plugin GitGutter.view_collection\nfound 12 files for base name Default.sublime-keymap\nfound 11 files for base name Main.sublime-menu\nfound 1 files for base name Default.sublime-theme\ntheme loaded\nReloading /Users/ridgway/Library/Application Support/Sublime Text 3/Packages/User/Preferences.sublime-settings\nIt looks like Package Manager temporarily adds and then removes any package it's installing/uninstalling to the ignored packages list. \nInstalling manually didn't help, but for some reason this fork works: https://github.com/bradsokol/VcsGutter\n. ",
    "lucasmezencio": "I have the same issue.\nI have already installed and reinstalled (via Package Control only) several times. And it still does not working.\nNo errors and no folder called GitGutter under Packages folder.\nI just do not know what to do.\nIf I install via repo cloning, the plugin works, but I want to install via Package Control as well.\nCan anyone help us?\nThanks!\n. ",
    "scherichel": "@lucasmezencio\nIf you're on mac there's a package called SublimeFixMacPath\ncd ~/Library/Application\\ Support/Sublime\\ Text\\ 3/Packages/\ngit clone git://github.com/int3h/SublimeFixMacPath.git\nAfter using this package GitGutter was back to normal. \n. ",
    "aaaronic": "I can offer a +1 for SublimeFixMacPath fixing my issue with GitGutter not working.\n. ",
    "daniisco": "Can someone help me. I installed sublime text 3 yesterday and I have installer Gitgutter and the Fix path but it doesnt work. What do I do?\n. Pictor13. When I press CMD+SHIFT+P do you want me to install the plugin PHPCs? What do you mean by execute the \"PHP Code Sniffer: Turn Execute On Save Off\". Sorry for the stupid question.\n. @Pictor13 It doesn't work to click enter, nothing happens :/\n. Anyone?\n. I've installed Git yeah, I dont know what git_path is to be honest. I'm all new with MAC, Sublime and programmaring overall. \n. Anyone who can give me a really complete guide what im gonna do to make this work. I really want this useful plugin :)\n. Please help me :)\n. I have read everything several times and in different forums. I'm n00b in computers, sublime and in mac so i don't understand. What I can tell you is I've installed Git, Gitgutter and MAC path and it doesn't work. I dont seem to have a Gitgutter folder in the Sublime directory. \nWhen i type \"which git\" inte terminal I get /usr/bin/git. I don't understand what \"git path\" is, where i'm gonna copy/paste different things and so on. I would appreciate every help I can get. \n. @TSiege I have copied that in user-settings but it still doesn't work for me. It's still /usr/bin/git in terminal :/\n. @TSiege Okey, it is /usr/local/bin/ git now. But I don't see any icons when i change my code ini Sublime with Gitgutter. \n. @TSiege Okey, it is /usr/local/bin/git now. But I don't see any icons when i change my code ini Sublime with Gitgutter. \n. ",
    "Pictor13": "I would add that I thought to have the same issue.\nThen I checked better and I found a problem with PHPCS not correctly running.\nAfter fixing PHPCS there were no other errors in the console, and GitGutter seemed to be correctly \ninstalled (as in this Issue).\nAfter a little I realised that simply PHPCS was hiding the GitGutter's icons cause of some problems in the code.\nI suggest you to press CMD+SHIFT+P and execute the \"PHP Code Sniffer: Turn Execute On Save Off\".\nThis way you should see correctly the icons!\nIf it IS installed and you DO NOT SEE any error, then everything is working ok. Just there is something else \"covering\" the icons. So mainly check for other extensions that could provoke the problem!\n. daniisco, CMD+SHIFT+P (on OSX) is opening the \"Command Palette\"; the same you are getting going to the menu \"Tools -> Command Palette...\".\nThat is one of the main features of Sublime, it allows you to execute whatever command you need and that is supported by Sublime.\nOver there you have to write \"PHP Code Sniffer: Turn Execute On Save Off\", or even just the starting letters or part of the words (but in sequence).\nYou can type:\n- pcsteoff\n- PHP Code Sniffer: Turn Execute On Save Off\n- phpcs off\n  they are equivalent.\n  Press ENTER.\n  Then you should get the extension PHPCS to not overriding (graphically) the GitGutter icons.\n. When you press enter you just execute the command, that makes what it says: disables the sniffing of the code.\nAfter that the other Sublime extension, \"PHP Code Sniffer\", doesn't interfere with \"GitGutter\" and should show the icons for the changes.\n- Has the file you are testing been committed in a Git repository?\n- Do you have on it any change in the code, respect to you last Gig commit?\n- Do you have the PHP-CS (SublimeLinter-phpcs) extension?\n  - is it working?\n  - did you try to put some invalid code into the file, then save, to see if PHP-CS is raising any notice? (so that you are sure it is working)\n  - did you disable the PHP-CS behaviour with the command I was telling you? (\"Turn execute on save off\")\nMy suggestion is relative to my case. There could be a possibility that in your case the problem is not a conflict with PHP-CS.\n. ",
    "plicjo": "SublimeFixMacPath fixed this issue for me too.\n. ",
    "rajankur": "This solved for me:\n1. Added GitGutter in ignored_packages\n2. Restarted Sublime Text\n3. Removed GitGutter from ignored_packages\n. ",
    "trantorLiu": "SublimeFixMacPath fixed this issue for me too.\n. ",
    "amerikan": "My GitGutter had stopped working after I did a Mac OSX update. The problem was being caused by Xcode, since it updated too I had to open it and agree to its terms and conditions. After that GitGutter started working again. I guess Xcode was locking up my git.\n. @dansterrett @giovannibonetti Great! \nI found this out after running the git in my command-line. So if your GitGutter is not working first run git in your command-line and go from there.\n. @andrewchilds try this: https://github.com/jisaacks/GitGutter/issues/152#issuecomment-141605598\nEdit: meant this https://github.com/jisaacks/GitGutter/issues/152#issuecomment-141221859\n. ",
    "dansterrett": "@amerikan's solution worked for me.\n. ",
    "giovannibonetti": "Thanks, @amerikan! :+1: \n. +1 => not working here as well since last update on Mac OS :(\n. ",
    "bfcoder": ":+1: Thanks @amerikan!\n. ",
    "emadalam": "@amerikan :+1: \n. ",
    "eko3alpha": "I just updated to El Capitan and found that GitGutter was no longer working on ST3, I manually ran\ngit clone https://github.com/int3h/SublimeFixMacPath.git ~/Library/Application\\ Support/Sublime\\ Text\\ 3/Packages/FixMacPath\nSublimeFixMacPath \nhttps://github.com/int3h/SublimeFixMacPath\nNow its working again.  It appears this happens on OSX updates.  I had to do this once before.\n. I just ran into another issue where GitGutter seemingly stopped working.  If you update Xcode and have not agreed to the license agreements GitGutter will stop working.\nYou have not agreed to the Xcode license agreements. You must agree to both license agreements below in order to use Xcode.\nHit the Enter key to view the license agreements at '/Applications/Xcode.app/Contents/Resources/English.lproj/License.rtf'\nOnce I opened Xcode and agreed to the terms, GitGutter worked again.\n. ",
    "richkuo": "@amerikan BRILLIANT! THANK YOU!!\n. ",
    "achilles-tee": "@amerikan's solution alternative way\nexecute xcode-select --install in terminal will update the xcode as well.\n. ",
    "StewartDouglas": "@amerikan :+1: thanks!\n. ",
    "cweekly": "SublimeFixMacPath fixed this issue for me too.\nI'm on st3, and simply installed it from package control.\nIt's a single python script that ensures your $PATH is available to Sublime, so it can find non-system binaries (eg homebrew packages).\n. ",
    "arhen": "add this comment to sublime setting preference :\n\n\"git_binary\": \"\",\n  \"compare_against\": \"HEAD\",\n  \"live_mode\": true,\n  \"focus_change_mode\": true,\n  \"non_blocking\": true,\n. \n",
    "andrewchilds": "GitGutter stopped working for me after I upgraded to El Capitan - installing the XCode command line tools with xcode-select --install got it working again.\n. ",
    "amrutjadhav": "@rajankur Adding it to ignore package, restart sublime and remove it from ignore package also works for me. . I am also getting same issue.. ",
    "metaskills": "OK, I made a pull request to Glacier theme. Will let you know when it is accepted.\nhttps://github.com/joeyfigaro/glacier-theme/pull/4\n. Thanks!\n. ",
    "KeithCorbalis": "I am looking for a workaround with this as well. I have been using the SFTP for editing files in a remote desktop, and wondering if there is a way I can point GitGutter to a remote .git file over a ssh connection. That would be really cool.\n. ",
    "mpchadwick": ":+1: \n. ",
    "kartoch": "Open in UserEcho: http://sublimetext.userecho.com/topic/434787-/\n. My mistake, you can add gutter in free distriction mode by adding to distarction free preferences:\n\"gutter\": true\n. About my configuration (on Linux), this is the content of the  file 'Packages/User/Distraction Free.sublime-settings'\n{\n    \"line_numbers\": true,\n    \"gutter\": true,\n    \"draw_centered\": true,\n    \"wrap_width\": 100,\n    \"word_wrap\": true,\n}\n. ",
    "crystalin": "Sorry, wrong rep :(\n. ",
    "arsham": "Thanks for replying.\nWell, the problem was non_blocking setting ( it was set to true ). Setting it to false works on either way of installation ( git clone or package manager ).\nAn observation: changing non_blocking is not applied unless restarting ST.\nThanks\n. Yes, turning it to true and restarting doesn't help. The only option is false.\n. ",
    "adawley": "I looks like there is a logic difference in the latest commit c586fb8cbd3ded7ea1e7299c3927a4561f57e142 that differs with the previous commit.  I added a comment at the line i am talking about.\n. Sorry, I haven't had time to really nail down this error.  I spent an hour or so last week working through the logic for live_mode vs non_blocking and i was not able to do so without getting rid of live_mode in all of the new lines that it occurs on (the truth table got a bit funky).  I am not sure where to go from here.\n. ",
    "berkus": "Seems to be still an issue - setting blocking mode and restarting ST3 shows gutter icons now (OSX Mavericks, ST3 3064)\n. ",
    "csrl": "I'd like to see this implemented.  Both from the View menu and a Hotkey it'd be nice to hide the git gutter.   Perhaps also when entering \"distraction free\" mode.  I simply do not always want to see the git change markers, it can be distracting.\n. ",
    "harshaxnim": "@jisaacks Is this something you intend to do in sometime? I find the dots on left to be too distracting when coding, but I do not want to remove your plugin. I'd like the changes to show when I hover on the gutter, or something like that. If I get some time, I'll try to implement it myself.\n. ",
    "tedmiston": "@jisaacks Is this feature still on the table?  I'd like to disable gitgutter in the very early stage of a project, for example, just after git init when I may have dozens of new files in a project though not yet committed. (I usually get a solid MVP version running before making the initial commit.)\nEdit: Perhaps there could be some kind of hack like setting git_binary to a non-git command that does nothing?. @deathaxe Thank you, exactly what I was looking for. . Update 5/29/17 4:11 PM:\n\nStriked deboune_delay comment (see next comment)\nInstalling the package Fix Mac Path mentioned below obviates the need for overriding the default git_binary setting\n\n\nFollowing the suggestions of @pixilation, here's a fix for OS X / macOS:\nFirst, I ran the GitGutter support command (Preferences > Package Settings > GitGutter > Support Info) which yielded some confusing comments (it is installed via PC).\n\nAnyway, I upgraded git to the latest version in Homebrew:\n$ brew upgrade git\n...\n==> Summary\n\ud83c\udf7a  /usr/local/Cellar/git/2.13.0: 1,463 files, 33.4MB\n\n$ git --version\ngit version 2.13.0\nhub version 2.2.9\n\nAfter restarting Sublime and disabling / enabling the GitGutter package the issue persisted.  I removed the package which led to the rare occurrence of sending Sublime into a spinning beachball then required force quit.  I repeated this process and still saw the fully green GitGutter. \n Removing it a second time reproduced crashing Sublime again.\nFinally, I followed @agungyuliaji's suggestion to point git_binary to the Homebrew version which solved it.  ~~While in settings, I also dropped debounce_delay from 1000 (default) to 0 which made the diff icons appear noticeably faster.~~\n. @deathaxe Thank you!  I just installed the Fix Mac Path package, removed overriding the binary setting, and amended my above comment.  I'll check the support info dialog again once the Sublime package update is released.. @deathaxe Just to circle back, the Support Info dialog is now working as expected in the new version.. ",
    "fgb": "Sure, I'll rebase the commit tonight. I'd imagined that #163 might cause an issue, but I didn't know which you were going to pull in first.\n. Had to nuke my master branch to properly get the rebased commit. Took care of the merge conflict, so you should now be able to do a fast-forward merge.\n. ",
    "wesbos": "I acutally have this on a branch locally that I've been using for about a month. Let me push it..\n. Okay I've added them to cobalt2 https://github.com/wesbos/cobalt2/commit/e65299afd96b080b6cb61cc5c56ce59f608d10f5\n. ",
    "rahul-ramadas": "I'm seeing it too. I don't have Emmet.\n. Seems to be fixed on ST3.\n. The functionality is not available through the web interface, but Hub lets you do it. Check out this Stackoverflow answer.\n. My bad. The issue does not occur with the latest master.. Is it possible to maybe provide a workaround that allows turning off the functionality to check for a valid git installation? If the workaround is active, the plugin could simply assume that git is installed. The workaround would of course default to being disabled, but users who are seeing delays can choose to activate the workaround, at their own risk.\nThis workaround simply mirrors your suggestion above to delete the lines (I tried it and it works fine; I also had to fixup some code that checks the git version to see if a particular git feature is present), except that building it into the plugin means that people don't have to redo it on every update.. Seems much better, I just occasionally notice a small hang on opening a file, which I guess is expected.. ",
    "tunerex": "I am seeing this too. I got this after installing encodingHelper. \nI removed encodingHelper and re-installed GitGutter, but still seeing a same thing.\n. ",
    "twojustin": "i have the same problem, \nand this is the console error: \nUnable to decode Packages/GitGutter.sublime-package/icons/deleted_bottom_arrow.png\nUnable to decode Packages/GitGutter.sublime-package/icons/deleted_top_arrow.png\n#46 and #37 also had some errors, but i don't know if its the same cause. \n. ",
    "lancelote": "Same \"Unable to decode\" error.\n. ",
    "kmlx": "+1\n. it works!\nthanks!\n. ",
    "gbraad": "Same problem here on a fresh install of SublimeText 3 on a Win box\n. ",
    "theras": "+1\n. ",
    "itsnotvalid": "I had it working until I updated to v2014.05.29 earlier today.\nError received:\nUnable to decode Packages/Theme - Default/Packages\\GitGutter.sublime-package\\icons\\changed.png.png\nUnable to open <redacted>/Sublime Text 3/Packages/GitGutter/GitGutter.sublime-settings\nThen I looked into the zip file in Installed Packages and there is no Theme - Default but only one folder named icon.\nEvidently it should be related to last commit:\nhttps://github.com/jisaacks/GitGutter/commit/e5450eb00239cc915b4613aa39efdcffaf9bdb3b#diff-33236be00bb121dbc530dbcff9d359aaR92\nP.S. Using win64 version of st3\n. ",
    "Crazy-Owl": "I've got the same problem on Ubuntu 14.04 x64\nST build 3059\n. ",
    "dmglab": "+1\n. ",
    "NelsonBrandao": "+1\n. ",
    "drinkataco": "+1\n. ",
    "oller": "+1 \nJust noticed this myself, thought it was SublimeLinter but seems to be a problem with GitGutter unable to reference icons\n. Agreed, it's fixed.\nGreat plugin, no need to be sorry @jisaacks !\nThanks again\n. ",
    "danielsamuels": ":+1:\n. ",
    "deadlocks": ":+1: \n. Fixed for me too. Sublime 3 - ubuntu 12.04 x86\nCheers!!\n. ",
    "Eyenseo": ":+1: \n. ",
    "meodai": "+1 (have the same in with gutter color doe)\n. ",
    "ulyssesric": "Still have the issue. ST2, v2014.05.29.11.57.01, removed and reinstalled from Package Control. \nError message:\nUnable to decode ~/Library/Application Support/Sublime Text 2/Packages/Theme - Default/../include/icons/inserted.png\nUnable to decode ~/Library/Application Support/Sublime Text 2/Packages/Theme - Default/../include/icons/changed.png\nWhere the path should be:\n~/Library/Application Support/Sublime Text 2/Packages/GitGutter/icons/changed.png\nSeems that line 19 of git_gutter.py is the source of error...\n. OK I think I've found the source of this problem. v2014.05.30.00.51.25.\ngit_gutter.py line 94:\nreturn \"/\".join([path, self.plugin_dir(), 'icons', icon_name + extn])\nIt seems that the self.plugin_dir() had returned the parent directory name of the file opened in editor, but not the parent directory of git_gutter.py.\nFor example, if I'm editing a file which path is ~/Document/source/main.c, and self.plugin_dir() will return the string \"source/\". If I switch another file ~/Document/include/global.h, and self.plugin_dir() will return the string \"include/\"\nThis may due to the different definition of reference constant \"file\" used in:\ngit_gutter.py line 75:\npath = os.path.realpath( file)\nLooks like the \"file\" refers to the path of current file in editing in ST2, but not the Python file itself.\n. ",
    "carlos-jenkins": "I'm having the issue too. Ubuntu 14.04 and Sublime Text 2.\nI removed GitGutter using Package Manager, restarted Sublime Text, reinstalled, restarted, and artifacts still there.\nUnable to decode /home/jenkins/.config/sublime-text-2/Packages/Theme - Default/../pvapi/icons/changed.png\nUnable to decode /home/jenkins/.config/sublime-text-2/Packages/Theme - Default/../pvapi/icons/deleted_bottom_arrow.png\nUnable to decode /home/jenkins/.config/sublime-text-2/Packages/Theme - Default/../pvapi/icons/deleted_top_arrow.png\nUnable to decode /home/jenkins/.config/sublime-text-2/Packages/Theme - Default/../pvapi/icons/inserted.png\nUsing GitGutter v2014.05.29.11.57.01\nThanks\n. I confirm fixed for ST2 in GitGutter v1.1.1 just released for Ubuntu 14.04.\nI think you can close this @jisaacks \nThanks.\n. ",
    "joshjo": "Same issue. Ubuntu x64 Sublime text 2.\n. This issue was already commented, and in ST3 you can set some parameters such as delay and async update. Go for documentation.\n. ",
    "Altynai": "I'm using ST 2 on OS X 10.9.1, and I did some cheat to fix the problem.\nChange the return value of the function icon_path in git_gutter.py\n``` py\ndef icon_path(self, icon_name):\n    if icon_name in ['deleted_top','deleted_bottom','deleted_dual']:\n        if self.view.line_height() > 15:\n            icon_name = icon_name + \"_arrow\"\nif int(sublime.version()) < 3014:\n    path = '..'\n    extn = ''\nelse:\n    path = 'Packages'\n    extn = '.png'\n\nreal_path = r\"../GitGutter\"\nreturn \"/\".join([real_path, 'icons', icon_name + extn])\n\n```\n. ",
    "nmnja": "Not fixed, ST2 - Debian\nv. 2014.05.30.00.51.25\n. ",
    "kumarharsh": "Using ST2. The error persists. Going to try @Altynai 's solution...\n. ... and it works. Thanks @Altynai \n. ",
    "kevincittadini": "@Altynai's solution does work for me too now. But yea.. I'd rather not to have hardcode\n. Me and a colleague of mine have the same issue of @qaiken. But we had the plugin already installed. A reinstallation of it doesn't fix the problem.\n\n. Not for me. Still same problem\n. ",
    "ekbarber": "@jisaacks This worked for me with ST2, thanks!\n. @Reinmar Thanks for the response, how do you find ST2's console logs? \n. @Reinmar Thanks!\n. ",
    "abestic9": "Thank you for fixing this.\n. ",
    "mcmoe": "Hi @jisaacks , tried the change in ST2, still same error\n. Yes indeed, it won't work for ST2. What I did was revert to the last known working commit which is at  https://github.com/jisaacks/GitGutter/commit/5f332b7 .. go to the GitGutter package directory in your ST2 Package directory and run \"git checkout 5f332b7\" .. this should revert your local branch to the last working commit. You can then update everything once there is a working solution.\n. ",
    "tomsherrod": "Made the changes as @jisaacks suggested:\n  File \"./sublime_plugin.py\", line 205, in on_activated\n  File \"./sublime_plugin.py\", line 154, in run_timed_function\n  File \"./sublime_plugin.py\", line 204, in \n  File \"./git_gutter_events.py\", line 44, in on_activated\n  File \"./view_collection.py\", line 16, in add\nValueError: Attempted relative import in non-package\nin ST2.\n. ",
    "sergiolepore": "Installed latest version available (2014.05.29.11.57.01) using Sublime Package Control for ST2 and I'm facing the same errors.\n. Working, both this issue and #167 on ST2\n@jisaacks thanks!\n. ",
    "qaiken": "I tried to install via package control and cloning the repo. Seems to be working but the gutter icons are displaying strangely. (see attached)\n\n. ",
    "AlessandroMinoccheri": "Same problem for me today, icons are not working like previous comment.\nI have tried to uninstall and reinstall but it doesn't work yet\n. ",
    "martins": "Same here. In console it shows:\nUnable to decode .../Application Support/Sublime Text 2/Packages/Theme - Default/..//icons/changed.png\n. ",
    "blalor": "I just updated from Package Control.  Also seeing the weird icons.\n. Resolved for me.\n. ",
    "Scotchester": "Upgraded and it's working for me again. Thanks for the fast fix! I never realized how dependent I was on this plugin...\n. ",
    "Duhemm": "What do you mean ? Too me it looks like I'm loading the setting in load_settings.\nI guess you've been confused by the folded diff =)\n. Hey, have you had time to test this ?\n. This sounds good ! I admit that I forgot that retrieving the name of the current branch was an expensive operation, your solution is indeed a good compromise. How about having none, all and only_comparison as valid values for the show_status flag ? \n. What do you think ? I settled for default instead of only_comparison, which was utterly confusing.\n. ",
    "davidolrik": "Ah, I'm more of an Emacs guy, so I just changed the keybindings locally :+1: \n. ",
    "trkoch": "Can anyone confirm this? Maybe it is related to my local git settings.\n. ",
    "simonrad": "Wow, I feel dumb for not looking at the options or the docs. Turning off live_mode works acceptably for me.\nBecause I'm on ST2, Non Blocking Mode and Debounce Delay have no effect for me.\nThank you for the tip!  Feel free to close this ticket.\n. ",
    "benweier": "God damn it double posted my comment and it removed both when I deleted one.\n. I hope I can remember everything I said before..\n@bprosnitz @ryanmargheriti Have you checked the Task Manager? I find that Windows (7 & 8) doesn't terminate the git process after each operation and I end up with dozens of instances of git.exe. Killing these processes clears up the memory allocation but it's very inconvenient.\n@jisaacks Is SG not releasing the child process when it is finished?\n. SOB. I'm getting my Git plugins mixed up.\n. Ignore that then, I think I meant to post it in the other window. I was trying to identify what GitGutter was doing different to SublimeGit because SG kills performance fast with heaps of git processes. I get a little lag from GG when switching tabs/windows (as much as 1sec) but SG has been the worst offender so far.\n. ",
    "bachue": "@joshjo OK, I'll have a try\n. @joshjo Thanks, it's resolved. I didn't notice the README.\n. ",
    "jasonsims": "Thanks @jisaacks. Seems like GitGutter is trying to run against parent directory instead of the binary\n/usr/local/git/bin diff -U0 --no-color --patience /var/folders/w6/rmyrwd192cs4g1p1vw6_47hw0000gn/T/tmps1318u /var/folders/w6/rmyrwd192cs4g1p1vw6_47hw0000gn/T/tmp38jcuc\n. Ok, that was a leftover configuration setting that I forgot to clear. However, for some reason the process which runs the args can't find the git command even though it's in the path.\n['git', 'diff', '-U0', '--no-color', '--patience', '/var/folders/w6/rmyrwd192cs4g1p1vw6_47hw0000gn/T/tmpidgmt4', '/var/folders/w6/rmyrwd192cs4g1p1vw6_47hw0000gn/T/tmps095d0']\nTraceback (most recent call last):\n  File \"/Applications/Sublime Text.app/Contents/MacOS/sublime_plugin.py\", line 526, in run_\n    return self.run()\n  File \"/Users/jasonsims/Library/Application Support/Sublime Text 3/Packages/GitGutter/git_gutter.py\", line 45, in run\n    inserted, modified, deleted = ViewCollection.diff(self.view)\n  File \"/Users/jasonsims/Library/Application Support/Sublime Text 3/Packages/GitGutter/view_collection.py\", line 51, in diff\n    return ViewCollection.views[key].diff()\n  File \"/Users/jasonsims/Library/Application Support/Sublime Text 3/Packages/GitGutter/git_gutter_handler.py\", line 154, in diff\n    results = self.run_command(args)\n  File \"/Users/jasonsims/Library/Application Support/Sublime Text 3/Packages/GitGutter/git_gutter_handler.py\", line 234, in run_command\n    startupinfo=startupinfo, stderr=subprocess.PIPE)\n  File \"X/subprocess.py\", line 818, in __init__\n  File \"X/subprocess.py\", line 1416, in _execute_child\nFileNotFoundError: [Errno 2] No such file or directory: 'git'\nsh\n02:26:49 [383]$ echo $PATH\n/usr/local/mongodb/bin:/usr/local/git/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin:/usr/local/git/bin\n. @andreasb Did you check the GitGutter settings at\npreferences > package settings > GitGutter > Settings - Default\nIf the value of the git_binary property here doesn't match the output when you run which git from your terminal, then you'll need to adjust this setting. Just copy paste the output of which git into your user settings \njs\n// preferences > package settings > GitGutter > Settings - User\n{\n  \"git_binary\": \"/usr/local/bin/git\"\n}\n. This was originally my issue so I'll go ahead and close it. The resolution is detailed in issuecomment-72684981\n. ",
    "andreasb": "@jisaacks I'm getting the PermissionError too:\npython\nTraceback (most recent call last):\n  File \"/Applications/Sublime Text.app/Contents/MacOS/sublime_plugin.py\", line 526, in run_\n    return self.run()\n  File \"git_gutter in /Users/andreas/Library/Application Support/Sublime Text 3/Installed Packages/GitGutter.sublime-package\", line 45, in run\n  File \"view_collection in /Users/andreas/Library/Application Support/Sublime Text 3/Installed Packages/GitGutter.sublime-package\", line 51, in diff\n  File \"git_gutter_handler in /Users/andreas/Library/Application Support/Sublime Text 3/Installed Packages/GitGutter.sublime-package\", line 153, in diff\n  File \"git_gutter_handler in /Users/andreas/Library/Application Support/Sublime Text 3/Installed Packages/GitGutter.sublime-package\", line 233, in run_command\n  File \"./subprocess.py\", line 824, in __init__\n  File \"./subprocess.py\", line 1448, in _execute_child\nPermissionError: [Errno 13] Permission denied\nHow do I print the args? GitGutter.sublime-package seems to be a binary file?\n. Ah, that fixed it. Thanks @jasonsims, I appreciate it.\n. It doesn't seem like I have the power to do so. :-/\n. ",
    "ratrahan": "Thank you for writing back.\nI have installed git \nI have also installed the git package in sublime text\nHere is what I added to my user preferences for git gutter \u2013 \n\n{\n\"git_binary\": \"C:\\\\Program Files (x86)\\\\Git\\\\bin\\\\git.exe\",\n}\n\nI created a repository using git gui and named it repoman. But I don\u2019t know if I am in a repository\nThat is all I have done.\nI embarrassed to say that I am really, really ignorant about this git world. I\u2019m just trying out Sublime Text because it was recommended to me and your git gutter package is on everyone\u2019s favorite list.\nSorry for the trouble, but I do appreciate you help and time spent on this matter.\nFrom: JD Isaacks [mailto:notifications@github.com] \nSent: Tuesday, July 15, 2014 6:32 PM\nTo: jisaacks/GitGutter\nCc: ratrahan\nSubject: Re: [GitGutter] Can't get gitgutter to work (#179)\nWhat value did you set for git_binary?\nAlso, you do have git installed and are in a git repo correct?\n\u2014\nReply to this email directly or view it on GitHub https://github.com/jisaacks/GitGutter/issues/179#issuecomment-49106526 .  https://github.com/notifications/beacon/6188692__eyJzY29wZSI6Ik5ld3NpZXM6QmVhY29uIiwiZXhwaXJlcyI6MTcyMTA4NjI5OSwiZGF0YSI6eyJpZCI6MzcxMDIxNzB9fQ==--b16d4a5dd98c74ec5cbcde1424c94aca942d650e.gif \n. ",
    "Grokzen": "Same problem for me. live_mode=true fixes the problem i do not want to run it in live mode because of performance\nUbuntu 12.04, ST3 3059.\n. ",
    "bcomnes": "I think I am having a similar issue.  Modifications only show up if I ask gitgutter to perform a diff manually even though live mode is on.  (with non-blocking mode).\n. Everything is working here, not sure what fixed it.\n. :+1: LGTM for the last few months.\n. ",
    "kapitanluffy": "I have the same issue. Here's my config\n``` json\n{\n\"git_binary\": \"\",\n  \"live_mode\": true,\n  \"focus_change_mode\": true,\n  \"non_blocking\": true,\n  \"debounce_delay\": 1000,\n  \"ignore_whitespace\": \"none\",\n  \"show_markers_on_untracked_file\": true,\n  \"patience\": true\n}\n```\n. ",
    "adam-beck": "I'm seeing the same thing ST3 Build 3083 and changing live mode to true also fixes the issue. Though, that's not what I want.\n. I changed packages from GitGutter to GitGutter-Edge and it does appear to be fixed now.\n. ",
    "ghost": "Hi,\nI have 1.8.4.msysgit.0 and yes i have git in my PATH variable\n. I also tried to set the PATH manually in Preferences -> Package Settings -> Gitgutter -> default settings : : git_binary\n. Startup lines at the moment : \nstartup, version: 2221 windows x64 channel: stable\nexecutable: /C/Program Files/Sublime Text 2/sublime_text.exe\nworking dir: /C/Program Files/Sublime Text 2\npackages path: /C/Users/Mostie/AppData/Roaming/Sublime Text 2/Packages\nsettings path: /C/Users/Mostie/AppData/Roaming/Sublime Text 2/Settings\nPackageSetup not required\nPy_GetProgramName(): sublime_text.exe\nPy_GetExecPrefix(): C:\\Program Files\\Sublime Text 2\nPy_GetProgramFullPath(): C:\\Program Files\\Sublime Text 2\\sublime_text.exe\nPy_GetPath(): C:\\Program Files\\Sublime Text 2\\python26.zip;C:\\Program Files\\Sublime Text 2\\DLLs;C:\\Program Files\\Sublime Text 2\\lib;C:\\Program Files\\Sublime Text 2\\lib\\plat-win;C:\\Program Files\\Sublime Text 2\\lib\\lib-tk;C:\\Program Files\\Sublime Text 2\nPy_GetPythonHome(): C:\\Program Files\\Sublime Text 2\ncatalogue loaded\nfound 5 files for base name Default.sublime-keymap\nfound 1 files for base name Default.sublime-mousemap\nfound 3 files for base name Main.sublime-menu\nReloading plugin C:\\Users\\Mostie\\AppData\\Roaming\\Sublime Text 2\\Packages\\CSS\\css_completions.py\nReloading plugin C:\\Users\\Mostie\\AppData\\Roaming\\Sublime Text 2\\Packages\\Default\\comment.py\nReloading plugin C:\\Users\\Mostie\\AppData\\Roaming\\Sublime Text 2\\Packages\\Default\\copy_path.py\nReloading plugin C:\\Users\\Mostie\\AppData\\Roaming\\Sublime Text 2\\Packages\\Default\\delete_word.py\nReloading plugin C:\\Users\\Mostie\\AppData\\Roaming\\Sublime Text 2\\Packages\\Default\\detect_indentation.py\nReloading plugin C:\\Users\\Mostie\\AppData\\Roaming\\Sublime Text 2\\Packages\\Default\\duplicate_line.py\nReloading plugin C:\\Users\\Mostie\\AppData\\Roaming\\Sublime Text 2\\Packages\\Default\\echo.py\nReloading plugin C:\\Users\\Mostie\\AppData\\Roaming\\Sublime Text 2\\Packages\\Default\\exec.py\nReloading plugin C:\\Users\\Mostie\\AppData\\Roaming\\Sublime Text 2\\Packages\\Default\\fold.py\nReloading plugin C:\\Users\\Mostie\\AppData\\Roaming\\Sublime Text 2\\Packages\\Default\\font.py\nReloading plugin C:\\Users\\Mostie\\AppData\\Roaming\\Sublime Text 2\\Packages\\Default\\goto_line.py\nReloading plugin C:\\Users\\Mostie\\AppData\\Roaming\\Sublime Text 2\\Packages\\Default\\indentation.py\nReloading plugin C:\\Users\\Mostie\\AppData\\Roaming\\Sublime Text 2\\Packages\\Default\\kill_ring.py\nReloading plugin C:\\Users\\Mostie\\AppData\\Roaming\\Sublime Text 2\\Packages\\Default\\mark.py\nReloading plugin C:\\Users\\Mostie\\AppData\\Roaming\\Sublime Text 2\\Packages\\Default\\new_templates.py\nReloading plugin C:\\Users\\Mostie\\AppData\\Roaming\\Sublime Text 2\\Packages\\Default\\open_file_settings.py\nReloading plugin C:\\Users\\Mostie\\AppData\\Roaming\\Sublime Text 2\\Packages\\Default\\open_in_browser.py\nReloading plugin C:\\Users\\Mostie\\AppData\\Roaming\\Sublime Text 2\\Packages\\Default\\paragraph.py\nReloading plugin C:\\Users\\Mostie\\AppData\\Roaming\\Sublime Text 2\\Packages\\Default\\save_on_focus_lost.py\nReloading plugin C:\\Users\\Mostie\\AppData\\Roaming\\Sublime Text 2\\Packages\\Default\\scroll.py\nReloading plugin C:\\Users\\Mostie\\AppData\\Roaming\\Sublime Text 2\\Packages\\Default\\set_unsaved_view_name.py\nReloading plugin C:\\Users\\Mostie\\AppData\\Roaming\\Sublime Text 2\\Packages\\Default\\side_bar.py\nReloading plugin C:\\Users\\Mostie\\AppData\\Roaming\\Sublime Text 2\\Packages\\Default\\sort.py\nReloading plugin C:\\Users\\Mostie\\AppData\\Roaming\\Sublime Text 2\\Packages\\Default\\swap_line.py\nReloading plugin C:\\Users\\Mostie\\AppData\\Roaming\\Sublime Text 2\\Packages\\Default\\switch_file.py\nReloading plugin C:\\Users\\Mostie\\AppData\\Roaming\\Sublime Text 2\\Packages\\Default\\transform.py\nReloading plugin C:\\Users\\Mostie\\AppData\\Roaming\\Sublime Text 2\\Packages\\Default\\transpose.py\nReloading plugin C:\\Users\\Mostie\\AppData\\Roaming\\Sublime Text 2\\Packages\\Default\\trim_trailing_white_space.py\nReloading plugin C:\\Users\\Mostie\\AppData\\Roaming\\Sublime Text 2\\Packages\\Diff\\diff.py\nReloading plugin C:\\Users\\Mostie\\AppData\\Roaming\\Sublime Text 2\\Packages\\GitGutter\\git_gutter.py\nReloading plugin C:\\Users\\Mostie\\AppData\\Roaming\\Sublime Text 2\\Packages\\GitGutter\\git_gutter_change.py\nReloading plugin C:\\Users\\Mostie\\AppData\\Roaming\\Sublime Text 2\\Packages\\GitGutter\\git_gutter_compare.py\nReloading plugin C:\\Users\\Mostie\\AppData\\Roaming\\Sublime Text 2\\Packages\\GitGutter\\git_gutter_events.py\nReloading plugin C:\\Users\\Mostie\\AppData\\Roaming\\Sublime Text 2\\Packages\\GitGutter\\git_gutter_handler.py\nReloading plugin C:\\Users\\Mostie\\AppData\\Roaming\\Sublime Text 2\\Packages\\GitGutter\\git_helper.py\nReloading plugin C:\\Users\\Mostie\\AppData\\Roaming\\Sublime Text 2\\Packages\\GitGutter\\view_collection.py\nReloading plugin C:\\Users\\Mostie\\AppData\\Roaming\\Sublime Text 2\\Packages\\HTML\\encode_html_entities.py\nReloading plugin C:\\Users\\Mostie\\AppData\\Roaming\\Sublime Text 2\\Packages\\HTML\\html_completions.py\nReloading plugin C:\\Users\\Mostie\\AppData\\Roaming\\Sublime Text 2\\Packages\\Package Control\\Package Control.py\nplugin init time: 0.245499\nloading bindings\nloading pointer bindings\nfound 1 files for base name Default.sublime-theme\ntheme loaded\napp ready\npre session restore time: 0.427535\nstartup cache, total files: 99 cache hits: 99\nstartup time: 0.477609 (package setup was not run)\nloaded 837 snippets\nPackage Control: Skipping automatic upgrade, last run at 2014-08-08 23:21:50, next run at 2014-08-09 00:21:50 or after\n. How modify it exactly ?  Now it says : \n{\n    \"ignored_packages\":\n    [\n        \"Vintage\"\n    ]\n}\n. not working either\nMaybe an in between question : what is the GitGutter in View => compare against and then 5 options\ncould that be the problem ?  I suppose I should get a '+' sign as soon as I start typing, right ?\n. well, I hadn't, changed it now ( in default settings ), have to admit I don't really understand about tracked or untracked, but changed it to yes, still not working\nwhat do you mean by 'live mode' ?\n. ok, live_mode is a setting too, and yes it is true at the moment\n. just as info : I installed the package by copying it to packages directory out of zip file (from GitHub), didn't use the clone command\n. Well, this i alot more complicated than I ever imagined.  It looked as if I only had to install this GitGutter extension in order to get this working, but after your previous post it starts to pop up in my mind there's quite a bit of work to do before changes are tracked.  Actually you need to read about a complete manual :-)  So, maybe I should start reading out quite a bit before this will ever work, right ?\n. I'm going to do some reading and want to thank you so much for your time !!!!!\n. @jisaacks I completely agree with you, sorry for that, It was not trying to steal anyone else's time.\n. Same issue, thanks @Soulsbane it worked, I'm on Ubuntu Ubuntu 16.10. ",
    "jhuckaby": "Yup, I sure am.  It's one of my open files.  I don't see anything odd about it.  It is a tracked file in a Git repo with no local changes.\nThat repeated error in the console actually lists a bunch of other files too, all of which are open, but again, I don't see anything weird about them, and GitGutter doesn't appear to be working in any of the windows.\nHere is my full console log after a ST3 restart, if you are interested:\nhttps://www.dropbox.com/s/jy1vghrrnzo2f0d/st3-startup-log-gitgutter-errors.txt?dl=0\nThis behavior appeared to start after ST3 updated to Build 3065 a few days ago.  Any known issues with GitGutter and that new build?\nThanks for your time on this.\n. I tried closing the affected files and restarting ST3, but the console then lists other seemingly random open files with similar error messages.  Example:\ntext\nTraceback (most recent call last):\n  File \"/Applications/Sublime Text.app/Contents/MacOS/sublime_plugin.py\", line 526, in run_\n    return self.run()\n  File \"/Users/jhuckaby/Library/Application Support/Sublime Text 3/Packages/GitGutter/git_gutter.py\", line 24, in run\n    if ViewCollection.untracked(self.view):\n  File \"/Users/jhuckaby/Library/Application Support/Sublime Text 3/Packages/GitGutter/view_collection.py\", line 56, in untracked\n    return ViewCollection.views[key].untracked()\nKeyError: '/Users/jhuckaby/git/appstr/lib/AppStr/Daemon.pm'\nGoing to try closing every single ST3 window and starting fresh....\nOkay, that seemed to fix it.  For now anyway.  GitGutter is once again working, and no errors seen in console.\nWeird tho, eh!  I cannot explain that.\n. You are correct, I was restarting ST3 with a bunch of open windows and files, and it re-opened them on restart.\nWhen I closed EVERY window and restarted, then opened everything again by hand, it seemed to be happy again, and GitGutter showed up in the gutter :)\n. Sure thing!  You should know that just before I started this GitHub issue I removed the PackageManager-installed GitGutter that I had previously, where I first saw the bug, and reinstalled it via git clone on the command-line, to see if that helped:\ncd ~/Library/Application\\ Support/Sublime\\ Text\\ 3/Packages/\ngit clone git://github.com/jisaacks/GitGutter.git\nThe bug was still present after doing this (I also tried restarting ST3 at this time, but I hadn't closed all my windows yet, so the bug stuck around).\nSo I assume this means I have the latest and greatest GitGutter, i.e. the HEAD revision from GitHub, and the bug was reproducible with this version, up until I closed all my windows and restarted.\nTo be honest, I am not sure how to find the version number of installed ST3 packages.  The console doesn't seem to list it.  Can you possibly tell me how?\nThanks.\n. Ah, thank you.  Here you go:\nhttps://www.dropbox.com/s/jxgxo1kkvgjeqdz/Screenshot%202014-09-05%2010.22.28.png?dl=0\nPackageManager version 2.0.0, and GitGutter has no version because it was installed from a repo.\nMore information for you: I can cause GitGutter to stop working again, simply by restarting my ST3 with windows left open.\nWhen it comes back up ST3 reopens the windows and files it had open before, and GitGutter does not seem to activate (shows nothing in the gutter area).  Even if I enter some text and save a file, it does not seem to show any gutter symbols, UNTIL I manually close all windows and open them up again by hand.\nThis time around, however, I see no errors in the console.  It appears clean.  No python errors at all.  Hmmmm....\nOh, in case it helps, here is my local prefs file for GitGutter:\njson\n{\n  \"live_mode\": false,\n  \"focus_change_mode\": true,\n  \"non_blocking\": true,\n  \"ignore_whitespace\": \"none\",\n  \"show_markers_on_untracked_file\": false\n}\n. Seems to work for me now, thanks!  OS X 10.10.3, ST3 Build 3083, GitGutter Commit #205f73bffc56dc2afddf921b6cf1de44b0dca073 (Apr 22).\n. ",
    "ryanduff": "Just ran into this today finally after restarting ST3 for the first time in a few weeks. \nTried all suggestions above, closed all windows, re-opened. nada\nAlso tried multiple versions-- both GitGutter and GitGutter-Edge from Package Control, as well as just cloning this repo. Restarted after each case and made sure other versions were uninstalled prior. \nRunning ST3 build 3065 on OSX 10.9.4\nGit version 2.1.0 via homebrew\nIf I manually tell it to compare against HEAD I get this in ST3 console, but nothing else\nGitGutter now comparing against: HEAD\n. So... this may actually be a git issue which is why it's seen cross platform. I had that suspicion when I saw #191 \nI checked and git 2.1.1 was available via homebrew. Updated that, restarted ST3 and now it's working again. \n. ",
    "pdobb": "Thanks @ryanduff! Upgrading to git 2.1.1 fixed the issue for me.\n. ",
    "KevinLi": "ST3 still returns \"Hexadecimal\" when in a hexadecimal view.\nI've just made a pull request that should fix this.\n. Me neither! I have no idea what's going on!\nIt's been nearly two years; does the bug still exist?\n. ",
    "flybayer": "Yes I did. I just read through that bug. I tried closing all open files, then closing Sublime. Reopen Sublime and then opened a modified file and GitGutter is still not working. (And still no errors in the console).\n. Sure, I should be able to do that.\n. So this code self.view.window().run_command('git_gutter') in GitGutterHandler.reset is getting called, and  it seems all of the events are being triggered properly.\nHere is the log generated when I change a file.\n\ngit_gutter: on_modified\ngit_gutter: settings_loaded\ngit_gutter: ViewCollection.add\ngit_gutter: GitGutterHandler.reset\ngit_gutter: Running git_gutter command!\ngit_gutter: on_modified_async\ngit_gutter: settings_loaded\n. Interesting. Here is the output of print(ViewCollection.diff(self.view))  --->  ([], [], [])\n. On_disk() is TRUE and git_path is Project/mts_include/lwipopts.h (which is correct)\n\nThe output of line 152 is this:\n\n['D:/bin/git.exe', 'diff', '-U0', '--no-color', '--patience', 'c:\\users\\bbayer\\appdata\\local\\temp\\tmpp8v6ex', 'c:\\users\\bbayer\\appdata\\local\\temp\\tmp\n\nThe output of line 153 is this: \n\nb''\n\nFyi, my project is on the D: drive as well as the Sublime installation and git.exe\n. Ah, you are right. Here is the actual output.\n['D:/bin/git.exe', 'diff', '-U0', '--no-color', '--patience', 'c:\\\\users\\\\bbayer\\\\appdata\\\\local\\\\temp\\\\tmpu0hspx', 'c:\\\\users\\\\bbayer\\\\appdata\\\\local\\\\temp\\\\tmp_qga86']\nAnd both of those files exist in that location.\n. Ok so here are the results. The output was the same with the slashes in either direction.\nWhen I first used this command from cmd.exe I got this output:\ncygwin warning:\n    MS-DOS style path detected: c:\\users\\bbayer\\appdata\\local\\temp\\tmpu0hspx\n    Preferred POSIX equivalent is: /cygdrive/c/users/bbayer/appdata/local/temp/tmp\n    CYGWIN environment variable option \"nodosfilewarning\" turns off this warning.\n    Consult the user's guide for more details about POSIX paths:\n      http://cygwin.com/cygwin-ug-net/using.html#using-pathnames\n  warning: LF will be replaced by CRLF in c:\\users\\bbayer\\appdata\\local\\temp\\tmpu0\n  The file will have its original line endings in your working directory.\n  warning: LF will be replaced by CRLF in c:\\users\\bbayer\\appdata\\local\\temp\\tmp_q\n  The file will have its original line endings in your working directory.\n  diff --git \"a/c:\\\\users\\\\bbayer\\\\appdata\\\\local\\\\temp\\\\tmpu0hspx\" \"b/c:\\\\users\\\\\n  index c5cd3d6..17f8355 100644\n  --- \"a/c:\\\\users\\\\bbayer\\\\appdata\\\\local\\\\temp\\\\tmpu0hspx\"\n  +++ \"b/c:\\\\users\\\\bbayer\\\\appdata\\\\local\\\\temp\\\\tmp_qga86\"\n  @@ -9,3 +9,3 @@\n  - * All rights reserved.\n  - *\n  - * Redistribution and use in source and binary forms, with or without modificat\n  + * All rights reserved.\n  + *\n  + * Redistribution and use in source and binary forms, with or without modificat\n  @@ -20 +20 @@\n  - *    derived from this software without specific prior written permission.\n  + *    derived from this software without specific prior written permission.\nI fixed the path style warning and then got this output:\nwarning: LF will be replaced by CRLF in c:\\users\\bbayer\\appdata\\local\\temp\\tmpno\n  The file will have its original line endings in your working directory.\n  warning: LF will be replaced by CRLF in c:\\users\\bbayer\\appdata\\local\\temp\\tmpj8\n  The file will have its original line endings in your working directory.\n  diff --git \"a/c:\\\\users\\\\bbayer\\\\appdata\\\\local\\\\temp\\\\tmpnotk1l\" \"b/c:\\\\users\\\\\n  index c5cd3d6..cf07065 100644\n  --- \"a/c:\\\\users\\\\bbayer\\\\appdata\\\\local\\\\temp\\\\tmpnotk1l\"\n  +++ \"b/c:\\\\users\\\\bbayer\\\\appdata\\\\local\\\\temp\\\\tmpj8hler\"\n  @@ -9,3 +9,3 @@\n  - * All rights reserved.\n  - *\n  - * Redistribution and use in source and binary forms, with or without modificat\n  + * All rights reserved.\n  + *\n  + * Redistribution and use in source and binary forms, with or without modificat\n  @@ -20 +20 @@\n  - *    derived from this software without specific prior written permission.\n  + *    derived from this software without specific prior written permission.\nThen I fixed the CRLF warning and am now getting this output:\ndiff --git \"a/c:\\\\users\\\\bbayer\\\\appdata\\\\local\\\\temp\\\\tmpvrv_rs\" \"b/c:\\\\users\\\\\n  index c5cd3d6..17f8355 100644\n  --- \"a/c:\\\\users\\\\bbayer\\\\appdata\\\\local\\\\temp\\\\tmpvrv_rs\"\n  +++ \"b/c:\\\\users\\\\bbayer\\\\appdata\\\\local\\\\temp\\\\tmpmzwhf6\"\n  @@ -9,3 +9,3 @@\n  - * All rights reserved.\n  - *\n  - * Redistribution and use in source and binary forms, with or without modificat\n  + * All rights reserved.\n  + *\n  + * Redistribution and use in source and binary forms, with or without modificat\n  @@ -20 +20 @@\n  - *    derived from this software without specific prior written permission.\n  + *    derived from this software without specific prior written permission.\nHowever, GitGutter behavior is still the same. The output of results is still b''\n(The temp names of the files changed because of my closing and reopening ST3)\n. @jisaacks, do you have any more suggestions?\n. I tried that and it worked.\nSo, then I copied git.exe & libiconv-2.dll from a standard Git instillation from another PC to my bin directory (naming the copied git.exe as git2.exe). I then changed the GitGutter setting to point to git2.exe, and now everything is working great!\nSo you can close the issue from my standpoint unless you want to figure out why GitGutter doesn't play well with the git that comes with cygwin.\n. ",
    "Plasmatium": "@jisaacks, I have insert several print functions in \"git_gutter_events.py\" \"view_collection.py\" \"git_gutter_handler.py\", when i edit these files i found that the gutter works correctly. I also found the files in Gitgutter's package directory could invoke the correct gutter display, other files not in the Gitgutter package directory all failed.\nI found that a condition is not satisfied in git_gutter_handler.reset: self.git_path. When editing files in Gitgutter package directory, the value of self.git_path is the file name currently editing. When editing files not in that directory,  self.git_path is false\nNext i copied my py file to gitgutter package directory, and the value of self.git_path get correct (file name of currently editing file), but the gutter changed nothing, still not work. I noticed that when editing gitgutter package files, run_command function invoked 3 times. Instead, only 1 time invoked wile editing my own file.\nCould you give any suggestions? i just start learning python\n. I'm sorry i misunderstand the purpose of this plugin. From watching behavior of the plugin & adding print function of the code i learned the plugin serving the code with git-utilized. At first i thought the plugin compared the disk file against buffer. i submited this github account just looking for the solution of this issue. Now i have created a git repository and the plugin worked perfectly :-)\n. ",
    "OlivierCuyp": "Folder ~/Library/Application Support/Sublime Text 3/Packages/GitGutter/ didn't exists anymore.\nI recreated and save default settings in it (GitGutter.sublime-settings).\nNo more error in the console but gitgutter is still not working .. ':(\n. Thanks Justin, running sudo git and accepting the terms worked for me.\n. ",
    "grena": "+1 I've got the same problem.\nI also noticed that Git Gutter doesn't work only if I launch ST3 from an icon (in the Dock or in Applications directory).\nBut launching ST3 from terminal : \n/Applications/Sublime\\ Text.app/Contents/MacOS/Sublime\\ Text\n... and Git Gutter is working fine. Very strange behaviour. Can you guys try by launching ST3 from a terminal ?\n. ",
    "ludovicmnji": "@grena I have the same strange behaviour ... \nI have OS X version: 10.9.4 so, maybe, it's not caused by the last patch !\n. ",
    "JustinAiken": "It looks like 10.9.5 installs a new version of git that doesn't work until you accept the terms from the command line.  If I change my user settings to use homebrew's git instead of the default git, this bug goes away.\n. ",
    "christiaanwesterbeek": "@grena Wow, nice find. My ST3 editor stopped showing the git gutter at some point. I'm on OSX 10.10.5. \nSo I started ST3 from the command line, like you said. And I saw the git gutter again.\nHowever I want to have the git gutter too when I launch Sublime from the Dock. This solution fixed that: https://github.com/jisaacks/GitGutter/issues/215#issuecomment-85133123\n. ",
    "spywhere": "Alright, fix from this issue seem to fix the problem.\n. ",
    "federicodepro": "Solved!\nI had a strange problem with my path and ZSH and bash config.\nRegards,\nFede\n. ",
    "rodmunera": "That did it! The git path had been removed when I updated. Added the path to git in my environment variables and boom! git-gutter is back alive :) Thanks for the help!\n. ",
    "Draknek": "It's a Lenovo Yoga 2 Pro laptop, native resolution 3200x1800.\n. ",
    "bfred-it": "This might a a Windows-only issue, GitGutter works well on retina Macs. \n\n@Draknek out of curiosity, can you visit this page and take a screenshot? http://bjango.com/articles/min-device-pixel-ratio/ I wonder what dppx and dpi it shows on that screen and whether you changed the default DPI in Windows.\n. ",
    "digitalnature": "Can we get an option to adjust icon size?\n. I think they are too small\n\n. ",
    "Zanion": "Way too small (3200x1800 Win10)\n@bfred-it \n-webkit-min-device-pixel-ratio: 2.0\ndpi: 192\ndppx: 2.0\n\n. ",
    "bazzilic": "Same issue here. Sublime 3, Windows 10 running on a retina Macbook Pro.\n. ",
    "DVLP": "Same problem. I'm running on Windows 10, XPS 15 with only HD resolution(not even 4k version) and icons are tiny.\nEdit: quickly upscaled in photoshop. To use unpack (i.e. using 7zip) GitGutter-Edge.sublime-package from InstalledPackages to Packages folder. Replace icons with icons from this link. They are upscaled in Photoshop so will be bigger but not perfect.\nhttps://mega.nz/#!Q542ESKL!mPBri4nkT4R67tFJpfcM76uzoPF_vyBTZCH6ypGMujw\n. ",
    "ShirajG": "Same issue here running Arch, with the dpi_scale option in sublime text 3 set to 2.0\n. ",
    "bcrotty": "I have the same issue. GitGutter is unusable for me with icons this hard to see.\n. ",
    "NeilCresswell": "Thanks for quick feedback. Done.\n. ",
    "natecavanaugh": "Hi there,\nThanks for the feedback, I've gone ahead and fixed the issues you mentioned, though for the second one, I had to do some slight restructuring of the code to fit, but it's an overall better change since it's probably easier to debug this way, but of course, if you have a different method of breaking up the line, just let me know and I can fix it that way.\nThanks again for reviewing the pull :)\n. Hi there, just wanted to bump this pull again, since fixing the last comment back on the 10th. Any luck in getting this merged?\nThanks :)\n. Heya @jisaacks \nI've gone ahead and moved the code over. I don't have any issues with doing it that way. Just let me know if there's anything else you'd like changed.\nThanks! :)\n. Awesome! Thanks for the fix and merging it in :)\n. ",
    "Gabriel-p": "Having the same issue. I work with large untracked .dat files and even with \"show_markers_on_untracked_file\": false the lag I get is so large it forces me to disable the plug-in every time I need to edit such a file.\n. No, it doesn't.\n. I just tried again.\nI'm using sublime 3083, I disabled all packages installed except for Package control and GitGutter. This is what my user settings file looks like for this package:\n{\n  // Add a special marker on untracked files\n  \"show_markers_on_untracked_file\": true\n}\nand this is the data file I used for testing.\nWhen the above file is located outside of any git repo, Sublime is as responsive as always if I edit it.\nWhen I open that same file from inside a git repo where it is untracked and try to edit it, it's impossible. The x marks show in every line of the file indicating that the \"show_markers_on_untracked_file\": true feature is working.\nPlease let me know of anything I can do to help you debug this. I love this package and I don't want to have to remove it or be forced to disable it every time I need to edit a large un-tracked file.\nCheers.\n. Yes, if I disable the package  the issue goes away (shouldn't it? I mean, the issue is related to the package)\nI'd love to help you out, I actually cloned the package yesterday and attempted a quick fix based on your Dec comment but the package is a bit more complicated than I expected and I have no experience debugging Sublime packages.\nIf I have some time I'll get on this in the following months. I'll let you know if I can come up with something.\nCheers.\n. The package updated to v1.1.3 and this issue is definitely gone. Thank you @jisaacks!\n. Couldn't you get a list of --assume-unchanged files from:\ngit ls-files -v | grep '^[[:lower:]]'\n(taken from http://stackoverflow.com/questions/2363197/can-i-get-a-list-of-files-marked-assume-unchanged) every time the package is loaded, and then simply exclude those files from processing?\n. ",
    "leo-thumbtack": "I tried show_markers_on_untracked_file but didnt work for me. . ",
    "lauriegao": "Yeah, I did. Git works fine in the terminal.\n. Yes, fixed with setting the git path.\nThank you!\n. ",
    "coderbydesign": "Had a similar issue after upgrading version of git. Everything worked except the icons in the gutter. Explicitly setting the git path fixed the issue!\n. ",
    "danielpall": "Getting input lag on ST3 with GitGutter on Windows 7, same behavior as @shssoichiro describes above. Input lag fixed when GitGutter plugin was removed.\n. ",
    "rvdkooy": "I have 2 windows 8.1 boxes with the same problem. everything worked fine again when removing the plugin\n. ",
    "pecigonzalo": "Have the same performance issue on 8.1 and 10\n. ",
    "last1here": "having the same issue as above on windows 10 preview, even when non_blocking is set to true\n. ",
    "gsemet": "Same here on Windows 7. Works like a charm on MacOS and Linux.\n. ",
    "hnry": "ST3 3065, Windows 8.1\nSame issue with input lag\nnon-blocking mode enabled makes some difference, but it's still unusable.\n. ",
    "Morujiana": "Can confirm, same issue as above with ST3 3065 & Windows 8.1.\n. ",
    "rwod": "st3, win8.1 \n\"non_blocking\": true,\n  \"live_mode\": false\nsame issue. \n. ",
    "rbialon": "OS X 10.10.3 with ST 3 Build 3083 and latest GitGutter via PackageControl here, having the same settings as @rwod and the same issue: There is a delay of about one or two seconds when typing, moving the cursor or deleting letters.\nTyping in the Console or Command Palette works as expected (no delay).\nAlso there is no output on the Console giving any hints whatsoever.\n. ",
    "michaeljonathan": "+1\nST3, Windows 8.1, non_blocking is true and live_mode is false\nHP HDX 16-1370US\nTyping lag is occassional (hence not a big deal), but often when I click my mouse, the click registers a fraction of a second late, usually after the position of the cursor has actually moved since, which causes me to begin typing in the wrong places, experience weird ST3 UI quirks... :(\n. ",
    "xenidev": "No. As far as I understand I have to install msysgit first. Is this correct?  I just read this: http://blog.countableset.ch/2012/06/07/adding-git-to-windows-7-path/\n. > > GitGutter assumes that the git command is available on the command line. If it's not, add the directory containing git.exe to your PATH environment variable. Then clone the repo...>>>\nHow can I try a git command? And where should I clone it?\ncd \"%APPDATA%\\Sublime Text 2\\Packages\"\ngit clone git://github.com/jisaacks/GitGutter.git\nAt the moment my User Settings is empty.\n. I guess I am missing some basic git concepts.  Could you recommend something to read? As far as I understood so far:\n1.  I have to install Git but in order to do it I need to install msysgit first.\n2.  I have to add Git  to windows 7path\n3.  I have to add the get_binary to my git gutter settings. \nI don't know how to do it. It says:\nIf git is not in your PATH\nHow do i know?\nyou may need to set the git_binary setting\nWhere can I do it?  Preferences-Package Settings-GitGutter-Settings User?\nto the location of the git binary, e.g. in a portable environment;\nWhere is it?\n. Thank you! Git is installed. In my system it is c:\\Program Files\\Git\\bin\\git.exe. \nI added git binary code into my git gutter-user settings but it is still not working.\n\nDoes this look right?\n. Thank you! I have started learning Git. What I have done:\n1.installed Git.\n2. created my website\u2019s folder  repository\n3. Added \"show_markers_on_untracked_file\": true\u201d  to my sublime settings file.\n\nIt is still not working but I do no know what the HEAD pointer is and how to work with it. So, I need to read about it to frame my questions.\n. Actually, the dots color is  white. I have the following packages installed: Bracket Highlighter, Color Highlighter, Emmet, GitGutter, PYV8 (this one was per-instaled), Style Token, Package Resource Viewer. I think this white dot is coming from the Bracket Highlighter. Thank you for the link!\n. Done! Thank YOU so much!\n. ",
    "greengerong": "@xenidev   How to resolve it? remove  Bracket Highlighter?\nThanks.\n. ",
    "genius00xp": "Thanks. This thread helps me.\n. ",
    "usumoio": "Thanks guys this thread helped me fix pretty much the same issue.\n. ",
    "felipebadaro": "Hi guys,\nIm having a similar problem. Im trying to install git gutter on sublime text 2, Windows 10. \nI already make the cmd recognize git commands using the path of a portable version of git. But, when I install the package a message shows saying that \"path problem\". Since cmd is already running git commands, what more I have to do to make git gutter work? I tried to edit the package settings and nothing works. Everything I do seems wrong, I get an error message, and sublime wont open anymore. I always have to end the task, delete the folder of the package and open sublime again. Can somebody help me? \n. ",
    "fiznool": "Seems to have now sorted itself out. No idea what happened!\n. ",
    "druellan": "\nI never wanted to implement this into git gutter because I didn't want to add any features that I could not polish.\n\nI see your point and I can say that watching how clunky sublime become if you start messing with plugins, I can't disagree. For me, this is functionality that worth to be included on this module, but even with the new popup API, sublime is not well suited for it, so, OK!\n\nThis would allow for any plugins to be built on top of the engine. Without bloating the hell out of GitGutter.\n\nYes, that's interesting. I'm currently using SublimeLinter, that has a similar approach, and the third party plugins really enrich the experience, and even I'm thinking on contributing with my own code.\n\nAlso, this would probably be the first ST package (first I know of) that would have a dependency on other packages. Would be nice if package control supported that kind of thing.\n\nNot sure if SublimeLinter does exactly what you have in mind, but if you don't know about it, take a look how this is working for them.\n. Done ( I think ;) )\n. ",
    "TSiege": "Had this same issue with my mac running Sublime Text 3.  Manually setting the git path variable in the GitGutter.sublime-settings file fixed the problem.  \n@daniisco:  This file can be accessed in sublime via clicking on the top navbar Sublime Text > Preferences > Package Settings >  GitGutter > Settings - User and adding\njson\n{\n  \"git_binary\": \"/usr/local/bin/git\"\n}\nRunning which git in terminal will give you the path you need to replace \"/usr/local/bin/git\" if it's different (be sure to use double quotes).\n@jisaacks: You were right; this fixed it for me. You could probably close this issue.\n. @daniisco your system git might be too old or something.  Install homebrew by running this command ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\" in your terminal and then run brew install git when that's done create a new tab in your terminal and run which git again.  That should say /usr/local/bin/git and add that to your settings I mentioned.\n. @daniisco it needs to be /usr/local/bin/git not user /usr/local/bin.  That's a directory not a binary. Restart your sublime after you make that change.\n. ",
    "AndrewPetz": "I'm also having this issue on my Mac. I've changed the appropriate setting and I don't see anything in the gutter when I change a file. Do my files have to be pushed to my repository before it will work?\n. ",
    "iq-dot": "I also have the same, could this be related to themes? For reference I use Oceanic Next\n. ",
    "CaptainVincent": "Do you try to git init your project and commit the file you edit.\n. ",
    "blainefricks": "I changed the git_binary to /usr/local/bin/git and that seemed to fix the problem. However, there is some lag while waiting for the icons to show up.\n. ",
    "luxueyan": "I use this way to fix the problem. When you update xcode, you can use cmd 'sudo xcodebuild -license' and then agree it.. ",
    "dbergey": "+1\n. ",
    "runxel": "Thank you very much!\n. ",
    "oferei": "Re #290 I want to add that the behavior is different. As I noted there, I see gutter icons on the entire file.\n. and thanks for this plugin!  ^__^\n. You assume right - git diff shows no differences.\nI'm using macOS Sierra (v10.12.1) and git version 2.9.3 (Apple Git-75).\n. Created brand new projects, both on GitHub and BitBucket, but could not reproduce - worked as expected. So it's some problem with my repo.. It works with 1.5.0!    (^O^)\uff0f. I'm on mac.\nOS X El Capitan v10.11.6, specifically.\n. yes, it's enabled.\n. No errors.\nOnly this on startup:\n\nreloading plugin GitGutter.git_gutter\nreloading plugin GitGutter.git_gutter_change\nreloading plugin GitGutter.git_gutter_compare\nreloading plugin GitGutter.git_gutter_events\nreloading plugin GitGutter.git_gutter_handler\nreloading plugin GitGutter.git_gutter_popup\nreloading plugin GitGutter.git_helper\nreloading plugin GitGutter.view_collection\n. I have these messages, each time I switch tabs.\n. Thanks @eshinn, that was it!    $)\n. btw, GitGutter would be even more awesome if it detected this and displayed an error to the user. or at least in the console.\n. Of course GitGutter requires git and it makes no sense to use it without git. But it should handle this error case more gracefully, communicating it better to the user: a message perhaps, not plus signs.\n\nIt happened to me because I use SourceTree which was using an embedded/walled installation of git that was not accessible from command line. I was in the process of setting up a computer, and it took me a while to figure out the problem - I did not see any error message, only the Plus signs.. That's what I meant by \"doing nothing\". Even if displaying an error message is not possible, at least detect git availability and do not show any (plus) signs if it's missing.\nI see we are aligned.. ",
    "hixus": "Same issue here. Has worked fine before.\n. @m0ngr31 It seems that you might need to set git_binary path in GitGutter settings. In windows you get the path with where-command (same as which in linux).\n. ",
    "m0ngr31": "@ottopoika, yeah it was a path issue. I was running my console program as administrator and it was on that PATH, just not on my local user path that Sublime was checking. Thanks.\n. ",
    "timdream": "This bug has been fixed already on the latest version of GitGutter! Thanks.\n. ",
    "tssajo": "Update:\nThe problem can be elminited by adding\njson\n\"focus_change_mode\": false\ninto:\n(Preferences > Package Settings > GitGutter > Settings - User)\nObviously, changes won't be evaluated when a view gets the focus... :(\n. @rchl I did not experience this problem for years. In fact, I even forgot that I filed this report... It was an accurate bug report back then, I remember now for sure. But once I added this to GitGutter's config file:\n\"focus_change_mode\": false\nthe problem went away and never surfaced again. So I consider this to be the permanent solution as it solved this problem for one and a half years for me. This is definitely good enough for me.\n. ",
    "AshwinMekala": "works fine after adding git binary path.\n. ",
    "UltraNurd": "I run into a similar issue when working on a file on a share mounted over SMB over VPN. (I cannot log directly into the storage appliance to run an editor, though I could get a shell on a closer machine.) It's definitely git that is slow (the commands can take a very long time when I run them in Terminal myself), but I'm not sure why it's locking up the Sublime Text UI when non_blocking is true.\n. ",
    "adityavm": ":+1: This is still an issue. If non_blocking: true worked as intended, it would go a long way towards fixing this I feel.\n. ",
    "ddarbyson": "Any updates on this issue? I'm mounting  SFTP drives via ExpanDrive 5 and having lag issues.\n. ",
    "tzvigqb": "Yes\nOn Tue, May 26, 2015 at 11:29 AM, JD Isaacks notifications@github.com\nwrote:\n\nIf you disable git gutter does the issue go away?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jisaacks/GitGutter/issues/232#issuecomment-105568363.\n\n\nTzvi Gershbaum\nQualitybath.com\nFront End Developer\n. @hbridge I've found that setting \"live_mode\": false corrects the plugin host crashing issue for me.\n. ",
    "hbridge": "+1 I'm seeing my plugin-host crash in ST3 after I do a git rebase.  Disabling GitGutter makes it go away.\n. Thanks will give it a try!\nOn Thu, Jun 4, 2015 at 12:02 tzvigqb notifications@github.com wrote:\n\n@hbridge https://github.com/hbridge I've found that setting \"live_mode\":\nfalse corrects the plugin host crashing issue for me.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jisaacks/GitGutter/issues/232#issuecomment-108948830.\n. Disabling live mode worked for awhile, but for some reason a couple of weeks ago the crash started happening again when I would foreground ST3.  Setting \"focus_change_mode\": false fixes it, but makes GitGutter much less useful.  Are there any logs I can gather to help fix this?\n. \n",
    "billinghamj": "+1 It's not an appropriate use of package control messages. They should be reserved for things the user needs to know.\n. Just happened again today. \ud83d\ude44\n. ",
    "Lochlan": "+1, very spammy\u2014I hope that will be the last time I see something like that.\n. +1 I have noticed this as well.  At first I thought it was an issue localized to my own box, but I've seen this across every device/platform I've used so far.\n. ",
    "TimZaman": "\nI believe (not 100% positive) that if you install gitgutter-edge you won't see the release messages because it just points to master.\n\nFalse. I like GitGutter a lot, but if you need money, add a single link and button and we'll donate \ud83d\udc4d . Indeed, this package information (which it is not) looks like a proper spam email to me.\n. Very spammy indeed. Those icons.. Pff\nOn Monday, 15 August 2016, James Billingham notifications@github.com\nwrote:\n\nJust happened again today. \ud83d\ude44\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/jisaacks/GitGutter/issues/236#issuecomment-239921413,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AHXSRNGgCS8EnwYG5QbIhWb1LwH7mLOqks5qgM4RgaJpZM4FNsdq\n.\n. Yes, you are right in that a git diff will not show you anything.. at all when a file as been git mv-ed. There are some options to force it to show you the diff after a rename or mv but they might up mess other things if you'd incorporate those. (this would show it: git diff HEAD^ HEAD).\n. \n",
    "gr4y": "I just got this when I opened Sublime Text up: https://www.dropbox.com/s/u5eqg0dezh93qiy/Screenshot%202016-08-17%2015.05.56.png?dl=0\nI know anyone wants to earn money with their work, but isn't that the wrong way to do so? Have you thought about using patreon, to make us pay you and adding an URL to the release notes? Maybe when you add a link to the GitHub Repo someone will take a look at your project and will help you? I mean it's open source, right? Why not openly asking us to donate?\n. ",
    "printercu": "Thanks, this works for me!\nPS. I need to restart sublime after changing this setting, to make it work.\n. ",
    "ldionne": "Is there any interest in this PR anymore? I am amongst those suffering from GitGutter lagging when using Sublime over SSHFS, and the only solution right now is to turn off GitGutter altogether :-(. @entombedvirus Would it be possible to scale down the changes in this PR so that the core functionality of async Git invocations is still retained, while making the review and integration easier for @jisaacks ?\n. @rchl Thank you so much for doing this. @jisaacks Can we please merge this in?\n. @rchl Unless I'm mistaken, you should publish your own PR with the rebased changes, right?\n. OK, so let's close this PR and let @rchl reopen one with the latest rebased code. Then we can get a code review and testing started and stop pulling each other's hair. I'm willing to test the patch on Mac on my SSHFS mount (where latencies were a problem) if someone can direct me how to use a locally-built package with Sublime.\n. My understanding is that this PR was one step towards applying the giant PR proposed in #240, which is a good thing in itself.\n. ",
    "rasky": "@entombedvirus since the owner of this package is not merging this PR which is a showstopper for medium-sized projects, would it possible for you to repackage and publish your version independently? I would love to be able to easily install it though the package manager. \n. @sigod would it be possible to get this reviewed and hopefully merged please? It's a showstoppers for many people. I'm forced to uninstall GitGutter most of the time because of this. \n. ",
    "jiayihu": "+1 Would be even nicer if file names have a different color when they are new or modified, but I don't know if that is possible.\n. ",
    "johnburnett": "Hiya - just a small ping - any chance this could be rolled in/released?  A similar change was just released with GitSavvy 2.4.0, and this makes life easier in cross-platform shops :)\n. Whoops, nope, fixed.  I think it came from doing the first commit on Windows.  (e.g. http://stackoverflow.com/questions/6476513/git-file-permissions-on-windows-7 )\n. Just a quick ping again....?\n. Rebased (and squashed into a single commit)...\n. Hi - just ping'ing on this.  Would love to get this merged?\n. All righty... it's fixed.  Same changes that were given a thumbs up six months ago :)\n. *actually - I went one further and just added the environment variable support as well since it's in the same area of the code.  This covers #255 as well.\n. @sigod - ping?\n. ",
    "jrappen": "@johnburnett please fix errors in #297 introduced here.\n. @jisaacks The problem people are angry about isn't the error message itself, the problem is that once you click OK on the error message popup, it comes up again right away. Sublime Text is unresponsive that way and updating ignored_packages takes a couple times getting rid of that popup. Maybe you could disable the plugin until Sublime Text starts the next time instead when git isn't found?\n. @deathaxe I strongly agree with @r-stein , markdown documents are not source code. Breaking lines after each sentence within any given paragraph is highly preferred for git repositories compared to an 80 chars line break, if you really really really need any line break at all. Maintainers would simply give up on editing the documentation if you enforce an 80 chars because quite frankly, highly repetitive tasks are a pita.. ",
    "johnmela": "Any chance of this getting merged?\n. ",
    "bbrks": "Sure, I'll have another look.\nOn 9 Nov 2015 7:02 p.m., \"sigod\" notifications@github.com wrote:\n\nInteresting. I have somehow missed this PR.\n@bbrks https://github.com/bbrks Can you resolve conflicts?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jisaacks/GitGutter/pull/243#issuecomment-155156726.\n. @jisaacks The +1 is to give the region a width of 1 char to display on the minimap. The minimap cannot display anything of zero width. The downside is we must only show the region in the minimap. In ST3 this is easy. In ST2, we just need to make everything invisible to not show it at all.\n\nI will be able to break the one liner flag up, I should have it done by the end of the day. I'd love to get this merged! Having diff marks in the minimap has been invaluable.\n. Should be good to go! :+1: \n. Thanks for the merge!\n. ",
    "Zooce": "I'm getting a similar issue:\nTraceback (most recent call last):\n  File \"e:\\devtools\\sublimetext3\\sublime_plugin.py\", line 553, in run_\n    return self.run()\n  File \"git_gutter in e:\\devtools\\sublimetext3\\Data\\Installed Packages\\GitGutter.sublime-package\", line 34, in run\n  File \"view_collection in e:\\devtools\\sublimetext3\\Data\\Installed Packages\\GitGutter.sublime-package\", line 55, in untracked\n  File \"git_gutter_handler in e:\\devtools\\sublimetext3\\Data\\Installed Packages\\GitGutter.sublime-package\", line 180, in untracked\n  File \"git_gutter_handler in e:\\devtools\\sublimetext3\\Data\\Installed Packages\\GitGutter.sublime-package\", line 196, in handle_files\n  File \"git_gutter_handler in e:\\devtools\\sublimetext3\\Data\\Installed Packages\\GitGutter.sublime-package\", line 261, in run_command\n  File \"./subprocess.py\", line 789, in __init__\n  File \"./subprocess.py\", line 988, in _get_handles\n  File \"./subprocess.py\", line 1038, in _make_inheritable\nOSError: [WinError 6] The handle is invalid\n. @sigod, I've tried the following values for git_binary including:\n\"git_binary\" : \"C:\\\\Program Files (x86)\\\\Git\\\\bin\\\\git.exe\"\n\"git_binary\" : \"/c/Program Files (x86)/Git/bin/git.exe\"\n\"git_binary\" : \"/bin/git.exe\"\nBoth directories do exist, however which git yields the second path.\nEDIT : updated to be more explicit\n. @sigod, yes I know. I just didn't show that in the last comment.\n. @sigod \n$ git --version\ngit version 1.9.5.msysgit.0\n. @sigod, same error. Unfortunately, this is my work machine, so I can't just upgrade git. If that's the case, am I SOL?\n. @fatdollar, how do you modify the Default settings?\n. Right, but I can't edit it...\n. I have the portable version of sublime text, so maybe that's it..\n. Okay, so I got it to work. The problem is that I open sublime text via subl from git bash, and when I do this, for some reason it doesn't work (https://forum.sublimetext.com/t/build-system-the-handle-is-invalid/1764/3). When I opened the exe directly (double clicking the exe), it worked.\nIMHO, I think this is just a workaround...\n. Yes, sublime text 3\n. Traceback (most recent call last):\n  File \"e:\\devtools\\Sublime_Text_3_Dev\\sublime_plugin.py\", line 797, in run_\n    return self.run()\n  File \"git_gutter in e:\\devtools\\Sublime_Text_3_Dev\\Data\\Installed Packages\\GitGutter.sublime-package\", line 34, in run\n  File \"view_collection in e:\\devtools\\Sublime_Text_3_Dev\\Data\\Installed Packages\\GitGutter.sublime-package\", line 59, in untracked\n  File \"git_gutter_handler in e:\\devtools\\Sublime_Text_3_Dev\\Data\\Installed Packages\\GitGutter.sublime-package\", line 266, in untracked\n  File \"git_gutter_handler in e:\\devtools\\Sublime_Text_3_Dev\\Data\\Installed Packages\\GitGutter.sublime-package\", line 282, in handle_files\n  File \"git_gutter_handler in e:\\devtools\\Sublime_Text_3_Dev\\Data\\Installed Packages\\GitGutter.sublime-package\", line 347, in run_command\n  File \"./python3.3/subprocess.py\", line 784, in __init__\n  File \"./python3.3/subprocess.py\", line 980, in _get_handles\n  File \"./python3.3/subprocess.py\", line 1030, in _make_inheritable\nOSError: [WinError 6] The handle is invalid\n. I just installed GitGutter-Edge, and nothing is actually happening at all now. I tried to open the settings and got the following errors:\nUnable to open /e/devtools/Sublime_Text_3_Dev/Data/Packages/GitGutter/GitGutter.sublime-settings\nUnable to open /e/devtools/Sublime_Text_3_Dev/Data/Packages/User/GitGutter.sublime-settings\nIt appears that these files do not exist.. Things seem to be working at the moment, but what's concerning is that I have no idea why...I suppose this issue can be closed unless someone things there's some other underlying issue here.. ",
    "fatdollar": "I can tell you I'm running the x86 version for sure.  However mine seems to be working now.\n. I'm not sure why mine started working but I put the path in both the default and the user settings files.\n. As an update.  I decided to try this out on my laptop to confirm that this was consistently working.\nI installed GitGutter added the binary path to both Default and User settings files for Git Gutter and then added the color scheme definitions to my current color scheme.  After restarting sublime text Git Gutter is functioning perfectly.\nAgain I'm not sure what changed other than I put the binary in the in both locations but I have confirmed that this is no longer an issue for me.\n. Preferences->Package Settings->GitGutter you should see 2 options at that point\nSettings-Default\nSettings-User\n. My thoughts are at this point that somehow your file is read-only or that you don't have the correct privileges to edit it.  This is possible if you are using a work computer like you say.  The file is located in the AppData folder and I'm not sure if you would need special privileges to edit this.\n. Possibly.  I'll pull down the portable version and see if I can get that one working as well.\n. I downloaded the portable version and went through the same steps ad I mentioned above and everything is working for me.\nI feel like an idiot now:  I just looked at your traceback and noticed that your path has sublimetext3 in it.  I've been doing all of this in sublime text 2 and I'm not sure that this package is supported in sublime text 3.  The collaborators would have to confirm that. But I think if you used 2 instead of 3 you would see it start working.\n. Ah interesting.  I think it should be working via command line or not.  So you are able to use this with sublime text 3?\n. That's good to know.\n. ",
    "mscarchilli": "@sigod This fixed it for me. I was having this issue on (Win7 x64) Sublime Text 3 Build 3126 when I first noticed the problem, not sure if it's related or if my GitGutter had been updated recently. Either way, updating the \"git_binary\" did the trick. Thank you!\n\n@Zooce, try C:\\Program Files\\Git\\bin\\git.exe. Though, you previous comment tells me it probably won't help.\nTry to update Git as a last resort.\n\nChanged from this\n{\n  \"git_binary\": \"C:\\\\Program Files (x86)\\\\Git\\\\bin\\\\git.exe\",\n  \"show_markers_on_untracked_file\": true\n}\nTo this\n{\n  \"git_binary\": \"C:\\\\Program Files\\\\Git\\\\bin\\\\git.exe\",\n  \"show_markers_on_untracked_file\": true\n}\n. ",
    "switz": "+1 for ST2 on Mac\nTraceback (most recent call last):\n  File \"./sublime_plugin.py\", line 205, in on_activated\n  File \"./sublime_plugin.py\", line 154, in run_timed_function\n  File \"./sublime_plugin.py\", line 204, in <lambda>\n  File \"./git_gutter_events.py\", line 61, in on_activated\n  File \"./git_gutter_events.py\", line 81, in debounce\nBoost.Python.ArgumentError: Python argument types in\n    sublime.set_timeout(function, NoneType)\ndid not match C++ signature:\n    set_timeout(boost::python::api::object, int)\n. ",
    "asetGem": "+1 for ST2 on Mac too\nsame output in my console as the 2 previous posts\n. ",
    "spademan": "cuz your git in setting file don't be set in correct way \npreferences-->PackageSettings-->git gutter -->setting defualt \nset \n\"git_binary\":  \"/usr/local/bin/git\"  // the  path of git\nrestart  subl  it will be fine\n. ",
    "nickgnd": "The git folder location may change. Use which git command from shell to locate it, in my case: \nbash\n~  which git\n/usr/bin/git\nand then update gitgutter settings as @spademan said: \njson\n{\n  \"git_binary\": \"/usr/bin/git\"\n}\n. ",
    "JohnEmhoff": ">>> print sublime.active_window().active_view().settings().get('debounce_delay')\nNone\nLooks like it's not getting the settings? The path to the settings file seems to be Library/Application Support/Sublime Text 2/Packages/GitGutter/GitGutter.sublime-settings\n. ",
    "dscho": "Isn't the problem this line: https://github.com/jisaacks/GitGutter/blob/be3d2037baf653e1ed158880bd4f1a5f878fe822/git_gutter_handler.py#L259\nIt should use CREATE_NO_WINDOW as creation_flags parameters in the Popen constructor, I guess.\n. @mmcintyre123 you should first test the suggested change, and if it works, craft a commit message and make a Pull Request. This is Python, you should be able to edit the file in place.\n. @mmcintyre123 this looks exactly how I would have changed it. Since you already have Sublime Text installed, maybe you can find the file git_gutter_handler.py in the installation somewhere? If you can, it would make sense to change it in-place (after making a backup copy, of course :smiley:) and then test it directly in Sublime Text, probably it will only be effective after restarting the editor. :+1: \n. ",
    "mmcintyre123": "Great, thanks dscho!  If someone who is an admin could make that change to the repo, I'm sure many would appreciate it!  I would clone the repo and try it myself, but I have only been able to get the package to work properly in ST3 via Package Control.\nThanks in advance!\n. @dscho \nOnce again thank you for your help here.  I am new to Github and coding generally, so not exactly sure how this worked.\nI was able to fork the project so I can edit the file and hopefully test it out... \nSo based on your suggestion my research turns up the following...\nhttp://stackoverflow.com/questions/2935704/running-shell-commands-without-a-shell-window\nhttp://bytes.com/topic/python/answers/757271-subprocess-popen-spawning-cmd-shells\nThis is a bit of a stab in the dark but here's what I plan to try (not at the right machine at the moment to test it out)...\nUsing the bytes.com construction but the actual Microsoft value 0x08000000, change https://github.com/jisaacks/GitGutter/blob/be3d2037baf653e1ed158880bd4f1a5f878fe822/git_gutter_handler.py#L255-L262\nfrom        \nPython\n    def run_command(self, args):\n        startupinfo = None\n        if os.name == 'nt':\n            startupinfo = subprocess.STARTUPINFO()\n            startupinfo.dwFlags |= subprocess.STARTF_USESHOWWINDOW\n        proc = subprocess.Popen(args, stdout=subprocess.PIPE,\n                                startupinfo=startupinfo, stderr=subprocess.PIPE)\n        return proc.stdout.read()\nto\nPython\n    def run_command(self, args):\n        CREATE_NO_WINDOW = 0x08000000\n        startupinfo = None\n        if os.name == 'nt':\n            startupinfo = subprocess.STARTUPINFO()\n            startupinfo.dwFlags |= subprocess.STARTF_USESHOWWINDOW\n        proc = subprocess.Popen(args, stdout=subprocess.PIPE,\n                                startupinfo=startupinfo, stderr=subprocess.PIPE, \n                                creationflags=CREATE_NO_WINDOW)\n        return proc.stdout.read()\nWill report back with the results!\n. So I managed to manually clone my fork into the \\AppData\\Roaming\\Sublime Text 3\\Packages directory (uninstalled my old version), and after rebooting it's working like before, but the save behavior is still the same :-(  \nYes that would be nice! Unfortunately though in ST3 packages installed via package control are encrypted(?) - they come in .sublime-package files and look like\n504b 0304 1400 0000 0800 1974 1447 2a5d\ne88f c700 0000 2f01 0000 0a00 0000 2e67\n6974 6967 6e6f 7265 354f bb6e c330 0cdc\n.....\nNow that I have the pckg working (minus this issue) I can try some things. is there anything here you would recommend?\nhttp://bytes.com/topic/python/answers/757271-subprocess-popen-spawning-cmd-shells\nI tried a bunch of different things here.. about all I can think of.  I tried removing everything from my PATH except for C:\\Program Files\\Git\\mingw64\\bin; tried the following as well:\nPython\n    def run_command(self, args):\n        # CREATE_NO_WINDOW = 0x08000000\n        startupinfo = None\n        if os.name == 'nt':\n            startupinfo = subprocess.STARTUPINFO()\n            startupinfo.dwFlags |= subprocess.STARTF_USESHOWWINDOW\n        # proc = subprocess.Popen(args, stdout=subprocess.PIPE,\n        #                         startupinfo=startupinfo, stderr=subprocess.PIPE, creationflags=0x08000000)\n        proc = subprocess.Popen(args, stdin=subprocess.PIPE, stdout=subprocess.PIPE,\n                                stderr=subprocess.PIPE, creationflags=0x08000000, shell=False)\n        return proc.stdout.read()\ntried with and without shell=False, tried putting shell=False, creationflags=0x08000000, as the first arguments after \"args\", tried using 0x08000000 directly in the Popen constructor, tried adding stdin=subprocess.PIPE like in Mrown's example at the link above, tried removing startupinfo=startupinfo for the heck of it .... all to no avail.  Mrown at that link uses something different than \"args\"... could there be something there?\n. Strangely the shell does not pop up on my machine at home.  No idea why.  It's also Windows 7, although Home Edition whereas this is Professional.\n. Nope, I have 1.9.5 at home -- BUT I had 1.9.5 here until just a few weeks ago, and had the same problem with that.\n. I do have some other developer-ish things installed here, like chocolatey, pear, phantomjs, PHP, Python, all of which (except Python) add to my PATH.  However I did try removing everything from the user PATH except for Git (which is at the front), as that is my home setup, but still the same problem.\nI am looking into doing a totally clean install of Windows soon anyway, so if there is no obvious solution I'll see if that solves it.\n. So finally I found the source... sorry for the confusion here!  This seems to have been caused by GitStatus.  I've removed that and my issue seems to be solved.  I will comment in GitStatus so people who use it can see the suggestions here.  Thanks to all for the help!\n. ",
    "borntyping": "Linux Mint 17.2, Sublime Text 3083, Git Gutter 1.2.1.\n. ",
    "Wintaru": "This happens to me in Debian Jessie. Very annoying, I don't close Sublime Text or reboot my machine very often and my sysadmin brought it to my attention that there were hundreds of source files littering my /tmp folder.\n. ",
    "vsimon": "The worktree feature has rounded out since the git 2.5 days. Would this be a better time to support this? (I've found the feature itself to be super useful).\n. ",
    "prabowomurti": "I solved the problem by updating my macports.\n$ sudo port selfupdate\n$ sudo xcodebuild -license\n. ",
    "Thomasdezeeuw": "I've since restarted my editor and it seems to work.\nI might know what caused the problem. I was first working in a git directory, then added a non-git folder to the Sublime project (outside of the initial git directory). Then when editing within that non-git directory I got the error. Does that function work for two root directories within a single project? That might have caused the problem.\n. Well it seems to work again, so I'll close the issue and open it once I've seen it again, thanks.\n. ",
    "baudehlo": "Check to see if you need to re-accept your xcode license.\nsudo xcodebuild -license\nHappened to me and that fixed it.\n. Looks like this issue can be closed.\nFor Google: SublimeGit stopped working because of the same issue.\n\nOn Sep 29, 2015, at 9:44 PM, Memory-Yuan notifications@github.com wrote:\nThanks\n\u2014\nReply to this email directly or view it on GitHub.\n. \n",
    "tomatau": "Yep worked, thanks.\n. ",
    "atuttle": "Fix worked for me too.\n. ",
    "Memory-Yuan": "Thanks.\n. ",
    "syohex": "https://github.com/jisaacks/GitGutter#jumping-between-changes\nCommand+Shift+Option+k and Command+Shift+Option+j.\n. ",
    "richardfrost": "Thanks for getting to this so fast! When I put this together I only had my Windows machine, which is why I included the example for it. I was thinking that most *nix based systems come with git installed, or are a simple command away from being installed, whereas Windows is not usually quite as simple. According to the link I referenced in my comment, shell=true on a POSIX system actually seems to mess up the loading of environmental variables/path, which is why I tried to avoid it.\nI tested on an Ubuntu system today and found that it almost worked, but when Popen runs, it is sending the git command wrapped in single quotes, which prevents variables from being interpreted, and therefore doesn't work.\nMy new proposed fix is to simply pass git_binary through os.path.expandvars(git_binary) and saving the result to self.git_binary_path. os.path.expandvars will return a string with any environmental variables expanded. This works on both Windows and Linux in my tests. We could add a string check to see if it contains a \"$\" or \"%\" character, but I think that this is probably good enough.\nSorry for not checking on other operating systems beforehand. I do not have access to OSX, but I'm hopeful since it works on linux that it would work on OSX. If you would like I can create a new clean pull request with this new change, or improve it if need be.\nThanks!\n. ",
    "KroniK907": "This does indeed appear to be what I am experiencing. Due to the weird windows error, im not sure I am willing to jump onto that version quite yet, but it does look promising. I might give it a try in a separate environment \n. ",
    "bofm": "It really makes my Sublime behave like PyCharm\n. ",
    "mgansler": "Any update on this? Anybody found a workaround?\n. ",
    "rootwork": "That issue is about lags when editing files over a network. I don't know about the other folks in this thread, but I was not editing files over a network. I was editing them locally, and there was still a lag -- so as far as I'm concerned, this was not a dupe of #230. In fact it was so bad I've abandoned GitGutter for now.\nIf others were also experiencing the lag locally, maybe this issue is worth reopening.\n. ",
    "roccomuso": "Yeah, solved thanks.\nIt was a Path issue.\nI've putted in Preferences > Packages Settings > GitGutter > Settings - User: \n{\n  \"git_binary\": \"C:\\\\Program Files (x86)\\\\Git\\\\bin\\\\git.exe\"\n}\n. ",
    "etler": "Cool, I think I'll take a stab at it. I just wanted to check if there was interest in it so my effort wouldn't go to waste.\n. Nice, thanks for pointing that out!\n. ",
    "zimensky": "Still have the issue even with 1.5.0 (Sublime build 3126).\nI've tried to reinstall the plugin via Package Control and restart SublimeText with no effect.. I made a gif showing how it does work on my editor:\n\nAs you can see adding, removing and editing lines works pretty fine but when I try to edit the only last symbol then no diff is shown.\n. I was using git version 2.6 and upgrade to 2.12 version solved the issue.\nSorry for disturbance and thank you!. ",
    "jfultz": "Sorry for not getting back to you earlier.  In answer to various points...\n- I've seen this under Windows 7 and Windows 10\n- I've seen this under Sublime 3 and, I'm pretty sure, under Sublime 2\n- Ever since I filed this pull request, I've been running against the version in my own repo rather than your official one (I love Package Control's \"Add Repository\" feature!).  But just today, I uninstalled my thing, installed your official latest release, and restarted my Windows 7 Sublime 3 build 3126 and continued to reproduce the problem.\n- I've rebased, and tested the rebased version on both my Windows 7 and 10 systems in Sublime 3.  Everything works.\n- I don't know why it seems to happen for some people and not others, but if you follow the link I pointed to, there is a legitimate Python bug behind this, which has been open for ages.\n. ",
    "AviBueno": "Same issue on Win 8.1, Git Gutter 1.2.2, Sublime Text 3 stable build v3083.\n. Sorry, I have GitGutter installed for a long time but only yesterday I discovered it can show up on the minimap. This was after I saw the Atom equivalent on a friend's machine. So I looked at the minimap but didn't see anything.\nFollowing @azdavis reply I only now realized it's a 1 pixel thingy (was expecting a fully colored line).\nI tested now and I guess it works, although it's almost impossible to see any indication.\n\nI wrote 'almost' because in this image you could see something:\n\nAny way to color the entire line, or is this out of GitGutter's scope?\n. @sigod 1680x1050.\nSeeking more info, I ran into PR #243 by @bbrks and noticed in the first screenshot that the gutter colors are neon-bright. Then I realized I'm not on 'JavaScriptNext - ES6 Syntax/Monokai Phoenix' color scheme.\nChanging back to the default color scheme does make a difference, but I need to use a different color scheme than the one I'm used to and it's still not THAT easy to spot compared to an entire-line-highlighting-solution.\n\n\n. ",
    "azdavis": "I've done some experimentation.\nAdding lines with text, it seems as though the green bar is actually behind the text.\n\nThis problem, as one might expect, does not manifest when the added lines have no text of their own.\n\nI thought maybe if I added or modified lines with indentation, this problem would be avoided. No dice.\n\nBut then I deselected that which I had indented\u2026\n\nOdd indeed.\n. ",
    "ndarville": "I don\u2019t see it either for what it\u2019s worth. Both on my Windows and macOS installations.. I\u2019m not entirely sure why it\u2019s not working on my x1080 and x900 displays (Windows/macOS), but if it\u2019s a known issue, maybe we could start by putting it in \u201cIt's not working!?\u201d of the README for now? <3. Oh I see what you mean now. It turns out there is a gutter, but my dark colour schemes obscure the 1px marker. Using Monokai Bright displays the marker.. ",
    "braver": "@deathaxe is it me or does this setting not work? I tried \"show_in_minimap\": 6 and \"show_in_minimap\": -1, but it all looks like a single pixel wide to me. \nedit: never mind. I see it's tied to the characters on a line, so newlines don't show up so much but on longer lines this does work. I was expecting -1 to draw a line across the minimap but that's not how this works probably.. Cool, the new features are pretty exciting!\n. Just two cents. \nI've never seen GitGutter popups highlight anything so I never even knew it was a feature. Does it ever work? \nI think it's totally understandable you cannot highlight a random snippet of code out of context, and getting to that context seems super complicated (and with large files could be a real performance hit). None of the tools I use highlight diffs. I never missed it and might even prefer it to reliably never highlight than highlight once in a blue moon. \n\nAs an aside:\nDoes the effort to make this work match the value it provides and is the solution reliable?\nI mean, I love the plugins you guys are creating, rely on them every day. But over the years I have seen great plugin concepts go down the drain by trying to do too much without core API's supporting it, and killing performance and/or introducing wonky behaviour in the process. BufferScroll is good example: nice idea, but it's fighting against the API and the application's default behaviour, and it makes the entire editor wonky. Again, I'm not saying it's the case here, just advocating keeping it simple, high performance and predictable.. Yeah, I think 1 and 3 both have the downside that it might block a popup, but the upside that it's predictable what popup to expect. I think in that sense it's elegant, since the popup is like an explanation of the gutter mark. But it also means I may not have access to the gitgutter popup and a quick \"reset\" if I made a lint error on a line. \nOne gutter isn't enough... ;). > You always have: ctrl+shift+alt+z\nOh yeah \u263a\ufe0f\nEvery editor has a vcs gutter thing these days. I won\u2019t work without one anymore. You think we can badger Will into doing something about it? \nI still have halve a mind to remove the gutter popup from SL though, so we can just let the issue simmer for a while.. Those are good points. Now we\u2019re tweaking GitGutter to deal with other packages that also provide gutter marks, but LSP also creates marks, and there are dedicated linters out there too and you can use all of them together. So we could do with better gutter management all around.. ",
    "JonathanHolvey": "Presumably related to #266\n. ",
    "jcranendonk": "@jisaacks If there's anything I can do to help fix this issue, let me know! I'd be happy to help.\n. ",
    "statik213": "Hi @jisaacks, I took a look at it a while ago but didn't get a chance to implement a fix yet. I'm not exactly clear on what the life cycle for each item in the dicts in view_collections.py is. I'm not sure if entries ever get removed. Removing the files would be easy when you figure out when items should be removed from that dict.\nI'd also suggest changing to using tempfile.mkstemp instead of NamedTemporaryFile for a couple of reasons:\n- tmpfile.name is used in multiple places and the file re-opened, written and closed. NamedTemporaryFile is intended to be used onetime and the file automatically deleted on close(). mkstemp gives you ownership of deleting the file and just returns a path. I think that's more in line with what we are doing here.\n- Re-opening the file after a close() is probably not valid because in a rare race another tmpfile could get created with that same name.\n. Yeah, I can take care of that. \n. ",
    "Chovin": "I would love to be able to stage/discard chunks from sublime gitgutter much like vim-gitgutter or Emacs-git-gutter. ",
    "yairEO": "just saw - http://stackoverflow.com/a/15400386/104380\n. ",
    "reintroducing": "disregard, I just deleted the repo and re-pulled and everything works as expected now :)\n. I spoke too soon. When I edited a few files and then committed them, now they're all showing up as new again :\\  I'm at a loss here, I'm not changing anything in my git config...\n. any ideas? would really love to get this working as i find this plugin invaluable on my work machine.\n. @Nickoladze Just tried doing that and it did not work for me :\\\n. Well, I just removed ST3, upgraded to macOS Sierra and reinstalled and then reinstalled GitGutter and all seems well now. Going to close this I guess.\n. Welp, I'm back with the same issue now. Sigh.\n@Nickoladze Where did you clone the repo into on your file system?\n@frangeris Did @Nickoladze fix work for you as well? I see you thumbs upped it.. Disregard my question about where you cloned it, I just saw the Readme and did the same. Still not working for me (I probably did that same thing up there when i said it wasnt working for me but forgot my train of thought).. @deathaxe There are no errors in my console when loading up ST3. Here is the output:\n```\nstartup, version: 3126 osx x64 channel: stable\nexecutable: /Applications/Sublime Text.app/Contents/MacOS/Sublime Text\nworking dir: /\npackages path: /Users/przybylski/Library/Application Support/Sublime Text 3/Packages\nstate path: /Users/przybylski/Library/Application Support/Sublime Text 3/Local\nzip path: /Applications/Sublime Text.app/Contents/MacOS/Packages\nzip path: /Users/przybylski/Library/Application Support/Sublime Text 3/Installed Packages\nignored_packages: [\"Markdown\", \"SublimeLinter-contrib-stylelint\", \"Vintage\"]\npre session restore time: 0.246277\nusing gpu buffer for window\nfirst paint time: 0.334737\nstartup time: 0.336027\nreloading plugin Default.auto_indent_tag\nreloading plugin Default.block\nreloading plugin Default.comment\nreloading plugin Default.convert_syntax\nreloading plugin Default.copy_path\nreloading plugin Default.delete_word\nreloading plugin Default.detect_indentation\nreloading plugin Default.duplicate_line\nreloading plugin Default.echo\nreloading plugin Default.exec\nreloading plugin Default.fold\nreloading plugin Default.font\nreloading plugin Default.goto_line\nreloading plugin Default.history_list\nreloading plugin Default.indentation\nreloading plugin Default.install_package_control\nreloading plugin Default.kill_ring\nreloading plugin Default.mark\nreloading plugin Default.new_templates\nreloading plugin Default.open_context_url\nreloading plugin Default.open_in_browser\nreloading plugin Default.pane\nreloading plugin Default.paragraph\nreloading plugin Default.paste_from_history\nreloading plugin Default.profile\nreloading plugin Default.quick_panel\nreloading plugin Default.run_syntax_tests\nreloading plugin Default.save_on_focus_lost\nreloading plugin Default.scroll\nreloading plugin Default.set_unsaved_view_name\nreloading plugin Default.settings\nreloading plugin Default.show_scope_name\nreloading plugin Default.side_bar\nreloading plugin Default.sort\nreloading plugin Default.swap_line\nreloading plugin Default.switch_file\nreloading plugin Default.symbol\nreloading plugin Default.transform\nreloading plugin Default.transpose\nreloading plugin Default.trim_trailing_white_space\nreloading plugin CSS.css_completions\nreloading plugin Diff.diff\nreloading plugin HTML.encode_html_entities\nreloading plugin HTML.html_completions\nreloading plugin 0_package_control_loader.00-package_control\nreloading plugin 0_package_control_loader.01-pygments\nreloading plugin 0_package_control_loader.50-backrefs\nreloading plugin 0_package_control_loader.50-markupsafe\nreloading plugin 0_package_control_loader.50-python-markdown\nreloading plugin 0_package_control_loader.50-pyyaml\nreloading plugin 0_package_control_loader.51-python-jinja2\nreloading plugin 0_package_control_loader.55-mdpopups\nreloading plugin AutoFileName.autofilename\nreloading plugin AutoFileName.getimageinfo\nreloading plugin BracketHighlighter.bh_core\nreloading plugin BracketHighlighter.bh_logging\nreloading plugin BracketHighlighter.bh_plugin\nreloading plugin BracketHighlighter.bh_popup\nreloading plugin BracketHighlighter.bh_regions\nreloading plugin BracketHighlighter.bh_remove\nreloading plugin BracketHighlighter.bh_rules\nreloading plugin BracketHighlighter.bh_search\nreloading plugin BracketHighlighter.bh_swapping\nreloading plugin BracketHighlighter.bh_wrapping\nreloading plugin BracketHighlighter.support\nreloading plugin Color Highlighter.ColorHighlighter\nreloading plugin Color Highlighter.colors\nreloading plugin DocBlockr.jsdocs\nreloading plugin EditorConfig.EditorConfig\nreloading plugin Git.git_commands\nreloading plugin GitCommitMsg.GitCommitMsg\nreloading plugin GitGutter.git_gutter\nreloading plugin GitGutter.git_gutter_compare\nreloading plugin GitGutter.git_gutter_events\nreloading plugin GitGutter.git_gutter_handler\nreloading plugin GitGutter.git_gutter_jump_to_changes\nreloading plugin GitGutter.git_gutter_popup\nreloading plugin GitGutter.git_gutter_settings\nreloading plugin GitGutter.git_gutter_show_diff\nreloading plugin GitGutter.git_helper\nreloading plugin GitGutter.promise\nreloading plugin Markdown Preview.helper\nreloading plugin Markdown Preview.markdown_settings\nreloading plugin Markdown Preview.markdown_wrapper\nreloading plugin Markdown Preview.MarkdownPreview\nreloading plugin MarkdownTOC.MarkdownTOC\nreloading plugin Package Control.1_reloader\nreloading plugin Package Control.2_bootstrap\nreloading plugin Package Control.Package Control\nreloading plugin SassBeautify.SassBeautify\nreloading plugin SideBarEnhancements.SideBar\nreloading plugin SideBarEnhancements.SideBarAPI\nreloading plugin SideBarEnhancements.SideBarDefaultDisable\nreloading plugin SideBarEnhancements.Stats\nreloading plugin TabsExtra.support\nreloading plugin TabsExtra.tab_menu\nreloading plugin TabsExtra.tab_sort_helper\nreloading plugin TabsExtra.tabs_extra\nreloading plugin WordHighlight.word_highlight\nreloading plugin Anaconda.anaconda\nreloading plugin Anaconda.setup\nreloading plugin Anaconda.version\nreloading plugin Babel.Babel\nreloading plugin HTML-CSS-JS Prettify.HTMLPrettify\nreloading plugin Pretty YAML.PrettyYaml\nreloading plugin SublimeCodeIntel.ordereddict\nreloading plugin SublimeCodeIntel.SublimeCodeIntel\nreloading plugin SublimeLinter.commands\nreloading plugin SublimeLinter.sublimelinter\nreloading plugin SublimeLinter-contrib-eslint.linter\nSublimeLinter: eslint linter loaded \nreloading plugin Terminal.Terminal\nplugins loaded\nSublimeLinter: debug mode: on \nSublimeLinter: temp directory: /var/folders/n2/kj1b46ys2qgc13zr8yrgf5kw0000gn/T/SublimeLinter3-przybylski \nSublimeLinter: user shell: /bin/zsh \nSublimeLinter: computed PATH using /bin/zsh:\n/Users/przybylski/.nvm/versions/node/v4.4.5/bin\n/usr/local/bin\n/usr/bin\n/bin\n/usr/sbin\n/sbin\nSublimeLinter: eslint: App.jsx ['/Users/przybylski/retrofit/dev/code/front-end/node_modules/.bin/eslint', '--format', 'compact', '--stdin', '--stdin-filename', '@'] \nPackage Control: Skipping automatic upgrade, last run at 2016-12-11 16:24:37, next run at 2016-12-11 17:24:37 or after\nreloading settings Packages/User/GitGutter.sublime-settings\n```\nI always compare against HEAD (i actually don't even know how to compare against another branch using GitGutter, it was always set to whatever is default). I've tried restarting sublime, re-installing GitGutter, uninstalling sublime and resetting it all back up, etc. Nothing seems to work, I always see the green pluses in the gutter.\nI also don't have any files that belong with git_gutter on my whole file system (searched in Spotlight, nothing came up).  Is there any specific commands you want me to run in specific steps that I may be missing?. yep, still happening in edge. i'd be more than happy to get a custom build to try out if you can just provide me with direction on exactly what you want me to do.. @jisaacks Is that any different than pulling down whats in Package Control?. @jisaacks i did indeed install through PC.. ",
    "frangeris": "Same here :/\n. ",
    "Nickoladze": "Ran into this issue today where my files suddenly showed every line with a green + while I had no outgoing changes at all. Deleting and re-cloning the repo fixed the issue for now.\nThe problem happened for both GitGutter and GitGutter-Edge installed via Package Control in ST3.\n. ",
    "s10wen": "@sigod nice one! Cheers!\n. ",
    "shaypal5": "A rebellious little .git folder in the subfolder containing the actual package made the Git indexing act weird. Removing it made everything better. Not GitGutter's fault. Sorry! :)\n. ",
    "kirylkastko": "@jisaacks @sigod thank you guys! Setting \"git_binary\" helped me.\n. ",
    "woble": "Getting the following related error:\nGitGutter-edge\nSublime Text 3 Build 3120 (Dev channel)\nTraceback (most recent call last):\n  File \"git_gutter_events in D:\\Programs\\Sublime Text 3\\Data\\Installed Packages\\GitGutter-Edge.sublime-package\", line 74, in callback\n  File \"D:\\Programs\\Sublime Text 3\\Data\\Installed Packages\\GitGutter-Edge.sublime-package\\view_collection.py\", line 20, in add\n  File \"D:\\Programs\\Sublime Text 3\\Data\\Installed Packages\\GitGutter-Edge.sublime-package\\git_gutter_handler.py\", line 19, in __init__\n  File \"D:\\Programs\\Sublime Text 3\\Data\\Installed Packages\\GitGutter-Edge.sublime-package\\git_gutter_handler.py\", line 284, in load_settings\nNameError: global name 'shutil' is not defined\n. ",
    "lwojciechowski": "Same problem on Ubuntu 16.04. Sublime 3119 Dev.\nTraceback (most recent call last):\n  File \"git_gutter_events in /home/lwojciechowski/.config/sublime-text-3/Installed Packages/GitGutter-Edge.sublime-package\", line 74, in callback\n  File \"view_collection in /home/lwojciechowski/.config/sublime-text-3/Installed Packages/GitGutter-Edge.sublime-package\", line 20, in add\n  File \"git_gutter_handler in /home/lwojciechowski/.config/sublime-text-3/Installed Packages/GitGutter-Edge.sublime-package\", line 19, in __init__\n  File \"git_gutter_handler in /home/lwojciechowski/.config/sublime-text-3/Installed Packages/GitGutter-Edge.sublime-package\", line 284, in load_settings\nNameError: global name 'shutil' is not defined\n. ",
    "princemaple": "Wow amazing feature!\nDoes ST support HTML titles? That would be great to make it clear what the icons do.\n. Hm, then I think the text may still be necessary. I wouldn't be able to tell that it's a copy icon there.\n. > best to add a short explanation to the readme\nthat and an update message (release note) will be great :smile: (I'm not a maintainer though)\n. ",
    "Seraphli": "I had it removed by setting \"ignored_packages\".\n. Windows, Sublime Text 3\n. 3065.\n. Message about \"Git Binary Path\".\nI just ignored it and removed it. I never tried that. But I think it will pop up until it finds git path.\nIt is nothing to do with Sublime.\n. Really? Look at this!\nhttps://github.com/jisaacks/GitGutter/blob/7dcbbfa201c0c96d2497fce0e152f8a02848416d/git_gutter_handler.py#L291\nAnd\n\nerror_message(string)  Displays an error dialog to the user.\n\nhttps://www.sublimetext.com/docs/3/api_reference.html\nNow, do you still think that way?\nYou should REALLY check your code, AND REPLY!\n. Once per session is really a good idea.\n. @jrappen That's right! You can't get away from error message dialogs.\n. ",
    "absay": "It seems the package was updated today and it broke Sublime's functionality. I can't even uninstall it.\nedit: uninstalled it via ignored_packages as well.\n. ",
    "nicbou": "I'm dealing with the same problem. I cannot open Package Manager or do anything in the 3 second window between popups, so it effectively rendered Sublime unusable for me.\nIs there something I can do to at least disable the plugin while waiting for an update? For the record, I am using Sublime Text 3 on OS X.\nThanks for your work @jisaacks\n. It seems to have silently updated on start this morning, so the issue is not happening anymore. Thank you!\n. ",
    "hamidnazari": "@jisaacks I sure did. It's a machine running Fedora that I don't have access to at the moment. I'll try to gather more info tomorrow. I'll find out what Python version my Sublime runs, probably not 3.3 since it's complaining about shutil.which.\n. Turns out I'm running a somewhat old version of Sublime Text 2 packed with Python 2.6.6.\n\n```\n\n\n\nsys.version_info\n(2, 6, 6, 'final', 0)\n```\n\n\n\nI'm going to upgrade Sublime on my end. Feel free to close this ticket if you're willing to drop support below build 3006.\n. ",
    "githubusermane": "It eventually stopped working again with new errors.. setting the git binary path in the settings appears to have fixed my problem, but I've been using GitGutter for several months and it has always automatically worked, and only required me to set this as of last week. I'm not sure why it stopped working, though it appears to be line 284 in commit 5e8f2f28d5666bd74715d58717bcda943757577d\n. new errors \nOSError: [Errno 2] No such file or directory\nTraceback (most recent call last):\n  File \"./sublime_plugin.py\", line 339, in run_\n  File \"./git_gutter.py\", line 34, in run\n  File \"./view_collection.py\", line 55, in untracked\n  File \"./git_gutter_handler.py\", line 183, in untracked\n  File \"./git_gutter_handler.py\", line 199, in handle_files\n  File \"./git_gutter_handler.py\", line 264, in run_command\n  File \"/System/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/subprocess.py\", line 623, in init\n    errread, errwrite)\n  File \"/System/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/subprocess.py\", line 1141, in _execute_child\n    raise child_exception\n. ",
    "Daedalon": "Thanks for the quick reply! That #297 does not have the most descriptive title, so hadn't noticed it.\nGot the package removed by closing Sublime, deleting it from the directory as mentioned above, then opening Sublime, pressing Ctrl-Shift-P and typing \"Re\" and selecting Remove package. This needed to be done in the 5-10 seconds before the package reinstalls itself. When that happens, it cannot be removed yet, but after closing ST and reopening it once again, Ctrl-Shift-P now shows Remove package as one of the first options (it remembers the typed \"Re\" from last time), and it's possible to select Remove before the popup appears. After the popup appears, it doesn't close that Remove dialog, so one just needs to find GitGutter there and click it once.\nAs a side note, the spamming of exclamation points (\"!!!\") and writing GitGutter occasionally as \"Git Gutter\" with an extra space did not improve the impression of the plugin. Both were written in the automatically opened \"Thanks for installing\" text file that then proceeded to advertise some deals. I don't mind being informed of the deals once upon install, but they might sell more and the users would be happier if the plugin does not seem to be yelling at them (\"!!!\") or being uncertain of itself (GitGutter or Git Gutter).\n. ",
    "degamer106": "Same here.  Don't know what changed.  I'll try the instructions as well.  \nI'm running Sublime Text 2 + this plugin on OSX 10.11.6 if that helps.\nEdit:  I added updated the GitGutter.sublime-settings file and it did NOT work.  I used this path: /usr/bin/git\n. ",
    "nloira": "But it was able to find it before. I've been using GitGutter for months, without problem.\n. ",
    "mccarthy": "This is not working as intended.  For me, the git binary is at /usr/local/bin/git, and is in my PATH, but I am still seeing this error message.  \nI'm on:\nST 2.0.2 Build 2221\nOSX 10.10.5\nGitGutter 1.2.4\n. ",
    "Roman1972": "REMOVE GitGutter And everything goes !!!. ",
    "Kristinita": "@r-stein, no. Sublime Text 3 Build 3114. Thanks.\n. @sigod, @rchl , is really bad behavior. GitGutter updates many times and each time I need change icons, because default icons very small for me.\nMaybe, will be better add setting icons_path? Users can write own value, for example, \njson\n\"icons_path\": \"E:\\\\Sublime Text 3\\\\Data\\\\Packages\\\\User\\\\GitGutterIcons\"\nThanks.\n. ",
    "jlegewie": "I like this addition!! It would be great if it supported \"Beautiful diffs\" from git 2.9 (see here). \nI would also prefer if the diff works with a transparent background color (like here) and not with the font color. Not sure how \neasy that is.\nFinally, there should be an option to make this the default.\n. ",
    "ethe": "Just installed Fix Mac Path and it has been already fixed, sorry for bothering.\n. ",
    "webcaetano": "@ethe that saved me too. \n. ",
    "debugger22": "@ethe Thanks! Worked for me as well.\n. Hi guys,\nI ran into the same issue the previous day when I updated my Sublime Text 3 on macOS Sierra Public Beta.\nThe symbols are not showing up anymore.\nDoes the following log helps?\n```\n\n\n\nwindow.run_command(\"git_gutter\", {\"force_refresh\": True})\nTraceback (most recent call last):\n  File \"/Applications/Sublime Text.app/Contents/MacOS/sublime_plugin.py\", line 496, in on_modified_async\n    callback.on_modified_async(v)\n  File \"git_gutter_events in /Users/sudhanshu/Library/Application Support/Sublime Text 3/Installed Packages/GitGutter.sublime-package\", line 47, in on_modified\n  File \"git_gutter_events in /Users/sudhanshu/Library/Application Support/Sublime Text 3/Installed Packages/GitGutter.sublime-package\", line 93, in debounce\n  File \"/Applications/Sublime Text.app/Contents/MacOS/sublime.py\", line 247, in set_timeout_async\n    sublime_api.set_timeout_async(f, timeout_ms)\nTypeError: an integer is required (got type NoneType)\n``\n. It got fixed by installingFix Mac Path`.\n. \n\n\n",
    "skjbulcher": "I'm using the Source Code Pro font. I had a hunch about the font as well, but deleting the font from my user preferences (and saving it) did not make the problem go away. Does it require a restart of ST3 for new fonts to take effect in GitGutter? Does the Windows default font contain those characters / what is a good font to use? I rather like Source Code Pro.\n. OK, I confirmed your suspicions with a little more digging: After changing the font to Times New Roman (yes, I went there), the symbols appeared correctly.\nThe default font in Windows does not have definitions for the characters in questions; neither does the illustrius Source Code Pro font. Neither do I recommend Times New Roman as a programming font ;) Since changing fonts is an unwelcome workaround for users who values their favorite font (and by default GitGutter is broken in a fresh Windows 10 install), I feel this aught to be addressed.\nSince the nature of this issue has changed, should it be listed as a duplicate of another issue (e.g. #308)?\n. Something weird just happened. I tried a number of different fonts, but none of them worked. Then I reverted back to Times New Roman, but this time it didn't work for me. I restarted Sublime Text, and that did nothing.\nMaybe comparing our fonts and user options might be useful?\nfont-related config options:\n\"font_face\": \"Source Code Pro\",\n    \"font_options\":\n    [\n        \"gray_antialias\",\n        \"subpixel_antialias\"\n    ],\n    \"font_size\": 9,\nSource Code Pro font information:\nVersion: Version 1.0.17;PS Version 1.000;hotconv 1.0.70;makeotf.lib2.5.5900\nOpenType Layout, Digitally Signed, TrueType Outlines\n. I was using the TTF fonts. I just switched to OTF after uninstalling the old fonts and even rebooting, That gives me the \"PostScript Outlines\" you see on your system, but there is no change in the Sublime Text symbols.\nIn truth, I have a later version of the OTF font than you have now, but I'm not sure which version to download to test the same configuration as you:\nVersion: Version 2.030;PS 1.0;hotconv 16.6.51;makeotf.lib2.5.65220\nOpenType Layout,Digitally Signed, PostScript Outlines\n. Interestingly enough, when I did a search for the revert changes to the state in git arrow from the README, I discovered it was called an anticlockwise gapped circle arrow. I looked it up in the Caracter Map Windows app on my PC, and discovered it was U+27F2, and did not have a shape associated with it.\nEither my font is defective, or yours has a few extra characters. Where did you get your font? Did you build it yourself?\n. Can you verify that the character exists in your \"Source Code Pro\" font through your Character Map program for me (advanced view, Go to Unicode \"27F2\")? I can't find the symbol in that program at all for a number of different fonts. I also checked to see what font the browser used to render the readme page, and it was using \"Cambria Math\", even when I specified a different font. Incidentally, \"Cambria Math\" does have the symbol for U+27F2.\nI am at a loss. I don't know what else I can do to troubleshoot this on my system without spending a lot more time figuring out how the Sublime Text plugin system works, and I don't have time to do that. You're saying that it \"works for me\", so now I don't see this issue getting resolved. Any thoughts?\n. I did just have one idea though - maybe your edition of Sublime Text 3 is rendering the font the same way as the browser does for me (using the \"Cambria Math\" font), whereas my editor is confining itself to the selected font. That could explain the behavior.\n. OK, I just discovered something interesting. Copying and pasting the \u27f2 character into ST3 yielded a generic no glyph symbol as shown in the original post. However, upon enabling the directwrite under font_options, it rendered correctly in the editor (although the extension continues to render the missing glyph icon). I read somewhere it might do this through some type of substitution mechanism. What theme are you using? I'm starting to think that something on your system is enabling directwrite in your extension not for me.\n. What about using svg icons? I'm not very familiar with them or Sublime\nText's way of handling images, but I know it is possible to alter their\ncolor on the fly.\n. ",
    "JimAmuro": "Same problem here...\nWindows 10 user. Changed several fonts. No luck at all...\n. OK, it did work under HiDPI, i.e., if I don't set dpi_scale=1.0. Also some missing symbols in files show up. However, some CJK and other symbols in tabs and status bar become missing. I think maybe the render engine is different for the two parts? Such a dilemma...\n. @wbond Actually not, at least for me changing to \"directwrite\" doesn't work.. ",
    "wbond": "I believe I know what is going on.\nSublime Text uses different backends for fonts on Windows depending on whether or not you are using a HiDPI screen. On non-HiDPI, we use GDI, whereas for HiDPI we use Skia. GDI has a mechanism for finding a glyphs that a missing from the selected font from another font and filling them in. Unfortunately Skia does not have that functionality, but handles HiDPI much better than GDI.\nFor the actual editor, we have a layer that sits on top of the font engine that allows us to do the glyph substitution, however that implementation is tailored to the editor control, and can't be easily used for minihtml.\nThis issue also affects editor tabs, as can be seen on https://github.com/SublimeTextIssues/Core/issues/1066.\nThe solution isn't trivial, and requires integration of a library such as harfbuzz, or using our own implementation such as we use on the editor component. It is definitely something that will be addressed, but I don't have an ETA.\n. No, minihtml doesn't support SVG at this time. I'm not sure if we'll go down that path in the future or not, since SVG can be rather involved.\nI would think an icon font would probably be the most reliable, right?\n. Yes, I would need to look into adding webfont support to minihtml. I had done some investigation into this before, but there wasn't a lot of info about using app-specific fonts on some platforms.\n. @barkan I believe changing the dpi_scale is triggering using directwrite for font rendering instead of gdi. You could just set \"font_options\": [\"directwrite\"], in your settings and see if that accomplishes the same thing.\nUsing dpi_scale for anything other than working around Linux distros that don't properly report HiDPI is probably not a good idea.. @JimAmuro I'll have to look into the font selection \u2013 it may be that the font options aren't being used when picking fonts in minihtml. Either way, dpi_scale of any value other than 1.0 triggers alternate code paths for a number of things, assuming that we are dealing with a HiDPI display. While we default to GDI because so many people on Windows are familiar with the exact font rendering GDI produces, generally directwrite produces higher fidelity results.. I would open your Console, import sys and check out your sys.path. My hunch is something in there, although I could be completely wrong.. A timeout of 0 will effectively run the command at the end of the current unit of work. A delay of 10 used to be necessary to get around some subtle bugs in the API of ST2, but I believe Jon fixed the bug quite a while ago.\nI haven't had time to fully understand the context of the snippet of code above, but it does look like an example where you may run into issues with the variables bound to the closure being modified by another bit of code.. ",
    "barkan": "I found a simple workaround on my Windows 10 machine.\nThere's a \"hidden\" DPI scale setting for windows which is almost entirely useless in Sublime on Windows (works great on Mac, though). On Windows, it spaces things out and looks terrible.\nHowever, through some trial and error, I discovered you can use the DPI scale to fix the icons, even with the tiniest DPI Scale.\n{\n    \"dpi_scale\": 1.0001,\n        // more settings\n}\n\n.. @wbond directwrite doesn't get it done for me, either. Just fyi.. ",
    "eshinn": "Just had the same thing happen on mine and got it working. Steps taken:\n1 Cmd+Shift+P and 'Package Control Remove Package --> GitGutter'\n2 Realize sublime crashed hard...force quite restart\n3 Noticed that GIT itself wasn't noticing a branch, I typed git status and received:\nAgreeing to the Xcode/iOS license requires admin privileges, please re-run as root via sudo.\n4 Run sudo git status and agree to the terms in terminal.\n5. Cmd+Shift+P and 'Package Control Install Package --> GitGutter'\n6 \u00af(\u00b0_o)/\u00af \n7 Profit\n. @oferei Welcome\n. ",
    "incompl": "Macbook Pro US English\n. ",
    "dsh0416": "Sovled\n. ",
    "silentbugs": "Thanks, I should have clarified that. It started working after a system restart rather than just Sublime. Nothing else was changed between restarts.\n. ",
    "smanolloff": "Yes, it was the first thing I did, did not help :(\n. splendid! Did not look at the path -- I obviously opened it via the Resource Viewer around a year ago (judging by file created date)... and have probably pressed \"save\" by accident, in which case it ends up there and is loaded with higher priority than the one in the package. Removed it, all works now. The new version rocks :metal: thanks again \ud83c\udf7a \n. ",
    "mamat-rahmat": "@deathaxe Fully understable. Lets wait until its ready.. ",
    "jayvdb": "\nHard line breaks in Markdown won't be applied as they break line wrapping on the github.\n\nCould you clarify what you mean?\nHere is how the hard line breaks render in GitHub:\nhttps://github.com/mamat-rahmat/GitGutter/blob/8e218fbdc368588b9c97a80fd244be45e9c34402/README.md\nI dont see any breakages.. > @mamat-rahmat This plugin does not include any ruby or yaml files.\nThere is release_messages/src/build.rb , and this patch introduces .travis.yml.. I dont have an opinion on switching from find_resources to load_resource, however IMO this should be\njs\n    try:\n        css += \"\\n{0}\".format(\n            sublime.load_resource(\"Packages/User/gitgutter_popup.css\"))\n    except ...:\n        ...\nLess string concatenations.\n. pycodestyle has an option to disable the rule which requires a blank line here, if the maintainers do not like having an extra blank line here. (it seems to be a very common style choice; maybe it is intentional disagreement with PEP8)\n. is * or - the preferred style of the developers here?  the linter can be configured to support either.\n. A blank line is still required after the docstring, if one is present.\n. ya, ok, so this part of the change needs to be reverted.  I wasnt sure, but pull request #336 shows why code shouldnt be changed in order to solve linting rules.\n. ",
    "sgerace": "Sure thing, only I'm not sure where to make this change to have it take effect. I tried looking around for where Package Control installs the source code for the packages I have installed, but wasn't able to find it. I'm on OSX.. Yep, that seems to have fixed the issue.. Yes, it seems like it is behaving properly:\n\n. ",
    "canoeberry": "Sorry - very confused on the status of this work. I cannot see any commits, here OR in deathaxe's fork that claims to fix it. The last commit mentioned (073599c) doesn't appear anywhere that I can see. Very interested in seeing this fixed.. Bummer. The flashing is really annoying ... on a good day ;-)\nThanks for getting back.. I'll test it on Mac OS X for you if you can send me a patch ...\n. OK - testing it now. Thanks - I didn\u2019t know which branch to use when I was poking around the other day.\nDo you want some feedback? I am not a huge user. I only just discovered that I can hover over the gutter and see the actual diffs at that location and copy and/or revert and various other things.\n. Still seeing some blinking for sure. I am not yet sure how much blinking I am seeing though. I just wanted to let you know I was still playing with it.. Wow - this whole time I thought it was a sublime bug whereas it's actually a GitGutter one. I didn't read this issue carefully enough! I just checked out 1.3.0 and all is well again. I wish I had thought of that sooner.\nI am going to figure out which commit caused this issue unless you already know which one it was.\n. Well my guess is you already know the answer to this.\n```\n$ git bisect bad\nd56c24ae1ebf548d5d9347911d5f84d0f29c4d24 is the first bad commit\ncommit d56c24ae1ebf548d5d9347911d5f84d0f29c4d24\nAuthor: Rafal Chlodnicki rchlodnicki@opera.com\nDate:   Thu Oct 27 22:38:06 2016 +0200\nIntroduce async invocations of git (real non-blocking behavior) (#230)\n\nGitGutterHandler.run_command() now runs git in an async thread and returns a\nPromise which gets resolved when git operation finishes. For clarity of the\ncode, rather than using hard to read callbacks, added simple implementation of\nPromise.\n\nThe behavior is always non-blocking now (only in ST3), so removed \"non_blocking\"\nsetting.\n\n:100644 100644 6b6a20c9f016294857dddaad9885429ae7973f3b 9e658c4eda51b1c03cfb71f0067242dbe23341e6 M  GitGutter.sublime-settings\n:100644 100644 2cc3edb8ba9219ee6b8b5bb513b2d5bbaf9535c1 c33e5d46eceb13a883e222fece0525c0ea46ad93 M  README.md\n:100644 100644 2d72be433606c17f7e0cf551b24821ac7b2730e2 cbef8e2c34669183b4e3e8e3b5dc01424aecff16 M  git_gutter_compare.py\n:100644 100644 fc8fb733f9f2ae0b0969b79b9fcec19101c6fd25 fb28059b2620f368a4365ef8913ee6663a2dc987 M  git_gutter_events.py\n:100644 100644 50257162b5f344e929e230e2a861278e2eee7ddc c25e98c6f0124d240acc946b6c3abbc3e5243b2f M  git_gutter_handler.py\n:100644 100644 9d839cc89a8dd437944f4ba519ca12ead78c8488 6c10126ef37dcbad0cd30dced5087602e7a5a2aa M  git_gutter_jump_to_changes.py\n:100644 100644 b109fd5fe8dc12500ef230558c007955f2ea4ce0 2b71280130996de1923f2c72aa57e0063679bfe3 M  git_gutter_popup.py\n:100644 100644 6716de4fb963979783ebe0ac0028d4b1093820cc ef0566731a6d277d15631a9f7761ba48386aeb65 M  git_gutter_show_diff.py\n:000000 100644 0000000000000000000000000000000000000000 ec5050bb6b4476bdf508b39e1517af20eed9ea64 A  promise.py\n:000000 040000 0000000000000000000000000000000000000000 d1114dc4e8cce12df3ff61d58c6469a8d7cf9049 A  tests\n:000000 100644 0000000000000000000000000000000000000000 c2fdb3dcbb1d69f962032b12bdf7abb77a5495aa A  unittesting.json\n[paradiddle.local:20:12:40:(no branch, bisect started on 311811e):~/src/SublimeText/GitGutter]\n$ \n```\nObviously a move to async is ... a big deal ;-)\nHowever, the solution must surely be to erase the markers in the same thread that you apply the new markers AFTER you get the results from the diff, right?\n. Thanks. Trying it now. It seems to work and makes complete sense. Still not sure why it caused flashing the old way. If I was just sitting there doing nothing, it still flashed. So what was the UI thread doing that would cause the erase to be done separate from the redraw? I even changed my cursor not to blink just in case that was the reason.\nIf you know the answer, I'd love to hear it for future reference.\nBTW - This plugin is not unload/reload safe. Requires a restart of Sublime.\nreloading plugin GitGutter.promise\nunloading plugin GitGutter.view_collection\nTraceback (most recent call last):\n  File \"/Users/jpayne/Applications/Sublime Text.app/Contents/MacOS/sublime_plugin.py\", line 701, in is_enabled_\n    ret = self.is_enabled()\n  File \"/Users/jpayne/Library/Application Support/Sublime Text 3/Packages/GitGutter/git_gutter.py\", line 34, in is_enabled\n    if not settings.git_binary_path:\nAttributeError: 'Settings' object has no attribute 'git_binary_path'\nTraceback (most recent call last):\n  File \"/Users/jpayne/Applications/Sublime Text.app/Contents/MacOS/sublime_plugin.py\", line 699, in is_enabled_\n    ret = self.is_enabled(**args)\n  File \"/Users/jpayne/Library/Application Support/Sublime Text 3/Packages/GitGutter/git_gutter.py\", line 34, in is_enabled\n    if not settings.git_binary_path:\nAttributeError: 'Settings' object has no attribute 'git_binary_path'\nTraceback (most recent call last):\n  File \"/Users/jpayne/Applications/Sublime Text.app/Contents/MacOS/sublime_plugin.py\", line 699, in is_enabled_\n    ret = self.is_enabled(**args)\n  File \"/Users/jpayne/Library/Application Support/Sublime Text 3/Packages/GitGutter/git_gutter.py\", line 34, in is_enabled\n    if not settings.git_binary_path:\nAttributeError: 'Settings' object has no attribute 'git_binary_path'\nTraceback (most recent call last):\n  File \"/Users/jpayne/Applications/Sublime Text.app/Contents/MacOS/sublime_plugin.py\", line 701, in is_enabled_\n    ret = self.is_enabled()\n  File \"/Users/jpayne/Library/Application Support/Sublime Text 3/Packages/GitGutter/git_gutter.py\", line 34, in is_enabled\n    if not settings.git_binary_path:\nAttributeError: 'Settings' object has no attribute 'git_binary_path'\nAnd perhaps other errors.. Maybe it's the version I was updating from (1.3.0).\nAnyway - regarding the threads, I think what you're saying is, The UI thread is high priority. So, when you erase, the UI thread wakes up and performs the erase and goes back to sleep, and then the next step is performed, and the UI thread wakes up and does it again, etc.\nAre python threads ... shoot what's the word ... getting old ... pre-emptive? Pre-emptive such that hgih priority threads will just run as soon as they become runnable?. Well - let me just come back and say that the issue of performance is another plugin, something I should have checked first.\nBut I am still curious about why the diff output is different.\n. The git diff in a Terminal window had a \"-\" before the deleted line and was displayed in red. And then the rest of the lines had \"+\" and displayed in green.\nI've had a quick look at your code and it doesn't seem like magic so I think I can figure exactly what is going on and I will get back to you. Thanks for replying!. I think you just replied to a comment I deleted due to being confused. And I am still confused. . I was just saying, as your last comment came in, You know, I think that this whole Issue is bogus. I was very confused but now I am less confused. It's as though I thought Sublime was displaying the deleted lines but of course it doesn't.\nActually I think I know what happened to cause a bunch of \"changed lines\" (in sublime) to a bunch of \"plus lines\". I think I edited the ONE line that was in common between the before and after. And as soon as I changed that one line so that it was restored to its original value, it was no longer a change but rather an insert of a bunch of lines, terminated by that line in common. But as soon as I typed a single character on that line, it became part of a change and the \"+\" all disappeared and turned into change.\nIn other words, you just spent however long you spent dealing with this issue wasting your time educating me on how git gutter works. \nI learned a lot. But sorry for the waste of time!\n. ",
    "nwoltman": "\nFirst of all: This not a bug, but the expected behavior. Hence it is an enhancement.\n\nI'd say it depends on your perspective. Perhaps there could be a setting so people could choose which functionality they want?\nI see your point with that example though.\nRunning git diff --word-diff --unified=0 on\nd\nc2\nd\nyields\n@@ -5 +5,3 @@ b\n[-c-]{+d+}\n{+c2+}\n{+d+}\nso at least what I was suggesting is the same as what git would come up with. (+1 for my suggestion)\nBut then if the text is\nd\nc 2\nd\nthe word-diff is\n@@ -5 +5,3 @@ b\n{+d+}\nc {+2+}\n{+d+}\nwhich requires parsing the output lines.  (-1 for my suggestion)\nWould it be reasonable for performance to parse the word-diff output only for sections where the number of removed lines is not specified and the number of added lines is positive? i.e. Only parse lines if the diff sections starts with a line of the form @@ -x +y,n @@ where n is a positive integer.. Sorry, YubiKey. Yes it's only an issue on Windows/Linux.. @rchl It has been over 3 years since Sublime introduced support for hiDPI screens. At this point it seems extremely unlikely that it's going to get fixed anytime soon.\nActually, that makes me think that perhaps there is no \"bug\" at all in Sublime. It may simply be a difference in screen resolution. I have a 4K screen (3840x2160) so the GitGutter icons look tiny on my screen. Someone like @jisaacks who has a Mac Retina screen might have a resolution of 2880x1800, so the icons could look fine at that resolution.\nIf that is the case (which is starting to seem pretty likely seeing as how #199 was opened by someone with a 3200x1800 resolution screen), autodetecting hiDPI is not a solution since there are a wide variety of resolutions that are considered hiDPI. Therefore, it would be best to let users opt in to the \"high_res_icons\" setting based on whether or not the icons are too small on their particular screen.. Yes you're right, I forgot it's the user's pixel density that's important because the icons should be scaled by the same ratio as the rest of the UI.\nAlso, I just verified that Sublime does scale gutter icons on Mac but not on Windows/Linux.\nAnyway, we have no idea when or if this will be fixed in Sublime, so until that point, there should be something in GitGutter to provide Windows/Linux with a better experience.. @deathaxe The custom icon support looks great! I wanted to try it out but it looks like the GitGutter-Edge package doesn't exist anymore :(. Looks great on master! Thanks @deathaxe \ud83d\udc4d . That's what I was going for in #347. Can we just reopen that PR and I'll rename the high_res_icons setting to large_gutter_icons?\nIn this PR I was trying to do what you suggested in this comment by \"autodetecting hiDPI mode\" with the dpi_scale setting (which is an undocumented setting but some ST users set this in their User Preferences to the DPI scaling factor for their system, such as this user from #199).. ",
    "melriffe": "@deathaxe Thanks for the quick feedback, and correction. :-/\nI'll report back after next release. \ud83d\udc4d . ",
    "diazgilberto": "Yes.. ",
    "mlabarca": "I had the same problem on Ubuntu/ST3, rolling back to 730356d also did solve it  for me.. Unfortunately it didn't, only rolling back solved it.. Build 3126. @deathaxe Seems to work now straight from master. Thanks!. ",
    "magnetikonline": "Hey @deathaxe / @mlabarca seems you have been doing all the work!\nI just did a git pull on master on my home system (Linux/Ubuntu 16.04 running ST3 b/3126), it's now working - but I no longer have the status bar at all. Which I guess is related to the try/catch check here: https://github.com/jisaacks/GitGutter/blob/f975cf2f2b22a7767f845d06b36444d80820ef45/git_gutter_show_diff.py#L4-L10\nDoing a sudo -H pip install jinja2 and restart ST3 didn't change either.\nAnd then finally installing Package Control - which I have never used with ST ever (yes, I'm that guy!) - finally it all sprung to life. Changes to status_bar_text are reflected too.\nRight... so then a final list of my packages installed shows:\nmagnetik:~/.config/sublime-text-3/Packages$ pwd\n/home/magnetik/.config/sublime-text-3/Packages\nmagnetik:~/.config/sublime-text-3/Packages$ ls -l\ntotal 48\ndrwxr-xr-x 6 magnetik magnetik 4096 Feb  5 06:52 GitGutter\ndrwxr-xr-x 3 magnetik magnetik 4096 Mar 19  2016 LineEndings\ndrwxrwxr-x 3 magnetik magnetik 4096 Feb  5 07:02 markupsafe\ndrwxrwxr-x 6 magnetik magnetik 4096 Feb  5 07:02 mdpopups\ndrwxr-xr-x 7 magnetik magnetik 4096 Feb 20  2016 PowerShell\ndrwxrwxr-x 3 magnetik magnetik 4096 Feb  5 07:03 pygments\ndrwxrwxr-x 3 magnetik magnetik 4096 Feb  5 07:03 python-jinja2\ndrwxrwxr-x 3 magnetik magnetik 4096 Feb  5 07:03 python-markdown\ndrwxr-xr-x 7 magnetik magnetik 4096 Mar 24  2015 SCSS\ndrwxr-xr-x 5 magnetik magnetik 4096 Nov  8 11:01 Theme - Flatland\ndrwxr-xr-x 4 magnetik magnetik 4096 Feb  5 06:52 TodoReview\ndrwxr-xr-x 3 magnetik magnetik 4096 Feb  5 07:03 User\nThe packages of markupsafe, mdpopups, pygments, python-jinja2 and python-markdown are all new (via Package control). And also - that \"diff viewer\" from the gutter that I have never seen, I'm suddenly seeing!\nSeems my lack of packages (due to not using PC) has been the issue!\nEdit: wow, the diff viewer popup is awesome useful! :smile: \n. Hey @deathaxe - some great work in these commits \u261d\ufe0f - you can probably close this out, the fix being \"just use package control!\".\nAnd yes, I was confused between the need of pip package jinja2 vs. the need of the SublimeText package python-jinja2.\nKeep up the great work: \ud83d\udc4d . I'm all for this!\nCould the plugin issue a git --version during it's bootstrap and determine which way to go? Would mean new/old git version code paths have to be maintained - which would be a negative I guess.\nBut for me personally I run latest versions always (compile from source on OS X and use a very often updated PPA for Ubuntu) - so would love to have this running as a single command if possible.\n. Thx @deathaxe - see how it pans out :+1: . Just to add - this is now fixed in master from c9876cad0fe75978a398109fc43051d88aa683ec (or some commit around there). Live mode can be turned on/off once more.\n. Thanks @deathaxe - was causing me grief too :+1: \n. ",
    "johnmellor": "This works temporarily if you set \"compare_against\": \"@{upstream}\" in GitGutter.sublime-settings, but unfortunately GitGutter doesn't re-evaluate the compare_against expression when you switch git branch, so after switching branch it'll compare against the wrong commit. It'd be really great for GitGutter to support this, as comparing against the upstream branch is my primary use case for GitGutter :). ",
    "bootsiaz": "Ok checked your latest build. Weird coincidence that you just started adding support. Doesn't seem to pick up the changes with the latest though.\nWorks if i change to:\n            if os.path.islink(file_path):\n              real_path = os.readlink(file_path)\n            else:\n              real_path = file_path\n\nand \n        if os.path.islink(self.view.file_name()):\n          file_name = os.readlink(self.view.file_name())\n        else:\n          file_name = self.view.file_name()\n\nBtw, I'm on windows 10. . Great. Thanks for your help. Are you going to update your changes to work on Windows?. Yes, I should be more specific. The link i was using was a symbolic link, not a hard link. \nHowever, i do plan on using hard links on Windows in the future as it doesn't require admin privileges. So, a solution for both would be ideal.  I'm not sure how to figure out the original hard link through the os library, not sure if it's possible.  . Thanks for looking into this!. ",
    "wggley": "+1\nI work with bower link to develop some reusable modules and their files looks like new files.\nOn the current master branch code the simbol changed from a plus (+) to a (x). Ok, In my scenario I have:\nFolder A on git - OK\nReal path:\nC:\\workspace\\folderA\\\nFolder B symlinked by bower - NOK\nLink:\nC:\\workspace\\folderA\\folderB\\\nRealpath\nC:\\worspace\\folderC\\folderD\\folderB\\\n.git folder is on folderC\n. See if it's correct:\nC:\\workspace\\folderA\\.gitignore\nIgnoring folderB (it's a library symlinked with it's respective repo) because I don't want to persist same source on two different repos.\nBower link is used exactly in my case that I can work on a library and test it being used and made changes.\nNot using bower link in my case demands that I change my library, commit it, generate tags and after that git bower update on it. That's not productive to me but I understand if this scenario is not expected by GitGutter.\n. Yesterday I've tried only master and it not worked, but I've tested with master and your commit and now works!\nThanks for helping this!. Sorry, I don't know what happened but today It displays ignore character on files, look:\n\n . Ok! Thanks for your help! I'll try to upgrade to ST3... sorry to bother\n. ",
    "mikitl": "Cool,\nI will take a look with  PackageResourceViewer and try to edit the colorscheme.\nThanks. ",
    "pierresh": "Hello,\nHave you found a solution for this? I also would like to have the colors with the theme Blackboard ^^.\nI tried to put these lines in Blackboard.tmtheme just before the closing </plist>, but it does not work.\n<dict>\n  <key>name</key>\n  <string>GitGutter deleted</string>\n  <key>scope</key>\n  <string>markup.deleted.git_gutter</string>\n  <key>settings</key>\n  <dict>\n    <key>foreground</key>\n    <string>#F92672</string>\n  </dict>\n</dict>\n<dict>\n  <key>name</key>\n  <string>GitGutter inserted</string>\n  <key>scope</key>\n  <string>markup.inserted.git_gutter</string>\n  <key>settings</key>\n  <dict>\n    <key>foreground</key>\n    <string>#A6E22E</string>\n  </dict>\n</dict>\n<dict>\n  <key>name</key>\n  <string>GitGutter changed</string>\n  <key>scope</key>\n  <string>markup.changed.git_gutter</string>\n  <key>settings</key>\n  <dict>\n    <key>foreground</key>\n    <string>#967EFB</string>\n  </dict>\n</dict>\n<dict>\n  <key>name</key>\n  <string>GitGutter ignored</string>\n  <key>scope</key>\n  <string>markup.ignored.git_gutter</string>\n  <key>settings</key>\n  <dict>\n    <key>foreground</key>\n    <string>#565656</string>\n  </dict>\n</dict>\n<dict>\n  <key>name</key>\n  <string>GitGutter untracked</string>\n  <key>scope</key>\n  <string>markup.untracked.git_gutter</string>\n  <key>settings</key>\n  <dict>\n    <key>foreground</key>\n    <string>#565656</string>\n  </dict>\n</dict>\nThanks!. For those that might be interested with Blackboard theme including support of GitGutter, I just made a repo for this purpose here: https://github.com/pierresh/Theme-Blackboard. ",
    "sbalgas": "Hi, I have the same problem now.\nI tried changing the Line Endings, Unix, Windows and Mac and it does not work.\nI also tried with git reset.\nI am using ST3 3126.. Hi, I put \"ignore_whitespace\": \"eol\", in my GitGutter Settings and I have the same problem.\nBut, when I change the EOL in the SublimeText, my smartgit and git status shows me this change.\nEOL changed\n\nWithout changes\n\nOnly works when I put EOL: Unix\nRegards. ",
    "paranat": "Having a similar problem with 1.5.0 where all lines of files are marked with red.\nRunning on Linux ST3 3126.. Yep, this seems to be the case for me. Using that setting gets rid of the incorrect change markings.. ",
    "alecive": "@deathaxe ignore_whitespace fixed the issue to me, but why this issue appeared only now in the first place? Also, I am not quite sure if there is a difference in end-of-lines in my repositories at all (at least, not that I'm aware of).. Same problem here. @jisaacks any chance of having it fixed in the version from the package manager?. ",
    "ssddanbrown": "This issue popped up for me (ST3 / Ubuntu 16.10). ignore_whitespace worked for me after restarting ST. Thanks @deathaxe.. ",
    "atomtigerzoo": "Thank you for your fast reaction @deathaxe :) Problem solved!. ",
    "JustinAddams": "Adding  \"ignore_whitespace\": \"eol\", to settings solved the issue for me.. ",
    "gerardroche": "@atomtigerzoo are you ignoring files on export in gitattributes file, see https://github.com/jisaacks/GitGutter/issues/409. I'm on Ubuntu 17.04 and it only has Git 2.11.0 so I'm gonna say that 2.12.0 is probably a bit too much of a stretch. \nI really don't want to have to figure out how to install the latest version of Git just for GitGutter.. I think this is a really big issue. Lots of projects use export-ignore. I've never used filters, not sure if I've ever worked on a project that did. Certainly far more projects use export-ignore than use filters. And the fix for the filters doesn't even fix that issue properly. It looks like it adds a performance overhead too. \nGitGutter should use export-ignore it to exclude release_messages/, tests/, and other non-production files from releases.\nMany affected by this must see it as just one of those bugs that get eventually gets fixed. They've probably come to the issue tracker like I did and read all kinds of similar issues and tried reinstalling, setting the binary path, maybe it's a line ending issue, or whitespace issue. I went through those issues and ended up setting show_markers_on_untracked_file to false which just completely hides the problem. I assumed it was just some files. It was only later when I decided to debug it I realised it was export-ignore and then realised that most project tests/ directories are being marked as new by GitGutter.\nI'd prefer to do without filters support. I don't think it will affect me as I don't use them.\n. > Line padding also adds gaps between the icon rendering areas. There is no way to fix that.\nIs there an open issue on https://github.com/SublimeTextIssues/Core for this? I see https://github.com/SublimeTextIssues/Core/issues/1713, is that the same issue?\nIt's a shame the bar has gaps. Decreasing the font size is not an option, it's too small. And the gaps just ruin the bar theme. . > but if I understand you correctly you also want to have additional variables, like staged files or untracked files?\nYes. The Git prompt indicates things via characters depending on the settings:\n\nIn addition, if you set GIT_PS1_SHOWDIRTYSTATE to a nonempty value,\nunstaged (*) and staged (+) changes will be shown next to the branch\nname.  You can configure this per-repository with the\nbash.showDirtyState variable, which defaults to true once\nGIT_PS1_SHOWDIRTYSTATE is enabled.\nYou can also see if currently something is stashed, by setting\nGIT_PS1_SHOWSTASHSTATE to a nonempty value. If something is stashed,\nthen a '$' will be shown next to the branch name.\nIf you would like to see if there're untracked files, then you can set\nGIT_PS1_SHOWUNTRACKEDFILES to a nonempty value. If there're untracked\nfiles, then a '%' will be shown next to the branch name.  You can\nconfigure this per-repository with the bash.showUntrackedFiles\nvariable, which defaults to true once GIT_PS1_SHOWUNTRACKEDFILES is\nenabled.\n\nhttps://github.com/git/git/blob/master/contrib/completion/git-prompt.sh\nSo for example in the screenshots you'll notice that when I add the new fizz file it was indicated via%. When I modified the README.md it was indicated via *\nSimilarly, when I committed the changes u+1 origin/master indicates that you're 1 commit ahead of the upstream branch. \n. Outstanding!\nMy first pass to get a status line that mirrors the git default:\n\"git_gutter_status_bar_text\":\n    [\n        \"{% if inserted > 0 %}+{{inserted}} {% endif %}\",\n        \"{% if modified > 0 %}~{{modified}} {% endif %}\",\n        \"{% if deleted > 0 %}-{{deleted}} {% endif %}\",\n        \"\u2387 {{branch}}\",\n        \"{% if modified_files or added_files or deleted_files or staged_files %} \",\n        \"{% if modified_files %}*{% elif deleted_files %}*{% endif %}\",\n        \"{% if staged_files %}+{% endif %}\",\n        \"{% if added_files %}%{% endif %}\",\n        \"{% endif %}\",\n        \"{% if remote %}\",\n        \"{% if ahead > 0 %} u+{{ahead}}\",\n        \"{% elif behind > 0 %} u-{{behind}}\",\n        \"{% elif ahead == 0 and behind == 0 %} u=\",\n        \"{% endif %}\",\n        \" {{remote}}\",\n        \"{% endif %}\"\n    ]. > I would say wrap is by default null/None to use the global setting and can be true/false to explicitly set it.\nYes. It should default to the global setting git_gutter_next_prev_change_wrap, which is equivalent to the current behaviour.\n\n... and count argument defaults to 1 if not present or < 1.\n\nI think the count should default to 1, which is equivalent to the current behaviour i.e. the git_gutter_next_change command jumps to the next change and git_gutter_prev_change jumps to the prev change. Passing 2 to git_gutter_prev_change would jump backward twice, which is the same as calling git_gutter_prev_change twice.\nFor example these are the commands internal to NeoVintageous:\n```\nhttps://neovim.io/doc/user/diff.html#[c\nclass _vi_left_square_bracket_c(ViMotionCommand):\n    def run(self, mode=None, count=1):\n        for i in range(count):\n            self.view.run_command('git_gutter_prev_change')\nhttps://neovim.io/doc/user/diff.html#]c\nclass _vi_right_square_bracket_c(ViMotionCommand):\n    def run(self, mode=None, count=1):\n        for i in range(count):\n            self.view.run_command('git_gutter_next_change')\n```. Thanks! That fixes it. \nIf the issue persists after updating - try removing /run/user/1000/GitGutter/ (though I assume that directory is cleared on system reboot):\n$ rm -r /run/user/1000/GitGutter/\n. ",
    "kikithedeveloper": "@deathaxe  Adding \"ignore_whitespace\": \"eol\" to my GitGutter.sublime-settings - User did not solve anything for me. All lines in certain files still show as modified after I just git pushed everything up to date. My gitgutter version is 1.7.2.. ",
    "lestrato": "Hi there,\nI'm also getting the same issue, and this happens to all of my files in the project.\nI checked what you recommended and found that the files are, in fact, identical. To be sure, I did a git pull affirming that I am up to date with my remote.\nIn console, I get the following errors:\n\nUnable to open /home/useme/.config/sublime-text-3/Packages/GitGutter/GitGutter.sublime-settings\nUnable to open /home/useme/.config/sublime-text-3/Packages/User/GitGutter.sublime-settings\nUnable to open /home/useme/.config/sublime-text-3/Packages/User/gitgutter_popup.css\nUnable to open /home/useme/.config/sublime-text-3/Packages/GitGutter/gitgutter_popup.css\nUnable to open /home/useme/.config/sublime-text-3/Packages/GitGutter/GitGutter.sublime-settings\nUnable to open /home/useme/.config/sublime-text-3/Packages/User/GitGutter.sublime-settings\nUnable to open /home/useme/.config/sublime-text-3/Packages/GitGutter/Default (Linux).sublime-keymap\nUnable to open /home/useme/.config/sublime-text-3/Packages/User/Default (Linux).sublime-keymap\n\nPerhaps something fail during installation?. A reinstall fixed the issue for me.. ",
    "m45yang": "+1 on this issue, seeing the same problem right after upgrading to macOS Sierra.. @deathaxe \nOutput in console when installing GitGutter:\n\nignored packages updated to: [\"GitGutter\", \"Vintage\"]\nreloading settings Packages/User/Package Control.sublime-settings\nreloading settings Packages/User/Preferences.sublime-settings\nreloading settings Packages/User/Package Control.sublime-settings\nignored packages updated to: [\"Vintage\"]\nreloading plugin GitGutter.git_gutter\nreloading plugin GitGutter.git_gutter_compare\nreloading plugin GitGutter.git_gutter_events\nreloading plugin GitGutter.git_gutter_handler\nreloading plugin GitGutter.git_gutter_jump_to_changes\nreloading plugin GitGutter.git_gutter_popup\nreloading plugin GitGutter.git_gutter_settings\nreloading plugin GitGutter.git_gutter_show_diff\nreloading settings Packages/GitGutter/GitGutter.sublime-settings\nreloading settings Packages/User/Package Control.sublime-settings\nreloading settings Packages/User/Preferences.sublime-settings\nreloading settings Packages/User/Preferences.sublime-settings\n\nAlso, I repeated the steps given in post 2 and the zip file does in fact contain the correct content.. There seems to be a problem with what's shown on the status bar:\nIn <repo_name> on b\", File is inserted, Line <line_number>, Column <column_number>\nIt's displaying b\" instead of the actual branch name.\nGit archive doesn't print any failure messages, and I'm using UTF-8 file encoding.\nAnother message that just popped up on the console is this, hopefully it might be of some help:\nindexing [job 986]: no files were indexed out of the 2 queued, abandoning crawl.\nThanks so much for your help!. @henhan's solution fixed it for me, thanks!. ",
    "bboru21": "This issue was resolved for me here:\nhttps://github.com/jisaacks/GitGutter/issues/381\nBasically add \"ignore_whitespace\": \"eol\" to your GitGutter.sublime-settings file.\n. ",
    "berginpanimayam": "I even tried reinstalling git and gitgutter but still have the issue. . ",
    "henhan": "I had exactly this issue, and just managed to solve it! Thanks for your suggestion to test other git plugins, that got me on the right path.\nTurned out that Sublime was using the git installation that is provided by Xcode, while I am using git from homebrew in my shell. Xcode was updated a few days ago, and I had not yet agreed the terms, which caused all git commands that sublime tried to run to show \"Agreeing to the Xcode/iOS license requires admin privileges, please re-run as root via sudo.\"\nI found two solutions, both solve the problem:\n1. Just agree the Xcode terms if you want to use that (older) version of git. (run sudo xcodebuild -license accept in terminal)\n2. Install the package \"Fix mac path\" to get Sublime to load the correct path that your shell will use, to get all Git plugins to use the same version that you do in your shell. (This obviously only goes for the case when you have two different git versions installed).. ",
    "okjill": "@henhan's solution worked like a charm. Thank you, this was driving me crazy! . ",
    "foxlance": "I experienced the same issue. I'm using a fresh install of Windows 10 and Git 2.12.2. All lines have the plus symbol. Looking at the console, I get:\nGitGutter: \"git rev-parse\" failed with \"[WinError 2] The system cannot find the file specified\"\nGitGutter: \"git ls-files\" failed with \"[WinError 2] The system cannot find the file specified\"\nGitGutter: \"git ls-files\" failed with \"[WinError 2] The system cannot find the file specified\"\nGitGutter: \"git rev-parse\" failed with \"[WinError 2] The system cannot find the file specified\"\nThe ignore_whitespace advice wasn't working for me. What worked for me was:\n// GitGutter Settings - User\n{\n   \"git_binary\": {\n        \"default\": \"\",\n        \"windows\": \"C:/Program Files/Git/cmd/git.exe\"\n    },\n}\nThis must be caused by a random option selected during install of git where I selected Use git only from git-bash (I think).. ",
    "ColdwindZhao": "i meet the same problem, solved by using\n\nGitGutter.sublime-settings  \"git_binary\": \"git\",. \n",
    "tigertooth01": "I am seeing this in Windows 10 machine. It was working fine on Friday, but when turned ON on Monday, this happens!? I am able to call \"git\" from CMD. It's working fine with SourceTree as well. How to debug this?. @deathaxe Yes, 1.7.1 fixed the issue. I'm not concerned about #74 just yet!. ",
    "zacurry": "@tigertooth01  I am having the same problem.Everything was working fine on friday. Please let me know if you find the solution!. @deathaxe I followed your 5 steps, and was able to get the full correct file as output. Any ideas ? Multiple users seem to be having this issue . I am on a windows 10 and using sourcetree.. ",
    "asantamar": "Same issue here as @tigertooth01 and @zacurry. Tried both with \"ignore_whitespace\": \"eol\" and \"git_binary\": \"git\" but the problem persists (all the files appear as if they were just inserted). I am running Ubuntu 16.04, and Sublime Text 3, build 3126 and I can run successfully \"git\" from the terminal. Any hints on this?. ",
    "tuanngominh": "I have suddenly have this issue today. Already tried with\n- Changing git_binary to git or to /usr/bin/git or remove that setting (My which git is /usr/bin/git)\n- Install SublimeFixMacPath package\n- run sudo xcodebuild -license accept in terminal\nI am on 10.11.6 OSX El Capitan\n\ngit --version\ngit version 2.7.4 (Apple Git-66)\n\nThe only issue I can think of is I have just updated my node version from v4 to v6. I install new node by download osx installation package then install it.\nSublime3 status bar\n\n. ",
    "tigran-muradyan": "Same issue on linux mint 18.1,\nit looks like the issue raised on after today automatic update of ST3 GitGutter plugin\nany idea how I can solve the issue?. ",
    "procoder317": "same issue in linux mint 18.1 for me also in sublime text today. ",
    "paleja": "installation of Gitignore plugin solved my problem\nedit: sorry, no. ",
    "jlanzarotti": "+1 on this... same issue on OSX 10.11.6 Sublime 3 3126. ",
    "TaoriYu": "same problem on ubuntu 14.04, ST3 build 3126\ntest.zip archive contains absolutely valid version of file, and there is no any error message at the st console while reinstalling GitGutter.. ",
    "protopropanol": "Same on ubuntu 16.04, ST3 build 3126\ntest.zip is OK, no console errors before or after reinstalling GitGutter.. ",
    "IvanAlegre": "From #416 @glennr pointed out that installing 1.6.0 fixes the problem, to do it:\nrm ~/Library/Application\\ Support/Sublime\\ Text\\ 3/Installed\\ Packages/GitGutter.sublime-package\ncd ~/Library/Application\\ Support/Sublime\\ Text\\ 3/Packages/\ngit clone --branch 1.6.0 git://github.com/jisaacks/GitGutter.git\nAnd in GitGutter options \"git_binary\": \"/usr/local/bin/git\"\nAdditionally I had to add GitGutter to ignored_packages, restart ST and then remove from ignored_packages (this is in User preferences in SublimeText). ",
    "arsenicum": "This is my output for GitGutter: Support Info:\n- Sublime Text 3126\n- Platform: linux\n- Arch: x64\n- GitGutter GitGutter version could not be acquired!\n- Install via PC: False\n- git version could not be acquired!\n- mdpopups 1.13.1\n- markdown 2.6.6\n- pygments 2.1a0\n- jinja2 2.8\nSeems like there is an error trying to find git and GitGutter. The checks for git and GitGutter are located  in the file modules/support.py. I think the problem is a wrong cwd parameter for subprocess.Popen - look at lines 14 and 29. Error logged to the console:\nGitGutter.sublime-package: [Errno 2] No such file or directory: '/home/arsenicum/.config/sublime-text-3/Packages/GitGutter.sublime-package'\nBut package installed with Package Control will have ~/.config/sublime-text-3/Installed Packages/ path.. ",
    "ozanhazer": "My console reports:\nGitGutter.sublime-package: resource not found\nGitGutter.sublime-package: [Errno 2] No such file or directory: '/Users/ozanhazer/Library/Application Support/Sublime Text 3/Packages/GitGutter.sublime-package'\n. ",
    "AiryShift": "@IvanAlegre In addition, #416 mentions upgrading git to v2.11 (and above) seems to have worked. I can confirm this to work on Fedora 25.. ",
    "fuumashirou": "What @arsenicum  said is the same thing that is happening to me. But I don't know how to solve it.\nEdit: I am a mac user . ",
    "carlosfrodriguez": "Same on me\nGitGutter.sublime-package: resource not found\nGitGutter.sublime-package: [Errno 2] No such file or directory: .... Version 1.7.1 works for me, thank you @deathaxe.. ",
    "ftuyama": "Same problem here - Ubuntu user\nUpdating git solved the issue. ",
    "Fauzyy": "I also ran into this for OSX 10.11.6 and ST 3\nUpdating git from 2.4.3 -> 2.13.0 fixed the issue.. ",
    "MohannadNaj": "as @tigran-muradyan mentioned, had the same issue after the latest automatic update of GitGutter.\nWindows 7- 64bit, ST3 Build 3126, Git 2.8.3.windows.1\nRemoving the package then re-install it, solved the issue for me.. ",
    "coolynx": "I have the same issue but with remark - it works partly. So, it may be a hint why it does not work for others. \ud83d\ude04 \nJust updated and tested everything (or almost) I found on this thread and still have the same issue.\n\n\nSublime Text 3126\nPlatform: osx\nArch: x64\nGitGutter 1.7.2\nInstall via PC: True\ngit version 2.13.2\nmdpopups 2.1.1\nmarkdown 2.6.6\npygments 2.1a0\njinja2 2.8\n\n\nHere is the hint.\nGitGutter works as expected on repositories where .git is inside the working tree and in cases where .git/ directory is outside the working tree it does not work.\nSo, is it possible to define worktree somewhere for gitgutter or give it a hint? . @deathaxe, I was not clear enough. Here is the way to reproduce the bug.\n```\ncd /home/user/whatever/tmp\ngit init\ncreates .git/ directory inside tmp\ngit add .\ngit commit -m \"initial commit\"\nsubl .\n```\nAnd we have a nicely working Sublime Text with GitGutter.\n```\nmove .git directory away\nmv .git ../\nvim ../.git/config\nadd path\nworktree = /home/user/whatever/tmp\nsubl .\n```\nNow we have a not working plugin were all files are newly added.\nAnd finally the issue is fixed (for me) when a file .git is created in worktree directory by pointing back to git-dir.\necho \"gitdir: $(git rev-parse --git-dir)\" > .git\nThanks to @deathaxe \ud83d\udc4d . ",
    "alariva": "A GitGutter reinstall fixed issue for me.\nSublimeText 3126\n16.04.1-Ubuntu SMP\ngit version 2.7.4. ",
    "jnovack": "This occurred after I installed bash_completion on my Mac (from source), and modified my .bashrc.  I'm not sure if it's related, just adding a data point.\nrm -rf ~/Library/Application\\ Support/Sublime\\ Text\\ 3/Packages/GitGutter/ and reinstalling via Package Control fixed it.. ",
    "redbar0n": "Having the same problem here, and I'm on OSX 10.9.5 Mavericks. It quite recently appeared, maybe a few weeks ago, maybe after an update. Here are my system stats, in case it might help debugging:\n\nSublime Text 3126\nPlatform: osx\nArch: x64\nGitGutter 1.7.4\nInstall via PC: True\ngit version 1.7.4.4\nmdpopups 2.1.1\nmarkdown 2.6.6\npygments 2.1a0\njinja2 2.8\n\nA reinstall didn't fix it for me.\nA curious thing is that the aforementioned 'GitGutter: Support Info' says:\ngit version 1.7.4.4\nBut running this in terminal gives:\n\u203a git --version\ngit version 2.4.5. Upgrading git solved the problem for me!\n\"GitGutter: Support Info\" now says:\n- git version 2.14.1\nAnd terminal says:\n\u203a git --version\ngit version 2.14.1. ",
    "willrowe": "Could there be a way to specify the setting as a single string instead of a list then?\nIt is a little confusing since it is structured as a list. I'd expect to set the entire thing in one string if I wanted to control the separator, but when setting it as a list I'd expect it to use a default separator.\nCurrently there is no straightforward way to have the first one optionally appear without a comma appearing at the beginning. . ",
    "rwols": "Yeah, it's also not a big deal for me. Just thought I'd point it out. I'll try to give a test case for my findings about the 1 commit failing too; maybe it was just in my mind.. You were right, it doesn't spit out exceptions when I have one commit.\nAnother thing I noticed: If I add a new file to the project, say b.txt, the console reports:\nGitGutter: 'git archive' failed with \"fatal: pathspec 'b.txt' did not match any files\"\nCan you perhaps make a sublime-settings options called \"debug\" which is false by default and if true in the User settings, prints this stuff to the console? As a user I'm not really interested in errors, as long as I see my colored gutter \ud83d\udcaf . Alright, then I'm satisfied and you can close this issue if you want \ud83d\udc4d . Hi @deathaxe, I just checked out this branch and it makes the exception disappear. Nice work!. ",
    "ooJerryLeeoo": "Yes, I want the line icons.. @r-stein Can you add the vertical line icon into this package?. So you mean you can add such vertical line icon?. I was thinking about create my own git gutter theme, but my image editing skill is terrible.. @deathaxe Thanks for helping, I think I'll just use the default git gutter theme, I don't have time to learn and create my own git gutter theme.. ",
    "hedgesky": "Thank you for a quick response!\nI've made some changes according to your requests.\nAbout commit message: it was a Gitlab-generated merge commit with message like this:\nMerge branch 'foo' into 'develop'\\r \\r Update style\\r \\r\\x07refs/heads/develop\\x1asdj12398asd23\nwhere \\r is a carriage return symbol. When I tried to amend this commit, the issue was gone. . ",
    "septagram": "I also think that if you'd choose not to conditionally choose whether to use new Git features or not (and thus whether to maintain the code interacting with an old Git version), it'd be reasonable if GitGutter could somehow at least inform the user they have an old version.\nBut generally, I'm in favor of the change.. Oh my... Restarting helped. I'm terribly sorry. Thanks, and even more thanks for GitGutter, it's the best ^_^. @r-stein Might it be possible to watch for the updates and force reload of GitGutter?. ",
    "cwpetrich": "\nmy git version is 2.9.0.windows.1.\nI set \"debug\": true in GitGutter.sublime-settings.\nThe only message for GitGutter in the console is as follows:\n    GitGutter: \"git diff\" failed with \"fatal: invalid diff option/value: --indent-heuristic\"\nStatus bar says:\n    In MyRepository on MyBranch, File is commited, ...\nBut the file is not committed and there are several changes that are not yet staged.\nThere is no GitGutter.sublime-package in either location.. \n",
    "bgrrtt": "Awesome! Thanks guys!. ",
    "slifin": "Hovering on the line number and not moving the mouse produces the same result, the tooltip flickers open for a split second then closes, the icon never used to be that size so I've assumed it's all related but that might not be the case, and there's nothing that occurs in the Sublime Text console. yeah it shows and then immediately hides when triggering from command palette too, where should I look to find events.py?. It does in a relatively small file, in a different file that is larger (755 lines) it opens momentarily and then closes. yes, it's just the icons that are tiny but the popup works as expected if I hover over the line number in the small file. \nLooks a bit better still a bit off though, do you think there's something causing all pop ups to close in certain files in my installation?. Yes I meant the recent sublime text dev update, I'm using 3131 on macos. Looks like the interfering plugin is sublimelinter they have recently introduced a opt in tooltip \nhere are the related settings in the sublime linter settings: \n\"tooltip_fontsize\": \"1rem\",\n\"tooltip_theme\": \"Packages/SublimeLinter/tooltip-themes/Default/Default.tooltip-theme\",\n\"tooltip_theme_excludes\": [],\n\"tooltips\": true,\ntooltips will control whether sublimelinter tries to generate a tooltip, when it is enabled then gitgutter's tooltip opens and closes too fast to be useable\nStill can't figure out why my icons are off centre though. The icons still appear off centre with dpi_scale 1.0 \n\n. ",
    "rcherny": "From my experience this quit working when SublimeLinter added their tooltip pop-ups for errors/warnings, etc. When I disable their setting for tooltips, the GitGutter tooltips work fine.\nWhen I turn them back on, it quits working again immediately.\nThe size of the icons don't seem to have an impact for me, personally. So I'm seeing exactly what @slifin noted above: https://github.com/jisaacks/GitGutter/issues/407#issuecomment-300099900. Guess you guys already noted as much with SublimeLinter. Sorry for the noise.. Ok in an attempt to provide something of value: \nhttps://github.com/SublimeLinter/SublimeLinter3/issues/565\nAnd it looks like they've got a PR pending.. ",
    "JemarJones": "Yea i don't know what caused this, but had the same issue and restarting helped. \ud83d\udc4d . ",
    "jayzyaj": "Hi I am having the same error. I restarted my sublime but still didn't work for me.\nBtw I am having this error in my console below\n\nGitGutter: \"git --version\" failed with \"[WinError 193] %1 is not a valid Win32 application\"\n\nAppreciate if someone can help.\nThanks in advance.. @deathaxe I installed Git via scoop in powershell. So this is my user settings in my GitGutter.\n// GitGutter Settings - User\n{\n    \"debug\": true,\n    \"git_binary\": \"C:/Users/Jaaayz/scoop/shims/git.exe\"\n}\nthis is the directory of my git. But still wont work.. Well it worked for me now using that directory. Thanks a lot! Appreciated it so much for the effort you gave!. ",
    "nskazki": "@zachleigh I have the same issue. Fix just for now:\nbash\ncd ~/.config/sublime-text-3/Packages\ngit clone --branch 1.6.0 git://github.com/jisaacks/GitGutter.git\nAlso, I first uninstall GitGutter via package manager, but I'm not sure if this is really required.\ngit version 2.7.4\nGNU bash, version 4.3.48(1)-release (x86_64-pc-linux-gnu)\nSublime Text Build 3126\nUbuntu 16.04. ",
    "zachleigh": "@nskazki Thanks for that. Seems to be back to normal.. ",
    "ehansen486": "Thank you, this has been driving me crazy the last half hour!. ",
    "Soulsbane": "Same problem here.. Upgrading git to 2.13.0 fixed my issue. Used this PPA\nCommands for those interested:\nsudo add-apt-repository ppa:git-core/ppa\nsudo apt-get update\nsudo apt-get install git. ",
    "vdwees": "Same problem here.\nSublime Text version 3126\nUbuntu 16.04. ",
    "leongaban": "I still get this problem, nskazki's fix did not work for me :( Also I don't have that folder. I installed the older package into my application support folder.. ",
    "glennr": "This worked for me (on OSX)\nI manually removed the installed (latest) package, then downgraded using @nskazki 's method, but with a different (default) folder\nrm ~/Library/Application\\ Support/Sublime\\ Text\\ 3/Installed\\ Packages/GitGutter.sublime-package\ncd ~/Library/Application Support/Sublime\\ Text\\ 3/Packages/\ngit clone --branch 1.6.0 git://github.com/jisaacks/GitGutter.git\nEDIT - prefixed paths with ~/\n. Yeah - sorry - updated my example to use the correct paths relative to $HOME. ",
    "taufnrsyd": "@glennr doesn't work for me, it's still showing the green plus icon. Does Sublime Text force update the package?\nSublime Text build 3126\nOS X 10.12.5. Oh my bad, I was cloning to Installed Packages instead of Packages directory. @glennr's solution works for OSX. Thanks!. ",
    "pixilation": "I tracked this issue down to commit 4a95320.\nThis commit started using the git command git cat-file --filters.\nHowever the --filters argument wasn't added until git v2.11.0 (https://github.com/git/git/commit/b9e62f60115c75c5be5de593862925c8b8d7e683)\nI upgraded git from v1.9.5 to v2.13.0 and this issue went away.. ",
    "yoonwaiyan": "For my OSX Yosemite, @glennr 's or @pixilation 's solution doesn't work when using either of it separately, but after both upgrading my git from 2.8 to 2.13 AND re-installed GitGutter it worked. \nIn case anyone wants to copy and paste @glennr 's solution, Sublime packages are stored in home directory's Library/Application Support.. ",
    "shivi74": "@Soulsbane Worked. Thanks!. ",
    "agungyuliaji": "thanks @Soulsbane , upgrading git worked!!!!\nalso for macosx, need add this configuration on GitGutter config :\n{\n  \"git_binary\": \"/usr/local/bin/git\"\n}\nsince i use git from brew\ndefault is => \"git_binary\": \"/usr/bin/git\". in my case (MacOSx machine), after update simply do force close the sublime (the icon changed), then start again, and its works. ",
    "ArtemBernatskyy": "Same issue !!! I was able to sove it only by upgrading git.. ",
    "yoavmmn": "@r-stein is right. version 2.11 isn't available yet for Fedora 25 through the official repos and I guess that's the same on other distros.. ",
    "stratakis": "Fedora users can upgrade git to 2.11 through this (unofficial) repository:\nhttps://copr.fedorainfracloud.org/coprs/churchyard/git/. ",
    "nils-m": "Holy moses thanks @nskazki\nOn debian Jessie v. 2.11 is in testing. I prefer downgrading gitgutter for now\nAnd waiting for a fix !. ",
    "lombervid": "@Soulsbane Worked for me too. Thanks!! :+1: . ",
    "chubatov": "@nskazki It's work ). Thanks!. ",
    "fcpauldiaz": "upgrading git didn't worked for me.. ",
    "madyaneka": "It works! Thank you @Soulsbane :) . ",
    "gfauredumont": "Same issue here.\nSorry for maintainer(s) but I'm going for the GitGutter downgrade (thanks @nskazki !) instead of manually upgrading to a new major version of Git on the spot: feels safer ;)\nSublime Text version 3126\nMint 18.1. ",
    "clefebvre": "@deathaxe testing git master with git 2.7.4 here (Mint 18.x) and gitgutter is working fine :). ",
    "StefNijenhuis": "Same here, opened an existing project and all the already committed work was marked as new.\nInfo\nSublime Text 3126\nUbuntu 14.04 x64\nGit version: 1.9.1\nGitGutter version, latest I assume\nInstalled via PC: true\nOther packages:\nBracketHighlighter version 2.24.1\nSublimeLinter. Cheers!. ",
    "IsmailM": "Thanks for the prompt reply \ud83d\udc4d \nI ran them in sublime\u2019s console:\n```python\n\n\n\nsublime.load_settings('Preferences.sublime-settings').get('mdpopups.sublime_user_lang_map', {})\nfrom mdpopups.st_mapping import lang_map; lang_map\n{'c': (('c',), ('C++/C',)), 'd': (('d',), ('D/D',)), 'objective-c': (('objective-c', 'objectivec', 'obj-c', 'objc'), ('Objective-C/Objective-C',)), 'diff': (('diff',), ('Diff/Diff',)), 'objective-c++': (('objective-c++', 'objectivec++', 'obj-c++', 'objc++'), ('Objective-C/Objective-C++',)), 'php': (('php', 'php3', 'php4', 'php5'), ('PHP/PHP',)), 's': (('splus', 's', 'r'), ('R/R',)), 'ocaml': (('ocaml',), ('OCaml/OCaml',)), 'matlab': (('matlab', 'octave'), ('Matlab/Matlab',)), 'applescript': (('applescript',), ('AppleScript/AppleScript',)), 'textile': (('textile',), ('Textile/Textile',)), 'clojure': (('clojure', 'clj'), ('Clojure/Clojure',)), 'batch': (('batch', 'bat', 'dosbatch', 'winbatch'), ('Batch File/Batch File',)), 'ruby': (('rb', 'ruby'), ('Ruby/Ruby',)), 'cmake': (('cmake',), ('CMake/CMake',)), 'erlang': (('erlang',), ('Erlang/Erlang',)), 'pascal': (('delphi', 'pas', 'pascal', 'objectpascal'), ('Pascal/Pascal',)), 'scala': (('scala',), ('Scala/Scala',)), 'c#': (('csharp', 'c#'), ('C#/C#',)), 'railsjs': (('js+erb', 'javascript+erb', 'js+ruby', 'javascript+ruby'), ('Rails/JavaScript (Rails)',)), 'tcl': (('tcl',), ('TCL/Tcl',)), 'perl': (('perl', 'pl'), ('Perl/Perl', 'ModernPerl/ModernPerl')), 'xml': (('xml',), ('XML/XML',)), 'java': (('java',), ('Java/Java',)), 'lua': (('lua',), ('Lua/Lua',)), 'html': (('html',), ('HTML/HTML',)), 'markdown': (('markdown', 'md'), ('Markdown/Markdown',)), 'regex': (('regex', 'regexp'), ('Regular Expressions/RegExp',)), 'go': (('go',), ('Go/Go',)), 'css': (('css',), ('CSS/CSS',)), 'yaml': (('yaml',), ('YAML/YAML',)), 'actionscript': (('as', 'actionscript'), ('ActionScript/ActionScript',)), 'haskell': (('haskell', 'hs'), ('Haskell/Haskell',)), 'jsp': (('jsp',), ('Java/Java Server Pages (JSP)',)), 'rst': (('rst', 'rest', 'restructuredtext'), ('RestructuredText/reStructuredText',)), 'groovy': (('groovy',), ('Groovy/Groovy',)), 'json': (('json',), ('JavaScript/JSON', 'JavaScriptNext - ES6 Syntax/JSON (JavaScriptNext)')), 'railshtml': (('rhtml', 'html+erb', 'html+ruby'), ('Rails/HTML (Rails)',)), 'c++': (('c++', 'cpp'), ('C++/C++',)), 'tex': (('tex', 'latex'), ('LaTeX/LaTeX',)), 'python': (('python', 'py'), ('Python/Python', 'MagicPython/grammars/MagicPython')), 'sql': (('sql',), ('SQL/SQL',)), 'lisp': (('common-lisp', 'cl', 'lisp', 'emacs', 'elisp'), ('Lisp/Lisp',)), 'text': (('text',), ('Text/Plain text',)), 'asp': (('asp',), ('ASP/ASP',)), 'javascript': (('javascript', 'js'), ('JavaScript/JavaScript', 'JavaScriptNext - ES6 Syntax/JavaScriptNext')), 'makefile': (('makefile', 'make', 'mf', 'bsdmake'), ('Makefile/Makefile',)), 'bash': (('bash', 'sh', 'ksh', 'shell'), ('ShellScript/Shell-Unix-Generic',))}\n. nothing like that in my user preference ([see here](https://gist.github.com/IsmailM/f44a0ea2c61b3a3118035a1f220a37ff)). In Sublime's Console:python\nprint(sublime.load_settings('Preferences.sublime-settings').get('mdpopups.sublime_user_lang_map', {}))\nNone\n```\n\n\n\nJust realized that the popup was working where there was no diff - i.e when adding a few blank lines\nNevertheless, adding \"mdpopups.sublime_user_lang_map\": {}, to the user preferences fixed the issue \ud83d\udc4d \nMany thanks for your prompt help with this matter\n. ",
    "logig": "Got it !\n```\n// GitGutter Settings - User\n{\n    \"compare_against\": \"\"\n}\n```\nJust set \"compare_against\" to empty, it is strongly recommended to make this default.. I don't know, I just feel it like a \"git diff xxx\" command in git-bash. But this do not work fully, I have to reopen the file or it will not work. @deathaxe . ",
    "yuki1318": "Yes, I do.\nI use ConvertToUTF8 for shift_jis to utf-8.\n\n\n\nview.encoding()\n'UTF-8'\n\n\n\nSource code encoding is shift_jis.\nWhat should I do\uff1f\n. >>> view.settings().get('origin_encoding')\n'Shift_JIS'\nGitGutter ver 1.4.0 was working with encoding for shift jis, But after 1.5.0 has stopped working\nPlease tell me the solution strategy.. Thank you for being kind enough to explain\n\n\nStupid question from someone not dealing with eastern languages too often:\nWhy do you use a local (lagecy) file encoding to store files in a git repository? From my point of view ALL files on each computer should use utf-8 or utf-16 nowadays. If you would setup git to store files using utf-8, everything would work fine.\n\n\nI think so, too. But there are some problems, Older projects are made with shiftjis and compilers is not support utf-8. So I need to use shift_jis.\n\n\n1.Which Sublime Text version do you use? (You can also use GitGutter: Support Info from command pallet)\n- Sublime Text 3126\n- Platform: windows\n- Arch: x64\n- GitGutter 586dc0c\n- Install via PC: False\n- git version 2.10.1.windows.1\n- mdpopups 2.0.0\n- markdown 2.6.6\n- pygments 2.1a0\n- jinja2 2.8\n2.Can you create a little repository on github with a source/text file encoded in Shift_JIS which I could pull and use for debugging?\n\n\nOK.\nI create it. (https://github.com/yuki1318/TestRepos)\n. It worked after updating to 3136.\nThank you very much!!\n. ",
    "cmalard": "Looks like this is possible on ST3 with file icon :-)\nNot sure there is a way to do it in the \"open files\" zone, but that's still a start :+1:. Well... you're almost right :+1:\n\nCurrently Sublime Text requires syntax definitions to apply icons. This means that you need to have the right syntax package to be able to see icons associated with the language. However we can abuse syntax definitions in order to provide different icons to files with the same underlying syntax but different semantics (Gulpfile.js, package.json & etc.).\nhttps://github.com/ihodev/a-file-icon/blob/develop/.github/CONTRIBUTING.md#settings\n\nNot so sure we can do it, how far can we abuse syntax definitions ? :thinking: . ",
    "bradharms": "I discovered that this was caused by issues on my work station and is probably not relevant to GitGutter.. None of the stated scenarios apply to my situation. The preference options mentioned are true, I'm just using normal views on normal version-controlled source code files in my project. Not using ConvertToUTF8.\nI don't know how Sublime manages plugins, but I looked at the Sublime Text process tree and saw a sub-process called \"plugin_host\", with another \"git\" sub-process running inside of that. No matter how long I waited, that sub-process would never end and my repo stayed in a locked state (due to the presence of .git/index.lock). This suggested that Git itself was stuck on something and it was causing a Sublime plugin to be stuck waiting on it. I resolved the issue on my system that was causing Git to hang, which immediately resolved the issue I was having with GitGutter.. I disabled every plugin related to git except for git gutter and restarted\nsublime text. Immediately I did indeed see improvements, and the git\nsubprocess stopped hanging. The culprit seems to be GitStatusBar.\nOn Fri, Jul 28, 2017, 11:47 AM deathaxe notifications@github.com wrote:\n\nplugin_host is running the python VM with all the ST packages. All\nexternal processes such as git are called by python's subprocess module\nand will block the whole plugin_host during execution. GitGutter uses a\ntimeout of 30s to wait for git to complete before killing it. It is the way\nof executing external processes suggested by python 3 docs.\nAre there other packages present, which may have been calling git\nconcurrently? Or is GitGutter the only one?\n\u2014\nYou are receiving this because you modified the open/close state.\nReply to this email directly, view it on GitHub\nhttps://github.com/jisaacks/GitGutter/issues/428#issuecomment-318704704,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ABLoBBjG0GiAHRmiRGWULy2Mc8pl3265ks5sShC0gaJpZM4OfnDY\n.\n. When the process was hanging, the repo was locked. Can there be multiple\ninstances running in this case?\n\nOn Fri, Jul 28, 2017, 12:15 PM deathaxe notifications@github.com wrote:\n\nIt also runs git process on an event driven base, which might cause\nseveral instances being started at the same time, trying to read from same\ndatabase. I already tried running several git instances in parallel threads\nfor several views in the past, too, without such issues (on Windows).\nFrom my point of view git must be able to handle such situations. I guess\nthis is something none of the ST packages can handle somehow.\n\u2014\nYou are receiving this because you modified the open/close state.\nReply to this email directly, view it on GitHub\nhttps://github.com/jisaacks/GitGutter/issues/428#issuecomment-318711498,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ABLoBCiSZppJPgXVrfwibTqNLm2PVcjzks5sShcqgaJpZM4OfnDY\n.\n. \n",
    "facelessuser": "I'll explain how highlight works for mdpopups.  It puts the code in a hidden output panel and let's Sublime highlight it, and then uses logic to look at the scope of the text it is pulling out to pull colors from the color scheme file and construct the HTML accordingly.\nThe other part is as @deathaxe points out, you have to tell it what syntax to highlight with, and the obvious choice is to see what the global syntax for the current view is.\nMdpopups has a mapping of aliases to actual syntax files to use: https://github.com/facelessuser/sublime-markdown-popups/blob/master/st3/mdpopups/st_mapping.py.   So basically you reverse this process, using the views syntax, to get a valid alias.\nIf you copy the snippet you want highlighted into a new view and activate the sources global syntax, you'll see that it doesn't get highlighted because PHP can't just highlight a class method without context of the class, and possibly the <?php.\nSo snippets of code can be difficult to get fully highlighted without enough of the code's context.  The only way to do something like this is to render a full valid snippet and extract a sub portion of it for display.  This is what my other plugin ExportHtml does to render any snippet from your fully render code file.  But with mdpopups, you are just sending it portions without the other context, so it's ability is limited by what you give it.\nI don't know what GitGutter is doing in the picture above, but speaking generally about diffs.  If I wanted to show a hunk from the diff (base or current rev), I would most likely need to render the base and current rev in hidden outputs, and use the diff to determine which hunks to grab from those fully rendered files.  Only then could you always have full color renders of diff hunks.  But there is a price to pay.  For each snippet, you have to render the full file, both if you want to show from both previous and current.\nAnyways, what I describe would need to be specially built as mdpopups just wants to take snippets.  It is possible to get what is desired for a cost, and I don't know if that cost wants to be paid in this plugin.  If I've misunderstood what is desired, apologies.. Mdpopups uses ExportHTML plugin logic that has been modified and stripped down to do specifically what is needed for mdpopups.  This is of course only used when Pygments support is not enabled.\nThe code is here https://github.com/facelessuser/sublime-markdown-popups/blob/master/st3/mdpopups/st_code_highlight.py.\nYou can see some functions could take the current output panel selection and return HTML for only that https://github.com/facelessuser/sublime-markdown-popups/blob/master/st3/mdpopups/st_code_highlight.py#L63, but we currently ignore selections.  Selections would probably make the most sense as whole lines.\nI've obviously de-emphasized Pygments in recent releases, but I still support it.  This kind of logic would have to be abstracted to sort of work in Pygments.  Most likely to strip out the lines of interest and pass it through normally and if it doesn't highlight, oh well.\nSo it is possible to add this ability to feed in full text and return only HTML for a subsection, but the way mdpopups works though, it would not retain the full text after render because that is not it's purpose.  It is possible that maybe another command could be created where you feed it a view with line numbers, and mdpopups could extract specific lines from it and return HTML for only those lines.  The plugin (GitGutter in this case) would manage the output buffers, while mdpopups would use it's logic to extract the text.\npy\nmdpopups.syntax_highlight_from_view(view, language, lines, **otheroptions). As far as mdpopups is concerned, I can see the benefit of being able to load up a whole view once and grab content from it multiple times.  I could see BracketHighlighter for instance using it to render partials via it's bracket hover feature, and it could do it with the current view (though it would be tricky to also emphasize the bracket, so I don't know if I'd actually do that).\nGitGutter doesn't have to create a buffer for each view in the window, GitGutter could easily use just one buffer for the window if that was its desire.  How GitGutter chooses to use syntax_highlight_from_view isn't really a concern for me, only that it can be applied for its use case.\nThinking about this more, it's possible that I could even provide an option to apply a special class for specified regions to highlight or emphasize certain regions. The plugin dev would manage their buffer(s) and  calculate the regions for conversion and for emphasis.\nNow, not specifying by lines would be most problematic for Pygments, and in that case, their milage for rendering will greatly vary when specifying portions of a line, but as stated earlier, I am deemphasizing Pygments as I feel the ST highlighting is quite a bit more flexible for use in plugins.  Pygments is no longer the default anymore.. > You want to provide the ability to use the active view as source for highlighting instead of a hidden panel?\nNo, I am thinking about providing the ability to use a view, not specifically active view.  My example was only that, a practical example.  It could be active, it could not be active, it could be a hidden view, it doesn't matter.  They could manage their own view buffer or use an exiting one (without having to create one).  That's key; they don't have to create a new view if an open one is already available that suits their needs.\n\nWhat about a scenario with more than one package using this feature? In the end we might have 5 or 10 hidden output panels which all might more or less contain the content of the active view?\n\nThen they should point at the active view. They don't have to reference hidden output panels, or create a view at all. Also, output panels can be destroyed via destroy_output_panel.  They don't have to be left open forever.\nWith all of that said, I am open to creating a flow that encourages good habits, but also allows people the flexibility to do what's necessary when needed.  Yes people can abuse the plugin in special cases, but that can be said about all programming.\nI think in most cases, people don't need a persistent panel, and if they do, it would be temporary.\nI am open to suggestions as, right now, I am just brain storming and haven't committed to anything.. Also, keep in mind, I am approaching this as how can I generally solve issues like this, not specifically how to I solve GitGutter's issue.. Cool, I've created an issue linked to this one.  I'll probably prototype this feature on a feature branch with some of the ideas here and see how it turns out.. This is completely doable and I already have some working tests, but I just haven't had the time to clean it up yet and prepare a release.\nGitGutter will have to see if they can implement it in a performance friendly way, but there are plenty of applications for the requested feature which are quite reasonable and performance friendly outside of GitGutter.  For instance, this feature is going to useful for BracketHighlighter offscreen bracket popups as we will be able to use the existing view's highlighted code to show snippets of code containing offscreen brackets.  Performance should be quite reasonable.\nIf it turns out implementing this in GitGutter is not a good idea due to performance, then that is fine.  But, regardless, I think this is a useful discussion as this will help in other plugins, but hopefully GitGutter might get something out of this as well.. Yeah, there was some recent fixes with the new parse logic. It's likey you picked those up and that's why your issue went away.. ",
    "arxpw": "Appears to be a false positive.\nCheers, I'll close this. ",
    "myessail": "I think there was a problem with one of my other packages. I uninstalled and reinstalled them and the problem has gone away. Thanks!. ",
    "pts-sergiomartins": "Yes I've restarted the editor. I've had this problem for a few days before posting.\nThere's nothing really in sublime's concole (except a lot of noise from other plugins): https://pastebin.com/FS2MRLht. I encourage you leave #435 for 1.7.5. I really miss GitGutter :). Thank you good sir.. ",
    "svenmuennich": "I'm experiencing the same issue on macOS.. \ud83d\udc4d . ",
    "cdloh": "Hmm a further restart or two of Sublime Text appears to have fixed this. Not sure what's going on.. ",
    "igorescobar": "After removing the plugin SublimeFixMacPath it started to work again.. ",
    "jfessard": "I managed to get it to work by removing the package (sublime text became non responsive and I killed it), reinstalling it (it was in the list of packages for me) and restarting Sublime text 2 or 3 times. Same for my colleague.\nInstalled via apt-get, stable branch.. ",
    "tombusby": "interesting, I'll look into it.. Got it working. Thanks guys.. ",
    "ybentz": "I'm on the latest macOS, didn't have GitGutter in the list of packages, managed to get it to work by going to /Users/{username}/Library/Application\\ Support/Sublime\\ Text\\ 3/Installed\\ Packages, deleting GitGutter.sublime-package and then restarting Sublime. Once it reopened the gitgutter change log opened and it's working again. Hope it helps.. ",
    "lexilya": "I just hit the \"Upgrade/Overwrite all packages\" option, then restarted Sublime, and it worked again. A simple restart didn't work on its own. On MacOS btw.. ",
    "fskhalsa": "Steps that worked for me:\n\nremove package via package control (sublime text became non-responsive and I killed it, same as @jfessard )\nremove gitgutter and package_control_loader from ignored_packages in user settings (no idea how those got there - but they weren't there before ST updated)\nreinstall gitgutter via package control (will now work, as gitgutter and package control's own package loader aren't being ignored)\nyou might need to restart a few times\n\nNo idea why the ST upgrade did that, but it had me baffled for a while...\n. ",
    "jsieler": "Still not working on windows. I'm using portable version of ST3.\nDid all the steps mentioned here, installed and reinstalled GitGutter multiple times, removed all stuff from \"cache\" folder. Restarted multiple times. Still nothing.\nI don't see any \"package_control_loader\" within installed packages. \"package_control_loader\" and \"GitGutter\" are not within ignored setting.. ",
    "aarohmankad": "For me, GitGutter works fine, but I'm having to enable it for every file I open.\nI'm also on build 3143. ",
    "jemhuntr": "GitGutter stopped working for me too. Sublime Text 3143, running on Windows 10. Have fixed the issue with the package control loader being added to the ignored packages.\nThere are no options that disable GitGutter (Packages/User/GitGutter.sublime-settings nor Packages/User/Preferences.sublime-settings).\nWhen I type view.settings().get(\"git_gutter_enable\") on the console, it doesn't output anything.. Nevermind, I didn't see this error before, but apparently GitGutter just wasn't able to find my git binary. Everything's working fine now.. ",
    "frsnic": "I had fix it. When I listen @deathaxe suggestion add \"debug\": true to the GitGutter.sublime-settings \nI find this in console.\nGitGutter: \"git --version\" failed with \"Agreeing to the Xcode/iOS license requires admin privileges, please run \u201csudo xcodebuild -license\u201d and then retry this command.\"\nGitGutter: git is back on duty!\nAnd I open my xcode and agree the license, I can use GitGutter right now.\n. ",
    "khink": "For me (on Mac OSX), deathaxe's comment about git_gutter_enable made it work: \n```\n\n\n\nview.settings().get(\"git_gutter_enable\")\n```\n\n\n\n(Edit: before that, i checked that git worked form the command line, that git_binary was set properly, and that fskhalsa's comment https://github.com/jisaacks/GitGutter/issues/444#issuecomment-329561109 didn't help me.)\nAfter setting it to true in /Users/$USER/Library/Application\\ Support/Sublime\\ Text\\ 3//Packages/User/GitGutter.sublime-setting and restarting, it worked.. ",
    "maxis1718": "Reinstalling package and then GitGutter: Enable/Disable works for me. ",
    "SCdF": "\nIf you then press any key or maybe even click with the mouse somewhere a repaint is requested\n\nRight, clicking with the mouse works too, specifically inside the editor frame. If you click a different editor frame it will open up the quick panel in that frame.\n\nIs this issue related to the specific built or does it exist with earlier builts as well?\n\nIt's been around for awhile honestly. I could install it via git instead of PC and revert tags until it works properly. I can do that in a bit.\n\nI wrote another package \"Skins\" which calls the show_quick_panal() asynchronously. Could you check, whether it behaves the same way?\n\nSkins works fine (cool package btw).. Wow OK.\nSo:\n - Installing it via git works for master and the most recent tag. Note that you do this by putting the code in ~/Library/Application Support/Sublime Text 3/Packages/Gitgutter\n - Installing it via PC does not work off the bat: it exhibits the issue. Note that at this stage there is no code in ~/Library/Application Support/Sublime Text 3/Packages/Gitgutter. I don't know much about ST internals, but I guess it's zipped up and held somewhere else.\n - If you use Package Resource Viewer to extract the package, the code is now available in ~/Library/Application Support/Sublime Text 3/Packages\n/Gitgutter, and the package now works correctly.\nSo, if it's extracted to the Packages dir it works fine, if it's wherever ST packages are kept internally it doesn't work.\nI'm unable to test different tags and also have the code in ST's internal location, unless you know how to install old versions through ST (or, you know where I can dump a zip or something).. Using the key binding or directly running the command works, yep.\nSo, I disabled all my other packages, and it works now.\nHowever, as I'm re-enabling packages I am having trouble finding a root cause. It doesn't seem to be a specific package. In fact, I've managed to get it into a situation where branches and commits always has the bug, but commits works fine.\nSo I'm wondering if packages are stomping over each other somehow, and it's related to the order they get loaded in? It's very confusing. If extracted packages get initialised first that would explain why that makes it work.. Right, so something is clobbering something of yours, but if it's extracted that doesn't happen because it gets loaded after other packages.\nYeah this is wonky af. I've seen it different over restarts with the same packages. I've seen it fail the first time, then work fine after that. I've seen it work for some commands and not others.\nIf you want you could try installing https://packagecontrol.io/packages/xpath . This seems to be one package that has some effect. However, enabling just PC, gitgutter and xpath works by itself, so it's not a complete minimal case.\nIf this is a ST bug it's not a new one. I tried dev builds back to Feb 2015 (3071) and it's still a problem (side note: wow is config not backwards compatible\u2026).\nPerhaps it's a PC bug? \nIf you're interested, here is my entire package control user settings (ie all my installed packages):\njson\n{\n    \"bootstrapped\": true,\n    \"in_process_packages\":\n    [\n    ],\n    \"installed_packages\":\n    [\n        \"ASCII Decorator\",\n        \"BetterFindBuffer\",\n        \"BracketHighlighter\",\n        \"Case Conversion\",\n        \"Clipboard Diff\",\n        \"Comments Aware Enter\",\n        \"DevDocs\",\n        \"DocBlockr\",\n        \"Dockerfile Syntax Highlighting\",\n        \"EDN\",\n        \"FontCycler\",\n        \"Git Config\",\n        \"GitGutter\",\n        \"Hyperion for gettext\",\n        \"Indent XML\",\n        \"Insert Nums\",\n        \"InsertDate\",\n        \"Jai\",\n        \"JsFormat\",\n        \"LessImproved\",\n        \"Markdown Preview\",\n        \"MarkdownEditing\",\n        \"Maybs Quit\",\n        \"MoveTab\",\n        \"NeoVintageous\",\n        \"open-sesame\",\n        \"Origami\",\n        \"Package Control\",\n        \"PackageResourceViewer\",\n        \"PlainTasks\",\n        \"PostgreSQL Syntax Highlighting\",\n        \"Rust Enhanced\",\n        \"Sass\",\n        \"SideBarEnhancements\",\n        \"Six\",\n        \"SqlBeautifier\",\n        \"sublime-github\",\n        \"SublimeGit\",\n        \"SublimeLinter\",\n        \"SublimeLinter-contrib-htmllint\",\n        \"SublimeLinter-jshint\",\n        \"SublimeREPL\",\n        \"Swift\",\n        \"SyncedSideBar\",\n        \"TabsExtra\",\n        \"Terminal\",\n        \"TodoReview\",\n        \"TOML\",\n        \"TypeScript\",\n        \"xpath\"\n    ],\n    \"repositories\":\n    [\n    ]\n}\nAnd here is what I have ignored:\njson\n    \"ignored_packages\":\n    [\n        \"DocBlockr\",\n        \"Markdown\",\n        \"Six\",\n        \"TypeScript\",\n        \"Vintage\",\n        \"Vintageous\"\n    ],\nIf I set my ignore packages to:\njson\n    \"ignored_packages\":\n    [\n    \"DocBlockr\",\n    \"Markdown\",\n    \"PackageResourceViewer\",\n    \"PlainTasks\",\n    \"PostgreSQL Syntax Highlighting\",\n    \"Rust Enhanced\",\n    \"Sass\",\n    \"SideBarEnhancements\",\n    \"Six\",\n    \"SqlBeautifier\",\n    \"sublime-github\",\n    \"SublimeGit\",\n    \"SublimeLinter\",\n    \"SublimeLinter-contrib-htmllint\",\n    \"SublimeLinter-jshint\",\n    \"SublimeREPL\",\n    \"Swift\",\n    \"SyncedSideBar\",\n    \"TabsExtra\",\n    \"Terminal\",\n    \"TodoReview\",\n    \"TOML\",\n    \"TypeScript\",\n    \"Vintage\",\n    \"Vintageous\",\n    \"xpath\"\n    ],\nThen it works consistently. And if I enable xpath (by commenting it out from this list) then it fails consistently.\nBut it's not just the xpath package. If I combine my standard small ignore list with also ignoring xpath there are still problems.\nAlso, this is almost certainly complicated by my packages directory, because this changes the initialisation order:\nscdf at SCdF in ~/Library/Application Support/Sublime Text 3/Packages\n$ ll\ntotal 8\ndrwxr-xr-x  18 scdf  staff   612  2 Feb  2017 ASCII Decorator\ndrwxr-xr-x  18 scdf  staff   612  1 Sep 15:00 BetterFindBuffer\ndrwxr-xr-x   3 scdf  staff   102 15 Sep 14:53 Default\ndrwxr-xr-x  13 scdf  staff   442 27 Feb  2017 DevDocs\ndrwxr-xr-x  12 scdf  staff   408  2 Feb  2017 PackageResourceViewer\ndrwxr-xr-x  44 scdf  staff  1496  7 Aug 17:27 PlainTasks\ndrwxr-xr-x  24 scdf  staff   816 20 Aug 21:56 Six\ndrwxr-xr-x  32 scdf  staff  1088 12 Apr 13:21 SublimeLinter\ndrwxr-xr-x  33 scdf  staff  1122  2 Feb  2017 SublimeREPL\ndrwxr-xr-x  25 scdf  staff   850  1 Sep 11:01 Terminal\ndrwxr-xr-x  17 scdf  staff   578  1 Aug 17:35 TodoReview\ndrwxr-xr-x  40 scdf  staff  1360 18 Apr 09:36 TypeScript\nlrwxr-xr-x   1 scdf  staff    37  2 Feb  2017 User -> /Users/scdf/Dropbox/Apps/Sublime/User\ndrwxr-xr-x   9 scdf  staff   306 23 Mar 21:38 backrefs\ndrwxr-xr-x   7 scdf  staff   238  1 Aug 18:36 dateutil\ndrwxr-xr-x  10 scdf  staff   340 15 Sep 12:01 lxml\ndrwxr-xr-x   7 scdf  staff   238 12 Apr 14:11 markupsafe\ndrwxr-xr-x  14 scdf  staff   476  3 Aug 11:02 mdpopups\ndrwxr-xr-x   6 scdf  staff   204 16 Feb  2017 pygments\ndrwxr-xr-x   6 scdf  staff   204 16 Feb  2017 python-jinja2\ndrwxr-xr-x   6 scdf  staff   204 15 Sep 12:01 python-markdown\ndrwxr-xr-x   7 scdf  staff   238 27 Apr 13:02 pytz\ndrwxr-xr-x   6 scdf  staff   204 16 Feb  2017 pyyaml\ndrwxr-xr-x  11 scdf  staff   374  9 Jul 16:49 shellenv\ndrwxr-xr-x   3 scdf  staff   102  2 Jun 10:42 sublime-github\nIt's all kinds of crazy.. So I reset my packages folder, it's now just dependencies and a link to my user settings.\nI've gone through each package, including restarts, and I've whittled it down to this:\n```json\n    [\n        \"DocBlockr\",\n        \"Markdown\",\n        \"Six\",\n        \"TypeScript\",\n        \"Vintage\",\n        \"Vintageous\",\n    \"PackageResourceViewer\",\n    \"PlainTasks\",\n    \"Rust Enhanced\",\n    \"SublimeGit\",\n    \"TOML\", // If enabled, sometimes works and sometimes doesn't, same session\n    \"xpath\"\n],\n\n```\nThe first half is what I always have disabled, and the second half are problematic packages.\nIf I invert this so that only packages I have enabled are Gitgutter, PC, and the 6 packages in the second half, I can reproduce the issue.. I think it's time to get the package control people / sublime involved (cc. @wbond). There are lots of weird variations here.\nOut of:\n\"PackageResourceViewer\",\n\"PlainTasks\",\n\"Rust Enhanced\",\n\"SublimeGit\",\n\"TOML\",\n\"xpath\"\nIf only they (and the standard stuff) is disabled then then the issue doesn't occur.\nIf I disabled EVERYTHING (except PC and GG) and enable them top to bottom, the issue only occurs once I hit xpath.\nIf I disabled EVERYTHING (except PC and GG) and enable them bottom to top, the issue only occurs once I hit sublimegit.\nIn other words, I can enable xpath and toml without causing a problem, but if I enable everything else except xpath it works until I enable xpath.\nI'm going to head out now, but yeah I have no idea. There isn't much more I can do, though if you want me to try things I'm happy to. Sounds very much like it's a problem external to your package specifically though, and is some issue with Sublime / PC.. Hey @wbond, unfortunately my path does not change if I change my configuration between one that works and one that doesn't.\nFor reference, my current path is:\n['/Applications/Sublime Text.app/Contents/MacOS', '/Applications/Sublime Text.app/Contents/MacOS/python3.3.zip', '/Users/scdf/Library/Application Support/Sublime Text 3/Lib/python3.3', '/Users/scdf/Library/Application Support/Sublime Text 3/Packages', '/Users/scdf/Library/Application Support/Sublime Text 3/Packages/pygments/all', '/Users/scdf/Library/Application Support/Sublime Text 3/Packages/lxml/st3_osx_x64', '/Users/scdf/Library/Application Support/Sublime Text 3/Packages/shellenv/all', '/Users/scdf/Library/Application Support/Sublime Text 3/Packages/backrefs/st3', '/Users/scdf/Library/Application Support/Sublime Text 3/Packages/dateutil/all', '/Users/scdf/Library/Application Support/Sublime Text 3/Packages/markupsafe/all', '/Users/scdf/Library/Application Support/Sublime Text 3/Packages/python-markdown/st3', '/Users/scdf/Library/Application Support/Sublime Text 3/Packages/pytz/all', '/Users/scdf/Library/Application Support/Sublime Text 3/Packages/pyyaml/st3', '/Users/scdf/Library/Application Support/Sublime Text 3/Packages/python-jinja2/all', '/Users/scdf/Library/Application Support/Sublime Text 3/Packages/mdpopups/st3']\nThis is from the \"If I disabled EVERYTHING (except PC and GG) and enable them bottom to top, the issue only occurs once I hit sublimegit.\" use case, and doesn't change once I hit sublimegit, including between restarts.. I would be delighted!\nUnfortunately it doesn't look like it's a paint issue: the console log message does not appear straight away, and is blocked just like the panel is behind me hitting another key / clicking.\nI have no idea if this matters, because it's not clear where it's coming from, but I often get this kind of things in the console:\ntop level value must be an array\nindexing: crawldb not available, indexing abandoned\nI haven't noticed it impacting anything obviously though, and it's around whether this bug presents or not, but I thought I'd mention it.. @deathaxe this now works for me both extracted out to the Packages directory, and as an Installed Package. Nice job!. ",
    "Monokai": "Done!. ",
    "joernhees": "ok, closed ST, moved ~/Library/Application Support/Sublime Text 3 dir out of the way, restarted, installed PC, installed GitGutter, closed ST and restarted, same result (but agreeably much less frequent):\n \nnot knowing anything about how ST draws the gutter icons, but is there maybe some race condition / timeout?\nAs i said, i'm quite sure that this only happens since the latest ST release, did they maybe change something there?. if i do that ST completely freezes shortly after i try scrolling in the file\nafter force-quit, it works, but GitGutter seems to be disabled... (i don't see any gutter icons, in console there's no loading message for the plugin and all options in Preferences / Package Settings / GitGutter are greyed out)\nI also noticed that the dependencies in ~/Library/ApplicationSupport/Sublime Text 3/Packages/ are suddenly gone?!?. ok, did some more testing by re-installing git gutter via PC, then unzipping the above link into <subl>/Packages/, renaming the folder to GitGutter and deleting the <subl>/Installed Packages/GitGutter.sublime-package and restarting ST... this time it comes up, GitGutter is working, but the bug remains (gutter icons disappear on scroll).\nIs this maybe a ST bug? maybe https://forum.sublimetext.com/t/bug-disappear-icons-in-the-gutter-and-the-tabs-row/5957 ? quite old though. yepp, same problem... completely vanilla ST dir, opened the debug_regions.py file from within it, paste the code but add newlines so the file is 600 lines long. Then view.run_command(\"debug_add_regions\") and scroll ;) Can you reproduce this or is it just on my system?\nno clue how to take this upstream to ST though :-/. problem actually also already exists with 50 lines if you make the window small and scoll fast enough... the more lines the easier though.... \ud83d\udc4d thanks for debugging this.... ",
    "jathanasiou": "Graphics generation is a non-trivial task for the average user (in spite of them being developers) and this issue is probably applicable to others users too.  \n\nthemes can be created by everybody and may be contained in any package\n\nBy that logic any enhancement issue is pointless, so I'm not sure what the point is.. I understand.\nOn this point\n\nI tried different widths of bars and found thicker ones looking quite odd. Maybe a theme with the bars aligned centered would be a better solution?\n\nGiven the screenshots, it seems that width is, indeed, not the issue and possibly not the solution either, but rather how adjacent scrollbars overlap with these icons, possibly due to ST3's layout. Center-alignment or even right-alignment offer a better experience.\nI will try and fiddle to see if I can alter the alignment and if it is a nice alternative.. ",
    "taqtiqa-mark": "Apologies for the delay.  I hadn't added/changed any mdpopups settings - I was pretty sure... until I browsed to Preferences>Settings: There I do see:\n{\n    \"color_scheme\": \"Packages/Solarized Color Scheme/Solarized (light).tmTheme\",\n    \"draw_white_space\": \"all\",\n    \"ignored_packages\":\n    [\n        \"Vintage\"\n    ],\n    \"mdpopups.sublime_user_lang_map\": null,\n    \"mdpopups.use_sublime_highlighter\": null,\n    \"rulers\":\n    [\n        80\n    ],\n    \"tab_size\": 2,\n    \"translate_tabs_to_spaces\": true\n}\nWhat values should they be?\nApologies if I missed the instructions in readme, etc.\n. Thanks.. ",
    "adamdavidcole": "Did some more digging: seems like a bad interaction between GitGutter and SublimeLinter when the tooltips setting is true. \nNot sure what is feasible here, but would be great to see these two popular packages working well together.\n\ud83d\ude47 . ",
    "xxxlee": "\nWhy???. startup, version: 3143 osx x64 channel: stable\nexecutable: /Applications/Sublime Text.app/Contents/MacOS/Sublime Text\nworking dir: /\npackages path: /Users/lee/Library/Application Support/Sublime Text 3/Packages\nstate path: /Users/lee/Library/Application Support/Sublime Text 3/Local\nzip path: /Applications/Sublime Text.app/Contents/MacOS/Packages\nzip path: /Users/lee/Library/Application Support/Sublime Text 3/Installed Packages\nignored_packages: [\"Vintage\"]\nErrors parsing theme:\nicon_file_type is missing layer0.opacity, setting to 1.0 for backwards compatibility\npre session restore time: 0.683255\nstartup time: 0.731757\nreloading plugin Default.auto_indent_tag\nreloading plugin Default.block\nreloading plugin Default.comment\nreloading plugin Default.convert_syntax\nreloading plugin Default.copy_path\nreloading plugin Default.delete_word\nreloading plugin Default.detect_indentation\nreloading plugin Default.duplicate_line\nreloading plugin Default.echo\nreloading plugin Default.exec\nreloading plugin Default.fold\nreloading plugin Default.font\nreloading plugin Default.goto_line\nreloading plugin Default.history_list\nreloading plugin Default.indentation\nreloading plugin Default.install_package_control\nreloading plugin Default.kill_ring\nreloading plugin Default.mark\nreloading plugin Default.new_templates\nreloading plugin Default.open_context_url\nreloading plugin Default.open_in_browser\nreloading plugin Default.pane\nreloading plugin Default.paragraph\nreloading plugin Default.paste_from_history\nreloading plugin Default.profile\nreloading plugin Default.quick_panel\nreloading plugin Default.run_syntax_tests\nreloading plugin Default.save_on_focus_lost\nreloading plugin Default.scroll\nreloading plugin Default.set_unsaved_view_name\nreloading plugin Default.settings\nreloading plugin Default.show_scope_name\nreloading plugin Default.side_bar\nreloading plugin Default.sort\nreloading plugin Default.swap_line\nreloading plugin Default.switch_file\nreloading plugin Default.symbol\nreloading plugin Default.transform\nreloading plugin Default.transpose\nreloading plugin Default.trim_trailing_white_space\nreloading plugin Default.ui\nreloading plugin CSS.css_completions\nreloading plugin Diff.diff\nreloading plugin HTML.encode_html_entities\nreloading plugin HTML.html_completions\nreloading plugin 0_package_control_loader.00-package_control\nreloading plugin 0_package_control_loader.01-pygments\nreloading plugin 0_package_control_loader.50-backrefs\nreloading plugin 0_package_control_loader.50-markupsafe\nreloading plugin 0_package_control_loader.50-pymdownx\nreloading plugin 0_package_control_loader.50-python-markdown\nreloading plugin 0_package_control_loader.50-pyyaml\nreloading plugin 0_package_control_loader.51-python-jinja2\nreloading plugin 0_package_control_loader.55-mdpopups\nreloading plugin A File Icon.A File Icon\nreloading plugin AutoFileName.autofilename\nreloading plugin AutoFileName.getimageinfo\nreloading plugin BracketHighlighter.bh_core\nreloading plugin BracketHighlighter.bh_logging\nreloading plugin BracketHighlighter.bh_plugin\nreloading plugin BracketHighlighter.bh_popup\nreloading plugin BracketHighlighter.bh_regions\nreloading plugin BracketHighlighter.bh_remove\nreloading plugin BracketHighlighter.bh_rules\nreloading plugin BracketHighlighter.bh_search\nreloading plugin BracketHighlighter.bh_swapping\nreloading plugin BracketHighlighter.bh_wrapping\nreloading plugin BracketHighlighter.support\nreloading plugin ChineseLocalizations.Localization\nreloading plugin Git.git_commands\nreloading plugin GitGutter.plugin\nreloading plugin Material Theme.Icons\nreloading plugin Material Theme.MT\nreloading plugin Package Control.1_reloader\nreloading plugin Package Control.2_bootstrap\nreloading plugin Package Control.Package Control\nreloading plugin SideBarEnhancements.SideBar\nreloading plugin SideBarEnhancements.SideBarAPI\nreloading plugin SideBarEnhancements.SideBarDefaultDisable\nreloading plugin SublimeLinter-pep8.linter\nSublimeLinter: pep8 linter loaded \nreloading plugin Anaconda.anaconda\nreloading plugin Anaconda.setup\nreloading plugin Anaconda.version\nreloading plugin Python PEP8 Autoformat.pep8_autoformat\nIncluded directory to sys.path : ['/Users/lee/Library/Application Support/Sublime Text 3/Packages/Python PEP8 Autoformat/libs', '/Users/lee/Library/Application Support/Sublime Text 3/Packages/Python PEP8 Autoformat/libs/py33']\nreloading plugin SublimeLinter.commands\nreloading plugin SublimeLinter.sublimelinter\nreloading plugin SublimeREPL.init\nreloading plugin SublimeREPL.completions\nreloading plugin SublimeREPL.lang_integration\nreloading plugin SublimeREPL.run_existing_command\nreloading plugin SublimeREPL.sublimerepl\nreloading plugin SublimeREPL.sublimerepl_build_system_hack\nreloading plugin SublimeREPL.text_transfer\nplugins loaded\nSublimeLinter: debug mode: off \nenvironment variables loaded using: /bin/bash -l\nPackage Control: Skipping automatic upgrade, last run at 2017-10-14 21:22:05, next run at 2017-10-14 22:22:05 or after\nSublimeLinter: pep8 activated:  . LeedeMacBook-Air:test lee$ git init\nInitialized empty Git repository in /Users/lee/test/.git/\nLeedeMacBook-Air:test lee$ ls -a\n./                .git/             2.py\n../               1.html            HelloWorld.class\n.DS_Store         1.py              HelloWorld.java\nLeedeMacBook-Air:test lee$ git status\nOn branch master\nInitial commit\nUntracked files:\n  (use \"git add ...\" to include in what will be committed)\n.DS_Store\n1.html\n1.py\n2.py\nHelloWorld.class\nHelloWorld.java\n\nnothing added to commit but untracked files present (use \"git add\" to track)\nLeedeMacBook-Air:test lee$ git config --add core.worktree /users/lee/test\nLeedeMacBook-Air:test lee$ echo \"gitdir: $(git rev-parse --git-dir)\" > .git\n-bash: .git: Is a directory\nLeedeMacBook-Air:test lee$ \n. LeedeMacBook-Air:.git lee$ git add .\nLeedeMacBook-Air:.git lee$ echo \"gitdir: $(git rev-parse --git-dir)\" > .git\nLeedeMacBook-Air:.git lee$ ls\n. \n????. vim .git\ngitdir: /user/lee/test/.git         ????\ngit status\nfatal: Not a git repository: /user/lee/test/.git\n.  do not need you to explain the git principle, you just need to tell me what's going to do next?\nNow I created the .git folder with the (git init) in the / Users / lee / test folder, and I created the .git file in the .git folder (git add.).\nNow what should I do and give me the actual steps.\n.git file should i edit? The The The The\nNO.1 ...\nNO.2 ...\nNO.3 ...\nI know that they need to be linked, but what exactly should I do?\nI just learned programming, I do not understand git.\nAlso this is through Google Translate.. I learned the knowledge of the next git, found the original so simple. I thought that your plugin was compared with the last saved version. Now I know and git library version to do comparison. I did not learn git before I was confused by your words. I thought it was the reason here.\n\nDid not learn git with this plugin, really will be confused.\nThank you very much!. ",
    "jeffbyrnes": "@deathaxe hmm. Just restarted Sublime, same thing. Attaching a screenshot.\n\n. Oh, great! Closing in favor of that issue.. ",
    "MustafaHaddara": "Can confirm this is fixed in 1.7.8, thanks! . ",
    "dingo-d": "Is there any way of knowing what is causing the issue, bar disabling packages one by one until I see the changes?. I tried searching for those css files but couldn't find them. I looked in the Library/Application Support/Sublime Text 3 but couldn't find anything.... I am getting this:\n```sh\nmdpopups: Failed to get Sublime highlighter object!\nmdpopups: Traceback (most recent call last):\n  File \"/Users/infinum/Library/Application Support/Sublime Text 3/Packages/mdpopups/st3/mdpopups/init.py\", line 155, in _get_sublime_highlighter\n    obj = SublimeHighlight(scheme)\n  File \"/Users/infinum/Library/Application Support/Sublime Text 3/Packages/mdpopups/st3/mdpopups/st_code_highlight.py\", line 52, in init\n    self.csm = ColorSchemeMatcher(scheme)\n  File \"/Users/infinum/Library/Application Support/Sublime Text 3/Packages/mdpopups/st3/mdpopups/st_color_scheme_matcher.py\", line 347, in init\n    self.merge_overrides()\n  File \"/Users/infinum/Library/Application Support/Sublime Text 3/Packages/mdpopups/st3/mdpopups/st_color_scheme_matcher.py\", line 453, in parse_scheme\n    name = item.get('name', '')\n  File \"/Users/infinum/Library/Application Support/Sublime Text 3/Packages/mdpopups/st3/mdpopups/st_color_scheme_matcher.py\", line 173, in translate_color\n    if m is not None:\nAttributeError: 'NoneType' object has no attribute 'groupdict'\nmdpopups: Failed to highlight code!\nmdpopups: Traceback (most recent call last):\n  File \"/Users/infinum/Library/Application Support/Sublime Text 3/Packages/mdpopups/st3/mdpopups/init.py\", line 522, in syntax_highlight\n    code = highlighter.syntax_highlight(\nAttributeError: 'NoneType' object has no attribute 'syntax_highlight'\nmdpopups: Failed to convert/retrieve scheme to CSS!\nmdpopups: Traceback (most recent call last):\n  File \"/Users/infinum/Library/Application Support/Sublime Text 3/Packages/mdpopups/st3/mdpopups/init.py\", line 187, in _get_scheme\n    obj = SchemeTemplate(scheme)\n  File \"/Users/infinum/Library/Application Support/Sublime Text 3/Packages/mdpopups/st3/mdpopups/st_scheme_template.py\", line 71, in init\n    self.setup()\n  File \"/Users/infinum/Library/Application Support/Sublime Text 3/Packages/mdpopups/st3/mdpopups/st_scheme_template.py\", line 178, in setup\n    self.legacy_parse_global()\n  File \"/Users/infinum/Library/Application Support/Sublime Text 3/Packages/mdpopups/st3/mdpopups/st_scheme_template.py\", line 104, in legacy_parse_global\n    self.csm = ColorSchemeMatcher(self.scheme_file)\n  File \"/Users/infinum/Library/Application Support/Sublime Text 3/Packages/mdpopups/st3/mdpopups/st_color_scheme_matcher.py\", line 347, in init\n    self.merge_overrides()\n  File \"/Users/infinum/Library/Application Support/Sublime Text 3/Packages/mdpopups/st3/mdpopups/st_color_scheme_matcher.py\", line 453, in parse_scheme\n    name = item.get('name', '')\n  File \"/Users/infinum/Library/Application Support/Sublime Text 3/Packages/mdpopups/st3/mdpopups/st_color_scheme_matcher.py\", line 173, in translate_color\n    if m is not None:\nAttributeError: 'NoneType' object has no attribute 'groupdict'\nmdpopups: =====CSS=====\nmdpopups: \nmdpopups: =====HTML OUTPUT=====\nmdpopups: \n\u00d7 \u2912 \u2191 \u2193 \u2248 \u2398 \u27f2let isSearchLoading = false; // This should be added along with the stopping button.\nmdpopups: Failed to get Sublime highlighter object!\nmdpopups: Traceback (most recent call last):\n  File \"/Users/infinum/Library/Application Support/Sublime Text 3/Packages/mdpopups/st3/mdpopups/init.py\", line 155, in _get_sublime_highlighter\n    obj = SublimeHighlight(scheme)\n  File \"/Users/infinum/Library/Application Support/Sublime Text 3/Packages/mdpopups/st3/mdpopups/st_code_highlight.py\", line 52, in init\n    self.csm = ColorSchemeMatcher(scheme)\n  File \"/Users/infinum/Library/Application Support/Sublime Text 3/Packages/mdpopups/st3/mdpopups/st_color_scheme_matcher.py\", line 347, in init\n    self.merge_overrides()\n  File \"/Users/infinum/Library/Application Support/Sublime Text 3/Packages/mdpopups/st3/mdpopups/st_color_scheme_matcher.py\", line 453, in parse_scheme\n    name = item.get('name', '')\n  File \"/Users/infinum/Library/Application Support/Sublime Text 3/Packages/mdpopups/st3/mdpopups/st_color_scheme_matcher.py\", line 173, in translate_color\n    if m is not None:\nAttributeError: 'NoneType' object has no attribute 'groupdict'\nmdpopups: Failed to highlight code!\nmdpopups: Traceback (most recent call last):\n  File \"/Users/infinum/Library/Application Support/Sublime Text 3/Packages/mdpopups/st3/mdpopups/init.py\", line 522, in syntax_highlight\n    code = highlighter.syntax_highlight(\nAttributeError: 'NoneType' object has no attribute 'syntax_highlight'\nmdpopups: Failed to convert/retrieve scheme to CSS!\nmdpopups: Traceback (most recent call last):\n  File \"/Users/infinum/Library/Application Support/Sublime Text 3/Packages/mdpopups/st3/mdpopups/init.py\", line 187, in _get_scheme\n    obj = SchemeTemplate(scheme)\n  File \"/Users/infinum/Library/Application Support/Sublime Text 3/Packages/mdpopups/st3/mdpopups/st_scheme_template.py\", line 71, in init\n    self.setup()\n  File \"/Users/infinum/Library/Application Support/Sublime Text 3/Packages/mdpopups/st3/mdpopups/st_scheme_template.py\", line 178, in setup\n    self.legacy_parse_global()\n  File \"/Users/infinum/Library/Application Support/Sublime Text 3/Packages/mdpopups/st3/mdpopups/st_scheme_template.py\", line 104, in legacy_parse_global\n    self.csm = ColorSchemeMatcher(self.scheme_file)\n  File \"/Users/infinum/Library/Application Support/Sublime Text 3/Packages/mdpopups/st3/mdpopups/st_color_scheme_matcher.py\", line 347, in init\n    self.merge_overrides()\n  File \"/Users/infinum/Library/Application Support/Sublime Text 3/Packages/mdpopups/st3/mdpopups/st_color_scheme_matcher.py\", line 453, in parse_scheme\n    name = item.get('name', '')\n  File \"/Users/infinum/Library/Application Support/Sublime Text 3/Packages/mdpopups/st3/mdpopups/st_color_scheme_matcher.py\", line 173, in translate_color\n    if m is not None:\nAttributeError: 'NoneType' object has no attribute 'groupdict'\nmdpopups: =====CSS=====\nmdpopups: \nmdpopups: =====HTML OUTPUT=====\nmdpopups: \n\u00d7 \u2912 \u2191 \u2193 \u2248 \u2398 \u27f2let isSearchLoading = false; // This should be added along with the stopping button.\n```\nFrom what I can tell the relevant issue is mdpopups: Failed to convert/retrieve scheme to CSS!\nI am using material theme as a skin, but they have gutter theme available, and it worked fine with it before.. Could be that. I checked today and it seems like the issue was gone. Thanks for the help.. ",
    "towingie": "found in prev issue about no way to fix that ((. ",
    "rivy": "Unfortunately, I'm not sure how far back the option goes, and I'm not sure how to best research it.\nFor a first pass... looking at the online documentation, the \"-c\" option is present for all versions back to version 2.0.4, released in July 2014 (see https://git-scm.com/docs/git/2.0.4).\nIf that's insufficient, I'm not sure where to look next.. Further Wikipedia searching, combined with some educated guesses about git online documentation URLs, leads me to believe that the option was introduced within version 1.7. The option is not in version 1.7.0, but is in version 1.7.12.4. So, it was introduced somewhere in the 1.7.0 - 1.7.12.4 range, released in the Feb-2010 to Oct-2012 time frame (according to Wikipedia).\nThat's my current best answer.\nref: https://en.wikipedia.org/wiki/Git#Releases\nref: https://git-scm.com/docs/git/1.7.0\nref: https://git-scm.com/docs/git/1.7.12.4. ",
    "Drakim": "Huh... that's bizarre. I can still use those files just fine in vanilla git, I tested just now by editing one, staging it and committing. Whatever I broke somehow doesn't bother git itself.\nDo you know if there is some sort of \"scan and repair\" command built into git, or do I need to start a new repo entirely?\n. I'll just bite the bullet and redo the repo from the ground up, I only had a few commits anyways.\nThanks very much for the help, GitGutter is amazing!. For anybody who encounters this problem in the future, I discovered that the issue was caused by a mismatch in uppercase/lowercase between the repo and history.\nGit had the folder stored as \"PRG\" while the actual folder was \"prg\". Windows is insensitive to file & folder case, which git kinda tries to work around normally.. ",
    "mikeyww": "I think that's the problem-- not a git repository! Thanks for thinking of that. I will uninstall!. ",
    "andyneff": "That would be a nice idea. Why aren't any of these cleaned up? Wasn't this fixed in the past already? #284 #247 \nSame problem here running Fedora 27 and Sublime 3 3143. ",
    "3v1n0": "\nTherefore I am wondering whether it was a better idea to place temporary files into ST's Data/Cache/GitGutter folder, which would solve both issues.\n\nI don't think this is not the best solution even. I think such files in unix should be placed in $XDG_CACHE_HOME or (better, since it's cleaned at each full-logout) in $XDG_RUNTIME_DIR.. ",
    "aminimalanimal": "Troubleshooting Attempts\nI installed Fix Mac Path. There are no changes. The dependency is still not found.\nI extracted all dependencies off of my previous laptop and manually added them into the ~/Library/Application Support/Sublime Text 3/Packages folder and reran Package Control to install GitGutter\nThis allowed GitGutter to be successfully installed and shows when I List Packages. However, when I open Sublime Text 3, the console still outputs the following:\nPackage Control: Installing 5 missing dependencies\nPackage Control: The dependency 'pymdownx' is not available\nPackage Control: The dependency 'mdpopups' is not available\nPackage Control: The dependency 'python-markdown' is not available\nPackage Control: The dependency 'pygments' is not available\nPackage Control: The dependency 'pyyaml' is not available\nAll of these are in my Packages folder. GitGutter is not highlighting changes.\nI attempted to run GitGutter: Support Info, but it does not exist in my Command Palette.\nWhen I restart Sublime Text, this is the full console output:\nstartup, version: 3143 osx x64 channel: stable\nexecutable: /Applications/Sublime Text.app/Contents/MacOS/Sublime Text\nworking dir: /\npackages path: /Users/me/Library/Application Support/Sublime Text 3/Packages\nstate path: /Users/me/Library/Application Support/Sublime Text 3/Local\nzip path: /Applications/Sublime Text.app/Contents/MacOS/Packages\nzip path: /Users/me/Library/Application Support/Sublime Text 3/Installed Packages\nignored_packages: [\"Vintage\"]\npre session restore time: 0.18879\nusing gpu buffer for window\nstartup time: 0.310497\nreloading plugin Default.auto_indent_tag\nreloading plugin Default.block\nreloading plugin Default.comment\nreloading plugin Default.convert_syntax\nreloading plugin Default.copy_path\nreloading plugin Default.delete_word\nreloading plugin Default.detect_indentation\nreloading plugin Default.duplicate_line\nreloading plugin Default.echo\nreloading plugin Default.exec\nreloading plugin Default.fold\nreloading plugin Default.font\nreloading plugin Default.goto_line\nreloading plugin Default.history_list\nreloading plugin Default.indentation\nreloading plugin Default.install_package_control\nreloading plugin Default.kill_ring\nreloading plugin Default.mark\nreloading plugin Default.new_templates\nreloading plugin Default.open_context_url\nreloading plugin Default.open_in_browser\nreloading plugin Default.pane\nreloading plugin Default.paragraph\nreloading plugin Default.paste_from_history\nreloading plugin Default.profile\nreloading plugin Default.quick_panel\nreloading plugin Default.run_syntax_tests\nreloading plugin Default.save_on_focus_lost\nreloading plugin Default.scroll\nreloading plugin Default.set_unsaved_view_name\nreloading plugin Default.settings\nreloading plugin Default.show_scope_name\nreloading plugin Default.side_bar\nreloading plugin Default.sort\nreloading plugin Default.swap_line\nreloading plugin Default.switch_file\nreloading plugin Default.symbol\nreloading plugin Default.transform\nreloading plugin Default.transpose\nreloading plugin Default.trim_trailing_white_space\nreloading plugin Default.ui\nreloading plugin CSS.css_completions\nreloading plugin Diff.diff\nreloading plugin HTML.encode_html_entities\nreloading plugin HTML.html_completions\nreloading plugin 0_package_control_loader.00-package_control\nreloading plugin 0_package_control_loader.50-markupsafe\nreloading plugin 0_package_control_loader.51-python-jinja2\nreloading plugin Fix Mac Path.FixPath\nreloading plugin Git.git_commands\nreloading plugin GitGutter.plugin\nTraceback (most recent call last):\n  File \"/Applications/Sublime Text.app/Contents/MacOS/sublime_plugin.py\", line 109, in reload_plugin\n    m = importlib.import_module(modulename)\n  File \"./python3.3/importlib/__init__.py\", line 90, in import_module\n  File \"<frozen importlib._bootstrap>\", line 1584, in _gcd_import\n  File \"<frozen importlib._bootstrap>\", line 1565, in _find_and_load\n  File \"<frozen importlib._bootstrap>\", line 1532, in _find_and_load_unlocked\n  File \"/Applications/Sublime Text.app/Contents/MacOS/sublime_plugin.py\", line 915, in load_module\n    exec(compile(source, source_path, 'exec'), mod.__dict__)\n  File \"plugin in /Users/me/Library/Application Support/Sublime Text 3/Installed Packages/GitGutter.sublime-package\", line 9, in <module>\n  File \"<frozen importlib._bootstrap>\", line 1565, in _find_and_load\n  File \"<frozen importlib._bootstrap>\", line 1532, in _find_and_load_unlocked\n  File \"/Applications/Sublime Text.app/Contents/MacOS/sublime_plugin.py\", line 915, in load_module\n    exec(compile(source, source_path, 'exec'), mod.__dict__)\n  File \"modules in /Users/me/Library/Application Support/Sublime Text 3/Installed Packages/GitGutter.sublime-package\", line 8, in <module>\n  File \"<frozen importlib._bootstrap>\", line 1565, in _find_and_load\n  File \"<frozen importlib._bootstrap>\", line 1532, in _find_and_load_unlocked\n  File \"/Applications/Sublime Text.app/Contents/MacOS/sublime_plugin.py\", line 915, in load_module\n    exec(compile(source, source_path, 'exec'), mod.__dict__)\n  File \"modules.commands in /Users/me/Library/Application Support/Sublime Text 3/Installed Packages/GitGutter.sublime-package\", line 12, in <module>\n  File \"<frozen importlib._bootstrap>\", line 1565, in _find_and_load\n  File \"<frozen importlib._bootstrap>\", line 1532, in _find_and_load_unlocked\n  File \"/Applications/Sublime Text.app/Contents/MacOS/sublime_plugin.py\", line 915, in load_module\n    exec(compile(source, source_path, 'exec'), mod.__dict__)\n  File \"modules.popup in /Users/me/Library/Application Support/Sublime Text 3/Installed Packages/GitGutter.sublime-package\", line 10, in <module>\nAttributeError: 'module' object has no attribute 'version'\nreloading plugin Package Control.1_reloader\nreloading plugin Package Control.2_bootstrap\nreloading plugin Package Control.Package Control\nreloading plugin SublimeLinter-contrib-sass-lint.linter\nSublimeLinter: sass linter loaded \nreloading plugin SublimeLinter-eslint.linter\nSublimeLinter: eslint linter loaded \nreloading plugin SublimeLinter.commands\nreloading plugin SublimeLinter.sublimelinter\nplugins loaded\nenvironment variables loaded using: /bin/bash -l\nPackage Control: Installing 5 missing dependencies\nPackage Control: The dependency 'pymdownx' is not available\nPackage Control: The dependency 'python-markdown' is not available\nPackage Control: The dependency 'mdpopups' is not available\nPackage Control: The dependency 'pyyaml' is not available\nPackage Control: The dependency 'pygments' is not available\nPackage Control: Skipping automatic upgrade, last run at 2018-02-23 11:41:29, next run at 2018-02-23 12:41:29 or after. @r-stein Ohhhh! Makes sense.\nSo, this isn't an issue with GitGutter\u2014it's an issue with Package Control's ability to interface with GitHub now that GitHub has dropped support for an older cryptography method.\nI think it's best to leave this issue open until that's resolved so that people see it when they come here and don't open new ones. Fingers crossed Package Control is fixed soon.. I was able to successfully install GitGutter today. Seems that package control was fixed. Closing now.. ",
    "asyncb": "-- working on solution --. ",
    "zttodd": "I am also experiencing this issue when attempting to install GitGutter using Package Control on a fresh install of Sublime Text 3 build 3143, on Ubuntu 16.04. Here is the console output after attempting the package install:\nignored packages updated to: [\"GitGutter\", \"Vintage\"]\nreloading settings Packages/User/Package Control.sublime-settings\nreloading settings Packages/User/Preferences.sublime-settings\nreloading settings Packages/User/Preferences.sublime-settings\nPackage Control: The dependency 'mdpopups' is not currently installed; installing...\nPackage Control: The dependency 'mdpopups' is not available\nPackage Control: The dependency 'mdpopups' could not be installed or updated\nignored packages updated to: [\"Vintage\"]\nreloading settings Packages/User/Package Control.sublime-settings\nreloading settings Packages/User/Preferences.sublime-settings. ",
    "it6": "I am also experiencing the same issue\nPackage Control: The dependency 'markupsafe' has successfully been installed or updated\nPackage Control: The dependency 'mdpopups' is not currently installed; installing...\nPackage Control: The dependency 'mdpopups' is not available\nPackage Control: The dependency 'mdpopups' could not be installed or updated. ",
    "mstx1": "I'm not certain that it is related, but it might be... I noticed on a fresh nix install, and also on osx fresh installs of everything (just in the past days) that Package Control when looking in the repositories can not find \"SublimeLinter\" (the base package, it just doesn't even exist in the list although it says in the ST console: URL: https://packagecontrol.io/channel_v3.json)\nAll the plugins of \"SublimeLinter-*\" I can see, but not the base package itself. Other system which had installed the plugins quite some time ago is fine.\nI see Package Control: The dependency 'pygments' is not available, tried installing it via pip as well, but it wouldn't let me install the package \"BracketHighlighter\". . ",
    "tablatronix": "Ill check that out, I am assuming it will not cross branch compare so it will blame the working branch, which is not as helpful though.. Yeah thats the thing, I was manually comparing across branches, then blaming the compare against file:line to get the commit of that change ( usually latest was good enough ), then looking at that entire commit with all the change in context, and decide if I could cherry pick it. So even getting just the commit for that line in the compare might be good enough.\nI started thinking, I could do alot more I could just get the commit of this change right in front of me.\nIs there a feature discussion on adding callouts? user callouts might be cool with tokens for %filename %line etc.\nI would not implement this entire feature inline, or use another plugin, I would just add a blame button to the popup itself and have it either show in the popup the info, or always blame and show it in the popup at the bottom footer style or something.\n( better if it could link to github, but that is a use case specific request, other svn users would not benefit )\nJust the output of git blame, is good, but why would it need to be another popup ??\n. Still not sure I see the problem, what do you mean \"change the line\" ?\nThe gutter already shows the change, the popup already exists, I want the blame on the compare against source , not the current file.. I don't want to blame line 34. I want to blame the line that shows a change, and blame the other line...\nIf that makes any sense.\nI guess ill make a gif or mockup\nI guess this only makes sense on changes, not deletions or insertions. ah, Ok I should qualify that then\nBlame the current line/change in the diff source, to get the commit of that diff in the source, source being the compare against source, which may depend on context of source (branch, commit, origin) for blame capability, but most should work.\n. Not sure this is even possible, now that I think about it...\nGit blame probably only works on working tree..\ndoh,\nEDIT , you can!. Yeah I think that sounds about right.\n\nThis is just an example. hmm, yeah I was trying to figure that out also, was thinking maybe it used work tree when <rev> was provided..  . I agree default on popup is a bit annoying, it would be better if it was inside the actual gitgutter dialog popups also.\nEDIT, ooh line annotation supports templates! that IS cool.\n. I would make 2 changes\nwell 3\n\n[ ] disable line annotation by default in stable releases\n[ ] add annotation to diff popup option ( somewhere in the popup, titlebar, or a footer maybe ), ( so it can be hidden always unless you inquire in popup, less obtrusive )\n[ ] only show line annotation on diffs ( if gitgutter icon present based on compare against )\n\nand maybe \n- [ ] custom scope class for the annotation (style color ). I know the diff is not related to the blame, but arguing for no. 2 or no. 3 serves more as a filter to make it less noisy when you want to see if for something specific, I guess that was my point, and also my original intent, inspect blame for a diff, not all.\nI agree with 1. it is often a good way to expose large new features for people who do not read release notes to just force them on. But if it leads to endless support questions it might be solvable by docs or changing the default, etc.\n. notes\nLine annotation interferes with mouse selection(if cursor is over its indented whitespace or anywhere neat the annotation ), and the text also gets included in keyboard selection ( highlighted only, not copied or pasted ). ",
    "jbrooksuk": "It could also be done the way GitLens does it in VSCode, so we'd use Phantoms.. ",
    "Spaxe": "The automatic showing at the end of line is very distracting. I've turned it off in my preferences (thanks for adding a toggle!)\n// GitGutter Settings - User\n{\n  \"show_line_annotation\": \"false\"\n}\nThe same information of git blame is repeated in the status bar anyway, so this is not a loss.. ",
    "alexlouden": "+1 on disabling line annotation by default. I discovered it today, didn't find it useful at all, so spent 20 minutes figuring out which package it came from. Happened upon this post, and this comment which already has 10 votes. I'm guessing there's a big % of users who won't bother finding the feature flag and will just disable the package?\nI think it's okay for new features to be enabled by default for discovery, but you need to be receptive to user feedback too. Thanks, really appreciate all your work on GitGutter!. ",
    "borislavgrigorov": "Hi,\nI tried git --version and it takes 5 seconds for me. Perhaps that is the\nissue. Why do you have this command be synchronous? It does stall ST.\nRegards,\nBobby\nOn Thu, Apr 12, 2018, 11:07 AM deathaxe, notifications@github.com wrote:\n\nThe one and only function being executed synchronously is git --version\nwhich is responsible to check for git to work properly. This function\nnormally returns its result in 5ms on Linux and in 50ms on Windows, which\nis short enough to not realize it.\nAll other functions are executed in dedicated threads and can't block ST.\nI saw ST stalling caused by GitGutter only once maybe half a year ago. It\nwas caused by Kaspersky Internet Security, which caused git --version to\nrequire up to 1.5 seconds to return a value. This issue was resolved after\nupgrading Windows 10 and KIS.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/jisaacks/GitGutter/issues/493#issuecomment-380894974,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AK4Jykq3rNc0D9XCmqYRh__iEIO4kaZSks5tn5fIgaJpZM4TPLP9\n.\n. You can make the git --version command run asynchronously.\n\nOn Tue, May 1, 2018, 12:40 PM deathaxe, notifications@github.com wrote:\n\nAs this issue is caused by a delayed reaction of git itself, I labeled\nthis issue invalid and don't see a way how GitGutter could fix such kind of\nissue.\nEven if ST wouldn't freeze, the user experience would be bad anyway due to\nheavy delays.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/jisaacks/GitGutter/issues/493#issuecomment-385767963,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AK4JytowqISzvTL4GDqzsOfLJfKneybNks5tuLo9gaJpZM4TPLP9\n.\n. \n",
    "pmn4": "wow, that was an incredibly fast response. I'll check it out now. @deathaxe looks like that resolved it. thanks again for hopping on this so quickly. Hi @deathaxe, I'm not sure if anything has changed, but this issue started happening again today after my Sublime crashed and reopened.\nThis time I do not see anything in the console to help. What information can I give you?. checked out master, now seeing this in the console:\nReloading plugin /Users/pmn/Library/Application Support/Sublime Text 2/Packages/GitGutter/release.py\nTraceback (most recent call last):\n  File \"./sublime_plugin.py\", line 62, in reload_plugin\n  File \"./release.py\", line 84\n    obj={v: MESSAGE_DIR + '/' + v + '.txt' for v in version_history},\n                                             ^. ",
    "ericfrederich": "Perhaps it should use os.makedirs instead of os.mkdir\nhttps://stackoverflow.com/a/600612. So I saw @deathaxe said in an email that it isn't supported by ST2 so we'd have to walk path manually.  Don't know what happened to that message.  Maybe he deleted it from this issue or maybe GitHub is bogged down with emails.\nSo if os.makedirs isn't available on ST2 what about using NamedTemporaryFile and not even looking at that environment variable and worrying about weather that path exists or not.\n... either that, or like you said, walk the path recursively.. ",
    "vivl4725": "I am very happy. In fact, I'm an ardent user of ArchLinux ... But, because of the university, I'll have to use windows. On git for winodws I do not watch as it already stands in WSL on ArchLinux :). ",
    "nikitavoloboev": "\nIf you select that Packages/User/ayu-... .sublime-color-scheme ST will overload the color definitions from the original one with those you defined there.\n\nI am not sure how to do this step. I do have ST3176 build.. I did that here.\nHowever I only have one theme shown to me:\n\nI did restart Sublime Text.\n. But the theme is only four rules.  \nI tried to do this: \"color_scheme\": \"Packages/ayu/ayu-mirage.sublime-color-scheme\",\nBut that doesn't work. It made Sublime all white. Is that what you meant?. Yeah I get this then:\n\nShould I move the entire Mirage theme to this file?\n. Yeah but when I do this change it forgets about me using Ayu completely. \nAnd when I go to change the theme back to Ayu Mirage from the command palette it overwrites the setting in preferences. I can't get the theme and the modification work side by side. . ",
    "tilo": "thank you for your reply @deathaxe !. ",
    "pineapplemachine": "I updated git and the watcher no longer sees changes to index.lock after switching tabs or window focus. Thank you for your help!. ",
    "hadrielk": "Yup, upgrading git did it. Thank you!. ",
    "linusr": "Tried with latest portable version of Git for Windows,\nGitGutter: C:/Users/XYZ/Apps/Git-2.18.0-64/bin/git.exe not found or working!\nGit works fine from cmd,\nC:\\Users\\XYZ\\Apps\\Git-2.18.0-64\\bin\n\u03bb .\\git.exe --version\ngit version 2.18.0.windows.1. With debug enabled below two lines gets printed,\nGitGutter: C:/Users/XYG/Apps/Git-2.18.0-64/bin/git.exe not found or working!\nGitGutter: disabled for \"File\" because git is not working. Timeout!!\nTraceback (most recent call last):\n  File \"C:\\Users\\XYZ\\Apps\\Sublime Text Build 3176 x64\\sublime_plugin.py\", line 914, in is_enabled_\n    ret = self.is_enabled(**args)\n  File \"C:\\Users\\XYZ\\Apps\\Sublime Text Build 3176 x64\\Data\\Packages\\GitGutter\\modules\\commands.py\", line 105, in is_enabled\n    elif not self.git_handler.version(validate):\n  File \"C:\\Users\\XYZ\\Apps\\Sublime Text Build 3176 x64\\Data\\Packages\\GitGutter\\modules\\handler.py\", line 131, in version\n    proc.wait(0.5)\n  File \"./python3.3/subprocess.py\", line 1163, in wait\nsubprocess.TimeoutExpired: Command '['C:/Users/XYZ/Apps/Git-2.18.0-64/bin/git.exe', '--version']' timed out after 0.5 seconds\nWent ahead and modified handler.py to increase time out and voila it worked. But still puzzles me why git --version should take 2 seconds.\nproc.wait(2.0). ",
    "KES777": "The described functionality is based git blame.\nTo simplify task you can just show annotations fired by hotkey:\nif( <hotkey> ) {\n  do{\n    <commit message> =  `git blame <current file>:<current line>`\n  } while <commit message> not contain '#ANT';\n}\nAs you can see that will be easy to implement.. ",
    "howardjohn": "Got it. That is what I figured, but thought I would bring it to attention anyways. ",
    "indirectlylit": "Bummer - I like the annotation, but will probably turn it off due to this.\nI filed a Sublime issue: https://github.com/SublimeTextIssues/Core/issues/2422 - feel free to add details or upvote.\n. improved by GitGutter 1.9.5:\n\nDisable line annotation if multiple cursors are visible\nDisable line annotation if selection is not empty\n\n(thanks for the tip @BenjaminSchaaf and for the plugin @deathaxe)\n. ",
    "dougc84": "A little more digging revealed this shouldn't be set in the user settings file, but, instead, in the package settings file.  However, that still means this toggle doesn't work per-project, which is something that looks to be indicated in the documentation.. ",
    "spacesuitdiver": "@deathaxe can we not just assume a click event on the phantom should go to the end of the active line?. ",
    "JaredOzzy": "I also seem to constantly run into this issue, very frustrating especially if you use a mouse.. ",
    "jonaskivi": "Today I saw the line annotation for the first time. I guess it is some new feature as I haven't seen it before...\nAs a feedback:\nIt was really distracting to have it on by default. In my opinion, it completely destroys the editing experience. Every time the user moves the cursor, this long text will pop up right after the line they are currently editing. This distracts reading and writing the code.\nI think this information should be placed somewhere else, and at least not on by default.\nThe \"line_annotation_ruler\": 1, option helps a bit, as my rulers are generally not visible on screen, so I don't see it popping up, unless I resize my view. But the mouse selection issue makes it unusable anyway.\nI would just leave the line annotation feature off by default (even if the selection issue would get fixed).\nOtherwise GitGutter seems like a really useful tool. Thanks for making it.\n. ",
    "squallstar": "+1, can we get this disabled? I use GitGutter for the left sidebar icons only and the line annotations are too distracting and also keep shifting the lines in my editor:\n\n. @deathaxe I do have the draw_centered mode enabled, I guess that's what causing the error then. Note that this wasn't happening a few days ago so the issue must have been recently introduced.. @deathaxe the issue seems to happen even when the draw_centered is disabled:\n\n. @vdh sorry at first I thought it was related and only realised it's a different bug when @deathaxe replied (and then promptly fixed) the bug.. ",
    "rudedogg": "Not sure if it is already an option, but I was thinking the annotations would maybe be better in a fixed status bar at the bottom of the document? I felt they were distracting and used the setting mentioned above to turn them off.. ",
    "vdh": "@squallstar @deathaxe Um sorry, but did you two just hijack my issue and then close it based on a separate and mostly unrelated bug? \u2639\ufe0f. Okay, well it's good to know the closing was related then.. ",
    "curtisgibby": "Works for me! Thanks!. ",
    "leonklingele": "It worked just fine not too long ago. I'll do a bisect.. Hmm, apparently also broken with older releases of this plugin. Maybe the issue is caused by Sublime Text itself? I'm running Version 3.1.1, Build 3176 (the most recent one).. BTW: The theme was not touched in the last year.. @deathaxe are you running ST Version 3.1.1, Build 3176 by chance? It might be an incompatibility issue with the current release.. This is how it looks using those three config values, something fishy with the icon is going on:\n\nEDIT:\nIt's a high DPI display (Retina MBP).. Also, both icons are not centered vertically. Can you please reopen the issue?. ",
    "fauxpark": "Sorry to bump, but I'm still getting this on Windows 10 with the default line_padding and Consolas 12pt.\nIf I leave the font size as the default 11, increase it to 14, or set line_padding_bottom to 1 the shifting doesn't happen.\nFor reference:\n\nSublime Text 3176\nPlatform: windows\nArch: x64\nGitGutter 1.9.5\nInstall via PC: True\ngit version 2.20.1\nmdpopups 3.3.3\nmarkdown 2.6.11\npygments 2.1a0\njinja2 2.8. I understand, but my line_padding is set to the default 0, not a negative value. I am assuming, of course, that 0 is positive here.\n\nYou mentioned above: \n\nphantoms minimum height requires a positive padding value\n\nDoes that then mean > 0, or >= 0?. ",
    "swongu": "\nWe need to hope and wait.\n\nAny luck with the 3.2 release?. ",
    "sparr": "@deathaxe can you link to the issues in question?. ",
    "jncorpron": "I'm not sure I understand all of the technical detail you replied with, but it sounds like the solution is that it's not fixable and my solution of turning line annotations off was the right one. \nI'm fine with not using the feature, I just meant to let you all know that there was a bug. I'm okay with whatever resolution you'd like.. ",
    "sciyoshi": "Thank you @deathaxe for the fast response + merge! \ud83c\udf89 . ",
    "arasmussen": "ST's console didn't say anything more than the error message in the pop-up.\nHow did you use GitGutter 1.10.0? It looks like the latest version is 1.9.5.\nI updated git to 2.20.1 (previously 2.9.3) and am now unable to reproduce the issue! Good shout.. ",
    "Kraymer": "You're right. Don't know if it conflicts  with SublimeFunctionNameDisplay, I figured two plugins writing to the status bar would conflict, I'll try that.\n. > I figured two plugins writing to the status bar would conflict, I'll try that.\nI was wrong, it works great.. ",
    "AmjadHD": "is there currently a way to disable icons, but not diff popups ?. ",
    "stdedos": "I don't doubt that @deathaxe. I would appreciate some more debuging instructions though, since I have already read Troubleshooting, and nothing came up.. > Did you try to set \"debug: true\" in GitGutter.sublime-settings?\nWith some luck it may provide some more infos about the reason.\nI did:\n```js\n{\n  // Add a special marker on untracked files\n  \"show_markers_on_untracked_file\": true,\n// Determines whether GitGutter will show informations in the status bar\n  // Set \"none\" to hide these informations\n  // Set \"default\" to show in the status bar what you are comparing\n  // against, how many lines have been inserted or modified and how many regions\n  // have been deleted.\n  // Set \"all\" to also show on what branch you are\n  \"show_status\": \"all\",\n  \"debug\": true\n}\n```\nUnfortunately, it only gives\nreloading plugin GitGutter.plugin\nGitGutter: disabled for \"untitled\" because file not in a working tree\nGitGutter: disabled for \"test.log\" because file not in a working tree\n// here I closed and reopened a file under a repo\nGitGutter: disabled for \"untitled\" because file not in a working tree\n\nIs the string from the \"Results:\" part (Gutter output \"does not match\" git diff) from console?\n\nNo. it's just me saying that: git diff != GitGutter \"gutter\" marks\n\nWhat distro are u using?\n\nOoops! :smile: Ubuntu 16.04.5. The repository is a big one, if that helps ... but I cannot thing of something else causing this :confused: . > The only thing I can see from your logs is an unsaved view and a \"test.log\" to be open, which is not within the repository.\nI know! In GitGutter's debug, there is ABSOLUTELY no mentioning of me opening a git-tracked file:\nreloading plugin GitGutter.plugin\nGitGutter: disabled for \"untitled\" because file not in a working tree\nGitGutter: disabled for \"test.log\" because file not in a working tree\nGitGutter: disabled for \"untitled\" because file not in a working tree\nIn the mockup I created with the debug messages, I would expect, instead of this:\n// here I closed and reopened a file under a repo\nIt would have much more entries, like:\nGitGutter: opened \"x\": file is tracked in git, processing ...\nGitGutter: [...]\nGitGutter: [...]\nGitGutter: [...]\nGitGutter: [...]\nGitGutter: processing done for \"x\"\nor something! However, greping the console output (with grep -i gitgutter), gives a very small amount of lines == the aforementioned ones\n\n\nGitGutter itself does not create a message which matches the git diff != GitGutter \"gutter\" marks style.\n\nI know! I am trying to explain what the issue is, in some way!\nGitGutter gives no messages, about \"nothing\" related on processing git-tracked files, so, I am trying to describe it to the best of my English and understanding, what is happening:\nThe file state that GitGutter is advertising the file to be, is not consistent with whatever git diff would say.\n\nI absolutely can't find any entry point to start debugging. Whatever I try it works fine here on both, Windows and Linux.\n\nI know! I would search the source code myself for the error messages (or even try to debug / put breakpoints in it myself), but I have no idea \"where\" GitGutter gets stucked, if it throws exceptions ... nothing. And neither do I know how the development/debugging process of Sublime extensions, so I cannot do what I would normally do to debug source code (like pudb git_gutter.py or something).. ",
    "michaelblyons": "Take a look in the recent commits, particularly https://github.com/jisaacks/GitGutter/commit/a74ed97215a6154b97ff271252fd7b4a18aea3a8. \ud83d\ude09 . Possible duplicate of #537?. ",
    "gundamew": "Me too. Thank you @jisaacks for the awesome plugin. \ud83d\udc4d. ",
    "SonGokussj4": "As I read: \"seems to become deprecated / obsolete for ST3200+ in its current form\" I disagree. Your plugin is awesome. So much functionality (that I'm not even using), really subtle, you can say... sublime :-) \nThank you for this plugin.. ",
    "narikazu": "Thank you very much @jisaacks for the greatest plugin! I really appreciate that you've released the new versions of this plugin often.\n. ",
    "shadycuz": "I agree with @SonGokussj4 and came here to say the same. They added similar features but they didn't git them all \ud83d\ude09 . The best thing about your plugin in the ability to right-click a change and undo it. I also like that the preview of what changed appears when I hover my mouse over the gutter. \nThanks for the awesome plugin.. ",
    "lode": "I also want to mention that this plugin is great. I disabled sublime's new diff and am using this plugin again. It does a better job in my eyes (and to my eyes, as you've seen in https://forum.sublimetext.com/t/how-do-i-hide-icons-show-git-status/42363).. ",
    "avioli": "@deathaxe Thank you, too.. ",
    "maddanio": "Much obliged . ",
    "Meshparts": "Thanks, setting mini_diff to false solved the problem. So what is the meaning of mini_diff: true? Do I need gitgutter if there is inbuild functionality now?. Many thanks for the detailed comparisson. I guess I'll stck with gitgutter for the moment.. "
}