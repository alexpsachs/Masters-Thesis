{
    "marmelroy": "\n. \n. \n. \n. \n. Better formatter done. Matches Google's libPhoneNumber. \nAsYouTypeFormatter coming soon. \n. Thanks @andresgarza! Got a little distracted away from the AsYouTypeFormatter. Expecting to have a working version during the week. \n. Still unfinished I'm afraid but a lot of progress was made. There are some unexpected challenges in allowing a user to edit any part of the textfield and keeping the cursor at a logical place. Will figure out a solution soon.\n. Hi @irace, I've been very very busy but getting the AsYouTypeFormatter is my only open source goal for the coming week. Let's commit to it landing by 5th Feb. \n. Late but making progress :crying_cat_face: \n. Getting close. Check out progress on https://github.com/marmelroy/PhoneNumberKit/tree/feature_asyoutypeformatter\nIt works well now but there's one rare bug left on deletion from the middle. Also, the code needs a little clean up + documentation and tests. \n. Released in 0.6 (finally)\n. Thanks! Great call :)\n. Thanks Mitchell. I'll check and fix first thing tomorrow morning. \n. Ah... okay, I suspect Cocoapods is not installing the json metadata file. Good find. Fix soon.\n. Yup, so that was the issue. Fixed by updating the podspec and released a new version (check out the release note - https://github.com/marmelroy/PhoneNumberKit/releases/tag/0.1.3).\nThanks again for highlighting this problem. Closing now. \n. Ah yes... good find. Looks like I didn't throw an error at the right place. Fix very soon. \n. Fixed with 0.1.6. Thanks again @j-pk \n. Also added an automatic test to make sure this issue doesn't come back. \n. PhoneNumberKit uses the same metadata as Google's libPhoneNumber so we can't get a better result than FixedLineOrMobile.  \nCurrently we don't have a FixedLineOrMobile type (I considered it but thought it was too ambiguous when writing that function). Maybe I should add it back.\n. Just added a FixedOrMobile type (applied with the same rules as libPhoneNumber) and included the number you mentioned as a test. This is bundled in release 0.1.7. Thanks again for the issue. \n. Thanks @Constantine-Fry, looks great. Merging. \n. I've been looking into this and can't seem to replicate. Can you share some code that shows the conflict? \n. Thanks @Treverr, just had a quick look... \nThe issue was that you returned false on \nfunc textFieldShouldEndEditing(textField: UITextField)\nIt meant that the phone number text field would never finish editing. \nAdditionally, checking which field is in the textfield delegate with an .isFirstResponder() is wrong because it might have already lost the firstResponder status. Check which one it is with an if statementt instead. \nI made a pull request on your project that fixes it:\nhttps://github.com/Treverr/inSparkle/pull/37\n. No worries :smile: \n. Just tried to replicate with the same set-up and it's working fine. Can you share some code so we can better identify what the issue is (at least the Podfile)? \n. Ah... I see... PhoneNumberKit is a Swift-only framework and to integrate with Cocoapods you will need to add the use_fraemworks flag. All of the pods you are using support framework targets except Localytics. You will need to remove it. \nThis will install without any issues:\n``````\nuse_frameworks!\ninhibit_all_warnings!\npod 'PhoneNumberKit'\npod 'IQKeyboardManager'\npod 'RestKit', '0.24.1'\npod 'MagicalRecord'\npod '500px-iOS-api'\npod 'FDWaveformView'\npod 'SDWebImage', '~> 3.7'\npod 'UIActivityIndicator-for-SDWebImage'\npod 'MBProgressHUD', '~> 0.9.1'\npod 'Inflections'\npod 'Bugsnag', :git => \"https://github.com/bugsnag/bugsnag-cocoa.git\"\npod 'SKTagView'\npod 'UICollectionViewLeftAlignedLayout'\npod 'Analytics/Segmentio'\npod 'UAProgressView'\npod 'HPGrowingTextView'```\n``````\n. Thanks a lot for looking into this @pzearfoss, very interesting bug... \nThe NSDataDetector was added for efficiency as part of the effort to boost parsing speeds. If it fails there is a fallback to libPhoneNumber's original Regular Expression. The problem here is that it doesn't technically fail but doesn't produce the expected result either. \nI will have a solution for this soon... \n. Not yet. It definitely seems like a bug in NSDataDetector but I need to properly benchmark the benefit of using it vs the custom regular expression before deciding on the next move. \n. Quick update to say that this is still an issue... \n. Fixed (finally) by https://github.com/marmelroy/PhoneNumberKit/commit/b71cbadf1180814048608286985875437ace78e9. Looks good. Merging.\n. Thanks Kyle. \nPersonally I don't think offering the pre-built framework is the best way to integrate third-party code. However, I can see how some people would appreciate the option (saving some CI time is appealing).\nI'll keep it in mind for the next release.\n. Hey Kyle! Doing a little clean up of open issues...  \nEven though it will dramatically speed up CI, I still think it's best to avoid shipping prebuilt binaries of PhoneNumberKit, at least until Swift has a stable ABI. \nFrom Apple: \n\nIt would be dangerous to rely upon binary frameworks that use Swift \u2014 especially from third parties. As Swift changes, those frameworks will be incompatible with the rest of your app. \nhttps://developer.apple.com/swift/blog/?id=2\n. Thanks @navisingh, something is definitely leaking... I'll investigate further this weekend... \n. Found several issues (indeed inside the regex code) and fixed them with a new release (0.3). I still think there's more work to do to optimise memory usage. Closing for now...\n. The official AsYouType text field is taking a little while (got distracted, back on it soon)... \n\nI'm afraid the PartialFormatter is actually the unfinished part :smile: will make it public when it's ready \n. Thanks @dmcgloin, these look great. Merging.\n. Hehe. Thanks for noticing @dmcgloin \n. Hi @codywinton. Yup, always open to pull requests. There shouldn't be any access issues...\nIf you are stuck: https://help.github.com/articles/creating-a-pull-request/\n. You can't just push to remote. You need to click the green Compare and Review button and create a pull request via GitHub's system.\nPlease follow the instructions on https://help.github.com/articles/creating-a-pull-request/\n. Thanks @nrako. Great point. \n. Made a minor change - https://github.com/marmelroy/PhoneNumberKit/commit/5b80ae5130ffcf6558fd06795d628554dcc7b30e\n. Hehe. No worries. It's a very useful pull request. \n. Awesome ! These are great. Thanks @codywinton. \n. Hey @aaisataev,\nBasically: \n- Download the project and copy to your app's root directory.\n- Open your app's xcodeproj\n- Drag PhoneNumberKit's project file into your App's project file.\n- Expand the products folder of PhoneNumberKit and you will see a PhoneNumberKit.framework file. \n- Look at your app's target and find \"Embedded Binaries\".\n- Drag PhoneNumberKit.framework to embedded binaries. \nHope this helps. \n. :+1:\n. Thanks @ciauri. Fixed with https://github.com/marmelroy/PhoneNumberKit/commit/c35409f5d46bb95a4178819a12d7713c7a5484c5\n. Not stupid at all @nico75005 - it's not in the latest release yet. I was waiting to finish https://github.com/marmelroy/PhoneNumberKit/issues/32 but can actually do an intermediate release now. \n. Done.\n. It's living on the edge \ud83d\ude0a but in theory should be safe (every pull request has to pass the unit tests).\np.s. it will slow down your pod update times too.\n. Thanks @dr-skot. These are awesome ideas. Merging...\n. Looks great. \n. Thanks @nrako. Didn't know about this issue. Will investigate... \n. Thanks @adrianchifor. Do you have reproducible steps / code I can look at? It will be super useful...\n. Thanks @adrianchifor. I'll investigate tonight.\n. Oh, okay. In that case I have a cool generalised solution in mind. Will commit in a few hours. \n. Discovered a few possible issues here. Have a fix that I want to test more before pushing. \n. Should be fixed by https://github.com/marmelroy/PhoneNumberKit/commit/40410c875899bc3631a65d55826be2473c32af2a (new release soon).\n. Hi @nrako,\nIn PhoneNumberKit, parsing and validating were merged into the same action. A PhoneNumber object is always a valid number.\nWhat exactly are you trying to achieve though? If you want to format an invalid number, the PartialFormatter could help you... \n. Ah okay. In that case there is indeed an issue here. What I suspect is that Google look at type UNKNOWN as invalid, whereas PhoneNumberKit doesn't.  Will investigate further tonight... \n. Hmm... in terms of validations, PhoneNumberKit's number parsing does everything libPhoneNumber does in isValidNumber except for checking whether type != .Unknown. The type test can be very expensive and we already validate against the main country format (for the type test, you basically regex match against every available number type). \nI'm leaning towards the Maybe PhoneNumber should be considered as a \"possible\" number and have the isValidNumber and isValidNumber:forRegion methods approach but want to think about this further. \n. I added an isValidNumber computer property on the PhoneNumber object. I'm still not 100% sure it is the right approach though... \n. Thanks @danielrhodes. Good idea :smile: \n. @sentiasa, @AliSoftware's UI approach for phone number entry is quite common and something PhoneNumberKit should support out-of-the-box.\nSome modifications to PhoneNumberTextField and the ParialFormatter are necessary to allow it to do partial formatting for international dialling with a locked country region. \nI'm hoping to push the modifications and an example app implementing this pattern next week.\n. Re the UILabel application -  I just pushed an update to the formatter that allows you to format parsed phone numbers while excluding the prefix: \nhttps://github.com/marmelroy/PhoneNumberKit/commit/0742c0d946a9c44903e679fcedc2ec2ed9c73659\nSo for example:\nphoneNumber.toInternational(false) // \"6 89 55 55 55\"\nphoneNumber.toE164(false) // \"689555555\"\n. Resolved by https://github.com/marmelroy/PhoneNumberKit/commit/40ff2f4b1377f2d59497df53dca792841125d4ba\nAn example project will be added before this is packaged in a release... \nBasically, I added a withPrefix optional Bool on PhoneNumberTextField that works as expected. \n. Thanks @fikus! This looks great. Merging. \n. Thanks @ecristerna! Great find. \nUnfortunately, there's not a lot we can do about it. \nPhoneNumberKit uses the metadata from Google's libPhoneNumber project for the web and Android (considered the best in the industry) and it's Google's metadata that misses the parenthesis.\nI've attached a screenshot of the way Google formats your number. To test the metadata with other numbers, you can try Google's service on the web directly on\nhttps://libphonenumber.appspot.com\n\n. Sorry for the delay with this PR. Was travelling. Looks great.\nThanks again @fikus. \n. Hi @benyboariu,\nThis is a deliberate change. \"typealias\" is deprecated in Swift 2.2 and should be replaced by \"associatedtype\". See: https://github.com/apple/swift-evolution/blob/master/proposals/0011-replace-typealias-associated.md\nAre you using Xcode 7.3 (the newest version released this week)? \n. Closing for now...\n. Thanks @mcrakhman. Looks suspicious. I will investigate further this evening. \n. After some investigation - PhoneNumberKit keeps the parsed metadata in memory and a memory leak can, under certain circumstances, happen. \nI've begun work on a significant change to PhoneNumberKit that will be a lot more explicit about ownership and will resolve these issues. It will also introduce some breaking changes to the API. \nThat work is on the https://github.com/marmelroy/PhoneNumberKit/tree/dev branch. \n. Good news!\nI was able to resolve the memory leak issues without an API change. Bundling all the changes in release 0.7. \nThanks again for reporting these @mcrakhman.\n. Hi @HaiLe,\nPhoneNumberKit 0.6.4 was upgraded to use Swift 2.2. Are you using the newest version of XCode (7.3, released on Monday)? \n. Closing. \n. Thanks @fikus. Updating metadata and then we'll see about the pattern issues... \n. Okay... so the extra space in the PM regular expressions comes directly from Google's libPhoneNumber XML metadata file: \nhttps://github.com/googlei18n/libphonenumber/blob/master/resources/PhoneNumberMetadata.xml\n(the file is huge and the offending lines are 19223 and 19227). \n. Since it definitely looks like a bug - I will fix it manually in PhoneNumberKit's metadata and open an issue on libPhoneNumber. \n. Thanks a lot for the great work @fikus. These are some serious type determination improvements. \n. Quick update, @fikus -  libPhoneNumber acknowledged the PM regex issue and will fix it in an upcoming release. \n. Thanks a lot for these @dulaccc !\nThis issue was discussed a little bit in https://github.com/marmelroy/PhoneNumberKit/issues/30. \nBasically, the one major check that Google's libPhoneNumber does that PhoneNumberKit doesn't is a type check. Unknown types are considered possible but invalid numbers. \nThe issue is that in order to determine a phone number's type, MANY regular expressions are necessary (essentially comparing the number to every known type until there is a fit). This slows things down considerably and is not a behaviour I wanted to enable by default. \nI'll resolve this issue in the next release. \n. Thanks a lot @fikus. Another awesome PR! \ud83d\udc4d \n. Hey @Treverr and @chow-land, I'm unable to replicate this issue. Would it be possible for either of you to share some code?\n. Mystery solved. Thanks @piyushkantm. I updated the README to be a little clearer about the module selection https://github.com/marmelroy/PhoneNumberKit/commit/107d11aec1b3ebef3a9b599edd62650d7b0153fb\n. PhoneNumberKit is iOS8+. Looks like your app is trying to support iOS7. \n. Hi @maninderssoor, good issue! Yes, there is a way to solve this in the build settings. Pushing a fix now. \n. New version released (0.8.3). Try it and let me know if it works. Closing for now. \n. Hi @salomoko. Yes, sorry. Swift is moving fast and PhoneNumberKit needs to support the latest public version. I'm afraid Xcode 7.3 is needed to compile. Sorry again. \n. Hi @TheOriginalTrubador, \nSorry for the delay. After some consideration, I'm not sure there's an issue here. \nTo handle local phone numbers, PhoneNumberKit requires the user's current region. This is usually determined automatically by default using the country of the iPhone's SIM.\nHowever, you can also override it. \nWhen running: \nlet phoneNumber = try PhoneNumber(rawNumber:\"(0118) 9 345678\", region: \"GB\")\n            (phoneNumber.isValidNumber == true) ? XCTAssert(true) : XCTFail()\nAll of your examples except for \"(020) 7 123456\" pass. \"(020) 7 123456\" is actually an invalid number and fails on Google's libPhoneNumber as well (you can try it here - https://libphonenumber.appspot.com).  \nMy guess is that you are either using the simulator (defaults to US region) or an iPhone with an international SIM. \n. Thanks a lot @egrim!\n. Thanks @jeryRazakarison. Seems to me like an Objc/Swift compatibility BlocksKit issue...\n. Hi @jersonperpetua, \nSorry for the delay on this one. \nPhoneNumberKit reserves the use of PhoneNumber objects and I see it as the client's responsibility to avoid naming collisions.\n. I tried to merge this into the new \"swift2.3\" branch but encountered some git issues so recreated it. Thanks again for the PR. \nRe Swift 3.0, I decided to wait until all the breaking changes are implemented by Apple before setting up the branch (it's still a work in progress).\n. Thanks a lot @davbeck! I really appreciate you doing the migrating and proposing this action plan. \nOn the surface, it all looks great.\nI will however need to read through all the code before merging (and try and fix Travis, I think they have an Xcode 8 machine now). Also I want to check how other frameworks are handling the transition before making a decision. \n. Thanks @davbeck and @dmcgloin. All fair points. \nWhen building PhoneNumberKit, some compromises were made in favour of a nicer syntax / friendlier API that reduced thread safety and were less than ideal as far as memory management is concerned. \nThe more I'm thinking about it, the more I would like the Swift 3 version to be the mature, thread-safe v1.0 of PhoneNumberKit. Instead of just making the framework compile for Swift 3, the language update is a good excuse to also rethink the API and make significant improvements to the way PhoneNumberKit works under the hood. \n. Hi again @davbeck (and thanks @leoMehlig too)! I really appreciate the continuing updates. \nI took your PR and merged it into a new \"swift 3.0\" branch. \nAs previously mentioned, the plan is to not just to do a translation but actually use the new release of Swift as an excuse for a new breaking version of PhoneNumberKit that resolves some of the remaining issues in the current version. The Swift 3.0 branch is where that development will take place. \n. Thanks @adamkornafeld! Sorry for taking a long time with this... merging. \n. Hi @redcirclegame! \nThanks for this. The issue here is that you don't get the main country for a dialing code by asking for the first country in the array. \nThere is a specific function for this:\nlet countryCode = PhoneNumberKit().mainCountryForCode(countryCodeNumber)\nreturns US\n. Thanks a lot for this @sdkdimon but all of PhoneNumberKit's internal components don't inherit from NSObject on purpose. Generally speaking, interfacing with the partial formatter should happen via PhoneNumberTextField and that's a UITextField class that supports Objective C.\n. Sorry for the delay. Thanks for this fix @Bomb3rman. \n. Hi @HamzaGhazouani, I would recommend formatting the phone number with a PhoneNumber object (providing the US as the region) and using the formatted number as the placeholder. \nPhoneNumber(rawNumber: \"1234567890\", region: \"US\")\n. Hi @LeakedDave, thanks for the idea! \nThe issue here is that there isn't really a maximum character count we can safely use. Not only do phone number lengths differ by country but they can differ in unpredictable ways (think extensions). Adding a hard limit in the framework level can cause a lot of damage to specific use cases... \n. Hi @tecexpert, I'm afraid I can't replicate. Can you please share more details?\n. Closing due to lack of reproducible steps. \n. Thanks @davbeck. I'll merge this in. Over the next few days I will begin work on breaking API changes as part of the Swift 3.0 release. \n. Countries are based on Google's libPhoneNumber metadata (used on Android and on the web). There's not a huge amount we can do. \n. Hi @hartbit, sorry for the delay - was busy with the release of 1.0 and the Swift 3.0 transition. \nI do believe there is indeed an issue here - will continue to investigate. \n. Hey @hartbit, there were a lot of changes to parseMultiple in the last release and I believe this should be fixed by now. Let me know if you are still facing issues after updating.  . That was fast \ud83d\ude04 \nThanks @davbeck \n. Thanks @batkov, no longer needed. \n. Hi @qgliu,\nI suspect that's just xcodebuild looking for Alcatraz (and the plugins are plugins that you had installed on Xcode 7). Try running xcodebuild on another app on your machine and see if you get the same warnings. \nOne solution is to remove the .xcplugin files from  ~/Library/Application Support/Developer/Shared/Xcode/Plug-ins/\nThere's still no official Swift 3 release but there is a Swift 3 branch you can use with Carthage. \n. Thanks @adamkornafeld. Merging. It will be included in the official Swift 3.0 release of PhoneNumberkit (coming soon).\n. Hi @Liptuga-Michael,\nYes.\n. No longer an issue with PhoneNumberKit 1.0\n. Happy to hear @clintburgos. Official Swift 3 version should be ready sometime next week. \n. It's in active development. You can follow the progress on https://github.com/marmelroy/PhoneNumberKit/tree/1.0\n. Released \ud83d\ude80 \n. Hi @SiNBizkit,\nGood find! This is indeed a bug, caused by the Swift 3.0 transition. Fix pushed to the Swift 3.0 branch. \n. Thanks @SiNBizkit. Fixed and published as release 1.0.1.\n. Thanks @byrneciaran. You're right, it should be open. I will do a big access control sweep this evening and will push a fix. \n. Fix pushed. I'll bundle a new release in a few days. \n. Hmmm... I'm suspecting it's related to the access control of PhoneNumberTextField. I changed it frompublic to open yesterday but haven't bundled it in a release yet. Could you please change it to open on your side and see if it fixes things? \n. We are not actively supporting the Swift 2.3 branch and it will soon be deprecated completely. Please move to the Swift 3.0 branch when you can.. Hi @rsaarloos, \nThank you for your question. \nAre you using the newest version of PhoneNumberKit?  As of version 1.0, the type is no longer a computer property and it is determined on parse. This should be fast enough for most use cases (especially if you are conservative about the number of parses you do, I recommend using the special function that parses an array of string phone numbers). \nThere currently isn't a way to check just for a Mobile type but this is something I could consider adding... \n. There is a bug with the multiple parsing function and I am testing a solution, a fix will be pushed very soon. \n. Hi @rsaarloos, many improvements were pushed in this space. You can now also ignoreType to improve speed. Please let me know if you are still facing performance issues with the latest version. . Thanks @jpstern. Very interesting... will investigate later this evening. \n. With recent versions of PhoneNumberKit you can ignoreType on parse, for example:\nswift\ntry phoneNumberKit.parse(\"+16307792428\", ignoreType: true, withRegion: \"US\"). I see the benefit in making PhoneNumberTextField an extension but can't think of a way to do this currently - it's just a bit too complex to be an extension. \nI will close this issue for now.... I would probably suggest creating either a PhoneNumberTextField that inherits from SkyFloatingLabelTextField or the other way around. . It took a long time but merging now... thanks @cemonet . Thanks @sorth-hiya. Merging.... Thanks @jrogers. Merging. \n. Hi @gracietti, thanks for this.\nPhoneNumberKit is using the metadata from Google's libPhoneNumber library. The metadata is updated regularly and is used across the web. It's up to Google to decide what kind of number formats to support... . Sorry for the delay. I wasn't sure about the modifications to the other initialisers but after some thinking, am convinced this is a good way to go. Merging... . Hi @nuynait, sorry for the delay... \nYou should parse and format the preset value using PhoneNumberKit's parse and format functions. You can then set it with the text property. \nHope this helps... . Thanks @alex314 and @rwichmann. I will investigate and fix soon... . This should be fixed by the newest release (works on my side). Please make sure you are running the latest versions of Cocoapods and Carthage. . Thanks @NikKovIos, looks good to me. Is it possible for you to add a unit test for this? . Cool. I'll merge and add a unit test on my side... . We now do hard type validation by default and libPhoneNumber-iOS doesn't. It's a bit costly performance-wise but this way, we guarantee that the number is 100% valid. \nIf you don't care whether or not a number is valid, you can add ignoreType:true to your parse function. E.g.\nswift\n phoneNumberKit.parse(\"+16307792428\", ignoreType: true, withRegion: \"US\"). You're right, this needs to be fixed. Should be fixed with release 1.0.4. Thanks again. \nLet me know if it's still slow. . Thanks again @sgapr. Solid suggestions. I'll review tonight. . Removed .filter calls and performance seems much better. Also, I should point out some additional issues that can affect performance:\n\n\nA PhoneNumberKit instance is relatively expensive to allocate (it parses the metadata and keeps it in memory for the object's lifecycle). I can't see the rest of your code but you should try and make sure sPhoneNumberKit is allocated once and deallocated when no longer needed.   \n\n\nYou should also note that PhoneNumberKit has a special function for parsing multiple numbers that has some performance benefits:\nswift\nlet rawNumberArray = [\"0291 12345678\", \"+49 291 12345678\", \"04134 1234\", \"09123 12345\"]\nlet phoneNumbers = phoneNumberKit.parse(rawNumberArray)\nlet phoneNumbersCustomDefaultRegion = phoneNumberKit.parse(rawNumberArray, withRegion: \"DE\",  ignoreType: true) . Hi @dasoga,\n\n\nThe examples are tested with every build on Travis so can confirm they work. \nBoth apps rely on Cocoapods. Please make sure you follow these steps:\n- Clone the whole project. \n- Have the latest version of cocoapods installed.\n- Run a pod update in the root folder of the example app you want to try. \nLet me know if you still run into any issues... . Hmm... . Can you confirm the version of cocoapods you are running? . Yeah, thanks a lot @mrubin. . Thanks @vhbit. Merging. This will go in the next release... . Thanks a lot for catching this @Sol88. Indeed, it shouldn't fall back to an empty string. Fixed.. Hi @sreeji44 , I'm not sure I understand the question. Can you please clarify what kind of colour change you are after? . Closing for lack of information.. . Thanks @hongxinhope and sorry for the delay. Merged. . Hi Gilad,\nSorry for the delay with this. There's no current way to get that format with PhoneNumberTextField (and we don't have the regular expressions that will allow us to support it). . Thanks @sweetmandm. Looks good. . Fix merged.. Most documentation was updated with the last release. If you find additional instances of outdated documentation please report. Thanks. . Thanks @artyom-stv . Thanks @artyom-stv.. Looks good, thanks.. Good update @Jean-Daniel. Thanks.. Yup, PhoneNumberKit is a Swift project. Sorry.. Thanks for this @davbeck. PhoneNumber objects are immutable struct by defaults to allow for better thread safety and speed. There is no plan to change that currently. . Thanks @davbeck. PhoneNumber is immutable by choice (for speed and thread safety). Closing. . Thanks @appsforall. I like this suggestion and would like to encourage you to make a PR with this update (the more contributors the merrier).. Merged. Thanks again.. Hi @SRautray, seems to be a bug. Investigating. . Hi @javiyavandan,\nPhoneNumberKit is validating the number from a given region code. On the phone this defaults to the phone's SIM's country. In the simulator it defaults to the US. You can override the region code with a given country code (i.e IN). \n\"+918160355434\" is not a valid number when called from the US, hence why it gives an error.\nHowever, on an Indian device, or when overriding the default, it returns a valid number:\nphoneNumberKit.parse(\"918160355434\", withRegion: \"IN\"). Thanks @jwolkovitzs. Merging. . Thanks @jtezanos. This will be considered for a future version.. Hi @Chakery, yes you can - as long as the raw number is valid from the current region (defaults to US on simulator and sim's local country on the phone). . Hi @pradeepb28,\nThe number you are testing with is not a valid number. Invalid numbers are not returned when you parse more than one string so you should always get nil. \nAlso, you should use the newest version of PhoneNumberKit (lots of syntax changes). . Hi @kuyazee,\nPhoneNumberKit is using metadata from Google's libPhoneNumber project that powers most mobile phone number validation on the web and on mobile. \nThey consider +6309xxxxxxxxxx as a correct format for PH. See: https://libphonenumber.appspot.com/phonenumberparser?number=%2B630918+899+2866&country=PH. I had one extra x in my reply.\nThis is the number I tested with:\n+630918 899 2866 \nAgain, please see:\nhttps://libphonenumber.appspot.com/phonenumberparser?number=%2B630918+899+2866&country=PH. hi @bargangilo, libPhoneNumber also says that this number is invalid. isValidNumberForRegion is false in the link you attached. . In the Swift 2.3 version there's no way to turn it off. In the Swift 3.0 version there is a way to ignore the type validation, which is close to Goolgle's isValidNumber. . the type validation is the same thing as the regional validation. Yup.\nWhat's project-pulse-test?. Hi @KelvinEC, thanks for getting in touch. Sorry but PhoneNumberKit doesn't support area code extraction.. Hi @ilandbt,\nThanks for the suggestion. Currently, there isn't. This is something that will be considered for the next big release.. Do you mean multiple numbers in the same string or a string with just one number? \nMultiple numbers - No.\nSingle number string - Yes. That's the main point:\ntry phoneNumberKit.parse(\"+33 6 89 017383\"). Hey Stefan, \nPhoneNumberKit is powered by metadata from Google's libPhoneNumber project (that powers most of the web/mobile's dealings with phone numbers). In the raw metadata, they consider Anguilla's country code as +1 (with 264 being part of the \"national number\").\nWe consider Google as the source of truth on this so this won't be considered a bug. \nTo play with Google's own version - try https://libphonenumber.appspot.com.. The basic validation checks if a phone number conforms to a country's regex.\nThe type validation checks every single regexp within the country in order to be able to tell you the phone number's type (i.e. fixed line / mobile / premium rate etc). The type is captured in the PhoneNumber object. \nThis is quite an expensive operation and can slow parsing down significantly so using 'ignoreType' will speed things up for you if you are parsing a lot of numbers. Also, if the 'type' returns 'unknown', that's considered an error.  . Yes.\nHave been extremely busy lately but PhoneNumberKit is very much still supported. If you want to get involved in running it, PRs are always welcome. . Hi @mrubin. This is something that was considered at one point. The idea at the time was to actually host the JSON file on GitHub. \nI like your idea better. Will keep this issue open in consideration for the next big release. . Hi @mrubin, just tested and both numbers are valid in the latest version of PhoneNumberKit.\n(with region specified as either \"US\" or \"AU\")\n. Thanks @imanzarrabian. Indeed, this is clearer. Merging. Thanks @jwolkovitzs. Great idea. Let's merge. . Hi @kuyazee, sorry for the delay. Am deprecating the Swift 2.3 branch so won't be merging this.. I like this suggestion, merging. Thanks @phatmann, merging. Thanks @phatmann and sorry for the delay, merging. This should be fixed in 2.0.0. Merged https://github.com/marmelroy/PhoneNumberKit/pull/164. Yes, you can do your own update the way @Pro2005 showed. Might provide a built in solution for this in a future version. . Thanks @MattKiazyk, merging. Hi @StarWars, PhoneNumber objects implement equatable and can be compared simply with ==. Let me know if you have a case where this doesn't work. . Merged https://github.com/marmelroy/PhoneNumberKit/pull/164. Hi @SchmidtyApps, thank you for your pull request and sorry for the delay in responding. Can you provide a screenshot so I can better understand the benefit of exposing the example numbers? The example numbers are mainly there to allow for comprehensive unit tests and shouldn't necessarily make sense to end users. . Please see discussion in the issue - closing for now but will try and find a solution for this in the next release. . Thanks for the suggestion @onepood - will keep this in mind for a future version. Sorry for the delay with this -  this bug is fixed by version 2.0.0. Sorry for the (mega) delay with this. \nSwift 4 version released (2.0.0). . Sorry for the delay with this - merging and putting together the new version now. Hi @amtula - we don't have a similar function in PhoneNumberKit and there are currently no plans to add it. Sorry about that.. Thanks @sbystrov. Merging. Hi @YuriiTrach, I'm not familiar with cocoapods-amimono and it sounds like an issue with the way the plugin supports the pod spec resources. \nMight be worth raising on the plugin project.\nClosing for now.. Hi @nitishrana28, so phoneNumberKit.parse throws in case the number is invalid for the region. If you pass ignoreType: false it does a harder validation (a bit more costly performance wise).  . Thanks everyone and sorry for the delay, merging.. Hi @joprithiviraj, there is a Swift 3 branch you can use until you transition to Swift 4. . Thanks @Coledunsby, this was merged today.. Thanks @SchmidtyApps, I now understand the need for this but many example numbers are currently being deprecated in the libPhoneNumber metadata and I worry about exposing them in this way. Let's keep this as a feature suggestion and think about the proper way to implement it. . Will close the PR for now. . Thanks @Coledunsby and sorry for the delay. Merging.. That was an interesting discussion, thanks to both. Resolved in: https://github.com/marmelroy/PhoneNumberKit/commit/e281ef66de726839f88487df1380f4e17e44dbcf. This should be fixed in release 2.1.0. Apologies for the delay.. Hi @anilabsinc-ajay, it depends. PhoneNumberKit automatically picks up the user's country code through their SIM or locale preferences. Local numbers without country code will pass validation. International numbers do need a country code to be valid. . This should be fixed in release 2.1.0. Apologies for the delay.. Thanks @redcapua. This is an improvement. Will merge but will move that logic into the parse manager. . This should be fixed in release 2.1.0. Apologies for the delay.. Thanks all and sorry for the delay with this. I think this is a great improvement and will add it to the next release.. Hi @natan. Happy with this direction and a PR will be super appreciated. . Hi @papaz0rgl, sorry for the delay. Metadata has been updated.. Hi @Yurlagin , sorry for the delay. Metadata has been updated.. Thanks @polqf and sorry for the delay, merging. Thanks for reporting @greimers and sorry for the delay, this was an interesting bug.\nTurns out there is a secret extra character in the set of failing numbers (it's a line break unicode char).\nWhen you remove it, everything works as expected:\n        let fails1: String  = \"+49 172 1547608\"\n        let fails2: String  = \"+49 172 1237608\"\n        let fails3: String  = \"+49 172 1234508\"\n        let fails4: String  = \"0172 1234568\"\n        let fails5: String  = \"+49 176 45155875\"\n        let fails6: String = \"+49 157 74284590\"\n        let fails7: String = \"+49 160 99462990\"\n        let fails8: String = \"+49 177 5814332\"\n    let works1: String  = \"+49 172 1234567\"\n    let works2: String  = \"+49 172 3333338\"\n    let works3: String  = \"+49 176 12345678\"\n    let works4: String  = \"0176 34524036\". Thanks a lot @hugo082 and sorry for the delay. This is a very nice PR but is not part of the phone number parsing functionality that this framework was created for.\n\nIf there's a lot of demand for this, we can reconsider.. this is very interesting @janderit and @nichdu - any PR that will help improve compatibility with Linux will be very much appreciated. There isn't one - please try Carthage and Cocoapods. Thanks @nichdu.. The project is not dead - it's just very difficult to find the time to actively maintain it right now - I hope to be able to package together a new release soon. Volunteers and collaborators are welcome.  . Thanks @jguffey - appreciate the PR but this change is no longer relevant. Closing.. @bsarmiento-akurey - sorry for the delay, do you have more details? did you test on device?. PhoneNumberKit was written for Swift, sorry :). Thanks @vinnyt - this is indeed useful. Can you remove all of the empty line changes from the PR?. Thanks for reporting @ashraf-patel. This bug was fixed with the latest libphonenumber release and will be fixed with a new PhoneNumberKit release later today. I have added a unit test for it too. . Thanks @vinnyt - this is great. Can you also update the tests that are failing (see Travis build)?. Thanks @vinnyt, merging. Thanks @natan and sorry for the delay, merging. hi @qgliu (and @mime29) can you share more details about the set up and ways to reproduce? \nwhat exactly are you experiencing when you say it \"doesn't format nor validates correctly.\"?\nThanks,\nRoy. interesting, that seems to be core telephony related (which we use to know the user's current phone language). \nWhat simulator and which version of Xcode? Can you confirm that you're not getting the same log with 2.5.1?. Can we remove the cosmetic line changes and keep this PR focused on the country string. instead of \"countryString\", using \"regionID\" will be more consistent . Please add documentation for countryString above.. ",
    "andresgarza": "+1\n. @marmelroy thanks!, will definitely try it out and send some feedback \n. @marmelroy not sure if it helps at all, but a trick i've seen for formatting credit cards numbers is to use letter spacing (kerning) to fake spaces (as opposed to actually adding spaces to text in textfield)\n. I'm also seeing this, but I noticed that the change to make it open landed after the latest release.\n. ",
    "irace": "Any update on when it's expected that the AsYouTypeFormatter might land?\n. Sounds great. Thanks for the update!\n. Agreed \u2013 I\u2019m finding myself not using TextField, and instead using PartialFormatter directly with a hardcoded max. length value that I\u2019m also checking. Would be great if you could configure PartialFormatter with a \u201clength checking mode\u201d (e.g. for those of us who don\u2019t plan to support extensions).. Also, I added a fatalError where I wasn\u2019t sure how else to proceed, but as someone who knows this library much better than I, perhaps you have a better idea?. @nikolay-kapustin I\u2018m not sure what you mean?. @nikolay-kapustin Hello! Any chance of merging?. +1, please merge. \ud83d\ude4f  Please merge this.. ",
    "mitchellporter": "@marmelroy Thanks for such a fast response. I just ran it in release mode and it's throwing the exception on line 36 in Metadata.swift\n. @marmelroy Quick update for you. I just uninstalled the cocoapod and imported the library manually. It no longer throws the error and is working fine. Looks like something's wrong with the pod.\n. @marmelroy No problem thanks for the fast fix cheers!\n. Any updates on this?\n. @marmelroy Thanks for the update!\n. ",
    "alikaragoz": ":+1: \n. ",
    "Treverr": "It looks like its mostly affecting the UISearchBar in GooglePlacesAutocomplete. It did affect mine in my customer tableview but it seems to be working now, but I'm not quite sure why it affects that one only.\n. If you'd like to look at the issue, https://github.com/Treverr/inSparkle/tree/PhoneNumberKitIssue11 \nIf you type in the Phone Number field, it causes the issue and I'm not sure why. Maybe its just me. But it also causes a crash when closing out the Adding screen. Though no reason in the debugger.\nIf i don't type into the phone number field where it would be formatting, then it works fine. \nSimulate into the Screens as follows and you'll see the issue, Schedule -> + -> Opening -> Mag glass next to Customer Name -> Add Customer -> tap address cell\n. Awesome, thanks for the word of advice! Im newer to this all still so I really appreciate it!\n. It also crashes on .delegate = self\nShould that be removed? I saw that PhoneNumberTextField was a subclass of UITextFieldDelegate\n. ",
    "kpavankotesh": "inhibit_all_warnings!\npod 'IQKeyboardManager'\npod 'RestKit', '0.24.1'\npod 'MagicalRecord'\npod '500px-iOS-api'\npod 'FDWaveformView'\npod 'SDWebImage', '~> 3.7'\npod 'UIActivityIndicator-for-SDWebImage'\npod 'MBProgressHUD', '~> 0.9.1'\npod 'Inflections'\npod 'Bugsnag', :git => \"https://github.com/bugsnag/bugsnag-cocoa.git\"\npod 'SKTagView'\npod 'UICollectionViewLeftAlignedLayout'\npod 'Analytics/Segmentio'\npod 'Analytics/Localytics'\npod 'UAProgressView'\npod 'HPGrowingTextView'\n. ",
    "patzearfoss": "After doing some more exploration, theres some connection to the number of digits and parsing of the extension value:\n```\n(lldb) po PhoneNumber(rawNumber: \"7035205555 x555\")\n\u25bf PhoneNumber\n  - countryCode : 1\n  - leadingZero : false\n  - nationalNumber : 7035205555\n  \u25bf numberExtension : Optional(\"555\")\n    - Some : \"555\"\n  - rawNumber : \"7035205555 x555\"\n(lldb) po PhoneNumber(rawNumber: \"7035205555 x5555\")\n\u25bf PhoneNumber\n  - countryCode : 1\n  - leadingZero : false\n  - nationalNumber : 7035205555\n  \u25bf numberExtension : Optional(\"5555\")\n    - Some : \"5555\"\n  - rawNumber : \"7035205555 x5555\"\n(lldb) po PhoneNumber(rawNumber: \"7035205555 x55\")\n\u25bf PhoneNumber\n  - countryCode : 1\n  - leadingZero : false\n  - nationalNumber : 7035205555\n  - numberExtension : nil\n  - rawNumber : \"7035205555 x55\"\n(lldb) po PhoneNumber(rawNumber: \"7035205555 x5\")\n\u25bf PhoneNumber\n  - countryCode : 1\n  - leadingZero : false\n  - nationalNumber : 7035205555\n  - numberExtension : nil\n  - rawNumber : \"7035205555 x5\"\n``\n. I've forked the library and dug in a bit, and this problem is actually caused byNSDataDetectorin RegularExpressions.swift in thephoneDataDetectorMatches` method.\nThis code snippet highlights the issue. Drop into a play ground to see it in action.  \n``` swift\nimport Foundation\nlet dataDetector = try! NSDataDetector(types: NSTextCheckingType.PhoneNumber.rawValue)\nvar nsString = \"7035551234 x42\" as NSString\nvar stringRange = NSMakeRange(0, nsString.length)\nvar matches = dataDetector.matchesInString(\"7035551234 x42\", options: [], range: stringRange)\nmatches.forEach { (result) -> () in\n    print(result.phoneNumber)   // prints \"Optional(\"7035551234\")\"\n}\nnsString = \"7035551234 x422\" as NSString\nstringRange = NSMakeRange(0, nsString.length)\nmatches = dataDetector.matchesInString(\"7035551234 x422\", options: [], range: stringRange)\nmatches.forEach { (result) -> () in\n    print(result.phoneNumber)   // prints \"Optional(\"7035551234;422\")\"\n}\n```\nI guess the question is, long term, whether PhoneNumberKit should rely on the iOS data detectors.\n. Thanks @marmelroy, this is great news.  \nWe can work around it in the meantime.  Do you think this represents a bug with NSDataDetector? It seems like it to me, but it's so obvious that I can't believe it would be missed.  I think I might file a radar for it.\n. ",
    "kylejm": "Awesome! Thanks you! :blush:\nI agree, but purely for CI alone it's a massive benefit, especially when you have several dependancies. Building each one, then build and testing your own app easily becomes a 10+ min process.\n. Yeah that makes sense. I can fork and upload a prebuilt binary to my fork for the CI.\nP.S. really good seeing you at NSLondon the other week! :)\n. Oaky cool, let me know if you'd like any help with any of it. We're using this in loot.io's iOS app, so we'd love to contribute and support :)\n. ",
    "navisingh": "Any progress with the leak?  It looks like the regex code.\n. ",
    "codytwinton": "@marmelroy - Ok, so in order to create a pull request, would I have to clone or fork your repo?\n. I cloned your repo, branched off of master, made the changes, and committed my changes to that branch. Now, trying to push that branch to remote and getting this:\nPushing to https://github.com/marmelroy/PhoneNumberKit.git\nremote: Permission to marmelroy/PhoneNumberKit.git denied to codywinton.\nfatal: unable to access 'https://github.com/marmelroy/PhoneNumberKit.git/': The requested URL returned error: 403\n. @marmelroy - My confusion was in Cloning vs. Forking. Solved my issue and created the pull request. Thanks!\n. @marmelroy - Any update on the official Swift 3 release?\n. ",
    "nrako": "... right... I feel dumb... :grimacing: \n. Thanks @marmelroy \nI also have an SIGABRT error sometimes but I have the feeling it's related so I'm reporting it here.\n\n\nconsole:\nmyapp(46653,0x700000d5f000) malloc: *** error for object 0x7f8f4a5b54f0: pointer being freed was not allocated\n*** set a breakpoint in malloc_error_break to debug\nSorry for \"screenshooting\" this issue :grimacing: , let me know if I can help in another way.\n. Hi @marmelroy, okay but as per my screenshot from the test with libPhoneNumber I would expect the number 0765550055 with region BR to fail and not be parsed.\n. You are right it does:\nhttps://github.com/iziz/libPhoneNumber-iOS/blob/f35561517fb4b199b561a24d33216dfe8f0df8c3/libPhoneNumber/NBPhoneNumberUtil.m#L2323\n. I was thinking of sending a PR, but I'm not sure that all PhoneNumber should be a valid number or valid number for a region.\nI can see cases where I want the user to only be able to enter a valid phone number; e.g to receive a sms for validation, and optionally for a region specifically selected by the user. But there's cases where I just want to prevent dialling impossible/non-parsable number, but I'm fine to let the user try (and maybe fail) with an invalid number.\nMoreover for performance reason it's probably best to just parseMultiple numbers without trying to validate them.\nMaybe PhoneNumber should be considered as a \"possible\" number and have the isValidNumber and isValidNumber:forRegion methods? What do you think?\n. @marmelroy :+1: let me know\n. ",
    "aaisataev": "forgot add to embedded binaries\n. ",
    "nico75005": "My question might be a bit stupid but why when I install the later version with cocoapods, I don't get this commit?\n. Thanks. Is it actually safe to do this? \npod 'PhoneNumberKit', :git => 'https://github.com/marmelroy/PhoneNumberKit'\n. ",
    "dr-skot": "Would be great if PhoneNumberTextField and PartialFormatter exposed whether the number is valid or not, and its best guess as to the region.\nFor example, I want to show a validation checkmark next to the text field, and a flag indicating the country, with both updating on the fly as the user types.\n``` swift\noverride func viewDidLoad() {\n    super.viewDidLoad()\n    textField.addTarget(self, action: \"textFieldDidChange:\", forControlEvents: UIControlEvents.EditingChanged)\n}\nfunc textFieldDidChange(sender: AnyObject) {\n   showFlagForRegion(textField.currentRegion)\n   showCheckmarkIf(textField.isValidNumber)\n}\n```\nI've implemented currentRegion by having PartialFormatter report its currentMetadata.codeID. To determine isValidNumber, I try instantiating a PhoneNumber at the top of formatPartial, and see if an error gets thrown. There may of course be a better way.\nThanks for the great module!\n. ",
    "adrianchifor": "Happens to me as well. Got the same stacktrace as @nrako \n. This is where it crashes:\n\n\nThe stacktrace:\n\n. @marmelroy Managed to solve this for my project. Turned out that the issue was being caused by passing a string to PhoneNumber.init from a strings array which was passed by reference to my function. The strings array was modified on another thread which caused EXC_BAD_ACCESS because PhoneNumberKit was trying to use a string that was no longer there.\n. ",
    "Jean-Daniel": "This crash is due to concurrent access to the regularExpresionPool in RegexManager.. Out of curiosity, why don't you just use Int.hashValue instead of using tricks with Int(truncatingBitPattern:) and MemoryLayout.\nswift\n public var hashValue: Int {\n  return countryCode.hashValue ^ nationalNumber.hashValue + leadingZero.hashValue + numberExtension?.hashValue ?? 0\n}. ",
    "sentiasa": "Your approach (having UIPickerView on the left of PhoneNumberTextField). If you can achieve what you are trying, I'd be grateful to read a mini-walkthrough from you. That would be amazing if you can write it here, below..\n. @marmelroy That would be interesting to see an example app on using @AliSoftware 's UIPicker & flags approach \n. @marmelroy Please drop here a message too when the demo get added. Seeing flags with PhoneNumberKit would be very interesting to see.. Thanks..\n. ",
    "fikus": "In addition to using the incorrect metadata described above, the type determination can also be incorrect based on the usage of possibleNumberPattern. (This is related to the workaround in #33)\nExample:\nswift\n    func testUSTollFreeNumberType() {\n        guard let number = try? PhoneNumber(rawNumber: \"8002345678\") else {\n            XCTFail()\n            return\n        }\n        XCTAssertEqual(number.type, PhoneNumberType.TollFree)\n    }\nThe type is incorrectly determined to be PremiumRate because the premium rate possible number pattern is the generic pattern \\d{10}.\n. The unit test failures are caused by two bad regular expressions in the metadata for region PM:\n\"nationalNumberPattern\": \"41\\\\d{4} \"\n\"nationalNumberPattern\": \"55\\\\d{4} \"\n(they include a trailing space.)\nI don't know exactly how the metadata file is generated so I don't know what exactly the source of this error is.\n. ",
    "mcrakhman": "Thank you very much! Will update and try.\n. ",
    "HaiLe": "Hi @marmelroy - thanks for the help! upgrade to xcode 7.3 and swift 2.2 fixed the issue!\n. ",
    "salsysd": "@marmelroy so 0.6.3 should be good with xcode 7.2 etc?\n. @marmelroy  Im still on Xcode 7.2. think this commit broke it for backwards compatibility...\nhttps://github.com/marmelroy/PhoneNumberKit/commit/c5ea038f98d9abf4b4ee001b9791643c96f5f74c#diff-e5a05125374826bda329e1120ed969fc\nis associatedtype a swift 2.2/3 thing?\n. ",
    "dulacp": "I'm seeing that the resulting PhoneNumber instance has a type of Unknown.\nShouldn't it raise an exception ?\n. Ok! Thank you for the very clear explanation. So my tests are not implemented correctly.\nNow I see that type is a computed property ! it all makes sense for performance purposes, my bad.\nI will keep on posting if I have unexpected behaviors in the coming weeks.\nFeel free to close this issue if you need to, and thanks for this very well structured project !\n. ",
    "chow-land": "Im having the same issue (the first one). I set PhoneNumberTextField as my custom UITextField class, re-wired the outlet, but it doesn't format when I type.\n. Thanks @piyushkantm , I just set the module and it works for me now as well. \nThanks for the README update @marmelroy ! Library is looking great so far.\n. ",
    "piyushkantm": "this is in the VC file..\nlet phoneNumberKit = PhoneNumberKit()\n@IBOutlet weak var phoneNoField: PhoneNumberTextField!\nand in storyboard, i have set the custom class of 'phoneNoField' as PhoneNumberTextField\nstill it doesn't format the number as i type!!\n. just got it working..\nturns out there is no requirement to even change ViewController class..\nwhen you set the class in storyboard as PhoneNumberTextField, then select the PhoneNumberKit module from dropdown.. it worked for me.\n. thanks @marmelroy for updating README\nWelcome @chow-land  ;)\n. ",
    "maninderssoor": "Thanks so much @marmelroy !!!\n. ",
    "dmcgloin": "Thanks @davbeck and @marmelroy \nI have some questions regarding the change to remove the dispatch_once function in ParseOperation.swift. It looks like Swift 3 no longer allows using dispatch_once:\n.../PhoneNumberKit/ParseOperation.swift:133:9: 'dispatch_once' is unavailable in Swift: Use lazily initialized globals instead\n...and therefore a change was made to resolve this - which is good. This appears to be one of the few changes not automatically suggested by the Swift 3 Migrator tool.\nHowever, I have 2 questions:\n1. Do we think think the proposed change is safe? I haven't scrutinized the code, but it looks like the guarantees of dispatch_once have been removed in favor of a simplified state check.\n2. For this specific change, if we think the proposed change is appropriate, can we roll that change into the master branch supporting Swift 2.2 (and implicitly Swift 2.3)?  It looks like code could be written to cross-compile in Swift 2.x and Swift 3.0.  This would greatly assist in smoothing out the transition phase while Xcode 8 is in beta.\nThanks again for the awesome work!\n. This change is backwards compatible with Xcode 9. Very little risk. Can we get this approved?. ",
    "davbeck": "dispatch_once shouldn't be used here regardless of what version of Swift is being used. From the documentation:\n\nDeclaration\ntypedef long dispatch_once_t;\nDiscussion\nVariables of this type must have global or static scope. The result of using this type with automatic or dynamic allocation is undefined. See dispatch_once for details.\n\nIt has been a fairly common misuse of dispatch_once to use it to initialize or perform tasks once for a given object since the introduction of the API in ObjC. I'm guessing this is why it was deprecated in Swift 3, since most proper use cases for it are covered by global variable initialization (which uses dispatch_once when it is safe to do so and not using it when it isn't).\nAs far as the safety of the code otherwise, I haven't looked that closely at the operation. Generally NSOperations do need to be thread safe because their properties are accessed from multiple queues when other operations depend on them. From what I could see, there was nothing in place to protect the rest of the code though. It wouldn't hurt to wrap access to the operations properties with either a serial dispatch queue or a mutex.\n. ",
    "ignotusverum": "Oh, i see, thanks for such quick response @marmelroy !\n. ",
    "raghavdelhi": "Just noticed the swift 3 branch. \n. ",
    "doublesA": "Having similar error. Version 0.8.5 isn't compiling correctly with swift 3.\n. ",
    "clintburgos": "I got it to compile by making a few changes myself. Hopefully we get an official update though.\n. ",
    "cody1024d": "I've narrowed it down to something within the PhoneTextField file.  I removed that file after importing PhoneNumberKit, and it works.  Obviously that is not a valid solution, but I'm trying to narrow down the culprit.\nIt has something to do with the fact that PhoneTextField extends from UITextField.  I'm just utterly not sure why that would break the above convenience methods.  I have other custom views within my own project, and they work as intended\nOk, I solved my own problem, but still am curious if you have any insight into why it's occurring in the first place.  In the above code, I had to add specificially:\n``` swift\nextension UITextField : Creatable {\n}\n```\nThis is a bit strange to me, as a UITextField is a UIView, so why I had to specifically define that protocol-conformance, I have no idea.\n. @marmelroy  I'm actually using the swift2.3 branch\n. ",
    "rsaarloos": "Thanks for the quick reply.\nNot yet upgraded to 1.x due to my project not being Swift 3 ready. I planned to do this in the coming weeks. Will keep you up to date if this significantly improves performance.\n. I upgraded to Swift 3.0 and the latest version of the PhoneNumberKit and the issue is now less apparent.\nI tried out the special function for parsing an array of phone numbers and was quite disappointed with the performance. On a dataset of 2000 phone numbers it took 3 seconds to read them of the phone's contacts and about 20 seconds to parse them with PhoneNumberKit. In the resulting array I also lost 600 phone numbers as the parsing function only returned 1400 results.\nThis test was done on an iPhone 5. Maybe I'm doing something wrong here as the main page talks about 1000 parses -> ~0.4 seconds.\nAny ideas?\n. ",
    "jpstern": "Ah, good call.  If I pull down from master instead of the latest release it works as expected.\n. ",
    "Junus": "@sorth-hiya did you found solution for this?. ",
    "varungoyal44": "I did some research into this number. 555 does not seem to be a valid area code.. ",
    "StevenArmandLee": "I see. Do you have any kind of solution for my problem? As i want implementation SkyFloatingLabelTextField. ",
    "rivera-ernesto": "This would also help cases where the metadata is not up to date for some region.\nEven more, probably the framework not recognizing a phone type shouldn't be an exception but just a limitation of the framework.\n. ",
    "brianmichel": "@marmelroy do you think this is an acceptable change?\n. Thanks @marmelroy!. ",
    "rwichmann": "Same here!. ",
    "ibrahimchiha": "Not compiling on Xcode 9 . ",
    "NikKovIos": "I've created PR. Sorry, i wrote it because needed at work). ",
    "sgapr": "Still the same. Looking inside the parse code, ignoreType does not seem to cut down any code. Below is the only usage of ignoreType\nswift\n   let type = parser.checkNumberType(String(nationalNumber), metadata: regionMetadata, leadingZero: leadingZero)\n        if type == .unknown && !ignoreType {\n            throw PhoneNumberError.unknownType\n        }. Hi, this is still slow (11 seconds instead of 12-15seconds for 686 parses).\nI fired up instruments and most of the time is in getRegionCode. I think that line can also be removed if ignoreType == false, in the code below\nswift\n       if let regionCode = getRegionCode(of: finalNationalNumber, countryCode: countryCode, leadingZero: leadingZero), let foundMetadata = metadataManager.territoriesByCountry[regionCode] {\n            regionMetadata = foundMetadata\n        }\n        var type: PhoneNumberType = .unknown\n        if ignoreType == false {\n            type = parser.checkNumberType(String(nationalNumber), metadata: regionMetadata, leadingZero: leadingZero)\n            if type == .unknown {\n                throw PhoneNumberError.unknownType\n            }\n        }. and perhaps, make getRegionCode faster by fixing the following line, as you have done in other places. instruments shows that line as the culprit.\nswift\nlet regions = metadataManager.territories.filter { $0.countryCode == countryCode }. Thanks @marmelroy , performance is good now \ud83d\udc4d . ",
    "dasoga": "After the steps. I had to update settings to legacy swift version.\nI did this in Xcode 8.1\nThank you!\n. Is 1.0.1\nI thought that it was updated to 1.1.0.\nBut is working now after update legacy swift version to the library.. ",
    "mrubin": "I see that you did this in 2ce9e2a8de4766264f67f6f4ea359f4cae61fbf4. Thank you very much!. ",
    "Sol88": "I think the problem is here \npublic class func defaultRegionCode() -> String {\n...\n        let currentLocale = Locale.current\n        if #available(iOS 10.0, *) {\n            let countryCode = currentLocale.regionCode\n            return countryCode?.uppercased() ?? \"\"\n...\n}\nmaybe it should be better \npublic class func defaultRegionCode() -> String {\n...\n        let currentLocale = Locale.current\n        if #available(iOS 10.0, *) {\n            let countryCode = currentLocale.regionCode\n            if let countryCode = countryCode?.uppercased() {\n                return countryCode.uppercased()\n            }\n...\n}\nso if this condition fails we will return \nreturn PhoneNumberConstants.defaultCountry. ",
    "sreeji44": "For Example +1 (545) 635-2544 here i need to change the international country code +1. because the user cannot know easily. i think you get my question. . ",
    "jazzgil": "I've noticed that this happens because of the parenthesis. If you manually remove the parens, formatting returns.. ",
    "templeman15": "This also occurs when using PartialFormatter().formatPartial() directly. Is there any specific reason why or should it be fixed in the PartialFormatter and not in TextField?. ",
    "AppsTitude": "I've seen various enums with outdated documentation as well. ",
    "artyom-stv": "You are right. I didn't think of it (that Int64 conforms to Hashable too).. ",
    "Chatatata": "That's what I was searching for. Saved my day, thank you.. ",
    "appsforall": "Of course. Not sure how you manage collaboration, but looking at existing PR's this seems the way to go. https://github.com/marmelroy/PhoneNumberKit/pull/114. @marmelroy See above comment + my PR. Any chance you can review the PR and give feedback? Thanks!. ",
    "kuyazee": "Same problem I'm getting here. This is a valid Indonesian number 87723232065 but it says that the mobile number is invalid. I'm using the Swift 2.3 Branch\n. @marmelroy actually it isn't cause I live in the Philippines and there is no such number that is +6309(10 digits) what you showed i.e. this is +6309(9 digits) which is possible.\n+6309(10 digits) Not valid \n+6309(9 digits) valid. ",
    "Chakery": "Sorry, it was my wrong expression that made you misunderstood.\nI would like to obtain the corresponding country code according to the mobile phone number, but not directly get the country code for the location of the phone.\nThank you so much.. ",
    "bargangilo": "@marmelroy: I'm also having issues getting PhoneNumberKit to validate a mobile number from the Philippines. No matter how I enter the number in I either get notANumber or unknownType errors. \nFor example:\nhttps://libphonenumber.appspot.com/phonenumberparser?number=%2B639561331299&country=63\nLibphonenumber sees this as valid, but PHK won't validate it. Even with the simulator set to the Philippines region.. @marmelroy: Ok, if I add the zero in it also returns isValidNumberForRegion as false. I guess this is a libphonenumber issue then? Because I most definitely have a working number. \nIs PHK only looking at the isValidNumberForRegion? Is there any way to turn that off and only check isValidNumber and isPossibleNumber?. But not the regional validation?. Also I've submitted an issue to libphonenumber: https://github.com/googlei18n/libphonenumber/issues/1710. ",
    "johnolwamba": "Is there an example number? I have looked it up and not found it. Its there in libphonenumber. Please assist. ",
    "mxcl": "My bad, the PhoneNumberKit class exposes this information.. There's many dead projects on GitHub, glad this isn't one!\nSo far this has been a super useful project, many thanks for it.. ",
    "eliburke": "Old issue.. but you can use phoneNumberTextField.isPartialFormatterEnabled = true / false to enable and disable number formatting when setting .text = \"123\" . These workarounds are useful, but it'd be great if the raw input was kept available in PhoneNumberTextField, or if PartialFormatter provided a method, or even the internal PhoneNumberParser was public. I wanted to be able to clean up the formatting when the user backspaces a number, and went down a rabbit hole for an hour trying to use nationalNumber() (which strips off country codes) and parse() (which won't parse incomplete numbers).. ",
    "hungeric": "I would second this feature request. ",
    "Sudarshanshetty": "Ya we are looking for multiple numbers,  saw the equivalent Android lib. that has a method Findnumbers to get all the numbers in text. ",
    "KheangSenghort": "I really love your SDK phoneNumberKit, because it help our terms developer make easy & faster to load local contact to process other transaction.. ",
    "Blackjacx": "Oh thank you :-). ",
    "imanzarrabian": "Hey\nI spent some time looking for what was the performance issue I was having in my app till instruments gave me the answer. \nThe PhoneNumberKit allocation seems quite heavy and I saw later that you mentioned this in issue #92 \nI just added your comment from the issue to the readme file hoping it will help. \nLet me know what you think about it ;). ",
    "swiftlyfalling": "@suyashb734: Using the latest of the master branch, the result I'm getting for:\nswift\nlet result = try phoneNumberKit.parse(\"+917983186834\")\nis:\nPhoneNumber(\n    numberString: \"+917983186834\",\n    countryCode: 91, \n    leadingZero: false, \n    nationalNumber: 7983186834, \n    numberExtension: nil, \n    type: PhoneNumberKit.PhoneNumberType.mobile\n)\nAre you using the latest version?. Can you provide valid AU sample phone numbers that exhibit the problem? (i.e. Can you find a phone number that's tested to work - ex. for a local business that posts it publicly - that meets either of your failure criteria?)\nIf you enter those same phone numbers into libphonenumber's Javascript Demo, do they also fail?\n(The earlier excerpt that @arslanmalik provided is only a small section of the AU phone number rules.). ",
    "anilabsinc-ajay": "Not able to parse 999988877, 09999888777, +91999988877. Yes also the withPrefix should be public so that we can subclass them. ",
    "apetrelli12191991": "Having issues with multiple 919 area code numbers (Raleigh, NC area). ",
    "phatmann": "Implements request from #118 . Any chance of getting this PR merged? I am open to making changes as needed.. Not ready yet. Any questions about this PR? @marmelroy . ",
    "rweindl": "Having the same issue for Australian 0440 prefixed numbers. Would be awesome to take a look into that! Region is also detected but code is returning an .unknown type for\ntype = parser.checkNumberType(String(nationalNumber), metadata: regionMetadata, leadingZero: leadingZero)\nwhich then results in\nthrow PhoneNumberError.unknownType. ",
    "Pro2005": "Hi, I call textField:shouldChangeCharactersInRange after assigning new value. That performs update of textField\n`textField.text = \"1231321321\"  \ntextField.textField(textField, shouldChangeCharactersIn: NSMakeRange(0, 0), replacementString: \"\")`. Hi, here is my solution :\nswift\nguard let phoneNumber = try? phoneNumberKit.parse(text, withRegion: self.countryLabel.text!, ignoreType: true) else {   \n            delegate?.editProfileTextFieldCell(self, didUpdate: \"wrong value\")\n            return\n        }   \nlet e164 = phoneNumberKit.format(phoneNumber, toType: .e164)\ndelegate?.editProfileTextFieldCell(self, didUpdate: e164). ",
    "kishykumar": "@p3scobar Found any solution to this?. ",
    "morisk": "Its different. isNumberMatch have from iziz's libPhoneNumber have multiple results:\ntypedef NS_ENUM(NSInteger, NBEMatchType) {\n  NBEMatchTypeNOT_A_NUMBER = 0,\n  NBEMatchTypeNO_MATCH = 1,\n  NBEMatchTypeSHORT_NSN_MATCH = 2,\n  NBEMatchTypeNSN_MATCH = 3,\n  NBEMatchTypeEXACT_MATCH = 4\n};. ",
    "nikolay-kapustin": "@irace oops so sorry, I'm writing comment inside commit fork page, not see pull request. @marmelroy Come on guys! . @marmelroy please please please!. come on\u001b guys! \n34 bullshit warnings, let's move out!\nJust do it! \ud83d\ude02. https://github.com/marmelroy/PhoneNumberKit/pull/174. ",
    "brendan09": "Xcode 9 / Swift 4 is GM now. Any chance of this being merged soon?. ",
    "dpopov": "Just added another 4.0 branch. This includes all of your changes with two adjustments:\nI removed the superfluous }.flatMap{$0} in PhoneNumberKit.swift \nAnd where you used a guard/fail I give it default value of start/end. The final .flatMap is actually extra since the .map is already returning a flat array of [String]?. I added a pull with upgrades to swift 4. ",
    "yousifa": "you can do this by looking at area codes. To make this easier, use an API like https://numverify.com/ and send them the phone number in e164 format (see a recent issue where I responded how to do that). The API includes the location in its response.\nAnother way is to build a local dictionary of all area codes and their locations (you can get it from https://www.areacodelocations.info/areacodelist.html), then parse the phone number for the 3 numbers after the +1 and search the dict for the area code.. It isn't difficult to implement this and it sounds reasonable to me. I don't currently have time to do this though, hopefully someone else can pick it up? @marmelroy . +1 here. Here is a one liner to get raw phone number in .e164 format (includes country code and +)\n```\n@IBOutlet var _phoneNumber: PhoneNumberTextField!\n@IBAction func SomeButton(_ sender: Any){\nlet phoneRaw = phoneNumberKit.format(try phoneNumberKit.parse(_phoneNumber.text!), toType: .e164)\n}\n```. ",
    "gligorkot": "@yousifa thanks for your reply, so currently there's:\npublic struct PhoneNumber {\n    public let numberString: String\n    public let countryCode: UInt64\n    public let leadingZero: Bool\n    public let nationalNumber: UInt64\n    public let numberExtension: String?\n    public let type: PhoneNumberType\n}\nwhat you're suggesting is to look at the nationalNumber? Is that right? How is that going to give me the country?\nI am really talking about this function:\npublic func mainCountry(forCode countryCode: UInt64) -> String?\nCurrently this will return US for a number that has a country code of 1, but that could be Canada or any of the islands that start with +1xxx as I mentioned in my question. If there is a solution for this I would appreciate your guidance with a code example if you don't mind?\nThanks in advance!. Thanks for offering these solutions @yousifa. My understanding was that PhoneNumberKit already has a local dictionary of all area codes, well at least it does for phone number verification purposes, maybe not for getting the exact location. This is the reason for my \"feature request\" as it would be great to have a method like this:\npublic func country(forPhoneNumber phoneNumber: PhoneNumber) -> String?\nIs this not an appropriate feature request?. Another option for this would be to add country to the PhoneNumber struct, perhaps?\npublic struct PhoneNumber {\n    public let numberString: String\n    public let countryCode: UInt64\n    public let leadingZero: Bool\n    public let nationalNumber: UInt64\n    public let numberExtension: String?\n    public let type: PhoneNumberType\n    **public let country: String**\n}\nI am happy to try and implement this and send a PR if you let me know which solution you like better?\n  . Hi @OlivierLapraye, no I have not worked on this one at all; would still be very handy to have it though so do let me know if you manage to work it out. Thanks Olivier, code snippets would definitely help; potentially for whoever implements this feature too!. Can we please get this merged in? Upgrading my project to Swift 4 and this is the only library that's not working yet.. ",
    "OlivierLapraye": "@gligorkot Have you done a PR by this time ? Or found a simple way to do it by yourself ? I would like to be able to separate the 25 countries using the +1 code. I am not familiar with the library and how it works, so I did an extraction for my project : \nIf there are several countries for a country indicator (e.g. +1 has 25 values: US, CA, US Islands, etc), I look in a list of structures which contains the rules for each country. If the indicator is +1 and starts with 204, 226, ... then I know it's Canada. My structure contains : \n- The country indicator: +1\n- The nth first digits to take in consideration (3 for Canada)\n- The list of possible digits: 204, 226, ...\n- The country abreviation: CA\nI don't know if I am very clear, I can share code snippets if you'd like.. ",
    "SchmidtyApps": "Hey @marmelroy no worries on the delay! The example numbers are useful in situations where we need user input for phone number where the user can select their country code usually a text field. Basically it\u2019s used for ghost text so the user can see the format to be entered similar to how the Lyft app works. Since we don\u2019t know how many digits there will be we can\u2019t generate an example number because some countries have longer numbers with more digits etc. the example numbers provide an easy way to grab this info. See attached screenshots of lyft app. Thanks!\n\n\n. I have opened a pull request to implement this behavior. Adding example phone number function to PartialFormatter #159. @marmelroy I didn't see where example numbers are being deprecated but that makes sense. They seem to still have example numbers listed in their readme so I don't think they are getting rid of them. The way I had added the example numbers they were optional though so if one didn't exist it would just return nil and the developer could gracefully handle it. I can just use my fork until you decide what you want to do. Thanks!. @marmelroy Have you given this anymore thought? I need the example numbers in the next month or so and would be happy to do the work. I still think a good temporary solution could be what I had proposed before where it returns an example number or nil if one doesn't exist. Please let me know your thoughts. Thanks!. ",
    "MSavisko": "@Pitsko \nAdd \"+\" at start of the phone number.\nlet phoneNumber = try phoneNumberKit.parse(\"+375336867646\", withRegion: \"BY\"). ",
    "nab0y4enko": "@marmelroy, merge, please...\n\n. ",
    "fluidsonic": "Still not compiling on Swift 4 in Xcode 9:\nPods/PhoneNumberKit/PhoneNumberKit/NSRegularExpression+Swift.swift:16:32:\n'distance(from:to:)' is unavailable: Any String view index conversion can fail in Swift 4; please unwrap the optional indices. ",
    "speedyacme": "+2, please merge.. ",
    "honkmaster": "+3. ",
    "Gerst20051": "Nevermind I still haven't figured out how to get my app updated to Swift 4 it keeps failing.. You need to update your app to use Swift 4 that's why it's giving this error. My app was still configured to use Swift 3.. You need to update your app to use Swift 4 that's why it's giving this error.. ",
    "JRuedas": "Hi, \nI don't know why this issue is closed because actually it's an error.\nEven if you are able to avoid the error in XCode (as I did) when you try to use fastlane to build the app it will fail.\nI opened a new issue showing the error: #171 . @williamtwilson check pod's configuration, I'm not really sure because I solved the issue long time ago, but I remember that was related to that, I'll check it asap :). That's true, it worked after upgrading Swift versi\u00f3n in App's Podfile.. ",
    "williamtwilson": "My app is using Swift version 4, and I'm still seeing this error.. My app is using Swift 4 and I still see this error. Maybe it's a Cocoapods issue? I'll try to gather some more information.. I found the issue in my app. It was a Cocoapods configuration. Rather than update all of our dependencies to Swift 4 at the same time that we updated our app to Swift 4, we chose to update the app first then update the dependencies. If you have something like this in your Podfile, you should adjust it to skip your Swift 4 pods.\n```\npost_install do |installer|\n  installer.pods_project.targets.each do |target|\n    target.build_configurations.each do |config|\n      # This is a fix around the fact that Pods need to build using 3.2 and CocoaPods defaults to the project\n      # Swift version which is currently 4.0. In the reference discussion there's an example for when the dependencies\n      # become a mix of 3.2 and 4.0 Swift versions.\n      # Ref: https://github.com/CocoaPods/CocoaPods/issues/6791\n      config.build_settings['SWIFT_VERSION'] = '3.2'\n    end\n  end\nend\n. ",
    "mzm008": "still this error range(at:)' has been renamed to 'rangeAt(_:). ",
    "shlomnissan": "I fixed it by changing the Swift Language Version in build settings to Swift 4. I also had to clean my build folder, update my pods and restart Xcode before it would compile. Hope it helps. ",
    "DanielCreagh": "This needs to be merged in for it to work with version of Xcode 9.. ",
    "miklselsoe": "This already fixed and merged in #164 . ",
    "weyert": "Could we merge this PR? This would make my project nice and tidy again :). ",
    "larsacus": "Since Xcode 9.1 is no longer in beta and is being auto-updated via the App Store, can we get this bumped up in priority? Like stated earlier, It appears these are extremely low risk considering we're moving from identical APIs up the object chain one position.\nLet me know if I can help out in any way that I can.\n\ud83c\udf7b . ",
    "SkylerSeamans": "These changes seem very low risk and would clean up the warnings in Xcode 9.1. @marmelroy . ",
    "joshfriend": "Warnings can be disabled for a specific pod with:\nruby\npod 'PhoneNumberKit', '~> 2.0', :inhibit_warnings => true. ",
    "kindraywind": "Please merge this for god's sake. ",
    "redcapua": "Maybe \"+\" as a prefix has been omitted?\n. ",
    "Coledunsby": "https://github.com/marmelroy/PhoneNumberKit/pull/179. ",
    "klemenzagar91": "im also looking for having examples in our app. I hope this will soon be part of this library. I have exactly the same problem. I run it on the simulator and if I try to parse phone number 031 774 305 i got back the result that phone number is not valid.\n. ",
    "f3ell0w": "Any updates on this?. ",
    "rpotze": "It seems this can be fixed by catching this case in a special condition at the very beginning of the: open func textField(_ textField: UITextField, shouldChangeCharactersIn range: NSRange, replacementString string: String) -> Bool method in PhoneNumberKit.\nDetails are explained in the code comments below.\nI have not tested this extensively but it seems to be a harmless fix given that the condition has a pretty narrow scope.\nThe condition to be added at the beginning is:\n```\n// When an autocomplete phone number is selected by the user, the values passed\n// in this call are curious:\n// - range: an NSRange with location: 0, length: 0\n// - replacementString: \" \"\n// In this case, return true to allow the edit without any further processing.\n// Note: No PhoneNumberKit formatting will be applied in this case but\n// that seems acceptable as it is more intuitive for the user that the phone number\n// selected in the keyboard is copied exactly into the field when tapped,\n// without formatting changes.\n// Note: This code can also be triggered in the Simulator (or a device?) by using a\n// hardware keyboard and pressing the space bar. The effect is pretty harmless in any\n// case, it just enters the space as the first character.\nif range == NSRange(location: 0, length: 0) &&\n    string == \" \" {\n    // print(\"User tapped autocomplete phone number in keyboard.\")\n    return true\n}\n```\n. ",
    "CoolHandLuke88": "This still seems to be issue. Selecting the autofill in keyboard won't populate the field.. ",
    "ThibaultVlacich": "@CoolHandLuke88 It's because the maintainer of this project seems absent and haven't released a new version since this fix has been pushed. You can import the pod directly from the git repo to have the fix:\npod 'PhoneNumberKit', :git => 'https://github.com/marmelroy/PhoneNumberKit.git', :commit => 'e281ef6'. ",
    "Monserg": "Hi.\nToday I add framework to my App & see this:\nhttp://take.ms/ylvi3\n. ",
    "namannik": "Here's how I'm getting a raw number from a formatted number in my application.  (It's probably not the most efficient way to do this, but hey, it works.)\nswift\nfunc rawPhoneNumber(_ number: String) -> String {\n    var rawNumber = \"\"\n    for index in number.indices {\n        let nextDigit = String(number[index])\n        if Int(nextDigit) != nil {\n            rawNumber = rawNumber + nextDigit\n        }\n    }\n    return rawNumber\n}. To disable area code matching, you might try setting the ignoreType parameter to true when calling parse.  For example:\nswift\ntry phoneNumberKit.parse(\"555-555-1234\", withRegion: \"US\", ignoreType: true)\nThis will add the appropriate country code, but skip number type checking.. ",
    "NeelSarwal": "We ended up just doing something like this\nswift\nfunc rawFormat(_ formattedNumber: String) -> String {\n    return formattedNumber.filter { Int(String($0)) != nil }\n}. ",
    "bmwalters": "Duplicate of #168. PhoneNumberKit is now a Swift 4 library, so to use the newest version you need to update your app to Swift 4. @seagullman . ",
    "efirestone": "I'm not a maintainer of the project, but the diff looks good to me (and we're interested in getting this change as well).\nA possible couple improvements for consideration:\n- Define JSONDataCallback as () throws -> Data rather than () -> Data?, with the thought being that a failure to get the data is really an error (there is no \"successful\" case where no data is returned). This is mostly just an API clarification.\n- Rather than defining MetadataManager.init as:\npublic init (JSONDataCallback: JSONDataCallback? = nil)\ninstead define it as\npublic init (JSONDataCallback: JSONDataCallback = defaultDataCallback)\nwhere defaultDataCallback does the standard behavior of looking up the data from the local bundle. This has two small advantages:\n- The API is clearer. There is no guessing what nil means in the API.\n- There is no internal dependency on the local bundle's file. defaultDataCallback would be a static function, so after initialization the class has zero notion of the default bundle and its resources.. @marmelroy, any chance of landing this soon? We'd love to be able to adopt this project but require this addition.. ",
    "pocketlim": "Hey @marmelroy want to take a look at this? This would be useful to get a list of countries we can select in a table if the user doesn't know their country code. . I've pinged @marmelroy about some updates since July 7, 2018, and no response. \nThere are 10 PRs, none of which have responses from him either. \nYou can draw your own conclusions, but it's looking like the maintainer hasn't looked back.. ",
    "mime29": "Based on the iso 639 spec and the list of codes+countries found here:\nhttps://docs.oracle.com/cd/E13214_01/wli/docs92/xref/xqisocodes.html\nI made a function:\nprivate extension String {\n    var countryName: String {\n        switch self {\n        case \"AB\": return L10n.abkhazian\n        case \"AA\": return L10n.afar\n        case \"AF\": return L10n.afrikaans\n        case \"SQ\": return L10n.albanian\n        case \"AM\": return L10n.amharic\n        case \"AR\": return L10n.arabic\n        case \"HY\": return L10n.armenian\n        case \"AS\": return L10n.assamese\n        case \"AY\": return L10n.aymara\n        case \"AZ\": return L10n.azerbaijani\n        case \"BA\": return L10n.bashkir\n        case \"EU\": return L10n.basque\n        case \"BN\": return L10n.bengali // (Bangla)\n        case \"DZ\": return L10n.bhutani\n        case \"BH\": return L10n.bihari\n        case \"BI\": return L10n.bislama\n        case \"BR\": return L10n.breton\n        case \"BG\": return L10n.bulgarian\n        case \"MY\": return L10n.burmese\n        case \"BE\": return L10n.byelorussian //(Belarusian)\n        case \"KM\": return L10n.cambodian\n        case \"CA\": return L10n.catalan\n        case \"ZH\": return L10n.chinese\n        case \"CO\": return L10n.corsican\n        case \"HR\": return L10n.croatian\n        case \"CS\": return L10n.czech\n        case \"DA\": return L10n.danish\n        case \"NL\": return L10n.dutch\n        case \"EN\": return L10n.english\n        case \"EO\": return L10n.esperanto\n        case \"ET\": return L10n.estonian\n        case \"FO\": return L10n.faeroese\n        case \"FA\": return L10n.farsi\n        case \"FJ\": return L10n.fiji\n        case \"FI\": return L10n.finnish\n        case \"FR\": return L10n.french\n        case \"FY\": return L10n.frisian\n        case \"GL\": return L10n.galician\n        case \"GD\": return L10n.gaelic //(Scottish)\n        case \"GV\": return \"\" //l10n.gaelic //(Manx)\n        case \"KA\": return L10n.georgian\n        case \"DE\": return L10n.german\n        case \"EL\": return L10n.greek\n        case \"KL\": return L10n.greenlandic\n        case \"GN\": return L10n.guarani\n        case \"GU\": return L10n.gujarati\n        case \"HA\": return L10n.hausa\n        case \"HE\": return L10n.hebrew\n        case \"HI\": return L10n.hindi\n        case \"HU\": return L10n.hungarian\n        case \"IS\": return L10n.icelandic\n        case \"ID\": return L10n.indonesian\n        case \"IA\": return L10n.interlingua\n        case \"IE\": return L10n.interlingue\n        case \"IU\": return L10n.inuktitut\n        case \"IK\": return L10n.inupiak\n        case \"GA\": return L10n.irish\n        case \"IT\": return L10n.italian\n        case \"JA\": return L10n.japanese\n        //case \"JA\": return l10n.javanese\n        case \"KN\": return L10n.kannada\n        case \"KS\": return L10n.kashmiri\n        case \"KK\": return L10n.kazakh\n        case \"RW\": return L10n.kinyarwanda //(Ruanda)\n        case \"KY\": return L10n.kirghiz\n        case \"RN\": return L10n.kirundi //(Rundi)\n        case \"KO\": return L10n.korean\n        case \"KU\": return L10n.kurdish\n        case \"LO\": return L10n.laothian\n        case \"LA\": return L10n.latin\n        case \"LV\": return L10n.latvian //(Lettish)\n        case \"LI\": return L10n.limburgish //( Limburger)\n        case \"LN\": return L10n.lingala\n        case \"LT\": return L10n.lithuanian\n        case \"MK\": return L10n.macedonian\n        case \"MG\": return L10n.malagasy\n        case \"MS\": return L10n.malay\n        case \"ML\": return L10n.malayalam\n        case \"MT\": return L10n.maltese\n        case \"MI\": return L10n.maori\n        case \"MR\": return L10n.marathi\n        case \"MO\": return L10n.moldavian\n        case \"MN\": return L10n.mongolian\n        case \"NA\": return L10n.nauru\n        case \"NE\": return L10n.nepali\n        case \"NO\": return L10n.norwegian\n        case \"OC\": return L10n.occitan\n        case \"OR\": return L10n.oriya\n        case \"OM\": return L10n.oromo //(Afan, Galla)\n        case \"PS\": return L10n.pashto //(Pushto)\n        case \"PL\": return L10n.polish\n        case \"PT\": return L10n.portuguese\n        case \"PA\": return L10n.punjabi\n        case \"QU\": return L10n.quechua\n        case \"RM\": return L10n.rhaetoRomance //Rhaeto-Romance\n        case \"RO\": return L10n.romanian\n        case \"RU\": return L10n.russian\n        case \"SM\": return L10n.samoan\n        case \"SG\": return L10n.sangro\n        case \"SA\": return L10n.sanskrit\n        case \"SR\": return L10n.serbian\n        case \"SH\": return L10n.serboCroatian\n        case \"ST\": return L10n.sesotho\n        case \"TN\": return L10n.setswana\n        case \"SN\": return L10n.shona\n        case \"SD\": return L10n.sindhi\n        case \"SI\": return L10n.sinhalese\n        case \"SS\": return L10n.siswati\n        case \"SK\": return L10n.slovak\n        case \"SL\": return L10n.slovenian\n        case \"SO\": return L10n.somali\n        case \"ES\": return L10n.spanish\n        case \"SU\": return L10n.sundanese\n        case \"SW\": return L10n.swahili //(Kiswahili)\n        case \"SV\": return L10n.swedish\n        case \"TL\": return L10n.tagalog\n        case \"TG\": return L10n.tajik\n        case \"TA\": return L10n.tamil\n        case \"TT\": return L10n.tatar\n        case \"TE\": return L10n.telugu\n        case \"TH\": return L10n.thai\n        case \"BO\": return L10n.tibetan\n        case \"TI\": return L10n.tigrinya\n        case \"TO\": return L10n.tonga\n        case \"TS\": return L10n.tsonga\n        case \"TR\": return L10n.turkish\n        case \"TK\": return L10n.turkmen\n        case \"TW\": return L10n.twi\n        case \"UG\": return L10n.uighur\n        case \"UK\": return L10n.ukrainian\n        case \"UR\": return L10n.urdu\n        case \"UZ\": return L10n.uzbek\n        case \"VI\": return L10n.vietnamese\n        case \"VO\": return L10n.volapuk //Volap\u00fck\n        case \"CY\": return L10n.welsh\n        case \"WO\": return L10n.wolof\n        case \"XH\": return L10n.xhosa\n        case \"YI\": return L10n.yiddish\n        case \"YO\": return L10n.yoruba\n        case \"ZU\": return L10n.zulu\n        default: return \"\"\n        }\n    }\n}\n\nUsing L10n library for internationalization.\n\nProblem is: the iso639 codes in PhoneNumberKit are not all found in this list.\nSo, first of all, can somebody explain where does the country code list coming from exactly?\nthank you.. You can already do it through PhoneNumber\n\n. I get (if I may) \"crazy\" logs here and parsing doesn't work on 2.6.0 on Simulator\nRemote object proxy returned error: Error Domain=NSCocoaErrorDomain Code=4099 \"The connection to service named com.apple.commcenter.coretelephony.xpc was invalidated.\" UserInfo={NSDebugDescription=The connection to service named com.apple.commcenter.coretelephony.xpc was invalidated.}\n[NetworkInfo] Descriptors query returned error: Error Domain=NSCocoaErrorDomain Code=4099 \"The connection to service named com.apple.commcenter.coretelephony.xpc was invalidated.\" UserInfo={NSDebugDescription=The connection to service named com.apple.commcenter.coretelephony.xpc was invalidated.}\n [Client] Sending selectors failed with: Error Domain=NSCocoaErrorDomain Code=4099 \"The connection to service named com.apple.commcenter.coretelephony.xpc was invalidated.\" UserInfo={NSDebugDescription=The connection to service named com.apple.commcenter.coretelephony.xpc was invalidated.}\n. After further testing, on simulator it's working fine as well but the error logs are there.\nThe connection to service named com.apple.commcenter.coretelephony.xpc was invalidated.. I should maybe add one thing: The function doc says it's iso 639 codes. And clearly it's not.. thank you, that's nice. \nIt's not clear in Apple doc if they are using 3166 for regionCode\nhttps://developer.apple.com/library/archive/documentation/MacOSX/Conceptual/BPInternational/LanguageandLocaleIDs/LanguageandLocaleIDs.html\nbut I would assume so. They say Region Designators are using it.\nso that can work.\nStill need to update the inline documentation for PhoneNumberKit to indicate that the codes are 3166-1 and not 639.. ",
    "natan": "+1, I would like to see this made public as well. @marmelroy I'm happy to implement this if you're open to that!. @marmelroy Any thoughts on this?. ",
    "doudmas": "Hi @marmelroy  ! Is it possible to merge this PR ?. ",
    "rshev": "Hi @marmelroy we had the same crash in production because of this. Could it please be merged?\nObviously we forked the project and applied the patch, but that is not what should happen with great opensource projects, right?. @bmwalters Could you please add a test (#193) to the test suite to this PR?\n@marmelroy could it please be merged?\n. ",
    "ataibarkai": "@marmelroy any word on merging this PR?\nWe've run into #193 too.. ",
    "Intuiso": "Even though I really like the PhoneNumberKit, the behavior described by @jpstern is really making PhoneNumberTextFields almost unusable. A static sharedInstance might really resolve the issue. (Or does anything speak against that?)\nI tried it by adding \n   public static let sharedInstance: PhoneNumberKit = PhoneNumberKit.init()\nto the PhoneNumberKit class.\nThen, I changed PhoneNumberTextField to use the sharedInstance:\nopen class PhoneNumberTextField: UITextField, UITextFieldDelegate {\nlet phoneNumberKit = PhoneNumberKit.sharedInstance\nMoreover, I am using the PartialFormatter convenience init a few times. So, I set the convenience init to also use the sharedInstance:\npublic convenience init(phoneNumberKit: PhoneNumberKit = PhoneNumberKit.sharedInstance,\ndefaultRegion: String = PhoneNumberKit.defaultRegionCode(),\nwithPrefix: Bool = true) {\n...\n}\nReally helps a lot in terms of performance. However, I still did not like the first initialization when the sharedInstance was called the first time. So, I call it directly in the AppDelegate in the asynchronous queue. Even though not being a really nice solution, it again helps the performance on old devices.\nfunc application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplicationLaunchOptionsKey: Any]?) -> Bool {\nDispatchQueue.main.async {\n// Initialization is very slow. So perform it once on startup\nlet _ = PhoneNumberKit.sharedInstance\n}\nreturn true\n}\n. ",
    "papaz0rgl": "Hello, \nI checked on libphonenumber. The change to take these Morocan mobile number has been made in the version 8.8.7 of the metadata. \nIs there any way to update the metadata used by the pod ? . ",
    "caiovncius": "I'm doing it:\nDelegate field in ViewController and set this function :\n```\n    func textField(_ textField: UITextField, shouldChangeCharactersIn range: NSRange, replacementString string: String) -> Bool {\n    if textField == PhoneField {\n\n        self.PhoneField.text = PartialFormatter().formatPartial(self.PhoneField.text!)\n    }\n\n    return true\n}\n\n```\nI hope help you.... ",
    "wickwirew": "Out of curiosity I'm seeing the same issue on another library. How did you know that the TextField.swift was the source of the issue? I'm not seeing anything in the crash log.. ",
    "AlexanderBollbach": "having this problem think its a carthage issue.  anyone find the solution?. ",
    "alexanderkhitev": "@akshit-zaveri any updates?. ",
    "SwiftyGuerrero": "+1. ",
    "anhhtbk": "How do you do? I see it work normally. \nphoneStr = phoneNumberKit.format(phoneNumber, toType: .e164). ",
    "wzs": "It seems to be a problem with UIKit - after setting textContentTyp, when you tap a \"predicted\" text on the top of keyboard, the replacementString argument in delegate method textField:shouldChangeCharactersInRange:replacementString: is always set to just a single space - therefore PhoneNumberKit doesn't work.\nrelated: rdar://33634848. ",
    "nichdu": "I do this by using my own branch (DasScrumTeam/PhoneNumberKit@67d5ef6) where I require the PhoneNumberMetadata.json to be located at /tmp/PhoneNumberMetadata.json. This, of course, is not a great solution but it works for now. \nOne could include the json data as string in any of the swift files or code it directly as swift types but that would be more work to do.. Are you using Vapor on macOS or Linux? In Linux there are quite some errors which make using PNK impossible at the moment (See #216). \nFor the resources: One could include them in a Swift source file but this is a subpar solution. You could also try to save the Metadata at a hardcoded path (or maybe defined by an environment variable?).  I think we need to wait for Swift to provide a solution on this. . This is exactly our setup. Maybe if I have time in the next weeks I'll fix all the problems on Linux. This won't resolve the ressource problem though.. Taken from the Readme:\nphoneNumberKit.format(phoneNumber, toType: .e164) // +61236618300. ",
    "janderit": "correction to @nichdu comment above:\nPhoneNumberKit does not work on linux right now.\nApart from a number of compile time issues, which are fixed here https://github.com/DasScrumTeam/PhoneNumberKit/commit/12573803784e2742182dabb5f9b89c2d063da789, there are runtime issues related to converting metadata Dictionaries to NSDictionaries. Those are hidden by empty catch blocks, unfortunately.\nA starting point can be found here https://github.com/DasScrumTeam/PhoneNumberKit/commit/720435db77188696f7c458a950fa97096d3b2c15, if anyone wants to pick this up.\nAlso, there are no working tests on linux right now.. ",
    "ashraf-patel": "The bug is reported in libphonenumber only.\nHere is the link,\nhttps://issuetracker.google.com/issues/115415787. The bug is reported in libphonenumber only.\nHere is the link,\nhttps://issuetracker.google.com/issues/115415787\n. Cool, thanks.. ",
    "bwhtmn": "I was able to work around this issue by adding a UITextFieldDelegate to my PhoneNumberTextField with the following code:\nfunc textField(_ textField: UITextField, shouldChangeCharactersIn range: NSRange, replacementString string: String) -> Bool {\n        phoneNumberTextField.isPartialFormatterEnabled = !(range.location == 0 && range.length == 0 && string == \" \")\n        return true\n    }\nIt's a hack, but it works. Would be better if this was fixed in PhoneNumberKit itself.. @RobinDaugherty The change in my comment above (not a fork, I think?) does turn off the partial formatter temporarily, but only in one situation. I found that QuickType always begins by inserting a blank space at the start of the text field, so I detect this situation and temporarily disable the partial formatter. Any other text typed will result in the partial formatter being enabled. Since the delegate is evaluated before the isPartialFormatterEnabled property, this should be fine. See lines 210-215 in TextField.swift. ",
    "RobinDaugherty": "Thanks @bwhtmn can you explain what this does? I saw this change in your fork, but without a comment or explanation it's hard to know what this might break. It looks like it disables the formatter completely, which is probably not what I want to do.. ",
    "peteralt": "@bwhtmn's solution works for me - I noticed the same issue with QuickType now being broken when using the PhoneNumberTextField. Would be great to merge this into the next release if possible (and no other side effects!). ",
    "Rubenfer": "Now I have another log message when I use PhoneNumberKit as class of TextField into TableViewCell\n[NetworkInfo] Descriptors query returned error: Error Domain=NSCocoaErrorDomain Code=4099 \"The connection to service named com.apple.commcenter.coretelephony.xpc was invalidated.\" UserInfo={NSDebugDescription=The connection to service named com.apple.commcenter.coretelephony.xpc was invalidated.}. Sometimes it appear, others no. I don't know what could be the issue.. ",
    "TimothyChilvers": "@Rubenfer Did you find out the cause of this? We're seeing it on start of our app. We're not using PhoneNumberKit.. ",
    "sushant40": "why do you say this?. ",
    "ericwastaken": "@jmrbcu , I see commits from 7 months ago. Why would you think it's dead? Is there an issue you're trying to work through?. @marmelroy - I'd be happy to help review PRs, answer questions, etc. Would that help you accept PRs, etc?. ",
    "DeveloperAdd007": "Any Comment??. ",
    "abdultcb": "I am also having this same problem. Could anyone fix this?. This is critical. . ",
    "ajf-sp": "My bad, guys, these numbers are really invalid as per this checker.. ",
    "hishma": "+1 \nUsing (2.6.0). ",
    "guykogus": "Don't use a regular UITextField, use PhoneNumberTextField. If you're creating the text field in interface builder then you can set it in the editor on the right like this:\n\n. What exactly are you trying to do? Can you give an example?. This prints out what you're looking for.\nSwift\nlet formatter = PartialFormatter(phoneNumberKit: PhoneNumberKit(), defaultRegion: \"SG\", withPrefix: true)\nprint(formatter.formatPartial(\"95 87 98 33\")). Swift\nlet textField = PhoneNumberTextField()\ntextField.defaultRegion = \"SG\"\ntextField.text = \"95 87 98 33\"\nprint(textField.text ?? \"\") // \"9587 9833\". ",
    "ThuongVanBui": "But I want to custom that PhoneNumberKit's format. How to do it? Can you help me? Thanks!. Ex: I using PhoneNumberTextField default:  95 87 98 33 or 839 839 22\nI want to custom to: 9687 7896\nregionCode: SG. Hi bro. I inited new PartialFormatter(phoneNumberKit: PhoneNumberKit(), defaultRegion: \"SG\", withPrefix: true), but PhoneNumberTextField not understand, not format by Region\n. yes, But in  PhoneNumberTextField not correct . Yes, @guykogus. Thank you so much!. ",
    "vinnyt": "@marmelroy tests fixed.. @marmelroy bump on this one?. ",
    "BartMommens": "this is what i get in logs ...\n2018-10-06 13:14:23 +0000  error: Failed to verify bitcode in PhoneNumberKit.framework/PhoneNumberKit:\nerror: Cannot extract bundle from /var/folders/0p/sb0gk7b95hb370klftm09d1c0000gn/T/IDEDistributionOptionThinning.2Bf/Payload/LMRA First.app/Frameworks/PhoneNumberKit.framework/PhoneNumberKit (i386)\n2018-10-06 13:14:23 +0000  /Applications/Xcode.app/Contents/Developer/usr/bin/ipatool exited with 1\n2018-10-06 13:14:23 +0000  ipatool JSON: {\n    alerts =     (\n                {\n            code = 3299;\n            description = \"Configuration issue: platform AppleTVSimulator.platform doesn't have any non-simulator SDKs; ignoring it\";\n            info =             {\n            };\n            level = WARN;\n        },\n                {\n            code = 3299;\n            description = \"Configuration issue: platform WatchSimulator.platform doesn't have any non-simulator SDKs; ignoring it\";\n            info =             {\n            };\n            level = WARN;\n        },\n                {\n            code = 3299;\n            description = \"Configuration issue: platform iPhoneSimulator.platform doesn't have any non-simulator SDKs; ignoring it\";\n            info =             {\n            };\n            level = WARN;\n        },\n                {\n            code = 306;\n            description = \"Failed to resolve rpath for PhoneNumberKit: Could not resolve @executable_path for @executable_path/Frameworks from PhoneNumberKit\";\n            info =             {\n            };\n            level = WARN;\n        },\n                {\n            code = 330;\n            description = \"Failed to resolve linkage dependency PhoneNumberKit i386 -> @rpath/libswiftCore.dylib: Unknown arch i386\";\n            info =             {\n            };\n            level = WARN;\n        },\n                {\n            code = 330;\n            description = \"Failed to resolve linkage dependency PhoneNumberKit i386 -> @rpath/libswiftCoreFoundation.dylib: Unknown arch i386\";\n            info =             {\n            };\n            level = WARN;\n        },\n                {\n            code = 330;\n            description = \"Failed to resolve linkage dependency PhoneNumberKit i386 -> @rpath/libswiftCoreGraphics.dylib: Unknown arch i386\";\n            info =             {\n            };\n            level = WARN;\n        },\n                {\n            code = 330;\n            description = \"Failed to resolve linkage dependency PhoneNumberKit i386 -> @rpath/libswiftCoreImage.dylib: Unknown arch i386\";\n            info =             {\n            };\n            level = WARN;\n        },\n                {\n            code = 330;\n            description = \"Failed to resolve linkage dependency PhoneNumberKit i386 -> @rpath/libswiftDarwin.dylib: Unknown arch i386\";\n            info =             {\n            };\n            level = WARN;\n        },\n                {\n            code = 330;\n            description = \"Failed to resolve linkage dependency PhoneNumberKit i386 -> @rpath/libswiftDispatch.dylib: Unknown arch i386\";\n            info =             {\n            };\n            level = WARN;\n        },\n                {\n            code = 330;\n            description = \"Failed to resolve linkage dependency PhoneNumberKit i386 -> @rpath/libswiftFoundation.dylib: Unknown arch i386\";\n            info =             {\n            };\n            level = WARN;\n        },\n                {\n            code = 330;\n            description = \"Failed to resolve linkage dependency PhoneNumberKit i386 -> @rpath/libswiftMetal.dylib: Unknown arch i386\";\n            info =             {\n            };\n            level = WARN;\n        },\n                {\n            code = 330;\n            description = \"Failed to resolve linkage dependency PhoneNumberKit i386 -> @rpath/libswiftObjectiveC.dylib: Unknown arch i386\";\n            info =             {\n            };\n            level = WARN;\n        },\n                {\n            code = 330;\n            description = \"Failed to resolve linkage dependency PhoneNumberKit i386 -> @rpath/libswiftQuartzCore.dylib: Unknown arch i386\";\n            info =             {\n            };\n            level = WARN;\n        },\n                {\n            code = 330;\n            description = \"Failed to resolve linkage dependency PhoneNumberKit i386 -> @rpath/libswiftUIKit.dylib: Unknown arch i386\";\n            info =             {\n            };\n            level = WARN;\n        },\n                {\n            code = 306;\n            description = \"Failed to resolve rpath for PhoneNumberKit: Could not resolve @executable_path for @executable_path/Frameworks from PhoneNumberKit\";\n            info =             {\n            };\n            level = WARN;\n        },\n                {\n            code = 330;\n            description = \"Failed to resolve linkage dependency PhoneNumberKit x86_64 -> @rpath/libswiftCore.dylib: Unknown arch x86_64\";\n            info =             {\n            };\n            level = WARN;\n        },\n                {\n            code = 330;\n            description = \"Failed to resolve linkage dependency PhoneNumberKit x86_64 -> @rpath/libswiftCoreFoundation.dylib: Unknown arch x86_64\";\n            info =             {\n            };\n            level = WARN;\n        },\n                {\n            code = 330;\n            description = \"Failed to resolve linkage dependency PhoneNumberKit x86_64 -> @rpath/libswiftCoreGraphics.dylib: Unknown arch x86_64\";\n            info =             {\n            };\n            level = WARN;\n        },\n                {\n            code = 330;\n            description = \"Failed to resolve linkage dependency PhoneNumberKit x86_64 -> @rpath/libswiftCoreImage.dylib: Unknown arch x86_64\";\n            info =             {\n            };\n            level = WARN;\n        },\n                {\n            code = 330;\n            description = \"Failed to resolve linkage dependency PhoneNumberKit x86_64 -> @rpath/libswiftDarwin.dylib: Unknown arch x86_64\";\n            info =             {\n            };\n            level = WARN;\n        },\n                {\n            code = 330;\n            description = \"Failed to resolve linkage dependency PhoneNumberKit x86_64 -> @rpath/libswiftDispatch.dylib: Unknown arch x86_64\";\n            info =             {\n            };\n            level = WARN;\n        },\n                {\n            code = 330;\n            description = \"Failed to resolve linkage dependency PhoneNumberKit x86_64 -> @rpath/libswiftFoundation.dylib: Unknown arch x86_64\";\n            info =             {\n            };\n            level = WARN;\n        },\n                {\n            code = 330;\n            description = \"Failed to resolve linkage dependency PhoneNumberKit x86_64 -> @rpath/libswiftMetal.dylib: Unknown arch x86_64\";\n            info =             {\n            };\n            level = WARN;\n        },\n                {\n            code = 330;\n            description = \"Failed to resolve linkage dependency PhoneNumberKit x86_64 -> @rpath/libswiftObjectiveC.dylib: Unknown arch x86_64\";\n            info =             {\n            };\n            level = WARN;\n        },\n                {\n            code = 330;\n            description = \"Failed to resolve linkage dependency PhoneNumberKit x86_64 -> @rpath/libswiftQuartzCore.dylib: Unknown arch x86_64\";\n            info =             {\n            };\n            level = WARN;\n        },\n                {\n            code = 330;\n            description = \"Failed to resolve linkage dependency PhoneNumberKit x86_64 -> @rpath/libswiftUIKit.dylib: Unknown arch x86_64\";\n            info =             {\n            };\n            level = WARN;\n        },\n                {\n            code = 0;\n            description = \"Failed to verify bitcode in PhoneNumberKit.framework/PhoneNumberKit:\\nerror: Cannot extract bundle from /var/folders/0p/sb0gk7b95hb370klftm09d1c0000gn/T/IDEDistributionOptionThinning.2Bf/Payload/LMRA First.app/Frameworks/PhoneNumberKit.framework/PhoneNumberKit (i386)\\n\\n\";\n            info =             {\n            };\n            level = ERROR;\n            type = \"malformed-payload\";\n        }\n    );\n}\n. ",
    "joshuakcockrell": "@IgorKovr @abdultcb libphonenumber updated Vietnam metadata in release 8.10.1 in November 2018. Does this phone number format correctly in the current libphonenumber javascript demo? https://rawgit.com/googlei18n/libphonenumber/master/javascript/i18n/phonenumbers/demo-compiled.html\nIf it formats correctly in that page I linked to, then we probably just need to update the PhoneNumberKit metadata since it hasn't been updated since Sept 2018.. @menesh2 What do you mean by country code color? Are you talking about the visual RGB color value? PhoneNumberKit doesn't handle rendering different parts of the number with different colors. Maybe you could use phoneNumber.countryCode to grab the country code yourself and then render it with whatever color you wanted. Would that solve this problem?. Metadata updated, so closing.. @miller-ms PhoneNumberKit does support the e.164 standard. You can use this example from the readme.\nlet phoneNumber = try phoneNumberKit.parse(\"61236618300\")\nphoneNumberKit.format(phoneNumber, toType: .e164) // +61236618300. @WingYn I'm not sure what country/region you are trying this from, but the problem with the number +11234567890 isn't validation, it's that the area code is 123, but area codes start in the 200's in the US. See this link for a complete list of US area codes: https://www.areacodelocations.info/areacodelist.html\nThere is no known format to use to display the number you gave and since the E164 format is invalid, and the international format is invalid, the correct format is simply \"+11234567890\"\nI would suggest you use a test number like +12004567890, or anything where the area code is 200 or above. +15555555555 is a pretty standard test number that will format nicely.\nThis is all assuming a US region code. I'm sure you could find good test numbers to use for whatever region you're developing for.\nYou can use this tool made by Google to see how different numbers will be formatted.\nhttps://rawgit.com/googlei18n/libphonenumber/master/javascript/i18n/phonenumbers/demo-compiled.html\n. ",
    "tealshift": "Using the latest Xcode 10.1 and swift 4.2. ",
    "roma6125": "Problem occurs in \n```swift\n    public class func defaultRegionCode() -> String {\nif os(iOS)\n    let networkInfo = CTTelephonyNetworkInfo() // <--- GENERATES WARNING\n    let carrier = networkInfo.subscriberCellularProvider\n    if let isoCountryCode = carrier?.isoCountryCode {\n        return isoCountryCode.uppercased()\n    }\n\nendif\n    let currentLocale = Locale.current\n    if #available(iOS 10.0, *), let countryCode = currentLocale.regionCode {\n        return countryCode.uppercased()\n    } else {\n        if let countryCode = (currentLocale as NSLocale).object(forKey: .countryCode) as? String {\n            return countryCode.uppercased()\n        }\n    }\n    return PhoneNumberConstants.defaultCountry\n}\n\nYou can **walk around** this by setting region code manually (also you get region code from `Locale.current` like in func above):swift\nPhoneNumberKit().parse(string, withRegion: \"US\", ignoreType: true) \nPartialFormatter(phoneNumberKit: PhoneNumberKit(), defaultRegion: \"US\", withPrefix: true)\n```\n. ",
    "bennokress": "Reading up on this I found this story for SPM Evolution where including a Resources folder is up for evaluation. It seems that using PhoneNumberKit with SPM is not possible then. I just wonder how @Coledunsby got it to work with his PR #179. Is there a workaround? I would love to use this in my Vapor project where no other Dependency Manager is available .... I'm developing on macOS and using it on Linux (in Docker). I think you're right with the conclusion to wait for Swift \u2026 thanks for the suggestions, though.. ",
    "rafaelnobrepd": "Actually pauses and waits (; and , characters) are parsed as extension numbers in the parser methods, but are discarded by the partial Formatter.. ",
    "florentmorin": "PR is here: https://github.com/marmelroy/PhoneNumberKit/pull/263\nWhile PR is not validated, you can use fork available here. ",
    "qgliu": "In development I use either iPad Air 2 simulator or real iPads, they work fine. I don't see an error in the log. I use Xcode version 10.1.\nOnce uploaded for TestFlight, I use an iPad with the same model as for development.\nIn development, a 10-digit US number would be formatted as (505) 555 5555, but the version in TestFlight would be 5055555555. When you enter a valid phone number to PhoneNumberTextField and the call to isValidNumber would return false. It returns true in development mode.\nSince this only happens in the version submitted to Apple, I can't provide a log.\n\ninteresting, that seems to be core telephony related (which we use to know the user's current phone language).\nWhat simulator and which version of Xcode? Can you confirm that you're not getting the same log with 2.5.1?\n. \n",
    "blwinters": "You can get the localized country name for the region code from Locale:\nfunc localizedCountryName(for regionCode: String) -> String? {\n    let regionCode = regionCode.lowercased()\n    return Locale.current.localizedString(forRegionCode: regionCode)\n  }. ",
    "phoney": "I recommend that the metadataPath is a file URL not a String. A String can be anything. You can validate that the URL is a fileURL. The code doesn't change much but using a URL here would make the intention more clear and probably reduce some user bugs.. "
}