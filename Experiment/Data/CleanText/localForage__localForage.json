{
    "tofumatt": "Agreed! It's on my mental TODO list, but I probably won't get to it for a bit of time. If someone else wanted to take a crack at it that'd be grand, but otherwise I'll do it some quiet evening.\n. Fun fact, I just started adding promises to around, so I'm slowly porting this feature from there into the actual library. Not sure about lack of Firefox support, as I've just been using a small promises library that conforms to the spec (written by @potch) and it works fine. I don't mind including a library for it, as localForage's goal isn't to be compact, but rather a full-featured solution to offline storage.\nI'll probably be landing a promises-compatible version within the next week.\n- Matt\n\nOn Nov 4, 2013, at 18:23, Peter Bengtsson notifications@github.com wrote:\n+1 on what @ianb said.\nFYI async-local-storage ships with a promise library in it and one without. https://github.com/slightlyoff/async-local-storage/tree/master/bin Note, you can't use the promises in Firefox so unless you have an explicit promise library that is compatible you'll have to use the async-local-storage-with-Promise.min.js one.\nI'd love to see it possible to use either. jQuery does this too with it's ajax wrappers like $.getJSON().\n\u2014\nReply to this email directly or view it on GitHub.\n. Closed in #20.\n. Forgive my ignorance, but isn't it just a session-based localStorage API? The idea of this library is more about improving performance (by not relying on blocking calls unless localStorage is all that's available).\n\nWhat's the benefit of sessionStorage?\n. Oh, what a confusing name!\nThat\u2019s cool; I don\u2019t have many use-cases for any of my apps, but I\u2019ll make a note of implementing it at some point.\n. Aside from changing localStorage to sessionStorage, there's no work needed here, right? Presumably we could just make a version of the localStorage driver that does var localStorage = this.sessionStorage, right?\n. Would anyone still like to see sessionStorage implemented? localStorage is already the worst backend to use when using localForage and is really just here so old IEs are compatible. I don't particularly like supporting even it, so adding sessionStorage at this point seems silly.\nThat said, if there's demand I'll do this soon. If not I'll likely close this issue.\n. Oh, I didn't even think to mention that but yes: it would never be an automatic choice. Good point!\n- Matt\n\nOn Oct 7, 2014, at 17:42, Ron Waldon notifications@github.com wrote:\nI would vote against making sessionStorage automatic in any way. I agree that there are interesting use cases for it, but developers really need to know exactly how it works before they begin using it.\nIf we have a localStorage backend, then I agree that it would make sense to offer a sessionStorage backend as well for consistency. However, it absolutely must be opt-in. It would be very confusing to have a persistent storage system that doesn't persist.\n\u2014\nReply to this email directly or view it on GitHub.\n. ## Always happy to take a look at a pull request! I don't think anyone has been working on it.\n\ntofumatt (Sent from mobile)\nOn 7 December 2014 09:08:26 GMT-05:00, \"Hubert SABLONNI\u00c8RE\" notifications@github.com wrote:\n\nWhere are we on this one? Would you be interested in a pull request?\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/mozilla/localForage/issues/2#issuecomment-65938404\n. That is a good point, and at this stage we\u2019re closer to current versions of all major browsers plus all previous versions supporting IndexedDB/WebSQL.\n\nActually, I would say at this point if anyone wants to use sessionStorage they should write a driver.\nlocalForage implementing its own per-tab namespace is out-of-scope for the library itself; I would leave that to the developer or to another library. It\u2019s a good idea, but I would prefer it be in a separate library/codebase.\nI\u2019ll close this out I think.\n. Added it to the wiki (https://github.com/mozilla/localForage/wiki/Custom-Drivers)\n. I think we basically want #136 here, so I'll close this out.\n. I\u2019m inclined to make things as automatic as possible, and as close to the localStorage API as possible. Aren\u2019t these all isolated to the current host anyhow? I don\u2019t really want the developer to have to initialize anything.\nI suppose for localhost development it\u2019s handy. Maybe something like localForage.useName(\u2019tofutron\u2019) used before other calls could work?\n. I think so, yes.\n. I have thoughts on the article itself, but I take the point of this change. Let's all keep our iPad 2s out of our naughty places!\n. Yeah, I think it should be optional to use require.js, I agree. I also think the \u201cdiet\u201d version of the library could roll everything into one for the sake of ease-of-inclusion, but the library should allow usage without require!\nSo I think I agree that \u201cc\u201d is best!\n. The reason is simply copying localStorage conventions, but I'm cool with just making it localforage everywhere and allowing people to require it like localForage if they like. If they aren't using require I'd add localforage and localForage to whatever it gets lumped into though (usually the window object).\n. Oh, whoops. I just meant to hit comment. Must've missed the button!\nOkay, sounds good!\n. Damn, nice job! I don't think I have any real issues with the changes! I feel weird about the file names (I would rather - or _ in file names over camelCase, but that's, like, my chief complaint so r+\nThoughts on the file names?\n. The more the better, so if you feel like adding more that'd be great.\n. At this point I'm going to write tests for the examples as well, because I don't think the back-and-forth here is working.\n. We can certainly add failure callbacks (and promise rejections, when they make it into master), but I don't expect reading unset keys to fail, I personally do expect them to just return null (I could be convinced of returning undefined as well, except then it's more work to have that carry over to the localStorage driver; we'd essentially have to test for the existence of a key rather than the return value from calling said key).\nLike @sole says too: there aren't really errors that should bubble up unless there's something wrong with the storage engine itself; getting and setting data, aside from hitting the quota, shouldn't ever cause errors.\n. I think this should be covered by #60, so I'll close this for now.\n. I haven't.\nI don't really see a lot of overlap; I'm obviously open to code-sharing (hey, it's open source!), but level.js seems to be all about LevelDB. localforage aims to exist as a library on top of all the weird storage backends offered by various browsers, except with a common API. A quick glimpse at the level.js README doesn't mention localStorage as a fallback (nor would I expect it to). LevelDB, from what I can see, is some big thing Google does with an ecosystem; localforage is about client-side storage for browsers/web runtimes, nothing more.\nI... don't really get what you're saying, other than they're both client-side storage libraries. level.js seems more focused on IndexedDB/levelDB -- which probably makes it a BETTER, more PURE storage engine. localforage values compaitibility over what's best. I gather that makes us different enough projects.\n. So I'm confused on this -- is this essentially asking to expose a LevelUp Shim for the existing API?\nIf there's an API guide I can follow that would allow us to mostly map existing methods to the Level names with little extra code I guess I'm open to this, but I can't exactly tell what's up.\nKeep in mind, a pull request may help more than an issue.\n. After three years of not implementing this\u2013I'm thinking we won't. I'd take a PR, but I'll say there's not enough interest in this when there are more pressing patches.\nFeel free to re-open if anyone disagrees!\n. At this point calls to the public data API are routed through ready(), so this is quite possible provided we had a queue as well... and a way of rolling back changes.\nIt's likely quite out-of-scope for a library as simple as localForage. I'll leave this open for a bit longer in case someone wants to take a crack at it though.\n. Right now this seems pretty out-of-scope for localForage. An entire transaction solution would be heavyweight and not in the spirit of the simplistic nature of localForage.\nI think I'll close this for now, but a PR would be welcome in the future.\n. As mentioned, I would be open to a pull request but especially as we want version 1.0 to support localStorage, we would need to support transactions for it. Or this would have to be a feature we land in a 2.0, when maybe we won't use localStorage anymore.\n. Yeah, in general I\u2019ve considered the case that users want to opt-out of localStorage. I think I\u2019ll start on said branch tonight ^_^\n- tofumatt\nOn February 4, 2014 at 18:27:39, Ron Waldon (notifications@github.com) wrote:\nI have a use case where I only want to use storage mechanisms with decent quotas. This is pretty much limited to IndexedDB and only WebSQL + Cordova. Browser-based WebSQL does not meet my needs.\nAs such, it would be terrific to be able to perform the necessary detection and force localForage to be limited to the desired set of drivers.\n\u2014\nReply to this email directly or view it on GitHub.\n. r-\nSorry, I commented on the dist version, whoops.\n. Sure thing. It's the ES6 promises spec and just a nice polyfill potch pointed me to; I shall make note before I merge it in :-)\nMatthew Riley MacPherson (Sent from mobile)\n\nOn Jan 22, 2014, at 5:52, sole notifications@github.com wrote:\nr+!\ngood job on having a require.js example too!\nHowever I think it would be good to show which libraries are we depending on. For example, which promises library are you including, etc.\n\u2014\nReply to this email directly or view it on GitHub.\n. Translating actual SQL queries to something that would work in IndexedDB or localStorage sounds like it would be a pain, and not really the point of this library. I like the simple localStorage API, but I'm happy to extend it with things like getItems().\n\nI think the queries would be overkill.\n. There's nothing like that yet, but I suppose it's also not a bad API to include. Did you want to take a crack at it? If you'd like to see it please file a separate issue (or send a pull request if you want to code it).\n. @thgreasi wrote in #291 an API I like for these multi-item calls:\nHow about:\n``` js\nPromise.all([\n    localforage.getItem('item1'),\n    localforage.getItem('item2')\n]).then(function(results) {\n    console.log(results);\n});\n// OR\nvar items = ['item1', 'item2', 'item3'];\nvar promises  = items.map(function(item) { return localforage.getItem(item); });\nPromise.all(promises).then(function(results) {\n    console.log(results);\n});\n```\nIf getItems() / setItems() are going to be implemented by localforage at some point, then something like the 2nd example might actually have to be used by some drivers.\n. To iterate over the results they can always use Object.keys, I think the second (object) one is nicer as it\u2019s a basic return object that can be extended but is easy to grab items out of. Using the array the syntax is more annoying if you know exactly what you want. It would also mean we\u2019d either need to guarantee order or you\u2019d have to iterate through to get a key.\nObject for sure!\n-tofumatt\nOn 10 May 2015 at 10:24:45, Thodoris Greasidis (notifications@github.com) wrote:\nIf something like this was to be implemented, how the return object should look like?\nArray of KeyValues\n[{\n  key:'test1',\n  value: 'value1'\n}, {\n  key:'test2',\n  value: 'value2'\n}]\nor just an object like\n{\n  'test1': 'value1',\n  'test2': 'value2'\n}\n???\nWhat's most preferable of the two in your opinion?\nWhat are the pros and cons in each case in your opinion?\nFor me:\n+1 for obj result\nobj pros:\nIt is more straightforward/efficient in retrieving a specific value. array pros\nSomeone might argue that the array is more convenient for iterating over the results.\n\u2014\nReply to this email directly or view it on GitHub.\n. I can\u2019t think of too many and I\u2019d think it would crop up before saving to localForage though\u2026 it would be a problem in the data BEFORE we did a get/set. I think ^_^\n-tofumatt\nOn 10 May 2015 at 11:27:24, Thodoris Greasidis (notifications@github.com) wrote:\n@tofumatt I was just wandering if anyone could report any edge case or strange behavior when setting any special/reserved key as a property to an object.\nPS: I also like for..in with Object.hasOwnProperty to support pre-es5 browsers. Hope it has the same results.\n\u2014\nReply to this email directly or view it on GitHub.\n. Oh, that is awesome!\n. It's not available yet, but we'll update the issue when it is. I'm not sure anyone is working on it right now.\n. I do like the plugin way, I\u2019m starting to feel like we can strike a balance on library size and features. For now I\u2019d recommend using the plugin and I'll think about whether we want to merge this in directly.\n. Wait, what does r\u2607 mean?! SO MANY CONFUSING r CODES @sole\n. Womp womp, r?\n. (User reported as a jerk bot opening issues across repos with \"TODO\" in their code.)\n. Is uglify a node module? I don't have it on my path, so r- because it's not included in the package.json here, or similar.\nI'm sort of inclined not to bother including a minified version as I assume folks would have their own build step, but I suppose there's no reason not to and we don't live in a perfect world where all developers have build steps for JS.\nThough I'd love to have some kind of post-commit hook that did this stuff automatically anyway; I hate having to run a build script before checking in code. And I hate checking in build artifacts.\n. Although for this particular branch it may be a moot point, I\u2019d at least add it to the package.json and load it from ./node_modules/.bin/uglyify. As it stands, I would imagine the build step would fail on travis (because of uglify not being on its $PATH) and thus the tests would fail.\n- tofumatt\nOn February 3, 2014 at 19:10:43, Peter Bengtsson (notifications@github.com) wrote:\nA lot of js packages ship with a minified distribution version. There doesn't appear to be a golden standard.\nYes, uglify is from npm install uglify-js and a very common tool in the js world.\nI don't know a better way to organize this. After all, the ./build.sh isn't an automated thing but something the maintainer runs when he feels like it.\n\u2014\nReply to this email directly or view it on GitHub.\n. Oh, I agree; I don\u2019t want them to HAVE to run a build script. My point was actually that I just don\u2019t like it in the master branch. I don\u2019t like having to remember to run the make script and checkin the build artifact by hand. I\u2019m still happier to do it than the end-user, but my dream would be a way to automate it, maybe on Travis or similar.\n- tofumatt\nOn February 4, 2014 at 4:54:59, sole (notifications@github.com) wrote:\nI just want to reiterate (as I did on #27 (comment)) that your average users don't want to run a build script, they just want to download Your Awesome Library That Will Make Things Easy for them, and get on with their business.\nI know your perfectionist/purist side cringes at this thing of checking in build artifacts but so far it's the easier way to distribute them, other than maintaining a separate website with that specific purpose.\n\u2014\nReply to this email directly or view it on GitHub.\n. So I'd love to explore a fancier way to do this, but I think it's fine as-is. I'll fix it up a bit to include an npm-installed uglify and try to merge it in after #33 gets into master.\n. I'm gonna close this one, because we build out the dist/ version for bower, etc.\n. Actually, I'm thinking #33 essentially solves this problem, and you could refuse to run your own app if the driver support wasn't to your liking, as .driver will report the available driver.\n. This is what I get for typing in issues from my phone; there's always something!\n. Pretty sure I now feel this is silly.\n. r?\n. Yes, yes I do. (Fixed.)\n. This should include backbone.js docs; probably a line or two in the README too.\n. Whoa, can't believe I didn't realize this! Code looks good, any chance you could add a test for this?\n. Oh, no worries then. I can write some tests to cover this. If you\u2019re cool with where it is I\u2019ll merge this in.\nThanks a lot for the code! :-)\n- tofumatt\nOn February 7, 2014 at 22:05:04, Moez Bouhlel (notifications@github.com) wrote:\nI have not knowledge about coffescript, anyway i'm writing a simple browser based test, for more tests. maybe i will rewrite them with cofescript\n\u2014\nReply to this email directly or view it on GitHub.\n. Currently it is, yeah. Remnants of me using the IndexedDB driver file as the basis for that driver, I guess.\n. Technically the library deals with one big storage bucket (the same idea as localStorage), so multiple files being able to modify data is it working as expected. (\u201cA bug not a feature\u201d, if you like.)\nBut the idea of naming-spacing localForage is certainly an interesting concept, though it would need to be optional (like calling setDriver().\nUltimately, out-of-the-box localForage should support one global namespace for keys ala localStorage, but restricting apps to a namespace as a feature would totally be cool/handy.\n. Agreed, actually. That's how I see if working too.\n. @thgreasi solved this in c318f37c072d7c6c2ad4a41db7d713f6d7cd69f2, so closing this out. :+1: \n. Off the top of my head, I\u2019d think speed. But that\u2019s just a guess.\n. I'm okay with base64 encodes for localStorage... I would thing WebSQL would accept Blob types and maybe I'm just being lazy about converting blobs, so I'll check that out now.\n. Currently, you're right; the library doesn't inform you of a storage backend being changed/upgraded. This is actually a fair use-case to deal with, though the transfer of data would need to be some kind of blocking operation or developer-initiated thing, as otherwise we'd get weird state issues.\nI'd love to fix this, but it's lower priority than some other issues to me. I honestly figure that the async support available leaves IE 9 > IE 10 as pretty much the only major case for this issue.\n. Well, in my mind the real hacky way would be to use localForage.length and localForage.key until we found and transferred all of the stored data.\n. Most browsers in question have moved to IndexedDB and this seems to be something developers will need to handle themselves. Closing for now, but a PR to fix this would still be welcome.\n. I want to stick to the localStorage API, because it's still our common denominator. It has no way to return undefined from a getItem() call. I suppose we could switch to using localStorage[key] to see if that returns undefined, but there can't be an option to get undefined out of localStorage.getItem() because it NEVER returns that. We can't differentiate between null and undefined, so we don't. But I'd be happy to standardize it.\n. Sorry, I just merged this into master by hand, and I think the preferredNonValue thing doesn't make much sense... if anything I might explore the idea of using localStorage[key] to fix this, but for now I'll close out this branch as I merged things in.\n. Seems pretty straightforward; admittedly it'll be lower on my personal to-do list but I'd gladly accept a pull request with a Chrome driver. Otherwise, I will get to this but probably not for a few weeks. :-)\n. I have not worked on this myself. I don't have any immediate plans to, but note we do support custom drivers. I would likely accept a pull request with the code as well.\n. Decided this belongs in a custom driver instead.\n. I don't have much experience with Bower myself, but this seems a fine chance to learn.\nSince I assume I'll have to register the library or something I can take care of this one unless you've already got a pull request started.\n. Added the bower file in #48, but I'll tag it as ready to go and all that in a day or so.\n. Package was submitted to bower in 2e8d5ee3e654bb029eb967ba4c308343ca761ca6 when a tag 0.1.0 was released. Yay!\n. I think it would mean separate databases for any engine that supports it, yeah. Not sure what the ramifications are there in terms of dialogs or storage, but I think it\u2019d be fine.\n. ## It's something I'd like but likely won't have time to write myself for a month. A pull request for this feature I'd give lots of attention to though. :-)\ntofumatt (Sent from mobile)\nOn August 20, 2014 1:37:33 PM ADT, peey notifications@github.com wrote:\n\n@tofumatt : Just to get a rough idea, how high is this feature on your\npriority list?\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/mozilla/localForage/issues/45#issuecomment-52805083\n. That looks like a synchronous API... I know EmberJS has support for promises in it's data storage drivers, what about here?\n. @ocombe That sounds great! If you'd be willing to submit it as a pull request here that'd be amazing; I'm writing an EmberJS one in my spare time and would like to include the drivers for frameworks in the src/adapters/ folder\n. I'm not a huge angular user, so I feel like a bad person to judge it. Maybe I can check with some folks and if not evaluate it myself? But I am not opposed to seeing more adapters in here.\n. We have Backbone support, and I'm happy to include adapter support right from our repo. It's not added to the library size, and if there's community support for adapters they can stay here.\n. I added a version 0.1.0 tag earlier today, and will be mindful of API breakage in the future.\n\nIn terms of yeoman generators, that's outside the scope of this discussion. I do want angular adapters, but @potch and I were even discussing if that requires a separate repo to separate them into different bower components.\nBut the point is that I'll look at the module and see if it can be blessed as out driver.\nMatthew Riley MacPherson (Sent from mobile)\n\nOn Mar 14, 2014, at 23:04, Olivier Combe notifications@github.com wrote:\nI listed localforage as a bower dependency but we would need release numbers to make it safe.\nFor example the \"driver as a function\" commit from 2 days ago was a breaking change, but I couldn't specify that my plugin was working with version 0.0.1 and not 0.0.2 in the bower.json file.\nIf someone had installed it in the mean time, it would have been broken :(\n\u2014\nReply to this email directly or view it on GitHub.\n. Regarding linking to it were it a separate repo: absolutely!\n\nMatthew Riley MacPherson (Sent from mobile)\n\nOn Mar 14, 2014, at 23:05, Olivier Combe notifications@github.com wrote:\nAnyway, I have nothing against keeping it as a separate repository, but we should at least list it in the doc for people who might be looking for it :)\n\u2014\nReply to this email directly or view it on GitHub.\n. Fixed with #107. Thanks @ocombe!\n. Fortunately, we're already setup to do module.exports = localForage, but we concat all the files so things work with/without define or require.\n\nBrowserify seems slick though; I'm open to pull requests or, if none arrive, I'll get to this in a few weeks after I stop being so feature-implementing. ;-)\n. Are tabs the usual indentation in bower files? The rest of this project uses 4 spaces. Also, spaces after the colons in JSON look nicer.\n. Oh goodness, how did I not notice this in my linter? I'll add a test for valid syntax files.\n. Yeah, this confused some folks on the blog post too. Works for me.\n. Could you please transfer it to me (I\u2019m tofumatt on there).\n- tofumatt\nOn February 13, 2014 at 10:55:55, David Guttman (notifications@github.com) wrote:\nPublished to npm: https://www.npmjs.org/package/localforage\nnpm only allows lowercase names, so I had to change that. Right now I'm the owner of the package, but will transfer to another username.\n\u2014\nReply to this email directly or view it on GitHub.\n. I emailed you a few days back and still haven't heard from you. Can you transfer this to me, @davidguttman?\n. Interesting, as localForage's own tests are run using PhantomJS: https://github.com/mozilla/localForage/blob/master/test.sh\nAnd web security is not disabled. What version of everything are you running?\n. Hey @olegbl, is this still an issue?\n. No worries. I haven't heard about this otherwise and can run it fine with grunt/phantomjs, so I'll close this out for now.\n. If this still persists please let me know, but I've used localForage in PhantomJS (the tests themselves run there) so I'm thinking this is not a localForage issue.\n. Whoops, I didn't notice that yet. Thanks for the head's up, will investigate.\n. (Happens in #253.)\n. This hasn't happened in some time, but more exciting should definitely stop when I merge #461.\nI think I'll call this one closed. \ud83d\ude04 \n. :+1: Nice.\n. (PS: Don't worry too about this not merging cleanly; I'll be sure to add my WebSQL code as another commit in this branch to get the tests working and merge it in by hand.)\n. No, I\u2019m currently working on it\u2026 I\u2019m hoping it\u2019ll be ready today though.\n. (This is taking longer than expected, and I'm adding a bunch of tests to this as well. I'm hoping this week sometime.)\n. Pull request poetry, it's all the rage!\n. I'm going to close this branch as the code is in #73 and that's what will get merged.\n. I\u2019ve always disliked that node.js (error, value) -> style, at the very least I\u2019d like error to follow value, but what\u2019s the convention in browser-land?\nWhat method calls are we talking about failing?\n. I actually think what I'd like to see is an error callback and a failure callback, particularly because that maps to promises nicer than a single callback with an error and value argument. The node-style means that every single callback function then needs to deal with errors internally instead of having a generic error handler (which most of the time would be to do with a storage limit exceeded error). I'd rather an extra callback than every function starting with if (error) which strikes me as boilerplate code and less reusable.\nSo let's say we should implement an error callback as the second argument, and use that same error callback as the promise rejection callback.\n. localForage uses ES6-style, Promises-spec promises. They don\u2019t expect an error value in their success callbacks, they just offer a .then(success, failure) setup.\n. Including the dist in the PR is proper :-)\n. This looks good, except for my one comment.\nIs there a test we could add for this, so we know we aren't ever overwriting the original sync method?\n. localForage is really a browser-aimed tool. It's about offline storage. I really don't node.js support fitting in, nor do I think its API is necessarily a great fit for actual file storage only. Are there not node.js APIs with lots of backend drivers already?\nThe problem here is we need to choose a backend, or backend drivers, like redis, MongoDB, etc. It's a big can of worms for a problem that doesn't really exist: you can use the same storage library on any node app with a redis server available. The problem localForage solves is that browsers don't all speak the same storage language, but now they can.\n. For the time being, I want this library to focus on the browser. When I feel like we have that problem solved with few issues and edge-cases I might look at node, but until then I don't see it as a priority at all.\nNode.js and web browsers both use JavaScript, but that's where the similarities end. This is about client-side, offline storage. Not about storage in general.\n. Yeah, obviously if someone wants to do all that exploration and heavy-lifting for us, then propose changes that don't affect the performance/size/etc. of the client-side library I would entertain it. But in terms of project scope: I'm ignoring node (which HAS good storage solutions) to focus on the browser (lacking in said solutions).\n. @jrburke Any chance you could fill me in on if this is a require bug/quirk or something I've done wrong? Does requiring localForage as \"localforage.min\" cause errors? Keep in mind if define is available localForage does:\njavascript\ndefine('localforage', function() {\n    return localForage;\n});\nas seen here.\n. Works for me.\n. I believe it's for browserify, but I'm not so familiar with it myself.\n. Fair point. Ultimately not, I suppose. I feel like the blob storage changing will affect less people than the signatures changing, but that's a fair point.\nBackwards compatibility isn't my only concern here, but if it turns out it's the only issue in the end I will certainly trade \"better\" for \"backward-compatible\", especially in a library we don't even tag with a version number yet ;-)\n. I've decided I'm going to pass error as the final argument to all callbacks and add in a reject from every call that can fail. I'll be pushing a pull request later today.\n. Thanks! I'm going to write a test that checks the behaviour and then merge it in :-)\n. You're right; I usually point to the tests as examples now but this code should have been updated along with 242cd343665b30c2d031b7a0f05fb2a492c39bb1.\n. @cinder92 Which example are you trying to run?\n. @KeynesYouDigIt If you're having an issue running code please open a new issue, as this one is closed and over two years old.\nAdditionally, you can't run localForage on the server. See https://mozilla.github.io/localForage/#installation for info on installation.\n. No worries, glad you got it working!\n. I see:\n\nAnd locally:\n\nSo everything seems fine to me.\n. Storing actual instances is almost certainly out-of-scope for localForage. I would think in the context of an MVC app, the model ID would be stored, and its state would be recreated from that.\nWhat are the use cases here? I don't see this as being a goal.\n. I'm not clear on this but it sounds like you want localForage to handle object state freeze/restore, which is out-of-scope. localForage just aims to store data.\nIf I'm mistaken, feel free to re-open the issue to clarify.\n. Sorry, I don't quite understand. Could you include a code snippet of the code that's failing in IE8 but works elsewhere?\n. Oh wait, I just saw that this is a pull request and not an issue. That's quite the interesting bug.\n. I combined your commits (the dist/ versions should be changed in the same commits as the src/ versions) and merged them into master at 25a12d20cde9267ae19e86b5a9172dcd004718e1. Thanks!\n. @xquezme Sorry, I misread the comments and thought things were working. Sometimes I miss context from reading GitHub emails.\nThat said, I thought https://github.com/mozilla/localForage/blob/master/src/drivers/localstorage.js#L10 fixed this already?\n. Either way, I'll push a fix, as I think I'd prefer the try/catch over the window.chrome check, as it's closer to feature detection.\n@xquezme In the future, if you'd like to submit a pull request directly (given that you had the code ready in this issue) I would happily accept it. I'm usually faster to merge pull requests than anything else.\n. I would like to see this, yes.\nBeing able to store large files is definitely in the scope of localForage, though there are architectural decisions there... I'd actually think the file system part would be an extension to each driver rather than a new one. An API like setFile, getFile, removeFile to compliment each driver makes sense to me.\nI'm currently focusing on improving blob support (and adding tests) and solidifying the \"regular data\" API, so file storage is less of a focus for me right now, but if you're interested in adding file support I'd certainly accept that if it wasn't a separate driver, and instead an extension (so I can store data and files using the \"same driver\").\nDoes that make sense?\n. Just as a side note: I'm personally very interested in large file storage in JS; I worked on https://github.com/mozilla/high-fidelity and found file storage to be a problem that has yet to be solved.\n. Using the actual file APIs seems unlikely inside localForage right now, though a driver could do it I suppose.\nI'm going to close this as we do have Blob support and support binary storage. The specific large file case might even be covered by that.\n. Running the tests on Firefox 27 seems okay.\nIs there any chance you could send me a reproducible JSFiddle or index.html page I could test it on? Also, what platform are you on? Windows, Mac, Linux?\n. Are you running this in a private browsing window, @coderaiser? I can't seem to reproduce this in Firefox 27 on Travis.\n. Yeah, this is a bug in Firefox. Sadly, private browsing in a few browsers (iOS Safari, Firefox) mode mucks with storage a fair bit, but given it's super temporary anyway, I don't see it as a huge issue. I would almost think a kind of \"dummy driver\" for private browsing mode would be useful? But for now I'd track this issue on the bugs Peter mentioned.\n. Looks like #448 should fix this one, but if not please let us know and reopen the issue. :smile: \n. Looks like that's part of localForage's currently spotty error-handling. Some of this code originated from a gaia library that didn't require great error-handling. I am looking to improve this; there's no reason it isn't, other than the library still having bugs :-/\n. Closed in dbe42c0e42eee865639d4dbc0313b86893b50739\n. Oh sorry, this is still a bit WIP and the console.logs will all get removed in time.\nYeah, one of the things I'd like is shared serialization code. I think we can do that, but the way the code gets clobbered together now means I should probably add a localforage/utils require in there. I'm going to look into that.\nThe ArrayBuffer and Blob code is commented out for now as it causes the WebKit tests to hang and stop. Not quite sure why that is yet.\n. I imagine the reason it's set up like this is to load in less when using require, but I agree, I don't really like that it's all separate. I think I'll include, in this PR, wrapping them into one.\n. Hey @potch or @sole, think you could idiot-check this code? I'd like to merge it in as it's been here forever and from my point-of-view works, but I'd love a quick second opinion.\n. Support for encryption is out-of-scope for localForage's aim. It should be easy to store encrypted data using localForage. If there's anything that localForage does that blocks encryption I'll gladly accept patches that fix it, but an API built on top of localForage seems to be what you'd like, which would need to be a separate library.\n. Hi @Bertg,\nThe serializers are available in their own modules I believe so you should be able to re-use them. I think each driver chooses its serialiser so you might want to check the existing drivers to see how they work and what you would want to do in a custom driver that adds encryption.\nThat said, if further modularisation is required and is straightforward I'm all for it. I think that's separate to this issue so if you want to improve the modularity of serialisers please open a new issue to track it. I'm not sure it's needed for custom drivers but if it was and had tests I'm cool with it.. If it\u2019s that simple that works for me. I don\u2019t like the override we do but I haven\u2019t ever built a big Backbone app with multiple sync adapters, so I\u2019m a bit out of my depth on what the best practice is.\n. Oh wow, I really like that. That would be amazing :+1: \n. Fixed in ff38f31f6a06ff2a94f4e76ccc3490c552869fc9\n. I already did, no worries :-)\nMatthew Riley MacPherson (Sent from mobile)\n\nOn Feb 22, 2014, at 17:32, Jos\u00e9 Magalh\u00e3es notifications@github.com wrote:\nI'll fix the Backbone example according to this changes.\n\u2014\nReply to this email directly or view it on GitHub.\n. Whoa, cool! Thanks :-)\n. Overall this looks good! I'm going to update the documentation to reflect the changes but this looks great. Thanks!\n. Merged in at ff38f31f6a06ff2a94f4e76ccc3490c552869fc9. Thanks again!\n. I wonder if #52 is related to this?\n\nI'm not exactly sure what the fix is here... or if it's an important issue? I would imagine that localForage's main use-case is inside apps storing reasonably large bits of data in a fast way, and I don't see a lot of overlap with those kind of apps and pages that get included inside IFRAMEs from another parent domain.\nI don't do much cross-domain IFRAME stuff, but is there an easy way to check for that sort of state and disallow WebSQL as a storage backend in that situation? I might be fine with that as an option.\nCombined with #79, I'm also guessing we could fix this?\n. I'm currently on a train and my wifi is bad, so I can't seem to load your fiddle. I tried to create a test case with a cross-origin iframe and it seems to have passed, but maybe I got it wrong. This might have been solved already though, given the test already passes without the try/catch block we figured we'd need.\n. As a rule all drivers must have the same API so I can't currently accept this patch as-is (other drivers don't have an initStorage() method. (I should document that somewhere, thanks.)\nIs there some kind of test you could write that covers this?\nAlso, assuming localForage picks WebSQL as the default driver, then gets loaded, then setDriver() is called, does it still create the WebSQL database? Just curious.\n. Oh my, no worries! I think this is a good idea and a good start. If you wanted to give it another pass and re-submit your changes that would be great. If you'd like more detailed feedback I can try to give some come tomorrow (I'm currently in an airport bar with only phone internet access).\n. Where were you seeing this error? It doesn't appear in the tests and I don't think it should cause an error.\n. Huh, right on. That's embarrassing; no test for removeItem(). I've added one and merged this in 48cf5c1d5275690f2e686993509451d3baeac87e. Thanks!\n. The unit tests don\u2019t exactly do what\u2019s in the examples, but @yoshuawuyts, if you could send a gist of what\u2019s not working I\u2019d be happy to look through it. Or are you just loading the example pages directly and getting an error?\n. Looked through and you were right @yoshuawuyts, but it was fixed and now tested against in 33156f93613829babf9870bd9a59b7911bb1be68. Should be good now!\n. That's a good point. In general, localForage could do with some kind of configuration/init method for dealing with stuff like this, DB size, and even default drivers. I like this idea.\n. Fixed in #100, version 0.1.1.\n. I'm not sure why you would have had these domains anywhere else, though I did simply carry over the names from gaia's asyncStorage. Maybe someone else was using that somewhere? I'm honestly not sure, but I'll take your suggestion and switch the name.\n. @coderaiser localForage already tests for indexeddb and websql APIs and uses whatever it can find, so I don't see when your code would be needed.\nI'd love some tests for this, but I will merge it in as-is for now. Though, in the future, if you make changes to the files in src/, please run make build afterward and commit the changes in dist/ so the changes get propagated to the built files. :-)\n. A demo application would probably contain more non-localforage code than localforage code (the entire point of the library is that the API is simple, short, and straightforward). Some snazzier examples in the examples folder would certainly be nice though.\nI too would like better examples, but that's basically #34, I think.\n. I haven't been releasing versions anywhere yet, as I still feel the API is subject to changes, so I haven't been pushing to NPM yet.\nI believe the backbone module can be configured with require.config() (at least that's how I did it with my apps that use it), but if there's a better solution someone can show me I'm game. I actually don't know a tonne about building modules that play well with optional require.\n. I would think it could all be one npm module but required like require('localforage') and require('localforage/backbone') or even require('localforage').backbone or whatnot. I'm not sure what makes the most sense though; I just started getting into bower and grunt recently and am a bit new to npm-packaging of client scripts ^_^\n. I believe @jviereck already had some changes in mind for the build process, but I'm all for using better and more standardized build tools. Right now our build tool is essentially cat, heh.\n. Oh, fair enough. I hadn\u2019t event thought about that :-)\nI guess require('localforage/backbone\u2019) makes sense then?\n. I've used grunt before on other projects and--without numbers to back me up--I think it's more widely used. It seems nice enough, so let's go with grunt.\n. Could you rebase master into it first, then I'll take a look? Sorry, just been paying attention to other issues, but I can look at this now.\n. I like putting all of the code in one folder. This even seems like something localForage itself could do?\njavascript\nvar sync = require('localforage').adapter('backbone').sync;\nWhere the adapter() method calls require and whatnot. Does that make sense?\nEither that or just let someone's require.config fix this. I see it as an issue (I agree, the former path is ugly), but I don't want to move all the code outside src/.\n. Alternatively, couldn't a build process just expose it in the root?\n. This looks good, but can you address the problems and push them here? After that this is good to merge in.\n. The former style is fine by me, and lets more people use it. Let\u2019s go for version 0.8 for now.\n. This doesn't actually merge cleanly, any chance you can rebase master into it?\n. Alright, let\u2019s go with .10 then.\n. Interesting. It would be handy if you could write a test or example that shows exactly what you mean, I'm not quite sure. Especially as storing/retrieving the data in the test I just added seems to work alright.\n. Oh, neato. Okay, let me fit in a test for this too and then I'll merge it in.\n. Strange that it is causing problems, as asyncStorage was mixed case too.\nWhich browser/version/OS are you on, precisely?\n. Fair point though, I should be consistent and use lowercase everywhere. My god the casing in this library is a nightmare! :-/\n. Whoa, the Safari bug is particularly weird, creating multiple tables with the same name.\n. IE10 should be using IndexedDB, not localStorage, by default, so unless you're forcing localStorage I wouldn't think that this would be a problem, especially as localStorage initialization is also wrapped in a try/catch block.\nI don't quite understand your issue, could you describe it more here? Those are awfully wordy posts that seem a bit all over the place.\n. I want to look at this soon, but I'm not sure how to recreate these conditions. Can you please tell me what code you tried to run or what page you were on that caused this problem? Have you tried with the latest version of localforage?\n. For what it's worth, IE 10 uses IndexedDB by default. Odd that IE 8 works fine with localStorage.\n. I am trying to get my hands on a version of Windows 7 with IE 10 but it's proving difficult.\nAny chance someone could send a recorded video of this bug in action?\n. ZOMG thanks.\n. Thanks!\n. Do you have slimerjs installed? Can you give more information?\n. I listed the requirements at\u00a0https://github.com/mozilla/localForage#running-tests, but the short version is I believe you\u2019ll need:\u00a0http://phantomjs.org/download\u00a0and\u00a0http://slimerjs.org/download\nThese can\u2019t be installed with NPM.\n. Oh, right, is casper installed too? Sorry, these tests require a fair bit of infra, as I\u2019m running them on Gecko and WebKit.\n. And you have\u00a0ls vendor/casperjs/bin/casperjs.exe\u00a0?\nI guess maybe the grunt casper task needs to launch the app in a cross-platform way? Hmm...\n. Gotcha. Okay, I\u2019ll have to see about some improvements to the casper-grunt code; I\u2019ll report back later ^_^\n. The grunt-casper npm package supports Windows as of 0.3.2 (which hopefully should be on npm soon). But I'm having issues with slimerjs. Then again, I'm a Windows development newbie, so I could get the phantomjs but not slimerjs tests to output.\n. Yeah, that'd be great. I couldn't get slimerjs to run without an error about application.ini, but I'm totally out of my depths in Windows. phantomjs tests ran though!\nPlease run them and let me know what you see.\n. Okay. I want to say that for now that\u2019s a slimerjs bug? I\u2019m happy to look into it more, but this is better already. Think we should merge it in?\n. Yeah, slimerjs works fine on UNIX (it\u2019s being run on travis).\nOkay, I\u2019ll merge this in for now.\n. Ahaha, whoops! Nice catch :-)\n. I am not a lawyer, but I don't see why NOT including the entire license text is that advantageous. Also, what about non-US copyright?\nI don't neccessarily have strong feelings about this merge, but I also can't really give legal advice, which is what it seems like is required here.\n. Neat that this passes all tests already. Should we add some that ensure the databases are only created on demand? How would you ensure that?\n. Largely this looks really good. Can you check out my few comments? After that I think it's good to merge in. Nice work.\n. Ah, you rule! Thanks so much!\nThat makes sense, thanks for explaining. :+1: \n. Yeah, this is the problem of making the library crazy easy to use and auto configurable. I like this idea, but the easiest way to set this info is a global config like window.LOCALFORAGE_INFO = {[...]}, which isn't super pretty. But we could use this code to do that internally with said global.\nI sort of think that's okay.\nAs an aside, it would be handy if you ran JSHint on the code, as there are some issues with whitespace, ASI, etc. I can go through it if you wanted.\n. #99 was merged in... I sort of think that for now this is something we do with a global for config. So yeah, window.localForageConfig maybe? That's fine for now.\n. The config values for JSHint you should use are in the .jshintrc file in the root of the repo.\n. Sorry, but it looks like this went out of sync with master again. Any chance you could rebase again? My apologies, I'll look first thing once you push the changes.\n. The tests are failing on line 95 in test/test.api.coffee: localforage.key(0) doesn't seem to work using the localStorageWrapper driver.\n. Gee, good points! I never even considered this stuff. The aim of this patch, as I understand it, was not to add in namespacing, but mostly to configuration for drivers that allow it, so I'm going to release a new version that fixes this bug by removing the prefix from localForage.\n. Well, I mean I\u2019m happy to leave the library as-is right now, if it\u2019s understood that localforage.clear() is intended to remove all content from a database, regardless of driver. Technically, the localStorage driver behaves exactly the same as others, given that if you ran in WebSQL mode, then manually added a row to the WebSQL localforage table, then ran localforage.clear(), the same situation would occur.\nOn further thought (I replied to the email a bit too quickly I think), this seems to be intended behaviour. We are relying on the database backend we use to report numbers for things like localforage.length(), and we implicitly make the assumption that we\u2019re the only ones using the backend driver we selected.\nThis is one of the reasons I wrote this; so we didn\u2019t have to use localStorage so much ;-)\nI\u2019m actually going to leave this as-is; the prefixes in localStorage don\u2019t bother me and make it easier to track down when something else is using localStorage. Maybe when I write up some proper API docs (#34) I will make note of this behaviour.\nSo unless anyone has any issues I overlooked, we\u2019ll leave this as-is and call it intended behaviour.\n. Do you mean something like #21? Agreed, it\u2019s on my list!\n. I think .ready() is okay as a public method one could call. I know it nests the code, but honestly I think I like this solution as it's very hands-off. Adding localforage to the jshint globals might be reasonable, as we may sometimes need to access it from different files in the lib.\nOverall, I like this solution. It works but it's abstracted away and requires no change to just using localforage \"out of the box\".\n. You bet: merged in at fbf6c4dd1afdd6a8b91bfc4c4a76cc0eb8d3b1d3!\n. Yeah, I\u2019ll probably create them under the Mozilla repo. At least the Backbone one, which already exists in this repo. I don\u2019t mind endorsing community adapters for other frameworks, but Mozilla will at least publish Backbone and Ember ones, and likely an Angular one, as I\u2019m committed to supporting those.\n. I haven't thought about that, but I'm open to suggestions. I guess cross-browser backbone testing matters less for adapters.\nI'll make the repo this weekend.\nMatthew Riley MacPherson (Sent from mobile)\n\nOn Mar 15, 2014, at 20:59, Jos\u00e9 Magalh\u00e3es notifications@github.com wrote:\nJust create localForage-backbone repo and we can start working on it. Do you want to do any major change? Like for instance using Jasmine instead of Casper + CoffeScript for tests (I'm speaking regarding the backbone adapter). If you want any help I can work on a PR.\n\u2014\nReply to this email directly or view it on GitHub.\n. https://github.com/mozilla/localForage-backbone\n\nI haven't added in any tests there yet, if you wanted to submit a PR for what you'd like the testing to look like I'm cool with that, if you already had something in mind. Let me know; otherwise I can tackle it.\n. Awesome, you rule!\nHere\u2019s a gist of the old backbone tests, if it helps at all:\u00a0https://gist.github.com/tofumatt/9602838\n. The tests assume files are all served with the test/server.coffee file, so this actually breaks them. Perhaps a simple grunt task that allowed a server to run to test the examples would be better?\nAlternatively, one could do a hacky thing like this:\nhtml\n<script src=\"/jquery.js\"></script>\n<script>jQuery || document.write('<script src=\"../vendor/jquery.js\"><\\/script>')</script>\nEven though that's kinda weird.\n. I test the examples to make sure they don\u2019t break. So you\u2019re right, but I want to make sure they still work if code changes.\n. Yeah, the trick is more ensuring the examples don't break, not actually making them tests. The code in the examples is different from the tests, but I want to make sure they don't break either.\nI'm actually going to separate out the Backbone code from the repo anyway, as it makes bower installs and other things better, but I take your point.\nI've moved things to https://github.com/mozilla/localForage-backbone, but I will take your point and config the examples to run fine in the context of serving them from the root of the directory, or adding in an example server that lets everything run properly.\n. You're right, I actually didn't even know there was a storage event! I'm open to adding support for it.\n. I don't think there's any interest in it at this point and I don't see the appeal, so I say we close it. If anyone disagrees let me know \ud83d\ude04 . Huh, interesting.\nOkay, I'll keep it open then. We haven't had any traction on fixing it but after seeing that use-case I'd totally accept a patch! \ud83d\ude04 . Oops, I forgot about that. Yeah, looks like that's all this is really missing.. Yeah, I think that's good.\n@TheNeikos, please follow https://github.com/localForage/localForage-observable/issues/5 for further updates on this \ud83d\ude04 . I wasn't familiar at all with NuGet before this issue, but it looks like a way to handle .NET dependencies/packages, not JS. I understand some packages bake in CSS/JS but localForage is client side only and makes much more sense as a bower package, which is available. Questions about integrating localForage with might be better-suited to Stack Overflow, as it's not an issue with localForage itself.\n. I\u2019m happy to accept patches, but I don\u2019t know the first thing about NuGet. If someone wants to submit a PR for it though I\u2019m happy to accept it. But the issue tracker here isn\u2019t the best place to discuss problems using a package manager we don\u2019t even support yet.\n. Yes, cookie support is intentionally omitted.\nCookies are really small, meaning there's NO way to support blobs, and I'm not even sure the Promises polyfill works in browsers too old for localStorage. Any browser that can't support localStorage is also many years out-of-date (IE 7, for instance, is seven years old). Adding support for cookies would increase the size of localForage a fair bit with extremely little benefit and would be more code to maintain and test.\nBrowsers with localStorage is localForage's minimum target.\n. Looks good, thanks for the driver!\n. The trick might be to improve the require.js tests, I'll see about that later but for now I'm going to merge #111 in.\n. Nothing too concrete yet, mostly filing here for posterity. But I\u2019d like API docs and usage examples that cover the broad range of data storage types, especially now that we support things like strings/numbers to arrays to ArrayBuffers.\n. I've decided to use slate for this, and have a pull request incoming.\n. Well, something tangential but in the back of my head is a way to use localForage as-is now, with the whole:\nhtml\n<script src=\"localforage.js\"></script>\n<script>localforage.getItem('something', console.log)</script>\nBut also allow (mostly for namespacing (#45), config without using window.localForageConfig, etc.):\nhtml\n<script src=\"localforage.js\"></script>\n<script>var myStorage = new localforage({name: 'myStorage', version: 1});</script>\nIf we needed two objects (window.LocalForage is the class and window.localforage is just the default version spun off available in the window/global context) I could deal with that too.\nThe current way the drivers work is pretty dupe-y and simple though. I guess an inheritance model makes sense given the way the library works. Each driver can extend the localForage base object? I would also like to get rid of the way we internally require files, given that everything is concatenated into a single file -- even in development -- anyway.\n. Well, the idea here would be that using the new localforage() API one could set a config and load up a new localforage object without config setting. Though I suppose the default one will still be loaded :-(\nI'm actually okay with the second option... the delay should be minimal, and it actually should improve page/script load time if NO calls are made or they're made later. I think that's a good option, actually. :+1: \n. I would say this relates to #2, as we could essentially swap out which driver is used there with one line if things were set up properly.\n. I would think that developers would want the data in a specific format or would be using a framework already where their collections could do some kind of toJson(). I'm not sure we can do anything other than just export everything, which doesn't seem too useful (or even hard to do with the existing API).\nI think this is out-of-scope, unless there's a specific API someone has in mind.\n. Sadly, we don't have a way to track versions or supply onupgradeneeded events yet, even in IndexedDB. I should actually file an issue for this, but it's something that needs to be tackled before version 1.0.0.\n. As I typed up the issue for adding DB version change support, I question if using the version option even really makes sense in the context of localForage's very simple key/value store.\nIt might not, but if you think it belongs here rather than off in an app's code, please comment on #117. Thanks!\n. Unfortunately right now upgrades aren\u2019t really handled well by localForage :-(\nIt\u2019d be an awesome feature to add but we haven\u2019t been able to get to it.. Whoops, this looks like my fault, sorry!\nThe dist/localforage.js you have is missing the required Promises library. I recently added in external libs as bower dependencies, but I seem to have overlooked mentioning that in the CHANGELOG and README. You might want to try running bower install from the command line, then npm test again to try the tests with the Promises polyfill available.\nI will add some documentation and tests to make sure this doesn't happen again.\n. Cool! I\u2019ll review the existing code tonight. Thanks!\n. I think this is mostly good; it's a bit of a hard thing to read in a diff though. I'll wait for you to push your fixes, then I'll check it out myself to verify.\nLooks good though; just minor points--see my comments.\n. What's the status on this one? It would be awesome to merge in after you land your tweaks :-)\n. Oh, whoops, I didn't see that you pushed the new commit.\nThat sounds good; don't worry if you can't tackle the bigger refactor. If you can take it let me know, but otherwise I might try this weekend, we'll see.\nI'll look this over and try to get it merged in soon. Thanks.\n. Merged in 267ab05. Thanks!\n. I may wait to merge this in until #119 is merged in, just to save the need to rebase.\n. Yeah, it might worth forking the es6 promises implementation to not use window explicitly. But evidently this won't solve @canuckistani's problem anyway... I'll still merge this in as it's nicely to rely on fewer globals.\n. Interesting. Any chance there are docs about the differences in their implementation or which spec they're using? I would prefer to use IndexedDB over WebSQL, so if I could work around it equally easy that'd be neat.\nFor now though I'm open to this fix. If you want to send a pull request I can merge it in ASAP; otherwise I'll get to it later today/tomorrow.\nThanks!\n. Ah okay, thanks for that info.\nYeah, let's just use WebKit instead :-)\n. WebSQL, sorry. Typing on my phone!\n. Thanks for this; I've merged it in 67401ce.\nIn the future, please run grunt build and commit the files changes in the dist/ folder too.\n. Yeah, I actually caught that and patched your commit to use a different (and presumably unused) DB name.\n. I actually caught this and patched it into your commit, so I'll close this out.\n. Oh, that's good to know. This strikes me as expected behaviour given the async nature of IndexedDB, though it's surprising that WebSQL works fine.\nThis could be something to write into the README and/docs. Thanks for the info; I'll leave this open until we have it documented somewhere.\n. @mizchi That looks like a separate issue, but I will check it out.\n. It seems like it would be an inefficient way to calculate size in bytes, and I also worry that with large enough bits of data (say, storing an MP3), it would be memory inefficient, but I\u2019m not so sure about that.\nI\u2019m not opposed to the idea, but I\u2019d want the implementation to be nice and not take up too much code. If you wanted to start a pull request I\u2019ll certainly look with open eyes. Maybe just do one driver and write some tests for it, then if it looks sane we can go from there?\n. No problem. I figured this would be hacky at best, so let's just opt to not do it for now.\n. I think this will break browserify support, though I never actually use that myself. It brings up the point that we should probably have some tests to cover that though.\n. Cool, I'll look into that this weekend. I've got some other stuff to work on today :-)\n. Sorry I let this fall off my plate; it's been a busy week but I'll try my best to check it out soon.\n. Looking into it further, it seems browserify support is all out-of-whack anyway. Could you write some component tests to make sure localforage is working properly with component? Then I can merge this in. Because I don't use it myself, I can't really confirm this works and I don't want to break it in the future. Thanks.\n. So, a few questions about this PR:\n- Why use component over bower? (This is a client library.)\n- Why is localforage.cmp.js in dist/? Should we be distributing a component-specific build? That seems odd.\n. The tests pass when I check out this branch, but I'm starting to wonder if maybe NOT supporting more and more things directly from localForage is the smarter option. I endorse bower and it seems the obvious use case.\n. All merged in! Thanks a lot for your work and back-and-forth on the branch. :+1: \n. Hmmmm, this strikes me as being a bug. Let me look into it. Maybe we're missing some tests.\nWhich browsers/drivers are you experiencing this in?\n. Ah, yeah. @austinpray: if you are using the global config, like @nantunes said, it needs to be set before localForage is loaded. Actually, I think now that we don't initialize the database until after the first API call, we can scrap the global configs. I'll make that a separate issue and work on it.\nI think this will mean depreciating the existing window.localForageConfig.\n. For sure; I\u2019ll update the README for now, and in the future we\u2019ll be removing this sort of clunky way of config.\nThanks for the bug report! :-)\n. I'm definitely cool with this; I'd like for 1.1 to support a lot of multi-key APIs; getItems and keys for sure, possibly setItems and removeItems as well.\n. Unfortunately, localForage switching over to other backends automatically after space is exceeded is out-of-scope. That would involve managing where each bit of data is stored, and given we allow developers to choose their own backend, overriding that choice after they've hit a storage limit would be a lot of work for very little benefit.\nFurthermore, most \"storage exceeded\" or \"requests for more storage\" dialogs simply send us an error if rejected or continue as normal if accepted, but they're all browser UI.\nIf you're interested in storing large files, IndexedDB simply prompts for more storage after a certain point, and you can customize the websql storage size.\nOnly one browser has access to all three storage backends (Chrome), so switching around is also somewhat fruitless in that regard.\nFilesystem API is planned as a possible backend though, see #69.\n. Any other thoughts on this branch? I'd like to merge it in today.\n. :heart: \n. Oh, interesting point. Shame it doesn't search README text, where that's all mentioned. I'll look over the API and try to give it a better description.\n. I changed the GitHub \"about\" section to include said keywords. I assumed that's what you meant, so closing this out. :sunglasses: \n. Oh, good find. I certainly shouldn't be using window anywhere, you're right.\nI'll slot this in for the 1.0 release.\n. @wmluke That would be perfect. If you want to push a PR with tests that should pass, I can even write the code against those tests. Please do that, and I'll merge my branch into it. Thanks! :+1: \n. @wmluke Any word on the tests for web workers? I asked Jake to update ES6 promises so it should work with web workers now.\n. No worries; thank you! :-)\n. Thanks for the report! I'll try to look at this before the 1.0 release.\nIn general, browsers seem to handle storage and private browsing together quite poorly. I recall Safari being especially bad but I forgot.\nThis might just be something we have to document (ie \"private browsing mode doesn't work with localForage), rather than being able to fix. But I'll certainly try for a fix first.\nWhen you load up the test page in private browsing mode, what is the output of localforage.driver()?\n. Could you check to see if #448 helps at all? Using the latest version of master branch should allow you to test.\nHoping we can close this :smile: \n. Unfortunately private mode is not supported by localforage. It shouldn't cause the site to break but saving data in private browsing, even temporarily, doesn't work \ud83d\ude1f. I think I've mentioned before but yeah I'm cool with including memoryStorage driver at this point. Let's do that, maybe for 1.6.. Interesting, so inside a web worker, localStorage backend is broken... I guess web workers are a bit of a special case... do any localStorage-only browsers support web workers? I'd think not.\n. This is great; I'm going to check this out locally and go through this. Will try to merge today. :+1: \n. Seems there's some bug with slimerjs and web workers, you're right. I can't seem to fix it easily, so I'm going to skip the tests in slimer (we do this already; it's a bit buggy). At some point I'd like to move to a more reliable (and also cross-platform) testing platform, so maybe we'll fix this then ( #148).\nI've tweaked some of your code locally; I'll push it and merge it in soon.\n. Merged b23cc8b345d4d9587ebcfeecdd4e5052e8e131bf and cb39ee245edce48e3d8b0c7117ae057cec71f529.\nSee the release here: https://github.com/mozilla/localForage/releases/tag/0.8.0\n. Oh yeah, I'd say it is closed. Thank you :+1: \n. JSHint may not have this feature, it seems. Maybe we should move to only spaces after functions. Don't you do this, @potch?\n. I actually first looked into seeing if I could add my own options but I couldn't follow. I may consider upstreaming it as well, but it will take some time I assume :unamused: \n. Yeah, I\u2019m going to try to do a git bisect to figure out what caused it. I\u2019m wondering if it was the recent update to the es6-promises polyfill.\nThanks for confirming; I\u2019ll try to get a fix out this weekend (I\u2019ll probably be offline Friday, as it\u2019s my birthday :cake:)\n. I want to test these out, but strangely they work only in the browser on WebKit. Noted for #148.\n. Oh, good to know. Is Google aware of the issue? If you wanted to add this to the README under a \"bugs\" section or something that might be handy, unless you think it's just a very temporary bug :smile: \n. Out of curiosity, if you use iterate does this problem come up? Agreed it's a bit of a bug and bad, but I'm curious about that.\n. #39, #45, and #4 all relate to this. Changing the config once localForage has finished initializing currently has weird results, and I'm not sure we'll want to allow reconfig of an init'd localforage instance in the future, but allowing different objects with different namespaces is something we plan on adding.\nIs there a specific use-case you see to changing the same instance's storeName once its initialized? I'd just be worried about race conditions then.\n. That\u2019s correct, right now localForage is just one object, but after 1.0 I\u2019d like for it to be available as a factory so users could have many localForage objects they could use exactly as you describe.\nThere are bugs open for it, so feel free to follow along with development there or even suggest some patches/tests.\nI\u2019ll close this out as I think it\u2019s a duplicate of those issues, but rest assured this is planned for future versions localForage (and sooner rather than later!).\n. Oh, what stuff would that be? If you could link me to some articles that would shed some light on things I'd really appreciate it. I definitely want to use the best/easiest tool.\nOne of the things I've enjoyed thus-far about grunt is its ecosystem; invariably if you can do it in node yes a grunt task for it.\n. I\u2019m open to whatever is best, but I heard broccoli was all about build process, which is what grunt is sort of meh at. Plus: I was looking to explore it here before porting it over to high fidelity.\nI\u2019m all ears!\n. This might also allow us to close #114.\n. So far that looks good, I like being able to use the class for LocalForage :+1: \nI'm moving right now (Canada to the UK!) so I can't code/test much stuff but happy to review things later, whenever you can get to them :+1: \n. Thanks for this. I'm actually finding a fair number of issues using casper as a test runner, so I've started work on #153, but it's far from being complete right now.\nOddly the component test is now failing in this branch, but I appreciate the heads-up on this. I guess I have some test fixing to do.\n. Rebased into #160 and waiting for Travis to verify it's green.\n. Yeah, it\u2019s also the stock browser on Windows 7, or at least was on release.\nFor Chrome it\u2019s nearly impossible to even install an older version, but Firefox users might occasionally be a bit behind? I don\u2019t mind doing a few versions back, though definitely moving with updates.\nDoes just one version make sense? Technically we have support as far back as Firefox 4, but I mean\u2026 no one is using that, right?\n. Thanks for this. I started to recently see problems with web workers failing... I'm going to look into this further and try to fix it in my jasmine test branch (#153).\n. Hmmmm, interesting. I wonder if this is to do with it being wrapped in a closure? We aren\u2019t using window.openDatabase so I thought it would work.\nWhat version are you using, just to be clear?\n. Oh drat, I see. Okay, good to know then. I\u2019ll mark it as dependant on a browser fix.\n. That\u2019s a good point. I\u2019ll open a separate issue for that.\n. Fixed in #165, and the woes of IndexedDB in web workers noted in 23621ade5c19ed7fee02df61917f4c270e22770e. Closing this one out.\n. Hmmm, this might actually be a bug in my test code and not in IE 10/11's implementation. Checking into it.\n. Currently there's no way to exclude a driver from being used, but I see your use case and think it would be smart to add. \nI'm not sure we can get this in before the 1.0 release, but I'd be happy to do this. \nIn terms of actually building a version without localStorage support, that's not a plan for the near-future because it complicates distribution and debugging a lot without much of a size difference.\n. Sorry, hit send before my last point: yes, for now you should check for support yourself. The easiest way is simply to check what localforage.driver() equals by default. If it equals localforage.LOCALSTORAGE, then you'll want to use your server side fallback.\n. Oh, that's an interesting idea, I like it. :+1: \n. Whoops, sorry, I think I closed the wrong thing. My bad.\n. Closed by #216.\n. What version of iOS are you using, and on what device? I haven't seen this before, so if you could provide more info (especially a code snippet) that would help me fix your problem. Thanks!\n. I'm going to investigate further; sorry for the delayed response on this one.\n. Sorry but we never got to this and I don't think it's still relevant. If I'm wrong feel free to re-open but I think this should be closed.\n. This sounds reasonable, I'm cool with the idea :-) \nThe trick would simply be to add another concat option without the polyfill, then uglify it to presumably dist/localforage.nopromises.js.\nIf someone wants to get to it sooner than me that'd be great otherwise I'll try to add this for the next release.\n. @jokeyrhyme, looks like this should fix your issue, yes? \n. Thanks for the (fast!) PR! \n. Yeah, browserify support is a bit busted, and I'd like to improve it. If anyone has fixes that'd be grand, as I'm not a big browserify user, but otherwise I'll take a crack at it eventually.\n. ## I'm not actually a browserify user myself, so patches welcome! \ntofumatt (Sent from mobile)\nOn July 5, 2014 8:03:23 PM EDT, \"Erw\u00e4nn Mest\" notifications@github.com wrote:\n\nGosh, we're the 6th june, and it still doesn't work with browserify.\nWhy people support bower and not npm/browserify first?\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/mozilla/localForage/issues/174#issuecomment-48099464\n. ## There will be, but I still have to take a look at fixing up that PR. Hopefully next week. \n\ntofumatt (Sent from mobile)\nOn August 23, 2014 10:24:38 AM ADT, Oliver Hoffmann notifications@github.com wrote:\n\nIs there any plan to support browserify again after PR #227 has been\nreverted?\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/mozilla/localForage/issues/174#issuecomment-53152755\n. Thanks for the bug and the example. I'll take a look and see what's going on.\n. Oh, how interesting and weird! I think I was seeing this in the new tests I was writing as well.\n\nThe setTimeout thing is a weird hack, but I can't see it actually being a problem. Maybe it's a decent workaround for now?\n. A pull request with that would be great. I will merge it in once I see it :-)\n. If you want to send a PR for this now that'd be great; I merged the other branch in ^_^\n. I think just for IndexedDB makes sense, unless there are demonstrable performance gains to be had.\nA little comment on why we do this inside the code would be great as well (see here for an example); otherwise this looks good :+1: \n. Awesome! Thanks so much :+1: :+1: :+1: \n. Hi there!\nI noticed you closed this issue and deleted your question on StackOverflow. Did you find out what was happening here? I'm curious to know if this is a real bug. Thanks!\n. Are you explicitly forcing IndexedDB? localForage shouldn\u2019t use it in Cordova, but will on Chrome/Firefox. I would have thought Cordova was always using WebSQL.\nCould you send a test case to try in cordova/desktop/etc. so I can reproduce the issue?\n. Thanks so much! Merged in 3ef964cda962797ea5490ac1e9f3271855c30136 :+1: \n. Noted in the README in 23621ade5c19ed7fee02df61917f4c270e22770e.\n. No problem... were you planning on writing some or should I look into that?\n. Okay, no rush. If I can manage to get to it beforehand I\u2019ll write some tests and update this pull request. If I haven\u2019t added any feel free to start.\nEither way: thanks for the pull request! :-)\n- tofumatt\nOn June 19, 2014 at 15:03:09, Thodoris Greasidis (notifications@github.com) wrote:\nThe sooner I will be able to take a look at the test structures of the project is Monday :-/\n\u2014\nReply to this email directly or view it on GitHub.\n. Looks like there might be a race condition on the web worker test, which is probably a bit iffy anyway. I'll look into that, but it's not your fault.\n. ## If you could combine all the commits into one that would be great,  but no worries if not. I'm just out at the store but I'll take a look soon, once I'm home. \ntofumatt (Sent from mobile)\nOn June 25, 2014 7:24:17 PM EDT, Thodoris Greasidis notifications@github.com wrote:\n\nHello @tofumatt,\nI just pushed a new commit with the required tests (I think).\nPlease comment about any concerns about the code structure.\nDo you think it would be better to clean up the commits and push just\none?\nOnce more, my travis build\npassed but\nI had to issue 2 restarts...\nWaiting for your feedback :smile: \n\nReply to this email directly or view it on GitHub:\nhttps://github.com/mozilla/localForage/pull/183#issuecomment-47171555\n. r+\n\nThis all looks awesome, thanks! I'll wait for you to combine the commits then I'll merge it in.\nI only had one question, and it was a minor question about using !('setItem' in localStorage) over !localStorage.setItem. Other than that :+1: \n. Oh, and regarding the .support() -- whichever makes sense to you, but it will probably be easier to fork from master? If you want to fork from this branch it's fine, just be sure to do it after you combine commits, or you'll have to rebase again. It will definitely make sense as a separate pull request.\nIf you ever want any git pointers feel free to hop onto the #apps channel on irc.mozilla.org -- a number of us can help out if you need it :-)\n. Nice! Is there a test we can add to make sure this doesn't crop up again?\n. Wow, awesome! I'm busy doing some home renovations today but I'll take a look at this ASAP.\nFeel free to add tests whenever; I'll keep an eye on the branch :-)\ntofumatt (Sent from mobile)\nOn June 21, 2014 7:33:26 PM EDT, lu4 notifications@github.com wrote:\n\nNo tests yet\nYou can merge this Pull Request by running:\ngit pull https://github.com/lu4/localForage master\nOr you can view, comment on it, or merge it online at:\nhttps://github.com/mozilla/localForage/pull/185\n-- Commit Summary --\n- iterate functionality\n-- File Changes --\nM dist/localforage.js (123)\n   M dist/localforage.min.js (2)\n   M dist/localforage.nopromises.js (123)\n   M dist/localforage.nopromises.min.js (2)\n   M site/localforage.min.js (2)\n   M src/drivers/indexeddb.js (35)\n   M src/drivers/localstorage.js (22)\n   M src/drivers/websql.js (66)\n-- Patch Links --\nhttps://github.com/mozilla/localForage/pull/185.patch\nhttps://github.com/mozilla/localForage/pull/185.diff\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/mozilla/localForage/pull/185\n. I'm guessing that, due to the way promises resolve only once but this iterates through each item, this is effectively a callback-only method, right?\n\nI think that's okay, but it's worth noting. It's possible the Promise should never even resolve, so the developer knows this is a callback-only method.\nIt looks like some tests would help here, as the implementation seems to miss out on serialized values.\n. Fixed in #283.\n. ## Does it fail to initialize at all, or does a particular bit of code fail? \ntofumatt (Sent from mobile)\nOn June 26, 2014 4:27:53 PM EDT, Artemi Krymski notifications@github.com wrote:\n\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/mozilla/localForage/issues/187\n. Seems to work fine for me; just cleared my local databases and ran the tests including webSQL:\n\n\n. If you still find there's a bug, just send me a runnable code sample (JsFiddle, etc.) and I'll check it out.\n. Looks cool, thanks! If you wanted to send a pull request to resolve this issue that would be great; I\u2019ll merge it in ASAP.\n. Sorry, I think yes. Just gotta find the time! ;-) I'll take a look now.\n. No worries; no bother! Sometimes it\u2019s useful to ping me; I get distracted!\nI\u2019m just tweaking a test in the code and then I\u2019ll merge it in :-)\n. Which driver are you seeing this with? I ran the tests on my Windows 7 VM and setItem(\u2018foo\u2019, null) works okay.\n. I've noticed that there are some issues with binary data tests, localStorageWrapper and IE 11. I'm looking into it.\n. Whoa, that looks great! Thank you! :+1: \n. You'll need to run gem install inside the folder, then simply run grunt site and open localhost:4567\nI haven't thought of adding them as a big priority as I want to switch to a node solution, but would happily accept a PR if sent for the interim until we switch the docs to a node build step.\n. Oh, yeah, good idea. Let me look at some bugs but I\u2019ll add a 0.9.0 release soon. You can of course just use the master branch as a bower target until then ;-)\n. Released pushed: https://github.com/mozilla/localForage/releases/tag/0.9.0\n. Sounds like you already have a fix? If you could send a PR that'd be great ^_^\nIt seems like it's hard to write a test for, at least until we do some selenium tests too.\n. New version released, thanks for the fix! :+1: \n. Huh, I don't think anyone else mentioned it but that's interesting. Was there anything in the release notes for that version that talk about IndexedDB?. I'll file a separate issue to write maybe some kind of test for this... I wonder if we can override IndexedDB to make it fail and thus have the promise reject?\nAnyway, thanks much! I'll push out a patch release tonight.\n. Looks like this needs an update/rebase from master, but after that I think it's ready to be merged.\n. Oh, looks like these commits are in #206. Maybe we just want to clean that one up and close this one?\n. It should ask long as the commits haven\u2019t been rebased :-)\n. Any particular platform you're experiencing this on? i.e. Android, iOS, etc.? Also: which version of PhoneGap?\nI would have thought we'd be using WebSQL on Phonegap. Any ideas @zalun or @rodms10?\n. I\u2019m curious to know if you change that line to cursor[\u2018continue\u2019]() \u2014 does it work? I know we\u2019ve done that with older versions of IE throwing similar errors (it didn\u2019t like .delete()). Any chance someone could try it and report back?\n. ## Interesting, cordova doesn't like that either. I wonder if the same ['continue']  trick we do with .delete would work? \ntofumatt (Sent from mobile)\nOn July 8, 2014 12:53:20 AM EDT, Oechslin notifications@github.com wrote:\n\nTrying to load version 0.9.1 of ...\n- localforage.js\n- localforage.min.js\n- localforage.nopromises.js\n- localforage.nopromises.min.js\n... in Internet Explorer 8 or IE8 Browser Mode will fail and\nproduce one of the following javascript errors:\n\nSCRIPT1010: Expected identifier: localforage.js, line 1014 character\n28\nSCRIPT1010: Expected identifier: localforage.js, line 1 character\n7660\nSCRIPT1010: Expected identifier: localforage.nopromises.js, line 331\ncharacter 28\nSCRIPT1010: Expected identifier: localforage.nopromises.min.js, line\n1 character 2483\n\nInternet Explorer 8 doesn't like the following line:\njavascript\ncursor.continue();\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/mozilla/localForage/issues/202\n. Oh, nice. I should enable that option, as JSHint is already part of the test suite. Thanks.\n- Matt\nOn Jul 9, 2014, at 3:32, Jussi Kalliokoski notifications@github.com wrote:\nApparently JSHint's es3 option should help with preventing this class of errors.\n\u2014\nReply to this email directly or view it on GitHub.\n. I didn't end up enabling the es3 option for everything as I used a build step instead, but I think I'll add a JSHint including es3 for the built versions, just to be safe.\n. On second thought that's probably extra paranoid, but either way this is fixed now.\n. I added a check for trailing commas in the style checker; I don't want to write the source files in ES3 mode but would rather just convert them during the build step, as writing ES3-compliant JS feels awkward. I hope this should fix everything! :-)\n. Very curious about the test failures, as they seem to run okay on Travis too. I'll check into that and then review this PR. Thanks a BUNCH though, this looks great and it's handy to have someone with more knowledge about browserify fix this up :+1: \n. Sounds good; I really do appreciate the effort. I\u2019m a bit bogged down in another Mozilla project but I\u2019ll try to give any updates extra attention, as I know a fair number of people are looking for Browserify to be fixed. Thanks ^_^\n. Any updates on this? Sorry I haven't been around much this week for PRs and such; been a bit busy with some work on our new HTML5 Podcasts app at Mozilla.\n. No updates from me, but if someone could find the reason for the bug and patch it I could certainly review it quickly.\n\nI have less time to hunt down bugs right now so I can't give a date on this, though I understand it's a frustrating issue.\n. Ah okay, sounds good.\n- tofumatt (Sent from mobile)\n\nOn 7 Jan 2016, at 10:45, S\u00e9bastien Tisserant notifications@github.com wrote:\n@tofumatt I think we should close this issue, since it's related to #342 which has been fixed.\n\u2014\nReply to this email directly or view it on GitHub.\n. Oh, thanks a lot. I thought I messed this up a bit but wasn't sure. I'll be looking at the PRs and issues in here tonight or tomorrow; just catching up on some work on another project today.\n. Oh wait, should I have merged this one first? I think you might need to clean this up, but after that we can merge this in too.\n. Sounds good, thanks!\n. Awesome! Looks great, thanks! :+1:  :+1:  :+1: \n. Sorry but I really lost track of this in my rush to stabilize things for 1.0.0. Has everything from here been merged in #212 or is there still more to review/work on here?\n. Any word on this? If anything useful didn't get merged I'd love to look at getting it in the next release! :smile: \n. Cool stuff! No rush, but let me know when it\u2019s ready and I\u2019ll review. If I can help at all just let me know how :-)\n- tofumatt\n\nOn October 21, 2014 at 23:08:33, Beng Hee Eu (notifications@github.com) wrote:\nI checked it out - looks like these would still be useful, with the same caveats as before. Tried merging but it's non-trivial, so will probably have to work on it during the weekend.\n\u2014\nReply to this email directly or view it on GitHub.\n. Any update on this?\n. Closing for now, but if there's any update just reopen :-) Thanks! \n. This seems interesting and I'm certainly open to accepting a PR that gave us a sense of code coverage. I honestly don't have the time to get to it myself for at least a few weeks, but I'd happy review any PRs :-)\n. This seems to fail a test: https://travis-ci.org/mozilla/localForage/builds/30171694#L2508\nWhy is that?\n. All looks good, just waiting on a response for the --dev flag question and then it's good to merge. Thanks for the PR! :+1: \n. Fixed in 40e3a03669676c5029e3370a83c2e4f41a16d41c\n. No problem. Let me know if it was something unclear in the documentation or anything I can help with, so others don't make the same mistake :-)\n. This is pretty clever, nice!\n. See my comments, but otherwise this is great! :+1: \n. Oops, I think I might've made this need another rebase, but I'll take a look at it myself now to fix. Thanks so much for your work on this!\n. Merged in (I did a rebase) 39c5a25ab170ffc1c3dbcc54ccccb4494f63f102. Thanks a bunch! This is a really useful patch :+1: \n. Which browsers are you seeing this happen in? I'll try adding a quick test case to the test suite to try to reproduce it. \n- Matt\n\nOn Jul 21, 2014, at 12:40, designbyadrian notifications@github.com wrote:\nIf an object contains an array, the array is left empty.\nExample:\nlocalforage.setItem('users',{updated:true,list:[{id:1},{id:2},{id:3}]});\nlocalforage.getItem('users'); // ,{updated:true,list:[]}\n\u2014\nReply to this email directly or view it on GitHub.\n. Okay! I've added in a bit more of a complex object with tests and it seems to work, just in case.\n\nIf you're still experiencing issues feel free to let me know, but I'll close this for now. :-)\n. Awesome, thanks! I like the look of these more :-)\n. Good catch, thanks!\n. Nice! I don't think I have any comments other than minor whitespace nitpicks, so I'll just tidy those up and merge this in. Thank you, I like the implementation (and also all the tests). :+1: \n. Turns out the website only briefly mentions it, but I added a bit more of an obvious note about Promises as well as the getItem code example with a Promises sample.\n. I like the idea that it\u2019s positive thinking ;-)\nI agree, but I\u2019ve heard complaints about not using node-style before. I just wanted to check this time before finalizing the API, which will happen soon.\nI\u2019ll leave this open for this week, but likely make a decision based on any discussion here by Friday :-)\n. Well, there are callbacks, they just aren\u2019t error-first (like in Node). Promises or callbacks can be used; this discussion is just around using error as the first argument.\n. More people have chimed in wanting error-first than not, and promises are still old-style. I'll convert to error-first in 1.0; we'll see what happens :)\n. ## So the code is still failing in IE? What line? I wonder if the uglify step de-es3s things as well. I would hope not but come to think of it I'm not sure.\ntofumatt (Sent from mobile)\nOn July 28, 2014 8:37:53 AM EDT, Jussi Kalliokoski notifications@github.com wrote:\n\nOh, right, and that is testing against the bower release 0.9.2.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/mozilla/localForage/issues/220#issuecomment-50332534\n. Also: are you using the minified or regular version?\n. Interesting. Would you be able to send a pull request with your changes? Even just submitting one will run it against the tests, which would be a very useful start! \n\nIf not I can try to take a look early next week. Let me know :-)\ntofumatt (Sent from mobile)\nOn 7 November 2014 06:13:27 GMT-05:00, James Sharp notifications@github.com wrote:\n\nI've just run into this. It seems to be the Object.create functions\nthat are causing the problems (it's ES5 functionality). By including\nes5-shim and es5-sham and by\nrunning the localforage code through a filter to swap out all the\nreserved keywords I've managed to get the code running on IE8 (though\nhow well it runs I don't know yet\u2026)\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/mozilla/localForage/issues/220#issuecomment-62128955\n. Yeah, I would hope browserify is still using the dist/ versions of the files, right? If not that's a separate bug that relates to this, but if the dist/ versions are what is told to be used then this bug might be a \"won't fix\" under \"don't use the src/ files directly in-browser\".\n. Curious, we are using an es3-safe task that should make things okay for IE 8.\n. Oh, wait, I understand why: it tries to import that module that's already in the dist file that's combined.\n\nThere are a few options here I guess. Could we supply a dist/browserify folder (messy, but could keep our src/ files clean) that is es3-safe but uses separate files?\nI don't REALLY care what dist/ looks like that much, especially when we specify dist/localforage.js as the default. Building out a folder for browserify, which is a big thing for lots of developers, is fine by me.\n. Oh, weird, are there still karma unit tests? I think I experimented with them but should have removed them.\nTo run tests try npm test. I\u2019ll remove the karma files. :-)\nEDIT: @andela-idurotola There are no karma files, try npm test instead to see the tests running, but please report any issues you have as new, as it doesn't relate to the issue here. :-)\n. I like this idea (except for the Google JS Doc annotations)! It's cleaner and easier to follow. Any PR that better organizes code is good to me :+1: \n. I'm okay with the enum style being used at the top. I think it makes things a bit clearer to read, yeah.\n. Is there some kind of easy API to push new versions without me having to do anything? It's already on GH-pages and I don't really want to maintain this if it's manual. If it's automated I don't mind.\n- Matt\n\nOn Aug 1, 2014, at 11:45, Jacob Magnusson notifications@github.com wrote:\nWould be nice to have localForage on jsdelivr.\n\u2014\nReply to this email directly or view it on GitHub.\n. I like the sounds of that ^_^\n- Matt\nOn Aug 1, 2014, at 11:57, Jos\u00e9 Magalh\u00e3es notifications@github.com wrote:\nCDNJS is automated after the first PR to the repository\n\u2014\nReply to this email directly or view it on GitHub.\n. Looks good to me. Want to add it to CDNjs as well or just consider this done? \n. Perfect; thanks so much!\n. Good catch!\n. I like it; clearly defined is always better :+1: \n. :heart: This is awesome.\n. This is a fair bit to get through, but I'll try for tonight. Seriously though, this is awesome. Nice to have it done before I mark the library as 1.0 too ^_^\n. Sounds good. Right now the saucelabs stuff is fragile anyway, so I'm up for improving it as a separate task even. The publish bit is just me automating a ruby shell command for completeness's sake, but there's a bug open to move the site's build process to node anyway, so both of those issues are safely left for later :-)\n- Matt\nOn Aug 6, 2014, at 14:21, Andrew Sliwinski notifications@github.com wrote:\nLOL. Thanks folks! \n@tofumatt I went though and made some revisions as per your notes. A couple things that are missing from the new build process that I could use some help with:\nThe publish task needs to trigger the rake / bundle processes\nNeed to restore saucelabs integration (https://github.com/karma-runner/gulp-karma)\n\u2014\nReply to this email directly or view it on GitHub.\n. As mentioned, looks like the only gotcha is that we don't pass the code through an es3-safe-recast type task (unless browserify does this for us?), so the code will break in older IE and Android versions we still support. (Side note: maybe we should have an actual test for this somehow.)\n\nOnce that's fixed this is r+\n. :+1: :+1: :+1: \n. The previous version just es3 cast the actual localforage.js for ease of use. The added bytes from the array notation (pretty much the only thing we do that isn't es3 safe is use keywords like continue and delete as method names) isn't much to be bothered by, so let's just keep those as the sole output.\n- Matt\n\nOn Aug 8, 2014, at 0:22, Andrew Sliwinski notifications@github.com wrote:\nShould be all set! I added a transform called es3ify that is functionally equivalent to the es3-safe-recast. The gulp build now kicks out two additional files called localforage.es3.js and localforage.es3.min.js.\n\u2014\nReply to this email directly or view it on GitHub.\n. I have some stylistic tweaks to add, but I'm gonna merge this in then do those in a separate branch.\n\nAll in all this is_awesome_, thanks for the great PR!\n. See #231... looks like this didn't work as well as I'd hoped. We can chat in the #apps channel if you like tomorrow if you'd like. Sorry for the PITA, but we'll need to make a new PR for these changes after I reverted them.\n. Cool, I'll take a look at this after we fix what's up with the browserify branch by @thisandagain, but this looks good to me.\n. Nice catch, thanks! \n. ## I'll be taking a look at this ASAP, but I'm off in Brazil with limited Internet until Tuesday at least. Promise it's top of my list though! \ntofumatt (Sent from mobile)\nOn September 5, 2014 1:13:15 PM GMT-03:00, Nathan Hunzaker notifications@github.com wrote:\n\n:+1: Please!\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/mozilla/localForage/pull/237#issuecomment-54646234\n. Honestly it's mostly just that I'm behind; I was away on vacation and now I'm just getting back to things. Really sorry for the delay but I'll review things more soon.\n. Hmmm, looks a bit complicated but I guess it's a good way to fix these issues. I'm cool with that, yeah.\n- Matt\nOn Sep 2, 2014, at 18:45, Thodoris Greasidis notifications@github.com wrote:\n@tofumatt How about changing all the code that looks like this (found in most API calls in the drivers)\nreturn new Promise(function() {\n  ...\n  if (callback) {\n    callback(something);\n  }\n});\nto something like\nvar promise = new Promise(function() {\n  ...\n});\npromise.then(function(value) {\n  callback(value);\n}, function(error) {\n  callback(null, error);\n});\nreturn promise;\nThis way a callback that throws an exception will not interfere with the rest of the promises.\nIt can also safely replace deferCallback code of IndexedDB Driver (I did some tests).\n\u2014\nReply to this email directly or view it on GitHub.\n. I'll merge this, but in the future you'll want to modify the files in the docs/ folder and then I'll publish the resulting changes to the gh-pages branch. I guess I should document that better :-/\n. Heh, no problem; thanks! :-)\n- tofumatt\n\nOn August 31, 2014 at 18:44:04, Thodoris Greasidis (notifications@github.com) wrote:\nOooops!\nI will give #240 a try tomorrow night.\n\u2014\nReply to this email directly or view it on GitHub.\n. Nice catch! I'll try to figure this into better, more expansive tests in the future as well.\n- Matt\n\nOn Sep 28, 2014, at 00:33, David Frank notifications@github.com wrote:\nIn a related note, which I think localForage document should mention, is that Chrome doesn't support Blob storage until m37. But as far as I can tell, localForage doesn't do anything special in the IndexedDB driver to polyfill such limit.\nThus using it with Modernizr detection would be necessary if you want to store Blob consistently across browsers.\nhttps://github.com/Modernizr/Modernizr/blob/master/feature-detects/indexeddbblob.js\n\u2014\nReply to this email directly or view it on GitHub.\n. Perfect, thanks so much :-)\n. Interesting. Should we be casting integers into floats (and then into strings) so this error never happens? I think IndexedDB versions are usually Floats, right?\n. Would something like #104 do the trick? Or do you mean using Object.observe? I guess I can see use-cases for this, though it'd be a fair amount of work to code?\n. @mreinstein I think the idea would be to have it be observable for all events, so you could know when a localForage object fired any event (setItem, getItem, etc.), so it would need to exist for all drivers and all types of events.\n. The plugin allows using observable, please follow https://github.com/localForage/localForage-observable/issues/5 for cross-tab support \ud83d\ude04 . I\u2019ll check this out locally tomorrow morning \u2014 I have some plans tonight and don\u2019t have a lot of time ;-)\n- tofumatt\n\nOn September 25, 2014 at 18:55:06, Thodoris Greasidis (notifications@github.com) wrote:\nInterestingly the tests are failing only locally...\nOn TravisCI they seem to pass...\nCan anyone reproduce?\n\u2014\nReply to this email directly or view it on GitHub.\n. ## Good point, this is also something we should have a test for but don't. Good catch! \ntofumatt (Sent from mobile)\nOn September 12, 2014 4:01:28 AM EDT, David Frank notifications@github.com wrote:\n\nsince we are prefixing the localStorage key to get it working with\nstoreName (sort of namespacing), using localStorage.clear() seem\nundesirable both, we should probably enumerate keys and match prefix. \n\nReply to this email directly or view it on GitHub:\nhttps://github.com/mozilla/localForage/issues/246\n. Does this happen with database names too, or just storeName?\n. On it :-)\n- tofumatt\n\nOn September 15, 2014 at 13:45:19, Thodoris Greasidis (notifications@github.com) wrote:\nWhat!?!?\nPhantomJS has crashed\n@tofumatt can you restart the test?\n\u2014\nReply to this email directly or view it on GitHub.\n. ## Sorry, I've been feeling sick. I'm gonna look at this today. All day will be spent working on localForage :-) \ntofumatt (Sent from mobile)\nOn September 22, 2014 12:11:08 PM EDT, Thodoris Greasidis notifications@github.com wrote:\n\nAny comments/review? :-(\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/mozilla/localForage/pull/249#issuecomment-56397429\n. I think this is good. Sorry it's taken me ages to get to the PRs on here. Thanks! :+1: \n. Which database drivers does this happen in? Definitely worth throwing an error, or possibly casting all keys to Strings...\n. Good catch, thanks! \n. Oh, this is a really good point! Good catch, thanks! \n. Whoooooooa! :+1: :+1: I'll review this first thing tomorrow morning.\n. Would be cool if we updated the README or API docs with this too; opened up a new issue for that.\n. P.S. This is so awesome. I owe you a beer, @thgreasi!\n. Definitely a bummer! Feature testing is obviously preferred, I'll look through to see if there's something they do that we can test against other than just a User Agent. \n- Matt\nOn Sep 26, 2014, at 12:35, Olivier Combe notifications@github.com wrote:\nIt seems that Apple screwed up the iOS8 indexedDB implementation: http://www.raymondcamden.com/2014/9/25/IndexedDB-on-iOS-8--Broken-Bad\nDo you know if there is anything you could do to prevent iOS8 from using indexedDB, until this problem is resolved ?\n\u2014\nReply to this email directly or view it on GitHub.\n. If IndexedDB is too broken to use I'll leave WebSQL as the default driver for iOS 8. \n- Matt\nOn Sep 26, 2014, at 12:39, Thodoris Greasidis notifications@github.com wrote:\nYou can probably somehow detect the browser and use setDriver, as found in the docs.\n\u2014\nReply to this email directly or view it on GitHub.\n. Right, but I'd prefer not to do that, as things like Cordova/PhoneGap might not report the right UA but have access to a WebKit with IndexedDB. We'll only use UA if there's no other way.\n. ## Oh, nice. I think we can manage an async test, though I wonder if UA sniffing is much faster... \n\ntofumatt (Sent from mobile)\nOn 30 September 2014 10:41:04 GMT-04:00, Nolan Lawson notifications@github.com wrote:\n\nWe wrote an isolated\ntest you can\nuse to detect the broken functionality in iOS 8 and Safari 7.1. It\ndetects the issue with being unable to open two object stores at once,\nalthough not the issue of keys overwriting each other.\nUnfortunately in PouchDB we just fell back to user agent sniffing,\nbecause we needed a synchronous test rather than an async one.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/mozilla/localForage/issues/254#issuecomment-57324168\n. ## I don't have a phone I can use to test 8.1 on yet, but if it gets fixed in 8.1 I'll surely adjust so it uses indexeddb on 8.1\n\ntofumatt (Sent from mobile)\nOn 16 October 2014 16:56:21 GMT-04:00, Viktor Rutberg notifications@github.com wrote:\n\nHas anyone been able to test this on iOS 8.1 yet? I am experiencing\nthese problems as well, but haven't been able to test in iOS 8.1 so\nfar.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/mozilla/localForage/issues/254#issuecomment-59429096\n. ## Yeah, we have recently fixed these issues but I need to update it on npm. I'll do that today :-)\n\ntofumatt (Sent from mobile)\nOn September 28, 2014 7:25:25 AM EDT, Naman Goel notifications@github.com wrote:\n\nThere is a localforage package on npm, but it is hopelessly broken.\nAnyway that can be fixed? I use browserify and npm is the most\nconvenient way to get libs.\nIn particular:\n- the main file points to the dist folder. Using that throws an error\n  saying it can't find the drivers.\n- If I manually point to src/localforage.js it builds correctly, but\n  doesn't actually work, and has no driver set.\n- If I manually set the driver, the setItem and getItem methods are\n  still inaccessible.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/mozilla/localForage/issues/255\n. This will be fixed in #256, which should be merged tomorrow or Tuesday.\n\nIf it's more urgent, ping me here and I'll fix it up faster.\n. This was fixed and version 0.9.3 was pushed to NPM. I'll be pushing 1.0 later tonight :smile: \n. Yeah, that should be it really. Let me know if you\u2019re gonna work on it and I\u2019ll keep my eye out for a PR!\n. Awesome! I\u2019m in Greece right now so I might not get to it until tomorrow morning European time, but I\u2019ll look at it ASAP :-)\nThank you!\n. @thgreasi I was just at an MDN Hack Day in Berlin, but it was pretty small. Fun fact, I'm in Athens until May, so maybe I could see about getting something together later in the month/early May. You should send me an email if you're near Athens and think it would work :smile: \n. Yeah, building the docs has become an issue lately and I think they're out\nof date. I have to fix how they're generated (we have an issue open for it\nbut I'm on my phone right now and can't find it).\nI'll prioritise getting that solved to update the docs site.\n- tofumatt\n. Whoops! Can't believe I missed that one, thanks! \n. ## Good catch; I'll fix this up within a few hours. \ntofumatt (Sent from mobile)\nOn 2 October 2014 05:01:18 GMT-04:00, tobemedia notifications@github.com wrote:\n\nThe Repository README.md is up to date:\n\"Note that callbacks in localForage are Node-style (error argument\nfirst) since 0.9.3. This means if you're using callbacks, your code\nshould look like this: ...\"\nThe API Reference at http://mozilla.github.io/localForage/ is outdated.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/mozilla/localForage/issues/263#issuecomment-57601253\n. Sorry, my bad. I fixed this (6f7a27bd2c2d90b19472f796f5b421fd38f49451) but forgot to push the new site. Fixed now (4ed8efddfb2c23c3229d9b69b9cb5be2a7cb8080).\n. Yup, localForage will never be synchronous.\n. Oh, very nice! :+1: \n. I'll push out 1.0.1 in a bit so this bug is fixed for everyone, thank you very much for the fix!\n. @thgreasi I think so, largely because then we can link changes in dist to changes in a commit. It makes reverting that change possible, and allows people to get localForage from bower without a build step.\n\nI agree it's awkward; I really wish we didn't have to do it, but I can't find another sane way that isn't worse for end-users. I'd rather our job as developers of localForage be hard (there are only a few dozen contributors) than the many users have a worse time.\n. I would be open to allowing this ability, though beyond what we already have I'm not sure what useful backends exist? localForage is aimed at browser usage/offline use, and as a storage API is pretty simple. More complex things like PouchDB or lawnchair are out there and already better at certain things than us :-)\nI think the idea of localForage being lightweight and targeted as a library is nice. What use-case would you have for this if you could write your own driver?\n. ## Interesting... I wonder if this particular sqlite cordova bit could be something we build right into localForage or if it could be a configuration option. I'm all for better cordova support and it seems like a trivial bit. Worth a separate issue perhaps? \ntofumatt (Sent from mobile)\nOn 10 October 2014 00:51:44 GMT-04:00, Thodoris Greasidis notifications@github.com wrote:\n\nThat's exactly what I was thinking.\nUsing one API for offline data access in your Cordoba and your web app\nbuild, but still using the best infrastructure you can get.\nMoreover, the native database APIs tend to provide better quota limits\nfor your data.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/mozilla/localForage/issues/267#issuecomment-58612356\n. This seems to cause the component (and only the component) build to fail. Any guesses as to why?\n. Any news on this? ^_^\n. Ah, no worries. Should we close this for now then or leave it open and just update it when the fix lands?\n. Closing this for now; feel free to re-open if there's anything new :smile: \n. :+1: Very nice stuff, thanks!\n. ## Yeah, I wonder if it's really even appropriate post 1.0. It bugs me that they have weird names, but if people are using the string identifiers manually it will break things. Maybe we can do this during another API change? (1.1 or something) \n\ntofumatt (Sent from mobile)\nOn 11 October 2014 05:17:56 GMT-04:00, Thodoris Greasidis notifications@github.com wrote:\n\nObviously this might break some older (pre-0.9??) use cases.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/mozilla/localForage/issues/270#issuecomment-58743621\n. Will it work on a One M8? If so I could grab a friend's phone to test. I have an M7 but it has cyanogenmod on it anyhow... \n\nI'll try to test this out somehow, but thanks for the PR. I like not having to do the empty db test!\ntofumatt (Sent from mobile)\nOn 12 October 2014 10:48:37 GMT-04:00, Nolan Lawson notifications@github.com wrote:\n\nRelated to #128 and https://github.com/pouchdb/pouchdb/issues/2810.\nWe used to do the onupgradeneeded check in PouchDB as well, but then\nI discovered recently that those same Samsung/HTC devices also\ndon't have any of the standard window.IDB* variables defined. So\nyou can just check for those, instead of needing to create an empty\ndatabase.\nI encourage you to grab a Samsung S3 or HTC One with Android 4.3 to\ntest this, but so far this seems to be an equally reliable test.\nYou can merge this Pull Request by running:\ngit pull https://github.com/nolanlawson/localForage\nsimpler-samsung-test\nOr you can view, comment on it, or merge it online at:\nhttps://github.com/mozilla/localForage/pull/272\n-- Commit Summary --\n- Simpler test for outdated IndexedDB spec\n-- File Changes --\nM src/localforage.js (5)\n-- Patch Links --\nhttps://github.com/mozilla/localForage/pull/272.patch\nhttps://github.com/mozilla/localForage/pull/272.diff\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/mozilla/localForage/pull/272\n. I still like that this is much less code and doesn't required creating a weird empty database, so this is merged in. Cheers!\n. ## Ohhhhh sweet. I'll take a look first thing tomorrow! \n\ntofumatt (Sent from mobile)\nOn 15 October 2014 17:51:22 GMT-04:00, Thodoris Greasidis notifications@github.com wrote:\n\n@tofumatt, @ocombe feel free to review.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/mozilla/localForage/pull/273#issuecomment-59282672\n. Looks great to me! I'll add a bit of docs and then merge this into master.\n. This is related to #260; we can now actually have multiple instances of localForage per-page, so you could namespace things with:\n\njavascript\nvar oneLibrarysDB = new LocalForage({storeName: 'library_one'});\nvar anotherLibrarysDB = new LocalForage({storeName: 'library_two'});\nEach db would have its own namespace. I've just got to document this feature a bit better.\n. No ETA, would love contributions but if not I can try to get to it this week. It's an important feature.\n. The clear() method actually does the right thing in this regard, so I guess we should copy its looping-of-all-keys-and-checking-for-prefix code. Obviously MUCH slower, but then localStorage is our \"bad driver\" anyway...\n. That would be great! I\u2019m travelling in a few hours so I\u2019ll be mostly offline until tomorrow, but I should be able to review it fast.\n- tofumatt\nOn October 16, 2014 at 10:53:02, Olivier Combe (notifications@github.com) wrote:\nYes, it's also taken into account for the clear method.\nI could do a PR if you want.\n\u2014\nReply to this email directly or view it on GitHub.\n. Wow, that was fast! Thanks! I'll make a note to add tests for this in the future, but for now I'll merge it in.\n. Thanks for the head's up. No one's mentioned it yet, but I'll try to land a fix myself as I assume this will affect Cordova users?\n. You can always set the driver using the setDriver or config methods, but I don\u2019t think we\u2019ve done this automatically yet.\n. :+1: \n. It is very weird and lacks utility, but when localForage was originally implemented its aim was to be a localStorage-compatible API but with callbacks.\nI guess given the addition of node-style, error-first callbacks and promises, we've diverged from that a bit and I doubt many people are using the key() function. I'll open a separate issue for it :-)\n. Going to close this as we'll be removing key() in the future.\n. Whoa! This is awesome and unexpected ^_^ :+1: \nI'll look through now, but I like the idea.\n. Looking through the code, it looks like each instance of localForage has the defineDriver() method and can load a custom driver object. Does this allow all instances of localForage access to the custom driver, or only the instance that calls defineDriver()?\n. Awesome. Okay cool. I think there are a few nitpicks but I'll clean them up and merge this in. Awesome stuff!\n. Totally awesome; thanks so much :+1: \nI'm drafting up a release of 1.1 to add this in now :-)\n. I think I agree that a callback called more than once isn't idiomatic, and I think not even allowed for Promises, which localForage also implements. I like the iterator functionality a lot, and agree that a version without the recursive calls is a nicer API.\nI certainly do like the idea of an iterator method. This is very cool. :+1: \n. Also, I'll do my best to answer your questions about testing soon. This week I'm a bit distracted by other things from localForage, but I will get to it as soon as I can. Really sorry in advance if I'm not as attentive as I'd like!\n. Does the value, key argument order make sense? I feel like key might as well come first there.\nCould you add an API doc for this method in the site/index.md file? I would like to see uses of it outside the tests.\n. Sorry, I\u2019ve been a bit delayed on this but will look at it today.=\n. Looking through this looks great! There are a few documentation nits (tiny whitespace things that the linter doesn't check as it doesn't scan the API docs) but I like it!\nI'm gonna tweak a few tiny things then merge it in. Thanks! :+1: \n. Hey @ocombe, just pushed a new release (1.2.0), so you should be able to reference it as a dependency in angular-localForage :smile: \n. Hmm, @nolanlawson, might want to note this for pouch :-)\n. No worries, I\u2019m gonna look at this deeper this afternoon I think ^_^\n- tofumatt\nOn October 22, 2014 at 13:00:51, Nolan Lawson (notifications@github.com) wrote:\nOh wait, we just check the truthiness of IDBKeyRange, which is why this was working. Sorry for giving you a shoddy commit @tofumatt >_<\n\u2014\nReply to this email directly or view it on GitHub.\n. Published version 1.1.1.\n. Great catch. I'll try to take a look at this as soon as I can. Thanks :+1: \n. Looks like this is a test I should try to integrate in now that #322 is merged into master.\n. This failed again but on timeout, this may just be a \"travis sometimes is slow and gets bogged down\" thing? I'm gonna look into it more.\n. @peterbe pointed out that apparently there is a regression in IndexedDB performance in Firefox: https://bugzilla.mozilla.org/show_bug.cgi?id=1088043#c5\nCould that be related?\n. Closing this for now; the performance across different drivers is still something we should address, but I think this should be closed for now.\n. :+1: Gracias amigo!\n. I'm not quite sure I understand the steps to reproduce. What is webpack and which localforage file are you including? dist/localforage.js and dist/localforage.min.js both includes Promises.\n. localforage should work with browserify, but I remember us having to do some things to make it work alright. Are there any common gotchas for using libraries with web pack? It seems strange the min version wouldn\u2019t work but the regular one would, as they are both executing the same code.\n- tofumatt\nOn October 25, 2014 at 22:47:13, Eric Fong (notifications@github.com) wrote:\nwebpack is http://webpack.github.io/\nBasically, after\nbower install localforage --save\nUse webpack to pack my js and run in browser (chrome and android webview)\nif\nrequire('localforage')\nin one of my js file. webpack will complaint\nWARNING in ./bower_components/localforage/src/localforage.js\nCritical dependencies:\n331:20-335:22 the request of a dependency is an expression\n @ ./bower_components/localforage/src/localforage.js 331:20-335:22\nERROR in ./bower_components/promise/promise.js\nModule build failed: Error: ENOENT, open './bower_components/promise/promise.js'\n @ ./bower_components/localforage/src/localforage.js 6:18-36\nrequire('script!localforage/dist/localforage.min.js');\n=>\nUncaught ReferenceError: require is not defined  \nrequire('script!localforage/dist/localforage.js');\n=>\nWork!\n\u2014\nReply to this email directly or view it on GitHub.\n. #417 is merged so this is closed \ud83d\ude04 \n. This has been brought up in #21. I definitely want this in the future (see the milestone for 1.2 that actually references it).\nI've copied @thgreasi's code example to that issue; let's keep the discussion going over there to prevent duplicate issues. :smile: \n. You're right that this is not a feature in localForage.\nWe could also pass it in as another value, but I've never needed such functionality myself. What @thgreasi mentioned will work though is a bit slower, obviously. I would accept a PR that supplied the key as the second value to the callback/promise function.\n. Though for what you're trying to do, you might want to take a look at the new iterate functionality we landed in #283. It's only in master but will be released in a tag soon, I'd say :-)\n. While it would be nice to allow such a data structure to be stored... I don't actually think this is strictly \"data\". localForage is a data store and not an object store, strictly speaking. Saving JS references to other objects or bits of the object itself is very likely out of scope for localForage.\nLike you mentioned in an email to me... I don't see an easy way around this for serialized backends like localStorage's. I think this is a no-go for localForage.\n. Oh, right, thanks! Fixed by #294. \n. Thank you! :+1: \n. I think all the built-in drivers will exit (with a return) if they're unsupported, so requiring them before the instantiation of the first instance doesn't seem that bad... theoretically it's a bit wastefully to require each one, but in production that shouldn't actually be a wasteful HTTP call, just a few ms of time checking for support.\nI'd be okay with that if the trade-off was an easier code path that was shared between internal and external driver loading. But if the code path isn't that different, maybe it's not worth it?\n. I guess the question is: will doing this simplify the code enough to justify the work?\n. Very strange that this wouldn't occur on the CI tests. I'm gonna try it locally from a fresh checkout though, thanks.\n. I just tried this with no error. It installed component@1.0.0-rc7 for me. Is your version of npm or node out of date?\nbash\n~% npm -v\n1.4.10\n~% node -v\nv0.10.28\n. I've thought about this more and it's out of scope for localForage to include in its base functionality, but thanks to our custom driver API you could release it as its own module and get users to extend localForage with it.\nSorry for the hassle of you going through a pull request for it, but I think you should release this as your own library and add it to the Wiki. I've created a page for custom drivers and will link to it from the README (#325)\n. Wow! My different was .152s to 2.359s. That is impressive! I would very much welcome such a feature; what are any downsides to its usage?\n. And running writes during page close is already a potential problem, albeit more of one with a queue I suppose. Do you have many users reporting bugs related to the queue?\nPersonally the tradeoff seems fine to me. That\u2019s a big speed increase.\n. Currently #145 is still an open issue re: private mode browsing; I think right now there could still be bugs. I'm actually not sure as it hasn't been a priority for me.\nCan anyone test to confirm? Running the tests in private mode could help. I can try later this week if no one else can.\n. Private browsing won't work; closing.\n. I believe it\u2019s still a bug with many browsers when using Private Browsing\nmode\u2014storage won\u2019t work as expected.\n. Good call. We should add tests for this as well. Thanks for the report. :smile: \n. Oh, good catch! I forgot to update these! \n. I think yes. I'll say it's related to #432 so I'm reminded to check after we merge it in.\n- tofumatt\nOn Mon, Aug 31, 2015 at 7:39 AM, Thodoris Greasidis\nnotifications@github.com wrote:\n\nThis might be obsolete, since in v1.3 (source found in master) we will not be requiring the promise polyfill manually (since it's an anti-pattern for many) but instead bundle it first and expect to be available.\nReply to this email directly or view it on GitHub:\nhttps://github.com/mozilla/localForage/pull/306#issuecomment-136271333\n. Closed in 690c73df5e2263b171a23e440d285a642cdc6af4. :smile: \n. It could be a holder-over from when the code inside the ready() method didn't return a Promise. My suggestion would be to try it on a branch and see if the tests still all pass; if so I'd be happy to take a simplified version of any method :smile: \n. Sorry for my lateness getting this merged in! Thanks a lot :+1: \n. Good catch. \u00a1Gracias! :+1: \n. I suspect :cat2: + keyboard :laughing: \n. Firefox 9 is from December 20, 2011 :smile: \n\nI think what I should really do is update the list of supported browsers to what I'm willing to support and fix bugs for. These technologies shipped in older browser versions, but I'm not really looking to support Firefox 9 :-)\n. ## Fair enough! I'd prefer not to do browser sniffing, but if you could send a PR that extends our test in src/localForage.js that checks for indexeddb support I'd gladly merge it in. \ntofumatt (Sent from mobile)\nOn 30 November 2014 14:58:22 GMT-06:00, Edward notifications@github.com wrote:\n\nThanks for clarification. I would completely agree with you if that was\na big deal to fix it. But it is not. All you need is to simply fallback\nto localstorage for all FFs that support it, i.e. for FF3.5+. Without\nthis it turns out that FF 3.5 is supported (via localstorage) but FF9\nis not. Is not this strange?\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/mozilla/localForage/issues/311#issuecomment-64999991\n. ## That works for me.\n\ntofumatt (Sent from mobile)\nOn 30 November 2014 17:15:55 GMT-06:00, Edward notifications@github.com wrote:\n\nOK, no sniffing, so may be just to rip out that erroneous\n'mozIndexedDB'? According to caniuse FF3.5+ will be then supported:\n- FF3.5 till FF15 via localstorage\n- FF16+ via indexedDB\nHow do you think?\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/mozilla/localForage/issues/311#issuecomment-65005147\n. Oh, it certainly should! What browser/driver are you using? I\u2019ll explore this; maybe we need more tests!\n. Oh hey, no problem! Could better docs or something helped? Let me know if anything was unclear! :-)\n. Ah, gotcha. Glad you found the bug though! Thanks for the followup :-)\n. ## Sadly, if someone manages to XSS your app there isn't anything localForage can do to prevent someone from using it to interact with your data. I think the question is out of scope for localForage, you'll just need to prevent XSS. \n\ntofumatt (Sent from mobile)\nOn 4 December 2014 08:46:02 GMT-08:00, Alberto Cole notifications@github.com wrote:\n\nHello, \nI'm working with localforage in a AngularJS Application, could you give\nme some advices in order to avoid someone trying to access my\nIndexedDB/WebSQL/localStorage trhu XSS attacks?\nRegards :+1: \n\nReply to this email directly or view it on GitHub:\nhttps://github.com/mozilla/localForage/issues/314\n. If you'd like though, I can find some good articles on XSS and send them to you. Anything in particular you're worried about or looking to learn more about? \n. I would love a setItems feature, even just as a nice API addition, but the bulk add for speed is great too.\n\nI think I'm happy with the API you're proposing, I like the idea that you can use it like the iterate functionality, though I assume it would return a Promise when everything is set as well.\n. Please note that, for now, there is a setItems plugin: https://github.com/localForage/localForage-setItems https://github.com/localForage/localForage-setItems that should help :-). I think adding those methods to v2 is a great idea. \n\nMatt (Sent from mobile)\n\n\nOn 17 Nov 2018, at 08:26, Thodoris Greasidis notifications@github.com wrote:\n@kaeverens to which sqlite plugin are you referring to? Is that https://github.com/thgreasi/localForage-cordovaSQLiteDriver ?\nIf so, there is a sample ionic 2 app that also demonstrates using the setItems and the rest plural plugins.\nSee: https://github.com/thgreasi/localForage-cordovaSQLiteDriver-TestIonic2App/blob/master/src/app/localforagePluralOperationsDemo.ts\n@tofumatt how would you feel about adding the plural methods to lf v2?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Docs on testing and such have been added and I think are good now.\n. I'm currently looking this one over off-and-on, but it's a big PR and might take me a bit of time.\n. Sorry for the late response on this. Aiming to look at it tonight or tomorrow.\n. So far this looks really good.\n\nHonestly, I like this transparent queuing without changing the API, so I'd say yes you're on the right track, and I prefer this approach over #318 which seems to require using the bulk save calls to get the performance of batch writes. This branch would solve all the same problems that #318 aims to solve, right?\n. This is looking really good. I like the minimal amount of code changing and the tests. :+1: \n. What are the memory/perf implications? The speed of the writes appeals to me here\u2026 would it make sense to offer batchWriting as a config option? Maybe even on by default?\n. I\u2019ll have to check on this, I need to figure out why Sauce Labs isn\u2019t working. I can test it locally soon though, but I\u2019m probably going to be offline until tomorrow.\n. I've been moving countries and really backed up but I'll make an effort to\nlook at it today or tomorrow. Promise!\n-tofumatt\nOn 4 Mar 2015 10:28, \"Floyd Einhorn\" notifications@github.com wrote:\n\nI'm really waiting for this to get merged. I ran into massive performance\nproblems due to this and I would love to get the batch feature merged. Is\nthere any progress to report?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/mozilla/localForage/pull/320#issuecomment-77131384.\n. Right now, looks like these tests are failing in Firefox (I tried on Firefox Beta for Mac). I need to fix up the sauce labs tests but I haven't been able to yet. You can see the tests locally by running:\n\nbash\ngrunt serve\nopen http://localhost:9999/test/test.main.html\n. Any news on this? If there's something you're specifically stuck or blocked on I should be able to help, finally found an apartment after moving so I'm less busy now :wink: \n. Sweet, thanks! :)\n. Which tests were failing in master? I notitced some were failing in asyncStorage, but I fixed them in #175. You might want to rebase on top of the new master branch.\n. Now that everything is passing I'll take a look and see if we need anymore\ntests, but the suite is pretty big already, so if batch writes are still\npassing everything that's a great start. I'm getting on a flight but will\nlook at this more tomorrow.\n-tofumatt\nOn 14 Mar 2015 17:23, \"Michiel de Jong\" notifications@github.com wrote:\n\nRebase fixed those other four indeed, thanks.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/mozilla/localForage/pull/320#issuecomment-80611554.\n. I've looked through and I think this is all good. I'm gonna merge this in unless other folks have any thoughts. :smile: \n. Actually, just ran through all the tests manually in Firefox and Chrome, looks like the component tests are failing localhost:9999/test/test.component.html.\n\nNot sure why this would be as the require ones work fine. It's specifically Task Batching tests that are failing, and not even all of them.\n. Especially strange: localhost:9999/test/test.component.html?grep=Task%20Batching shows them passing, localhost:9999/test/test.component.html does not.\n. I tried adjusting the time and giving it plenty of time to run and it still fails, but only with component. Very strange.\nI'm looking into it a bit more, though if it's working with require and the regular JS file I'm tempted to say nevermind component unless a component user can tell me what to fix.\n. There is, but I have been woefully distracted. It\u2019s my highest priority for the project though; looking to make some time later in the week.\n. I do plan to merge it but I need to spend some time tweaking it. If someone had the time to work on it I could tell them what needs to be done though.\n- tofumatt (Sent from mobile)\n\nOn 24 Sep 2015, at 16:36, Thomas Conner notifications@github.com wrote:\nWill this still be merged?\n\u2014\nReply to this email directly or view it on GitHub.\n. To start: conflicts need to be resolved. This patch is quite old and pre-dates our move to ES6 in our source files (#390).\n\nThat's the big one; let me look through other issues and report back in about thirty minutes :smile: \n. From the looks of it that's the only issue with the code, though we'll want to manually test these in browsers to make sure it works in all browsers localForage supports (sadly, we don't yet have sauce labs testing working to automate these tests, but I'd like that too).\nIf you resolve the conflicts and get it to where it could merge with master and pass at least the automated phantomjs tests that would be a huge help though. If you'd be willing to take that task on and push here once the tests pass/the code merges cleanly I can look again and see if there are browser-specific issues.\n. That would be SO amazing, thank you a million. You are awesome, I owe you a coffee/beer/whatever :-)\n. ## Yeah, I think there is an intermittently failing test on travis, possibly due to it having too short of a timeout? I'm trying to figure it out :-/\ntofumatt (Sent from mobile)\nOn 10 December 2014 13:04:52 GMT-05:00, Thodoris Greasidis notifications@github.com wrote:\n\nAs you can see my master branch is in sync with localForage, yet the\ntravis build\nfalls.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/mozilla/localForage/issues/321\n. I get that issue as well; it's really weird. Only happens on Travis too...\n. Okay, this looks good. See my question about a new issue, but this is good.\n\nSo sorry for the delays; been doing other stuff this week and I'm behind on localForage :disappointed: \n. No worries; anything in documentation lacking that I should fix for other new users?\n. Oh, hmm, this could be a problem with the build step, I thought the regular dist file should have the polyfill in it.\nI\u2019ll check this out further now.\n. Further investigation shows the master branch had a version without the promises polyfill in it. Will push a fix ASAP.\n. Wow! This project looks really cool and I hadn\u2019t heard about it! So first thing\u2019s first: thanks for letting me know about it :smile:\nTo start with: what kind of data are you trying to store? This looks like it could be a non-serialised Object with references you\u2019re storing (rather than, say, just a simple Object, Array, or String). While localForage supports lots of data types (http://mozilla.github.io/localForage/#setitem) you have to be careful with what kinds of things you store in IndexedDB as it stores the objects directly without serialisation, so you can put in objects that other drivers will dutifully serialise \u201cwithout error\u201d (though erase data in the process).\nLet me know if I\u2019m making any sense or you can provide more insight into the code you\u2019re running. It would be great to see what the object you\u2019re storing looks like in a JSFiddle or something.\n. Haha, thanks for the update; glad you found and fixed the issue :smile:\nAnd cheers for the info on JS-Data and for using localForage and filing issues :+1:\n. Cool, I\u2019d be curious to know if it\u2019s an issue with localForage or the adapter for JS-Data, but please keep us posted! :-)\n. Unfortunately the iOS8/Yosemite versions of Safari DO support IndexedDB but have issues that means we can\u2019t yet use them in localForage. (#254)\n. To me, I would also expect it to be 1-based and not 0-based--I agree, it's counting number of iterations and is not the array key index.\nI think this looks good, thoughts anyone else? Especially about the indexing of the number?\n. :+1: btw, nice stuff :smile: \n. Whoa, sweet! :+1:\nTook a quick look and it seems awesome. I'll look over once more but I think this is good to merge. I'll get this in before I check on the batching PRs.\n. So awesome, thanks so much for this one! :+1:\n. Fixer in #331.\n. I'm actually looking to switch to a node-based tool to build the docs as it's annoying to ask contributors to get Ruby up and running just to check the docs. I'll see if I can do that soon :smile:\nThanks for the pull request! \n. This might be the type of thing better posted on the wiki, as this isn't really an issue with localForage or a feature request. Sorry there isn't a better place for it.\nFeel free to add your library to the wiki though! Thanks for using localForage :smile: \n. Sure thing, should be ready in about 15 minutes.\n. 29f373e4fb8fa854a984b4e2e755212206beac0a, 1.2.1 release and pushed to npm\n. Indeed, this is still on my radar but I'm currently moving countries and really swamped. If anyone else could check it out that would be excellent, if not I'll try to get to it ASAP.\n. That\u2019s strange, as the spec should be pretty well-implemented. I\u2019ll file a bug and see what comes of it.\n. Oddly, I see \"No available storage method found.\" when running:\njavascript\nlocalforage.getItem(\"foo\", function success(error, key){\n  console.log(\"get\");\n  console.log(error);\n  console.log(key);\n})\nin Developer Edition on Mac (38.02a). Still investigating, just wanted to log that here for posterity.\n. Thanks, that'd be great. Feel free to cc me on the bug and link to it here.\nI'm :tofumatt on Bugzilla too :-)\n-tofumatt\nOn 13 Mar 2015 14:02, \"Stephen Cunliffe\" notifications@github.com wrote:\n\nLooking at the error I see in Firefox 36.0.1 there's 2 keys in the error\nobject, name=Unknown Error and message=\"The operation failed for reasons\nunrelated to the database itself and not covered by any other error code\"\nThe same error code occurred years ago in this bugzilla report:\nhttps://bugzilla.mozilla.org/show_bug.cgi?id=643318 whereby Firefox\nwouldn't let the IndexedDB be created on the localhost.\nThis seems highly suspicious since that is exactly the same place I am\ncurrently trying to set it (as I would expect any developer to while\ndeveloping).\nFinally this great site: http://demo.agektmr.com/storage/ that lets you\ntest the maximum limits of various local storage options shows Firefox as\n\"not supporting\" IndexedDB even though it should be supported:\nhttp://caniuse.com/#search=IndexedDB in Firefox 35+\nThus it looks like an underlying Firefox issue - but I can't seem to find\na current bugzilla report for it. I'm going to see if I can create a simple\ntest case that fails and if so file a bug with bugzilla.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/mozilla/localForage/issues/335#issuecomment-78984466.\n. Seems like this is a private browsing mode bug; closing.\n. I don\u2019t see an \u201cisSupported\u201d method being useful, especially as nearly any environment supports localStorage these days.\n\nBut checking the return value of localForage.driver() (which will return null if no driver is being used, which generally should only happen if you can\u2019t use any drivers in the environment).\nAre you having troubles with really old browsers breaking when you use localForage in an app?\n. Yeah, if none of these things even work then you're using a browser/environment that we just can't support, sorry :-/\n. Does Safari on iOS 7 support ES6 Promises natively? If not I would expect\nerrors.\n-tofumatt\nOn 12 Jan 2015 08:20, \"Ismael Gonz\u00e1lez\" notifications@github.com wrote:\n\nI got some errors running the \u00b4nopromises\u00b4 build in iOS7.\nWith the normal build it works perfectly.\n[Error] TypeError: 'undefined' is not a constructor (evaluating 'new e')\nsetDriver\n[Error] TypeError: 'undefined' is not an object (evaluating\n'localforage.getItem')\nJust to let you know because i don't believe this is a critical issue :D\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/mozilla/localForage/issues/337.\n. Hmm, I think you're right that this would be fine as length > 0. But this\nis not a localForage bug directly. Can you file upstream and mention this\nissue in the bug? I'll leave this open for now so people at least know\nabout the case.\n\n-tofumatt\nOn 13 Jan 2015 18:38, \"Zach Dennis\" notifications@github.com wrote:\n\nThere's a conditional in the distribution build (part of the\n\"promises/asap\" section) that may be a bug.\nhttps://github.com/mozilla/localForage/blob/29f373e4fb8fa854a984b4e2e755212206beac0a/dist/localforage.js#L212-L219\nIt's the conditional part that worries me:\nif (length === 1) {\n    // If length is 1, that means that we need to schedule an async flush.\n    // If additional callbacks are queued before the queue is flushed, they\n    // will be processed by this flush that we are scheduling.\n    scheduleFlush();\nI've been unable to track down where the comment or the code originate. It\nseems intentional, but I can't wrap my head around why it would be checking length\n=== 1.\nWe have a Phonegap/Cordova app that uses localForage and all is fine until\nwe use the FacebookConnectPlugin to authenticate.\nThe first time upon authenticating, when the iOS app gets re-launched (on\niOS 7.x), several items are in the queue (which were waiting to be\nprocessed until after FB authentication occurs). Because of this, the length\n=== 1 check fails, and none of the promises get resolved. However, if we\nremove the conditional then everything works perfectly.\nI'm not sure if this is indeed a bug although it feels like we've hit a\ncorner case that is exposing one. Should the conditional should simply be if(length\n\n0)?\n\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/mozilla/localForage/issues/338.\n. Off the top of my head I thought the promises polyfill used RSVP.js, but I honestly forget.\n\nIf that\u2019s not it I\u2019ll have to dig some more later :-)\n. I'll close this for now, but I'd love to know what the solution to your issue was and what we can do to prevent other users running into it.\nIf you're still having problems feel free to file more issues or re-open this as appropriate.\n. I think a lot of these things are a bit fragile, but frankly this looks fine to me. Still passes all the tests so until anyone else proposes anything fancier this is :+1: \n(Getting JS libs to play well with the countless module system confounds me as I don't have enough experience outside a few.)\n. Thanks, PS!\n. I'll actually publish a bugfix version for this, in case you're pulling this in via bower or npm.\n. Tag pushed: https://github.com/mozilla/localForage/releases/tag/1.2.2\n. Thanks for the head\u2019s up! Frustrating that we have to keep dropping this number; I\u2019ll find the exact point and try for a patch.\n. I\u2019ve never looked into a way to query it, but the oft-referred-to max is 5MB. But actually setting the number to that number of bytes brings up the prompt, so at this point I just keep manually testing until there\u2019s no prompt.\nIt is awful to test, agreed.\n. That is definitely unexpected, but localForage has tests to ensure it\nreturns null. What browser are you using?\nOff the top of my head I'd say it's the wrapper just because we test for\nthis.\n-tofumatt\nOn 6 Feb 2015 19:35, \"Eric Eslinger\" notifications@github.com wrote:\n\nThe localForage documentation indicates that something like:\nlocalForage.getItem('foo').then(function(data) {\n  console.log(data);\n});\nshould show data as null, if there's no key named 'foo' in the\nlocalForage storage systems. I'm getting undefined instead of null. I\ndon't particularly mind one way or the other, but I do like to know what to\nexpect.\nI should note that this may be an angular-localForage thing, as I'm\nactually using that wrapper.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/mozilla/localForage/issues/343.\n. I don't really know much at all about webpack, any ideas @k88hudson?\n\n-tofumatt\nOn 9 Feb 2015 04:49, \"Illia Segeda\" notifications@github.com wrote:\n\nHello. It seems that this PR don't fix problem of using localForage with\nwebpack. I've created gist to illustrate problem\nhttps://gist.github.com/ALF-er/83325c24019de4edc851 (just place file\nindex.html in ./src/ dir and main.js in ./src/js/ dir).\nIf I run \"npm run dev\" (it just copy index.html in ./dist/ dir, compile\nmain.js with webpack and then run webpack-dev-server for ./dist/) I get:\nWARNING in ./~/localforage/src/localforage.js\nCritical dependencies:\n332:20-336:22 the request of a dependency is an expression\n @ ./~/localforage/src/localforage.js 332:20-336:22\nERROR in ./~/localforage/src/drivers/localstorage.js\nModule not found: Error: Cannot resolve module 'localforageSerializer' in C:\\dev\\projects\\wp_lf_test\\node_modules\\localforage\\src\\drivers\n @ ./~/localforage/src/drivers/localstorage.js 70:16-59\nERROR in ./~/localforage/src/drivers/websql.js\nModule not found: Error: Cannot resolve module 'localforageSerializer' in C:\\dev\\projects\\wp_lf_test\\node_modules\\localforage\\src\\drivers\n @ ./~/localforage/src/drivers/websql.js 63:16-59\nIf in main.js uncomment second line (and comment first ofc) then it builds\nw/o errors but in browser console I get localForage.getItem - undefined\nfunction...\nMaybe you can suggest something?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/mozilla/localForage/issues/344.\n. Can you try with the latest master instead? 1.2.7 wouldn\u2019t have this fix.\n- tofumatt\n\nOn Mon, Aug 10, 2015 at 1:15 PM, Illia Segeda notifications@github.com\nwrote:\n\nwebpack 1.11.0, localforage 1.2.7\nStill get\nWARNING in ./~/localforage/src/localforage.js\nCritical dependencies:\n334:24-54 the request of a dependency is an expression\n @ ./~/localforage/src/localforage.js 334:24-54\nERROR in ./~/localforage/src/drivers/localstorage.js\nModule not found: Error: Cannot resolve module 'localforageSerializer' in C:\\dev\\projects\\trill\\node_modules\\localforage\\src\\drivers\n @ ./~/localforage/src/drivers/localstorage.js 70:16-59\nERROR in ./~/localforage/src/drivers/websql.js\nModule not found: Error: Cannot resolve module 'localforageSerializer' in C:\\dev\\projects\\trill\\node_modules\\localforage\\src\\drivers\n @ ./~/localforage/src/drivers/websql.js 63:16-59\nfor me =(\nReply to this email directly or view it on GitHub:\nhttps://github.com/mozilla/localForage/issues/344#issuecomment-129424792\n. Oops, haha! \ud83d\ude02\n- tofumatt\n\nOn Mon, Aug 10, 2015 at 8:04 PM, Thodoris Greasidis\nnotifications@github.com wrote:\n\n@ALF-er OOOOoooops!, my bad.\nThe actual webpack changes are in a commit that I didn't push.\nNow that the PR is merged, I will do a rebase as soon as I'm home. Sorry for the inconvenience/false positive.\nReply to this email directly or view it on GitHub:\nhttps://github.com/mozilla/localForage/issues/344#issuecomment-129567955\n. Looks like this should now be fixed in 1.2.10. #439 fixed it up, if there's an issue let me know (be sure to following the README's guide to using it in 1.2.10: https://github.com/mozilla/localForage/tree/1.2.10#browserify-and-webpack\n. Yeah, if someone can commit something that makes it work in node with little effort I guess that's fine, but right now I don't even see the use-case in node; all of the default drivers are browser-specific and localForage is aimed at browsers :smile: \n. Good catch, thanks! :+1: \n. Thanks a lot! :smile: \n. Sorry, WebSQL support is integral to localForage and dropping it would mean even current Safari versions wouldn't pass the tests without falling back to localStorage. We'll be keeping WebSQL support around for a while.\n. Excellent, thanks!\n. The reason for this is because of how localStorage, the API localForage is based on, works. It returns undefined--not an error--for a key that doesn't exist. And when trying to create an API that uses localStorage/WebSQL/IndexedDB across all platforms, it was hard to reliably determine if a value was saved as null (or even undefined, which is a valid value to save) or if the storage API was just returning it because nothing was found.\n\nChecking if a key exists is currently not 100% accurate with localForage. Resolving undefined keys is as-expected and as @thgreasi mentioned, we have a test case to ensure this behaviour. It might make less sense, but it's the only way to be consistent.\n. We use IndexedDB in IE 10, I think. This could be a bug, I would think IE 11 should use IndexedDB. We might have to check what our checks for IndexedDB are.\n. Ah, no worries. Yeah, private mode in a lot of browsers really messes with localForage.\nI\u2019m thinking it might be a good idea to write up a wiki article detailing the issues with private browsing mode in various browsers.\n. This is good but I think it would be even better to try to cast the string to a number first. So things like '2.0' become 2.0. Otherwise I think we're effectively breaking the API (even if using it wrongly resulted in a different error).\nDo you think we could try casting a string value first?\n. Hmmm, I guess I'd rather the check be smart and only allow version strings that all drivers could use and didn't fail on.\nIf that requires a breaking change or even a version release with a deprecation then another with the breaking change I'm cool with that.\n. Sorry, but localForage should always return the same object back across drivers. Can you should me a test case/code example where you get different results in WebSQL versus IndexedDB? Especially with basic types like String and Number, the return values should always be the same across drivers/browsers.\n. Strange, we use JSON.parse internally but I think there could have been some errors with it early on.\nDid upgrading to a newer version fix your issue?\n-tofumatt\nOn 19 March 2015 at 10:42:31, Adam Brewer (notifications@github.com) wrote:\nThank's for replying @tofumatt. I realise now the version this was build with was version 1 \u2013\u00a0this probably had something to do with it.\nI spent most of yesterday pushing out a quick patch, so it's not so easy to provide some screenshots at the moment, but the code blow is pretty much what was used (excuse the nesting):\nvar testData = [\n    {\n        test: true,\n        someValue: 'string'\n    }\n];\nlocalforage.setItem('testKey', JSON.stringify(testData), function () {\n```\nlocalforage.getItem('testKey', function (data) {\n// fails when using WebSQL as 'data' is an object\n// and jQuery.parseJSON throws and error if 'data'\n// is not a string\nvar dataParsedError = $.parseJSON(data);\n\n// Works fine as this method returns the original object\n// if passed something other that a string.\nvar dataParsedSuccess = JSON.parse(data);\n\n});\n```\n});\n\u2014\nReply to this email directly or view it on GitHub.\n. I don\u2019t think it\u2019s an issue, and the new version actually still supports anonymous functions, so you should be able to upgrade without issues.\nSure, let\u2019s close this unless you can reproduce it. Feel free to open it if you\u2019re having the same issue with a newer version!\n-tofumatt\nOn 20 March 2015 at 16:07:08, Adam Brewer (notifications@github.com) wrote:\nA lot of the code that was written is using anonymous functions, not promises, so I'm waiting for a quiet period to try the upgrade. Without modifying the code an upgrade currently breaks the app.\nI'm thinking this would be an obvious issue if the problem persisted to the current version. Given that the error happened with an older version do you think this isn't an issue anymore? Happy to close it if you agree.\n\u2014\nReply to this email directly or view it on GitHub.\n. Yeah, this should definitely be happening automatically, I\u2019ll try to look into this although I don\u2019t have any Samsung devices myself.\nThanks!\n. I still haven't had the chance to test further as I don't have any Samsung devices and have been looking at other issues, but we have recently landed some Android fixes. It's worth testing again on one device and reporting back.\n. Again, I'm not 100% sure. We did land fixes that I would think cleared it up, but haven't had anyone confirm. \n. Okay then, closed for now, but feel free to reopen if we closed this too quick! :smile: \n. Right now it doesn\u2019t prompt for more space, for now I\u2019d just recommend asking for a higher amount to begin with, but if it could be done I\u2019d happy have it auto-prompt for more space!\nLooks like we need to catch more errors, if you could submit a pull request that would be great, but otherwise we can get to it later.\n-tofumatt\nOn 23 March 2015 at 15:48:13, Mike (notifications@github.com) wrote:\nTested on latest chrome web view on Android:\nI am failing because of a quota exceeded error (rightfully so) but an error never gets returned. It looks like this code in setItem is being executed:\ntransaction.onabort = transaction.onerror = function() {\n    reject(req.error);\n};\nbut req.error is null. If that is null we should also check the transaction error. the function should actually be this:\ntransaction.onabort = transaction.onerror = function() {\n     var err = req.error ? req.error : req.transaction.error;\n     reject(err);\n};\nAlso is localforage responsible for asking for more space on a quota exceeded error? Currently this is not happening.\nThanks\n\u2014\nReply to this email directly or view it on GitHub.\n. If it can be done in localForage I think that would be cool!\n. Unlimited IndexedDB still throws a prompt if you want to use a lot of storage though, right?\nOr if you want to increase storage? I\u2019m wondering if we could test for that.\n. I\u2019ve actually been talking to @dougt about this and I\u2019m looking at fixing it soon. :-)\n. Duplicate of #350.\n. To my knowledge, no. Private browsing mode in several browsers make offline storage a lot buggier. You can file bugs with the right browsers, and I'll gladly add my support to them as important bugs to fix.\nSorry :-(\n- tofumatt\nOn Fri, Aug 7, 2015 at 8:32 AM, Vitaly Volkov notifications@github.com\nwrote:\n\nIs there any workaround for this?\nReply to this email directly or view it on GitHub:\nhttps://github.com/mozilla/localForage/issues/363#issuecomment-128622482\n. Interesting. What kind of results do you get doing something similar with Safari? I think it has similar errors with WebSQL and Private browsing mode.\n- tofumatt\n\nOn Fri, Aug 7, 2015 at 11:24 AM, Vitaly Volkov notifications@github.com\nwrote:\n\nWell, we've created a fix this way:\nvar localForageDriver = [localforage.INDEXEDDB, localforage.LOCALSTORAGE, localforage.WEBSQL];\nvar localForageBackupDriver = [localforage.LOCALSTORAGE, localforage.WEBSQL, localforage.INDEXEDDB];\nwindow.localForageReady = $.Deferred();\nvar configureLocalForage = function (localForageDriver) {\n  var localForageOpts = {\n      driver: localForageDriver,\n  };\n  localforage.config(localForageOpts);\n  window.localForageReady.resolve();\n};\ntry {\n  var idbConn = window.indexedDB.open(\"checkIndexedDB\");\n  idbConn.onerror = function (ex) {\n      // We know for sure, that FF in private browsing mode restrict use of indexedDB. And indexedDB.open fails with InvalidStateError\n      console.error(\"IndexedDB is NOT available\");\n      configureLocalForage(localForageBackupDriver);\n  };\n  idbConn.onsuccess = function (ex) {\n      console.info(\"IndexedDB is available\");\n      configureLocalForage(localForageDriver);\n  };\n} catch (ex) {\n  console.error(\"IndexedDB is NOT available, \" + ex);\n  configureLocalForage(localForageBackupDriver);\n}\nReply to this email directly or view it on GitHub:\nhttps://github.com/mozilla/localForage/issues/363#issuecomment-128667598\n. \ud83d\udc4d That\u2019s what I was thinking too.\n- tofumatt\n\nOn Fri, Aug 7, 2015 at 12:56 PM, Thodoris Greasidis\nnotifications@github.com wrote:\n\nThere is a chance that this could be handled inside setDriver() method.\nWe know only check for browser support using some blocking tests and then try to setup the first supported driver, in priority order.\nWe could just try the next one each time setDriver fails until there is no driver left.\nReply to this email directly or view it on GitHub:\nhttps://github.com/mozilla/localForage/issues/363#issuecomment-128682571\n. That is nice! Are there transpilers that support that now?\n- tofumatt\n\nOn Fri, Aug 7, 2015 at 7:39 PM, Thodoris Greasidis\nnotifications@github.com wrote:\n\nIf we wait for ES7 we might be able to do something like:\njs\nasync function setDriver(driverNames) {\n  for (var driverName of driverNames) {\n    if (this.support(driverName) {\n      try {\n        let driver = await this.getDriver(driverName);\n        if (driver) {\n          return Promise.resolve(driver);\n        }\n      } catch (e) { }\n    }\n  }\n  return Promise.reject('No supported driver found!');\n}\n:sparkles: :sparkles: :sparkles:\nReply to this email directly or view it on GitHub:\nhttps://github.com/mozilla/localForage/issues/363#issuecomment-128791368\n. Looks like #448 should fix this one, but if not please let us know and reopen the issue.\n. Is this Chrome stable? Which operating system and version of Chrome are you using? It should be working okay.\n- tofumatt (Sent from mobile)\n\nOn 25 March 2015 14:06:33 CET, Das Einhorn notifications@github.com wrote:Since updating to the latest version of the chrome browser, I get errors in my log like this:  TypeError: Failed to execute 'transaction' on 'Database': The callback provided as parameter 1 is not a function.   It is thrown at this line (localforage.js:1249):  var store = dbInfo.db.transaction(dbInfo.storeName, 'readonly') .objectStore(dbInfo.storeName);   Is there anything I can do about that?  Thanks, daseinhorn  \u2014Reply to this email directly or view it on GitHub.             \n. It is troubling that WebSQL doesn\u2019t work, though the default driver for Chrome should be IndexedDB. Still worth looking at this, but thanks for the update; less dire than I first thought. :-)\n. Yeah. Worse, we\u2019ve seen similar things in the newest version of Firefox. :-(\n. I don't actually see a related pull request. If you could submit the code/PR that'd be great; I can take a look soon :smile: \n. Oops, sorry, I\u2019m dumb. Looking now!\n-tofumatt\nOn 13 May 2015 at 17:07:59, Mike (notifications@github.com) wrote:\nI's here:\n366\n\u2014\nReply to this email directly or view it on GitHub.\n. Fixed in #378.\n. Looks like you've got a style error: https://travis-ci.org/mozilla/localForage/builds/55992720\nTry running npm test to run the entire test suite, then push a fix?\n. Updated in #378.\n. Looks great! Not sure why Travis is complaining but I'll fix that then merge this in. Thanks  :+1:\n. Yeah, I think it\u2019s an issue with Travis or the config in it. It\u2019s happened on other Pull Requests too but not locally. I\u2019ll look into it :)\n. name should be considered the database -- in WebSQL it's the DB name and in IndexedDB it's the entire database identifier\nstoreName is a \"table\" or \"individual store\" name -- an entire app might go inside one name but with different model's data in each storeName eg like a MySQL Database with multiple tables.\nBoth options are available in the API in case you wanted to store everything in one DB with isolation via table/stores (this is when you would use storeName) or have multiple DBs via name to entirely encapsulate things (eg you had a library that stored data and used its own DB).\nDoes that make sense?\n(In general, I'd say different stores in the same app might want to use the same name and different storeNames. I'm not sure what the performance implications of one over the other is though.)\n. Damn, that's not good.\nAlso, I know that newer versions have had issues with createInstance, see: #342.\n. Sorry, but localForage relies heavily on promises and won't ship with a callback-only API. If anything I would want to move toward a Promises-only API ;-)\n(I don't think there are any versions of any browsers that localForage supports that don't work with at least the polyfill anyway.)\n. Yes, that would be useful. Filed #369.\n. > Which version has promise-free api?\nThere is no version of localForage that does not support Promises, but you can still use callbacks.. I think in the future (2.0?) we should just scrap that version entirely. I don\u2019t think the polyfill is that big of a size hit (14kB) and minified it\u2019s only 5kB. Processing-wise it should be skipped if Promises are available, and it seems to only confuse people.\n- tofumatt\nOn Tue, Aug 11, 2015 at 4:06 PM, Mohit Jain notifications@github.com\nwrote:\n\n+second that. Just wasted an hour trying to debug this. added minified no promises version to the build script.\nReply to this email directly or view it on GitHub:\nhttps://github.com/mozilla/localForage/issues/369#issuecomment-129921449\n. I don't think it's the only issue with web worker support, but without it fixed it was totally blocked. I know @dougt had a patch for this but I'm still finding time for it.\n\nSee #362.\n. I don't think this is true. We have web worker tests that are marked as \"skip\" right now, and running them from Firefox 37 outputs:\nReferenceError: window is not defined (http://localhost:9999/dist/localforage.js:919)\nprocess.on/global.onerror@http://localhost:9999/bower_components/mocha/mocha.js:5736:10\nI believe this is a straightforward fix, but we can't claim to work with web workers yet :cry: \n. Additionally, these tests fail from Chrome for IndexedDB and WebSQL.\n. Yeah, sadly we use window in some places we shouldn\u2019t. But I think it\u2019s an easy bug to fix\u2026 worker support with a caveat is better than none at all, so I\u2019ll leave this open and merge it in once everything is fixed.\n. Related to #350.\n. We fixed this elsewhere, so closing this, but thanks for your contributions!\n. It shows some custom info on\u00a0https://mozilla.github.io/webdev/\n. Oh, much nicer! :+1: \n. Any news on a patch to this or should someone else (me? :wink:) take a look at fixing it?\n. I think it only fails on Chrome, which right now Travis doesn\u2019t test. It should fail if you open the test page in Chrome though.\nThis really just reminds me I need to get sauce labs working with local forage.\n- tofumatt\nOn Mon, Jun 1, 2015 at 6:47 PM, Thodoris Greasidis\nnotifications@github.com wrote:\n\nI might be missing something but, shouldn't this test actually fail?\nReply to this email directly or view it on GitHub:\nhttps://github.com/mozilla/localForage/pull/374#issuecomment-107652342\n. Sorry, I haven't been able to look at this. I'm pretty busy this week with some other Mozilla work but I can review any pull request that fixes this ASAP. Writing the tests might take me a bit more time.\n- tofumatt\n\nOn Wed, Sep 9, 2015 at 11:43 AM, zcsongor notifications@github.com\nwrote:\n\nAny news?\nReply to this email directly or view it on GitHub:\nhttps://github.com/mozilla/localForage/pull/374#issuecomment-138869571\n. I just ran this on the iOS Simulator running 8.3 and didn't get an error using the test repo.\n\nCan you confirm it still happens? Do I need to be running it on a device rather than on the simulator?\n. Ah, no worries. Yeah, private browsing really messes with the storage libraries. If we could detect that and display a console.error message about it that might be great ^_^\n- tofumatt\nOn Wed, Jun 3, 2015 at 6:05 PM, Joseph Clay notifications@github.com\nwrote:\n\nSorry @tofumatt , looks like this problem is a private browsing issue. I'll delete my test repo.\nReply to this email directly or view it on GitHub:\nhttps://github.com/mozilla/localForage/issues/375#issuecomment-108525708\n. I think yes.\n\nIt would be useful to at least warn developers in the console! I think outputting a warning that says \"localForage does not function (well) in private browsing modes\" would be great, and we could possibly leverage localStorage throwing an error as our clue that we're in private browsing mode.\nGood tip!\n- tofumatt\nOn Tue, Jul 7, 2015 at 10:47 AM, Florian Bender notifications@github.com\nwrote:\n\nlocalStorage methods throw in private browsing mode in Safari. Can we leverage that?\nReply to this email directly or view it on GitHub:\nhttps://github.com/mozilla/localForage/issues/375#issuecomment-119143436\n. #555 is addressing this; possible fallback to memory.js would include a console warning.\n. We no longer require promises lib as mentioned in master, but you'll need to use the dist version of localforage now. Which file are you trying to use?\n- tofumatt\n\nOn Tue, Sep 8, 2015 at 8:41 AM, Gregor notifications@github.com wrote:\n\nI've installed latest localforage from master branch like this:\nbower install localforage#master.\nBefore that, the errors I've recieved were:\nUncaught Error: Cannot find module 'promise' (module.js:338) and\nUncaught Error: Cannot find module 'localForage' (module.js:338)\nAfter updating localforage from master, only one error appears:\nUncaught Error: Cannot find module 'localForage' (module.js:338)\n...but the promise error is gone.\nReply to this email directly or view it on GitHub:\nhttps://github.com/mozilla/localForage/issues/376#issuecomment-138463633\n. Nope, that should be the right file.\n\nWhat browser are you using? This looks like a bug for sure! (For what it\u2019s worth, I would say stick with 1.2, which is our official release right now). master is tested but right now we\u2019re upgrading some of our distribution methods so things might be unusually unstable! ;-)\n- tofumatt\nOn Tue, Sep 8, 2015 at 2:03 PM, Gregor notifications@github.com wrote:\n\n<script src=\"bower_components/localforage/dist/localforage.js\"></script> which has this header:\n/*!\n    localForage -- Offline Storage, Improved\n    Version 1.2.10\n    https://mozilla.github.io/localForage\n    (c) 2013-2015 Mozilla, Apache License 2.0\n*/\nShould I take any other?\nReply to this email directly or view it on GitHub:\nhttps://github.com/mozilla/localForage/issues/376#issuecomment-138553465\n. Oh, right. I\u2019m sorry, I totally missed that.\n\nWe don\u2019t aim to have node.js (io.js) support for localForage (https://github.com/mozilla/localForage/blob/master/CONTRIBUTING.md#nodejs-support). It\u2019s aimed to be a browser library first and foremost. I can\u2019t really offer much support for node usage.\nIf it works that\u2019s great but if it doesn\u2019t we want to focus on localForage issues that affect client browsers and things like PhoneGap. Because Electron is essentially using a node \u201cbackend\u201d localForage isn\u2019t supported there (and I\u2019m not even sure would work, given there aren\u2019t any storage methods available to node like IndexedDB).\n. So unless you're using it in the Chromium part of the app I don't think this will work. Maybe you can clarify for me. Thanks!\n. Oh, right. I\u2019m sorry, I totally missed that.\nWe don\u2019t aim to have node.js (io.js) support for localForage (https://github.com/mozilla/localForage/blob/master/CONTRIBUTING.md#nodejs-support). It\u2019s aimed to be a browser library first and foremost. I can\u2019t really offer much support for node usage.\nIf it works that\u2019s great but if it doesn\u2019t we want to focus on localForage issues that affect client browsers and things like PhoneGap. Because Electron is essentially using a node \u201cbackend\u201d localForage isn\u2019t supported there (and I\u2019m not even sure would work, given there aren\u2019t any storage methods available to node like IndexedDB).\n- tofumatt\nOn Tue, Sep 8, 2015 at 2:12 PM, Gregor notifications@github.com wrote:\n\nAs told by OP, this is Electron packager (http://electron.atom.io/), and as their Github page states (https://github.com/atom/electron) It is based on io.js and Chromium\nReply to this email directly or view it on GitHub:\nhttps://github.com/mozilla/localForage/issues/376#issuecomment-138555747\n. Thanks for letting us know. Please don't be shy about filing other issues; thanks so much :smile: \n. Sorry but no; the APIs we use on the back ends are non-blocking so we have to rely on callbacks and promises.\n\nWriting with promises gives you a code path that looks very similar to blocking calls. If you wanted to send a code sample I could suggest how to integrate them in.\n. I would say this code would be welcome; it allows users to store blobs are part of any object easily. My only concern is performance--doesn't this mean we need to deep\u00a0scan every Object to check for blobs on set and get even in IndexedDB (which we didn't before).\nIf the performance hit isn't huge it's worth it though.\n- tofumatt\nOn Mon, May 25, 2015 at 1:45 AM, S. Andrew Sheppard\nnotifications@github.com wrote:\n\nI'm working on integrating localForage into wq.app and overall have found it quite useful.  I'm using the blob storage capability to enable users to take photos with their phones offline, and store them in an \"outbox\" until they are able to connect.  For this to work, I'd like the ability to store nested records of the form:\njavascript\n{\n    \"id\": 123,\n    \"date\": \"2015-05-24\",\n    \"photo\": {\n        \"type\": \"image/jpeg\",\n        \"name\": \"IMAG0001.jpg\",\n        \"body\": Blob(type=\"image/jpeg\", size=20104)\n    }\n}\nThis works fine on the IndexedDB driver, but for the serializing drivers the full Blob is not saved unless it is the top level object.\nI was able to work around this in wq/store.js by making a setItem() wrapper that recursively extracts all blobs from an object into separate keys (and then puts them back in place during getItem() so the user never knows the difference).  Would a variation on this algorithm be appropriate for inclusion in the localForage serializer?\nReply to this email directly or view it on GitHub:\nhttps://github.com/mozilla/localForage/issues/380\n. I guess it's more of a gut feeling regarding performance; we don't even have real perf tests right now so if I had to just come up with numbers: no more than a 5-10% slowdown would be good. If that number seems crazy someone please correct me :-)\n\nProvided option two gives the user hooks without requiring configuration (I'm very adamant that localforage is a \"configuration optional\" library for all features) it might be more flexible and thus preferred.\nAnd since you already have an implementation of option two I'd go with that.\u00a0\nThanks! This sounds cool!\n- tofumatt\nOn Mon, May 25, 2015 at 3:38 PM, S. Andrew Sheppard\nnotifications@github.com wrote:\n\nOk, I'll think a bit more about how this would work and see if I can put something together.  I see two potential approaches:\n1. Handle in the serializer (convert to/from base64 in-place)\n2. Handle outside of the serializer (offload to separate keys in whatever driver)\n   What I've implemented in wq/store.js is more like the second option.  It's automatically disabled for IndexedDB unless the user explicitly requests blob extraction.\n   Option 1 is cleaner and is what I initially had in mind as an ideal solution.  The main benefit of option 2 is that you could provide hooks like this that the user could override to store blobs somewhere else (e.g. the filesystem).  It sounds like you've already been thinking about something like this for large files (#69).\n   Either approach will require a deep scan during setItem() (though I leave flags at each level to speed up the getItem() search).  That said, this functionality wouldn't necessarily have to be used for the IndexedDB driver (though #241 suggests it may be needed).  What would your threshold be for performance and how would you measure it?\n\nReply to this email directly or view it on GitHub:\n   https://github.com/mozilla/localForage/issues/380#issuecomment-105245023\n. Unfortunately no, I think to do it would be a fair bit of work... it might even be better as an extension to localforage because it could also be slow, requiring checking each nested object\u2019s value before saving.\n\n\nMatthew Riley MacPherson\ntofumatt.com\n\n\nOn 13 Nov 2017, at 11:24, Raul Tomescu notifications@github.com wrote:\nAny news about this? :)\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Urgh, whoops, I'm going through emails chronologically and I should've read this first. I'll fix the merge conflicts here and use this code.\n. I'm going through this and would love to clean up the copypasta, but I'd rather get what works in here first.\n\nI've sorted some of it out in the src/ folder but the tests still copy.\nI feel like our require setup is out of control as I'm barely groking it ;-)\n. Doing this in #386 so closing here :smile: \n. That actually sounds amazing. Honestly I don\u2019t use require or browserify right now (I used to use require a fair bit but these days I\u2019m just doing whatever is easiest, often using Ember\u2019s build system). I just like to support everything :-)\nI\u2019ll check into how Pouch does it and ping you for help, thanks ^_^\n\u2014\nSent from Mailbox\nOn Sun, May 31, 2015 at 5:50 PM, Nolan Lawson notifications@github.com\nwrote:\n\n@tofumatt Yeah, I apologize for that, but it was late at night and I was just happy that the tests were passing. :)\nAs for the require setup, in PouchDB anyway we converted everything to browserify about a year ago and haven't looked back. It makes for a more complicated build process, but it's really nice to just write for one module system. I also believe derequire is the magic that makes it work for RequireJS as well, but I'm not sure since I've never used RequireJS. :stuck_out_tongue:\nSo our build command becomes:\n    browserify index.js | derequire | es3ify > output.js\n(es3ify converts stuff like promise.catch to promise['catch'])\nI was thinking of helping rewrite LocalForage to use a similar build process, but I didn't want to be presumptuous in case you liked your current setup. But if you'd like, I could try to help. :smiley:\nReply to this email directly or view it on GitHub:\nhttps://github.com/mozilla/localForage/pull/383#issuecomment-107222940\n. I assume everything will still work for those wanting a simple  tag. Otherwise it's a non starter for me. I assume requirejs will also still work?</p>\n</blockquote>\n<p>I do love the es6 modules and I forgot about that... I'd assume that will still work with browserify so I'm more for es6 than anything else.</p>\n<p>On Sunday, 31 May 2015 at 21:08, Thodoris Greasidis notifications@github.com, wrote:</p>\n<p>1) How about those who don't use any module system? Will they still be able</p>\n<p>to just add a script tag and access localforage from the global object?</p>\n<p>2) Those with requirejs?</p>\n<p>3) I've been working on an [es6-babel branch](</p>\n<p>https://github.com/thgreasi/localForage/tree/es6-babel) for the last 4-5</p>\n<p>months and I really like using <code>import</code> statements and have babel transform</p>\n<p>it to use the UMD pattern. I guess that at some point the es6 module system</p>\n<p>should prevail, so it should be a safe bet to use it.</p>\n<p>If we decide to drop support for dynamically loading the appropriate driver</p>\n<p>when using requirejs, then all the code can be changed to just use <code>import</code></p>\n<p>statements on the top of the file. Any thoughts about this?</p>\n<p>PS: can we also change browserify <code>require</code>s to named modules instead of</p>\n<p>'./drivers/indexeddb/' ? Is it not prefered? Along with (3), these are the</p>\n<p>only things that currently  prevent from dropping all module systems and</p>\n<p>just use es6 modules. Can anybody give me some info or hints?</p>\n<p>On Sun, May 31, 2015, 21:15 JP Richardson notifications@github.com wrote:</p>\n<blockquote>\n<p>As for the require setup, in PouchDB anyway we converted everything to</p>\n<p>browserify about a year ago and haven't looked back.</p>\n<p>I also wanted to echo this sentiment. Browserify is an excellent tool that</p>\n<p>would aid any front end project.</p>\n<p>\u2014</p>\n<p>Reply to this email directly or view it on GitHub</p>\n<p>https://github.com/mozilla/localForage/pull/383#issuecomment-107231388.</p>\n</blockquote>\n<h2></h2>\n<p><em>Thodoris Greasidis https://www.linkedin.com/in/thgreasi</em></p>\n<p>Computer, Networking &amp;</p>\n<p>Communications Engineer</p>\n<p>\u2014\nReply to this email directly or view it on GitHub.\n. Agreed. But for what it\u2019s worth the dynamic require of localForage components isn\u2019t a huge deal to me :-)</p>\n<p>\u2014\nSent from Mailbox</p>\n<p>On Mon, Jun 1, 2015 at 11:07 AM, Thodoris Greasidis\nnotifications@github.com wrote:</p>\n<blockquote>\n<h2>We should probably move this discussion to a new issue</h2>\n<p>Reply to this email directly or view it on GitHub:\nhttps://github.com/mozilla/localForage/pull/383#issuecomment-107386702\n. I'll add this in but I don't think we need those examples. As discussed dynamic requiring isn't super important to me :smile: \n. I'm dumb, #383 is #382 except extras. Okay, this'll be it merged and good to go once the tests pass.\n. Fixed via a70ffffa3212f5285fb3c4fa75b140b7bc665162.\n. I'm okay with that; I'm tempted to do a cleanup and offer fewer downloadable versions anyway. It's a bit weird to keep track of anyway. Until anyone asks for it I won't worry about that :smile: \n. Are you using a particular version/release or have you downloaded the latest from GitHub (i.e. master)?\n. I just tried to run this code and it worked in Chrome:</p>\n</blockquote>\n<p><code>js\nlocalforage.setItem('test', 'o.moreau@trackmyfit.com')\n  .then(function() { return localforage.getItem('test'); })\n  .then(function(email) { console.log(email); });</code></p>\n<p>So I'm not sure what's up. Could you let me know the version of localForage and Chrome you're using? A code sample I can test myself would also help :smile: \n. Hmm, would it be possible to include an example using JSFiddle or something like that? I can\u2019t run this code directly in Chrome and if I can spend the time examining the bug instead of getting a localforage-angular environment up that\u2019d be great :-)</p>\n<p>Thanks!\n. Oops! Sorry about that! It's been published.</p>\n<p>Thanks for reporting the issue :smile: \n. :open_mouth: Soooo cool. I'm painting my apartment this weekend (and the router is in the room we're painting so I'm often offline :wink:) but I'll start review ASAP!\n. Yeah, I think pushing that commit to the PR makes sense. It simplifies the import system a lot, right?\n- tofumatt</p>\n<p>On Sun, Jun 14, 2015 at 9:40 PM, Thodoris Greasidis\nnotifications@github.com wrote:</p>\n<blockquote>\n<p>@tofumatt Just pushed <a href=\"https://github.com/thgreasi/babel-plugin-system-import-transformer\">babel-plugin-system-import-transformer</a> that replaces <code>System.import</code> to AMD, CommonnJS &amp; Global module imports.\nI have also created <a href=\"https://github.com/thgreasi/localForage/tree/es6-babel-system-import\">a separate localforage branch</a> that uses <code>System.import</code> statements. The only remaining <code>require</code> statements are those for the Promises polyfill for CommonJS (but we might remove it in the future).</p>\n<h2>Feel free to review. Should I push the commit in this PR?</h2>\n<p>Reply to this email directly or view it on GitHub:\nhttps://github.com/mozilla/localForage/pull/390#issuecomment-111874866\n. Sorry, I was off on the Mozilla work week :-/</p>\n</blockquote>\n<p>I\u2019ll look at it soon, though my friends are here from Montreal, so I might be delayed.\n- tofumatt</p>\n<p>On Sun, Jun 28, 2015 at 8:35 PM, Thodoris Greasidis\nnotifications@github.com wrote:</p>\n<blockquote>\n<h2>@tofumatt any feedback on this?</h2>\n<p>Reply to this email directly or view it on GitHub:\nhttps://github.com/mozilla/localForage/pull/390#issuecomment-116319745\n. ### re: <code>remove require('promise')</code></p>\n</blockquote>\n<p>I agree about requiring polyfills as anti pattern, at least in the <code>src</code> code. It's important to still include in the <code>dist</code> file, as <a href=\"http://caniuse.com/#search=promises\">IE still needs the polyfill</a>. And I assume the polyfill is smart enough to back off from loading its own code if Promises are already available... for its file size I almost would rather just have one <code>dist</code> file as well. So loading promises into the <code>dist</code> file but otherwise not keeping them around is fine by me.\n. ### re: drop support for dynamic driver loading with requirejs</p>\n<p>We should drop this support, so I'm fine with this.</p>\n<p>Is there more <code>System.import</code> code you wanted to push here? Because even if we use that and it allows us to dynamically require drivers... I think that can be a hidden, unsupported feature (as it essentially is to me now). I don't see a lot of use in it (the drivers are reasonably small and the extra HTTP requests from not compiling them using a require.js compiler are likely as slow as the extra kB in size).\n. When I try to run these tests locally I get a Babel error:</p>\n<p>``` bash\n~/Projects/localforage[thgreasi-es6-babel\u2757 ]% grunt test \nRunning \"babel:dist\" (babel) task\nWarning: Don't hotlink internal Babel files. Use --force to continue.</p>\n<p>Aborted due to warnings.\n```</p>\n<p>There's a bug in versions before <code>5.6.10</code> of Babel but we don't seem to be using that early of a version.\n. Yeah, re-running the Travis tests cause things to fail too: https://travis-ci.org/mozilla/localForage/builds/66916572 :disappointed: \n. Cool, I\u2019ll try to take a look tonight, but I have an early doctor\u2019s appointment so we\u2019ll see how far I get ;-)</p>\n<p>If not tomorrow evening, thanks :-)\n- tofumatt</p>\n<p>On Tue, Jul 14, 2015 at 9:27 PM, Thodoris Greasidis\nnotifications@github.com wrote:</p>\n<blockquote>\n<p>Just did a rebase and pushed the \"remove promise polyfill require\".\nAlso released a new version of babel-plugin-system-import-transformer to remove the warning.</p>\n<h2>The build seems to pass now.</h2>\n<p>Reply to this email directly or view it on GitHub:\nhttps://github.com/mozilla/localForage/pull/390#issuecomment-121372457\n. &gt; Just saw that, now that require('promise') is also gone, we no longer need all the manual module type detection code!</p>\n</blockquote>\n<p>Niiiiice.\n. This looks pretty awesome. I can't see anymore issues, was there anything I didn't address or you think needs to be done?</p>\n<p>I think it looks good to merge :+1: \n. Sounds good :-)</p>\n<p>I'll merge it in today :-)</p>\n<p>Thanks so much, it's awesome and I love how many lines of code you <em>removed</em>!\n- tofumatt</p>\n<p>On Thu, Jul 16, 2015 at 8:21 AM, Thodoris Greasidis\nnotifications@github.com wrote:</p>\n<blockquote>\n<p>Hi Matt. I think that it's fine. I've been working on this since\nFebruary/March and I no longer see opportunities for fixes or improvements.\nThankfully we lately introduced more tests with the various module\npackages/loaders.\nThis is a big enough PR already, so I guess that addressing webworkers and\nchanging driver names sound better be handled in separate PRs.\nOn Wed, Jul 15, 2015, 22:12 Matthew Riley MacPherson <a href=\"&#109;&#97;&#105;&#108;&#116;&#111;&#58;&#10;&#110;&#111;&#116;&#105;&#102;&#105;&#99;&#97;&#116;&#105;&#111;&#110;&#115;&#64;&#103;&#105;&#116;&#104;&#117;&#98;&#46;&#99;&#111;&#109;\">&#10;&#110;&#111;&#116;&#105;&#102;&#105;&#99;&#97;&#116;&#105;&#111;&#110;&#115;&#64;&#103;&#105;&#116;&#104;&#117;&#98;&#46;&#99;&#111;&#109;</a> wrote:</p>\n<blockquote>\n<p>This looks pretty awesome. I can't see anymore issues, was there anything\nI didn't address or you think needs to be done?</p>\n<p>I think it looks good to merge [image: :+1:]</p>\n<p>\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/mozilla/localForage/pull/390#issuecomment-121718127.</p>\n<hr />\n<p>Reply to this email directly or view it on GitHub:\nhttps://github.com/mozilla/localForage/pull/390#issuecomment-121856665\n. :smile: :smile: :smile: \n. Unfortunately, browsers don't expose the remaining storage available as an API that I know of. Additionally, IndexedDB in theory can store as much data as you'd like (though you might get a prompt first).</p>\n</blockquote>\n</blockquote>\n<p>Browsers are lacking the APIs to implement this and I don't know of a good cross-browser solution that we can look to in the next year even.</p>\n<p>I'm going to close this for now, but if things change in the future feel free to open a new issue or reopen this.\n. Should this be marked as closed? I don't see a fix...\n- tofumatt</p>\n<p>On Wed, Jul 1, 2015 at 9:39 AM, Andr\u00e9 Fiedler notifications@github.com\nwrote:</p>\n<blockquote>\n<h2>Closed #393.</h2>\n<p>Reply to this email directly or view it on GitHub:\nhttps://github.com/mozilla/localForage/issues/393#event-345135424\n. To people or just one person? If it doesn\u2019t make sense I\u2019m happy to just remove it; it\u2019s cute but it\u2019s just visual clutter.\n- tofumatt</p>\n</blockquote>\n<p>On Wed, Jul 1, 2015 at 3:14 PM, sole notifications@github.com wrote:</p>\n<blockquote>\n<h2>I suggest we move it to the bottom of the column</h2>\n<p>Reply to this email directly or view it on GitHub:\nhttps://github.com/mozilla/localForage/issues/394\n. Totally true. I'll add this to the docs right now.\n. Oh, right, you need to install a bunch of Ruby garbage and I don't even have Ruby set up on my new Mac properly yet. I'll get to this <em>soon</em> but not right now.</p>\n</blockquote>\n<p>Related: #192\n. From reading the bug, everything is actually okay but the warning was displaying regardless of a successful write?</p>\n<p>ie. this was a Firefox bug, doesn't happen elsewhere, and should be fixed in Nightly?\n. Yay! Thanks for the update.\n- tofumatt</p>\n<p>On Tue, Jul 7, 2015 at 7:58 AM, Andr\u00e9 Fiedler notifications@github.com\nwrote:</p>\n<blockquote>\n<h2>Yeah, just updated to Firefox Developer Edition 41.0a2 (2015-07-06) and all is fine now. No more warnings. Seems fixed to me. :smile:</h2>\n<p>Reply to this email directly or view it on GitHub:\nhttps://github.com/mozilla/localForage/issues/396#issuecomment-119094783\n. bower should get stuff from GitHub, but I haven't pushed a new release since May 14.</p>\n</blockquote>\n<p>I just <a href=\"https://github.com/mozilla/localForage/releases/tag/1.2.4\">pushed a new version</a>. Should be fixed now.\n. This is an awesome idea.</p>\n<p>Agreed, we'll merge some other stuff before tackling it but this is a great idea.\n- tofumatt</p>\n<p>On Fri, Jul 3, 2015 at 5:09 PM, Thodoris Greasidis\nnotifications@github.com wrote:</p>\n<blockquote>\n<p>Such a change would allow us to make custom drivers DRYer.\nSimple drivers could greatly reduce their code and file size by overriding only the different methods and reusing the rest ones. The problem currently is that the serializer is referenced by the closures of the  driver methods. Attaching it to dbInfo would be great.\nFor example, sessionStorage and CordovaSQLitePlugin drivers would just need to override the _initStorage methods and reuse localStorageWrapper and websqldriver respectively.\nMaking localforage drivers architecture more object oriented (maybe es6 class based) would be an other step forward.</p>\n<h2>No PR yet, just discussing. Waiting for other major PRs to merge.</h2>\n<p>Reply to this email directly or view it on GitHub:\nhttps://github.com/mozilla/localForage/issues/398\n. Not sure what this is or where the documentation is... or why we should do it. Can you elaborate please? Thanks :smile: \n. I\u2019m not a frequent user of Closure Compiler nor knowledgable on it, so a pull request will be much helpful here. If I should create a Mozilla repo for this (localforage-closure-exports) I can do that.</p>\n</blockquote>\n<p>Otherwise I won\u2019t likely get to this anytime soon.\n- tofumatt</p>\n<p>On Tue, Jul 7, 2015 at 8:37 AM, Thodoris Greasidis\nnotifications@github.com wrote:</p>\n<blockquote>\n<p>It seems that in most cases people create a separate repo and add it in the <a href=\"https://github.com/google/closure-compiler/wiki/Externs-For-Common-Libraries\">closure-compiler/wiki</a>.\nThat's the case for Backbone, Underscore, React and Firebase.</p>\n<h2>It's a pity thought that there is no central repo like what people are doing for <a href=\"https://github.com/borisyankov/DefinitelyTyped\">Typescript definition files</a>.</h2>\n<p>Reply to this email directly or view it on GitHub:\nhttps://github.com/mozilla/localForage/issues/399#issuecomment-119104917\n. Closing due to lack of progress on this one.\n. (Oddly these don't work in Safari on OS X Yosemite, but I'm thinking that's either a Fiddle or a localforage bug.)</p>\n</blockquote>\n<p>Looks great, thanks! :+1: \n. Good catch! <code>image</code> is probably better than <code>img</code> though... any chance you could change both to the more verbose version? :smile: \n. Thanks very much, and thanks for the contribution! :+1: \n. It is a design goal of localforage to work in web workers. You're right though ; it currently doesn't work.</p>\n<p>If you can send a pull request that fixes it that would be great, but if not know it's something I'll eventually work on :-)\n- tofumatt</p>\n<p>On Wed, Jul 15, 2015 at 10:06 AM, Remko Boschker notifications@github.com\nwrote:</p>\n<blockquote>\n<p>Hi,\nI would like to use localforage in a serviceworker. Version 1.2.4 in Chrome 43 throws a reference error on line 963 \"window undefined\", because there is no window in the serviceworker. \nWindow was removed in #144 but reintroduced in #237. \nShould localforage or should it not be usable in a webworker / serviceworker environment?</p>\n<h2>I'll see if I can get it to work.</h2>\n<p>Reply to this email directly or view it on GitHub:\nhttps://github.com/mozilla/localForage/issues/402\n. Awesome, thanks so much.</p>\n</blockquote>\n<p>If you run the tests using <code>npm test</code> you can run them in phantomjs, and using <code>grunt serve</code> should allow you to run them from browsers using a local node server URL.\n- tofumatt</p>\n<p>On Wed, Jul 15, 2015 at 10:27 AM, Remko Boschker notifications@github.com\nwrote:</p>\n<blockquote>\n<h2>replacing .call(window) by .call(this) loads the lib just fine, but this probably introduces other issues. I'll fork and run some tests later today. Thanks.</h2>\n<p>Reply to this email directly or view it on GitHub:\nhttps://github.com/mozilla/localForage/issues/402#issuecomment-121547558\n. I believe the webworker tests are commented out right now, or more accurately are marked as <code>skip</code>. You might need to change them to fix this.</p>\n</blockquote>\n<p>Let me know if it seems like that's the case but you need more help.</p>\n<p>\u2014\nSent from Mailbox</p>\n<p>On Thu, Jul 23, 2015 at 10:12 AM, Remko Boschker notifications@github.com\nwrote:</p>\n<blockquote>\n<h2>@thgreasi I do not mind the extra precaution. Can you confirm that the test are passing in your localforage#webworkers-fix? I tried to copy the webworkers test to a serviceworker scenario but the tests are not passing. When I include only the test.webworker.js in the test.component.html not a single test is run.</h2>\n<p>Reply to this email directly or view it on GitHub:\nhttps://github.com/mozilla/localForage/issues/402#issuecomment-124044981\n. Should be fixed by #461.\n. Cool! I'm in Iceland for the week so I might not get to it until Sunday evening or Monday. But I'm on it ASAP!\n- tofumatt</p>\n</blockquote>\n<p>On Sat, Jul 25, 2015 at 8:55 AM, Thodoris Greasidis\nnotifications@github.com wrote:</p>\n<blockquote>\n<p>@tofumatt , thanks to @remkoboschker 's help, this PR now also contains tests for service workers.\nThey currently do not run inside PhantomJS, only locally with <a href=\"https://github.com/mozilla/localForage/issues/402#issuecomment-124472099\">Chrome 44+ or firefox nightly with the dom.serviceworker enabled</a> (as @remkoboschker noted).</p>\n<h2>W8ting 4 review.</h2>\n<p>Reply to this email directly or view it on GitHub:\nhttps://github.com/mozilla/localForage/pull/406#issuecomment-124822718\n. Sorry not yet but I'll check in a few hours. Iceland messed up my brain and I slept all afternoon! o_O\n- tofumatt</p>\n</blockquote>\n<p>On Fri, Jul 31, 2015 at 4:58 PM, Thodoris Greasidis\nnotifications@github.com wrote:</p>\n<blockquote>\n<h2>@tofumatt any feedback on this?</h2>\n<p>Reply to this email directly or view it on GitHub:\nhttps://github.com/mozilla/localForage/pull/406#issuecomment-126734378\n. Merged in 9d2b28b5f508f2dd38e4a133ddd5ca9baaea7209!\n. @lilred If you could file a separate bug for that it would be great. Sadly support for web workers is spotty because Safari doesn't yet support everything we need to use IndexedDB with it, so only Chrome and Firefox support workers, if I recall correctly.\n. Good to know! If there's a particular issue or somewhere I can follow along (or something I can do to help) let me know.\n. Yes, this looks like a bug, I thought it had already been reported but I can't find it (at least on my phone).</p>\n</blockquote>\n<p>Thanks for finding it!\n. Sure thing. I've responded to the pull request, would you be able to add a test to the PR as well? If not I'll try to add my own but it won't be for a few hours or maybe tomorrow. Thanks!\n- tofumatt</p>\n<p>On Thu, Aug 13, 2015 at 2:18 PM, af7 notifications@github.com wrote:</p>\n<blockquote>\n<p>Hello, this is a bug that causes errors in my case, because I use <em>two</em> dbs inside localStorage.\nThis is why I added this code...</p>\n<p><code>if (!(key.indexOf(keyPrefix) === 0)) continue;</code></p>\n<p>...between these lines here:</p>\n<p><code>var key = localStorage.key(i);\nvar value = localStorage.getItem(key);</code></p>\n<p>https://github.com/mozilla/localForage/blob/master/src/drivers/localstorage.js#L112-L113\nCould you <em>please</em> add these to MASTER so that localForage behaves as expected?\nI really need to just add the npm package to my project and not have to compile the source files (so that I get this issue fixed).</p>\n<h2>Thanks!</h2>\n<p>Reply to this email directly or view it on GitHub:\nhttps://github.com/mozilla/localForage/issues/407#issuecomment-130666931\n. Yeah, looking at this I think it's works as expected, just need to use the code @thgreasi recommended.</p>\n</blockquote>\n<p>If you still think it's a bug feel free to reopen with the exact code producing the error :smile: \n. Sorry, but I don't quite understand the issue. Could you show me the code you're trying to run that's failing?\n- tofumatt</p>\n<p>On Fri, Jul 24, 2015 at 12:28 PM, Remko Boschker notifications@github.com\nwrote:</p>\n<blockquote>\n<p>When No Drivers Are Available agrees with Modernizr on storage drivers support:\nError: expected false to equal true\n at http://localhost:9999/bower_components/expect/index.js:102\n at http://localhost:9999/bower_components/expect/index.js:219\n at http://localhost:9999/bower_components/expect/index.js:69\n at http://localhost:9999/test/test.nodriver.js:23\n at callFn (http://localhost:9999/bower_components/mocha/mocha.js:4338)\n at http://localhost:9999/bower_components/mocha/mocha.js:4331\n at http://localhost:9999/bower_components/mocha/mocha.js:4728\n at http://localhost:9999/bower_components/mocha/mocha.js:4819\n at next (http://localhost:9999/bower_components/mocha/mocha.js:4653)\n at http://localhost:9999/bower_components/mocha/mocha.js:4663\n at next (http://localhost:9999/bower_components/mocha/mocha.js:4601)\n at http://localhost:9999/bower_components/mocha/mocha.js:4630</p>\n<h2>at timeslice (http://localhost:9999/bower_components/mocha/mocha.js:5761)</h2>\n<p>Reply to this email directly or view it on GitHub:\nhttps://github.com/mozilla/localForage/issues/409\n. Cool, thanks for the update.\n. Looks like there's definitely a browersify issue: #413 reports it as well.\n. I think I know what it is. In the other example it\u2019s someone loading src/localforage.js, not the fully built version. I never advertised this as supported but it\u2019s worked in the past.</p>\n</blockquote>\n<p>I\u2019m going to push a version 1.2.7 as a fix that supports the including from <code>src</code> version, then a <code>1.3</code> that explicitly doesn\u2019t in the changelog.</p>\n<p>Sorry for forgetting we\u2019d be breaking this.\n- tofumatt</p>\n<p>On Mon, Aug 3, 2015 at 12:52 PM, Thodoris Greasidis\nnotifications@github.com wrote:</p>\n<blockquote>\n<p>I will take a look at it as soon as I'm home. It's nice to have a reference\nrepo to work on this.\nOn Mon, Aug 3, 2015, 14:37 Tobias Bieniek notifications@github.com wrote:</p>\n<blockquote>\n<p>I have the same issue at https://github.com/Turbo87/open-flight-planner</p>\n<p>I worked fine with localforage v1.2.4, but breaks with v1.2.6.</p>\n<p>\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/mozilla/localForage/issues/412#issuecomment-127203420\n.</p>\n<h2></h2>\n<p><em>Thodoris Greasidis</em>\nComputer, Networking &amp;</p>\n<h2>Communications Engineer</h2>\n<p>Reply to this email directly or view it on GitHub:\nhttps://github.com/mozilla/localForage/issues/412#issuecomment-127207425\n. Uploaded a new release to GitHub and npm. This should be fixed now, but there will be a new release later today: 1.3 that <strong>will not support loading <code>src/localforage</code></strong> and will only work with the <code>dist/localforage.js</code> version.\n. Yeah, we were pointing to the src/ version in the package too :-(</p>\n</blockquote>\n</blockquote>\n<p>I\u2019ve pushed a new version 1.2.7 that fixes it and I think I\u2019m going to push the new es6 version as a new release entirely, because it will break compatibility with a lot of other things.</p>\n<p>Sorry about all this. I messed up! But it should be fixed now.\n- tofumatt</p>\n<p>On Mon, Aug 3, 2015 at 1:12 PM, Tobias Bieniek notifications@github.com\nwrote:</p>\n<blockquote>\n<h2>@tofumatt I am not explicitly loading anything, I am just installing the package via npm and using browserify + babel to compile my script that imports from <code>localforage</code>. (see repo mentioned above)</h2>\n<p>Reply to this email directly or view it on GitHub:\nhttps://github.com/mozilla/localForage/issues/412#issuecomment-127214078\n. Seems like we need some better/new browserify tests.\n- tofumatt</p>\n</blockquote>\n<p>On Mon, Aug 3, 2015 at 6:23 PM, Thodoris Greasidis\nnotifications@github.com wrote:</p>\n<blockquote>\n<p>While testing with open-flight-planner got some interesting findings:\n- browserify does not like <code>\"browser\": \"dist/localforage.js\"</code>\n  - it gives: <code>Error: Cannot find module './../utils/serializer'</code>\n- it works fine with <code>\"browser\": \"build/es5src/localforage.js\",</code></p>\n<p>## * if it is included of course. The whole point of this is to leave all the project-specific babel configurations away from our users</p>\n<p>Reply to this email directly or view it on GitHub:\n  https://github.com/mozilla/localForage/issues/412#issuecomment-127336708\n. I like the idea of a minimal difference on the output, but I'd really prefer just to have one supported build file, and I'd rather not include even <em>more</em> built files. And I really think it would be easier to support.</p>\n</blockquote>\n<p>I think we should just use it as our built file unless it makes a huuuge difference... what does the output of the browserify version look like compared to the just es6+concat version?\n- tofumatt</p>\n<p>On Mon, Aug 3, 2015 at 6:35 PM, Thodoris Greasidis\nnotifications@github.com wrote:</p>\n<blockquote>\n<p>It looks like that with browserify we can't just concat the files.\nWe \n- either need to actually use browserify to generate our build (I'm not a fan of this),\n- or add the es5 sources and point browserify to them.\n  I like the second more (obviously just personal opinion), since my point of view while refactoring to es6 was to have minimal +-diff on the dist files.\n  I never actually got the old dist files to work with browserify and that is visible from our browserify test code. So I think that our build system never actually supported browserify users, or at least not without extra configuration. It seems that all this time it worked just because we were pointing them to <code>src/</code>. (On the other hand I'm not a browserify expert.)</p>\n<hr />\n<p>Reply to this email directly or view it on GitHub:\n  https://github.com/mozilla/localForage/issues/412#issuecomment-127340202\n. I\u2019m okay with <code>localforage.serializer</code>, I think even exposing that in general isn\u2019t bad. Maybe someone wants to use the serializer directly for something and I don\u2019t mind exposing that as an API.\n- tofumatt</p>\n</blockquote>\n<p>On 6 August 2015 at 08:48:43, Thodoris Greasidis (notifications@github.com) wrote:</p>\n<p>I've done some research on this during this week and this seems to be a general problem for libs that need transformations to build.\nI will probably open a PR tonight that will introduce some changes to package.json, so that browserify users will be able to use the src in their build chain (like in older versions).\nThe PR will basically disclose our babel(ify) configuration options and transformations so that browserify-enabled apps will know how to build &amp; require localforage module.</p>\n<p>In a later PR (hopefully in a week) I will try to direct browserify users to the dist sources.\nThe are some issues there, with browserify trying to reanalyze the require calls of the already bundled dist file.</p>\n<p>Such a move will probably only allow us to export the localforage namespace, encapsulating/hiding the drivers and the serializer namespaces. Any suggestion about how to expose them for plugins? Maybe something like localforage.serializer or localforage.getSerializer() ?</p>\n<p>\u2014\nReply to this email directly or view it on GitHub.\n. That would be awesome. It would return the entire driver module, right?\n- tofumatt</p>\n<p>On Thu, Aug 6, 2015 at 4:51 PM, Thodoris Greasidis\nnotifications@github.com wrote:</p>\n<blockquote>\n<p>I would also like to suggest a localforage.getDrivet(driverName) method that will be used by setDriver internally.\nSuch a method would allow:\n- the creation of custom drivers that extend a base driver and only override some of the methods (eg: Cordova sqlite driver(s) actually only need to override the _initStorage methods)</p>\n<h2>* the user to check whether a driver is defined</h2>\n<p>Reply to this email directly or view it on GitHub:\nhttps://github.com/mozilla/localForage/issues/412#issuecomment-128416633\n. Good point. It should return a promise that would eventually resolve to the driver, not the driver object itself :-)\n- tofumatt</p>\n</blockquote>\n<p>On Thu, Aug 6, 2015 at 6:33 PM, Thodoris Greasidis\nnotifications@github.com wrote:</p>\n<blockquote>\n<h2>On the other hand, we all love promises and localforage at the moment has very few not promise-based APIs...</h2>\n<p>Reply to this email directly or view it on GitHub:\nhttps://github.com/mozilla/localForage/issues/412#issuecomment-128452416\n. Hi @af7, could you file these both as separate issues? Happy to help but we need to keep these discussions separated :smile:</p>\n</blockquote>\n<p>If you could try installing the latest localForage from master in your project and let me know how it works with browserify that would be great. I could publish 1.3 as a beta/pre-release on npm, if that works.\n. Good point, I filed #423 for that.\n- tofumatt</p>\n<p>On Sun, Aug 16, 2015 at 12:44 PM, Thodoris Greasidis\nnotifications@github.com wrote:</p>\n<blockquote>\n<p>About point 2.</p>\n<h2>There is a <a href=\"https://github.com/mozilla/localForage/blob/66ed3aeb261886c60f7805a1ccdbbb59d675eae0/src/localforage.js#L338-L340\"><code>localforage.supports()</code> method</a> but it looks like it is not documented. It should be visible from your browser's dev tools console though.</h2>\n<p>Reply to this email directly or view it on GitHub:\nhttps://github.com/mozilla/localForage/issues/412#issuecomment-131530704\n. Agreed; we point users to a specific file as it\u2019s the only thing we have a test case for. Other uses of localForage are unsupported, and possibly won\u2019t work by design.\n- tofumatt</p>\n</blockquote>\n<p>On Wed, Aug 26, 2015 at 5:40 PM, Thodoris Greasidis\nnotifications@github.com wrote:</p>\n<blockquote>\n<p>@mshwery I think that you should not manually point to the dist file and <a href=\"https://github.com/mozilla/localForage/blob/270e84c57970c35d7a03ff8f583ddc3cb8cc9b4f/package.json#L41\">use whatever the library points in its <code>package.json</code></a>.\nThe whole point of the <code>browser</code> field, is to allow the package maintainer handle the appropriate entry point for browserify users.</p>\n<blockquote>\n<p>I checked those out but their setup really isn't different than my use case...</p>\n<h2>Such an override is considered a setup difference.</h2>\n<p>Reply to this email directly or view it on GitHub:\nhttps://github.com/mozilla/localForage/issues/412#issuecomment-135101530\n. Yup, the pre-es6-refactor branch has the code for the 1.2 branch from 1.2.7 onward (1.2.7-1.2.8).</p>\n</blockquote>\n</blockquote>\n<p>https://github.com/mozilla/localForage/tree/pre-es6-refactor\n- tofumatt</p>\n<p>On Wed, Aug 26, 2015 at 6:38 PM, Thodoris Greasidis\nnotifications@github.com wrote:</p>\n<blockquote>\n<p>Also, the sources and package.json in the master branch are not the same\nfound in the latest release v1.2.8 (if I can remember correctly). The\nmaster branch currently holds the sources of what will be v1.3 .\nOn Wed, Aug 26, 2015, 20:33 Thodoris Greasidis thgreasi@gmail.com wrote:</p>\n<blockquote>\n<p>That's our target for v1.3 by the way.\nWe will drop all the module system specific fields from package.json and\npoint everyone to the dist file, using only the 'main' package.json field.</p>\n<p>In any case, just trust the package.json and you will not face any\nproblem, even after upgrading to v1.3 (when released).</p>\n<p>On Wed, Aug 26, 2015, 20:21 Matt Shwery notifications@github.com wrote:</p>\n<blockquote>\n<p>@tofumatt https://github.com/tofumatt @thgreasi\nhttps://github.com/thgreasi you are probably right that I should just\nspecify a list of modules, but in my case if the package provides .min\nversions I would rather bundle those than do minification unnecessarily\nmyself. Whatever is in the dist directory should all be fully working\npackages without any build step (at least, for client-side packages that\nshould be the expectation).</p>\n<p>Regardless, I'm pointing to the exact same file as localforage's\npackage.json:\nhttps://github.com/mozilla/localForage/blob/master/package.json#L49</p>\n<p>\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/mozilla/localForage/issues/412#issuecomment-135113249\n.</p>\n<h2></h2>\n<p><em>Thodoris Greasidis</em></p>\n</blockquote>\n<p>Computer, Networking &amp;\nCommunications Engineer</p>\n<h2></h2>\n<p><em>Thodoris Greasidis</em>\nComputer, Networking &amp;</p>\n<h2>Communications Engineer</h2>\n<p>Reply to this email directly or view it on GitHub:\nhttps://github.com/mozilla/localForage/issues/412#issuecomment-135119285\n. No worries, hope it helps \ud83d\udc4d\n- tofumatt</p>\n</blockquote>\n</blockquote>\n<p>On Wed, Aug 26, 2015 at 6:58 PM, Matt Shwery notifications@github.com\nwrote:</p>\n<blockquote>\n<h2>ah, gotcha. thanks for all the help guys!</h2>\n<p>Reply to this email directly or view it on GitHub:\nhttps://github.com/mozilla/localForage/issues/412#issuecomment-135124208\n. No, this is my fault, sorry :cry: </p>\n</blockquote>\n<p>When we did the refactor into es6 we removed support for including <code>src/localforage.js</code> and require people to include the fully built version in <code>dist</code>. I've never officially supported including the source files but I think it's always worked until now and a lot of people have been doing it--but it causes us headaches :smile: </p>\n<p>I should have marked this as a version bump to 1.3 and didn't. I'll push 1.2.7 soon and it should continue working. Then I'll push 1.3, which won't work as you've been using but should work with the <code>dist/</code> version.</p>\n<p>Sorry about all this. Should be fixed soon.\n. Uploaded a new release to GitHub and npm. This should be fixed now, but there will be a new release later today: 1.3 that <strong>will not support loading <code>src/localforage</code></strong> and will only work with the <code>dist/localforage.js</code> version.\n. Good to know, I\u2019ll do that in the 1.3 version. I\u2019ll release that at some point today :-)\n- tofumatt</p>\n<p>On Mon, Aug 3, 2015 at 1:09 PM, Thodoris Greasidis\nnotifications@github.com wrote:</p>\n<blockquote>\n<p>We  also have to change the \"browser\" field in package.json to target the\ndist file as well.\nOn Mon, Aug 3, 2015, 14:57 Matthew Riley MacPherson <a href=\"&#109;&#97;&#105;&#108;&#116;&#111;&#58;&#10;&#110;&#111;&#116;&#105;&#102;&#105;&#99;&#97;&#116;&#105;&#111;&#110;&#115;&#64;&#103;&#105;&#116;&#104;&#117;&#98;&#46;&#99;&#111;&#109;\">&#10;&#110;&#111;&#116;&#105;&#102;&#105;&#99;&#97;&#116;&#105;&#111;&#110;&#115;&#64;&#103;&#105;&#116;&#104;&#117;&#98;&#46;&#99;&#111;&#109;</a> wrote:</p>\n<blockquote>\n<p>No, this is my fault, sorry [image: :cry:]</p>\n<p>When we did the refactor into es6 we removed support for including\nsrc/localforage.js and require people to include the fully built version\nin dist. I've never officially supported including the source files but I\nthink it's always worked until now and a lot of people have been doing\nit--but it causes us headaches [image: :smile:]</p>\n<p>I should have marked this as a version bump to 1.3 and didn't. I'll push\n1.2.7 soon and it should continue working. Then I'll push 1.3, which won't\nwork as you've been using but should work with the dist/ version.</p>\n<p>Sorry about all this. Should be fixed soon.</p>\n<p>\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/mozilla/localForage/issues/413#issuecomment-127209459\n.</p>\n<h2></h2>\n<p><em>Thodoris Greasidis</em>\nComputer, Networking &amp;</p>\n<h2>Communications Engineer</h2>\n<p>Reply to this email directly or view it on GitHub:\nhttps://github.com/mozilla/localForage/issues/413#issuecomment-127211641\n. Hmm, it might.</p>\n</blockquote>\n</blockquote>\n<p>Should we just declare this as version 2.0 given it\u2019s a big refactor? I\u2019m okay with that.\n- tofumatt</p>\n<p>On Mon, Aug 3, 2015 at 1:12 PM, Veeck notifications@github.com wrote:</p>\n<blockquote>\n<p>Since ampersand-sync-localforage uses \n    \"localforage\": \"^1.0.0\",</p>\n<h2>will it also try to get v1.3 then and break again?</h2>\n<p>Reply to this email directly or view it on GitHub:\nhttps://github.com/mozilla/localForage/issues/413#issuecomment-127213806\n. Yeah. Means I might delay the release a few days and go through anything else I might want to change in a big version bump. :-)\n- tofumatt</p>\n</blockquote>\n<p>On Mon, Aug 3, 2015 at 1:15 PM, Veeck notifications@github.com wrote:</p>\n<blockquote>\n<h2>Sounds like a good idea since other users of ampersand-sync-localforage might be surprised too :-)</h2>\n<p>Reply to this email directly or view it on GitHub:\nhttps://github.com/mozilla/localForage/issues/413#issuecomment-127215417\n. It is likely related. Could you provide a test case/example (I know it\u2019s hard to do with binary files/big data)? We test for this in WebSQL (we download a JPEG and compare it) and it seems to work fine. https://github.com/mozilla/localForage/blob/master/test/test.datatypes.js#L322\n- tofumatt</p>\n</blockquote>\n<p>On Tue, Aug 4, 2015 at 1:54 PM, lucretiu notifications@github.com wrote:</p>\n<blockquote>\n<p>Hello!\nI'm having an issue with storing file objects in WebSQL. \nI am pulling file objects from a file input element and then store them in a table using localForage. In a browser that fully supports IndexedDB, like Chrome desktop / Firefox desktop / IE11 desktop, retrieving a File object works as expected i.e. I am able to use the retrieved File object in my code. In a browser that reverts back to WebSQL, like Safari mobile, the value I get upon iterating through the objects in the DB is an Object type that doesn't contain references to the File object. \nDoes this have anything to do with the fact that objects are serialised when inserted in a WebSQL table and deserialised upon retrieval? Is there any way I can bypass that and, more importantly, is that recommended?\nThank you,</p>\n<h2>Ovidiu</h2>\n<p>Reply to this email directly or view it on GitHub:\nhttps://github.com/mozilla/localForage/issues/414\n. My first instinct is that I\u2019m not sure we support the actual <code>File</code> type.</p>\n</blockquote>\n<p>Confirmed here: http://mozilla.github.io/localForage/#setitem</p>\n<p>Looks like you can\u2019t store a File object directly, though if it\u2019s working everywhere but WebSQL (that\u2019s probably not exactly intended, but it\u2019s cool!), I\u2019d happily accept a patch for WebSQL/localStorage so File works everywhere.\n- tofumatt</p>\n<p>On Tue, Aug 4, 2015 at 3:41 PM, lucretiu notifications@github.com wrote:</p>\n<blockquote>\n<p>Hey @tofumatt , thanks for your quick reply!\nI made a fiddle that explains what I'm trying to achieve: https://jsfiddle.net/wL01bxvu/3/\nThe thing is that I need to store an object of type File, not the contents of the file specifically. I'm doing this because I just need a pointer for that file, so I can read it at a later time (with checking for existence and all that jazz, of course). \nPutting a blob of the file in the database and afterwards reading it could work for me, but I don't want the mobile browser to ask the user for a quota increase if the user chooses 50 files using the image picker. If I store only the File object, the database size stays low and the user doesn't get prompted.\nPlease let me know if the fiddle is clear enough. Or if I'm doing any obvious rookie mistakes :)</p>\n<h2>Thank you!</h2>\n<p>Reply to this email directly or view it on GitHub:\nhttps://github.com/mozilla/localForage/issues/414#issuecomment-127636232\n. Interesting.</p>\n</blockquote>\n<p>I would gladly accept a patch with passing tests for that. :smile: \n. Sweeeeet!</p>\n<p>This means the test is using the same build that anyone else using browserify would use now, right? :+1: \n. Hi there! What is the reason you closed the issue? If there's a problem with the docs that led to this bug, please let me know!\n- tofumatt</p>\n<p>On Mon, Aug 10, 2015 at 6:06 PM, Jason Tanner notifications@github.com\nwrote:</p>\n<blockquote>\n<h2>Closed #416.</h2>\n<p>Reply to this email directly or view it on GitHub:\nhttps://github.com/mozilla/localForage/issues/416#event-378220368\n. No worries. Don't feel shy about filing other issues, and thanks for using the library! :-)\n- tofumatt</p>\n</blockquote>\n<p>On Mon, Aug 10, 2015 at 6:23 PM, Jason Tanner notifications@github.com\nwrote:</p>\n<blockquote>\n<p>It was an error on my part. It\u2019s fixed now. Sorry for the trouble.</p>\n<blockquote>\n<p>On Aug 10, 2015, at 1:22 PM, Matthew Riley MacPherson notifications@github.com wrote:</p>\n<p>Hi there! What is the reason you closed the issue? If there's a problem with the docs that led to this bug, please let me know!\n- tofumatt</p>\n<p>On Mon, Aug 10, 2015 at 6:06 PM, Jason Tanner notifications@github.com\nwrote:</p>\n<blockquote>\n<h2>Closed #416.</h2>\n<p>Reply to this email directly or view it on GitHub:\nhttps://github.com/mozilla/localForage/issues/416#event-378220368\n\u2014\nReply to this email directly or view it on GitHub https://github.com/mozilla/localForage/issues/416#issuecomment-129534822.</p>\n</blockquote>\n<hr />\n<p>Reply to this email directly or view it on GitHub:\nhttps://github.com/mozilla/localForage/issues/416#issuecomment-129535861\n. Keep being on holiday everyone, I like fast builds! ^_^\n. What does that look like? Just:</p>\n</blockquote>\n</blockquote>\n<h3>Webpack Users</h3>\n<p>Be sure to require localForage as <code>require('script!localforage')</code> right now?\n. I can check it out this weekend and see if I can release a 1.2 patch, should be doable. I'll be on holiday next week but I'm sure I can get to this before Monday. Sorry for the delay!\n- tofumatt</p>\n<p>On Thu, Aug 27, 2015 at 8:26 PM, Jon Koon notifications@github.com\nwrote:</p>\n<blockquote>\n<h2>Any chance we can get this patch published to npm?</h2>\n<p>Reply to this email directly or view it on GitHub:\nhttps://github.com/mozilla/localForage/pull/417#issuecomment-135514532\n. Thanks! (Was it really that simple, haha?)</p>\n</blockquote>\n<p>Would you be able to write a test for this?\n. Oh, nice. Okay, I'm just coming home from the gym. I can do that test in a few hours tops.\n- tofumatt</p>\n<p>On Thu, Aug 13, 2015 at 4:45 PM, Thodoris Greasidis\nnotifications@github.com wrote:</p>\n<blockquote>\n<h2><a href=\"https://github.com/mozilla/localForage/blob/3257d192e47d553f789fe62007f3e6d46aa4b04b/test/test.api.js#L529-L541\">This is the test I was talking about</a>.</h2>\n<p>Reply to this email directly or view it on GitHub:\nhttps://github.com/mozilla/localForage/pull/418#issuecomment-130734143\n. It isn't needed in that test (it might not even be needed in the other ones actually, as localForage should always stick to its own namespace and not need to clean out ALL of localStorage).</p>\n</blockquote>\n<p>Our tests are pretty similar, thanks for sharing. As you see: it's more about checking to make sure \"out-of-bounds\" items <em>don't</em> get returned than checking for what is returned.</p>\n<p>Thanks!\n. You're right, though that's a separate issue. I'll check into that...\n. fwiw, looks like that\u2019s an error in the docs. I will fix it and push that now. Thanks for catching it!\n- tofumatt</p>\n<p>On Thu, Aug 13, 2015 at 8:45 PM, af7 notifications@github.com wrote:</p>\n<blockquote>\n<p>Also, in your website docs, you call the argument of the <code>successCallback</code> as <code>result</code> but you use it as <code>error</code> on the test.\nThis is what you have on the Docs...</p>\n<p><code>// Exit the iteration early:\nlocalforage.iterate(function(value, key, iterationNumber) {\n    if (iterationNumber &lt; 3) {\n        console.log([key, value]);\n    } else {\n        return [key, value];\n    }\n}, function(result) {\n    console.log('Iteration has completed, last iterated pair:');\n    console.log(result);\n});</code></p>\n<p>...and this is what you use on the Test:</p>\n<p><code>}, function(err) {\n     if (!err) {</code></p>\n<hr />\n<p>Reply to this email directly or view it on GitHub:\nhttps://github.com/mozilla/localForage/pull/419#issuecomment-130818052\n. Turns out localStorage.clear() is run in the <code>beforeEach</code> block. That clear() in the actual method might even be legacy.</p>\n</blockquote>\n<p>Thanks for reporting. :-)\n- tofumatt</p>\n<p>On Thu, Aug 13, 2015 at 8:50 PM, af7 notifications@github.com wrote:</p>\n<blockquote>\n<p>Concerning the <code>localStorage.clear();</code> question, I thought that this is done so that the <strong>next</strong> test starts with a clean localStorage environment (which is needed for proper testing). This is why I though it is kind of necessary.\nIt seems that tests that need this <em>clean</em> environment could start with <code>localStorage.clear();</code>, so that you do not have to do this at the end of each test. In any case, you know much better what needs to be done (or not).</p>\n<h2>Thanks again!</h2>\n<p>Reply to this email directly or view it on GitHub:\nhttps://github.com/mozilla/localForage/pull/419#issuecomment-130819547\n. Oops, can't believe I missed this, thanks!</p>\n</blockquote>\n<p>That's true, but it's just supposed to be a quick example... you could make it more accurate, but it would make it longer. For completeness, you'd want:</p>\n<p>``` javascript</p>\n<p>// Exit the iteration early:\nlocalforage.iterate(function(value, key, iterationNumber) {\n    if (iterationNumber &lt; 3) {\n        console.log([key, value]);\n    } else {\n        return [key, value];\n    }\n}, function(err, result) {\n    if (!err) {\n        if (result) {\n            console.log('Iteration has completed, last iterated pair:');\n            console.log(result);\n        } else {\n            console.log('Iteration has completed.');\n        }\n    }\n});\n```\n. There\u2019s actually an issue open for that (#260), but we haven\u2019t got around to fixing it yet. I\u2019m guessing multiple instances are a lesser-used feature, as for many the appeal of localForage is it\u2019s plug-and-play nature.</p>\n<p>Still, would love to have those docs too!\n- tofumatt</p>\n<p>On Sun, Aug 16, 2015 at 3:31 PM, af7 notifications@github.com wrote:</p>\n<blockquote>\n<p>Not sure if this needs a different ticket, I also use the <code>createInstance</code> in order to create 2 different localforage databases (thus I had the bug with <code>iterate</code>).</p>\n<h2>So, maybe you would like to document <code>createInstance</code> too (it is not documented).</h2>\n<p>Reply to this email directly or view it on GitHub:\nhttps://github.com/mozilla/localForage/issues/423#issuecomment-131559252\n. That\u2019s what we want too, right? The amount of stuff we currently expose to the global namespace is high; I\u2019d happily expose the serializer, etc. via window.localforage.serializer, etc.</p>\n</blockquote>\n<p>That looks good to me.\n- tofumatt</p>\n<p>On Sun, Aug 16, 2015 at 7:51 PM, Thodoris Greasidis\nnotifications@github.com wrote:</p>\n<blockquote>\n<p>Just pushed a proof-of-concept <a href=\"https://github.com/thgreasi/localForage/tree/browserify-dist-build\">branch that uses <strong>browserify</strong> to create the dist files</a>.\n<code>package.json</code> points everyone (no matter if they are using browserify or webpack) to the same <code>main</code> dist file.</p>\n<h2>The only namespace exposed on <code>window</code> is <code>localforage</code>.</h2>\n<p>Reply to this email directly or view it on GitHub:\nhttps://github.com/mozilla/localForage/issues/424#issuecomment-131599884\n. I don\u2019t think there\u2019s any huge preference. I know Mozilla Payments (who I\u2019m working on projects with these days) use Webpack, so in the future I might be able to support it more when I learn more of it.</p>\n</blockquote>\n<p>But I don\u2019t have any existing preference. And there\u2019s no clear preference in Mozilla.\n- tofumatt</p>\n<p>On Mon, Aug 17, 2015 at 9:33 PM, Thodoris Greasidis\nnotifications@github.com wrote:</p>\n<blockquote>\n<h2>Is any of these two preferred/have wised use by Mozilla projects? Do you have any preference?</h2>\n<p>Reply to this email directly or view it on GitHub:\nhttps://github.com/mozilla/localForage/issues/424#issuecomment-131953825\n. Webpack generates the smallest code, appears to have the smallest and clearest UMD code, and doesn't require using <code>derequire</code> or anything else.</p>\n</blockquote>\n<p>I'd say <strong>Webpack the clear winner for how we bundle things up</strong>. Bonus: it's what we're using on https://github.com/mozilla/payments-ui/, so I can probably help maintain the code once I've been working on payments a bit more :smile: \n. PS: This is fucking amazing :+1: :grin: :grin: :grin: \n. For what it's worth your code will work; localForage handles serialisation.</p>\n<p>That's a great point. The example is pretty silly. :+1: from me as well; if you send that as a PR we'll happily merge it.\n. Haha, no worries. Not too particular about that kind of thing.\n. It doesn't hurt to be in this section, so I'm fine with it there. I'm surprised we <em>didn't</em> already have a test for it, but maybe I'm confused as to what the issue was in the first place. Could you provide some example code and how it behaves differently with your patch? I think I get what it does but I'm not quite sure!\n. Are the tests all passing on your machine? PhantomJS is timing out on Travis, but I can't tell if that's a Travis bug or not :smile: \n. Yeah, I really appreciate you battle-testing the localStorage components more\u2014not many people seem to use it there but I agree, these are important!</p>\n<p>I\u2019m a bit swamped now and we are trying to make sure our browserify/webpack users get a good release in 1.3 so we might be delayed a bit, but know that I\u2019m working to get this stuff out ASAP. It should be this week, if not I\u2019ll back port these fixes into the pre-es6 branch 1.2.7 is based on :-)\n- tofumatt</p>\n<p>On Tue, Aug 18, 2015 at 12:33 AM, af7 notifications@github.com wrote:</p>\n<blockquote>\n<p>I believe that this fix is definitely needed along with the other one (that made it to the master). This way the localStorage driver is consistent with the other 2 drivers (no gaps in iterationNumber).</p>\n<h2>I hope you can add this and release the 1.3 version to NPM, as these fixes in localStorage driver makes it possible for us to use localForage. Thanks!</h2>\n<p>Reply to this email directly or view it on GitHub:\nhttps://github.com/mozilla/localForage/pull/428#issuecomment-131993889\n. If the tests are timing out, it could have been a Travis issue (I restarted them), but I will run them locally as well. Our tests should pass without <code>--force</code>, so if it's timing out it's due to a test problem.</p>\n</blockquote>\n<p>I can give this more time soon but it's a bit of a hectic week. Sorry I couldn't get to it before.</p>\n<p>Are the tests running locally? We do have support for Windows, so the tests should run on your machine if you have node installed. If you can't run the tests I would encourage you to file bugs about that so we can fix it, as that's quite important!\n. I just ran the tests locally and was treated to an error. I'll give it a quick look now but I only have about thirty minutes tonight :frowning: \n. Okay, I just looked through this branch, but you've misunderstood the test I believe. There are three items set in localStorage, two of which are set by localForage:</p>\n<p>``` js\n        it('should iterate() through only its own keys/values', function(done) {\n            localStorage.setItem('local', 'forage');\n            localforage.setItem('office', 'Initech').then(function() {\n                // ###### Note that we set a second item here ######\n                return localforage.setItem('name', 'Bob');\n            }).then(function() {\n                // Loop through all key/value pairs; local: 'forage' set\n                // manually should not be returned.\n                var numberOfItems = 0;\n                localforage.iterate(function(value, key, iterationNumber) {\n                    // Returning defined value will break the cycle.\n                    expect(key).to.not.be('local');\n                    expect(value).to.not.be('forage');\n                    numberOfItems++;\n                }, function(err) {\n                    if (!err) {\n                        // While there are 3 items in localStorage,\n                        // only two items were set using localForage.\n                        expect(numberOfItems).to.be(2);</p>\n<pre><code>                    done();\n                }\n            });\n        });\n    });\n</code></pre>\n<p>```</p>\n<p>The docs in the comments were bad, however, and previously referred to only one thing being set by localForage. I've fixed that up in master and closed this issue here.\n. Surprised the test ran before without this; looks right to me. Thanks for catching it.\n. Closed in #431.\n. Oh, great catch! Wonder if they are just outdated examples or I messed up :wink: </p>\n<p>:+1: \n. Should we just expose <code>serializer</code> as a Promise that returns the serializer like <code>getDriver()</code> will return a Promise that resolves to the driver name? We could allow people to overwrite the serializer with an API or just expose it as a variable (<code>localforage.serializer = function() { /// custom serializer here }</code>).</p>\n<p>Though, do people really ever want to overwrite the serializer? I dunno.\n. Oops, right. I'll check it out after lunch today.</p>\n<p>PS I'm on holiday (with actual time off! \ud83c\udf79) this week so expect responses to be slower than usual, but I'm just in Lisbon so not like I'll never be checking my email \ud83d\ude09\n- tofumatt</p>\n<p>On Mon, Aug 31, 2015 at 7:35 AM, Thodoris Greasidis\nnotifications@github.com wrote:</p>\n<blockquote>\n<h2>Any feedback on this? I have some branches ready (getDriver &amp; a workaround for #363) and waiting for this to be merged.</h2>\n<p>Reply to this email directly or view it on GitHub:\nhttps://github.com/mozilla/localForage/pull/432#issuecomment-136269529\n. (Sorry, I got sidetracked and I'm about to fly from AMS to LIS, but I'll review this tonight or tomorrow morning!)\n- tofumatt</p>\n</blockquote>\n<p>On Mon, Aug 31, 2015 at 10:55 AM, tofumatt tofumatt@mozilla.com wrote:</p>\n<blockquote>\n<p>Oops, right. I'll check it out after lunch today.\nPS I'm on holiday (with actual time off! \ud83c\udf79) this week so expect responses to be slower than usual, but I'm just in Lisbon so not like I'll never be checking my email \ud83d\ude09\n- tofumatt\n  On Mon, Aug 31, 2015 at 7:35 AM, Thodoris Greasidis\n  notifications@github.com wrote:</p>\n<blockquote>\n<h2>Any feedback on this? I have some branches ready (getDriver &amp; a workaround for #363) and waiting for this to be merged.</h2>\n<p>Reply to this email directly or view it on GitHub:\nhttps://github.com/mozilla/localForage/pull/432#issuecomment-136269529\n. @af7 We will definitely implement a <code>getSerializer</code> method, though it will be in a different PR :smile: \n. Sorry, I had a real vacation and couldn't get to this until now :scream: \n. Okay, all sorted now! I've merged this into 1.2 and release 1.2.9 with the fix.\n. Sorry, but what exactly is the use case that is failing for you using localStorage? Could you provide a code example? I added your tests without changing the localStorage driver in <code>src/drivers/localstorage.js</code> and the tests all passed.</p>\n</blockquote>\n</blockquote>\n<p>Do you think the <code>iterationNumber</code> isn't accurate? I don't undestand the need for these changes.\n. Okay, all sorted now! I've merged this into 1.2 and release 1.2.9 with the fix.</p>\n<p>I'll get this patch into master soon but I need to catch a flight first :wink: :airplane: \n. Sorry, I ended up taking a real vacation away from computers and this week has been busy. Finally merged into master, thanks so much for finding the bugs and these fixes/tests @af7, really appreciated! :+1: \n. That\u2019s awesome! If you think it\u2019s good feel free to merge @thgreasi. I\u2019m at a conf all day and don\u2019t have the chance to review much until tomorrow. :-)\n- tofumatt</p>\n<p>On Fri, Aug 28, 2015 at 7:11 AM, Thodoris Greasidis\nnotifications@github.com wrote:</p>\n<blockquote>\n<h2>:+1:</h2>\n<p>Reply to this email directly or view it on GitHub:\nhttps://github.com/mozilla/localForage/pull/437#issuecomment-135637790\n. Haha, no worries. :-)\n- tofumatt</p>\n</blockquote>\n<p>On Fri, Aug 28, 2015 at 11:49 AM, Thodoris Greasidis\nnotifications@github.com wrote:</p>\n<blockquote>\n<p>@tofumatt I will do my best, but it might take me longer than you to review\n:)\nIt's Friday and as always, extra work spawns at the office...\nOn Fri, Aug 28, 2015 at 11:44 AM Matthew Riley MacPherson <a href=\"&#109;&#97;&#105;&#108;&#116;&#111;&#58;&#10;&#110;&#111;&#116;&#105;&#102;&#105;&#99;&#97;&#116;&#105;&#111;&#110;&#115;&#64;&#103;&#105;&#116;&#104;&#117;&#98;&#46;&#99;&#111;&#109;\">&#10;&#110;&#111;&#116;&#105;&#102;&#105;&#99;&#97;&#116;&#105;&#111;&#110;&#115;&#64;&#103;&#105;&#116;&#104;&#117;&#98;&#46;&#99;&#111;&#109;</a> wrote:</p>\n<blockquote>\n<p>That\u2019s awesome! If you think it\u2019s good feel free to merge @thgreasi. I\u2019m\nat a conf all day and don\u2019t have the chance to review much until tomorrow.\n:-)\n- tofumatt</p>\n<p>On Fri, Aug 28, 2015 at 7:11 AM, Thodoris Greasidis\nnotifications@github.com wrote:</p>\n<blockquote>\n<h2>:+1:</h2>\n<p>Reply to this email directly or view it on GitHub:\nhttps://github.com/mozilla/localForage/pull/437#issuecomment-135637790</p>\n</blockquote>\n<p>\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/mozilla/localForage/pull/437#issuecomment-135684361.</p>\n<h2></h2>\n<p><em>Thodoris Greasidis</em>\nComputer, Networking &amp;</p>\n<h2>Communications Engineer</h2>\n<p>Reply to this email directly or view it on GitHub:\nhttps://github.com/mozilla/localForage/pull/437#issuecomment-135722700\n. I got a chance to look through, I'd say it's solid, just see my comment about the JS file being in the root directory.</p>\n</blockquote>\n</blockquote>\n<p>:+1: Nice work!\n. Cool, thanks all! I checked this one and it looks good; I'll look at the others now.\n. :+1: Great idea, would've never thought of it myself. Cheers!\n. Smart, this passes the tests and looks good. I'll release this today. :+1: \n. Looks good, I'm gonna add the CoffeeScript version of the docs then merge it in :+1: \n. It not passing the IndexedDB tests might be unrelated, as we don't have a key length test.</p>\n<p>Using 900-length keys seems... odd. We should support it if the spec does, of course! But I'm surprised that would come up :smile: </p>\n<p>I wonder what the actual limit of key length is? \ud83d\ude2e\n. Oh, that makes perfect sense then!</p>\n<p>Yeah I don\u2019t recall a max size either. I wonder if @nolanlawson ran into anything like this with PouchDB sizes.</p>\n<p>Anyway, I\u2019ll check into why this is\u2026 do you get the error if you use IndexedDB directly in IE 11? I suppose we should figure out if this is an error in localForage or a browser vendor bug...\n- tofumatt</p>\n<p>On Tue, Sep 8, 2015 at 1:06 AM, Bill Schaller notifications@github.com\nwrote:</p>\n<blockquote>\n<p>I actually use localforage as a client-side cache for certain data - to generate the keys, I hash the request data (sometimes rather large) and store the hash as a cache key for the returned data. In debug mode, I don't hash the request data. I instead use the entire stringified request data as the key so it's easier to inspect the cache. \nYou can see how that would trigger the bug :wink:</p>\n<h2>I (quickly) looked through the spec a bit and couldn't find any mention of a maximum key size.</h2>\n<p>Reply to this email directly or view it on GitHub:\nhttps://github.com/mozilla/localForage/issues/444#issuecomment-138394351\n. Sweet, good to know. I'll make a note to do that. :-)</p>\n</blockquote>\n<p>Thanks Nolan!\n- tofumatt</p>\n<p>On Tue, Sep 8, 2015 at 1:21 PM, Nolan Lawson notifications@github.com\nwrote:</p>\n<blockquote>\n<h2>Nope, I've never run into this bug before, but if it really is a MS bug, it would be worthwhile to file it on them. :) I've found they're pretty responsive at http://connect.microsoft.com/, although sadly none of the bugs I've filed have been fixed yet (not even in Edge...). :/</h2>\n<p>Reply to this email directly or view it on GitHub:\nhttps://github.com/mozilla/localForage/issues/444#issuecomment-138539171\n. I've reported the bug for now, but I'm open to a workaround in the future. https://connect.microsoft.com/IE/feedbackdetail/view/1767952/indexeddb-does-not-accept-keys-longer-than-888-characters\n. https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/5333188/\n. Can you include the JS you are running that's causing the error and also your server's CSP rules? This looks like a CSP directive violation, perhaps you're trying to store or retrieve data you aren't allowed to interact with in JS.</p>\n</blockquote>\n<p>I can see the blob was retrieved successfully as the error happens inside the onsuccess handler.\n- tofumatt</p>\n<p>On Sat, Sep 5, 2015 at 5:03 AM, siddo420 notifications@github.com wrote:</p>\n<blockquote>\n<p>I am getting the following error message in Chrome</p>\n<p><code>Refused to connect to 'blob:http%3A//192.168.1.9%3A8080/3547f91f-dd73-48a4-9bf1-233c183c22ed' because it violates the following Content Security Policy directive: \"connect-src 'self' wss://192.168.1.13 https://192.168.1.13\".\n_createBlob.type @ localforage.js:1036\n_blobAjax @ localforage.js:1034\ntxn.oncomplete.getBlobReq.onsuccess @ localforage.js:1087</code></p>\n<h2>JS and HTML are served from http://192.168.1.9:8080</h2>\n<p>Reply to this email directly or view it on GitHub:\nhttps://github.com/mozilla/localForage/issues/445\n. @coolaj86 Sadly, it may be the way around your CSP issue. localForage creates a Blob object from serialised data inside a WebSQL/localStorage database when not using IndexedDB, and retrieves the blob directly from IndexedDB otherwise.</p>\n</blockquote>\n<p>Your CSP rules will need to allow interacting with local Blob objects. I don't think there's a way to limit this beyond \"all blobs from self\". I am no security expert, but I would think trusting local Blobs would be okay from a security standpoint.</p>\n<p>If you allow the Blob from your URL (<code>connect-src 'self' blob: https://conf.utahjs.com/</code> or whatnot? I'm not sure on the syntax, sorry) does it work?</p>\n<p>If so, I won't consider this an error; it's outside the scope of localForage. :disappointed: \n. Okay then, closing this for now; don't think it's a localForage issue.\n. I think waiting for the promise to resolve is okay, and is very much like the rest of our other APIs. I'm for that one. I'm not sure when we would need to load a serialiser async but it does let us do that as well.\n- tofumatt</p>\n<p>On Tue, Sep 8, 2015 at 7:44 AM, Thodoris Greasidis\nnotifications@github.com wrote:</p>\n<blockquote>\n<p>This is to gather the discussion that appeared in #412 &amp; #432 (@tofumatt, @af7 )\nMy two suggestions:\n- <code>localforage.serializer</code> returning the actual serializer object\n- <code>localforage.getSerializer()</code> returning a promise\n  ## <code>localforage.serializer</code> returning the actual serializer object\n  Pros:\n- use es6 static imports\n  Cons:\n- load the serializer even in cases that it's not needed (eg: IndexedDB with unbundled RequireJS, do we even support it any more?)\n  This will make even more sense if we move <a href=\"https://github.com/mozilla/localForage/blob/9d2b28b5f508f2dd38e4a133ddd5ca9baaea7209/src/drivers/indexeddb.js#L17-L168\">the IndexedDB driver's blob serialization code</a> into the main serializer.\n  Sample implementation:</p>\n<p><code>js\n// on the top of localforage.js, ouside the IIFE\nimport serializer from 'utils/serializer'\n// near the end of localforage.js inside the IIFE\nlocalForage.serializer = serializer;\nexport default localForage;</code></p>\n<h2><code>localforage.getSerializer()</code> returning a promise</h2>\n<p>Pros:\n- We don't import anything if not really required/requested\n- That's the way the drivers are currently implemented and we could refactor them to use the exposed method, instead of doing a <code>System.import</code> in their own\n  Cons:\n- The developer will have to wait for a promise to resolve</p>\n<p><code>js\n// add a method to the LocalForage class\ngetSerializer() {\n  return System.import('./utils/serializer');\n}</code></p>\n<hr />\n<p>Reply to this email directly or view it on GitHub:\nhttps://github.com/mozilla/localForage/issues/446\n. Looks good, sorry for the late review.</p>\n</blockquote>\n<p>Busy week at Mozilla, doing some changing around of teams (exciting new projects ahead!) :smile: \n. Sorry this took me ages; I'm very behind on localForage work.</p>\n<p>All good; I'll tweak that variable name and merge it in now :+1: \n. Looks like this was resolved, should we add anything into the docs for other Typescript users?\n. I'd certainly prefer the first one; second one reads like a hack (and I'm guessing a bug in Visual Studio's code parsing).\n. Waiting on https://github.com/borisyankov/DefinitelyTyped/pull/5805 to be merged before this works, apparently :smile: \n. Thanks for the ping; all merged!\n. Wow, this is <em>awesome</em>! :+1: \n. Other than the question of using <code>catch()</code> as @thgreasi mentioned here: https://github.com/mozilla/localForage/pull/452#discussion_r40494119</p>\n<p>this is awesome and gets a :+1: r+ from me.</p>\n<p>Once we figure out what needs to me done there we can merge it. I have a few nitpicks about variable names and stuff but we can fix those after merge; this PR is great :smile: </p>\n<p>Thanks @sebweaver!\n. Looks like you're missing the code, though it's possible we do have IE 11 bugs (though we shouldn't).\n. Tested in IE 11 Karma on Sauce Labs recently and tests passed. Closing this one.\n. I'd like to try and release it this weekend; I've recently switched teams at Mozilla and have a bit less time for localForage during the week, but I try to spend the weekends on it.</p>\n<p>This should change once things calm down, but for now I would <em>love</em> to have 1.3 out this weekend!\n. Oh right!</p>\n<p>Don't worry, I won't publish anything until I'm sure (and double check with you! \ud83d\ude00)\n- tofumatt</p>\n<blockquote>\n<p>On 2 Oct 2015, at 05:04, Thodoris Greasidis notifications@github.com wrote:</p>\n<p>Wait!!!!!!\nWe also need to add getSerializer()!!!</p>\n<p>\u2014\nReply to this email directly or view it on GitHub.\n. Since <code>getSerializer()</code> was added and things seem good I pushed 1.3; this way we're back to publishing the version on master, yay!</p>\n</blockquote>\n<p>This bug should be fixed now, sorry it took ages. :tired_face: \n. What version of localForage are you using? Any chance you\u2019re using Private Browsing mode? I think we fixed bugs with it but I haven\u2019t pushed the version yet; I should do that soon.\n- tofumatt</p>\n<p>On 1 October 2015 at 16:29:58, alexstanbury (notifications@github.com) wrote:</p>\n<p>I'm loading the promises polyfilled version (localforage.js) but I am getting an error when using on this browser. The error is as follows:</p>\n<p>TypeError: 'undefined' is not an object (evaluating 'adbinfo.db.transaction')</p>\n<p>Any ideas?</p>\n<p>\u2014\nReply to this email directly or view it on GitHub.\n. Glad to hear it's working, though yeah that sounds like a super-weird bug.</p>\n<p>Let me know if you run into anything reproducible or into this issue again. I'll close this for now, but don't be shy about issues.</p>\n<p>Thanks for you detailed response!\n. Looks good to me. I'll merge this in and wait for #452 then try to get 1.3 out :smile: \n. Looking to do it soon, I think possibly tonight. Sorry for the lateness on this!\n. I prefer not pointing people to a minified version of the code; if you\u2019re using webpack/etc. you likely have your own step for that in production, and this way on the off-chance you want to trace an error through the localforage codebase you can do so easily.</p>\n<p>The minified version is really for people who want to download the library as a zip and use it. I\u2019ve even given some thought to not including it at all, but that\u2019s a separate discussion.\n. Sorry, could you clarify your issue?</p>\n<p>Are you saying sometimes Chrome is using websql by default instead of indexeddb?</p>\n<p>Are you using private browsing mode?\n- tofumatt (Sent from mobile)</p>\n<p>On 3 Oct 2015, 23:26 +0100, Wudong Liunotifications@github.com, wrote:</p>\n<blockquote>\n<p>Why localForage sometime use WebQL, sometime use Chrome</p>\n<p>\u2014\nReply to this email directly orview it on GitHub(https://github.com/mozilla/localForage/issues/458).\n. Cool. Thanks for letting me know.\n. What version of localForage are you using (and where did you install it from)?</p>\n</blockquote>\n<p>Sadly the docs in master might be a bit ahead of what\u2019s in bower/NPM; I do need to push out a new tag but haven\u2019t been quite able to get to it yet. Should be this week though.</p>\n<p>If you install from master does it work?\n. If you could try master and see if that works it would be great.</p>\n<p>If it does I'll aim to push a new version out today for you. Thanks.\n- tofumatt (Sent from mobile)</p>\n<blockquote>\n<p>On 8 Oct 2015, at 11:34, Jagatheesan Jack notifications@github.com wrote:</p>\n<p>Hi @tofumatt , I am using v1.2.10. I downloaded using bower. bower install localforage</p>\n<p>I have not tried the master version yet.</p>\n<p>\u2014\nReply to this email directly or view it on GitHub.\n. Pushed 1.3 to NPM and GitHub (bower), so this should be fixed. 690c73df5e2263b171a23e440d285a642cdc6af4\n. Chrome on iOS should be working as it is in Safari, as they share the same engine.</p>\n</blockquote>\n<p>What version of Chrome, iOS, and localForage are you using?</p>\n<p>It should use WebSQL regardless of versions; iOS IndexedDB support is broken.\n. I don\u2019t; I suspect again it\u2019s the same as Safari (which is just under 5MB without prompting I think), but I\u2019m not sure. How much are you trying to store?\n. Sure thing. Thanks for the info; if you do see specific errors traced back to localForage please file them here; if you eventually find your error and can share it here that\u2019d be great. Maybe it\u2019s a doc problem; if so I\u2019d be happy to fix it.</p>\n<p>Cheers!\n. Still a bit of a WIP but it's close. Zuul seems neat; I'll give it a look!\n. This ends up drastically changing our build process. I was able to avoid grunt entirely, but I'm not sure the built localForage is as bulletproof.</p>\n<p>There are also issues running certain tests in karma. I'm thinking I might do things like browserify/webpack tests in PhantomJS still, but do the unit tests in karma.</p>\n<p>I think I have a way to include the ServiceWorker tests but I haven't finished it yet.</p>\n<p>@thgreasi could you take a quick look and tell me if this is okay, aside from the missing tests which I'll add back before moving ahead? I mostly want to know if this simplified way of building is okay (or if I should move some conf over).\n. Good point! I\u2019ll fix this up now :-)\n. Do browserify users still need <a href=\"https://github.com/mozilla/localForage/blob/master/package.json#L57\">these plugins and transformers</a> or can I remove that too?\n. Just to be clear, you're including <code>dist/localforage.js</code>?</p>\n<p>I would have thought to include localforage you'd want:</p>\n<p><code>js\nimport { default as ldb } from 'localforage';</code></p>\n<p>Maybe I'm confused; sorry not super skilled with webpack yet :worried: \n. Oh, did that solve the problem?\n. Because localForage includes its own polyfill it might be a bit confused.</p>\n<p>I wonder if importing src/localforage.js instead might work if you\u2019re defining your own webpack config? If it does I can update the docs to say so\u2026</p>\n<p>If you try that let me know. Sorry about the error!\n. If you\u2019re importing localforage in your own webpack setup, I think you need to use babel\u2019s \u201cloose\u201d config option to allow imports/exports in places other than top-level (which localforage currently uses).</p>\n<p>Maybe we can get away from this in the future.\n. You can now use <code>localforage.getSerializer()</code>, which returns a Promise that resolves with the serializer:</p>\n<p><code>js\nlocalforage.getSerializer()\n  .then(function(serializer) {\n    console.log(serializer);\n  });</code>\n. Yes, instance are self-contained by design; there is no way to share data between tables/dbs in the same instance.\n. I'm good to merge this, but is there a test we could add to make sure it stays working?\n. Hmm, good point. And yeah, using this everywhere for consistency is a good\ncall. I can eventually do that if no one gets to it, but otherwise once\nthat's done we should merge it :-)\n- tofumatt\n. Right on. Thanks! :+1: </p>\n<p>Any chance you could add a simple test for this (override array or something?) so we can make sure we don't undo it?\n. I won\u2019t get hung up on it then; it passes our tests and is a good fix!\n. No plans but I would be open to any patch. It would need to look through all keys in localStorage but indexeddb and websql queries could be fast.</p>\n<p>If you wanted to write a PR that would be great! :-)\n- tofumatt (Sent from mobile)</p>\n<blockquote>\n<p>On 30 Oct 2015, at 12:18, siddo420 notifications@github.com wrote:</p>\n<p>my users may eventually end up having millions of records (possibly on sqlite) and I am not sure how efficient it'd be to traverse through all keys just to find some of them.</p>\n<p>\u2014\nReply to this email directly or view it on GitHub.\n. Right now this seems pretty out-of-scope for localForage. An entire indexing solution would be heavyweight and not in the spirit of the simplistic nature of localForage.</p>\n</blockquote>\n<p>I think I'll close this for now, but a PR would be welcome in the future.\n. Any chance you\u2019re using private browsing mode? You\u2019re right; it shouldn\u2019t be a problem for these browsers.\n. That\u2019s where a lack of available drivers would end up, but it shouldn\u2019t happen under normal use.</p>\n<p>You\u2019re only seeing this for a few users, right? Any chance you could share your initialisation code?</p>\n<p>What happens when you test it in these browsers yourself?\n. You shouldn\u2019t need to do any explicit configuration unless you only want to be using localStorage. localForage by default picks the best driver available (for Safari that\u2019s still WebSQL, as Safari\u2019s IndexedDB implementation has some bugs right now).</p>\n<p>Still, doesn\u2019t explain why browsers are not finding the issue.</p>\n<p>Again: private browsing mode really messes with localForage. If there aren\u2019t clear steps to reproduce I\u2019ll have to close this, but let me know if you find steps to reproduce.</p>\n<p>I\u2019ve seen a fair number of people just always browse privately, so it could be that. :O\n. Closed in #477.\n. Looks good; can you add a test for this?\n. Aha, cool!</p>\n<p>That makes sense, awesome. I'll review this quickly in the evening then, but it looks good. Should be able to merge it tonight, sorry for the back-and-forth! :smile: </p>\n<p>Thanks! :smile: \n. Oops, good catch! Thank you :smile: \n. Sorry for the late response. Did you see this message the first time you used the default DB as well? I don't think the name should affect whether or not a message appears, but if you already created a DB in the past with the default name you might not be getting prompts.\n. Good to know.</p>\n<p>If we can reproduce this from a fresh browser state, feel free to reopen, but I'll close this for now.\n. Right on.</p>\n<p>Not opposed to adding it at all; I should localForage is 27kb minified including the Promises library; 21kb without. It\u2019s not that lightweight a library, though I always say 21kb is still nothing compared to most people\u2019s hero images ;-)</p>\n<p>Anyway, If someone can grab the gzipped numbers that\u2019d be cool, but even writing \u201c27kb minified\u201d is probably good.\n. Hah, this is adorable. :+1: \n. Hey there,</p>\n<p>Sorry I didn't get to this until now: are you still finding issues with localForage in Firefox? If you're using the default settings, things should be working without issues.</p>\n<p>Could you include the error you get?\n. Haven't heard anything back on this and my karma tests are passing on recent versions of Firefox, so I'm closing this. Interesting thought on <code>file://</code> in StackOverflow though neat that works now ^_^</p>\n<p>Feel free to re-open if your issue wasn't solved or there was a fix you found \ud83d\ude04 \n. Name will change the database name in IndexedDB/WebSQL and the storeName changes the storeName in IndexedDB and the table in WebSQL. It\u2019s a bit of the IndexedDB underpinnings being exposed, I\u2019ll admit.\n. Either will provide you with some separation of where your data is stored, but using different databases arguably isolates them more.</p>\n<p>The use case ultimately is namespacing and data isolation, like with any database.\n. Which browser(s) were you using? Seems related to #449.\n. FYI, private browsing in general has a lot of problems in localForage, because of how browsers handle localStorage/IndexedDB/WebSQL in private browsing mode.</p>\n<p>Essentially localForage doesn't work well in incognito mode.\n. Fixed in https://github.com/mozilla/localForage/releases/tag/1.3.1\n. Sweet! Thanks :+1: \n. Sounds good.</p>\n<p>I\u2019m okay with the in-memory driver as a general fallback for no cookies\u2014it also might fix our private browsing problems, not sure though.\n. localForage should work in iOS Cordova apps, so there is either a bug in localforage or a mistake elsewhere.</p>\n<p>Would you be able to share the code that's acting up? Which version of iOS and localforage are you using?\n- tofumatt</p>\n<blockquote>\n<p>On 18 Dec 2015, at 00:21, coicoronado notifications@github.com wrote:</p>\n<p>Hi\nThis isn't a bug but more like a question, after i played around with this library and try to implement it as a functionality to let a user autologin i need to set and store some information and then ask to the backend if this is ok and continue were the user left, but it seems that if i just remove the app from the background all the information is lost</p>\n<p>So my question is, every time i remove my app from the background i lose the data that was saved? or i'm just doing something wrong</p>\n<p>\u2014\nReply to this email directly or view it on GitHub.\n. Thanks for mentioning the plugin, looks like this is closed \ud83d\ude04 \n. The PR has been merged but I need to release a new version of localForage. I'll do that today and report back when it's available.\n. Fixed and released in 7ca5b0bb64c2f07b109779622e2a018842c43aa0 and on npm. Cheers!\n. All the tests pass\u2014do you mean getItem/setItem aren\u2019t EVER resolving or just in this specific error case?\n. I should be able to release it today, probably in a few hours :)\n. I don't know really anything about typescript, but why declare it as a constant?\n. If there's no clear reason to do it, let's not make it a constant without understanding the ramifications. But after that fix I'd say we're good to merge, thanks :-)\n- tofumatt</p>\n<p>On 10 Jan 2016, at 14:38, Sebastien notifications@github.com wrote:</p>\n<p>I feels safer to me, although I'm no TypeScript guru either ;-))</p>\n<p>\u2014\nReply to this email directly or view it on GitHub.\n. Okay, that makes sense.</p>\n</blockquote>\n<p>The readme is busy enough so it's okay, but I'll keep it in mind when I get the chance to fix up the docs (an idea I have for the future).\n- tofumatt (Sent from mobile)</p>\n<blockquote>\n<p>On 10 Jan 2016, at 14:50, Sebastien notifications@github.com wrote:</p>\n<p>let and const have been supported in TypeScript since version 1.5 and can be transpiled down to ES3 &amp; ES5, thus logically this should not have any negative effects.</p>\n<p>AFAIK, using let and const is the way to go; var should never be used anymore and here, the choice between let and const depends on whether you want something mutable or not; for an import I'd say that const is probably a safer recommendation.</p>\n<p>If you want maybe I can add this explanation to the readme?</p>\n<p>\u2014\nReply to this email directly or view it on GitHub.\n. Existing versions ship with old Babel support, so I would say we should look forward and release a new version (1.4) with Babel 6 support.\n- tofumatt</p>\n<p>On 11 Jan 2016, at 08:19, Thodoris Greasidis notifications@github.com wrote:</p>\n<p>First of all using the src files is not officially supported by this repo\nas far as I know but we are not trying to make it impossible either.\nSince we can't support two different versions of babel at the same time\n@tofumatt should have to decide whether we still provide a .babelrc file in\nthe distributed packages or not.</p>\n<p>On Mon, Jan 11, 2016, 09:45 Ron Waldon notifications@github.com wrote:</p>\n<blockquote>\n<p>The problem with removing the .babelrc file, is that babel will refuse to\ntouch any of the files in the package. Which is fine for babel-using\nconsumers who do import localforage from 'localforage';, but will break\nany consumers that do (for example) import localforage from\n'localforage/src/localforage';.</p>\n<p>This is only an interim problem, as you say, because:\n1. babel 6 support is coming soon, anyway, and\n2. ES2015 source files within an npm package will eventually be able\n   to run on V8 / Node.js without babel</p>\n<p>\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/mozilla/localForage/issues/496#issuecomment-170454497\n.</p>\n<h2></h2>\n<p><em>Thodoris Greasidis</em>\nComputer, Networking &amp;\nCommunications Engineer\n\u2014\nReply to this email directly or view it on GitHub.\n. I'm fine with removing it, if it's deprecated and causing issues.\n- tofumatt</p>\n</blockquote>\n<p>On 12 Feb 2016, at 17:05, Thodoris Greasidis notifications@github.com wrote:</p>\n<p>@tofumatt it seems that componentjs has been deprecated. Since it's the only test case that fails in my babel6 branch, what are your thoughts about removing them? If you agree, I could probably open a PR during the weekend.</p>\n<p>\u2014\nReply to this email directly or view it on GitHub.\n. I can't quite tell if the existing tests cover this change or if we should add another to make sure we don't lose this feature and it's working as intended.</p>\n</blockquote>\n<p>But :+1: \n. Cool, okay, that makes sense :+1: wfm\n. I know @thgreasi said he was working on a fix for this, so an interim fix might be a bit hasty.</p>\n<p>How does this affect current users exactly? I don't understand the bit about users using <code>package.json</code>'s <code>main</code>--will they have to change configs?</p>\n<p>In that case it's just a big enough/breaking change that will require a bump to <code>1.4</code>.\n. Ah, cool. Sorry I misunderstood.</p>\n<p>Looks good then, I\u2019ll merge this in a few ^_^\n. Actually, this isn't what we'd want, as if we wanted to start using ES6 for tests (which I personally would), it wouldn't be covered. Other projects I work on keep the <code>.babelrc</code> in the root of the project, that seems correct. So this seems quite temporary, I'm torn :-/\n. Looks like the issue this meant to fix has been resolved, this commit is out of date, and I think we want to close this.</p>\n<p>Thanks for the patch but I think this is fixed now? Please let me know if I'm wrong to close.\n. Fair enough, reverting it!\n. Looks good to me! Thanks for your work on this :+1: \n. Whoa, what an interesting bug report. Thanks, might require some breaking changes to fix?\n. Odd that it goes into an infinite loop when we explicitly choose localStorage, which should then just reject again and then stop on failure, right?\n. It would be handy to include a test that checks for this if we decide to merge it in so we don't revert it in the future. I saw you had an example in #511 -- could you add that to the tests for this PR?\n. Looks good, I may try to squash a few of these commits before I merge and it\u2019s getting late here, so I might not get to this until tomorrow, but rest assured I\u2019m on it! Thanks!\n. Merged in #517 with some tidying.\n. Merged in #517 with some tidying.\n. Just released version 1.3.3 so this should be fixed.\n. We tried doing feature detection here, but unfortunately Safari would pass the feature test but fail in actual usage; the only feature test for this would be quite convoluted/slow and we didn\u2019t want to implement it.</p>\n<p>I suppose the fix would be whitelisting QT but that seems like quite the rabbit hole. It would be an okay test in my mind though if it broke nothing else, at least for now.\n. A custom driver that forced IndexedDB could work, yeah. I'd think QT usage is niche enough requiring a custom driver is okay.\n. You can using <code>localforage.getDriver();</code>, actually. I don't think it's an advertised API with docs yet though we should add them. If you wanted the IndexedDB driver, for instance, you could do:</p>\n<p><code>js\nlocalforage.getDriver(localforage.INDEXEDDB)\n  .then(function(driver) {\n    console.log(driver);\n  });</code></p>\n<p>The contents of <code>driver</code> will be the original driver.\n. Merged in #517 with some tidying.\n. https://www.npmjs.com/package/localforage shows the latest version at 1.3.3, published a few weeks ago. Try checking again and if you can't install a new version feel free to re-open the issue.\n. Thanks for the report! Strikes me as a chrome bug on first look, as it doesn't happen anywhere else. So I'd guess it's a regression for them, but keep me posted, especially if we need to build a workaround. \n. Interesting. I guess their limit might just be a bit too aggressive then.</p>\n<p>I've voted on the issue and subscribed to it. Thanks for filing the report. \ud83d\udc4d\n- tofumatt</p>\n<blockquote>\n<p>On 5 Feb 2016, at 21:16, Eric Eslinger notifications@github.com wrote:</p>\n<p>Chromium issue - seems they did it on purpose.</p>\n<p>https://code.google.com/p/chromium/issues/detail?id=584768</p>\n<p>\u2014\nReply to this email directly or view it on GitHub.\n. Yay! They've <a href=\"https://code.google.com/p/chromium/issues/detail?id=584768\">removed the throttle</a> so next Canary should be fixed.\n. Thanks for the issue! Sadly, I don't think this is an issue with localForage.</p>\n</blockquote>\n<p>Including <code>Function</code> like that isn't something we can include as it's likely to violate CSP rules and isn't a good practice.</p>\n<p>We also don't focus on node support. If Angular Universal is meant to be drop-in I would file an issue with them.\n. Sorry, but it sounds like there is a problem you can't consistency reproduce, from the sound of your issue. It is hard to help fix the problem when we don't know exactly what it is :-)</p>\n<p>Any chance you could find the exact steps to reproduce your error and any error messages that go with it? Thanks!\n- tofumatt</p>\n<blockquote>\n<p>On 9 Feb 2016, at 18:41, Aniruddh Bagalkot (BK) notifications@github.com wrote:</p>\n<p>I am using local forage 1.2.0 with angular-localforage 1.2.2 as part of an ionic app. Lately we are noticing some weird behaviour on iOS 8, 9, 9.1 that the storage is getting cleared after sometime. This does not happen on all iOS devices. The only common pattern is that these phones are little low in storage space ~ 500 MB.</p>\n<p>Why could this be happening?</p>\n<p>Its not happening on any of the android phones. But only with some iOS devices.</p>\n<p>\u2014\nReply to this email directly or view it on GitHub.\n. Yup. At that point not sure there's much we can do about it, I don't think\nthis is within the scope of localforage. The OS will do this to native apps\nas well, at least to a degree.\n- tofumatt\n. I'm for all that, we should do it here.\n- tofumatt</p>\n<p>On 21 Feb 2016, at 03:00, Thodoris Greasidis notifications@github.com wrote:</p>\n<p>We could also remove:</p>\n<p>the commented code in Gruntfile.js\nthe file with the test cases\nthe npm package from package.json\n\u2014\nReply to this email directly or view it on GitHub.\n. Sweet, this looks great. Thanks!\n. Cool, thanks! I'll cut a release later, right now I'm on my phone and technically on holiday so I'm being lazy ;-)\n. I'm off on holiday so I got to this late. Looks awesome; I'm gonna add the dist file and get this merged! :+1: \n. Yeah, it should return a promise. Maybe the docs are out of date?\n- tofumatt\n. No worries! I'll check on the docs and fix them before I close this issue\n:-)\n- tofumatt\n. I would try removing the React state (it's really not data)\u2013I'd imagine there's some circular reference or something there that's affecting things.</p>\n</blockquote>\n<p>Otherwise this might be a case where you need to stringify your data before saving it.</p>\n<p>I'm going to close as array storage works but your data set doesn't; however if you find a fix to your issue let me know.</p>\n<p>I have created #556 because of this though: maybe we can show developers better errors when they run into this issue. \ud83d\udc4d \n. I've thought about the second point for awhile but never got to it. Agreed though, that's be awesome.</p>\n<p>First point is a good one. At the time I was really into CS but I'm less so now (especially with ES6), so ditching them for callbacks/promises would be cool.</p>\n<p>I'm all for this, and will get to it myself at some point if no one else takes this.</p>\n<p>Fixing #192 at the same time would be smart.. I think moving to a Promises-only API for v2 is worth pursuing. I\u2019ve been away on holiday for the past few weeks ignoring work but I\u2019m back now. I have a branch with refactored karma tests that only test promises and it\u2019s looking good. I\u2019ll push it soon (I\u2019m in Korea for my night; European afternoon) :-)</p>\n<ul>\n<li>Matt (Sent from mobile)</li>\n</ul>\n<blockquote>\n<p>On 28 May 2018, at 03:26, Thodoris Greasidis <a href=\"&#109;&#97;&#105;&#108;&#116;&#111;&#58;&#110;&#111;&#116;&#105;&#102;&#105;&#99;&#97;&#116;&#105;&#111;&#110;&#115;&#64;&#103;&#105;&#116;&#104;&#117;&#98;&#46;&#99;&#111;&#109;\">&#110;&#111;&#116;&#105;&#102;&#105;&#99;&#97;&#116;&#105;&#111;&#110;&#115;&#64;&#103;&#105;&#116;&#104;&#117;&#98;&#46;&#99;&#111;&#109;</a> wrote:</p>\n<p>@tofumatt should we pursue this for v2.0 as mentioned earlier?</p>\n<p>\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. I've been away on holiday but I'll do it soon. I just landed in London from\nBeijing, so I'll probably look at this tomorrow if I'm being totally honest\n:-)\n- tofumatt\n. I'm having some issues building the docs but it is a priority to get this online. I just came back from holidays, have a work week in Berlin this week, and am in the early stages of buying a house. <em>Slightly</em> busy, but I am on it!\n. Oh, but still, this sounds like low-hanging fruit for me. I'll check it\nout! (I'm off to China for a few days then flying home to the UK, but I can\nmaybe look this weekend)\n- tofumatt\n. Closed in #538. \ud83d\udc4d \n. I haven't chimed in on this yet but it's a :+1: idea from me. I've been doing ES6 over the past eight months and it's been incredible so I'm for the move. The shaved bytes are cool too.</p>\n</blockquote>\n<p>It's a clear reminder than I need to update localForage's infrastructure though, with the old PhantomJS, etc.\n. Looking through this it seems solid. I'm gonna spend the next week working solely on localForage--one of my aims is to tidy up the tests and fix some weird fails.</p>\n<p>I'm cool with merging this, it seems like a much cleaner <code>src/</code> with a bit of win in terms of filesize.</p>\n<p>@thgreasi Any opposition to seeing this merged over the weekend? If you're cool with it I'm good.</p>\n<p>Also @nolanlawson OMG thank you this is pretty amazing. You rock.\n. So reading everything back, I think I'm happy to ditch the nopromises version. It's a small difference but a big usability/documentation/maintenance headache.\n. Err, but, it is a breaking change, and I'd actually say we should do that as:\n- a separate PR\n- some kind of version bump</p>\n<p>So I think #553 is the way to go for now, with a reversal of the contents of 5f13325584196357977333a0281c8e36f3a53198 if we want to do a single build in the future.\n. setDriver will attempt to load drivers in the order specified. In your code, the cookieStorage custom driver is specified AFTER localStorage, so it will try to load localStorage first.\n. @plaxdan It used to be used when loading localForage asynchronously (eg via require) but doesn't have to be used anymore. That's a separate issue, but arguably it should be at least prefixed to be <code>_ready</code> as it shouldn't be needed by most developers.\n. Ah, true. It's a less-common usage I'm guessing but we should add docs and\ntreat it as still public then!\n- Matthew Riley MacPherson | tofumatt.com</p>\n<p>On 4 October 2016 at 06:21:33, Thodoris Greasidis (notifications@github.com)\nwrote:</p>\n<blockquote>\n<p>A use case that ready() is still useful is when you need to let localForage\nsettle down on the driver that's going to be used and possibly reach to\nthat choice. On the other hand, we could use an other method that actually\nreaches the database, like length(), for that purpose.</p>\n<h2></h2>\n<p><em>Thodoris Greasidis</em></p>\n<p>\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/localForage/localForage/issues/540#issuecomment-251298445,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAFi9xJG9i01YqC5xckEGnZdVWhzo__nks5qweJdgaJpZM4HuFo3\n.\n. Cool, sounds like this is worth noting in some docs.\n. Yeah, looks like every browser at least supports IndexedDB in web workers now. We only support IndexedDB in Safari 10.1+, but it should work. I think we can close this now.. For localforage, it simply creates keys that namesplace the days, but they\naren't really different stores technically speaking. They aren't visible to\neach other in localForage though, if that's what you mean.</p>\n</blockquote>\n<p>Regarding max number of stores... I don't know, but I would love to!\nBrowser vendors might specify such things in their docs but I don't think\nanyone has run into a problem before.</p>\n<p>If you do find any, please feel free to reopen this issue; we will either\nfind a workaround or document the limits, and see about increasing them as\nwell. Thanks!\n- tofumatt\n. Thanks!\n. Sorry for my late response here.</p>\n<p>Are you still experiencing this issue? I tested recent versions of Chrome with a fair bit of data and couldn't reproduce. Can you build a test case for me to try?\n. This sounds like something we would need to build a \"localForage packager\" for; some kind of site that built you a custom version of localForage with only the drivers you wanted.</p>\n<p>Omitting promises/callbacks would be more complex I'd think, I'm not sure worth the effort... but if done sanely I'm open to both these ideas. :+1: \n. Shoot, you\u2019re right. I started moving out of my flat and other stuff and became crazy distracted. But I scheduled a week this month to dedicate solely to localForage, so I\u2019ll have that in soon!\n. Keep in mind that localForage's primary aim is to be a drop-in, easy-to-use library. The API is <em>very</em> basic and not powerful. It's easier to use than IndexedDB, but by design it has a lot of code that's beyond just a simple IDB wrapper with Promises, which it sounds like what you're after.</p>\n<p>Removing the node-style callbacks was discussed but we're not there yet. When callbacks <em>are</em> a thing of the past we'll remove them, but we aren't there yet (sadly).</p>\n<p>We do include a no-promises library, fwiw.\n. &gt;  The indexedDBshim library is in itself twice the size of localForage with all adapters.</p>\n<p>I think that speaks to localForage's reasonably small size \ud83d\ude04 </p>\n<p>Thinking this over again, I don't think we need to refactor and modularise anymore for max a few kB of possibly unused drivers. localForage is about broad browser support and ease-of-use, but could easily be adapted to be used without all drivers.</p>\n<p>I think localForage is slim enough, especially after #538 landed. This level of modularisation seems overkill when there are more pressing issues regarding performance to explore (we still need to land batch writes).\n. We've been using <a href=\"https://lernajs.io\">lerna</a> in @WordPress/gutenberg (https://github.com/WordPress/gutenberg/blob/master/lerna.json) as well to manage multiple packages in one repo. Maybe we just start publishing drivers as npm packages and see about letting people build there own by importing their own packages \ud83e\udd14. It\u2019s possible lerna is overkill, yeah. I guess since the drivers are specialised to localForage anyway there\u2019s not much use in publishing them on their own.</p>\n<p>Exposing the separate imports would be good though, agreed.</p>\n<ul>\n<li>Matt (Sent from mobile)</li>\n</ul>\n<blockquote>\n<p>On 4 Nov 2018, at 18:19, Luke Pighetti <a href=\"&#109;&#97;&#105;&#108;&#116;&#111;&#58;&#110;&#111;&#116;&#105;&#102;&#105;&#99;&#97;&#116;&#105;&#111;&#110;&#115;&#64;&#103;&#105;&#116;&#104;&#117;&#98;&#46;&#99;&#111;&#109;\">&#110;&#111;&#116;&#105;&#102;&#105;&#99;&#97;&#116;&#105;&#111;&#110;&#115;&#64;&#103;&#105;&#116;&#104;&#117;&#98;&#46;&#99;&#111;&#109;</a> wrote:</p>\n<p>I have definitely found that the ability to import specific modules at a lower level is very useful. For example, I can import import { BehaviorSubject } from \"rxjs\"; or import { BehaviorSubject } from \"rxjs/internal/BehaviorSubject\";</p>\n<p>I have to admit I have never tested the difference on package size, but assuming it can be reduced with this type of method I think its fine.</p>\n<p>But I am only one opinion and I'm pretty new to web tech so, take it with a grain of salt.</p>\n<p>\u2014\nYou are receiving this because you modified the open/close state.\nReply to this email directly, view it on GitHub, or mute the thread.\n. You've created the same issue across several repositories with no context. Integration with angular is possibly to my knowledge, but would require a separate library to integrate localForage and Angular. We like to an Angular 1 library in the docs.\n. Wow, this is actually quite cool. I agree, we shouldn't reject this on principle if it's not too intrusive to the code. I'll have a review soon.\n- tofumatt</p>\n<p>On 19 Apr 2016, at 01:56, Skeen notifications@github.com wrote:</p>\n<p>Hello,</p>\n<p>I am aware that this pull request will be rejected, according to the;\n'Features localForage will reject' --&gt; node.js support.</p>\n<p>Yet I'm proposing this pull request for others to find, when they require node\nsupport in the future. I created this since I needed node support for two \nreasons, namely;</p>\n<p>Running the same code on both client and server.</p>\n<p>This enables rapid prototyping by maxizing code reusability.\nIt helps out new programmers, as they only need to learn one new library.\nAs the library has a simple key-value interface, it's easy to eventually port code to redis or another more optimal backend key-value storage.\nTesting browser code locally (outside of the headless browser configuration).</p>\n<p>One case where this makes sense, is by the above, i.e. testing local code, which utilizes this library outside of the browser context.\nAnother case can be when resources or time is limited, testing directly in node is usually faster than within a headless browser environment.\nNevertheless; this pull request addresses: #345 and #57.</p>\n<p>\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly or view it on GitHub\n. Sorry, I merged some changes to the <code>Gruntfile.js</code> in #552 and it made this not merge cleanly.\n. Odd, I'll check this out. I use Dev Edition of Firefox (though on Mac OS)\nand it's fine.</p>\n</blockquote>\n<p>The old theme was built with ruby and hard to maintain/out-of-date. This\nnew doc system allows us to avoid a build step, but I'll see what JS is\ncausing the issue. Thanks for the bug report!\n- tofumatt</p>\n<p>On 26 April 2016 at 10:23:21, Maxime (notifications@github.com) wrote:</p>\n<blockquote>\n<p>The new documentation http://mozilla.github.io/localForage/ theme of\nlocalForage pushed live several days ago is unusable, at least on Firefox\n/w Windows.</p>\n<p>When scrolling it is flickering and 25% of my CPU is eated. My entire\nFirefox is slowed down. Even when hovering the navigation on the left.</p>\n<p>The previous theme was perfect, why this change?</p>\n<p>\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly or view it on GitHub\nhttps://github.com/mozilla/localForage/issues/554\n. Very cool, though I wonder about including this. Users should expect that localForage saves their data permanently, and if it can't then it throws an error/rejects a Promise and they can deal with that. Using the memory backend, we won't alert the user that there's a problem saving data permanently (even if that problem is private browsing mode). Alerting the developer that we couldn't save data, and then allowing them to bubble that info up to the user could be useful.</p>\n</blockquote>\n<p>On the other hand, it makes using localForage way more annoying--your patch makes the experience of just saying \"Private Browsing means no permanent data\" work as intended for all. And developers can always do their own checks for Private Browsing mode if that matters.</p>\n<p>Side note: looks like adding the driver causes these <a href=\"https://travis-ci.org/mozilla/localForage/builds/127197507#L594\">\"no driver available\" tests to fail</a>, which makes sense. We'll also want to add tests for the in-memory driver.</p>\n<p>I've come around to this idea I think.\n. Cool! Yeah, let\u2019s plan to iterate on this a bit when you come back. Go enjoy your holiday \ud83d\ude09\ud83d\udc4d\ud83c\udffb\n. Just a thought: when fallback to memory.js happens, we could include a console warning saying the dev is likely in private browsing mode or drivers aren't available.\n. Oh, cool. That\u2019s a smart idea. \ud83d\udc4d\ud83c\udffb\n. Sorry, but localForage is an async-only library; the drivers underneath are async as is its entire API. This allows it to be very flexible.</p>\n<p>If you'd like to avoid callbacks I'd suggest the Promises API which feels more linear even though it's async.\n. That's totally nicer, even if it's a UA check, thanks \ud83d\udc4d \n. Released a new version (1.4.1), should be on npm once Travis builds it (should take &lt; 30mins max).</p>\n<p>Thanks for reminding me to release a new one \ud83d\ude04 \n. wfm\n. Sounds good to me! I'm for it! \ud83d\udc4d\ud83c\udffb\n- tofumatt</p>\n<p>On 15 May 2016 at 15:22:57, Nolan Lawson (notifications@github.com) wrote:</p>\n<blockquote>\n<p>Currently, you can store a lot of data in LocalForage sorted by key, but\nyou can't easily \"slice\" the data to get a subset of those items. The only\nway is to call iterate(), which currently reads the entire database into\nmemory and therefore is not super efficient.</p>\n<p>My proposal: enhance the iterate() API by allowing users to do:</p>\n<p>iterate(startkey, endkey, iteratorCallback, successCallback)</p>\n<p>If neither startkey/endkey are specified, then you get the old behavior.\nIf only one is specified, you get startkey (similar to\nArray.prototype.slice()). To keep things simple, both of them should be\ninclusive, and then users can get exclusive behavior by just skipping those\nvalues in their iteratorCallback function.</p>\n<p>What do you all think? If I have some spare cycles and if this is a\npopular proposal, I could try to take a crack at it.</p>\n<p>\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly or view it on GitHub\nhttps://github.com/mozilla/localForage/issues/565\n. But that file IS a pre-built JS file. This isn't an error, and I think it\nmight be possible to include src/localforage.js instead. But this isn't\nsomething we can fix as dist/localforage.js IS a built file.\n- tofumatt</p>\n</blockquote>\n<p>On 17 May 2016 at 20:55:29, HarryHH (notifications@github.com) wrote:</p>\n<blockquote>\n<p>WARNING in ./~/localforage/dist/localforage.js\nCritical dependencies:\n7:484-491 This seems to be a pre-built javascript file. Though this is\npossible, it's not recommended. Try to require the original source to get\nbette\nr results.\n@ ./~/localforage/dist/localforage.js 7:484-491</p>\n<p>Can anyone fix that please?</p>\n<p>\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly or view it on GitHub\nhttps://github.com/mozilla/localForage/issues/567\n. Hah, good catch, cheers! \ud83d\udc4d\ud83c\udffb\n. Good idea, r+wc, feel free to merge after the typo is fixed. \ud83d\udc4d \n. Sounds like a feature request.</p>\n</blockquote>\n<p>Not opposed to it, I would accept a pull request for this feature as long as it would be performant and not too much code.\n. Thanks for reporting this; I've updated it. Cheers \ud83d\udc4d \n. Yes, this is normal, because <code>dist/localforage.js</code> <em>is</em> a pre-built JavaScript file. This is fine and can be ignored.\n. You could include <code>src/localforage.js</code> instead of <code>dist/localforage.js</code>,\nbut that\u2019s not our recommended path. :-)\n. Looks like these tests don't pass because of an <code>npm install</code> error. Could that be fixed up please? \ud83d\ude04 \n. Totally \ud83d\udc4d\ud83c\udffb \u2014 see #559 \ud83d\ude00\n. I\u2019m for that too! I\u2019ve done some of that in my karma branch, but it\u2019s not\nready yet, so if you add it separately I\u2019m fine with that.\n. This has definitely bitrotted but know it's on our radar, hopefully for V2 but if not for V3. I'm aiming to do a lot of cleanup in the repo soon \ud83d\ude03 . If you <code>bower install localforage</code> it will install the version at this repository (https://github.com/mozilla/localForage).</p>\n<p>If you want to install their version, you'll need to <code>bower install xeriab/localForage</code>, I believe. But I'm not a bower expert; frankly I'm considering dropping support as <code>npm</code> seems to work just fine and bower is just kind of a pain \ud83d\ude04 \n. You're capitalising the \"f\" in <code>localForage</code> in the package name, but I only have <code>localforage</code> registered.</p>\n<p>That's incredibly silly/confusing of bower to allow that in my opinion (and a bit frustrating that @xeriab registered the caps one if he did intentionally, but I can't tell). I can't control that though.</p>\n<p>Please use, exactly: <code>bower install localforage</code> and change the <code>F</code> to an <code>f</code> in your package.</p>\n<p><img width=\"497\" alt=\"screenshot 2016-06-27 11 52 24\" src=\"https://cloud.githubusercontent.com/assets/90871/16377410/dcc9bd6a-3c5d-11e6-82d7-a87b7ce60dd9.png\"></p>\n<p>vs</p>\n<p><img width=\"461\" alt=\"screenshot 2016-06-27 11 55 02\" src=\"https://cloud.githubusercontent.com/assets/90871/16377437/0017f624-3c5e-11e6-8af2-8a5f2a75e4fd.png\">\n. Oh don\u2019t worry about it! I can totally understand how it happened.</p>\n<p>Agreed, it is silly. Don\u2019t be shy about filing future issues, thanks for\nbringing it to my attention at least so I know for the future :-)\n. Thanks a lot! No worries, and thanks very much for removing it, helps\nclarify things.</p>\n<p>Sorry to hear you were sick. Glad you're feeling better! :-)\n- Matthew Riley MacPherson | tofumatt.com</p>\n<p>On 3 July 2016 at 20:33:24, Xeriab Nabil (notifications@github.com) wrote:</p>\n<blockquote>\n<p>@tofumatt https://github.com/tofumatt I did removed the fork and bower\nwill no longer search for it!\nSorry again.</p>\n<p>\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/localForage/localForage/issues/583#issuecomment-230170967,\nor mute the thread\nhttps://github.com/notifications/unsubscribe/AAFi91Pkxabl2RPbBhbaz6nYE-yoLjAyks5qSA6EgaJpZM4I-8b5\n.\n. localForage should be able to be used inside a regular add-on, but because\nFirefox is moving away from SDK add-ons and toward WebExtensions, sadly we\nwon\u2019t be looking to fix this as it\u2019s soon-to-be-deprecated technology.\nSorry!\n. Yeah I\u2019ve been so busy but I think today I\u2019ll move localForage itself into the localForage group too.</p>\n</blockquote>\n<p>I\u2019ve also created a mailing list that I think will help us coordinate on any new features, etc.: https://groups.google.com/forum/#!forum/localforage. Please use it if people think it\u2019s useful!\n. Yeah, moving all is a good idea. I\u2019m gonna move the main one right now :-)\n. Update: transferred! \ud83d\ude04 \n. Hi there!</p>\n<p>This looks good but sadly it has merge conflicts with <code>master</code>. Could you rebase your changes against master and push again? Thanks!\n. You rock, thanks very much!\n. Looks good; it would be great if you could add a test for this, and you'll need to rebase again master. But thanks for the patch, I think we can merge it once you add a test, thanks!\n. I am extremely sorry this took so long to get to but I'm gonna fix the conflict and merge this in. Thank you.. Ah okay, I was gonna say I feel like this was fixed and was surprised it wasn't merged. I'll close this then, no worries.. Oh, good call. You should have admin rights on localForage but I\u2019ll check\nit out later if you can\u2019t get it working to both make sure you have full\naccess and enable it. :-)\n. This has been fixed \ud83d\ude04 \n. Thanks for this, I've known about a bit of it as I'm rewriting the tests to run better and fix some of these bugs, but it's good to have it written down somewhere. I'll make sure to fix everything listed here in #461.\n. Not sure what this gets us right now, what's the reason for this?</p>\n<p>In the future when we're running karma tests (#461) I'm sure we'll want this, but right now it will only make tests run slower with no benefit, right?\n. Looks good to me!\n. Vue seems like React components, you'll want to write some kind of wrapper for Vue. That's no t something localForage will be doing in the core library.</p>\n<p>You can look at other repos in this organisation to see wrappers for Backbone, Angular, etc to see how those work for inspiration \ud83d\ude00\n. That warning just means you're using a prebuilt repo, which localforage is.\nIt's nothing to worry about \ud83d\ude04\n- Matthew Riley MacPherson | tofumatt.com</p>\n<p>On 27 August 2016 at 13:37:02, Erin (notifications@github.com) wrote:</p>\n<blockquote>\n<p>After looking through lots of old tickets, I'm pretty confused about how\nI'm <em>supposed</em> to use localforage + webpack together. Using it without\nany special treatment <em>does</em> work, but I get this warning:</p>\n<p>$ make build\nnode_modules/.bin/webpack --debug\nHash: f7ecb9aab38b49b3370e\nVersion: webpack 1.13.2\nTime: 1851ms\n  Asset     Size  Chunks             Chunk Names\ntodo.js  1.35 MB       0  [emitted]  main\n   [0] multi main 40 bytes {0} [built]\n    + 513 hidden modules</p>\n<p>WARNING in ./~/localforage/dist/localforage.js\nCritical dependencies:\n7:484-491 This seems to be a pre-built javascript file. Though this is possible, it's not recommended. Try to require the original source to get better results.\n @ ./~/localforage/dist/localforage.js 7:484-491</p>\n<p>I'm using localforage 1.4.2 and webpack 1.13.2.</p>\n<p>\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/localForage/localForage/issues/599, or mute the\nthread\nhttps://github.com/notifications/unsubscribe-auth/AAFi9xBgAKQl7zcuEI4FPkGhQMdaGAruks5qkC9ugaJpZM4Jur7r\n.\n. Oops, I replied to this via email not seeing it was closed. Sorry for the noise.\n. Sounds fine to me, though I could certainly comment more if I saw a PR.</p>\n</blockquote>\n<p>But I assume it's just a file that goes in the root of the project? I'm just not a typescript user, so if it has to be maintained someone would need to document how to do that \ud83d\ude04 \n. Cool then, works for me!\n. @Elephant-Vessel Could you file a new issue to get the types added to the types repo and documentation on how to do that? I'm sure someone would take it on but I'm not familiar with the process so I don't really understand the procedure to get that done.. The local cache has a default limit in WebSQL. You can increase it with the\nconfig method but the default size prevents prompts from Safari asking the\nuser to allow storage.</p>\n<p>There is no way to inspect the current size used.\n- Matthew Riley MacPherson | tofumatt.com</p>\n<p>On 30 August 2016 at 04:01:36, shangliyang (notifications@github.com) wrote:</p>\n<blockquote>\n<p>question 1:\nsize : 4980736, // Size of database, in bytes. WebSQL-only for now.\nThe local cache can only save the size of the data? local cache have\nlimit.?</p>\n<p>question 2: How to calculate the size of the data that has been stored?</p>\n<p>\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/localForage/localForage/issues/601, or mute the\nthread\nhttps://github.com/notifications/unsubscribe-auth/AAFi90YYnMFZO9fpiA5IoZln1uweR626ks5qk50QgaJpZM4JwGbG\n.\n. Looks good to me!\n. I\u2019ve been extra busy the past week and will be probably until the end of\nthe month, but know I do plan to take a look at this, cheers!\n. Ah okay, we publish automatically when a new version is released but looks like I need to make one.</p>\n</blockquote>\n<p>I'll do it now and it should be about thirty minutes from now (maybe less). \ud83d\ude04 \n. Looks like 1.4.3 just landed on NPM. Thanks for filing the issue!\n. This is an issue with us assuming certain tools are globally installed. We\nshould be looking in node_modules/.bin/derequire</p>\n<p>The short-term fix is to npm install -g derequire, but we should change the\npath we check for the binary to fix this.\n. localForage's IndexedDB driver doesn't serialise the data to JSON before storing it; it directly stores the data you pass it into IndexedDB.</p>\n<p>So it seems you have some data that can't be cloned (objects referencing another maybe, etc.). If you want you can manually serialise and deserialise the data, but that means you <em>will</em> lose some of the data you're storing.</p>\n<p>What does the object you're trying to store look like?\n. Ah, okay, if the object contains a function it can't be stored inside a database as it can't save functions.</p>\n<p>You'll need to remove the function from the object you're trying to save before saving it. You can see the types of objects localForage can store here: https://localforage.github.io/localForage/#data-api-setitem\n. Looks good to me, like you said, let's ship it in the 1.5 release! \ud83d\udc4d \n. Looks good, but this upgrade introduces some new rules. Can you fix the rules and make sure to run <code>npm test</code> locally to make sure it passes? Thanks \ud83d\udc4d \n. I would fix the errors pointed out by the new rules, as I agree with them.</p>\n<p>In the case of the loop though, feel free to comment that rule out for that\nline if it\u2019s annoying to fix. I\u2019m not sure :-)\n. Sweet, that makes the code better too. Thanks! \ud83d\udc4d \n. Sounds good, but this doesn't pass the tests. Could you change the tests as well so they work without these global modules? Thanks! \ud83d\ude04 \n. Actually, I think we should wait on 2.0 for this change just because it could break things for certain people, but I'll get it merged soon.</p>\n<p>Should this wait for 2.0 or is it safe to merge now, @thgreasi?. Yeah. I'm partially assuming they'd have a build system or something anyway, I wish I had numbers on them but sadly I don't \ud83d\ude22 . &gt; So what do we do if we install using bower?</p>\n<p>Honestly bower support is something I think we've chatted about removing and I've certainly thought of removing soon. They lack stats like npm (see: https://github.com/bower/registry/issues/39) so I don't know how many people use it, but anecdotally npm usage amongst frontend developers seems to be the norm these days. I'd like our npm support to be better; I am less interested in bower.</p>\n<p>That said I would be okay waiting on 2.0 to merge this with a notice that 2.0 would drop bower support.. That\u2019s the problem though :-( (see the issue I linked to)</p>\n<p>There are no numbers on bower installs short of asking GitHub. I guess I can try it as a one-off though; if they\u2019re way high then you\u2019re right: I won\u2019t nix it (though it\u2019s annoying to maintain when we want to keep dist/ out of the repo).. localForage is <strong>not</strong> a drop-in replacement for localStorage. The <a href=\"https://localforage.github.io/localForage/\">localForage API is documented here</a>; it is not synchronous so you can't simply find+replace <code>localStorage</code> with <code>localforage</code>.</p>\n<p>You also can't access keys as properties on localForage (<code>localforage.unit</code> in your example will not work). You would need to do:</p>\n<p><code>js\nlocalforage.get('unit')\n  .then(function(value) {\n    console.log(value);\n  });</code>\n. Thank you for the report and really sorry it took me so long to address this.</p>\n<p>I'm a bit swamped until mid-December with Mozilla add-ons stuff so I won't be able to check this out until then myself. Thanks for the detailed report; should make it easier to patch. \ud83d\udc4d . I'm sorry, we've been really busy with a new add-ons frontend project and it's still eating up a lot of my time for side projects. I don't yet know when I'll be able to look at this; if someone else could patch it I could probably more quickly review it than write the code myself, but I will try to check it as soon as I can if no one else can look! Sorry!. You aren't returning the localForage <code>getItem</code> call or passing a callback to it, so your function should return undefined.</p>\n<p>localForage uses an async API, so if you want to wrap it, you'd need to return and handle a Promise. See: https://localforage.github.io/localForage/#data-api-getitem\n. There's an existing issue open for this, but we have not implemented it yet: #104.\n. This is good though a breaking change. That said, I think we should be strict about accepting arguments, so this works for me.</p>\n<p>We'll need to note that this is breaking.</p>\n<p>Thanks!. We decided to throw an error when no storage method was found some time ago rather than wait until a <code>setItem</code> or like call was made so developers could know earlier what was wrong and also to keep the errors closer to where they happen.</p>\n<p>I think in this case you'll want to use <code>localforage.ready().then(regularCode).catch(errorHandler)</code> to check that it's ready or wrap your localForage calls to check if there's a storage method available. <code>localForage</code> alerts users when there is no storage method available but you can catch this error.</p>\n<p>If that doesn't work please open a new issue and we'll see what's up and how to fix it.. I don't exactly follow, but it sounds like the issue is you create a database, store data, and then after some time localForage is defaulting to localStorage instead of IndexedDB.</p>\n<p>If you could supply some code to reproduce it that would be great, I've not heard of anything like this before.. No, you won't be able to access data saved offline between domains. You'll need to save the data online somewhere and sync it across the two clients; all offline storage is domain-specific.. Yeah, I now agree. At the time when we started localForage Promises support was a bit spotty but now I think we can remove the polyfill.. 1. Yeah I was thinking remove it entirely? I guess we could put it in just the dist file though, fair enough. <a href=\"http://caniuse.com/#feat=promises\">Browser support</a> seems good enough.\n2. I like that\n3. Totally, we are already using ES6, right?. Agreed; moved to v2 milestone. \ud83d\udc4d . Haha fair enough actually, I guess we can leave it out for now. \ud83d\udc4d\ud83c\udffb</p>\n<ul>\n<li>Matthew Riley MacPherson | tofumatt.com</li>\n</ul>\n<p>On 17 December 2016 at 09:28:32, Thodoris Greasidis (\nnotifications@github.com) wrote:</p>\n<blockquote>\n<h2><em>@thgreasi</em> commented on this pull request.</h2>\n<p>In src/localforage.js\n<a href=\"https://github.com/localForage/localForage/pull/633\">https://github.com/localForage/localForage/pull/633</a>:</p>\n<blockquote>\n<p>@@ -116,7 +116,7 @@ class LocalForage {\n         this._dbInfo = null;</p>\n</blockquote>\n<pre><code>     this._wrapLibraryMethodsWithReady();\n</code></pre>\n<ul>\n<li>this.setDriver(this._config.driver);</li>\n<li>this.setDriver(this._config.driver).catch(() =&gt; {});</li>\n</ul>\n<p>PS: I feel that logging even if a developer defines a custom driver for\nhis environment (eg memory storage) he wouldn't be able to do anything\nabout a log that appears when importing localforage. Maybe we are saving\nthem from hours of discussions with QA guys, trying to convince them that\nthis log is totally fine to appear \ud83d\ude04 (I'm thinking a friend of mine right\nnow who is in QA).</p>\n<p>\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\n<a href=\"https://github.com/localForage/localForage/pull/633\">https://github.com/localForage/localForage/pull/633</a>, or mute the thread\n<a href=\"https://github.com/notifications/unsubscribe-auth/AAFi94qJL9uS5ahGP6isgVCLB73d_8Pfks5rI6tAgaJpZM4LPg8N\">https://github.com/notifications/unsubscribe-auth/AAFi94qJL9uS5ahGP6isgVCLB73d_8Pfks5rI6tAgaJpZM4LPg8N</a>\n.</p>\n<p>. @jasan-s I don't think that's related to this pull request. Could you please file a new issue?. Returning it with a <code>driver</code> if passed seems to make sense to me, I think you're right that it's not breaking but shouldn't silence an error.</p>\n</blockquote>\n<p>If there's an error from <code>setDriver</code> and we return that promise it should expose the <code>setDriver</code> error, right? If so that works, otherwise maybe return it but do a <code>catch()</code> in there as well.. We do support custom drivers, so someone could write a driver that used\nthat storage engine as the back end. If persistent storage became a\nstandard across browsers and the driver was good we could see about\nintegrating it into the core library, but our custom driver API should be\nenough for now.</p>\n<ul>\n<li>Matthew Riley MacPherson | tofumatt.com</li>\n</ul>\n<p>On 18 December 2016 at 10:09:40, Jan Michael Alonzo (\nnotifications@github.com) wrote:</p>\n<blockquote>\n<p>Chrome 55 supports the Persistent Storage API\n<a href=\"https://developers.google.com/web/updates/2016/06/persistent-storage\">https://developers.google.com/web/updates/2016/06/persistent-storage</a>.\nI'm wondering if that's something this project can support as well?</p>\n<p>Thanks</p>\n<p>\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\n<a href=\"https://github.com/localForage/localForage/issues/635\">https://github.com/localForage/localForage/issues/635</a>, or mute the\nthread\n<a href=\"https://github.com/notifications/unsubscribe-auth/AAFi9_Np89IJzB6GkVymJDthOlFX0yOzks5rJQZkgaJpZM4LQF8g\">https://github.com/notifications/unsubscribe-auth/AAFi9_Np89IJzB6GkVymJDthOlFX0yOzks5rJQZkgaJpZM4LQF8g</a>\n.</p>\n<p>. I guess this fixes up a lot of our promise things, should we release 1.5 now to solve them for folks?. Sounds good, or at this point either the 23 or whenever works for them!</p>\n</blockquote>\n<p>I'll be around and can make one, not too many holiday plans \ud83d\ude04 . You can use the <code>config()</code> method to configure localForage: https://localforage.github.io/localForage/#settings-api-config</p>\n<p>That said, that setting is only used in WebSQL; indexedDB databases will grow as used and will eventually ask for more space depending on the browser, so if you want to avoid the error you might need to do some data cleanup manually.. I agree, sorry about that.</p>\n<p>I'm a bit slow to respond as I'm actually off work this week but I'll check this out in the future; I've at least reopened the issue \ud83d\udc4d . We could definitely accept either a PR like this or throw an error with empty names (my preference). Agree that it's a breaking change, but in this case I would say in the short term using empty values for configs is not a great idea, though our docs could be better at explicitly stating this.</p>\n<p>If you wanted to update the docs that would be great, @NullIsNot0, if you have time. Thanks for filing this though!. Sweet! I\u2019ll have a look at a lot of this stuff soon, just a bit swamped\nwith add-ons stuff right now but I have all the LF queued up for the\nweekend :-)\n. I'm just going through our open PRs right now and merging anything I think should be in <code>1.5</code>.. I can't think of anything in particular, so I'll update this issue once I'm done checking. I think <code>dropInstance</code> might be a better fit for 1.6 if it's not trivial, which it sounds like it's not.. We\u2019d need to keep track of the names of the DBs, which I think right now we don\u2019t. I could certainly see us storing said info in a _localForage DB (or wherever we store \u201chidden\u201d data already in IndexedDB feature tests we run at first).</p>\n<p>I\u2019m open to the feature, but we\u2019d need to add info about which DBs are in use.</p>\n<p>. Oh, good catch. Really I should move that repo into this organisation. I'll do that instead, but thanks for pointing this out!. While this bug makes me more likely to include an in-memory fallback, it\nalso seems like a browser bug we should file. I\u2019ll check into that.</p>\n<p>I used to worry about not erroring when we aren\u2019t successfully storing the\ndata, but I guess in this case we aren\u2019t either way. We should definitely\nhave prominent logging when in-memory is used, but I think this increases\nusability and is a good idea.\n. &gt; Also, Webpack is very popular. It's odd for a library to demand that users add a special exception their configs when nearly every other library just works.</p>\n<p>I totally agree; it's something we have to work on and are planning to tackle in future releases \ud83d\udc4d </p>\n<p>It started because localForage used to only be supported when run as a built file, but now works with <code>src/localforage.js</code>. I think updating the <code>main</code> file in the package should actually help a lot.. Agreed, sounds good \ud83d\udc4d\ud83c\udffb\n. I can test them, but if it's working for PouchDB I think it should work for us.. Cool, thanks! I don't know much about the TS stuff so appreciate the help \ud83d\ude04 . Wow, thanks for keeping on this. I know it's been ages but I still do have my eye on it \ud83d\ude13. Sorry, yes, I really meant to but have been really distracted with other work, kitchen remodelling, etc.. My hope is I'll have a look Friday, this weekend, or Monday at the latest. Sorry! \ud83d\ude13 . I'm really sorry but I have been renovating my kitchen in my spare time for the past month or so and it's meant really limited time for other projects. I meant to get to this earlier and I know I'm quite behind on it. \ud83d\ude22</p>\n<p>It's a busy time with work at the day job too (we are close to shipping the new WordPress editor and are spending a lot of time fixing bugs).</p>\n<p>I'll try my best to prioritise this next time I have a few hours to spend on localForage, it's just been a really busy time and most of my efforts have been on my kitchen, as I miss eating things that aren't soup and grocery store sandwiches \ud83d\ude09 . We haven't been able to get to it as we've been a bit busy fixing other issues, but we would love a pull request. If not I'll try to get to it later this month.. Certainly! I haven\u2019t looked at the issue and what it involves so I forget it a bit :-)</p>\n<p>But if you understand the issue and want to send a PR I\u2019ll be sure to review it ASAP, thanks! :-). I think we could add to the list of types we serialise already quite easily, so I'm cool with this. Do Maps and Sets (de)serialize predictably? I've never tried.. Cool, makes sense to me!</p>\n<p>(Given there is already serialization code to work with I'd say this a good bug for anyone looking to be a first-time contributor \ud83d\ude04). This PR doesn't add notes to Safari users about the change in data storage engines for 1.5, so I will add info to the changelog and README about it.</p>\n<p>@thgreasi If you think we should add a <code>console.info</code> to Safari users as well let me know. I'm on the fence about it as it seems overkill, but if someone else says to do it I'm convinced \ud83d\ude04 . I think you're expecting to get <code>undefined</code>, correct? Yes, returning <code>null</code> instead of <code>undefined</code> is expected (see https://localforage.github.io/localForage/#data-api-getitem), the reason is that for compatibility across drivers, where <code>localStorage</code> can't store <code>undefined</code>, we just always cast <code>undefined</code> to <code>null</code>. It's annoying but better than different engines returning differing results \ud83d\ude12 </p>\n<p>Hope that helps, feel free to reopen the issue if I misunderstood \ud83d\ude04 . Thanks for the info. This isn't a bug in localForage or offline storage libraries but seemingly an issue with PhoneGap. Thanks for the info but since localForage isn't the cause I'm going to close this.</p>\n<p>Glad you got it working! \ud83d\ude04 . Can you share the code you're trying to run and the error message you get?</p>\n<p>It should work fine with the in-app browser as it's still MobileSafari and MobileSafari is supported.. I just checked and there is definitely a bug here, it seems to be specific to callbacks.</p>\n<p>The Promises code path will work fine:</p>\n<p><code>js\ntestStore.getItem('someItem').then(function(value) {\n  console.log(value); // will output the correct value\n});</code></p>\n<p>That's not good, I'll look to fix it (though in version 2.0 I suspect we'll be ditching callback support, it should still work now).</p>\n<p>In the interim promises will work; we'll have to check this out and release a fix. \ud83d\ude2e . Hahah you're right and I just copy+pasted the code without thinking. Oops, my bad too! Thanks for catching that, I was wondering how our tests didn't catch this bug \ud83d\ude09</p>\n<p>Thanks \ud83d\udc4d . Are you trying to use localForage in node? localForage is a browser library only.. Which demo page are you trying to use?. I feel like reverting back to the old storage engine is worth doing if the bugs iOS Safari encounters are bad. I figured they should both be supported, darn. From my understanding we should only support indexeddb on desktop safari for now?\n. That works for me, sounds good. \ud83d\udc4d\ud83c\udffb. That works for me, should make it easy for folks to create a new instance and transfer their data over \ud83d\udc4d . base64 isn't really a hashing feature; it obscures the content but it is easily converted back (it's not a one-way hash) so it won't really be secure. You can base64 encode any content and put it in localForage, but that's outside the scope of localForage.</p>\n<p>But that won't make the content secure; a user could look at it and base64decode it easily. If you want to store data that the user can't decrypt you'll want one-way encryption... or maybe to look at JS encryption (which I don't know much about).</p>\n<p>So this is out of scope for localForage which is only concerned with storage.. Yes, this is a known issue. Unfortunately offline storage generally does not work well in private browsing mode on many browsers. Thank you for filing, but I think this is normal behaviour as private browsing is handled a bit oddly by Firefox so we get this error. As long as it didn't stop your other code from running it should be okay.. None yet, but I hope over the holidays I can help out with our 2.0 release. It will hopefully ship sometime late December or early January if we get the time.</p>\n<ul>\n<li>Matt (Sent from mobile)</li>\n</ul>\n<blockquote>\n<p>On 12 Dec 2017, at 20:50, Nick Webster <a href=\"&#109;&#97;&#105;&#108;&#116;&#111;&#58;&#110;&#111;&#116;&#105;&#102;&#105;&#99;&#97;&#116;&#105;&#111;&#110;&#115;&#64;&#103;&#105;&#116;&#104;&#117;&#98;&#46;&#99;&#111;&#109;\">&#110;&#111;&#116;&#105;&#102;&#105;&#99;&#97;&#116;&#105;&#111;&#110;&#115;&#64;&#103;&#105;&#116;&#104;&#117;&#98;&#46;&#99;&#111;&#109;</a> wrote:</p>\n<p>Is there any update on when this will be done?</p>\n<p>\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub, or mute the thread.</p>\n<p>. Which version of localForage are you using? We recently changed how we do TypeScript so the docs for the latest version (https://github.com/localForage/localForage#typescript) might help.. Is this happening only in Safari and Chrome? Or is it reproducible in other, non-WebKit-based browsers? It would be helpful to have more info here as this is not very easily reproducible from the issue so far, but is obviously a pretty severe bug that would be great to fix \ud83d\ude42. Yeah the docs are built by Travis now, if I'm not mistaken \ud83d\ude04</p>\n</blockquote>\n<p>Sorry I'm a bit behind on stuff as I just finished redoing my bathroom but I'll get to all the localForage stuff that needs review later this week or on the weekend \ud83d\ude13 . Hey sorry I've been on holiday this week but will look right now \ud83d\ude05 . Not sure yet but I\u2019d like to take some time to look at localForage this weekend. I know I\u2019m very behind on reviews but unfortunately there\u2019s a lot of add-ons work that\u2019s taking up a lot of time. Thanks for your patience.. Awesome, that's great to hear! Thanks for letting us know \ud83d\ude04. I don't see a common use case for such a method and it would add bloat to the library.</p>\n<p>It should be easy for you to create your own method that does this.</p>\n<p>Please read the <a href=\"https://localforage.github.io/localForage/#data-api-getitem\">localForage API</a> though, your example is synchonous so it won't work; localForage's API is async.. That's strange; is there any chance you have a race condition or are making a different call to localForage before your config call? Could you post a more full code snippet to see the code in context?. If you leave out the <code>config()</code> call does anything change?. That's very strange! Do you have any add-ons on the browser or something messing with <code>IndexedDB</code>? What version of localForage are you using? It should be <code>asyncStorage</code> by default.... Private mode will always force localStorage because private mode has bad IndexedDB and WebSQL support.\n. That's strange, but it sounds like it might be something on your Chrome install. If you can replicate this on another browser or machine, please re-open.</p>\n<p>If you find out what this was please comment and let us know \ud83d\ude04 . Wow, and that\u2019s a very popular extension. Good to know, I\u2019ll remember that if we run into this in the future! Thanks!\n. A quick Google search seems to indicate issung <code>PRAGMA</code> commands to WebSQL is not supported, unfortunately. This is unfortunate but it seems this is an issue with iOS and not localForage directly. I'm surprised that file isn't cleaned somehow, but unfortunately there isn't a way for us to modify this behaviour from our end. Sorry about that! \ud83d\ude1e . That storage API is legacy and not really intended for web pages or extensions to use... I wish I could find the bug where it was discussed but I recall a few years back us encouraging developers using it to switch their extensions over to localForage actually \ud83d\ude04</p>\n<p>IndexedDB should give you speeds similar to WebSQL, the Storage API is not, as I recall, especially fast.</p>\n<p>As mentioned you could implement it with a custom driver if you want, but it won't be something that would be a good fit for localForage or for any cross-platform pages. I'd encourage you to use localForage as-is instead \ud83d\ude04 . Are you using Private Browsing Mode? In any kind of private mode localForage tends to not work.. Shoot, okay, that's just usually the easy answer \ud83d\ude06</p>\n<p>Could you tell us more about your app/setup? Are you using other libraries, do you have a code snippet of what's failing, your localForage config, etc.?. Cool, thanks for all the info! I'll do my best to investigate this further but I will probably have to wait until the weekend.. You can certainly use localForage to store large amounts of data. That should be fine using IndexedDB. If you're storing large files you might find memory usage is a bit high but it should be no problem as long as you're using IndexedDB.. I will still have a look at this, though it might take me longer than usual! I'm visiting some friends in Canada and catching up on add-ons stuff, so I might be a week or two. (Same goes for other LF PRs, but I will address them!)</p>\n<p>If anything's really urgent let me know and I'll make some time.. Thanks for catching this, and for taking the time out of your day to submit the PR. Cheers! \ud83d\ude04 . In order to create the URL I think the object needs to be loaded, but in the case of localForage no. We need to read the entire value back. Sorry about that!. Could you post a code snippet and an example of the kind of object you're trying to save? I'm not sure localForage is able to handle objects that have been frozen. I don't mind the patch but it would likely involve unfreezing them as this is likely an underlying database issue (IndexedDB, etc.)... which defeats the point.. Indeed, this is a request I think we'd like to accept because the private browsing errors are not obvious and it would be better to have an in-memory fallback. I know there's #555 and https://github.com/localForage/localForage-memoryStorageDriver as a custom driver but it would be great to get this integrated. Not sure if #555 is largely ready... I could have another look maybe next week.. I think that\u2019s a good point and memory storage is a good reason to bump to v2.\n. If you're creating an array and setting arbitrary keys on it like:</p>\n<p><code>js\nlet myArray = ['foo', 'bar'];\nmyArray.something = 'another value';</code>\nand trying to store that array, I'd say it's just a JS mess. You should be using an Object instead, as Array types in JS don't support custom keys generally speaking and I'd imagine this would lead to lots of bugs.. Yes, in order to make a backup of the entire database you'd need to use the <a href=\"https://localforage.github.io/localForage/\"><code>.keys()</code></a> API and then likely the https://github.com/localForage/localForage-getItems method to generate a file in JS.. Unfortunately we don't have a way to monitor instances stored right now... we could certainly keep track of them in a private database but this would need to be added. I'm okay with the idea but this would be a new feature entirely \ud83d\ude04 . If you wanted to code the feature sure, but otherwise I\u2019d say no. We could look into doing this in the future but other things for v2 will take priority, just FYI. This would be a breaking change but I'm definitely happy to see more input validation for things like database names, versions, etc. \ud83d\udc4d . Sweet! I'll have a look after Tuesday as I'm trying to get a few patches into the add-ons site. Should be good to look Tuesday night or Wednesday morning. \ud83d\udc4d . Oh shoot, yes! I\u2019m out for dinner and away from my computer tonight but I\u2019ll get to it tomorrow for sure.</p>\n<ul>\n<li>Matt (Sent from mobile)</li>\n</ul>\n<blockquote>\n<p>On 21 Apr 2018, at 17:11, Thodoris Greasidis <a href=\"&#109;&#97;&#105;&#108;&#116;&#111;&#58;&#110;&#111;&#116;&#105;&#102;&#105;&#99;&#97;&#116;&#105;&#111;&#110;&#115;&#64;&#103;&#105;&#116;&#104;&#117;&#98;&#46;&#99;&#111;&#109;\">&#110;&#111;&#116;&#105;&#102;&#105;&#99;&#97;&#116;&#105;&#111;&#110;&#115;&#64;&#103;&#105;&#116;&#104;&#117;&#98;&#46;&#99;&#111;&#109;</a> wrote:</p>\n<p>@tofumatt Can I also get a review on this?</p>\n<p>\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.</p>\n<p>. This is not an issue with the actual library but just a jQuery issue with the docs page. Which is a static page.</p>\n</blockquote>\n<p>We can upgrade jQuery on that page but this is not an actual security vulnerability.. I reviewed your patch (which this is based on, I just fixed some conflicts and made a few tiny tweaks) and it all looks good.</p>\n<p>I'm not sure I got the typescript stuff exactly right, so if you could double-check it that'd be great. Afterward I think this is good to merge, as I'll say my review of it looked good.</p>\n<p>Thanks so much for this\u2013sorry I took so long to get to these reviews!. I thought we already did!</p>\n<p>Matthew Riley MacPherson (sent from mobile)</p>\n<blockquote>\n<p>On 29 Sep 2017, at 11:05, Thodoris Greasidis <a href=\"&#109;&#97;&#105;&#108;&#116;&#111;&#58;&#110;&#111;&#116;&#105;&#102;&#105;&#99;&#97;&#116;&#105;&#111;&#110;&#115;&#64;&#103;&#105;&#116;&#104;&#117;&#98;&#46;&#99;&#111;&#109;\">&#110;&#111;&#116;&#105;&#102;&#105;&#99;&#97;&#116;&#105;&#111;&#110;&#115;&#64;&#103;&#105;&#116;&#104;&#117;&#98;&#46;&#99;&#111;&#109;</a> wrote:</p>\n<p>Many popular libraries do that, we should do it as well :)</p>\n<p>\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub, or mute the thread.</p>\n<p>. I thought the docs automatically published themselves these days using gh-pages. Maybe that's broken\u2013do you not see the newest docs after the build on master completes?</p>\n</blockquote>\n<p>For a new release, yeah: all you need do is push a new tag (or cut a new release on GitHub's \"Releases\" page as it also creates a git tag). Just make sure package.json/etc. is bumped to the same tag before or the <code>npm publish</code> step will fail. But yes the tag should be pushed to npm automatically. \ud83d\ude04 . Sounds good to me! Release away! :-)\n. I like oneLine a fair bit but that\u2019s probably because I\u2019ve been using it a lot on other projects that have longer strings more often. Is it breaking something?\n. Ah, interesting, are you defining any custom drivers? If not it seems we have a bug and shouldn't be logging here.. Hmm, yeah, it sounds like it could be a bug in the underlying IndexedDB system; if it\u2019s always using asyncStorage but certain data isn\u2019t getting stored.</p>\n<p>What is the exact data structure of the value you\u2019re storing in the \u201caxios\u201d key? It could be something IndexedDB can\u2019t handle? Maybe there\u2019s a circular object or something?</p>\n<blockquote>\n<p>On 11 Oct 2017, at 12:12, Stephen <a href=\"&#109;&#97;&#105;&#108;&#116;&#111;&#58;&#110;&#111;&#116;&#105;&#102;&#105;&#99;&#97;&#116;&#105;&#111;&#110;&#115;&#64;&#103;&#105;&#116;&#104;&#117;&#98;&#46;&#99;&#111;&#109;\">&#110;&#111;&#116;&#105;&#102;&#105;&#99;&#97;&#116;&#105;&#111;&#110;&#115;&#64;&#103;&#105;&#116;&#104;&#117;&#98;&#46;&#99;&#111;&#109;</a> wrote:</p>\n<p>Hi, thanks for the reply. To answer your questions:</p>\n<p>No, this happens regardless of version, although I did also update to 1.5.2 to see if that fixed it.\nNot using custom driver\nNot setting driver order\nNot setting store sizes\nNot using createInstance()\nThe results of localforage.driver on both working and non working systems is asyncstroage\nHere are the really odd things to me:</p>\n<p>SOME (but not all) items get stored and then disappear, and it is always the same keys that disappear, the ones I am using in an axios call that contain values for username and bearer token\nI would expect this to be a problem somewhere in my code, except that this only happens on Android 5.x and below. All later versions are fine, Mac and Windows and iOS are all fine and working as expected. They keep the stored values I have set, all of them.\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub <a href=\"https://github.com/localForage/localForage/issues/752#issuecomment-335776488\">https://github.com/localForage/localForage/issues/752#issuecomment-335776488</a>, or mute the thread <a href=\"https://github.com/notifications/unsubscribe-auth/AAFi9yT6JrGFkBe1pYL_ujaKWtUwYVZQks5srKKogaJpZM4P0wr0\">https://github.com/notifications/unsubscribe-auth/AAFi9yT6JrGFkBe1pYL_ujaKWtUwYVZQks5srKKogaJpZM4P0wr0</a>.\n</p>\n</blockquote>\n<p>. There is no guarantee in that example that \"foo\" would have a value of \"2\". As you mentioned, localForage stores data asynchronously by design so you would need to wait for the Promise to complete to know the data was stored.</p>\n<p>If you wanted a clearer syntax you could use ES7's async/await:</p>\n<p><code>js\nawait localforage.setItem('foo', '1');\nawait localforage.setItem('foo', '2');\nconst value = await localforage.getItem('foo');</code></p>\n<p><code>value</code> would be <code>'2'</code> in that case.</p>\n<p>To be clear what you're proposed won't be supported; it can't because of the async nature of localForage. \ud83d\ude04 . Yes, the client/developer needs to use the async api. Implementing what you\u2019re talking about seems really intense for no benefit as async code is very normal in JS and I don\u2019t see how a synchronous api for something that is underneath async is useful.</p>\n<p>While I suppose you could implement something like this I don\u2019t think localForage should. The asynchronous model has served us well and the new ES7 syntax makes it even nicer :-)</p>\n<ul>\n<li>Matt (Sent from mobile)</li>\n</ul>\n<blockquote>\n<p>On 17 Oct 2017, at 14:41, Steven <a href=\"&#109;&#97;&#105;&#108;&#116;&#111;&#58;&#110;&#111;&#116;&#105;&#102;&#105;&#99;&#97;&#116;&#105;&#111;&#110;&#115;&#64;&#103;&#105;&#116;&#104;&#117;&#98;&#46;&#99;&#111;&#109;\">&#110;&#111;&#116;&#105;&#102;&#105;&#99;&#97;&#116;&#105;&#111;&#110;&#115;&#64;&#103;&#105;&#116;&#104;&#117;&#98;&#46;&#99;&#111;&#109;</a> wrote:</p>\n<p>Hi @thgreasi @tofumatt</p>\n<p>Thank you for the explanation :) I would like to raise a couple of questions if you guys don't mind.</p>\n<p>Expectation of Async Storage</p>\n<p>I think asynchronous storage could still support \"operation ordering\" property. As matter of fact, I think these two concepts don't really contradict.</p>\n<p>IndexedDB is an asynchronous storage but it still supports such an \"operation ordering\" property: it ensures the result of the operation will be in the same ordering which transactions are created.</p>\n<p>// example from MDN\nvar trans1 = db.transaction(\"foo\", \"readwrite\");\nvar trans2 = db.transaction(\"foo\", \"readwrite\");\nvar objectStore2 = trans2.objectStore(\"foo\")\nvar objectStore1 = trans1.objectStore(\"foo\")\nobjectStore2.put(\"2\", \"key\");\nobjectStore1.put(\"1\", \"key\");</p>\n<p>// After the code is executed the object store should contain the value \"2\", since trans2 should run after trans1.\nWhy supporting such a property is essential</p>\n<p>If localforage does not provide such a guarantee, it will be left as client's responsibility to implement some async control to ensure correctness of preserved value.</p>\n<p>This could be an issue because I believe this is the scenario where most clients will encounter, which means most clients will need to implement this logic to ensure application correctness.</p>\n<p>\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.</p>\n<p>. I\u2019ll have to check on that but I think we have some fancy babel stuff around it. I won\u2019t be able to get to it until probably the weekend though.. It looks like you're asking for a SQL API for localForage\u2013unfortunately this is out of scope for the aim of the project. While there are some extensions (https://github.com/localForage) this kind of API is not the aim of localForage as a key/value store with a simple API.</p>\n</blockquote>\n<p>You might want to try using IndexedDB directly or a project like PouchDB if you want a more powerful query API \ud83d\ude04 . Oh shoot, you\u2019re right. I already released 1.5.4 but I\u2019ll see about releasing a 1.5.5 that rolls it back I guess. And then releasing a 1.6.</p>\n<ul>\n<li>Matthew Riley MacPherson\ntofumatt.com</li>\n</ul>\n<blockquote>\n<p>On 28 Nov 2017, at 19:41, Thodoris Greasidis <a href=\"&#109;&#97;&#105;&#108;&#116;&#111;&#58;&#110;&#111;&#116;&#105;&#102;&#105;&#99;&#97;&#116;&#105;&#111;&#110;&#115;&#64;&#103;&#105;&#116;&#104;&#117;&#98;&#46;&#99;&#111;&#109;\">&#110;&#111;&#116;&#105;&#102;&#105;&#99;&#97;&#116;&#105;&#111;&#110;&#115;&#64;&#103;&#105;&#116;&#104;&#117;&#98;&#46;&#99;&#111;&#109;</a> wrote:</p>\n<p>I think that this should be in v1.6, since master already contains dropInstance(). Sorry about that, will bump the version during the weekend.</p>\n<p>\u2014\nYou are receiving this because you modified the open/close state.\nReply to this email directly, view it on GitHub, or mute the thread.</p>\n<p>. Yup, this was my bad. I forgot about the <code>dropInstance</code> change when I merged a fix for #760 and released <code>1.5.4</code>. I will be releasing <code>1.5.5</code> later today which will remove the API change and <code>1.6</code> will include the new API. Sorry about that!. FYI I've published <code>1.5.5</code>, which includes Edge support for IndexedDB but removes the extras added in this patch. Sorry about that!. I thought there was an actual issue with multiple stores or databases simultaneously being accessed in Safari as well, but if it\u2019s just performance that\u2019s an interesting point.</p>\n</blockquote>\n<ul>\n<li>Matt (Sent from mobile)</li>\n</ul>\n<blockquote>\n<p>On 1 Dec 2017, at 18:40, Todd Wolfson <a href=\"&#109;&#97;&#105;&#108;&#116;&#111;&#58;&#110;&#111;&#116;&#105;&#102;&#105;&#99;&#97;&#116;&#105;&#111;&#110;&#115;&#64;&#103;&#105;&#116;&#104;&#117;&#98;&#46;&#99;&#111;&#109;\">&#110;&#111;&#116;&#105;&#102;&#105;&#99;&#97;&#116;&#105;&#111;&#110;&#115;&#64;&#103;&#105;&#116;&#104;&#117;&#98;&#46;&#99;&#111;&#109;</a> wrote:</p>\n<p>We probably could copy/paste/modify the isIndexedDBValid code as we've done in the fork. The issue is pedantically we the validation code should only state whether or not the driver can be used; not whether or not it will be more performant than others (which is the reason for the Safari/fetch) lines</p>\n<p>From what I can tell, this code was mostly introduced so there's an automatic fallback chain for supported drivers to optimize performance. I was wondering if that code could be relocated elsewhere (e.g. _shouldUse in addition to _supports) where _getSupportedDrivers() can first reject any non _shouldUse but then fallback to _supports if there were no drivers found</p>\n<p>\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub, or mute the thread.</p>\n<p>. I agree. Our feature detection is roundabout (we aren\u2019t actually checking for fetch because we <em>use</em> it) and it\u2019s probably better to do a new compatibility release too. \ud83d\udc4d\ud83c\udffb. Hmmm, I'm surprised this works at all. iFrames tend to mess with a lot of stuff around storage. I'm not sure we do anything to handle iFrames... it seems like this might just be a Safari bug if the spec should allow this... which it seems like it should.</p>\n</blockquote>\n<p>Have you filed a bug against WebKit? I think that might be the best option. It could also help to know which Safari you're using\u2013it might also be a WebSQL bug that will resolve itself once Safari is always using IndexedDB.... This is not explicitly supported by localForage (right now), but you could have a look at our <code>npm run build</code> script and create a version that does not include the other drivers (by removing their import calls). There is unfortunately little documentation on this right now.. That\u2019s in the package.json file at the root of the project. You\u2019ll need to understand grunt/webpack/Babel to get things to work. Sorry, it\u2019s a bit complicated :-/\n. Just so you know part of the original use case for localForage was storing large (50mb+) MP3 audio files for podcasts. 126mb should be fine. If it\u2019s in one big object it might be a bit of a memory issue but there\u2019s no problem storing that amount of data.. Sure thing. I\u2019ll get to it today!</p>\n<ul>\n<li>Matt (Sent from mobile)</li>\n</ul>\n<blockquote>\n<p>On 18 Jan 2018, at 12:34, Giuseppe <a href=\"&#109;&#97;&#105;&#108;&#116;&#111;&#58;&#110;&#111;&#116;&#105;&#102;&#105;&#99;&#97;&#116;&#105;&#111;&#110;&#115;&#64;&#103;&#105;&#116;&#104;&#117;&#98;&#46;&#99;&#111;&#109;\">&#110;&#111;&#116;&#105;&#102;&#105;&#99;&#97;&#116;&#105;&#111;&#110;&#115;&#64;&#103;&#105;&#116;&#104;&#117;&#98;&#46;&#99;&#111;&#109;</a> wrote:</p>\n<p>@thgreasi / @cherewaty / @tofumatt Would it be possible to release a patch version? The package is not usable with yarn because of this issue.</p>\n<p>\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.</p>\n<p>. FYI 1.5.6 has been released, please let me know if that fixes your issue!. Huh, interesting point. I think for version 2.0 of lF we'd like to get away from using callbacks at all, but if the fix for this wouldn't be a breaking change it seems fine to implement for now. I would accept the PR \ud83d\ude04 . I don't understand, I use localforage in my <code>package.json</code> and do <code>import localforage from 'localforage';</code> without issue. Are you running <code>npm install</code>?</p>\n</blockquote>\n<p>Could you post the exact error message you're getting when trying to <code>require('localforage')</code>?. What happens if you remove your <code>.babelrc</code> file? From the error message it looks like that\u2019s the cause of the error, not localForage.\n. Oh, weird, right.</p>\n<p>It\u2019s strange because we haven\u2019t run into such an issue on addons-frontend, where we use it. Is there any chance you could submit a zip of the project to try, for debugging? I\u2019ve never seen this error before.\n. What does that preset do? Sorry I\u2019m not familiar with that Babel config so not sure what it\u2019s changing for localForage. :-)</p>\n<p>. Thanks for filing!</p>\n<p>I've noticed testing has problems too. I think we really have to spend some time updating the test suite. Maybe I can resurrect my karma branch soon. \ud83e\udd14. Yeah, that's a good point. Right now the docs are updated automatically so commits to master update them. Maybe in the future we could update the docs site only on a tag, like we do with our automated <code>npm publish</code>.. Oh shoot, sorry I missed this.</p>\n<p>I think we're all good, let's ship it! \ud83d\udea2 . Likewise. I\u2019m really behind after working on the WordPress 5.0 release, but I should have some free time soon.\n. Oh sorry, I think it just got missed after the review. I agree that maybe it's too technical but it's better than what we had before, so I'll merge it for now and we can always tidy it up later! \ud83d\ude04 . Hmm, <code>localForage.clear()</code> should remove all keys in your database. Is there any chance you could provide a proof-of-concept/reproducible app we could test this with?. Actually I have some time this morning in like thirty minutes so I can handle it :-). Oh, no worries!</p>\n<p>Sure thing, I\u2019ll get to that today :-). Thanks for filing the bug, I\u2019ll look into this ASAP, sometime this morning.. I don't think we did anything that would've stopped this from being published... could it be a CDNJS bug?. Sweet, I guess it was just a temporary issue with their site then. I'll close this.</p>\n<p>Thanks for letting us know.. This is really cool! I think for now we could link to your site but in the future it might be good to set up a real translation system.</p>\n<p>Thanks!</p>\n<ul>\n<li>Matt (Sent from mobile)</li>\n</ul>\n<blockquote>\n<p>On 26 Feb 2018, at 09:26, KING <a href=\"&#109;&#97;&#105;&#108;&#116;&#111;&#58;&#110;&#111;&#116;&#105;&#102;&#105;&#99;&#97;&#116;&#105;&#111;&#110;&#115;&#64;&#103;&#105;&#116;&#104;&#117;&#98;&#46;&#99;&#111;&#109;\">&#110;&#111;&#116;&#105;&#102;&#105;&#99;&#97;&#116;&#105;&#111;&#110;&#115;&#64;&#103;&#105;&#116;&#104;&#117;&#98;&#46;&#99;&#111;&#109;</a> wrote:</p>\n<p>hi, I've translated the doc page into Chinese as blow:</p>\n<p>localForage in Chinese</p>\n<p>so, I'd like to add the link of Chinese site on the official page, could I?</p>\n<p>\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub, or mute the thread.</p>\n<p>. I think adding this to v2 or even v3 is a great idea.</p>\n</blockquote>\n<ul>\n<li>Matthew Riley MacPherson\ntofumatt.com</li>\n</ul>\n<blockquote>\n<p>On 27 Feb 2018, at 07:22, Thodoris Greasidis <a href=\"&#109;&#97;&#105;&#108;&#116;&#111;&#58;&#110;&#111;&#116;&#105;&#102;&#105;&#99;&#97;&#116;&#105;&#111;&#110;&#115;&#64;&#103;&#105;&#116;&#104;&#117;&#98;&#46;&#99;&#111;&#109;\">&#110;&#111;&#116;&#105;&#102;&#105;&#99;&#97;&#116;&#105;&#111;&#110;&#115;&#64;&#103;&#105;&#116;&#104;&#117;&#98;&#46;&#99;&#111;&#109;</a> wrote:</p>\n<p>Closed #797.</p>\n<p>\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.</p>\n<p>. I\u2019ll have the chance to look at this issue in-depth later, but my first thought is if you\u2019re looking to simply get more than one item at once you might want to check out https://github.com/localForage/localForage-getItems <a href=\"https://github.com/localForage/localForage-getItems\">https://github.com/localForage/localForage-getItems</a> :-). It looks like the network request to load localForage was aborted, so it never loaded the file. What does you network request panel show? I\u2019m guessing the path to localforage.js is a 404.\n. The network panel there shows the request for <code>localforage.js</code> is not found (404).</p>\n</blockquote>\n<p>Your path: <code>http://localhost:4204/node_modules/localforage/dist/localforage.js</code> doesn't seem to be being served by your web server.</p>\n<p>You might want to check out something like webpack server for development if you run into more path issues.</p>\n<p>Since this isn't an issue with localForage I'm closing it, thanks for the extra info about the network request.. Can you attach the output of the network tab of your browser? My guess is that the path to <code>scripts/localforage.js</code> is 404ing, so <code>localforage</code> is not defined.</p>\n<p>A screenshot is fine.. No worries, happy it was fixed! \ud83d\ude04 . Yeah, that's a fine idea to me! I'd happily accept a patch that did this \ud83d\ude04 . Funny enough, this broke addons-frontend build https://travis-ci.org/mozilla/addons-frontend/jobs/360199156</p>\n<p>I'm going to make sure this isn't too bad of a breaking change.. Ah, we target node so perhaps that's the issue. I'll update the release notes to include information about how to easily update a webpack config, hopefully there aren't too many issues. Thanks! \ud83d\udc4d . This is breaking things for other users too and I'd rather test it out more thoroughly and get things working better out of the box. I'm going to re-open this and revert the change in 1.7.1, but I'm open to this idea. We just have to make sure webpack will build <code>src/localforage.js</code> out-of-the-box better than it does now.. I think you're right; though the issue with consuming localForage is seemingly around template strings and I'm surprised it failed as we use them in add-ons front-end as well.</p>\n<p>To be clear I would happily fix this bug but I'd like to explore more why the build failures are happening before rushing out the release. But I do think this is a good idea \ud83d\ude04 . I think so, but because it happened to me and another developer on a different project I\u2019m guessing this is a common configuration issue. It would at least be nice to know which kind of configuration change we should be recommending over just telling people to continue to consume the <code>dist/</code> version if they get errors ;-)\n. Thanks for the patch! I've merged this in and will cut a new release today so it's available to users.. Agreed, it would be good to have a test case for this\u2026 could we add one for FF and just run it in the browser for now to make sure it works? I'm gonna try to spend Sunday getting Karma or something similar working, for what it's worth \ud83d\ude04 . Yes, this is because of #805. Because we are an ES6-based project we recently added the field <code>mainFields</code> that webpack will use to include the file.</p>\n<p>Unfortunately it seems our use of template strings in that file causes Webpack builds to fail; our config on addons-frontend had to be changed not to use this import.</p>\n<p>It appears it may be causing issues. I wonder if it's better to revert that changes and allow people to include the src file directly if they choose in their own webpack config. \ud83e\udd37\u200d\u2642\ufe0f . The newly-released 1.7.1 should fix this, sorry about that!. What is the issue you're encountering? You posted in the other repo as well but did not state your issue. <code>localforage-compatability</code> is for users who are upgrading from localForage 1.4 to 1.5.. Looking at your other issue, I think you should check with https://github.com/championswimmer/vuex-persist, as I don't see a localForage-specific issue here. I don't know anything about that library but it does say it has localForage support.</p>\n<p>If you have an issue with localForage please do post it on this repo \ud83d\ude04 . Awesome, thank you again! \ud83d\ude04</p>\n<p>I noticed the logo for localForage is not on the main page of http://docschina.org by the way; if there is a way to add it please let me know :-). I believe this is simply a feature of Safari and it will manage the size itself. I'd imagine if it got too large it would do cleanup itself, but there's no JS API I know of to disable the WAL.. Just an FYI that WebKit has closed the upstream issue as fixed with a patch \ud83d\udc4d</p>\n<p>https://bugs.webkit.org/show_bug.cgi?id=191294#c13. Thank you so much for that! Sorry for not responding but I did see this issue and meant to deal with it this weekend. I started a new job recently so have been a bit busy! \ud83d\ude04</p>\n<p>Thank you a lot for flagging this with the Chromium team \ud83d\udc4d . Awesome, thanks for letting us know! \ud83d\udc4d. I recall the Cordova stuff being a bit weird sometimes but I'm not sure as I don't really use it much...</p>\n<p>Are you setting a limit on the database? It might be worth asking the Cordova folks as I was under the impression they shim a lot of libraries and they might actually be intercepting these calls. \ud83e\udd37\u200d\u2642\ufe0f . Unfortunately I'm not sure what would be causing it, though if you're testing for <code>window.promise</code> for client-side\u2013is there any chance localForage's <code>lie</code> Promise polyfill or something else is causing the client code to run?</p>\n<p>Can you verify with a <code>console.log</code> or something that the code path for the client isn't ever running on the server? Seems like localForage is correct here, but it's just being run in the wrong place.. The IndexedDB size limits are largely set because it prevents browsers from asking for space (if you go over 50MB they used to) until you use more.</p>\n<p>That said I think these days it doesn't even really matter, and browsers will ask for more space once you start using a lot of it.</p>\n<p>We should probably check with vendors to see if we even need to do this anymore though, yeah.. Could you attach the code you\u2019re using or a CodePen type example we could use to reproduce? I\u2019m not sure what the issue would be from the description so it would help to try it out ourselves :-)\n. &gt; I wonder whether it would be better if we had a single uref() call on each method, chained on the returned promise.</p>\n<p>That makes sense to me \ud83d\udc4d. That sounds like a bug or a case we haven\u2019t covered. Could you include the code you\u2019re using, the result you expect, and the result you\u2019re getting? Thanks!\n. You're using Ionic, but for which platform? Having only 1GB of storage left, especially on a PC, doesn't surprise me that a quota error is encountered. What kind of mobile device are you encountering the error on? What kind of data are you attempting to save when you encounter the error?</p>\n<p>This sounds like it's working as intended \ud83e\udd37\u200d\u2642\ufe0f . If you're experiencing blocking during operations in another tab, that's to be expected. As mentioned in the StackOverflow issue: this is to preserve data integrity.. Hmm, so we should probably be handling this ourselves given it's a regression. I'll reopen this as it's a legit bug (and a regression).. I don't think that fix has been released yet, so the bug is likely still there. I don't think fixes to WebKit core get included into Safari and then into iOS that quickly.. I\u2019m honestly not sure, best bet would be to check the next beta of iOS and see if it works (or maybe check the release notes for the version of WebKit used).</p>\n<ul>\n<li>Matt (Sent from mobile)</li>\n</ul>\n<blockquote>\n<p>On 9 Jan 2019, at 14:18, dfibuch <a href=\"&#109;&#97;&#105;&#108;&#116;&#111;&#58;&#110;&#111;&#116;&#105;&#102;&#105;&#99;&#97;&#116;&#105;&#111;&#110;&#115;&#64;&#103;&#105;&#116;&#104;&#117;&#98;&#46;&#99;&#111;&#109;\">&#110;&#111;&#116;&#105;&#102;&#105;&#99;&#97;&#116;&#105;&#111;&#110;&#115;&#64;&#103;&#105;&#116;&#104;&#117;&#98;&#46;&#99;&#111;&#109;</a> wrote:</p>\n<p>That's good to know in a way, means it hasn't broken again on iOS 12. Is there any way to find out when it goes in?</p>\n<p>\u2014\nYou are receiving this because you modified the open/close state.\nReply to this email directly, view it on GitHub, or mute the thread.\n. That\u2019s very strange. It shouldn\u2019t be possible, from what I understand, to create two stores with the same name.</p>\n</blockquote>\n<p>If you manually edit a value in one (either with the developer tools or manually with an IndexedDB call) does it reflect in the other store? I\u2019m wondering if this is a bug with Safari and not localForage.\n. Again: what happens when you manually change/edit an item in the store? Is it reflected across both stores? Maybe it's a devtools bug.. Could you provide more info and an example of what tests are breaking for you? Steps to reproduce will help us understand and fix any issues.</p>\n<p>For what it\u2019s worth though, I\u2019ve worked on several projects using Jest and localForage without issue.... Thanks for filing! This is a duplicate of #827, so we'll be tracking the issue over there \ud83d\ude04 . I just tested \nhttps://codepen.io/thgreasi/pen/ojYKeE?editors=1111 in the latest Chrome on MacOS.</p>\n<p>It worked fine for me\u2013can you send your exact OS and Google Chrome version? I can't reproduce this.. Which browser are you encountering this error in?  I don\u2019t have much experience with WebCrypto, so I\u2019m not aware of its subtleties :-)</p>\n<ul>\n<li>Matthew Riley MacPherson\ntofumatt.com</li>\n</ul>\n<blockquote>\n<p>On 30 Aug 2018, at 08:42, Guillaume Lakano <a href=\"&#109;&#97;&#105;&#108;&#116;&#111;&#58;&#110;&#111;&#116;&#105;&#102;&#105;&#99;&#97;&#116;&#105;&#111;&#110;&#115;&#64;&#103;&#105;&#116;&#104;&#117;&#98;&#46;&#99;&#111;&#109;\">&#110;&#111;&#116;&#105;&#102;&#105;&#99;&#97;&#116;&#105;&#111;&#110;&#115;&#64;&#103;&#105;&#116;&#104;&#117;&#98;&#46;&#99;&#111;&#109;</a> wrote:</p>\n<p>Hi,\nThanks for your useful package :)\nCurrently localForage can store a WebCrypto public key, but can't store a private key.\nWe should store it in IndexedDB, it's the goal, but not with localForage.</p>\n<p>import lf from 'localforage'</p>\n<p>const keys = await crypto.subtle.generateKey({ name: 'ECDSA', namedCurve: 'P-256' }, false, [ 'sign', 'verify' ])\n lf.setItem('publicKey', keys.publicKey) // works\n lf.setItem('privateKey', keys.privateKey) // doesn't works ( silently, no error at all )\nRegards,</p>\n<p>\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub, or mute the thread.\n. What is the amount of disk space on the machine where you see the error? I can't reproduce and <code>setItem</code> works fine for me and in the tests.</p>\n</blockquote>\n<p>Could you please give your disk space, OS, browser, etc.? The <code>setItem</code> call you're making as well (or at least the kind of data you're trying to store) would be great. Thanks.. My understanding is that Android and Cordova behave badly when they have limited disk space left, so I'm guessing that's what this is error is caused by. I'm not sure about a fix for it\u2026 you could try wrapping all your calls in <code>try/catch</code> but that's a bit of a pain.</p>\n<p>Does the error go away when you have more disk space?. I'm not familiar with RxJS at all, so I'm not able to really help out with this. Have you tried contacting any RxJS support channels? I can't really tell what's happening here, but I don't think it's specific to localForage, it seems like an issue with how this is coded in RxJS... but I'm not sure how to help.</p>\n<p>Sorry \ud83d\ude1e . In terms of how could you \"easily\" do it I don't think there's an answer. We try to gracefully check for storage mechanisms and when they are not discovered we fallback to others, but we don't really have a design goal to entirely exclude them in the codebase.</p>\n<p>That said, perhaps <code>localforage.setDriver([localforage.INDEXEDDB , localforage.WEBSQL]);</code> would work? It should prevent the error as support for the driver wouldn't be checked... I think?</p>\n<p>But aside from that we don't really have a build system driver-exclusion guide. You could check out the repo and build your own version without <code>src/drivers/localstorage.js</code>, but that's probably the only way, sorry \ud83d\ude1e. Oh, interesting! I think if you exclude <code>localStorage</code> from the drivers to use with the function I referenced it might work as well, not sure \ud83e\udd37\u200d\u2642\ufe0f</p>\n<p>I'd be curious to hear about it! If it does maybe we could add it to some docs.. Ah, darn! Okay, thanks for letting me know.. I would dig that, there's certainly folks who want localForage more for the API and not for the driver support; cutting down on the bundlesize would please them.. Is the issue that your new value isn't being saved?</p>\n<p>I don't see you waiting for the return result of <code>locaforage.setItem</code> in your code; maybe you are refreshing the page before save?. Is the storage key you\u2019re using the same? setItem will overwrite values if they share the same key.</p>\n<ul>\n<li>Matt (Sent from mobile)</li>\n</ul>\n<blockquote>\n<p>On 16 Oct 2018, at 03:49, BinhPham <a href=\"&#109;&#97;&#105;&#108;&#116;&#111;&#58;&#110;&#111;&#116;&#105;&#102;&#105;&#99;&#97;&#116;&#105;&#111;&#110;&#115;&#64;&#103;&#105;&#116;&#104;&#117;&#98;&#46;&#99;&#111;&#109;\">&#110;&#111;&#116;&#105;&#102;&#105;&#99;&#97;&#116;&#105;&#111;&#110;&#115;&#64;&#103;&#105;&#116;&#104;&#117;&#98;&#46;&#99;&#111;&#109;</a> wrote:</p>\n<p>Is the issue that your new value isn't being saved?</p>\n<p>I don't see you waiting for the return result of locaforage.setItem in your code; maybe you are refreshing the page before save?</p>\n<p>I don't think so.\nBecause I saved value but when I refresh the page then Value in IndexedDB till it.\nResult: When I add a new value.\nA new value still adds into IndexedDB but the old value has been removed.\nSo that I don't know reason ??</p>\n<p>\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Could you provide a code sample to show the issue you\u2019re encountering? I don\u2019t quite follow the issue, but if you call <code>setItem()</code> with the same key: its value will be overwritten. That\u2019s working as normal :-)\n. Did you mean to close this issue? If so: did you find out what the problem was? :-)\n. Are you trying to run our tests? You should be able to check out the repository, run <code>yarn</code> or <code>npm install</code>, and then run <code>yarn test</code> or <code>npm test</code>.</p>\n</blockquote>\n<p>Or are you encountering an issue with your own unit tests? You should be able to <code>import localforage from 'localforage';</code> in your code with <code>localforage</code> as an npm dependency and be fine.. Ah, interesting! Thanks for investigating this one \ud83d\udc4d </p>\n<p>We should try to mitigate this bug but it feels like more of a bug in LastPass. My gut feeling is they shouldn't be overriding that native method \ud83e\udd37\u200d\u2642\ufe0f. The whole point of our check for native code was that we wanted to know what the <em>browser's native capability was</em> so we could, effectively, UA sniff. I guess we're both doing bad things here \ud83d\ude06</p>\n<p>LastPass is definitely big enough for this to be worth fixing though, and maybe even with a specialised patch? My first instinct is to just check for Safari's version number here instead of our <code>window.fetch</code> feature check, but I feel like we used <code>window.fetch</code> instead of a version check for a reason. Maybe not though, as that check is specific to Safari anyway.</p>\n<p>If you could replace the <code>hasFetch</code> with an <code>isSafari10_1OrGreater</code> type of check I think that would be fine by me. It might require changing some tests\u2013and maybe adding a few with known Safari UA strings and validating the right thing happens based on versions. I worry about UA checking introducing a lot of extra code into the package though.</p>\n<p>If it's not something we can do reliably and without a lot of bloat, simply checking for LastPass (does it leave any markers of it running in the global scope?) and running the check differently could work. Maybe there's another Safari 10.1 feature check available?. &gt; I guess the point is, you can fully polyfill both indexeddb and fetch.</p>\n<p>If IndexedDB were polyfilled it would definitely cause errors with localForage. localForage assumes a native and pretty robust IndexedDB that is able to handle a lot of JS primitives that a polyfilled library would\u2013likely\u2013not support. Just guessing though.</p>\n<p>The context for why we do this is actually <em>because</em> some IndexedDB implementations (like Safari's until 10.1) aren't good enough for us to rely on, so we use WebSQL instead. I just realised that the comment that explains that has an issue reference for PouchDB, so I'll edit that comment. Here's the issue though: https://github.com/pouchdb/pouchdb/issues/5572</p>\n<p><code>window.fetch</code>, in this case, is just an easy way to check for Safari's version. If there's another one that's less likely to be stomped on by an extension I'm okay with that. \ud83e\udd37\u200d\u2642\ufe0f</p>\n<p>But we do need the check because we can't have older, buggy Safari versions using IndexedDB.. There's no per-browser settings available for localForage and I don't think we'd introduce such an API\u2013there are better UA agent libraries out there that could do the job \ud83d\ude04</p>\n<p>I think your best bet would be\u2013within your code\u2013to check for Edge and then manually set the drivers you allow. Basically you'd want:</p>\n<p><code>js\nif (isEdgeBrowser) {\n  localforage.setDriver( localforage.LOCALSTORAGE );\n}</code></p>\n<p>It might be worth filing a bug with the Edge team as well about performance with your data set so they can have a point of reference to improve on! \ud83d\ude04</p>\n<p>Hope that helps!. You can include localForage on your site using a CDN like CDNJS: https://cdnjs.com/libraries/localforage</p>\n<p>Hope that helps! \ud83d\ude04 . I\u2019m not sure I understand what you\u2019re trying to do, but we can only provide support for localForage in this repo. If your issue is related to VUE or a VUE localForage package you should file an issue with them. I\u2019m sorry but I can\u2019t help much with your question \u2639\n. I went to https://localforage.github.io/localForage/ and ran the code you pasted here: a console log statement appeared with the text \"1\", which is what <code>value[0]</code> is in your code:</p>\n<p><img width=\"530\" alt=\"screenshot 2018-12-27 11 50 03\" src=\"https://user-images.githubusercontent.com/90871/50479279-a6a09c00-09cd-11e9-85d0-953859e87aee.png\"></p>\n<p>The promise will appear in the console as \"Pending\" at first because it's being returned to the browser console before it's completed, but you can see the actual console log statement being run afterward \ud83d\ude04 . Yes, that is correct; the first value could be written after the second. The library doesn't keep a log of which operations have run and their order.</p>\n<p>If you're using ES7 with async/<code>await</code> syntax, you can ensure they run in the correct order using:</p>\n<p><code>js\nawait localForage.setItem('key', value);\nawait localForage.setItem('key', differentValue);</code>. Does session storage work when cookies are enabled? Are you loading <code>localForage</code> JS files from another origin? My instinct is that there's something happening here with origins, because localForage doesn't seem to think you have a valid driver around.</p>\n<p>Could you provide a URL we could test from to replicate the issue?. If it works with cookies enabled then I think that's the trick. I'm under the impression that session storage has a same-origin policy, so loading it in an iFrame, especially with cookies disabled, might be enough to make things not work. I don't think there's much of a solution there if you have to force session storage \ud83d\ude1e</p>\n<p>There's no way to force a driver that is disallowed by a browser's security model, so you'll need to either have different settings/requirements for users, different infrastructure to load your app, or a different storage driver.. You can read about the version param here: https://localforage.github.io/localForage/#settings-api-config</p>\n<p>It's not used for much but you are getting that error because you're using mismatched version numbers. You probably don't need to be using the version param at all.. Any reason for closing this PR?. Java?\n. This isn't needed I think :-)\n. I think, in general, we don't tend to name files with camelCase, even though we name variables that way. I dunno, it seems at odds with a lot of other JS I've seen. I dislike varying case in my file names.\n. Aha, oops! My bad.\n. I don't understand why this is here. If we wanted to store a <code>null</code> value, why would we change it to <code>undefined</code>?\n. Why initialize this as <code>undefined</code> instead of something more specific? Maybe at least a constant?\n. Is <code>chrome</code> available off the <code>window</code> object? Otherwise this isn't really strict JS.\n. So what happens if this is running inside a Chrome runtime thing? Does IndexedDB work? Or does the entire library fail? We should probably output something in the console that says something?\n. Ah, cool. In that case, <code>localStorage</code> shouldn\u2019t really ever be loaded, unless it\u2019s forced. In the case that it was I\u2019d expect an error to be output. But we can add that later. Thanks.\n- tofumatt</p>\n<p>On January 13, 2014 at 21:57:20, Bouhlel Moez (notifications@github.com) wrote:</p>\n<p>In src/localStorageWrapper.js:</p>\n<blockquote>\n<p>@@ -2,8 +2,10 @@</p>\n<p><code>'use strict';</code>\n-    // Initialize localStorage and create a variable to use throughout the code.\n-    var localStorage = window.localStorage;\n-    // Initialize localStorage and create a variable to use throughout the code as long it's not running inside a google chrome packaged webapp.\n-    var localStorage;\n  indexedDB is supported, it will works without the need to add permission on the manifest file.\n  localStorage/sessionStorage are not allowed to access (replaced with chrome.storage API: http://developer.chrome.com/apps/storage.html http://developer.chrome.com/apps/app_deprecated.html)</p>\n</blockquote>\n<p>\u2014\nReply to this email directly or view it on GitHub.\n. Interesting! Internally I believe it's called \"MobileSafari\", so us old-timey iOS devs call it that still.\n. It's not, but there's an issue to allow selection of a specific one. I'll mark this as a TODO in the README.\n. Whoops! I removed it but forgot to <code>git push</code>\n. I should see which option results in fewer characters, for efficiency ;-)\n- Matt</p>\n<blockquote>\n<p>On Feb 1, 2014, at 1:19, Fred Wenzel notifications@github.com wrote:</p>\n<p>In dist/localForage.js:</p>\n<blockquote>\n<p>@@ -1277,7 +1304,7 @@ requireModule('promise/polyfill').polyfill();\n             db.transaction(function (t) {\n                 // Ahhh, SQL makes this one soooooo easy.\n                 t.executeSql('SELECT COUNT(key) FROM localforage', [], function (t, results) {\n-                    var result = results.rows.length;\n-                    var result = results.rows.item(0)['COUNT(key)'];\n  Interesting that websql actually uses that as the key here. I usually rename that column to not cause any mess with the parentheses.</p>\n</blockquote>\n<p>\u2014\nReply to this email directly or view it on GitHub.\n. No, but casperjs has (had?) a bug that causes localSforage state to persist between tests. Maybe this isn't needed though; I'll try to remove it. If it needs to stay I'll document it better.\n- Matt</p>\n<p>On Feb 1, 2014, at 1:21, Fred Wenzel notifications@github.com wrote:</p>\n<p>In test/init.coffee:</p>\n<blockquote>\n<p>@@ -0,0 +1,19 @@\n+'use strict'\n+\n+casper.TEST_URL = 'http://localhost:8181/'\n+\n+casper.test.begin \"Pre-test setup\", 1, (test) -&gt;\n-  casper.start casper.TEST_URL, -&gt;\n-    casper.test.info 'Clearing out localStorage'\n  +\n-    # Clear localStorage from any previous test runs.\n-    @evaluate -&gt;\n-      window.localStorage.clear()\n  +\n-    # Test that localStorage is empty to prevent any weird existing state bugs.\n  Uh, does clear() ever not work?</p>\n</blockquote>\n<p>\u2014\nReply to this email directly or view it on GitHub.\n. Yup. It might just be old habit, but I thought the validator complained about <meta> tags without the self-closing bit. I usually don't even bother with it for <img> tags.\n- Matt</p>\n<p>On Feb 1, 2014, at 1:21, Fred Wenzel notifications@github.com wrote:</p>\n<p>In test/localstorage.html:</p>\n<blockquote>\n<p>@@ -0,0 +1,13 @@\n+&lt;!doctype html&gt;\n+<html>\n-  <head>\n-    <meta charset=\"utf8\" />\n  Do you use self-closing tags in HTML5?</p>\n</blockquote>\n<p>\u2014\nReply to this email directly or view it on GitHub.\n. Because technically it's not headless; Gecko's architecture requires that it output to something visual so it can't run truly headless like WebKit. You'll notice a little window actually launches when the SlimerJS tests run.</p>\n</blockquote>\n<p>Maybe I should link to the explanation in that bit.\n. Oh, right, should be <code>null</code>. The localStorage API is weird and returns <code>null</code> on keys that don't exist rather than <code>undefined</code>. Up until now I've been copying it/Gaia's asyncStorage behaviour and doing the same, but honestly I think in the future we should change this to be undefined. For now I'll just update the test text though, and it should be <code>null</code>.\n. It's a special thing casperjs injects into the page to let us do things like echo vars inside the DOM context and such. It's documented in casperjs, but I'll add a note about it here too.\n. That's nicer, thanks :+1: \n. :+1: \n. Why don't we ignore the README?\n. It reads here like <code>store</code> is either assigned as <code>model.offlineStore</code> or as a boolean. What happens if <code>store === (model.collection &amp;&amp; model.collection.offlineStore)</code> here?</p>\n<p>I wonder, should this be:</p>\n<p><code>javascript\nvar store = model.offlineStore || (model.collection &amp;&amp; model.collection.offlineStore) ? model.collection.offlineStore : null;</code></p>\n<p>Less pretty, but seems more accurate.\n. Does this change my steps for setup when I checkout the repo from git? Can I still just type <code>npm install</code> and everything gets installed? <code>devDependencies</code> always seem to get installed, so I never understood the difference.\n. Ah, well that sounds perfect then. Thanks!\n. Ah, cool. Forgive my JS haziness on that one.\n. Why this change?\n. Thanks! :-)\n. This seems odd; why do we have to add in an empty sync now?\n. Should we add a test to make sure the original sync method stays intact? Or is that sort of a moot point now?\n. Oh, I see now. That's a bit unintuitive but makes sense.\n. I think this is fine now that I understand how it works :-)\n. We don't rely on ASI, so this line would need a semicolon.\n. Instead of these confusing if/else statements, I would add the method to all drivers.\n. This is unneeded, as Travis already runs <code>npm install</code> before running the tests.\n. Is this strictly required?\n. I'm assuming you wanted <code>grunt build &amp;&amp; sh test.sh</code> here?\n. Ohhh, I getcha.\n. Everything past here results in:</p>\n<p>```</p>\n<h1>stack: not provided</h1>\n<p>FAIL SyntaxError: JSON.parse: unexpected character</p>\n<h1>type: uncaughtError</h1>\n<h1>file: /Users/matt/Dropbox/Projects/localforage/test/test.drivers.coffee</h1>\n<h1>error: JSON.parse: unexpected character</h1>\n<h1>clone@file:///Users/matt/Dropbox/Projects/localforage/node_modules/grunt-casper/node_modules/casperjs/modules/utils.js:129</h1>\n<h1>evaluate@file:///Users/matt/Dropbox/Projects/localforage/node_modules/grunt-casper/node_modules/casperjs/modules/casper.js:700</h1>\n<h1>@file:///Users/matt/Dropbox/Projects/localforage/test/test.drivers.coffee:52</h1>\n<h1>runStep@file:///Users/matt/Dropbox/Projects/localforage/node_modules/grunt-casper/node_modules/casperjs/modules/casper.js:1553</h1>\n<h1>checkStep@file:///Users/matt/Dropbox/Projects/localforage/node_modules/grunt-casper/node_modules/casperjs/modules/casper.js:399</h1>\n<p>```</p>\n<p>For slimerjs.\n. Yeah, it seems like it's some kind of slimerjs bug I guess. Maybe I'll just leave it be for now and only run those tests with phantom.\n. What is <code>factory</code> here? I don't see it defined anywhere, but is it a browserify thing?\n. Oh, wait, I see it now. Just a bit hard to follow.\n. Yeah, I'm cool with it. Just didn't immediately catch it reading it here. No worries.\n. Should this be exposed like it's part of the public API? Does any developer have cause to call this on their own, or is it localForage-only? If so, maybe we can advertise its private-ness with a leading underscore or something.\n. We already define <code>localStorage</code> above; why is this here?\n. What's that for?\n. Please put spaces around the <code>+</code> and variables so it reads:</p>\n<p><code>javascript\nt.executeSql('CREATE TABLE IF NOT EXISTS ' + dbInfos.storeName + ' (id INTEGER PRIMARY KEY, key unique, value)', [], function(t, results) {</code>\n. Unneeded space before <code>)</code> here.\n. The assumption would be that the key would always exist, so rather than a regexp you could just do a <code>.substring(prefixKey.length - 1)</code> here.\n. <code>prefixKey = dbInfos.dbName + '/' + dbInfos.dbVersion + '/' + dbInfos.dbVersion;</code> reads better, but I'm pretty sure just the <code>dbName</code> is fine for localStorage. We don't need that much namespacing for it.\n. Obviously this is crazy late response, but I commented them out for the time as the branch was in development. I have the ArrayBuffer tests running now. Just Blobs, then we're good!\n. I'm guessing this causes a test to fail, but even if not, please use <code>mixedCase</code> for variable names that aren't <code>CONSTANT_NAMES</code> :-)\n. This should use <code>===</code>.\n. I'd like to keep it for now, unless it's a problem. I like the idea of allowing global usage and keeping the global functionality at least <em>close</em> to the require/<code>new localforage()</code> version.\n. What does this field represent? These files are used for development, but never really meant to be used directly, individually from the browser.\n. As I understand it, this will break... browserify I think? @magalhas, is this okay to do?\n. All of the files in the <code>src</code> folder aren't meant to be consumed individually though. They shouldn't be relied upon for production use; that's what the <code>dist/localforage.js</code> file is for. I'm confused as to why anyone but someone developing localForage needs to do with the files in <code>src/</code>.\n. Okay, that makes sense then. Thanks for explaining.</p>\n<p>Any chance you're familiar with CasperJS tests? If you could write one I can merge this in sooner, but before we merge this in we need to write a test showing it works and that it doesn't break browserify.</p>\n<p>Let me know if you can write said tests; otherwise I will get to them, likely later in the week.\n. This sentence is a bit awkward. I might try something like:</p>\n<p>Different browsers have different storage limits, so plan accordingly.\n. Is there no grunt component task? This seems pretty hacky. I usually just use <code>grunt-shell</code> for automating things I do locally but aren't required for building/development.\n. Why isn't this included in localforage? localforage needs promises to work; what happens if I just install localforage from component without including this manually?\n. Does it work on Windows?\n. It needs to be an ES6-compatible polyfill, and yes I would like it included. I consider localforage a drop-in library. If users install localforage from component as-is, they\u2019ll get an error. Installation should be error-free ^_^\n- tofumatt</p>\n<p>On April 22, 2014 at 12:50:17, PG Herveou (notifications@github.com) wrote:</p>\n<p>In test/test.component.html:</p>\n<blockquote>\n<p>@@ -0,0 +1,15 @@\n+&lt;!doctype html&gt;\n+<html>\n-  <head>\n-    <meta charset=\"utf-8\">\n-    <title>Component Test</title>\n-  </head>\n-  <body>\n-    <div class=\"status\"></div>\n-    <script src=\"../bower_components/es6-promise/promise.js\">\n  That would break, if you don't include a Promise polyfill..\n  I thought it would be better to let component user include the promise polyfill of their choice (I personally use https://github.com/then/promise).\n  I can add the dependency if you prefer.\n\n\u2014\nReply to this email directly or view it on GitHub.\n. Oh? ^^\n. No prob :-) I\u2019ve added the Gruntfile to the jshint checker, though it doesn\u2019t even seem to complain about that one, so maybe I need to make it more aggressive! ^^\n. Can we just check for the exstence of the localStorage variable, or does it turn up inside the context of say, a web worker? I don't mind setting this key, but I would prefer to step on as little as possible here. :-)\n. Is there an advantage to using !('setItem' in this.localStorage) over !this.localStorage.setItem?\n. Does this bother to deserialize data from localStorage? It seems like no, so I would think it would break the tests. Might be better even to use our own getItem() method here?\n. Likewise, we usually (silently/magically) serialize data in WebSQL behind-the-scenes, so this might not work as expected. I think we'll need to use getItem() here too. (Using the public API as much as possible, even internally, makes sense to me.)\n. Technically I think this belongs outside the localStorage API checks and in another part of the tests, but I'll fix it :-)\n. Oh, that's slick. I think we could do that elsewhere too (I use typeof in a lot of tests). Want to file an issue on that and I'll clean them all up at some point?\n. What does the --dev flag do? Just want to make sure we work in production too.\n. Pretty sure the first one was just a bad hack by me to get some tests working?\n. I'm not quite clear on what this does--the comment below doesn't make sense to me. Is this supposed to run any tests, or just stub out the methods so the require version loads them again?\n. It might be handy to add in some comments explaining what this does. I understand it and it's clever, but a bit opaque.\nAlso, is there a way we can automate this? It seems brittle to rely on adding methods in here and to each driver. I'm okay with it, but if we could do it with metaprogramming that'd be great.\n. ## I think a good indication of the API method being public is not starting with an underscore, good idea. Works for me. \ntofumatt (Sent from mobile)\nOn July 21, 2014 4:04:09 AM EDT, Beng Hee Eu notifications@github.com wrote:\n\n\n@@ -165,6 +165,29 @@\n         }\n     };\n-    var libraryMethods = [\n\nSure, will add some comments.\nIf the drivers are not lazy loaded, it could be automated by iterating\nthrough a driver's methods which do not start with a _. Would be\ncleaner not to have to hard-code, but I guess since the public API is\nstable, it shouldn't be too brittle?\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/mozilla/localForage/pull/212/files#r15157793\n. ## Ah, that explanation is perfect! That's what I thought but wasn't quite sure. Yes, if you could update the comments with your explanation here that would be great. \n\ntofumatt (Sent from mobile)\nOn July 21, 2014 4:47:22 AM EDT, Beng Hee Eu notifications@github.com wrote:\n\n\n@@ -0,0 +1,19 @@\n+/* global beforeEach:true */\n+var mocha = this.mocha;\n+\n+mocha.setup('bdd');\n+\n+beforeEach(function(done) {\n\nIt isn't very easy to test the API method stubs inserted by\ncallWhenReady, since they are replaced by the driver as soon as it\nloads. To ensure that they work when the drivers are loaded\nasynchronously, this runs the entire test suite (except for config\ntests), but with localforage reloaded before each test, so that it\nwould be initialized again.\nThis ensures that the synchronous parts of localforage initialization\nand the API calls in the tests occur first in every test, such that the\ncallWhenReady API method stubs are called before RequireJS\nasynchronously loads the drivers that replace them.\nIs that sufficiently clear? If so I'll change the comments to summarize\nthe above.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/mozilla/localForage/pull/212/files#r15159105\n. Fair enough; that was lazy writing :-1:. I'll tweak the comment.\n. I get that these are for some kind of doc system, but we don't use one, so I don't think they're needed. I'm not really interested in following Google's docs, as another doc builder should be able to infer types, and also it looks like Java docs.\n. At some point I'd even like to rename these internally; they're a leftover from code from Gaia.\n. Do these need to be quoted?\n. Oh, okay. They're good as-is, was just curious. \n- Matt\nOn Aug 4, 2014, at 7:45, Thodoris Greasidis notifications@github.com wrote:\nIn test/test.api.js:\n\n@@ -55,6 +55,22 @@ describe('localForage', function() {\n             });\n         }\n     });\n- \n-    it('does not support object parameter to setDriver', function(done) {\n-        var driverPreferedOrder = {\n-            '0': localforage.INDEXEDDB,\n  This might not be necessary (for all browsers) but since object property names are converted to strings (on object literal declaration and when accessing with the bracket notation) I thought this was the best way to go.\n  Without this PR, this object literal works as a parameter to setDriver.\n  Do you want to change the commit to make them look like numbers?\n\n\u2014\nReply to this email directly or view it on GitHub.\n. Agreed, I like that cleanup.\n- Matt\nOn Aug 4, 2014, at 7:46, Thodoris Greasidis notifications@github.com wrote:\nIn src/localforage.js:\n\n@@ -79,11 +79,7 @@\n         setDriver: function(drivers, callback, errorCallback) {\n             var self = this;\n-            var isArray = Array.isArray || function(arg) {\n-                return Object.prototype.toString.call(arg) === '[object Array]';\n-            };\n\nif (!isArray(drivers) && typeof drivers === 'string') {\n  isArray looks redundant here since a typeof check follows.\n\n\n\u2014\nReply to this email directly or view it on GitHub.\n. Oh my, I feel like this shouldn't be disabled in the JSHint rules. I'd rather explicitly define which variables we'll be referencing in either each offending file (and why) or in the globals object inside this jshintrc.\n. Should we rely on any version? What if they make breaking changes?\n. \\n EOF please! :wink: \n. Stray extra <head>?\n. Why remove this test? I guess it should never happen now?\n. Nice being able to remove all of this :-)\n. Super minor nitpick, but in the future please use consistent quote type for strings (we use ' in localForage). I'll just fix it next time I go through things, and see if I can add it to the styleguide linter.\n. Works for me :-)\n. What does this one mean?\n. Cool, feel free to check off #228 when you do ^_^\n. Ahhhh, gotcha.\n\nCan you include a note about that in the code? Just don\u2019t want someone else to stumble upon it and not know what it does.\n. That's definitely better, thanks :)\n. This is required to prevent errors in IE 8/9 and also some earlier versions of Android, so we'll need to find a way to include it.\n. Stray character here!\n. Add the \\n back into here too, thanks :-)\n. What's wrong with using this? I know we switched to using it over window for a reason (though now I forget what it is).\n. Whoa, good catch. I thought I fixed both of these but I guess just the one.\n. We don't return it anywhere else yet; let's leave it empty for now and make returning a promise from config a separate PR if wanted. It's not a bad idea, but I'd want it to always return one which it looks like config() doesn't.\n. I'll fix this and a few whitespace things before merging, but it's \"compliant\" :smile: \n. If we could keep this in but just use a callback function() {} instead it would help to illustrate the difference between the APIs better.\n. Only two spaces here, but should be four. ^_^\n. Sorry, I messed up. function(err, value) { alert(value) } is perfect :-)\n. Couldn't this go here instead of in its own file?\n. I think you'll need to add this catch back into this. The test that you patched is there to make sure the promise is rejected properly I believe.\nI think we added the catch calls everywhere to make sure errors bubble from the right place... you'll need to add it back in I think to get the tests to pass instead of adding the require?\n. Why this change? JSHint should be okay using double quotes when there are single quotes inside. (And I find that easier to read/write than using the \\)\n. I'm surprising our code style rules didn't complain about this, but please use a newline for the contents of a function.\nI've made a note to fix this (#319).\n. I'm Canadian, I like my double quotes ;-)\n. I agree with @thgreasi here, changing it back would be better (and fewer lines and easier to follow).\n. ## Yes, changing them back would be good :-)\ntofumatt (Sent from mobile)\nOn 8 December 2014 17:11:19 GMT-05:00, lu4 notifications@github.com wrote:\n\n\n@@ -543,7 +631,7 @@\n             try {\n                 callback(JSON.stringify(value));\n             } catch (e) {\n-                window.console.error(\"Couldn't convert value into a\n  JSON \" +\n-                window.console.error('Couldn\\'t convert value into a\n  JSON ' +\n\nI was changing all of the double quotes in the file automatically,\nseems the IDE have also changed these lines, should I put it back?\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/mozilla/localForage/pull/318/files#r21490557\n. Oh, sorry, I wasn't very clear. I would prefer the code not have any one-line functions, so:\n\nfunction() {\ncode() \n} \nInstead of\nfunction() {code() } \nSorry for the bad format, I'm on my phone right now.\ntofumatt (Sent from mobile)\nOn 8 December 2014 17:30:31 GMT-05:00, lu4 notifications@github.com wrote:\n\n\n\nt.executeSql(query,\n  [keyFn(item, index), value], undefined, function(error) { resolving =\n  false; reject(error); });\n}\n});\n})(items[index], index);\n}\n} else {\n// According to:\n//\n  http://stackoverflow.com/questions/10031605/optimizing-websql-local-database-population/10031717#10031717\nfor (var key in items) {\nif (items.hasOwnProperty(key)) {\n(function(item, key) { // This is\n  required due to async nature of _serialize\n_serialize(valueFn(item, key),\n  function(value, error) {\nif (error) {\nreject(error);\n} else {\nt.executeSql(query,\n  [keyFn(item, key), value], undefined, function(error) { resolving =\n  false; reject(error); });\n\n\nnot sure I understand this one, what do you mean by \"new line for the\ncontents of the function\"\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/mozilla/localForage/pull/318/files#r21492008\n. Should this be filed as a separate issue?\n. Okay. I think I should focus on fixing the saucelabs tests then, so we can\nrun these tests on actual browsers. I can probably make that a holiday\nproject :smile:\n. Why the try block here, seems like we shouldn't be try / catching tests :-) \n. Ah, cool, sounds good. Thanks for the really informative comment :+1: \n. Is this only stored for the test? If not, I would think just attaching it to the localForage instance would be best. eg:\n\n``` javascript\nvar localforage = LocalForage.createInstance();\nconsole.log(localforage._batch);\n=> []\n```\nIt shouldn't be a \"public\" variable or part of the API but I think that would work.\nOr maybe I'm missing something.\n. Dunno why the linter didn't catch this, but each var should be on its own line.\n. Why do we need to have an es5src folder of the individual components? I don't think this needs to be more than a build artifact. I would rather reduce the ways people can include localforage.js, so I don't mind if this means require people need to just import the whole file. I think that's easier to support.\n. While we're changing so much about how things are defined and imported, it seems like a great opportunity to rename these drivers to something more meaningful (see #270).\n. Oops, sorry, this is all build artifact stuff, I'll move the comments.\n. Works for me, though I\u2019d also be happy if it output to like a .tmp/ folder or something. Just to avoid confusion. :-)\n- tofumatt\nOn Mon, Jul 13, 2015 at 4:36 PM, Thodoris Greasidis\nnotifications@github.com wrote:\n\n\ngrunt.initConfig({\n-        babel: {\n-            options: {\n-                loose: 'all',\n-                modules: 'umd',\n-                moduleIds: true,\n-                // sourceMap: true,\n-                getModuleId: babelModuleIdProvider,\n-                plugins: ['system-import-transformer']\n-            },\n-            dist: {\n-                files: {\n-                    'dist/es5src/localforage.js': 'src/localforage.js',\n  How about just adding it to gitignore? Would this be enough?\n\nReply to this email directly or view it on GitHub:\n  https://github.com/mozilla/localForage/pull/390/files#r34475855\n. Sure, works for me. Just make sure it's in the .gitignore :smile: \n. Fair enough. I can even do that in a separate PR after this. It's less important, you're right :smile: \n. Say that five times fast! :wink: \n. Oh shoot. I didn't mean to do that it must have done the build with an old version. I'll patch that up ASAP. Thanks.\u00a0\n\n\n\u2014\nSent from Mailbox\nOn Sun, Aug 2, 2015 at 8:43 AM, Thodoris Greasidis\nnotifications@github.com wrote:\n\n\n@@ -1828,6 +1829,10 @@ requireModule('promise/polyfill').polyfill();\n         global.webSQLStorage = mod.exports;\n     }\n })(this, function (exports, module) {\n-    'use strict';\n  +\n-    var _systemImportTransformerGlobalIdentifier = typeof window !== 'undefined' ? window : self;\n  Sorry for the naming :disappointed: but this variable name is generated by babel-plugin-system-import-transformer@1.1.4 using the babel-provided generateUidIdentifier method to avoid conflicts.\n  The variable itself is used in the code transformations of System.import calls instead of just using var global = window.\n  This\n- is required for web/service workers &\n- allows for better minification, since it appears only once in the outemost scope of each transformed file that uses System.import. (In older versions this would appear once per System.import transformation.\n  It seems that this was reverted by ceab4ad15695e148e3a49ff2a3881264e3eeb841.\n  Can you please confirm that the latest versions of the npm package was used before this commit?\n\nReply to this email directly or view it on GitHub:\n  https://github.com/mozilla/localForage/pull/406/files#r36040512\n. Should be fixed here: 0876fbcb5520d857d7d00b96e9a9edc81b8a76a6\n. Hah, clever :smile: \n. Why this change? You can see above we use i as a zero-index through the keys, so adding one to it then returning does the same thing as returning your 1-indexed variable.\n. Ahhhh, okay. You're right, I was being dense.\n\n\nOddly the test doesn't actually test for it, so I'll rework it and merge it in afterward. Thanks :smiley: \n. Weird! Interesting. Okay, I'll fix that up and try to do it now. I've gotta pack for holiday though, so if I don't do it now I'll get to it tonight :smile: \n. Oh, can we copy this or reference it from the root level? I'm not sure if many people use it, but the point in generating that file was so that people could hotlink to it (and the site itself links to it in the top of the site), so I'd rather not change the URL :smile: \n. That is one of the more impressive ternary statements I've seen in awhile! :smile: \n. :+1: \n. I'm going to rename this to currentDriverPosition; we have the bytes to spare :wink: \n. We can certainly change it. I wrote that so long ago I can't remember why, and it's worth changing ;-)\nI'll do that outside this PR (or when we merge it in): #453 is filed for it :smile: \n. Any reason you're using j over i? ^^\n. If there's no harm to @thgreasi's suggestion I _think I agree with him, but I'll admit my brain gets scrambled by Promises sometimes at this level.\nIf it would be possible to write a test to cover @thgreasi's use-case that would be great. Would it be as simple as:\n``` js\nvar databaseInfo = {\n    name: 'localForaging',\n    storeName: 'helloApp',\n    size: 24903680\n};\nvar db = localforage.createInstance(databaseInfo)\ndb.then(function() {\n    // This should fail?\n}, function() {\n    databaseInfo.size = 5000;\n    db = localforage.createInstance(databaseInfo);\n});\n```\nKind of a contrived example, but it should do the trick? Unless I misunderstand! ^_^\n. Should we just add in the catch and then merge this into master and address this use case later if needed then?\nI'd be okay with that... this patch is awesome. (We can file issues for that as well if you want)\n. Cool, I can be patient. I\u2019ll wait for a bit and check back in when it\u2019s figured out :-)\n. (Sorry for my late reply). I'm in agreement here; the second solution is the more flexible option for developers and I think we should go with it.\nLet me know when the PR is updated and I'll have one last look. :+1: \n. Interesting that this change was made by the compiler.\n. Oh right, forgot to add the dust files into that commit, oops!\n. I don't see any expect calls in these tests so I don't see what they're testing for. If you want called to be more than one you'll want to test for its value with expect, which I think is what you're going for.\n. Thanks for adding the expect calls, but I'm curious: what exactly is this testing for? I'm a bit confused and the PR doesn't have a description nor is this related to an issue.\nWhat bug does this prevent and what are these tests doing?\n. How well does stuff like this work on Windows?\n. This stands for transaction, yeah? I'll go through and expand this, but I am afraid of variable names without vowels \ud83d\ude09 \n. I would just call it memory instead of memoryStorageWrapper.\n. I'd call it memory instead \ud83d\ude04 \n. Hah, yeah ^_^\n. Typo here: \"encouradged\" should be \"encouraged\". \ud83d\ude04 \nOtherwise \ud83d\udc4d \n. Can you expand this variable name? I assume it means transaction, but I like verbose variable names \ud83d\ude04 \n. We could probably at least console.error this or something if console.error exists, just so we don't entirely fail silently (I could see that confusing people in the future).. Niiiiice.. Awesome, thanks for checking it's not a polyfill too \ud83d\ude04 . Should be forcing IndexedDB, right? \ud83d\ude04 . These commented out values can likely be removed, yes?. This could probably use a comment just to explain things a bit more for those unfamiliar with the iterator() function used here.. I wonder if there is already a constant for 'readonly' and 'readwrite' we could use? if not, maybe we can make some rather than repeating the strings everywhere?. Someday when it won't cause massive merge conflicts I'd be happy to move entirely to 2-space indents \ud83d\ude04 . I've logged #740 because eventually it'd be cool to get away from this kind of string concats.. Should these still be marked as pending? That's what xit does, right? Should we remove them or should they be passing?. I've been doing ES6 on add-ons and it's nice to see it creeping into localForage \ud83d\ude04 . Nice \ud83d\udc4d \nDunno if we did this before but that's clever.. Ah, that makes sense. Yeah, I think we did it originally to make sure users didn\u2019t break anything. But I think allowing them to refine them is a good idea, like you say.\nMaybe we could log a console message if they redefine any driver though? That way they at least know what\u2019s up. But yeah, removing these and merging sounds good! \ud83d\udc4d\ud83c\udffb. Oh cool! I'm a bit lazy when it comes to setting up pre-commit hooks but others have recommended prettier too. It seems neato.\nThat wasn't intentional, I think it might have happened by mistake when I fixed most issues using eslint --fix. Fine to change it \ud83d\ude04 . Ah, right. I think it's worth trying... users can always build a version that omits console statements... or maybe we could build our own logger in the future that can be disabled.\nAnyway yeah info or even debug is fine for this \ud83d\udc4d . I think this should say AngularJS 4+ or something like that, to differentiate.. Ah okay, cool. I wasn't sure. \ud83d\ude04 . Could we do this in a more ES6-y way? The for loop and var declaration looks a bit dated compared to the rest of the changes \ud83d\ude04 . \ud83d\udc4d\nI think a comment inline mentioning that's what we're using this for would be useful \ud83d\ude04. Any reason we're using function(db) { here over (db) => {? I'm just used to seeing the more ES6-y type functions these days so I'd prefer we use them in the future if we can.. Seeing the var and also the regular for loop here doesn't seem very ES6-like either, can we do it a bit more functionally?. I'd like an eslint rule on this in general, but I think especially here as we already have a few = on the line, it'd be nice to do (e) => { instead of e => { because I find the parenthesis help indicate a function a lot better.\nAlso, could we use err or error here instead? I know e usually means error but I dislike single-lettle variables \ud83d\ude04 . I don't think we should be using let inside for loops, because JS is weird though the bugs there are kind of fixed. But we aren't re-assigning i at any rate for each loop, so const still makes more sense.. As mentioned before, it'd be cool if we used fat arrow ((resolve, reject) => {}) functions where we can going forward.. As mentioned too, I'd like to see us wrap things like this e in parens and use no single-letter variables, so it'd be cool if this could be req.onerror = (err) => {. Should be const too, if we stay with the loop.. Oh shoot, I realised that, we should do let. My brain got confused because in for... in/of loops it makes sense to use const I think, which we do in the Mozilla addons JS. This is fine \ud83d\ude04 . Nitpick, but this doesn't look like it gets redefined, so this could be a const. Is that rollup being smart and not exporting it? (If so, nice \ud83d\udc4d). Haha, great comment, this made me laugh out loud. \ud83d\ude06 . Should this maybe be hasBuggyIndexedDB or hasBuggyIndexedDBImplementation? Just to be extra clear about it and what we're checking for here.. I think this check could just be rolled into the hasBuggyImplementation function above. Consolidation is good, especially for checks like this.. Heh, we should probably have some kind of test-specific eslint to cover this... I think we can do that, right? (Can be done later, no worries.). I think we have space here to describe this as IndexedDB over IDB \ud83d\ude04 . Should we use something like semver instead to verify the right versions are being allowed instead of setting them manually in the test? This seems like we're just manually setting them as valid which could get tedious when we want to keep adding new versions (which might be a good idea in the future, I dunno).. Ah actually fair point. Two separate objects is nicer, yeah. That will do the trick \ud83d\udc4d . I don't think a lot of these comments are needed. Some of them seem copy+pasted and not even super-relevant to the in-memory driver.. For clear, couldn't see just set self._dbInfo.db = {} rather than manually deleting every key?. Also it looks like that comment isn't even true anymore \ud83d\ude09 . Yeah I think all these comments can go \ud83d\udd25 . This looks like it should be a utility function. Right now it's defined every time setItem is called, which seems wasteful.. I'm guessing this is to return a new copy, but could we use [ \u2026DRIVERS ] for that instead (I forget if ES6 will let us)? Or even use a deep-copy library for the tests?  It just seems more idiomatic than using .slice(), which to me is more taking advantage of the side-effects of slice() than intending to use it to actually change the array. \ud83d\ude03 . I have a branch with this in process. I converted the Api tests already to use karma (tests in all browsers), es6, async/await, etc. I\u2019ll get back to it when I\u2019m back from holiday :-). ",
    "ianb": "Implementing it is pretty easy, but it does require including a promise library of some sort, so you have to figure out what you want, and how to include it.\nFWIW, I have an async wrapper for localStorage here that uses promises: https://github.com/mozilla/togetherjs/blob/develop/togetherjs/storage.js (I'm using jQuery.Deferred, which isn't an option here)\nIn an effort to make it more accurately async, all promises are resolved inside a setTimeout() \u2013 then switching to a real async backend won't be as big of a change.\n. sessionStorage is just like localStorage, but it's local to the tab, so if you have two tabs on the same site they won't see each other's sessionStorage.  I use it to keep TogetherJS's session information.\n. It's annoying, but we do something like this for TogetherJS with Grunt and the requirejs build tool: https://github.com/mozilla/togetherjs/blob/develop/Gruntfile.js#L84 \u2013\u00a0though I'm not sure how to use the bundled Almond requirejs lib only when another loader isn't present.  But that's the point at which you hit up @jrburke for some ideas ;)\n. ",
    "peterbe": "+1 on what @ianb said. \nFYI async-local-storage ships with a promise library in it and one without. https://github.com/slightlyoff/async-local-storage/tree/master/bin Note, you can't use the promises in Firefox so unless you have an explicit promise library that is compatible you'll have to use the async-local-storage-with-Promise.min.js one. \nI'd love to see it possible to use either. jQuery does this too with it's ajax wrappers like $.getJSON().\n. Interesting, from a Node point of view\nhttp://spion.github.io/posts/why-i-am-switching-to-promises.html\n. Might be hard on the removeItem() or clear() but I could actually make good use of this feature since I store both key-value data and then lastly I store a list of all keys. If either of these fail, it would leave my data in \"conflict\". \nNot desperate but it would be impressive a feature. \n. If I'm not mistaken socket.io solves that by you settings an array as part of the options of the list of protocols to try (e.g. Websocket, Flash, long polling, etc) and it tries one at a time till they have all failed. \n. Hurray!  Well done! (/me did not read the actual patch)\n. For what it's worth, rather cryptically, memcache's get() takes multiple keys.\nhttp://code.google.com/p/memcached/wiki/NewCommands#get\n. @kyoshino thanks a bunch! I didn't know. I don't like the \"moz\" part of that but I'm guessing that can be solved with just being careful and falling back on something else if it's not available. \n. \"Translating actual SQL queries\"?? No, all I want is something like localForage.getItems(some array of keys, function(array of responses). \nIt would be moderately trivial to do my own fake wrapper but ultimately what I want is just one query to the database instead of one per every key I want to look up. \n. A lot of js packages ship with a minified distribution version. There doesn't appear to be a golden standard. \nYes, uglify is from npm install uglify-js and a very common tool in the js world. \nI don't know a better way to organize this. After all, the ./build.sh isn't an automated thing but something the maintainer runs when he feels like it. \n. How do others do it? Like popular libs like angularjs. \n. I mean, how do they technically do it? Not if they do it. \nA push webhook in github would be awesome. \n. Here's how I solved it:\nhttps://github.com/peterbe/buggy/blob/master/client/static/js/angularForage.js\nThat could perhaps we made into a proper module so that you don't have to manually mention the $scope. To me it's important to be able to choose between angularForage and localForage because in some callbacks I don't want it to digest the scope until I decide to do so myself. \n. I think @ocombe's repo is looking great and I personally believe it works as a great resource for those of us who like to combine localforage in angularjs code. \nBut I do not think it belongs here in this project. Why add angular support and not React or Backbone or TheNextBigThing. \nKeep it small and to the point or else, in a years time, someone will look at this and think it's bloated and re-write their own clone. \n. This is most likely a problem with being in a Private window. \nSee https://bugzilla.mozilla.org/show_bug.cgi?id=919720#c1 and https://bugzilla.mozilla.org/show_bug.cgi?id=781982\n. better?\n. Can you put a options.banner on the uglify thing in grunt?\n. You mean to basically replace the alert with function() {}?\nNo function(err, value) { alert(value) }?\n. ",
    "sole": "Ah, I didn't know about sessionStorage. I guess it makes more sense when building document-based apps, if you know what I mean :)\n. I'll try doing it myself, then will ask for a mighty r?!\n. hey why did you close the issue? :-)\nI think I'd go for localForage. First because it's a play on localStorage, and second because localforage sounds weird.\nI can do the unification.\n. You are already using camelCase, you! localForage!\nI'll merge if you don't mind. Everything else was using camelCase already O_O\n. GMT!!!\n. I think I guess right when I presume that the reason there are no errors returned is because localForage is modeled after localStorage which likewise doesn't have a way to return 'errors':\nhttps://developer.mozilla.org/en-US/docs/Web/Guide/API/DOM/Storage\nAccording to the spec at http://www.w3.org/TR/webstorage/#storage-0 if we read a key that doesn't exist, we should get a null value. If writing fails, the most it can happen is a QuotaExceededError exception is thrown (!!!).\nNot sure how to proceed about exceptions with an async interface. I guess it's saner to switch to the err, value function signature proposed by @ednapiranha , but then we won't be that close to localStorage. Opinions? :-)\n. r+!\ngood job on having a require.js example too!\nHowever I think it would be good to show which libraries are we depending on. For example, which promises library are you including, etc.\n. r=\n. oh noes! the build broke! r\u2607\n. r :+1: !!\n. I just want to reiterate (as I did on https://github.com/mozilla/localForage/issues/27#issuecomment-34042667) that your average users don't want to run a build script, they just want to download Your Awesome Library That Will Make Things Easy for them, and get on with their business.\nI know your perfectionist/purist side cringes at this thing of checking in build artifacts but so far it's the easier way to distribute them, other than maintaining a separate website with that specific purpose.\n. Your average user, your average user in-a-rush and your lazy users don't want to clone your project, set up the toolchain to be like yours, brew a coffee and wait until your build scripts do their magic.\nMy two cents :moneybag: \n. Ohh that sounded too harsh. I think I need to brew more coffee before I comment on issues.\n:coffee: \u27f5 I need more\n@tofumatt if you tag releases they get into a zip file automatically - although that's certainly not a dist/\n. yo! I see that you like storage so I storage some storage in your storage! :laughing: \n. But it is funny! Also shouldn't you be :sleeping: :P\n. Maybe they upgrade by buying a new computer, I heard that's how Windows users do it :-) (I am seriously not trolling).\n. You can't easily use the \"node style\" requires with the sort of libs we're concatenating together, sort of modifying them. That's why we're wrapping all in the huge closure and then doing what @tofumatt mentions above.\nBrowserify should work fine already. I wonder if you even tried giving it a go, @davidguttman ;)\n. I mean using the library with browserify, not installing it.\n. I think we've had this discussion before... when Jen suggested using node style callbacks in order to check for error values. The conclusion was that it broke the expected return value.\nBut given that we're not using this in the same way that localStorage is used (we don't just use the return value, but send in a callback), we might be able to change that too (and @ednapiranha would be happier).\nThat said, the version number should be bumped or make a giant CHANGELOG item that warns people that the methods have changed their signature.\n. You mean running it in node.js, outside of the browser? Don't you have proper file access in node.js? Databases?\n. It was confusing for Monique, and for me too when I look at it. It doesn't make any sense on the top. That's where we expect a title (localForage in this case) :-)\n. Says something... ;-)\nOK :)\n. That's the code straight from Gaia\n. Been reading the spec. We should be able to store objects that can be stored using the HTML5 structured cloning algorithm, which means storing objects: http://www.w3.org/TR/IndexedDB/#value-construct\nI've consulted with one of my Standardista Advisers\u2122 and he told me that since null is a primitive value (not even an object!) we should be able to store nulls. If this is a bug with IE, how do we proceed? Do we tell them to go file a bug? :)\nFiling bugs may be done here: https://connect.microsoft.com/site/sitehome.aspx?SiteID=136 (maybe)\n. Shall I suggest adding a space between words: Mobile Safari?\nUPDATE: Actually it seems the name of the browser is Safari Mobile http://en.wikipedia.org/wiki/Safari_Mobile\n. I still wonder if this sort of semi-hidden constant is the best way to choose/force the usage of an specific driver.\n. nice! :thumbsup: \n. Nice you added the source of the Promises library - it makes it so much easier to follow where do things come from :)\n. Right, I see you were already worried about this :D\n. ERRRRRRRRR... :unamused: \n. di di di ditto! :dancer:\n. why the \"quotes\" around \"headless\" here?\n. undefined or null?\n. I am seeing __utils__ all the time but I can't figure out where does it come from :-S\n. You should, because it sounds like you're making fun of something that I can't quite get ;)\n. ",
    "jokeyrhyme": "Correct, the API is the same. It's literally just using a different global.\n. I would vote against making sessionStorage automatic in any way. I agree that there are interesting use cases for it, but developers really need to know exactly how it works before they begin using it.\nIf we have a localStorage backend, then I agree that it would make sense to offer a sessionStorage backend as well for consistency. However, it absolutely must be opt-in. It would be very confusing to have a persistent storage system that doesn't persist.\n. Related to #45 ?\n. I have a use case where I only want to use storage mechanisms with decent quotas. This is pretty much limited to IndexedDB and only WebSQL + Cordova. Browser-based WebSQL does not meet my needs.\nAs such, it would be terrific to be able to perform the necessary detection and force localForage to be limited to the desired set of drivers.\n. @fwenzel I already treat WebSQL in Cordova apps exactly the same as WebSQL in the browser, in terms of my API use. The only practical difference is that browsers have weird quirky quotas and related user prompts, whilst Cordova-enhanced WebSQL gives me more space than I would ever ask for.\nSo for my purposes, I wouldn't find any value in treating WebSQL differently within localForage based on the presence of Cordova.\n. With the work completed in #18 , it is now possible to manually set the storage back-end. With a bit of work, and application could be written to cycle through the available back-ends in order, rescuing data orphaned in older back-ends.\n. @fwenzel this may be an issue with iOS and OS X when Apple eventually implement IndexedDB. However, this doesn't seem likely: http://www.chromestatus.com/features/6507459568992256\n\nSafari: Public skepticism\n\nI think it's good practice to prepare for this. What happens to an Internet Explorer 9 user when they upgrade to Internet Explorer 10? Is their profile reset?\n. In practice, does this mean using separate databases in WebSQL and IndexedDB for each namespace? And prefixes in localStorage, etc?\n. Related to #4 ?\n. Could be a duplicate of #70 ...\n. Is it worth internally reading the value back after a task to be really sure that it finished, and polling or something until it really is? Besides the callbacks, does IndexedDB have any events we can use for this?\n. @ocombe is it worth having localForage detect private browsing automatically, regardless of the proposed API changes here?\n. Thanks! So fast! <3\n. Thanks ! <3\n. Could be a duplicate of #145 ...\n. Could be a duplicate of #70 ...\n. I am using webpack with babel-loader, and I've changed the way I use it, from:\n{ test: /\\.jsx?$/, loader: 'babel-loader' }\nto:\n{ exclude: /localforage/, test: /\\.jsx?$/, loader: 'babel-loader' }\nSo my project can compile with Babel 6, without ever detecting the Babel 5 configuration that is supplied with the localforage npm module.\n. The problem with removing the .babelrc file, is that babel will refuse to touch any of the files in the package. Which is fine for babel-using consumers who do import localforage from 'localforage';, but will break any consumers that do (for example) import localforage from 'localforage/src/localforage';.\nThis is only an interim problem, as you say, because:\n1. babel 6 support is coming soon, anyway, and\n2. ES2015 source files within an npm package will eventually be able to run on V8 / Node.js without babel\n. Just found this: https://github.com/bkonkle/babel-preset-es2015-loose\n. I have a PR #498 to solve this problem for any files in the \"dist\" directory within the package. If that is accepted, then you may wish to close this Issue.\nHowever, if you wish to track babel 6 compatibility in general, then it may be worth leaving this Issue open regardless.\n. There's no breaking change.\n\naffects projects that consume the default package \"main\"\n\nBy this I mean projects that just import localforage from 'localforage'; (the designated \"main\" file in package.json).\n\nor other files in the \"dist\" directory\n\nBy this I mean projects that import localforage from 'localforage/dist/localforage.nopromises'; (for example)\nNo consuming project has to make any changes as a consequence of this. In fact, this allows more consuming projects to build correctly with babel.\n. The only downside (if any) is that all files in this project that need babel MUST be located within the \"src\" directory. As this is already the case, and is likely to be the case for the foreseeable future, it doesn't seem like such bad limitation.\n. Yeah, it's definitely a weird compromise. Thought I'd run this past you anyhow and see what people thought. Having a second .babelrc in the \"test\" directory also seems weird.\nAs you say, this is of limited benefit once babel 6 is supported.\n. Actually, even once babel 6 is supported, there'll still be some theoretical value here.\nIn babel 6, the \"loose\" option was dropped (well, moved) which made old .babelrc files throw errors. If babel 7 (for example) similarly breaks when it reads .babelrc files for babel 6, then we'll just run into the same problem next time.\nIdeally, we want the files that are babel'ed here already (those in \"dist\") to have nothing to do with babel.\n. If we're using the latest babel now, then there's no need for this.\n. ",
    "areologist": "In a mobile-first SPA where many users had browsers that capped localStorage at 2MB--but did not limit sessionStorage at all, interestingly--I marked some data as high priority for persistent storage and then push the lower priority data sets (lazy loaded) off to sessionStorage if localStorage is at or near the quota. Better to load once and cache then load every time. (Incidentally, I'm now looking to build an Angular SPA and use localForage--if I'd had time I might have attempted to wrap IndexedDB, etc., but this wasn't in the cards.)\nHowever, I agree with jokeyrhyme that shifting from local- to sessionStorage should not be automatic. Thinking I might prefer having distinct localForage and sessionForage libraries, where sessionForage similarly offers facade that might use WebSQL or IndexedDB under the covers.\n. I agree with michielbdejong. It's been useful to me to have a sessionStorage fallback strategy in a particular app but I don't think it would add value to localForage. And it would be confusing given that sessionStorage differs between sessions and browser tabs. In the specific cases where it makes sense to have a sessionStorage fallback it still makes sense to have distinct interfaces under the hood.\n. ",
    "hsablonniere": "Where are we on this one? Would you be interested in a pull request?\n. Fair enough...\n. ",
    "michielbdejong": "I think adding sessionStorage as a backend makes no sense, if I want to use sessionStorage on a device that supports it, then why not use it directly? The asynchronous API of localForage would be reduced to just syntactical anti-sugar, and under the hood sessionStorage would still be blocking the main thread.\nI think what is requested here is a mode in which localForage behaves like sessionStorage: On pageload, generate a unique namespace which identifies the currently open tab, and scope everything to that namespace for as long as the tab is open. So if you open a new tab, or refresh the page, you don't see any of the data that was created elsewhere or earlier. You would then also have to periodically clean up namespaces from crashed or closed tabs.\nIMHO sessionStorage is a confusing and useless technology, but if people have a reason to use it (like quota circumvention), then they would obviously benefit from having a \"sessionForage\" to switch to\nMy 2ct.\n. > so I can store data and files\nIntuitively I sort of understand this distinction, but I'm having some trouble making it concrete. Is it fair to say we think of files as data that is \"probably binary\" and \"probably big\"? That seems to match the remark in the 22113e9 commit message:\n\nThis partially addresses #69, as it allows for Blob storage, but doesn't\naddress the issue of extremely large files, which neither localStorage nor\nWebSQL will support (their limits are too low).\n\nNow that binary data is supported by all backends, I still see a use case for a filesystem backend.\nI might some day try to build a custom backend that writes straight to the raw file system (using the key as the filename and the value as the file contents), so that I can use the sd-card on FxOS when available, and fall back to IndexedDB in other environments. Would have to work out how to deal with non-Blobs and key enumeration. But I would expect it to be faster than the IndexedDB backend for some use cases (it would bypass all of IndexedDB's unused complexity).\n. I think onversionchange refers to the version of the database as a whole, and can't track versions of individual items.\nAs @inf3rno noted on #104, probably SharedWorker would be an option, but it's still only 50% implemented on desktop.\nFrom the OP:\n\nIf a user changes something within the popup it should be possible to see the updates\n\nThe particular case where one window is a popup can be solved with postMessage to the parent window.\nIt's harder (impossible?) when the user opens two unrelated windows on the same domain. The only hack I can think of would be if each window periodically does an explicit getItem call (maybe of a special '_changes' item).\n. Well, it's extra surface where bugs can hide, that's the main downside I think.\nIn terms of behavior, the only difference I can think of would be - if the user refreshes the page before the queue is flushed, then you would only see AbortErrors for the running batch of writes, not for the queued ones. But I think most people ignore AbortErrors anyway :)\n@bakulf can you think of other downsides?\n. Thanks! I agree a single FIFO queue of write operations is simpler.\nI just realized read operations should still return the old value until the write operation is complete. I think that's how it works anyway in IndexedDB. So if we call the callback of the write operation from the oncomplete of the transaction that commits it, then I think the behaviour is correct with just always reading straight from the database.\nA queued write operation has not happened yet, its callback has not yet been called, so its effect should not be visible in reads yet.\nI'll prepare a PR! :)\n. @lu4 yes, I wrote a draft, but then ran into some difficulties trying to run the tests on my machine.\nBut let me just rebase and publish what I have!\n. I was thinking something along these lines.\n. > I was looking forward to implement a separate bulk save, however if this approach doesn't modify the interface it's obviously more preferable\nDoesn't that contradict your PR #318 for adding a setItems function? What made you change your mind?\n. IMHO it would be confusing to make people adapt to an API change if the batching is done automatically anyway. I would say it should be either/or.\nLet's first wait to see what happens with #318, and if it  makes it through review then I think we should stop working on the automatic version.\n. Actually, it's not so important, because in the pull request I'm preparing for batching writes together, this code would change anyway.\n~~But looking at http://www.w3.org/TR/IndexedDB/ I don't see why any browser would throw an AbortError when what it should be throwing is a QuotaExceededError? Maybe I'm misunderstanding the code here.~~ Got it now, the event is 'abort' and not 'error' even if the error is not an AbortError.\n. Another option is to batch writes transparently, as discussed in #301.\n. Note that once #656 is merged, the separate setItems method becomes unnecessary.\n@kaeverens you say you use a custom plugin, so that's a separate story. What speeds are you seeing storing items one-by-one in your external Sqlite database? Is that similarly slow?. FYI in the context of this PR - IMHO there is a choice between this PR (explicit batching) and #301 (automatic batching).\n. @nemn the \"several minutes waiting\" problem is fixed in https://github.com/mozilla/localForage/pull/320 - you can actually build that branch from source if you want to help us alpha-test it!\n. ~~Not sure why~~ that test fails on travis ^ because of #287\n. I just realized the way to test the _updateDatabase and doTask functions is probably to test their behavior when running on the various real IndexedDB implementations, not on a stubbed one. So I'll write those last tests when I have a minute.\nBut first, maybe you can let me know if I'm on the right track here? If localForage is going to expose setItems and removeItems, then you could also build this automatic queueing on top of that, instead of doing it inside the library. That would keep the library simpler (but less performant for naive users who continue to use the unoptimized setItem and removeItem functions).\n. > This branch would solve all the same problems that #318 aims to solve, right?\nafaik yes. I don't think many programmers want/need to control where the exact batch boundaries fall, so automatic batching should be easier to use for them. @lu4 can you confirm?\n. Rebased on current master.\n. I re-read @lu4's earlier remarks about memory efficiency here and here, but still don't understand exactly what the argument is. Here's how I see it:\nMemory usage is always equal to all the data that has already arrived in the browser (for instance, from a download or a file upload) but has not yet been committed to disk. So there are two situations:\n- data trickles in, file by file (in this case automatic batching is optimal, and uses less memory than building up one big batch)\n- all items are available at once (in this case both methods use the same amount of memory, even though explicit setItems does so for a shorter time period).\nThe only reason I can see to ever use explicit setItems instead of automatic batching would be that for saving, say, 1000 items it reduces the number of trips to disk to just 1, and automatic batching still needs 2 trips: first it saves the first item, and then it does a second trip to disk to save the other 999 items. (note to self: and maybe even that effect can be avoided by adding a setTimeout(.., 0) here, have to try that out).\n. It looks like Travis is only running mocha-unit and not the saucelabs tests. I'll see if I can open a saucelabs account myself and try to run all tests that way. I mean, they're executing, but Modernizr.indexeddb is false in PhantomJS, so it skips all the actual testing work.\n. I think there is something wrong with how grunt calls sauce, because it fails in the same way for me locally if I just do SAUCE_USERNAME=foo; SAUCE_ACCESS_KEY=bar; grunt saucelabs-mocha, but if I go into node_modules/grunt-saucelabs/tasks/saucelabs.js and hack the values of this.user and this.key in a few places, it at least succeeds in setting up the tunnel to saucelabs.\n. Hm, \"Disable Sauce Labs tests until we can fix them\" https://github.com/mozilla/localForage/commit/17141c9ac47e327c98340cb26a7911fbd8683a6c seems related.\n@tofumatt how can I run the new tests from this PR? Trying to view /test/test.main.html locally with a browser gives a blank page as well.\n. OK, if I can at least see all the test output that way, that's already a big win - last time I tried I just saw a blank page. Will try to get the tests running+passing locally, at least for Firefox and Chromium on Ubuntu.\n. No, was just busy with other projects. Will try to find time this week!\n. Fixed two tests, the ones still failing are:\n- some of the ones I added (will look at those tomorrow)\n- the four that also fail in master\n. @tofumatt can you think of more things to test? What other things could go wrong that are not covered in the new tests yet?\n. Rebase fixed those other four indeed, thanks.\n. maybe it's because of timing issues? How can I do that differently?\n. Great! Let me know if any action from my side is required.\n. I can resolve the conflicts and put this feature \"behind a flag\". That would have the following advantages:\n\nit's not so scary, because most users will not enable it\nwe can point users who suffer from slow writes to \"try this experimental feature at your own risk\"\nwe can close this PR :) if people report it works well in practice, you can easily enable it by default. Continued in #656. Because of #287, I guess?\n. The tests are passing for the wrong reason now (some tests stay 'pending'). @tofumatt how would you like me to implement the switch? For now I've done it this way. Another option would be to make \"indexeddb with auto-batching\" a separate driver type?. This worries me:\n\nhttps://travis-ci.org/localForage/localForage/builds/197660273#L542\nIt would suggest that all tests for the indexeddb driver are currently being skipped on Travis. :/ Should they be executed on SauceLabs somehow?. setItem gets wrapped in localforage.ready() which means even if localforage is already ready, setItem(foo, bar) effectively becomes Promise.resolve().then(() => setItem(foo, bar)). That's a pity because best performance when setItem is used in a loop, it would have been good if setItem queues its task synchronously. I had a unit test for that, but i'll disable it.. Tests still being skipped in  test/test.api.js and test/test.webpack.html.. Fixed the tests that were failing by removing the call to self.ready() from withing updateDatabase. Speedup in Firefox on my laptop: 4x\n\nSpeedup in Chrome on my laptop: 34x\n\n. Yes, it has been the bottom item on my list of open PRs for years, finally found some time to fix those failing tests! :). r? @tofumatt . Is someone available to review this?. Ran into this, here: https://travis-ci.org/localForage/localForage/builds/197614901. Actually, now also saw this:\ntypescript@2.1.5: wanted: {\"node\":\">=4.2.0\"} (current: {\"node\":\"0.12.18\",\"npm\":\"2.15.11\"})\nSo maybe update straight to 4.2? Is there a reason that the build process is still on node 0.10?. Updated straight to 6.9.5; the resulting dist folder seems to be the same for 0.10, 0.12, and 6.0, but different from the one that's currently in master. Also, npm test keeps creating a folder .tscache, is that related to typescript? I added two small bonus commits to this PR, to address both those issues.. Will try to find some time in the weekend!. Removed the commit that builds dist and rebased on latest master. Thanks! moved it.\n. OK, fixed except where it was already that way in master\n. ",
    "jprichardson": "\nthink adding sessionStorage as a backend makes no sense\n\nTotally agree.\n\nlocalForage implementing its own per-tab namespace is out-of-scope for the library itself;\n\nYep. This library can't get too bloated or it'll lose part of its appeal: simplicity.\n. Thanks for considering. Honestly, my specific use case would be to hack on some of the current drivers. It'd be awesome to be able to modify them without forking the entire repo, but allowing me to just copy a file and in effect, I've created my own driver that I could use. If the changes feel solid, I could then submit a patch to the official ones. \nSpecific features that I'm interest in hacking the current drivers: indexing, efficient ways to get values, etc.\nI completely agree about keeping the API lean and simple. That's part of the awesome value proposition that localForage has :)\n. Ya, I have a specific use case. I wanted to wrap\nhttps://github.com/brodysoft/Cordova-SQLitePlugin which uses\nsqlitePlugin.openDatabase instead of window.openDatabase. But I\ncouldn't because the localForage plugin uses window.openDatabase right\naway.\nOn Thu, Oct 9, 2014 at 10:02 PM, St\u00e9phane Bachelier \nnotifications@github.com wrote:\n\n@thgreasi https://github.com/thgreasi why would you need a custom\ndriver for cordova application ? In my experience, localForage works great\nin cordova apps. It's the better solution I've found for now and it works\nas is with no plugins needed. Do you have any specific use case ?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/mozilla/localForage/issues/267#issuecomment-58607164.\n\n\nSimple & Secure Bitcoin Wallet: https://www.coinbolt.com\nBitcoin / JavaScript: http://cryptocoinjs.com\nFollow me on Twitter: http://twitter.com/jprichardson\n. @tofumatt \nYa, it could easily be added. It'd be just a change in the websql driver:\njs\nvar openDatabase\nif (sqlitePlugin)\n  openDatabase = sqlitePlugin.openDatabase\nelse\n  openDatabase = window.openDatabase\nThe only problem with the aforementioned code is that if the sqlite cordova plugin is installed, localForage would default to that one then. But a configuration option could be used.\njs\nvar openDatabase\nif (options.useSqlitePlugin && sqlitePlugin)\n  openDatabase = sqlitePlugin.openDatabase\nelse\n  openDatabase = window.openDatabase\n?\nPS: I'm still in favor of custom drivers though, there's so much I want to experiment with on this library :)\nCustom drivers could be really easy too:\njs\nlocalForage.setDriver('my-driver', './driver-path.js')\n. > +1 for custom driver and supporting Cordova in a separate repo.\nA  separate repo would be a bit of an overkill though.\n. > Yea but this is a browser focused lib (I think). We should at least create a separate build js file.\nSure, that's all good. Two repos is an overkill. To keep things simple, let's keep cordova support out of this library and just allow devs to plugin their own drivers?\n. Wouldn't this work?\njs\nvar myStore = locaforage.createInstance({storeName: 'my_super_unique_prefix'})\nOn Thu, Oct 16, 2014 at 5:55 AM, Forbes Lindesay notifications@github.com\nwrote:\n\nIt's possible to namespace your local forage storage so that it is less\nlikely to conflict with any other users of local storage/WebSQL/etc. by\ndoing:\nlocalforage.config({storeName: 'my_super_unique_prefix'});\nHowever, that configuration is then shared among all users of localForage.\nWhat would be really useful would be a way of having an instance of local\nforage for each different library that uses local storage so that each\nlibrary can use its own namespace. Something like:\nvar myStore = localforage.namespace('my_super_unique_prefix');\n// now use myStore instead of localforage\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/mozilla/localForage/issues/274.\n\n\nSimple & Secure Bitcoin Wallet: https://www.coinbolt.com\nBitcoin / JavaScript: http://cryptocoinjs.com\nFollow me on Twitter: http://twitter.com/jprichardson\n. Do we know if WebSQL or IndexedDB are fixed in iOS 8.2? As far as I can tell for this https://developer.apple.com/library/prerelease/ios/releasenotes/General/RN-iOSSDK-8.2/index.html it's not.\n. Well, looks like things are still broken: http://www.raymondcamden.com/2014/09/25/IndexedDB-on-iOS-8-Broken-Bad#comment-1898600588 (Raymond Camden updated with a comment yesterday).\n. Related: can we remove the \"key\" function in version 2.x? It's really\nweird. Does it have much utility?\nOn Fri, Oct 17, 2014 at 3:52 AM, Olivier Combe notifications@github.com\nwrote:\n\nI'm not sure if we should fix this, but in localStorage the key function\nwill return the key number n from storage without taking the prefix into\naccount.\nThe function is:\nfunction key(n, callback) {\n    var self = this;\n    var promise = new Promise(function(resolve, reject) {\n        self.ready().then(function() {\n            var dbInfo = self._dbInfo;\n            var result;\n            try {\n                result = localStorage.key(n);\n            } catch (error) {\n                result = null;\n            }\n            // Remove the prefix from the key, if a key is found.\n            if (result) {\n                result = result.substring(dbInfo.keyPrefix.length);\n            }\n            resolve(result);\n        }).catch(reject);\n    });\n    executeCallback(promise, callback);\n    return promise;}\nLet's say that we have 5 keys in localStorage, 3 are from localForage. If\nwe use the method keys we might get the keys 1, 2 and 5, but the index\nwon't be the same as the ones we might be using for the method key.\nIt shouldn't be a really big problem since you can use the method keys to\nget all the localForage keys anyway, but maybe we should put a warning\nsomewhere ?\nWe could also change the function to get the key at index n from\nlocalForage keys (by using the keys function to get all the keys and then\nextracting the n one).\nWhat do you think ?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/mozilla/localForage/issues/280.\n\n\nSimple & Secure Bitcoin Wallet: https://www.coinbolt.com\nBitcoin / JavaScript: http://cryptocoinjs.com\nFollow me on Twitter: http://twitter.com/jprichardson\n. > I'm not sure what the actual gains to removing it would be, as it might not take up much actual code, but if no one seems to be using it we should drop support for it in future versions.\nThe reason that it's important to remove it, is that code rots. Unused code has a cognitive load on the consumer. Code requires maintenance.\nIt's important for us as OSS developers to see ourselves as curators. Much like a museum selects the best pieces of art to show, OSS developers should do the same. Selecting the best functions and classes that fulfill a specific goal. Keeping code around because it's minimal is a bad idea IMHO. I know it feels like an easy thing to do, but in the long-term I think it could harm the project.\nThe key() function is really weird, and since the project has changed a bit, it really should be removed. You could add a deprecation notice now, or chop it off and go immediately to 2.0.0 (assuming you're adhering to semver).\nMy 2 cents.\n. Love this, thank you so much!\n. As far as I can tell, this is not idiomatic JavaScript i.e. passing in a callback that is called more than once isn't really standard. If we're going to have iteration, I'd suggest creating an object called an Iterator or something similar and use an EventEmitter (can also be done manually) to emit (publish) item events. But the API for iteration should be clear that it's going to \"event\" based. \nBut, if the goal of localforage is to be client-side only, is this even needed (because client-side dbs probably aren't that big)? Now that we have custom drivers, we're going to see a lot of Node.js based (leveldb, lmdb, etc) and this iteration functionality would then be very useful - then maybe the goal of the project changes a bit?\nLots to think about; definitely great to see so much interest and activity in this project.\n. > As for the require setup, in PouchDB anyway we converted everything to browserify about a year ago and haven't looked back.\nI also wanted to echo this sentiment. Browserify is an excellent tool that would aid any front end project.\n. ",
    "thgreasi": "Since we have support for custom drivers and this sounds like a crazy enough idea to me,\nI might give it a try in the holidays :)\n. Just published a custom driver that uses sessionStorage in case someone is still interested.\n. @jirislav I'm happy this is useful for you :)\n. Should this be considered closed?\n. If something like this was to be implemented, how the return object should look like?\n- Array of KeyValues\njs\n[{\n  key:'test1',\n  value: 'value1'\n}, {\n  key:'test2',\n  value: 'value2'\n}]\n- or just an object like\njs\n{\n  'test1': 'value1',\n  'test2': 'value2'\n}\n???\nWhat's most preferable of the two in your opinion?\nWhat are the pros and cons in each case in your opinion?\nFor me:\n+1 for obj result\nobj pros:\n- It is more straightforward/efficient in retrieving a specific value.\narray pros:\n- Someone might argue that the array is more convenient for iterating over the results.\n. @tofumatt I was just wandering if anyone could report any edge case or strange behavior when setting any special/reserved key as a property to an object.\nPS: I also like for..in with Object.hasOwnProperty to support pre-es5 browsers. Hope it has the same results.\n. Can you give a try to thgreasi/localForage-getItems ?\nI thought it would be better for developing and reviewing if it was written (initially, until merged) as an extension library for localforage.\nThe jsperf testcases (found in README) gave me mixed results.\nFor big enough number of requested keys the gains are pretty good.\nFor small number of requested keys, chrome does a pretty god job parallelizing the independent read-only requests. As a result the generic method is sometimes faster.\nThe generic method is based on the code described above and it should be the default implementation for any driver that can't offer a better (driver specific) implementation (eg localstorage).\n. This is probably not the best place to discus it, but I have also been experimenting with a startsWith implementation.\n. You can use the aforementioned plugin if you need it now.\n. @tofumatt The plugin itself was structured in a way that would ease the creation of a PR. I could open one after the holidays if we want something like this as part of the main library. In order to reduce duplication, we could wire up the existing getItem method to use the composite version with a single item as a parameter.\nOn the other hand setItems gave me much better performance gains than getItems.\n~~It seems that doing concurrent getItem requests and composing them with Promise.all() works faster than fetching the items in a single transaction when there is no one else writing on the db at the same time.~~ See next comment.\n. :+1: on the plugins... that way we can push new experimental features \nAs a side note & correction on my earlier performance related comments,\nI just had a rerun of the jsperf benchmarks and it seems that the current versions of Firefox (v44) and Chrome (v47) give better result on getItems() than multiple generic concurent getItem() calls.\n. Is this closed by #253?\n. @tofumatt This just occurred in my instances PR. On Travis the tests pass.\n. @olegbl 61bf123429f2f2749b3b15bd150e5cdcc944ba9d fixes my \"Error: SECURITY_ERR: DOM Exception 18\" that was occurring on my local test environment. It looks like the error was caused by the local PhantomJS, not providing any more space for the second webSQL database to open and failed on openDatabase.\n. @karol-f what version of localforage are you using?\nTrying this codepen in private mode on Firefox dev edition 48.0a2 fallbacks to the localstorage driver and succesfully retrieves the stored value.\n. This is an example pen and we are only setting the driver preference order to ease experimentation.\nCommenting out the setDriver() does not affect the result, since this is exactly what localforage does under the hood by default. Keep in mind that setting indexeddb as the only available driver will break the pen on Firefox Private Mode, since as you saw only localstorage is available on that environment.\n. > what's the correct way to detect that all storage engines have failed?\nThe proper way is to check the error thrown as shown in this test case. The same error is thrown on all get/set/remove methods but I prefer to use ready().. Adding a e.preventDefault(); call inside the indexedDB.open().onerror() handler seems to prevent the error from reaching window.onerror(). Sample codepen. Any chance this might have other side effects?. @elyobo thanks for your commitment on this so far.\nI just opened PR #648 that possibly resolves this.\nAs soon as you can confirm that this works for you, we can merge it in for v1.5 .. I'm not sure, aren't they referencing the same object?. Did you got any weird results on other browsers?. What version of localforage are you using?. Since we already have https://github.com/localForage/localForage-observable , should this ticket just have cross-tab notification as a pending?. Just opened localForage/localForage-observable#5 to track the cross-tab support. @tofumatt should we close this one and #244 and move the discussion to the plugin's repo?. Just opened localForage/localForage-observable#6 for this. Any feedback would be great and could help releasing it during the weekend.. It should be easy to make an plain js migration plugin based on what the angular one already does. I imagine having a main LF core (this repo) and several satellite plugins under the other. It would be easy to implement independently, evaluate & reiterate. It would also ease evaluating the implementation & tracking user acceptance (eg npm DLs).\nOn the other hand I'm thinking about a __localforage__system__ instance/db/store for some time now, holding other things like the used instances.. https://github.com/localForage/localForage-removeItems :). Since we can't do a lot about the storage methods that each browser may or may not provide in private browsing mode, (breath)\nhow about suggesting to use the memoryStorageDriver as a last resort and close this issue?\nLocalforage should fallback to the memoryStorageDriver and the API we all love will continue to retrieve data, despite that they will be gone after the private browsing session ends.. @JustinDrake  What's the result of running this example under safari (in private mode)?. This pen uses localforage v1.5 which enables IndexedDB for safari v10.2+ .\nIf you are on safari < 10.2, then IndexedDB is not used because safari's implementation had some issue.\nIf you are on safari 10.2 and IndexedDB is not used in private mode, then I guess that safari doesn't provide it to be used under private mode.\nPlease elaborate.. Agreed. @JustinDrake my bad #650 & #651 mention 10.1+. Sorry for posting wrong version numbers.. Merged a memory storage driver in v2.0-dev branch, which was the suggested way to resolve this.\nIf your browser allows you to use IndexedDB in private mode then :+1: if it doesn't, then the memory storage driver will be used and the LF API will still work and do not break your app. In both cases, when the private mode sessions gets closed, all stored data are lost. Depending on your browser though, different private mode tabs may or may not be able to access the stored data. Chrome allows store sharing across private tabs, while on FF each private tab is sandboxed on its own.. @tofumatt \nIsn't this closed / considered not applicable after merging #153?\n. Do you have any specific transpiler in mind to recommend?\nI would go with traceur for start, since it has been tested well enough by the angular community.\nShould we also emit an es5 folder in the dist directory (or somewhere else)? Should the es5 files be included in the bower package?\n. After some comparison of babel and traceur I spotted some differences.\nI think babel is using object property definition. Is this es3 polyfillable?\n. @stephanebachelier :+1: it look like that loose mode produces cleaner code without the need of Object.defineProperty.\n. Just created a branch to test babel.\nAll the tests pass and the generated code is as readable are the original non es6.\nThe most annoying thing was jshint and jscs on es6 code.\nAlso, the component build does not like es6 so I had to keep a separate es5src.\nAs side notes:\n- Didn't test it on IE8 (maybe next week)\n- It places a global \"use strict\" statement and a global _classCallCheck object.\n  - Maybe I should wrap all the generated code in an IIFE.\n. Thanks @thejameskyle :+1:\nAtm I'm looking at custom module formatters.\nUMD looks very similar to what we currently do to fetch driver modules, except that we also look at the global object as well.\n. Thanks, I will take a look at it asap.\n. @thejameskyle We do import some files programmatically and so I was\nthinking about writing a Transformer to change expressions like:\nSystem.import('aDriver')\nInto something like Esperanto/UMD+Globals.\nDoes this actually make any sense?\nOn Sun, Apr 19, 2015, 09:48 James Kyle notifications@github.com wrote:\n\nWe're looking to improve that in the future, right now if you need a\nglobal in the UMD you can use esperanto http://esperantojs.org like the\nboilerplate does.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/mozilla/localForage/issues/158#issuecomment-94245147.\n. I thought it got removed in the April's es6 draft!?!?!?\n(As you can see the #sec-loader-objects is missing from the current page, as well as any System.import reference.)\n. The current UMD formatter does a great job in creating modules that can be imported using any/many different module systems.\nHowever it does not specify a way on how your code should be written when it needs to import sub-modules\n\nLocalForage tries to dynamically load the drivers and the common Serializer, by guessing the available module system available. It currently supports global and commonjs/browserify imports as well as async loading with AMD/requirejs. That's so that the user can benefit the most of his module loader of choice, no matter what he is using (RequireJS/Browserify/GlobalNamespace).\nI was discussing about creating a Transformer (if there isn't one already) that would allow to programmatically import UMD modules no matter what the module loading scheme is used at runtime.\nI would expect that such a Transformer would change expressions like:\njs\nSystem.import('aDriver').then(...);\nTo something like:\njs\nnew Promise(function(resolve, reject)){\n    if (System && typeof System.import === \"function\") {\n        System.import('aDriver', resolve);\n    } else if (typeof define === \"function\" && define.amd) {\n        require(['aDriver'], resolve);\n    } else if (typeof exports !== \"undefined\") {\n        resolve(require('aDriver'));\n    } else {\n        resolve(globalObject['aDriver']);\n    }\n}).then(...);\nI guess I should probably move this discussion to the babel repo...\nPS: I chose System.import as the default way to programmatically import a module, because it looks like it's the the most promising to become a standard (at some point in the future).\n. First of all, I hope I'm not missing something.\nSince setDriver() require()s the appropriate driver and returns a promise, in order to combine with config we have to:\n- either make config async/returning a promise as well\n- reset the _driverSet promise and state in the documentation that \"you should wait for the  ready() promise in case you use config to set drivers\".\nThe second option is not that bad, since config should not be called after other methods and in any case we also have to wait for ready to get resolved.\nIn short: localforage.config({...}).ready().then(...).\nFeedback please :)\n. Since config is documented as sync and setDriver is async, can you suggest an architecture chance that you think is most appropriate?\n. :+1:\nI will give it a try tonight or tomorrow.\n. I think we could have a unified solution for this issue and #168.\nIm thinking about a new config option, as an array with the drivers to be tested an used.\nAs a result, localForage would test the provided drivers for support, in the order they were provided.\nI will give it a try next week.\n. @tofumatt I don't know if I'm missing any commit\nbut I don't think this issue is closed.\nCurrently working on it. Planning to makesetDriveraccept an array as an argument as well (with a driver priority list).\n. @mshwery After summing up the recent #412 & #413, you might want to take a look at how [open-flight-planner](https://github.com/Turbo87/open-flight-planner) is configured to use localforage. This **is working** both with the latest npm version and the latest master source.\n. Hey @tofumatt\nI just [pushed a commit](https://github.com/thgreasi/localForage/commit/6e397576f7ce743ee36124add0041e4e22c8e2fd) that closes this issue and also includes a refactor required for the [solution discussed](https://github.com/mozilla/localForage/issues/170#issuecomment-46760815) on #170.\nSince this is based on #183, I'm not opening a PR just yet, in order to avoid a **huge** preview diff.\n. Nice. I might make it and open a new PR tonight :)\n. Just opened #190.\n. Have you tried to create a new localforage instance using IndexedDB and then use theclear()` method?\nYou may need to use the actual IndexedDB API to drop the IndexedDB database completely.\nSo, it seems that iOS IndexedDB implementation still has issues?\n@tofumatt How about releasing v1.5.1/v1.6 to use WebSQL on iOS and keep iOS IndexedDB under a flag?. @guopengliang I am not aware of an other way, sorry.. @Pittan On what LF version, driver, browser do you experience that?\nwhen createInstance will clear storage space.\n\nBut the storage still grows up until re-creating instance just like before.\n\nThis was confusing for me, can you provide more info?\nSpecifically\n\nIncrementing DB version number every time\n\nAre you doing this yourself?\n\nwhen createInstance will clear storage space.\n\nCreateInstance doens't do something like this on its own. Do you mean that you use createInstance and then clear from the returned LF instance?\n\ngrows up until re-creating instance just like before.\n\nSome more info or a pseudocode would get me back on track.. >  I found that closing DB expressly\nSo you mean that doing this.localforage._dbInfo.db.close() cleans up your .wal file?. When v1.6 gets released we will be confident that the idb driver will be able to resume from most db states. We could have a connection timeout to close the connection after some time of inactivity, but for performance reasons we currently want the connection to be alive all the time.. Also, the latest v1.5 release should be used if you decide to call db.close() from within your app.. ps: no tests yet :(\n. The sooner I will be able to take a look at the test structures of the project is Monday :-/\n. +1 to has.js :)\n. Is there a reason that travis fails from time to time?\nMy build succeeded after I requested a restart.\n. Hey @tofumatt,\nI created an example page to showcase the results of this PR, but I'm not sure how it should be integrated with existing testing process.\nI'm trying to write some tests by adding casper:nodriver in grunt.initConfig with an extra .coffee and .html file for the actual tests. Unfortunately, I`m afraid my unfamiliarity with casper and coffeescript is crippling me :unamused:.\n. Hello @tofumatt,\nI just pushed a new commit with the required tests (I think).\nPlease comment about any concerns about the code structure.\nDo you think it would be better to clean up the commits and push just one?\nOnce more, my travis build passed but I had to issue 2 restarts...\nWaiting for your feedback :smile: \n. Ok , I I will combine the commits tonight (Greece time).\nPlease comment if you spot anything strange in the code.\n. I'm going to take a look at .support().\nShould I fork from this PR's codebase or from master and then merge in the changes?\n. I think I will prefer to fork the final codebase of this PR, since it already includes code for testing localStorage support :)\n. I just pushed the cleaned-up commit. It seems to pass on travis.\nComments welcome :smile: \n. Loved the fact that the new tests pass deterministically!! GJ :+1:\n. @tofumatt this is still auto-merge-able, right?\n. Oh, didn't mean to bother/spam you. I just saw lots of PR's this week and was wondering.\n. In the current master (which is going to be v1.5) we are throwing an error when a non numeric version is passed in. So I guess that this case is well covered now.. This can be closed by PR #206.\nIt also merges and contains tests for #199.\n. :+1: \n. I pulled your changes (hope they are still up to date) and added some commits to test  your code. There should probably be a better way to open a PR that depends on another one, that I'm currently missing.\n. I think that it would be marked as merged, if #206 is merged into master, but I'm not sure.\n. After this gets merged, I can make PR #205 automergable if it helps.\n. When I opened this PR I also spotted that #205 and #199 conflict with each other. Resolving was quite straight forward but would result a huge PR.\nI will make this automergable as soon as i get home (in a couple of hours) :-)\n. @tofumatt, @ocombe ready!, although it took me more time than I originally thought.\nDidn't rebase anything so that @ocombe can take attribution for his commits.\n. I will leave it to @tofumatt's judge.\n. @ocombe I like the fact that, whatever you post, your profile picture is always happy :smile: \n. :+1:  for the PR!\nIs this associated only with Firefox in private browsing mode?\nFeature detection in has.js and modernizr (at least the non async one) is way simpler than what we are currently doing.\nWe could simplify the supports() detection (eg: remove open()) and do async tests only during driver initialization (and reject inside _initStorage).\nOn the other hand, this PR ensures that a driver is supported and tests it prior requiring and trying to initialize it (which feels better :+1: ).\nWe could possibly change supports() to be async in the next release since:\n- it's undocumented\n- it has been available for a very short time\n- it was intended to be for internal use\n- local forage is not a feature detection library.\nBut, on the other hand we could make supports() available for external use (aka define it in localforage object) only after ready() resolves (or rejects). This should cause headaches to those already using it, since they already have to wait for ready() in order to use localforage.\nI prefer this over an async supports() since once the driverSupport object is populated, there is no reason to wait for promises.\n@tofumatt Since this is related to #177, does it break the current mozilla/high-fidelity implementation?\n. I would prefer it if 4380f3ed65ecbd4c1443bb15a861163e1669e008 was a seperate PR.\nIt might be missing some rejects.\n. You can actually see in the current implementation that the websql driver actually tries to access the storages during _initStorage (just like what indexeddb does).\nI think we should either add the extra openDatabase() check to supports() or defer such actions to the drivers and in case of a reject try the next one.\n. It looks like test.api.js requires explicitly the older version. Is this really necessary?\n. Waiting for comments, suggestions and improvements.\n. Thanks for the quick review and merge!\n. Let's be optimistic and positive thinking :)\nError-first might feel awkward in browser programming, since the Promise API accepts the resolve callback first and the reject second.\nPS: IMHO\n. @Irrelon I think you should only use the dist files in your project, no\nmatter how you are loading them ( script tag/ require js/ browserify ).\nYou can surely use the src files directly, but then you should also\nintroduce all the build steps that are used in the repo to your build task,\nif you care about ie8.\nMoreover, there is also #158. So, when some of the library's code is\nconverted to es6, then many browser ( besides ie8 ) will be broken if\nsomeone still uses the src files.\n. Just tested the dist build on IE8 emulaton (within IE11) and everything worked fine.\nShould this be closed?\n. Here is how we polyfill Promises in our browserify test case in the v1.2 branch.\nIt is actually equivalent to what you propose\nSince browserify is pointed to the src files, it's currently like you are including the nopromises dist file.\nWhat is the exact error that you get?\nThis should be fixed in v1.3 .\n. Ok forget everything I told about the promises. Just now I realized that you were talking about the es3 step.\n. Regardless, this should work in v1.3 :)\n. I think of it more like a discussion by example rather than an actual PR.\nShould similar refactors be preferred and applied to MODULE_TYPE_* remains to be discussed.\n. I will then (tonight)\n- refactor MODULE_TYPEs into an enum,\n- remove JSDoc annotations and \n- wait for thoughts\n. Does EnumsLikeThis follow the current style guide?\n. Just pushed a new commit, using an enum for the module types.\nWaiting for your feedback.\n. On my Ubuntu machine:\nFirefox 31\nChanging states: null to configure  (line 63)\nlocalforage configured with default driver: localStorageWrapper (line 33)\nChanging states: configure to defaultSet    (line 63)\nsuccessfully saved A string! to key my key  (line 39)\nChanging states: defaultSet to defaultGet   (line 63)\nsuccessfully retrieved A string! from key my key    (line 46)\nChanging states: defaultGet to end  (line 63)\nTest successfully completed!    (line 52)\nChrome 37\nChanging states: null to configure (index):63\nlocalforage configured with default driver: asyncStorage (index):33\nChanging states: configure to defaultSet (index):63\nsuccessfully saved A string! to key my key (index):39\nChanging states: defaultSet to defaultGet (index):63\nsuccessfully retrieved A string! from key my key (index):46\nChanging states: defaultGet to end (index):63\nTest successfully completed! (index):52\nIs this good or bad?\n. I would suggest you to try the current master branch.\n. Also note if you are using private browsing mode or something.\n. You can wait for the .ready() promise to be resolved (or pass a callback to it), but this shouldn't be nessecary (although highly suggested), when you are using the combined&minified js file (according to the README).\n. Browser version?\n. Is this still an issue? Should we close it?. @tofumatt I think this can be considered closed by jsdelivr/jsdelivr#1477.\n. I'm not familiar with cdnjs at all.\nAnyway I will give it a try tonight.\n. It seems that cdnjs already had localforage as a package (v0.9.1).\nI just configured it for auto-updating cdnjs/cdnjs#3761.\nW8ting to be merged...\n. I think this can be closed.\nBoth cdn's have the latest version of localforage and are probably (I hope so) well configured to auto-update.\nhttp://www.cdnjs.com/libraries/localforage\nhttp://www.jsdelivr.com/#!localforage\n. I'm not sure if adding the proposed restrictions is actually preferred over the current implementation.\n. Can you test if localforage.ready() gets rejected (preferably place it before any other localforage code)?\n. Can you provide a summary of your use case code or even better a fiddle/pen?\n. That's what I got when trying to reproduce on my system.\nFollowed your instructions using the master branch and grunt serve.\n\n. I was using beta v37, something might have changed.\n. I can't see the point where 'IndexedDB' is provided as a valid parameter for setDriver() ?!?!?\nI'm I missing it? Was it a valid param at some point?\nThe paragraph you mentioned is just enumerating the supported W3C storage standards \n1. IndexedDB\n2. WebSQL\n3. localStorage\nMoreover the capitalizion of 'WebSQLStorage' in the example right next is wrong.\nFor reference, the \"enum\" that should be used as a parameter to setDriver() can be found in the localforage object as\njs\nlocalforage.INDEXEDDB; // returns 'asyncStorage',\nlocalforage.LOCALSTORAGE; // returns 'localStorageWrapper',\nlocalforage.WEBSQL; // returns 'webSQLStorage',\nThis is something that should really be added to the gh-pages.\nPS: array parameter support for setDriver() was added in 0.9.2, as you can see in the PR.\n. @jakecraige consider closing this issue and opening a new one stating the documentation changes needed (or change the title of this one).\n. ~~Whats the exception?~~\nI guess that db.transaction(dbInfo.storeName, 'readonly') returns null...\n. @tofumatt we should replace .then(fnresolve, fnreject) with .then(fnresolve).catch(fnreject) so that we properly reject when exceptions are thrown inside the then functions.\nhtml5rocks article.\nI could create a PR tonight, but i'm bot sure how/if Line 743 (not existing db) can be tested.\n. @sadolano can you provide an example fiddle/pen? Didn't have any luck reproducing it.\nI also created a new branch and will open a PR if it works for you.\n. I gave it a try,  and could easily reproduce using the master branch on chrome 37.0 beta. Great issue report :+1: \n\nWorks as expected when using promiseThenCatch branch generated files.\n. L1387: _config: { !?!?!?\nAre you using the latest master branch?\n. I think that localforage.nopromises.js does not contain the es6 Promises polyfill and relies on the native implementation of the browser. If I'm correct on this, the reason IE throws exceptions is that it does not support es6 Promises natively.\nUse localforage.js instead.\n. @astromac Glad I could help.\nConsider closing this issue.\n. Does this happen using a specific driver?\n. While using the master branch, I was not able to reproduce neither on firefox 31 nor on chrome 37 beta.\n\n. When using the LOCALSTORAGE driver, as shown by this example, when the callback throws an error, the then of the promise never prints anything. This isn't limited to getItem method but happens to almost all the API methods.\nMoreover, there seems to be an inconsistency between the driver behavior.\nIn detail, if the callback throws an Error then:\n- WEBSQL driver prints:\n  - callback: X \n  - Uncaught Error\n- INDEXEDDB driver prints:\n  - success: X\n  - callback: X\n  - Uncaught Error\n- LOCALSTORAGE driver prints:\n  - callback: X <-- success callback\n  - callback: null <-- fail callback\nObviously, mixing callback and Promise based APIs is not a best practive, but the above at least demonstrates the \"double callback\" in localstorage driver.\n@tofumatt do you think using in all drivers something like the deferCallback function of indexeddb driver would be the best (and most consistent consistent) approach to solve this?\n. I just pushed a new branch that wraps all callback calls into a setTimeout(fn, 0) like in the deferCallback function of indexeddb driver.\nAll the drivers consistently now print:\n- success: X\n- callback: X \n- and thow an Uncaught Error\nAll tests pass but didn't add any new test cases.\nIf this is not the way to go, then we could wrap all callback executions into their own try{}catch{} block or at least move success()/reject() above the callback calls.\n. @tofumatt How about changing all the code that looks like this (found in most API calls in the drivers)\njs\nreturn new Promise(function() {\n  ...\n  if (callback) {\n    callback(something);\n  }\n});\nto something like\njs\nvar promise = new Promise(function() {\n  ...\n});\npromise.then(function(value) {\n  callback(value);\n}, function(error) {\n  callback(null, error);\n});\nreturn promise;\nThis way a callback that throws an exception will not interfere with the rest of the promises.\nIt can also safely replace deferCallback code of IndexedDB Driver (I did some tests).\n. Oooops!\nI will give #240 a try tomorrow night.\n. Would a simple publish-subscribe implementation suffice for this? Of course\nthis would only work in the same window/runtime context ( not between two\ndifferent instances of the page ).\nIf that's the case, we could perhaps create an add-on that would\npublish/trigger events for all the CRUD operations. That way we can keep\nthe core implementation simple and lightweight.\nAny suggestions on the API? Eg:\nlocalforage.subscribe('setItem', callback );\n// OR\nlocalforage.subscribe('myItemKey', callback );\nPerhaps we could have two separate methods for localforage-method or\nitem-key subscriptions.\nWaiting for feedback!\n\n\nThodoris Greasidis\nComputer, Networking &\nCommunications Engineer\n. How about initially making localforage instances observable, so that parts\n(of the same page) can subscribe for changes on specific item keys? Would\nthat be useful to anyone?\nAt a later point of time (when the new specs and browser support align) we\n\ncould also support listening for db changes from different page instances.\nThodoris Greasidis\nComputer, Networking &\nCommunications Engineer\n. Any preference on any Observable library to use? I guess vanilla js folks\nwould prefer zen-observable but Angular 2 users would probably like RxJ\nmore.\n\n\nThodoris Greasidis\nComputer, Networking &\nCommunications Engineer\n. Just pushed some commits to my localForage-observable repo. By default it\nuses es-observables but can also be configured to use RxJS as well. Waiting\n\nfor your feedback.\nThodoris Greasidis\nComputer, Networking &\nCommunications Engineer\n. @maysale01 no, it doesn't work across tabs, only on the same instance. Like @nolanlawson said a few comments before, it isn't technically possible atm. I may add his hacky localStorage suggestion in some later release though.\n. Just opened localForage/localForage-observable#5 to track the cross-tab support.. Just opened localForage/localForage-observable#6 for this. Any feedback would be great and could help releasing it during the weekend.. I think that config should be used before any other localforage calls.\nhttp://mozilla.github.io/localForage/#config\n. @tofumatt + @hayksaakian\nThis week I was experimenting on a new branch, to ultimately implement such a feature, as described here and #45. I tried an API like:\njs\nvar localforage2 = localforage.createInstance({\n    name: 'storage2',\n    storeName: 'storagename2'\n});\nI have reached a point that my example code runs fine, but the tests are failing in PhantomJS. Strangely (at lead to me) the same test page work fine if I run them from any browser, for example by requesting http://localhost:9999/test/test.component.html.\nCan anybody help me figure out why my tests are failing???\n:cry: :sob:\nPS: The (window.)localforage object still works as we all know and love, it is just that now it can return offspring.\nUpdate: here is a fiddle  with the running example.\n. Interestingly the tests are failing only locally...\nOn TravisCI they seem to pass...\nCan anyone reproduce? \n. I think this is closed by #253\n. What!?!?\n\nPhantomJS has crashed\n\n@tofumatt can you restart the test?\n. :tada:\n. Also, because of the code deduplication, in case we decide to change the callback api to be error first for v1.0, we will need less than 10 lines diff.\n. Any comments/review? :-(\n. Take your time.\nHope you'll get better soon.\n. Since I'm not using config a lot, I prefer stating that:\nWhen configuration parameters are passed to localforage.createInstance , then it will affect the new instance just like how localforage.config({...}) affects the localforage singleton in the current version.\nThe instance returned by localforage.createInstance({...} will also be initialized to use the first available driver (by the default preference order).\nIf the configuration parameters is left empty, then the driver of the new instance will be initialized to the default driver settings, just like what localforage does now. This will obviously make it access the same store that localforage accesses by default.\nFeel free to Ctrl+f \"createInstance\" in localforage.js found in the src  folder of the branch.\n. You might want to try this example from my dev/test branch.\n. 61bf123429f2f2749b3b15bd150e5cdcc944ba9d fixes \"Error: SECURITY_ERR: DOM Exception 18\" for my local tests. It looks like the error was caused by the local PhantomJS not providing any more space for the second webSQL database to open and failed on openDatabase\n:tada: Finally, the tests pass deterministically both locally and on TravisCI. :tada:\nLooking forward for comments & suggestions.\nPS: I might also do a small refactor to better handle the case that webSQL fails and localStorage is used.\n. As a follow-up, I created a new branch branch that fixes and adds some tests missing for the (now famous) case that webSQL's openDatabase() fails and localStorage is initialized under the hood.\nI didn't rebase them on top of this PR, since it already got heavy. Please suggest how to continue.\n(Should I split the fallback tests into a separate file, like we did in no-driver case?)\n. You can probably somehow detect the browser and use setDriver, as found in the docs.\n. Oops half post...\n... But I'm not aware of any iOS 8 browser detection script yet that's also considered production ready.\n. A nice thing to discover on Friday...\n. @tofumatt Is there any event you are going to participate?\nIt has been some time since my last mozilla sponsored event :disappointed: \n. I don't think this can be done. Indexeddb and websql only provide asynchronous APIs. You most probably will have to wrap your code inside a .then().\n. @tofumatt does it really make sense to push the dist files along with the commits? I think that this makes the reviewing more complicated (and HUGE +- diff counts). I've read CONTRIBUTING.md but something feels awkward to me.\n. Might give it a try next week. Obviously Cordoba developers can be greatly favored by this.\n. That's exactly what I was thinking.\nUsing one API for offline data access in your Cordoba and your web app build, but still using the best infrastructure you can get.\nMoreover, the native database APIs tend to provide better quota limits for your data.\n. +1 for custom driver and supporting Cordova in a separate repo.\nSomeone could also write his own android or iOS or etc driver and not depend to Cordova at all.\n. Yea but this is a browser focused lib (I think). We should at least create a separate build js file.\n. Please leave some feedback/thoughts on #282.\n. You can take a look at the dummy driver found in the tests folder.\nOn Mon, Jun 1, 2015, 01:24 Udo Bretz notifications@github.com wrote:\n\nI wonder if there is any example implementation on how to use the\nsqlitePlugin with the new custom driver support?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/mozilla/localForage/issues/267#issuecomment-107253796\n.\n\nThodoris Greasidis https://www.linkedin.com/in/thgreasi\nComputer, Networking &\nCommunications Engineer\n. Obviously this might break some older (pre-0.9??) use cases.\n. :+1:\n. @tofumatt, @ocombe feel free to review.\n. I also found no reason to provide this, while implementing a dummy custom driver.\n. Driver definitions are available for all instances to be used, since the CustomDrivers object (that holds the custom driver definitions) is inside the closure created by the localforage.js IIFE. \n. +1 for value first.\nLike in Array.prototype. forEach.\n. Any chance you can check if #415 fixes this?\n. Just opened #417 that directs webpack to use the dist file of the repo.\nThis should remove the need of aliasing the module in your webpack configuration.\nTested with webpack v1.11 on the how-to-repo MattKunze/localforage-webpack.\nAny feedback will be much appreciated.\n. How about:\n\n``` js\nPromise.all([\n    localforage.getItem('item1'),\n    localforage.getItem('item2')\n]).then(function(results) {\n    console.log(results);\n});\n// OR\nvar items = ['item1', 'item2', 'item3'];\nvar promises  = items.map(function(item) { return localforage.getItem(item); });\nPromise.all(promises).then(function(results) {\n    console.log(results);\n});\n```\nIf getItems() / setItems() are going to be implemented by localforage at some point, then something like the 2nd example might actually have to be used by some drivers.\n. How about something like:\njs\nlocalforage.keys(function(err, keys) {\n  for (var i = 0; i < keys.length; i++) {\n    if(keys[i].indexOf('stst.') === 0) {\n      (function(key) {\n        localforage.getItem(key).then(function (value) {\n            console.log(key, value);\n        });\n      })(keys[i]);\n    }\n  }\n});\n. defineDriver does not handle at all the require part for the inclusion of the built in drivers. Any thoughts on that? Should we just require them while the library gets loaded (maybe just before the instantiation of the first instance), even if the driver is not supported / never gets set?\n. > \"how it works\" and to prove \"that it works\"\nCustom driver examples can be found at:\n- test/dummyStorageDriver.js\n- localForage wiki\n\nwill doing this simplify the code enough to justify the work?\n\nThe only difference with custom drivers is in the way we require the driver:\nIn case we are trying to setup one of the included drivers,\nthen localforage knows how to require the driver object by itself,\notherwise we expect that the driver object is already defined earlier.\n- The Custom Driver architecture currently does not mess with including/requiring the driver itself. Drivers should be defined before trying to use them (even if at end the browser does not support them). The blame is to the user if an unsupported driver is (down)loaded even if it can't be used.\n- Built-in drivers are only required/downloaded only if they can actually be used (benefit for requirejs users). This is achieved by including some small driver support detection tests inside locaforage.src.\nA possible refactor could be:\n``` js\nvar driverPromise = isLibraryDriver(driverName) ? \n    new Promise(function(resolve/, reject/) {\n        // require native driver here... the known way...\n    }).then(function(driver) {\n        return self.defineDriver(driver);\n    }) :\n    Promise.resolve();\ndriverPromise.then(function() {\n    if (CustomDrivers[driverName]) { // rename this to DefinedDrivers\n        self._extend(CustomDrivers[driverName]);\n        resolve();\n    } else {\n        self._driverSet = Promise.reject(error);\n        reject(error);\n    }\n});\n```\nRemoved:\n- an else if() statement\n- an self._extend() call\n- a resolve() call\nAdded:\n- a ternary operator\n- we now use the driver holder object for all cases.\n. I think that we might have to start working on this. This would also allow us to override the support check for the internal drivers, eg letting our user (and namely the Ionic guys) to upgrade to v1.5 and avoid the breaking safari indexeddb change by assigning the v1.4 indexeddb detection code in the support property.\n@tofumatt @jesusbotella @danielsogl @jgw96\nSee: https://github.com/ionic-team/ionic-storage/pull/101. Inspired by #318 I have implemented localForage-setItems as an extension for localforage.\nThis is of course just a experimentation (tests are still missing) until something is actually discussed -> reviewed -> merged.\nSome jsperf test case are also available in README.\n. This might be obsolete, since in v1.3 (source found in master) we will not be requiring the promise polyfill manually (since it's an anti-pattern for many) but instead bundle it first and expect to be available.\n. Just did a test on IE8 emulaton (within IE11) and everything worked fine with the dist build.\n. But you are right, we should close this after v1.3 is out, since by then everybody will be pointed to the dist build.\n. :+1:\n. @kaeverens to which sqlite plugin are you referring to? Is that https://github.com/thgreasi/localForage-cordovaSQLiteDriver ?\nIf so, there is a sample ionic 2 app that also demonstrates using the setItems and the rest plural plugins.\nSee: https://github.com/thgreasi/localForage-cordovaSQLiteDriver-TestIonic2App/blob/master/src/app/localforagePluralOperationsDemo.ts\n@tofumatt how would you feel about adding the plural methods to lf v2? . We should definitely add a test case for this when it is fixed.\n. > The problem is that localStorage driver is implemented totally in sync fashion (via return ... rather than resolve) it will cause each operation to resolve earlier then it's actual completion.\nBut, We return promises!? Can you point me to a specific Line, I might be missing something.\n. @Elephant-Vessel there is an equivalent plugin available. You may want to take a look at localForage-extensions.\n. I think that setItems can be implemented as an extension of localForage.\nActually, it might even be possible to write batching as an extension, but\nit would probably require more monkey patching.\nI was actually thinking of mocking an extension with setItems for some time\nnow, but never got enough time.\nAny thoughts?\nOn Wed, Jan 28, 2015, 19:57 lu4 notifications@github.com wrote:\n\nGuys, its been a while when I was looking into GitHub, I've reviewed your\nquestion Micheil, and if you ask me, I would still go for two methods, both\nsetItem and setItems. As I've already written in one of my previous\nresponses, setItem with batching will pose significant memory overhead\n(in my case it's crucial) and by having only one setItem(with batching)\nmethod you are leaving no choice for people who may need to go around such\ninefficiency\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/mozilla/localForage/pull/320#issuecomment-71882421.\n. I saw this happening while trying solve #317. Since the dist files had unreasonably large diff ( my src changes were less than +-30), we should also investigate that this is a result of a package update.\nI will create a build log diff.\n. Lines 7 to 690 where deleted from dist/localforage.js\n in 8502a8e1e19af6871136cf767d177c38a7c944e5 but reappeared (after grunt test) in my commit 3e8a51978b7eaa05ab052e23b06fc9ec268b5e32.\n. I'm closing this for now since after 75b85dc1af11b98b9950c6674df6743dda552713 I no longer have so many problems.\nAlthough the error that was reported was in a beforeEach of the localStorageWrapper but it was complaining for an undefined value of db.transaction !?!?!?!?\nThis is sooooo weird since localStorageWrapper does not have transactions.\n. Once more Travis needs a restart...\nMy succesfull build.\n. > localStorageWrapper driver \"before each\" hook:\nTypeError: 'undefined' is not an object (evaluating 'dbInfo.db.transaction')\n\nThe transaction keyword does not even exist in localStrorageDriver...\n. Any comments on this?\n. Got some code from websql driver.\n114 should now be one step closer.\n. Just added a commit that abstracts the serialization code to a separate file and closes #114.\nThe file size gains of the minified files ranges from 4.72% to 6.04% (for localforage.min.js and locaforage.nopromises.min.js respectively).\n. @tofumatt  Just did an extra rebase, hope it helps.\n. ty :)\n. We currently can use:\n- localforage.driver() === null as @tofumatt  said\n- localforage.supports(driverName) which can be tested against the driver name constants.\n- localforage.ready() rejects with \"No available storage method found\"\n. This is what we are doing to detect localstorage support, in order to avoid data conflicts and reduce garbage in the storage. BUT, thankfully, in case that a browser is detected to have the localStorage API, but still can't save anything, then we fallback to the reject with a \"no storage driver available\" error.\nIf you need to have LF to look like it is saving data, even in those environments, then you can use the memoryStorageDriver and use it as the last argument in the setDriver() method.. @zdennis can this be closed now?\nAny suggestions/feedback?\n. Nice. We should either add a test for it or add it to README/wiki.\nOn Tue, Jun 23, 2015, 19:06 Josip Jan\u017ei\u0107 notifications@github.com wrote:\n\nI've used:\nmodule: {\n        loaders: [{\n            test: /localforage\\/dist\\/localforage.js/,\n            loader: 'exports?localforage',\n        }]\n},\nalias: { 'localforage': 'localforage/dist/localforage.js'}\nseems to work ok\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/mozilla/localForage/issues/344#issuecomment-114558558\n.\n. Any chance you ca check if #415 fixes this?\n. @ALF-er OOOOoooops!, my bad.\nThe actual webpack changes are in a commit that I didn't push.\nNow that the PR is merged, I will do a rebase as soon as I'm home. Sorry for the inconvenience/false positive.\n. Just opened #417 that directs webpack to use the dist file of the repo.\nThis should remove the need of aliasing the module in your webpack configuration.\nTested with webpack v1.11 on the how-to-repo MattKunze/localforage-webpack.\nAny feedback will be much appreciated.\n. Can try using the branch in #417? Hopefully, you shouldn't have to do any configuring or use babel at all, since package.json should direct webpack to use the dist files.\n. Here is my test branch of @MattKunze's localforage-webpack.\nIt uses the branch of PR #417.\nI'm just running webpack in terminal and the index.html page seems to be working.\n\nI think I'm not doing using magic webpack configuration for localforage to work.\nAm I doing something wrong?\nAny chance I can reach some of the configuration of your app?\n. @HenrikJoreteg all I get in terminal is:\n~/Desktop/localforage-webpack$ webpack\nHash: 34b97eaf37c1224e529b\nVersion: webpack 1.11.0\nTime: 105ms\n    Asset    Size  Chunks             Chunk Names\nbundle.js  102 kB       0  [emitted]  main\n   [0] ./index.js 148 bytes {0} [built]\n    + 3 hidden modules\n. Added grunt to the test repo and realized that it was already using webpack/script-loader. I hope that importing localforage with something like: require('script!localforage'); isn't too bad at the moment.\n. Just pushed an extra commit to PR #417, that adds webpack bundling tests.\n. #417 has been merged into master, but I think we have yet to release it under a new tag.\nv1.2.7 should work for now.\nWe are probably going for a proper fix in v1.3.\n. How about localStorage? Should it be dropped as well?\nIf yes, then should localForage be just a wrapper for indexeddb?\nSince localforage supports even ie8, I don't think we should drop websql.\nOtherwise, all safari users will have no other choice than using\nlocalStorage and from any point of view websql is far better than the\nblocking localstorage.\nGmail still uses websql so I don't think it's going away anytime soon (at\nlest on the webkit/blink based browsers and this includes chrome, safari\nand opera at the moment).\n. Is the related setItem() promise rejected or resolved?. Foudn some resources on that. We might have to retry the operation on websql.. Have you been able to reproduce on chrome or any other browser? I've\nwritten some code to retry setting the value, but I'm still struggling\ntrying to make the quota request dialog to appear on chrome.\n-- \nThodoris Greasidis\n. I'm working on a branch to resolve this. Can you give a try using the dist files found in there or by just visiting this codepen?. Me too on latest safari. What version are you using?. I'm not sure why. I think that it also happens on LF v1.4 as well.. I can confirm that this also happens on localforage v1.4 & the current master (v1.5-pre ) on Safari 9.3.1 .\nThat's really puzzling.. OK so, WebSQL is still working, it's just not running inside the iframe that codepen uses.\nIf you right click in the preview and \"Open Frame in new Tab\" WebSQL is detected properly.\nAlternatively you can use this jsfiddle.\nThe fiddle runs, but still localforage does not save the data after the responding to the quota dialog... \ud83d\ude1e . I pushed some new commits an about an hour. I hope to get better results tomorrow and hopefully figure out why my \"retry on Quota Error\" doesn't work as expected.. @frumbert, @coulson84, @tofumatt\nCan you try this one.\nIn my case it successfully stores all (16) items after asking me 2 times to increase the allowed storage size.\nOnce again, in case no db storage method is found, try opening the <iframe> in a new tab, or download and run the code locally.. That's great news, I will open a PR today.!\nDid you also try to clear the site's data from safari preferences and rerun?\nAny extra feedback based on modified fiddles or even your own apps, will be much appreciated. Thanks for helping out with this . It looks like that this is how it was designed to work.\nThere is a test case as well:\nhttps://github.com/mozilla/localForage/blob/master/test/test.api.js#L258-274\nOn Tue, Mar 10, 2015, 18:34 Sam Vloeberghs notifications@github.com wrote:\n\nHi,\nI'm just wondering why the promise gets resolved when we get an item in\nlocalForage using getItem(), that does not exist? Shouldn't it reject when\nwe call a un-existing item? Now it resolves with null\nWe are implementing localForage in an AngularJS project using the\nAngularJS directives and implementing it faces us with this issue. The\npromise should get rejected as the key does not exist in the local store,\nright?\nIf I'm asking a stupid question, please explain why :) It just seems logic\nto me to reject a key ( and value ) if it does not exists.\nThx\nSam\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/mozilla/localForage/issues/353.\n. There is a chance that this could be handled inside setDriver() method.\nWe know only check for browser support using some blocking tests and then try to setup the first supported driver, in priority order.\nWe could just try the next one each time setDriver fails until there is no driver left.\n. If we wait for ES7 we might be able to do something like:\n\njs\nasync function setDriver(driverNames) {\n  for (var driverName of driverNames) {\n    if (self.supports(driverName)) {\n      try {\n        let driver = await self.getDriver(driverName);\n        if (driver) {\n          return Promise.resolve(driver);\n        }\n      } catch (e) { }\n    }\n  }\n  return Promise.reject('No supported driver found!');\n}\n:sparkles: :sparkles: :sparkles:\n. Babel with stage 1 experimental transformations enabled (proposal level) can transpile it, but I'm not sure how elegant the generated code would be.\n. @tofumatt If we try to initialize the provided drivers inside setDriver,\nthen there are some considerations we should discuss.\n- 1. \"setDriver is called inside the constructor\" VS \"config() should be\n  called before initializing the driver\". At the moment, we initialize the\n  driver inside the ready() call, the first time we use a localforage\n  method. (setDriver just fetches the driver object and sets its methods and\n  name.)\n  - 1a. If we change that, to initialize the driver inside setDriver, in\n    order to detect supported drivers that fail to initialize, then we shorten\n    the time frame that is available to use config(). That's because setDriver\n    is also called inside the constructor.\n  - 1b. A possible solution could be to do the full driver initialization\n    in setDriver but keep the driver initialization from the constructor lazy\n    (like in v1.2).\n  - 1c. An other possible solution (thought that as I was writing this)\n    could be to store the driver preference array (eg: on the setDriver\n    promise) and do the initialization when ready() is called (like in v1.2 but\n    for the whole driver preference array).\n- 2. There is a race condition on driver initialization when two subsequent\n  localforage.setdriver('aDriver').then(localforage.ready) are executed\n  with different driverNames as parameters. If we replace ready() with\n  getItem(), in the above example, then we can't be sure about the final\n  driver() in use (which driver will finish its initializaton last) and which\n  driver was used by each getItem(). There is also a case where the _dbInfo\n  holds different driver than the _driver property. This gets even worse if\n  we do the driver initialization inside the constructor, because we end up\n  with a code equivalent to the above example.\n  - 2a. A way to work around this would be to wait for the previous driver\n    initialization to finish.\nI've already a sample implementation for 1a and 2a but need further\nfeedback on this. Perhaps we could leave this for a later time (v1.4?)\nafter the webpack(?) bundling release.\nOn Fri, Aug 7, 2015, 22:09 Matthew Riley MacPherson \nnotifications@github.com wrote:\n\nThat is nice! Are there transpilers that support that now?\n- tofumatt\nOn Fri, Aug 7, 2015 at 7:39 PM, Thodoris Greasidis\nnotifications@github.com wrote:\n\nIf we wait for ES7 we might be able to do something like:\njs\nasync function setDriver(driverNames) {\nfor (var driverName of driverNames) {\nif (this.support(driverName) {\ntry {\nlet driver = await this.getDriver(driverName);\nif (driver) {\nreturn Promise.resolve(driver);\n}\n} catch (e) { }\n}\n}\nreturn Promise.reject('No supported driver found!');\n}\n:sparkles: :sparkles: :sparkles:\nReply to this email directly or view it on GitHub:\nhttps://github.com/mozilla/localForage/issues/363#issuecomment-128791368\n\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/mozilla/localForage/issues/363#issuecomment-128797680\n.\n\nThodoris Greasidis\nComputer, Networking &\nCommunications Engineer\n. @tofumatt Here is some code comparisons.\n\nd6a92de3c8bcb176b9786f6f061ac9ba767c48d0 source comparison\nThis is like the above bullet 1a and also takes care of 2\n- directly initializes the first supported driver\n- fallbacks to the next one in case of error\nthgreasi:trysetdriver branch HEAD source comparison\nThis is like the above bullet 1c and also takes care of 2\n- fetches and sets the driver as in v1.2\n- lazily tries to initialize one of the supported drivers when ready() is called (probably through an other method) as in v1.2\n- fallbacks to the next one in case of error inside the ready() promise\nPS: Could be related to #70, #145, #195.\n. Should we merge this? After a restart on travis the tests passed.\nI would just suggest to change the storeName to just name since there still is the \"multiple instances with same storeName\" #342 issue.\nWe should also mention that you can pass all the config options.\n. @RangerMauve can you do a rebase? In all my merge attempts your initial commit & authorship gets lost.\n. @RangerMauve Just opened #442 that resolves conflicts and merges this.\nNo need to rebase yourself.\nAny feedback is welcome.\n. +1 to \".nopolyfills.js\" version\nOn Fri, Jun 5, 2015 at 12:19 PM Tobias Peters notifications@github.com\nwrote:\n\nhow about a \"nopolyfill\" version? that way the intention is clear and\ndevelopers decide which polyfills to include, the requirements might need\nto be documented though\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/mozilla/localForage/issues/369#issuecomment-109214645\n.\n\nThodoris Greasidis\nComputer, Networking &\nCommunications Engineer\n. It should also make it easier for us to introduce more module loaders.\nMoreover, we will need less refactoring in case (at some point) we move to es6 modules with a programmatic import API (lets say system.import for example).\n. I might be missing something but, shouldn't this test actually fail?\n. This kind of detection and requiring Promises has been removed in the current master.\nAny chance you can try using the code in the current master branch and report back?\n\nRequiring polyfills is considered an anti-pattern by lost of devs. A library just should not dictate the use of a polyfill (like we did in v1.2) but rather expect that it is already loaded if required.\nAs a result, we provide both a dist file w/ and w/o the polyfill, but it's up to the integrator to ensure that the environment is proper for the lib to work.\n. @lordgreg Can you please provide the line in localforage that causes the error when using the current master branch?\n. This pen works for me on chrome 42.\n. Yes I tried it with the DevTools open.\nCould not reproduce what your video shows.\n. @3melectronicmonitoring This might be related to #254 where we prevent IndexedDB for iOS 8, since that's the only sniffing that we are using.\nCan you elaborate on the error?\n. 1) How about those who don't use any module system? Will they still be able\nto just add a script tag and access localforage from the global object?\n2) Those with requirejs?\n3) I've been working on an es6-babel branch for the last 4-5\nmonths and I really like using import statements and have babel transform\nit to use the UMD pattern. I guess that at some point the es6 module system\nshould prevail, so it should be a safe bet to use it.\nIf we decide to drop support for dynamically loading the appropriate driver\nwhen using requirejs, then all the code can be changed to just use import\nstatements on the top of the file. Any thoughts about this?\nPS: can we also change browserify requires to named modules instead of\n'./drivers/indexeddb/' ? Is it not prefered? Along with (3), these are the\nonly things that currently  prevent from dropping all module systems and\njust use es6 modules. Can anybody give me some info or hints?\n. @tofumatt moving to browserify or completely moving to es6 imports, would\nprobably have to sacrifice the dynamic driver loading under requirejs.\nIs this ok with you?\nPerhaps I could do some tests as soon as the browserify tests get merged.\nThat's the reason that I'm not using es6 imports in my es6-babel branch.\nOn the other hand, creating (and using) a transformer for the System.load\n(now out of the latest standardization draft) should also solve the dynamic\nrequirejs part.\n. We should probably move this discussion to a new issue.\n. That's all I need to hear! I will create a mock branch as soon as soon as\nbrowserify tests get merged.\nWe can try restoring the requirejs dynamic driver loading at a later time.\nOn Mon, Jun 1, 2015, 15:34 Matthew Riley MacPherson \nnotifications@github.com wrote:\n\nAgreed. But for what it\u2019s worth the dynamic require of localForage\ncomponents isn\u2019t a huge deal to me :-)\n\u2014\nSent from Mailbox\nOn Mon, Jun 1, 2015 at 11:07 AM, Thodoris Greasidis\nnotifications@github.com wrote:\n\nWe should probably move this discussion to a new issue\nReply to this email directly or view it on GitHub:\nhttps://github.com/mozilla/localForage/pull/383#issuecomment-107386702\n\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/mozilla/localForage/pull/383#issuecomment-107424436.\n. I've been using pain babel in my test branch and the result follows the umd\npattern. As a result it can be used even by the component module system\n(I'm planning to also investigate if it works with webpack).\nHow the bebelified bundle would look like? Are there any extra pros when\nusing babelify??\n\nOn Mon, Jun 1, 2015, 17:55 Nolan Lawson notifications@github.com wrote:\n\nFor a lib like LocalForage, which is already under 10KB, I agree that\ndynamic module loading is not super important. :) As for ES6, yeah, there\nis babelify, which you can use as a browserify transform for ES6 code.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/mozilla/localForage/pull/383#issuecomment-107549985.\n. We could probably also delete the ./examples/require.js file.\n. Should we also include an example that requires each driver independently?\nPossibly also add such a test case as well?\n. I guess this was the only missing module type test.\n\nI think we should first check for Promises before requiring the module. Something like:\njs\nvar Promise = this.Promise ||\n    ((typeof module !== 'undefined' && module.exports && typeof require !== 'undefined') ?\n     require('promise') :\n     this.Promise);\nI might be wrong (as a browserify noob), but I think that without that check a browserify bundle equivalent to localforage.nopromises.js can't be created.\n. This PR should be initially be just for discussion until we strictly define things like,\nwhere es5 sources should be placed (are they even needed?) etc...\nBoth refactoring commits pass all the tests.\nThe first one just uses class for LocalForage object and the second uses export statements.\nExtra code needed for Component bundler (not covered by UMD) can be easily identified.\nStill no webpack tests.\n. Some things that need further discussion:\nremove require('promise')\nFor some developers requiring polyfills is an anti-pattern. Could we just add the polyfill to the dist bundle? Is this really required for a use case not covered by the test cases (nodejs maybe)?\nuse es6 import statements\nThis can be used for the serializer module initially.\nIf we want to get rid of all the custom module imports then we need to:\n- either drop support for dynamic driver loading with requirejs\n- or implement a babel transformer for the not-yet-standardized System.import (some info at babel/babel#1383)\nThis might also cause problems with component bundler!\n. Also tried not to create a huge diff, in order to ease the reviewing process. We can later remove the outer iifes from all src files, since it is handled by the babel umd transformer. This will allow us to drop the loose es6 option.\n. @tofumatt Just pushed babel-plugin-system-import-transformer that replaces System.import to AMD, CommonnJS & Global module imports.\nI have also created a separate localforage branch that uses System.import statements. The only remaining require statements are those for the Promises polyfill for CommonJS (but we might remove it in the future).\nFeel free to review. Should I push the commit in this PR?\n. I think so. I will push the commit tonight.\n. Just pushed the System.import commit.\n. @tofumatt any feedback on this?\n. > remove require('promise')\nI will push a commit with this. It should be just a -4 diff.\nWe should be confident enough, now that we also have browserify tests. (Had some module loading environment isolation concerns.)\n. > Is there more System.import code you wanted to push here?\nNo, it should be complete.\n\ndrop support for dynamic driver loading with requirejs\n\nSuch change would allow us to:\n- use plain es6 import statements on the top of the files and\n- remove the babel plugin for system.import transpilation. (\ud83d\ude2b this was the reason I wrote the plugin \ud83d\ude2b)\nIf this going to be an unsupported feature, you might also want to remove the unbundled requirejs tests (or leave them as is or disable them to keep them as example code).\n. At some point we could also remove the IIFEs from the source files in order to drop the loose babel flag. That's now required since es6 normally requires imports to appear on the top of each file before any code.\nDid not include such a commit in order to make the reviewing process easier.\n. It looks like they had a regression on v5.6.8. I will take a look at it later today.\n. Just did a rebase and pushed the \"remove promise polyfill require\".\nAlso released a new version of babel-plugin-system-import-transformer to remove the warning.\nThe build seems to pass now.\n. Just saw that, now that require('promise') is also gone, we no longer need all the manual module type detection code!\nPushed this as well.\n. Hi Matt. I think that it's fine. I've been working on this since\nFebruary/March and I no longer see opportunities for fixes or improvements.\nThankfully we lately introduced more tests with the various module\npackages/loaders.\nThis is a big enough PR already, so I guess that addressing webworkers and\nchanging driver names sound better be handled in separate PRs.\nOn Wed, Jul 15, 2015, 22:12 Matthew Riley MacPherson \nnotifications@github.com wrote:\n\nThis looks pretty awesome. I can't see anymore issues, was there anything\nI didn't address or you think needs to be done?\nI think it looks good to merge [image: :+1:]\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/mozilla/localForage/pull/390#issuecomment-121718127.\n. That puzzled me as well (the diff is +3,389 \u22123,685).\nThis might be virtual, possibly caused by the way babel or uglify formats\nthe code.\n\nOn Thu, Jul 16, 2015 at 12:02 PM Matthew Riley MacPherson \nnotifications@github.com wrote:\n\nSounds good :-)\nI'll merge it in today :-)\nThanks so much, it's awesome and I love how many lines of code you\nremoved!\n- tofumatt\nOn Thu, Jul 16, 2015 at 8:21 AM, Thodoris Greasidis\nnotifications@github.com wrote:\n\nHi Matt. I think that it's fine. I've been working on this since\nFebruary/March and I no longer see opportunities for fixes or\nimprovements.\nThankfully we lately introduced more tests with the various module\npackages/loaders.\nThis is a big enough PR already, so I guess that addressing webworkers\nand\nchanging driver names sound better be handled in separate PRs.\nOn Wed, Jul 15, 2015, 22:12 Matthew Riley MacPherson \nnotifications@github.com wrote:\n\nThis looks pretty awesome. I can't see anymore issues, was there\nanything\nI didn't address or you think needs to be done?\nI think it looks good to merge [image: :+1:]\n\u2014\nReply to this email directly or view it on GitHub\n<https://github.com/mozilla/localForage/pull/390#issuecomment-121718127\n.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/mozilla/localForage/pull/390#issuecomment-121856665\n\n\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/mozilla/localForage/pull/390#issuecomment-121887989.\n. Omg omg omg omg!\nThe time for es6 has come.\n\nOn Thu, Jul 16, 2015, 19:53 Matthew Riley MacPherson \nnotifications@github.com wrote:\n\nMerged #390 https://github.com/mozilla/localForage/pull/390.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/mozilla/localForage/pull/390#event-357727527.\n. I don't think that broewsers will expose the remaining/available storage.\nThis seems a privacy issue to me.\nOther solutions use browser sniffing with known default sizes and estimate\nthe current usage using JSON.serialize for the stored items (multiplied\nwith an empirical factor).\n\nOn Thu, Jul 2, 2015, 11:03 Andr\u00e9 Fiedler notifications@github.com wrote:\n\n\none more localForage.getRemainingSize() (or\n  localForage.getAvailableSize())\n\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/mozilla/localForage/issues/392#issuecomment-117951318\n.\n. The StorageManager API estimate() method might be ideal for this. Currently supported in Chrome 55 and FF51.. I'm glad that the SessionStorage plugin was proven useful for someone :)\n\nOn Wed, Jul 1, 2015 at 12:02 PM Andr\u00e9 Fiedler notifications@github.com\nwrote:\n\nJep. WP8 WebBrowser Control only supports sessionStorage. So it's working\nusing the plugin mentioned above.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/mozilla/localForage/issues/393#issuecomment-117551272\n.\n. I think that in indexeddb the transactions get auto committed at some point\nafter an idle time and there is no manual transaction.compete();.\nIs anyone aware of an event firing right after the transaction gets\ncommitted?\n\nOn Thu, Jul 2, 2015, 10:58 Andr\u00e9 Fiedler notifications@github.com wrote:\n\nRunning this sample in Firefox Developer Edition 40.0a2 (2015-06-29)\n<!DOCTYPE HTML>\n\n\n\nTest \n\n\n    localforage.setItem('foo', 'bar', function (err, obj) {        // Prevent endless re-loading        if (document.cookie !== 'didLoad') {            document.cookie = 'didLoad; path=/';            // re-load            //            // Will throw:            // An IndexedDB transaction that was not yet complete has been aborted due to page navigation.            document.location.reload(true);        }    });    \n\n\nwill warn with\nAn IndexedDB transaction that was not yet complete has been aborted due to page navigation.  localforage.js:1071:0\nAn IndexedDB transaction that was not yet complete has been aborted due to page navigation.  localforage.js:1076:0\nAn IndexedDB transaction that was not yet complete has been aborted due to page navigation.  localforage.js:1276:0\nExpected result\nCallback fires when all data is stored, so no warning if you navigate away.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/mozilla/localForage/issues/396.\n. It seems that in most cases people create a separate repo and add it in the closure-compiler/wiki.\nThat's the case for Backbone, Underscore, React and Firebase.\nIt's a pity thought that there is no central repo like what people are doing for Typescript definition files.\n. .call(typeof window !== 'undefined' ? window : this)\nLooks like a safe bet :-)\n\nOn Wed, Jul 15, 2015, 12:31 Matthew Riley MacPherson \nnotifications@github.com wrote:\n\nAwesome, thanks so much.\nIf you run the tests using npm test you can run them in phantomjs, and\nusing grunt serve should allow you to run them from browsers using a\nlocal node server URL.\n- tofumatt\nOn Wed, Jul 15, 2015 at 10:27 AM, Remko Boschker <notifications@github.com\n\nwrote:\nreplacing .call(window) by .call(this) loads the lib just fine, but this\nprobably introduces other issues. I'll fork and run some tests later today.\nThanks.\nReply to this email directly or view it on GitHub:\nhttps://github.com/mozilla/localForage/issues/402#issuecomment-121547558\n\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/mozilla/localForage/issues/402#issuecomment-121548779\n.\n. This might be useful.\n. Just took a shot on this, the web workers part, at least... Hope it will\nwork with service workers similarly.\nSince we now deal with es6 modules, we are in \"use strict\" mode by default\n(and babel honors this semantic). As a result this is undefined inside\nIIFEs...\n\nOn Wed, Jul 15, 2015, 14:57 Remko Boschker notifications@github.com wrote:\n\n[image: :smile:] sure, will use it.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/mozilla/localForage/issues/402#issuecomment-121592279\n.\n. We might just have to use a different var name for the scope. Maybe service\nworkers do not like redefining self.\n\nOn Mon, Jul 20, 2015, 11:37 Remko Boschker notifications@github.com wrote:\n\nIn the service worker your fix raises\nUncaught (in promise) TypeError: self._initStorage is not a function at http://localhost:8080/js/lib/localforage.js:265:48\nAlso a unit test fails\n1) Config API Driver API \"before each\" hook:\n     ReferenceError: Can't find variable: localforage\n      at http://localhost:9999/test/test.drivers.js:11\n      at http://localhost:9999/bower_components/mocha/mocha.js:4315\n      at next (http://localhost:9999/bower_components/mocha/mocha.js:4626)\n      at http://localhost:9999/bower_components/mocha/mocha.js:4630\n      at timeslice (http://localhost:9999/bower_components/mocha/mocha.js:5761)\nI'll work on a fix\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/mozilla/localForage/issues/402#issuecomment-122813579\n.\n. Can you share your service worker test code?\n\nOn Mon, Jul 20, 2015, 13:29 Thodoris Greasidis thgreasi@gmail.com wrote:\n\nWe might just have to use a different var name for the scope. Maybe\nservice workers do not like redefining self.\nOn Mon, Jul 20, 2015, 11:37 Remko Boschker notifications@github.com\nwrote:\n\nIn the service worker your fix raises\nUncaught (in promise) TypeError: self._initStorage is not a function at http://localhost:8080/js/lib/localforage.js:265:48\nAlso a unit test fails\n1) Config API Driver API \"before each\" hook:\n     ReferenceError: Can't find variable: localforage\n      at http://localhost:9999/test/test.drivers.js:11\n      at http://localhost:9999/bower_components/mocha/mocha.js:4315\n      at next (http://localhost:9999/bower_components/mocha/mocha.js:4626)\n      at http://localhost:9999/bower_components/mocha/mocha.js:4630\n      at timeslice (http://localhost:9999/bower_components/mocha/mocha.js:5761)\nI'll work on a fix\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/mozilla/localForage/issues/402#issuecomment-122813579\n.\n. Yes, I had that in mind, but wanted to avoid possible problems with the\ndifferent module bundlers/loaders.\nself is one of the most common variable names (along with that) used\nfor sharing context with closures (it's used by localforage as well, as you\nnoticed). As a result, there are cases that people overwrite it without\neven knowing its existence.\nAnyway if have anything against my approach, I would be happy to change\nthat with a new commit.\n\n\nOn Tue, Jul 21, 2015, 17:25 Remko Boschker notifications@github.com wrote:\n\nHi,\nI mistakenly took the src instead of the build with the drivers in the\nfile. Sorry for that.\nI noticed that window has a property self that returns itself. Perhaps\njust replacing this with self will do. I'll add a unit test for\nservice-workers tomorrow.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/mozilla/localForage/issues/402#issuecomment-123333900\n.\n. Let me rephrase that, since I think I might missed my point/wasn't clear:\n- For most devs/libs, window is the global object in JS. So for everyday webdev window is respencted and not redeclared. Some of them ignore the existence of self and even more redeclare it to pass contexts around.\n- For *worker devs/libs, self is the global object by default. We can bet that they use it carefully, since otherwise bugs should have appear.\n\nStill, I have no problem using just self if you think that all the above is just an overkill.\n. @tofumatt, @remkoboschker \nI removed the skip in PR #406 and seems to work with changes I did to call(...) and the babel system import plugin.\nI can verify that #406 fixes web-workers and passes the test cases both on Travis and locally/in-browser.\n@remkoboschker I also started looking at a service worker test case (today morning), but it is still in embryonic state I think.\n. That looks very similar to my code! On top of that, I'm currently trying to\npost the desired driver name to the service worker.\nOn Thu, Jul 23, 2015, 14:57 Remko Boschker notifications@github.com wrote:\n\n@thgreasi https://github.com/thgreasi I have a basic unit test\nserviceworker-client.js:\nimportScripts(\"/dist/localforage.js\");\nself.oninstall = function(event) {\n   event.waitUntil(\n       localforage\n       .setItem('serviceworker', 'serviceworker present')\n       .then(function(value) {\n           console.log(value);\n       })\n   );\n};\ntest.serviceworker.js:\ndescribe('serviceworkers', function() {\n    it('should set a value', function(done) {\n       navigator\n       .serviceWorker\n       .register('/test/serviceworker-client.js')\n       .then(function() {\n           return localforage.getItem('serviceworker');\n       })\n       .then(function(result) {\n           expect(result).to.equal('serviceworker present');\n           done();\n       })\n       .catch(function(error) {\n           done(error);\n       });\n   });\n});\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/mozilla/localForage/issues/402#issuecomment-124074505\n.\n. Can I find this code in any public commit that I can cherry pick and push\non top of my PR? (And also possibly cherry pick it retaining your commit\ninfo.)\n\nOn Thu, Jul 23, 2015, 16:55 Thodoris Greasidis thgreasi@gmail.com wrote:\n\nThat looks very similar to my code! On top of that, I'm currently trying\nto post the desired driver name to the service worker.\nOn Thu, Jul 23, 2015, 14:57 Remko Boschker notifications@github.com\nwrote:\n\n@thgreasi https://github.com/thgreasi I have a basic unit test\nserviceworker-client.js:\nimportScripts(\"/dist/localforage.js\");\nself.oninstall = function(event) {\n   event.waitUntil(\n       localforage\n       .setItem('serviceworker', 'serviceworker present')\n       .then(function(value) {\n           console.log(value);\n       })\n   );\n};\ntest.serviceworker.js:\ndescribe('serviceworkers', function() {\n    it('should set a value', function(done) {\n       navigator\n       .serviceWorker\n       .register('/test/serviceworker-client.js')\n       .then(function() {\n           return localforage.getItem('serviceworker');\n       })\n       .then(function(result) {\n           expect(result).to.equal('serviceworker present');\n           done();\n       })\n       .catch(function(error) {\n           done(error);\n       });\n   });\n});\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/mozilla/localForage/issues/402#issuecomment-124074505\n.\n. Is there any chance you can rebase over the latest commit of my PR (and\neven better squash some commits)?  I'm getting a huge diff on the dist\nfiles even though I was just expecting the extra test case.\nOn the other hand I don't want to spam you, the service worker test case\ncould also be a separate PR :)\n\n\nOn Thu, Jul 23, 2015, 17:49 Remko Boschker notifications@github.com wrote:\n\nI have pushed the branch to https://github.com/curit/localForage. In\ntest/test.serviceworker.js en in test/serviceworker-client.js an earlier\nattempt to send messages is commented out. I found this example to be quite\nuseful\nhttps://jakearchibald.github.io/isserviceworkerready/demos/postMessage/\nGood luck!\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/mozilla/localForage/issues/402#issuecomment-124129935\n.\n. Just 1 thing to note: awesome :+1:\n. @remkoboschker best wishes regarding your holidays. I will try to finish this up by the time you are back.\nThanks for your collaboration.\n. @remkoboschker Awesome work!!! I'm speechless :open_mouth: :open_mouth: :open_mouth: :smiley: \nI will try to merge it today or at most tomorrow.\n. Does grunt test work from terminal/console?\n. @tofumatt , thanks to @remkoboschker 's help, this PR now also contains tests for service workers.\nThey currently do not run inside PhantomJS, only locally with Chrome 44+ or firefox nightly with the dom.serviceworker enabled (as @remkoboschker noted).\nW8ting 4 review.\n. I guess that Iceland-cool should be way cooler than Greece-cool, especially\nthis time of the year \ud83d\ude00\n\nOn Sat, Jul 25, 2015, 13:54 Matthew Riley MacPherson \nnotifications@github.com wrote:\n\nCool! I'm in Iceland for the week so I might not get to it until Sunday\nevening or Monday. But I'm on it ASAP!\n- tofumatt\nOn Sat, Jul 25, 2015 at 8:55 AM, Thodoris Greasidis\nnotifications@github.com wrote:\n\n@tofumatt , thanks to @remkoboschker 's help, this PR now also contains\ntests for service workers.\nThey currently do not run inside PhantomJS, only locally with Chrome\n44+ or firefox nightly with the dom.serviceworker enabled\n(as @remkoboschker noted).\nW8ting 4 review.\nReply to this email directly or view it on GitHub:\nhttps://github.com/mozilla/localForage/pull/406#issuecomment-124822718\n\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/mozilla/localForage/pull/406#issuecomment-124833658.\n. @tofumatt any feedback on this?\n. Tadaaa.\nLate sleepless hot summer night's commits...\nCan't even say it right two times.\n. Localforage supports more than one instances and localforage is just a\nreference to the default auto-constructed instance. Some versions ago\nlocalforage was a singleton not using an OO approach, so code like this\nwould probably work.\nAt the moment you need to make calls using the property notation so that a\nproper this value is used (or use bind()).\n\nYou should be able to use:\n$.when.apply($, _.map(lfKeys, function(k){ return\nlocalforage.removeItem(k); })).promise();\nOr:\n$.when.apply($, _.map(lfKeys, localforage.removeItem,\nlocalforage)).promise();\nOr:\nvar removeItem = .bind(localforage.removeItem, localforage);\n$.when.apply($, .map(lfKeys, removeItem)).promise();\nPS: you can use Promise.all instead of $.when since I think that it is\npolyfilled by localforage itself.\nOn Tue, Jul 21, 2015, 18:02 Zachary Neely notifications@github.com wrote:\n\nI have this line:\nreturn $.when.apply($, _.map(lfKeys, localForage.removeItem)).promise();\nwhich is supposed to remove every item whose key is in the array lfKeys\nand return a promise for the removal of all of them. This needs to work in\nslightly older browsers, so I'm stuck using jQuery's promises (I'm not even\nsure if it's when function can handle es6/shimmed promises, but this was my\nexperiment). The problem is that in the removeItem call, this is window .\nSo as a result the self.ready() call throws an exception.\nWrapping the localForage.removeItem reference in an _.bind(...,\nlocalForage) call solves the problem (except that the callback is\nundefined, but that's a separate issue).\nI'm not sure if this is an issue with the library, or if I'm violating the\nmethod's contract by calling it in this way, but I wanted to report it just\nin case.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/mozilla/localForage/issues/408.\n. What is the full path of the file that you are using?\nDoes the same file work on other browsers?\n. I hope you found your way around.\nThere is also a sample ionic app repo using it: https://github.com/thgreasi/localForage-cordovaSQLiteDriver-TestIonicApp\n. @siddo420 I actually just implemented the driver as a proof of concept and for benchmarking purposes.\nI have yet to use it on a prod level application, but I will probably ship one using it, in a month or two.\nIt should be working fine since:\n- it uses Cordova-sqlite-storage that is a proven high quality implementation\n- in the \"1000 parallel inserts & retrieves\" benchmark in localForage-cordovaSQLiteDriver-TestIonicApp, it worked without any errors.\n-  even though it's  a recent implementation, it already gets ~16 dls/month from npm (we don't know about bower stats) and I have yet to see any issue reported (which is a good sign)\n\nNever used it with localForage-backbone and don't know the level that it supports custom drivers (I'm not actually a backbone person).\nHopefully, someone could give you better feedback than me.\n. The default database name should be \"localforage\" just like in the websql driver.\nRegarding the location of the db file, I really have no clue. You should refer to Cordova-sqlite-storage docs.\nDid you have any issues with the driver? Feel free to fill any issues in the driver's repo.\n. There already exists a test case for browserify with babelify and it seems\nto be working. Can you share some extra info about your configuration?\nOn Mon, Aug 3, 2015, 13:55 Bob Hamblok notifications@github.com wrote:\n\nBrowserify does not check the existence of the \"browser-field\" in the npm\npackage.json. Even with babelify, it does not work.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/mozilla/localForage/issues/412.\n\nThodoris Greasidis\nComputer, Networking &\nCommunications Engineer\n. I will take a look at it as soon as I'm home. It's nice to have a reference\nrepo to work on this.\n\nOn Mon, Aug 3, 2015, 14:37 Tobias Bieniek notifications@github.com wrote:\n\nI have the same issue at https://github.com/Turbo87/open-flight-planner\nI worked fine with localforage v1.2.4, but breaks with v1.2.6.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/mozilla/localForage/issues/412#issuecomment-127203420\n.\n\nThodoris Greasidis\nComputer, Networking &\nCommunications Engineer\n. While testing with open-flight-planner got some interesting findings:\n- browserify does not like \"browser\": \"dist/localforage.js\"\n  - it gives: Error: Cannot find module './../utils/serializer'\n- it works fine with \"browser\": \"build/es5src/localforage.js\",\n  - if it is included of course. The whole point of this is to leave all the project-specific babel configurations away from our users\n. It looks like that with browserify we can't just concat the files.\nWe \n- either need to actually use browserify to generate our build (I'm not a fan of this),\n- or add the es5 sources and point browserify to them.\n\nI like the second more (obviously just personal opinion), since my point of view while refactoring to es6 was to have minimal +-diff on the dist files.\nI never actually got the old dist files to work with browserify and that is visible from our browserify test code. So I think that our build system never actually supported browserify users, or at least not without extra configuration. It seems that all this time it worked just because we were pointing them to src/. (On the other hand I'm not a browserify expert.)\n. A browserify build is generated at test/localforage.browserify.js after a run of grunt test (for the browserify tests). I'm not sure how(/if) this would work for requirejs users, but we currently include runner.browserify.js (an 1line file) in order to make localforage available to the global namespace.\n. It looks like that it removes the UMD pattern.\nEDIT: Obviously since it's commnJS by definition.....\n. I've done some research on this during this week and this seems to be a general problem for libs that need transformations to build.\nI will probably open a PR tonight that will introduce some changes to package.json, so that browserify users will be able to use the src in their build chain (like in older versions).\nThe PR will basically disclose our babel(ify) configuration options and transformations so that browserify-enabled apps will know how to build & require localforage module.\nIn a later PR (hopefully in a week) I will try to direct browserify users to the dist sources.\nThe are some issues there, with browserify trying to reanalyze the require calls of the already bundled dist file.\nSuch a move will probably only allow us to export the localforage namespace, encapsulating/hiding the drivers and the serializer namespaces. Any suggestion about how to expose them for plugins? Maybe something like localforage.serializer or localforage.getSerializer() ?\n. I would also like to suggest a localforage.getDrivet(driverName) method that will be used by setDriver internally.\nSuch a method would allow:\n- the creation of custom drivers that extend a base driver and only override some of the methods (eg: Cordova sqlite driver(s) actually only need to override the _initStorage methods)\n- the user to check whether a driver is defined\n. Glad to hear it.\nYes, I guess so. It would be exactly what set Driver imports and uses.\nMy only extra concern, would be whether it should return a promise. With the current implementation, it should. On the other hand, since, as you said, we are dropping dynamic driver loading, it could also return a plain driver object.\n. On the other hand, we all love promises and localforage at the moment has very few not promise-based APIs...\n. Using the code from the current master, you can still require the serializer on its own. \nI will use localForage-cordovaSQLiteDriver as an example. In that project I assume that the custom driver will be next to localforage module (like a peer dependency) and as a result the relative path (from localforage-cordovasqlitedriver.js to the serialzier.js) that is used by the require statement is './../../localforage/src/utils/serializer'.\nThe \"expose the serializer on the localforage namespace\" is not required by the current master.\nIt will be a nice to have after we start using a bundler (instead of just concatenating the files), since the bundler (eg: browserify) will only expose the 'localforage' namespace.\nOn the other hand, if you are using browserify you will always be allowed to just require the serializer from the src folder, even after we change the source bundling mechanism. For example, require('node_modules/localforage/src/utils/serializer').\n. @af7 About point 2.\nThere is a localforage.supports() method but it looks like it is not documented. It should be visible from your browser's dev tools console though.\n. @mshwery I think that you should not manually point to the dist file and use whatever the library points in its package.json.\nThe whole point of the browser field, is to allow the package maintainer handle the appropriate entry point for browserify users.\n\nI checked those out but their setup really isn't different than my use case...\n\nSuch an override is considered a setup difference.\n. That's our target for v1.3 by the way.\nWe will drop all the module system specific fields from package.json and\npoint everyone to the dist file, using only the 'main' package.json field.\nIn any case, just trust the package.json and you will not face any problem,\neven after upgrading to v1.3 (when released).\nOn Wed, Aug 26, 2015, 20:21 Matt Shwery notifications@github.com wrote:\n\n@tofumatt https://github.com/tofumatt @thgreasi\nhttps://github.com/thgreasi you are probably right that I should just\nspecify a list of modules, but in my case if the package provides .min\nversions I would rather bundle those than do minification unnecessarily\nmyself. Whatever is in the dist directory should all be fully working\npackages without any build step (at least, for client-side packages that\nshould be the expectation).\nRegardless, I'm pointing to the exact same file as localforage's\npackage.json:\nhttps://github.com/mozilla/localForage/blob/master/package.json#L49\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/mozilla/localForage/issues/412#issuecomment-135113249\n.\n\nThodoris Greasidis\nComputer, Networking &\nCommunications Engineer\n. Also, the sources and package.json in the master branch are not the same\nfound in the latest release v1.2.8 (if I can remember correctly). The\nmaster branch currently holds the sources of what will be v1.3 .\n\nOn Wed, Aug 26, 2015, 20:33 Thodoris Greasidis thgreasi@gmail.com wrote:\n\nThat's our target for v1.3 by the way.\nWe will drop all the module system specific fields from package.json and\npoint everyone to the dist file, using only the 'main' package.json field.\nIn any case, just trust the package.json and you will not face any\nproblem, even after upgrading to v1.3 (when released).\nOn Wed, Aug 26, 2015, 20:21 Matt Shwery notifications@github.com wrote:\n\n@tofumatt https://github.com/tofumatt @thgreasi\nhttps://github.com/thgreasi you are probably right that I should just\nspecify a list of modules, but in my case if the package provides .min\nversions I would rather bundle those than do minification unnecessarily\nmyself. Whatever is in the dist directory should all be fully working\npackages without any build step (at least, for client-side packages that\nshould be the expectation).\nRegardless, I'm pointing to the exact same file as localforage's\npackage.json:\nhttps://github.com/mozilla/localForage/blob/master/package.json#L49\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/mozilla/localForage/issues/412#issuecomment-135113249\n.\n\nThodoris Greasidis\n\nComputer, Networking &\nCommunications Engineer\n\nThodoris Greasidis\nComputer, Networking &\nCommunications Engineer\n. Me sorry too :(\n. We  also have to change the \"browser\" field in package.json to target the\ndist file as well.\n\nOn Mon, Aug 3, 2015, 14:57 Matthew Riley MacPherson \nnotifications@github.com wrote:\n\nNo, this is my fault, sorry [image: :cry:]\nWhen we did the refactor into es6 we removed support for including\nsrc/localforage.js and require people to include the fully built version\nin dist. I've never officially supported including the source files but I\nthink it's always worked until now and a lot of people have been doing\nit--but it causes us headaches [image: :smile:]\nI should have marked this as a version bump to 1.3 and didn't. I'll push\n1.2.7 soon and it should continue working. Then I'll push 1.3, which won't\nwork as you've been using but should work with the dist/ version.\nSorry about all this. Should be fixed soon.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/mozilla/localForage/issues/413#issuecomment-127209459\n.\n\nThodoris Greasidis\nComputer, Networking &\nCommunications Engineer\n. Just pointing to the dist file in package.json should be enough I think.\n\nOn Mon, Aug 3, 2015, 15:15 Veeck notifications@github.com wrote:\n\nSounds like a good idea since other users of ampersand-sync-localforage\nmight be surprised too :-)\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/mozilla/localForage/issues/413#issuecomment-127215417\n.\n\nThodoris Greasidis\nComputer, Networking &\nCommunications Engineer\n. The whole point of this PR it to fix localforage for browserify users, before changing the current build system so that we point all users to the dist files.\n\nIt still points browserify to the src files (like before the babel&es6 changes) but discloses the transformations and configurations required to build localforage sources with browserify (specifically babelify and system-import-transformer).\nIn my tests open-flight-planner seems to work, requiring only system-import-transformer.\n@rejas, @Turbo87, @bhamblok can you cross check that your apps work with this branch?\n. TL;DR You need to install system-import-transformer.\nThis is absolutely expected, since when using browserify to build a node_module into your dist, you need to have all the required transformers and plugins installed.\nBrowserify would also complain in case you were missing babelily itself, since it is a dependency specified for the browserify build in package.json.\nAs I said earlier, this is just a quick fix to allow browserify users to use the code in the master branch again. This is obviously not an ideal solution but just a temporary one. The next step is to point them to a browserify-friendly dist file (unfortunately this was never the case before).\n. Just pushed 352d258a44c7996b659a90d3bab672c5b0fe18b4 that modifies the browserify build test, to use the module sources (and build options) as defined in package.json.\nHopefully this will prevent us from breaking localforage for browserify users again.\n. Yea, more or less.\nMost of the browserify build options have moved to package.json and a babel configuration file. Even in the test case we require the main repo directory, making browserify read package.json for the build options and file paths.\nNext thing is to do the same for webpack testing.\n. Just pushed an extra commit, that adds webpack bundling tests.\n. One thing that I love about August, is that travis builds run ultra-fast :smile: \n. We should add a notice in README about using require('script!localforage') in webpack.\n. At least for now. Until we start using browserify instead of simple concat for the dist files.\n. That's quite straightforward. We could also add an extra note like:\nBrowserify users\nEnsure that you have the required transformers & plugins installed.\n. @jondkoon & @tofumatt Just opened #439 for the v1.2 branch.\n@jondkoon Please test if this works for you (it should, since we have tests & already tested it against open-flight-planner).\n. @jondkoon With #432 you will no longer need to use the script loader.\n. I think we already have a similar test for the keys() method. We could\nprobably use the same for iterate().\nOn Thu, Aug 13, 2015, 18:15 Matthew Riley MacPherson \nnotifications@github.com wrote:\n\nThanks! (Was it really that simple, haha?)\nWould you be able to write a test for this?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/mozilla/localForage/pull/418#issuecomment-130725914.\n\nThodoris Greasidis\nComputer, Networking &\nCommunications Engineer\n. This is the test I was talking about.\n. Just pushed a proof-of-concept branch that uses browserify to create the dist files.\npackage.json points everyone (no matter if they are using browserify or webpack) to the same main dist file.\nThe only namespace exposed on window is localforage.\n. Just wait till tomorrow for my webpack bundling findings and comparison!\n. Is any of these two preferred/have wised use by Mozilla projects? Do you have any preference?\n. Just pushed a proof-of-concept branch that uses webpack to create the dist files.\nOnce again:\n- package.json points everyone to the same main dist file\n- the only namespace exposed on window is localforage\n. ## Summary\n\nbrowserify build\n\nuses babelify for ES6 compilation\nbrowserify leaves require calls intact in the dist file, so we need to use a derequire step to allow rebundling\nwebpack users can use both require('localforage') and require('script!localforage')\nrebundling with webpack, using require('localforage'), shows a warning :\n\nWARNING in ./dist/localforage.js\nCritical dependencies:\n8:484-491 This seems to be a pre-built javascript file. Though this is possible, it's not recommended. Try to require the original source to get better results.\n @ ./dist/localforage.js 8:484-491\nwebpack build\n\nuses babel-loader for the ES6 compilation\nwebpack renames require calls to __webpack_require__ by default\nwebpack users can use both require('localforage') and require('script!localforage')\n\nFile Sizes\npre ES6\n90.7KB localforage.js\n25.2KB localforage.min.js\n71.7KB localforage.nopromises.js\n20.0KB localforage.nopromises.min.js\nbabel + concat\n97.3KB localforage.js\n26.5KB localforage.min.js\n78.3KB localforage.nopromises.js\n21.4KB localforage.nopromises.min.js\nbrowserify\n89.0KB localforage.js\n26.0KB localforage.min.js\n67.3KB localforage.nopromises.js\n19.8KB localforage.nopromises.min.js\nwebpack\n88.6KB localforage.js\n24.4KB localforage.min.js\n69.6KB localforage.nopromises.js\n19.2KB localforage.nopromises.min.js\nUMD code\npre ES6\njs\nif (moduleType === ModuleType.DEFINE) {\n    define('localforage', function() {\n        return localForage;\n    });\n} else if (moduleType === ModuleType.EXPORT) {\n    module.exports = localForage;\n} else {\n    this.localforage = localForage;\n}\nbabel + concat\njs\n(function (global, factory) {\n    if (typeof define === 'function' && define.amd) {\n        define('localforage', ['exports', 'module'], factory);\n    } else if (typeof exports !== 'undefined' && typeof module !== 'undefined') {\n        factory(exports, module);\n    } else {\n        var mod = {\n            exports: {}\n        };\n        factory(mod.exports, mod);\n        global.localforage = mod.exports;\n    }\n})(this, function (exports, module) {\n//...\nbrowserify\njs\n(function(f) {\n    if (typeof exports === \"object\" && typeof module !== \"undefined\") {\n        module.exports = f()\n    } else if (typeof define === \"function\" && define.amd) {\n        define([], f)\n    } else {\n        var g;\n        if (typeof window !== \"undefined\") {\n            g = window\n        } else if (typeof global !== \"undefined\") {\n            g = global\n        } else if (typeof self !== \"undefined\") {\n            g = self\n        } else {\n            g = this\n        }\n        g.localforage = f()\n    }\n})(function() {\n//...\nwebpack\njs\n(function webpackUniversalModuleDefinition(root, factory) {\n    if(typeof exports === 'object' && typeof module === 'object')\n        module.exports = factory();\n    else if(typeof define === 'function' && define.amd)\n        define(factory);\n    else if(typeof exports === 'object')\n        exports[\"localforage\"] = factory();\n    else\n        root[\"localforage\"] = factory();\n})(this, function() {\n//...\n. That's more or less what I'm thinking as well.\n+1 to webpack for me as well.\nThe only part that I prefer browserify, is the way you configure plugins like\nbabel. I find the webpack loader configuration a little less convenient.\nOn Thu, Aug 20, 2015, 13:10 Matthew Riley MacPherson \nnotifications@github.com wrote:\n\nPS: This is fucking amazing [image: :+1:] [image: :grin:] [image: :grin:] [image:\n:grin:]\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/mozilla/localForage/issues/424#issuecomment-132964451\n.\n\nThodoris Greasidis\nComputer, Networking &\nCommunications Engineer\n. I'm currently looking at #363 (without using await or generators), where\nI've also added the getDriver method to make the logic a little cleaner and\nallow custom drivers to inherit from the prebundled.\n\nOn Thu, Aug 20, 2015, 15:03 Thodoris Greasidis thgreasi@gmail.com wrote:\n\nThat's more or less what I'm thinking as well.\n+1 to webpack for me as well.\nThe only part that I prefer browserify, is the you configure plugins like\nbabel. I find the webpack loader configuration a little less convenient.\nOn Thu, Aug 20, 2015, 13:10 Matthew Riley MacPherson \nnotifications@github.com wrote:\n\nPS: This is fucking amazing [image: :+1:] [image: :grin:] [image: :grin:] [image:\n:grin:]\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/mozilla/localForage/issues/424#issuecomment-132964451\n.\n\nThodoris Greasidis\nComputer, Networking &\nCommunications Engineer\n\n\nThodoris Greasidis\nComputer, Networking &\nCommunications Engineer\n. :+1:\n. Note: before releasing this, we should also add the getDriver() method and expose the serializer so that (existing or not) custom drivers have a way to use it.\n. +1 on using a Promise based API to retrieve the serializer.\nDo you prefer exposing as a Promise as a property localforage.serializer or a method called getSerializer and be more consistent with getDriver()? I would expect that a property would work like a namespace and just be there ready & waiting for me to use, instead of having to using .then().\n\nI guess that getDriver() and exposing the serializer should be a separate PR from this. I have already implemented getDriver() in my trySetDriver branch. I can open a new PR with getDriver() & exposing serializer right after this gets merged.\n. Just did a rebase on this branch over the current master.\n. Any feedback on this? I have some branches ready (getDriver & a workaround for #363) and waiting for this to be merged.\n. Np hf :smile:\nVacations are always open-source productive periods anyway.\n. ???\n. :+1:\n. @tofumatt I will do my best, but it might take me longer than you to review\n:)\nIt's Friday and as always, extra work spawns at the office...\nOn Fri, Aug 28, 2015 at 11:44 AM Matthew Riley MacPherson \nnotifications@github.com wrote:\n\nThat\u2019s awesome! If you think it\u2019s good feel free to merge @thgreasi. I\u2019m\nat a conf all day and don\u2019t have the chance to review much until tomorrow.\n:-)\n- tofumatt\nOn Fri, Aug 28, 2015 at 7:11 AM, Thodoris Greasidis\nnotifications@github.com wrote:\n\n:+1:\nReply to this email directly or view it on GitHub:\nhttps://github.com/mozilla/localForage/pull/437#issuecomment-135637790\n\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/mozilla/localForage/pull/437#issuecomment-135684361.\n\nThodoris Greasidis\nComputer, Networking &\nCommunications Engineer\n. I would never had thought that about the site dist file!\n. I would prefer if this was split into two commits and PRs. I'm almost 100% positive on the docs part (would merge it immediately) but I'm not really sure about the necessity of grunt etc changes.\n. Great, I will merge it when I'm home.\n. Since I'm having some issues with middleman & ruby on my Ubuntu 12.04 laptop and don't want to do a merge without testing the result locally, I will probably do the merge when I'm home on Sunday night/Monday morning.\n@tofumatt this and #438 look great. If you can merge them before me, I could take a look at backporting #417 to the pre-es6 branch.\n. What version of localForage do you use? Do you use npm or bower to install?\n. I'm afraid I forgot to also mention about using webpack script loader.\nTake a look at https://github.com/thgreasi/localforage-webpack .\n. Great, it's just that with script loader you don't need the var localforage = part, just require(\"script!localforage\").\n. Should we close this now?\n. How does your lf-test.js looks like?\n\nOn Sun, Sep 13, 2015, 01:50 AJ ONeal notifications@github.com wrote:\n\nI don't understand the security implications of adding a blanket catchall\nblob: to connect-src 'self' blob: https://example.com/, so I would be\nvery hesitant to say that doing so \"fixes\" the problem.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/mozilla/localForage/issues/445#issuecomment-139826217\n.\n\nThodoris Greasidis\nComputer, Networking &\nCommunications Engineer\n. Oh, sorry, It looked confusing in my mail client :disappointed: \n. +1\n. A fast PR before fixing #363 (aka trySetDriver).\n. Great :+1:\nIf have time I will rebase & open a new one today for the drivers that fail during init!\n. It took me a lot of time to write and some iterations & refactors to bring the code to its final state. So I guess that the time required for reviewing was expected given the complexity & effort.\nIt was great when I first tried it on an old version of Firefox in private mode and it worked by falling back to localStorage, after the first storage access!\n. Hmm I guess that your import is targeting the src files, right?\nWhat results you get when you import one of the dist files?\n\nOn Tue, Sep 15, 2015, 00:15 Stephen Lautier notifications@github.com\nwrote:\n\nAfter some debugging the only way I seem to access it is by doing:\nlocalforage.default.config(...\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/mozilla/localForage/issues/450#issuecomment-140207906\n.\n\nThodoris Greasidis\nComputer, Networking &\nCommunications Engineer\n. import localforage from \"localforage\" should also work, (I think).\n. :+1:\n. @PJudson001 Does this pen work for you?\nIt works for me, on Win7 IE11.\n@tofumatt How about adding such an example in the README?\n. Any feedback on this?\n. This should be fixed in master. Can you give it a try?\n. Was fixed by #406 if I'm not mistaken.\n. I think that the next version will be 1.3 which will have a lot of changes (not in the API). I can't estimate its release.\nMaybe @tofumatt has a better insight on this.\n. Wait!!!!!!\nWe also need to add getSerializer()!!!\n. Didn't add dist files to the PR to ease merging :)\n. Yea, but what if you needed to do a debug on your build?\nI guess that if you already have a build step for WebPack, it should be easy to add an Uglification step as well (in case you don't already have).\n@tofumatt Your call, I literally have no problem with this.\n. Just to note, 1.2.10 shouldn't have any problems with webpack or browserify. I've written tests for that.\n. I'm glad to hear that the system-import-transformer works for SystemJS!\nWe just need to add the tests now :)\n. I will take a look at it during the weekend :)\n\nThodoris Greasidis\nComputer, Networking &\nCommunications Engineer\n. @tofumatt I like the new structure, it looks simpler.\nI guess that npm run-script test is the new way to test localforage, am I correct (grunt test any more fails since it can't find the saucelabs-browsers.js file)? Will we be bringing back the rest of the tests (like test.serviceworkers.js and test.nodriver.js)?\n. @tofumatt This review took me longer than I thought.\nI really like the ES6 syntax in the tests (() => {}) but what is really awesome is that we no longer need to use done(). Returning a Promise seems so natural! :+1:\n\nTests\nAfter a comparison I found that some test \"suits\" are currently missing:\n- test.callwhenready.js\n- test.iframes.js\n- test.nodriver.js\n  - The same approuch with what you did in test.faultydriver.js would be perfect. Really liked the before() & after() in there.\n- test.serviceworkers.js\n- integration tests (perhaps in a seperate longer-running grunt task)\n  - browserify\n  - webpack\n  - requirejs\n  - using localforage.min.js (perhaps we can omit this)\n  - should we also add tests for localforage.nopromises.js after #562\nAre there any plans to migrate them as well?\nGruntfile.js\nI guess we can remove the mocha unit tests that still refer the old test urls like:\nhttp://localhost:9999/test/test.main.html\nWeird\nOn my laptop I get 4 FAILED, 475 SUCCESS and 65 SLOW tests  (logs here).\nSince in Travis everything works, this might be related to the removal of the timeout increases that we used to have in some tests and/or my laptop being lazy.\n. Are you targeting the src folder?\n. In 1.3 you don't need to use require('script!localforage');, a plain require should work (we should change that in README). The dist files are precompiled es5 and are bundled with webpack.\nIf you try to make your own build using the src files then you should install the system-import-transformer.\nhttps://github.com/thgreasi/babel-plugin-system-import-transformer\n. They shouldn't need anything since we point them to the dist files. But we\nshould first test it on a dummy browserify & webpack project, since if they\nhave babel installed it might end up reading our .babelrc file and import\nit's configuration.\nWe can't add such test case, since our project already has babel and it's\nplugins. I haven't tested on dummy projects since I'm somewhat low on\navailable time lately.\nWe might better just change our note only for those users.\nOn Fri, Oct 9, 2015, 15:30 Matthew Riley MacPherson \nnotifications@github.com wrote:\n\nDo browserify users still need these plugins and transformers\nhttps://github.com/mozilla/localForage/blob/master/package.json#L57 or\ncan I remove that too?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/mozilla/localForage/issues/463#issuecomment-146851830\n.\n\nThodoris Greasidis\nComputer, Networking &\nCommunications Engineer\n. Sorry if my initial issue description was inaccurate or misleading :(\n\nOn Fri, Oct 9, 2015, 18:30 Thodoris Greasidis thgreasi@gmail.com wrote:\n\nThey shouldn't need anything since we point them to the dist files. But we\nshould first test it on a dummy browserify & webpack project, since if they\nhave babel installed it might end up reading our .babelrc file and import\nit's configuration.\nWe can't add such test case, since our project already has babel and it's\nplugins. I haven't tested on dummy projects since I'm somewhat low on\navailable time lately.\nWe might better just change our note only for those users.\nOn Fri, Oct 9, 2015, 15:30 Matthew Riley MacPherson \nnotifications@github.com wrote:\n\nDo browserify users still need these plugins and transformers\nhttps://github.com/mozilla/localForage/blob/master/package.json#L57 or\ncan I remove that too?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/mozilla/localForage/issues/463#issuecomment-146851830\n.\n\nThodoris Greasidis\nComputer, Networking &\nCommunications Engineer\n\n\nThodoris Greasidis\nComputer, Networking &\nCommunications Engineer\n. Hi there @TCMiranda \nIf you're defining your own promise polyfill in your configuration, then how about targeting the .nopromises.js dist file? Requiring localforage with the webpack script loader plugin might also be a secondary solution for your problem.\n\nIn 1.3 we stopped requiring the promise polyfill inside the code since requiring polyfills is often criticised as an antipattern and should be avoided (the code should not be coupled with a polyfill, we have tooling for that). So, for the simple use case of the library (\"drop it in and it should work\") we are using concat to prepend the promise polyfill and prepare the exexution environment before actually defining localforage.\nThat way, we also allow people to repack the src files using a different or no polyfill. \nWaiting for your feedback!\n. Great! Glad to hear that!\nOn Sat, Oct 10, 2015, 23:14 Tiago de Carvalho Miranda \nnotifications@github.com wrote:\n\nHi @thgreasi https://github.com/thgreasi\nI Managed to solve my problem when requiring localforage via script-loader\nafter defined Promise globally, not by ProvidePlugin.\nThanks for the help!\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/mozilla/localForage/issues/465#issuecomment-147122303\n.\n\nThodoris Greasidis\nComputer, Networking &\nCommunications Engineer\n. ES6 code was actually introduced in v1.3, that's why the problem wasn't there in v1.2.\nI guess that you are directly targeting the src files, is that true?\nSince there is no ES6 code in the dist files (and of course no import exports).\n\nOn the other hand we have a .babelrc file that should instruct your builder to use our configuration for that file transformation!?!?\n. If you didn't change the localforage package at all, then you shouldn't be getting errors related to the src files and es6. As you can see, the dist files do not contain any import/export statements and also our package.json targets the dist files.\nCan you share your configurations and how you import localforage in your files?\n. I think that a separate instance is the only way to have it work.\n. Yes, this was added to support service & web workers.\n\nThis error prevents localforage being upstream with webpack.\n\nWhat exactly is your error?\nBecause we are using webpack to bundle localforage's sources in v1.3 and never got any error!?!?\n. As said in #470,\n\nWe have webpack repacking tests\n\nWhat exactly is your error and what configuration do you use?\n. Is there an error trace available? Are you targeting the /src/ files?\n. I'm still not able to reproduce this... and the integration tests seem to\nbe passing !?!?\nCan you test of #470 fixes your problem?\n\nThodoris Greasidis\nComputer, Networking &\nCommunications Engineer\n. @montogeek I'm not sure if this change has been published as part of a npm release, but #538 has completely removed the aforementioned code.\n. This change might need to be applied to all the src files of localforage.\n. We have webpack repacking tests, any chance you can demonstrate your error in there\n. I guess we can merge this now that its confirmed to be required two\ndifferent build configurations. :+1:\nI still can't understand the problem and the fact that this change isn't\nrequired for all occurrences of self puzzles me even more.\nA test case would be a nice to have, but as far as it concerns me, this is\na gogo for merging even without it.\n\nThodoris Greasidis\nComputer, Networking &\nCommunications Engineer\n. Oh ok. We should then add a es6/babel + webpack test case to replicate this!\nOn Sat, Nov 28, 2015, 21:50 Sam Kelleher notifications@github.com wrote:\n\nThe instances of self within the closure are just reflections of this.\nWhen the closure is executed with window or self, they are set as this\ndepending if the code is being executed inside a webworker or not.\nThe only reason I can think of as to why it doesn't work for us but still\npasses the test is that the version of webpack or babel (newer than in\nlocalforage) is now (rightly so I think) sensitive to self being\nundefined without checking first.\nThe repack entry point used in the test uses a require() call vs an module\nimport which is what we're using, so maybe it has something to do with that.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/mozilla/localForage/pull/470#issuecomment-160332001.\n\nThodoris Greasidis\nComputer, Networking &\nCommunications Engineer\n. Any change you can rebase this PR to the latest commits?\n. I can't think of a way to test this, except by replicating the build setup\nthat was originally causing the issue.\nAlso, I would prefer it, if the same code was used in the rest files as\nwell (serializer & drivers) for consistency.\n\nThodoris Greasidis\nComputer, Networking &\nCommunications Engineer\n. We could use the dummyStorageDriver that is used for the tests. We should probably refactor it to use the common utils that we now use.\n. We could possibly clone it and use a more \"professional\" looking name, like MemoryStorage or something.\n@AshleyScirra have you tested the sessionStorageWrapper plugin in the use case that you described?\nI've been hearing that it works in some cases that localStorage fails.\n. @AshleyScirra I totally agree with you, about in memory storage\nBUT can you also answer to my previous question:\n@AshleyScirra have you tested the sessionStorageWrapper plugin in the use case that you described?\n. @AshleyScirra That's great!\nWhy don't you open a PR with this exact change?\nPS: I can open a PRwith your suggested change tonight, if that's too much trouble for you.\n. Loading with no driver and rejecting the .ready() promise, is way better\nthan throwing an exception, since this allows developers to handle such\ncase and provide a custom driver.\nI will open a PR for this tonight.\n\nRegarding the in memory storage driver, I think we should track it in a\nseparate issue and get some feedback about it from @tofumatt.\n\n\nThodoris Greasidis\nComputer, Networking &\nCommunications Engineer\n. We could use something like the dummyStorageDriver that is used for the tests.\nOn the other hand, we could avoid serialization and just do deep clones of the objects.\n. I think that we can consider this one as resolved since localForage-memoryStorageDriver is available since May 2016 (sorry for not posting earlier).\n\n@davidguttman After merging #448 we can be confident that localforage works just fine in private browsing mode too. That's because we now test whether the asynchronous initialization of a driver fails and try to setup the next preferable one (in an async & user transparent manner).\n. > the problem was that one of mu scripts was removing the data after i logout so as @tofumatt said it is working correctly.\nShould we close this as invalid?. Actually, there is a plugin for exactly that and it uses key ranges in IndexedDB and like queries in websql.\n. @bennyn Ooooooops!\nCopy-Pasted the wrong repo url....\nhttps://github.com/thgreasi/localForage-startsWith\n. Babel will add the 'use strict'; statement anyway (since ES6 modules run in strict mode) so :+1: for your IIFE transformation :smile:\n. I think that it is, since the default instance has to be attached to the\nwindow object automatically when not loaded with a more modern way.\n\n\nThodoris Greasidis\nComputer, Networking &\nCommunications Engineer\n. I might be mistaken. Was referring to the default keyword in the .js file not the .ts. Sorry.\nIf it still matters, as \"non-modern/traditional way\" I was referring to including localforage in a script tag.\n. @dsebastien  Hi there. I was recently creating a sample Ionic 2 app (on typescript 1.8) for localForage-cordovaSQLiteDriver and faced some difficulties while trying to import localforage. I ended up using:\n\n``` js\ndeclare var require: Function;\nconst localforage:LocalForage = require('localforage');\nconst cordovaSQLiteDriver:LocalForageDriver = require('localforage-cordovasqlitedriver');\n```\nI'm sure that there is a better way than manually doing declare var require: Function;.\nCan you suggest an improvement?\n. Hi Nolan.\nThanks for the example. I'm asking this for a sample ionic2 repo for\nlocalforage-cordobaSqliteDriver, where I already tried:\n\nimport * as LocalForage from 'localforage';\nBut even though the debugger showed that the correct object was imported\nand referenced, I couldn't get the typings to work!?\nMy initial working approach was:\nimport * as localforageImport from 'localforage';\nconst localforage:LocalForage = localforageImport as any;\n\nI ended up using the require() call mentioned earlier, after spotting some\ndocs mentioning that non es6 compliant module systems should stick to the\nrequire() method. Typescript doesn't seem to use any helper method to\nnormalize the module default export (the way that babel does it) especially\nnot for the typings.\nThanks again and good morning from Greece.\nPS: I think that creating an es6 dist file for localforage could improve\nsuch use cases.\n\n\nThodoris Greasidis\n. Yes I tried those as well but I couldn't get automatic type recognition :(\nMaybe it's something in my project's configuration. Thanks again.\n\nThodoris Greasidis\n. @dagatsoin Hi there and thanks for the feedback!\nUnfortuanately it didn't work for my case, making\n- import * as localforageImport from 'localforage'; errors with can't find module 'localforage' and\n- const localforage:LocalForage = require('localforage'); errors with can't find name 'LocalForage'\n\nWhat's your suggested way to do the import?\n@nolanlawson found some time to check the sample ionic 2 pouchdb repo just now.\nUnfortunatelly, even after defining some methods for PouchDB, import * as PouchDB from 'pouchdb'; would only let me access PouchDB.default, even though the actual object was strored on the PouchDB variable (as noted by the console.log()).\nconst PouchDB:PouchDB = require('pouchdb'); worked better for me.\n. I already have a dev branch to upgrade to babel 6. I will continue my work\non it as soon as I get some free time.\n\n\nThodoris Greasidis\nComputer, Networking &\nCommunications Engineer\n. ## May we can just remove the configuration from the npm package?\n\nThodoris Greasidis\nComputer, Networking &\nCommunications Engineer\n. First of all using the src files is not officially supported by this repo\nas far as I know but we are not trying to make it impossible either.\nSince we can't support two different versions of babel at the same time\n@tofumatt should have to decide whether we still provide a .babelrc file in\nthe distributed packages or not.\nOn Mon, Jan 11, 2016, 09:45 Ron Waldon notifications@github.com wrote:\n\nThe problem with removing the .babelrc file, is that babel will refuse to\ntouch any of the files in the package. Which is fine for babel-using\nconsumers who do import localforage from 'localforage';, but will break\nany consumers that do (for example) import localforage from\n'localforage/src/localforage';.\nThis is only an interim problem, as you say, because:\n1. babel 6 support is coming soon, anyway, and\n2. ES2015 source files within an npm package will eventually be able\n   to run on V8 / Node.js without babel\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/mozilla/localForage/issues/496#issuecomment-170454497\n.\n\nThodoris Greasidis\nComputer, Networking &\nCommunications Engineer\n. :+1: \nHad some experimentation with this some time ago and I think we can just skip that dependency and use its configuration directly on our .babelrc file. Moreover, I've been working on a Babel6 compatible branch of system-import-transformer that seems to work.\nUnfortunately until next month I will not be able to dedicate enough time on this :disappointed: \n. :+1:\n\nThodoris Greasidis\nComputer, Networking &\nCommunications Engineer\n. Just sharing my progress so far.\nI have upgraded the system import transformer plugin for babel 6.\nIn my initial tests everything works except from the component build. That's probably because of the changes in the umd pattern that babel 6 uses.\nInstead of using the es2015-loose preset, I will try to only define the plugins that are required to keep the changes of the dist files minimal.\n. @tofumatt it seems that componentjs has been deprecated. Since it's the only test case that fails in my babel6 branch, what are your thoughts about removing them? If you agree, I could probably open a PR during the weekend.\n. It's probably the new/different/shorter UMD pattern of babel6 that makes things difficult for the component build.\n. :+1:\nDidn't know you could do such a thing!\nIf it works as I think then it might be even better than removing the\n.babelrc file from the npm package. Since package.json's main targets the\ndist files, trying to force everyone to use a single import method, this\ncould conceal the use of babel, except from those that manually target the\nsrc files.\n\nPs: I guess that this is not affecting the build at all?\nPs2: I won't be able to resume the upgrade to babel 6 until early next\nmonth :(\n\n\nThodoris Greasidis\nComputer, Networking &\nCommunications Engineer\n. If it is indeed a problem then we could do something like:\n\n``` js\n// top level declaration\nfunction nop() {};\n// on every then callback\nthis._driverSet.then(callback || nop, errorCallback || nop);\n``\n. @judenaveenraj nice catch. Opened PR #588 for this.\n. It might be referring to the promise returned byself.ready().then. If that's the case, we could swap the above linenew Promise`.\nThe updated code could look like:\njs\nvar promise = self.ready().then...{\n    return new Promise(...{\n        ...\n    });\n});\n. Any feedback on this? Does the warning still appears?\n. Thanks for posting back!. Can you try something like this:\n``` js\nvar p = new Promise(function(resolve, reject) {\n  var bookPromises = [];\nBIbookmeta.iterate(function(meta, key, iterationNumber) {\n    // start the retrieval of the item as soon as the key gets available\n    bookPromises.push(BIbookSet.getItem(meta.id, function(err, Set) {\n      console.log('first');\n      BSType = Set.type;\n    }).then(function(){\n      console.log('second');\n      switch(BSType){\n        case 'o':meta.o=true;break;\n        case 'a':meta.a=true;break;\n        case 't':meta.t=true;break;\n      }\n      return meta;\n    }));\n  }).then(function() {\n    // iterate is done, waiting for the actual data from getItems\n    return Promise.all(bookPromises);\n  }).then(resolve, reject);\n});\np.then(function(booksAry) {\n  console.log('third');\n  console.log('downloaded:' + booksAry.downloaded);\n});\n```\n~~Depending on the size of your DB, you might get better results by using .keys() and the getItems plugin.~~ Probably not applicable in this use case\n. Oooops\n1) typo alert in Promise.all(), it should read return Promise.all(bookPromises);\n2) Just realized that getItems is not for your use case\n. This is probably because we store undefined as null, so that it works the same across browsers.\nOn the other hand, I think that this is an edge case and FF is doing the right thing to fill the empty slots.\n. It seems that Chrome only logs the empty slots of the array but actually treats the array like an object and does not add the extra \"properties\".\n. Add the dist files as well.\nHow about pulling or rebasing the test case instead of copying?\n. Great :+1:\nI guess that this should be released with a new minor version change, since there might be people that relied on the hidden websql->localStorage fallback mechanism.\n. Also :+1: for adding the dist files as a separate commit!\n. Perhaps we could remove this fallback and just reject the promise. The mechanism in the main localforage.js module can handle the fallback to the next preferred driver. I had seen that earlier, before the es6 refactor and started a discussion about it in an other issue, but can't find it right now. This was probably used before the fallback-on-fail mechanism was introduced, to prevent some missconfigurations.\n. Exactly. I think that catch should just do a reject().\nAny chance you can provide a test case or a code example with the infinite\nloop?\n\n\nThodoris Greasidis\nComputer, Networking &\nCommunications Engineer\n. I guess we will have to add a test with since monkey patching...\n. Or even better to a function that throws an error.\nSomething similar is done in test.nodriver.html.\nHow about placing the new tests in a new file named test.faultydrivers.html or test.drivererrors.html?\n. Possibly duplicate of #511\n. > the handler functions don't get called at all\n\nThe are success callbacks and are invoked only when no error has occurred.\n\nthose errors cannot be caught and silenced\n\nWhat do you mean with this? In your description you mention that they both log in the console.\nHow about using localforage.ready() ?\n. Oh, now I get it.\nIt is probably this extra .ready() call that prevents the execution of the library methods when it fails and as a result the callback doesn't get invoked.\nWe could probably just remove the aforementioned .ready() call, since all the methods of all drivers have their own .ready() call.\n. Hmmm, that might not work before the driver initialization. We could possibly invoke the library method on both outcomes of the .ready() call and let it fail in its own.\n. What version of lolcalForage do you use?\n\n\nThodoris Greasidis\nComputer, Networking &\nCommunications Engineer\n. So, it seems that it's the os that forces the browser to release the client side storage allocated.\n. Since you are working on top of Cordova, you can try to use the\nlocalForage-cordovaSQLiteDriver plugin, which\nwill use the native DB of the device in the same way as native apps do.\n\nThodoris Greasidis\nComputer, Networking &\nCommunications Engineer\n. Should we close this?\n. We could also remove:\n- [x] the commented code in Gruntfile.js\n- [x] the file with the test cases\n- [x] the npm package from package.json\n. @tofumatt Just pushed the commit that completely drops Component support.\n. I think that it already returns a promise!?!?!?\n. At this point, all we have to do it to remove the executeCallback methods for the source files and the method arguments that we invoke it with.\nI'm not sure that the code complexity is affected so much, since the current implementation nicely abstracts callbacks. On the other hand, the size of the test cases and the docs can get drastically reduced. Lastly, we still have some inconsistencies with the callbacks implementation, where some methods accept an errorCallback while others only accept a single callback and invoke it with a nodejs like error-first-argument.\nSure, deprecating callbacks is an easy :+1:  from my side, but we should also hear the opinions of some nodejs devs as well.\n. @tofumatt should we pursue this for v2.0 as mentioned earlier?. +2!!!\n. Why there is change on the dist js files? (Possibly a newer version of the minifier was released!?!?)\n. I think that webpack was giving better file size results than browserify\nwhen we were deciding for the bundling system, but that might have changed\nnow. Also webpack looked like a better match for developing libraries,\nsince it doesn't require the extra derequire step.\nI could give a try to this refactor+webpack in the weekend and possibly try\nmoving rollup as a babel plugin.\n\nThodoris Greasidis\nComputer, Networking &\nCommunications Engineer\n. ~~Could you~~ Would it be to much to ask you to split into two commits? One with the code reactor and one chore for the build system changes.\nIt would be very helpful for my webpack+lie tests.\nThanks in advance. Can't wait for the weekend.\n. @nolanlawson\n- Is there a reason that es6-promise/promise.js is included in all test pages? We used to concatenate it (the polyfill) on the top of the dist file, is it still included to the main dist localforage.js? I would prefer if such a change to the test cases was not introduced, so that it's clear that we still support older browsers.\n- Do we need to import Promises in src/utils/promise.js? Can't we just assume that the environment has been polyfilled with the required standardized APIs? (If this is just the way that lie prefers it, then ok, otherwise requiring polyfills had troubled us before and we removed it.\n\n@tofumatt other than these queries this looks great to me as well. @nolanlawson :+1: \nAfter the first +- diff shock, it looks like that in most cases code has just moved around to make the files more logically structured.\n. Try waiting for the ready() or do a setItem() before checking for the\ncurrent driver. Unless your browser doesn't support a browser at all ( it\nis missing the appropriate objects/namespaces) the evaluation of whether\nthe selected driver can be used takes place during its first usage. That\nshould be exactly the case for private browsing, where the storage methods\nexist but the browser throws errors on usage.\n\n\nThodoris Greasidis\nComputer, Networking &\nCommunications Engineer\n. @rdalfonso there is actually a test case for this use case. \nThis was added with PR #448.\nAs shown in there, you can\n- use the .setDriver() method with a driver preference array\n- wait for the .ready()\n\nAfter these, localforage will have settled to a working driver and driver() should return it.\nWhat version are you using?\n. We can only realize whether a driver can/can't be used (eg in private browsing mode) only after trying to do an operation with it (eg setItem() orgetItem()orready()`).\nAs a result, the .driver() method will return the driver that will actually be used only after we use a localforage method.\n\nI can however use .setDriver(customerDriver) without .ready() and it works.\n\nExactly! That PR was meant to let you write your code and forget about driver failures. Using .ready() is just the recommended way to make localforage settle on a working driver in case that you need to use .driver().\n. Overall, you are correct!\nRegarding part 3, I would recommend you to use setDriver() just once, with the drivers in your preference order ([localforage.LOCALSTORAGE,'cookieStorage',localforage.WEBSQL,localforage.INDEXEDDB]). I don't think that you should sniff what the actually used driver is and then respond to that (except if you have a reason to do this, eg for logging). I would recommend you to do it just like in the test case.\n\nso I can use .ready() to determine the \"working driver\" in place of a setItem attempt?\n\nyes\n. Probably no... We should create an example based on the aforementioned test\ncase (I think).\n\n\nThodoris Greasidis\nComputer, Networking &\nCommunications Engineer\n. Should this be considered resolved now? (Without counting the required\n\nchanges in the docs.)\nThodoris Greasidis\nComputer, Networking &\nCommunications Engineer\n. I'm glad it worked for you!\nOpened #540 to track the parts missing from the docs.\n. A use case that ready() is still useful is when you need to let localForage\nsettle down on the driver that's going to be used and possibly reach to\nthat choice. On the other hand, we could use an other method that actually\nreaches the database, like length(), for that purpose.\n\nThodoris Greasidis\n. :+1: \n. What's your suggestion about the way the the various parts would be\nincluded?\nAtm such a modular architecture with requirejs (loading only the requested\ndrivers) is present but deprecated. A similar pattern can work for global\nimports.\nPerhaps we could also have a separate  es5 dist build, where each driver\ncould be available on its own and localforage.js would only contain the API\nwrapper.\nOn the other hand, I think that localforage is exploring a way to provide\nonly a single solid dist file with all the drivers included. Currently #538\ndrops the not-yet-in-es-spec System.import() in favor of pure es6 imports,\nwhich produce a single solid output file and I think that it conflicts with\nthis request. In that approach it's difficult to have the proposed feature,\nexcept if a custom build architecture is also implemented.\nTL;DR + final suggestion: We could start using the custom drivers\narchitecture for all the drivers and demand from the developers to include\nthem. This could be a separate build from the existing all-in-one dist file\nand it also doesn't conflict with what #538 achives!\nps: sorry if writing all my thought tired you\n\n\nThodoris Greasidis\nComputer, Networking &\nCommunications Engineer\n. @shubhamsizzles what do you mean by \"A lot of people have been wishing for a plug and play system in localforage.\"? Don't we already have that?\n. :+1: @nolanlawson \nWe should start reviewing (and merge) #538 .\nFrom that point and after, as a starting point , we could also split the imports of the default drivers into a separate module.\n. Just an update for this. Now that we use defineDriver() internally for the internal drivers, I'm thinking about a way that consumers could only import the drivers they want and instantiate localforage with them. I would expect this to be part of v2.0 .. In my opinion lerna might be an overkill for this (subjective opinion).\nWe have a few common utilities that would require some thinking while splitting the modules and are source files are not so loosly coupled atm anyway. Another concern could be that having an additional step in our process could hurt contributions b/c.\nMaybe we could for start try something simple, similarly to how lodash allows us to import the individual submodules we want.\n\nIf on the other hand you still think that it would be easy and it's just me who feels a bit weird about lerna (or maybe I'm afraid of the change), then I'm totally fine with it and trust you on this :+1:. That's strange since webpack should rename all such method calls. What\nversion are you using and which file are you targeting?\n\n\nThodoris Greasidis\nComputer, Networking &\nCommunications Engineer\n. I was referring to the Webpack build step that localforage uses to generate\nthe dist file, not your build setup.\nStill my question remains: what version of localforage do you use and which\nfile are you targeting (eg the dist/localforage.js) ???\n\nThodoris Greasidis\nComputer, Networking &\nCommunications Engineer\n. I will try to reproduce and create a test case during the weekend.\n\nThodoris Greasidis\nComputer, Networking &\nCommunications Engineer\n. After #538 gets merged, a slim custom driver for this could be implemented by just inheriting from the webSql driver and overriding the _initStrorage method. Already working on such approach for localForage-cordovaSQLiteDriver.\n. Those two plugins were developed and published independently but solve the same problem.\nInitially the main difference was that my approach also waits for the deviceready event in case sqlitePlugin isn't yet there. Just yesterday I merged a PR that adds support for the sqlitePluginv1.2 by using the object parameter invocation overload for the openDatabase() method. An extra concern in the new version is that we also need to specify a location option for the database.\nI will try using inheritance on the driver as found in #538. (I couldn't get this approach to work in the master branch since the used serializer is a closure referenced variable.)\nRight after I will try using SQLite Plugin 2 and if everything works fine, I can add an extra note in README. Does it support the object notation invocation for the openDatabase() method?\n. Hi there again! This issue renewed my interest on the topic.\nI'm experimenting with a new branch that uses the getSerializer() and getDriver() methods:\n1) to retrieve the localforage webSql driver implementation and\n2) override the _initStorage method\n3) wire up the rest method to the webSql driver\n\nMy first working source code is just 2.08KB uncompressed (991 bytes gzipped)!\n. Tried Cordova SQLite Plugin 2 and worked great :+1: \nAdded a notice to the \"requirements\" section of README and created a branch on my test app repo.\n. That's great and simple! If this doesn't get merged, then we should make a\ncustom driver for it. I can start experimenting with such implementation if\nyou are fine with it. We could probably create a github organization like\nlocalforage-extensions if @tofumatt is ok with such naming.\n\n\nThodoris Greasidis\nComputer, Networking &\nCommunications Engineer\n. Great instant alternative PR!\nIs there a reason that the ternary check of whether Promises are available\nor not got removed? I'm worried about the nopromise build and how requiring\nan excluded module (lie/polyfill) would work (even on browsers that\nPromises are available).\n\nI saw that lie also polyfills other APIs, like Mutation Observers. I'm\nimpressed about how small it is, compared with the es6-promises that we\nused until now!\nPS: Perhaps we should have added a test cases for the nopromises build when\nit was first introduced, where we would polyfill Promises manually before\nincluding localforage.nopromises.js .\n\n\nThodoris Greasidis\nComputer, Networking &\nCommunications Engineer\n. I actually had in mind to create a custom driver for this, but I always postponed it. :+1: for opening this PR and discussion.\nThe main benefit of a custom driver is that we can avoid creating an extra dist file (or increase the size of an existing one) and have the driver optionally included only by those who need it.\nAs @tofumatt mentioned, I like the freedom/flexibility that this offers to the developer:\n\njs\nvar localforageReady = localforage.ready().catch(function(err) {\n  if (err.message == 'No available storage method found.') {\n    localforage.defineDriver(memoryStorage);\n    return localforage.setDriver(memoryStorage._driver).then(function() {\n      return localforage.ready();\n    }\n  }\n});\nPS: After some digging around, I found a primitive (pre ES6) implementation like this in the dummyStorageDriver used in the test cases!\n. > As a side note, would it be possible to distribute this as a third-party adapter?\nIn the mean time, as a way expand the discussion (and possibly as a boilerplate), I just restructured and pushed the dummyStorageDriver as a custom memoryStorageDriver.\n. How about exporting the DefaultDriverOrder array so that plugins can manipulate it?\nObviously, there are no guaranties whether we completed the manipulation before the default localforage instance settled to a driver, but since localforage settles on a driver lazily, we can be almost sure about it, if the manipulation is done right after importing the scripts.\n. @rubennorte thanks a lot for the initial PR on this.\nRebased & merged with 40c70210a54645c33919a283b2a1138f40b7a001 on the v2.0-dev branch.\nToo bad GH didn't detect that as a merge, probably b/c of changing the base branch.\nSee: https://github.com/localForage/localForage/commit/1e8828371136e4779521c91f2b2c30bf6381f10f\nSee: https://github.com/localForage/localForage/commits/v2.0-dev?after=40c70210a54645c33919a283b2a1138f40b7a001+69. Maybe we could add a ternary operator to check wether the Promise object is\nalready available.\nCc: @nolanlawson\n\n\nThodoris Greasidis\nComputer, Networking &\nCommunications Engineer\n. Just opened PR #563, please check.\n. Are you using localforage.js or localforage.nopromises.js ?\nIE11 needs the Promise polyfill so please ensure that you are using localforage.js (or the min version).\n. > it will still fail on non-Promise browsers, right?\n\nThat's the point of the nopromises build, that it fails on older browsers, except if the an appropriate polyfill is provided by the user.\nYou are probably right about the require check part, added it just in case.\nBefore this change, even the index.html found in the examples folder failed with the nopromises build on my Firefox dev edition, since the derequired require() call failed. So, I ended up adding a check before the invocation.\n. To be clear: a check wether Promises are already available.\n. Nevermind, just saw your PR :)\n. :+1:\n. You probably are missing a then chaining.\nCouldn't reproduce, seems to work for me.\nPlease fork if I have diverged from your use case.\n. Fixed that!\n. Good night from Greece.\nWishes for a productive new week.\n. But the user gives his ok asynchronously!? How much time should we wait? 5 secs?\nSuch time constrain can be too small for the user action and in the same time too large for the application to wait.\n. Oh, that's good :+1: I guess we can do one more retry then (if that's consistent across browsers).\n. @rubenstolk I think that this one is resolved by #654.\nSince the merged PR is doing exactly what this issue describes, I'm closing this for now.\nPlease re-open in case I missed something.. What version of localforage do you end up using?\nSince in v1.4 there is no loose option in the .babelrc.\n. :+1: that was exactly what I was thinking!\n. @duzun That's great!\nHow about creating a separate repo with this code, describing that it should be included before localforage???\n@duzun @tofumatt It might also be a good idea to host it under localForage-extensions or localForage.\n. @tofumatt Great!\nPlease, give me a note which repos of the localForage-Extensions org should be moved there as well (probably all of them if you ask me - but just confirming anyway).\n. Ooops I think that I resolved the issue by doing something similar in #643 . I'm really sorry about not merging this one instead :(. We probably have to update the .travis.yml with the new repo and also possibly update the secures.\n. Hi there.\nJust created a jsfiddle example (and added it to the respective README) based on the respective example found in the repo.\nI hope it works for you.\nFeel free to re-open or add extra inquiries to this issue.\n. If all the non-localforage functions/methods that you are using are synchronous, then it seems correct for your use case. Are you facing an issue?\n. OK\n. That's a simple warning and shouldn't be considered as something bad. Localforage uses browserify for bundling (and rollup and derequire) and your webpack just detects it and warns that you are bundling a pre-bundled file.\nI would like to start a discussion about dropping derequire and using just rollup and concatenating the promises polyfill on the top (instead of requiring it). Such a move would allow us to get rid of that warning + we could also add an es6 dist file (that starts to be increasingly useful with all the new build/bundling systems).\n. I'm totally fine with such an idea. @tofumatt what's your call? Such a thing would allow us to avoid downloading the huge DefinitelyTyped repo every time we need to make a change. Alternatively we could create a separate localforage.d.ts repo.\nPS: atm I'm thinking of incorporating the export = syntax in the typings, just like how pouchdb did. CC: @nolanlawson\n. @whitecolor What troubles me is how the various localforage-extensions will be able to reference the localforage.d.ts (eg a custom driver should be able to reference the LocalForageDriver type), since the Typings for NPM Packages docs state that:\n\nYour definition files should ... not contain triple-slash references.\n\nIn the case of DefinitelyTyped, that was not a problem since all the definition folders are defined next to each other. Any ideas?\n. Opened PR #611 for this.\n. They had LF typings until recently and I trying to keep them up to date but they ended up removing them as part of their process. As a result, I'm not sure whether they would re-add LF typings now that we embed our own typings in the npm module.. @tofumatt should we merge this?\n. Also caniuse doesn't (yet) have any compatibility notes,\n@nolanlawson have you yet handled it in PouchDB side?\n. I think that IndexedDB on safari 10.1 should be resolved by #651. Can you test against the code in the current master (eg: by referencing the file in the dist folder).. OK , I will be waiting for your feedback.\nAlso, since you will be testing on safari, could you also provide some feedback on the jsfiddle example found in the last comment of #352.\nPS: I hope I'm not asking too much from you.. @Narcwis any feedback on this?. @Narcwis thanks for the feedback on #352.\nCan you try this codepen that uses the current master, and report back the results and which storage method was used?. >using localstorageWrapper\nOh, I forgot that \nPlease use this jsfiddle and right click in the result area and do a right-click => open in new tab.\nIf you can confirm that it works with indexed db, then we can close this issue.\nMoreover, the nested blobs issue is already tracked in #380 and there is also PR #603 that resolves it, but it is under consideration because of the possible performance hit.. Please note that Safari <10.1 does not meet our requirements for IDB support (ref: #650, #651).\nSo for typical reasons I think that this one should be closed.\nOn the other hand I'm still interested for your findings, (in case that you are using 10.1),. > I am assuming that #603 is already implemented in the latest version 1.4.3\nNo, this is still not merged, neither in v1.4.3 nor in master.\n\nIf 10.1 does not work will it be the case to open an issue for it?\n\nRegardless of the blob results, if 10.1 doesn't support IndexedDB on your tests, please report at #650.. Are you getting proper type detection on your import?\nAfter a detailed research in the Typescript docs, this was the only way to make it work on this sample localForage-cordovaSQLiteDriver Ionic2 project with proper type detection.\nI'm reading that typescript 2.0 now supports export as namespace syntax as well, which is ideal for UMD packages like localforage, but back in 1.8 I couldn't find a better way to to it.\nWhat's your suggestion? How about opening a PR on the aforementioned example Ionic 2 repo, so that I can check it out?\n. Related to #602\n. Ok, so it seems that when using the  export = syntax, this one works just like the import = require() syntax. I guess that we should advertise the ES6 syntax since it's more elegant.\nI'm not sure what to blame, me, the weather or the sublime typescript plugin... I did spent a LOT of time back then and now, without any change, neither on the npm modules nor the typings (but the sublime typescript plugin might got an update), the obviously cleaner code that you suggested works great (with type recognition) along with the export = syntax of the typings.\nFor the record I'm testing this on Ionic 2 with Typescript 1.8.\n. @iamolivinius does this looks fine to you as well?\n. @iamolivinius does this looks fine to you as well?\n. I got it working yesterday on a test Ionic 2 RC0 project. I was struggling with it the whole week, but never made it work with the import * as localforage from \"localforage\" syntax (which worked fine in Ionic2 beta & probable pre v2.0). The syntax in this PR is also mentioned in a few \"working\" comments in the Ionic forums.\nCan you test whether it woks for you?\nAs of the typings, we can't make define a default export since we are a UMD module (not an es6 module). We tried that some time ago but didn't work as expected, so we now use the export = syntax which better matcher non-es6 modules, (following the lead of the PouchDB guys) . The only extra thing to do, is probably use the export as namespace syntax that typescript 2 added.\n. Can you check whether this works for you on ionic 2 RC0?\nIn my case it seems to work:\n- no errors on sublime\n- no compiler errors\n- works with ionic serve\n- works when emulating on android\n. Maybe what is mentioned in #609 is the reason that import localforage from \"localforage\" works on ionic 2 rc0, even though earlier versions worked with the import * as localforage.\n. Just updated this PR after @imcotton's awesome hints in #609.\nWaiting for your feedback.\n. @imcotton there is also #600 that suggests that we should add the typings as part of this repo, so I though about not adding @types notice in this PR.\nTo all, thanks for your elaboration on this! Never seen such an active PR before.\n. @imcotton as far as I know, this wasn't correct in v1.8 since localforage is a UMD module.\nBefore changing to the export = syntax, in my ionic 2 beta project, Typescript recognized it but I was getting errors on runtime. I had to do alchemies like import * as and then cast to the LocalForage type, to get it work.\nPouchDB was also using export default and now uses export = as well (once again, kudos to them).\n. export default just declares that it's an ES6 module with an export, BUT localforage is NOT an ES6 module, it is a UMD. No matter what we defined in the d.ts file and how beautifully the TS compiler detects that typings. we will end with runtime errors since localforage doesn't have a default export with the ES6 semantics.\nHere are two working variations 1 2 (TS compliled & runtime worked) back when the d.ts was using the export default syntax. allowSyntheticDefaultImports could be a solution, but requiring a non-default compilation flag just to compile a specific library can cause trouble to big projects that are using multiple libraries.\n. Ooops closed this pr by accident on my mobile...\n@danbucholtz what do you think about this PR and the export = syntax that our typings use?\nIf you are fine with this pr we can merge asap and focus on including the typings as part of the repo.\n. @iamolivinius :+1: on your feedback.\n\nI guess what you're basically trying to do... I tried it myself and failed.\n\nThe test ionic 2 app repo currently woks for me, both with ionic serve and ionic emulate. Are you facing any issues?\n@danbucholtz Your comment was surprising for me, since ionic-storage (and as a result v2 starter project) works fine (using import LocalForage from 'localforage';) with the current localforage @types, which use the export = syntax. Do you suggest that we should change the typings?\nAre you fine with the doc changes of this PR?\nCan we call a vote of +1 -1 to merge this doc PR and work on a new issue about the rest? In my opinion the suggested docs change can provide more insight and be more useful for the reader than the previous one.\n. Had the allowSyntheticDefaultImports thing and that stackoverflow thread in mind.\nBased on that and the typescript docs:\n- libs of traditional module systems should continue to be exported and imported like before, especially for TS pre 1.8 users\n- TS 1.8+ allows to use ES style imports on non ES6 modules (+ default imports with allowSyntheticDefaultImports)\n- TS 2.0 adds the export as namespace as a better match for UMD modules\nBut still not getting an answer from anyone whether this is OK or should be changed...\n. I'm merging this for now since it's more useful when compared to the current docs.\nFor this PR, I'm not trying to suggest in favour of using the non-default allowSyntheticDefaultImports setting, but just want to cover all setups/configurations.\nWaiting for suggestions in new PRs.\nA big thanks to everybody in this discussion.\nLearned a lot while elaborating on this.\nWishes from Greece for a great Saturday night (depending on your time-zone).\n. Great PR :+1: thanks!\nHow about combining with the TS2.0 paragraph like this:\nmarkdown\nTo import localForage in TypeScript v2.0, where the [`allowSyntheticDefaultImports` compiler option](https://www.typescriptlang.org/docs/handbook/compiler-options.html) is enabled by default ([check your tsconfig.json](https://www.typescriptlang.org/docs/handbook/tsconfig-json.html)) you should use:\n???\n. I don't want this to be unclear/misleading for users of older typescript versions.\n. I would prefer targeting the default configuration of each Typescript version.\nIn case a v1.8 user changes his allowSyntheticDefaultImports option, it might cause other used libraries to stop building/working.\nSo, a statement like\n\nTo import localForage in TypeScript v1.8 & v2.0, make sure to have allowSyntheticDefaultImports set to true and use...\n\nmight cause troubles to some devs.\nIf you can change this PR during the weekend it would be great and we can merge it into master asap.\nThanks for pointing this out. your detailed descriptions and the degree of your elaboration.\n. What I'm doing lately in such cases is to define an \"class\" and place all the methods in the prototype.\nMost of the time this is enough to make the object serializable and requires an extra step when retrieving form localforage:\n``` js\nfunction User () {}\nUser.prototype.hello = function () {\n  console.log('Hi');\n}\nvar user = new User();\nuser.name = 'Teo';\nlocalforage.setItem('user', user);\n// ... later ...\nvar userData = localforage.getItem('user');\nvar user2 = Object.assign(new User(), userData);\n```\nPlease confirm whether this actually works for you.\n. Keep also in mind that storing Promises in properties might cause serialization troubles as well.\n. @whitecolor, @iamolivinius, @imcotton waiting for feedback.\n@mlynch, @danbucholtz I'm planning to publish a new version of localforage-cordovasqlitedriver (that drops @types in favour of the embedded typings) as soon as this gets published.\n. @iamolivinius thanks, did a rebase and added that.\n. Nice catch! Interestingly enough, that's part of definitely typed long enough and nobody spotted that. Kudos\n. @imcotton changed that, thanks!\n. @tofumatt are you ok with merging this and schedule it for the v1.5 release?\n. Hi there @dagatsoin \nSince you mentioned typescript errors, in TestIonic2App I'm using the current latest versions:\njson\n\"localforage\": \"^1.4.2\",\n\"localforage-cordovasqlitedriver\": \"^1.5.0\",\nKeep in mind that Ionic2:\n has enableSyntheticDefaultImports on by default.\n expects you to use Typescript v2+ for the @types imports to work.. That's fine with me.\nI guess that this would affect people who npm install the git repo directly.. +1 for a build step. That's what we are doing in angular-ui-sortable.\nAlso Polymer/webcomponent guys seem to be in favor of Bower as well.\n-- \nThodoris Greasidis\n. Just opened driftyco/ionic-storage#56 that uses ~ instead of ^ to limit the dependency version of localforage in ionic-storage. As soon as they merge it and release a new version, lfv1.5 will not cause any issues.. The ionic guys responded and have limited their localforage dependency to avoid typing conflicts.. @Darkbladecr Hi there.\nAs noted in #567, #577, #599\n\nThat's a simple warning and shouldn't be considered as something bad. Localforage uses browserify for bundling (and rollup and derequire) and your webpack just detects it and warns that you are bundling a pre-bundled file.\n\nUsing webpack's noParse configuration option will allow you to remove the warning:\njs\n// webpack.config.js\nmodule.exports = {\n    module: {\n        // ...\n        noParse: [new RegExp('node_modules/localforage/dist/localforage.js')]\n    }\n};\nAn other way would be to configure webpack to target thesrc files directly and rebuild localforage but that's probably an overkill.\n. Just opened PR #643, can I get an extra confirmation that it works?. @AshleyScirra any feedback on this? @tofumatt does it look ok to you at least?. Going to the PR and finding the dist file and pressing view and then raw you will give you the source of the file.. @AshleyScirra any feedback on this?. Great!. Is clear() too much for your needs?\nDoes something like removeItems sound better?\n. I was 100% with you about the DROP part, I was just asking about the collection data part that you mentioned.\nI will do my best to add such a method in v1.5.\nI would like to hear some api suggestions. Maybe something like dropInstance() or clearInstance() or deleteInstance(). I guess that we should be able to invoke it:\n- without arguments to drop the table of the current instance\n- with 2 string arguments defining the table of the db that we need to drop\n- with 1 string argument defining the db we need to drop\n  Any thoughts on these? (cc: @tofumatt)\nAn extra consideration is whether we should add the new method as a required or optional method of the custom driver api. Making it required would make the new release backwards incompatible.\n. @jlchereau OK, dropInstance was all I needed to hear. I will try to take a look at it during the weekened.\n. Still working on this. My initial findings include:\n IndexedDB in order to drop a \"table\", all the connection to the same storage need to close and the version must increase. This might cause issues for people that are creating instances in their code with predefined versions. Finding a way to reopen all the db connections on all related instances might complicate the driver. I think that, if we are going to make this method available, we should do that (reopen the dbs), what's your opinion?\n WebSQL have written the code, but still haven't done any testing with it.\n* *localstorage we just have to delete the records with the respective key prefixes for the requested \"db\" name and \"table\" name. This revives the issue that we still have (I think) where clear() the default \"table\" of a \"db\" actually clear()s all the db. Can someone confirm this?. Changing this to milestone v1.6 since it currently seems that it needs more work.. For reference, the current status on this can be reviewed on thgreasi/localForage/tree/dropInstance.. I've pushed a working branch on https://github.com/thgreasi/localForage/tree/drop-instance-v2 . It would be great if anyone could do some extra testing on this. I'm super excited about this starting to work and have already added some tests.. @jlchereau The dropInstance() PR in in the current master (and planned to be released as LF v1.6) can you give it a try?. @sido420 are interested on a specific part?\ndropInstance is available as part of LF v1.6 and thus this issue was closed.. The interesting thing is that we don't actually use the prefixed namespaces when the standardized indexedDB object is available. I will try to make the warning disappear somehow.\n. I wasn't able to reproduce on Chrome (guessing from your screenshot) neither on stable v54 nor on unstable v56. Can you provide an example codepen that reproduces your issue?\n. Still can't find a way to reproduce. What version of chrome are you using?\nHere is an older & simpler pen. I hope it helps you isolate the steps to reproduce the warning.\n. Any feedback on this? Were you able to isolate the issue in a codepen?\n. @Darkbladecr thanks for the detailed report. I will give it a second look during the weekend and reach you in case I come up with anything.\nThanks for your collaboration on this.. If you need a pubsub like implementation then you can use https://github.com/localForage/localForage-observable . Keep in mind that you will not receive notifications of manipulations originating from different browser tabs/windows. Observables are like a pubsub broker + promises + generators + steroids. They are getting increasingly popular within the RxJS and angular 2 community. Waiting for your feedback.\n. Do you consider this as resolved? Should we close this issue?\n. Oh, didn't see that it's already closed.\nAnyway, with the localforage.observable you have the advantage that you can continue using the existing localforage API instead of refactoring your code to use a wrapper.\nI'm glad that you hacked a simple solution around localforage that worked fo your use case.\nKudos and thanks for sharing.\n. Just require() it or import it (depending on the way you import your libs) and it should extend the localforage prototype and make the newObservable() method available.\nIf you somehow end up having the newObservable() method undefined then try:\njs\nimport { extendPrototype } from 'localforage-observable';\nextendPrototype(localforage);\nor with require():\njs\nvar lfObservable = require('localforage-observable');\nlfObservable .extendPrototype(localforage);\nPlease comment back with more info on your setup if you face any issue.\n. Thanks! I will try to check it out during the weekend and possibly cut a new release as well.\n. Just released v1.0.0 of localforage-observable.\nPlease check whether it resolved the issues that you mentioned.\nThanks for your feedback so far!\n. I didn't get what you meant :(\nCan you rephrase?\nDoes v1.0.0 of localforage-observable works as-is without errors for you?\n. > errors in the last release is not observed\nGreat!\n\nbut the problem has remained from the previous release\n\nThat's logical...\n\nthe data or not tracked,\n\nThat's strange. Can you fork one of the provided exampes to demonstrate your issue?\nI will try to create a complete webpack specific test repo during the weekend.\n. Can you chech what happend when using const lfObservable  = require('localforage-observable'); and removing the lfObservable.extendPrototype(localforage); on v1.0.0 ?\n. Here you go. Had to fix some issues with the key prefixing.\nOn other thing to keep in mind is that the obsrervable notifies the subscribers only when the value actually changes. Otherwise, you can disable the value checking.\n. Just opened localForage/localForage-observable#6 for this. Any feedback would be great and could help releasing it during the weekend.. Hi there.\nFirst of all I would suggest you to upgrade to jquery v3.1+ since v3's ready() implementation had some issues.\nThe logging sequence seems logical since localforage calls are asynchronous, but I'm not sure why \"c\" isn't logged.\nDoes removing the getItem() call makes \"c\" to get printed? Any chance that $(\"nav\").on() causes the issue?\n. What version of localforage are you using? Any chance that you are using an older one and browsing in private mode?\nI was not able to reproduce, Here is a pen to fork in case you are able to reproduce your issue?\n. Any feedback on this? Were you able to isolate the issue in a codepen?\n. I'm closing this for now because of inactivity.\nPlease re-open with further information if the issue persists.. One of the two environments is probably running an older version of node/npm.\nHow about deleting the node modules folder and reinstalling them? Does it work? Is there a reason you want to avoid it?\nDoes it work on a new project? I guess that we should close this and mark as a question.. You should not target the src/localforage.js directly. Please use the one found in the dist folder.\nPlease check the (just updated) README.. Have a funny LF weekend!. :+1:. Thesev lines are just environment capability checks. Some initialization has to be done so that the default localforage instance is made available and ready to use right away, which is one of the features that localforage offers. Can you give an example of a use case that this initialization is causes limitations?. I still don't get your use case exactly. Keep in mind that in isomorphic/universal javascript the object instances are not transferred to the client but are reinstantiated and reinitialized on the client and as a result the driver support detection variables will end up with different values depending on the current environment. Localforage will detect the environment capabilities even if it's on the server. Since localforage, is focused to run on the client none of the included drivers run on nodejs but you can try polyfilling any of them or use a custom driver like https://github.com/localForage/localForage-memoryStorageDriver .\nObviously, rendering a list of \"things\" on the server, based on data saved on the client is a complex feat that includes an architecture that replicates the user data on the server (which on itself has timing and syncronization issues that need to be addressed). If you can give a brief description of the key pieces of your use case, I might be able to give you better suggestions.. > which means i need some parts of the script to be conditional including localForage which i want to only use in the browser\nOk then just use it in the browser.\n1. Why is the driver support initialization troubling you? Just wrap your code with the condition check that you mentioned or write a proxy. The included localforage drivers will reject on the server except if you provide a polyfill or a custom driver to run on the server, like the memory storage driver I mentioned earlier. In case you want the exact same to run everywhere, you can use it and prepopulate it with the user's data or write a custom driver to retrieve it from your storage.\n2. Is there anything that this library can do for this issue so that we can resolve it?. The pre-built warning is something that you can safely ignore. For further info take a look at the search results mentioned the same message.\nIs there anything else regarding this issue that troubles you or should we consider it as resolved?. > UnhandledPromiseRejectionWarning: Unhandled promise rejection (rejection id: 2): Error: No available storage method found.\nThat's the rejected promise that Localforage returns when no supported driver is found. I think that it should be handled on your code.. Add a .catch() after any invocation of localforage method to handle rejections.\nEg:\njs\nlocalforage.setItem().then(function(){}).catch(function(){});\nShould we consider this one as resolved now?. I'm closing this for now, please reopen with more info about your new findings in case the issue persists.. @davidgilbertson \nFirst of all thanks for posting the webpack config workaround. How about opening a README PR for that?\nSecondly, can you test what would happen when using this file instead:\njs\n// client.js\nimport localforage from 'localforage';\nlocalforage.ready().catch(function() {\n  /* so that webpack sees the rejected promise as handled */\n});\n// end of file\nThirdly, I think that window is not available in service workers and that's a fancy use case to support.\nForthly, you can actually run localforage on node if you polyfill localstorage (there is also an older closed PR in this repo that demonstrates the changes required).. Fixed by #633 planned to be released as v1.5. It's great to receive extra positive feedback on that change. We are waiting for the Ionic team to make a change on their dependencies and we are going to release this asap.. Oh, and happy new year!. Even though this is a library primarily focused to be used on the client, can you provide any further info about the error that you are receiving?. Any feedback on this?. Any chance this might be related to the situation described in #626 ?. Closing this for now because of inactivity. Feel free to reopen with extra info or follow up in an other issue.. Fixed by #633 planned to be released as v1.5. :). I have already asked this in other issues disgusting the same issue, but let me repeat it one more time hoping that I will get an answer this time.\nDoes adding a localforage.ready().catch(function(){}) make the error disappear?\nSince localforage officially supports and primarily targets browsers, it's doing some async initialization stuff when loaded, in order to collect which drivers are available up front and prepare the default instance.. A more extreme example would be importing jQuery in node and expecting the $(document).ready() method not to throw (which also does some things automatically under the hood).\nIf adding a .catch() solves it for you, we should probably add a note in README.\nOf course things might chance in the future, despite the benefits that automatic initialization offers to localforage, but obviously that would be a breaking change.. I have an idea...\nOn second, third, fourth, 99nth thought, this might be easier.\nExpect a PR tomorrow or during the weekend.\nI will need your feedback on that of course.. Got it! Running require('localforage') on node v6.9 no longer gives the warning.\nI will open a PR later today.. Tada! Can you give a try to the code found in PR #633 ???\nIf it works for you, we can merge it and schedule it for the next release.. Great!. Fixed by #633 planned to be released as v1.5. @tofumatt\nIn my opinion we should not import/require polyfills in any app or lib for\nmany reasons, one of which is the aforementioned code clutter. I expect the\nenvironment to be ready. I would suggest to grunt-contat lie just before\nthe lib's code in the main dist file. Interestingly enough, in my tests\nthis change lead to a small increase to the resulting bundle size.\n\n--\nThodoris Greasidis\n. > now I think we can remove the polyfill.\n\n1) Oh, pause. You mean remove it completely from the main dist file?\n2) how about droping the nopromises file and adding a new one localforage.withpolyfills.js (or something)?\n3) may I push it even further and ask to also use some es5 Array methods (and add polyfills to the respective polyfilled build target)?. Maybe we should schedule this for v2 since it's a breaking change for the devs and we should follow semver (at least to some point).\n@tofumatt please move to v2 milestone if you agree.. @tofumatt gogo approval?. For reference, I'm posting the StorageManager's persist() docs page from mdn as well.. https://blog.nightly.mozilla.org/2017/07/17/preview-storage-api-in-firefox-nightly/. @tofumatt Please review and merge. It's more or less what we talked about in #634 .. How about also doing #632 first? I should also give a note to the Ionic folks since they might need to resolve some conflicts, now that we include typings.. @tofumatt we can cut a release. Should we schedule it on 22 Dec, so that we can give a notice (and some time) to the Ionic guys (as per #615)?. Nice catch :+1:. I feel shamed that #463 is still open...\nThanks for the contribution.\nMerging right away.\nMy wishes for a happy new year.. Not found anything yet. Does this still happen in safari 10.2?. I hope somebody else has something to contribute in this.\nSafari is always a fun browser to work with...\n. I think that such change would be breaking.\nWe can discuss it for v2 probably.\nSo I would suggest such db inspections to be handle on the devs code using localstorage directly.. Is the related setItem() promise rejected or resolved?. @toffumat how about providing a global error handler as a config option (returning a promise)? Further more we could suggest a way to implement a handler for the \"no space available\" errors. Eg: a retry.. Have you been able to reproduce on chrome or any other browser? I've\nwritten some code to retry setting the value, but I'm still struggling\ntrying to make the quota request dialog to appear on chrome.\n-- \nThodoris Greasidis\n. I'm working on a branch to resolve this. Can you give a try using the dist files found in there or by just visiting this codepen?. Any feedback on this? Does the provided codepen fixes the issue?. OK so, WebSQL is still working, it's just not running inside the iframe that codepen uses.\nIf you right click in the preview and \"Open Frame in new Tab\" WebSQL is detected properly.\nAlternatively you can use this jsfiddle.\nThe fiddle runs, but still localforage does not save the data after the responding to the quota dialog... \ud83d\ude1e . Duplicate of #352. (No worries, just for better organization and tracking of the different reports & feedback related to this issue.). Closing this one, please follow-up in #352.\nThanks for bringing this up again and for this uber detailed report.. Sorry I didn't have the time to write some tests :disappointed: . It ends up that we already have tests for blobs which were failing on FF &chrome but are skipped in phantomjs because. This PR fixes the tests in both FF and chrome.. @tofumatt  please suggests any extra features to add or issues to close before releasing v1.5 .. @stkao05 great! For reference, dropInstance is currently tracked in #620. @stkao05 to be honest I hoped v1.5 would be out before this (since after some investigation it looks non-trivial). @tofumatt any thoughts?. Nice catch \ud83d\udc4d \nThanks for reporting.\nFixed with d9cbb37c28d3b8a689e1388b178e494c0c4ecd8c. It seems browser weird magic to me as well. I can confirm that I couldn't find a way to catch the error and reject properly. The error appears on FF private browsing, localforage fall backs to using localstorage and data are properly stored and retrieved.. I could open a new PR with the memory storage driver currently available under the localforage organization.\nBUT\n  as you can see on the provided example, localforage continues to work and properly stores and retrieved data from localstorage ... so I guess the error message logged isn't actually \"breaking the page\" (tested on Private Browsing + Never Remember History).\n others have mentioned in other issues that are in favor of making localforage pluggable and as slim as possible\nWaiting for your feedback.. An other statement against embedign a memorystorage driver was that:\nin order to be sure that the data are saved you will have to check both whether the promise actually resolved but also check the driver that is currently used.. Adding a e.preventDefault(); call inside the indexedDB.open().onerror() handler seems to prevent the error from reaching window.onerror(). Sample codepen. Any chance this might have other side effects?. @AshleyScirra thanks for your commitment on this so far.\nI just opened PR #648 that possibly resolves this.\nAs soon as you can confirm that this works for you, we can merge it in for v1.5 .. Here is a fork of the original codepen using the code from PR 648.\nStill works on Chrome (+ Private Browsing) and the Error no longer shows up on FF Privare Browsing. Also works in Edge Private and IE11 after replacing the ES6 parts.. Great!. @tofumatt please merge this if you are fine with it.. Here is a codepen using the code from this PR.\nSeems to work on Chrome (+ Private Browsing) and the Error no longer shows up on FF Privare Browsing. Also works in Edge Private and IE11 after replacing the ES6 parts.. Have you tried the expression found in readme?. Did you try modifying it to match the path from your warning?\n\n.npminstall/localforage/1.4.3/localforage/dist/localforage.js. I can merge nolanlawson's changes to localforage, it shouldn't be a big\ndeal. My only concern is that I won't be able to do any testing since I\ncurrently don't have any iOS device available.\n--\nThodoris Greasidis\n. Resolved by #651. @Narcwis asyncstorage stands for IndexedDB, so your results are indicate that #651 works and this is resolved.\nIt seems that the safari + iframe => localstorage issue is not something we can do something for.\nThanks for your feedback confirming that this works!. :+1:. Changing the type of a test to make it fail didn't broke grunt test. So I guess that we are missing something for now :-/. Pushing a commit in a minute!. Yes that's exactly what #626 was mentioning and is resolved in the current master with #633.\nI hope we can cut a new release soon.. I will be more than happy to review a PR for this. Otherwise will try to find some time until the end of this week. I think that we are ready for v1.5.. Closed by #662. I'm fine with it. @tofumatt ?. This also somewhat closes #585.. Any feedback on the rebate thing to remove the dist files?. Thanks that's great!. I would expect that .ready() would reject in that case. Would you prefer if\nit threw an error right away?\n--\nThodoris Greasidis\n. I will change it to do something more meaningful asap.. Congrats!\n\n-- \nThodoris Greasidis\n. setDriver can also accept an array of driver names as a parameter. Actually that's exactly what we are doing internally during initialization.\nUnfortunately, since the DefaultConfig object is not exported, you will have to use setDriver(['WebSQL', 'IndexedDB', 'localStorage']) on every created instance (or even better, you can pass the preferred driver order as a parameter to createInstance({ driver: ['WebSQL', 'IndexedDB', 'localStorage'] })).. Thanks for this PR. I will try to review during the weekend. In the mean time, could you please try fixing the code styling errors that Travis CI complains about?. Hi there and sorry for taking me so long to review these PRs.\nDo you have a personal preference between the two of them? Did one of the two work better on your tests/app?. I think that I like this PR more than #665, even though its number makes me feel somewhat uncomfortable.\nEspecially the part of retrying once.\nThe fact that _tryReconnect returns a Promise makes me feel better up front.\nKudos on this :+1: \n1) Have you tried this code on any project? Do you have any results?\n2) It would be great to have a test case for this... I will try writing one, probably by manually manipulating the connection's state.. Rebased & Merged with #694.\nThanks for your huge contribution on this :+1: . Hi there and sorry for taking me so long to provide some feedback on this.\nCan you do a rebase on the current master?\nAlso, it would be great if you could split the dist file changes into a different commit.\nI will try to create some test cases during the weekend.. I'm still not getting how you are trying to use localforage. Running index.html simply with a double click on the file works (logs appear in the console) on both Firefox and chrome.. Closing this for now.\nPlease take a look at #624 and the live example we added in README.\nFeel free to re-open in any case.. According to #604 #650 #651 we added support for IndexedDB in Safari 10.1+ in LF v1.5.\nAre you sure that you used IndexedDB under iOS 10 with v1.4.3 ?\nAlso please take a look at the v1.5 changelog.\nLastly, you might want to use localForage-cordovaSQLiteDriver in your implementation.. That's really strange and I'm not sure how I can help you.\nWhat happens if you setDriver() to INDEXEDDB and try to retrieve the data? Does it respond with something like \"no storage method found\"?\nAlso, please try retrieving the data from WEBSQL and post back your findings.. Can you also post the navigator agent strings that the two iOS emulators report?. Here is a jsbin with my findings (using the user agent strings that you shared). Please run it on webkit, so that websql is also available.\n9_3 1.4.3: true 1.5.0: false\n10_2 1.4.3: true 1.5.0: true\n// true stands for IndexedDB support\nYou are right that iOS 9.3 is detected as capable of IndexedDB, but since safari < 10.2 had a buggy IndexedDB implementation we tried to avoid it.\nThe thing is that in v1.4.3 the user agent test was just /Safari/, while in v1.5.0 it is /(Safari|iPhone|iPad|iPod)/ which seems more correct. As a result, we invalidly made IndexedDB available to safari on iOS etc. I'm not sure what we can do about v1.4.3 to solve this issue for safari v9.3 users that have saved their data on IndexedDB. @tofumatt  any ideas?\nPS: a hacky workaround to re-enable IndexedDB on iOS < 10.2 with localforage v1.5 on your responsibility, would/could be to:\n detect safari < 10.2\n use localforage.getDriver('asyncStorage') to retrieve the indexeddb driver\n change the driver name by setting it to something else eg: driver._driver = 'muindexeddb'\n user localforage.defineDriver(driver) & setDriver('muindexeddb')  to re-define and set indexeddb as a new driver.\n* feel too hacky & fear for the results. > From my understanding we should only support indexeddb on desktop safari for now?\nI think that IndexedDB works both on desktop and iOS safari 10.2 but in neither environments before 10.2 .\nThe bad thing is that in lf v1.4 we didn't check for the iOS agent strings. We should have done that. As a result there probably are lf1.4 safari 9 iOS users having their data stored in the flaued IndexedDB implementation.\nCould we possibly create a configuration option to set compatibility: '1.4' for those that prefer to use the old IndexedDB validity detection code?. How about creating a custom driver that inherits WebSql but uses the old detection and only runs on safari? That way we could have a clear upgrade path like:\n\nAfter upgrading to lf v1.5 & in order to keep safari users on their existing storage driver, please use the oldWebsqlSafari driver setDriver(['OldWebsqlSafariDriver', localforage.INDEXEDDB, localforage.WEBSQL, localforage.LOCALSTORSGE]).. @denis1994 & @tofumatt How would you feel for a compatibility plugin with the following api:\n```js\nvar driverPreferenceOrder = [\n  localforage.INDEXEDDB,\n  localforage.WEBSQL,\n  localforage.LOCALSTORAGE\n];\n\nlocalforageCompatibility1_4.config().then(function() {\n  localforage.config({\n    driver: driverPreferenceOrder\n  });\n  // or\n  // return localforage.setDriver(driverPreferenceOrder);\n}).then(function() {\n  // your LF code here\n});\n```. Happy to hear that. I will need a review on #723 for this and we can probably release it as 1.5.1. @denis1994 localForage-compatibility-1-4 was just released to resolve this issue. Please check it out, I hope that you will like it.\nClosing this for now. Feel free to re-open in any case.. Can you try v1.5? I think that we more prevent the error to bubble and\nreach the window.\n\n--\nThodoris Greasidis\n. It deserialize properly on its own. Did you face any issue while developing?. As with localforage v1.5 you no longer need to user @types definition of localforage, since they are now part of the library itself. Just delete the node_modules/@types/localforage/ folder and you will be ready to go.\nIn case that you are using an other library that depends on localforage v1.4 & the @types definitions and you don't like to manually touch the node_modules folder, you will have to wait them to upgrade to localforage v1.5 and drop the @types dependencies.\nClosing this for now, please feel free to reopen in any case.. @NickGeek #721 is the PR to keep an eye on.. A memory storage driver was added to the v2.0-dev branch with 40c70210a54645c33919a283b2a1138f40b7a001.. We have also tried generating an es6 dist flavor as well, but then removed it.\nWe are actually trying to reduce the number of dist files generated and provide as few ways to include LF as possible.. As noted in #680\nAs with localforage v1.5 you no longer need to user @types definition of localforage, since they are now part of the library itself. Just delete the node_modules/@types/localforage/ folder and you will be ready to go.\n\nCan you confirm that this works for your case?. We could define the driver syncronously but we need the result of the _support() method of the custom driver, which might be a promise. We complete the driver setup right after the result of the _support() method gets resolved. It could be probably feasible to change the code to the setup drivers differently, based on existence (or not) of the _support() method and it's return type.. Localforage doesn't provide an API for such operations at the moment.\nYou should use the WebSQL API directly.\nI'm closing this for now and point you to #620 where we are tracking the progress for such an API.\nFeel free to re-open in any case.. @LeonardoCiaccio  The dropInstance() PR in in the current master (and planned to be released as LF v1.6) can you give it a try?. That's an old enough tutorial.\n Have you tried importing as shown in README? I wouldn't use require() since in the latest versions of typescript and angular import works great.\n Take a look at this repo\n* You can also try using ionic-storage, which is actually just a localforage wrapper with a bit different API.\nFeel free to re-up if you face any issues.. I'm merging this for now, since adding docs rarely does any harm :smile: \nLets focus on more important PRs !\n(I somewhat finished with my balcony and furnitures, so it's LF time again.). Is this in private mode or something?\nAre you able to retrieve the item?\nWhat does the driver() method return?. Any feedback on this?\nThe live example found in README runs properly on FF using IndexedDB. In Private Browsing mode though it uses LocalStorage, since IndexedDB isn't available there.\nForking the provided example would be the best approach to demonstrate your issue.. \nThat's what I get with Firefox both on desktop and mobile.\nDoes the example retrieve data in your system? (Does Read: asdf appears?). > \"Using:localStorageWrapper\"\nSorry I missed this part from your post...\nIt seems that LF ended up using localstorage instead of IndexedDB.\nWhat's version of FF do you use?\nIs there a chance that you have a strange privacy/storage/cookie setting or even an add-on that might be affecting it?\nI will try visiting your page later today and check which driver is used, but since you already get different results on the example it is probably an issue on your setup.\nCan you replicate on other systems with an up to date version of FF?. \nOn my machine it seems that the data are properly stored using IndexedDB in FF 54 Developer Edition.\nAlso I checked that LocalStorage had nothing stored.\n. I'm sorry to say that I was able to reproduce on one case and the example ended up using localstorage on a stable FF 53.0 (32-bit).\nInterestingly enough, after starting FF 53.0 with a new profile, it properly used the asyncStorage driver.\n\nI'm not sure why this happens on older profiles, but it seems that it's a hard to track and replicate FF issue.\n. I think that the code should be moved outside the new Promise(function(){...}), since according to the spec you can't bet that the constructor function runs synchronously.. My bad \ud83d\ude1e \nIt seems I was a bit confused with an other part of the Promises spec.\nIf the current code works for you then I;m fine with it.\nIt would be great to have a test case as well, but if it troubles you then I can give it a try during the weekend,\nKudos for the PR.. Thanks for this!!. After closing manually the IDB connection with localforage._dbInfo.db.close();\nThe following works:\n```js\nvar tx = localforage._dbInfo.db.transaction(localforage._dbInfo.storeName, 'readonly');\n(function (tx) {\n    console.log(tx);\n    var store = tx.objectStore(localforage._dbInfo.storeName);\n    console.log(store);\nvar req = store.get('STORE_KEY');\nreq.onsuccess = function() { console.log(req.result); };\nreq.onerror = function() { console.error(req.error); };\n\n})(tx);\n```\nBut these two fail in FF:\n```js\n// FF doesn't like Promises (micro-tasks) and IDDB transaction/store operations\nPromise.resolve(localforage._dbInfo.db.transaction(localforage._dbInfo.storeName, 'readonly')).then(tx => {\n    console.log(tx);\n    var store = tx.objectStore(localforage._dbInfo.storeName);\n    console.log(store);\nvar req = store.get('STORE_KEY');\nreq.onsuccess = function() { console.log(req.result); };\n\nreq.onerror = function() { console.error(req.error); };\n\n}).catch(e => console.error(e));\nvar tx = localforage._dbInfo.db.transaction(localforage._dbInfo.storeName, 'readonly');\n(function (tx) {\n    console.log(tx);\n    var store = tx.objectStore(localforage._dbInfo.storeName);\n    console.log(store);\nPromise.resolve(store).then(function(store) {\n    var req = store.get('STORE_KEY');\n    req.onsuccess = function() { console.log(req.result); };\n\n    req.onerror = function() { console.error(req.error); };\n}).catch(function(err) {\n    console.error(err);\n});\n\n})(tx);\n``. This might also be useful for #620 (dropInstance()`), where we had to close and reopen all the idb connections. @tofumatt any feedback on this?. @tofumatt Here is a list with the most important changes on master since v1.5.0\n 64c564b feat(typings): added generics to iterate function\n 4db9f4a fix(indexeddb): fix concurrent requests after InvalidStateError\n 1d17b30 fix(indexeddb): try re-establish DB connection using callbacks\n 7f75f07 fix(indexeddb): check db existence before closing\n 557c364 fix(indexeddb): try re-establish IDBDatabase connection after encoutner InvalidStateError error\n 3f7df54 feat(defineDriver): set up custom drivers syncronously if there's no _support property or it's not a function.\nHow about releasing as v1.5.1 whenever you got some time to run an npm publish?\nWe can then iterate from there with the other PRs and track any regressions easier.. Thanks! Nice catch :+1:. The LICENSE file says Licensed under the Apache License, Version 2.0.\nIsn't that ok for you?. So,\n1. Is the license clear Licensed under the Apache License, Version 2.0?\n2. Should we close this?\n3. Is this a request to change this library's license?. Hi there. Never heard something like that before! What version of localforage after you using?. Closing this b/c of inactivity. Feel free to re-open if the issue persists.. Hi there.\nYou should either use the config() method to set the storeName for your default LF instance, or use createInstance() (which accepts all the options as config()) and create a new LF instance to manage the specific storeName.\nClosing this for now. Feel free to re-open in any case.. In that case I think you will have to ask from Ionic-storage to also expose the createInstance() method.\nPS: I'm not fully aware of the Ionic-storage API. Actually it seems that forRoot() leads to the constructions of a new Store object, which leads to a call to the createInstance() method. So, you might be able to use multiple IonicStorageModule.forRoot({}) calls and get the respective store objects.\nHope this helps!. PS: StorageConfig has a storeName property. An out of scope comment from me: :+1: for using ready (). Hi there!\nI think that support for that storage method should be implemented as a custom driver, like the localforage-cordovaSQLiteDriver, since this library is primarily focused on storage methods that browsers have available to web pages.. @natashache did you find a workaround on your issue? Can you share what drivers are you using (if you are defining them anywhere) and which one is ultimately being used?. Try running this one https://codepen.io/thgreasi/pen/ojYKeE. @realgsong what's the driver preference order that you are using (are you using config() or setDriver()?)? Also what version of LF are you on. Please fill any additional pieces that might help us debug this.. @realgsong it seems that you are forcing IDB and it's not detected as supported.\nWhat if you tried:\nlocalForage.config({\n    driver: [localForage.INDEXEDDB, localForage.WEBSQL, localForage.LOCALSTORAGE],\n    name: 'mydb',\n    storeName: 'mystore',\n    version: 3\n})\n.then(() => localForage.getItem('x'))\n.then(x => console.log(x, localForage.driver()))\n?\nThis way you would allow LF to fallback to one of the rest drivers.\nPS: keep in mind that we intentionally do not support IDB on Safari < 10.2 b/c of buggy behavior.\nSee: https://caniuse.com/#feat=indexeddb. @camflan, @slowlyCoder, @amerzad, @MaxInMoon, @natashache Can you re-elaborate on this based on the latest comments so that we can unblock this issue?\n\nWhat's the driver preference order that you are using? Are you using config(), setDriver() or createInstance()? . @jlchereau I was super-excited about this and now I'm heartbroken \ud83d\udc94 \nSeriously now, no worries.. Thanks for the detailed report.\nCould you fork this codepen example to demonstrate the error in localforage.dropInstance({ name: 'db' }, function(err) {...});?\nThat's strange since I think that there is a test case for this!?. Hey @jlchereau .\nFirst of all Thanks for providing this feedback as test cases!\nYea, I saw the timeout. Interestingly enough increasing the timeout to 30secs seems to resolve the issue of dropping the third store.\nDidn't have enough time to figure out a solution though.\nHopefully I can find further clues this weekend.. @jlchereau did some profiling and got the following interesting results:\ndropInstance:dbPromise: 1.88ms\ndropInstance:dropObjectPromise-db.close(): 0.47ms\ndropInstance:dropObjectPromise-open: 1.22ms\ndropInstance:deleteObjectStore(store1): 0.82ms\ndropInstance:dropObjectPromise-open-onupgradeneeded: 4578.12ms\ndropInstance:dropObjectPromise-open-onsuccess: 4582.25ms\ndropInstance:dropObjectPromise: 4584.56ms\ndropInstance:_advanceReadiness: 0.65ms\ndropInstance: 4594.26ms\nFor some reason idb.open(options.name, newVersion); call takes ages to resolve... I will try to investigate whether there is something that stalls it.. @jlchereau let's move the discussion to #779 where I will post an update for this in a bit.. What would JSON.stringify(myMap) result?. What if multiple types are stored in the store?\nShould we have to do something like .iterate<Type1|Type2|Type3, Type1|Type2|Type3>(/*....*/)?\nShould we also keep the any interfaces as well and also let the user define the type(s) that they expect with your overloads?. Thanks \ud83d\udc4d . Adding a memory storage driver is tracked in #681 and the current milestone is for v1.6.\nI will try to open a PR to integrate memoryStorageDriver during the weekend. I will first try to rebase #555 just for the credits, but it's a bit outdated.\nI also think that this should be v2.0, since semver wise, there will be a change on the behavior of LF. There might be people expecting to catch the no storage driver available error on .ready() (even though I hope not). @tofumatt what do you think on that?. Discussion with @jesusbotella from #723:\nI would prefer to keep the validity methods without consequences. I would prefer the test setItem call to be inside the _initStorage method, in a similar manner with what the indexeddb driver does (having a constant for the test \"database\" & following a similar naming schema).\nWe would also need a test case for that, probably extending the faultydriver test cases to override localStorage with a method that would throw an error.\n\n@jesusbotella  Let's continue the discussion here.. Or maybe even better in an other issue if you prefer?. :+1:. A memory storage driver was added to the v2.0-dev branch with 40c70210a54645c33919a283b2a1138f40b7a001.. Also depending on the size of your db, you might not want to make a single huge operation. So keep in mind that you can get the length() of the items in the db and then use iterate() to retrieve all the items and also use a counter to show a progress bar!. I like the idea of a private store where we can store extra info and detect whether this is the first run of localforage or not.\nThis might get even more useful in the future to store things like a version number, since every change in the schema of indexeddb (adding or dropping a table) requires a db version increase, which might result version numbers that are less semantic to the developer needs.\nIn fact I'm already using an _localforage_sys store in localforage-observable already for cross tab notifications. It might be a good idea to define such a naming schema already and use it in things like DETECT_BLOB_SUPPORT_STORE.. For now you probably have to keep a seperate LF instance in your app, storing the name and storeName of each instance you create.\nRe-opening this issue for tracking purposes.. @lieuzhenghong this shouldn't be happening, it should just open the db if it is already there, just like config() (which is used internally).\nWhat browser & what storage method are you using?\nI will add some test cases during the weekend.. I think that dropInstance() #708 should go first, since this is a breaking change and should target LF v2.\nI'm now working on a refactor for v1.5.x that will provide a way to work around the Safari IDB breaking change.. @tofumatt Can I also get a review on this?. Doing a moching a merge commit ATM and will update this pr that to make the comparison a bit easier.. Merged with 40c70210a54645c33919a283b2a1138f40b7a001 too bad GH didn't detect that as a merge, probably b/c of changing the base branch.. cc: @denis1994, @danielsogl, @jesusbotella. I think that this should be part of a separate PR. We can perhaps add run a dummy setItem in _initStorage, in a similar way to what indexeddb does to detect blob support.. @jesusbotella I would prefer to keep the validity methods without consequences. I would prefer the test setItem call to be inside the _initStorage method, in a similar manner with what the indexeddb driver does (having a constant for the test \"database\" & following a similar naming schema).\nWe would also need a test case for that, probably extending the faultydriver test cases to override localStorage with a method that would throw an error.\n@jesusbotella  Let's continue the discussion in #715.. @tofumatt any chance I can get a review on this and possiblty merge and release v1.5.1 during the weekend?. @tofumatt How about releasing the current master as v1.5.1 ?. The respective @types package isn't maintained by any of the team members as far as I know, even though we have contributed a few times.\nSince v1.5.0 the typings are part of this repo and I would strongly suggest you to use those and drop the @types.\nCuriously I can't find https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/localForage any more.. It seems that they also added a README in the @types/localforage v0.0.34 package that states that localforage now provides its own typings, so v0.0.34 seems like a \"gravestone\" release. You should obviously either  update to LF 1.5 or stick with v0.0.33.. > It involves checking the current localStorage items length.\nI'm not sure whether we should wrap localStorage.length inside a try...catch. Can you confirm that it doesn't throw in private Safari?\n\nDo I need to worry about it, or it is correct seeing that it doesn't belong to the faulty drivers test?\n\nHow about doing a localStorage.clear() inside a before() call, like in here?\n\nIf I'm not wrong they are in a different commit, right?\n\nYou are right, didn't see that \ud83d\udc4d \n. \ud83d\udc4d from me, just add the clear() call in the tests and add the new dist.\n@tofumatt ?. > Shouldn't be necessary to clear the localStorage after these tests as well?\nI have no strong opinion on that. Just adding a before, preparing the env for your tests, should be simpler than checking all other test cases for uncleared records.\nI'm fine with this \ud83d\udc4d , just want an extra approval from @tofumatt as well, in case that I missed something.. Hey @jesusbotella, can you rebase over the current master and squash the commits of this PR a bit?. @jesusbotella yes, please! A separate dist commit would be ideal (in my mind) after squashing and rebasing the rest of the commits. That's not mandatory though but let's keep the commit history clean and short.. :+1:. Seems to work great even in IE9. Couldn't test Safari though.. @jesusbotella I know it's a bit late to ask this, but would this work equal well if we moved the above code in the isLocalStorageValid method?. @jesusbotella oh, I didn't see that coming...\nLet's keep this PR as is and merge it during the weekend.\nThe two approaches have both pros and cons and I'm not sure which I prefer the most.\n Moving this to _supports will result localstorage to be reported as not available in the supports() method as well but adds two store operations while localforage gets loaded and isn't consistent with what the rest drivers do. Also there is a change that the user gets an alert for allowing the site to store data, by the time the localstorage support checks run, even if they don't end up using localstorage at all.\n Keeping it inside the _initStorage is more consistent, since that's the place that the rest of the drivers do their first store operation.\nCC @tofumatt for a review.. With #723 (which is targeted for v1.5.1) we are planning to allow overriding the _support method of the internal drivers. Here is the code of a WIP plugin that will offer compatibility with LF1.4 Safari IndexDB detection.\nSo, I would suggest to wait for v1.5.1 and then do something similar, using the LF1.3 IndexedDB detection.\n(Or maybe I will put some time to write such a plugin after v1.5.1 is out.). > I believe that for localForage v1.3, the default was to use IndexedDB if it existed, which is did on mobileSafari since IOS 8 even if it was unreliable.\nActually, lf 1.3 does include a safari check. And that's also true from lf 1.3.0.\nSo I guess you should follow the same process as from upgrading from lf 1.4 .. In other words, you will be able to use the localForage-compatibility-1-4 plugin when it is released to upgrade to v1.5.1.. @SteveBrooker localForage-compatibility-1-4 was just released to resolve the safari migration issue. Please check it out, I hope that you will like it.\nClosing this for now. Feel free to re-open in any case.. Can you try using #708? which adds dropInstance() and reinitializes the db after an instance is dropped.. @bhaidar I can't identify something relevant in your stack trace, so my guess is no.. Oh, this wasn't shown in the stack trace though. Can you also post the error message itself that the promise is rejected with?. The one that the setItem promise is rejected with.. There isn't a good place to add a breakpoint in the above code. You should add a .catch() in the piece of code that invokes setItem() and get the error from there.. This souldn't happen.\nI would love to get a sample JSON of your object or even better a fork of this codepen example demonstrating the issue.\nThanks for elaborating on this, even though I've started thinking that this should better be in a separate issue.. @ccorcos any feedback on this?. Hey @ccorcos thanks for thinking some time to elaborate on this \nCan you reply to my earlier inquiry:\n\nCan you try using #708? which adds dropInstance() and reinitializes the db after an instance is dropped.. @ccorcos The dropInstance() PR in in the current master (and planned to be released as LF v1.6) can you give it a try? It should fix your issue.. Actually we can still use IndexedDB on iOS >= 10.2 but we are intentionally avoiding using IndexedDB on iOS <= 10.1 since its implementation has issues.\nAre you having an issue with the IndexedDB driver not being selected on iOS >= 10.2 ?. Actually with fetch.toString().indexOf('[native code') !== -1; we make sure that the browser has a native fetch implementation and not a polyfill.\n Does it make a difference to your app?\n What's the result of fetch.toString().indexOf('[native code') !== -1; when you run in on Safari (and on what version)?\n* Is there a chance that Ionic 2 runs the polyfill even when a native fetch implementation is available?\n\nCodepen also has an <iframe> and that's the reason that LF ends up using localstorage. Ionic 2 serve might be doing a similar thing.\n. We will probably have to change that piece of code to use a regex to parse\nand detect the safari version. Removing the native fetch test would make\nIndexedDB being detected as valid to older versions of safari that have the\nflaued implementations as well, when a fetch polyfill is used and that\nsounds like a bad thing to me.\nOn Mon, Sep 18, 2017, 09:26 orlyapps notifications@github.com wrote:\n\n\nWithout my change IndexedDB support ist not detected on iOS 10.2+ /\n   Safari with polyfill\n\u00b4fetch.toString().indexOf('[native code') !== -1;\u00b4 is false in every\n   Safari and every iOS (with polyfill)\nYes, ionic runs the polyfill always, even if fetch is available (And\n   here is the main Problem)\n\nBut i think the indexedDB support check should not rely on the Fetch API\nwhich many frameworks polyfill.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/localForage/localForage/pull/733#issuecomment-330137252,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ABPF1fzF9SoeYKkOJ4INxMXKMqIjRpSFks5sjg0AgaJpZM4PYsOv\n.\n-- \nThodoris Greasidis\n. @salbahra As of localforage 1.5.1 you can actually override the _support check. Please take a look at what we do in localForage-compatibility-1-4, I think that this would be a great code to start with.\nCan you also report the value of fetch.toString() please?. So, my suggestion was in case that you used localforage v1.5 directly. Ionic storage uses localforage 1.4 which doesn't contain the fetch check and will not try to use IndexedDB in any version of safari.. Feel free to cc me in that issue. Would love to follow that discussion and possibly open a PR there.. As found in #735 it was about ensuring that using createInstance() concurrently from different parts of your app will not error even if the same \"db\" & \"store\" are selected.\ncc: @lucianbuzzo. Just released localforage-getitems v1.4 with typings.\nYou should use the extendPrototype() method.\nTake a look at the typing tests on how it is used.. Sounds great, thanks for sharing!\nI'm not sure whether this is the ideal place to post that, maybe the wiki is more appropriate.. Hey there!\nYou can use the .key() method.\nAs a sidenote, the resolved value of a .getItem() promise can't be undefined, but returns null instead.. \ud83d\udc4d . Feel free to open the PR an we can elaborate on it.. Feel free to open a PR to add it in the respective section of README :+1:. Thanks!. Yeah that would be great :+1:\nI have it a try last weekend, but I was stuck with modernizr not being prebuilt :(. localforage currently points to an <h1> with the respective ID !. @tofumatt Any hints on how to publish the docs?\nI got:\nWarning: Task \"copy\" not found. \n\nand after installing grunt-contrib-copy I'm getting:\n\nWarning: Task \"build-rules-html\" not found.\n\nWhat do I need to install? Would it make sense to add them to devDependencies as well?\nAlso what's the process for cutting new releases? Is pushing a tag all that's needed to reach npm with travis autopublish? Is that something that I can help with?. It seems the docs were not up to date, even when comparing with change that were a bit older.\nChanged the GH Pages settings to serve the docs folder instead of the gh-pages branch and now it should be as easy as merging. Perhaps we missed that when migrating to the repo under the localForage org.\nI will try to release the current master as v1.5.1 during this week or the next weekend if that's ok with you.. Nice catch \ud83d\udc4d . You probably need to use the oneLine.. I can take a look at it tomorrow \ud83d\udc4d . Hey @tricinel, it ends up that common tags increase the \"nopromise\" bundle size by 50% which sounds bad.\nI tried something simpler (on top of your commits)... just running a regex func everywhere we use string templates.\nSee: https://github.com/thgreasi/localForage/tree/tricinel-feature/es6-template-strings\nIf you can squash your commits we can merge this during the next week \ud83d\udc4d . @tricinel yea, rebasing with dist files included can be a pain... I tend to add the dist files as a seperate commit and drop them before rebasing & then generating & adding back after the rebase.\nYou can try squash everything and during the rebase pick the master's dist files as is and re-generate them later (that might be easier with an external non-console tool).\nAn alternative way to remove the dist file changes would be to pick the previous ones (from the old master) and them as a commit on top of yours and then squash your commits again.\nI can do the rebase for you before merging If you pull out the dist files before merging.. @kakadiadarpan can you test #751. If you can confirm that it work I will try to release is today or early tomorrow.. Released a fix as 1.5.2 , thanks for the detailed report!\nHappy instance creation!. Hey @ssuess , here are my questions to help track this down:\nDid this occurred after an upgrade to LF 1.5.2 and didn't happen before?\nAre you using custom drivers?\nSetting custom driver order?\nSetting custom store sizes?\nUsing createInstance()?. Also can you check the result of localforage.driver() both on load of the app and after using the store for some time.. :+1: and thanks for sharing all those details:+1:. So, this goes down to the guaranties that the underlying storage methods provide.\nI would for sure detect race conditions and have them not run in parallel, or even avoid storing 1.\nOn the other hand here is a codepen example which gave pretty consistent results. I guess the fact that JS is single threaded (except from workers) has something to do with it, but still I wouldn't be 100% sure and wouldn't base business critical stuff on this observation.. I think that if IndexedDB provides sick guarantees, then we probably can assume that the same is true for the three IndexedDB driver of localforage, which is demonstrated by my earlier example.. @tofumatt I totally agree with this, I also prefer longer lines than slower code.\n@tricinel  tried oneLine at a274cf4 and some tests started to fail (!?) and the nopromise dist file increased by 50% size, since oneLine was included in the bundle and wasn't evaluated at compile time. Are you using any magical babel transformer like this?. I think that this should be in v1.6, since master already contains dropInstance(). Sorry about that, will bump the version during the weekend.. @michaelgeorgeattard I will change that to make dropInstance optional as it should be. Sorry for the inconvenience.. @chetmurphy that's a bit difficult with the current export methods that we are using but suggestions & PRs are welcome. I think that for now you should be able to use something like\nts\ntype Localforage = typeof localforage;. So, I'm not sure I get your request correctly, but would it make sense to run any custom detection code before as part of your app and then just call setDriver() with the one that makes more sense to your use case?\nAlso, as of localforage 1.5.1 you can actually override the _support check. Please take a look at what we do in localForage-compatibility-1-4.. Yea, there was an actual issue with safari  <10.2 and that's why we avoided it. In short, you couldn't have an orange store and a car store and have each each one hold a record with the same ID. People make test cases for that that only failed on safari! Google it, it's a nice read.. The single preference order mechanism is the DefaultDriverOrder array in src/localforage.js. That's probably my fault not been that keen on typescript definition files when this was initially written. I will try to release v1.6 during this weekend that will expert most interfaces as part of the namespaces of the module.. No, unfortunately not.\nYou should have a \"master\" instance to store such information and maintain those info on your app's side.\nMaybe on v2 we could do something like this inside LF.\nDuplicate of #719. Can you share the result of fetch.toString()?. I guess we can plan to change that in v2.0 to use a regex and explicitelly detect safari < 10.2.\nWe should probably also release a new version for the  localforage compatibility plugin.\n@tofumatt what do you think?. It's still buggy in safari <10.2 and we didn't expect monkey patching the fetch API to be so widely used and stop our 10.2 detection from working.. We could do something like https://github.com/DamonOehlman/detect-browser/blob/master/index.js for our safari detection.. See: Pouch DB merged PR\nSee: Pouch DB dropping Safari < 10.1 support and the fetch check. Interestingly enough canIUse shows Safari v10.0 as fully compatible as well, but PouchDB guys test cases only passed on 10.1+ .. @fifafu, @lfairy and anybody interested on this issue getting resolved, can you try out #799 and share some feedback?. Closing as fixed in v2.0-dev with #799. @ponday-dev, @chetmurphy , @alan-agius4, @michaelgeorgeattard Can I get some feedback on this?. These changes seems to break the typings of the various localforage plugins (setItems etc).\nKeeping this open and adding it to the v2.0 milestone.. That obviously depends on how big are your objects and the limits of the browser it is going to run.\nThat would be easy to test, just using a for loop should be enough along with some representative properties and values.. Since the various browser storage methods aren't designed primarily for caching but are general purpose implantations this isn't backed in, neither in the browser storage implementations nor in localforage implementations. I would suggest to create a different helper service for your data access calls, which would wrap your data in an other object containing such lifetime statistics (create date, expression date).. A welcomed near the end of the year PR definitely that's good to merge \ud83d\udc4d \nSome parts in the PR description confused me / left me with questions though.\nI didn't get the esprima-fb part.\nAlso I'm not sure whether updated lie dependency affects us, since we are just pointing to lie's polyfill file directly instead of the source or building it yourself.\n. Status: Just want to confirm that it still works in IE8 (which it should) and will merge and release as v1.6 during the weekend.. @tofumatt Thanks, you are so cool that you remembered that master is v1.6.0-pre.\nI'm feeling bad of this, but I think that I will have 2 PRs for you during the weekend for v1.6 :). Cool thanks \ud83d\udc4d . I never thought anyone would be using both callbacks and promises in their code.\nIf that's not that rare, then this sounds like a breaking change to me \ud83d\ude15 . @Shingyx that's an interesting use case that I seems reasonable. iterate predicate is something required, in contrary with most other callbacks that LF offers, which are just an alternative for the Promise based API. This currently works as you described it in LocalStorage driver but doesn't settle at all in IndexedDB & webSQL drivers.\nCan you file a different issue for this? I will try to add that to v1.6. @salomvary I've noticed that and I'm working on it for some weekends now. Also discussed in #708 . So, made some progress during this weekend, after putting some effort on trying to close all idb connections and store proper db references (no PR yet though). \nStatus:\n The first call to dropInstance to drop a store might take some seconds until all connections are closed.\n Dropping a non-existing db rejects in IDB driver, which is currently a thing that I want to change for consistency. Should not be that hard.\n* All other dropInstance calls are now consistently resolving in a timely manner.. Actually this is a new method that got merged but didn't have time to cut a release. Will try to do tomorrow. Thanks for the reminder :+1:. PS: This should be already available if you use the code of the master branch. Again, sorry for the inconvenience.. Actually this is a new method that got merged but I want to make some improvements before cutting a release. Will try to do asap. Thanks for the reminder.\nLast update in #779. Just released v1.6.0 :). This needed a huge effort, regardless the low +-diff, but I wanted to get this fixed before my family gets bigger \ud83d\udc76 .\nWith this, we should be good to release v1.6 \ud83d\ude05 and start planning v2.0 (huge excitement)!\n@jlchereau the excellent tests that you provided pass with this PR. Tested both on FF & Chrome.\nWould love to get any additional feedback on this.. @tofumatt I just added even more tests for this (and my local git broke just before pushing... sad story).\nAnswering to some of your requests, I provided some details on why I was still using plain for loops.\nPlease give me a hint whether this needs further changes to merge. Feel free to push any commits, merge and publish v1.6 yourself in case I disappear for a while (\ud83d\udc76 is almost here).. Ping @tofumatt for re-review!. @tofumatt Should I cut a release for v1.6 or do we want to add anything else before releasing?. @tofumatt Should I cut a release for v1.6 or do we want to add anything else before releasing?. Thanks for the detailed report @AshleyScirra \nAfter a first read it seems that waiting for _deferReadiness inside _tryReconnect would fix that race condition. I will try to tackle this. PRs are always welcome though.. No afaik. I hope I can invest some time on LF during Christmas though.. Very interesting indeed (in a bad way) and it should be happening. Is there a chance that the password is stored in an other LF instance or store?\nAre you using createInstance() or config() anywhere in your code? If so, there might be a race condition somewhere.\nPS: dropInstance() will be part of LF v1.6 .. Sounds cool, will take a look \ud83d\udc4d . Hi. localForage-observable is able to give such cross-tab notifications for now. It currently uses localstorage events under the hood, regardless of the storage driver issued.\nUsing the messaging API sounds really interesting as an approach. Even if this doesn't end up as part of LF core, adding it to the observable plugin seems sensible.. I will try to cut a new v1.5 release later today if you don't have time for it.. Oh sorry, just cherrypicked, tested & released!\nHow about a re-review on drop instance PR?. Interestingly enough, it shows up properly in unpkg: https://unpkg.com/localforage@1.5.7/dist/localforage.js. More interestingly enough, our dist files can be found in their repo!?. You can use localForage-getItems.\nOn the other hand, @tofumatt should we consider extending our API to bake this in v2 or v3?. Thanks for the report and the extra digging that you did :+1: I would be more than happy to review a PR with your suggestions, even though tested might be difficult to right for such case.. After rethinking about it, if one tab tries to save to a store and an other one tries to drop that store and gets blocked, we might want to abort the write and unblock the drop. The issue still needs investigation though.. Oh sorry I was blocked on other things all this time.\nWill try to check this weekend.. @sido420 I think that the following should work, can you please confirm?\njs\nPromise.all(_.map(items, function(item) { return DB.getItem(item); }))\nLocalforage methods are not binded to their this context.. Cool thanks :+1: . @tofumatt it might be that we have to also include the src folder to the published npm package!. Oh, forget that, we already do include them.... Should we close this for now?. You can use npm run serve and at some point a url like https:0.0.0.0/test/main.html will show up. You can use that on your browser.. I was working on a logo for some time but we never had a discussion about it. There is a repo under the localforage org and the org itself uses it.\nSee: https://github.com/localForage/localForage-logo. There was a kind of similar discussion in #179 where users reported that localforage._dbInfo.db.close() (on IndexedDB driver) would shrink the used disk space. Can you try this out?. Duplicate of #766 which is part of the v2.0 milestone.\nThat's resolved by #799 which was recently merged in the v2.0-dev branch.\nCould you verify whether this works for you?. This sounds serious enough and I would hope that our test cases would caught something like this.\nI will keep an eye on this but please ping us if you end up with a piece of code that demonstrates the issue.. That does seem like an extreme code optimization from rollup. I think that you should open an issue at rollup to get their opinion on this. It seems that import localforage = require('localforage'); is the way to go for your case, which is kind of expected since localforage is a UMD package.. I'm not sure how to debug the second issue with that limited context. We actually have test cases for concurrent setItem calls, so there should be something else involved. Please also confirm the driver preference order used.\nRegarding the first issue, ionic has LF v1.4 and the respective @types as a dependency of ionicStorage. Since LF v1.5 we provide the typings as part of the npm module itself, since it was talking too much time to get it shipped when using @types. As a result if you are using LF instead of ionicStorage, then you should remove ionicStorage from your dependencies because it's typing dependency conflicts with newer versions of LF.. Does it print the same even after the first call to setItem?. Hmmm, I'm not sure what to suggest.\nDo the webview present any modal to request additional storage?\nCould you try setting a larger db size in your .config() call and see what happens?. Maybe @tofumatt has some ideas on this.. Maybe cordovaSqlite driver can give you better results on such low storage conditions.. As I mentioned before, if this is an ionic app with Cordova, then the safest bet to avoid storage quota issues is to use cordovaSqlite driver.\nIs there a reason you need to use indexeddb? Is this error originating from a browser?. > Currently I am using cordova sqlite drivers a works fine.\nShould we close this and move the discussion to #819 ?\n\nI was using localForage on cordova apps because on several howto's/manuals recommends this library for cordova apps to use indexeddb.\n\nThat's probably in case you also want to make a website out of the same source code, in which case IndexedDB will be used in instead, as the second option after sqliteDriver. All in all, ionic storage is just a facade over LF & the aforementioned cordovaSqliteDriver that offers a slightly different API + some angular extras.. That's actually something that we should probably ask on browser vendors.\nCould you also share the browser & version where the limitation affected you?. On what browser does that happen?. The data will be independent between the different drivers, given that there is browser support (you should check that before). On the other hand you should be using createInstance() in your createStore method, otherwise you will be operating on a single driver and localforage instance from all parts of your app (using the driver from the last createStore call).\nIndexeddb should persist in all cases mentioned, except if the user is on private browsing mode or decides to cleanup local date, or the browser works with low available disk space and runs a cleanup of local data.\nI would suggest you to not try forcing a specific driver for each part of your app, but instead pass the store and/or storeName props in your createInstance()call as a better way to achieve data isolation. Each localforage instance with end up using the most appropriate driver depending on the environment it will be used and you can avoid doing this yourself, since this is something that localforage is already doing out of the box.. Thanks for the detailed test case, I will try to pick this up soon.. I'm happy someone read the CONTRIBUTING guidelines and used that pen :). First of all let's clarify which storage driver is used. Since you mentioned J7 I would guess that would be IndexedDB (except if you pack your Ionic app as an apk?). You can run localforage.driver(), ideally inside the error handler of the failed storage method.\nPlease also clarify whether the error originates from a browser instance of your app or if you are providing it as a store app.. If you are packaging you ionic app as an apk, then you can use the cordovaSQLiteDriver, which should give more disk space to your app. If you are just providing a web app, then cordova is obviously not an option.. Yes that's what I meant but you never answered on whether you are packing an apk or serve as a web app. I thought that ionic storage should add use the Cordova sqlite plugging out of the box. How do you call the storage methods in your code? (Eg localforage.setItem()). Oh my... eslint thinks that we intend to you window.name there... I'm on it. I guess that everything still works since are doing CREATE TABLE IF NOT EXISTS anyway.. @ashpr opened #830 for this.. Isn't import localforage from \"localforage\"; or import * as localforage from \"localforage\"; working for you?. I think that's fair enough. You should get the binary blob of the image pointed in the src and call setItem() on that one instead of the DOM element. Here is our respective test case.. I guess if it only happens on Safari and there are at least two other browsers that this doesn't happen, then it's probably a Safari issue. AFAIK LF doesn't have code that could do the key-value-pair reflection that you observed.. Isn't mithril a UI framework? If so I don't think that you need a driver and you can just reference localforage directly in your code (as far a understand from what I read). Am I missing something? Does mithril provide a storage mechanism?. We indeed also include the es6 sources in the src/ folder, but the main field of package.json points to the es3 transpiled sources found in the dist/ folder.\nHow do you import LF? Do you explicitly point to the src folder? If not, then the src/ folder of LF shouldn't be referenced at all.\nIf jest just parses everything in the node_modules, that would be bad.\nSee: https://unpkg.com/localforage@1.7.1/. As far as this module is concerned, only the dist file pointed by the main field of the package.json should be used. All other files are there for those who want to explicitly load the es6 sources and should normally be ignored since they could be anything, from es6 to coffeescript, Typescript or even webassembly.\nIf you check https://unpkg.com/ngforage@3.4.0/bundles/ngforage.umd.js you will notice the following on line 67:\nvar serializer$ = require('localforage/src/utils/serializer');\nThat's probably the line that's causing your issues. We do provide localforage.getSerializer() as a way to use the LF's serializer from the dist files as well. Please file an issue on ngforage for this, since such a umd dist can't really work on an environment that doesn't provide a require method (eg: window).. @afilp as far as I can tell, you are using an older version of LocalForage and you are trying to import a file from the src instead of the dist. This line was transpiled as part of our could process and it's not expected to be consumed by your project directly. You should do one of the following:\n Point to the dist files instead of the src ones\n Upgrade LocalForage to newer version that's not using System.import\n* Try using https://github.com/thgreasi/babel-plugin-system-import-transformer as part of your build process\nJust to be clear, IMO the correct solution is the one in the first bullet.. Oh I just saw the ./../../node_modules part, so I guess that's one of your libraries references LocalForage. Bumping LocalForage version should still fix the issue, since System.import isn't used in newer versions. If you still have an issue, then please open an issue in the project that does the aforementioned LocalForage import. Hey, createInstance tries to open an existing store (depending on the driver in use) with the provided name and only when that's not available it creates a new one, in the exact same way that config() can be used to change the store name of the default LocalForage instance. It's surprising that you mention that this doesn't work for you.\nCan you provide more details on the hard refresh and the browser that this happens? Any chance the browser was in private mode?. @gloss-water yea, LF doesn't do any throttling.\nThe approach you suggest totally makes sense to me :+1: \nI could also suggest you that instead of creating a wrapper around LF, you could just create an plugin that wraps the appropriate methods, after your LF instance becomes .ready() and you are using the desired driver.\nYou can take a look on how localforage-observable does exactly that.. Maybe we should allow imports like lodash does. Perhaps we could allow importing only the drivers that we are interested in & the LocalForage class and then use defineDriver to instantiate it.\nThat's for v2.0 probably.. Hi,\nThe issue is probably related to the fact that jest parses all the files of the localforage npm module, not just the imported one.\nYou should be able to configure it to filter out such files, but since #855 was recently merged, I would suggest you to first try upgrading to v1.7.3 and see whether the error persists.\nPlease give us a note on your findings.. Could we please rebase over the v2.0-dev branch and retarget this PR against it? If so, we can merge this sooner than later.. @Retsam you are right, I just faced this typing issue while writting a new custom driver in TS. Let's get this in v1.8, so that custom driver plugins are able to have a clear migration step.. Please change the base of your branch to be the current master, or if you prefer it I can try cherrypicking the commit, but in that case I'm not sure whether GH will consider the PR merged or not.. That's really interesting but unfortunately we don't support it atm  :(. Both Modernizer and has.js do more that variable checking. I will try out the has.js way of testing localStorage and hope it works better with web workers :(\n. This should make testing easier.\n. This should make testing easier, as well.\n. Not really. It's just how has.js does this.\nI should probably change it so that, in case setItem has falsy value, the test should fail.\nI might better use the same test that is used in localForage.js (... && typeof localStorage.setItem === 'function'), my bad :thought_balloon: \n. I tried the change but I got 4 errors, all of them with webKit...\n\nWarning: Task \"casper:localstorageWebKit\" failed.\n- assertEval: localStorageWrapper should be loaded after calling setDriver()\n- uncaughtError: \"#driver-set\" still did not exist in 5000ms\n- assertEval: localStorageWrapper namespaces keys from config\n- assertEvalEquals: localStorageWrapper driver is active\n\nThe only way to make the errors vanish is with the !('setItem' in this.localStorage) check.\n. Move after localForage assignment, in order to utilize the localForage constants (eg: localForage.WEBSQL) as keys.\n. Refactor code to use an array with the available drivers and their priorities, to prepare for mozilla/localForage#170\n. I wanted this check to be next to ready and setDriver, but obviously it ended up in the wrong it statement.\n. Consider changing to:\nexpect(require('promise')).to.be.a('function');\n. Opened #210.\nWhat's the difference of require.modules['then~promise'].exports over the simple require('promise') ?\n. to.be(null) is specific enough since it uses ===.\n. expect.js specifically handles null not to be of the object type.\n. Thanks MDN\n. This might not be necessary (for all browsers) but since object property names are converted to strings (on object literal declaration and when accessing with the bracket notation) I thought this was the best way to go.\nWithout this PR, this object literal works as a parameter to setDriver.\nDo you want to change the commit to make them look like numbers?\n. isArray looks redundant here since a typeof check follows.\n. I think this line (inside the catch statement) causes the inconsistent test results I get in my terminal vs Travis.\n. If I replace the catch part with throw e; then grunt test prints \"Error: SECURITY_ERR: DOM Exception 18\", when the two new test cases are run for the WebSQL driver.\n(everything else passes)\n. Deep copy so that the defaults are never exposed.\n. Should we return the promise here, just in case?\n. Either case, set the config driver property to the final selected driver.\n. It looks like, that besides naming I also have typo issues.\nThis should also be changed in ~~src/localforage.js~~ test.customdriver.js.\n. :+1: \nLike in Line 584\n. I liked it more when the var valueString was initialized with a default value, instead of setting it in an else.\n. Yea, I think that we should open a new issue for this, since indexedDb stores the Blob's type out of the box.\nJust keep in mind that this test needs to be run on a desktop browser since PhantomJS < 2.0 does not support the Blob constructor that is required for this PR's tests.\n. This could probably be omitted if we change the way we require the Promise module.\nAdditionally, we could also first test this.Promise before attempting to require the module.\n. How about just adding it to gitignore? Would this be enough?\n. I think that it should be a separate PR. This one is already large enough to make tracking changes difficult.\nWould be happy to open a new PR if you have suggested names on mind.\nWe just need to change:\n- the driver names exposed by the localforage object\n- the name property on each driver and\n- the module mapping function inside grunt.js that babel uses\n. How about build/es5src as a middle ground solution?\nOn Mon, Jul 13, 2015, 19:15 Matthew Riley MacPherson \nnotifications@github.com wrote:\n\nIn Gruntfile.js\nhttps://github.com/mozilla/localForage/pull/390#discussion_r34480366:\n\ngrunt.initConfig({\n-        babel: {\n-            options: {\n-                loose: 'all',\n-                modules: 'umd',\n-                moduleIds: true,\n-                // sourceMap: true,\n-                getModuleId: babelModuleIdProvider,\n-                plugins: ['system-import-transformer']\n-            },\n-            dist: {\n-                files: {\n-                    'dist/es5src/localforage.js': 'src/localforage.js',\n\nWorks for me, though I\u2019d also be happy if it output to like a .tmp/ folder\nor something. Just to avoid confusion. :-) - tofumatt\n\u2026 <#msg-f:1506598354461817953_>\nOn Mon, Jul 13, 2015 at 4:36 PM, Thodoris Greasidis \nnotifications@github.com wrote: > grunt.initConfig({ > + babel: { > +\noptions: { > + loose: 'all', > + modules: 'umd', > + moduleIds: true, > +\n// sourceMap: true, > + getModuleId: babelModuleIdProvider, > + plugins:\n['system-import-transformer'] > + }, > + dist: { > + files: { > +\n'dist/es5src/localforage.js': 'src/localforage.js', How about just adding\nit to gitignore? Would this be enough? --- Reply to this email directly or\nview it on GitHub:\nhttps://github.com/mozilla/localForage/pull/390/files#r34475855\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/mozilla/localForage/pull/390/files#r34480366.\n. build is already in .gitignore in the ### Ruby Stuff for slate docs section.\ncomponent.json also needs references to the es5 sources. Removing them might cause problems to them.\nAre we still gogo on this?\n. https://developer.mozilla.org/en-US/docs/Web/API/Worker/Functions_and_classes_available_to_workers\n. Sorry for the naming :disappointed: but this variable name is generated by babel-plugin-system-import-transformer@1.1.4 using the babel-provided generateUidIdentifier method to avoid conflicts.\nThe variable itself is used in the code transformations of System.import calls instead of just using var global = window.\nThis\n- is required for web/service workers &\n- allows for better minification, since it appears only once in the outemost scope of each transformed file that uses System.import. (In older versions this would appear once per System.import transformation.\n\nIt seems that this was reverted by ceab4ad15695e148e3a49ff2a3881264e3eeb841.\nCan you please confirm that the latest versions of the npm package was used before this commit?\n. Great! :+1:\n. Probably to keep out of count the items fall in the continue case (L115).\n. I think that the test do not suffice only because of the internal implementation of locastorage (probably browser specific).\nIt seems that even though localStorage.setItem('local', 'forage'); is executed first, iterate returns it last !?\nIn my tests in chrome (on this exact page if that matters) localStorage.key(0) returns the last item inserted, like a stack.\nAdding an  extra item in localStorage right after localforage.setItem('name', 'Bob'); resolves should be enough.\n. Abstract into a separate method\n. Remove the outer promise in favor of chaining\n. Use the _initDriver() wrapper that tries to _initStorage for the current driver and in case of an error tries the next one\n. wait for any pending older driver initialization\n. it is simpler in the src file:\njs\nvar oldDriverSetDone = this._driverSet !== null ?\n    this._driverSet.catch(() => Promise.resolve()) :\n    Promise.resolve();\n. Is there a reason that we attach the container on the global object?? It feels too intrusive to me to just add an extra variable to the window object.\nThis could probably be just a local variable around line 18, inside the closure of the IndexedDB driver.\nAs an alternative, it could be attached on the LocalForage class as a static property, named like _dbContexts. On the other hand I don't see a reason that this couldn't just be completely private to the IndexedDB driver.\n. Simply said, :+1: on this. I can't remember which issue it closes!?\n. I would prefer not to use the 'storeFront' string in here, since it is related to several trademarked products.\n. Ok then!\n. I remember someone had reported this somewhere....\nAnyway, did you also add a test case for this?\n. Great :+1:\n. Should we also add a catch() here and reject the promise returned by _initStorage?\n. Hmmmm\nLets say I create instance1 giving a very large amount of DB size and as a result the ready() promise of instance1 rejects at some point.\nNow lets say that my code handles that error and creates instance2 with the same db parameters as instance1 but with a smaller & valid size for the db size option. \nWill that work? I think not, since we wait until all ready() promises of the related instances are resolved (even though your comment says \"Initialize the connection process only when all the related localForages are ready\").\nI think that we just need to know that their promises are no longer pending and as a result their _iniStorage call has completely finished.\nTL;DR: I think that instead of ready.push(forage.ready()); in Line 213 we should use ready.push(forage.ready().catch()) (if I'm not mistaken or understood anything wrong);\n. Hmmm.... (again),\nChanging ready.push(forage.ready()); in line 213 into ready.push(forage.ready().catch()); should fix the aforementioned test case...\nAlso we should probably add a comment there explaining that we only care about the promise not being pending.\nToo much effort for such a small change :smile:\n. Now you made me hesitant about the completeness and correctness of my\nsuggested fix...\nThis is a way too small test case to leave for an other PR. On the other\nhand I feel ok with the current state of this PR.\nHow about giving it an extra day or two?\nOn Sun, Sep 27, 2015, 22:16 Matthew Riley MacPherson \nnotifications@github.com wrote:\n\nIn src/drivers/indexeddb.js\nhttps://github.com/mozilla/localForage/pull/452#discussion_r40508172:\n\n\n// Reopen the database for upgrading.\nreturn _getUpgradedConnection(dbInfo);\n}\nreturn db;\n}).then(function(db) {\ndbInfo.db = dbContext.db = db;\nself._dbInfo = dbInfo;\n// Share the final connection amongst related localForages.\nfor (var k in forages) {\nvar forage = forages[k];\nif (forage !== self) { // Self is already up-to-date.\nforage._dbInfo.db = dbInfo.db;\nforage._dbInfo.version = dbInfo.db;\n}\n}\n});\n\n\nShould we just add in the catch and then merge this into master and\naddress this use case later if needed then?\nI'd be okay with that... this patch is awesome.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/mozilla/localForage/pull/452/files#r40508172.\n\nThodoris Greasidis\nComputer, Networking &\nCommunications Engineer\n. Actually, according to mdn after a catch the chain is restored, if I understood it right.\n. You are right about p2.catch().then(function(){ console.log('asdf'); }) not working\nI never meant that a p2.catch() would alter the promise stored in variable p2 (if not reassigned).\n\nThe fact is that .catch() will always return a new Promise so p2 != p2.catch().\nThe part that confused me, was that it will not change the returned promise status, unless a function is passed as parameter (any function!).\nIn other words Promise.reject('error').catch(function(){}) will always be resolved.\nHere is a jsbin with the above!?!?\nPS: That's a great discussion for a single PR!\n. I think that it should be @tofumatt 's decision. My call would be to go for the second case, where we check for not pending.\nIf that's how you will proceed, consider using .catch(() => Promise.resolve()) for simplicity and consistency, as found in other places in localForage source.\n. How about moving this paragraph right after line 55?\n. I was thinking of that, but they are going to get the error at the moment they try to use any localforage method (the \"no driver tests\" still pass).\nSo for the developer:\n nothing actually changes with this PR\n localForage seems to do nothing on import, since the error during the default instance initialization is silenced and appears only when a method is used. After 3 duplicate tickets on this, I'm now starting thinking of this as a benefit.. PS: As an extra thought: Even if a developer defines a custom driver for his environment (eg memory storage) he wouldn't be able to do anything about a log that appears when importing localforage. Maybe we are saving them from hours of discussions with QA guys, trying to convince them that this log is totally fine to appear :smile: (I'm thinking a friend of mine right now who is in QA).. How about just setting it to 6 so that we get updates?. If you just did a fresh npm install then don't worry about it.\nIt would be great if the dist files were in a different commit, but it's not mandatory.. To be clear, I just changed the indentation here, but this is an opportunity to add some comments as well :). How about abstracting this into a new function and using a different prefix like in indexeddb?\neg _localforage_support_test. Tried that on many places, but oneLine will be superuseful for the rest \ud83d\udc4d . This was done in #692 by @gabrielmaldi, I just added the comment :). I think that we should remove these completely.\nWe always allowed redefining custom drivers but prohibited redefining internal drivers, possibly without any specific reason in mind.\nAllowing to override the internal drivers as well can let us bypass issues like #676.\nIf you are fine with this, I'm going to rebase, delete the xited tests and merge this today and you can release this as the next patch release for v1.5 whenever works best for you.. The indentation here (multiline backtick insert statement)  seems a bit snaky/misaligned !?\n\nWas that intentional? Should I fix that?\nI've also lately experimented with prettier which worked great as a precommit hook for code formatting.. I remember a case that a user complained about some logs on perfectly valid use cases, but we can do that here and check their reactions.\nI'm going to use console.info if that's ok with you (hopefully later today).. Missing double quotes here around ${dbInfo.name}. Missing double quotes here around ${dbInfo.name} & ${dbInfo.storeName}. We might want to avoid this call on every sqlite statement and keep it a single line to avoid any possible performance hit by running a regex.. Keep the latest db reference, in case the db needed upgrade.. Moved this to the top of the file.. Would be really happy to do such a thing.\nWhat do you have in mind?\nLast time I checked .forEach wasn't getting polyfilled in this repo and for of had an other issue (will try again later).. Perhaps in v2.0 we could have one build with polyfills (not just Promise) and one without. We should probably also default to the non polyfilled version. I've read about people being concerned of the main dist file size without knowing that we have a nopolyfills variant.. Oh my, browser vendors are weird. But, const  isn't allowed in for loops and let will be transpiled anyway.\nWhat do you suggest?. @tofumatt Using babel es2015-loose for of & .forEach() works on IE9+,  as long as you only use arrays, otherwise the reference to Symbol & Array.isArray in the transpiled code which will error when it gets evaluated.\nMy concern (which holded me back all this time) include:\n do we still support IE8? ref 1 ref 2 ref 3\n is the extra file size increase of the transpiled for...of really worth it?\n should we start using untranspiled es5 Array. methods?\nPS: Typescript (because of the type inference) emits far less & cleaner code for for...of. Should we consider it at some point? Especially editing this driver would feel safer.. Changed that to err for consistency, added an eslint rule, but in the end prettier didn't like it and I couldn't find a way to change its mind :(. TBH, I was just doing this for consistency in the code style :)  (even though some fat arrows slipped in some places). Will be more than happy to change these.. Please advise but see earlier comment on browser compatibility of babel transpiles for of and .forEach not being polyfilled atm.. See earlier comment\n\nconst  isn't allowed in for loops. I might be missing something, but these are just our test case expectations and thought that I shouldn't have ANY logic in there.\nI agree that we could do isIDBValid = semver.gte(version, '10.2.0') but this would duplicate our validity condition in the test cases as well.\nIf you thing that we should change that, plz clarify the suggested implementation and will update the code :). Maybe we could have two objects... one for the valid versions and one for the invalid.\nSound a bit DRYer than having the extra properties. What do you think?. Added an eslint rule and run --fix on all /src.. I just wanted to clarify why I'm exporting this, even though no other module imports it.\nSo, this export is here so that we can import in in the unit tests but it will not be reexported in the dist and will be minified as usual.. This was there before this PR though :)\nI just moved it around.. I was thinking of this more of an actual feature detection that has two parts (typeof indexedDB && typeof IDBKeyRange).\nSGTM, moving to the buggy detection method.. I think that there was a reason for this at some point, but with the current code that's definitely better :+1: . :+1: I will move this outside setItem for now but we should definitely refactor the serializer to return promises by default.. I will add a comment for now explaining the purpose of this, but we should definitely add es6 support in our tests. Can't even use () => {} right now, which seems frustrating. I actually got bitten by this while updating the the test cases.. Oh, the reason was that other instances that use the same db will still have access to the old data!\nWe will have to use a db provider method anyway, so that instances can continue working when their db is dropped.. \n",
    "jirislav": "I think it would be nice to have an optional driver choice of sessionStorage so that I could use the benefits of deserialization already being implemented within the localForage .. @thgreasi thanks for your effort! i'm going to use it ;)\n. ",
    "dhwang": "Thanks @thgreasi .\nJust want to add that sessionStorage survives page reload, unlike what @michielbdejong said\nQuote from https://developer.mozilla.org/en-US/docs/Web/API/Window/sessionStorage\n\nwhile data stored in localStorage has no expiration set, data stored in sessionStorage gets cleared when the page session ends. A page session lasts for as long as the browser is open and survives over page reloads and restores.. \n",
    "fwenzel": "DANG IT you beat me by 5 minutes\n. Cordova is an interesting use case because I seem to recall they wrap WebSQL for their storage API. Which means it'll never\u2122 exist for Cordova + Firefox OS unless they change that API. Is \"Cordova-based WebSQL\" another storage adapter then?\n. Oh, I think I misunderstood you at first.\n. fwiw, websql obviously also supports bulk get.\n. Looks like it passed now, does that turn your r into an r\u21af?\n. uh?\n. I love the idea of a service that builds from a commit hook on master and commits the build artifact to gh-pages; though that'd result in a lot of commits, potentially (and you don't want to build if Travis fails). Don't get sucked into building another Travis though ;)\nAnd yeah, I'm with Matt on avoiding to commit build artifacts to master. Even though some projects (such as Brick) do.\n. This might actually be the same as #28 indeed. I do agree base64 makes more sense than stringify for these. Now, base64 inflates size by 1/3, so potentially a different encoding is better, but either way, it'd be a good start at storing blobs.\n. Good point, @jokeyrhyme . This Issue makes sense, but appears to be a very rare edge case. After all:\n- the user would have to use a platform without IndexedDB\n- the app would store things in IndexedDB that is more than a cache for server-side data\n- the user upgrades their platform, keeping their profile (i.e., they are NOT changing browsers)\nWhat browser/platforms recently added indexeddb?\n. http://modern.ie/en-us/virtualization-tools#downloads\nBest Thing Ever\u2122 for testing IE versions on different versions of Windows.\n. Don't want to get you into yak shaving here, but maybe that's a feature jshint should be able to have upstream? Likewise, it could flag if(bool) { since if is not a function.\n. Fun fact, it's different from jshint's own coding style. http://www.jshint.com/hack/\nRegardless, I meant filing an upstream issue first, potentially actually fixing it second. Thus, limited shaving of the yak\n. @potch would probably suggest gulp as well; maybe he can enlighten us with what he likes about it\n. applause!\n. Oooh. Interesting. Looks like an easy fix, though worth a comment so it doesn't sneak back in.\n. Sweet\n. sweet\n. Wow, sweet PR, @thisandagain ! I'll need to make sure to high-five you at the office next time ;)\n. Wooo awesome Open Source citizen high 5!\n. +1 on the \"don't explode\".\nThat said, it will be interesting to answer what it should do. Node does not ship with indexeddb does it? In that case I figure LF would at least need to ship with one meaningful adapter out of the box that throwing data at would make sense?\n. nice!\n. Interesting that websql actually uses that as the key here. I usually rename that column to not cause any mess with the parentheses.\n. Uh, does clear() ever not work?\n. Do you use self-closing tags in HTML5?\n. Nice set of tests!\n. versions of Cordova, or versions of Android? Not Cordova's fault.\n. ",
    "yoshuawuyts": "Yeah, that would be great. I\u00b4m trying to get Backbone working with Localforage and so far the tests have been the best help I can get...\n. :+1: Awesome!\n. Getting an Uncaught Error: A \"url\" property or function must be specified when running the example, anyone else got this?\n. Yeah, just pulled it in. Have you tried adding items in the Todo box?\n. Same here. Running the example on http://localhost:3000/examples/backbone.html, might that be the issue?\n. Okay, part of the error is that collection.add doesn\u00b4t work. When using collection.create I still get the error, but at least my indexDB gets updated. Seems like I was experiencing symptoms from two different errors. Curious what\u00b4s still causing the error to throw though.\n. It also appears that setting sync: Backbone.localforage.sync('MyOfflineStore') on collections doesn\u00b4t work. It only actually pushes something to IndexDB if I set it on my models, it throws an error if set on a collection. I think that is the same error that happened with your example Backbone implementation, and also the reason that my DB was updating while still saving data (forgot to clear).\nHope this helps!\n. Yep, just running the bare examples. No errors get thrown until I try to add the sync method to a Collection (as displayed in the provided example). Also I'm not using any type of arcane setup, so I'm really wondering why it isn't working for me.\n. When running the Backbone example in another browser (Midori, Webkit based) I\u00b4m getting this:\nbackbone.localforage.js:161TypeError: 'undefined' is not a constructor (evaluating 'new Promise')\nbackbone.js:1569Error: A \"url\" property or function must be specified\nIs this of any help?\n. Great to hear!\n. Why are you testing the examples? Examples should be there for understanding the application, not to run tests on. Forgive me if I assumed wrong, but maybe this should be separated more strictly from the tests.\n. You could just mirror the functionality in the examples in your tests. That way the examples are just for documentation purposes while the tests actually test the things. \nIf tests and examples are just going to be complete duplicates, why not just remove the examples and refer them to your tests instead. (Obviously that's not a good idea, but I hope it illustrates my point.)\n. ",
    "magalhas": "I can do something as soon as I find some time.\n. If anyone feels that the example should showcase full CRUD operations let me know. For the time being it's just create and read.\n. Just tested it out, it's working fine. Is your repo updated?\n. Yes. That's the only possible test. Also I'm using Chrome.\n. Sorry can't help any further. I hope someone else can confirm this bug.\n. I did a PR fixing the example. Yesterday while I was working on the nodejs/browserify module pattern for backbone.localforage I noticed it wasn't working anymore.\n. It would be even more awesome to support MongoDB like queries.\n. I envision this as having the option of running in two modes: static, as it works now, and by using a constructor, which sets a namespace to use localForage into.\n. I'm not an Angular user though by looking at your source code I think you should try to use UMD.\n. I had no clue. Sorry about that :)\n. Well this ressembles my suggestion of having Backbone adapter on a different repo as well. Lets be coherent and whatever it's decided lets do it for all the adapters.\n. Libraries that implement promises on the browser like Q expect a node style callback. I like the approach and also works as expected by other libraries. Thumbs up for the change.\n. Having callback(error, value) doesn't break that interface. Check Q documentation.\n. In the future it would be nice to have a way of having both syncs methods working under the same model/collection, so for instance we could save things offline and whenever desired send the model to the services.\n. I would have coded it but I'm not used to work with casper and coffeescript. The test would consist on having a Backbone.Model/collection with a url (no offlineStore) and spy on xhr.\n. Not sure, but since you're specifying .min requirejs may assume that .min is the file extension. Try require(['localforage.min.js'], though the config approach is a better one imo.\n. Oh sorry, didn't notice that your console.log was being executed. But this appears to be a requirejs bug and not a problem with localforage.\n. As said above, an anonimous define will fix the issue. I'll make a PR when I have some time if no one dibbs on that.\n. It would be awesome to go for a javascript test solution so that people like me aren't scared of coding the tests. Not that I can't code in coffeescript, but personally I dislike it. Also the rest of the source code is plain javascript. Also, what about going for a Grunt build/test runner approach?\n. You mean storing actual instances? That's not easy to implement, at least without increasing the code size quite a bit. Just make sure your classes can be read from JSON and you'll overcome this.\n. Where would your secret keys be stored?\n. I feel that adding an extra dependency (to support cryptography) would probably be an overkill for most of the users that don't need that feature. Maybe this would be better if it could work as a plugin out of the core localForage (or something like that).\n. I like that as well.\n. I'll fix the Backbone example according to this changes.\n. I really think you have something wrong on your code/workspace/w/e. Everything works fine for me on different environments. Also unit tests are passing. Did you test on a different browser?\n. Use Windows Powershell to execute the build script, it works. Though this will likely change in a near future :)\n. Also it seems latest changes are still not available on NPM.\n. Well since we're at version 0 we shouldn't be afraid of releasing versions :)\nConcerning require.config, that's for AMD, nodejs/browserify/commonjs use a different API. I'll make a PR. The top of backbone.localforage should look somethig like:\njs\n(function (root, factory) {\n  if (typeof define === 'function' && define.amd)\n    define(['localforage', 'backbone', 'underscore'], factory);\n  else if (typeof module !== 'undefined') {\n    var localforage = require('localforage');\n    var Backbone = require('backbone');\n    var _ = require('underscore');\n    module.exports = factory(localforage, Backbone, _);\n  } else\n    factory(root.localforage, root.Backbone, root._);\n}(this, function (localforage, Backbone, _) {\n...\n})\nAlso I'm wondering. backbone.localforage should be a different NPM package than localforage. What do you feel about this?\n. Are you interested in changing the build process to Grunt? If you are I can help on it. I like the require('localforage').backbone.\n. The problem I find with require('localforage').backbone is only one. Isn't the backbone adapter supposed to be optional?\n. There's no way to do that on npm afaik. The closest approach I'm pulling through is:\n``` js\nvar localforageSync = require('localforage/src/adapters/backbone').sync;\nmodule.exports = Backbone.Model.extend({\n  sync: localforageSync('Lyrics')\n});\n```\n. require('localforage/dist/backbone.localforage') would work as well. Though it's ugly.\n. Please read what I've described on the PR.\n. Well PR #87 doesn't mess with build tasks, but I'm experienced with Grunt.js so I could refactor the build process easily. Though I don't think that relying on shell scripts is good (for instance I can't run some stuff on my Windows machine)\n. Configuration vs coding. I like both, but I don't think that's not a decision up for me to make.\n. @tofumatt grunt or gulp :)?\n. I'll start today working on the PR. Meanwhile please review my other two PRs.\n. This isn't yet finished though because on localforage.js there's this code:\n``` js\nelse if (moduleType === MODULE_TYPE_EXPORT) {\n                    localForage._extend(require('./' + driverName));\n                if (callback) {\n                    callback(localForage);\n                }\n\n                resolve(localForage);\n\n}\n```\nThe require above is not a good choice browserify wise. I'll work on it.\n. Everything's working.\n. I would like to have feedback on this and also discuss about the ugly require paths.\n. Done\n. Do you have any opinion concerning the paths? As I stated in the PR, the only way to get backbone.localforage through Node/Browserify is:\njs\nvar sync = require('localforage/src/adapters/backbone').sync;\nMoving adapters and other subfolders to the root level would make it prettier:\njs\nvar sync = require('localforage/adapters/backbone').sync;\nAfaik there's no way to do it only on package.json :-1: \n. I think we could expose things in the root during NPM build process and then cleanup after the package is published. We can also go for your first suggestion though it'll increase localforage file size (adapter method and we don't know what we'll want to expose more in the future).\n. Regarding requirejs.config, that doesn't exist in Browserify/Node.js world.\n. Tried my luck with grunt-casper and grunt-casperjs, no luck.\n. I'll work on it on the next couple of hours. Any issue regarding the node version on travis to force newer NPM? Or do you want me to change deps version to the former style (~ instead of ^)?\n. Done. Though since I force pushed over my last commit travis build wasn't triggered :-1: \n. Give me a couple of minutes.\n. Done\n. Other deps are relying on ^ deps. What about going newer version like before? Else we'll have to downgrade some of our deps.\n. Build is green :+1: \n. Yes it works once, but when you try to write the second time with the same collection it won't work.\nFirst pass it stores:\njs\n{\n myAttribute: myValue \n}\nSecond pass it stores:\njs\n{\n  // other Backbone.Model properties hanging around here\n  attributes: {\n    myAttribue: myValue\n  }\n  // other Backbone.Model properties hanging around here\n}\n. I'm going to try on a Windows machine and see if everything is running.\n. I'm having the same error as before.\nRunning \"casper:indexedDB\" (casper) task\nFatal error: spawn ENOENT\n. I don't have anything installed besides deps installed through npm.\n. Phantomjs is installed through NPM. Don't know about slimer.\n. For instance I run Jasmine+Phantom all the time in my windows machine, never had an issue. This seems to me to be grunt-casper related. Or any external lib I'm missing.\n. Yes it's also being installed through NPM.\n. I also have that present, but it's not the one being used. The one being used is inside node_modules\\grunt-casper\\node_modules\\casperjs\\bin\n. From grunt-casper github one day ago:\n\nOh Windows.. Let me look into this in the next couple of nights and figure out a way to make it work for all platforms.\nThanks for finding this.\n. Just tell me if you want me to run new tests on Windows\n. Besides having to grunt test --force to bypass slimerjs problem, all tests are running well with phantomjs.\n. Well imo windows users don't lose anything (before this branch I wasn't even able to run phantomjs tests). This will also able us to delete binaries that are being distributed through the repo (I think, not sure if you were distributing phantom). If everything is working fine on Mac OS then I say yes to the merge.\n\nIs slimerjs working on Mac/Unix based systems? \n. Maybe create a small note somewhere stating that windows users should run grunt test --force in order to run the task.\n. This won't be an issue after #102 is done so I'm going to close this.\n. New GitHub repositories will have to be created. Should they stay under mozilla organization?\n. This will also fix #96 :+1: \n. Just create localForage-backbone repo and we can start working on it. Do you want to do any major change? Like for instance using Jasmine instead of Casper + CoffeScript for tests (I'm speaking regarding the backbone adapter). If you want any help I can work on a PR.\n. I agree. Adapters tests shouldn't care about browser drivers because that's responsibility of localForage. Adapters should have no issues if testing only through phantomjs. Let me know when you have the repo ready.\n. I'll create a Jasmine + Phantomjs setup through grunt-contrib-jasmine with basic unit tests (CRUD operations). We'll scale from there with more complex scenarios whenever needed.\n. I think all kind of package managers should be supported as long as they're widely used.\n. Do you have something in mind?\n. Even exporting everything would be troublesome. Should the format be human readable? If so handling blobs will be troublesome. I can imagine an API but you're probably right, each app will want to have their own format and probably specific details about the exported/imported data -- this kind of feature could probably be covered by a third party plugin if someone ever needs it. I was just wondering about a possible localForage + node-webkit application and this passed through my head.\n. Testing against requirejs, browserify, component, etc isn't hard to achieve, we should really make a little effort towards it.\n. Or/and CDNJS\n. CDNJS is automated after the first PR to the repository\n. (model.collection && model.collection.offlineStore) resolves to undefined if model.collection or model.collection.offlineStore are undefined. Else it resolves to model.collection.offlineStore.\n. It's needed to install grunt-cli to run grunt on travis.\n. Had some problems due to new NPM dependency notation (^ instead of ~ at version start). That's the way I found to use newer version of NPM on Travis.\n. Yes, my typo. Though that should change to a single grunt call when tests get implemented through it.\n. Phantomjs works well?\n. No, the factory is backbone.localforage function passed as second argument on line 37.\n. Well it's a pattern I've seen on Backbone and Underscore and I tend to use it on my own libs. I don't find it intrusive and since it's a wrapper you can also prepend/append it during the build process.\n. This should work though I'm only 90% sure.\n. ",
    "timoxley": "\nI... don't really get what you're saying, other than they're both client-side storage libraries.\n\nIf this project's api implemented the abstract-leveldown api instead of its own custom not-quite-localStorage api, this could be a simple wrapper around levelup, which you'll notice has nearly the exact same public api:\naccess:\njs\nlocalStorage.getItem('key', fn);\nlevel.get('key', fn);\ninserts:\njs\nlocalStorage.setItem('key', JSON.stringify('value'), fn);\nlevel.put('key', JSON.stringify('value'), fn);\ndeletes:\njs\nlocalStorage.removeItem('key', fn);\nlevel.del('key', fn);\n\nlevel.js seems more focused on IndexedDB/levelDB\n\nIndexedDB is just an implementation detail.\n\nlocalforage values compaitibility over what's best.\n\nI guess I'm suggesting if you're going to all the bother of making a localStorage-kinda shim, with a public api that's almost exactly the same as the levelup api, then maybe it makes sense to combine forces and invest that energy into something that does the exact same thing but also benefits from compatibility with an ecosystem, rather than just going it alone.\nI know it's a bit of a pivot, just wanted to make sure it was on your radar. Food for thought.\n. ",
    "nolanlawson": "Having a LevelUP shim over localForage would be pretty neat. I'd be interested to try building PouchDB with localForage as the backend. :)\nIf you'd like to get started, here's the API for LevelUP. And for a *DOWN project with working browser tests that pass the Abstract LevelDOWN suite in Testling, you can check out localstorage-down.\n. FWIW PouchDB also dropped level.js support in v5 (it was available via an add-on adapter).\n. Yeah. In Pouch we deal with this in three ways:\nChrome 36: detect lack of blob support, store as base 64.\nChrome 37: detect data URI bug, store as base 64.\nChrome 38+: store as blob (like Firefox and IE)\n\nSent from my Android device. Please excuse my brevity.\nOn Sep 28, 2014 12:58 AM, \"David Frank\" notifications@github.com wrote:\n\nhttp://updates.html5rocks.com/2014/07/Blob-support-for-IndexedDB-landed-on-Chrome-Dev\nthat html5rocks article does include a way to try/catch blob storage and\nfallback to data url\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/mozilla/localForage/issues/241#issuecomment-57075126.\n. @sheppard Yeah sorry, I did not follow up with the localForage fix after reporting this. But basically our \"blob support\" check looks like this now: https://github.com/pouchdb/pouchdb/blob/1093c845bac9550baf8b0394d59fed3e14efe185/lib/adapters/idb/idb-blob-support.js\n\nReason being, there were actually more bugs that popped up since v38, and blobs are only reeeeaaally supported in v43 (see state of binary data in the browser for the gory details).\n. Found some time tonight, so here we go: https://github.com/mozilla/localForage/pull/382 :smiley:\nIn retrospect, I'm kind of flabbergasted at the number of hacks necessary to get blobs to work in IndexedDB. Might make more sense to just take that _checkBlobSupport() function and use it to downgrade to WebSQL... :expressionless: \n. this has been fixed for awhile\n. This is actually something that's not technically feasible right now, at least with IndexedDB and WebSQL. It does work with LocalStorage, so as a hacky workaround you can actually just toggle a key on LocalStorage whenever something changes, and then LocalStorage emits an event, which means you can also communicate across tab boundaries this way.\nOTOH you may want to wait, because they're actually in the process of adding event listeners to the IDB spec. There's a draft proposal somewhere, but I can't seem to find the link now, but @drufball would know where to find it.\n. We wrote an isolated test you can use to detect the broken functionality in iOS 8 and Safari 7.1. It detects the issue with being unable to open two object stores at once, although not the issue of keys overwriting each other.\nUnfortunately in PouchDB we just fell back to user agent sniffing, because we needed a synchronous test rather than an async one.\n. Yeah. FWIW we use\njs\nvar isSafari = typeof openDatabase !== 'undefined' &&\n    /Safari/.test(navigator.userAgent) &&\n    !/Chrome/.test(navigator.userAgent)\nThat openDatabase test is because IE Mobile now masquerades as Safari in their user agent.\n. same, seems it's not fixed on 8.1\n. I haven't tested out the One M8. If you could test it out, that would be splendid. :) We haven't put this change in a PouchDB release yet, so it would be good to get some second opinions before we commit to something that may or may not work for all these wonky Android phones.\n. FWIW I only tested on the S3 and HTC One. And both have recently gotten OTA updates to Android 4.4, so hopefully this bug won't be quite so severe soon.\n. Last I checked, they are still are using UIWebView because there are other problems with WKWebView, e.g. that it can only load local files from the temp directory.\n. So for any first-timers who would like to fix this, the fix is to take the function that determines whether WebSQL is supported and make it smarter than just checking for window.openDatabase. Instead, you actually need to run openDatabase() and then do a try/catch to see if it fails. Probably it should be something like:\njs\ntry {\n  window.openDatabase('test-websql-supported', '1.0', '', 1);\n  return true;\n} catch (e) {\n  return false;\n}\nThen once we detect that WebSQL is not supported on iOS WKWebView, localforage should automatically fall back to LocalStorage.\n. To test that this is working, you can use an iOS device with Chrome/Firefox/Opera for iOS, since they all use WKWebView now (sadly).\n. Hi @adrbin42, I'm happy to provide guidance, although it might be easier via chat than GitHub. Can you hop on the Slack channel via http://hood.ie/chat, then the channel #welcome2os? @gr2m should be able to help you get on Slack if you get stuck. Then you can notify me as @nolanlawson.\n. BTW we are going to do this in the next release of PouchDB, so now there's a ready-made function if you'd like to borrow it: https://github.com/pouchdb/pouchdb/blob/443e18b3915d405201b8de25fe9a86bdc13ddd69/packages/pouchdb-adapter-websql/src/valid.js#L16-L50\n. That's bizarre; all our tests are still passing in IE10. Was it in IE11 that you saw this @Evgenus ?\n. Oh wait, we just check the truthiness of IDBKeyRange, which is why this was working. Sorry for giving you a shoddy commit @tofumatt >_<\n. >  think in the future (2.0?) we should just scrap that version entirely. I don\u2019t think the polyfill is that big of a size hit (14kB) and minified it\u2019s only 5kB.\n+1 to this, especially if we switch to lie or to native-promise-only then the size of the Promise polyfill will be really negligible (between 1KB and 2KB min+gz, i.e. nothing).\n. Nevermind, managed to fix the blob type issue for LocalStorage as well. That test is now uncommented, passes in old Chrome as well as PhantomJS.\nMy fix for the blob serializer for LocalStorage is a bit hacky, but I think it's required if we want to maintain backwards compatibility. See my changes to serializer.js and let me know if they jive for you.\n. ~~Shoot, just realized I didn't fix https://github.com/mozilla/localForage/pull/381, though. Probably that makeBlob shim should go in both serializer.js and indexeddb.js (or I should figure out how you're requiring stuff; didn't quite get it tbh...).~~ No biggie, can't win 'em all. This commit at least works in Android 4.4; #381 would add support for 4.0-4.3.\n. Confirmed 100% in Kitkat emulator too.\n. Looks like Travis is failing due to an intermittent npm error (Warning: Cannot find module 'esprima'). I'll re-push to re-test.\n. @tofumatt Yeah, I apologize for that, but it was late at night and I was just happy that the tests were passing. :)\nAs for the require setup, in PouchDB anyway we converted everything to browserify about a year ago and haven't looked back. It makes for a more complicated build process, but it's really nice to just write for one module system. I also believe derequire is the magic that makes it work for RequireJS as well, but I'm not sure since I've never used RequireJS. :stuck_out_tongue:\nSo our build command becomes:\nbrowserify index.js | derequire | es3ify > output.js\n(es3ify converts stuff like promise.catch to promise['catch'])\nI was thinking of helping rewrite LocalForage to use a similar build process, but I didn't want to be presumptuous in case you liked your current setup. But if you'd like, I could try to help. :smiley: \n. For a lib like LocalForage, which is already under 10KB, I agree that dynamic module loading is not super important. :) As for ES6, yeah, there is babelify, which you can use as a browserify transform for ES6 code.\n. babelify is just a shortcut to tell browserify to use babel :)\n. Safari now supports IDB in Web Workers as of Safari 10. In Pouch, we've been evaluating the new WebKit IDB and it looks pretty good, although quite a bit slower than WebSQL. Needs more investigation though. I'm still waiting for someone to write the big \"Is Safari IndexedDB ready yet?\" blog post. \ud83d\ude1b \n. Nope, I've never run into this bug before, but if it really is a MS bug, it would be worthwhile to file it on them. :) I've found they're pretty responsive at http://connect.microsoft.com/, although sadly none of the bugs I've filed have been fixed yet (not even in Edge...). :/\n. Thanks for filing the bug on Edge; hopefully someone at MS can look into this!\n. cool, I'm installing localforage from npm, version 1.2.10. any chance of a publish?\n. Is this still a WIP? I like the idea of having a test.js file instead of multiple HTML pages.\nI'd also probably recommend Zuul instead of Karma since it offers a very low-friction way of running the tests in Saucelabs. Although karma also has karma-sauce-launcher.\n. Yeah, it's super easy to set up; you just define a .zuul.yml and then let Zuul run your Mocha tests in Saucelabs (example: blob-util).\nThat said, it looks like Karma solves the same set of problems, so it might not be worth rewriting this PR.\n. Safari has a very unpredictable way of calculating the total available size. If you create too many databases with different names (even if they are very small, or don't have any data at all!) eventually Safari will complain.\nIf you are only running into this in your dev environment, then the best bet is to probably just clear all Safari data and start over. (See \"Remove all website data...\" in the Safari settings.)\n. I think I may have figured out your issue; can you provide feedback? http://stackoverflow.com/questions/33973634/localforage-finds-data-in-chrome-not-in-firefox/36669583#36669583\n. We've had similar problems with PouchDB and TypeScript support recently. Maybe this can help: https://github.com/nolanlawson/pouchdb-ionic-2-typescript-demo\nThe trick seems to be import * as LocalForage from 'localforage'; apparently just doing import LocalForage from 'localforage' does not work in TypeScript's importer.\n. Hm, that's odd, PouchDB has a CJS export as well, but you can still import * as PouchDB. It might be because we have a jsnext:main as well; I'm not sure.\nAlso for the typings, it shouldn't matter how you import it, although TBH I have no idea what TypeScript is doing here or what the best approach is.\nDid you try var localforage = require('localforage') or import localforage = require('localforage')? TypeScript supports both (the latter being a TS-specific thing apparently).\n. You'll probably also discover that this is different in Safari as well, since in that case it's WebSQL, thus storing JSON, thus no way to distinguish between null/undefined. So since LocalForage is supposed to work the same in WebSQL and LocalStorage as well, I doubt this is something we can actually support.\nFWIW in PouchDB we basically took the policy of: if you cannot JSON.parse(JSON.stringify(obj)) and get back the same obj, then you need to change the object you are trying to store, or accept undefined/variable behavior. This turns out to be much easier than trying to polyfill every subtle quirk of IndexedDB object cloning across browsers.\n. Is your snapshots object actually cloneable? One way you can check is to see if you can do JSON.stringify(snapshots). If it contains circular references or custom classes or other fancy stuff, then IndexedDB cannot store it.\n. Hm, well in that case it could be that it's still not cloneable. Are you sure that JSON.parse(JSON.stringify(snapshots)) gives you exactly the same object back? Another way to test is to call a postMessage() on an iframe/webworker. I doubt it's because the object is too big.\nWhat browser is this?\n. _.isEqual(JSON.parse(JSON.stringify(snapshots)), snapshots); might not be telling you the whole story. stringify might be removing stuff that IndexedDB cannot store (e.g. custom classes, functions).\nIf you could post a test to reproduce, that would be super helpful. :)\n. Yeah, that's probably exactly why it's not being stored in IndexedDB correctly. In general, you should only store JSON.stringifyable data in LocalForage. Even some slightly-tricky stuff that works in IndexedDB (like Dates) won't work in WebSQL and LocalStorage, so you may find that e.g. your tests pass in Chrome but are broken in Safari.\nIn general I'd say that unless your object is exactly the same when you do JSON.parse(JSON.stringify(myObject)), then don't store it in LocalForage (or any browser storage engine).\n. Cool, glad to know you agree. :) I'm happy to take up this issue now unless you want to, although I'm not so sure about how I would fix #192. (FWIW in PouchDB we also tried to get away from Jekyll/Ruby but ultimately gave up because Jekyll is so much more advanced than anything else we tried :stuck_out_tongue: )\n. I'm already working on this, FWIW (\"licking the cookie,\" so to speak ;))\n. :+1: for removing the callback API. We'll probably do the same in PouchDB at some point.\n. BTW as a suggestion for migrating the docs after #536 - you could change the callback tab to an async function tab for extra-futuristic-js goodness. :)\n. I also removed most of the promise/callback explanation from the README, directing people to the docs instead.\nSince the old js/coffee switch was kept in LocalStorage, I changed the LocalStorage key. The effect is that your previous js/coffee decision doesn't matter anymore; promises are the new default, although you can switch to callbacks if you really like.\nNote that the even/odd switch is a bit hacky, but I couldn't think of a better way to do this without directly injecting HTML in the docs as opposed to markdown.\nAlso note that I added .catch() everywhere in the docs. I figure it's better to insulate people from uncaught errors at the expense of a little noisiness in the docs. (We did the same in the Pouch docs FWIW).\n\n. > Why there is change on the dist js files?\nNo idea. Feel free to remove that on the PR when you merge, though. But yeah, I suspect it's because of a dep update.\n. OK, removed the dist files and updated the README as requested.\n. Ping @thgreasi @tofumatt, can we get this merged to master/gh-pages? I really think it'd be great to have better docs published for LocalForage, so we can show off how simple and easy-to-use the API is. :smiley:\n. Oh OK no rush. :)\n. Started looking into it in https://github.com/mozilla/localForage/pull/538, but there may be more work in there than I expected. :stuck_out_tongue:\n. Tests are failing due to some kind of problem with PhantomJS/promises in the browser tests. Kinda hard to debug since PhantomJS 1.x is so old.\n. OK, finally got all the tests passing (npm t works, using Phantom 1.x). The only thing I had to remove were the tests for the \"unbundled\" API, but the code comments said that that hasn't been supported since 1.3 anyway. I also think it would be pretty difficult to unbundle this if we switch to ES6 modules.\n. I have some other ideas for reducing build size (e.g. removing the custom classes and using oldschool ES5 instead; Babel adds a lot of bloat), but I'll save that for a later day, since this PR is already massive. :stuck_out_tongue: \n. Interesting - it looks like the \"additional cruft\" is a GZip artifact. If you discount GZIp, then this PR reduces filesize across the board, including nopromises, where the lie/promise distinction won't make a difference.\n75237   /tmp/new_dist/localforage.js\n25147   /tmp/new_dist/localforage.min.js\n67223   /tmp/new_dist/localforage.nopromises.js\n21369   /tmp/new_dist/localforage.nopromises.min.js\n99978   /tmp/old_dist/localforage.js\n27529   /tmp/old_dist/localforage.min.js\n80972   /tmp/old_dist/localforage.nopromises.js\n22344   /tmp/old_dist/localforage.nopromises.min.js\nMy hunch is that it's because of Rollup hoisting everything up to one scope, compared to the repeated code across the three adapters. GZip is able to compress that better if it's not in a single scope, because then the uglify variables end up being exactly the same between all adapters. I think we can fix this in the future by just moving more logic out of those adapters and into util functions.\n. I don't have a preference one way or the other for Browserify/Webpack; you may indeed be able to get a smaller size, because I believe Browserify's header is a bit bigger than Webpack's.\nThere is indeed a Babel Rollup plugin, so you could give that a shot: https://github.com/rollup/rollup-plugin-babel. However note that you will probably have to run Rolup as a pre-Webpack step, because this is a Babel plugin for Rollup, not a Rollup plugin for Babel.\n. Looks like another option is to just use Rollup by itself. Apparently it has enough plugins that this can be done without Webpack/Browserify.\n. OK, I made an effort to use pure Rollup instead of either Webpack or Browserify, but somehow the UMD build isn't working (window.localforage not found). Also I strongly unrecommend grunt-rollup, since it just makes it more difficult to use Rolup's API and doesn't seem to work for multi-task. Feel free to pick up where I left off, if you want: https://github.com/nolanlawson/localForage/tree/537-rollup\nNB: the Rollup build actually ends up being exactly the same size as the Rollupify+Browserify build. This starts to suggest to me that a Webpack build wouldn't be any smaller. So personally I'm happy with this PR as-is, but feel free to explore other avenues.\n. After some trial-and-error, I realized that lie actually only works with Browserify. Or rather, it only gives you the super tiny package size with Browserify, because it has a bunch of Browserify transforms that strip out the extra data.\nI'm working on a Browserify-agnostic version of lie, but I don't have anything concrete written yet, so I'll have to re-propose this PR as-is.\n. OK, making progress on removing Browserify/Webpack entirely for the build (they'll only be tested in the explicit Browserify/Webpack tests). Just a few bugs remaining, but progress! (See https://github.com/rollup/rollup-plugin-node-resolve/issues/8#issuecomment-193859166 and this branch).\n. It's really the same change; I can't easily split it up into two.\nThe refactor involved a switch to ES6 modules. The build system change incorporated Rollup, which bundles ES6 modules.\nAs for your webpack tests, they're still enabled after this PR, so everything's good, right?\n. OK, I've updated it to use the derequire CLI directly.\nAs one small suggestion, I note that the difference between the \"nopromises\" build and the regular build has dropped to 1130 bytes after gzip+min (7677 vs 6547), so it may make sense to deprecate the \"nopromises\" build at some point.\n. Testing an old PhantomJS is kinda nice in some ways, because it confirms that your implementation works against old WebSQL. :) I've seen bugs that only exist in PhantomJS 1.x but not modern Safari or Chrome WebSQL.\n. Rebased and fixed the conflict. Happy to help out with this lib you need more work to merge this PR.\n. > Do we need to import Promises in src/utils/promise.js?\nThe point of that file is to isolate our Promise usage to one single file. Then building the promises/nopromises version is as simple as adding the browserify -x lie flag. If Promise is available as a global function, we use that, otherwise we fall back to lie (or fall back to nothing in the case of nopromises.js).\n\nIs there a reason that es6-promise/promise.js is included in all test pages?\n\nI just double-checked, and it turns out I actually introduced a subtle change with this PR \u2013 localforage.js no longer mutates window.Promise to polyfill; it merely contains its own promise shim. Hence the tests started failing (because they reference Promise.all(), Promise.resolve(), etc.), so I added the polyfill just for the tests. (lie does not require any globals.)\nTechnically that's a breaking change, so I'm not sure what direction y'all want to go in. My preference would be to remove the window.Promise mutation from localforage.js and also remove nopromises.js while we're at it, since lie is so small that the nopromises version is nearly pointless. However if you want to keep the current behavior, you can just require('lie/polyfill') instead of require('lie'), and then it's safe to remove the es6-promise stuff from the test HTML files. Here's an alternative PR that does just that: #553.\n\n@nolanlawson OMG thank you this is pretty amazing. You rock.\n\n:+1: You two rock @tofumatt & @thgreasi. LocalForage is amazing, and I recommend it to lots of PouchDB users who I see suffering because PouchDB is overkill for their use case. Love to see LocalForage continuing to be maintained and do well. :)\n. Since Safari doesn't support any of LocalStorage/WebSQL/IndexedDB in a worker, unfortunately this is not possible given the current LocalForage implementation.\nMy advice is to avoid Web Workers in Safari if you need to use IndexedDB/WebSQL. I solved this same problem in my Pokedex.org app using pseudo-worker. I.e. you can UA-sniff for Safari (or test if typeof indexedDB === 'undefined' in a worker) and then sub in pseudo-worker.\n. Does it only occur on Chrome, or does it occur on Firefox and IE too? If it's only on Chrome, then it's very likely a browser bug and should probably be filed on Chromium.\n. Well, there's a PR open that shrinks the bundle size by .5KB (down to 7.7KB). :wink: https://github.com/mozilla/localForage/pull/538\nThat said, I'd argue that the current file size (<10KB) is already darn small. I think making it more granular than that is really just splitting hairs. react-dom alone is 55KB; we're already well under that.\nFurthermore, the current landscape of browser storage makes it unfeasible (in my opinion) to split up the adapters and allow users to pick their own. There are subtleties in the usability of e.g. IndexedDB on WKWebView in Chrome for iOS that mean the situation is enormously complicated, and so expecting users to \"choose their own\" is an invitation to have LocalForage break in an odd browser, all to save ~2KB or so.\n. @shubhamsizzles I tend to agree with @tofumatt that this library should remain drop-in and easy-to-use. One of the things scaring people away from browser storage (IMO) is that it's so easy to write something that doesn't work in browser X. LocalForage solves that problem.\nI'd say if you're comfortable defining your own adapter system and managing your own browser support, you may want to look into something very lite like https://github.com/jakearchibald/indexeddb-promised and then using https://github.com/axemclion/IndexedDBShim if you need WebSQL support as well.\n@thgreasi Indeed, once the ES6 modules are in, you can expose a jsnext:main and then allows folks to \"build your own\" localforage using simple imports. :) Then tools like Rollup and Webpack 2 will tree-shake automatically. Still, I think it's a niche use case.\n. I suggest revisiting this once Node has figured out how it wants to handle ES6 modules (.mjs? jsnext:main?) and then see how easy it would be to export a modular LocalForage. Publishing as separate modules is probably pretty bonkers for a library that is only 7.6KB (each adapter seems to be about 2KB, don't see how the promise/callback stuff could easily be extracted out).\nI'll also point out that while, yes, Lodash and React do factor out their codebase to an extreme amount, it's because their codebases are very large. By my measure, lodash.map is 5664 bytes, react-dom is 60794 bytes, whereas the master branch of LocalForage is 7685 bytes.\n. Nice post on why multi-package monorepos are really hard to achieve: https://medium.com/@jonathanewerner/thoughts-about-package-modularization-d9631f7a41f1\n. Actually this is a browser storage security issue, and in fact none of LocalStorage/WebSQL/IndexedDB can be shared across subdomains. They are part of the \"same origin policy\" which sandboxes data. This is to prevent malicious sites from e.g. malicious.geocities.com spying on data from another site like innocent.geocities.com.\nSo the browser actually does not allow you to do this at all.\n. > Thanks but then how can I share a session across my subdomain?\nI believe the solution to that (e.g. what Google does) is to use cookies, because I believe you can specify cookies to work across subdomains. But I admit I'm not sure. In any case, I don't think localStorage/IndexedDB is the right solution for session management.\n. Yeah, unfortunately for this use-case, storage across subdomains is not possible in any browser and is not spec'ed to ever be added. So this is something LocalForage cannot do. Whereas traditional cookie session management can be scoped to multiple subdomains.\n. I still sorta feel like it would make the most sense to just modify the existing adapter to automatically use the SQLite Plugin. It's really a one-liner (you just check for window.sqlitePlugin; if it's not there, don't use it), and I think it would be a nice feature for Cordova users so that they could get up and running really easily with LocalForage without too much configuration.\n. Hey, I just noticed that custom driver! Is there a difference between those two SQLite Plugin drivers - the one you wrote and the one by @Ecostack? In any case, it looks like that does indeed solve my issue, and either one of them would also be compatible with SQLite Plugin 2 (fwiw). I'll close this issue.\n. > Does it support the object notation invocation for the openDatabase() method?\nYes it does, although it's much more lax than SQLite Plugin 1. All you need to do is pass in {name:'myname'}; any other options (such as location) are ignored.\nThat said, it also fully supports the normal WebSQL API, so you can also just pass in whatever you would have passed in to window.openDatabase(). (Not the case with SQLite Plugin 1; you have to specify location as of the most recent version.)\n. Agree this is a nice feature to have, ideally without needing a custom adapter. It'd be good to double check that this is the best possible implementation, though, since in Node we have more options than just a Local Storage shim.\n. I just took a look at dom-storage, and based on the implementation, I would strongly advise against using it in LocalForage. It advertises itself as mostly designed for unit testing, and that shows in the source.\nNotice that it works by relying on fs.readFileSync/fs.writeFileSync/etc., which is slow and synchronously blocking. For LocalForage to have a good reputation as a storage engine that works well in all environments, this would be a poor choice for a default.\nAs an alternative suggestion, how about:\n1. Writing a custom adapter that uses node-websql via the WebSQL adapter, or that uses level via a custom implementation, then\n2. opening a PR to use that adapter by default in Node and then use the other three adapters in the browser.\nAnother alternative is to just rewrite the existing WebSQL adapter to use node-websql (which does the appropriate \"browser\" switching automatically), in which case the only change to localforage core would be to set the list of adapters to [idb, websql, localstorage] in the browser and [websql] in Node.\n. Sorry, I wasn't trying to make you feel unwelcome. :( I think this PR demonstrates a desire to have localforage run in Node, and we should definitely move in that direction.\n. More explanation for this PR: https://github.com/mozilla/localForage/pull/538#issuecomment-213813380\nSee 5f13325584196357977333a0281c8e36f3a53198 for what exactly changed between the two PRs.\n. @tofumatt - Re-rebased this and the other PR, no worries.\n@thgreasi:\n\nIs there a reason that the ternary check of whether Promises are available or not got removed?\n\nYep, if we're using require('lie/polyfill') rather than require('lie'), then the global Promise object gets mutated automatically and there's no reason for a ternary check.\n\nI'm worried about the nopromise build and how requiring an excluded module (lie/polyfill) would work\n\nIn this case, require('lie/polyfill') becomes a no-op, and then export Promise exports the global Promise object. So it will fail in browsers without Promises, or cases where the user has not provided their own global polyfill, which matches the current behavior.\n. Quick suggestion: instead of writing a whole new adapter, we could also just rewrite the localstorage adapter to use @gr2m 's  humble-localstorage.\nIt automatically switches to in-memory mode when localstorage is unsupported, e.g. in private browsing mode. It's also very smart about detecting private browsing mode, e.g. in weird environments like Safari where localstorage basically acts like /dev/null and you have to test it to see if it's actually storing anything.\n. As a side note, would it be possible to distribute this as a third-party adapter? It seems like exactly the kind of thing that would be more useful as a separate plugin than as something that increases the core size of the library, while adding features that not all LocalForage users would necessarily desire.\n. In PouchDB land, this actually became a big enough problem that we decided to do our own structured cloning for IndexedDB object, e.g. to avoid confusion over what happens to Dates in the different backends (IDB preserves it, WebSQL and LocalStorage don't because everything has to be stringified).\nYou may want to borrow our clone algorithm. I found it was nice, because what people saw when they were testing using IDB in Chrome is what they eventually got using e.g. Safari on iOS.\n. This should be fixed with the next release, because we're using Browserify's definition of the global object instead of our own custom global object.\n. wtf, the \"no promises\" build is specifically supposed to skip lie. that's the whole point.\nI will look into this. it's probably the distinction between lie/polyfill and lie that messed things up, my bad\n. We should polyfill this; might I suggest this blobToBinaryString function from my own blob-util.\nSuggesting we mark this as a \"good first issue\" or as a \"help wanted\" or even \"first timer's only,\" because it should be fairly easy to implement.\n. If you're unfamiliar with promises, you may want to check out my blog post on the subject. As @thgreasi says, you'll need to put removeItem() inside the then() call for setItem(), i.e.:\njs\nindexdb.setItem(\"key\", \"value3\").then(function () {\n  return indexdb.removeItem('key');\n}).then(function() {\n  // done\n}).catch(function(err) {\n  console.log(err);\n});\n. I believe iOS has bugs with retrying. In my experience, the best policy is to just structure your app so that the popup never occurs (which is annoying, I know).\n. Just FYI, IndexedDB and WebSQL do not provide consistent cross browser APIs to get this info. So LocalForage would need to keep the data separately and it wouldn't be backwards compatible. Also the extra WebSQL database counts a lot toward your quota in Safari even if it's very small.\n. Alternatively you could just use Local Storage to store the metadata, but it wouldn't work in a worker.\n. +1 when green.\nAlso long term we may want to use Greenkeeper: https://greenkeeper.io/\n. If you can reproduce, this would be an excellent bug to file on Chromium itself. We have observed the same problem in PouchDB (only happens with Chrome, very sporadic and rarely reproducible).\n. Wow this is an awful bug that slipped through; I'm super sorry about that.\n@tofumatt I don't think this needs an additional test case, because it looks like the bug is causing the indexeddb adapter to do the base64 serialization everywhere, which of course will pass the tests. Testing it would require reaching into IndexedDB and confirming blob vs base64, which will vary from browser to browser.\n. One easy way to do this is to add dist to .gitignore, but then put a \"files\" member in package.json pointing to a list of the files/folders you want to ship to npm, including dist. (A tool like pkgfiles is very handy to see which files will be uploaded to npm.) Then you can use http://npmcdn.com/ 's auto-Bower feature to satisfy Bower users.\nI've been moving to this pattern in most of my projects because managing dist files in Git is such a pain.\n. @thgreasi based on my tests, the WebKit team has fixed all outstanding bugs in IndexedDB in the latest release. I've been hesitant to switch PouchDB yet because it also seems much slower than WebSQL (~30x or more), so I worry that if we switch, people will just struggle to put it back on WebSQL because their app slowed down.\nIt needs more investigation, though. I haven't had time to do a thorough benchmark of WebSQL vs IndexedDB.\n. Related: https://github.com/pouchdb/pouchdb/issues/5572\n. Yes, I didn't mean to remove that. Good catch!\n. the \"no promises\" build is now just a browserify build with exclude: ['lie']\n. derequire is needed in order to have the dist bundle compatible with browserify itself (otherwise it complains when it sees the keyword require)\n. Notice all the ES6 modules; this is gonna be a theme of my PR. Where possible I moved stuff to separate functions and then just imported them.\n. Another change I made in a lot of places is to avoid checking the global object (e.g. global.indexedDB) and instead just check typeof indexedDB !== 'undefined'. I've found that this is less faily for weird environment like NodeWebkit where you can't be sure what the global object is even called. It should also make the code more portable if you do want to switch between Webpack, Browserify, SystemJS, etc.\n. I couldn't figure out how to get window.require('promise') to work as it was working in the old tests, so I figured it was easier to just drop in a promise polyfill for the tests. Notice I only inserted them where the tests themselves relied on window.Promise; lie itself only relies on window.Promise in utils/promise.js, where it prefers the global Promise and then falls back to lie (or falls back to nothing, in the case of nopromises).\n. D'oh. I should have remembered, since we used it in PouchDB too. Will fix.\nIt really ought to be documented in derequire though. I'll open a PR.\n. This is a bit of an unsatisfying pattern, because dist/files (i.e. bundle files) are not typically used for Node dependencies.\nIdeally people should be able to do:\njs\nvar localforage = require('localforage');\nAnd this should \"just work\" in either the browser (via browserify/webpack/etc.) or Node. Typically the way to achieve that is with \"browser\" flags in package.json: e.g. here's how PouchDB does it.\nAlso I'd say a nopromises version for Node is unnecessary, because large bundle sizes are less of an issue on the server side.\n. Actually it just occurred to me that we can solve this problem by simply changing the \"main\" in the package.json to point to the Node distributable version.\n. might be a good time to upgrade to node 5\n. the reason this won't fix the underlying issue is that it will still fail on non-Promise browsers, right?\nAnd BTW it's not the case that this expects \"require\" to be defined the browser; it's browserified, that's the whole point\n. require (or really _dereq_) will always be defined, so this check is not necessary ^\n. ",
    "jampy": "sorry, but why is this heavywheight? both WebSQL and IndexedDB support transactions natively AFAIK, so localforage could just use them.\nOkay, this won't work with localStorage driver, but even then an ADVANCED_MODE flag or similar (as proposed by someone else) could restrict usage to the other IndexedDB/WebSQL drivers. \n. ",
    "ccorcos": "Just wanted to chime in with my use-case. When a user is offline, we save database entries in the browser. When the user comes back online, we sync that up with the server. However, since browser windows share state, without transactions, we can end up committing things twice.... Any ideas when this will be officially released?. Sounds good. I'm just seeing some InvalidStateErrors. I might just use the latest commit instead of a version. FYI I've been using this in production at www.notion.so for the past 36 hours and haven't gotten a single InvalidStateError since upgrading to d58233e73f6d5e4878b615a3576fcb4b6428e9b6 (we were seeing hundreds). Hey sorry, busy week. I think the problem is that the database is only created when the window loads. This isn't a very big issue because the user just has to refresh, but it does feel like its not as resilient as it could be:\nUncaught (in promise) DOMException: Failed to execute 'transaction' on 'IDBDatabase': One of the specified object stores was not found.. ",
    "lejenome": "added a commit to replace typeof(chrome) with window.chrome\nand an other to remove localStorage  initializing to undefined\n. I have not knowledge about coffeescript, anyway i'm writing a simple browser based test, for more tests. maybe i will rewrite them on coffeescript\n. isn't _errorHandler function on localStorageWrapper unused?\n. what about adding option to choose how to deal with undefined/null values? (choose to return undefined or null for these cases)\n. ok, that would be better. and for adding option, i meant adding a property like \"localforage.preferedNonValue = ?\", and when returning undefined/null value from setItem, it returns the value of this property.\n. ok\n. as i know, webSQL and localStorage are availbale on nodejs but not really a good choose. even loading localforage will fail due the use of the undefined \"window\" object on localforage code and promise.js code\nthe problem with localforage is not so extensible. so adding more driver for platforms like chrome.storage #43 or nodejs or even browser-releated futures like session storage #2  will need to be directly integrated to localforage code base or to fork it\n. i know about \"main\" field, but not sure about \"browser\" field? it's not on node package.json documenetation\n. there is 3 ways to solve this for the old callback style\n1- pass err as second arg  \njavascript\ncallback(result, err)\n2- if an other callback fn is passed, exec it instead of the first callback\njavascript\nfunction getItem(key, success, failure){\n...\nsuccess(value)  //if every think is ok\n...\nif(failure) \n      failure(error)      //if it fails\nelse\n      success(error)\n3- if callback is an object not a function (not a good idea)\njavascript\nfunction getItem(key, callback){\n...\ncallback.success(value)  //if every think is ok\n...\ncallback.failure(error)      //if it fails\njavascript\nlocalforage.getItem(\"var\", {success: fn1, failure: fn2})\n. it works for me, isn't the next code enough for sandboxed chrome app?\n``` javascript\nif (window.chrome && window.chrome.runtime) {\n        return;\n}\n// Initialize localStorage and create a variable to use throughout the code.\nvar localStorage = window.localStorage;\n```\n. sorry, you're right. it was a bug in my chrome app building script\n. es6-promise still use window, need patching ?\n. IE implementation doesn't support putting null values (tested on IE11)\nthat's the output on IE console when putting null value:\n\n\nSCRIPT87: Invalid argument.\nFile: localForage.js, line: 89, Column: 7\nand to be more specific, that's the ouptut when putting null and undefined values from the console\n<< localForage.setItem(\"item\", null)\nInvalid argument.\n<< localForage.setItem(\"item\", undefined)\nundefined\nnote: getItem function (on asyncStorage) already returns null values when the req.result value is undefined. so this will not break the code, we still get null values on getItem function (getItem/setItem function on localStorageWrapper maybe need some changes)\n. ok, this bug only affects two versions (10, 11) which are still getting updates. i will remove these  lines and i hope they fix it ( i send a feedback to them )\n. indexedDB is supported, it will work even without the need to add permission on the manifest file.\nlocalStorage/sessionStorage are not allowed to access (replaced with chrome.storage API: http://developer.chrome.com/apps/storage.html http://developer.chrome.com/apps/app_deprecated.html)\n. webSQL id starts from 1 not 0\n. we return the name of item not it's value\n. that's easier than remembering the driver name\n. typeof([]) does not return 'array'\n. it'd just required for dev/testing\n. devDependencies items will not be installed when installing localforage from nodejs servers.\nthey will be just installed when running \"npm install\"  from the root of the package.\nmore at \"devDependencies\" section on https://www.npmjs.org/doc/files/package.json.html\n. @davidguttman i did a search and didn't find think about \"browser\" field, do you mean \"main\" field?\n. thanks\n. \n\n",
    "kyoshino": "With IndexedDB, the undocumented IDBObjectStore.mozGetAll method (+ filtering) is much faster than iterating each items. I have used it in my app. This method is currently Gecko-specific but will be standardized and unprefixed.\n. FYI:\nChrome is about to implement IDBObjectStore.getAll.\nhttps://code.google.com/p/chromium/issues/detail?id=457450\nFirefox has already implemented the unprefixed getAll method, but it's still behind a pref. mozGetAll is not documented on MDN but available by default.\nhttps://bugzilla.mozilla.org/show_bug.cgi?id=920633\n. ",
    "designbyadrian": "Maybe it's a bit unrelated, or overkill for localForage, but it would be nice if LF supported queries like WebSQL and IndexedDB already do.\nOr would you guys recommend another aggregator if I want queries?\n. Awesome!\n. This is definitely vital! Could be implemented in conjunction with rejecting the promise.\nMaybe some quota management \u00e0 la YardStick could help too? Link: http://blog.safariflow.com/2013/02/21/detecting-available-free-space-in-websql/\n. Please pull, this one is awesome and very much needed!\n. Latest Google Chrome. I'll test in Safari too.\n. I appreciate your hard work on this project! So I have to apologise, as I can not reproduce the problem anymore embarrassing\nI'm still trying to figure out what was wrong with my data, but it's most likely not related to localforage!\n. ",
    "bbinckes": "How would getitems work?  Currently using LF and I have a key that is USERID:ORDER and storing a ORDER object.  I want to pull all order objects for a certain USERID so something like getitems( USERID+'%', function()...  would work good for my use case. \n. ",
    "dwhogg": "Is it possible to get a list of all keys currently stored? Something like keys(callback) implemented in lawnchair. Would be useful as a way of doing some housekeeping if the max size of the store was being reached.\n. For now I've created Issue 136. Thanks all for localForage!\n. ",
    "siddo420": "whats the status of this feature?\n. here is one way to reproduce it on MacOSX Chrome:\nUsing example in Readme.\n```\nvar store = localforage.createInstance({\n  name: \"nameHere\",\n  storeName: 'one'\n});\nvar otherStore = localforage.createInstance({\n  name: \"nameHere\",\n  storeName: 'two'\n});\nstore.setItem(\"key\", \"value\");\notherStore.setItem(\"key\", \"value2\");\n```\nI get the following error in console:\nUncaught (in promise) DOMException: Failed to execute 'transaction' on 'IDBDatabase': One of the specified object stores was not found.(\u2026)(anonymous function) \n@ localforage.js:1273\nFor a quick ref, line 1273 is the middle one below:\n}).then(function (value) {\n                    var transaction = dbInfo.db.transaction(dbInfo.storeName, 'readwrite');\n                    var store = transaction.objectStore(dbInfo.storeName);\n. Looks like it works fine on Safari, however multiple stores (storeNames) of the same names were created.\n\n. FF does not throw an error but only creates the first table/store 'one'.\n. @sebweaver 1.2.6\n. Works in Safari but not in Chrome (haven't tested with FF yet). Please make sure you delete your database before testing else it wont show the error (or use fresh Incognitio mode window for testing at least).\n<html><head><meta charset=\"utf-8\">\n<script type=\"text/javascript\" src=\"{{fileserver}}js/vendor/localforage/dist/localforage.min.js\"></script> \n</head><body></body></html>\nI tried using *-no-promises lib as well but same result.\nThe code I used (same as above):\nvar store = localforage.createInstance({\n  name: \"nameHere\",\n  storeName: 'one'\n});\nvar otherStore = localforage.createInstance({\n  name: \"nameHere\",\n  storeName: 'two'\n});\nstore.setItem(\"key\", \"value\");\notherStore.setItem(\"key\", \"value2\");\nError (with nopromises.js):\nUncaught (in promise) DOMException: Failed to execute 'transaction' on 'IDBDatabase': The database connection is closing.(\u2026)(anonymous function) \n@ localforage.nopromises.js:925\nError (regular):\nUncaught (in promise) DOMException: Failed to execute 'transaction' on 'IDBDatabase': The database connection is closing.(\u2026)(anonymous function) \n@ localforage.js:1608\nquick ref:\nreturn value;\n}).then(function (value) {\nvar transaction = dbInfo.db.transaction(dbInfo.storeName, 'readwrite'); //<--1608\nvar store = transaction.objectStore(dbInfo.storeName);\n. Having a similar issue in FF pvt window only.\nI am on 39.0.3 Mac.\n```\nLocalforage driver used: asyncStorage\nError: [object DOMError]\nInvalidStateError\nvar openreq = indexedDB.open(dbInfo.name, dbInfo.version);    localforage.js (line 1154)\nuncaught exception: [object DOMError]\n```\nasyncStorage works fine on regular (non-pvt) FF window.\n. @thgreasi: thanks for the info and driver \njust wanted to ask if its being used in production or not and if it will work fine with https://github.com/mozilla/localForage-backbone or not.\n. I am working with your driver now but for some reason I cannot find the location of sqlite db file on my device. I have confirmed the driver name used and also keys are being stored and retrieved without any issues.\nI can see my app's directory under data/data/com.example.newapp but subfolders cache/ and files/ are empty.\nWhat is the default database file name used and where is it stored?\n. My browser stopped complaining ie. no error messages anymore. \nI hope it'd not create any security issues.\nThanks.\n. I played with it a little more:\nvar db1 = localforage.createInstance({ name: 'DB-1' });\nThen,\nvar db1_tbl1 = localforage.createInstance({ name: 'DB-1', storeName: 'tbl-1' });\ndb1_tbl1.keys(function(err, keys){ console.log(keys); }); <-- works but empty resultset b/c nothing is insrtd yt\nHowever,\ndb1_tbl1.setItem( 'key' , 'val' );\nfails with \nUncaught (in promise) DOMException: Failed to execute 'transaction' on 'IDBDatabase': One of the specified object stores was not found.(\u2026)\n  (anonymous function) @ localforage.js:1273\nAlso tried:\nvar db1_tbl1 = db1.createInstance({ storeName: 'tbl-1' }); //<-- works\nfails on setItem again with the same err as abv.\nHere is what the doc says about multiple instances:\nYou can create multiple instances of localForage that point to different stores using createInstance. All the configuration options used by config are supported.\n. Chrome in Incognitio mode\n. +1 \nvery important\n. Has anybody found any solutions/workarounds for this?\nthis becomes important when users are using private browsing in FF.\n. I am getting the same error in FF. Whats the status of this issue?\nInvalidStateError: A mutation operation was attempted on a database that did not allow mutations.\nvar transaction = dbInfo.db.transaction(dbInfo.storeName, 'readwrite');\nlocalforage.js (line 1608)\nline 1608:\nreturn value;\n                }).then(function (value) {\n                    var transaction = dbInfo.db.transaction(dbInfo.storeName, 'readwrite');  //1608\n                    var store = transaction.objectStore(dbInfo.storeName);\n. I think, I've hit the same problem as TCMiranda.\nWhen are you releasing the next version (incl patch above)?\n. ",
    "tamer1an": "Yes, it would be convenient.\nPlease consider adding that feature. :godmode:. ",
    "potch": "In your explanation, do you mean 'WebSQL' instead of WebKit?\n. ",
    "Nevraeka": "Maybe a JSFiddle-like sandbox for these. I agree, now that you explained it in #85, that an app wouldn't be as effective as examples. If there was a sandbox or playground spa app that might work better. Let me know if I can assist. This is a great project and it deserves some great examples \n. ",
    "jviereck": "\nNow, base64 inflates size by 1/3, so potentially a different encoding is better, but either way, it'd be a good start at storing blobs\n\nGood point. Is there a technical problem that prevents us from concatinating the String.fromCharCode(x) result of every single byte:\n// Just JS-Pseudocode\nstringToStore = arrayBuffer.map(function(c) { return String.fromCharCode(c); }).join('');\n. Personally I am not interested in support Blob, but only ArrayBuffers. If we can get Blob support easy as well, that's great :)\nFrom my research blobs can be stored in websql, but ArrayBuffers can not. There is a way to create blobs from ArrayBuffers, so we could store the arraybuffer as Blob in the websql database. When we call the `getItem(...) method, how could we figure out the stored Blob is supposed to be converted into an Arraybuffer? Store additional meta data in a different websql table could solve this issue. \nMatthew Riley MacPherson notifications@github.com wrote:\n\nI'm okay with base64 encodes for localStorage... I would thing WebSQL\nwould accept Blob types and maybe I'm just being lazy about converting\nblobs, so I'll check that out now.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/mozilla/localForage/issues/40#issuecomment-34694494\n\n\nSent from my Android device with K-9 Mail. Please excuse my brevity.\n. > (PS: Don't worry too about this not merging cleanly; I'll be sure to add my WebSQL code as another commit in this branch to get the tests working and merge it in by hand.)\nDo you have your current WebSQL code online already to have a look at it?\n. No worries. As soon as you have something to look at, I am happy to do \nso. Also, feel free to send a PR my way if you want ;)\nOn 18/02/14 02:32, Matthew Riley MacPherson wrote:\n\n(This is taking longer than expected, and I'm adding a bunch of tests \nto this as well. I'm hoping this week sometime.)\n\u2014\nReply to this email directly or view it on GitHub \nhttps://github.com/mozilla/localForage/pull/54#issuecomment-35341258.\n. > What method calls are we talking about failing?\n\nAll of the available API functions (setItem, getItem, ...). E.g. the \nWebSQL driver might fail on any API function being used as there is an \nerror with the underlaying WebSQL database.\n\nbut what\u2019s the convention in browser-land?\n\nI do not know. Putting the error first is a little bit annoying when \nwriting the callback, but on the other hand, if the developer ignores \npossible errors to be handled in his application, they are doing \nsomething wrong. So by putting the error value as first argument it's a \nway to make developers think about error handling, which I think is a \npositive point :)\nOn 14/02/14 00:24, Matthew Riley MacPherson wrote:\n\nI\u2019ve always disliked that node.js (error, value) -> style, at the \nvery least I\u2019d like error to follow value, but what\u2019s the convention \nin browser-land?\nWhat method calls are we talking about failing?\n\u2014\nReply to this email directly or view it on GitHub \nhttps://github.com/mozilla/localForage/issues/55#issuecomment-35039008.\n. > This also prevents us from modifying our method signatures in a backwards-incompatible way, which I like.\n\nDo we really care about backward compatibility at this point? If we do, we cannot land #54, because it will change the library semantics (storing a blob or an binary array behaves different at the moment compared to what it will once the PR #54 has landed).\n. Overall, this looks good.\nis there a way to share the serialization and deserialization code between the localStorage and webSQL implementation?\n. Why put stuff into a separate require again? Cannot the build script concatenat all the files and wrap them in one require definition? That's what we do with PDF.js roughly.\n. > I believe @jviereck already had some changes in mind for the build process, but I'm all for using better and more standardized build tools. Right now our build tool is essentially cat, heh.\nI want to change the way the files get \"glued\" together but still think about relying on cat for now.\nPlease don't wait to me changes to happen - if you think that PR #87 is good to go, then please merge it.\n. > Though I don't think that relying on shell scripts is good (for instance I can't run some stuff on my Windows machine)\nAgreed. If you want, feel free to replace the current way we use cat to \"build\" the files by grunt.js. Personally I am not a big fan of grunt and more of gulp.\n. Good catch. This change was not intended. Reverted the change again.\n. Remove this console.log?\n. Should there be a errorHandler instead of null that calles reject()?\n. Is that a bug or a feature that you have out commented the ArrayBuffer and Blob tests?\n. Remove console.log?\n. Remove me?\n. Remove console.log?\n. Remove console.log?\n. Add error-callback and call reject?\n. ",
    "bergie": "In noflo-ui I implemented a migration of the localStorage contents to IndexedDB as part of the IndexedDB version 1 migration flow.\nOf course, doing that would require localForage to know what keys have been stored, since there is no index available.\n. ",
    "dmfrancisco": "It seems iOS 8 supports IndexedDB now. This means if a cordova / phonegap app uses localForage, when iOS 8 becomes available to the public, end users that upgrade from iOS 7 may loose their data :confused: It may be an edge case, but it affects those kind of apps that don't sync their data with a server.\n. ",
    "Charuru": "Yes please\n. ",
    "vikrantpogula": "@tofumatt ok thanks ! will look into it\n. for anyone else looking into it the main issue here when compared with localStorage / localStorageWrapper is that the chrome API ( chrome.storage.local ) seems to do some kind of internal serialize/deserialize. \nI will work on this further and try to implement proper serialization for all data types\n. ",
    "wuher": "I don't. So, yes, feel free to do that. Thank you very much.\n. ",
    "willfarrell": "Now that there is a bower file, the package will need to be registered before anyone can start using it. Run bower register <my-package-name> <git-endpoint> when you're ready.\n. It can be spaces or tabs, it doesn't matter. I personally use tabs in my editor.\n. The README includes details how implementation works. Just like examples, they're useful to have for quick reference.\n. ",
    "brycejacobs": "+1\n. ",
    "austinpray": "Woot!\n. > I'd love to see this rolled into a yeoman generator\nWhy would you do this over managing the dependency via bower? Or am I misunderstanding?\n. +1 for separating out adapters. Would be easy to manage everything with bower. \n. a .bowerrc would make this work without upsetting how everthing is setup currently. Just clean out vendor/ and add a bowerrc:\njs\n{\n  \"directory\": \"vendor/\"\n}\nThen just change your references to things like vendor/jquery.js to the proper vendor/jquery/dist/jquery.js or whatever the format of the package is. \nI mean you probably know this already, but just incase.\n. I will create a plunkr, just a moment. \u00a0\u2014\nSent from my iPhone\nOn Sat, Apr 12, 2014 at 2:11 PM, Matthew Riley MacPherson\nnotifications@github.com wrote:\n\nHmmmm, this strikes me as being a bug. Let me look into it. Maybe we're missing some tests.\nWhich browsers/drivers are you experiencing this in?\nReply to this email directly or view it on GitHub:\nhttps://github.com/mozilla/localForage/issues/134#issuecomment-40288968\n. Try this:\nhttp://plnkr.co/edit/1ypDaKm7R0Zvg2yu93MW?p=preview\n\nChrome 34.0.1847.116\nAfter clicking the button try looking at your indexdb in the chrome developer tools\nExpected behavior: everything is namespaced under myApp and the store is myAppData \nWhat happens: my config is ignored and everything is stored under localforage and keyvaluepairs\n. I see, thank you guys! I was just following the readme.md, so perhaps that needs to be clarified there.\nhey @ocombe I think this breaks your adapter, I can't get it the .config to work in angular either.\n. I was having trouble with the application config taking hold using the adapter. It would create the indexdb table and store but would not write data.\u00a0\nI will create a plunk and see if I can replicate it. If so, I'll open an issue on your repo.\u00a0\n\u2014\nSent from my iPhone\nOn Mon, Apr 14, 2014 at 2:45 AM, Olivier Combe notifications@github.com\nwrote:\n\n@austinpray it shouldn't be a problem with my adapter, I'm using a custom name and it works fine.\nAs a matter of fact I call the init from localforage when there is a change in config (but you have to use the config function with the angular service, not directly the one from localforage)\nReply to this email directly or view it on GitHub:\nhttps://github.com/mozilla/localForage/issues/134#issuecomment-40340519\n. @tomByrer no kidding. This repo is a godsend. No idea how I found it way back when though.\n. I would look at http://www.metalsmith.io/\n. Gulp is excellent, you will not be sorry you did this. I can help if needed.\n. :beer:\n. Sweeeeet\n. :beers:\n. :beers:\n. \n",
    "peey": "@tofumatt : Just to get a rough idea, how high is this feature on your priority list?\n. @kriswillis I don't think localforage currently supports multiple tables. Even with different names, the data is stored in a single place : http://jsfiddle.net/uK3Qz/1/ (I'm using Firefox)\nYou can follow the request for multiple tables at : https://github.com/mozilla/localForage/issues/45 \n. Hey, doesn't seem like you can swap collections by calling config, try http://jsfiddle.net/uK3Qz/3/.\nYou can follow request for multiple DBs and stores on https://github.com/mozilla/localForage/issues/45\n. @Jaromudr that's the point I was trying to illustrate. Even if you change store name via localforage.config, everything is still stored in one place.\n. if I do:\n```\nvar localforage2 = localforage.createInstance({\n    name: 'storage2',\n    storeName: 'storagename2'\n});\nlocalforage2.set('key', 'value');\n```\nThen does this internally store the data in the store 'storagename2' of the database 'storage2' in WebSQL and IndexedDB?\n. ",
    "afknapping": "Do you mean if angularLocalStorage has it? Cannot find anything about that in the docs, so guess no. Would of course be nice to have to give user feedback....\n. ",
    "ocombe": "I'm writing an angularJS service based on localForage, I'll let you know once it's out !\n. It's done, I'm testing it at the moment on my project at work.\nI wanted to give it the same functionalities that https://github.com/grevory/angular-local-storage but localforage doesn't give you any way to list all current keys, you can just request one if you know its name, so it will miss a few features (clearAll will wipe all storage data for this domain, not just the one related to your project, and you won't be able to get an array of the current keys)\n. And I should take a look at https://github.com/agrublev/angularLocalStorage to add this bind feature, it seems very nice !\n. My module is available here : https://github.com/ocombe/angular-localForage\nI'll make a pull request to add it to this repository once you guys have tested it and found it good enough !\n. Have you guys tried my angular module ? Do you think that it's stable/good enough to be merged with this repository ?\n. Angular has it's own module system and is not compatible with UMD\n. no problem :)\n. I listed localforage as a bower dependency but we would need release numbers to make it safe.\nFor example the \"driver as a function\" commit from 2 days ago was a breaking change, but I couldn't specify that my plugin was working with version 0.0.1 and not 0.0.2 in the bower.json file.\nIf someone had installed it in the mean time, it would have been broken :(\n. Anyway, I have nothing against keeping it as a separate repository, but we should at least list it in the doc for people who might be looking for it :)\n. I get an error on page load.\nI've used IE11 with IE8 mode, not sure if it's the exact behaviour of IE8 but I think it is (I had this kind of problem in IE8 before)\nThe problem is that IE8 thinks that delete is a reserved keyword, and you can't use it anywhere... but if you call the function with store['delete'] it works :)\n. The pull request #84 would help \"catching\" this bug and allow the promises to end with a reject\n. @tofumatt : ok for the make build, didn't know, but I'm working on Windows and I don't think it would work\n@coderaiser : use the reject to make the switch to another driver (local storage for exemple), but I understand that it would not be DRY if you have to add this reject in all the getters setters if you don't know what will be called first\nThe automatic switch would have to be in the library initial test for indexeddb/websql with a detection for that kind of private browsing errors. Do you think it would be possible @tofumatt ?\n. I do agree that this bug is weird and I have no idea why it occured... :)\nIt happened on Windows 8.1 / chrome Version 33.0.1750.146 m\n. Awesome config options !\nBut don't you think that the function \"clear\" should only remove items with keyprefix for localstorage ?\n. We could add a clearAll function to remove everything (with the default localstorage clear function for people who need to keep it fast) and change clear so that it uses the prefix\n. I agree, I'm already using a similar function in my angular adapter, this would allow me to clean my code a little bit :)\n. While I think about it, the function length from localstorage should also return the number of keys based on your prefix, don't you think ?\nBut then it would make the function key harder to use because you wouldn't be able to loop to get all theys... We would have to add a getAllKeys (or getKeys, or keys) function that would take prefix into account to return all the keys.\n. Yes but the main purpose of localForage is to abstract developpers from thinking about all these complicated things.\nAnother possibility is that we keep the prefix for localstorage, but the function key returns the item key with the prefix included, so that we can loop and ignore keys we don't need.\nWe could make this optional with a parameter: keep it unprefixed but allow users to get the real key with the prefix\n. The only reason I have to use length is to loop through all the keys to get the list of keys. If we add a function to get all keys (and it could be usefull for all drivers & for other users) it would minimize this problem (for me at least) :)\n. Damn I just finished updating my angular adapter to reflect the changes, I will revert the prefix modifications then (I have a prefix option in my adapter)\n. Ok, I'll add a test to check for localstorage driver and add my own prefix then because that makes the clear function unusable for me as I have other libs that use localstorage too.\nI still think that we should add a function to get all keys !\n. Exactly ! :)\nFor the moment I loop with length and key functions, but it's far from optimal with other things than localstorage\n. @austinpray it shouldn't be a problem with my adapter, I'm using a custom name and it works fine.\nAs a matter of fact I call the init from localforage when there is a change in config (but you have to use the config function with the angular service, not directly the one from localforage)\n. I have this error on the latest version of Firefox too, but it works anyway.\n. I agree, we should be able to set the driver in the config options, that would make more sense, but please don't remove the possibility to change the driver afterwards: I'm using it to switch to localstorage when we are in private browsing for firefox/safari (and that it triggers \"InvalidStateError\" which can only be detected after the first attempt to use the storage).\n. In the doc you say:\n\nIn pre-1.0 versions you had to call .ready() to make sure the code was loaded, but this is no longer necessary.\n\nI guess that you could hook that with the set driver config ? Since anyway you can't use the config function once localforage is ready, I'm guessing that it should work as expected: setting the driver should delay the readiness of localforage, and any operation before that should happen once localforage is ready.\nAnd changing the driver afterwards should put localforage in a \"not ready state\" that would delay any operation once again.\n. I would love if localforage could do it, but in the mean time I'm detecting it in angular-localforage so I don't have to think about it when I'm coding.\n. it's fixed in 0.9.1 I think.\nedit: it's not, sorry.\n. Check again with v0.9.1, it works for me now (it didn't in 0.8.1).\n. Well I tried to fix it in the lib with the same fix, but somehow it still uses indexedDB... I'll try to take some time tonight to really fix it.\n. Any idea why with this code:\n``` js\ntry {\n    var indexedDB = indexedDB || this.indexedDB || this.webkitIndexedDB ||\n        this.mozIndexedDB || this.OIndexedDB ||\n        this.msIndexedDB;\nvar test = indexedDB.open('_localforage_spec_test', 1);\ntest.onerror = function() {\n    supportsIndexedDB = false;\n}\n\nvar supportsIndexedDB = indexedDB && test.onupgradeneeded === null;\n\n} catch(e) {\n    supportsIndexedDB = false;\n}\n```\nThe error is catched in my angular lib, but not in the localForage lib ?\nBoth go into the onerror callback, but the try catch only works in my lib :(\nIf the test is async it will complicate things a lot...\n. Ok got it, in your lib this.indexedDB works because this refers to window, in my lib it refers to my lib, so indexedDB is undefined, and the test never works (the error catched is indexedDB.open with cannot call open on undefined)... damn I'll have to do it async :(\n. Ok I couldn't test indexedDB in async (it's too complicated because the init phase needs to be synchronous), but I fixed my problem:\nI already had a fix for invalidStateError and I couldn't figure out why it wouldn't prevent this since it's the same error.\nThe fact is that it fails in the _this.ready() function and you never rejected the errors !\nNow it works ! (please release a new version with this when you can)\n. Not sure why, but the first test is always failing:\n1) Config API \"before all\" hook:\n    TypeError: 'undefined' is not an object (evaluating 'localforage.config')\n     at http://localhost:9999/test/test.config.js:6\n     at callFn (http://localhost:9999/bower_components/mocha/mocha.js:4338)\n     at http://localhost:9999/bower_components/mocha/mocha.js:4331\n     at next (http://localhost:9999/bower_components/mocha/mocha.js:4626)\n     at http://localhost:9999/bower_components/mocha/mocha.js:4630\n     at timeslice (http://localhost:9999/bower_components/mocha/mocha.js:5761)\nBut it was failing before my changes, so no worries ;)\n. Ok I fixed the last promise without reject (the one I was talking about in the first message).\nIn fact it was the source of a bug in Safari private browsing: the ready function would never resolve ! Now it rejects and we can catch it !\n. yes it looks like they are in #206 (how ? I don't know)\n. Yes they are still up to date.\nI'll close this one then !\n. If you want to rebase to have less commits (and a cleaner branch) I don't mind ;-)\n. eheh thanks, it was a reward from the ulule campaign (kinda like kickstarter but for smaller projects) for commitstrip, only 5 of us got our portrait as a comic character !\n. Since it's the first and only iOS with indexedDB, the user agent test should be pretty easy (just prevent all iOS from using indexedDB ?)\n. Oh yes, you're right, I didn't think of that :)\n. A bit late, but I just tested this and it works, I can switch the storage when I get an error in private browsing. All good for me !\nThe next version of angular-localForage should be released today and it will be much simpler with all the good patches we got lately in localForage :)\n. Yes, it's also taken into account for the clear method.\nI could do a PR if you want.\n. This function is awesome, any chance to have a new release with it ? I have multiple methods (search, and get multiple keys/values in one call) that would be way more efficient in angular-localForage with this !\n. Nop, no pull request from you (https://github.com/ocombe/angular-localForage/pulls?q=author%3Alu4), you can still do it, I haven't started working on this yet\n. Yay \\o/\nThanks a lot !!\n. @lu4 I made a pull request from your fork and merged it, thanks :)\n. Oh damn I just found this problem while working on my unit tests for angular-localForage and I wanted to open an issue here but I see that there already is one.\nSee this plunkr: http://plnkr.co/edit/QR7LyMUAffKzQEh5fy2r?p=preview\nOpen your console and click the button, the getItem will return null, then click again and it will return the Blob.\nI guess my plunkr is useless now... but you can use it to make your test :)\n. Would it be possible to avoid addind a new method setItems and use setItem instead ? If you provide an array of keys and an array of values, it should use this internal optimization.\nFor example:\nlocalforage.setItem(['key1', 'key2'], [{....}, {....}]) would use this new function but localforage.setItem('key1', {....}) wouldn't\n. And the function getItem should work the same: with an array of keys it would return an array of values\n. Yes, @tofumatt should make a decision. I obviously prefer the automatic batching because I think that we should avoid adding too many methods.\nAlso localForage is supposed to be a a wrapper based on the API of localstorage, and there is no setItems in localstorage.\n. Why couldn't we have both \"fast\" & \"memory-wise\" ?\n. ",
    "jimthedev": "@ocombe, Excited to see that angular service. \n. Great stuff. I agree that adapters probably don't belong in core. With that\nsaid, I'd love to see this rolled into a yeoman generator.\nOn Mar 14, 2014, at 5:52 PM, Peter Bengtsson notifications@github.com\nwrote:\nI think @ocombe https://github.com/ocombe's repo is looking great and I\npersonally believe it works as a great resource for those of us who like to\ncombine localforage in angularjs code.\nBut I do not think it belongs here in this project. Why add angular support\nand not React or Backbone or TheNextBigThing.\nKeep it small and to the point or else, in a years time, someone will look\nat this and think it's bloated and re-write their own clone.\n\nReply to this email directly or view it on\nGitHubhttps://github.com/mozilla/localForage/issues/46#issuecomment-37705597\n.\n. I was specifically referring to angular+localforage as an app skeleton.\nYeoman generators use bower to install their dependencies so it'd be pretty\nslick. Throw in bootstrap 3 or ratchet 2 and you've got an app skeleton.\nOn Mar 14, 2014, at 7:34 PM, Austin Pray notifications@github.com wrote:\nI'd love to see this rolled into a yeoman generator\nWhy would you do this over managing the dependency via bower? Or am I\nmisunderstanding?\n\nReply to this email directly or view it on\nGitHubhttps://github.com/mozilla/localForage/issues/46#issuecomment-37710229\n.\n. @tofumatt  @magalhas @ocombe  I agree that a separate repo for adapters seems reasonable. If I'm using this for a mobile app, I really want to keep it as small as possible. Also, I don't want to have to clean up the repo after using bower to install, just to get back some of that space used by other adapters that I'm not interested in. Seems reasonable to have a section in readme.md where adapter creators can list their adaptors. Perhaps something like how Dokku documents their plugins: https://github.com/progrium/dokku/wiki/Plugins\n. +1 for this. I think it would be really interesting to implement so called db migrations and even versioned seed data in some way. \n. ",
    "davidguttman": "@tofumatt great to hear that you're open to it, I should be able to start on it soon.\n@sole of course I gave it a go ;)\n% npm install localForage\nnpm http GET https://registry.npmjs.org/localForage\nnpm http 404 https://registry.npmjs.org/localForage\nnpm ERR! 404 'localForage' is not in the npm registry.\nnpm ERR! 404 You should bug the author to publish it\n. Published to npm: https://www.npmjs.org/package/localforage\nnpm only allows lowercase names, so I had to change that. Right now I'm the owner of the package, but will transfer to another username.\n. All yours =)\n\nOn Feb 17, 2014, at 5:02 PM, Matthew Riley MacPherson notifications@github.com wrote:\nI emailed you a few days back and still haven't heard from you. Can you transfer this to me, @davidguttman?\n\u2014\nReply to this email directly or view it on GitHub.\n. @lejenome https://github.com/substack/node-browserify#browser-field\n. \n",
    "olegbl": "\nNode 0.10.25\nNPM 1.1.34\ngrunt-contrib-jasmine 0.5.1\ngrunt-lib-phantomjs 0.3.1\nphantomjs 1.9.7-1\n\n\ngrunt-template-jasmine-istanbul 0.2.6\nRunning the latest localForage from dist/ folder on github (min and full have same results).\n\nUnit tests are running on an angular project. Grunt jasmine config uses all default options, overriding only paths.\nThanks for taking a look!\n. Apologies - since I was not able to get it working at the time of the issue, the project moved on without localForage and I no longer have a working version with it integrated to test.\n. ",
    "ldong": "@tofumatt , I'm having a similar issue, could you take a look at it? Thanks.\n``` javascript\npage.open(url, function(status) {\n    if (page.injectJs('../lib/jquery-2.1.1.js')\n        && page.injectJs('../lib/jquery.cookie.js')){\n    var msg = page.evaluate(function() {\n        return $.cookie();\n    });\n    console.log(msg);\n} else {\n    console.log('Lib not loaded');\n}\nphantom.exit();\n\n});\n```\noutput: SECURITY_ERR: DOM Exception 18: An attempt was made to break through the security policy of the user agent.\n. ",
    "creasy1": "True nube here mea culpa. Still in the dark. I have made the candle. In need of the fire to light my path to illumination. \n. Having the gain the equivalent to 1 candlepower of knowledge in the world of code write. I now I'm in need of more like an Epa-candlepower light. 1 x 10e18 more candlesticks before I  could begin (forgive the cliche) \"To see  the Forrest through the trees\" \n. Git account closed in way over my head couldn't justify paying for\nsomething I couldn't use.\nOn Mar 14, 2014 6:44 PM, \"Matthew Riley MacPherson\" \nnotifications@github.com wrote:\n\nI'm going to close this branch as the code is in #73https://github.com/mozilla/localForage/pull/73and that's what will get merged.\n\nReply to this email directly or view it on GitHubhttps://github.com/mozilla/localForage/pull/54#issuecomment-37705099\n.\n. \n",
    "operatorjen": "If it's localStorage-specific, always return a null error on callback? Otherwise, return an error if it fails on async storage.\nI don't think putting the error first is annoying - it's a standard practice that is done these days.\n. ",
    "alekseykulikov": "FYI: I created a wrapper around localForage with support of node-style callbacks https://github.com/ask11/storage\n. The solution is simply to add then/promise as dependency to package.json:\n\"dependencies\": {\n  \"promise\": \"^5.0.0\"\n}\nI tested it locally and it works.\n. It works when localForage packed as component, see component.json\n. ",
    "piranna": "Yes, run it on Node.js. I know there are alternatives like file access and databases, but I'm interested that my library has the same ecosystem both on client and server side, that's why I'm looking for tools that work in both environments. LevelUP seems to be an alternative, but at the same time seems to be a little big for my needs, just a localStorage-like storage. Also, localForage seems more future-proof to me, since it would be possible to add its behaviour to the localStorage specification (I still doesn't understand by it doesn't support to store full objects...).\n. But Node.js and browsers still doesn't talk the same storage language, so I\nstill believe there's a problem here.\nSend from my Samsung Galaxy Note II\nEl 14/02/2014 16:47, \"Matthew Riley MacPherson\" notifications@github.com\nescribi\u00f3:\n\nClosed #57 https://github.com/mozilla/localForage/issues/57.\n\nReply to this email directly or view it on GitHubhttps://github.com/mozilla/localForage/issues/57\n.\n. \n",
    "runvnc": "Well, you can actually run quite a bit of typical client-side libraries on Node these days.  I think there are a number of types of projects that would benefit from a unified data layer and could then run with the same code on both the server and in browsers.\nIts good that you are prioritizing the browser though, and I think that with so many different browsers to support and different engines, it is right to stay focused on that as the primary developer.  However, I think it may be worthwhile for certain projects that have the rest of their code base set up to run both on the client and in Node, if they went ahead and forked the project and tried to see how difficult it is to build a Node back-end.  Then maybe down the line somewhere, if that becomes popular and actually proves useful to a number of projects, without requiring significant changes to the core, it could be pulled in.\n. ",
    "pwoolcoc": "I tried something right after I posted this. If I set 'localforage' as an alias to localforage.min in my requirejs config, it works fine:\n```\nrequirejs.config({\n    \"baseUrl\": \"js/lib\",\n    \"paths\": {\n        \"app\": \"../app\",\n        \"localforage\": \"localforage.min\"\n    }\n});\nrequirejs([\"app/main\"]);\n```\napp/main.js\ndefine([\"localforage\"], function(lf) {\n    console.log(lf); // => Object { INDEXEDDB=\"asyncStorage\", LOCALSTORAGE=\"localStorageWrapper\", WEBSQL=\"webSQLStorage\", more...} main.js (line 3)\n});\n. ",
    "jrburke": "@tofumatt it is best if the define calls are anonymous in source form, so just define(function(){.... That will allow 'localforage.min' references to work.\nIn the larger picture, I also suggest for consumers of this lib that are using modules to use 'localforage' as the ID as that plays well with any other library that might want the same (they will just ask for 'localforage' anyway, will not know about if minified), and if a minified version is wanted, use a paths config, as the second comment does, to point to that minified version.\nAnd going a step further, I would not use the minified version in source form in a project: I suggest using the non-minified forms in source, then rely on an r.js build step to do any minifications. This allows better debugging if you need to step into the source of a dependency, and the whole project minification will lead to better results over just specific files being minified.\nBut back to the more immediate question, an anonymous define() call is best practice. More details here.\n. Looks like the dynamic require inside localforage for the driver does not finish before ready is called, and ready is assuming _initStorage exists, where it will not exist until the driver is finished loading and extending localforage.\nSo the fix is likely for the internals of localForage.ready to wait on some promisey signal indicating that the dynamic load of the driver provider has finished before proceeding with its work.\n. ",
    "popeindustries": "According to the semver spec, anyone using a library with version <1.0.0 should expect api changes:\n\nMajor version zero (0.y.z) is for initial development. Anything may change at any time. The public API should not be considered stable.\n\nNode-style err first pattern is fairly entrenched at this point.\n. ",
    "cinder92": "i receive the same issue from localforage-angular\n. localforage does not work with electron :( and angular-localforage i get this error \nTypeError: Cannot read property 'config' of undefined\n    at new LocalForageInstance (file:///Users/dantecervantes/Documents/Personal/PuntoVenta/js/libs/Storage.js:58:22)\ni have both files in correct directory in my html, but is not working! HELP!\n. ",
    "KeynesYouDigIt": "I get the same error running https://mozilla.github.io/localForage/?javascript#setitem\nCan this be run server side? how shoud I initialize the db this client side?\n. sorry guys, I just forgot to include the script right. I am dumb and thanks for the link!\n. ",
    "xquezme": "Closed without fix? O really?\n. ",
    "coderaiser": "Yes, I running this on private browsing window.\n. Seems like it's problem in Firefox. On any site in private browsing window code:\nindexedDB.open('hi')\nshows InvalidStateError\n. I think would be great if localForage use localStorage or Websql if indexedDB could not  open database.\nActually it's not important to me use always indexedDB. If we could not - it's OK to use something different. I thing localForage is created exactly for this purpose.\nAlso would be great if it was some versions. So everybody could know is new version is out.\n. Good point, reject should be called. And there driver should be changed to websql and then (if no websql) to localStorage with this code:\nlocalforage.setDriver(localforage.WEBSQL, console.log.bind(console))\nlocalforage.setDriver(localforage.LOCALSTORAGEL, console.log.bind(console))\nAnd then try to save data in store type that could work normally.\nI don't thing that all this steps should be done on every library that use localForage. This things should be inside localForage.\n. @tofumatt, I think that this would be needed in browsers that \nprivate browsing in a few browsers (iOS Safari, Firefox) mode mucks with storage a fair bit\nAs you said in this issue.\nActually Firefox try to open database, shows error and that is all. He do not save any data at all.\nWhen I use localForage, I do not thing that I should check is browser could use storage that he find. It's job of localForage by the way it's main purpose of it.\n. ",
    "karol-f": "I'm still experiencing 'invalidState' error - Firefox in 'private mode'\nDo you think @tofumatt that we should reopen this issue?\n. Hi @thgreasi, I'm using latest (1.4.2). Your CodePen is indeed working - Private mode codepen \nI'll check my code for race conditions and misconfigurations (I'm not setting drivers as you in Codepen, I'm not setting them at all).\nThank you for the response!\n. ",
    "elyobo": "@thgreasi your pen is exposing an InvalidStateError and also successfully writing and reading via localForage for me with FF 50.1.0+build2-0ubuntu0.16.04.1 in private browsing mode.\n\nThe order of the error is odd though; reading and writing happens fine and then afterwards the error is thrown (which is what I'm seeing in my own application).. I was unable to find a way to catch the error and while FF still seems to work (while generating annoying error messages), private mode in safari was failing completely.\nIs there a correct way to catch this error and what's the correct way to detect that all storage engines have failed?\nMy interim workaround is just to avoid using localForage at all if window.indexedDB.init('test') fails; we're just using it as a cache so everything still works, just with more overhead than we would otherwise want.. Thanks @thgreasi, maybe .ready() should be added to the documentation? It does seem like a good idea to cover the case when no storage engines are available at all (e.g. safari in private browsing mode).\nUnfortunately it doesn't  prevent the uncaught error that I mentioned from bubbling up.  I simplified your pen so that it only calls .ready() and then tries to .catch() and log the error, however the .ready() is not rejected (the console.log() in .then() is called instead) and there is still an uncaught error getting logged to the console.  This is in FF private browsing mode.\nThe same uncaught error can be seen in your original pen, as I showed in the screenshot above.\nIt looks like the fallback is actually working, as local storage is used instead, however an error from the failed attempt at using indexeddb is not being caught as it should be and so does get exposed.. I really can't see anything wrong with what localforage is doing though, so perhaps this is a FF bug?\nUltimately the failure to connect is calling the window.onerror which we use for logging any uncaught errors in our app; it's generating useless noise for us in this case as the error is expected and has already been handled.. Thanks @thgreasi that is working for me in your example pen and by testing your branch in my own application.  I had tried .stopPropagation() (didn't work) but got dragged away before trying out .preventDefault().  Thank you for investigating and resolving this!\nI can't see any other side effects to this.  Also, it sounds like FF's behaviour here is the \"right\" behavior with regards to propagating the errors to window.onerror (see \"Integrate with window.onerror\" in the w3c/IndexedDB spec) so it does look like this is the right thing to do.\nNot directly related, but why does the .onerror handler reject with openreq.error rather than the error passed in to the handler?. I didn't, but most browsers don't fail there :) I don't have a large suite\navailable for testing sorry. My colleague reported to me that .ready\nresolves rather than rejects in Safari private browsing mode though, even\nthough there are no valid engines available.\nI'm not sure that they're the same object; if multiple errors occur then it\nwould only be the most recent one, so possibly can't be relied on. Not sure\nwhether that's possible or not when opening a DB though, I suppose the\nfirst error aborts it and so no more occur. Not on a computer to check\nequality right now, but I did have an error calling preventDefault on the\nopenreq.error object rather than the passed in error, so they may not be\nthe same in FF (although that does seem weird, so maybe the error was mine).\nOn Mon, 23 Jan 2017, 12:20 Thodoris Greasidis notifications@github.com\nwrote:\n\nDid you got any weird results on other browsers?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/localForage/localForage/issues/70#issuecomment-274402797,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAY4_lVzr2BcKC-qqgM9Qy3EjrmTWBkQks5rVDitgaJpZM4BixHg\n.\n. \n",
    "piupiupiu": "I don't think localForage should care about that but there should be an ability to set the key and encrypt/decrypt the data on the fly. Here is the example implementation: http://nekman.se/encrypted-localstorage-in-html5/ using cryptojs. Yes, it is possible to implement smth. like that without localforage modification but I think it's better to have a built-in support.\n. ",
    "Bertg": "Hi all, Sorry for waking up this thread. \nI was looking into implementing a solution to encrypt data for localForage in a transparent way.\nInitially i though that doing this using a custom Driver would be the best way to go; but then a lot of the serialisation logic provided by localForage would be lost.\nThis lead me to look for a way to replace the serialiser. I would implement a new serialiser that wraps the existing serialiser. \n@tofumatt Do you think this would be an acceptable change to the localForage API ?. ",
    "rubennorte": "I'm sure the current implementation works for most users, but with a little change it can work for everyone. It just occurred to me a simpler usage:\n``` javascript\nvar LocalModel = Backbone.Model.extend({\n  sync: Backbone.localforage.sync('storename') // Use a store for the model\n});\nvar OtherLocalModel = Backbone.Model.extend({\n  sync: Backbone.localforage.sync() // Use the model's collection store\n});\n```\nI can send a pull request if there's consensus about this.\n. Thank you for the work you've done, this library is great!\n. You can use the same name as in the collection instead of an empty sync if you feel more comfortable.\n. I removed the test because I thought that now it doesn't make sense. That error is already covered in Backbone own tests.\n. ",
    "exogen": "That's interesting \u2013\u00a0I wonder if the default WebKit policy is to deny third party cookies/storage and PhantomJS is just inheriting that policy? I tried looking for the default policy in the WebKit source tree and couldn't find it.\nAFAIK there's no way to detect the policy besides just attempting access and catching the SecurityError. The fix for #79 seems promising, although the detection will be off \u2013\u00a0it will detect that WebSQL is supported and thus may end up preferring that driver, but the openDatabase line will still fail, right? It seems like the safest option is to wrap the openDatabase call in a try/catch.\n. ",
    "nantunes": "I thought about that. My idea was to always return Promise.cast(true) by default in all drivers that doesn't require any initialization. But indexeddb.js already add a similar behaviour, with the withStore() function (the store only is created if really needed).\nAs for the other question, yes, the database is created only when setDriver() is called.\nI'll try to commit a better version latter this week.\n. Well, as you can check, this is my first ever pull request, and I've made a mess of it... Starting with not creating a branch for the change, for syncing the fork and make changes in the same commit, ...\nIf you think it is worth it, I can redo my changes and make a new and cleaner pull request.\nI have added the initStorage to the driver API.\nAn alternative could be to add a withStore to websql.js, similar to the one in indexeddb.js.\nI think this is a better solution as it cuts the overhead of checking if db == null in every method call.\nLocalstorage needs no initialization, so initStorage simply does nothing.\nHope to make better contributions in the future. Thanks.\n. Ok, I've created pull request #99. You can reject this and review that one.\nI will then rebase my master to avoid further confusion. Have a good trip. ;-)\n. There is no way to simply check if a database exists, but we can call openDatabase with a creation callback in the 5th parameter, that is called when the database is being created. The problem is nothing is called when the database already exists. So casper will wait for the callback in one case and wait for a timeout in another? I'm not seeing it clear now, but I'll think bit more.\nMeanwhile I've committed the tests that checks for the new initStorage method.\n. Done.\nAs for the tests, is hard to do a negative test case. We would be testing what not happens when using other driver (websql db doesn't exists if indexdb is used, indexdb store doesn't exists if localstorage is used, etc.).\nIn fact, to test the effects of not calling something. I think is not worth it.\nThe positive test case is already covered, as test.api would fail if the correct db or store isn't created.\n. _initStorage from #99 could use the information, but setDbInfos must be called before driver initialization. So it really should be a method of the main class. And it would have to be called before setDriver.\nMy suggestion would be that setDriver received a second optional parameter, an object with the config parameters for that driver.\nAnother problem is the default initialization process. In fact, if you call setDriver to override the default selection, in reality the method is called twice (one for the default storageLibrary, other for the requested one).\nLets suppose localforage chooses INDEXEDDB as default storageLibrary. It then calls setDriver automatically. A database/store is created with the default values: localforage/keyvaluepairs.\nThen we set the custom values. Call setDriver again, with localForage.INDEXEDDB again.\nNow we would end up with two databases.\nMaybe there could be an optional global var localforageConfig, defined before the localforage.js is loaded, that setDriver would use to override the default driver and configurations.\n. Indeed. It will be slower than .clear() native method, but would be better for consistency.\n. clearAll() would be meaningless to the other drivers, and all drivers must have the same public API (CONTRIBUTING.md).\nIn trivial usage there shouldn't be a great performance impact iterating the localStorage keys and calling remove().\nIf needed, the developer can call localForage.driver() to check if the driver is localStorage and call himself the native localStorage.clear() method.\nWhat do you think?\n. Hum... I'm starting to think it would be better the localStorage driver ignored the config options. All this is going out of scope of providing a common API to browser storage engines.\nThere can be multiple indexdb and websql databases, it makes sense to allow configuration, but only one localStorage.\n@tofumatt and @ahanriat, are you following this?\n. Added .ready(). Kept ._ready to announce it has read only.\n. \u00abI know there are hacky ways to support storage with cookies or IE Userdata or whatever, but anything worse than localStorage isn't worth investing into.\u00bb\nhttps://github.com/mozilla/localForage/blob/master/CONTRIBUTING.md#legacy-browser-support\nSo it was intentional. I think it wouldn't hurt to support cookies at this point, but maybe to keep the functionality consistent in future features could be troublesome and time consuming. What do you think?\n. Now, how could we rewrite the tests so such thing can be caught?\n. I can do that. What are you thinking? A more OO approach, with inheritance?\n. One other thing regarding the window.localForageConfig is that it must be defined before the script is loaded.\nOne alternative could be to only initialize the default driver after the first call to any API, if not explicitly initialized before. This would allow to set the options in the localforage object, instead of window global. But would introduce a delay in the first call.\n. I coded the part related to the driver initialization... Still had no time to get to a clear picture of the refactoring of the code.\n. > That sounds good; don't worry if you can't tackle the bigger refactor. If you can take it let me know, but otherwise I might try this weekend, we'll see. @tofumatt \nWell, if you have time, maybe is better. I normally work with JavaScript, but the last (and the following) couple of weeks I'm working in a JAVA Android project, so it is harder to have time and do the switch.\nI did try to start, with a .prototype approach. Had some issues with dependencies (require.js), but I paused it mainly because we've been talking about a var my_storage = new localforage(options);, not var my_storage = LocalForageIndexedDB();, var my_storage = LocalForageWebSQL();, etc..\nOf course JavaScript is highly chameleonic, and localforage() constructor probably could simply change the instance .prototype... But for that the current _extend() mechanism seems equally fine or better.\nI'm looking forward for your changes, and to help wherever I can. :-)\nThank your for maintaining this project, it is being extremely useful in my work.\n. Can someone help me to understand why my tests are failing? Even in places I did nothing.\nDetails for the 5 failed tests:\nIn /home/nantunes/dev/libs/localForage/test/test.drivers.coffee:13\n  Testing localforage driver selection\n    assertEval: localforage API includes option to set a driver explicitly\nIn /home/nantunes/dev/libs/localForage/test/test.drivers.coffee\n  Testing localforage driver selection\n    uncaughtError: \"#lib-ready\" still did not exist in 5000ms\nIn /home/nantunes/dev/libs/localForage/test/test.config.coffee\n  Testing localforage configuration for localStorage\n    uncaughtError: \"#key-is-set-in-db\" still did not exist in 5000ms\nIn /home/nantunes/dev/libs/localForage/test/test.api.coffee:13\n  Testing localStorage driver\n    assertEval: localforage API is consistent between drivers\nIn /home/nantunes/dev/libs/localForage/test/test.api.coffee\n  Testing localStorage driver\n    uncaughtError: \"#start-test\" still did not exist in 5000ms\n. Great, thanks! Now it only gives one error, and it's related to my changes. I'll look into it tomorrow.\n. I think the part that concerns this ticket, initialize driver only after first API call, is complete. I've fixed the test errors in the last commit (I pushed it but didn't come here to comment on it).\nThe more complex task of refactoring ( #114, also related with #39 ) I said I could do it, but it is on hold... I don't think I'll be able to start it before next week.\n. Ups, wrong base branch.\n. window.localForageConfig must be set before localforage is included. The global config was kept, but the recommended method to use localforage.config.\nIt would be like this: http://plnkr.co/edit/HvSQNb2bmPEthcU9bcON?p=preview\n. Should we keep this for backwards compatibility? It is so short lived...\n. ",
    "pelish8": "I added the error callback, because data has not been deleted from database when i try to remove them. The error occurs in Safari 7.0.1 and WebView on Mac OS X 10.9.1.\n\n. ",
    "phoboslab": "Well, after deleting ~/Library/Application Support/Firefox/Profiles/*.default/storage/persistent/* the database was created again and now works fine.\nI'm still curious why I had an incomplete/broken(?) DB with the name asyncStorage that had no keyvaluepairs store. This happened on two separate domains. Pardon my ignorance, but Isn't IndexedDB supposed to be per domain?\nI would propose two things now:\n1) Make the DB name more unambiguous. Something like localForageStorage maybe? (I still have no idea where I had the asyncStorage DB from, though. It must have been an older version of localForage I guess!?)\n2) Wrap this transaction in a try/catch and recover from a missing keyvaluepairs store somehow. I'm not sure if that's feasible.\n. ",
    "brandonros": "I've never experienced this issue until today and now I am receiving it like crazy.\nIt's on .setItem for me.\nMac OS X 10.11.1\nChrome Version 48.0.2564.23 beta (64-bit)\nWhat's weird is the exception is thrown and caught by the debugger, but it doesn't seem to have any negative side effects. All of the code seems to work.\n. ",
    "sebweaver": "@siddo420 Which version do you use?\n. Please upgrade to the latest version, multiple storages on the same db has been fixed here and released in version 1.3.\n. Ok, It looks identical to issue #492 now. I think we should continue there.\n. +1 too!\nBy the way, for now, changing the version of an existing IndexedDB raises:\n\"Uncaught ConstraintError: Failed to execute 'createObjectStore' on 'IDBDatabase': An object store with the specified name already exists.\"\nAs a result, the data versioning have to be managed \"manually\" in another way.\n. @mbalyaba Your workaround shouldn't be necessary because this issue (similar to #342) has been fixed by https://github.com/mozilla/localForage/pull/452 and released in 1.3.0 (and 1.3.1 for Ember).\nWhich version do you use? Do you have any error in the console?\n. @tofumatt I think we should close this issue, since it's related to #342 which has been fixed.\n. @mbalyaba You may now experience the following issue with Chrome on first startup:\nFailed to execute 'transaction' on 'IDBDatabase': The database connection is closing.\nIf so, please refer to #492 in which it has been recently reported.\n. I've created the PR https://github.com/mozilla/localForage/pull/452 with a proposed implementation for fixing this issue. I hope it could help.\n. On PR https://github.com/mozilla/localForage/pull/452 I've fixed the test as commented above, and proposed an implementation in order to make it pass again. This implementation covers the IndexedDB driver of course, but since the test also highlighted an issue in the localStorage driver, the implementation covers the latter too.\nPerlun's analysis of the issue in IndexedDB is very accurate. However, I dismissed the first workaround because whereas it could be simple in appearance, it also reveals some pitfalls. First of all, it changes the current specification for creating a localForage instance. This could lead to some confusion when used with drivers which didn't need that trick in the first place. The second pitfall is the way to address the correct store, from a single localForage instance, without changing the current specification and implementation of other APIs such as setItem and getItem.\nSo I finally decided to base my implementation on the second workaround, except it doesn't increment the version every time the database is opened, but only when necessary, i.e. when a new store is detected.\n. > I have a few nitpicks about variable names and stuff\nSure, feel free to change them, or ask me to change them. English is not my native language, I won't be offended and be happy to improve things... ;-)\n. Hmm, I don't really see how to test this the right way. It's not an API, not a use case, it's just a code pattern which was not relevant for what it is intended to do.\nI mean, for (x in y) pattern should be reserved for iterating over attributes of objects, whereas for (i = 0; i < a.length; i++) pattern is more relevant for iterating over indices of plain arrays. I made this mistake when submitting #452, but to my mind, it's not really necessary to test this. Don't you think?\nIf you think it's worth it, let me know how and I could implement it and add it to the PR.\n. @TCMiranda I can reproduce this error too with Chrome.\nIn FF, the error message is a bit different:\nInvalidStateError: A mutation operation was attempted on a database that did not allow mutations.\nBut the reason is the same, and I think I have figured out it.\nI will commit a PR very soon to expose the problem and fix it.\n. I have created a new PR which should do the trick this time (with a dedicated test).\n. I forced the database to be deleted before the existing tests on multiple instances.\nAnd the latter failed until I added the new implementation.\nSo I think this is sufficient, but If you have a different test case in mind, I could add it to this PR.\n. I think you might had right about the test coverage, since this PR created new issues...\nAnyway, I created a new one here: https://github.com/mozilla/localForage/pull/507 (with a more dedicated new test)\n. It's because the dist files, reflecting the change https://github.com/mozilla/localForage/commit/2f197241de1039da9569295bf3c878ec0f6c2bdf, have not been committed yet.\nYou should wait for release 1.3.3 which would include this patch.\n. It lacks the following:\njavascript\nlocalforage3.setDriver(driverName)\nI think that's why tests pass whereas they should fail, depending on the default driver used by the test environment.\n. My bad, you're totally right about globalObject! It's the first thing I did on this PR and I forgot to change it. I will attach this container locally in the IndexedDB driver, name it dbContexts, as you suggest, and update the PR.\n. No issue in particular AFAIK, but necessary to fulfill the new test case of this PR.\nIn fact, it's surprising the support of storeName hasn't been implemented before. At least in the same time than the two other drivers. In any case, I didn't see anything about that in the localStorage driver.\n. Not my choice of name. :-)\nI've just adapted the test to make it pass with the implementation of the storeName namespace of this PR. The original name was here:\nhttps://github.com/sebweaver/localForage/blob/issue-342-multiple-stores-on-same-db/test/test.config.js#L78\n. Test cases already exist here:\nhttps://github.com/sebweaver/localForage/blob/issue-342-multiple-stores-on-same-db/test/test.api.js#L772\nAnd there:\nhttps://github.com/sebweaver/localForage/blob/issue-342-multiple-stores-on-same-db/test/test.api.js#L799\nI just enriched them and they failed for localStorage too (not only IndexedDB). That's why I added the above implementation. Far simpler than for IndexedDB by the way... :-)\n. No, there's no nested promise here, but a chain of existing promises which have been already resolved of rejected individually. If a rejection occurs in a chain of promises, it bubbles up and the whole chain is rejected.\n. My first idea was indeed to wait for other localForages to be ready, and by \"ready\" I mean \"fulfilled\" (sorry if my comment in the code wasn't clear enough about that). This goal of this implementation is to act as a kind of \"transaction\" actually. Thus, if several instance are created on the same database and one of them fails (like in @thgreasi's example) this implementation prevents, indeed, the next ones to be created. The idea behind that is to avoid any side-effect or inconsistency which might result from letting the process continuing. I mean, if multiples stores are involved in the same database, they are highly probably related somehow. And if an error is not explicitly handled at the initialization time, it has to be handled at a later time anyway.\nThat being said, I see your point. While my solution forces users to handle errors at initialization time, your solution to wait for localForages to be \"not pending\" (i.e. fulfilled or rejected) is indeed less restrictive and let them decide where and when to handle errors. So, on second thought, you might be right.\nHowever, the way you suggest to achieve this goal can't work. Just adding an empty catch() on a promise doesn't change the status of the latter and leaves it as is (i.e fulfilled or rejected). So the promise array Promise.all(ready) will be globally fulfilled or rejected in the same way as before. On the other hand, a solution would be to return an self-resolved promise in case of error:\njavascript\nready.push(forage.ready().catch(function() {\n    return Promise.resolve();\n});\nWhereas this pattern could be confusing, if not commented, it gets the job done.\nNow, the question which has to be decided is: what behavior do we want for users?\nNote: I hope my english is clear enough (here or in the code), it's not my native language...\n. Because i is already used above and jshint complains about that during the tests (with or without var). Since I didn't want to change the jshint config, I used another name. :-)\n. I admit it's a bit confusing, but \"restoring the chain\" doesn't mean changing the status of the original promise. And thankfully so, otherwise one can't be able to start different (and concurrent) chains on the same promise without massive side-effects between them. Promises are only, and exclusively, resolved or rejected by the executor given at their initialization.\nHere is a jsbin which illustrates this. It's based on the MDN example above and completed with our two arrays of promises. As one can see, even though catch() restores all chains in which it's been involved, only the second array pAryB is actually resolved.\n. > I never meant that a p2.catch() would alter the promise stored in variable p2 (if not reassigned).\n\nThe fact is that .catch() will always return a new Promise so p2 != p2.catch().\n\nFine! In fact, I just based my reasoning on your original suggestion using an empty catch vs. returning a new resolved promise. Sorry if inferred things that should not be. :blush: \nFor the record, I've updated this jsbin with the new case.\nNow we are sure that en empty catch won't do the job unless any function is passed, the main question still remains: should the initialization process wait for others related instances to be fulfilled (current status of this PR) or just not pending?\nAs I said before, on second thought the second solution appears to be more flexible to users. If accepted, I can update the PR very soon.\n. PR updated!\n. It's related to https://github.com/mozilla/localForage/commit/47aaaa82c7c86416e9e000973c5b105ca868e8cd\n. ",
    "tundesky": "how to solve the problem of uncaught dom exception failed to execute idbDatabase as one of the object store was not found. ",
    "leecade": "thanks @tofumatt.\nThe problem is the integrity setting on the AppData\\LocalLow folder in most user's profile is \"Low\", this cause we have no permission to use localstorage.\nDeveloper Tools says \"SCRIPT5: Access is denied\".\nThere are two ways to fix it, change IE settings or set the integrity level correctly on that folder.\nUnfortunately, these two ways are useless to me, so I'm looking for solutions.\n. just try:\nif(window.localStorage.getItem('phone') == null)\non IE10 + WIN7\nvia http://stackoverflow.com/questions/13102116/access-denied-for-localstorage-in-ie10\n. ",
    "jontewks": "You are absolutely right. I am not a lawyer either, I was just reading through the docs and came across the license and saw at the top it was labeled for 2004 and I knew that it was supposed to be current year, which is the only reason I went into it and started reading. Then I came across those paragraphs at the bottom where they ask you to enter the year and the company name, which was left out in the current license. I also don't see a real reason to remove all the licensing information other than thats what Apache asked at the bottom. Perhaps you could just add the year and company name and include all the text? I don't see what would be the cons of leaving that all in.\n. ",
    "ahanriat": "Ok, I'll run JSHint on the code. \nShould I wait for the initStorage from the #99, or go on something like window.LOCALFORAGE_INFO ?\n. Ok, I'll rebase and do the window.localForageConfig.\n. It's ok ;) , I'll rebase and update spaces issues. \nWhat do you think about the prefix key for localStorage driver ? Is it a good idea to prefix all keys ?\n. I've fixed tests, simplified the prefixKey and add some documentation.\n. As @nantunes  said, we should'nt know which driver is used by localForage, and have the same result no matter what is the driver (i.e. keep the same API). However localStorage is a bit complicated because it's not a database such as Indexeddb or webSql. A solution for length method could be to iterate over all keys and only sum containing the prefix. But this will add a lot a performance issues, (constant complexity to linear ), and I don't like that ;)\nI didn't figured out the best solution, but notice that even before adding the db configuration, clear() key() and length() methods already had some problems when using localStorage aside. \n. This is for Vim editor, it creates automatically .swp files\n. ",
    "inf3rno": "http://dev.w3.org/html5/webstorage/#the-storage-event\n. I don't think the others have something like that, so I think you can emulate it only by short polling the databases and adding a lastModified timestamp to them.\n. https://developer.mozilla.org/en-US/docs/Web/API/window.postMessage?redirectlocale=en-US&redirectslug=DOM/window.postMessage\nSo if you have this postMessage then you don't need to ping the db from every opened window, just from a single one and after that share the information with postMessage.\n. Other possible solution to share the info between tabs is using a shared webworker...\nSo I think you should only poll for the last change timstamp from a single window, and share that information with the other tabs with shared webworkers or window.postMessage, or some other intertab communication channels if it is possible... If the db polling window is closed, then the other windows should have an intertab timeout and after that timeout they can automatically choose another db polling window.\n. Okay, thanks!\n. ",
    "TheNeikos": "Is this still a thing?. Well, one thing that it is really useful for would be for things like these: https://github.com/rt2zz/redux-persist-crosstab\nThis would make it easier to 'just' make it work, instead of having to use localStorage.. ",
    "pennyfx": "@tofumatt   NuGet does js packages too.\n. ",
    "ichpuchtli": "jQuery, Bootstrap, etc all have NuGet packages which inject the distributable javascript files into a /Scripts folder for you ASP.NET web applications.\n. jQuery has 5 million downloads through NuGet http://www.nuget.org/packages/jQuery/\n. Hi Guys, It works now. I used the NuGet Package Explorer to help build the package.\nHey @tofumatt please let me know if your happy with the Author/License etc.. so I can push it to the official nuget.org gallery.  \nIf you want to publish it yourself register an account with nuget.org and follow the links to upload the compressed .nupkg file which I will email you.\nxml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<package xmlns=\"http://schemas.microsoft.com/packaging/2011/08/nuspec.xsd\">\n    <metadata>\n        <id>Mozilla.localForage</id>\n        <version>0.2.0</version>\n        <title>localForage</title>\n        <authors>Matthew Riley MacPherson</authors>\n        <owners>Mozilla</owners>\n        <licenseUrl>http://www.apache.org/licenses/LICENSE-2.0</licenseUrl>\n        <projectUrl>http://github.com/mozilla/localForage</projectUrl>\n        <requireLicenseAcceptance>true</requireLicenseAcceptance>\n        <description>localForage is a handy library that improves the offline experience of your web app by using asynchronous storage (via IndexedDB or WebSQL where available) but with a simple, localStorage-like API.</description>\n        <summary>Apache 2.0</summary>\n        <copyright>Mozilla</copyright>\n        <tags>localStorage, IndexedDB, WebSQL, async</tags>\n    </metadata>\n    <files>\n        <file src=\"Content\\Scripts\\localforage\\localforage.js\" target=\"Content\\Scripts\\localforage\\localforage.js\" />\n        <file src=\"Content\\Scripts\\localforage\\localforage.min.js\" target=\"Content\\Scripts\\localforage\\localforage.min.js\" />\n    </files>\n</package>\n. I'd be happy to maintain it if you give me your nuget.org API key or let me upload it.\n. Thanks @tofumatt,\nhttps://www.nuget.org/packages/localForage/0.2.0\n. ",
    "augbog": "Stumbling on this as I was wondering if localForage provided a way to help handle upgrades -- I personally would be very interested in this especially if we were able to provide a way for localStorage and WebSQL a way to migrate. I see packages like angular-localforage-migrations that wouldn't be as necessary if this were the case.\nMy original instinct that localForage versioning would somehow hook into IndexedDB but #658 showed that wasn't the case (thankfully there has been healthy discussion about this :D). Would like to see more thoughts around this though as I feel it would be a very useful feature.. @thgreasi yeah I actually didn't mean to suggest that the migration plugins aren't good -- if that's the preferred route for people to incorporate migrations in their apps, I just feel that should be specified somewhere (essentially #116) \ud83d\ude1b . Just curious what the status of this is?. @tofumatt Thanks for the quick reply! I really appreciate all the hard work :) may try to help if I can with documentation parts (assuming I understand them correctly :P). Yeah if there are thoughts on how to clean it up and/or more concise, I'm totally willing to make those changes! Also, if it makes sense, linking to the issue/discussion in the documentation is another option to help make it not seem as verbose but it sounded like a huge complaint in the ticket that there were some underlying things that the version option was doing that people wanted to know about.. Hey just curious if this is sufficient to merge? I know people are busy so no worries if busy! Just wanted to check in :). Thanks @tofumatt! :) Yeah if there's feedback on how to improve it, more than willing to help update! Also looking into #117 although best option might be to make a plugin as suggested.. ",
    "canuckistani": "@tofumatt I looked into this more, the use of es6 promises is a problem for sdk compatibility. I think what I'm going to do instead is write an sdk-specific implementation that steals a lot of code from your driver and has the same api.\n. ",
    "albertogasparin": "It looks like the the Webkit build (535.19) is based on Chrome 18, which uses setVersion instead of onupgradeneeded. \nhttp://www.aaron-powell.com/posts/2012-10-18-dbjs-chrome.html\nHowever, I'm skeptical about supporting such an old version of indexedDB. I haven't carried out any test yet, but this report on Chromium states that indexedDB performance on those builds is terrible: http://code.google.com/p/chromium/issues/detail?id=122831\nSo, adding complexity to achieve worse performance...\nBy the way, I'll make a pull request\n. Sorry to reopen this, but I've just noticed that executing\nindexedDB.open('localforage', 1).onupgradeneeded\nprevents the _initStorage function to successfully initialize the indexedDB database. So the whole library suddenly stopped working. This could be easily fixed with a different name for the db check.\n. Great! Didn't noticed that. Well done.\n. ",
    "mizchi": "Is this bug that one?(sorry, coffeescript)\ncoffeescript\nlocalforage.clear =>\n  localforage.getItem 'foo', (first) =>\n    console.log 'first expect undefined', first\n    localforage.setItem 'foo',  'something else', =>\n      localforage.getItem 'foo', (second) =>\n        console.log 'foo expect existenece', second\nFirefox works correctly but Chrome returns another values by each execution.\nI was confused why.\n. @tofumatt thx. It occurs Chrome 34 on Mac.\n. ",
    "vaughnroyko": "Just a note about this. I ran into this recently and have not been able to pinpoint the exact steps to reproduce. So far, I have been able to successfully use multiple setItem calls onbeforeunload for localStorage, IndexedDB and WebSQL in the latest Chrome; however, if I am refreshing, and not just closing, it will seemingly not work, but only when the data is quite large (>2.5MB). \nIf I am refreshing the page with small sets of data, it will indeed work, or closing with small or large sets of data, it will also work.\nMy only guess is that refreshing the page (and not closing) fires a faster onbeforeunload cycle and if the data is large enough, it will stop execution prematurely. It may be safe to assume this could be based on actual hardware specs/Chrome performance and perhaps if the data is large enough, it could fail on close or refresh but have yet to dive that far into it.\n. ",
    "dgavey": "It is completely inefficient, I wish the storage methods had a native way to get the size, would make this way more simple. I'll see what I can do for the localStorage driver for now. Hopefully I can come up with a reasonable method for size calculations.\n. I looked into it further, not only would I be 'just guessing' at the size in storage, but each browser stores data differently. The best I could do is measure character size, and that's not even good enough.  Here is a blog post I found regarding max size of localStorage.  http://www.stevesouders.com/blog/2014/02/11/measuring-localstorage-performance/  Too bad it won't work out.\n. ",
    "pgherveou": "Here you go!\nOne more thing, component is now using  tagged version url to download dependencies  since https://raw.githubusercontent.com/mozilla/localForage/0.4.2/component.json does not exist since I added the file after you published the version could you bump the version or recreate the tag?\n. @fczuardi this should work with component not browserify for now\nI didn't work on the browserify integration, since @tofumatt told me it was broken.\nI am not super familiar with browserify but from my understanding we would need to add the promise dependency to package.json to make it work with browserify as well\n. Replying to your two questions above:\n- https://github.com/component/guide/blob/master/component/vs.md#component-vs-browserify\n- localforage.cmp.js is just used for the casper test, its not aimed to be shipped, that's why I added the file to .gitignore. \nAnd for your last point, i leave it up to you!, but I would say that If you support component that would make pacakge that depends of localforage like mine (https://github.com/pgherveou/lru-cache) easier to maintain..\n. Great thanks @tofumatt!\n. Both private and non private return webSQLStorage\n. yep this should not be necessary, I ll try to fix the tests as soon as I get a decent connection to npm install everything\n. Working now, the test does not check for the specific version of promise anymore\n. thanks @tofumatt  see my notes above\nfor the future we might want to use semver range for versioning this is what the doc suggest\nhttps://github.com/component/guide/blob/master/changelogs/1.0.0.md\n\nPlease use semver ranges in your public components. You'll notice when you component install /, components will now be installed with a ^ if > v1.0.0 and ~ otherwise. Since we're dealing with frontend development, we want as few duplicates as possible. But please, stop using *!\n. Oups sorry for the delay it seems to be an issue with the promise library\nhttps://github.com/then/promise/issues/53\n. that's part of the component specs, each component has a name and a version \nyou consume it by adding a dependency in your consumer project (check this https://github.com/pgherveou/lru-cache/blob/master/component.json#L6)\n. require statment already define dependencies between your files so that's all you\nreally need to define the component. That's how you would do in node isnt'it? Component is not much different except that it targets the browser.\n\nAlso I didn't include the promise polyfill dependency, \nIf you build your project with component, you will probably prefer to add the \ndependency somewhere else in your project to avoid duplicated code\n. I can do that, but I am not familiar with browserify. How you use the browserify build currently?\nI would proceed the same way using src files \nbrowserify src/localforage.js -o dist/localforage.browserify.js\nand then add a test.browserify.html that reference this file and a test.browserify.coffee to test that with casper, is that the correct way?\n. There was one but the npm package actually advise to use shell,\nhttps://www.npmjs.org/package/grunt-component.\n. That would break, if you don't include a Promise polyfill..\nI thought it would be better to let component user include the promise polyfill of their choice (I personally use https://github.com/then/promise). \nI can add the dependency if you prefer.\n. Don't think so I can either write it like that\n'component-build -o dist -n localforage.cmp' but then you would need to install component globally (npm install -g component)\nor use some boilerplate code and make it work with path.resolve\nThe script produced is only useful for the test so if you can't run you just end up with a failing test...\n. Just added promise as a dependency\nI had to write the same line (https://github.com/pgherveou/localForage/blob/master/src/localforage.js#L5) in localstorage.js and each driver file to make it work\n. it enables aliases\n\nalias - alias components with their shortnames. Allows you to require() components outside the build without worrying about versions.\n\nsee full explanations here https://github.com/component/builder2.js/blob/master/docs/scripts.md\nThe generated file is only used in our test, so it has not impact on production\n. yep you are right just a hack :)\n. ",
    "fczuardi": "@pgherveou when you say require('promise') which promise will browserify load? I've tried your pull request and the generated localforage.js after grunt build does have the proper ./drivers/... paths in it, but I still get:\nError: module \"promise\" not found\nI see that grunt concatenates promise.js from bower_components, however that file doesnt look like it is exporting any module (nodejs require style), or at least a search for modules.export don't return anything\u2026\nShould I install es6-promise with npm install es6-promise and then use require('es6-promise'), or even require('es6-promise').Promise as the README instructs?\nAnyways, I am still trying to integrate localForage in my browserify workflow and I can update this thread if I have any progress.\n. Well, using require('es6-promise') I get TypeError: Promise.reject is not a function in the browser, while using require('es6-promise').Promise I get TypeError: Promise is not a constructor in the browser.\nAnd my browser does support Promises AFAICT (firefox nightly).\n. ",
    "omggga": "Hello from 2017!\nStill not possible to remove several keys with one call?\nNow making this one\nPromise.all([\n    localforage.removeItem(key1),\n    localforage.removeItem(key2)\n]).then(function(res) {\n    console.log(res);\n});\ncould be more beautiful if\nlocalforage.removeItems([key1, key2, key3]).then(function() { } );\n. Oh, thank you!. ",
    "tomByrer": "Cheers, & thinks for the pointer!\n. cool, thanks for the details\n. Yes, 'tis a shame.  I was sad that I couldn't show off your repo when doing a GitHub search; I had to dig though sourcecode to find you.\n. Thanks, & got instant results also!\n\n. ",
    "wmluke": "Also, I'm happy to submit a PR with some unit tests.  Just let me know.\n. @tofumatt, Sorry for the delay.  I'll get you the PR tonight.\n. Oops, my auto code formatter can be a too aggressive sometimes...thought I had disabled.\n. ",
    "tomchentw": "I came across localForage to solve the same Private Mode issue too. However, I found a demo page here: http://www.javascriptoo.com/localforage/example\nand when I tried in console, the returned promise will be rejected. So I think that's what I need.\n. ",
    "JustinDrake": "localforage is still failing in private mode on Safari.. @tofumatt: I know that IndexedDB works in private mode, so in theory localforage could use that.. \n. I'm using Safari Version 10.0.3. But I think version 10.1 is that latest stable release. Do you mean version 10.0.2?. ",
    "tianissimo": "I found this error after upgrading to 0.8.0. Before that, there was no such an error in version 0.6.2.\n. ",
    "toobstar": "I'm seeing this too. \n. ",
    "robkorv": "I have this to with v0.8.1 on Mozilla/5.0 (Windows NT 6.3; WOW64; rv:29.0) Gecko/20100101 Firefox/29.0.\nPlz let me know if i can help by testing a branch. Just point me to it and I'll find some time.\n. ",
    "alexandremottet": "I don't see this error on the improve-tests branch anymore\nI think the commit above has fixed the bug.\nMaybe someone just need to report the fix to the master branch.\n. I think I would be able to make a PR by the end of the week.\n. There is a quick and dirty workaround.\nThere is also a Codepen example : http://codepen.io/anon/pen/oajcC\nWrap the clear callback function in a setTimeout(..., 0)\nI think the reason is Chrome try to optimize call to IndexedDb by analyse the javascript event queue.\nBy adding a setTimeout, the callback call is moved at the end of javascript event queue.\nMore : \nMDN setTimeout\nwhy use setTimeout\n. This work around could be enough for me.\nDo I need to make a PR with the edition of getItem and setItem method ?\nCould look like that :\nif (callback) {\n    setTimeout(callback, 0);\n}\nOr maybe just an 'official' note on this issue ?\n. Ok, thanks for the link !\nDoes the generic function should be only for this driver ('indexedDb') or for all ?\n. A deferCallback function is now present in the indexed driver.\n. I've tried with the first version of localforage (3.0) which support requirejs and it does not work either.\nI'm assume the function has never worked as intended.\nI'm assume the following :\n- When requirejs load localforage this line is call :\n  localForage.setDriver(storageLibrary); (line 179 of localforage.js)\n- If the ready function is call too soon (like is the data-main) the driver has not been fully loaded \n- Because _ready function call a specific driver function (_initStorage), the program crash.\nI'll try to find some fix.\n. I\u2019ll try to push the fix out this weekend.\n. I think CasperJS is able to catch error on a page which will indicate that the loading has failed.\n. The last version of localforage (0.8.1) was make 2 month ago and does not include last features (like keys method).\n. ",
    "WMeldon": "I'm not entirely sure actually, but I didn't see an issue in their bug tracker.  I'll keep an eye on it and dig in to the issue if I have time.\nIn my experience, Chrome Canary is generally riddled with bugs that come and go every couple of days.  I'd give it a week or so to see it get fixed.  \nIf I can get a test-case working I shall let you know.\n. http://jsfiddle.net/XVu9f/1/\nMade a super simple JSFiddle test case.  Only fails in Chrome Canary for me, but not every time.  Every now and then, it'll miraculously pass.\n. I can confirm this is now periodically failing in Chrome Stable and Opera :(\n. ",
    "humphd": "We ran into something like this with Filer, which does the same sort of thing as localForge (wrapping indexeddb, websql, etc), where Chrome optimizes readonly and readwrite transactions, see https://github.com/js-platform/filer/issues/128.  For cases where you have a readonly transaction in the callback of a readwrite transaction, Chrome will snapshot and give you a result before the pending write operation is committed.  What we did to solve it was move to readwrite transactions for everything, which sucks, but sucks less than data inconsistency.\n. ",
    "lddubeau": "This is an issue in Chrome 38. I'm running code which is basically doing something like this:\nlocalforage.clear(function () {\n    localforage.keys(function (keys) {\n        keys.forEach(function (key) {\n             localforage.getItem(key, ...);\n        });\n    });\n});\n(Before someone points it out: yes, I noticed iterate() has been recently added but it does not seem released yet. What you see above is a representation of what happens when the user requests that the database be cleared: clear and then refresh what is shown to the user.)\nThe issue is that by the time keys() executes, the clear() operation has not completed so I do get a list of keys but by the time getItem() is called, the clear() operation is complete so all the values are null. So if the user had a database with 2 items and he requests it be cleared, after refresh, he's going to see two blank rows. Reloading the page or requesting that the database be cleared again will produce correct results. \nThere's no problem when I use removeItem to delete just one item.\nThe same code works flawlessly in FF 31.\n. @tofumatt Yes, iterate presents the same problem, with the difference that iterate returns the keys and the values that existed prior to clearing the database. So from the user's POV it is like nothing happened at all! As before, clearing twice or reloading the page shows a cleared database.\nI'm working around this issue right now by polling the database after a clear until the length is 0.\n. I've just discovered while writing tests that this problem also happens with removeItem. It just happens more rarely with removeItem than with clear. The sequence of operations is the same but with removeItem instead of clear:\nlocalforage.removeItem(function () {\n    localforage.keys(function (keys) {\n        keys.forEach(function (key) {\n             localforage.getItem(key, ...);\n        });\n    });\n});\nAnd the symptoms are the same: keys will have among its keys the record that should have been deleted, and the record will actually be deleted after keys is done returning its data but before getItem is executes its database query. So getItem won't return data for the record what was deleted, even though keys did return a key for the deleted record.\n. ",
    "kkartunov": "No, I don't see a use-case to change the storeName of a instance. What I mentioned/wanted is same thing as #4, #45. Thanks for pointing them out.\nWe want to use the localForage as a base and build up on it with a sync functionality to remote persistence layer. But restricting to a single object and a single namespace is not a good road to go from the beginning. Currently localForage registers itself as a object not as a factory so one wouldn't be able to instantiate it with different storeName configs either, right?\n. OK. Thank you, will follow the devs..!\n. ",
    "kid-icarus": "I've been seeing stuff out there convincing me that Gulp is better than Grunt and Broccoli. You should switch over to that instead of clunky Broccoli.\n. ",
    "stephanebachelier": "There is also babeljs which was previously 6to5.\n. @thgreasi for older browser you must use the es5-shim and the babel polyfill.\nThere is a section at the end of babel caveats page\n\nBy default, when using modules with babel a non-enumerable __esModule property is exported. This is done through the use of Object.defineProperty which is unsupported in IE8 and below. A workaround for this is to enable loose mode - modules.\n. @mwager see https://github.com/jrburke/almond#deps-is-undefined.\nI've updated my PR to make the tests go green.\n\nAs commented in my PR, as we use require.config.paths, I do not see while we could not export localforage by setting its AMD module id.\n. I've update the test to use the AMD module id. So instead of using require(['dist/localforage.js']) you should use the require(['localforage]) and use the config.paths.\nUsing the AMD module id is less portable but it will works as is in an almond build, and also using require.js using the config.paths which is already a must when using 3rd parties.\n. @thgreasi why would you need a custom driver for cordova application ? In my experience, localForage works great in cordova apps. It's the better solution I've found for now and it works as is with no plugins needed. Do you have any specific use case ?\n. @jprichardson I did not see this use case. Excellent if local forage can support cordova-sqliteplugin.\nSo +1 for custom driver :)\n. it should point to the comment about webpack warning in https://github.com/localForage/localForage/issues/577#issuecomment-224756147. ",
    "jamiebuilds": "Hi I'm a Babel contributor. @thgreasi if you want to leave out the \"use strict\" you can blacklist it. If you want to see an excellent example of how to write a library with Babel check this out: https://github.com/babel/babel-library-boilerplate.\nIf you need any other help let me know or ask in our support chat: https://gitter.im/babel/babel\n. We're looking to improve that in the future, right now if you need a global in the UMD you can use esperanto like the boilerplate does.\n. I don't know how you'd dynamically load something in a UMD. You could certainly do it if you were using a module loader like system.js.\n. Yeah but the point of the UMD is to work in all environments (AMD, Common.js, Globals).\n. ",
    "RangerMauve": "System.import is apparently the future since it's being officially standardized. I'd give a -1 to moving away from that.\n. Huh, good point. I hadn't heard about that yet.\n. Would the docs just be a section in here? Are there unit tests that cover the functionality that can be documented?\n. Going to assume that the stuff covered in the tests added here is the only thing that needs to be documented.\n. I'm not 100% sure yet, but I'll post here in the evening to confirm.\n. Thar she blows, I guess\n. Any ETA on the docs for this?\n. Oh weird. It seemed to work yesterday.\n. Sounds good! :D\n. I based the docs around the unit tests that were created when this feature was added in.\nTo be honest, I hadn't really tested it too much myself.\nThe tests only reference storeName, though.\n. So it does. I must have missed that. I'll add it in. (This evening)\n. Sorry for the late reply! I currently don't have stable access to the internet. Glad to see this merged in, though! :D\n. What is this for?\n. Oh cool! Thanks.\n. ",
    "megawac": "UMD supports AMD which is all about dynamic loading no?\n. ",
    "gkoberger": "For Firefox and Chrome, 3 versions is generous. With auto-updating, almost nobody is stuck on an older version of either.\nIE is a different story; unfortunately IE8+ is probably fair. Although I guess that is approximately 3 versions ago, isn't it?\n. ",
    "jvatic": "It appears indexedDB (and vendor prefixed vars) and openDatabase are undefined within the failing web workers causing localStorage to be used as a fallback.\n. I using a build from the master branch with Firefox 29, 31, and 32.\nonconnect = function (e) {\n  e.ports[0].postMessage(typeof indexedDB);\n};\nfrom within a SharedWorker, and\npostMessage(typeof indexedDB)\nfrom with a Worker both send \"undefined\" to the parent. The closure doesn't appear to be effecting it.\n. Looks like this is a Firefox issue: https://bugzilla.mozilla.org/show_bug.cgi?id=701634\n. Would be great if localStorage wasn't a blind fallback and initialization failed rather than the success route being called.\n. ",
    "mwager": "maybe just checking if localStorage is supported and driver is available would be enough? see also #165 \nBut this would mean I have to use localForage with only the idb and websql drivers because there is currently no way to leave the localStorage driver untouched in the grunt file while optimizing for production...\n. Same here. This is the thrown error: https://github.com/jrburke/almond/issues/25\nAdding the following to dist/localforage.js works for me too:\ndefine('localforage', function() {\n    return localForage;\n});\nMy rjs config looks like this:\nrequire.config({\n...\n    paths: {\n        localforage: '../bower_components/localforage/dist/localforage',\n...\n. I cannot reproduce on firefox(32).\nBut it seems that the promise based version does not get rejected on \nChrome 38.0, Safari 7.1 (9537.85.10.17.1) on a mac (OSX 10.9.5) - though the \ncallback based version works. Also on opera 25.0.\nIn safari/opera, the then() method gets called, so the error is silently ignored.\nIt seems to be websql or localStorage related - see this commit (Branch \"issue-236\")\nps: Are there any unit tests on this issue?\n. So, it seems like this could be related to the TWO _serialize(item) methods\n(which are defined two times in dist/localforage.js!? only difference is \none does callback(null, e); and the other does callback(e); - ...why...?)\nbut both are called like this: (localstorage and websql)\n_serialize(value, function(value, error) {\n...\nThe problem is, JSON.stringify(item) will be called, but this raises no exception:\nJSON.stringify({foo: function() {}})\n-> returns \"{}\" - so no exception is thrown and the raw data is passed back \nin the callback...\n. ",
    "PatrickHeneise": "It's an iPhone 5s with the latest iOS 7.1.1, using angular-localforage module. Initialising in the app config part:\n```\n.config(['$localForageProvider',\n  function ($localForageProvider) {\n    'use strict';\n$localForageProvider.config({\n  name: 'XYZ',\n  version: 1.0,\n  storeName: 'keyvaluestore',\n  description: 'My Offline Storage'\n});\n\n}\n])\n```\nAnd using the web-app stuff from Apple together with a cache.manifest file:\n<meta name=\"apple-mobile-web-app-capable\" content=\"yes\" />\n<meta name=\"apple-mobile-web-app-status-bar-style\" content=\"black\" />\n<meta name=\"apple-mobile-web-app-title\" content=\"Guidal\">\n. ",
    "MoOx": "The previous workaround doesn't work so I end up with...\nln -s ../src/drivers node_modules/localforage/dist/drivers\nnow var localforage = require(\"localforage\") is working.\n. Well still not working. I'm posting before actually testing.\n\n. Maybe but it's not the same es6-promise polyfill.\n. ",
    "kud": "Gosh, we're the 6th july, and it still doesn't work with browserify.\nWhy people support bower and not npm/browserify first?\n. I will try myself so. ;)\nThank you @tofumatt \n. +1\n. ",
    "iamolivinius": "Is there any plan to support browserify again after PR #227 has been reverted?\n. Can I provide any help to land this PR in master?\n. I don't know if this would be sufficiant. There are no events for indexeddb and websql.\nI'm developing a browser extension. Within the content script I record user interactions and send them to the backend script to store the data into the extensions \"storage\". I also do have a popup UI to modify the recorded data.\nI would love to add observers from popup and content script react on changes to the storage. If a user changes something within the popup it should be possible to see the updates without a reload of the content script or a periodic query.\n. It occured while I was writing a custom driver myself. Thanks for the fix :+1: \n. Ah, I see. Just read the docs but the actual implementation looks fine. Sorry for the noise. :blush: \n. Maybe add another line like \nimport {setItem, getItem} from 'localforage'\nBesides that... LGTM :)\n. Funny you mention it. I was tinkering with that syntax, too.\nUnfortunately the compiler (typescript@2.0.3) throws an error for\ntypescript\nimport localForage from \"localforage\";\nsh\nmain.ts(1,8): error TS1192: Module '\"localforage\"' has no default export.\nThis is totally reasonable when you read the type definitions here: https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/localForage/localForage.d.ts#L114 \nand: https://github.com/Microsoft/TypeScript-Handbook/blob/master/pages/Modules.md#export--and-import--require\nI think an update of the type definitions is needed as well to get everything in line. \n. Typescript compiles this\nts\nimport lf from 'localforage'\nlf.getItem('1234')\nto that, right?\njs\n\"use strict\";\nvar localforage_1 = require('localforage');\nlocalforage_1.default.getItem('1234');\n. The problem I see is that the files under dist/ do module.exports only. I think export.default is missing for some reason.\n. npm install -g rimraf derequire ncp \n. The compiler does not generate different code if you make changes to your d.ts file only. But the compiler probably would throw different warning or error messages.\nBecause localforage is distributed as a UMD module and we're talking about Typescript modules we only need to concentrate on commonjs or amd.\nThe code below shows several ways of how you can \"import\" localforage into Typescript(1.8 & 2.0) modules. The code compiles without errors nor warnings. For TS@2.0 I used @types, typings for TS@1.8.\n``` ts\n// main.ts\n// with \"allowSyntheticDefaultImports\": true in tsconfig.json\ndeclare var require: any\nimport * as localforage from 'localforage'\nimport lf from 'localforage'\nimport forage = require('localforage')\nimport {setItem} from 'localforage'\nconst lfrequired: LocalForage = require('localforage')\nlocalforage.setItem(\"key\", \"* as\")\nlf.setItem(\"key\", \"default\")\nforage.setItem(\"key\", \"import=require\")\nsetItem(\"key\", \"named import\")\nlfrequired.setItem(\"key\", \"commonjs require\")\n```\njs\n// main.js\n\"use strict\";\nconst localforage = require('localforage');\nconst localforage_1 = require('localforage');\nconst forage = require('localforage');\nconst localforage_2 = require('localforage');\nconst lfrequired = require('localforage');\nlocalforage.setItem(\"key\", \"* as\");\nlocalforage_1.default.setItem(\"key\", \"default\"); // TypeError: Cannot read property 'setItem' of undefined                                                                                                                                \nforage.setItem(\"key\", \"import=require\");\nlocalforage_2.setItem(\"key\", \"named import\");\nlfrequired.setItem(\"key\", \"commonjs require\");\nWhen you run main.js in node or browser it will fail with the TypeError mentioned above. The reason for this are the different semantics between commonjs and es2015 modules.\nIn es2015 default exports can look like this\n``` ts\n// module.ts\nexport default \"hello world\"\n// main.ts\nimport text from './module'\nconsole.log(text)\n```\ncompiled to commonjs (amd is mostly the same)\n``` js\n// module.js\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = \"hello world\";\n// main.js\nconst module_1 = require('./module');\nconsole.log(module_1.default);\n```\nTS 1.8 & 2.0 as well as Babel since 6.0 transpile default exports in modules this way. Babel pre 6 did it different, see: https://github.com/babel/babel/issues/2212\nThese are the reasons why I think allowSyntheticDefaultImports: true is not compatible with localforage at this point. If you set it to false the compiler screams at you.\n@thgreasi I guess what you're basically trying to do in the current state of https://github.com/thgreasi/localForage-cordovaSQLiteDriver-TestIonic2App is to get localforage running with rollup (node-resolve && commonjs), right? I tried it myself and failed. Would it be possible to add the jsnext:main field to the package.json?!\nDisclaimer: I'm no Typescript Pro so you better double check what I wrote :smiley: \n. As far as I understand it:\nIf your tsconfig.json module target is (es6|es2015) and you're using a module loader/bundler like rollup or browserify you can set allowSyntheticDefaultImports: true and import localforage like this: \nts\nimport localforage from 'localforage\nIf you set allowSyntheticDefaultImports: false you can't use rollup.\nIf your module target is (umd|commonjs|amd) setting allowSyntheticDefaultImports: true would be wrong. You should stick with \nimport localforage = require('localforage')\nI think changing the typings to \nts\ndeclare module \"localforage\" {\n    let localforage: LocalForage;\n    export default localforage;\n}\nwould be wrong at this point. Basically because there is no export.default in the localforage umd module. See also first bullet point: https://github.com/Microsoft/TypeScript/issues/2242#issuecomment-83694181\n. What do you mean by \"fixing the rules\"? Drop the new rules or fix the parts that were highlighted by the new rules?\n. Usually this is true: this === window but within browserify that's not true any more. That's the reason why all conditions like (this.localStorage) and so on fail and no driver can be selected. \n. ",
    "mshwery": "dang, this is still broken with browserify\n. @thgreasi thanks for the extra info. I checked those out but their setup really isn't different than my use case, other than the fact that i'm using a separate bundle. I'm still bundling the same way, and importing the same way.\nI left more details here: https://github.com/mozilla/localForage/issues/412#issuecomment-135049022\n. I\"m experiencing the same issue (https://github.com/mozilla/localForage/issues/412#issuecomment-127336708) grabbing localstorage with browserify in split bundles.\nI'm on:\nnpm v2.14.0\nbrowserify v11.0.1\nlocalforage v1.2.8 (the latest available on npm)\nI have a \"browser\" section in my package.json pointing to the actual dist file.\npackage.json\njson\n  \"browser\": {\n    \"localforage\": \"./node_modules/localforage/dist/localforage.js\"\n  },\nI'm grabbing all things from this \"browser\" property and requiring them on my vendor bundle:\ngulpfile.js\n``` js\nvar browserify    = require('browserify');\nvar source        = require('vinyl-source-stream');\nvar buffer        = require('vinyl-buffer');\nvar vendorBundle  = browserify({ debug: false });\n// grab dependencies to be bundled as a separate file vendor.js\nvar dependencies = Object.keys(require('package.json').browser).map(function(module) {\n    var resolvedPath = require.resolve(module);\n    vendorBundle.require(resolvedPath, { expose: module });\n    return resolvedPath;\n});\ngulp.task('vendor-bundle', function() {\n    vendorBundle.bundle()\n        .pipe(source('vendor.js'))\n        .pipe(buffer())\n        .pipe(gulp.dest('./public/js');\n});\n```\nI have an app.js that also gets browserified with babelify using:\napp.js\njs\nimport localforage from 'localforage';\nthe build results in:\nbash\nError: Cannot find module './../utils/serializer' from './node_modules/localforage/dist'\nError: Cannot find module './drivers/indexeddb' from './node_modules/localforage/dist'\nError: Cannot find module './drivers/localstorage' from './node_modules/localforage/dist'\nError: Cannot find module './drivers/websql' from './node_modules/localforage/dist'\n. To follow up, import and require output no errors if I include localforage in the main app.js bundle.\nIt only fails with error output when specifically grabbing the ./node_modules/localforage/dist/localforage.js or .min.js variants and putting them in a separate bundle (note, this is the only package that is having any issues).\n. @tofumatt @thgreasi you are probably right that I should just specify a list of modules, but in my case if the package provides .min versions I would rather bundle those than do minification unnecessarily myself. Whatever is in the dist directory should all be fully working packages without any build step (at least, for client-side packages that should be the expectation).\nRegardless, I'm pointing to the exact same file as localforage's package.json: https://github.com/mozilla/localForage/blob/master/package.json#L49\n. ah, gotcha. thanks for all the help guys!\n. ",
    "apz77": "Maybe save the setDriver promise and use it in ready() function:\n```\n// Set the (default) driver.\nlocalForage._driverReady =  localForage.setDriver(storageLibrary);\nready: function(callback) {\n    return this._driverReady.then(function() {\n        if (this._ready === null) {\n            this._ready = this._initStorage(this._config);\n        }\n        this._ready.then(callback, callback);\n    return this._ready;\n})\n\n}\n```\n. ",
    "JosephClay": "Underscore typically refers to this as defer. Could move the callback check into the generic function as well for this use-case.\n. Sorry @tofumatt , looks like this problem is a private browsing issue. I'll delete my test repo.\n. ",
    "ghost": "I am experiencing the same issue with https://github.com/ocombe/angular-localForage\n. Is this still an issue? I'm looking to use this on a deployment to about 30 000 devices, most of which are running Android. \n. Was this a test of multiple web apps using the same localForage instance or something else? . ",
    "oleduc": "Same when using https://github.com/ocombe/angular-localForage and PhantomJS.\n. ",
    "skddc": "We just ran into this as well. iOS/Cordova. Any ideas how to build a test for Cordova?\n. ",
    "stevemadere": "I have hit this same problem with Cordova on Android.\nCordova v 5 or 6, Android V 5.1.\nIn my case I am using localForage to store a queue of images to upload\nin a background job so it is of critical importance.  After queueing about 12 MB\nof images (and calling $localForage.removeItem() on each of them\nafter each finishes uploading), all subsequent calls to $localForage.setItem() fail.\nThe calls to removeItem() all supposedly succeeded since they invoked\nthe success callback.\nThe OS app manager shows that the app is now using\n12 MB of data space even though I have called removeItem() on every single\nthing that I had previously called setItem on.  I have to delete all of my Cordova\napp's data via the app manager to get back to a state where $localForage.setItem()\nwill succeed again.\nAlong with cleaning up the leakage from the queue thrashing, I also lose the cached\nauthorization token and any other locally stored personalization and option settings.\nFun.\n. ",
    "guopengliang": "We used localForage v1.5.0 with the localforage.INDEXEDDB driver on iOS 10.3, and experience the dramatic increase in system storage usage. Reports from users, some increased a few hundred MB's and some even up to 13.71GB, while their actual records size is <=2MB!\nWe are still not sure what causes such increase, or what is in it. Now we have switched to the localforage.WEBSQL driver (still on localForage v1.5.0) alongside with the previously stored INDEXEDDB database. Surprisingly, even when we no longer read, write or initiates the INDEXEDDB database, system storage did not go down. \nIf this is what @stevemadere said a leakage from queue trashing, is there any way to safely eliminate it without completely reset the app? \n. Yes, I have tried creating a new instance and call clear(). But it didn't help, the storage usage didn't go down. I'm not familiar with IndexedDB API, so I might try this later.. @thgreasi I have tried to delete the entire IndexedDB with var req = indexedDB.deleteDatabase('localforage');, but somehow the request was blocked (req.onblock event called) and the delete operation failed.\nPerhaps this is because the IndexedDB itself was trying to execute the previously failed commands in the queue trashing, and also causing the trash to pile up taking that much of space? Is there any other way I could force delete it?. I believe this is not an issue specifically related to localForage. I also experienced this issue using native localStorage. When iOS system storage reaches to an almost full level, the user will be alerted with the \"system storage low\" warning, and iOS will clear all the localStorage data.\nI am wondering is this also affecting the WebSQL storage? Has anyone experienced data loss using localforage.WEBSQL driver?. I'm referencing some of the issues I find related to this: #179 #254 #352 #642 \n. Closing this in favor of the other comment in issue #179.. ",
    "Pittan": "I'm experiencing to similar issue. \nIncrementing DB version number every time when createInstance will\nclear storage space.\nBut the storage still grows up until re-creating instance just like before.. @thgreasi \nI'm using LF v1.5.3 with iOS 11.1.2 & 11.2.1 using from AngularJS 1.5.\nThe document says the version parameter of config is not used, but it seems to be working.  \nSo, when creating instance of localforage, I wrote like this\ntypescript\nconst ver = new Date().getTime() / 100\nconsole.log(`open IndexedDB: ${ver}`)\nthis.localforage = $window.localforage.createInstance({\n  driver: $window.localforage.INDEXEDDB,\n  name:   'imageCache',\n  version: ver\n})\nIt will solve this issue temporally, but it will cause ConstraintError.\nIn my iOS App, writing a lot of data to IndexedDB will make a huge .wal file to its storage.\nAlso, when I wrote another code to use IndexedDB directly, I found that closing DB expressly after writing will clean up the .wal file.\nMaybe something like flush() will solve this issue.\nMore later, I will make a repro code (if I can \ud83d\ude04 ). No, I was saying about raw IndexedDB APIs. \nBut I tested this.localforage._dbInfo.db.close() and it works, too!. I created a test repository and a test page.\nWhen the page is loaded, it will fetch an image and store it to indexedDB using localforage.  \n-- \nWhen image data is already in DB, it will update the date.\nPress \"Reload\" to test that behavior. \nPress \"Reset\" to close db connection.\n. ",
    "frostney": "I'm having the same issue.\nEdit: If I require localForage as a script tag directly after require.js, like so\n<script src=\"require.js\">\n<script src=\"localforage.js\">\nit works. If I let require.js load the file on its own, it's producing the error mentioned above.\n. ",
    "davidascher": "Pinging @jrburke -- I was about to file a similar issue -- the localforage docs say to just include as a straight script src, but as a require-defined module that conflicts w/ require's instructions.\n. ",
    "matthewlein": "Works for me! Thanks @Aleanar \n. ",
    "lu4": "Yes you are right, the iteration itself is done via callback due to nature of the promises and absence of progress function which can be found in Angular or jQuery-like promises, so currently promise is used only for signalling that iteration has complete. I'm not sure I've understood what you mean by \"It's possible the Promise should never even resolve\", they should resolve when iteration complete, otherwise there will be no way of knowing whether the iteration is complete... I will provide tests and will checkout serialized values but I will need some time to get into project infrastructure, since I'm not currently aware of how to launch those tests...\n. Good point, by referring to Iterator you mention the ability to use moveNext() which would allow to trigger moveNext() only when it is required or exit iteration early. Definitely it would be a plus...\nI wasn't referring to neither Node.js nor to leveldb or imdb, they are out of scope for this project, it's obvious.\nIteration is the base building block for any development, it's intuitive to any developer so it doesn't make the interface complicated nor it shifts the goal of the project. So it's not clear why it is not yet part of localForage\n. One way I see it:\n``` javascript\nit('should simply iterate [callback]', function (done) {\n    localforage.setItem('officeX', 'InitechX', function(err, setValue) {\n        expect(setValue).to.be('InitechX');\n    localforage.getItem('officeX', function(err, value) {\n        expect(value).to.be(setValue);\n\n        localforage.setItem('officeY', 'InitechY', function(err, setValue) {\n            expect(setValue).to.be('InitechY');\n\n            localforage.getItem('officeY', function(err, value) {\n                expect(value).to.be(setValue);\n\n                var accumulator = { };\n\n                localforage.iterate(function(err, iterator) {\n                    if (iterator) {\n                        accumulator[iterator.key] = iterator.value;\n\n                        iterator.iterate();\n                        // Empty argument means that current function is used as the callback\n                        // or: iterator.iterate(iterator.callback);\n                        // or: iterator.iterate(function (err, iterator) { debugger; });\n                        // ...\n\n                    } else {\n                        expect(accumulator['officeX']).to.be('InitechX');\n                        expect(accumulator['officeY']).to.be('InitechY');\n\n                        done();\n                    }\n                });\n            });\n        });\n    });\n});\n\n});\nit('should simply iterate [promise]', function(done) {\n    var accumulator = { };\nlocalforage.setItem('officeX', 'InitechX').then(function(setValue) {\n    expect(setValue).to.be('InitechX');\n    return localforage.getItem('officeX');\n}).then(function(value) {\n    expect(value).to.be('InitechX');\n    return localforage.setItem('officeY', 'InitechY')\n}).then(function(setValue) {\n    expect(setValue).to.be('InitechY');\n    return localforage.getItem('officeY');\n}).then(function (value) {\n    expect(value).to.be('InitechY');\n    return localforage.iterate(); // no callback needed when working with promises\n}).then(function (iterator) {\n    if (iterator) {\n        accumulator[iterator.key] = iterator.value;\n\n        return iterator.iterate(); // returns new promise that is resolved recursively\n    } else {\n        return iterator; // Iterator contains undefined or null, iteration is completed\n    }\n}).then(function () {\n    expect(accumulator['officeX']).to.be('InitechX');\n    expect(accumulator['officeY']).to.be('InitechY');\n\n    done();\n});\n\n});\n```\nLooks idiomatic enough, the only thing I don't like are the recursive calls, not everyone would like that so it would be also great to support even more simple iteration without any additional calls, like one proposed initially\n. I've removed all of my today's comments, it seems that I've misunderstood the concept of callback, I didn't treat callback as operation completion callback, instead I've used it as an iterator callback. In any case I have just changed all that rubbish into proper format used in localForage, plus I've added few simple tests, all tests are functional + no problems with code style, please consider current push request\n. I personally feel the key/value order to be more soundy too, however the choice was made in favor of best practices used for example in jquery/underscore/lodash. The reason to make 'value' first is the fact that most information is stored in 'value', users tend to query 'value' more often than 'key'. To prove that try imagining the opposite situation, when users store their info in 'key' and iterating over collection to just collect keys without even referring to 'value', that seems less likely since in most cases the key gets omitted. But if key was first it would constrain each user to write down this argument in cases when they don't actually use it. As for examples in index.md, no problem, will be able to accomplish that tomorrow since now I'm already in bed\n. Ok, did it, I'm not very proficient with CoffieScript, please check CoffieScript examples since I'm not sure that there everything went well\n. Guys, any news on this change?\n. Thanks!\n. As far as I remember I should have sent a pull request to angular-localForage with this functionality, not sure whether it was merged or not...\n. Wow, great! Thanks!\n. Hi, I was looking forward to implement a separate bulk save, however if this approach doesn't modify the interface it's obviously more preferable, do you have some in progress work, I think I could help you with finishing it?\n. Ok, thanks, I will have a look into it...\n. It doesn't contradict anything and I didn't change my mind, I think having the ability to accumulate writes is a killer feature, it allows gaining near-maximum performance without changing the setItem interface, however under the hood you will have to save an array of items any way, so doing it in most efficient fashion would be reasonable, right? And setItems is the method that will allow to do that. Using both of these methods seems nice decision since it provides great basis for separation of concerns.\n. I'd go for automatic version anyway. In any case it would allow the existing code to get working faster without a change, it's a nice feature for the end user. From my point of view providing bulk apis is crucial because it's a feature of abilities it doesn't block anyone. setItem on the other hand blocks it's users currently to saving data really slow. But providing automatic batching functionality won't solve all of the problems. If setItems will be dropped it will leave no room for making memory-efficient bulk saves. \n. Guy, how do you debug tests?\n. Please review setItems functionality, there are also some other fixes that were making unit-tests to not work time to time in Chrome. Additionally instead of deleting, I've commented some methods for the purpose of further discussion.\n. Ok setItems in my case gave me 22.6x performance improvement:\nBefore:\nstatsService.js:42 1417995851197 1.2. 000103.09876 - Saving records into local database (Operation completed in 000100.77015 seconds)\nAfter:\nstatsService.js:42 1417995180075 1.2. 000006.68713 - Saving records into local database (Operation completed in 000004.43958 seconds)\n. I've went away with customly-forked implementation, I didn't liked the half-asynchronous / half-synchronous approach, there is no such thing as \"half-asynchronous\" approach because it's like being half-pregnant, relying on setTimeout is a way to loosing fundamental database guarantee on consistency, when database reports you that everything is saved but it actually isn't. It's a rabbit hole of problems...\n. Consider these lines of code:\nhttps://github.com/mozilla/localForage/blob/master/src/drivers/localstorage.js#L404-L422\nThe result will get returned before _serialize callback is executed, causing the outer promise to get resolved sooner than the actual completion of operation. If instead a Promise will be used that would resolve inside the _serialize callback everything would have worked...\n. Btw, guys I'm unable to provide the fix for this bug, have really limited time, sorry... :( \n. I've updated title and content of the issue, _deserialize seems to be working fine, probably mixed with WebSQL\n. A continuation of issues #315, #317 please review and provide feedback\n. Guys, I see batching as a separate feature that would allow making a sequence of setItem calls faster (near-maximum) speed. However the setItems functionality is not the speed related functionality it's rather bulk-wise functionality that manages memory properly when dealing with huge amount of data, say you need to save 200mb+ Batching in this case would not be that memory efficient, it would duplicate the arrays internally. In some cases (like mine) it is crucial for low-memory devices such as phones etc. On the other hand batching would require to setItems internally so by having these two features separated we will be able to handle two problems separately (fast setItem) and (memory-wise bulk operations) and consciously.\n. Because batching works this way, it has special internal array that accumulates the results that has to be uploaded to database, it is less memory efficient by design, which is good for most of situations. \n. @ocombe, as for your question on using setItem interface. When I was designing setItems method I was thinking about making universal method that would cover most of all possible scenarios (in terms of inputs). So it allows your scenario with two arrays. However if you make a method that accepts these two arrays it will not allow other usages. For example when a person has it's data stored in a simple object. And when the user wants to use object's keys as a storage keys. Or other scenarios when the key is stored within the record itself. In conjunction with memory efficiency problem I find current interface as the most optimal. On the other hand setItems is the method that is created not for usage convenience it is made for optimal performance / memory usage in the first place.\n. No problem, I didn't start writing tests, so it may take some time before it is closed...\n. Guys, its been a while when I was looking into GitHub, I've reviewed your question Micheil, and if you ask me, I would still go for two methods, both setItem and setItems. As I've already written in one of my previous responses, setItem with batching will pose significant memory overhead (in my case it's crucial) and by having only one setItem(with batching) method you are leaving no choice for people who may need to go around such inefficiency\n. Not sure it's worth actually calling the method due to performance considerations maybe it's worth denormalizing it. But definitely I'll look into getItem method later today or these days\n. Ok I'll look into that later these days\n. No problem changing it back, didn't wanted to do two assignments in case true\n. I was changing all of the double quotes in the file automatically, seems the IDE have also changed these lines, should I put it back?\n. Ok, then they should go back\n. not sure I understand this one, what do you mean by \"new line for the contents of the function\"\n. Oh, you mean this one:\n\nt.executeSql(query, [keyFn(item, index), value], undefined, function(error) { resolving = false; reject(error); });\n\nSure no problem\n. ",
    "akrymski": "Store.config() seems to work, web SQL driver gets chosen, but doing getItem doesn't return at all. I downgraded to older version for time being and it works, so must be a fairly recent bug in websql adapter \n\nOn 26 Jun 2014, at 23:27, Matthew Riley MacPherson notifications@github.com wrote:\nDoes it fail to initialize at all, or does a particular bit of code fail?\ntofumatt (Sent from mobile)\nOn June 26, 2014 4:27:53 PM EDT, Artemi Krymski notifications@github.com wrote:\n\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/mozilla/localForage/issues/187\n\u2014\nReply to this email directly or view it on GitHub.\n. \n\n",
    "jussi-kalliokoski": "Hmm, I'm not sure which driver, but I noticed this in my automated tests running against browserstack's IE11 on Win8. I'll try and see which driver it is a bit later today.\n. I checked the driver, and it reported asyncStorage.\n. That should do the trick to fix this particular issue. There should probably be a tool that automatically fixes these, I keep making the same class of IE8 bugs myself all the time. :/\n. Apparently JSHint's es3 option should help with preventing this class of errors.\n. Yeah, probably a better way to tackle the issue, and I agree on extra paranoid, you have to trust the tools you pick. ;) Speaking of which, what is the tool you used for the build step?\n. Ah, nevermind, should've read the commit message.\n. Although, es3-safe-recast only seems to address reserved word issue, but other issues such as trailing commas will go unnoticed without the es3 jshint option. :/\n. Oh, right, and that is testing against the bower release 0.9.2.\n. I'm using the regular version, without promises. It doesn't fail on any specific line but instead it's missing methods getItem, setItem and clear.\n. ",
    "mantsevich": "Similar issue for v1.4.3. Promise never resolves(for each of localforage method). Callbacks don't work. Issue only in IE11(default settings). \nlocalForage works only with localForage.LOCALSTORAGE driver.. I found cause of problem: db version should be(for IE) a number. I used string. \nCan you update documentation and add error handler if version is not a number?  It will be useful. \nTest for IE (version is string. Get error in IE. But localforage ignore/silence that case):\ntry {\n    window.indexedDB.open( \"DBName\" , \"1.0\" ).onsuccess = function(evt) { \n       console.log( evt.target.result );\n    }\n} catch( ex ) {\n    console.log( ex );\n}. ",
    "dviry": "Arrived here since localForage did not work for my IE11 (11.673.15063.0, Update Versions: 11.0.47) on Windows10.\nI am using v1.5 and it's not throwing any errors when passing a string, i.e.\nexport const viewStorage = localForage.createInstance({\n    name: \"myViews\",\n    version: \"3\",\n    size: 4980736, // Size of database, in bytes. WebSQL-only for now.\n    storeName: \"views\" // Should be alphanumeric, with underscores.\n});\nPS: changing the version to a number fixed the issue for IE11.. ",
    "bradparks": "so.... how do you build the docs with Ruby? I don't see this in the docs, and would like to build them as I'm going to be working offline for a week.... thanks!\n. cool... thanks for the info.....\n. ",
    "oskarkrawczyk": "@tofumatt any chance for a new release on bower?\n. Fantastic, you rule @tofumatt!\n. ",
    "feena4": "I don't understand, has this been fixed in the last release? I still have the InvalidStateError thrown in my application.\nThe main issue I am having is the getItem is not throwing any exception but the callback function is never called. \n. ",
    "trangsinh87": "I faced the same issue and I found the solution is that return true; in onerror function.\nvar db = indexedDB.open('db_name');\ndb.onerror = function() {\n    return true; //it'll prevent `InvalidStateError` or `UnknownError` exception\n}\nHope it can help someone.\n. ",
    "charltoons": "@trangsinh87 It saved me, thank you. \ud83d\ude4f . ",
    "froodian": "Did this solution stop working for anybody else ~August 25th? We started seeing the error crop up again in production then, and I currently am seeing it (from a usage where onerror is returning true, as shown above) on Firefox 55.0.3, which was coincidentally released on that date.... Not that I'm seeing, no - it is possible the date is coincidental.. ",
    "MathRobin": ":+1: \n. Maybe with Istanbul. Il will probably take time next week for this\n. ",
    "basbz": "While waiting for a fix for one of both parties (localforage/almond).\nI decided to temporarily fix this in my buildfile...\n...something along these lines.\n```\nfunction localforage_fix (content) {\n  var regex = /(define()(function() {[\\s\\S]*?}))/g;\n  return content.replace(regex, \"$1'localforage', $2\");\n} \nvar options = { \n  onBuildWrite: function (module, path, contents) {\n    if(module === 'localforage')\n      return localforage_fix(contents);\n    return contents;\n}                                                                                                               \n```\n. ",
    "eduardomartines": "Actually the line is 313 https://github.com/mozilla/localForage/blob/master/src/drivers/indexeddb.js#L313\nAndroid and iOS with Phonegap 3.4 (the last one supported by Phonegap Build)..\nI noticed that this is a problem that occurs in some JavaScript interpreters, such as the Galaxy S..now I'm using the version 0.8.1 of localforage and its working like a charm..\n. ",
    "zalun": "I've added localforage to a Cordova (using latest downloaded localforage.js).\nIt worked just fine on Firefox OS. The code was pretty simple:\nlocalforage.getItem('launch counter', function(value) {\n      value = (value) ? value + 1 : 1;\n      console.log('localForage launched: ', value);\n      localforage.setItem('launch counter', value);\n    });\n. ",
    "dpogue": "In older versions of Android (<4.4 I believe, but 2.x for sure has this problem) there are issues with using JS keywords as function names.\ncursor['continue'](); will work correctly.\n. ",
    "tariq7": "i've installed correctly with ionic and cordova and it is working fine for me in chrome web, safari on mac and on my iPhone 6 plus ios8.  however, on my iPhone 4, iOS 7 and on android s3 4.2.2  I am getting this error  \nTypeError: 'undefined' is not a constructor (evaluating 'new Promise'), http://192.168.0.2:8100/js/localforage.js, Line: 1778\nI've updated everything and I am using the latest version of local forage and angular-locaforage .    Any ideas as to why its not working?  Because of this error, the whole app fails to run. \n. Hi everyone. i've installed correctly with ionic and cordova and it is working fine for me in chrome web, safari on mac and on my iPhone 6 plus ios8.  however, on my iPhone 4, iOS 7 and on android s3 4.2.2  I am getting this error  \nTypeError: 'undefined' is not a constructor (evaluating 'new Promise'), http://192.168.0.2:8100/js/localforage.js, Line: 1778\nI've updated everything and I am using the latest version of local forage and angular-locaforage .    Any ideas as to why its not working?  Because of this error, the whole app fails to run. \n. ",
    "hawkrives": "Hardly more knowledge \u2013\u00a0I just ran the tests on master, and they work. All fine and happy.\nI'll try and dig into it a bit more, but I really only have a surface knowledge of localforage and browserify, and I'm usually really bad with tests, so any help there would be appreciated.\n. Nope. I broke something. (apparently removeItem no longer exists).\nWill comment again once I dig more.\n. It looks like the Browserify output is just not... running. At least, none of the methods I've logged (including ready and _extend) are running.\nWhich, while it explains the lack of removeItem (along with setItem and getItem), doesn't really make for a useful build.\nI might take another crack at this later in the week.\n. I think I'll just close this in favor of #227, hmm? A much nicer attempt than mine. \n. ",
    "Gotusso": "I'm tracking down a similar issue. Now that localforage can handle multiple instances (#253), having multiple stores like @kriswillis do or via localforage.createInstance() can cause troubles. After a little research, I noticed that the indexedDB driver creates a new object store on the upgradeneeded event, and that is the only way that the driver can do it. However that event only will be fired on DB creation or version change, so there isn't any easy workaround here.\nI think that probably the only option here is change the api or document the gotcha.\n. ",
    "bradgreens": "A year later I have this problem too - hoping to have 3-4 tables in my app.\n. ",
    "ktown007": "I want to do the same. This looks to work:\nvar items = localforage.createInstance({ name: \"mydatabasename\" , storeName: \"items\" });\nvar config = localforage.createInstance({ name: \"mydatabasename\"  , storeName: \"config\" });\nitems.setItem( \"foo\",  {\"id\":123 , \"name\":\"bar\" } );\nconfig.setItem( \"user\" , \"dilbert\" );\n. ",
    "mbalyaba": "\"var items = localforage.createInstance({ name: \"mydatabasename\" , storeName: \"items\" });\nvar config = localforage.createInstance({ name: \"mydatabasename\" , storeName: \"config\" });\nitems.setItem( \"foo\", {\"id\":123 , \"name\":\"bar\" } );\nconfig.setItem( \"user\" , \"dilbert\" );\"\nDoesn't work for me.\nIt creates only \"items\" ObjectStore\n. any updates?\n. for current implementation it seems like the only workaround to create new ObjectStore inside current database is to increase db version.\nvar items = localforage.createInstance({ name: \"testdatabase\" , storeName: \"items\" });\nitems.setItem( \"foo\", {\"id\":123 , \"name\":\"bar\" } );\nvar config = localforage.createInstance({ name: \"testdatabase\" , storeName: \"config\", version: 2});\nconfig.setItem( \"user\" , \"dilbert\" );\nBut I'm not sure that it is a good solution.\n. Oh, sorry, my version is 1.2.2. In this version I have an error about not exist ObjectStore(for second instance).\nAnyway if issue is fixed then it is a very very good news!\nI will update and try.\nThank you!\n. ",
    "yangshun": ":+1: \n. ",
    "thebengeu": "Ok I'll split them into separate PRs and see about cleanup/adding tests.\nSo far, only Firefox in private browsing mode seems to require feature detection to be async, for the current feature set at least. Looks like there was a similar async fix to remotestorage.js.\nThe simpler synchronous feature detection in has.js and modernizr detects IndexedDB as being supported in Firefox private browsing but it is not \"supported\" in the sense that there's an InvalidStateError when actually trying to use it. So it depends on what the semantics of support() is supposed to be.\nThe alternative of doing async tests during driver initialization and falling back to the next driver after rejection might be cleaner since the additional _localforage_spec_test db would not need to be opened and some duplicated code could be removed. However, from my understanding, separating the detection also serves to allow lazy loading of only the needed driver.\n4380f3ed65ecbd4c1443bb15a861163e1669e008 makes it unnecessary to wait for ready() before using library methods. The same could be done with supports() but I was not sure if it would break any existing usage, though it is not in any tagged release, and even mozilla/high-fidelity does not appear to be using it yet.\nMaking it async would be consistent with the rest of the API, and ensure that external usage remains compatible in the future regardless of whether feature detection is sync or async. Also, looking at #177, would it be possible that in the future there might be a use for more granular supports() checks, such as detecting blob support as in Modernizr?\n. Separated 4380f3ed65ecbd4c1443bb15a861163e1669e008 and its testing into #212, and cleaned up this PR.\n. Thanks for pointing that out!\nI'm not sure which other browsers require the extra openDatabase() check, but I tried desktop/iOS Safari Private Browsing mode - it not only needs the openDatabase() check but needs to try to create a table as well.\nlocalStorage also needs some additional checking, as seen in modernizr.\nWith these fixes, 'No available storage method found.' is correctly reported when in Safari Private Browsing mode.\n. No problem! Everything had been merged, but I'll have to take a look again to see how it stands with all the changes since then. Will update once I do.\n. I checked it out - looks like these would still be useful, with the same caveats as before. Tried merging but it's non-trivial, so will probably have to work on it during the weekend.\n. Added detailed explanations - sorry about the delay!\n. Rebased on latest master and resolved merge conflict.\n. No problem, thanks for helping with the rebase! [=\n. Sure, will add some comments.\nIf the drivers were not lazy loaded, it could be automated by iterating through a driver's methods which do not start with a _. Would be cleaner not to have to hard-code, but I guess since the public API is stable, it shouldn't be too brittle?\n. It isn't very easy to test the API method stubs inserted by callWhenReady, since they are replaced by the driver as soon as it loads. To ensure that they work when the drivers are loaded asynchronously, this runs the entire test suite (except for config tests), but with localforage reloaded before each test, so that it would be initialized again.\nThis ensures that the synchronous parts of localforage initialization and the API calls in the tests occur first in every test, such that the callWhenReady API method stubs are called before RequireJS asynchronously loads the drivers that replace them.\nIs that sufficiently clear? If so I'll change the comments to summarize the above.\n. It could only be done if at least one of the drivers is loaded upfront though?\n. ",
    "andyburke": "+1 for a node-style callback structure.\nI landed here looking for help trying to understand why I'm not getting any callbacks (either w/ .then or with .catch) when local storage is disabled.\nI'd much prefer getting a node-style callback to this promises stuff.\n. I'm voting for error-first callbacks.\n. Actually, my theory isn't right. I've tried a few approaches to resolve this, but I clearly don't know what I'm doing in this code.\nThe basic bug is just that if local storage is disabled, there are no callbacks happening.\n. I believe it does, but callback is null.\n. javascript\nlocalForage.getItem( 'foo' ).then( function() {\n    console.log( 'got foo' );\n}, function() {\n    console.log( 'error getting foo' );\n} ).catch( function() {\n    console.log( 'caught exception getting foo' );\n} );\nIf you follow my repro steps above and have that code, you will not get any callbacks.\n. I tested with this version of Chrome, maybe that matters?:\n\n. I'll try to repro again when I get a little time.\nOn Tuesday, August 12, 2014, Thodoris Greasidis notifications@github.com\nwrote:\n\nI was using beta v37, something might have changed.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/mozilla/localForage/issues/226#issuecomment-52009347.\n. So I just tried to repro with the latest stable Chrome and master:\n\n\nAnd indeed I see it working as expected:\n\n\nI also just testing against the 0.9.2 tag and it is also working.\n\nSo now I'm in a bad situation where it seems like maybe this is due to some interaction with the other components I have installed or something.\nExcept I just went and looked and now I am seeing the callbacks called.\nMaybe this was related to my browser version...\nClosing.\nThanks for looking at this.\n. Is there any way to query it? (By the way, finding this was terrible in Safari, playing in their debugger seemed to keep crashing the entire app.)\n. ",
    "calvinmetcalf": "node style callbacks would be a big plus, I (and I'm assuming other developers) tend to assume that if you say callback you mean node-style callback.\n. this is false :smile: \n. ",
    "couchand": "+1 for node-style callbacks.  What's the alternative, error second or an additional callback (oddly the docs don't seem to address error handling at all, is this why)?  I'm not saying there's anything a priori better about one or the other, but since (I think) there's a general consensus (see above comment https://github.com/mozilla/localForage/issues/219#issuecomment-52179257) that callback means node-style callback, why introduce something different?\nUnless, of course, there's a compelling reason.  I'm just not convinced that making it parallel with the promises API is all that great of a reason, particularly since many people write their promises-based code with catch instead of the second callback to then...\n. ",
    "nmn": "+1\n. Thanks\n. ",
    "jamessharp": "I've just run into this. It seems to be the Object.create functions that are causing the problems (it's ES5 functionality). By including es5-shim and es5-sham and by running the localforage code through a filter to swap out all the reserved keywords I've managed to get the code running on IE8 (though how well it runs I don't know yet\u2026)\n. Sorry - only just spotted your message. I'm using browserify here which I think is causing the problem for me. The file dist/localforage.js doesn't seem to have the problems. I suspect it stems from the prebuilt version's use of the es6-promise module vs the browserify version using promise.\nI'll see if that fixes it up and raise a PR\n. I've also bumped into this. I think it comes down to a safari bug but I've got a workaround for it in #493.\n. Probably - that would be much nicer. You then wouldn't need the changes to the browser field in package.json either. I was worried that it'll mess up some sort of requirejs type thing that was relying on require('promise') being explicitly there as 'promise', or some node use case where people were relying on the other promise dependency (is this even possible?), so opted for safety over niceness.\n. ",
    "Irrelon": "There is also an issue with the source in src/localforage.js (and subfolders/files) but not in the dist/localforage.js which is that in source there is a lot of use of:\n.catch(reject)\nThis is presented as:\n[\"catch\"](reject)\nIn the dist folder files. If you run browserify and require localforage you end up with a build that IE8 doesn't like because it complains about the .catch(reject) lines. I'm happy to do a PR to fix this in the src folder but wasn't sure if it would break something since it appears you guys already have a conversion in place because the dist folder files don't show the same code?\n. Browserify is using the src files as far as I can tell. I'm going to do a quick test to make absolutely sure it's not user error (as in me being stupid :p).\n. Confirmed that browserify is DEFINITELY using the src files. In the package.json there is a \"browser\" key pointing to the src/localforage.js file. If you comment this out so that browserify uses the \"main\" key instead (pointing to dist/localforage.js) then browserify will fail with the error:\nError: Cannot find module './../utils/serializer' from '/Development/ForerunnerDB/node_modules/localforage/dist'\n    at /usr/local/lib/node_modules/browserify/node_modules/resolve/lib/async.js:42:25\n    at load (/usr/local/lib/node_modules/browserify/node_modules/resolve/lib/async.js:60:43)\n    at /usr/local/lib/node_modules/browserify/node_modules/resolve/lib/async.js:66:22\n    at /usr/local/lib/node_modules/browserify/node_modules/resolve/lib/async.js:21:47\n    at Object.oncomplete (fs.js:107:15)\nThis stops anything generated with browserify from working in IE8 because of the above issues around \"catch\" etc.\n. @tofumatt Sounds like it might be the answer... it would be good to be able to select the non-promise version (optionally) via browserify as well. I've noticed that if I run unit tests via a browser they pass fine (for my project ForerunnerDB) but if I run them through phantomjs I get an error related to localforage:\nTypeError: 'undefined' is not a function (evaluating 'then.bind(newValue)')\nI have no idea why this works on a browser but not in phantom.\n. @thgreasi I found the issue was present when including localforage using browserify because the post-process stage that gets run when generating the dist build for this repo is not executed when using browserify. The issue cannot therefore be checked by testing the dist build but rather by building with browserify in a separate project and then testing it.\n. ",
    "psalaets": "@Irrelon I think you're running into ariya/phantomjs#10522, which is fixed for phantom 2\n. @tofumatt this issue can be closed\n. Not sure how up-to-date the contrib guide is but see https://github.com/mozilla/localForage/blob/master/CONTRIBUTING.md#features-localforage-will-reject\nfwiw localforage works with browserify\n. The docs changes in this PR are different than what I've seen.\nIn my experience, only the name config matters for namespacing the data of localforage instances. I get errors when name is the same and storeName is different. Issue #342 may be an example of this.\nAs a sanity check I made an example of setting only name, setting only storeName and setting both: https://github.com/psalaets/localforage-multi-instance.\nI could be missing something here, can someone double check this?\n. Around line 399 at that link it sets name and storeName.\n. That sounds ideal but I haven't been able to get that to work. Whenever I set only storeName like this\n``` js\nvar store1 = localforage.createInstance({\n  storeName: 'store1'\n});\nvar store2 = localforage.createInstance({\n  storeName: 'store2'\n});\n```\nI get errors in Chrome and FF.\nAlso, it looks like the localstorage driver only uses name when namespacing keys. See https://github.com/mozilla/localForage/blob/master/src/drivers/localstorage.js#L62\n. @perlun The multi-instance tests set name and storeName which works because setting name to unique values prevents the issue.\nI'm referring to https://github.com/mozilla/localForage/blob/master/test/test.api.js#L639.\nThere the two instances are the default localforage instance which uses {name: 'localforage', storeName: 'keyvaluepairs'} and localforage2 which uses {name: 'storage2', storeName: 'storagename2'}.\nAre there other tests I'm forgetting that only set storeName?\n. I am catching the Error thrown when one of the expects fail and then handing it to mocha. Without the try/catch block mocha's done() never gets called and the test fails due to timeout rather than failing with a \"expected foo to be bar\" message.\nThis is a bit of a pain to do but you get more informative test failures.\nAn issue with the above is the expect() calls done when test data is set up (e.g. lines 138, 141, 145, 148 of test.api.js). I'd argue for those expect() calls and extra getItem() calls to be removed because they\n- make async/callback error handling harder\n- add visual noise and levels of nesting\n- assert about setItem/getItem, and those methods are already tested elsewhere\nI will submit an issue/PR sometime next week to explain that a little better.\n. Sorry to bump a really old thread but my comment about why try/catch is necessary was wrong.\nIt finally dawned on me why these tests are timing out when an expect fails. Mocha is usually good at failing the test due to uncaught exceptions -- I just assumed it wasn't handling it in this case for some reason.\nThe reason why it's not happening here is because the Error never gets out of the Promise code. LocalForage invokes the callback inside a promise fulfill handler (localstorage, indexeddb, websql), so if the callback throws (i.e. a failed expect) the Error is caught by the promise implementation which then \"swallows\" the Error and rejects the resulting promise.\ntry/catch in tests is still useful in this case but only because of how LF invokes callbacks.\n. ",
    "idurotola": "karma unit test fails. it says \" Can't find variable: require\". i am using the bower version of localforage\n'''\n\n. thanks i have fixed it. i figured require must have been redefined by some\nof the other loaded files so i moved it up\nDurotola Iyanu Tomiwa | Software Developer | Andela\nTel: 0706-671-9488 | Andela.co http://andela.co/ | @ThisIsAndela\nhttp://twitter.com/ThisIsAndela\nFace your Fears.......\nOn Wed, Mar 25, 2015 at 10:14 AM, Matthew Riley MacPherson \nnotifications@github.com wrote:\n\nOh, weird, are there still karma unit tests? I think I experimented with\nthem but should have removed them.\nTo run tests try npm test. I\u2019ll remove the karma files. :-)\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/mozilla/localForage/issues/220#issuecomment-85946227.\n. \n",
    "klenwell": "@thgreasi  That's good. That's a successful test. What I see is bad. In Firefox:\nChanging states: null to configure\nlocalforage configured with default driver: null\nChanging states: configure to defaultSet\nTypeError: localforage.setItem is not a function\nIn Chrome, it just stops:\nChanging states: null to configure\nlocalforage configured with default driver: asyncStorage\nChanging states: configure to defaultSet\nAnd now I tried it on my Mac and I get the same result as in Chrome. So it seems to be something specific to my local home network. But I haven't noticed anything else like this. I checked the LocalForage script being served up by cdnjs in Chrome and I see this at top so I assume that's in order:\n/*!\n    localForage -- Offline Storage, Improved\n    Version 0.9.1\n    http://mozilla.github.io/localForage\n    (c) 2013-2014 Mozilla, Apache License 2.0\n*/\nAny other ideas for troubleshooting?\n. Not in private browsing mode or anything else unusual as far as I can tell.\nI set up my fiddle script locally so I could try it with the current master branch. In doing so, I find it runs successfully, with the v0.9.1 CDN. Nevertheless, the jsfiddle.net fiddle still consistently fails for me.\nLooking at the source in the current master branch, I notice that localForage.setDriver(driverTestOrder) is called when it is loaded and that setDriver returns a promise. Is it possible that there's some kind of race condition where my fiddle is trying to access the datastore before the driver is loaded? \nThe docs, as far as I could see, didn't warn against that possibility. Is the localForage module itself loading asynchronously? Should I be waiting on the promise or an event or something? Is there an example showing how I might do that?\n. Regrettably, it didn't help me:\nChanging states: null to configure\nlocalforage configured with default driver: null\nChanging states: configure to defaultSet\nTypeError: localforage.setItem is not a function\nError: No available storage method found.\nhttp://jsfiddle.net/klenwell/5TaX4/2/\n. Sorry, browser information was in the StackOverflow question. Forgot to mention it here:\n- Chrome 36\n- Firefox 31\nTo recap:\n- Simple  jsfiddle.net script stalls or fails on when run from my Ubuntu 12.04 LTS laptop running Chrome 36 and Firefox 31 on my home network.\n- Fiddle also fails when run in Safari on MacAir on my home network.\n- Others have tested fiddle and it runs successfully (including me, in Chrome on Windows at work).\n- When I run a clone of the fiddle script on my laptop's local server, it succeeds.\n- My laptop, network, and browsers otherwise seem to operate normally (posting this using them now).\n. Yes, sorry, I'll close. Never figured out what the issue was.. ",
    "jimaek": "Hey, jsDelivr is automated too https://github.com/jsdelivr/jsdelivr#auto-updating\n. ",
    "thisandagain": "LOL. Thanks folks! :smile: \n@tofumatt I went though and made some revisions as per your notes. A couple things that are missing from the new build process that I could use some help with:\n- The publish task needs to trigger the rake / bundle processes via gulp-shell\n- Need to restore saucelabs integration (https://github.com/karma-runner/gulp-karma)\n. Wheew! Great. In that case, just let me know if you see any other gotchas.\n. Great (and good catch)! I'll get to the bottom of this tonight and push an update. Thanks @tofumatt\n. Should be all set! I added a transform called es3ify that is functionally equivalent to the es3-safe-recast. The gulp build now kicks out two additional files called localforage.es3.js and localforage.es3.min.js.\n. Got it. All set.\n. Hmm... ok. Just ping me tomorrow \u2013 strange that tests would fail locally for you as everything looks good via travis.\n. Agreed. I'll get this restored. The drivers are the main culprit.\n. Whoops! :+1: \n. I'll add that to the style checker.\n. This logic is integrated into the Promises module itself.\n. No worries at all. I'll add it to JSCS when I add the EOF check.\n. Awww yeah! :boom: \n. In this particular case, the double quotes were added by the component generation script.\n. http://jslinterrors.com/redefinition-of-a\nAll three of the drivers have lines similar to:\njs\nvar localStorage = null;\nlocalStorage = window.localStorage;\nThis will cause the Redefinition of '{a}' error to be thrown by jshint as it treats objects which are known to be bound to window the same as if they were bound to global.\n. :+1: \nThis is fixable without requiring an exception, but I was trying to leave the drivers as untouched as possible for this PR. We might want to open a new issue(s) to track jshint exceptions that we'd like to clean-up.\n. ",
    "jakecraige": "After some digging around: this is the Breaking PR\nI'm not sure if this was intentional or not. But the way you need to define drivers was changed. Now you need to do:\njs\nlocalforage.setDriver(['asyncStorage', 'webSQLStorage', 'localStorageWrapper']);\ninstead of the currently documented way\njs\nlocalforage.setDriver(['IndexedDB', 'WebSQL', 'localStorageWrapper']);\nIf this is expected, the docs should be updated here\n. I think it's just that paragraph that's confusing, and the incorrect capitalization of websql. Perhaps the docs should say to use the enum, since that's what's being used internally. \n. ",
    "sadolano": "DOMException {message: \"Failed to execute 'transaction' on 'IDBDatabase': One of the specified object stores was not found.\", name: \"NotFoundError\", code: 8, ...}\nYou can reproduce the error like this:\nWhen getItem is called first, localForage creates a indexedDB and the store with the appropriate name. Everything is ok. But if you now change only the storeName and call getItem again the above mentioned exception occurs. \nAs a quick workaround, I wrapped the affected line into try...catch:\ntry {\n    var store = db.transaction(dbInfo.storeName, 'readonly')\n        .objectStore(dbInfo.storeName);\n} catch(e){\n    reject(e);\n}\nBut i think this should be fixed in a more common way.\nI tested it in Chrome 36\n. Here is the fiddle: http://jsfiddle.net/sadolano/d82umbs3/9/\nIt's important to rerun the fiddle after changing the storageName. In a first version of the fiddle i tried to change the name in the code and call getItem a second time in the success-handler of the first call, but this does not trigger the exception, instead the second call is resolved with null.\nAs i said i tested it with Chrome 36 on Mac. In Chrome developer tools you can activate \"Pause On Caught Exceptions\" and you will see the above mentioned Exception. The fiddel uses localForage 0.9.1 but same happens in 0.9.2.\n. Nice. I thank you for the fast reply and solution.\n. ",
    "astromac": "I was using the latest from bower. Let me clone the master branch instead and I'll get back to you.\n. Alright, cloned the latest master. IE objects to the same part but a different line - line 1455.\n. That was it. I mistakenly understood that the nopromises variant was meant for browsers that don't support promises.\nThank you so much for your time.\n. ",
    "forevermatt": "I seem to be experiencing this same issue on Firefox 31.0 / Win 7 64-bit.\nIf I specifically set the storage engine to 'localStorageWrapper' it works, but if I don't set it (or if I set it to 'asyncStorage' or 'webSQLStorage'), neither the success nor failure functions are called.  As a possibly-related side note, if I set the storage engine to 'webSQLStorage', the console shows a message of 'Error: No available storage method found.'  That may be a know issue; I'm just trying to give as much relevant info as I can.\n. ",
    "petermetz": "Same error (non-silent though) on this UA: \nMozilla/5.0 (Linux; Android 5.0.1; Nexus 5 Build/LRX22C) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/40.0.2214.89 Mobile Safari/537.36\nWorks fine on: \nMozilla/5.0 (Macintosh; Intel Mac OS X 10_10_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/42.0.2286.0 Safari/537.36\nI use the default configuration provided by angular-localforage - Indexed DB.\nJSON stringify-ing manually before calling setItem works for now.\n. ",
    "nhunzaker": ":+1: Please!\n. ",
    "Zolmeister": ":+1: \n. ",
    "bitinn": "In a related note, which I think localForage document should mention, is that Chrome doesn't support IndexedDB Blob storage until m37. But as far as I can tell, localForage doesn't do anything special in the IndexedDB driver to polyfill such limit.\nThus using it with Modernizr detection would be necessary if you want to store Blob consistently across browsers.\nhttps://github.com/Modernizr/Modernizr/blob/master/feature-detects/indexeddbblob.js\n. http://updates.html5rocks.com/2014/07/Blob-support-for-IndexedDB-landed-on-Chrome-Dev\nBTW: that html5rocks article does include a way to try/catch blob storage and fallback to data url\n(not sure how I feel about that though...)\n. Wow nice work, also amazed by the number of problems with blob in IndexedDB, a good read: https://github.com/nolanlawson/state-of-binary-data-in-the-browser\n. storeName in config offers what you want?\n. ",
    "sheppard": "I came across the lack of Blob support in my own testing (see #380) on an Android 4.4.4 Samsung device (UA string claims \"Chrome/28\").  I worked around it in my vendored copy of localForage with a UA sniff marking IndexedDB as unsupported in any Chrome less than 38.  This effectively makes localForage use the WebSQL backend, which serializes blobs for storage.  I suppose an alternative would be to enable the serializer for the IndexedDB driver in this case (which would be effectively the same as to the PouchDB approach).  \nI didn't submit a PR as I'm not the UA sniff is the right approach (better approaches have already been listed), and I assume not everyone finds Blob support mission-critical as I do.\n. Yes, thanks for all your work in this area, @nolanlawson.\n. Ok, I'll think a bit more about how this would work and see if I can put something together.  I see two potential approaches:\n1. Handle in the serializer (convert to/from base64 in-place)\n2. Handle outside of the serializer (offload to separate keys in whatever driver)\nWhat I've implemented in wq/store.js is more like the second option.  It's automatically disabled for IndexedDB unless the user explicitly requests blob extraction.\nOption 1 is cleaner and is what I initially had in mind as an ideal solution.  The main benefit of option 2 is that you could provide hooks like this that the user could override to store blobs somewhere else (e.g. the filesystem).  It sounds like you've already been thinking about something like this for large files (#69).\nEither approach will require a deep scan during setItem() (though I leave flags at each level to speed up the getItem() search).  That said, this functionality wouldn't necessarily have to be used for the IndexedDB driver (though #241 suggests it may be needed).  What would your threshold be for performance and how would you measure it?\n. My understanding is that File is just a thin wrapper around Blob with a couple of extra attributes (e.g. name).   I don't believe it's possible to effectively store a File reference without including the entire contents of the file - probably for the same reason that you can't normally initialize File instances from a filename.  Even when using IndexedDB on Chrome, the full file contents are being saved - just like Blob - and not just a reference (I verified this by storing a file 10000 times and looking at the storage usage).\nIt's fairly straightforward to save files across all localForage drivers by using slice() to convert the File into a plain Blob which will then serialize fine:\njavascript\nvar blob =  file.slice(0, file.size, file.type);\nOr, for backwards compatibility with webkitSlice():\nhttps://github.com/wq/wq.app/blob/v0.8.1/js/wq/app.js#L1018-L1023\nThis is working fairly well for me, other than losing the file name (which can be stored as a separate value).\n. ",
    "mreinstein": "would this event handler work?  \nhttps://developer.mozilla.org/en-US/docs/Web/API/IDBDatabase.onversionchange\nI'm not sure if this fires across tabs/windows though.\n. > I think the idea would be to have it be observable for all events\nI think we're saying the same thing. I surfaced the onversionchange event thinking this might be sufficient to detect changes in the indexeddb driver. I know localstorage has the 'storage' event which works fine. not sure about websql though.\n. ",
    "no-more": "Hello,\nIs there any solution to this currently? I would like to use this with angular2 and observable it would be great if this app could support observable.\nThanks.\n. Hi,\nThanks that would be great. I hope browser will implement this soon.\n. Hi,\nThanks a lot, I won't be able to try before next week but it looks great\n.\n. Hi,\nThanks but then how can I share a session across my subdomain? I don't want to use a sessionId in the url because this would mean it won't work if I open the url directly.\nHow does google and so many other sites handle this ?\nThis can't be handled by IP, nor coockies. I don't understand how it's working and how I should implement this.\nThanks a lot.\n. Hi,\n\nExactly... sadly, your best bet is to rely on backend storage.\nThat's already what I'm doing, I'm just usually use local storage to store a data (some kind of token) to allow me to reconnect later without have to login again.\nBut my new need is that I want this to also work across multiple subdomain, without having to log in on each of them seperatly.\n\nThanks.\n. ",
    "gnz00": "@thgreasi Does this work for multiple tabs or windows or is this limited to a single instance?\n. ",
    "dmurph": "Cross-tab observation might be a thing if we can implement/agree upon/release this:\nhttps://github.com/dmurph/indexed-db-observers/blob/gh-pages/EXPLAINER.md\n(examples here): https://github.com/dmurph/indexed-db-observers/issues/24\n. ",
    "hayksaakian": "Seems like I could swap collections by calling config, but then I'd need to write an API to juggle that.\nWould be nice if I could store a config'd localforage object to a variable.\n. ",
    "Jaromudr": "@peey \nAs I see from jfiddle, at least for indexeddb, both items was saved to \"table1\" collection.\n. ",
    "gruppjo": "Glad to help!\n. ",
    "brittanystoroz": "@thgreasi do you want to open up a new PR for your updated branch? This one looks good to merge in - we can split out fallback tests into a separate file unless @tofumatt has a strong opinion on not doing so.\n. ",
    "gustavohenke": "Guys, I see createInstance() when I type localforage in the console, but it's not documented anywhere :)\n. Sorry, didn't see #260.\n. ",
    "perlun": "See also #367. TL;DR - setting storeName doesn't seem to work for me w/ Chrome Canary. I suspect it is because _initStorage() does not get properly called. (more details in the referred-to issue)\n. This is indeed a bug in localForage. See the referenced PR (#374).\n. @psalaets - I see the same thing that you do. When I override the name, that takes effect as in overriding the IndexedDB database name (Chrome Canary). When I also try to set the storeName to the name of the \"table\" (instead of keyvaluepairs), I get these exceptions:\nUncaught (in promise) DOMException: Failed to execute 'transaction' on 'IDBDatabase': One of the specified object stores was not found.\n    at Error (native)\n    at http://localhost:4200/assets/vendor.js:74803:45\nUsing localforage 1.2.2, installed via Bower. I assume there is some hardwiredness to keyvaluepairs somewhere...\n. Doesn't seem like it, so then it's probably a matter of things happening in an unexpected order or similar.\n. The same error here, but no insight into the reason: http://stackoverflow.com/questions/26473502/cannot-create-second-objectstore-indexeddb\n. This one is really fishy. I've checked the tests in localForage and they very much set the storeName to a custom value - and it works! Whenever I try to use it from my own app (setting up some fixture data in my QUnit setup handler), things go berserk and I get the exceptions mentioned above.\nIdeas, anyone?\n. Thanks. You are right, it's when you try to use the same name but with different storeName you get this. I debugged this quite a bit yesterday - #374 has the details.\n. Awesome @sebweaver! Thanks a lot for fixing. I never actually did the fix myself in the end, but it's great that someone else (= you) got around to doing it.\n. ",
    "vrutberg": "Has anyone been able to test this on iOS 8.1 yet? I am experiencing these problems as well, but haven't been able to test in iOS 8.1 so far.\n. ",
    "MauriceSchoenmakers": "according to http://bl.ocks.org/nolanlawson/raw/c83e9039edf2278047e9/ and my iphone,  not fixed on 8.1\n. ",
    "CoIin": "Has anything change here recently? If I'm using Mac OS 10.11, or iOS 9.3.1, do I have to live with the workaround from 16 months ago?\n. ",
    "bradennapier": "Appears to still not work - localforage on ios = breaks entire page\n. ",
    "doesntgolf": "Sorry to ping an old issue, but it looks like the updated documentation never actually made it onto mozilla.github.io/localForage? I'm guessing it just needs to be added here. I can throw together a PR for it if needed. At a quick glance the website looks to also be missing the supports method from here, so maybe there's more missing as well?\n. ",
    "tobemedia": "The README.md is up to date:\n\"Note that callbacks in localForage are Node-style (error argument first) since 0.9.3. This means if you're using callbacks, your code should look like this: ...\"\nThe API Reference at http://mozilla.github.io/localForage/ is outdated. \n. ",
    "Shuky": "Yeah I figured as much, but was worth asking.\nOn Oct 2, 2014 11:12 PM, \"Matthew Riley MacPherson\" \nnotifications@github.com wrote:\n\nYup, localForage will never be synchronous.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/mozilla/localForage/issues/264#issuecomment-57718123.\n. Thanks, will do\n. \n",
    "brigand": "This would be a nice solution to #57 (node.js).  If someone wants to use this in node, and someone else has created a localforage-redis module on npm, then they can use it with redis.  Or maybe they want to use postgres, and someone has created a postgres driver or other databases available on the server for key/value storage.\nOr maybe they're in a chrome extension, or firefox, or firefoxos, or phonegap, etc. and they just need to create a driver or two to get their application working on all of these platforms.\nIt basically takes off the weight of deciding what is/isn't a valid backend for localforage by moving the authority to the individual users.\n\nOf course using it in node isn't working at all currently, but that's an easy fix.\n. ",
    "UdoBretz": "I wonder if there is any example implementation on how to use the sqlitePlugin with the new custom driver support?\n. ",
    "roblav96": "for anyone looking:\nhttps://github.com/thgreasi/localForage-cordovaSQLiteDriver\n. ",
    "kristerkari": ":+1: \n. ",
    "ForbesLindesay": "Thanks, I was missing that documentation.\n. ",
    "lylepratt": "Is there a workaround for this to force LocalForage to use LocalStorage in the WKWebView?\n. ",
    "adrbin42": "Hello, I would like to give this problem a try but would need a little guidance as I am a beginner to Open Source and JavaScript.  I am also learning Swift.  If this is too big of an issue for a beginner, I would love it if you could direct me to some other problems I could try but I do want to begin to contribute to Open Source.\n. ",
    "gr2m": "@nolanlawson Adrienne hat issues with her laptop and only got things going towards the end when we already had to wrap up, unfortunately. But I told her that we can try to help her with the issue after the event, too. I\u2019m happy to help out as well :)\n. ",
    "Evgenus": "\nWas it in IE11 that you saw this @Evgenus ?\n\nYes. But I guess it is not important.\n. Will you publish this soon? It blocks IE support in my project.\n. Could not tell for certain... I'll try to make a reproduction test as soon as I have time.\n. ",
    "ericfong": "webpack is http://webpack.github.io/\nBasically, after\nbower install localforage --save\nUse webpack to pack my js and run in browser (chrome and android webview)\nif \nrequire('localforage')\nin one of my js file. webpack will complaint\n```\nWARNING in ./bower_components/localforage/src/localforage.js\nCritical dependencies:\n331:20-335:22 the request of a dependency is an expression\n @ ./bower_components/localforage/src/localforage.js 331:20-335:22\nERROR in ./bower_components/promise/promise.js\nModule build failed: Error: ENOENT, open './bower_components/promise/promise.js'\n @ ./bower_components/localforage/src/localforage.js 6:18-36\n```\nrequire('script!localforage/dist/localforage.min.js');\n=>\nUncaught ReferenceError: require is not defined\nrequire('script!localforage/dist/localforage.js');\n=>\nWork!\n. ",
    "bahtou": "@tofumatt What things did you do to make it work with browserify? \nI just did npm install localforage and tired require('localforage') and I'm getting window is not defined\n. ",
    "robertfw": "Not sure if this is related, I am using webpack and getting\nUncaught ReferenceError: webpackJsonp is not defined\nWhen trying to require('localforage').\n. ",
    "tcoopman": "I'm getting this:\nWARNING in ./~/localforage/src/localforage.js\nCritical dependencies:\n332:20-336:22 the request of a dependency is an expression\n @ ./~/localforage/src/localforage.js 332:20-336:22\nThis gives me Uncaught Error: Cannot find module 'asyncStorage'. in the browser.\nSo I also used require('script!localforage/dist/localforage.js');\nand that works.\nIt would be nice if it works with a normal require, because you can't assign the import to a variable now.\n. At the moment I use require(\"imports?require=>false!localforage\") as suggested in https://github.com/webpack/webpack/issues/424. But it would be nice if this could be solved.\n. ",
    "MattKunze": "I created a simple repo to play around with ways to get this working well. script-loader works, but isn't really an ideal way to do it:\nwebpack.config.js:\njavascript\n  resolve: {\n    alias: { localforage: 'localforage/dist/localforage.min' }\n  }\nand then use require('script!localforage');\nI got close to having it work by default by using\njavascript\n  resolve: {\n    alias: { localforageSerializer: 'localforage/src/utils/serializer' }\n  }\nthis generates warnings because of the wildcard AMD requires, but it actually loads despite some console errors:\nWARNING in ./~/localforage/src/localforage.js\nCritical dependencies:\n332:20-336:22 the request of a dependency is an expression\n @ ./~/localforage/src/localforage.js 332:20-336:22\nNow to figure out how to get it to skip those entries and it should load more cleanly.\n. Forgot to include a link to the playground repo: https://github.com/MattKunze/localforage-webpack\n. We're using script-loader to load the packaged version, that's the only thing I've been able to get to work so far. You might be able to simplify the config and just use require('script!localforage/dist/localforage.min')\nI was working with PouchDB and it has similar code that produces the same problems (pouchdb/pouchdb#3319). Another potential solution is to not use script-loader, but add a noParse option for the script in the webpack config.\n. I'll give it a shot, but I'm not sure it will make any difference. webpack looks at the parsed AST for the script and processes any require statements it sees as far as I know. So changing the if statement doesn't change the fact that the block still has a require statement it can't resolve. If there was someway for webpack to know that block will always be skipped in a particular environment that would potentially fix it.\n. ",
    "srph": "@MattKunze Have you made it work?\n. ",
    "marcucio": "I made a fix here that might fix this too, we might have to modify my pull request. I added a check for if require exists but we might have to check if require is actually a function:\nhttps://github.com/mozilla/localForage/issues/365\n. Just a little more info:\ndbInfo.db = openDatabase(dbInfo.name, String(dbInfo.version), dbInfo.description, dbInfo.size);\nif failing with {\"message\":\"SECURITY_ERR: DOM Exception 18\",\"name\":\"SECURITY_ERR\",\"code\":18} and localforage is properly setting the driver to use localstorage:\nreturn self.setDriver(self.LOCALSTORAGE).then(function() {\n    return self._initStorage(options);\n}).then(resolve)[\"catch\"](reject);\nbut it looks like we still try to use setItem for the the sql driver thus dbInfo.db is not defined. I'm guessing the proper functionality should be that after the fall over to localstorage we should use localstorage not websql. It works fine for the second call we make to localforage so we do fall over properly for all additional calls.\nI guess my question is should we be able to recover the first call before we fall over to localstorage?\n. last comment for anyone who runs into this, you can work around this issue by calling localforage.ready() before you make any localforage set/get calls. I don't think this is how the driver is supposed to work but it is a workaround if you need it to work on older android devices.\n. you can test this functionality by just making \"dbInfo.db = openDatabase(dbInfo.name, String(dbInfo.version),  dbInfo.description, dbInfo.size);\" fail, maybe just throw an error instead of making the openDatabase call, that should simulate a openDatabase fail\n. should be fixed already with #511 I can see if I can dig up this old device again to see if it works but I'm pretty sure it is the same issue as #511 \nWe can probably close this issue out\n. Also I see for clear() + removeItem() we are just checking req error too not the transaction, maybe we should do the same for those?\n. Here is pull request for error checks:\nhttps://github.com/mozilla/localForage/pull/360\nI'm going to look into increasing quota automatically, not sure yet if it should be done in the client or the localforage library\n. @af7 Not sure what is going on, Fire TV might not support IndexedDB right out of the box, you might have to use Cordova:\nhttps://developer.amazon.com/public/solutions/platforms/cross-platform/cordova\n\nAbout the Amazon WebView API\nBy targeting the Amazon Fire OS platform, Cordova developers can create hybrid web apps that take advantage of the advanced web engine integrated into Fire devices.\nAmazon WebView API (AWV) is a Chromium-derived web runtime exclusive to Fire OS. A drop-in replacement for the WebView that comes with Android devices, AWV makes it possible to create better performing and more powerful hybrid web apps by providing support for a faster JavaScript engine (V8), remote debugging, and hardware optimizations for Fire devices including an accelerated 2D Canvas, and access to HTML5 features not supported by Android\u2019s built in WebView such as: CSS Calc, Form Validation, getUserMedia, IndexedDB, Web Workers, WebSockets and WebGL. \n. here is some info about quotas:\n\nhttp://www.html5rocks.com/en/tutorials/offline/quota-research/\nI'm not sure what the phantomJS quota is (or if it even has indexeddb support) but most other desktop browsers are almost unlimited. I was running into quota issues on native Android WebChromeClient but I think it would be difficult to run an automated test there.\n. I's here:\nhttps://github.com/mozilla/localForage/pull/366\n. interesting, I didn't change that part of the code and npm test works on my system:\n```\nMichaels-MacBook-Pro:localForage mike$ npm test\n\nlocalforage@1.2.2 test /Users/mike/Projects/localForage\ngrunt test\n\nRunning \"concat:localforage\" (concat) task\nFile \"dist/localforage.js\" created.\nFile \"dist/localforage.nopromises.js\" created.\nRunning \"es3_safe_recast:dist\" (es3_safe_recast) task\nCompiled ES3 Safe Recast: \"dist/localforage.js\nSaved compiled file(s) at: dist/localforage.js\nRunning \"es3_safe_recast:nopromises\" (es3_safe_recast) task\nCompiled ES3 Safe Recast: \"dist/localforage.nopromises.js\nSaved compiled file(s) at: dist/localforage.nopromises.js\nRunning \"uglify:localforage\" (uglify) task\nFile dist/localforage.min.js created: 82.05 kB \u2192 22.98 kB\nFile dist/localforage.nopromises.min.js created: 63.04 kB \u2192 17.8 kB\nFile site/localforage.min.js created: 82.05 kB \u2192 22.98 kB\nRunning \"jshint:source\" (jshint) task\n\n\n15 files lint free.\n\n\nRunning \"jscs:source\" (jscs) task\n\n\n15 files without code style errors.\n\n\nRunning \"shell:component\" (shell) task\n   build : resolved in 15ms\n   build : files in 18ms\n   build : test/localforage.component.js in 19ms - 83kb\n\nRunning \"connect:test\" (connect) task\nStarted connect web server on http://0.0.0.0:9999\nRunning \"mocha:unit\" (mocha) task\nTesting: http://localhost:9999/test/test.component.html\n\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\n  \u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\n177 passing (1s)\n  7 pending\nTesting: http://localhost:9999/test/test.nodriver.html\n\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\n12 passing (304ms)\nTesting: http://localhost:9999/test/test.main.html\n\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\n  \u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\n177 passing (3s)\n  7 pending\nTesting: http://localhost:9999/test/test.min.html\n\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\n  \u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\n177 passing (3s)\n  7 pending\nTesting: http://localhost:9999/test/test.require.html\n\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\n  \u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\n177 passing (4s)\n  7 pending\nTesting: http://localhost:9999/test/test.callwhenready.html\n\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\n  \u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\n168 passing (6s)\n  7 pending\nTesting: http://localhost:9999/test/test.customdriver.html\n\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\n12 passing (303ms)\n\n\n935 passed! (18.49s)\n\n\nDone, without errors.\n```\n. ok, I'll see if I can come up with a test for this, it might be a few days since I'm trying to get a release out for one of my apps.\n. @thgreasi @tofumatt \nI integrated test cases from #515 into this pull request, everything seems good to go. One question, should I also check in the dist files?\n. sorry, I'm not sure how to merge a pull request from this fork into my fork, I will have to look into how to do that.\nI just checked in dist files so that should be good to go too.\n. @thgreasi @tofumatt I think this should be all set to merge, I merged the #515 in to this request \n. @thgreasi so your saying we might not have to do self.setDriver(self.LOCALSTORAGE), it looks like indexdb does it this way (just resolves it):\n```\n        function ignoreErrors() {\n            // Don't handle errors here,\n            // just makes sure related localForages aren't pending.\n            return Promise.resolve();\n        }\n    for (var j = 0; j < dbContext.forages.length; j++) {\n        var forage = dbContext.forages[j];\n        if (forage !== self) { // Don't wait for itself...\n            initPromises.push(forage._initReady().catch(ignoreErrors));\n        }\n    }\n\n```\n. yes, it is easy to repro:\nin websql.js replace:\n```\ndbInfo.db = openDatabase(dbInfo.name, String(dbInfo.version), dbInfo.description, dbInfo.size);\n```\nwith:\nthrow new Error('quota exceded');\nresults in this:\n```\nRunning \"mocha:unit\" (mocha) task\nTesting: http://localhost:9999/test/test.component.html\n\u2024\nRunning PhantomJS...ERROR\n\n\nPhantomJS has crashed. Please read the crash reporting guide at https://github.com/ariya/phantomjs/wiki/Crash-Reporting and file a bug report at https://github.com/ariya/phantomjs/issues/new with the crash dump file attached: /tmp/4966558E-41D1-407A-8444-C4363882E5FC.dmp 0 [ 'PhantomJS has crashed. Please read the crash reporting guide at https://github.com/ariya/phantomjs/wiki/Crash-Reporting and file a bug report at https://github.com/ariya/phantomjs/issues/new with the crash dump file attached: /tmp/4966558E-41D1-407A-8444-C4363882E5FC.dmp' ]\nWarning: PhantomJS exited unexpectedly with exit code 2. Use --force to continue.\n\n\nAborted due to warnings.\nlocalForage mike$ \n```\n. We might be able to redefine window.openDatabase to \u2018undefined\u2019 so that it throws an exception during a test, not sure I will have to play around with it. I\u2019ll be pretty busy today, maybe tomorrow I can look into it\n\nMike Marcucio\nmarcucio.com http://marcucio.com/\nmike@marcucio.com mailto:mike@marcucio.com\nblog http://blog.getitdoneapp.com/ | twitter https://twitter.com/GetItDoneBlog | facebook https://www.facebook.com/GetItDoneTasks | google+ https://plus.google.com/u/0/b/116698933997097774721/+Marcucio/posts\n\nOn Jan 27, 2016, at 1:28 AM, Thodoris Greasidis notifications@github.com wrote:\nI guess we will have to add a test with since monkey patching...\nOn Tue, Jan 26, 2016, 21:13 Mike notifications@github.com wrote:\n\nyes, it is easy to repro:\nin websql.js replace:\ndbInfo.db = openDatabase(dbInfo.name, String(dbInfo.version), dbInfo.description, dbInfo.size);\n``\nwith:\nthrow new Error('quota exceded');\nresults in this:\nRunning \"mocha:unit\" (mocha) task\nTesting: http://localhost:9999/test/test.component.html\n\u2024\nRunning PhantomJS...ERROR\nPhantomJS has crashed. Please read the crash reporting guide at\nhttps://github.com/ariya/phantomjs/wiki/Crash-Reporting and file a bug\nreport at https://github.com/ariya/phantomjs/issues/new with the crash\ndump file attached: /tmp/4966558E-41D1-407A-8444-C4363882E5FC.dmp 0 [\n'PhantomJS has crashed. Please read the crash reporting guide at\nhttps://github.com/ariya/phantomjs/wiki/Crash-Reporting and file a bug\nreport at https://github.com/ariya/phantomjs/issues/new with the crash\ndump file attached: /tmp/4966558E-41D1-407A-8444-C4363882E5FC.dmp' ]\nWarning: PhantomJS exited unexpectedly with exit code 2. Use --force to\ncontinue.\nAborted due to warnings.\nlocalForage mike$\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/mozilla/localForage/issues/511#issuecomment-175185756\n.\n\nThodoris Greasidis\nComputer, Networking &\nCommunications Engineer\n\u2014\nReply to this email directly or view it on GitHub https://github.com/mozilla/localForage/issues/511#issuecomment-175427876.\n. \n\n",
    "stephenrs": "I haven't looked too closely, but isn't UMD the answer here? Seems this wheel has already been invented.\nDon't mean to link to the obvious, but since the first comment on this thread was \"what is webpack\" maybe I'm not as behind the curve as I thought I was, so: http://davidbcalhoun.com/2014/what-is-amd-commonjs-and-umd/ https://github.com/umdjs/umd\n. I found success with webpack 1.10.1 + localForage 1.2.2 by using this wrapper library (asyncstorage): https://github.com/alekseykulikov/storage (which I was using anyway). Just make sure that either A: the only copy of localForage installed in your project is the one that comes bundled with the asyncstorage module, or B: you explicitly alias 'localforage' (in webpack.config.js) to the one bundled with asyncstorage. \nThe reason I found myself on this thread was that A and B were both false for me, and my builds were failing. Now everything is smooth and groovy again.\nHope this helps.\n. I'm having the same problem. Also installed v1.2.10 via npm.\n. @magsout That worked perfectly. Thanks so much...and @thgreasi Thank you so much for the tip - I've never used the script loader before. Really great help, right when I needed it!\n. ",
    "yuriy-yarosh": "Well, I do not use promises, but chaining promises is much more simplier than chaining callbacks.\n. ",
    "SunboX": "That would be nice for extension developers to look at \"how it works\" and to prove \"that it works\". :smile: \n. related issue: https://github.com/mozilla/localForage/issues/392\n. Yep, this was confusing to me, too. Had to look inside the file to be sure that it isn't \"without Promises\"\n. Btw, \".nopolyfills.js\" may be confusing, too! Is \".nopolyfills.js\" without require() polyfill?\nBetter: \".nopromises-polyfill.js\"\n. - one more localForage.getRemainingSize() (or localForage.getAvailableSize())\n. Jep, I didn't tell that it would be easy or would work at all. :smirk: Maybe Browsers have to expose more API's first. :cry: \nThe point is, you as a developer, you know if you can wipe some cache data before trying to store important data. But by now there's no way to get this information, just \"fire and forget\". That's sad.\nSome practical example. I'm implementing a SOAP SDK by now. We are doing some request/response caching and also storing important tokens for the SDK to work at all. Now there might be the case that I'm trying to store a token, but the storage is filled up with cached responses (that can be deleted).\n. Ah ok, seems there's no local storage support in XAML WebBrowser Control. Can we fall back to Session Storage in this case?\n. Ok, I did find the https://github.com/thgreasi/localForage-sessionStorageWrapper\nand used it like this\njs\nlocalforage.defineDriver(window.sessionStorageWrapper);\nNow it works! :smile: \n. If someone comes across this ... and for debugging purpose, proxy console.log() calls to the Visual Studio Console Output window:\n``` csharp\n        private void Browser_Navigated(object sender, NavigationEventArgs e)\n        {\n            Debug.WriteLine(\"Browser_Navigated :: \" + e.Uri);\n        const string script = @\"\n\n(function(win) {\n    function stringify() { \n        // Convert arguments to strings and concat them with comma.\n        return Array.prototype.map.call( arguments, function argumentToString( argument ) { \n            // Return primitives as string.\n            if( typeof argument === 'string' || typeof argument === 'number' ) {\n                return argument;\n            }\n            if( typeof argument === 'function' ) {\n                return argument.toString();\n            }\n            // Convert complex arguments to JSON.\n            try {\n                return JSON.stringify( argument );\n            } catch( ignored ) {\n                return argument.toString();\n            }\n        }).join(','); \n    }\n    var exec = function() { \n        window.external.Notify( 'ConsoleLog/' + stringify.apply( null, arguments ) );\n    };\n    var cons = win.console = win.console || {};\n    cons.log = exec;\n    cons.debug = exec;\n    cons.info = function() { exec( 'INFO:' + stringify.apply( null, arguments ) ); };\n    cons.warn = function() { exec( 'WARN:' + stringify.apply( null, arguments ) ); };\n    cons.error = function() { exec( 'ERROR:' + stringify.apply( null, arguments ) ); };\nwin.onerror = cons.error;\n\n})(window);\n\";\n            Browser.InvokeScript(\"eval\", new[] { script });\n        }\n    private void Browser_ScriptNotify(object sender, NotifyEventArgs e)\n    {\n        var commandStr = e.Value;\n        var output = commandStr.Substring(\"ConsoleLog/\".Length);\n        Debug.WriteLine(output);\n    }\n\n```\nXAML:\n``` xaml\n    \n                          VerticalAlignment=\"Stretch\" \n                          IsScriptEnabled=\"True\" \n                          Foreground=\"White\"\n                          Background=\"Black\"\n                          Navigated=\"Browser_Navigated\" \n                          Loaded=\"Browser_Loaded\" \n                          Unloaded=\"Browser_Unloaded\" \n                          ScriptNotify=\"Browser_ScriptNotify\" \n                          LoadCompleted=\"Browser_LoadCompleted\" \n                          Navigating=\"Browser_Navigating\" \n                          NavigationFailed=\"Browser_NavigationFailed\" \n                          IsGeolocationEnabled=\"True\">\n    </phone:WebBrowser>\n</Grid>\n\n``\n. Jep. WP8 WebBrowser Control only supports sessionStorage. So it's working using the plugin mentioned above.\n. good work! Thanks very much! :+1: \n. I dont know if you have to wait for thereq.onsuccess` here:\nhttps://github.com/mozilla/localForage/blob/master/src/drivers/indexeddb.js#L324\nMDN:\nhttps://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API/Using_IndexedDB#Adding_data_to_the_database\n. Here is a related stackoverflow question:\nhttp://stackoverflow.com/questions/29242346/an-indexeddb-transaction-that-was-not-yet-complete-has-been-aborted-due-to-page\n. Seems to be a Firefox Bug:\nhttps://bugzilla.mozilla.org/show_bug.cgi?id=1147942\n. Yeah, just updated to Firefox Developer Edition 41.0a2 (2015-07-06) and all is fine now. No more warnings. Seems fixed to me. :smile: \n. Google Closure Compiler is a minifier and a compiler for JavaScript. If you run it in ADVANCED_OPTIMIZATIONS mode, it will re-organize your code, simplify it and tries to remove unused code as much as possible.\nBut this has some side effects ... if your code does rely on external code, like localforage.getItem(), the closure compiler will try to re-name it or remove it at all, because it doesn't know what this code is for.\nTo avoid this, you can feed the compiler with so called externs files. Externs are pseudo JavaScript files with some annotations, telling the compiler what to keep.\nSo my compiler config looks something like this:\njs\n'closure-compiler': {\n    main: {\n        closurePath: 'lib/closure-compiler',\n        js: [\n            '<%= distFolder %>/<%= pkg.name %>.js',\n            'closure-compiler-exports.js'\n        ],\n        jsOutputFile: '<%= distFolder %>/<%= pkg.name %>.compiled.js',\n        options: {\n            compilation_level: 'ADVANCED_OPTIMIZATIONS',\n            language_in: 'ECMASCRIPT5_STRICT',\n            externs: [\n                'lib/closure-compiler-externs/jquery-1.9.js',\n                'lib/closure-compiler-externs/jquery.soap.js',\n                'lib/closure-compiler-externs/xml2json.js',\n                'lib/closure-compiler-externs/localForage.js' // <--- here it is\n            ]\n        }\n    }\n}\nAnd the externs file for Google Closure Compiler, what this issue is about, will look like this:\n``` js\n/\n * @fileoverview Externs for localForage\n \n * @see https://github.com/mozilla/localForage\n * @externs\n /\n/* @typedef {function(...)} /\nvar localForageCallback;\n/ @typedef {{\n    description: (?string|undefined),\n    driver @param (Array<>|undefined)\n    name: (?string|undefined),\n    size: (?int|undefined),\n    storeName: (?string|undefined),\n    version: (?|undefined)\n}} */\nvar localForageConfig;\n/*\n * @constructor\n * @param {localForageConfig=} options\n * @return {!localforage}\n /\nfunction localforage(options) {}\n/*\n * @param {localForageConfig} options\n /\nlocalforage.prototype.config = function(options) {};\n/\n * @param {string} key\n * @param {} value\n * @param {localForageCallback} callback\n /\nlocalforage.prototype.setItem = function(key, value, callback) {};\n/*\n * @param {string} key\n * @param {localForageCallback} callback\n /\nlocalforage.prototype.getItem = function(key, callback) {};\n/*\n * @param {string} key\n * @param {localForageCallback} callback\n /\nlocalforage.prototype.removeItem = function(key, callback) {};\n/*\n * @param {localForageCallback} callback\n /\nlocalforage.prototype.clear = function(callback) {};\n/*\n * @param {int} n\n * @param {localForageCallback} callback\n /\nlocalforage.prototype.key = function(n, callback) {};\n/*\n * @param {localForageCallback} callback\n /\nlocalforage.prototype.keys = function(callback) {};\n/*\n * @param {localForageCallback} callback\n /\nlocalforage.prototype.length = function(callback) {};\n```\nThis file works for me. I don't know if it is complete. :smirk:\n. And I don't know where to put such such resource. Think this may be helpful to someone other than me. Can you put this into some support folder?\n. ",
    "giuscri": "@tofumatt,\n$ npm -v\n2.1.5\n$ node -v\nv0.10.32\n. ",
    "bakulf": "With the current code, the main concerns are:\n1. how to manage the 'delete' of a key? We can easily fix this having a pendingOperationType for delete and put. Then getItem() has to implement a smarter logic.\n2. What about put vs add? Add() fails if the key already exists. With the current code this is not supported. Correct? But maybe this is not a real issue for localForage.\n3. I think we can manage all this logic with 1 single queue, instead 2: when a new operation is requested, we add it to the queue and, if we don't have a idb transaction, we create it. When the transaction is created, we do all the pending operations stored in the queue.\n. ",
    "callmehiphop": "np! happy to see it get in :)\n. @tofumatt The error was that Promise was undefined inside the test file, not that error handling wasn't being bubbled properly. The reason it probably never surfaced before is probably because the driver methods would wrap the self.ready call within another Promise which would catch an error. That made the test appear to be returning a rejected Promise, but it was actually throwing an undefined error and since the Promises were nested they created the same effect.\nI think regardless you'll probably want to add that before hook in the test, unless you anticipate that the self.ready call could throw an error? In which case that might be why the driver was using nested Promises.\n. ",
    "edwardcoolson": "Thanks for clarification. I would completely agree with you if that was a big deal to fix it. But it is not. All you need is to simply fallback to localstorage for all old FFs that support it but still don't well support indexedDB, i.e. for FF3.5 till FF17. Without this it turns out that FF 3.5 is supported (via localstorage) but FF9 is not. Is not this strange?\n. OK, no sniffing, so may be just to rip out that erroneous 'mozIndexedDB'? According to caniuse FF3.5+ will be then supported:\n- FF3.5 till FF15 via localstorage\n- FF16+ via indexedDB\nHow do you think?\n. Cool. Will be waiting for this fix.\n. ",
    "Klathmon": "I apologize. I'm a complete idiot, it seems that it's just a bug in my system, I was a little too quick to jump in and report the issue...\n. No, silly mistake on my part. The setItem was happening after the iterate() in my tests so it was returning nothing until enough time passed (which happened to be just before the second element was saved)\n. ",
    "hybrisCole": "I'm saving a JWT token using localforage, I just want to know what are my options in order to avoid someone make a XSS DOM attack to read my IndexedDB/WebSQL/localstorage.\n. ",
    "DiegoRBaquero": "I can't believe this is still an issue after  over a year :/\nI'm stuck at the same thing, setItem is damn slow compared to for example localStorage.\n+1\n. ",
    "kaeverens": "\nI can't believe this is still an issue after over a year :/\n\na year, you say ;-). > Please note that, for now, there is a setItems plugin: https://github.com/localForage/localForage-setItems https://github.com/localForage/localForage-setItems that should help :-)\nyeah- I'm testing that at the moment to see if it suits my needs (Cordova app). but because the default databases (indexeddb, localstorage, websql) are not ideal because of their non-guaranteed persistence, I need to combine it with an external plugin for SQLite, which will need hacking to let it understand the non-standard setItems method.\nif localForage were to support setItems as an \"official\" method, then that would encourage third-party plugins to also cater for the method without requiring hacks.\nupdate: looks like the external library I was working with does not need hacking. happy!. the SQLite library I used was this: https://github.com/thgreasi/localForage-cordovaSQLiteDriver\nwith this as the Cordova driver: https://github.com/nolanlawson/cordova-plugin-sqlite-2\nBefore setItems, I was getting a speed of about 10 writes per second on my device (Huawei P20 lite)\nAfter setItems, it's about 150 w/s, so a 15x speedup.\n. ",
    "nemn": "Awesome library! I'd like to use setItems for my application, it would make localforage really complete! In fact there is no way to insert a big number of fields (without waiting several minutes) at the moment. keep going! :))\n. ",
    "whitecolor": "will it be considered?\n. hm, it seems that problem have gone after update to 1.4 from 1.3\n. @tofumatt yes its just a file and \"types\" filed in package.json\n@thgreasi \n\nPS: atm I'm thinking of incorporating the export = syntax in the typings, just like how pouchdb did.\n\nwill you able to accomplish this with PR?\nYou also have this nice plugins (setItems, getItems, removeItems) https://github.com/localForage\nI'm not sure how they should play and could they extend with localforage typings.\n. @thgreasi \n\nYour definition files should ... not contain triple-slash references.\n\nI am not so long in typescript, but to me triple slashes seems to me obsolete.\nI asked the question here:\nhttps://github.com/Microsoft/TypeScript/issues/10635\n\nWhat troubles me is how the various localforage-extensions will be able to reference the localforage.d.ts\n\nI my view it should be done just:\njs\nimport {LocalForageDriver, localforage} from 'localforage'\nIt is achieved by just exporting interfaces/types\n. ",
    "Elephant-Vessel": "Are we getting this or equivalent awesomeness soon?\n. Could you add the type definitions to @types instead? Today there is some assumptions build into type resolution that assumes that these are in @types: \nhttps://github.com/Microsoft/TypeScript/issues/20367#issuecomment-348263469\n\n/// < reference types=\"request\" /> has a specific meaning today. it knows it needs to look in @types packages.\n\nI have a package that has a type-dependency on LocalForage, and the compiler is not generating the type dependency in my type definitions (by using <reference types...), which as far as I understand is because the types for LocalForage are not found in @types. This means that I have to manually add this every time I recompile my project for the resolution to work in consuming projects.. ",
    "16n": "I'm really waiting for this to get merged. I ran into massive performance problems due to this and I would love to get the batch feature merged. Is there any progress to report?\n. @tofumatt thanks!\n. Sorry for the inaccurate issue description. \nI tried different browsers and the problem is only occurring since Chrome41. My exact Version: 41.0.2272.101 (64-bit) (stable).\nThe problem only occurs if the driver is set to WebSQL:\njavascript\nlocalforage.config({\n        name: 'MYName',\n        version: 1.0,\n        storeName: 'mynamestore',\n        driver: localforage.WEBSQL\n    });\nIf I change the driver to\njavascript\n        driver: localforage.INDEXEDDB\neverything works fine again.\nI also tried the newest dev build (Chrome43) and the exact same issue occurs.\nThanks,\ndaseinhorn\n. Definitely. Since the IndexedDB driver works absolutely fine it really is not critical.\nBut strange enough that Chrome introduces breaking changes to the WebSQL API without a notice.\n. ",
    "zawaideh": "Just curious if there is still a plan to merge this in?\n. Thanks! And thank you for all the great work!\n. ",
    "thomasconner": "Will this still be merged?\n. What needs to be tweaked? I might have some time if you can point me in the right direction. Thanks for the great work!\n. ",
    "kynetiv": "ugh... my misshit, I was using the localforage.js from this repo, not https://github.com/mozilla/localForage/releases/tag/1.2.0\n. Well, again this is probably my ignorance of bower, but when installed from bower it included the same files as the repo's master branch so I just used dist/localforage.js and went with that -- which was missing the es6-promises dependencies for whatever reason.  The release branch however had the es6 polyfill backed in (which is what my original problem).... \ntl;dr : maybe add that if promises aren't working in any version of IE, you didn't load the localforage.js version that comes with the es6-promise polyfill.\n. ",
    "ArthurianX": "Has anyone else got this error before ? So I know where to actually start debugging (going top to bottom now, but someone knows something about this)\n. Nice to have brought it to your attention.\nI think JS-Data does serialisation on DB actions, but, nonetheless I am trying to save a simple JSON Object, https://www.dropbox.com/s/4uuf6i1qfnb2i0c/Screenshot%202014-12-16%2023.51.25.png?dl=0\nSo the path this data takes is like this:\nJS-Data method to update > Sends it to the active adaptor > JS-Data localForage Adator > localForage > Browser DB/localStorage.\nMy priority is like this atm - [localforage.WEBSQL, localforage.INDEXEDDB, localforage.LOCALSTORAGE] - first one found will be used by JS-Data.\n. From what I can see in the error is that there is no .toString function found, I am guessing this happens from the localForage layer down to the browser, if we are not using a more capable storing option like WebSQL\n. I am also using a schema plugin, with which I can define a schema with proper and custom validation per each field, and a lot of other actions, http://www.js-data.io/v1.0.0-alpha.5-8/docs/js-data-schema\nI'll try to put a JSFiddle up this evening, hopefully :)\n. Yeah, I'm a bit ashamed :), I found the issue.\nI encountered a problem with updating only part of entries, I didn't stayed long enough to figure it out, so on each small change, I would get the object, edit a property of it, then update the whole entry in the DB.\nI realised it was non-performant to do it like that, but I had to do it in a timely manner.\nNow I had time to debug it with this blocking issue on FF, and apparently this was the issue, if I disable the schema I can update only a property of an object in DB and it won't throw an error anymore in FF.\nAt least you found out about JS-Data, it's a pretty big package, but still in alpha.\nThis was the rubber duck method at work :) Thanks!\n. My issue is fixed (it lets me update separate properties of an entry) , but actually the issue per say I think it still stands, it depends where does it originate from:\nlocalForage > replacing an entry entirely (copying/ keeping revisions/history?), not updating it\nOR\nFrom JSData > the update method fails when updating the whole  entry (not only X property) (copying/ keeping revisions/history?), I'll look into that the next evenings.\n. ",
    "stakach": "Loading videos from blobs hits this issue on Safari - also it looks like the latest safari is still having the blobs serialized, however it supports IndexDB according to caniuse\n. ",
    "godchuanz": "I'm facing the exact same issue, but I'm on Firefox 35 (Windows).\nIt worked fine on Firefox 34.0.5 (Windows).\nChrome and IE both worked fine, so it could be a Firefox issue rather than a Localforage issue. Either way, it's a Mozilla issue.\nAnyone any ideas why this is happening?\n. If it helps, I realised that if all IndexedDB files are deleted manually from computer, the error doesn't occur. This suggests something in IndexedDB changed in Firefox v35 onwards, which is somehow incompatible with db files created in previous versions. I can't be sure though.\n. ",
    "basiclines": "This is still happening in latest Firefox Developer builds.\n. Hi @siddo420, Firefox does not allow to access to IndexedDB / Localstorage if the browser is in private mode. Otherwise Chromes allow it but does not keep the persistence.\nYou should check for if (!!error && error.name == \"InvalidStateError\")  doSomething(); and provide an alternative fallback if needed?\nHope it helps!\n. Nope is not supported you're right :D\n. ",
    "scunliffe": "Looking at the error I see in Firefox 36.0.1 there's 2 keys in the error object, name=Unknown Error and message=\"The operation failed for reasons unrelated to the database itself and not covered by any other error code\"\nThe same error code occurred years ago in this bugzilla report: https://bugzilla.mozilla.org/show_bug.cgi?id=643318 whereby Firefox wouldn't let the IndexedDB be created on the localhost.\nThis seems highly suspicious since that is exactly the same place I am currently trying to set it (as I would expect any developer to while developing).\nFinally this great site: http://demo.agektmr.com/storage/ that lets you test the maximum limits of various local storage options shows Firefox as \"not supporting\" IndexedDB even though it should be supported: http://caniuse.com/#search=IndexedDB in Firefox 35+\nThus it looks like an underlying Firefox issue - but I can't seem to find a current bugzilla report for it. I'm going to see if I can create a simple test case that fails and if so file a bug with bugzilla.\nUpdate: bugzilla bug link: https://bugzilla.mozilla.org/show_bug.cgi?id=1143003\n. ",
    "pghalliday": "Sorry for pinging an old issue, but it seems the place to record the answer to the question. I understand that in private browsing scenarios, localStorage will be available but won't actually store anything (https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API/Using_the_Web_Storage_API).\nDoes localforage detect this when determining what drivers are available?. That's great, thanks :). ",
    "zdennis": "@tofumatt, do you know what the upstream project is for promise/asap? I have dug through several repositories that define asap functionality but none of the code so far looks like it matches.\n. Thanks @tofumatt, it looks like it's the right place. I have opened an issue there.\n. @thgreasi / @tofumatt, we ended up patching the conditional locally IIRC, but it's been a while since I've been on that project. Will re-open if I experience it again on any others. Thanks!\n. ",
    "stefanpenner": "Which version of IOS? iOS is unfortunately known to sometimes drop pending setTimeouts in some states. It is extremely broken that this happens. I have not encountered it beyond ios6, but this does not mean it is not possible.\n. ",
    "akinnee": "I'm seeing this too.. ",
    "slyfox42": "I have the exact same problem, I am saving data on IndexedDB through Redux Persist and localforage, after all data is saved I have a storage size of ~1.4Mb. If I trigger the redux actions again the storage size will keep on increasing even though the IndexedDB JSON is still exactly the same. Every few MBs or so Chrome will clear some of that space but I never get back to that initial 1.4Mb of storage. \nAny idea what might be causing this and how to fix? \nThanks\nEdit: typos. ",
    "k88hudson": "Thanks, much appreciated!\n. ",
    "RobYed": "I can confirm, that createInstance with the IndexedDB driver currently doesn't create multiple instances with the same name. Whereas multiple instances with different name work. With the WebSQL driver this is not a problem at all. Same name but different storeName works well.\nThe feature itself is awesome! It's exactly what I needed in my app project :)\nTested with localforage version 1.2.2 on \n- Win8.1 + Chrome 43 canary\n- Ubuntu 14.10 + Chrome 41\n- Ubuntu 14.10 + Firefox 36 (IndexedDB driver)\n. ",
    "ericeslinger": "Hmm, yes - I changed the $localForage to localforage in my code (using the regular library instead of the angular-localForage wrapper), and the return changed from undefined to null, as expected.\nI'll go ahead and close this, and open a ticket on the other project. And also I'll take a moment to grumble about javascript having both undefined and null.\n. Yah, I was thinking about building something to debounce all my calls to localforage, to make sure I don't send more than 255 in at a time. This particular bug only happens in limited circumstances (when I need a list of all the users to filter by name in my system), and unfortunately the way I have architected my system, there's no single choke point - each data model object is independent and only knows about itself when it's time to pull data out of the localforage cache.\nSo funneling things through and making some kind of work queue is feasible, but just kind of annoying if it's a chrome thing only. Hopefully they fix it.\n. Chromium issue - seems they did it on purpose. \nhttps://code.google.com/p/chromium/issues/detail?id=584768\n. Nope, it went away with a later build, so I am going to assume this was a beta bug in indexeddb (I think it was overrunning its storage allocation somehow, b/c it only happened when my indexeddb was large) and is now fixed. Closing.\n. Putting a catch on localforage.ready() doesn't help. I don't even need to call .ready() to generate the rejection error. That's because the init code that gets called in new LocalForage() is what generates the error, and there's a constructor call in the export at the end of the LF definition file.\nThis might be lousy for programmer ergonomics, but basically putting all the init inside a .initialize() kind of call would be good - but then frontend people have to remember to .initialize() before using localforage.\nOf course, one could do a curry thing where any access method checks to see if the init has been run, and runs it. The problem, of course, is that the init code is async, so you'd have race conditions and stuff to avoid (don't run it twice!).. Works for me.. I can confirm that this causes localforage to no longer generate an unhandled promise rejection on require() in a node environment.. ",
    "gaearon": "cc @sokra\nThe problem seems to be due to Webpack not being able to tell if localStorage.js is a CommonJS or AMD file as it tries to be both.\nLooks similar to https://github.com/webpack/webpack/issues/424.\n. ",
    "jhnns": "The problem is afaict that localforageSerializer is not known as AMD module when it is required. I'm not experienced with AMD modules, but can't you just use relative paths?\nYou could also just switch the if clause and check for ModuleType.EXPORT first . Webpack supports both module syntaxes and uses the first it encounters.\n. ",
    "sairion": "Having same problem. Also, using imports-loader does not solves problem. (Since it assigns var require as false, https://github.com/mozilla/localForage/blob/master/src/localforage.js#L6 throws an exception. (I think Webpack could not statically analyze require() call inside expression)\nI would like to fix this problem as well, but I ended up using IDB polyfill.\n. ",
    "HenrikJoreteg": "This seems like a duplicate of #290. Anyway, I'm having the same problem and have been unable to work around this. Any help appreciated.\n. I'm still struggling with this, the webpack config tweaks suggested above don't seem to help. \nI'm getting this error:\n```\nWARNING in ./~/localforage/src/localforage.js\nCritical dependencies:\n333:24-54 the request of a dependency is an expression\n @ ./~/localforage/src/localforage.js 333:24-54\nERROR in ./~/localforage/src/drivers/localstorage.js\nModule not found: Error: Cannot resolve module 'localforageSerializer' in /Users/henrik/Sites/foo.bio/node_modules/localforage/src/drivers\n @ ./~/localforage/src/drivers/localstorage.js 70:16-59\nERROR in ./~/localforage/src/drivers/websql.js\nModule not found: Error: Cannot resolve module 'localforageSerializer' in /Users/henrik/Sites/foo.bio/node_modules/localforage/src/drivers\n @ ./~/localforage/src/drivers/websql.js 63:16-59\n```\n. @thgreasi i just tried setting \"webpack\" to dist/localforage.js as per your fix. I'm still seeing issues:\n```\nWARNING in ./~/localforage/dist/localforage.js\nCritical dependencies:\n2603:24-54 the request of a dependency is an expression\n @ ./~/localforage/dist/localforage.js 2603:24-54\nWARNING in ./~/localforage/dist/localforage.nopromises.js\nCritical dependencies:\n1920:24-54 the request of a dependency is an expression\n @ ./~/localforage/dist/localforage.nopromises.js 1920:24-54\nWARNING in ./~/localforage/dist/localforage.min.js\nCritical dependencies:\n7:24233-24247 the request of a dependency is an expression\n @ ./~/localforage/dist/localforage.min.js 7:24233-24247\nWARNING in ./~/localforage/dist/localforage.nopromises.min.js\nCritical dependencies:\n7:19049-19063 the request of a dependency is an expression\n @ ./~/localforage/dist/localforage.nopromises.min.js 7:19049-19063\nERROR in ./~/localforage/dist/localforage.js\nModule not found: Error: Cannot resolve 'file' or 'directory' ./../utils/serializer in /Users/henrik/Sites/hubflow-redux/node_modules/localforage/dist\n @ ./~/localforage/dist/localforage.js 1596:24-56 1918:24-56\n```\nIt keeps going for a bit.. \n. ",
    "janza": "I've used: \nmodule: {\n        loaders: [{\n            test: /localforage\\/dist\\/localforage.js/,\n            loader: 'exports?localforage',\n        }]\n}, \nalias: { 'localforage': 'localforage/dist/localforage.js'}\nseems to work ok\n. You're right, I missed this part of the config: \n```\n        noParse: [\n            /localforage\\/dist\\/localforage.js/\n        ]\n```\nso the whole thing is:\n```\nmodule.exports = {\n    module: {\n        loaders: [{\n            test: /localforage\\/dist\\/localforage.js/,\n            loader: 'exports?localforage',\n        }],\n        noParse: [\n            /localforage\\/dist\\/localforage.js/\n        ]\n    },\n    resolve: {\n        alias: {\n            'localforage': 'localforage/dist/localforage.js'\n        }\n    }\n};\n``\n. @prakhar1989 you need to install exports-loader:npm i -S exports-loader`\n. ",
    "prakhar1989": "@janza: Hi, I've modified my webpack.config.js as suggested by you and I can no longer see the errors that @HenrikJoreteg was seeing. However, now I'm getting the following -\nERROR in ./js/stores/SurveyStore.js\nModule not found: Error: Cannot resolve module 'exports' in /Users/asrinivasan/Code/react-surveyman/js/stores\n @ ./js/stores/SurveyStore.js 13:0-22\nThe SurveyStore looks like this - \njavascript\nvar localForage = require('localforage');\nAny help?\n. Thanks @janza. Although I'm now using another localStorage lib I'll give this a shot and report if there are any issues. Thanks again!\n. ",
    "shprink": "Thanks @janza it works as expected :)\n. ",
    "ALF-er": "webpack 1.11.0, localforage 1.2.7\nStill get\n```\nWARNING in ./~/localforage/src/localforage.js\nCritical dependencies:\n334:24-54 the request of a dependency is an expression\n @ ./~/localforage/src/localforage.js 334:24-54\nERROR in ./~/localforage/src/drivers/localstorage.js\nModule not found: Error: Cannot resolve module 'localforageSerializer' in C:\\dev\\projects\\trill\\node_modules\\localforage\\src\\drivers\n @ ./~/localforage/src/drivers/localstorage.js 70:16-59\nERROR in ./~/localforage/src/drivers/websql.js\nModule not found: Error: Cannot resolve module 'localforageSerializer' in C:\\dev\\projects\\trill\\node_modules\\localforage\\src\\drivers\n @ ./~/localforage/src/drivers/websql.js 63:16-59\n```\nfor me =(\n. So, after npm install git+https://git@github.com/mozilla/localForage.git\nand setup webpack to run localForage.js thru babel-loader I got this:\nERROR in ./~/localforage/src/localforage.js\nModule build failed: ReferenceError: Unknown plugin \"system-import-transformer\"\n    at PluginManager.subnormaliseString (C:\\dev\\projects\\trill\\node_modules\\babel-core\\lib\\transformation\\file\\plugin-manager.js:147:13)\n    at PluginManager.add (C:\\dev\\projects\\trill\\node_modules\\babel-core\\lib\\transformation\\file\\plugin-manager.js:190:40)\n    at File.buildTransformers (C:\\dev\\projects\\trill\\node_modules\\babel-core\\lib\\transformation\\file\\index.js:237:21)\n    at new File (C:\\dev\\projects\\trill\\node_modules\\babel-core\\lib\\transformation\\file\\index.js:139:10)\n    at Pipeline.transform (C:\\dev\\projects\\trill\\node_modules\\babel-core\\lib\\transformation\\pipeline.js:164:16)\n    at transpile (C:\\dev\\projects\\trill\\node_modules\\babel-loader\\index.js:12:22)\n    at Object.module.exports (C:\\dev\\projects\\trill\\node_modules\\babel-loader\\index.js:69:12)\n @ ./src/app/utils/OfflineStorageUtils.js 11:19-41\n. ",
    "luisrudge": "so, can anyone please test and merge this if it's really working? :D thaaanks\n. ",
    "Skeen": "57 seems related to this.\nHaving node support makes sense if you want to utilize the same code on both client and server end.\nI guess there could be a myriad of reasons to do this; among others:\n- Enabling rapid prototyping and code reuse, by (temporarily) using a sub-optimal storage scheme.\n  - Eventually one could port the code to use redis or another backend system.\n- Testing sub-modules of a webpage with node.\n  - There can be plenty of reasons for not testing within a headless browser.\n. Hello,\nI am aware that this pull request will be rejected, according to the;\n    'Features localForage will reject' --> node.js support.\nYet I'm proposing this pull request for others to find, when they require node\nsupport in the future. I created this since I needed node support for two \nreasons, namely;\n- Running the same code on both client and server.\n  - This enables rapid prototyping by maxizing code reusability.\n  - It helps out new programmers, as they only need to learn one new library.\n  - As the library has a simple key-value interface, it's easy to eventually\n    port code to redis or another more optimal backend key-value storage.\n- Testing browser code locally (outside of the headless browser configuration).\n  - One case where this makes sense, is by the above, i.e. testing local code,\n    which utilizes this library outside of the browser context.\n  - Another case can be when resources or time is limited, testing directly\n    in node is usually faster than within a headless browser environment.\nNevertheless; this pull request addresses: #345 and #57.\n. While writing my unit tests; I found two pieces of unexpected behaviors.\nI have not tested the browser behavior yet. As such I cannot tell if the they \nare reproducable, or they stem from bugs in the emulation layer.\nI just want to (de)confirm my understanding of the API.\nThe two cases are:\n- removeItem\njs\nit('should not allow removing invalid keys', function(done) {\n    localforage.removeItem('key', function(err)\n    {\n        ...\n    });\n});\nBeing run on an empty storage, I would expect an error (we're trying to remove,\na non existing key).\n- keys\njs\nit('should start out empty (value check)', function(done) {\n    localforage.keys(function(err, keys)\n    {\n        ...\n    });\n});\nBeing run on an empty storage, I would expect keys to be '[]', but this is not\nthe case.\n. @thgreasi: A custom driver would be fine with me; all I really wanted was node.js support and hence I went with the easiest and quickest implementation that would fulfill my requirements.\n- The argument being that utilizing a client-side library for server-side is somewhat 'wrong', and hence you should not expect superb performance or metrics, only correctness.\n@tofumatt: When during your review please keep a few things in mind, which may be deal-breakers:\nThe package.json 'browser field' has been added, and the 'main field' has been changed; package.json:55+56\n- This affects the ordinary functionality of the library, i.e. it COULD break stuff. Thorough testing would be required; also the 'browser field' is not even in the real package.json standard, but rather posted here.\n  - We specifically need to check, whether the bundlers we want to support actually respect it. According to this webpack may need a work around, while jspm and browserify seem to respect it as is.\nThe code should be modified to pass the jshinter, such that the actual testing errors mentioned here, actually show up on travis.\n- I will look into this first thing, when I get into the office in a few hours. We need to discuss these diverging test cases, but before looking further into these; I'll test the correspondence with the browser implementation.\nWe need unit tests for 'iterate' and the entire promises based Data API.\n. Travis now builds and fails to two mentioned test cases.\nI have tested these two test cases on in the browser environment (via. js-fiddle);\n- removeItem\nThe browser does not throw an error when removing a non-existent element, so the node.js implementation seems in sync with the browser implementation.\n-- I'm curious however as to why this does not happen?\n- keys\nThe browser returns an empty array '[]', when there are no keys stored. This is the behavior I expected, and hence I conclude that the failure is in the node.js implementation. I'll look into this.\n. keys did in fact return an empty array on node.js as well, my method of checking was improper. As such the node.js implementation seems to be completely in-sync with the browser one, in regards to the provided unit tests.\n-- We still miss unit tests for iterate and the entire promise based data api.\n. I guess I have to agree with @nolanlawson, due to the quality of dom-storage, maybe this pull request should be rejected.\nI don't mind this; I expected this pull request to be rejected on principle.\nI just wanted to publish my proof-of-concept for others to find.\n@nolanlawson suggestions for alternative implementations sound excellent to me, but quite frankly my patch fulfills my own requirements (proof-of-concept prototyping), and I'm afraid I wont be implementing his suggestions.\n. Oh, I do not feel unwelcome at all! ^.^\nI'm just stating that my desire to have localforage run on Node was purely for proof-of-concept projects, not for production quality projects, which shows by the fact that I decided to utilize a somewhat random localStorage shim rather than implement a better solution.\nHence, I simply agree with you, that while dom-storage might be fine for proof-of-concept kinda deals, it is indeed not a production quality library.\nA production quality implementation would be nice to have, but it was simply not worth the effort for my use case :).\n. I did that, and you are able to do;\njs\nvar localforage = require('localforage');\nAdditionally; I agree that the nopromises version may be a bit silly for node.\n. To replace the dist files (i.e. for getting the header in there), what would be a better approach;\n- Making an index.js file for nodejs, which includes the node.js header and the rest of the library?\n. ",
    "frumbert": "I haven't been able to get any browser other than the older Safari's to fail - Chrome has always let me store as much as I want without a prompt. Safari (in my experience) however is good at saying it supports a feature without actually supporting it.. On the codepen I'm currently just seeing LocalForage DBQuota Pen Error Error: No available storage method found.. Safari Version 10.0.3 (11602.4.8.0.1). Oh so it's another one of the Safari + Iframe issues. I should have thought of it, since I have iframes. Now Safari prompts again, asks for 5MB each time (no increase) and as you say doesn't save the data. I tried setting the value to something high (20mb) to begin with then letting the smaller values fit in - but it's the same deal. It prompts for 5MB each time regardless of how much is being asked for, and fails on the return from the dialog.\nLocalForage DBQuota Pen\nready: webSQLStorage\nsetItem0 rejected [object SQLError]\nrejected [object SQLError]\nError [object SQLError]. On my desktop Safari 10.0.3 (11602.4.8.0.1), I get prompts for 5 and 50 MB.\nOn my iPad Safari (ios 9.3.5), i also get prompts for 5mb then 25mb - seems good!\nThe log gets to all done in both cases.. ready is working; removing localforage means the script executes as expected. Seems like a race / concurrency thing - I'll have to try some radical restructuring (except it works beautifully everywhere except Safari)\n. ",
    "samvloeberghs": "Hi @thgreasi,\nI get your point. But that does not answer my question: shouldn't it reject with null and a suitable error message when trying to get an unexisting key? \nAnd based on your test argument, the test could also be written as\nit('returns null for undefined key [promise]', function(done) {\n        localforage.getItem('key').then(function(value) {\n            done();\n        },\n        function(err, value){\n           expect(value).to.be(null);\n           done();\n        });\n    });\nOr something like that..\nRight? Or am I missing something else here?\nCan anybody explain me the why please? :)\nGrtz\n. ",
    "joacim-boive": "I caught it... It's reverting back to localStorage when IE is running in \"Private Mode\".\nRunning in regular mode, it uses indexedDb as it should.\nSorry about that. =)\n/J\n. ",
    "irukavina": "You're right - I'll modify the code and update the PR.\n. One thing that gives me concern is the following scenario: \nImagine someone creating a WebSQL storage with localForage. One of the used options is version:\ndbInfo.db = openDatabase(dbInfo.name, String(dbInfo.version),\n                                         dbInfo.description, dbInfo.size);\nIf the casting fix is added, the version parameter would be first cast to a float, and then recast as a string. Thus, before the fix, if the version was 13.0a, openDatabase will be called like this:\nopenDatabase(_, '13.0a', _, _)  // no casting here\nand after the proposed fix openDatabase would be called like this:\nopenDatabase(_, '13', _, _) // String(parseFloat('13.0a')) -> '13'\nThis call will result in an error since there is no db.changeVersion in the localForage's WebSQL driver: \nunable to open database, version mismatch, '13' does not match the currentVersion of '13.0a'\nI think that either: \n- the check if float is not a number should be a bit smarter, throwing an error if there are characters that are not standard in a number (for example, alphanumerics) \n- a breaking change in the API will have to be added\nCan you share your thoughts on this? \nThanks \n. ",
    "adamcbrewer": "Thank's for replying @tofumatt. I realise now the version this was build with was version 1 \u2013\u00a0this probably had something to do with it.\nI spent most of yesterday pushing out a quick patch, so it's not so easy to  provide some screenshots at the moment, but the code blow is pretty much what was used (excuse the nesting).\nI'll try this again myself as soon as I can as well.\n``` js\nvar testData = [\n    {\n        test: true,\n        someValue: 'string'\n    }\n];\nlocalforage.setItem('testKey', JSON.stringify(testData), function () {\nlocalforage.getItem('testKey', function (data) {\n\n    // fails when using WebSQL as 'data' is an object\n    // and jQuery.parseJSON throws and error if 'data'\n    // is not a string\n    var dataParsedError = $.parseJSON(data);\n\n    // Works fine as this method returns the original object\n    // if passed something other that a string.\n    var dataParsedSuccess = JSON.parse(data);\n\n});\n\n});\n```\n. A lot of the code that was written is using anonymous functions, not promises, so I'm waiting for a quiet period to try the upgrade. Without modifying the code an upgrade currently breaks the app.\nI'm thinking this would be an obvious issue if the problem persisted to the current version. Given that the error happened with an older version do you think this isn't an issue anymore? Happy to close it if you agree.\n. Will do \u2013 thanks Matt!\n. ",
    "cristoferdomingues": "Hello Guys, has this issue resolved?\n. ",
    "afilp": "I get the QuotaExceededError while I believe that I have an empty IndexedDB store, since I use store.clear() before I do a store.put(). I cannot use the DevTools to verify the store contents because I am working on an Android Fire TV environment. Why could this happen? Is the automatic increase in quota implemented?\n. Hello, this is a bug that causes errors in my case, because I use two dbs inside localStorage.\nThis is why I added this code...\nif (key.indexOf(keyPrefix) !== 0) { \n                    continue;\n                }\n...between these lines here:\nvar key = localStorage.key(i);\nvar value = localStorage.getItem(key);\nhttps://github.com/mozilla/localForage/blob/master/src/drivers/localstorage.js#L112-L113\nCould you please add these to MASTER so that localForage behaves as expected?\nI have created a PR for this: https://github.com/mozilla/localForage/pull/418\nI really need to just add the npm package to my project and not have to compile the source files (so that I get this issue fixed).\nThanks!\n. Hello Matthew,\nglad to be of help, I see that you replied to the PR and that you will add the test in a few hours. \nThank you!\n. Hi!\n1. Are the localforage.serializer and the rest encapsulated methods that need to be exposed available for v1.3? (or will be?) I believe that these are definitely needed because our browserify project uses the module system, so we have no global objects. Therefore, there are problems with the serializer, etc. \n2. I would also like to create a custom driver and use it when all other 3 drivers are not supported. Do you expose any methods to check which driver is to be used? (like driverSupport but exposed)\n   I could use this method and if this returns null then I would know that all 3 drivers cannot be supported so that I can then apply our custom driver (but will this work in this sequence of events? can I apply a custom driver afterwards?).\nThanks!\n. Sure, for the 2nd bullet there is no need for a separate discussion, as I now realize that you do expose the _driver property on the localForage instance.\nThe 1st bullet is indeed related to this thread (browserify) and basically for when custom drivers are to be implemented. When using the module type (like browserify does) we do not have the serializer exposed, so how can we use it on our (browserify-based) project code for a custom driver that we want to develop? Unless I miss something here. So, I believe that the suggestions of @thgreasi are very valid (and actually needed in my case). I hope these methods can be exposed to the localForage instance (not on global) in the upcoming v1.3 so that we can use them now.\nThanks.\n. Hello Matthew,\nI am not sure if it is totally needed, but you have this final code on the other tests while not have it on this test:\nlocalStorage.clear();\nFYI, this is what I did for a test (I will not do a PR now obviously):\nhttps://github.com/af7/localForage/commit/229d30709f02d7b56faf5a0c2087c959c0c082c3\nThanks.\n. Also, in your website docs, you call the argument of the successCallback as result but you use it as error on the test.\nThis is what you have on the Docs...\n// Exit the iteration early:\nlocalforage.iterate(function(value, key, iterationNumber) {\n    if (iterationNumber < 3) {\n        console.log([key, value]);\n    } else {\n        return [key, value];\n    }\n}, function(result) {\n    console.log('Iteration has completed, last iterated pair:');\n    console.log(result);\n});\n...and this is what you use on the Test:\n}, function(err) {\n     if (!err) {\n. Concerning the localStorage.clear(); question, I thought that this is done so that the next test starts with a clean localStorage environment (which is needed for proper testing). This is why I though it is kind of necessary.\nIt seems that tests that need this clean environment could start with localStorage.clear();, so that you do not have to do this at the end of each test. In any case, you know much better what needs to be done (or not).\nThanks again!\n. Also, in the edited example, what if the db has just 2 keys?\nThe result on the SuccessCallback will be undefined I assume? So the message \"Iteration has completed, last iterated pair:\" does not make much sense in this case?\n. Thx, you may also add the driver() method, as this is what I will be using in my case.\nI will be checking for null and if yes then test if our own driver can be supported on the specific hardware and load it instead.\n. Not sure if this needs a different ticket, I also use the createInstance in order to create 2 different localforage databases (thus I had the bug with iterate).\nSo, maybe you would like to document createInstance too (it is not documented).\n. Also, shouldn't this 'iterate' test be in the section where the driver is 'localStorage' only? \n. The example code is the own you have in your documentation for 'iterate', just add some localStorage keys that do not have the prefix of localForage, preferably with characters that will make them go both above and below the order of localStorage.\nThen, perform the iterate() and you will see that the iterationNumber increments also for these items that are ignored by the loop (with the 'continue').\nSo, if you push the iterationNumber of each item to an array, at the end you get something like that:\n[3, 7, 8, 12, 15]\n(it depends on where the non-localForage items are positioned inside localStorage)\n. For tests, I can't really tell, you may disregard my test. I am on a windows machine and had problems setting up the environment, I always get messages like this on most tests:\nWarning: PhantomJS timed out, possibly due to a missing Mocha\n run() call. Use --force to continue.\n. I believe that this fix is definitely needed along with the other one (that made it to the master). This way the localStorage driver is consistent with the other 2 drivers (no gaps in iterationNumber).\nI hope you can add this and release the 1.3 version to NPM, as these fixes in localStorage driver makes it possible for us to use localForage. Thanks!\n. Hello Matthew, can you please add the code to master, the tests were failing due to \"timeout\" and don't know why (the code is very important to be added in v1.3). How can we re-run the tests? (I see no such option in the interface).\nIt says: \"Warning: PhantomJS timed out, possibly due to a missing Mocha run() call.\u0007 Use --force to continue.\"\nSo it aborts due to this warning. How can you use the '--force' option to continue?\nP.S. Please note that this fix is very important to be included with the other fix, otherwise the localStorage driver will not work as expected.\n. Yes, you are right, I will create a new test and submit a PR again.\n. Here is the new PR: https://github.com/mozilla/localForage/pull/434\nNote that without this change the solution for localStorage in 1.2.8 is not working... So, I am afraid that a 1.2.9 should be released on NPM with the change of PR434 included.\nThanks!\n. Hi! \nFor now we have to do the following for the serializer (for a custom driver):\nvar serializerPromise = new Promise(function (resolve/*, reject*/) {\n            resolve(require('./../../../../node_modules/localforage/src/utils/serializer'));\n        });\nIt would be great if @thgreasi's proposal for a getSerializer (or a property) is implemented; then, that ugly code can be removed.\n. Note that without this change the solution for localStorage in 1.2.8 is not working... So, I am afraid that a 1.2.9 should be released on NPM with this PR change included.\nThanks!\n. Thanks! Now time to pack for your flight, enjoy!\n. You're welcome! :blush: \n. @tomufatt, when do you believe you will be able to release 1.3? It seems that with 1.2.9 I have problems with webpack and its uglify plugin (the size of the project is not reduced as when I change the 'dist' to 'src' on package.json). Did you experience this also?\n. Also: (this goes to @thgreasi too)\nIf 'dist' is to remain, wouldn't it be more appropriate to use the '.min' file instead?:\n\"webpack\": \"dist/localforage.min.js\",\n(we now have \"webpack\": \"dist/localforage.js\",)\nUnless the new implementation takes care of the webpack's \"Uglify\" logic itself.\n. Ok, I understand, please have in mind my goal too: Use webpack's uglify to create the smallest possible (.min) output of my application (that uses localforage). I will have to test 1.3 for that and will let you know. It will be great if you can release 1.3 soon in order to try it with the 'uglify' in webpack. Thanks!\n. @tofumatt and @thgreasi\nMore info on this:\nI did what the README says (i.e. used the require('script!localforage'); way to require localforage, without changing the dist to src) and the size of my (uglified) webpack project is 155K, which is too large comparing to the 84K produced when I use import localforage from 'localforage'; and change the dist to src (which causes some reported errors though but the compiled app runs without problems).\nPlease have that in mind for the webpack solution (localforage needs to be properly uglified like any other package, within our compiled bundle).\nLooking forward to the release of 1.3. Thanks!\n. @thgreasi \nThanks, indeed I added the \"babel-plugin-system-import-transformer\": \"^1.1.4\" in my package.json and it now works. I would recommend that this is documented somewhere as other developers may also want to build solutions with webpack having localforage as an 'import'.\nP.S. I did not make any changes to the localforage files (i.e.I target the dist folder which is the default).\n. Thanks @tofumatt, I read the page about loose in babel (http://babeljs.io/docs/advanced/loose/) but this does not seem to have anything to do with top-level imports/exports. It says something about Object.defineProperty. I tried it but it did not make any difference. I use browserify and babelify for the tests.\nAre you sure that this is the proper approach?\n. Hi @thgreasi, I did not make any changes to the localforage package, so I do not target the 'src' files but the 'dist' ones.\nIf you ask if I have the .babelrc file then yes, I do have one, but it has only this code inside:\n{\n  \"stage\": 1\n}\n. @thgrasi It appears that I did use the 'src' on a custom driver (this is how it worked with 1.2.9).\nI made the following change there and it works:\n\nThank you for your hints and direction.\nP.S. May I assume that there will be a different way for the custom driver to get the seralizer when the serializer will be independently exposed? (you had a related thread I remember)\n. @thgreasi I have the same problem, exactly due to a similar line:\nreturn System[\"import\"](\"./../../node_modules/localforage/src/utils/serializer\").then(function(lib) {\n                    dbInfo.serializer = lib;\n                    return Promise.resolve();\n                });\nI am not sure how should I change this line so that it does not cause problems to the compilation.\nThanks for any ideas!. Thank you for your efforts on this matter.\nIndeed, the problem was that we should skip the non-localForage items from\nthe iterationNumber count.\nAlso, I have noticed the same as Thodoris about the order of items that the\niterate brings, it seems to be the opposite order (it does not affect the\niterationNumber count though), so the test is OK. \nFor my use case, having the correct count of IterationNumber is all I need, the order of items does not matter, so I would appreciate if you could add it to a 1.2.9 version and upload it to NPM. \nThanks!\n. ",
    "master-lincoln": "I can confirm this.\n. ",
    "vlkv": "Is there any workaround for this?\n. Well, we've created a fix this way:\n```\nvar localForageDriver = [localforage.INDEXEDDB, localforage.LOCALSTORAGE, localforage.WEBSQL];\nvar localForageBackupDriver = [localforage.LOCALSTORAGE, localforage.WEBSQL, localforage.INDEXEDDB];\nwindow.localForageReady = $.Deferred();\nvar configureLocalForage = function (localForageDriver) {\n    var localForageOpts = {\n        driver: localForageDriver,\n    };\n    localforage.config(localForageOpts);\n    window.localForageReady.resolve();\n};\ntry {\n    var idbConn = window.indexedDB.open(\"checkIndexedDB\");\n    idbConn.onerror = function (ex) {\n        // We know for sure, that FF in private browsing mode restrict use of indexedDB. And indexedDB.open fails with InvalidStateError\n        console.error(\"IndexedDB is NOT available\");\n        configureLocalForage(localForageBackupDriver);\n    };\n    idbConn.onsuccess = function (ex) {\n        console.info(\"IndexedDB is available\");\n        configureLocalForage(localForageDriver);\n    };\n} catch (ex) {\n    console.error(\"IndexedDB is NOT available, \" + ex);\n    configureLocalForage(localForageBackupDriver);\n}\n//... and then\nwindow.localForageReady.then(function () { / use localForage / });\n```\n. ",
    "glade-at-gigwell": "Is this pull request getting any movement?  We found several copies of this line in localforage.js that need the modification in order to run under karma.\n. ",
    "havok2905": "That formatting bug in question has already been fixed with the following commit. I imagine performing a rebase from master would clean that up. If not a rebase, dropping the comments under the function declaration satisfies the linter.\nhttps://github.com/mozilla/localForage/commit/5e0df09bce8f0316369c05a867b0d5d7b836fb8f\n. ",
    "AshleyScirra": "Oh right, I got this backwards, the promises version comes with a polyfill and the no-promises version skips the polyfill. Still, maybe it would be nice to have a version that doesn't need promises at all (not even a polyfill) and rely on callbacks only?\n. Storing in memory has the advantage of avoiding any serializing to strings, and I can't remember but I thought Chrome Web Store apps dropped localStorage APIs in favour of IndexedDB/their own API. So I think a MemoryStorage driver would be useful to have as a workaround to Firefox's trigger-happy exceptions.\n. No, it doesn't work: localforage throws an unhandled exception testing for IndexedDB support, which leaves localforage undefined, so you can't get as far as a defineDriver call.\nThe problem is Firefox throws SecurityError: The operation is insecure. on this line, which only tests for IndexedDB's presence:\njs\nvar indexedDB = indexedDB || self.indexedDB || self.webkitIndexedDB || self.mozIndexedDB || self.OIndexedDB || self.msIndexedDB;\nThis is only referenced inside a try-catch statement further down, so it can be moved inside the try and it will detect it cannot use IndexedDB.\nIn this case all drivers fail to initialise and localforage is left with no driver. If I add the session storage driver, it incorrectly detects it can be used. Localforage will use it, but it too throws SecurityError upon any attempt to call sessionStorage.setItem/getItem!\nSo the only way to not have localforage completely broken in this case is to use an in-memory driver as a final fallback. Then despite Firefox's incredible awkwardness in this mode, data can be stored at least for the duration the page is open, maximising the chance the page can actually continue to function normally.\n. I don't feel like I know this codebase well enough to implement a MemoryStorage driver, and moving the IndexedDB line only makes Firefox's failure case different, not better (loads with no driver rather than throwing exception). So could you make both changes?\n. I mentioned this PR here: https://news.ycombinator.com/item?id=13422108\nI am also very much in favour of in-memory fallback as a core feature. It's super annoying how Firefox throws exceptions if you touch storage in private mode. It tends to break pages. AFAIK Chrome Incognito allows storage to work but just keeps it in RAM and throws it away on the next navigation away, so this feature is simply replicating what a major browser does and making it consistent across more finicky browsers.. Incidentally just filed issue #647 which I think proves the point that this ought to be built-in.. Any news on this?. I'd test it, but I can't see a convenient way to effectively download a release with a PR merged. I don't use GitHub much. Do I have to manually copy-paste the PR in to master?. I tested localforage.nopromises.js from PR #643, and it looks like blobs are stored correctly again.. Checking the driver, or waiting for a promise to resolve, doesn't actually tell you if storage was really permanently saved. In Chrome Incognito mode, all IndexedDB calls will succeed, even though it's effectively using memory storage. Even in normal browsing mode, there's no guarantee the browser won't suddenly decide to do a cleanup and trim its disk space usage, and delete all your site's saved content. (Or the user could do it.)\nThe only way to be sure that storage will persist is to call navigator.storage.persist(), which is not yet widely supported but is the only way to reliably find out the answer to the question \"will my storage actually be kept?\"\nAlso given the minified + compressed size of localforage is about 8kb, I'm not sure why anybody is worried about the size of the library. You could double it and nobody would notice. The kind of architecture it uses is another matter, but I don't think that should be the sole reason for not providing memory fallback.. Tested PR #648 in Construct 2 in Firefox stable and nightly with the \"never remember history\" setting. It no longer throws the uncatchable error. Looks like it's sorted.. Note AFAIK the standard JSON format for Map is an array of pairs - the kind of thing you pass to its constructor. E.g. [[\"foo\", 0], [\"bar\", 1], [\"baz\", 2]]. Actually since most of those names are also standard DOM API names, the only names needed to protect from minification appear to be just \"dropInstance\", \"iterate\" and \"_initStorage\".. Here's a theory: when the DB times out and would throw InvalidStateError, if you then create two transactions simultaneously, maybe both fail and it races _tryReconnect. It doesn't look like there's any kind of provision to only do it once even if multiple transactions are made while it's reconnecting.. Did this get addressed by 1.7.3? It looks like there were updates to _tryReconnect, but it still calls _deferReadiness without waiting for it.. ",
    "fjmorel": "Can it be made clearer that .nopromises uses Promises but doesn't include the polyfill? It took me a while to realize as well.\n. All 3 drivers support Promises and the docs don't say otherwise.\n. ",
    "Triplecorpse": "Which version has promise-free api?. ",
    "zerotacg": "how about a \"nopolyfill\" version? that way the intention is clear and developers decide which polyfills to include, the requirements might need to be documented though\n. require() is polyfilled? looks like only promises are, require is handled by browserify, isn't it?\n. ",
    "mohitmayank": "+second that. Just wasted an hour trying to debug this. added minified no promises version to the build script. \n. ",
    "eric-brechemier": "I fell into that trap too. Our web application was not working on iPhone 4. It was due to the lack of the Promise API, expected by localforage.nopromises.js.\nWe are not using the external Promise API of localForage, and we wished to use a trimmed down version of the library because our use case is very simple and the library is disproportionately large compared to our usage (it is actually larger than all the rest of our code).\n. ",
    "arxpoetica": "I just wasted an hour trying to figure this out. +1 to clarifying the name.. ",
    "lewiscowper": "Ah okay, I just noticed that the bug had been marked as resolved,\neverything seemed in order.\nIs there a bug for the failing tests?\nOn 17 Apr 2015 17:18, \"Matthew Riley MacPherson\" notifications@github.com\nwrote:\n\nAdditionally, these tests fail from Chrome for IndexedDB and WebSQL.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/mozilla/localForage/pull/371#issuecomment-94019516.\n. \n",
    "zcsongor": "Any news? I guess if somebody would implement the first workaround, it would affect the websql driver as well (because of the storeName array).\n. ",
    "fbender": "localStorage methods throw in private browsing mode in Safari. Can we leverage that?\n. Or better yet make it something with \"volatile memory\" so it is absolutely clear this is not persistent!\n. ",
    "lordgreg": "This is exact same problem we are having when building Electron app. I've read about it in my 2nd comment here: https://discuss.atom.io/t/electron-build-not-finding-js-functions-pack/20549/2\nIs this going to be fixed/solved any time soon?\n. I will report the status as soon as I test it. Until then, thank you! :+1: \n. I've installed latest localforage from master branch like this:\nbower install localforage#master.\nBefore that, the errors I've recieved were:\nUncaught Error: Cannot find module 'promise' (module.js:338) and\nUncaught Error: Cannot find module 'localforage' (module.js:338)\nAfter updating localforage from master, only one error appears:\nUncaught Error: Cannot find module 'localforage' (module.js:338)\n...but the promise error is gone.\n. <script src=\"bower_components/localforage/dist/localforage.js\"></script> which has this header:\n/*!\n    localForage -- Offline Storage, Improved\n    Version 1.2.10\n    https://mozilla.github.io/localForage\n    (c) 2013-2015 Mozilla, Apache License 2.0\n*/\nShould I take any other?\n. As told by OP, this is Electron packager (http://electron.atom.io/), and as their Github page states (https://github.com/atom/electron) It is based on io.js and Chromium\n. Hi. Here are my results for the past day:\n1. As you've suggested, I've updated localforage from master branch (since version 1.2.10 didn't worked) and the promise not found was gone. The promise problem was also causing out app not to work at all.\n2. Then we still had to figure out, where does the localforage not found problem comes. The problem is, there was no error form localforage.js but direct from module.js. We found out, that when we were using angular-localForage. Even after updating localforage.js (to 1.2.4, 1.2.10 or master), we've always received above error.\nWe've completely removed angular-localForage from project and updated localforage.js to latest commit (b91dfa532b2a62ff344188e165b4878b0efe7574). Now, we are using:\nreturn $q.when($window.localforage.setItem('xyz', this.xyz)\nand\nreturn $q.when($window.localforage.getItem('xyz')\ninstead of angular promises. we're using $q and localforage directly. Now, everything works. \n:+1: \nThank you Mozilla devs :)\n. ",
    "YurySolovyov": "@tofumatt it is not about node.js support, the problem will occur even without using any node-specific things. Even simpliest examples are not working. Electron does not use node for anything like db backend or something.\nIt is just about how you detect require.js, problem is that require in localforage collides with require in Electron, that's it.\n. ",
    "xlozinguez": "You are right @thgreasi it works for me too :sob: I guess it's my app setup then...\n. @thgreasi did you try to run your example with the Chrome Developer Tool open? Amazing stuff happens then! Any idea why it does this?\n. @thgreasi check my screencast http://screencast.com/t/NYtCFs9d3T\n. Thanks for that response @williamle8300 , finally it makes sense! I realize recently how much the chrome dev tool actually do to emulate the iPhone interaction. Your answer is awesome, thank you.\nXavier mobile version\n\nOn Nov 3, 2015, at 2:54 AM, williamle8300 notifications@github.com wrote:\nThe problem is actually quite sneaky.\nTLDR; Apple's UIWebView doesn't support indexedDB.\nWhat's happening is that Chrome spoofs the iOS user-agent when you emulate an iPhone. Well, this spoofing is actually really effective because localForage will now emit an error if you configure it to exclusively use indexedDB.\nIf you want to have a moment of profound ennui and see indexedDB in action... just turn off Chrome dev tool's emulation so that you're actually using Chrome's own user-agent. It should work then.\nYou can read more info here: #254. TLDR;x2 indexedDB for iOS is not ready.\n\u2014\nReply to this email directly or view it on GitHub.\n. \n",
    "JeffreyJamesAttenti": "I'm using localForage in a cordova app and when I debug it with chrome & dev tools open (in device mode), with an iOS device selected, I get this error.\nI have localForage configured to use a SQLite driver first and then fall back on IndexedDB. Then I tried adding WebSQL and localStorage; still had the same result. The dev tools will change the user agent string value when you switch between different devices to emulate and I'm assuming that's how this decision is being made.\n. ",
    "wle8300": "The problem is actually quite sneaky.\nTLDR; Apple's UIWebView doesn't support indexedDB.\nWhat's happening is that Chrome spoofs the iOS user-agent when you emulate an iPhone. Well, this spoofing is actually really effective because localForage will now emit an error if you configure it to exclusively use indexedDB.\nIf you want to have a moment of profound ennui and see indexedDB in action... just turn off Chrome dev tool's emulation so that you're actually using Chrome's own user-agent. It should work then.\nYou can read more info here: https://github.com/mozilla/localForage/issues/254. TLDR;x2 indexedDB for iOS is not ready.\n. ",
    "gsaqui": "Hi Matt,\nThanks for the offer - I was just being lazy and was hoping not have to\nrewrite the current blocking code.\nThanks for the quick response.\nCheers,\nGlenn\nOn Thu, May 21, 2015 at 12:04 AM, Matthew Riley MacPherson \nnotifications@github.com wrote:\n\nSorry but no; the APIs we use on the back ends are non-blocking so we have\nto rely on callbacks and promises.\nWriting with promises gives you a code path that looks very similar to\nblocking calls. If you wanted to send a code sample I could suggest how to\nintegrate them in.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/mozilla/localForage/issues/379#issuecomment-104161413\n.\n. \n",
    "RaulTsc": "Any news about this? :). @tofumatt any news about this? :). ",
    "EnzoHeroguel": "I've directly downloaded the master version from Github this morning so I guess I'm up to date :) . I'm using Chrome Version 43.0.2357.81, normally the latest version.\nHere's the function that I call.\n``` javascript\nvar PREFIX_WORKOUT = 'wk_',\n    workoutList = null ;\ninit: function () {\n                $localForage.keys().then(function(keys) {\n                    var wkkeys = _.filter(keys,function(k){ return k.indexOf(PREFIX_WORKOUT) === 0});\n                    $localForage.getItem(wkkeys).then(function(w) {\n                        workoutList = w;\n                    }, function(err){console.log(err);});\n                });\n            }\n```\nSo the getItem() has wkkeys as argument which is an array of keys.\nI use also the localForage for angular, available here https://github.com/ocombe/angular-localForage/\nThanks for your time and your help\n. Actually, I think that it matches with this issue : https://github.com/mozilla/localForage/issues/63\nThe issue comes from here\njavascript\nif (value.substring(0,\n            SERIALIZED_MARKER_LENGTH) !== SERIALIZED_MARKER) {\n            return JSON.parse(value);\n        }\nvalue is equal to \"o.moreau@trackmyfit.com\" and it doesn't succeed to pass through the parse function, so that I got that Syntax Error\n. ",
    "erikhazzard": "Woot, thanks for the fast response!\n. ",
    "chrisledet": "\nGood catch! image is probably better than img though... any chance you could change both to the more verbose version?\n\nNo problem! This project is great by the way. Thanks!\n. Updated. Let me know if you need anything else.\n. ",
    "remkoboschker": "replacing .call(window) by .call(this) loads the lib just fine, but this probably introduces other issues. I'll fork and run some tests later today. Thanks.\n. :smile: sure, will use it.\n. In the service worker your fix raises\nUncaught (in promise) TypeError: self._initStorage is not a function at http://localhost:8080/js/lib/localforage.js:265:48\n.call(typeof window !== 'undefined' ? window : this) does not raise this exception\nAlso a unit test fails\n1) Config API Driver API \"before each\" hook:\n     ReferenceError: Can't find variable: localforage\n      at http://localhost:9999/test/test.drivers.js:11\n      at http://localhost:9999/bower_components/mocha/mocha.js:4315\n      at next (http://localhost:9999/bower_components/mocha/mocha.js:4626)\n      at http://localhost:9999/bower_components/mocha/mocha.js:4630\n      at timeslice (http://localhost:9999/bower_components/mocha/mocha.js:5761)\nI'll work on a fix\n. Hi, \nI mistakenly took the src instead of the build with the drivers in the file. Sorry for that. \nI noticed that window has a property self that returns itself. Perhaps just replacing this with self will do. I'll add a unit test for service-workers tomorrow.\n. @thgreasi I do not mind the extra precaution. Can you confirm that the test are passing in your localforage#webworkers-fix? I tried to copy the webworkers test to a serviceworker scenario but the tests are not passing. When I include only the test.webworker.js in the test.component.html not a single test is run.\n. @thgreasi I have a basic unit test\nserviceworker-client.js:\n```\nimportScripts(\"/dist/localforage.js\");\nself.oninstall = function(event) {\n   event.waitUntil(\n       localforage\n       .setItem('serviceworker', 'serviceworker present')\n       .then(function(value) {\n           console.log(value);\n       })\n   );\n};\n```\ntest.serviceworker.js:\ndescribe('serviceworkers', function() {\n    it('should set a value', function(done) {\n       navigator\n       .serviceWorker\n       .register('/test/serviceworker-client.js')\n       .then(function() {\n           return localforage.getItem('serviceworker');\n       })\n       .then(function(result) {\n           expect(result).to.equal('serviceworker present');\n           done();\n       })\n       .catch(function(error) {\n           done(error);\n       });\n   });\n});\nIt runs in a browser, but not in Phantomjs; don't know why\n. I have pushed the branch to https://github.com/curit/localForage. In test/test.serviceworker.js en in test/serviceworker-client.js an earlier attempt to send messages is commented out. I found this example to be quite useful https://jakearchibald.github.io/isserviceworkerready/demos/postMessage/\nGood luck!\n. @thgreasi sorry about the diff I was trying to get the unit test to run at all. I'm working on it. By the way how do I get at the pull request in git or should I fork your repo?\n. Turns out the component-build was not being executed. So now I can run the tests and have submitted a pull request to your repo. I will now try to get the tests to pass. \nI found this useful to fetch the pull request https://help.github.com/articles/checking-out-pull-requests-locally/\n. https://github.com/thgreasi/localForage/pull/1 now has both tests passing when run in Chrome 44 \n. and in firefox nightly with the dom.serviceworker enabled\n. It does not look like phantomjs supports serviceworkers. I have asked some questions https://github.com/jakearchibald/isserviceworkerready/issues/43 and https://github.com/ariya/phantomjs/issues/13437\n. @thgreasi Thank you. I'm away on holiday the coming weeks. So good luck with the pull request!\n. Running component build -o test -n localforage.component manually solves the issues. \nHowever there is a new one\n1) localForage API has Promises available:\n    Error: failed to require \"promise\"\n     at require (http://localhost:9999/test/localforage.component.js:11)\n     at http://localhost:9999/test/test.api.js:18\n     at callFn (http://localhost:9999/bower_components/mocha/mocha.js:4338)\n     at http://localhost:9999/bower_components/mocha/mocha.js:4331\n     at http://localhost:9999/bower_components/mocha/mocha.js:4728\n     at http://localhost:9999/bower_components/mocha/mocha.js:4819\n     at next (http://localhost:9999/bower_components/mocha/mocha.js:4653)\n     at http://localhost:9999/bower_components/mocha/mocha.js:4663\n     at next (http://localhost:9999/bower_components/mocha/mocha.js:4601)\n     at http://localhost:9999/bower_components/mocha/mocha.js:4630\n     at timeslice (http://localhost:9999/bower_components/mocha/mocha.js:5761)\n. Running node .\\node_modules\\component\\bin\\component-build --dev -o test -n localforage.component manually takes care of the last one. Perhaps the grunt:shell:component command does not execute correctly on windows? \n. Hi, I updated to modernizr 3 to check for service worker availability. This caused another test to fail. We have used another test to check for it without updating modernizr. https://github.com/mozilla/localForage/pull/406\n. ",
    "lilred": "It'd be nice if support for web workers was documented :)\n. ",
    "fatfisz": "This surprised me too, shouldn't iterate and keys be consistent in which keys do they ignore?\n. ",
    "HendrikThePendric": "Sorry, my bug report is over a month old now and the project I was working on is actually finished. However, I did just try to replicate the steps I took back then with version 1.2.10 (as opposed to 1.2.4). This time all seems to work fine.\nSo, I don't know if something was wrong with the hosted code, or I was causing an issue on my end. In any case there is no issue anymore now. I will close it.\n. ",
    "Turbo87": "I have the same issue at https://github.com/Turbo87/open-flight-planner\nI worked fine with localforage v1.2.4, but breaks with v1.2.6.\n. @tofumatt I am not explicitly loading anything, I am just installing the package via npm and using browserify + babel to compile my script that imports from localforage. (see repo mentioned above)\n. @tofumatt no worries, thanks for the quick fix!\n. ",
    "rejas": "Since ampersand-sync-localforage uses \n    \"localforage\": \"^1.0.0\",\nwill it also try to get v1.3 then and break again?\n. Sounds like a good idea since other users of ampersand-sync-localforage might be surprised too :-) \n. Maybe I could try to fix it myself and open a pull request to the original ampersand-sync-localforage, but who knows when it will get merged :-)\n. thx, will take a look at it tomorrow morning\n. Not sure, maybe I am doing somehting wrong, but I get when using your branch:\n[11:03:17] Browserify Error { [ReferenceError: Unknown plugin \"system-import-transformer\" while parsing file: /Users/mveeck/Projekte/.../node_modules/ampersand-sync-localforage/node_modules/localforage/src/localforage.js]\n. Installed it, and it worked fine. :thumbsup:  Thanks for the work, hope it gets merged.\n. ",
    "lucretiu": "Hey @tofumatt , thanks for your quick reply!\nI made a fiddle that explains what I'm trying to achieve: https://jsfiddle.net/wL01bxvu/3/\nThe thing is that I need to store an object of type File, not the contents of the file specifically. I'm doing this because I just need a pointer for that file, so I can read it at a later time (with checking for existence and all that jazz, of course). \nPutting a blob of the file in the database and afterwards reading it could work for me, but I don't want the mobile browser to ask the user for a quota increase if the user chooses 50 files using the image picker. If I store only the File object, the database size stays low and the user doesn't get prompted.\nPlease let me know if the fiddle is clear enough. Or if I'm doing any obvious rookie mistakes :)\nThank you!\n. ",
    "thejourneydude": "It was an error on my part. It\u2019s fixed now. Sorry for the trouble.\n\nOn Aug 10, 2015, at 1:22 PM, Matthew Riley MacPherson notifications@github.com wrote:\nHi there! What is the reason you closed the issue? If there's a problem with the docs that led to this bug, please let me know!\n- tofumatt\nOn Mon, Aug 10, 2015 at 6:06 PM, Jason Tanner notifications@github.com\nwrote:\n\nClosed #416.\nReply to this email directly or view it on GitHub:\nhttps://github.com/mozilla/localForage/issues/416#event-378220368\n\u2014\nReply to this email directly or view it on GitHub https://github.com/mozilla/localForage/issues/416#issuecomment-129534822.\n. \n\n",
    "chriswininger": "I was seeing this error as well, real frustrating. Turns out when you install via bower, the actual built library that you want to reference on your page is inside of the dist folder. Felt pretty silly when I realized, but thought I would share in case anyone else is running into this.\n. ",
    "jondkoon": "Any chance we can get this patch published to npm?\n. @tofumatt @thgreasi Thanks! Works great. \nCan't wait for a proper webpack compatible build. I think the 2 biggest problems right now are that you can end up with Promises in the bundle twice and you can't debug modules imported with the script loader.\n. @thgreasi awesome!\n. Would love to see this merged and published. Just ran into this issue when trying to upgrade from 1.2.10 to 1.3.1 and making use of the webpack compatibility.\n. ",
    "STRML": "A big +1 for webpack from me as well. We use it on all our production code and it has been a dream to work with. :+1: to #432\n. ",
    "remy": "Sod, the commit should have been docs: not fix:. Sorry!\n. ",
    "herrmannplatz": "431\n. too fast... cool thanks\n. ",
    "Billskate": "@thgreasi ,sorry! It's a misoperation\n. ",
    "dpren": "Oh woops! I added a copy of the JS file back. You should be good to go.\n. Okay this is just for the docs now.\nJS file PR is here https://github.com/mozilla/localForage/pull/438\n. ",
    "magsout": "\nWhat version of localForage do you use? Do you use npm or bower to install?\n\nnpm -  \"version\": \"1.2.10\",\n. @thgreasi my bad, just need ton install npm install script-loader and it works.\nThanks\n. @stephenrs  try ton install npm install script-loaderand add\nvar localforage = require(\"script!localforage\") in your js file, seems to work fine\n. Yes thanks \n. ",
    "billschaller": "Note: This is pretty clearly an IE bug, not a bug in localforage. Nevertheless, it would be good to incorporate a workaround.\n. Edge is also affected. Given that IE10 doesn't pass IndexedDB tests either, I'd assume it is affected as well.\n. I actually use localforage as a client-side cache for certain data - to generate the keys, I hash the request data (sometimes rather large) and store the hash as a cache key for the returned data. In debug mode, I don't hash the request data. I instead use the entire stringified request data as the key so it's easier to inspect the cache. \nYou can see how that would trigger the bug :wink:\nI (quickly) looked through the spec a bit and couldn't find any mention of a maximum key size.\n. I am not sure if the bug is in localforage or IE, but I did look through the driver, and nothing I can see would be truncating the keys like that. I did not have time to grok and attempt direct use of indexeddb, as it was Friday and the 3-day-weekend beer was calling my name.\n. ",
    "solderjs": "I'm having the same issue with this snippet:\nhtml\n<!DOCTYPE html>\n<html>\n  <head>\n    <title>LocalForage Test</title>\n    <meta http-equiv=\"Content-Security-Policy\" content=\"default-src 'self'; connect-src 'self' http://conf.utahjs.com/; font-src 'self' https://fonts.googleapis.com/css/ https://fonts.gstatic.com/s/raleway/; style-src 'self' https://fonts.googleapis.com/css; child-src 'none'; object-src 'none'; img-src 'self' https://avatars.githubusercontent.com/ https://avatars.io/email/ https://avatars.io/twitter/ https://www.gravatar.com/avatar/\">\n    <link rel=\"stylesheet\" href=\"bower_components/bootswatch-dist/css/bootstrap.css\" />\n  </head>\n  <body>\n    <script src=\"bower_components/localforage/dist/localforage.js\"></script>\n    <script src=\"lf-test.js\"></script>\n  </body>\n</html>\n``` js\n(function () {\n  'use strict';\nvar store = window.localforage.createInstance({\n    name: \"conf\"\n  });\nstore.getItem('schedule').then(function (sched) {\nif (sched) {\n  console.log(sched);\n} else {\n  console.log('sucks');\n}\n\n});\nstore.setItem('schedule', {});\n}());\n```\n\n. I don't understand the security implications of adding a blanket catchall blob: to connect-src 'self' blob: https://example.com/, so I would be very hesitant to say that doing so \"fixes\" the problem.\n. The code I showed you is the lf-test.js\n. ",
    "rocco": "I had a similar issue with an ionic app on android that uses localForage. I had to set this:\n<meta http-equiv=\"Content-Security-Policy\" content=\"connect-src 'self' file: data: blob: filesystem:; default-src *; style-src 'self' 'unsafe-inline'; script-src 'self' 'unsafe-inline' 'unsafe-eval'\"/>\nAs connect-src does not use wildcard for blob: you need to set everything explicitly for it.\n. ",
    "stephenlautier": "After some debugging the only way I seem to access it is by doing:\nlocalforage.default.config(...\nIs that the correct way?\nNOTE: I'm asking mainly to improve the TypeScript Definitions :)\n. Not entirely sure which one it was using exactly, its the default which jspm points to.\nAfter some digging I noticed this seems to be happening due to systemjs and the way I was importing.\nI was using this:\nimport * as localforage from \"localforage\";\nWhich causes proto's to be attached with localforage.default.\nInstead by using default as when importing (as below) I believe it works correctly - I haven't tried it with localforage yet but with momentjs I had the same issue, and using the default as seemed to be to proper way.\nimport {default as localforage} from \"localforage\"\nCheers\n. That might work in es6 imports but I don't think it would work in TypeScript :).\nAFAIK these are valid imports for TypeScript using the new imports syntax introduced in 1.5:\nImport all\nimport * as localforage from \"localforage\";\nImport using default\nimport {default as localforage} from \"localforage\"\nImport single\nthis one syntax wise works, however @ runtime its not\nimport {localforage} from \"localforage\"\nThanks for the help though :+1: \n. Sure, my PR for the definitions is still pending (https://github.com/borisyankov/DefinitelyTyped/pull/5805) after that one is merged it can be used as following:\nImport using default\nI believe this is the best approach, however sometimes in VS it was causing intellisense to not work properly. (not sure if its a ReSharper issue)\nimport {default as localforage} from \"localforage\"\nImport all\nThis is the other approach which also works (and currently this is what I'm personally using due to the issue I stated above)\nimport * as _localforage from \"localforage\";\nvar localforage = _localforage.default;\n. @dsebastien this should be the best way of doing this\n```\nimport lf from \"localforage\";\nlf.getItem(\"gen:core:auth\")\n    .then(x => {\n        console.log(\"YORDLE?!\", x);\n    });\n```\nYou can name lf as whatever you want.\nNote: I don't use Webstorm, I'm using Visual Studio Code and Visual Studio but I believe it works the same on webstorm.\nHope it helps!\n. I used to get that issue but not anymore. \nI'm compiling it to es5 and system (not commonjs) and it works, using typescript 1.7.5.\nsrc\n```\nimport lf from \"localforage\";\nlf.setItem(\"test:value\", \"it works!\");\n```\ncompiled\nlocalforage_1.default.setItem(\"test:value\", \"it works!\");\nruntime\n\n. ",
    "dsebastien": "Does anyone know the current way of importing localforage w/ TypeScript?\nI've tried the various suggestions above to no avail...\n. Actually, the documented way works with a caveat:\n```\nimport {default as localforage} from \"localforage\";\nlocalforage.clear();\nlocalforage.setItem(\"mykey\", \"myvalue\", console.log);\n```\nwith the import as described above, WebStorm/IntelliJ seem unable to provide autocompletion. It might be that they don't support the 'default as' syntax.. I'll file an issue over there as it's only an issue within the IDE.\n. Just for reference, here's the link to the issue I've created over at Jetbrains: https://youtrack.jetbrains.com/issue/WEB-19765\n. @stephenlautier I've just tried this but it doesn't work with my configuration. TSC does not complain but generates the following:\n...\nvar localforage_1 = require(\"localforage\");\n...\nlocalforage_1.default.setItem(\"key\", \"cool\");\nAnd that fails at runtime because 'default' is undefined.\nI'm using TS 1.7.3 and SystemJS to load the modules. I'm guessing this might either be due to the way SystemJS loads the modules or the way TS does its transpilation (I've configured it to transpile to ES5 commonjs modules...).\nI've created a PR to change the typings file even though Jetbrains will include a fix in their next release. I don't think that the 'default' keyword brings anything useful anyways (it's the only export).\n. Good to know, thanks.\nI'll test my modifications with the system module format to make sure that it also works there. \nI know that I had to switch from system to commonjs at some point in my project due to bugs that weren't resolved yet at the time\n. What do you mean by \"modern way\"?\nCurrently, I'm using JSPM & SystemJS, thus I would assume that I use a modern way :smile: \nHere's the output of my tests:\n1) Without 'default' in the typings as I proposed:\ndeclare module \"localforage\" {\n    export var localForage: LocalForage;\n}\nand the following import:\nimport {localForage} from \"localforage\";\ntsc outputs:\nvar localforage_1 = require(\"localforage\");\n2) With 'default' in the typings:\ndeclare module \"localforage\" {\n    var localForage: LocalForage;\n    export default localForage;\n}\nand the following import:\nimport {default as localForage} from \"localforage\";\ntsc outputs:\nvar localforage_1 = require(\"localforage\");\nThus I don't think 'default' in the d.ts file makes any difference apart for the way we can write the import (?)\n. Script what? :D\nYep I'm sure you're right regarding localForage's js code, it certainly needs to have default in the exports.\nOkay, I'll open a PR on DefinitelyTyped to propose the typings change and another one against this repository to update the readme.\n. Actually I overlooked something..\nIn the generated code, the require statement is as I've described above, but the usages of the associated variables are:\n1) Without 'default' in the typings as I proposed: localforage_1.localforage.setItem(\"key\", \"cool\");\n2) With 'default' in the typings: localforage_1.default.setItem(\"key\", \"cool\");\nBut my proposition remains relevant if I import as follows (the PR in this project needs to be adapted though): const localForage = require(\"localforage\");\nWhen I use require directly in the TS code, the generated code looks as it should: localForage.setItem(\"key\", \"cool\");\nI think this matches the explanations I found there:\n- http://stackoverflow.com/questions/29596714/new-es6-syntax-for-importing-commonjs-amd-modules-i-e-import-foo-require\n- http://www.jbrantly.com/es6-modules-with-typescript-and-webpack/ (CommonJS library - ES5 section):\n  TypeScript does not provide the same compatibility layer when importing CommonJS modules using ES6 syntax. In practice this means that you cannot use the \"default import\" syntax to import the module.\nI'll update my PR\n. All done :)\n. I feels safer to me, although I'm no TypeScript guru either ;-))\n. let and const have been supported in TypeScript since version 1.5 and can be transpiled down to ES3 & ES5, thus logically this should not have any negative effects.\nAFAIK, using let and const is the way to go; var should never be used anymore and here, the choice between let and const depends on whether you want something mutable or not; for an import I'd say that const is probably a safer recommendation.\nIf you want maybe I can add this explanation to the readme?\n. Looks good indeed :)\n. ",
    "gronke": "Looks merged now. Can this be unblocked?\n. ",
    "PJudson001": "Code:\nlocalforage.setItem('1', 'United States', function(err, value) {\n    alert(value);\n    localforage.getItem('1', function(err,value) {\n        alert('we just read ' + value);\n    });\n});\n. ",
    "alexstanbury": "Well this is strange, it has suddenly started working without me changing anything.\nFor what it's worth, I'm using 1.2.4, not using private browsing mode and cookies are set to block from third parties.\nIt's my friend's device I am testing with, I opened Safari and opened a new tab (it wasn't in private mode as the browser colouring was light grey instead of dark) and browsed to my site and got the error. I got it every time upon refresh. I went to download Chrome to see if it was the same issue but before it completed I went back to safari and it worked...\nI can now recreate it, if I open up private mode, select 'keep all' tabs and load the site, I get the aforementioned error as expected, the interesting thing is if I switch private mode off and again select 'keep all' tabs then the error persists even though I'm not in private mode any more. Even closing the tab and opening a new one does not resolve the error. I have to manually close Safari and reopen the page to get it work.\nI guess this is an iOS bug then, not sure what happened originally but I presume something funky with private mode interfering...I will update if I can provide any more info.\nCheers\n. ",
    "wudong": "No issue.\nI opened the chrome in development mode apparently the different device I\nchoose there will affect which storage backed localforage use.\nMatthew Riley MacPherson notifications@github.com\u4e8e2015\u5e7410\u67084\u65e5\u5468\u65e5 13:32\u5199\u9053\uff1a\n\nSorry, could you clarify your issue?\nAre you saying sometimes Chrome is using websql by default instead of\nindexeddb?\nAre you using private browsing mode?\n- tofumatt (Sent from mobile)\nOn 3 Oct 2015, 23:26 +0100, Wudong Liunotifications@github.com, wrote:\n\nWhy localForage sometime use WebQL, sometime use Chrome\n\u2014\nReply to this email directly orview it on GitHub(\nhttps://github.com/mozilla/localForage/issues/458).\n\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/mozilla/localForage/issues/458#issuecomment-145345969\n.\n. \n",
    "jagandecapri": "Hi @tofumatt , I am using    v1.2.10. I downloaded using bower. bower install localforage\nI have not tried the master version yet.\n. @tofumatt , yes it works. Please push a new version ASAP. Really need it. ;) \nCheers. Thanks again @tofumatt .\n. @thgreasi :100: Nice to hear that \n. Thanks @tofumatt . It is working. :+1: \n. ",
    "NathanWalker": "Chrome iOS: 45.0.2454.89\nlocalForage: 1.2.10\nHmm ok that's helpful to know thank you. Do you know  what the WebSQL storage limit is on Chrome for iOS?\n. Well under 5Mb. ~ 900Kb... so weird. I'll keep investigating and close this until further notice. Thanks again.\n. ",
    "TCMiranda": "Hey, yes, I checked that 'localforage' is resolved to dist/localforage.js\nThanks!\n. No, sorry! I meant that I've checked it before... \nI cant tell if webpack is messing up with the polyfill included on the dist file with the one that I defined, or it is having problems defining it inside the code.\nI'll try to debug it a little more...\n. To use the src/localforage.js I would have to allow it to use babel, and also all the files which it includes, so I think that I should instead figure out some way of validating this issue and help you wrap the loader\nI'll be updating this!\n. So, I dont think that the Promise polyfill can be used the way it is defined, could you confirm that to me?\nhttps://github.com/mozilla/localForage/blob/master/dist/localforage.js#L690\nThey are in different scopes and different packaging machanisms. \nNot that it would resolve my problem, but I think you should remove the \"concat\" part of the build (to create the promise polyfill) and require it manually at src/localforage.js.\nThis way, webpack would automatically include the copy on the dist/localforage.js.\nIn this case, the Promise variable that I am able to use is the one I defined, which is misconfigured.\nUnfortunately, even defining the Promise variable manually, the code breaks and gives me \"No available storage method found.(\u2026)\" when I try to use it. \n. Hi @thgreasi \nI Managed to solve my problem when requiring localforage via script-loader after defined Promise globally, not by ProvidePlugin.\nThanks for the help!\n. Anyone else experiencing this issue?\nThanks!\n. Hi @tofumatt,\nThe problem at start up appears to be solved, but the rest stopped working for me, getItem and setItem not resolving.\nI read some of the tests used and tried to solve my problem setting the driver and waiting for ready callback, but nothing happened.. The problem is that I am not getting any errors or warnings..\nNobody is experiencing this issue?\nThanks for your support!\n. Yes, they are never resolving... Chome 48 with IndexedDB and Webpack, using the createInstance api, the exactly same code I posted on this issue.\n. Only to close this subject... 1.3.3 release fixed the issue for me! \nThanks for the support!\n. ",
    "samkelleher": "I see that webpack is used to bundle localforage itself, but then if you consume the localforage dist into another project that is also being bundled with webpack, then webpack throws a wobbly because it can't resolve self.\nFor example, in a project where localforage is installed via npm, import it your file, then bundle this. Webpack will go off and load the dist output.\nimport localforage from 'localforage';\n. This is the exact error thrown by webpack when bundling it in with myproject that has a file with the import as mentioned above.\nI'll look at the test (just grabbing \ud83c\udf5clunch) and figure out why the test passes but this fails.\nCheers\n```\n/myproject/node_modules/localforage/dist/localforage.js:1161\n        typeof window !== 'undefined' ? window : self\n                                                 ^\nReferenceError: self is not defined\n    at Object.exports.esModule (/myproject/node_modules/localforage/dist/localforage.js:1161:50)\n    at __webpack_require (/myproject/node_modules/localforage/dist/localforage.js:719:30)\n    at exports.__esModule (/myproject/node_modules/localforage/dist/localforage.js:739:18)\n    at /myproject/node_modules/localforage/dist/localforage.js:742:10\n    at webpackUniversalModuleDefinition (/myproject/node_modules/localforage/dist/localforage.js:692:20)\n    at Object. (/myproject/node_modules/localforage/dist/localforage.js:699:3)\n``\n. Once I had applied just this one change, webpack operation resumed, and localforage continued to operate normally in the browser. I guess that when webpack evaluates the script, it has neither window or self. So confident to say this change alone should be okay.\n. The instances ofselfwithin the closure are just reflections ofthis. When the closure is executed withwindoworself, they are set asthis` depending if the code is being executed inside a webworker or not.\nThe only reason I can think of as to why it doesn't work for us but still passes the test is that the version of webpack or babel (newer than in localforage) is now (rightly so I think) sensitive to self being undefined without checking first.\nThe repack entry point used in the test uses a require() call vs an module import which is what we're using, so maybe it has something to do with that.\n. @thgreasi PR rebased. \ud83d\udc7b\n. ",
    "mgcrea": "I'm encountering the same error using import localforage from 'localforage'; + babel6. Did you find some solution?\n. File is compiled (sucessfully) by babel:\nimport extend from 'lodash/object/extend';\nimport clone from 'lodash/lang/clone';\nimport localforage from 'localforage';\nconst log = console.log.bind(console);\nlog(localforage);\nexport default class FooBar {\n}\n- Into\n```\n'use strict';\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar _extend = require('lodash/object/extend');\nvar _extend2 = _interopRequireDefault(_extend);\nvar _clone = require('lodash/lang/clone');\nvar _clone2 = _interopRequireDefault(_clone);\nvar _localforage = require('localforage');\nvar _localforage2 = _interopRequireDefault(_localforage);\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nvar log = console.log.bind(console);\nvar FooBar = function FooBar() {\n  _classCallCheck(this, FooBar);\n};\nexports.default = FooBar;\n``\n- With.babelrc`\n{\n  \"presets\": [\"es2015\", \"stage-0\"]\n}\n- But in my mocha unit tests:\n```\nimport chai from 'chai';\nconst expect = chai.expect;\nimport FooBar from './../foobar.js';\ndescribe('FooBar', () => {\n  describe('#constructor()', () => {\n    it('should properly merge options', () => {\n      const analytics = new FooBar({foo: 'bar'});\n      // assert.equal(analytics.opts, {foo: 'bar'});\n      expect(analytics.opts).to.be.a('object');\n      expect(analytics.opts.foo).to.eql('bar');\n    });\n  });\n});\n```\nIt fails right away with:\nReferenceError: self is not defined\n    at Object.exports.__esModule (/Users/olivier/Projects/web-analytics/node_modules/localforage/dist/localforage.js:1157:51)\n    at __webpack_require__ (/Users/olivier/Projects/web-analytics/node_modules/localforage/dist/localforage.js:719:30)\n    at exports.__esModule (/Users/olivier/Projects/web-analytics/node_modules/localforage/dist/localforage.js:739:18)\n    at /Users/olivier/Projects/web-analytics/node_modules/localforage/dist/localforage.js:742:10\n    at webpackUniversalModuleDefinition (/Users/olivier/Projects/web-analytics/node_modules/localforage/dist/localforage.js:692:20)\n    at Object.<anonymous> (/Users/olivier/Projects/web-analytics/node_modules/localforage/dist/localforage.js:699:3)\n    at Module._compile (module.js:435:26)\n    at Object.Module._extensions..js (module.js:442:10)\n    at Module.load (module.js:356:32)\n    at Function.Module._load (module.js:311:12)\n    at Module.require (module.js:366:17)\n    at require (module.js:385:17)\n    at Object.<anonymous> (/Users/olivier/Projects/web-analytics/dist/analytics.js:19:20)\n    at Module._compile (module.js:435:26)\n    at Object.Module._extensions..js (module.js:442:10)\n    at Module.load (module.js:356:32)\n    at Function.Module._load (module.js:311:12)\n    at Module.require (module.js:366:17)\n    at require (module.js:385:17)\n    at Object.<anonymous> (/Users/olivier/Projects/web-analytics/dist/test/analytics.spec.js:7:18)\n    at Module._compile (module.js:435:26)\n    at Object.Module._extensions..js (module.js:442:10)\n    at Module.load (module.js:356:32)\n    at Function.Module._load (module.js:311:12)\n    at Module.require (module.js:366:17)\n    at require (module.js:385:17)\n    at /Users/olivier/Projects/web-analytics/node_modules/mocha/lib/mocha.js:216:27\n    at Array.forEach (native)\n    at Mocha.loadFiles (/Users/olivier/Projects/web-analytics/node_modules/mocha/lib/mocha.js:213:14)\n    at Mocha.run (/Users/olivier/Projects/web-analytics/node_modules/mocha/lib/mocha.js:453:10)\n    at loadAndRun (/Users/olivier/Projects/web-analytics/node_modules/mocha/bin/_mocha:349:22)\n    at rerun (/Users/olivier/Projects/web-analytics/node_modules/mocha/bin/_mocha:376:5)\n    at /Users/olivier/Projects/web-analytics/node_modules/mocha/bin/_mocha:384:7\n    at StatWatcher.<anonymous> (/Users/olivier/Projects/web-analytics/node_modules/mocha/lib/utils.js:173:9)\n    at emitTwo (events.js:87:13)\n    at StatWatcher.emit (events.js:172:7)\n    at StatWatcher._handle.onchange (fs.js:1295:10)\nCan fix it by adding var self = {}; on top of dist/localforage.js.\n. Juste merged the changed and rebuild. I do confirm that #470 does fix it.\n. :+1: Needed! Thanks!\n. ",
    "montogeek": "@thgreasi Hi!\nI am getting this same error with:\n\"localforage\": \"1.4.0\"\n\"babel-cli\": \"^6.6.5\",\n\"babel-core\": \"^6.7.0\"\n\"mocha\": \"^2.4.5\"\nThe command is ./node_modules/.bin/mocha --recursive --compilers js:babel-core/register\nMy .babelrc is:\n{\n  \"presets\": [\"es2015\"],\n  \"plugins\": [\"transform-flow-strip-types\", \"transform-object-rest-spread\", \"transform-class-properties\"]\n}\nStacktrace:\n```\n/Users/montogeek/project/node_modules/localforage/dist/localforage.js:1162\n  })(typeof window !== 'undefined' ? window : self);\n                                              ^\nReferenceError: self is not defined\n    at Object.exports.esModule (/Users/montogeek/project/node_modules/localforage/dist/localforage.js:1162:46)\n    at __webpack_require (/Users/montogeek/project/node_modules/localforage/dist/localforage.js:719:30)\n    at exports.__esModule (/Users/montogeek/project/node_modules/localforage/dist/localforage.js:739:18)\n    at /Users/montogeek/project/node_modules/localforage/dist/localforage.js:742:10\n    at webpackUniversalModuleDefinition (/Users/montogeek/project/node_modules/localforage/dist/localforage.js:692:20)\n    at Object. (/Users/montogeek/project/node_modules/localforage/dist/localforage.js:699:3)\n    at Module._compile (module.js:398:26)\n    at Module._extensions..js (module.js:405:10)\n    at Object.require.extensions.(anonymous function) [as .js] (/Users/montogeek/project/node_modules/babel-register/lib/node.js:134:7)\n    at Module.load (module.js:344:32)\n    at Function.Module._load (module.js:301:12)\n    at Module.require (module.js:354:17)\n    at require (internal/module.js:12:17)\n    at Object. (auth.js:3:1)\n    at Module._compile (module.js:398:26)\n    at loader (/Users/montogeek/project/node_modules/babel-register/lib/node.js:126:5)\n    at Object.require.extensions.(anonymous function) [as .js] (/Users/montogeek/project/node_modules/babel-register/lib/node.js:136:7)\n    at Module.load (module.js:344:32)\n    at Function.Module._load (module.js:301:12)\n    at Module.require (module.js:354:17)\n    at require (internal/module.js:12:17)\n    at Object. (index.js:4:1)\n    at Module._compile (module.js:398:26)\n    at loader (/Users/montogeek/project/node_modules/babel-register/lib/node.js:126:5)\n    at Object.require.extensions.(anonymous function) [as .js] (/Users/montogeek/project/node_modules/babel-register/lib/node.js:136:7)\n    at Module.load (module.js:344:32)\n    at Function.Module._load (module.js:301:12)\n    at Module.require (module.js:354:17)\n    at require (internal/module.js:12:17)\n    at Object. (currencies.js:2:1)\n    at Module._compile (module.js:398:26)\n    at loader (/Users/montogeek/project/node_modules/babel-register/lib/node.js:126:5)\n    at Object.require.extensions.(anonymous function) [as .js] (/Users/montogeek/project/node_modules/babel-register/lib/node.js:136:7)\n    at Module.load (module.js:344:32)\n    at Function.Module._load (module.js:301:12)\n    at Module.require (module.js:354:17)\n    at require (internal/module.js:12:17)\n    at Object. (index.js:2:1)\n    at Module._compile (module.js:398:26)\n    at loader (/Users/montogeek/project/node_modules/babel-register/lib/node.js:126:5)\n    at Object.require.extensions.(anonymous function) [as .js] (/Users/montogeek/project/node_modules/babel-register/lib/node.js:136:7)\n    at Module.load (module.js:344:32)\n    at Function.Module._load (module.js:301:12)\n    at Module.require (module.js:354:17)\n    at require (internal/module.js:12:17)\n    at Object. (index.js:5:1)\n    at Module._compile (module.js:398:26)\n    at loader (/Users/montogeek/project/node_modules/babel-register/lib/node.js:126:5)\n    at Object.require.extensions.(anonymous function) [as .js] (/Users/montogeek/project/node_modules/babel-register/lib/node.js:136:7)\n    at Module.load (module.js:344:32)\n    at Function.Module._load (module.js:301:12)\n    at Module.require (module.js:354:17)\n    at require (internal/module.js:12:17)\n    at /Users/montogeek/project/node_modules/mocha/lib/mocha.js:219:27\n    at Array.forEach (native)\n    at Mocha.loadFiles (/Users/montogeek/project/node_modules/mocha/lib/mocha.js:216:14)\n    at Mocha.run (/Users/montogeek/project/node_modules/mocha/lib/mocha.js:468:10)\n    at Object. (/Users/montogeek/project/node_modules/mocha/bin/_mocha:403:18)\n    at Module._compile (module.js:398:26)\n    at Object.Module._extensions..js (module.js:405:10)\n    at Module.load (module.js:344:32)\n    at Function.Module._load (module.js:301:12)\n    at Function.Module.runMain (module.js:430:10)\n    at startup (node.js:141:18)\n    at node.js:980:3\n```\nWhen running:\nbabel src --out-dir dist it compiles without problem\n. ",
    "okcoker": ":+1: \n. Submitted #531 in hope that this was the last step in getting this merged!\n. ",
    "developit": "@siddo420 The nicest solution for this would be for someone (I might take a stab at it) to implement an indexing solution on top of localForage.  It could really just be an in-memory map of the keys you have in localForage, perhaps with \"indexed\" properties being stored as well.  Traversing that object in memory would be much more efficient than searching with data persisted to disk.\n. ",
    "bausmeier": "These errors are coming from Sentry so I can't really tell, but I have seen the same error from several users so I think private browsing is unlikely. \n. Any chance another error could be being caught here https://github.com/mozilla/localForage/blob/master/src/localforage.js#L374?\n. I'm using browserify and not doing any special initialisation. All usage of local forage is done in a single file. The first few lines look like this:\n``` js\nvar LocalForage = require('localforage');\nLocalForage.setDriver(LocalForage.LOCALSTORAGE);\nexports.addItem = function(id, item) {\n  return LocalForage.setItem(id, item);\n};\nexports.getItem = function(id) {\n  return LocalForage.getItem(id);\n};\n```\nShould I be doing explicit configuration?\nI haven't been able to test with Safari, but have tested with a variety of other browsers both on desktop and on mobile, and I haven't come across any issues.\n. Thanks for the help. I will just catch the error and show a warning that it won't work in private browsing mode.\n. ",
    "spirinvladimir": "I'v added 3 tests.\n. It is not bug fix it is some performance refactoring. I try to avoid not needed checks. Sorry for PR without description. I've add it now. You can find attached issue at top of this PR.\n. ",
    "willnwhite": "Not sure but I'll check this out next time I use localForage.\n. ",
    "owencm": "If it's interesting, I was specifically wondering between using this vs objectDB, which weighs in around 5KB when minified, and figured localForage is probably better in a number of ways, but it might not be worth the additional weight.\n. ",
    "theaverageguy": "I would like some help to solve this.\n. ",
    "ReadmeCritic": ":smile: \n. ",
    "daviddeutsch": "I cannot confirm that this is an issue with private browsing - it seems to work just fine for me.\nCould we at least have localForage fail gracefully as a short term solution?\n. @thgreasi Thank you so much for getting back on this!\n. I can confirm this issue. (#487 is a previous discussion and the current solution is being proposed in #488)\n. This was the remaining issue for me for using localforage in a cookies-disabled environment.\nModernizr had (and resolved) a similar issue: Modernizr/Modernizr/pull/1831\nWrapping the ifs into a try/catch block solved the issue for me:\njavascript\n    try {\n        if (typeof indexedDB !== 'undefined') {\n            return indexedDB;\n        }\n    } catch (e) {}\n. Thanks so much, @thgreasi and @tofumatt !\n. Oh my, how embarrassing. You are of course right, @thgreasi - it works perfectly fine like that.\nMy issue was actually that I created additional instances via createInstance() later in the code and just assumed it would take the same additional drivers as previously initialized.\nSorry, should have done more due diligence - thanks so much for pointing me on the right path!\n. ",
    "coicoronado": "Hi Tofumatt and thanks for the respond\ni was checking the issues that you have reported in the git repo about the\nwebpack thing, and after some attempt i concider another approach, which at\nthis momment is working correctly, so i think that i might stick to the\nother approach mainly because the data is stored and reachable even when i\nclose the app completly, because when i reopen the app and try to get the\nvalues stored in the localforage and even the length function always return\na null\nIf i have to return to use this lib i might contact you again\nThanks anyway\n2015-12-18 5:03 GMT-06:00 tofumatt \u2615\ufe0f notifications@github.com:\n\nlocalForage should work in iOS Cordova apps, so there is either a bug in\nlocalforage or a mistake elsewhere.\nWould you be able to share the code that's acting up? Which version of iOS\nand localforage are you using?\n- tofumatt\n\nOn 18 Dec 2015, at 00:21, coicoronado notifications@github.com wrote:\nHi\nThis isn't a bug but more like a question, after i played around with\nthis library and try to implement it as a functionality to let a user\nautologin i need to set and store some information and then ask to the\nbackend if this is ok and continue were the user left, but it seems that if\ni just remove the app from the background all the information is lost\nSo my question is, every time i remove my app from the background i lose\nthe data that was saved? or i'm just doing something wrong\n\u2014\nReply to this email directly or view it on GitHub.\n\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/mozilla/localForage/issues/490#issuecomment-165749234\n.\n\n\n\"...los hombres fuertes se cuidan a si mismos; pero, los mas fuertes cuidan\na los demas...\"\n. Hey @judenaveenraj after some debug of this library the problem was that one of mu scripts was removing the data after i logout so as @tofumatt said it is working correctly.\nJus for the record the lib i was using is called localStorage but you can rely on the localforage library and the data stored will be there even if you dismissed the app from the background\n. @thgreasi yes you can mark it as resolved. ",
    "judenaveenraj": "Hi @coicoronado. If you don't mind, can you let us what alternative approach you took to avoid loss of information by localforage?\n. I'm getting this issue too with the following error:\nWarning: .then() only accepts functions but was passed: [object Undefined], [object Undefined]\n    at LocalForage._fullyReady as ready\nat the line :\npromise.then(callback , callback );\nCurrently working using the nop workaround.\n. ",
    "gvolkan": "hi, i've been used localForage for almost one year. but its happen one time and its not working until  clearing local db. \nwe are using 1.4.0 version.\n\n. ",
    "dagatsoin": "I modified the definition in https://github.com/dagatsoin/DefinitelyTyped/commit/024be6ae5426f1b463dc9d5675a86a0098a6ed0b#diff-e5ecc6c06f9fea487c7707db8d1ee5ae\nTry this. I had the same problem as you with TS and Meteor.\n. I did \nimport * as LocalForage from 'localforage'\nLocalForage.setDriver([LocalForage.INDEXEDDB, LocalForage.WEBSQL, LocalForage.LOCALSTORAGE]);\n. Hi @thgreasi, so for using localforage + sqli driver which branch of localforage and sqli driver do I need to use?\n(I get strange behavior and a lot of typescript errors in webstorm. So I would like to try to bump the version). ",
    "c0debreaker": "Cool. I'll try that code and let you know :)\n. It worked though there were other codes that had similar issues. I applied the same fix and the errors went away though there are other warnings/errors that are still appearing in the console. I'm not sure if it's caused by LocalForage or not. I'll keep you posted.\n. thank you, I'll check it out\n. I'm so sorry, I forgot about this. I'm not sure if I got it to work, maybe. I'll close this ticket. Thank you.. ",
    "jameslk": "I'm running into this issue too\nI would think this call:\nhttps://github.com/mozilla/localForage/blob/9df0cdfb3d418278256854f208048908309f3011/src/localforage.js#L164\nWould cause a problem with this line:\nhttps://github.com/mozilla/localForage/blob/9df0cdfb3d418278256854f208048908309f3011/src/localforage.js#L388\nBasically an undefined variable is being passed into then(). Am I missing something?\n. ",
    "bodaniel": "To see the error in action you could follow the instructions on these pages. Note: Use Firefox and disable third party cookies. Have a look at the web developer console.\nhttps://blooming-beach-5133.herokuapp.com/\nhttps://blooming-beach-5133.herokuapp.com/hacked\n. https://github.com/mozilla/localForage/issues/511 seems to resolve this issue. Nice!\n. ",
    "Sembiance": "Just wanted to note that Google's JS closure-compiler removes the try/catch statement around this block as part of the SIMPLE_OPTIMIZATIONS compiliation_level. This thus then causes FF to throw a security exception if cookies are disabled.\nI don't expect this to be something that localForage fixes, but I wanted to mention it here because I spent 2 hours trying to hunt down this issue and so if another dev ends up here through a Google search, hopefully this comment will save them some time :)\nBy the way, the simple solution for me was to change:\nif (typeof indexedDB !== 'undefined') {\nto\nif (typeof window.indexedDB !== 'undefined') {\nThen the closure-compilier will keep the try/catch statement.. ",
    "shinnlu": "thanks, it's solve my problem, it's executed as sequence i want.\n. ",
    "viruseg": "But it turns a big problem.\nFirefox: 101 iteration\nChrome & Edje: 2 iteration\n``` javascript\nvar a = [];\na[2] = '2';\na[100] = '100'\nconsole.log(a);\nlocalforage.setItem('arr', a, function(result) {});\nlocalforage.getItem('arr', function(err, value) {\n    var i = -1;\n    value.forEach(function(item, i, arr) {\n        console.log(++i);\n    });\n});\n```\n. Remove the zero values of the array is not a problem. But then lost the original numbering of the items.\n. By the way in the indexDB of Chrome values in the array are stored too with zero values.\n\n. ",
    "ShirtlessKirk": "The issue is how sparse arrays are handled when they are stored / retrieved. JSON.stringify on a sparse array fills all the empty slots with null. Arguably, if there is a null value declared at an index point then that is what it contains (so Firefox is correct), not an index that should be ignored. Thus, if you run JSON.parse on a stringified sparse array it returns a non-sparse array with all the index points filled.\nA StackOverflow style answer would be \"don't use sparse arrays\", but what should happen is that where Array.isArray(value) is true it should not use JSON.stringify to convert it for storage but iterate through the valid indices using .forEach to build up an object setting the key to the valid index. However, there is then the awkwardness of assuming that an object that contains only purely numeric keys is actually an array in disguise...\n. ",
    "Teddy34": "Unfortunately, Qt's user agent will probably not contain \"Qt\" as it's replaced by application name  and version (see https://wiki.qt.io/How_to_set_user_agent_in_Qt_application.) Crappy...\nI'll check if it's common practice to still add \"Qt\" in the version\n. Another solution would be to be able to force a driver. This could allow shim usage. What do you think?\n. There's no way to get a reference to localForage original drivers from a custom driver, is it?\n. ",
    "rromanw": "\n\nthe handler functions don't get called at all\n\nThe are success callbacks and are invoked only when no error has occurred.\n\nThey have error parameter and should be called even if there is a problem I  think.\n\n\nthose errors cannot be caught and silenced\n\nWhat do you mean with this? In your description you mention that they both log in the console.\n\nYea, they log in console even if one tries to catch them in .catch statement. So the user sees the errors in console, even if they are handled well, which is not optimal.\nUsing localforage.ready() could work, but defeat of lazy initialization of localforage. which is quite a drawback.\n. ",
    "notreadbyhumans": "1.3.3\n. ",
    "dineshganti": "Hi tofumatt,\nHere are the steps you can use to reproduce..\na) Take an iPhone (iOS 9, 9.1  does not matter). The space left on the device must be about 100-200MB \nb) Store something in localForage from any sample app.\nc) Start shooting some video and after a while the iPhone gives a low memory alert...\nd) Stop shooting the video. Kill the sample app.  Lock the phone and leave it for about 12 hours..\ne) Unlock the phone after 12 hours and open the sample app. You will see that the localForage data has been completely wiped out..\n. Hi tofumatt. I agree to a certain extent. However, what can we do to avoid this?  Can you guide us?\nOther native iPhone apps are not getting affected. Its only localForage data that's getting wiped out..\nIs there any way for you guys to instruct iOS that this is important data that developers rely on and hence it shouldnt get deleted? \nRight now, if the data is getting wiped in cleanup, it means that iOS is treating this data as temporary storage or browser cache data etc, which is not important and can be removed..\nPerhaps, you could test this at your end and also raise a ticket with Apple ?  LocalForage's stability and reliability will depend on this right?\n. Thanks thgreasi.\nWe are trying out the same. Will let you know if it works..\n. ",
    "bwalsh": "@dineshganti I believe I am running into a similar problem.  How did you resolve the issue?\nThanks for your time.\n. ",
    "swapkids": "@dineshganti Did the cordova/sqllite driver solve it for you?\n. ",
    "Bing573": "@guopengliang WEBSQL experienced the same issue. ",
    "jmalonzo": "Restarted Chrome and it started working again. Not sure why. I'll reopen once I've investigated properly.\n. @ezzatron in the interim you can tell webpack to exclude parsing the localforage module via the noParse config - \nnoParse: [new RegExp(path.resolve(__dirname, '/node_modules/localforage/dist/localforage.js'))]\nHTH.\n. ",
    "robcalcroft": "Yep just ran JSON.stringify(snapshots) successfully. Length of the string was ~36K, is that too big for IndexedDB?\n. Well running _.isEqual(JSON.parse(JSON.stringify(snapshots)), snapshots); returns true. Chrome 48\n. Update: It fails the first time but then subsequent times it works with no issues :fearful: \n. That's gonna be tricky without stringifying the state which as you said might remove the problematic bit :confused: . The state is loads of API data and some custom React state stuff\n. The React state stuff is just raw data though and works fine because I'm already storing that data separately using forage.\n. ",
    "paulfalgout": "Re: the rollup plugin vs rollup vs webpack vs browserify etc.. this might help a little: https://github.com/samccone/The-cost-of-transpiling-es2015-in-2016  Arguably the tests cases is a bit simple, but I still find the results insightful.\n. ",
    "rdalfonso": "@tofumatt - Thanks for the response. I want the browser to try and use localStorage first followed by my custom driver then localforage.WEBSQL, etc. It seems as though localforage never registers my custom driver as a supported fallback option. Or it doesn't fallback to my custom driver when the user is in Private Mode.\n@thgreasi - You are correct. Attempting a setItem on localforage and explicitly setting my custom driver when there was an error during the callback is what worked. Is it not possible to simply define a custom driver and then add it to the \"driver\" array property of my localforage options? It doesn't seem to be the case.\n. @thgreasi - I'm using version 1.4 \nIs .ready() required for .setDriver to work with custom drivers? \nSo far including my custom driver in the driver preference array has been failing.\nI can however use .setDriver(customerDriver) without .ready() and it works. \n. @thgreasi - I think I understand the difference now:\n1. So .driver will return from the array listing the \"best supported driver\" for the browser based on the browser's supported capabilities. \n2. .driver DOES NOT determine the driver based upon any potential failures due to private browser mode. So in my case, having a .driver array of [localforage.LOCALSTORAGE, 'customDriver', etc]  will always use LOCALSTORAGE- or the best supported - as my driver and it will NEVER fallback to 'customDriver' just because I have it in the listing. \n3. Determining whether a driver can be used requires attempting an operation. So again, if i need to make my customer driver the driver used by localForage when in Private mode, I do need to attempt a setItem against the supported driver (LOCALSTORAGE, WebSQL) determined by the library, and only when there's a failure should I setDriver to my ultimate fallback (my custom driver).\nIs this logic correct?\n. \"Also: Using .ready() is just the recommended way to make localforage settle on a working driver in case that you need to use .driver().\"\n1. so I can use .ready() to determine the \"working driver\" in place of a setItem attempt?\n. Is there an example of using .setDriver with .ready() on the API documentation?\nhttp://mozilla.github.io/localForage/ \n. @thgreasi - Yes. I was able to implement my custom driver successfully after understanding how the localForge driver works in practice. It wasn't intuitive from the API. So having a complete example of using .defineDrive, .config, and .setDriver with .ready() would be helpful for implementation. Thanks for your response!\n. @thgreasi -  the localforage type definition file on https://github.com/DefinitelyTyped/DefinitelyTyped/ may need to be updated to include .ready() method. I'm using TypeScript and .ready was not intellisensed as an available method until I added it manually to my local .d.ts file. \n. ",
    "plaxdan": "I notice that ready() is missing from the docs despite being present on the prototype. Is ready() intended to be part of the public API?\n. ",
    "GeorgeCrecoukias": "Sounds good, \nI'm using pseudo-worker and it seems to be working fine.\n. ",
    "mrmurphy": "According to https://nolanlawson.github.io/html5workertest/ Safari 10 on both mobile and desktop support IndexedDb in Web Workers. Should that fix this issue?. ",
    "trodrigues": "I totally forgot to check that. Will try it out.\n. So after some testing it does seem to be an issue with Chrome in particular. I'll try to look for similar issues and put together a more standalone test case for this.\n. ",
    "KoenLav": "trodrigues is there any progress on this bug from Chrome?\n. ",
    "pastelsky": "In effect it should be similar to how React JS allows one to import add-ons through a UMD export, or how lodash exports each of its utlilities. Also, it would be great if ES6 style imports were supported too. A lot of people have been wishing for  a plug and play system in localforage.\n. @nolanlawson I believe you're only comparing gzipped size differences, that too with all storage options enabled (if i'm right that is). \nIt may be a 3-4KB decrement, but then when one has a production app with large catalog of libraries, every KB counts. Javascript engines on mobile devices (where using localforage for offline caching makes a lot more sense) are relatively slow, and its also about how much extra JS you are parsing vs. how much benefit you get out of it.\nMoreover, the current localforage configuration already allows you to pick your storage options, so I don't see a problem in including code for only those storage drivers that you want to use. \n. @thgreasi  With \"plug and play\" I was referring to the \"drop in the drivers you need\" approach.\nA little bit like how redux-replicate allows one to store  application state using multiple drivers like redux-replicate-localforage and redux-replicate-fs etc.\n. In my opinion this library can be broken down to:\n1. localforage : The minimal API wrapper that binds everything together.\n2. localforage-driver-localstorage: Add support for localStorage.\n3. localforage-driver-websql: Add support for websql.\n4. localforage-serializer: Useful for storing binary data for websql & localStorage (only).\n5. localforage-driver-indexeddb: Add support for indexeddb.\nThe following can be pruned:\n1. NodeJs style callbacks: Now with even node moving towards harmony, callbacks are going to be a thing of the past.\n2. Promise dependency:   Many modern projects already add their own polyfill for Promise, and this would just lead to more bloat. Plus it gives freedom to developers to chose their a  standards compliant Promise implementation (es6-promise/Promise or other)\n. @tofumatt  Agreed, it can still ship with a easy-to-use dist version that bakes all options into one (like ReactJS ships with a \"react-with-addons.js\"). \nBut I'd be happy to contribute if there are any plans of modularizing this thing into multiple npm packages for power users.\n. @nolanlawson \nThe indexedDBshim library is in itself twice the size of localForage with all adapters.\nA good number of projects already use Webpack  / Rollup. (ReactJS/AngularJS community for eg.) While the current implementation of webpack doesn't support tree shaking,  one would still be able to directly reference adapters like say, import WebSQLDriver from localforage/drivers/localstorage and pick up only the relevant parts (similar to how one can pick up individual functions from lodash without including the whole library). \nMoreover, the repo will require very minimal changes to accomplish this.\nSo while localForage with all adapters can continue to be the default export, hence not discouraging any user who wants a drop-in replacement, power users can play around with what they need.\n. ",
    "lukepighetti": "Just wanted to comment that comparing to React for what is an acceptable file size is not always appropriate, since some teams select Preact (3kB) when targeting emerging economies with progressive web apps.. I have definitely found that the ability to import specific modules at a lower level is very useful. For example, I can import (Typescript)\nimport { BehaviorSubject } from \"rxjs\"; or \nimport { BehaviorSubject } from \"rxjs/internal/BehaviorSubject\";\nI have to admit I have never tested the difference on package size, but assuming it can be reduced with this type of method I think its fine.\nBut I am only one opinion and I'm pretty new to web tech so, take it with a grain of salt.. ",
    "sebb3": "I am not using webpack, concatenation is being done with gulp. \n. Sorry for misreading you. \nI am using the latest version (1.4.0), and I just took the already generated localforage.js from the dist folder.\n. Thank you!\n\n5 apr 2016 kl. 22:45 skrev Thodoris Greasidis notifications@github.com:\nI will try to reproduce and create a test case during the weekend.\n\n\nThodoris Greasidis\nComputer, Networking &\nCommunications Engineer\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly or view it on GitHub https://github.com/mozilla/localForage/issues/547#issuecomment-205979983\n. \n\n",
    "skyrpex": "\nIn any case, I don't think localStorage/IndexedDB is the right solution for session management.\n\nExactly... sadly, your best bet is to rely on backend storage.\n. ",
    "newbie78": "hi to all\nsee this https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy\n\"Changing origin\" part for the subdomain limitations. ",
    "EpocDotFr": "Yup, this is odd. Note that I tested with and without hardware acceleration enabled: same issue.\nThanks for the information!\n. Tested just now (on https://localforage.github.io/localForage/), seems the issue is gone.. ",
    "yairEO": "I confirm. \nAlso the font is way too small for my poor eyes. X2 enlargement will do it well.\n. ",
    "rubenstolk": "@tofumatt I just made this in 30 minutes because I was in a hurry for one of our clients. Leaving for holiday now for a week. If you feel like including it the way you want, I'm open for it, otherwise I'd love to update the PR later with tests et cetera, but basically just wanted to pass the idea with you first, hence the early-stage PR :)\n. Perhaps we could include it but have an explicit \"fallback_to_memory\" option so the developer can decide... Yep, I'll be back on it!\n. I guess I would agree with having this as a separate module... Shall we close this PR in favor of @thgreasi's solution?\n. So, unfortunately as rightfully indicated by @thgreasi in https://github.com/localForage-extensions/localForage-memoryStorageDriver/issues/2#issuecomment-219037643, the original problem of this PR can't be solved with a custom driver.\nHow about including the memoryDriver in localForage but as an optional spec which distributes into localstorage.with-memory-storage.js?\n. At least in Safari (which is mostly affected by WebSQL), the error callback only happens AFTER the user accepts/rejects.\n. That issue is for very old Safari versions... What I've seen is that things\nwork fine af least in recent Safari's and a retry would be nice...\nOn Sat, 11 Jun 2016 at 21:24, Nolan Lawson notifications@github.com wrote:\n\nI believe iOS has bugs with retrying\nhttps://pouchdb.com/errors.html#not_enough_space. In my experience, the\nbest policy is to just structure your app so that the popup never\noccurs (which is annoying, I know).\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/mozilla/localForage/issues/572#issuecomment-225388811,\nor mute the thread\nhttps://github.com/notifications/unsubscribe/AAqRpGUmSUZtYEwlBcIyxzEGnvth2mybks5qKwuAgaJpZM4IoRHO\n.\n. @thgreasi LGTM!. \n",
    "bsr203": "just exploring to switch from https://github.com/google/lovefield to this. I too like to have memory driver mainly for running my tests in jsdom which doesn't support offline storage mechanisms. Will explore @thgreasi 's sol. thanks.\n. I will close this, as it may still not be able to fully utilize all the features if one is intended to use indexeddb. I will look for indexeddb specific wrappers. Also, having an index means other plugins like memoryStorageDriver need to adapt as well. Reopen or comment if you like to proceed. thanks.\n. ",
    "jonstorer": "@tofumatt first off, sorry for the down vote, github is getting pretty social.\nWhat I mean to say was that a console error won't really suffice. What about an even to bind to? Something that would allow to dev to bind a message to the user?\nSomething like \"we noticed you're in private browsing mode. That's cool, but things will be slower and nothing will be saved when you refresh\". \nPoint being, the dev can decide how to prompt the user... instead of just knowing it's happening.\n. I'm new to the discussion, so take my input with a grain of salt.\nI think that a memory strategy include within the core of the library is the correct solution. The point of this library is to ensure that some variable of local storage is available regardless of browser or version. \nI also think that including some strategy to bind to this error to allow the dev to handle the interaction with the use gracefully solves most of the concerns above.\n@tofumatt to your points about \"not really saving data\". You're correct. However, an assumption I'm making is that the library's goal is to make browser storage work regardless of anything. \n. ",
    "gabrielmaldi": "\nSo, unfortunately as rightfully indicated by @thgreasi in localForage/localForage-memoryStorageDriver#2 (comment), the original problem of this PR can't be solved with a custom driver.\nHow about including the memoryDriver in localForage but as an optional spec which distributes into localstorage.with-memory-storage.js?\n\nThis would be solved by #692.. Thanks for your answer. I opened #692 to work on this.. I think it's guaranteed that the constructor will run immediately:\nFrom MDN (emphasis mine):\n\nnew Promise( /* executor */ function(resolve, reject) { ... } );\nexecutor\nA function that is passed with the arguments resolve and reject. The executor function is executed immediately by the Promise implementation, passing resolve and reject functions (the executor is called before the Promise constructor even returns the created object). The resolve and reject functions, when called, resolve or reject the promise, respectively. The executor normally initiates some asynchronous work, and then, once that completes, either calls the resolve function to resolve the promise or else rejects it if an error occurred.\nIf an error is thrown in the executor function, the promise is rejected. The return value of the executor is ignored.\n\nFrom promisejs.org (emphasis also mine):\n\nWe use new Promise to construct the promise. We give the constructor a factory function which does the actual work. This function is called immediately with two arguments. The first argument fulfills the promise and the second argument rejects the promise. Once the operation has completed, we call the appropriate function.\n\nHowever, if you still feel it's safer to move the code outside the constructor, I'll make the change.. Thanks for the tests, I had taken a look and was planning on doing something very similar to what you did. \ud83d\udc4d. I don't know why this line is changing. Should this be part of the commit?. Yeah, that's it. I separated the code into two commits \ud83d\udc4d. ",
    "Itrulia": "Nah its because sometimes I want the client to wait to avoid flashes in the UI for example, I definitely prefer promises\n. ",
    "andreujuanc": "@nolanlawson needed this :(. ",
    "Aides359": "I am still experiencing this issue in IE11 :|\n. ",
    "HarryHH": "i will add that to noParse then, thanks\n. ",
    "zuraruby": "try to use this:\nhttps://gist.github.com/zuraruby/1ccfe7b35d196138d70f61acd63b8e56. ",
    "konsumer": "Came across this randomly troubleshooting my own issue, and thought I would share these notes:\nIt works with ES6 & async/await, too, if you prefer a more sync-like look:\n```js\nimport localforage from 'localforage'\nconst testOffline = async () => {\n  await localforage.setItem('tester', 'YOUR TOKEN HERE')\n  console.log('BEFORE:', await localforage.getItem('tester'))\n  await localforage.removeItem('tester')\n  console.log('AFTER:', await localforage.getItem('tester'))\n}\n// async function returns a promise\ntestOffline()\n  .then(() => {\n    console.log('DONE TESTING')\n  })\n```\nJust have to remember to wrap your function with async and use await whenever you do something asynchronous.\n. ",
    "mlanin": "@tofumatt I know that it is ok, but such warnings are making mess in logs and console. Is there any chance to avoid it?\n. @petyappetrov Thanks, that worked!\n. ",
    "petyappetrov": "@mlanin just add ignore\nmodule: {\n        noParse: /node_modules\\/localforage\\/dist\\/localforage.js/,\n        loaders: [...],\n. ",
    "lagun4ik": "@petyappetrov Thanks!\nIf you use windows:\n/[\\/\\\\]node_modules[\\/\\\\]localforage[\\/\\\\]dist[\\/\\\\]localforage\\.js$/\n. ",
    "andersonmcook": "@petyappetrov Thanks!\nI have 1.5.0 installed and had to change the regex to: \n/node_modules\\/localForage\\/dist\\/localforage.js/\nor better yet:\n/node_modules\\/localforage\\/dist\\/localforage.js/i. ",
    "exos": "Ok, then is a deep-dependencies problem on angular-localForage, I actually did installed that package, and aparently the last published version are old.\nChecking the history of package.json: https://github.com/ocombe/angular-localForage/commits/master/package.json\nThe version 1.2.5 don't has the patch that resolve it.\nThe solution then It would be as simple as install first localForage and then install angular-localForage, like:\n$ npm uninstall localForage angular-localForage\n$ npm install --save-dev localForage\n$ npm install --save-dev angular-localForage\nOr directly do install angular-localForage#master\nThank you.\nPS: Sorry my poor english :P\n. ",
    "amilajack": "Not sure why this is happening. It install on my machine perfectly. \n. @tofumatt also what do you think about migrating to eslint?\n. @nolanlawson good idea! I've been using npm-check-updates all this time:\nbash\nncu -au\nnpm update\n. @tofumatt also what do you think about migrating a few grunt tasks to npm scripts? This can get rid of a lot of boilerplate and remove dependencies.\n. Sure thing. I'll close PR\n. Support should not be directly added for a specific library. Instead, you should use a library that wraps around localForage.\n. ",
    "pmgower": "@dirtybit have you been able to reproduce this issue?  I might have a similar issue going on.  Reported mine here. ",
    "stkao05": "We also observed this issue daily, about 200 incidences a day and mostly from Chrome browser (98%). \n\nWhile there is certainly an issue with Chrome indexedDB, I think there is a room for the indexedDB client (localforage) to better handle connection closed issue - such as re-establish IDBDatabase connection when connection is unexpectedly close. The onclose listener could be used for such an purpose.\nCurrently localforage does not handled broken connection and there isn't an localforage API for app to reestablish connection themselves. So apps that encounter this issues basically run into a dead-end. . Hi @thgreasi \nCurrently there is localForage.clean() method which remove all records of DB, but it would be nice to offer a way to complete destroy the DB, something like localForage.deleteDatabase().\nhttps://developer.mozilla.org/en-US/docs/Web/API/IDBFactory/deleteDatabase\nThanks!. Hi @thgreasi,\nSorry for the late reply as I was on vocation. I took a look at your revision and they looks great to me \ud83d\udc4d\nOne thing I am worrying about is that - I don't know if IDB connection could be re-establish successfully after InvalidStateError in the real life situation. I will try it out on our production, and let you know if such a fix is helpful. \ud83d\ude09. Hi @thgreasi @tofumatt \nThank you for the explanation :) I would like to raise a couple of questions if you guys don't mind. \nExpectation of Async Storage\nI think asynchronous storage could still support \"operation ordering\" property. As matter of fact, I don't find these two concepts conflicting. \nIndexedDB is an asynchronous storage but it also supports \"operation ordering\" property: it ensures the result of the operation will be in the same ordering at which transactions are created. \n```\n// example from MDN\nvar trans1 = db.transaction(\"foo\", \"readwrite\");\nvar trans2 = db.transaction(\"foo\", \"readwrite\");\nvar objectStore2 = trans2.objectStore(\"foo\")\nvar objectStore1 = trans1.objectStore(\"foo\")\nobjectStore2.put(\"2\", \"key\");\nobjectStore1.put(\"1\", \"key\");\n// After the code is executed the object store should contain the value \"2\", since trans2 should run after trans1.\n```\nWhy supporting such a property is essential\nIf localforage does not provide such a guarantee, it will be left as client's responsibility to implement some async control to ensure correctness of preserved value.\nThis could be an issue because I believe this is a universal scenario where most clients will encounter, which means most clients will need to implement some extra logic to ensure application correctness. \n. ",
    "enguerran": "You cannot close this issue as I explained I did bower install localforage and I got the xeriab version. Please check yourself with a bower install localforage.\nHere is an extract of the bower.json file:\n{\n  \"name\": \"HelloIonic\",\n  \"private\": true,\n  \"devDependencies\": {\n    \"ionic\": \"driftyco/ionic-bower#1.2.4\",\n    \"ngCordova\": \"~0.1.23-alpha\",\n    \"lodash\": \"~4.0.1\",\n    \"a0-angular-storage\": \"^0.0.15\",\n    \"localForage\": \"^1.4.2\"\n  },\n  \"dependencies\": {\n    \"angular-ui-calendar\": \"^1.0.1\",\n    \"angular-moment\": \"^0.10.3\",\n    \"moment\": \"^2.13.0\"\n  }\n}\nI plusone you about bower and npm. But it does not explain why I got the xeriab version when I try to get the mozilla version.\n. Oh, I see! My bad. I am very sorry about this issue, it was not really useful.\nIt is very silly of bower to let that happened.\n. Thanks @xeriab, no worry as we figured it out.\nIt was odd but now everything will be clearer.\n. ",
    "xeriab": "Sorry guys!\n@enguerran I was a little bit sick to answer for that fault! \nI made a fork for a local project and added sessionStorage support for that fork!\nI will remove it to make it clear for developers who are planning to use localForage.\n. @tofumatt I did removed the fork and bower will no longer search for it!\nSorry again.\n. ",
    "duzun": "Ok, I managed to use it inside an addon, with few changes though.\nIn the case someone else needs this, here are the changes:\n1. Use PR #586;\n2. Add this code to the top of dist/localforage.js:\n``` js\n/\n * Detect Firefox SDK Addon environment and prepare some globals\n \n * @author Dumitru Uzun (DUzun.Me)\n /\n(function (window, undefined) {\n    if (typeof exports != \"object\" || typeof module == \"undefined\") return;\nif ( window && window.Array === Array ) try {\n    // window is the sandbox global object\n    window.window = window;\n\n    // IndexedDB\n    expo(require('sdk/indexed-db'));\n\n    // Timers\n    if ( typeof setTimeout == 'undefined' ) {\n        expo(\n            require(\"sdk/timers\")\n          , [\n                'setTimeout'  , 'clearTimeout',\n                'setImmediate', 'clearImmediate'\n            ]\n        );\n    }\n\n    // Hack to try and get some globals that are missing from sandboxed global space\n    // Blob, FileReader\n    var Cu = require(\"chrome\").Cu;\n    var Services = Cu['import'](\"resource://gre/modules/Services.jsm\", {});\n    expo(\n        Services\n      , ['Blob', 'FileReader']\n    );\n    expo(\n        Services.appShell && Services.appShell.hiddenDOMWindow\n      , ['Blob', 'FileReader']\n    );\n\n} catch(err) {\n    // console.log('error', err);\n}\n\nfunction expo(ctx, props) {\n    if ( !ctx ) return;\n    if ( !props ) props = Object.keys(ctx);\n    for(var i=props.length,p; i--;) {\n        p = props[i];\n        if ( ctx[p] != undefined && !(p in window) ) {\n          window[p] = ctx[p];\n        }\n    }\n    return ctx;\n}\n\n}(this));\n```\n. @thgreasi I like the idea of extension, but I don't see a way to bundle it in a separate file.\nIn Firefox SDK Addons each module has its own sandboxed environment, so the code above has to be in  the same file with indexedDB stuff, cause it adds some required globals to the current sandbox.\n. No problem!\n. Done!\n. You are welcome!\n. ",
    "martinleopold": "Ran into that same issue just now and came up with pretty much the same exact patch.\nThis bug results in blob support not being detected correctly, thus blobs are serialized and this ultimately triggers serialization size limits (~127MB. I'm also on Chrome 51).\n\nDOMException: The serialized value is too large (size=258433118 bytes, max=133169152 bytes).\n\nI'd be happy to try and provide a test if you point me in the right direction of where/how to best add it, @tofumatt.\n. ",
    "dac09": "I'm seeing a similar issue on Chrome 52.0.2743.116 (Official Build) (64-bit)\nIt seems to switch between indexDB and webSQL. So when I create a new instance, and try to remove keys, it fails silently.\n. ",
    "pliablepixels": "Thanks for the confirmation! No, not yet. I made a release for my app that was using localstorage previously and this code (without the catch) was what I was using to migrate to localforage and it was getting stuck in the middle making the app non functional. My guess is one of the setItems was failing (don't know why) and continueInitialInit was not being called because I did not have a catch(). I wanted to re-confirm this is the right pattern to use before I sent another beta release out (as I can't replicate this failure). If you don't mind, may we keep this issue open for a day ? I'd like my users to try this code and if it still gets stuck/fails and does not call continueInitialInit() I'll post here/else close it. Thanks! \n. Hello, it looks like when I use localforage  with cordova-sqlite-storage, certain Android phones completely freeze when I write string values that are large (3000 chars). Switching to indexDB or webSQL via localforage seems to work, so I assume its a sqlite plugin issue and not an issue with local forage. So I posted the issue here.\nThanks.\n. ",
    "ezzatron": "Sounds good. Thanks for the explanation.\n. @jmalonzo Thanks, I was able to suppress the warning with noParse.\n. @jasan-s: Here's the configuration that worked for me:\njs\n// webpack.config.js\nmodule.exports = {\n    entry: ['babel-polyfill', './src/app'],\n    resolve: {\n        extensions: [\"\", \".es6\", \".js\", \".jsx\"]\n    },\n    output: {\n        path: 'web/js',\n        filename: 'todo.js'\n    },\n    module: {\n        loaders: [\n            {\n                test: /\\.(es6|jsx)$/,\n                exclude: /node_modules/,\n                loader: 'babel',\n                query: { presets: [ 'es2015', 'es2016', 'react' ] }\n            }\n        ],\n        noParse: [new RegExp('node_modules/localforage/dist/localforage.js')]\n    }\n};\n. ",
    "jasan-s": "I added the following  to webpack module noParse: [new RegExp(path.resolve(__dirname, '/node_modules/localforage/dist/localforage.js'))] \nbut the warnings remain\n. thanks, @ezzatron  but still getting the pre-built javascript Warnings for both webpack- dev and webpack -p\n. ",
    "goodhyun": "Try with uppercase F.\n noParse: /node_modules\\/localForage\\/dist\\/localforage.js/\nif you are importing from 'localForage'\n... even if your folder in node_modules is localforage.\n. ",
    "therockstorm": "For Gatsby, create (or modify) gatsby-node.js:\njavascript\nexports.modifyWebpackConfig = ({ config, stage }) => {\n  config.merge({\n    module: {\n      noParse: [new RegExp('node_modules/localforage/dist/localforage.js')]\n    }\n  });\n}. ",
    "Narcwis": "I am working on a project which saves an object with two properties (Blob and Date). I have tried your solution and indeed this does save blobs and retrieves them but it empties the date property as per screenshot. \n\nPrevious behaviour is documented in this comment. This issue is present on Safari for macOS only. Testing of above was done on both Safari 10.0.3 and 10.2.\nEdit: For those in my situation, I am using a workaround for this by saving the date as a UNIX timestamp string and converting it to a date when retrieving it.\n. I have tried both indexedDB and WebSQL (by using the config() method) but none seem to work. The console shows data being set but when getItem is called the data is blank {}. Storage panel (Web Inspector) only confirms that the db is in fact created but the records show blank {} data. (using macOS 10.12.3 & Safari 10.0.3 (12602.4.8))\nCan someone confirm that this issue is indeed present in Safari and that it is not just me experiencing this?. I am currently using localforage 1.4.3 which seems to be same as the one in the current master.\nEDIT: the latest version available is 1.4.3 indeed but that pull was merged after the release. Will test first thing tomorrow at work.. I will be testing this tomorrow not only on Mac but also on iOS 9.3.3 and 10.0.2. Will give feedback as soon as I can. I've always benefited from open source projects so if I can do something to contribute, count me in. \nEDIT: Tested the example on Safari 10.0.3, iOS 9.3.3 and 10.0.2. I get two prompts to increase the storage size to accommodate all the data. Also, it shows that getters and setters data matches.\nIn my scenario though I am saving an object with two properties (Data:  blob and LastSync: timestamp).\n\nAs you can see from the screenshot above the getItem does indeed get the object but the Data property is empty. The log says localstorage because that is my own angular service made to use localforage. \nAs expected the storage tab in Web Inspector shows the empty Data property:\n\nAt first I thought my code was wrong but this works in Opera 42, Chrome 55, Firefox 51 and Edge 38. After seeing that jsfiddle working I am unsure if this issue has to do with localforage or the way Safari treats blobs.. @thgreasi The jsfiddle that you linked in the last comment of #352 works on all devices I have tested (iOS 9.3.3 and 10.0.2 and macOS Sierra with Safari 10.0.3). My problem as I said in my previous comment is that Safari does not seem to save blobs with localforage (I tried the files in the dist folder but to no success), I do not know if this is something related to the way Safari treats blobs or maybe something to do with localforage. I was hoping to narrow down the issue with your help. Do you have any suggestions?. I am testing only on macOS safari for now, when something works on that I will test on other devices as well. The codepen you linked works fine, saves an [object Blob] and reads an [object Blob] using localstorageWrapper. Saving a blob directly seems to be working but if you try to store the blob as an object's property that fails in Safari. I have taken the liberty of amending your codepen to reproduce the bug. Try this codepen and let me know what you think.. The jsfiddle you linked returns, when opened in a new tab, using webSQLStorage not indexed db. (Safari 10.0.3)\nAbout the nested blobs, the issue is not present in any other browser apart from Safari 10.0.3 (have yet to try 10.1). Regardless of the driver Safari won't save nested blobs, I will update to 10.1 and edit this comment with feedback. If 10.1 does not work will it be the case to open an issue for it? (I am assuming that #603 is already implemented in the latest version 1.4.3) . Safari 10.2 uses asyncStorage when opened in new tab. \nThe issue reproduced in my codepen with nested blobs also seems to be resolved but only when safari uses asyncstorage (opened in new tab), when using localstoragewrapper the issue persists. I am currently amending my project to see if I can get it working with asyncstorage.. I tested this jsfiddle on Safari 10.2 as commented on #604. The main page uses localstorage but when I open the result frame in a new tab it uses asyncstorage. Feel free to create codepen or jsfiddle for me test, I will be more than happy to contribute.. ",
    "paulkok": "IndexedDB is broken on iOS 8 & 9, see the comments and link (http://bl.ocks.org/nolanlawson/raw/c83e9039edf2278047e9/) in the code. \nBut I confirmed IndexedDB IS working fine on iOS 10 so we should exclude Safari on iOS 10+ from this check.\nwebSQL on Safari on iOS 8&9 is working by the way but it does have the 50MB limit etc.\n. ",
    "willmcclellan": "I should add that when our app falls back to WebSQL it errors on Safari 9.1 with the error:\nself.ready is not a function. (In 'self.ready()', 'self.ready' is undefined) \nFrom this line: https://github.com/localForage/localForage/blob/master/src/drivers/websql.js#L151\n. ",
    "Kreozot": "Thanks a lot!\n. ",
    "imcotton": "I think import * as localforage from 'localforage' only gives you localforage = {default: 'instance of LocalForage'} at runtime, but IDE would provides you code completion to variable localforage.\n. Continues in #609\n\nI would prefer targeting the default configuration of each Typescript version.\nIn case a v1.8 user changes his allowSyntheticDefaultImports option, it might cause other used libraries to stop building/working.\n\nallowSyntheticDefaultImports is flag to let TS code completion treat it as a default ES6 import, it shouldn't changes the output result.\n\nES6 Style imports are not working.\nWhen you want to use ES6 style imports but the typings do not yet use ES6 style exports, then set the TypeScript compiler option allowSyntheticDefaultImports to true.\n\nref:\n- https://code.visualstudio.com/docs/languages/javascript#_troubleshooting-intellisense\n- https://code.visualstudio.com/docs/runtimes/nodejs#_adding-a-jsconfigjson-configuration-file\n. Nice, maybe also have @types/localforage installation mentioned?\n. @iamolivinius \nThat's true for TS if --module ~~targeting~~ set to commonjs/ amd / system / umd\nBy ~~targeting~~ set to es6 / es2015 will leave code untouched and let Rollup or SystemJS to do the same thing.\n. Not necessarily.\nmodule.exports = localforage_1 in CJS is equivalent to export default localforage_1 in ESM.\n. I just realized only need to change from export = to export default in localForage.d.ts file as:\ntypescript\ndeclare module \"localforage\" {\n    let localforage: LocalForage;\n    export default localforage;  //  from export = localforage;\n}\nand TypeScript will recognize its typing right away.\n. Odd, since export default would gives you correct typing info, how come changed from export = in d.ts file would cause runtime behavior difference?\n. Here is my thought:\nFirst, user have had two things setup:\n\nexport = localforag in d.ts (no need change)\nallowSyntheticDefaultImports flag on (as in this PR)\n\nsituation A\nYour tooling needs TS > ES6 module > bundle (Rollup alike)\nUse this syntax:\nimport my_local_forage from 'localforage';\nsituation B\nYour tooling needs TS > CJS / AMD / UMD > bundle (browserify alike)\nUse either one of these syntax:\n1. import * as my_local_forage from 'localforage'; // ES6 style\n2. import  my_local_forage = require('localforage'); // ES6 style mix with require function\n3. const my_local_forage: LocalForage = require('localforage'); // mostly same as above\n\nTo conclusion: the key is how you're going to set --module option, that leads to different tooling and end user syntax.\n. One more about allowSyntheticDefaultImports flag, Moment.js also has notes to turn it on\n. Oh, but using TS1.8 would also get same benefit from allowSyntheticDefaultImports, that's why put on top as covers all user.\n. I think we should move change and discussion back to #608 for better alignment, feel free to rephrase over once reached the agreement, no worries.\n. I think it should be driver?: string | string[];\n. ",
    "danbucholtz": "I am one of the tools developers for Ionic. Anything you want me to test out or weigh in on? Happy to help - please let me know.\nThanks,\nDan\n. @thgreasi,\nI'll clone and test.\nThanks,\nDan\n. @thgreasi,\nIf I run grunt build, I am met with the following warning:\n```\nRunning \"browserify:main\" (browserify) task\n\n\nBundle dist/localforage.js created.\n\n\nRunning \"browserify:no_promises\" (browserify) task\n\n\nBundle dist/localforage.nopromises.js created.\n\n\nRunning \"run:derequire\" (run) task\n/bin/sh: derequire: command not found\nWarning: non-zero exit code 127 Use --force to continue.\n```\nAm I misunderstanding the build process? I do have files generated in dist.\nThanks,\nDan\n. This looks good to me:\ndeclare module \"localforage\" {\n    let localforage: LocalForage;\n    export default localforage;\n}\nThis will enable it to work with Ionic and other TS tools without issue. It will use the standard es2015 default export syntax so it will be available to be imported like this:\nimport localforage from 'localforage'\nThanks,\nDan\n. @thgreasi,\nWe use the allowSyntheticDefaultImports throughout Ionic. We need it in order to import everything as a default export since our bundler (Rollup) is very particular. If we were using Webpack or Browserify, this would be a non-issue.\nThis thread sheds some light on it a bit.\nThanks,\nDan\n. ",
    "keyiis": "@tofumatt the obj contain some function ,below is object(after JSON.stringify) what i trying to store:\n[\"[{\\\"received\\\":0,\\\"entries\\\":[{\\\"_item\\\":{\\\"pic\\\":[\\\"d:/work/nodejs/angular/angular2-electron/output/electron/build/pic/898478da-e0a0-47e2-aa38-06f0670f5a06.jpg\\\"],\\\"id\\\":1,\\\"code\\\":\\\"www\\\",\\\"name\\\":\\\"www\\\",\\\"py\\\":\\\"www\\\",\\\"stock\\\":7,\\\"price\\\":8,\\\"desc\\\":null,\\\"created_at\\\":\\\"2016-09-26T10:07:19.281Z\\\",\\\"updated_at\\\":\\\"2016-10-10T08:48:11.904Z\\\",\\\"fcat\\\":3,\\\"foperator\\\":null,\\\"kpos_windowcat_item\\\":{\\\"created_at\\\":\\\"2016-09-28T05:18:20.709Z\\\",\\\"updated_at\\\":\\\"2016-09-28T05:18:20.709Z\\\",\\\"item_id\\\":1,\\\"windowcat_id\\\":1}},\\\"_count\\\":1,\\\"_price\\\":8},{\\\"_item\\\":{\\\"pic\\\":[],\\\"id\\\":2,\\\"code\\\":\\\"gggg\\\",\\\"name\\\":\\\"gggg\\\",\\\"py\\\":\\\"gggg\\\",\\\"stock\\\":5,\\\"price\\\":19,\\\"desc\\\":null,\\\"created_at\\\":\\\"2016-09-26T10:07:33.147Z\\\",\\\"updated_at\\\":\\\"2016-10-10T08:47:55.735Z\\\",\\\"fcat\\\":2,\\\"foperator\\\":null,\\\"kpos_windowcat_item\\\":{\\\"created_at\\\":\\\"2016-09-26T10:08:24.838Z\\\",\\\"updated_at\\\":\\\"2016-09-26T10:08:24.838Z\\\",\\\"item_id\\\":2,\\\"windowcat_id\\\":1}},\\\"_count\\\":1,\\\"_price\\\":19}],\\\"code\\\":\\\"1476179732738\\\"}]\",{\"received\":0,\"entries\":[{\"_item\":{\"pic\":[],\"id\":2,\"code\":\"gggg\",\"name\":\"gggg\",\"py\":\"gggg\",\"stock\":5,\"price\":19,\"desc\":null,\"created_at\":\"2016-09-26T10:07:33.147Z\",\"updated_at\":\"2016-10-10T08:47:55.735Z\",\"fcat\":2,\"foperator\":null,\"kpos_windowcat_item\":{\"created_at\":\"2016-09-26T10:08:24.838Z\",\"updated_at\":\"2016-09-26T10:08:24.838Z\",\"item_id\":2,\"windowcat_id\":1}},\"_count\":3,\"_price\":19}],\"code\":\"1476235781952\"}]\n. @thgreasi  the object from other package and i can't modify structrue,so i must stringify before store.if localforage can judge object can't clone and automatic stringify to store?\n. ",
    "tylergraf": "So what do we do if we install using bower?. Well I definitely wouldn't support removing bower support. I can work around it and add a build step in my process, but I hope you get real numbers before this happens. And it should definitely be a major release.. @thgreasi When do you plan to release 1.5?. Will you be creating pre-releases?. @thgreasi I made a PR here: https://github.com/localForage/localForage/pull/661. ",
    "jlchereau": "There is a difference between DROP DATABASE, DROP TABLE and DELETE * FROM TABLE in SQL. \nIf SQL makes this difference, if mongoDB and others make it too, there might be a need for it in localForage, don't you think?\nMy need is to upgrade a schema without leaving empty useless stores/tables/collections after the upgrade.  Does it  make sense?\nNote: I appreciate this is not applicable to localStorage where drop and clear would be the same, but it is applicable to Indexeddb and WebSQL where drop and clear have different implications.\n. I have only ever experienced different flavors of SQL databases and mongoDB, and they both drop so I would definitely favor dropInstance over clearInstance and deleteInstance. Furthermore clearInstance is ambiguous considering the clear method in localForage.\nConsidering the existing createInstance:\nlocalforage.createInstance({ name: dbName, storeName: storeName });\nIt makes sense to maintain the same method signature (as you suggest):\nlocalforage.dropInstance({ name: dbName, storeName: storeName });\nAs far as backward compatibility is concerned, I have no idea how many people have developed drivers for localForage and how easy it is to communicate with them. In my opinion, backward incompatibility should not be a big issue if localForage can report its version like jQuery has $.fn.jquery.\n. - IndexedDB: agreed.\n- WebSQL: n/a\n- localStorage: I would need to try to confirm (after Christmas).. Thanks you for progressing this. At this stage, I have only tried with Chrome 62 on Windows 10, which uses indexedDB by default.\nlocalforage.dropInstance({ name: 'db', storeName: 'table' }, function(err) {...}); works fine when both db and table exist and err is null which is consistent with all localForage methods.\nlocalforage.dropInstance({ name: 'db' }, function(err) {...}); returns err of type IDBVersionChangeEvent and the database db is not removed which is unexpected.\nlocalforage.dropInstance({ name: 'dummy', storeName: 'dummy' }, function(err) {...}); where dummy does not exist raises Uncaught TypeError: Cannot read property 'deferredOperations' of undefined which could be handled more nicely.\nlocalforage.dropInstance({ name: 'db', storeName: 'local-forage-detect-blob-support' }, function(err) {...}); never returns.\nI hope this helps.. Also, any reason why dropping the first instance is 10x longer than dropping the second one? Maybe you want to look into that too...\n\n```\nit('it should drop store1', function (done) {\n    localforage.dropInstance({ name: LF_DB, storeName: STORE1 }, function(err) {\n        expect(err).to.be.null;\n        done();\n    });\n});\nit('it should drop store2', function (done) {\n    localforage.dropInstance({ name: LF_DB, storeName: STORE2 }, function(err) {\n        expect(err).to.be.null;\n        done();\n    });\n});\n```\n. Hi @thgreasi, thank you for progressing this. Unfortunately I won't have any time to commit on testing this new feature before September. Let me know whether this works for you.. Thanks you for progressing this. At this stage, I have only tried with Chrome 62 on Windows 10, which uses indexedDB by default. \nlocalforage.dropInstance({ name: 'db', storeName: 'table' }, function(err) {...}); works fine when both db and table exist and err is null which is consistent with all localForage methods.\nlocalforage.dropInstance({ name: 'db' }, function(err) {...}); returns err of type IDBVersionChangeEvent  and the database db is not removed which is unexpected.\nlocalforage.dropInstance({ name: 'dummy', storeName: 'dummy' }, function(err) {...}); where dummy does not exist raises Uncaught TypeError: Cannot read property 'deferredOperations' of undefined which could be handled more nicely.\nlocalforage.dropInstance({ name: 'db', storeName: 'local-forage-detect-blob-support' }, function(err) {...}); never returns.\nI hope this helps.\n. Try this:\nlf.zip\nNote: to deactivate a test case, replace it by xit. I have just realized that trying to dropInstance dummy which supposedly does not exist actually creates dummy:\n\n. Note: I realize I should have referenced localforage.nopromises.js instead of localforage.js but still some of my findings are still valid (these test cases were originally designed before localforage split with optional promises).\nlf.nopromises.zip\n. Have you been able to reproduce?. ",
    "sido420": "Any updates on this?. I ended up using LF getitems plugin as suggested.\nI will test with the code I pasted and report back if I find any issues.. ",
    "Darkbladecr": "I have been using localforage with redux-persist \nI have added an issue there as well, just in case it is due to the way they use localforage.\n. Couldn't find a CDN for ng-redux and not sure how to import (es6) correctly with codepen, but ultimately here is my basic setup:\nhttp://codepen.io/anon/pen/pNyNvL?editors=1010\n. Let me try to recreate on a new project. I can't get the node_modules I use to load on codepen so I'll upload a zip,\n. I can't seem to reproduce. For fullness here is the sample:\ncounter.zip\nYou can close.. ",
    "wormen": "made his own version pubsub, may also nice for you\nin web workers also works\n``` js\nmodule.exports = class PubSub {\nconstructor(channel) {\n    this.isBrowser = (typeof window === `object`);\n\n    this._store = {};\n    this._store[channel] = {time: 0};\n\n    this.channel = channel;\n    this.listener = () => {};\n\n}\n\nget() {\n    if(this.isBrowser)\n        return JSON.parse(localStorage.getItem(this.channel)).msg;\n    else\n        return this._store[this.channel].msg;\n}\n\nset(data){\n\n    let obj = {\n        msg: data,\n        time: Date.now()\n    };\n\n    if(this.isBrowser)\n        localStorage.setItem(this.channel, JSON.stringify(obj));\n    else\n        this._store[this.channel] = obj;\n}\n\npublish(data) {\n    this.set(data);\n    this.listener(this.get());\n}\n\nsubscribe(listener) {\n    this.listener = listener;\n\n    if(this.isBrowser){\n        let onStorage = e =>{\n            if (e.key === this.channel) this.listener(this.get());\n        };\n\n        window.addEventListener('storage', onStorage, false);\n    }\n}\n\n};\n```\n``` js\nlet Channel = new PubSub('my_channel');\n// Easily subscribe, data provided via callback.\nChannel.subscribe(data => {\n    console.log(data);\n});\n// Publish a new message to channel.\nChannel.publish({message: 'Hello world!'});\n```\n. @thgreasi you meant https://github.com/localForage/localForage-observable ?\nif so, how I can be used in conjunction with webpack, there is no information about this in the documentation\n. @thgreasi \nwhen connected\njs\nlet localforage = require('localforage');\nlet lfObservable  = require(`localforage-observable`);\nlfObservable.extendPrototype(localforage);\nI receive an error\nUncaught ReferenceError: localforage is not defined\n\n. 1) in file localForage-observable/dist/localforage-observable.es6.js\nchanged\nvar extendPrototypeResult = extendPrototype(localforage);\nto\nvar extendPrototypeResult = null;\nif(typeof localforage != `undefined`)\n    extendPrototypeResult = extendPrototype(localforage);\n2) Total connection, without the appearance of errors, looks so\n``` js\nconst localforage = require('localforage');\nimport Rx from 'rxjs/Rx';\nconst lfObservable  = require(localforage-observable/dist/localforage-observable.es6);\nlfObservable.extendPrototype(localforage);\nlocalforage.newObservable.factory = function (subscribeFn) {\n    return Rx.Observable.create(subscribeFn);\n};\n```\n3) the desired result has not received\ndata storage monitoring did not appear in the console\n. I published a file that you can see how I was doing\nhttps://github.com/wormen/offline-storage/blob/master/store.js\n. @thgreasi \nafter packing webpack\nso nothing is displayed\n. @thgreasi\nerrors in the last release is not observed\nbut the problem has remained from the previous release\nthat the data or not tracked, according to documentation or does not fulfill a conclusion that the data has changed\nI understandably described to you the essence of the problem?\n. @thgreasi\nI previously gave a link to a file that pack in webpack\nYou can check on this file\nhttps://github.com/wormen/offline-storage/blob/master/store.js\n. error stopped appearing in the console\neverything else remains unchanged\n. @thgreasi thank you very much, now it is clear that I am not the right thing did\n. ",
    "fytriht": "It looks like the problem is caused by operating system differences(os x / windows), because it works fine in my colleuge's PC, and my old PC. only my mac has this error.\nany idea? thanks. ",
    "MongolOverseer": "I'm having the same problem here.\nLast thing I tried was having only index.html and the localforage library. In the index.html I of course had\n<script src=\"localforage/src/localforage.js\"></script>\n<script>localforage.config();</script>\nStill I get the error:\nUncaught ReferenceError: localforage is not defined\n. Ah, that worked. Thanks for the help.. ",
    "plexigras": "its quite specific but isomorphic/universal javascript which runs on server as well as browser. i want a script that can run in the browser as well as in node which means i need some parts of the script to be conditional including localForage which i want to only use in the browser. you are right having the driver checks just run might actually be a feasible solution.\ni'm getting some warning when doing so:\n[0] webpack building...\n[0] ./~/localforage/dist/localforage.js\n[0] Critical dependencies:\n[0] 7:484-491 This seems to be a pre-built javascript file. Though this is possible, it's not recommended. Try to require the original source to get better results.\n[0]  @ ./~/localforage/dist/localforage.js 7:484-491\n[0] webpack built 9960782aee65ea885d69 in 6392ms\n[1] (node:12420) UnhandledPromiseRejectionWarning: Unhandled promise rejection (rejection id: 2): Error: No available storage method found.\n[1] (node:12420) DeprecationWarning: Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code.. well the DeprecationWarning dosen't look good is that something that can be easily fixed?\nit is everything else then good that it will not work in future node versions.. how would i do that?. just adding a catch would probably fix the issue. ",
    "davidgilbertson": "node: 7.1.0\nnpm: 3.10.9\nlocalforage: 1.4.3\nI'm having a similar issue with an isomorphic app.\n(node:10432) UnhandledPromiseRejectionWarning: Unhandled promise rejection (rejection id: 2): Error: No available storage method found.\n(node:10432) DeprecationWarning: Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code.\nI'm not trying to run localforage on the server.\nI have a file, client.js that is only ever run on the client. I'm transpiling/bundling my app with webpack. Even though the code within the file only gets executed on the client, the import of localforage executes code, and so it throws an error while being bundled.\nTo illustrate:\nThis code works fine, is bundled by webpack in Node and is executed in the browser.\n```js\n// client.js\nimport React from 'react';\nconst data = window.APP_DATA;\nlocalStorage.setItem('data', JSON.stringify(data));\n// do React stuff\nI'm just showing the import of React to show the problem isn't importing, I've got dozens of packages importing throughout the app. But adding `localforage` fails while being bundled:js\nimport React from 'react';\nimport localforage from 'localforage';\nconst data = window.APP_DATA;\nlocalforage.setItem('data', JSON.stringify(data));\n// do React stuff\n```\nIs there a trick I need to do to get this working with webpack?\nPerhaps the library could fail silently if it finds no storage whatsoever? If someone tries to actually setItem in Node they're going to get an error at that point.\nOr check if it's in a browser environment before executing storage checks?. That reasoning makes sense.\nTo clarify, the localforage calls aren't the issue, the import is. Perhaps a clearer example is this, which will throw an error and stop the bundling process:\n// client.js\nimport localforage from 'localforage';\n// end of file\nIt is simply the import that breaks, not the use of the library. Do you know what I mean? If I put a console.log() where that import is it won't print during bundling because this code is not executed when being bundled. But the import is parsed and the package does execute when being bundled.\nAnyway, I suspect this is really a documentation issue since the fix could be found in other issues here, which for the record is to instruct webpack to not try and parse localforage (since we know it executes and throws if you import it in Node).\nmodule: {\n    noParse: [\n      /localforage\\.js$/,\n    ],\n  }\nI wonder if it would be the best of both worlds to do a check for window? That way, the behaviour doesn't change at all in browsers, the only place that localforage is designed to work, but doesn't crash the process if you try and bundle code that imports it?. @thgreasi I'm just coming back to this now. Your suggestion worked a treat, thank you.. ",
    "JamieVGroupClaes": "omg TT-Docs => TT-docs, back-end issue. ",
    "camflan": "Not sure if I'm seeing the same issue as you or not -- but I'm running a kiosk style webapp on iPads and in iOS 10, I'm getting errors after 8ish hours of use. Connecting to the iPad and using the web inspector console, I'm unable to open the DB. Almost as if it's getting deleted at some point during the day.. This is still happening on Safari 11.0.2 and Safari Tech Preview 11.2. ",
    "idiotWu": "Please note that it may bring some other issues if we add a new localforage.withpolyfills.js entry. Actually I am working on a typescript project, but typings provided by localforage only includes \"localforage\", so I have to add a \"localforage/dist/localforage.nopromises\" module declaration block to make code intelligence work.\nWell this is only a negligible issue to me, but as the growing with dist files, some unnecessary complexity may bring down the maintainability (for example, the new workflow). We all like to keep things simple but powerful, right? \ud83e\udd13\nAs for the polyfills, despite the browser compatibility, I think it's the users who need to decide whether to use or not. Even we introduced Prmoise polyfills today, we can't make sure that no one needs a polyfill for Array methods somehow, we can't always cover all the situations. So I think it would be better to leave the decision to users.. ",
    "simon04": "For reference, Firefox goes with a storage attribute on the option object to the open() function: https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API/Browser_storage_limits_and_eviction_criteria\njs\nvar request = indexedDB.open(\"myDatabase\", { version: 1, storage: \"persistent\" });\n// vs.\nvar request = indexedDB.open(\"myDatabase\", { version: 1, storage: \"temporary\" });. ",
    "stevemao": "adding noParse option is just like turning off the fire alarm in a fire. It doesn't help webpack to optimise the build result. Should main be the src entry instead (or the entry of a es5 version transpiled by babel)?. ",
    "josh-sachs": "When you use localForage in Safari 10.0.2, with the default driver (localforage.INDEXDB), we're getting a message saying we are requesting 10MB of disk space: \n\nThe website is requesting 10MB of disk space to store \"localForage\" as a database on your disk.  Currently this website is allowed to use 5MB of disk space.\n\nAll I'm storing is a JWT to the keyvalue table... it is not 10MB. . I'm not sure this ticket should remain closed.  There is either an issue with the documentation or with the expected behavior of INDEXDB in safari. . ",
    "mackelito": "Any update on this?. I dont get it in 10.1.1 but still see it in 10.0.1. Ah.. haha.. never mind... just crapy coding on my end ;). ",
    "Olgagr": "I'm getting this as well on Safari 10.1.1. I'm creating multiple storages with default config (according documentation with the size of 4980736 each).\n--- edit\nIt seems like Safari sum up all storages sizes and if sum is greater than 5MB I see this warning.. ",
    "coulson84": "The related promise is rejected with an no space available error. Hey, sorry for the slow reply. I have been busy over the last week and haven't had time to look at this. It still fails on Safari 10.0.03 - the alert box requesting confirmation pops up a couple of times and then the promise fails. It also will not use websql at all on iOS 9.3.2 and if I remove the setDriver request it falls back to using localStorage.\nSeems to work fine in Chrome as it never pops up an alert box for more storage.\n\n. In addition - the error is still \"there was not enough remaining storage space, or the storage quota was reached and the user declined to allow more space\" but of course I am approving the request for storage. It looks like it might be more of an issue with Safari than localforage to be fair. If I get time I will test this outside of localforage and see if I can replicate there and file a bug in Safari although with websql being deprecated I am not confident that it will get much attention\nThanks. ",
    "pjjackowski": "Would it be feasible to add instances() to get the list of all datastores, like keys() gets the list of all keys in the given datastore? I may be missing something, but I can't see any way to do it right now.. ",
    "aeolusheath": "@thgreasi   https://github.com/localForage/localForage#browserify-and-webpack this text?\nI read it , and I modify the config of webpack but the warning still exist . @thgreasi   it works. thanks for your time, bro...   . ",
    "heygrady": "The readme has a typo. This worked for me: noParse: /.*\\/localForage\\/dist\\/localforage\\.js/\nAlso, Webpack is very popular. It's odd for a library to demand that users add a special exception their configs when nearly every other library just works.. ",
    "dennismartensson": "@tofumatt do you think its a big job? I did have a quick look at it and got to that utils/isIndexedDBValid.js#L19 is where we need to change the check so that if its Safari 10.1+ its not captured by that if.. Thinking that this changes are the same as the ones we should do to utils/isIndexedDBValid.js#L19. Have a PR here #651 . ",
    "pvanngoc": "This seems to be related to this: #626 but the fix is not included in current version yet. When are you planning to release 1.5?. ",
    "ayrtonvwf": "Hey @tofumatt, any progress in this pull request? I don't wanna put any pressure, I just have to decide whether to use localForage in my production APP or not and it depends on this pull request. I'd be happy to help with anything cause I really wanna use localForage, but I don't know how to help.. ",
    "paulpooch": "If you accidentally pass a semver style string to the version option.  All of local forage just silently fails.  Very confusing.\nThis never prints anything:\nlocalforage.ready().then(() => {\n      this.offlineStorage = localforage.createInstance({\n         name: 'foo',\n         version: '0.0.1', // <-- You can't do this.  Must be a number.\n      });\n      this.offlineStorage.setItem('TEST', { test: 123 }).then((x) => { console.log(x); });\n    });. It did not reject.  I think the promise just hangs and never resolves.  No\ncatch blocks detected any issue.\nI mean it's not a huge deal just maybe clarify the docs a little.  Looks to\nme like indexedDB just runs on int versioning... It took me an hour of\nwasted time to figure that out.\nOn Sun, Jul 30, 2017 at 6:05 AM, Thodoris Greasidis \nnotifications@github.com wrote:\n\nI would expect that .ready() would reject in that case. Would you prefer if\nit threw an error right away?\n\n--\nThodoris Greasidis\n\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/localForage/localForage/issues/658#issuecomment-318891397,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAg7eppN8EUWIKpaqfF8DEeaTC2l8Dr7ks5sTFVwgaJpZM4L1dMD\n.\n. Really this occurs if you pass a string that cannot be casted to a number... i.e. a number with TWO decimals (aka semver).  I'll mention it in the bad version documentation issue.. \n",
    "april": "I think that IndexedDB supports them natively, but I could be wrong.\nIn any case, you could probably:\nMaps: Convert to Object upon serialization and Map upon deserialization (via JSON?)\nSets: Convert to Array upon serialization and Set upon deserialization. ",
    "finnef": "Indexeddb stores and retrieve Maps just fine using localforage 1.5.0... At least simple maps with strings or numbers as keys. I guess more complicated Maps are problematic for most storage/conversion manipulations. You could add detection for these object types and save them converted. See 'Arbitrary Maps as JSON via Arrays of pairs' in http://www.2ality.com/2015/08/es6-map-json.html.\nYou could use the same mechanism as for blobs and type_arrays. Declare new TYPE vars for Maps and Sets, and convert them to arrays of arrays before stringify and back to Map/Set on parse.. I would like to work on this issue. I have forked and will post a PR when ready.. nevermind - it seems Safari 10.0.3 on MacOS 10.12.3 does not support localforage.INDEXEDDB as storage.. ",
    "crascher": "@tofumatt sure, the code is:\nlocalforage.setItem('key', 'value').then(function () {\nreturn localforage.getItem('key');\n}).then(function (value) {\n// we got our value\nconsole.log('success');\n                console.log(value);\n}).catch(function (err) {\n// we got an error\nconsole.log('error');\n                console.log(err);\n});\nthen and catch function ist not entered for facebook in-app browser.\nThere is no error message, thats the biggest problem, its just not entering the promise functions.. @jesusbotella via remote console e.g. https://jsconsole.com/. code was:\nlocalforage.setItem('key', 'value').then(function () {\nreturn localforage.getItem('key');\n}).then(function (value) {\n// we got our value\nconsole.log('success'); console.log(value);\n}).catch(function (err) {\n// we got an error\nconsole.log('error'); console.log(err);\n});\nI was not testing anymore since 12th March so I cannot give you an update on that.. ",
    "jesusbotella": "@crascher How are you debugging the code?. Which script is the one you are importing in your HTML? The one with promises or the one that don't?\nDo you have another code using promises? What does typeof Promise print in your console?. Yeah, sorry, I didn't noticed that the issue was too long ago :(. Yeah, the in-memory storage thing is why I opened this issue :)\nThe thing is that if you are in private browsing mode, the localStorage is marked as available in supports method and _initStorage method, even though it is not true because when you try to save something throws a DOM 22 exception.\nSo, even though people is expecting to catch the no storage driver available error in .ready() that wouldn't happen in private browsing because the localStorage will be ready to save data, and then when you try to do it, it will throw a quota error, not a no storage driver available error. So they are missing it already.. No, I think it is better to follow here, isn't it? That was the purpose of the issue (check if localStorage works properly), seeing that the fallback between methods works successfully right? :)\nSo, I think I can do what you propose in your latest comment.\nFor the faulty driver test, I think the best way to test it is overriding the localStorage's setItem function in the index file (the same way as WebSQL openDatabase function) and throwing the error that Safari actually throws in private browsing. And then add the localStorage driver to faulty driver test driver list. Am I right?. I think that this will be a huge improvement when it comes to flexibility because we can define the storage drivers the way we need.\nI have another question related to this, and the issue #715 that I opened. Will you modify (or be ok with modifying via PR) the localStorage check method?. Yeah, that is what I wanted when I opened the issue :)\nDo you mind if I make a PR to change it in the isLocalStorageValid\nfunction? I saw that you import that file from the utils folder so I\npresume there won't be any conflicts :)\nEl El lun, 21 ago 2017 a las 15:13, Thodoris Greasidis \nnotifications@github.com escribi\u00f3:\n\nI think that this should be part of a separate PR. We can perhaps add run\na dummy setItem in _initStorage, in a similar way to what indexeddb does\nto detect blob support.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/localForage/localForage/pull/723#issuecomment-323741250,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AEHp8LVOLrIdmI6r2kQ1mQLyaWOo6a2Aks5saYKGgaJpZM4O2eAK\n.\n. Sorry, I saw that It would be better in _initStorage as you said \ud83d\ude05. I have refactored my changes to abstract the localStorage check into a new function, please tell me if it fits your current naming convention and coding style :)\n\nI have found the way of checking if localStorage is available without a false negative in the case of users that have exceeded the quota without being on private browsing mode. It involves checking the current localStorage items length.\nHowever, it doesn't pass the tests on my local machine because it seems that test.main.html tests save items in the localStorage and don't delete them afterwards, making the length greater than 0. Do I need to worry about it, or it is correct seeing that it doesn't belong to the faulty drivers test?\nAnd at last but not least, what do you mean by \"move the dist files in a different commit to ease rebasing\"? If I'm not wrong they are in a different commit, right? I do not know what to do here \ud83d\ude01\nI will need to create the dist files again with the new changes, but I don't want to create them until we finish all the review process :). > I'm not sure whether we should wrap localStorage.length inside a try...catch. Can you confirm that it doesn't throw in private Safari?\nI have just double-checked it and executing localStorage.length doesn't throw in Safari version 10.1.2 (12603.3.8) :)\n\nHow about doing a localStorage.clear() inside a before() call, like in here?\n\nYeah, that would be needed to remove anything from localStorage before doing the tests :) Shouldn't be necessary to clear the localStorage after these tests as well? Just to keep the storage clean\nSo, if you think that it is ok I'm going to make the changes and rebuild the dist files :). @thgreasi Yeah, sure, there is not an only way to do it :) The only thing is that in the main tests, when they are all passed, there are items that are not removed.\nI have just made the changes, and build dist files. :). Yeah, sure. Do you want me to recreate dist files after rebasing and squashing commits?. Done! I hope it is OK.\nI have squashed all commits into one except the build ones, and then I made another one containing only the dist changes. I really like to keep things clean, like you said \ud83d\udc4c . I have just tested in Safari 10.1 (12603.1.30.0.34) and works as expected.. Yes, I think so!\nIt will be checked before using localStorage, so I think it will work as expected. Let me test it, and modify the PR to make the change.. @thgreasi I have just changed the code to isLocalStorageValid.js, and it works like a charm. But I have one problem now.\nI see that isWebSQLValid.js only checks if the openDatabase function exists, which returns true in our faulty drivers' test.\nBut as I changed the localStorage check to isLocalStorageValid.js, the localStorage driver is not valid, so the code doesn't fire the setDriver function success callback in the callback test, failing inevitably.\nWhat can I do to pass the callback tests? If I set the error callback the localStorage test works, but the WebSQL test fails. Do you want me to split the test?\nAnother improvement that can be made in the promise test is to change that .then(null, function() {}) to .catch(function(){}). Ok! No worries :)\nYes, both approaches have pros and cons as you said, but I agree it wouldn't be right to show an alert in the user browser if they don't use localStorage at the end.. Do you mind if I try to do it? :). I have seen @tofumatt has a pull request to use Karma and npm dependencies (#461). As long as I see in the commits/code (if I don't miss something), he doesn't have changed anything about npm dependencies.\nI'm gonna start over and see what happen, or tell me if you have a better idea :). I thought it would be nice to add it, as it bothered me when I built the module dist files. :)\nThank you for merging it.. ",
    "Eccenux": "Oh... I've re-written and noticed getItem callback has different parameters. The first parameter is error and value is in second. Ups.\nSo everything is fine. Sorry and thanks :-).. ",
    "aaawhz": "module.exports = localforage_js;\n//update localforage.js , add the following line,  the problem resolved \nwindow.localforage = localforage_js. just in browser, I mean, put JS on the line. localForage-master \\localForage-master\\examples\\index.html. ",
    "denis1994": "I was also surprised that IndexedDB is used.\nI'm using now localForage-cordovaSQLiteDriver but for the migration to it, I want to read the data from the IndexedDB.. I updated the first post, please take another look on it.\nYou can verify this conveniently in the iOS Simulator for the different iOS versions. The iOS Simulator ships with Xcode. No fiddling with different devices needed, just a Mac.. * iOS 9.3: \nMozilla/5.0 (iPhone; CPU iPhone OS 9_3 like Mac OS X) AppleWebKit/601.1.46 (KHTML, like Gecko) Mobile/13E233 (140474252009280)\n\niOS 10.2:\n\nMozilla/5.0 (iPhone; CPU iPhone OS 10_2 like Mac OS X) AppleWebKit/602.3.12 (KHTML, like Gecko) Mobile/14C89 (140445468367168). ",
    "ZhnZhn": "With v1.5 for my case no error is in console. Thanks.. ",
    "bildsoe": "No, no problems as I developed it. I was testing mainly on desktop Chrome.\nBut Perhaps I should try setting the Blob type before setItem?. I'm currently testing on iOS 10.2 - and here I have the problem with the deserialized data.. So I'm finished testing and Blob-type is important :) - It should be set on both setItem and getItem otherwise the blobdata won't work on iOS. . ",
    "Jmadih": "It works ! Thank you @thgreasi . ",
    "NickGeek": "Is there any update on when this will be done?. ",
    "hobbydevs": "I'm using Localforage version 1.5.0 and the @types/localforage is version 0.0.30 and I'm importing localforage like this \ntypescript\nimport localforage from \"localforage\";. worked just fine! Thanks . ",
    "antontsvil": "I'm also having this issue. For whatever reason IndexedDB just hangs and stops responding completely. I tried to clear via Dev Tools > Application > Clear Storage > Clear Site Data, it seems to not respond to being cleared. Hard to tell if it's a bug in chrome or if it's localForage that's causing it? For now, I've switched to the WebSQL driver; you can do the same like so :\nlocalforage.createInstance({\n    name:\"forage_name\",\n    storeName:\"store_name\",\n    description:\"...\",\n    driver:[localforage.WEBSQL,localforage.INDEXEDDB],\n}),\nThe IndexedDb driver is still used as a fallback, but Web SQL will be used by default.. ",
    "argordmel": "I'v the same problem. ",
    "hackingbeauty": "Doesn't work for me in Firefox, and I'm not in private mode.\nFor an example of the issue, check out my app www.voicerecordpro.com.  In Chrome, you can create an audio recording, quit out of the browser, and replay the recording when you open the browser again.\nIn Firefox, the audio recording is not saved after you quit out of the browser.\nThe \"live example\" from the README gives me the message \"Using:localStorageWrapper\" in Firefox.\nWe know FF supports IndexedDB, so what else could be the issue? :)\n. Deleting the old profile, then creating a new one worked for me.\nOn Tue, Aug 1, 2017 at 11:23 AM, Pierre-Louis Dubouilh \nnotifications@github.com wrote:\n\nI inconsistently bumped on that issue as well with Firefox 54.0.1 on\nArchlinux\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/localForage/localForage/issues/691#issuecomment-319455008,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AABOn-3hn_OQh7HaoGaKiC9Do-_l_dptks5sT204gaJpZM4NNsmE\n.\n\n\n-- \nMark M. Muskardin\nUI & Web Engineer\nwww.hackingbeauty.com/about\nwww.linkedin.com/in/markmuskardin\n\nCheck out my latest course:\n\"How to Write a Single Page Application\"\nhttp://www.singlepageapplication.com\nA Guide to Developing a Professional App\nfor the Web Using React & Redux\n\n. @sebvie it doesn't appear to be fixed.  I'm still getting the error on Safari on iOS.. ",
    "pldubouilh": "I inconsistently bumped on that issue as well with Firefox 54.0.1 on Archlinux. ",
    "nisimjoseph": "for me it not an issue, for the startup I am working for it not ok.\nusually you have those types: https://choosealicense.com/\nso it clear what it mean. github also show it nice with what can and can't do.\nplus, I know MIT is more freely, so usually they want here MIT license.\n. 1. it clear.\n2. you can. we don't have issue with standard Apache License 2.0.\n3. not need if it too much work. but MIT is better.\nthank you,\nNisim. ",
    "airjord": "Sorry wrong package. ",
    "pieisgood": "I can confirm this same issue. When calling createInstance({name:'some-name'}); on safari mobile instead of returning the instance of the existing DB, localforage will create a new instance with the same name and same data. I'm not sure about the storage size impacts yet but it does seem concerning. You can recreate by emulating an iphone, or connecting to a site from an iphone and then monitoring the index databases in the safari web inspector on a Mac. This is on localforage 1.6.0. ",
    "AUSdomgarcia": "Im using Typescript, following steps here https://ionicframework.com/docs/storage/\nwhen i use this I am limited to utilize method of LF for not declare in typescript. I can only setup once here\nIonicModule.forRoot(MyApp),\n    IonicStorageModule.forRoot({\n      name: 'mydb',\n      storeName: 'users',\n      driverOrder: ['sqlite', 'websql']\n    })\nhow will I manage this?\n. Really?\nI thought you guys have collaborated closely to each other. \nanyways, thanks man!. ",
    "huygn": "src/index.js\n```js\n...\n// localForage config\nlocalForage.config({\n  driver: [localForage.INDEXEDDB, localForage.LOCALSTORAGE],\n  name: 'MyApp',\n  version: 1.0,\n  description: '',\n});\nlocalForage.ready().then(() => {\n  console.log(localForage.driver());\n});\n// render\nReactDOM.render(\n  \n\n\n\n,\n  document.getElementById('root'),\n);\n// register service worker\nregisterServiceWorker();\n``. when I commented outconfig(), it always loglocalStorageWrapperregardless.. I'm using localforage1.5.0. Let me try in private mode.. Great, on private mode it alwaysasyncStorage, must be some of my extension... . thats even weirder, my private Chrome mode always logasyncStorage.. By the way just auto updated to Chrome 59.. Thanks for your help!. Found it, so after disabling all extensions and enable them one by one, as soon as I enableLast Passextension and visit my web page - it logslocalStorageWrapper` again, so disabling it for now.. ",
    "boedy": "Our team is experiencing the same issue. It occurs when replacing existing keys. We suspect this bug was introduced in iOS 10.3. By first removing a key before writing this problem can be circumvented. It's hacky, but we currently resolve it that way, until there is a fix.\nHere a code snippet to reproduce the bug\n```js\nvar dummyData = [];\nfor(var i = 0; i < 100000; i++){\n  var dummyEntry = {firstName: 'John', lastName: 'Doe', email: 'john@example.com' }\n  dummyData.push(dummyEntry);\n}\n//this will cause the wall file to grow\nvar interval = setInterval(overwriteData, 100);\n//by deleting they key before writing the wall file will not grow\n//var interval = setInterval(removeInsertData, 100);\nfunction overwriteData() {\n    localforage.setItem('data', dummyData).then(function (value) {\n      console.log('Data has been saved');\n    }).catch(function(err) {\n      console.log(err);\n    });\n}\nfunction removeInsertData() {\n  localforage.removeItem('data').then(function (value) {\n    console.log('Data has been removed');\n    localforage.setItem('data', dummyData).then(function (value) {\n      console.log('Data has been saved');\n    }).catch(function(err) {\n      console.log(err);\n    });\n  }).catch(function(err) {\n    console.log(err);\n  });\n}\n```. ",
    "YuriyPobezhymov": "Thank you for information!. ",
    "natashache": "@tofumatt I'm not using private mode.. @tofumatt I'm building a react.js app with redux. I use a module called redux persist to store the app state data, which uses localForage. The setup is really simple. Here's the code:\n```\nexport default class App extends Component {\n  constructor() {\n    super()\n    this.state = {\n      rehydrated: false\n    }\n  }\ncomponentWillMount(){\n    const persistor = persistStore(store, {storage: localForage, blacklist: ['setPlayer', 'setCurrentSection']}, () => {\n      this.setState({ rehydrated: true })\n    })\n  }\nrender() {\n    if(!this.state.rehydrated) {\n      return Loading...\n    }\n    return (\n      \n\n\n    )\n  }\n}\n```\nIt's working on chrome and desktop safari. It was working on mobile safari and then stopped working. The website is https://mysoundwise.com. \n. @tofumatt Thank you so much!. @thgreasi I haven't found a solution. The app is still not loading on my mobile safari. . ",
    "MaxInMoon": "Same problem on mac with Safari Version 11.0 (12604.1.38.1.7). ",
    "amerzad": "Same problem here, Safari Mobile iOS version 10.3.3. ",
    "slowlyCoder": "Same problem here, Safari Mobil iOS Version 11.0.1. ",
    "realgsong": "+1\nWith Chrome 63, Developer tool - Network Conditions - User agent as Safari - iPhone iOS 9, localForage.getItem() throws same error.. @thgreasi \nok. here is driver preference\nlocalForage.config({\n    driver: localForage.INDEXEDDB,\n    name: 'mydb',\n    storeName: 'mystore',\n    version: 3\n})\nlocalforage version is 1.5.5 and I'm running localforage in my angular application (angular package version is 5.1.0)\nPlease let me know if you need any more information. . @thgreasi  Providing fallback driver solved my issue. Thx thgreasi.. ",
    "adielhercules": "@thgreasi This worked to me! Thanks!. ",
    "KaiSchniggendiller": "yes, no problem, here is an example of what i`m trying to save:\nimport { Map } from 'immutable'\nconst myMap = Map({some: 'awesome', data: 'here'})\nlocalforage.setItem(1, myMap). it results in {\"some\":\"awesome\",\"data\":\"here\"}. i have to use fromJS() on the localforage.getItem() result to use it as an immutable Map() again.. ",
    "DaSchTour": "Yes that's right. There would be a list of types that could inside the storage.\nFor TypeScript 2.3 it would be possible to default generics to any. So if nothing is set any is assumed. It is also still possible to explicitly set this to any by using .iterate<any, any>\nI think for multiple types stored at least the output will be on type in many cases, so definitions will look like this .iterate<any, Type1> or .iterate<Type1|Type2|Type3, Type4>\nBut maybe it's also a good idea to keep the old definitions. I'll check if it behaves like I expect.. ",
    "janpio": "Ok, fair enough.\nWhat cost me so much time was that localForage actually reported the array was saved in its (broken) state, and only reading it back later returned the empty array []. So the returned value was actually not what was saved.. ",
    "blueelvis": "Oh okay. Will write a custom one then to generate the backup in JSON . Thanks!. @thgreasi - Thanks a lot for the suggestions! I will use this in the solution :). ",
    "lieuzhenghong": "Thank you for the quick response @tofumatt. Is there anything I can do to help implement this feature?. Thank you very much for your hard work!. @thgreasi, createInstance always overwrites the db even if a DB of the same name already exists. How do you work around that? After all, there is no getInstanceByName, so even if you have all the names of the instances, you cannot reference the correct LF instance.\nMy apologies if this is a stupid question.. @thgreasi I went to read the _initStorage method of indexeddb.js and agree that this shouldn't be happening. \nSorry, it is my mistake.. ",
    "bobOnGitHub": "Hi Guys,\nI gather reading this thread that createInstance opens a pre existing matching store if it exists. \nThe API (https://localforage.github.io/localForage/#multiple-instances-createinstance) doc doesn't say this (which is how I ended up here) - it'd be good if the doc did say this and had more info on it i.e.  which of the createInstance parameters will it use to identify an existing db.\n. @Nice2Work was that a reply to my comment ?. ",
    "Nice2Work": "Well, I think you underestimated the developer as he actually did what you were asking, it was just not really documented, but this works;\nvar store = localforage.createInstance({  // it creates  if not there, otherwise opening it.\n        name: \"notes\"\n      }); \nstore.setItem(note.id, note.content); // just save the content into the store\nI have tested this and it was working flawless. Great job !!. ",
    "lieut-data": "Assuming we have similar root causes, I traced the unhandled promise rejection warning to the following: https://github.com/localForage/localForage/blob/f66bb7baf21e4f0703b4e83ec7a0b39679c05af5/src/utils/executeTwoCallbacks.js#L1-L11\nThe unhandled promise rejection comes from the promise returned (but ignored) by invoking .then above. In my case, this path was reached by passing a callback to localforage.ready:\nlocalforage.ready(() => {\n    // ...\n}).catch(() => {\n    // ...\n});\nI can work around this by instead relying exclusively on the promise, sidestepping the bug in  executeTwoCallbacks above:\nlocalforage.ready().then(() => {\n    // ...\n}).catch(() => {\n    // ...\n});\nTo fix executeTwoCallbacks properly, I suspect one would want to preserve the promise chain back to all the callers of this utility method, returning the promise at each step vs. branching as above.. ",
    "951565664": "Is this a custom errorMessage? What does this error message mean? My monitoring system caught this error, but I don't know how to reproduce it.. I want to know when this problem will occur?. ",
    "AVVS": "Would love to see this sooner than later! \ud83d\udc4d . ",
    "bhaidar": "Hello @thgreasi \nIs this error related to this issue?\n````ERROR DOMException: Failed to execute 'put' on 'IDBObjectStore': function (number) {\n        var b = number % 10,\n            output = (toInt(number % 100 / 10) === 1) ? 'th' :...... } could not be cloned.\n    at http://localhost:4200/vendor.bundle.js:10127:29\n    at ZoneDelegate.webpackJsonp.../../../../zone.js/dist/zone.js.ZoneDelegate.invoke (http://localhost:4200/polyfills.bundle.js:7073:26)\n    at Object.onInvoke (http://localhost:4200/vendor.bundle.js:136945:33)\n    at ZoneDelegate.webpackJsonp.../../../../zone.js/dist/zone.js.ZoneDelegate.invoke (http://localhost:4200/polyfills.bundle.js:7072:32)\n    at Zone.webpackJsonp.../../../../zone.js/dist/zone.js.Zone.run (http://localhost:4200/polyfills.bundle.js:6833:43)\n    at http://localhost:4200/polyfills.bundle.js:7466:57\n    at ZoneDelegate.webpackJsonp.../../../../zone.js/dist/zone.js.ZoneDelegate.invokeTask (http://localhost:4200/polyfills.bundle.js:7106:31)\n    at Object.onInvokeTask (http://localhost:4200/vendor.bundle.js:136936:33)\n    at ZoneDelegate.webpackJsonp.../../../../zone.js/dist/zone.js.ZoneDelegate.invokeTask (http://localhost:4200/polyfills.bundle.js:7105:36)\n    at Zone.webpackJsonp.../../../../zone.js/dist/zone.js.Zone.runTask (http://localhost:4200/polyfills.bundle.js:6873:47)\n    at drainMicroTaskQueue (http://localhost:4200/polyfills.bundle.js:7299:35)\n    at XMLHttpRequest.ZoneTask.invoke (http://localhost:4200/polyfills.bundle.js:7172:25)`````. @thgreasi I understand. Thank you.\nActually, I am using this code, maybe the problem is from this.\nhttps://www.cloudspecialist.uk/2017/04/25/Caching-RxJS-Http-Observables-offline-in-an-Angular-2-application/. @thgreasi \nBut wait, isn't this the code in the library?\n````\nfunction setItem(key, value, callback) {\n    var self = this;\n// Cast the key to a string, as that's all we can set as a key.\nif (typeof key !== 'string') {\n    console.warn(key + ' used as a key, but it is not a string.');\n    key = String(key);\n}\n\nvar promise = new Promise$1(function (resolve, reject) {\n    var dbInfo;\n    self.ready().then(function () {\n        dbInfo = self._dbInfo;\n        if (toString.call(value) === '[object Blob]') {\n            return _checkBlobSupport(dbInfo.db).then(function (blobSupport) {\n                if (blobSupport) {\n                    return value;\n                }\n                return _encodeBlob(value);\n            });\n        }\n        return value;\n    }).then(function (value) {\n        var transaction = dbInfo.db.transaction(dbInfo.storeName, 'readwrite');\n        var store = transaction.objectStore(dbInfo.storeName);\n        var req = store.put(value, key);\n\n        // The reason we don't _save_ null is because IE 10 does\n        // not support saving the `null` type in IndexedDB. How\n        // ironic, given the bug below!\n        // See: https://github.com/mozilla/localForage/issues/161\n        if (value === null) {\n            value = undefined;\n        }\n\n        transaction.oncomplete = function () {\n            // Cast to undefined so the value passed to\n            // callback/promise is the same as what one would get out\n            // of `getItem()` later. This leads to some weirdness\n            // (setItem('foo', undefined) will return `null`), but\n            // it's not my fault localStorage is our baseline and that\n            // it's weird.\n            if (value === undefined) {\n                value = null;\n            }\n\n            resolve(value);\n        };\n        transaction.onabort = transaction.onerror = function () {\n            var err = req.error ? req.error : req.transaction.error;\n            reject(err);\n        };\n    })[\"catch\"](reject);\n});\n\nexecuteCallback(promise, callback);\nreturn promise;\n\n}\n````\nThe exception is thrown here:\nvar req = store.put(value, key);. @thgreasi \nWhat message specifically? . Isn't the one I posted above? Anything else I should look at?. @thgreasi It seems Im not able to catch the exception. Can you please guide me where shall i put the breakpoint to capture that exception?. @thgreasi \nNo error is thrown there!\nI got this from the browser developer tool. I dunno if they help:\n\n. By the way, storing pure string works fine without any errors.\nWhat I am saving is an object which has a set of properties of Arrays. Is that a problem?. Hi @thgreasi again.\nI am doing some tests around. It seems one of the properties to this object I am receiving from server, I have added recently is causing the problem. The property is an array of few objects, each object has a total of 14 properties. Do you think this is the reason behind this error? If I remove this property from server, all works well. I try to minimize the number of properties returned on that array of objects and also it works. Is there a limit on the number of properties per object?. Hello @thgreasi  I will start a new issue. sorry for that.. ",
    "orlyapps": "Only with the combination of ionic 2+. I don't use their wrapper (ionic-storage) - just plain 1.5 localForage. They include a polyfill for the fetch api (see screenshots) \n\n\nI have tested iOS 10.2, 11 and the latest Safari on the mac.\nYour CodePen Example don't work either because of a polyfill \n\n\n. Without ionic or codepen and just plain LocalForage - everything is fine. \nIts just the problem with all these polyfills \ud83d\ude04  . - Without my change IndexedDB support ist not detected on iOS 10.2+ / Safari with polyfill\n- \u00b4fetch.toString().indexOf('[native code') !== -1;\u00b4 is false in every Safari and every iOS (with polyfill)\n- Yes, ionic runs the polyfill always, even if fetch is available (And here is the main Problem)\nBut i think the indexedDB support check should not rely on the Fetch API which many frameworks polyfill. \n. ",
    "salbahra": "I'm running into the same issue with an Ionic 3 application. Safari 11 is falling back to WebSQL even though full IndexedDB support is present. Digging through the code, I find the issue is the fetch check which appears to be poly filled by Ionic. I am not concerned with the fact that this method is using the poly filled method. My concern is I cannot access the IndexedDB because of it.\nCan we at least add a way to disable this check based on the configuration? If you would be willing to review it I could submit a PR.. I am actually using @ionic/storage and am not directly using localForage. I will see what I can do with the code in the link you suggested but I do understand the concept.\nThe value of fetch.toString() is: > fetch.toString()\n< \"function (){var e=t.apply(this,arguments);if(e instanceof x)return e;var n=e.constructor;return n[R]||l(n),e}\"\nIt's the same in all browsers as Ionic seems to be polyfilling it.\nThank you!. Thanks for pointing that out! I have decided to post an issue on the Ionic repository and will proceed from there.\nThank you!. ",
    "tricinel": "Still need help with this? Would love to tackle it.... Awesome. Will get a PR in this week.. Right, so I've gone through the src files and changed to template strings. I thought they'd be more, but there weren't that many instances actually.\nHaving gone through the Contributing.md file, there are some mentions of .jshint and .jscs - but I noticed you switched to eslint.\nAlso, while running npm test...Everything passes until I get to the actual mocha tests, where it gets stuck...And opening the browser with that connect web server that was started gives me errors in the console - although I should mention the exact same errors are with a clean master.\nSo...I'm a bit stuck on this one... :). Alright, cool. I just did...willing to make it work properly ;). Ah, cool. I can look into common-tags. I actually never worked with it before.. Humm...so maybe I don't know how that oneLine things works.... Yeah, that's the one I used...https://github.com/tricinel/localForage/blob/feature/es6-template-strings/src/drivers/indexeddb.js#L8. How keen are you on using that oneLine thing? I've reverted it in the mean time, and will need to rebase master.... @tofumatt hmm, for some reason it was breaking the build...The tests weren't passing so I just assumed I was doing it wrong.. Hey @thgreasi, thanks for taking a look. Quick question about squashing (forgive me, but this is my first time doing it). My workflow was:\n\ngit rebase -i HEAD~3\nsquashed the two oneLine commits into the previous one\nhad to do git push origin +feature/es6-template-strings\n\nOf course, now my branch is behind master, and rebase will show merge conflicts for the two dist/.min files. So...is it better to just start over? Close this one, start a new branch that's up to date with master, cherry pick the right commits from the old (this) feature branch and then submit a PR like that? Sounds like the cleanest option at the moment, but other ideas are welcome.. @thgreasi, alright that should be it I guess. Thanks for the help!. Hm, yes, I know. The tests were failing, but I couldn't figure out why...That's why I reverted it. The fact that it was dumping 50% more code in nopromise - I hadn't even checked, but that's equally bad.\nAnything I can do to help?. \ud83d\udc4d . \ud83d\udc4d . ",
    "kakadiadarpan": "@tofumatt No, I'm not using any custom driver. In my previous comment, I logged the config that I'm using.. @thgreasi Sure, I'll do that.. @thgreasi Yes, #751 fixes this issue. Thanks!. Wow! That was fast. :clap:. ",
    "ssuess": "Hi, thanks for the reply. To answer your questions:\n1. No, this happens regardless of version, although I did also update to 1.5.2 to see if that fixed it.\n2. Not using custom driver\n3. Not setting driver order\n4. Not setting store sizes\n5. Not using createInstance()\n6. The results of localforage.driver on both working and non working systems is asyncstroage\nHere are the really odd things to me:\n1. SOME (but not all) items get stored and then disappear, and it is always the same keys that disappear, the ones I am using in an axios call that contain values for username and bearer token\n2. I would expect this to be a problem somewhere in my code, except that this only happens on Android 5.x and below. All later versions are fine, Mac and Windows and iOS are all fine and working as expected. They keep the stored values I have set, all of them.. no, one is just a username string, and the other is a JWT token, also a string. And the really bizarre thing is that they had to exist for a short time, because the other data that remains in localforage (arrays and strings btw) could not have been retrieved via the axios call unless the token was present. it is just that the token and username keys completely disappear before making the next call to the REST API. It is like there is a timer set on them to self destruct/erase after a few seconds. (but again, this ONLY happens in Android 5.x and below). Ok, I am still not entirely sure what is causing this, but I think now the bug is  two part, one related to Android 5 redirecting me, and one related to localforage.clear() not fully executing.\n\nFor some reason, the code in Android 5 and below was forcing a return to the login page immediately after login. \non logout (and also on load of login page), I had a localforage.clear() command run, BUT because it was not actually clearing everything from localforage, I was confused.\nIf I remove my localforage.clear() commands, all my keys are still present. (even though I am still mysteriously being returned to the login page in Android 5 and below)\n\nso I think perhaps there is a bug in localforage.clear (not clearing all keys sometimes), but to be clear (pun intended) if I call if directly, even in Android 5, it WILL clear all keys. Just not when Android is redirecting me back to login...\n. Ok, I have finally solved this, at least to my satisfaction. What was happening is that I was testing for the presence of my token on my dashboard page (that was forwarded from the login page) and it was not yet set (promise had not completed, race condition), so I moved my forward to the callback (.then()) of my setItem for the token. I can only guess as to why older devices were the only ones with this problem, perhaps the code/emulated hardware is faster on newer ones, so the promise always completed before the page forward, and that is why I never saw it on anything newer. Anyway, thanks for helping me troubleshoot this.. ",
    "michaelgeorgeattard": "Thanks @tofumatt. I was wondering if 2.0.0 would be a better release version because of how defineDriver is set up to expect the configuration object; and any addition to this configuration is a breaking change.. ",
    "chetmurphy": "What about exporting the typescript interfaces (especially LocalForage)? With 1.5.5 I see no way to store the value returned from createInstance and still have type checking in typescript.\nNote: It does work with a variable, but it does not work with a state member in React. A state member needs the type information.. What does dropInstance do? I did not even find a reference to it in the code. . \nThanks, that works.\n--Chet\n\nFrom: Thodoris Greasidis notifications@github.com\nSent: Wednesday, November 29, 2017 11:19:04 PM\nTo: localForage/localForage\nCc: chetmurphy; Mention\nSubject: Re: [localForage/localForage] 1.5.4 typings broke signature (#762)\n@chetmurphyhttps://nam03.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fchetmurphy&data=02%7C01%7Cchetmurphy%40hotmail.com%7Cd0126411bdb5488565a508d537c2a3f6%7C84df9e7fe9f640afb435aaaaaaaaaaaa%7C1%7C0%7C636476231462756230&sdata=ns4Y485Unfr1EcqPpQobCElrCZj7Eqi3%2FJdWoMSZ%2FSA%3D&reserved=0 that's a bit difficult with the current export methods that we are using but suggestions & PRs are welcome. I think that for now you should be able to use something like\ntype Localforage = typeof localforage;\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHubhttps://nam03.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2FlocalForage%2FlocalForage%2Fissues%2F762%23issuecomment-348103645&data=02%7C01%7Cchetmurphy%40hotmail.com%7Cd0126411bdb5488565a508d537c2a3f6%7C84df9e7fe9f640afb435aaaaaaaaaaaa%7C1%7C0%7C636476231462756230&sdata=XH%2FRg6Q7f%2Fb4T%2BtwZohUDVYMr5E7xO4xJoKDxXNQEo8%3D&reserved=0, or mute the threadhttps://nam03.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fnotifications%2Funsubscribe-auth%2FAJrbVpDFNIXGZCpxlTcMRbvEQ35dYzXSks5s7lbogaJpZM4QvBrM&data=02%7C01%7Cchetmurphy%40hotmail.com%7Cd0126411bdb5488565a508d537c2a3f6%7C84df9e7fe9f640afb435aaaaaaaaaaaa%7C1%7C0%7C636476231462756230&sdata=6oPGNwnlxxJyweSKhPZU1S6ZPUIbJLnPLVx7Z6zdkMI%3D&reserved=0.\n. The pull request works for my case. LocalForage type is available and does not generate any type error.\nThanks.\nFrom: Thodoris Greasidisnotifications@github.com\nSent: Saturday, December 9, 2017 1:32 AM\nTo: localForage/localForagelocalForage@noreply.github.com\nCc: chetmurphychetmurphy@hotmail.com; Mentionmention@noreply.github.com\nSubject: Re: [localForage/localForage] Export typings (#767)\n@ponday-devhttps://nam02.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fponday-dev&data=02%7C01%7C%7C1abc5a25ff15449c819208d53ee7bcd5%7C84df9e7fe9f640afb435aaaaaaaaaaaa%7C1%7C0%7C636484087375171451&sdata=nMtuwzIspVvVlI11ZbmXLTuCmL5UuttwqjrdyDyrBTk%3D&reserved=0, @chetmurphyhttps://nam02.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fchetmurphy&data=02%7C01%7C%7C1abc5a25ff15449c819208d53ee7bcd5%7C84df9e7fe9f640afb435aaaaaaaaaaaa%7C1%7C0%7C636484087375171451&sdata=rVYhNAqQwFvlShHbdHpv7haYruUyJLtCVhv53E%2F%2F1cE%3D&reserved=0 , @alan-agius4https://nam02.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Falan-agius4&data=02%7C01%7C%7C1abc5a25ff15449c819208d53ee7bcd5%7C84df9e7fe9f640afb435aaaaaaaaaaaa%7C1%7C0%7C636484087375171451&sdata=oI0CP18Htg%2B8UTGRlyL6ibu35%2Fo2eYCBZCs1P1b0O4E%3D&reserved=0, @michaelgeorgeattardhttps://nam02.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fmichaelgeorgeattard&data=02%7C01%7C%7C1abc5a25ff15449c819208d53ee7bcd5%7C84df9e7fe9f640afb435aaaaaaaaaaaa%7C1%7C0%7C636484087375171451&sdata=ZCoRp8JxP9w57m2%2BQWFDcG6H7jWTFPRy3FDfF4RbwM4%3D&reserved=0 Can I get some feedback on this?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHubhttps://nam02.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2FlocalForage%2FlocalForage%2Fpull%2F767%23issuecomment-350437969&data=02%7C01%7C%7C1abc5a25ff15449c819208d53ee7bcd5%7C84df9e7fe9f640afb435aaaaaaaaaaaa%7C1%7C0%7C636484087375171451&sdata=5HBimZ9U9xWX09lgwQJcN%2FclxXfYPOTeNYQa7ssbxOU%3D&reserved=0, or mute the threadhttps://nam02.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fnotifications%2Funsubscribe-auth%2FAJrbVvAQ327ov2gGhwyI-dseAC9bfziNks5s-lOggaJpZM4Q8BWf&data=02%7C01%7C%7C1abc5a25ff15449c819208d53ee7bcd5%7C84df9e7fe9f640afb435aaaaaaaaaaaa%7C1%7C0%7C636484087375171451&sdata=QmLmvGKk9wtb9psjL%2B86InNzQnC6rtEBOCbY%2FmGPv1Y%3D&reserved=0.\n. ",
    "alan-agius4": "Check the docs here:\nhttps://github.com/localForage/localForage/blob/master/docs/api.md\nOn Thu, 30 Nov 2017 at 05:21, chetmurphy notifications@github.com wrote:\n\nWhat does dropInstance do? I did not even find a reference to it in the\ncode.\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/localForage/localForage/issues/762#issuecomment-348078642,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AQv-WsyFt5v2ooC2FAaFj92mcIBRJWF3ks5s7i05gaJpZM4QvBrM\n.\n. \n",
    "twolfson": "I should also mention that iOS 10 mobile Chrome seems to also lack fetch support whereas iOS 11 mobile Chrome seems to have it. We probably could copy/paste/modify the isIndexedDBValid code as we've done in the fork. The issue is pedantically we the validation code should only state whether or not the driver can be used; not whether or not it will be more performant than others (which is the reason for the Safari/fetch) lines\nFrom what I can tell, this code was mostly introduced so there's an automatic fallback chain for supported drivers to optimize performance. I was wondering if that code could be relocated elsewhere (e.g. _shouldUse in addition to _supports) where _getSupportedDrivers() can first reject any non _shouldUse but then fallback to _supports if there were no drivers found. Ah, okay. Will close then due to actually buggy code for the general use case \ud83d\udc4d Thanks y'all. ",
    "ponday-dev": "Oh, are you already rewriting it ? Sorry, I don't know that.\nI'm looking forward to new version that will be released in this weekend !\nThank you for your reply.. ",
    "afayp": "OK! Thanks for your response!. ",
    "fifafu": "Sorry should have done that before reporting.\nIt turns out that Angular 5 (or something Angular uses) is monkey patching fetch to intercept it, and thus breaks localforage.\nYou can test it e.g. on https://angular.io:\n```\n\nconsole.log(fetch.toString())\n[Log] function (){var t=e.apply(this,arguments);if(t instanceof E)return t;var n=t.constructor;return n[Z]||p(n),t}\n```\n\nIt works as expected on non Angular apps.\nHowever I think this will happen to many Angular users, thus it probably would be good to add a workaround.. Actually the patching is done by Zone.js (which is used by Angular).\nSee https://github.com/angular/zone.js/blob/326a07fb9095e4a87ff7561cb45fe1d4917c2174/lib/common/promise.ts#L417. ",
    "lfairy": "Is the IndexedDB support still buggy on iOS Safari 10.0 through 10.2, or do we just not have an easy way of detecting them?. ",
    "hdpinto": "I gathered that the reason it fails on IE is because it has different \"Internet Security Zones\" for iframes and tabs, but from what I can tell, storage itself, not just retrieval, fails on Safari because of a setting that is turned on by default that blocks \"remote websites\" from saving data on the user's computer, which includes iframes.\nSee https://stackoverflow.com/questions/38584273/local-storage-cross-domain-safari-disables-it-by-default\nThis is all I have been able to find on this issue. Either way, might be a good idea to document this use case and that it doesn't work, if it's not possible to work around it.. ",
    "finscn": "Where can I find npm run build script ? . I don't have any knowledge about grunt/webpack/Babel  ... So sad...\nBut I know learning is my duty .\nThanks.\n. ",
    "strix25": "If I put it in local json file it is 126MB :\\ that's too much for localforage or ? . ",
    "cherewaty": "A little more context about the problem I'm trying to solve, that led me to this PR:\nI have an app that relies on both localforage and recast.\nThe version of es3ify requested by the version of lie's package.json requested by localforage includes a dependency on esprima-fb@~3001.0001.0000-dev-harmony-fb.\nrecast includes a dependency on esprima-fb@~3001.1.0-dev-harmony-fb.\nWhen running yarn install, Yarn throws a warning that those two versions of esprima-fb are \"trying to unpack in the same destination,\" because the decimals reduce to the same thing. Yarn says \"This could result in a non deterministic behavior, skipping.\"\nUpgrading lie should fix that warning, since the zero-padded version string will be gone.. ",
    "rodrigues": "came to this repo to find out more about the issue, nice to see there's a fix on the way, thanks @cherewaty \ud83d\udc4f\ud83c\udffc\njust bringing a bit more info on it: when yarn check runs, two issues are related:\nwarning Pattern [\"esprima-fb@~3001.0001.0000-dev-harmony-fb\"] is trying to unpack in the same \ndestination \"\u2026/Library/Caches/Yarn/v1/npm-esprima-fb-3001.1.0-dev-harmony-fb-b77d37abcd38ea0b77426bb8bc2922ce6b426411\" as pattern [\"esprima-fb@~3001.1.0-dev-harmony-fb\"]. This could result in a non deterministic behavior, skipping.\nerror \"esprima-fb\" is wrong version: expected \"3001.1.0-dev-harmony-fb\", got null\nI always see the warning when running yarn install also. ",
    "giuseppeg": "@thgreasi / @cherewaty / @tofumatt Would it be possible to release a patch version? The package is not usable with yarn because of this issue.. @tofumatt works like a charm, thank you!. ",
    "salomvary": "\nI never thought anyone would be using both callbacks and promises in their code.\n\nWell, the contributors of localForage did use them both for example, see the test linked above:) Also don't underestimate what users of a repo starred 11k times will do;)\n\nif the fix for this wouldn't be a breaking change it seems fine to implement for now.\n\nWhether this is a breaking change depends on our definition of a breaking change. The promise behavior in case of failing callbacks is not documented and I'd bet also no tests verify the swallowing of exceptions. It would also not require API syntax changes.\nOn the other hand it might break someone's code if they relied on the current (buggy in my opinion) behavior.\n  . It might be related that \"asyncStorage driver dropInstance / drops an other instance without affecting the rest\" sometimes times out on Firefox and almost always in iOS Safari when using /test/test.main.html directly from the browser. Even if it does not time out, tends to be very slow.\n\n. A quick fix might just be replacing toString.call(value) === '[object Blob]' checks with value instanceof Blob.... Btw the documentation says \"You can store the following types of JavaScript objects:  [...]  Blob\" and a File is indeed a Blob. . I see. Then this is a documentation issue, I expected the API docs to reflect the latest release while it is actually in sync with the latest commit on master.  . Or maybe just leave a warning about this fact on the documentation pages.  One can still access API docs for a specific version by going to the given release/tag... ",
    "Shingyx": "I think using both callbacks and promises is a valid use case when using the iterate function. I'm running into this issue now for a simple function which returns all values which meets some criteria.\nSee this example:\n```\nimport * as localforage from 'localforage';\nconst instance = localforage.createInstance({\n    name: 'test',\n});\n// The desired getWhere function\nasync function getWhere1(predicate) {\n    const results = [];\n    await instance.iterate((value) => {\n        if (predicate(value)) {\n            results.push(value);\n        }\n    });\n    return results;\n}\n// The worked-around getWhere function\nasync function getWhere2(predicate) {\n    const results = [];\n    const err = await instance.iterate((value) => {\n        try {\n            if (predicate(value)) {\n                results.push(value);\n            }\n        } catch (e) {\n            return e;\n        }\n    });\n    if (err) {\n        throw err;\n    }\n    return results;\n}\nasync function test() {\n    // This should reject, but it doesn't\n    await getWhere1((value) => {\n        throw new Error('Uh oh!');\n    });\n// But this does\nawait getWhere2((value) => {\n    throw new Error('Uh oh!');\n});\n\n}\n```\nTo have the getWhere function reject when the predicate rejects, I had to change the function to have a workaround which stores the error then throws it later.. @thgreasi I raised https://github.com/localForage/localForage/issues/784 as you requested. Thanks for looking into this.. The current solution will retain the transactions in memory forever and never free them. This is because when promise.then(unref, unref); is executed, unref is still undefined since the callback hasn't executed yet.\nTo get around this, you could move the promise.then(unref, unref); inside the callback, or wrap the unref calls inside another function, e.g. something like:\npromise.then(\n  () => unref && unref(),\n  () => unref && unref()\n);. Typo here. \"onabord\" should be \"onabort\".. Technically very unlikely to happen, but it would be safer to % Number.MAX_SAFE_INTEGER the _refTransactionId for applications which run for a long time.. Might be better to have the following since jshint doesn't like unref && unref() (jshint is enabled on https://github.com/localForage/localForage-removeItems).\nif (unref) {\n  unref();\n}. ",
    "ctf0": "when using \nimport localforage from 'localforage'; \nor window.localforage = require('localforage')\nERROR in ./node_modules/localforage/dist/localforage.js\nModule build failed: ReferenceError: Unknown plugin \"add-module-exports\" specified in \"/testing/node_modules/localforage/.babelrc\" at 0, attempted to resolve relative to \"/testing/node_modules/localforage\"\n    at /testing/node_modules/babel-core/lib/transformation/file/options/option-manager.js:180:17\n    at Array.map (<anonymous>)\n    at Function.normalisePlugins (/testing/node_modules/babel-core/lib/transformation/file/options/option-manager.js:158:20)\n    at OptionManager.mergeOptions (/testing/node_modules/babel-core/lib/transformation/file/options/option-manager.js:234:36)\n    at OptionManager.init (/testing/node_modules/babel-core/lib/transformation/file/options/option-manager.js:368:12)\n    at File.initOptions (/testing/node_modules/babel-core/lib/transformation/file/index.js:212:65)\n    at new File (/testing/node_modules/babel-core/lib/transformation/file/index.js:135:24)\n    at Pipeline.transform (/testing/node_modules/babel-core/lib/transformation/pipeline.js:46:16)\n    at transpile (/testing/node_modules/babel-loader/lib/index.js:50:20)\n    at Object.module.exports (/testing/node_modules/babel-loader/lib/index.js:175:20)\ninstalling add-module-exports preset will lead into another error afterwards.\n  . actually the .babelrc is inside the localforage folder\n\nhttps://github.com/localForage/localForage/blob/master/.babelrc\n\nnot mine\n  . found the problem, i've this in webpack config\njs\nmodule: {\n        rules: [\n            {\n                test: /\\.jsx?$/,\n                use: {\n                    loader: 'babel-loader',\n                    options: {\n                        presets: ['env', 'stage-3']\n                    }\n                }\n            }\n        ]\n    }\ncan we get around that with lf ?. this is just a preset same as the one LF use, that tells babel how to compile the es6 stuff to plain js\nits not related to LF, but i need it for another package to work :cry: . ",
    "SteveBrooker": "Matthew\nHaving deleted the database I cannot reproduce, until it happens again.\nIs there a programatic way of deleting the database?\nIf not could I achieve this using different instances?\nSteve Brooker\ne:  steve.brooker@intbox.co.uk\nm: +44 (0)7790 491197\np:  +44 (0)1980 505262\n\nOn 7 Feb 2018, at 12:31, Matthew Riley MacPherson notifications@github.com wrote:\nHmm, localForage.clear() should remove all keys in your database. Is there any chance you could provide a proof-of-concept/reproducible app we could test this with?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub https://github.com/localForage/localForage/issues/790#issuecomment-363754675, or mute the thread https://github.com/notifications/unsubscribe-auth/AMcarJHuA_mbDR6ljO65IOUw0bYyydO4ks5tSZeQgaJpZM4R8oEe.\n\n\n. If/when it happens again I will, however since deleting the database the code is running just fine. I would still like to know if I can programatically take the same action as Chrome Dev Tools Delete IndexedDB Database?. Thanks. \nI just tried a global replace of \"localStorage\" with \"localStore\" in the minified localForage.js which of course will be undefined but as this is tested for already the code still works fine.\nThis change effectively supresses the chrome app error message.. Unfortunately excluding localStorage using your additional line of code, does not suppress the chrome app error message. I have explored the idea of paralleling up each localForage save with a write to a file in the IOS App Documents Folder with the hope that this is less likely to be wiped than the Caches Folder.\nFollowing each localForage setItem with a key-value-pair I pass a request to the objective-C IOS app code to create a text file in a sub folder created with the App Documents Folder, with the name 'key'.txt and the contents set to value.\nFollowing each localForage removeItem, I pass a request to the objective-C IOS app code to delete the corresponding text file 'key'.txt.\nFollowing each localForage clearAll, I delete the entire sub folder created above.\nNow when the app starts up and discovers an empty localForage database, I pass a request to the objective-C IOS app code to see if the sub-folder with key-items is there or not.\nIf it is not, then this is a fresh install of the app and continue as normal for such a case.\nif it is, then this is a case of localForage having been deleted. \nIn such case, I request the objective-C IOS app code to return the set of keys, by examining the contents of the folder created above and stripping of the .txt bit and in the case of the IOS Simulator discarding the DS_Store file.\nOne by one I then request the contents of each file and load them back into the previously empty localForage database and when this has been done I can continue as if it had not been deleted.\nI found that it is necessary to use a zero duration timeout in the javascript before requesting each value to prevent call stack exceeded errors when restoring large databases.\nThis approach seems to work and I can test this any time by using the Safari Developer Resources tab actions to clear the database and .then manually restarting the app. Using the same tab you can watch the localForage database being repopulated. \nThe following notes are for anyone who wants to try this using Objective C in XCode 10.1\n1. Use NSHomeDirectory() and stringByAppendingPathComponent @\"Documents\" to get the Documents folder.\n2. Continue to use stringByAppendingPathComponent to create a sub folder path\n3. Use fileExistsAtPath to check whether this sub folder exists already\n4. Use createDirectoryAtPath if it does not.\n5. When saving or changing items in indexedDB use the stringByAppendingPathComponent to create the key file name e.g. Base.txt for a key of 'Base'.\n6. Use fileHandleforWritingAtPath to get the fileHandle for a file\n7. if fileHandle does not exist then need to create it using writeToFile to create the 'key' file\n8. if fileHandle does exist then truncateFileAtOffseyt:0 (important) to clear it and then use writeData to create a new version of the 'key' file.\n9. In both of the above specify UTF8 encoding\n10. When removing items from indexedDB do the same to get the key file path and then use removeItemAtPath/\n11. The device can be cleared by removing the entire sub folder using removeItemAtPath.\n12. The restore process uses contentsOfDirectoryAtPath to read the set of keys in the sub folder.\n13. The restore process for each item uses stringWithContentsOfFile to read data files and return the contents enclosed in quotes using a call to stringByEvaluatingJavaScriptFromString. ",
    "domenic": "Hey folks, this has madea lot of progress over the last year! It's now living at https://github.com/WICG/kv-storage; there's also an introductory article on the experimental Chrome implementation at https://developers.google.com/web/updates/2019/03/kv-storage.\nThings we could especially use the localForage team and community's thoughts on are around some of the open issues. (Or even closed ones.) Things like:\n\nShould the default storage area be the default of the module?\nIs an atomic compare-and-swap operation you've noticed people missing in localForage?\nIs restricting the allowed key types a good idea?\n\nThanks in advance!. ",
    "CTassisF": "It seems to be working now.. ",
    "xmoyKing": "That will be really good for all developers and users. \nExpecting the new system! . It's really great! Don't worry, your translation is correct. :) \ud83d\udc4d. Is this the logo of localForage?\nscreenshot blow:\n\nIf so, I will add this  picture being the logo and icon of localForage on main page.. @thgreasi I see, thx, \nThe basic version logo for localForage  now is on the main page of docschina.org\n\n. > @xmoyKing https://localforage.docschina.org is down, could you please check?\nsorry, reply so late. and this link is normally accessable now.. ",
    "AdamStone": "Not sure about the 'correct' behavior, maybe it's situational, but in my case I think I would want to leave it open and reject the drop request if the db is in use. Is there a way to check that the db is not in use before calling dropInstance? \nI noticed the docs for readyState mention \"Every request starts in the pending state. The state changes to done when the request completes successfully or when an error occurs.\" So it sounds like the onerror case should work as-is and only the onblocked case would have this problem. For that I would propose to just reject without attempting to close the db. I can make a PR if you want to go with that, otherwise I should probably leave it to someone else to look into implementing the more complex behavior as I'm not very familiar with the indexedDB API. \nOne other thing I noticed, the e argument of the handler is actually an Event rather than an Error object, so reject warns that it should only be called with an Error. In the case of onerror the error should be accessible from req.error, but for the blocked handler there is no available Error object as far as I can tell.. I made a PR with this change.. @thgreasi Just checking back, any further thoughts on this?. I updated the PR based on what I found in #821.. Sorry, I sort of gave up on this after continuing to run into errors. Some additional changes may be necessary to accommodate this situation correctly. I tried a couple more attempted fixes, but I think I was still getting errors and at that point I opted to just avoid using dropInstance. \nIf you're hitting this problem you could try this change and see if it works for you, maybe the errors I hit were just due to other problems with my design.. @thgreasi @tofumatt I manually tested this a bit and it seems it doesn't work the way I expected. I had taken the blocked event to mean that the request would not proceed, but in fact it remains pending until the other tab's connection is closed, at which point the onsuccess handler fires and tries to resolve the promise that was already rejected in onblocked. So the database is eventually dropped, but in the meantime it hangs. This discussion seems useful to figure out a better approach here. . Case 3 in the link above was the behavior I was looking for, but unfortunately the given example for how to accomplish it does not actually work. In the case of a deleteDatabase request, request.transaction is undefined so request.transaction.abort() doesn't work. I actually don't see any way to abort a deleteDatabase request once created.. My next thought was to try to check whether the database was in use before trying to drop it. So far I couldn't find a way to do this either. Maybe I'm missing something, but it looks like the only tool the API offers to deal with this is the onversionchange event (on delete the version appears to change to null). That would enable one tab to be notified that another is deleting the database so it can close its own connection to it. But if that tab still needs the database, it would seem the only option is to copy the whole thing to a new instance before closing the connection. And if the version change event is ignored, subsequent writes silently fail in the sense that they'll be wiped out as soon as the tab is closed.. I'd like to fix it somehow, as the current behavior throws an error and the promise hangs. I don't see a clear solution though. It seems wrong to reject on blocked if eventually the request will finish, and it seems wrong to resolve on blocked since the request is still pending. If neither is done, the promise will hang until one of the connections is closed. It seems unbelievable that there would be no way to cancel a blocked delete request while it's still pending, but so far I'm just not seeing it.. @thgreasi I updated the PR based on what I described here, this seems to resolve that issue and prevents the delete request from being blocked as well. Just in case, I left a warning in the onblocked handler. It still leaves the possibility of having a database deleted by one session out from under another that's still using it, as I still couldn't find a way to abort a delete request once made, but that seems better than having the session continue to write to a database that will be deleted later after the connection closes. \nIs there an existing test suite for indexedDB where I could try to add tests for this?. For what it's worth, I'm no longer confident this is a good change, at least in isolation. Although it seems to solve the immediate problem of the hanging request, I continued to run into errors when version changes affected a DB that was in use in multiple tabs (maybe the version warning is not really innocuous). In my own application I ended up just using a different design to avoid these kinds of collisions (creating a separate DB for each namespace and using only the default object store, so the version remains stable when multiple tabs use that namespace, and just using store.clear() instead of dropInstance), because I couldn't get it working reliably otherwise. . I updated the PR started for #800 with this change.. ",
    "Sediug": "Do we know anything new about this? Something similar it's happening to me and I think it's gonna get solved with the PR.. ",
    "abelardolg": "\n\n. According to the documentation...\n\n```\n<!doctype html>\n\n\n\nSGE 2018 - Lavadero BackOffice\n\n\n\n\nconsole.log('localforage is: ', localforage);\n\n\n\n\n\n\n\n\n\n```. ",
    "lvendramini": "Request URL: http://127.0.0.1:8887/scripts/localforage.js\nReferrer Policy: no-referrer-when-downgrade\nProvisional headers are shown\nReferer: http://127.0.0.1:8887/\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/65.0.3325.181 Safari/537.36\nNothing in the response. The FetchEvent for \"http://127.0.0.1:8887/scripts/localforage.js\" resulted in a network error response: the promise was rejected.\nPromise.catch (async)\n(anonymous) @ service-worker.js:73\nservice. Fixed it...in my service worker I didn't include localforage.js.  Thanks!. ",
    "brettz9": "While I'd expect that that package (and any consumers) should be able to work with module, taking into account as they should, of the same compiling requirements of localForage (unless they are, less efficiently, targeting one of your pre-made bundles), for those not wishing to go to the trouble, this should, I believe, be addressable for such present webpack consumers in the meantime by simply adding mainFields without module to resolve:\nhttps://webpack.js.org/configuration/resolve/#resolve-mainfields\njson\n\"mainFields\": [\"browser\", \"main\"]\ne.g., for addons-frontend, if this webpack file is a suitable one, one would add the above property within this portion: https://github.com/mozilla/addons-frontend/blob/b5c242eb7056fa1cc8c361801ee7b043699b8714/webpack.prod.config.babel.js#L75-L84. Sure...do what you need...\nUsers of Webpack (or those just using Rollup alone) must properly instruct it on how to do the rolling up. The idea of module is to let consuming projects bundle optimally, being aware ideally of all original sources, with the output becoming a single file of AMD, or even an ES6 module (but with npm paths resolved and/or becoming a single file).\nSo it would seem to me that projects having problems might not be using Webpack with Rollup properly in the first place (unless there is a bug in Webpack or its plugins) and might need instruction in how to set things up if this is the case. I tend to use Rollup alone myself, so I'd hope someone more familiar with Webpack could consider adding documentation to this project on how it should be consumed with Rollup for optimal effect (or use the reference I supplied to quickly opt out of the problems and benefits of using the module).. Could the template issue relate to not running babel during or at the right part of the rollup routine?. Awesome--thanks for such a quick turn-around and for the release!. ",
    "ReasonableDeveloper": "I'm running into the same problem trying to drop a database from my main Client with a service-worker also interacting with the localforage. Any chances of getting this into master @tofumatt @thgreasi? . ",
    "koriwi": "same here. ",
    "loopmode": "1.7.1 does fix it. Thanks!. ",
    "tsekityam": "@xmoyKing https://localforage.docschina.org is down, could you please check?. ",
    "buu700": "Awesome. I'll test that out some time over the next few days then.. Sounds good, thanks. I'll try to find some time to look more into this and let you know as soon as I find out more.. ",
    "CrimsonTideDevelopment": "To give an update on this - we raised a bug with Chromium who, wonderfully, have revised this change and are estimating it will be rolled out in M67 - link to the bug here: https://bugs.chromium.org/p/chromium/issues/detail?id=838816. ",
    "midhunadarvin": "I am also getting this issue on some mobile devices only. Most of them are older devices.. ",
    "gonzaloserrano": "I noticed that the exception wasn't catched because I had a setItem() call without await. So I ended up doing setItem(...).catch((error) => {\u00a0// handling error.code 22 }).. ",
    "Hanzofm": "Hi, regarding to first issue, it is solved, thanks.\nOn second issue my 'architecture' is:\nA provider to manage localForage stuff  (wich is defined as a provider in app.module.ts) like this:\n```\nimport localForage from 'localforage';\n@Injectable()\nexport class LocalStorageService {\nconstructor() {\n  }\nsetSomeData(data: string) {\n    return localForage.setItem('someData', data);\n  }\nsetSomeData2(data: string) {\n    return localForage.setItem('someData2', data);\n  }\ngetSomeData() {\n    return localForage.getItem('someData');\n  }\ngetSomeData2() {\n    return localForage.getItem('someData2');\n  }\nprintDriver() {\n    console.log(localForage.driver())\n  }\n```\nI don't configure nothing related to the driver in my app and if I print the driver when device is ready with:\nthis.localStorageService.printDriver()\nIt prints:\nasyncStorage\nIn your docs says that if not specifies any drivers:\n```\n\"By default, localForage selects backend drivers for the datastore in this order:\nIndexedDB\nWebSQL\nlocalStorage\"\n```\n```\nAn additional data:\nReal devices where the bug occurs: Samsung J3 and J7 both with android 7.0.\nI am not able to reproduce on a Samsung J5 (A v7.0) and other devices.\n```\nIt is correct?\nThanks for your help. Hi, thanks for your time.\nI have tried to do this:\nBefore when app load (device is ready) I do ->\nsetConfig(){\n    localForage.config({\n      driver: [localForage.INDEXEDDB,\n        localForage.WEBSQL,\n        localForage.LOCALSTORAGE],\n      name: 'Project'\n  });\n  }\n```\nimport localForage from 'localforage';\n@Injectable()\nexport class LocalStorageService {\nconstructor() {\n  }\nsetHardcodedData() {\n    return localForage.setItem('hardcodedData', 'randomtext');\n  }\ngetHardcodedData() {\n    return localForage.getItem('hardcodedData');\n  }\nprintDriver() {\n    console.log(localForage.driver())\n  }\n```\nAnd then on ionic page:\nthis.localStorageService.setHardcodedData()\n        .then(finish => {})\n.catch(error => {\nconsole.log(\"JSON.stringify(error))\n})\nthis set action returns to catch and their message is:\n{\"__zone_symbol_currentTask\":{\"type\":\"microTask\",\"state\":\"notScheduled\",\"source\":\"Promise.then\",\"zone\":\"angular\",\"cancelFn\":null,\"runCount\":0}}\nThis is my Ionic info:\n```\n    @ionic/cli-utils  : 1.19.1\n    ionic (Ionic CLI) : 3.19.1\nglobal packages:\n    cordova (Cordova CLI) : 7.0.1 \nlocal packages:\n    @ionic/app-scripts : 3.1.8\n    Cordova Platforms  : android 6.4.0 ios 4.5.4\n    Ionic Framework    : ionic-angular 3.9.2\nSystem:\n    Android SDK Tools : 26.1.1\n    ios-sim           : 6.1.2 \n    Node              : v10.0.0\n    npm               : 5.6.0 \n    OS                : macOS High Sierra\n    Xcode             : Xcode 9.3 Build version 9E145 \n```\nthis is my dependencies extract of package.json:\n\"dependencies\": {\n        \"@angular/animations\": \"5.0.0\",\n        \"@angular/common\": \"5.0.0\",\n        \"@angular/compiler\": \"5.0.0\",\n        \"@angular/compiler-cli\": \"5.0.0\",\n        \"@angular/core\": \"5.0.0\",\n        \"@angular/forms\": \"5.0.0\",\n        \"@angular/http\": \"5.0.0\",\n        \"@angular/platform-browser\": \"5.0.0\",\n        \"@angular/platform-browser-dynamic\": \"5.0.0\",\n        \"@ionic-native/call-number\": \"^4.5.3\",\n        \"@ionic-native/core\": \"4.5.3\",\n        \"@ionic-native/email-composer\": \"^4.5.3\",\n        \"@ionic-native/firebase\": \"4.5.3\",\n        \"@ionic-native/geofence\": \"^4.5.3\",\n        \"@ionic-native/geolocation\": \"^4.6.0\",\n        \"@ionic-native/google-maps\": \"4.6.0\",\n        \"@ionic-native/hotspot\": \"4.5.3\",\n        \"@ionic-native/ibeacon\": \"4.5.3\",\n        \"@ionic-native/in-app-browser\": \"^4.5.3\",\n        \"@ionic-native/local-notifications\": \"4.5.3\",\n        \"@ionic-native/network\": \"4.5.3\",\n        \"@ionic-native/splash-screen\": \"4.5.3\",\n        \"@ionic-native/status-bar\": \"4.5.3\",\n        \"@ngx-translate/core\": \"9.1.1\",\n        \"@ngx-translate/http-loader\": \"2.0.1\",\n        \"bodymovin\": \"4.13.0\",\n        \"call-number\": \"^1.0.1\",\n        \"com.unarin.cordova.beacon\": \"^3.6.0\",\n        \"cordova-android\": \"6.4.0\",\n        \"cordova-browser\": \"5.0.3\",\n        \"cordova-fabric-plugin\": \"^1.1.10\",\n        \"cordova-ios\": \"4.5.4\",\n        \"cordova-plugin-add-swift-support\": \"^1.6.0\",\n        \"cordova-plugin-app-event\": \"^1.2.1\",\n        \"cordova-plugin-bluetooth-status\": \"^1.0.4\",\n        \"cordova-plugin-bluetoothle\": \"^4.4.3\",\n        \"cordova-plugin-compat\": \"^1.2.0\",\n        \"cordova-plugin-console\": \"^1.1.0\",\n        \"cordova-plugin-device\": \"^2.0.1\",\n        \"cordova-plugin-email-composer\": \"^0.8.15\",\n        \"cordova-plugin-firebase\": \"^0.1.25\",\n        \"cordova-plugin-geofence\": \"^0.7.0\",\n        \"cordova-plugin-geolocation\": \"^4.0.1\",\n        \"cordova-plugin-googlemaps\": \"2.1.1\",\n        \"cordova-plugin-googlemaps-sdk\": \"git+https://github.com/mapsplugin/cordova-plugin-googlemaps-sdk.git\",\n        \"cordova-plugin-hotspot\": \"^1.2.10\",\n        \"cordova-plugin-ibeacon\": \"3.6.0\",\n        \"cordova-plugin-inappbrowser\": \"^2.0.2\",\n        \"cordova-plugin-network-information\": \"^2.0.1\",\n        \"cordova-plugin-splashscreen\": \"^5.0.2\",\n        \"cordova-plugin-statusbar\": \"^2.4.1\",\n        \"cordova-plugin-whitelist\": \"^1.3.3\",\n        \"de.appplant.cordova.plugin.local-notification\": \"^0.8.5\",\n        \"es6-promise-plugin\": \"^4.2.2\",\n        \"io\": \"^0.1.10\",\n        \"ionic-angular\": \"3.9.2\",\n        \"ionic-plugin-keyboard\": \"^2.2.1\",\n        \"ionicons\": \"3.0.0\",\n        \"ios-sim\": \"6.1.2\",\n        \"localforage\": \"^1.7.1\",\n        \"lottie-angular2\": \"0.0.9\",\n        \"moment\": \"2.19.2\",\n        \"mx.ferreyra.callnumber\": \"0.0.2\",\n        \"rxjs\": \"5.5.2\",\n        \"sw-toolbox\": \"3.6.0\",\n        \"web-animations-js\": \"^2.2.5\",\n        \"xml2js\": \"^0.4.19\",\n        \"zone.js\": \"0.8.18\"\n    },\nThis is my plugin list:\ncall-number 0.0.2 \"Cordova Call Number Plugin\"\ncom.googlemaps.ios 2.6.0 \"Google Maps SDK for iOS\"\ncom.unarin.cordova.beacon 3.6.0 \"Proximity Beacon Plugin\"\ncordova-fabric-plugin 1.1.10 \"cordova-fabric-plugin\"\ncordova-plugin-add-swift-support 1.6.0 \"AddSwiftSupport\"\ncordova-plugin-app-event 1.2.1 \"Application Events\"\ncordova-plugin-bluetooth-status 1.0.4 \"Bluetooth status\"\ncordova-plugin-bluetoothle 4.4.3 \"Bluetooth LE\"\ncordova-plugin-compat 1.2.0 \"Compat\"\ncordova-plugin-console 1.1.0 \"Console\"\ncordova-plugin-device 2.0.1 \"Device\"\ncordova-plugin-email-composer 0.8.15 \"EmailComposer\"\ncordova-plugin-firebase 0.1.25 \"Google Firebase Plugin\"\ncordova-plugin-geofence 0.7.0 \"geofence\"\ncordova-plugin-geolocation 4.0.1 \"Geolocation\"\ncordova-plugin-googlemaps 2.1.1 \"cordova-plugin-googlemaps\"\ncordova-plugin-hotspot 1.2.10 \"Cordova HotSpot Plugin\"\ncordova-plugin-inappbrowser 2.0.2 \"InAppBrowser\"\ncordova-plugin-network-information 2.0.1 \"Network Information\"\ncordova-plugin-splashscreen 5.0.2 \"Splashscreen\"\ncordova-plugin-statusbar 2.4.1 \"StatusBar\"\ncordova-plugin-whitelist 1.3.3 \"Whitelist\"\nde.appplant.cordova.plugin.local-notification 0.8.5 \"LocalNotification\"\nes6-promise-plugin 4.2.2 \"Promise\"\nionic-plugin-keyboard 2.2.1 \"Keyboard\"\nmx.ferreyra.callnumber 0.0.2 \"Cordova Call Number Plugin\"\n. I have been able to reproduce the error on a emulator and log it.\nThe exception that it returns is:\nvendor.js:1 ERROR Error: Uncaught (in promise): QuotaExceededError\n    at c (polyfills.js:3)\n    at polyfills.js:3\n    at IDBTransaction.r.onabort.r.onerror (vendor.js:1)\n    at IDBTransaction.H (polyfills.js:3)\n    at t.invokeTask (polyfills.js:3)\n    at Object.onInvokeTask (vendor.js:1)\n    at t.invokeTask (polyfills.js:3)\n    at r.runTask (polyfills.js:3)\n    at e.invokeTask [as invoke] (polyfills.js:3)\n    at p (polyfills.js:2)\nFrom here, I have tried to do some test, with the phone with 400mb of available disk space, the error reproduce it.\nWith a 1,1Gb available space disk it works.\nWhat would be the problem with the quota space?\nWith enough mobile available space if inspect the app this is the result of DevTools:\nhttp://i66.tinypic.com/2laevqf.png\nWith no enough mobile available space if inspect the app the quota is 1Kb of 1Kb. \nSimilar errors founded:\nhttps://stackoverflow.com/questions/50250930/on-cordova-cli-8-localforage-indexeddb-quotaexceedederror\n. Hi, \nNo, the system doesn\u2019t show any message to require more space. In fact the system has available space. The target data stored not have a size more bigger than 2kb but the quota assigned by the system is 2kb.\nIn your documentation says that size attribute is only for websql, i am currently using indexeddb.\nThe issue is easy to reproduce, launch an app that uses setItem on a emulator with lower available disk space. It not saves anything.\nThanks for your time. I am currently not setting any limit(consciously) to the storage limit. In your library the only way to specify the size of the database is with the attribute size of the .config method. According to the documentation this attribute only works with WebSQL driver.\nWith your library if I set the driver priority to localStorage first the write works correctly, this is due to localStorage not depends on quota limits but it have a 10mb fixed size limit.\nIs there no way to tell the system the size of the quota you need in Indexeddb programatically?\nI have tried this on various own apps and occurs the same, I think that this is not normal that with this available disk size the quota be unusable. May be a problem with the library?\nRelated?\nIf I use @Ionic/storage I could use sql lite driver but this library uses under the scenes the localforage library and their driver order is [sqllite,indexeddb....] this worries me that it can fail also.\nEDIT: I can confirm that with @Ionic/storage and Indexeddb driver occurs the same. Hi,\nCurrently I am using cordova sqlite drivers a works fine.\nI only say that the cordova way 'under the scenes' also uses localForage library and puts indexeddb driver as a second option just after sqlite driver.\nI was using localForage on cordova apps because on several howto's/manuals recommends this library for cordova apps to use indexeddb.\nI have not tried directly on browser via webapp but if you search localforage + QuotaExceededError you will can see several similar problems related to quota.\nThanks\n. ",
    "alexjoverm": "This is an issue we're facing as well. Not totally sure, but in our case seems to be due to the ready or setDriver function.\nWe ended up wrapping this library with a custom StorageModel.js that works well with SSR:\n```js\nconst getDefaultConfig = () => ({\n  name: 'some-store-name', // Used as DB name in IDB or WebSQL, and prefix in LocalStorage\n  size: 4980736 // 4.75 MB, WebSQL only\n})\nexport default class Storage {\n  constructor(storage, config) {\n    this.storage = storage\n    this.config(config)\n  }\nsetItem(...args) {\n    try {\n      return this.storage.setItem(...args)\n    } catch (e) {\n      console.log('setItem - Executing on SSR')\n    }\n  }\ngetItem(...args) {\n    try {\n      return this.storage.getItem(...args)\n    } catch (e) {\n      console.log('getItem - Executing on SSR')\n    }\n  }\nremoveItem(...args) {\n    try {\n      return this.storage.removeItem(...args)\n    } catch (e) {\n      console.log('removeItem - Executing on SSR')\n    }\n  }\nlength() {\n    try {\n      return this.storage.length()\n    } catch (e) {\n      console.log('length - Executing on SSR')\n    }\n  }\nasync config({ ...restConfig }) {\n    const { driver, ...localForageConfig } = {\n      ...getDefaultConfig(),\n      ...restConfig\n    }\nthis.storage.config(localForageConfig)\n\nif (driver !== undefined) {\n  try {\n    await this.storage.ready()\n    this.storage.setDriver(driver)\n  } catch (e) {\n    console.log('Storage on SSR Mode')\n  }\n}\n\n}\nkeys() {\n    try {\n      return this.storage.keys()\n    } catch (e) {\n      console.log('Keys - Executing on SSR')\n    }\n  }\nclean() {\n    try {\n      return this.storage.clean()\n    } catch (e) {\n      console.log('Clean - Executing on SSR')\n    }\n  }\n}\n```\nThen we use it like:\n```js\nimport localforage from 'localforage'\nimport Storage from './StorageModel'\nexport const homeStorage = new Storage(localforage.createInstance(), {\n  name: 'website-home'\n})\nexport const listingStorage = new Storage(localforage.createInstance(), {\n  name: 'website-listing'\n})\n```\nHope it helps someone. ",
    "hellraisercenobit": "Sorry for bad details and thx guys for quick report.\nI know 50Mb firefox limitation.\nBut i'm on latest chrome and i have a weirdo behavior.\nI'm using localforage to save arraybuffer.\nAnd i don't know why, i'm limited to 50 entries inside my db.\nIf my arraybuffers are lower in term of bytes length it does not change anything.\nAlways 50 entries max.\nAny advice?. Just doing this randomly and recursively.\nNot able to reach the limit of 50 entries in db ^^.\nMy buffers or not really big.\nI have tried with different sizes (little one).\nLimit is the same.\nSo the size of a db do not depends on my buffer size?\nlocalforage\n            .setItem(key, {prop1: val, prop2: val, buffer: myUint8Array})\n            .then(() => {\n              // do something\n            });. ",
    "RusinovAnton": "That happened in Chrome on Android ^5 device. Sorry can't provide more details, because don't have direct access to that device at this moment. \nPS I still have no idea why \"QuotaExceededError\" arose but its not related to this issue.. ",
    "subhranshudas": "Follow up question on above - what is the persistance of indexedDB. I mean is the data in indexedDB wiped out when -\n1. user closes the tab.\n2. user closes the browser.\n3. user shuts down the machine.\nHow does indexedDB compares to localStorage or other web storage mechanisms in terms of performance. Any definitive sources are appreciated.\nThanks.. ",
    "ianweng": "From what I found\n1) none of onabort/onerror/oncomplete of the transaction (IDBTransaction) created by localforage.clear() are fired which should be a WebKit issue but I believe localForage should be compatible with it.\n2) it seems that when the issue occurs, the transaction is garbage collected before oncomplete being dispatched. The reason I said that the issue doesn't occur any more after adding a reference to the transaction after its creation (to stop it being garbage collected).. ```\n<!doctype html>\n\n\n\n\n\n\n\n",
    "limoli": "There is already a link \u201cTry online\u201d. There you can see the unexpected behaviour.. ",
    "lonedesire": "Working as designed, but not necessarily as desired ;)\nhttp://ecma-international.org/ecma-262/8.0/#sec-date.prototype.tojson\nhttp://ecma-international.org/ecma-262/8.0/#sec-json.parse\nCan use custom reviver on keys holding Date values.. ",
    "robodude": "@lonedesire How does one make a custom reviver?\nWhat's interesting is if the date is not inside an object, it will work as expected\nlocalforage.setItem('somekey', new Date(123), function(err, value) {\n    // Do other things once the value has been saved.\n    console.log(value);\n    localforage.getItem('somekey', function(err,value) {\n        console.log('we just read ' + value.toISOString());\n    });\n});. ",
    "ManigandanRaamanathan": "Facing this issue on android platform. Tried on Samsung J7 and note 5 with left of 900MB device internal storage. Both of them not working if the device storage is below 1GB. After clearing space out >=1GB then only it works. Any update on how to fix this issue?. How to identify the storage that the app using in the actual device?. The below screenshot is taken from chrome inspect tool while debugging in my Samsung j7 android device which is currently having 800MB. It shows the storage driver is \" asyncStorage\" and shows that error. If I clear up some space around more than 1GB then it will work fine. It never really use sqlite or other drivers here. Is that could be the issue?\n\n. Is there any other alternative solution to fix within the existing storage plugin? . Wait. Did you mean i have to download and add ionic cordova sqlite on top of the default storage for the sqlite to kick in when deploying apk in the actual device? Is that correct? . ",
    "ashpr": "Thank you so much @thgreasi . Can confirm this fixes it. No complaints from GCC!. ",
    "dmitrizzle": "OK so the reason this has been happening is because on iOS File blobs can no longer be stored.\nTo solve this when this comes to storing images, specifically (as is in my case) they have to be converted to strings first. Below is the quick function I used to do that in my project:\njavascript\nconst fileToBase64 = file => {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.readAsDataURL(file);\n    reader.addEventListener(\"load\", () => {\n      resolve(reader.result);\n    });\n    reader.addEventListener(\"error\", error => {\n      reject(error);\n    });\n  });\n};\nthen\njavascript\nconst key = \"random_key_string\"\nfileToBase64(file).then(string => localForage.setItem(key, string));\nThis issue is a regression on iOS but I thought it'd be useful to add this solution, should anyone else experience this problem with localForage or any other browser DB engines.. ",
    "jakearchibald": "I've filed https://bugs.webkit.org/show_bug.cgi?id=188438.. ",
    "sebvie": "the webkit bug seems to be fixed now. ",
    "dfibuch": "Also getting this problem on iOS Safari. Thinking about implementing the Base64 workaround but hoping I don't have to...\nEDIT: Running iOS 12.1.2\nDo we know if this actually got rolled out by Apple?. That's good to know in a way, means it hasn't broken again on iOS 12. Is there any way to find out when it goes in?. ",
    "orzsikodon": "Yes it does! I'm not sure where the issue lies either? How could we show that the issue is in fact with Safari?. ",
    "haldunatar": "Hi, thanks for fast reply! \nThe issue is as it stated on jest docs \n\nSometimes it happens (especially in React Native or TypeScript projects) that 3rd party modules are published as untranspiled. Since all files inside node_modules are not transformed by default, Jest will not understand the code in these modules, resulting in syntax errors...\n\n..that relates to localforage untranspiled code. What I get is:\n```\nJest encountered an unexpected token\nThis usually means that you are trying to import a file which Jest cannot parse, e.g. it's not plain JavaScript.\n\nBy default, if Jest sees a Babel config, it will use that to transform your files, ignoring \"node_modules\".\n\nHere's what you can do:\n \u2022 To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n \u2022 If you need a custom transformation specify a \"transform\" option in your config.\n \u2022 If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\nYou'll find more details and examples of these config options in the docs:\nhttps://jestjs.io/docs/en/configuration.html\n\nDetails:\n\n/Users/haldunatar/Desktop/projects/nuon/SOUL/node_modules/localforage/src/utils/serializer.js:2\nimport createBlob from './createBlob'; // Sadly, the best way to save binary data in WebSQL/localStorage is serializing\n^^^^^^\n\nSyntaxError: Unexpected token import\n\n  at ScriptTransformer._transformAndBuildScript (node_modules/jest-runtime/build/script_transformer.js:403:17)\n  at node_modules/ngforage/bundles/ng:/ngforage/out/NgForage/imports/serializer.ts:2:26\n  at Object.<anonymous>.Object.setPrototypeOf.__proto__ (node_modules/ngforage/bundles/ngforage.umd.js:25:66)\n  at Object.<anonymous> (node_modules/ngforage/bundles/ngforage.umd.js:26:3)\n\n```\nWell, jest mentions also the workaround about that and I am trying to get this work at this very moment however; I feel like the dist code must be transpiled in the localforage repo in the first place.. @thgreasi I actually import ngForage\nimport { NgForage } from 'ngforage';\nand localforage is imported via ngforage. My point is that localforage files are published as untranspiled. Exp:\n\nnode_modules/localforage/src/utils/serializer.js\n\n@ianmcnally I tried that but it didn't help..\nI fixed it at the end with mocking 'serializer.js' with moduleNameMapper\nmoduleNameMapper: {\n  'app/(.*)': '<rootDir>/src/app/$1',\n  serializer: '<rootDir>/jest-mocks/serializer.js',\n},\n. ",
    "ianmcnally": "We hit this problem and realized we weren't ignoring node_module transform in jest.\ndiff\n// jest.config.js\n{\n+    transformIgnorePatterns: ['node_modules'],\n}\n. ",
    "valesist": "In fact, the strange thing is that it is not replicated everywhere, the PC on which I reply has Windows 7 sp1 as OS and 68.0.3440.106 as a version of Chrome. the problem is with the indexeddb. You can not read and write.. ",
    "jimmaguire": "Same thing started with me today.\nHere's the problem, in\n   LocalForage.prototype._getSupportedDrivers = function _getSupportedDrivers(drivers) {\nthere is only 1 driver Chrome lists \"asyncStorage\", no indexedDB.\nchrome version 69.0.3497.92 on a Win 10 pc.  localForage has been working fine for months for me, just noticed this issue today.  I'm going to try \"asyncStorage\"\n. ",
    "lakano": "Under Firefox 63.0b1 (dev edition) on GNU/Linux Fedora 28\nAnd for the precision, even if we set the \"extractable\" parameter to \"true\", the private key still can't be saved.. Doesn't works on Windows 10 / Firefox 61 \nWorks under Chrome 68 ( even if extractable is set to false )\nAfter some tests, this only happen with ECDSA algo, this works with the HMAC algo, I suppose it's a missing feature in Firefox, and it's not a localForage bug, so I close the ticket. \nThanks for your reactivity!. ",
    "shineabel": "Thanks for your reply\nThe error  only occurred when the machine disk space is not enough, in my case, available disk space is 524M\nMy app used Cordova+ vue.js + electron, the data trying to store is simple json string\nOS:Android 8.1.0 & 6.0.1\n. @tofumatt Hi,anything update on this?. ",
    "Ruluk": "I had this behavior as well, inside a web browser in a laptop, and my disk space was about 750MB. After freeing up space (to a few GB), the error was gone. Not sure where the threshold is, though.. ",
    "Sherlock92": "Same here on chrome osx, resolved the issue by freeing up disk space. @tofumatt Is it possible to make the error message more specific?. ",
    "njbmartin": "Witnessed the same behaviour (Windows 10 - Chrome 72 - IndexedDB), hence why I'm here. My disk space was around 450mb free and the fix was to free up space.\nAnnoyingly, it wouldn't let me use setItem to reduce the size. Also, clearing the application storage didn't help.\nFound the following in regards to thresholds:\nhttps://developer.chrome.com/apps/offline_storage#temporary\n\nTemporary storage is shared among all web apps running in the browser. It is also shared across all offline APIs, such as App Cache, IndexedDB, and File System. However, it does not include web storage APIs like Local Storage and Session Storage, which still has a limit of 5 MB per origin. \nEach app can have up to 20% of the shared pool. As an example, if the total available disk space is 60 GB, the shared pool is 20 GB, and the app can have up to 4 GB. This is calculated from 20% (up to 4 GB) of 1/3 (up to 20 GB) of the available disk space (60 GB).\nIf an app exceeds the allocated quota, an error is thrown.\n\nMy assumption here is that the allocated quota was being returned as zero. \nFound the following in regards to potentially querying available storage:\nhttps://developers.google.com/web/updates/2017/08/estimating-available-storage-space\n```js\nfunction storageEstimateWrapper() {\n  if ('storage' in navigator && 'estimate' in navigator.storage) {\n    // We've got the real thing! Return its response.\n    return navigator.storage.estimate();\n  }\nif ('webkitTemporaryStorage' in navigator &&\n      'queryUsageAndQuota' in navigator.webkitTemporaryStorage) {\n    // Return a promise-based wrapper that will follow the expected interface.\n    return new Promise(function(resolve, reject) {\n      navigator.webkitTemporaryStorage.queryUsageAndQuota(\n        function(usage, quota) {resolve({usage: usage, quota: quota})},\n        reject\n      );\n    });\n  }\n// If we can't estimate the values, return a Promise that resolves with NaN.\n  return Promise.resolve({usage: NaN, quota: NaN});\n```. To add to the above, I have been querying the quota using the above snippet whilst compressing my hard drive, and it seems to always return exactly 1GB less than the available storage on the disk potentially indicating the threshold.. ",
    "korlend": "hi. what was the problem?. I had the same issue.\nWhen I subscribe on .ready of localforage storage, and then call .setItem it cause error. So I wrote my own ready promise.\njavascript\n  onready () {\n    if (this._ready) {\n      return new Promise((resolve, reject) => resolve(true))\n    } else {\n      return new Promise((resolve, reject) => {\n        this._localForageCollection.ready(() => {\n          const repeater = () => {\n            if (this._localForageCollection._dbInfo) {\n              resolve(true)\n              this._ready = true\n              return\n            } else {\n              const tm = setTimeout(repeater, 500)\n              clearTimeout(tm)\n            }\n          }\n          repeater()\n        })\n      })\n    }\n  }. ",
    "eugeniumegherea": "Our code had a lot of concurrency problems, which caused inconsistent state when cleaning db and inserting again. What was weird is that it crashed in the localforage itself, with not relevant stacktrace. ",
    "51303014": "Ok. Tks ! \n. > Is the issue that your new value isn't being saved?\n\nI don't see you waiting for the return result of locaforage.setItem in your code; maybe you are refreshing the page before save?\n\nI don't think so.\nBecause I saved value but when I refresh the page then Value in IndexedDB till it.\nResult: When I add a new value. \nA new value still adds into IndexedDB but the old value has been removed. \nSo that I don't know reason ??. > Is the storage key you\u2019re using the same? setItem will overwrite values if they share the same key.\nYes. the storage key is the same. But why the first I setItem into storage key it's still saved and doesn't overwrite. After that I reloaded the page then it's happened (setItem will overwrite ???).\nIn the document you are said: API of localforage the same localStorage! \nThis is an example when I use localStorage and localForage.\nIn the first localForage work fine but when the refreshed page I use setItem then data will overwrite.\nthe reason why? \nThanks ! . > Did you mean to close this issue? If so: did you find out what the problem was? :-)\nYes. I found out this issue.  So that I closed this issue. \nThe problem is localforage (Promise). And the type of the constructor is a state so it isn't converted the value.\nThank you for helping me. . > Are you trying to run our tests? You should be able to check out the repository, run yarn or npm install, and then run yarn test or npm test.\n\nOr are you encountering an issue with your own unit tests? You should be able to import localforage from 'localforage'; in your code with localforage as an npm dependency and be fine.\n\nOk U. I'm trying.\nWith my unit tests, I think don't have an issue. I just import localforage into the project. Run unit test then show up the error that.. ",
    "jamesmfriedman": "I found the root cause of the issue in the function that detects if isIndexDb is valid.\nThe issue here is that browsers can be emulating behaviors with polyfills.\nMy specific issue is even more cryptic: My last pass extension in Chrome overrides window.fetch so it is no longer a native function.\n```\nfunction isIndexedDBValid() {\n    try {\n        // Initialize IndexedDB; fall back to vendor-prefixed versions\n        // if needed.\n        console.log('1');\n        if (!idb) {\n            return false;\n        }\n        // We mimic PouchDB here;\n        //\n        // We test for openDatabase because IE Mobile identifies itself\n        // as Safari. Oh the lulz...\n        var isSafari = typeof openDatabase !== 'undefined' && /(Safari|iPhone|iPad|iPod)/.test(navigator.userAgent) && !/Chrome/.test(navigator.userAgent) && !/BlackBerry/.test(navigator.platform);\n        // THIS IS OVER PROTECTIVE. JUST LET A WINDOW.FETCH FUNCTION THROUGH\n        var hasFetch = typeof fetch === 'function' && fetch.toString().indexOf('[native code') !== -1;\n    // Safari <10.1 does not meet our requirements for IDB support (#5572)\n    // since Safari 10.1 shipped with fetch, we can use that to detect it\n    return (!isSafari || hasFetch) && typeof indexedDB !== 'undefined' &&\n    // some outdated implementations of IDB that appear on Samsung\n    // and HTC Android devices <4.4 are missing IDBKeyRange\n    // See: https://github.com/mozilla/localForage/issues/128\n    // See: https://github.com/mozilla/localForage/issues/272\n    typeof IDBKeyRange !== 'undefined';\n} catch (e) {\n    return false;\n}\n\n}\n```. I'll gladly submit a PR for this, would like a little guidance though.. I guess the point is, you can fully polyfill both indexeddb and fetch.\nThere are so many random storage mechanisms built into older browsers that an indexedDb polyfill becomes useful to take advantage of them. And the same goes for fetch :).\nI've already filed a bug with LastPass, but I could easily see this behavior happening in other situations. with polyfills. My only suggestion for this lib would be to do a different check (as you're suggesting) or simply drop the \"native code\" part of the qualification.. Also as an addendum, if window.indexedDb is available, why do you care about fetch at all?. Got it. I\u2019ll put in a PR with appropriate safari detection. . ",
    "Makatumba": "this check also causes Errors in our project, which relies on cordova-plugin-wkwebview-ionic-xhr. cordova-plugin-wkwebview-ionic-xhr uses a fetch polyfill. ",
    "Retsam": "@thgreasi Sorry it took me so long to get to this; I've repointed the PR at the dev branch.. FWIW, though I do think fixing typings can be considered a semver non-breaking change.  At the least, I know several other packages seem to treat them that way, at least.  To make an analogy, I've definitely had my linter find new lint errors after a minor version bump: yeah, it 'breaks' my compile step, but it doesn't break my runtime code.  \nPersonally, as a consumer of types, I'd rather get notified of possible runtime errors sooner, so I'd probably put it as a minor version (not a patch), but if you want it in the v2 branch, that's fine too.  . ",
    "sithwarrior": "Because, as default, there are 3 different possible drivers, based on browser support.\nasyncStorage is the default, the ready promise, returns when driver has been negotiated, and your browser supported localStorageWrapper.\nIts documented very nicely in the docs, on github pages.\nhttps://localforage.github.io/localForage/#driver-api-ready\n. > Am I correct in assuming that localForage IndexedDB uses the native SQLITE3 database?\nnot as far as I know. There are cordova plugins etc. for this, where you can set the driver of localForage to use SQLITE. \nBut If you are creating your very own Native/hybrid app, you will probably have to create a hook/driver yourself. There is some documentation for this, in the localForage docs.. Do you have some differences in the url of the two versions? \nLocalStorage is bound to the URL of the \"website\", so its locked, and cant be used by other sites etc.. ",
    "all-": "it well.. but l cant use the component of VUE like this.$vlf or something similar so ...\nhow can l use  only  CDN . ",
    "koalalorenzo": "Probably related: https://github.com/localForage/localForage/issues/548. ",
    "rameden": "It does work when cookies are enabled. This is an internal app sadly, so I can't provide a link. \nOur app is being loaded within an iframe of a larger app. I believe you would be correct in assuming something is happening with origins. Is there a way we can \"force\" a driver?. ",
    "sunlee-newyork": "Same question - how do you check if a store instance already exists on app start?. It looks like when createInstance is called, if the named database and named store already exist it will assume the pre-existing store and not overwrite the data.. ",
    "dtsnell4": "Thank you Sun Lee, it seemed like that was the case, but I couldn't count on it so I had to abandon LocalForage.  Shame there was not better support.. ",
    "bartoszboruta": "@sithwarrior Hi, thanks for response. There is no any differences in urls :( \nFirst open in safari, creates an unique id, saves it with localforage, after adding it to homescreen id is not equal to the one generated in browser version :( The ids are equal on android devices with chrome browser. That is really disappointed.. ",
    "MeMeMax": "@bartoszboruta this is an issue with safari, not with localforage. Safari and the Home Screen Shortcut share the same service worker registration but not the same instance.. ",
    "cosminalco": "This was my first PR and I'm still learning how to do stuff, I wanted to make a new PR with a more appropriate description. Because I format by mistake the entire d.ts file and other crazy stuff, I decided to start everything all over. I thought this PR is completely removed, sorry about that, i made a new one. . ",
    "Alorel": "@tofumatt b3013f901907b1b92efea8f9eafa6faa7d6ce756 :slightly_smiling_face: . I stuck to Angular vs AngularJS as AngularJS is widely known to refer to 1.x whilst Angular is known to refer to 2.x+. ",
    "sohkai": "This test should always fail on the previous version. "
}