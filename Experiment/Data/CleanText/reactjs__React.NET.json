{
    "jordwalke": "So would we be able to take advantage of all of VS's awesome JS features? (Completion, refactoring etc).\n. They'll need to add general syntax transform support because we will continue to evolve the syntax of JSX. We'll provide sourcemaps, but we can't guarantee that the syntax will be pinned to a particular form.\n. And autocomplete? How does it know the semantics of JSX? Since it doesn't, it has to first transform the source, and after it does that, it won't know where your respective cursor location is in the transformed output, and therefore how to complete. Is this correct?\n. The Visual Studio JS editing experience is amazing and no sublime plugin comes close. The goal should be to match the JS editing experience in Visual Studio, but with JSX syntax supported. That means semantic completion etc.\n. Yes, the JSX transform supports sourcemaps. If you try https://github.com/facebook/react-page it will show them working.\n. ",
    "Daniel15": "Maybe one day. Currently just focusing on the runtime aspect (ie. compilation of JSX and execution of React component server-side). I have very little experience with Visual Studio extensions so I'm not sure where to begin that. I attempted a lexer/parser for ReSharper late last year and gave up, and I have no idea what the code I wrote for that actually does :P \n. Created separate task #3 for that :+1: \n. @paulirwin  I definitely agree, whether Microsoft actually add it or not is another thing altogether :) I really hope they do though.\n. Debugging will be difficult to integrate unless something like Web\nEssentials (or Visual Studio itself) adds hooks that let us integrate into\nit. The debugger has to know how to use source maps which probably couldn't\nbe done in an extension.\nSent from my mobile.\nOn Jul 9, 2014 5:27 PM, \"Paul Irwin\" notifications@github.com wrote:\n\n@jordwalke https://github.com/jordwalke Who says Web Essentials would\nhave to transform anything? Just add a JSX template file, syntax\nhighlighting, tag completion, etc. would be fine. We can still leave\nReact.net to do the transformation to JS.\n\nReply to this email directly or view it on GitHub\nhttps://github.com/reactjs/React.NET/issues/3#issuecomment-48552312.\n. The Sublime approach is mostly terrible though. Picking up random words with no context is not Intellisense. This is a huge feature that differentiates IDEs from simple text editors.\n. Try voting for the feature request at http://webessentials.uservoice.com/forums/140520-general/suggestions/4935998-add-reactjs-jsx-support - Currently it's very hard for a third-party extension to easily implement JSX syntax highlighting as the current JavaScript support is not designed to be pluggable :(\n\nI started prototyping doing it with ReSharper. While that's an easier approach at the moment, it also takes a lot of work to actually get it working.\n. This won't be possible until Microsoft add support for extending their JavaScript editor. Closing this out.\n. Basic support exists now, will make it more comprehensive soon\n. Basic support for when .jsx files are referenced directly was merged in 289422208c2f258079c852ad0b3f3078d89b1161. It's not supported for combined/minified files at the moment since none of the .NET minifiers support source maps. I've heard talk of the next version of Visual Studio supporting Gulp so perhaps we'll move in that direction (ReactJS.NET + Gulp rather than ReactJS.NET + [Cassette | ASP.NET Minification])\n. Yeah, source maps should be supported. ReactJS.NET supports source maps, as does React itself. Other third party libraries like Webpack, Gulp and Babel support source maps too.\n. I haven't thought about it much yet. I don't think any JS combiners/minifiers for ASP.NET/C# support JavaScript modules at the moment.\nOne potential way of doing it is to let Webpack handle bundling and then just load the Webpack bundle in ReactJS.NET rather than individual JavaScript files like it does at the moment. This would mean Webpack would be handling the JSX compilation rather than ReactJS.NET.\nIdeally it'd use ES6 module syntax rather than RequireJS/CommonJS/AMD syntax.\n. Added a Webpack example here: https://github.com/reactjs/React.NET/tree/master/src/React.Sample.Webpack. I'll also be writing a blog post about Webpack + ReactJS.NET soon. I'm going to close this task.\n@PeteDuncanson:\n\nAt the minute everything coming out from Facebook appears to be in CommonJs syntax\n\nYeah internally we use CommonJS so generally you'll find all JavaScript libraries released by Facebook will use CommonJS syntax. Having said that, they're always usable without having to use CommonJS requires.\n\nAll the mods you are doing all seem to be very .net tool heavy, any reason for avoiding re-using existing tools such as node.js, grunt, etc\n\nA few reasons:\n1. Initially ReactJS.NET only focused on the simplest use cases with as few \"moving parts\" as possible. My initial proof-of-concept (and indeed the very first release of ReactJS.NET) focused on using the MSIE JavaScript engine to run the JSX Transformer. This meant that almost all the code was managed .NET code and users did not need to install any additional components. Not everyone can install Node.js in their environment, so this can be beneficial.\n2. There's already an existing ecosystem around JavaScript minification/combination in .NET (eg. Cassette and Microsoft's ASP.NET Optimization framework). People that use .NET already have sites built using these technologies, so I wanted to be able to easily slot in there without having to change large parts of the site.\nHaving said that, I definitely see the benefits of using Gulp and Webpack, and they're definitely nicer in more complex scenarios. I created a simple example using Webpack and I'll see if there's ways I can improve support for Webpack and Browserify in ReactJS.NET.\n@spicydonuts \n\nI have a similar use-case. My react toolchain is in place, resulting in a bundle.js file that I include through BundleConfig. If I try to add bundle.js in ReactConfig I get this error: \"Error while loading \"~/Scripts/browserify/dist/bundle.js\": 'document' is undefined\"\n\nI'd suggest creating a separate issue for that :). \"document is undefined\" means you're using document somewhere, which is not available server-side. I'd suggest creating a separate bundle with only your server-side dependencies and omitting anything that's only needed client-side.\n. I didn't write a blog post as such, but there's some documentation here: http://reactjs.net/guides/webpack.html\n. I'll take a look through this tomorrow. I like the idea of only using \".jsx\" extensions.\nJust three little things:\n-  Please edit your pull request to add \"[WIP]\" to the start of the title so we remember it's still a work in progress\n- Will you be rendering the JavaScript to initialise the components on the client-side, or only using it as a view engine? Both approaches are fine for specific purposes. In the ReactJS.NET MVC integration, I render the JavaScript required to initialise the component client-side, so the server-side compilation is mostly optional and mainly used to speed up the initial rendering. On the other hand, there are projects like express-react-views for Node.js which only use React as a server-side rendering engine, and do not initialise the components on the client side. Or will you allow both?\n- At some point (maybe after prototyping for a bit), please configure the assembly like the others:\n  - Include the SharedAssemblyInfo.cs and SharedAssemblyVersionInfo.cs files\n  - \"Warnings as Errors\" enabled for release builds\n  - Build into ..\\..\\bin\\Release\\AssemblyName\\ and ..\\..\\bin\\Debug\\AssemblyName\\\n  - XML documentation enabled\n. Feel free to omit the XML docs and build in debug mode for now, the XML docs can come later (as long as they're in before we merge this).\nJust using React as a view engine is fine, but it would be nice to have a way to render JavaScript to initialise the components client-side, similar to Html.ReactInitJavaScript() in the ASP.NET MVC integration :)\nThanks!\n. For the filename mapping, I think it's a good idea to replace any non-alphanumeric characters with empty strings.\nPlease update the Extensions property to return ISet there too.\nPlease fix src/React/React.csproj and src/React.sln, GitHub thinks the whole file has changed for some reason which makes them very hard to reveiew. Perhaps it's related to line endings.\nThanks!\n. I just removed the System.Web dependency from the core React assembly. You should be able to use ReactJS.NET's IoC container now :)\n. I'm going to close this since I haven't heard back in awhile and this diff would definitely need to be rebased. Feel free to submit a new pull request if you do update it :)\n. @justengland  - I'm going to move your issue into a separate Github issue.\n. I've started working on this, it actually provides a pretty considerable performance boost for server-side rendering :)\n. I've just pushed a version of ReactJS.NET has has experimental support for pooling/reusing JavaScript engines, so it should be a lot faster. If you're interested in testing it out, please try the following and let me know how you go:\n1. Enable the development package repository (see http://reactjs.net/getting-started/download.html#development-builds for instructions)\n2. Upgrade ReactJS.NET to 1.2.1-dev-20141130-0711 or higher (you'll need to tick \"Include Prerelease\" in the NuGet dialog)\n3. Modify your configuration (ReactConfig.cs in the default ASP.NET MVC setup) to call .SetReuseJavaScriptEngines(true). Currently it's turned off by default.\nFor best results I recommend using V8, as support for the MSIE engine is a bit hacky due to its limitations.\n. This was included in the 1.3 release: http://reactjs.net/2014/11/1.3.0-release.html\n. Current progress is in the mono-v8 branch: https://github.com/reactjs/React.NET/tree/mono-v8\nI've created a JsEngine that wraps VroomJs and have got this compiling on both Mac OS X and 64-bit Debian Linux. I have managed to hook this up to ReactJS.NET and get the React.Sample.Mvc4 project running on Debian. Still need to create a NuGet package for it and write some docs for the website.\n. Implemented in the 1.0 release\n. Haven't received any requests for this and ServiceStack is now commercial so its usage will probably drop compared to the Microsoft stack. Closing.\n. Thanks @shaunol, glad you like it!\nI've never tried OWIN myself and actually didn't know of its existence until recently. I wonder how other IoC containers handle it. I use Simple Injector on my own site, and my previous workplace used Ninject. I wonder if either of them have a OWIN lifetime provider. The idea of registering everything at startup is that it it's fine for the initial registration to be expensive since it's only done once.\nI've seen a few mentions of HttpContext.Current.GetOwinContext() and Google leads me to http://msdn.microsoft.com/en-us/library/system.net.http.owinhttprequestmessageextensions.getowincontext(v=vs.118).aspx. Does this work for retrieving the context?\n. Does OWIN itself have a dependency injection framework, and does it have the idea of a per-request registration? If so, the other option would be to register all of ReactJS.NET's classes in OWIN's container rather than the TinyIoC bundled with ReactJS.NET\n. Fixed with #69\n. Closing in favour of #19 \n. Hey @jjridge7, just wanted to check that you've signed the CLA? We require every person that sends a pull request to sign it. If not, please fill out the form at https://developers.facebook.com/opensource/cla. Thanks!\n. This is good for if you call the JSX transformer directly, but how would it be enabled for the ASP.NET JsxHandler (going to a *.jsx file directly in the browser) or for Cassette / ASP.NET Minification? Maybe it's worth adding as a configuration option into IReactSiteConfiguration?\nPlease fix the build errors as well - The build is failing at the moment since all public parameters require XML documentation comments: http://teamcity.codebetter.com/viewLog.html?buildId=117862&buildTypeId=bt1243&guest=1\nOut of curiosity, how did it mess up Traceur? The transforms are fairly simple and definitely shouldn't mess up any other build steps.\n. Thanks! We still need to work out how to make this configurable for the ASP.NET handler and minification libraries. Maybe just add it to IReactSiteConfiguration.\nCould you please also fix the indentation? The ReactJS.NET files use tabs for indentation but your changes are using spaces. Find and replace should be able to fix this :)\n. I am planning on doing a minor bugfix release soon so there shouldn't be too much of a delay for the changes to land in a release package (once completed). Packages are pushed to the dev server as soon as the changes land on master, so you could use those NuGet packages until I push a new release (once these changes are merged) :+1:\n. @Alxandr - Sure, I'm normally available on Facebook (http://facebook.com/daaniel) and sometimes on Google Talk (daniel at d15.biz)\n. Thanks @Alxandr! Merged into master.\n. Sorry it took so long to get this into a release! This is in the 1.1.0 release and I've credited you in the blog post at http://reactjs.net/2014/08/1.1-release.html. Thanks again. :)\n. Thanks @crdeutsch! I renamed the package during development and must have missed the readme.\n. Interesting, that should work. I can't reproduce the issue with the latest version of JSTransform so maybe it's a bug with the JSTransform version bundled with React's JSXTransformer. I'll have to do more testing and see what's causing it :)\n. @spicyj - Is this fixed in the version of JSTransform used by the master version of React? If so, I can probably patch it into the JSXTransformer used by ReactJS.NET.\n. I upgraded JSXTransformer to the latest master version in 7e96d1b74842331f78212e6a42a021f58879cab8 so this should be fixed. You can build ReactJS.NET yourself or install the development build (either from the development NuGet server or by downloading the .nupkg files from the build server) - Install 1.0.2-dev-20140615-0144 or higher to get the fix. Please reopen this issue if you still see the same problem. Thanks!\n. @justengland\nDo you have a standalone test case you'd be willing to share? Something with hard-coded dummy data is fine, if it reproduces the problem. There's several spots the slowness could be coming from (JSON encoding, initialising the JS environment, actually executing the code), so I'd like to have a self-contained test case so I can instrument it and find the slowness.\nOn Windows, ReactJS.NET uses the MSIE JavaScript engine, which should be fairly fast with new IE versions. I had issues compiling V8 on Windows but I might try that again and see if using V8 improves the performance at all.\n. Initialisation shouldn't be too heavy, but I haven't tested it with very large JSON data. Perhaps marshalling of the data is slow. Once you send a standalone test case, I'll do some profiling and see if I can find the cause.\nThe V8 engine initialises on first access and reuses some global engine state so it might be faster, I'm not too sure though as I haven't had the chance to build V8 on Windows properly yet.\n. @justengland - Were you able to investigate this issue? I'm going to close this task because I haven't heard back in a while, but please feel free to reopen it if you're still having issues. Thanks!\n. @RayKwon Could you please try installing React.JavaScriptEngine.ClearScriptV8 and see if that makes it any faster?\nI'll have to look at how easy it'd be to add pooling of JavaScript engines. The MSIE engine can't be pooled since it always needs to be used from the same thread, but I can look into doing it for V8.\n. @RayKwon - I've just pushed a version of ReactJS.NET has has experimental support for pooling/reusing JavaScript engines, so it should be a lot faster. If you're interested in testing it out, please try the following and let me know how you go:\n1. Enable the development package repository (see http://reactjs.net/getting-started/download.html#development-builds for instructions)\n2. Upgrade ReactJS.NET to 1.2.1-dev-20141130-0711 or higher (you'll need to tick \"Include Prerelease\" in the NuGet dialog)\n3. Modify your configuration (ReactConfig.cs in the default ASP.NET MVC setup) to call .SetReuseJavaScriptEngines(true). Currently it's turned off by default.\nFor best results I recommend using V8, as support for the MSIE engine is a bit hacky due to its limitations.\n. The JavaScript engines are pooled/reused now. It used to create a new\nengine every time as that was the easiest thing to do, and most of the\nslowness was initialising the engine and loading React + JSXTransformer +\nyour scripts. Now this only happens at startup.\nDefinitely let me know how that goes for you. The pooling is configurable\nin case you encounter any issues.\nSent from my mobile.\nOn Dec 6, 2014 10:17 PM, \"Jay H.J Kwon\" notifications@github.com wrote:\n\n@Daniel15 https://github.com/Daniel15 - Sorry about the very late\nreply. I have been away from work for a while.\nAnyway, I just downloaded this repository and added the same IndexByRazor\naction method again peforms exactly the same as I commented above.\nAnd the response is way faster than before. The first bytes document takes\nonly around 20 miliseconds.\nWhat did you do? Just changed from MSIE engine to V8?\n\nReply to this email directly or view it on GitHub\nhttps://github.com/reactjs/React.NET/issues/23#issuecomment-65928079.\n. Hey @captray, would you be able to get some more debug info? The full exception (including stack trace) and all InnerExceptions would be great. \nDo you hit the error when running locally in the Azure emulator, or only when deployed into Azure? I haven't tested in Azure but I'll see if I can replicate the issue with a brand new project.\n\nThanks!\n. I just tested with Windows Azure by creating a brand new MVC app, and I was able to get the site to load, and to access a JSX file via the JsxHandler:\n\nI'll need some more information to determine why you're encountering the error. An exception and stack trace would be really handy here :)\nThanks!\n. Huh, this is strange. C# and VB.NET should behave the same in terms of MSBuild scripts. I'll take a look into it over the weekend.\n. I tested with a VB.NET ASP.NET MVC project and couldn't replicate this. Are you only seeing it with class libraries? Could you please attach a small test case that replicates the issue?\nI exec a separate TransformJsx.proj by default since Visual Studio tends to lock files referenced via <UsingTask> attributes. This means the build fails because bin/React.MSBuild.dll is locked. Using the task in a separate MSBuild project avoids this. The proper fix is to put React.MSBuild.dll totally outside the bin directory and don't reference it from the website, but unfortunately NuGet doesn't support this nicely at the moment.\n. I'm going to close this out since I haven't been able to replicate the issue, and haven't received any other reports of it. Let me know if you still encounter this on the latest ReactJS.NET version!\n. This is expected, it's generated via the build script: https://github.com/reactjs/React.NET/blob/master/build.proj#L58-64. The very first time you build, you need to run dev-build.bat which will run the full build process. After you do this, you can build in Visual Studio. I'd suggest running dev-build.bat every so often and before sending any pull requests, as it runs the same build process as the CI box and release builds (including unit/functional tests).\nThis is covered in the \"Build manually\" section of the instructions at http://reactjs.net/getting-started/download.html#building-manually. Do you think this should be clarified somewhere else too (eg. in the readme?)\n. Thanks, added a paragraph to the end of the README: https://github.com/reactjs/React.NET/blob/master/README.md#building-manually-and-contributing\n. Hey @yashary, this is the GitHub project for the ReactJS.NET project and we're not able to assist with ServiceStack issues here. I'd suggest using the ServiceStack mailing list or posting your question to StackOverflow instead. Thanks!\n. Are you on React.Core 1.0 or 1.0.1? If only on 1.0, can you please try upgrading to 1.0.1 and see if the same issue occurs? NuGet seems to like only installing 1.0 even though 1.0.1 is available.\n. I just modified the NuGet package to hide 1.0, hopefully that means NuGet will install 1.0.1 (but I don't have access to a Windows machine at the moment so can't test it).\nLet me know if upgrading JavaScriptEngineSwitcher.Msie  or MsieJavaScriptEngine fixes it, in which case I'll bump the version number requirement. I have a feeling it's in the MSIE engine somewhere. I've been meaning to try V8 on Windows but I had a lot of issues getting the version required by VroomJS to compile on Windows (works fine on Linux though, I use it in production on a pretty simple page with no issues).\nDo you have any debug info at all, even a single stack frame?\n. I'm having trouble replicating this on my system (Windows 8.1 64-bit, IE 11.0.9600.16521 running in VMWare Fusion). Are you on 64-bit or 32-bit? Can you replicate this issue if you build from source (instructions here) and run the included \"React.Samples.Mvc4\"?\nSwitching to Jint in the web.config won't actually work as I'm not using the JS switcher config. ReactJS.NET has its own config. Unfortunately Jint doesn't support JSX compilation at all since the stack gets too large for it to handle :(\n. I did try ChakraJsRt initially but it failed since it couldn't handle the large Esprima stacks (JSXTransformer uses Esprima for parsing) so I had to stop using it. Could you please send through a small project that replicates the issue? I'm about to go on vacation but I can take a look once I'm back. Thanks!\n. It's interesting that I haven't been able to repro this :(\nI'm using a virtual machine though (in VMWare Fusion). Maybe I should try it on a 'real' machine and see if I get the same error.\n. Thanks for your help @jlchmura!\n@paulirwin - I've just merged @jlchmura's change so it should be available on the dev package repository once the build server picks it up. You can try out that package and let me know if you still experience the issue or if it fixes it for you.\n. I'm going to close this as I believe @jlchmura's fix should fix the issue. This fix is available in version 1.1.0 and I've credited @jlchmura in the changelog. Thanks!\n. Thanks @paulirwin - I'll try to investigate the MSIE issues further, but at least you can  use V8 to work around the issue :) \nAre you still seeing this issue on ReactJS.NET 1.3?\n. I originally used MSIE because it doesn't require any additional unmanaged\nDLL files.\nI think I'll split MSIE support into a separate package and make people\nexplicitly choose which engine they want to use (ie. Don't prefer any\nparticular engine by default).\nSent from my mobile.\nOn Dec 20, 2014 2:10 AM, \"Paul Irwin\" notifications@github.com wrote:\n\nNo, our team has not seen the exception in the last couple weeks since\nswitching the Web.config to use the V8 engine, and we are on ReactJS.NET\n1.3.0.\nTo be honest, should this project consider adopting V8 as the preferred\nengine? It seems to work rather well, there is clear industry support for\nV8, and I like that ClearScript V8 packages the V8 DLLs along with your\nproject instead of depending on MSIE on the web server. I would\nencourage everyone using this project to try out the V8 engine, and if\nafter a while there aren't any issues, use that as preferred with MSIE as a\nfallback.\n\nReply to this email directly or view it on GitHub\nhttps://github.com/reactjs/React.NET/issues/28#issuecomment-67649648.\n. @mwethington - Could you please provide a stack trace? So far I've only seen this error with the MSIE JS engine in the stack trace.\n. Try adding the generated files to your project via \"Include in Project\" (http://blogs.msdn.com/b/davidklinems/archive/2007/12/18/quick-tip-add-files-to-visual-studio-projects-the-easy-way.aspx) and ensure they're set to \"Content\"\n. Closing because I haven't heard back about this issue. Please reopen if it's still an issue. Thanks!\n. Thanks Rick!\n. Thanks for your contribution! I appreciate it :)\n. This is in the 1.1.0 release and I've credited you in the blog post at http://reactjs.net/2014/08/1.1-release.html :)\n. This is really interesting. The IoC container should be disposing things at the end of the request: https://github.com/reactjs/React.NET/blob/master/src/React.Web/TinyIoCAspNetExtensions.cs#L66\n\nCan you confirm whether that DisposeAll method is being called properly? It should be disposing the environment. Maybe just adding IDisposable to the interface would solve it.\n. Thanks!\n. Good catch, looks like this was missed in #20. Minor releases should definitely not break the public API. I'll make that property read/write again and also update the NuGet package. Thanks for reporting!\n. Thanks for reporting, I've fixed this in the 1.1.1 release.\n. Thanks!\n. Thanks for the report! This should be fairly simple to fix :)\n. I've just released ReactJS.NET 1.1.2 which solves this issue. Thanks for reporting!\n. I've kept it referencing an older version of JSON.NET so installing ReactJS.NET does not force you to use the new version. The version referenced is just a minimum version; you can install ReactJS.NET and upgrade the version of JSON.NET afterwards.\n\nIn fact, why not MVC 5 ?\n\nA lot of people (myself included) are still using MVC 4, for various reasons. I'm using it because MVC 5 does not work 100% on Mono yet, whereas MVC 4 does. This is a similar situation to JSON.NET - ReactJS.NET supports both MVC 4 and MVC 5, the version referenced is just the minimum version number.\n. Hmm, that is really interesting. Could you please post a full stack trace of the 500 error so I can see which class it's failing in? Please use a debug build if possible (clone this repository, run dev-build.bat, and reference the files in bin rather than the NuGet packages)\nPerhaps you need to unregister the initial iReactEnvironment before registering the new one? I've never actually tried re-registering a class with TinyIoC.\n\nI was trying to see if not disposing/deleting JS Engines per request would speed up server side rendering time\n\nUnfortunately this can't be easily done with the MSIE engine, as the engine itself is only single-threaded and throws a \"catastrophic failure\" if you  try to touch it from a different thread (even to just dispose it). One solution would be to have a pool of threads, each with one MSIE engine, and delegate the environment to the next available thread in the pool.\nUsing V8 on Windows may improve performance, I never managed to get it to compile properly though. If you can get V8 version 3.17.16.2 to compile on Windows, you should be able to compile VroomJS and the engine (https://github.com/reactjs/React.NET/tree/master/src/React.JavaScriptEngine.VroomJs) which shares a V8 environment in the whole app (basically there's a single V8 engine for the whole app, and each React environment creates a V8 \"context\"). Alternatively, VroomJs could be upgraded to support a newer V8 interface, although I don't know enough C++ or enough about V8 to attempt this myself :)\n. The change to GetObject is fine, but the change to SetObject is a bit scary in that it essentially completely ignores the call, and the caller doesn't know that (and may expect the object that was set to be correctly disposed at the end of the request). I'll try to see why it's being called in this scenario.\nThe InitialiseEngine change makes sense and I'm definitely open to accepting that. Additionally, I think it would make sense to make all the methods in ReactEnvironment virtual so they can be overridden.\n\nFor what it's worth, I copied the ReactEnvironment class and simply removed the calls to _engineFactory.DisposeEngineForCurrentThread(), and saw an immense speedup in server-side rendering. Rendering a very simple component server-side (the Tutorial) went from ~200ms to ~11ms\n\nThe issue here is that it's a memory leak, the JS engine uses unmanaged resources (either the MSIE engine or the V8 engine) and not disposing it at the end of the request means that the unmanaged instance will remain in memory. The best solution to improve server-side rendering performance would be to defer the disposal until after the page has been served to the user (that is, move it to later in the ASP.NET request lifecycle so it occurs after the page has been fully rendered). Not sure if this is possible though.\n. Last week I published a React.JavaScriptEngine.ClearScriptV8 package which uses Microsoft's ClearScript library to support V8. Feel free to try it out and let me know how you go. Additionally I just submitted two diffs to change a bunch of methods from private to protected virtual and also implemented the GetType() to typeof(ReactEnvironment) change you mentioned, and these should be in the dev build very soon. I'm going to close this issue but feel free to reopen it or create a new issue if you've got any other questions. Thanks!\n. Fixed by 067b847dead8758cd2fe9e785ffe28719ae1e1a7\n. I don't imagine this being a very common use case so I'd prefer having this as a separate helper method (Html.ReactWithInitialize or something like that?) to keep the core Html.React helper clean and free from arbitrary parameters.\n. Also what happens if you render it with the init code here, and then also have a Html.ReactInitJavaScript call on the page? I think the same init code will be rendered twice. You may need to add an _initRendered flag on the component that's set when the init code is rendered so it's only ever rendered twice.\n. Thanks for your contribution! I implemented a very slightly modified version (it was mostly the same, just some small changes) along with a unit test. I'll credit you in the release notes :)\n. Thanks!\nNormally the build server would pick this up and I'd suggest using the latest dev builds (it builds master and uploads to a custom package repository), but something's broken in TeamCity at the moment so the development packages aren't being built at the moment :(\n. Out of curiosity, what was the IEnumerable being serialized as?\n. Thanks for reporting this! I had a TODO comment in the code to allow specifying the HTML tag to use, so you could do something like @Html.React(\"Hello World\", new { name = \"Daniel\" }, \"span\") to render it in a span rather than a div. Would that solve your use case? ReactJS.NET needs to render a wrapper element of some sort, as it needs to be able to grab the exact element the server-side HTML was rendered to when initialising the component client-side.\n. I added the ability to select the tag you want to use in 303ab72cfa74175473f3430cdd3a424ca5e05f6b. This is included in 1.1.4-dev-20141116-0842 and newer builds which you can get from the development NuGet server if you want to try it out (see http://reactjs.net/getting-started/download.html#development-builds)\nI can't make span the default since it's an inline element, and inline elements can not contain block level elements. In most cases, people will probably have block level elements such as divs and uls in their components.\nYou can't manually touch any of the DOM nodes with data-reactid attributes as these are 'internal' to React and modifying them will leave things in a bad state. You always need a wrapper around the root element that you can call React.render on.\nI'm going to close this task since there's now a fix available. Thanks for reporting it!\n. @mocanSergiu666 - setInterval can not be used when doing server rendering. setInterval is part of the BOM (Browser Object Model) which is not available in server-side JavaScript.. Good catch! Thanks for reporting. I'll fix this tomorrow.\n. This is now fixed and you can use the development build of the NuGet packages (http://reactjs.net/getting-started/download.html#development-builds) to test out the changes before a stable release. Thanks for reporting!\n. We'll need a new React.Web project but why would React itself need to be recompiled? Surely ASP.NET v5 can reference .NET Framework 4.0 assemblies?\n. I ordered a new external hard drive to give me enough hard drive space for another Windows VM and to install the Visual Studio 2015 preview :P \nI'm going to be on holiday from 6th to 16th February but I'll probably pick this up when I return.\n\nI did also need to change IHtmlString -> HtmlString also as the interface no longer exists in the new MVC.\n\nYeah I think IHtmlString is part of System.Web which is no longer used with ASP.NET 5. This can probably be handled with conditional comments in the code.\n. So far I've created a new React.AspNet5 ASP.NET 5 Class Library project but I can't figure out how to make it reference the core React project. Apparently referencing csproj projects from kproj projects should work in the latest version of Visual Studio so this should definitely work.\nI'm trying to use IReactEnvironment but I keep getting \"The type or namespace name 'IReactEnvironment' could not be found (are you missing a using directive or an assembly reference?)\" no matter what I try. I tried kpm wrap src\\React as suggested at http://stackoverflow.com/questions/27020036/how-to-reference-csproj-from-kproj but that didn't help :(\n. I got past that, the next hurdle is hooking ReactJS.NET's dependency injection container (using TinyIoC) into the ASP.NET dependency injection container. I've managed to get dependencies registering as scoped (per-instance) but they're not being disposed correctly. I'll investigate more tomorrow, and post what I've done in a separate branch if I get anything useful :)\n. Initial set of changes in 5d48be69759baa1795b5fd8f3cf9860bbd2c0dbf. With these changes I was able to run an ASP.NET MVC 6 site and use server-side rendering. I still need to add the pieces to the build script.\n. Moving to pull request https://github.com/reactjs/React.NET/pull/94\n. This is interesting since I did not see this issue while testing. I don't have a copy of TFS though. ClearScriptV8-64.dll should be marked as \"Copy if Newer\" in the project so the build should only try to copy it if it's been modified. Does the TFS build server use the Visual Studio/MSBuild project file (.csproj) to build? Does the same TFS server handle deployment, or are you only seeing this during standalone builds?\n. Thanks for the update!\nSent from my mobile.\nOn Dec 1, 2014 5:31 AM, \"jlchmura\" notifications@github.com wrote:\n\nUpdating this in case anyone else runs in to this problem. I had placed\nthe dll files in the project root to get around an exception about the\nv8-x64.dll not being found. That was not a good workaround since it was\ncausing the file to get locked and break my deployments.\nGoing back to the root of the issue, the cause of the v8-x64.dll not found\nissue was that I did not have VS2012 C++ runtime installed on my server (I\nhad to install both 32 & 64-bit).\n\nReply to this email directly or view it on GitHub\nhttps://github.com/reactjs/React.NET/issues/48#issuecomment-65064409.\n. So the idea is to just render the script tag for the React component while not actually rendering the component server-side?  I wonder if you could just have a flag for it in ReactEnvironment rather than creating a whole separate environment class with copy-pasted code.\n. Closing this in favour of #103 (which has less copy-pasted code). Please feel free to comment on that pull request if it doesn't suit your needs and we can revisit this one. Thanks!\n. Thanks, I'll add it this weekend.\n\nSent from my phone.\nOn Nov 21, 2014 9:05 AM, \"jhemminger\" notifications@github.com wrote:\n\nHi - I need to be able to control the value of the ID that is currently\nbeing generated as \"react#\" - I thought you may have fixed this as part of\n45 https://github.com/reactjs/React.NET/issues/45 but instead that\nchange allows the user to define the element type. Any chance you could\ninclude the ability to change the id? I think others would be happy to have\nthis ability as well.\nYour code is setup well to allow for this change easily, something like so\nis all I need:\nAddition on the Extension:\npublic static IHtmlString React(\nthis HtmlHelper htmlHelper,\nstring componentName,\nT props,\nstring htmlTag = null,\nstring htmlId = null\n)\n{\nvar reactComponent = Environment.CreateComponent(componentName, htmlId,\nprops);\nif (!string.IsNullOrEmpty(htmlTag))\n{\nreactComponent.ContainerTag = htmlTag;\n}\nvar result = reactComponent.RenderHtml();\nreturn new HtmlString(result);\n}\nAddition on ReactEnvironment:\npublic virtual IReactComponent CreateComponent(string componentName, string\ncomponentDomId, T props)\n{\nEnsureUserScriptsLoaded();\n- if (string.IsNullOrEmpty(componentDomId)) { maxContainerId++;\n  componentDomId = string.Format(CONTAINER_ELEMENT_NAME, _maxContainerId); } *\n  var component = new ReactComponent(this, _config, componentName,\n  _componentDomId)\n  {\n  Props = props\n  };\n  _components.Add(component);\n  return component;\n  }\nThanks!\n\nReply to this email directly or view it on GitHub\nhttps://github.com/reactjs/React.NET/issues/50.\n. Thanks!\n. Thanks for reporting this!  Back when that code was written, JSXTransformer did not expose any of the ES6 transforms. Its sole purpose was to transform JSX, so it made sense that it only touched *.jsx files. Now that JSXTransformer is useful even on non-JSX files, it definitely makes sense to remove this restriction.\n\nIf you like, you can clone a copy of React.NET, modify that file, and build it locally. The dev-build.bat file in the root of the repository will build the project and package it into NuGet packages in the output folder which you can then install. Feel free to send a pull request if you don't mind fixing it yourself, otherwise I'll fix this soon.\n. This was included in the 1.3 release: http://reactjs.net/2014/11/1.3.0-release.html\n. This is expected, the older MSIE engine can't generate source maps. The source map code in JSXTransformer has this comment above it:\n// The source-map library relies on Object.defineProperty, but IE8 doesn't\n// support it fully even with es5-sham. Indeed, es5-sham's defineProperty\n// throws when Object.prototype.__defineGetter__ is missing, so we skip building\n// the source map in that case.\nJSXHandler tries the best it can to generate source maps.\nI had to intentionally disable ChakraJsRt since its stack size was too small to handle transforming JSX and it kept throwing stack overflow errors. You can try to re-enable it here: https://github.com/reactjs/React.NET/blob/master/src/React/AssemblyRegistration.cs#L44-54\n\nBesides, I think when send transformed JSX, it should check if it can generate source map before set the JSX header.\n\nThis is a good idea, I could probably just do a basic check based on the current engine - Enable it for everything except MSIE.\n. Also you can use the V8 engine (via React.JavaScriptEngine.ClearScriptV8 on Windows or React.JavaScriptEngine.VroomJs on Linux/Mac) which also supports source maps.\n. @ashic Installing React.JavaScriptEngine.ClearScriptV8 should be sufficient to force V8.\n. Closing this out since V8 (ClearScript / VroomJs) is bundled by default now.\n. Sorry for the delay, I've been a bit busy recently.\nThe issue is that the person may be using precompiled JSX files (eg. via the MSBuild task). The MSBuild tasks compiles JSX into .generated.js files and the source map into .generated.map if available (ie. if it's using an engine other than the MSIE engine). This means that even if you're using MSIE at runtime, you may still be able to serve a source map if it was generated beforehand.\nPerhaps that's overcomplicating it though, and source maps should always be disabled if using MSIE engine at runtime (even if the source map was compiled beforehand). What do you think?\n. I think this is less of an issue now that ClearScript is included by default. I'm considering totally phasing out the MSIE engine in the future. What do you think?\n. What server-side technology are you using? Are you using WebForms, ServiceStack, or something totally different?\nHtml.React is a pretty small wrapper around IReactEnvironment: https://github.com/reactjs/React.NET/blob/master/src/React.Web.Mvc4/HtmlHelperExtensions.cs\nYou can do the same thing yourself without using MVC by using the IReactEnvironment implementation directly:\ncsharp\nvar environment = React.AssemblyRegistration.Container.Resolve<IReactEnvironment>();\nvar component = environment.CreateComponent(componentName, props);\nreturn component.RenderHtml();\nAnd use environment.GetInitJavaScript() to get the JavaScript to initialise the components client-side.\nWhichever technology you're using should be able to have a nice wrapper around this.\n. Still relevant, although you should use ReactEnvironment.Current instead of React.AssemblyRegistration.Container.Resolve<IReactEnvironment>().\nHtmlHelperExtensions.cs still exists, it just moved around a bit: https://github.com/reactjs/React.NET/blob/b486cda6937262dbe891a344fb8f53d6f5d20888/src/React.AspNet/HtmlHelperExtensions.cs. With your first one, the variable is inside the anonymous function, so it's not accessible outside that function. With your second one, it's implicitly creating a global variable (due to the lack of var) whichi s why it works. I think the ideal syntax for an IIFE is something like this:\n(function(global) {\n  global.DivBox = React.createElement('div', null, 'Just a div');\n}(this));\nor\n(function(global) {\n  global.DivBox = React.createElement('div', null, 'Just a div');\n}((Function('return this'))()));\nBut I haven't tested whether this works in ReactJS.NET. The Function('return this')() will return the object of the global scope (usually window or global).\nHaving said that, the ideal end-state is to use CommonJS modules. All modules are wrapped in IIFEs so they don't leak globals, and you explicitly specify what you want to export:\n// exampleModule.js\nvar DivBox = React.createElement('div', null, 'Just a div');\nmodule.exports = {\n  DivBox: DivBox,\n};\nThen to use it:\nvar DivBox = require('./exampleModule').DivBox;\nThis is currently not supported by ReactJS.NET as support for JS modules in .NET is quite poor at the moment, and no .NET minifiers have support for modules yet. I may look at integration with Webpack in the future.\n. The documentation page on Webpack touches on this when using Webpack: http://reactjs.net/guides/webpack.html. Documentation for other module systems or \"vanilla\" IIFEs can be added in the future if we like. Closing this out. Thanks!\n. Oh yeah, that's because I haven't written it yet :)\nBasically you need to call .SetStripTypes(true) in your config, which will strip the Flow types when compiling the JSX files. It's equivalent to the \"Using the offline transform tool\" section in the Flow docs (http://flowtype.org/docs/running.html).\n. Interesting, I'll have to look into this when I get some free time. Have you tested it on Windows at all?\n. Turns out this has to do with the order of the HTTP handlers in your Web.config file. When the JSX handler is listed first, it picks up the request even though it should actually go to Cassette. Ensure the Cassette handler is listed before the JSX handler in system.webServer/handlers and you should be fine.\n. I can't see a delete button either. Oh well, I'm glad that you were able to resolve the issue :)\n. The issue with that is resolving dependencies - If you have A.js and B.js and A depends on B, you need to make sure that B is loaded first. There's several solutions to this - Cassette solves it by specifying dependencies (http://getcassette.net/documentation/v2/asset-references), and using JS modules also solves it too. \nThe option I'm leaning towards is using JS modules. Using a task runner like Gulp to combine everything into a single compiled JS file, and then load the compiled file in ReactJS.NET. I haven't looked too far into this yet though.\n. Thanks for the info :)\n\n. Then things start to work however given what you say here #61 I'm not sure if this \"poluting the global namespace\" is ok or not as you seem to be saying it might \"hang around\" between runs. As I'm just using it for storing my root components I'm hoping I'll be ok?\n\nThings that are legitimately global to the app and won't change are fine (so components are okay). In #61 I was talking about per-request data.\n\nI've added a config to my fork of ReactJS which allows you to say \"I'm bundling everything up, please don't inject React on my behalf\" which seems to make everything a bit easier. Needs testing but I think it might solve alot of my issues with bundling.\n\nInteresting approach, let me know how you go! I'm actually considering testing out Gulp + ReactJS.NET and making the process easier.\n. > React.net out the box will use 20 engines but it will only load React once per engine to save on that parsing. After that its just your code that it has to parse and work with each request.\nIt will actually only load your code once per engine too. Loading a lot of code should only affect the first request that uses that particular engine, requests after the first request should still be very fast. This assumes you're using JavaScript engine pooling (which is turned on by default).\n\nI decided to try the gulp/grunt route as well, and ran into the same issue where Reactjs.net can't see the modules anymore post bundling.\n\nIt depends which one of the many many  module systems you're using :)\nWith Webpack, none of the modules are accessible outside of the Webpack bundles, so you need to expose things publicly to use them outside of the Webpack bundle (such as in server-side JavaScript code). One solution is to expose your components publicly, which I've documented at http://reactjs.net/guides/webpack.html. That documentation is for Webpack but Browserify should be similar.\n. I'm closing this out since I fixed the initial issue. Feel free to keep discussing Webpack and Browserify elsewhere :D \n. Handling data with server-side rendering is something I haven't given much thought to yet, it's definitely a problem that still needs to be solved. At Facebook we use the Flux architecture (http://facebook.github.io/flux/docs/overview.html) and data is stored in stores, however my team only do client-side rendering and I'm not sure how server-side rendering works alongside the Flux architecture.\n\nAfter digging around in the source a little bit, it seems like one possible approach would be to find some means to make a call to ReactEnvironment.Execute(string code), and pass in a string from a Razor view that would let us pass in some JSON, etc, to seed our data into some kind of global variable.\n\nThe issue with this is that ReactJS.NET now reuses JavaScript engines across multiple requests, so you need to be careful with globals and ideally clean them all up at the end of the request. This is similar to Node.js as well as .NET itself - Globals should be considered global to the //app// rather than global to the request. Having said that, this approach could work if you did it carefully :)\nYou can use React.AssemblyRegistration.Container.Resolve<IReactEnvironment>() to get the ReactEnvironment instance and do whatever you like with it.\n. Going to close this out, but feel free to post more comments if you have any further questions.\n. An interesting question. None of the projects I've worked on at the past have used .NET string localization (nor did my previous employer).  Can you show an example of how you'd use it in your JavaScript today (if you do use it)?\n. I'm going to close this since I didn't hear back and haven't had any other requests for this, but please feel free to reopen it with more information. Thanks!\n. Unfortunately this isn't something I've thought a lot about yet. I've only really used ReactJS.NET for  rendering parts of the page, I haven't tested it out with any routing libraries. To be honest, isomorphic rendering is still in its infancy and I'd still consider the server-side rendering in ReactJS.NET somewhat experimental. I haven't seen a lot of work done for server-side rendering in environments outside of Node.js. I'd be interested in any thoughts you may have :)\n. Thanks for investigating!\n\nI don't know of a \"clean\" way to get the callback to fire and return a string up to the .net code from the V8 JS engine. The \"dirty\" way I've come up with is to have the callback save the string for the component rendering into a global var in the JS engine and then....poll the engine to see when this var is set...dirty ain't it? Pull out the value of the var then render it down the pipeline job done. We'll thats the plan currently.\n\nClearScript lets you call .NET methods from within the V8 JavaScript engine. However, ReactJS.NET is currently built to allow switching between multiple different JavaScript engines, so it can't really easily use functionality specific to any one particular engine. If you hack it and hard-code V8 rather than using JavaScriptEngineSwitcher, you could call .NET methods from the JavaScript code, which may help you here.\n. @PeteDuncanson  I'd love to see some of your changes (or at least some of the ideas) merged back into ReactJS.NET. I'd be happy having a hard dependency on V8 as long as Mono continues to be supported.\n. Going to close this since it's just a discussion topic, but please feel free to continue commenting if you have other questions :)\n. None of the ideas from @PeteDuncanson's work have made it into ReactJS.NET yet.\n@grahammendick had an interesting approach too - Using Edge.js rather than V8. Edge.js lets you call Node.js from .NET, and it handles async calls pretty well (this is the main limitation of using V8 directly, a lot of the wrapper libraries don't do async very well).\nMaybe using ClearScript directly could help. I'm considering dropping support for the MSIE JS engine some time, and only supporting V8 via ClearScript and VroomJs. This means I wouldn't need to settle for the lowest common denominator and can instead do some V8-specific optimisations (this is what @PeteDuncanson's project does, it takes advantage of V8 specifically).\n. @mkontula It's something I'd like to look into eventually, I just haven't had time to.\n. > as this method introduces no breaking changes, do you think you could see a similar solution making it's way into ReactJS.NET this year?\nI don't have any major plans for ReactJS.NET this year, but I'm happy to take pull requests if you're willing to send them \ud83d\ude03 . Thank you Rick!\n. I haven't looked at this diff yet as I'm away from my computer, but\nJSXTransformer actually has some small patches applied to it to make it\nwork with the MSIE JavaScript engine (unfortunately I haven't documented\nthis yet). Basically all instances of string indexing (eg. source[i]) are\nreplaced with calls to charAt (source.charAt(i)). I've just been doing\nthis manually so far.\nYou can diff the old bundled JSXTransformer version with a vanilla version\noff the Facebook CDN to see the differences.\nSent from my mobile.\nOn Jan 10, 2015 1:02 PM, \"Rick Beerendonk\" notifications@github.com wrote:\n\nOops, build failure.\n\nReply to this email directly or view it on GitHub\nhttps://github.com/reactjs/React.NET/pull/66#issuecomment-69471792.\n. Great, thanks! Looks like a fairly small update :)\n. This is wonderful, thanks!\n. It looks like you've accidentally sent this pull request from your master branch rather than just the branch with this change, so it's also pulled in the whole OWIN pull request (#69). I'll review it once you update the pull request with the correct branch :)\n. Thanks for this! I just wrote a bunch of comments.\n\nPlease ensure you're using the same assembly settings as the rest of ReactJS.NET. Notably, \"warnings as errors\" should be enabled for release builds. Use tabs for indentation in C# files.\nAlso please don't add jQuery to any examples. Ideally I'd like if you reused the same sample code from React.Sample.Mvc4 for consistency.\nPlease run the release-build.bat script and ensure that build succeeds.\n. Thanks for working on this! I really appreciate it :)\n. I've merged your changes! It would be awesome to get some documentation on this feature (just a Markdown file in site/jekyll/guides) but that's totally optional and I can write something if you don't get around to it. Just a basic explanation of what's supported and how to use it :)\nAgain, thanks! :D\n. @ilyapalkin Good point! I just noticed there's no NuGet package for React.Owin. Hahaha. Just created a config for it, it will be available with the next ReactJS.NET release (which should be soon), or you could use the version off the build server once it picks up the change.\n. NuGet package is up now: https://www.nuget.org/packages/React.Owin/\n. Thank you!\n. Hi @delaneyj! OWIN support was only merged last night in #69. Currently there's no documentation on how to use it, and I actually haven't tried it out myself. As far as I can see, this only covers JSX transformation (built on top of StaticFileMiddleware), it doesn't cover server-side rendering.\ncc @mandrek44 - It would be good to get some basic documentation on this functionality :)\n. Haven't seen any other requests for OWIN documentation and I feel like it's not as popular any more with ASP.NET 5 running on its own stack, so I'm going to close this out.\n. Thanks!\n. Thanks for doing that Rick! I've been meaning to do another run-through of the tutorial myself.\n. The \"ReactJS.NET - JSX for ASP.NET Web Optimization Framework\" package should install ASP.NET Bundling and Minification, which should also create the BundleConfig.cs. Does it not do that?\nI'm considering splitting that out into a separate page of the tutorial as soon I'm going to write some documentation about using Webpack instead.\n. I don't think it does yet. It's something I still need to look into. This will be tracked in #47\n. The document global doesn't exist in a server-side JavaScript environment, and you'd encounter the same issue on any other server-side environment (eg. Node.js too). It's part of the browser object model. You'll need to find the code that's accessing document and figure out what it's trying to do and if it can be modified to handle server-side execution.\n. You should be able to get Webpack to bundle react-d3 and all its dependencies (including JSDOM) into the one bundle.\n. Going to close this issue because this is an issue with the scripts rather than ReactJS.NET itself. Please feel free to continue using the issue for discussion, even after it is closed. Thanks!\n. > We've taken to bundling everything (React in our case React-Router) into one bundle and then just including that one bundle in our React.config scripts\nIf using Webpack, you can mark React as an external script in your config:\nexternals: {\n    // Use external version of React (from CDN for client-side, or bundled with ReactJS.NET for server-side)\n    react: 'React'\n  }\nThis means you can use the bundled React version for server-side rendering, and a version off the Facebook CDN for client-side rendering. Up to you though, bundling React is also a fine approach :)\n. Hey @daelliott  - Do you see lowercase classname in any of the documentation or tutorials? React JSX compiles to regular JavaScript, and thus it requires className (uppercase N) to maintain consistency with the DOM. This is how it is mentioned in all the documentation.\n. I haven't heard back so I'm going to close this issue, but please reopen with more information if there's still something I need to fix. Thanks!\n. @dorward  - Might be a good question to ask in the React repo or somewhere similar, this is not specific to ReactJS.NET :)\n. It's generated by build.bat. Once it's generated, you can build from Visual\nStudio directly. This is documented in the readme and also on the website\n:)\nSent from my mobile.\nOn Feb 7, 2015 10:48 PM, \"Stephen\" notifications@github.com wrote:\n\nClosed #77 https://github.com/reactjs/React.NET/issues/77.\n\nReply to this email directly or view it on GitHub\nhttps://github.com/reactjs/React.NET/issues/77#event-232042890.\n. > Switching to use a new engine per request certainly sorted out the memory issue at the expense of hitting the CPU a little harder\n\nIn that case it sounds like JSPool should recycle the workers periodically. The issue with creating one engine per request is that every request is a bit slower as it needs to load all the JavaScript again. You can definitely leave that option enabled if it helps your use case though (the pooling may still have some bugs which is why I left an option to disable it).\nI'm currently on vacation but I'll be back on 16th February. Jetbrains are awesome and provided a free license for dotTrace for ReactJS.NET so I can do some profiling when I get a chance :)\n. @PeteDuncanson \n\nWe been playing with clearing out the global vars\n\nInteresting, is the memory usage considerably reduced when you do that compared to when you just do engine.CollectGarbage(true)?\n\nOn a side note we've been playing with just using V8 direct\n\nYou mean rather than through JavaScriptEngineSwitcher? In theory JavaScriptEngineSwitcher shouldn't significantly affect performance. I wonder where it'd be slowing down.\n\nNow looking at basic pooling\n\nYou could probably modify JSPool to use V8 directly :)\n. Thanks for the info @PeteDuncanson!\nI think I'd be happy dropping the JavaScriptEngineSwitcher dependency if it helps with improving performance, but I need to maintain compatibility with both Windows and Linux. ClearScript doesn't run on Linux (due to its usage of C++/CLI) so I need the VroomJs engine for Linux compatibility. Perhaps JSPool could be updated to support using V8 directly (via ClearScript + VroomJs) and create multiple contexts.\n. Going to close this out since it's more of a discussion topic rather than something concrete for ReactJS.NET. We can create several small tasks for things to follow up on :)\n. > It appears the issue is a result of using javascript functions to format my data model in the render method. \nThe error actually means that the render method returned something different when called server-side than when it was called client-side. These should be returning the same thing. This points to an issue in the JavaScript. Try turning off JavaScript in your browser and loading the page (so it's only rendered server-side). Then in a separate tab, turn on JavaScript and load the page. Put the two side by side and look for any obvious differences. You can also diff the generated DOM (HTML in 'View Source' vs HTML in 'Inspect Element' -> right-click -> copy as HTML) to find changes.\nA very basic approach to debugging is to remove everything from your render method and see if the error disappears. If it does, keep adding stuff back piece by piece until you find the part that causes the error.\n\nIs my only option here to modify my model, implementing the same formatting methods server-side\n\nNope, the whole point of server-side rendering is to use the JavaScript rendering methods server-side too, so there's only one implementation. The issue here is that there's something wrong in the implementation such that it's doing something different server-side compared to client-side.\nI'm going to \"close\" this issue since it's not a bug in ReactJS.NET, but please feel free to continue using the issue for discussion. Thanks!\n. Sorry about that, there should probably be more documentation. Initially V8 was only supported on Linux and Mac OS (via Mono), the Windows support via ClearScript is a fairly recent addition. If you get a chance, feel free to submit a pull request adding more documentation (or just ask me to do it) :)\n. I installed the VS2015 preview right before going on vacation so I haven't\nhad a chance to play around with it. I'll be back on 17th February.\nCurrently ReactJS.NET only supports released versions of ASP.NET, not the\nlatest preview version. A lot has changed in the preview.\nSent from my mobile.\nOn Feb 13, 2015 10:26 AM, \"Pete Duncanson\" notifications@github.com wrote:\n\nDaniel has not had time to looking VS 2015 as yet but there are some\ndetails here #47 https://github.com/reactjs/React.NET/issues/47 that\nmight help you. I fear you are on your own at the minute on this path less\ntravelled :)\n\nReply to this email directly or view it on GitHub\nhttps://github.com/reactjs/React.NET/issues/81#issuecomment-74270297.\n. Closing in favour of #47\n. I'm on vacation at the moment but I can take a look once I'm back on 17th\nFeb. What minifier are you using? The ASP.NET minification?\n\nSent from my mobile.\nOn Feb 13, 2015 4:59 PM, \"Daniel Lamb\" notifications@github.com wrote:\n\nWhen running in debug mode, everything is fine but when switching to\nrelease I get this error and an incomplete JavaScript file. I'm guessing\nlooking at the error that this is because the file hasn't been transpiled\nfirst. Am I missing something, is there a way to control the pipeline?\n/* Minification failed. Returning unminified contents.\n(10,9-10): run-time error JS1003: Expected ':': (\n(10,12-13): run-time error JS1100: Expected ',': {\n(12,7-8): run-time error JS1195: Expected expression: <\n(12,7-8): run-time error JS1195: Expected expression: <\n(14,21-22): run-time error JS1002: Syntax error: }\n(17,28-29): run-time error JS1002: Syntax error: }\n(20,22-23): run-time error JS1002: Syntax error: }\n(27,9-10): run-time error JS1003: Expected ':': (\n(27,12-13): run-time error JS1100: Expected ',': {\n(29,4-5): run-time error JS1195: Expected expression: <\n(29,4-5): run-time error JS1195: Expected expression: <\n(29,18-19): run-time error JS1197: Too many errors. The file might not be a JavaScript file\n...\n\nReply to this email directly or view it on GitHub\nhttps://github.com/reactjs/React.NET/issues/82.\n. You need to use JsxBundle rather than ScriptBundle. This should be in the\ndocumentation on the website :)\n\nSent from my mobile.\nOn Feb 13, 2015 5:23 PM, \"Daniel Lamb\" notifications@github.com wrote:\n\nYes sorry I should have been clear this the default bundling and\nminification.\nbundles.Add(new ScriptBundle(\"~/bundles/comments\")\n       .Include(\"~/Scripts/jquery.signalR-{version}.js\")\n       .IncludeDirectory(\"~/Scripts/Core\", \".jsx\")\n       .IncludeDirectory(\"~/Scripts/Comments\", \".jsx\"));\n\nReply to this email directly or view it on GitHub\nhttps://github.com/reactjs/React.NET/issues/82#issuecomment-74337796.\n. Nice, glad to hear you could get it working!\n. Not at the moment. I'm not quite sure how to implement that :)\n. Good catch, looks like System.Web.Optimization.React has never been signed. Thanks for reporting!\n. At the moment, I think it would have to be added to JavaScriptEngineSwitcher first, as that's the abstraction layer I'm using for JavaScript engines. Perhaps I should switch to using V8 directly rather than JavaScriptEngineSwitcher? I'm using two different V8 integration libraries (ClearScript on Windows and a fork of VroomJs on Linux and Mac OS) so I'd still need an abstraction layer of some sort.\nSide note, this a great code base, real easy to poke around and the fact we are raising this minor tuning tweaks is only a good thing. Great work @Daniel15\n\nThanks! :D\n. I think the pooling provided by JSPool should be sufficient for now. If we wanted to implement better V8 compilation then either that should be added to JavaScriptEngineSwitcher or we should switch to using ClearScript (for Windows) + VroomJs (for Mac OS and Linux) directly. I like the abstraction layer JavaScriptEngineSwitcher provides, but it makes it more difficult to do anything engine-specific.\n. The issue with calling back into .NET code is that there's no cross-engine way of doing it. ClearScript and VroomJs have different ways of doing it, but I don't think the MSIE engine supports it. I wonder if it could be added to JavaScriptEngineSwitcher. Alternatively I could just move to only supporting V8.\nI love the idea of converting them to client-side console calls though! That should definitely be doable. The shim could cache all the calls and then just render them out when scripts are rendered. I'll work on this for the next release.\n. Implemented a basic version in eff1c2b134ac47771c6991d180cb7908ffffd6d1. This will catch all the console calls made server-side and output them as part of the JS init code (@Html.ReactInitJavaScript() in ASP.NET MVC). I can add a separate method that gets just the log calls if there's a valid use case for that :)\n. I'm going to try to see what can be done to make debugger easier\nHave you tried the V8 engine (React.JavaScriptEngine.ClearScriptV8 on Windows or React.JavaScriptEngine.VroomJs on Linux and Mac OS)? It tends to give better error messages than the MSIE engine.\n. Sounds like it could be an issue with JSPool not having sufficient locking when it recycles engines (it recycles all the JS engines whenever any of the loaded files change). I'll take a look this weekend.\n. @spicydonuts  - Can you please try upgrading JSPool to 0.2 and see if you encounter the same issue? I fixed an issue there that might be related.\n@PeteDuncanson - For a live deployment I'd probably deploy to a separate directory, do smoke testing on it, and only flip over when the push is complete and verified working. This is normally called blue-green deployment. If you do deployment directly to a live site, you'll occasionally encounter issues either with file locking or with mismatched assemblies while the deployment is taking place (ie if you upgrade some dependencies and they're in the process of being pushed), and it's more difficult to roll back in case of issues. This is much easier to do now that a lot of people are using \"cloud\" services. Depending on your environment, you could even spin up a totally new server for each deployment and kill the old one once it's verified working.\n. JSPool 0.2 should have resolved this, but please reopen if you're still experiencing this issue. Thanks!\n. Go ahead and use compiled files there, that's perfectly fine. Just make sure there's no client-specific code in your bundles (eg. definitely don't include jQuery or anything else that touches document in there). I cover this in the Webpack docs on the site and might eventually add docs for Gulp/Grunt too.\nUsing precompiled files does result in performance benefits. In theory it means JSXTransformer doesn't even need to be loaded at runtime, so you have a lighter footprint. ReactJS.NET isn't quite there yet, using external JS files isn't as performant as it could be at the moment since it will still run your file through JSXTransformer even though it's not needed (since you've already transformed the file yourself). I'll have to think of a smart way to handle this, perhaps a second parameter to AddScript like doNotTransform that just loads the file directly without transformation.\n. Going to close this since it's just a discussion/question, but please feel free to reply if you have any further questions. Thanks!\n. The only problem I had with that is it's quite long, but at least it describes what it's doing (and you'd probably only have one bundle file you're adding anyways)\n. Somehow I don't think a bot can sign a CLA, also that badge doesn't fit in with the rest.\n. Sorry, not going to include an RC version of React. I'll update React once\nthe final release of 0.13 is out, which should be pretty soon. :)\nSent from my mobile.\nOn Feb 25, 2015 8:58 AM, \"glikoz\" notifications@github.com wrote:\n\nhttp://www.productiverage.com/typescript-es6-classes-for-react-components-without-the-hacks\nI want to use this approach, with or without TypeScript is big difference\nfor me?\n\nReply to this email directly or view it on GitHub\nhttps://github.com/reactjs/React.NET/issues/93.\n. :+1: I'll upgrade React in the next release.\n. Version number can be set through K_BUILD_VERSION environment variable: https://github.com/aspnet/XRE/issues/1284\n. Boom, time to party :smile: \n. @luisrudge No CoreCLR support yet, that depends on the dependencies first (JavaScriptEngineSwitcher, ClearScript, and optionally MsieJavaScriptEngine)\n. Basic getting started guide here: http://reactjs.net/getting-started/aspnet5.html\n. @jimitndiaye I'm actually using VroomJs for Linux and Mac OS support, but I never managed to get the required version of V8 (3.17.16.2) to compile properly on Windows. I don't have the expertise to upgrade VroomJs to support newer versions of V8, as I have very little C and C++ experience.\n. Thank you!\n. Done in fe639046c94aa94a967e5b856bd688a6cf746d57. I've still kept MSIE but have also bundled V8 by default.\n. Done in fe639046c94aa94a967e5b856bd688a6cf746d57\n. I think @PeteDuncanson was attempting to use React Router from ReactJS.NET, although I'm not sure how far he got with it.  I don't know how difficult it would be to do.\n. Closing this in favour of #64 \n. Visual Studio probably had to reload the MSBuild file :)\n. That's a good question, I've never used Web Pages before. I know it uses\nRazor but does it use the same HtmlHelpers as MVC? Try installing the\nReactJS.NET MVC package and seeing if that works.\n\nSent from my mobile.\nOn Mar 9, 2015 7:22 AM, \"Frank\" notifications@github.com wrote:\n\nwhat are the requirements of running with web pages and not mvc?\n\nReply to this email directly or view it on GitHub\nhttps://github.com/reactjs/React.NET/issues/100.\n. Closing this since I haven't heard back, but let me know if the MVC helpers don't work with Web Pages and I can investigate. I can't actually figure out how to create a Web Pages site in the Visual Studio 2015 preview so I may need to downgrade to Visual Studio 2013 to test this out (or use WebMatrix).\n. Do you see any errors in the Visual Studio output window?\n\nThere's a sample project in the React.Sample.Mvc6 project in the\nrepository. Clone the project, run dev-build.bat, then you can open the\nsolution in Visual Studio.\nSent from my mobile.\nOn Mar 11, 2015 6:18 AM, \"Radenko Zec\" notifications@github.com wrote:\n\nI have followed tutorial on\nhttp://reactjs.net/getting-started/aspnet5.html\nto use React with ASP.NET 5.\nI cannot make it work. (I have used Reactjs.NET on ASP.NET MVC 5\nsuccessfully)\nI am just getting blank page. (no info in console) and don't have react\ntab in chrome develop tools.\nCan you please upload a simple project (hello world) where you have\nmanaged to run it in ASP.NET 5 so I can try to implement it myself?\n\nReply to this email directly or view it on GitHub\nhttps://github.com/reactjs/React.NET/issues/101.\n. Did you figure out what the issue with your project was?\nIt would be nice if you can reference React.js from Bower instead of fb for next versions\n\nThis already works for client-side code, just include your own version of React rather than using it from the CDN.\n\nAlso I am hoping that you will enable support for aspnetcore50 soon. Without .NET Core your implementation for ASP.NET 5 is not complete because we will be stuck with Windows and Full Framework.\n\nThis is blocked on the dependencies (ClearScript and JavaScriptEngineSwitcher) supporting ASP.NET 5 Core. .NET Core isn't functional on Linux or Mac OS X yet, and ASP.NET 5 still runs on those platforms via Mono even without Core.\n. I recently built a hello world app with the Yeoman generator (to scaffold it) and Sublime Text. It worked! :) http://blogs.msdn.com/b/webdev/archive/2014/08/12/develop-asp-net-vnext-applications-on-a-mac.aspx\n. Interesting... Do you have any custom configuration for IIS Express or are you just using the standard config? Are you running it through Visual Studio, or outside of Visual Studio? Do you have the Visual Studio debugger attached or do you run \"without debugging\"?\n. Some of the changes I've done to JSPool recently might fix this.\n@jlchmura Could you please provide the InnerException of that exception if possible? I think it'll be really useful.\nIn the meantime you could turn off pooling only in debug builds:\n```\nReactSiteConfiguration.Configuration\nif DEBUG\n        .SetReuseJavaScriptEngines(false)\n\nelse\n        .SetReuseJavaScriptEngines(true)\n\nendif\n```\n. Thanks, this looks pretty good! Please sign the CLA and fix the very minor comments and I'll be happy to merge this :)\n. Thanks!\n. I recently saw the same thing on my own site after upgrading Newtonsoft.Json (JSON.NET) past version 5.0.4. Downgrading to JSON.NET version 5.0.4 made it work as expected so there's probably some incompatibility somewhere. I'll take a look.\n. I'll try to take a look this weekend and see if I can figure out what's up :)\n. That was pretty tricky to track down, but it did end up being an issue with the JSON.NET version:\n\nThe \"real\" error message was masked by that try-catch block in that segment of code. The try block had logic for parsing the data as JSON, but the catch block did not. This meant that the error that ended up being thrown was due to the code paths being different, which is why I was confused by it.\nThis actually seems somewhat specific to the MSBuild task which is probably why I haven't gotten other reports about it (not many people use the MSBuild task). NuGet automatically inserts assembly bindings into the Web.config which means assembly version issues don't really happen with sites (or desktop apps) as long as the API remains backwards-compatible between versions. MSBuild can't really use assembly bindings.\nAnyways, 5021d39e5c1cba600863332e7e2dc043b2321750 fixed the code so the two code paths do the same thing (which made it start throwing the correct error about Newtonsoft.Json) and 292cf49bd08b6da775838eb1b14eb6a769402897 updated the referenced version of Newtonsoft.Json. The new build will be on the development package server shortly (instructions here), or you can build it yourself if you like.\n. Yeah it looks like the build on the dev server is broken even though I have\nno issues compiling the project myself (even on a fresh checkout), not\nquite sure what's going on there. Thanks for checking it :)\n\nRegards,\nDaniel Lo Nigro\nhttp://dan.cx/ | Twitter http://twitter.com/Daniel15 | Facebook\nhttp://www.facebook.com/daaniel\nOn Mon, Mar 16, 2015 at 8:31 AM, Michael Ross notifications@github.com\nwrote:\n\nI gave the development package a whirl but bumped into the same issue (the\nupdate might not have propagated yet?). I did build it and my issue has\nbeen resolved, thanks again.\n\nReply to this email directly or view it on GitHub\nhttps://github.com/reactjs/React.NET/issues/104#issuecomment-81739762.\n. Sounds like an issue with JSPool (the library that handles pooling/reuse of JavaScript engines) so I've moved this to https://github.com/Daniel15/JSPool/issues/6. Let's follow up there :)\n\nIn the meantime, you can try turning off pooling and seeing if that helps. To do that, call .SetReuseJavaScriptEngines(false) in your ReactConfig.cs file. This will make execution slower (as it needs to spin up a new JavaScript engine for every request rather than reusing them) but should avoid this issue.\n. You can actually completely remove any mention of that package, the entire package doesn't exist any more. The VroomJs one can be removed too.\n. Thanks!\n. Currently the scripts aren't loaded until the first usage of the engine, but in 3ae436a376c0ffd6d5942378f1e1a06f1352834f I added a new AddScriptWithoutTransform method on the config object. Try that out, any scripts added with AddScriptWithoutTransform rather than AddScript will load as soon as the JavaScript engine is created. \n. Please feel free to reopen this if any other work need to be done on this.\n. What operating system and .NET version are you using on your UAT server?\n. This should have been fixed with the move from JsxTransformer to Babel. Babel's stacks are significantly smaller than JsxTransformer so it's much less likely to stack overflow.\n. Remove the React.render call from Tutorial.jsx. Server-side rendering handles calling React.render for you.\n. This is because ReactJS.NET isn't using the latest version of React. I'll\nupdate it soon.\nSent from my mobile.\nOn Apr 5, 2015 3:13 AM, \"Charalampos Karypidis\" notifications@github.com\nwrote:\n\nAccording to documentation we can use the ES6 class syntax to declare\ncomponents. I tried to do so but I am getting an error when the page is\nrendered server side.\nMy simple component looks like this\nclass App extends React.Component {\n  render() {\n    return \n        Hello World!\n      ;\n  }\n}\nBut I am getting the error below:\nError while loading \"~/Components/app.jsx\": TypeError: Cannot read property 'prototype' of undefined\n   at Script Document [6]:6:241 -> ];}}var _SuperProtoOf_Class0=_Class0===null?null:_Class0.prototype\nI have enabled the corresponding setting in react configuration\n(UseHarmony)\nIs it possible to use this syntax today or am I missing something? I could\ncreate a small demo application to demonstrate this.\n\nReply to this email directly or view it on GitHub\nhttps://github.com/reactjs/React.NET/issues/110.\n. The upgrade will be covered by #93. Closing this out.\n. Just tested after upgrading React to 0.13.1 and it works now. If you want to use it before I release a new version, you can get a ReactJS.NET build off the build server shortly, or just build it yourself. Instructions are on the site. Thanks for reporting!\n. New release will be some time in the next few days, I just need to do more\ntesting and see if there's any other bug fixes that I should do for this\nrelease. In the meantime you can get packages off the development server,\nor build it yourself and use the resulting NuGet packages. Instructions for\nboth are on the site.\n\nSent from my mobile.\nOn Apr 13, 2015 1:45 AM, \"Charalampos Karypidis\" notifications@github.com\nwrote:\n\nHave you any idea when you will upgrade nuget package too?\n\nReply to this email directly or view it on GitHub\nhttps://github.com/reactjs/React.NET/issues/110#issuecomment-92273691.\n. I'm just pushing the updated NuGet packages now, they should be up in a few minutes.\n. Good catch!\n\nWith ASP.NET MVC you'd ideally use the OutputCache attribute rather than calling Response.Cache directly. I think it's something like this:\ncsharp\n[OutputCache(Location = OutputCacheLocation.None)]\npublic ActionResult Comments()\nAlthough disabling caching would result in reduced performance. In a production environment you'd ideally use proper cache validation (ie. E-Tags and Last-Modified/If-Modified-Since).\nFeel free to send a pull request to update the tutorial, otherwise I can update it when I get some free time.\n. Thank you! Just some minor comments :) :+1: \n. Thank you!\n. I've added this in 27df77f84f2ea95994452b82f0d55c48493ba2df. Ensure you load a version of React in a script (eg. Webpack bundle) via AddScriptWithoutTransform and it should work fine. The only issue I can think of is if React's API changes between versions, as ReactJS.NET will still be calling the old methods internally (eg. React.renderComponent changing to React.render in 0.12).\n. This looks like a bug with React 0.12, I can replicate the same issue on JSFiddle if I switch to using JSXTransformer 0.12: http://jsfiddle.net/a1k1mhge/1/. Please try upgrading to ReactJS.NET 1.5, as it upgrades React from 0.12 to 0.13 and should resolve this issue.\nThanks!\n. Good idea! I have a feeling the files have already been combined together by the time the JSX transformation runs, and Microsoft's bundling/minification framework doesn't output source maps, so we've already lost the original locations :(\nI'll see if the transform can be ran earlier, before the combination takes place.\n. Hitting the JSX file directly (rather than the combined version) should give you the right line number, as long as you have the ReactJS.NET handler configured in Web.config. \nUnfortunately Microsoft's bundling/minification framework doesn't output source maps (so we've already lost the original locations by the time JSX is being processed), and they're discontinuing it with ASP.NET 5 in favour of using Gulp instead.\n. I'm going to close this out since Microsoft are no longer working on ASP.NET Web Optimization (System.Web.Optimization), and fixing this depends on changing Web Optimization to support it.\n. @cloudybrain  - Setting BundleTable.EnableOptimizations = false should give you errors with correct file names and line numbers. This has been improved a bit in ReactJS.NET 2.0 and the error messages should be more useful now :) \n. Good catch, thanks for reporting it.\n. Most likely you have a syntax error in your JavaScript, such as a trailing comma somewhere. It's possible that you're using the V8 engine when developing locally, but the MSIE engine when deploying to Azure. Try using the MSIE engine locally (simple way is to delete the ClearScript.V8 directory, as MSIE is only used as a fallback) and see if you encounter the same error.\nDoes the error have a line number?\n. The code didn't come through properly, can you please post it via http://gist.github.com/ instead?\n. Hi! Sorry for the delay in replying!\n\nWell, TIL, just looked it up, trailing commas are valid in JS.\n\nThey're valid in most modern JS engines, but Internet Explorer doesn't like them. ReactJS.NET falls back to the MSIE engine if initialisation of V8 fails for whatever reason.\n\nNot quite at the line given, but near there\n\nYeah the line numbers are a bit off at the moment, I need to work on fixing that.\n\nOn another note, do you recommend V8 on the server?\n\nYeah, it's much better than the MSIE engine :)\n\nAnd how can one verify which engine is being used?\n\nThat's a good question; it's pretty difficult to tell at the moment. One thing you can do is call .SetAllowMsieEngine(false) on your config, which will force it to only use the V8 engine (and throw an exception if it fails to initialise).\nYou should be able to get the current engine details by doing something like this:\nvar engineFactory = React.AssemblyRegistration.Container.Resolve<IJavaScriptEngineFactory>();\nvar engine = engineFactory.GetEngine();\nvar name = engine.Name;\nvar version = engine.Version;\nengineFactory.ReturnEngineToPool(engine);\n// Use the values of name and version.\nI haven't tested this, but it should work.\n. Thanks @samppis!  Since you have experience getting ReactJS.NET working in Azure, it would be great if you could add a documentation page about it :smile: The ReactJS site is in the site directory of this repo, in Markdown format. Up to you of course, but I'd greatly appreciate it.\nI noticed you mentioned this in your post:\n\nUnfortunately for ASP.NET 5 people ReactJS.NET is using and older version (1.2.4) of JavaScriptEngineSwitcher.V8 package\n\nI'll upgrade JavaScriptEngineSwitcher to the latest version soon :)\n. @samppis - Interesting, I'm not quite sure what's going on there. I haven't actually tried building the site on Windows - I'm using Mac OS (unfortunately - it's my work machine) in development and Linux in production. \nI'm not very familiar with Ruby and a lot of the Jekyll boilerplate was copied from the React site, but running gem list shows these versions installed on my machine:\nbourbon (3.1.8)\njekyll (2.5.3, 2.2.0, 1.5.1, 1.3.0)\njekyll-assets (0.10.0, 0.7.7)\njekyll-coffeescript (1.0.1, 1.0.0)\njekyll-gist (1.2.1, 1.1.0)\njekyll-paginate (1.1.0, 1.0.0)\njekyll-redirect-from (0.8.0, 0.5.0)\njekyll-sass-converter (1.3.0, 1.2.0)\njekyll-watch (1.2.1, 1.1.0)\n. @samppis Ah, that's annoying :( Feel free to just write up your content in Markdown format and submit a pull request without actually testing the Jekyll site (or just email the content to me if you prefer, email address is on my Github profile). I can pull your branch and ensure the page looks fine, and commit it for you.  Thanks!\n. Great, thanks :+1: Closing this out since it sounds like there's no remaining issues.\n. Did you post this on the wrong repository? ReactJS.NET does not have anything to do with tables :)\n. Sorry I haven't had a chance to look at this yet. I'll try to take a look soon.\n. Yeah, you should simply be able to swap the order such that the console calls are first: https://github.com/reactjs/React.NET/blob/master/src/React.Core/ReactEnvironment.cs#L293-301\nFeel free to send a pull request :)\n. This was merged in #133 \n. As @PeteDuncanson mentioned, just put your data in the props directly, and ReactJS.NET will handle serialising it for you. This is exactly what the bundled sample code does: https://github.com/reactjs/React.NET/blob/master/src/React.Sample.Mvc4/Views/Home/Index.cshtml#L16-L17\n. Good idea, thanks!\nThe spacing looks wrong because the line is now using a mix of tabs and spaces. Please change it so it's all tabs.\nIt looks like there was a build error, can you please run the full build + unit tests (dev-build.bat) and ensure it works?\n. Perhaps you could load the transforms the first time they're used, if they\nhaven't already been loaded?\nSent from my mobile.\nOn May 13, 2015 8:51 AM, \"jhemminger\" notifications@github.com wrote:\n\nWell the build issue with Cassette led me down a much longer path than I\nhoped. In the end I realized that ReactEnvironment has an instance of\nIJsxTransformer which can be invoked at will and expects the Jsx Transforms\nto be loaded into the engine. So what I hoped to be an easy auto-magical no\nload of the transforms if not necessary isn't really possible. I changed\nthe load to be configured by a configuration parameter which should\nhopefully be obvious to someone that if they turn that off then try to use\nJsxTransformer it's not going to work. If you don't want another\nconfiguration parameter I can understand, but it would be nice for those of\nus who don't need the transforms to not have them loaded into the engine.\n\nReply to this email directly or view it on GitHub\nhttps://github.com/reactjs/React.NET/pull/124#issuecomment-101722438.\n. I'm going to task this over and update it to work with Babel instead (#166). I think we can just throw an exception if the config option is disabled and the user tries to use JsxTransformer. Thanks for the pull request though!\n. That's to be expected when dealing with prerelease software :)\n\nI'll try to get some time to update it based on the beta4 changes.\n. Just released 1.5.2 which updates the ASP.NET dependency to beta 4. Thanks @st1pps!\n. Are you using Webpack/Browserify, or are you listing all the required files in ReactConfig.cs? Could you please provide a small project that replicates the issue, so I can take a look?\n. Merged the pull request, thank you! :)\n. There's already a clientOnly setting that does not do server-side rendering, only client-side rendering. Perhaps this flag should follow a similar naming convention and be called serverOnly?\n\nAt last I didn't figure out how to make sure that my code lints.\n\nI don't have any experience with C# linting tools. I'll probably try to set up FxCop or something similar at some point. One thing I did notice is that this diff is using spaces for indentation - Please use tabs instead :)\n. Thank you! Sorry I took a while to get to this, I was on a flight from the USA to Australia last week and haven't gotten around to checking emails and stuff until now.\n. Sorry I didn't see this until now, I was flying from the US to Australia and haven't checked my emails for a while.\nOn Mac OS X you may need to use gcc rather than Apple's LLVM. It looks like it's a build issue in V8 itself rather than VroomJS. It may have been fixed with a newer V8 version. Unfortunately VroomJS only supports an older version of V8 and I'm not experienced with C++ at all so it'd be quite difficult for me to update it myself.\nDid you end up successfully compiling on Ubuntu once you added the cstring include?\n. Based on your last comment it sounds like you got it working. Feel free to reopen if this is still an issue for you. Thanks!\n. Thanks for this! I was going to attempt it myself but NuGet is totally broken for me after upgrading from Visual Studio 2015 CTP to RC (https://github.com/NuGet/Home/issues/692), and I haven't had time to try a total reinstall\n. Finally got NuGet working again. Merged this with some minor changes (removed the  modified  methods from JsxFileSystem as they're not actually needed. Thanks!\n. Released 1.5.2 with this update.\n. Going with Babel instead.\n. Where is the data coming from? Do you have a C# object containing your\ndata? You could pass that object as the second parameter  directly, rather\nthan wrapping it in an anonymous object.\nSent from my mobile.\nOn Jun 1, 2015 5:35 AM, \"M\u00e1rton Vincze\" notifications@github.com wrote:\n\nI have found myself in a scenario where I'm trying to pass a JavaScript\nobject literal serialized as JSON to a property of the second parameter of\nHtml.React(). Currently I'm doing this by Serializing the JSON into an\nanonym object, and using that.\nThis seems somewhat wasteful since it will get serialized internally\nanyway.\nIs there a way to just pass that JSON object to be used?\nIf not, this might be easily achieved by definig a JSON type with a string\nproperty and prepare the library for that.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/reactjs/React.NET/issues/132.\n. Try deserializing the data into a dynamic object (dynamic result = JObject.Parse(rawResult)) and pass the JObject in as a prop. I think JSON.NET should handle that.\n. Closing this out since this is a discussion rather than an issue, but please feel free to reply if you still need assistance. Thanks!\n. Thanks! Please fill in the CLA and I can merge this :)\n. Does that require Node.js to be installed? That's a higher barrier to entry than what I'd like 'out of the box', but it'd be good if it was optional. When I started working on ReactJS.NET, edge.js didn't support Linux (via Mono) which was one of my goals for 1.0. It looks like it does support Mono now, so it might be worth revisiting.\n\nFor what it's worth, CommonJS support is already possible if you use Webpack or Browserify to create a bundle that ReactJS.NET uses.\n. I do still want to take some ideas from SuperchargedReact.NET for ReactJS.NET, I just haven't had time to do so. :+1: \n\nand NodeServices where NodeServices is just an early proof of concept, but it's interesting to see Microsoft exploring this.\n\nThat's indeed very interesting, I hadn't heard about this until today. I didn't know that Microsoft were working on something similar :open_mouth: \n\nI've never been one for IRC, I was on the React slack channel for a bit but it soon turns into a long chat about what everyone is having for breakfast every morning\n\nlol\nThe Slack chat moved to a different system called Discord. I'll see if they can create a #dotnet channel to chat about all things React + ASP.NET :smile: \n. There's a Gitter channel, it's a bit... dead though. I think it's just me\nin there now :P\nhttps://gitter.im/reactjs/React.NET\n\nRegards,\nDaniel Lo Nigro\nhttp://dan.cx/ | Twitter http://twitter.com/Daniel15 | Facebook\nhttp://www.facebook.com/daaniel\nOn Wed, Dec 9, 2015 at 11:30 AM, Anders Ekdahl notifications@github.com\nwrote:\n\nI've never used discord but I'd definitely join if there was a channel to\ntalk about React + ASP.NET!\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/reactjs/React.NET/issues/134#issuecomment-163365897.\n. You shouldn't be checking in the *.generated.js files (or in general, any generated files) to source control.\n\nHaving said that, the MSBuild transform could be adjusted to only write the file if it has been modified. The simplest solution would be to add a WriteAsStringIfNotModified method to IFileSystem that would first read the file and compare whether it's changed before writing it out, and then use that here in JsxTransformer\nThe generated JS files have a hash at the start of them, so it could just compare the hash of the old output vs the new output. This would be more efficient than comparing the whole file and is probably what I'll end up doing.\n. Let me know how that goes :)\nThat should work even better with the upcoming ASP.NET 5  as you no longer need to explicitly include files in the project like you do now (it just implicitly includes all files in the folder).\n. Closing this out since I haven't had any other requests for this.\n. Unfortunately I haven't spent much time trying Flux libraries with ReactJS.NET yet. It'd be mostly similar to choosing a library for other server-side JavaScript technologies such as Node.js. Notably, singletons (like in Facebook's \"vanilla\" Flux examples) do not work. You need to have stores that are instantiated, so every request has a different instance of the store even though you're reusing the same JavaScript engine server-side.\nIn theory, any  Flux library that says it's \"isomorphic\" should work for server-side rendering.\nLet me know how you go :)\n. > that Reflux depends on a promise library that depends on the window object\nHuh, that's really strange. So the promise library doesn't work in any server-side JavaScript environment? A good promise library should work both server-side and client-side.\n\nFrom what I have read it uses a singleton which makes it not possible to use on serverside\n\nThat's what the Facebook Flux examples use, but the stores don't have to be singletons. Facebook Flux is really only a description of the pattern, and the dispatcher. Everything else is vanilla JavaScript built by you. \nI use \"vanilla\" Flux for my small personal projects too. I felt all the Flux libraries available  are too heavy. I haven't yet attempted server-side rendering with Flux though.\n. If you just want to run JavaScript, you could use JSPool or\nJavaScriptEngineSwitcher or ClearScript directly. There's some useful stuff\nin ReactJS.NET that could probably be generalised (eg. the caching of\ntransformed JSX files could be changed to a generic \"run this transformer\nand cache the result\") but the core functionality is provided by a JS\nengine.\nSent from my mobile.\nOn Jun 6, 2015 8:35 AM, \"ztsmith\" notifications@github.com wrote:\n\nI understand there are some react specific features like jsx compilation.\nBut if this is mostly just a wrapper over a Javascript engine, is there\nany reason why one wouldn't be able to use any isomorphic framework? Or\nexecute any non dom dependent javascript?\nMaybe there is a case to make a more generic library e.g. Isomorphic.NET?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/reactjs/React.NET/issues/137.\n. Closing this out since it's mainly a discussion, but feel free to comment if you have any other feedback :)\n. I suppose this means I should close #131 and instead look at how difficult it'd be to support Babel.\n. @locksmithdon You can use Babel with ReactJS.NET today via Webpack (see the documentation at http://reactjs.net/guides/webpack.html). This update would just be for when you hit .jsx files in your browser directly without using any other third-party tools, or use a .NET minification library (like Cassette or Microsoft's one)\n. @jslatts - There's some docs on Webpack (http://reactjs.net/guides/webpack.html) which I'm going to update to use Babel rather than JSXTransformer, but I'd be happy to add some docs for Browserify too.\n\nThe docs are in the same repo, the source for the Webpack one is here: https://github.com/reactjs/React.NET/blob/master/site/jekyll/guides/webpack.md\nA sample project would be great too. Something like the current React.Samples.Webpack but for Browserify.\n. Mostly done in dd752222d02b6ebd0dcdf69619a23d312d0b7f65. There's still a few things I'd like to do (eg. allow configuration of Babel options) but the basic stuff is there.\n. Hmm, I guess this has something to do with the native library (V8) used by ClearScript.\nDoes that exception have an InnerException? Try attaching a debugger to the 'real' IIS and see. If it's a remote server, you can use the remote debug functionality in Visual Studio.\n. What's the InnerException? The very innermost InnerException should have more detail.\n. You'll have to use a module loader like Webpack or Browserify if you want\nto use CommonJS modules, since there's no native .NET libraries that\nsupport them. There's some documentation on using Webpack on the\nReactJS.NET site, and lots of general tutorials online.\nAlternatively, get a non-module version of the code (often there's a\ndownload available \"for use in browsers\" for that).\nSent from my mobile.\nOn Jun 14, 2015 7:01 PM, \"Don Smith\" notifications@github.com wrote:\n\nI'm trying to use Material-UI http://material-ui.com and I'm getting is\nerror on the server-side. I've added the component I'm using (TextField\nhttp://material-ui.com/#/components/text-fields) to ReactConfig.cs and\nI'm pretty sure this is what is causing the error. Is there a way to get\nReact.NET to recognize require()? I have not disabled ES6 support because\nI'd like to use it, although Material-UI is obviously not. This is the\nfirst time I'm trying to use React.NET (still a n00b). Much thanks.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/reactjs/React.NET/issues/140.\n. V8 is optional, ReactJS.NET falls back to the MSIE JS engine if V8 is not available. You can just remove the reference to the ClearScript assemblies.\n. This is an interesting request. I could add a callback that's called when a JS engine is initialised, somewhere around here: https://github.com/reactjs/React.NET/blob/master/src/React.Core/JavaScriptEngineFactory.cs#L106. That would run for every request though, which you don't want to do.\n\nI think the issue you'll face is that JavaScript engines are actually shared/pooled between multiple requests, so you shouldn't really have any singletons. This is the same with pretty much any server-side JavaScript environment (such as ReactJS.NET but also with Node.js). You could work around that by turning off pooling, which wouldl force it to create a brand new engine for every request. This is a bit slower. The other approach would be to have a unique ID per request and store all data for that particular request in an object keyed by that ID (eg. data[uniqueID] = {foo: 'bar'};)\n\nI would somehow need to get the JavaScript engine instance that React.NET uses from JsEngineSwitcher and call Execute(\"store.initialize();\") on it.\n\nYou can do exactly that if you want to test it out. You can get the React environment via:\nvar environment = React.AssemblyRegistration.Container.Resolve<IReactEnvironment>();\nThis has an execute method to run arbitrary JavaScript.\nLike I mentioned earlier, ensure you turn off pooling if you have any global per-request data.\n. Oh good point, that would work. I think I'll add support for running some code before and after engines are obtained from the pool, it could be useful.\n\nWhat is your store doing that needs initialising? Could it not be lazy loaded when the first component hits it?\n\nThis might work too.\n. @Jarlotee - It's tricky, since the JavaScript engines are pooled and reused across instances. You could turn off pooling in the config (SetReuseJavaScriptEngines(false)) but that affects performance. ReactJS.NET is like Node in this way - The environment should be considered global. I mentioned that in my second comment on this issue \ud83d\ude04 \nIn general I haven't really thought of a good way of doing this, but I'm open to ideas!\n. It's not used internally at Facebook, it was mainly a side project for me. I have one page on my site powered by it (http://dan.cx/socialfeed.htm). I know there's a few other people that use it in production but I can't remember the sites at the moment.\nServer-side rendering performance should be pretty good if you use the JS engine pooling (which is enabled by default).\n. > The test was to send 100 000 requests through Apache Bench to them on my Windows 8 developer machine.\nIt'd be great if you could upload your benchmarking code. ReactJS.NET hasn't been heavily optimised yet so potentially there's some slow code paths that could be improved\nDid you have JavaScript engine pooling enabled? It's on by default. How many concurrent requests were you doing? By default there's an upper limit of 25 concurrent JS engines. If you have more than 25 concurrent requests, the request needs to wait in a queue until one of the engines is available.\n\nHave you done any benchmarks on the difference between rendering the same type of content with Razor and React?\n\nI haven't yet.\n\nIn your own view, would you be comfortable using this for a business critical site with moderate to heavy load?\n\nYes, as long as you load test it :)\n. Closing this out since it's just a question, but please feel free to continue the discussion if you like.\n@PeteDuncanson I'm still considering dropping JavaScriptEngineSwitcher and depending entirely on V8, which would bring a lot of the benefits of your Supercharged project.\n. @yrki\n\nI've just been running a load test with 1000 users for 3 minutes on React.Net, and it seems to get a lot of JSPoolExhaustExceptions.\n\nDefault pool size is 10 engines at startup and 25 engines maximum,  to ensure it doesn't consume an excessive amount of memory. That's most likely the bottleneck in your testing. You'll need to increase those for higher concurrency (SetStartEngines and SetMaxEngines in your ReactConfig)\n. Hmm, I wonder how this would work. What language is the TypeScript compiler written in? Can I somehow embed it in ReactJS.NET?\n. Closing this out since I think TypeScript is outside the scope of ReactJS.NET at the moment, and I won't get enough time to implement it. Personally I use Flow, and Flow types are already supported by Babel.\nUnless someone wants to submit a pull request to add support! I'm always happy to accept pull requests :)\n. Is it back up now? I'm currently on vacation with very limited internet\naccess. I remotely rebooted the server. I'll investigate further once I'm\nback.\nSent from my mobile.\nOn Jul 7, 2015 12:48 AM, \"Nomeasmo\" notifications@github.com wrote:\n\nVote +1\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/reactjs/React.NET/issues/146#issuecomment-119125766.\n. This looks pretty good, please use tabs rather than spaces for indentation though. Once you change that, I'll merge this.\n. There's still spaces around, but I can fix them separately. I'll try to push a new release soon - In the meantime you can run the dev build (dev-build.bat) and use the NuGet packages it builds.\n. Sorry for the delay in replying to this, I didn't see it. I've pushed an update to ReactJS.NET that updates it to use Beta 6. It should now work fine on Visual Studio 2015 RTM + ASP.NET 5 Beta 6. Thanks!\n. Try turning off JS engine pooling (call .SetReuseJavaScriptEngines(false) in your config) and see if that resolves the issue.\n. I haven't heard back so I'm going to close this out, but let me know if you're still encountering issues. I know at least several people are successfully using ReactJS.NET on Azure, so this seems like a config issue. Turning off JS engine pooling may work around the issue :) \n. I think this may be due to the fact that ReactJS.NET had a dependency on ASP.NET Beta 4, whereas you're using Beta 5. I'm just pushing ReactJS.NET 1.5.3 to NuGet now (should be available in the next few minutes), which switches the dependencies to Beta 5. Try upgrading to 1.5.3 and let me know if that works for you. Thanks!\n. Closing this out since I haven't heard back, but let me know if you're still encountering issues.\n. Can you please try again with React.AspNet 1.5.3? 1.5.2 had a dependency on beta4 rather than beta5.\n. Thank you! :)\n. I'll push this to NuGet tonight.\n. What's the full  message and stack trace for the exception?\n. That is really strange as the library is strongly-named, so an \"A strongly-named assembly is required\" error doesn't really make sense. Do you get that error on a brand new ASP.NET 5 site? I can't replicate it on a new site in Visual Studio. What .NET version are you using?\n. This is really strange. I just posted in the ASP.NET home repo (https://github.com/aspnet/Home/issues/923) to see if the ASP.NET team have any ideas.\n\nEdit: Looks like there's an issue at https://github.com/aspnet/Home/issues/800 for it\n\nNote that the error message says it can't find 1.5.0.0 while the version number is 1.5.4.\n\nThis is expected, I only set AssemblyVersion to Major.Minor (eg. 1.5) as bugfix releases are API-compatible, so you can upgrade 1.5.3 to 1.5.4 without needing an assembly binding for code that was compiled against 1.5.3.\n. At the moment it looks like this happens if the site is called \"React\", as it conflicts with ReactJS.NET's assembly name (which is also called \"React\"). Give your site another name and this won't happen any more :) Let's follow up in https://github.com/aspnet/Home/issues/800.\n. Hmm interesting idea. I'd probably need to split ReactEnvironment.cs into several smaller classes. I'd like to do that at some point anyway, as it's pretty big at the moment. \nHave you tried using IReactEnvironment directly? Perhaps you could just call CreateComponent.  You can get it through:\ncsharp\nvar environment = React.AssemblyRegistration.Container.Resolve<IReactEnvironment>();\nIReactEnvironment is scoped to the web request; one request = one IReactEnvironment\nOn the other hand, for your use case, perhaps just using a JavaScript engine (JavaScriptEngineSwitcher or ClearScript  V8) directly is the best approach? You could just do the React.renderToString call yourself in that case.\nIt really depends on how much abstraction you want :smile: What would your ideal library handle? How much should it do vs how much would you want to do yourself?\n. > Now if I wanted to reset the environment during my development workflow, is there an easy way to do that?\nIt should already be automatically recycling the JS engines every time any of the loaded files change. You can also do config.SetReuseJavaScriptEngines(false)  in your config, which will create a new JS engine every time (slower, but you're guaranteed a fresh environment).\n\nwe might end up with a small project that manages JS engines in a performant way and React.NET would sit on top of that\n\nI already did that a while back, which resulted in JSPool :)\n. Glad to help, let me know if you have any other questions :)\n. > .. Also, wouldn't React.renderToString potentially cause Garbage Collection issues for LOH when string is greater than 85,000 bytes\nIt's possible. This is something I didn't know about! Thanks for the link. I'm not sure of a way to server render React components without renderToString though, and I'm not sure of how we could get the result from the JavaScript without transferring the whole string. Perhaps it could be stored in a JS variable and returned one piece at a time, or something like that.\n. Fix the warnings and they'll go away :stuck_out_tongue_winking_eye:  Normally warnings are things that should really be fixed.\n. Closing this out but feel free to respond if you still have questions :)\n. > but on loading the page the request to the jsx file is returning 404 \nWhat's the URL it's trying to hit? If optimisations are off then it'll be hitting the .jsx file directly, in which case you need to ensure you have the JSX handler correctly configured in Web.config.\n. Interesting... What operating system and version of IIS are you using?\nIt's strange that it's throwing a 404 even though you have the correct section in the Web.config file. I'll try to replicate this issue myself later this week when I get some free time :)\n. Thank you! For the avatars, Github also have URLs with the username (eg. https://avatars.githubusercontent.com/Daniel15?s=50), which looks nicer than having an ID in the URL :smile:  \nDo you know if this is documented on the Github site anywhere? Is it possible it'd break in the future?\n. Thanks! Sorry there's duplicate code all over the place with the example; I haven't spent much time on them.\n. What issues are you encountering? Is it throwing any errors?\n. What's your use case? Could you just create a JavaScript file containing your code, or do you want something that's dynamically generated?\n. Thanks for the bug report :) \nI recently fixed similar package restore issues in one of my other projects, RouteJs (https://github.com/Daniel15/RouteJs/blob/master/build.proj#L66-L70). I need to do the same for ReactJS.NET too. Perhaps I should generalise this stuff into shared MSBuild scripts.\nNot quite sure what's happening with that Git issue though. I'll need to see which version of Git my Windows box is using.\n. Fixed, confirmed via the AppVeyor build (which spins up a new environment for every build): https://ci.appveyor.com/project/Daniel15/react-net/build/3\n. Another thing you could try is disabling engine pooling/reuse in the\nconfig. This should not leak any memory, but it is slower as it needs to\nspin up a new JavaScript engine every time.\nSent from my phone.\nOn Sep 21, 2015 5:44 AM, \"Pete Duncanson\" notifications@github.com wrote:\n\nHi Matt,\nThe issue is with your global vars not getting cleared up properly in\nClearScript. You could try adding a bit of clean up code that runs at the\nend of your main entry point and ideally only on the server. We've had a\nfew instances where we need to do just server-side stuff and a quick check\nit the window object exists seems to do the trick. Something like this\nmight work:\nvar App = React.createClass({\nonComponentUnMount : function() {\n// Clear out anything we've put into global\ndelete MyStore;\ndelete MyLumpOfGlobalJSON;\n},\nrender: function() {\nreturn\nTesting\n}\n});\nIf you want to get fancy you can automatically loop over global vars too\nbut for the amount we create I've found it ok to just hard code them and be\nimplicit about it. Remy Sharp has a sample to get you started though,\nhttps://remysharp.com/2007/11/01/detect-global-variables\nI'm planning on moving some of our mods over to React.net but in the\nmeantime if you want to get up and running with SuperChargedReact its\npossible although I know the documentation for it is sparse at the minute.\nIt really is just two DLL's, an optional JS file and Snippet of code very\nsimilar to React.net\nPete\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/reactjs/React.NET/issues/161#issuecomment-141963004.\n. > With pooling turned on, is Clearscript/V8 isolating the javascript context between requests?\n\nAt the moment it's reusing the same context. For VroomJs (V8 on Linux/Mac) when pooling is turned off, we just use one engine and create a new context for every request. Perhaps we should do the same for ClearScript too. I'm considering dropping JavaScriptEngineSwitcher and having a direct dependency on ClearScript (for Windows) and VroomJs (for Linux and Mac) which should allow V8-specific optimisations.\n\nDo the engines in the pool get recycled periodically?\n\nJSPool has a MaxUsagesPerEngine configuration option, it might not be exposed in ReactJS.NET though :( Feel free to file a task for that if you like, or you can hack it into ReactJS.NET\n. > So on the windows side, with pooling off, a new engine is created per request?\nThat's right. I think once I drop JavaScriptEngineSwitcher I'll make it reuse the same engine and just create a new context per request.\n\nAssuming we don't do anything to create variables outside of the local scope, shouldn't these objects be available for GC immediately after the request is finished\n\nThat's right. You only need to delete global variables if you're actually creating global variables per-request. Local variables are fine.\n. If I remember correctly, JSPool forces a garbage collection regularly, when\nengines are returned to the pool.\nSent from my phone.\nOn Sep 24, 2015 5:28 AM, \"mattwoberts\" notifications@github.com wrote:\n\n@jslatts https://github.com/jslatts Re: Profiling, I wasn't using any\nof the profiling tools, since the issue was only apparent when in\nproduction - locally I could hit the page thousands of times and not spot\nmuch of an issue. For me it was just a case of turning off server rendering\nand seeing the change in memory usage.\n@Daniel15 https://github.com/Daniel15 I think I'm with you and @Daniel15\nhttps://github.com/Daniel15 re: having that split - I also looked at\nimplementing some quick-win optimisations but quickly got lost in the\nabstractions.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/reactjs/React.NET/issues/161#issuecomment-142914397.\n. @jslatts nailed it. ReactJS.NET does not provide a CommonJS-like environment. You will need to use Browserify or Webpack to make any require() statements work.\n\nIn the case of the newforms library you linked to, there's actually a standalone build in the dist directory in the repo (see the Browser bundle section of its readme). In theory, you could actually load this newforms.js file in ReactJS.NET and then use the forms global in your app code (ie. without the require statement) without having to use a module bundler. Its readme says that it's \"isomorphic\", which means it should work for server-side rendering.\nGlobals can be a bit messy though, so it's probably worth using a bundler. Personally I'd suggest learning about Webpack, it's pretty awesome. You can see React.Sample.Webpack for a sample project that uses ReactJS.NET and Webpack together.\nI'm going to close this issue since it's just a discussion, but feel free to continue commenting if you have any further questions :)\n. > If I am doing server side rendering wouldn't I need everything in both anyways? If I render on the server I still need to have that same js on the client to make it all work correct?\nYes, you need all the server-side JS on the client-side, but the reverse isn't true. You'll probably use at least some libraries client-side that can't run server-side (for example, any scripts that use AJAX, DOM, or window). That's why I suggest creating two separate bundles. Alternatively you could create a \"shared\" bundle and a \"client\" bundle - In that case you'd load the shared one server-side, and both the shared one and the client one server-side. It's simpler to just have two complete bundles though.\n\nIs there a way to have what I export match my folder structure so that it all lines up?\n\nHmm, you mean in the server-side bundle? Not sure, I'd need to think about this more. I still haven't thought much about ReactJS.NET + CommonJS modules through bundlers like Webpack. Perhaps I need better CommonJS support in ReactJS.NET to better handle modular JS files.\n. Yes, the build uses Git as the assembly version contains the Git commit hash of the code used to build the library. The build makes some assumptions about the environment, and that's one of them. I'll add it to the readme. Perhaps I should modify build.proj to skip that step if Git is not installed.\n. Added a note to the readme (https://github.com/reactjs/React.NET/commit/438c8970e28cdd1a17352a4a65841aacb74f3982).\n. Thanks, this looks pretty good. Can you please squash your commits?\n. Thanks! I'll close this one and take a look at the other pull request.\n. Fixed in https://github.com/reactjs/React.NET/commit/8ca36fba36077aa10cb88f5bbd025d810d5e2861\n. How is the test failing - What's in result when it fails?\n. Ahh, this must have broken with 4c73590b85f6d81e37e012d9b9eb5dd52bd1d148. derp. Thanks for fixing it.\n. Yeah, beta 8 only came out earlier this week, and I haven't gotten around to upgrading to it yet. I'll try to do that tomorrow. :) \n. Try run dnvm use beta7 before running dev-build.bat\n. I submitted a diff to upgrade to beta 8, however I'm encountering build errors. I posted to https://github.com/aspnet/Home/issues/999 to get help from the ASP.NET team.\n. Found a fix and merged the changes to master :+1: \n. Thanks, looks good!\n. Thanks for updating this! For the tutorial, it might be worth diffing the ReactJS.NET version to the official React version (https://github.com/facebook/react/blob/master/docs/docs/tutorial.md) to see if there's any other updates I've missed.\n. Thanks for the report, I'll take a look this weekend. This may be due to how Babel handles this compared to JSXTransformer. In the meantime, feel free to downgrade to the previous ReactJS.NET version.\n. Looks like I need to blacklist the \"strict\" transformer. From the Babel docs:\n\nWhy is this being remapped to undefined?\nBabel assumes that all input code is an ES2015 module. ES2015 modules are implicitly strict mode so this means that top-level this is not window in the browser nor is it exports in node.\nIf you don't want this behaviour then you have the option of disabling the strict transformer:\n$ babel --blacklist strict script.js\njs\nrequire(\"babel\").transform(\"code\", { blacklist: [\"strict\"] });\n\nYou could try hacking this into the ReactJS.NET Babel config: \ncsharp\n{\"blacklist\", new List<string> { \"strict\" } }\nIf you do try that out, let me know if it works :)\n. Fixed in 2.0.1, thanks for reporting!\n. Do you mean you have some code containing some JSX in a C# string, and want to compile it? You can do something like this:\nvar environment = React.AssemblyRegistration.Container.Resolve<IReactEnvironment>();\nstring result = environment.Babel.Transform(input);\nYou could instead use the TransformWithSourceMap method to get a source map too.\n. > I also try to addService by using React.AspNet, it seems conflict with some other code and caused compile error.\nWhat was the error? You need to have the ReactJS.NET services registered in Startup.cs in order to use it.\n. Sure! See HtmlHelperExtensions.cs to see how it's hooked up in ASP.NET MVC. You could just call the same methods some other way. In 0dbd639efeb1387b1b82850667953e8fd7e441e7 I added an example showing how to render a React component from within a console application. There's a bit more code than I'd like, but it does work.\nBasically, this is the code you need for server-side rendering:\nvar environment = React.AssemblyRegistration.Container.Resolve<IReactEnvironment>();\nvar component = environment.CreateComponent(\"HelloWorld\", new { name = \"Daniel\" });\nvar html = component.RenderHtml();\nYou can then use environment.GetInitJavaScript() to get the JavaScript required to initialise all the instantiated components client-side. IReactEnvironment should be a per-request singleton (that is, every request creates a new one, but that same instance is shared throughout the entire request).\nHope that helps :)\n. Already fixed in 2.0.1 released today :)\n. Is there any stack trace for that error message, or do you just see the error message with no stack? It would be awesome if you could somehow find a stack trace for the error.\nTry .SetReuseJavaScriptEngines(false) on your config and see if that helps. That will make page loads slower (it spins up a brand new JS engine on every page load) but should avoid any file locking issues.\n. How do you generate the server.js file? Are you using Webpack, or just Gulp? Can you provide a small Gulpfile that replicates the issue? I haven't seen any similar issues with Webpack.\n. Thanks for the stack trace!\nI wonder if JSPool should avoid recycling the pool of JavaScript engines until none of the watched files are locked. Currently it debounces the recycle to handle the case where there's a few changes to the same file in a short period of time. The delay could be increased (currently it's 25ms) which would work around this issue, it's a pretty hacky fix though. You could clone JSPool and build your own version with a larger value for DEBOUNCE_TIMEOUT and see if that helps\n. Interesting, I didn't know about that setting. I used MD5 because it's fast and fine to use for file hashing (doesn't need to be cryptographically secure) but it's probably fine to change it to SHA512 instead. Feel free to send a pull request :smile:\nDo you know which algorithms are allowed when FIPS-compliant algorithms are enforced? I think using whichever one is fastest would be sufficient for this use case.\n. Fixed in 96b6f56eba05ea0ab52183fee460b5e7a7392f12, thanks @RPrimrose!\n. Interesting, it sounds like Array.prototype.find is missing. I'm pretty sure V8 has native support for find though...\nTry console.log(Array.prototype.find ? 'Exists' : 'Does not exist') and see what you get? If it's missing for some reason, you can polyfill it (stick the code at https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find#Polyfil somewhere)\n. Hmm, maybe the version of V8 used by ClearScript isn't new enough to contain Array.prototype.find :( You could polyfill it - For example, see the polyfill at the bottom of the page at https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find, or this one on npm: https://www.npmjs.com/package/array.prototype.find. You'll need some polyfill if you want your code to work in older versions of Internet Explorer too :)\n. Sorry, I'm not too sure, I don't have much experience with i18n in JavaScript. This seems like a broader question though, rather than something specific to ReactJS.NET. Perhaps ask on StackOverflow? :) \n. How are you loading React? If you're loading it from a CDN, you just need to load ReactDOM in addition to React:\n<script src=\"https://fb.me/react-0.14.2.js\"></script>\n<script src=\"https://fb.me/react-dom-0.14.2.js\"></script>\n. ReactDOM shouldn't be used server-side, it's only for client-side stuff. Perhaps something is unintentionally using it server-side. Are you able to provide a stack trace of the error you're encountering?\n. To be honest I think your workaround is fine for now, even with the scary SECRET_DOM_DO_NOT_USE_OR_YOU_WILL_BE_FIRED :laughing: \nI'll probably end up doing something like this in shims.js:\nvar ReactDOM = React.__SECRET_DOM_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\nas this matches up with what react-dom.js on the CDN does.\nAt which point you could do 'react-dom': 'ReactDOM'in your Webpack externals\n. Make sure your react-server.js exposes React globally - This is also required for the React dev tools to work.  How are you building react-server.js? If you're using Webpack, you should use expose-loader to expose React.\n. :+1: \n. What differs between your production box and your dev cloud machine? Is it a different operating system?\n. Hmm, really strange that the behaviour would differ between the two then...\nDo you have a full stack trace of the error?\n. Different IE version has an effect on the behaviour of MsieJavaScriptEngine - For example you could have code that only works in newer IE versions :)\n. The MsieJavaScriptEngine is actually what executes the JavaScript code server-side; the client-side environment doesn't affect that. Normally V8 is used server-side, but the MSIE engine is used as a fallback.\nAs a test, I'd suggest doing .SetAllowMsieEngine(false) in your ReactConfig.cs, and then test that out on both your dev machine and prod machine. Most likely V8 is failing to initialise in prod for some reason, so it's falling back to the MSIE engine. Disallowing usage of the MSIE engine will show you the actual V8 error.\n. Closing this out since I haven't heard back, but please feel free to reopen this issue if you're still encountering problems. Thanks!\n. Wow, that's terrible :/ I haven't seen this yet myself, but I'll try to look into it on the weekend.\nTry calling .SetReuseJavaScriptEngines(false) in your ReactConfig.cs and see if that helps.  It will make page loads a bit slower, but it should be more reliable in this case.\n. I have a feeling this is happening because the exception is happening on a background thread. ReactJS.NET watches all files you load, and recycles the JavaScript engines if any of those files change. If any errors are encountered while loading the JS file, an exception is thrown. This approach is fine for initial load (as it's fine to throw exceptions on the request thread), but not for background stuff. I'll look into a better approach here.\n. This should only be an issue with how scripts are loaded when you use AddScriptWithoutTransform. If you instead use AddScript, the error is handled correctly (as those scripts are loaded as part of the request, if they haven't already been loaded).\n. @SoonDead  - Can you please try out the latest dev build and see if it's any better? You can add https://ci.appveyor.com/nuget/reactjs.net as a NuGet package source to get the dev packages. Use version 2.0.2-dev-20151116-0644 or higher.\n. Thanks for the confirmation!\n. This is a strange one, I've never seen that before. It sounds like V8 just thinks it's a stack overflow, but it doesn't know for sure. I'm not seeing this on my test machine running Windows 8. Additionally, I did try ReactJS.NET several months ago on Azure and it worked fine, I wonder if anything's changed since then though.\nWhat environment is this on? Which operating system and .NET version?\n. Sorry you're experiencing issues, @deevus! I'm still unsure what is causing this issue. I wonder if retrying on failure could help solve the issue.\n. There's a rendering mode that does not do server-side rendering, but still renders the JavaScript for client-side rendering. You could switch to that instead, to keep the ReactJS.NET code in place while avoiding the server-side rendering.\nSorry for the inconvenience :( I need assistance with determining what is causing this.\n. Which version of ASP.NET MVC are you using? What version of .NET are you using in Azure?\n. Interesting, I'm not sure why the React.Owin package would cause that.  Anyways, it sounds like it's fixed after uninstalling React.Owin, so I'm going to close this issue. I'll try to figure out why the OWIN package results in issues like this.\n. You need LoadBabel turned on if you ever want to hit JSX files directly. Babel will still be lazy-loaded only as needed. I could probably even remove the LoadBabel flag now as it's not really useful. Babel used to be loaded upfront as soon as the JavaScript engine was initialised, but I changed it fairly late during development of 2.0 to only load as-needed, when you actually try to transform a file (see 12b8d53da7ddffae78f1275a7ba9df543079214d). This means that if you only do AddScriptWithoutTransform, Babel will never be loaded, regardless of what the LoadBabel flag is set to.\n. Closing this out since I don't think there's anything to actually do here, as per my comment :smile: \n. I started working on native Babel 6 support in ReactJS.NET, but I'm currently blocked by https://phabricator.babeljs.io/T6643\n. > Should this not be considered a bug? \nIt's not a bug, because Babel 5 works fine. There's a bunch of changes in Babel 6 that I need to adapt ReactJS.NET to handle. Babel no longer has a \"browser\" build so I need to build my own build of Babel. Many of the Babel integrations are still using Babel 5, as is the \"try now\" page on their site.\n\nAlso, are we likely to see a fix for it anytime soon?\n\nDepends on how quickly I can determine how to get Babel 6 working. I'm the only developer on ReactJS.NET. I do appreciate pull requests though, in case anyone implements it before I get to it :smile: \nIn the meantime, you can just use Babel 5, which works fine.\n. I just committed d0b14d32daa77261be7e08f64203c30c674465ba, which upgrades to Babel 6. It should be available on the development NuGet server soon as version 2.2.0-dev.\n@drobinson-inter-est - Note that if you're already precompiling your JavaScript, your issues probably aren't related to the version of Babel bundled by ReactJS.NET (as Babel is not even loaded at runtime if you don't compile your JS using ReactJS.NET). It might be a different issue :)\n. Are you doing server-side rendering at all (ie. Html.React calls in your views)? \nIf you hit the .jsx file in your browser directly, do you see the changes? What if you press Ctrl+F5 (ie. bypass the cache)?\n. I didn't hear back so I'm going to close this out, but please feel free to reopen if you're still encountering this issue. Thanks!\n. Interesting, sounds like the source map is incorrect. For now you can disable source maps in the Chrome dev tools settings - The code won't be as pretty (as it'll show you the code after transformation rather than your original code) but should still be sufficient for debugging.\n. This should be fixed in version 2.1.2, let me know if you still experience any issues!\n. It sounds like it's using the V8 engine locally, but the MSIE engine when uploaded to Azure. V8 supports more stuff than MSIE does, and it looks like that error is coming from an Object.create polyfill. This engine switching is a source of confusion so I'm probably just going to remove the MSIE engine in a future version of ReactJS.NET.\nIn the meantime, try call .SetAllowMsieEngine(false) in ReactConfig.cs and publish your site to Azure again. It should show you the error message encountered while loading V8, rather than falling back to the MSIE engine.\n. > Can you update to the latest version of JavaScriptEngineSwitcher.V8?\nI'll do that tonight :) Created #216 to track progress. In the meantime you can just manually upgrade the package.\n\nI would suggest ReactJS.NET to update the JavaScriptEngineSwitcher.V8 to the latest version as the current one doesn't work in ASP.NET 5 \n\nGood catch! I'm running ASP.NET 5 + ReactJS.NET in production, except I'm on Linux which uses VroomJs rather than ClearScript. \n. Closing this out now that ReactJS.NET 2.2 runs V8 on Azure out-of-the-box, and @samppis added this documentation page: http://reactjs.net/guides/azure.html. Thanks!\n. Supported in ReactJS.NET v2.1.1\n. What output do you get when you run that same command yourself?\n. Closing this out since I haven't heard back, but please feel free to reopen this issue if you're still encountering problems.\n. Hey @joaker, as I mentioned via email, try look at the request to the .jsx file in your browser's dev tools and see if the response contains an X-SourceMap header. If it does, try hitting that URL and see if the source map file is being returned correctly.\n. @joaker - Okay, in that case it sounds like the source map file is being built correctly :smile:. Could you please check that source maps are definitely enabled in Chrome?\n1. Click the button with three vertical dots, next to the x at the top right of the dev tools\n2. Click \"Settings\" \n3. On the \"General\" tab, make sure \"Enable JavaScript source maps\" is ticked.\n. Since source maps are working in Firefox, and the option is enabled in Chrome, I'd say this may be a bug in Chrome. I'm not quite sure how to debug that though! Maybe try other sites or libraries that use source maps and see if they work?\n. Thanks, sounds like it was a Chrome bug of some sort then :/\n. So you were able to compile it once you added #include <cstring>? If so, I can update the code and/or the instructions.\n. Thanks, I've added the missing #include <cstring> and also updated the instructions on the site to explicitly check out V8 version 3.17.16.2. Let me know if you see any other issues. Thanks!\n. These are not regular arrow functions, they're an experimental proposal for class instance fields by @jeffmo. Experimental features like this are not enabled by default. You'll need to set Babel to stage 0 in your ReactConfig.cs:\nconfig.BabelConfig.Stage = 0;\n(this config syntax will be changing a bit with Babel 6, but it'll be configured similarly)\n. Interesting... I've got mine at C:\\Users\\danlo\\Documents\\Visual Studio 2015\\Projects\\ReactJS.NET\\ and I haven't had any issues with paths being too long. At which point of the build is the error thrown?\n. Did you run webpack first? You need to run webpack to build the bundle.\nPerhaps I should add that to the build script.\nSent from my phone.\nOn Dec 11, 2015 8:44 AM, \"mycall\" notifications@github.com wrote:\n\nIs there a setting I need to change to create this bundle? I've tried this\non two different systems, same result when I run the ReactSampleWebpack\nunder iisexpress\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/reactjs/React.NET/issues/207.\n. Ah, sounds like the build is broken for the Webpack example, and I didn't\nnotice since it doesn't run Webpack as part of the build. I'll fix it :)\n\nSent from my phone.\nOn Dec 11, 2015 9:09 AM, \"mycall\" notifications@github.com wrote:\n\ndoing so returned \"Unknown option: base.loose\" for both client.js and\nserver.js\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/reactjs/React.NET/issues/207#issuecomment-163992893.\n. The issue may be that it's using the V8 JS engine locally, but the MSIE JS engine on Azure. Basically it tries to use V8 by default, but falls back to the MSIE engine if loading V8 fails for some reason. I do know that some people are successfully using ReactJS.NET on Azure, so it should be possible to get it working. Try calling .SetAllowMsieEngine(false) in your ReactConfig, then publish to Azure again and see what exception you get.\n\nAs a side note, from ReactJS.NET 2.1 onwards you can use ReactEnvironment.Current as a shortcut for React.AssemblyRegistration.Container.Resolve<React.IReactEnvironment>() :smile: \n. > How to configure to enforce it use IE?\nYou can delete the ClearScript DLLs to force it to use MSIE.\n. Closing this out now that ReactJS.NET 2.2 runs on Azure and @samppis added this documentation page: http://reactjs.net/guides/azure.html. Thanks!\n. Do you have an example of some code that's not working properly and how you're adding the event handlers?\n. Feel free to send a pull request adding this if you want :)\nAre there any use cases that can be solved by this that can't be solved simply by adding the attributes onto the React component instead?\n. Added in #211, thanks @jovnas\n. Thanks! This looks reasonable to me. Could you please squash your commits, and then I'll merge this :)\n. Thanks!\n. This is now available in ReactJS.NET 2.2. Thanks for your contribution!\n. Can you just use Object rather than global.Object? Is there a reason you need to access it as a property on the global object? Object is a standard part of the JavaScript environment, as is Array.\n. I guess you could add global.Object = Object to the shims.js file (you'll have to build your own copy of ReactJS.NET if you do this). You could add global.Object = Object to your own script bundle, before loading lodash.\nI don't think the global object is a standard JavaScript engine thing, normally it's referenced just via Object.\n. Not that I'm aware of, I think new Function(\"return this\")() is the standard way of doing that. I could be wrong though :)\n. Hmm that's really strange... I'm not too sure what that error message means...\n. @dmitrikartashov - Are you still seeing this? I haven't seen any other reports of it so I'm going to close this out, but please feel free to reopen if you're still experiencing this.\n. Depending on how you're triggering the event, another approach is to attach an event listener in componentDidMount and unattach it in componentWillUnmount. This reverses the dependency - It means that whatever is triggering the event doesn't need to know about the component.\n. This looks pretty good. I just posted some small comments inline. Thank you so much! :smile: \n. Thanks, I pushed this to the live site: http://reactjs.net/guides/azure.html\nThis makes me think that I should probably add a better way to get a list of all the available engines...\n. Hmm, I haven't done much testing on OS X due to its small market share. My testing is mainly on Windows and Linux.\nDid you see the error message? :)\n\nFailed to initialise VroomJs. This is most likely caused by the native library (libVroomJsNative.so) being out of date or your system lacking a compatible version of V8. Please run Mono with the MONO_LOG_LEVEL=debug environment variable for more debugging information, and refer to the ReactJS.NET Mono documentation at http://reactjs.net/guides/mono.html for further debugging hints.\n\nUsing MONO_LOG_LEVEL=debug may help with determining why VroomJs isn't initialising. You need to compile the native library with a compatible version of V8.\n. Closing this out since I haven't heard back, but please feel free to reopen this issue if you're still encountering problems. Thanks!\n. This is part of Visual Studio or one of its extensions, not ReactJS.NET. You'll need to report it as a bug to Microsoft :) \n. That's really odd... The version of ReactJS.NET shouldn't affect the JSX parser in Visual Studio :confused: \n. Sorry I haven't had time to look into this yet, and I'm about to go on a  vacation from today until 13th February. Could you please try ReactJS.NET 2.1 and see if that works? \n. (2.1 is the previous version) \n. It's probably due to the upgrade to Babel 6. I'm about to go on vacation\nbut I can take a look once I'm back. Feel free to use 2.1.2 in the\nmeantime.\nSent from my phone.\nOn Feb 3, 2016 12:44 PM, \"Rosdi Kasim\" notifications@github.com wrote:\n\nI had the same error.. but when I downgraded to 2.1.2 the problem\ndisappears...\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/reactjs/React.NET/issues/220#issuecomment-179455798.\n. @ajhub\nWhat makes this machine dependent?\n\nBy default ReactJS.NET will try to use V8, and fall back to the MSIE JS engine if V8 does not initialise correctly for some reason. There's a few machine-dependent bits:\n- V8 depends on the Visual C++ 2013 runtime (msvcp120.dll and msvcr120.dll)\n- MSIE depends on the version of Internet Explorer installed\nYou can disable the MSIE fallback by doing .SetAllowMsieEngine(false) in your config.\n. I was only able to replicate issues when using the \"classic\" MSIE engine. This engine is quite old now, so I've totally disabled it in ReactJS.NET and now only allow the newer Chakra engine.\n@vincentshow  - Since you mentioned that you were trying React.Sample.Mvc4, I guess you cloned the ReactJS.NET repo and compiled it? Could you please try that again and see if it works for you now?\n. Just pushed ReactJS.NET 2.2.1 which disables the classic MSIE engine as per my comment above. Please reopen this if you still see the same error message.\n. This is strange, I wonder if it's an issue with Visual Studio rather than with ReactJS.NET. The error is in one of Microsoft's files (C:\\Program Files \n(x86)\\MSBuild\\12.0\\bin\\Microsoft.Common.CurrentVersion.targets) and I don't think I'm doing anything special with that in React.Web.Mvc4.\n. I'm using the community version of VS2015. It's free and contains all the core functionality :smile: \n. Hmm, that's not supposed to happen! You don't need those files at all, they're only used internally in ReactJS.NET. What version of Visual Studio are you using, and what version of ASP.NET?\nSorry for the delay in replying, I was on vacation.\n. Oh yeah, that sounds like a mistake. I'll fix this up soon. Thanks :)\nSent from my phone.\nOn Feb 14, 2016 6:22 AM, \"Sergey Fadeev\" notifications@github.com wrote:\n\nThese files comes from folder content from React.Core.2.2.0.nupkg, this\nis the expected behavior for content files - Nuget include content of\ncontent folder to project while installing packages.\nIf these files are completely not required in end projects using React.Net\n(I've checked, seems works fine without them) they should be excluded from\n.nupkg. Simple way to do so is to mark these files with Build Action None\nin project React.Core (right now files marked with Build Action Content).\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/reactjs/React.NET/issues/222#issuecomment-183897728.\n. Just released ReactJS.NET 2.2.1 which fixes this. Thanks for the bug report!\n. I don't have a lot of experience with OWIN or its filesystem implementations. @mandrek44 Do you have any suggestions here?\nBut while this works, it doesn't add the transformed content to the transform cache.\n\nI'm not entirely sure how to cache something based on input from a stream, as you can't really get a 'hash' of the stream. Does EmbeddedResourceFileSystem still have a concept of a file name? If so, we could have a separate cache that's keyed off the filename and have a TransformStreamWithCacheKey(Stream stream, string cacheKey) method on IBabel to handle transforming and caching it.\n. > If we agree that hashing the stream's content is acceptable let me know and I'll try and make a PR out of it.\nI think that makes sense. Feel free to send a PR my way!\n\nAlso, now that I've looked at it, EmbeddedResourceFileSystem returns null for PhysicalPath so it's probably a reasonable performance optimization to key the cache by fileInfo.PhysicalPath ?? StreamContentHash()\n\nSounds good. Please add a unit test for this :smile: \n. I like the idea of \"2014-Present\", would you be able to update this PR to use that instead? :smile: \n. Manually merged in df0313d652b339b1f6cdbf59811da219611c0973 due to a conflict in one file. Thanks for your contribution, and sorry it took me so long to reply!\n. Yep, covered in the readme. Use the full build script for the first build and the file will be generated :) \n. The issue with this approach is that Props is not immutable. In theory it could be changed between the Html.React and Html.ReactInitJavaScript calls. Even though that's pretty silly, someone may be doing it in their code. I think instead, Props should have a custom setter that also sets the serialized props.\n. I used an alternate approach in cdaf7372a364f176f1dbc2f0b4c6f3eaf1a3d75f (serialize the props in the setter rather than in GetComponentInitialiser. Thanks for the pull request though, it was a good inspiration :)\n. Looks like you got a reply in the Chutzpah repo (https://github.com/mmanela/chutzpah/issues/475) so I'm going to close this out. As an alternative, you can use React.MSBuild to compile your code, and then run the unit tests against the resulting .generated.js files.\n. What version of ASP.NET / .NET Core do you have installed? You can check by using dnvm list. You need RC1 installed.\n. Thanks, sounds like this is resolved then? :)\n. I can document common issues, and include this in the docs :) \n. You need to actually call the TransformBabel target. Try running msbuild foo.csproj /t:TransformBabel and see if that works. If it does, you should be able to change the target to <Target Name=\"TransformBabel\" BeforeTargets=\"Build\"> which will automatically run it before the build target.\n. Currently the output is always in the same directory as the input file, with a .generated.js suffix: https://github.com/reactjs/React.NET/blob/master/src/React.Core/Babel.cs#L318-L329. That's a good feature request though, maybe create a separate issue for it :) \n. I'll keep this task open for adding TargetDir support. Sorry for the delay in replying!\n. Good catch, thanks!\n. Sorry, didn't see your comment. I've got a few updates, so I'll push a new build tonight.\n. ReactJS.NET 2.3 (including this fix) was pushed on 11th April\n. Which presets do you want to use? The stage-1, react, and  es2015 (minus CommonJS modules) presets are enabled by default, and you can enable additional presets or plugins through the config:\nReactSiteConfiguration.Configuration.BabelConfig.Presets = new HashSet<string> { \"react\" };\nDefaults are set here: https://github.com/reactjs/React.NET/blob/master/src/React.Core/BabelConfig.cs#L30-L34\n. Feel free to reopen if you encounter any issues. :smile: \n. Hmm, interesting... Do you see any errors in the browser developer tools? I don't think the data-reactid should affect focus.\n. ReactJS.NET doesn't support ES6 modules (the \"export\" statement) so I suspect that could be what's causing your issue. You could try just using class anyname extends React.Component which should create anyname in global scope.\nI'd like to add module support eventually, but not people can just use something like Webpack to compile their code if they want to use modules.\n. Interesting, it should be purging the cache when the files change: https://github.com/reactjs/React.NET/blob/4c840f7e45aaf03c10f242ab723cea32acf14b0a/src/React.Core/MemoryFileCache.cs#L73-L77\nI'll take a look.\n. @defcon84 I'm having some trouble replicating this issue. I tested both with the React.Sample.Mvc6 project in this repo, as well as a brand new project. Steps were roughly:\n1. Create test.jsx containing `var test = 'Hello world 1'\n2. Hit http://localhost:49171/js/test.jsx and saw this:\n// @hash v3-911310ED098ECB155443223B0C54E4A7A74CA18E\n// Automatically generated by ReactJS.NET. Do not edit, your changes will be overridden.\n// Version: 2.2.1 (build 5682fd4) with Babel 6.3.13\n// Generated at: 5/03/2016 5:04:48 PM\n///////////////////////////////////////////////////////////////////////////////\nvar foo = 'Hello world 1';\n1. Changed the file to var test = 'Hello world 2'\n2. Refreshed and saw the updates to the file:\n// @hash v3-99CEA3EF7ED44A896E380E7582BD596BE44F0D72\n// Automatically generated by ReactJS.NET. Do not edit, your changes will be overridden.\n// Version: 2.2.1 (build 5682fd4) with Babel 6.3.13\n// Generated at: 5/03/2016 5:05:45 PM\n///////////////////////////////////////////////////////////////////////////////\nvar foo = 'Hello world 2';\nTry clearing your cache (eg. refreshing with Shift+F5) and see if that works? You may want to add asp-append-version=\"true\" to your script tag, which will make the framework automatically append a cache-busting parameter to the URL.\n. Hey @defcon84, sorry for the delay in replying. I took a look at your example project. It looks like you're using Gulp to build a site.min.js file that the site is loading. When you edit the Comment.jsx file, the server side is correctly reloading it, but the client side still receives the old site.min.js file. This file is outside of ReactJS.NET's control since it's being built by Gulp. If you wish to use Gulp to build the site.min.js file, you'll need to use something like gulp.watch to ensure Gulp rebuilds it whenever you modify any of the files. Alternatively, you can link directly to http://localhost:5000/js/Comment.jsx in dev, and only use the Gulp'd site.min.js in prod. You already have <environment> tags in _Layout.cshtml to do different things based on layout, you could do that there.\nHope that helps!\n. This repo is for ReactJS.NET, which integrates React with Microsoft's ASP.NET stack. It's not for general questions relating to React. Take a look at the support page on the React site to see how you can get support for React itself :) \nThe issue is that if you go from having four questions/forms to having five, React doesn't know which question is the new one. In your example above, there's several possible things that could have happened. What actually happened is that \"A2\" was inserted below the first question. From our perspective, that's obvious. However, how is React supposed to know? You could have renamed \"B\" to \"A2\", \"C\" to \"B\", \"D\" to \"C\", and appended a new \"D\" to the end of the list, and in fact this is how React is treating it in your repro. React can't tell simply from an array of components where each component has moved. It gets more complicated if you rearrange the questions, for example if you move \"D\"  to the top and then append a new question to the bottom.\nThis is what keys aim to solve. The key is something that does not change between renders. It's used to determine if any components have moved around. Using the keys, React is able to know that \"A2\" was newly-inserted, and everything else has just moved down. I'd suggest using some sort of immutable identifier as the key. Database IDs make good keys. Failing that, you could use the title as the key (\"A\", \"B\", \"C\", \"D\", \"A2\") as long as there's no duplicates. Keys need to be unique.\nYou can read more here: https://facebook.github.io/react/docs/multiple-components.html#dynamic-children\nHope that helped! I'm going to close this out since the question doesn't specifically relate to ReactJS.NET.\n. So is this an issue with ReactJS.NET, or was it just because the first build never finished for some reason? Can you consistently replicate the issue?\n. Could you please adjust the indentation? This project uses tabs for indentation, not spaces. All the lines you've modified are using spaces :smile:  If you install the EditorConfig Visual Studio extension, it will automatically use the correct settings.\nIt looks like some unit tests are failing: https://ci.appveyor.com/project/Daniel15/react-net/build/89\n. Interesting, not sure why adding the IocPerRequestDisposal in the Web.config would solve it. I dynamically register that module (see https://github.com/reactjs/React.NET/blob/cbc2f188160f496fda6db325fa584be665ca4dd9/src/React.Web/WebInitializer.cs#L31), perhaps that's not working properly on Azure. I do know people have gotten ReactJS.NET working on Azure in the past.\n. How do you deploy to Azure? Is there an option to recycle the app pool on deploy? That might solve the issue too.\n. Sorry about that, looks like automatically publishing the site is broken, so I manually deployed the site. It should be good now!\n. Yeah, unfortunately this seems like a Babel issue. I'm going to close this out in favour of the Babel issue you linked to above, and once it's fixed in Babel I can release a new build of ReactJS.NET that includes the fix. Thanks for reporting it :)\n. ReactJS.NET 2.3 upgrades the version of Babel, which should fix this issue.\n. > and other files seem to not be referencing the SharedAssemblyVersionInfo.cs file correctly\nDid you read the readme? :) \n\nWhen building your own copy of ReactJS.NET (for example, if implementing a new feature or fixing a bug), your first build always needs to be done using the build script (dev-build.bat) as this generates a few files required by the build (such as SharedAssemblyVersionInfo.cs). Once this build is completed, you can open React.sln in Visual Studio and compile directly from Visual Studio.\n. Sorry for the delay in replying, @joshburgess!\nwhile at the same time integrating webpack with all hot reloading & build functionality fully working?\n\nWebpack hot reloading runs a completely separate server on a separate port, purely for serving the JavaScript files. Using ASP.NET MVC to render the page and Webpack dev server to serve the JavaScript should work with no issues, you just need to change your <script> tag to load the script from the Webpack dev server.\nI'm going to close this issue since it's more of a conversation rather than a bug report, but feel free to post more comments if you like :)\n. Do you see an error message? This error is pretty hard to diagnose without\nan error message or stack trace.\nSent from my phone.\nOn Mar 15, 2016 8:13 AM, \"Eadbhard \u00c1lvarez\" notifications@github.com\nwrote:\n\nHi there! I've followed the tutorial using MVC 6 RC1 and everything worked\nperfectly. However, when I reached the Optimizations section and tried SSR,\nthe app stopped working. I've modified the .jsx file and the view to look\njust like the tutorial's, added config.AddScript(\"~/Scripts/Tutorial.jsx\");\nto StartUp.cs, and modified the Index() action method in the Home\ncontroller to pass _comments (now declared in the HomeController class) as\nthe View's model.\nWhen I run the app I get a 500 (internal server error) in Chrome's console.\nAny ideas? Thanks in advance.\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly or view it on GitHub:\nhttps://github.com/reactjs/React.NET/issues/245\n. I'm going to close this out since I haven't heard back, but please feel free to reopen this issue once you've added extra information (eg. stack trace). Thanks!\n. Thanks!\n. transform-decorators-legacy was added to babel-standalone in 78ad50a8068771b9fa07ac162d37f910d9245b44, so I just need to update the version of babel-standalone bundled with ReactJS.NET.\n\nCurrently, there's no way to use custom Babel transforms with ReactJS.NET if they're not bundled with babel-standalone.\n. This is expected. setTimeout and setInterval are part of the BOM (Browser Object Model) which doesn't exist in a server-side rendering environment, although I think Node.js polyfills them. Any non-Node.js server JavaScript environment will have the same issue. You'll need to remove the setInterval or setTimeout calls from your code to use server-side rendering.\n. As mentioned in that article, you shouldn't need any workarounds for running V8 in Azure any more. ReactJS.NET 2.2+ uses a version of JavaScriptEngineSwitcher + ClearScript that should work out-of-the-box on Azure.\n. What version of JavaScriptEngineSwitcher is installed to your site? I wonder if there's a conflict with some newer version.\n. Ah, I think I know what's happening. JSPool.JsEngineWithOwnThread implements IJsEngine, and EmbedHostObject was added to that interface in JavaScriptEngineSwitcher 1.5. Since JsEngineWithOwnThread does not implement EmbedHostObject, it's failing. I'm guessing you have an assembly redirect in Web.config, otherwise you'd be seeing a more useful error message about a version mismatch.\nI'll upgrade to the latest JavaScriptEngineSwitcher which should resolve this.\n. Try upgrading to JSPool version 0.4.0 and let me know if you still see this issue :)\n. Are you logging exceptions that occur in the site? Can you see if there's any exceptions relating to the JavaScript engine?\n. Thanks for the information! I switched _metadata to a ConcurrentDictionary in JSPool 0.3.2, which should fix this issue. Let me know if you still encounter it.\n\nRace condition: consider where engine is released and requested from different thread, one thread releases, the other request, but fails at this.EngineCount < this._config.MaxEngines due to this.EngineCount not being decrement yet.\n\nI considered this, but creation of a single extra JavaScript engine wasn't too much of a concern.\n. You can turn off pooling (.SetReuseJavaScriptEngines(false) in the config) which will avoid the issue but it'll also be slower, as every request will need to create a brand new JavaScript engines and load all the code all over again. It sounds like JavaScript engines aren't being returned to the pool correctly for some reason, or you're actually exhausting the pool (which can happen if you have more than 25 simultaneous requests, as that's the default config for number of engines). How often are you seeing this error?\nYou can increase the maximum engine count using SetMaxEngines in the config.\n. Hmm, interesting. Thanks for looking into it! I wonder if there's cases where EndRequest is not actually called at the end of the request. Could you try explicitly registering the IocPerRequestDisposal module in your Web.config and see if that helps? Something like this should work in the httpModules section:\n<add name=\"IocPerRequestDisposal\" type=\"React.Web.WebInitializer.IocPerRequestDisposal\"/>\nThe other thing you could try is adding an EndRequest event handler in Global.asax.cs and calling HttpContextLifetimeProvider.DisposeAll() there.\nDid you see any exceptions? I wonder if some sort of exception would cause the disposal to fail.\n. > It would be awesome if there was a way for Html.React to acquire and free and engine immediately after the component has been rendered, instead of holding on to it for the entire request. \nHmm, it might be possible, although currently ReactJS.NET assumes that the ReactEnvironment (and thus the JS engine) is scoped to the request, so you'd have to double-check that everything still works as expected if that assumption no longer holds true. I don't have any plans on changing this, although I'm happy to accept pull requests :)\n. Yes, ReactJS.NET doesn't use React 15 yet. I'll update it shortly.\nSent from my phone.\nOn Apr 11, 2016 7:01 PM, \"Jarrod Mosen\" notifications@github.com wrote:\n\nhttps://facebook.github.io/react/blog/2016/04/07/react-v15.html\nReact 15 changed the way components are rendered (regarding react-id\netc), which causes this error for me when using @Html.React:\nWarning: React attempted to reuse markup in a container but the checksum was invalid.\nThis generally means that you are using server rendering and the markup generated on the\nserver was not what the client was expecting. React injected new markup to compensate which\nworks but you have lost many of the benefits of server rendering. Instead, figure out why the\nmarkup being generated is different on the client or server:\n (client) <div data-reactroot=\"\" data-reactid\n (server) <div data-reactid=\".1hrhaz20mio\"\nWhen I downgrade to React 0.14.x, this is resolved.\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly or view it on GitHub\nhttps://github.com/reactjs/React.NET/issues/252\n. This may be fixed by f450bac13a4eb1e643144733ce6e70d01702dad7. Could you please try it out and let me know if that fixes it? The build should be available on the development server shortly (see http://reactjs.net/getting-started/download.html#development-builds for instructions).\n. Please let me know if you still encounter this, it should have been fixed in ReactJS.NET 2.4.0\n. Seems reasonable to me! \n\nIt looks like there's a number of \"invisible\" changes that aren't actually related to this diff (looks like it might be changing the line endings from \\r\\n to \\n or vice versa. Could you please revert those? We can fix those up in a separate commit :) \n. It looks like a unit test is failing.  Can you please take a look? https://ci.appveyor.com/project/Daniel15/react-net/build/108\n\nMvc\\HtmlHelperExtensionsTests.cs(39,27): error CS0854: An expression tree may not contain a call or invocation that uses optional arguments [C:\\projects\\react-net\\src\\React.Tests\\React.Tests.csproj]\nMvc\\HtmlHelperExtensionsTests.cs(64,27): error CS0854: An expression tree may not contain a call or invocation that uses optional arguments [C:\\projects\\react-net\\src\\React.Tests\\React.Tests.csproj]\nMvc\\HtmlHelperExtensionsTests.cs(86,27): error CS0854: An expression tree may not contain a call or invocation that uses optional arguments [C:\\projects\\react-net\\src\\React.Tests\\React.Tests.csproj]\nDone Building Project \"C:\\projects\\react-net\\src\\React.Tests\\React.Tests.csproj\" (Rebuild target(s)) -- FAILED.\n\nYou can run the dev-build.bat file which will build the project and run the unit tests. Please ensure the bundled example site (React.Sample.Mvc4) still works fine as well.\n. Thanks \ud83d\ude04 \n. Will try to do that soon :)  In the meantime, you could use the latest development package (see http://reactjs.net/getting-started/download.html#development-builds)\n. This has been included in the 2.4 release (http://reactjs.net/2016/05/2.4.0-release.html). Thanks for your contribution!\n. I think NuGet should be asking whether you want to override the file? As far as I'm aware, I'm handling this the same way that every other NuGet package that bundles a default config handles it.\n. XMLHttpRequest only exists in browsers, not in server-side JavaScript as in ReactJS.NET. You can only use XMLHttpRequest in componentDidMount (only called client-side), not componentWillmount (which is called both server- and client-side). If you want to load data server-side, you'll need to load it in your C# code and pass it into the component via props.\nGoing to close this issue since it's just a discussion question, but feel free to comment if you have any other questions :)\n. Hey @smithybc, are you seeing any error messages, or are the scripts just not being transpiled? Do you see the ReactJS.NET comment header at the top of the output file?\n. @blandau - ReactJS.NET does not support JavaScript modules at this point in time. If you want to use modules, you'd need to use a bundler like Webpack or Browserify. If you want to just use ReactJS.NET, you can't use ES6 modules.\n. Try looking at the LoaderExceptions property on the exception to see what the actual error message is.\n. Closing this out as I haven't heard back, but please feel free to reopen this issue if you're still encountering problems.\n. Hmmm, interesting. What does GeneratedScripts/JumboTron.js look like? I wonder if it's exposing the globals in a way that works in a browser but not in server-side rendering.\n. Interesting... Does it install on 4.5 fine? I might just need to update the project.json, currently it's using dnx451: https://github.com/reactjs/React.NET/blob/master/src/React.AspNet/project.json#L31\n. If you do want to use ReactJS.NET on an MVC 5 project, React.Web.Mvc4 is the package you want :)\n. See the readme. They're all generated files. Run dev-build.bat to perform a full build, which will generate them. You'll then be able to build in Visual Studio directly.\n. Which version of ASP.NET 5 do you have installed? I've only tested with RC1 so the build may not work if you're using an unstable/nightly version.\nWhat were the npm errors you saw?\n. Thanks!\n. Unfortunately, this won't be possible until there's a JavaScript engine that runs on .NET Core. Currently, the main engines (V8 via ClearScript and VroomJs, and Chakra) don't support .NET Core. It'd be worth following up with the ClearScript team to see if they're planning on supporting .NET Core.\n. That's bizarre... All those packages definitely exist! Do you have custom NuGet sources configured? What happens if you try to install one of those packages in a brand new project in Visual Studio?\n. Really strange that it works on a blank project... to me this sounds like a NuGet issue rather than a ReactJS.NET issue :confused: \n. Looks like the older version of NuGet I had bundled in tools\\NuGet\\NuGet.exe no longer works properly. I've upgraded it to a newer version and it should be fine now. I can probably just totally delete it and rely on the user to have a locally-installed version of NuGet.exe, but this will do for now.\n. Thanks!\n. I'll do a release soon, in the meantime you could use the latest development build from the CI server (https://ci.appveyor.com/nuget/reactjs.net/). See http://reactjs.net/getting-started/download.html#development-builds for instructions.\n. This has been included in the 2.4 release (http://reactjs.net/2016/05/2.4.0-release.html). Thanks for your contribution!\n. Looks like I need to change \"dnx451\" to something else, although the document explaining these identifiers is super confusing: https://github.com/dotnet/corefx/blob/master/Documentation/architecture/net-platform-standard.md\nBasically I want the package to be compatible with .NET Framework 4.5+ but NOT with .NET Core (as some of the dependencies don't run on .NET Core). \"dnx451\" used to do that, but I have no idea which one to use now.\n. What's the exception?\nFor the xproj not creating a NuGet package, it's probably worth creating a\nbrand new .NET Core class library and see if that produces a NuGet package\non build. If so, diff the xproj files and see what differs.\nSent from my phone.\nOn May 20, 2016 9:39 PM, \"Shiki Byakko\" notifications@github.com wrote:\n\nJust an update, I was able to make React.Sample.Mvc6 run, but it is giving\nme an unhandled exception first on var resultJson =\nengine.CallFunction(function, args); from JavaScriptEngineUtils.cs\nAfter that it seems to run fine.\nSince now on RC2 xproj doesn't seem to be creating a nupkg file from a\nfull .NET Framework class library, I transformed into a csproj and tried to\nmake the nupkg the same way the other projects do it, but it seems that\nthere is a bug in the current version of NuGet that gives you an error when\nyou use RC2 Core libraries inside a full .Net Framework project, so still\nno package.\nFor more info on this bug take a look at NuGet/Home#2754\nhttps://github.com/NuGet/Home/issues/2754\n\u2014\nYou are receiving this because you commented.\nReply to this email directly or view it on GitHub\nhttps://github.com/reactjs/React.NET/issues/268#issuecomment-220583830\n. Thanks for investigating! Could you please send a pull request with your changes, so I can take a look and merge them in? :smile: \n. Fixed with #271 - Will try to push to NuGet soon.\n. What version of ASP.NET 5 are you using? I've only tested with RC1. I know\nRC2 came out recently, perhaps it has some breaking changes.\n\nSent from my phone.\nOn May 18, 2016 11:08 PM, \"JesperTreetop\" notifications@github.com wrote:\nI'm getting this too while using a (full) .NET Framework with this\ndeclaration in project.json: \"frameworks\": { \"net452\": { \"imports\": [\n\"dnx451\" ] } }\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly or view it on GitHub\nhttps://github.com/reactjs/React.NET/issues/269#issuecomment-220020320\n. Try cloning the ReactJS.NET repo, upgrading all dependencies from RC1 to\nRC2, and see if that helps.\nSent from my phone.\nOn May 18, 2016 11:12 PM, \"JesperTreetop\" notifications@github.com wrote:\n\nI'm using RC2. Looking at this and trying to isolate anything strange, I\nthink it may be that JSPool's NuGet package uses the Client profile of .NET\n4.0.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly or view it on GitHub\nhttps://github.com/reactjs/React.NET/issues/269#issuecomment-220021470\n. @frankbaum - I've only seen this issue for ASP.NET 5 (MVC 6) projects, not MVC 4. What is the exact error message you're seeing?\n. I haven't seen any reports of this in a while, so I suspect there was some bug in NuGet. Please let me know if you still encounter it.\n. Thanks! The only issue I can think of is if someone is relying on global state - For instance, if one component's render function sets a global variable, and then another component expects that variable to be set. I'd like to think that that's a rare use-case though. And in cases like that, the user can just disable engine pooling.\n\nCould you please add a unit test, at least for the ReturnEngineToPool method (and ideally the HTML helpers, if it's not too difficult to write tests for them)?\n. I'd be happy to accept pull requests to JsPool if you're willing to submit them \ud83d\ude03 . Thanks so much for working on this! Just a few small comments. Please use tabs rather than spaces in .cs files :smile: \nPlease leave a comment once you update the pull request, unfortunately Github doesn't send notifications for updates to pull requests.\n. Thank you so much, this is a fantastic pull request. I've got a few of my own projects to upgrade from RC1 to RC2, and this PR is a good example that I can follow for the other projects :smile: \n. Hey @ShikiGami, I'm having trouble building this on my computer:\nErrors in C:\\src\\ReactJS.NET\\src\\React.AspNet\\React.AspNet.xproj\n      React.AspNet 2.3.0 is not compatible with .NETFramework,Version=v4.5.1.\n      Some packages are not compatible with .NETFramework,Version=v4.5.1.\nHowever, I see that it's working fine on AppVeyor, so I guess it should be working. Any ideas?\n. Strangely I can't replicate that issue any more. \u00af_(\u30c4)_/\u00af\n@wassim-azirar  - It's already been merged, you can use the packages from the development server if you like (details at http://reactjs.net/getting-started/download.html#development-builds)\n. Yeah, not all dependencies are available for .NET Core (eg. currently there's no JS engine that runs on .NET Core) so you need to use the full .NET Framework.\n. This has been included in the 2.4 release (http://reactjs.net/2016/05/2.4.0-release.html). Thanks for your contribution!\n. @pauldotknopf  - That's great news! I should probably update JsPool to have a .NET Core build, then we should be able to get ReactJS.NET running on .NET Core :)\n. This should work, it should JSON serialize Model. Are you seeing any errors?\n. Closing out this issue as it's stale.. This is expected at the moment. There's currently no JavaScript engine that runs on .NET Core. You will need to switch to using the full .NET Framework (\"net451\" rather than \"netcoreapp1.0\" in your project.json). Hopefully someone can get Clearscript running on .NET Core at some point. \n. It seems like you should be able to use JavaScriptDateTimeConverter for this: http://www.newtonsoft.com/json/help/html/datesinjson.htm. You can set the JsonSerializerSettings through your ReactSiteConfiguration (the SetJsonSerializerSettings method). This seems like a question about JSON.NET (Newtonsoft.Json) rather than ReactJS.NET specifically.\nI'm going to close this out as it's a discussion, but feel free to leave a comment if you have any further questions about this :smile: \n. Duplicate of #275. This is expected at the moment. There's currently no JavaScript engine that runs on .NET Core. You will need to switch to using the full .NET Framework (\"net451\" rather than \"netcoreapp1.0\" in your project.json). Hopefully someone can get Clearscript running on .NET Core at some point. \n. I remember seeing a comment where someone mentioned they got VroomJs running on .NET Core. I haven't had time to test that out myself though, but that is definitely one option :)\n. Can you please try hitting http://localhost:9450/Scripts/Tutorial.jsx in your browser and see what the 500 error is?\n. Issues around loading ClearScript.V8 should be fixed with ReactJS.NET 3.0, please upgrade and let me know if you still encounter issues \ud83d\ude04 \n. I've seen this error myself several times, but only when using the MSIE JS Engine. I reported it to the developer of the MSIE JS engine library here: https://github.com/Taritsyn/MsieJavaScriptEngine/issues/7\nAs for getting ClearScript working, several people have done that with ASP.NET Core in the past, I haven't tried it myself recently though. Here's an example where @samppis got ASP.NET 5 + ReactJS.NET + ClearScript running on Azure: https://github.com/reactjs/React.NET/issues/198 along with his blog post at http://www.samulihaverinen.com/web-development/dotnet/2016/01/19/how-to-run-clearscript-v8-javascript-engine-in-azure/ and the documentation he wrote at http://reactjs.net/guides/azure.html\nThat was around either Beta 8 or RC1 though. If I get some free time, I'll see if anything has changed with RC2 that would cause this to break.\n. Hey thanks @brentarias, that's a good lead. Maybe something in the JavaScript engine initialisation is causing the error... Perhaps a race condition or something.\n. You can disable the MSIE engine by calling .SetAllowMsieEngine(false) in your ReactConfig for ASP.NET 4, or when adding the middleware for ASP.NET Core.\n. For anyone encountering this error, could you please try upgrading the MsieJavaScriptEngine package to ~~1.7.4~~ 1.7.2 and see if it still occurs? Its developer has mentioned that there's a potential fix in this version of MsieJavaScriptEngine.\nThanks!\n. Oops, sorry, I meant MsieJavaScriptEngine 1.7.2.\nI'll probably just drop MSIE support soon, or change it to only use the new open-source release of Chakra.\nI had another look at ClearScript, and the only reliable way I could find to copy over the ClearScript DLLs in an ASP.NET Core project without checking them into the project repo was to have an ugly xcopy postcompile script in project.json:\n\"scripts\": {\n    \"postcompile\": [\n      \"xcopy /Y C:\\\\Users\\\\Daniel\\\\.nuget\\\\packages\\\\JavaScriptEngineSwitcher.V8\\\\1.5.2\\\\content\\\\ClearScript.V8 %compile:RuntimeOutputDir%\\\\ClearScript.V8\\\\*\"\n    ]\n  }\nThis is super-ugly since it has the local NuGet package path hard-coded, but it seems to work fine. Alternatively, just copy them to your project's root directory then use copyToOutput like @anatolitrifonov  mentioned above.\nDoing something like that and also adding .SetAllowMsieEngine(false) to the config should work to avoid this issue.\n. Sorry I took so long to get around to this issue! I've been pretty busy :disappointed: \nI just wrote a blog post summarising this issue: http://reactjs.net/2016/08/protected-memory-exceptions-and-dotnet-core.html. Basically, switching to V8 appears to fix the issue in every case I've seen. It's bit  tricky for ASP.NET Core projects as you need to update them to properly copy over the ClearScript.V8 directory, but I've included instructions in the blog post. Luckily, that issue will go away with JavaScriptEngineSwitcher 2.0, which will handle this in a different way.\nI'm going to close out this issue due to the fact that I haven't seen it occur at all once switched to V8 instead of MSIE. Please feel free to reopen it if you still see this exception even after switching to V8. For instructions on how to use V8, refer to the site at http://reactjs.net/2016/08/protected-memory-exceptions-and-dotnet-core.html.\n. @mwethington - Could you please provide a stack trace? So far I've only seen this error with the MSIE JS engine in the stack trace.\n. @orobert91  - Did you try upgrading to the very latest JavaScriptEngineSwitcher?. Duplicate of #275. This is expected at the moment. There's currently no JavaScript engine that runs on .NET Core. You will need to switch to using the full .NET Framework (\"net451\" rather than \"netcoreapp1.0\" in your project.json). Hopefully someone can get Clearscript running on .NET Core at some point. \nI remember seeing a comment where someone mentioned they got VroomJs running on .NET Core. I haven't had time to test that out myself though, but that is definitely one option :)\n. >  why does the main ReactJS.Net site declare that ReactJS.Net is now ready for RC2?. The official site says it has been available for RC2 since May 24th.\nYou're conflating ASP.NET Core and .NET Core :) ReactJS.NET works fine with ASP.NET Core, but you must use the full .NET Framework (net451 in your project.json). It does not work with .NET Core at this point in time.\n. > as of RC2, it is no longer possible to make an assembly for ASP.NET Core that is incompatible with .NET Core\nThat's not true :)\nA project with net451 in its project.json will only execute on .NET Framework, not on .NET Core. See the table at https://github.com/dotnet/corefx/blob/master/Documentation/architecture/net-platform-standard.md, and the issue at https://github.com/aspnet/Hosting/issues/745 where someone asked a similar question.\nTo make a website that runs on .NET Framework rather than .NET Core, you need to add net451 to its framework section in project.json, and ensure netcoreapp is not specified there. Here's an example site (my personal site/blog) that uses ASP.NET RC2 on .NET Framework: https://github.com/Daniel15/Website/blob/master/Daniel15.Web/project.json. The sample site bundled with ReactJS.NET also uses .NET Framework rather than .NET Core: https://github.com/reactjs/React.NET/blob/master/src/React.Sample.Mvc6/project.json\nI'm using .NET Framework on my personal site due to ReactJS.NET, bit also due to other things like usage of System.Drawing which does not exist on .NET Core. I'll probably move over to .NET Core eventually.\n\nboth .NET Core and ASP.NET Core have been merged into one runtime\n\n.NET Core is the actual runtime (including the garbage collector and core libraries), whereas ASP.NET Core is built on top of that. ASP.NET Core runs on top of both .NET Core and .NET Framework 4.5.\n. I'm really confused about the performance counter error, as ReactJS.NET does not use performance counters. It looks like that exception is actually coming from the .NET runtime (System.Runtime.Caching.MemoryCache as per your stack trace) which is really bizarre.\n\"'Components' is undefined\" sounds like an error in your code, not an error in ReactJS.NET itself.\n\nDoes someone have a working example that consists of:\n\nThis repo has an example of ASP.NET Core RC2 + server-side rendering, and an example of Webpack + server-side rendering, but no combination of the two. Perhaps it's worth updating React.Samples.Webpack to use ASP.NET Core. \nCan you try cloning this repo, building (run dev-build.bat for the first build), and seeing if React.Samples.Webpack works for you?\n. Looks like the performance counter error was also reported here: https://github.com/dotnet/corefx/issues/5160\n. Hi @brentarias! There's a separate page at http://reactjs.net/getting-started/aspnet5.html that documents what's needed to use ReactJS.NET with ASP.NET Core. I do need to update the page a bit as it was written around the time of ASP.NET 5 Beta 8, but it should still mostly be relevant. It does document where to insert the middleware (above UseStaticFiles).\nI added that page when ASP.NET 5 wasn't very popular. Now that it's growing in popularity, I should link to it from the tutorial, or even update the tutorial to have two versions (one for ASP.NET 4 and one for ASP.NET Core).\n. Tutorial has been updated for ASP.NET Core\n. The script that you're loading is trying to use HTMLElement, which is part of the Browser Object Model and thus doesn't exist in any server-side JavaScript environment (it doesn't exist in Node.js either). The issue is at line 61033 column 36 of ~/build/server.bundle.js (see final line of the exception for the line and column numbers). You may need to see if the developer of ag-grid has a version that's suitable for server-side rendering.\nClosing this out since it's a discussion rather than a bug with ReactJS.NET, but please feel free to comment if you have any other questions :)\n. Wow, somehow I missed the announcement that the RTM version is out. I'll get this updated soon.\n. Fixed in #287, thanks @ShikiGami! You can install version  React.AspNet 2.4.1-dev-20160628-1635 or above from the development/build server to install the new build. I'll do a proper release soon :)\n. Pushed this as version 2.5, will update documentation later today.\n. Nice, thanks! I'll wait and see if the AppVeyor build succeeds. AppVeyor may need to update something at their end, but I just want to see if the CI build succeeds before merging :) \n. Success! :smile: \n. You can install version  React.AspNet 2.4.1-dev-20160628-1635 or above from the development/build server to install the new build. I'll do a proper release soon :)\n. Pushed this as version 2.5, will update documentation later today.\n. Docs have been updated, see the new tutorial at https://reactjs.net/getting-started/tutorial.html. \n. Hmm, this is super tricky to debug without looking at the LoaderExceptions property of the exception, as that's where all the useful information is.\n. Closing this since I never heard back, but feel free to reopen if you still need assistance with it. It would be ideal to get the LoaderExceptions in order to debug this further.\n. Interesting, I wonder if upgrading the dependency would be enough to make this error go away...\n. Sorry about that, looks like I forgot to push the changes to the repo. The only change in 2.5 is adding support for ASP.NET Core 1.0. This change is not relevant for React.Web.Mvc4, so don't worry too much :)\nAt the moment, I use the exact same version number for every package, so sometimes the version number is incremented even if there's no changes in that particular package. I might change it in the future.\n. release-2.5.0 has been tagged in the repo for a while, closing this issue. Thanks!\n. Interesting. This should be possible, we'd just need a JavaScriptEngineSwitcher wrapper around JavaScript.net.\nI created an issue for the JavaScriptEngineSwitcher project to add support for JavaScript.net: https://github.com/Taritsyn/JavaScriptEngineSwitcher/issues/17\n. This is the response I got over in the JavaScriptEngineSwitcher repo:\n\nThis is yet another wrapper around V8. Not updated for more than a year, and, most likely, will not support of .NET Core.\nMoreover, \u201cWhich .NET JavaScript Engine is the fastest?\u201d review is already old - 18 June, 2015.\nIn addition, I have a negative experience of using the Noesis.Javascript.\nTherefore, I see no reason to create module for it.\n\nClosing this out - You can follow up with the JavaScriptEngineSwitcher developer at https://github.com/Taritsyn/JavaScriptEngineSwitcher/issues/17 if you like.\n. @RichardD012 is working on porting the dependencies as well as ReactJS.NET itself to .NET Core :smile: \n. Now that JavaScriptEngineSwitcher officially supports ASP.NET Core, I'm going to release an official build of ReactJS.NET for ASP.NET Core. First step is an official release of JSPool for ASP.NET Core, which I've started working on. The JavaScriptEngineSwitcher release is just an alpha version, so this will probably be an alpha version too.\n. First step is done, I just added a .NET Core build for JSPool here: https://github.com/Daniel15/JSPool/commit/4e1ecb28c74ac136cb5b926d93f30f7dc4e04113. I just need to do more testing, and then update ReactJS.NET to use it too.\nSince JavaScriptEngineSwitcher 2.0 is currently an alpha release, this will also most likely be labelled as an alpha too.\n. All tasks for ASP.NET Core support are being tracked in this milestone: https://github.com/reactjs/React.NET/milestone/4\n. I just released ReactJS.NET 3.0 RC1, which has support for .NET Core. Documentation and an updated tutorial will come before the final release. :smile: \n. Stable release of ReactJS.NET 3.0 is out, with support for .NET Core: https://reactjs.net/2016/10/3.0.0-release.html\n. @chikehenderson - Please try with ReactJS.NET 3.0 and let me know if you still encounter issues. You might find the tutorial useful: https://reactjs.net/getting-started/tutorial.html\n. Good catch @chriscamplejohn! Would you like to send a pull request to add that to the documentation?. Sorry for the delay in replying!\nThe DLLs are automatically copied over with 'classic' ASP.NET 4.x, but not with ASP.NET Core. I had another look at ClearScript, and the only reliable way I could find to copy over the ClearScript DLLs in an ASP.NET Core project without checking them into the project repo was to have an ugly xcopy postcompile script in project.json:\n\"scripts\": {\n    \"postcompile\": [\n      \"xcopy /Y C:\\\\Users\\\\Daniel\\\\.nuget\\\\packages\\\\JavaScriptEngineSwitcher.V8\\\\1.5.2\\\\content\\\\ClearScript.V8 %compile:RuntimeOutputDir%\\\\ClearScript.V8\\\\*\"\n    ]\n  }\nThis is super-ugly since it has the local NuGet package path hard-coded, but it seems to work fine. Alternatively, just copy them to your project's root directory then use copyToOutput like @anatolitrifonov  mentioned above.\nDoing something like that and also adding .SetAllowMsieEngine(false) to the config should work to avoid this issue.\n\nAlso, I read somewhere you use the VroomJS on linux in production. How do you configure React.NET to use VroomJS?\n\nIt's automatically used on Linux.\n. Blogged about this here: http://reactjs.net/2016/08/protected-memory-exceptions-and-dotnet-core.html. Basically, for ASP.NET Core, you need to configure your project.json to copy over the ClearScript.V8 directory on build, as it's no longer done automatically. This is just temporary, as JavaScriptEngineSwitcher 2.0 will fix it.\nClosing this out, but please feel free to reopen if you have further questions about it! Thanks :smile: \n. Thank you!\n. This is a good idea. The file actually already has a hash (see Babel.LoadFromFileCache) so the MSBuild task would just need to check the cache before transforming the file.\nThe best solution is probably to update Babel.TransformAndSaveFile to check the cache via LoadFromFileCache before doing the transformation. If the cached data is valid, we don't need to do the transformation.\n. Fixed in #313, thanks @TorbenRahbekKoch!\n. I originally wrote the tutorial using Visual Studio 2013. Thanks for the report, I'll do another run-through of the tutorial and ensure it still works. In the meantime you can take a look at the React.Sample.Mvc4 sample in the repo, which definitely still works (I use it for testing every release, and it's compiled as part of the build)\n\nI can't follow your mvc5 tutorial because of cleartype and v8 dependency issues\n\nWhat's the issues you're encountering? ASP.NET MVC 5 is near-identical to ASP.NET MVC 4 so it should still work fine.\n. For the issue in #281, please refer to the blog post I just wrote today: http://reactjs.net/2016/08/protected-memory-exceptions-and-dotnet-core.html\nAs for the tutorial on the site, I added a notice to the top explaining that it was originally written for ASP.NET MVC 4: http://reactjs.net/getting-started/tutorial.html. I'll update it to ASP.NET Core soon, but in the meantime pull requests to tweak the website content are definitely appreciated :+1: \n. Tutorial has been updated for ASP.NET Core \ud83d\ude04 \n. > seems there's now way to leave ReactDOM.render with SSR without getting errors,\nThat's right. @Html.ReactInitJavaScript will output the correct ReactDOM.render call for you.\n\nremoved ReactDOM.render I get anyway this warning:\n\nHmm, that's interesting. What does your view code look like now?\n. Use JRaw from Newtonsoft.Json: http://www.newtonsoft.com/json/help/html/serializerawjson.htm\n. Hmm, I'm not too sure. Perhaps this functionality is provided by the browser, and \"vanilla\" V8 (as used by ReactJS.NET) doesn't have it.\n. Need to work out if this is actually possible: https://github.com/madskristensen/BundlerMinifier/issues/190\n. The bundler is very inflexible and it looks like there's no easy way to integrate additional build steps. The old ASP.NET bundler and minifier (from ASP.NET 4.0) was much more flexible.. > Is there an easy way to get the value of the MaxEngines?\nThe MaxEngines as you have it configured is available in ReactSiteConfiguration.Configuration.MaxEngines\n\nHow do I view number of engines running ?\n\nThe JsPool instance used by ReactJS.NET is stored in an instance of JavaScriptEngineFactory, but unfortunately it's not exposed publicly. For now, you could use the dependency injection container to get the JavaScriptEngineFactory, and then use reflection to get the private _pool property:\ncsharp\nvar factory = AssemblyRegistration.Container.Resolve<IJavaScriptEngineFactory>();\nvar poolField = factory.GetType().GetField(\"_pool\", BindingFlags.Instance | BindingFlags.NonPublic);\nvar pool = (IJsPool)poolField.GetValue(factory);\nThen you can use the Engines property to see how many engines have been created (somewhere between the number created at startup and the max), and AvailableEngines to see how many engines are free (ie. currently unused).\n. How's ReactJS.NET going for you in production, by the way? I haven't heard from many users with very large deployments!\n. Thanks for the feedback! I'm going to revamp the tutorial soon, and update it for ASP.NET Core in the process. I do have a full end-to-end tutorial (http://reactjs.net/getting-started/tutorial.html) but it's based off Visual Studio 2013 + ASP.NET MVC 4 so it's a bit outdated now.\n. What's the exact error message you're getting?\n. Yeah you have to use the \"full\" .NET Framework rather than .NET Core. Using the \"ASP.NET Core Web Application (.NET Framework)\" project template should do that, otherwise you can change the frameworks section to use net452 and remove all references to Mcrosoft.NETCore.App. Here's an example project.json for an ASP.NET Core site that uses the .NET Framework and ReactJS.NET: https://github.com/Daniel15/Website/blob/master/Daniel15.Web/project.json#L50\n. HttpContextAccessor is part of Microsoft.AspNetCore.Http.Abstractions which should already be referenced by your app. You might need to add the right using statement\ncsharp\nusing Microsoft.AspNetCore.Http.Internal;\n. Tutorial has been updated for ASP.NET Core, let me know if you still encounter any issues.\n. Hey @Sheng-Long - What happens if you go to https://fb.me/react-15.0.1.js in your browser? You might be behind a firewall that blocks fb.me (sometimes corporate firewalls block access to the Facebook CDN, and it is also blocked by the Great Firewall in China). I might need to update the tutorial and example code to use CDNJS or jsDelivr instead.\n\n, the nuget.com source is not enabled by default,\n\nWhat do you mean by this? Was NuGet disabled in Visual Studio? It should be enabled by default.\n. I updated the URLs to use CDNJS instead, and have also updated the tutorial to use ASP.NET Core (I've kept the existing MVC 4/5 tutorial around for reference, though).\n. Hi @gunnarsireus! At the moment, ReactJS.NET does not support JavaScript modules. You can not use import statements with ReactJS.NET and instead need to rely on your JavaScript being somewhere in the global scope. Alternatively, you could use something like Webpack, but that's more effort.\n. Please use tabs rather than spaces. You can use EditorConfig to automatically use the correct indentation configuration in Visual Studio.\nAlso, please add a unit test testing this functionality :)\n. Ahh, my mistake, I didn't realise this project was missing an editorconfig file! This is the config I normally use: https://github.com/Daniel15/RouteJs/blob/master/.editorconfig. I must have forgotten to copy it across to this repository \ud83d\ude04 \n. (although I've used tabs for a long time, I'm tempted to switch to spaces since at work we always use two spaces for indentation)\n. Thank you! :D \n. Hi @mwethington! The version of ClearScript and V8 that ReactJS.NET uses is controlled by JavaScriptEngineSwitcher (https://github.com/Taritsyn/JavaScriptEngineSwitcher). To upgrade the version of V8 or ClearScript, you'll need to ask the developer of JavaScriptEngineSwitcher :smile: \n. Wow, good catch! Looks like I forgot about this and there's still a todo in the code \ud83d\ude12 \nhttps://github.com/reactjs/React.NET/blob/master/src/React.Core/JavaScriptEngineFactory.cs#L109-L110\nYou can try building your own build of ReactJS.NET if you like. Clone this repo, modify that line of code to load react.generated.min.js rather than react.generated.js, then run dev-build.bat to build.\n. ReactJS.NET does not yet support JavaScriptEngineSwitcher 2.0. The API has breaking changes, so you'll have to wait for #306 to be closed and a new major version of ReactJS.NET to be pushed before upgrading. I'm currently working on that so it should be available soon.\n. Hi @NuclearFishin! You could load React from CDNJS instead, if you like.\n\nserve the React scripts directly from the server using the same scripts referenced by the server-side compilation feature\n\nThis is tricky. The scripts used for server-side compilation are stored as embedded resources in the React.Core.dll assembly. Serving them would mean there'd have to be a controller that loads the resource and serves it. A controller to do that could be added, but it's easier to just have a copy of React in your project and reference that directly (or use CDNJS). Maybe I should add that in the future, but not many people have asked for it.\nI'm going to close this issue since it's a question, but feel free to ask if you have any other questions.\n. Huh, that's strange. What if you remove the JSX in your test file and only use plain JavaScript? What does the output look like in that case?\n. >  Do you want me to remove all the JSX tags and ES6 also?\nYeah, just to test it out. What I mean is keep the configuration as-is, but remove all JSX from the file, and see if it still happens. I'm wondering if the issue is specific to JSX, or if it happens with all the Cassette bundles even if they don't contain JSX.\n. Closing this out as it's stale.. Hey @mikiamit, how much code are you bundling?\nCould you please retry it with ReactJS.NET 3.0 (which I just released today) and see if that helps at all?\n. Babel uses a lot of RAM, so if you're hitting this then the best thing to do is probably to build the JS as part of your build process - Either through ReactJS.NET's MSBuild support, or through a system like Webpack.. Thanks!. Good question... Maybe they could be serialized as props on the component, or something like that. I'm not sure what the best approach would be.\n. What's an example of attributes you'd like to add, and for what purpose?\n. I could be wrong, but I don't think \"async\" would make a difference since it's an inline script.\n. Hmm, interesting... Could you please post the full stack trace?\n. Hmm this is strange! I can't replicate the issue. When I create a brand new .NET Core site in Visual Studio 2015, I can add React.AspNet with no problems.\nAre you trying this on a new site, or an existing one? Could you please provide your project.json? Alsom, could you please ensure you have the latest updates installed for Visual Studio 2015?\n. I haven't tested on Mac OS for a while, and don't have a Mac to test this out on at the moment. You probably need to compile VroomJs. See https://github.com/pauldotknopf/vroomjs-core for instructions.\n. Yeah, manually adding EngineFactories (like @luty81 mentioned above) is the correct method to specify which JS engines to use. ReactJS.NET adds some engine factories by default, but only if you haven't already registered some yourself (see the code at https://github.com/reactjs/React.NET/blob/3ea6f8be627cdc6cf627e588e3dd96a2cb6f1d78/src/React.Core/JavaScriptEngineFactory.cs#L360).. There's now a React.Router package available that should help with using React-Router. Unfortunately I don't think there's any docs yet.. Interesting, this does sound like a bug to me. Feel free to submit a pull request if you like \ud83d\ude03 . Oops, I don't think I ever actually wrote the documentation! I think that was just a placeholder URL \ud83d\ude1b \n. Currently using 1.5.1, which is super old. I don't even have it running locally any more, I just have Jekyll 1.5.1 on my production server and am using that to build the site \ud83d\ude15 \nI've been meaning to clean things up - Add a bundle file specifying the version of Jekyll to use, and updating it to the very latest version.. It should work if you install the super old version of Jekyll, otherwise\njust ensure they look correct in a Markdown editor and I can build a\nstaging version of the site :)\n--\nRegards,\nDaniel Lo Nigro\nhttp://dan.cx/ | Twitter http://twitter.com/Daniel15 | Facebook\nhttp://www.facebook.com/daaniel\nOn Tue, Nov 29, 2016 at 1:03 AM, Chris Camplejohn notifications@github.com\nwrote:\n\nAh...ok. I was going to submit a couple of pull requests for the docs but\nwanted to check they looked ok first - just in case!\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/reactjs/React.NET/issues/342#issuecomment-263514161,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAFnHWbmYKKPy5SG_amrZMt_moVv2eYKks5rC-prgaJpZM4Kkp3Y\n.\n. Interesting... I wonder if this has to do with the JavaScriptEngineSwitcher upgrade (I upgraded it to version 2.0 in ReactJS.NET 3.0). So the memory usage doesn't go up in the same way with older versions of ReactJS.NET?. > So there is any work around ?\n\nMake sure you call app.UseReact above app.UseStaticFiles, so the ReactJS.NET middleware is executed before the regular static file middleware.. Going to close this out for now, but feel free to reopen this issue if you still encounter problems. Did you add @Html.ReactInitJavaScript() to your layout? It renders the JavaScript to initialise the components.. Hmm strange - I'm running http://dan.cx/socialfeed.htm on Mono 4.x + ASP.NET Core 1.1 + ReactJS.NET 3.0 and it's working fine.. @chanan - Hmm, I haven't tested on VS2017 RC yet. Did you add app.AddReact and app.UseReact to your Startup.cs file like the message says? What's the full error message and stack trace you're seeing?. You need to call AddReact to configure ReactJS.NET otherwise it won't work\nproperly.\nSent from my phone.\nOn Jan 6, 2017 9:36 AM, \"Etienne S.G\" notifications@github.com wrote:\nHave the same issue here using VS2017 RC + ASP.NET Core 1.1 + ReactJS.NET\n3.0, I can say that the method app.AddReact() doesn't exists in the\nConfigure section.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/reactjs/React.NET/issues/353#issuecomment-270789835,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAFnHZwlrz_yOUzi8Yw2XNTJt9-Bnye3ks5rPX5-gaJpZM4K9Kl9\n.\n. If you want to try the development version, you can use the NuGet package server on our AppVeyor build (https://ci.appveyor.com/nuget/reactjs.net/). Instructions are available at https://reactjs.net/getting-started/download.html#development-builds\nI haven't had time to try VS2017 RC yet. @DaveKP Do you think that diff solves the issues with VS2017?. I pushed out #354 as ReactJS.NET 3.0.1. Let me know if you still encounter issues. This fix seemed to fix the issue for me.. Thanks!. > struggling a bit since Debian and its ever-so-antiquated packages\nThis is why I use Debian Testing (Stretch) in production, it's still stable enough for everyday use :)\n\nLastly, revisiting the Ubuntu scenario (the title issue) - any clues as to why the FileNotFoundException is occurring?\n\nI suspect something is wrong with MapPath, like @Taritsyn mentioned. It's working fine for me on Mono (http://dan.cx/socialfeed.htm is running on Mono) but I haven't done extensive testing on .NET Core on Linux. Pull requests are appreciated :). Thanks!. Sorry I completely missed this PR. I don't think these changes are needed any more.. I've seen \"Attempted to read or write protected memory. This is often an indication that other memory is corrupt.\" a few times, but the new version of JavaScriptEngineSwitcher was supposed to fix it :(\nI have no idea what's actually causing it, I'd love help in figuring it out.. Thanks!. @luty81 - Sorry for the delay! There's a development package server you can use, instructions on the site. I think I'll release a stable build tonight containing this fix.. This has been pushed out as part of the 3.0.1 release.. > I suggest to remove the engine selection functionality from the package and assigning responsibility for it to the user who configures React.NET\nThis is already handled - ReactJS.NET will only register engines if you have not registered them yourself: https://github.com/reactjs/React.NET/blob/master/src/React.Core/JavaScriptEngineFactory.cs#L360-L364. You just need to ensure you register the engines before registering ReactJS.NET.. People still using .NET Framework 4.0 or 4.5 on Linux (via Mono) still need to see the VroomJs initialisation error, though. \nInstead of doing it this way, you can modify your app to only add the Chakra engine rather than VroomJs. Just configure the engines before calling UseReact:\n```\nvar engineSwitcher = JsEngineSwitcher.Instance;\nengineSwitcher.EngineFactories\n    .AddChakraCore();\napp.UseReact(config =>\n```. I think you'll have to pass the token as a prop to your React component.. Oops, looks like I forgot to renew the domain name :/ should be fixed now.\nSent from my phone.\nOn Dec 25, 2016 6:50 AM, \"Mitchell Kutchuk\" notifications@github.com\nwrote:\n\nNavigating to http://reactjs.net/ gives me this:\n[image: reactjs.net]\nhttps://camo.githubusercontent.com/bebe0a9d8bf48ac1bc8b63f3bd6f3fe452481278/687474703a2f2f692e696d6775722e636f6d2f584d4a716a6e682e706e67\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/reactjs/React.NET/issues/364, or mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAFnHUmpV2IUktBbDLz50r7eVG1XSVu0ks5rLXdngaJpZM4LVSQN\n.\n. Interesting idea... How would you specify which pool to use?. Could you please see if the ASP.NET 4 tutorial needs to be updated too? I\ndon't have my computer with me right now so it's difficult for me to check\n:)\n\nSent from my phone.\nOn Jan 7, 2017 9:47 PM, \"Dan Padmore\" notifications@github.com wrote:\n\nCorrect the highlighted line to match the change that is being discussed,\nnamely that the CommentForm can call the callback when the user submits the\nform\n\nYou can view, comment on, or merge this pull request online at:\nhttps://github.com/reactjs/React.NET/pull/366\nCommit Summary\n\nUpdate tutorial.md\n\nFile Changes\n\nM site/jekyll/getting-started/tutorial.md\n   https://github.com/reactjs/React.NET/pull/366/files#diff-0 (2)\n\nPatch Links:\n\nhttps://github.com/reactjs/React.NET/pull/366.patch\nhttps://github.com/reactjs/React.NET/pull/366.diff\n\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/reactjs/React.NET/pull/366, or mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAFnHZzXScVWo7XoYdwyfh7lhIa0lwuFks5rP3tggaJpZM4LdZqz\n.\n. You can include the change in the pull request if you switch to the right\nbranch on Github and then edit the file on Github :)\n\nSent from my phone.\nOn Jan 7, 2017 10:08 PM, \"Dan Padmore\" notifications@github.com wrote:\n\nYou're right, the ASP.NET 4 tutorial\nhttps://reactjs.net/getting-started/tutorial_aspnet4.html needs to be\nupdated in the same way.\nI'll attempt to include it in this pull request.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/reactjs/React.NET/pull/366#issuecomment-271079938,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAFnHZ2KZvxjaNQaqpM-oewUiNFb8qdQks5rP4A8gaJpZM4LdZqz\n.\n. Thanks!. There's no way to do this at the moment, but it's probably a good idea to add an option for it.. Try using ChakraCore (just install the package) rather than VroomJs and see if that works.. Yeah an assembly binding should help here, as @dustinsoftware pointed out. Otherwise, get the developer of the other NuGet package to upgrade their Newtonsoft.Json reference. I think older versions of Newtonsoft.Json don't support ASP.NET Core properly.. Yeah, please try the dev version. Visual Studio 2017  is not RTM yet so I still haven't fully tested it. I might set up a VM and test it out.. VroomJs is only really for Mono (Linux and Mac OS X), it's better to use ClearScript V8 on Windows.. I installed VS2017 RC today to test this out, but I can't even get a basic project working out-of-the-box. I created a new .NET Core 1.0 site, and when I run it using IIS Express I just get the \"Chrome script debugging in Visual Studio is enabled\" page followed by a blank page \ud83d\ude15 . Also I can't open the ReactJS.NET project with VS2017 RC as I get these errors when it tries to convert the xproj files:\nReact.AspNet\\React.AspNet.xproj: Could not read post-migration report at 'C:\\Users\\Daniel\\AppData\\Local\\Temp\\d5jrt05h.tva'.\nReact.AspNet\\React.AspNet.xproj: Failed to migrate XProj project React.AspNet. 'dotnet migrate --skip-backup -s -x \"C:\\src\\React.NET\\src\\React.AspNet\\React.AspNet.xproj\" \"C:\\src\\React.NET\\src\\React.AspNet\" -r \"C:\\Users\\Daniel\\AppData\\Local\\Temp\\d5jrt05h.tva\" --format-report-file-json' exited with error code 1.\nReact.AspNet\\React.AspNet.xproj: No executable found matching command \"dotnet-migrate\". I pushed out #354 as ReactJS.NET 3.0.1, which seems to fix this. After messing with VS2017 so it worked properly, I managed to create a new .NET Core 1.1 site and a local build of ReactJS.NET worked out-of-the-box after following the installation instructions at https://reactjs.net/getting-started/aspnetcore.html. Looks like it uses ChakraCore on .NET Core, which is fine.\n\nLet me know if you still encounter issues!. ReactJS.NET does not support modules at this point in time. It was originally built at a time when JS modules were very very rarely used. Happy to accept pull request adding support, but it's non-trivial. \nRight now you need to use something like Webpack or Browserify if you want to use JS modules.. Hmm that's strange, it definitely worked when I built the example. Maybe some of the version numbers are wrong. I'll try to take a look when I get a chance.\nWhat you can do is create a new ASP.NET Core MVC project and compare the project.json files.. Thanks!. Good catch, I'll need to upgrade ReactJS.NET to the latest version of the dotnet tooling.. It's possible you're hitting the MaxUsagesPerEngine and the slowness is the initialization of a brand new engine:\n/// <summary>\n/// Gets or sets the maximum number of times an engine can be reused before it is disposed.\n/// <c>0</c> is unlimited.\n/// </summary>\npublic int MaxUsagesPerEngine { get; set; }\nThis is set to 100 by default: https://github.com/Daniel15/JSPool/blob/master/src/JSPool/JsPoolConfig.cs#L90. I don't think I expose it as an option in ReactJS.NET, unfortunately. The idea with this is that it helps prevent memory leaks by periodically recycling the engines.\nI wonder if JSPool could be cleverer and recycle the engine in the background on a worker thread.... Closing out stale issues. I think you can just ignore that error, it should still be using Chakra.. I don't think this is related to ReactJS.NET... Maybe you should open this in Microsoft's bug tracker instead?. > I feel the project is abondoned or receives very little maintenance\nI'm the only developer on ReactJS.NET... I'm still around, I'm just not as active these days. I'm still happy to accept pull requests though.. You can use the debug version of React by calling .SetUseDebugReact(true) in your config. This will give you the full error message.. To me, this sounds like a bug with ClearScript, as the stack trace doesn't point to any code in ReactJS.NET itself. You might want to file a bug for the ClearScript project: https://clearscript.codeplex.com/. Hmmm that's strange. I'm not too sure what could be causing this \ud83d\ude15 \nIf you like, you could compile ReactJS.NET from source and see if you can tweak the code to get it working?\n\nAre you using babel and/or webpack in your build process?\n\nReactJS.NET runs Babel for you, so it shouldn't be an issue.. I'm happy to take a pull request improving this if you like.. The ASP.NET Core bundling/minification is not extendable so unfortunately ReactJS.NET can't be integrated into it at the moment :(. Interesting idea. I could move the MVC classes into a new React.AspNet.Mvc package, and change React.AspNet to just contain the middleware. What do you think?. This is included in the 3.1 release: https://reactjs.net/2017/07/3.1.0-release.html. You can now install React.AspNet.Middleware to just get the middleware.. I won't work on that, but feel free to send some pull requests if you're interested \ud83d\ude03 . > I'm fairly new to this Webpack world, but managed to realize that webpackJsonp variable is registered at the window level, which I'm guessing the server side rendering engines have no access to\nAhh, good catch. I guess Webpack code splitting isn't designed to be used in conjunction with server-side rendering \ud83d\ude22 \nYou're right that there's no window when doing server-side rendering. I wonder whether the Webpack team have any advice for this scenario.. Thanks @jslatts and @thebuilder! I'm going to close this out as it's just a question rather than a bug, but feel free to add additional comments if you want to continue the discussion :). Are you seeing any error messages?. With server-side rendering, the JavaScript is executed server-side and the results are sent down to the client. However, this is just static HTML. In order to make the component interactive, it needs to be initialised in JavaScript too. That's what Html.ReactInitJavaScript does - It runs the JavaScript required to initialize the components client-side.. Hmm, this should work out of the box... Are you having issues with it? Does it work fine if you rename jsFile.js to jsFile.jsx?. Thanks!. Hmmm...  I guess it's an issue with newer JavaScriptEngineSwitcher versions. I'm not too sure though. Which JS engine are you using?. Ahh, good catch! I think the regular ASP.NET MVC helpers convert underscores to hyphens, maybe ReactJS.NET should do that too.. Sorry I took a while to reply @gunnim, sometimes I get busy with other things and I'm a contributor on a bunch of other open-source projects so my free time is spread fairly thin.\n\nFirstly, to open the project in VStudio 2017 i'm forced to upgrade all the xproj projects to csproj, I'm gonna assume you're fine with that.\n\nThis is fine, we just need to ensure that the build still works as expected. build.proj might need some changes. You may need to switch AppVeyor to a newer image too.\n\nRegarding the implementation, my first thought is to extend ReactComponent, enabling code reuse of many of the protected functions and variables there.\nThen create a HtmlHelper extension method, Html.ReactRouter with similar parameters and functionality to Html.React + the \"magic\" that enables rendering a react router component with context.\n\nThis seems reasonable.\n\nSo for the structure, I'm wondering if it would make sense to create a new project and alter the build to create a new NuGet pkg?\n\nYeah, perhaps something like a React.Router  NuGet package.. By the way, I'm trying to convert from xproj to csproj today, and I'm hitting a bunch of issues. It won't convert the unit test project for some reason (might need to do that manually), and VS2017 keeps crashing when I try to load React.Core :/ I might just upgrade everything manually.\n\nMy initial thought is to add a new method to ReactEnvironment, CreateCustomComponent which would in addition to the params in CreateComponent accept an IReactComponent object.\n\nThis sounds reasonable. Maybe there could be two overrides for CreateComponent - One that takes a string (like the current one), and one that takes the IReactComponent itself:\npublic virtual IReactComponent CreateComponent<T>(string componentName, T props, string containerId = null, bool clientOnly = false)\npublic virtual IReactComponent CreateComponent<T>(IReactComponent component, T props, string containerId = null, bool clientOnly = false)\nCreateRouterComponent could then be an extension method that calls CreateComponent(new RouterComponent(.....), .....)\nEither that or we could embed ReactRouter support directly in React.Core, if it's too difficult to abstract it out into a separate package.\n\nThat I assume would mean we'd have to instantiate ReactRouterComponent with the environment object and configuration from the publicly accessible ReactEnvironment.Current and ReactSiteConfiguration.Configuration respectively.\n\nYou could make CreateRouterComponent as an extension method on the IReactEnvironment. Current status of switching from xproj to csproj:  (\u256f\u00b0\u25a1\u00b0\uff09\u256f\ufe35 \u253b\u2501\u253b)\n\n. > a static createRouterComponent extension method on ReactEnvironment can't access the _config protected instance variable \nHmmmm... yeah. You could get it directly out of the dependency injection container if you need to. It's not ideal, but it'll do.\n\nnor a ReactEnvironment instance\n\nAn extension method would have the ReactEnvironment instance - It'd be the first argument (this IReactEnvironment environment)\n\nsome people who were having migration problems suggested creating a new solution and moving the code and project to this fresh base and go from there?\n\nI already did that once for going to xproj and it was pretty painful \ud83d\ude1b \n https://github.com/reactjs/React.NET/commit/41963d688f2979ea59c9f7d6db56a6acc7d13bff\nI'll play around with it for a bit and see if I can get the migration working. Otherwise, you can use VS2015 community edition. I still have both VS2015 and VS2017 installed.. React.AssemblyRegistration.Container.Resolve<IReactSiteConfiguration>() will get you the config.. I've got a work-in-progress pull request to upgrade to VS2017 + the newer tooling: #406. It's not 100% complete, but seems to compile at least.. Code has been updated to use VS2017 + csproj: 9bc1388604ddd0ce232446f9903f3abed4064d2f. Can you provide the full error message?. Version issue is tracked in https://github.com/NuGet/Home/issues/4337. Will need to work around it.. This builds on my computer and mostly seems to work, but is broken on AppVeyor\n. I didn't have any immediate plans to push these changes to NuGet, as the only real user-facing change is moving from .NET Core 1.0 to 1.1. I'll probably at least split the middleware out into a separate NuGet package (#388) before pushing.. @defcon84  - I'm going to publish this to NuGet tomorrow. You can use the dev server in the meantime.. This is included in the 3.1 release: https://reactjs.net/2017/07/3.1.0-release.html. Thanks, I'll take a look at this soon!. @gunnim - Sorry for the delay! The past month has been very busy for me \ud83d\ude22  nonetheless, reviewing this is still on my list of things to do. Thanks for your patience!. Sorry about the confusing comments around indentation! It looks okay to me now. I guess I was hitting a Github bug - All the code was hard along the left margin, with no indentation at all.. > Message: System.IO.FileLoadException : Could not load file or assembly 'JavaScriptEngineSwitcher.Core, Version=2.4.0.0, Culture=neutral, PublicKeyToken=c608b2a8cc9e4472' or one of its dependencies. The located assembly's manifest definition does not match the assembly reference.\nTry doing a clean build and see if that works. Usually this happens when you have an old assembly in the bin directory. \"The located assembly's manifest definition does not match the assembly reference\" uisually means that the version number in the bin directory differs from the version number that the app actually references.\nIt looks like the AppVeyor build is working: https://ci.appveyor.com/project/Daniel15/react-net/build/269. The build still seems to be working fine for me. Released this today as version 3.2. Sorry for the delay. Thanks!. Hey @Taritsyn, thank you so much for the detailed post! This would be good content for the https://reactjs.net/ website \ud83d\ude03 . This seems reasonable. Could you please add a unit test for this too?. Thank you!. This is included in the 3.1 release: https://reactjs.net/2017/07/3.1.0-release.html. Thanks for your contribution, Andrey!. I have a new version of JSPool (2.x beta) that fixes this too, but I haven't had a chance to release it + a new ReactJS.NET version yet.. I haven't tried any IDEs on Mac. I am hosting sites that use ReactJS.NET on Linux via Mono though, and that works fine.\nIf you make a brand new site in Visual Studio for Mac, adding ReactJS.NET to the site should work fine.. Yeah, you'll need to use Mono or the full .NET Framework (on Windows) if you want to use WebForms. The newer ASP.NET Core tooling doesn't support WebForms.. Thanks!. This is included in the 3.1 release: https://reactjs.net/2017/07/3.1.0-release.html. Thanks for your contribution!. Could you please check that Web.config was modified correctly? It should have a handler for *.jsx.. Thanks! I changed it to JSON stringify the stack trace to clean up the code a bit.. Fetch is only available to ~74% of visitors: https://caniuse.com/#feat=fetch. XMLHttpRequest is available pretty much everywhere. I don't think it's worth changing it yet.. Yeah, using ChakraCore should work! Let me know if you still have issues with it. You might have better luck using .NET Core 2.0 + ChakraCore, instead of VroomJs :). Make sure you have installed the JavaScriptEngineSwitcher.ChakraCore.Native.osx-x64 package.. Install-Package is a PowerShell cmdlet, not a Bash command. You need to install the JavaScriptEngineSwitcher.ChakraCore.Native.osx-x64 package in your app, in the same way that you installed ReactJS.NET itself.. If you're using ASP.NET Core, try:\ndotnet add package JavaScriptEngineSwitcher.ChakraCore.Native.osx-x64\nHow did you install ReactJS.NET initially?\n--\nRegards,\nDaniel Lo Nigro\nhttp://dan.cx/ | Twitter http://twitter.com/Daniel15 | Facebook\nhttp://www.facebook.com/daaniel\nOn Wed, Aug 2, 2017 at 11:05 PM, radjivC notifications@github.com wrote:\n\nHow do you do that on mac?\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/reactjs/React.NET/issues/431#issuecomment-319876555,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAFnHU8z1vh7VTrz4p_Fx5MG7BGF5FEvks5sUWMYgaJpZM4Or-e9\n.\n. Glad to hear you got it sorted :). Likely a breaking change in 2.0. I haven't tested with 2.0 yet. Feel free to submit a pull request if you do work out what broke.. Does it look like this?\nMicrosoft.Common.CurrentVersion.targets(2867,5): error MSB3552: Resource file \"**/*.resx\" cannot be found.\n\nYou may be hitting this issue: https://dan.cx/2017/05/fixing-msb3552-resource-file-resx-cannot-be-found:\n\nthis is caused by a long-standing MSBuild bug: Wildcard expansion is silently disabled when a wildcard includes a file over MAX_PATH. [...] In my case, my build server was running an old version of npm, which is known to create extremely long file paths. The way to \"fix\" this is by reducing the nesting of your folders. If you're using npm, upgrading to a newer version (or switching to Yarn) should fix the issue. Otherwise, you may need to move your project to a different directory, such as a directory in the root of C:.. One of the causes I've seen of that is old npm versions. Check npm --version and if it's 2.x or older then npm install --global npm to upgrade.. Hey @ShikiGami, thanks for your comment! I actually hit this same error when updating my own website, and your comment helped resolve it :)\n\nI know you have a PR updating some code in this repo, but please also feel free to open a pull request updating the documentation on the ReactJS.NET website. The documentaton page is at https://reactjs.net/getting-started/aspnetcore.html, and the contents are located in this repository. Otherwise, I'll do it, but it likely won't be for another week or two as I'm pretty busy over the next week.. Should be fixed by #436. I'm so sorry for the delay... Not sure how I missed this PR! I didn't think someone had submitted one yet!\nIt looks like the AppVeyor build failed... Is it related? https://ci.appveyor.com/project/Daniel15/react-net/build/271. This looks pretty good to me! Let's get the AppVeyor build green, and then I'll merge it. You might need to modify the AppVeyor config .yml file (eg. if it needs to be changed to a .NET Core 2.0 AppVeyor image). I manually merged this as I had to make some changes to the \"classic\" ASP.NET samples (React.Sample.Mvc4, React.Sample.Webpack and React.Sample.Cassette) to get them to compile: https://github.com/reactjs/React.NET/commit/dd4e5048a26eb517c195a5ed8af7eaa9f1d8d35c\n@dustinsoftware - I'll upgrade React.Router.csproj separately. I suspect it'll need two separate csproj files - One for ASP.NET 4.x and one for ASP.NET Core. Currently it seems to assume that .NET Framework 4.6.1 = ASP.NET 4.x and netstandard = ASP.NET Core, but you can use ASP.NET Core on .NET Framework 4.6.1.. @dustinsoftware See #461. Released this today as version 3.2. Thanks!. I don't know much about Orchard, you might want to ask them about how to handle this.. Sorry for the delay in replying... I've been super busy recently. I'll take a look at this soon :). Thanks! Sorry I didn't merge this before the release :(. > I've tried loading it myself, with SetLoadReact(false) & AddScriptWithoutTransform(\"react+react-dom\"), but it says that React isn't exposed properly (so I can't begin to debug issues).\nWhen using your own version of React, it expects React, ReactDOM and ReactDOMServer globals, or global.React, global.ReactDOM and global.ReactDOMServer to be set correctly:\nhttps://github.com/reactjs/React.NET/blob/5d1bd9d73d32d07f42abbc0060f90cb38b988070/src/React.Core/Resources/shims.js#L52-L68\nhttps://github.com/reactjs/React.NET/blob/5cdd2f4cac80368f1666a5cfc2c90510613e608d/src/React.Core/JavaScriptEngineFactory.cs#L182-L191\nYou can see how ReactJS.NET builds the built-in React version:\nhttps://github.com/reactjs/React.NET/blob/5d1bd9d73d32d07f42abbc0060f90cb38b988070/src/React.Core/gulpfile.js\nhttps://github.com/reactjs/React.NET/blob/5d1bd9d73d32d07f42abbc0060f90cb38b988070/src/React.Core/Resources/react.js\n\nIs there some way to tell React.NET which major version of React to work with? Or will the project only ever support one at a time?\n\nNot supported at the moment, but it's a good idea. I don't have time to build it myself, but I'd be happy to review a pull request adding this functionality.. Let's keep this issue open as ReactJS.NET still needs to be updated to ship with React 16 \ud83d\ude03 . I didn't get around to publishing a new version of ReactJS.NET this weekend (had too many other things to get done) but I'll try to release one tomorrow night. In the meantime, you can get a build from the build server. Instructions are on the site :). @dustinsoftware did all the work, I just pushed the NuGet packages \ud83d\ude1b Thanks Dustin!. Note that componentDidMount is only called client-side, not server-side. View source on your page and check that the JavaScript is being rendered correctly.. Should work, it just sounds like you're missing an assembly binding redirect in your Web.config file. NuGet should update that automatically.. huh, I have no idea why Appveyor didn't build this. I'll try to look into that soon.. Strangely, the webhook to AppVeyor threw an error saying that the PR doesn't exist:\n\nI re-ran the webhook, which should kick off the AppVeyor build. Looks like it's currently queued.. The AppVeyor build never completed, but I feel pretty safe about this change. Let's merge it and see what happens \ud83d\ude1b . This error is coming from the JS engine, which makes it hard to debug \ud83d\ude15  You could try using the ChakraCore JS engine rather than ClearScript V8, and see if that helps. See the JavaScriptEngineSwitcher docs for instructions on how to do that (I think you call .AddChakraCore() instead of .AddV8()). @Taritsyn Is it possible to get the JavaScript stack trace when this occurs?. Thank you @dustinsoftware! I'll try to push out a release this weekend.. Released this today as version 3.2. Thanks!. Yeah, one of the tests seems flaky :/ This looks good to me!. Thanks!. Thanks!. Sure, feel free to update it. I wasn't entirely sure of the proper way to\ndo it.\nSent from my phone.\nOn Nov 2, 2017 11:13 PM, \"Josh Goldberg\" notifications@github.com wrote:\n\nI'm using Enterprise. Would you mind if it checked for the existence of\nMSBuild.exe under Enterprise, Professional, or Community?\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/reactjs/React.NET/issues/452, or mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAFnHUyMGwoNYq8yWz6aWSvOCi6VbzmIks5syq8GgaJpZM4QQsHr\n.\n. Yeah, good idea, I haven't updated that page in a while :(\n\nFeel free to submit a pull request if you like. The source for that page is located at https://github.com/reactjs/React.NET/blob/master/site/jekyll/dev/contributing.md.. Thanks... I guess I never created the page.. > . How about JavaScriptEngineFactory take in some sort of new IJavaScriptEngineProvider(s) via dependency injection?\nYou're right. I think we can totally drop the hard dependency on V8 / ChakraCore and instead rely on people to manually configure JavaScriptEngineSwitcher, like you did:\nJsEngineSwitcher.Instance.EngineFactories.Add(msIeEngineFactory);\nJsEngineSwitcher.Instance.DefaultEngineName = \"MsieJsEngine\";\nThis became a lot easier to do in JavaScriptEngineSwitcher v2.\nOf course this means that it needs a bit more configuration rather than mostly working out-of-the-box, but perhaps that's worth it?. Thanks! I wish there was an environment variable for the path to MSBuild. The project hasn't been updated to the .NET Core 2.0 SDK yet. It currently uses 1.1\nThere's a pull request to upgrade it to 2.0: https://github.com/reactjs/React.NET/pull/436. I might work on completing that PR and merge it, which should resolve some issues here.. > C:\\Code\\React.NET\\src\\React.Sample.Mvc4\\React.Sample.Mvc4.csproj(198,3): error MSB4019: The imported project \"C:\\Program Files\\dotnet\\sdk\\2.0.2\\Microsoft\\VisualStudio\\v10.0\\WebApplications\\Microsoft.WebApplication.targets\" was not found. Confirm that the path in the  declaration is correct, and that the file exists on disk.\nThis is the same issue I'm hitting while trying to get #436 working. It looks like the same issue as https://github.com/dotnet/sdk/issues/1385.. https://github.com/reactjs/React.NET/commit/dd4e5048a26eb517c195a5ed8af7eaa9f1d8d35c should fix the issue with Microsoft.WebApplication.targets. Unfortunately I had to hard-code the path, as MSBuildExtensionsPath32 now points to the .NET Core directory rather than the MSBuild extensions directory.. Yeah it's tricky because that comes from the MSBuild step for the sample project, which runs as a separate process. It can't run in the same build process as the MSBuild library is built as part of the build, so the file is locked during the main build.\nYou can temporarily comment out the <TransformBabel /> node in React.Sample.Mvc4\\TransformBabel.proj.. Unfortunately I don't have time to put a sample together :(. Interesting idea... Would you like to play around with some ideas to accomplish this?. Against master is fine. No rush either... Don't feel pressured to do anything. \ud83d\ude03 \n. It's supposed to use tabs in most places, and spaces in .json files. See the editorconfig: https://github.com/reactjs/React.NET/blob/master/.editorconfig\nThe copyright header is supposed to be 2014-Present, someone updated it via a pull request a while back. Maybe they missed some of the files. > There are a few clusterings of files that could be moved into their own namespace and director\nThere's so few files that I'm not sure that this would actually be advantageous.\nWhen I was initially building out the repository, I copied the model of ASP.NET MVC, which had most of its files in a single directory (eg. see the ASP.NET MVC 5 codebase at https://github.com/aspnet/AspNetWebStack/tree/master/src/System.Web.Mvc). I don't know many people that actually browse using the file tree - Most use some sort of fancy navigation in their IDE to navigate only by name (like Ctrl+T \"Go to Everything\" in ReSharper) and thus the directory layout is not too important.. I think this one only started occurring with newer versions of NuGet:\n\nwarning NU1603: Cassette 2.4.2 depends on AjaxMin (>= 4.84.0) but AjaxMin 4.84.0 was  not found. An approximate best match of AjaxMin 4.84.4790.14417 was resolved.\n\nIt would need to be fixed in the Cassette package. Cassette was last updated in 2014 (https://www.nuget.org/packages/Cassette/). At one point it was the best way to manage CSS and JS files in ASP.NET, but it's basically abandoned now.. I don't really want to split up the repo, as ReactJS.NET has one version number and every package is released together. Cassette.React still gets some downloads (https://www.nuget.org/packages/Cassette.React) and it works fine so I don't really want to stop publishing it or move it to another repo.. Hmm, it should already be publishing .pdb files, but I wonder if something broke when I switched to the newer ASP.NET Core tooling. Also, I believe NuGet publishes the source code to a symbol server, which should also help with debugging (as long as the symbol server is configured in Visual Studio). Thanks!. Yeah this was already included in the latest release :D. Thank you for fixing it, @dustinsoftware :D. I was hoping this would fix #472, but it still seems flaky (based on the AppVeyor failure). React.Tests.Router.HtmlHelperExtensionsTest fails sporadically. :(. Thanks! I think HtmlHelperExtensions is the only part of ReactJS.NET that doesn't inject dependencies into its constructor (since it consists entirely of static extension methods) and thus relies on some global environment. I wonder if that could be changed/fixed.. Thanks! \ud83d\ude03 . The newly-added React.Router package should help you use React Router with server-side rendering. #476 tracks adding a sample project.. Thanks!. This should be fixed now \ud83d\ude04 . Thanks!. It sounds like you're calling .SetLoadReact(false) but aren't properly loading React yourself. Try instead using ReactJS.NET's built-in React version (by removing the .SetLoadReact(false) call).. > Just want to mention that I wasn't able to get 3.2 working, but I was able to get 3.1 working-\n3.2 upgraded to React 16 (#445) so you might be hitting some incompatibilities with your code in React 16. 3.0 and 3.1 used React 15.3.2.. ReactEnvironment.Current.Babel.Transform() should work. There's also an MSBuild task you can use, that stores the generated file as .generated.js beside the original file.. That's pretty strange, as netstandard2.0 definitely supports .NET Framework 4.6.1 and above (https://blogs.msdn.microsoft.com/dotnet/2017/08/14/announcing-net-standard-2-0/).\nPlease check your NuGet version, as you might have a very old one. I think you need at least NuGet 4.3.x in order to use .NET Standard 2.0 packages. If that doesn't work, I'd suggest maybe asking in the NuGet repo (https://github.com/NuGet/Home).. We should likely update the tutorial to use dotnet add package rather than Install-Package.. Let's update the site to mention this :). Won't you get lots of code duplication if you export each component as a separate library?. > as far as I can tell there is no good way to combine the NET Core version and NET Standard other than the way it is currently set up.\nI think that's right. The full .NET Framework supports both the full ASP.NET as well as .NET Core, and you can't have one single project or assembly that targets both, so they need to be separate.. Thanks! I guess much of the mismatching in my code was from when I was using a MacBook Pro as my work laptop, and switching between MacOS and Windows.\nWhy normalize with LF though, rather than CR+LF?. I'll try to take a look at this soon. Does it break the out-of-the-box experience, requiring more manual configuration to get started?. The bundled Babel presets all come from babel-standalone (https://github.com/babel/babel/tree/master/packages/babel-standalone). It should come with all the standard Babel presets ready to use out-of-the-box. I can't remember how old the babel-standalone version used by ReactJS.NET is, though.\nTo change the presets used for ReactJS.NET's JS compilation, you can use the BabelConfig property of the IReactSiteConfiguration:\nconfiguration.BabelConfig.Presets = new HashSet<string> { \"react\", \"es2017\" };. Thanks! :). Unfortunately, MSBuild does not easily support assembly redirects. You'd need to add them to MSBuild.exe.config, and they'd affect all MSBuild calls (not just builds of your project).\nHaving said that, ReactJS.NET does have a super hacky binding redirect for JavaScriptEngineSwitcher. The way it's implemented is that we override AppDomain.CurrentDomain.AssemblyResolve and manually perform the redirect ourselves (https://github.com/reactjs/React.NET/commit/c366e3dd75c45777cb6e78c755b2e9ed063e6033). We could likely do that for Newtonsoft.Json too. I'm worried about breaking stuff, as that assembly binding stuff is very fragile.\nReferences:\nhttps://github.com/Microsoft/msbuild/issues/1309\nhttp://blog.slaks.net/2013-12-25/redirecting-assembly-loads-at-runtime/. @gunnim or @dustinsoftware could you please take a look at this? I don't have much experience with ReactRouter. How was this working before? Did it change in a newer Router version?. This is probably the largest pull request we've ever received :) Thanks for working on it.\nThere's a lot of changes that change #if NET40 to #if NET40 || NET451, is it possible to split those out into a separate pull request? As @dustinsoftware said, it's much easier to review multiple small PRs instead of one giant one.. Thanks for reviewing this, @dustinsoftware!. Good question... I'll follow up and let you know.. Sorry for the delay! I changed the license, and the updated license will be in effect as of the upcoming 4.0 release.. \"'regeneratorRuntime' is not defined\" sounds like you're not properly loading Regenerator. I don't have much experience with it, unfortunately.\n. One of the issues with this is that some of the files may rely on other files being loaded in a particular order. In general it seems like a good idea, though!. You can pass it in the constructor for ReactComponent rather than adding a\nproperty to ReactEnvironment\nSent from my phone.\nOn Mon, Apr 9, 2018, 7:13 AM Daniil Sokolyuk notifications@github.com\nwrote:\n\n@DaniilSokolyuk commented on this pull request.\nIn src/React.Core/ReactIdGenerator.cs\nhttps://github.com/reactjs/React.NET/pull/528#discussion_r180107898:\n\n\n\n\nAll rights reserved.\n\n\n*\n\n\nThis source code is licensed under the BSD-style license found in the\n\n\n\n\nLICENSE file in the root directory of this source tree. An additional grant\n\n\n\n\nof patent rights can be found in the PATENTS file in the same directory.\n\n\n*/\n+\n+using System;\n+using System.Threading;\n+\n+namespace React\n+{\n/// \n/// Extension methods relating to GUIDs.\n/// \npublic static class ReactIdGenerator\n\n\nNice idea, i can inject it to IReactEnvironment and create property\nIReactIdGenerator (like IBabel) and call it from constructor like\n\"environment.ReactIdGenerator.Generate(...)\"\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/reactjs/React.NET/pull/528#discussion_r180107898, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAFnHbQsP0g0FVqr52UqGGL4msV_r2fsks5tm2yjgaJpZM4TLl08\n.\n. Are you doing this because the check is slow? If so, it might be better to create some JS wrappers around ReactDOMServer.renderToStaticMarkup and ReactDOMServer.renderToString that check for the component before calling the render function, and then replace the calls on lines 135-136 with calls to these new wrapper functions. That'd avoid one extra call from C# to JS, so should be a bit faster. That way you still get the same checking, without as big a perf penalty.\n\nYou could add some functions to shims.js.. Yeah this looks good to me. Thank you @Taritsyn! . It should already be working; the update for ASP.NET Core 2.0 was done a while ago: #436. Are you having any issues in particular?. The instructions on the site should be up-to-date: https://reactjs.net/getting-started/tutorial.html\nThere's an example site in the repo, too: https://github.com/reactjs/React.NET/tree/master/tutorial-code. Sure, feel free to submit a pull request for it :D \nNote that ReactJS.NET still supports older versions of ASP.NET, so it couldn't exclusively switch to tag helpers. However, I'd have no problem with supporting tag helpers for newer vesions.. > hah, I thought you might say that.\nI didn't used to, but these days I don't have a lot of free time for open-source work.\n\nit would be a separate nuget package *.TagHelpers with a dependency on React.AspNet\nSure, that'd be fine. You could add it to the ReactJS.NET repo if you like. The React.Router package was another community contribution: https://github.com/reactjs/React.NET/tree/master/src/React.Router. Good catch, we can likely remove (or archive) that entire page now that ChakraCore works on non-Windows platforms. I haven't tested ChakraCore with Mono, but it works with .NET Core.. Thanks @suhailnaw for submitting this pull request, and thanks @dustinsoftware for reviewing and merging it!. I wrote the release notes :smile:  Thanks for your pull request!. Yeah it's unfortunate that there's a division between the .NET Core and 'classic' .NET Framework docs, and they can get out of sync. Maybe we can pull out shared stuff into separate .md files and include them in both pages.. Thanks! It'd be good to add this to the ASP.NET Core tutorial page too.. Thanks for working on this, @dustinsoftware. I appreciate it!. @dustinsoftware Yeah I'm playing around with Netlify. An issue is that we have both the code and the site in the same repo, but I only want Netlify to post comments on PRs when they touch files in the site. Not sure if that's possible at the moment.. https://github.com/reactjs/React.NET/pull/551. This was released as 4.0 beta: https://reactjs.net/2018/06/3.4.0-release.html. This looks pretty good to me! @dustinsoftware, what do you think? Any other changes we should make, or should we merge it?. Shipped in 4.0-beta1 :). Make sure you're exposing the components globally, as mentioned on https://reactjs.net/guides/webpack.html.. > turns out that you have to restart your server app every time\n\n@WonSong - You shouldn't; ReactJS.NET listens for changes to files and reloads all the files if they're modified. You may be hitting a bug. Can you please file a separate issue for that?. @WonSong - If you attach a debugger, do you see messages like this when you change the files?\n\n[JSPool] Watched file 'foo.js' changed\n\n@dustinsoftware Do you have any ideas on this? We do configure JSPool to recycle the pool on change:\nhttps://github.com/reactjs/React.NET/blob/c90a4a645e493855877fcf8ebde9d0474e9b8a62/src/React.Core/JavaScriptEngineFactory.cs#L93-L94\nAnd then JSPool uses a FileSystemWatcher:\nhttps://github.com/Daniel15/JSPool/blob/master/src/JSPool/FileWatcher.cs#L90-L102\nPerhaps we're not passing the file names correctly, or passing the wrong path, or something like that.. Thanks!. This repository is for the ReactJS.NET project, which integrates React into Microsoft's .NET stack. You probably want to post to the create-react-app repo instead: https://github.com/facebook/create-react-app. Thanks!. > Where in the GitHub repo is this stated?\nIt's specified in the package.json file of React.Core:\nhttps://github.com/reactjs/React.NET/blob/master/src/React.Core/package.json#L15\nYou can switch to the tag of the release you're using to see the version used in that release:\n\n\nA runtime API to retrieve it (useful for showing debug info on crashes)\n\nThat's a good idea. We should be able to execute React.version in JS to get the version number. With the current code, you could probably do ReactEnvironment.Current.Execute<string>('React.version'), but it would be good to add a ReactVersion property to encapsulate that.. I think I'd be more comfortable with this if we had more integration tests. Currently most of the tests are unit tests for ReactJS.NET itself (rather than the interaction between ReactJS.NET and React itself) and we do some manual testing on React upgrades.. @dustinsoftware I started enabling Renovate, which is similar to Greenkeeper but it supports NuGet packages in addition to npm packages :)\nPR is here: https://github.com/reactjs/React.NET/pull/666. Thanks! I like the Oxford comma, even though the Facebook content guidelines say to avoid it :(. I don't unfortunately... It's an internal Facebook style guide that the content strategists use.. I think you'd find the same thing with Node.js as well - The server-side reuses the JS engine rather than creating a new one each time, so any state that you set on the server-side is global for the app. There's a few approaches to reusing JS engines server-side and also having request-specific state, like generating an ID for the request and using that as the key in an object. Make sure you clean up any state after the request ends, to avoid the memory usage constantly rising.\n\nHow much of a performance hit is to be expected?\n\nI haven't measured it in a while, but it does mean that all the JS needs to be reloaded every time instead of having a warm JS engine ready to go, so it will affect performance a bit.. Probably another reason why we need more integration tests - I suspect this functionality is mocked out in all the automated tests. I'll push a beta version with this fix later today.. @dustinsoftware It should be possible to test the server-side rendering as long as a JS engine works on AppVeyor (which it should). We just need to have some tests that do not mock out the JS engine.. I confirmed that this fix works, so I pushed this as 4.0.0-beta3. Thank you for the PR!. This looks great! Thanks @dustinsoftware!\nI wonder if we should have tests with multiple engines (eg. a test with V8, a test with ChakraCore)?. Actually I won't get time tonight but I can do it tomorrow.\nSent from my phone.\nOn Sun, Aug 12, 2018, 8:27 PM Daniel Lo Nigro daniel@dan.cx wrote:\n\nSure, I can do that once I'm home tonight.\nSent from my phone.\nOn Sun, Aug 12, 2018, 1:03 PM Dustin Masters notifications@github.com\nwrote:\n\nTested on both OS X and Windows. @Daniel15 https://github.com/Daniel15\ncan you cut a release with this fix?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/reactjs/React.NET/pull/580#issuecomment-412368112,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAFnHccCTQvURnqqTxe4WpweOSA1heiNks5uQIoogaJpZM4V5Z3g\n.\n\n\n. Preparing this for release now. Just cherry-picking into the stable branch and verifying that everything is OK.\n\nI wonder if JSPool should normalize the path itself, too. What do you think @dustinsoftware?. That sounds good to me.\nBy the way, I pushed just this change as 3.4.1 :). You can also name the file .jsx and hit the file's URL directly to transpile it, as long as you've configured the handler in web.config (for .NET Framework) or configured the middleware (for ASP.NET Core). Thanks for this! :D . JavaScriptEngineSwitcher does support embedding C# objects and types, which might be useful in this case: https://github.com/Taritsyn/JavaScriptEngineSwitcher/blob/9547018d9086144fef96db4a76bb5f649f76476f/src/JavaScriptEngineSwitcher.Core/IJsEngine.cs#L156-L173. However, I don't think there's much documentation for it (cc @Taritsyn) and I've never tried it in conjunction with ReactJS.NET.\nSome issues I can think of:\n1. This functionality is not exposed through ReactEnvironment. If it was, you'd be able to  do something like ReactEnvironment.Current.EmbedHostObject(\"Foo\", SomeObject), or ReactEnvironment.Current.Engine.EmbedHostObject if we just decide to expose the entire Engine (https://github.com/reactjs/React.NET/blob/master/src/React.Core/ReactEnvironment.cs#L150-L153)\n2. Since JS engines are pooled (via JSPool), I think we'd need to make sure to remove the object from the environment once the request completes, to avoid memory leaks. I'm not sure if RemoveVariable does that, or if it'd need to be a new method added to JavaScriptEngineSwitcher.\nIf you don't mind compiling your own version of ReactJS.NET, you may be able to play around with this and see if it works for your use case \ud83d\udc4d \n. Any scripts used for server-side rendering need to be located on a locally accessible drive, ideally in the web root of the application. The server side rendering doesn't support loading scripts via HTTP.. This is because some classes are registered \"per request\":\nhttps://github.com/reactjs/React.NET/blob/5cbcd22e09444086401d51e65653505d49734146/src/React.AspNet.Middleware/ReactBuilderExtensions.cs#L65-L80\nThis means there's one singleton instance per request, and that instance is disposed at the end of the request. If there's no current request, this won't work, as we don't know the lifetime that the object should have.\nOne potential solution I can think of is to update HttpContextLifetimeProvider to handle the case when there's no current request, and just use transient instances (create a new instance on every call) in that case. We'd need to test and ensure there's no memory leaks though.\ncc @dustinsoftware - What do you think of this?. I think using dangerouslySetInnerHTML is the best thing way to do this at the moment. Server-side you can serialize it to an object with a __html property, then client side you could do eg. <div dangerouslySetInnerHTML={this.props.html} /> or something like that.. Awesome! I'm currently on vacation until next week, so I'll look into this next week, unless @dustinsoftware gets to it first. I want to release a new version of JsPool too. . I released a new version of JsPool recently, so that's all ready to go. I'll try to look into this soon if you don't get around to it \ud83d\ude03 . Thank you!. Could we extract this out into a separate batch file (like run-msbuild.bat or something like that) rather than copying and pasting it across all the files?. The first option sounds good to me. I like being able to just double click\nthe batch files :)\nSent from my phone.\nOn Tue, Oct 16, 2018, 11:04 PM Stefan Saroiu notifications@github.com\nwrote:\n\nCertainly.\nThere are two ways I could implement this.\nOption #1 https://github.com/reactjs/React.NET/issues/1: Add a\nparameterized runs-msbuild.bat that includes the common code. Then each of\nthe existing four batch files calls runs-msubuild.bat with an appropriate\nparameter.\nOption #2 https://github.com/reactjs/React.NET/issues/2: Collapse all\nfour batch files into a single msbuild.bat that takes two input parameters:\na configuration parameter and an optional action.\nFor example:\nmsbuild.bat dev (corresponds to dev-build.bat)\nmsbuild.bat release push (corresponds to release-build.push.bat)\nDo you prefer option #1 https://github.com/reactjs/React.NET/issues/1\nor #2 https://github.com/reactjs/React.NET/issues/2?\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/reactjs/React.NET/pull/610#issuecomment-430500783,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAFnHZYzJq5ihI_rP522LsFGbduwp2gcks5ulsh-gaJpZM4Xi9xm\n.\n. This looks good to me! Thanks.. Thanks!. Interesting! I haven't actually seen m_ used with .NET code, I've only ever\nseen it with C++.\n\n--\nRegards,\nDaniel Lo Nigro\nhttps://dan.cx/ | Twitter http://twitter.com/Daniel15 | Facebook\nhttp://www.facebook.com/daaniel\nOn Fri, Oct 26, 2018 at 10:31 PM Dustin Masters notifications@github.com\nwrote:\n\nHaha thanks, we use m_ at work all the time so that slipped through here..\nOn Fri, Oct 26, 2018 at 22:04, Daniel Lo Nigro notifications@github.com\nwrote:\n\n@Daniel15 commented on this pull request.\nThis looks pretty good to me!\nIn src/React.Core/RenderFunctionsBase.cs\nhttps://github.com/reactjs/React.NET/pull/615#discussion_r228701593:\n\n{\n- private readonly RenderFunctions m_renderFunctions;\n+ private readonly IRenderFunctions m_renderFunctions;\n\nNit: Rename this to renderFunctions. I use an underscore prefix, not m.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\n<\nhttps://github.com/reactjs/React.NET/pull/615#pullrequestreview-169043942\n,\nor mute the thread\n<\nhttps://github.com/notifications/unsubscribe-auth/AA5hFskBuK1ryCOWwnYZbsDCChwLCfAvks5uo-lMgaJpZM4Xy2Mj\n.\n\n\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/reactjs/React.NET/pull/615#issuecomment-433592754,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAFnHdUma4NgnsZj5Qqwv9m0C4p7xAc3ks5uo-_PgaJpZM4Xy2Mj\n.\n. Thanks! We should probably add redirects for these. . Adding redirects from these old URLs in #626. Thanks!. Need to work out what's up with this:\nsrc\\React.Sample.Mvc4\\React.Sample.Mvc4.csproj(196,11): Error MSB4226: The imported project \"C:\\Program Files (x86)\\MSBuild\\Microsoft\\VisualStudio\\v14.0\\\\WebApplications\\Microsoft.WebApplication.targets\" was not found. Also, tried to find \"\\WebApplications\\Microsoft.WebApplication.targets\" in the fallback search path(s) for $(VSToolsPath) - \"C:\\Program Files (x86)\\MSBuild\\Microsoft\\VisualStudio\\v15.0\" . These search paths are defined in \"C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\MSBuild\\15.0\\Bin\\MSBuild.exe.Config\". Confirm that the path in the <Import> declaration is correct, and that the file exists on disk in one of the search paths.\nsrc\\React.Sample.Cassette\\React.Sample.Cassette.csproj(208,11): Error MSB4226: The imported project \"C:\\Program Files (x86)\\MSBuild\\Microsoft\\VisualStudio\\v14.0\\\\WebApplications\\Microsoft.WebApplication.targets\" was not found. Also, tried to find \"\\WebApplications\\Microsoft.WebApplication.targets\" in the fallback search path(s) for $(VSToolsPath) - \"C:\\Program Files (x86)\\MSBuild\\Microsoft\\VisualStudio\\v15.0\" . These search paths are defined in \"C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\MSBuild\\15.0\\Bin\\MSBuild.exe.Config\". Confirm that the path in the <Import> declaration is correct, and that the file exists on disk in one of the search paths.\n\n@btholt @hross Do you know what's up with this? On my computer I can see this file at C:\\Program Files (x86)\\MSBuild\\Microsoft\\VisualStudio\\v14.0\\WebApplications\\Microsoft.WebApplication.targets\nI wonder if that's because I have both Visual Studio 2015 and Visual Studio 2017 installed... That'd explain why it works on AppVeyor too (AFAIK they have all the Visual Studio versions in a single image). Maybe this path needs to be tweaked for VS2017.. @dustinsoftware - Yeah, just trying it out at the moment. It looks really good though. AppVeyor is slow at times, and Azure Pipelines uses some of the newer GitHub integration features (like the \"Checks\" tab).. Sure, I'll look at this when I'm back from vacation (Tuesday or Wednesday).\nSent from my phone.\nOn Sat, Dec 29, 2018, 2:09 PM Dustin Masters <notifications@github.com\nwrote:\n\n@dustinsoftware approved this pull request.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/reactjs/React.NET/pull/642#pullrequestreview-188423323,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAFnHcNsjO8f8Wq6f-ytGGTRGFdNGg7gks5u9-gMgaJpZM4Ze61j\n.\n. Yeah this looks like it's working fine now. I just need to work out how to publish the packages to a development package repo. Currently we use AppVeyor, which automatically hosts all the .nupkg files. We can work that out separately though.. Sorry about this... We're aiming to release ReactJS.NET 4.0 soon, but just haven't had time to do it yet.. If you're using Webpack, the resulting JS file is served directly via your\nweb server, so you should configure gzip on your server.\n\nSent from my phone.\nOn Wed, Jan 16, 2019, 3:06 PM Taerarenai <notifications@github.com wrote:\n\nIs there any way to serve gzipped JS for the bundle (webpack) using\nReact.NET ?\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/reactjs/React.NET/issues/663, or mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAFnHamXm6MfTuWxY8o9RUEYhh1ndcxSks5vD7BqgaJpZM4aEIY4\n.\n. Sure, let's see how this goes.. I think it's fine since we'll get a PR from the bot when there's an update.\nWe won't automatically get updates anyways, due to the lock file.\n\nSent from my phone.\nOn Sun, Jan 20, 2019, 9:17 PM Dustin Masters <notifications@github.com\nwrote:\n\nI don\u2019t actually think we want to pin the npm packages, it would be nice\nto have an automatic update PR to react 16.8 when it ships\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/reactjs/React.NET/pull/667#issuecomment-455951148,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAFnHUrMWjBpVxi9g4-qzXe7n-Rqw5ZUks5vFU11gaJpZM4aJflf\n.\n. Thank you! This looks great to me \ud83d\ude04 . What version of Nodejs are you using?\n\nSent from my phone.\nOn Wed, Jan 30, 2019, 10:37 PM Kendall Bennett <notifications@github.com\nwrote:\n\nI am trying to get the code to compile, and I run the dev-build.bat file\nbut it fails when it tries to run gulp? Any idea what is going wrong?\nBuild:\n  node_modules/.bin/gulp\n  internal/util/inspect.js:31\n  const types = internalBinding('types');\n                ^\nReferenceError: internalBinding is not defined\n      at internal/util/inspect.js:31:15\n      at req_ (C:\\src\\git\\React.NET\\src\\React.Core\\node_modules\\natives\\index.js:140:5)\n      at require (C:\\src\\git\\React.NET\\src\\React.Core\\node_modules\\natives\\index.js:113:12)\n      at util.js:25:21\n      at req_ (C:\\src\\git\\React.NET\\src\\React.Core\\node_modules\\natives\\index.js:140:5)\n      at require (C:\\src\\git\\React.NET\\src\\React.Core\\node_modules\\natives\\index.js:113:12)\n      at fs.js:42:21\n      at req_ (C:\\src\\git\\React.NET\\src\\React.Core\\node_modules\\natives\\index.js:140:5)\n      at Object.req [as require] (C:\\src\\git\\React.NET\\src\\React.Core\\node_modules\\natives\\index.js:54:10)\n      at Object. (C:\\src\\git\\React.NET\\src\\React.Core\\node_modules\\graceful-fs\\fs.js:1:99)\nC:\\src\\git\\React.NET\\build.proj(95,3): error MSB3073: The command \"node_modules/.bin/gulp\" exited with code 1.\nDone Building Project \"C:\\src\\git\\React.NET\\build.proj\" (default targets) -- FAILED.\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/reactjs/React.NET/issues/712, or mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAFnHaSDYICTuvEe665EuhNBwVTysXYPks5vIo8QgaJpZM4abrKL\n.\n. Hmm, the most recent CI build is successful:\nhttps://ci.appveyor.com/project/Daniel15/react-net/branch/master\n\nIt's using Node.js 6 though. I wonder if there's a breaking change in a\nnewer Node.js version. We should likely upgrade the version AppVeyor and\nAzure DevOps are using.\nSent from my phone.\nOn Wed, Jan 30, 2019, 10:48 PM Kendall Bennett <notifications@github.com\nwrote:\n\nI tried changing to the 3.4.1 stable branch and it fails with different\nerrors (dotnet restore is failing there).\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/reactjs/React.NET/issues/712#issuecomment-459235369,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAFnHRvgw9coo3BgHrEbRX8Y6hT2ATz6ks5vIpGggaJpZM4abrKL\n.\n. You could try using nvm for Windows (https://github.com/coreybutler/nvm-windows) and switch to an older Node.js version. Perhaps we need to update something so the build works with newer Node.js versions.. Should work fine as long as you upgrade to a React version that supports hooks.\n\nAre you seeing this with server side rendering, or is it client side? . Thanks for the pull request! I guess we should upgrade to Babel 7 at some point.... Please let us know if you see this again... Netlify is supposed to auto renew the certificate, so I'll contact their support if it breaks again. . I'm reaching out to Netlify's support team. I used this tool to check it: https://asm.ca.com/en/checkit.php and it looks like it's okay on some servers, but expired on others:\n\n. @glasody or @kpkozak - Can you please re-test this? Netlify's support have mentioned that it shouldn't be broken any more.. Thanks! I'm able to verify that an expired cert is being served from that server, using this command:\nopenssl s_client -connect 35.156.37.214:443 -servername reactjs.net\nverify error:num=10:certificate has expired\nnotAfter=Feb 16 21:02:45 2019 GMT\nI'll get in touch with Netlify again.. @weltmeyer This should be fixed now - Could you please check?. Yeah I'd store these in variables in C# and then pass them in as props.. Upgrading to Babel 7 should be doable, we'd just need to double check that all the JS engines support it. The MSIE engine might not like it, but perhaps nobody is actually using that engine any more? I'm not sure.. This is not ideal. Let's try and hook this into IoC (ideally ReactJS.NET's IoC container, but Nancy's is fine too).\n. Private members should have an underscore as the first character (_supportedExtensions)\n. Remove System.Xml, System.Xml.Linq and System.Data.DataSetExtensions if not used.\n. Let's totally omit CommonJS modules for now. We should look at support for modules for ReactJS.NET as a whole, not just in the Nancy implementation. The user could load several modules so we'll have to wrap each one in a closure, similar to what Browserify does.\nFor this initial implementation I'd say to just have the JavaScript in the global namespace. Let's keep all the pull requests small and focused :)\n. Pull all classes into separate .cs files. These null implementations could go in the core React assembly.\n. Remove unneeded references.\n. Let's remove this for now (just use var Hi = ...) and think about modules later :)\n. Uppercase for classes (so var Hi is correct).\n. That's the one ReSharper default I dislike :). I prefer using an underscore for all private fields.  I don't know why ReSharper differentiates between static and non-static members as I think they should follow the same naming convention. Additionally, only methods and properties should have the first letter uppercase.\nAdditionally, sicne you will be using this for a lookup, please use ISet<string> rather than IEnumerable<string>. ISet has O(1) lookup whereas IEnumerable is O(n).\n. Can you please update the link text too?\n. There's still spaces here :P\n. Where is this actually used? I don't see any code that reads the config property.\n. Can you please pass this in via the constructor of JsxTransformer instead, similar to how all the other dependencies are injected?\n. What does this do?\n. This isn't necessary; the IReactSiteConfiguration and IReactEnvironment are two separate registrations in the IoC container. Please remove it.\n. Please capitalise \"JSON\"\n. You could just make the property get; set and remove this setter method.\n. Take the IReactSiteConfiguration in the constructor rather than accessing it via the environment.\n. Remove this property, the config is just injected via the IoC container so ReactEnvironment shouldn't be responsible for exposing it to other code. Any classes that want it should just have it injected into their constructor.\n. Just use an auto property (get; set;) and remove the private variable and setter method below.\n. Oh yeah, good point! I totally forgot about that.\n. I wonder if having this as a separate method adds value, it may be better to just inline the Environment.CreateComponent call in both of the methods below.\n. Can this be unit tested?\n. Instead of having two methods, make JsxFileOptions an optional argument\npublic static IAppBuilder UseJsxFiles(this IAppBuilder builder, JsxFileOptions options = null)\n{\n    return builder.Use<JsxFileMiddleware>(options ?? new JsxFileOptions())\n}\n. What is this doing?\n. I'd prefer if these registrations were in an AssemblyRegistration.cs file. For example, see https://github.com/reactjs/React.NET/blob/master/src/React.MSBuild/AssemblyRegistration.cs\nReactJS.NET will automatically execute the Register method of any classes that implement IAssemblyRegistration and are in a React. namespace: https://github.com/reactjs/React.NET/blob/master/src/React/Initializer.cs#L40-54\n. All public methods need a docblock comment for release builds, this should be enforced in the project file settings.\n. Typo: extenstions\nI'd include both .jsx and .js here. People may want to use the ES6 transforms even with non-JSX files.\n. Add docblock comment\n. Typo: extenstions\n. This can be moved into the core React assembly and made public\n. What about the fallback?\n. Does Owin require 4.5, or can you change this to 4.0?\n. Change this to ..\\..\\bin\\Debug\\React.Owin\n. Change this to ..\\..\\bin\\Release\\React.Owin\n. Add:\n<DocumentationFile>..\\..\\bin\\Release\\React.Owin\\React.Owin.XML</DocumentationFile>\n    <TreatWarningsAsErrors>true</TreatWarningsAsErrors>\n    <NoWarn>1607</NoWarn>\n. Add:\n<DocumentationFile>..\\..\\bin\\Debug\\React.Owin\\React.Owin.XML</DocumentationFile>\n. Please sign / strong-name this assembly by using ../Key.snk\n<PropertyGroup>\n    <AssemblyOriginatorKeyFile>..\\Key.snk</AssemblyOriginatorKeyFile>\n  </PropertyGroup>\n. Remove unused references (System.Xml.Linq, System.Data, System.Data.DataSetExtensions, System.Xml)\n. Delete this file if it's not needed\n. Please don't add jQuery to any examples :)\nCan you copy the example from React.Sample.Mvc4?\n. Indentation is inconsistent - body uses tab whereas this line uses spaces. \n. Can you reuse the same example from React.Sample.Mvc4 for consistency?\n. Use React from Facebook CDN (http://fb.me/react-0.12.2.min.js)\nAlso please move scripts to the end of the <body>.\n. Add a debug message:\nConsole.WriteLine(\"Running on localhost:12345, press enter to quit\");\n. What is this for?\n. Please use the same version of Newtonsoft.Json as the React core assembly uses.\n. Remove unused references\n. Kill it with fire please :)\n. What is this for?\n. Please fix the indentation to use tabs everywhere - This file is a mix of spaces and tabs.\n. This should be passed a per-request lifetime so the correct cleanup is done at the end of the request. I think at the moment nothing is being disposed properly at the end of the request (or all the per-request objects are actually singletons). In ASP.NET I use HttpContext.Current for that (see https://github.com/reactjs/React.NET/blob/master/src/React.Web/WebInitializer.cs and https://github.com/reactjs/React.NET/blob/master/src/React.Web/TinyIoCAspNetExtensions.cs). I'm not experienced with OWIN so I'm not sure how to do this properly. Does OWIN have its own IoC container? How do other IoC containers integrate with it?\n. Why internal?\n. Use named arguments for boolean parameters. component.renderHtml(renderContainerOnly: true)\n. Keep this as RenderHtml() since false is the default.\n. Minor tweak: Change false to <c>false</c>\n. I think this description is a bit longer than it needs to be. I'd suggest changing this paragraph to:\n\nThe OutputCache attribute is used here to prevent browsers from caching the response. When designing a real world API, caching of API requests should be considered more carefully. For this tutorial it is easiest to simply disable caching.\n. Remove the \" to simplify the request URL a bit\" bit - Ideally a production app shouldn't really use the default route.\n. > Why shouldn't a production app use the default route?\n\nIt does work fine and you can do it that way, but ideally you should think about a good URL structure for pages in the app. Using the default route exposes internal implementation details (controller and action names) that you might want to change in the future. Cool URIs don't change, and well-designed URIs should remain the same regardless of the code behind them or the backend technology being used. Removing the default route makes you think about every URI as you build the site and generally results in cleaner more maintainable URIs.\nI think at least some of that is personal preference though :P \n. Why is string.Empty necessary here? How does the code loading the scripts handle this?\n. \"initialise\" is correct in British English :) If you want to Americanise (Americanize?) the spelling, please do it in a separate pull request :)\n. I don't think this example works as-is, you're defining renderReactAttributes inside the props rather than as a separate parameter.\n. Please use tabs rather than spaces.\n. Tabs\n. Please use tabs rather than spaces.\nAlso why does this need to be changed? What's wrong with the old version? Passing through to the inner IFileInfo should be sufficient.\n. It looks like a space was added to the start here? Seems unnecessary.\n. If this is no longer required, can you please update the documentation too? https://github.com/reactjs/React.NET/blob/master/site/jekyll/getting-started/aspnet5.md\n. Revert this change please, it's just changing tabs to spaces. Please keep it as tabs.\n. This can be if (env.IsDevelopment()) now\n. What happened here? Why is the whole file marked as changed?\n. Please remove the excess whitespace here\n. Correct MIME type is application/json (/ not -)\n. Please fix indentation - You're using spaces, but this project uses tabs.\n. Please fix indentation - You're using spaces, but this project uses tabs.\n. Fix indentation\n. I would prefer if there were two separate actions - One that returns JSON, and one that returns HTML. The loadMoreClicked function in JS can hit the JSON endpoint, while the 's href can be the HTML one.\nAlternatively, switching by content-type is fine, but you must send a Vary: Content-Type header to prevent proxies from incorrectly caching it. I think the OutputCache attribute would let you do that.\n. Why is this needed?\n. I don't think it makes sense to have both of these sections. I'd put them in two separate code blocks (eg. \"here's how to add scripts normally\" and \"here's how to add scripts if you're using a build tool\")\n. LOL, thanks :laughing: \n. Rather than having two separate branches here, it might be worth having a list of attributes\nSomething like (not tested):\n``` csharp\nvar attributes = id=\\\"\" + ContainerId + \"\\\";\nif (!string.IsNullOrEmpty(ContainerClass))) {\n    attributes += \" class=\\\"\" + ContainerClass + \"\\\"\";\n}\nreturn string.Format(\n    \"<{2} {0}>{1}{2}\",\n    attributes,\n    html,\n    ContainerTag\n);\n``\n. It's probably worth mentioning that this syntax (UseReact) is specific to ASP.NET 5, and users of ASP.NET 4 will need to do this in theirReactConfig.csfile instead.\n. Nit: Just say2.2rather than2.2.0, I usually omit the.0:)\n. Please revert these changes.dev-build.batshould automatically revert them back after a successful build.\n. This name is pretty confusing, what about calling itTransformWithSourceMapCached` or something like that?\nAlso, please add unit tests for this method.\n. Remove the blank lines\n. Instead of having an out parameter, what about just returning null if the cache isn't valid?\nvar cached = _cache.Get<JavaScriptWithSourceMap>(cacheKey);\nreturn cached != null && (!forceGenerateSourceMap || cached.SourceMap != null\n  ? cached\n  : null;\n. Do you think this is useful? It seems like overkill :) How about just adding AddScriptLiteral for now?\n. I can't see any noticeable change in this line so it's probably replaced newlines (\\r\\n with \\n or vice versa). Could you please revert all the lines that aren't directly related to your change?\n. Hmm, strange. What error do you get if you remove this? In theory it shouldn't be needed at all.\n. Any particular reason for removing the trim()?\n. Should this run the equivalent dotnet command to ensure RC2 is installed on the build machine?\n. Could you please adjust the spacing here? It should be using tabs rather than spaces. I though there was an Editorconfig file in the repo but it looks like I forgot to commit it.\n. Do we still need this now that you reverted it from being a .csproj?\n. Keep the GUID the same? I don't see a reason to change it :)\n. Is the project reference no longer needed?\n. Remove the comment too, please.\n. I wonder if we should rename the ASPNET5 define too. It's referenced in a few source files via #ifdef ASPNET5\n. This is totally fine, I wonder if it should be done in build.proj along with all the other NuGet packages, to keep everything consistent.\nThanks for figuring this out, btw :)\n. Revert all these changes please, since they're just changing whitespace.\n. Add the copyright header\n. Use tabs rather than spaces\n. What is this for?\n. Is this a final release? Should it be rc2 rather than preview1?\n. Thanks for the info :+1: \n. Looks like they've got an install script for CI servers (see https://dotnet.github.io/docs/core-concepts/dnx-migration.html). However, their docs for AppVeyor just say \"TODO\" (https://dotnet.github.io/docs/core-concepts/core-sdk/cli/using-ci-with-cli.html). It's fine to ignore that for now if the AppVeyor build actually works with no changes.\n. Ah, good point. Setting preprocess directives was actually broken for ASP.NET 5 projects, so all the conditions instead check for LEGACYASPNET and assume a ASP.NET 5 environment if not set (eg. https://github.com/reactjs/React.NET/blob/df0313d652b339b1f6cdbf59811da219611c0973/src/React.AspNet/HtmlHelperExtensions.cs#L13). I guess you can rename this without changing anything then :)\n. Oh cool, I didn't know about being able to target projects like this! Is there documentation on it?\n. This change was incorrect, it wasn't handling per-request singletons properly and was instead just using a single instance for the entire app. I fixed it in a4992da25bd4880aab3b2fabe739e6a176dbde6f :+1: \n. Would prefer calling this ValidateCache and making it return true if the cache is valid.\n. You could return early here, rather than wrapping the entire thing in the if.\n. Yeah, CacheIsValid or CheckCacheValidity would be fine.\nAlso please make it private, and it does not need to be virtual.\n. This is probably not needed... The call site could just call Dispose on the engine directly.. Don't worry about bumping this, I'll bump it on release.. Indentation looks a bit off here, maybe it's using spaces instead of tabs?. I don't think this is needed. . You can probably just use ReactEnvironment.Current directly rather than wrapping it and rethrowing.. Do you actually need the Response argument if it can come from the htmlHelper?. This should be response (lowercase r). Remove the blank line please. It feels a bit strange for a HTML helper to set the status code, I can't think of a better way to do this though.. Maybe add react router and router as tags too.. You can remove this, System is always referenced by default.. The indentation in this file is all broken, could you please fix it? It should use tabs like the other files.. I'd prefer for this to just be polyfilled in shims.js in React.Core rather than here. Notably, this only needs to be done one when the engine is initialized, rather than every single time a ReactRouter component is rendered.. Move this polyfill into shims.js. Fix indentation in this file.. Fix indentation in this file.. Fix indentation in this file.. Please fix the indentation.. Please fix the indentation. Remove this if you don't need it.. Sorry, looks good to me now, I guess there was  a GitHub bug with rendering.. > i was hoping it might help for unit testing\nFor unit testing, you should be able to mock the ViewContext property on the IHtmlHelper.. In that case, I wanted to show a more specific error message for if ReactJS.NET was misconfigured. I guess that's useful here too though! Maybe ReactEnvironment should have a getter that does that (like ReactEnvironment.GetCurrentOrThrow()) so that the code is not duplicated.. Ah, interesting.. > It's a static extension method calling another static extension method. Is there a way to proxy this behavior and have CreateRouterComponent create a Mocked reactcomponent?\nHmm, that's tricky \ud83d\ude15 Static methods can't be mocked. Are you having issues with the test because of that? . What changed on this line? Is it a Byte Order Mark?. Thanks. The build script passes this in, but I guess the warning still appears when building in Visual Studio.. I'd prefer if this was injected via the dependency injection container, to more easily facilitate unit testing and decouple the components. Could you register this  AssemblyRegistration.cs? Something like:\ncontainer.Register<Cache>((c, o) => HttpRuntime.Cache);\nThen inject it into the constructor:\npublic AspNetCache(Cache cache). Can we just use the JavaScriptEnginerSwitcher property for this? I think it has a preferred/default engine setting too.. I need to fix the indentation in this file.. I wonder if we should also allow setting an exception handler per component (eg. as an argument to this method). Hmm.. Instead of checking if this is null, what about making it the default handler? That way, _configuration.ExceptionHandler would never be null.. Might be worth passing ComponentName and ContainerId too.. Why is this change needed?. Why is this change needed?. Isn't there already a getter for this? ReactSiteConfiguration.Configuration or .Current or something like that?. There's a lot of magic numbers in this code. It'd be good to pull these out as constants and add comments explaining what they're doing.. Would be good to add an interface for this, and use the dependency injection framework to inject it into ReactComponent. That way, anyone can swap out the implementation if they want to (eg. if they want the old one back).. Why 19?. Pull out 19 as a constant. (see AssemblyRegistration.cs, use .AsSingleton()). I think it was to ensure that characters are escaped as appropriate (eg. if your container ID has special characters in it). However, it's likely that most users are using the standard auto-generated container IDs, so this change is probably safe.. What does .Verifiable() do?. Shouldn't Path.Combine be normalizing the path already?. We should upgrade this guide one day.. I wonder if a singleton instance of JsEngineSwitcher should be registered in the IoC container rather than using the static Current property.. This function signature is getting a bit long... But I guess it's OK since they're all optional.. Split this onto multiple lines like in HtmlHelperExtensions?. Hmm, I wonder if it's worth having something inbuilt for styled-components specifically, for example maybe an API like this? \nHtml.ReactRouter(\"RootComponent\", new { })\n  .WithStyledComponents(). It'd be good to put all this code into a separate file (eg. JavaScriptPrecompilation.cs) to keep things organized. . This is a breaking change (removing a field from the public API) so we need to ensure we do a major version bump for this. However, I think we are already bumping the major version due to using the latest beta JavaScriptEngineSwitcher, so it should be fine.. Is this code specific to tests?. Nit: Rename this to _renderFunctions. I use an underscore prefix, not m_.. We probably have to update every dependency in this tutorial code at the same time. Seems like this is missing from the new config. @dustinsoftware  can you confirm that it's still compiling React in production mode?. ",
    "paulirwin": "JSX support is currently top of the User Voice for Web Essentials -- IMO, it would be the better option to add it to Web Essentials than having a separate extension.\nhttp://webessentials.uservoice.com/forums/140520-general/suggestions/4935998-add-reactjs-jsx-support\n. @jordwalke Who says Web Essentials would have to transform anything? Just add a JSX template file, syntax highlighting, tag completion, etc. would be fine. We can still leave React.net to do the transformation to JS.\n. If VS Web Essentials took a similar approach to the Sublime addon I think it would meet most people's needs. AFAIK Sublime JSX doesn't transform the JSX at all, just provides syntax highlighting and the usual Sublimey autocomplete based on similar words used in the open documents.\n. Ah ha, very strange. It did install 1.0.0 along with older versions of the dependencies even though I only installed it a few days ago, well after 1.0.1 came out, like you said. I will upgrade React.Core to 1.0.1, as well as the latest versions of JavaScriptEngineSwitcher.Jint, JavaScriptEngineSwitcher.Msie, and MsieJavaScriptEngine, and I'll post back here and let you know if it occurs again, or if it seems to be resolved after enough time testing it, I'll post that as well. Thanks for responding so quickly!\n. I just encountered the AccessViolationException again on the latest versions of all the NuGet packages. No debug info, no call stack, nothing. I agree that it is most likely in the IE engine. I guess I could try Jint and see if that helps?\n. I still haven't switched over to Jint yet so this is still MSIE, and I just got it again. Here's the full message: \n```\nAn unhandled exception of type 'System.AccessViolationException' occurred in Unknown Module.\nAdditional information: Attempted to read or write protected memory. This is often an indication that other memory is corrupt.\n```\nAnd that's all it gives, no ability to see any other details of the exception in VS. During this, VS shows a \"Code not running\" tab and there's nothing in the call stack window. If I hit Continue (F5), the process shuts down and VS stops debugging.\nI'm going to try removing MSIE in the web.config and use Jint and see if it happens again -- I'm guessing it won't since Jint is managed code.\n. I should also note that this was with a completely different application/solution than when I was getting it before, with completely different, unrelated JSX files, so it doesn't seem to be anything related to my project.\n. 64-bit, IE 11 on 8.1. I'll try building from source and running the samples, but I'll have to modify the samples to really test it out, as it almost never occurs on the first hit in the app, it's usually after modifying the JSX files multiple times while debugging.\nLooking at the \"has its own config\" link to the source above, I see that you're using ChakraActiveScript. Have you tried it with ChakraJsRt mode? Just curious to know if there's a difference.\n. FYI - My colleague has now also received this exception on his machine, which is also 8.1 with IE 11. So this is not an isolated issue to my machine.\n. Thanks @jlchmura, glad it's not just us! Also, an update, I have confirmed that our entire dev team gets this exception regularly. Hopefully someone can figure out what's happening!\n. @jlchmura Is that the cause of the Access Violation Exception?\n. FYI - it seems @jlchmura's fix was at least partially unrelated to this issue, as my team of 4 developers each still get this exception daily when using the MSIE engine. We switched to the V8 engine and so far we haven't gotten the exception -- I'll update here if we do, but so far so good. There definitely still seems to be a problem with the MSIE engine.\n. No, our team has not seen the exception in the last couple weeks since switching the Web.config to use the V8 engine, and we are on ReactJS.NET 1.3.0. \nTo be honest, should this project consider adopting V8 as the preferred engine? It seems to work rather well, there is clear industry support for V8, and I like that ClearScript V8 packages the V8 DLLs along with your project instead of depending on MSIE on the web server. I would encourage everyone using this project to try out the V8 engine, and if after a while there aren't any issues, use that as preferred with MSIE as a fallback.\n. Original issue creator here. Wow, I can't believe it's been over 2 years since I originally filed this! Unfortunately I can't help validate with the latest changes as we no longer use this library, we now use either Webpack/Babel or the TypeScript compiler to transform our JSX. But I can say that in the last weeks that we were using this library we did still encounter this issue from time to time with V8 as our only engine in our web.config file.\n. I am getting this exception as well with latest 3 NuGet releases. Seems similar in terms of how it crashes to #28 that I submitted a while back.\n. ",
    "abergs": "I'd be super hapyp just to get some syntax highlighting. Have to switch to sublime in order to write .jsx files currently.\n. ",
    "zzz6519003": "does the react project itself support sourcemap?  that way i can read source code more easily by debugging the program  XD\n. ",
    "schotime": "Really interested in this one.\nHad any more thoughts on how it might work?\n. No tests yet. Will wait and see if you think there is a better way.\n. Signed the Contributor License Agreement.\n. I tried that, but the InitialiseEngine (runs react scripts) runs when the Engine gets accessed, so if there was a better way to control that then yes.\nThis way did make it easier to reason about but slightly more code\n. I'll have another try...just had an idea, scratch that. It should run on the client/server for each call to Html.React() so my idea wont work.\n. ",
    "PeteDuncanson": "At the minute everything coming out from Facebook appears to be in CommonJs syntax (the Dispatcher for Flux that you released for instance) which has made me lean towards following suit for ease. Any reason why one over the other? With CommonJS you seem to be able to leverage node.js modules such as the event emitter etc. so more goodies for less effort.\nAll the mods you are doing all seem to be very .net tool heavy, any reason for avoiding re-using existing tools such as node.js, grunt, etc other than trying to not scare away die hard .net fans? I use .net every day but don't mind introducing a new tool if it does the job.\n. I've been playing with getting commonjs modules working (ala node style of writing them) and think I've managed to get it wired up both server-side and client-side.\nI've ended up using a Grunt task that stitches together Browserify (where you can do . style of file selections so giving you that for free). You need grunt-react too.\nThis will generate out a single bundle.js file which has everything in all, grunt-react takes care of compiling the .jsx files into .js and then browserify does the bundling (for bonus points run it through uglify to minify it too).\nThen in my React.config I just reference the one bundle.js and I should never really have to revisit it once this is setup.\nThere are some issues though, when trying to call the components in Razor scripts that I actually want to compile I can't get to them as they are in modules. Best way around that so far is to include a app.js file at the end of the bundle (its just another file to bundle via browserify) which adds a global reference to these top level components. Then things start to work however given what you say here  https://github.com/reactjs/React.NET/issues/61 I'm not sure if this \"poluting the global namespace\" is ok or not as you seem to be saying it might \"hang around\" between runs. As I'm just using it for storing my root components I'm hoping I'll be ok?\nI'll craft up a blog post going into this in a bit more detail this week.\n. I've been playing again. I've been having terrible trouble getting my bundled files down to a sensible size as everything I'm using want to pull in React via the require(\"react\") method in CommonJS. This is really clear when pulling in ReactRouter. By not being able to include re-usable components using require you miss out on so much but by having ReactJS injected by ReactJS.net globally its causing some headaches for me.\nI've added a config to my fork of ReactJS which allows you to say \"I'm bundling everything up, please don't inject React on my behalf\" which seems to make everything a bit easier. Needs testing but I think it might solve alot of my issues with bundling.\n. React.net out the box will use 20 engines but it will only load React once per engine to save on that parsing. After that its just your code that it has to parse and work with each request. \nThe current set up we have with ReactJS is something like this. We compile everything down to one bundled file which includes all our code, React and React-Router. Basically everything it needs to run. We've had a fork of React.net which disables loading React (as its in our bundle we don't want it twice) and instead we load our whole bundle when each engine initialises. Then the only code we run is the code to get the correct Route from the router. Sadly to work this needs quite a chunk of JSON at the minute which might be a bottle neck but we are working on that. \nOnce our bundle is loaded though its there in memory ready to be re-used so we save the imported/parsed/executed look on the server. Client-side we send the same bundle down the wire to the client.\nOur current bundle is 280K minified and 80K g-zipped. Pretty big but remember thats just about all our site and in browser its blazingly fast and by pre-rendering on the server the user experience is amazingly fast. The time to render on the server is pretty damn quick too. Its just the memory consumption we've noticed thats a worry but we are zero'ing on that and have several tweaks we are working on that should shift it, I don't see it being a problem that we can't fix at this time via some massaging of how ClearScript is being used.\n. @shadowii I was going to write something but then @Daniel15 beat me to it with is post which cover most of it. Could still write something up though to share the pain. In short Webpack is the way to go :)\n. Couple of options, if you don't have too many messages/languages then you could render them all out in a JSON object and just include that in your bundle? Let the JS handle which translation to show rather than the Razor.\nIf you have too many languages/settings and don't want to include them all for all users you can have \"global\" objects which you can get your bundle to assume exist without you having to include them in your bundle (ie you are going to included them in another script tag somewhere). If you go that route then you can use your Razor to work out which js file of settings to use and just included the right one for the current language. For bonus points this file could be rendered itself via Razor if the settings need to come from a CMS or similar.\n. @Daniel15 I've been doing some deep deep mining on this one :)\nI'm hitting issues at the minute with simply not knowing enough about packaging up CommonJS modules. ReactRouter uses require to get to React and as a result I need to browserify it all up but that causing me to have to pull in 2MB of js which is plain silly when I have to push the same stuff down the wire to the client. I'm sure there is a way of trimming htis down or pushing it to client-side script tags but its a jumbled mess of options, shims and transforms to get this working that currently is testing my knowledge (I'm being forced to learn too many things at once...badly).\nI've had a stab at getting Router running server-side however (using the 2Mb bundle just to see if I could). The issue is getting the url for the request into the Router itself and render it out. Did some hacking around and got somewhere but not close enough, needs more time. \nAn alternative was to inject the url into the JS engines global namespace and see if I could pick that up somehow and render that. \nTime is sadly against me now as I'd stupidly assumed Router would \"just work\" when it actually needs a lot of work. So current tack is to try getting React Router Component working instead which I think will run with the existing setup of ReactJs.net. I'm playing with that bit now and will report back.\nRegarding the isomorphic stuff, I'm happy pushing everything to the JS and having the Asp.net MVC stuff handle rendering the initial template and the web api. Other than that its all in the JS. Should work once this leg work is done.\n. Right, quick update and a query about where best to go.\nReactRouterComponent works server-side but trying to get it bundled up was causing no end of problems, it kept pulling in React itself and other nodes bits and bobs (its all build using CommonJS modules so made sense to go that route). But after a day of battling it I backed off and changed tact.\nLatest idea is to return back to React-Router and patch up the ReactJS.net code to allow for it. I've had a stab at this as a rough proof of concept. Their is an issue, Router need to boot up, choose a route and then it does a call back passing you the right component to render. Trouble is we need to render it to a string in that callback. I don't know of a \"clean\" way to get the callback to fire and return a string up to the .net code from the V8 JS engine. The \"dirty\" way I've come up with is to have the callback save the string for the component rendering into a global var in the JS engine and then....poll the engine to see when this var is set...dirty ain't it? Pull out the value of the var then render it down the pipeline job done. We'll thats the plan currently.\n@Daniel15 can you think of a cleaner way to do something like that? Anything built in to the v8 wrapper you are using. Read about using a handler or similar but can't find much on it.\nWill keep playing but any pointers would be good. If I'm walking on new ground then let me know and I'll leave a trail to follow ;)\n. Got with working using the timed polling method I mentioned. Might refactor it to use the method calls out to .net as you suggest once I've had a bit more of a play around with the Router client-side. Next issue is to get the data used to render it server-side to appear client-side which I'm hoping is going to be an easy one.\nCheck out latest commits if you want a peek and see any improvements :)\nhttps://github.com/PeteDuncanson/React.NET/commit/f4d6c529f8bdb8db37854dc09484d669b3d66ef5\n. Hi @xdansmith,\nThis works just fine but you have to use our folk of it to get the ReactRouter html extension. I could do to write up how to do it properly to save any guess work. We've since written our own .net js wrapper which is hard coded for V8 that does what we want and using that now, we need to get that released too :)\nCheers\nPete\n. @Todilo I've been away at Umbraco's Code Garden festival this last week so not had the chance to write anything up. However as I was presenting on how to use React with Umbraco I've got some blogs and \"how tos\" to write.\nWe released our V8 version here: https://github.com/Offroadcode/SuperchargedReact.Net\nNot much docs with it as yet, again thats on my todo list now I'm back.\nAdditionally there is our React Starter Kit for Umbraco here: https://github.com/Offroadcode/Umbraco-React-Starter-kit and a very to the point doc about it here http://skrift.io/articles/archive/getting-supercharged-with-react/ that discusses using it in Umbraco.\nMore to come, I'll try to remember to post it here or follow us if you want the latest.\nCheers\nPete\n. @scratch-net we've done some profiling in house (nothing fancy) and seen a definite improvement in speed simply because we are dealing with just the one JS engine, V8, so we can leverage all its various settings and tweaks to tune it rather than going through an abstraction layer or two as React.net needs to (as it support multiple engines). There is more about this over at this issue https://github.com/reactjs/React.NET/issues/78\n@Todilo looks like I broke the build! Let me see if I can patch it up and thanks for the heads up.\n. @scratch-net I'll get a nuget together for you asap, been away a week so playing catch up. We to go the \"everything in one bundle\" route and it works a treat. Supercharged allows for either running just a component render or ReactRouter out of the box. Basically all the bits we added to our fork of React.net\n. @dhruska I've got a fork going with some of the work in but not touched it in a while and I know its not finished. Too many things on at work at the minute :(\n. We've taken to bundling everything (React in our case React-Router) into one bundle and then just including that one bundle in our React.config scripts. We've a fork of React.net which doesn't include React so it just runs our bundle. Seems to work pretty good and removed a lot of the headaches we had with \"external\". \n. Switching to use a new engine per request certainly sorted out the memory issue at the expense of hitting the CPU a little harder. Happy with that :)\n. We've been using the same bit of kit here, trouble is it can't give you any details about the unmanaged memory other than how much you are using. Still its certainly helped.\nStill seeing quite a ram up in unmanaged memory usage but then it settles down after a while bobbing around with about 300Mb being used or there abouts. \nRequests are slower too, might need to do some more digging. I \"think\" the JS engine builds a load of objects for the JSON we pass in but is not releasing it fast enough. Forcing the GC seems to make it behave somewhat better. Still trying stuff out this end though. Anything we can do just ask.\nIn the meantime though enjoy your vacation :)\nCheers\nPete\n. Just a little feedback on this one. We been playing with clearing out the global vars before we hand the engine back to the pool (as shown here https://clearscript.codeplex.com/discussions/461288#PostDetailsCell_1104949) and saw the memory usage greatly reduced. Seems doing that allows GC in V8 to kick in and do its thing. Might be worth considering?\nOn a side note we've been playing with just using V8 direct and got some very sweet speeds (including all the tricks we've learnt while poking around). We've got our pages down from 0.5 seconds to 0.180 using a new engine (well context at least) everytime. Now looking at basic pooling to see if we can't save the 80ms its taking to spin up and populate the engine with our bundle each time.\n. Calling garbage collection didn't do much as the refs to the vars are still there. Clearing those out and then calling GC made a big difference. It's running really well without a pool at the minute. Got render time down from .5 to .18 seconds. Could do more with pooling though I think. Like the idea of using js pool. Will take a look\nSent from my iPhone\nOn 7 Mar 2015, at 01:40, Daniel Lo Nigro notifications@github.com<mailto:notifications@github.com> wrote:\n@PeteDuncansonhttps://github.com/PeteDuncanson\nWe been playing with clearing out the global vars\nInteresting, is the memory usage considerably reduced when you do that compared to when you just do engine.CollectGarbage(true)?\nOn a side note we've been playing with just using V8 direct\nYou mean rather than through JavaScriptEngineSwitcher? In theory JavaScriptEngineSwitcher shouldn't significantly affect performance. I wonder where it'd be slowing down.\nNow looking at basic pooling\nYou could probably modify JSPool to use V8 directly :)\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/reactjs/React.NET/issues/78#issuecomment-77676567.\n. Hi @PureKrome,\nWe've gone the route of just building a hardcoded V8 version which has allowed us to use all the performance tweaks we can to get the most out of it. You can get that over at https://github.com/Offroadcode/SuperchargedReact.Net\nClearing out any global variables by running \"delete myvarnamehere;\" style commands in the runtime before throwing it away helped greatly on memory leaks and something I think could be added to ReactJS.net (@Daniel15 I might do a pull request for this if I get time). We've not gone the pooling route as getting a new context is proving to be blazingly fast if you just ask the DLL for a new one rather than invoking a new instance each time, is a small change but made a big difference, sadly this couldn't be done using the current JavascriptSwitcher and JSPool setup hence us stripping them out and going direct for V8.\nSome other tweaks we did was allow for re-using compiled scripts which saves on the parse time every cycle (again you can't do this with the current levels of abstraction). Assumed that you've already bundled and JSX compiled your code so stripped out that step too.\nAll in all its blazing fast but does not have the flexibility of switching engines or broad reach that ReactJS.net has and is built for. As I said I'm hoping to implement some of these tweaks as PR's but with 3 different abstration layers and each being a separate project we might have a PR casscade which might hold things up which is another reason we jumped head first into coding up SuperCharged and knocked it out in 2 days (which was only possible thanks to the excellent work already done by @Daniel15).\nShout if you want to know anymore.\nPete\n. That might work, I know next to nothing about VroomJS and don't have a Mac so can't really test it. However if its just the two engines then it \"could\" be possible to optimise both some how then. Will be good to see how we might do that. Would need to do some reading up on vroomjs though, feel free to poke around in Supercharged to see what we are doing and steal back what you need if you beat me to it :)\n. When you get this its not the end of the world, it just means React has to re-draw everything again client side. Always nice to get rid of it though if possible so lets do some digging.\nOne issue you might have is the time that it should be comparing the date from, this could be greatly different depending on the clients time on their device compared to the time on the server (or timezone). If your site is targeted to a single country (with a single timespan) like here in the UK then we've got around that by sending down the server time and using that for the comparison to rule out any time differences on the users machine. However if in the states this might not work.\nA possible fix is to NOT render the element out on the server OR client and then setup a setTimeout in the componentDidMount method to get it to redraw via a state change thats run in the setTimeout callback? The server won't run the callback but the client will but the initial HTML both generate will match and the error should go away.\n. Daniel has not had time to looking VS 2015 as yet but there are some details here https://github.com/reactjs/React.NET/issues/47 that might help you. I fear you are on your own at the minute on this path less travelled :)\n. I found the additional repo for JavascriptEngineSwitcher needed to do our debugging and optimising a bit of a chore plus the chances of getting PR accepted get stretched as our stuff is pretty specific to V8. As the code is only parsed once then left in the pool the gains of compiling would be minimal I suppose.\n. Hi @snowjim, the compilers telling you correctly as it understands it I believe, some JS bugs can be nasty to track down as they might be caused by errors further up. This one is a classic. When you get an error like this it at least lets you know that you have a syntax error or typo above that line somewhere. The parser works top down so it got to line 22 before it said \"wait a minute\" something is wrong here and its to do with full stops aka '.' \"\nSo working back up from line 22 (I had to cut and paste into a text edit to find it) I find this typo on line 14 which might just well be the cause:\nif(cell..Data.IconUrl.length > 0){\nnotice the extra \".\" which is what the compiler is complaining about I guess. Fix that and try again. Rinse repeat.\n. I've been getting this one on and off but could not find the cause, would be nice for it to not throw this error on live. Doing a deploy for instance would potentially give this error to live customers which I'd rather avoid (plus of course preventing a client from seeing this for confidence reasons).\n. +1 .AddScriptWithoutTransform(\"~/js/server.bundle.js\")\n. It's doable but we needed to write a new method to do it as router needs to be passed the URL.\nOur fork has the mods in if you want to take a look.\n@daniel15 been playing with ideas for making the js code a bit more flexible. Latest idea is to pass in some variables to the engine for URL (and anything else that might be handy) then have a file with the js to run react rather than having it hard coded in the c#. File watcher on the file to pick up changes of course. Could make the whole setup more flexible?\nSent from my iPhone\nOn 7 Mar 2015, at 01:36, Daniel Lo Nigro notifications@github.com<mailto:notifications@github.com> wrote:\nI think @PeteDuncansonhttps://github.com/PeteDuncanson was attempting to use React Router from ReactJS.NEThttp://ReactJS.NET, although I'm not sure how far he got with it. I don't know how difficult it would be to do.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/reactjs/React.NET/issues/98#issuecomment-77676442.\n. Back from holiday so just catching up. How did you get on?\n. @dgwaldo trying our fork and it compiled just fine, did you run the dev.build file first as per the original ReactJS.net docs? That would cause an error but it does it for the original too. Fingers crossed thats the issue, if not let me know as can't recreate here.\n. We've coded something like this in when we had to get ReactRouter working. I agree it would be a great idea to add in but the tricky bit comes from passing in .net vars you need to play with. For now we've got around that by creating a global object containing the bits we need that we poke into the engine before our script runs so it can safely reference the values it might need from the host. This object include the request url, form and query string values for now. That has made it super flexible.\n. Ouch my head...I have no idea what this is doing! :)\nWhat do you mean by \"create components across different servers to comprise a page\"? It sounds like you are rendering different components on different servers but I can't see how that would be speedy or needed. Can you give me some more info?\n. Hi. \nI'm happy with your description sorry for not acknowledging it. Love the idea of rendering on multiple servers. It sounds crazy but I like it :)\nPete\n. Under the hood the @Html.React call will convert your Model (in this case your list) to JSON and inject it in as a string which when parsed by the JS engine on the server will appear as a object literal. As a result you should be able to just do this:\n@Html.React(\"MyComponent\", new\n{\n    initialListItems = list\n})\nAnd then you can load it in your component. You are using getInitialState, I'd be tempted to use getDefaultProps instead as you are passing in your values as props, depend on what you intend to do with that initial data I guess as its not clear from your question, either way they look very similar:\n```\ngetInitialState: function () {\n    return {\n        listItems: this.props.initialListItems,\n    };\n}\n// or\ngetDefaultProps: function () {\n    return {\n        listItems: this.props.initialListItems,\n    };\n}\n```\n. Personally I don't see whats wrong with simply using Webpack to bundle up your scripts. Means you get server-side and client-side all done in one step. I don't know what you would be gaining by doing it Edge?\n. @andersekdahl I'm quite open about SuperCharged in that its come far enough to meet our needs so attention has moved on to using it rather than developing it plus it means currently its not all that user friendly for newbies (no documentation!) even though there is not much to it really. \nHowever I'm very keen to get more people having a play with it. Sadly paying the mortgage and doing up the house and playing with my kid mean evening coding time is zero these day. However I do know it need some more documentation to get folks up and running with it quicker and easier. Its not doing any black magic, it just does away with some of the constraints Daniel had in React.net (or added some moreconstraints I'm not sure which way around that should be), for instance we only work with V8 and I've not even given a moments thought about Mono or Asp.net V5 etc :)\nWhat I can say is its doing a sterling job on a few of our client sites and I'd happily use it on more in the future.\n. @andersekdahl yep thats the latest. You can either run it with ReactRouter or to render a single component via a HtmlHelper.\nGeneral gist is you need to include reactrunner.js in your project and that does the magic of working out if you are rendering using ReactRouter or not. Globally we have a setting object that SuperCharged pokes into the JS engine with the settings from the server if you need to pass anything extra in. Off the top of my head those are the two main \"tricky bits\" that folks see as \"magic\" but they work pretty damn good they just need documenting!\n. Haha! Oops, sorry @andersea - I blame autocorrect :)\n. @andersekdahl The ClearScript DLL's are a pain, you need to have them in two place:\n/ClearScript.V8/\n- ClearScriptV8-32.dll\n- ClearScriptV8-64.dll\n- v8-ia32.dll\n- v8-x64.dll\n/bin/\n- ClearScript.dll\n- v8-x64.dll (or v8-x32.dll depending on your environment)\nI'll admit I've been a bit cargo cult with these, I don't really understand how they work or why they have to be where they have to be and there might be a better way to do it, etc. etc. but it works like this which lets me concentrate on other more fun things. If you find a better way let me know! :)\n. @andersekdahl Ooops sorry, task focused! We peak out just shy of 100 users per second currently and on Black Friday we had nearly 600 active sessions at once (not 600 hits at once though obviously). Its not totally crazy but for our needs it does just fine. CPU's on the servers barely flicker too :)\nThis is not however an all singing and dancing app with millions of users but like I said for our needs its doing great. \n. @jslatts I've never been one for IRC, I was on the React slack channel for a bit but it soon turns into a long chat about what everyone is having for breakfast every morning and of course the constant updates about coffee (it should be updates about tea of course but each to their own).\n. I would strongly suggest you roll with Facebooks Vanilla Flux pattern (using their dispatcher https://github.com/facebook/flux) before you commit to a framework as this will help you to get your head into the flux pattern first. You only need to wire up one store with actions etc. so you can see how it all works. For me this was just lots of cutting and pasting from their docs and renaming things to items I know/need in my domain models. Get this working server-side and then and only then would consider switching to using one of the Flux wrappers/frameworks as they hide a lot of the \"magic\" from you but in doing so hide a lot of the understanding/context too. Personally it was only through using Flux \"raw\" that I \"got it\".\nAdditionally a lot of the flux frameworks I've seen abstract a little too much away which can make it tricky to go off the path sometimes plus its yet another tech that the developer coming behind you has to learn before they can debug your stuff. I know the Facebook dispatcher is battle tested so I'd rather use that and its actually pretty simple.\nGetting it working server-side takes some thought to avoid any headaches (as you now know). The issue is your server won't be doing any of the ajax loading etc. that the client-side will be. So you need to disable it or change how you load it for server-side. It only needs the data once, the first render, not for every update. The trick we use is to check if we are running server-side (by checking for the existance of the window object normally) and if so then when our app's ComponentWillMount event is fired we us it to set up the store with the data it will need. We basically call the same event our onComplete ajax request would which should pass our data into the store. This should trigger a \"data as changed\" update from your store which will get everything to redrawn. Its that redrawn that will be caught by React.renderToString server-side and sent down the wire.\nThat should help but I know its not 100% complete, I need to get an better example up which I'll work on this week.\n. Boy is my list of \"blog posts to write\" getting long! \nFlux is doable on the server side with a little slight of hand as discussed. We use global stores in our stuff for ease. I'll get something written up asap.\nPete\n. @Daniel15 don't you load an engine from the pool per request lifecycle? So the same engine gets used through out the life span of a request. I believe so.\nIf thats the case then you could inject a global variable into the engine using the Environment.Execute mentioned above, then do all your React goodness in your templates and then finally clean up the variable before the request finishes by Executing a delete statement with the var name:\njavascript\ndelete myStore;\nIf you set global vars you HAVE to clear them out manually at the end of each request or they gobble up memory real quick as it seems they won't get garbage collected otherwise.\nWhat is your store doing that needs initialising? Could it not be lazy loaded when the first component hits it?\n. I've been away on holiday but I'm hoping to have a play around with React.Net again and see if we can't port over some of the bits we've learnt from SuperChargedReact as promised. First up would be pulling the start up code into a external file (or at least giving you the option to) so you can run React.Router or just render a component.\n. Best bet is to always add it in every run if you want to be sure its there. This can be quite speedy if you use a compiled script (as in ClearScript compiled scripts which parse the script once then save it for reuse to save the parse step next time) but that takes some tinkering to get working in React.Net due to the JSPool stuff. Could add it into the ClearScript code though but you might have to add to the Interfaces etc. for all the engines.\n. Also if you add it to your main app.js (or whatever your start page is in your bundle, assuming you are webpacking it up or similar?) then you can use this to force it to be put into global if using \"require\" (ala node modules) or \"import\" if you are going the ES6/Babel route:\nglobal.myStore = new MegaStore();\n. @andersekdahl we wrote SuperChargedReact off the back of trying to get React.Net in production. During our testing we found V8 was holding on to some unmanaged memory every time we ran the page (due to global vars we had in our JS rather than anything React.NET was doing). We tried digging it to the why and how to fix it (trigger garbage collection basically) but found too many levels of abstraction (all of which are for good reason) for a quick enough turn around for go live so chose to write our own. The outcome of which is SuperChargedReact. Its fast purely because it does away with the idea of handling multiple JS engines so we can tune it to run as fast as possible and leverage all the performance the V8 runtime can give us. \nThe lessons we learnt we are hoping to feed back into React.NET as time allows as I think its a great project and very noble to try to support so many OS's and its a great body of work.\nRegarding the lack of pooling in SuperChargedReact, we us the recommend way of spinning up a new instance of V8 using ClearScripts own tips for performance and its so fast I can't see the benefit to trying to pool it as yet. Its certainly something we could add but in our tests its simply not been needed.\nWe will be continuing to develop SuperChargedReact for our needs but will be feeding back what we learn into React.NET to make it an even better product than it already is. \n. @Daniel15 our first site running on SuperChargedReact goes live today! Will be keeping an eye on it and feeding back. Still keen on doing some PR's with our ideas/changes in for React.Net but go live has gobbled up all my spare CPU cycles :)\n. Hi Guys,\nWe did a lot of performance testing on React.Net which spawned the need for SuperChargedReact but that was nearly 2 years ago. SuperCharged does enough for our needs, sits on 3 servers and is plenty fast enough chewing through 500K of JS running our booking engine for a travel company. We've not touched it for a while simply because its not needed anything doing to it. The docs are certainly limited which we need to work on. Its currently running that site with ReactRouter v1 but with React Router v4 out I want to make some changes there as thats currently a bottle neck for us getting out site upgraded with React. \nThanks to \"crazy internet time\" that site is already super old at 18 months but all that \"old out of date tech\" we chose then is still doing an amazing job and now we can start upgrading it all bit by bit.\nSome folks have raised some crazy bench marks (as ever) and in those cases I'd suggest folks do their own testing to make sure either solution fits your needs. The up shot is SuperCharged works for our need and our requirements and hasn't given us a hiccup. React.Net is also awesome work (far more supported and documented than ours) so I would include that in any tests you want to do.\nBiggest differences between the two solutions are that:\n- We target only V8 for speed, React.Net has always aimed to be engine agnositic so it can run on anything.\n- We spin up one engine on start up and then ask that for a new context for ever single request. This is documented as being the fastest way to get a clean instance and the nicest on memory as GC can just throw away the whole engine once done. Its not as fast as having a pool but we found the pools just grew in memory usage in our testing which causes a lot of additional code to manage it and some unexpected results/performance. Throwing it away is a touch slower but pragmatic to debug as \"it always works\".\n- Daniel has been supporting, commenting, improving his library the whole time and I can't see that stopping. If you meet him you owe him a beer (I owe him dinner). We are lazy asses and stop once its good enough (which in our case was running a multi-million pound site at \"damn thats quick\" speeds), simple as that. Our support of SuperCharged up to date has been \"flakey\" as we are busy either earning money at our day jobs or raising our kids. So currently if you want supported solution Daniel is the best shot.\nAny more questions let me know and I try to answer then :)\nCheers\nPete\n. Hi Matt,\nThe issue is with your global vars not getting cleared up properly in ClearScript. You could try adding a bit of clean up code that runs at the end of your main entry point and ideally only on the server. We've had a few instances where we need to do just server-side stuff and a quick check it the window object exists seems to do the trick. Something like this might work:\nvar App = React.createClass({\n  onComponentUnMount : function() {\n    // Clear out anything we've put into global\n    delete MyStore;\n    delete MyLumpOfGlobalJSON; \n  },\nrender: function() {\n    return Testing\n  }\n});\nIf you want to get fancy you can automatically loop over global vars too but for the amount we create I've found it ok to just hard code them and be implicit about it. Remy Sharp has a sample to get you started though, https://remysharp.com/2007/11/01/detect-global-variables\nI'm planning on moving some of our mods over to React.net but in the meantime if you want to get up and running with SuperChargedReact its possible although I know the documentation for it is sparse at the minute. It really is just two DLL's, an optional JS file and Snippet of code very similar to React.net\nPete\n. We've been using https://www.jetbrains.com/dotmemory/ and http://www.red-gate.com/products/dotnet-development/ants-memory-profiler/ for checking memory usage. Ants has better support for showing unmanged memory which is the main issue with ClearScript. \nWe are a bit spoilt with .net's Garbage Collection but in ClearScript its a bit more lazy, it seems if you set a global var it hangs around, deleting it was the only way to flag that we wanted it gone and at that point GC might take a look at it at its leisure. If you don't manually clear the vars up in global then they site around gobbling memory until some unknown time where they might get cleaned up (or not). Even forcing Garbage Collection on V8 had little effect.\n@Daniel15 I think having a way to split between the two (ClearScript and Vjoom) is the way to go. At the minute we have too many abstractions which is making it a chore to do any optimisations. If you can hardcode one or the other then we can tune them to perform at their best I guess? I know nothing about Vjoom though so that one will be all yours :)\n. @jslatts Regarding your global scope query, we had some Flux Stores, React Router routes and our JSON data that gets poked into our root component as props all poked into global. That was our issue, if you don't use global you should be good to go and normal JS GC should do its thing. Just be aware the V8 is very lazy at GC and likes to do it sort of at the last minute (ie your memory has to go through the roof until it notices, its not all that good at playing nice with other but thats the price of its blazing speed).\nI've got a hazy memory that ClearScript knows if a variable was set from its host too and if so it keeps a handle on it which prevents GC but I need to try to find where I read that to be sure.\n. As the bundle would be running on the server I tend to be pragmatic and not care if its got client-side stuff in. I tend to use only code thats in CommonJS format (ie just about anything built to run on Node.js). For Ajax stuff I use SuperAgent which plays nice. Thanks to Danels shims file which creates some global vars that try to keep most stuff working. If I do get anything \"tricky\" that needs to be hidden from the server then I just wrap it in a if ( typeof window == \"undefined\" ) {} check.\nAgain as its running on the server you don't have the size to worry about and parsing JS is insanely fast (even faster if you engine can save the compiled script like ClearScript can) so I don't really worry about it and just use the one bundle for both client and server.\nRegarding the namespacing (assuming I've understood you correctly) this is mostly handled by the require statements used to pull in your various components:\nvar myNav = require(\"./navigation/fatMenu.jsx\");\nWhat is available depends on what you assing to module.export in your component file.\n```\nvar FatMenu = React.createComponent({\n  render: function() {\n    return Working;\n  }\n} \nmodule.exports = FatMenu;\n```\nThis works fine until you have several related components in one CommonJS file in which case you end up doing things like this:\n```\nvar fatMenu = require(\"./navigation/menus\").FatMenu;\nvar mobileMenu = require(\"./navigation/menus\").MobileMenu;\n// or alternatively\nvar Menus = require(\"./navigation/menus\");\nvar fatMenu = Menus.FatMenu;\nvar mobileMenu = Menus.MobileMenu;\n```\nIf you want to actually namespace your components when you use them you can do that too:\n```\n// Declared up top somewhere\nvar Menus = require(\"./navigation/menus\");\nvar Header = React.createComponent({\n  render: function() {\n    return \n  }\n}\n```\nSo lots of options, if thats not what you meant let me know and I'll take another stab at it. \n. This ones gold dust. Great find.\n. I went through all this too for several days with Browserify, in the end I just included React in my bundle (via Webpack which is far easier to use and reason about than Browserify). I understand this might not be ideal (which is why I worked on it for days) but in the end it solved a lot of my issues. Is that something you can do?\n. I suspect the TinyIoC errors are a symptom not the cause.\nHave you tried running it with the V8 engine instead? The MS one can be flakey (we had similar issues with it but much early on in our dev cycle). The fact it works on 3 other enviros means there has to be a difference between those and the 4th one. Could be its got a different version IE on the production server for instance? Tricky one to track down hence switching to V8 might be a quicker option.\n. Well, this all depends on what script you are actually running. What are you calling on line 19 of Header.cshtml? Something in there is looping like crazy and causing the engine to detect a stackoverflow error.\n. ",
    "spicydonuts": "I have a similar use-case.  My react toolchain is in place, resulting in a bundle.js file that I include through BundleConfig.  If I try to add bundle.js in ReactConfig I get this error: \"Error while loading \"~/Scripts/browserify/dist/bundle.js\": 'document' is undefined\"\nI guess all I want from ReactJS.Net is server-side rendering, because all my dependencies are in that bundle.\n. I wandered through the source a bit and found the same thing.  This probably wouldn't be an issue in production environments where the file isn't changing, would it?  Any other reasons it would get disposed?\n. ",
    "szarouski": "In case someone will be looking for require.js integration example, it could be found here.\n. @dgpedro Can you please share your experience running ChakraCore? Were there any side effects from switch? Thank you.. @Daniel15 I can customize react version by applying changes like shown here (webpack file):\nhttps://github.com/reactjs/React.NET/commit/27df77f84f2ea95994452b82f0d55c48493ba2df\nMy only problem is that things don't work when I set .SetLoadReact(false), but without it I can see custom version of react. Do you think there might be any concerns regarding not using .SetLoadReact(false) while using custom version of react (via module.loaders customization)?\nThank you.. ",
    "drew-isnotnull": "Apologies for being slightly off-topic but @Daniel15  did you ever get chance to write that blog post (ReactJS,NET & Webpack)?\n. That's great, I'll check it out.\nI had looked on the ReactJS.NET blog and your personal one but didn't think of checking out the docs, thanks.\n. ",
    "prabirshrestha": "@Daniel15 This will only be the view engine part similar to like express-react-views. For client side they can use with Cassette.Nancy or something else. (We should definitely look into this too.)\nupdated. currently empty comments for the build to work. (will add comments later tonight)\n. @Daniel15 I'm using TextInfo.ToTitleCase() to get the variable name from the file.\nHere are some examples:\nhello.jsx       -> var Hello;\nhelloworld.jsx  -> var Helloworld;\nhello world.jsx -> var Hello World;\nhello-world.jsx -> var Hello-World;\nCurrently I'm not doing any replace. Should we replace spaces and dash (-) with empty strings? so hello world.jsx maps to var HelloWorld; and hello-world.jsx maps to var HelloWorld;?\n. added NullCache and NullFileSystem to the React.dll. I don't like those names based on what it actually does so suggestions welcome.\nextensions list is now using ISet<T>\n. It is written in typescript but you can use the compiled javascript files.\nJSX will be supported in typescript 1.6 which is not released yet. The best way to try it out is to use the nightly builds as documented in the ts readme.\nbash\nnpm install -g typescript@next\nMore details at http://www.jbrantly.com/typescript-and-jsx/\n. What would be the naming convention? the name of the file? if hi.jsx then the variable name is var hi or var Hi? Should we always treat the variable name as filename with the first letter capitalized?\n. Resharper was complaining hence I made it uppercase. It is a static variable. Do you still want it to be  _extensions?\n. ",
    "shaunol": "I'll do some digging to see if I can get some insight into how others handle the context. The OWIN assemblies themselves don't appear to have any kind of IoC container on the surface.\nOf course with OWIN request handling you can do your own per-request anything so if I had a way to provide my context within the pipeline rather than exposing it statically, it would seem more logical. I will investigate if there's something for me to write that can provide this interface regardless. I can't use the GetOwinContext() because I'm not using WebApi, whose pipeline itself would provide a reference its HttpContext. I'm not sure how to write that particular piece of code (ensuring my statically exposed Context is indeed per request).\nSee here http://blogs.msdn.com/b/webdev/archive/2014/02/18/introducing-asp-net-project-helios.aspx for the particular setup I'm using. Though I'm using the SelfHost package instead of IIS - but both should have the same issue.\n. It looks like someone has solved the IoC problem https://github.com/DotNetDoodle/DotNetDoodle.Owin.Dependencies which I came across from http://stackoverflow.com/a/20079215\nI will have a look through that code and see if it can be applied to this problem.\n. ",
    "facebook-github-bot": "Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n. Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n. Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n. Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n. Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n. Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n. Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n. Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n. Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n. Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n. Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n. Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n. Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n. Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n. Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n. Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n. Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n. Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n. Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n. Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n. Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n. Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n. Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n. Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n. Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n. Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n. Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n. Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n. Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n. Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n. Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n. Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n. Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n. @jovnas updated the pull request.\n. @samppis updated the pull request.\n. Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\nIf you are contributing on behalf of someone else (eg your employer): the individual CLA is not sufficient - use https://developers.facebook.com/opensource/cla?type=company instead. Contact cla@fb.com if you have any questions.\n. Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\nIf you are contributing on behalf of someone else (eg your employer): the individual CLA is not sufficient - use https://developers.facebook.com/opensource/cla?type=company instead. Contact cla@fb.com if you have any questions.\n. ",
    "Alxandr": "Traceur creates classes on it's own, with it's own handling of prototypes etc. React did things differently. Most of all the code ended up a mess, and traceur wasn't able to do it's transformations as well as it should.\n. Updated the tests as well. Though they should probably be changed, as they are testing implementation details.\n. There you go. Added to config, and converted to tabs. Also signed the facebook \"I don't care what you do with my code\" thingy. Would be much appreciative if this ended on nuget within reasonable short time :)\n. @Daniel15 Are you available for IM?\n. Ah, sorry, ReactEnvironment wasn't checked in.\n. Right, I edited the test-file as well.\n. ",
    "yoshicarroll": "Cool, thank you.\nObviously it's not essential, but we're evaluating React.NET for a new project and the bundled ES6 transform stuff is good sugar I can use to sell my buddies on the whole of React. :)\n. Great! Thanks.\nYou guys are quick. :)\n. Using IReactEnvironment directly gave me 90% of what I wanted. Thanks. :)\nNow if I wanted to reset the environment during my development workflow, is there an easy way to do that? I figure I could just re-evaluate my bundle (using Execute(bundleText) ) and that should probably work for what I need. We're using your Webpack pattern to create a separate bundle for server side components.\nUsing a JS engine directly might be where we end up, but you've already created the engine management infrastructure and I didn't want to redo that work now. It sounds like when you do split ReactEnvironment into smaller pieces we might end up with a small project that manages JS engines in a performant way and React.NET would sit on top of that. Is that what you were thinking?\nThanks again for your help.\n. Haha, JSPool looks great, it's exactly what I had in mind. =)\nI just looked at the engine recycling again and it looks to do exactly what it should be doing. Look like some user error on that one.\nCheers!\n. ",
    "sophiebits": "Yep, this has been fixed in the latest jstransform (see https://github.com/facebook/jstransform/issues/10) and the fix will be in the next React release.\n. @Daniel15 Yup, should have been bumped in e60a893d2fe9df1181ca76f98b7e93225d2a69d2.\n. ",
    "justengland": "I can make a stand alone test case, I am using JSON as the data source. I agree that the MSIE engine should be faster, although I was wondering about the initialization costs of the engine on the web request.\n. It is strange, when I use your sample it seems to perform better than in\nthe application I have created. Its pretty zippy on your sample. I do have\na large data source in my application perhaps that is it.\nI will keep investigating.\nOn Tue, Jun 10, 2014 at 9:54 PM, Daniel Lo Nigro notifications@github.com\nwrote:\n\n@justengland https://github.com/justengland\nDo you have a standalone test case you'd be willing to share? Something\nwith hard-coded dummy data is fine, if it reproduces the problem. There's\nseveral spots the slowness could be coming from (JSON encoding,\ninitialising the JS environment, actually executing the code), so I'd like\nto have a self-contained test case so I can instrument it and find the\nslowness.\nOn Windows, ReactJS.NET uses the MSIE JavaScript engine, which should be\nfairly fast with new IE versions. I had issues compiling V8 on Windows but\nI might try that again and see if using V8 improves the performance at all.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/reactjs/React.NET/issues/23#issuecomment-45699255.\n\n\nJustin England\njustengland@gmail.com\n. ",
    "jayhjkwon": "I am also very interested in server side rendering performance, so I downloaded MVC4 sample project in this repository.\nAnd I created another action method which returns the same IndexViewModel but just using standard razor as follow : \nC#\npublic ActionResult IndexByStandardRazor()\n{\n    return View(new IndexViewModel\n    {\n        Comments = _comments.Take(COMMENTS_PER_PAGE),\n        CommentsPerPage = COMMENTS_PER_PAGE\n    });\n}\n``` HTML\n@using System.Web.Optimization\n@model React.Sample.Mvc4.ViewModels.IndexViewModel\n@{\n    Layout = null;\n}\nhtml\n\n\n\nIndexByStandardRazor\n\n\n\n\nComments\n\n            @foreach (var item in Model.Comments)\n            {\n                 \n@item.Author.Name: @item.Text\n                \n            }\n         \n\n<script src=\"http://fb.me/react-0.12.0.min.js\"></script>\n@Scripts.Render(\"~/bundles/main\")\n\n\n\n```\nI removed img tag intentionally to avoid it impacts response time, removed it in Sample.jsx as well.\nFinally I ran serveral times both url with chrome dev tools and noticed that standard razor rendering takes around 4ms to deliver its first contents, while react server rendering takes over 100ms (around 140ms)\n\n\nI guess this is because react needs to parse jsx files to html, is it?\nI am planning to use server rendering feature in mobile web site project, so 100ms is not a small number.\nAnyway, I love React and React.NET, want to use it in my production.\nGreat job!!\n. @Daniel15 - Sorry about the very late reply. I have been away from work for a while. \nAnyway, I just downloaded this repository and added the same IndexByRazor action method again peforms exactly the same as I commented above. \nAnd the response is way faster than before. The first bytes document takes only around 20 miliseconds.\nWhat did you do? Just changed from MSIE engine to V8?\n. Hmmm, ok I see why it was slow. Now I am very satisfied with the first byte response time. Thanks @Daniel15.\n. Thanks @Daniel15, I will be using grunt for this. \n. Btw, regardless of dependency, it would be still useful if I could use patterns like asp.net bundling does\nReactSiteConfiguration.Configuration\n.AddScript(\"~/scripts/models/*.jsx\")\n.AddScript(\"~/scripts/views/*.jsx\");\n. @PeteDuncanson, I also have considered to use react-router in server side with asp.net, but failed as you mentioned. \nBut I changed the way little bit different with PushState in Client Side and it works for my case.\nHere is the sample asp.net project I created.\nhttps://github.com/RayKwon/HybridRendering_React_Backbone\n. ",
    "captray-zz": "Hey Daniel, I looked back into it this morning, and it looks like the problem was nuget plopped in the JSX handler with an additional  element instead of appending it to the existing one. Should caught that last night, thanks for the quick response(s) though.\n. ",
    "jdefontes": "Yeah, I wouldn't expect it either, but that's what I finally narrowed it down to. I was able to reorganize things so my jsx wasn't in my (legacy) VB proj.\nThis was with the JSX task inline in the project file BTW, not exec'ing the separate TransformJsx.proj that the NuGet package adds.\n. I'm seeing it for either a VB class library or a VB MVC project. All I'm doing is adding the React.MSBuild package, then pasting this at the bottom of the project file:\n<UsingTask AssemblyFile=\"$(OutputPath)\\React.MSBuild.dll\" TaskName=\"TransformJsx\" />\n<Target Name=\"AfterBuild\">\n    <TransformJsx SourceDir=\"$(MSBuildProjectDirectory)\" />\n</Target>\nHere's a sample Solution (is there a way to attach files that I'm missing?):\nhttps://s3.amazonaws.com/jason.defontes/ReactTask.zip\nBoth VB projects fail for me. I don't really need to use it from VB, so it's not much of an issue, just something I ran across while trying it out.\n. ",
    "SixtoSaez": "Yup, maybe a note in the quick start page on working with the project source. When I pull down a project, first I build it and then I run the unit tests to make sure I have everything the solution needs. I expect to restore NuGet packages but I just didn't expect to need to run a build script. Thanks for the quick reply!\n. ",
    "jlchmura": "I have the same issue happening, though my debugger is not attached at the time, but I am building in Debug mode.\nVS2013 using iisexpress\n64-bit Win7\nChrome\nI'll make some changes to a JSX inside VS and save. When reloading the page in Chrome, IISExpress crashes with an access violation exception.  It doesn't happen every time.  Some times I can go 10 or more saves without crash, while other times I'll get two in a row.\n. Another interesting bit of information: \nI created a Debug build of the React.NET libraries (just pulled the source this morning) and switched my project to use those.  IIS crashes have stopped.  Did a Release build and they are back.\n. Update on this.. my previous pull request prevented the crash, but did not solve the cause.  @Daniel15 - DisposeAll was being called and the environment was properly being disposed even without my change.  However, I was finally able to catch the exception (below) which was being thrown in FileCacheHash.  MD5.ComputeHash is not thread-safe but FileCacheHash was being registered as a singleton.  \nThis also solves the seemingly random http 500's being thrown by the jsx handler.\nI'll submit another pull request with the fix. \nSystem.ObjectDisposedException was unhandled by user code\n  HResult=-2146232798\n  Message=Safe handle has been closed\n  Source=mscorlib\n  ObjectName=\"\"\n  StackTrace:\n       at System.Runtime.InteropServices.SafeHandle.DangerousAddRef(Boolean& success)\n       at System.StubHelpers.StubHelpers.SafeHandleAddRef(SafeHandle pHandle, Boolean& success)\n       at System.Security.Cryptography.Utils.HashData(SafeHashHandle hHash, Byte[] data, Int32 cbData, Int32 ibStart, Int32 cbSize)\n       at System.Security.Cryptography.MD5CryptoServiceProvider.HashCore(Byte[] rgb, Int32 ibStart, Int32 cbSize)\n       at System.Security.Cryptography.HashAlgorithm.ComputeHash(Byte[] buffer)\n       at React.FileCacheHash.CalculateHash(String input) in c:\\Users\\jchmura\\Documents\\GitHub\\ChmuraEcon\\React.NET\\src\\React\\FileCacheHash.cs:line 39\n       at React.JsxTransformer.<>c__DisplayClass1.<TransformJsxFile>b__0() in c:\\Users\\jchmura\\Documents\\GitHub\\ChmuraEcon\\React.NET\\src\\React\\JsxTransformer.cs:line 87\n       at React.Web.AspNetCache.GetOrInsert[T](String key, TimeSpan slidingExpiration, Func`1 getData, IEnumerable`1 cacheDependencyFiles, IEnumerable`1 cacheDependencyKeys) in c:\\Users\\jchmura\\Documents\\GitHub\\ChmuraEcon\\React.NET\\src\\React.Web\\AspNetCache.cs:line 71\n       at React.JsxTransformer.TransformJsxFile(String filename, Nullable`1 useHarmony) in c:\\Users\\jchmura\\Documents\\GitHub\\ChmuraEcon\\React.NET\\src\\React\\JsxTransformer.cs:line 79\n       at React.Web.JsxHandler.Execute() in c:\\Users\\jchmura\\Documents\\GitHub\\ChmuraEcon\\React.NET\\src\\React.Web\\JsxHandler.cs:line 51\n       at React.Web.JsxHandlerFactory.ProcessRequest(HttpContext context) in c:\\Users\\jchmura\\Documents\\GitHub\\ChmuraEcon\\React.NET\\src\\React.Web\\JsxHandlerFactory.cs:line 26\n       at System.Web.HttpApplication.CallHandlerExecutionStep.System.Web.HttpApplication.IExecutionStep.Execute()\n       at System.Web.HttpApplication.ExecuteStep(IExecutionStep step, Boolean& completedSynchronously)\n  InnerException:\n. @paulirwin Yes, I believe so. Our dev machines only have a few hours of runtime with my latest build, but so far nobody has run in to the access violation. Typically we would have hit it several times already.  I'd be curious to hear if it solves the issue in your environment too.\n. I do have it marked as \"Copy if Newer\".  I think the issue is with the deploy process.  TFS Build has a local scratch copy where it builds, then publishes the output to the target website. That means that all the files are always deployed for each build.  Btw, the resource is eventually getting released... If I re-queue the build (sometimes as soon as a few minutes later) it will deploy fine.\n. Updating this in case anyone else runs in to this problem.  I had placed the dll files in the project root to get around an exception about the v8-x64.dll not being found.  That was not a good workaround since it was causing the file to get locked and break my deployments.\nGoing back to the root of the issue, the cause of the v8-x64.dll not found issue was that I did not have VS2012 C++ runtime installed on my server (I had to install both 32 & 64-bit).\n. Note that the latest release of ClearScript (5.4.1) no longer supports VS2012, so the VS2013 C++ runtimes must be installed now: http://www.microsoft.com/en-us/download/details.aspx?id=40784\n. Standard iis express config.  Running through Visual Studio (launched via\n'View in Browser' Ctrl+Shift+W).  Without debugging.\nOn Thu, Mar 12, 2015 at 11:40 PM, Daniel Lo Nigro notifications@github.com\nwrote:\n\nInteresting... Do you have any custom configuration for IIS Express or are\nyou just using the standard config? Are you running it through Visual\nStudio, or outside of Visual Studio? Do you have the Visual Studio debugger\nattached or do you run \"without debugging\"?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/reactjs/React.NET/issues/102#issuecomment-78777776.\n. Update: I disabled pooling in ReactConfig.cs and the issue has gone away.\n. Yes my symptoms are the same.. if you look at your event log I'm guessing\nyou'll see the exception there.  But you are correct, IISExpress is\nsilently crashing and browser ends up with a connection refused.\n\nTo disable pooling, add this to your ReactConfig.cs file:\nReactSiteConfiguration.Configuration.SetReuseJavaScriptEngines(false);\nOn Thu, Mar 19, 2015 at 12:06 PM, R notifications@github.com wrote:\n\nI've actually been getting a very similar issue, except instead of an\nexception, I just get a connection refused. It happens very reliably\nwhenever I rebuild my jsx with webpack. Re-launching via \"View in Browser\"\ngets it going again. I'm in IIS Express 8.0 if that helps.\n@jlchmura https://github.com/jlchmura How did you disable the pooling?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/reactjs/React.NET/issues/102#issuecomment-83644851.\n. @Daniel15 since turning off pooling solves this issue.. does that point to an issue in jspool?\n. \n",
    "Shreeyam": "Any update on this? I get a System.AccessViolationError consistently when running my application in IIS 10, but not when debugging using IIS Express.\nEdit: This is using MsieJavaScriptEngine\n. ",
    "beruic": "I get this consistently in VisualStudio 2015 using both IIS Express and running the program + running it from console.\nI use  the sample project from https://github.com/reactjs/React.NET/tree/master/src/React.Sample.Mvc6. Only change I made is in project.json where I put\n\"React.Core\": \"2.4.0\",\n\"React.AspNet\": \"2.4.0\"\ninstead of the existing dependencies.\n. Thank you!\nAs far as I have read, there are significant changes of support in RC2. I hope you can fix this, as I don't have the time or expertise to do it, and my project would really benefit from server side rendering.\n. ",
    "mwethington": "We get crashes all the time in IIS even with V8. Same stuff.\n. Hi Daniel,\nI am working with Yoshi. Why don't we split it up so that we can support both use cases?  The HtmlHelperExtensions Helper appears to use a response.write... Also, wouldn't React.renderToString potentially cause Garbage Collection issues for LOH when string is greater than 85,000 bytes? Normally we use Streams and avoid Strings.\nhttps://blogs.msdn.microsoft.com/dotnet/2011/10/03/large-object-heap-improvements-in-net-4-5/\nThanks,\nBill\n. failing unit tests\n. dustin - how is it going after a month or so?\n. The fix appears to be in NuGet - v2.4 - right? Can we get a blog entry for 2.5? http://reactjs.net/blog/\nhttps://www.nuget.org/packages/React.Web.Mvc4/\n. OK 2.4 is the latest - 2.5 was for Core stuff changing.\n. We are still having issues with V8.\n. Carl \u2013 please provide a stack that we can share with Daniel\nFrom: Daniel Lo Nigro notifications@github.com\nReply-To: \"reactjs/React.NET\" reply@reply.github.com\nDate: Thursday, September 15, 2016 at 1:23 AM\nTo: \"reactjs/React.NET\" React.NET@noreply.github.com\nCc: Bill Bell bbell@healthgrades.com, Mention mention@noreply.github.com\nSubject: Re: [reactjs/React.NET] JSX on-the-fly compilation results in AccessViolationException on ASP.NET 5 MVC 6 (#281)\n@mwethingtonhttps://github.com/mwethington - Could you please provide a stack trace? So far I've only seen this error with the MSIE JS engine in the stack trace.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHubhttps://github.com/reactjs/React.NET/issues/281#issuecomment-247255637, or mute the threadhttps://github.com/notifications/unsubscribe-auth/AA4V-mfaQSt4PCJPWSNTyQb-LLWoXTFHks5qqPJ3gaJpZM4IyDnO.\n. Yes that is per second\nBill Bell\nSent from mobile\nOn Aug 24, 2016, at 9:52 AM, Dustin Masters notifications@github.com<mailto:notifications@github.com> wrote:\n30-100 requests per second? Are all of these requests rendering react components, or does that also include XHR's? Maybe consider adding more nodes if your app is getting overwhelmed. The default is 25 engines, which has worked well for me.\n\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHubhttps://github.com/reactjs/React.NET/issues/307#issuecomment-242115703, or mute the threadhttps://github.com/notifications/unsubscribe-auth/AA4V-kTtiT79DX9x9oBj73lSD2xoUq_Kks5qjGitgaJpZM4JsCzi.\n. How do I view number of engines running ? Example code ?\nBill Bell\nSent from mobile\nOn Aug 24, 2016, at 9:52 AM, Dustin Masters notifications@github.com<mailto:notifications@github.com> wrote:\n30-100 requests per second? Are all of these requests rendering react components, or does that also include XHR's? Maybe consider adding more nodes if your app is getting overwhelmed. The default is 25 engines, which has worked well for me.\n\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHubhttps://github.com/reactjs/React.NET/issues/307#issuecomment-242115703, or mute the threadhttps://github.com/notifications/unsubscribe-auth/AA4V-kTtiT79DX9x9oBj73lSD2xoUq_Kks5qjGitgaJpZM4JsCzi.\n. We had to revert ClearScript.V8 from 5.4.8 to 5.4.5. It was literally crashing IIS on Windows 2012 R2. ClearScript.V8 CPU is more stable than Msie engine, but we are seeing some thread locking even on 5.4.5. We are unsure what causes it, but it looks like JS Pool \n. ",
    "rickywang1981": "Hi Daniel: we also encounter AccessViolationException with V8 from time to time. The error cannot be catched by ASP.NET. Could you look into this urgent issue? This is error log while ASP.NET crashes:\nVersion=1\nEventType=CLR20r3\nEventTime=131185943235051992\nReportType=2\nConsent=1\nReportIdentifier=d7a3d85c-7cde-11e6-80d8-005056853a8a\nIntegratorReportIdentifier=d7a3d85b-7cde-11e6-80d8-005056853a8a\nWOW64=1\nNsAppName=w3wp.exe\nResponse.type=4\nSig[0].Name=Problem Signature 01\nSig[0].Value=w3wp.exe\nSig[1].Name=Problem Signature 02\nSig[1].Value=8.5.9600.16384\nSig[2].Name=Problem Signature 03\nSig[2].Value=52157ba0\nSig[3].Name=Problem Signature 04\nSig[3].Value=ClearScriptV8-32\nSig[4].Name=Problem Signature 05\nSig[4].Value=5.4.5.0\nSig[5].Name=Problem Signature 06\nSig[5].Value=56e184c1\nSig[6].Name=Problem Signature 07\nSig[6].Value=f7\nSig[7].Name=Problem Signature 08\nSig[7].Value=4f\nSig[8].Name=Problem Signature 09\nSig[8].Value=System.AccessViolationException\nDynamicSig[1].Name=OS Version\nDynamicSig[1].Value=6.3.9600.2.0.0.272.7\nDynamicSig[2].Name=Locale ID\nDynamicSig[2].Value=1033\nDynamicSig[22].Name=Additional Information 1\nDynamicSig[22].Value=f4b8\nDynamicSig[23].Name=Additional Information 2\nDynamicSig[23].Value=f4b83f39e04b97afc15f0c96e3a7c9c3\nDynamicSig[24].Name=Additional Information 3\nDynamicSig[24].Value=00a3\nDynamicSig[25].Name=Additional Information 4\nDynamicSig[25].Value=00a37bc75e5534558a731b6ec5129823\nUI[2]=C:\\Windows\\SysWOW64\\inetsrv\\w3wp.exe\nUI[5]=Check online for a solution (recommended)\nUI[6]=Check for a solution later (recommended)\nUI[7]=Close\nUI[8]=IIS Worker Process stopped working and was closed\nUI[9]=A problem caused the application to stop working correctly. Windows will notify you if a solution is available.\nUI[10]=&Close\nLoadedModule[0]=C:\\Windows\\SysWOW64\\inetsrv\\w3wp.exe\n...\n...\nLoadedModule[172]=root\\bin\\ClearScript.V8\\ClearScriptV8-32.dll\nLoadedModule[173]=root\\bin\\ClearScript.V8\\v8-ia32.dll\nLoadedModule[174]=C:\\Windows\\SYSTEM32\\MSVCP120.dll\nLoadedModule[175]=C:\\Windows\\SYSTEM32\\MSVCR120.dll\nLoadedModule[176]=C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\clrcompression.dll\n. ",
    "rickbeerendonk": "You're welcome!\n. Cool!\nThank you.\n. Oops, build failure.\n. @Daniel15 Thank you, I will have a look.\n. @Daniel15 Only adding bundling is a bit tough, because the BundleConfig.cs and its registration in Global.asax is not part of an Empty MVC project. The tutorial assumes it is though. You can see here what was needed to make it work: https://github.com/rickbeerendonk/ReactJS.NET-getting-started-tutorial/commit/540fd669dda4e6428481085495c5337c262c64ca\n. I just tested it again in both a new MVC 4 and a new MVC 5 project, as well as in my tutorial code (MVC 4) and the BundleConfig.cs is not created. It creates a ReactConfig.cs, did you mean that one?\n. Documentation (Bundle.ConcatenationToken): \"Gets the token inserted between bundled files to ensure that the final bundle content is valid. By default, if ConcatenationToken is not specified, the Web optimization framework inserts a new line.\"\nIn the constructor of the derived class ScriptBundle, Microsoft has this line to prevent unexpected behavior when a JavaScript file is not closed with ;\n. ",
    "dax70": "No worries. Thanks for putting this awesome project together.\n. ",
    "dotnetchris": "\nThank you!\nThank you for taking the time to register as an open source contributor\n. \n",
    "gwing33": "Speedy Speedy Speedy. Workings perfect! Thanks.\n. ",
    "tejacques": "Here's the stacktrace -- it's not from a linked debug build, but it was still fairly clear, I can grab a better one tonight if necessary:\n[NullReferenceException: Object reference not set to an instance of an object.]\n   React.Web.TinyIoC.HttpContextLifetimeProvider.GetObject() +45\n   React.Web.TinyIoC.HttpContextLifetimeProvider.ReleaseObject() +41\n   React.TinyIoC.CustomObjectLifetimeFactory.Dispose() +32\n   React.TinyIoC.SafeDictionary`2.set_Item(TKey key, TValue value) +127\n   React.TinyIoC.TinyIoCContainer.AddUpdateRegistration(TypeRegistration typeRegistration, ObjectFactoryBase factory) +59\n   React.TinyIoC.TinyIoCContainer.RegisterInternal(Type registerType, String name, ObjectFactoryBase factory) +87\n   React.TinyIoC.TinyIoCContainer.Register(Type registerType, Type registerImplementation) +99\n   React.TinyIoC.TinyIoCContainer.Register() +172\n   ReactDotNetExample.ReactConfig.Configure() in d:\\Projects\\ReactNetExample\\ReactDotNetExample\\App_Start\\ReactConfig.cs:32\nThe problem appears to be in clearing the old registration -- since it's already a PerRequestSingleton, it tries to clear out the cache from the HttpContext.Current.Items, but HttpContext.Current is null in ReactConfig class since it is initializing and not taken any requests. If I move that code to a controller, it works.\n. Hey @Daniel15,\nI was finally able to find some time to build the React.NET project, reference it, and hunt these down.\nThere were two issues preventing me from doing what I'd wanted to do. I think they are both fairly straightforward changes that could be upstreamed, but I'm not sure it really makes sense to upstream the second one. I'm happy to submit a pull request if you'd like, otherwise they are very small changes that I'll include below:\nFirst Change:\nIn React.Web:\nTinyIoCAspNetExtensions.cs\nChange GetObject function\nfrom:\n.cs\npublic object GetObject()\n{\n    return HttpContext.Current.Items[_keyName];\n}\nto:\n.cs\npublic object GetObject()\n{\n    return null != HttpContext.Current\n        ? HttpContext.Current.Items[_keyName]\n        : null;\n}\nChange SetObject function\nfrom:\n.cs\npublic void SetObject(object value)\n{\n    HttpContext.Current.Items[_keyName] = value;\n}\nto:\n.cs\npublic void SetObject(object value)\n{\n    if (null != HttpContext.Current)\n    {\n        HttpContext.Current.Items[_keyName] = value;\n    }\n}\nSecond Change\nIn React.NET\nReactEnvironment.cs\nChange InitialiseEngine function's first line from this:\n.cs\nvar thisAssembly = GetType().Assembly;\nTo this:\n.cs\nvar thisAssembly = typeof(ReactEnvironment).Assembly;\nI don't know whether you'd want to include this change or not. Really if someone wants their own custom ReactEnvironment, they should copy/paste the base one rather than inheriting it, because none of the functions are virtual anyway. I'm just including it here to document the issue I ran into. What was happening was the Environment was trying to access the React shim js files from the assembly, but GetType().Assembly was returning my project rather than React.NET, and the resource file path was incompatible with that assembly.\nFor what it's worth, I copied the ReactEnvironment class and simply removed the calls to engineFactory.DisposeEngineForCurrentThread(), and saw an _immense speedup in server-side rendering. Rendering a very simple component server-side (the Tutorial) went from ~200ms to ~11ms\nEdit: That said, I also just ran into the issue you were talking about -- I'll try to look into ways to get around it.\n. Good point about SetObject, I think it was trying to non-lazily initialize the value in the HttpContext's items. The right answer may just be to make it do that lazily and without the null check.\nAfter messing around a lot more with the JS engines, I understand now what you were telling me (and a few others) earlier. I tried changing how the engines are used in a few different ways, but it looks like the problem comes from the engines not being used for a period of time, the threads being collected/removed, and this leaving the engines in a bad state, where if they weren't disposed it causes a memory access exception.\nIf there's a way to hook into thread collection to dispose the engines that may solve it, but I'm not sure if that's possible. I might try messing around with V8 next -- I'll let you know if I have any luck.\n. Awesome, thanks @Daniel15!\n. ",
    "BartAdv": "Agreed it's highly uncommon scenario, will refactor it.\nHowever I've got some issues with the flag. As I see it, it would have to be a property (but we can't make it with internal setter), because it shouldn't be set by component itself when we call  RenderJavaScript (as it would make it side-effecting). And property with public setter would be useless. Maybe Environment should maintain the list of components and keep this additional information there? Or maybe there is no need for such check, after all, if someone is explicitly rendering initialization code after rendering component, he's aware why he's doing so.\n. I'll keep the method as I see it's part of a fluent interface\n. And then it would check if component haven't been rendered already?\n. ",
    "lostrouter": "nevermind. my model that i was passing in was an ienumerable and not an array.\n. i did not dig in far enough to see.  I will check soon.\n. ",
    "MasodSaidi": "Yeap, a span solves my use case. Maybe it could be used as default since it is less obtrusive than div. \nIdeally we would really want the wrapper to not be there at all, since its not expected. I have done some research, correct me if I am wrong. React components already have a wrapper div since siblings are not allowed.\ndiv class=\"comments-box\" data-reactid=\".t66cpxj1cn\" data-react-checksum=\"1948633873\">...</div\nWould it be possible to use following when initializing?\ndocument.querySelector('[data-reactid=\".t66cpxj1cn\"]');\n. Thanks for the quick fix!\n. ",
    "jhemminger": "Hi Daniel - I have the same need as was originally listed which was to be able to define the value of the ID instead of it being auto populated as react#.  Should I open a new ticket?  Or would you like me to make the changes and submit them?  Let me know, thanks!\n. Wow great, thanks!\n. Thanks again - especially for the quick turn around!\n. Sure I can explain more.  This library works great when you have a single MVC project, but for us this is not the case.  We have designed our site to have many separate functionally grouped units for which they each have their own release cadence/continuous delivery pipeline.  One challenge to this is the areas of the website that are standard across these separate pipelines, for instance the header and footer.  We want those components (which of course, are React objects) to be standardized across the site and be able to have their own continuous delivery pipeline so that we can updated them at will without having to deploy the functional pipelines that are using them in a coordinated fashion.\nSo yes we are rendering different components on different servers, is it speedy as you asked?  Probably not as much  as if they were embedded with the same MVC project, but it's speediness, or lack there of is worth the benefits we get from this type of design.  I hope that makes a little more sense to you now, if not let me know!\n. Crickets....Anyone else have any questions?  This is very similar to what the framework is already doing as a blend of ReactWithInit and ReactInitJavaScript, but it doesn't have the constraint of all calls needing to be in one web request context. \n. OK thanks guys, I understand being busy and not having time I just wasn't sure what silence meant :)\n. Fixed the spaces/tabs.  In regards to the build I will continue to investigate, running a rebuild all in VS works just fine, but the batch file blows up with something from Cassette.\n. Well the build issue with Cassette led me down a much longer path than I hoped.  In the end I realized that ReactEnvironment has an instance of IJsxTransformer which can be invoked at will and expects the Jsx Transforms to be loaded into the engine.  So what I hoped to be an easy auto-magical no load of the transforms if not necessary isn't really possible.  I changed the load to be configured by a configuration parameter which should hopefully be obvious to someone that if they turn that off then try to use JsxTransformer it's not going to work.  If you don't want another configuration parameter I can understand, but it would be nice for those of us who don't need the transforms to not have them loaded into the engine.\n. I considered and attempted that for a bit, but I didn't see a clean way to do it.  It seemed I was cutting across too many different objects to make that happen and was very ugly.  I may just not know the code well enough to do it cleanly.\n. I had to add an item here because without it the MSBuild step would blow up.  I am not too familiar with what this build step is doing, but by making the loading of the JSX Transform conditional on having at least one Script caused this to blow up unless this was added.  If you can think of a more elegant solution that would be great!\n. ",
    "mocanSergiu666": "\nWhy when I use \"setInterval\" function with server-side rendering, I get an error that \"setInterval\" is undefined?\nIf I specify \"window.setInterval\", then it errors that \"window\" is undefined.. \n",
    "oivindhagen": "To render just the component (with an optional reactId), the following extension method should do the trick:\n```\nusing System.Web.Mvc;\nusing System.Web;\nusing System;\nusing React;\nusing Newtonsoft.Json;\nnamespace YourProject.Extensions\n{\n    public static class HtmlHelperExtensions\n    {\n        public static IHtmlString ReactWithoutContainer(this HtmlHelper helper, string componentName, object props)\n        {\n            var serializedProps = JsonConvert.SerializeObject(props, ReactSiteConfiguration.Configuration.JsonSerializerSettings);\n        /*\n        If you want to add a reactId to the top level element, uncomment the following three lines and render the \n        reactId property as an id attribute on the top level element in your component like this:\n        <div id={reactId}>\n        <!-- component content -->\n        <div/>\n        */\n        //dynamic deserialized = JsonConvert.DeserializeObject(serializedProps, ReactSiteConfiguration.Configuration.JsonSerializerSettings);\n        //deserialized.reactId = \"react_\" + Guid.NewGuid().ToShortGuid();\n        //serializedProps = JsonConvert.SerializeObject(deserialized, ReactSiteConfiguration.Configuration.JsonSerializerSettings);\n\n        var initializedCode = string.Format(\"React.createElement({0}, {1})\", componentName, serializedProps);\n        var code = string.Format(\"ReactDOMServer.renderToStaticMarkup({0})\", initializedCode);\n        return helper.Raw(React.ReactEnvironment.Current.Execute<string>(code));\n    }\n}\n\n}\n```\nTo use it in your cshtml, just write the following:\n@Html.ReactWithoutContainer(\"Components.YourComponent\", new\n        {\n            property1 = \"value1\",\n            property2 = \"value2\"\n        })\nPlease note that this extension method reaches quite far into ReactJs.net. It might get you into trouble down the road.. ",
    "lukemcgregor": "I'm really keen to see this. I had a quick crack at getting it going but I ended up going down the rabbit hole a bit. \nIt will require (as far as I can tell): \n- a new React.Web.Mvc6 project (using vNext .net)\n- Possibly need to re-compile of the React and React.Web in .net 4.5 or vnext (required to reference them in the Mvc6 project)\nThe second is a little tricky as it basically means dual compilation or upgrading everything (which doesn't make sense for MVC 3 especially)\nI imagine if you do the above it will probably work.\n. I think you might be right, I had a go at making it work but couldn't work out how to tell it not to build the .net core version of the project, so there's a couple of errors still. I needed to create wraps to even get it to reference the other projects which is a bit weird also. \nI did also need to change IHtmlString -> HtmlString also as the interface no longer exists in the new MVC.\nAnyway when you do get to implementing this feel free to take a look at the fork. \n. Yeah that totally seems to fix the issue. Ill just leave it off in dev. \nThanks for the fast response :)\n. I'm getting this too, like @WilkaH I'm only seeing it in production and its not super frequent. Versions and things:\n- Azure (not sure its relevant)\n- .NET 4.6\n- React.NET: 2.5.0\n- JSPool: 0.4.1\n- JavaScriptEngineSwitcher.V8: 1.5.8\n\nJavaScriptEngineSwitcher.Core.JsRuntimeException: Unknown error (RangeError); potential stack overflow detected ---> Microsoft.ClearScript.ScriptEngineException: Unknown error (RangeError); potential stack overflow detected\n   at V8Exception.ThrowScriptEngineException(V8Exception* )\n   at Microsoft.ClearScript.V8.V8ContextProxyImpl.Execute(String gcDocumentName, String gcCode, Boolean evaluate, Boolean discard)\n   at Microsoft.ClearScript.V8.V8ScriptEngine.<>c__DisplayClass1b.b__19()\n   at Microsoft.ClearScript.ScriptEngine.ScriptInvokeT\n   at Microsoft.ClearScript.V8.V8ScriptEngine.<>c__DisplayClass251.<ScriptInvoke>b__24()\n   at Microsoft.ClearScript.V8.?A0x7115955b.LockCallback(Void* pvArg)\n   at Microsoft.ClearScript.V8.V8ContextProxyImpl.InvokeWithLock(Action gcAction)\n   at Microsoft.ClearScript.V8.V8ScriptEngine.ScriptInvoke[T](Func1 func)\n   at Microsoft.ClearScript.V8.V8ScriptEngine.Execute(String documentName, String code, Boolean evaluate, Boolean discard)\n   at JavaScriptEngineSwitcher.V8.V8JsEngine.InnerEvaluate(String expression)\n. @Daniel15 happy to help is there anything you want me to try?\n. \n",
    "lijunle": "@Daniel15 thanks for you advise. I may change to V8 if it is great. Besides, I have sent a PR to disable source map if it is MSIE which I have tested locally. Please take a look.\n. @Daniel15 could you take some time to look at this?\n. Hi, thanks for your reply.\nI have not used MSBuild to compile JSX. I don't think my changes will break offline generated source map serving, will it?\n. Hi, @Daniel15 does any update for this PR?\n. OK, add V8 engine explicitly is good way.\n. @dotfelixb the ideal way to resolve this is to add a shim.js then expose your window.foo to global.foo or just foo. Such shim.js only included for server-side render, not sent to client.\n\nUPDATE: When use shims, pay attention to avoid client side and server side conflict. An example is the client render something depends on Cookies, but the server side render is hard to pass Cookies to render engine.\nA workaround is to keep render only depends on regular variables, move the Cookies code to ComponetDidMount hook.\n. ",
    "ashic": "Is there a way to force V8 (or disabling sourcemaps for MSIE)? I couldn't find a way to specify the engine.\n. ",
    "domenu": "Same here, getting HTTP 500 (Unable to generate source map) in chrome...\n. ",
    "daniellmb": "Yep installing ClearScriptV8 fixed it for me...\n. Are there performance issues with loading everything server-side? Has anyone done performance benchmarks? I want to use ReactJS.NET for progressive enhancement, but I'm concerned about exporting a large jsx codebase server-side. Not only for the reasons mentioned here but it also seems that it wouldn't scale well. Perhaps a modular dependency system based on the current request would help manage the amount of code that is imported/parsed/executed on the server. Thoughts?\n. facepalm sure is... http://reactjs.net/guides/weboptimizer.html\nOnce I installed that it works like a charm!\n. Thanks for your help, my demo app is live now :) https://github.com/daniellmb/React-PE\n. ",
    "evenkiel": "+1. Installed React.JavaScriptEngine.ClearScriptV8 via nuget to my MVC project and the 500 errors went away. Thanks! \n. ",
    "marcselman": "Great!\nThanks, that's exactly what I was looking for.\n. ",
    "fgaleano": "@Daniel15 Is this answer still relevant today? I'm looking to use ReactJS.NET with WebForms. But I've noticed the HtmlHelperExtensions.cs file is no longer in the repo. I'm new to .NET so I'm not sure what this means. Could you follow up? Thank you!. @Daniel15 Thanks! I'll give that a try.. @gin93r If the code you posted is matches your setup, then you forgot to add module.exports = PageContent on your helloword.jsx file.\nOut of scope comment, if you're going to build your whole UI with React, I strongly recommend using Webpack.. @gin93r Interesting. I'm new to .NET so I'm not sure what are the differences between the 2. Something to keep in mind if I ever do another one of this. Thanks for the update!. I'm getting the same error on my project using Webpack.\nMy ES6 component looks like this:\n```\nimport React from 'react';\nconst PageContent = (props) => {\n    let myName = 'Fernando';\n    return (\n        \n            Hello, {myName}! From {props.user}\n        \n    );\n}\nexport default PageContent;\n```\nAfter I bundle the code using Webpack, PageContent looks like this on the ES5 output:\n```\nvar _react = webpack_require(22);\nvar _react2 = _interopRequireDefault(_react);\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\nvar PageContent = function PageContent(props) {\n    var myName = 'Fernando';\n    return _react2.default.createElement(\n        'div',\n        null,\n        'Hello, ',\n        myName,\n        '! From ',\n        props.user\n    );\n};\nexports.default = PageContent;\n```\nI enabled debug mode and what I'm getting in Visual Studio is the incorrect element message, saying it was expecting function or string but got object instead.\nFrom the ES5 code it looks like PageContent is a function and its return should be a string (output of createElement), so I'm not sure what is wrong here.\nIs there anyway to see what .NET is getting from all of this? I'm using WebForms, if that helps at all.\nI suspect my Webpack configuration might need some tweaking but so far I think I've done everything. I really need to to this with ES6 so that's why I'm not following the official example.\nAny ideas? Thanks!. Huh, if in my component I change this:\nexport default PageContent;\nto this:\nmodule.exports = PageContent;\nThings work. Definitely something in my webpack configuration is messing things up. I wonder what...I really wanna keep things full ES6 here.. @Daniel15 I tried a brand new project and added ReactJS.NET but I can't build it. I get this error:\nSystem.Web.Optimization does not exist\nI'm using WebForms for this, unfortunately, and from what I gather, WebForms require the full .NET Framework not just .NET Core, which is what I installed to use VS Community. I think I'm going to need to go with the Mono route after all. Guess I should have gone with Mono in the first place \ud83d\ude05\nThanks!. ",
    "gin93r": "@Daniel15 \nI'm having an issue that I think is similar to this. Using the ReactEnvironment.Current seemed to work, but now I get Could not find a component named 'PageContent'. Did you forget to add it to App_Start\\ReactConfig.cs?\nThis is with a fresh webforms project (I'm also new to asp.)\n~/Scripts/components/helloWorld.jsx\nvar PageContent = React.createClass({\n    render: function () {\n        return (\n            <div>\n                Hello world from {this.props.user}\n            </div>\n        );\n    }\n});\nReactConfig.cs : ReactSiteConfiguration.Configuration.AddScript(\"~/Scripts/components/helloWorld.jsx\");\nDefault.aspx.cs:\n```\nvar env = React.ReactEnvironment.Current;\nvar om = new { user = \"React User\" };\nvar rc = env.CreateComponent(\"PageContent\", om);\nPageContent.Text = rc.RenderHtml();\n```\nI'm not sure what else I need to do. Thoughts?\nIf I navigate to /Scripts/components/helloWorld.jsx it does seem to render.. @fgaleano Thanks. I did forget to put that in, however, doing so has not changed the outcome. I'm still getting the missing component exception.. Ok I figured it out. It's because I created a Website using Web Forms and not a Web Application using Web Forms.. ",
    "VahaC": "Hi i'm trying to use React SSR with Kentico (CMS based on Web Forms) and receive an error\n\nCould not find a component named 'PageContent'. Did you forget to add it to App_Start\\ReactConfig.cs?\n\nhere is my code\n/CMSScripts/Custom/components/helloWorld.jsx\nvar PageContent =  React.createClass({\n  render: function() {  \n    return (\n      <div>\n        Hello world from {this.props.user}\n      </div>\n    );\n  } \n});\nreact web part\n```\nusing CMS.PortalEngine.Web.UI;\nusing CMS.Helpers;\nusing React;\nusing System;\npublic partial class CMSWebParts_VahaC_ReactWebPart : CMSAbstractWebPart\n{\n    protected void Page_Load(object sender, EventArgs e)\n    {\n        var env = AssemblyRegistration.Container.Resolve();\n        var objectModel = new { user = \"React User\" };\n        var reactComponent = env.CreateComponent(\"PageContent\", objectModel);\n    PageContent.Text = reactComponent.RenderHtml();\n}\n\n}\n\n<%@ Control Language=\"C#\" AutoEventWireup=\"true\" CodeFile=\"ReactWebPart.ascx.cs\" Inherits=\"CMSWebParts_VahaC_ReactWebPart\" %>\n    Page Content Here:\n    \n\n\n\n\n\n\n\n\\App_Start\\ReactConfig.cs\nusing React;\n[assembly: WebActivatorEx.PreApplicationStartMethod(typeof(ASP.ReactConfig), \"Configure\")]\nnamespace ASP\n{\n    public static class ReactConfig\n    {\n        public static void Configure()\n        {\n            //ReactSiteConfiguration.Configuration\n            //             .AddScript(\"~/CMSScripts/Custom/components/helloWorld.jsx\")\n        ReactSiteConfiguration.Configuration = new ReactSiteConfiguration()\n            .AddScript(\"~/CMSScripts/Custom/components/helloWorld.jsx\");\n\n    }\n}\n\n}\n```\nWhat is wrong with my code? Why it doesn't work?. ",
    "dotfelixb": "@Daniel15 what is the technique the ReactJS.NET team use to get React to be found in the react.js file include in the project,\nmaybe we can use that for now.\n. ",
    "danrien": "Sorry I haven't had the chance to. I was going to begin testing it\nyesterday but my Windows VM lost its mind due to an unrelated (VM driver\ninstallation) issue, so I'll need to fix that first.\nDavid Vedvick\nSoftware Developer\nwww.davidvedvick.info\nOn Wed, Dec 17, 2014 at 4:51 AM, Daniel Lo Nigro notifications@github.com\nwrote:\n\nInteresting, I'll have to look into this when I get some free time. Have\nyou tested it on Windows at all?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/reactjs/React.NET/issues/58#issuecomment-67306205.\n. I can confirm that this happens in VS2013/.net 4.5: [DirectoryNotFoundException]: Could not find a part of the path &#39;c:\\users\\vm\\documents\\visual studio 2013\\Projects\\ReactTestProgram\\ReactTestProgram\\cassette.axd\\asset\\Scripts\\tutorial.jsx&#39;.\n. There is a pretty trivial workaround for this; rename the \"jsx\" files to \"js\". The Cassette JSX transforms still appear to be applied, so all is well for now.\n. \n",
    "tulbox": "I also can confirm this, but in my case, it's for a scenario as per the following:\nvar react = new[]\n        {\n            \"~/content/js/react/react.js\",\n            \"~/content/js/react/react-bootstrap.min.js\",\n            \"~/content/js/react/shipping.react.jsx\"\n        };\n        bundles.Add<ScriptBundle>(\"admin.js\", react, x => x.PageLocation = \"admin\");\nDitto for using with a bundle.txt file:\nbundles.Add<ScriptBundle>(\"~/content/js/react\", x => x.PageLocation = \"admin\");\nAs @danrien states, this can be fixed by switching any .jsx files to a .js extension (but that's not an optimal solution).\n<package id=\"Cassette\" version=\"2.4.2\" targetFramework=\"net451\" />\n  <package id=\"Cassette.Aspnet\" version=\"2.4.2\" targetFramework=\"net451\" />\n  <package id=\"Cassette.React\" version=\"1.4.0\" targetFramework=\"net451\" />\n  <package id=\"Cassette.Sass\" version=\"2.4.2\" targetFramework=\"net451\" />\n  <package id=\"Cassette.Views\" version=\"2.4.2\" targetFramework=\"net451\" />\n  <package id=\"Microsoft.AspNet.Mvc\" version=\"5.2.3\" targetFramework=\"net451\" />\n  <package id=\"Microsoft.AspNet.Razor\" version=\"3.2.3\" targetFramework=\"net451\" />\n  <package id=\"React.Web\" version=\"1.4.0\" targetFramework=\"net451\" />\n  <package id=\"React.Web.Mvc4\" version=\"1.4.0\" targetFramework=\"net451\" />\n. ",
    "calebroseland": "Not sure if it is technically correct, but I'll paste this here incase it helps anyone.\nIf you remove the *.jsx handler in web.config, it should fall back to using the cassette.axd handler. I commented out the following line and Cassette delivered it just fine while in debug=true.\n<!--<add name=\"ReactJsx\" path=\"*.jsx\" verb=\"GET\" type=\"React.Web.JsxHandlerFactory, React.Web\" resourceType=\"Unspecified\" requireAccess=\"Script\" preCondition=\"integratedMode\" />-->.\n. ",
    "onethread": "@PeteDuncanson Did you ever write up that blog post? I decided to try the gulp/grunt route as well, and ran into the same issue where Reactjs.net can't see the modules anymore post bundling. Would love to see more details on how you handled that. \n. @Daniel15 @PeteDuncanson Thanks to both of you for the help, it's putting me on the right track. \nPete, does this mean you switched from Browserify to Webpack? They're both fairly new to me. Before I go and contemplate switching to Webpack, just for the sake of posterity, can you explain how you got it working with Browserify? I used the standalone option, and it does seem to put it into the global var of my choosing, but only the browser seems to see it (React server side does not). \nEdit: Well after mucking around with the settings for a few hours, I did get Reactjs.net to see the new namespace server-side, but now it continually throws \"Expected identifier, string or number\" errors. Throwing in the towel and giving webpack a whirl.\nEdit2: After getting webpack working, I went back to browserify just because. Turns out it was an individual module that doesn't seem to like running server side. So now both bundling options work with that module disabled.\n. I think I was able to get this to work (after some gnashing of teeth). It's rough, and not optimized, but I was mainly concerned with getting it working. The downside is I don't believe further routes after the user clicks around will be rendered server side, but that's just the current limitation sadly.\nEdit: Something wasn't working quite right, I'll have to revisit it.\n. Thanks, I'll give that a whirl\n. Just another note, ClearScript 5.4.4 readme says VS2015 or 2013 C++ runtimes will work, but in my experience, it only worked when 2013's was present.\n. I've actually been getting a very similar issue, except instead of an exception, I just get a connection refused. It happens very reliably whenever I rebuild my jsx with webpack. Re-launching via \"View in Browser\" gets it going again. I'm in IIS Express 8.0 if that helps.\n@jlchmura How did you disable the pooling? \n. Hi Daniel,\nI'm getting the same error after deploying to the server. I deleted the clearscript folder, but it continues to work fine locally. I've checked the js line that it's complaining about, but I see no error (it's built by webpack, too, I assume that would catch syntax errors?). \nThe asp.net error:\n[ReactScriptLoadException: Error while loading \"~/Scripts/build/server.bundle.js\": Expected identifier, string or number\nLine: 934\nColumn:16]\n   React.ReactEnvironment.EnsureUserScriptsLoaded() +646\n   React.ReactEnvironment.CreateComponent(String componentName, T props, String containerId) +34\n   React.Web.Mvc.HtmlHelperExtensions.React(HtmlHelper htmlHelper, String componentName, T props, String htmlTag, String containerId, Boolean clientOnly) +98\n   ASP._Page_Views_Overview_Clients_cshtml.Execute() in e:\\...\\Clients.cshtml:403\n   System.Web.WebPages.WebPageBase.ExecutePageHierarchy() +280\n   System.Web.Mvc.WebViewPage.ExecutePageHierarchy() +126\n   System.Web.WebPages.StartPage.ExecutePageHierarchy() +143\n   System.Web.WebPages.WebPageBase.ExecutePageHierarchy(WebPageContext pageContext, TextWriter writer, WebPageRenderingBase startPage) +110\n   System.Web.Mvc.ViewResultBase.ExecuteResult(ControllerContext context) +380\n   System.Web.Mvc.ControllerActionInvoker.InvokeActionResultFilterRecursive(IList`1 filters, Int32 filterIndex, ResultExecutingContext preContext, ControllerContext controllerContext, ActionResult actionResult) +109\n   System.Web.Mvc.ControllerActionInvoker.InvokeActionResultFilterRecursive(IList`1 filters, Int32 filterIndex, ResultExecutingContext preContext, ControllerContext controllerContext, ActionResult actionResult) +890\n   System.Web.Mvc.ControllerActionInvoker.InvokeActionResultWithFilters(ControllerContext controllerContext, IList`1 filters, ActionResult actionResult) +97\n   System.Web.Mvc.Async.<>c__DisplayClass21.<BeginInvokeAction>b__1e(IAsyncResult asyncResult) +241\n   System.Web.Mvc.Controller.<BeginExecuteCore>b__1d(IAsyncResult asyncResult, ExecuteCoreState innerState) +29\n   System.Web.Mvc.Async.WrappedAsyncVoid`1.CallEndDelegate(IAsyncResult asyncResult) +111\n   System.Web.Mvc.Controller.EndExecuteCore(IAsyncResult asyncResult) +53\n   System.Web.Mvc.Async.WrappedAsyncVoid`1.CallEndDelegate(IAsyncResult asyncResult) +19\n   System.Web.Mvc.MvcHandler.<BeginProcessRequest>b__5(IAsyncResult asyncResult, ProcessRequestState innerState) +51\n   System.Web.Mvc.Async.WrappedAsyncVoid`1.CallEndDelegate(IAsyncResult asyncResult) +111\n   System.Web.CallHandlerExecutionStep.System.Web.HttpApplication.IExecutionStep.Execute() +606\n   System.Web.HttpApplication.ExecuteStep(IExecutionStep step, Boolean& completedSynchronously) +288\nThe relevant js line (\"marker\" is line 934, col 16):\njavascript\nline: {\n                  marker: {\n                      enabled: true,\n                      symbol: \"triangle\"\n                  },\n                  shadow: true\n              }\n. I don't know if this will help or not, but I've noticed that the server took an unusual amount of time to load the page. Eventually I just deleted everything from the return object in GetDefaultProps, and it did load the page, but eventually it lead to an out of memory exception. I will follow up as I test more.\n. @Daniel15 So you were right, it was an extra comma. Not quite at the line given, but near there. I ended up clearing all the properties and adding them in one by one. I'm surprised the JSX transpiler didn't pick it up, nor did VS once it was converted to JS. \nWell, TIL, just looked it up, trailing commas are valid in JS. http://stackoverflow.com/questions/7246618/trailing-commas-in-javascript\nOn another note, do you recommend V8 on the server? And how can one verify which engine is being used?\n. @PeteDuncanson How were you able to avoid an invariant violation/\"multiple copies of React error\" doing it that way (since you'll need to import React/ReactDOM again to get the client-side working)? \nNevermind, I imagine you exposed them via webpack. That seems to work.\n. ",
    "selected-pixel-jameson": "Maybe I'm doing something wrong, but this doesn't seem to be working for me. I'm running the latest version with .NET core 2.x and it keeps throwing an error saying:\nCould not find a part of the path 'C:\\source\\components'\nfor\n.AddScript(\"~/source/components/*.js\")\nAny suggetions?\n. @gazab I agree that this is the root of the problem. I was following the example on https://reactjs.net/guides/webpack.html, but I think it's out of date possibly. I'm going to try to adapt my configuration to match what you are doing and see if that helps solve this problem.. I finally got around this by making sure to do something similar to what @gazab mentioned. I also had to make sure that I was including references to react and any dependent modules. For example:\n`\nimport React from 'react'\nimport ButtonListSelector from '../ButtonListSelector'\nimport AddressBox from './AddressBox'\nclass AddressSelector extends React.Component {\n.....\n}\nmodule.exports = AddressSelector\n`\nAfter doing this with all of my classes I was able to get the page to initially render. However now I'm getting a console error in chrome. \n\n2425c9d4-9036-498a-0c74-08d53b3b74bd:56 Uncaught ReferenceError: Components is not defined\n    at 2425c9d4-9036-498a-0c74-08d53b3b74bd:56\n\n. ",
    "Hekku2": "I also ran into this issue while investigating if I can use this with current project.\nCurrently one way to use localizations strings is to render partial .cshtml-file which has script section where translations are used.\nI think this way is ugly and it would be very laborious to use for every text element in page. And if someone knows better way, please tell me.\nThis example is from knockout validation localizations \n<script type=\"text/javascript\">\n    if (ko && ko.validation) {\n            ko.validation.rules.required.message = \"@Html.Raw(Translations.Validation_Required)\";\n            ko.validation.rules.maxLength.message = \"@Html.Raw(Translations.Validation_MaxLength)\";\n            ko.validation.rules.digit.message = \"@Html.Raw(Translations.Validation_Digit)\";\n    }\n</script>\nBest way I can come up with is to use translations straight from the jsx-file, which would be ran trough Razor(?) or some kind of \"replace X from resource file\" before compiling/bundling the jsx-file to js-file.\nvar WarningComponent= React.createClass({\n    render: function() {\n        return (\n          <div className=\"alert alert-warning\">\n            @Translations.Warnings_MissingInformation\n          </div>\n      );\n    }\n});\n. ",
    "xdansmith": "Any further work happening with this? we're trying to decide whether to move to node.js server-side, or stick with asp.net and use reactjs.net, but isomorphic rendering is a must, and without being able to use react-router or implement something like it makes it not really an option. \n. ",
    "Todilo": "@PeteDuncanson have you gotten further with this? I am struggling with routing and flux on serverside and hitting a really hard wall.\n. @PeteDuncanson I have tried the demo (I did download the npm and run webpack) and I get an error:\nReferenceError: reactRoutesConfig is not defined\nat Script Document:1:13 -> Router.run( reactRoutesConfig, '/articles', function( Handler ) {\nwhen going to localhost:port/articles\nI have not done any changes to the code?\nBtw very nice article. I am reading through it and everything else you have posted, thanks.\n. Ok, then I will see of all the Flux libraries I will choose :). Thank ou\n. It looks like I am ending up with fluxible http://fluxible.io/ , for both routing as well as flux (isomorphic) but well it is really difficult so set everything up! There are so many libraries out there(for flux and routing but sooooo little documentation and well trying to set it up under .net has 0 documentation).\nBasically its how to render the result of a Fluxible object. \n. @PeteDuncanson is facebox flux even possible to have server-side. From what I have read it uses a singleton which makes it not possible to use on serverside. If it is I would of cause like to go with it because as you say, it is battletested, so the bigger the library the better.\nI will watch your starterkit if you get the build fixed it would be super helpful.\n. ",
    "Scratch-net": "Hi, @PeteDuncanson ! Have you measured the performance difference from the original React.net? How much is your implementation faster? \n. @PeteDuncanson Good news! Would be nice to see Supercharged appear on Nuget so that we could test it on our projects. And an option to disable built-in React would be nice too (we use a single webpacked JS file)\nThank you for your efforts and research\n. @PeteDuncanson Fantastic! Looking forward to test is ASAP\n. Thanks a lot, no need to fork any more!\n. ",
    "adamvaul": "I am still getting the error when trying to run Orc.ReactExample  web project.  I think what you are doing here is amazing and really want to check it out.  Please let me know what needs to be done.\nReferenceError: reactRoutesConfig is not defined\n   at Script Document:1:13 -> Router.run( reactRoutesConfig, '/', function( Handler ) {\n. I am also getting this error when trying to run Orc.SuperchargedReact project\nAttempt by security transparent method 'System.Web.Mvc.PreApplicationStartCode.Start()' to access security critical method 'System.Web.WebPages.Razor.PreApplicationStartCode.Start()' failed.\n. ",
    "dhruska": "Stumbled across this and very interested - @Daniel15, did any of the ideas @PeteDuncanson was exploring ever make it into ReactJS.NET? I'm exploring the possibility of trying to render server-side a page I plan to build with React and react-router (on top of .NET).\n. @PeteDuncanson I totally get that - if you end up picking it up again I'd love to help out.\n. ",
    "mkontula": "Any movement on this? Would love to see react-router supported in server-side rendering.\n. ",
    "pauldotknopf": "I got Reactjs working in .NET with a complete client/server routing soluition.\nhttps://github.com/pauldotknopf/react-dot-net\nAll navigation is done entirely client-side using react-router, but an F5 refresh is a complete render of the same exact content/page.\n. I looked into using edge.js with my react asp.net starter template, react-aspnet-boilerplate. It only allowed a single instance, and added a lot of technical overhead for functionality that really isn't needed. We should just depend on using scripts compiled by webpack in a traditional javscript environment (V8, ClearScript, etc). That is what I winded up doing.\nI wish someone would build some C layer (for P-Invoke) over atom's node implementation which allows embedding the node.js runtime.\nAlso, if anybody is looking for another react .net template, checkout react-aspnet-boilerplate. It implements the default aspnet project functionality (authentication/account/etc), universal rendering, redux, react-router, etc.\n. In case your interested, react-aspnet-boilerplate handles this.\n. @BrumoMiguelAS Not as of now, no. I'd like to, just don't have the time.\n. @BrumoMiguelAS @alesdvorakcz JavaScriptViewEngine now supports MVC Core 1 (MVC 6) and MVC 5.\n. @ar27111994, the react-aspnet-boilerplate project supports .NET Core/RC2.\n. @ar27111994, it isn't supported going forward, but if you checkout the repo at 36001a4b1f5a11119fe0f71cb26a36a2e3b18a50, you can.\n. I updated VroomJs to support .NET Core.\nhttps://github.com/pauldotknopf/vroomjs-core\n. @Daniel15,\nI updated VroomJs to support .NET Core.\nhttps://github.com/pauldotknopf/vroomjs-core\n. ",
    "gunnim": "Got React Router w/ SSR working in MVC.\nMy project takes a different approach than previous solutions, utilising facilities exposed globally in ReactJS.NET.\nIt basically boils down to wrapping the js code sent to the JS engine for execution with a few statements. \nThis wrapper code returns an object that contains both the context object used by react router and the ReactDOMServer render result.\nThe returned context object is what is used by React Router to signal a custom status code or redirect result.\nThe extension is available as a nuget pkg here:\nhttps://www.nuget.org/packages/GMO.ReactRouterNet/\nFull MVC 5 solution w/ Umbraco here:\nhttps://github.com/gunnim/Umbraco-React-Router-SSR\n@Daniel15 as this method introduces no breaking changes, do you think you could see a similar solution making it's way into ReactJS.NET this year?. @BrumoMiguelAS @alesdvorakcz and others who might stumble upon this issue, if you would like to use ReactJS.NET as the core for a server side rendering solution you might be interested in my solution.\nhttps://github.com/gunnim/GMO.ReactRouterNet\nThis package extends upon the core features of ReactJS.NET and offers a way to render a React Router component with context object.\nhttps://github.com/gunnim/Umbraco-React-Router-SSR\nThis repo contains a full working MVC 5 solution built on top of Umbraco, the js closely mirrors the current server side rendering tutorial from React Router.\n. We have the same issue, setReuseJavascriptengines false fixes.\n.SetAllowMsieEngine(false) \n+\nand install javascriptEngineSwitcher.v8.native.win-x64 \nalso fixes.\nLeading me to believe that React .net is trying to use the msie engine and that engine seems to be buggy when it comes to disposing.\nI recreate the memory leak by touching the web.config and sending a web request. This usually fires up a new app domain and grows the memory. If i do this 5 times memory can grow to 2gb and stays that way if i check back an hour later and 4-6 .net app domains (checked with procexp from sysInternals).\nSome dispose issue @Daniel15  ?. Issue is not present with the 2.4.10 version of the JavascriptEngineSwitcher libraries (despite not having the v8.native.win-x64 package)\nEdit: I meant to say while having the v8.native package. I can confirm that React.NET works with at least IE 11.\nAre you sure the problem you are facing does not have to do with ES6 support in the IE browsers?\nAre you using babel and/or webpack in your build process?. @Daniel15 , just wanted to make sure you don't miss this. Still waiting for your confirmation so that i can begin work on the feature.. This offers more, allowing the server to return custom http status codes determined by react router. f.x. react router receives the url, determines page not found and wants to return 404. This aims to achieve that, similar to what's shown here:\nhttps://reacttraining.com/react-router/web/guides/server-rendering. Of course and thanks.\nRegarding the implementation, CreateComponent in ReactEnvironment instantiates the ReactComponent class, providing it with the environment configuration and then adding it to the list of components to render client side.\nWe however need it to create a ReactRouterComponent class..\nI'm not particularly confident in my proposed solution but here goes:\nMy initial thought is to add a new method to ReactEnvironment, CreateCustomComponent which would in addition to the params in CreateComponent accept an IReactComponent object.\nThat I assume would mean we'd have to instantiate ReactRouterComponent with the environment object and configuration from the publicly accessible ReactEnvironment.Current and ReactSiteConfiguration.Configuration respectively.\nIt would also mean the instantiation has to happen elsewhere, in the HTMLHelper extension method or a method called therein.\nFeels like some refactoring might be a better solution though?. I'm not sure i follow, a static createRouterComponent extension method on ReactEnvironment can't access the _config protected instance variable nor a ReactEnvironment instance without the aforementioned public static variables I assume?\nand yeah i gave up on the xproj migration process after a while... some people who were having migration problems suggested creating a new solution and moving the code and project to this fresh base and go from there?. > An extension method would have the ReactEnvironment instance - It'd be the first argument (this IReactEnvironment environment)\nDoh! \ud83d\ude1b\nconfig solution sounds fine and thankfully i have VS2015 installed so good luck with the migration and I'll be in touch!. Pull request submitted. Work is not fully complete but i decided to send the pull request so we could discuss here further.\nWhat's missing are some unit tests, I'm extremely inexperienced in that regard so i'm having some problems implementing tests for methods that call static extension methods.\nWas hoping you might have some suggestions on getting around that :). Have you had a chance to take a look yet? Please let me know if I can do anything to help with the progress :). Gotcha, glad to hear I'm on the list! :). Hehe no problem, and I did in fact leave some spaces. \nBtw vstudio 2017 supports .editorconfig now and moving the file up one folder level set your defaults correctly for me.\nRegarding the check failure, should i pull changes from this repo to fix the merge conflict?. Noooo @Daniel15 ! \nI can't lose you now, we're so close ;D. Was actually doing exactly the same hehe, got it building but some unit tests are failing on Message: System.IO.FileLoadException : Could not load file or assembly 'JavaScriptEngineSwitcher.Core, Version=2.4.0.0, Culture=neutral, PublicKeyToken=c608b2a8cc9e4472' or one of its dependencies. The located assembly's manifest definition does not match the assembly reference. (Exception from HRESULT: 0x80131040)\nI actually just finished pulling your 3.1.0 release building from source and I get the same error there. So what did i did after trying to get the merge of branches working was...\nI cloned 3.1.0 straight from this repo fresh, ran dev-build.bat, then build from vstudio on the tests and then ran them.... same error. @Daniel15 \nThis happens when you try to run the unit tests.\nThe issue seems to have to do with the fact that the v8 engine references javascriptengineswitcher.core v. 2.4.0 while the rest of the solution references 2.4.9\nI also tried out upgrading all the js engine related packages but then the issue became that jspool was referencing v. 2.4.9 after i had upgraded to 2.4.10\nThis issue should be easily reproducible since I verified by doing a fresh clone of version 3.1.0.\nProblem goes away if i manually specify a binding redirect.\nASP.NET projects are clever enough to automagically add a module binding redirect for the conflicting versions however.\n\n. Great read! \nI'd like to ask though, is there a reason for not including both the x86 and x64 binaries with the v8 package?. Looks like a javascript error. I recommend simplifying your component to troubleshoot and adding on features from there.\nI think that error indicates that the javascript engine is parsing your code fine since it's the React javascript library that is providing the error. React Router support will likely be included in the next release, \nhttps://github.com/reactjs/React.NET/commit/5d1bd9d73d32d07f42abbc0060f90cb38b988070\nas soon as this update gets released i'll update the following examples\nhttps://github.com/gunnim/AspNetCore-React-SSR/\nhttps://github.com/gunnim/Umbraco-React-Router-SSR\nin the mean time you could build the react source and copy the code from either the asp.net Core or Umbraco example. This is beyond weird...  the test fails intermittently... with no obvious cause. Seems like an issue more with the test than the code itself but i'm gonna have to take a better look. I tried my best but all i came up with is. \nThe bug never happens when i run the tests in visual studio, only when I run the tests using\ndotnet test --configuration Debug --no-build tests/React.Tests/React.Tests.csproj\nwith some console writeline statements i managed to track it to line 97 in HtmlHelperExtensions\nif (executionResult.Context?.status != null)\nIntermittently during various tests and when the exception happens, calling ToString on this executionResult obj produces the following\nMock\nI can't see any way for that to happen, let alone intermittently...\nthis is also the string value of the object when the exception happens. I understand if this won't get merged.\nBut in case it might, this code has backwards compatibility, marking the originally named method obsolete and has said method simply call the newer shorter name.. https://github.com/reactjs/React.NET/pull/475 seems to take care of the issue, i'm no longer able to reproduce the bug \ud83d\udc4d . Duplicate. reference React.Web.Mvc4 from React.Router.csproj ?\nReact.Router w/o React.Router.Mvc4 might be used by .NET Core.\nF.x. in the sample react.router .net core project we would end up including asp.net v5 code.\nInstead I propose we add React.AspNet as a dependency for React.Router, that would include the correct IHtmlHelper extension methods for .net core.\nWhat we also need is a transform for the .net core _ViewImports file both for React.AspNet and React.Router, but i can't find a simple way to do it.. The idea is that you always wrap the StaticRouter, allowing you to render children and target the props shown in the example by dustinsoftware \nMy original choice probably had to do with the fact that the location prop for the router also supports location objects which we are never passing down on the server side.\nI think I agree this change would be more consistent but I think it's also trivial to continue to support those using the original implementation by simply passing down a location prop as well as the \"deprecated\" path prop.\n. True, good points :). I'm sorry but I'm quite confused.\nI'm viewing the file now in vstudio with view whitespace.\nI can see a random leading whitespace in front of one using statement and some weirdness with the javascript block that is about to be removed.\nAside from that it shows only tabs as indentation in this file.. No, this was just intended as a convenience and i was hoping it might help for unit testing?\nBut I guess it might just be confusing, I'll remove it. Sure, that particular block is copied from react.aspnet\\htmlhelperextensions.cs.\nI imagined you had a reason for doing it there that would also apply here?. The react router htmlhelper lives in this namespace. I seem to recall being unable to use it if I didn't either have this statement in my web.config or an explicit using statement in file.\nYou have a similar file in the mvc4 project.. Whoops, i went over the .cs files and tabified but i missed this file and some xml. fixed. It's tabbed. I don't remember but i must have been fixing the indentation since the file shows as changed.. Vstudio says it's tabbed ?. same as above, tabs on my end. it's tabbed I swear haha!. Yeah i'm mocking the response obj in the unit tests, should I be doing this a different way?. I was hoping for feedback from you on how to fix some of these tests.\nI managed to fix \nEngineIsReturnedToPoolAfterRender and \nEnvironmentShouldGetCalledClientOnly myself but I think i need help with\nReactWithClientOnlyTrueShouldCallRenderHtmlWithTrue and\nReactWithServerOnlyTrueShouldCallRenderHtmlWithTrue\nIt's a static extension method calling another static extension method. Is there a way to proxy this behavior and have CreateRouterComponent create a Mocked reactcomponent?\nOr should I let this and similar tests go?\nAlso please advise if you feel there should be more tests for some or any parts of this feature. I agree, moved to helper class. Booya! Got all of my tests working :)\nBut my previous statement stands, this is not something I have good experience with so let me know if you think I need more.-.. ",
    "mandrek44": "I created new Pull Request: https://github.com/reactjs/React.NET/pull/70\n. Thanks for all your effort to do this review! I hope I covered all your comments.\nI used the sample code from React.Sample.Mvc, however I had to change it bit to adjust to Owin environment - it loads initial comments asynchronously.\n. @delaneyj there's a sample showing the server-side JSX transformation with OWIN: https://github.com/reactjs/React.NET/tree/master/src/React.Sample.Owin \nRegarding the server-side rendering - Katana has no built-in rendering mechanism, however you can use Razor manually and could probably use the same mechanism as in MVC for sever side rendering. I'll investigate.\n@Daniel15 I'll try to add some documentation soon!\n. Assembly.GetEntryAssembly() will be null under nunit runner. I can change design to get around this somehow, however I'm not sure if this is good idea for something that simple\n. React.Web and React.MsBuild call the Initialize method internally, so I thought that it would be good idea to call it in React.Owin when the first Middleware object is created. \nIf you're asking for the lambda, then I didn't know what to put there. I see that in https://github.com/reactjs/React.NET/blob/master/src/React.MSBuild/MSBuildHost.cs#L41  there's a call to \"AsSingleton\" method. Do you think I should use it here also?\n. Katana (the Microsoft Owin implementation) supports only .NET 4.5\n. I think I did - I copied the version number from https://github.com/reactjs/React.NET/blob/master/src/React/packages.config#L8.\nIt's bit strange that Newtonsoft.Json has package version (5.0.4) different from assembly version (4.5.0.0)\n. Added by mistake\n. Done! ;-)\n. Added by mistake\n. For no reason - It probably can be reused somewhere else, so I made it public.\n. Owin doesn't use any IoC container - it just doesn't have to. Owin is an abstraction on hosting container (like IIS, or self hosting) and you can use whatever container suits you (you have a control of all your objects lifetime)\nOwin also doesn't have any global / static variable that would let you differentiate between the requests. From middleware perspective, the requests begins with the Invoke methods, and ends with it (asynchronously). Since it can use different threads internally, you can't differentiate the requests by thread id.\nAll of this makes it hard to create \"lifetime provider\" similar to ASP.NET version (where you have the global HttpContext.Current).\nMy fix to this is as follows: \n1. I set all \"per request\" objects to be created everytime they are resolved. (https://github.com/mandrek44/React.NET/blob/react.owin/src/React.Owin/JsxFileMiddleware.cs#L31)\n2. When beginning the request I explicitly resolve the only object I need - that's the IReactEnvironment implementation. That's the only place it's requested. (https://github.com/mandrek44/React.NET/blob/react.owin/src/React.Owin/JsxFileMiddleware.cs#L60)\n3. When the request is completed, I explicitly dispose the object.\n   (https://github.com/mandrek44/React.NET/blob/react.owin/src/React.Owin/JsxFileMiddleware.cs#L66)\nThis will work as long as nobody starts using the IoC container as Service Locator inside React core library.\n. ",
    "ilyapalkin": "Is there a nuget package with React.Owin?\n. ",
    "andycmaj": "Looks like it's JSDOM in this case... I think I might just have to include jsdom as a ReactConfiguration script...\n. ",
    "dorward": "While that holds for className, it doesn't for onclick which must be all lower-case in DOM. \nbutton.className = \"foo bar baz\";\nbutton.onclick = function (e) { /* event handler */ };\n. ",
    "c0state": "Sorry, my bad--should have looked deeper first :)\n. ",
    "PureKrome": "Hi @PeteDuncanson - can you provide some sample code with re: to what you're doing? Would be great to reference that against whatever we're doing / not-doing.\nSecondly, any more info with re: your tweaks and using js pool ? Did you end up trying that? Luck/no-luck?\n. ",
    "Jecoms": "I ran into this when one of my components was a clock and I set the initial state to the current time. This will of course be different than my client-side render, so it gave me this warning. \nMy solution was to set the initial state for the time/date to an empty string and set the time to new Date() in componentDidMount(). The initial renders now match as I only display the time if the state variable is truthy.\nAs far as a state variable that is dependant on run-time, would this be the recommended \"Thinking in React\" way of handling this situation?\n. ",
    "steroberts89": "Hey,\nEnsure you have this installed on your webserver http://www.microsoft.com/en-us/download/details.aspx?id=30679 (Visual C++ Redistributable for Visual Studio 2012 Update 4)\nIt's bundled with Visual studio which is why it'll be running locally!\nCheers\n. @Daniel15 Yeah its back up now :)\n. ",
    "joshcobalt": "This answer solved my problem with Clearscript, (but I'm not using React.NET)\nhttp://stackoverflow.com/questions/23301851/clearscript-files-cannot-be-found-on-host/33391178#33391178\n. ",
    "Lenne231": "Is it possible to debug the JS code executed with V8 with VS?\n. ",
    "dustinsoftware": "Better debugging support would be great. Since nobody's actively working on it though, I'm closing this old issue and tracking future work in #655 . Closing issues older than a year, please re-open if you think this is still relevant.. I've run into this ClearScript crash with IIS Express, but regular IIS (w3wp) appears to be fine.\n. Using ChakraCore may work around the problem for you. . Closing issues older than a year, please re-open if you think this is still relevant.. Closing issues older than a year, please re-open if you think this is still relevant.. Closing issues older than a year, please re-open if you think this is still relevant.. Closing issues older than a year, please re-open if you think this is still relevant.. Closing issues older than a year, please re-open if you think this is still relevant.. Evaluating arbitrary Javascript at runtime is possible now by implementing IRenderFunctions\nSee how we're implementing CSS-in-JS support as an example: https://github.com/reactjs/React.NET/blob/master/src/React.Core/RenderFunctions/StyledComponentsFunctions.cs. This issue is really old but it\u2019s always been possible to use webpack to build typescript files. With Babel 7 support it could probably support typescript types directly.. Yes, this is possible now by implementing IRenderFunctions\nSee how we're implementing CSS-in-JS support as an example: https://github.com/reactjs/React.NET/blob/master/src/React.Core/RenderFunctions/StyledComponentsFunctions.cs. Closing issues older than a year, please re-open if you think this is still relevant.. Thanks for the PR. Unfortunately this isn't mergeable as-is and hasn't had any recent activity, so I'm going to close this for now. Please feel free to re-open when you'd like to revisit this.. Fixed here https://github.com/reactjs/React.NET/commit/b93e529c8cd6cb4a34ddf2f6203095d7f3da3d29. Closing issues older than a year, please re-open if you think this is still relevant.. Closing issues older than a year, please re-open if you think this is still relevant.. Closing issues older than a year, please re-open if you think this is still relevant.. Closing issues older than a year, please re-open if you think this is still relevant.. Agreed, using componentDidMount is the right approach here.. Since it's been over a year, I'm closing issues for future tasks like this that aren't actively being worked on, but would be open to adding support for this!\n655. Since it's been over a year, I'm closing issues for future tasks like this that aren't actively being worked on, but would be open to adding support for this!\n655. Looks like we have that on the readme: https://github.com/reactjs/React.NET#building-manually-and-contributing. Thanks for the PR. Unfortunately this isn't mergeable as-is and hasn't had any recent activity, so I'm going to close this for now. Please feel free to re-open when you'd like to revisit this.. Closing issues older than a year, please re-open if you think this is still relevant.. Docs are here for React Router integration: https://reactjs.net/bundling/webpack.html. Thanks for pushing a fix, just ran into this bug on production. :+1:\n. Edit: Unfortunately, about 6 hours after deploying the fix, we ran into the same exception being thrown (Could not acquire JavaScript engine within 00:00:05). Going to do some more investigating...\n. After load testing for about an hour on my local machine, I was able to repro the issue. Running an independent load test on JSPool alone using the test suite did not trigger this bug, so I suspicious of this  TinyIoC logic that's responsible for returning the current JS engine to the pool after a web request completes. I don't see any evidence of memory corruption in _availableEngines or _metadata. Still investigating.\nI'm using MVC 5. These screenshots are from _engineFactory after my local load testing. I ran one web request after the load test to trigger the breakpoint for these screenshots before the engine was claimed.\n\n\n. Ok, I found the problem. Potentially expensive work is being performed in child actions in my project. A JS engine is acquired from the pool when the first Html.React call is hit, but then a call to a child action via Html.Action occurs. In this case, the child action looks up data from a Redis cache, and returns that in a partial view. It looks like the Redis library I'm using causes the current thread to sleep until the I/O completion happens on a different thread, which allows other worker threads to process incoming requests, which is great! However, if our Redis server gets swamped, all of the JS engines get used up by worker threads that are asleep waiting for Redis to respond, and incoming requests try to acquire a new engine, which causes the exhaustion. This could also happen if the child action was waiting asynchronously on an API to respond, e.g. await _client.GetStuffAsync().\nIt would be awesome if there was a way for Html.React to acquire and free and engine immediately after the component has been rendered, instead of holding on to it for the entire request. The alternative would be to avoid doing anything expensive in a child action, which is doable, but would require refactoring a lot of the views in this project to move that work out of child actions.\nWhat do you think?\n. @huan086 I pushed a fix in #270. I'll be doing some more thorough testing later but it should resolve this problem for you, as it no longer relies on the DI container firing an event to return the JS engine to the pool.\n. I see that I forgot to sign the CLA before submitting this PR - just did that.\n. Yeah, it looks like the line endings are mixed in some of the files and VS auto corrected them :) Fix pushed\n. Fixed, sorry about that. I had been using the sample site to test before, but forgot to build solution before I pushed.\n. @Daniel15 would you mind publishing a package update so I can consume these changes?\n. Yes, you still have to use webpack if you want to use ES modules. https://reactjs.net/bundling/webpack.html. Agreed. Closing until someone decides to work on it. #655 . Nope, you should be just fine.\n. FWIW we've been running this fix in production for a week now and have had no problems so far! \ud83c\udf89 \n. Really well so far. One time one of the pooled v8 engines got in a weird\nstate and stopped responding - we had to recycle the app to fix it. That\nhas only happened one time. There is already an issue open somewhere about\nthat bug..\nOn Sun, Jul 17, 2016 at 11:15 Bill Bell notifications@github.com wrote:\n\ndustin - how is it going after a month or so?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/reactjs/React.NET/pull/270#issuecomment-233195608,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AA5hFjf34tMKuCNkDSsG1edwOSZOMiIfks5qWnEygaJpZM4Ih63p\n.\n. @DaniilSokolyuk I\u2019d be open to making it so the implementation of engine pooling is swappable, so consumers can choose either jspool or your implementation (or maybe your changes can go upstream into JSPool itself..) . Please open a new issue and follow the directions there so we can triage. I\u2019m your case a screenshot would also be helpful in addition to all the version numbers. . Closing issues older than a year, please re-open if you think this is still relevant.. Closing issues older than a year, please re-open if you think this is still relevant.. Closing issues older than a year, please re-open if you think this is still relevant.. We've updated the JSON.NET version in the latest release.. Here's our testing setup:\n\ngulp is our task runner, browserify with babelify bundles and transforms the components into a single bundle, and then mocha with babel-core and jsdom is used to unit test React components. This is only useful for unit testing though, integration testing gets much more complicated - we're using NUnit and Selenium for that right now. There is probably a way to set this up with webpack, which there is a guide for already, but I have not tried that yet.\nHope that helps.\n. Agreed, passing down the initial data in props or doing the fetch in componentDidMount is the right approach here.. Closing issues older than a year, please re-open if you think this is still relevant.. Closing issues older than a year, please re-open if you think this is still relevant.. Tracking future work in #655 . 30-100 requests per second? Are all of these requests rendering react components, or does that also include XHR's? Maybe consider adding more nodes if your app is getting overwhelmed. The default is 25 engines, which has worked well for me.\n. I don't know if my deployment counts as very large - the app itself serves 1-3k RPM depending on the day, but a lot of those are requests that ask for JSON. I've been using this project in production for over a year and have been very happy with it.\n. Closing issues older than a year, please re-open if you think this is still relevant.. You might be able to reference the single large bundle on the server that contains all your components, and then use a separate build step that generates a smaller bundle for each page you need.\n. You can call AddScriptWithoutTransform for each bundle that was generated, and then only include some of the bundles on pages that need it. That should work in the current version of this library.. Closing issues older than a year, please re-open if you think this is still relevant.. Thanks for the PR. Unfortunately this isn't mergeable as-is and hasn't had any recent activity, so I'm going to close this for now. Please feel free to re-open when you'd like to revisit this.. Closing issues older than a year, please re-open if you think this is still relevant.. Closing issues older than a year, please re-open if you think this is still relevant.. Closing issues older than a year, please re-open if you think this is still relevant.. Closing issues older than a year, please re-open if you think this is still relevant.. This should be working with .NET Core 2.1. Closing issues older than a year, please re-open if you think this is still relevant.. Closing issues older than a year, please re-open if you think this is still relevant.. Closing issues older than a year, please re-open if you think this is still relevant.. Closing issues older than a year, please re-open if you think this is still relevant.. Closing issues older than a year, please re-open if you think this is still relevant.. You'll probably need to use the webpack integration and use module imports.\nhttps://reactjs.net/bundling/webpack.html. Closing issues older than a year, please re-open if you think this is still relevant.. Please use webpack to add third party modules to your projects.\nhttps://reactjs.net/bundling/webpack.html. Closing issues older than a year, please re-open if you think this is still relevant.. This was fixed in #270, please re-open if you're still seeing this issue :) . Closing issues older than a year, please re-open if you think this is still relevant.. Maybe I'm missing something? The tutorial already supports .NET Core, and is working without the changes in this pull request. \nEdit: Just saw this PR is over a year old.. are you still having problems with the tutorial?. Closing issues older than a year, please re-open if you think this is still relevant.. We've updated the JS engine registration logic in 4.0, please update if you're still encountering issues.. Closing issues older than a year, please re-open if you think this is still relevant.. Thanks for the PR. Unfortunately this isn't mergeable as-is and hasn't had any recent activity, so I'm going to close this for now. Please feel free to re-open when you'd like to revisit this.. There are a couple things you could try:\n\nYou can render the anti forgery token into an element at the top of every page, and then reference the element via an ID selector\nSet a special header, such as \"X-Requested-With\", with every form post, and refuse to process the request if that header is missing. This can help avoid CSRF attacks but is not foolproof (old versions of Flash could sidestep this check). Closing issues older than a year, please re-open if you think this is still relevant.. I think Hypernova is going to be the closest project that does what you're looking for. We could add some support but since the JS engine is hosted in process, that would not be trivial :) \n\n655 . Thanks for the PR! Sorry that we are just getting to this now.. it looks like the change has already been made on the master branch, so I'm closing this PR. Feel free to re-open if I missed something.. Tracking future ideas in #655 . Is the app pool running out of memory for you? Depending on your server load 1 GB shouldn't be out of the ordinary.. Closing issues older than a year, please re-open if you think this is still relevant.. Closing issues older than a year, please re-open if you think this is still relevant.. Can you use an assembly binding redirect to work around your issue?\nhttp://blog.rytmis.net/2016/03/29/asp-net-core-and-assembly-binding-redirects/. Are you using a module bundler, such as webpack? You'll need to reference the bundled JS.. Import is new syntax, try using require instead. You can also add babel to\nwebpack if you want to use ES2015 features.\nOn Sat, Feb 11, 2017 at 23:01 DanielDziubecki notifications@github.com\nwrote:\n\nI have referenced my bundled JS. My other components working well but now\nI need to import one.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/reactjs/React.NET/issues/373#issuecomment-279201067,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AA5hFpLL6247wCyrixCyly8tAcqFE3AYks5rbq5dgaJpZM4L-NbA\n.\n. Yep! Those docs should be up to date.. You'll need to use ts-loader with webpack to get typescript to work. https://reactjs.net/bundling/webpack.html. Closing issues older than a year, please re-open if you think this is still relevant.\n\nThe tutorial project restores successfully for me, it's possible we fixed this issue when updating to .NET Core 2.0. Closing issues older than a year, please re-open if you think this is still relevant.. Closing issues older than a year, please re-open if you think this is still relevant.. The server render and Babel support is pretty stable at this point. We should probably update the docs so they don\u2019t say \u201cexperimental\u201d anymore.  I\u2019ve also used library in a production application for a couple years now and it\u2019s been great. \n.NET core now ships with server render support for React (SpaServices) so if you need an alternate lib, that is available. . Closing issues older than a year, please re-open if you think this is still relevant.\nYou can also try switching to Chakracore as the JS engine. https://reactjs.net/getting-started/chakracore.html. Closing issues older than a year, please re-open if you think this is still relevant.. We recently made some changes for how JS engines are registered in 4.0 and updated the docs. Please re-open this issue if you still need help.. @bherila support for react-helmet has been added\nhttps://reactjs.net/features/react-helmet.html. Unfortunately I didn't get around to investigating this one, please re-open if you still need help with this.. Try bundling with webpack, which has a transform built in already to polyfill global in a browser environment.. Closing issues older than a year, please re-open if you think this is still relevant.. Closing issues older than a year, please re-open if you think this is still relevant.. Closing issues older than a year, please re-open if you think this is still relevant.. Closing issues older than a year, please re-open if you think this is still relevant.. Looking forward to trying this out - will build it locally and give it a go in one of our projects :) . Closing issues older than a year, please re-open if you think this is still relevant.. Closing this mega-issue, but feel free to keep referencing it :) . Thanks for the PR. Unfortunately this isn't mergeable as-is and hasn't had any recent activity, so I'm going to close this for now. Please feel free to re-open when you'd like to revisit this.. Closing issues older than a year, please re-open if you think this is still relevant.. Closing issues older than a year, please re-open if you think this is still relevant.. Also, we can't provide support for third party boilerplate projects. The best we can do for now is provide sample code and tutorial documentation for how to add this project with the templates provided by Microsoft.. Closing issues older than a year, please re-open if you think this is still relevant.. Closing issues older than a year, please re-open if you think this is still relevant.. Closing issues older than a year, please re-open if you think this is still relevant.. (sorry we never got to this one, I'm interested if you're still encountering memory leak problems!). Closing issues older than a year, please re-open if you think this is still relevant.. Closing issues older than a year, please re-open if you think this is still relevant.. Try passing clientOnly: true as a parameter to Html.React, then use the browser debugging tools to see what's wrong. It is possible that your components are not being exported as globals properly.. Closing since this question has been answered. Please feel free to re-open if you'd like some more help! \ud83d\ude04 . The samples have been updated to .NET Core 2.0, so closing this issue for now. Please feel free to re-open if you'd like some more help!. Hi there, what version of React.AspNet are you building against? The samples in this repo use .Net Core 2.0 so I\u2019m curious why you are still getting errors. . I published a beta that fixes this error, please update to the latest beta\nand try again.\nOn Thu, Nov 15, 2018 at 10:37, hlalit03 notifications@github.com wrote:\n\nI am trying the sample code under ReactJS.NET tutorial(\nhttps://reactjs.net/tutorials/aspnetcore.html) & despite making the\nchanges you mentioned it doesn't work. Same works with ASP.NET Core 2.0\n\u2014\nYou are receiving this because you modified the open/close state.\nReply to this email directly, view it on GitHub\nhttps://github.com/reactjs/React.NET/issues/433#issuecomment-439145380,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AA5hFrV-YJSXXwyPpGomTZlS7BcD7SNkks5uvbSEgaJpZM4O1zVG\n.\n. React Router support has been merged.\n\nTo use dynamic imports, you will need to use webpack.\n. Good news! There is an open PR for this #436 . Now that React.Router.csproj exists, it would be good to update that as well. . Closing because this question has been answered, please re-open if you'd like some more help \ud83d\ude04 . Looks like a test failure?\nFailed   React.Tests.Router.HtmlHelperExtensionsTest.ShouldRedirectPermanent\nEXEC : error Message:  [C:\\projects\\react-net\\build.proj]\n   System.NullReferenceException : Object reference not set to an instance of an object.\n  Stack Trace:\n     at React.Router.HtmlHelperExtensions.ReactRouter[T](HtmlHelper htmlHelper, String componentName, T props, String path, String htmlTag, String containerId, Boolean clientOnly, Boolean serverOnly, String containerClass, Action`2 contextHandler)\n     at React.Tests.Router.HtmlHelperExtensionsTest.ShouldRedirectPermanent() in C:\\projects\\react-net\\tests\\React.Tests\\Router\\HtmlHelperExtensionsTest.cs:line 225. Hey @wub you can use React.NET with React 16 by bundling it ahead of time along with your components, and then passing the component bundle to the engine. As long as the globals are exposed correctly, it should just work.\nReact.NET does not currently handle componentDidCatch very well.. going to investigate if that can be easily added. Right now if a component throws, the server render gives up immediately.. Yes, although I didn\u2019t push it since it was out of scope. I\u2019ll open another\nPR.\nIn my project server render for that component gets skipped if an error is\nthrown (this includes those with error boundaries). This introduced a\nproblem - I had to hack around it a bit since react.net tries to hydrate to\na div that isn\u2019t there when this happens. My fix was to find the generated\nID in the exception that\u2019s thrown and manually render a div, which fixes\nthe hydrate step.\nSince this is an error condition the right thing to do would be to still\nthrow an exception so you can know about and fix the bug, but still allow\nclient render to happen. So my PR would just allow more graceful handling\nof this error condition.\nOn Fri, Nov 3, 2017 at 00:57, sandip vashisth notifications@github.com\nwrote:\n\n@dustinsoftware https://github.com/dustinsoftware , I want to use React\n16 error boundary feature to log javascript error but it's not working with\nReactJS.NET. do you have any fix?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/reactjs/React.NET/issues/439#issuecomment-341639999,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AA5hFt8mkSpfVrw3pjnpVZz-t279z3zDks5sysdagaJpZM4PlDHy\n.\n. Yep!\n\nOn Tue, Dec 19, 2017 at 04:37, Srdjan Rakic notifications@github.com\nwrote:\n\nDoes ReactJS.NET now supports React 16? Thanks in advance.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/reactjs/React.NET/issues/439#issuecomment-352737369,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AA5hFqj4Y3Zx8H7YXuf_rac34c9st6kLks5tB637gaJpZM4PlDHy\n.\n. Hey @dfhincapiem, unfortunately I could not replicate this issue. Could you provide a sample app showing the problem?. No appveyor build? cc @Daniel15 . @cw-gawdeprasad it sounds like you have a memory leak somewhere in your code. I'd recommend getting a heap dump from the server when the problem occurs and diagnosing it with a debugging tool (such as WinDbg) to see where the leak is coming from.. Closing issues older than a year, please re-open if you think this is still relevant.. @Daniel15 this is almost ready to go. I just have to finish getting the webpack sample working before this should be merged, everything else is ready for review. @Daniel15 this should be good to go now.. Closing issues older than a year, please re-open if you think this is still relevant.. @roman-yagodin @JoshuaKGoldberg support for this is shipped in the 4.0.0 rc. @JoshuaKGoldberg it looks like this PR is getting stale, so I opened a new one that addresses these issues. #501 . Closing issues older than a year, please re-open if you think this is still relevant.. LGTM. Would be cool to have a sample as well to show off how it is used...\nI can put one together if you don't have time\n\nOn Sat, Nov 4, 2017 at 14:39, Daniel Lo Nigro notifications@github.com\nwrote:\n\nUpgrades React.Router to ASP.NET 2.0.\nAlso splits ASP.NET MVC 4 support out into a separate React.Router.Mvc4\nproject. This is required as you can use both ASP.NET Core and \"classic\"\nASP.NET from .NET Framework, so simply discriminating based on framework\nversion is not sufficient, and it actually needs to be two separate\npackages.\ncc @dustinsoftware https://github.com/dustinsoftware\nYou can view, comment on, or merge this pull request online at:\nhttps://github.com/reactjs/React.NET/pull/461\nCommit Summary\n\nUpgrade React.Router to ASP.NET Core 2.0\n\nFile Changes\n\nM build.proj\n   https://github.com/reactjs/React.NET/pull/461/files#diff-0 (1)\nA src/React.Router.Mvc4/React.Router.Mvc4.csproj\n   https://github.com/reactjs/React.NET/pull/461/files#diff-1 (47)\nM src/React.Router/HtmlHelperExtensions.cs\n   https://github.com/reactjs/React.NET/pull/461/files#diff-2 (7)\nM src/React.Router/React.Router.csproj\n   https://github.com/reactjs/React.NET/pull/461/files#diff-3 (18)\nM src/React.Router/ReactRouterComponent.cs\n   https://github.com/reactjs/React.NET/pull/461/files#diff-4 (4)\nM src/React.Router/ReactRouterException.cs\n   https://github.com/reactjs/React.NET/pull/461/files#diff-5 (6)\nM src/React.Router/SetServerResponse.cs\n   https://github.com/reactjs/React.NET/pull/461/files#diff-6 (6)\nM src/React.sln\n   https://github.com/reactjs/React.NET/pull/461/files#diff-7 (7)\nM tests/React.Tests/React.Tests.csproj\n   https://github.com/reactjs/React.NET/pull/461/files#diff-8 (2)\n\nPatch Links:\n\nhttps://github.com/reactjs/React.NET/pull/461.patch\nhttps://github.com/reactjs/React.NET/pull/461.diff\n\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/reactjs/React.NET/pull/461, or mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AA5hFicrFlkkCNfxVGSvIoj4TgXjFJSzks5szNmfgaJpZM4QSK2d\n.\n. I'm closing issues for future tasks like this that aren't actively being worked on, but would be open to adding support for this!\n\n655. Line endings should be fixed now . This project is simple enough that it seems this isn\u2019t worth the effort. :) . Sorry this is late... We could do this but it seems like the code is fine as it is.. you can send a PR if you\u2019d like but it would be nice to get help in other areas too :) . Closing issues older than a year, please re-open if you think this is still relevant.. Closing issues older than a year, please re-open if you think this is still relevant.. We've added better support for re-throwing JS engine exceptions in the latest 4.0.0 rc.. Fixed. Ok @Daniel15 this is ready for review . @Daniel15 would you have time to take a look at this PR soon? Are you OK with the overall direction?. Thanks for the review, I'll push an update soon :) . @Daniel15 this should be good to go, want to give it another look?. I found the fix and will open another PR in just a minute..... :) . @optimatex I opened a PR here, hope it is helpful #479 . Closing because this question has been answered, please re-open if you'd like some more help \ud83d\ude04 . Are any scripts failing to load? It could be there are some errors if you check the console tab in Chrome Devtools that will be useful to debug this further. . Closing due to inactivity, please re-open if you'd like some more help.. Fixes #476. It sounds like you aren't referencing your component bundle first in your razor file, which is required for Html.ReactInitJavaScript to work.\nSomething like this in the body, before the init is called:\n<script src=\"./bundle.js\"></script>. Would you mind posting a code sample that demonstrates issue you're running into?\nThe order of the calls is important.  It should look something like this:\n```\n@Html.React(...)\n\n@Html.ReactInitJavaScript()\n```\nHere's an example. Try this instead:\n<body>\n    <script src=\"@Url.Content(\"~/public/main.js\")\"></script>        \n    @RenderBody()\n</body>\nNote that the script tag is placed before the call to ReactInitJavaScript.. Closing for now, please re-open if you'd like some more help.. It looks like this question is about React itself, not ReactJS.NET, which is a server-side rendering library for ASP.NET and React. I recommend checking out the excellent documentation here on how to get started: https://reactjs.org/tutorial/tutorial.html\n. Oh, looks like the tutorial wasn't updated to React 16. React.createClass has been deprecated. You can see the updated CoreMvc example here\nI can open a PR for updating the tutorial code.. I'm planning on opening a PR for this one without objection . A few things to check:\n\nDoes the error occur if you update to React 16 without updating React.NET? It works, but will throw a warning at runtime saying the server-render call is deprecated.\nTry disabling server-render and see if your component renders on the page. You can do so by passing clientOnly: true as an argument to the render call in your razor file. Hi there, I'm closing this issue due to inactivity. Please let us know if you'd like some more help.. From your example you are not returning a valid dom element- you are\nreturning the class \u2018Hello\u2019 which is an object. If you return a string or a\ndiv instead does the error go away?\nOn Thu, Nov 30, 2017 at 22:09, justinkauai notifications@github.com wrote:\n\n\nI am trying to use Typescript,Webpack3, and mvc4 with ReactJS.net.\nI get the following error using 3.4.1 and react15\nInvariant Violation: Element type is invalid: expected a string (for\nbuilt-in components) or a class/function (for composite components) but\ngot: object.\nHello.tsx\n`import * as React from \"react\";\nexport default class Hello extends React.Component {\nrender() {\nreturn (\nHello\n);\n}\n}`\nindex.tsx\n`module.exports = {\n// All the components you'd like to render server-side\nHello: require('./Hello').Hello\n};\nvar Components = require('expose-loader?Hello!./Hello');`\n.tsconfig\n{ \"compilerOptions\": { \"sourceMap\": true, \"noImplicitAny\": true, \"module\":\n\"commonjs\", \"target\": \"es5\", \"jsx\": \"react\" } }\n.webpack.config.ts\n`module.exports = {\nentry: \"./Scripts/app/src/index.tsx\",\noutput: {\nfilename: \"./Scripts/app/dist/bundle.js\"\n},\n// Enable sourcemaps for debugging webpack's output.\ndevtool: \"source-map\",\nresolve: {\n    // Allow require('./blah') to require blah.jsx\n    extensions: ['.tsx','.js', '.jsx']\n},\nmodule: {\n    loaders: [\n  // Transform JSX in .jsx files\n  { test: /.jsx$/, loader: 'jsx-loader?harmony' },\n         {\n             test: /.tsx?$/,\n             exclude: /(node_modules|bower_components)/,\n             loader: 'ts-loader'\n         }\n    ],\n},\n// When importing a module whose path matches one of the following, just\n// assume a corresponding global variable exists and use that instead.\n// This is important because it allows us to avoid bundling all of our\n// dependencies, which allows browsers to cache those libraries between builds.\nexternals: {\n    react: \"React\"\n},\n};`\nAny suggestions?? I have also tried 3.4.2 with react 16 and I get the\nfollowing error.\nTypeError: Object doesn't support property or method 'toLowerCase'\nAny suggestions would help, Thanks!!\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/reactjs/React.NET/issues/485, or mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AA5hFhXS0hIlGYJrC6QCH3ashSl5yEFrks5s75gkgaJpZM4Qx6Vb\n.\n. Also try using require('./Hello').default instead. Mixing common js syntax\nwith es6 default exports doesn\u2019t work without using a webpack plugin.\nOn Fri, Dec 1, 2017 at 07:44, Dustin Masters dustin@dustinsoftware.com\nwrote:\nFrom your example you are not returning a valid dom element- you are\nreturning the class \u2018Hello\u2019 which is an object. If you return a string or a\ndiv instead does the error go away?\nOn Thu, Nov 30, 2017 at 22:09, justinkauai notifications@github.com\nwrote:\n\nI am trying to use Typescript,Webpack3, and mvc4 with ReactJS.net.\nI get the following error using 3.4.1 and react15\nInvariant Violation: Element type is invalid: expected a string (for\nbuilt-in components) or a class/function (for composite components) but\ngot: object.\nHello.tsx\n`import * as React from \"react\";\nexport default class Hello extends React.Component {\nrender() {\nreturn (\nHello\n);\n}\n}`\nindex.tsx\n`module.exports = {\n// All the components you'd like to render server-side\nHello: require('./Hello').Hello\n};\nvar Components = require('expose-loader?Hello!./Hello');`\n.tsconfig\n{ \"compilerOptions\": { \"sourceMap\": true, \"noImplicitAny\": true,\n\"module\": \"commonjs\", \"target\": \"es5\", \"jsx\": \"react\" } }\n.webpack.config.ts\n`module.exports = {\nentry: \"./Scripts/app/src/index.tsx\",\noutput: {\nfilename: \"./Scripts/app/dist/bundle.js\"\n},\n// Enable sourcemaps for debugging webpack's output.\ndevtool: \"source-map\",\nresolve: {\n    // Allow require('./blah') to require blah.jsx\n    extensions: ['.tsx','.js', '.jsx']\n},\nmodule: {\n    loaders: [\n  // Transform JSX in .jsx files\n  { test: /.jsx$/, loader: 'jsx-loader?harmony' },\n         {\n             test: /.tsx?$/,\n             exclude: /(node_modules|bower_components)/,\n             loader: 'ts-loader'\n         }\n    ],\n},\n// When importing a module whose path matches one of the following, just\n// assume a corresponding global variable exists and use that instead.\n// This is important because it allows us to avoid bundling all of our\n// dependencies, which allows browsers to cache those libraries between builds.\nexternals: {\n    react: \"React\"\n},\n};`\nAny suggestions?? I have also tried 3.4.2 with react 16 and I get the\nfollowing error.\nTypeError: Object doesn't support property or method 'toLowerCase'\nAny suggestions would help, Thanks!!\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/reactjs/React.NET/issues/485, or mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AA5hFhXS0hIlGYJrC6QCH3ashSl5yEFrks5s75gkgaJpZM4Qx6Vb\n.\n\n\n. This behavior changed in #270. \n\nThere is discussion there - it was possible for engines not to be returned to the pool in some cases, which caused a fatal crash when all the engines are gone, so that change avoids the issue entirely. \nI suppose we could make this configurable but I\u2019m not sure there\u2019s much value encouraging this aside from your specific use case for sharing engine scope across multiple requests, as a render call now counts on side-effects from previous render calls. . Heh you are correct, I did typo earlier.\nTo make sure I am understanding your use case - are you suggesting to leverage the global JavaScript scope across multiple render calls as an alternative to passing  bunch of props at once in to a single render call? If so, would setting props in \u2018ViewBag\u2019 via a custom html helper extension, and then referencing those props in the final render call accomplish what you are after?\nSince render calls are supposed to be pure, I\u2019m not seeing how relying on previous render calls should be a pattern this library should recommend.\nMaybe a code sample or specific example would help aid this discussion along? . (Yes, I saw the mobx example above, is there a simpler use case without a state manager that we can use for this discussion?). Thanks for the gist, that was very helpful. I can see how registering data ahead of time would be useful. Longer response incoming. . Ok, so. Here's an approach that allows you to register data with Mobx ahead of any render calls, but doesn't rely on executing Javascript until a component needs to be rendered.\nRegistering data ahead of time from a razor file:\ncsharp\n@Html.ReactRegisterPreloadViewData(\"viewName\", new { a = 1, b = 2 })\nReact.NET would keep track of that data in a private dictionary for the scope of that request, waiting until a render call happens. You could call this helper from your existing MVC partials. Before a component SSR happens, a register function that you define is invoked, which passes any registered view data in as an argument.\n```js\nimport { viewDataStore } from './stores'\nfunction RegisterPreloadViewData(viewDatas) {\n  viewDataStore.init(); // remove any existing data from the current store, since JS engines get re-used, and your store could have been re-used\nfor (const viewData of viewDatas) {\n    viewDataStore.setViewData(viewData.viewName, viewData.data);\n  }\n}\n```\nSupport for this doesn't exist yet, but should be pretty simple to add, and avoids issues around acquiring a single JS engine from the shared pool for the lifetime of the request.\n  . Docs have been updated since this issue was opened, I think this is resolved now.. Hi there, would you mind providing a code sample for the render method in\nyour component?\nIf you disable server render by passing clientOnly: true to the React.NET\ncall in your razor file, does your component render?\nOn Fri, Dec 29, 2017 at 08:28, Saber Karmous notifications@github.com\nwrote:\n\nI'm having the same error right now. I tried 16.0 and 16.2.\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/reactjs/React.NET/issues/490#issuecomment-354467502,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AA5hFo700IC4YPhcF2HRUbiGuRzHMZMaks5tFRM9gaJpZM4RG7Vo\n.\n. Try using module.exports = yourComponent instead of export default syntax, just to isolate what could be going wrong. It's possible that a module is being imported as { default: (your react component) } someplace that still uses require instead of import. This babel plugin will handle the .default export for you automatically. \n\nThe React.NET webpack docs do need to be updated to use import instead of require, we'll get to updating that.. This is an interesting idea. Does on-the-fly compilation work with babel, similar to JSX? Were you interested in just the server-render pieces of this library?\n  . I think this a great idea! Unfortunately I don't think that's within the scope of this library, so I'm closing this issue, but it sounds like it would be relatively straight forward to fork babel compiler and server rendering logic! Let me know if you have questions about the internals or where to start for doing this.. Thanks for the suggestion. I'm not quite following how this is more simple than just one call to require('expose-loader?Components!./components'). As long as all of your components are available in that object, you should be good to go. Per the docs it looks like this webpack feature is intended for shipping libraries that need to run in multiple environments and isn't the best fit here.\n  . Hi there, it looks like this PR is getting stale and is unfortunately not mergeable as is. I'm going to close it, but feel free to revisit it in the future if you'd like!. lgtm. Yeah, it would be good if there was some better validation here. I've run into this before as well.. We added some better exception re-throwing in the latest 4.0.0 rc.. At the moment, this isn't possible. However, it looks like a custom handler can be provided per the docs here. If we were able to build up a list of styles and emit an inline style next to the inline script, then that sounds like it solves your use case.\nHtml.React(\"ComponentName\") => \n<style>\n.myStyle {\n}\n</style>\n<div id=\"react_randomid\">\n  <div class=\"myStyle\">Component contents</div>\n</div>\n<script>\n  ReactDOM.render(...)\n</script>\n(or something similar). After further thought, I think rendering the styles inside the container is the best approach here, as you suggested. I don't know that it would be feasible to add some global style handling logic to the library without a pretty significant restructuring of how rendering works. Sorry I don't have a better answer for you \ud83d\ude04 . @Daniel15 this is good to go, but I'd like another set of eyes to give it a quick look before it gets merged \ud83d\ude04 \n. Merging this so it doesn't get stale, let me know if needs modification before shipping. Tested on Mvc4 and CoreMvc.. I can check later, the prop already existed on the implementation but not\nthe interface.. don\u2019t remember seeing another one I could use\nOn Sun, Mar 4, 2018 at 18:59, Daniel Lo Nigro notifications@github.com\nwrote:\n\n@Daniel15 commented on this pull request.\nThanks. Sorry I never got to this, I think you sent it while I was on\nvacation.\n\nIn src/React.Core/IReactEnvironment.cs\nhttps://github.com/reactjs/React.NET/pull/496#discussion_r172081874:\n\n@@ -110,5 +109,10 @@ public interface IReactEnvironment\n      /// Returns the currently held JS engine to the pool. (no-op if engine pooling is disabled)\n      /// \n      void ReturnEngineToPool();\n+\n+     /// \n+     /// Gets the site-wide configuration.\n+     /// \n+     IReactSiteConfiguration Configuration { get; }\n\nIsn't there already a getter for this?\nReactSiteConfiguration.Configuration or .Current or something like that?\n\u2014\nYou are receiving this because you modified the open/close state.\nReply to this email directly, view it on GitHub\nhttps://github.com/reactjs/React.NET/pull/496#pullrequestreview-101038069,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AA5hFhWbsxbP6a5XAkSahhQRgTXl1l20ks5tbKnSgaJpZM4RdZap\n.\n. Merged. The MVC4 project targets the full ASP.NET MVC framework, as far as I can tell there is no good way to combine the NET Core version and NET Standard other than the way it is currently set up.. Merged. Fewer files changed.. plus LF is the default for * text=auto.\n\nMostly I just wanted the change to be as non-disruptive as possible :)\nOn Fri, Jan 19, 2018 at 23:07, Daniel Lo Nigro notifications@github.com\nwrote:\n\nThanks! I guess much of the mismatching in my code was from when I was\nusing a MacBook Pro as my work laptop, and switching between MacOS and\nWindows.\nWhy normalize with LF though, rather than CR+LF?\n\u2014\nYou are receiving this because you modified the open/close state.\nReply to this email directly, view it on GitHub\nhttps://github.com/reactjs/React.NET/pull/500#issuecomment-359151568,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AA5hFtVqLkevvAx7QQBvzFmrD0rUNk3vks5tMZDDgaJpZM4RlUVQ\n.\n. It looks like that wasn't considered in the original pull request.. I'll see if there's a way to preserve the original behavior with this work.. I got close but I don't have time to finish this one. Going to focus on making samples and documentation more accessible for now.. Thanks for the report. It would be good to retry automatically a few times when this happens.. This issue is pretty old and we've done a little work in this space, can you update to the latest rc to see if it is fixed?. Thanks for asking! Support for this has been implemented and should be\navailable in the next release. You can use the built DLLs from the build\nserver if you need this behavior today.\n\nOn Tue, Jan 30, 2018 at 13:40, Ian Craig notifications@github.com wrote:\n\nWhen using componentDidCatch and the ErrorBoundary pattern, I would expect\nto be able to handle JS exceptions in JS. However, these seem to bubble up\nto React.Net and throw in C# no matter what I do.\n\"Error while rendering \"CommentsBox\" to \"react_NcDXGhXrkmj56hcuuqRug\":\nTypeError: Unable to get property 'one' of undefined or null reference at\nrender (Script Document:257:13) at resolve\n(React.Core.Resources.react.generated.js:4273:6) at render\n(React.Core.Resources.react.generated.js:4373:8) at read\n(React.Core.Resources.react.generated.js:4349:8) at renderToString\n(React.Core.Resources.react.generated.js:4607:4) at Global code (Script\nDocument [3]:1:1) Line: 257 Column:13\"\nUsing the exact sample from\nReact.NET/src/React.Sample.CoreMvc/wwwroot/js/Sample.jsx\nhttps://github.com/reactjs/React.NET/blob/f408fa4bcada504618ccdda8c61c61e2dbb7ace6/src/React.Sample.CoreMvc/wwwroot/js/Sample.jsx\nWith the following in my .cshtml\n@React.Web.Mvc.HtmlHelperExtensions.React(Html, \"CommentsBox\", new { throwRenderError = true });\nWhen running the same code in a browser the ErrorBoundary catches\nexceptions correctly.\nIs there a recommended way of handling exceptions that I am missing?\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/reactjs/React.NET/issues/503, or mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AA5hFj2Sb2leUXapmeO_pOR3skvB-dM9ks5tP4w8gaJpZM4RzDf3\n.\n. Released in 3.3. Sample use is here. A few things to try. Does it break if you pick another JS engine like\nchakra core? Do you have the Visual C++ runtime installed?\n\nOn Thu, Feb 1, 2018 at 13:25, James Kraus notifications@github.com wrote:\n\nAfter following the directions on the ReactJS.NET site, I've been unable\nto get this to work. I've referenced a few threads here (e.g. #409\nhttps://github.com/reactjs/React.NET/issues/409), but wasn't able to\nresolve the issue.\nHere's the error:\n[image: image]\nhttps://user-images.githubusercontent.com/415057/35703709-0f928734-076b-11e8-87b0-2d262b8be33f.png\nClearScriptV8-64.dll is in the bin directory of the site.\nFWIW, here's Dependecy walker's view of ClearScriptV8-64.dll:\n[image: image]\nhttps://user-images.githubusercontent.com/415057/35703980-ecf75f3c-076b-11e8-9a44-35de47f6fcd8.png\nAny ideas what is wrong here?\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/reactjs/React.NET/issues/504, or mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AA5hFqM4NysxuoPazz6bJOO_WM-GabVqks5tQivAgaJpZM4R2TqV\n.\n. Hello! You will need to use a build tool like browserify or webpack to\nbundle your JS together. This tool would link together the dependencies for\nyou when looking at all the import and require statements referenced by\nyour code.\n\nOn Mon, Feb 5, 2018 at 00:13, Tony Hudson notifications@github.com wrote:\n\nIs there anyway that I can integrate with package like redux, react-redux.\nBecause I render from server side so how I can use import statement in jsx\nfile\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/reactjs/React.NET/issues/505, or mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AA5hFqPp35p2cO-adXB-S05wQi3e6f_Vks5tRrg_gaJpZM4R5DlX\n.\n. Hi @JohnBergman, the tutorial needs .NET Core 2.0 installed to run properly. A non-core sample is available here (there are more samples as well depending on what your needs are!). Hi @JohnBergman \n\nThere was a package error in the tutorial project that I just merged a fix for, please let me know if you're still having trouble.. I don't think that's possible with the included babel compiler - you can use webpack with your own babel presets, though. Here's an example\nWe could include a few babel popular babel presets if that would be useful to consumers.. Hi @nsivaji61 \nPlease try loading your component bundle either in a standalone Chrome page or Node instance, and verify that React is present on the global scope. If it's not, then it hasn't been exposed properly. You can take a look at the React.Sample.Router.CoreMvc project in this repo, it's probably the closest to your set up.\nFeel free to reply, but I'm going to close this issue since it doesn't seem to be a bug in the library.. Hi tony,\nAre you calling HTML.React() where you want your component to render?\nReactWithInit is used only at the very bottom of the page to initialize all\nof the rendered components.\nOn Mon, Feb 19, 2018 at 06:54, Tony Hudson notifications@github.com wrote:\n\nI have a question that I have already add\nconfig.AddScript(\"~/wwwroot/dist/login.js\"); in Starup\nhttps://github.com/Awesome-CMS-Core/Awesome-CMS-Core/blob/c2aa39486cd8f1452087661f31f0b4a817f3a69d/src/AwesomeCMSCore/AwesomeCMSCore/Extension/ApplicationBuilderExtensions.cs#L109\nAnd In my view\nhttps://github.com/Awesome-CMS-Core/Awesome-CMS-Core/blob/c2aa39486cd8f1452087661f31f0b4a817f3a69d/src/AwesomeCMSCore/Modules/AwesomeCMSCore.Modules.Admin/Views/Account/Login.cshtml\nI add @Html.ReactInitJavaScript() but seem like the web doesnt boost up\nfaster than I just add only script tag in the view.\nIs my config right ? If not am I missing something to make server side\nrender work as expected\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/reactjs/React.NET/issues/510, or mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AA5hFqWOU422JtgY0UhA4Q0TAKxWiIIXks5tWYs0gaJpZM4SKrDr\n.\n. @kwhjvdkamp thanks, would you mind linking to the source where the typo is, or submit a pull request?. Can't repro this on latest master, maybe it's already fixed.... Hi there, I'm not sure if React.MSBuild will work with binding redirects, you might have better luck using a webpack build step instead (see the samples in this repo). Unfortunately I don't have time right now to investigate support for this :/. Closing since this question has been answered, feel free to re-open if you'd like some more help.. I\u2019ll update the docs, thanks\nOn Wed, Oct 17, 2018 at 13:55, Stefan Saroiu notifications@github.com\nwrote:\nI'd like to re-open this issue. I have the exact same problem as @jadebayo\nhttps://github.com/jadebayo.\nAs per this conversation, there are two ways to fix this issue:\n1.\nAdd Newtonsoft.Json to the list of assemblies for which manual\n   redirect is resolved by overriding\n   `AppDomain.CurrentDomain.AssemblyResolve' (as per @Daniel15\n   https://github.com/Daniel15's comment above). I understand this is\n   brittle, but this hack is already present in the code, and it will fix this\n   problem (I checked).\n   2.\nIf the solution is to use webpack instead (as per @dustinsoftware\n   https://github.com/dustinsoftware's comment above), I'd suggest to\n   update the relevant documentation. As is, the documentation for\n   React.MSBuild is silent on webpack. Instead, when I follow the\n   documentation, my build fails due to this bug.\nReferences:\nhttps://reactjs.net/bundling/msbuild.html http://url\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/reactjs/React.NET/issues/512#issuecomment-430785788,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AA5hFuYdMslURmitlgE0l2iduEgxvHH_ks5ul5k8gaJpZM4SMXMm\n.\n. Also there isn\u2019t a reason we should be stuck to an old Json.Net version,\nI\u2019ll update that as well\nOn Wed, Oct 17, 2018 at 17:10, Dustin Masters dustin@dustinsoftware.com\nwrote:\nI\u2019ll update the docs, thanks\nOn Wed, Oct 17, 2018 at 13:55, Stefan Saroiu notifications@github.com\nwrote:\n\nI'd like to re-open this issue. I have the exact same problem as\n@jadebayo https://github.com/jadebayo.\nAs per this conversation, there are two ways to fix this issue:\n1.\nAdd Newtonsoft.Json to the list of assemblies for which manual\n   redirect is resolved by overriding\n   `AppDomain.CurrentDomain.AssemblyResolve' (as per @Daniel15\n   https://github.com/Daniel15's comment above). I understand this is\n   brittle, but this hack is already present in the code, and it will fix this\n   problem (I checked).\n   2.\nIf the solution is to use webpack instead (as per @dustinsoftware\n   https://github.com/dustinsoftware's comment above), I'd suggest to\n   update the relevant documentation. As is, the documentation for\n   React.MSBuild is silent on webpack. Instead, when I follow the\n   documentation, my build fails due to this bug.\nReferences:\nhttps://reactjs.net/bundling/msbuild.html http://url\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/reactjs/React.NET/issues/512#issuecomment-430785788,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AA5hFuYdMslURmitlgE0l2iduEgxvHH_ks5ul5k8gaJpZM4SMXMm\n.\n\n\n. I think we can bump the version of JSON.NET that is used internally to\navoid this problem. 9 is pretty old at this point.\n\nOn Wed, Jan 30, 2019 at 22:26, Kendall Bennett notifications@github.com\nwrote:\n\nI am trying to get the msbuild task working as well. I think the\nfundamental issue here is that the msbuild DLL is copied into the output\ndirectory as part of the reference to the project, when in reality what\nwould work better is for a working version of the DLL and dependent files\nto be located in a directory in the nuget package, and run from there\nrather than the developers bin directory? Running it from the bin directory\nis going to always lead to failures with incorrect DLL's.\nI think the msbuild task could be rebuild to work similarly to how the\nRazor Generator project does it, which is a project I also use that\ncompiles all the cshtml files in my project down to the .cs files, which\nare then compiled into the project. The source code is here:\nhttps://github.com/RazorGenerator/RazorGenerator/tree/master/RazorGenerator.MsBuild\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/reactjs/React.NET/issues/512#issuecomment-459231298,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AA5hFohICK6DecWIUvvxCOICUjazw6ogks5vIoykgaJpZM4SMXMm\n.\n. Ok, would you be able to send a pull request? I don\u2019t have time to\ninvestigate unfortunately :)\n\nOn Thu, Jan 31, 2019 at 11:35, Kendall Bennett notifications@github.com\nwrote:\n\nAs mentioned, the right solution is to deploy the build DLL into the nuget\ndirectory like they do with Razor Generator and run it from there. Then its\ndependencies are entirely it's own.\n\u2014\nYou are receiving this because you modified the open/close state.\nReply to this email directly, view it on GitHub\nhttps://github.com/reactjs/React.NET/issues/512#issuecomment-459476780,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AA5hFkqJiLGYfUxJyMww7L71I6_cbAjLks5vI0WbgaJpZM4SMXMm\n.\n. Yes, it does. I\u2019ll see if I can get a sample updated that uses redux.\n\nOn Wed, Feb 21, 2018 at 16:12, Sivaji Nalamothu notifications@github.com\nwrote:\n\nI wanted to create an application with react and redux store. Does\nReactjs.Net supports redux? If Yes can i have some documentation?\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/reactjs/React.NET/issues/513, or mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AA5hFnT2bNUeD1qiwP_7kSMRU5aj2cgUks5tXLDUgaJpZM4SOiqO\n.\n. So there isn't really anything special you have to do to get Redux to work. Here's a gist that demo's the basics of wiring it up: https://gist.github.com/dustinsoftware/320c3877e3d4cb96e468eb3ecab9367a#file-commentsbox-redux-jsx-L113-L125\n\n(The webpack sample in this repo will probably fail to run because I forgot to add in the necessary prop-types package when updating everything...I'll fix that)\nI didn't put any effort into wiring up dispatching actions and testing that flow, but the server-render works fine, and you can see the global store getting passed in to the top level component.\nIt might be worth having a sample checked into this repo that demonstrates Redux since it's commonly used in large applications.. Closing since this question is answered, please feel free to re-open if you'd like some more help! \ud83d\ude04 . This change makes the React.NET props more consistent with React Router. Previous use in our sample:\n<StaticRouter context={this.props.context} location={this.props.path}>\nIt is a trivial change for any current consumers of React.Router, and it's worth merging for better consistency.. Thanks gunnim. I think we should still stick with this change, passing down both may trigger prop-type warnings (such as forbidExtraProps), and migrating should be pretty painless. Since React Router support is pretty new the risk should be pretty low that someone will get blindsided by this change (it gets called out in the release notes). Hi @JohnBergman this is a library for rendering React components on ASP.NET and running JSX through Babel on the fly, I'm not sure how this applies to Cordova.. Are you trying to write a server-side app and have a thin client as described here?. This issue fell off my radar. Beyond the samples contained in this repo, I'm not sure this library supports your use case.. Yeah I also encountered that issue in a production deployment, and ended up\nswitching to Chakra to work around the problem. Disabling JS engine re-use\nwill add some additional latency to your page render times so I\u2019d recommend\nagainst that if you can use another JS engine.\nDustin\nOn Wed, Mar 7, 2018 at 07:16, Sam Magura notifications@github.com wrote:\n\nWe've been using server-side rendering in production for around 9 months\nnow, and it works.\nThe one problem we have had is when deploying to an Azure web app via Web\nDeploy. About 75% of the time, it worked correctly. The other 25% of the\ntime, V8 would throw an exception on about 1 out of every 3 page renders.\nFull exception is below.\nJavaScriptEngineSwitcher.Core.JsRuntimeException: RangeError: Maximum call stack size exceeded ---> Microsoft.ClearScript.ScriptEngineException: RangeError: Maximum call stack size exceeded\n   at V8Exception.ThrowScriptEngineException(V8Exception* )\n   at Microsoft.ClearScript.V8.V8ContextProxyImpl.Execute(String gcDocumentName, String gcCode, Boolean evaluate, Boolean discard)\n   at Microsoft.ClearScript.V8.V8ScriptEngine.<>c__DisplayClass63_0.b__0()\n   at Microsoft.ClearScript.ScriptEngine.ScriptInvokeT\n   at Microsoft.ClearScript.V8.V8ScriptEngine.<>c__DisplayClass68_01.<ScriptInvoke>b__0()\n   at Microsoft.ClearScript.V8.?A0x792c8756.LockCallback(Void* pvArg)\n   at Microsoft.ClearScript.V8.V8ContextProxyImpl.InvokeWithLock(Action gcAction)\n   at Microsoft.ClearScript.V8.V8ScriptEngine.ScriptInvoke[T](Func1 func)\n   at Microsoft.ClearScript.V8.V8ScriptEngine.Execute(String documentName, String code, Boolean evaluate, Boolean discard)\n   at JavaScriptEngineSwitcher.V8.V8JsEngine.InnerEvaluate(String expression, String documentName)\n   --- End of inner exception stack trace ---\n   at JavaScriptEngineSwitcher.V8.V8JsEngine.InnerEvaluate(String expression, String documentName)\n   at JavaScriptEngineSwitcher.V8.V8JsEngine.InnerEvaluateT\n   at JavaScriptEngineSwitcher.V8.V8JsEngine.InnerEvaluateT\n   at JavaScriptEngineSwitcher.V8.V8JsEngine.InnerHasVariable(String variableName)\n   at JavaScriptEngineSwitcher.Core.JsEngineBase.HasVariable(String variableName)\n   at React.ReactEnvironment.EnsureUserScriptsLoaded()\n   at React.ReactEnvironment.CreateComponentT\n   at React.Web.Mvc.HtmlHelperExtensions.ReactT\nI have never gotten this exception in development, so I am pretty sure it\nnot a problem with my code. Also, I was able to fix it by restarting the\nAzure web app.\nAll of this made me suspect that reusing JavaScript engines was the\nculprit. I now have setReuseJavaScriptEngines(false) in my config and\nhave deployed to Azure ~10 times without any exceptions.\nI've mentioned this in the comments to issue #444\nhttps://github.com/reactjs/React.NET/issues/444, but I felt this was\nworth its own issue. Not a show-stopping bug, but something that should be\nfixed before server-side rendering can be officially deemed\nproduction-ready.\nPackage.config at the time when the above stacktrace occurred:\n\n\n\n\n\n\n\n\n\n\n\n\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/reactjs/React.NET/issues/516, or mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AA5hFpzUhzQ_4DIimNU5GNcrqafqlg2aks5tb_lfgaJpZM4Sgn0q\n.\n. Closing since this question has been answered, feel free to re-open if you'd like some more help.. Do you have any assembly binding redirects in your config file? If not, you\ncould try adding one to work around the problem.\n\nOn Wed, Mar 14, 2018 at 07:28, Florian Koch notifications@github.com\nwrote:\n\nI'm currently trying to use React.NET Core to enable my minimal webserver\nimplementation to deliver a react app. I don't use ASP or any other web\nframework.\nI initialized everything as recommended in #178\nhttps://github.com/reactjs/React.NET/issues/178, but the container is\nunable to resolve the ReactEnvironment when accessing\nReactEnvironment.Current, because React.JavaScriptEngineFactory can't be\nresolved, either. Exception is:\nSystem.IO.FileLoadException: Could not load file or assembly\n'JavaScriptEngineSwitcher.Core, Version=2.4.0.0, Culture=neutral,\nPublicKeyToken=c608b2a8cc9e4472' or one of its dependencies. The located\nassembly's manifest definition does not match the assembly reference.\n(Exception from HRESULT: 0x80131040)\nMy packages.config:\n\n\n\n\n\n\n\n\n\n\n\n\nThe project is compiled as dll and dynamically loaded by another service.\nHowever, there aren't any other libraries loaded that depend on any of the\nNuGets I use.\nWhat am I doing wrong?\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/reactjs/React.NET/issues/517, or mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AA5hFlDwT_-P30e3RRDw_6ImM6qlvcJMks5teSkmgaJpZM4SqiI0\n.\n. A breaking change may have been made in a later version. On my phone so\ncan\u2019t look right now. Try adding a binding redirect for the version that\nreact.net wants just to see if it works.\nOn Wed, Mar 14, 2018 at 07:43, Florian Koch notifications@github.com\nwrote:\nI don't really get how the dependencies of these libs work. I checked the\ndependencies of all the NuGets that got installed with React.Core and they\nall list \"JavaScriptEngineSwitcher.Core (>= 2.4.10)\", except for JSPool\nwhich has \"JavaScriptEngineSwitcher.Core (>= 2.4.9)\".The installed version\nof JavaScriptEngineSwitcher.Core is 2.4.9, too. My guess was, that i just\nhave to update it to 2.4.10, but when I do this, I can't even load my DLL\nanymore (ReflectionTypLoadException)\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/reactjs/React.NET/issues/517#issuecomment-373046076,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AA5hFtFfC-SpA27uRuwFj_AILEMTq2_8ks5teSySgaJpZM4SqiI0\n.\n. There are samples in this repo, have you looked at those yet?\n\nOn Sat, Mar 17, 2018 at 11:12, Kasper notifications@github.com wrote:\n\nIs it possible to get a working example (possibly a github repo) of a\nsimple ASP.NET MVC site, including React and React Router? No matter what\nI do I end up with the following in the console \"Text content did not\nmatch. Server: \"X\" Client: \"XX\"\", when refreshing on a new url which is not\nthe home \"/\" url\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/reactjs/React.NET/issues/519, or mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AA5hFsR8KXfDojYtMBs7IcVqwjsCInu0ks5tfVImgaJpZM4Su6AM\n.\n. There are more samples in the src directory\nOn Sat, Mar 17, 2018 at 11:30, Kasper notifications@github.com wrote:\n@dustinsoftware https://github.com/dustinsoftware - Yes I have but\nsadly there is only the one under \"tutorial-code\" - which seems to be for\nASP.NET Core - right?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/reactjs/React.NET/issues/519#issuecomment-373942245,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AA5hFlLpgNA-4vkSpO7jNHIgobrIF3pZks5tfVY_gaJpZM4Su6AM\n.\n. Router support is pretty new. I'd like to get the docs updated and some of\nthe samples unified but we're not there yet.\n\nThe only sample we have that has Router support is\nReact.Sample.Router.CoreMvc. It would be trivial to port that example to\nfull ASP.NET (just use some kind of wildcard route and pass the path down\nto the component).\nOn Sat, Mar 17, 2018 at 11:41 AM Kasper notifications@github.com wrote:\n\nFurthermore do I have to pass current url down via prop like this @Html.ReactRouter(\"Routing\",\nnew { path = Request.RawUrl }) it seem to work, but can't seem to find\nany documentation on that?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/reactjs/React.NET/issues/519#issuecomment-373943023,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AA5hFtaL2xHu7OpjFgNbGXYybv1licFoks5tfVjcgaJpZM4Su6AM\n.\n. Closing since this question has been answered, feel free to re-open if you'd like some more help \ud83d\ude04 . Thanks for reporting this bug.\n\nOn Thu, Mar 22, 2018 at 05:18, igorroch notifications@github.com wrote:\n\nThere is a console error when we try to render component with parameter\nclientOnly: true\nreact-dom.development.js:894 Warning: Expected server HTML to contain a\nmatching\nin\n.\n@Html.React(\"ReactWorld\", new { name = \"World\" } ,clientOnly: true )\nMinimal repo to reproduce: https://github.com/igorroch/demo\nhttps://stackoverflow.com/questions/46443652/react-16-warning-expected-server-html-to-contain-a-matching-div-in-body\nsays that \"If your application is not ssr, please use ReactDOM.render to\nstart\"\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/reactjs/React.NET/issues/521, or mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AA5hFrADg0MKBs2ISSOBZE9r3aeWZ318ks5tg5aCgaJpZM4S28dg\n.\n. Hi @suhailnaw \ud83d\udc4b let me know if you'd like some help on this one! If you don't have time either let me know and I'll take care of it.. Per the React docs, hydrate should be called on a component that has been server rendered. When server-render is skipped, calling render is appropriate.\n\nAdd ClientOnly as a property to ReactComponent. When ReactEnvironment.CreateComponent is called, ClientOnly needs to be set:\nhttps://github.com/reactjs/React.NET/blob/86115d784f64872c01c8faa3a9786be811b6dad3/src/React.Core/ReactEnvironment.cs#L305-L309\nWhen RenderJavaScript is called in ReactComponent, ClientOnly should be checked. If true, ReactDOM.render should be written to the script instead of ReactDOM.hydrate.\nhttps://github.com/reactjs/React.NET/blob/86115d784f64872c01c8faa3a9786be811b6dad3/src/React.Core/ReactComponent.cs#L234-L241\nLet's make sure to add a unit test for this as well. Here's an example one you can duplicate:\nhttps://github.com/reactjs/React.NET/blob/d49bb119d0b596389f5d2747202f72147af95210/tests/React.Tests/Core/ReactComponentTest.cs#L197-L214. Fixed. Thanks for starting this conversation. It looks like there are a few breaking changes (like making component disposable), which could be a problem. This PR is also quite large, it would be better to split up optimization\u2019s into smaller PRs so we can discuss each change :) \nOtherwise as is it\u2019s going to be a bit before we can work through this one. . When you\u2019re ready, please open some smaller pull requests so that we can\nreview and merge those changes individually :)\nOn Wed, Mar 28, 2018 at 12:08, Daniil Sokolyuk notifications@github.com\nwrote:\n\n@Daniel15 https://github.com/Daniel15, @dustinsoftware\nhttps://github.com/dustinsoftware what about this PR? I have already\nsplit this request and prepared the\nsecond part\nhttps://github.com/DaniilSokolyuk/React.NET/tree/avoid-memory-allocations-part2\nWe are already using these changes and significantly reduced the hits in\nLOH and FullGC\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/reactjs/React.NET/pull/522#issuecomment-377001291,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AA5hFmwUqVYqIUKtOtV4BGc4NSQPnk2dks5ti9-OgaJpZM4S5xkt\n.\n. > previous ID generating is ugly\n\nThere may be consuming code that depends on the current ID format, so this isn't a good reason to change it. We unfortunately don't know how consumers are using this project and want to avoid surprises between version updates.. That\u2019s not the point I was trying to make... I am hesitant to merge in changes for minor improvements that are technically breaking changes. \nThe discussion on this PR is getting too long, please open a new one for each individual change (such as ones the bulleted list above) and we can discuss them one at a time :). You'll need to use webpack and create a component bundle before you import modules from npm. Here's an example project. Let me know if you need more help (please upload your source code to github, it will help us diagnose the problem faster! \ud83d\ude04 ). Here you go: https://github.com/reactjs/React.NET/tree/master/src/React.Sample.Webpack.CoreMvc\n@Anandks1993 . Hmm...a few things to try.\n\nAre you trying to do async work outside of componentDidMount? If so, does the crash continue if you move the work to this method so it doesn't run during the server render?\nDoes the component crash if you just use promises? \nIs regeneratorRuntime defined on the global scope? You can check this by throwing an Error manually: throw new Error(typeof regeneratorRuntime). Have you tried using webpack? It\u2019s possible the on the fly Babel\ncompilation won\u2019t work with what you\u2019re trying to do right now.\nOn Sat, Apr 7, 2018 at 14:41, S. Francis notifications@github.com wrote:\n\n\nAre you trying to do async work outside of componentDidMount? If so, does\nthe crash continue if you move the work to this method so it doesn't run\nduring the server render?\nNo. The react lifecycle events are where any setup would take place.\nHowever, any async method must be decorated with the async keyword, which,\nof course, is the source of the error upon transpilation. And to be clear,\nthe error is occurring server-side.\nDoes the component crash if you just use promises?\nObviously, it would if any setup wasn't tucked away in an event lifecycle\nmethod, given that Promise is part of the window global.\nIs regeneratorRuntime defined on the global scope?\nI'm AddScript referencing the facebook runtime directly in the startup\nfile.\nMy guess is that babel preset React.NET uses requires additional plugin\nreferences to work with the facebook runtime . The myriad of babel\npresets/plugins is not exactly a straight forward exercise to figure out.\nAnd the documentation on how to change up the React.NET babel configuration\nis not exactly clear. It works fine by default for es6 stuff, but es7 and\nbeyond appears to present a problem.\nThanx for the response, tho...\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/reactjs/React.NET/issues/525#issuecomment-379501228,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AA5hFuQtNaF6_MacFG5gF0z3muSSaCocks5tmTKZgaJpZM4TC2jk\n.\n. There might be a way to make this work with ReactJS.NET but I don't have the time to investigate this right now. If you need to use Regenerator then you'll probably need to use webpack.. Great idea! . Execution might be deferred here until all the scripts have loaded. You could test this theory by doing something like this inside of Comment.jsx\n\n```jsx\nrender() {\n  let debugComponents = JSON.stringify([typeof CommentForm, typeof CommentList, typeof CommentBox]);\nreturn {debugComponents};\n}\n```\nLook at the server and client rendered output (you can disable script loading in your browser or use CURL to see just the server output). If you see undefined in the output at all, then the script ordering does matter.. Tested on React.Sample.Mvc4 and React.Sample.Router.CoreMvc \u2705 . This PR is getting stale and right now there isn't a strong need to merge it in. If there's something we're missing let me know and we can continue the discussion! \ud83d\ude04 . Looks like this is intentional - we won't be able to change this in the source code without breaking existing projects. \nhttps://github.com/reactjs/React.NET/blob/5f5f65d88c194d7c50e71ff8cb6d4a8e06b48aea/src/React.Core/ReactSiteConfiguration.cs#L43-L46\nHowever, in ASP.NET core projects, that behavior is overridden:\nhttps://github.com/reactjs/React.NET/blob/3c086e5454271d1030afa800df9dd123e2d300d6/src/React.AspNet.Middleware/ReactBuilderExtensions.cs#L52-L54.. Ok! I got around to testing this and it looks good. However, I'd like to get some more concrete benchmarks documented before merging this in. ~~On my workstation there was no noticeable speed or GC improvements with this change, but I'm unsure if the component and props are so small with my sample that it doesn't show.~~ Edit: Yes, that was the problem. I tested on an object with 10,000 keys and saw a 50% reduction in allocated strings, see results below.\nHere the tool I put together, based on BenchmarkDotNet... feel free to suggest a better code sample I can use to show the benefits of this change. I'll do some more testing and see what I can find out. My goal is to add this benchmark tool to this project so we can find other improvements in the render pipeline.. Before this change:\n``` ini\nBenchmarkDotNet=v0.10.14, OS=Windows 10.0.16299.371 (1709/FallCreatorsUpdate/Redstone3)\nIntel Core i5-4570 CPU 3.20GHz (Haswell), 1 CPU, 4 logical and 4 physical cores\nFrequency=3117782 Hz, Resolution=320.7408 ns, Timer=TSC\n  [Host]     : .NET Framework 4.7 (CLR 4.0.30319.42000), 64bit RyuJIT-v4.7.2633.0\n  DefaultJob : .NET Framework 4.7 (CLR 4.0.30319.42000), 64bit RyuJIT-v4.7.2633.0\n```\n|                      Method |     Mean |     Error |    StdDev |    Gen 0 |   Gen 1 | Allocated |\n|---------------------------- |---------:|----------:|----------:|---------:|--------:|----------:|\n|  HtmlHelperExtensions_React | 50.56 ms | 0.4835 ms | 0.4286 ms | 250.0000 | 62.5000 |  13.22 MB |\n| Environment_CreateComponent | 47.62 ms | 0.4689 ms | 0.4386 ms | 250.0000 | 62.5000 |   9.78 MB |\nAfter:\n``` ini\nBenchmarkDotNet=v0.10.14, OS=Windows 10.0.16299.371 (1709/FallCreatorsUpdate/Redstone3)\nIntel Core i5-4570 CPU 3.20GHz (Haswell), 1 CPU, 4 logical and 4 physical cores\nFrequency=3117782 Hz, Resolution=320.7408 ns, Timer=TSC\n  [Host]     : .NET Framework 4.7 (CLR 4.0.30319.42000), 64bit RyuJIT-v4.7.2633.0\n  DefaultJob : .NET Framework 4.7 (CLR 4.0.30319.42000), 64bit RyuJIT-v4.7.2633.0\n```\n|                      Method |     Mean |     Error |    StdDev |    Gen 0 |    Gen 1 | Allocated |\n|---------------------------- |---------:|----------:|----------:|---------:|---------:|----------:|\n|  HtmlHelperExtensions_React | 46.21 ms | 0.6098 ms | 0.5704 ms | 250.0000 | 125.0000 |   7.46 MB |\n| Environment_CreateComponent | 46.74 ms | 0.5432 ms | 0.5081 ms | 250.0000 | 125.0000 |   9.18 MB |\n. @DaniilSokolyuk this has shipped in 3.4!. Yeah, you'll probably need to wrap the children in a div, as noted above. . I'm closing issues for future work like this that aren't actively being worked on, but would be open to adding support for this!\n655. This is done, except for Owin, (which could use its own documentation page). Thanks for the PR. Please check the build failures by clicking the red X on the latest commit. Once the build passes let me know and I\u2019ll give it some review :). Hi there @suhailnaw, do you have time to continue with this PR? If not I'll finish it up and merge it in.. Looks good at a first glance. Need to pull down and test locally before merging. . I had to bump React to a version higher than 16.0 to get the bug to repro. Thanks for the PR!. @suhailnaw this has shipped, here are the release notes https://reactjs.net/2018/06/3.4.0-release.html. I just noticed after merging this that the .NET Core docs didn't get updated at all... will need to port these changes over.. Hmm. Have you tried using Html.ReactWithInit so that the component markup and script tag is rendered in one method call? That sounds like it will avoid the caching problem you're having.. Hi there! What you're after is best accomplished by using webpack to roll all of your component files into a single bundle. There is a sample here demonstrating how this works. . Typically this error appears if React, ReactDOM, or ReactDOMServer is missing on the global scope and your app is rolling React + your components into a bundle, and then loading the bundle into React.NET.\nAre you using webpack? How are you registering your components with React.NET? . Thanks @Taritsyn! I'll update the docs.. Ooh, netlify support in PR's? \ud83e\udd24 . Sorry, I can't help you here - this is a better question to ask on stackoverflow. This issue tracker is intended for bugs with React.NET itself. You can try setting some break points and disabling server-side render to help debug the problem, if you are using React.NET.. Thanks!! This might also be a good time to remove the references to Vroom, Chakra, etc from React.Core, and have users register their own JS engines. . I\u2019ll see if I can repro with 16.4.1. Thanks for reporting the issue. . I believe your issue is related to #555 , I'll post updates there . Discussion moved to #555 . There are samples in this repo that use .net core 2.0, have you looked at those yet? There is also a tutorial for .net core but it may need updating. . I believe your issue is related to #555 . Can you use react and react-dom 16.4.0 to see if the issue goes away? . I was able to repro this issue with webpack 4. Try downgrading to webpack 3 and see if you're still having problems. \nI'm still investigating but want to rule out changes within webpack itself.. The webpack 4 issue I thought I was encountering was a red herring, webpack 4 changed the default destination to dist so my changes weren't going to the right folder like I thought they were :) One thing I didn't ask earlier, are you using Windows or another platform?. Thanks @WonSong. I'll look at this in the next few days. . Haven\u2019t had time to look at this one yet. Details about your environment\nwould be helpful\nCan you paste your packages.config in this issue? What version of asp.net\nand .net framework are you on? 32 bit or 64 bit process?\nOn Fri, Jul 20, 2018 at 12:52, Slava Knyazev notifications@github.com\nwrote:\n\nI have wasted a lot of time struggling with this. Is there an ETA?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/reactjs/React.NET/issues/554#issuecomment-406709482,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AA5hFgGlxDMJj3idtx7Rarr0z-GNNqqDks5uIjT8gaJpZM4Uub8F\n.\n. Glad you found another solution that fits your needs.\nOn Fri, Jul 20, 2018 at 14:08, Slava Knyazev notifications@github.com\nwrote:\nI no longer have a project using it. The general buginess and\nunreliability of it made me switch away.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/reactjs/React.NET/issues/554#issuecomment-406727539,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AA5hFpPtir7llBnHBe0M7XidPYHGFeY3ks5uIkbggaJpZM4Uub8F\n.\n. Sorry, that response may have come across as terse. I intend to debug this problem but can\u2019t do so without detailed information about the environment this library runs in, since the bug hasn\u2019t occurred when I have attempted to repro it. . Ok, so here's what I did to try and repro the issue (no luck). Please let me know if I am missing something. .NET Core 2.1 on OS X.\n\n\nCloned your repo\nyarn to restore packages\nyarn start to run webpack\ndotnet run to start the dev server\nOpened the browser, saw components render successfully\nMade a component render change in Hello.tsx\nObserve that the server-rendered change worked when reloading the window. Thanks that is very helpful. I\u2019ll take a closer look. This may be a JSPool\nspecific issue, could you tell me what version is getting used? It is a\ndownstream package also you may need to look at the project lock file.\nOn Fri, Aug 10, 2018 at 07:38, LinusCenterstrom notifications@github.com\nwrote:\n\n\nHaving the same issue here, turning off re-use fixed it for me too (I'm\nrunning version 3.2 on aspnet core 2.1).\nBeen running it in a Mvc 4 app for a long time without seeing this issue\n(exact same configuration and bundle), so it seems to be core-specific.\nI've temporarily turned off re-use of the rendering engine when running\nlocally and I would recommend anyone else to do the same as a workaround\nuntil this is fixed.\nLet me know if you need anymore information to identify the problem.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/reactjs/React.NET/issues/554#issuecomment-412102185,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AA5hFqDTE6chyj7xUrsPJxUqzfLwYkaCks5uPZrWgaJpZM4Uub8F\n.\n. Ok I've finally nailed down a repro. Digging further. . Please update to 3.4.1 and let me know if the issue is resolved. @WonSong @knyzorg @LinusCenterstrom @benjamn . I ran out of time to investigate this today, I'll pick it up again in a few days if someone doesn't get to it first. I wanted to repro the issue with the master branch of react since it looks like some recent changes have been made in the scheduler. . You need to pin to 16.4.0 or add the shim to your scripts. I\u2019ll work on\nadding a shim to the library itself but it might take a few days for me to\nget to it. The patch to react itself was merged but won\u2019t be available\nuntil the next release.\n\nDustin\nOn Sat, Jun 23, 2018 at 19:42, John Bell notifications@github.com wrote:\n\n@dustinsoftware https://github.com/dustinsoftware When will this be\nreleased via Nuget? Or do i have to build from source now?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/reactjs/React.NET/issues/555#issuecomment-399724553,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AA5hFnk-aAySoHTUcaAytMc_YxO-9odzks5t_vylgaJpZM4Uumti\n.\n. @Neuroforge do you only see this error when adding Video.js? Are you bundling react with webpack or using the built in react version?. @torabian I'm not sure what you're asking. create-react-app is a generator for new applications, this project is a library for ASP.NET and .NET Core projects.. @tavisca-prathod that sounds a lot like #555, please try pinning react and react-dom to 16.4.0 until we can ship a fix on our end, or until React itself ships a new version . We don't have plans to add support for this, but a PR would be accepted though!. Hi there, we won\u2019t be able to help much without knowing what the error is. It the library crashes during server render, you could update state in componentDidMount to make the component visible only during client render. . Done. Considering the bump to 16.4.1 totally broke this library, I agree with having more tests before adding green keeper :). @Daniel15 looks like I don't have permissions to enable Greenkeeper on this repo, would you mind taking a look?. We should update the webpack samples before merging this. . Updating to React 16.4 breaks at least one JS engine that is loaded by default (VroomJsEngine). Need to audit the samples and fix any failures before merging.. I think we should just retire the engine specific logic in react.core,\nthere is a PR that did exactly that which just needs a bit of polish before\nwe can merge it.\nOn Mon, Jul 23, 2018 at 08:55, Andrey Taritsyn notifications@github.com\nwrote:\n@dustinsoftware https://github.com/dustinsoftware The VroomJs library\nuses a very old version of V8. Version 3.17.16.2 was released more than 5\nyears ago (April 11, 2013).\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/reactjs/React.NET/pull/568#issuecomment-407107889,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AA5hFgNrcyVaeNssI-gAiyEof_D-XjvTks5uJfH6gaJpZM4VIoYk\n.\n. Fixed in fe72ea9ca18793fea75282f0514e969384853d5e. Argh, this should have been a squash. Oh well. Thanks :) . What JS engine are you using? I think the default fallback engine (internet\nexplorer) does not support Map, which is an ES2015 language features. Check\nout the docs for switching to chakra core or v8, it\u2019s possible you are\nmissing a runtime dependency such as VC2015 which is preventing the V8 DLLs\nfrom loading.\nOn Mon, Jul 16, 2018 at 02:59, rkjeevakumar notifications@github.com\nwrote:\nI am trying to setup asp.net core project with server-side rendering\nconcept using react components(Hybrid way).\nI can't use third party libraries in server-side rendering.\nfor example, https://reactstrap.github.io/ http://url library throws\nthis error.\n\"React.Exceptions.ReactScriptLoadException: Error while loading\n\"~dist/server.bundle.js\": Script Document [2]: Uncaught ReferenceError: Map\nis not defined at line: 2880 column: 69. Line: 2880\"\nI attached the relevant screenshots here. please check this. Did I miss\nanything ?\nerror:\n[image: error]\nhttps://user-images.githubusercontent.com/8487243/42752492-a6347666-8920-11e8-8b64-1e0a6e1c4365.PNG\npackage file:\n[image: package file]\nhttps://user-images.githubusercontent.com/8487243/42752487-a558433a-8920-11e8-9e96-edf8302c993f.PNG\nserver-side component call in home view\n[image: server-side component call in home view]\nhttps://user-images.githubusercontent.com/8487243/42752489-a59163a4-8920-11e8-9bbc-094417728f30.PNG\nstartup file register\n[image: startup file register]\nhttps://user-images.githubusercontent.com/8487243/42752490-a5c5a4ac-8920-11e8-8b24-849f56a7a1b9.PNG\nwebpack config\n[image: webpack config]\nhttps://user-images.githubusercontent.com/8487243/42752491-a5fca308-8920-11e8-8457-c3e22a48934b.PNG\nexpose-loader\n[image: expose-loader]\nhttps://user-images.githubusercontent.com/8487243/42752493-a66759c8-8920-11e8-9a25-cc26ff5b0b06.PNG\nmapping of server-side rendering\n[image: mapping of server-side rendering]\nhttps://user-images.githubusercontent.com/8487243/42752495-a69ff670-8920-11e8-85b5-ecf9a1999284.PNG\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/reactjs/React.NET/issues/572, or mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AA5hFnLH3CEQxhbPhMY2WRrG-oTZ7H_8ks5uHGP6gaJpZM4VQ2s0\n.\n. You can check out the samples in this repo, they should all be working. At this point it doesn\u2019t seem like this is a library bug so I\u2019m closing this issue.. let me know if you have trouble getting the samples to run. . Correct. You can disable the re-usable engine behavior though in your\nstartup config with .SetReuseJavascriptEngines(false).\n\nThe library assumes that components do not have side effects in either the\nconstructor or render, so that is why it re-uses the loaded JavaScript\nbetween requests.\nDustin\nOn Mon, Jul 23, 2018 at 07:31, Slava Knyazev notifications@github.com\nwrote:\n\nCSHTML:\n\n    @Html.React(\"Components.Test\", new { }, serverOnly: false)\n\n\n\n@Html.ReactInitJavaScript()\nTest Component:\n@observer\nexport class Test extends React.Component {\n    constructor(props) {\n        super(props)\n        store.number++;\n    }\n    render() {\n        return {store.number}\n    }\n}\nMobX stuff:\nclass ChartDataStore {\n    @observable number = 0;\n}\nconst store = new ChartDataStore();\nIssue\nWhen the test component is rendered, I expect it to output the number 1\nevery time because on each page load, the mobx state should not be kept.\nThe actual result is after every few page loads the number increments. At\nfirst it is 1, then it is 2, then 3, and so on.\nThe issue is only present on server-side, client-side is not affected.\nThe issue is also present between different pages (i.e. two pages which\nrender the Test component end up sharing the mobx state).\nI speculate that whatever system is being used to render the React is\nusing the same page for all components and never resets it.\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/reactjs/React.NET/issues/573, or mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AA5hFrS_jd0YeYjcr_rHXoHW-1WgT2a9ks5uJd5WgaJpZM4VbGmE\n.\n. Thanks @Taritsyn. I tested this before merging, not sure how I did not see this error. Will do some digging later to see what happened.. I'll see if we can get a simple test added that doesn't require Browserstack or Selenium for the server-rendering pipeline. The React.Sample.CoreMvc project ran fine before this fix, but the React.Sample.Router.CoreMvc sample did not (which depends on a bundled copy of React).\n\nI confirmed that @Taritsyn's fix works with the router sample.. I\u2019m curious what node APIs JSDOM relies on that aren\u2019t part of the ES2015\nspec.. you can\u2019t use node right now as a backend although that would be an\ninteresting experiment! (You can use v8 directly already)\nOn Fri, Jul 27, 2018 at 07:41, Slava Knyazev notifications@github.com\nwrote:\n\nI am interested in pre-rendering some D3.js charts which have a hard\ndependency on WHATWG specifics such as document.querySelector.\nJSDOM seems to be the recommended approach to work with D3 on the back-end\nbut requires a node environment while React.NET seems to offer some other\nkind of environment.\nIs there something which could be done?\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/reactjs/React.NET/issues/575, or mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AA5hFuBvv_WPnyONI4KMxd3C8Ya8Wu6Uks5uKyaegaJpZM4VjnfY\n.\n. We don\u2019t have bindings to run node in the same process right now. You can\nuse v8, but some APIs will be missing.\nOn Fri, Jul 27, 2018 at 14:48, Slava Knyazev notifications@github.com\nwrote:\nWhat is the advantage of chakra over node, in theory?\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/reactjs/React.NET/issues/575#issuecomment-408546989,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AA5hFlFu0iiwXgnpxN1XgoBtB5isMcpXks5uK4qogaJpZM4VjnfY\n.\n. Closing since the question has been answered. . I\u2019m not sure, I\u2019ve never tried it. This library already supports importing ES modules with webpack, so you could give it a try and see if it works :). @Daniel15 got some simple server-render tests added. Any other integration test cases you think we should test for? . You probably are missing a script tag that references your component. \n\n\u201c\u201d. Try not using Babelbundle and see if you still get an error. Are there any other errors in the console? Any errors loading scripts in the network tab (404)? That might help pin down what\u2019s going on. . Tested on both OS X and Windows. @Daniel15 can you cut a release with this fix?. That thought occurred to me as well. It seems like JSPool should either\nassert that the path is well formatted (no forward slashes on windows or\nbackslashes on non-Windows), or attempt to normalize it (which could hide\nbugs). If the former is straight forward to do then that would probably be\nbetter.\nOn Mon, Aug 13, 2018 at 22:07, Daniel Lo Nigro notifications@github.com\nwrote:\n\nPreparing this for release now. Just cherry-picking into the stable branch\nand verifying that everything is OK.\nI wonder if JSPool should normalize the path itself, too. What do you\nthink @dustinsoftware https://github.com/dustinsoftware?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/reactjs/React.NET/pull/580#issuecomment-412755848,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AA5hFm5-i7WgfDElPbzjyv6GwnuCG8h8ks5uQlr2gaJpZM4V5Z3g\n.\n. Ugh.. cassette does not seem to work with .NET 4.5. Going to roll back those changes (should be minor). Tested all the samples, they pass. This should be ready for review.. @Daniel15 can you give this a quick look? I've tested it but it's technically a breaking change (suitable for a 4.x release) since JS engines are no longer registered automatically.\n\ncc @Taritsyn . Thanks for the feedback.  I pushed an update to exception logging. Changing the way the default JS engine is selected seemed out of scope for this PR and I'm not quite sure yet if a web project would need default JS engine separately from the built-in handling in JsEngineSwitcher. As long as jsEngineSwitcher.DefaultEngineName is set, this library won't try to use another engine even if it has been registered.\nSo with that in mind, I'll merge after the build passes.. Hmm that\u2019s a new one. are you sure you weren\u2019t seeing that behavior on the\nversion you were on before? What version was it working for you on?\nOn Tue, Aug 14, 2018 at 22:16, mchound notifications@github.com wrote:\n\nUsing 3.4.1 and it's working fine on my local machine, but when I deploy\nto a azure webapp, I see weird behavior.\nAt first, it's all ok, but after a couple of renders on the server I'm\nstarting to get the component rendered with props from previous requests.\nIt seems to work when I set SetReuseJavaScriptEngines(false) in the\nconfiguration, but I shouldn't need that, right?\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/reactjs/React.NET/issues/583, or mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AA5hFpmla37-g0VsxhoQDbSbBJI51jlMks5uQ66_gaJpZM4V9k6s\n.\n. Sorry for the previous comment, I mistakenly thought this was another thread. Can you share a link to a repo that demos this bug and a link to your azure website? . Closing for lack of additional data, I can't repro this one... Do the styles appear after the client render completes?\nOn Sat, Aug 18, 2018 at 15:48, DudeM29 notifications@github.com wrote:\nI am trying to use react jss in my server side rendring app but it seem\nthe css is not being attached to the page\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/reactjs/React.NET/issues/584, or mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AA5hFgcBioc2cRvZvAspxJSWruCRDaSoks5uSJnQgaJpZM4WCwEy\n.\n. Hi there. Sounds like you want to use this function:\n\nstring outputJs = ReactEnvironment.Current.Babel.Transform(inputJs)\nGiven an arbitrary string, it will interpret it as JS and output ES5-compatible JS, depending on how you have babel configured.. merged a fix. Thanks!! Docs updates are always appreciated. \ud83c\udf7b . Sure! Use the UMD build of a library like reactstrap. Webpack shouldn't be needed for this.\nhttps://github.com/reactstrap/reactstrap#example\n. Hi there. The best place to look would be the tutorial, which describes how to load in a custom script. Remarkable is used as an example, but it should work with any UMD library (such as reactstrap)\nhttps://reactjs.net/getting-started/tutorial.html#optimization-server-side-rendering\nReactstrap is hosted on cdnjs. Download a copy and add it to your app's content directory, and then modify ReactConfig\nhttps://cdnjs.com/libraries/reactstrap\nHow could we update the docs to make this more clear? Would having a dedicated section to \"adding third party modules\" be helpful?. I haven\u2019t forgotten about this, just have spent my recent evenings and\nweekends doing home remodel work :) I should have time this weekend\nOn Wed, Aug 29, 2018 at 14:35, Miles Rausch notifications@github.com\nwrote:\n\nI'd be interested in seeing this feature added. The first thing I did on\nmy latest React.net project was to explore CSS-in-JS options and soon ran\ninto issues (and then #538\nhttps://github.com/reactjs/React.NET/issues/538 's explanation).\nI'll see if I can find some time to test with my preferred styling library.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/reactjs/React.NET/pull/589#issuecomment-417113849,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AA5hFr4vAbNqnmg4dtN0gEE2JdP1Xc2Wks5uVwkjgaJpZM4WMQiL\n.\n. I restructured how the render helper functions got passed around and moved them into an interface and some helper classes. This PR demos using both styled components and react router in the same project with these new helpers, and allows new ones to be added either inside this library or by third parties easily. . This has been in production for about a week on one of my team's projects and has worked well. I'm going to push up some method documentation, add some tests, and then merge it. I'd like to get some docs pages added as well detailing how to use this feature but that might come after this PR is merged.. TODO before merge:\n\n\n[x] Add tests\n[ ] Reorganize samples to have pages for just React router, styled components, and combining the two\n[x] Add some documentation. Opening a separate PR to update the samples. #591 was merged. Docs updates! Thanks!. Cool! I\u2019ll try to look at this in the next few days\n\nOn Wed, Aug 29, 2018 at 13:22, Andrey Taritsyn notifications@github.com\nwrote:\n\nSince version 3.X Beta the following modules of the JavaScript Engine\nSwitcher support a script pre-compilation: JavaScriptEngineSwitcher.Msie\n(only in the Chakra JsRT modes), JavaScriptEngineSwitcher.V8,\nJavaScriptEngineSwitcher.Jurassic, JavaScriptEngineSwitcher.Jint and\nJavaScriptEngineSwitcher.ChakraCore. This feature allows you to once\npre-compile the script and many times use it for initialization of engine\ninstances. Due the fact that the pre-compiled script does not require\nparsing, you can significantly speed up the initialization of engines.\nThis PR adds this feature to the ReactJS.NET library. Pre-compilation is\nenabled by using the AllowJavaScriptPrecompilation property (default false).\nAlso, pre-compilation requires the using of the caching provider is\ndifferent from the NullCache type.\n\nYou can view, comment on, or merge this pull request online at:\nhttps://github.com/reactjs/React.NET/pull/592\nCommit Summary\n\nAdd ability to pre-compile scripts\n\nFile Changes\n\nM src/React.Core/IReactSiteConfiguration.cs\n   https://github.com/reactjs/React.NET/pull/592/files#diff-0 (12)\nM src/React.Core/JavaScriptEngineFactory.cs\n   https://github.com/reactjs/React.NET/pull/592/files#diff-1 (43)\nM src/React.Core/JavaScriptEngineUtils.cs\n   https://github.com/reactjs/React.NET/pull/592/files#diff-2 (161)\nM src/React.Core/React.Core.csproj\n   https://github.com/reactjs/React.NET/pull/592/files#diff-3 (2)\nM src/React.Core/ReactEnvironment.cs\n   https://github.com/reactjs/React.NET/pull/592/files#diff-4 (24)\nM src/React.Core/ReactSiteConfiguration.cs\n   https://github.com/reactjs/React.NET/pull/592/files#diff-5 (14)\nM src/React.Sample.Cassette/React.Sample.Cassette.csproj\n   https://github.com/reactjs/React.NET/pull/592/files#diff-6 (4)\nM src/React.Sample.Cassette/packages.config\n   https://github.com/reactjs/React.NET/pull/592/files#diff-7 (4)\nM src/React.Sample.ConsoleApp/React.Sample.ConsoleApp.csproj\n   https://github.com/reactjs/React.NET/pull/592/files#diff-8 (8)\nM src/React.Sample.CoreMvc/React.Sample.CoreMvc.csproj\n   https://github.com/reactjs/React.NET/pull/592/files#diff-9 (8)\nM src/React.Sample.CoreMvc/Startup.cs\n   https://github.com/reactjs/React.NET/pull/592/files#diff-10 (1)\nM src/React.Sample.Mvc4/App_Start/ReactConfig.cs\n   https://github.com/reactjs/React.NET/pull/592/files#diff-11 (1)\nM src/React.Sample.Mvc4/React.Sample.Mvc4.csproj\n   https://github.com/reactjs/React.NET/pull/592/files#diff-12 (15)\nM src/React.Sample.Mvc4/packages.config\n   https://github.com/reactjs/React.NET/pull/592/files#diff-13 (7)\nM src/React.Sample.Owin/React.Sample.Owin.csproj\n   https://github.com/reactjs/React.NET/pull/592/files#diff-14 (4)\nM\n   src/React.Sample.Router.CoreMvc/React.Sample.Router.CoreMvc.csproj\n   https://github.com/reactjs/React.NET/pull/592/files#diff-15 (10)\nM src/React.Sample.Webpack/App_Start/ReactConfig.cs\n   https://github.com/reactjs/React.NET/pull/592/files#diff-16 (1)\nM src/React.Sample.Webpack/React.Sample.Webpack.csproj\n   https://github.com/reactjs/React.NET/pull/592/files#diff-17 (12)\nM src/React.Sample.Webpack/packages.config\n   https://github.com/reactjs/React.NET/pull/592/files#diff-18 (6)\nM src/React.sln\n   https://github.com/reactjs/React.NET/pull/592/files#diff-19 (6)\nM tests/React.Tests.Benchmarks/React.Tests.Benchmarks.csproj\n   https://github.com/reactjs/React.NET/pull/592/files#diff-20 (4)\nM tests/React.Tests.Integration/React.Tests.Integration.csproj\n   https://github.com/reactjs/React.NET/pull/592/files#diff-21 (22)\nM tests/React.Tests.Integration/ServerRenderTests.cs\n   https://github.com/reactjs/React.NET/pull/592/files#diff-22 (68)\nM tests/React.Tests/Core/JavaScriptEngineFactoryTest.cs\n   https://github.com/reactjs/React.NET/pull/592/files#diff-23 (267)\n\nPatch Links:\n\nhttps://github.com/reactjs/React.NET/pull/592.patch\nhttps://github.com/reactjs/React.NET/pull/592.diff\n\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/reactjs/React.NET/pull/592, or mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AA5hFvpt3GlKek5LVfamUp8uLZYICrvTks5uVvf7gaJpZM4WSQw5\n.\n. The benchmarks run fine on OS X but crash on Windows only when script precompilation is enabled. Going to investigate this further... This is concerning - it looks like within benchmarkdotnet, enabling script precompilation while using InProcessToolchain causes the entire process to die. Not sure why this would be limited to chakracore.... Yeah, the memory file cache is for tests only. I can add a comment to that\nfile to make that clearer.\nOn Sat, Sep 15, 2018 at 12:32, Daniel Lo Nigro notifications@github.com\nwrote:\n@Daniel15 commented on this pull request.\nThis looks pretty good to me!\nIn src/React.Core/JavaScriptEngineUtils.cs\nhttps://github.com/reactjs/React.NET/pull/592#discussion_r217893482:\n\n\nif (!engine.SupportsScriptPrecompilation)\n{\nTrace.WriteLine(string.Format(\"The {0} version {1} does not support the script pre-compilation.\",\nengine.Name, engine.Version));\nreturn false;\n}\n+\nif (cache is NullCache)\n{\nTrace.WriteLine(\"Usage of script pre-compilation without caching does not make sense.\");\nreturn false;\n}\n+\nreturn true;\n}\n+\n\n\nIt'd be good to put all this code into a separate file (eg.\nJavaScriptPrecompilation.cs) to keep things organized.\n\nIn src/React.Core/ReactSiteConfiguration.cs\nhttps://github.com/reactjs/React.NET/pull/592#discussion_r217893506:\n\n    /// </summary>\n\n\npublic bool AllowMsieEngine { get; set; }\npublic bool AllowJavaScriptPrecompilation { get; set; }\n\n\nThis is a breaking change (removing a field from the public API) so we\nneed to ensure we do a major version bump for this. However, I think we are\nalready bumping the major version due to using the latest beta\nJavaScriptEngineSwitcher, so it should be fine.\n\nIn tests/React.Tests.Common/MemoryFileCacheCore.cs\nhttps://github.com/reactjs/React.NET/pull/592#discussion_r217893550:\n\n\n{\n_cache.Remove(key);\nreturn;\n}\n+\nvar options = new MemoryCacheEntryOptions\n{\nSlidingExpiration = slidingExpiration,\n};\n+\n_cache.Set(key, data, options);\n}\n}\n+}\n+\n+#endif\n\n\nIs this code specific to tests?\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/reactjs/React.NET/pull/592#pullrequestreview-155722999,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AA5hFoLRhkfY0APDWdDsFXmpz_6n0tCtks5ubVXdgaJpZM4WSQw5\n.\n. \ud83d\ude80 Works great for .JS files (AddScriptWithoutTransform), however I discovered that it does not work at all for files that Babel has to process (AddScript). It would be very cool if that was supported, but if that's not straight forward to do before merge, we'll need to add a comment indicating this behavior.\n\nBenchmarks for AddScriptWithoutTransform:\n``` ini\nBenchmarkDotNet=v0.10.14, OS=macOS High Sierra 10.13.6 (17G65) [Darwin 17.7.0]\nIntel Core i7-4980HQ CPU 2.80GHz (Haswell), 1 CPU, 8 logical and 4 physical cores\n.NET Core SDK=2.0.0\n  [Host]     : .NET Core 2.0.0 (CoreCLR 4.6.00001.0, CoreFX 4.6.25519.03), 64bit RyuJIT\n  DefaultJob : .NET Core 2.0.0 (CoreCLR 4.6.00001.0, CoreFX 4.6.25519.03), 64bit RyuJIT\n```\n|                      Method | withPrecompilation |     Mean |     Error |    StdDev |   Gen 0 | Allocated |\n|---------------------------- |------------------- |---------:|----------:|----------:|--------:|----------:|\n| Environment_CreateComponent |              False | 48.49 ms | 0.3031 ms | 0.2687 ms | 62.5000 |   1.54 MB |\n| Environment_CreateComponent |               True | 41.63 ms | 0.2408 ms | 0.2134 ms | 62.5000 |   1.27 MB |\n. Also is there any reason not to enable this by default?. Normally I'd do a squash but in this case the individual commits are pretty clean. Thanks so much!! I'm going to wrap up the styled components work and then we can cut a release. . Try using a different engine, like v8 or chakra core. The tutorial docs on\nthe website will show you how to do this.\nOn Fri, Aug 31, 2018 at 23:33, jyotidhyani notifications@github.com wrote:\n\nHi,\nI want to implement Server Side Rendering with my own version of React. I\nhave set LoadReact to false, and added react files.\n[image: capture1]\nhttps://user-images.githubusercontent.com/25761962/44943117-904b5080-adde-11e8-91b1-fbde59c0627a.JPG\nI am getting the error - 'Set' is undefined in react-dom.js at line 9279\n[image: image]\nhttps://user-images.githubusercontent.com/25761962/44943133-f6d06e80-adde-11e8-99dd-154c55c79da3.png\nAny help would be appreciated! Thanks.\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/reactjs/React.NET/issues/593, or mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AA5hFpZI6E6m8AuajWdQdGt1BJJE2_88ks5uWipDgaJpZM4WWGcq\n.\n. This would be very cool, let's keep this issue open for adding support.. I'm closing issues for future work like this that aren't actively being worked on, but would be open to adding support for this!\n\n655. Redis caching isn\u2019t build into this library as far as I\u2019m aware so I don\u2019t\nknow if this is related. There is a fair amount of caching in this library\nand it assumes that the cache is not shared between machines. How are you\nconfiguring your app to use the Redis cache?\nOn Fri, Sep 14, 2018 at 04:29, athinorama notifications@github.com wrote:\n\nWhile i was trying the sample code form reactjs.net i came across the\nfollowing problem\nWhen i run the code form my pc everything runs well\nbut when i try the same code from an other pc i have the following problem\n[image: download]\nhttps://user-images.githubusercontent.com/6605338/45547522-b7b40b80-b829-11e8-9be9-e067d8dd2916.png\nIt tries to locate the files on the path from the first pc.\nAfter a few search i realized that Redis somehow caches the absolute path\nfrom the first pc\nwhen i flush the database it runs ok (only for the pc that runs the code\nfirst)\nShall i set any file or path exception? or is it a bug\nKind regards!\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/reactjs/React.NET/issues/595, or mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AA5hFoKV4EVjyf4AjnTUSjQNdT7GPal2ks5ua5MQgaJpZM4WpGsI\n.\n. If you need react updates urgently, you can disable LoadReact and provide\nyour own copy :) I hope we can get to publishing an update soon but can\u2019t\nguarantee it.\nOn Wed, Sep 19, 2018 at 23:48, ridhisood notifications@github.com wrote:\nHi, even I have been looking over in this issue, and will need React 16.3\nnuget package on urgent basis. Thank you.\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/reactjs/React.NET/issues/596#issuecomment-423060561,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AA5hFv60uprXFDn26q7K_v7RvIEI8tCzks5uczolgaJpZM4Wr8bI\n.\n. Merged in fe72ea9ca18793fea75282f0514e969384853d5e. Will release shortly.. This is available in 4.0.0-beta5. Have you looked at the mvc4 sample in this repo?\nOn Tue, Sep 18, 2018 at 20:20, kojakangas notifications@github.com wrote:\nWhen trying to use the @Html.React helper method, I get the following\nerror:\nError CS0119 'HtmlHelperExtensions.React(HtmlHelper, string, T, string,\nstring, bool, bool, string, Action)' is a\nmethod, which is not valid in the given context ReactExamplePractice\nD:\\ReactExProject\\ReactExamplePractice\\ReactExamplePractice\\Views\\Shared_Layout.cshtml\nGranted, I am writing in a layout file, deviating slightly from the\ntutorial, but I wouldn't think that would matter. I am following the\ntutorial here:\nhttps://reactjs.net/getting-started/tutorial_aspnet4.html\nI have a Stack Overflow on this, and I've tried digging through what\nrenders HTML helpers, and can't find anything valid that would help me\nhere. I've tried ensuring that references such as System.Web.Optimization\nwas being used, along with React.Web.Mvc, etc.\nAm I actually missing something? Or can something be updated per the\naspnet4 tutorial? Does anyone have a working example of THIS tutorial\n(rather than the ASP.NET Core) tutorial that I can actually compare with\nto be sure it isn't something that I did wrong?\nIs there perhaps a code break or something to also be aware of? I was able\nto follow the asp.net MVC 4 tutorial up to the very last optimization\nsection with success after fixing some mistakes I made. Here, though, I\nfeel I am stuck. I CAN use the tutorial source code to run the ASP.NET\nCORE tutorial, even though I am trying to follow that one and find that\nafter following a suggestion to alter my Startup.cs file per @ShikiGami\nhttps://github.com/ShikiGami.\nCan anyone tell me what I'm doing wrong??? I'm willing to provide my whole\nproject for review if needed.\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/reactjs/React.NET/issues/599, or mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AA5hFuiD8n6mdrKGATADrVWvhrpeezeQks5ucbgHgaJpZM4WvVsD\n.\n. Can you give this project a look?\nhttps://github.com/reactjs/React.NET/tree/master/src/React.Sample.Mvc4\nOn Wed, Sep 19, 2018 at 04:57, kojakangas notifications@github.com wrote:\nHi Dustin,\nNo? It looks like the tutorial-code was written with ASP.NET Core in\nmind. Is there really a way I can compare? If it means anything, I'm using\nVisual Studio 2017. I know this site has said that the coding experience\nwould be similar in 2017, but I'm still not convinced. Where's the first\nplace to start in comparison here?\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/reactjs/React.NET/issues/599#issuecomment-422774337,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AA5hFkm0wBeWw8_2YZJ3uhD6xff1HKc3ks5ucjEvgaJpZM4WvVsD\n.\n. Thanks so much for reporting this. I updated the tutorial in 5fc0b5129e7526a32a2c427b65eb882115cc6d19 so others don't get confused as well. \n. > One potential solution I can think of is to update HttpContextLifetimeProvider to handle the case when there's no current request, and just use transient instances (create a new instance on every call) in that case. We'd need to test and ensure there's no memory leaks though.\n\nI like this, let's keep this issue open until we add support for this.. I'm closing issues for future tasks like this that aren't actively being worked on, but would be open to adding support for this!\n655. Thanks for reporting, I\u2019ll give this a look\nOn Thu, Sep 27, 2018 at 18:48, nightblade9 notifications@github.com wrote:\n\n@DemiMarie https://github.com/DemiMarie no, I haven't figured out any\nwork-around yet. I tried installing the .NET Core 2.0 SDK, hoping Visual\nStudio would use that instead, but it doesn't; I get a compile-time error\nwhen I downgrade my project to 2.0, about some library that's .NET Core\n2.1, but not referenced in NuGet etc.\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/reactjs/React.NET/issues/601#issuecomment-425294759,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AA5hFkXRSGA3DMDelPijyo4xSSU9HHE9ks5ufYAEgaJpZM4W46OX\n.\n. I just tried to update one of the samples to .NET Core 2.1 and had no problems.. \n\nCan you give this sample a look? I don't have time right now to investigate further. https://github.com/reactjs/React.NET/blob/master/src/React.Sample.CoreMvc/React.Sample.CoreMvc.csproj. @DaniilSokolyuk is correct, returning an instance of IServiceProvider is necessary. I'm not sure why this is the case, and it appears the docs are out of date. We may need to change how we're building a service provider since all the .NET Core docs indicate that ConfigureServices have no return value.. Huh, looks like the problem is resolved by removing the EnsureServicesRegistered check in ReactBuilderExtensions. I'll do a little bit more testing to ensure we can remove it safely.. This has been fixed in the latest release of ReactJS.NET.. My mistake, hadn't pushed the fix yet. Will go out with the next release. . Soon I hope :) You can clone this repo and build from source if you need this today. Hey @awayken sorry, this fell off my radar. Yeah, please re-open it. . I see a number of grammar related changes that don't seem like an improvement, could you share why some of the previous wording was confusing? . Ok :)\nOn Mon, Nov 26, 2018 at 08:00, Miles Rausch notifications@github.com\nwrote:\n\nClosed #603 https://github.com/reactjs/React.NET/pull/603.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/reactjs/React.NET/pull/603#event-1987176706, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AA5hFk8ZSjWVSxgB_ytks4rBumG2Q2fvks5uzBASgaJpZM4XMLEy\n.\n. Great feedback, I\u2019ll look into this.\nOn Fri, Oct 12, 2018 at 02:49, Allan Kimmer Jensen notifications@github.com\nwrote:\nWould be nice if the example, showed how to use\nhttps://github.com/nfl/react-helmet with the server side rendering.\nThis would allow users to see how to update meta tags, microdata (JSON-LD)\nect.\nShould be similar to the way CSS-In-JS works, with a ViewBag that's\nrendered out. But maybe a default helper would be nice, as it's used by a\nlot of people.\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/reactjs/React.NET/issues/605, or mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AA5hFvQf5pfchbGCPJ6G2ruydGvT58ZGks5ukGWbgaJpZM4XZJtD\n.\n. There is a PR opened on this repo to add support for this.\nOn Sat, Oct 27, 2018 at 04:32, Pavel Poberezhnyi notifications@github.com\nwrote:\n@Saturate https://github.com/Saturate +1 for such issue. I have been\nusing both react-helmet and React.NET for a year but didn't manage to\nfind to use it on SSR. I have also opened an issue on react-helmet repo\nbut no answer.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/reactjs/React.NET/issues/605#issuecomment-433612765,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AA5hFh72TTwI1HE5WiQr-P39nBgFKomjks5upEQ6gaJpZM4XZJtD\n.\n. This is shipped in 4.0.0-beta5.. Unfortunately no, what you described is not possible without hacks :)\nOn Fri, Oct 12, 2018 at 23:40, Gustav Ton\u00e9r notifications@github.com\nwrote:\nWe've run into the issue where we want to wrap some html in a component.\nThe easiest example would probably be something that collapses on click:\n\nHello world!\nThe CollapseOnClickComponent would wrap any children passed to it and\nhide/show them on click.\nThis works fine in \"normal\" React and WITHIN the components I use with\nReact.NET but what if the children come from my Razor view?\nWhat if I have something like this:\n\n   @Html.RenderBody()\nSure, I could do something hacky like serialize Html.RenderBody() to a raw\nstring and pass it as a prop and use dangerouslySetInnerHTML. But what if\nHtml.RenderBody() uses other views with other React.NET components that\nneeds hydrate and so on?\nIt would be awesome if you could use children in a React like way with\nReact.NET too!\nAm I making any sense? :) Is this something that is even remotely possible?\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/reactjs/React.NET/issues/607, or mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AA5hFtsjOP39s787ww_Uz0CWO1eXOS_Aks5ukYregaJpZM4XafD2\n.\n. A few challenges to overcome:\n- Razor and JSX use different parsing libraries\n- React doesn't handle child nodes that it doesn't own very well. Even if a placeholder div is rendered, you have to be very careful that the node doesn't get destroyed during reconcoliation.. I don't see a feasible way to implement this. Closing for now.. Yep, I also need to finish updating the docs for the CSS in JS support (and\nadd some for react router)\nOn Sun, Oct 14, 2018 at 12:15, Daniel Lo Nigro notifications@github.com\nwrote:\n\nWait for JavaScriptEngineSwitcher 3.0 to be released as a stable\n   version (currently just an RC)\nWrite a blog post with all the changes\n\ncc @dustinsoftware https://github.com/dustinsoftware\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/reactjs/React.NET/issues/609, or mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AA5hFtXdTdsazX1IrNMhc0KWebF3hpAfks5uk404gaJpZM4XbSG7\n.\n. I'm ready to release ReactJS.NET 4.0 as soon as @Taritsyn promotes JS engine switcher from being a release candidate :) . I'm unsure if I'll get to it either, but here's the major changes to cover in blog post:\n\n\nCSS-in-JS supported. Docs\nReact Helmet supported. Docs\nLots of fixes\nMIT licensed\nReact 16.7.0 bundled\nUpdated to JavaScriptEngineSwitcher 3.0, including script precompilation. JS engines no longer automatically registered. Getting started pages for NetFx and NetCore updated to reflect this change.. Just published the Nuget packages now for 4.0, but will hold off making a blog post until this weekend . 7e6623dfabf3b970f369cc8df538e30adc441dde. There is a getting started page that may be helpful here.. would you mind trying to build one of the sample projects in this repo? Those show how to set up ReactJS.NET correctly.. Haha thanks, we use m_ at work all the time so that slipped through here..\n\nOn Fri, Oct 26, 2018 at 22:04, Daniel Lo Nigro notifications@github.com\nwrote:\n\n@Daniel15 commented on this pull request.\nThis looks pretty good to me!\nIn src/React.Core/RenderFunctionsBase.cs\nhttps://github.com/reactjs/React.NET/pull/615#discussion_r228701593:\n\n{\n\n\nprivate readonly RenderFunctions m_renderFunctions;\nprivate readonly IRenderFunctions m_renderFunctions;\n\n\nNit: Rename this to renderFunctions. I use an underscore prefix, not m.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/reactjs/React.NET/pull/615#pullrequestreview-169043942,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AA5hFskBuK1ryCOWwnYZbsDCChwLCfAvks5uo-lMgaJpZM4Xy2Mj\n.\n. Unless you have a specific need to use the ASP.NET stack mixed with Javascript, I recommend using Next.js. This project exists mainly as a bridge between ASP.NET and React, which don't normally work well together.. Not sure what's going on here. The Nuget package is published and available for 3.4.1. Have you tried installing it with dotnet add package?. You may not have a Babel plug-in enabled that transforms \u201cimport\u201d. Try\nusing \u201crequire\u201d instead.\nOn Tue, Oct 30, 2018 at 02:53, unwired4ever notifications@github.com\nwrote:\nI have a javascript file 'math.js' that exports a simple function and\nvariable:\n// Scripts/lib/math.js\nexport function sum(x, y) {\n    return x + y;\n}\nexport var pi = 3.141593;\nThen in an another file 'Index.jsx' I have these lines to import the\nfunction and variable from 'math.js':\n//Scripts/Index.jsx\nimport * as math from \"lib/math\";\nconsole.log(\"2\u03c0 = \" + math.sum(math.pi, math.pi));\nIn the BundleConfig class 'Index.jsx' is added to a BabelBundle:\n    public static void RegisterBundles(BundleCollection bundles)\n    {\n        bundles.Add(new BabelBundle(\"~/bundles/main\").Include(\n                \"~/Scripts/Index.jsx\"\n            ));\n        BundleTable.EnableOptimizations = true;\n    }\n\nAnd in the view 'Index.cshtml' the bundle is rendered:\n<!DOCTYPE html>\n\n\nHello React\n\n\n\n\n    @Scripts.Render(\"~/bundles/main\")\n\n\nBut when I run the application in Firefox it gives following javascript\nerror:\nSyntaxError: import declarations may only appear at top level of a module\nThe content of the bundles javascript file looks like this:\n/ Minification failed. Returning unminified contents.\n(2,8-9): run-time error JS1332: Expected \"from\": \n(2,8-9): run-time error JS1333: Expected string literal: \n(2,7): run-time error JS1004: Expected ';'\n(2,8-9): run-time error JS1195: Expected expression: \n(2,12): run-time error JS1004: Expected ';'\n(2,17): run-time error JS1004: Expected ';'\n(2,22): run-time error JS1004: Expected ';'\n(2,1-7): run-time error JS1328: Import statement must include module name:\nimport\n*/\n// app.js\nimport * as math from \"lib/math\";\nconsole.log(\"2\u03c0 = \" + math.sum(math.pi, math.pi));\nIt seems that the Babel transpiling has failed for some reason.\nAny idea what is going wrong?\nThanks!\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/reactjs/React.NET/issues/620, or mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AA5hFvQtuqEfFyW6GVM5qIGNZ2-8tie1ks5uqCGlgaJpZM4YBjMd\n.\n. Generally third party libraries don\u2019t need to be transpired. In case they\ndo though, you will need to download the library and host it yourself so\nBabel can transpire it (or use webpack and Babel-loader)\nOn Tue, Oct 30, 2018 at 07:33, unwired4ever notifications@github.com\nwrote:\nOk thx, I may try that.\nBut what about third-party libraries that are using 'import' such as\noffice ui fabric react?\nIs there any way to configure the BabelBundle that can transpile that\nspecific syntax?\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/reactjs/React.NET/issues/620#issuecomment-434324070,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AA5hFvP1asA191iJbx__n2HLyRtDQ_nEks5uqGMpgaJpZM4YBjMd\n.\n. Transpile*\nOn Tue, Oct 30, 2018 at 07:45, Dustin Masters dustin@dustinsoftware.com\nwrote:\nGenerally third party libraries don\u2019t need to be transpired. In case they\ndo though, you will need to download the library and host it yourself so\nBabel can transpire it (or use webpack and Babel-loader)\nOn Tue, Oct 30, 2018 at 07:33, unwired4ever notifications@github.com\nwrote:\n\nOk thx, I may try that.\nBut what about third-party libraries that are using 'import' such as\noffice ui fabric react?\nIs there any way to configure the BabelBundle that can transpile that\nspecific syntax?\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/reactjs/React.NET/issues/620#issuecomment-434324070,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AA5hFvP1asA191iJbx__n2HLyRtDQ_nEks5uqGMpgaJpZM4YBjMd\n.\n\n\n. There is a lot of cleanup to do, but I pushed up a working prototype here. Obviously it's ready for production, right?  \ud83e\udd14 \n\nhttps://github.com/dustinsoftware/React.NET/tree/react-loadable\nI'll be pushing progress to that branch and do some testing with that approach.. I'll re-open this when I'm focused on finishing react-loadable support. It mostly works, but isn't ready to be merged in yet (needs more polish!)\nIf anyone has any interest, please comment on this issue :) \n655 . In the react site configuration, use SetScriptNonceProvider. We should add\nsome docs and update the example for this. Provide a func that returns a\ncryptographically random string.\nOn Mon, Nov 5, 2018 at 06:32, Allan Kimmer Jensen notifications@github.com\nwrote:\n\nI'm looking to implement a Content Security Policy\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/CSP on a site using\nReact.NET.\nI need to add a nonce attribute to the script tag, so that I can\nwhitelist it.\nWhat I want is the output to be something like this:\n\n    ReactDOM.render(\n        React.createElement(App, {......}, null),\n        document.getElementById('root')\n    );\n\nIn the current verison (even the beta), I can't see how I should achieve\nthis, but something like this would be a great solution for me:\nHtml.ReactInitJavaScript({ nonce: \"cmVhY3QtbW91bnQtdGFn\" })\nAm I missing something obvious, or could this be implemented?\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/reactjs/React.NET/issues/623, or mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AA5hFlDDYfjGX-2TArSj7fSYyenvG98Vks5usEwWgaJpZM4YOjwp\n.\n. Hi there, can you look at the sample code we have in this repo for webpack?\nIt should be up to date with .net Core.\nOn Sat, Nov 10, 2018 at 16:46, Taerarenai notifications@github.com wrote:\nI've been trying for the past days to add ReactJS.NET to my existing\nNetCore2 app with a LOT of errors.\nFirst i've tried the tutorial, got lots of errors such as \"ReactJS.NET is\nnot initialized properly....\" even tho' i followed the steps by the book.\nAfter a few searches i've looked at the MVCCore sample and modified my\ncode accordingly, but now i am getting a different error.\nnpm run webpack runs without any errors. While im trying to load the page\nwith react, the react apps dont load throwing an error such as React.Exceptions.ReactServerRenderingException:\nError while rendering \"RootComponent\" to \"react_0HLI7BKUVRVS1\": Invariant\nViolation: Element type is invalid: expected a string (for built-in\ncomponents) or a class/function (for composite components) but got: object.\nThis is my webpack.config.js ->\nconst path = require('path');\nmodule.exports = {\n    // This is our entry point containing the code\n    // required to perform server-side rendering.\n    entry: './React/main.js',\n    output: {\n        path: path.resolve(__dirname, 'wwwroot/dist'),\n        filename: 'bundle.js'\n    },\n    module: {\n        // Transform .jsx files.\n        rules: [\n            {\n                loader: 'file-loader?name=[name].[ext]',\n                test: /.jsx$/,\n                //use: 'jsx-loader?harmony',\n                exclude: /node_modules/,\n                loader: 'babel-loader',\n                query: {\n                    \"presets\": [\n                        \"@babel/preset-react\",\n                        \"@babel/preset-env\"\n                    ],\n                    \"plugins\": [\n                        \"@babel/plugin-proposal-class-properties\"\n                    ]\n                },\n            }\n        ]\n    },\n    resolve: {\n        // Ensure we can deal with .js and .jsx and require files.\n        extensions: ['.js', '.jsx']\n    },\n    // Set mode for development, production or none.\n    mode: 'none'\n};\nThis is my main.js ->\nrequire('expose-loader?React!react');\nrequire('expose-loader?ReactDOM!react-dom');\nrequire('expose-loader?ReactDOMServer!react-dom/server');\nrequire('expose-loader?RootComponent!./App.jsx');\nThis is my App.jsx ->\nimport { Component, Fragment } from 'react';\nexport default class App extends Component {\n    render() {\n        return (\n            \nTest React fwafasfaw\n\n        );\n    }\n}\nAnd finally this is my view ->\n@{\n    ViewData[\"Title\"] = \"ReactTest\";\n}\n\n\n@Html.React(\"RootComponent\", new { initialComments = Model.SPOResponse })\n\n@Html.ReactInitJavaScript()\nReactTest\n\nAny tips ? My full question was already asked on StackOverflow, but no\nanswer yet...\n(\nhttps://stackoverflow.com/questions/53231394/unable-to-add-reactjs-net-on-netcore-2\n)\nHopefully you can help me out, thanks.\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/reactjs/React.NET/issues/624, or mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AA5hFhkIuu_eztKAC1XBuBMlppdxo_iNks5ut1dGgaJpZM4YYOGW\n.\n. Is your component being rendered properly? Try to copy over the example\ncomponent from the sample to your app, including the webpack config. That\nwill rule out a problem in the library.\nOn Sat, Nov 10, 2018 at 17:02, Taerarenai notifications@github.com wrote:\nIf you mean this one (\nhttps://github.com/reactjs/React.NET/tree/master/src/React.Sample.Webpack.CoreMvc)\ni've already looked at it as i said in my posted issue. It helped solve\nsome of the problems, but the rendering problem came up and by comparing\nthe code i can't see any major differences (except file names and paths).\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/reactjs/React.NET/issues/624#issuecomment-437628532,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AA5hFrCH_Pii41X7WvWncqiuicpHyGyMks5ut1sPgaJpZM4YYOGW\n.\n. Oh. Try using module.exports instead of export default in your root\ncomponent.\nOn Sat, Nov 10, 2018 at 17:04, Dustin Masters dustin@dustinsoftware.com\nwrote:\nIs your component being rendered properly? Try to copy over the example\ncomponent from the sample to your app, including the webpack config. That\nwill rule out a problem in the library.\nOn Sat, Nov 10, 2018 at 17:02, Taerarenai notifications@github.com\nwrote:\n\nIf you mean this one (\nhttps://github.com/reactjs/React.NET/tree/master/src/React.Sample.Webpack.CoreMvc)\ni've already looked at it as i said in my posted issue. It helped solve\nsome of the problems, but the rendering problem came up and by comparing\nthe code i can't see any major differences (except file names and paths).\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/reactjs/React.NET/issues/624#issuecomment-437628532,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AA5hFrCH_Pii41X7WvWncqiuicpHyGyMks5ut1sPgaJpZM4YYOGW\n.\n\n\n. No sorry. I mean add this statement to the bottom of your root component.\n\nmodule.exports = RootComponent;\nThere is a known issue mixing expose loader with \u201cexport default\u201d syntax.\nOn Sat, Nov 10, 2018 at 17:17, Taerarenai notifications@github.com wrote:\n\nBy using module.exports i assume you mean that i change my code from\nrequire('expose-loader.....) to use module.exports right? (still learning\nhere).\nI changed it to this ->\nmodule.exports = {\n    RootComponent: require('./App'),\n    React: require('react'),\n    ReactDOM: require('react-dom'),\n    ReactDOMServer: require('react-dom/server')\n};\nAnd now i'm getting React.Exceptions.ReactNotInitialisedException:\nReactJS.NET has not been initialised correctly. Please ensure you have\ncalled services.AddReact() and app.UseReact() in your Startup.cs file. --->\nReact.TinyIoC.TinyIoCResolutionException: Unable to resolve type:\nReact.ReactEnvironment ---> React.TinyIoC.TinyIoCResolutionException:\nUnable to resolve type: React.JavaScriptEngineFactory --->\nReact.Exceptions.ReactNotInitialisedException: React has not been loaded\ncorrectly: missing (React, ReactDOM, ReactDOMServer).Please expose your\nversion of React as global variables named 'React', 'ReactDOM', and\n'ReactDOMServer', or enable the 'LoadReact'configuration option to use the\nbuilt-in version of React.\nservices.AddReact() and app.UseReact() is already added.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/reactjs/React.NET/issues/624#issuecomment-437629462,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AA5hFuDFifdQeE8zu5OGp-vI1km6kGdoks5ut15qgaJpZM4YYOGW\n.\n. I have updated the documentation in bb39819e25ab9f9e8b2631eb2f2897fd37719c98 to remove all references to expose-loader, which should reduce confusion for others using webpack :) . Thanks :)\nOn Wed, Nov 14, 2018 at 14:02, Daniel Lo Nigro notifications@github.com\nwrote:\nMerged #626 https://github.com/reactjs/React.NET/pull/626 into master.\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/reactjs/React.NET/pull/626#event-1967139165, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AA5hFs54s1_OY_fpI-ivdlkvkKudXuISks5uvJLugaJpZM4Yeqc6\n.\n. Hi @flipdoubt \ud83d\udc4b \n\nPretty sure you can just add a target with <Exec Command=\"npm run build\" /> to your project file without using this library. There is an msbuild integration but that's for doing babel compilation directly from msbuild without the need for installing node at all (this library has a hosted Javascript environment that it initializes).. It would be good to have some better docs on how to do this with libraries like Reactstrap.. The closest thing we have is the Webpack sample project in the repo. . Don't have time to fill out the docs further for this case right now. Try following the webpack docs, adding reactstrap library, and import the components you need.\nhttps://reactjs.net/bundling/webpack.html. That solution should work, please let me know if it doesn\u2019t. :) . I found a better fix for the underlying issue: the path trimming was not working properly. This has been corrected in cc9de46.. What version are you on? There was a similar bug a while ago that has since been fixed... Please verify that debug=true is not set in Web.config and you are building in Release mode. You can also try installing an older version of ReactJS.NET to see if there was a regression.. Off-hand I don't know where the bundled files are located, sorry... Import is only supported right now if you bundle scripts with webpack..\nOn Thu, Nov 29, 2018 at 03:44, siulca notifications@github.com wrote:\n\nImporting Test.jsx components into Tutorial.jsx outputs the error:\nSyntaxError: import declarations may only appear at top level of a module\nIs it possible to extend the Tutorial\nhttps://reactjs.net/tutorials/aspnet4.htmlto include an example of\nmultiple component files? After all, that is one of the main\nadvantages/features of React.js - reusuable components.\nTest.jsx\nexport default class Test extends React.Component {\n    render() {\n        return (\n            \n                Test content\n            \n        );\n    }\n}\nTutorial.jsx\nimport Test from './Test';\nclass CommentBox extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { data: [] };\n        this.handleCommentSubmit = this.handleCommentSubmit.bind(this);\n    }\nloadCommentsFromServer() {\n    const xhr = new XMLHttpRequest();\n    xhr.open('get', this.props.url, true);\n    xhr.onload = () => {\n        const data = JSON.parse(xhr.responseText);\n        this.setState({ data: data });\n    };\n    xhr.send();\n}\nhandleCommentSubmit(comment) {\n    const data = new FormData();\n    data.append('Author', comment.Author);\n    data.append('Text', comment.Text);\n\n    const xhr = new XMLHttpRequest();\n    xhr.open('post', this.props.submitUrl, true);\n    xhr.onload = () => this.loadCommentsFromServer();\n    xhr.send(data);\n}\n\ncomponentDidMount() {\n    this.loadCommentsFromServer();\n    window.setInterval(\n        () => this.loadCommentsFromServer(),\n        this.props.pollInterval,\n    );\n}\n\nrender() {\n    return (\n        <div className=\"commentBox\">\n            <Test />\n            <h3></h3>\n            <CommentList data={this.state.data} />\n            <CommentForm onCommentSubmit={this.handleCommentSubmit}/>\n        </div>\n    );\n}\n\n}\n[...]\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/reactjs/React.NET/issues/634, or mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AA5hFjyrzxxh5afjFVlrCsLaqsJN1GPiks5uz8iVgaJpZM4Y5f6S\n.\n. Use only webpack :)\nOn Thu, Nov 29, 2018 at 08:33, siulca notifications@github.com wrote:\nI see. Should webpack be used in conjunction with BableBundle() in\nBundleConfig.cs? Or should I scrap BundleConfig.cs and use only webpack?\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/reactjs/React.NET/issues/634#issuecomment-442900969,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AA5hFiDvS_r-65eCaWVtH9nzc2qXA25qks5u0Aw-gaJpZM4Y5f6S\n.\n. Hmm... not sure. Out of curiosity what is your use case? Are you leveraging\ncode splitting in your project?\nOn Mon, Dec 10, 2018 at 07:26, Ivan Sanz-Carasa notifications@github.com\nwrote:\nHi, I need a way to initialize the engine in a transient way, so every\ntime I call Http.React a new instance is created.\nThis is due to some dynamic js files being added to the Configuration\nafter calling Iitializer.Initialize()\nIs there any way to invalidate current engine after updating the\nConfiguration?\nThanks\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/reactjs/React.NET/issues/637, or mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AA5hFvG8GjxBNolXTeBB0IxsJVHuC9mAks5u3m8TgaJpZM4ZLeCh\n.\n. If you turn off JS engine re-use, does the problem go away? It will also\ngive you an idea for the perf hit of recreating the JS engine and parsing\nscripts. It does seem like there should be a way to empty the JavaScript\nengine pool on demand.\nOn Mon, Dec 10, 2018 at 07:44, Ivan Sanz-Carasa notifications@github.com\nwrote:\nI'm using incremental JS dependencies (I only add JS files when I need\nthem by calling AddScriptWithoutTransform). The first component gets\nrendered properly but every next component doesn't take the scripts in\nconsideration because the engine was already instantiated and reused\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/reactjs/React.NET/issues/637#issuecomment-445839607,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AA5hFlt1w_I8TcuXPU8XZqCpedd7FITnks5u3nNDgaJpZM4ZLeCh\n.\n. There should be a property in the Configutation type you can set\nOn Mon, Dec 10, 2018 at 07:56, Ivan Sanz-Carasa notifications@github.com\nwrote:\nEmptying the engine pool on demand is exactly what I need for this case.\nAs a temporary fix, how can I turn off engine reuse?\nThanks\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/reactjs/React.NET/issues/637#issuecomment-445843851,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AA5hFsjwfNSziSTMG4f2uiDcbcvh8P04ks5u3nYSgaJpZM4ZLeCh\n.\n. I'm going to close this issue since we don't have any plans to add better support for this, although I'd be open to a pull request adding support!. Sure. Any React class components or function components that are declared\nin the global scope should be available to render as child components, even\nif they live in separate files. Just make sure to import all of the\ncomponents in the AddScripts step in the configuration.\n\nhttps://github.com/reactjs/React.NET/blob/master/src/React.Sample.Mvc4/Content/Sample.jsx\nOn Tue, Dec 11, 2018 at 04:11, Stefan Stefanov notifications@github.com\nwrote:\n\nIn this article is shown how to load a component and render it server-side:\nhttps://reactjs.net/features/server-side-rendering.html\nIf I have to include other components inside this parent component is it\npossible to access them as in this case we do not have Webpack and cannot\nsimply import them?\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/reactjs/React.NET/issues/638, or mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AA5hFv9YT1sI0FZv1zv_6xFXlS4xt5A0ks5u35L5gaJpZM4ZNLZ3\n.\n. Thanks for getting the conversations started, I agree if SSR is disabled\nthen any compilation errors should be ignored so the site is at least\nusable again.\nOn Thu, Dec 13, 2018 at 15:01, Kevin Stricker notifications@github.com\nwrote:\nI was probably being a little hasty here. The check should probably be\naround the function instead of in it.\nAnd I'm uncertain whether or not this would somehow make the case where !_config.LoadReact\n&& !_config.UseServerSideRendering break.\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/reactjs/React.NET/pull/639#issuecomment-447136374,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AA5hFtaEbHAECP-esFhRhkaDm3QUzZduks5u4s5LgaJpZM4ZSdgq\n.\n. @adamjford a few things to try..\n\n\n\nIf you turn on all \"Common language runtime exceptions\", are any other exceptions thrown before the TinyIoCResolutionException is thrown? There could be another hidden exception that is causing the environment to fail.\n\n\nDoes loading a different Javascript engine, such as ChakraCore work?\n\n\nIf you clone this repo, there are a few sample projects. Do the React.Sample.Mvc4 or the tutorial projects build and run?\n\n\n. @adamjford there isn't enough information to debug this further right now. We just added some better debugging support in the latest 4.0.0-rc2 package to re-throw specific engine exceptions instead, so that may be helpful here.. Thanks, documentation updates are always welcome!\nOn Wed, Dec 19, 2018 at 21:01, Daniel Lo Nigro notifications@github.com\nwrote:\n\nMerged #641 https://github.com/reactjs/React.NET/pull/641 into master.\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/reactjs/React.NET/pull/641#event-2037468755, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AA5hFjDiuWbdCXMc748cbSihKFdanWX-ks5u6xmVgaJpZM4ZbepB\n.\n. Is the idea to migrate away from AppVeyor? Haven\u2019t checked out azure\npipelines yet...\nOn Fri, Dec 21, 2018 at 11:56, Daniel Lo Nigro notifications@github.com\nwrote:\nNeed to work out what's up with this:\nsrc\\React.Sample.Mvc4\\React.Sample.Mvc4.csproj(196,11): Error MSB4226: The imported project \"C:\\Program Files (x86)\\MSBuild\\Microsoft\\VisualStudio\\v14.0\\WebApplications\\Microsoft.WebApplication.targets\" was not found. Also, tried to find \"\\WebApplications\\Microsoft.WebApplication.targets\" in the fallback search path(s) for $(VSToolsPath) - \"C:\\Program Files (x86)\\MSBuild\\Microsoft\\VisualStudio\\v15.0\" . These search paths are defined in \"C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\MSBuild\\15.0\\Bin\\MSBuild.exe.Config\". Confirm that the path in the  declaration is correct, and that the file exists on disk in one of the search paths.\nsrc\\React.Sample.Cassette\\React.Sample.Cassette.csproj(208,11): Error MSB4226: The imported project \"C:\\Program Files (x86)\\MSBuild\\Microsoft\\VisualStudio\\v14.0\\WebApplications\\Microsoft.WebApplication.targets\" was not found. Also, tried to find \"\\WebApplications\\Microsoft.WebApplication.targets\" in the fallback search path(s) for $(VSToolsPath) - \"C:\\Program Files (x86)\\MSBuild\\Microsoft\\VisualStudio\\v15.0\" . These search paths are defined in \"C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\MSBuild\\15.0\\Bin\\MSBuild.exe.Config\". Confirm that the path in the  declaration is correct, and that the file exists on disk in one of the search paths.\n@btholt https://github.com/btholt @hross https://github.com/hross Do\nyou know what's up with this? On my computer I can see this file at C:\\Program\nFiles\n(x86)\\MSBuild\\Microsoft\\VisualStudio\\v14.0\\WebApplications\\Microsoft.WebApplication.targets\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/reactjs/React.NET/pull/642#issuecomment-449484175,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AA5hFm-cvmUjvviGuipMiqF6Oks-lGApks5u7Tz3gaJpZM4Ze61j\n.\n. @Daniel15 the build passed on both AppVeyor and Azure pipelines, but you should merge so you can confirm the Azure pipelines config is set up properly (also add me please to the Azure project please?) . window isn't available during server-render, however global might work. Check out this section in the docs:\n\nhttps://reactjs.net/tutorials/aspnet4.html#optimization-server-side-rendering\nIt would be nice to add a Troubleshooting section to the docs that talks about window vs global.. AdvancedStringBuilder is such a small NuGet package, can its contents be copied straight into JavaScriptEngineSwitcher.Core? If it needs to be separate that is fine, just wondering if we can save a bit of overhead copying around additional dependency DLLs.\n(I fixed the Appveyor build). Seems reasonable to me, although I don't know that we'll see a measurable difference when executing Javascript server-side when using pooled string builders vs something simpler like ThreadLocal<StringBuilder>.. I'll keep this issue open since it's not mentioned at all in the tutorial that you have to install a specific NuGet package for the JS engine you want to use. The only references I could find are here:\nhttps://reactjs.net/getting-started/chakracore.html\nhttps://reactjs.net/getting-started/aspnet.html\n\nInstall the React.Web.Mvc4 package through NuGet. You will also need to install a JS engine to use (either V8 or ChakraCore are recommended). See the JSEngineSwitcher docs for more information.. Thanks, I\u2019ll look at this soon!\nOn Thu, Dec 27, 2018 at 12:42, Andrey Taritsyn notifications@github.com\nwrote:\nNot all engine-specific code was removed in the \u201cRemove auto-registered\nJS engines from React.Core\u201d\nhttps://github.com/reactjs/React.NET/commit/3281a16d6f3aee8c13f4f58d65baa6c915f95a5a\ncommit.\n\nYou can view, comment on, or merge this pull request online at:\nhttps://github.com/reactjs/React.NET/pull/647\nCommit Summary\n\nRemove remaining engine-specific code\n\nFile Changes\n\nM src/React.Core/JavaScriptEngineUtils.cs\n   https://github.com/reactjs/React.NET/pull/647/files#diff-0 (41)\n\nPatch Links:\n\nhttps://github.com/reactjs/React.NET/pull/647.patch\nhttps://github.com/reactjs/React.NET/pull/647.diff\n\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/reactjs/React.NET/pull/647, or mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AA5hFl5E0p0504Z_jfIH163R9WBwsfE8ks5u9RSVgaJpZM4ZjFDw\n.\n. Thanks for the extra tests!. Fixes #649. Have you looked at the sample project yet? There is a link at the top page\nof the section on react router.\nOn Fri, Dec 28, 2018 at 08:12, Luc Raymond notifications@github.com wrote:\nHello !\nI'm trying to integrate ReactJS.Net w/ React.Router in a legacy app\nrunning in production using ASP.NET MVC5 / jquery. My goal is not to\nchange the whole codebase but to test it on a small part at first. I\nfollowed all tutorials on https://reactjs.net, but I feel like something\nis missing to me. I don't quite understand how to compose everything\ntogether.\nFor example :\n\nit seems like my server bundle is never executed\ni don't know where I have to pass my initial C# model to initialize\n   my global state\n\nCould you provide me some help please ?\nThis is my actual project setup:\nReactConfig.cs\nReactSiteConfiguration.Configuration\n   .SetLoadBabel(false)\n   .AddScriptWithoutTransform(\"~/dist/wwwroot/server.bundle.js\");\n_Layout.cshtml\n......@Html.ReactInitJavaScript()\nIndex.cshtml\n@Html.ReactRouter(\"Routing\", new\n{\n  model = Model <-- i don't know if i should pass my model here\n})\nclient.jsx\nimport { BrowserRouter } from 'react-router-dom';import { App } from './components/App';\nclass Routing extends React.Component {\n  constructor(props) {\n      super(props);\n  this.state = {\n      model: this.props.model\n  };\n\n}\nrender() {\n      return(\n          \n <-- do I have to pass my  state down here ?\n          \n      );\n  }\n}\nglobal['Routing'] = Routing;\nserver.jsx\nimport { StaticRouter } from 'react-router';import { App } from './components/App';\nconst Routing = ({ path, context }) => {\n  return (\n      \n\n\n  );\n}\nglobal['Routing'] = Routing;\nApp.jsx\nexport class App extends React.Component {\n  render() {\n      return (\n          \n\n\n\n\n\n      );\n  }\n}\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/reactjs/React.NET/issues/651, or mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AA5hFhQXnwcMuFxQQSy6NOv5kwBLDXgsks5u9ia2gaJpZM4Zj5II\n.\n. The docs for react router are here: https://reactjs.net/features/react-router.html\n\nPlease re-open if there are changes you think would be helpful to add to the docs.. Thanks, this will be very useful. Hi there \ud83d\udc4b \nA couple things come to mind: \nReact and ReactDOM (case sensitive) are exposed globally. If you aren't using webpack (looks like you're not), you can't yet use require or import statements in your code. Try removing the import statements and change the casing of ReactDom to ReactDOM.\nI recommend checking out the excellent documentation here on how to get started: https://reactjs.org/tutorial/tutorial.html\nI'll be closing this issue, but feel free to re-open if you have questions specific to this library!. This library doesn\u2019t support rendering scripts without transpiling them first. Please read the tutorial or look at the sample projects to see how the rendered script tag is supposed to work. . You appear to have mismatched dependencies.\nSystem.MissingMethodException: Method not found: 'JavaScriptEngineSwitcher.Core.JsEngineSwitcher JavaScriptEngineSwitcher.Core.JsEngineSwitcher.get_Instance()'.\nDid you try updating reactjs.net as well? . Sorry for the trouble, we just released ReactJS.NET 4.0 which addresses this issue. Please update to the latest release. \ud83d\ude42 @jbp17 . As of today this library does not support debugging the original JSX files from Visual Studio. Since the files are first compiled with Babel (either at runtime or with webpack), the debugger needs source maps to know where the current execution context maps to in the original source.\nIf someone is up for implementing this I'd be happy to discuss some approaches. For now I'll close the issue until someone wants to take this on.\ncc #655 . I'll keep this issue open if you'd like to work on it :) I haven't investigated what Visual Studio needs, but a helpful starting point would be to look at the source maps support in Babel and exporting that, since that's what we'll need to capture. It may make sense to keep source maps around in a cache as scripts are compiled at runtime.. Hah. Just as I typed that I realized that this library already has basic support for generating and passing source maps via a HTTP header. I'm not sure what additional data Visual Studio needs beyond that if it's already hooked into Chrome's debugger... \n. @kendallb would you mind taking a look at why Visual Studio is not loading the source maps generated by this library?. Take a look in Babel.cs, it should be pretty straight forward.\nI can take a look at this again in a couple weeks, I'm going to be pretty busy at home and will be taking a slight break from OSS work :) . Interesting, does Bridge support server rendering for React? Curious to\nhear how it goes!\nOn Mon, Jan 28, 2019 at 07:41, Kendall Bennett notifications@github.com\nwrote:\n\nI have run out of time myself for this. I am actually planning to\ntransition to Typescript with webpack and Bridge.net.\n\u2014\nYou are receiving this because you modified the open/close state.\nReply to this email directly, view it on GitHub\nhttps://github.com/reactjs/React.NET/issues/658#issuecomment-458180867,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AA5hFo6QtmUj5OBR5hheZArZ551HDj-xks5vHxo7gaJpZM4Z2uB0\n.\n. Hi @jerrywithaz \n\nReactJS.NET won't compile your scripts if you load them with AddScriptWithoutTransform. It watches the filesystem and will reload automatically when any files are changed.\nIf you're trying to make local development faster, I recommend setting ReactConfiguration.UseServerSideRendering to false, so that you skip the server side rendering step altogether. However, you may miss out on errors that only are thrown during server-render, such as consuming packages that expect window to be defined on the global scope. \nYou could also adjust the value of SetMaxEngines so that only one or two JS engines are created when doing local development.. Thanks @Taritsyn!. Hey @Taerarenai,\nYour source should not be gzipped, as this library expects raw, uncompressed scripts (minified is OK). You should be able to use the built in .NET Core gzip handlers, so that when your bundle is served up, the server will compress it for requests that have the Accept-Encoding: gzip header present.. There should be more information in the error logs, can you double check to see if there is an inner exception thrown? Typically this error happens if a Javascript engine has not initialized properly (such as if your environment is missing the C++ portable runtime)\nFor example, Chakracore requires the VC2017 redistributable libraries. Closing due to inactivity, please feel free to comment if you'd like some more help \ud83d\ude42 . @LinusCenterstrom the only major changes we made between 3 and 4 were related to the default engine initialization, so I'm not sure why your custom pooling strategy isn't working. From what you described it sounds like it should just work.\nReactEnvironment is the primary consumer of IJavaScriptEngineFactory so you might look at recent changes there to see if the calls changed in a way that your code isn't handling.. \ud83d\udc4d . I don\u2019t actually think we want to pin the npm packages, it would be nice to have an automatic update PR to react 16.8 when it ships . Oh, I follow now. \ud83d\udc4d . Thanks! This is a great start, we can refine it as we go along :) . Error during nuget restore: Detected package downgrade. Heh, this one should be bumped to 4.0.... We need a strategy to deal with JSON.NET bumps, since this is a breaking change for anyone pinned to 9.x.. Hah, I totally forgot about this PR. I published a package bump in 0e371304d13f3f0479896b941e9096d649736257 but didn't update the samples. \ud83d\ude2c. Samples updated dd55c44. Hmm, I wonder if gulp up to date? Try running \u2018npx gulp\u2019 from the React.Core directory instead of using the globally installed version on your workstation. If that works, we should update the gulp dependency in that project. . Try to CD into the src\\react.core directory and run npx gulp from there.\nOn Thu, Jan 31, 2019 at 08:48, Kendall Bennett notifications@github.com\nwrote:\n\nI ran npx gulp in the same directory as dev-build, but it still does not\nfix it?\nc:\\src\\git\\react.net>npx gulp\nnpx: installed 318 in 7.831s\n[\ufffd[90m08:48:02\ufffd[39m] \ufffd[31mNo gulpfile found\ufffd[39m\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/reactjs/React.NET/issues/712#issuecomment-459417377,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AA5hFphT3RK0LiU1gaN5bdLMA1Zj1ERPks5vIx5kgaJpZM4abrKL\n.\n. Hey @kendallb,\n\nI added a build script so you can use the version of gulp that is referenced in React.Core. To use, type npm run build in the React.Core directory. I'll keep investigating if a recent update to Node is breaking the build for you.. Nevermind, just repro'd on Node 11. Try Node 10, which is LTS.. @kendallb I must not have been running Node 10 before I did the update on my workstation, sorry about the confusion. \nPinning a gulp dependency fixed the issue for me. I pushed a fix to master, would you mind pulling and trying again?\nhttps://github.com/gulpjs/gulp/issues/2246. Try disabling server render by setting clientOnly: true in the call to @Html.React in your razor file. Then check the JavaScript console for any logged errors in your browser. . Do you have a <script> tag in your layout that references the generated bundle? Something like this. @Html.ReactInitJavaScript() must be called after Html.React, does that work?. Hi there \ud83d\udc4b \nImports from node modules won\u2019t work without using webpack, please give the webpack sample project a look for supported use cases. \n. Would you be able to list all the versions of the packages your project is using?. I think we're going to need better logging here. My first suspicion is that the c++ runtime is not present on the machine you're using, so V8 isn't initializing properly. You could try another JS engine but that's just a guess. You could also try cloning this repo and running the samples.. ES6 modules are not yet natively supported without webpack, have you tried using that yet? . Since it doesn't look like this is a bug, I'm closing this issue. Please feel free to comment if you'd like some more help \ud83d\udc4d . You can't nest Html.React calls, so the best thing to do is to make your app \"components all the way down\" from any place you're calling Html.React.\nFor instance, if you call:\n@Html.React(\"Placeholder\", new {\n    readonly = Model.Readonly,\n    clientid = Model.ClientID,\n    available = Model.Available,\n    children = Model.Children // [{ \"type\": \"TextEditor\", \"props\": {} }, { \"type\": \"Slideshow\", \"props\": {} },  ]\n})\nThen your placeholder component could conditionally render other components inside of render:\njs\n  render() {\n    return this.props.children.map((child, i) =>\n      child.type === \"TextEditor\" ? (\n        <TextEditor key={i} {...child.props} />\n      ) : child.type === \"Slideshow\" ? (\n        <Slideshow key={i} {...child.props} />\n      ) : null\n    );\n  }\nHope that helps, please feel free to comment further if you need more help!. It looks like you aren't calling SetLoadReact(false), so your bundled version of React is not getting used on the server. The currently bundled version of react does not support hooks, but I'd like to fix that very soon!\nFurther, it looks like after loading all the chunks in your example, global.ReactDOMServer is not assigned, which is required for server-rendering.\nIn server.js:\n```js\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport ReactDOMServer from 'react-dom/server';\nimport Entries from './entries';\nglobal.React = React;\nglobal.ReactDOM = ReactDOM;\nglobal.ReactDOMServer = ReactDOMServer;\nglobal.Entries = Entries;\n```\nAlso, your repo was a good example of using vendor chunks with webpack, so I'm going to integrate it into this library. Tracking progress in #721. Cheers \ud83c\udf7b . I see that this PR also adds x86 for the V8 assembly - thanks!. Looks like these package bumps came from npm audit fix. Thanks!. You'll need to host a copy of visibility-sensor.js in your project, and then call AddScript so that it's available during the server render \ud83d\ude42  Let me know how it goes!. That's a new one. It looks like webpack is not emitting a correct bundle for you. Are you using code splitting at all? Could you upload the webpack config to a gist?\nIt could be related to this issue: https://github.com/webpack/webpack/issues/3974#issuecomment-369260590\nTo verify that this error also occurs on the client, please try calling @Html.React(..., clientOnly:true);, which will skip server rendering.\nYou can also try loading the server bundle directly in node by calling node --require server.bundle.js\n. There isn\u2019t (yet) an API that lets you load arbitrary chunks from disk, but I made a branch here that demonstrates how this could be accomplished. \nhttps://github.com/dustinsoftware/React.NET/tree/react-loadable. Took another look React loadable and Loadable Components appear to be very similar in design so in theory it won't take much to support this.\n@felipetoffolo1 would you be willing to try out a debug build? Can you pull that branch and see if it's what you're looking for?. I'd like to dig further into why EngineFactories is getting modified. Without a repro it's not safe to say whether the fix would work or not.\nHow often is \"every now and then\"? Would you be willing to test out a debug build in production with your fix to see if it resolves the issue (assuming we can't find the cause for certain). Publish is done: 0e371304d13f3f0479896b941e9096d649736257. Won't have time to publish a blog post right now, but maybe soon... Honestly I'd prefer to use webpack directly here, but I don't feel strongly about this. We need to update because of issues like #712. @Daniel15 any preference? . Closing in favor of #741 . Thanks, we're taking a look \ud83d\ude03 . Not sure if there was a temporary problem, but it appears to be valid now. \n\n. Thanks for checking!. Hi @jerrywithaz. SetExceptionHandler is what you're looking for. This provides a mechanism for your app to log an error instead of it silently ignoring it. Hope that helps! Feel free to comment if that doesn't work.\n. This question has come up a few times, so I'm going to update the docs for it. I have the Mvc4 sample here showing how it can be done, please give that a look and comment here on how it worked out for you:\nhttps://github.com/reactjs/React.NET/pull/750\n. Reactstrap samples added in #750. It sounds like you'll need to handle the redirect in client-side Javascript. ReactJS.NET won't handle any of the redirects for you unless you are using the react router integration (which it sounds like you aren't). If you need to re-use state across the all of your rendered views, you could disable engine re-use via SetReuseJavaScriptEngines, although this comes with a performance penalty. As Daniel recommended, you should probably just pass them in via props.\nHope that helps!. Hi there \ud83d\udc4b \nWebForms is not supported by this library directly, but a few others have attempted making it work. You might find some helpful guidance in this issue: #55 . Yeah, an update to Babel 7 would be very nice. We should make the change opt in, so that people can still use Babel 6 if they need to. If you\u2019d like to do some exploratory work, that would be great, otherwise I\u2019ll take a look at this soon :) . Yeah that\u2019s part of why I\u2019d like to make it opt in, but I\u2019m pretty sure the\nIE engine doesn\u2019t work well anyway with the latest react.. not sure about\nuse stats :)\nOn Tue, Mar 12, 2019 at 19:49, Daniel Lo Nigro notifications@github.com\nwrote:\n\nUpgrading to Babel 7 should be doable, we'd just need to double check that\nall the JS engines support it. The MSIE engine might not like it, but\nperhaps nobody is actually using that engine any more? I'm not sure.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/reactjs/React.NET/issues/757#issuecomment-472258629,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AA5hFv5J9zMDtzJ5wtvF-YWgTc808RU0ks5vWGc7gaJpZM4brbvg\n.\n. It is possible for a redirect to be returned without a status code defined. If a status code is omitted we can't know if the author intended a permanent or temporary redirect, therefore it's safest to assume temporary. I see that we're manually constructing HTML tags in existing code.. as long as we're not passing user-generated data to these methods, this should be OK (although it would be nice to sanitize the data going into these attributes just in case). Is bumping Json.NET required for this PR?. Removing virtual is a breaking change, can this be avoided?. Let's remove any TODOs before merging this in. This doesn't look thread safe - multiple threads could call Write at the same time to this shared instance. Keeping StringWriter scoped to this method instead of using a static field would solve this.. Oh ok, did not know about \u2018ThreadStatic\u2019 :) . This variable declaration is unnecessary - you can just use _sharedStringWriter here and below:\n\nc#\nif (_sharedStringWriter == null)\n  _sharedStringWriter = new StringWriter(new StringBuilder(512));. Also, the Write method on StringWriter just calls the wrapped StringBuilder, so it would be better to just use StringBuilder.. This number seems unnecessarily large and might allocate more space than necessary for simple components, let's leave it unset unless there is a noticeable benefit to specifying a large value. Ugh, sorry. Missed this one. There is no XML comment for this type which is generating a warning at build time.. Huh. This change is surprising to me but looks correct... not sure why SerializeObject was called here before. . Thanks for updating the tests. Can you add back a test for RenderHtml that doesn\u2019t use a TextWriter to show that the existing method still works? \nEdit: After working on this locally, I discovered that there are already tests that ensure RenderHtml still works as expected. The helper extensions now only use the TextWriter version, so this isn't an issue.. > which is just displays a simple\nThis change doesn't make sense.. . > we introduce a mutable state\nThis change seems to be unnecessary. > The most important of our methods \nUnnecessary change, let's replace our with these. > browser manages the state\nUnnecessary change, their => the. Indentation is off in this method . You can also use class field syntax instead of binding methods in the constructor. Let's add a link to this page which describes alternate patterns further:\nhttps://reactjs.org/docs/handling-events.html. Indentation. > into the child and binding\nUnnecessary change. Indentation. Indentation. This looks like a bug fix, was it intentional?. Leaving remarkable in the js folder should prevent it from being unnecessarily compiled through babel. . Unfortunately it doesn't fix slashes :( :(. Oh! Path.GetFullPath does convert slashes, so that's a more elegant fix.\n. Wording: \"Loads a code\" -> \"Loads code\" . Should this be an error instead? If someone uses NullCache then and tries to use this logic, then they didn't configure it correctly and might miss this trace message... . I'll see about moving these delegates into their own type, since they are all optional render settings.. Ooh, I like the idea of using an extension method for this... I ended up moving most of these into a separate interface. Implemented as a chainable helper class here. The build output is getting minified, but I didn't confirm whether NODE_ENV is getting set properly in the output (which should control what warnings are generated). I'll confirm this before a release.. ",
    "jslatts": "Serious +1 on this! I have a somewhat decent workflow going, but every once in awhile, I run into an issue where the server-side rendering blows up and I am forced to pour over my code to try and figure out what is wrong. I was actually going to post an issue here to ask if I was doing it wrong.\nI would be ok with either method, but I think having it spit the log messages out into a div would be easiest for most people to utilize.\n. +1 on this issue. Happens to my business partner. Turning off pooling corrects the problem. \nVisual Studio Ultimate 2013 12.0.31101.00 Update 4\nWindows 8.1 Pro 64\n. Still seems to be happening to my partner on latest release. I'll see if I can get the exception next time he and I are together in person.\n. Hah. I just realized that PR #49 was for the same idea. Well, this is a simple implementation, no copy paste code, it has tests, and it works :) Let me know if you will accept it and I will sign the CLA.\n. @Daniel15 alright! I addressed the two comments that I could and signed the CLA. Let me know if you need anything else.\n. @PeteDuncanson It's good to hear you are using it in production. Dropping SuperChargedReact.NET into our app for testing is on my todo list as well. Do you guys hang out on IRC? Would love to chat with you a bit more about your project.\n. +1 on the discord channel. It would give me a reason to hang out there.\n. We are using Reflux with Reactjs.NET and are quite happy with it. Reflux is a deviation from the official Flux pattern in that eschews the dispatcher. I prefer its simplicity over the other Flux implementations I looked at.\nThe only issue we had getting it to work server-side was that Reflux depends on a promise library that depends on the window object. We used Browserify to shim an empty module in place of the promise library for our server-side JS bundle (we use separate JS bundles for server vs client). Reflux is loaded on the server, but none of its methods are invoked, so this works out ok.\nFor the server-side render, we pass in props in the standard way and render our React components fully based on those props. None of the Reflux stores are ever populated (this means avoiding doing any AJAX calls in the initialization method of the stores). \nOn the client-side, the components are bootstrapped using the embedded JSON via the standard Reactjs.NET process, but all subsequent state changes and AJAX interactions are handled via Reflux.\nThis is basically cheating in the sense that we are not actually using Reflux/Flux on the server-side. I see no downside to this for our purposes, but it may not be desirable to everyone. I think it should be possible to the bootstrap data directly into the Reflux store on the server, but we haven't bothered trying yet.\n. > Huh, that's really strange. So the promise library doesn't work in any server-side JavaScript environment? A good promise library should work both server-side and client-side.\nI misrembered my issue. The library in question is native-promise-only, which is a promise shim used by Reflux. When trying to render server-side with clearscript, it was invoking setTimeout which was not defined in the ClearScript api. More about this can be found here: spoike/refluxjs#250 and spoike/refluxjs#302.\n\nFrom what I have read it uses a singleton which makes it not possible to use on serverside\n\nReflux does not use singletons, which is one of the reason's I like it.\n. FWIW, we have been using Babel with ReactJS.NET and precompiling via Browserify + Babelify and gulp for quite awhile. We did it primarily for the ES6 transforms. Works great! I could write up a quick guide if there was interest.\n. I think my app may be subject to the same issue. How are you guys profiling V8 to watch memory growth? I have been trying to use the Visual Studio profiler, but it keeps crashing on me. Is there a better way?\nRelated questions: \n- With pooling turned on, is Clearscript/V8 isolating the javascript context between requests? \n- Do the engines in the pool get recycled periodically? I was reading through the code but I didn't see any configuration value for this. \n. Thanks Daniel, that is helpful. So on the windows side, with pooling off, a new engine is created per request?\nThis might be more for @PeteDuncanson:\nI read through your other issues and the referenced Clearscript issues as well. I just ran an experiment to confirm that I can delete out my global variables if needed, but now I'm wondering if that is actually required... \nIf the context is shared between all requests, then anything defined globally will only exist once per engine, correct? In my case, this means libraries (like React) and my top level components. When React.createElement() is called, it creates a new instance in the local scope that is used for calling React.renderToString(). Assuming we don't do anything to create variables outside of the local scope, shouldn't these objects be available for GC immediately after the request is finished? \nI'm probably missing something here. Just want to make sure I'm not setting myself up for surprises down the road here. We are getting awfully close to shipping :)\n. Yes, you can use existing components in React.NET. Though, you need to be careful that they don't have any browser dependencies such as a reference to window (even then you can use React.NET to bootstrap the component client side and skip the server side render).\nThe require statements mean the module is designed for a CommonJS environment (like Nodejs), which React.NET does not provide for you. You will need to precompile your Javascript code using a module bundler like Browserify or Webpack, which will create a single Javascript file that includes all the dependencies for the module you are trying to load. \nYou probably want to do this whether you use React.NET or not. Most (all?) of those components are going to be distributed from NPM as Node modules and will freely use other Node modules as dependencies (more require statements) so using a bundler is pretty much expected.\n. As @aeleftheriadis mentioned, it works fine with Babel 5. You can also just avoid doing any JSX compiling in React.NET and use any external tools (Browserify, webpack, babel, etc) to do your JS compile stage and then use AddScriptWithoutTransform to bypass React.NET's transformation step.\nYou will probably end up wanting to do your own compile anyway so you have the control over your build as your project progresses (minification, sourcemaps, etc).\n. There is a clientOnly flag, but that won't save you the initial JSX compiling. We use browserify (or webpack) to incremental JS compiling outside of React.NET which makes the development loop much quicker. It also gives us much more control over the process.\n. @ricardopolo We don't use the asp.net bundles at all since we do our own minification using browserify. You can add your compiled code to react without transformation. This is our ReactConfig.cs:\n```\nReactSiteConfiguration.Configuration.AddScriptWithoutTransform(\"~/wwwroot/js/server.bundle.js\");\nReactSiteConfiguration.Configuration.AddScriptWithoutTransform(\"~/wwwroot/js/core.bundle.js\");\n// Don't use slower IE engine\nReactSiteConfiguration.Configuration.AllowMsieEngine = false;\n// Don't use built in babel\nReactSiteConfiguration.Configuration.LoadBabel = false;\n// Don't use built in react\nReactSiteConfiguration.Configuration.LoadReact = false;\n```\nWe just reference the code directly in our master layout via a script tag:\n<script src=\"@Url.Content(\"~/wwwroot/js/vendor.bundle.js\")\"></script>\n<script src=\"@Url.Content(\"~/wwwroot/js/core.bundle.js\")\"></script>\n. My company makes a product that utilizes React.NET heavily and we sell to enterprises, so I would say yes. . I'm afraid all I can offer is my own opinion based on my experience. I would also mention that you don't actually need React.NET to use react with a .NET web application, especially if you don't need server side rendering.. Honestly, other than updating things as new versions of .NET are released, ReactJS.NET feels pretty feature complete to me. It just does what it is supposed to do and I rarely have to think about it.\nAnd @Daniel15 is always on the ball for accepting legitimate PRs. I think a lot of the recent issues in github have been more in the \"please debug this for me\" category and it is not too surprising that they aren't getting many responses.. Have you decoded the react error per the message? https://facebook.github.io/react/docs/error-decoder.html?invariant=109&args[]=xxx\nIt appears that you have a react component that is not returning a valid react element.. My solution to this problem is to avoid using code splitting on the server. The problems it solves are not applicable to server side rendering. In fact, I do quite a few things differently on the server build, including using the null-loader to avoid dealing with certain packages that are problematic when there is no window object.\nYou can have two webpack configurations, one for the server (no code splitting) and one for the browser (go nuts). You can build them both at the same time by exporting an array at the bottom of your webpack config.\nmodule.exports = [clientConfig, serverConfig]\n\nHappy to answer any other questions related to webpack. We are using webpack, redux, react router, hot module reloading, and server side rendering with React.NET. It can all work fine together with a little work.\n. I have thought about writing up a blog post about getting this stuff all running together. It is hard to gauge how much interest there is with using this specific stack on React.NET.\nHappy to share the webpack config though: https://gist.github.com/jslatts/f9dec699e8fd853590f520f62d5bf21a\nI removed some of the totally extraneous stuff (legacy components, etc) to cut it down somewhat, but its pretty much what we use. One disclaimer, we aren't many/any production optimizations yet. There is some work to do around optimization. We aren't particularly worried about that at the moment.\nAfterthought edit: Don't feel bad or be too discouraged about not getting webpack right away. I think getting these build tools going can be one of the most complicated things we do as web developers these days and it is hard to get help (nobody else knows either). It took me a week to replace gulp with webpack. . The bug I linked to was closed as fixed. Upgrading to JavaScriptEnginerSwitcher 2.4.X seems to have resolved the issue, though I still get more IIS crashing than I used to. It is not hanging anymore though, so it may be an unrelated memory issue. I'm closing this, since it has bee fixed.. Well, previously I was getting a hang that required me to kill IIS express worker process manually using task manager. That isn't happening anymore. Just occasional (1/20?) IIS crashes during development work. . I would be interested in this. I currently use React Router, including for pages rendered on the server. I set it up by passing Request.RawURL as a prop (in a base controller) to all my components. If I understand you right, this would accomplish the same thing using the helpers?. Can't change this, VS complains: \"An expression tree may not contain a call or invocation that uses optional arguments\".\n. It lets you call component.verify() without arguments and will throw if any of the .Verifiable() mock configurations were not called. It is not needed if explicit verifications are used like they are in this test.. ",
    "snowjim": "Yes, thats correct, its the problem but what I really asking if there is a easier way to find problems like this? This is more important if make a lot of changes without checking it first, it could be a nightmare. Cut out and test if the code runns is a last resort, is there no other way to get more precis info? I suspect that Im spoiled with the .NET ;)\n. I have now installed V8 engine and it do give me another expcetion explaination but it is still not any better. Look at this code : \nvar FeedTopic = React.createClass({\n        render: function() {\nreturn (\n            <div className=\"topic\">\n                <div className=\"tUImgLnk\">\n                    <a title={this.props.data.UserName} target=\"_blank\" href={this.props.data.UserInfoUrl}>\n                        <img className=\"tUImg\" src={this.props.data.UserPicSrc} />\n                    </a>\n                </div>\n                <div className=\"tInfo\">\n                    <div className=\"tName\">\n                        <a title={this.props.data.UserName} target=\"_blank\" href={this.props.data.UserInfoUrl}>{this.props.data.UserName}</a>\n                    </div>\n                    <div className=\"tTime\">\n                        <span>{this.props.data.DateCreated}</span>\n                    </div>\n                <div>\n            </div>\n        );\n    }\n});\nvar FeedList = React.createClass({\n    render: function() {\n        if(this.props.data.TopicList != null && this.props.data.TopicList.length > 0){\n                var topic = this.props.data.TopicList.map(function (topic, i) {\n                    return (\n                        \n                    );\n                });\n            }\n        return (\n            \n                {topic}\n            \n        );\n    }\n});\nvar FeedBox = React.createClass({\n    getInitialState: function() {\n            return { data: this.props.initialData };\n     },\n    render: function(){\n        return (\n            \n\n\n        );\n    }\n});\nThis will throw the following server page \nIn file \"~/Scripts/Feed.jsx\": Error: Parse Error: Line 32: Unexpected token : (at line 32 column 8)\n   at ReactNET_transform_sourcemap (Script Document:52:9) -> throw new Error(ex.message + \" (at line \" + ex.lineNumber + \" column \" + ex.\nLine: 52\nColumn:9\nOn line 32 I only find this : });\nif I however remove the entire  block it will work. I have tried to add it again and remove tName or tTime but that does not help.\nIm not sure how the exception message really helps me?\n. ",
    "abe238": ".AddScriptWithoutTransform(\"~/js/server.bundle.js\")\n. ",
    "glikoz": "0.13 is out :)\n. ",
    "gabrielsadaka": "This is awesome, I've been planning to start learning react and ASP.net vnext now I can do both!\n. ",
    "luisrudge": "Awesome work guys!\n. Does it run on coreclr?\n. Ok, that's great! Thanks!\n. Awesome! THanks!\n. ",
    "ctolkien": ":astonished: \n. ",
    "jimitndiaye": "@Daniel15 this thread on the clear script forums discusses the problems facing support for CoreClr but suggests potential cross-platform alternatives: Vroom and V8.net. Would they be suitable alternatives?\n. ",
    "Surreal9": "How do you make that selection, and choose V8?\n. ",
    "dgwaldo": "Now looking into using React Router from ReactJS.NET as well.  Pulled Pete's branch and tried dev-build, looks like the build is failing..  Will try to work around that.   Would love to see this as a feature in the mainline.\n. Haven't dedicated to much time, as the build is failing, and couldn't get it building. \n. @PeteDuncanson   The teamcity build was failing, looks like its good to go now.  However, my coworker has been using Node to serve the React prototype, seems to be working great so far.\n. ",
    "jkmuka": "After restarting VS I see that it does the transforms now\n. ",
    "villanus": "Thanks for investigating.  I never had the time to get into react =(\n. ",
    "radenkozec": "There is no errors in the Visual Studio output window.\nI will try figure out what's wrong from your project.\nThanks for help.\nI will post update soon.\nOn Wed, 11 Mar 2015 at 16:22 Daniel Lo Nigro notifications@github.com\nwrote:\n\nDo you see any errors in the Visual Studio output window?\nThere's a sample project in the React.Sample.Mvc6 project in the\nrepository. Clone the project, run dev-build.bat, then you can open the\nsolution in Visual Studio.\nSent from my mobile.\nOn Mar 11, 2015 6:18 AM, \"Radenko Zec\" notifications@github.com wrote:\n\nI have followed tutorial on\nhttp://reactjs.net/getting-started/aspnet5.html\nto use React with ASP.NET 5.\nI cannot make it work. (I have used Reactjs.NET on ASP.NET MVC 5\nsuccessfully)\nI am just getting blank page. (no info in console) and don't have react\ntab in chrome develop tools.\nCan you please upload a simple project (hello world) where you have\nmanaged to run it in ASP.NET 5 so I can try to implement it myself?\n\nReply to this email directly or view it on GitHub\nhttps://github.com/reactjs/React.NET/issues/101.\n\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/reactjs/React.NET/issues/101#issuecomment-78284768.\n. I have succeeded to run your example by extracting project from solution and manually fixing issues.\nIt would be nice if you can reference React.js from Bower instead of fb for next versions. (some of us have problems with referencing fb because of company policies for social networks)\n\nAlso I am hoping that you will enable support for aspnetcore50 soon. Without .NET Core your implementation for ASP.NET 5 is not complete because we will be stuck with Windows and Full Framework.\n. Hm That is a great. I got the impression that ASP.NET projects will not work on Linux or MacOS without .NET Core. \nThanks for clarification.\n. Great. \nI am glad you have already test it .\nI haven't got time to test it on Mac yet.\n. I looked at explanation here: \nhttp://www.asp.net/vnext/overview/aspnet-vnext/aspnet-5-overview\nIt seams that Cross-Platform CLR is not yet released.\nSo KRE CLR is actually Full CLR which is not working on Linux?\n. Actually you are correct: http://blogs.msdn.com/b/cesardelatorre/archive/2014/11/18/what-is-net-core-5-and-asp-net-5-within-net-2015-preview.aspx\nHere is stated: This is today (running ASP.NET 5 on top of Mono), but Microsoft is also going to release an official distribution of the .NET Core for Linux, as well as an official distribution of .NET Core for the Mac OS X, as well.\n. ",
    "raysuelzer": "I had this same issue. ReactSiteConfiguration.Configuration.SetReuseJavaScriptEngines(false);  works wonderfully. \nIf you are using webpack this also allows you to add the --watch flag so that your packages are rebuilt as you change your code.  I'd suggest integrating that into the documentation / tutorial.  If there is interest I can create a PR. \n. ",
    "karczk": "Error still occurs while debugging (probably from version 2.0). Configuration:\n- Windows 7 x64\n- Visual studio 2013 (debug)\n- IIS Express\n- ReactJS.NET Core 2.1.2\n- ReactJS.NET for ASP.NET 2.1.2\n- ReactJS.NET (MVC 4 and 5) 2.1.2\n- ReactJS.NET - ClearScript V8 1.3.0\n- JavaScriptEngineSwitcher.V8 1.4.1\n- JSPool 0.3.1\nFirst exception (visible only when symbols are loaded in VS):\n```\nA first chance exception of type 'System.AccessViolationException' occurred in ClearScriptV8-32.dll\nAdditional information: Attempted to read or write protected memory. This is often an indication that other memory is corrupt.\n            [Managed to Native Transition]\n\n\n        ClearScriptV8-32.dll!Microsoft.ClearScript.V8.V8IsolateProxyImpl.V8IsolateProxyImpl(string gcName, Microsoft.ClearScript.V8.V8RuntimeConstraints gcConstraints, bool enableDebugging, int debugPort)               Unknown\n           [Native to Managed Transition]               \n           mscorlib.dll!System.RuntimeType.CreateInstanceImpl(System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, object[] args, System.Globalization.CultureInfo culture, object[] activationAttributes, ref System.Threading.StackCrawlMark stackMark)               Unknown\n           mscorlib.dll!System.Activator.CreateInstance(System.Type type, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, object[] args, System.Globalization.CultureInfo culture, object[] activationAttributes)                Unknown\n           mscorlib.dll!System.Activator.CreateInstance(System.Type type, object[] args)             Unknown\n           ClearScript.dll!Microsoft.ClearScript.V8.V8Proxy.CreateImpl<Microsoft.ClearScript.V8.V8IsolateProxy>(object[] args)      Unknown\n           ClearScript.dll!Microsoft.ClearScript.V8.V8IsolateProxy.Create(string name, Microsoft.ClearScript.V8.V8RuntimeConstraints constraints, bool enableDebugging, int debugPort)    Unknown\n           ClearScript.dll!Microsoft.ClearScript.V8.V8Runtime.V8Runtime(string name, Microsoft.ClearScript.V8.V8RuntimeConstraints constraints, Microsoft.ClearScript.V8.V8RuntimeFlags flags, int debugPort)                Unknown\n           ClearScript.dll!Microsoft.ClearScript.V8.V8Runtime.V8Runtime(string name, Microsoft.ClearScript.V8.V8RuntimeConstraints constraints, Microsoft.ClearScript.V8.V8RuntimeFlags flags)  Unknown\n           ClearScript.dll!Microsoft.ClearScript.V8.V8Runtime.V8Runtime(string name, Microsoft.ClearScript.V8.V8RuntimeConstraints constraints)    Unknown\n           ClearScript.dll!Microsoft.ClearScript.V8.V8ScriptEngine.V8ScriptEngine(Microsoft.ClearScript.V8.V8Runtime runtime, string name, Microsoft.ClearScript.V8.V8RuntimeConstraints constraints, Microsoft.ClearScript.V8.V8ScriptEngineFlags flags, int debugPort)        Unknown\n           ClearScript.dll!Microsoft.ClearScript.V8.V8ScriptEngine.V8ScriptEngine(string name, Microsoft.ClearScript.V8.V8RuntimeConstraints constraints, Microsoft.ClearScript.V8.V8ScriptEngineFlags flags, int debugPort)        Unknown\n            ClearScript.dll!Microsoft.ClearScript.V8.V8ScriptEngine.V8ScriptEngine(Microsoft.ClearScript.V8.V8RuntimeConstraints constraints, Microsoft.ClearScript.V8.V8ScriptEngineFlags flags, int debugPort)              Unknown\n            JavaScriptEngineSwitcher.V8.dll!JavaScriptEngineSwitcher.V8.V8JsEngine.V8JsEngine(JavaScriptEngineSwitcher.V8.Configuration.V8Configuration config)  Unknown\n           JavaScriptEngineSwitcher.V8.dll!JavaScriptEngineSwitcher.V8.V8JsEngine.V8JsEngine()             Unknown\n           React.Core.dll!React.AssemblyRegistration.RegisterSupportedEngines.AnonymousMethod__3_0()   Unknown\n           React.Core.dll!React.JavaScriptEngineFactory.GetEngineForCurrentThread.AnonymousMethod__12_0(int id)                Unknown\n            mscorlib.dll!System.Collections.Concurrent.ConcurrentDictionary<int,JavaScriptEngineSwitcher.Core.IJsEngine>.GetOrAdd(int key, System.Func<int,JavaScriptEngineSwitcher.Core.IJsEngine> valueFactory)              Unknown\n           React.Core.dll!React.JavaScriptEngineFactory.GetEngineForCurrentThread()   Unknown\n           React.Core.dll!React.ReactEnvironment.ExecuteWithBabel<React.JavaScriptWithSourceMap>(string function, object[] args)    Unknown\n           React.Core.dll!React.Babel.TransformWithSourceMap(string input, string filename)    Unknown\n           React.Core.dll!React.Babel.TransformWithHeader(string filename, string contents, string hash)            Unknown\n           React.Core.dll!React.Babel.TransformFileWithSourceMap(string filename, bool forceGenerateSourceMap)                Unknown\n           React.Web.dll!React.Web.BabelHandler.RenderFile()  Unknown\n           React.Web.dll!React.Web.BabelHandler.Execute()        Unknown\n           React.Web.dll!React.Web.BabelHandlerFactory.ProcessRequest(System.Web.HttpContext context) Unknown\n            System.Web.dll!System.Web.HttpApplication.CallHandlerExecutionStep.System.Web.HttpApplication.IExecutionStep.Execute()                Unknown\n           System.Web.dll!System.Web.HttpApplication.ExecuteStep(System.Web.HttpApplication.IExecutionStep step, ref bool completedSynchronously)               Unknown\n           System.Web.dll!System.Web.HttpApplication.PipelineStepManager.ResumeSteps(System.Exception error)                Unknown\n           System.Web.dll!System.Web.HttpApplication.BeginProcessRequestNotification(System.Web.HttpContext context, System.AsyncCallback cb)        Unknown\n            System.Web.dll!System.Web.HttpRuntime.ProcessRequestNotificationPrivate(System.Web.Hosting.IIS7WorkerRequest wr, System.Web.HttpContext context)               Unknown\n           System.Web.dll!System.Web.Hosting.PipelineRuntime.ProcessRequestNotificationHelper(System.IntPtr rootedObjectsPointer, System.IntPtr nativeRequestContext, System.IntPtr moduleData, int flags)      Unknown\n           System.Web.dll!System.Web.Hosting.PipelineRuntime.ProcessRequestNotification(System.IntPtr rootedObjectsPointer, System.IntPtr nativeRequestContext, System.IntPtr moduleData, int flags)      Unknown\n           [Native to Managed Transition]               \n           [Managed to Native Transition]               \n           System.Web.dll!System.Web.Hosting.PipelineRuntime.ProcessRequestNotificationHelper(System.IntPtr rootedObjectsPointer, System.IntPtr nativeRequestContext, System.IntPtr moduleData, int flags)      Unknown\n           System.Web.dll!System.Web.Hosting.PipelineRuntime.ProcessRequestNotification(System.IntPtr rootedObjectsPointer, System.IntPtr nativeRequestContext, System.IntPtr moduleData, int flags)      Unknown\n           [AppDomain Transition]\n\n```\n\nSecond exception:\n```\nA first chance exception of type 'System.Reflection.TargetInvocationException' occurred in mscorlib.dll\nAdditional information: Exception has been thrown by the target of an invocation.\n\n        mscorlib.dll!System.RuntimeType.CreateInstanceImpl(System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, object[] args, System.Globalization.CultureInfo culture, object[] activationAttributes, ref System.Threading.StackCrawlMark stackMark)               Unknown\n           mscorlib.dll!System.Activator.CreateInstance(System.Type type, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, object[] args, System.Globalization.CultureInfo culture, object[] activationAttributes)                Unknown\n           mscorlib.dll!System.Activator.CreateInstance(System.Type type, object[] args)             Unknown\n           ClearScript.dll!Microsoft.ClearScript.V8.V8Proxy.CreateImpl<Microsoft.ClearScript.V8.V8IsolateProxy>(object[] args)      Unknown\n           ClearScript.dll!Microsoft.ClearScript.V8.V8IsolateProxy.Create(string name, Microsoft.ClearScript.V8.V8RuntimeConstraints constraints, bool enableDebugging, int debugPort)    Unknown\n           ClearScript.dll!Microsoft.ClearScript.V8.V8Runtime.V8Runtime(string name, Microsoft.ClearScript.V8.V8RuntimeConstraints constraints, Microsoft.ClearScript.V8.V8RuntimeFlags flags, int debugPort)                Unknown\n           ClearScript.dll!Microsoft.ClearScript.V8.V8Runtime.V8Runtime(string name, Microsoft.ClearScript.V8.V8RuntimeConstraints constraints, Microsoft.ClearScript.V8.V8RuntimeFlags flags)  Unknown\n           ClearScript.dll!Microsoft.ClearScript.V8.V8Runtime.V8Runtime(string name, Microsoft.ClearScript.V8.V8RuntimeConstraints constraints)    Unknown\n           ClearScript.dll!Microsoft.ClearScript.V8.V8ScriptEngine.V8ScriptEngine(Microsoft.ClearScript.V8.V8Runtime runtime, string name, Microsoft.ClearScript.V8.V8RuntimeConstraints constraints, Microsoft.ClearScript.V8.V8ScriptEngineFlags flags, int debugPort)        Unknown\n           ClearScript.dll!Microsoft.ClearScript.V8.V8ScriptEngine.V8ScriptEngine(string name, Microsoft.ClearScript.V8.V8RuntimeConstraints constraints, Microsoft.ClearScript.V8.V8ScriptEngineFlags flags, int debugPort)        Unknown\n            ClearScript.dll!Microsoft.ClearScript.V8.V8ScriptEngine.V8ScriptEngine(Microsoft.ClearScript.V8.V8RuntimeConstraints constraints, Microsoft.ClearScript.V8.V8ScriptEngineFlags flags, int debugPort)              Unknown\n            JavaScriptEngineSwitcher.V8.dll!JavaScriptEngineSwitcher.V8.V8JsEngine.V8JsEngine(JavaScriptEngineSwitcher.V8.Configuration.V8Configuration config)  Unknown\n           JavaScriptEngineSwitcher.V8.dll!JavaScriptEngineSwitcher.V8.V8JsEngine.V8JsEngine()             Unknown\n           React.Core.dll!React.AssemblyRegistration.RegisterSupportedEngines.AnonymousMethod__3_0()   Unknown\n           React.Core.dll!React.JavaScriptEngineFactory.GetEngineForCurrentThread.AnonymousMethod__12_0(int id)                Unknown\n            mscorlib.dll!System.Collections.Concurrent.ConcurrentDictionary<int,JavaScriptEngineSwitcher.Core.IJsEngine>.GetOrAdd(int key, System.Func<int,JavaScriptEngineSwitcher.Core.IJsEngine> valueFactory)              Unknown\n           React.Core.dll!React.JavaScriptEngineFactory.GetEngineForCurrentThread()   Unknown\n           React.Core.dll!React.ReactEnvironment.ExecuteWithBabel<React.JavaScriptWithSourceMap>(string function, object[] args)    Unknown\n           React.Core.dll!React.Babel.TransformWithSourceMap(string input, string filename)    Unknown\n           React.Core.dll!React.Babel.TransformWithHeader(string filename, string contents, string hash)            Unknown\n           React.Core.dll!React.Babel.TransformFileWithSourceMap(string filename, bool forceGenerateSourceMap)                Unknown\n           React.Web.dll!React.Web.BabelHandler.RenderFile()  Unknown\n           React.Web.dll!React.Web.BabelHandler.Execute()        Unknown\n           React.Web.dll!React.Web.BabelHandlerFactory.ProcessRequest(System.Web.HttpContext context) Unknown\n            System.Web.dll!System.Web.HttpApplication.CallHandlerExecutionStep.System.Web.HttpApplication.IExecutionStep.Execute()                Unknown\n           System.Web.dll!System.Web.HttpApplication.ExecuteStep(System.Web.HttpApplication.IExecutionStep step, ref bool completedSynchronously)               Unknown\n           System.Web.dll!System.Web.HttpApplication.PipelineStepManager.ResumeSteps(System.Exception error)                Unknown\n           System.Web.dll!System.Web.HttpApplication.BeginProcessRequestNotification(System.Web.HttpContext context, System.AsyncCallback cb)        Unknown\n            System.Web.dll!System.Web.HttpRuntime.ProcessRequestNotificationPrivate(System.Web.Hosting.IIS7WorkerRequest wr, System.Web.HttpContext context)               Unknown\n           System.Web.dll!System.Web.Hosting.PipelineRuntime.ProcessRequestNotificationHelper(System.IntPtr rootedObjectsPointer, System.IntPtr nativeRequestContext, System.IntPtr moduleData, int flags)      Unknown\n           System.Web.dll!System.Web.Hosting.PipelineRuntime.ProcessRequestNotification(System.IntPtr rootedObjectsPointer, System.IntPtr nativeRequestContext, System.IntPtr moduleData, int flags)      Unknown\n           [Native to Managed Transition]               \n           [Managed to Native Transition]               \n           System.Web.dll!System.Web.Hosting.PipelineRuntime.ProcessRequestNotificationHelper(System.IntPtr rootedObjectsPointer, System.IntPtr nativeRequestContext, System.IntPtr moduleData, int flags)      Unknown\n           System.Web.dll!System.Web.Hosting.PipelineRuntime.ProcessRequestNotification(System.IntPtr rootedObjectsPointer, System.IntPtr nativeRequestContext, System.IntPtr moduleData, int flags)      Unknown\n           [AppDomain Transition]\n\n```\n\nAfter second exception, VS turns off debugging (TargeInvocatonException kills app).\nReactSiteConfiguration.Configuration.SetReuseJavaScriptEngines(false); helped so far, but I have to test it more\n. ",
    "gacafy": "Hey Daniel, thanks for the suggestion. Unfortunately, JSON.NET 5.0.4 is incompatible with Microsoft.Owin.Security (version 3.0.0) and others.\nI also tried upgrading from JSON.NET 6.0.4 to 6.0.8 because it looked like there were some 'unsupported type' fixes. No luck there either. If it weren't for the security requirements of this project, I would just downgrade to 5.0.4.\nThanks for your attention on the issue, I will check back.\n. Awesome Daniel, thanks for the support. I will give it a whirl in the\nmorning.\nOn Mar 15, 2015 7:28 PM, \"Daniel Lo Nigro\" notifications@github.com wrote:\n\nThat was pretty tricky to track down, but it did end up being an issue\nwith the JSON.NET version:\n[image: Error message]\nhttps://cloud.githubusercontent.com/assets/91933/6659698/511cc3d4-cb48-11e4-8d47-a3dc3c680a4a.PNG\nThe \"real\" error message was masked by that try-catch block in that\nsegment of code. The try block had logic for parsing the data as JSON,\nbut the catch block did not. This meant that the error that ended up\nbeing thrown was due to the code paths being different, which is why I was\nconfused by it.\nThis actually seems somewhat specific to the MSBuild task which is\nprobably why I haven't gotten other reports about it (not many people use\nthe MSBuild task). NuGet automatically inserts assembly bindings into the\nWeb.config which means assembly version issues don't really happen with\nsites (or desktop apps). MSBuild can't really use assembly bindings.\nAnyways, 5021d39\nhttps://github.com/reactjs/React.NET/commit/5021d39e5c1cba600863332e7e2dc043b2321750\nfixed the code so the two code paths do the same thing (which made it start\nthrowing the correct error about Newtonsoft.Json) and 292cf49\nhttps://github.com/reactjs/React.NET/commit/292cf49bd08b6da775838eb1b14eb6a769402897\nupdated the referenced version of Newtonsoft.Json. The new build will be on\nthe development package server shortly (instructions here\nhttp://reactjs.net/getting-started/download.html#development-builds),\nor you can build it yourself if you like.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/reactjs/React.NET/issues/104#issuecomment-81353699.\n. I gave the development package a whirl but bumped into the same issue (the update might not have propagated yet?). I did build it and my issue has been resolved, thanks again.\n. \n",
    "rosdi": "Ok I have removed all references to the obsolete packages.\n. I am having this problem too.. but I think this only affect the syntax highlighting...\n. @Daniel15 Not sure this is coincidence or not, but when I downgraded to ReactJS.NET 2.1 it works!.. the syntax highlighting works and there is no more \"JSX Parser: Unable to communicate with JSX Parser\" error..\n. I had the same error.. but when I downgraded to 2.1.2 the problem disappears...\n. ",
    "ifolmedo": "We are using Windows Server 2008 R2 Standard 64 Bits with 2 GB RAM and .Net\n4.0.\nIIS managed pipeline is set to integrated mod and load user profile is set\nto false.\n\nIsmael\n2015-04-06 9:15 GMT+02:00 Daniel Lo Nigro notifications@github.com:\n\nWhat operating system and .NET version are you using on your UAT server?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/reactjs/React.NET/issues/108#issuecomment-89956594.\n. \n",
    "mikeroosa": "Yep, that did it. Thank you.\n. ",
    "ProgrammedMikey": "been trying to fix this all day, should have mentioned it in the tutorial\n. ",
    "xabikos": "Thanks for the quick response @Daniel15 I will keep an eye on it\n. Thanks for the update @Daniel15 \n. Have you any idea when you will upgrade nuget package too?\n. Thank you so much for the update. It's right on time. I want to incorporate the webpack with ES6 style syntax for our project. \n. I am working on a pull request to resolve this\n. Thanks for the comments @Daniel15 I hope I fixed all the issues. If I sould change anything else please let me know.\n. Never micnd Daniel! Happy I helped!\n. Thanks for the quick respond. I made the changes and it should be fine. Any plans for a new release?\n. The sample works fine with the beta4 version of asp.net 5. From the error you mentioned I guess that you tried to build and execute the sample with beta 5 and not beta 4. Try to execute the dmvm list on a command line and see which version of dnx is active. \nI am saying this as  a couple of days ago I made the changes to support the beta 5 version and will be released soon. \n. ",
    "andersea": "Thanks. Your suggestions have been applied. \n. I was summoned. 8-)\n. Why shouldn't a production app use the default route? I have done a couple of MVC apps and they both use default routes for almost everything. It seems to work fine.\nI agree that the default route in this case looks a bit silly, but normally I think comments would be in another controller than the home controller, or maybe even a WebAPI call and then that would fix the route automatically.\n. ",
    "WirthAware": "I was looking for something similar. I'm using React and Redux. When we use server-side rendering i need to sync the redux initial state server-side and client-side. \nI had a look in the redux receipes for server-side rendering: https://github.com/rackt/redux/blob/master/docs/recipes/ServerRendering.md\nThat matches to this idea. \nMy solution at the moment is more an anti pattern, but found no better way to do it. \nI'm using getInitialState function from React component to create the redux store with the initial state from Html.React. The redux state is now in sync server and client side. I'm not happy with it, but it works. \nI think that ability could help to build apps with React.NET. \n. @deevus i'am a little bit lost. I was looking for a elegant solution to pass through the app state from the server redux to client redux and keep it in sync. \nHow could onClick help me to do so? \nAt the moment the easiest solution was just to use getInitialState from the root App component. \nI'am also using redux on a per page basis at the moment, each page is rendered server side. \n. As far as i understand it correctly you can now tell reactjs.net to load your own reactjs version.\nIf you still want to use the React version from react.js.net you don't need these files. \nIf you want to use reactjs from e.g. npm this will help you to bundle the reactjs version.\nThese files are just helper starting points to do so. \nAnd you have to tell your ReactConfig that you are loading reactjs by ding:\nReactSiteConfiguration.Configuration\n            .SetLoadReact(false)\n. Thanks for your reply. \nThe only thing i got was a warning \n\"[.NET] Warning: Each child in an array or iterator should have a unique \"key\" prop. Check the render method of .... See https://fb.me/react-warning-keys for more information.\"\nBut i already fixed that warning. \nI'm not an React expert yet, but after re-rendering, somewhat should keep the input focus. \nI found some similar issues in the web and it seems the key indicates the focused input field. \nAnd the key has an influence to the reactid? And when the key changed may i lose my focus? \nDoes this make sense? \nhttp://stackoverflow.com/questions/22573494/react-js-input-losing-focus-when-rerendering\nhttp://reactkungfu.com/2015/09/react-js-loses-input-focus-on-typing/\nThe key's i'm binding are uniq but the generated reactid is different on the server side as on the client side. I was guessing thats the issue.  \nI have the following structure. A list of Group Components that has a List of SubGroup Components wich has a list of EditItems which includes the input field. As i mentioned, when i'm now change the input the focus is losed. After clicking the input again and change the value it works as expected. The only difference is, its now rendering client side instead of server side. \nAny other ideas? \n. Seems to be fixed with 2.3.0\n. ",
    "deevus": "@WirthAware I'm trying to solve the same problem, but I don't want to take your approach. I'm using Redux on a per page basis but I was trying to avoid creating specific components for every use.\n. For an event handler, perhaps it could be something like:\nvar props = new {\n   onClick = new JsString(\"function (e) { e.preventDefault(); ... }\")\n};\nReact.NET would pass it as a function. Thoughts?\n. @WirthAware Unless I'm mistaken, without some way to parse arbitrary Javascript to a child component I can't create a <Provider> with children that can change per page. It's not part of a one-page application so the state shape isn't static. \n. We're getting this issue as well. \n. This issue keeps coming up for us to the point that I've just removed React.NET functionality from our site. Luckily we weren't doing much heavy lifting with it so it wasn't a massive job. \n. ",
    "keithn": "is there a work around for this? even knowing the text of the line of code that's a problem would be useful\n. this is what I ended up doing....\n(using node)\nnpm install -g react-tools\nthen \njsx -w -x jsx .\\jsx output  \nwhere output is just directory, and .\\jsx is the folder I have my jsx code ( in subfolders)\nThis continuously watches the code and tells you about parse errors straight away.\n. problem is knowing which file.\n. ",
    "staznz": "I would also be very interested in this\n. That works brilliantly. Thanks @keithn \n. ",
    "cloudybrain": "I am having this problem even when setting - BundleTable.EnableOptimizations = false;\nSo there really is no optimizations happening.. maybe if this is turned off, we can capture the file, and if its turned on, make the debug just as encryptive as it is now?\n. I'll try switching to V8. As far as the difference, I'm really not sure. The network admin says that the only difference is production is external facing, and the dev box is not. Same OS,  same .NET framework version, same IIS version. \n. Btw, @peteducanson,  does having a different IE version installed play a factor in displaying the yellow screen of death? I wouldn't think that'd be a difference.. \n. Hmm, well we did check other browsers like chrome and android, same difference. For stacktrace, when I get into work tomorrow, I'll see what if there is any more details I can give you. \n. Alright thanks,  I'll show you what I'll come up with within the next two days (maybe tomorrow). Thanks for your time and patience in this. \n. ",
    "coyaniv": "The problem is coming from this code but I do not understand what is the problem...\n //\n                      //  By signing up, you agree to Terms of Use and Privacy Policy.\n                        //\n                       // Already got an account? Log In//\n                 //   \n. https://gist.github.com/coyaniv/d5a69e2097a700a81576\n. I'm not using  ClearScript.V8 locally (could not find this folder) but I'm still getting same error ...\nThe line number is point on \"}\" \n. Why this error display only on the Azure env.? What's the difference between Azure env to Local?\n. https://drive.google.com/file/d/0B2eZcvKLnZ6lb0FDYWNYQ1Q2cnM/view?usp=sharing\ngo to /test\nThe error:\nError while loading \"~/dist/scripts/react-server.jsx\": ReferenceError: Intl is not defined\n    at Script Document [6]:2401:55 ->         getNumberFormat  : intl$format$cache$$default(Intl.NumberFormat),\n    at Script Document [6]:2808:4\nLine: 2401\nColumn:55\n. ",
    "samppis": "I had this same problem and found a way around it by running V8 in Azure. Here's a blog post I wrote about it:\nhttp://www.samulihaverinen.com/web-development/dotnet/2016/01/19/how-to-run-clearscript-v8-javascript-engine-in-azure/\n. @Daniel15 Sure, I'll try to find some time for writing the documentation :smile: And thanks for upgrading the JavaScriptEngineSwitcher. Please let me know when it's done so that I can update that part on the blog post.\n. @Daniel15 I'm having trouble building the site (on windows). Running jekyll build gives the following error even though I've installed jekyll, jekyll-assets and bourbon:\nC:/tools/ruby22/lib/ruby/2.2.0/rubygems/core_ext/kernel_require.rb:54:in `require': \ncannot load such file -- jekyll-assets/bourbon (LoadError)\nWhat versions of those gems are you using? If you want you can shoot me with an email: samuli.haverinen@gmail.com\n. @Daniel15 Thanks. Unfortunately even after hours of trying I can't get the site to build. I'm not that familiar with ruby either but my guess is that it's a version conflict. When I run gem install jekyll jekyll-assets bourbon the following versions are installed:\njekyll (3.0.2)\njekyll-assets (2.1.2)\nbourbon (4.2.6)\nI tried to install the same versions that you have using Development kit but without luck. Running for example gem install jekyll -v 2.5.3 gives the following error and I have no clue what might be causing it:\n```\nBuilding native extensions.  This could take a while...\nERROR:  Error installing jekyll:\n        ERROR: Failed to build gem native extension.\nC:/tools/ruby22/bin/ruby.exe -r ./siteconf20160124-10120-z9bwh3.rb extconf.rb\n\ncreating Makefile\nmake \"DESTDIR=\" clean\nmake \"DESTDIR=\"\ngenerating stemmer-x64-mingw32.def\n      0 [main] sh 8356 fork_copy: linked dll data/bss pass 0 failed, 0x1E8000..0x1E8AD8, done 0, windows pid 10144, Win32 error 487\n/bin/sh: fork: Resource temporarily unavailable\nmake: *** [stemmer-x64-mingw32.def] Error 128\nmake failed, exit code 2\nGem files will remain installed in C:/tools/ruby22/lib/ruby/gems/2.2.0/gems/fast-stemmer-1.0.2 for inspection.\nResults logged to C:/tools/ruby22/lib/ruby/gems/2.2.0/extensions/x64-mingw32/2.2.0/fast-stemmer-1.0.2/gem_make.out\n```\n. @Daniel15 Thanks for updating the JavaScriptEngine switcher. It seems to magically fix all issues and the V8 engine now runs out of the box in Azure! I still thought it might be a good idea to document the Azure support so I wrote a brief guide and submitted a pull request.\n. I'm also having this same problem. Trying to get react-bootstrap working on Azure but haven't found a working solution yet. I have tried to run V8 in an ASP.NET 5 Azure WebApp but it seems like the JavaScriptEngineSwitcher isn't supporting ASP.NET 5 yet.\nAny help would be appreciated!\n. I finally found a way to get it working by running V8 in Azure. Here's a blog post I wrote:  http://www.samulihaverinen.com/web-development/dotnet/2016/01/19/how-to-run-clearscript-v8-javascript-engine-in-azure/\nI would suggest ReactJS.NET to update the JavaScriptEngineSwitcher.V8 to the latest version as the current one doesn't work in ASP.NET 5 (it requires a configuration section in web.config or otherwise a null reference exception is thrown by the constructor).\n. Here's how to get ReactJS.NET running in Azure using the V8 engine: http://www.samulihaverinen.com/web-development/dotnet/2016/01/19/how-to-run-clearscript-v8-javascript-engine-in-azure/\nI'll try to write a documentation page for running ReactJS.NET in Azure once I get the Jekyll site to build locally.\n. Great, thanks! That might be a good idea ;)\n2016-01-25 14:10 GMT+07:00 Daniel Lo Nigro notifications@github.com:\n\nThanks, I pushed this to the live site:\nhttp://reactjs.net/guides/azure.html\nThis makes me think that I should probably add a better way to get a list\nof all the available engines...\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/reactjs/React.NET/pull/217#issuecomment-174422112.\n. \n",
    "SoonDead": "Thank you.\n. The component loads it's data from a web service by an AJAX request.\nThis service is a black-box from our perspective, it returns JSON.\nThe problem is that I want to seed the component with initial data, so the first server side render has some actual value.\nI'm trying to do this by fetching the result from the webservice server side, and feeding the result string as a parameter to my component:\n@Html.React(\"comp\", new { initialJsonResult = result })\nI could create a type just to deserialize the result into, so React.NET could later serialize it into an object literal.\nOr I could do what I'm currently doing: calling JSON.parse(this.props.initialJsonResult) in getInitialState().\nCircumventing the web service and try to access the data in a non-json format would require us to tear out a lot of guts.\n. This is supposed to fix #122\n. I think I have agreed to it before, but I've filled it out again.\n. Works perfectly, thanks!\n. I might be able to pack react-dom into my bundle, only React needs to be in he global scope. I will try that on monday.\nThe woraround I mention works fine too, it is just ugly.\n. On the client side I'm referencing react.js and react-dom.js locally.\nOn the server side I'm using whatever ReactJS.NET uses by default.\nMy issue is only a server-side one. I'll explain it in more detail on monday since it's on my work machine.\n. It is used by the modal component of react-bootstrap. There is a import ReactDOM from 'react-dom'; at the start of a file and although the server does not actually call anything on it the import fails if react-dom is not available.\n. Yes it actually helps, thanks.\nAlso to try to nail down the exact issue:\nDebugging only shuts down if the exception happens outside of a request (if it happens during (or more precisely as a result of) a request the error page is properly shown).\nIt is happening for both syntax errors and execution errors.\n. Yes, I'm using AddScriptWithoutTransform because I already transform my scripts with webpack.\n. I'll try it when I get to work (in about 1-2 hours).\n. It seems to be working OK (it's not throwing exceptions when on a background thread).\nThanks you!\nI have no idea if the javascript engine is properly reused or not, but the react component properly renders upon subsequent requests when the error is fixed.\n. You are right. \n1. Updating other packages (like nlog config) works the same way.\n2. I have tried the update in a test project and it does ask if I want to replace the file. Not sure what happened the first time around, I might have clicked on in while VS was in a semi-frozen state, or something similar.\n. ",
    "st1pps": "The current version of react.js is targeting asp.net 5 beta-3, while VS 2015 RC automatically references beta-4. It seems that there are quite a few changes between the two beta versions.\n. After updating all references and changing the framework from ASPNET50 to DNX 4.5.1, I just had to edit JsxFileSystem.cs to make it compile and pass all tests. \nI forked it: https://github.com/st1pps/React.NET/tree/ASPNET-5-beta4\n. Sorry for the unecessary changes, and thank you very much for reviewing and merging. \n. ",
    "stefanwuthrich": "yes please. i try'd to upgrade to beta4, but to complex for me :-(\n. @st1pps Thank you so much. You saved my day. works perfect ;-)\n. ",
    "chrisjhanna": "Awesome, thanks for this.\n. ",
    "ada-lovecraft": "Just ran through the guide on ubuntu. Made it further but still:\n$ g++ jscontext.cpp jsengine.cpp managedref.cpp bridge.cpp jsscript.cpp -o libVroomJsNative.so -shared -L /usr/local/src/v8-3.17/out/native/lib.target/ -I /usr/local/src/v8-3.17/include/ -fPIC -Wl,--no-as-needed -l:/usr/local/lib/libv8.so.3.17.16.2\njsengine.cpp: In member function \u2018jsvalue JsEngine::ErrorFromV8(v8::TryCatch&)\u2019:\njsengine.cpp:260:34: error: \u2018memset\u2019 was not declared in this scope\n  memset(error, 0, sizeof(jserror));\n. #include <cstring>\nneeds to be added to jsengine.cpp for this to build.\n. ",
    "andersekdahl": "We've started to use Edge.js for server rendering React, and so far so good. It doesn't require you to install Node.js, it bundles Node.js with the NuGet package. All APIs to communicate with Edge are aync from the C# side which is nice, but it makes it impossible to use Edge from an HtmlHelper (which is fixed in MVC6 with tag helpers).\nAnother thing to be aware of is that there can only be one Node/Edge instance/thread per IIS process, so you need to change the number of IIS workers for it to run in parallell.\n. We're actually using Webpack to build a bundle for server rendering that we require with Edge.js.\nWe're still in early stages of server rendering React, and the interesting options are this project, Edge.js and NodeServices where NodeServices is just an early proof of concept, but it's interesting to see Microsoft exploring this.\nWhen we have a working site with SSR and Edge.js, I intend to benchmark it and then try out React.NET to compare them. I'd also be very interested in testing SuperchargedReact.Net, but I'm not sure how far you have come with that project?\n. @PeteDuncanson That's very interesting! Documentation would of course be nice, but I prefer digging around in code anyway.\nWhat kind of load do you have on the sites you're using it on?\nAre these repos up to date and a good starting point to test it out?\n- https://github.com/Offroadcode/Umbraco-React-Starter-kit\n- https://github.com/Offroadcode/SuperchargedReact.Net\n. I've started to play with it, having some issues with the ClearScript dlls but I'll figure it out.\nWhat kind of load does the sites using SuperChargedReact.Net have? Number of concurrent users?\n. Thanks for the pointers!\nYou never answered my question about the load on your sites though. :)\n. I've never used discord but I'd definitely join if there was a channel to talk about React + ASP.NET!\n. Thanks for answering, much appreciated!\nHave you done any benchmarks on the difference between rendering the same type of content with Razor and React? \nIn your own view, would you be comfortable using this for a business critical site with moderate to heavy load?\n. Btw, didn't mean to throw you a curve ball question about your project like that. I have every intention to research this myself as well (and of course share my findings!).\n. Here are the results of some early tests. The tests are a bit naive, so take the results for what they are.\nI created three projects, one with vanilla MVC and a few Razor views. The second project outputs the exact same thing, but with React.NET instead of Razor. And the third also outputs the same but using React with Node.js.\nThe test was to send 100 000 requests through Apache Bench to them on my Windows 8 developer machine.\nRazor won the tests. Node.js came in at about 50% slower than that, and React.NET at about 800% slower than Razor.\n800% might sound like a lot but I'm quite impressed given how little the Razor-project had to do in comparison.\n. I didn't change anything, just downloaded through NuGet and ran it. The limit of 25 engine instances should be somewhat responsible of how far behind Razor it was since I set the concurrency to 100 in AB.\nI should also say that I installed React.NET in a project that we are going to ship in a few months that performs nowhere near as fast as my Razor example (since it does a lot of \"real work\" like database calls etc). And when I measured that, React.NET with some componenets rendering server side only slowed down the benchmark by 1/20.\nWhat's your take on https://github.com/Offroadcode/SuperchargedReact.Net? It claims to be faster because it doesn't use an engine pool. To me that sounds like using Node.js without the cluster module. And since the React rendering is syncronous I'm not sure how much you benefit by using just one engine instance.\n. @PeteDuncanson Thank you for the clairification! I'll definitely check out SuperChargedReact!\n. ",
    "DamageInc54": "Good point. I hadn't thought of just including the generated files in the project but excluding them from TFS. I guess that should work both locally and on the build server. Thanks much. And thanks for writing this great tool.\n. Worked like a charm. Thanks for the idea.\nI'm not closing this in case you want it to remain open until you make the changes you described above. My issue is resolved so close it at your discretion.\n. ",
    "zpao": "Probably. You're welcome to use newer JSXTransformer (or even just browserify latest JSTransform, which includes JSX, directly), we just won't support it officially.\n. ",
    "don-smith": "+1 Babel integration would be excellent. It has good JSX support and heaps of ES6 features.\n. Thanks for the ultra-rapid response @Daniel15. My buddy @kevnz said the same thing and pointed me to the resources you mentioned: http://reactjs.net/guides/webpack.html and https://github.com/reactjs/React.NET/tree/master/src/React.Sample.Webpack. These should prove to be very useful.\n. ",
    "espot": "In the debugger I get: \" ReactJS.NET has not been initialised correctly.\" when running as a 64 bit process.\n. InnerException : \nTinyIoC.TinyIoCResolutionException: {\"Unable to resolve type: React.IReactEnvironment\"}\nData: ListDictionaryInternal (count 0)\nHelpLink: null\nHResult: -2146233088\nInnerException: null\nMessage: Unable to resolve type: React.IReactEnvironment\nSource: React\nStackTrace:    at React.TinyIoC.TinyIoCContainer.ResolveInternal(TypeRegistration registration, NamedParameterOverloads parameters, ResolveOptions options)\n   at React.TinyIoC.TinyIoCContainer.ResolveResolveType\n   at React.Web.Mvc.HtmlHelperExtensions.get_Environment()\n. ",
    "toddlucas": "Oh I see. So I need to keep JavaScriptEngineSwitcher.V8, due to the dependency, but that component dynamically loads the ClearScript assemblies if it finds them (due to the need to run 32 bit or 64 bit). Thanks for the tip.\n. ",
    "livesoftware": "Really would be great if somehow the React Router could be used in conjunction with React.NET.\n. ",
    "Jarlotee": "@Daniel15 \nWhat is the correct way to set a global variable in the engine?\nI have been using this:\ncsharp\nReact.ReactEnvironment.Current\n    .Execute(\"var myStore = Components.StoreFactory({ hello: 'world' });\");\nBut find that after rendering a few components the variable is no longer available from the global scope.\n. Ah just saw #270 where this change was made, looks like a work around for garbage collections.\n. ",
    "Lercher": "Hi all,\nI have a similar issue with server side rendering using React.Core and pooling enabled, when I wanted to pass a .Net service as a function to a component. I noticed that I can't submit a .Net model object's method, a delegate nor a Func<> to environment.CreateComponent(), most probably because only it's JSON serialized form is passed to RenderHtml(). I think this is by design and that it is OK.\nSo, just to evaluate, I looked up the source code, hacked a handle to a IJsEngine object and injected a .Net object directly with engine.EmbedHostObject(\"myservice\", new MyService());. Now I can indeed use myservice-methods as I wanted, single-threaded. So there are no principal obstacles using .Net methods. Now here is the problem: since RenderHtml() indirectly uses the environment's Engine property, you cannot be sure which engine from a pool is used to render the component and thus if the .net service targets the desired component.\nMy request is: Please add a way to make full .Net objects including their methods accessible to the rendering process. How? I don't know. Probably by adding two optional parameters to RenderHtml(..., string globalObjectName, object/dynamic globalObject), or by providing a public way to allocate/deallocate an engine and making RenderHtml(IReactComponent cmp, bool renderContainerOnly = false, bool renderServerOnly = false) a method of IJsEngine. I'm not quite sure, if a callback that's called when a JS engine is initialised, would be a good way, it would be \"too global\" imho.\nPS: I'm fully aware that such code won't work client side any more in the first place, unless such global service variables can be provided as JS code on the client.\n. ",
    "yrki": "Hi @PeteDuncanson - How has Supercharged been working in your live environment? I've just been running a load test with 1000 users for 3 minutes on React.Net, and it seems to get a lot of JSPoolExhaustExceptions. Have you done any load testing with SuperChargedReact?\n. ",
    "remiroyc": "Any news about a real benchmarking between razor, react.net (with different engine configurations and limits) and SuperChargedReact ?\n. ",
    "RichardWright": "I hate to resurrect this,  but as it is now 2018 does anyone have any updated figures?. @Taritsyn thanks. With the performance of .net core becoming popularised, a high performance react rendering library I think could get popular. \nIs this library good enough or it 'blazing'?. ",
    "Taritsyn": "@RichardWright Now there is a more recent discussion.. @Daniel15 @dustinsoftware More than a year ago, Daniil Sokolyuk developed his own implementation of the JSPool specifically for high-load sites.. @orobert91 It seems to me, that this issue is no longer relevant, because all the major problems associated with the JavaScriptEngineSwitcher.Msie and JavaScriptEngineSwitcher.ChakraCore were solved in version 2.2.0.. @Jamo10 To begin, I recommend you upgrade to latest stable version of the JavaScript Engine Switcher (version 2.4.10).\nThen you must explicitly register a JS engines and set default engine (in your case MsieJsEngine). How to register engines, read the \u201cRegistration of JS engines\u201d section of documentation. JS engines must be registered before to the React.NET's services.\nIf after all these actions an error occurs, send me an error message with the full stack trace.. > I have followed your instructions about it. I have pasted this \"copyToOutput\": { \"include\": [ \"ClearScript.V8\" ] }\n\nto my project.json and then I copied ClearScript.V8 dlls folder to my application. After build there is ClearScript.V8 folder in my bin. But like I sad sometimes I get this error again. Specially in debug mode.\n\n@DanielDziubecki In ReactJS.NET 3.0.0 and JavaScript Engine Switcher 2.X no longer need to do this.\n. > Is it possible to run on Mac using javascript engine other than v8?\n@fujihara If you are using a .NET Core, then try to install the following packages: JavaScriptEngineSwitcher.ChakraCore and JavaScriptEngineSwitcher.ChakraCore.Native.osx-x64.\n. > This appears to be sufficient to get everything working, however as @luty81 observed the initial call is very slow. Subsequent calls seem to be fine so it is likely the cost of starting up the JavaScript engine.\n@stimms, @luty81 Jint is very slow JavaScript engine, because it's written entirely in .NET and works exclusively as interpreter. In your case it is better to use the JavaScriptEngineSwitcher.ChakraCore. \n. Hello, Malachi!\n\nUnable to load DLL 'ChakraCore': The specified module could not be found.\n\nYou have installed the JavaScriptEngineSwitcher.ChakraCore.Native.debian-x64 package?. What version of Ubuntu are you using? \nGive a example of the frameworks section from the project.json file.. json\n\"frameworks\": {\n  \"netcoreapp1.0\": {\n    \"buildOptions\": {\n      \"define\": [ \"DNXCORE50\" ]\n    }\n  }\n},\nI recommend to remove all the JavaScriptEngineSwitcher.V8 packages, because it is not compatible with the netcoreapp1.0.\n\nMy debian machine uname produces: Linux vm-c131-debian 3.16.0-4-amd64 #1 SMP Debian 3.16.36-1+deb8u2 (2016-10-19) x86_64 GNU/Linux\n\nI have built and tested the libChakraCore.so assembly for the JavaScriptEngineSwitcher.ChakraCore.Native.debian-x64 package on Ubuntu 16.04.1 x64.\nMuch has been done by analogy with the ASP.NET Libuv Package, therefore not tested for compatibility with Debian.\nTry to build the libChakraCore.so assembly on Debian. To do this, follow these steps:\n\nDownload source code of ChakraCore version of October 29, 2016 and uncompress it.\nOpen terminal and start the update process:\n sudo apt-get update\n sudo apt-get dist-upgrade\nInstall dependencies:\n sudo apt-get install -y build-essential cmake clang libunwind-dev libicu-dev\nChange current directory to the directory with source code of ChakraCore.\nStart build:\n ./build.sh\nFrom the BuildLinux/Release/ directory copy the libChakraCore.so file to the ~/.nuget/packages/JavaScriptEngineSwitcher.ChakraCore.Native.debian-x64/2.1.0/runtimes/debian-x64/native/ directory.\n\nAfter all these steps, run your web application.. Hello, Malachi!\n\nLastly, revisiting the Ubuntu scenario (the title issue) - any clues as to why the FileNotFoundException is occurring?\n\nTo solve this problem can only @Daniel15, because I am creator of the JavaScript Engine Switcher and have to the React.NET project only indirectly related.\nIt seems to me, that the problem is in implementation of the MapPath method of AspNetFileSystem class.\n. Hello, Paul!\n\nI had this same error running the dotnet docker container. \n\nWhich Linux are you using?\n\nI downloaded that and copied the libCharkaCore.so to the ~/.nuget/packages/JavaScriptEngineSwitcher.ChakraCore.Native.debian-x64/2.1.0/runtimes/debian-x64/native/ directory and it fixed it.\n\nMay be need to upgrade to version 2.4.6?\n\nWould it be worth updating the native packages so it's just a linux-x64 one and could track the official binary releases?\n\nI do not quite understand how Microsoft's employees build such an assembly. In official instruction, nothing is written about this. Microsoft's version of the libCharkaCore.so assembly weighs 2.5 times more than my version. As an experiment, I will add the JavaScriptEngineSwitcher.ChakraCore.Native.linux-x64 package to version 3.0.0 Alpha 6.. > I'm not sure how they'd be a universal library like that either, but being 2.5 times the size, it does suggest there's a lot more in there! Perhaps they explain it if we asked the question there?\nIt seems, that Microsoft's employees build a ChakraCore library with the following parameters:\n./build.sh --embed-icu -j=2\nI.e. your problem is very similar to the same problem with OS X. Both problems caused by lack of a suitable version of the ICU library. All this universality is achieved through embedding of the ICU-57 library to the ChakraCore assembly (because of this, assembly size is increased by 2,5 times).. @pablinos In version 3.0.0 Alpha 6 ICU-57 library was embedded into the libChakraCore.so and libChakraCore.dylib assemblies.. @pablinos I moved the corresponding functionality from 3.X branch to version 2.4.12.. @stevenguh If you use the JavaScriptEngineSwitcher.V8 version >= 2.1.0, then you need to install the JavaScriptEngineSwitcher.V8.Native.win-x86 and JavaScriptEngineSwitcher.V8.Native.win-x64 packages.\nAbout this written in release notes and relevant section of the documentation.. > the following issue in MsieJavaScriptEngine repo may be related: Attempted to read or write protected memory issue\n@ORuban Try upgrade to the MSIE JavaScript Engine version 2.0.2.. > After I update: I will get React.TinyIoC.TinyIoCResolutionException...\n@stevenguh Looks like I managed to fix a very old error (\u201cAttempted to read or write protected memory.\u201d).\nThe second error (\u201cReact.Exceptions.ClearScriptV8InitialisationException: Failed to initialise ClearScript V8. This is most likely caused by the native libraries (ClearScriptV8-64.dll and v8-x64.dll) missing from your app's Bin directory, or the Visual C++ runtime not being installed. Please ensure your app is referencing the JavaScriptEngineSwitcher.V8 NuGet package, and refer to the ReactJS.NET site for moredebugging tips.\u201d) occurs, because of an incorrect deployment of the native assemblies. When you install the JavaScriptEngineSwitcher.V8-packages via NuGet to .NET 4.X application, then in project file added a MSBuild task, that copies the native assemblies in to the bin directory.. > However, I then hit an error where it says there is no JavaScript Engine installed so I'm not sure if this is actually a step backwards and not triggering the violation bug. If I add a native package the issue returns.\n@jpsingleton Can you give the full text of error message?. @jpsingleton By the way, what JS engine you have selected by default: MsieJsEngine or ChakraCoreJsEngine?. > ReactEngineNotFoundException: No usable JavaScript engine was found. Please install a JavaScript engine such as React.JavaScriptEngine.ClearScriptV8 (on Windows) or React.JavaScriptEngine.VroomJs (on Linux and Mac OS X). Refer to the ReactJS.NET documentation for more details.\nAbout this error, I can not say anything, because it is handled at the React.NET level.\n\nInterestingly the x86 package doesn't trigger the bug but the x64 one does. It still doesn't detect it as an engine though. I've tried all of the the ones listed as supporting .NET Standard in the docs. I'll just stick with the classic .NET Framework but hopefully this might point you in the right direction.\n\nI recommend for Windows to install 2 packages at once: JavaScriptEngineSwitcher.ChakraCore.Native.win-x86 or JavaScriptEngineSwitcher.ChakraCore.Native.win-x64.. > I suggest to remove the engine selection functionality from the package and assigning responsibility for it to the user who configures React.NET. For example, it will be similarly to the DBMS selection in the Entity Framework Core.\n@Daniel15 @dima117 @holmescn Good idea, but I would go further: need to remove from the React.Core all JavaScriptEngineSwitcher.* dependencies except for the JavaScriptEngineSwitcher.Core. Thus, users will not need to download unnecessary dependencies. Anyway we need to install manually the packages with native assemblies for the JavaScriptEngineSwitcher.V8 and JavaScriptEngineSwitcher.ChakraCore. I use this approach in the Bundle Transformer and it works great for many years. This approach adds only one additional step in configuring of library - selection and installation of JavaScript engine.\nAll problems, that prevented to do it have already been resolved in latest versions of the JavaScript Engine Switcher:\n\nFor a long time already when using the MSIE JavaScript Engine in different threads there are no errors.\nMSIE JavaScript Engine and JavaScriptEngineSwitcher.ChakraCore are run in a separate threads with increased stack size.\nCreated a module, that supports VroomJs - JavaScriptEngineSwitcher.Vroom. @billschen Starting with version 2.2.0 JavaScriptEngineSwitcher.V8 requires msvcp140.dll assembly from the Visual C++ Redistributable for Visual Studio 2015.. @billschen ClearScript.V8 is a third-party package, that has no relation to the JavaScript Engine Switcher.\n\n\nmy be i don't nee to install ClearScript.V8 but install JavaScriptEngineSwitcher.V8.Native.win-x64??\n\nYou need to install the JavaScriptEngineSwitcher.V8.Native.win-x64 package. Information about this is in description of package and documentation:\n\nThis package does not contain the native ClearScript and V8 assemblies. Therefore, you need to choose and install the most appropriate package(s) for your platform. The following packages are available:\n\nJavaScriptEngineSwitcher.V8.Native.win-x86\nJavaScriptEngineSwitcher.V8.Native.win-x64. > 5. follow the ClearStrip Read Me instruction\uff1aFor ASP.NET projects, we recommend that you add these assemblies( these assemblies can be found in ..\\packages\\JavaScriptEngineSwitcher.V8.Native.win-x64.2.2.0\\runtimes\\win7-x64\\native and ..\\packages\\JavaScriptEngineSwitcher.V8.Native.win-x86.2.2.0\\runtimes\\win7-x86\\native ) as content\nfiles at the root of your web application and set their \"Copy to Output\nDirectory\" properties to \"Do not copy\". Like this:\n\n\n@billschen For JavaScriptEngineSwitcher.V8 this is not needed. During installation of JavaScriptEngineSwitcher.V8.Native.* packages all necessary settings will be made automatically.\nYou are too much complicated the installation process. A simpler and more universal installation method is described in the official documentation.. > I try not copy these assemblies to the root of my web application\u3002but it fail\n@billschen Most likely, your csproj file already contains errors.\nTo fix these errors you need to do the following:\n\nRemove the following packages: ClearScript.V8, JavaScriptEngineSwitcher.V8, JavaScriptEngineSwitcher.V8.Native.win-x86 and JavaScriptEngineSwitcher.V8.Native.win-x64.\nSave a project file.\nClean a bin directory.\nInstall the following packages: JavaScriptEngineSwitcher.V8, JavaScriptEngineSwitcher.V8.Native.win-x86 and JavaScriptEngineSwitcher.V8.Native.win-x64.\nSave a project file.. @billschen Better try to create a project from scratch.. Hello, Andrey!\n\nWhat versions of the JavaScriptEngineSwitcher.V8, JavaScriptEngineSwitcher.V8.Native.win-x86 and JavaScriptEngineSwitcher.V8.Native.win-x64 packages do you use?. > Now I'm using the latest version available 2.2.0.\nThis error no longer occurs?. Try to register the V8JsEngine manually.\n\nAre you using V8RuntimeConstraints to specify memory usage limits?\n\nI recommend you also read the \u201cRegistration of JS engines\u201d and \u201cJS Engine Switcher: V8\u201d sections of the JavaScript Engine Switcher's documentation.\nIf you plan to use ASP.NET Core in your projects, then try the JavaScriptEngineSwitcher.ChakraCore.. Install-Package Microsoft.ChakraCore\n@jyee117 This package is not needed. I recommend you to read the documentation.\n. @andpoulsen @jyee117  I recommend to read the \u201cMisconceptions about the JavaScript Engine Switcher version 2.X\u201d post.. > Install-Package Microsoft.ChakraCore (I think this is key to enabling ChakraCore on the server)\n@andrewwang1tw I recommend you to read the \u201cChakraCore\u201d section of \u201cMisconceptions about the JavaScript Engine Switcher version 2.X\u201d discussion.. @Skovanden In my opinion, problem in the following settings:\ncsharp\n\u2026\n.SetMaxEngines(50)\n.SetStartEngines(20);\nTry changing them to the following settings:\ncsharp\n\u2026\n.SetMaxEngines(5)\n.SetStartEngines(3);. @ashkansiroos From your reports it is seen, that memory leaks are not present in .NET wrappers, but are present in native libraries. That is, it turns out, that cause of leaks are the original libraries (ChakraCore.dll and v8-x64.dll), which are used in a huge number of projects (including Node.js).\n\nThen I've changed the engineswitcher to use V8. The results was very bad :(\nThe site was very slow and it was drinking the memory like if it is beer :\\ and there was some exceptions for some reason. V8 is using 5.68 GBytes of memory with only 200 allocations.\n\nBack in october last year, ClearScript.V8 showed very good results in terms of memory consumption.\n@ashkansiroos @Skovanden I think the problem is that for compilation of each JSX file need to execute a large amount of JS code (react.generated.min.js file weighs 156 KB and babel.generated.min.js file weighs 650 KB). The results of the compilation of JSX files must be cached on the server side (in memory). Try to use for these purposes a combination of two libraries: Microsoft ASP.NET Web Optimization Framework and System.Web.Optimization.React.. @congaductq I get more than 800 MB only with Visual Studio.. @a40637francisco Yes, JavaScriptEngineSwitcher.V8 and JavaScriptEngineSwitcher.Jurassic does not support .NET Core, because .NET Core not supported by the original libraries.. @gunnim This is done in order to allow user can choose only what he really needs.\nAdvantages of this approach are more obvious when working with the JavaScriptEngineSwitcher.ChakraCore module and LibSass Host for .NET library.\nIn addition, there is another reason.. @mattgross76 I recommend you to read the \u201cMisconceptions about the JavaScript Engine Switcher version 2.X\u201d post.. .NET Core is supported by four JS engines: JavaScriptEngineSwitcher.ChakraCore, JavaScriptEngineSwitcher.Msie (only works in JsRT modes), JavaScriptEngineSwitcher.Jint and JavaScriptEngineSwitcher.Vroom. But the JavaScriptEngineSwitcher.ChakraCore is the best choice at the moment.\nI also recommend you to read this comment. \n. And read about registration of JS engines in ASP.NET Core 1.X.. @cw-gawdeprasad I recommend you to read the \u201cMSIE\u201d section of \u201cMisconceptions about the JavaScript Engine Switcher version 2.X\u201d discussion.. Added a unit tests.. @Neorth This error has already been discussed in the JSPool repository.\nYou have two variants for solving this problem:\n 1. Roll back the JavaScript Engine Switcher to version 2.3.X.\n 2. Explicitly specify the JS engine (any except the MsieJsEngine). About how to do it read in Daniel's comment.. Hello, Roman!\nAlready there was a similar error - \u201cUpdating JavascriptEngineSwitcher.V8 breaks React.Net\u201d.\nAlso I recommend you to read the \u201cMisconceptions about the JavaScript Engine Switcher version 2.X\u201d discussion.. It's also very similar to the fact, that you did not install packages with native assemblies.. > I've noticed that setting DefaultEngineName property not working as expected and I need to add the engine factory I wish to use as the first one...\nRead about this problem in Daniel's comment. If you want to solve this problem, then vote for my pull request - \u201cAdded a ability to select the default JavaScript engine\u201d.\n\nDo I still need to install native assemblies for V8 and ChakraCore engines even if I not register factories for them?\n\nNot necessary.\n. @ashkansiroos @Daniel15 In principle, now there is no need to use the WrapJavaScriptRuntimeException method, because since version 2.4.0 of the JavaScript Engine Switcher in error message displays a information about error location:\n```\nChakraCoreJsEngine\nReferenceError: 'n' is not defined\n   at f (temp.js:9:4)\n   at Global code (temp.js:16:2)\n\nJintJsEngine\nReferenceError: n is not defined\n    at temp.js:9:4\n\nJurassicJsEngine\nReferenceError: n is not defined\n    at f (temp.js:9)\n    at temp.js:16\n\nMsieJsEngine\nReferenceError: 'n' is undefined\n   at f (temp.js:9:4)\n   at Unknown script code (temp.js:16:2)\n\nV8JsEngine\nReferenceError: n is not defined\n    at f (temp.js:9:4) ->                       n();\n    at temp.js:16:2\n\nVroomJsEngine\ntemp.js: Uncaught ReferenceError: n is not defined at line: 9 column: 4.\n```\n. @lizhenzhaofirst Try to install a preview version of the JavaScriptEngineSwitcher.ChakraCore.Native.linux-x64 package.. @radjivC And don't forget to install the ICU4C library. To install this library, simply run in your terminal the following command:\nbrew install icu4c. csharp\nIJsEngine engine = JsEngineSwitcher.Instance.CreateEngine(V8JsEngine.EngineName);\nWhy did you create a separate instance of JS engine?. > But do you think that this is causing the issue?\nNo, problem is not this. Very similar to the lack of memory on the server. Try to change pool settings to the following:\ncsharp\n\u2026\n.SetStartEngines(3)\n.SetMaxEngines(15)\n\u2026. I believe, that 100 JS engines is too much (maximum is to use 25). Can you imagine how much memory is spending this amount of JS engines? Usually even a pool of StringBuilders is limited to 20.. > Do you think something else is the issue?\n@cw-gawdeprasad In this case, I recommend to check your JSX code on presence of recursion.\n. > I wanted to know if RAM is the only possible culprit if there is no Recursion?\nThinking, that there is not, because you have enough RAM.\nAlso check the ~/Scripts/server.bundle.js file. See examples of such errors: \u201cMaximum call stack size exceeded error\u201d and \u201c\u201cRangeError: Maximum call stack size exceeded\u201d Why?\u201d.. @Daniel15 Yes, it is possible. I already wrote about this.. @Daniel15 But here is another problem, that the \u201cMaximum call stack size exceeded\u201d error may not have a stack trace.. @cw-gawdeprasad I moved part of functionality from 3.X branch to 2.4.12 and 2.4.13 versions. It is possible, that new configuration properties in the JavaScriptEngineSwitcher.V8 (HeapSizeSampleInterval, MaxHeapSize and MaxStackUsage) and the JavaScriptEngineSwitcher.ChakraCore (DisableFatalOnOOM and MemoryLimit) modules will help to solve your problems.. > (2) Fetch the latest Chakra runtime from github\n\nhttps://github.com/Microsoft/ChakraCore/releases\nand copy that over the old runtime installed by the nuget package\n.nuget/packages/javascriptengineswitcher.chakracore.native.osx-x64/2.4.6/runtimes/osx-x64/native/libChakraCore.dylib\n\nThis problem is solved in version 3.0.0 Alpha 6. There is even a discussion on this topic.\n\n var engineSwitcher = JsEngineSwitcher.Instance;\n engineSwitcher.DefaultEngineName = ChakraCoreJsEngine.EngineName;\n engineSwitcher.EngineFactories\n                  .AddChakraCore();\n\n\nIf you install the JavaScriptEngineSwitcher.Extensions.MsDependencyInjection package, you can make this code better:\ncsharp\nservices.AddJsEngineSwitcher(options =>\n    options.DefaultEngineName = ChakraCoreJsEngine.EngineName\n)\n    .AddChakraCore()\n    ;\nFor more information, see in the \u201cRegistration of JS engines > ASP.NET Core 1.X\u201d section of documentation.. > * A new IJavaScriptEngineChooser Func that returns the name of the preferred engine\nI vote for this variant. But I'm not sure about the advisability of adding a new interface - IJavaScriptEngineChooser. There would be more appropriate the configuration property is responsible for setting engine name (similar approach I use in the Bundle Transformer). JavaScript Engine Switcher initially has an infrastructure for such things (see the \u201cRegistration of JS engines\u201d and \u201cCreating instances of JS engines\u201d sections of documentation).. Hello, James!\nWhat version of the JavaScriptEngineSwitcher.V8 are you using?\nIn which of subdirectories of bin directory is located the ClearScriptV8-64.dll file?. > \u2026 (Originally I had them in the root /bin directory).\nWhy do it manually, if the JavaScriptEngineSwitcher.V8.Native.win-x64 package itself copies everything to the right place?. > (And yet for some reason, the ru-ru directory comes out fine??)\nIt uses a completely different mechanism (lib directory of NuGet package).\nOfftopic: Yesterday you were wrong about the \u201cmebibytes -> megabytes\u201d. I recommend you to see the following code.\n. @srmagura I already answered a similar question.. @srmagura First of all, upgrade packages to latest stable versions. In addition, I recommend you try an optimized version of the JsPool from the ReactJsDotNetMeetup project.. > The one problem we have had is when deploying to an Azure web app via Web Deploy. About 75% of the time, it worked correctly. The other 25% of the time, V8 would throw an exception on about 1 out of every 3 page renders.\n\n\u2026\nI have never gotten this exception in development, so I am pretty sure it not a problem with my code.\n\n@srmagura, @dustinsoftware, @cw-gawdeprasad I understood why such an error does not occur in the JavaScriptEngineSwitcher.ChakraCore module. JavaScriptEngineSwitcher.Msie and JavaScriptEngineSwitcher.ChakraCore modules are initially configured to work with a larger stack size (492 KB for 32-bit process, and 984 KB for 64-bit process). It is possible that problem is not in the JavaScriptEngineSwitcher.V8 module, but in Azure web app's constraints.. Hello, Rizzitelli!\nTry to install the JavaScriptEngineSwitcher.ChakraCore.Native.linux-x64 package.. dotnet add package JavaScriptEngineSwitcher.ChakraCore.Native.linux-x64 --version 2.4.14. This is problem of deployment.\nYou have the following code in *.csproj file?\nxml\n<PropertyGroup>\n    <RuntimeIdentifiers>\u2026;linux-x64</RuntimeIdentifiers>\n</PropertyGroup>. Show me a full error message with stack trace.. Check a existence of the runtimes/linux-x64/native/libChakraCore.so file in web application directory.. This directory must exist. You have some kind of deployment error. When you deploy by using \u0430 Visual Studio, this directory is created. I recommend you to read the \u201cPublish your Hello World application with Visual Studio 2017\u201d article.\nIf you did not use a Visual Studio deployment tools, but simply copied the directory with source code and the bin directory, then you need to run the following command on web application directory:\ndotnet restore\n. Excellent!. Hello, Dustin!\nIt seems to me, that in example for ASP.NET Core should be mentioned about the JavaScriptEngineSwitcher.Extensions.MsDependencyInjection package, because it greatly facilitates registration of JS engines:\n```csharp\n\u2026\nusing JavaScriptEngineSwitcher.ChakraCore;\nusing JavaScriptEngineSwitcher.Extensions.MsDependencyInjection;\n\u2026\nnamespace ReactDemo\n{\n    public class Startup\n    {\n        \u2026\n    public void ConfigureServices(IServiceCollection services)\n    {\n        \u2026\n        services.AddJsEngineSwitcher(options =>\n            options.DefaultEngineName = ChakraCoreJsEngine.EngineName\n        )\n            .AddChakraCore()\n            ;\n        \u2026\n    }\n\n    \u2026\n    }\n}\n\n}\n```\nIn addition, you can give links to the \u201cRegistration of JS engines\u201d and \u201cJS Engine Switcher: ChakraCore\u201d sections of JavaScript Engine Switcher documentation.. Hello, Dustin!\nGood idea, but it is better to implement it in a separate PR.. @dustinsoftware The VroomJs library uses a very old version of V8. Version 3.17.16.2 was released more than 5 years ago (April 11, 2013).. @dustinsoftware If you're talking about this PR, then I don't like the following block of source code:\ncsharp\n///<summary>\n/// Gets or sets the name of the default JsEngineSwitcher engine.\n/// </summary>\npublic string DefaultEngineName\n{\n    get\n    {\n        return JsEngineSwitcher.Instance.DefaultEngineName;\n    }\n    set\n    {\n        JsEngineSwitcher.Instance.DefaultEngineName = value;\n    }\n}\nIt is not safe to change the DefaultEngineName property of the JavaScript Engine Switcher, which other libraries can use, from the ReactJS.NET. I would name this property EngineName and set the default value to an empty string. In case the user did not set a value to this property, I would try to take the value from the JsEngineSwitcher.Instance.DefaultEngineName. If it is also empty, then I would throw an exception.\n. @dustinsoftware This error really passes all the tests. I was able to reproduce it only using the following setting:\ncsharp\nReactSiteConfiguration.Configuration\n    \u2026\n    .SetLoadReact(false)\n    \u2026\n    ;. I'll try to reply in 36 hours.. My suggestions are as follows:\n\nAdd a EngineName property to the IReactSiteConfiguration interface. The value of this property when choosing a engine must take precedence over the JsEngineSwitcher.Current.DefaultEngineName. This will avoid conflicts with other software products that use the JavaScript Engine Switcher.\nIt is possible that we should abandon the automatic selection of a working engine, because it introduces an element of randomness. The user still does not know which engine is currently in use.\nIf we ignore the second item, then before catching the exception, we should add the following code:\n\ncsharp\ncatch (JsEngineLoadException ex)\n{\n    Trace.WriteLine(string.Format(\"Error initialising {0}: {1}\", engineFactory, ex));\n    exceptionMessages.Add(ex.Message);\n}\nThis code intercepts almost all common errors that occur when creating engines. In the Message property describes the reasons and ways to prevent such errors (see example).. > I do still wonder if we should remove the usage of JsEngineSwitcher.Current and instead use the IoC container to manage its life cycle. I guess that'd make registering JS engines a bit more difficult though. Probably not worth it?\nThis can introduce additional confusion.. When using the JavaScriptEngineSwitcher.Msie and JavaScriptEngineSwitcher.ChakraCore modules, the following error occurs:\n// * Warnings *\nEnvironment\n  Summary -> Detected error exit code from one of the benchmarks. It might be caused by following antivirus software:\n        - Windows Defender (windowsdefender://)\n        - Norton Security (C:\\Program Files\\Norton Security\\Engine\\22.15.0.88\\WSCStub.exe)\nUse InProcessToolchain to avoid new process creation.\nWhen using the JavaScriptEngineSwitcher.V8 module, the following warning is issued:\n// * Warnings *\nMultimodalDistribution\n  ComponentRenderBenchmarks.Environment_CreateComponent: Default -> It seems that the distribution can have several modes (mValue = 2,82352941176471)\nWhen using the JavaScriptEngineSwitcher.Jurassic module, there are no errors, but everything works very slowly.. > The benchmarks run fine on OS X but crash on Windows only when script precompilation is enabled.\nIn ChakraCore .NET wrapper for Windows and Unix uses different code:\ncsharp\nif (RuntimeInformation.IsOSPlatform(OSPlatform.Windows))\n{\n    \u2026\n}\nelse\n{\n    \u2026\n}. I think that we can do without the InProcessToolchain. Updating the BenchmarkDotNet to version 0.11.1 fixes the previously described errors.\nHowever, if we assign to the ReuseJavaScriptEngines property value equal to true, the errors return back.. To fix this error:\n// * Warnings *\nEnvironment\n  Summary -> Detected error exit code from one of the benchmarks. It might be caused by following antivirus software:\n        - Windows Defender (windowsdefender://)\n        - Norton Security (C:\\Program Files\\Norton Security\\Engine\\22.15.0.88\\WSCStub.exe)\nUse InProcessToolchain to avoid new process creation.\nI had to completely abandon usage of the old ChakraCore API for Windows (Internet Explorer-like API).. Hello, Dustin!\n\n\u2026, however I discovered that it does not work at all for files that Babel has to process (AddScript). It would be very cool if that was supported, but if that's not straight forward to do before merge, we'll need to add a comment indicating this behavior.\n\nFor several days I'm working on a new version of the JavaScriptEngineSwitcher.ChakraCore module. If run the latest version of benchmarks together with new version of the JavaScriptEngineSwitcher.ChakraCore module (891da69) on Windows, can get the following results:\nini\nBenchmarkDotNet=v0.10.14, OS=Windows 10.0.17134\nIntel Core i7 CPU 870 2.93GHz (Nehalem), 1 CPU, 8 logical and 4 physical cores\nFrequency=2857588 Hz, Resolution=349.9455 ns, Timer=TSC\n.NET Core SDK=2.0.0\n  [Host]     : .NET Core 2.0.7 (CoreCLR 4.6.26328.01, CoreFX 4.6.26403.03), 32bit RyuJIT\n  DefaultJob : .NET Core 2.0.7 (CoreCLR 4.6.26328.01, CoreFX 4.6.26403.03), 32bit RyuJIT\nComponentRenderWithBabelBenchmarks\n|                      Method | withPrecompilation |     Mean |     Error |    StdDev |   Gen 0 | Allocated |\n|---------------------------- |------------------- |---------:|----------:|----------:|--------:|----------:|\n| Environment_CreateComponent |              False | 58.40 ms | 1.0167 ms | 0.9510 ms | 62.5000 |   2.86 MB |\n| Environment_CreateComponent |               True | 57.38 ms | 0.8534 ms | 0.7983 ms | 62.5000 |   2.86 MB |\nComponentRenderWithoutBabelBenchmarks\n|                      Method | withPrecompilation |     Mean |    Error |    StdDev |    Gen 0 | Allocated |\n|---------------------------- |------------------- |---------:|---------:|----------:|---------:|----------:|\n| Environment_CreateComponent |              False | 56.98 ms | 1.065 ms | 0.9959 ms | 125.0000 |   1.53 MB |\n| Environment_CreateComponent |               True | 47.03 ms | 1.097 ms | 1.0260 ms |  62.5000 |   1.26 MB |\nIf change configuration settings in the ComponentRenderWIthBabelBenchmarks.cs file to the following:\ncsharp\n\u2026\npublic ComponentRenderWithoutBabelBenchmarks()\n{\n    \u2026\n    ReactSiteConfiguration.Configuration\n        .SetReuseJavaScriptEngines(true)\n        .SetStartEngines(2)\n        .SetMaxEngines(2)\n        .SetMaxUsagesPerEngine(2)\n        .AddScript(\"Sample.jsx\");\n}\n\u2026\nThen get the following results:\nComponentRenderWithBabelBenchmarks\n|                      Method | withPrecompilation |     Mean |    Error |   StdDev |    Gen 0 | Allocated |\n|---------------------------- |------------------- |---------:|---------:|---------:|---------:|----------:|\n| Environment_CreateComponent |              False | 74.69 ms | 1.250 ms | 1.169 ms | 125.0000 |   3.12 MB |\n| Environment_CreateComponent |               True | 64.34 ms | 1.245 ms | 1.165 ms |  62.5000 |   2.86 MB |\nI will release a new version of the JavaScript Engine Switcher in next few days.. > Also is there any reason not to enable this by default?\nThere are the following reasons:\n\nNot all JS engines support this feature.\nPre-compilation is useless without caching its result.\nPerformance gains can only be achieved in web applications that use a pool of JS engines.\nPre-compilation of scripts almost no one uses, so it is unknown how it will work on high-load web applications.. Excellent!. > However, I don't think there's much documentation for it (cc @Taritsyn) and I've never tried it in conjunction with ReactJS.NET.\n\nThis functionality has not yet been documented. See a examples of using the EmbedHostObject and EmbedHostType methods in unit tests.. Hello, Halmon!\nYou are not right. Better read the \u201cHow to upgrade applications to version 3.X\u201d section of documentation.. Hello!\nYou need to use a JS engine that supports ECMAScript 6: JavaScriptEngineSwitcher.ChakraCore and JavaScriptEngineSwitcher.V8. I recommend also reading the \u201cMisconceptions about the JavaScript Engine Switcher version 2.X\u201d discussion.. I would also add the following line after:\ncsharp\n...\nengineSwitcher.DefaultEngineName = V8JsEngine.EngineName;\n. Hello, Dustin!\nI plan to release it today or tomorrow. Yesterday I released the MSIE JavaScript Engine version 3.0.0.. Hello, Adam!\nToday I also faced this error, when I was working on answer to this issue. I recommend you to read the \u201cReactJS.NET - Bundles - TinyIoCResolutionException: Unable to resolve type: React.IReactEnvironment\u201d discussion on Stack Overflow.. In this case, you must verify that the [assembly: WebActivatorEx.PreApplicationStartMethod(...)] attribute is used correctly (see example).. > Unfortunately, running 4.0.0-rc2 didn't cause anything different to occur. Exact same exceptions occur, with no new InnerExceptions or anything.\nYesterday version 4.0.0 was released, which exactly included the \u201cSave original exceptions as inner exceptions\u201d pull request.. Looks like the AppVeyor broke down due to a NU5125 warning. This warning must either be ignored or fixed by replacing in csproj-project files the PackageLicenseUrl elements by the PackageLicenseFile elements (about how to do it described in the \u201cNuGet Error NU5030\u201d article).. Hello, Dustin!\nI specifically extracted this library from the source code of my projects (Bundle Transformer, JavaScript Engine Switcher, MSIE JavaScript Engine, LibSass Host and WebMarkupMin (will use in the next release)) so that they can share the pool of string builders. Microsoft.Extensions.ObjectPool and old versions of the System.Buffers also small libraries, but it does not prevent to use them as dependencies in a large number of projects.\nIn addition, I plan to further develop this library by adding new extensions for the string builder.. Hello!\nRemove all listed assemblies and install the JavaScriptEngineSwitcher.V8.Native.win-x86 package .. If you use the ReactJS.NET version 3.X, then need to install the JavaScriptEngineSwitcher.V8.Native.win-x86 package version 2.X. I also recommend you to read the \u201cV8\u201d section of \u201cMisconceptions about the JavaScript Engine Switcher version 2.X\u201d discussion.. Happy New Year!. Yesterday already was a similar issue.\nReactJS.NET version 3.X only compatible with the JavaScript Engine Switcher version 2.X. If you want to use a JavaScript Engine Switcher version 3.X, then install the ReactJS.NET version 4.0.0 RC 2.\nThese are problems of transition period.\n. Hello, Linus!\nHere is a quote from the announcement of ReactJS.NET 4.0:\n\n\nJavascript engines are no longer automatically registered. See the getting started pages on .NET Framework and .NET Core for more information about how to register a specific\nJavaScriptEngineSwitcher and JSPool have been updated as a part of this change.\nFurther reading for JavaScriptEngineSwitcher: How to upgrade applications to version 3.X\n\n. > As i said, the registration of JavascriptEngineSwitcher works fine as long as I do not replace the registration of IJavascriptEngineFactory with my own implementation.\n\nGive an example of the error message.. Hello, Kendall!\n\nI tried to move my project to 4.0.0 but it seems there are some breaking changes in the JavaScript switcher engine I need to sort out.\n\nI recommend you to read the \u201cHow to upgrade applications to version 3.X\u201d section of JavaScript Engine Switcher's documentation.\nAlso I recommend to read a release notes of ReactJS.NET 4.0.\n. Hello, Stefan!\nIf this error is not issued by Node.js, then most likely you're using an JS engine that doesn't support the ECMAScript 6. Try installing the JavaScriptEngineSwitcher.V8 or JavaScriptEngineSwitcher.ChakraCore module and register it as the default engine.. >  I tried it but got an error when adding the packages. I checked and I have both installed in version 2.4.1? Is that ok?\nWhat version of the ReactJS.NET do you use?\n. @simonssspirit Try installing a version 2.4.2 of JavaScriptEngineSwitcher.V8.Native.win-x86 and JavaScriptEngineSwitcher.V8.Native.win-x64 packages:\nInstall-Package JavaScriptEngineSwitcher.V8.Native.win-x86 -Version 2.4.2\nInstall-Package JavaScriptEngineSwitcher.V8.Native.win-x64 -Version 2.4.2\nBut in the future I still recommend to update the ReactJS.NET to version 4.0.. @apohto Where do you call the Configure method of ReactConfig class? In Global.asax file?. @apohto In ASP.NET 4.X samples a React initialization is performed by using the WebActivator library and [assembly: WebActivatorEx.PreApplicationStartMethod(\u2026)] attribute (see example).. @LinusCenterstrom In this case, you need to look in the source code of your application where the EngineFactories collection changes. Did you use some other libraries that use the JavaScript Engine Switcher?. @Daniel15 @dustinsoftware To prevent similar errors in the future, I can add additional members to the JsEngineFactoryCollection class (by analogy with the BundleCollection class from the Microsoft ASP.NET Web Optimization Framework):\n```csharp\n\u2026\n/// \n/// Gets a number of  objects in the collection\n/// \npublic int Count\n{\n    get { return _factories.Count; }\n}\n/// \n/// Gets all registered factories\n/// \n/// A read-only collection of all  objects in the collection\npublic ReadOnlyCollection GetRegisteredFactories()\n{\n    return new List(_factories.Values).AsReadOnly();\n}\n\u2026\n```\nAlso \u0441an think about implementing the ICollection and ICollection<T> interfaces, but perhaps this will be superfluous.. > The error likely occurs when the application pool is recycled.\nIn old versions of the JavaScript Engine Switcher there were errors that occurred during the finalization of JS engines (\u201cFinalazier thread is blocked becasue of JavaScriptEngineSwitcher.ChakraCore.ChakraCoreJsEngine\u201d and \u201cBlock finalizer solved?\u201d).\nTherefore, I recommend to update the JavaScript Engine Switcher to the latest compatible versions:\nUpdate-Package JavaScriptEngineSwitcher.Core -Version 2.4.10\nUpdate-Package JavaScriptEngineSwitcher.ChakraCore -Version 2.4.29\nUpdate-Package JavaScriptEngineSwitcher.Msie -Version 2.4.29\nUpdate-Package JavaScriptEngineSwitcher.V8 -Version 2.4.13\nUpdate-Package JavaScriptEngineSwitcher.V8.Native.win-x64 -Version 2.4.16\nUpdate-Package MsieJavaScriptEngine -Version 2.2.10\nI also recommend that you explicitly specify the default JS engine.. > Yeah, latest React version does not work properly in IE due to the use of Map and Set and I believe Symbol without polyfills\n@Weffe These features are only supported in the ChakraIeJsRt and ChakraEdgeJsRt modes (see details).. AllowMsieEngine property was removed from the IReactSiteConfiguration interface in the \u201cRemove auto-registered JS engines from React.Core\u201d PR. I just removed the unused code.. I plan to release a new version of the JavaScript Engine Switcher (Release Candidate 1) in next few days.. I think that for the first check it is necessary to generate an exception too.. ",
    "janhalama": "My conclusion is that lodash lib is not ready to be used for serverside rendering.\n. ",
    "xaclincoln": "Is typescript supported now (2015/10/24), guys?\n. ",
    "protron": "I configured my Visual Studio project to use typescript + jsx (tsx files). VS compiles those tsx files into js on save, and I use those js files as input for reactjs.net. Works great and now VS 2013 understands the html tags inside the javacript (which don't work in jsx files, but they do in tsx files).\n. ",
    "ionescudev": "Flow ? I cant use flow in visual studio ( not visual code ).. ",
    "nmocruz": "sad, useless to me. moving to another option.. ",
    "Nomeasmo": "Vote +1\n. ",
    "vipulnsward": "Thanks!\n. ",
    "lzliu": "Sorry for delayed reply, I was busy in my project. Thanks a lot for your great work and your help!\n. ",
    "jkicha": "I didn't get the compilation error. It works fine.\n. ",
    "Sorting": "FYI - I've just signed the Contributor License Agreement.\n. That's a good question. I don't know why React.Sample.Mvc6.xproj was changed. I've corrected the change and pushed a new commit. Thank you for reviewing.\n. ",
    "TomGroeneboer": "I see that there were updates to project.json 2 days ago regarding to beta6, but this isn't pushed to NuGet yet, right? Maybe that's the problem?\n. Stacktrace:\nat React.AspNet.ReactServiceCollectionExtensions.AddReact(IServiceCollection services)\nat React.Startup.ConfigureServices(IServiceCollection services) in F:\\React\\Startup.cs:line 12\nError message:\nCould not load file or assembly 'React, Version=1.5.0.0, Culture=neutral,     PublicKeyToken=9aed67b161f7db78' or one of its dependencies. A strongly-named assembly is     required. (Exception from HRESULT: 0x80131044)\n. I saw you updated the package to version 1.5.4, I still have the problem with that one...\n. Yeah true, it is really strange. I'm currently using the clr-x86-beta6 .net version. I'm creating an empty ASP.NET application (because we don't use MVC). \n. ",
    "jongalloway": "I'm seeing the same error with 1.5.4 with ASP.NET 5 beta7.\nI run into the same issue going through the basic walkthrough on ASP.NET MVC 5 (.NET 4.x) using the 1.5.4 version.\nError message:\nSystem.IO.FileLoadException was unhandled by user code\n  FileName=React, Version=1.5.0.0, Culture=neutral, PublicKeyToken=9aed67b161f7db78\n  FusionLog=\"\"\n  HResult=-2146234300\n  Message=Could not load file or assembly 'React, Version=1.5.0.0, Culture=neutral, PublicKeyToken=9aed67b161f7db78' or one of its dependencies. A strongly-named assembly is required. (Exception from HRESULT: 0x80131044)\n  Source=React.AspNet\n  StackTrace:\n       at React.AspNet.ReactServiceCollectionExtensions.AddReact(IServiceCollection services)\n       at React.Startup.ConfigureServices(IServiceCollection services) in d:\\Users\\Jon\\documents\\visual studio 14\\Projects\\React\\src\\React\\Startup.cs:line 75\n  InnerException: \n       HResult=-2146234300\n       Message=A strongly-named assembly is required. (Exception from HRESULT: 0x80131044)\n       InnerException: \n. ",
    "ssippe": "Yes it's the .jsx file. I tried adding .jsx as a application/JavaScript mime type in web.config but that didn't help.\nIs there something else required to setup the handler?\nOn 20 Aug 2015 5:14 pm, Daniel Lo Nigro notifications@github.com wrote:\nbut on loading the page the request to the jsx file is returning 404 \nWhat's the URL it's trying to hit? If optimisations are off then it'll be hitting the .jsx file directly, in which case you need to ensure you have the JSX handler correctly configured in Web.config.\n\u2014Reply to this email directly or view it on GitHub.\n. Followup...\nStill getting a 404 when EnableOptimizations=false for direct links to .jsx files (without original JavaScriptEngineSwitcher exception)\nTo repoduce:\n- Created a fresh asp.net mvc 5 application \n- Install from nuget  ReactJS.NET (MVC 4 and 4) and ReactoJS.NET - JSX for ASP.NET Web Optimisation Framework \n- modify bundle config to include bundles.Add(new JsxBundle(\"~/bundles/StandardExtraItem\").Include(\"~/Views/Home/extraItems.jsx\"));\n- add the following to Views\\Home\\Index.cshtml @section scripts { @Scripts.Render(\"~/bundles/StandardExtraItem\")    }\n- create the file Views\\Home\\extraItems.jsx and put some jsx code in it. Set the \"Build Action\" on the file to Content\n- Run in debug mode and note the 404 getting extraItems.jsx. \n- Modify Global.asax.cs to include the line BundleTable.EnableOptimizations = true; in Application_Start and run again and note the the bundled version of the jsx file is returned successfully.\nNote that the nuget packages modify web.config to install a handler for .jsx file and no manual changes to web.config was made.\n. Windows 7 and iis express debugging from visual studio 2013.\nOn 24 Aug 2015 3:47 pm, Daniel Lo Nigro notifications@github.com wrote:Interesting... What operating system and version of IIS are you using?\nIt's strange that it's throwing a 404 even though you have the correct section in the Web.config file. I'll try to replicate this issue myself later this week when I get some free time :)\n\u2014Reply to this email directly or view it on GitHub.\n. ",
    "radnor": "Added in a fix to the samples so they use github avatar pictures.\n. Ah, nice, that URL is friendlier. :smile: \nI can't find it documented anywhere, but if it does disappear in the future it'll be easy enough to re-implement using the ID. I'll submit another commit shortly to utilize usernames.\n. Here's what's in result:\n// Automatically generated by ReactJS.NET. Do not edit, your changes will be overridden.\n// Version: \n// Generated at: 10/15/2015 9:02:38 AM\n///////////////////////////////////////////////////////////////////////////////\nReact.DOM.div('Hello World')\n. ",
    "johanforssell": "Please close this issue, it's no longer relevant.\u00a0\n- Johan Forssell\nOn Mon, Aug 31, 2015 at 4:22 PM -0700, \"Daniel Lo Nigro\" notifications@github.com wrote:\nWhat issues are you encountering? Is it throwing any errors?\n\u2014\nReply to this email directly or view it on GitHub.\n. ",
    "ra0o0f": "@Daniel15 \ni started to use flux architecture and i realize i should manage state(mostly data from server) in stores not components.\nat server side rendering i do this by passing data to component and from there to store.\nis there a way to execute script before each server side rendering, so i can embed data by dynamic script for store?\ni know now that i was asking the wrong question, config scripts are for client lifetime not before each server side rendering\ncsharp\nnew ReactSiteConfiguration()\n.AddScript(\"script.js\")\n. ",
    "mattwoberts": "Cheers guys. Just hope this information is useful to you. I'll try and play with SuperCharged, but time constraints might not allow.\n@PeteDuncanson If you do get anywhere with a pull request to bring your changes into this repo, then I'd be happy to help you test it out - just give me a shout\n. @jslatts  Re: Profiling, I wasn't using any of the profiling tools, since the issue was only apparent when in production - locally I could hit the page thousands of times and not spot much of an issue. For me it was just a case of turning off server rendering and seeing the change in memory usage.\n@Daniel15 I think I'm with you and @Daniel15 re: having that split - I also looked at implementing some quick-win optimisations but quickly got lost in the abstractions.\n. Just having a look at this after a few months - wondering if anything has changed re: server side rendering and the issue with engine pooling and memory leaks - @PeteDuncanson / @Daniel15  ?\nCheers!\n. ",
    "fpw23": "Wow, you were right, webpack really is awesome!  I got a demo working that is based off your webpack demo, it is using the newforms and newforms-bootstrap packages!!  Server side rendering works really well!  here is a link to it.  I do have some questions though:\n1) in my demo I was able to create a folder hierarchy for my SignUp.jsx file by placing it in a sub folder named common.  I would want to do this to keep things tidy in a large project, kind of like namespacing, but in my index js file when I export it looks like everything is at the same level.  Is there a way to have what I export match my folder structure so that it all lines up?\n2) the webpack build creates two files, one for server and one for client and in the docs you say to put only server side stuff in the server one and client side in the client one.  If I am doing server side rendering wouldn't I need everything in both anyways?  If I render on the server I still need to have that same js on the client to make it all work correct?\n. ",
    "samwa": "Even with git installed and in my path, the build still errors because I don't have a local git repo to get the version number from. I ended up just removing the GitVersion msbuild task from the build.proj file\n. Appveyor seems to be getting the wrong version of VroomJs\nI can't figure out what I might of changed that would have caused this error, sorry\n. Hi Dan, sorry, I'm new to Git and contributing to OS projects. I had a little trouble rebase-ing my commits. long and the short of it is I ended up creating a branch feature-serversidepaging with one commit. I'll try a new pull request from that\n. thanks\ni'm going to add the output cache option as having 2 endpoints feels like duplication to me. and the code that generates the loadMoreClicked uses the Url of the link, so the JSX would have to be 'fudged' to make it work\nmvc 6 is going to have better content negotiation built in\n. Do you man the line about omit vary by star? there is a pretty esoteric reason why iis won't send the cache header to the response when you use varybyheader. I don't understand it fully, but testing the examples given by this SO thread worked\nhttp://stackoverflow.com/questions/7849392/unable-to-append-vary-header-to-response\n. ",
    "amankkg": "Cool, I was trying to migrate myself. Forked.\nTrying to build via dev-build.bat now. How to specify which dnx to use?\nCause I have installed beta7 and beta8, so my dnu uses beta8 by default. Therefore can't generate SharedAssemblyVersionInfo.cs file\n. ",
    "PrimeObjects": "Tried your script in a controller. I got the error below. I'm on .NET 5 beta7\nSystem.InvalidOperationException\nNo service for type 'React.IReactEnvironment' has been registered.\nIs there a simple function that does not need register service?\nI also try to addService by using React.AspNet, it seems conflict with some other code and caused compile error.\n. sorry for replying late, it works!\n. no luck, got different error though \"Unable;to;resolve;n:React.ReactEnvironment\". I think there's no V8 JS engine at all on Azure server stack? My friend, please make it work on Azure, it is important to the success of ReactJs.net.\ncode in my startup.cs\napp.UseReact(config =>\n            {\n                config.SetReuseJavaScriptEngines(true);\n                config.SetAllowMsieEngine(false);\n            });\n. Hi Daniel,\nAny solution yet? Can we make MSIE JS engine as the default and give it a try? How to configure to enforce it use IE?\nThanks\nGary\n. Where is the dll? I do not think I can delete anything on Azure server.\n. Great, I will try it. Thank you Samppis!!!\n. Hi Daniel, \nThank you for the update.\n. ",
    "danieldegtyarev": "Many thanx for the detailed answer, Daniel! \nI haven't tried yet, but it looks pretty helpful.\n. ",
    "gregbty": "I was able to see the stack trace on a previous version of the library but not with the latest.\nI will try that later today. If that does work, is there no way to monitor the files without locking or restarting the engine if an IOException is detected? I would rather have the fast page loads.\n. I can. Here is the stack trace:\n```\nThe process cannot access the file '...\\www\\js\\bundles\\server.js' because it is being used by another process.\nat System.IO.__Error.WinIOError(Int32 errorCode, String maybeFullPath)\n   at System.IO.FileStream.Init(String path, FileMode mode, FileAccess access, Int32 rights, Boolean useRights, FileShare share, Int32 bufferSize, FileOptions options, SECURITY_ATTRIBUTES secAttrs, String msgPath, Boolean bFromProxy, Boolean useLongPath, Boolean checkHost)\n   at System.IO.FileStream..ctor(String path, FileMode mode, FileAccess access, FileShare share, Int32 bufferSize, FileOptions options, String msgPath, Boolean bFromProxy, Boolean useLongPath, Boolean checkHost)\n   at System.IO.StreamReader..ctor(String path, Encoding encoding, Boolean detectEncodingFromByteOrderMarks, Int32 bufferSize, Boolean checkHost)\n   at System.IO.File.InternalReadAllText(String path, Encoding encoding, Boolean checkHost)\n   at System.IO.File.ReadAllText(String path, Encoding encoding)\n   at React.FileSystemBase.ReadAsString(String relativePath)\n   at React.JavaScriptEngineFactory.LoadUserScripts(IJsEngine engine)\n   at React.JavaScriptEngineFactory.InitialiseEngine(IJsEngine engine)\n   at JSPool.JsPool.CreateEngine()\n   at JSPool.JsPool.PopulateEngines()\n   at JSPool.JsPool.Recycle()\n   at JSPool.JsPool.&lt;InitializeWatcher&gt;b__10_0(Object sender, EventArgs args)\n   at JSPool.FileWatcher.OnTimer(Object state)\n   at System.Threading.TimerQueueTimer.CallCallbackInContext(Object state)\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)\n   at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)\n   at System.Threading.TimerQueueTimer.CallCallback()\n   at System.Threading.TimerQueueTimer.Fire()\n   at System.Threading.TimerQueue.FireNextTimers()\n   at System.Threading.TimerQueue.AppDomainTimerCallback()\n```\n. ",
    "johnkors": "+1. Also using Gulp to watch/build the scripts for react.net.\n. ",
    "mva3212": "+1 Also happening with Webpack getting unhandled IOException crashing w3wp.exe in development.  Disabling pooling in development does resolve the issue for me as well.\n. ",
    "huan086": "+1, using Gulp and browserify. Crash for me came later, when I refresh the page. Stack trace below\n```\nApplication: iisexpress.exe\nFramework Version: v4.0.30319\nDescription: The process was terminated due to an unhandled exception.\nException Info: System.AccessViolationException\n   at .V8Isolate.Create(StdString, V8IsolateConstraints, Boolean, Int32)\n   at Microsoft.ClearScript.V8.V8IsolateProxyImpl..ctor(System.String, Microsoft.ClearScript.V8.V8RuntimeConstraints, Boolean, Int32)\nException Info: System.Reflection.TargetInvocationException\n   at System.RuntimeMethodHandle.InvokeMethod(System.Object, System.Object[], System.Signature, Boolean)\n   at System.Reflection.RuntimeConstructorInfo.Invoke(System.Reflection.BindingFlags, System.Reflection.Binder, System.Object[], System.Globalization.CultureInfo)\n   at System.RuntimeType.CreateInstanceImpl(System.Reflection.BindingFlags, System.Reflection.Binder, System.Object[], System.Globalization.CultureInfo, System.Object[], System.Threading.StackCrawlMark ByRef)\n   at System.Activator.CreateInstance(System.Type, System.Reflection.BindingFlags, System.Reflection.Binder, System.Object[], System.Globalization.CultureInfo, System.Object[])\n   at System.Activator.CreateInstance(System.Type, System.Object[])\n   at Microsoft.ClearScript.V8.V8Proxy.CreateImpl[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]\n   at Microsoft.ClearScript.V8.V8IsolateProxy.Create(System.String, Microsoft.ClearScript.V8.V8RuntimeConstraints, Boolean, Int32)\n   at Microsoft.ClearScript.V8.V8Runtime..ctor(System.String, Microsoft.ClearScript.V8.V8RuntimeConstraints, Microsoft.ClearScript.V8.V8RuntimeFlags, Int32)\n   at Microsoft.ClearScript.V8.V8ScriptEngine..ctor(Microsoft.ClearScript.V8.V8Runtime, System.String, Microsoft.ClearScript.V8.V8RuntimeConstraints, Microsoft.ClearScript.V8.V8ScriptEngineFlags, Int32)\n   at JavaScriptEngineSwitcher.V8.V8JsEngine..ctor(JavaScriptEngineSwitcher.V8.Configuration.V8Configuration)\n   at React.AssemblyRegistration+<>c.b__3_0()\n   at JSPool.JsPool.CreateEngine()\n   at JSPool.JsPool.PopulateEngines()\n   at JSPool.JsPool.Recycle()\n   at JSPool.JsPool.b__12_0(System.Object, System.EventArgs)\n   at JSPool.FileWatcher.OnTimer(System.Object)\n   at System.Threading.TimerQueueTimer.CallCallbackInContext(System.Object)\n   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)\n   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)\n   at System.Threading.TimerQueueTimer.CallCallback()\n   at System.Threading.TimerQueueTimer.Fire()\n   at System.Threading.TimerQueue.FireNextTimers()\n   at System.Threading.TimerQueue.AppDomainTimerCallback()\n```\n. I'm using https://github.com/jquery/globalize. \nPreparation\n2 gulp tasks is required to generate the files for React.NET to consume\n1. Pass the runtime modules through browserify\n2. For each locale, pass the formatters, parsers etc through globalize-compiler\nThe generated files from the gulp tasks are added to both React config and layout.cshtml.\nUsage\nWithin the jsx files, use the Globalize.formatMessage to localize strings\nSetting language\nIn layout.cshtml, set the language by adding a script tag and calling Globalize.locale(\"the locale\")\nCreate a custom HtmlHelperExtension that runs Globalize.locale(\"the locale\") on the current ReactEnvironment before calling Html.React\n. I'm bundling the lodash library. They used global.Object instead of just Object. Thus having this problem.\n. So there is no way to refer to the global object used in the JavaScript engine, other than new Function(\"return this\")()?\n. It's a problem with FixedDataTable. There's an issue opened there\nhttps://github.com/facebook/fixed-data-table/issues/350\n. The exception don't seem meaningful to me. JsPoolExhaustedException only occurs after days of running\nJSPool.Exceptions.JsPoolExhaustedException: Could not acquire JavaScript engine within 00:00:05\n   at JSPool.JsPool.GetEngine(Nullable`1 timeout)\n   at React.JavaScriptEngineFactory.GetEngine()\n   at System.Lazy`1.CreateValue()\n   at System.Lazy`1.LazyInitValue()\n   at React.ReactEnvironment.get_Engine()\n   at React.ReactEnvironment.EnsureUserScriptsLoaded()\n   at React.ReactEnvironment.CreateComponent[T](String componentName, T props, String containerId)\n   at React.Web.Mvc.HtmlHelperExtensions.React[T](HtmlHelper htmlHelper, String componentName, T props, String htmlTag, String containerId, Boolean clientOnly, Boolean serverOnly, String containerClass)\n   at MyCode.Views.Account.SignIn.Execute() in D:\\MyProject\\Views\\Account\\SignIn.cshtml:line 13\n   at System.Web.WebPages.WebPageBase.ExecutePageHierarchy()\n   at System.Web.Mvc.WebViewPage.ExecutePageHierarchy()\n   at System.Web.WebPages.StartPage.ExecutePageHierarchy()\n   at System.Web.WebPages.WebPageBase.ExecutePageHierarchy(WebPageContext pageContext, TextWriter writer, WebPageRenderingBase startPage)\n   at System.Web.Mvc.ViewResultBase.ExecuteResult(ControllerContext context)\n   at System.Web.Mvc.ControllerActionInvoker.InvokeActionResultFilterRecursive(IList`1 filters, Int32 filterIndex, ResultExecutingContext preContext, ControllerContext controllerContext, ActionResult actionResult)\n   at System.Web.Mvc.ControllerActionInvoker.InvokeActionResultFilterRecursive(IList`1 filters, Int32 filterIndex, ResultExecutingContext preContext, ControllerContext controllerContext, ActionResult actionResult)\n   at System.Web.Mvc.ControllerActionInvoker.InvokeActionResultFilterRecursive(IList`1 filters, Int32 filterIndex, ResultExecutingContext preContext, ControllerContext controllerContext, ActionResult actionResult)\n   at System.Web.Mvc.ControllerActionInvoker.InvokeActionResultWithFilters(ControllerContext controllerContext, IList`1 filters, ActionResult actionResult)\n   at System.Web.Mvc.Async.AsyncControllerActionInvoker.<>c__DisplayClass21.<BeginInvokeAction>b__1e(IAsyncResult asyncResult)\n   at System.Web.Mvc.Controller.<BeginExecuteCore>b__1d(IAsyncResult asyncResult, ExecuteCoreState innerState)\n   at System.Web.Mvc.Async.AsyncResultWrapper.WrappedAsyncVoid`1.CallEndDelegate(IAsyncResult asyncResult)\n   at System.Web.Mvc.Controller.EndExecuteCore(IAsyncResult asyncResult)\n   at System.Web.Mvc.Async.AsyncResultWrapper.WrappedAsyncVoid`1.CallEndDelegate(IAsyncResult asyncResult)\n   at System.Web.Mvc.MvcHandler.<BeginProcessRequest>b__5(IAsyncResult asyncResult, ProcessRequestState innerState)\n   at System.Web.Mvc.Async.AsyncResultWrapper.WrappedAsyncVoid`1.CallEndDelegate(IAsyncResult asyncResult)\n   at System.Web.HttpApplication.CallHandlerExecutionStep.OnAsyncHandlerCompletion(IAsyncResult ar)\n. Looking throw React.NET code, I've found a \"bad idea\" so far\nIn ReactEnvironment class, _engineFromPool = new Lazy<IJsEngine>(() => _engineFactory.GetEngine()). The Lazy class caches the result of the first invocation. That is, if the first invocation causes an exception, ALL subsequent calls will return an exception.\nI'm using my own implementation for keeping Singleton, which is way simpler than Lazy's implementation as it does not need to capture the exception and rethrow\n```\nnamespace MyCompany\n{\n    using System;\n/// <summary>\n///   As opposed to the <see cref=\"T:System.Lazy&lt;T&gt;\" /> class that stores exception that is thrown during construction,\n///   this class only stores successfully constructed objects.\n///   <see href=\"https://en.wikipedia.org/wiki/Double-checked_locking#Usage_in_Microsoft_.NET_.28Visual_Basic.2C_C.23.29\">Double checked locking</see>\n/// </summary>\n/// <typeparam name=\"T\">The type of the value.</typeparam>\npublic class Singleton<T>\n    where T : class\n{\n    private readonly object syncLock = new object();\n\n    private readonly Func<T> valueFactory;\n\n    private T instance;\n\n    public Singleton(Func<T> valueFactory)\n    {\n        if (valueFactory == null)\n        {\n            throw new ArgumentNullException(\"valueFactory\");\n        }\n\n        this.valueFactory = valueFactory;\n    }\n\n    public T Value\n    {\n        get\n        {\n            if (this.instance == null)\n            {\n                lock (this.syncLock)\n                {\n                    if (this.instance == null)\n                    {\n                        this.instance = this.valueFactory();\n                    }\n                }\n            }\n\n            return this.instance;\n        }\n    }\n}\n\n}\n```\n. Found an issue\nJavaScriptEngineFactory is registered as singleton. JavaScriptEngineFactory has JsPool. Thus, JsPool is singleton. JsPool has Dictionary _metadata, which is not thread-safe. Access to _metadata in CreateEngine, TakeEngine, ReturnEngineToPool and DisposeEngine do not use any synchronization, thus potentially modifying _metadata from different threads and corrupting it.\nSwitching to ConcurrentDictionary should solve the issue. Additionally, this._engineCount should be replaced by _metadata.Count in order to get a consistent count to prevent race condition.\nRace condition: consider where engine is released and requested from different thread, one thread releases, the other request, but fails at this.EngineCount < this._config.MaxEngines due to this.EngineCount not being decrement yet.\n. I'm running into this problem again...\n. Investigating the issue again. According to http://weblog.west-wind.com/posts/2004/Jun/15/ResponseEnd-bites-back-at-HttpApplication-events, EndRequest won't get called if I do Server.Transfer. In my code, there is HttpContext.Current.Server.TransferRequest. However, I couldn't find any leaks after the call as JsPool.AvailableEngineCount stays at 25.\nMy ReactConfig is\n```\n            ReactSiteConfiguration.Configuration\n                .SetLoadReact(false)\n                .SetLoadBabel(false)\n                .SetAllowMsieEngine(false)\n                .AddScriptWithoutTransform(\"~/Scripts/react-with-addons.min.js\")\n                .AddScriptWithoutTransform(\"~/Scripts/react-dom.min.js\")\n                .AddScriptWithoutTransform(\"~/Scripts/react-dom-server.min.js\")\n                .AddScriptWithoutTransform(\"~/Scripts/moment-with-locales.min.js\")\n                .AddScriptWithoutTransform(\"~/Scripts/server/Compatibility.js\")\n                .AddScriptWithoutTransform(\"~/js/server/components.min.js\");\n```\nAny idea where else I should look?\n. On some of my pages, I render 2 or 3 separate components (i.e. 2 or 3 Html.React calls). Some of these calls are in Html.Partial. Will this change cause any issues?\n. You'll need to change your configuration to increase your max engines. You're most likely running out of engines in the pool when load gets high and it takes several seconds to execute the script. @DaniilSokolyuk could you provide some context to the optimization? What was the bottleneck in @Daniel15 's JSPool implementation?\nI'm thinking of implementing my custom high-load JSPool using AsyncEx AsyncCollection. Daniel15's implementation uses BlockingCollection, which blocks threads from the ThreadPool. As load goes up, number of threads that get blocked goes up, available threads to serve non-React views goes down and the whole system slows to a crawl.. Suspect this is causing the error\njs\n    constructor(props) {\n        super(props);\n        this.state = { data: this.props.initialData };\n    }\nSee if the following works\njs\n    constructor(props) {\n        super(props);\n        this.state = { data: props.initialData };\n    }. And it's released! :). ",
    "AndreyTsvetkov": "+1, webpack: \nApplication: iisexpress.exe\nFramework Version: v4.0.30319\nDescription: The process was terminated due to an unhandled exception.\nException Info: System.IO.IOException\n   at System.IO.__Error.WinIOError(Int32, System.String)\n   at System.IO.FileStream.Init(System.String, System.IO.FileMode, System.IO.FileAccess, Int32, Boolean, System.IO.FileShare, Int32, System.IO.FileOptions, SECURITY_ATTRIBUTES, System.String, Boolean, Boolean, Boolean)\n   at System.IO.FileStream..ctor(System.String, System.IO.FileMode, System.IO.FileAccess, System.IO.FileShare, Int32, System.IO.FileOptions, System.String, Boolean, Boolean, Boolean)\n   at System.IO.StreamReader..ctor(System.String, System.Text.Encoding, Boolean, Int32, Boolean)\n   at System.IO.File.InternalReadAllText(System.String, System.Text.Encoding, Boolean)\n   at React.JavaScriptEngineFactory.LoadUserScripts(JavaScriptEngineSwitcher.Core.IJsEngine)\n   at React.JavaScriptEngineFactory.InitialiseEngine(JavaScriptEngineSwitcher.Core.IJsEngine)\n   at JSPool.JsPool`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].CreateEngine()\n   at JSPool.JsPool`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].PopulateEngines()\n   at JSPool.FileWatcher.OnTimer(System.Object)\n   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)\n   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)\n   at System.Threading.TimerQueueTimer.CallCallback()\n   at System.Threading.TimerQueueTimer.Fire()\n   at System.Threading.TimerQueue.FireNextTimers()\n. ",
    "RPrimrose": "Yeah, it was a new one to me as well. \nStrangely MSDN doesn't seem to have an official list of FIPS-compliant algorithms but http://blogs.msdn.com/b/icumove/archive/2009/01/31/working-with-fips-in-net-c.aspx has some info.\nI've gone with SHA1Cng in the pull-request, should be a bit faster than SHA512.\n. ",
    "TomasHubelbauer": "Is the array really hardcoded or is it something like this.props.myArray or this.state.myArray which could be not present at the first render, then asyncly loaded and present on the second render? Log the array to the console to make sure it is valid at the time of rendering.\nThe reason it works in other methods could be that these are event handlers, thus loaded after UI interaction, which takes time (user points mouse and clicks for example) during which the async load and subsequent rerender could take place rendering the array available at that later point in time.\nAlso log the result of find to make sure you are not accessing a value of undefined should the condition in find not be met.\n. Ok then if you log the array, the result of find and the result of value, at what point in this chain is undefined introduced?\n. ",
    "manuelfsixtour": "The array is not really hardcoded, but the example above does not work. \nSo, it wouldn't work also with something like this.props.myArray or this.state.myArray.\n. It is a rendering exception, I am not able to log anything.\nI'm using the Html.React helper like this:\n@Html.React(\"MyComponent\", new { model = Model })\nWith the following (and only the following) code:\nclass MyComponent extends React.Component{\n  render(){\n    var val = [{id : 1, value : 'VALUE'}].find(x => x.id === 1).value;\n    console.log(val); // -> never called\n    return(\n      <div>{val}</div>\n    );\n  }\n}\nI get this exception (without any console log):\n\n. Thanks. It seems that it does exist and does not exist at the same time! :)\n\nI suppose that the V8 dll in the solution is not fully compliant with the actual V8 engine.\n. ",
    "joshburgess": "@deevus Consider checking these out: \nhttps://github.com/yahoo/react-intl\nhttps://github.com/mashpie/i18n-node\nhttps://github.com/jeresig/i18n-node-2\n. Whoops, sorry! That makes a lot more sense. I see the first step there is auto-restoring all of the nuget packages. That would have saved me some time. haha.\nI was really just trying to run & look through the sample projects to get a feel for how they are working. Do you know if anyone has been able to successfully serve up an ASP.NET Core app with an MVC view (just loading the initial state of the app with a home controller) while at the same time integrating webpack with all hot reloading & build functionality fully working? \nI'm trying to lay the foundations for a project utilizing this sort of workflow for a team right now. I would prefer to just use Node for this, but using MVC for that initial load (and talking to an OAuth server) will make others more comfortable... However, I really want to keep the nice front-end workflow with webpack & hot reloading, if possible.\n. ",
    "NaorShlomi": "Thanks..it's works :)\n. ",
    "jvdenning": "Hi\nWe've encountered the same error though with a slightly different stack, using the ClearScript.V8 engine - React.ReactEnvironment,Execute(String code) - and it fails at Line: 0 Column 0.\nThe code is a bundled.js file that contains the all the non-minified transpiled jsx files. \nThe V8 Runtime is reporting a version of 4.4.63.29, with the clearscript assembly version of 5.4.3, this is running on .NET 4.6 on Azure. The error is happening sporadically and is hard to reproduce - it feels like the script parsing is non-deterministic and occasionally ends up in a loop. \nJames\n. I ended up replacing the default v8 engine with one of my own by overwriting the tinyioc registrations.  I optimised my engine for the v8 runtime with script prrecompilation, tuneable clearscript settings , and changed some of the inbuilt syntax used for checking for a variable and made other changes (removed the lock statements for a start as  they were unnecessary). This mostly eliminated the problem but not entirely. There's also a thread at https://clearscript.codeplex.com/discussions/650824 but no real solution. \nRegarding my changes, they effectively  represent a fork in the code with some radical changes, I will see if I can write a version that is usable. \n. To check what engine is loaded (in an ASP.NET C# web app) and which are available you can run the attached code and render the output in the mechanism of your choice (log it, output it to a web page).\nWe got ClearScript.V8 running on Azure by ensuring the ClearScript.V8 folder that comes with React.NET makes it to the server (both in the root of the web app and in the bin directory where the build puts it) - I couldn't use any ClearScript.V8 assemblies/DLLs that came from any other source.\nHowever we are currently getting frequent but transient errors related to timeouts getting a JS Engine from the Pool or Potential Stack Overflow exceptions from the ClearScript.V8 code (which in turn is due to what the ClearScript dev called \"blank exceptions\" from V8...\nJSEngineDetectionSnippet.txt\n. ",
    "WilkaH": "I've started running into this error. Is there any more information on this?\nIt seems to happen randomly, and it never happens on my dev machine - it's only when running on Azure. I'm also using .NET 4.6.\n. I've done the same thing as @deevus and tried to remove use of React.Net - which is mostly done. It's gone from all user facing stuff, but it's still used on some admin pages (but it's less of a problem for it to break there) \n. Using the dev branch of ReactJS.NET with ChakraCore is the only way I've managed to get server-side rendering working in ASP .NET Core as well.. Ah, yes. That's the issue. I'm using RC4 of donet core cli tools.. @ktmanikanta can you include the code you're expecting to work please.. ",
    "dgpedro": "Hi. I'm facing the same issue here. \nWe are developing a azure web app based in asp.net mvc and react.net for some months and now when is close to prd date we are doing some performance tests.\nThe guy who is performing these tests says that this situation only happens when we have hundreds of concurrent request (+/- above 200). With a few (10-50) such error does not happen.\nI tried to google a bit, but unfortunately there's not much about this. Anyway, according to stackoverflow the problem seems to be related with SetAllowMsieEngine(false) and therefore using V8 engine, which from what I understood is now the default engine used by react.net.\nWe tried that and apparently from the first tests we did it seems to work when setting SetAllowMsieEngine(true).\nNow, since SetAllowMsieEngine is deprecated I'm trying to figure out a solution by setting other engine directly on JsEngineSwitcher. According to this benchmark it seems that ChakraCore is the winner.\nSo, I tried to set ChakraCore as js engine (I'm sorry but I'm a bit new in all of this and not sure if is correct and will work):\n```\nJsEngineSwitcher engineSwitcher = JsEngineSwitcher.Instance;\nengineSwitcher.EngineFactories\n    .AddChakraCore()\n    .AddMsie( new MsieSettings() { EngineMode = JsEngineMode.Auto } );\nengineSwitcher.DefaultEngineName = ChakraCoreJsEngine.EngineName;\n```\nWe'll tests and check. If the tests succeed, I'll share the results.\nI'm heavily using react.net in our web site, so I would not like to remove it right now and test everything, so if this solution will work great (at least for me), however I think the initial error \"potential stack overflow detected\" should be somehow fixed and I see for several months nothing new in this thread :\\\n. Hi @szarouski \nI'm sorry that I didn't post here the results as I said, but I totally forgot :\\\nWhat I can say is that after I've switched (like the piece of code in my previous post), this error completly disappeared even with heavier load (1000 concurrent requests). So for us was really great news, and maybe this engine could be set as default in react.net.\nSide effects we didn't noticed any, and our application is running as before but this time without errors :D\nI can't say much about performance, because we didn't measure the response time when using v8 (we were more worried to fix the error), but according to the benchmark I previously wrote using ChakraCore should be as performant as v8 if not better. But as I said, I can't confirm that... I just hope the guy is right :). I got a question... If react 15 no longer needs the attribute data-reactid, why react.net keeps rendering elements with this attribute?\nSo far I was using Html.React( ... , serverOnly: true ) so the server renders nice and clean html without any of these attributes, but now I got confused if I'm doing it properly and I'm not taking advantage of server rendering at all by doing it this way!?\nCould someone please clarify?\nThanks.\n. ",
    "chadangerer": "MVC 5 and .NET 4.6\n. Interestingly enough, I originally had the React.Owin package installed and wasn't using it. I removed it via nuget redeployed and Reactjs.Net seems to be working properly on Azure now.  Any thoughts on that?\n. ",
    "drobinson-inter-est": "Should this not be considered a bug? Also, are we likely to see a fix for it anytime soon? My entire rationale for using the React.NET integration was to give me server-side rendering within the .NET stack.\nI'm currently in the opening phases of build a new tech stack - If I can't guarantee that this issue will be resolved in the short term, then I'm going to have to strip out the .NET and go with a different solution. Some feedback on the likelihood of this would be appreciated.\n. I'm already pointing at compiled JS, @jslatts. \n@Daniel15 Thanks for the prompt response - I'm going to shelve .NET server-side processing for now and wait for the update, as I'm just building boilerplate at the moment and it isn't currently a priority: I also don't want to have to make the webpack.config.js file I've been working on work for React, es2015, postcss, tape.js etc on Babel 5 if I can help it.\nI'll revisit this, and resolve it, in a few weeks time.\n. ",
    "virtualsurfer": "Disabling source maps works just fine.\nThanks\n. ",
    "alekkowalczyk": "I set `.SetAllowMsieEngine(false)' and now it doesn't work locally.\nI added the JavaScriptEngineSwitcher.V8 nuget package but it didn't help.\nThat is the exception I get:\n```\n An unhandled exception occurred while processing the request.\nDirectoryNotFoundException: Failed to load the ClearScriptV8 assembly, because the directory 'C:\\Users\\alek.dnx\\runtimes\\dnx-clr-win-x86.1.0.0-beta8\\ClearScript.V8' does not exist.\nSystem.Reflection.RuntimeAssembly._nLoad(AssemblyName fileName, String codeBase, Evidence assemblySecurity, RuntimeAssembly locationHint, StackCrawlMark& stackMark, IntPtr pPrivHostBinder, Boolean throwOnFileNotFound, Boolean forIntrospection, Boolean suppressSecurityChecks)\nJsEngineLoadException: During loading of V8 JavaScript engine error has occurred.\n  See more details:\nFailed to load the ClearScriptV8 assembly, because the directory 'C:\\Users\\alek.dnx\\runtimes\\dnx-clr-win-x86.1.0.0-beta8\\ClearScript.V8' does not exist.\nJavaScriptEngineSwitcher.V8.V8JsEngine..ctor(V8Configuration config)\nTargetInvocationException: Exception has been thrown by the target of an invocation.\n System.RuntimeTypeHandle.CreateInstance(RuntimeType type, Boolean publicOnly, Boolean noCheck, Boolean& canBeCached, RuntimeMethodHandleInternal& ctor, Boolean& bNeedSecurityCheck)\nClearScriptV8InitialisationException: Failed to initialise ClearScript V8. This is most likely caused by the native libraries (ClearScriptV8-64.dll and v8-x64.dll) missing from your app's Bin directory, or the Visual C++ runtime not being installed. Please ensure your app is referencing the JavaScriptEngineSwitcher.V8 NuGet package, and refer to the ReactJS.NET site for moredebugging tips.\nMore details: Exception has been thrown by the target of an invocation.\n  React.JavaScriptEngineUtils.EnsureEngineFunctionalTEngine,TException\n```\n. @westdavidr unfortunatelly not, we dropped the idea of server side rendering as it seems not mature enough.\n. ",
    "westdavidr": "@alekkowalczyk Did you ever resolve this issue? \n. That is unfortunate. Hope this gets resolved soon. \n. Thanks @samppis!\n@Daniel15 Can you update to the latest version of JavaScriptEngineSwitcher.V8?\n. So awesome! When will we see a new Nuget package release? \n. That's amazing. Thank you so much.\nOn June 28, 2016 at 1:04:47 PM, Daniel Lo Nigro (notifications@github.com)\nwrote:\n\nYou can install version React.AspNet 2.4.1-dev-20160628-1635 or above\nfrom the development/build server\nhttp://reactjs.net/getting-started/download.html#development-builds to\ninstall the new build. I'll do a proper release soon :)\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/reactjs/React.NET/pull/287#issuecomment-229132091,\nor mute the thread\nhttps://github.com/notifications/unsubscribe/AAo35DNF3ROK5CQ5169HdPJewlWoK1VAks5qQWI_gaJpZM4JASRv\n.\n. \n",
    "joaker": "Hey @Daniel15 , \nIt looks like this problem is limited to Chrome.  Firefox loads the source map just fine.  There is a screenshot of Firefox with the source correctly mapped, and a second of from Chrome with the generated JS file without the source.\nThe screenshots came from a new MVC5 project I just created with VS2015 and ReactJS.Net 2.1.2.\nFirefox with correct JSX source file:\n\nChrome with compiled JSX file:\n\nI took a look at teh X-SourceMap header on the request in Chrome.  It looked like this:\nX-SourceMap:/Scripts/jsx/Page.jsx?map=1C06B553AB98F1960147\nI went to that URL and found a JSON object which had a \"sourceContents\" property that contained a string with the original source file's text.\n. Yes, source maps are definitely enabled in Chrome.  \n\nBelow is the source X-SourceMap JSON object:\n{\"version\":3,\"file\":\"/Scripts/jsx/Page.jsx\",\"sourceRoot\":null,\"sources\":[\"/Scripts/jsx/Page.jsx\"],\"sourcesContent\":[\"var Page = React.createClass({\\r\\n    render: function () {\\r\\n        return React application {(new Date()).toISOString()};\\r\\n    }\\r\\n});\\r\\n\\r\\nReactDOM.render(\\r\\n  ,\\r\\n  document.getElementById('content')\\r\\n);\"],\"names\":[],\"mappings\":\";;;;;AAAA,IAAI,IAAI,GAAG,KAAK,CAAC,WAAW,CAAC;;;AACzB,UAAM,EAAE,kBAAY;AAChB,eAAO;;cAAQ,SAAS,EAAE,YAAY,AAAC;;YAAoB,AAAC,IAAI,IAAI,EAAE,CAAE,WAAW,EAAE;SAAU,CAAC;KACnG;CACJ,CAAC,CAAC;;AAEH,QAAQ,CAAC,MAAM,CACb,oBAAC,IAAI,OAAG,EACR,QAAQ,CAAC,cAAc,CAAC,SAAS,CAAC,CACnC,CAAC\"}\n. Upgrading chrome to version 49.0.2623.54 beta-m (64-bit) resolved this issue for me\nJSX source was always available in Firefox with from applications using ReactJS.NET, and was visible in Chrome v48 from applications using babel+webpack (and not ReactJS.NET)\n. ",
    "Ackhuman": "We're having the same issue.  Source maps were working before updating the React.NET package, now we are 2.1 and they no longer work in Chrome.  If this were a bug in Chrome, it seems to me that this would happen regardless of the React.NET version.\n. ",
    "sladiri": "Yes, I was. It compiled fine, the output file was there.\n```\ndiff --git a/libvroomjs/jsengine.cpp b/libvroomjs/jsengine.cpp\nindex 96160f0..40009d6 100644\n--- a/libvroomjs/jsengine.cpp\n+++ b/libvroomjs/jsengine.cpp\n@@ -1,6 +1,7 @@\n#include \n #include \"vroomjs.h\"\n+#include \nlong js_mem_debug_engine_count;\n```\n. ",
    "AcousticGuitar": "Please see link above for the solution to this issue.  It was a \"user error\" on my part. \n. ",
    "mycall": "I can't seem to reproduce the build errors and I didn't save the errors or shell session output.  It could have been error with stale global nodejs packages.\nI'll close the issue but will report back if I see it again. \n. doing so returned \"Unknown option: base.loose\" for both client.js and server.js\n. grazie mille\n. ",
    "aeleftheriadis": "I was using ReactCSSTransitionGroup.\nI used React.addons.CSSTransitionGroup instead and everything worked as a charm\n. ",
    "cnaa97": "Hi. I had same problem. but your solution also encountered. \n. ",
    "john-cheesman": "I'm having the same issue locally. I've got the ClearScript.V8 folder at the project root but looking at the stack trace the error is coming from MsieJavaScriptEngine.\nI've also got System.Web.Optimization.React installed and I get the same error at @Scripts.Render() in the view when trying to bundle .jsx files.\nAny ideas?\n. ",
    "Jodith": "Same here.\nI tried to bind to onChange on an input element and it doesn't work with server-side rendering at all.\nWill it be fixed or is there a workaround? Seems like a really important feature. :+1: \n. ",
    "CoskunSunali": "Are there any updates on this one?\n. ",
    "AustinWinstanley": "Same. onClick just doesn't render with vNext and server side rendering\n. ",
    "ptcc": "React render has to be called also on the client side to attach the events... I have not used react.Net, but it is the same with plain react with node server side rendering... it just creates the html and the render has to be called client side also (react will compare the rendering results and not re-render on the dom, effectively taking advantage of server side rendering)\n. ",
    "jpsingleton": "I just pulled the latest tutorial code from this repository and the server side rendering fails to bind the events. The problem is with remarkable.\nIf you strip out all the markdown bits then it works as expected. I think remarkable just complicates the tutorial and should be removed to simplify it. I'm happy to do this if it's a good idea. There's some broken formatting to tidy up too.\nP.S. To run the tutorial on your installed framework, e.g. ASP.NET 1.0.1 (rather than 1.0.0), simply delete the global.json file.\n. I'm testing this out and I got the same AccessViolationException when using ASP.NET Core 1.0.1 on .NET Core 1.0.1 (VS tooling preview 2 comes with this, not 1.1). It works out-of-the-box when using ASP.NET Core 1.0.1 on .NET Framework 4.6.2 though.\n\n\nSystem.AccessViolationException was unhandled\nMessage: An unhandled exception of type 'System.AccessViolationException' occurred in System.Private.CoreLib.ni.dll\nAdditional information: Attempted to read or write protected memory. This is often an indication that other memory is corrupt.\n\n\n\nI was able to work around the problem by installing the latest versions of the JavaScriptEngine packages in project.json. This forces React.NET to use them instead of the bundled 2.0.0 versions. However, I then hit an error where it says there is no JavaScript Engine installed so I'm not sure if this is actually a step backwards and not triggering the violation bug. If I add a native package the issue returns.\n\n\n\"React.AspNet\": \"3.0.0\",\n\"MsieJavaScriptEngine\": \"2.0.2\",\n\"JavaScriptEngineSwitcher.Msie\": \"2.1.2\",\n\"JavaScriptEngineSwitcher.ChakraCore\": \"2.1.2\",\n\"JavaScriptEngineSwitcher.ChakraCore.Native.win-x86\": \"2.1.1\"\n\n\n\nI'll stick with the .NET Framework base for ASP.NET Core for now. This seems to be an issue with .NET Core (at least on Windows). https://github.com/reactjs/React.NET/issues/337 seems to be the same issue, along with some others.. I haven't changed any defaults so they will be the same as set by React.NET. I've simply installed the latest updated packages that are dependencies of React.NET 3.0.0 (it ships with them all set to 2.0.0).\nThe error appears at first as a blank page as the request to the .jsx file returns a 500 code with a ReactEngineNotFoundException. I think the detailed wording may be out-of-date though.\n\n\nReactEngineNotFoundException: No usable JavaScript engine was found. Please install a JavaScript engine such as React.JavaScriptEngine.ClearScriptV8 (on Windows) or React.JavaScriptEngine.VroomJs (on Linux and Mac OS X). Refer to the ReactJS.NET documentation for more details.\n\n\n. Interestingly the x86 package doesn't trigger the bug but the x64 one does. It still doesn't detect it as an engine though. I've tried all of the the ones listed as supporting .NET Standard in the docs. I'll just stick with the classic .NET Framework but hopefully this might point you in the right direction.. ",
    "jovnas": "My current problem is the use of child selectors in css. Since React.NET \"adds an extra element\" around the component, the child selector does not work unless I add another child level in the css. I could of course rewrite my other \"components\" to include the extra child level in the HTML also, but adding a class to the container seems like the easier path. (If you're lazy like me... ;-) )\nI will try to submit a pull request. It's my first ever, so I hope I get it right! :-)\n. I think I got it right... Haven't really used git before. :-)\n. Nice! Thank you!\n. ",
    "ghost": "Manual updating Clearscript.V8 solved this.\n. Has this been resolved in Nuget? I can not clone the project I can only pull it through nuget due to proxy/firewall - this is an MVC 4 project and the JSPool dependency is preventing install.\n. @Taritsyn  Didn't help.. ",
    "lambert-velir": "For anyone with this issue, I've worked around this by adding window.myComponentInstance = this; inside of  componentDidMount\n. ",
    "nhannguyen29": "Hi, I'm using macOS Sierra and ASP.NET Core 1.0 for my website. I got the same error and some more after adding and configuring React.AspNet 3.0.0 package to my website. Can you help me to resolve it? Thank you so much.\nHere is the 500 Internal Error I'm getting:\n\nVroomJsInitialisationException: Failed to initialise VroomJs. This is most likely caused by the native library (libVroomJsNative.so) being out of date or your system lacking a compatible version of V8. Please run Mono with the MONO_LOG_LEVEL=debug environment variable for more debugging information, and refer to the ReactJS.NET Mono documentation at http://reactjs.net/guides/mono.html for further debugging hints.\nMore details: Exception has been thrown by the target of an invocation.\nConstructType\nTinyIoCResolutionException: Unable to resolve type: React.JavaScriptEngineFactory\nConstructType\nTinyIoCResolutionException: Unable to resolve type: React.ReactEnvironment\nConstructType \n. I tried to follow the instruction on how to set up the VroomJs. However, I encountered this error:\nsvn checkout --force http://gyp.googlecode.com/svn/trunk build/gyp \\\n--revision 1501\nsvn: E170013: Unable to connect to a repository at URL 'http://gyp.googlecode.com/svn/trunk'\nsvn: E160013: '/svn/trunk' path not found\nMakefile:301: recipe for target 'dependencies' failed\nmake: *** [dependencies] Error 1\n\nSeems like the issue #289  is the same as mine. In that issue, the poster was able to work around this to run the make native ... command when building v8 but I couldn't. Can you look into this, please? Thank you so much. \n. ",
    "sigmundholm": "Hi, I'm also using macOS Sierra and ASP.NET Core. I got the exact same error. I tried to follow the guide in the link, but without luck. @nhannguyen29, were you able to solve the problem? . ",
    "cessationoftime": "I believe this is caused by the use of Babel in version 2.0 of ReactJs.net.\nSee solutions here: https://stackoverflow.com/questions/34097915/visual-studio-2015-jsx-es2015-syntax-highlighting\n. ",
    "vincentshow": "i found that the inner exception occured when JavaScriptEngineSwitcher.Core.JsEngineBase.ExecuteResource processing the resource React.Resources.babel.generated.min.js, and throwed by MsieJavaScriptEngine.ActiveScript. ParseScriptText when calling this._activeScriptParse32.ParseScriptText. \nwhatever, no solution yet...\n. note that you mentioned \nMSIE depends on the version of Internet Explorer installed\nand i have upgraded my reactjs.net by nuget and added .SetAllowMsieEngine(false) in my config when exception occured,\ni try to upgrade my ie from 9 to 11,rebuild......no exception occured and the example was ok!\nas i'm in working, there's  no time to downgrade ie to replicate last exception. but this is  interesting, \nam i  missing something rules? doesn't reactjs support ie9? \n. ",
    "alexlblount": "I'm also receiving this error, but it only happens on the server after I publish.  When I run the project locally, I have no issues.\n. ",
    "Pabloitto": "I have the same issue, any update ??\n. ",
    "ajhub": "@Daniel15 : Hope you had a great vacation.\nSame here. Downgrading to 2.1.2 does not help either.\nI then get an issue given below ...\nReact.Exceptions.BabelException: Expected identifier ---> JavaScriptEngineSwitcher.Core.JsRuntimeException: Expected identifier ---> MsieJavaScriptEngine.JsRuntimeException: Expected identifier\nInterestingly, there are 5 developers on the project, and this works fine on 3 dev machines. It fails on 2 and also on TeamCity. What makes this machine dependent?\nAny help is appreciated.\n. ",
    "garethdhopkins": "I had this problem where it worked locally but not on our production server and where adding .SetAllowMsieEngine(false) to my config I got an error about the V8 bin files not being found. Installing Visual C++ Redistributable Packages for Visual Studio 2013 fixed the issue.\nSee the following SO for more information and different fixes:-\nhttp://stackoverflow.com/questions/23301851/clearscript-files-cannot-be-found-on-host\n. ",
    "milianoo": "I have this issue on v2.2.1 \n\"React.Exceptions.BabelException: Unable to get property 'split' of undefined or null reference ---> JavaScriptEngineSwitcher.Core.JsRuntimeException: Unable to get property 'split' of undefined or null reference ---> MsieJavaScriptEngine.JsRuntimeException: Unable to get property 'split' of undefined or null reference \"\n. ",
    "waacton": "\nReact.Exceptions.BabelException: Unable to get property 'split' of undefined or null reference\n\nI also had this issue in v2.2.1 after publishing to Azure server.  I disabled MSIE engine fallback with .SetAllowMsieEngine(false) and got (locally and on the server):\n\nDirectoryNotFoundException: Failed to load the ClearScriptV8 assembly, because the directory '........\\ClearScript.V8' does not exist\n\nSeems as though v2.2.1 didn't work out of the box for me - I had to copy ClearScript V8 engine binaries to the right directories (useful: http://www.samulihaverinen.com/web-development/dotnet/2016/01/19/how-to-run-clearscript-v8-javascript-engine-in-azure/).\nThis is all entirely new to me, so I suspect I've missed something with my environment setup somewhere?\n. ",
    "fehro": "My current development machine is stuck using IE10 so I did what @waacton suggested above by copying the files manually to my user dnx directory and it worked. Thanks.\n. ",
    "WereDev": "I was on 2.3.0 and still had this problem when I published.  It worked fine when running locally.  I moved back to 2.1.2 and it's working well again.\n. Seems if I replace\nmake dependencies\nwith\ncd build\ngit clone https://chromium.googlesource.com/external/gyp\ncd ..\nAnd then continue on, the next make native ... line will succeed.\n. At step g++ jscontext.cpp jsengine.cpp managedref.cpp bridge.cpp jsscript.cpp -o libVroomJsNative.so -shared -L /usr/local/src/v8-3.17/out/native/lib.target/ -I /usr/local/src/v8-3.17/include/ -fPIC -Wl,--no-as-needed -l:/usr/local/lib/libv8.so.3.17.16.2\nGetting error /usr/bin/ld: cannot find -l:/usr/local/lib/libv8.so.3.17.16.2\nFile does exist, however:\n-rwxr-xr-x 1 root root  7999056 Jul  2 12:44 libv8.so.3.17.16.2\ndrwxrwsr-x 4 root staff    4096 Apr 20 17:13 python2.7\ndrwxrwsr-x 3 root staff    4096 Apr 20 17:08 python3.5\nNot sure where to go from here...\n. ",
    "cramhead": "Given the error message I think you're correct.\nI'll close this. I should be getting VS2015 soon, so maybe this will be resolved that way. \nFor others who may experience the issue, what can I say. My config is pretty stock Window 7 and VS2013.\n. ",
    "sfadeev": "These files comes from folder content from React.Core.2.2.0.nupkg, this is the expected behavior for content files - Nuget include content of content folder to project while installing packages.\nIf these files are completely not required in end projects using React.Net (I've checked, seems works fine without them) they should be excluded from .nupkg. Simple way to do so is to mark these files with Build Action None in project React.Core (right now files marked with Build Action Content).\n. Take a look at project README.md at https://github.com/reactjs/React.NET/blob/master/README.md#building-manually-and-contributing, it may help:\n\nWhen building your own copy of ReactJS.NET (for example, if implementing a new feature or fixing a bug), your first build always needs to be done using the build script (dev-build.bat) as this generates a few files required by the build (such as SharedAssemblyVersionInfo.cs)\n. \n",
    "taspeotis": "I have this issue with ASP.NET 5 as well (using RC1).\nI think the solution would be to have FileSystemBase use the same FileProvider as StaticFileOptions. Or, as the original post points out, FileInfo has CreateReadStream. Right now FileSystemBase just calls File.ReadAllText which goes for the physical file system.\n\nDoes EmbeddedResourceFileSystem still have a concept of a file name\n\nThe EmbeddedResourceFileInfo class from ASP.NET 5 does not have a unique name, it has a Name property which is just the file's name.\n\nyou can't really get a 'hash' of the stream\n\nJust hash the stream's content? FileSystemBase is reading the entire file anyway.\n. If we agree that hashing the stream's content is acceptable let me know and I'll try and make a PR out of it.\nAlso, now that I've looked at it, EmbeddedResourceFileSystem returns null for PhysicalPath so it's probably a reasonable performance optimization to key the cache by fileInfo.PhysicalPath ?? StreamContentHash()\n. I started some work, the bulk of which you can view here. (Disregard the formatting for now; I used spaces instead of tabs.)\nAfter poking around a bit, I think this needs a bit more consideration. As far as my extremely nascent understanding of ASP.NET 5 goes, IFileSystem is a bit of an anachronism.\nInstead of IFileSystem the library should just use an IFileProvider. This would be implemented library-wide along the lines of IReactSiteConfiguration.FileProvider (and render the FileProvider property on BabelFileOptions obsolete).\nBy way of example: consider IFileSystem.MapPath. Right now AspNetFileSystem does the following:\npublic override string MapPath(string relativePath)\n{\n    relativePath = relativePath.TrimStart('~').TrimStart('/');\n    return Path.Combine(_hostingEnv.WebRootPath, relativePath);\n}\nAn embedded resource doesn't have a path to map to. At best it could be something like YourAssembly.EmbeddedResources.YourFile.jsx: the manifest resource name.\nFor non-physical file providers, there's no such thing as a physical path. Note that without a physical path that IFileInfo objects don't have an identity beyond the the hash of their stream. (If an IFileInfo has a non-null PhysicalPath then that's its identity.)\nIf you can carry around the virtual path in addition to the IFileProvider then you have an identity always.\n(The ASP.NET IFileProviders are here.)\nSo to do this properly, IFileSystem might have to be ripped out. MapPath certainly would have to be.\n(ReSharper counts 18 references to IFileSystem.MapPath. Most of them are in FileSystemBase but outside of that it's used for things like hash keys.)\nRather than continue on I'd rather defer to someone else's judgement.\n. ",
    "lazytype": "Sure\n. Updated :)\n. ",
    "stevenguh": "I am able to use chutzpah(see mmanela/chutzpah#475) with React.MSbuild to perform unit test, which it looks a little bit like a hack right now. FYI, My environment is Visual Studio 2012 with ASP.NET MVC 5. \n. Thanks, it works.\nFYI, I have to change to command to msbuild foo.csproj /t:TransformBabel /p:Platform=x64 /p:Configuration=Debug in order to try out the transform. Once I got that working, I added BeforeTargets=\"Build\" in the foo.csproj to transform before build.\nHowever, is there any way to specify the output of the transform? it seems like it used to have the option of TargetDir to target the output I assume.\n. In that case I think the document on MSBuild needs to be updated before the feature is completed, namely the TargetDir=\"\" options is invalid.\nDo you want me to create a separate issue about the output path and close out this one?\n. I found out that the MSBuild.exe instance from the first build is still running.\n. Yes. I can consistently reproduce this issue. It seems like someone is still using the dlls in the bin. When I do a clean project, it can't remove those files in bin.\n\nOn Mar 5, 2016, at 2:57 PM, Daniel Lo Nigro notifications@github.com wrote:\nSo is this an issue with ReactJS.NET, or was it just because the first build never finished for some reason? Can you consistently replicate the issue?\n\u2014\nReply to this email directly or view it on GitHub.\n. I think this is an issue in how Visual Studio builds their project. When building a project in Visual Studio, it will call MSBuild and configurate to reuse the node, which basically means the MSBuild prcoess will still be around after the build finishes.\n\nOriginally, I put\n<UsingTask AssemblyFile=\"$(OutputPath)React.MSBuild.dll\" TaskName=\"TransformBabel\" />\n<Target Name=\"TransformBabel\">\n  <TransformBabel SourceDir=\"$(MSBuildProjectDirectory)\" />\n</Target>\ndirectly inside of the .proj file of my project. Therefore, when building my project, the MSBuild will hang around which causes the lock on the dlls.\nTo solve this, I looked at the current source in the React.Sample.Mvc4, and realized I can call an external MSBuild with node reuse set the false after build on the project to transpile.\n<Target Name=\"TransformBabel\" AfterTargets=\"AfterBuild\">\n    <!-- This needs to be ran via Exec since the build locks the React.MSBuild.dll file -->\n    <!-- In a regular project, you could just call this task directly -->\n    <Exec Command=\"&quot;$(msbuildtoolspath)\\msbuild.exe&quot; TransformBabel.proj /nr:false /p:Configuration=$(Configuration);OutputPath=$(OutputPath)\" />\n  </Target>. Sometimes I can't even build React.Sample.Mvc4 with no changes to e12020b1f99f99d71f22a92401a2e23913e891bc. I guess that just invalidate my repo steps above.\nI haven't pin down the exact cause yet, but I have a hack that works.\n1) Add config.SetAllowMsieEngine(false) in Execute() method in TransformBalbel.cs\n2) Rebuild React.Smaple.Mvc4, now this would give me another stack saying can't find v8-ia32.dll\n6>------ Rebuild All started: Project: React.Sample.Mvc4, Configuration: Debug Any CPU ------\n6>  React.Sample.Mvc4 -> C:\\Users\\StevenG\\Documents\\Git Repos\\React.NET\\src\\React.Sample.Mvc4\\bin\\React.Sample.Mvc4.dll\n6>  Microsoft (R) Build Engine version 14.0.25420.1\n6>  Copyright (C) Microsoft Corporation. All rights reserved.\n6>  \n6>  Build started 11/30/2016 6:01:12 PM.\n6>  Project \"C:\\Users\\StevenG\\Documents\\Git Repos\\React.NET\\src\\React.Sample.Mvc4\\TransformBabel.proj\" on node 1 (default targets).\n6>C:\\Users\\StevenG\\Documents\\Git Repos\\React.NET\\src\\React.Sample.Mvc4\\TransformBabel.proj(5,5): error MSB4018: The \"TransformBabel\" task failed unexpectedly.\n6>C:\\Users\\StevenG\\Documents\\Git Repos\\React.NET\\src\\React.Sample.Mvc4\\TransformBabel.proj(5,5): error MSB4018: React.TinyIoC.TinyIoCResolutionException: Unable to resolve type: React.ReactEnvironment ---> React.TinyIoC.TinyIoCResolutionException: Unable to resolve type: React.JavaScriptEngineFactory ---> React.Exceptions.ClearScriptV8InitialisationException: Failed to initialise ClearScript V8. This is most likely caused by the native libraries (ClearScriptV8-64.dll and v8-x64.dll) missing from your app's Bin directory, or the Visual C++ runtime not being installed. Please ensure your app is referencing the JavaScriptEngineSwitcher.V8 NuGet package, and refer to the ReactJS.NET site for moredebugging tips.\n6>C:\\Users\\StevenG\\Documents\\Git Repos\\React.NET\\src\\React.Sample.Mvc4\\TransformBabel.proj(5,5): error MSB4018: \n6>C:\\Users\\StevenG\\Documents\\Git Repos\\React.NET\\src\\React.Sample.Mvc4\\TransformBabel.proj(5,5): error MSB4018: More details: Exception has been thrown by the target of an invocation. ---> System.Reflection.TargetInvocationException: Exception has been thrown by the target of an invocation. ---> JavaScriptEngineSwitcher.Core.JsEngineLoadException: During loading of V8JsEngine error has occurred.\n6>C:\\Users\\StevenG\\Documents\\Git Repos\\React.NET\\src\\React.Sample.Mvc4\\TransformBabel.proj(5,5): error MSB4018: See more details:\n6>C:\\Users\\StevenG\\Documents\\Git Repos\\React.NET\\src\\React.Sample.Mvc4\\TransformBabel.proj(5,5): error MSB4018: \n6>C:\\Users\\StevenG\\Documents\\Git Repos\\React.NET\\src\\React.Sample.Mvc4\\TransformBabel.proj(5,5): error MSB4018: Cannot load V8 interface assembly. Load failure information for v8-ia32.dll:\n6>C:\\Users\\StevenG\\Documents\\Git Repos\\React.NET\\src\\React.Sample.Mvc4\\TransformBabel.proj(5,5): error MSB4018: C:\\Users\\StevenG\\Documents\\Git Repos\\React.NET\\src\\React.MSBuild\\bin\\Debug\\net40\\v8-ia32.dll: The specified module could not be found\n6>C:\\Users\\StevenG\\Documents\\Git Repos\\React.NET\\src\\React.Sample.Mvc4\\TransformBabel.proj(5,5): error MSB4018: C:\\Program Files (x86)\\MSBuild\\14.0\\bin\\v8-ia32.dll: The specified module could not be found ---> System.TypeLoadException: Cannot load V8 interface assembly. Load failure information for v8-ia32.dll:\n6>C:\\Users\\StevenG\\Documents\\Git Repos\\React.NET\\src\\React.Sample.Mvc4\\TransformBabel.proj(5,5): error MSB4018: C:\\Users\\StevenG\\Documents\\Git Repos\\React.NET\\src\\React.MSBuild\\bin\\Debug\\net40\\v8-ia32.dll: The specified module could not be found\n6>C:\\Users\\StevenG\\Documents\\Git Repos\\React.NET\\src\\React.Sample.Mvc4\\TransformBabel.proj(5,5): error MSB4018: C:\\Program Files (x86)\\MSBuild\\14.0\\bin\\v8-ia32.dll: The specified module could not be found\n6>C:\\Users\\StevenG\\Documents\\Git Repos\\React.NET\\src\\React.Sample.Mvc4\\TransformBabel.proj(5,5): error MSB4018: at Microsoft.ClearScript.V8.V8Proxy.LoadNativeLibrary()\n6>C:\\Users\\StevenG\\Documents\\Git Repos\\React.NET\\src\\React.Sample.Mvc4\\TransformBabel.proj(5,5): error MSB4018: at Microsoft.ClearScript.V8.V8Proxy.LoadAssembly()\n6>C:\\Users\\StevenG\\Documents\\Git Repos\\React.NET\\src\\React.Sample.Mvc4\\TransformBabel.proj(5,5): error MSB4018: at Microsoft.ClearScript.V8.V8Proxy.GetAssembly()\n6>C:\\Users\\StevenG\\Documents\\Git Repos\\React.NET\\src\\React.Sample.Mvc4\\TransformBabel.proj(5,5): error MSB4018: at Microsoft.ClearScript.V8.V8Proxy.GetImplType(Type type)\n6>C:\\Users\\StevenG\\Documents\\Git Repos\\React.NET\\src\\React.Sample.Mvc4\\TransformBabel.proj(5,5): error MSB4018: at Microsoft.ClearScript.V8.V8Proxy.CreateImpl[T](Object[] args)\n6>C:\\Users\\StevenG\\Documents\\Git Repos\\React.NET\\src\\React.Sample.Mvc4\\TransformBabel.proj(5,5): error MSB4018: at Microsoft.ClearScript.V8.V8IsolateProxy.Create(String name, V8RuntimeConstraints constraints, Boolean enableDebugging, Int32 debugPort)\n6>C:\\Users\\StevenG\\Documents\\Git Repos\\React.NET\\src\\React.Sample.Mvc4\\TransformBabel.proj(5,5): error MSB4018: at Microsoft.ClearScript.V8.V8Runtime..ctor(String name, V8RuntimeConstraints constraints, V8RuntimeFlags flags, Int32 debugPort)\n6>C:\\Users\\StevenG\\Documents\\Git Repos\\React.NET\\src\\React.Sample.Mvc4\\TransformBabel.proj(5,5): error MSB4018: at Microsoft.ClearScript.V8.V8ScriptEngine..ctor(V8Runtime runtime, String name, V8RuntimeConstraints constraints, V8ScriptEngineFlags flags, Int32 debugPort)\n6>C:\\Users\\StevenG\\Documents\\Git Repos\\React.NET\\src\\React.Sample.Mvc4\\TransformBabel.proj(5,5): error MSB4018: at JavaScriptEngineSwitcher.V8.V8JsEngine..ctor(V8Settings settings)\n6>C:\\Users\\StevenG\\Documents\\Git Repos\\React.NET\\src\\React.Sample.Mvc4\\TransformBabel.proj(5,5): error MSB4018: --- End of inner exception stack trace ---\n6>C:\\Users\\StevenG\\Documents\\Git Repos\\React.NET\\src\\React.Sample.Mvc4\\TransformBabel.proj(5,5): error MSB4018: at JavaScriptEngineSwitcher.V8.V8JsEngine..ctor(V8Settings settings)\n6>C:\\Users\\StevenG\\Documents\\Git Repos\\React.NET\\src\\React.Sample.Mvc4\\TransformBabel.proj(5,5): error MSB4018: at JavaScriptEngineSwitcher.V8.V8JsEngine..ctor()\n6>C:\\Users\\StevenG\\Documents\\Git Repos\\React.NET\\src\\React.Sample.Mvc4\\TransformBabel.proj(5,5): error MSB4018: --- End of inner exception stack trace ---\n6>C:\\Users\\StevenG\\Documents\\Git Repos\\React.NET\\src\\React.Sample.Mvc4\\TransformBabel.proj(5,5): error MSB4018: at System.RuntimeTypeHandle.CreateInstance(RuntimeType type, Boolean publicOnly, Boolean noCheck, Boolean& canBeCached, RuntimeMethodHandleInternal& ctor, Boolean& bNeedSecurityCheck)\n6>C:\\Users\\StevenG\\Documents\\Git Repos\\React.NET\\src\\React.Sample.Mvc4\\TransformBabel.proj(5,5): error MSB4018: at System.RuntimeType.CreateInstanceSlow(Boolean publicOnly, Boolean skipCheckThis, Boolean fillCache, StackCrawlMark& stackMark)\n6>C:\\Users\\StevenG\\Documents\\Git Repos\\React.NET\\src\\React.Sample.Mvc4\\TransformBabel.proj(5,5): error MSB4018: at System.RuntimeType.CreateInstanceDefaultCtor(Boolean publicOnly, Boolean skipCheckThis, Boolean fillCache, StackCrawlMark& stackMark)\n6>C:\\Users\\StevenG\\Documents\\Git Repos\\React.NET\\src\\React.Sample.Mvc4\\TransformBabel.proj(5,5): error MSB4018: at System.Activator.CreateInstance[T]()\n6>C:\\Users\\StevenG\\Documents\\Git Repos\\React.NET\\src\\React.Sample.Mvc4\\TransformBabel.proj(5,5): error MSB4018: at React.JavaScriptEngineUtils.EnsureEngineFunctional[TEngine,TException](Func`2 exceptionFactory) in C:\\Users\\StevenG\\Documents\\Git Repos\\React.NET\\src\\React.Core\\JavaScriptEngineUtils.cs:line 64\n6>C:\\Users\\StevenG\\Documents\\Git Repos\\React.NET\\src\\React.Sample.Mvc4\\TransformBabel.proj(5,5): error MSB4018: --- End of inner exception stack trace ---\n6>C:\\Users\\StevenG\\Documents\\Git Repos\\React.NET\\src\\React.Sample.Mvc4\\TransformBabel.proj(5,5): error MSB4018: at React.JavaScriptEngineUtils.EnsureEngineFunctional[TEngine,TException](Func`2 exceptionFactory) in C:\\Users\\StevenG\\Documents\\Git Repos\\React.NET\\src\\React.Core\\JavaScriptEngineUtils.cs:line 71\n6>C:\\Users\\StevenG\\Documents\\Git Repos\\React.NET\\src\\React.Sample.Mvc4\\TransformBabel.proj(5,5): error MSB4018: at React.JavaScriptEngineFactory.GetFactory(JsEngineSwitcher jsEngineSwitcher, Boolean allowMsie) in C:\\Users\\StevenG\\Documents\\Git Repos\\React.NET\\src\\React.Core\\JavaScriptEngineFactory.cs:line 285\n6>C:\\Users\\StevenG\\Documents\\Git Repos\\React.NET\\src\\React.Sample.Mvc4\\TransformBabel.proj(5,5): error MSB4018: at React.JavaScriptEngineFactory..ctor(JsEngineSwitcher jsEngineSwitcher, IReactSiteConfiguration config, IFileSystem fileSystem) in C:\\Users\\StevenG\\Documents\\Git Repos\\React.NET\\src\\React.Core\\JavaScriptEngineFactory.cs:line 71\n6>C:\\Users\\StevenG\\Documents\\Git Repos\\React.NET\\src\\React.Sample.Mvc4\\TransformBabel.proj(5,5): error MSB4018: at lambda_method(Closure , Object[] )\n6>C:\\Users\\StevenG\\Documents\\Git Repos\\React.NET\\src\\React.Sample.Mvc4\\TransformBabel.proj(5,5): error MSB4018: at React.TinyIoC.TinyIoCContainer.ConstructType(Type requestedType, Type implementationType, ConstructorInfo constructor, NamedParameterOverloads parameters, ResolveOptions options) in C:\\Users\\StevenG\\Documents\\Git Repos\\React.NET\\src\\React.Core\\TinyIoC\\TinyIoC.cs:line 4053\n6>C:\\Users\\StevenG\\Documents\\Git Repos\\React.NET\\src\\React.Sample.Mvc4\\TransformBabel.proj(5,5): error MSB4018: --- End of inner exception stack trace ---\n6>C:\\Users\\StevenG\\Documents\\Git Repos\\React.NET\\src\\React.Sample.Mvc4\\TransformBabel.proj(5,5): error MSB4018: at React.TinyIoC.TinyIoCContainer.ConstructType(Type requestedType, Type implementationType, ConstructorInfo constructor, NamedParameterOverloads parameters, ResolveOptions options) in C:\\Users\\StevenG\\Documents\\Git Repos\\React.NET\\src\\React.Core\\TinyIoC\\TinyIoC.cs:line 4060\n6>C:\\Users\\StevenG\\Documents\\Git Repos\\React.NET\\src\\React.Sample.Mvc4\\TransformBabel.proj(5,5): error MSB4018: at React.TinyIoC.TinyIoCContainer.ConstructType(Type requestedType, Type implementationType, ConstructorInfo constructor, ResolveOptions options) in C:\\Users\\StevenG\\Documents\\Git Repos\\React.NET\\src\\React.Core\\TinyIoC\\TinyIoC.cs:line 3987\n6>C:\\Users\\StevenG\\Documents\\Git Repos\\React.NET\\src\\React.Sample.Mvc4\\TransformBabel.proj(5,5): error MSB4018: at React.TinyIoC.TinyIoCContainer.SingletonFactory.GetObject(Type requestedType, TinyIoCContainer container, NamedParameterOverloads parameters, ResolveOptions options) in C:\\Users\\StevenG\\Documents\\Git Repos\\React.NET\\src\\React.Core\\TinyIoC\\TinyIoC.cs:line 3194\n6>C:\\Users\\StevenG\\Documents\\Git Repos\\React.NET\\src\\React.Sample.Mvc4\\TransformBabel.proj(5,5): error MSB4018: at React.TinyIoC.TinyIoCContainer.ResolveInternal(TypeRegistration registration, NamedParameterOverloads parameters, ResolveOptions options) in C:\\Users\\StevenG\\Documents\\Git Repos\\React.NET\\src\\React.Core\\TinyIoC\\TinyIoC.cs:line 3734\n6>C:\\Users\\StevenG\\Documents\\Git Repos\\React.NET\\src\\React.Sample.Mvc4\\TransformBabel.proj(5,5): error MSB4018: at React.TinyIoC.TinyIoCContainer.ConstructType(Type requestedType, Type implementationType, ConstructorInfo constructor, NamedParameterOverloads parameters, ResolveOptions options) in C:\\Users\\StevenG\\Documents\\Git Repos\\React.NET\\src\\React.Core\\TinyIoC\\TinyIoC.cs:line 4029\n6>C:\\Users\\StevenG\\Documents\\Git Repos\\React.NET\\src\\React.Sample.Mvc4\\TransformBabel.proj(5,5): error MSB4018: --- End of inner exception stack trace ---\n6>C:\\Users\\StevenG\\Documents\\Git Repos\\React.NET\\src\\React.Sample.Mvc4\\TransformBabel.proj(5,5): error MSB4018: at React.TinyIoC.TinyIoCContainer.ConstructType(Type requestedType, Type implementationType, ConstructorInfo constructor, NamedParameterOverloads parameters, ResolveOptions options) in C:\\Users\\StevenG\\Documents\\Git Repos\\React.NET\\src\\React.Core\\TinyIoC\\TinyIoC.cs:line 4041\n6>C:\\Users\\StevenG\\Documents\\Git Repos\\React.NET\\src\\React.Sample.Mvc4\\TransformBabel.proj(5,5): error MSB4018: at React.TinyIoC.TinyIoCContainer.ConstructType(Type requestedType, Type implementationType, ConstructorInfo constructor, ResolveOptions options) in C:\\Users\\StevenG\\Documents\\Git Repos\\React.NET\\src\\React.Core\\TinyIoC\\TinyIoC.cs:line 3987\n6>C:\\Users\\StevenG\\Documents\\Git Repos\\React.NET\\src\\React.Sample.Mvc4\\TransformBabel.proj(5,5): error MSB4018: at React.TinyIoC.TinyIoCContainer.SingletonFactory.GetObject(Type requestedType, TinyIoCContainer container, NamedParameterOverloads parameters, ResolveOptions options) in C:\\Users\\StevenG\\Documents\\Git Repos\\React.NET\\src\\React.Core\\TinyIoC\\TinyIoC.cs:line 3194\n6>C:\\Users\\StevenG\\Documents\\Git Repos\\React.NET\\src\\React.Sample.Mvc4\\TransformBabel.proj(5,5): error MSB4018: at React.TinyIoC.TinyIoCContainer.ResolveInternal(TypeRegistration registration, NamedParameterOverloads parameters, ResolveOptions options) in C:\\Users\\StevenG\\Documents\\Git Repos\\React.NET\\src\\React.Core\\TinyIoC\\TinyIoC.cs:line 3734\n6>C:\\Users\\StevenG\\Documents\\Git Repos\\React.NET\\src\\React.Sample.Mvc4\\TransformBabel.proj(5,5): error MSB4018: at React.TinyIoC.TinyIoCContainer.Resolve(Type resolveType) in C:\\Users\\StevenG\\Documents\\Git Repos\\React.NET\\src\\React.Core\\TinyIoC\\TinyIoC.cs:line 1825\n6>C:\\Users\\StevenG\\Documents\\Git Repos\\React.NET\\src\\React.Sample.Mvc4\\TransformBabel.proj(5,5): error MSB4018: at React.TinyIoC.TinyIoCContainer.Resolve[ResolveType]() in C:\\Users\\StevenG\\Documents\\Git Repos\\React.NET\\src\\React.Core\\TinyIoC\\TinyIoC.cs:line 1944\n6>C:\\Users\\StevenG\\Documents\\Git Repos\\React.NET\\src\\React.Sample.Mvc4\\TransformBabel.proj(5,5): error MSB4018: at React.ReactEnvironment.get_Current() in C:\\Users\\StevenG\\Documents\\Git Repos\\React.NET\\src\\React.Core\\ReactEnvironment.cs:line 84\n6>C:\\Users\\StevenG\\Documents\\Git Repos\\React.NET\\src\\React.Sample.Mvc4\\TransformBabel.proj(5,5): error MSB4018: at React.MSBuild.TransformBabel.Execute() in C:\\Users\\StevenG\\Documents\\Git Repos\\React.NET\\src\\React.MSBuild\\TransformBabel.cs:line 55\n6>C:\\Users\\StevenG\\Documents\\Git Repos\\React.NET\\src\\React.Sample.Mvc4\\TransformBabel.proj(5,5): error MSB4018: at Microsoft.Build.BackEnd.TaskExecutionHost.Microsoft.Build.BackEnd.ITaskExecutionHost.Execute()\n6>C:\\Users\\StevenG\\Documents\\Git Repos\\React.NET\\src\\React.Sample.Mvc4\\TransformBabel.proj(5,5): error MSB4018: at Microsoft.Build.BackEnd.TaskBuilder.<ExecuteInstantiatedTask>d__26.MoveNext()\n6>  Done Building Project \"C:\\Users\\StevenG\\Documents\\Git Repos\\React.NET\\src\\React.Sample.Mvc4\\TransformBabel.proj\" (default targets) -- FAILED.\n6>  \n6>  Build FAILED.\n3) Go to React.Sample.Mvc4\\bin\\x64 and move ClearScriptV8-64.dll and v8-x64.dll to React.MSBuild\\bin\\Debug\\net40\n4) Go to React.Sample.Mvc4\\bin\\x86 and move ClearScriptV8-32.dll and v8-ia32.dll to React.MSBuild\\bin\\Debug\\net40\n5) Rebuild React.Sample.Mvc4 and effective we are using v8 instead of Msie to transpile\n6) In order to use this in other project in different solution, I have to copy all dlls in React.MSBuild\\bin\\Debug\\net40 to the bin directory of the other project.\nBasically, I didn't solve the issue with AccessViolationException I just forced it to use v8 instead.. The project is current using 2.0.0 of JavaScriptEngineSwitcher and it's related packages.\nI tried updating the packages, but it doesn't seems to work or build for me without some tweaking.. I tried to update MSIE engine to version 2.0.2 in React.Core and React.Sample.Mvc4\nBefore I update: I will get Unhandled Exception: System.AccessViolationException: Attempted to read or write protected memory. This is often an indication that other memory is corrupt.\nAfter I update: I will get React.TinyIoC.TinyIoCResolutionException: Unable to resolve type: React.ReactEnvironment ---> React.TinyIoC.TinyIoCResolutionException: Unable to resolve type: React.JavaScriptEngineFactory ---> React.Exceptions.ClearScriptV8InitialisationException: Failed to initialise ClearScript V8. This is most likely caused by the native libraries (ClearScriptV8-64.dll and v8-x64.dll) missing from your app's Bin directory, or the Visual C++ runtime not being installed. Please ensure your app is referencing the JavaScriptEngineSwitcher.V8 NuGet package, and refer to the ReactJS.NET site for moredebugging tips.\nThose two exceptions are the same type I've been having above.. ",
    "gdennie": "Prior to receiving your response, I went ahead and launch React.VS2015.sln. It prompted to download a missing dnx runtime version, dnx-clr-win-x86.1.0.0-rc1-final was downloaded. Subsequently the build completed without failures or updates or skips. Thanks for your suggestion, however.\n. Yes. Thanks.\nDon't know if any documentation modification would help.\n. Excellent.\n. ",
    "thebuilder": "Any ETA of when the next version will be released to Nuget with this fix? We just ran into when enabled caching on our site.\nThanks! :smiley: \n. Do you need to call fetch on the server? If not, you should just check if running serverside and return instead of triggering the fetch. \njs\nif (!global.window) return;\nYou could provide initial data in the props, so fetch would not need to be invoked.\n. Running React serverside in .NET is a synchronus action, so codesplitting doesn't work serverside.\nBut you can use code splitting in the clientside code, to only load components that you need. This does require a lot of setup and configuration of your codebase and build system, but it can be done! Currently working on a big project where all components are their own webpack chunk.\nI created a task last year, about how this can be solved: https://github.com/reactjs/React.NET/issues/315\nI ended up creating a custom .NET package, that just uses ReactJS.NET for the engine configuration, since we always use a precompiled server.bundle.js.\nAll my components have a two entry files - an index.js for static, and importer.js for async. \nimporter.js\njs\n/**\n * Small module that allows us to statically import the related module, while only\n * dynamically importing this small module with 'delayed-render.js'.\n */\nexport default () => import('./index')\nUsing require.context i then fetch the entry file based on the ENV.\nmodulesMap.js\n```js\nlet modulesMap = null\nfunction getModules() {\n  if (!modulesMap) {\n    modulesMap = {}\n    if (process.env.SERVER) {\n      const modules = require.context('./', true, /index.js$/g)\n  modules.keys().forEach(name => {\n    const moduleName = name.replace(/\\.\\/(\\w+?)\\/index.js$/, '$1')\n    modulesMap[moduleName] = modules(name)\n  })\n} else {\n  const modules = require.context('./', true, /importer\\.js$/g)\n\n  modules.keys().forEach(name => {\n    const moduleName = name.replace(/\\.\\/(\\w+?)\\/importer.js$/, '$1')\n    modulesMap[moduleName] = modules(name)\n  })\n}\n\n}\nreturn modulesMap\n}\nexport default function getModule(name) {\n  if (!name) return null\n  if (process.env.NODE_ENV === 'test') {\n    // eslint-disable-next-line\n    return require(./${name}/importer.js);\n  }\nreturn getModules()[name]\n}\n```\nI then use a delayedRender method clientside, to import all the components created by the server.\ndelayedRender.js\n```js\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport { logException } from '../utils/error-tracking'\nimport getModule from './modules-map'\n/\n * Call with list of server side rendered components when the app is ready.\n * Each component should contain the follow values: \"name\", \"props\" and \"id\".\n \n * @param components {Array} List of components to render.\n /\nexport default function delayedRender(components) {\n  return components.map(({ name, props, id }) => {\n    const mod = getModule(name)\n    if (mod) {\n      / Async import the required components when they are needed /\n      return mod\n        .default()\n        .then(module => render(module.default, props, id))\n        .catch(err => logException(err, { name, props, id, components }))\n    }\nreturn Promise.reject()\n\n})\n}\nexport function render(component, props, id) {\n  const el = document.getElementById(id)\nif (component && el) {\n    ReactDOM.render(React.createElement(component, props), el)\n  } else if (!el) {\n    throw new Error([delayedRender] Could not find element with id: '${id}')\n  } else {\n    throw new Error([delayedRender] Component not found for element with id: '${id}')\n  }\n}\n```\nI might do a writeup of our setup at some point, but it has a lot of moving parts and is not something that can just be added to public repo.. ",
    "Solyad": "Ah thats great, I didnt realise. Ill give that a go\nThanks! \n. ",
    "defcon84": "Hmm that's weird.\nI've attached my tutorial project: ReactTest.zip\nI might have a setting wrong somewhere.\nIf i change row 89 of Comment.jsx, to eg \"DELETE xx\", i still get the \"DELETE yy\" from time to time if i keep refreshing that page.\nThe browser console shows this:\nHTML1300: Navigation occurred.\nlocalhost:29051\nWarning: React attempted to reuse markup in a container but the checksum was invalid. This generally means that you are using server rendering and the markup generated on the server was not what the client was expecting. React injected new markup to compensate which works but you have lost many of the benefits of server rendering. Instead, figure out why the markup being generated is different on the client or server:\n (client) f8cd71caf.2\">DELETE xx</span></div><div \n (server) f8cd71caf.2\">DELETE yy</span></div><div\n. @Daniel15 where you able to recreate this with my project?\n. No, the server seems to not update its cache.\nAs the error says:\n\nWarning: React attempted to reuse markup in a container but the checksum was invalid. This generally means that you are using server rendering and the markup generated on the server was not what the client was expecting. React injected new markup to compensate which works but you have lost many of the benefits of server rendering. Instead, figure out why the markup being generated is different on the client or server.\n\nWhen i have the time, i'll do some more testing.\n. Is there any information / progress on this? We are rendering everything in clientOnly modus because of this exception.\n. I tried that and got the following:\n\nDirectoryNotFoundException: Failed to load the ClearScriptV8 assembly, because the directory 'C:****\\src\\EBv2.UI\\bin\\Release\\net461\\win7-x64\\ClearScript.V8' does not exist.\n. @Daniel15 could you test this: turn of anti-virus and run again\n( https://github.com/Microsoft/Chakra-Samples/issues/4 )\n. I think you mean 1.7.2? This version did not fix the issue for me.\n. Thanks! When will this be published to Nuget? :). Livin' on the edge!. \n",
    "lilliank": "Ah, disregard!  A colleague points out that this is fixed by setting the keys of the forms to the form name instead of their index.  Fair enough.  I had been thinking of keys as just \"thing that needs to be unique\" rather than \"thing that needs to be unique and needs to not change between renders\".\nCheers\n. In my defense, it is weird and confusing that I can add eg this to the option text:   {option===formName?'should be checked':''}   And it shows what I expect, though the actual defaultChecked is not updated.\n. ",
    "abezydar": "No problem Daniel, I'll make the requested changes!\n. I had to include this line in order to get the build to work properly. I can remove it if it's unnecessary.\n. Hrm, I removed it this morning and rebuilt with no errors. Earlier, I was getting an error saying it was required and the build wouldn't continue. I'll commit the change. \n. ",
    "tanorion": "You can get it working on azure if the package is in the application when you first release it to azure. This error occurs when you add it afterwards. As far as I can tell the reason is that dynamically registering the module will only happen on IIS start. When you deploy new code to an azure app the IIS will not restart and thus the module will not be registered. Modules in the web.config will be registered on application start which will happen when you release new code.\nI haven\u2019t found any way to trigger an IIS reset on the web app (restart or start/stop from the azure interface will not work). The only way I got this to work with dynamically registration was to remove the web app and create a new one.\n. Not that I know of. I do continues integration from git and have also tried a publish profile from VS. Also when I recreated this locally restarting the app pool didn't help. I needed to restart the entire IIS. \n. @attiqeurrehman I added mine to the initialization of the CMS used in the web app but I think that you should be able to add it to Global.asax Application_Start() method. Let me know it this works for you or not.\n. @attiqeurrehman What kind of error? I should mention that I had to create my own AsPerRequestSingleton class to get this to work. Here is the code.\nC#\npublic static TinyIoCContainer.RegisterOptions AsPerRequestSingleton(TinyIoCContainer.RegisterOptions registerOptions)\n        {\n            return TinyIoCContainer.RegisterOptions.ToCustomLifetimeManager(\n                registerOptions,\n                new HttpContextLifetimeProvider(),\n                \"per request singleton\"\n            );\n        }\n. @attiqeurrehman Do you have a stacktrace of the actual error? \n. @attiqeurrehman I cant see anything related from that post. Your first image tells me there is a internal server error and that the module is React.Web.WebInitializer but it doesn't really say whats wrong. In my case there was a explicit error message saying that React was not initialized and that there was no IOC container registered. You should be able to get a more detailed error message otherwise it is hard to help. Aslo from the url of the error message it looks like this error occurs on your local machine which has never been a problem in this Issue. If this is your local machine it should be solved by removing all extra code and doing a IIS reset. If the error still persists it is probably not related to this and should perhaps be put in its own post.\n. ",
    "attiqeurrehman": "@tanorion I am facing the same issue, can you please share where to put \nInitializer.Initialize(AsPerRequestSingleton);\nReactConfig.Configure();\n. @tanorion giving error on AsPerRequestSingleton parameter. \n. Still same error:\nMODULE_SET_RESPONSE_ERROR_STATUS \n. This is the link for detail\nhttp://stackoverflow.com/questions/39201987/signalr-with-azure-causes-bad-gateway-error-502\nOn Mon, Aug 29, 2016 at 5:13 PM, Niklas Wanngren notifications@github.com\nwrote:\n\n@attiqeurrehman https://github.com/attiqeurrehman Do you have a\nstacktrace of the actual error?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/reactjs/React.NET/issues/240#issuecomment-243106941,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ABUY167D8P25TltyW-2U9uOxfCXEar1Gks5qkszWgaJpZM4HrgjP\n.\n\n\nAttiqe Ur Rehman\n. ",
    "motoko89": "@tanorion Hello, I tried your solution and it doesn't work because of this:\nHttpException (0x80004005): Could not load type 'React.Web.WebInitializer.IocPerRequestDisposal'.\nI checked and WebInitializer is not accessible because it's internal:\nhttps://github.com/reactjs/React.NET/blob/52eddcc799dd82157fbcf47064e7b0cafd89bb9b/src/React.Web/WebInitializer.cs \nI also couldn't use  but  instead.\nAlso the code appears to already do what you did. Yet whenever I deploy my ASP.NET MVC5 to Azure Web service. I will most likely hit http 500/502/503 and need to manually restart the webapp many times (maybe that has nothing because it doesn't restart IIS but after a while the website works again.\nSo what should I do now to work around this issue?. ",
    "damiangreen": "@Daniel15 Is there another step required to publish this to http://reactjs.net/?\n. cheers for that :)\n. ",
    "StasPerekrestov": "Related issue https://phabricator.babeljs.io/T7198\n. @Daniel15 \nI suppose that the issue isn't in babel itself, but in the uglification process.\nHere is a solution of the current issue (I use it as a temporary workaround):\n.pipe(uglify({mangle: { keep_fnames: true} }))\n. Daniel, thanks a lot for the update.\n. ",
    "alesdvorakcz": "I have seen yours boilerplate but I have to use MVC5/ASP.NET 4.x so I can't use this solution.\n. ",
    "brunomasantos": "I have the same problem, the Javascriptviewengine only supports MVC 6. Is there any development in this area?\n. ",
    "eadbhard": "Sure. Thanks a lot for your help.\nBest regards,\n-Eduardo\n2016-04-12 22:52 GMT-05:00 Daniel Lo Nigro notifications@github.com:\n\nClosed #245 https://github.com/reactjs/React.NET/issues/245.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly or view it on GitHub\nhttps://github.com/reactjs/React.NET/issues/245#event-625150490\n. \n",
    "joekrie": "I have had a similar problem, and I am not using FixedDataTable. I am using ReactDnD, however, and it appears that setTimeout and setInterval are undefined in both MSIE engine and ClearScript V8: http://clearscript5.rssing.com/chan-14849447/all_p26.html#item513 \nAfter adding no-op implementations to global, I no longer received the errors:\nglobal.setTimeout = () => {};\nglobal.setInterval = () => {};\n. @joff1979 I ran into 2 of the same issues you did. One being setTimeout, the other being that V8 didn't load after adding SetAllowMsieEngine(false). For the latter, I was able to work around it using the instructions here: http://www.samulihaverinen.com/web-development/dotnet/2016/01/19/how-to-run-clearscript-v8-javascript-engine-in-azure/\n. To get V8 working locally I had to follow the instructions under \"Running V8 locally\", even with the latest version of React.AspNet, ClearScript, and JavaScriptEngineSwitcher.V8 installed. Maybe I'll try deleting all the packages from my machine, then reinstalling them.\n. ",
    "wub": "I got around this by doing:\nOld:\nwindow.setTimeout()\nNew:\ntypeof window !== \"undefined\" && window.setTimeout()\n. Does it work if you do @Html.React(\"CcCard\", Model) instead?\n. Hey @Daniel15, I managed to just reuse some code from inside ReactInitJavaScript and made my own helper. I'll  post it here tomorrow when I'm back at work.\nI needed to add \"nonce\" (we're slowly moving to CSP).\nCheers!\n. You are not wrong :0)\n\nOn 11/10/2016, at 7:20 PM, Daniel Lo Nigro notifications@github.com wrote:\nI could be wrong, but I don't think \"async\" would make a difference since it's an inline script.\n\u2014\nYou are receiving this because you modified the open/close state.\nReply to this email directly, view it on GitHub, or mute the thread.\n. https://github.com/reactjs/React.NET/pull/454 \ud83e\udd19 . To pass server-side variables into the server-side rendered component (in MVC for example), you can use the second parameter in the helper:\n\n@Html.React(\"ComponentName\", new { foo = ServerSide.Thing() })\nIt will get passed to your component as a prop, this.props.foo.\nIf you want to share some config between all of your components, just add it to the window, before your component gets executed:\n<script>window.REACT_CONFIG = { environment: \"production\" };</script>\nAnd use it in your component:\nwindow.REACT_CONFIG.environment\nMake sure, before you use window, you check that it's defined, because window doesn't exist on the server. If you need to use variables in a server-side rendered component, pass it through like the foo example up top.\nif (typeof window !== \"undefined\") { /* use it here */ }. FWIW, we use React.NET at StarNow, on every page, for millions of members.. Thanks @dustinsoftware and @Daniel15 - it works!. https://github.com/reactjs/React.NET/pull/445 \ud83c\udf7e \nThanks @dustinsoftware and @Daniel15.. That's in .NET Core I believe.. ",
    "sgraffite": "We're using JavaScriptEngineSwitcher version 1.5.0.  It looks like your projects are referencing version 1.2.4 but something is trying to call the EmbedHostObject method which was added in version 1.5.0 of JavaScriptEngineSwitcher.\nIt's possible updating React.NET and JSPool to reference the 1.50 version of JavaScriptEngineSwitcher will fix it.  I was having trouble getting the initial build to run from the batch file so I was unable to test that.\n. Awesome, I really appreciate you looking into this.\n. Initial testing looks good, I am no longer getting the error message.  I'll let you know if anything comes up :)\n. ",
    "rnjailamba": "Thanks for this , it solved my issue.\n. ",
    "Daxito": "This is still an issue for me, using React.Net 3.1.0 like this, am I missing something? Thanks\nPublic Sub ConfigureAuth(app As IAppBuilder)\n        Dim contentFileSystem = New PhysicalFileSystem(HttpContext.Current.Server.MapPath(\"Content\"))\n        app.UseBabel(New BabelFileOptions() With\n        {\n            .StaticFileOptions = New StaticFileOptions() With\n            {\n                .FileSystem = contentFileSystem\n            }\n        })\n        app.UseFileServer(New FileServerOptions() With {.FileSystem = contentFileSystem}). Never mind, I wasn't understanding how babel.Transform() works. Found the answer at:\nhttps://github.com/reactjs/React.NET/issues/253\nBut does not work, JSPool watching entire user directory is still an issue. ",
    "kromakollision": "I was looking for fetch or XMLHttpRequest in the server-side Javascript as well. I read about ChakraBridge here, which implements XMLHttpRequest like a browser would. Is there any chance that ReactJS.NET could use this ChakraBridge or use a similiar approach?. ",
    "blandau": "I'm having a similar issue when I follow only the steps presented here http://reactjs.net/guides/weboptimizer.html. Please know that a Google search brought me directly to this page. I'm curious if the steps presented on this page are standalone or are apart of an overall step-by-step process. Either way, here is the testing I did and the results:\n```\n    public class BundleConfig\n    {\n        public static void RegisterBundles(BundleCollection bundles)\n        {\n            bundles.Add(new Bundle(\"~/bundles/main\", new BabelTransform(), new JsMinify())\n                .IncludeDirectory(\"~/js/exports\", \".js\")\n                .IncludeDirectory(\"~/js\", \".js\"));\n        BundleTable.EnableOptimizations = true;\n    }\n}\n\n```\nIf I do not include JsMinify(), I get the following bundle:\n```\nexport function addition(a, b) {\n    return a + b;\n}\nimport { addition as adder } from 'exports/myMath';\nconsole.log(\"2 + 3\", adder(2, 3));\n```\nWhen I include JsMinify():\n```\n/ Minification failed. Returning unminified contents.\n(1,1-7): run-time error JS1195: Expected expression: export\n(1,32-33): run-time error JS1004: Expected ';': {\n(4,1-7): run-time error JS1195: Expected expression: import\n(4,19-21): run-time error JS1004: Expected ';': as\n(2,5-17): run-time error JS1018: 'return' statement outside of function: return a + b\n /\nexport function addition(a, b) {\n    return a + b;\n};\nimport { addition as adder } from 'exports/myMath';\nconsole.log(\"2 + 3\", adder(2, 3));;\n```\nAs I said at the top, I only followed the instructions on that web page only. I also tried using BabelBundle but got the same minifcation error output above.\nThe included directories for the bundle above only include single JS files each: myMath.js - which is the single export function - and main.js - which is the import and console log.\nIf you have any questions or need anything else, then please let me know.\n. ",
    "siulca": "\n@blandau - ReactJS.NET does not support JavaScript modules at this point in time. If you want to use modules, you'd need to use a bundler like Webpack or Browserify. If you want to just use ReactJS.NET, you can't use ES6 modules.\n\n@Daniel15 Is this still the case today? \nI am seeing the following error in the output file, while attempting to do a simple Import:\n/* Minification failed. Returning unminified contents.\n(9,1-7): run-time error JS1195: Expected expression: import\n */. Thanks for the swift reply, setting debug=false in Web.config worked! Maybe you should update the tutorial with this info.\nOut of curiosity where are the bundled files located? Can't find the /bundles/ folder.. I see. Should webpack be used in conjunction with BableBundle() in BundleConfig.cs? Or should I scrap BundleConfig.cs and use only webpack?. ",
    "simbs": "@Daniel15 same error here. I made a new solution following the MVC5 tutorial, and the error didn't come up. I fixed it in the old one by upgrading to ReactJS.NET v3.0 . There doesn't seem to a way of accessing LoaderExceptions property from our code, it's some pre-application start stuff handled somewhere in the react dll, probably here: React.Web.WebInitializer.Initialize()\n. ",
    "snokleby": "I forgot to include the .cshtml part:\n@Html.React(\"OurReactComponents.LoanJumboTron\", new\n    { //...}\n. Thanks for helping me figure this out. This should be solved by #267 . \n. ",
    "stevieboy84": "Sorry I think I was being stupid and trying to install it on a MVC 5 app instead of MVC 6.  Ignore me!\n. ",
    "Strandedpirate": "Tried the dev-build.bat previously but it bombed out. \nI had to change build.proj to separate these two projects like so:\n<Exec\n        WorkingDirectory=\"$(MSBuildProjectDirectory)\"\n        Command=\"dnu restore --quiet --parallel src\\React.AspNet\"\n    />\n    <Exec\n        WorkingDirectory=\"$(MSBuildProjectDirectory)\"\n        Command=\"dnu restore --quiet --parallel src\\React.Sample.Mvc6\"\n    />\nError:\n```\nD:\\Users\\swifty\\Documents\\GitHub\\React.NET>dev-build.bat\nMicrosoft (R) Build Engine version 14.0.25123.0\nCopyright (C) Microsoft Corporation. All rights reserved.\nBuild started 5/2/2016 1:59:34 AM.\nProject \"D:\\Users\\swifty\\Documents\\GitHub\\React.NET\\build.proj\" on node 1 (default targets).\nRestorePackages:\n  tools\\NuGet\\nuget.exe restore src\\React.sln\n  All packages listed in packages.config are already installed.\n  All packages listed in packages.config are already installed.\n  dnu restore --quiet --parallel src\\React.AspNet src\\React.Sample.Mvc6\n  Specify --help for a list of available options and commands.\n  System.Exception: TODO: Error: unrecognized argument 'src\\React.Sample.Mvc6'\n     at Microsoft.Framework.Runtime.Common.CommandLine.CommandLineApplication.HandleUnexpectedArg(CommandLineApplication command, String[] args, Int3\n  2 index, String argTypeName)\n     at Microsoft.Framework.Runtime.Common.CommandLine.CommandLineApplication.Execute(String[] args)\n     at Microsoft.Framework.PackageManager.Program.Main(String[] args)\nD:\\Users\\swifty\\Documents\\GitHub\\React.NET\\build.proj(46,3): error MSB3073: The command \"dnu restore --quiet --parallel src\\React.AspNet src\\R\neact.Sample.Mvc6\" exited with code 1.\nDone Building Project \"D:\\Users\\swifty\\Documents\\GitHub\\React.NET\\build.proj\" (default targets) -- FAILED.\nBuild FAILED.\n\"D:\\Users\\swifty\\Documents\\GitHub\\React.NET\\build.proj\" (default target) (1) ->\n(RestorePackages target) ->\n  D:\\Users\\swifty\\Documents\\GitHub\\React.NET\\build.proj(46,3): error MSB3073: The command \"dnu restore --quiet --parallel src\\React.AspNet src\n\\React.Sample.Mvc6\" exited with code 1.\n0 Warning(s)\n1 Error(s)\n\nTime Elapsed 00:00:00.41\nPress any key to continue . . .\n```\nI continued to receive more errors related to NPM after fixing the above. So setting this aside for now.\n. ",
    "ar27111994": "@pauldotknopf  can I run it on rc1?\n. ",
    "davidinbcn": "works fine in a blank project...\nPM> Install-Package NUnit.Runners -Version 2.6.3\n  GET https://api.nuget.org/v3-flatcontainer/nunit.runners/2.6.3/nunit.runners.2.6.3.nupkg\n  OK https://api.nuget.org/v3-flatcontainer/nunit.runners/2.6.3/nunit.runners.2.6.3.nupkg 507ms\nInstalling NUnit.Runners 2.6.3.\nInstalling NuGet package NUnit.Runners.2.6.3.\nSuccessfully installed 'NUnit.Runners 2.6.3' to Test.Mvc6\nPM> Install-Package Antlr -Version 3.5.0.2\nInstalling NuGet package Antlr.3.5.0.2.\nSuccessfully installed 'Antlr 3.5.0.2' to Test.Mvc6\nI don't have any custom NuGet sources. It's a fresh install of Windows 10 and VS 2015\n. ",
    "avens19": ":). Any way I could get a nuget release for this?\n. Thanks!\n. ",
    "ShikiGami": "It is \"net451\", but with that alone isn't enough to make it work on RC2, since there are a lot of structural changes. \nI actually made a fork and was able to make it compile and I was able to make React.Sample.Mvc6 run on IIS Express, but for some reason Razor doesn't seem to find React.Core assemblies from React.AspNet, the out url became a mess, and it doesn't seem to be creating the nuget package for React.AspNet.\nTake a loot at https://github.com/ShikiGami/React.NET\nAlso another thing, is it really necessary to make React.AspNet a .xproj?, since it isn't using any of the .NETCore libraries and it is only targeting .Net Framework, then I think it maybe would be better to have it as a .csproj\n. Just an update, I was able to make React.Sample.Mvc6 run, but it is giving me an unhandled exception first on var resultJson = engine.CallFunction<string>(function, args); from JavaScriptEngineUtils.cs\nAfter that it seems to run fine.\nSince now on RC2 xproj doesn't seem to be creating a nupkg file from a full .NET Framework class library, I transformed into a csproj and tried to make the nupkg the same way the other projects do it, but it seems that there is a bug in the current version of NuGet that gives you an error when you use RC2 Core libraries inside a full .Net Framework project, so still no package.\nFor more info on this bug take a look at https://github.com/NuGet/Home/issues/2754\n. The exception I'm getting is \n```\nAn unhandled exception of type 'System.AccessViolationException' occurred in MsieJavaScriptEngine.dll\nAdditional information: Attempted to read or write protected memory. This is often an indication that other memory is corrupt.\n```\nRight now there doesn't seem to be any way to get xproj to create a NuGet package by itself, but I found out there is a new command called dotnet pack to create packages out of project.json, so I restored React.AspNet as a xproj, and was able to create the packages by adding a postcompile script at project.json, so it is now working, the only problem is the exception which I have no idea what this all about.\n. I've been trying all day to make ReactJs work in RC2, but there is a big problem with dependencies not being found. I got it to compile, but then it doesn't find the namespaces at runtime.\n. The JSPool Error happens, because now in RC2 it is trying to resolve an already resolved dependency in React.AspNet.\nTo make it work, simply delete the JSPool dependency line from .\\src\\wrap\\React.Core\\project.json\n. Just committed the fixes you asked for.\nI also realized that dotnet pack was creating empty packages because apparently it cannot read the .xproj and therefore it doesn't know where is the proper outpath for the project's binaries and objects, so I also fixed the script and confirmed it was creating the proper packages.\n. > Some packages are not compatible with .NETFramework,Version=v4.5.1.\nIt isn't telling you which packages aren't compatible?\n. @wassim-azirar \nIt isn't compatible with .NETCoreApp, you need to use the full .NET Framework for it.\nIn frameworks replace netcoreapp1.0 with net451\n. I just sent a pull request ( https://github.com/reactjs/React.NET/pull/287 ) for this\n. I got it to run without any modification to the React.Net source. The problem is the way now things are initialized in Startup.cs in ASP.NET Core 2.0\nThe problem is that now services are not available at some points in the Startup process. To ensure that 'React.AspNet.HttpContextLifetimeProvider+PerRequestRegistrations' is available the easiest way is to change the type of ConfigureServices(IServiceCollection services) from void to IServiceProvider and add the following line at the end of ConfigureServices(IServiceCollection services) :\nreturn services.BuildServiceProvider();\nEither way I'm going to make a pull request where I update the whole React.NET to ASP.NET Core 2.0. One of the biggest advantages is that now with .NET Standard 2.0 is no longer necessary to make so many divisions between .NET Framework and .NET Core libraries.\nThe only inconvenience is that support would go from .NET Framework 4.5.1 to 4.6.1.. As far as I know it no longer works that way in RC2. There is no equivalent to dnvm in the new toolset. If you have .NET Core RC2 installed already, you can just get the ASP.NET Core packages using NuGet.\nThat was one of the biggest changes from RC1 to RC2, and it was done in order to make all .NET Core environments consistent with each other.\n. This is in order to just replace the first instance of version numbering in the .json files. This is done because now in RC2 there are a couple more places where you need to use version number, like when declaring CLI tools.\n. The assemblies are RC2, but the SDK + tooling are preview 1. By the time it hits 1.0 the SDK + tooling will be preview 2, and version 1.0 of SDK + tooling is going to be released latter.\nThis is because DNX was completely deprecated, and the new CLI took over, but since it is completely new, it still isn't as stable to be called a Release Candidate.\n. It really isn't necessary now. What could be done to make a project reference, is to make the reference inside of project.json, where instead of declaring the version, you target the project.\n. I looked at the files, but I couldn't find any reference to ASPNET5.\n. I was thinking exactly the same thing, I'm going to try it on build.proj\n. I wrote it on the pull request description, but with netstandard2.0 you do not requiere a different target if you use the library in a application targeting .NET Framework 4.6.1, that's the whole point of .NET Standard.. ",
    "JesperTreetop": "I'm getting this too while using a (full) .NET Framework with this declaration in project.json: \"frameworks\": { \"net452\": { \"imports\": [ \"dnx451\" ] } }\n. I'm using RC2. Looking at this and trying to isolate anything strange, I think it may be that JSPool's NuGet package uses the Client profile of .NET 4.0.\n. ",
    "stuartharper01": "Hello. \nIs this fix incorporated into the following NuGet versions please?:\nReact.Web 2.5.0\nReact.Web.Mvc4  2.5.0\nI ask because I still get the following exception when Load Testing:\nJSPool.Exceptions.JsPoolExhaustedException\nCould not acquire JavaScript engine within 00:00:05\nWhen I set the React config that stops JS pooling, the Exhausted exception goes away but the performance is adversely affected:\nReactSiteConfiguration.Configuration.SetReuseJavaScriptEngines(false);\nThanks\n. OK thanks. I can see the #270 fix in the source of React.Core\\ReactEnvironment.cs.\nBut unfortunately, I still get the following exception during Load Tests:\nJSPool.Exceptions.JsPoolExhaustedException\n Could not acquire JavaScript engine within 00:00:05. ",
    "DaniilSokolyuk": "@huan086 Hi! I now reimplement JsPool i make it truly async without thread starvation\nlook\nhttps://github.com/DaniilSokolyuk/ZeroReact.NET/blob/master/src/ZeroReact/JsPool/ZeroJsPool.cs. ReactJS.Net has sync API,make JsPool async without change  ReactJS.Net not make a sense, and in legacy asp you can\u2019t use await in views, it will work only in asp net core\nOfc we can have async and sync api  with .GetAwaiter().GetResult(). +1, parameter serverOnly don't work.\nappend hydrate to ReactInitJavaScript. @dustinsoftware i think disposable component is the smallest problem :)\nI do not think that there are so many changes here, backward compatibility is also completely left, I do not consider it necessary to split pr. @Daniel15 Thanks you, splitted, after this PR I will create another PR. @Daniel15, @dustinsoftware what about this PR? I have already split this request and prepared the\nsecond part\nWe are already using these changes and significantly reduced the hits in LOH and FullGC. @dustinsoftware i am already split this PR, there are only 227 new lines here, and about 60% this lines is replace string.format to TextWriter.Write. @dustinsoftware, yes you right, but previous ID generating is ugly, we are allocate GUID, after allocate byte array and 1-3 string...  my implementation used 1 string,\nremoved Json.NET bump. @dustinsoftware , we can announce this change or publish major version. This is extension part of this PR and will not give extra perf, but this part is needed to simplify the code and prepare this part for TextWriter for reduce a lot of allocations and LOH hitting. Completed.\nIReactIdGenerator injected to Environment and passed to Component.\nGeneratesContainerIdIfNotProvided test deleted because UsesProvidedContainerId is very similar to him\n. @dustinsoftware Thank you! \ud83d\udc4d . Nice! You can make different benchmarks for large and small components and different methods, the biggest alocations in ReactInitJavaScript\nLook https://github.com/DaniilSokolyuk/React.NET/blob/124a73768a0dc08529d6ce0629a35d0a355c46ac/src/React.Benchmark/Program.cs. I think because https://github.com/reactjs/React.NET/blob/fe72ea9ca18793fea75282f0514e969384853d5e/src/React.Sample.CoreMvc/Startup.cs#L37 returns IServiceProvider, but! in default template it returns void.\nYou can disable DI Scope validation and fix this problem, in program.cs \npublic static IWebHostBuilder CreateWebHostBuilder(string[] args) =>\n            WebHost.CreateDefaultBuilder(args)\n                .UseDefaultServiceProvider(options => options.ValidateScopes = false) // << add this line\n                .UseStartup<Startup>();. @Saturate\nYou can implement your own IHtmlHelper extension like this\n```\npublic static IHtmlString ReactInitJavaScript(this IHtmlHelper htmlHelper, bool clientOnly = false, bool withDelayedLambda = false)\n        {\n            return new ActionHtmlString(writer =>\n            {\n                try\n                {\n                    WriteScriptTag(writer, bodyWriter => Environment.GetInitJavaScript(bodyWriter, clientOnly), withDelayedLambda);\n                }\n                finally\n                {\n                    Environment.ReturnEngineToPool(); \n                }\n            });\n        }\n    private static void WriteScriptTag(TextWriter writer, Action<TextWriter> bodyWriter, bool withDelayedLambda = false)\n    {\n        writer.Write(\"<script\");\n        if (Environment.Configuration.ScriptNonceProvider != null)\n        {\n            writer.Write(\" nonce=\\\"\");\n            writer.Write(Environment.Configuration.ScriptNonceProvider());\n            writer.Write(\"\\\"\");\n        }\n\n        writer.Write(\">\");\n\n        if (withDelayedLambda)\n        {\n            writer.Write(\"window.ReactJsAsyncInit = function() {\");\n        }\n\n        bodyWriter(writer);\n\n        if (withDelayedLambda)\n        {\n            writer.Write(\"};\");\n        }\n\n        writer.Write(\"</script>\");\n    }\n\n```\nCall in your layout\n@Html.ReactInitJavaScript(clientOnly: false, withDelayedLambda: true)\nAnd call window.ReactJsAsyncInit() in your client bundle entry point. add target 451 or 461 too. _sharedStringWriter is marked as ThreadStatic and this is unique for each thread. (corefx use similar strategy, https://github.com/dotnet/corefx/blob/master/src/Common/src/System/IO/StringBuilderCache.cs) , I am reuse evertything for reduce allocations.. No, split PR fail, bumping JSON.NET need in part 2 for use ArrayPool, fixed. we can return virtual but it does not make sense and can cause errors\nbecause all methods and extensions uses overload with textwriter. fixed. yea, original tag builder has a similar code https://github.com/aspnet/Mvc/blob/feed0fea2c5280264ac000947b3fee542d7d9e6a/src/Microsoft.AspNetCore.Mvc.ViewFeatures/Rendering/TagBuilder.cs#L336 . 1. This variable is not unnecessary, because access to ThreadStatic variable is slow http://tips.x-tensive.com/2008/10/cost-of-threadstatic-attribute.html\n2. StringBuilder is not implement TextWriter, we cant use StringBuilder. In part 2 i will remove all the StringWriter, StringBuilders and threadStatic and replace them with my own buffer based on ArrayPool, https://github.com/DaniilSokolyuk/React.NET/blob/c271afeb369875194a31c18bbbe6b76fac947d51/src/React.Core/ReactComponent.cs#L150. Nice idea, i can inject it to ReactEnvironment and create property IReactIdGenerator (like IBabel) and call it from constructor in ReactComponent like \"environment.ReactIdGenerator.Generate(...)\". ok!, const will be inlined without overhead \ud83d\udc4d . ",
    "wassim-azirar": "@Daniel15 Does it work on your computer ?\nWhen will this PR be merged ?\n. I followed the instructions but I'm still having the same error :(\n\n. ",
    "Kantuz001": "The Problem is in DataContract attribute of Model class.\nIf class has DataContract then Model will be empty on client side.\nAny ideas?\n. ",
    "drobertson123": "Note - by adding \"net451\" to the framework imports I was able to make it work.\n\"frameworks\": {\n    \"netcoreapp1.0\": {\n      \"imports\": [\n        \"net451\",\n        \"dotnet5.6\",\n        \"dnxcore50\",\n        \"portable-net45+win8\"\n      ]\n    }\n  }, \nBTW, we were writing these at the same time. Thanks for the amazingly quick response.\nNote - I think we may have just made a record for the fastest opened/closed issue on github.  :-)\n. ",
    "tmct": "This has also been a problem for us: C# DateTimes serialise to js strings instead of Dates.\nFor now we're working around this by passing the ToString() of the DateTime, but it would be nice for React.NET to support these types!\n. ",
    "slmille4": "nevermind, found a good library: https://www.npmjs.com/package/html-to-react\nMight be some good functionality to include in the base React library?\n. ",
    "marvinvperez": "I think it's still not supporting ASP.NET Core 1. It supports though ASP.NET Core (.Net Framework) RC 2.\n. ",
    "vikranthc": "I too can reproduce this.\n. I get the following exception in the browser\n```\nAn unhandled exception occurred while processing the request.\nDirectoryNotFoundException: Failed to load the ClearScriptV8 assembly, because the directory 'C:\\Users\\vceakala\\Documents\\Visual Studio 2015\\Projects\\ReactApp\\src\\ReactApp\\bin\\Debug\\net451\\win7-x64\\ClearScript.V8' does not exist.\nConstructType\nJsEngineLoadException: During loading of V8 JavaScript engine error has occurred. \nSee more details:\nFailed to load the ClearScriptV8 assembly, because the directory 'C:\\Users\\vceakala\\Documents\\Visual Studio 2015\\Projects\\ReactApp\\src\\ReactApp\\bin\\Debug\\net451\\win7-x64\\ClearScript.V8' does not exist.\nConstructType\nTargetInvocationException: Exception has been thrown by the target of an invocation.\nConstructType\nClearScriptV8InitialisationException: Failed to initialise ClearScript V8. This is most likely caused by the native libraries (ClearScriptV8-64.dll and v8-x64.dll) missing from your app's Bin directory, or the Visual C++ runtime not being installed. Please ensure your app is referencing the JavaScriptEngineSwitcher.V8 NuGet package, and refer to the ReactJS.NET site for moredebugging tips.\nMore details: Exception has been thrown by the target of an invocation.\nConstructType\nTinyIoCResolutionException: Unable to resolve type: React.JavaScriptEngineFactory\nConstructType\nTinyIoCResolutionException: Unable to resolve type: React.ReactEnvironment\nConstructType\n```\n. ",
    "manalgoyal": "I am still facing the same error, Using React.AspNet v 4.0.0. ",
    "daiduongbian44": "Using webpack, you can import the component to others over props. Besides that, you can import third-parties :D\n. @doterme yep, let's download webpack and npm, each components that you should put on one file (maybe .js or .jsx). In a component, we could use require function of nodejs to import third-parties. Ex: \nvar React = require('react');\nvar Slider = require('react-slick');\nvar SimpleSlider = React.createClass({\n  render: function () {\n    var settings = {\n      dots: true,\n      infinite: true,\n      speed: 500,\n      slidesToShow: 1,\n      slidesToScroll: 1\n    };\n    return (\n      <Slider {...settings}>\n      </Slider>\n    );\n  }\n});\nthen using webpack to bundle your components to one file. This file will be import to ReactConfig\nP/s: Example copy from here: https://github.com/akiran/react-slick\n. @dustinsoftware you know, we're doing like your suggested way, but honestly, we want to improve speed of our site, we tested between the large bundled file for all pages and each bundled file for each page, we released the second way which it's speed is faster than the first way (using the large bundled file). So we want to break the large bundled file into set of bundled files and each pages when call a React component, we can pass the KEY that show you which bundled file the component belong to. We think that way will give our better Page Loading Time. :D thank you.\n. ",
    "doterme": "@daiduongbian44 how can import third-parties in reactjs.net?can you give a example?\n. ",
    "wmaca": "@daiduongbian44 What I mean is to pass an IReactComponent as a property. The IReactComponent will be created in C#, not in JS.. @lucamazzanti I know that we can work around it by putting all dependencies in a separate folder. The actual problem is that, by default, using different version of NewtonSoft is enough to break your build.\n. ",
    "gaelian": "I'm running into similar problems at the moment.\nI'm trying to go through the ReactJS.NET tutorial at the moment. My environment is VS 2015 Community (14.0.25123.00 Update 2), I'm running on ASP.NET Core RC2 (1.0.0-preview1-002702) and ReactJS.NET 2.4.0. I'm using the full .NET CLR (\"net461\") as I gather ReactJS is not currently compatible with the Core CLR. I've seen this issue and I've also seen this issue.\nWorking my way through the tutorial, there are some obvious differences that can be easily worked around (e.g. change @Url.Content(\"~/Scripts/Tutorial.jsx\") to point to the actual path of my JSX file within the new wwwroot of my ASP.NET Core site) but there's some less obvious weird stuff going on too. I intermittently get the same error mentioned by @beruic:\n\nSystem.AccessViolationException was unhandled\nMessage: An unhandled exception of type 'System.AccessViolationException' occurred in MsieJavaScriptEngine.dll\nAdditional information: Attempted to read or write protected memory. This is often an indication that other memory is corrupt.\n\nYesterday, it seemed like it had something to do with which web server setup I use to debug my project. I was consistently getting the System.AccessViolationException when running my project through IIS Express (which I gather reverse proxies over to Kestrel thought I'm not 100% convinced this documentation is up to date), but not when running via Kestrel directly. Then the problem seemed to flip and was only happening when I ran the project through kestrel directly and worked fine when I used IIS Express. Now I can't seem to reproduce it consistently at all unless I move onto the \"Optimization: Server-side rendering\" section of the ReactJS.NET tutorial. After implementing the steps in this section (noting that App_Start\\ReactConfig.cs is assumedly replaced by the relevant section within Startup.cs), I am consistently getting the same System.AccessViolationException. Like @beruic I'm not entirely sure how to get V8 working with ReactJS.NET.\nI also note that the way bundling and minification is done in ASP.NET Core has substantially changed from the older ASP.NET method outlined in the ReactJS.NET tutorial, I'm not super familiar with Gulp and what's needed for Gulp to play nicely with JSX (I gather I'll need to hook Babel into the mix somehow), so I haven't been able to get it working as yet. But I do wonder, what will the role of ReactJS.NET be in relation to bundling/minification in the new ASP.NET Core world? Will it have any role?\nI know ASP.NET Core is moving quite quickly at the moment, I'm starting to think it might be better to slowly back away from using ReactJS.NET with ASP.NET Core until things stabilise a little and the various documentation can catch up.\n. ",
    "brentarias": "I have the same setup as @gaelian (same IDE version, same NuGet package versions, same ASP.NET Core RC2 on full-clr, etc.).  I am having the same issue, though I am running on Kestrel.\nMy startup.cs has this:\napp.UseReact((options) =>\n        {\n            options.AddScriptWithoutTransform(\"~/bundle.js\");\n        });\nI can make the error disappear if I comment the AddScriptWithoutTransform invocation, then clean and rebuild the application.  At that point my JSX transform that produces \"Hello World! I am a CommentBox\" - per the React.Net tutorial - works fine.\nEvery time I put the AddScriptWithouTransform back in, the MsieJavaScriptEngine.dll access violation error comes back.\n. When I change my project.json as suggested, then all my other RC2 dependencies become illegal; I get this error message:\n\ndependency does not support framework .NETFramework, Version=v4.5.\n\nEvidently, ReactJS.Net (which targets netstandard 1.0) simply cannot be incorporated into an ASP.NET Core RC2 solution at all.\nFrom what I understand, if React.AspNet were rebuilt to target netstandard 1.1 then it can be used in .net 4.5 and in .net core both.  Are there any timelines or existing feature requests for achieving that?\n. Then the real issue is, why does the main ReactJS.Net site declare that ReactJS.Net is now ready for RC2?.  The official site says it has been available for RC2 since May 24th.\nGiven that Clearscript is not yet ready for RC2 (and thus affecting ReactJS.Net), does it make sense to leverage edge.js instead?  Edge.js will be available for RC2 by June 22nd.\n. ???\nI'm trying to use ReactJS.NET with ASP.NET Core right now...and I'm using the configuration suggested by shahid-pk...and it isn't working.  That's why this whole thread is here in the first place.\nFurthermore, as of RC2...both .NET Core and ASP.NET Core have been merged into one runtime.  If ReactJS.Net is working with ASP.NET Core RC2, then ipso facto, it is already working with .NET Core.  Said again: as of RC2, it is no longer possible to make an assembly for ASP.NET Core that is incompatible with .NET Core.  But even if you think that statement is incorrect...\nTo circle back...in my code ReactJS.Net isn't working with ASP.NET Core; numerous errors about incompatible dependencies.\n. First, thank you for your patience.  Second, Man this is confusing as hell.  I admit I've consulted the net-platform-standard page you referenced numerous times over the last three months, and it has never made any sense to me.\nI did eventually figure out the issue.  After applying the change suggested by shahid-pk, I needed to reboot Visual Studio.  Sigh.\n. I've been tweaking my test code; I no longer get the above error.  Now the Visual Studio debugger does not indicate any problem, but the Kestrel log now shows this:\nfail: Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware[0]\nAn unhandled exception has occurred while executing the request\nJavaScriptEngineSwitcher.Core.JsRuntimeException: Script threw an exception: 'Components' is undefined\nLine: 0\nColumn:0\nat React.ReactEnvironment.Execute[T](String code)\n   at React.ReactComponent.EnsureComponentExists()\nI don't know what more is needed to make this work.  The Components object is defined, per instructions.\nDoes someone have a working example that consists of:\n- ASP.NET Core RC2\n- webpack constructed bundle\n- server-side rendering of React (via @Html.React)\nI've yet to see this combination working.\n. ",
    "ghotiphud": "Seeing this issue with React.MSBuild consistently as well.  I have an application with only a handful of jsx files, but I noticed a definite uptick in the occurrence of the exception as I added more jsx files.  Hopefully this tidbit helps.\nEdit: Running .Net 4.5.2, Win 7, building a Sharepoint Add-in, so MVC & CoreCLR are not involved.\nUnhandled Exception: System.AccessViolationException: Attempted to read or write protected memory. This is often an indication that other memory is corrupt.\n     at MsieJavaScriptEngine.JsRt.Ie.IeNativeMethods.JsCallFunction(IeJsValue function, IeJsValue[] arguments, UInt16 argumentCount, IeJsValue& result)\n     at MsieJavaScriptEngine.JsRt.Ie.IeJsValue.CallFunction(IeJsValue[] arguments)\n     at MsieJavaScriptEngine.JsRt.Ie.ChakraIeJsRtJsEngine.<>c__DisplayClassc.<CallFunction>b__b()\n     at MsieJavaScriptEngine.JsRt.Ie.ChakraIeJsRtJsEngine.InvokeScript[T](Func`1 func)\n     at MsieJavaScriptEngine.JsRt.Ie.ChakraIeJsRtJsEngine.CallFunction(String functionName, Object[] args)\n     at MsieJavaScriptEngine.MsieJsEngine.CallFunction(String functionName, Object[] args)\n     at JavaScriptEngineSwitcher.Msie.MsieJsEngine.InnerCallFunction(String functionName, Object[] args)\n     at JavaScriptEngineSwitcher.Msie.MsieJsEngine.InnerCallFunction[T](String functionName, Object[] args)\n     at JavaScriptEngineSwitcher.Core.JsEngineBase.CallFunction[T](String functionName, Object[] args)\n     at React.JavaScriptEngineUtils.CallFunctionReturningJson[T](IJsEngine engine, String function, Object[] args)\n     at React.ReactEnvironment.ExecuteWithBabel[T](String function, Object[] args)\n     at React.Babel.TransformWithSourceMap(String input, String filename)\n     at React.Babel.TransformWithHeader(String filename, String contents, String hash)\n     at React.Babel.TransformAndSaveFile(String filename)\n     at React.MSBuild.TransformBabel.ExecuteInternal()\n     at React.MSBuild.TransformBabel.Execute()\n     at Microsoft.Build.BackEnd.TaskExecutionHost.Microsoft.Build.BackEnd.ITaskExecutionHost.Execute()\n     at Microsoft.Build.BackEnd.TaskBuilder.<ExecuteInstantiatedTask>d__26.MoveNext()\n     at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.Start[TStateMachine](TStateMachine& stateMachine)\n     at Microsoft.Build.BackEnd.TaskBuilder.ExecuteInstantiatedTask(ITaskExecutionHost taskExecutionHost, TaskLoggingContext taskLoggingContext, TaskHost taskHost, ItemBucket bucket, TaskExecutionMode howToExecuteTask)\n     at Microsoft.Build.BackEnd.TaskBuilder.<InitializeAndExecuteTask>d__24.MoveNext()\n     at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.Start[TStateMachine](TStateMachine& stateMachine)\n     at Microsoft.Build.BackEnd.TaskBuilder.InitializeAndExecuteTask(TaskLoggingContext taskLoggingContext, ItemBucket bucket, IDictionary`2 taskIdentityParameters, TaskHost taskHost, TaskExecutionMode howToExecuteTask)\n     at Microsoft.Build.BackEnd.TaskBuilder.<ExecuteBucket>d__19.MoveNext()\n     at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.Start[TStateMachine](TStateMachine& stateMachine)\n     at Microsoft.Build.BackEnd.TaskBuilder.ExecuteBucket(TaskHost taskHost, ItemBucket bucket, TaskExecutionMode howToExecuteTask, Dictionary`2 lookupHash)\n     at Microsoft.Build.BackEnd.TaskBuilder.<ExecuteTask>d__18.MoveNext()\n     at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.Start[TStateMachine](TStateMachine& stateMachine)\n     at Microsoft.Build.BackEnd.TaskBuilder.ExecuteTask(TaskExecutionMode mode, Lookup lookup)\n     at Microsoft.Build.BackEnd.TaskBuilder.<ExecuteTask>d__13.MoveNext()\n     at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.Start[TStateMachine](TStateMachine& stateMachine)\n     at Microsoft.Build.BackEnd.TaskBuilder.ExecuteTask(TargetLoggingContext loggingContext, BuildRequestEntry requestEntry, ITargetBuilderCallback targetBuilderCallback, ProjectTargetInstanceChild taskInstance, TaskExecutionMode mode, Lookup inferLookup, Lookup executeLookup, CancellationToken cancellationToken)\n     at Microsoft.Build.BackEnd.TargetEntry.<ProcessBucket>d__48.MoveNext()\n     at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.Start[TStateMachine](TStateMachine& stateMachine)\n     at Microsoft.Build.BackEnd.TargetEntry.ProcessBucket(ITaskBuilder taskBuilder, TargetLoggingContext targetLoggingContext, TaskExecutionMode mode, Lookup lookupForInference, Lookup lookupForExecution)\n     at Microsoft.Build.BackEnd.TargetEntry.<ExecuteTarget>d__42.MoveNext()\n     at System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start[TStateMachine](TStateMachine& stateMachine)\n     at Microsoft.Build.BackEnd.TargetEntry.ExecuteTarget(ITaskBuilder taskBuilder, BuildRequestEntry requestEntry, ProjectLoggingContext projectLoggingContext, CancellationToken cancellationToken)\n     at Microsoft.Build.BackEnd.TargetBuilder.<ProcessTargetStack>d__22.MoveNext()\n     at System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start[TStateMachine](TStateMachine& stateMachine)\n     at Microsoft.Build.BackEnd.TargetBuilder.ProcessTargetStack(ITaskBuilder taskBuilder)\n     at Microsoft.Build.BackEnd.TargetBuilder.<BuildTargets>d__11.MoveNext()\n     at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.Start[TStateMachine](TStateMachine& stateMachine)\n     at Microsoft.Build.BackEnd.TargetBuilder.BuildTargets(ProjectLoggingContext loggingContext, BuildRequestEntry entry, IRequestBuilderCallback callback, String[] targetNames, Lookup baseLookup, CancellationToken cancellationToken)\n     at Microsoft.Build.BackEnd.RequestBuilder.<BuildProject>d__57.MoveNext()\n     at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.Start[TStateMachine](TStateMachine& stateMachine)\n     at Microsoft.Build.BackEnd.RequestBuilder.BuildProject()\n     at Microsoft.Build.BackEnd.RequestBuilder.<BuildAndReport>d__49.MoveNext()\n     at System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start[TStateMachine](TStateMachine& stateMachine)\n     at Microsoft.Build.BackEnd.RequestBuilder.BuildAndReport()\n     at Microsoft.Build.BackEnd.RequestBuilder.<RequestThreadProc>d__48.MoveNext()\n     at System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start[TStateMachine](TStateMachine& stateMachine)\n     at Microsoft.Build.BackEnd.RequestBuilder.RequestThreadProc(Boolean setThreadParameters)\n     at Microsoft.Build.BackEnd.RequestBuilder.<StartBuilderThread>b__44_2()\n     at System.Threading.Tasks.Task`1.InnerInvoke()\n     at System.Threading.Tasks.Task.Execute()\n     at System.Threading.Tasks.Task.ExecutionContextCallback(Object obj)\n     at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)\n     at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)\n     at System.Threading.Tasks.Task.ExecuteWithThreadLocal(Task& currentTaskSlot)\n     at System.Threading.Tasks.Task.ExecuteEntry(Boolean bPreventDoubleExecution)\n     at System.Threading.Tasks.ThreadPoolTaskScheduler.LongRunningThreadWork(Object obj)\n     at System.Threading.ThreadHelper.ThreadStart_Context(Object state)\n     at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)\n     at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)\n     at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state)\n     at System.Threading.ThreadHelper.ThreadStart(Object obj)\n. I've seen it mentioned multiple times that you can switch the JsEngine to V8, which seems to be a bit more stable.  I've tried editing the app.config to remove the MsieJsEngine, but I'm still seeing the same error, which leads me to believe that maybe the JsEngine is hard coded for React.MSBuild?  If not, could you help me figure out how to switch so I can move forward with this?\n. ",
    "anatolitrifonov": "Folks sorry if this is offtopic. You keep referring to javascript engine in your replies\nExample\n\nI've seen this error myself several times, but only when using the MSIE JS Engine. I reported it to the developer of the MSIE JS engine library here: Taritsyn/MsieJavaScriptEngine#7\n\nI can not seem to find a document explaining how to pick the js engine used by React.Net\nAny reference please?\nI switched to .Net Core latest release and now getting the same \n\"Exception thrown: 'System.AccessViolationException' in MsieJavaScriptEngine.dll\"\nIs there a work around?\n. I was able to able to resolve or work around by doing this .SetAllowMsieEngine(false) plus copying ClearScriptV8-32.dll, ClearScriptV8-64.dll, v8-ia32.dll, v8-x64.dll into project root folder. \nAdded this to project.json to be able to run on local machine.\n\"buildOptions\": {\n    \"emitEntryPoint\": true,\n    \"preserveCompilationContext\": true,\n    \"copyToOutput\": {\n      \"include\": [ \"ClearScriptV8_.dll\", \"v8-_.dll\" ]\n    }\n},\nAlso added copy of these file to $packOutput during deployment.\nWorks.\nexample of copy script from \"file system-publish.ps1\"\n    $items = $PWD.ToString() + \"\\ClearScriptV8-32.dll\"\n    Copy-Item -Path $items -Destination $packOutput\n    $items = $PWD.ToString() + \"\\ClearScriptV8-64.dll\"\n    Copy-Item -Path $items -Destination $packOutput\n    $items = $PWD.ToString() + \"\\v8-ia32.dll\"\n    Copy-Item -Path $items -Destination $packOutput\n    $items = $PWD.ToString() + \"\\v8-x64.dll\"\n    Copy-Item -Path $items -Destination $packOutput\nWork on Azure too\n. ",
    "aaron-hardin": "The answer provided by @anatolitrifonov worked for me, it seems that the JavaScriptEngineSwitcher.V8.props is not correctly processed so the V8 dlls are not registered as dependencies.\nI am running MVC 6, with .NET 4.5.2, in case that helps.\n. ",
    "anass-b": "1.7.2 did not fix the issue for me neither. \n@Daniel15 I tried to find MsieJavaScriptEngine version 1.7.4 in github repository by looking at the tags, and also in nuget.org but without success, any suggestions ?\n. ",
    "LClauss": "had myself depending on the computer i used for my project ( using React.MSBuild 3.0)\nthe Unhandled Exception: System.AccessViolationException ...\ni had to disable and than re-enable the windowbase reference on my project \n. ",
    "peisheng": "any solution for it? i also meet the problem. ",
    "orobert91": "Same problem here. Yes, I am not sure this is the exact thing that solved the issue (because I tried a lot of stuff) but I did not run into the error message since then.... I am having exactly the same issue with .NET Core 1.1 on VS 2017 RC.. Excellent! I will try it and give you feedback. I have tested the latest development build. Instead of React.TinyIoC.TinyIoCResolutionException I get the following exception: \nThe type initializer for 'VroomJs.JsEngine' threw an exception. ---> System.TypeInitializationException: The type initializer for 'VroomJs.JsEngine' threw an exception. ---> System.DllNotFoundException: Unable to load DLL 'VroomJsNative': The specified module could not be found. (Exception from HRESULT: 0x8007007E)\n   at VroomJs.JsEngine.js_set_object_marshal_type(JsObjectMarshalType objectMarshalType)\n   at VroomJs.JsEngine..cctor()\n   --- End of inner exception stack trace ---\n   at VroomJs.JsEngine..ctor(Int32 maxYoungSpace, Int32 maxOldSpace)\n   at React.VroomJsEngine.<>c.<.cctor>b__23_0()\n   at System.Lazy1.CreateValue()\n   at System.Lazy1.LazyInitValue()\n   at React.VroomJsEngine..ctor()\n   --- End of inner exception stack trace ---\n   at React.VroomJsEngine..ctor()\n   at React.VroomJsEngine.Factory.CreateEngine()\n   at React.JavaScriptEngineFactory.GetFactory(JsEngineSwitcher jsEngineSwitcher, Boolean allowMsie). I solved the issue by installing the JavaScriptEngineSwitcher.ChakraCore and JavaScriptEngineSwitcher.ChakraCore.Native. NuGet packages and manually specifying the JS engine.\nAdded:\nengineSwitcher.DefaultEngineName = ChakraCoreJsEngine.EngineName;\nengineSwitcher.EngineFactories.AddChakraCore();\nBefore\napp.UseReact(config => { });\nNow I got a fully working ReactJS.NET under Visual Studio 2017 RC.. V8 is not compatible with .NET Core.\nJurassic is not compatible with .NET Core.\nJint is slow\nUnless I am mistaken, the only decent option left is ChakraCore. .NET Core 1.0 is fairly new technology. Try updating your .NET Core packages to 1.1 using NuGet and update the SDK using https://www.microsoft.com/net/download/core#/current -> Current. ",
    "Jamo10": "281  I am not pretty sure if this is the best place to mention it but this issue is still happening, at least for MVC version. I am using JavaScriptEngineSwitcher.Msie version = 2.4.9.0 & JavaScriptEngineSwitcher.ChakraCore version = 2.4.8.0, so I think this is not about upgrading that library.\nThe stack trace is the same:\nSystem.AccessViolationException was unhandled\nMessage: An unhandled exception of type 'System.AccessViolationException' occurred in MsieJavaScriptEngine.dll\nAdditional information: Attempted to read or write protected memory. This is often an indication that other memory is corrupt.\nAny idea?. ",
    "shahid-pk": "\"frameworks\": {\n  \"net451\": {\n       ReactJS.NET : \"2.4.0 \",\n  }\n},\nchange to this, this should work. you need to target .net 4.5 instead of .net core. As this package does not support .net core.\n. ",
    "mrtrandinhvn": "Please write a more detail guide for using server-side rendering. The current document only works for the old MVC.\nI figured myself how to use in .NET core but it only works if the ",
    "eos87": "I was having the same issue. I fixed it updating libraries to 3.0\n. ",
    "lucamazzanti": "open the transformBabel.proj and change the assemlbyFile path to an external folder containing all the necessary dlls for React.MSBuild.dll. In this way you can keep separated your dlls from theirs.\n<UsingTask AssemblyFile=\"$(OutputPath)\\React.MSBuild.dll\" TaskName=\"TransformBabel\" />\nSee http://reactjs.net/guides/msbuild.html\n. My solution is temporary just to let @waltermacambira continue work. For example, I needed your React.Net MSBuild just to transform my js files with babel, but i don't use at the time React in my project, so i think is useful for me don't add the packages through nuget (i really appreciate it) but move them in an external MSBuild folder.\n. ",
    "rameshsubramanian": "@Daniel15  Any update on @RichardD012's effort to port it to .NET Core?\n. Thanks @RichardD012 !!\nI attempted to get your code working my dev machine. But I get these errors:\nSeverity    Code    Description Project File    Line    Suppression State\nError   NU1001  The dependency Microsoft.AspNetCore.Http.Abstractions >= 1.0.0 could not be resolved.   React.AspNet    C:\\Users\\rames\\Downloads\\React.NET-master_DotNet\\React.NET-master\\src\\React.AspNet\\project.json 17\nError   NU1001  The dependency Microsoft.AspNetCore.Hosting.Abstractions >= 1.0.0 could not be resolved.    React.AspNet    C:\\Users\\rames\\Downloads\\React.NET-master_DotNet\\React.NET-master\\src\\React.AspNet\\project.json 16\nError   NU1001  The dependency Microsoft.AspNetCore.Mvc.ViewFeatures >= 1.0.0 could not be resolved.    React.AspNet    C:\\Users\\rames\\Downloads\\React.NET-master_DotNet\\React.NET-master\\src\\React.AspNet\\project.json 18\nError   NU1001  The dependency Microsoft.Extensions.FileProviders.Physical >= 1.0.0 could not be resolved.  React.AspNet    C:\\Users\\rames\\Downloads\\React.NET-master_DotNet\\React.NET-master\\src\\React.AspNet\\project.json 19\nError   NU1001  The dependency Microsoft.AspNetCore.StaticFiles >= 1.0.0 could not be resolved. React.AspNet    C:\\Users\\rames\\Downloads\\React.NET-master_DotNet\\React.NET-master\\src\\React.AspNet\\project.json 20\nError   NU1001  The dependency Microsoft.Extensions.DependencyInjection >= 1.0.0 could not be resolved. React.AspNet    C:\\Users\\rames\\Downloads\\React.NET-master_DotNet\\React.NET-master\\src\\React.AspNet\\project.json 21\nError   NU1001  The dependency Microsoft.Extensions.PlatformAbstractions >= 1.0.0 could not be resolved.    React.AspNet    C:\\Users\\rames\\Downloads\\React.NET-master_DotNet\\React.NET-master\\src\\React.AspNet\\project.json 22\nError   NU1001  The dependency NETStandard.Library >= 1.6.0 could not be resolved.  React.AspNet    C:\\Users\\rames\\Downloads\\React.NET-master_DotNet\\React.NET-master\\src\\React.AspNet\\project.json 23\nError   NU1001  The dependency React.Core could not be resolved.    React.AspNet    C:\\Users\\rames\\Downloads\\React.NET-master_DotNet\\React.NET-master\\src\\React.AspNet\\project.json 24\nError   NU1001  The dependency JSPool >= 0.4.1 could not be resolved.   React.Core  C:\\Users\\rames\\Downloads\\React.NET-master_DotNet\\React.NET-master\\src\\React.Core\\project.json   11\nError   NU1001  The dependency Newtonsoft.Json >= 9.0.1 could not be resolved.  React.Core  C:\\Users\\rames\\Downloads\\React.NET-master_DotNet\\React.NET-master\\src\\React.Core\\project.json   12\nError   NU1001  The dependency VroomJs >= 1.2.2 could not be resolved.  React.Core  C:\\Users\\rames\\Downloads\\React.NET-master_DotNet\\React.NET-master\\src\\React.Core\\project.json   13\nError   NU1001  The dependency JavaScriptEngineSwitcher.Dotnet.Core.Unofficial >= 1.0.2 could not be resolved.  React.Core  C:\\Users\\rames\\Downloads\\React.NET-master_DotNet\\React.NET-master\\src\\React.Core\\project.json   20\nError   NU1001  The dependency Microsoft.Extensions.Caching.Memory >= 1.0.0 could not be resolved.  React.Core  C:\\Users\\rames\\Downloads\\React.NET-master_DotNet\\React.NET-master\\src\\React.Core\\project.json   21\nError   NU1001  The dependency Microsoft.Extensions.DependencyModel >= 1.0.0 could not be resolved. React.Core  C:\\Users\\rames\\Downloads\\React.NET-master_DotNet\\React.NET-master\\src\\React.Core\\project.json   22\nError   NU1001  The dependency NETStandard.Library >= 1.6.0 could not be resolved.  React.Core  C:\\Users\\rames\\Downloads\\React.NET-master_DotNet\\React.NET-master\\src\\React.Core\\project.json   23\nError   NU1001  The dependency System.Diagnostics.FileVersionInfo >= 4.0.0 could not be resolved.   React.Core  C:\\Users\\rames\\Downloads\\React.NET-master_DotNet\\React.NET-master\\src\\React.Core\\project.json   24\nError   NU1001  The dependency System.Diagnostics.TraceSource >= 4.0.0 could not be resolved.   React.Core  C:\\Users\\rames\\Downloads\\React.NET-master_DotNet\\React.NET-master\\src\\React.Core\\project.json   25\nError   NU1001  The dependency System.Reflection >= 4.1.0 could not be resolved.    React.Core  C:\\Users\\rames\\Downloads\\React.NET-master_DotNet\\React.NET-master\\src\\React.Core\\project.json   26\nError   NU1001  The dependency System.Threading.Thread >= 4.0.0 could not be resolved.  React.Core  C:\\Users\\rames\\Downloads\\React.NET-master_DotNet\\React.NET-master\\src\\React.Core\\project.json   27\nError   NU1001  The dependency JavaScriptEngineSwitcher.Core >= 1.5.0 could not be resolved.    React.Core  C:\\Users\\rames\\Downloads\\React.NET-master_DotNet\\React.NET-master\\src\\React.Core\\project.json   42\nError   NU1001  The dependency JavaScriptEngineSwitcher.Msie >= 1.5.0 could not be resolved.    React.Core  C:\\Users\\rames\\Downloads\\React.NET-master_DotNet\\React.NET-master\\src\\React.Core\\project.json   43\nError   NU1001  The dependency JavaScriptEngineSwitcher.V8 >= 1.5.0 could not be resolved.  React.Core  C:\\Users\\rames\\Downloads\\React.NET-master_DotNet\\React.NET-master\\src\\React.Core\\project.json   44\nError   NU1001  The dependency MsieJavaScriptEngine >= 1.7.1 could not be resolved. React.Core  C:\\Users\\rames\\Downloads\\React.NET-master_DotNet\\React.NET-master\\src\\React.Core\\project.json   45\nError   NU1009  The expected lock file doesn't exist. Please run \"dotnet restore\" to generate a new lock file.  React.Core  C:\\Users\\rames\\Downloads\\React.NET-master_DotNet\\React.NET-master\\src\\React.Core\\project.lock.json  1\nError   NU1001  The dependency React.Core could not be resolved.    React.Owin  C:\\Users\\rames\\Downloads\\React.NET-master_DotNet\\React.NET-master\\src\\React.Owin\\project.json   16\nError   NU1001  The dependency Owin >= 1.0.0 could not be resolved. React.Owin  C:\\Users\\rames\\Downloads\\React.NET-master_DotNet\\React.NET-master\\src\\React.Owin\\project.json   41\nError   NU1001  The dependency Microsoft.Owin >= 3.0.1 could not be resolved.   React.Owin  C:\\Users\\rames\\Downloads\\React.NET-master_DotNet\\React.NET-master\\src\\React.Owin\\project.json   42\nError   NU1001  The dependency Microsoft.Owin.FileSystems >= 3.0.1 could not be resolved.   React.Owin  C:\\Users\\rames\\Downloads\\React.NET-master_DotNet\\React.NET-master\\src\\React.Owin\\project.json   43\nError   NU1001  The dependency Microsoft.Owin.StaticFiles >= 3.0.1 could not be resolved.   React.Owin  C:\\Users\\rames\\Downloads\\React.NET-master_DotNet\\React.NET-master\\src\\React.Owin\\project.json   44\nError   NU1009  The expected lock file doesn't exist. Please run \"dotnet restore\" to generate a new lock file.  React.Owin  C:\\Users\\rames\\Downloads\\React.NET-master_DotNet\\React.NET-master\\src\\React.Owin\\project.lock.json  1\nError   NU1001  The dependency Microsoft.NETCore.App >= 1.0.0 could not be resolved.    React.Sample.Mvc6   C:\\Users\\rames\\Downloads\\React.NET-master_DotNet\\React.NET-master\\src\\React.Sample.Mvc6\\project.json    5\nError   NU1001  The dependency Microsoft.AspNetCore.Diagnostics >= 1.0.0 could not be resolved. React.Sample.Mvc6   C:\\Users\\rames\\Downloads\\React.NET-master_DotNet\\React.NET-master\\src\\React.Sample.Mvc6\\project.json    9\nError   NU1001  The dependency Microsoft.AspNetCore.Mvc >= 1.0.0 could not be resolved. React.Sample.Mvc6   C:\\Users\\rames\\Downloads\\React.NET-master_DotNet\\React.NET-master\\src\\React.Sample.Mvc6\\project.json    10\nError   NU1001  The dependency Microsoft.AspNetCore.Razor.Tools >= 1.0.0-preview2-final could not be resolved.  React.Sample.Mvc6   C:\\Users\\rames\\Downloads\\React.NET-master_DotNet\\React.NET-master\\src\\React.Sample.Mvc6\\project.json    11\nError   NU1001  The dependency Microsoft.AspNetCore.Server.IISIntegration >= 1.0.0 could not be resolved.   React.Sample.Mvc6   C:\\Users\\rames\\Downloads\\React.NET-master_DotNet\\React.NET-master\\src\\React.Sample.Mvc6\\project.json    15\nError   NU1001  The dependency Microsoft.AspNetCore.Server.Kestrel >= 1.0.0 could not be resolved.  React.Sample.Mvc6   C:\\Users\\rames\\Downloads\\React.NET-master_DotNet\\React.NET-master\\src\\React.Sample.Mvc6\\project.json    16\nError   NU1001  The dependency Microsoft.AspNetCore.StaticFiles >= 1.0.0 could not be resolved. React.Sample.Mvc6   C:\\Users\\rames\\Downloads\\React.NET-master_DotNet\\React.NET-master\\src\\React.Sample.Mvc6\\project.json    17\nError   NU1001  The dependency Microsoft.Extensions.Configuration.EnvironmentVariables >= 1.0.0 could not be resolved.  React.Sample.Mvc6   C:\\Users\\rames\\Downloads\\React.NET-master_DotNet\\React.NET-master\\src\\React.Sample.Mvc6\\project.json    18\nError   NU1001  The dependency Microsoft.Extensions.Configuration.Json >= 1.0.0 could not be resolved.  React.Sample.Mvc6   C:\\Users\\rames\\Downloads\\React.NET-master_DotNet\\React.NET-master\\src\\React.Sample.Mvc6\\project.json    19\nError   NU1001  The dependency Microsoft.Extensions.Logging >= 1.0.0 could not be resolved. React.Sample.Mvc6   C:\\Users\\rames\\Downloads\\React.NET-master_DotNet\\React.NET-master\\src\\React.Sample.Mvc6\\project.json    20\nError   NU1001  The dependency Microsoft.Extensions.Logging.Console >= 1.0.0 could not be resolved. React.Sample.Mvc6   C:\\Users\\rames\\Downloads\\React.NET-master_DotNet\\React.NET-master\\src\\React.Sample.Mvc6\\project.json    21\nError   NU1001  The dependency Microsoft.Extensions.Logging.Debug >= 1.0.0 could not be resolved.   React.Sample.Mvc6   C:\\Users\\rames\\Downloads\\React.NET-master_DotNet\\React.NET-master\\src\\React.Sample.Mvc6\\project.json    22\nError   NU1001  The dependency Microsoft.Extensions.Options.ConfigurationExtensions >= 1.0.0 could not be resolved. React.Sample.Mvc6   C:\\Users\\rames\\Downloads\\React.NET-master_DotNet\\React.NET-master\\src\\React.Sample.Mvc6\\project.json    23\nError   NU1001  The dependency Microsoft.VisualStudio.Web.BrowserLink.Loader >= 14.0.0 could not be resolved.   React.Sample.Mvc6   C:\\Users\\rames\\Downloads\\React.NET-master_DotNet\\React.NET-master\\src\\React.Sample.Mvc6\\project.json    24\nError   NU1001  The dependency React.Core could not be resolved.    React.Sample.Mvc6   C:\\Users\\rames\\Downloads\\React.NET-master_DotNet\\React.NET-master\\src\\React.Sample.Mvc6\\project.json    25\nError   NU1001  The dependency React.AspNet could not be resolved.  React.Sample.Mvc6   C:\\Users\\rames\\Downloads\\React.NET-master_DotNet\\React.NET-master\\src\\React.Sample.Mvc6\\project.json    28\nError   NU1001  The dependency VroomJs >= 1.2.1 could not be resolved.  React.Sample.Mvc6   C:\\Users\\rames\\Downloads\\React.NET-master_DotNet\\React.NET-master\\src\\React.Sample.Mvc6\\project.json    31\nError   NU1009  The expected lock file doesn't exist. Please run \"dotnet restore\" to generate a new lock file.  React.Sample.Mvc6   C:\\Users\\rames\\Downloads\\React.NET-master_DotNet\\React.NET-master\\src\\React.Sample.Mvc6\\project.lock.json   1\nError   NU1001  The dependency React.Core could not be resolved.    React.Web   C:\\Users\\rames\\Downloads\\React.NET-master_DotNet\\React.NET-master\\src\\React.Web\\project.json    37\nError   NU1001  The dependency WebActivatorEx >= 2.1.0 could not be resolved.   React.Web   C:\\Users\\rames\\Downloads\\React.NET-master_DotNet\\React.NET-master\\src\\React.Web\\project.json    40\nError   NU1001  The dependency Microsoft.Web.Infrastructure >= 1.0.0 could not be resolved. React.Web   C:\\Users\\rames\\Downloads\\React.NET-master_DotNet\\React.NET-master\\src\\React.Web\\project.json    45\nError   NU1009  The expected lock file doesn't exist. Please run \"dotnet restore\" to generate a new lock file.  React.Web   C:\\Users\\rames\\Downloads\\React.NET-master_DotNet\\React.NET-master\\src\\React.Web\\project.lock.json   1\nError       NuGet Package Restore failed for one or more packages. See details in the Output window.            0   \nIhave been unable to resolve these errors for 2 days now. Any idea why I am getting these?\n. @RichardD012, I get this when I run the version command 1.0.0-preview2-003121\n. ",
    "RichardD012": "I currently have a working version if you look at my fork. The required dependencies work in Windows using the Vroom Js renderer. \nCurrently what is holding back a PR is that the dotnet solution hasn't been completely rebuilt to match the exiting legacy solution. However, they both work independently and the MVC6 Sample uses that. \nI'm actually using it in a side project with a custom Nuget config for the solution pointing to local versioned packages. This is also present in the example as it using the unnerved JSpool for dot net core. \n. Which version of the ASP.Net Core are you running?  If you dotnet --version what is the output?\n. ",
    "kataik": "Same here, would gladly have a solution which works with RC2.\n. ",
    "andrewl913": "Hey all! My team is looking to include this in our enterprise solution. Any progress on the netcoreapp1.0  framework?\n. ",
    "chikehenderson": "I just want to use React with my *\"MVC 6\"(edited) project..\n. I like it.. will check it out asap..\n. I followed the tutorials and have looked at most of the comments, im trying to add this react.net to my MVC 6 project, it's the core 1 (.net) version, i changed the depedecies from netcoreapp to net452 , but I just get the error >> \"The project does not specify any target frameworks in project.json\" <<\n. @Daniel15 - I almost gave up, I will check it out.. thanks\n. ",
    "tom-mckinney": "Daniel15, worked right out of the box for me! Thanks so much for pushing this out!\n. ",
    "etrpreddy": "Awesome. It worked out of the box with 3.0. Thanks\n. ",
    "chriscamplejohn": "I had to add VroomJs.AssemblyLoader.EnsureLoaded(); in my startup on windows to prevent this error. Using React.AspNet 3.0.0 in a Microsoft.NETCore.App 1.1.0.. What version are you currently using to build the documentation? I have not successfully managed to get it to build.. Ah...ok. I was going to submit a couple of pull requests for the docs but wanted to check they looked ok first - just in case!. Ok - thanks. I went for just checking it in a markdown editor :-). The old versions of Jekyll didn't seem to want to play ball. I have submitted 2 PRs both of which have documentation updates and both of which are required to get up and running fully on .NET Core.. I have a fix for this. I will create a PR. Add an additional function in tutorial.jsx\njavascript\nfunction createRemarkable() {\n    var remarkable = ((\"undefined\" != typeof global) && (global.Remarkable)) ? global.Remarkable : window.Remarkable;\n    return new remarkable();\n}\nthen use that to create the instance e.g.\njavascript\nvar md = createRemarkable();\nvar rawMarkup = md.render(this.props.children.toString());. Yes - correct. This was for V1 I don't believe it is needed in the newer versions of .NET Core.. ",
    "hellqvist": "Hi, \nI can't seem to get my tests working since ReactJS.Net doesn't support import/export which seems to be needed to get my tests running. I'm using babel-jest as a preprocessor for my tests and if I don't import react the tests complaining about it. If I import React the test is working but ReactJS.Net is complaining.\nAny thoughts or suggestions about my problem?\n. ",
    "diazrm": "Hi, @hellqvist .\nYou don't need to \"glue\" your js source files to run your tests. What you need is a test runner that can understand where your js source files live, like Karma in combination with a taks runner, for example. Or any of the options that @dustinsoftware mentioned. But the main point is that your testing framework (Jasmine, QUnit, Mocha, etc.) can find the source it needs to work against.\nIf you still need the js source code to integrate in a way that all the basecode is visible all the time, then you need to start to build bundles. If you want to keep the whole experience inside Visual Studio, the simplest way to achieve this is with the help of ASP.NET Bundle & Minification.\nGoing back to the test runners: in my case, I prefer a test runner called Chutzpah, which integrates with Visual Studio and it's Test Explorer. But it can run in command line also, which lets you integrate it in your continuous integration cycle, if you have one in place.\n. ",
    "rubensbferraz": "Obrigado a informa\u00e7\u00e3o me foi muito util. ",
    "Sheng-Long": "I had the same issue explained in this thread: https://github.com/reactjs/React.NET/issues/281\nI attempted the solutions provided, but couldn't get it working.  I've given up on this for now, but I plan to revisit once the .net core is released as you mentioned in the readme that you would update the tutorial (I think).  I'm sure this is just a user issue rather than a problem on your end, I was just very frustrated yesterday when I posted this.  Sorry to muck up your issue board with my venting.\n. Now that I got further into the tutorial, I have been having dependency problems.  Specifically an error message very similar to this: https://github.com/reactjs/React.NET/issues/268.  I'll keep trying different things to get this working, but I'm waiting on baited breath for your new tutorial.\n. NU1002: \"The dependency Microsoft.NETCore.App 1.0.0 does not support framework .NETFramework,Version=v4.6.1\".  This error is found on line 14 in my project.json file.\n. I see in your tutorial that you mention ensuring my project does not reference .NetCore.  Is that my problem?  I thought ensuring that my project.json file said \"net452 in its frameworks section, not netcoreapp\" was what you meant, but must I remove other references as well?  I'm installing VS2013 right now to attempt your other tutorial so I am unable to try removing all references to .NetCore right now.\n. Ok, that worked.  However, I am now having a problem with the next part of the tutorial in the next section.\nWhen adding the lines to startup.cs: \n\"services.AddSingleton();\nservices.AddReact();\"\nVisual studios errors occur:  \"Error CS0246 - The type or namespace name 'IHttpContextAccessor' could not be found (are you missing a using directive or an assembly reference?) \"\nand\n\"Error CS0246 - The type or namespace name 'HttpContextAccessor' could not be found (are you missing a using directive or an assembly reference?)\"\nAm I missing a reference?\n. For now, my solution was to use the following links:\n<script src=\"https://npmcdn.com/react@15.3.1/dist/react.js\"></script>\n<script src=\"https://npmcdn.com/react-dom@15.3.1/dist/react-dom.js\"></script>\nInstead of the ones provided in the tutorial:\n<script src=\"https://fb.me/react-15.0.1.js\"></script>\n<script src=\"https://fb.me/react-dom-15.0.1.js\"></script>\nI don't understand why what I assume to be the npm sources work and the facebook sources don't, but at least the \"Hello, world! I am a CommentBox.\" is now loading.\n. Ah, you are likely correct.  I am behind a firewall.  Thank you for that insight.\nAnd yes, upon installing VS2013, the only source enabled by default for me was the \"Microsoft Offline...\" something or other.  I don't see the source anymore, so perhaps it was just a configuration problem after the installation was done.  Thanks for all of your help today Daniel.\n. ",
    "StefanoSega": "Ok got it, seems there's now way to leave ReactDOM.render with SSR without getting errors, even checking for window !== undefined or whatever other hack :P\nremoved ReactDOM.render I get anyway this warning:\n\nreact.js:18794 Warning: render(...): Replacing React-rendered children with a new root component. If you intended to update the children of this node, you should instead have the existing children update their state and render the new components instead of calling ReactDOM.render.\n. Great, thanks for the answers Daniel!\n\nmy rendered view looks like this:\n```\n<!DOCTYPE html>\n\n\n\nIndex\n\n\nIndex\n\nHello World!\n\n<script src=\"/scripts/react/react.js\"></script>\n\n\n<script src=\"/scripts/web/Home/Index.jsx\"></script>\n\n<script>ReactDOM.render(React.createElement(HelloWorldComponent, {}), document.getElementById(\"react_AnwTQ65duEOKt6fLAePlA\"));\n\n\n Visual Studio Browser Link \n\n    {\"appName\":\"Chrome\",\"requestId\":\"6de36a5d692e47cebe1fa18cfec2bdd4\"}\n\n\n End Browser Link \n\n\n```\nand the JS error expanded using ReactJS Dev tools for Chrome looks like:\n```\nreact.js:18794 Warning: render(...): Replacing React-rendered children with a new root component. If you intended to update the children of this node, you should instead have the existing children update their state and render the new components instead of calling ReactDOM.render.\nwarning @ react.js:18794\n_renderSubtreeIntoContainer @ react.js:11131\nrender @ react.js:11166\nReact_render @ react.js:12349\n(anonymous function) @ (index):26\n```\n... the line (index):26 is:\n<script>ReactDOM.render(React.createElement(HelloWorldComponent, {}), document.getElementById(\"react_AnwTQ65duEOKt6fLAePlA\"));\n</script>\n... also as a next step I'll try to create more components in different files and to make them to communicate with each other through props and the state ...\nwhat you advise me to use Daniel for a scalable architecture that anyway can use SSR?\nIs it possible with a module loader like SystemJS/Common/Require?\nHow I can create a babelified bundle of JSX using BabelBundle class and then use the bundle with ReactSiteConfiguration.Configuration for the SSR?\nAt the moment I just created a bundle with the single JSX and included the bundle in the html page, while in the ReactSiteConfiguration.Configuration I added as a script no the bundle but directly the lone jsx file that compose the bundle itself.\nThanks a lot and I wish the best for this great project!\n. ",
    "martinhorvath": "Hey guys,\ndid you figure out how to fix the SSR? I am facing the same issue since my last reactjs.net update and even the most simple jsx throws the error. I've created a stackoverflow question a couple of days ago but got no answer there :-/ --> \nhttp://stackoverflow.com/questions/40058754/reactjs-net-server-side-rendering-with-client-initialization-throws-warning\nBest regards,\nMartin\n. ",
    "ricardopolo": "It was very simple. Just call @Html.ReactInitJavaScript() in every page that uses React. Not do that in the shared scripts.\n. @jslatts We also have webpack.\nAnd we put that webpack compiled script into a bundle.\nbundles.Add(new ScriptBundle(\"~/Bundles/React\").Include(\"~/webpackBundle.js\"));\nI dont know if the slowness is causes by the bundle creation...\n. ",
    "ageddesi": "Has anyone looked into this ? I would really like to use the bundler to compile the jsx files.. Its ok, I am using web.compiler to compile the jsx files and then using BundlerMinifier.Core to bundle them and minify into one file. I am sure this is not the best approach but I am brand new to react and core (been web dev for 7 years) :P so I see how it grows. I hope to be able to contribute to this project one day. . For me this is the final piece for forms :) I would like to input on this as well as I can see the option of adding them as props.... What is the exception you are getting ? . ",
    "TorbenRahbekKoch": "EditorConfig seems like a nice tool. Maybe you should add more .editorconfig files to the relevant parts of the solution ;)\nSorry about the missing unit-test. That was a brain fart on my part.\nAll in all good suggestions - I will get back to you with some updates ;)\n. Thanks for the config ;) I think that, in general, using spaces seems to cause the least hazzle ;)\n. I think I'm done now ;)\n. ValidateCache is rather vague and unspecific - CacheIsValid would be a better name, since it better hints at what state the cache is actually in, when true/false is returned.\nAnd I like flipping the true/false values, since it would enable me to turn around the if in your next comment ;)\n. The reason I didn't do that in the first place is that NOTs (!) in C# is rather subtle and easy to miss. Renaming the MustTranspileFile to e.g. CacheIsValid would allow me to do that. Good suggestion.\nIt would give two return outputPath; statements, though.\n. ",
    "NuclearFishin": "Thanks @Daniel15 for your quick response! I went for unpkg.com because it's the source used in the React getting started guide, but yes CDNJS would work just as fine!\nIndeed my requirement for loading server-side may be too esoteric for inclusion in the main libraries, but I am thinking that some kind of mechanism for maintaining parity with my server-side scripts would be a useful feature? The use-case I'm thinking of is that I update my React.NET Nuget packages, and now the server-side React scripts would be out of sync with my client-side ones.\nA very minimal way to address this concern would be to expose a property detailing the React version used by the server-side? Then consumers like me could use that in our script references, such as:\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/react/@(reactVersion)/react.min.js\"></script>\nWhat do you think? Does such a property exist?\n. ",
    "agscala": "I'm not sure what you're asking for. Do you want me to remove all the JSX tags and ES6 also? In that case I wouldn't need to compile anything\n. ",
    "bemaxima": "I change my index.js file from \n```\nmodule.exports = {\n    // All the components you'd like to render server-side\n    Hello: require('./Hello')\n};\n```\nto\n```\nmodule.exports = {\n    // All the components you'd like to render server-side\n    Hello: require('./Hello').Hello\n};\n```\nAnd It worked.\n. ",
    "mikiamit": "Hi Daniel, Thanks for your response.\nThis is how my bundle config looks like:\nvar tutorialForm = new BabelBundle(\"~/tutorialForm\");\ntutorialForm.Include(\"~/Scripts/TypeScripts/Elements/Tutorial/TutorialForm.jsx\");\ntutorialForm.Include(\"~/Scripts/TypeScripts/Elements/Tutorial/CategoryCheckBox.jsx\");\n            BundleTable.Bundles.Add(tutorialForm);\nvar tutorialPlaylistForm = new\nBabelBundle(\"~/tutorialPlaylistForm\");\ntutorialPlaylistForm.Include(\"~/Scripts/Lib/jquery-sortable.js\");\ntutorialPlaylistForm.Include(\"~/Scripts/TypeScripts/Elements/Tutorial/TutorialPlaylistForm.jsx\");\ntutorialPlaylistForm.Include(\"~/Scripts/TypeScripts/Elements/Tutorial/TutorialRowInTutorials.jsx\");\n//tutorialPlaylistForm.Include(\"~/Scripts/TypeScripts/Elements/Tutorial/TutorialRowInPlaylistForm.jsx\");\n            BundleTable.Bundles.Add(tutorialPlaylistForm);\nvar tutorialsBundle = new BabelBundle(\"~/tutorials\");\ntutorialsBundle.Include(\"~/Scripts/TypeScripts/Elements/Tutorial/Tutorials.jsx\");\ntutorialsBundle.Include(\"~/Scripts/TypeScripts/Elements/Tutorial/TutorialRowInTutorials.jsx\");\ntutorialsBundle.Include(\"~/Scripts/TypeScripts/Elements/Tutorial/TutorialPlaylistRowInTutorials.jsx\");\n            BundleTable.Bundles.Add(tutorialsBundle);\nvar tutorialBundle = new BabelBundle(\"~/tutorial\");\ntutorialBundle.Include(\"~/Scripts/TypeScripts/Elements/Tutorial/Tutorial.jsx\");\ntutorialBundle.Include(\"~/Scripts/TypeScripts/Elements/Exhibit/Exhibit.jsx\");\ntutorialBundle.Include(\"~/Scripts/TypeScripts/Elements/Exhibit/ExhibitCategoryButton.jsx\");\ntutorialBundle.Include(\"~/Scripts/TypeScripts/Elements/Exhibit/ExhibitCategoriesButtons.jsx\");\ntutorialBundle.Include(\"~/Scripts/TypeScripts/Elements/Exhibit/SendSuggestion.jsx\");\ntutorialBundle.Include(\"~/Scripts/TypeScripts/Elements/Tutorial/TutorialRowInTutorials.jsx\");\n            BundleTable.Bundles.Add(tutorialBundle);\nvar tutorialList = new BabelBundle(\"~/editTutorials\");\ntutorialList.Include(\"~/Scripts/TypeScripts/Elements/Tutorial/EditTutorials.jsx\");\ntutorialList.Include(\"~/Scripts/TypeScripts/Elements/Tutorial/TutorialRowInEditTutorials.jsx\");\n            BundleTable.Bundles.Add(tutorialList);\nvar searchExhibit = new BabelBundle(\"~/exhibitViewSearch\");\nsearchExhibit.Include(\"~/Scripts/TypeScripts/Elements/Exhibit/OfficeBranch.jsx\");\nsearchExhibit.Include(\"~/Scripts/TypeScripts/Elements/Exhibit/Exhibit.jsx\");\nsearchExhibit.Include(\"~/Scripts/TypeScripts/Elements/Exhibit/ExhibitCategoryButton.jsx\");\nsearchExhibit.Include(\"~/Scripts/TypeScripts/Elements/Exhibit/ExhibitCategoriesButtons.jsx\");\nsearchExhibit.Include(\"~/Scripts/TypeScripts/Elements/Exhibit/Exhibits.jsx\");\nsearchExhibit.Include(\"~/Scripts/TypeScripts/Elements/Exhibit/OfficeBranchFilter.jsx\");\nsearchExhibit.Include(\"~/Scripts/TypeScripts/Elements/Exhibit/OfficeRegion.jsx\");\nsearchExhibit.Include(\"~/Scripts/TypeScripts/Elements/Exhibit/ViewSearch.jsx\");\nsearchExhibit.Include(\"~/Scripts/TypeScripts/Elements/Exhibit/SendSuggestion.jsx\");\n            BundleTable.Bundles.Add(searchExhibit);\nIts 6 different bundles with an avg of 5 files in each bundle.\nOn Sun, Oct 9, 2016 at 10:46 PM, Daniel Lo Nigro notifications@github.com\nwrote:\n\nHey @mikiamit https://github.com/mikiamit, how much code are you\nbundling?\nCould you please retry it with ReactJS.NET 3.0 (which I just released\ntoday) and see if that helps at all?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/reactjs/React.NET/issues/329#issuecomment-252530467,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AM3OwGmAc2uYGA9CghdlmBgWqagvWTADks5qyab5gaJpZM4KQP8a\n.\n\n\n\u05de\u05d9\u05db\u05d0\u05dc \u05e2\u05de\u05d9\u05ea\n054.33.22.189\n. Does the new version took care of this memory leak?\nOn Mon, Oct 10, 2016 at 9:45 AM, Miki Amit mikiamit@gmail.com wrote:\n\nHi Daniel, Thanks for your response.\nThis is how my bundle config looks like:\nvar tutorialForm = new BabelBundle(\"~/tutorialForm\");\n            tutorialForm.Include(\"~/Scripts/TypeScripts/Elements/\nTutorial/TutorialForm.jsx\");\n            tutorialForm.Include(\"~/Scripts/TypeScripts/Elements/\nTutorial/CategoryCheckBox.jsx\");\n            BundleTable.Bundles.Add(tutorialForm);\nvar tutorialPlaylistForm = new BabelBundle(\"~/\ntutorialPlaylistForm\");\n            tutorialPlaylistForm.Include(\"~/Scripts/Lib/jquery-sortable.\njs\");\n            tutorialPlaylistForm.Include(\"~/Scripts/TypeScripts/\nElements/Tutorial/TutorialPlaylistForm.jsx\");\n            tutorialPlaylistForm.Include(\"~/Scripts/TypeScripts/\nElements/Tutorial/TutorialRowInTutorials.jsx\");\n            //tutorialPlaylistForm.Include(\"~/Scripts/\nTypeScripts/Elements/Tutorial/TutorialRowInPlaylistForm.jsx\");\n            BundleTable.Bundles.Add(tutorialPlaylistForm);\nvar tutorialsBundle = new BabelBundle(\"~/tutorials\");\n        tutorialsBundle.Include(\"~/Scripts/TypeScripts/Elements/\nTutorial/Tutorials.jsx\");\n            tutorialsBundle.Include(\"~/Scripts/TypeScripts/Elements/\nTutorial/TutorialRowInTutorials.jsx\");\n            tutorialsBundle.Include(\"~/Scripts/TypeScripts/Elements/\nTutorial/TutorialPlaylistRowInTutorials.jsx\");\n            BundleTable.Bundles.Add(tutorialsBundle);\nvar tutorialBundle = new BabelBundle(\"~/tutorial\");\n        tutorialBundle.Include(\"~/Scripts/TypeScripts/Elements/\nTutorial/Tutorial.jsx\");\n            tutorialBundle.Include(\"~/Scripts/TypeScripts/Elements/\nExhibit/Exhibit.jsx\");\n            tutorialBundle.Include(\"~/Scripts/TypeScripts/Elements/\nExhibit/ExhibitCategoryButton.jsx\");\n            tutorialBundle.Include(\"~/Scripts/TypeScripts/Elements/\nExhibit/ExhibitCategoriesButtons.jsx\");\n            tutorialBundle.Include(\"~/Scripts/TypeScripts/Elements/\nExhibit/SendSuggestion.jsx\");\n            tutorialBundle.Include(\"~/Scripts/TypeScripts/Elements/\nTutorial/TutorialRowInTutorials.jsx\");\n            BundleTable.Bundles.Add(tutorialBundle);\nvar tutorialList = new BabelBundle(\"~/editTutorials\");\n        tutorialList.Include(\"~/Scripts/TypeScripts/Elements/\nTutorial/EditTutorials.jsx\");\n            tutorialList.Include(\"~/Scripts/TypeScripts/Elements/Tutorial/\nTutorialRowInEditTutorials.jsx\");\n            BundleTable.Bundles.Add(tutorialList);\nvar searchExhibit = new BabelBundle(\"~/exhibitViewSearch\");\n        searchExhibit.Include(\"~/Scripts/TypeScripts/Elements/\nExhibit/OfficeBranch.jsx\");\n            searchExhibit.Include(\"~/Scripts/TypeScripts/Elements/\nExhibit/Exhibit.jsx\");\n            searchExhibit.Include(\"~/Scripts/TypeScripts/Elements/\nExhibit/ExhibitCategoryButton.jsx\");\n            searchExhibit.Include(\"~/Scripts/TypeScripts/Elements/Exhibit/\nExhibitCategoriesButtons.jsx\");\n            searchExhibit.Include(\"~/Scripts/TypeScripts/Elements/\nExhibit/Exhibits.jsx\");\n            searchExhibit.Include(\"~/Scripts/TypeScripts/Elements/\nExhibit/OfficeBranchFilter.jsx\");\n            searchExhibit.Include(\"~/Scripts/TypeScripts/Elements/\nExhibit/OfficeRegion.jsx\");\n            searchExhibit.Include(\"~/Scripts/TypeScripts/Elements/\nExhibit/ViewSearch.jsx\");\n            searchExhibit.Include(\"~/Scripts/TypeScripts/Elements/\nExhibit/SendSuggestion.jsx\");\n            BundleTable.Bundles.Add(searchExhibit);\nIts 6 different bundles with an avg of 5 files in each bundle.\nOn Sun, Oct 9, 2016 at 10:46 PM, Daniel Lo Nigro <notifications@github.com\n\nwrote:\nHey @mikiamit https://github.com/mikiamit, how much code are you\nbundling?\nCould you please retry it with ReactJS.NET 3.0 (which I just released\ntoday) and see if that helps at all?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/reactjs/React.NET/issues/329#issuecomment-252530467,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AM3OwGmAc2uYGA9CghdlmBgWqagvWTADks5qyab5gaJpZM4KQP8a\n.\n\n\n\u05de\u05d9\u05db\u05d0\u05dc \u05e2\u05de\u05d9\u05ea\n054.33.22.189\n\n\n\u05de\u05d9\u05db\u05d0\u05dc \u05e2\u05de\u05d9\u05ea\n054.33.22.189\n. ",
    "chrisghardwick": "Yes, does the upgrade fix/address the memory leak? @mikiamit \n. ",
    "Farami": "I am running into the same issue. Our bundles are fairly large.\nThe OutOfMemoryException does not occur every time.. ",
    "asmagin": "``\n[ReactAspNetException: Trying to store item in HttpContext.Current while not in an ASP.NET request!]\n   React.Web.TinyIoC.HttpContextLifetimeProvider.SetObject(Object value) +201\n   React.TinyIoC.SafeDictionary2.set_Item(TKey key, TValue value) +162\n   React.TinyIoC.TinyIoCContainer.Register() +155\n   Smagin.Alex.React.AssemblyRegistration.Register(TinyIoCContainer container) in D:.projects\\Smagin\\src\\server\\Smagin.Alex.React\\AssemblyRegistration.cs:37\n   React.Initializer.InitializeIoC(Func`2 requestLifetimeRegistration) +512\n   React.Web.WebInitializer.Initialize() +71\n[TargetInvocationException: Exception has been thrown by the target of an invocation.]\n   System.RuntimeMethodHandle.InvokeMethod(Object target, Object[] arguments, Signature sig, Boolean constructor) +0\n   System.Reflection.RuntimeMethodInfo.UnsafeInvokeInternal(Object obj, Object[] parameters, Object[] arguments) +260\n   System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture) +146\n   WebActivatorEx.BaseActivationMethodAttribute.InvokeMethod() +102\n   WebActivatorEx.ActivationManager.RunActivationMethods(Boolean designerMode) +718\n   WebActivatorEx.ActivationManager.Run() +125\n[InvalidOperationException: The pre-application start initialization method Run on type WebActivatorEx.ActivationManager threw an exception with the following error message: Exception has been thrown by the target of an invocation..]\n   System.Web.Compilation.BuildManager.InvokePreStartInitMethodsCore(ICollection1 methods, Func1 setHostingEnvironmentCultures) +877\n   System.Web.Compilation.BuildManager.InvokePreStartInitMethods(ICollection`1 methods) +169\n   System.Web.Compilation.BuildManager.CallPreStartInitMethods(String preStartInitListPath, Boolean& isRefAssemblyLoaded) +133\n   System.Web.Compilation.BuildManager.ExecutePreAppStart() +176\n   System.Web.Hosting.HostingEnvironment.Initialize(ApplicationManager appManager, IApplicationHost appHost, IConfigMapPathFactory configMapPathFactory, HostingEnvironmentParameters hostingParameters, PolicyLevel policyLevel, Exception appDomainCreationException) +734\n[HttpException (0x80004005): The pre-application start initialization method Run on type WebActivatorEx.ActivationManager threw an exception with the following error message: Exception has been thrown by the target of an invocation..]\n   System.Web.HttpRuntime.FirstRequestInit(HttpContext context) +539\n   System.Web.HttpRuntime.EnsureFirstRequestInit(HttpContext context) +125\n   System.Web.HttpRuntime.ProcessRequestNotificationPrivate(IIS7WorkerRequest wr, HttpContext context) +731\n```\nhere is what I've got\n. ",
    "chrisd37": "Ran across this error today in my mixed MVC + ASP.Net app but with React.Initializer.Initialize(ReactConfig.AsPerRequestSingleton);\nSolved it by relocating my item storing code from ReactConfig.cs' configure() to application_start() in global.asax.cs so I had an HttpContext.Current . ",
    "DanielDziubecki": "I solved this by downloading newest .Net Core. But  sometimes I get this exception\n\nAn unhandled exception of type 'System.AccessViolationException' occurred in System.Private.CoreLib.ni.dll\n\nAdditional information: Attempted to read or write protected memory. This is often an indication that other memory is corrupt.\nI have followed your instructions about it. I have pasted this \"copyToOutput\": {\n      \"include\": [\n        \"ClearScript.V8\"\n      ]\n    } \nto my project.json and then I copied ClearScript.V8 dlls folder to my application. After build there is ClearScript.V8 folder in my bin. But like I sad sometimes I get this error again. Specially in debug mode.\n. I have referenced my bundled JS. My other components working well but now I need to import one.. But requrie doesnt work either. Is React.NET not using babel ?. ",
    "rahamohebbi": "I am also getting this error:\nAn unhandled exception of type 'System.AccessViolationException' occurred in System.Private.CoreLib.ni.dll\nAdditional information: Attempted to read or write protected memory. This is often an indication that other memory is corrupt.\nI tried to add this in my startup.cs but it didn't fix the problem:\n        JsEngineSwitcher engineSwitcher = JsEngineSwitcher.Instance;\n        engineSwitcher.EngineFactories\n        .AddChakraCore()\n        .AddMsie(new MsieSettings() { EngineMode = JsEngineMode.Auto });\n\nAny ideas ?. ",
    "fujihara": "It will not compile to Mac since the repository http://gyp.googlecode.com/svn/trunk is not available anymore and I could not make VroomJs compile with gyp version greater than 3.17.\nIs it possible to run on Mac using javascript engine other than v8?\n. ",
    "saberone": "Any news on this? It's not really critical for me, but it makes a demo just that bit cooler if it works on macOS too. ;). I'm having the same error right now. I tried 16.0 and 16.2.. ",
    "holmescn": "After followed the step-by-step instruction on https://github.com/pauldotknopf/vroomjs-core/issues/10, I have successfully built a libVroomJsNative.so, and copy it into /usr/local/lib. That doesn't work. Then I link it to libVroomJsNative.dylib, the application crashed without any information. I have tried to build the React.Core in order to find what happened, the dotnet restore shows many System packages do not have compatible version on osx-10.12-x64. Finally I dropped my attempt. The .net core just release less a year, and the SDK is still in preview stage. We could not expect it to run anywhere.\nI don't know if my PR could be merged. It it could, the VroomJS will be skipped on macOS, then using Chakra instead.. @luty81 how do you managed the JS engine? could you share the code?\nI am switching to JavaScriptService which is written by asp.net core team. It is working well on Windows, Linux and macOS.. Perhaps a simple solution is to add a try-catch block to wrap the AddVroom method. then this factory will not be added since it failed to initialize VroomJS.\nI found that the JavaScript Engine Switcher already update to v2.1.2 version, but the dependencies still be 2.0.0 of React.NET 3.0.0.. A PR has been made.. ",
    "luty81": "I am facing this issue in Ubuntu 16.04. Is it possible to force React.NET to use another js engine ?. I managed to change the js engine. Now it works with Chakra and Jint, but now I got another problem. It takes so long to process jsx files. Sometimes it takes about 1 minute in one single jsx. The same code in Windows is processed instantly.\n\nAs you can see in the print above, it took 47625 ms to process a tiny jsx  (0.6 KB)\nAny thoughts ?\n. @holmescn in Startup.Configure something like this:\n```c#\n            var engineSwitcher = JsEngineSwitcher.Instance;\n            engineSwitcher.DefaultEngineName = \"Jint\";\n            engineSwitcher.EngineFactories\n                .AddChakraCore()\n                .AddJint()\n                .AddVroom();\n        app.UseReact(config =>\n        {\n            //\n        }\n\n```\nThe code above along this fix https://github.com/reactjs/React.NET/pull/359 solves the problem for me in Ubuntu 16.04 LTS\n. Guys,\nAny ideia when this fix will be available in a stable package ? Or is there any public prerelease repository where I can get find this package ?\nI know I can manually download it at AppVeyor Build 179 Atifacts, but I\u00b4d like to automatically get through dotnet restore without copy these packages to a local repository.. ",
    "stimms": "I ran into this tonight on OSX. Thanks to the helpful instructions in this thread and a couple of other places I was able to piece together a working version. \nThe process is \n\nInstall the JavaScriptEngineSwitcher.Jint package\n\nAdd the namespaces to Startup.cs\nusing JavaScriptEngineSwitcher.Core;\nusing JavaScriptEngineSwitcher.ChakraCore;\nusing JavaScriptEngineSwitcher.Jint;\n3. In the Configure before the app.UseReact() call include \nvar engineSwitcher = JsEngineSwitcher.Instance;\n        engineSwitcher.DefaultEngineName = \"Jint\";\n        engineSwitcher.EngineFactories\n            .AddJint();\n\n\nThis appears to be sufficient to get everything working, however as @luty81 observed the initial call is very slow. Subsequent calls seem to be fine so it is likely the cost of starting up the JavaScript engine. . ",
    "Jenan": "https://stackoverflow.com/questions/40238903/how-can-i-render-the-react-app-with-redux-using-the-reactjs-net. ",
    "scokmen": "I encountered the same problem. The parameter serverOnly don't work.. ",
    "heinzmuller": "I don't think this would be that difficult to \"fix\", but it would be nice to know if this is indeed a bug/problem or if I have misunderstood the parameter before I attempt to fix it with a PR. Any input on this @Daniel15 ?. ",
    "csoulioti": "Yes exactly, with older versions of ReactJS.NET, the memory usage doesn't go up in this way. Do you have any idea of how could I test it somehow to see if the JavaScriptEngineSwitcher is the reason of that?. ",
    "markau": "I am experiencing this issue too. I note that ReactJS.NET 3.0 installed the engine switching libraries at 2.0.3 but they are now up to 2.2.0. I can only hope that helps otherwise I have wasted a lot of effort.\n@csoulioti Did you find a solution? \nIs ReactJS.NET up to a production environment?. ",
    "Nelo-cool": "Code markup loss:) Excuseme)\n. Versions? :(. ",
    "markwest51": "it gives an error on the tutorial.jsx - does not recogonize global, you take that out and then when loading the page first time it does not like window.  offending line\nvar md = new (global.Remarkable || window.Remarkable)();\n. ",
    "pepepaco": "yes thats exactly whats happening, how do I fix it? should I remove Remarkable completely? \nthanks!\n. any clue why the demos dont work? I need an example how to add third party js into the project,  thanks. great! is working now, thank you.. ",
    "vgcoder": "Hi Daniel, \nThanks for replying.\nI had that in my Index.cshtml not in layout. The exact same code works when I load as view (full page load) but when I changed it to return PartialView from Controller's action method and add the returning partial view to a div using Jquery -ajax, only html got rendered and but no react component tree. \nI changed the code to have it in layout and it still did not work.\nHere are the configurations I have: -\nBundleConfig.cs:\n bundles.Add(new BabelBundle(\"~/bundles/main\").Include(\n                                // Add your JSX files here\n                                \"~/Scripts/ParentForm.jsx\",\n                                   \"~/Scripts/TmTextBox.jsx\",\n                               // You can include regular JavaScript files in the bundle too\n                               \"~/Scripts/TmDropDown.jsx\"\n                              ));\nReactConfig.cs:\n  ReactSiteConfiguration.Configuration\n                .AddScript(\"~/Scripts/ParentForm.jsx\")\n                .AddScript(\"~/Scripts/TmTextBox.jsx\")\n                .AddScript(\"~/Scripts/TmDropDown.jsx\");\nIndex.cshtml:\n@Html.React(\"ParentForm\", new\n{\n    initialData = Model.FormData, \n})\nLayout.cshtml\n  @Scripts.Render(\"~/bundles/main\")\n    @Html.ReactInitJavaScript()\nAlso now I modified my code not to use Server rendering now and using the first method you shown in your documentation and it works now. But i would really like to have ServerSide rendering working to initialize it all. \n. ",
    "DaveKP": "Okay, so i managed to get things working. I imported React.Core and React.AspNet from the GitHub repo. In Initialiser.cs - the IsReactAssembly() method - for me the assembly names were coming in all lower case, so I changed the string comparisons inside the method. \nI haven't had time to search for why they're coming in lower case, anyone know?\nI'm messing around in VS 2017 RC at the moment, so my environment's a mess - but I'll make a pull request when I have time to sort things out. It's bedtime here!. Have those still encountering problems tried using the development version of ReactJS.net including #354 ?. @Daniel15 Yes, that diff fixed the issue for me which was using VS2017. I would expect it to work for others as well, but I never did figure out exactly why it was happening.. A while ago I wrote a diff that fixed React.NET in VS2017 for me, #354.\nI believe it's still only available in the development version, and no-one has confirmed (or refuted!) for me yet that the fix is working for anyone other than myself.\nQuoting @Daniel15 \n\nIf you want to try the development version, you can use the NuGet package server on our AppVeyor build (https://ci.appveyor.com/nuget/reactjs.net/). Instructions are available at https://reactjs.net/getting-started/download.html#development-builds\n\nIf you have the option to try the dev build @orobert91, it's worth a shot, not least because I'd like to know if it actually works!\n. ",
    "chanan": "Hi,\nI think I might have more information on this problem. I have the same exact (I am pretty sure) project (Core 1.1) in VS2015 and in VS2017 RC. I believe the only difference is that in 2017 the project is using the new csproj file format. React.Net works for me in VS2015 but in VS2017 I get the \"ReactNotInitialisedException: ReactJS.NET has not been initialised correctly. Please ensure you have called app.AddReact() and app.UseReact() in your Startup.cs file.\" message.. Yes both in VS2015 and VS2017 RC the startup and all the other files are the same. \nI cant give you a stack trace now since I screw up the csproj file somehow trying to figure out how to get ReactJS.Net to work (and eventually I moved back to VS2015 on a hunch). However, in other issues posted here someone else posted a tack trace that looks like mine (at least from memory). The issue seems to be with TinyIoC.. @Daniel15 I pasted a working code in VS2015 and the same project once upgraded to 2017 stops working. The stack trace and link to the most simple of all projects is in https://github.com/reactjs/React.NET/issues/361. @khawajaumarfarooq I am working with Core 1.1 - It works for me in VS2015 but not VS2017, can you confirm that you have the same issue and workaround?. Here is an ASP.Net Core React sample working in VS2015\nhttps://github.com/chanan/ReactCore. Upgraded the same project to VS2017 RC and I get the following again:\nReact.TinyIoC.TinyIoCResolutionException: Unable to resolve type: React.IReactEnvironment\n   at React.TinyIoC.TinyIoCContainer.ResolveInternal(TypeRegistration registration, NamedParameterOverloads parameters, ResolveOptions options)\n   at React.TinyIoC.TinyIoCContainer.Resolve[ResolveType]()\n   at React.AspNet.BabelFileMiddleware.<Invoke>d__5.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at Microsoft.VisualStudio.Web.BrowserLink.Runtime.BrowserLinkMiddleware.<ExecuteWithFilter>d__7.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.<Invoke>d__7.MoveNext()\nMicrosoft.AspNetCore.Hosting.Internal.WebHost:Information: Request finished in 171.1422ms 500 text/html; charset=utf-8. ",
    "etiennemtl": "Have the same issue here using VS2017 RC + ASP.NET Core 1.1 + ReactJS.NET 3.0, I can say that the method app.AddReact() doesn't exists in the Configure section. . My Startup.cs class is the following, but I'm still getting the same error with VS2017 RC:\n```\npublic class Startup\n{\n        public void ConfigureServices(IServiceCollection services)\n        {\n            // Add React\n            services.AddSingleton();\n            services.AddReact();\n        // Add framework services\n        services.AddMvc();\n    }\n\n    public void Configure(IApplicationBuilder app, IHostingEnvironment env, ILoggerFactory loggerFactory)\n    {\n        app.UseReact();\n        app.UseStaticFiles();            \n        app.UseMvc(routes => \n        {\n            routes.MapRoute(\n                name: \"default\",\n                template: \"{controller=Home}/{action=Index}\");\n        });\n}\n\n}\n```\nAnd I have the Tutorial.jsx  file under wwwroot\\js directory, as well has the configuration for the view from the tuturial:\n@{\n    Layout = null;\n}\n<html>\n<head>\n    <title>Hello React</title>\n</head>\n<body>\n    <div id=\"content\"></div>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/react/15.3.2/react.js\"></script>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/react/15.3.2/react-dom.js\"></script>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/remarkable/1.7.1/remarkable.min.js\"></script>\n    <script src=\"@Url.Content(\"~/js/tutorial.jsx\")\"></script>\n</body>\n</html>. ",
    "malachib": "Hi @Taritsyn - thanks for the quick response!\nYes, I have installed ChakraCore.Native.debian-x64 - to the best of my knowledge.  I have Startup.cs configured not only as described above, but also:\n```\napp.UseReact(config =>\n            {\n                // If you want to use server-side rendering of React components,\n                // add all the necessary JavaScript files here. This includes\n                // your components as well as all of their dependencies.\n                // See http://reactjs.net/ for more information. Example:\n                //config\n                //  .AddScript(\"~/Scripts/First.jsx\")\n                //  .AddScript(\"~/Scripts/Second.jsx\");\n            // If you use an external build too (for example, Babel, Webpack,\n            // Browserify or Gulp), you can improve performance by disabling\n            // ReactJS.NET's version of Babel and loading the pre-transpiled\n            // scripts. Example:\n            //config\n            //  .SetLoadBabel(false)\n            //  .AddScriptWithoutTransform(\"~/Scripts/bundle.server.js\");\n        });\n\n        app.UseStaticFiles();\n\n```\nFurthermore, my project.json has the following:\n\"React.AspNet\": \"3.0.0\",\n    \"JavaScriptEngineSwitcher.ChakraCore\": \"2.1.2\",\n    \"JavaScriptEngineSwitcher.V8.Native.win-x64\": \"2.1.1\",\n    \"JavaScriptEngineSwitcher.ChakraCore.Native.debian-x64\": \"2.1.0\",\n    \"JavaScriptEngineSwitcher.ChakraCore.Native.osx-x64\": \"2.1.0\",\n    \"JavaScriptEngineSwitcher.ChakraCore.Native.win-x64\": \"2.1.1\",\n    \"JavaScriptEngineSwitcher.Extensions.MsDependencyInjection\": \"2.0.0\",\n```\nLastly, the aforementioned exception is augmented also by this exception:\n``\nReact.TinyIoC.TinyIoCResolutionException: Unable to resolve type: React.ReactEnvironment ---> React.TinyIoC.TinyIoCResolutionException: Unable to resolve type: React.JavaScriptEngineFactory ---> React.Exceptions.VroomJsInitialisationException: Failed to initialise VroomJs. This is most likely caused by the native library (libVroomJsNative.so) being out of date or your system lacking a compatible version of V8. Please run Mono with theMONO_LOG_LEVEL=debug` environment variable for more debugging information, and refer to the ReactJS.NET Mono documentation at http://reactjs.net/guides/mono.html for further debugging hints.\nMore details: Exception has been thrown by the target of an invocation.\n   at React.JavaScriptEngineUtils.EnsureEngineFunctional[TEngine,TException](Func2 exceptionFactory)\n   at React.JavaScriptEngineFactory.GetFactory(JsEngineSwitcher jsEngineSwitcher, Boolean allowMsie)\n   at React.JavaScriptEngineFactory..ctor(JsEngineSwitcher jsEngineSwitcher, IReactSiteConfiguration config, IFileSystem fileSystem)\n   at lambda_method(Closure , Object[] )\n   at React.TinyIoC.TinyIoCContainer.ConstructType(Type requestedType, Type implementationType, ConstructorInfo constructor, NamedParameterOverloads parameters, ResolveOptions options)\n   --- End of inner exception stack trace ---\n   at React.TinyIoC.TinyIoCContainer.ConstructType(Type requestedType, Type implementationType, ConstructorInfo constructor, NamedParameterOverloads parameters, ResolveOptions options)\n   at React.TinyIoC.TinyIoCContainer.SingletonFactory.GetObject(Type requestedType, TinyIoCContainer container, NamedParameterOverloads parameters, ResolveOptions options)\n   at React.TinyIoC.TinyIoCContainer.ResolveInternal(TypeRegistration registration, NamedParameterOverloads parameters, ResolveOptions options)\n   at React.TinyIoC.TinyIoCContainer.ConstructType(Type requestedType, Type implementationType, ConstructorInfo constructor, NamedParameterOverloads parameters, ResolveOptions options)\n   --- End of inner exception stack trace ---\n   at React.TinyIoC.TinyIoCContainer.ConstructType(Type requestedType, Type implementationType, ConstructorInfo constructor, NamedParameterOverloads parameters, ResolveOptions options)\n   at React.TinyIoC.TinyIoCContainer.CustomObjectLifetimeFactory.GetObject(Type requestedType, TinyIoCContainer container, NamedParameterOverloads parameters, ResolveOptions options)\n   at React.TinyIoC.TinyIoCContainer.ResolveInternal(TypeRegistration registration, NamedParameterOverloads parameters, ResolveOptions options)\n   at React.TinyIoC.TinyIoCContainer.Resolve[ResolveType]()\n   at React.AspNet.BabelFileMiddleware.<Invoke>d__5.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at Microsoft.AspNetCore.Hosting.Internal.RequestServicesContainerMiddleware.<Invoke>d__3.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at Microsoft.AspNetCore.Server.Kestrel.Internal.Http.Frame1.d__2.MoveNext()\n```. It's Ubuntu 16.04.01 & uname produces:\nLinux vm-c131-ubuntudev 4.4.0-47-generic #68-Ubuntu SMP Wed Oct 26 19:39:52 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux\nframeworks section looks like:\n\"frameworks\": {\n    \"netcoreapp1.0\": {\n      \"buildOptions\": {\n        \"define\": [ \"DNXCORE50\" ]\n      }\n    }\n  },\nMy debian machine uname produces: Linux vm-c131-debian 3.16.0-4-amd64 #1 SMP Debian 3.16.36-1+deb8u2 (2016-10-19) x86_64 GNU/Linux. Thank you for this insight.\nFirstly, I'll ensure the .V8 is removed.\nSecondly, struggling a bit since Debian and its ever-so-antiquated packages are only up to clang 3.5 but ChakraCore wants 3.7.  Still futzing with that.  \nLastly, revisiting the Ubuntu scenario (the title issue) - any clues as to why the FileNotFoundException is occurring?. OK well I appreciate the attention and feedback - for now I am gonna do some workarounds,  Since I'm so new to react, I'm not even sure how extensively I'll be using it.  When things settle down and if I'm still in the react world, I'll have a look at AspNetFileSystem . ",
    "pablinos": "I had this same error running the dotnet docker container. I went to get the source to build a version of ChakraCore as suggested and noticed that there was a linux-x64 binary version. \nhttps://github.com/Microsoft/ChakraCore/releases\nI downloaded that and copied the libCharkaCore.so to the ~/.nuget/packages/JavaScriptEngineSwitcher.ChakraCore.Native.debian-x64/2.1.0/runtimes/debian-x64/native/ directory and it fixed it. \nWould it be worth updating the native packages so it's just a linux-x64 one and could track the official binary releases? . Hi,\nLinux version is Debian Jessie as it's the dotnet Docker image.\nThat is weird that it defaulted to the 2.1 version. Could it be to do with the project being dotnet core/tools  1.1.4?\nI'm not sure how they'd be a universal library like that either, but being 2.5 times the size, it does suggest there's a lot more in there! Perhaps they explain it if we asked the question there?. Ah, unicode and timezones, two things that have given me a lot of headaches over the years!\nI'll try installing ICU and see if the library version in the Debian package works or not. . Brilliant, thanks for that, I'll take a look!. ",
    "ORuban": "the following issue in MsieJavaScriptEngine repo may be related: Attempted to read or write protected memory issue. I cannot ignore error as it is an unhandled exception in React.AspNet.BabelFileMiddleware and pipeline stops executing\nAn unhandled exception has occurred: Unable to resolve type: React.ReactEnvironment\nReact.TinyIoC.TinyIoCResolutionException: Unable to resolve type: React.ReactEnvironment ---> React.TinyIoC.TinyIoCResolutionException: Unable to resolve type: React.JavaScriptEngineFactory ---> React.Exceptions.VroomJsInitialisationException: Failed to initialise VroomJs.. ",
    "dima117": "+1\nI have the same problem.. I suggest to remove the engine selection functionality from the package and assigning responsibility for it to the user who configures React.NET. For example, it will be similarly to the DBMS selection in the Entity Framework Core.. >You just need to ensure you register the engines before registering ReactJS.NET.\nThe problem is that the default configuration results in an error.\nI tried the following code (according to this example):\n```csharp\nJsEngineSwitcher engineSwitcher = JsEngineSwitcher.Instance;\nengineSwitcher.EngineFactories.Add(new JintJsEngineFactory());\nengineSwitcher.DefaultEngineName = \"JintJsEngine\";\nInitializer.Initialize(registration => registration.AsSingleton());\nvar container = React.AssemblyRegistration.Container;\ncontainer.Register();\ncontainer.Register();\nReactSiteConfiguration.Configuration\n  .SetReuseJavaScriptEngines(false)\n  .AddScript(\"Sample.jsx\");\n```\nAnd I had an error in this line (there is existing issue).\nI think, the error is in my code. But it's hard for me to know exactly where it is, because the configuration API uses implicit logic, which is dependent on global variables (JsEngineSwitcher).\nIt would be much easier if the engine had to be explicitly specified (and get an error if it was specified incorrectly)\nUPD. I use it in .NET Core on macOS.. Yes, it sounds reasonable. Also should keeping in mind that this will be a breaking change for the current users of the React.AspNet package.. ",
    "NuclearReactor": "I was able to replicate the issue as well. On-the-fly JSX conversion may be having issues while using react.aspnet on the latest .net core release.. ",
    "Sonywalk": "It may not be fully related too only JSX Conversion. \nRunning     @Html.ReactInitJavaScript() after I included the JSX-files says React.NET is not even initialized. Can give stacktrace later.  . Agreed. Though I got this perticular issue \"solved\"(created a project in VS for Mac) instead. Either the library is not ready, or the documentation might need more specific instruktions for initializing a projekt with ReactJS.NET. ",
    "edikep2000": "It seems this library is not ready for production and I have been stupid enough to start using it without investigating Issues. ",
    "khawajaumarfarooq": "Is there a fix for this issue yet? I am trying to use this library with .NET Standard 1.6 and it's not working due to this issue.\nIs there a workaround available?. @chanan I followed the following tutorials available on the website:\n\nhttps://reactjs.net/getting-started/tutorial_aspnet4.html\nhttps://reactjs.net/getting-started/tutorial.html\n\nI used Visual Studio 2015 for the first one, and Visual Studio Code for the second one, using the latest dotnet CLI tool. This version of the CLI tool does not generate a project.json, but instead generates the new MSBuild format for the project.\nIf you like, I can provide both solutions for investigation of this issue. I am very keen for this issue to be resolved, or indeed, if the issue is at my end, then to understand how to fix it.\nAs far as I can tell, the issue that's causing the error has already been fixed, but for some reason, the fix doesn't seem to be working. I believe it was fixed under #359, and that issue is part of release 3.0.0, but it's still broken on ASP.NET Core.\nDo you think you an prepare a sample with Core 1.1 in VS2015 amd upload it somewhere for comparison?. @chanan Any ideas?\nbump. So I have worked out a workaround for .NET Core using VS 2017 RC.\nI am using Gulp and gulp-babel to transpile the JSX files for each component to JS, and then I am using pre-transpiled JS within the Razor view to issue the call to ReactDOM.render.\nI am using Task Runner Explorer to hook up the various Gulp tasks (I have 2 main ones, minify, and clean) to the corresponding MSBuild events (minify before project build, and clean on clean). Hitting F5 in VS then ensures that JSX files are refreshed before build.\nWhen using the command line, I issue a command like gulp minify && dotnet run to start the web server.\nThe downsides of my approach are that:\n\nI can't use @Html.React(...) statements, therefore a model object in C# being passed to JavaScript needs to use something like:\n\nReactDOM.render(React.createElement(MyFancyComponent, { foo: @(Foo) }), document.getElementById('main'));\nAnd that breaks JavaScript syntax, though still works because it is valid Razor syntax.\n\nHaving to refresh JS file resulting from JSX files is less than ideal.\n\nI hope that helps. I can share further details if needed.\nReally hoping someone fixes this for .NET Core.. ",
    "Merott": "I'm using VS2015, facing the same issue with .NET 4.5. Still looking for a solution.. I'm using .NET 4.5.\nI managed to work around this issue with the help of this comment in #240.\nHere's my entire ReactConfig.cs:\n```cs\nusing React;\nusing React.TinyIoC;\nusing React.Web.TinyIoC;\nnamespace NS.Project\n{\n    public static class ReactConfig\n    {\n        public static void Configure()\n        {\n            Initializer.Initialize(AsPerRequestSingleton);\n        ReactSiteConfiguration.Configuration\n            .SetLoadBabel(false)\n            .AddScriptWithoutTransform(\"~/React/dist/server.bundle.js\");\n    }\n\n    private static TinyIoCContainer.RegisterOptions AsPerRequestSingleton(\n        TinyIoCContainer.RegisterOptions registerOptions)\n    {\n        return TinyIoCContainer.RegisterOptions.ToCustomLifetimeManager(\n            registerOptions,\n            new HttpContextLifetimeProvider(),\n            \"per request singleton\"\n        );\n    }\n}\n\n}\n```\nThen, I'm callingReactConfig.Configure explicitly from Application_Start.. ",
    "erik-nguyen": "I have the same issue with VS 2017 RC. \nAny ideas?\nThanks.. @khawajaumarfarooq \nThanks for sharing your ideas.. ",
    "EysaDun": "@Daniel15 \nbut @Html.AntiForgeryToken() will generate a input tag named __RequestVerificationToken, not a clean token value, like this:\n\nhow to insert it to my component?\n render: function () {\n        return (\n            \n\n\n\n        </form>\n    );\n}\n\n. cannot post html tag text here! oh.... @Daniel15 \nl am following https://reactjs.net/getting-started/tutorial.html.\ncould you update this arcticle for append a step with \"How to use  AutoValidateAntiforgeryToken\" attribute in ReactJs.Net on Server-side rendering.\nAnother question is i want to know how to dependence .NET Core not .NET Framework.. @dustinsoftware \nOK, thanks. ",
    "chrisfwd": "We had to incorporate AntiForgeryToken as well. We ended up doing the following:\n1 Render the antiForgeryToken hidden input to the view using razor\n@Html.AntiForgeryToken()\n2 Create an ajax service that wraps $.ajax() and adds the value of the antiForgeryToken to all your ajax requests\njavascript\nmodule.exports = (function () {\n    this.ajax = function (options) {\n        var settings = options,\n            tokenElements = document.getElementsByName(\"__RequestVerificationToken\");\n        if (tokenElements.length) {\n            settings.data = settings.data || {}; // make sure data property is available even if it's not passed in\n            settings.data.__RequestVerificationToken = tokenElements[0].value;\n        }\n        return $.ajax(settings);\n    }\n})()\n3 Import the ajax service into your react components that use ajax\nvar ajaxService = require('./ajaxService');\n4 Use like you would normally use $.ajax() but with ajaxService.ajax() instead.\njavascript\najaxService.ajax({\n    url: 'some/url',\n    data:{},\n    type: 'POST'\n})\n.success(...)\n.error(...);. ",
    "Imundy": "I've had success passing in the antiForgeryToken through props:\n@Html.React(\"SomeComponent\", new\n{\n    antiForgeryToken = Html.AntiForgeryToken().ToHtmlString(),\n}\nThen in the component I'll do something like:\nconst antiForgeryTokenContainer = document.createElement('div');\nantiForgeryTokenContainer.innerHTML = this.props.antiForgeryToken;\nconst antiForgeryToken = antiForgeryTokenContainer.firstChild.value;. ",
    "reicheltp": "Unfornuately, @Imundy 's solution does not work with ASP.NET Core as Html.AntiForgeryToken() does not have a ToHtmlString method or any similar one.\nFor ASP.NET Core the optimal solution is to aquire the token via IAntiforgery.GetAndStoreToken.\nSample\nAssume we have a method with ValidateAntiForgeryAttribute:\ncs\npublic class AccountController : Controller\n{\n    [HttpPost]\n    [ValidateAntiForgeryToken]\n    public async Task<IActionResult> Login(LoginInputModel model)\n    {\n      /* Login Logic */\n    }\n}\nUse IAntiforgery within the Index.cshtml file. This will also set http-only cookie required for antiforgery validation.\n```cshtml\n@model HomeViewModel\n@inject IAntiforgery Antiforgery\n@Html.React(\"Home\", new\n{\n    antiforgeryToken = Antiforgery.GetAndStoreTokens(Context).RequestToken\n})\n```\nNow you can use the token within your react app and pass it either as form data or Header for fetch requests:\n```jsx\n// Use as form data input\nfunction Home({ antiforgeryToken }) {\n  return (\n    \n\n       {/ More form input /}\n    \n  )\n}\n// Or use as Header for fetch\nclass Home extends React.Component {\n  onPostSomething() {\n    fetch('https://my-web.com/Account/Login', {\n      method: 'POST',\n      headers: {\n        'RequestVerificationToken': this.props.antiforgeryToken,\n        / more headers /\n      },\n      body: {/ formdata or json or whatelse /}\n    }).then( / continue ... / )\n  }\n}\n```. ",
    "danpadmore": "You're right, the ASP.NET 4 tutorial needs to be updated in the same way.\nI'll attempt to include it in this pull request.. There it is :)\nI didn't expect to do more than 1 change, so I had some more changes on a separate branch in my fork.\nI merged them also into the branch for this pull request.\nAll of the changes are related to highlighting code lines in the tutorials (core/aspnet4). ",
    "actorius": "I think problem in babel compiling. On start, resources allocated for babel compiling (peak 1gb), but real memory used after compile ~200mb (common application memory usage). \nBecause application used small people count, appPool goes sleep before recycle memory. Therefore very slow after wakeup pool (1-3 min starting(compiling)).\nI'm reparate frontend react component, now .Net application have only compiled react app. Memory usage ~200Mb.... ",
    "ashkansiroos": "Thanks :). I have similar problem. The IIS process grows very large, even more than 1GB. . @Taritsyn \nHi, I've set up a set of DebugDiag rules for checking memory leak.  To do that I've just ran 50 threads to call 20 of my pages and retry after receiving the answer for 5 minutes.\n++\nFirst I've set up engine switcher to use ChakraCore: The spead was OK, but the memory used by w3wp grown to more than 1 GB specially after I tried to recycle the Application pool but my dump shown me \n\nWARNING - DebugDiag was not able to locate debug symbols for \\ChakraCore.DLL, so the reported function name(s) may not be accurate.\n\\ChakraCore.DLL is responsible for 89.84 MBytes worth of outstanding allocations. The following are the top 2 memory consuming functions:\nChakraCore+9bf1c: 85.88 MBytes worth of outstanding allocations.\nChakraCore+97730: 2.9 MBytes worth of outstanding allocations\n\nSaying after duration of 00:02:43  (2 minutes) there are 6,353 allocation(s) for ChakraCore  which takes 11.19 MBytes and after duration of 00:04:23 (1:30 minutes later) there are 15,633 allocation(s) or ChakraCore  which takes 36.49 MBytes which means that it is growing slowly\nAfter 18 minutes 107.2 MBytes of the memory has been allocated to ChakraCore with 25,192 allocations.\n\nTop 5 functions by allocation count\nChakraCore+976f0  18,802 allocation(s)\nChakraCore+97730  3,108 allocation(s)\nChakraCore+9769f  1,023 allocation(s)\nChakraCore+9c19d  770 allocation(s)\nChakraCore+9bd5e  654 allocation(s)\nTop 5 functions by allocation size\nChakraCore+9bf1c  102.75 MBytes\nChakraCore+97730  3.28 MBytes\nChakraCore+976f0  700.35 KBytes\nChakraCore+9769f  306.66 KBytes\nChakraCore+9bd5e   102.19 KBytes\nFunction details\nFunction   ChakraCore+9bf1c \nSource Line  \nAllocation type   Virtual memory allocation(s) \nAllocation Count   654 allocation(s) \nAllocation Size   102.75 MBytes \nLeak Probability   85% \nCall stack sample 1\nAddress   0x00000000`00000001 \nAllocation Time   00:05:13 since tracking started \nAllocation Size   128 KBytes \nFunction\nDestination\nLeakTrack+22a1f  \nChakraCore+9bf1c  \nChakraCore+9bdc1  \nChakraCore+139192  \nChakraCore+138e4e  \nChakraCore+1383f8  \nChakraCore+776a1  \nChakraCore+a654a  \nChakraCore+a6189  \nChakraCore!JsGetPropertyIdFromName+1296  \nChakraCore!JsGetPropertyIdFromName+1384  \nChakraCore!JsGetPropertyIdFromName+993  \nChakraCore!JsDisposeRuntime+12aa1  \nkernel32!BaseThreadInitThunk+14  \nntdll!RtlUserThreadStart+21    \nCall stack sample 6\nAddress   0x00000000`00000001 \nAllocation Time   00:05:40 since tracking started \nAllocation Size   1024 KBytes \nFunction\nDestination\nLeakTrack+22a1f  \nChakraCore+9bf1c  \nChakraCore+9bdc1  \nChakraCore+139192  \nChakraCore+138b45  \nChakraCore+99b97  \nChakraCore+18240e  \nChakraCore+182599  \nChakraCore+182734  \nChakraCore+bcd05  \nChakraCore+10d8f9  \nChakraCore+10d815  \nChakraCore+1227d2  \nChakraCore+17ccda  \nChakraCore+17ca8b  \nChakraCore+17cbb3  \nChakraCore+17ca05  \nChakraCore+caf91  \nChakraCore+b3d16  \nChakraCore+b3ec7  \nChakraCore+b3e2d  \n0x24827F07745    \n. Then I've changed the engineswitcher to use V8. The results was very bad :( \nThe site was very slow and it was drinking the memory like if it is beer :\\ and there was some exceptions for some reason. V8 is using 5.68 GBytes of memory with only 200 allocations.\n\\v8-x64.dll is responsible for 5.22 GBytes worth of outstanding allocations. The following are the top 2 memory consuming functions:\nv8_x64!v8::Extension::dependencies+73fd: 5.18 GBytes worth of outstanding allocations.\nv8_x64!v8::Extension::dependencies+877e: 42.5 MBytes worth of outstanding allocations.\nThis was detected in w3wp.exe__dev.berendsen.com__PID__20824__Date__06_29_2017__Time_04_46_35PM__237__Leak Dump - Private Bytes.dmp\n\\v8-x64.dll is responsible for 5.73 GBytes worth of outstanding allocations. The following are the top 2 memory consuming functions:\nv8_x64!v8::Extension::dependencies+73fd: 5.68 GBytes worth of outstanding allocations.\nv8_x64!v8::Extension::dependencies+877e: 46.75 MBytes worth of outstanding allocations.\nThis was detected in w3wp.exe__dev.berendsen.com__PID__20824__Date__06_29_2017__Time_04_47_20PM__267__Leak Dump - Virtual Bytes.dmp\nNumber of allocations   103,860 allocations \nTotal outstanding handle count   1,670 handles \nTotal size of allocations   5.61 GBytes \nclr 62,755 allocation\nwebengine4 20,273 allocation(s)\nv8_x64  211 allocation(s)\nv8_x64 5.22 GBytes\nwebengine4  316.09 MBytes\nclr  79.24 MBytes\nVirtual memory Globals.Manager 5.28 GBytes\nModule details for v8_x64\nModule Name   v8_x64 \nAllocation Count   211 allocation(s) \nAllocation Size   5.22 GBytes \nv8_x64!v8::Extension::dependencies+73fd  191 allocation(s)\nv8_x64!v8::Extension::dependencies+877e  20 allocation(s) \nv8_x64!v8::Extension::dependencies+73fd  5.18 GBytes\nv8_x64!v8::Extension::dependencies+877e  42.5 MBytes \nFunction details\nFunction   v8_x64!v8::Extension::dependencies+73fd \nSource Line  \nAllocation type   Virtual memory allocation(s) \nAllocation Count   191 allocation(s) \nAllocation Size   5.18 GBytes \nLeak Probability   84% \nCall stack sample 1\nAddress   0x00000000`00000000 \nAllocation Time   00:30:00 since tracking started \nAllocation Size   512 MBytes \nFunction\nDestination\nLeakTrack+22a1f  \nv8_x64!v8::Extension::dependencies+73fd  \nv8_x64!v8::Extension::dependencies+312b3  \nv8_x64!v8::Extension::dependencies+31501  \nv8_x64!v8::ExternalResourceVisitor::VisitExternalString+275d4  \nv8_x64!v8::ExternalResourceVisitor::VisitExternalString+1b84  \nv8_x64!v8::Isolate::New+198  \nClearScriptV8_64+11f2a  \nClearScriptV8_64+114b8  \n0x7FFAEBED41A8    \nCall stack sample 2\nAddress   0x00000000`0012d000 \nAllocation Time   00:30:09 since tracking started \nAllocation Size   1.18 MBytes \nFunction\nDestination\nLeakTrack+22a1f  \nv8_x64!v8::Extension::dependencies+73fd  \nv8_x64!v8::Extension::dependencies+2c8d7  \nv8_x64!v8::Extension::dependencies+2cc08  \nv8_x64!v8::Extension::dependencies+2cece  \nv8_x64!v8::ExternalResourceVisitor::VisitExternalString+154ab  \nv8_x64!v8::ExternalResourceVisitor::VisitExternalString+15603  \nv8_x64!v8::Isolate::NumberOfHeapSpaces+10d50  \nv8_x64!v8::Isolate::NumberOfHeapSpaces+11f4f  \nv8_x64!v8::Isolate::NumberOfHeapSpaces+1202a  \nv8_x64!v8::FunctionTemplate::NewRemoteInstance+467  \nv8_x64!v8::String::NewFromTwoByte+138  \nClearScriptV8_64+41c7  \n0x7FFAEC1CBA1B    \nFunction   v8_x64!v8::Extension::dependencies+877e \nSource Line  \nAllocation type   Virtual memory allocation(s) \nAllocation Count   20 allocation(s) \nAllocation Size   42.5 MBytes \nLeak Probability   95% \n\n\n. ",
    "starwed": "\nRight now you need to use something like Webpack or Browserify if you want to use JS modules.\n\nSince they're in common use now, perhaps a quick note about this should be added to the docs/readme?. ",
    "matthew-a-thomas": "\nperhaps a quick note about this should be added to the docs/readme?\n\n~Documentation would be great to have. Any pointers?~\nJust found it: https://reactjs.net/guides/webpack.html. ",
    "lilwayne470": "Havin the same issue, can someone help us.. ",
    "yamachu": "Maybe your dotnet core cli tools version is 1.0.0-rc4-004616 or after.\n1.0.0-rc4-004616 or after use msbuild with .cproj as build system, but React.NET use project.json and .xproj .\nAs you can see this repo's global.json is pinning .net core sdk version to 1.0.0-preview2-003121 \nSo I think you should install older dotnet core cli and deactivating newer one for complete build task.\n. ",
    "Mythreyeehr": "No it is not. Sorry to post it here. A wrong forum . ",
    "billschen": "I have the save problem when deploy the  mvc application. \nMy write code  in  vs2013,use mvc 4.0 . thank you @cynion23 ,but the solution doen't work for me.\nI install VS 2013,vs2015 C++ redistributeables \uff0cbut the error happen still.\nin my bin folder ,the relative files:\n\nJavaScriptEngineSwitcher.ChakraCore.dll\nJavaScriptEngineSwitcher.Core.dll\nJavaScriptEngineSwitcher.Msie.dll\nJavaScriptEngineSwitcher.V8.dll\nJSPool.dll\nReact.Core.dll\nReact.Web.dll\nReact.Web.Mvc4.dll\nwhen I delete JavaScriptEngineSwitcher.Msie.dll,the error become \"System.IO.FileNotFoundException\"\n System.IO.FileNotFoundException: \u672a\u80fd\u52a0\u8f7d\u6587\u4ef6\u6216\u7a0b\u5e8f\u96c6\u201cJavaScriptEngineSwitcher.Msie, Version=2.3.2.0, Culture=neutral, PublicKeyToken=c608b2a8cc9e4472\u201d\u6216\u5b83\u7684\u67d0\u4e00\u4e2a\u4f9d\u8d56\u9879\u3002\u7cfb\u7edf\u627e\u4e0d\u5230\u6307\u5b9a\u7684\u6587\u4ef6\u3002\nbut when I delete ClearScript.dll ,the error is same as you description.\nso ,i guess the IIS use MSIE but not ClearScript .\nI don't know how to  the switch to V8 \nthank you~. @cynion23 thank you suggestion! I'm not sure my install package steps is write\nInstall [React.Web.Mvc4]https://www.nuget.org/packages/React.Web.Mvc4/3.0.1)\nInstall ClearScript.V8 error happan ! version confliction?\nRemove  JavaScriptEngineSwitcher.V8 error  because it is a Dependency of   React.Core\n\nmy current solution is:\n1\u3001use  [React.Web.Mvc4]https://www.nuget.org/packages/React.Web.Mvc4/3.0.1) in dev machine .\n2\u3001run mvc app to transform jsx file to normal js file\n3\u3001refer to normal js file when deployed\nI try two day to  solve  this problem but unlucky to find the right solution ~ \nthak you !\n. @cynion23  thank you for your quick reply! Could you tell me you email address .I will send all code to you.. @cynion23 \ud83d\udc4d \uff0cThanks a lot ,I solve the problem just now\nafter a lot of try\uff0cI solve my problem just now\uff0cmake my asp.net mvc project with React.Web.Mvc4 and V8 work on dev enviroment (vs2013 and vs2015) and IIS 7.5. \nnext is my experience:\n\nmake sure install Visual C++ Redistributable for Visual Studio 2015 ,I work on 64bit windows,but I install 32bit redistributable also\ninstall reactjs.net by command Install-Package React.Web.Mvc4\u3002\nInstall  JS Engine Switcher: V8 for Windows (x64)  the package author is @Taritsyn \nInstall JS Engine Switcher: V8 for Windows (x86)  the package author is @Taritsyn \nfollow the ClearStrip Read Me instruction\uff1aFor ASP.NET projects, we recommend that you add these assemblies( these assemblies can be found in ..\\packages\\JavaScriptEngineSwitcher.V8.Native.win-x64.2.2.0\\runtimes\\win7-x64\\native and ..\\packages\\JavaScriptEngineSwitcher.V8.Native.win-x86.2.2.0\\runtimes\\win7-x86\\native )  as content  files at the root of your web application and set their \"Copy to Output  Directory\" properties to \"Do not copy\". Like this:\n \nAdd one line code to d:\\documents\\visual studio ..\\App_Start\\ReactConfig.cs ReactSiteConfiguration.Configuration.SetAllowMsieEngine(false);\n. @Taritsyn,  thank you for you suggetion. I will try tomorrow.. @Taritsyn I have install  all  c++resditributable(2013 32bit,2013 64bit ,2015 23bit ,201564bit) .\nI create a console project and rum pm command\nInstall-Package ClearScript.V8\nand run  copy code copy  from clearscript  ,no error the snapshot like this \n\n\nbut when I create a mvc 4 project and first  run command Install-Package React.Web.Mvc4 to use React.NET \nsecond run Install-Package  ClearScript.V8   command  the command fail\nI guess the reason is:\nthe verson of  ClearScript confliction.\nReact.Web.Mvc4 use version 5.4.8 \n ClearScript.V8    use version 5.4.7\nmy be i don't nee to  install  ClearScript.V8   but install JavaScriptEngineSwitcher.V8.Native.win-x64??. @Taritsyn \ud83d\udc4d \nafter a lot of try\uff0cI solve my problem just now\uff0cmake my asp.net mvc project with React.Web.Mvc4 and V8 work on dev enviroment (vs2013 and vs2015) and IIS 7.5. \nnext is my experience:\n\nmake sure install Visual C++ Redistributable for Visual Studio 2015 ,I work on 64bit windows,but I install 32bit redistributable also\ninstall reactjs.net by command Install-Package React.Web.Mvc4\u3002\nInstall  JS Engine Switcher: V8 for Windows (x64)  the package author is @Taritsyn \nInstall JS Engine Switcher: V8 for Windows (x86)  the package author is @Taritsyn \nfollow the ClearStrip Read Me instruction\uff1aFor ASP.NET projects, we recommend that you add these assemblies( these assemblies can be found in ..\\packages\\JavaScriptEngineSwitcher.V8.Native.win-x64.2.2.0\\runtimes\\win7-x64\\native and ..\\packages\\JavaScriptEngineSwitcher.V8.Native.win-x86.2.2.0\\runtimes\\win7-x86\\native )  as content   files at the root of your web application and set their \"Copy to Output  Directory\" properties to \"Do not copy\". Like this:\n \nAdd one line code to d:\\documents\\visual studio ..\\App_Start\\ReactConfig.cs ReactSiteConfiguration.Configuration.SetAllowMsieEngine(false);\n\n@Taritsyn \ud83d\udc4d thank you for your quick reply~\n. @Taritsyn~  I try not copy these assemblies to the root of my web application\u3002but it fail\nI willl try again later\n. @Taritsyn  I try again just now, if i don't copy files to  the root folder  ,error happen like\n.. @Taritsyn.my be my csprj file contains errors cause by React.NET.because I tested on a new mvc 4 project.\nI will try steps later.. I have the same issue today(2018/5/26).\nI have Install-Package React.Web.Mvc4 -Version 3.3.0\nan the .NET Version is 4.5.2 ,Use VS 2013 Update 5. ",
    "cynion23": "I deployed the VS 2015 C++ redistributables (x64 and x86) so that it could use ClearScript instead of MSIE and that fixed the problem for me. . you need to add the nuget package ClearScript.V8 to your project. When you publish it, it should add a couple DLL's into the x64 and x86 folders within the bin folder. You might also have to remove the nuget package JavaScriptEngineSwitcher.V8 then reinstall it. This will force your project to update to the ClearScript 5.4.8 library since it comes with 5.4.7 by default. I can help you get it working if I can see the code or atleast the relevant parts so I can see what libraries are put of whack. ",
    "nguyenitt2005": "I have had this problem and I 've passed it.\naccording to the readme.txt in the JavaScriptEngineSwitcher.V8.2.0.0, it needs msvcp120.dll and msvcr120.dll to run. You must download Visual C++ Redistributable Packages for Visual Studio\n   2013 (http://www.microsoft.com/en-us/download/details.aspx?id=40784) and install it. I may be that, you copy those file to distributed bin folder.\nAnd my problem solved.. ",
    "prh7": "How can you convince me?. I am going to use React.NET. Can you provide/suggest me the sample folder architecture you have implemented?. ",
    "joalcava": "I feel the project is abondoned or receives very little maintenance. However is just my impresi\u00f3n.. I'm glad to hear that the project is active, I think I'm not at the level but I'll try to help. For me this is a great project.. ",
    "mashaal": "We are using React.NET on Mazda AU \ud83d\udc28. ",
    "tinngv": "Thanh you. ",
    "damanptyltd": "@fgaleano \nThe issue is more of a 'Gotcha' then a bug. Default behaviour for Babel is to export default ES6 modules under export.default, so when requiring the code you'll need to indicate this with ('PageContent\").default.\nTo revert this functionality so it works correctly with es6, install the following babel plugin.\nhttps://www.npmjs.com/package/babel-plugin-add-module-exports. This is great Dustin, would love to see this merged into a release.. ",
    "dylandupreez": "I've managed to fix this by hacking the generated script. I started by getting the string generated. Extracting the actual script. Removing the ReactDOM.render and React.createClass methods. Then using the remaining, code I found the elements that were contained the server rendered components, emptied them and the client rendered the elements again. Dirty hack I know, but it solves the problem. See code snippet below:\n`import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { assign } from \"lodash\";\ndeclare var initScript: string;\ndocument.addEventListener(\"DOMContentLoaded\", (e) => {\n    cleanScript(initScript);\n});\nconst cleanScript = (escapedScript:string) => {\n    let cleanedScript = escapedScript.replace(/<\\/?script>/g, '');\n    cleanedScript = cleanedScript.replace(/ReactDOM.render(/g, \"\");\n    cleanedScript = cleanedScript.replace(/React.createElement(/g, \"\");\n    cleanedScript = cleanedScript.replace(/),/g, \",\");\n    cleanedScript = cleanedScript.replace(/))/g, \")\");\n    cleanedScript = cleanedScript.replace(/\"/g, \"\\\"\");\n    cleanedScript = cleanedScript.replace(/;$/, \"\");\n    let componentStrings = cleanedScript.split(\";\");\n    componentStrings.forEach(string => {\n        let scriptParts = string.split(\", \");\n        reRenderReactComponent(scriptParts);\n    })\n}\nconst reRenderReactComponent = (scriptParts: Array) => {\n    const component = eval(scriptParts[0]);\n    const props = JSON.parse(scriptParts[1]);\n    const element = eval(scriptParts[2]) as HTMLElement;\n    element.innerHTML = \"\";\n    ReactDOM.render(React.createElement(component, assign({},props), null), element);\n}`. Hi, yes it is strange. We are using Babel and Webpack, however it seems unlikely that it is related since all the same components work fine when client side rendered in IE. As I mentioned I have found a way to get it working, albeit in a very hackey way, and the project goes live tomorrow so that'll have to do for now. I will fork the repo and try figure out what is causing this. \nOne thing I'm not sure about is whether I need to include the IE rendering engine in the server side config since I am only using the V8 engine. Could this be the issue? If so does the server rendering engine figure when to use this renderer or will it always use that instead of V8?. ",
    "srmagura": "Here's what I did to solve the same problem. My top-level react components adds a data-title attribue to the outermost <div>, and the server-side C# parses that title out and puts in the <head>. May not be ideal, but it works.\nvar componentHtml = Html.React($\"Views.{Model.View}.Page\", new { model = Model.ViewModel }).ToString();\n\nstring title;\n\nif (ReactSiteConfiguration.Configuration.UseServerSideRendering)\n{\n\n    // Second div tag has an attribute data-title containing the title for the page\n    var withoutReactDiv = componentHtml.Substring(componentHtml.IndexOf('>') + 1);\n    var secondDiv = withoutReactDiv.Substring(0, withoutReactDiv.IndexOf('>') + 1);\n    var divWithClosing = secondDiv + \"</div>\"; // Get just the tag we want so we don't have to parse everything\n    var xelement = XElement.Parse(divWithClosing);\n    var titleAttribute = xelement.Attributes().FirstOrDefault(a => a.Name.ToString().Equals(\"data-title\", StringComparison.OrdinalIgnoreCase));\n\n    if (titleAttribute == null)\n    {\n        throw new Exception(\"Could not find data-title attribute. Check that all components in your page are within the <Layout>.\");\n    }\n\n    title = titleAttribute.Value;\n}\nelse\n{\n    title = null;\n}. Thank you Daniel! After manually adding several binding redirects and references, I have server rendering working with the latest versions of all of the packages. . I have been getting the same error, but only in Azure after pushing changes with web deploy. This is with server side rendering enabled. The error is intermittent, affecting about 1/3 of requests. I never get this error in development.\n\nIs it possible that the JavaScript engines are not getting destroyed+recreated when I do a web deploy? I am also using V8.. By the way, my error is resolved by restarting the App Service.. Thanks dustin and Taritsyn. I upgraded all relevant packages to the latest versions, and I am unable to reproduce the exception (still using V8). I wouldn't take this to mean that it is definitely fixed though, since it is so sporadic.\nMy Azure web app runs on a Standard S1 VM (1 CPU and 1.5 GB RAM).\n. Hey @SiamAbdullah, even though I wasn't immediately able to reproduce the problem after I upgraded V8, I did continue to get the exception sporadically. \nI ended up following @dustinsoftware's suggestion and switched to ChakraCore. I have not had any problems since then.. ",
    "svillamonte": "Wow, that was fast. I'll keep on digging, but thanks a lot for your quick reply!. That was spot on @jslatts , thanks! Guess I need to read quite a lot of how Webpack works first, before trying to get these kind of things to work.\nWould it be possible for you to share a public repo with all those tools living together, so we can have for future reference? Or at least your webpack.config.js file?\nAnyways, thanks again to both of you!. Thanks again, that should prove handy!. ",
    "rshackleton": "I'm looking into using this and one of the main issues I am having is combining HMR and SSR together. I am able to build the assets beforehand and then run the website and everything works fine. However, when using webpack-dev-server with HMR the assets are not written to disk and therefore I get this error:\nCould not find a part of the path 'C:\\...\\ReactTest\\build\\main.server.bundle.js'.\n@jslatts, you mentioned having HMR and SSR working together, I've taken a look at your Gist but can't see any way of avoiding this issue other than using webpack --watch and losing HMR. \nAre you able to add entrypoint examples to your Gist as well?\nDo you reference react, react-dom and react-dom/server in there?. Also the use of @Html.ReactInitJavaScript() means we cannot load scripts with defer or async as ReactDOM needs to be available - is there a workaround for this?. ",
    "ktmanikanta": "Hi @WilkaH ,\nIn Tutorial.jsx ->\nReactDOM.render(<\n    CommentBox url=\"/comments\" ,\n/>\n    document.getElementById('content')\n);\nIn HomeController.cs - >\n[Route(\"comments\")]\n        [ResponseCache(Location = ResponseCacheLocation.None, NoStore = true)]\n        public ActionResult Comments()\n        {\n            return Json(_comments);\n        }\nPlease let me know if you need more details.. I did not include componentWillMount call, which is mentioned later in the tutorial. After adding this, the data is loading from server. Thanks all for your comments.. ",
    "cuong-nguyen": "Thank you @Daniel15, it makes sense now.. ",
    "aviklai": "Yes - if I change to jsFile.jsx, it works.\nIt just doesn't work on files with the .js extension.\nDo I need some configuration to make it work on .js files as well?\nThe issue occures only when in Debug configuration when bundles aren't created (because bundling is not enabled).. ",
    "will-e-yams": "This happens to me when I'm creating the bundles, i.e. BundleTable.EnableOptimizations = true; and building locally.\nI spied this in the web.config and tried path=\"*.js*\" and path=\"*.js\" both to no avail.\n<system.webServer>\n    <handlers>\n        <remove name=\"Babel\" />\n        <add name=\"Babel\" verb=\"GET\" path=\"*.jsx\" type=\"React.Web.BabelHandlerFactory, React.Web\" preCondition=\"integratedMode\" />\n   </handlers>\n</system.webServer>. ",
    "andreymir": "Posted the issue to ClearScript https://clearscript.codeplex.com/workitem/120. Hi Andrey! \nThanks for your help! Initially I tried with older version but it has the same issue. Now I'm using the latest version available 2.2.0.\n\n. No, still have the same exception.\nHowever, there is a theory it could be a memory limit issue. Someone suggested that V8 could crash if it could not allocate enough memory\n\nAnother possibility is that the V8 runtime is too constrained to complete startup. Are you using V8RuntimeConstraints to specify memory usage limits?\nAlso, could it be that Docker is imposing various limits on your application?\nhttps://clearscript.codeplex.com/workitem/120\n\nI'm going to check today if there are options in docker related to memory and will see if it fixes the issue.. I think we could close the issue. I did some testing today and it seems that it was a memory limit issue. . ",
    "hanssonfredrik": "Having the same problem. Anyone found a solution for this yet?\nRunning React.NET 3.0.1, JavaScriptEngineSwitcher 2.2 and using Visual Studio 2017\nBtw. It worked for me as well to downgrade to React.NET 2.5, even if it sucks.. I haven't got a single crash since I downgraded. It does not sound like a great fix if it still hangs... . ",
    "jyee117": "I'm running into the same issue. My .NET Core 1.1 web application works locally, but throws an exception when published:\nReactEngineNotFoundException: No usable JavaScript engine was found.\nPlease install a JavaScript engine such as React.JavaScriptEngine.ClearScriptV8 (on Windows) or React.JavaScriptEngine.VroomJs (on Linux and Mac OS X).\nRefer to the ReactJS.NET documentation for more details.\nSince it seems to be an issue with the JavaScript engine, I thought adding .DisableServerSideRendering() to app.UseReact(config => { }) might be a work around, but the exception occurs with or without server side rendering.\nI think we may need to do something along the lines of this article, but the last few steps are outdated: http://www.samulihaverinen.com/web-development/dotnet/2016/01/19/how-to-run-clearscript-v8-javascript-engine-in-azure/. I was able to get the application working when published to Azure using a combination of these guides:\nhttp://www.samulihaverinen.com/web-development/dotnet/2016/01/19/how-to-run-clearscript-v8-javascript-engine-in-azure/\nhttps://github.com/Taritsyn/JavaScriptEngineSwitcher/wiki/Registration-of-JS-engines\nFrom the first guide, I installed dependencies separately:\nUninstall-Package React.AspNet\nInstall-Package JavaScriptEngineSwitcher.Core\nInstall-Package JavaScriptEngineSwitcher.Msie (May not be needed)\nInstall-Package JSPool\nInstall-Package JavaScriptEngineSwitcher.ChakraCore\nInstall-Package JavaScriptEngineSwitcher.ChakraCore.Native.win-x64 (Selected native implementation)\nInstall-Package Microsoft.ChakraCore (I think this is key to enabling ChakraCore on the server)\nInstall-Package React.AspNet -IgnoreDependencies\nFrom the second guide, I installed a package to enable JavaScriptEngineSwitcher configuration in .NET Core 1.X:\nInstall-Package JavaScriptEngineSwitcher.Extensions.MsDependencyInjection\nIn Startup.cs ConfigureServices():\nservices.AddJsEngineSwitcher(options => options.DefaultEngineName = ChakraCoreJsEngine.EngineName).AddChakraCore();. ",
    "andrewwang1tw": "\nI was able to get the application working when published to Azure using a combination of these guides:\nhttp://www.samulihaverinen.com/web-development/dotnet/2016/01/19/how-to-run-clearscript-v8-javascript-engine-in-azure/\nhttps://github.com/Taritsyn/JavaScriptEngineSwitcher/wiki/Registration-of-JS-engines\nFrom the first guide, I installed dependencies separately:\nUninstall-Package React.AspNet\nInstall-Package JavaScriptEngineSwitcher.Core\nInstall-Package JavaScriptEngineSwitcher.Msie (May not be needed)\nInstall-Package JSPool\nInstall-Package JavaScriptEngineSwitcher.ChakraCore\nInstall-Package JavaScriptEngineSwitcher.ChakraCore.Native.win-x64 (Selected native implementation)\nInstall-Package Microsoft.ChakraCore (I think this is key to enabling ChakraCore on the server)\nInstall-Package React.AspNet -IgnoreDependencies\nFrom the second guide, I installed a package to enable JavaScriptEngineSwitcher configuration in .NET Core 1.X:\nInstall-Package JavaScriptEngineSwitcher.Extensions.MsDependencyInjection\nIn Startup.cs ConfigureServices():\nservices.AddJsEngineSwitcher(options => options.DefaultEngineName = ChakraCoreJsEngine.EngineName).AddChakraCore();\n\nThis save me, thanks.. ",
    "cw-gawdeprasad": "Even I have observed the same. Also I have noticed that I need to manually restart the AppPool every time I release something new for the site or I make Config changes. Otherwise the memory consumed by the IIS process keeps increasing. . I worked on it further and figured out that ReactEnvironment will not be available when ReactConfig.Configure() is executing so I moved the statement to resolve IReactEnvironment within App_Start() of  Gobal.asax and it is working fine on my local box (Windows 8 .Net 4.5.2 framework) but when I move it to the testing machine (Windows Server 2008 R2 .Net 4.5.2), it gives following exception\n\nI checked it on Server 2012 and 2016 as well, where it works fine but only 2008 seems to have some issues which I am not able to figure out yet. Luckily all production servers are on Server 2016 but for testing I have disabled ReactJs.Net till I figure out the issue.\nYou can check my sample code at link1\nAny direction where I can look into would be of great help.. Thanks a lot @Taritsyn . I should have first read your article. IE is the culprit. . It's a mistake @Taritsyn . I had copied the code earlier from some online solution to make V8 work with the new libraries. Just checked that it's useless to do this. Thanks for pointing out. But do you think that this is causing the issue?. Sure will try with this. But do you think that max 15 engines will be able to handle the load of 8000 render requests/ minute? I will also do the load testing to check the same. Any inputs in handling the things better would be of great help.. I will do some load-testing with the settings you have provided and will update it here. It will be good learning and I second the thought that I should not create more than 25 engines in a pool.. @Taritsyn I have set the minsize to 3 and max size to 20 but I am still getting the errors (twice a day). The RAM for the Server is 8GB and is underutilized. Do you think something else is the issue?. The recursion is not there for sure as when I run the code for the same component with the same rout for which issue came, it runs fine. Also the issue is intermittent, does not reproduce all the time. I wanted to know if RAM is the only possible culprit if there is no Recursion?. I checked both these pages before creating an issue here. For sure there is no recursion problem in the code as I logged the component and the URL for the which the issue came up and tried reproducing the same with the same to render the same URL and component but it did not reproduce. I also did the load testing where I set the max engines to 100 and tried to fill up the RAM but even then the error did not reproduce. So I am wondering as what's the cause. . @Daniel15 @Taritsyn I changed the engine to ChakraCore (1.5.2) using JavaScriptEngineSwitcher.ChakraCore and the problem has disappeared but not I am seeing that Chakra eats memory in some cases and the memory consumption goes up to 3GB. I never had this issue with V8. Any suggestions on why this might happen? Also the consumption is not consistent. It happens 3/4 times a week when the w3wp process takes around 3GB memory. . ",
    "hengsoheak": "I think for node or react native or react js we should deploy minimum 1Gb of RAm. ",
    "congaductq": "I tried to run the tutorial code (https://github.com/reactjs/React.NET/tree/master/tutorial-code), and surprisingly I faced to the same problem with only one request sent.\nRun on Windows 10 and Visual Studio 2017.\n\nAny solution for the tutorial code?. ",
    "a40637francisco": "The V8 package does not work with core 1.0 in VS2017.. ",
    "mattgross76": "Well, I was able to solve the local issue by adding a bit to my project file regarding which javascript engine to use based upon .net framework.\nNOTE, I am still receiving the same error once deployed to Azure.  Is there something special we need to do to make the solution work for .NET Core applications in Azure?. @Taritsyn Thank you for the article and for the many nuget packages you have developed.  I read it and have tried a few things, but still have the issue in Azure running a .NET Core 1.1 application.  I am going to try to use Chakra instead of V8 to see if that makes a difference.  \nDo you have a recommendation regarding which engine to use with .NET Core 1.1 and Windows Azure?  I'm having trouble finding documentation on that particular use case.\nThanks!\nMatt. @Taritsyn Thank you so much!  I think it is fixed now.  My small experiment is at least now working within Azure.  That second link regarding the \"registration of JS engines in ASP.NET Core 1.X\" was the key!\nI added the following code to the Startup class, and it works now:\nservices.AddJsEngineSwitcher(options =>\n                options.DefaultEngineName = ChakraCoreJsEngine.EngineName\n            )\n                .AddChakraCore()\nFor now, I am holding off on the other options.\nThanks again.  I will close the issue.. ",
    "JoshuaKGoldberg": "@mattgross76 what was the bit you added to your project file?. @tantainguyen can you post the full error stack, including any inner error?. Great!\nFor future reference: this helped me with similar issues. https://github.com/reactjs/React.NET/issues/409. > Of course this means that it needs a bit more configuration rather than mostly working out-of-the-box, but perhaps that's worth it?\nMaybe. Similar to the existing logic, can it try at runtime to load the .NET-version-appropriate DLL as needed?. Note: to get the rest of the installs running in the PackageRestore task, I commented out the dotnet restores in build.proj:\n<Target Name=\"RestorePackages\" DependsOnTargets=\"Clean;UpdateVersion\">\n        <!-- NuGet packages for \"legacy\" projects (eg. React.Samples.Mvc4) -->\n        <!-- <Exec\n            WorkingDirectory=\"$(MSBuildProjectDirectory)\"\n            Command=\"tools\\NuGet\\nuget.exe restore $(SolutionFile)\"\n        /> -->\n        <!-- NuGet packages for modern .csproj projects -->\n        <!-- <Exec\n            WorkingDirectory=\"$(MSBuildProjectDirectory)\"\n            Command=\"dotnet restore $(SolutionFile) /p:Version=$(VersionString)\"\n        /> -->. > ```\n\nThe imported project\n\"C:\\Program Files\\dotnet\\sdk\\2.0.2\\Microsoft\\VisualStudio\\v10.0\\WebApplications\\Microsoft.WebApplication.targets\" \nwas not found\n```\n\nThis actually exists in two locations on my machine:\n \"C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\MSBuild\\Microsoft\\VisualStudio\\v15.0\\WebApplications\\Microsoft.WebApplication.targets\"\n \"C:\\Program Files (x86)\\MSBuild\\Microsoft\\VisualStudio\\v14.0\\WebApplications\\Microsoft.WebApplication.targets\". Users would now be required to set the default factory on their own. In a subsequent change, I'd like to add that logic back in with just the JavaScriptEngineSwitcher APIs. @Daniel15 what are your thoughts on where that should go, if anywhere? Collecting the comments from #456:\n A new IJavaScriptEngineChooser Func that returns the name of the preferred engine\n Conditionally set it based on .NET version at runtime (this as the default IJavaScriptEngineChooser?)\n* Nowhere - make them do it on their own! (breaking change?). Thanks! I'll close this one :) ran out of time to investigate... If I have time, sure. No promises though :(\nAssuming this works, what would you prefer as a way of merging it in? Would a PR from me go against master, or a next branch, or...?. > AjaxMin\nThat library is the worst.\nSince Cassette isn't being updated anymore, would you be willing to move its sample to a new repository?. ReferenceError: Map is not defined [C:\\projects\\react-net\\src\\React.Sample.Mvc4\\React.Sample.Mvc4.csproj]\nC:\\projects\\react-net\\src\\React.Sample.Mvc4\\TransformBabel.proj(5,3): error MSB4018: at React.Core.Resources.react.generated.min.js:4:69\nI don't see why this is happening... no plans to investigate on my end, but I'll leave the PR open for visibility. Sorry :). @daniel15 oh dear! Do you have a link for that? I'll need to read up.. Whoohoo, thanks! \u2728\n@dustinsoftware is there a schedule/plan for releasing this? I'd love to have a patch version if you don't mind, just to simplify local development.. I was very sad removing this... but couldn't think of a way to keep it in. :'(. ",
    "Neorth": "Thanks! Missed that one. . ",
    "almeynman": "I was able to successfully run the project without JSX. I am also new to .Net and cannot understand what is wrong.... ",
    "drouillard": "I was able to get the code here to run\nhttps://github.com/reactjs/React.NET/tree/master/tutorial-code\non using Visual Studio Community Edition 2017.\nI opened up the .sln file, restored the NuGet packages and it ran. Looking into server side rendering. The other Sample projects did not run as they seemed to be looking for Windows-specific components or my system is not yet fully setup. \n. ",
    "roman-yagodin": "@Taritsyn, thanks for the quick response!\nI've noticed that setting DefaultEngineName property not working as expected and I need to add the engine factory I wish to use as the first one... \nFor now, I still cannot influence the way ReactJS.NET seeking for required assemblies by registering JS engine factories manually. Do I still need to install native assemblies for V8 and ChakraCore engines even if I not register factories for them?. Resolved in 3.1.0 release. > I think we can totally drop the hard dependency on V8 / ChakraCore and instead rely on people to manually configure JavaScriptEngineSwitcher.\nI vote for this with both my hands!. ",
    "Znow": "I have the same issue, just with .NET Core (.NET Framework) sample from Aspnetboilerplate.\nRegards. ",
    "arunr14": "@Daniel15 i am following your https://reactjs.net/getting-started/tutorial_aspnet4.html and i have the same issue where my jsx is not trans piling and i cant get past the first sample step in the tutorial\nI have even added  <remove name=\"Babel\" />\n      <add name=\"Babel\" verb=\"GET\" path=\"*.jsx\" type=\"React.Web.BabelHandlerFactory, React.Web\" preCondition=\"integratedMode\" />     to my webconfig   . Any idea whats going on?. SOLVED\nI had older versions of React.Web and React.Web.MVC4 installed because of a existing WebActivator version constraint,  i upgraded all of these packages and this was solved. ",
    "fmartin40": "Same issue for me with ASP.NET MVC 5.x/MPA/EF/Module-Zero\nMy webconfig:\n<system.webServer>\n  <handlers>\n     <remove name=\"BlockViewHandler\"/>\n     <remove name=\"Babel\" /><add name=\"Babel\" verb=\"GET\" path=\"*.jsx\" type=\"React.Web.BabelHandlerFactory, React.Web\" preCondition=\"integratedMode\" />\n   </handlers>\n</system.webServer>. ",
    "WilliamNever": "have you invoked the function @Html.ReactInitJavaScript(). i got the reason. if the react is call as  @Html.React(\"App2Server\", new { },\"div\", \"showApp2Server\"), unuse the containerid created by the asp.net, @Html.ReactInitJavaScript() can be call without the parameters.. ",
    "aurokk": "The solution for osx is adding of https://www.nuget.org/packages/JavaScriptEngineSwitcher.ChakraCore.Native.osx-x64/ :). I recommend u to start with \"Microsoft's JavascriptServices\" instead of react.net!\nhttps://github.com/aurokk/netcore-react-spa - my configured boilerplate.\nOr u can use standard net core templates -\n https://blogs.msdn.microsoft.com/webdev/2017/02/14/building-single-page-applications-on-asp-net-core-with-javascriptservices/. ",
    "kthayer424": "Update: I changed my BabelBundle to just\npreviewScripts.Include(\"~/Content/js/react/preview/Preview.jsx\");\nAnd the amount of memory being used on each edit of Preview.jsx is less now (probably because there's less in the bundle) but still gradually increases until VS runs out of memory.\n. ",
    "awayken": "@WilliamNever For help with bundling and minification, I'd recomment you check out Microsoft's documentation: https://docs.microsoft.com/en-us/aspnet/mvc/overview/performance/bundling-and-minification. @dustinsoftware : Thanks for taking a look! I can make these changes tomorrow and update the PR.. @dustinsoftware Happy to help! I've just started using React.NET for a project I'm working on, so I'll definitely take a look.. @mchound Code snippets would probably help. It sounds like you're using the server rendering. Is that right? Are you noticing the stale data elsewhere in your app? What kind of data is feeding into these props? Is it session data or simply changing data?. I'd be interested in seeing this feature added. The first thing I did on my latest React.net project was to explore CSS-in-JS options and soon ran into issues (and then #538 's explanation).\nI'll see if I can find some time to test with my preferred styling library.. I opened this pull request as I was working through the tutorial. I see that the tutorial has had changes me to it since then. Should I just close this pull request as being outdated?. @dustinsoftware I think I was reading through it with my Editor hat on. I just noticed some places where there were ambiguous pronouns, passive voice usage or where I felt the flow of the sentence could be improved. The updates were maybe more a matter of personal taste rather than strict grammatical rule violation.. I'm going to close this for now. When I opened the Issue, I was preparing for a presentation and going through the tutorial pretty closely. Now that I'm passed that, I'm not sure when I'll get back to reading the tutorial and offering suggestions.. Yeah. React DevTools was yelling at me about using a key, and I couldn't figure out what was wrong because you were already using a key. Then I saw the property difference and realized what was happening.. Okay. I can put it back.. I think this would still be good to include. I might put out another PR discussing this alternative. I didn't get it into this one before you merged it, but I can see this eventually being the preferred syntax once it stops being experimental.. ",
    "radjivF": "I only get -bash: Install-Package: command not found. How do you do that on mac? . @Taritsyn Amzing it work for me, thanks. ",
    "dasjestyr": "I'd give it a crack but I can't seem to get it to build. dev-build.bat is completing with errors. \"*/.resx couldn't be found\" is about the only intelligible output I'm seeing at the moment.\n. That's the one. Yeah I saw that in the instructions but that didn't seem to help. Then I tried moving the repo folder all the way down to my C: drive to help shorten the paths, but windows is warning me that the filenames are still too long.. It may be worth noting that for obvious reasons, only had the problem on a windows machine. I had no issue starting a new project on Linux.. ",
    "amccool": "@ShikiGami your fix works for me\nchange \npublic void ConfigureServices(IServiceCollection services)\nto\npublic IServiceProvider ConfigureServices(IServiceCollection services)\nand return services.BuildServiceProvider();\n. ",
    "maksgit": "@ShikiGami \nI looked at your repo https://github.com/ShikiGami/React.NET/blob/origin/core20update/tutorial-code/Startup.cs and didn't see changes which you mentioned. Maybe I do something wrong?. ",
    "oleh-zheleznyak": "@ShikiGami, \nyour fix works like a charm! Many thanks!. ",
    "ZakariaAhmed": "Thanks for the fix, works great now !. ",
    "DanielAdolfsson": "Just to add some clarity as to what is happening here. \nThe DependencyInjection framework is by default configured to use call-site validation whenever a service is requested. When UseReact is called, it's ensuring that the required per-request services are available by using GetService from the root call-site, and this is obviously incompatible with the call-site validation feature.\nYou can disable call-site validation in you WebHost configuration by adding:\n.UseDefaultServiceProvider(options => options.ValidateScopes = false). ",
    "ngohungphuc": "The issue still happened in .Net Core 2.0. I'm using lastest version of .Net core 2.0. @dustinsoftware I just want to render a login form for user to login. That's all\nI get the following error though I'm using ASP.Net Core 2.0\nReactInvalidComponentException: Could not find a component named 'LoginForm'. Did you forget to add it to App_Start\\ReactConfig.cs?\nMy view\n```\n\n\n@section Scripts {\n    @Html.React(\"LoginForm\", new { })\n    \n    @Html.ReactInitJavaScript()\n}\n```. The problem I get is webpack mangle options so the class name React.Net cant find it. Still not find a way to fix it. @dustinsoftware any suggest. ",
    "pinty": "@ShikiGami\nThanks for pointing out the solution, it works!. ",
    "Masuzu": "@ShikiGami Thanks for the solution!. ",
    "hermanho": "The service should be checked within a scope because the class HttpContextLifetimeProvider.PerRequestRegistrations is registered as scoped lifetime.\nhttps://github.com/reactjs/React.NET/blob/b048ccbc20873488ca5923282ef23978ffb4aae2/src/React.AspNet.Middleware/ReactServiceCollectionExtensions.cs#L26\nHere is the code to check the service in a scope.\ncsharp\nprivate static void EnsureServicesRegistered(IApplicationBuilder app)\n{\n  using (var scope = app.ApplicationServices.CreateScope())\n  {\n    var registrations = scope.ServiceProvider.GetService<HttpContextLifetimeProvider.PerRequestRegistrations>();\n    if (registrations == null)\n    {\n      throw new ReactNotInitialisedException(\"Please call services.AddReact() before app.UseReact().\");\n    }\n  }\n}\n. ",
    "jbrinkle": "Happening on VS2017 new AspNetCore MVC app with Core 2.1.\nHowever, following migratory steps from Core 2.0 to 2.1, it seems fine. I cannot for the life of me figure out why. @DemiMarie @nightblade9 \nI got the same behavior while starting a brand new Core 2.1 AspNet MVC web app.\nHowever, I also followed the migratory steps from Core 2.0 to 2.1 on the tutorial project and it worked. I don't know why, but you may be able to reference the same page in your efforts to reverse-migrate back to 2.0. ",
    "hlalit03": "I am trying the sample code under ReactJS.NET tutorial(https://reactjs.net/tutorials/aspnetcore.html) & despite making the changes you mentioned it doesn't work. Same works with ASP.NET Core 2.0. ",
    "milesvdw": "\n@ShikiGami your fix works for me\nchange\npublic void ConfigureServices(IServiceCollection services)\nto\npublic IServiceProvider ConfigureServices(IServiceCollection services)\nand return services.BuildServiceProvider();\n\nThis worked perfectly. Thanks so much! Saved me a real headache.. ",
    "makcakaya": "@aurokk Can you elaborate more please? Why do you recommend JavaScriptServices instead of Reactjs.Net? . ",
    "phuhokhongtien": "Thank you for your email. I will ask them.\n2017-09-11 2:30 GMT+07:00 Daniel Lo Nigro notifications@github.com:\n\nI don't know much about Orchard, you might want to ask them about how to\nhandle this.\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/reactjs/React.NET/issues/437#issuecomment-328365870,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AaYteM_6W_CpQ70R5G2S1-8ExQk9oOXXks5shDjxgaJpZM4PFgTG\n.\n\n\n-- \n--==Empty==-\n. ",
    "hybridappdev": "@dustinsoftware , I want to use React 16 error boundary feature to log javascript error but it's not working with ReactJS.NET. do you have any fix?. @dustinsoftware Thanks. :+1: \nAwaiting your PR merge :). ",
    "dfhincapiem": "Yes, you were right. ",
    "KathyDinh": "Sorry for opening the ticket. The issue was actually from react.. ",
    "ArgonAlex": "I'm using JSPool directly, not React.NET, but I have also started running into this since a week and half ago. Actually looks like it was right as we added more RAM to our servers, which is pretty counterintuitive. We also updated to the latest JSPool/JavaScriptEngineSwitcher/ClearScript a week before that.\nFor reference, we've been running with 32 engine pools for a year now, which we arrived at based on testing at ~8000 requests/min, but your needs will vary depending on other factors, including how long a render takes.. Yes the fact that there is no indication of where in the code the exception is happening, combined with the fact that it only happens on few renders, makes this very hard to debug.. ",
    "tantainguyen": "Thanks JoshuaKGoldberg,\nI install Visual C++ 2015 redistributable x86 and it's fixed.\nI don't known why, my server install 64 bit Operation system.\nThanks.\n. ",
    "coka": "@Daniel15 I have amended the commit to use dependency injection. The build seems flaky, because it passed on the first amend, and failed on the second one, which contained only comment / whitespace changes.. This is like #449, but for .NET Core, right? Maybe there is something similar to HostingEnvironment in the newer framework.. ",
    "optimatex": "Thanks. thanks, it works. That's strange, cuz the official tutorial code  places @Html.ReactInitJavaScript() at the end of the file\nEdited. Actually, it was working just because I placed Html.ReactInitJavaScript at the top of the file and all console logs and wars disappears. To get back them I switched old structure. \nI have no idea why this error appears. I did everything like in the tutorial.  . Sorry for the late response\nMy code is next:\ntemplate files:\n<body>\n    @RenderBody()\n    <script src=\"@Url.Content(\"~/public/main.js\")\"></script>        \n</body>\nand the direct page for certain route:\n```\n@model Gistair.WebApi.Models.ServerSideRendering.TagModel\n@{\n    Layout = \"~/Views/Shared/_Layout.cshtml\";\n}\n\n    @Html.React(\"ServerComponent\", new\n{\n    CurrentRoute = new\n    {\n        pathname = Context.Request.RawUrl\n    },\n    nodeListModel = Model.Nodes,\n    tagsListModel = Model.RelatedTags\n})\n\n\n    window.initialState = {\n        nodeListModel: @Html.Raw(Json.Encode(Model.Nodes)),\n        tagsListModel: @Html.Raw(Json.Encode(Model.RelatedTags)),\n    }\n\n@Html.ReactInitJavaScript()\n``\n. @Saturate +1 for such issue. I have been using bothreact-helmetandReact.NETfor a year but didn't manage to find to use it on SSR. I have also opened an issue onreact-helmet` repo but no answer. . ",
    "za-ek": "For me the error was putting \"react\" and \"react-dom\" on \"devDependencies\" block. The right solution is remove these packages and add it on \"dependencies\" block. Then npm i. (--save-dev option add package to \"devDependencies\" block). ",
    "mahaleroshan00": "import React, { Component } from 'react';\nimport { configure } from 'enzyme';\nimport Adapter from 'enzyme-adapter-react-16';\nconfigure({ adapter: new Adapter() });\nclass App extends React.Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            count : 0\n        };\nthis.handlelick = this.handleClick.bind(this);  \n}\n    handleClick(e){\n       this.setState((preState) => {\n    return {\n      count : preState.count + 1\n      };\n   });\n    }\nrender(){\n        return(\n         Click );\n   }\n}\nReactDOM.render(, document.getElementById('root'));\n. Above code structure i am using, but getting ReactDOM is not defined error.  Please somebody help on this. ",
    "zabralex85": "in core mvc project after launch:\nSystem.TypeLoadException: Method 'Evaluate' in type 'JSPool.JsEngineWithOwnThread' from assembly 'JSPool, Version=2.0.0.0, Culture=neutral, PublicKeyToken=2fc7775f73072640' does not have an implementation.\n   at JSPool.JsPool.b__2_0()\n   at JSPool.JsPool1.CreateEngine()\n   at JSPool.JsPool1.PopulateEngines()\n   at JSPool.JsPool1..ctor(JsPoolConfig1 config)\n   at React.JavaScriptEngineFactory.CreatePool()\n   at React.JavaScriptEngineFactory..ctor(JsEngineSwitcher jsEngineSwitcher, IReactSiteConfiguration config, IFileSystem fileSystem)\n   at lambda_method(Closure , Object[] )\n   at React.TinyIoC.TinyIoCContainer.ConstructType(Type requestedType, Type implementationType, ConstructorInfo constructor, NamedParameterOverloads parameters, ResolveOptions options)\nReact.TinyIoC.TinyIoCResolutionException: Unable to resolve type: React.JavaScriptEngineFactory ---> System.TypeLoadException: Method 'Evaluate' in type 'JSPool.JsEngineWithOwnThread' from assembly 'JSPool, Version=2.0.0.0, Culture=neutral, PublicKeyToken=2fc7775f73072640' does not have an implementation.\n   at JSPool.JsPool.b__2_0()\n   at JSPool.JsPool1.CreateEngine()\n   at JSPool.JsPool1.PopulateEngines()\n   at JSPool.JsPool1..ctor(JsPoolConfig1 config)\n   at React.JavaScriptEngineFactory.CreatePool()\n   at React.JavaScriptEngineFactory..ctor(JsEngineSwitcher jsEngineSwitcher, IReactSiteConfiguration config, IFileSystem fileSystem)\n   at lambda_method(Closure , Object[] )\n   at React.TinyIoC.TinyIoCContainer.ConstructType(Type requestedType, Type implementationType, ConstructorInfo constructor, NamedParameterOverloads parameters, ResolveOptions options)\n   --- End of inner exception stack trace ---\n   at React.TinyIoC.TinyIoCContainer.ConstructType(Type requestedType, Type implementationType, ConstructorInfo constructor, NamedParameterOverloads parameters, ResolveOptions options)\n   at React.TinyIoC.TinyIoCContainer.SingletonFactory.GetObject(Type requestedType, TinyIoCContainer container, NamedParameterOverloads parameters, ResolveOptions options)\n   at React.TinyIoC.TinyIoCContainer.ResolveInternal(TypeRegistration registration, NamedParameterOverloads parameters, ResolveOptions options)\n   at React.TinyIoC.TinyIoCContainer.ConstructType(Type requestedType, Type implementationType, ConstructorInfo constructor, NamedParameterOverloads parameters, ResolveOptions options)\nReact.TinyIoC.TinyIoCResolutionException: Unable to resolve type: React.ReactEnvironment ---> React.TinyIoC.TinyIoCResolutionException: Unable to resolve type: React.JavaScriptEngineFactory ---> System.TypeLoadException: Method 'Evaluate' in type 'JSPool.JsEngineWithOwnThread' from assembly 'JSPool, Version=2.0.0.0, Culture=neutral, PublicKeyToken=2fc7775f73072640' does not have an implementation.\n   at JSPool.JsPool.b__2_0()\n   at JSPool.JsPool1.CreateEngine()\n   at JSPool.JsPool1.PopulateEngines()\n   at JSPool.JsPool1..ctor(JsPoolConfig1 config)\n   at React.JavaScriptEngineFactory.CreatePool()\n   at React.JavaScriptEngineFactory..ctor(JsEngineSwitcher jsEngineSwitcher, IReactSiteConfiguration config, IFileSystem fileSystem)\n   at lambda_method(Closure , Object[] )\n   at React.TinyIoC.TinyIoCContainer.ConstructType(Type requestedType, Type implementationType, ConstructorInfo constructor, NamedParameterOverloads parameters, ResolveOptions options)\n   --- End of inner exception stack trace ---\n   at React.TinyIoC.TinyIoCContainer.ConstructType(Type requestedType, Type implementationType, ConstructorInfo constructor, NamedParameterOverloads parameters, ResolveOptions options)\n   at React.TinyIoC.TinyIoCContainer.SingletonFactory.GetObject(Type requestedType, TinyIoCContainer container, NamedParameterOverloads parameters, ResolveOptions options)\n   at React.TinyIoC.TinyIoCContainer.ResolveInternal(TypeRegistration registration, NamedParameterOverloads parameters, ResolveOptions options)\n   at React.TinyIoC.TinyIoCContainer.ConstructType(Type requestedType, Type implementationType, ConstructorInfo constructor, NamedParameterOverloads parameters, ResolveOptions options)\n   --- End of inner exception stack trace ---\n   at React.TinyIoC.TinyIoCContainer.ConstructType(Type requestedType, Type implementationType, ConstructorInfo constructor, NamedParameterOverloads parameters, ResolveOptions options)\n   at React.TinyIoC.TinyIoCContainer.CustomObjectLifetimeFactory.GetObject(Type requestedType, TinyIoCContainer container, NamedParameterOverloads parameters, ResolveOptions options)\n   at React.TinyIoC.TinyIoCContainer.ResolveInternal(TypeRegistration registration, NamedParameterOverloads parameters, ResolveOptions options)\n   at React.TinyIoC.TinyIoCContainer.Resolve(Type resolveType)\n   at React.TinyIoC.TinyIoCContainer.ResolveResolveType\n   at React.AspNet.HtmlHelperExtensions.get_Environment()\nReact.Exceptions.ReactNotInitialisedException: ReactJS.NET has not been initialised correctly. Please ensure you have called app.AddReact() and app.UseReact() in your Startup.cs file. ---> React.TinyIoC.TinyIoCResolutionException: Unable to resolve type: React.ReactEnvironment ---> React.TinyIoC.TinyIoCResolutionException: Unable to resolve type: React.JavaScriptEngineFactory ---> System.TypeLoadException: Method 'Evaluate' in type 'JSPool.JsEngineWithOwnThread' from assembly 'JSPool, Version=2.0.0.0, Culture=neutral, PublicKeyToken=2fc7775f73072640' does not have an implementation.\n   at JSPool.JsPool.b__2_0()\n   at JSPool.JsPool1.CreateEngine()\n   at JSPool.JsPool1.PopulateEngines()\n   at JSPool.JsPool1..ctor(JsPoolConfig1 config)\n   at React.JavaScriptEngineFactory.CreatePool()\n   at React.JavaScriptEngineFactory..ctor(JsEngineSwitcher jsEngineSwitcher, IReactSiteConfiguration config, IFileSystem fileSystem)\n   at lambda_method(Closure , Object[] )\n   at React.TinyIoC.TinyIoCContainer.ConstructType(Type requestedType, Type implementationType, ConstructorInfo constructor, NamedParameterOverloads parameters, ResolveOptions options)\n   --- End of inner exception stack trace ---\n   at React.TinyIoC.TinyIoCContainer.ConstructType(Type requestedType, Type implementationType, ConstructorInfo constructor, NamedParameterOverloads parameters, ResolveOptions options)\n   at React.TinyIoC.TinyIoCContainer.SingletonFactory.GetObject(Type requestedType, TinyIoCContainer container, NamedParameterOverloads parameters, ResolveOptions options)\n   at React.TinyIoC.TinyIoCContainer.ResolveInternal(TypeRegistration registration, NamedParameterOverloads parameters, ResolveOptions options)\n   at React.TinyIoC.TinyIoCContainer.ConstructType(Type requestedType, Type implementationType, ConstructorInfo constructor, NamedParameterOverloads parameters, ResolveOptions options)\n   --- End of inner exception stack trace ---\n   at React.TinyIoC.TinyIoCContainer.ConstructType(Type requestedType, Type implementationType, ConstructorInfo constructor, NamedParameterOverloads parameters, ResolveOptions options)\n   at React.TinyIoC.TinyIoCContainer.CustomObjectLifetimeFactory.GetObject(Type requestedType, TinyIoCContainer container, NamedParameterOverloads parameters, ResolveOptions options)\n   at React.TinyIoC.TinyIoCContainer.ResolveInternal(TypeRegistration registration, NamedParameterOverloads parameters, ResolveOptions options)\n   at React.TinyIoC.TinyIoCContainer.Resolve(Type resolveType)\n   at React.TinyIoC.TinyIoCContainer.ResolveResolveType\n   at React.AspNet.HtmlHelperExtensions.get_Environment()\n   --- End of inner exception stack trace ---\n   at React.AspNet.HtmlHelperExtensions.get_Environment()\n   at React.AspNet.HtmlHelperExtensions.ReactT\n   at AspNetCore._Views_Home_Index_cshtml.<b__12_2>d.MoveNext() in C:\\FastProjects\\FieldCompleteNew\\Front_fork\\core-react\\Views\\Home\\Index.cshtml:line 17\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext.d__30.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.GetResult()\n   at AspNetCore._Views_Home_Index_cshtml.d__12.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at Microsoft.AspNetCore.Mvc.Razor.RazorView.d__16.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at Microsoft.AspNetCore.Mvc.Razor.RazorView.d__15.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at Microsoft.AspNetCore.Mvc.Razor.RazorView.d__14.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at Microsoft.AspNetCore.Mvc.ViewFeatures.ViewExecutor.d__22.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at Microsoft.AspNetCore.Mvc.ViewFeatures.ViewExecutor.d__21.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at Microsoft.AspNetCore.Mvc.ViewResult.d__26.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.d__19.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.d__24.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.Rethrow(ResultExecutedContext context)\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.d__22.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.Rethrow(ResourceExecutedContext context)\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.d__17.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.d__15.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at Microsoft.AspNetCore.Builder.RouterMiddleware.d__4.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at React.AspNet.BabelFileMiddleware.d__5.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.d__7.MoveNext(). updated JavaScriptEngineSwitcher + React.Js => and it's alive!. ",
    "meisterpeeps": "Just want to mention that I wasn't able to get 3.2 working, but I was able to get 3.1 working--as I was updating from 3.0.  As for your two suggestions; I tried the clientOnly: true, and the problem didnt go away; and as far I know I have been loading React myself correctly, as it worked on 3.0 and works on 3.1.\nAnyway, thanks for the quick feedback.  If I try again to go for 3.2, and if I get any new error information, or it just happens to work, Ill let you know.       . I figured it out.   I needed to add the runtime and vendor scripts to the ReactSiteConfiguration.Configuration.  I initially overlooked that in the example project. \ud83d\ude41\nI didn't need to include any of my shared files in my webpack 3 setup in the ReactSiteConfiguration.Configuration....  I think it may have been due to how I was using the expose-loader when building our old server bundles.   \nAnyway, great job with the project :)  . ",
    "justinkauai": "I ended up downgrading webpack and using ts-loader and refactoring the files like the mvc webpack example.\nRemoving the \nexport default \nand using \nmodule.exports = Hello \nseems to have solved my issues.\nIll update if I revisit webpack3\nExcited to be writing react typescript in mvc4!\nThanks!. ",
    "jefferson5": "Thanks!  I must have missed Current.  Much better.. ",
    "ryedin": "Got this to work as expected by disabling engine reuse in the config, but IMO, we should be able to configure pooling AND allow the same engine instance to persist for the entire request... and that should be the default behavior.\nBut again, please let me know if there is an explicit reason why you feel the engine(s) should be recycled per call to Html.React even if you're still in the same request.. > use case for sharing engine scope across multiple requests\nYou keep using the word request when you really mean method calls within the context of a single request. This isn't about sharing state across requests. It's about using the semantics of a single request to build up state as the HTML is created that will be sent back to the client. This is not uncommon, nor without value, nor should it be \"not encouraged\".\nThere is a ton of value in being able to rely on the components/modules having access to a single execution context for the lifetime of this request. It enables a more loosely coupled Component architecture, for starters, but also in the case of this project it allows you to compose the front end \"app\" via multiple calls to Html.React, without having to think of each call as just its own little disjointed \"react app\". Because we're in .NET land, and often have to work with weird frameworks that rely heavily on the Razor templating engine and partials and other HtmlHelperExtensions, this becomes invaluable. It allows us to stitch together a cohesive application without burdening us with having to create and maintain an unwieldy large set of props that all have to get pushed in at the top. \nOn this topic, it would also be very nice if the React components were kept \"live\" as the response is being constructed (using something like jsdom, or cheerio, perhaps - which is something I've done in the past with a different framework to support SSR), with a final call to the RenderAsString  mechanism occurring just before the response is sent back. This will allow for interesting advanced/rich rendering scenarios where you might have things being composed across calls to Html.React that should trigger re-renders of components that were mounted earlier (which would work fine on the client of course, and is in fact a completely sound and common architecture).\nI can sense, though, that this is likely to not be viewed as a priority. I'm hoping that I might have some availability to make a fork and play around with this. I assume you'd be open to a PR that supports this model, as a long as it's configurable and the defaults remain as they are now?\n. I think we can use mobx and still keep the example simple enough. I made a gist that illustrates the basics of both the need, and the pattern.\nhttps://gist.github.com/ryedin/6efcc8c0883bb2b1baf4d9a2f19ef105\nI may have gone slightly overboard on the comments in the gist, but I wanted you to get a full picture as to what we are trying to achieve. I can't imagine this pattern is too far fetched or out of place.\nAlso...\n\nSince render calls are supposed to be pure\n\nRender calls are certainly \"pure\" (nothing changes that). That does not mean they cannot also be reactive (respond to changes in inputs as the larger page context is built up). Also, think in terms of how things work on the client. There is a single execution context, which is what enables these types of patterns to work. Why not think in the same terms for your SSR solution? (the \"live\"ness thing can be achieved with a true server-side DOM implementation, but I would be happy with just a single execution context per request for starters). ",
    "foxandrewj": "That was probably it.\nNuget is packaged with VS 2017.  But I did not have the latest VS update.  After updating I can create a 4.7.1 project and install latest React 3.2\nSorry for the hassle.\nThanks!. ",
    "Dagur": "Turns out that the files were missing from the project. Sorry. ",
    "srdjanRakic": "I still have this problem, mainly I think is when I use component into component with SSR. Does anyone have had this error before?. ",
    "gazab": "I had this problem until I added module.exports = TheComponentClass; at the end of my component files\nEdit: I've finally educated myself a bit regarding modules in ES6 and CommonsJS and fixed this issue in a better way by using ES6 imports everywhere. Like this:\nmy server.js:\n```\nimport { Header } from \"./Common/Header\";\nmodule.exports = { // Can this be replaced somehow too?\n    // All the components you'd like to render server-side\n    Header,\n};\n```\nmy component:\nexport class Header extends React.Component {\n    public render() { return (<h1>Header</h1>)\n}\nI guess this only works if you transpile your code with Webpack or similar since ReactJS.NET doesn't support the ES6 syntax by itself. Right?. I'll rebase tomorrow . @dustinsoftware fixed! If you wonder why I changed some of the test assertions it's because they made more sense that way. Passing true to either clientOnly or serverOnly, but not both at the same time. \nIdeally, maybe those parameters should be joined to an enum or something instead. I.e enum RenderMode: ClientAndServer, ClientOnly, ServerOnly.\nI didn't want to introduce too big changes though so I left it like it was.. What does your content/server.js look like?. In its current state yes, but isn't this something that would be nice to support? . ",
    "bbsdddougla": "This problem is occurring in the generated react resource file on server-side for me. I'm using ChakraCore 1.8.1 for my JsEngine on ReactJs.Net 3.2.0. \nSetting .SetUseDebugReact(true) shows that it occurs in ReactDOMServerRenderer.prototype.renderDOM:\nException information: \n    Exception type: ReactServerRenderingException \n    Exception message: Error while rendering \"Checkout.default\" to \"react_nkBwNivQ0qY35tfjZMKkQ\": TypeError: Object doesn't support property or method 'toLowerCase'\n   at renderDOM (React.Core.Resources.react.generated.js:4403:6)\n   at render (React.Core.Resources.react.generated.js:4382:12)\n   at read (React.Core.Resources.react.generated.js:4349:8)\n   at renderToString (React.Core.Resources.react.generated.js:4607:4)\n   at Global code (Script Document [3]:1:1)\nLine: 4403\nThe call site is:\nvar tag = element.type.toLowerCase();\nIt appears that renderDOM won't get called without being passed a valid react element (in ReactDOMServerRenderer.protptype.render). So, type should indeed be a string, which should indeed support the method toLowerCase.\nSomehow, an object is assigned to element.type at this point. \nWhat am I doing wrong?. I upgraded to React.Core 3.3.0 and this problem persists.. After trying V8, the problem persists, so it is likely not JsEngine-specific. When not rendering server-side the react components are rendered client-side as expected. V8 gives a slightly more descriptive exception, with the line that caused the error.\nException information: \n    Exception type: ReactServerRenderingException \n    Exception message: Error while rendering \"Checkout.default\" to \"react_o2ImMb0WwE2vERojOPVjNg\": TypeError: element.type.toLowerCase is not a function\n    at renderDOM (React.Core.Resources.react.generated.js:4403:29) ->       var tag = element.type.toLowerCase();\n    at render (React.Core.Resources.react.generated.js:4382:24)\n    at read (React.Core.Resources.react.generated.js:4349:20)\n    at renderToString (React.Core.Resources.react.generated.js:4607:26)\n    at Script Document [4]:1:16. In my server.js file, I needed to export ReactDOMServer. \nThis server.js serves my components after rendering server-side:\n```\nimport Checkout from \"./components/Checkout\"\nimport ReactDOMServer from 'react-dom/server'\nglobal['Checkout'] = Checkout\nglobal['ReactDOMServer'] = ReactDOMServer\n```\nThis server.js returns a 500 error with the above stack trace:\n```\nimport Checkout from \"./components/Checkout\"\nimport ReactDOMServer from 'react-dom/server'\nglobal['Checkout'] = Checkout\n//global['ReactDOMServer'] = ReactDOMServer\n```\nWhy is that? Perhaps it should be obvious that the server-side library needs to be loaded globally to render server-side. Still, shouldn't this be registered globally server-side by the React.NET code? Did I turn it off in ReactConfig.cs?\n```\npublic static void Configure()\n{\n var reactSiteConfiguration = ReactSiteConfiguration.Configuration;\nreactSiteConfiguration.SetLoadReact(true);\nreactSiteConfiguration.SetLoadBabel(false);\nCompilationSection compilationSection = (CompilationSection)ConfigurationManager.GetSection(@\"system.web/compilation\");\n if (compilationSection.Debug)\n {\n   reactSiteConfiguration\n    .SetReuseJavaScriptEngines(false)\n    .SetUseDebugReact(true);\n }\nforeach (var entryPointInfo in ReactEntryPointFiles)\n {\n   reactSiteConfiguration.AddScriptWithoutTransform(entryPointInfo.ServerScript);\n }\nvar chakraCoreJsEngineFactory = new ChakraCoreJsEngineFactory();\n JsEngineSwitcher.Instance.EngineFactories.Add(chakraCoreJsEngineFactory);\n var defaultJsEngineName = ChakraCoreJsEngine.EngineName;\n JsEngineSwitcher.Instance.DefaultEngineName = defaultJsEngineName;\n}\n```\nI see that the name of the component in the generated react resource file (React.Core.resouces.react.generated.js) appears to be ReactDOMFiber instead of ReactDOMServer. Is that a change in the underlying library?. I finally solved this problem by exposing my own React, ReactDOM, and ReactDOMServer globally from the create-react-app index.js\nindex.js:\n```\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport ReactDOMServer from 'react-dom/server'\nglobal['React'] = React\nglobal['ReactDOM'] = ReactDOM\nglobal['ReactDOMServer'] = ReactDOMServer\n```\nAs a side note, I'm also exposing my own components this way, and then just using the main.hash.js file as a library:\nindex.js:\nimport MyComponent from './myComponent'\nglobal['MyComponent'] = MyCompoent. ",
    "trevorloflin": "For future reference, this error can also occur if you forget to qualify your component with the expose-loader container. In other words, if you're exposing the components with 'expose-loader?MyContainer!./MyFolder' but calling it with @Html.React('MyComponent', Model), you'll get this error. You need to use @Html.React('MyContainer.MyComponent', Model) instead.. ",
    "mika76": "Mostly I would just like VS to internally support .vue files (which include the template, script and css) and bundle them for use - this would mean compilation with babel. Server side rendering would also be great. But I have not actually used this library so I'm not sure of all of it's features. \nBut anything that can make the process of compiling and working with vue easier from VS would be great in my book. Currently for every build a webpack build has to be run too.\nSounds like it's very similar from what I've seen of the library though.. ",
    "jameskraus": "It does not break on Chakra core. (I was hoping to use V8 to get some more\ninfo out of an error message I've had with server side rendering.)\nI've got the visual c++ 2015 & 2013 x64 runtimes installed. The site is\nalso set up to run only x64.\nOn Feb 1, 2018 8:16 PM, \"Dustin Masters\" notifications@github.com wrote:\nA few things to try. Does it break if you pick another JS engine like\nchakra core? Do you have the Visual C++ runtime installed?\nOn Thu, Feb 1, 2018 at 13:25, James Kraus notifications@github.com wrote:\n\nAfter following the directions on the ReactJS.NET site, I've been unable\nto get this to work. I've referenced a few threads here (e.g. #409\nhttps://github.com/reactjs/React.NET/issues/409), but wasn't able to\nresolve the issue.\nHere's the error:\n[image: image]\nhttps://user-images.githubusercontent.com/415057/\n35703709-0f928734-076b-11e8-87b0-2d262b8be33f.png\nClearScriptV8-64.dll is in the bin directory of the site.\nFWIW, here's Dependecy walker's view of ClearScriptV8-64.dll:\n[image: image]\nhttps://user-images.githubusercontent.com/415057/\n35703980-ecf75f3c-076b-11e8-9a44-35de47f6fcd8.png\nAny ideas what is wrong here?\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/reactjs/React.NET/issues/504, or mute the thread\nhttps://github.com/notifications/unsubscribe-\nauth/AA5hFqM4NysxuoPazz6bJOO_WM-GabVqks5tQivAgaJpZM4R2TqV\n.\n\n\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/reactjs/React.NET/issues/504#issuecomment-362455363,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAZVUSNS8b1XT4QNt3kgAl_-vM7iXjajks5tQmH2gaJpZM4R2TqV\n.\n. Hey Taritsyn,\nWell thanks for the questions about the subdirectory. I found that placing the ClearScriptV8-64.dll & v8-64.dll in a x64 subdirectory got rid of the error and brought my React component to life! (Originally I had them in the root /bin directory).\nIt seems I misunderstood this part of your misconceptions post: \n\nIn this case, native assemblies are located in the x86 and x64 subdirectories of bin[Debug|Release] directory (for web applications and sites just the bin directory).\n\nThank you!\nFor the record, I'm using these versions of everything:\n. It didn't copy everything into the right place for me I guess? I suppose its supposed to copy to /bin/x64, but I found the DLLs in the root /bin directory by default.\nEverything was installed with nuget and we're using msbuild to build our solution. ~I'm currently trying to figure out how to get the DLLs to show up in the correct place automatically.~\nI suspect it's an oddity/bug in our build and deployment process. It might not handle subdirectories in /bin well (we didn't have any before ReactJS.NET).\n(And yet for some reason, the ru-ru directory comes out fine??). > Offtopic: Yesterday you were wrong about the \u201cmebibytes -> megabytes\u201d. I recommend you to see the following code.\nHuh, never heard MiB pronounced before. Until now I just assumed it was just a variant of MB. That's what I get for not google-checking Mebibytes.. ",
    "nsivaji61": "var Components = require('expose-loader?Components!./components');. Now i am seeing different exceptions . Please find the new exceptions below .\nReact has not been loaded correctly. Please expose your version of React as global variables named 'React', 'ReactDOM' and 'ReactDOMServer', or enable the 'LoadReact' configuration option to use the built-in version of React.. Thank you. Did you get chance to update the sample for redux?. ",
    "kwhjvdkamp": "Hi Dustin (@dustinsoftware), if I remember well on your blog (tutorial) at React.Net website (not your github code). ",
    "ssaroiu": "I'd like to re-open this issue. I have the exact same problem as @jadebayo.\nAs per this conversation, there are two ways to fix this issue:\n\n\nAdd Newtonsoft.Json to the list of assemblies for which manual redirect is resolved by overriding `AppDomain.CurrentDomain.AssemblyResolve' (as per @Daniel15's comment above). I understand this is brittle, but this hack is already present in the code, and it will fix this problem (I checked). \n\n\nIf the solution is to use webpack instead (as per @dustinsoftware's comment above), I'd suggest to update the relevant documentation. As is, the documentation for React.MSBuild is silent on webpack. Instead, when I follow the documentation, my build fails due to this bug.\n\n\nReferences:\nhttps://reactjs.net/bundling/msbuild.html. Both will work for me. How are these two tracked so that I know when they're ready?\nThanks @dustinsoftware.. I agree with @kendallb that bumping out the version number is a band-aid rather than a fix. It'll break again couple of months down the road when Newtonsoft updates their JSON.NET nuget.. Certainly.\nThere are two ways I could implement this.\nOption 1: Add a  parameterized runs-msbuild.bat that includes the common code. Then each of the existing four batch files calls runs-msubuild.bat with an appropriate parameter.\nOption 2: Collapse all four batch files into a single msbuild.bat that takes two input parameters: a configuration parameter and an optional action. \nFor example: \n> msbuild.bat dev  (corresponds to dev-build.bat)\n> msbuild.bat release push (corresponds to release-build.push.bat)\nDo you prefer option 1 or 2?\n. ",
    "kendallb": "I am trying to get the msbuild task working as well. I think the fundamental issue here is that the msbuild DLL is copied into the output directory as part of the reference to the project, when in reality what would work better is for a working version of the DLL and dependent files to be located in a directory in the nuget package, and run from there rather than the developers bin directory? Running it from the bin directory is going to always lead to failures with incorrect DLL's.\nI think the msbuild task could be rebuild to work similarly to how the Razor Generator project does it, which is a project I also use that compiles all the cshtml files in my project down to the .cs files, which are then compiled into the project. The source code is here:\nhttps://github.com/RazorGenerator/RazorGenerator/tree/master/RazorGenerator.MsBuild. It will keep coming up, and if the build dll is referenced from the NuGet location then it also removes the need for extra dependencies to be added to my project bin directory. The way razor does it works nicely.. As mentioned, the right solution is to deploy the build DLL into the nuget directory like they do with Razor Generator and run it from there. Then its dependencies are entirely it's own.. Yeah I am not sure I am going to go this route anyway. I was desperately trying to avoid using node and packages (gah, I don't like node much!), but I think the better solution for our project is to use Gulp to pre-process all our JSX files at build time and then it will also do all the minification and bundling as well. Just have to bite the bullet I guess and get on the node train .... I would be happy to take a look at it. What format does visual studio need the source maps in for it to work? Does not work in Rider either, so a solution that works for Visual Studio would probably work with Rider?. Yeah I will take a look. . Ok from what I can work out, generally the source maps live in a .map file next to the regular files (when build with a build tool like webpack), but they are referenced with a special comment at the end of the generated file like so:\n//@ sourceMappingURL=app.js.map\nSo I suspect maybe all we need to do is add that line to the end of the compiled .jsx file that is served up, which has a reference to the same .jsx file with the source map query string parameter added? \nI am not quite sure where to start looking at how to add that to the generated file, perhaps you can give me some pointers?\nhttp://blogs.microsoft.co.il/gilf/2013/01/12/quick-tip-enabling-typescript-debugging/\n. I have run out of time myself for this. I am actually planning to transition to Typescript with webpack and Bridge.net.. Yes, I think so. It generates Javascript by compiling C# just like Typescript, so it should be able to support server side rendering the same as using Typescript or native Javascript. The one thing it lacks is declarative markup like JSX or TSX, so I am trying to figure out if there is a way I can use JSX or TSX files for my layout, and C# for all the logic :). v10.14.2. Just installed it the other day on Windows.. npm is 6.4.1. I tried changing to the 3.4.1 stable branch and it fails with different errors (dotnet restore is failing there).. Could be something in node as gulp is what is failing. Any idea why the stable branch is failing? Seems to think some configuration json file is missing. I tried to move my project to 4.0.0 but it seems there are some breaking changes in the JavaScript switcher engine I need to sort out.. I don't use gulp at all, so maybe there is some kind of version issue there. I did an npm install gulp and it did something, so I will see if that makes a difference.. I ran npx gulp in the same directory as dev-build, but it still does not fix it?\nc:\\src\\git\\react.net>npx gulp\nnpx: installed 318 in 7.831s\n[\u001b[90m08:48:02\u001b[39m] \u001b[31mNo gulpfile found\u001b[39m. That does not work:\nC:\\src\\git\\React.NET\\src\\React.Core>npx gulp\ninternalBinding is not defined\n. I installed gulp globally with 'npm install gulp -g' and changed the build.proj file to use that, but it still fails with the exact same command. So must be something to do with the latest version of node/npm/gulp?. I am using Node 10?. Note sure why, but when I run dev-build.bat it still fails for me, but it does an npm install which seems to overwrite the package-lock.json file for some reason? It turns the locked versions into unlocked versions, so maybe that's why it keeps failing for me? Any idea what would cause that?\n\n. ",
    "chrisbarnes": "@dustinsoftware I'm also interested in seeing an example too if you have time. Thanks!. ",
    "JohnBergman": "More or less, where the front end is React based.. ",
    "SiamAbdullah": "\nThanks dustin and Taritsyn. I upgraded all relevant packages to the latest versions, and I am unable to reproduce the exception (still using V8). I wouldn't take this to mean that it is definitely fixed though, since it is so sporadic.\nMy Azure web app runs on a Standard S1 VM (1 CPU and 1.5 GB RAM).\n\n@srmagura  would you tell me which version of V8 you upgraded? I also have similar issue. I can't repro this in console app but in web app It is happening randomly very low volume. \n. ",
    "TheFlow0360": "No I don't have any, the problem is I could only add them to the App.config of my ServiceLoader. However, I don't want this Loader to know about the library that's using react. I already tried to look into providing BindingRedirects from inside my lib, but didn't find anything suitable yet.. I don't really get how the dependencies of these libs work. I checked the dependencies of all the NuGets that got installed with React.Core and they all list \"JavaScriptEngineSwitcher.Core (>= 2.4.10)\", except for JSPool which has \"JavaScriptEngineSwitcher.Core (>= 2.4.9)\".The installed version of JavaScriptEngineSwitcher.Core is 2.4.9, too. My guess was, that i just have to update it to 2.4.10, but when I do this, I can't even load my DLL anymore (ReflectionTypLoadException). I enabled Automatic Binding Redirection and it solved the problem. Thanks for your quick help!. ",
    "Upd4ting": "How do you install that on linux?. I added it via nugget on VS, now when I start the APP on Linux that's telling me that the package is not found, how do I install it on linux?. I added it manually and republished in a folder, transfered it on my linux server and I have still the same error :/ . Here is the stack trace: https://gyazo.com/b9c20979423865e42a39c91cb7a48806. I can't find a fold \"runtimes\" https://gyazo.com/89dc1f71dbb3e068903bc6bdecc0d590. Yes that was a deployment error all is working fine now!\nMy react initialization problem has been fixed by installing JavaScriptEngineSwitcher like you told me.\nA big thanks to you! @Taritsyn . Okay so I managed to import the npm modules correctly, see there: https://gyazo.com/b7678f9ef8ba21c442a74dad120fecc1\nI have this react component that use some component from react-game-kit https://gyazo.com/afc95f08f09710e887d8e7d98dd0b59f\nbut I'm having this error: https://gyazo.com/a9891cf28ba5ddc98446051f7c573244\nI have to say that if I don't use any react game kit component in my component, that's working. Okay I think that my problem come from that: https://gyazo.com/9a32f4c58ad51965bd90ee24d5889a28\nThe react-game-kit component aren't added there but I don't really know how I should add them. ",
    "aventic": "@dustinsoftware - Yes I have but sadly there is only the one under \"tutorial-code\" - which seems to be for ASP.NET Core - right?. I see, but none of those is React Router and ASP.NET MVC only Core\nAnd my issue is with the routing (i guess) - which is something else from .NET Core. Furthermore do I have to pass current url down via prop like this @Html.ReactRouter(\"Routing\", new { path = Request.RawUrl }) it seem to work, but can't seem to find any documentation on that?. Aha okay I see. I just took a glance at the React.Sample.Router.CoreMvc you mention. Which I took some inspiration from, just confused that it can resolve the path without it being passed down as a prop.. ",
    "suhailnaw": "@igorroch are you working on a fix?  If not, I'm looking to make my first open source contribution and can take a stab at it!. Hey @dustinsoftware, I do need some help!  Is the aim to remove error because now we should be using ReactDOM.hydrate for all cases?. Hey @dustinsoftware , I just made my first open source PR :D Could you please give me some feedback?  I really appreciate all your help and aim to wrap this issue asap! \nI had to make the changes on my OSX machine and am working on getting my Windows machine up.  I will run the linter and test script once I have my Windows machine up, but wanted to get your feedback on where I was going for this bug fix.  Let me know what you think!. I was having difficulty building locally on my Mac.  Can I use NET Core for my first build using the dotnet build command?. Hey @dustinsoftware, I got the build to pass!  Do you have any feedback on this PR?. Thank you for all your support @dustinsoftware!  Feels good to have an open source contribution under my belt :). Awesome, thanks for the shoutout on the release notes @dustinsoftware, I really appreciate it!!. Thanks @Daniel15!! :). ",
    "igorroch": "@suhailnaw Not working now. I wish to do it, but do not have free time at all. Feel free to take it. ",
    "Anandks1993": "@dustinsoftware The link of example project is broken it seems. I am in need of that link. Can you please re-share it. Thank you. ",
    "MikitaBazhkou": "Any news? :). ",
    "tachyon1337": "\nAre you trying to do async work outside of componentDidMount? If so, does the crash continue if you move the work to this method so it doesn't run during the server render?\n\nNo. The react lifecycle events are where any setup would take place. However, any async method must be decorated with the async keyword, which, of course, is the source of the error upon transpilation. And to be clear, the error is occurring server-side. \n\nDoes the component crash if you just use promises?\n\nObviously, it would if any setup wasn't tucked away in an event lifecycle method, given that Promise is part of the window global. \n\nIs regeneratorRuntime defined on the global scope? \n\nI'm AddScript referencing the facebook runtime directly in the startup file. \nMy guess is that babel preset React.NET uses requires additional plugin references to work with the facebook runtime . The myriad of babel presets/plugins is not exactly a straight forward exercise to figure out. And the documentation on how to change up the React.NET babel configuration is not exactly clear. It works fine by default for es6 stuff, but es7 and beyond appears to present a problem.\nThanx for the response, tho...\n. > Have you tried using webpack? It\u2019s possible the on the fly Babel\ncompilation won\u2019t work with what you\u2019re trying to do right now.\nit is not enough of a show stopper at this point to motivate moving to webpack bundling.  I don't rely exclusively on react for client-side. I also use web components, polymer, etc. Webpack does not simplify that workflow. One of the reasons I started using React.NET was the ability to use react/jsx while avoiding being burdened by webpack. . You need to set up the camelCase behavior in the startup file. Something like\n```csharp\napp.UseReact(config => {\n        config\n            .SetJsonSerializerSettings(new JsonSerializerSettings\n            {\n                StringEscapeHandling = StringEscapeHandling.EscapeHtml,\n                ContractResolver = new CamelCasePropertyNamesContractResolver()\n        });\n\n});\n```\n      . > Sure, feel free to submit a pull request for it :D\nhah, I thought you might say that. I've thought about writing a package to do it, but it would be a separate nuget package *.TagHelpers with a dependency on React.AspNet. Easier for me that way.. > Sure, that'd be fine. You could add it to the ReactJS.NET repo if you like. The React.Router package was another community contribution: \nOk, I likely will tackle that within the next month or two, given that my development projects are now starting to a have a nontrivial reliance on React.AspNet. . ",
    "naster01": "I also have the same problem. \nHow can I add plugins and presets directly in C#?\nWorking code without async javascript  :\n```C#\n        Initializer.Initialize(registration => registration.AsSingleton());\n        var container = AssemblyRegistration.Container;\n        container.Register();\n        container.Register();\n    var config = ReactEnvironment.Current.Configuration.BabelConfig;\n    config.Plugins.Add(\"transform-async-to-generator\");       \n    config.Presets.Add(\"env\");\n\n    var script = File.ReadAllText( Path.Combine(AppDomain.CurrentDomain.BaseDirectory, \"test.js\"));\n    var babelScript = ReactEnvironment.Current.Babel.Transform(script);\n\n```. ",
    "tokyo0709": "@Daniel15 This may be my lack of knowledge with regards to React or too simple an example but I went ahead and tested reordering my separated component scripts to this to try to mess up the dependencies,\ncsharp\npublic static class ReactConfig\n{\n    public static void Configure()\n    {\n        ReactSiteConfiguration.Configuration\n            .AddScript(\"~/ClientApp/Components/Comments/Comment.jsx\")\n            .AddScript(\"~/ClientApp/Components/Comments/CommentForm.jsx\")\n            .AddScript(\"~/ClientApp/Components/Comments/CommentList.jsx\")\n            .AddScript(\"~/ClientApp/Components/Comments/CommentBox.jsx\");\n    }\n}\n(I'm following the reactjs.net tutorial and updated code libraries) Where CommentBox has a CommentForm and a CommentList and CommentList has several Comment components. This shouldn't work right since the order is reversed? I ran what I had and didn't notice any issues with the reordering.. ",
    "Yaevh": "It's actually possible to provide a wildcard, at least for a flat directory (subdirectories have to be added manually), just that it's bugged on Windows due to conflicting directory separator between ASP.NET and Windows OS. I've submitted a fix in #631 . ",
    "etherwizard": "The common solution to this in React is to render() multiple children in a simple <div></div>. See if that works.. ",
    "TingAli": "Ahhh okay! I think I have done it wrong in the setup, constantly getting different errors from all over the place whenever I start the web application each time.\nIs there a place where I can find up to date information on getting this up and running from scratch with support of ASP.NET core 2.0 or provide any steps to follow? \nThank you in advance :) . Also, does this contain the newest version of ReactJs? :). ",
    "feanz": "Thanks @dustinsoftware  that was super helpful I did not know this was a feature. I may have to extend it to get the hydrate to happen on page load to hit some other bench marks but this will fix my output cache issue. Yeah i used the recommended @Html.ReactWithInit method.  This does require you to include react and your components scripts before the first component is rendered.  This is not great for page paint speed. I created a custom React method that add the hydrate call to an array functions in js.  Then I add a call at the end of the body that calls all these functions, so that we can move the react script load to the end of the body.  . ",
    "gregsmith-ie": "@feanz did you end up developing a solution for hydrating on page load?. ",
    "mche1987": "Yes, using webpack. The React Configuration portion looks like below:\nReactSiteConfiguration.Configuration\n    .SetLoadReact(false)\n    .SetLoadBabel(false)\n    .AddScriptWithoutTransform(\"~/xxx.js\")\nI've tried flipping the .SetLoadingReact to true and accessing a React-loaded page but there ends up being a breakage at the first @Html.React(\"componentName\", new{...}) helper with the error stating:\nError while rendering \"componentName\" to \"react_gaukTLRKH0SHeZcoqd2EaQ\": ReferenceError: 'setTimeout' is not defined\n  at tryRender (Script Document [14]:1604:9)\n  at d (React.Core.Resources.react.generated.min.js:1:7423)\n  at e.prototype.render (React.Core.Resources.react.generated.min.js:1:13258)\n  at e.prototype.read (React.Core.Resources.react.generated.min.js:1:13169)\n  at W.renderToString (React.Core.Resources.react.generated.min.js:1:16129)\n  at Global code (Script Document [17]:1:1)\nLine: 1604\nColumn:9\nIn my bundled component script file, I find the spot referencing setTimeout, when I comment it out, the page loads but not with my components. I get several errors thrown by my missing static propTypes but I assume that's because the SSR didn't load them to the page to be referenced. (FWIW, in the @Html.React helper when I set it the clientOnly: to equal true, it doesn't break at the setTimeout but the same errors regarding the missing static propTypes is thrown. . Thanks for your help @dustinsoftware. I believe the errors were unrelated to upgrading to React.NET. \nPreviously my Webpack configuration was exposing React ReactDOM and ReactDOMServer on my server-side scripts but it appears when upgrading from React 15 -> 16 and from React.NET 3.0 -> 3.3, things are smoother when using .SetLoadReact(true). I don't know why there were errors using Webpack to expose the libraries in the Global scope but since I'm getting things in a working state, it's not something I'll further explore.\nAgain, thanks!. ",
    "benverhees": "We are experiencing the same issue, 16.4.0 works fine, 16.4.1 gives this error when calling ReactEnvironment.Current\n``\n[ReactNotInitialisedException: React has not been loaded correctly. Please expose your version of React as global variables named 'React', 'ReactDOM' and 'ReactDOMServer', or enable the 'LoadReact' configuration option to use the built-in version of React.]\n   React.JavaScriptEngineFactory.EnsureReactLoaded(IJsEngine engine) +151\n   React.JavaScriptEngineFactory.InitialiseEngine(IJsEngine engine) +215\n   JSPool.JsPool2.CreateEngine() +255\n   JSPool.JsPool2.PopulateEngines() +23\n   JSPool.JsPool2..ctor(JsPoolConfig`1 config) +265\n   React.JavaScriptEngineFactory.CreatePool() +624\n   React.JavaScriptEngineFactory..ctor(JsEngineSwitcher jsEngineSwitcher, IReactSiteConfiguration config, IFileSystem fileSystem) +177\n   lambda_method(Closure , Object[] ) +187\n   React.TinyIoC.TinyIoCContainer.ConstructType(Type requestedType, Type implementationType, ConstructorInfo constructor, NamedParameterOverloads parameters, ResolveOptions options) +618\n[TinyIoCResolutionException: Unable to resolve type: React.JavaScriptEngineFactory]\n   React.TinyIoC.TinyIoCContainer.ConstructType(Type requestedType, Type implementationType, ConstructorInfo constructor, NamedParameterOverloads parameters, ResolveOptions options) +948\n   React.TinyIoC.SingletonFactory.GetObject(Type requestedType, TinyIoCContainer container, NamedParameterOverloads parameters, ResolveOptions options) +157\n   React.TinyIoC.TinyIoCContainer.ResolveInternal(TypeRegistration registration, NamedParameterOverloads parameters, ResolveOptions options) +855\n   React.TinyIoC.TinyIoCContainer.ConstructType(Type requestedType, Type implementationType, ConstructorInfo constructor, NamedParameterOverloads parameters, ResolveOptions options) +520\n[TinyIoCResolutionException: Unable to resolve type: React.ReactEnvironment]\n   React.TinyIoC.TinyIoCContainer.ConstructType(Type requestedType, Type implementationType, ConstructorInfo constructor, NamedParameterOverloads parameters, ResolveOptions options) +794\n   React.TinyIoC.CustomObjectLifetimeFactory.GetObject(Type requestedType, TinyIoCContainer container, NamedParameterOverloads parameters, ResolveOptions options) +157\n   React.TinyIoC.TinyIoCContainer.ResolveInternal(TypeRegistration registration, NamedParameterOverloads parameters, ResolveOptions options) +855\n   React.TinyIoC.TinyIoCContainer.Resolve() +54\n```. ",
    "WonSong": "I had this issue, and thought there was something wrong with the code, but turns out that you have to restart your server app every time you make changes to your react code. . @Daniel15 I double checked and is still the case for my project. like if i change <div>Hello</div> to <div>Hello, world</div> the change won't happen until I restart the app. I will create a bug. . @Neuroforge \nI created this example just for you: https://github.com/WonSong/ReactDotNetTypeScriptWebpackDemo. @naoufal  For vroomjs issue in mac, you need this:\nservices.AddJsEngineSwitcher(options => options.DefaultEngineName = ChakraCoreJsEngine.EngineName)\n                .AddChakraCore();. @Neuroforge \nI created another sample for using JSX: https://github.com/WonSong/ReactDotNetJSXWebpackDemo\nIt's still using dotnet 2.1 though. On Windows . I created a sample app, but seeing the same issue on Mac. Here's the repo: https://github.com/WonSong/ReactDotNetTypeScriptWebpackDemo. i still have this issue in ASP.NET Core MVC 2.1.301 both on 64bit latest MacoOs and 64bit windows 10. Still using same template as the one I provided above. . ",
    "Neuroforge": "Hello,\nI tried again with a number of different combinations. It appears the components are being exposed globally.\nContent/server.js\nhttps://pastebin.com/u2W3ywjt\nContent/Components/Index.js\nhttps://pastebin.com/p1VaCqTQ\nStartUp.cs\nhttps://pastebin.com/XaENyJWj\nComponents/CommentBox.jsx\nhttps://pastebin.com/TDJUyrhd\n~/Views/Home/Index.cshtml\nhttps://pastebin.com/M1XVcnEG\nI've looked at the samples in the repo and tried out some of the differences there...\nStartUp.cs based on https://github.com/reactjs/React.NET/blob/master/src/React.Sample.Router.CoreMvc/Startup.cs\nhttps://pastebin.com/Jm3yuM9X\nThis returns the following....\n\nReactNotInitialisedException: React has not been loaded correctly. Please expose your version of React as global variables named 'React', 'ReactDOM' and 'ReactDOMServer', or enable the 'LoadReact' configuration option to use the built-in version of React.\n\nAlso, when running on a mac i recieve the following issue for VroomJs, not sure if related. - https://github.com/reactjs/React.NET/issues/129\n. Ok. I've always kept 'LoadReact' as True.\nI do get the issue in https://github.com/reactjs/React.NET/issues/555 when i set it to false. I will attempt to use the newer version with LoadReact set to false.. @WonSong Wow! Thank you so much. I will try it out tonight!. @WonSong I wasn't able to get your project working as it needs the new .NET Core SDK.\nI moved all of your setup into a new branch on my repo. Worked perfectly!\nThank you so much. You should update the tutorial with your code.. So in order to use jsx i just need to alter web.config.js to use jsx files and loaders, correct?. @WonSong Amazing.\nWorks great.. @ChadBurggraf Where in the code do you add that?\nI am seeing this error since adding Video.js via npm.. @dustinsoftware When will the changes that were merged be released via Nuget? Or do i have to build from source now?. @dustinsoftware Awesome. Thank you for the response.\nSo i've downgraded React and React-Dom to 16.4.0 but still seeing the error.\n\nDeleted react and react-dom folders in node_modules\nCalled npm install react@16.4.0 and npm install react@16.4.0\nCalled webpack --config webpack.config.js\n\nThe version number inside of react.development.js is 16.4.0 and same with react-dom.development.js\nStill seeing the timeout issue.\nDoes Webpack or the JsEngineSwitcher affect this?\n. I will try using another js library with timeout. Any ideas on a good one to try?\nI am using Webpack and ChakraCore js engine.. ",
    "knyzorg": "I have wasted a lot of time struggling with this. Is there an ETA?. I no longer have a project using it. The general buginess and unreliability of it made me switch away.. Interestingly, once I disabled the re-use of the rendering engine, it ceased to be an issue. Could it be that a renderer is persisting through the updates?. Oh my, thank you so much. I struggled a lot with that. \nShould be added somewhere to this page: https://reactjs.net/guides/server-side-rendering.html\nHow much of a performance hit is to be expected?. JSDOM relies on the full node environment. It wants fs, net, tls, etc.\nI failed to find a more stripped down version of jsdom which doesn't need these.. What is the advantage of chakra over node, in theory?. ",
    "LinusCenterstrom": "Having the same issue here, turning off re-use fixed it for me too (I'm running version 3.2 on aspnet core 2.1).\nBeen running it in a Mvc 4 app for a long time without seeing this issue (exact same configuration and bundle), so it seems to be core-specific. \nI've temporarily turned off re-use of the rendering engine when running locally and I would recommend anyone else to do the same as a workaround until this is fixed.\nLet me know if you need anymore information to identify the problem.. Not sure exactly how that helps me. As i said, the registration of JavascriptEngineSwitcher works fine as long as I do not replace the registration of IJavascriptEngineFactory with my own implementation. \nOr is there something in JavascriptEngineSwitcher I can override instead to provide my own pooling and engine initialization strategy?. Ok, found the issue.\nThe JavascriptEngineFactory previously took a JsEngineSwitcher in the constructor while the new version takes an IJsEngineSwitcher. \nI had not made this change in my custom JavascriptEngineFactory.\nAfter updating mine to take an IJsEngineSwitcher instead it worked correctly.\nSomehow it still seemed to find a registration for JsEngineSwitcher but it was an empty one. No idea where it came from.\nFeel free to close this.. It happens about once or twice a week in applications with hundreds of daily users. \nI'm not able to test with a debug build in production I'm afraid.. The error likely occurs when the application pool is recycled. I do not use any other packages that use the JavaScript Engine Switcher as far as I know. ",
    "ChadBurggraf": "As a temporary workaround for folks, you can add the following shim to the beginning of your configuration scripts:\nhttps://gist.github.com/ChadBurggraf/4c4abef515852aa1efee04478a8a8641. ",
    "DanBuild": "Website preview is ready!\nBuilt with commit 045370e012738f810e9d7e420cfc4989513bf684\nhttps://deploy-preview-561--reactnet.netlify.com/. Website preview is ready!\nBuilt with commit 7e195e19b4b57954c93631bca3f6e504f7687f95\nhttps://deploy-preview-581--reactnet.netlify.com/. Website preview is ready!\nBuilt with commit 0a730713a122cd3abd61e5eb35592fe9993c6576\nhttps://deploy-preview-582--reactnet.netlify.com/. Website preview is ready!\nBuilt with commit 43f7f1c82b307704f536f6943c432a5bb15ed7ca\nhttps://deploy-preview-587--reactnet.netlify.com/. Website preview is ready!\nBuilt with commit b56d1524d783537962e13d86b1e4a0d2cf660226\nhttps://deploy-preview-591--reactnet.netlify.com/. Website preview is ready!\nBuilt with commit 467923c23edef1bb4a8f3f5ecd56d8132414b7c5\nhttps://deploy-preview-603--reactnet.netlify.com/. Website preview is ready!\nBuilt with commit b9dfe1d4efd8025060cd4ef2ae6c0177a7a7f5eb\nhttps://deploy-preview-604--reactnet.netlify.com/. Website preview is ready!\nBuilt with commit fe33b72e6fbc473003105e372c9120579a4e2af3\nhttps://deploy-preview-614--reactnet.netlify.com/. Website preview is ready!\nBuilt with commit 5c94ac66bb64ad00cd4df90177f7096c37404c28\nhttps://deploy-preview-615--reactnet.netlify.com/. Website preview is ready!\nBuilt with commit 585450c26958e1f3778e4e7630afd585e0a110f1\nhttps://deploy-preview-628--reactnet.netlify.com/. Website preview is ready!\nBuilt with commit 3cd5d13ee75cab4184a7f06efb39b8efc1be0f55\nhttps://deploy-preview-641--reactnet.netlify.com/. Website preview is ready!\nBuilt with commit 559e59a32244f3f49f47dac87d4fcb8bc6fd574a\nhttps://deploy-preview-652--reactnet.netlify.com/. Website preview is ready!\nBuilt with commit 6b9003e40ee2e62dc440e968bb6facc576340e3a\nhttps://deploy-preview-662--reactnet.netlify.com/. ",
    "kumarrk5": "https://github.com/Taritsyn/JavaScriptEngineSwitcher/wiki/Registration-of-JS-engines\nI followed above link to add JS engine, but i got another issue Now i got this error \n\"HTTP Error 502.3 - Bad Gateway\"\nCan you please some other link to resolve this issue ? or some steps ...\nRefer these screenshots... \n\n\n. ",
    "dyamon-cz": "Solution is to install ChakraCore NuGet package. Follow the steps in the documentation here https://reactjs.net/guides/chakracore.html.. ",
    "ergatech": "I am using BabelBundle for \u201c\u201d \nI have followed code at layout before @Html.ReactInitJavaScript()\n",
    "mchound": "No version I've tried is working. I had this behavior on 3.3.0 as well. The only way I've found, that works, is to set ReuseJavaScriptEngines to false.\nIs there any cahing of the rendered result? I'm running .NET Framework 4.7.2 and I know they made some changes regarding caching since earlier framework versions.. Sorry but I can't share the repo or the link to the website. But I can share some snippets from the code if that would help? . ",
    "Saturate": "Yes, take a look at #602 . Would be nice with en example on how to do SSR with https://github.com/cssinjs/react-jss I'm having a hard time wrapping my head around this.. Thanks, this is pretty cool. When is the timeline for release of this and #589 ?. To make it easy, I'll add a link: #615\nIt dosen't build yet, I see.. Thanks @dustinsoftware couldn't find it, so some docs would be nice. If I find some spare time, I'll make a PR - if someone doesn't beat me to it... From this we were able to do what I wanted. Thanks guys.\nI still feel like it would be a pretty common use-case, so maybe consider to include it at some point.\nThanks again!. ",
    "84pennies": "@dustinsoftware Hi there! Thanks so much for the straightforward reply. I am new to React.NET but have been using ReactJS for some time with webpack/babel etc.\nWhere would I go to configure babel in my MVC project? Or would it just use the same config that node uses when it builds my project.\nAlso, is it possible to make the transpiler work with decorators like the ones used in MobX?\nThanks!. ",
    "teimaj": "Created a PR that will resolve this #587 . Created #591 to resolve this. ",
    "anti-aguilar": "Thanks for the quick reply man! I'm again real novice so not sure where to place the UMD build definition with my ReactJS.net project? I'm assuming I place it within my index.cshtml that's housed under my home view?\n\n. ",
    "bhagwati1586": "I noticed that nuget package is not containing the react 16.3. By when can we expect the latest version of react integrated with the nuget package and use context API.. ",
    "jyotidhyani": "Facing similar issue while using Context API with server side rendering. Please help with the issue so that context API can be used with server side rendering also. Thanks.. ",
    "ridhisood": "Hi, even I have been looking over in this issue, and will need React 16.3 nuget package on urgent basis. Thank you.. ",
    "kojakangas": "Hi Dustin,\nNo? It looks like the tutorial-code was written with ASP.NET Core in mind. Is there really a way I can compare? If it means anything, I'm using Visual Studio 2017. I know this site has said that the coding experience would be similar in 2017, but I'm still not convinced. Where's the first place to start in comparison here?. Hi Dustin,\nLooking at that seemed helpful, but I noticed something else - when following all of the steps of the tutorial, and ensuring that my Tutorial.jsx file would load in ReactConfig.cs, the HTML helpers would NOT be loadable. However, as soon as I closed my solution to open another one, and then opened the tutorial solution I have, the HTML helpers were in fact detected!\nThere's just one final thing. I can make the @Html.React like helper calls, but it appears nothing is mapping to the CommentBox being rendered by the server in my cshtml file. Can I get an idea on how I would pass the CommentBox from my Tutorial.jsx file? I've read about using the export method, but I can't use export default (default being a reserved keyword) and I'm not entirely sure I got down pat the export method for a component in the jsx file. If you feel I need to dig elsewhere, I understand.. I feel like I'm getting a step closer?\nBut it seems that even though I forgot to pass the comment model from the server, I fixed that in the Index ActionResult method per the tutorial, only to find that the CommentBox initially renders, but then does not retrieve divs from the server correctly afterward:\nWarning: Expected server HTML to contain a matching <div> in <div>.\nI'm not sure what's really wrong at this point, can you fill me in? I have the following relevant files, I think:\nTutorial.jsx\n```\n//import React from 'react'\nclass CommentBox extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { data: this.props.initialData };\n        this.handleCommentSubmit = this.handleCommentSubmit.bind(this);\n    }\n    loadCommentsFromServer() {\n        const xhr = new XMLHttpRequest();\n        xhr.open('get', this.props.url, true);\n        xhr.onload = () => {\n            const data = JSON.parse(xhr.responseText);\n            this.setState({ data: data });\n        };\n        xhr.send();\n    }\n    handleCommentSubmit(comment) {\n        const comments = this.state.data;\n        // Optimistically set an id on the new comment. It will be replaced by an\n        // id generated by the server. In a production application you would likely\n        // use a more robust system for ID generation.\n        comment.Id = comments.length + 1;\n        const newComments = comments.concat([comment]);\n        this.setState({ data: newComments });\n        const data = new FormData();\n        data.append('Author', comment.Author);\n        data.append('Text', comment.Text);\n        const xhr = new XMLHttpRequest();\n        xhr.open('post', this.props.submitUrl, true);\n        xhr.onload = () => this.loadCommentsFromServer();\n        xhr.send(data);\n    }\n    componentDidMount() {\n        window.setInterval(() => this.loadCommentsFromServer(), this.props.pollInterval);\n    }\n    render() {\n        return (\n            \nComments\n\n\n\n        );\n    }\n}\nclass CommentList extends React.Component {\n    render() {\n        const commentNodes = this.props.data.map(comment => (\n            \n                {comment.Text}\n                \n            ));\n        return (\n            \n                {commentNodes}\n      \n        );\n    }\n}\nclass CommentForm extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { author: '', text: '' };\n        this.handleAuthorChange = this.handleAuthorChange.bind(this);\n        this.handleTextChange = this.handleTextChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n    handleAuthorChange(e) {\n        this.setState({ author: e.target.value });\n    }\n    handleTextChange(e) {\n        this.setState({ text: e.target.value });\n    }\n    handleSubmit(e) {\n        e.preventDefault();\n        const author = this.state.author.trim();\n        const text = this.state.text.trim();\n        if (!text || !author) {\n            return;\n        }\n        this.props.onCommentSubmit({Author: author, Text: text});\n        this.setState({ author: '', text: '' });\n    }\n    render() {\n        return (\n            \n\n\n\n\n        );\n    }\n}\nclass Comment extends React.Component {\n    rawMarkup() {\n        const md = new (global.Remarkable || window.Remarkable)();\n        const rawMarkup = md.render(this.props.children.toString());\n        return { __html: rawMarkup };\n    }\n    render() {\n        return (\n            \n\n                    {this.props.author}\n                \n\n\n        );\n    }\n}\n//module.exports = CommentBox\n//const data = [\n//    { Id: 1, Author: \"Daniel Lo Nigro\", Text: \"Hello ReactJS.NET World!\" },\n//    { Id: 2, Author: \"Pete Hunt\", Text: \"This is one comment\" },\n//    { Id: 3, Author: \"Jordan Walke\", Text: \"This is another comment\" }\n//];\n//ReactDOM.render(\n//    ,\n//    document.getElementById('content')\n//);\n```\nIndex file:\n```\n@model IEnumerable\n<!DOCTYPE html>\n\n\n\n\n@ViewBag.Title - My ASP.NET Application\n    @Styles.Render(\"~/Content/css\")\n    @Scripts.Render(\"~/bundles/modernizr\")\n\n\n\n\n\n\n\n\n                @Html.ActionLink(\"Application name\", \"Index\", \"Home\", new { area = \"\" }, new { @class = \"navbar-brand\" })\n            \n\n\n\n                        @Html.ActionLink(\"Home\", \"Index\", \"Home\", new { @class = \"nav-link\" })\n                    \n\n                        @Html.ActionLink(\"About\", \"About\", \"Home\", new { @class = \"nav-link\" })\n                    \n\n                        @Html.ActionLink(\"Contact\", \"Contact\", \"Home\", new { @class = \"nav-link\" })\n                    \n\n\n\n\n\n        @Html.React(\"CommentBox\", new\n  {\n    initialData = Model,\n    url = Url.Action(\"Comments\"),\n    submitUrl = Url.Action(\"AddComment\"),\n    pollInterval = 2000\n  })\n    \n<div class=\"container body-content\">\n    @RenderBody()\n    <hr />\n    <footer>\n        <p>&copy; @DateTime.Now.Year - My ASP.NET Application</p>\n    </footer>\n</div>\n\n@Scripts.Render(\"~/bundles/jquery\")\n@Scripts.Render(\"~/bundles/bootstrap\")\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/react/16.4.0/umd/react.development.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.4.0/umd/react-dom.development.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/remarkable/1.7.1/remarkable.min.js\"></script>\n<script src=\"@Url.Content(\"~/Scripts/Tutorial.jsx\")\"></script>\n@RenderSection(\"scripts\", required: false)\n@Html.ReactInitJavaScript();\n\n\n\nRouteConfig.cs:\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Web;\nusing System.Web.Mvc;\nusing System.Web.Routing;\nnamespace ReactExamplePractice\n{\n    public class RouteConfig\n    {\n        public static void RegisterRoutes(RouteCollection routes)\n        {\n            routes.IgnoreRoute(\"{resource}.axd/{*pathInfo}\");\n        routes.MapRoute(\n            name: \"Comments\",\n            url: \"comments\",\n            defaults: new { controller = \"Home\", action = \"Comments\" }\n        );\n\n        routes.MapRoute(\n            name: \"NewComment\",\n            url: \"comments/new\",\n            defaults: new { controller = \"Home\", action = \"AddComment\" }\n            );\n\n        routes.MapRoute(\n            name: \"Default\",\n            url: \"{controller}/{action}/{id}\",\n            defaults: new { controller = \"Home\", action = \"Index\", id = UrlParameter.Optional }\n        );\n    }\n}\n\n}\nHomeController.cs:\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Web;\nusing System.Web.Mvc;\nusing System.Web.UI;\nusing React;\nusing ReactExamplePractice.Models;\nnamespace ReactExamplePractice.Controllers\n{\n    public class HomeController : Controller\n    {\n        private static readonly IList _comments;\n    static HomeController()\n    {\n        _comments = new List<CommentModel>\n        {\n            new CommentModel\n            {\n                Id = 1,\n                Author = \"Daniel Lo Nigro\",\n                Text = \"Hello ReactJS.NET World!\"\n            },\n            new CommentModel\n            {\n                Id = 2,\n                Author = \"Pete Hunt\",\n                Text = \"This is one comment\"\n            },\n            new CommentModel\n            {\n                Id = 3,\n                Author = \"Jordan Walke\",\n                Text = \"This is *another* comment\"\n            },\n        };\n    }\n\n    [OutputCache(Location = OutputCacheLocation.None)]\n    public ActionResult Comments()\n    {\n        return Json(_comments, JsonRequestBehavior.AllowGet);\n    }\n\n    [HttpPost]\n    public ActionResult AddComment(CommentModel comment)\n    {\n        //Create the fake ID for the comment\n        comment.Id = _comments.Count + 1;\n        _comments.Add(comment);\n        return Content(\"Success :)\");\n    }\n\n    public ActionResult Index()\n    {\n        return View(_comments);\n    }\n\n    public ActionResult About()\n    {\n        ViewBag.Message = \"Your application description page.\";\n\n        return View();\n    }\n\n    public ActionResult Contact()\n    {\n        ViewBag.Message = \"Your contact page.\";\n\n        return View();\n    }\n}\n\n}\n```\nAny insights on this are appreciated!. OK, @dustinsoftware . I think I see the issue.\nAn interesting thing happens when I decide to render the React elements with \"serverOnly\" enabled:\n@Html.React(\"CommentBox\", new\n  {\n    initialData = Model,\n    url = Url.Action(\"Comments\"),\n    submitUrl = Url.Action(\"AddComment\"),\n    pollInterval = 1000000,\n  }, serverOnly:true)\nWhich is, the markup comes over JUST fine, but of course never updates, and I can't submit comments. This tells me that not only is the client component essential for the whole process to work, but it leaves this one question: how can I, in fact, ensure that the data being polled from the server as the client comes back the same as the data initially rendered by the server? The JSON coming from the server when it's being polled is correct and maps correctly when I revert to purely client side rendering.\nIt just seems that the data doesn't match when it initially renders from the server with the @Html.React helper. @Html.InitJavaScript() doesn't appear to completely help with this, either. Does @Html.React NOT render with JSON data to map initially?\nHow can I complete this missing gap?. @dustinsoftware \nEven more interesting. When I print out the data being passed instead of the mapped data to comments like below:\nclass CommentList extends React.Component {\n    render() {\n        const commentNodes = this.props.data.map(comment => (\n            <Comment author={comment.Author} key={comment.Id}>\n                {comment.Text}\n            </Comment>\n        ));\n        return (\n            <div className=\"commentList\">\n                {this.props.data.toString()}\n      </div>\n        );\n    }\n}\nI see the following output on my page:\n[object Object],[object Object],[object Object]\nI definitely think the data being passed from the server is not the same as it would be if I just rendered client side. Any idea why that might be?. Turns out it was actually an issue with the Remarkable library from the tutorial. That section should be updated according to the previous post here:\nhttps://github.com/reactjs/React.NET/issues/349. ",
    "RAAAJohnson": "Thanks for the explanation Daniel15. Right coka it does look similar and I am running on .NET Core.. ",
    "DemiMarie": "Partial stack trace:\nException has occurred: CLR/System.InvalidOperationException\nAn exception of type 'System.InvalidOperationException' occurred in Microsoft.Extensions.DependencyInjection.dll but was not handled in user code: 'Cannot resolve scoped service 'React.AspNet.HttpContextLifetimeProvider+PerRequestRegistrations' from root provider.'\n  at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor.ValidateResolution(Type serviceType, IServiceScope scope, IServiceScope rootScope)\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceProviderEngine.GetService(Type serviceType, IServiceScope scope)\n(some frames skipped)\nat React.AspNet.ReactBuilderExtensions.EnsureServicesRegistered(IApplicationBuilder app)\n   at React.AspNet.ReactBuilderExtensions.UseReact(IApplicationBuilder app, Action`1 configure, BabelFileOptions fileOptions). Do you know any workarounds?\nOn Thu, Sep 27, 2018, 4:30 PM nightblade9 notifications@github.com wrote:\n\nI, too, get this with ASP.NET Core 2.1. This is similar to this issue\nhttps://github.com/reactjs/React.NET/issues/433, which talks about (and\nfixes) ASP.NET Core 2.0; the proposed fix doesn't work on 2.1; you get\nthis error instead:\nInvalidOperationException: The 'Configure' method in the type 'ReactDemo.Startup' must have a return type of 'Void'.\nMicrosoft.AspNetCore.Hosting.Internal.StartupLoader.FindMethod(Type startupType, string methodName, string environmentName, Type returnType, bool required)\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/reactjs/React.NET/issues/601#issuecomment-425232179,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AGGWB6ISeSowDL-oqFDc2moctAltQlkWks5ufTVxgaJpZM4W46OX\n.\n. \n",
    "nightblade9": "I, too, get this with ASP.NET Core 2.1. This is similar to this issue, which talks about (and fixes) ASP.NET Core 2.0; the proposed fix doesn't work on 2.1; you get this error instead:\n```\nInvalidOperationException: The 'Configure' method in the type 'ReactDemo.Startup' must have a return type of 'Void'.\nMicrosoft.AspNetCore.Hosting.Internal.StartupLoader.FindMethod(Type startupType, string methodName, string environmentName, Type returnType, bool required)\n```. @DemiMarie no, I haven't figured out any work-around yet. I tried installing the .NET Core 2.0 SDK, hoping Visual Studio would use that instead, but it doesn't; I get a compile-time error when I downgrade my project to 2.0, about some library that's .NET Core 2.1, but not referenced in NuGet etc.. Interestingly,Visual Studio now includes a template for a \"React\" app. I don't think it's ReactJS.NET, I think it's just vanilla React; that template seems to run fine.. I did some more digging with the .NET Core 2.1 template.\nIf you add this code to the ConfigureServices method, not with Configure as the tutorial specifies:\nservices.AddSingleton<IHttpContextAccessor, HttpContextAccessor>();\nservices.AddReact();\nYou get an exception on the app.UseReact(config => line. The exception is:\nInvalidOperationException: Cannot resolve scoped service 'React.AspNet.HttpContextLifetimeProvider+PerRequestRegistrations' from root provider.\nIt looks like HttpContextLifetimeProvider is an internal class defined here, and this is something AddReact is supposed to add.\nI added debugger points to make sure AddReact is being hit, and it is.\nCan someone from the ReactJS.NET core team help?. ",
    "HalmonLui": "Hi Taritsyn,\nThank you for informing me about the newer version. Worked as the instructions said.. ",
    "ahiyalala": "Hi @Taritsyn ! Thanks for your reply.\nChakraCore and V8 is already included in our solution and I've followed installing the native assemblies (JavaScriptEngineSwitcher.V8.Native.win-x86 and JavaScriptEngineSwitcher.V8.Native.win-x64.) but the app still renders the same error.  Am I missing some steps?. Hi!\nIt's been resolved now. I just have to add this on Configure:\nengineSwitcher.EngineFactories.AddChakraCore()\n                                          .AddV8();. ",
    "unwired4ever": "Ok thx, I may try that.\nBut what about third-party libraries that are using 'import' such as office ui fabric react?\nIs there any way to configure the BabelBundle that can transpile that specific syntax?\n. ",
    "Taerarenai": "Hello!\nIf you mean this one ( https://github.com/reactjs/React.NET/tree/master/src/React.Sample.Webpack.CoreMvc) i've already looked at it as i said in my posted issue. It helped solve some of the problems, but the rendering problem came up and by comparing the code i can't see any major differences (except file names and paths).. By using module.exports i assume you mean that i change my code from require('expose-loader.....) to use module.exports right? (still learning here).\nI changed it to this -> \nmodule.exports = {\n    RootComponent: require('./App'),\n    React: require('react'),\n    ReactDOM: require('react-dom'),\n    ReactDOMServer: require('react-dom/server')\n};\nAnd now i'm getting React.Exceptions.ReactNotInitialisedException: ReactJS.NET has not been initialised correctly. Please ensure you have called services.AddReact() and app.UseReact() in your Startup.cs file. ---> React.TinyIoC.TinyIoCResolutionException: Unable to resolve type: React.ReactEnvironment ---> React.TinyIoC.TinyIoCResolutionException: Unable to resolve type: React.JavaScriptEngineFactory ---> React.Exceptions.ReactNotInitialisedException: React has not been loaded correctly: missing (React, ReactDOM, ReactDOMServer).Please expose your version of React as global variables named 'React', 'ReactDOM', and 'ReactDOMServer', or enable the 'LoadReact'configuration option to use the built-in version of React.\nservices.AddReact() and app.UseReact() is already added.\nEdit: I've tried doing module.exports in my component (App), but its a read-only prop so i couldnt set it. The module.exports from main.js doesnt seem to work for my component. \nNot sure if it matters but ill add that i'm trying to make the server-side rendering work because i need access to the model passed into the view.\n. I think it was because i was using the newest version of babel (@babel/core). I switched to the package.json from the example and i managed to get it working after installing a few more packages (such as babel-stage-2).\nI have one more question tho', after building my page even tho' everything seems to load fine (at least visually), i see this error in the browsers console ->\nCall stack: Error\n   at MockConsole.prototype._handleCall (React.Core.Resources.shims.js:27:3)\n   at Anonymous function (bundle.js:39300:1)\n   at __webpack_require__ (bundle.js:20:12)\n   at Anonymous function (bundle.js:39249:47)\n   at Anonymous function (bundle.js:39249:29)\n   at __webpack_require__ (bundle.js:20:12)\n   at Anonymous function (bundle.js:12701:1)\n   at __webpack_require__ (bundle.js:20:12)\n   at Anonymous function (bundle.js:63:11)\n   at Global code (bundle.js:1:11)\nAny idea what couldve caused it? \nThanks for taking the time to answer me, appreciate it ^^.\n~~EDIT: Seems like i've spoken a bit too soon. My project doesnt seem to load React on Azure (the page loads, but no react, no browser console errors). Is there another step that needs to be taken to be able to upload the app to azure?~~\n^Ignore that, it was because of azure platform (32bit). Now only if i could find out why that error shows up.. @dustinsoftware Did a bit of debugging on the client side and it seems like the console error comes from a \"weird\" place.\n\"_Component is not defined\"\nAny tip on why this happens? Functionality doesnt seem to be affected (unless this is the reason for which my app seems to load slower than a client side render & it lods first 2 text fields and then the Fabric UI List that i have with items from the backend).\nEdit: I do haveimport React, {Component} from 'react'; in my component and then i do export default class ListItems extends Component {\n^Apparently the error was because i had a console log before my React component. ReactJS.NET does not like console logs before loading the component apparently. Moving it to \"componentDidMount()\" got rid of the error..\n. I'm using SSR to send a token from the back-end. I tried adding compression (like this https://www.softfluent.com/blog/dev/Enabling-gzip-compression-with-ASP-NET-Core )\nAnd serving the .js.gz file like this\napp.UseReact(config =>\n            {\n                config\n                    .SetReuseJavaScriptEngines(true)\n                    .SetLoadReact(false)\n                    .SetLoadBabel(false)\n                    .AddScriptWithoutTransform(\"~/dist/bundle.js.gz\");\n                //.AddScript(\"./React/App.jsx\");\n            });\nBut React.NET is throwing an error because it doesn't like .gz\nIs my approach wrong in this situation? Could you perhaps throw me an example ?. Hi @dustinsoftware ,\nThanks for the link. Enabling it on the app did the trick, hopefully this saves me some time before i being optimizing it... ",
    "kpkozak": "The latest one, 3.4.1 \nI've found indeed similar thing - https://github.com/reactjs/React.NET/issues/521. It is connected, but I think a different one.\nReactComponent is checking if the component is client only (that means, if clientOnly parameter of @Html.React(... was set to true. However, it is not checking if server side rendering wasn't completely disabled via config (which effectively means that all components are client only, regardless of clientOnly flag). That scenario should also be covered there. So, in ReactComponent.cs, instead of \ncs\nwriter.Write(this.ClientOnly ? \"ReactDOM.render(\" : \"ReactDOM.hydrate(\");\nit should be more like\ncs\nwriter.Write(!_configuration.UseServerSideRendering || this.ClientOnly ? \"ReactDOM.render(\" : \"ReactDOM.hydrate(\");\nMy use case was that I configured ReactJS.Net to disable SSR in debug mode to speed up and ease development, and leave it enabled when in release mode or deployed to any non-development environment, but this caused errors listed above on dev machine. \nI'll try to do a PR during a weekend if I find some time for it.. ",
    "isc30": "I'm using incremental JS dependencies (I only add JS files when I need them by calling AddScriptWithoutTransform). The first component gets rendered properly but every next component doesn't take the new scripts in consideration because the engine was already instantiated and reused. Emptying the engine pool on demand is exactly what I need for this case.\nAs a temporary fix, how can I turn off engine reuse?\nThanks. for future readers:\nReactSiteConfiguration.Configuration.SetReuseJavaScriptEngines(false). ",
    "mootinator": "I was probably being a little hasty here. The check should probably be around the function instead of in it.\nAnd I'm uncertain whether or not this would somehow make the case where !_config.LoadReact && !_config.UseServerSideRendering break.. ",
    "adamjford": "Hmm, I don't use the bundler code mentioned in those issues (my .jsx files are ran through Babel via the WebCompiler extension, then the bundles are generated by the BundlerMinifier extension and bundleconfig.json, all at design-time). However, to verify this bundling is also not a problem, I just tried switching from adding my ReactJS library bundle to including the react, react-dom, and react-dom-server files directly, and I still get the same error.\nI also still get the same error if I don't include my local copies of the React libraries, and call .SetLoadReact(true) instead of .SetLoadReact(false).. Thank you for the list of things to try!\n\nI enabled all CLR exceptions, and no exceptions occurred that seemed to have anything to do with loading the React environment, or JS engines, etc.\nI then tried switching to ChakraCore. No change.\nI then cloned this repo and built & ran React.Sample.Mvc4. Worked fine, of course. \ud83d\ude13\n\nI'll try using the 4.0.0-rc2 version of the package and see if it helps.. Unfortunately, running 4.0.0-rc2 didn't cause anything different to occur. Exact same exceptions occur, with no new InnerExceptions or anything.\nGuess I'm back to figuring out why React.Sample.Mvc4 works and my project doesn't.. Alright, I replaced my startup code with exactly this file in App_Start\\, to see if I could at least get to a missing component exception or something instead when I try to use a ReactJS.NET Html helper:\n```csharp\n/\n * Copyright (c) Facebook, Inc. and its affiliates.\n \n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nusing JavaScriptEngineSwitcher.Core;\nusing JavaScriptEngineSwitcher.V8;\n[assembly: WebActivatorEx.PreApplicationStartMethod(typeof(React.Sample.Mvc4.ReactConfig), \"Configure\")]\nnamespace React.Sample.Mvc4\n{\n    public static class ReactConfig\n    {\n        public static void Configure()\n        {\n            ReactSiteConfiguration.Configuration\n                                  .SetReuseJavaScriptEngines(true);\n        JsEngineSwitcher.Current.DefaultEngineName = V8JsEngine.EngineName;\n        JsEngineSwitcher.Current.EngineFactories.AddV8();\n    }\n}\n\n}\n```\nUnfortunately, I still get the exact same exception as above.\nI'm starting to think something about how my project is set up is preventing PreApplicationStartMethod code from running in general (which would indeed cause WebInitializer.Initialize() to not get called, and thus the React environment would not be initialized), but I haven't had any luck searching for what the cause of that could be. Going to keep digging.. Tried running 4.0.0, no change.. ",
    "btholt": "I'll ping some people on the DevOps team.. ",
    "hross": "Looks like they already figured out that the paths were hard coded in some of the csproj files and updated with the correct variables.. ",
    "LanChandrasekaran": "Thank you for the help. Looking at the document. Let me get back if I have any questions.. ",
    "mukhtorov": "Thank you, bro. It is working, I did a silly mistake.  As you said React and ReactDom is case sensitive, I changed ReactDom to ReactDOM. ",
    "swcarter007": "Allowing initReact call to be deferred to allow loading of bundles via type=\"modules\" script tag.. ",
    "BigBoySamo": "Alright, thank you for the clarification.. No worries :) Got it running now and I'll upgrade to 4.0 as soon as it's ready. ",
    "jerrywithaz": "Thanks for the response Justin.\nI am finally starting to understand how everything works and my development environment is coming together thanks to tools like React Storyboard and Webpack Dev Server.\nI am going to close this ticket but whenever I have my finally Development to Production Pipeline working how I want it, I will post the information here for anyone else who may be struggling.\nThanks again.. That's pretty much where I ended up going after doing some more research. Thanks for your help!. ",
    "rarkins": "Hi, I am the author of Renovate Bot but don't personally use .NET packages so I'm doing a little bit of guessing here. My goal is to combine packages that could or should be upgraded at the same time, so that you get less PRs.\nYou can see the results of these groupings in my fork: https://github.com/renovate-tests/React.NET/pulls\nPlease review these groupings and suggest if any more should be added or if any of the ones I propose are too aggressive.. Great, feel free to @ me from within an issue or PR if you'd like me to check or suggest anything. ",
    "awesomebob": "This may have nothing to do with this library, it may be something else on my end.\nI will continue to investigate and re-open if I find more helpful information.. ",
    "simonssspirit": "@Taritsyn Thank you for the suggestions. I tried it but got an error when adding the packages. I checked and I have both installed in version 2.4.1? Is that ok?\n@dustinsoftware I tried that, and the application started with no errors.. The used version is 3.4.1.. Thank you, everyone, for the suggestions.\nI was able to run the project and render it successfully using this:\nReactSiteConfiguration.Configuration\n            .SetLoadBabel(false)\n            .AddScriptWithoutTransform(\"~/dist/server.bundle.js\");\nThe issue is that now there is no scripts loaded, on the pre rendered HTML which leaves the page with uninteractive components.. Yes I do, it is the same one referenced in the ReactConfig.\nIs the other matter?\nThis is how the Index.cshtml looks like:\n```\n@{\n    Layout = null;\n}\n<!DOCTYPE html>\n\n\nHello React\n\n\n\n\n\n    @Html.ReactInitJavaScript()\n    @Html.React(\"IndexServer\", new\n{\n    initialComments = \"test\"\n})\n\n. @dustinsoftware that was it, thank you so much for the assistance to all involved.. ",
    "funhippo": "But i'm using webpack with babel... That is part of my webpack.config.js:\n    entry: './wwwroot/scripts/index.jsx',\n    module: {\n        rules: [\n            {\n                test: /.js$/,\n                exclude: [/node_modules/],\n                loader: \"babel-loader\"\n            },\n            {\n                test: /.jsx$/,\n                exclude: [/node_modules/],\n                loader: \"babel-loader\"\n            }\n.babelrc:           {  \"presets\": [  \"es2015\", \"react\" ] }      \nAnd all stuff (bootstrap, jquery and other imports) were packed without errors.\nCan I execute some react components from bundle \"index.js\" without @Html.React ?. ",
    "apohto": "Of course I'm using React.Core, React.Web, and React.Web.Mvc4 all v4.0.0. I'm using JavaScriptEngineSwitcher.Core, JavaScriptEngineSwitcher.V8, JavaScriptEngineSwitcher.V8.Native.win-x64, and JavaScriptEngineSwitcher.V8.Native.win-x86 all v3.0.0. I'm also using Microsoft.AspNet.Mvc version 5.2.3.\nIt's also relevant to mention that I'm trying to do this in an EPiServer project using EPiServer.CMS v11.10.1.. Ok I know for a fact that the c++ 2017 redistributable is installed on my machine do I need a particular version? I'll can also try a different engine and update with how it goes.. No luck swapping to ChakraCore. @Taritsyn Yes I'm calling Configure in my Global.asax. Here:\n```\npublic class EPiServerApplication : EPiServer.Global\n{\n    protected void Application_Start()\n    {\n        AreaRegistration.RegisterAllAreas();\n        ReactConfig.Configure();\n}\n\n}\n```\nAfter some testing it looks like Global.asax gets run before I hit my \"ReactJS.NET has not been initialised correctly.\" error, and the ReactConfig.Configure() gets called. So I don't think that's the issue. I think the real issue might be getting smothered by the \"ReactJS.NET has not been initialised correctly.\" error. Maybe the underlying issue is the error I see when not trying to do server side rendering: \"TinyIoCResolutionException: Unable to resolve type: React.Web.BabelHandler\". @Taritsyn @dustinsoftware In a normal Asp.Net Mvc project where does React get initialized? Maybe there's something different about how or where an EPiServer project initializes things that is causing React to not be initialized even though under the wraps it's just an Mvc project?. @Taritsyn @dustinsoftware I figured out my issue. It was as I thought a problem with my Babel setup not with React. I think the takeaway from this is that ReactJS.Net needs to be better about not smothering other error messages. Thank you both for your help. I'll close this now.. ",
    "tehOPEologist": "this error is coming from an @Html.React declaration, so i assume it's from the SSR.  component classes do this fine.  if you need an example repo i'll throw one together. both react and react-dom are on 16.8.1. here's a reproducable repo to verify the issue i'm having: https://github.com/tehOPEologist/Test\nclone repo, go into Test project directory, run npm i, run npm run build, then open the solution file and start the debugger and it will attempt to go to the index page that has the @Html.React calls, and it'll error on the \"Bar\" entry that uses hooks.\nif you comment the \"Bar\" entry, you can see that the \"Foo\" entry works without issue.  if you comment the \"Foo\" entry, Bar will still error, as normally it has no issue hydrating multiple entries on a single page, as long as they're component classes and not component functions with hooks it seems.\nplease let me know if you need anything else from me to replicate this issue.  i really want to utilize hooks, but this issue is stopping that entirely.  thank you!. thank you so much for your response and the information!  i'm glad my naivety with the SetLoadReact method and adding ReactDOMServer to global helped the library with you seeing how to chunk out the vendors!  xD. ",
    "olafur164": "Nvm got it working did a small hickup in the razor template.. ",
    "saranshkataria": "@dustinsoftware yes, saw a security warning and updated those. gulp is one which I still haven't updated since it involved a breaking change and I was not sure what all would break because of it.. babel-upgrade should be helpful in that I think?. ",
    "kdelmonte": "While the doing this research for you, I noticed that the the config (which is massive and spread across separate files) had a target of node. I'm thinking that must e the issue.\nThanks for the help!\nConfig excerpt: \n```\nmodule.exports = [{\n  name: 'server.en',\n  entry: ['redacted'],\n  target: 'node',\n  output: {\n    path: 'redacted',\n    publicPath: 'redacted',\n    filename: 'server.en.[name].js',\n    pathinfo: false,\n    chunkFilename: 'server.en.[name].js',\n    library: 'server',\n    libraryTarget: 'commonjs'\n  },\n  module: {\n    strictExportPresence: true,\n    rules: [{\n      test: /.jsx?$/,\n      exclude: /node_modules/,\n      use: {\n        loader: 'babel-loader',\n        options: {\n          cacheDirectory: true,\n          babelrc: true,\n        }\n      }\n    }]\n  }\n}];\n```. ",
    "renovate[bot]": "Renovate Ignore Notification\nAs this PR has been closed unmerged, Renovate will ignore this upgrade and you will not receive PRs for any future 8.x releases. However, if you upgrade to 8.x manually then Renovate will then reenable updates for minor and patch updates automatically.\nIf this PR was closed by mistake or you changed your mind, you can simply rename this PR and you will soon get a fresh replacement PR opened.. ### Renovate Ignore Notification\nAs this PR has been closed unmerged, Renovate will ignore this upgrade and you will not receive PRs for any future 4.x releases. However, if you upgrade to 4.x manually then Renovate will then reenable updates for minor and patch updates automatically.\nIf this PR was closed by mistake or you changed your mind, you can simply rename this PR and you will soon get a fresh replacement PR opened.. ",
    "felipetoffolo1": "@dustinsoftware sure I can give it a try this week.\nWould be great to use Loadable Components. \nI wish I could help on the code part too. But my .net experience is quite short. I'm a frontend dev. But I'm happy to help as possible. . ",
    "glasody": "Hi,\nThis still seems to be a problem for me when trying to access the site on all major browsers.\n\n\nThis server could not prove that it is reactjs.net; its security certificate expired 12 days ago. This may be caused by a misconfiguration or an attacker intercepting your connection. Your computer's clock is currently set to Thursday, February 28, 2019. Does that look right? If not, you should correct your system's clock and then refresh this page.\n\nabove from chrome, my timezone is UTC +13\nThank you. ",
    "weltmeyer": "Still broken:\n\nEdit: IP is 35.156.37.214. Jepp. Working for me too.. ",
    "NikolayPetyukh": "\n@weltmeyer This should be fixed now - Could you please check?\n\nIt works:\n\n. ",
    "rkpujari": "Thanks for quick response. I am not sure if the proposed solution will\nsupport integrating a complex a React app into an existing ASP.NET Webforms\napp, but will look into that.\nOn Tue, 12 Mar 2019 at 20:42, Dustin Masters notifications@github.com\nwrote:\n\nHi there \ud83d\udc4b\nWebForms is not supported by this library directly, but a few others have\nattempted making it work. You might find some helpful guidance in this\nissue: #55 https://github.com/reactjs/React.NET/issues/55\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/reactjs/React.NET/issues/756#issuecomment-472038960,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ArYbVQ9ahwlQLmFGWqdIrUBy06Jk1Bp8ks5vV8P4gaJpZM4brBUo\n.\n. \n",
    "Weffe": "One thing I didn't think about was that Visual Studio already lets users transpile code on save from TypeScript to JavaScript. So this project should work just fine already with TypeScript -- which is being supported through a roundabout way (e.g. A developer hits save, Visual Studio transpiles from TS to JS and then React.NET now has JS files to work with). So maybe this might not be needed. \nThe one thing that could be a pro is that there wouldn't be 2 files per React Component (e.g. a TS and generated JS file). Instead, we could disable the Transpile on Save option in Visual Studio and have only just one TS file.. Yeah, latest React version does not work properly in IE due to the use of Map and Set and I believe Symbol without polyfills. I agree with you guys that opt-in should be the default choice. . "
}