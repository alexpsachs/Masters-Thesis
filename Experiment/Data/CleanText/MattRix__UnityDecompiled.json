{
    "MattRix": "Thanks! I meant to update the repo a while ago but ILSpy was giving me some weird bugs, and I never got around to trying out a different decompiler. \n. Thanks!\n. You aren't meant to compile it.\nThe code has been created by decompiling Unity's built-in dll files. I put\nit in a solution just to make it easier to browse the files.\nOn Saturday, 18 February 2017, RealAquilus notifications@github.com wrote:\n\nI don't understand what is this, compiling the solution i will get a\ncompiled build of entire Unity? (editor+engine?). Or just two dll?\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/MattRix/UnityDecompiled/issues/3, or mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAN_dlICMucbvXHrnh1DpKoZRcKqfizOks5rdtmugaJpZM4MFGNp\n.\n. It doesn't have decompiled native code, only the C# code. It's not useless, it's very handy when trying to figure out how certain things in the editor work, especially when making custom editor tools. And even if it had the native code, you wouldn't be able to recompile it anyway. \n\nFor physics stuff specifically, Unity uses PhysX under the hood, so you can look at the PhysX source code to learn more about how that works. . Thanks!. Interesting idea! I don't decompilation is the place to do that, instead you could generate that list using reflection at runtime. For example: http://stackoverflow.com/a/1315668. Great that you got this worked out!. Oh nice! What's funny is that a few months ago, I actually dumped out the icons as well. I wanted to use them when making editor tools. I generated a simple webpage with all of them in it. I only use it for my own stuff, I don't think I ever put it up online anywhere. . Ah, great idea to store the icons as Base64! It's always a pain to have to include extra files, so I really like that approach :). Very quick, almost too quick! ;) Thanks! . Hmm so are you talking about just including a link to that repo in the readme? (which is what I do with the UI) Or are you talking about taking the source code from that repo and putting it in this repo? . Yep, this makes sense. I'm thinking that maybe I will include the decompiled source of it here, but also include a link to the open-source code as well... that way when people search for it here, they will find it, but it will also limit the potential complication of bringing in code from multiple sources. . I think it was probably just skipped over, I'll try to include it next time I do a decompilation. . Thank you!. Sorry yeah nobody has actually decompiled 2017.3 AFAIK. I might be able to get around to it soon though.... Ok just made a 2017.3 tag! https://github.com/MattRix/UnityDecompiled/releases/tag/2017.3.0f3. ",
    "RealAquilus": "Aaahhhh right, thanks!. ",
    "dylan-hart": "This is often the first place I go when I'm extending the editor. I've found it useful for many other things as well. Thanks!. ",
    "eppz": "Yay, thanks for getting back!\nI'm a great admirer of your work since Trainyard.\nMe also was looking into runtime inspection since than. With Edge.js I could lookup / inspect Unity on client side packed directly into a VS Code extension. Would be no any list to maintain then. Also, it could inspect project assemblies as well, so I could color static / instance methods differently, and more.. Well, in the end I used the .csproj files actually from this repo. \ud83d\ude04 \nA good approximation at least.\nIn case you're interested in VS Code., may take a look at: https://twitter.com/_eppz/status/849450641760161792\n. Thanks for this repo again!\nSince than I used it for this writeup as well - http://eppz.eu/blog/unity-editor-icon-assets/, https://twitter.com/_eppz/status/855432605189234688 - to locate Editor Assets / Textures / Icons. \nEndless source of Unity wisdom. \ud83d\ude04 . I thought the same, to use those icons when shipping Editor tools.\nIn the end, I made a class - https://github.com/eppz/Unity.Library.eppz/blob/master/EditorUtils/SliceRenamer.cs#L30 - that creates a Texture2D from a Base64 strings - https://github.com/eppz/Unity.Library.eppz/blob/master/EditorUtils/SliceRenamer.cs#L273 -, so the textures are in the Editor Tool source code as well.\nSorry for keep bothering you, I'm just enjoying conversation with such Legend. \ud83d\ude04  . Yap, one can ship / maintain an Editor Tool in a single .cs source.. ",
    "ntratcliff": "Release was timed well with lunch \ud83d\ude09 . ",
    "apkd": "That's depending on what you want this repo to be - just a very slight suggestion on my part. I initially thought that you included the whole UI respository.\nIf you don't want to include the whole repo, a link will be just fine. I ended up posting here because I searched this repo for the source of NetworkManager.cs and didn't find it - at the time didn't even realize that it was open source.. "
}