{
    "romani": "@isopov please reply to mail thread to Oliver that you have no problems to final code migration.\nI will not apply this pull request till we close sourceforge code repository.\n. http://checkstyle.sourceforge.net/cmdline.html\nsun_checks.xml is just a example of configuration, checkstyle-5.6-all.jar could be located out of default layout that user get after unzip, but behavior have to be simple and consistent in any scenario.\n16:21 ~/Temp/1/checkstyle-5.6 $ ls -la \ntotal 4112\ndrwxrwxr-x 4 rivanov rivanov    4096 Dec 31  1969 .\ndrwxrwxr-x 3 rivanov rivanov    4096 Oct  1 16:20 ..\n-rw-r--r-- 1 rivanov rivanov  445288 Sep 21  2010 antlr-2.7.7.jar\n-rw-r--r-- 1 rivanov rivanov 2057092 Sep 18  2012 checkstyle-5.6-all.jar\n-rw-r--r-- 1 rivanov rivanov  651155 Sep 18  2012 checkstyle-5.6.jar\n-rw-r--r-- 1 rivanov rivanov    7798 Sep  6  2011 checkstyle_checks.xml\n-rw-r--r-- 1 rivanov rivanov  206711 Sep 21  2010 commons-beanutils-core-1.8.3.jar\n-rw-r--r-- 1 rivanov rivanov   41123 Sep 21  2010 commons-cli-1.2.jar\n-rw-r--r-- 1 rivanov rivanov   60686 Aug 26  2009 commons-logging-1.1.1.jar\ndrwxrwxr-x 6 rivanov rivanov    4096 Sep 30  2010 contrib\n-rw-r--r-- 1 rivanov rivanov  639592 Sep 15  2010 google-collections-1.0.jar\n-rw-r--r-- 1 rivanov rivanov    2025 Sep 30  2010 import-control.xml\n-rw-r--r-- 1 rivanov rivanov    1031 Sep 18  2012 java.header\n-rw-r--r-- 1 rivanov rivanov   26934 Sep 30  2010 LICENSE\n-rw-r--r-- 1 rivanov rivanov   11560 Sep 30  2010 LICENSE.apache20\n-rw-r--r-- 1 rivanov rivanov    1364 Sep 30  2010 README\n-rw-r--r-- 1 rivanov rivanov    1261 Sep 30  2010 RIGHTS.antlr\ndrwxrwxr-x 5 rivanov rivanov    4096 Sep 18  2012 site\n-rw-r--r-- 1 rivanov rivanov    6861 Sep  6  2012 sun_checks.xml\n-rw-r--r-- 1 rivanov rivanov    2124 Oct 17  2010 suppressions.xml\nI mark issue as closed , with \"Want fix\", you can start discussion thread in mail-list to get support from other admins.\n. make sense.\n. make sense, workaround from SF issue tracker 604 , is : \njava -jar checkstyle-all-5.1.jar -c sun_checks.xml find -name '*.java'\nCheckstyle have to check by default \".java, .properties\".\n. please provide more exact test case, to let us see a problem.\n. Can you share a code, or part of it, reproduce problem? I can not image how checkstyle could try to investigate classes that it does not have as files in your project folder. I need to see a problem.\n. We need test case to reproduce a problem. From all close sources it is possible to make open sources by removing company names and all logic from Class files, and obfuscate names if that is so critical. In other case issue will be marked as incomplete and closed.\nFortunately I have close source Thrift project, and reproduced problem:\nSteps to reproduce:\nin Ubuntu install checkstyle as package from repo \"sudo apt-get install  checkstyle\"\ncopy following source to local disc:\n```\npackage com.gen;\n/\n * Autogenerated by Thrift\n \n * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING\n /\nimport java.util.BitSet;\nimport java.util.Collections;\nimport java.util.EnumMap;\nimport java.util.EnumSet;\nimport java.util.HashMap;\nimport java.util.Map;\n@SuppressWarnings(\"serial\")\npublic class DayValue implements org.apache.thrift.TBase, java.io.Serializable, Cloneable {\n@Override\npublic void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {\n    org.apache.thrift.protocol.TField field;\n    iprot.readStructBegin();\n    iprot.readStructEnd();\n\n    // check for required fields of primitive type, which can't be checked in the validate method\n    validate();\n}\n\n}\n```\ncheckstyle -c file:///home/rivanov/Temp/1/checkstyle-5.6/sun_checks.xml -r . | grep \"Unable to get class information\"\nbut it woks without problem on checkstyle 5.6:\njava -jar /home/rivanov/Temp/1/checkstyle-5.6/checkstyle-5.6-all.jar -c /home/rivanov/Temp/1/checkstyle-5.6/sun_checks.xml -r . | grep \"Unable to get class information\"\nin Ubuntu 12.04 there is an old Checkstyle package : \n08:34 ~/Temp $ dpkg -l checkstyle\nDesired=Unknown/Install/Remove/Purge/Hold\n| Status=Not/Inst/Conf-files/Unpacked/halF-conf/Half-inst/trig-aWait/Trig-pend\n|/ Err?=(none)/Reinst-required (Status,Err: uppercase=bad)\n||/ Name                           Version                        Description\n+++-==============================-==============================-============================================================================\nii  checkstyle                     5.4-1                          checks Java source against a coding standard\nPlease let me know how you installed CLI, and what version checkstyle you use.\n. ok, please open jar file of checkstyle and search for  /META-INF/MANIFEST.MF file, and let me know version \nsearch for files: checkstyle-5.6-all.jar, checkstyle-5.6.jar at https://github.com/mxcl/homebrew/wiki/FAQ#where-does-stuff-get-downloaded\nIn my case (latest version) it is :\nManifest-Version: 1.0\nImplementation-Title: checkstyle\nImplementation-Version: 5.6\nImplementation-Vendor-Id: com.puppycrawl.tools\nBuild-Jdk: 1.7.0_07\nBuilt-By: oliver\nSpecification-Title: checkstyle\nCreated-By: Apache Maven\nSpecification-Version: 5.6\nMain-Class: com.puppycrawl.tools.checkstyle.Main\nArchiver-Version: Plexus Archiver\n. strange, you have latest, can you please download zip from web site and launch it from jar , Example:\njava -jar /home/rivanov/Temp/1/checkstyle-5.6/checkstyle-5.6-all.jar -c /home/rivanov/Temp/1/checkstyle-5.6/sun_checks.xml -r . | grep \"Unable to get class information\"\n. RedundantThrows Check will be deprecated soon, as it is too buggy, please use it with caution.\nSee details at https://github.com/checkstyle/checkstyle/pull/177#issuecomment-48192498.\n. fixed in 6.1\n. sure, everyone are welcome with pull request.\nFor now we, our tiny team, do transitions from SourceForge to Github to analyse new priorities and set of tasks to fix in current implementation.\nYou are right, Java8 syntax will be a challenge for all existing Checks, so please do not expect java8 support in Checkstyle to appear quickly, sorry, but it is definitely a priority task.\n. http://mail.openjdk.java.net/pipermail/compiler-dev/2014-January/008453.html,\nsyntax is in \"chapter 19\" at http://cr.openjdk.java.net/~mr/se/8/java-se-8-fr-spec-01/java-se-8-jls-fr-diffs.pdf\n. 2 all, please do \"1 question\" survey about Java8 support, without registration - https://www.surveymonkey.com/s/MNFHYSJ\n. We got connection with ANTLR team https://groups.google.com/forum/#!topic/antlr-discussion/AQOawdwDXFA , thank a lot to Terence Parr.\n. We are approved organization at GSoC 2014, so Java8 support will be in few month. If we found simple way to ignore lambda syntax easily we will do it sooner than whole Java8 support. \n. Checkstyle will be updated to java8 probably in next month to ignore lambda at all, final support for java8 will be ready at the end of August of this year.\n. TO ALL: thanks for voting to this issue - we are in progress, we should finish it at later August  2014.\nplease do not  \"+1\" any more.\n. Hi Community, please test your java8 sources agains our almost-ready to use java8 support implementation https://github.com/checkstyle/checkstyle/pull/226 . Please provide feedback there.\n. Sorry ... , I still did not make release automation. everyone could easily build whole checkstyle as \"mvn -Pdistro package\" but before do clone from https://github.com/sabaka/checkstyle/tree/gsoc  (branch \"gsoc\").\nNote: all jars will be located in projects \"target\" folder.\n. @brutall, good catch, your PR is merged.\n. Sorry, reopened, it is still in testing stage, PR is not merged.\n. We will keep java8 support for extra testing for month or so on our side, I do believe that late September or early October I will rollout that.\nmean while please do build yourself \"mvn -Pdistro package\" and provide us feedback after testing over your sources.\n. @satoshi-kimura, you aright, see https://github.com/checkstyle/checkstyle/commit/023b564417ff157c7333acc2f04b6ddba289c463 for details.\n. @ikabiljo, I will try to use Travis+Bintray to have that proces automated (after GSoC), but for now please build Checkstyle yourself \"mvn -Pdistro package\"\n. @ttjordan , please see https://github.com/checkstyle/checkstyle/issues/10#issuecomment-51853953\n. @cbanack, please use java7 to build Checkstyle to avoid that problem easily.\nI registered https://github.com/checkstyle/checkstyle/issues/261 to figure out what do with that violations - fix or ignore.\n. @sabaka , please rebase your changes from master, I fixed java8 javadoc problems in master.\nThat will ease test building for others.\n. @ikabiljo, it is out of context of this branch fixes. Separate issue against IndentationCheck need to be created, please do (please provide examples in formatted way).\n. @ikabiljo, \nhttps://github.com/checkstyle/checkstyle/issues/281 will not be touched for sure in next few weeks, we have huge changes in progress(https://github.com/maxvetrenko/checkstyle/issues/26) for this Check, I do not what to interfere with it. \nhttps://github.com/checkstyle/checkstyle/issues/282 , https://github.com/checkstyle/checkstyle/issues/284 - we could ask @sabaka to take a look, as it is not a complicated updates.\nI plan to release java8 changes before 15 October.\n. finally merged to main repo, release 5.9 will be in few days.\nThanks a lot to all participants !!!!\n. We appreciate your thoughts about Maven and Ant :), thank you very much.\nBuild system should be used that comfortable for development team.\nBuild process will be switched to Gradle :), so Ant and Maven will be deprecated, like you this fact or not ... sorry.\nYour INSTALL.md will contain only: \"mvn -Pdistro package\"\nhttps://github.com/checkstyle/checkstyle/wiki/Build-all-jars-and-deploy-maven-site\nAfter we finish refactoring ... we will simplify build to be done by one command.\nBut your approach is not appropriate for us, sorry.\nThank you for pointing to files permissions problem.\n. ok, we have two options:\n1) you change your request to contains only file permissions changes and we apply it from you\n2) I reject you \"Pull Request\", and change files permission myself.\nyou can put your changes to building Checkstyle by Ant to somewhere in web blog and I put a link from our Wiki to your page as alternative approach to build Checkstyle. But we will not support Ant configurations for a lot time and abandon it soon as it reasonable.\n. @sabaka noticed that code is non compilable \"new\" is missed , code should be like \"List foo = new LinkedList<>();\"\n. this feature is present in Google Code Style \nhttp://google-styleguide.googlecode.com/svn/trunk/javaguide.html#s4.6.2-horizontal-whitespace\nSearch for \"Before any open curly brace ({), with two exceptions:\"\n. As you already did a change - please provide link to changes or do pull request to show diff. I will take a look\n. is it fix for certain problem ? \nplease provide link to original bug or .... , this is required to verify your changes.\n. From where you grab that patch? Changes that aurhor can not explain will never be applied, sorry, it means for me that nobody need them.\n. sorry, I mixed up your changes and changes of Oleg (I did it from phone).\n. Thanks a lot !\n. till Travis show green light on pull request, pull request will not be reviewed and definitely not applied.\n. Pavel,\n1) Do you know for sure that check will log that correctly ? checksyle is used in not only from console , but in most IDE, and .....       \n+        catch (FileNotFoundException e) {\n+            e.printStackTrace();\n+        }\n+        catch (IOException e) {\n+            e.printStackTrace();\n+        }\nplease look a example in existing code how it is done NewlineAtEndOfFileCheck.java:\ncatch (final IOException e) {\n            log(0, \"unable.open\", aFile.getPath());\n        }\n2) For tests\nplease look at method getCheckMessage\nhttps://github.com/sevntu-checkstyle/sevntu.checkstyle/blob/master/sevntu-checks/src/test/java/com/github/sevntu/checkstyle/BaseCheckTestSupport.java\nand how it is used at\nhttps://github.com/sevntu-checkstyle/sevntu.checkstyle/blob/master/sevntu-checks/src/test/java/com/github/sevntu/checkstyle/checks/annotation/ForbidAnnotationTest.java\nplease copy that code to your class to avoid copy paste in your UTs for error message. In future we will refactor all UTs to use that pattern. \n. maednoldor , you are right, am I with you. Second pas over file if duplications are found is ok. \nWe need to point to mistake in more precise way than just on whole file, as in case violation will be triggered from Eclipse, Idea, .... warning message is shown in tooltip so it will not be simple to read it and retype it in search dialog. One more plus is that duplication in Property file is so rear mistake so double pass over is not a performance problem.\n. Pavel and maednoldor, can you please be either Pavel or maednoldor :) .\n\ngetLineNumbers\n\nIt should have one \"return\" from method.\n. > -        int lineNumber = 1;\n\n\nint lineForKey = 0; \n\n\nPlease combine that two variables in one.\n\nThere is a special check in Checkstyle, forcing maximum return count :)\n\nI need to see why Travis CI, did not catch that, as checkstyle should recheck his own code by his checks.\n. I have no complains to your code any more.\n@isopov and @oburn  do you have further questions to Pavel ?\n\nReturnCount check is absent in checkstyle_checks.xml at all.\n\noh yes, complete forbid of few return it is a bit fanatic, one day we will merge experimental implementation https://github.com/sevntu-checkstyle/sevntu.checkstyle/blob/master/sevntu-checks/src/main/java/com/github/sevntu/checkstyle/checks/coding/ReturnCountExtendedCheck.java\nWe can not enforce all checks to be present in this config as after each new check it will be impossible to make a build till resolve all new problems that new Check found ... but we need to find human resources to do it one day.\n. > private final Multiset mDuplicatedStrings = HashMultiset.create();\nyou know maximal size collection - aLines.size(), so pseudo code is HashMultiset.create(aLines.size());\n\nfor (Entry duplication : properties.getDuplicatedStrings().entrySet()) \n\nI might be blind a bit, but how do you get from collection duplicates ? where check for count ?\nWhy UT does not catch this problem? Please provide link to UT that cover that case. Did you checked Test coverage \"mvn cobertura:cobertura\"?\n. Thanks @isopov, now I got it.\n@pbaranchikov please cover conner/exception cases by UTs and I will be fine with merge.\n. Classes in this File                                Line Coverage   Branch Coverage     Complexity\nUniquePropertiesCheck                        100%(27/27)          100%(8/8)              2.4\nUniquePropertiesCheck$UniqueProperties 100%(8/8)              75%(3/4)                  2.4\nI am ok with merge, after 2 tiny last changes are done, @isopov what about you ?\n. Pavel, thanks a lot for your work, we appreciate  your persistence !!!!\n. Hi Yuri, thanks for desire to help, I appreciate that.\nThat Check have to be removed from Checkstyle completely, it is extremely buggy. Whole concept of searching code duplication should be reviewed, reimplemented and re-tested before introducing it to Checkstyle.\nDoing strict compare of code is worst realization. Amount of false positives that such tools produce make them unusable. I even in favour of keeping items separately with copy paste father then introducing dependency between classes. I am not asking completely abandon idea of code duplication ..... but that should not be done Checkstyle for now, and should be moved to our experimental project (sevntu.checkstyle).\nResolution:\nplease do me a favour - remove that Check completely from Checkstyle to make Checkstyle more reliable for users.\nSimilar problem but in different scope is: https://github.com/checkstyle/checkstyle/issues/473\n. Make sense especially comment http://stackoverflow.com/a/12069687/1015848 .\nReferenced Document is here: http://www.scribd.com/doc/15884743/Java-Coding-Style-by-Achut-Reddy (paragraph 3.3 Field Naming)\noptions could be: \nskipObjectReference - scan for object reference types that are never followed by \".\".\nbut there could be a lot of false-positives like described in comment:\n \"boolean false_value = Boolean.FALSE\" or \"boolean FALSE_VALUE = Boolean.FALSE\" - what is more correct is stylish question.\nI do not see reason to make it for Arrays for now. \nBut, for now I can not accept this feature request till it tested and proven on huge opensource project sources. So please feel free to open that request or even implement it at our experimental checks project: https://github.com/sevntu-checkstyle/sevntu.checkstyle/issues?state=open .\n. So @isopov, what is your preference of usage upper case for cases that you presented ?\n. Ok, good, so:\nI failed to understand arrays nuances from document - we could ignore them for now.\nwe will extend  ConstantNameCheck with option ignoreContantsReferencedByDot to skip them from catching by Check, so following code will not be cated by Check:\nprivate static final String dot = \".\";\n...\nString s = dot.concat(\"toString()\");\nSo that options will be enough to cover primitives, as they never reverenced by \".\".\nAdditional option is enforceUpperCaseForTypes = \"String|....\".\n@isopov, If you have no more proposal and questions .. please copy-paste that description to https://github.com/sevntu-checkstyle/sevntu.checkstyle/issues?state=open\nand mark this issue as closed.\n. @isopov , are agree on few feature request for Sevntu.checkstyle above ?\n. fixed in c9bb926\n. Add \"Attention\" block that new Checks will not be applied to Checkstyle, and need to be tested in Sanbox project https://github.com/sevntu-checkstyle/sevntu.checkstyle/wiki, sandbox project already have instructions for Linux.\nDoes it make sense to support instructions for Windows and MacOs ? if yes - community are welcome to provide them.\n. merged - https://github.com/checkstyle/checkstyle/commit/cf3879aa537cc597ac74aa762ba89b15883a4b39\n. looks like is not reproducible after fix for #207.\n. please squash all your commits in one, let it more code-reviewable\n. to future developer, please review code of @vmassol .\n. please do squash\n. to future developer, please look at changes from @vmassol ... truth is somewhere there ...\n. If pull request is not fixed in 7 fays, it is will be rejected.\n. If pull request is not fixed in 7 fays, it is will be rejected.\n. you created too much issues, it hard to figure out what is a problem and what is a solution, please close or group related issues in one.\n. you need to decide: you want to cooperate or want to just throw your code in us. If second I will read your issue only after priority come to it - do you want to wait one more years as you did on sourceforge?\nThat metrics Checks are not that obvious, so if you want me to help you, please describe problem in detail and be ready to explain your changes.\nin all 3 pull request you changed the same class AbstractClassCouplingCheck, I do not understand why they did not come as one update, if problem is one or am I miss smth.\n. By means of issue description I could be sure that problem that we are trying to resolve by means of PR is real problem that belong to that Check and it is proper way to fix it. \n44 is just latest example how PR were rejected after author explained in detail his purpose.\nBy pressing \"Merge Pull request\" your code become our team responsibility and support, do not expect that we will merge anything you or any other developer provide. We would rather reject than merge suspicious changes. \nVinsent, I propose to start your issue from scratch, sorry if we are so bureaucratic.\n. If pull request is not fixed in 7 fays, it is will be rejected.\n. resolved in 6.1 for sure.\n. Done a while ago.\n. referencing method with \"this\" is very weird thing to my mind, Checkstyle could do it, but ...\n1) Can you please extend description why you need this? \n2) What is a problem you are try to resolve by means of this?\n3) a bit more evidence that somebody require this too, and do use such notation.\nthere is no room for this feature to be implemented by us in nearest future, we are tiny team and in progress of SF->Github transition, pull request are welcome. \nIt have to be done a an option for this Check and it will be switched OFF by default for sure.\nIf no good evidence will be provided for this feature, and All admins give approval, you can host it in our experimental pool of Checks https://github.com/sevntu-checkstyle/sevntu.checkstyle/issues?state=open. in that pool we can host any Checks, to let you test Check before it prove it is in demand by wide community.\n. Thanks a lot for point to the documentation, now issue is classified as bug, will be fixed soon, you are welcome with pull request. \n. I am ok with merge - thanks a lot.\nabout DeclarationCollector: I doubt that such functionality should be reused , I doubt even that realization performance as it use \"public void beginTree(DetailAST aRootAST)\" for traverse of declarations.  \nIf you have same opinion - please feel free to create separate issue to merge DeclarationCollector and RequireThisCheck.\n. unfortunately Javadoc is handled by RegExp in Checkstyle for now, there is no simple way to six that in code in reliable way.\n. Checkstyle is very simple and very modular , to fix a problem you need to debug only one file - check that have problem. So if you so care about this problem - please be welcome with patch.\nFYI: do parsing by RegExp is never a good approach, one day we will update grammar to parser JavaDoc more properly - so after that happen, it will be a reasonable to spend maintainers time on it.\nWe already have numerous issues with JavaDoc support: https://sourceforge.net/p/checkstyle/bugs/?source=navbar .\n. The more I look at JML JavaDoc, the more I think that Checkstyle should not be changed in favour of your project, sorry.\nEven following code is bug in Checkstyle as it is wrong usage of comments in Java and bad practice to my mind.\n/**\n * A Javadoc comment.\n */\n// any comment\npublic void foo() {}\nI would recommend you to make fork from us, and build JML-Checkstyle on your own with patch that you provided or even more make your own custom Checks see that project as example (https://github.com/sevntu-checkstyle/sevntu.checkstyle). \nI will try to make other maintainers to review your request to have second opinion.\n. > comments are allowed anywhere and I'm not aware of any well-respected coding standards that say otherwise.\nWhole Checkstyle is about to forbid user to do that is allowed :), Nobody develop with 100% following of Sun guidelines, everyone invent style/rules that fit their team, and Checkstyle help to keep an eye on these rules.\nPlease give me real use case of such style, out of JML.\n\nlike the brace placement issue - is probably not a judgement that Checkstyle should be making for all its users. \n\nRight, so that is why Check should have options, to let use check exactly as user want.\n\nPut another way: .....\n\nYou are in right direction, so Check have to have an option to allow comments between or not, by default it will be not allowed. But before implementing that feature please prove that is required not only by JML :), I need examples and evidences.\n. > as though JML is some fly-by-night project\nI did not mean anything bad, I appreciate your work and your interest in Checkstyle and your time you spend in this issue. ....... .\n\nbecause it disagrees with both the authoritative tools and the Javadoc specification about when a Javadoc\n\nthis just a bug, that you experience the most.\n\nan option to allow or disallow comments in between\n\nI take my idea back, as it would reasonable to do only after introduction of Comments to ANTLR grammar. Lets proceed with minor fixes.\nFor future reference : http://docs.oracle.com/javase/7/docs/technotes/tools/solaris/javadoc.html\nhttp://www.oracle.com/technetwork/java/javase/documentation/index-137868.html\n\nI'd gladly implement it myself,\n\nOk, thanks for your persistence, I marked issue as \"Approved\", please provide pull request, but do not forget about UTs.\n. @dmzimmerman , we implemented full support on comments and javadoc parsing in Checkstyle.\nTo support your comments notation you can do it yourself, comments Nodes are now inlined to java AST. You can see example of work : \nhttps://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/checks/TodoCommentCheck.java\nhttps://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocParagraphCheck.java\nI highly recommend you to create grammar for your comments and parse it as we do Javadoc. \nAs you be ready we could update https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractJavadocCheck.java#L161 to call custom Comment parser.\n. http://checkstyle.sourceforge.net/config_javadoc.html#JavadocMethod should be updated to use comments from AST tree, rather than from FileContent.java file. Check need to be reimplemented to use new API for JavaDocs.\n. advice: please create issue with description how it was. what was wrong, and what is expected.\nin other case you will wait for long time, non of us want this.\n. closed till decision/solution is made in issue #45.\n. Please:\n1) provide example of codes (expected and detected) in description to let others understand what you want easily, \n2) provide direct link to Check documentation to let other understand what Check you are talking about.\nI do not agree with you, and this functionality have to be done as an option. Or even better have to be supported by http://checkstyle.sourceforge.net/config_modifier.html#RedundantModifier .\n. if no argument to support your idea will be provided in two weeks, this issue will be closed. \n. Hi @isopov , thanks for investigation, after attentive look at this case : \nListResult<String> result = new ListResult<String>(Collections.<String> emptyList());\nI do not think it is good idea to have space at this place. With space it looks like type of some new form of method reference/call.\nI am voting for ignoring that request (to have a space after \">\") and fix the issue.\n. can you provide zip(github ref or .... ) of project that cause fail ?  that will help a lot.\n. if no exact example(test case) is provided in two weeks, I will close the issue.\n. no details provided, issue is closed.\n. will be released in 6.2\n. already fixed in 6.2\n. issues is not reproduced any more:\n```\n~/java/git-others/checkstyle/target [master|\u2714] $mvn -Pdistro package\n....\n~/java/git-others/checkstyle/target [master|\u2714] $ cd target\n~/java/git-others/checkstyle/target [master|\u2714] $ java -jar checkstyle-5.8-SNAPSHOT-all.jar      -c ../sun_checks.xml 1.java\nStarting audit...\n~/java/git-others/checkstyle/target/1.java:0: Missing package-info.java file.\n~/java/git-others/checkstyle/target/1.java:1: Missing a Javadoc comment.\n~/java/git-others/checkstyle/target/1.java:1:14: Name 'test' must match pattern '^[A-Z][a-zA-Z0-9]*$'.\n~/java/git-others/checkstyle/target/1.java:3:5: Method 'isPrimitive2' is not designed for extension - needs to be abstract, final or empty.\n~/java/git-others/checkstyle/target/1.java:3:5: Missing a Javadoc comment.\n~/java/git-others/checkstyle/target/1.java:3:33: Parameter type should be final.\n~/java/git-others/checkstyle/target/1.java:10:5: Missing a Javadoc comment.\n~/java/git-others/checkstyle/target/1.java:10:29: Parameter args should be final.\n~/java/git-others/checkstyle/target/1.java:11:5: '{' should be on the previous line.\n~/java/git-others/checkstyle/target/1.java:14:18: Expression can be simplified.\n~/java/git-others/checkstyle/target/1.java:14:46: '||' should be on a new line.\n~/java/git-others/checkstyle/target/1.java:16:9: '{' should be on the previous line.\n~/java/git-others/checkstyle/target/1.java:17:13: Empty statement.\nAudit done.\n~/java/git-others/checkstyle/target [master|\u2714] $ cat 1.java\npublic class test {\npublic boolean isPrimitive2(Class<?> type) {\n    return ((boolean.class == type) || (byte.class == type)\n            || (char.class == type) || (short.class == type)\n            || (int.class == type) || (long.class == type)\n            || (float.class == type) || (double.class == type));\n}\n\npublic static void main(String[] args)\n{\n    Class c = null;\n\n    if (true && (boolean.class.equals(c) ||\n\nboolean.class.equals(c)))\n        {\n            ;\n        }\n    }\n}\n~/java/git-others/checkstyle/target [master|\u2714] $ \n```\n. Hmm, you are right, class IDENT in line 6, Looks like annotation is treated as part of Class definition - that is true.\nSo other have to keep this in mind.\nIssue is closed, not a bug.\n. yes it is not a very good but it it not different from example in Doc: \n```\nshould be refactored to:\nString nullString = null;\n\"My_Sweet_String\".equals(nullString);\n```\nread it as \"\"My_Sweet_String\".equals(null);\"\nso should not be a problem, just to be consistent in validation. @isopov , does it make sense ?\n. After discussion, we decided to not implement this, as null is kind of Literal, and developer have to do variable == null.\n. JavaDoc have to support HTML 3.2 (http://docs.oracle.com/javase/7/docs/technotes/tools/windows/javadoc.html#comments paragraph \"Comments are written in HTML\"), U tag is that specification - http://www.w3.org/TR/REC-html32#font-style.\nFeel free to provide fix.\n. fixed by @the-lay .\n. thanks for contacting us, yes your request is clear style question. We would like to get help from you in development.\nBut our team decided for a stabilization period do not accept any new Checks, and let Check be implemented in our sandbox/experiment project https://github.com/sevntu-checkstyle/sevntu.checkstyle and let check be tested thoroughly by our team and on completion and testing by both(your and our side) be ported to main project - Checkstyle.\nDiscussion for your Check ideas and details could be done here: https://groups.google.com/forum/?hl=en#!forum/sevntu-checkstyle \n. consider http://checkstyle.sourceforge.net/config_misc.html#indentation\n. already in 6.1.1.\n. 1) to make this Check useful and minimize amount of false-positives we need user defined properties for \"format\" and for \"extendsClassNameFormat\" default value is \"^.Exception$|^.Error$|^.Throwable$\" for both options.\n2) Please update our xdoc files as we generate base on them our site - http://checkstyle.sourceforge.net/config_design.html#MutableException\n. fixed, will be released in 6.2\n. just for curiosity sake, can you provide details how you use/launch checkstyle to let us know how else Checkstyle could be used :) . \n. Thanks a lot ! For me your changes looks reasonable.\n. Thank you Ivan, for pointing to the strange implementation.\nCheckstyle-maven-plugin 2.11 is latest for now(http://maven.apache.org/plugins/maven-checkstyle-plugin/source-repository.html) .  \nIn http://svn.apache.org/viewvc/maven/plugins/tags/maven-checkstyle-plugin-2.11/src/main/java/org/apache/maven/plugin/checkstyle/DefaultCheckstyleExecutor.java?view=markup\nthere is few places with code:\n77  // checkstyle will always use the context classloader in order\n78  // to load resources (dtds),\n79  // so we have to fix it\n80  // olamy this hack is not anymore needed in maven 3.x\nLooks like developers of plugin is not decided yet what is the right approach for them/maven to load resources. So we will not change anything for now.\nIt will be good to initiate issue on checkstyle-maven-plugin side to point that this problem in demand. We could come back to that problem again after maven plugin remove hacks.\nKeep your changes in fork - at least you have way to keep fix on your side easily. \n. it is all depend on tabWidth that you can specify in TreeWalker (http://checkstyle.sourceforge.net/config.html#Properties) in your case if tab is 8 spaces you get your expected case, ..... so we need a bit more concise update for Check.\nRight now (transition and stabilization period) we do not accept unclear features that require considerable retesting. But we welcome experiments(that will be ported to Checkstyle after testing period) to you experimental project - sevtnu.checkstyle(https://github.com/sevntu-checkstyle/sevntu.checkstyle/issues?state=open) welcome to discuss details (https://groups.google.com/forum/?hl=en#!forum/sevntu-checkstyle).\n. Code, in Eclipse tabWidth is 4 symbols, configuration for Indentation is from sun_check.xml, Treewalker's tabWidth=4:\n```\n    // no warning\n    public boolean foo(int a,\n        int b)\n        throws Exception {\n        return false;\n    }\n// no warning\npublic boolean foo1(int a,\n        int b)\n    throws Exception {\n    return false;\n}\n\npublic boolean foo0(int a,\n        int b)\n        throws Exception { //WARNING HERE - Indentation: method def throws at indentation level 12 not at correct indentation, 8\n    return false;\n}\n\n```\nIn other editor, tab could be 8 symbols and this will be ok according to link you provided. \nYour personal desire for more indent for arguments are mater of your style. I do not share with you that style. \nTo my mind/style, argument should start on second in such a way to be behind symbol \"(\" that is above:\npublic boolean foo(int a,\n                      int b) // my indent, aligned arguments\n            throws Exception { // your indent, as Exception is kind of return type should be close to boolean\n        return false;\n    }\nbut with fallback to 8 indent if indent is going to be too deep - see example from your link.\nBut your style request is valid, and I like it more than current, so we need to figure out how to make Check to reconcile our requests in configuration. Please welcome to experimental project with your proposal.\n.  I do not see your comment there  https://github.com/checkstyle/checkstyle/issues/63#issuecomment-28769854\nplease do.\n\u0421\u0440\u0435\u0434\u0430, 11 \u0434\u0435\u043a\u0430\u0431\u0440\u044f 2013, 10:17 -08:00 \u043e\u0442 Aurimas notifications@github.com:\n\nI would love to see this change. I think ideally, it would be nice to have a property for Indentation module that would allow to set spaces needed for line-wraps.\nFooBar.myFooBarCall(\n        myArgumentIndentedByEightBcauseItDoesNotFitInOneLine);\nAs well as\npublic void foo(int superLongArgumentNameJustBecause,  int anotherArgument)\n        throws SomeException {\n}\nThis would be really useful for chromium.org project as we want to enable indentation checks as part of patch uploading.\n\u2014\nReply to this email directly or  view it on GitHub .\n\n\u0420\u043e\u043c\u0430\u043d \u0418\u0432\u0430\u043d\u043e\u0432\n. in your case simple fork is much better then copy, as our small team could easily do code review on forks.\nDescription of the root problem is here: https://groups.google.com/forum/?hl=en#!topic/checkstyle-devel/JbhfiiSqKsQ\nWe have numerous Checks and all of them are not tested enough to be on released builds. Your changes need to tested thoroughly, and we do not have time to do it, so help you/us test is - we need to integrate your changes to Idea, Eclipse, Sonar, Netbeans to let us/you test changes at our work code without extra efforts.\nI appreciate your help and desire contribute, now we ask you to help us ease testing.\nExperiment project have good wiki pages to start from scratch: https://github.com/sevntu-checkstyle/sevntu.checkstyle/wiki\n. @isopov , I am with you, do not see any reason in such request.\nIf author still feel strong in his opinion please welcome to mail-list for discussion with exact examples of code - https://groups.google.com/forum/?hl=en#!forum/checkstyle\n. valid point, patch is correct on 5.7-Snapshot, but ...\nDefaultLogger is used in UTs, so it have to be updated to have property that will manage printing of Severity - \"boolean printSeverity\", by default for UTs it will be disabled to satisfy all existing UTs. In class that option will be \"true\" by default.\nWriteTagCheckTest.testTagSeverity() - is only UT that would fail but it have to be updated to create Logger (BaseCheckTestSupport have to be extended with \ncreateChecker(....., boolean printSeverity) {\n....\nc.addListener(new BriefLogger(mStream, printSeverity));\n}\nfor himself with printing severity level.\n@richarddbarnett, if you need this fix .... please follow instructions above in other case wait . \n. will be released in 6.2\n. > PRs for these issues that were rejected for bureaucratic reasons\nlack resources and time force me to be more strict with PR. \nOk, thanks for you time to figure out and sum-up changes, I will put this in queue with hight priority.\nI need to review this check as I am not familiar with it, I need few days.\n. does it make sense to print content of DEFAULT_EXCLUDED_CLASSES in HTML doc page to let user know what is excluded by default and where is no way change this ?\nthe better way is to set content of DEFAULT_EXCLUDED_CLASSES as default value for mExcludedClasses, and user will have full control over this Check, and we provide only reasonable configuration for default. \n. > Why travis build status is not displaying here?\nNo idea, it worked well before ... https://travis-ci.org/checkstyle/checkstyle/builds, strange.\n. > to not force users to retype a really long list of classes\nnobody will retype this, defined ones and for ages, any very picky developer who do care about quality on this level will extend it. even after Java version X release, there will be no reason to update that Check again. User just extend it on his side.\n\n\"core\" and \"undisputable\"\n\nI do not believe that there is a project in Java where all Checks are enabled and works on default values ... all of them adjusted to team experience and meaning of \"Clear code\". So lets avoid/reduce amount of undisputable and let user decide what is right.\n\nAs a side note - I hardly can imagine myself using this check.\n\nI am with you, but may be I am too young/immature to understand its value. But Checkstyle provide algorithm and user decide how to use/misuse it.\nSummary: I am ok to apply your patch, this Check is not used at all, and we will not do harm to it.\nAs we touched this Check, I am calling to your common sense, to fix it now and forever.  If you do not want to - just merge your PR.\n. @isopov, thanks a lot for fix and link to travis. Merged.\n. thanks a lot!\n. Looks good, please merge, i can not find way to do merge from phone\n. UTs passed, https://travis-ci.org/checkstyle/checkstyle/builds/14993516\n. this Check will be removed from Checkstyle - https://github.com/checkstyle/checkstyle/issues/473\n. @ychulovskyy , thanks a lot !!\n. Yes, it should work in 5.7.\n. sorry, thanks a lot, thought that this functionality is not tested at all, next time feel free to point me to missed stuff, I will finish.\n. fixed in 6.1.1\n. thanks a lot , changes looks simple and obvious.\nI am ok to merge,  but please fix JavaDoc for class IndentationCheck.java to add new field to it.\n@isopov, please take a look.\n. please update your issue with exact example of case you try to cover, and proposed changes in configuration that could solve the problem.\n. sorry for keeping without reply, I red your post your idea looks reasonable from one point and I still fill that smth is broken in your idea or terminology or you try use Checkstyle for smth it should not be used. \nI do not like name \"exclude\" to be used, and .... . Can not propose smth better to you so I keep it as undecided.\nCan you provide links to full files that you validate, or maybe a project. Any other usages examples ?\nPlease apply your fix in your checkstyle fork repo - this is unblock you and let us look at fix in more details. \nI will switch to you after, after release 5.7 that have to be done as soon as possible.\n. please provide more real examples with details to prove reason of your feature request.\n. > and thus also extending Checkstyle's user base beyond Java\n\nprogrammers\n\nCheckstyle is only for Java, all other usages is a hack that possibly works but it will never be maintained and considered as feature extension. Till I see real benefit for Java, nothing will be added. You always have a choice to keep your changes in fork and use/change Checkstyle up to your needs and wish. Or write RegExp Checkstyle for your language - checkstyle idea is applicable to all languages, but realization is completely different as problems are different.  \nI still waiting for prove of benefits for Java.\n. I do understand that you are living with this problems for a long time and think every one aware of it.\nUnfortunately I am not. I understand your problem in general, but I still do not see exact use cases where it is useful for Java. Checkstyle will not not be extended to satisfy needs of only one person. Any usages of Checkstyle for other then Java files are error prone and will never get support.\nI need, exact link to java file (full java file) with reference to problematic row, and explanation why you think that could be treated with additional option. Beware if false-positives are possible it is sign that it is bad idea.\nIf link are not provided in 1 week, I will close issue as \"Wont fix\".\n. No additional arguments were provided  - issue is closed.\nIf you find time to continue discussion please go to:\nhttps://groups.google.com/forum/#!forum/checkstyle-devel\nhttps://groups.google.com/forum/#!forum/sevntu-checkstyle\n. @isopov , I always like to have second opinion/review on changes, but does it make sense for such changes ?\n.  that will help for review\n. @isopov , my question was about reason of doing PullRequest for such changes, do you want to review them ?\n. We should think from another angle, why that Collection is used ? what for we need that \"peek(int i)\".\nBy quick glance over project: is it used In Checker.java \n// we use getAbsolutePath() instead of getCanonicalPath()\n        // because normalize() removes all . and .. so path\n        // will be canonical by default.\n        mBasedir = normalize(aBasedir);\n    }\nis it a critical place for performance ? I think that methods is called ones for whole launch.\nI do belive that we could find another tool functional that could substitute whole our logic.\nIn two other places it is used in Checks and one of them is deprecated so we could copy that implementation inside that class and let them die together , another Check need to be reimplemented in that part.\n@mkordas , Does it make sense ?\n. In previous PR(https://github.com/checkstyle/checkstyle/pull/85) you did not answered me directly for that question, so I decided that you want to recheck even such changes - it is ok to me, second opinion is always better.\nNow I understand that you did get meaning of my question.\n. fixed by PR #145.\n. I prefer to not pollute repository repository with branches, especially if no guaranty of that it is merged to main branch. changes are small so you can just copy them in issue as code chunks with ref to file name (location).\n. still a problem:\n~/java/temp/7 $ export BUILD_HOME=/home/rivanov/java/git-others && java -jar $BUILD_HOME/checkstyle/target/checkstyle-5.9-SNAPSHOT-all.jar -c config.xml  Test.java \nStarting audit...\n~/java/temp/7/Test.java:0: Got an exception - java.lang.ArrayIndexOutOfBoundsException: 2147483647\nAudit done.\n. Fixed by Ilja Dubinin.\nSLIST node is removed from tree if nothing exist after \":\" .\nStructure will look like:\n\nSome Checks will need re-factoring, non of standard Check is affected.\n. will be released in 6.2\n. @wstomv , please share your support at your survey - https://www.surveymonkey.com/s/MNFHYSJ .\n. carthagian's changes are merged to branch https://github.com/checkstyle/checkstyle/tree/issue-105, but UTs are failed.\n. fixed by https://github.com/checkstyle/checkstyle/pull/278\n. issue-105 branch was removed.\n. looks ok. thanks for update.\n. 1) Build is failed:\n[checkstyle] /home/travis/build/checkstyle/checkstyle/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/indentation/IndentationCheck.java:194: Line is longer than 80 characters (found 103).\n[checkstyle] /home/travis/build/checkstyle/checkstyle/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/indentation/IndentationCheck.java:214: Line is longer than 80 characters (found 107).\n2) what is a reason to use \"Integer\" as type ?\n. @scop , thanks a lot. \nBut I doubt that this feature could solve any problem in configuration, but will add some uncertainty. I am not agree with that update, second opinion with other admins is required.\n@isopov , @daniilyar, please review PR and share your opinion.\n. I need to review this patch with more attention, please give me week or so.\n. sorry for delay, but I did not forget.\n. After long consideration I need to reject this pull request - sorry.\nReason:\n- problem to users is minimal.\n- hornetq team is used that fix to ease their migration from 5.6 to 5.7. That is reasonable but that fix apply changes to all other configurations. So \"hornetq\" team should make a fork from us and use special build of checkstyle for transition period. Here are instruction - link.\n- I do not personally in favour of such changes and dependencies between options, especially when default values are provided for all, and are not going to change .\n- after investigation in Indentation Check it require serious redesign, numerous of TODO, non covered cases, and option reconsideration. Bugs .So I will not do changes in options behaviour till we reimplement/refactor Check. \nI expect that we will fix Indentation Check problem this summer, during students practice on our project.\n. I saw your changes ... looks weird, do you have history of commands ?\nIt might be caused by my previous merge that was not a fast-forward merge, I forgot to use manual merge commands and just pressed \"Merge\" in git.\nI do not like rewriting history, lets keep it as is, not a big deal.\n. I am ok with that changes.\n. I relaunched Travis build - still a failure - not sure it is good ideas to merge this PullRequest till UT failure is resolved.\nJava7 will be our main JDK in next release.\n. @isopov , I am ok with merge , do you still have any problems with that PR ?\n. merged.\nThanks a lot for your help!\nfix for #117 also merged.\n. we have no roadmap, usually do release ones in few months.\nI do believe we will do it in May.\n. UT is required, to be quickly merged and be available in next release.\n. @carthagian, please rebase your changes again over master, as you can see github print warning \"We can\u2019t automatically merge this pull request.\".\nyour changes look ok, I am almost ready to merge them.\n. carthagian's changes are merged to branch https://github.com/checkstyle/checkstyle/tree/issue-105, but UTs are failed.\nI close that PR, as smth should be changed/fixed. \n. > What about moving to some abstract Stream - so tests can run on Test.class.getResourceAsStream() input?\nI have never used environments where java.io.File is restricted. If you can show real benefits for Checkstyle to switch to Stream to be launched in Cloud - I am ok, with that.\n. layout change looks good on shallow overview, nevertheless good move forward.\nThanks a lot!\n. so you expect to Checkstyle to do 2 things :\n1) two violation messages on that sample\n2) somehow fix Check to allow write code like this : \nnew String()\n  .substring(\n    0, 100\n  )\n  .substring(\n    0, 50\n  );\nAm I right ?\n. already fixed in 6.X, extra UTs was provided\n. first step is at https://github.com/checkstyle/checkstyle/commit/a9f2c8b7a9a424111d39cdaedbadd65dfb44407a, as soon as I get access to sftp for sourceforge.net I will put file to website, after that I will update UT.\n. still a problem https://travis-ci.org/checkstyle/checkstyle/jobs/24753271\neven file is on sourceforce web site, looks like we need to retry download few times before final fail of UTs.\n. please provide configuration for IndentationCheck.\n. please do patch one more time I can not see it.\nadvice: please push changes in your checkstyle fork and do it throught PullRequest or send me link to your commit.\n. thanks a lot.\n. thanks for update , but please update html doc file too (search for that tags in xdoc folder).\n. merged.\nThanks a lot for your help!\n. Please provide test file and configuration, I can not reproduce your issue.\nI need to reproduce your problem form command line (http://checkstyle.sourceforge.net/cmdline.html).\n. you, are right, smth weird in documentation (http://checkstyle.sourceforge.net/config.html#SuppressionCommentFilter) and how it works.\nLets keep this issue open to update Documentation to clearly describe behaviour and fix issue.\nin my case I had \n```\n    // MY:OFF\n    class MYCLASS { //No warning here, but here is \"Abbreviation in name must contain no more than '1' capital letters.\"\n}\n// MY:ON\n\n```\nconfig:\n<module name=\"AbbreviationAsWordInName\">\n      <property name=\"severity\" value=\"warning\"/>\n      <property name=\"allowedAbbreviationLength\" value=\"1\"/>\n      <property name=\"targets\" value=\"CLASS_DEF,INTERFACE_DEF,ENUM_DEF,ANNOTATION_DEF,ANNOTATION_FIELD_DEF,ENUM_CONSTANT_DEF,PARAMETER_DEF,VARIABLE_DEF,METHOD_DEF\"/>\n      <property name=\"ignoreFinal\" value=\"false\"/>\n      <property name=\"ignoreStatic\" value=\"false\"/>\n      <property name=\"ignoreOverriddenMethods\" value=\"false\"/>\n    </module>\n...\n  <module name=\"SuppressionCommentFilter\">\n    <property name=\"offCommentFormat\" value=\"MY\\:OFF\"/>\n    <property name=\"onCommentFormat\" value=\"MY\\:ON\"/>\n    <property name=\"checkFormat\" value=\"AbbreviationAsWordInName\"/>\n    <property name=\"messageFormat\" value=\"^Abbreviation in name must contain no more than '2' capital letters.$\"/>\n  </module>\n. please fix \" Error \u2014 The Travis CI build could not complete due to an error \".\n. thank you fro you help !\nplease do us a favour, squash all your commits in one (I will do fast-forward merge). \n. thanks for update, I squashed and merged your changes.\nit will good for you to get to to know GIT a bit closely. No way to do it from web.\nFYI: https://github.com/sevntu-checkstyle/sevntu.checkstyle/wiki/Development-workflow-with-Git%3A-Fork%2C-Branching%2C-Commits%2C-and-Pull-Request\n. for your problem you need to select project in Packages/Projects View. problem in macroses usually happen after Eclipse view lost focus.\n. you can use     fast-forward-merge.sh for quick merge\n. merged.\n. > The Travis CI build could not complete due to an error\nPlease take a look.\n\ndo you have a schedule for a 5.8 release?\n\nWe not decided yet, it depends on size of changes we have, most likely at end of April or May.\n. @rwoo, can you describe in detail a reason to launch checkstyle from Junit ? \nI am just curious, need to know how checkstyle is used by community.\n. resolved by @sabaka .\n. http://checkstyle.sourceforge.net/config_annotation.html#AnnotationUseStyle\nhttp://checkstyle.sourceforge.net/property_types.html#closingParens\n. the same problem as https://github.com/checkstyle/checkstyle/issues/255. Already fixed.\n~/java/temp/7 $ export BUILD_HOME=/home/rivanov/java/git-others && java -jar $BUILD_HOME/checkstyle/target/checkstyle-5.9-SNAPSHOT-all.jar -c config.xml  Test.java \nStarting audit...\nAudit done.\n. \n. merged.\n. what tool is used to measure that (pictures) ?\n. > The question is - how defensive do we want to be in our API for checks. Maybe this is the case when we should relax defensive requirement in favour of performance?\nWe need to review Checkstyle API after GSoC to see how it should be changed to not let custom Checks change parse Tree and other hack presence in API. I am not ready to discuss that right now.\nWe could live with that performance problem for a log time, but without java8 support we become obsolete project very soon.\nSo lets postpone that change for till we have enough time for API changes.\n\nBut, IMHO, API have to be kept as stable as possible\n\nstable usually mean dead.  We do not need stable API, we need api that do make sense for all participants. So changes in API is unavoidable, but should be thoroughly designed.\n. Thanks for splitting to small parts that would ease review.\nLets keep that PR till all child PR are reviewed and merged if approved. \nI still focused on post-GSoC merges and fixes, please do not expect quick merges.\n\nP.S. It is really sad to see that we can not deal with contribution from one the prominent and well-known performance experts in the java world.\n\nafter \"constructive\" discussion , all fixes from \"prominent and well-known ..... \" are marked as lowest priority in comparison to GSoC.\n. that PR was spit in few parts (by Ivan Sopov) and some of them were merged.\n. we will not apply that, reason and slice and dice of problem are described at https://github.com/checkstyle/checkstyle/issues/407\n. one day we will do this, but priority is minimal as static code analysis could have performance inefficiencies. \nPerformance problems is less painful as functional problems and false-positives. \nBut thanks to reporting that, to let us not forget :). \n. to avoid any misunderstanding before development.\n1) Right now whole team is focused on https://github.com/checkstyle/checkstyle/wiki/Checkstyle-GSoC-2014-Project-Ideas , this is highest priority for a team and high demand from community.\nShould be finished at the beginning of September 2014.\n2) Multi thread update require, serious code review, and extended testing, and testing in major plugins - maven, eclipse, idea, netbeans, sonar. Sorry but I very sceptical that we will have time for this , see \"1)\".\nWe already have a lot of problems with correct parsing of some java files, so testing will become even more complicated as we need to distinguish new and existed problems. \n3) API changes is possible if reasonable. we could create Checkstyle 6.X version for this case. I am ok to brake backward compatibility if we let our users option to stay at 5.X version.\nBut it give us extra work to support our project. But our team is tiny. So I doubt that we could afford this now.\nI do not want to forbid you make Checkstyle better, I just want to warn you that stability for our project is in more priority then performance. I will not allow to do some changes in expense of stability. As example take a look at our experimental pool of Checks - https://github.com/sevntu-checkstyle/sevntu.checkstyle. There we do testing of Checks before introducing it to main project. Nobody like crashes of  Checkstyle, that usually result in switching OFF Checkstyle at all.\nSummary: if you still want to continue, please:\n- do fork, \n- do investigation, prepare a plan of changes and how you will do testing to ensure stability, \n- do draft update to estimate performance improvement\n- provide results/benefits of your implementation\nWE DO NOT PROMISE THAT ANY CHANGES WILL BE  APPLIED TO MAIN REPO, even you have some results, and spend a lot of time.\n. > This phrase alone is reasonable, however when it is reinforced by \"LocalizedMessage.getArguments is absolute no-no\", I understand that the only sane way of improving checkstyle is making a fork.\nreason of API change rejection is described in mail-list, see link at post above.\nI am closing this issue as owner is stopped any progress on it, and our team does not have in near plans to do it.\n. @HEm3R, changes are good to be merged, can you provide update for xdoc files to reflect new functionality at our web site, https://github.com/checkstyle/checkstyle/blob/master/src/xdocs/config_misc.xml#L764.\n. thanks a lot !!!!\nbuild failure was due to connection problem from build machine to our static web site -  not your problem.\n. merged without deep consideration of code quality.\nAll JavaDoc related Checks will be reviewed after implementation of https://github.com/checkstyle/checkstyle/wiki/Checkstyle-GSoC-2014-Project-Ideas#project-name-antlr-grammar-for-comments-and-documentation-comments-javadocs\n. I am ok with your changes, but ...\n@pulse00 , please \n1) update JavaDoc .\n2) HTML doc in xml:\nsource of html doc is: https://github.com/pulse00/checkstyle/blob/24959c7943e292386ce78efcc0cf1cc28b3fd6af/src/xdocs/config_misc.xml#L163\nresult html doc: http://checkstyle.sourceforge.net/config_misc.html#Translation\n3) Update UTs.\n. @pulse00, are you going to provide update ? if not your update will NOT be added to next release - 5.8.\n. @alexkravin, please rebase from the most recent checkstyle:master , I have  a build error.\nplease make your branch to appear in PR as reference, most likely we need to close that PR and open new one. \n. will be released in 6.2\n. @alexkravin , please reproduce it on checkstyle 5.7 , if reproduced on 5.7 and not reproduced on 6.1.1 - issue is fixed.\n. Ok, I mark it as fixed\n. Issues is closed, it is not a checkstyle library problem.\nPlease open issue against maven checkstyle plugin.\n. merged - https://github.com/checkstyle/checkstyle/commit/781f8b9a0f4c2aefe6c3acbe5a9e6e6ea7bd6a05\n. please provide following details:\n1) in what application/plugin your expecting this to use.\n2) describe functionality your trying to do\n3) provide a link to code that will use this update \n. sorry for delay.\nmerged.\nthanks a lot for contribution!\n. @softarn, please provide config and full exception/error message.\n. check: http://checkstyle.sourceforge.net/config_coding.html#FinalLocalVariable\ndetails on JNI and native methods could be found at https://blogs.oracle.com/moonocean/entry/a_simple_example_of_jni\nhttp://www3.ntu.edu.sg/home/ehchua/programming/java/JavaNativeInterface.html\nExample:\nJNIFoo.java\n```\npublic class JNIFoo {  \n    public native String nativeFoo();  \n   // Declare a native method average() that receives two ints and return a double containing the average\n   private native double average(int n1, int n2);\nstatic {\n    System.loadLibrary(\"foo\");\n}\n\npublic void print () {\nString str = nativeFoo();\nSystem.out.println(str);\n}\n\npublic static void main(String[] args) {\n(new JNIFoo()).print();\nSystem.out.println(\"In Java, the average is \" + new JNIFoo().average(3, 2));\nreturn;\n}\n\n}\n```\n. will be released in 6.2\n. unfortunately , this is not possible to be done by Checkstyle reliably and without false positives.\nCheckstyle does not aware about types at all. He have information only from one Java file.\nint sum = 5;\nsum += otherObject.getDouble42();\nwill never be caught by Checkstyle. As it require binary analysis of whole classes. So FindBug is good candidate for this validation, please open issue against them. \n. unfortunately Checkstyle is library and we have no ability to change code of maven plugin or Sonar plugin - they are different project and maintained by different teams.\nPlease report this issue against appropriate projects.\n. merged, I hope you will find a way to force maven to compile resources during validation phase, after you finish that update. That will ensure that all future updates on inputs are compilable.\n. ok, thanks, if that be hard, please change comment to \"partial fix\" and lets do merge.\n. merged.\n. @vlsi , build is failed, please make sure that \"mvn verify\" command passing without errors before pull request.\nTo avoid numerous rejection of PRs please open discussion at https://groups.google.com/forum/#!forum/checkstyle-devel, and lets discuss your code there , I will let you know in mail-list when you be ready for PR.\n. PR is switched to discussion https://groups.google.com/forum/#!topic/checkstyle-devel/ln3rJd5_gbI .\nI am closing this PR till final decision on how to resolve problem In addition unclear proposed solution, code update is not up to standard in our project, so PR should be redone no matter what. \n. resolved in #206 .\n@maxvetrenko , please update your Checks\n. @maxvetrenko, build is failed.\n. all is fine , but ...\nissue that you are referencing in commit message it going to maxveternko repo, so all details and reasons of change will be lost when you drop your fork.\nplease create issue in Checkstyle and put there summary of changes and reason of change, update commit message to reference checkstyle issue.\n. fixed.\n. fixed.\n. UT was updated and code is merged.\n. merged.\n. merged by script.\n. merged by script.\n. merged by script.\n. UT was updated and code is merged.\n. merged, but ...\nI have a bad news for you, that Check and all other Checks that are TypeAwareCheck will be deprecated in next releases.\nReason: implementation of that feature is now full and too error prone. I would suggest to use similar validations in FindBug or PMD project if any or request to implement it.\n. The main idea of Checkstyle is validation base on one file, Checkstyle does not aware of types and hierarchy of classes. All Checkstyle have is a parsing tree of tokens (String).\nThat idea make it very easy to create new Checks, but make it impossible to validate more complicated cases (too much false positives appear).  \nRight now we rely on class-path to get information about other class. But class-path is runtime known structure, it could be different for UTs and Runtime. Right now we have two checks that try to use class-path  - both of them problematic. Moreover, there is complain from Sonar project that that kind of implementation base on class-path cause problems with memory lick.\nAbstractTypeAwareCheck - was attempt to cover cross-file validation, as right now we do not have enough developers to make it stable, I would rather move it to staging area. \nSo, for now I would rather remove that Checks from Checkstyle, resolve more acute problems in Checkstyle and then come back to stable class-path implementation as we have time as human resources.\nin 5.8 this Check will stay in Checkstyle - I can not remove/ignore your fix :) , most likely it will be removed in next release, so you will have option to stay on 5.8 till you think it is reasonable.\n. thanks for feedback:\nall site sources are located at https://github.com/checkstyle/checkstyle/tree/master/src/xdocs\nExample: \"LeftCurly\" is in https://github.com/checkstyle/checkstyle/blob/master/src/xdocs/config_blocks.xml#L92\nyou do not need to checkout sources to local drive and can edit all online and provide Pull Request, all contributions will be authored by you. \n. @peteroupc, is this issue fixed by your PR (#181) ?\n. merged.\n. merged.\n. merged,fixed.\n. we need to extend a JavaDoc and Xdoc to have list of all supported tokens, \nexample : http://checkstyle.sourceforge.net/config_sizes.html#MethodLength \nAnd we need to extend existing example to have at least one new Token.\n. ok to PR.\n. merged manually.\n. we need to recheck how this is conflicting/overlapping with already done feature - https://github.com/sevntu-checkstyle/sevntu.checkstyle/pull/185\n. implementation of @pbaranchikov is in testing area, it might appear in main project this Autumn.\n. merged.\n. merged.\n. RedundantThrows will be deprecated in future releases.\nSee details at https://github.com/checkstyle/checkstyle/pull/177#issuecomment-48192498\n. @baratali , please squash last two commits in one.\n. this PR is postponed till 5.9 release.\n. merged manually as fast-forward.\n. merged. fixed.\n. merged, fixed.\n. merged manually.\n. merged.\n. merged.\n. merged\n. I do not see allowEmptyAnonymousClasses option in changes.\n. I do not see a reason too, but you described/requested it in issue. If you do repost from SF then place additional comment that describe how it will implemented. Put to sf issue link to github to let author know destiny of that issue, and we need to close sf issue.\n. please do PR.\n. merged.\n. you can do PR, code is good.\n. closed on SF\n. 1)\ninterface FooInterface {\n Input foo();\n}\nInput != T ,please fix and do PR.\n. merged.\n. it is strange problem with build , it pass on local. I asked Max to do PR to keep that investigation on our side.\n. @maxvetrenko , please run \"mvn test\" from terminal.\nyou will see \n```\nT E S T S\nError: Could not find or load main class ${argLine}\nResults :\nTests run: 0, Failures: 0, Errors: 0, Skipped: 0\n```\nIt is my problem for now \"Error: Could not find or load main class ${argLine}\".\nplease remove ${argLine} from pom.xml to make a config like:\n<plugin>\n        <groupId>org.apache.maven.plugins</groupId>\n        <artifactId>maven-surefire-plugin</artifactId>\n        <version>2.9</version>\n        <configuration>\n          <argLine> -Duser.language=en -Duser.country=US</argLine>\n        </configuration>\n      </plugin>\nrun \"mvn test\" again \nyou will have \n```\nResults :\nFailed tests:   testInterfaceDefault(com.puppycrawl.tools.checkstyle.checks.naming.TypeParameterNameTest)\n  testInterfaceFooName(com.puppycrawl.tools.checkstyle.checks.naming.TypeParameterNameTest)\nTests run: 741, Failures: 2, Errors: 0, Skipped: 1\n```\nsee details at:\ncheckstyle/target/surefire-reports/com.puppycrawl.tools.checkstyle.checks.naming.TypeParameterNameTest.txt\nit is your problem :), as UT is failing in Check logic.\n. in just fixed build problem, please pull from master branch latest code, no removing is required anymore.\n. merged, @sabaka , please put # in front of issue number to let github make a link to issue.\n. merged, thanks for contribution, next time please do not forget tot update Documentation\n. I will apply that PR as we start braking compatibility in API and deprecating of sore checks.\n. merged as FF, thanks a lot\n. squashed, merged.\nThanks for contribution!\n. code was refactored, rabased , merged.\ncommits:\n0ceec1502926f96f81534cf84cf3d50536f17db1\n9c9ba5466dd13f5da92e350772994f896a6e5cdf\n. final fix is 7c5f94aafd422312a6c19a36f53796d547788827\n. merged: 7c5f94aafd422312a6c19a36f53796d547788827, 9c9ba5466dd13f5da92e350772994f896a6e5cdf, 0ceec1502926f96f81534cf84cf3d50536f17db1\n. merged, fixed\n. merged.\nthanks for contribution!\n. merged.\n. Hi Max,\n\ncountMatches(sUnicodeRegexp, literal);\n if (!(mAllowByTailComment && hasTrailComment(aAST)\n\nwhat is a reason for calling method \"countMatches\" and ignoring it's return value.\n2) \nI do not understand why that check do violation on that line.\nhttp://maxvetrenko.github.io/xref/com/google/common/base/CharMatcher.html#L77\nare you  sure that all cases of \"Unicode escape(s) usage should be avoided.\" is correctly highlighted ?\n. > it's not a control char,\nhttp://en.wiktionary.org/wiki/Appendix:Control_characters search for \"85\" (second occurrence)\nfrom Check code \"...|00[8-9][0-1A-Fa-f]|..\" =???= \"0085\"\ncall me in skype.\n. please regenerate http://maxvetrenko.github.io/ to let me how Check is behaving on real code.\n. @maxvetrenko , after report regeneration, please confirm that all violations are valid \n. merged.\n. @rdiachenko or @rdiachenko is it ready for my code review ?\nWhat is a status ?\n. merged.\n. hi @yudindi , please provide detailed description of the problem(code,config,message) and what is correct. UT should have positive and  negative test cases.\n. thanks a lot for description of problem and your contribution.\nsquashed in one commit, merged.\n. original issue is started there - https://twitter.com/pilhuhn/status/495285548811292673, but this is not the only request for that issue.\n. That issue will be useful for future upgrades to new Java version , as checkstyle will always be behind of java syntax changes for some time. That will allow users to force Checkstyle ignore file parsing (an as result failing) and analysis of some files. User could deside himself what it better to keep code on the leash with Code Standards or use new syntax features.\n. merged.\n. merged.\n. merged.\n. @maxvetrenko , please fix a build problem, before PR please run \"mvn clean verify\"\n. I have a problem with manual merge, please rebase your changes over master again.\n. @tonyghita, https://github.com/checkstyle/checkstyle/issues/10#issuecomment-51853953\n. mean while please do build yourself \"mvn -Pdistro package\" and provide us feedback after testing over your sources.\n.  build is failed\n\n[ERROR] /home/travis/build/checkstyle/checkstyle/src/main/java/com/puppycrawl/tools/checkstyle/api/TokenTypes.java:3435: error: bad use of '>'\n[ERROR] * \"->\" lambda specifying symbol.\n\nhave to be fixed.\n. merged ! THANKS A LOT !\n. please make it like option to ignore a empty line between fields \"allowNoEmptyLineBetweenFields\". That is reguirement of Google, all other could enjoy morestrict Check.\n. merged.\n. thanks for contribution.\nIt might be @oburn could share what problems he had with UTF-8, his changes https://github.com/checkstyle/checkstyle/commit/c3205aa0fb1c49535ad6bf19e1cb0f23d6f7159f, for now iso-8859-1 is enforced at https://github.com/checkstyle/checkstyle/blob/master/pom.xml#L150.\n. merged.\n. @maxvetrenko, please do not forget to sync checkstyle/checkstyle:master to maxvetrenko/checkstyle:master and reabse issue branch from fresh/synced master. \nmerged.\n. thanks a lot! strnage why I missed that stuff.\n. merged.\n. reason of Check creation is https://google-styleguide.googlecode.com/svn-history/r130/trunk/javaguide.html#s3.3.3-import-ordering-and-spacing\n. @maxvetrenko , please update xdoc.\nFYI: https://github.com/checkstyle/checkstyle/issues/234\n. @brutall, update is right, but ...\nhow you run into that case ? you keep an eye on our GSoC activity/reports or you blocked by this in your code ?\n. @brutall, we also catch during testing over openJDK, I will postpone merge of your fix till we intergate java8 and javadoc support to ease merge.\n. @sabaka, please review that change.\n. @sabaka ,\nI agree with you, it should looks as it is for variable definition:\n\nplease do:\n1) create separate issue , attach all that images .\n2) send your PR.\nthis PR is closed, without merge.\n. sorry for close, brutall variant was a right.\n. merged.\nThanks a lot for your contribution.\n. merged.\n. @maxvetrenko, javadoc and xdoc should be updated as new default value is added.\n. merged.\n. merged.\n. merged.\n. merged.\n. merged.\n. merged.\n. merged.\n. @baratali, please fix build problem.\n. merged.\n. merged.\n. merged.\n. merged.\n. merged.\nThanks a lot !\n. slightly changed code with basic indentation as \"2\"\nclass HelloWorldApp {\n  public void setX(int newX) {\n    getItem().x = newX;\n  }\n}\nconfig: https://github.com/checkstyle/checkstyle/blob/master/google_checks.xml#L142\nTested as:\n~/Temp/2 $ java -jar $BUILD_HOME/checkstyle/target/checkstyle-5.9-SNAPSHOT-all.jar      -c $BUILD_HOME/checkstyle/google_checks.xml  HelloWorldApp.java \nStarting audit...\nAudit done.\nFixed @maxvetrenko,  at #294 .\nWill be released as 5.9 in few days.\n. please read https://github.com/checkstyle/checkstyle/blob/master/src/xdocs/contributing.xml, sorry that it is not a HTML yet, but you can generate web site by \"mvn -Pdisto package\" to ease reading.\nIn short - News Checks are not allowed in main project, should pass testig at sandbox project first.\n. ok, you are welcome to https://github.com/sevntu-checkstyle/sevntu.checkstyle\n. thanks a lot ! for detailed report.\n. thanks a lot for your time desire to help!\n. 1) please squash all commits in one.\n2) I do not like that Builder definition is hard-coded, it should be setup by user.\n3) why mIgnoreSetter does not work for you ? (please provide detailed description of code that you have, config that you use and what you would like to have)\n. That for description ,now It see clearly what is your intend.\n\n2) I do not like that Builder definition is hard-coded, it should be setup by user.\n\nyou missed that point to fix.\nConsider builder example: https://docs.jboss.org/hibernate/orm/3.3/reference/en-US/html/querycriteria.html\nif you rely on name to distinguish \"Builder\" do not assume that will always be named like this. User have to define it, but you can give good default values.\n\n(mIgnoreBuilderSetter ? \"(set|with)\" : \"set\")\n\nWhy you think that with set and with are the only names that could be used in Builder, see link above?\n. @wigbam , looks closer to true but .....\nLets come back to original problem. You have problem with setter recognition, so you need to have option that allow you to specify what prefix should mark method as \"setter\".\nIn you approach we try to specify set of classes(regexp) where that setter recognition is custom.\nBut what if have few types (.Builder with \"with.\"  and .Creator with \"add.\") in in each of them its own custom prefix that mean setter.\nSo as we would have one option for Prefix and ClassName we need to combine regexp to cover all, so we might have false-positives between Builder and Creator groups (in Creator with is not a setter).\nSo we come back to original idea that setter recognition should be general for all classes. Update is simple - just implement setterPrefixRegex. But this is also give your missed cases when method \"withItem\" appear in non Builder class.\nterm \"setter\" is highly debatable in Java - it is up to a user , what is setter and what is not. So I think that just implementing setterPrefixRegex will be enough.\ndo you follow me ?\n. @wigbam, you are right, let me think about it one more time.\n. @wigbam, one more idea:\nIt look to me that we need only one option that detect Builders classes. And we will ignore by that type name all inner methods that return that Builder type - as in builder all methods that return himself is kind of Setter (no extra options for detecting \"with\" prefix is required).\nSo option could be : \nignoreSetterInBuilderTypes=\"*Builder$\"\nin description (javadoc) of that option we need describe in detail how it works\nDoes it make sense ?\n. PR is closed , discussion is moved to mail-list https://groups.google.com/d/msg/checkstyle-devel/aPNYF3RC_yU/lGHsgRPCO38J\nAfter we come to agreement on design , PR could be recreated.\n. violations on generated code:\n/grammars/GeneratedJavaRecognizer.java:1589: warning: no @throws for antlr.TokenStreamException\nHTML specifics for JavaDoc:\nUpperEllCheck.java:37: error: header used out of sequence: <H4>\nDeclarationOrderCheck.java:36: warning: empty <p> tag\nEqualsAvoidNullCheck.java:64: error: self-closing element not allowed\nRequireThisCheck.java:44: error: unexpected end tag: </p>\n. https://github.com/checkstyle/checkstyle/tree/issue-261-java8-errors-on-javadoc\n. fixed in https://github.com/checkstyle/checkstyle/commit/0c417b3c902b8474428fc7068505c21586c738b3\n. @maxvetrenko, please rename it to \"google_checks.xml\" to follow naming pattern of other configurations.\n. merged\n. please fix broken indentation in examples, comments should be on the same position to ease reading\n. generate site by \"mvn -Pdistro package\" and resolve:\nplease fix broken indentation in examples, comments should be on the same position to ease reading\n. I expect changes only for one point.\n. description https://github.com/checkstyle/checkstyle/issues/265\n. will be released in 6.2\n. merged.\n. please switch to mail list for discussions https://groups.google.com/forum/#!forum/checkstyle-devel\nand close that issue.\nPlease share your Check sources to let us see full context of your problem.\n. discussion was moved to https://mail.google.com/mail/u/0/?ui=2&pli=1#inbox/1485997d5dcefd02\n. @ychulovskyy, thanks for contribution, but please make UTs pass.\n. squashed, merged.\n. merged - https://github.com/checkstyle/checkstyle/commit/781f8b9a0f4c2aefe6c3acbe5a9e6e6ea7bd6a05\n. merged - https://github.com/checkstyle/checkstyle/commit/ca9644638dbd6c13b9c7d123dcc08df327f9156b\n. merged - https://github.com/checkstyle/checkstyle/commit/cf3879aa537cc597ac74aa762ba89b15883a4b39\n. Please provide exact code and config you use, that will spread up fixing that problem.\n. no, use case was provided, Indentation Check was seriously updated at e3a48d1527341456a798c3f0c1986de6898a8c60. Issue is closed as non reproduced.\n. thanks a lot!\n. 1) Please move all from updateIgnoreNamesRegexp to setter.\n2) no need in wrapping exception \"throw new ConversionException(\"unable to parse \" + aFormat, e);\" , you provide no useful information or any context .\n3) please rename \"ignoreNames\" --> \"ignoreNamePattern\", as field is not a list of names, but regexp.\n. please squash your commits in one, I need to see changes from base code only.\n. @ychulovskyy, changes a valid, but how did you get that violations ?\n. still a problem even after fixing #294. \n~/java/temp/7 $ export BUILD_HOME=/home/rivanov/java/git-others && java -jar $BUILD_HOME/checkstyle/target/checkstyle-5.9-SNAPSHOT-all.jar -c config.xml  Test.java \nStarting audit...\n~/java/temp/7/Test.java:4: 'x' have incorrect indentation level 6, expected level should be 8.\n~/java/temp/7/Test.java:5: 'x' have incorrect indentation level 6, expected level should be 8.\nAudit done.\n. info: http://docs.oracle.com/javase/tutorial/java/IandI/interfaceDef.html\n. Please provide us command line ( see main site for this), your config, your input files.\n. Please update documentation for static web site, sources are located at \"xdocs\" folder of project.\nhttps://github.com/checkstyle/checkstyle/blob/master/src/xdocs/config_javadoc.xml\n. thanks for pinning me, I missed your update.\nMerged.\n. https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/ModifierOrderCheck.java\nshould have option to set-up user defined order, default stay with JLS recommendations\n. \"default\" should be added\n. @sabaka fixed the problem, please confirm that you do not have more false-positives on java8, I am about to make a final release.\n. Please recheck on latest code, we already fixed similar problem. You can build whole checkstyle by \"mvn -Pdistro package\" command.\n. thanks a lot!\n. please report that problem plugin project - http://sourceforge.net/p/eclipse-cs/bugs/\n. http://checkstyle.sourceforge.net/config.html, search for \"suppress\" on the page.\nLet me know if still need smth special that we do not have.\n. If you can not generate comments and have ability to generate only annotations, please describe us your tools in detail to let us see why annotation suppression in on demand.\n. http://checkstyle.sourceforge.net/config.html#SuppressWarningsFilter\n. merged.\n. thanks a lot, will be release in 5.9 (in a few days).\n. merged manually as fast forward merge.\n. merged manually as fast forward merge.\n. merged to master will be release in 5.9 in few days.\n@lkoe, do we need backport it to 5.8 or you can drop that config out Eclipse-CS for that release ?\n. merged.\n. merged.\n. will be released in 6.2\n. will be release in 6.2\n. merged.\n. > allowMultipleAnnotations\nplease rename to allowSamelineMultipleAnnotations\n\nmAllowSameLineSingleParrametterlessAnnotation \n\nfix typo , should be \".....Parameterless....\"\n\nmissed JavaDoc \n\nCheck location of annotation on language elements.\nBy default, Check enforce to locate annotations immetiately  after documentation block and before target element\n, annotation should be located on separate line from target element.\nExample:\n@Override\n@Nullable\npublic String getNameIfPresent() { ... }\nCheck have following options:\nmAllowSamelineMultipleAnnotations - to allow annotation to be located on the same line as taret element. Default value is false.\nmAllowSameLineSingleParameterlessAnnotation - to allow single prameterless annotation to be located on the same line as taret element. Default value is false.\nmAllowSamelineParametrizedAnnotation - to allow prameterized annotation to be located on the same line as taret element. Default value is false.\nExample to allow single parameterless annotation on the same line\n@Override public int hashCode() { ... }\nuse following configuration:\n!!!!!CONFIG!!!! mAllowSamelineMultipleAnnotations=false ; mAllowSameLineSingleParameterlessAnnotation= true; mAllowSamelineParametrizedAnnotation= false\nExample to allow multiple parameterized annotations on the same line\n@SuppressWarnings(\"deprecation\") @Mock DataLoader loader;\nuse following configuration:\n!!!!!CONFIG!!!! mAllowSamelineMultipleAnnotations=true ; mAllowSameLineSingleParameterlessAnnotation= true; mAllowSamelineParametrizedAnnotation= true\nExample to allow multiple parameterless annotations on the same line\n@Partial @Mock DataLoader loader;\nuse following configuration:\n!!!!!CONFIG!!!! mAllowSamelineMultipleAnnotations=true ; mAllowSameLineSingleParameterlessAnnotation= true; mAllowSamelineParametrizedAnnotation= false\n. merged manually as FF.\n. as such problem existed and nobody complained, I think it is ok to do 5.9 rollout and resolve problem later.\n. Fixed by Ilja Dubinin.\n. @ben-manes, do you want to have that configs in checkstyle-6.1.1-all.jar  and put it on maven ? or jut to put in checkstyle-6.1.1.jar  that is already on maven ?\nplease describe how you are going to use it, I am just curious.\nLinks:\nhttp://repo1.maven.org/maven2/com/puppycrawl/tools/checkstyle/6.1.1/\nhttps://sourceforge.net/projects/checkstyle/files/checkstyle/6.1.1/\n. merged manually\n. merged manually\n. merged manually\n. merged.\n. will be done as option at JavadocMethodCheck\n. merged manually\n. merged manually\n. merged manually\n. merged manually\n. merged manually\n. merged\n. merged\n. merged manually.\n. will be released in 6.2\n. merged manually\n. merged manually\n. merged manually\n. merged manually\n. merged manually.\n. 1) please put a javadoc/xdoc like \n\nmMinLineCount\n\nminimal amount of lines in method to demand documentation presence\n\nmAllowSelfExplanatoryMethods\n\njust remove that field, as mMinLineCount do all that is required.\n\nmAllowedAnnotations\n\nlist of annotations that  could allow missed documentation\n2) prepare update for google-checks.xml and its HTML page.\n. merged manually\n. duplicate of https://github.com/checkstyle/checkstyle/issues/332\n. reference: https://github.com/maxvetrenko/checkstyle/issues/18\n. merged.\n. yes, I agree, to support comments Indentation Check will need to be moved to group of Checks that are comments aware, so that could be a problem to its stability.\n. merged manually as FF\n. merged manually as FF\n. merged.\n. merged manually as FF\n. Fixed by Ilja Dubinin.\n. no changes since 6.0 , tag is in repo : \n22:11 ~/java/git-others/checkstyle/checkstyle [master|\u2714] $ git tag | grep checkstyle\ncheckstyle-5.8\ncheckstyle-5.9\ncheckstyle-6.0\nplease clarify what you need.\n. should be fixed, all changes are merged.\n. proove: https://code.google.com/p/google-collections/source/browse/trunk/src/com/google/common/collect/StandardMultimap.java?r=80#312\n. merged as FF, thanks a lot.\n. Could somebody provide some comparison report of performance improvement.\nwhy 8k ? Why not 16k?\nLinks that show that buffer size is not exact:\nhttp://stackoverflow.com/questions/1552107/optimum-file-buffer-read-size\nhttp://zabkat.com/blog/buffered-disk-access.htm\nhttp://zabkat.com/blog/optimal-disk-access.htm\nhttp://www.javamex.com/tutorials/io/input_stream_buffer_size.shtml\nhttp://www.coderanch.com/t/501465/java-io/java/Setting-buffer-size\n. I also do not understand why we do \"Math.max(1, ...)\"\n. I do not see any significant performance changes during Read buffer size changes, looks like the same. PR is closed.\nMy testing (not ideal):\n06:51 ~/Temp/3 $ time java -jar checkstyle-6.1-1K-all.jar     -c /home/rivanov/java/git-others/checkstyle/checkstyle/sun_checks.xml       -o checkstyle-report.txt -r guava-libraries\nreal    0m48.798s\nuser    1m21.389s\nsys 0m1.720s\nreal    0m49.767s\nuser    1m18.501s\nsys 0m1.640s\nreal    0m51.332s\nuser    1m25.085s\nsys 0m1.656s\nreal    0m47.677s\nuser    1m18.353s\nsys 0m1.612s\nreal    0m47.034s\nuser    1m15.537s\nsys 0m1.584s\n======================for build with 8K==============================\nreal    0m52.882s\nuser    1m26.793s\nsys 0m1.908s\nreal    0m48.018s\nuser    1m17.981s\nsys 0m1.764s\nreal    0m44.731s\nuser    1m12.665s\nsys 0m1.204s\nreal    0m46.620s\nuser    1m15.145s\nsys 0m1.156s\nreal    0m49.656s\nuser    1m20.933s\nsys 0m1.760s\n====================for build with 16K===================================\nreal    0m58.719s\nuser    1m33.946s\nsys 0m1.604s\nreal    0m59.198s\nuser    1m33.742s\nsys 0m1.768s\nreal    0m59.490s\nuser    1m37.794s\nsys 0m1.964s\nreal    0m59.368s\nuser    1m33.934s\nsys 0m1.708s\nreal    1m0.011s\nuser    1m39.722s\nsys 0m2.084s\n====================for build with 4K===============================\nreal    0m58.910s\nuser    1m33.494s\nsys 0m1.644s\nreal    0m58.980s\nuser    1m34.590s\nsys 0m1.656s\nreal    1m0.059s\nuser    1m38.350s\nsys 0m2.044s\nreal    0m59.194s\nuser    1m33.862s\nsys 0m1.632s\nreal    0m58.785s\nuser    1m34.166s\nsys 0m1.580s\n. I am closing that PR, not completely against it, but i still think our team will find time to review api and chage api in mininal amount of iterations. I still think we will be able to make api as immutable access to parse tree.\n. merged as FF, thanks a lot for explanation link!\n. merged as FF, thanks a lot for fix.\n. merged as FF, thanks for fix.\n. will be released in 6.2\n. merged as FF, thanks a lot.\n. fixed, planned to be released in 6.2\n. Please update description to specify what is expected code, and what kind of message you expect.\n. Current behavior is expected and correct as we allow more spaces in lineWrappingIndentation than specified in option.\nTo support requested feature we need to make new boolean option strictLineWrappingIndentation. That will check that indentation on line wrap is strict.\n. thanks a lot !!!\n. 1) documentation is there - http://checkstyle.sourceforge.net/config_annotation.html#AnnotationLocation\n2) spelling is fixed.\n3) inconsistency in camel case is fixed.\n\nSome javadoc.\n\nthat was my request, to allow student to finish task on time. That will be fixed for sure. I am not closing an issue to keep that as reminder\n. I need to move that Check to annotation package, later today.\nThanks alot for your attention, i appresiate that.\n. 1) Check was moved to annotation package\n2) web doc (xdoc) was upadated for proper default value\n. merged as FF\n. yes, it is duplicate\n. UnusedImports need to be rewritten base on our new \"Javadoc parser\" that is based on grammar.\nWe will keep issue open to ensure that following case is supported in new implementation\n. I have a problem with sysout output\n\"areLtsAndGtsBalanced(currentLtLevel)\"\ncaused by:\ncheckstyle/target/generated-sources/antlr/com/puppycrawl/tools/checkstyle/grammars/GeneratedJavaRecognizer.java\ncmd line:\njava -jar checkstyle-6.1-SNAPSHOT-all.jar \\\n    -c checkstyle/checkstyle/sun_checks.xml  \\\n    -o checkstyle-report-jdk.txt -r jdk/src/share/classes\n. merged as FF, thanks a LOT!\n. merged as FF, thanks a lot.\n. thanks for feedback , but I do not see that exception, Please give me output of following commands:\n```\n06:39 /var/tmp $ git clone https://github.com/checkstyle/checkstyle.git\nCloning into 'checkstyle'...\nremote: Counting objects: 47400, done.\nremote: Compressing objects: 100% (15/15), done.\nremote: Total 47400 (delta 5), reused 0 (delta 0)\nReceiving objects: 100% (47400/47400), 34.37 MiB | 2.60 MiB/s, done.\nResolving deltas: 100% (26762/26762), done.\n06:41 /var/tmp $ java -jar /home/rivanov/java/git-others/checkstyle/checkstyle/target/checkstyle-6.1-all.jar \\\n\n-c /home/rivanov/java/git-others/checkstyle/checkstyle/google_checks.xml  \\\n-o checkstyle-report-checkstyle.txt -r checkstyle\n\n06:47 /var/tmp $ grep \"Got an exception\" checkstyle-report-checkstyle.txt\n06:47 /var/tmp $ \n06:48 /var/tmp $ java -version\njava version \"1.7.0_45\"\nJava(TM) SE Runtime Environment (build 1.7.0_45-b18)\nJava HotSpot(TM) 64-Bit Server VM (build 24.45-b08, mixed mode)\n06:48 /var/tmp $ uname -a\nLinux rivanov-Latitude-E6520 3.2.0-57-generic #87-Ubuntu SMP Tue Nov 12 21:35:10 UTC 2013 x86_64 x86_64 x86_64 GNU/Linux\n0\n```\n\nI updated release instructions to avoid such possible problems in future\n. it is already fixed in 6.1.\n. it is bug.\n. will released be in 6.2\n. merged as FF, thanks a lot.\n. merged as FF, thanks a lot !\n. > current\nis detected again\n. merged as FF, thanks a lot!\n. merged as FF, thanks a lot  !\n. it is duplicate of https://github.com/checkstyle/checkstyle/issues/339\n. merged as FF, thanks a lot !\n. NO way to get that from java beans. All descriptions are stored in JavaDoc and as a copy in xml files at \"xdoc\" folder. HTML is generated from that xdoc files.\nyou can use \"section\" name - http://checkstyle.sourceforge.net/config_coding.html#NoClone\nNext time please use mail-list for such question.\n. Thanks a lt for fix, but please provide UT\n. merged as FF, thanks a lot.\n. will be in 6.2\n. @isopov , any details about \"something\" ?\n. @ychulovskyy , it is not clear why you removed violations : \n- \"15:17: Fields and methods should be before inner classes.\",  \n- \"25:17: Fields and methods should be before inner classes.\",  \n- \"26:17: Fields and methods should be before inner classes.\",  \n- \"39:25: Fields and methods should be before inner classes.\",  \n- \"40:25: Fields and methods should be before inner classes.\",  \n...\nall of them were valid cases , violation is expected on them. Please explain.\n. you are right, I misread the input file.\ncode is merged as FF.\n. thanks for attempt to help us , but Build is failed \nhttps://travis-ci.org/checkstyle/checkstyle/jobs/41751167\n```\n[checkstyle] Running Checkstyle 6.2-SNAPSHOT on 660 files\n[checkstyle] /home/travis/build/checkstyle/checkstyle/src/main/java/com/puppycrawl/tools/checkstyle/Main.java:88: Line is longer than 100 characters (found 108).\n```\n. output:\n/var/tmp $ java -jar checkstyle-6.2-SNAPSHOT-all.jar -v \nCheckstyle version: 6.2-SNAPSHOT\n. thanks a lot for reporting an issue, we already if progress with fixing other issue for that Check. We might fix them together.\ndiscussion: https://groups.google.com/forum/#!topic/checkstyle-devel/aPNYF3RC_yU\n. merged as FF, thanks a lot.\n. merged as FF, thanks a lot !\n. fixed https://github.com/checkstyle/checkstyle/commit/b6164108ca219d83d50af6766b491f929c41a3d4 , if smth is not correct or should be changed , please do changes yourself and send PR.\n. fixed by Alexey.\n. merged as FF.\n. merged as FF\n. merged as FF\n. merged as FF\n. merged as FF\n. merged as FF\n. merged as FF\n. merged as FF\n. static in interface is allowed in java8 - https://docs.oracle.com/javase/tutorial/java/IandI/defaultmethods.html\n. merged as FF\n. merged as FF\n. merged as FF\n. merged as FF\n. I do not see that InputModifier2.java is moved , it is just created.\nare you sure that changes in pom.xml is required in this PR.\n. merged as FF\n. merged as FF\n. please keep the same code in input, you can rename Exceptions a bit and inherit them from anything you want. \n. why exactly it is not possible ?\n. merged as FF\n. InputDefaultComesLast2.java is invented ? lets merge to main repo changes for pom.xml and then do merges for Checks one by one.\n. merged as FF\n. \"<  T  >\" have to stay in Input files\n. merged as FF\n. @baratali , can you please review that changes\n. merged as FF\n. merged as FF\n. merged as FF\n. merged  as FF\n. merged as FF\n. merged as FF\n. merged as FF\n. merged as FF\n. Travis is not agree to merge\n. removing test is never is solution, if Input cal not be compiled due to absent package - move it to special folder and put a comment why it is standing in incompilable folder.\n. merged as FF\n. merged as FF\n. merged as FF\n. merged as FF\n. merged as FF\n. merged as FF\n. merged as FF\n. merged as FF\n. merged as FF\n. merged as FF\n. that is very strange Check - http://checkstyle.sourceforge.net/config_coding.html#JUnitTestCase\nI do not even understand how it work, we need to read its code ...\n. all tests is not compilable as \"attempting to assign weaker access privileges; was public\" or due to different return time, that is definetely java error, so not required to have such tests at all.\nmerged as FF.\nBut this Check is completely unusable validation ..... it should be removed from Checkstyle.\n. the whole Check need to be reimplemented to use new parsing Tree instead of RegExp.\nThat could take a while.\n. please create a UTs for this , as it was problem in grammar https://github.com/brutall/checkstyle/commit/91e7df2c4b5c5488f853713c21371094c20ccdbf. Expected is just not fail on that file, no need to test created AST tree.\n. merged as FF\n. Checkstyle should fail on parsing of files with UTF-8 file, but you converted test to Check violation, that is not test was designed.\n. Java supports utf8 in names, why that input incompilable ?\n. Please read my comment above.\n. 1) why SemicolonBetweenImports.java in non-compilable ?\n2) So what you tested ?\n22:39 ~/java/temp/1 $ javac InputGrammar.java \n22:39 ~/java/temp/1 $ ls \nInputGrammar.class  InputGrammar.java\n22:39 ~/java/temp/1 $ java -version\njava version \"1.7.0_45\"\nJava(TM) SE Runtime Environment (build 1.7.0_45-b18)\nJava HotSpot(TM) 64-Bit Server VM (build 24.45-b08, mixed mode)\n22:39 ~/java/temp/1 $ cat InputGrammar.java \npublic class InputGrammar\n{\nint \u00e9 = 1; // illegal, unless UTF-8\n}\n22:42 ~/java/temp/1 $\n. And what ?\n``\n17:26 /var/tmp/1 $ java -version\njava version \"1.7.0_45\"\nJava(TM) SE Runtime Environment (build 1.7.0_45-b18)\nJava HotSpot(TM) 64-Bit Server VM (build 24.45-b08, mixed mode)\n17:26 /var/tmp/1 $ wget https://raw.githubusercontent.com/alexkravin/checkstyle/fac425b77a925f26375c65ed69bacc47a788df7c/src/test/resources-noncompilable/com/puppycrawl/tools/checkstyle/grammars/InputGrammar.java\n--2014-12-05 17:26:29--  https://raw.githubusercontent.com/alexkravin/checkstyle/fac425b77a925f26375c65ed69bacc47a788df7c/src/test/resources-noncompilable/com/puppycrawl/tools/checkstyle/grammars/InputGrammar.java\nResolving raw.githubusercontent.com (raw.githubusercontent.com)... 199.27.79.133\nConnecting to raw.githubusercontent.com (raw.githubusercontent.com)|199.27.79.133|:443... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 157 [text/plain]\nSaving to:InputGrammar.java'\n100%[==============================================================================>] 157         --.-K/s   in 0s      \n2014-12-05 17:26:29 (2.16 MB/s) - `InputGrammar.java' saved [157/157]\n17:26 /var/tmp/1 $ ls -l \ntotal 4\n-rw-rw-r-- 1 rivanov rivanov 157 Dec  5 17:26 InputGrammar.java\n17:26 /var/tmp/1 $\n17:26 /var/tmp/1 $ wget https://raw.githubusercontent.com/alexkravin/checkstyle/fac425b77a925f26375c65ed69bacc47a788df7c/src/test/resources-noncompilable/com/puppycrawl/tools/checkstyle/grammars/SemicolonBetweenImports.java\n--2014-12-05 17:27:32--  https://raw.githubusercontent.com/alexkravin/checkstyle/fac425b77a925f26375c65ed69bacc47a788df7c/src/test/resources-noncompilable/com/puppycrawl/tools/checkstyle/grammars/SemicolonBetweenImports.java\nResolving raw.githubusercontent.com (raw.githubusercontent.com)... 199.27.79.133\nConnecting to raw.githubusercontent.com (raw.githubusercontent.com)|199.27.79.133|:443... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 148 [text/plain]\nSaving to: `SemicolonBetweenImports.java'\n100%[==============================================================================>] 148         --.-K/s   in 0s      \n2014-12-05 17:27:33 (3.42 MB/s) - `SemicolonBetweenImports.java' saved [148/148]\n17:27 /var/tmp/1 $ javac SemicolonBetweenImports.java \n javac InputGrammar.java \n17:26 /var/tmp/1 $ \n17:27 /var/tmp/1 $ ls -la\ntotal 24\ndrwxrwxr-x  2 rivanov rivanov 4096 Dec  5 17:27 .\ndrwxrwxrwt 11 root    root    4096 Dec  5 17:27 ..\n-rw-rw-r--  1 rivanov rivanov  275 Dec  5 17:26 InputGrammar.class\n-rw-rw-r--  1 rivanov rivanov  157 Dec  5 17:26 InputGrammar.java\n-rw-rw-r--  1 rivanov rivanov  261 Dec  5 17:27 SemicolonBetweenImports.class\n-rw-rw-r--  1 rivanov rivanov  148 Dec  5 17:27 SemicolonBetweenImports.java\n```\n. 1) \n\n\n\"8:10: Got an exception - Unexpected character 0xa9 in identifier\",\n\"8:9: Name '\ufffd' must match pattern '^[a-z][a-zA-Z0-9]*$'.\",\n\n\nException is expected, why some Check validation is present ?\n2) \nSplit that PR into two, for each problem separtely\n. merged as FF\n. merged as FF\n. merged as FF\n. merged as FF\n. merged as FF\n. merged as FF.\n. @baratali , please recheck why that script is missed in UTs .\n. merged as FF\n. we need to split test in few files, but all should be compilable\n. still nothing done there\n. @maxvetrenko , why that input is not used ? is it extra script or smth is missed in UTs ?\n. @alexkravin , I merged changes from Max, please redo PR.\n. merged as FF\n. approved, but will be done with low priority, so please be welcome with PR if you need that.\n. will be released in 6.2\n. merged as FF\n. merged as FF\n. merged as FF\n. merged as FF\n. merged as ff\n. merged as FF\n. merged as ff\n. merged as ff\n. 1) please put fixed issue in commit message \n2) \n\nisInDefaultMethod(aAST)\n\nplease remove \"Default\" from name and change logic according to name. No matter how java will be change that check should care about modifiers on methods and and fields only. Check should skip method body at all.\n. \"visitToken\" in that method where is no \"return;\" why you introduce it ?\nOne return point from methods!!!!! In methods should be one start point and one finish point.\n. please get rid of inversion \"&& !(aAST.getType() == TokenTypes.VARIABLE_DEF && isInMethod(aAST))\"\n. > - else if (ScopeUtils.inInterfaceOrAnnotationBlock(aAST)\n\n\n&& isInterfaceOrAnnotationMember(aAST))\n\n\nnow read that attentively and optimize.\n. merged as FF\n. fixed, expected to be in 6.2\n. Thanks a lot !!! but ...\nplease review changes for I18N, I expect to see only removal of lines for that Check and nothing else.\n. merged as FF.\n. thanks a lot !\nmerged as FF.\n. Thanks a lot !\n1) \nplease update javadoc and xdoc for new option and code examples it helps to skip.\n2) \n\"visitToken\" method should have only one return point - end of method. \nOne day I will impose that automatically by Check from our experimental project - https://github.com/sevntu-checkstyle/sevntu.checkstyle/blob/master/sevntu-checks/src/main/java/com/github/sevntu/checkstyle/checks/coding/ReturnCountExtendedCheck.java . \n. https://github.com/ychulovskyy/checkstyle/commit/fa77fb5c7d65d498ab54244834da8759e7e2547e\nI rechecked twice , but I do not see changes to javadoc in references commit in that PR, please recheck your side.\n. please squash your changes in one commit (no need to keep mid steps of development).\n. > ```\n\n\nAn example of how to configure the check to allow 10 parameters is:\n\n\n<module name=\"ParameterNumber\">\n<property name=\"max\" value=\"10\"/>\n\n\n<property name=\"ignoreOverriddenMethods\" value=\"true\"/>\n\n\n</module>\n```\n\n\nPlease describe how exactly you match Override annotation (https://docs.oracle.com/javase/7/docs/api/java/lang/Override.html), as you can easily trap make a false positives on Override that is not from \"java.lang\" package.\nPlease reconcile description of example and config example.\nPlease place code sample, I know it looks strange, and too obvious but please do (not all checkstyle users are experienced developers, and Checkstyle is used to educate).\nPlease do the same for xdoc.\n. @ychulovskyy, ping ?\n. @ychulovskyy , \n1) do not treat as a pedant, but we need to be exact in java terms, FQ --> Canonical.\n\nA single-type-import declaration (\u00a77.5.1) imports a single named type, by mentioning its canonical name (\u00a76.7). \n\nhttp://docs.oracle.com/javase/specs/jls/se8/html/jls-7.html#jls-7.5\nhttp://docs.oracle.com/javase/specs/jls/se8/html/jls-6.html#jls-6.7\nhttp://docs.oracle.com/javase/specs/jls/se8/html/jls-6.html#d5e10117\n2) please add UTs for Override with canonical name, and Override with different package from \"com.mycompany.Override\". \nNo need to make functionality to distinguish Override referenced as simple name but with different import - non of Checks do that , one day we will do that for all Checks as one update. \nAll other looks good, thanks a lot.\n. merged as FF\n. merged as FF\n. merged as FF\n. merged as FF\n. smth weird, we add package line and I expect that line numbers in expected violations will increase to +1 but, but changes in expected array are strange.\n. merged as FF\n. even #468 is merged, build still fail even on my local pc.\n. > - \"25: At-clause should have a non-empty description.\",\n\n\n//this is a case with description that is sequences of spaces\n\n\nwhy that is removed from UT ? I do not see any significant changes in InputNonEmptyAtclauseDescriptionCheck.java \n. merged as FF\n. merged as FF\n. please be as specific/exact as possible and provide all input files and configs and even Checkstyle version to let us help you.\n. that rule was created for Google's style , just skip using it if that does not fit you (or Japanese).\nwhat about input file in Japanese ? I need to see that, please share me more examples of Javadocs in Japanese in different projects.\n. Ok, now it is become clear.\nIs absense of japan-period symbol is rule of Japanese language or it lazyness of developers?\nIf it is a rule- we need to allow user to set period symbol from Check options and allow it absense.\nif that is laziness - we need to allow user to set period symbol from Check options and demand it presense. (like in English, no \".\" is ok, but that is mistake)\nDoest it make sense?\n. ok, we will add option in Check to specify period symbol by user, default value will be \".\" .\n. will be released in 6.2\n. will be released in 6.2\n. merged as FF\n. merged as FF.\n. merged as FF\n. merged as FF\n. merged as FF\n. merged as FF\n. merged as FF\n. merged as FF\n. > CustomImportOrderCheckTest.java\nWhy we have changes in Test after adding extra line to input ?\n. merged as FF\n. merged as FF\n. merged as FF\n. TokenTypes should not be shifted, that is huge problem, i will review that assap.\nIf you have more details please provide.\nBracking compatibility in TokenTypes should be the last we could brake, sorry if that a case.\n. merged as FF\n. to validate results - need diff/comparison of plain output over projects: checkstyle, guava, openjdk .\nPlease also make sure that https://github.com/maxvetrenko/google-style-config-test is passing on \"mvn clean test\"\n. merged as FF\n. merged as FF.\nplease write \"issue#94\" as \"issue #94\" to let github parse it properly.\n. 1) please keep issue number in commit description and please do not make it too long\n2) all details that you would like to keep - please put in issue, as next person after you will read issue for more details (as provided link to it in description), and most likely skip reading PR details.\nPlease redo all you commits in all PRs.\n3) Please redo \nif (fChild.getType() == TokenTypes.STRING_LITERAL) {\n..\n else if (fChild.getType() == TokenTypes.QUESTION) {\n...\nto  switch-case with \"default\" block that do throw IlegalstateException instead of \"assert\". Asserts are not enabled by default , see \"-ea\" param for java.\n. please do indent for CASEs to right for atleast 4 symbols.\n. merged as FF.\ncases will be fixed during  https://github.com/checkstyle/checkstyle/issues/512\n. thanks a lot !\n. to validate results - need diff/comparison of plain output over projects: checkstyle, guava, openjdk .\nPlease also make sure that https://github.com/maxvetrenko/google-style-config-test is passing on \"mvn clean test\"\n. I have a problem with merged, please rebase from the most recent sources checkstyle:master\n. merged ass FF\n. merged as FF\n. merged as FF. thanks a lot.\n. thanks, next time please describe a reason of update.\n. to validate results - need diff/comparison of plain output over projects: checkstyle, guava, openjdk .\nPlease also make sure that https://github.com/maxvetrenko/google-style-config-test is passing on \"mvn clean test\"\n. 1) please squash all comits in one\n2) \n```\n+ final DetailAST identifier = targetAST.getParent().getNextSibling();\n+ targetAST = identifier;\n\nfinal int identifierEnd = endOfParams.getColumnNo() + 1;\nafter = identifierEnd;\n```\n\nwhat for that extra variables ?\n3) please put a comments on each block of code in visitToken to let mee see a logic, you added second block that make logic is not exaclty clear.\n. merged as FF\n. merged as FF, thanks a lot.\n. 1) please make this option be FALSE by default to be in table of properties - http://checkstyle.sourceforge.net/config_blocks.html#NeedBraces.\nhttp://docs.oracle.com/javase/tutorial/java/nutsandbolts/datatypes.html see \"Default values\".\n2) please squash the commits in one\n. new option should appear at HTML page checkstyle/target/site/config_blocks.html#NeedBraces in table \"Properties\", example is not enougth.\n. merged as FF\n. merged as FF, thanks a lot \n. 1) please return back \" FileSetCheck \" it is type of Checks. It is not obviously written ....\n2) please update Properties table at HTML(through xdoc)\nhttp://checkstyle.sourceforge.net/config_misc.html#Translation\n. please update HTML part of project (xdoc files) target/site/config_misc.html#Translation\nExpected: example and update for Properties table\n. merged as FF\n. @ensirius, What configuration you used ?\nhttp://checkstyle.sourceforge.net/config_misc.html#Indentation\nlook like you did not specify \"arrayInitIndent\" so default indent is 4, so 8 is expected value\n. thanks for reporting, we will not do any further rollouts till that issues is resolved.\nI will do that asap.\nIs it possible to share what organization you represent? and how you extend Checkstyle. I am just curious.\n. Problem is that Checkstyle in completely reply on ANTL v2 to generate that numbers from Lexical and Syntax tokens, and that numbering is sequential.\nSo any changes to Syntax part of java or to set of Lexical tokens - will cause a problem.\nThe only way for us now to keep compatibility is to mix tokens declaration in grammar - but that will lead to grammar become unmaintainable. This is the most complicated part of  Checkstyle.\nSo we have already broke compatibility even we tried to not do that - our bad, sorry. We need a solution that would resolve that problem completely, so we need to brace one more time.\nWe will split numbers of tokens by OFFSET variable, Lexical tokens will be in group [0....10000], Syntax tokens will be in group of [10000 ...... MAXINT]; \nExample : https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/api/JavadocTokenTypes.java#L25\nSo any future changes in java grammar will not allow developers to make such problem easily.\nWe also plan to update list of tokens with comments to remind future developer that all new Syntax tokens and Lex tokens should be added to the end of the list.\nSo, you and all other extensions will have to be recompiled against Checkstyle 7.0, to grab latest token numbers. Sorry.\n. @aunkrig, if you want we could put link to your extension at our home page http://checkstyle.sourceforge.net/#Related_Tools\n. @aunkrig, we go off-topic we can continue discussion in mail-list - https://groups.google.com/forum/#!topic/checkstyle/etBjz00_kMo.\n. please send link to Sonar each time you provide a fix that would speedup verification - http://nemo.sonarqube.org/drilldown/issues/289131?&rule=squid%3AS1170&rule_sev=MAJOR&severity=MAJOR\n. merged as FF\n. @mkordas, \n1) to make this Check useful and minimize amount of false-positives we need user defined properties for \"format\" and for \"extendsClassNameFormat\" default value is \"^._Exception$|^._Error$|^.Throwable$\" for both options. \n2) Please update our xdoc files as we generate base on them our site - http://checkstyle.sourceforge.net/config_design.html#MutableException\n. 1) \n\n\n@author Simon Harris\n\n\nplease add yourself to authors as you are going to  have big update\n2)\n\nreturn mIllegalClassNames.contains(aClassName)\n\nthat mean that in that collection you have to have all forms of Type name, from Fully qualified name to simple name\n3) \nPlease fin in JDK specification how part  after \"import\" is named, I still not like our names.\n4)\nI need to see UTs with star imports, I do not see support of that in code. All forms of start imports need to be tested . Example : \"import java.;\", \"import java.util.\"\n5) \n\nfinal String shortName =\nname.substring(name.lastIndexOf(\".\") + 1);\nmIllegalClassNames.add(shortName);\n\nI do not understand why you fill collection with simple names.\n6) \n\nDetailAST toVisit = packageName;\n\nall block below that should be util function with proper name\n7) \n\nprivate final List mImports = Lists.newLinkedList();\n\nWhy you store DetailsAST for imports ? you need only names, so grab name from detailsAST and do not store what you do not need.\n. I am closing that PR, as code is far from to be ready for PR, detailed discussion and further code review will be done in mail-list https://groups.google.com/forum/#!topic/checkstyle-devel/PsH4W8aiRTo\n. uhhhh, we can not remove JavaDocMethodCheck. We need either reimplement it to new api or remove from it functionality that require TypeAware.\nplease investigate that and call me for discussion.\n. merged as FF\n. merged as FF\n. Travis found problems, you can test that yourself by \"mvn clean test verify\"\nPlease squash comits in one after fix.\n. thanks a lot !!!\nverified, merged as FF\n. merged as FF\n. please make Travis happy\n. @alexkravin, please read JDK specification before implementing any features.\nThat implementation is completely inaccurate.\n. primitive types is certain list of types - see java specification.\n\nparameterType.getType() != TokenTypes.IDENT\n\nis not stable functionality as you too much rely of tree structure, did you try \"int[]\" ?, please generate reports against 3 big projects, and review all results.\nFYI: another problem of this Check is that is type is immutable (like String, or any other users class ), so final is not required and useless, but this is not in scope of this issue (we will come back to it after IllegalTypeCheck update).\n. @alexkravin, Travis is right , you declared a constant (\"static final\") so it have to be named with capitalized letters.\n. >  if (mIgnorePrimitiveTypes && !isArray(aParamDef)) {\nI do not understand why you care about Array ? you should check only for primitives.\nIf you send me code for code review without links to reports (and you have to review all violations yourself ) that I requested - I will not do code review.\n. code is ok, i do not see any problem, but reports are required to see how Check is behaving on big real code\n. @alexkravin , please copy \"css\" folder from reports that have it, page will looks good.\nplease generate reports for other 2 projects.\nplease confirm that all violations are valid in all 3 reports.\n. merged as FF.\nnext time please generate reports, and make violations as WARNING, to easily catch unexpected exceptions that will be ERRORs\n. duplicate of https://github.com/checkstyle/checkstyle/issues/350\n. merged as FF\n. merged as FF\n. I am ok to merge, but I have merge conflict , please resolve\n. remove \" .checkstyle\" from PR\n. merged as FF\n\nhtml before: http://maxvetrenko.github.io/issue321before.html\nhtml after: http://maxvetrenko.github.io/issue321after.html\n\nnext time please use http://checkstyle.sourceforge.net/cmdline.html (-f \"plain\") to generate report and compare it by \"diff\" unix util to economize time.\nHTML is good when you do not know what expect from code and need to review all violations.\n. will be released in 6.2.\n. already exists:\nhttp://checkstyle.sourceforge.net/config_whitespace.html#WhitespaceAfter\nhttp://checkstyle.sourceforge.net/config_whitespace.html#WhitespaceAround\nAt this report http://checkstyle.sourceforge.net/google_style.html we decided that there is no strict requirements, so we did not do any coverage.\nBut looks like you have a point there, and we at least need to update google_checks.xml and test it over Guava to check how Google follow that hidden rule.\n. yes, we need to be able to work like famous IDE works, because most of development is done in them and all work for imports management/ordering is done by IDE (developer usually do not care about it at all).\nbefore any changes are done to check options, that changes need to be discussed with me.\n. @mkordas, thanks a lot !!!\nbut please next time, put a simple comment in issue that you are going to resolve it and show other your intention, to avoid any conflict in PRs for the same issue and economize your and our time.\n. thanks a lot !\nmerged as FF\n. that should be a new option of Check, by default Check should allow multiple empty lines\n. no need merge anything, that block are not related even they looks close on diff\n. please , do not follow that advice, \"expect\" parameter usage is forbidden as it make a mess in logs.\n. I have no better solution for now, so we will go with your approach\n. hmm, very strange, try one more time, if still a problem I will apply PR as is (unfortunate , but not blocking issue)\n. please do\n. prefixes \"j\" are not allowed, all should be full words\n. agree with mkordas\n. > is there a logger in checkstyle to log this exception?\nno logger, you should return all exceptions to caller. Checkstyle is library, so it is bit different design principles than applications.\n. I am surprised too, can not do investigation from phone, willtry to take a close look later\n. the same compilation error for java8 and java7 , when I move that code to separate stanalone class to compile it by \"javac\" it works fine.\n```\n+import java.lang.Class;\n+\n```\nthat is workaround for a problem, but importing \"java.lang\" most likely just another violation in Idea.\n. please separate that problem to separate PR, to avoid blocking other changes.\n. Sounds like a bug in maven plugin, I do not see any reason it should be used in Check.\n. yes\n. @ivanov-alex , we even do have Check in sevntu project that can allow forbid usage of \"expected\" in \"@Test\". In most cases usage of \"expected\" is laziness of developer - should be refactored with try-catch and recheck part of message to be sure that we catching expected Exception. \n. please make it getUriString , abbreviation is also need to be avoided.\n. verify(checkConfig, getPath(\"imports\" + File.separator\n                    + \"InputImportControl.java\"), expected);\n        fail();\n        }\n        catch (final CheckstyleException ex) {\n           assert(ex.getMessage().............)\n        }\n. @mkordas , what do you expect there ? If it is just counting of metrics  - please switch it off. We need notification only if method is more then approved limit.\n. I do not see a problem there.\n. yes, I thought about this, but after extra time, It is better to catch Exception there as one day Checked exception will happen (even after some refactoring) in this block and developer will update a method signature but he will miss this catch for sure.\nI thought to catch Throwable there as 100% guaranty that on any problem we will report file name ( we could catch OOM Exception on some files eventually), but smth telling me to stay with Exception is ok, and all Errors are problems that most likely do not need filename. \n. Right, this is better wording, fixed.\n. he need to reset pattern each time smb/smth call setters that are constituents of Pattern: ignore case option and format.\n.  Issue found: assertTrue(!expr) can be replaced by assertFalse(expr)\n.  Issue found: assertTrue(!expr) can be replaced by assertFalse(expr)\n.  Issue found: assertTrue(!expr) can be replaced by assertFalse(expr)\n.  Issue found: assertTrue(!expr) can be replaced by assertFalse(expr)\n.  Issue found: assertTrue(!expr) can be replaced by assertFalse(expr)\n. clearLazyLoadCache  vs branchTokenTypes = null;\nit is not the only cache that we have in that class , so please be specific in the name - clearBranchTokenTypesCache\n. please do compile and save it in final field of class, to improve performance a bit.\n. please sort that expression by complexity of execution for performance reasons.\n. I think hasDefaultOrExplicitNonPrivateCtor should be inside canBeSubclassed.  Am I miss smth ?\n. this line is useless. Please add note that you actually validate comments in method.\n. native methods in java are marked by special modifier. native method != empty method (looks like , but not the same). Please use checking by modifier.\nhttps://docs.oracle.com/javase/specs/jls/se8/html/jls-8.html#jls-8.4.3.4\n. bad excuse.\n1) you can move check for native outside of this method.\n2) please look at https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/TreeWalker.java#L495 for traversing a tree. That method is not complicated.\nYou intend is really to find first node that match predicate \"!TokenUtils.isCommentType(currentToken.getType())\" please make such function in TokenUtils.java .\n. lets remove addGroupingIfNecessary here as no need to add groups for root item.\n. we need to add groups only at this line , when we do inheritance of regexp. In all cases it is not required.\nComment above need to be updated to attract user attention that only here we need grouping.\n. I do not think that grouping here make sense, please explain.\n. please rename to addGroupingIfRegEx\n. code need to be clearly readable as a text. Thanks a lot for refactoring, now it is more clear.\n. we already did enclosing in group, I do not see reason in this wrapping one more time.\nPlease explain a reason or remove it.\n. thanks for example, but lets make it more general is understandable for all.\nLets update it a bit .... and forbid usage of dao/service packages in ui packages and vise-versa.\n<import-control pkg=\"(de.olddomain|de.newdomain)\\..*\" regex=\"true\">\n    <subpackage pkg=\"[^.]+\\.dao\" regex=\"true\">\n        <disallow pkg=\".*\\.ui\" regex=\"true\"/>\n        <disallow pkg=\".*\\.(awt|swing).\\.*\" regex=\"true\"/>\n    </subpackage>\n    <subpackage pkg=\"[^.]+\\.ui\" regex=\"true\">\n        <disallow pkg=\".*\\.(dao|service)\" regex=\"true\"/>\n    </subpackage>\n</import-control>\n. I do not like this hardcode of indentation for prefix and baseIndentation. Can you please make one more input file with javadocs on methods. \n. please add new test, do not remove usage of InputAstTreeStringPrinterJavadoc .\n. Ok, please make it like:\n```\n--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/PkgControl.java\n+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/PkgControl.java\n@@ -65,12 +65,13 @@ class PkgControl {\n     PkgControl(final String pkgName, final boolean regex) {\n         parent = null;\n         this.regex = regex;\n-        fullPackage = pkgName;\n         if (regex) {\n+            fullPackage = encloseInGroup(pkgName);\n             patternForPartialMatch = createPatternForPartialMatch();\n             patternForExactMatch = createPatternForExactMatch();\n         }\n         else {\n+            fullPackage = pkgName;\n             patternForPartialMatch = null;\n             patternForExactMatch = null;\n         }\n@@ -159,7 +160,7 @@ class PkgControl {\n      /\n     private Pattern createPatternForPartialMatch() {\n         // javadoc of encloseInGroup() explains how to concatenate regular expressions\n-        return Pattern.compile(encloseInGroup(fullPackage) + \"(?:\\..)?\");\n+        return Pattern.compile(fullPackage + \"(?:\\..*)?\");\n     }\n /**\n\n```\nthe less groups the better. C-tors will looks the same.\n. please make this method as static, it is hard to read it in c-tor\n. please make this method as static, it is hard to read it in c-tor\n. please remove this function completely , it is resposibility of user to provide proper regexp.\nWe do not change user defined configuration. User know what he is doing.\n. please remove this, we are not going to do this.\nWe will not change users regexp. User is responsible for correct configuration of the Check. User need to have ability to use any RegeXp match tool to test his regular expression.\n. @kazachka , getIndentation suppose to manage all spaces , please explain why by adding new node(just another node) in a tree we need special processing of prefixes ?\n. yes, sorry to force you to do a lot of changes.\nCode become more and more clear. This is my philosophy (not ONLY my). \nI (not only I, but anybody in web) need to understand your code easily at any point of time, all hidden nuances need to be clearly shown.\n. good point, I missed such cases from consideration, please put this info (briefly) to ensureSelfContainedRegex javadoc.\n. > It's a suggestion to the user to improve readability of her configuration.\nthis is true only when you not limit or change user configuration. There are a lot of smart users and they use checkstyle is crazy environment. A lot our \"smart\" attempts to help user, resulted in bugs. So we have practice to give user complete control and transparency to let user get maximum from checkstyle.\nI will read it one more time....\n. I still can not clearly read a logic behind grouping and forcing to regexp, smth is not smooth .\nBase on previous discussion that we have to force plain-text patter from parent to regexp if child is regexp, .... looks like we have to whole below branch of PkgConrolls to be regexp if some PkgControll is regexed.\nwhy we care only about current and parent regex state ?\nWhat about case : \n<import-control pkg=\"com.puppycrawl.tools.checkstyle\" regex=\"true\">\n    <subpackage name=\"checks\" >\n       <subpackage name=\"imports\" >\nLooks like import \"import\" Pkgcontrol will not be forced to regexp.\nPlease point me to Uts that cover it, I did not find it , and explain a bit logic if I am wrong again.\n. getIndentation do care about spaces and branch drawing - indentation.append(\"--\");. \nWhole logic of branches and indentation is encapsulated in this method. So it should be handled in this method.\n@baratali , please do review to this change.\n. please remove such comments and place them to github issue description or comment.\n. please movecalculateScope(ast)inside expression to speedup a little bit performance, scope calculation is not always required.\n. please add example of usage of these option.\nExamples are the most valuable part of specification. We could take as example config that you used in diff report.\n. why you selected this value as default ?\nI think it should be NOTHING, or null or absent of Optional.\n. we should not calculate scope if it is not defined by user.\nCheck need to work as before update on existing configurations.\n. Lets keep this hack.\n. movename.lastIndexOf(WILDCARD_GROUP_NAME) != -1  || lastImport.lastIndexOf(WILDCARD_GROUP_NAME) != -1)` to static function and name it to help understand what it is doing by name.\n. Check javadoc need to be updated too.\n. please add example of this filed usage and describe a reason of it.\n. Are you sure that all code from compareContainerOrder is required ? \nYou suppose to have only pre-decision before simple compare() execution.\n. Do we really need BeforeExecutionFileFilterEvent ?\nWhy not simple boolean accept(String uri); ? What else xxxxxxxxxxxFileFilter could care about ?\nhttps://prateekvjoshi.com/2014/02/22/url-vs-uri-vs-urn/ . We just need string representation of location.\n. single return point please\n. I think it is reasonable to name it \"TestBeforeExecutionFileFilter\"\n. indent this line to the right, to be visiable that is not on the same level\n. please keep this code as it is now , and let me think about it, \"Scope.ANONINNER\" is related to javadoc Checks only , not sure how it come to usage in java Checks and appear in API ....\nplease proceed with other items to resolve.\n. @agcuda , fyi https://github.com/checkstyle/checkstyle/issues/3511\nsorry for mess in API. Please try to avoid ANONINNER as much as possible to simplify our future refactoring during API cleanup.\n. please update pom.xml and remove gui classes from exclude by cobertura. Your coverage should be enforced by build process.\nhttps://github.com/checkstyle/checkstyle/blob/master/pom.xml#L1866\nwe need to remove that exclusion for all files in gui folder and use it only for swing related classes. All other classes should be covered by 100% or partly(https://github.com/checkstyle/checkstyle/blob/master/pom.xml#L1851) .\nAs we start writing UTs, nobody is allowed to reduce coverage - should be enforced by build process :) .\n. TeamCity(TC) is failing build and point to Object usage.\nPlease update getChild signature in ParseTreeTablePModel to return certain type.\nPlease resolve all other TC failures.\n. please explain this \"1\" in single line comment, there are so much certain conditions that point that there will be new tree but result is \"1\". \n. hmm, the whole reason of the issue was to customize NonEmptyAtclauseDescription , but with such method we do not allow customization. \nrequired should be empty array.\n. there should be getAcceptableJavadocTokens usage. We require all. \nPlease fix in all other cases.\n. Please keep anwering to each of points as \"done\" or ...\nStill not clear why 1 is hardcoded why not ((DetailAST) parent).getChildCount ?\n. So make a comment to describe this:\n\" getChildCount return 0 on COMMENT_CONTENT, but we need to attach javadoc tree, that is separate tree\"\n. please rename it to RootModule (no \"initial\" should be left in patch), in doc it is already named like this http://checkstyle.sourceforge.net/config.html#Checker and it more represent what it is.\n. please do not use that property of annotation, you do not check exact exception.\nYou are ok with any IllegalArgumentException , it is not correct. Please use catch and assert by message.\nOne day it , automation of this will be finished - https://github.com/sevntu-checkstyle/sevntu.checkstyle/issues/108\n. just add new line to end of file, as you will change PR to address other points.\n. please name it configurationTypeCast, please do the same approach for other naming.\n. please put \"//violation\" as training comment. to easily catch lines where you expect violation.\nPlease do the same for other input code.\n. please make separate Input file to test FOR, WHILE and all other new tokens.\nRe-usage of input files is ok, but it complicate contribution to next developer. It is easier to debug simple Input files with comments like \"//violation\" on lines where violation is expected.\n. yes, lets add, it is kind of the same as principle.\n@MaksimP , please add DO_WHILE to tokens even it was not requested originally. I will update original issue to have it.\n. it is not generated, it is just a copy-paste of style how it was on a moment of creation of report.\nIf we speak about update, we need to copy/cache it again.\nWe should not be fragile on any new updates to style from google. We clearly show what version of it we support now.\n. @rnveach , yes order of check to execute is not strick and order of violations is not strict too.\n. please rename variable to be \"hasNonFilteredViolations\", naming should be base on principle of what it contains and not how it will be used.\n. please move block that add to cache here, and you will not need to add file to cache before all validations.\n. please create UT base on AbstractCheck that file violation but it is suppressed by filter.\nI do not like the idea to spread our hack of fireErrors in finishProcessing method.\n. ok, I fed up with that fireError. One day we will redo this - #3538.\nI am ok with your change for now. \n. please rename one more time, I read it before I changed name to more descriptive.\n. @rnveach , this point is not addressed. please do\n. no, this variant is good.\n. from guide:\n\nException: A blank line between two consecutive fields (having no other code between them) is optional. Such blank lines are used as needed to create logical groupings of fields.\n\nWe can not satisfy this exception. we need to update coverage report to show image as \"Existing Check covers some part of requirements from Google.\" as we can not completely cover it. \n. please extend test inputs (IT input files) to make it sure. \n. confirmed.\n. confirmed\n. confirmed\n. not sure why we have green image there.\nplease make it \"Existing Check covers some part of requirements from Google.\" as we can not cover Exception case.\nLooks like ITs input file is too smiple - please append more cases for \"expected\"(exact match and begin with) to https://github.com/checkstyle/checkstyle/blob/master/src/it/resources/com/google/checkstyle/test/chapter6programpractice/rule62donotignoreexceptions/InputEmptyBlockCatch.java\n. we need to make it \"--\" , as there is no rule in this point.\n. confirmed\n. confirmed\n. confirmed , not functional changes in guide\n. confirmed\n. confirmed\n. confirmed, no functional changes in guide.\n. confirmed.\n. confirmed.\n. confirmed\n. confirmed.\n. confirmed\n. confirmed.\n. confirmed\n. I do not think it is required here, as demand for exactly one file is linked to another point, so all details/exception are described there.\n. it could be done in separate issue, smb is already discussed this with me  ...... here it is #2143 , yes still not done but already in progress.\n. please show in example how Curly checks are affected by lambda. if so , please create new issue on this.\n. #3546 is approved and could be done separately from this PR.\nYes, please create an issue to make set of tokens be the same or at least analyse a diff\n. @agcuda , please move all non-working cases to separate issues for further processing.\nthis PR already become to big to be maintainable.\n. I do not like such hack. \nWe need to change tree right after parse. JavadocNodeImpl should stay simple POJO data container.\n. @MaksimP , what is \"do{}while\" ? you expect space after \"while\" (the fact that it is do-while is known only to AST tree), but violation is on \"while\" token.\n. Uts are failing due to extra \":\" in violation message. Weird ... \n. @MaksimP , why you skipped \":\" in expexted template . all other tests have trailing \":\".\n. why you do double copy of collection ?\n. please make single return from method.\n. it is not obvious why such hack over lines2position is required, please put a comment , or what is better create private method and describe nuance in detail in its javadoc.\n. why public ?\n. it is hard to read, move that argument calculation to local variable.\n. ok, moved to separate issue - #3555\n. make it private, let stop coy bad code.\n. yes, we have to support both approaches to write javadoc.\ncurrent implementations is fragile by design, as this Check is not comments aware - https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/EmptyLineSeparatorCheck.java\nto receive all comments well parsed Check need to override method \n@Override\n    public boolean isCommentNodesRequired() {\n        return true;\n   }\nExample:\nhttps://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/checks/TodoCommentCheck.java#L68\nin this case Check will have all comments in good form.\nUseful method - https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/utils/JavadocUtils.java#L246\nI will write a bit more about isCommentNodesRequired in scope of #3561\n. please remove this comment, and all other \"//invalid\".\n. I do not like this fix .... please put a CS suppression on this method and restore it.\nI what to review this case in separate PR, and let all other changes by applied to master.. why this \"final\" is not redundant ? Can we extend E2 ?. I failed to understand this .... till I read examples in issue. We need to think about this description one more time.. ignore this comment , I did not noticed #3582. > Enums can contain abstract methods\nnot only abstract, as we see in example.\nPlease provide an example, and by trailing comment show where violation be and where not.. redundant vs internally ...... you already do not know what you do.\nCheck should enforce no separation in group so it should be \"separation in group\".\nMSG_REDUNDANT_SEPARATION -> MSG_SEPARATED_IN_GROUP\nimport.groups.separated.internally - > import.groups.separated.in.group. should be checkSeparatorInGroup. please try to return boolean from this variable and do \"log\" in visitToken to let easily see when log of violation happen.. Redundant --> Extra.\n@rnveach , please suggest us better wording.. please update xdoc description with new functionality, please add example (users like examples more than descriptions).. please update javadoc description of this Check with new functionality.. I am ok with this update. Column value does not matter in this case.. ok, this update is due to change of arguments in method.\n-    public AccessResult checkAccess(final String forImport, final String inPkg) {\n+    public AccessResult checkAccess(final String inPkg, final String forImport) {. please make it as static.\nFYI: sad, it should be caught automatically - sevntu-checkstyle/sevntu.checkstyle#494. please make it static.. url first, then as file, then as resource.\nhttps://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/utils/CommonUtils.java#L362\nplease be exact. It is critical nuance for user.. Coverage is failing on this line, looks like NULL is never happen.\nThe only way it is created is at https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/TreeWalker.java#L173\nlooks like no way it to be NULL, if smth be wrong during c-tor of FileContents, it will be exception, so NULL is impossible.\nPlease review master branch, looks like we have some hack-UT on this condition. It should be removed.\n. I do not see removal of UT that did a test of if (currentContents != null) {.. please remove such comment in all Input files. You do violation on certain line , not a structure.. please double all test blocks(valid and with violation) to make new blocks as single line. \nExample:  \"do { smth(); } while (condition)\".. please double all test blocks(valid and with violation) to make new blocks as single line. \nExample:  \"do { smth(); } while (condition)\".. Intelij inspections should be suppressed in javadoc comments to not pollute the code.. why not a \"Scope\" ?. yes, please create. I still believe that code should be clean, event it is a test.\nComments should be only smth that user have to read.\nNobody read javadoc, so any pollution in javadoc is ok.. Please do simple - Scope. To be close to actual java type. Audience of this document is Java engineers, we do not need pretty look wording here.\n\"policy\" is used in description only. Target section title should the same as user user did a click on.\n. I think it is reasonable to make new type URI , like we have http://checkstyle.sourceforge.net/property_types.html#regexp and explain that it is in string form. All types are in string form in config, but we do treat them in special way that is why we have special description of type on our site.. I think we can optimize this method (registration of integral types is typical, could be moved to general method) and split it into two methods (geristerIntegraltypes , registerCustomTypes). yes, not int, String, .... that are basic types of jdk. make it \"no violation: trailing comment\". // violation: not separated by empty line and not trailing comment. violation: to check....... \"// OK : .............\". please do meaningful imports like at https://github.com/google/guava/blob/master/guava/src/com/google/common/base/package-info.java\nthe same for other tests where you have import and annotation.. \"/** OK: ...................\". \"violation: ........ \". // violation is expected after  this line. com/puppycrawl/tools/checkstyle/checks/whitespace/package-info/test4/package-info.java\nvs \npackage com.puppycrawl.tools.checkstyle.checks.whitespace.test4;\nWhere is \"package-info\" subpackage ? please make it and make it as \"packageinfo\". No \"-\" in package names.. please explain why this violation appear.. please extend this to support trailing comments like \"/ ..... /\". > com.puppycrawl.tools.checkstyle.checks.whitespace.test1.packageinfo\nvs\n\ncom/puppycrawl/tools/checkstyle/checks/whitespace/package-info/test1\n\npath should be the same as package - \"com/puppycrawl/tools/checkstyle/checks/whitespace/packageinfo/test1\", or package the same path.\nPlease fix other cases too.. please do import of the same annotations(2 annotations) as in Guava file that I/you mentioned above.. what for we have import here ? (the same question to all other  Input files). please put this nuance as a comment in Input file.. yes, ... adding new dependency only  for Inputs is too much.\nI am ok to keep usage of Deprecated only. Looks like it is only annotation that could be applied to packages in jdk.. Looks like you found dead and weird code.\ndo \"return false\", and recheck GUI that it works fine.. Current folder is not changed, it it root of cloned folder. All of them will be like this. Where do see the best place to put a comment ?\n. README was added. Please split method to several: fillChecksfromSizePackage , .... Please name collection by its content.\nI do not see package and module. There are short names of classes anf fully qualified names.. Please explain this change. please fix 'packageNameWithSuffix' name. why ?. smth should be changed there too - http://checkstyle.sourceforge.net/config.html#Packages to explain new model of class loading for standard Checks. Third-party check are continue to be loaded by brute-force if name is defined as non fully qualified name of class.. done. done. yes, but I do not want to extend API for now. So it is hosted only in one implementation that need it. Whole design is interesting, we have API interface, but code is not ready to have any other from DefaultConfiguration. This need to be reconsidered completely in checkstyle8.\nSo, for now, no extending for api.. Yes, we continue support this file in thitdparty artifacts that lead brute force algorithm to certain packages.\nIf they used our packages ( they did repacking of checkstyle with their custom check) ... we break this ... sad. We need to keep this file and do brute force as last resort of class resolving till checkstyle8 .\n3660 .. BASE_PACKAGE , should be used in whole code of this class.\nthat 150 string concatenations are not noticeable, performance hit even it is not optimized during run or compiling. . Magic number is described in comment. Yes, we mostly follow naming convetion that start from verb. Yes. it should be getCountOfEmptyLinesBefore, javadoc should be updated too.. > Why cannot we use DISTANCE_TO_PREVIOUS_LINE as a constant name?\nProblem is that is general distance to previous is \"-1\" only in context of lineNo it become -2.\nI failed to find good names for that, so I agreed on comment as explanation.. please refactor to avoid break at all, by inlining if to while expression. . it is used in line 50.. fixed. fixed. postponed till MethodDistance Check appear (base on our experiments in separate project).\nI want to keep change simple in this commit to show reason why it become private.. as this file is designed for ALONE mode, please name it with \"Alone\", please put that in comment over the class.. 1) please move calculation of \"details.lcurly.getParent().getType()\" to local variable, its calculation is unavoidable.\n2) in \"&&\" conditions please put the quickest operation in front.\n3) please intend code of \"a && b || c && d\" as\na\n   && b\n||  c \n   && d\nto clear see priority of executions.. 1) please find all that are not \"644\" it will be more strict.\n2) please make certain list of file to ignore and do search in whole repo except for \".git\". please keep there method with name 'shouldBeAloneOnLine' (only name not a logic), it is the same in naming form as others.. @MEZk , it is ok, at least it follow naming in class , all methods with \"should....\" check an user mode property.. please move \"nextToken.getType() == TokenTypes.SEMI\" to the first element of expression to make code easy to read.. please make pattern as '*/\\.git/*' , to skip only git files and keep under controll all other files, we have few folders that starts with \".\" already.. is it better to name them \"Non-Checks\" or \"Holders\" ?\nI used \"non-standard checks\" for Checks from extensions. . We mislead user ... .\n\"This check\"  --> \"This module\" . or do description as it is in FileContentsHolder \"Holds the .........\".\nFor this short description I usually grap first line from module description.. Holder madness will be addressed at #3691. yes, module that create fake stuff(wrapping) should be ready to correct Tree to expected values.. change for line ending is not expected.\nThere could be changes in columns only, but I expect changes only in first line. All other need to be explained.. I do not like idea to use class field to keep shift for first line only.\nplease create special method \"adjustFirstLineToJavadocIndent(tree, javadocColumnNumber)\" and call it after\nfinal DetailNode tree = convertParseTreeToDetailNode(parseTree);\nNo field is required.\nThe less fields class has the easier to maintain it. Field is like global variable - should be avoided is possible. It is not performance critical place in code so I see no reason in extra field.\n. SLine ?\nyou economized 5 symbols to force all to read your javadoc and remember that this abbreviation mean?\ncode should be read as text, ideally without any javadoc at all.. shouldBeAloneOnLine is general question so all more specific question like shouldBeAloneInLambda and shouldBeAloneOrSLine should be part of general question (in side this method). please do single return point from method..  3 is \"/**\".lenght ? is so, please substitude , it will be more clear.. please revert this update, I do not see reason of it.. \"leading asterisk\" ? did you mean Javadoc identificator http://checkstyle.sourceforge.net/writingjavadocchecks.html#What_is_Javadoc_comment ?. \"leading asterisk\" ? did you mean Javadoc identificator http://checkstyle.sourceforge.net/writingjavadocchecks.html#What_is_Javadoc_comment ?. I am not about cases this method covers, but about two \"return\" in its design. Should be only one.. unfortunately we need to make comment on each IGNORE, to explain reason, it might be clear now , but it will not be clear in time.\nPlease do.. 1) Reason: we use GenericWhitespace \n2)\nWe need to format code a bit to allow comments on each token, I think in some cases reason can not be general\nLike:\nStream.of(\n   // reason\n   \"GENERIC_START\",\n  // reason\n   \"GENERIC_END\"). Enums objects and Enum constants are different issues, there issues with differentiating them, so we stay with simple approach. Check for Enums are at http://sevntu-checkstyle.github.io/sevntu.checkstyle/apidocs/com/github/sevntu/checkstyle/checks/naming/package-summary.html . My position that \"final\" in method signature do damage for readability. \nThis case is covered by - ParameterAssignment .\nThere are also FinalParameters Check.. this list we should not format I requested above.\nWe need to at in our config: LITERAL_NATIVE , LITERAL_VOLATILE (till we become MT). Looks like all this allowed tokens are mis-design, most of them have nothing in text that user can change.\nOk to keep suppress, but we need new issue to remove from allowed tokens all tokens that have constant value.. I think it is reasonable to enable this.. Check is deprecated, we do not use it.. ANNOTATION_DEF, ANNOTATION_FIELD_DEF  - should be added, we do not have Annotations declarations in our code , but we might have them.\nPARAMETER_DEF - should be with allowSamelineMultipleAnnotations=true\nFor all other we need to make an issue and review and provide examples to xdoc (I can not easily know how to make such code).. Reason: type declaration could be long due to \"extends/implements\", it is ok to be not strict there. LITERAL_DO should be with option \"same\"\nAll other should be enforced with \"alone\", most of formatters do this and this is well-known practice, but still need to be enforced.. LPAREN, RPAREN - are covered by special Checks RightCurly and LeftCurly\nRBRACK, ARRAY_DECLARATOR, ELLIPSIS, SEMI - eol . Even it a weird to write code in other way, but ......\nAT - nl. LAMBDA - allowSingleLineStatement = true , all other should have braces\nLITERAL_DEFAULT, LITERAL_CASE - braces in case/default of switches is good to avoid sharing scope of variables, but looks unusual, so we prefer to have no braces. . reason is at - https://github.com/checkstyle/checkstyle/blob/master/config/checkstyle_checks.xml#L318. WILDCARD_TYPE,GENERIC_END, GENERIC_START are covered by GenericWhitespace\nARRAY_INIT - we prefer no spaces on one side or both for these tokens\n. METHOD_REF by google style is on \"nl\", I think it is good to be on new line too for us.\nWe need to make issue to extend javadoc for http://checkstyle.sourceforge.net/apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#METHOD_REF. @kazachka , this point is not addressed.. what is leading asterisk  in first line of javadoc ?. :), if I do a comment I expect reply on it.\nWe do not need extra code .. the same for comments.\n. > Parentheses are not curlies. I don't think that check covers them.\nPlease confirm if this is what you meant.\nMy bad.\nLPAREN looks like should be on \"eol\"\nRPAREN could be either so should be excluded from validation.\n. We already have few issues - https://github.com/checkstyle/checkstyle/issues?utf8=%E2%9C%93&q=is%3Aissue%20is%3Aopen%20writetag . We just need to find way how to make it work(with minor braking compaibility) or completely drop this Check and create new Checks.. if now need - remove it.. From where you get \"package local\" term ?\nI see only \"package\" and \"package-private\":\n\nor package-private (no explicit modifier).\n\nat https://docs.oracle.com/javase/tutorial/java/javaOO/accesscontrol.html\n\nIf a class or interface type is declared with package access, then it may be accessed only from within the package in which it is declared. \n\nat https://docs.oracle.com/javase/specs/jls/se8/html/jls-6.html#jls-6.6.1\n\nIn the absence of an access modifier, most declarations have package access. A class or interface type declared without an access modifier implicitly has package access. \n\nat https://docs.oracle.com/javase/specs/jls/se8/html/jls-6.html\nhttp://bugs.java.com/view_bug.do?bug_id=4456057 (Java representative in evaluation also call it \"package\" )\n\nI would rather stay with JDK terminology - \"package access\".\n\"package-private\" looks like is more human friendly term, I do not think we should use it.\n@rnveach , please share your opinion.\n. Name should be PACKAGE . I just qouted jdk to ease search on the pages.. please make a reason as https://github.com/checkstyle/checkstyle/issues/3730. Enums constants could be uppercased. // method declaration could be long due to \"parameters/exceptions\", it is ok to\n// be not strict there. tokens should be the same as in checkstyle config.\nReason of ignore is the same. lambda should be in config - it is clearly shown in style http://checkstyle.sourceforge.net/reports/google-java-style-20160712.html#s4.5.1-line-wrapping-where-to-break. please make an separate issue on this , as dafault or case could not be empty according to http://checkstyle.sourceforge.net/reports/google-java-style-20160712.html#s4.8.4-switch\ncatch could be empty, specially allowed for cases \"catch (NoSuchElementException expected) {}\" - http://checkstyle.sourceforge.net/reports/google-java-style-20160712.html#s6.2-caught-exceptions\nArra_INIT could be empty - http://checkstyle.sourceforge.net/reports/google-java-style-20160712.html#s4.8.3-arrays\nspecially allowed at http://checkstyle.sourceforge.net/reports/google-java-style-20160712.html#s5.2.4-constant-names\n. ARRAY_INIT - without space http://checkstyle.sourceforge.net/reports/google-java-style-20160712.html#s4.8.3-arrays\ngeneric stuff - the same explanation as in our config. all java tokens are allowed. please make an issue in this , we need to ask google at github about this nuance. result = false;\nif (lcurlyNo != rcurlyNo) {\n  if (previousSibling == null) {\n    result = true;\n  }\n  else if (rcurlyNo != previousSibling.getLineNo()) {\n    result = true;\n  }\n}\nreturn result;\nso \nresult = false;\nif (lcurlyNo != rcurlyNo) {\n result = (previousSibling == null)\n                     || (rcurlyNo != previousSibling.getLineNo())\n}\nreturn result;\nso \nresult = (lcurlyNo != rcurlyNo)\n               && ((previousSibling == null)\n                        || (rcurlyNo != previousSibling.getLineNo()))\nreturn result;\nAm I miss smth ?. class that have only one field ?\nthat is never have another type in it ?\nplease remove it and be simple. Do not overcomplicate the code, it is the first rule of good code.. @MaksimP , please explain why this method is so specific to LAMBDA ?\nif not specific, then name of it should be general, does not contain \"Lambda\".. method name already have \"Lambda\" so it is mean to be used in in right context.\nWhy we check this one more time ?\nthat should be ensured by code that call this method.. I do not like implementation of this method now.\nIt i become even more hard to read than before.\nPlease clearly split RightCurlyOption.ALONE and RightCurlyOption.ALONE_OR_SINGLELINE\nso code should be like \nreturn (bracePolicy == RightCurlyOption.ALONE \n              && ............)\n          || (bracePolicy == RightCurlyOption.ALONE_OR_SINGLELINE \n              && ............)\nor even completely split this method into two for ALONE and ALONE_OR_SINGLELINE , with check for policy in validate.. please make argument as String and name it imprt, \nI read imp as implementation for some reason.. I think it is OK to skip on demand import, there are numbers of nuances when it come to conflicting names of classes in different psckages , we skip them for others imports. So let's keep behavior the same.. Everything could change if it is editable.\nI do not plan to do allow to do this easily as it could damage suppressions of users. They must be the same till really good reason to change appears.. >If default and case are staying, I assume their reasoning is google doesn't specifically require or disallow them having braces?\nYes, they even have in examples code without braces in guide.. CC is easily resolved by splitting expressions into separate method.\nlets try.\nbut name method as \"isValidAloneOnLine\" or different way but without \"General\". code should be read as text.. but keeping it is weird, can we refactor upper methods further in non related to big fix areas to squeeze our expression to proper place ?. I do not like code that write in chunks .... \nLets change a strategy.\nPlease ignore CC violations and make code as it should be.\nI will do code review even you have CC problems.\nOnes logic will be written correctly, I will look how how to refactor to pass CC myself. . I do not like code that write in chunks .... \nLets change a strategy.\nPlease ignore CC violations and make code as it should be.\nI will do code review even you have CC problems.\nOnes logic will be written correctly, I will look how how to refactor to pass CC myself. . agree. is was my old request , will be addressed by may last request for update. will be addressed by my last review.. will be addressed by my last review.. agree.. I do not see update in this file.\nWhy you need this ?. this looks like a separate issue, that not all tokens are in use, that is error prone, lets make separate issue on this and merge separately and quicker.. please put \"// ok\" instead, not sure why we did this .... but lets keep this.. I am not sure why non-public and public regexps are different. Google confirmed two times in issue on google style that checkstyle rule should be relaxed. It is their style - so we follow it. If smb do not like this (I hope most of projects) they will change this in their configuration.\naccessModifiers should be removed from google style config.. Please read the issue discussion on Google style guide https://github.com/google/styleguide/issues/214#issuecomment-271221185 . Reopen will not work, let's do reopen and PR to propose the fix. Right, ok. Your fix was fine, I requested it to be in different PR, as problem is different a bit.\nPlease provide fix separately in scope of #3797.. loosing tokens is not expected, and need to be explained. lets, not mix problems. if try-catch does not work, I now try to remember some private discussions with original contributor about this, I will try to find what is left. \nBut still, lets do try-catch separately, separate issue.. looks like we do not need this property allowOneCharVarInForLoop anymore , please remove. why DOT is become mentioned in documentation as default ?. all changes and discussion about TRY forms should be done in new issue #3814 .\nCurrent PR should not change anything for try-catch in functionality.. single return point from method is required.. yes, it is, we stopped at count=2 just to enforce some level right now.\nOne day we will refactor all to be count=1  but it is non simple challenge see #3496 .. in previous version there was return on \"default\" , not it is continue to do \"while\", refactoring is not correct.. Why Integer ? (Strange that another stack of BigInteger). Why other logical operators are missed ? \"^\"  ? . looks like local-only should be used as much as possible , some times you do this, some time you do not.\nplease explain.. it sounds like alot ... can we restrict usage of other packages as much as possible ?. it sounds like alot ... can we restrict usage of other packages as much as possible ?. https://docs.oracle.com/javase/specs/jls/se8/html/jls-15.html#jls-15.22.2\n\"Boolean Logical Operators &, ^, and |\" vs \"Conditional Operator\" so what actually you mean in this method ?\n. ok, npath above 2,147,483,647 (Integer limit) is smth really strange. And does not mean any useful metric. BigInterger will work always but it is performance hit.\nOk, lets keep it as is for now.. Please create separate issue to fix javadoc, we do not need bad terms that misleading us. Please use correct terms.. All information that was missed and helped you to write correct code should be placed  to javadoc, next contributor might trap in the same problem.\nLink to jdk should be in javadoc. In  xdoc there is phrase \n\nIt takes into account the nesting of conditional statements and multi-part boolean expressions (e.g., A && B, C || D, etc.). \n\nLooks like etc is \"?:\" only. Let's update xdoc too to be exact. please add test case for simple annotation usage for example \"@Inject\" , as you detected false-negative at https://mezk.github.io/i3830-DesignForExtension/diff/apache-struts/index.html#A2\nPlease add test cases for comments between annotations. \nMake test with annotations as single line with method signature.. please make test cases with space in braces, empty line, comment.. @MEZk , as you claim it is related to all other Stream classes in this package \"java.util.stream\", lets disallow all of them (not that much of them in package). It is ok, but ...\nI do not recommend to use grep for xml parsing, it is not stable solution\nConsider to use xmlstarlet, youcan find example of usages in this repo and sevnu.. please use fully qualified names, collision is unlikely in our project but we need to show other good practices of Check usage. @Vladlis , if method is overriden , why not to use the same exception and make a suppression as you did in other cases ?. \"error\" ==> \"violation\".\nseverity of event is not under attention here.. I do not like amount of tests are updated , so you force me to verify all changes, too much.\nPlease create separate input file with with cases, or move them to the end of this file to have changes only in test that are affected in functional way.. should be:\n= validate(details, option, shouldStartLine);\ninside validate:\n...\nif (shouldStartLine) {\n      String targetSourceLine = getLines()[rcurly.getLineNo() - 1];\n      if !isOnStartOfLine(details, targetSourceLine) {\n             ....\n     }\n}. agree. Inputs are compilable, so folders are packages for them.. I completely support rnveach comments.\n\nShould we expand this to every number between 0000 and FFFF or is that too much?\n\nthis issue is already a sign that we failed to control logic if tests are defined in ranges and not all are covered.\nlets generate new input file with all characters and clearly define violation for each unicode. So this input will be for special mode of check only.\nBut we will not miss character, so such simple issue it not professional to make mistakes.\n. please put there simple \".\" to show clearly that default does not work if user defined smth custom.. why public ?. why public? . why Stack ? there could be few classes in file. do single return from methods. why you change this Check ? it is was not requested to update.. @sagar-shah94 ,\nok, .....\nplease make validate as non static. \nvalidate should have only one argument \"details\", all other should be taken from class fields and methods ... .. please make a changes to this file as min as possible. You add two lines and all other are changed for now reason.. please make a changes to this file as min as possible. You add two lines and all other are changed for now reason.\nPlease do the same for all Input files your touched.. We could but in this case we need to change title of issue , as we can not hide from user new functionality, too much people rely on our \"log of changes\" in release notes.\nLet me think about this.. ok, it will work.. this is \"Input\" file , code in such files are suppose to be ugly as it is possible. Style guides are not applicable to them at all.\nshifting of line numbers is ok, if shifting is affect a lot of code it is recommended to create new Input  file and put most new cases in it.. @kukreja-vikramaditya , still not addressed .. why do you do separate processing ?\nwhole logic should be close to if (emptyBlock) {.\nPlease explain or refactor. input files does not require header . please remove.. bad excuse.\nplease join the logic and CC problems could be resolved by moving code in separate method.. this variable is not required here, please move it inside blocks .... or completely get rid of it.. please make comment above each such  array to define from where values are taken.\nLike: // C0 (ASCII and derivatives) - https://en.wiktionary.org/wiki/Appendix:Control_characters#C0_.28ASCII_and_derivatives.29\nplease do for that for all other arrays.. please add link to wiki page here too, to define source of control codes.. this file also need to be moved by \"git mv\" to preserve history.. please remove this change. no change to message is required for now.\nAs diff report is provided we will see how easy to understand violation.. please place this Input to special folder of this Check, package in file should stay the same.. please add new line, just to keep less red stuff in github diff.. I think it should be \"true\" by default.\nAs it is very good practice.. please use Unix style \"/\" instead of \".\".  please place \"//violation\" as trailing comment and all other text move out to <p>. please remove this \"assert\", it is not required , it will do no good in future updates.. my bad, ignore this request.\nBUT two additional:\n1) please rename InputPackageDiffDirectory to InputPackageDiffDirectoryAtParent\n2) please  add a input that is located at com/puppycrawl/tools/checkstyle/checks/coding/InputPackageDiffDirectoryAtSubpackage.java  but package is package com.puppycrawl.tools.checkstyle.checks.subpackage;. In case of enum changes(new item appear) .This assert will only request to update number to new value. If it is expected that some other code of this UT should be extended - so there should be provided appropriate message to define what is expected to be done.. as we test enumeration toString()\nwhat is we make code like:\n```\nfor (ParseMode pm : ParseMode.values()) {\nswitch (pm)\n{\n  case PLAIN_JAVA:\n...\n  default : throw new IllegalState(\"unexpected enum value\")\n  ...\n}\n}\n```\nand remove assertion from below.. https://google.github.io/styleguide/javaguide.html#s4.1.2-blocks-k-r-style\nLooks like is clear by example on rightfully location.\n@rnveach , please clarify your request.. wercker message \"Command timed out after no response\" \nExecution is hanged on \n[INFO] Generating \"Checkstyle\" report    --- maven-checkstyle-plugin:2.17\nSo Check is hanging during execution over checkstyle and sevntu.checkstyle sources.\nPlease reproduce it on your local\n. please change package of this class to new. please keep name of top class as is, it is not required.. changes in ITs are not expected. wercker need to relaunched, please make some minor change ...... please add space before comment \"//\" and after \";\". this input is used only in this Check, so file should be moved (not copied).. you need to do \"git mv oldpathname newpathname\", no a simple copy of file.. please add a note \"located at directory /com/puppycrawl/tools/checkstyle/checks/annotations/\". please restore newline at the end of file. user should provide packge names without dots as package name is identifier without trailing dot.. it is better to provide user fine grained ability to define what packages to exclude.\nOriginal request was written a long time ago, author might not considered such cases at all.\nLets for now have strict match algorithm.\nWe could extend it to list of RegExps in future if user show interest to this.. please restore original indentation. please restore original indentation. looks like you need to finish method execution at this point or all further statements should be in ELSE block.. define this variable close to its usage.. Objects.equals ? for String values ?  . indent this line further to right.\nThis IF expression is hard to read.... please think how to make it better. Code should be read as text.. please revert changes in this file.. @Luolc , if that is fix for typo - please move it to separate PR.. We try to remove ROOT , why it was added there ?. please keep git history.\nyou need to do all by git commands \"git mv oldpath newpath\"  after that do  \"git oldname newname\" (2 commands).. please revert this change. you need to practicing to deliver only requested changes. You need to review your changes/PR yourself to verify that all is fine.\nMessing all together is bad practice in most teams.. I meant \"git mv oldname newname\". Try to rephrase question, I do not understand it.\nYou can keep names of files as they are now. Just move them to special folder.. I will split this to separate issue.\n@rnveach , please approve PR . I am ready to merge.. new issue -  #4003. please move this import to the bottom to minimize changes in UT files.. please move this import to the bottom to minimize changes in UT files.\nplease add comment \" //violation\" on line where you expect it.. please move this import to the bottom to minimize changes in UT files.. please add comment \" //violation\" on line where you expect it. for other cases too in this example.. single return point please.. \"line == ....\"  should be first as it ease to perform.. @Luolc , message of this assert is very hard to read. please use \nString message = String.format ..... ;\nassertTrue(message, .............). I do not understand why we need this UT.\nplease put a javadoc for it and it definitely that message of assertTrue should be updated. What is \"error messages\" ? What is expected order ?. in this case it is not possible to make it static, required could be skipped.. no declaration of protected methods are allowed in Check classes. Please make all of them private.. @ps-sp , \"log.\" statements should be in \"visitToken\" method only, please think how to make it. . @ps-sp , as you resolve my comment for location of \"log.\" such methods will most likely disappear.\nIt is also not clear for my why CASE is so special to require special methods.. no need. your are lucky - https://github.com/checkstyle/checkstyle/blob/master/.ci/travis/travis.sh#L22\nas by its name \"InputNoLineWrapGood.java\"\nthis file should be correct (no violations) - so please put it to proper place, no changes in UTs expected, as no violations should be.\nI it was my bad request to places it in wrong place.. yes, you can.\nsimple validation is setter.. this Check is very complicated so lets follow formulas that we defined in our \nhttp://checkstyle.sourceforge.net/config_metrics.html#NPathComplexity\n\nNP(if-range) + NP(expr) + 1\nP(i=1:i=N)NP(Statement(i))\n\nso comment over IF should be (if-range=1) + 1 + (expr=4) = 6 . So 6 is npath value for IF only.\nNPath value for method is 6 so comment should be NP = 6\nPlease keep this notation to clearly define to what part of code certain value is corresponding.. >     NP(if-range) + NP(expr) + NP(else-range)\n(if-range=1) + (else-range=1) +  (expr=4) = 6. > S(i=1:i=n)NP(case-range(i)) + NP(default-range) + NP(expr)\n( (case-range(1)=1) + (case-range(2)=1) + (case-range(3)=1) ) + (default-range=0) + (expr = 0) = 3. > P(i=1:i=N)NP(Statement(i))\nNP= (Statement(1)=1) * (Statement(2)=3) = 3. please restore this line.. please add test case for {@inheritDoc}mm. 1) from where you took term \"property\" ?\naccording to our doc, http://checkstyle.sourceforge.net/config.html#Custom_messages \n\nNote that the message pattern must be a valid java.text.MessageFormat style pattern\n\nhttps://docs.oracle.com/javase/7/docs/api/java/text/MessageFormat.html - so you mean \"arguments\".\nPlease rename methods and variables.\n2) according to test logic we do care only about position of 0 argument in message. So it should be first . This is the only limitation. All other could go in any order. Please fix a test.\n3) please make \"see\" tag in javadoc comment to redirect user to getExpectedMessagePostfix method , where location of argument is critical. done. done. @divsidhu-26 , please use \"git mv old-path-name new-path-name\" instead of coping file manually.. please add code chunk example to show user by trailing comment \"//violation\" where violation will be placed.\nMake examples with valid and invalid code.. please add code chunk example to show user by trailing comment \"//violation\" where violation will be placed.\nMake examples with valid and invalid code.. please add code chunk example to show user by trailing comment \"//violation\" where violation will be placed.\nMake examples with valid and invalid code.. code should quickly finish execution if result is clear\nso:\nif (!str.isEmpty()) {\n   for() {\n    break; /// as soon as isIdentifier is false.\n   } \n}. rnveach request is correct.\nsee my code example above, finish execution asap if result is clear.. please move creation of this Set to class field, you do not need to create it each time this method is called.. should be named as isOnlyInheritDoc , the same is described in javadoc. it is not a result, it is temporal state that non InheritDoc is found. So name variable appropriately - nonInheritDocContent, extraTextFound.\nYou need to finish execution asap if result of function is already known.. should be return containsInheritDoc && !extraTextFound. I do not see a break in this loop, if there be extra text at the beginning , no need to check others tags - exit with result.. we extended our Input cases , that is good step forward.\nYou will never make implementation that works on ALL possible cases. We will wait for user's feedback.. please move it back to method, all other tests have it there, so lets keep the same format.. restore definition of logger in field.\nThe same for all other cases. please name it SKIP_TOKENS. @ps-sp , please do me a favor and move all that calculation of leftCurly to special method final DetailAST leftCurly = findLeftCurly(ast)\nremoving final is not allowed for leftCurly is only one left curly in code that we investigating and it can not change.. As soon leftCurly is found and calculated correctly. \nCheck should be not differ validation of block. \nAll blocks are identical {   }, the difference is only to what parent they belong to.\nIf I miss smth , please give me there links to input cases that will not follow that rule and really require so special processing.. please add '\\n' here , to avoid red stuff in diff.. yes. weird wrapping....\nplease put \"&&\" to new line. it is good that you think about such cases but they are not required to be covered.\nCASE by definition without \"{ ...}\" is working in block of SWITCH , so share the same scope as SWITCH.\nThis Check care about block that goes RIGHT AFTER defined token. \nThis check should validate only first { } in your case and raise violation. Please make update for xdoc to mention this to user. We will ignore super-weird code.\nThis Check does not validate sequential blocks {},  you make put blocks at any possible place in code.\n@rnveach , please confirm expected behavior.. please restore original formatting. such code \"{\".equals ......... is not accepted, you should do all by Tokens like ast.findFirstToken(TokenTypes.LCURLY);\nif CASE is so special than IF for it should be the first in method to do previous logic only if ast is not a CASE.... please prove that CASE AST is so special.. Why you updated JavadocMethod documentation ?\nyour check is SummaryJavadoc -  http://checkstyle.sourceforge.net/config_javadoc.html#SummaryJavadoc\nupdate should be \".... ontain phrases that are not recommended to use. Comments that contains only InheritDoc tag are skipped.\". ```\n$ cat Test.java \npublic class Test {\n    void method1(int a) {\n        switch (a) {case 1: ; } // no violation\n        switch (a) {case 1:{}}  // 1 violation\n   }\n}\n$ java -jar checkstyle-7.6-all.jar -t Test.java | grep \"[4:\"\n    |       |--LITERAL_SWITCH -> switch [4:8]\n    |       |   |--LPAREN -> ( [4:15]\n    |       |   |--EXPR -> EXPR [4:16]\n    |       |   |   --IDENT -> a [4:16]\n    |       |   |--RPAREN -> ) [4:17]\n    |       |   |--LCURLY -> { [4:19]\n    |       |   |--CASE_GROUP -> CASE_GROUP [4:20]\n    |       |   |   |--LITERAL_CASE -> case [4:20]\n    |       |   |   |   |--EXPR -> EXPR [4:25]\n    |       |   |   |   |--NUM_INT -> 1 [4:25]\n    |       |   |   |   --COLON -> : [4:26]\n    |       |   |--SLIST -> SLIST [4:27]\n    |       |   |       --SLIST -> { [4:27]\n    |       |   |--RCURLY -> } [4:28]\n    |       |   `--RCURLY -> } [4:29]\n```\nOk, so here is reason why we do not understand each other.\nLITERAL_CASE - never have SLIST under it.\nThis is mistake in configuration of Check. LITERAL_CASE token should be removed from Check and CASE_GROUP is used. from CASE_GROUP you will find SLIST by the same logic as for all other tokens.\n@ps-sp , please address my point.. please place this example right under example of default configuration.\nIn this example please place method with empty javadoc and make a trailing comment \"//violation \" to clearly show user cases how Check is working on default config. link should be \"https://gitter.im/checkstyle/checkstyle\". please place \"//Valid\" above javadoc comment. Examples should be ready to copy paste by user and works for config that is placed for it.\nPlease do the same for second javadoc too.. @kukreja-vikramaditya , please remove this general comment. Long line should be split for sure.\nProposed split variant is fine except for comments - \"fail test\" is not a reason - it is result.\n\nInput files for NewlineAtEndOfFileCheckTest\n\nInput files for NewlineAtEndOfFileCheckTest, intentional no new line at the end.\n\nMany files in these folder require no newline at the end and are suppressed by default\nSome specific javadoc input files fail tests when they end with new line\n\njavadoc files should not have new line by design (on purpose)\n\nCI fails on windows system for this file\n\ngrammar specific input file, should have exact structure to reproduce the case\n\nInputFullOfSinglelineComments\n\nintentional no new line at the end.\n\nInputJavadocMethodCheck\n\n@kukreja-vikramaditya , this should be fixed. I removed it and it works fine.. it is not only input file validation process.\nwe also need to test xml, yml, sh, md, vm, css, js  files.\nWhole repo (all files with mentioned extensions) should be verified.. config should be named as \"newline_at_end_of_file_check.xml\". I do not like ant solution, for this case, it is over complication.\nWe still use ant only because it allow us to run checkstyle base on generated class files (before final jar is created).\nAs you can see it is ugly by configuration to make that hack.\nYour case is simpler, you do not need bleeding edge version of this Check, it very simple and unlikely have a problem, but even it got a problem, it has enough inputs during main validation.\nPlease backup your solution and try to use validation as by maven plugin - https://github.com/checkstyle/checkstyle/blob/master/pom.xml#L457 , by default maven put to validation only src/main folder, you need to configure it to scan xdoc, site, .ci, config, ...... folders.. please name it \"newline_at_end_of_file_suppressions.xml\". comments are skipped in AST for java Checks at all, so it should not be a problem.\n@robertpainsi , if you have code with default not in the end in your project - please share a link to it to let us verify our implementation on real code.. violation ?. this is not ok..... i will think about this .\nDid you consider a split ?. @robertpainsi , if you can create some gist.github.com with switches from your code where you would like to use this - please share.. you can not reply on text. You have to operate only by TokenTypes.\nPlease redo a logic.. break is missed.\nIf smth illegal is found - we should stop search/matching quickly.\nPlease update all other cases below.. please make a note in description that all properties for match will be used and describe order of matching to user.. && bracePolicy == .... please move to the front and it become good.\nPlease apply this format of code.\n\nit is actually better to see all the logic in one place - it becomes clearer\n\n:) yes, it is the always a reason when smb write a code, but it is disaster when you try to read it and understand. > I am thinking it should be: Default should be last label in the case group.\ngood message.\n\nPlease also confirm, logic of check should not change if skipIfLastAndSharedWithCase is turned off? It should behave as it does now.\n\nyes. No differences at all.\n. @rnveach ,\ndue to blame history it was in original code (13 year ago) - https://github.com/checkstyle/checkstyle/blame/836bb79348590f1a473f66553ea2ce3c9dec2786/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/DefaultComesLastCheck.java\nSo please move that to separate issue to figure-out , it might be just very old code.. please do not do all optimizations in one PR. Split this request to separate issue. 1) please change \"case-range(1)\" to \"case-range[1]\" - lets use index syntax to avoid ambiguity. I updated xdoc file.\n2) please fix index values in other cases\n3) please apply 1)-2) to all Input files. If structure has strict names for parts then array indexes are not required. Array indexes are only for cases[i] and statement[i].  NP = (do-statement[1]=5) * (do-statement[2]=2) = 12. NP(do-statement) = (do-range=1) + (expr=1) = 2 , do-statement without index. You configured Checker to process all files.\nBut you do not process all files from repository, you do this only under \"src\" folder of repo.\nplease extend config to process all files in git repository (yml, sh, .......) except for \".git\" folder.. yes, good catch. please remove this method. In this particular case it does not make sense to have setUp.\neven you do not use this contently.. whole new logic is very hard to read.\nit should be like:\nif (skipIfLastAndSharedWithCase && xxxxxXXXX()) {\n  log(ast, MSG_KEY_SKIP_IF_LAST_AND_SHARED_WITH_CASE);\n} else {\n if (xxxxXXXXX()) {\n   log(ast, MSG_KEY);\n }\n}. this exclude need to be restored. this exclude need to be restored. this exclude need to be restored. this is still not reachable link .\nIt is still in web site.\n$ mvn clean site -Pno-validations\n.....\n$ grep -R \"mojo.codehaus.org\" target/site/\ntarget/site/plugins.html:<td><a class=\"externalLink\" href=\"http://mojo.codehaus.org/antlr-maven-plugin\">antlr-maven-plugin</a></td>\ntarget/site/plugins.html:<td><a class=\"externalLink\" href=\"http://mojo.codehaus.org/cobertura-maven-plugin/\">cobertura-maven-plugin</a></td>\ntarget/site/plugins.html:<td><a class=\"externalLink\" href=\"http://mojo.codehaus.org/cobertura-maven-plugin/\">cobertura-maven-plugin</a></td>\ntarget/site/plugins.html:<td><a class=\"externalLink\" href=\"http://mojo.codehaus.org/jdepend-maven-plugin\">jdepend-maven-plugin</a></td>\ntarget/site/plugins.html:<td><a class=\"externalLink\" href=\"http://mojo.codehaus.org/taglist-maven-plugin\">taglist-maven-plugin</a></td>. agree. agree. agree. default of RightCurly is same.\nI think we should be same https://github.com/checkstyle/checkstyle/blob/master/config/checkstyle_checks.xml#L185\nAm I miss smth ?. agree. agree. I think that property should be just path as Checkstyle could validate not only java files (configs, properties, .....)..  As we addressing ssl issues, so I expect changes for ssl related excludes only. \nDue to long history of this plugin usage and periodical extension of excludes we might have same overlaps that could be removed but they need be resolved in separate PR. Please resolve duplicate and fix in separate PR. Let's keep here only ssl problem. remove \"src/main//*,src/it/java//,src/test/java//,\" to shorten config, one more launch over this folders will not be a performance problem for validation.\nplease add all excludes from https://github.com/checkstyle/checkstyle/blob/master/.gitignore. please do not reply to us as \"Will\" , You will do it for sure. just reply to us when it is  \"done\".. you need to get rid of \"!skipIfLastAndSharedWithCase\" here at all. \nPlease update if (skipIfLastAndSharedWithCase && containsCaseAfter(ast)) to be \nif (skipIfLastAndSharedWithCase) {\n  if (containsCaseAfter(ast)) {\n   }\n}. good. please test it. please keep it scrollable for this case. we need multi-line here.. please remove from source \" \\\"s and combine in one line, ones we have wrapping we could keep it as one line.\nPlease do the same for all other cases below. . please remove from source \" \"s and combine in one line, ones we have wrapping we could keep it as one line.\nPlease do the same for all other cases with \" \\\" in this file.. @samuel-gu ,\nkeep it static, Main is not part of checkstyle as library so, static usage is completely ok in it.. if you put wrap-content, then in content of tag should not be any \" \\\". Fix all cases. yes. ok, please focus on my point \"2)\"  to enforce this by Checkstyle rule , Main.java should be added to suppression https://github.com/checkstyle/checkstyle/blob/master/config/sevntu_suppressions.xml. something is different ... no it is possible to remove that excludes as even original plugin does not report this as problem even it is clear redirection of 404 to another page .\nhttp://wheregoes.com/retracer.php for \"http://downloads.sourceforge.net/project/checkstyle/checkstyle/7.7-SNAPSHOT/checkstyle-7.7-SNAPSHOT-all.jar\" show a problem but in browser this link is redirected to https://sourceforge.net/projects/checkstyle/files/ , even redirections a lot allowed in config.\nI failed - https://issues.apache.org/jira/browse/MLINKCHECK-30. @sagar-shah94 , please keep your variant (that is provide as picture). containsCaseAfter and isInLastCaseGroup methods are identical by structure, please make one method finNextToken(ast, TokenTypes.XXXXX).\nplease avoid names \"root\" for current looking ast token.. please inline isInLastCaseGroup to IF expression. please inline all calculation of containsInLastGroup in IF expression.. name should be findNextSibling  and return token. please explain what cases you are covering by this condition ?\nIf you check \"last\" you should look forward, not backward.. YES, we need to make them to follow alone.. please add a bit more complicated test cases in inputs, you can take ideas from your report.\ncombined cases and :\nBoolean value = (Boolean) ( (TwoWayFieldBridge) fieldBridge ).get( field.name(), document );\nQuery query = ( (QueryWrapperFilter) luceneFilter ).getQuery();\nassertThat( ( (Number) projection[0] ).intValue() ).describedAs( \"fieldNotInMapping\" ).isEqualTo( 42 );\n.... please add about 10 different and complicated cases.. can you make it like boolean isIdentifier = !str.isEmpty(); ?. > The only case I could find it different now is break with a label:\nbrake with label should be moved to separate issue to avoid overcomplication of this PR. \nProvided example is it compilable ? I found http://stackoverflow.com/a/14960484/1015848 , we should consider only compilable code.\nLets move discussion of this weird cases in separate issue.\n\nI have only seen false negatives so far with current code, not any false positives.\n\nIt very good, as false negatives does not make CI fails. So user are ok to tolerate them. False-positives usually result in suppression or disablement of check.\n\nIt is definately weird code.\nI'll this up to @romani if we should fix or make a new issue or ignore.\n\nLets skip it for now, lets wait for reporting of it by users.. please reply points as \"done\" or some disagree/explanation statement, nothing else. Do not make noise. You will address all point for sure in all cases. . there is problem with guava 20 upgrade , see #3598 .. hardcoded list should stay to avoid bruteforce search, is is a problem to keep it ?. I do not see a reason in this IF it could be removed.\nThe same refactoring is applicable for next method too. If in algorithm, order matter ,it should be noted. It ok to have no violations there, as empty block is for a case. If user care it should put default as last item if group.. Return from method Details at object that you found , and in place check for not null. defaultGroupAST could be used. return type should be DetailAST . http://checkstyle.sourceforge.net/config_filters.html#SuppressWithNearbyCommentFilter\nWhat about such suppression ?\n-@cs[JavaNCSS|ExecutableStatementCount|.*Complexity] method is a huge SWITCH, it has to be monolithic\nif description is too long - we could wrap it on second line.. I am not ok, see my proposal above. Good catch, as are not ready to provide users good support for lambda (anonymous classes) . It should not be a default.\nReference to #4177 and #4178. > Most of the ant tests just executes the task. Should I rewrite them too?\nplease take care of your tests only, bad examples of tests will be resolved in scope of pitest coverage task, separate issue.. @soon , please keep commenting on each point as \"done\" for self-recheck and hint to me that you addressed a point.. Arrays are objects: \nhttp://stackoverflow.com/a/32543765/1015848\nhttp://stackoverflow.com/a/12807748/1015848\n@subkrish , please make example in Xdoc for array.. please move this block below source for sequential blocks. Please show user what value should have tokens to have no violation.. This explanation is weird as it miss critical part: \".....same line as trailing comma\"\nplease update other places too.. please add test case with comma in inner array (the same as in issue description):\nint[][] d2 = new int[][] \n     {\n         {1, \n           2, }, \n     }\n. please do not forget to fix this place.. please make it \"// violation as previous line missed a comma\". @MEZk , @rnveach \nIt is very uncertain point of refactoring, sometime it is required and sometimes it clear in single line.\nwe could start collecting use cases where refactoring is beneficial.\nThis is definitely Check for sevntu ..... as there will be bunch of nuances, that we do not know  for now. It is unlikely that first implementation become good to use. All such brave ideas we always tested on own code and then in proprietary code to let other agree with Check. As some long time passed and no negative feedback from non-chekstyle users - we could think to move it to main project.\nOne visible nuance is that multi-line expressions will take more vertical space so vertical size will increase, it might be a conflict with anonymous class length Check or ...... .. it is not the same as I expected , but ......ok, please make in tests input like:\n```\n    int[] a1 = new int[] \n    {\n        1,\n        2\n        ,\n};\nint[] a2= new int[] \n{\n    1,\n    2\n    ,};\n\n```\nin both cases violations are expected.. I still think that 4 examples that mkordas provided should be there (last two cases is the most problematic to understand).\n@rnveach , please share your opinion.. if reason of this Check to force user to have comma to minimize changes(it is also affects diff output), so this cases are invalid and should be fixed.\nWe need to decide we check last array element vs \"}\" or we check \",\" vs \"}\" location. In my mind should be both.. you need to rewrite logic, it has to be like \nif (exprStart.getType() == TokenTypes.LITERAL_NULL) {\n  if (onlyObjectReferences && isObjectType(type)) {\n    // do validation for objects\n  } else {\n    // do general validation\n  }\n}. @Vladlis , please adapt mkordas comments and examples to Rationale. . This check processes LITERAL_CASE and LITERAL_DEFAULT separately, so if tokens=LITERAL_DEFAULT, following code will not trigger violation, as empty block belongs LITERAL_CASE:. remove \"//violation\".. // no violation for \"default:\" as empty block belong to \"case 1:\". move description and configuration above result(code with violations).\nPlease remove LITERAL_CASE  from config to make it be representetive. . Yes. This case is like \"Trailing comma not needed, line needs to be modified anyway\" , there should be no violation.\nThis is just another example that it is hard to predict behavior of Check now, so xdoc should be extended\n. \"The check allows leaving out the comma\" ==> \"The check demands the comma\". lets make a note that this Check does not demand certain location of curly braces, so following two cases does not produce an violation.. final to make extra block - ELSE . I do not think so.\nCode should be like:\nfinal String fixedPath = path;\n        final String os = System.getProperty(\"os.name\", \"Unix\");\n        if (os.startsWith(\"Windows\")) {\n            fixedPath = path.substring(path.indexOf(':') + 1);\n        }\n        return fixedPath;. in this particular case final AbstractClassInfo classInfo = findClassAlias(name.getText()); should be moved inside ELSE block.\nin general  I prefer to keep non initialized (result) variable on the top. See my example for System.getProperty(\"os.name\", \"Unix\") it kind of define begin of in-lined function for this variable.. confirmed. please simplify package - make it single line.\nin this input you should focus on NoWhitespaceBeforeMethodRef. please remove \"//no violation\". I agree. in future we should add public to input, as we already split inputs, so we do not expect that smb else require code in this form.. in future we could keep such changes, as we already split inputs, so we do not expect that smb else require code in this form.\nThis Check is not affected by spacing.. please cleanup belongsToRangeValues.\nAll class fields (except user defined properties) should be cleaned, to clear state completely for next file processing.. No, let us merge this PR asap. we already have docklets, in line above. we can not , Check is not ready for this. Inspection is smarter than Check.. I do not know, we will think about it later in GSoC.\nEnabled is only item that should be changed. Enabled_by_default is their diferentioation when activate a rule (by user , or by new version).. reverted at #4286. reverted at #4286. I will do this later, build status need to be resolved asap. please recheck why Checkstyle is not catching this as violation. We enforce all files to have newline at the end. what is changed from 1_3 ?\nDo we really need to bump version ? it is kind of strange that we change url in example - do not bump version.\nand in the same time introduce 1_4.\nWe just need change files and copy them to new location.\nChange all our XML files to point new location.\nIf user have old xml config that reference to old location of DTD - it should continue to work.\nFiles that we are packing and hosting should use new location.. Please move it close to usage.. please remove comments.\nfrom second block || (lineFilter != null ..... please create function with clear name.\nBig/complicated return statements are not good, that is why original author used separate return. Now code become hard to read -so extra refactoring is requied.. change first illegalClasses to illegalPkgs. \"==\" should be intended further to right, as it is not the same level of execution as \"&&\". result = result && .... looks weird, please put check for result == false in IF and skip all this block completely.. fixed in  794637e commit.. xdoc is fixed at a719c39 commit.. > So what do we need to change? Only comments in dtd schemes?\nif we change only comment - version should not be bumped.\n\nDo you plan to upload 1_0 - 1_X schemes to sourceforge too?\n\nyes, all old versions on dtd should be accessible, users still works on very old versions of checkstyle.\n\nDo we need to change test resources to point to the new schemes location?\n\nyes. as we do not introduce any new functionality in DTD , lets keep it version.\nPlease use http://checkstyle.sourceforge.net/dtds/configuration_1_3.dtd , it should work.\nPlease do the same for others.. should be \"Checkstyle started (checkstyle_checks.xml)......\". should be \"Checkstyle started (checkstyle_non_main_files_checks.xml):... \". please fix echo content. why protected ? please make it private.. please make it private. I do not know reason.\nWe could raise an exception if user provide us nulls.. @rnveach , I not following you, please explain what you want to share here  with user ?. @Luolc , I do not remember a reason of \".\", looks as incorrect, as packages values without \".\" at the end  (according to jdk spec). @Luolc , moving all reflection magic to ModuleReflectionUtil will be good. \nUtils are not api. I recently moved all utils out of api package. It is will not be our contract with user. We will change it for our need at any time.. Out is not good but we will address it latter, in separate issue. good point, but could be postponed for next issue.. lets restore it, just in case, I do not remember a reason of it.. should be fixed. correct, there were no such excludes in previous version. please put this to Description of Check.. \"current package\" ==> \"current subpackage\" . As in import files all are sunpackages\n\"then check\" ==> \"then the Check\". please add on more example to show user complete blacklist mode, then all packages are allowed pkg=\".*\" regexp=true. I agree, point is resolved.. @MEZk , why this become required ? or ..... \nplease explain .. I know this, just curious why to put it right now. This change is ok to me. please make test cases with multiple variables in TRY to make sure that you validate all of them, not only first.\nyou can grab examples of non simple code from your report.. this file is used only ones in this Check only , please move file.. It is better to keep inputs independent on any other file. We do not need good design in this files, the aglier the better.. All inputs should be compiled by itself only. The same as we demand from users on when they report issue. . If in original file this class was embedded - keep it as it was. Let's not do few things in such complicated updates. We just move files in subfolders. Do not change structure of them or ... .\nAll extra action and optimization should be done later and separate commits and PRs.. it is already cached in field, that is right even for checkstyle to avoid scanning all for each new third party module.\n@rnveach , Is current code is what you  expect ?. this explanation of Check algorithm is not specific to Blacklist mode \nit should be in section Description located before \"The DTD for a import control XML document\". 1) \n\"sub-package\" vs \"subpackage\" looks like meaning is the same, \nlets use term from our XML only - \"subpackage\"\n2)\n\"including the root level\" --> \"including the root level(import-control)\". After come pause with this Check..... I do not not understand this sentence.\nTo my mind should be:\n\"Check starts checking from the longest matching subpackage described inside import control file to package defined in class file (later 'current subpackage').\". it is allowed only in certain subpackage - \"checks\". Either change description or remove subpackage \"checks\".\nI recommend to remove subpackage to show example blacklist mode for whole project(allow all is in import-control tag).. > returns everything\n@rnveach ,  what do you mean by this ?\nyou do not want \".filter(cls -> isValidCheckstyleClass(cls) && isCheckstyleCheck(cls))\" ?\nif you want completely non related to Checkstyle context function, we could have just another function \"getClassesRecurcive\", but we need this getCheckstyleChecksRecursive function to serve our needs. If it is only for tests, it is better to move it to test area.\nSources are open, so user can copy and do any required filtering.. name of class if too general.\nit describe strategy of module on mismatch - MismatchStrategy.\noriginal idea of property 'strategyOnMismatch' ....... looks like mismatchStrategy is more compact, if not disagreements - please update in whole code.. \"check should go\" ==> \"decision should be delegated to\"\nThis class should not care about where it is used (Check), it describes strategies.. should be 1_3.dtd. as we keep this strategy as default, it should be first in Enum.\nI think it do make sense, it will auto bind it to 0 value.. \"(later 'current subpackage')\" is misplaced.\n\"longest matching subpackage\" ==> \"longest matching subpackage (later 'current subpackage')\". break is required. check for null of argument is required.. I do not like name at it misleading.\nI propose - isOnlyWhitespaces. missed ( ... please review whole javadoc to clearly define what method do. Word \"empty\" should be avoided.. or contains only .... After one more review i think name should be isOnlyWhitespacesOrEmpty\nIdeally user should not read javadoc to know what it is doing. Nuance with null is kind of covered by word Empty.\n@Vladlis , @rnveach , please confirm.. This become a messy, please move first and last to local variables, comment above should be removed as it completely moved to code variable and method names.. @rnveach , what do you think to create a Check to forbid \"final\" on arguments ?\nwe have a guard Check that catch reusage of argument, so this finals are just make code verbose.. I do not like that you return NULL there, NULL is old way how engineer described uncertainty.\nwe always know strategy, there is default. NULL is not allowed. please explain user, if not defined it is delegateToParent.. it is hard to understand this \"only for ....\"  please clearly define what is allowed for import-control and subpackage .. IllegalArgumentException should be used. \nin following case too.. All other methods should be private.\nCoverage should be archived by test cases for extractInlineTags. please move all new Utils classes to \npackage com.puppycrawl.tools.checkstyle.checks.javadoc.utils;\nI do not want to give users a signal that such implementations will be first class citizens.. please intend this like below(+4 or more from \"=\") to ease reading:\nfinal boolean getBlockTags = tagType == JavadocTagType.ALL\n                                         || tagType == JavadocTagType.BLOCK;. should be \"Property strategyOnMismatch \" . It is better to not start sentence from code block.. \"allowed or disallowed\" looks weird in html, please convert them to \"code\" as we use in all other cases \"code\" for values.. yes, functionality is the same - http://commons.apache.org/proper/commons-lang/apidocs/src-html/org/apache/commons/lang3/StringUtils.html#line.295\nI would vote to name it the same way as Apache - isBlank and even mention that in javadoc. isBlank is very known method in web , so reusage of its name will be good (as functionality is the same).\n@rnveach , do you agree ? please share your final vote and let close this PR.\n@Kietzmann , @Vladlis please share share your vote too.\na) isBlank\nb) isOnlyWhitespacesOrEmpty\nc) isEmptyOrOnlyWhitespaces\nd) isNullOrBlank\ne) isNullOrEmptyOrWhitespacesOnly\nf) your variant\n\nI would opt for the long name rather than for the name which is lying to me.\n\nI like this principle too , but do not be very fanatic with it. You can not put all details of implementation in name of method. It is not possible. Verification of null is almost never present in name(it is present only when it is critical... isNullOrEmpty, ..... ). It is better to keep code readable (very uncertain criteria :) ). Long names is not always do good job.. Ok, majority is for a) , @Kietzmann , please rename.\nPlease mention in javadoc that it is the same as Apache method but a bit refactored.. It is not used in \"main\" code - please move it test Utils.. What problem with have with \"Input\"s ?\nMain code should not be affected by test code. If we have some extra classes that are picked up we could rename them to be our of radar, or ignore them if them do not cause problems.\n\"test\" code should not affect \"main\" code.. we need to add check for Check.class - it is deprecated but NOT removed from sources, bunch of code outside of our repo still depends on this class. \nTill Check.class is in repo - it should be there too.. final is also possible to place on catch arguments catch(final Exception ex) { ... }. you are right, ignore this point.. ok, lets keep non regexp form.. @Luolc , @rnveach , test code need to be adjusted to not affect main code.. @Kietzmann , please apply proposal of rnvech and lets merge this RP.. String type should stay in this code , but we could initialize STRATEGY_ON_MISMATCH_ALLOWED_VALUE from enums toString().toLowerCase().\n@timurt , please do.. No we cannot do this as delegateToParent is not in the same spelling as DELEGATE_TO_PARENT. there should be constant for \"delegateToParent\" , default value is still valid value.. please make FOR singleline.. can you make it like \nif (ast == parent.getFirstChild()) { \n    isLambdaParameter = true \n} \nelse {\n   final DetailAST lambdaParameters = parent.findFirstToken(TokenTypes.PARAMETERS);\n   ....\n}\n?. we treat AST tree is not modifiable, so you can trust objets to be the same by their reference , so make it a bit simplier param == ast. >What do you feel about overriding DetailAST's equals and hashCode to work with our implementation?\nOnly in checkstyle8 , when we make this class completely immutable.. @ps-sp , please proceed with proposed update.. Should it be module-resource ?. It is ok to skip short name for this option, it will not be frequently used.. confirmed , this is details of implementation of method private static MismatchStrategy getStrategyForSubpackage(final Attributes attributes). Do we need short form for this ?\nShort forms exists only to simplify typing for very frequent arguments. I doubt that this option will be used by users, it useful only for our testing tool.. I am ok with name, I like positive names more. Do not forget to change it in issues that you created. it is attempt to align name of attributes, it is ok.. no, we should not do any conversions to sources, at least till clearly reported as bug with many supporters.\nSo for now lets keep this is as limitation.. it will lower. By mean of such excludes we will gradually raise threshold to 100%.. Might be better to name - maven.sevntu-checkstyle-check.checkstyle.version. should be executeIgnoredModules. lets be consistent - executeIgnoredModules. executeIgnoredModules. >Why did we use stable version but not current SNAPSHOT version before?\nMaven release plugin is failing if any snapshot version is found, as release version have to be stable and based on strict versions. Please remove , the less the config the better.. We try to avoid pure UT as much as possible. So you might noticed that all our Tests are functional and test Check by real execution.\nCan we test ignoredLines by providing input file, regexp and recheck that ignored lines affect validation expectations.. can we make in functional , by testing expected output of validation ?. can we make it functional ? as testNoWarningIfSingleLinedLeft. just make it to return return getMessageDispatcher(); code will be clear. No incapsulation is required for Dummy classes. simply \"till https://....\". get rid of this method, \nIf you can do testing withtout reflection - so you have NOT use it.\nReflection is ok only when no other ways to do this.\nBut all code any class should be accessible by calls of public methods. . call whole checker - checker.process(.....). call whole checker - checker.process(.....). not sure how that bad examples of reflection are appeared here.\nbut all that could be invoked by  - checker.process(.....). please move this comment down to be placed above certain param tag , not whole excludes.. Confirmed, ok to be default.. @Vladlis , \nyes, should be TEXT for unknown/custom block tags too;\nas we do not know tag , we do not know structure of it (description, reference, ...) so all is TEXT, as user need to have custom Check to process them if he care about validation of them.\nblock vs inline tags : http://docs.oracle.com/javase/8/docs/technotes/tools/windows/javadoc.html#JSWOR646. it is first time when codacy-bot is right and nobody else catch a problem.\n@Nimfadora , please fix.. why not simple .collect(Collectors.joining(\", \")) ?. please use there concatenation of two string, to clearly show how it should looks like and text main code by different in view test code.. I created separate issue on this - #4448 .\nShould be done when we come to checkstyle8 version. please move return to the end of method.. @Nimfadora , @rnveach \nWe do testing in functional way as we care about how our Checks work the most.\nIt is not ideal but ok that some parts of Treewalker is covered by some Check's test. We do the same for UTs coverage, but for cobertura we do not have multiple launches.\nIn Pitest multiple executions is result of performance problems.\nIf increasing amount of test make pitest coverage better and keep execution below 10-15 min - it is ok to do (at least in our first fight with pitest coverage). We could make it better, with more specific tests later on.. it was added during comments parsing introduction - https://github.com/Nimfadora/checkstyle/blame/2483ddc5a4d286891da1922cadf9e66547a7ec48/src/main/java/com/puppycrawl/tools/checkstyle/TreeWalker.java#L179\nI do not see a reason, it is better to manage messageCollector only in class thats is own it - AbstractFileSetCheck.\n@Nimfadora , please remove that dead/extra code.\nPlease beware that there will be more cases like this, please report them in advance. please restore name of the file - it is special file.\nhttps://www.intertech.com/Blog/whats-package-info-java-for/. ok, lets keep new name. Checkstyle do not care, it was just signal to used that file was weird because it is non java file actually.\npackage-info.java - is parse-able by us, that is why we process it. In other words , it does not make problems for us so we work with it.\nmodule-info.java - is in the same family of file in java project. We do not process it, because it completely different by structure and .... .\nso, to make it clear for future contributor, lets change comment content from Annotated package definition to check if import is declared unused --> this file content is based on  package-info.java file structure. no need to do instantiation of URL here  final URI uri = CommonUtils.getUriByFilename(config); , string could stored as is , to be processed at\nhttps://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/ConfigurationLoader.java#L179\nconversion to URL/URI - https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/utils/CommonUtils.java#L372\n. remove reference to this dependency. remove reference to this dependency. remove reference to this dependency. we are decided to go further with breaking compatibility changes, please read https://github.com/checkstyle/checkstyle/issues/4449#issuecomment-310078283. it is bad parctice to put \"assertXXXX\" in non \"testXXXXXX\" methods.\nin your case -  just inline method \"foundJavaDocsCount\" as you used it ones.\nIf you see that it should be used - instead \"assertXXX\" do throw exception to fail a test for sure.. please explain this change.\n184 will be good value ones we come to extension of tokens on next java syntax extension, that is why we used last possible value.. please make method argument to be public void setConfig(String config) {\nto make it similar to\npublic static Configuration loadConfiguration(String config, .... as here. pitest is too smart, it force us to write good test that test each TokenType and request for next value after last token should be an problem. \nso we can do following:\n1) create a test that iterate over all token types\n2) create a static method that find max value at TokenTypes, and please use max+1 to get and exception.. @Nimfadora , please rename \"assertion\" to \"validation\", lets keep assert word for junit world only.. please use \"get\". please intend +4 spaces. All \"&&\" should have the same indentation. argument should be String, result.toString().trim() should be done outside of this method.. argument should be String. printWarningForViolation -> validate. do not put StringBuilder as argument.\nreturn String from this method.. please move allowedTypes to class field, it is not going to be changed so has to be ImmutableSet. . method visitJavadocToken should contain all log statements. All methods should return results to make final decision at visitJavadocToken. Please refactor checkPeriodAtEnd method to return results to let you inline your validate method to visitJavadocToken. please copy that ml file to folder for Checker input files.\nEach module should have its own input files, nothing is sharable.. please restore weird indentation, this file is for testing, the more weird file the better. Just change package and name of class.. Checker test is located at:\nsrc/test/java/com/puppycrawl/tools/checkstyle/CheckerTest.java\nso its inputs should be (please create folder):\nsrc/test/resources/com/puppycrawl/tools/checkstyle/checker. in scope of this issue please.\nok, copy/move it to src/test/resources/com/puppycrawl/tools/checkstyle .. @Vladlis , if custom bock tags are affected the same way as inline tag, we need to fix them too, but in separate issue - please create if required.. @Nimfadora , please remove from this PR all , it s not a solution.\n+        catch (CheckstyleException ex) {\n+            fail(\"exception is not expected\");\n+        }\nPlease add all cases that are left in suppression of PMD one by one, we will address them one by one, I will give recommendations. Please regenerate your report to contain all suppressed cases - I will provide guidance on by one.. it is not clear , what this tag (exclude) for at this place. if you fix in this PR/issue - please change issue title. Right now it doesn't makes sense, we should merge test to IndentationCheckTest.\nIt might be created to avoid conflicts on merge a long time ago.. lets do this in scope of this issue. subkrish is not a newbie in our project he could make it. Fix is simple.. I personally dislike logic that is based on exceptions. Here we do not have performance concerns at all.\nIf my mind it is better to make like:\n```\nif (isInt()) {\n checkerThreadsNumber = Integer.parseInt(checkerThreadsNumberStr);\n ....\n}\nelse {\n   result.add(invalidNumberMessage);\n}\nstatic boolean isInt(.....) {\n            try {\n                Integer.parseInt(checkerThreadsNumberStr);\n                return true;\n            }\n            catch (NumberFormatException ignored) {\n                return false;\n            }\n}\n```\n@rnveach  or @sabaka , are you agree with me ?. I did not plan to have such code at all, but as you started it ... ok . But lets make visible as all others and please put in description prefix \"(experimental)\".. why MULTI_THREAD_TREE_WALKER_MODULE_NAME and TREE_WALKER_MODULE_NAME are equal ?. @sabaka , why we are updating ANT launcher now ?\ndo you plan to force Travis CI to run build in MT mode always to do self testing of MT on each commit ? if yes, it might be reasonable to do this when we are ready for this.. This is API, we should avoid this change and I am ok to even have some refrection(or unsafe casting) code to main code to get this settings.\nIt is easy to make changes in API and very hard to remove code from it.\nWe play with hiding new options in Main.java but do API changes in the same time .... smth is not good.\nIf we are still not sure, lets hide implementation so  no public information on it, no API changes.\n@soon , @sabaka can we avoid this change ?. @subkrish , please move declaration of addExceptionMessage close to its usage.\nPlease apply the same fix for all other cases in this PR.. @soon and @sabaka , If there is no answer to my question ... please create issue for support of MT in ANT and move that fix to separate branch. If changes are not required right now - they should be postponed.. please remove, we agreed on no changes to API.. please avoid changes in c-tors or static method loadConfiguration, create separate c-tor for you(for MT)\nour plugins might use existing c-tors, so we should not force them to update their code.\nmaven plugin use static method - https://github.com/apache/maven-plugins/blob/trunk/maven-checkstyle-plugin/src/main/java/org/apache/maven/plugins/checkstyle/exec/DefaultCheckstyleExecutor.java#L377 , we can not recheck all plugins, there are too much of them.\nIf we have concern about alot of c-tors in class, we could minimize them on final steps of project.. make sense. done.. move close to usage. move close to usage. Yes, as close to use as possible/reasonable. yes, the same principle.. @Luolc , can you recheck this translation and provide better form if required.. @rnveach , I do not like class fields for Tests, but I think that moving auditStartMessage/auditFinishMessage and other string without parameters to Test classfields is reasonable.. Main.errorCounter with {1} is used about 7 times, I propose to make a field for it too, as very frequent element.. @subkrish , please move \nfinal LocalizedMessage auditStartMessage = new LocalizedMessage(0,\n                    Definitions.CHECKSTYLE_BUNDLE, AUDIT_STARTED_MESSAGE,\n                    null, null, getClass(), null);\n            final LocalizedMessage auditFinishMessage = new LocalizedMessage(0,\n                    Definitions.CHECKSTYLE_BUNDLE, AUDIT_FINISHED_MESSAGE,\n                    null, null, getClass(), null);\nto be class fields, that locallized messages is not changeable, so they are like a constants.. please move this variable to class field and use it in all cases. You have already 7 of them. TreeWalker have nothing to destroy so he should not override this method and do useless actions. Nobody is inherited from TreeWalker in our project so method is useless.\nBUT, Treewalker host all our Checks , so this method is just redirection of call to all Checks. If any Check use smth that need to be closed returned back to system, this method will be in use.\nOriginal problem was in pitest complain about useless execution of super.destroy that is empty in AbstractFileSetCheck.java , and it is empty on good reason as most Check does not have resources outside.\n@Nimfadora , looks like we will not resolve this conflict of interests here, so pitest need to exclude it from pitest  by excludedMethods. argument type should ImmutableList, in other case it is not clear why we suppress violation. argument type should ImmutableList, in other case it is not clear why we suppress violation. argument type should ImmutableList, in other case it is not clear why we suppress violation. Check tests are failing, problem that super implementation is empty so it will do no effect on test.. allowed Tokens. it is already there - https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/api/JavadocTokenTypes.java#L639\nyou do not need your own definition of it.. should be eliminated, see comment below. logic is still over complicated.\nyou need to have visitJavadocToken method to be like:\nString firstSentence = getFirstSentence(ast, period);\nif (firstSentence.empty) {\n   log(MSG_SUMMARY_JAVADOC_MISSING)\n} else if (! isValid(firstSentence)) {\n   log(MSG_SUMMARY_FIRST_SENTENCE)\n}\nelse {\n   if (containsForbiddenFragment(firstSentence)) { .....}\n}. please return string to visitJavadocToken method and do all validation of String that is first sentence there.. all checks should be done in visitJavadocToken method, all you need is to have smart method that return String of first sentence from javadoc content.. > .replace('*', ' ')\nthat is incorrect, as you will miss all \"\" in body of javadoc. If you do not need leading \"\", you should not add them when you create result string.\nPlease add UT case on this and share a name of test method with us to recheck.. please avoid usage of temporal object - List<String> lines , that is easy refactoring.. please avoid usage of temporal object - List<String> lines , that is easy refactoring.. please avoid usage of temporal object - List lines , that is easy refactoring.. please avoid usage of temporal object - List lines , that is easy refactoring.. please avoid usage of temporal object - List lines , that is easy refactoring.. please avoid usage of temporal object - List lines , that is easy refactoring.. please avoid usage of temporal object - List lines , that is easy refactoring.. @Nimfadora , reason is required for all suppressions, even temporal, especially for permanent suppressions.. please name it \"errorCounterOneMessage\" to clearly define that is not general message, but parametrized by \"1\". System.getProperty(\"line.separator\") is used too much , please move it to field with name EOL, substitute in all cases. do we need String.format(Locale.ROOT , please review other cases too.. please move as close to usage as possible.. please move as close to usage as possible.. @subkrish \nwe need to cheat it some how , may by abstract modifier\nof no luck - we need to suppress violation. I am ok with suppression in Deprecated class.. I am ok to make it abstract.\nCan we make at least one method as abstract ? getPath for example. @subkrish , thanks a lot, now I see that we on wrong way to resolve an issue , see comment at https://github.com/checkstyle/checkstyle/issues/4592#issuecomment-313830081\nI think we need to close this PR.. yes, please revert this changes, do not do too much in the same PR. @Nimfadora , please recheck point from rnveach, I am merging your PR as we still raising Threshold, that is good to avoid leak in other PRs.. ideally it should be private, but will need it in Tests to avoid even deeper refactoring.\nI will create separate issue on UT refactoring, it could be done later.. this method is not in use in Check so should be removed. Looks like it is required by Tests, Tests need to use new method.. @sagar-shah94 , make a javadoc like \n/** method find '*' \n*    in string. Second sentence.\n*/ . \nto have \"\" not only as leading asterisks, but as part of text.\nCheck config of test should violate usage of \"\" in first message.. > .trim()\nshould be done inside method that return Summary\n\nString firstSentence = getFirstSentence(ast);\n...\nString summaryDoc = checkPeriodAtEnd(ast)\n\nin terms of Check, first sentence and summary is the same.\nIt is not clear why you calculte it by two different methods.\ncheckPeriodAtEnd should be renamed to getSummarySentence as minimum.\n. Issue #4694. Issue #4694. fixed. fixed. fixed. if there is problem in one file for whole rule, we do not change a rule, we do suppression in certain class.\nplease use javadoc tag suppression for CheckerTest.. fileProcessingResult.getFileText is not used it is already sign smth is wrong in design.\nplease see my comment at https://github.com/checkstyle/checkstyle/issues/3573#issuecomment-314760202. yes, could be done separately -  #4702. @ps-sp , @see tag has exact forms by specification - http://docs.oracle.com/javase/8/docs/technotes/tools/windows/javadoc.html#CHDDIEDI : \n@see string\n@see <a href=\"URL#value\">label</a>\n@see package.class#member label\nyour example should be parsed as @see string\ngrammar is enough to make that parsing.\n@Vladlis , please review this one more time. I do not understand why this change is required.. Why \":\" resulted in classification of https as PACKAGE ? \n\"package.class#member\" - there is no \":\" in syntax, so if any \":\" or any other not related symbols appear - it is not a PACKAGE or PACKAGE_CLASS or .... it is just a string so it is a DESCRIPTION.. @Nimfadora ,\nUnfortunately, this is weird feature request from googlers , please see commit and related issue #3605 .\nHow can we suppress pitest there or any other workaround (I am ok to move that code to special method addFeauresForVerySecureJavaInstallations and suppress pitest on this method)?. please try to do this by means of inner class in AbstractLoader, if it does not help ... ok to make separate top level class FeauresForVerySecureJavaInstallations in javadoc make it clear that it is result of conflict of pitest and user requirements.. Why not smth like PACKAGE: [a-z_$]([a-z0-9_$] | '.')+ WS+ [a-z0-9_$] ?\nsuch a \"regexp\" should not match to \"https\" at all as there is no space after \"https\". We could forbid logger usage in testt by checkstyle. this variable is used only ones, please inline it to code and reuse getPackageLocation to avoid copy-paste of path. My bad, let's review this one more time. yes, it would be better.. do we really need this suppression to be placed 5 times ?\nIt should be covered by \"Production\" scope usage.. registered #4727 .. you did indentation of comment to the right, it is not required in your issue, please do not do this.\nWe expect now change in this lines.. @sagar-shah94 , please explain why we have two method getFirstSentence and getSummarySentence ?\nThis methods should do absolutely the same as first sentence is summary sentence, please use only one.\nIf smth is missed in one of them, please merge them.. comment is not relevant now.\nexpression become over complicated to read that is based on negation .... very hard to read.\nplease revert and use suppression by javadoc tag.\n. @Vladlis , as we discussed in private call:\nWe need to postpone this changes for later to avoid changes for PACKAGE in this PR.\ncreate separate issue for support of spaces between reference and description and lets see regression in AST more clear.\n@ps-sp , please catch Vlad online to receive details.. good catch by checkstyle....\nWe need to suppress MissingPackageInfo in tests, as \"package-info\" file is required only for javadoc generation, but we do not generate javadoc for tests at all - http://checkstyle.sourceforge.net/apidocs/index.html .\nPlease use inspection MissingPackageInfo only for \"Production\" scope in IDEA.\nSorry that I mislead you, system is already smarter than I.. adding \"\\n\" is not required, please revert it as it cause useless changes in expected AST . adding \"\\n\" is not required, please revert it as it cause useless changes in expected AST. adding \"\\n\" is not required, please revert it as it cause useless changes in expected AST.\nIf you want some tests to have \"\\n\", please declare a need in PR description to let clearly understand your intend.. I have no idea... We will think about it a bit later. we should not use Locale.ROOT , it might be still required somewhere but that should be explained in javadoc. I doubt we can not use localized test here.\n\nhrough a check?\n\nyes, but we still did not finish transition from non localized tests - #3110 , it might force us to create a lot of suppressions.. @ps-sp , please always try to use public methods to test smth.\nyou can use reflection only and only when you have no way to test it by public method, such usage of reflection should be commented in code.. @ps-sp ,\nI also think that \n\n((WS | NEWLINE)+ STRING | htmlElement) (WS | NEWLINE) ((WS | NEWLINE)+ description)\n\nshould be \n((WS | NEWLINE)+ STRING | htmlElement)* ((WS | NEWLINE)+ description)\nyour case @see something should match to my mind, as description should preceed with space ,\"+\" will demand it.\n. > no viable alternative at input \nmessages that come from another libraries we can not and will not localize, we use and will them as is.. you need to move oos out of TRY scope and merge TRYs, so finally become part of top TRY.. you need to move randomAccessFile out of TRY scope and merge TRYs, so finally become part of top TRY.. you need to move fileInputStream out of TRY scope and merge TRYs, so finally become part of top TRY.. should be static. ok. Ok, but you can yourself that regexp is not consistent for all it's parts, that is strange and smells.\nWhat about SEE_LITERAL (WS | NEWLINE)+ reference? (WS | NEWLINE)+ (STRING | htmlElement)* (WS | NEWLINE)+ ( description)? ?. ok, @ps-sp , please provide all possible cases in inputs for see tag\nI still see  strange why STRING is grouped with htmlElement but description is placed on the side, I might do not see whole format of see tag.. > ok, I think percentage should be decreased in config\nyes, unfortunate calculation, ok to decrease, but should be done in separate PR with change only for classes that cause decrease.. comment over exclude is required to explain why we keep it without consideration.. please avoid change of this line cd ...., HACK lines(wget+patch) should not affect other lines to be easily removed.. @timurt , @MEZk \nI do not remember that I allowed new classes in API.\nWe discussed to keep then out of API till we finish implementation, to make sure that tested that contract and we could keep it.\nOne more point is names of interfaces: AstFilter vs TreeWalkerAuditEvent .\nit is better to name filter as TreeWalkerFilter.. both names should consistent as they can not be used without each other.\nboth interfaces should be out of API\ntwo ways:\nAstFilter\nAstAuditEvent\nor\nTreeWalkerFilter\nTreeWalkerAuditEvent\n@timurt , @soon , @Vladlis , @rnveach , please share your vote.. agree with rnveach.\nadditional point is that TreeWalkerAuditEvent will contain not only Ast , but some other context from TreeWalker.. > because they are children of module Checker, similarly to TreeWalkerFilter\nit is already too late, with such a change you will brake whole word of Checkstyle.. I do not see processing of void/singleton tokens, is it missed or there is no need for this ?\nIf no need please explain this in javadoc of this method.. please make method isMissedHtmlTag and make in its javadoc explain why we care about HtmlTagContext only.\nAll other context classes related to html\n$ grep --no-filename -R \"extends ParserRuleContext\" * | sed -E \"s/.*public static //\" | sed -E \"s/extends .*//\" | grep -E \"Tag|Html\"\nclass HtmlElementContext \nclass HtmlElementOpenContext \nclass HtmlElementCloseContext \nclass HtmlTagContext \nclass PTagOpenContext \nclass PTagCloseContext \nclass LiTagOpenContext \nclass LiTagCloseContext \nclass TrTagOpenContext \nclass TrTagCloseContext \nclass TdTagOpenContext \nclass TdTagCloseContext \nclass ThTagOpenContext \nclass ThTagCloseContext \nclass BodyTagOpenContext \nclass BodyTagCloseContext \nclass ColgroupTagOpenContext \nclass ColgroupTagCloseContext \nclass DdTagOpenContext \nclass DdTagCloseContext \nclass DtTagOpenContext \nclass DtTagCloseContext \nclass HeadTagOpenContext \nclass HeadTagCloseContext \nclass HtmlTagOpenContext \nclass HtmlTagCloseContext \nclass HtmlContext \nclass OptionTagOpenContext \nclass OptionTagCloseContext \nclass TbodyTagOpenContext \nclass TbodyTagCloseContext \nclass TfootTagOpenContext \nclass TfootTagCloseContext \nclass TheadTagOpenContext \nclass TheadTagCloseContext \nclass SingletonTagContext \nclass AreaTagContext \nclass BaseTagContext \nclass BasefontTagContext \nclass BrTagContext \nclass ColTagContext \nclass FrameTagContext \nclass HrTagContext \nclass ImgTagContext \nclass InputTagContext \nclass IsindexTagContext \nclass LinkTagContext \nclass MetaTagContext \nclass ParamTagContext \nclass WrongSinletonTagContext \nclass SingletonTagNameContext \nclass JavadocTagContext \nclass JavadocInlineTagContext \nclass HtmlCommentContext. Why it is not possible to make bad javadoc files and give them to DetailNodeTreeStringPrinter and recheck output of it ?\nPlease avoid reflection as much as possible. Please write more functional tests.\n. annotation is allowed here: https://github.com/checkstyle/checkstyle/issues/3435#issuecomment-315548372. nobody will read this note till it fail their build :) , nobody read releasenotes before update, usually user try to update, if some problems happen start to read release notes and then review documentation.\nSo we will update it on moment when it become affecting users.. no need to warn user, we will remove that module, and put issue(title and description) a reason. Issue will be referenced in release notes.. createModule already put in exception all required context for user - https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/PackageObjectFactory.java#L183\nbut other methods contextualize and configure will not provide context of which module was in reflection initialization process.\n@timurt , please add try-catch.\nUPDATE: moved to #4814 . lets move this nuance to #4814 .\nIt could be done later.\n@rnveach , @MEZk , please approve PR.. @rnveach , what do you mean by this ?. please move this method to CheckUtils.java. what for this update ?. please confirm that you tested this update.. FirstLineOnWrapping.Use\nFirstLineOnWrapping.Ignore\n@rnveach , please confirm naming or suggest your variant.. @Nimfadora , please use booleans. It is ok to use booleans in inner code.. suppression should be used. codacy is suppressed. @Nimfadora , I still see TRUE/FASLE .\nplease apply suggestion from rnveach. PrintOptions.WITH_COMMENTS\nPrintOptions.WITHOUT_COMMENTS. > printFileAst(file, PrintOptions.NONE);\nthis line tell user nothing clear in what it is intended to ..... \nprint File Ast OF file with none print options.\nit should be written as \nprint File Ast Of file without comments print options\nso java code is printFileAst(file, PrintOptions.WITHOUT_COMMENTS)\nSo values should be:\nPrintOptions.WITHOUT_COMMENTS\nPrintOptions.WITH_COMMENTS\n@rnveach , please confirm.. this is just another insane code that blow mind on reading.\noriginal true/false was jest a flag in Tag class for ON/OFF type of tags. It is not a reporting option. It is a type of Tag.\nThere are only two types of Tag - ON and OFF. \nso make TagType {ON, OFF}\nso code should be like offMatcher match results in creation of OFF tag type:\nif (offMatcher.find()) {\n            addTag(offMatcher.group(0), line, column, Tag.TagType.OFF);\nTag should be changes to:\n- private final boolean reportingOn;\n+ private final TagType tagType;. @Nimfadora ,\nyou can ignore comment of rnveach, we had long conversation in private on this and he agree with me to some extend.\nNotes:\nnuance is that I do not plan to extend this Enum\nif that is going to grow options as set of independent options .... not a state/type (Enum value is whole state or type)\noptions is collection of some values {WITH_COMMENTS, NO_JAVADOC, HIGHLIGHT_SYNTAX} - so it will result in usage of BitSet type.\nI think that BitSet type usage is too much for this simple internal item.\nWhen we come to more options for printer and Enum will not satisfy us, we will do refactoring to better model.. please make it like:\nfinal IndentLevel expectedIdent = new IndentLevel(getIndent(), 0,\n                    getIndentCheck().getLineWrappingIndentation());. final String indetation = getIndent().getFirstIndentLevel() + getIndentCheck().getLineWrappingIndentation()\nfinal IndentLevel expectedResourceIndent = new IndentLevel(indetation);. @rnveach , do make sense.\nNon-Ttight-Html is like non compilable java file. TreeWalker throw error and stop processing.\nUnfortunately javadoc is never correct, so we need an option in TreeWalker like violateNonTightJavadocHtml with TRUE by default, if TRUE - TreeWalker will raise single violation on javadoc. Checks will decide by their setting to run on non-tight-html or not. There will be always checks that do not validate javadoc parts that could have HTML, or they simply remove all tags and keep only their text.\n@Vladlis , @rnveach , @ps-sp , please share your ideas about this proposal.. I did bad comment/proposal, I need to think about this problem one more time.. @rnveach ,  is it what you try to fix in #4844 ?. I do not like this to be in each Node (even as static).\nCan we move this map to special util class?  it will be immutable , initialized only ones.. minor but ....\nplease order fields as : lineNo, columnNo, tokentype, children. can we avoid protected methods ? they give illusion of immutability.\ncan we make Node classes immutable? . @MEZk , investigate a reason why we do not use ignoreOverriddenMethod of this Check. \nIf any of our Check requires a lot of supression is sign that there is problem in its design so we need to have issue on this and define it as a reason of suppress or it is misconfigration.. What is a point of suppressing of Checkstyle ?\nIt point on the problem, .... why we have field named as lineNo (bad name)? We are in 21 century so all that limitation for small screens and limits on variable names are in past. Please make a naming to let us read code without any comments or javadoc.. @MEZk , is it misconfiguration or new feature for Check ?. I do not like amount of UnsupportedOperationException , if we do not know what to do in such methods ..... is it better to put that to class implementations ?. @MEZk , misconfiguration or feature request ?. please keep reasonable order or fileds: root, parent, attributes, detalAst, ident, text. testing of abstract class by UT is big sign that smth is wrong in design.\nAll testing of abstract classes should be done through test of concrete implementations.. we looks like always do getRootAst and then new RootNode.\ndoes it make sense to have util method getRootNode.. I think better and more clear name is convertToArray by arguments and return type it is clear that it about DetailAST. @timurt , please provide comment to each \"assertXXXX\" as first argument, it will be enforced by TC very soon.\n@Nimfadora , please speedup fixes for messages, looks like other students try to give you more work.. remove such empty line, review other methods too for this.. > We do the same for AbstractCheck, AbstractViolationReporter, AbstractFileSetCheck, AbstractLoader to satisfy coverage rate.\nwe did this only we were in desperate state of reaching 100% state as quick as possible. Such pattern should avoid as much as possible.. @timurt , please rebase, TC should already validate this, it will violate all missed cases by you.. Abstract class should give all children common behavior, but in this case it is not. It gives simplification in amounts of methods to override but increase complexity of logic as engineer have to know all nuances of what is overridden and what is not. All implementations of NodeInfo should clearly define what they do on each method.\n\"copy-paste\" is better than dependency between two classes, as it cost you nothing in support. If some new method appear in interface you clearly know how each implementation should support it.\nIf some big group of methods are never be supported by us, we could make interface with implementations(java8) UnsupportedInpementationNodeInfo that have/implement common list of methods with throw expeption and class ClassNode implements NodeInfo, UnsupportedInpementationNodeInfo.\nIf list of common method is small - it just another sign that all classes should have to implement them separately.\n@rnveach , please share your ideas on this.. @timurt ,\n\nUnsupportedOperationException(\"Not implemented yet\");\n\nso .... unsupported or not implemented ????, if you plan to implement, please put in message issue number. @MEZk ,\n\nThus, from my point of view we should use ignoreOverriddenMethods option of the check.\n\ngood, please next time, be skeptical on each attempt to suppress, it should be always very good reason to suppress and ok to suppress if case is very special and very rare. In all other case we need to think on how to make Check better and raise less false-positives to user.\nthis option is enabled by default - http://checkstyle.sourceforge.net/config_naming.html#AbbreviationAsWordInName , do we really have there violation ? is it bug in Check ?. as it is required only for one module , lets use separate util class - XpathUtils. yes, looks like bug, I failed to find a solution for this.\n@subkrish , please update limit to be 34.. no idea, but they could do what ever they want for their dev process.\nI will use special commit (https://github.com/checkstyle/checkstyle/commit/724fcc53be66da409d51eb4e176b15b2727692a4) before latest commit to SNAPSHOT dependency, as they upgraded to checkstyle8.1 recently.. why you allow MismatchedQueryAndUpdateOfCollection to suppress , and do not use this in this PR.\nIf not required now - it is not required. . please make javadoc for this class, to explain reason of it. Suppressions for unused looks weird.. DEFAULT is weird and most unclear state.\nfirst of all we need to change name of option to ModuleCreationOption {IN_CHECKER, IN_TREEWALKER}. it is not clear, if import rules does not satisfy our need - they should be extended.\nSuppressions is last resort scenario or real exception from rule.. please make atleast  like:\nBufferedWriter bw = new BufferedWriter(new OutputStreamWriter(\n       new FileOutputStream(file), StandardCharsets.UTF_8)). make sense.. It will be very useful to users if you put this tiny nuance to header description the required header specified inline. Individual header lines must be separated by the strin..........\nplease also add that explanation to last example To configure the check to verify that each file starts with the header., or create new example. Users like examples more that boring manuals.. please add cases like:\n{@inheritDoc} mm, \n{@inheritDoc} mm.,\n{@inheritDoc} M m m m,\n{@inheritDoc} M m m m.\nand\nmm{@inheritDoc}, \nmm. {@inheritDoc},\nM m m m {@inheritDoc},\nM m m m.{@inheritDoc}. should be renamed to found ?. please avoid non required changes in such big update to code. In other files too.. 8.2 as minimum. please provide more tests, 2 test cases if not enough.\nPlease reuse all cases that are mentioned in issue. Please provide more tests for all tokens(methods, fields, classes, interfaces, ....).. @rnveach , please inline validatePackageNames to testPackagesFile and this suppression will not be required.. after one more review ..... this test is terrible and very hard to read, I will create separate issue on it.. @ps-sp , @Vladlis , @rnveach \nI forgot that javadoc support is still hold in each Javadoc Check with sharing ASTs between Checks by static variable - hack.\nwe need to keep this flag in that static collection of ASTs for javadoc. So Check before execution/traverse could make a decision.\nSo each javadoc Check should have property - violateExecutionOnNonTightHtml. Default value is FALSE, as I think most Checks will not care about this.\nProperty skipNonTightHtml will be unclear to user, as skipped execution is always mean 2 states: bug or by configuration. It is uncertain. . http://checkstyle.sourceforge.net/writingjavadocchecks.html#Tight-HTML_rules\n. Logic is not easy to understand, why first modifier is not modifier :) , it might be better to make method getFirstModifierAst() in this class, one day it will be moved to common Util class.. yes, I would rather use the same terminology.. I still see a lot of throwUnsupportedOperationException in AttributeNode.\nIf that functionality is not required for all nodes - please explain this in javadoc. If smb is overriding it, it can not stay in abstract class, and it is better to keep such methods in exact classes that are implementable.. actual is the same as real.\nplease rename realVariableDefNode to expectedVariableDefNode. Please do same update in all other places.. we need update in all other languages by google translator.. @Luolc , please add such classes to known list - https://github.com/checkstyle/checkstyle/blob/master/config/import-control.xml#L19 to disallow usage of them till we are on cobertura. Such update could be separate PR, to avoid mixing too much in one PR.. @ps-sp , please forget about term UnclosedTag, we should use NonTight.\nif (isTightHtml(commentAst)) {\n   processTree(javadocTree);\n} else {\n   if (check.doesCheckAcceptJavadocWithNonTightHtmlTag()) {\n      processTree(javadocTree);\n   }\n   if (check.doesCheckAcceptJavadocWithNonTightHtmlTag()) {\n       log(violation);\n   }\n}. please make a case like () -> .... and (A a, B b) -> .....\nthere are even more interesting cases like t1 -> t2 -> apply(t1, t2); (see it there)\nWe need more cases of singleline-nested lambdas, please review vavr project, they love lambdas.. > Do you mean lambdas that are nested inside expressions?\ninside Lambdas and probably few cases for inside expressions , just to make sure we do make difference between them.. check for NonTight should be simple check for flag that is returned from grammar.\nParser should return some flag that result of parsing is not tight html.\n@Vladlis , please review.. all throwUnsupportedOperationException in AbstractNode should be explained , to make it clear why we do not need that methods at all. Why non of child classes need it.. save .... compares .... ???. please make it private and make it clear in message that it this operation is not supported for all Nodes.\nAll child classes should have its own implementation.. Listener is not a module ..... smth is broken in terminology .... but most likely we do smth wrong here, and fix should be done not in this code.\nlets come back to original problem. Why you need to load custom Listener by checkstyle code ? . @ps-sp , and @Vladlis , both of you are not sure in performance problems. Did you try ?\nPerformance is minor problem in comparison to unreliable implementation.\nWhen I see code like:\nNESTED_HTML_CHILD_PARENT_MAP\n                .put(JavadocTokenTypes.P_TAG_START, JavadocTokenTypes.PARAGRAPH);\nand\ncase JavadocTokenTypes.P_TAG_START:\n                        isNested = toVisitParentType == JavadocTokenTypes.PARAGRAPH;\n                        break;\nAre you sure that you referenced here all tags ? ... how to not forget to add new known tag to such code ? \nit is big sign that rules of javadoc structure become in two places: in grammar and in java code. \nIt will never work well. It is error prone. Even now it looks simple, it will be disaster to support. Example is current paring of javadoc by regexps + java code ... it was simple to implement, is more simple to read, work on some simple cases ... BUT it NEVER worked and support of them terrible.\n@Vladlis , please find me online/cell for a call, to discuss this.. https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/DefaultLogger.java#L44\npublic class DefaultLogger extends AutomaticBean implements AuditListener {\nit might be used in config file only due to extends AutomaticBean .\nThis become a nuance , as always thought about config as way to define how validation should be done, but not way to define destination of output. That was a tasks of caller, CLI, plugin, application .... .\nIt is good question if we should continue to support this. I need to mediate about this concept for some time to make a decision is good or bad for checkstyle.. please make in EXECUTE, \"preserve\" mean a bit different.. lets keep it for now, but will be addressed at #4929. moved to  #4930. It was my mistake to allow such code to appear, mocks should not be used in simple cases like this.\nnew issue - #4931. lets discuss this in separate issue .... over customization mean over complication .... all that is to please \"test\" code ... hmmm, lets discuss in detail what you propose , I am a bit suspicious. . why do we need sonar docker file? How is it different from original from Sonar ?\nWe need to reuse existing sonar image that is hosted on dockerhub.. is it possible to define such variables in plugin config ?\nthe less scope of variables the better.. please split this file into two to let Wercker and any other docker based CI launch the same sh files as user.\nAll commands above this line are required only for manual execution on local(by human).. Do we really need html format ?\nit is not required for CI, we could put it to developers manual only when it comes to execute on local and review and probably share on github.io  .. why comment is left ?. strange ..... is it required ?. there should not be any grep, file should be located in certain place - \"~/.m2/repository/ecj-$ECJ_VERSION.jar\". before \"exit 1\" you need to \"cat\" report.txt to output to show user all violations.. eclipse is already 4.7 - https://www.eclipse.org/downloads/eclipse-packages/. such folders might already exist on local filesystem, please use \"-p\" argument to avoid failure.. please use set -e command to fail whole script if any command inside fails.. @soon and @sabaka , \nThere are some concern with such rule/inspection in web - https://stackoverflow.com/questions/30134272/can-javas-threadlocal-be-applied-to-a-non-static-field-if-yes-how \nplease provide a prove why we do not need static as it looks like should still work.. @sabaka , please do investigation on this problem and provide prove.. discussion is moved to #4956 .. I reopened issue 4857 to resolve item in IT area.\nI ok to remove this noinspection if TC is green, without it.. This is not clear ...\nas we changed first sentence to be \"The {@code ==} (equal) operator.\" in javadoc.\nso TokenUtils.getShortDescription(\"EQUAL\") should return The {@code ==} (equal) operator.\nbefore fix it was:\n$ mvn clean compile\n....\n$ grep \"^EQUAL\" target/classes/com/puppycrawl/tools/checkstyle/api/tokentypes.properties\nEQUAL=The <code>==</code> (equal) operator.\nafter fix:\n$ mvn clean compile\n....\n$ grep \"^EQUAL\" target/classes/com/puppycrawl/tools/checkstyle/api/tokentypes.properties\nEQUAL=The\nThat is not acceptable. There should be additional fix for TokenTypesDoclet to keep content of files \"the same\" by non tag values.. this suppression is not allowed.\nPlease fix the code.\nIt has 3 returns, 1st will be ignored as it is guard, 2nd and 3rd have to be fixed. In this method should be two return points in result.. @Nimfadora , \nmaven central is stale ... last artifact is of 2016 year.\naccording to https://bugs.eclipse.org/bugs/show_bug.cgi?id=499019\nlocation that Eclipse team use is at https://repo.eclipse.org/content/repositories/eclipse-staging/org/eclipse/jdt/org.eclipse.jdt.core/\nPlease use latest version from there.. docker start/stop will done by wercker or any other CI we choose for this. So you need this to be done in separate wrapper shell file that wrap execution of shell file that do all configration of sonar and validation.\nYou can reuse \"checkstyle/sonarqube-maven-git\" image that we use at https://github.com/checkstyle/sonar-checkstyle/blob/master/wercker.yml.\nCI docker config file will take care of \"git clone\" for checkstyle repo inside docker container.\nWrapper shell file(file that will be used only by humans) will run docker image and do clone of sources inside container and execution of validation shell file. As it finish do stop/... for docker .\nValidation shell file will be used by CI and Wrapper shell script in the same way. ALL sonar nuances should be in that validation shell script.\nYou need to have a validation shell file that is executed inside a docker container and do:\n- configure sonar server by configs from checkstyle repo\n- execute validation against checkstyle sources \n- check result of validation.\n- print some output \n- return exit code\n. because of https://github.com/hcoles/pitest/issues/368. do we really need this change ?. ok, please do UT with reflection(as it private) call of this method to cover it.\nPlease put javadoc comment over test method to explain why it cannot be functional test.\nOnes we come back to this method during grammar update, we will make it functional.. please explain in single line comments why this required.. please shorten the link length, I doubt it is critical part of test case.. do we really need this file be that big ?\nif you focus on some CR  catch, file could be probably minimized.\nYou can add new line symbol at the end of file, to avoid suppression - it is not a point of testing here.. we could avoid this, see my comment on InputFullOfBlockCommentsCR. please explain in javadoc comment over method why it is not possible to make a functional test.\nreflection usage should be avoided as much as possible.. we recently decided to force code with mocks to have javadoc comment explaining a reason why it impossible to make functional test. This case is approved to me based on mock, lets just left a message to future maintainers/contributors.\nplease add javadoc comment on method.. please add javadoc comment to explain mock usage.. @Nimfadora , do you have problem with this ?\nwhy is it skipped ?. -err: should be used. to trigger build error.\nSe my comment about this in previous review.. latest version of ECJ should be used.. please move sonar to special profile.. we will not use it in wercker for now, as wercker is busy with more critical stuff.\nPlease remove this file and place it in issue as a comment.\nWe will use it ones we come close to integration to CI process.\n. What does it mean \"default\" ?\nIt is a prarser option , not a listners.\nShould be:\nParserErrorOption {VIOLATE_NON_TIGHT_HTML, ACCEPT_NO_NON_TIGHT_HTML}. we should have:\n- parse problem - when no Check could be executed.\n- non-tight - some Check could be executed\nwe can not mix in ParseErrorMesage that states.\nso before execution we need to recheck that \nresult.getTree() != null &&  result.isTightHtml() && doesCheckAcceptJavadocWithNonTightHtml(). we can do both actions: execute Check and do violation at the end.\nCheck do know better how it should be launched.. we will do special Check for this later on. We can make separate issue on this.\nRight now we do fix in \"checkstyle framework\" to help all Checks to execute on expected/stable AST.. > \"ecj-$ECJ_VERSION.jar\"\nwhy so special ? to need \" \"\n\nftp-stud.fht-esslingen.de/pub/Mirrors\n\nWhy not https://repo.eclipse.org/content/repositories/eclipse-staging/org/eclipse/jdt/org.eclipse.jdt.core/3.13.0.v20170614-0247/org.eclipse.jdt.core-3.13.0.v20170614-0247.jar ?. please remove commented debug code. error or enabled ?. please rename it to \"eclipse-compiler\".\nplease add it usage to .travis.yml, as integration is easy here:\n```\n$ git diff\ndiff --git a/.travis.yml b/.travis.yml\nindex d6c5a12..df21c0d 100644\n--- a/.travis.yml\n+++ b/.travis.yml\n@@ -58,6 +58,12 @@ matrix:\n         - DESC=\"findbugs, spotbugs and pmd\"\n         - CMD=\"mvn clean compile pmd:check findbugs:check spotbugs:check\"\n\n\nfindbugs, spotbugs and pmd (oraclejdk8)\n\n\n\njdk: oraclejdk8\n\n\nenv:\n\n\nDESC=\"eclipse static analysis\"\n\n\n\n\nCMD=\"mvn clean compile -Peclipse-compiler\"\n+\n     # Releasenotes generation - validaton\njdk: oraclejdk8\n   env:\n``. we have this comment insonar.shdo debug on local - it is enough.\nthis comment should be removed.. please usejq` shell tool to grep json.\nexamples are at https://github.com/checkstyle/checkstyle/blob/master/.ci/travis/xtr_pr-description.sh . please move this file to \".ci\" folder too and make it executable before pushing to repository to let git store this attrtibute and ease its usage .\nPlease make a comment here that file is for manual execution on local only.. please make this file as shell file (not a source) to allow multiple execution on running Sonar instance.\nplease make file executable.. > Tests can be rewritten if it is wrong.\n\n\n\nconfirmed. Just make it work.. if exception is rethrown, local context should be collected to exception:\nthrow new IllegalStateException(\"Unexpected xpath query: \" + xpathQuery, ex);\nas there is no guaranty that cause exception will print it.. put some context to wrapper exception.. @Nimfadora , here is a nuance. \nAll checks have to clear all internal and non-property fields in beginTree method to make sure that no context is shared between two files validation. For all files  we create only one instance of Check object, so on beginTree it has to reset all to initial state. \nTo reproduce a problem, please launch Check on few files. \nYes, we usually test Check on one file only in UT, but in real life one instance of Check is used for all files of execution.\nYou need to make UT that executes Check on two files.. We should rely that visit a leave methods are called.\nBut there is nuance , if any exception happen in logic of Check, check will accumulate incorrect state.\nIn Checker we have option haltOnException that might not fail execution on first exception. So next file will be processed, and all Checks need to reset their state on beginTree. In other case there might be extra false positives and complete mess in validation after exception.\nThis situation is impossible to reproduce, such code is good to have.\nLet's make a method resetCheckInternalState and such non required cleanup in it, additionally configure pitest to skip such method at all.. We need make a note that this Check is not a good practice, but some style guides use it.\n. > Current XDoc verification won't allow this as we ignore all properties inside the base classes by default.\nlets make a hack in that test and do workaround/skip extra items from this class. We can do proper  fix in sepparte issue.. Do we need quotes ? Variable should be resolved without them.. Just ./.ci/sonar.sh. I still see this file in Commit, please remove. No need to remove this file. No need in this variable. Just do cat of result file and redirect it to jq. please provide comment line above patch in format \"# till \". > to assert no violations\nyes, but Check should raise violation on any call of visitToken , that will allow to use general verify method. counting of calls is not preferable.\n\nto assert method calls number\n\nto assert violations from Checks, not a numbers. . @Vladlis and @rnveach ,\nthe more I look at this method name the more I dislike it.\nIs it better to simply use acceptJavadocWithNonTightHtml ?. do we need this \"\\\" ?\nplease remove.. please remove extra variables.. please make folders right before your launch compiler.. lets keep our copy in the same folder as on server - \"~/.m2/repository/$ECJ_MAVEN_VERSION/$ECJ_JAR\"\n\n! -e\n\nshould be ! -f. why sonar is not in personal profile ?\nyou do not use \"assembly\" profile in your script, so just remove this config at all.. new issue should be created. \nIt might be done on purpose previously as it was cleat that nobody in the works knows javadoc tag syntax.\nas we become more strict in this area ... Checks should be updated, should be done completely separately after this PR is merged.. I think it is better to ask Module for converters - getTypeConverters and do all proper registration internally in checkstyle. Check should not be aware of how tat will be used, Check only provide converter for his types. The same as we do with Check's config resources for cache.\nDoes it make sense ?. \"to allow\" is not good wording. we have violations or no violations.\nPlease add code example, users like them the most.. please make it 8.3.\n8.2 will be in few days, but there will be some changes and I will request testing report.. name of property is completely different with description .... sign of design problem.\nIs it only make such effect on validation ?\nexisting description is hint in what case it might be useful , but not description of property.. lets make it getPropertyTypeConverters\nyes, it should be a map.. I need good reason why this can not be tested by verify.\nUsage of isStatefulFieldClearedDuringBeginTree is ok , only when you prove that it is impossible to cover is logic is working properly.. I need good reason why this can not be tested by verify.\nUsage of reflection is ok , only when you prove that it is impossible to cover is logic is working properly.\nAll should be described in comment above this method.. I need good reason why this can not be tested by verify.\nUsage of isStatefulFieldClearedDuringBeginTree is ok , only when you prove that it is impossible to cover is logic is working properly.. I need good reason why this can not be tested by verify.\nAll should be reproducible by java files, if not possible - it is dead and useless code .\nif still good to keep - test method should explain usage of hacked test methodology. I need good reason to for this type of tests.. it is not ok.\nIt is possible to launch OneTopLevelClassCheck on few files that both have several problems and withtout cleanup of collection second will give unexpected violations. . please simplify this file to keep code that is actually required for test.\nAll comments should be removed for sure.. it is not ok.\nif mutation is like this , so isStarImport will always return false.\nIt is not ok that method could return false always and that is not noticeable - please recheck tests that do testing of star imports.\nOr make a mutation as pitest did and launch checkstyle-tester/diff.groovy to find test case for you.. @MEZk , does it make sense to forbid such string by http://checkstyle.sourceforge.net/config_coding.html#IllegalTokenText ?. instead of using reflection , please use the same instance of logger to \"process\" another file and make sure amount of violations in output is 1 for both runs.\nReflection should be avoided as much as possible.. @soon ,\nif you use the same outputstream - it is expected that wrapper content is duplicated.\nOnly user know how to manage outputstreams. in UT, it is better to not reuse streams and recheck that results of 1st run is identical to output from 2nd run.. I did not noticed this change, it might be recent due to my request to make two executions on the same Logger.\nmaking it public is not ok.\n@soon , we need to come back to test method that do execution on same logger and the same stream and verify that on second execution we have two lines with error line=\\\"1\\\" column=\\\"1\\\" severity=\\\"error\\\". @Nimfadora , after investigation of code.\nReason to test method to explain reflection usage :\nwe can not cover this mutation because it force all imports to be non static, but static imports are ignored, so we will not see any affect on validation. We could remove this method at all, and will work correctly as we can not use class with name \"*\", but in this case internal collection will have short names as \"*\" that will not make problems, but will be weird in debug. \nTODO: make a UT that call this method by reflection and provide argument artificial AST but correct by structure for \"import com.mycompany.*;\". . confirmed.\nformat: <p>...</p> is expected. in future this Check will work on XHTML-like format, and all of our javadocs will become XHTML-like. Event it is not favorite form for HTML.. @Nimfadora ,\n\nThis method is not used in the project\n\nsetExcludes method for Check property - checkstyle.sourceforge.net/config_imports.html#AvoidStarImport excludes\n\nAs we cannot reproduce situation when we set excludes several times during one run\n\nplease try to call  check.configure(checkConfig); two times with different checkConfig, validation should be done on config that you did second time.. Check property- http://checkstyle.sourceforge.net/config_imports.html#IllegalImport illegalClasses. yes, \nReason: checkstyle do not allow to make a tree of modules manually , all should be done by configuration declaration. Two configurations result in two Check instances. NO way to reconfigure Check after execution is validation is written in non hack way (by c-tor of Check and manual configuration of it). We can execute validation by whole Checker(with all childs) not by usage of certain Check. So there is way to reproduce this mutation. \nSo lets remove this line completely from Check.. please explain this +1 and -1 in comment. It looks scary without comment.. @Nimfadora , yes, just remove that unnecessary collections cleaups.. please indent this line by (. one test is not enough, please add test that do cause violations with synchronized.\nand one more compicated test with synchronized nested in if for example or smth similar.. @ps-sp , please use any accessible message key, you do not really care about content of message.. ....... ok, agree, lets remove this code block.. it is due to @see <a href=\"URL#value\">label</a> see description at http://docs.oracle.com/javase/7/docs/technotes/tools/windows/javadoc.html#see\nbut agree that grammar give a bit more freedom than simple a tag.\n@ps-sp , if javadoc complains about non expected tag as see there , please create separate issue on this to update our grammar to allow only a.. i think it should be | RETURN_LITERAL (WS | NEWLINE)+ description?. http://docs.oracle.com/javase/7/docs/technotes/tools/windows/javadoc.html#see\nit is @see \"string\", description is not allowed as html tags are not allowed in see. Please add example of usage. No interactions please. Fail with error if smth is not defined. please remove filed classDepth completely from UncommentedMainCheck and use currentClass in all cases instead. \ncurrentClass == null === classDepth = 0\ncurrentClass != null === classDepth == 1. @Nimfadora , please , as we need to change this PR for other reason.. hmm.. for some reason gihub lost my comment for this topic....\nSummary:\nWe will no do any changes related to multi-file support now, it is out of context.\n@rnveach , please create separate issue for this.\nOur focus is to enforce pitest over code, so we need to focus on coverage with minimal changes to checks or other checkstyle.\nif duplicated event missed, it is ok.. please add commend \"till\" above this element too, even it is the same, in future it will be not clear what to remove wihout it.. separate ==> others. \"it is\", it is not clear who will guaranty this. lets use \"Checkstyle\"(too general) or \"Checker\".\n\"will be \" ==> \"is\" as it is general rule. Please fix that in all other cases.. module is: all that is referenced in XML as class - AuditLister, Filters, FileFilters, Checks, Composite Checks(TreeWalker).\nIs it really for all of them ?\nIf for all - please do not use \"the Checks\" in further doc at all. If not - please use right terms.. > clones\nwe we still do clones? I though we already discussed that this is not requied.\n\nequal (but not the same) configuration\n\ndoes it really matter  to mention  ? Checks arguments should be (usually) immutable.. please make a Note: Checks with such annotation will be executed in mode how all Checks worked before MT mode is introduced.. Checkstyle is not a \"application\", checkstyle is library.\nPlease use \"audit\" or processing instead, we need to use terms that we have in code.. if state is global, single instance for whole execution, why Check should care about other threads and thread safety at all ?. please add link to issue.. do we need this best practice to be mentioned? non of Checks is following it and will never do.\n\"all mutable fields\" .... all Checks properties are fields.. all further text is a \"Note:.....\". visitToken should initialize currentClass and leaveToken should reset it to null.\nIt should work, but it is better to recheck .. just place such examples to bat and shell file. By example user quickly see how to use it.\nPlease place all that bat/shell files to ./ci folder.. > \n$ ./idea_inspection.sh\nbash: ./idea_inspection.sh: Permission denied\nplease do chmod u+x ./idea_inspection.sh and push to repo file that will be ready to use.\n\n\n$ ./idea_inspection.sh\n./idea_inspection.sh: 16: ./idea_inspection.sh: [[: not found\nIDEA_HOME variable not found.\nfirst error is not expected.\n. please use bash. please add example of usage by single line command.\n\nMy try:\n```\n$ export IDEA_HOME=\"/home/rivanov/java/idea-IU-171.4249.39/bin/idea.sh\" \n$ echo $IDEA_HOME\n/home/rivanov/java/idea-IU-171.4249.39/bin/idea.sh\n$ ./idea_inspection.sh\n./idea_inspection.sh: 16: ./idea_inspection.sh: [[: not found\nIDEA_HOME variable not found.\n```. I need explanation on this magic number.\nWe need to leave comment there.. ok, could be done in separate issue - #5064. \"We should\" ==> \"Required for pitest coverage. We should .....\"\nanotherStringVatiableName ==> anotherStringVariableName\nPlease add:\n// Example: length of \"String s=d;\" is 11 symbols.. ok, lets cover such case by reflection, comment over test method should have explanation on ability to reproduce it in testing environment(haltOnException) or incorrectly implemented executor of checkstyle.. anotherStringVatiableName is still mispelled\nI do not see exmaple line that I requested to be added.. it might be better completely remove this method and inline it content expressions where it was used.\nName of method and it body and javadoc are mismatched.. ?? what for his comment there ?. @sergileon , you introduce compilation dependency for whole project - it NOT ok.\neven you make a scope - \"test\" it will not be ok as a reason is just to keep out inputs compilable.\nPlease recreate annotation in our resources by almost \"copy-paste\"(minimized). . > Is it correct to name them as \"checks\"?\nyes.\n\nShould we also rename annotations?\n\nyes, if you target only Checks.. > How they should be named?\nnew instances.\n\nShould I remove this note?\n\nplease extend that line and mention that there are arrays.\nBut to my mind it is Check responsibility to make a copy of user defined properties to be not affected by mutual values.. it is https://github.com/checkstyle/checkstyle/issues/3540. please show me example of Check with all final fields, I want to be surprised.\nFirst check from list - https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbbreviationAsWordInNameCheck.java , almost all fields are potentially mutable.. Please provide example for this case, users like examples. Nobody have deep understanding of our AST structures.. Whitespace package is not yet enforced pitest coverge in CI , please generate report and place screenshot that you covered all your changes. please make it MSG_UNCLOSED_HTML_TAG = \"javadoc.unclosedHtmlTag\"\nto make it more clear and certain.. please make it single line.. please put there @NotNull to be close to real life.\nAll cases from below please remove, they are too syntactic.\n\"//Correct\" ==> \"//No violation\". \"the check will skip\" ==> \"the check will skip validation for space(s)\". Check does not ignore annotations, it is ignoring spaces.. We need explanation in javadoc for PACKAGE_CLASS, why we can not have PACKAGE, CLASS and PACKAGE_CLASS.\nI personally thought that we will have 3 node types to make it clear where we are certain and where we are not.\n. please explain Dot2 and Class2 removals.. @djydewang ,\n\nBecause some test classes have been loaded and their name are not in the collection\n\nnot is collection, it mean, that it should not be loaded, instantiation should fail, like it is defined in test.\n\nI use function isLoaded\n\nI did not expect such code to appear, please explain why it is required in a bit more details. . please explain this in javadoc. \nUsers will ask about this number of time - it is not obvious.. ok, explained. Loading of Checks that are not in main sources, should be loaded by full name, if createModuleConfig  do this in different way that should be changed.\nSuch cases should be instantiated by createObject .. lets not change this for now.. as you start to write comment - it is sign that smth wrong id in design.\nplease rebame method to isSameGroup(groupIdx, isStatic).\nand place where it is called should be like:\nif (!beforeFirstImport && line - lastImportLine > 1\n                && checkSeparatorInGroup(groupIdx, isStatic, line)) {\nto keep all that mess with beforeFirstImport and lastImportLine in one place.. please make test case for more than one empty line separator.. comment is not a blank line.\nWe need to update documentation to make it clear that we treat comments as empty lines too.\nhttps://github.com/checkstyle/checkstyle/blob/master/src/xdocs/config_imports.xml#L1230. this change is not expected.\nIt was valid violation before your change, it should stay like this.. there should be violation on 14 and 17 lines too.\nIf separator should not between groups - all blank lines in imports should be violated.. please remove that note at all, this javadoc is not post of best practices in MT . What is a point to create thread(s) for this ?\nIf there will be two TranslationCheck in config, do you plan to create two threads for them ?. @soon , is it fixed ?. @soon , is it fixed ?. \"a\" ==> \"foo\".\nDo not show bad practices to user, it is even hard to read.. \"a\" ==> \"foo\". we need to update https://github.com/checkstyle/checkstyle/blob/master/src/xdocs/config_imports.xml#L1292. good catch.\n@djydewang , remove such changes. If you need more tests - create new.. ELLIPSIS is not \"covered by GenericWhitespaceCheck\"\nplease put it above this comment.\ncommend should be \"we prefer no space around '...' the same as '[]'\". comment for \"ELLIPSIS\" should be \" '...' is almost same as '[]' by meaning, google style never define it clearly but in all examples there are no space between type and '...'\". please add this token to google_style too.\nIt is not clearly defined in style guide but, it is nonsense, most engineers even do not know that space is possible by syntax.. default value for separated is FALSE - http://checkstyle.sourceforge.net/config_imports.html#ImportOrder\nas you make it TRUE , you change meaning of UT.\nIf scope of your issue it is not required.. please try to inline this method to doVisitToken, it is better to keep madness  of !beforeFirstImport && ...... && line - lastImportLine > 1 in same method.\nis some complexity rule is not allowing it, please rename it to \"isSeparatorInGroup\". . please revert all such changes. \nDo not change other UTs meaning, all combinations or options/properties are ctitical in testing.. What for you put final modifier to method ?  It is not required.\nPlease remove this method and put I'd content in visitToken method. isThereSeparatorAfterLastImport vs beforeFirstImport .\nMethod name and description is not reflecting real code - please name method properly. ok, it is better to follow CyclomaticComplexity.\nplease continue with method renaming.. No need to add it, fact that it is missed is unrelated issue.. please put \"//WARNING\" to lines where violation is expected (see examples above).\nThis file is used for certain configuration, so it should be clear by reading Input file where violations are.. throw exception from c-tor is not good. Object creation should be safe.\nPlease move this generate.\ngenerate should not handle IO exceptions and should throw it to caller. \nThis level of application do not know how to process exception and how to wrap them.\nor\nmake c-tor to receive ready to use FileText object.. 0) \n\nisMatchingByLineAndColumn\n\nWhat about IDENT , as you do  ast.getType() ! = tokenTypes.IDENT .... please do not cheat in names.\n1) as all parts of expression is combined by &&  - please put the most simple parts to be executed first.\n2) 1+ ...... that is very complicated expression and it damage ability to read it clearly. WE need to make it singleline.\nplease make it like:\nast.getType() ! = tokenTypes.IDENT\n&& ast.getLineNo == lineNumber\n&& expandedTabColumn(ast) == columnNumber. @ps-sp and @Vladlis , second is better.\nGoal of AST it to slice and dine all content to let user no reason to parse smth.\nBUT , .... HASH is already par of REFERENCE ... You probably meant:\n--PACKAGE_CLASS -> PACKAGE_CLASS\n    |-- IDENTIFIER -> package\n    |-- DOT -> .\n    |-- IDENTIFIER -> class\n    |-- DOT -> .\n    |-- IDENTIFIER -> nestedClass \nlets discuss this in separate issue.. This is not ideal, update for TreeWalker is trivial, most likely is covered by one UT. \n@timurt , can you copy test that do coverage for mutations to TreeWalkerTest ?. @timurt , please explain a reason of this update. we can not change integer value of tokens.\nIt will seriously damage compatibility.\nPlease explain this change.. I created issue #5139 .\n@ps-sp , please fix it first, and rebase this PR after fix, to make sure we are not going to damage a lot of stuff.. @timurt , please make a comment like \"till .....\" to make it clear when it should be resolved.\nAll modules HAVE to be used in our config, if there some problems it is always till some issue is resolved/implementated , but there are always a reason.. such change is not expected....\nif content is already encoded/escaped (\"<\") we should skip escaping.\nthe same for other changes ..... @crud3 , please follow violations from CIs, all of them should be satisfied (green).\nit is not allowed to use PMD suppressions by annotation.\nWe need to disable such PMD rule completely in our project as we are library and static is preferable in final applications only. \n. good point. please remove this change, lets keep only required changes.. @AADudkin ,\nas problem is reproducible by CLI - there should be UT case, exactly as use provided and at least at MainTest , but ideally all should be at JavadocPackageCheckTest.java . . I do not expect any chnages in API.\nPlease explain your fix.\nI expect changes only in JavadocPackageCheck.java.. should be \"message\" as it is not a list. \"protected void processFiltered(File file, FileText fileText)\" is a signature that all Checks have.\nSo it is still possible to call file.getParentFile(); and got NPE. \nSo this is not a fix for a problem in general, it is just custom fix for custom Check.\nIf that is not a fix , why we change api ?\nIt is a problem of certain collection + nuance with file.getParentFile. Check need to handle it himself as it did before 8.2.. there is expression and it is one .... fact that it matching for many is files/Checks or any other content is a different story (it could even match to none :) ).\nlines/columns are plural because of ranges and lists.\nLets not follow bad naming here, fortunately \"id\" was named correctly.. Please fix Check in scope of this issue.\n5196 should be done as we finish elimination of all Holders and complete merge if AST filter. @ps-sp , please explain this change. Token values should not change.. By changes like this you potentially make problems too all other Checks (do not forget about thousands of third-party Checks).\nhttps://stackoverflow.com/a/1099370/1015848\n\nConverting from a path to a canonical path makes it absolute (usually tack on the current working directory so e.g. ./file.txt becomes c:/temp/file.txt). The canonical path of a file just \"purifies\" the path, removing and resolving stuff like ..\\ and resolving symlinks (on unixes).\n\ncanonical is purified absolute path. Why we should do this ? it is not Checker business. Some path given to Checker and it should just propagate it to Checks with minimal changes (user always right).\nFix should be in Check only.. please rename it to \"useBruteForceModuleLoading\".. please rename it to \"useBruteForceModuleLoading\".\nPut in javadoc reference that \"it is required for eclipse-cs plugin\". createModuleByBruteForce. can we inline this method in caller method ?. can we make code like:\nif (instance == null) {\n            instance = createObject(name);\n         }\n         if (instance == null && bruteForce) {\n            instance = createFromFullName(name);\n         }\n         if (instance == null) { \n              // report problem ....\nto make it clear that bruteforce is last resort.. @kazachka ,\nCyclomaticComplexityCheck only tells that whole method become a bit complicated, but it does not force you to do mess in code that you introduce.\nEach comment over code show you that it first candidate to be moved to method.\nI would move to special method last block of problem reporting - \"createUnableInstantiateException\", ... or any other big IF block in this method.. Please move update for spaces in separate PR , I will merge it quickly.\nThis PR is going to be complicated, lets minimize unrelated changes.. please add comment here \"// type could be in fully qualified form, so we go up to Type token\". We can not change Tokens values at all, each change mean bracking compatibility with all custom Checks in this world. All projects with custom Check have to be recompiled again over new version of Checkstyle. If not recompiled , it will result in really weird behavior of Checks... nightnare.\nIt is too much affect on all users ..... \nLooks like the  only way out is keep values hardcoded in api./JavadocTokenTypes and have build in hardcoded map of ANTLR values to JavadocTokenTypes  values that will be used in JavadocUtils.getTokenId() method that is used on creation of JavadocNodeImpl.\nor ... split ll values in rages of ID , simialr to RULE_TYPES_OFFSET , can we archive smth by this ?. >\n// find the name in hardcode map\ninstance = createFromExistingName(name);\ncomments are to explain code, comments for method - is sign of bad name design of method. \ncreateFromStandardCheckSet ?. when I read this code .... I do not understand what is brute force mean here.... it is naming desing problem.\nsearchModuleInAllPackages ... createModuleByTryInEachPackage(packages, name) ?. design on setters is bad design. User should not have ability to change this option in runtime, so it is defined at the beginning and last for end of run time.\nPlease put this option to c-tor. \nAs you make it c-tor option, TC will complain about boolean usage in public method, with unclear meaning. It will force you to create Enum with options {Discover, DiscoverWithFallbackToTryInEachPackage}. Discover is default.. report only on import ordering.\nFact that import is duplicated is not this check business.. >  only the last one will be used\nwe need to change wording here, as in example below last comment with javadoc identifier is /** Not a javadoc (ignored). */\nWe need to define order/direction for \"last\" - from bottom to top.\nhttp://www.oracle.com/technetwork/java/javase/documentation/index-137868.html\n\nA doc comment is written in HTML and must precede a class, field, constructor or method declaration.\n\nwe might need to add to this ... \" (above annotations) \", so it will be:\n\"...character and placed above above annotations of class (if preset) definition, ....method definition or field.\"\n\nor annotation field definition.\n\nis a weird term from checkstyle ast, jdk does have such term - https://docs.oracle.com/javase/specs/jls/se8/html/jls-9.html#jls-9.7 , so lets avoid it in public\n. in this PR please focus on passing CIs. then the comment ==> then the Javadoc comment. 1)\n\ncomments\n\n\"multiline comments with javadoc identifiers\". \nAll of them are comments, looks like javadoc ..... but we call javadoc comment only one that most matching our criteria.\n2) \n\nonly the last one will be used\n\n\"last\" is not good word here, as in your example last is /** Not a javadoc (ignored). */ , fact that it is separated by new line is not countable.\nLets use \"most nearest on top(above) multiline comment with javadoc identifier\". . please add in front:\nJavadoc comment contains of: summary(first) sentence, documentation section, tag section.. as this Check does not have properties, please add trailing comment \"// violation\" to clearly define place of violation.\n. @Vladlis , please step in, and make investigation on what we can do keep values of token on same values, independently from grammar change.\nI am over busy with other issues at project.. @pbludov, please follow simple rule that save a lot of time, please reply to each review point as \"done\" to let you recheck that you did all and send us clear signal that you are ready for review, and new commit is not WIP.. \"not\" in name is not good.\nI see that you tried to be consistent with similar method, but let's not doing this, one day we will refactor it too.\nOne day we will have a Check for this.. approved.. by default your Check do nothing.\nWe have to enforce code style in our code , we have to eat food that we produce.\nI propose to enforce top and bottom empty lines for Class/Interface\n\"no-empty-line\" for IF, While, .....\n\"EMPTY_LINE_ALLOWED\" - for the rest - method,ladba,.....\n@rnveach , please confirm that you are ok with such new style.\n@pbludov , as you provide such change to config, build will fail, please send it as is withtout fixes to let us review violations and adjust config if required.. I think default option should be to enforce top empty line , it is same as http://checkstyle.sourceforge.net/config_whitespace.html#EmptyLineSeparator , and we need to make Check doing smth in code in other case user will be in illusion that activated check just did not found any violation.. > expected by the Check by default\nshould be  \"expected by the Check by default (no violations)\".. EmptyLineWrappingInBlock vs topSeparator . Naming inconsistency.\nLets name check WrappingInBlock and properties \"topWrapping\", \"bottomWrapping\"\n@rnveach , please review this proposal and confirm it or propose your names.. each config example should have java code block that show by trailing comment location of violation.\nUser love examples, it help better then any explanations.. I do not see a reason of this. Please explain.. please move all this huge Switch to method and return leftBrace. Nobody is interested on how you get this AST node - hide it in method.. we need to move all log methods to visitToken method to let read algorithm easily. Please do.\nWe need to read whole algorithm of processing as english text in visitToken method.. this should be in visitToken and skip execution completely is it is defined by user.. all lines above sounds like a static method to get lines count.. please define why it can not be changed, \"because it is API\" ?\nshould we make AbstractAutomaicBean ? and deprecate AutomaticBean ?. hmmm, please propose a name ... and lets move this to separate issue as it big update it should explicit and ease to catch in our releasenotes.. >I am fine with this even though this is not usually my preference.\nThis the only place for empty line that I am ok with, even I it is not my best preference too. But it is ok.\n\nI disagree with this. We should enforce some type of style for ALL tokens. \n\nOk, just tried to show usage of this option to users. While smart logic that could define whether method signature is interfering with code in body\n\nIMO, If code looks too packed together, it is because user isn't putting any blank line space between instructions and are crowding them together.\n\nMultiline Method signature and condensed first line is problem, see examples in mailist. But this is off topic discussion.. > Should they have be wrapped with empty lines?\nFor now let's keep them same as top classes. If check become popular users will request new property.  Inner class should follow top class format, as it could be easily move out to become top.. > whenever we want to add a new instance. \nbut having module that do nothing could cause that illusion that it works and code comply. User is investigating configuration only when he have problems with validations that annoy. Use activate check, it give him bunch of violations, user do not like violation, user change Check.\n\nI believe we have some checks that actually do nothing unless configured otherwise.\n\nyes, but only we completely not sure what to check, like illegal text, ...... > LineBreakForBlock vs leftBrace and rightBrace\nthis is really good point, at it show misconception of original idea of Check - it tries to rule both concepts(for right and left curly) in one check.\nLooks like we need two Checks - LineBreakForLeftCurly and LineBreakForRightCurly as we did for LeftCurly and RightCurly . So user will more consistent view.\n@rnveach , @pbludov , does it make sense ?\n. > Should the check report a violation or not? \nno.\n\nlooks reasonable to me\n\nok , please put this documentation. One day in future sb will ask us to make it configurable by property.. looks like one more point for having two Checks for each brace.. >(different configs for different projects)\nPlease generate few reports over checkstyle code to let us be more confident on what tokens to validate by what options.. we allow this suppression only till https://github.com/checkstyle/checkstyle/issues/5338 as it is used only for AbstractLoader.\nones this issue fixed, this allowance should also be removed.\nPlease update comment.. >is just renaming and moving the class\nDoes it make sense to make it non abstract in same #5338 issue ? Just remove abstract modifier.. lowering general mutation threshold is not ok.\nif it is lowered by increasing of of coverage .... might be ok but it is better to enforce survived in certain files only. Please see post processing commands.. @djydewang , please recheck top mode, if issue exists we need register it, if fix is complicated to do now.\nI will be ok to merge even without TOP fix, as issue was for bottom only.. maven-checkstyle-plugin and eclipse-cs plugin does not use this method, so I will not mark it as bracking compatibility.. it is better to avoid ROOT.. > here for an unknown reason.\nThis is not good comment.\nplease read https://github.com/checkstyle/checkstyle/issues/5141#issuecomment-352189778. I am fine with update.. will be 8.6, fix all other appearances. instead of \"code\" please make HTML link to filter documentation. please make a note what issues blocks support for other Checks, please add links to github issues.. this file is not used in project, #4877 , sorry that we did not find time for cleanup.\nplease remove this update.. link to config/suppressions-xpath.xml might very useful too, as xpath creation will be most complicated part of Filter.. please mention in new P tag, that CLI have options to print Xpath, to ease usage by user.. @pbludov , please move this out to separate issue, please recheck existing issues.. I am ok to skip this update(do not change) in scope of this issue, could be done in separate issue.\nTo keep this PR only on target update.. I do not expect removal of supported tokens, please explain this update.\nthey are still present in getAcceptableTokens so this is really weird. \nRegression testing will be required . to avoid violation of JavaNCSS, you need to make some case blocks like:\nstartToken = xxxxxxxxxxxx(wwww);\nbrace = xxxxxxxxxx(zzzz);. please do, as reminder to not forget.... I already forgot.. please create separate issue on this , we will discuss it later with @rnveach .\nIt is ok to skip this point from todo in this PR.. all versions should be 8.6. [ERROR] COMPILATION ERROR : \n[INFO] -------------------------------------------------------------\n[ERROR] ....checkstyle/checkstyle/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressWithPlainTextCommentFilter.java:[59,8] com.puppycrawl.tools.checkstyle.filters.SuppressWithPlainTextCommentFilter is not abstract and does not override abstract method finishLocalSetup() in com.puppycrawl.tools.checkstyle.api.AutomaticBean\n@MEZk , please rebase.. in this comment, I proposed this name - https://github.com/checkstyle/checkstyle/issues/4841#issuecomment-320483860\nbut after site generation I read names:\nSuppressWithNearbyCommentFilter\nSuppressWithPlainTextCommentFilter\nand I was not sure what this filter does .....\nSuppressWithNearbyCommentFilter - looks like AST based filter as part of language comment is in name.\nSuppressWithPlainTextCommentFilter - why \"nearby\" is missed ? why comment is present  but user can define what ever he wants to be a marker to suppress (not only by comment)?\nLooks like name should be SuppressWithNearbyPlainTextFilter.\n@rnveach , please share your ideas.. good point, as we do analog of SuppressionCommentFilter\nhttp://checkstyle.sourceforge.net/config_filters.html#SuppressionCommentFilter\nname SuppressWithPlainTextCommentFilter looks ok.\nLooks like \"with\" mapped by mind to not right filter.\n@MEZk , please skip this review point.. please make line like \"this P tag is not closed\". make text \"P closed unexpectednly\".\nin text we need to prepare user for ERRORs, and explain why.. please remove this, do not distract users from main points, or more this from javdoc to xdoc description.. please fix formatting.. please remove such line from examples, to keep config as minimal as possible. can you explain in javadoc example why we can have ERROR on line 11  ?. why we complain about TR ?. please split this long line in one, to keep all text below 100 symbols,\nSorry that this is not enforced yet by build, There is issue on this, it is in progress.. please fix formatting.\nplease generate web site by mvn clean site -Pno-validations, please make a screenshot of part that you introduced and share it on github.\nVerify yourself that it looks pretty.. @pbludov , @rnveach ,\n\"RecognitionException | TokenStreamException\" are both Checked exceptions so, if we move code to Parser, catches should be moved too, as they can not happen in Treewalker.\nI do not see a reason in ParserException (especially in API, and you wrap it (do not let it go to users code) .... blow my mind, sorry). CheckstyleException should be enough.\n\nOnly two exceptions per method are allowed for the CS code.\n\nin general it is true, I do not see good reason to make special suppression here, but if can prove we can do suppress for this case.. for simple code moving .... new API class - it will never be ok.\nAPI class it huge responsibility and contract with user code, reason for new API class should be very very good.. it is not ok.\ntoString() method should be technical method to dump whole content to string value for logging or some technical stuff. All changes in it should be triggered by class structure changes, ...... There is good chapter in \"Effective Java\" book about this.\ngetParseErrorMessage - used for user friendly custom message, it might change to make it more user friendly. So it is responsibility of DetailNodeTreeStringPrinter to deliver message in good language to Checkstyle users. . hmm, we already have https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/utils/JavadocUtils.java#L194 that cover all cases where user is using comments but not javadoc. We need to recheck on found comment that it is actually a javadoc.\nAttention: block comment is not always a javadoc comment.. Please extend why you need this test.\nWe try to avoid such tests as much as possible, please make such case in non compilable sources if you need.\nAll test coverage should be on real Java files , not a fake trees.. @kazachka ,\nthis is not good reason :), we do not need such hacks. We do not allow in UT use pure-UT \nmodel to test modules as it pure-UT are doe snot test real testcases and produce a lot of test code that actually have no value as such trees are not possible to make by java code (dead code).\nplease make a real java file and let it be processed as in all other test methods.\n\nplease make such case in non compilable sources if you need.\n\nit is really last resort.\nAs our main limitation is that we do not work on non-compiled sources.\nSo there should be very good reason for such file too appear.. please remove \"//WARNING\" on this line. As you removed expected message in UT method.. please follow comments pattern of InputIllegalTypeSameFileName.java, to define configuration, and mark by comment each line with violation.. please follow comments pattern of InputIllegalTypeSameFileName.java, to define configuration, and mark by comment each line with violation.. please name it findBraceForTypeDefinition , as you process not only classes.\nPlease be accurate with names.. looks like resolved.. please remove ParserException from here.. Please split Input files. If in Input file declared configuration and trailing comments , they should stay actual all the time.. please define configuration in Input file (in all new Input files).\nTo let anybody open input file , read config, and see how it should work.\nexample (see others input files):\n//configuration: \"illegalClassNames\": List, GregorianCalendar, java.io.File, SubCalendar, ArrayList. http://checkstyle.sourceforge.net/config_regexp.html#Regexp\nlook at page, and remove all leading spaces in this line.\nRun \"mvn site -Pno-validations\" to generate site and see how page become different. . http://checkstyle.sourceforge.net/config_regexp.html#Regexp\nit was ok, do not change location of P tag.. goo, and now remove all leading spaces in SOURCE tag.. violation ?\nplease copy this class to test file and prove that violation is placed on this line.\nuse our CLI - http://checkstyle.sourceforge.net/report_issue.html#How_to_report_a_bug , share terminal output.. SOURCE tag should stay as is, content of SOURCE should be moved to left.. is there any our previous discussion on why 8  is default?\nin our code we do not use tabs, but tabs usually mean indent step.\nI did not found statistics in web by word more and more going to indent size of 2 or 4.\nLets make it 4.. ok, make sense.. rnveach meant , mention in message what is default.\nAdditionally we need to mention that it effective only for \"-s\" option.. yes, as minimum as \"Print sample suppression xpath for all violations\"\n@rnveach , please suggest better wording.. I see no reason too. good catch.\nIn general parsing by simple substring is better then regexp usage. But we already run regexp .\nSo please update regexp to to have groups and keep values after \"maches\" executed.. keep ALL multiline - it is easier to read.\njust change indentation.. You do not print in exception message any context information, it is sign of improper place to process exception.. Such combination of custom exception and jdk . Only Checkstyle exception should be thrown.. Please move top our of loop  and use another variable iterate all siblings.. We have special Check for validation of first sentence, can we reuse logic from it ?. Should there be indentation +2 ?. It is a line wrap, so second line should be +2. please move this case to the top as it affects text collection.. all breaks should be on the bottom.. root should be close to FOR.\nAll output/writer stuff should be separated by empty line from logic of iteration.. \"concatenate HTML text from AST of a JavadocTokenTypes.HTML_ELEMENT\". please make a note that we cannot use logic from SummaryJavadocCheck as here we need conversion from javadoc inline tags to HTML.. remove this comment it is written in code.\nchange exception of message to \"Unsupported inline tag :.....\". all breaks should be on the bottom. Stuff to ignore human should read the last.. ok, looks like we get first sentence in special way.. do we expect multiple classes ?\nI do not see a reason. Please explain. If no good reason please remove this and lets have FOR only for OBJBLOCK children.. Each time engineer try put comment on block of code , he should stop and think how to avoid it by embeding words of comment in code: methods names, variable names, .....\nPlease create method that will give you objblock.. Please explain.. Please remove input file reference, it is completely unrelated.\nIn case of problems with input file , there will be CheckstyleException , you do not catch it , so it is not your context. We will switch to jacoco only when we are ready. We need to test it by some time and accept jacoco in multiple steps.\nIf jacoco make problems, I will switch it off.\nCobertura stay as primary check till final fix for jacoco,. please add empty line after this line, streams mes and business logic should be separated.. as IO could happen from input file, please revert to previous state of code, with both files referenced.. please enforce strict coverage for this classes, as it is done in cobertura.\nWe use this to control that grammar changes actually covered in most required parts. We will never have 100%, but at least this is reminder on grammar changes to cover cases with tests.. @pbludov , as you use \"verify\", please disable all other static analysers, review profile \"no-validations\" at https://github.com/checkstyle/checkstyle/blob/master/pom.xml#L1486\n@rnveach, as update to jacoco is hard to do in one PR, we should do this in few PRs.\nPRs:\n1) initial jacoco coverage for coverage as-as\n2)-X) fixes for non 100 coverages in files (except for grammar and UI)\nY) update web site to have jacoco report, xdoc for development requirements, update wiki ....\nZ) let cobetura and jacoco run together for some time too see how it is working in PRs and catch all contributors problems and concerns.\nFinal: remove cobertura and make jacoco the only coverage tool.\n. please return \"{\" to the end of line , this Check does not validate this, so it is better to keep example as compact.\nplease make indentation as 2, here is 4.\nPlease make one space after \":\". return \"{\" back.\nbut please make inner content with indent as 2.. no.\nit is very rare case, when we are ok to make suppressions.\nI played a bit with your code and here is my proposal, to split streams mess and pure business logic of generator:\n```\n    private static void writePropertiesFile(String inputFile, String outputFile)\n            throws CheckstyleException {\n        FileOutputStream fos = null;\n        PrintWriter writer = null;\n        try {\n            fos = new FileOutputStream(outputFile);\n            final Writer osw = new OutputStreamWriter(fos, StandardCharsets.UTF_8);\n            writer = new PrintWriter(osw, false);\n        final DetailAST top = JavaParser.parseFile(new File(inputFile),\n            JavaParser.Options.WITH_COMMENTS);\n        iteratePublicStaticIntFields(top, writer::println);\n\n    }\n    catch (IOException ex) {\n        throw new CheckstyleException(\"Failed to write javadoc properties of '\" + inputFile\n            + \"' to '\" + outputFile + \"'\", ex);\n    }\n    finally {\n        CommonUtils.close(writer);\n        CommonUtils.close(fos);\n    }\n}\n\nprivate static void iteratePublicStaticIntFields(DetailAST top, Consumer<String> writer)\n        throws CheckstyleException {\n    final DetailAST objBlock = getClassBody(top);\n    if (objBlock != null) {\n        for (DetailAST member = objBlock.getFirstChild(); member != null;\n             member = member.getNextSibling()) {\n            if (isPublicStaticFinalIntField(member)) {\n                final DetailAST modifiers = member.findFirstToken(TokenTypes.MODIFIERS);\n                final String firstJavadocSentence = getFirstJavadocSentence(modifiers);\n                if (firstJavadocSentence != null) {\n                    writer.accept(getName(member) + \"=\" + firstJavadocSentence.trim());\n                }\n            }\n        }\n    }\n}\n\n```\nit will trigger inspection violation, but it is ok to update inspection config to allow:\n\n<option name=\"insideTryAllowed\" value=\"true\" /> at config/intellij-idea-inspections.xml file.\nhere is example of violation and misunderstanding from community - https://intellij-support.jetbrains.com/hc/en-us/community/posts/206242079--OutputStreamWriter-should-be-opened-in-front-of-a-try-block-and-closed-in-the-corresponding-finally-block. jacoco is defined in special profile, other builds should not be affected.\nplease remove.. jacoco is defined in special profile, other builds should not be affected.\nplease remove.. jacoco is defined in special profile, other builds should not be affected.\nplease remove.. I still see wildcard exclude, please recheck that you pushed all changes. > I changed the '{' after the switch statement by considering the original source code on line 66. So does that also needs to be changed considering this?\n\"{\" on new line is very old style, so this example was added in time when it was wide used.\nCheckstyle in general can enforce multiple code styles, so our sample files will never be written in same style, to show user code with violations and what is expected.\nI do not recommend you to change style of code from sample, as it could change behavior of Check and sample might not be valid anymore.\nLets change indentation only for now.\n\nAlso does the indentation for Java source code should remain to 2 similar to XML?\n\nyes, spacing is not affecting any Check , except for http://checkstyle.sourceforge.net/config_misc.html#Indentation . Non of this sample should be changed, as amount of spaces in this Check is part of validation.. yes, please do.. NO suppression is allowed, please update IDEA inspections, as I suggested.. > verify -Pjacoco-check -DskipITs -Dpmd.skip=true -Dfindbugs.skip=true\n\"verify\" + not all skips.\n@pbludov , please take a look at link I provided and make all skips except for UT(required for jacoco).\nIn build log there should be no other plugin running, to speed up the build process.. I still do not see see context variables printed in exception message. No additional context - no need to wrap exception.\nPlease print \"commandLine.getArgList().get(0)\".. still custom exception and jdk. still top is present.. @pbludov , please update IDEA inspection config as I suggested, in this commit.\nPlease forget about usage of noinspection tag.  If you would like to use it please prepare very good reasons to make it.\nWe discussed this case before, I ma not ok to allow it.. @pbludov , expected diff on config is:\n```\n$ git diff\ndiff --git a/config/intellij-idea-inspections.xml b/config/intellij-idea-inspections.xml\nindex dd10f2b..50e6d41 100644\n--- a/config/intellij-idea-inspections.xml\n+++ b/config/intellij-idea-inspections.xml\n@@ -1017,10 +1017,10 @@ isolated classes and we cannot put them to separate package as it will affect us\n     \n\n\n-            \n+            \n\n\n-        \n+        \n\n till we switch to jacoco we cannot use this as it conflicts with policy of 100% coverage \n\n```\nplease let me know if it makes another problems.. Please restore indentation on this , there is similar line below. Ideally yes, but it is better to think about it when we come to no ignored lines for pitest. It is better to remove line numbers. It is not ok to extend suppressions of pitest in favor of jacoco. As I told before, all suppression should be explained in javadoc comment. Please do.\nBase on conversation with rnveach, bellow, just make a summary, some link to documentation might help to understand this syntax.. \"Please provide wide description of update\" ==> \"add a detailed explanation of the problem\"\nProblem should be defined and described in Issue description. We do not need explanation of problem in PR. PR is just technical page to pass review of implementation. PRs are not referenced in release notes. All problem detail should be in issue.. testAddAttributeAndGetAttribute looks better for me. Please use long name. methid name should be named as mapParserTokenToJavadocTokenType\nif should be smth like:\nif (antlrTokenType == JavadocParser.HTML_TAG_NAME) {\n            javadocTokenType = JavadocTokenTypes.HTML_TAG_NAME;. mapping to JavadocTokentypes should be done in one place, right after parsing. Non of other code should be affected by this mapping nuances.. Please restore ordering of profiles in this file, ordering was used to make validation of existing active big projects first, xpath, filters, javadoc, ..... . Pitest runs too long, and such ordering works.. please do:\n$ git diff\ndiff --git a/pom.xml b/pom.xml\nindex dda176c..b83192e 100644\n--- a/pom.xml\n+++ b/pom.xml\n@@ -768,10 +768,13 @@\n           </execution>\n           <execution>\n             <id>default-report</id>\n-            <phase>site</phase>\n+            <phase>verify</phase>\n             <goals>\n               <goal>report</goal>\n             </goals>\n+            <configuration>\n+              <dataFile>${project.build.directory}/jacoco/jacoco.exec</dataFile>\n+            </configuration>\nit is better to generate report on verify phase, to have report available right after verification is failed. We ask user to use \"mvn verify\" for all verifications. Without html report it is impossible to get to know what to fix. All other plugins report to terminal output some report that is enough to fix problems.. let make variable for ${project.build.directory}/jacoco/jacoco.exec to reuse it.\nhttp://www.eclemma.org/jacoco/trunk/doc/report-mojo.html\n\n\"Default value is: ${project.build.directory}/jacoco.exec.\"\n\ndefault value for path is different, why to use non default ? \n. confirmed, as plugin generate link that is not 100% valid, links check gives http://www.jacoco.org/jacoco: 301 Moved Permanently . NO / at the end of url.. what is a reason ?. looks over complicated ..... \nthee should be smth like mvn test jacoco:report .... but for some reason I can not make it work. @pbludov , please resolve all other points, we will think about it later.. please move it to separate commit(with reference jdk9 issue) or to another PR.\ncobertura --> jacoco is unrelated to jdk8 --> jdk9 . Even they a bit bound.. Verify phase will run all verification tools (checkstyle, pm, finbugs,.....) It will take time. But here we want to run only coverage check, please use '-Pno-validations....' as you did before. One day we will find way to run jacoco only.. it is more then enough for now. We will improve it some time later on.. done. done. done. done. done. a bit extended.. done. done, all cases changed . just to use default path of jacoco plugin, it was my request. This simplified all other configurations (see discussion above, or commits before, or just trust me :) ). it might be hard to open good issue for this...\n@pbludov , please create some issue with uncertain description, we will use link here.\nAfter merge, steps to reproduce in jacoco issue will be simple: clone, remove exclude, run command.\nIn the same time we will have some tracking number here for future to recheck.\nComment should be like \"till https:///////#XXXXX\". done.. Please reference it in comment above suppression. > But in the test tree there will be mess.\nit is better to not do this.\nJust copy problematic imports to non-compilable folder. ImportOrderCheck already have a lot of Input files in non-compilable folder  because we need a lot of cases with names and we can not afford to keep all that in out compilation dependencies.. it is just a report generation, no verification logic in this plugin for now.. issue is \"lambda as the first parameter in call base class ctor\", here are lambda in user defined test case.\nbut here is no \"->\" in input file...\n1) As good practice ... reported test case is copied \"as is\" to Inputs to make sure it is covered for sure.\n2) if smth else if going to be fixed (not releated to referenced issue, it is better to create new issue.). 0)Before we merge this can you reckeck history of this line.\nSuch code usually written on purpose.\n1)This line mean that enforcing sequence is the most last rule wins.\nSo it is  a bit oposite to what you expect, but still make sense.\nPlease recheck one more time.\n2) we need to document sequence of applying in xdoc\n3) we need example in xdoc, as it is far from abvioous, . :) you mentioned it in title then in description\n\nOnly happends with 'super' and only if the lambda comes first.\n\nYou did mention unrelated stuff too much.\nThat is why it is good practice to use test case from user as they do not know details, and just report what whey see.\nPlease fix description if it second \"typo\".. no, we will not enforce pitest over gui code at all.. good point, disabled in separate(2nd) commit, to not waste time of CI.. not very obvious but ... https://dzone.com/articles/fileinputstream-fileoutputstream-considered-harmful\nShould be forbid usage of FileInputStream/FileOutputStream by import control ?. I see removal of UnusedPrivateMethod from our configs only, rule  UnusedPrivateMethod is still present in pmd6\nhttps://pmd.github.io/pmd-6.0.0/pmd_rules_java_bestpractices.html\nplease explain.. what was a reason to move this exclude from previous position ?\nRight now it is very complicated to verify diff as too much is reallocated.\nIf possible please minimize diff.\nif there is some good reason in new order, please let me know, but it will be very hard to validate your changes.. Please do us a huge favor, please try to minimize diff, to speed review.. > Otherwise, I added a new suppression (there were two of them,\nplease mark all such temporal suppression by comment \"till https:.....\"\nTo let us clearly see what is new and temporal suppression. if you decide to suppress it, please put in explanation link to this awesome article.\n@pbludov , What else rules you suppressed that were not suppressed(may be did not exist) before?. > Believe me, \nwhole process in checkstyle, whole this madness with numerous CIs/tools/.... is based on  \"I do not trust contributors, they always cheat, ....\". I had a lot of stories on how I trusted contributors and in result they left incomplete/damaged functionality. Most contributions are done to start use new functionality after release. Non of contributor should be able to block others to upgrade to new version after release.\nMy time on laptop is very limited, so process is designed to make me do most of work from phone and on the go, or when I have only 5 min of free time, ... .\nBut I do appreciate your help in project.. is it the only rule that need extra suppression after upgrade to pmd6 ?\nsound suspicious . we put Expected to file only if it is huge to be embedded. I do not see your expected output as huge. If there was some previous discussion .. please give me a link to it to review. If no discussions before, please inline expected to UT method.. such code mean that after clone of repo to windows, all files become \\r\\n (expected, as it is natural for windows).\nReplacement to unix style mean that code that generate output does not consider OS difference, so output on windows will be damaged in commanline.\nPlease recheck builder of output for using  OS specific line-ending.. Yes, but let's wait for feedback from @timurt .. What about Presentation classes ?. We need to show how to disallow in Presentation and *Module classes. We can keep this change. Please revert this change now, it should be fixed in Check first. Ok, to keep changes.\nUsed at https://github.com/checkstyle/checkstyle/blob/master/.ci/sonar.sh. Please revert this change for now. Please revert this change. You can keep changes, but there might be UT failure non matching name of variable in expected result.. Ok to keep. > They should be suppressed too. Just for performance reason. \nNo good reason to suppress.\nWe suppress only if it produce too much false positives, or a lot of problems and there are analog in other places.\nNon of library is ideal in implementation of some Rule (checkstyle,pmd, spotbugs,Sonar, Idea Inspections,........) all have problems, so twhen you use all of them, at least on of them will catch a problem.\n. please restore original ordering of excludes, to ease verification of what extra(not related to renaming, reordering, relocation, ....) changes you did . please remove such blocks from all parts of config.\nSuch list is not maintainable. On next pmd release they will introduce new rule and if it does not make any violation, nobody will notice it, so list will become out-dated.\nNobody will read pmd release notes attentively, to keep this list up-to-date.. It better to add it. I not aware that there are some code standard on naming of such classes, but usually it is smth like about Model and Presentation Model(https://martinfowler.com/eaaDev/PresentationModel.html) (PresentationModel, Model, PM, Pm). Such classes suppose to keep whole logic and UI class delegate calls to it. So logic could be UTed and UI part requires less attention as there is minimal logic in it.. In my mind, most of use cases for import control module is definition of black list (list of disallow).\nIn most applications there are 80-90% of code is closed for re-usage outside, in this part of code all is allowed to make it work. In some projects there are api part or any other part that is reused by others. In such small area users will likely to enforce rules on \"white list of allowances\" to control what could go outside (extra dependencies for others).\nI am skipping out our config from consideration as it is too fanatic.\nSo I try to place to example doc some use-case that is known for others, so user will find it and understand what is it for.\nProbably it is better to make it like:\ncom.mycompany.billing\n  Panel,View,Dialog - disallow \"com.mycompany.dao\",. \"..jdbc.\" usage.\n  PresentationModel - disallow javax,swing,J  usage . agree, should be reverted.. default format is .* in Check.\nBut we can to be more strict, especially then we already upgraded code to satisfy other tools.. please do not touch this, it is name of class in IntellijIdea, they will not update it :). please skip xml content completely in this file. \nthe only target of spelling is comments in this file. Please explain reason of this \"cd\" .\nthe less \"cd\" is used in shell script, the better.. Ok for migration time, but please make a separate issue on this to review. We use same metric as Check, and it works.\nPlease use issue link as reason of suppression.. Please share in gist output from this rule fro review.\nWe should not use default at all.\nIf there some unfortunate cases, we need issue on this.\nWe will keep a rule active to highlight such cases.\nAgain for migration time, might be better to keep suppress with reference to new issue for this in our tracker. Did you just optimize suppression expression ?\nComment above explains  suppression, now might be unsynced. please move this to separate issue ,  and suppress till that new issue.\nMost of such code need to be fixed.. please move this separate issue.\nplease suppress certain cases(not whole rule) for now till new issue.\nI need to review is it Pmd problems of calculation or on our side, as we have the same metric implementation.. > The expression changed to \"any method with a call to method verify(...) or exit.checkAssertionAfterwards(...) or .verify(...).\nPackageObjectFactoryTest and XdocsPagesTest do not use any of them, so they are explicit here.\nok. Please explicitly describe that use first matched rule from top to the bottom.. My bad, missed this in your comment, for some reason thought there was only 4 cases.\nOk to suppress whole rule with amount.\nBUT.\nWe use it is our default - https://github.com/checkstyle/checkstyle/blob/master/config/checkstyle_checks.xml#L403\nDefault limits are http://checkstyle.sourceforge.net/config_metrics.html#JavaNCSS\nPmd rule default are different https://pmd.github.io/pmd-6.0.1/pmd_rules_java_design.html#ncsscount\nCan we configure pmd rule the same as our ? \nIf possible lets do this, if not reason of suppression should be different. If too hard move it separate issue.\n. change comment to:\n\"we do not follow philosophy of complete encapsulation, we like data classes(preferable immutable) to transfer content from one part to another. Too much \"false-positives\" on Checks classes. No way to customize rule(no properties).\". We can can change a name, but we can not make it as minor spelling commit, we need to make issue on this and probably mark it as braking compatibility. Good catch, but this is separate issue, please register it.. http://checkstyle.sourceforge.net/apidocs/com/puppycrawl/tools/checkstyle/api/JavadocTokenTypes.html\nWe do not change any of this name. So users should not be affected. Changed name is internal.. > Please specify what imports you want me allow/disallow for PresentationModel, Model, PM, Pm. Is it the exact same as #5641 (comment) ?\nyes, disallow \"java.swing.J*\" (all visual/rendering classes)\n\nWhat about *(Panel|View|Dialog)?\n\nIdeally I would move enforce such classes  to use Presentation classes and classes from jdk and nothing else. So to force all rendering preparation(even toString) to be delegated to Presentation. But this is completely different issue.\nTo make atleast some step in front of this goal:\nWe can allow from checkstyle only import com.puppycrawl.tools.checkstyle.api.DetailAST;\nand import com.puppycrawl.tools.checkstyle.api.DetailNode;. All other should be delegated to Presentation class.\nIf that is too much to do now .... my preference is to use \"blacklist\" of imports here. So we allow all, except for some known odd imports (from \"checks\", from \"ant\", ... )\n. please update to enforce no \"swing.J\" at \"Presentation\" classes, I remember there vote where majority made a decision to skip \"Model\" from \"PresentationModel\", now it cause mistakes :).\nStandardCharsets, JavadocDetailNodeParser, JavaParser, checkstyle.utils - should be allowed only in Models&Presentations . There should not be problem, as they are in use only in presentation models.\ngenerally in UI it is allowed to use only (from whole \"api\"):\nimport com.puppycrawl.tools.checkstyle.api.DetailAST;\nimport com.puppycrawl.tools.checkstyle.api.DetailNode;\nimport com.puppycrawl.tools.checkstyle.api.CheckstyleException;\nI do not see any other usages in code and this is correct.\nyou can create separate issue for refactoring of UI to move even this imports to model only.. Is it new rule ? I did not find it in config before your changes.. Please clone to .ci-temp/contribution folder. .ci-temp will be reused by others CI too.. Please do not redirect error output to devnull. No need to keep here file, whole content of parent folder is ignored. please always use test case from issue.\nStream.of(false).map(x -> { if (x) return 0; else return 1; });\nIt is very good practice.\nI do understand that now you well aware of Indentation logic so you can provide \"better\" test cases. BUT we need as much test cases as possible. And we need to make sure that is logic change all cases are working in the same way. In best scenario test inputs should be created as you do not know logic at all (blackbox).. @pbludov , \nstrange, rule was in pmd for a while - http://pmd.sourceforge.net/pmd-4.3.0/rules/javabeans.html, we did not excluded it, It might did not work(no violation). \ncomment should be \"it is not our goal for now keep all Serializable, may be in future\". please remove it from \"rulesets/java/controversial.xml\". this rule was in old PMD version , but did not make any violation, might be fixed in 6.0.\nsuppress comment: \"it is not our goal to make all Serializable for now\". please remove it from \"rulesets/java/controversial.xml\". this rule was in old PMD version , but did not make any violation, might be fixed in 6.0.\nsuppress comment: \"it is not our goal to make all Serializable for now\". please remove it from \"rulesets/java/design.xml\" in this PR.\nLooks like all other should be removed from old location too, please do.. new issue is opened - #5697. > fullPackage ==> fullName\nsubPkg ==> name\nplease explain, it become less clear what is fullName of PkgImportControl.\nwhat about fullPackageName ?\nplease comment on your changes.. please make it clear that it is not for inner/nested classes. It is only for top level public classes ?\nplease update xdoc too.\nWhat about Interfaces, Enums (all other top level types) ?\nIt might be another issue .... but should we change DTD in such a way to allow extending logic without DTD changes. So in stead of \"Class\" term use \"Type\".\nInterfaces imports are even more critical target of such Import Control validation, as such imports force clients of API have all that classes/types as compile dependency.. thanks for explanation, make sense now.. Checker.processFiles - there are only 6 decision points in method, not sure why PMD think about it in different way, might be because of \"try\" or it is nuance/bug in PMD.\nCheckUtils.parseDouble - create separate issue on this, it might be good to review necessity of this method at all (bunch of utils methods around), it might be. CC level is 11. Not sure what PMD value it counts, might be bug in PMD. Lets print value that PMD counted and suppress as we have our own check for this.\nCustomImportOrderCheck , CC is 10 for them, Not sure what PMD value it counts, Might be bug in PMD.  Lets print value that PMD counted and suppress as we have our own check for this.. Please create issue to get rid of it.. > only classes that end with ....\nI do not like term \"Class/class\" usage, as you you check Interfaces and enums.\nJdk specification differentiate them, see https://docs.oracle.com/javase/specs/jls/se7/html/index.html\n8. Classes\n9. Interfaces\nWe have even more in nuances, as we speak about top level type,  but in reality do not really check for top level type, we just parse imports in file not for class.\nPlease review https://docs.oracle.com/javase/specs/jls/se7/html/jls-7.html#jls-7.3 (\"7.3. Compilation Units\") .\nThis is what we actually do - we do import control of compilation unit. So I propose to rename \"class\" to \"unit\".\nXdoc should clearly state that we apply rules for whole \"compilation unit\".. When I come about 'unit' I looked at our confirmation samples http://checkstyle.sourceforge.net/config_imports.html#ImportControl\nSo there are terms 'import-control' that just define package of validation and 'subpackage' that actually define packages to validate. Package is folder. So configuration is all about validation rules for files in folders, not classes only. Files are compilation units. What you are doing is actually defining import rules for certain file(compilation unit).\nTo my mind we have two options for names:\nFile\nUnit\nBoth are fine, I just have more preference to unit, as we skipp non Java compiled files(properties or ...). So 'file' term is not very good for us here.. it is better to tell truth.\nshould be \"CustomImportOrderCheck.finishImportList, CustomImportOrderCheck.getImportGroup are validated by checkstyle version of Npath, we think that pmd is wrong here\". should be \"Checker.processFiles is validated by checkstyle version of Npath, we think that pmd is wrong here\". please name it as line ,as  term header we use for block of lines.. please move compilation of pattern to class field, to be done ones, for whole execution of checkstyle.. please remove this final it pollute code and we have special Check for this that should make change of value impossible.. please refactor code a bit more like:\ndo{\n String line = lnr.readLine();\n if (line != null) {\n   readerLines.add(line);\n }\n}\nwhile (line != null)\n. please create one more test case , with the same content as from issue  (it is good practice ), additionally user reported problem on header that is multiline comment not set of single lines.\nThe more test cases the better :) .. good catch, for  API  package lets be as strict as possible.. yes, first match wins. http://checkstyle.sourceforge.net/config_header.html#Header\nignoreLines are empty by default, why mention it here ?. same a above.. I do not see that we excluded it before. Please warn us on new configuration (not moved).\nhttp://pmd.sourceforge.net/pmd-5.0.1/rules/java/coupling.html\ncomment should be:\n\"we use our ImportControl to control imports in packages and classes\". what does \"local-only\" mean for \"unit\" ?\nplease remove all instances and lets update documentation that such parameter is not used for units as unit is most deep verification item of Check.. as we come to unit term, we do not need to parse type name from file, lets just use name of the file.. should we use \"Type\" here ? as import could of Enum or Interface or Annotation.\nhttps://docs.oracle.com/javase/specs/jls/se7/html/jls-7.html#jls-7.5.1. variable name should be \"Unit\".\ndo we really need \"ic\"(import control) prefix ?looks weird , took me some time to decode it.\nWhat about unitControl or rootControl.\nwill looks good \"rootControl.addImportRule(...)\". please add link to jdk specification to explain what is \"compilation unit\". To clearly define what we mean and which terminology we use.. let use here \"file name\". We need to be clear to user that in config they define \"class\" to allow/disallow (that actually a type). But when they define unit, unit is file, so unit name is file name.. thanks for explanation.. please explain why this required to be part of script, I think it should be just a change at whitelist file.\nIn my mind spell checking is specific to a project only by whitelist and excludes for file/dirs(generated, resources, ....).\nSo as finish enforcing ... it might be good to have all common parts in our repo(s) and we just clone/wget project append to it excludes+whitelist and receive validation.\nIt will allow all others easily reuse your spellchecker easily.. I tried to clean up content of whitelist and run ci shell file (with disabled clone or source). It suppose to report all words as missed and do not have weird ZZZZZ variables.\nBut such resources are still processed by spell-checker: \n```\n$ ./.ci/test-spelling-unknown-words.sh\n...\n+ZZZZZZ\nEOF\n$ grep -r \"ZZZZZZ\"\n.ci-temp/contribution/jsoref-spellchecker/unknown.words:ZZZZZZ\nsrc/test/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/abstractjavadoc/InputAbstractJavadocPositionWithSinglelineComments.java:class ZZZZZZ {\n```. I applied removal of odd names to contribution repo \nI relaunched latest maven build - https://travis-ci.org/checkstyle/checkstyle/jobs/366822545\nand It wants them back, so it mean that exclude does not work, and it still validate resoures.\nPlease review exclude.pl. users will be lazy to make xpath very specific , can we make xpath like:\n/CLASS_DEF[@text='Main']/* | //METHOD_DEF[@text='calculate']/* \nto  not bother user to know what token Check actually report an violation.. please provide some links where Xpath is explained (all axises, ... ) and all supported query features of it. Do not expect that users are know Xpath very well. Even I do not know it :).. please make link to supported keywords.. lets stop expanding of this pattern now, \ndo not change other places , but please name properly in your new code.. $ cat TestClass.java \npublic class TestClass1 { }\n$ javac TestClass.java \nTestClass.java:1: error: class TestClass1 is public, should be declared in a file named TestClass1.java\npublic class TestClass1 { }\n       ^\n1 error\n\nOuterTypeFilename .\n\nWe have this Check because it was not and error for all java compilers. So it become a Check. I think it is redundant right now on most recent compilers, but we suppose to work on any java file so Check is still present.\n\nIf we are going with file name then unit should be changed to file.\n\nFile is too wide term - it ieverything, but compilation unit is file that is compile-able https://docs.oracle.com/javase/specs/jls/se7/html/jls-7.html#jls-7.3 , file name is compilation unit name is the same. Compilation unit contain whole content of java file. Our ImportControl do not care how much types are declared inside compilation unit, it checks only imports of compile-able file(compilation unit).. Used only import and annotation. Should be removed\nWe can probably forbid usage of guava Closable at as, it was used mostly to satisfy coverage as far as I remember.. > It is not an error on maven as it will compile successfully files\nyes, but compilation unit is still a file with all classes inside it.\nLooks like we need third opinion on this and make vote. I not completely against \"file\" term. \n\nSince this is a TreeWalker check, it doesn't mean everything as TreeWalker makes sure only Java files are processed by it\n\nI even did not think about TreeWalker, I just try to be user who see only configuration and try read and understand it without documentation. . looks good, lets start at least from it.. it is not clear why type is changed.\nplease explain how root could be FileImportControl ?\nroot is <import-control some synonym for <subpackage\nLoader on getRoot() should return exact type - PkgImportControl .. please make it public. public. public,\nin private inner classes, it is ok to make public ctors.\nPlease apply such rule to all others.. public\nif smb create a class in his application, there is not harm for us, it is his business. As sources are open why we should limit them to create classes ?. public. public.\nThe same if smb what to create it and use - it is ok. We will not support them , use such users should beware that class exists as is and will change then javadoc processing need this. We will support only code that is hosted in our repo, all other is not our problems (it is not contract to users to have any of this classes).. public \nall top level classes, should become public. Please apply this rule to all others.. http://hg.openjdk.java.net/jdk9/jdk9/jdk/file/65464a307408/src/java.base/share/classes/java/util/PropertyResourceBundle.java\nhttp://grepcode.com/file/repository.grepcode.com/java/root/jdk/openjdk/6-b14/java/util/PropertyResourceBundle.java\nit loads all required in memory during c-tor.. please show power of your functionality to enforce limit of Closeable/Flushable to only for this \n```\n$ grep -rl \"Closeable\" * --exclude-dir={target,resources,xdocs,resources-noncompilable,config,test}\nsrc/main/java/com/puppycrawl/tools/checkstyle/PropertyCacheFile.java\nsrc/main/java/com/puppycrawl/tools/checkstyle/utils/CommonUtils.java\n$ grep -rl \"Flushable\" * --exclude-dir={target,resources,xdocs,resources-noncompilable,config,test}\nsrc/main/java/com/puppycrawl/tools/checkstyle/PropertyCacheFile.java\n```. it is PkgImportControl.\n\nImportControlLoader returns what is on the top of it's stack\n\ncan it be different form PkgImportControl ? can you give me example of meaningful config ?\nAs term is root - it is possible to have only one root element.\nMore over:\n```\n$ head import-control.xml \n<?xml version=\"1.0\"?>\n<!DOCTYPE import-control PUBLIC\n    \"-//Puppy Crawl//DTD Import Control 1.3//EN\"\n    \"http://checkstyle.sourceforge.net/dtds/import_control_1_3.dtd\">\n\n\n\n\n$ xmllint import-control.xml \nimport-control.xml:10: parser error : Extra content at the end of the document\n\n```\n\nWe can cast the return to PkgImportControl but why don't we leave it as abstract incase we add new root nodes?\n\nSuch classes are private implementation, so following a rule \"make it extendable in future\" will not work well, not you neighter I know future. It is better to be precise now.\nTwo import-control nodes in one file is separate discussion/issue.. > If you look at ImportControlLoader, it gets root from the field named stack. That is what I was referring to.\nI saw, but lets address stack usage in separate issue if required. \nRight now , out of Loader should come one element and it is PkgImportControl. \nWhen we come to XyzImportControl we will refactor appropriately, future will come with new requirements that we can not predict now. In future on the moment of refactoring it is better to clearly see what code do/support now, rather than guess what for such option exists and for whom it was done and .... .  . What do you mean by this question ?. Please explain suppress reason in javadoc.\nWhy IDEA does not have there suppression ? Is it a hug in Eclipse analyser?. Please explain suppress reason in javadoc.. Please explain suppress reason in javadoc.. Please make comment more general. As we sometime postpone close for resource by design, not only for this particular case - Main.createListener . you can use  http://checkstyle.sourceforge.net as we did not migrate to new site yet.\nIt is better be consistent for now, if no other problem appear. . <b>Check Property Setter</b> do we need single out setters ? what is a reason ?. I noticed for properties.\nAt properties only it is ok to give signal to future generator of xdoc from javadoc that this description should be placed to table of properties. Why to both of them ?\nIt might be reasonable to use our special annotation over the field to make it clear that it is part of configuration.. ok, call it new feature request, enhancement, any type of ticket against Eclipse to be better.\nIf IDEA found way to make less false positives, why Eclipse should be behind ?\nIf Eclipse is less configurable/smart ... why we should activate it ? Does it make sense to activate only IDEA ?\nDo we get some benefit from Eclipse only(not detected by IDEA) ?. sorry to enforce bureaucracy, but it is proven by practice, principle to do \"done\" for each point.\nIt is just final recheck that all items from numerous are done.. comment for myself.\nfrom IDEA:\n\nReports AutoCloseable instances which are not used in a try-with-resources statement, also known as Automatic\n Resource Management. This means that the open resource before/in try, close in finally style which was used \nbefore try-with-resources was available is also reported. This inspection is meant to replace all opened but not \nsafely closed inspections when developing in Java 7 and higher.\nUse the first table below to specify which AutoCloseable subclasses should be ignored by this inspection. Specify\nAutoCloseable subclasses here which do not need to be closed.\nUse the second table below to specify which methods returning AutoCloseable will be ignored when called.\nUse the first checkbox below to ignore an AutoCloseable if it the result of a method call. When enabled, the results \nof factory methods will also be ignored.\nUse the second checkbox below to specify that the inspection should not warn if an AutoCloseable instance is \npassed as a method call argument. If enabled the inspection assumes the resource is closed in the called method. Method calls inside a finally block with close in the name and an AutoCloseable argument will not be ignored.\n\nConfig for proposed xml looks like this in IDEA:\n\n. @rnveach ,\n\nwe have some module where setter is not associated to property. Checker.setModuleFactory\n\nit will always be ok, we will not mark this public method as @PropertySetter(or some other name of annotation).\n\nThis issue is mostly just about controlling the Javadocs for a module.\n\nas you bring this issue again, probably we need to come back to discussion on expected format.\n\nWe can either enforce them to be something specific from xdoc, or let it be completely free-formed.\n\nIn my mind javadoc could be some formatted to be easily transformed to xdoc (checkstyle's future xdoc generator) and html format (javadoc tool from jdk). Focus will be more to xdoc, as most users read xdoc sourced documentation most of the time.\n\nWill a annotation show up when the Javadocs are converted to HTML?\n\nhtml of javadoc - no\nhtml (that come from xdoc) - it will let generator easily find what to put to xdoc.\nAnnotations is good for configuration.\nAnnotation should tell xdoc generator what it is nature of element/item and javadoc just contain html like contain of certain form for easy transformation to xdoc format of all text.\nIn other words: annotations are metadata, javadoc is collection of text values/descriptions.\nRight now class field and filed setter have almost duplicated javadoc. Yes, is due to our obsession to apply to our code all that we produce. But it would be better to have javadoc only on setters (availbale to javadoc tool and xdoc generator).\nAdditionally annotations will help us to print all available properties for Module then smth unknown is found. To help user find typo on name or understand that property that he try to use is shown on web site, but it is available only from most recent version of checkstyle, and it does not exists in checkstyle version that is in use. It is still struggle for user to find out exact version of checkstyle they use(plugins, wrappers, .....). \nWhat I would do:\n-    /** Allows to ignore variables with 'final' modifier. */\n+    /** Allow to skip variables with {@code final} modifier. */\nor\n-    /** Allows to ignore variables with 'final' modifier. */\n+    /** @see #setIgnoreFinal() */\nand\n-     * Sets ignore option for variables with 'final' modifier.\n+     * Setter to allow to skip variables with {@code final} modifier.\n...\n@PropertySetter\nxdoc will remove \"Setter to\"(or any other prefix) to use/expect in xdoc. So it mean when @PropertySetter is used, use first sentence of javadoc for content of xdoc property description. the same rule will be used to generate metadata xml file for eclipse-cs plugin or sonar plugin or ..... .\nOne more alternative, if you against of java anotation, we can use custom javadoc tag @propertysetter, no new types visible for users :) (in this case we loose ability to reuse metadata information in runtime, but we can use javadoc tags as first milestone and if it works well for us convert to java annotations). is this method required ?. +        final int violationLineNumber = 4;\n+        final int violationColumnNumber = 5;\n..\n+            \"4:5: \" + getCheckMessage\nunfortunate copy-paste, can we eliminate it ?\nWhy you limit design only to one violation in file ?. it might be related to my above question about single violation in file....\nif we go this way, we will definitely need several test inputs for each check, to test its ability to suppress different types of violations(on different AST elements), so we need to create extra folder for each check under \"suppressionxpathfilter\".. why we join all xpath queries ?\nIs it better to test each query separately ? to make sure that all that we generated could suppress violation.. >that you can't tell the difference between a property and a normal setter in HTML display.\nCurrent javadoc is more than enough, we do not need to improve it. So if you leave formatting of it with out changes it will be good. It is reasonable to change wording a bit to let us generate  xdoc easily.\n\nThis is not possible as Javadoc is missing summary and our checks will complain.\n\nOk. Keep it as it is now, we will think about it later.. Why AtomicInteger is used. is it better to start using term \"Property\" here (instead of Option) ?\nRight term is property accoding to our xdocs. Option is unfortunate synonym that I used for some time, and it some how spread among users and contributors. . all this usages are internal, we can change at any time. Ok to use AtomicInteger.. strange for some reason my comment disappeared ...\nDuring review I was ok to make them as required, as parameter in lambda and method are kind of the same term, so I was ok. \nBut you are right, look at http://checkstyle.sourceforge.net/config_naming.html we are very fine grained on what we validate. So user have bunch of options to allow special cases/names for catch or ...... .\nYes, lets make Lambda as non required but as default. So by default most user will not bother with extra details (the same for google style, no changes). But smb who want to make different rules for lambdas (probably some allowances for single character names) could be possible (even not recommended).\n@kazachka , please make this change.\nPlease also add example to xdoc on how to make rules different for method parameters and lambda.. Not sure what \"wrap\" mean here. I meant just change word \"option\" to property.. Can we keep code tag ? It looks good in result html.. we try to make properties for statics to mirror what we have for simple imports.\nSorting should be done in group. So static imports should follow the same groups as defined for simple groups while there is no groupsStatic property or be treated as one single group unrelated to groups of simple imports.\nThere should be no dependency between separatedStaticGroups and sortStaticImportsAlphabetically.. if we say \"groups\" ... we have to separate internally. Eventually we will get groupsStatic property we will allow separation inside static imports.. please bump version. lets \"rename\" SKIP_CI to SKIP_BY_FILES.. if (FORCE_CI) {\n eval ...\n} esle if (SKIP_BY_FILES = false ) {\n eval ...\n} esle {\n skip\n} . Ok, what about this:\nif (FORCE_CI) {\nSkip_ci=false\n} esle {\nSkip_ci=SKIP_BY_FILES \n}\nOr even\nIn Travis matrix we define skip_ci= false.\nIn execution block we recheck that variable is empty, then we do calculation base on files.. it was already hard to read , but I did not have time improve it.\none we hitting this ground\nlets make it more human readable:\n```\nif [[ $SKIP_CI != 'false' ]]; then \n  if [[ $(git diff --name-only HEAD HEAD~1 | grep -vE \"$SKIP_FILES\" | cat | wc -c | sed 's/^ *//' ) > 0 ]]; then \n    SKIP_CI=false\n  else\n    SKIP_CI=true\n  fi\nfi\n```. this javadoc is public, let be more accurate here.\nplease remove \"The JDT compiler issues the warning explicitlyClosedAutoCloseable ....\" and make it like This method create in AuditListener open stream for validation data, it must be closed by {@link RootModule} (default implementation is {@link Checker}) by launching {@link AuditListener#auditFinished(AuditEvent)}. > getValue\nit is not ok. We can resolve this bad code.\nplease review commits, sorry if they are messy, I can not squash in main repo:\nhttps://github.com/checkstyle/checkstyle/commit/2b0ac1b899d0ff3dbde197b2bb1c9c579663f80f\nhttps://github.com/checkstyle/checkstyle/commit/9c6aa47b5f3eb2307ab005983bbd3b1d43a9fedc\nI refactored createListener to create streams when required getOutputStream(outputLocation) and getOutputStreamOptions(String outputLocation).\nIf it still messy, I will recreate branch.\nIf you have some concerns with such implementation, we can merge this PR, but discuss update in separate issue.. Please move explanation on why stream is not closed to getOutputStream(String outputLocation).\nUnfortunately there is no way to keep reason of suppression in same annotation, so javadoc is only place to keep reason of suppression. @kazachka , please add examples of separate validations for method parameters and lambdas to examples of xdoc:\n(o1, o2) -> o1.equals(o2), \n(e) -> e.toString().trim()\ne -> e.toString().trim()\nor similar.. done.. if this is not obvious how to make, we can postpone it for later.. if this is not obvious how to make, we can postpone it for later.. yes, looks strange.. we will take a look at the end of update.\nLooks like xdoc still have suppressions for main config.. hmm, what about such template ?:\n```\n/var/tmp $ javac YOUR_FILE.java\n[[PLACE YOUR OUTPUT HERE]]\n/var/tmp $ cat config.xml\n[[PLACE YOUR OUTPUT HERE]]\n/var/tmp $ cat YOUR_FILE.java\n[[PLACE YOU OUTPUT HERE]]\n/var/tmp $ RUN_LOCALE=\"-Duser.language=en -Duser.country=US\"\n/var/tmp $ java $RUN_LOCALE -jar checkstyle-X.XX-all.jar -c config.xml YOUR_FILE.java\n[[PLACE YOUR OUTPUT HERE]]\n```\n\n. I did partly automated update, there was a but of mess, so polishing will be late after enforcing.\nThere are bunch of places for improvement, regexp will require to be updated too to allow long lines only for urls.\n. this case was fixed.. updated. happiness for all - is tough.\nThis nuance nobody will remember, it far from obvious. \nWhat if we will put in assert message \"Null instance; assert required to calm down eclipse's 'The allocated object is never used' violation\" or just make single line comment above assert ?. comment was added. logic is hard to read.\nif should be like:\n```\nif (lambdaInTokens() ) {\n  if (token = Lambda){\n   tokens = getParamDefTokenToCheck(); \n   foreach (tokens) {\n     super.visitToken(ast);\n   } \n  }\n  else {\n   //skip\n  }\n} else { //tokens  is paramdef only\n   if (!isUnderLambda()) {\n      super.visitToken(ast);\n   }\n}\n. this should be calculated ones on moment of setTokens and then flag/fields value is reused in all visitTokens.\nNo need to calculate it each time.. catch is supported at http://checkstyle.sourceforge.net/config_naming.html#CatchParameterName\n$cat config.xml \n<?xml version=\"1.0\"?>\n<!DOCTYPE module PUBLIC\n          \"-//Puppy Crawl//DTD Check Configuration 1.3//EN\"\n          \"http://www.puppycrawl.com/dtds/configuration_1_3.dtd\">\n\n\n<module name=\"TreeWalker\">\n  <module name=\"ParameterName\">\n    <property name=\"format\" value=\"^[a-z][a-zA-Z0-9]+$\"/>\n  </module>\n</module>\n\n\n$ cat Test.java \nclass Test {\n  void foo() {\n     try {\n     } catch (Exception e) {\n     }\n  }\n}\n$ java -jar checkstyle-8.8-all.jar -c config.xml Test.java \nStarting audit...\nAudit done.\n```\nso please remove reference to catch at all.. > for lambda parameters.\n\"for lambda and method parameters.\"\n\nWhen code parses\n\n\"Attention: in AST it is possible that \". please provide example of code with trailing comments \"// violation\" to clearly show how Checks works.. please remove refence to catch at all. This check does not validate them.. please make line length to follow 100 symbols, it will be enforced by CI soon.. fixed. creation of new line in the middle force to update all values in Test file.\nthis process of cut is already too terrible, I just want to create as minimum changes as possible.\nIf tests and pitest do not complain, we can live without such cases.. good catch.\nI updated issue description with \"attention\" note and explanation.\n@subkrish , we need to keep DTD_PUBLIC_ID_1_0 unchanged and all other variable in this class.\nPlease create new variables DTD_PUBLIC_CS_ID_X_X with new values and add new keys for same value at method createIdToResourceNameMap of ConfigurationLoader.\nThe same should be done in other classes *Loaderwhere \"Puppy Crawl\" should stay and new filed with proper value be added:\n$ grep -Rl \".dtd\\\";\" --include=\"*.java\" *\nsrc/main/java/com/puppycrawl/tools/checkstyle/XmlLoader.java\nsrc/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportControlLoader.java\nsrc/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressionsLoader.java\nsrc/main/java/com/puppycrawl/tools/checkstyle/ConfigurationLoader.java\nsrc/main/java/com/puppycrawl/tools/checkstyle/PackageNamesLoader.java. @timurt  , what is status on this point? Is there any good reason?\nPlease keep replying to each point, it helps a lot.. base on https://github.com/checkstyle/checkstyle/issues/5648#issuecomment-386111791\nplease move test and inputs to it area of code,  as they are testing a lot of stuff (not only filter).. should be src/it/resources. as we expect only one violation in file, please put trailing comment where violation is expected.\n\"// violation\".\nPlease do this for all input files.. please remove this comment. It is unrelated.. brrr .... complete confusion.\nin issue we have \n\nSo, we can add a option named separatedStaticImports which means whether static imports grouped by top or bottom option are separated by local groups.\n\nso this option suppose to care only about separation between static groups and do not rule how statics are separated from simple imports. Please read issue description one more time. Am I missing smth ?\nSeparation between static and simple import is ruled by separated option:\n```\n$ cat Test.java \nimport static org.mockito.Matchers.any;\nimport com.util.Arrays2;\nimport java.util.Arrays;\npublic class Test {\n}\nrivanov@p5510:/var/tmp$ cat config.xml \n<?xml version=\"1.0\"?>\n<!DOCTYPE module PUBLIC\n          \"-//Puppy Crawl//DTD Check Configuration 1.3//EN\"\n          \"http://www.puppycrawl.com/dtds/configuration_1_3.dtd\">\n\n\n<module name=\"TreeWalker\">\n  <module name=\"ImportOrder\">\n    <property name=\"option\" value=\"top\"/>\n    <property name=\"separated\" value=\"true\"/>\n  </module>\n</module>\n\n\n$ java -jar checkstyle-8.10.1-all.jar -c config.xml Test.java \nStarting audit...\n[ERROR] /var/tmp/Test.java:2: 'com.util.Arrays2' should be separated from previous imports. [ImportOrder]\nAudit done.\nCheckstyle ends with 1 errors.\n$ cat config.xml \n<?xml version=\"1.0\"?>\n<!DOCTYPE module PUBLIC\n          \"-//Puppy Crawl//DTD Check Configuration 1.3//EN\"\n          \"http://www.puppycrawl.com/dtds/configuration_1_3.dtd\">\n\n\n<module name=\"TreeWalker\">\n  <module name=\"ImportOrder\">\n    <property name=\"option\" value=\"top\"/>\n    <property name=\"separated\" value=\"false\"/>\n  </module>\n</module>\n\n\n$ java -jar checkstyle-8.10.1-all.jar -c config.xml Test.java \nStarting audit...\nAudit done.\n```. not sure why you disabled it completely\nwe benefit a lot using xwiki in regression testing.\nAre you uncomfortable to make pull request to xwiki ? or just disabled to make all other fixes first ?\nJust let me know I am eager to help.\n. @timurt ,\nafter conversation with @rnveach : \nplease just move this Test to it folder, as one test class.\nIn future .... ones we end up with this file to be huge we can refactor it to multiple test classes grouped by Check package number, example XpathRegressionCodingTest.java.\nExpected path:\ncheckstyle/src/it/java/org/checkstyle/test/filters/suppressionxpathfilter/XpathRegressionTest.java\norg/checkstyle because own this domain, may be one day in far future we will migrate to new package names.. this issue will be closed right after  merge.\nplease reference here link to PR to xwiki, to clearly define till what time hack should stay , comment should be like \"till https:........\". please keep separator (empty line).. why check for null become required, you do not pass null at AbstractXpathRegressionTest. please explain reason of this update , following else create RootConfig.. it is unfortunate dependency between ITs, but we will think about it later.. why \"join\" ? I asked this questions before.\nif you postponing it for another issue please reference it or define reason.. yes, but lets do this as next PR. We need to merge this PR.. Why we need all of queries to suppress one violation but not the one only query ?. ok, we will think about this in next PR.. ok looks like it is due to the fact that Check report problem on non text element from code, but to some AST token. \nThat is weird and eventually be a problem. \nIf you agree , lets create issue on this and make it when xpath become fully completed.\nmy experiment:\n```\n$ cat config.xml \n<?xml version=\"1.0\"?>\n<!DOCTYPE module PUBLIC\n          \"-//Puppy Crawl//DTD Check Configuration 1.3//EN\"\n          \"http://www.puppycrawl.com/dtds/configuration_1_3.dtd\">\n\n\n<module name=\"TreeWalker\">\n    <module name=\"CyclomaticComplexityCheck\">\n        <property name=\"max\" value=\"0\" />\n    </module>\n</module>\n\n\n$ cat TestClass.java \npackage org.checkstyle.suppressionxpathfilter.cyclomaticcomplexity;\npublic class SuppressionXpathRegressionCyclomaticOne {\n    public void test(int a, int b) { //warn\n        if (a > b) {\n    } else {\n\n    }\n}\n\n$ java -jar checkstyle-8.10-all.jar -c config.xml TestClass.java \nStarting audit...\n[ERROR] TestClass.java:4:5: Cyclomatic Complexity is 2 (max allowed is 0). [CyclomaticComplexity]\nAudit done.\nCheckstyle ends with 1 errors.\n$ java -jar checkstyle-8.10-all.jar -t TestClass.java | grep \"4:5\"\n$ java -jar checkstyle-8.10-all.jar -t TestClass.java | grep \"4:4\"\n    |--METHOD_DEF -> METHOD_DEF [4:4]\n    |   |--MODIFIERS -> MODIFIERS [4:4]\n    |   |   `--LITERAL_PUBLIC -> public [4:4]\n$ java -jar checkstyle-8.10-all.jar -s 4:5 TestClass.java\n/CLASS_DEF[@text='SuppressionXpathRegressionCyclomaticOne']/OBJBLOCK/METHOD_DEF[@text='test']\n/CLASS_DEF[@text='SuppressionXpathRegressionCyclomaticOne']/OBJBLOCK/METHOD_DEF[@text='test']/MODIFIERS\n/CLASS_DEF[@text='SuppressionXpathRegressionCyclomaticOne']/OBJBLOCK/METHOD_DEF[@text='test']/MODIFIERS/LITERAL_PUBLIC\n```\n. done.. in same line could be multiple violation\nin same line:column it will be highly unlikely. So if we force Checks to report issue on AST nodes that have text from file, we can choose in generator always a node with text, so we will be exact. \n@timurt , Am I right ?. Lets move out of this huge PR:\n5877 - AstTreeStringPrinter should use 1-based column and consider tab size\n5878 - Generate single xpath query by CLI\n. @pbludov , please look at my message in gitter.. @ps-sp , please explain for what case you need this ?\nDetails withtout details, looks strange.. @ps-sp ,\nto have good name we need to find a reason how it could be possible to have after NEW token nonAnonimous class. Please look at my comment below.. Please remove default c-tor and lets use existing c-tor will all arguments explicitly defined.\n\nnot only represents anonymous classes but also object and array \n\nSo here is point, please name method exactly what it does getDetailsForAnonymousClassOrObjectOrArray\n\nar = new int[4];\n\nno details should be in this case only, please add it to UT input file that you created.\n\nnew String[] {\"br\", }\n\nthis case should do have right curly, and we need to find it and put in Details. This is should be separate processing branch in IF-ELSE.\ncode should be like:\nif (isAnonymous()) {\n} else if (isArrayInitialization()) {\n} else {\n  // it is array creation without curly braces\n details = new Details(null, null, null, false);\n}\n\nIf it doesn't then we return a dummy Details object without any details to avoid NullPointerException here\n\nAll other methods getDetailsXXXXX also can return Detail object full of nulls inside, but they use the same c-tor. Please reuse it.. name it \"generate-xpath-suppression\" and no short form is required. This mode should not be used very often.. it is better to listen event of https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/TreeWalkerAuditEvent.java to have exact DetailAST.\nXpath does not make sense(doe snot exist) out of TreeWalker, so it is more reliable to be listener/filter of TreeWalker.. it is ok, but might forget to update this list.\nWhat is we will keep this list in Filter  and have static method to verify if Check is supported ? or smth like this. in this place you can inject your generator as Treewalker filter to config.. Yes, reuse Filters to receive call on Event where DetailAst is present. \nbut now I see a nuance , filters is Treewlker are stored as Set - https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/TreeWalker.java#L72\nNo guaranty to be executed the last, so it mean that our injected filter can be executed first and receive all events even user already suppressed/filtered bunch of violations. So we could print suppression queries on violations that are already suppressed by user.\nAs additional verification, we can do custom AuditListener in addition, and just remove all queries that were reported in Filter but not present in AuditListener. In other words CustomFilter generate xpath queries for all passed to it violations, CustomAuditListener for each violation search in query at CustomFilter and print it.\n. @timurt , please review https://github.com/checkstyle/checkstyle/pull/5883#discussion_r192606843. As for me, violation should be there for alone and alone-or-singleline, but it should not be there at same http://checkstyle.sourceforge.net/property_types.html#rcurly\n\n```\n    Thread t = new Thread(new Runnable() {\n\n}); // this is OK, allowed for better code readability\n\n```. > As far as alone_or_singleline goes, isAnonInnerClassInit prevents an error.\nmake sense to have no error.. this is not expected.\nCheck should work as before in MT mode and completely compatible.\nThis Check will be good example of how all other Checks in the world(numerous amount of custom/third-party Checks ) continue to work as before.\nMore wide reason is at - https://github.com/checkstyle/checkstyle/issues/5140#issuecomment-396005863\n. All checks (FileSetCheck and Java Checks) should be executed in completely non MT mode if they do not have special annotation. All checks - think about third-party Checks too.\nPotentially java Checks could also be not ready for running in multiple instances (they might have all fields as static, that is weird but possible, only other code that make it problem to run by few instances). I did not found any update of our Check to make them thread-safe - https://github.com/checkstyle/checkstyle/commits?author=soon . That is good. This kind of mean that users might not implement Checks that have statics field. Even they have them, such Checks will not work. Sorry.\nSo We presume that different instances of Checks are safe to use in different threads. We do not consider right now ability to reuse same Check instance by multiple threads, but we ill discuss this during TreeWalker execution parallelization. . We have modules that cooperate between each other by means of static fields - http://checkstyle.sourceforge.net/config_annotation.html#SuppressWarningsHolder\nhttp://checkstyle.sourceforge.net/config_filters.html#SuppressWarningsFilter\nbut it will be resolved in https://github.com/checkstyle/checkstyle/issues/4831 , as we resolve this. We should think that it does not exists. This does not really block us, but we will not support such design of Checks/Modules/Filters. It will work for users with proper management of static fields. Any problems will be user problems.\nAll modules should be interdependent and should not know anything about other modules.. > so how will this come up in TreeWalker discussion?\nok, lets skip this.\n\nIs this documented in our xdocs or somewhere that we don't support these type of modules anymore?\n\nSome words are at:\nhttp://checkstyle.sourceforge.net/writingchecks.html#Limitations\nYou cannot see the content of other files. You have content of one file only during all Checks execution. All files are processed one by one.\n\nSo we supported them before, but no longer.\n\nAll Holders will work for long time even in MT mode. But we will not guaranty that will keep it forever. As we(probably only I) keep in mind that we are single file validation tool. We do have multi-file, but for now we do not support them as first class entities, they are hacks and till we make a decision on them they are in unclear status. We could drop them, or make them proper API to execute.\nSimilar decision was on TypeAwareChecks. For now we do not support them, and one day completely remove. And may be in future , we will bring it back with better support.. fix module name.\nPlease provide code example to show user cases where violation will(will not) be with this config.\nJust place // violation on line. . is this line the same as above ?. please register your Check in google_checks.xml\nand at http://checkstyle.sourceforge.net/google_style.html (see xdoc)\nPlease also add ITs for google style, they can be \"copy\" of UT.. Hm, https://checkstyle.org/config_naming.html#ParameterName\nDo you know test case when it do validation on catch parameter ? Look at PR description, I failed to validate it.\nThis should prevent catch parameter validation:\nhttps://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/ParameterNameCheck.java#L184. workspace and location of cloned repo could be different.\ndid changes to wording, pleas recheck.. I added such cases to non-compilable.\n\njust to satisfy eclipse's issue which isn't even an issue for me.\n\nAfter import to IDE, there should be no ERRORs. No excuse for this simple rule. \nIdeally there should be no warnings, but we can ease this rule for now, as  it does not \"block\" UT execution.\nWithout such simple principle, it will hard to attract new contributors from aside.\nEntrance threshold to project should as minimal as possible to ease start of contributions.  . please use new public name for DTD. fix name. fix name. please fix all URLs , now they are https://checkstyle.org/.... hmm, Checks that are in our library should be referenced as simply \"LeftCurly\".\nas you can see at examples at https://checkstyle.org/config_filters.html#SuppressionXpathFilter\nI am ok to move this to separate issue, to let us merge this PR quicker.. I think you can use \"foreach\" here, and do not mess with i. please make a method DefaultConfiguration getTreeWalker(Configuration)\nit will make code easy to read. This is not good.\nxpath implementation is general and do not know where and how it is used.\nAll this imports/dependencies are are not good to have on this level. Please move host classes to package where Main is located, as all of them are part of CLI, not related to core of xpath.\nyour cycle dependencies (mvn clean site -Pno-validations && firefox target/site/dsm/index.html):\n\nvs\ncurrent https://checkstyle.org/dsm/index.html\njust FYI: CLI functionality is growing, I am not sure we need special package for it right now, but eventually we will do this.. in build output I noticed:\n[INFO] Running com.puppycrawl.tools.checkstyle.xpath.ElementNodeTest\n[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.005 s - in com.puppycrawl.tools.checkstyle.xpath.ElementNodeTest\n[INFO] Running com.puppycrawl.tools.checkstyle.xpath.XpathFileGeneratorAuditListenerTest\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE suppressions PUBLIC\n    \"-//Puppy Crawl//DTD Suppressions Xpath Experimental 1.2//EN\"\n    \"http://checkstyle.sourceforge.net/dtds/suppressions_1_2_xpath_experimental.dtd\">\n<suppressions>\n</suppressions>\nit is not ok to allow print smth to build, build output should have only build related output.\nALL UTs should be silent, and do output only when problem is happened.. done. done.. done.. please make it as a link (wrap by html tag) to issue. ok, Now I see it.. It will be better to move this method to XpathFileGeneratorAstFilter and do not expose getEvents and getQueries at all from XpathFileGeneratorAstFilter.. please remove this method, it is used only in tests. It is not ok to make public accessors only for tests.\nIf tests so desperately need access to private stuff - they should use reflection.\nthe same for addQuery.. it was good for quick testing ... I agree.\nBut please redo it test to make it more functional , load java file, some config, validate it, recheck output.. checking that c-tor works is not enough, please put in XpathFileGeneratorAuditListener some stream and compare stream result with expected.. fixed.. confirmed, there is empty line at the end.. as for me, there should be no violation for alone_or_singleline as it is single block on line.\nno violations at InputRightCurlyAloneOrSingleline.java#L69:29 and also to InputRightCurlyWithoutShouldStartLine.java#L53:27 \nWhole idea of this mode to allow single line stuff, nothing is mentioned about multi blocks on the same line. If user is ok to keep some block single-lined , I do believe he is ok with multiple blocks too.\n@rnveach , please confirm.. for alone - violation\nfor alone_or_singleline - no violations.. we need to skip validation of this expression blocks, as validation will be done by special new Check.\nIt is better to do no validation, rather than bothering user with false-positives.\n(I changed my mind in comment below). I changing my mind .... in this particular case - there should be violation then user start to play with location of \"}\".\nI am ok to allow only mode {{ }}  when braces on STATIC_INIT is the only token within OBJ_BLOCK .\n@rnveach , are you ok with this ?. Sorry, I meant to type INSTANCE_INIT.. > So, this violation stays then right ?\nyes.\n@rnveach , please share your position on this case.. @rnveach , a lot of naming Checks reuse name.invalidPattern - https://github.com/search?q=path%3Asrc%2Fmain%2Fresources%2Fcom%2Fpuppycrawl%2Ftools%2Fcheckstyle%2Fchecks%2Fnaming+filename%3Amessages*.properties+repo%3Acheckstyle%2Fcheckstyle+%22name.invalidPattern%22\nin google style config \"all\" naming checks override general message to be a bit more precise. So in this Check override was done the same way.\nI do not remember exact reason of such overrides, probably it was a problems to read violations in general report - http://checkstyle.sourceforge.net/reports/google-style/guava/ so we decided to make it more exact.\nAt least for now, it is better to be consistent. I am ok to have override here.. please add it to all CIs, you missed:\nhttps://github.com/checkstyle/checkstyle/blob/master/.circleci/config.yml#L21  (pitest)\nhttps://github.com/checkstyle/checkstyle/blob/master/distelli-manifest.yml#L9  (javadoc regression)\nJust FYI we also have : buddy.yml, codeship-steps.yml , but such CIs are limited for master only , so I did not have much time to update them too to skip builds, so for now ok to skip them in update.. | is missed. as next PR, please update jenkins file to have ability to run several commands and some of them in parallel.. ok, lets finish this issue.\nLets have no violations on {{ }} (when INSTANCE_INIT is completey(without any symbols/spaces/.... in OBJ_BLOCK)). We should mention this in xdoc.\nAny other cases should be violated in alone mode.. yes, this is not very clear point.\nCommonUtil is used for common empty arrays of jdk standard types.\nBUT new empty arrays are not JDK, they are custom to xpath. Placing them to AbstractNode as public member is not very good, as it is not clear what for and how to use it. Placing them to AbstractNode as protected ..... kind of ok, but i personally dislike protected, even in this case looks like no harm possible. So I decided to keep them private close to place where \"optimization\" took place, ones some another good practice appear - it will be easy to refactor.  . Lets have no violations on {{ }} (when INSTANCE_INIT is completely (without any symbols/spaces/.... in OBJ_BLOCK)). We should mention this in xdoc.\nAny other cases should be violated in alone mode.\nfrom https://github.com/checkstyle/checkstyle/pull/4247#discussion_r197651247. @ps-sp , test verification become too complicated.\nPlease copy this file 2 times and use each of 3 files for each mode separately,  and define in line \"// violation\", withtout any \"if\".\nIn javadoc of input class , please define for what config it is used. \nIn this it will be easy to validate work by simply review of in Input file (config defined in javadoc, expected violations inlined as tralling comments). please move this method above all.. please move method to most bottom.\nUtils methods, should be read the last in test class, if name is good, usually never read it.. no,no,no\nreflection is last resort only. Do you have problems to make this Test by some Input file and predictive result ?. if you do not want to fix usage of long name now - please create separate issue on it. Lets not forget it.\nThere should be simply \"LeftCurlyCheck\" for all standard Checks, and fully qualified name only for thirdparty Checks.\nWe have map of standard Checks, so we have way to convert full name to short name - https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/PackageObjectFactory.java#L408 (there is no public method to question but we can extend PackageObjectFactory). I did a comment below it, here it is(slightly modified):\nMap<String, String> map = new LinkedHashMap<String, String>() {{\n      put(\"alpha\", \"betical\");\n}}; // it's ok. no way to make this code looks better, it should be special exception from rule.\nexamples of AST are at https://github.com/checkstyle/checkstyle/issues/4057#issuecomment-398649978. it is better to not invent new terminology and use JDK terminology - https://docs.oracle.com/javase/specs/jls/se9/html/jls-7.html#jls-7.5\ntype-import vs static-import. . please define here what does empty value (\"\") mean for new property.\nIt is better to do the same for groups property too.\nhttps://github.com/checkstyle/checkstyle/issues/5724#issuecomment-399989842. As we define exact config for whole input file , please add trailing comment here \"// violation\".\nIt will allow us to read Inputs and verify behavior without jumping to UT file for expectations.\nInput fail should have all: config, input content, explicit/inlined violation markers.\nFYI: One day we will make such format mandatory for all Checks, and verification of \"// violation\" to match expected violations, as we did in ITs. good.. @timurt ,\nALL tests that require magic of reflection or fancy mocks should have comment that explain reason of hack.\nif tests are not required please remove them.\nPR become too big, and we need to merge it, so if this reflection based test is do some coverage that missed in other tests, please put comment \"till \" and open new issue on this to complete it right after this PR, diff will be much smaller , easier to resolve.\n. @Bananeweizen , can you recheck this German translation.. @Jajawah , is it good translation ?. @Nobuyuki-Inaba, please help us to make good Japanese translation. . @victorwss, please help us good translation to Portuguese . @precoder, it would be awesome is you can suggest Turkish translation.. @Apache9, please help us with Chinese translation.. we have java9 section in resources - https://github.com/checkstyle/checkstyle/tree/master/src/test/resources-noncompilable/com/puppycrawl/tools/checkstyle/grammars/java9\njust put a special comment to let CI verify that it actually compilable in java9.. unicode symbols as is should be used. \n@jodastephen , If you start to change your commit, please user Google translator to have non escaped symbols. In worst case we merge ugly translation, and other update it to better later on.. I would rather void phrases that we we enforce smth on compiler.\nMay it be better smth \"enforce public be explicitly defined by human and not implicitly added by the compiler\"\nand in other places.. please update examples to have trailing comment  \"// violation\" - it help users a lot to understand how Check works and what to expect from it.\n// check enforces code contains \"public static final\"\npublic static final String UNKNOWN = \"Unknown\";\nstatic final String UNKNOWN2 = \"Unknown\";   // violation. it is better to explain that we force \"public\" or \"private\". \n\"abstract\" and \"default\" are enforced by compiler, not by checkstyle.. We need not unicode-escaped, just to be easy to read by others. Thanks a lot in advance.. Please remove this line , your last name from white list.. moved to #5979. we more like exceptions on default (smth unknown), example:\nhttps://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/checks/UncommentedMainCheck.java#L102\nhttps://github.com/checkstyle/checkstyle/blob/master/src/test/java/com/puppycrawl/tools/checkstyle/checks/UncommentedMainCheckTest.java#L114\n. this getParents and checking for nulls looks suspicious.\nSome gut filling tell me that we should use - https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/utils/ScopeUtil.java#L100\nand be safe\nPlease also add to UT input cases like, and most likely in such case it is not public class, probably decompilation can say for sure:\n```\n$ cat Test.java \ninterface Test\n{\n  default void test() {\n    class A {}\n  }\n}\n$ javac Test.java \n$ \n``. please move PRIVATE to the top of this group, to not mix visibility and \"kind\". . please add\u3002` , just to be consistent. please put period as in English.. please put period as in English.. please put period as in English.. please put period as in English.. please put period as in English.. please add Chinese period symbol . please explain this intention to have separate test. \nWe usually never do like this, grammar tests are for checking AST structure only, not running any Checks.\nprobably we misleaded you.\nYou need to keep all UTs in one file.\ncreate folder \"modifiers/interfaceimpliedmodifier\" at https://github.com/checkstyle/checkstyle/tree/master/src/test/resources-noncompilable/com/puppycrawl/tools/checkstyle/checks\nput InputJava9PrivateMethodOnInterface.java in new folder. Ones we migrate to jdk9 compilation, we will move all such inputs to regular location.\nExample of test on non-compilable input - https://github.com/checkstyle/checkstyle/blob/master/src/test/java/com/puppycrawl/tools/checkstyle/checks/design/FinalClassCheckTest.java#L62. please remove comment.. > is not being implied by the compiler on interface fields\nPlease void such phrases over compiler, lets phrase it as it is pure style demand.\nControl whether to enforce that <code>public</code> is being explicitly defined or smth similar.\nPlease fix in other properties.. please add here small snipped of code to show what behavior will be (with trailing comments \"//violation\"). please add here small snipped of code to show what behavior will be (with trailing comments \"//violation\").\nUnfortunately not that much good cases in our documentation to show you example, but user constantly complain about this. We try at least in new Checks enforce this good practice.\nGood example: http://checkstyle.sourceforge.net/config_annotation.html#AnnotationLocation , there is human description, config, code example.. please add UT for:\n1)\ngroups={}\ngroupsStatic={}\noption= not top|bottom\nThere should be no effect of groupsStatic at all, no matter what value it has.\n2)\ngroups={org, java}\ngroupsStatic={java, org}\noption = top|bottom\nto make sure that groupsStatic make its own effect .\nand in input file put some imports that will fall to \"other\" group and should be just sorted or not (if sorting is enforced).\n3)\ngroups={org, com, java, }\ngroupsStatic={}\noption = top|bottom\nsortStaticImportsAlphabetically=false\nto make sure that groupsStatic make its own effect  to order \"com, java, org\" (alphabetically).\n. https://travis-ci.org/checkstyle/checkstyle/jobs/398313438#L672\nplease name it in better way \"iface\" ==> \"interfaceAst\"\nCIs must pass.. hmm, I requested UT update in code, not a report update.. I think it is more precise:\n\"Checks for implicit modifiers on interface members and nested types.\"\nif you agree please change here in all other plases. . > (true).\nI am not sure what does this mean.  If that is leftover from smth in past please remove (and in all other properties)\n\nis explicitly coded\n\nis explicitly coded on field. is explicitly coded ==> is explicitly coded on <smth> . \nPlease fix in all cases.\ndo not forget about xdoc.\nunfortunately generation of xdoc by javadoc is not finished yet.. > checks that methods ...\nchecks that all implicit modifiers on methods .... explicitly coded on field.\nplease fix all other places.. from https://github.com/checkstyle/checkstyle/pull/5974#pullrequestreview-132677925\nPassing CI is good, but not enough, we need prove that there are no exceptions on real life ugly projects.\nPlease read README of https://github.com/checkstyle/contribution/tree/master/checkstyle-tester\nPlease launch launch.groovy on all projects that are referenced in property file(just uncomment all). There should be no exceptions. Unfortunately there will be too much violations to share in web, so please select 1-3 projects you like(openjdkX is good candidate) and run report generation on them only and share it on github.io for us to review.\nIf you have any concerns or questions do not hesitate to ask us.. this is good point, thanks for commenting it.\nBut missed violation (false-negative) is ok for some time. False-positives are blockers for users who have ERROR severity in their builds. Temporal false-positives is what we try to avoid as much as possible.. please add here \"com\" import, to make it clear that it will be placed in group3(default/all-other). @jodastephen , I still see \"(true)\" . \nPlease keep replying \"done\" or some disagreement or .... on each review point. Please trust my experience it helps a lot.. CI build have tendency to fail periodically by reasons unrelated to code changes.\nIt is always required to have ability to restart PR build by manually.\nit should be possible.. Lets not bother about pricing while we are so underuse hyper.\nuse m1 as default for all.\nit should be: \nrunOnHyper(\"package\", \"mvn -B package\")\nsomewhere in future, when we come to full quote usage it should be runOnHyperM1 runOnHyperS4.\n. Please also try to reuse stage name, instead of copy paste.. I still think that location of such inputs in UTs will not prevent future regression. UT Inputs are manually crafted in weird way for testing, and on fix engineer presume that old expectations are wrong :).\nOne day there will be an issue, and smb who try to fix it, will make a fix and after that persuade all that all previous behavior was wrong so expected results should be different .... and we make regression. \nThe same scenario was there already, that is why we missed such regression. I missed this on code review, even I try to be over caution and over demanding .... I missed it.\nIf we place such cases (in addition to UT) to IT, it is different story at least for me. As ITs works on strict config and changes in them is very rare. Especially if call them like \"InputFromSpotify\" , and name test like testSpotifyImportLayout and ... Put in Input \"WARNING: do not change file as it represent exact layout in users codebase\" or smth similar.\nI hope this will be a red flag during code review.. I ordered values just to be logical to read:\nalone\nalone_or_singleline  is alone with nuances\nsame  is alone_or_singleline with nuances.. We do not need reorder everything now.\nWe can make issue on this.\nAll I need is to clarify this particular property to make easy to read, sequential by meaning (it is just coincident that it looks like alphabetical order)\n. it is better to avoid same work in description of same.\nI used \"like\" , please recheck. changed both lines. We should not treat such cases as multi-block. No following multi-block - curly should be alone.. what is reason of making code smaller ?\nnow it become not clear \"getCheckMessage on checkConfig and msgPreceded\" \nif put in arguemnt big object  and use only one item from it, good sign that smth is wrong is design.\nyou can optimize horizontal space by:\nMap<String, String> messages = checkConfig.getMessages();\nfinal String[] expected = {\n            \"12:16: \" + getCheckMessage(messages, msgPreceded, \"<\"),\n}\n. @pbludov ,can you explain this warn ?\nIntention of such IT was to have no violations on them as in real code.\nIf additional changes are required to configuration - we need to make them and warn users that on upgrade they need to upgrade their configs.\nlooks like problem is due fact that before 8.3 extra spaces between imports were ignored. Now it is a problem.\nSo users have to use groupsSeparated={SAME AS GROUPS} and separatedStatic=true to have no violations.\nAm I right ?\nIf yes - please update IT Inputs to have no violations.. @pbludov , please explain this update.\n\"under\" is default for option.\nstatics are going together with types (no seprations between them). So defining separatedStaticGroups=true should have no effect in such mode.\nIf yes, we need to mention this in xdoc. If no .... please explain.. I think we should mention in xdoc that new property is efficient only when option is \"top\" and \"bottom\".\nThe same is better to do for staticGroups.. fixed. added special sentence to make it clear.. not sure what will be best ... just removed \"this is ok\".. synced.. synced. excludes is string https://maven.apache.org/components/plugins/maven-checkstyle-plugin/check-mojo.html#excludes , so double comma is required to make exclude multi-line and valid.. Doesn't matter. Any extra if will force us to deal with coverage and pitest. for => by\nyou use by in all other cases.. unrelated for this PR, but good catch, fixed at https://github.com/checkstyle/checkstyle/commit/456be1840069df693737a7f6ffb462c64382d8a4. suppression file belong to certain Filter , not a whole checkstyle.\nWe need to keep context of certain filter implementation in its documentation.\nhttp://checkstyle.sourceforge.net/config.html#XML_Structure should stay only for checkstyle global files: config, packages. I do not like copy-paste of DTD content .... lets think about it a bit later.. I do not see a reason why to keep it. DTD of this filter should be explained in it own documentation section.\nPlease explain why you want to keep link to XML_Structure .. updated. updated, but as \"This custom name ....\". fixed.. fixed. IDEA cheated on quotes ... . whole section need to be redone - https://github.com/checkstyle/checkstyle/issues/6011. beginProcessing and finishProcessing should be executed on each instance of module(in each thread) but before actual multi-thread processing is started.\nLets think about it in other PR/Issues. By this PR I just want to place annotations to other Checks and it is completely ok  to change annotations when we come to actual MT implementation.\nSo this PR is just declaration of intend, no obligations.. eventually yes, IDEA keep complaining on them so for now they should stay.. we will move them back when it become required. . new subsection will be a links to examples, it is another issue - #5395. Ones we agree on format, we can make it \"approved\".\nnew subsection will not explain DTD, I try to avoid DTD explanation in xdoc and let user read it himself, but ideally just looks at examples and make what he need.. done. done. done. done. first paragraph was removed.. done. Direct link is more user friendly, I saw a cases when users do not understand how to get to file in such search result.\nChange that we will change location is not big.\nWe used such searches only for content in file, that is very reasonable as as content it changing and direct link to line number will not work. . see above. Please change \"Limitation\" to \"attention\".\nIt is by design and intentional behavior, so it is not a limitation. . it is rebase over local master, should be just \"master\". it is rebase over local master, should be just \"master\". done. strange. I did it. \ndone.\nverified after push to remote. strange. I did it. \ndone.\nverified after push to remote. strange. I did it. \ndone.\nverified after push to remote. as agreed in chat, we will reconsider such steps in separate PR. name should tell what it do.\nname should be \"no-error-imports-guava\". we do not need just execution .... it is not no-exception validation.\nWe need to make sure that there are no errors in report.\nplease grep .ci-temp/contribution/checkstyle-tester/reports/guava/site/index.html to make sure report is empty. name should be \"NoErrorTest - guava imports\". please add tests for all other modes - http://checkstyle.sourceforge.net/property_types.html#lcurly\nfor second nlow case ... try \ncase \n       VALUE:. please make sorting in separate/first commit of this PR (two commits in much better).\nWe try to keep formatting aside of functional change. . looks like I already lost a track of checkstyle-cheker project ...\nall violations will be \"warning\", please make name \"no-warning-....\"\nhttps://github.com/checkstyle/contribution/blob/master/checkstyle-tester/checks-import-order/checks-imports-error-guava.xml#L10. please do grep -R -A 5 \"&#160;Warning</td>\" . | cat , and do exit 1 if content is not empty. If will be good to print content before exit.. any warnings. Yes, it will be good to print either ID or Check name.\nThe same as our cli output does.. @rnveach , if that is for all options , is it better to make separate issue ?. there might be numerous use cases where users play with extra blocks to get code more readable.\nBe careful with extra demands from user, as you do not know user's intend.\n\nSo, there should be only one child in case or default, and the child must be a SLIST\n\nthis is not a business of this this Check to demand this.\nIt will create one move wave of issues to not validate this.\n\n\nfor case 5:  {         }      break;\n\nthis should not be a problem for eol mode. Fact that smth in out of some visibility scope is not business of this Check. Check should validate only first block left curly. This Should mentioned in documentation. All other blocks that are under case should be ignored.\nThere should be another Check that demands one block under case/default.. I thought about it, persuaded myself to not do this, as thetr will be no benefits as tests are used in strict workflow, make it static will force it to be uppercased, so getter will return constant, .... done.. please add case:\ncase \n    5:\n { // OK, wrapped line. please add:\ncase (1\n                       +0):\n            { // warn\neol should work file on wrapped code too.\nAs we have a Check in 3 modes, it is kind of 3 Checks in one.\nIt would be awesome to have such input files the same between all of modes with difference only in comments over class and inline comments.. case 7\n                :\n            { // warn\nOk. Please recheck what is pushed, I still see only case (1+0): without wrapping. testLambdaParameter ==> testLambdaParameterNoViolationAtAll. please add multiline comment above to make it clear that no violations are expected, as lambda is covered by  another Check.. Check is changed in non simple way - we need do regression diff testing, please run on all projects.\nThere will be too much differences if we run them in simple way as we do usually.\nSo we need to make master config with only one Check ParameterNameCheck , Patch config with two Checks (ParameterNameCheck, LambdaParameterName) to make sure that after change violations are stay as before, the only difference is name of Check in violation.. Please restore basedir usage, if it if not required, it should be done in separate commit or PR.. lets completely forget about such option, please remove \"WithoutShouldStartLine\" from name. please remove \"WithoutShouldStartLine\" from name.. did you mean \"No violation\" ? this is the  same case as above ( in diff ).\nLooks like I forgot some nuance or ..... please explain.. why two violations ?\nI do not see it in UT expected results. Please explain.. @rnveach , do you think we need to add all other basic standard annotations ?. Please add test case for multiple annotations and annotations with parameters. Please add multiline comment over top class to explain that such file supposed to be used with strict config.\nPlease add trailing comment on each line in input files where violation is expected. @rnveach , what is a difference with line 108  ? \nhttps://github.com/checkstyle/checkstyle/pull/4247/files/3510f1ee0b09371d3f7b6154e34e2859ebc3c5d7#diff-a7e700698e09368ce7408af88bf91357R108\nCheck should ignore cases that it can not validate. New violation will mean new violations over user code(new behavior), but behavior should be the same.. https://docs.oracle.com/javase/8/docs/api/java/lang/package-summary.html\nSection \"Annotation Types Summary\".\nFunctionalInterface should be added to be default.. This input file is intended to be used on strict configuration: max=0. TokenTypes.ANNOTATION is just another constant reference, if such reference in method code ( for example) trigger +1 for counting it should be counted in annotation too.. I didn't mean this.\nPlease create code sample like:\n```\nvoid Foo() {\nint v = TokenTypes.ANNOTATION;\n}\n```\nAnd look on how Check react on such code for counting. Ok, the same to should be inside annotations. Please place all new annotation types to new line and you will notice that you missed one default type. Please add link to gihub filter by bounty label.\nA lot of user still unfamiliar with GitHub features.. As I mentioned before.\nNo unrelated refactoring in functions changes.\nPlease explain change of order and move it in separate commit/PR.. Same about above. What was a failure message ?\nWhy ordering should be like this ?\nIt worked fine before, what update force whole ordering be different from ordering that we have in master?. Ok, thanks a lot for explanation, let's keep a chance in this commit. Explained above. Did you run this case by CLI to verify behavior ?\nhttp://checkstyle.sourceforge.net/cmdline.html#Command_line_usage\nPlease share with us out put of execution on this configuration and input file in a format of https://github.com/checkstyle/checkstyle/blob/master/.github/ISSUE_TEMPLATE.md .\nPlease also change ERROR to \"violation\". Please review http://checkstyle.sourceforge.net/config.html#Severity. sorry that I forgot to fix this in rush to fix major problem, now it is fixed in master. make it simple \"MyTest\". \"violation, the first letter should be in lowercase\".\n@rnveach , please suggest better wording if required.. \"Configuration: to require format on two or more characters started by lowercase\". I missed it, my bad.\nthis item should be skipped.. please restore comment on how it was - \"... lowercase\".\n\"pattern\" usage is confusing as it might be referencing of Check property (even it is \"format\"), you mentioned only part of \"format\" it is also confusing a bit.. http://checkstyle.sourceforge.net/config_metrics.html#ClassFanOutComplexity_Description\nlooks like make a copy of tokens that Check is visiting.\nSuch copy is error prone .... lets redo such \"Iterates over the list of tokens\" point and make it like \"Iterates over the list of https://github.com/search?l=&q=path%3Asrc%2Fmain%2Fjava%2Fcom%2Fpuppycrawl%2Ftools%2Fcheckstyle%2Fchecks%2Fmetrics+filename%3AClassFanOutComplexityCheck.java+repo%3Acheckstyle%2Fcheckstyle+%22getRequiredTokens%22&type=Code\". This check validate only explicitly marked classes with \"abstract\" modifier to match a format. No modifier = no validation.\nplease make comment like OK, no \"abstract\" modifier. good catch but please make one more example with length=1 or 2 or 3 to show user what is possible to archive by other values.\nIn one example please make \"xxxStatic=true\", please make example with validation over only variables not a class names. Make example for user specific abbreviation like allowedAbbreviations=\"CSV\" and line that show that XML become illegal. . abbreviations ==> abbreviation (in both cases)\nas each variable is validated separately. allowedAbbreviations is plural to show that it is collection, not a single value.. \"violation, it allowed only 2 consecutive\" ==> \"violation, found \"NUM\" but it is allowed only 2 consecutive\". // OK, abbreviation \"N\" is of allowed length 1\nPlease make extra line to be int secondMYNum; // violation, found \"MY\" but allowed length is 1. this is not OK.\nALL new lines should be covered. this ignore list is unfortunate technical dept that we have, one day we will resole it. please inline this method to place where hasAllowedAnnotations is used, no need to wrappers, that keep same name.. if you want this method to be util .... it should be in some general util class, special util class for single method is not OK.. for now I am not 100% sure what is right way, lets keep adding \"Configuration\" for now, it might be useful anchor for us in future (ones we start generating xdoc from javadoc). As you see now, having \"copy paste\" is pain to maintain.. interesting concept to read it more clearly ...\n@ngeor , can we make it like ?\n&& (getMethodsNumberOfLine(ast) <= minLineCount\n              || AnnotationUtil.hasAllowedAnnotations(ast, allowedAnnotations));. hmm \"class members and nested types.\" , I thought that you postponed idea to validate members for now ... \nplease clarify or remove all references of \"members\".\nI will continue review ones we clearly define what we are going to do in this issue. \nAll future ideas/plans should NOT be added now and should stay in issue tracker.. @rnveach ,\n\nWe don't have a check that verifies tests start with the word test?\n\nI do not remember such Check. It is kind of naming format match based on annotation ... good idea to create such Check.\n@ngeor ,\n\nor I can fix all the tests in this file to start with test\n\nplease send us fix in separate PR, you will be welcome. No need for issue to be created, just put prefix \"minor: \" in commit message and do PR.. please explain this change. this is impossible to read properly.\nplease store result of getAnnotation in some variable to reuse in \"result = annotation != null\". @ngeor ,\nplease create issue.. \"Here it is with 4 spaces\" is good.. @rnveach , please reply.. @rnveach , please reply.. @rnveach , \nThis Check is not javadoc-ANTLR based, and need to be redo completely.\nSo right now all such Checks (regexp based) are supported by community in matter of no big damage, but such Checks are skipped from our usual demand for quality.\nSo if it works a bit better than smth similar close by, it is ok for now.. in classes and enums ....\n@rnveach , should be count enum as class or it is special type .... so in this case Check should be named \"TypeMember.... \". from your code:\n\nif (ScopeUtil.isInClassBlock(ast) || ScopeUtil.isInEnumBlock(ast)) {\n\nhttps://github.com/checkstyle/checkstyle/pull/6067/files/5d14b3055a509afd86bb14071eae9a72df1d0ff6#diff-637f7830124c584d7868e0dbae22e4abR162\nwhat about enums inside enums ... weird stuff ... https://stackoverflow.com/a/8941089/1015848 but possible.. this is corner case .....\nthis is declaration not real usage of this type .... we need to come to original reason of Check is it searching mostly for type instance/usage or just any possible reference .... \nlets postpone this to separate issue to let us merge this long lasting PR.. > If user wants to restrict between class/eunm parent, they can use xpath suppression.\ngood catch, we almost forgot to add test to prove xpath support.\n@jodastephen , you can find examples at https://github.com/checkstyle/checkstyle/tree/master/src/it/java/org/checkstyle/suppressionxpathfilter \nSorry that we did not raised this in advance, such tests were introduced recently ... ALL checks will follow this, but NEW Checks must follow it.\nIt should also be added to list https://checkstyle.org/config_filters.html#SuppressionXpathFilter\nsource is at https://github.com/checkstyle/checkstyle/blob/master/src/xdocs/config_filters.xml#L663. Name of the check should stay the same. I call back my original question.. please move log to visitToken level this will allow to read algorithm of processing from \"main entry\" method of each Check.\nWe try to keep this pattern where it is possible.\n. @Bananeweizen , can you recheck this German translation.. @Jajawah , is it good translation ?. @Nobuyuki-Inaba, please help us to make good Japanese translation.. @victorwss, please help us good translation to Portuguese. @precoder, it would be awesome is you can suggest Turkish translation.. @Apache9, please help us with Chinese translation.. as this test input has \"//violation\" please add config description to type comment to let all read it clearly without scrolling back to UT.. as this test input has \"//violation\" please add config description to type comment to let all read it clearly without scrolling back to UT.. @ngeor ,\ninteresting point ..... \"target/ignored.txt\" suppose to be sorted, to keep diff on ignored under easy control.\nPlease try to revert this change(try one more time) and share details in separate issue.\n. please explain why v become V ? . plase rename to execute\nWhy Integer? not a simple int. do you have in API methods isHelpRequested ?\nto make our code like:\nif (CommandLine.isHelpRequested) {\n CommandLine.printHelp\n} esle {\n// do smth\n}\nto my mind it is more readable code.. why you need instance of Main ? If CommandLine need information from annotations, can you use just class reference ?\nIs it possible to keep all CLI arguments on some inner class, and keep Main as orchestrator of execution ?. this looks suspicious ...\nyou used it only ones in one method.\nis it possible to put parseResult to call method and then to validateCli to avoid this field creation at all.. please explain why filed is required.\nWe tried to avoid fields as much as possible in whole project (extra field clear sign of bad design ... in my opinion).. please explain \"implements Callable \". each suppression should be explained, please add comment.\nOne day it will be questioned, future engineer need to know a reason why you used suppressions\n. ?. good to know.\nWe can \"-V\" I see no problem with it.. Please remove \"ok\" from all type names.. you missed tag properties, it result exception in output https://travis-ci.org/checkstyle/checkstyle/jobs/443290734#L764. or @Image='CliOptions' we do not have such top level class, please remove.. please mark it as \"wont fix\" instead of \"false positive\". . please do us a favor and make CliOption class here too.\nThe same reason as we discussed in Main.. please move it to CliOption class. please move it to CliOption class. please move it to CliOption class. please move it to CliOption class. please be consistent with next catch:\n<set exit codes ...>\n<print messages>. Why CliOption now it in change to run Checkstyle ?\nCli is just one way to configure execution, and it collects all parameters, and this class should only do CLI related logic and nothing else. All orchestration of how to run checkstyle should stay in Main class.\n\n. @remkop , please keep replying to each point as \"done\", it helps.. can this , and few method below be returned to Main ?. @remkop ,\nI might miss smth , but , it is use one place at https://github.com/checkstyle/checkstyle/blob/ad9d8ec298752a589597c3aae58a30da253fad48/src/main/java/com/puppycrawl/tools/checkstyle/Main.java#L169 that in Main class. \nIt will require cli.getExclusions() but we can change method and put result of this method as argument. . please add  ImportOrder has by design limitation to enforce empty line between groups (\"java\", \"javax\"), there is no flexibility to enforce empty lines between some groups and no empty lines between other groups.. please add <-- message contains no message text to works well in multi-language environment. -->. @timurt , please explain this suppression ?\nwhere is raw type ?. Please report an issue on Saxon to update evaluate signature. And we need to use this as reason \"suppressed till (link)\" in javadoc.\nAs it is Idea inspection , please disable it by javadoc tag.. please move this constant to CliOptions class, to let this class own all about cli.. please move this constant to CliOptions class, to let this class own all about cli.. getFilesToProcess need to be moved right after execute, to let read code as text by simply scrolling from to bottom.\nthe same problem is with getVersionString, just need to be moved to be right after main.\nplease do not be shocked, but we do really care about this :)\nOne day it will be completely automated, for now we did only half of way to this target.\nHere is diagrams to help see it visually:\nhttps://methods-distance.herokuapp.com/dsm?source_url=https://raw.githubusercontent.com/checkstyle/checkstyle/ea98b563e16b0c2bc09ee61d2824bdf0f1ea4a86/src/main/java/com/puppycrawl/tools/checkstyle/JavadocPropertiesGenerator.java\nhttps://methods-distance.herokuapp.com/dsm?source_url=https://raw.githubusercontent.com/checkstyle/checkstyle/ea98b563e16b0c2bc09ee61d2824bdf0f1ea4a86/src/main/java/com/puppycrawl/tools/checkstyle/Main.java\nfirst link - all is fine.\nsecond link show a problem, minor problem.\nSorry that we are so fanatic about easy to read code.\n . Not ideal, we treat test code as main code , and I still believe that suppressions from static analysis tools should not polute code. Inspections do not have ability to have separate file with suppressions, so presence them in javadoc is good compromise.\nPlease do suppressions as separate commit of the same PR to ease revert of it in future.. > Do we need to create a section documenting how some arguments changed between the versions?\nwe can make comment in issue, to reference to it if somebody ask a questions. As far as know we change only \"-gxs\" (renamed to \"-g\") and \"-V\" for version, all other stay the same. Minor changes.. please name it createIndent  as you returning new object each time.. please name it createIndent  as you returning new object each time.. please move attributes = new AbstractNode[1]; above IFs.. I am lost a meaning of private AbstractNode[] attributes; you place ident or value in this collection but in the same time keep them separate in special fields. What is a reason ?. I lost a track of decision on new attribute reason.\nWhy we need value in addition to text ? What is the difference ? Why we can not keep content of file in one attribute ?\nwe might need to put this info some xdoc, users need to understand  how to write xpath expressions.. done.. done. fixed. sorry.. sorry, it is not allowed in main code.\nPlease provide reason of why it is not possible to satisfy or just follow a rule as all other code.\nWe eat food that we produce.\nyou can make extra filtering statement before this processing loop in this method, or at method above.. it there any way to make test on this ?\nif not possible to do in usual way, I am ok with reflection.. why only IDEA link ? we have links to 3 major IDEs. > I will add examples to documentation,\nplease do, now value looks reasonable and clear to use based on tree structure and text blow my mind.\nPlease update documentation to make it clear what attribute to use in what situation.\n\nthough keeping the text attribute allows to offer backwards compatibility.\n\nwe do not need to keep compatibility for bad ideas, it  is better to fix it sooner, rather then let more and more people start to use it.. Please append some example of usage of new option for code  on spring annotations as described in issue.\nI think it is reasonable to make same valuable default value for some jdk annotations like https://docs.oracle.com/en/java/javase/11/docs/api/java.compiler/javax/annotation/processing/Generated.html or .... too much getAnnotation methods.\nplease rename it to \"findAnnotation\", as it actually do search.. > annotations != null\nthis is util method, so we can demand that arguments are not null, please make validation for this the same as ast == null above.. > firstMatchingAnnotation\nyou do not have list of annotations , so make variable name simply \"annotation\". if user defined allowed annotation in fully qualified form at property allowedAnnotations (to be certain what annotation consider as allowance, to avoid mismatch if there is name conflict) but will use in annotation in short form in code.\nHow it is supported by this code ?\nPlease update UT to have such cases. \nUpdate documentation to clearly define what matching will be is user specify only short names in allowedAnnotations, and what behavior will be in case of definition by fully-qualified names.\n. please add example of java file and by trailing single line comment show user where violation will be.\nSee examples at https://checkstyle.org/config_annotation.html#AnnotationLocation_Examples\nIt is very user friendly to show config and how it will work in the same time.. please remove extra \";\"\n}}; is NOT a violation in case of \"alone\" -https://github.com/checkstyle/checkstyle/pull/4247/commits/1fed9f6b1f00a62cc3a4ef2aa0d317bb7d497c10#diff-18d61a16a1a99cd7aa45bcaa7b217826R29\nit is not violation for same mode and code at https://github.com/checkstyle/checkstyle/pull/4247/commits/1fed9f6b1f00a62cc3a4ef2aa0d317bb7d497c10#diff-a7e700698e09368ce7408af88bf91357R108\n... Why it is a violation in case \"alone_or_singleline\" ?\nbehavior should be the same with extra allowances for singleline cases.. please make comment as trailing for a line where violation is reported.. >I think that my example is good enough.\nShould be enhanced.\n\nIt is actually better than the check JavadocMethod (which is what I based my changes on), which doesn't even have an example like mine (and it's already on production) \n\nSorry that we have bunch of bad examples in documentation. All new stuff we demand do match best practices that we know now.\nWe are welcome all to come and fix documentation to match best practices. To ease reading of it and quickly understand how each options works. For now we update only items that come as new content.. Ok, please rename getAnnotation to mention that you return only first found item.. Ok, I might miss it, I will review again.\nBut users will not read it, please update documentation.\nUpdate: I do not see it ut with fully qualified name in property, please send me direct link to it.. Please make a link yo page where we explain format. \".. as last priority or never or simply closed as invalid\". https://github.com/checkstyle/checkstyle/blob/master/.github/PULL_REQUEST_TEMPLATE.md\nhttps://github.com/checkstyle/checkstyle/blob/master/.github/ISSUE_TEMPLATE.md\nhttps://checkstyle.org/report_issue.html#How_to_report_a_bug\n. I am ok with small duplication, it is hard to force users to follow issue template, the more reference to such page the better. Link should be https://checkstyle.org/report_issue.html#How_to_report_a_bug.3F. I hope you enjoying checkstyle documentation, we improved it a lot during few past year, and work is still in progress...\nBut I am working not only with a lot of engineers, and  not all of them very experienced, so come to such practices in documentation due a lot of requests to clarify or explain.\nI want to make docs to be clear for all. After discussion in issue tracker and classifying issue as won't fix or ... We usually update doc to avoid such questions in future. I hope you enjoying checkstyle documentation, we improved it a lot during few past year, and work is still in progress...\nBut I am working not only with a lot of engineers, and  not all of them very experienced, so come to such practices in documentation due a lot of requests to clarify or explain.\nI want to make docs to be clear for all. After discussion in issue tracker and classifying issue as won't fix or ... We usually update doc to avoid such questions in future. Please remove this, we try to keep examples compilable, ready for copy paste and run. > What I would personally like to see is a collection of popular presets and somehow sorted by the number of downloads.\nif you know how to do this, please create issue and send us PR :) .\n\nWhat I think might improve it is if the core team of checkstyle gets a bit more diverse. \n\nPlease be welcome to be part of team :) .\n\nWhen all developers have the same background, it's difficult for them to recognize their own grammar mistakes, so diversity helps there\n\nI try attract more and more people to project. There are some web services that can help us with localization - #6191.\nHere is how I try to verify translations now - https://github.com/checkstyle/checkstyle/pull/6067#discussion_r217240504\nIf you know better way - let us know.. this file is used in several test methods and not only with default configurations.\nWhole idea to put config in some form to javadoc to read config and clearly see violation location in file (without scrolling back to UT and verifying line numbers).\nPlease make a copy of this Input file as much as you need, place config in javadoc and reflect expected violations from UT method in input as trailing comment. \n... One day we will make automatic validation of this pattern.. Please create and issue on this to discuss details. please intent \"||\" with extra +2 or +4 spaces to visually show priority of execution.\nOne day we will write a Check on this.. For example, to suppress violation on variable wordCound in following code:\n...\nyou need to look at AST of such code by our CLI tool:\n``\n $ java -jar checkstyle-X.XX-all.jar -t TestClass.java\nCLASS_DEF -> CLASS_DEF [1:0]\n|--MODIFIERS -> MODIFIERS [1:0]\n|--LITERAL_PUBLIC -> public [1:0]\n|--LITERAL_CLASS -> class [1:7]\n|--IDENT -> InputTest [1:13]\n--OBJBLOCK -> OBJBLOCK [1:23]\n    |--LCURLY -> { [1:23]\n    |--VARIABLE_DEF -> VARIABLE_DEF [2:2]\n    |   |--MODIFIERS -> MODIFIERS [2:2]\n    |   |--LITERAL_PRIVATE -> private [2:2]\n    |   |--TYPE -> TYPE [2:10]\n    |   |   --LITERAL_INT -> int [2:10]\n    |   |--IDENT -> wordCount [2:14]\n    |   |--ASSIGN -> = [2:24]\n    |   |--EXPR -> EXPR [2:26]\n    |   |       --NUM_INT -> 11 [2:26]\n    |--SEMI -> ; [2:28]\n    `--RCURLY -> } [3:0]\nThe easiest way is to suppress by variable name: .....\n```. please show input code first and then xpath expressions.\nplease do not forget to print AST. Almost nobody know how it looks like, it problem even for me to predict how it looks like.\n@rnveach , I remember you had some simple web service that show AST, does it still work ?\nis it reasonable to make it publicly available on our site to let users run AST print in web - very convenient in modern world approach.. I think, it good to have it on our web site, with note that it might be unavailable.. @rnveach , please step in for second option.\nIn case i am losing point. In future, instead of reading complicated UT code, we will discuss/review behavior of Check on code as it just executed and all violations are shown.\nWe already did a big leap forward when completely forbid reusage of input files between Checks, now we are going even further.\nGood example of such model as  already working https://github.com/checkstyle/checkstyle/blob/master/src/it/resources/com/google/checkstyle/test/chapter5naming/rule523methodnames/InputMethodName.java , actual UT code is just execution of checkstyle over this file. please remove leading spaces, it will generate more compact html.\nPleas apply to all other source tags.. off topic: but this is exact evidence that we did design/naming mistake, as minimum as attribute should be named ident.. please add example of how to suppress by variable name but with usage of \"IDENT\" node.. Please do not reused the same input file  in different  test methods.\nSorry for being too demanding.. as we start compilation on multiple jdk versions, we need to update headers of non-compilable sources to reference what version of jdk it is compilable to skip compilation on others BUT do compile on required.\nones we upograde to sertain version of jdk as minimal required, all previously non-compiled inputs should be moved to compiled. new web site should be used - checkstyle.org/.... if we end up with link like this.\n@rnveach , please confirm one more time that you want link like you requested, I do not see any example in existing code base:\n$ ag \"href\" src/main/ | grep \"\\\"#\"\nsrc/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/InterfaceMemberImpliedModifierCheck.java:33: * This check is effectively the opposite of <a href=\"#RedundantModifier\">RedundantModifier</a>.\nsrc/main/java/com/puppycrawl/tools/checkstyle/checks/naming/ParameterNameCheck.java:38: * <a href=\"#CatchParameterName\">CatchParameterName</a>.\nsrc/main/java/com/puppycrawl/tools/checkstyle/checks/naming/ParameterNameCheck.java:42: * <a href=\"#LambdaParameterName\">LambdaParameterName</a>.\nI do not remember that we agree on changing of this format. If this is smth newly noticed, lets postpone this to further Issue/PRs.. please explain why we do limitation for value only for this set of Tokens ?\n```\n $ head -n3 TestClass.java\npublic class TestClass {\npublic void testTrailingComment1() { } /** is there a  violation ? */\n\n$ java -jar checkstyle-8.13-all.jar -t TestClass.java\nCLASS_DEF -> CLASS_DEF [1:0] !!! value can be null !!!\n|--MODIFIERS -> MODIFIERS [1:0] !!! value can be null !!!\n|   --LITERAL_PUBLIC -> public [1:0]\n|--LITERAL_CLASS -> class [1:7]\n|--IDENT -> TestClass [1:13]--OBJBLOCK -> OBJBLOCK [1:23]    !!! value can be null !!!\n    |--LCURLY -> { [1:23]\n    |--METHOD_DEF -> METHOD_DEF [3:4] !!! value can be null !!!\n    |   |--MODIFIERS -> MODIFIERS [3:4]      !!! value can be null !!!\n    |   |   --LITERAL_PUBLIC -> public [3:4]\n    |   |--TYPE -> TYPE [3:11]    !!! value can be null !!!\n    |   |--LITERAL_VOID -> void [3:11]\n    |   |--IDENT -> testTrailingComment1 [3:16]\n    |   |--LPAREN -> ( [3:36]\n    |   |--PARAMETERS -> PARAMETERS [3:37]  !!! value can be null !!!\n    |   |--RPAREN -> ) [3:37]\n    |   --SLIST -> { [3:39]\n    |--RCURLY -> } [3:41]\n```\nso user will have access to all items in AST and do suppression as he wants. Only abstract/composite token types can have null in value as there is nothing belong to them from file.  We can even skip tokens that have absolute match like \"LITERAL_PUBLIC -> public\".\nIs a set of tokens you provided is just tokens which can have different value from token type ? if \"yes\", please update comment to make it clear that it is a set from all possible token types which can have different content.. > I think @value should be used for values, not AST token values, but java variable values.\nhere we do all for xpath that should take the most out of AST, so when we think about \"value\" we should not think about java language we just want to query some tree.\n\n//LITERAL_VOID[@value='void']\n//RCURLY[@value='}']\nI think @value attribute is useless for those queries\n\nyes, absolutely. That is good reason to say user that value will never be different from from token type, so for such cases it will be null.\n\n\n.....\n\n\nnot required.\nand /MODIFIERS[@value='MODIFIERS'] is complete nonsense, I even originaly requested to not have value for nodes that have no special symbol(s) in source file.\n=====\nLooks like we are on the same page , but we need to explain this to user:\nvalue attribute will be not null when AST node have representative symbols in java source file and such values may be different. Examples of AST without value: /MODIFIERS - is abstract composite tree node that do not have any representation in source file.  /LITERAL_PUBLIC - such node can have only \"public\" in value, so no reason to have it as will duplicate a token type.\nAll other tokens should have value.\nThere might be not that much of such AST nodes, but in description it should be clear that we selected them based on analysis that all others do not match required criteria. We should mention this in xdoc also.\n@timurt , please proceed.. +1 is correct, verified at InputWhitespaceAroundGenerics, symbol < is at 17 column.. Travis is doing only small part of validation. We consider it as primary due to historical reasons.\nThere bunch of others CIs with the same policy - merge only on passed CI only.\nContributor can run Travis in their fork, they just need to place fix in forked master ;).. should be named as createTextAttribute\nas you use \"Text\" attribute from AST and put it into Xpath as text.\nAnd right now it become vivid problem .... our original design of @text was a mistake. It suppose to be named @firstIdentText and it will never be a problem to understand how to use it. It it will be clear that such attributes are taking value from the same property of AST - getText, but @firstIdentText is convenience shortcut over @text.\nNow we have problem even in code with terminology .... the same will be users.\nWe need to:\n1) rename @text to @firstIdentText in one issue/pr. It is kind of breaking changes, but it better to make it now, before xpath become primary way of suppression.\n2) as second step, make new @text that will be exactly what you make as @value in this PR.\nOnes we do this, all will be clear even without that much of documentation. But we still need to explain why not all nodes have @text(in new meaning), but it is ok.\nWe are keeping all logic , all we need is just renaming of terminology in two steps.. related config:\n<inspection_tool class=\"OverlyComplexBooleanExpression\" enabled=\"true\" level=\"ERROR\"\n                     enabled_by_default=\"true\">\n     <option name=\"m_limit\" value=\"8\"/>\n    <option name=\"m_ignorePureConjunctionsDisjunctions\" value=\"true\"/>\n</inspection_tool>\nno special options to ignore equals methods, sad. It is better to not raise limit 8. \nI am ok to suppress this by javadoc tag.\nThere was no such violation, as m_ignorePureConjunctionsDisjunctions did his job (expression was very equal in view).\nAs we \"optimize\" to we need to do suppression and explain reason in javadoc.. @rnveach , we did interesting update:\nto fix style issue, we make code is not consistent in view so break style consistency.\nBUT it and this is still forcing us to suppress smth else.\nAs original violation is not performance issue fix .... damaging existing style might not bee good. \ni think it actually suppress original issue and keep code consistency.. in library project ...... other projects might use it.. I am not agree here a bit.\ncurrent violations:\nDeclaration has problems in Javadoc references\nAbstractJavadocCheck\nSymbol 'firstNonTightHtmlTag' is inaccessible from here\nUniquePropertiesCheckTest\nSymbol 'getLineNumber(FileText, String)' is inaccessible from here\n\nSymbol 'firstNonTightHtmlTag' is inaccessible from here\n\nit is not reasonable to provide link to private field. Second link in this javadoc is valid and only it should be present.\nit gives enough context for user.  link to private field is not required.\n\nSymbol 'getLineNumber(FileText, String)' is inaccessible from here\n\nwe need to do suppression of this case, usage of reflection in tests is hack and it is a problem of test, javadoc over test should explain all, and it will contain suppression and explanation of suppression. It is good practice to allow hacks but force engineer to provide a lot of documentation/suppressions to show that it is not easy way :) .. not good.\nOptional.get() is called without isPresent() check\nPackageObjectFactory\n'Optional.get()' without 'isPresent()' check\nTokenUtilTest\n'Optional.get()' without 'isPresent()' check\nThis is design problem and/or misusage/illusion of Optional class, without such check for presence , there will be exception - https://docs.oracle.com/javase/8/docs/api/java/util/Optional.html#get-- .\nSolution is smth like - https://stackoverflow.com/a/38725479. lets update configuration if it and remove guava.Beta from list:\n\n. from inspection description:\nThis inspection checks for deprecated XML elements. The elements can be marked by XML comment or documentation tag with text \"deprecated\".\nnew comment looks very weird. If inspection do not like just a word \"deprecated\", \nlets make comment <!-- This class in is deprecation phase  -->. inspections do not support definition of reason of suppress, in tag @noinspection there should be only list of inspection names.\nmethod must be static, and inner class isn't static should be moved to javadoc description. Method is private, it will not be visible in HTML.. please place reason of suppress to javadoc description, sad that I already missed this for another suppression.. we need to explain suppressions in javadoc, unfortunate side effect.\nWe always keep brief reason of suppression in code or to keep link to web, with detailed explanation. unfortunately here we will damage a big our javadoc, but is better than keep such explanation in code .  reason of suppression to javdoc descrition.  reason of suppression to javdoc descrition. No, keep disabled but update wording as I proposed. Please keep suppression by  separate our issue, we will discuss it separately.. Please do it by stream https://stackoverflow.com/questions/2041778/how-to-initialize-hashset-values-by-construction, ones we jump to next java, it will be easy to update code, I think one inspection will hint this to update. We try to keep reason of suppression each time close to suppression.\nPlease explain reason of suppression in javadoc description.. No mix for functional update and minor refactoring.\nPlease move to separate commit of the same PR, in commit, no reference to issue.. Please do me favor and place javadoc comment over the method to briefly explain why reflection is the only way to test it.  We try to keep it as rule now, and this method was created before to agreed on it. We try to make it clear that usage of reflection is allowed but not easy way for engineer.. Xpath AST is created for all for queries before matching certain query. We can not predict how queries will look like.\nplease clarify your concern.. Can we do this in separate issue ? Or it it new behavior of this PR?. Hmm, a lot of wildcards , do we still have inconveniences in names of input files ?. > the . before Input ensures Input is the start of the file name.\nok ,this is not a regexp.\nhttp://pitest.org/quickstart/maven/#excludedtestclasses\nhttps://en.wikipedia.org/wiki/Glob_(programming). @timurt , please step in.. can we keep it to be compiled by jdk8 javac ?\nwe are not going to drop java8 completely in near future, but it is completely ok to update all sources to be compiled by most rescent jdk, but Travis should still try to compile old files with old jdk, just to keep compilation status of file.\n. ones again, travis need to find files for jdk before jdk9 and compile them by jdk8.\nWe never drop files out of compilation check. If there is no such check it result in \" code become in-compiled, our parser generate weird AST, weird code appear in Check.\". Please put \"pitest\" in name. https://github.com/sevntu-checkstyle/sevntu.checkstyle/blob/master/pom-version-bump.sh#L24 it is better without sed. really sad fact ... strange that I did not caught that during testing, I usually test validation on simple violation introduction to code before placing it to CI, but smth might changed of xwiki side ....\nbut we need to bring it back to actually do testing.  . confirmed. confirmed.. confirmed. \nI was suspicious at first look, but it is ok.\nThis Check implementation is not based on ANTLR grammar so, any small regression is ok. . ok, very suspicious, but if no regression found it is good.\nif any regression found in future it is good, at least now we do progress to better code.. confirmed.. ok, if we do not know a case, life will show us... in other case you are right.. confirmed.. Confirmed. If only stacktrace is changing , it ok completely. @rnveach , I do not understand this comment.\nWe are not going to change properties here, they stay as is - https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/CustomImportOrderCheck.java#L359 \nOr .. do you mean description of properties should start with ..... ?. please move JavaParser.parseFile out to some local variable. It is hard to read this code.. please move this lamda to some class with good name or ... it is very unclear code. . this is not ok, we have use it for smth.\nSuch Filter will be awesome compromise to have all checkstyle settings in one file !!! Long awaited feature by users.\n@rnveach , please review our discussions for last two new Checks that were created by @jodastephen , I remember that we mentioned that some cases are impossible to catch properly, so xpath filtering is required.. > or do we want to enforce required fields?\nIn checkstyle we do not have required fields. All fields have default values and Check is not failing with exception if property is not defined.\nI would remove all \"Optional\".\nProperty is always defined by default. If user define its own value, we use users value. . can we remove this expression ?\nit is better to keep only expressions that make sense and mostlikely used by users.\nWe probably eventually can make link to such expressions as we did with messages - https://checkstyle.org/config_misc.html#UpperEll_Error_Messages .\nI am not firm in this position, please share your opinion.. ok ,lets keep it for now and speedup merge of xpath support.\nWe will change this ones we come to sharing examples of xpath with users.. Let's finish this PR, lazy and stackoverflow can be addressed later on.. lets remove this build.\nReason: MacOS is not very quick item, becaue macos resources on Travis are more expensive, so queue for such resource for free is very long.\nI think jdk8 and jdk11 is enough.\nNote: it is ok to stay builds for openjdk9|10, it will be enough for testing for non long support jdk.. please append such case to existing group - https://github.com/checkstyle/checkstyle/blob/master/config/spotbugs-exclude.xml#L82. I discussed with @rnveach , how to use this filter, he is thing now , ones he agree, he will share details.. unfortunately we have bad examples of javadoc over Filters....\nLet not continue this practice in new filters we are creating. We need to do the same javadoc as we do for Checks. With majority common content with xdoc.\nEventually we will keep documentation only in javadoc and xdoc will be generated from javadoc.. should be IllegalArgumentException, as you violating value that come from outside of this class.. please move this method above accept.\nIt is good to keep method in class in order of their execution from outside.. empty line please before class members.. createEvent. your Filer is inside of jar, all you need is to create this jar on your local: mvn package -Passembly and recheck your target folder. Use this jar to do testing the same as with released version(that you download from web).. Yes. Review this file , there is suppression already for this rule. Append your case to existing suppressions.. commend should be:\nThis is checking for amount of arguments more that 3 (hardcoded).  But in make sense to start making violations on items where amount of arguments more that 7. Extra abstraction(object) for single method does not make code more readable or easy to maintain.\nif we get more annoying messages from this rule - https://pmd.github.io/pmd-6.4.0/pmd_rules_java_design.html , we can disable it. But while it is single let keep it.. please make files as regexp File(One|Two)\\.java and keep only one instance of module.. please explain what for in real life it might be required ?\nPlease give code example for each config block, and show by comment when violation placed without suppression. \nif no reason please substitude it example of suppression by non-query. Your filter is named Xpath, but IT IS NOT LIMITED for Xpath only, it can do filtering/suppressions by all other properties. It is Filter of general purpose + xtpath. . > I'm not sure what the \"substitude\" means here?\nremove this example and create new example.\n\nDoes it simply means that I should \"add\" an example for suppression with no query?\n\nyes.\n\nWhich part should this explanation be in?\n\nright in Suppress checks for parent element of the fi .....\ngood examples of config+code - https://checkstyle.org/config_annotation.html#AnnotationLocation_Examples. @rnveach , SummaryJavadoc is ANTLR based and part of google style, please pay attention to regression report for this Check.. Let's remove. Do not waste time, keep updating code. I do not understand reason/goal of issue.\nNot all below is disabled.. IAE is runtime exception -https://docs.oracle.com/javase/8/docs/api/java/lang/IllegalArgumentException.html\nso any other can happen too.\nit is better to catch all exceptions by Exception and log it.. @rnveach , please share your thoughts on model of Filter usage.. replied to issue, I do not see a good way how can we do this, probably we need to keep original reason of suppression for now. Ones we find good solution we will create new issue and make a note to activate such validations. . > Shouldn't this logic be placed inside getDetails instead of this section? Why is it only an override for isAloneOnLine?\nI have no problem to do refactring.\n\nIt seems to me, this checking of something on the end after the chain should be in a separate method check.\n\nlooks reasonable.. >Do you still want to continue with catching Exception and suppress violation?\nCatching all exceptions are highly discouraged but unavoidable in real life, so should be very very limited.\nCan we catch all in Checker and continue with next file? I think we already for this, we probably need to expand scope of that catch block.. Yep. In this case such Check should catch all in such methods, it will not support mode of Checker to continue on exception, but it is ok for now. Please explain what is a problem here. Please explain. > I had to give it a block comment\nSingle line comment.\n\ncomment that starts with * , it shouldn't treat everything as a javadoc \n\nPlease add this to the of comments, to self document such unusual test\n. >File isn't compilable because only package-infos can have annotations and we need this to be a non package-info file.\nBy this we damage whole idea keeping inputs compilable/real. We tried our best to avoid running on files that are not passing compilation.\nI am not ready to provide  solution for this now, but probably code need to be rewritten.\nLet's keep this case in ignore list of survived and do not create this input. Yes, we do this on good reason.\nViolation just try to prevent us from accidental mistake. \nEventually, we might use single xpath filter here, as all multifile Checks catch all in such methods, or .... . Suppression should have comment \"till \" , and in issue all your details from above.. If we find no way to resolve it, we will create probably new group in uncompiled - \"for mutation testing\". It is better to keep Comparable in tree , whole tree of code. Please append return. Thanks in advance. Can we make a code as return (CheckedFunction & Serializable) null; ?\nIt is better to not have any extra code in sample but try to be compilable.. I would rather avoid change in AST structure, we can discuss it in separate issue.. Our AST is not ideal for historical reasons.\nI would expect it to be: TYPE_EXTENSION_AND be parent of c3 and i1.\nI think this is how all two argument operation are structured.\nLet's postpone it to separate issue, if really care.. Let's move this discussion in new issue. AST above is not what I meant/expect.\nLet's finish this PR.. this is not ok. We have to eat food which we produce.\nplease move all suppressions from https://github.com/checkstyle/checkstyle/blob/master/config/suppressions.xml that are related to folders and wildcard filename https://github.com/checkstyle/checkstyle/blob/master/config/suppressions.xml#L38\nto be exact:\n```\n    \n\n<suppress checks=\"JavadocPackage\" files=\".*[\\\\/]src[\\\\/](test|it)[\\\\/]\"/>\n<suppress checks=\"JavadocVariable\" files=\".*[\\\\/]src[\\\\/](test|it)[\\\\/]\"/>\n<suppress checks=\"JavadocType\" files=\".*[\\\\/]src[\\\\/](test|it)[\\\\/]\"/>\n<!-- we do not need javadocs in all classes except for *Support classes -->\n\n\u0002klzzwxh:0698\u0003/[\\\\/].*(?<!Support)\\.java\"/>\n<suppress checks=\"MagicNumber\" files=\".*[\\\\/]src[\\\\/](test|it)[\\\\/]\"/>\n<suppress checks=\"AvoidStaticImport\" files=\".*[\\\\/]src[\\\\/](test|it)[\\\\/]\"/>\n<suppress checks=\"WriteTag\" files=\".*[\\\\/]src[\\\\/](test|it)[\\\\/]\"/>\n\n\u0002klzzwxh:0704\u0003/[\\\\/]\"/>\n\u0002klzzwxh:0709\u0003/[\\\\/]\"/>\n``. please do complete conversion ... why you skippedmessage?\ncan we offer users suppression of such problems by xpath ? and forget about depending on message that is problematic with multilanguage mode.. 8.17. Please explain why you selected CyclomaticComplexity as example?\nit is very controversial Check, most user do not understand this metric at all.\nIn examples it is better  to be close to real life. Please use Checks from https://checkstyle.org/config_naming.html . please use naming Check and keep in examples code that is relevant, ideally to stay compilable.. please add to examples case from https://github.com/checkstyle/checkstyle/issues/5756#issuecomment-392594826 , this case was inspiration of your Filter implementation. . you always make examples withquery, please make 1-2 examples with other properties, or even combination of them.. We need to give user \"Rationale:\" for this Check asto allow users use suppressions configured in the same config with other modules. SuppressionFilter and SuppressionXpathFilter are require separate file`\nAdditionally we make \"Advice:\" paragraph and explain If checkstyle configuration is used for several projects, single suppressions on common files/folders is better to put in checksyle configuration as common rule. All suppression that are for specific file names is better to keep in project specific config file.. Here https://github.com/spring-io/spring-javaformat/blob/master/src/checkstyle/checkstyle-suppressions.xml is example of what spring projects suppress , please put that cases to examples. \nOnes we merge you, you can send improvements in config for spring formatting.. To checkstyle_checks.xml where you define your filter. There should be several instances of your filter( for each line from suppressions.xml). I thought about this one more time, there is no way to do this by xpath.\nPlease simply convert it as is, with message .. ones we merge you fix and make a release, you can send them improvement as PR. I hope they will welcome it.. @rnveach, why CI is not failing ?. Does it make sense to simply enforce such mutators in all packages and extend ignore list? \n at least new code will follow most high quality level, existing tech dept will wait.\nIn such case I will not need to explain what should be fixed and how to verify this.. At least it will be clear for contributors, what is expected and what to run to verify fix. please make a comment that this file is not an input, it is just place to define annotations to be used in package-info.java. Eventually we end up when config will be defined in each Input file,  but looks like we have exceptions from this rule for files like this .  . please add 2 annotations on enum also  (with and without violation). test is named testIncorrectAllTokens probably we need to add all tokens.\nand we probably need to update InputAnnotationLocationIncorrect.java with some cases.. not sure this is good update to rename variable.\nwe searched for modifiers, and we should found modifiers node.\nit is not good to reuse variable.. @pbludov , please try to move to subfolder \"inputs\"\nexample  - https://github.com/checkstyle/checkstyle/blob/master/src/test/resources/com/puppycrawl/tools/checkstyle/checks/design/visibilitymodifier/inputs/InetSocketAddress.java. as, you converted them, please remove old suppressions from suppressions.xml\nplease copy comments like <!-- we do not need javadocs in all classes except for *Support classes --> and <!-- Tone down the checking for test code --> other.. 8.18 :) is next. remove extra code.\nplease keep only code that is required for example. FileOne should be empty class. . I do not see this as done - please recheck.. @jack870131 , I still see this item as not done.\nPlease remove duplicate suppressions from supressions.xml and copy comments to checkstyle_checks.xml  to explain suppressions. All suppressions must be explained as comment, one by one or as group.. Nothing more need to be provided. I found requested paragraphs in your commit. Conversation is resolved.. Yes. yes, your are right, .... amount of items to rememeber to recheck is still high.\n@pbludov , please recheck that this does not conflict with google style guide.. In latest code I see new tokens in acceptable and default it is correct. Package token will not be considered.\nFor Google style we need to have proper config, so we can change config and all Check functionality as we need, but just need to got required functionality. If Check  is used default in  config, and we add new default token, we can change config to exclude new token.\n. >For ENUM_CONSTANT_DEF, should we treat this as a field under the rules?\nNo, it is not a field. But we might ask confirmation at their issue tracker.. >  A counter example ....\nplease copy description from previous example. Examples should be independent from each other.. such paragraph will looks weird on first page.\nLets have all limitation in original place and on first page just have a link to original place.\non first page we should have only one sentence.\nCheckstyle is single file static analysis tool, for more details please read <link to original place>full list</>. \n@rnveach , please confirm.. I am ok to remove the whole paragraph OK, so you have written .... at original place.\n@rnveach , are you ok with my proposal to have on index page one sentence only with link ? . you found bug in config :) , please fix it.\nexpected behavior should be:\nfinal static int log = 10; // OK\n    final static int logger = 50 // OK\n    final static int logMYCONSTANT = 10; // vioaltion\n    final static int loggerMYCONSTANT = 50 // violation\n    final static int MYCONSTANT = 100; // OK\n    final static int myConstant = 1000;. The following configuration skip validation on. @fzdy1914 , please help us to make it happen.. please put a comment above to explain reflection usage, we agreed some time ago that we will do this.\nIf you additionally remove @Test(expected = IllegalStateException.class) ... it would be awesome ...  I thought we already fobid it by some check..... but if you do not want ...  we can postpone this.. please add violation case like:\n```\ninterface SecondInterface {} // violation\n```. Really strange that comment was lost in github about this line.\nPlease use some existing word in name of constant, to avoid extension of whitelist with bad words.\nIf you like \"my....\" , try to use \"myself\".. Please add cases for multi dimensional arrays like getOldTest()[][]. We should add to our Inputs a case that was in issue.\nl = () -> {}; // ok and clearly declare that we support such code. I think we need to be consistent and allow that weird location of [] when property is set to false.\nIn my previous comment I meant that I do not know who likes String strings[];, even 20 year ago, it was not good  way to declare array. . varieble/field type and method type  are always checked.\nif javaStyle=\"true\" (default), then \"[]\" should be on type, only.\nif javaStyle=\"false\" then \"[]\" can be at other place.\nPlease extend documentation with examples to clearly show user what behavior will be. Examples works better than some explanation of logic.. this is not consistent behavior.\nif int[] nums; // violation then char[] toCharArray() should be violation.\n. Just rechecked, as a long time passed from C time...\ntested at https://www.onlinegdb.com/online_c_compiler\n```\ninclude \nint fun()[] \n{\n    static int arr[100];  \n    return arr; \n} \nint main()\n{\n    int ptr[] = fun(arr); \n    return 0;\n}\nerror:\nmain.c:4:5: error: \u2018fun\u2019 declared as function returning an array\n int fun()[] \n     ^\nmain.c: In function \u2018fun\u2019:\nmain.c:7:12: warning: return makes integer from pointer without a cast [-Wint-conversion]\n     return arr; \n            ^\nmain.c: In function \u2018main\u2019:\nmain.c:12:21: error: \u2018arr\u2019 undeclared (first use in this function)\n     int ptr[] = fun(arr); \n                     ^\nmain.c:12:21: note: each undeclared identifier is reported only once for each function it appears in\n```\nYou are right.\nit is not possible(compilation error) to return array as value from function.\nhttps://stackoverflow.com/a/14297191\nhttps://stackoverflow.com/questions/3473438/return-array-in-a-function\nSo it is ok to forbid char toCharArray()[] when javaStyle=\"false\", but we need to explain this in documentation, as it is very tiny nuance.\n@rnveach , please confirm that you are ok with such behavior.. moved to https://github.com/checkstyle/checkstyle/pull/6428#discussion_r257523668. throws SecurityException as declared - https://docs.oracle.com/javase/8/docs/api/java/io/File.html#getAbsolutePath--\nbut can probably throw any other exception if smth goes completely wrong.\nbut we can say that we minimize exception chance as much as possible.. By default allowOneCharVarInForLoop is false.\nSo there should be violation. Am I right ?. Please add single char example here too. Can we have some warnings in this file ?. Please create issue on this, and let's keep in documentation what it right.\nI am surprised that we have a bug in such simple Check.. fixed.. @jack870131 , please finish this PR.\nWe understand that might be busy in next few month, so issue completion could wait, but it will be better to finish this PR, as a so little is left to be done. . @Vampire , thanks a lot for your desire to help, I really appreciate this, but lets follow rules of our project, we will guide you. Sorry if extra work might be required.\nfirst of all this is not a \"doc:\" minor change, please create issue on it and lets describe all reasons/nuances in issue, not a PR comments. . we did no proper indentation to keep our source code render in HTML with no indentation.\nI do not like our approach also, but I do not know for now how to make it better. If you know please share an approach and lets move this to separate commit/PR, or it is caused by plugin validation?. . @Vampire , please share a screenshot that it renders fine, command to generate site is mvn site -Pno-validations.\nIf it renders fine or better , I am completely ok to change.. @Vampire ,\nI am not sure what for you try to use https://en.wikipedia.org/wiki/Non-breaking_space after \\ in command lines.\nOn small screens commands are look not good, but if we want to make them better  it is better to use such symbol in even before \\.\nPlease move this update to separate issue/PR. I doubt it is related to plugin validation, correct me if I am wrong. . Please move new code to static method. It was helper method, it should stay until method. Are you sure it is equivalent ?. Can we keep such code as static method?. As you hit this ground, please update https://checkstyle.org/sun_style.html in the same way as did at https://checkstyle.org/google_style.html , but not all, add line only for point you are try to cover.. to reuse them at https://github.com/checkstyle/checkstyle/pull/6577/commits/6deec2134d7a66909a5290e0bb1ac6ca7ac06e98#diff-7771d8a02d03fa72c692d399a84b8f28R54\nthey are final and static, we use them in one Xml loader, so reuse them in another.\nreuse of LoadExternalDtdFeatureProvider is not possible, as factories are of different type.. please do \n...\nMODLUES_WITH_EXTERNAL_FILES=\"Filter|ImportControl\" \\\n| grep -vE $MODLUES_WITH_EXTERNAL_FILES | grep -v \"^$\" \\\nto self explain this tiny nuance.. please explain why javadoc Check might required non-compiled java file.. please remove this line,\nCan we make inputs in our new Input format ?  (config is in javadoc of class, \"warn\"  as trailing comments). please remove if it is not part of test.\nand in all other files.. please bump version.. probably better doc is requierd.. we spend too much time to make localized builds, I am not ok to make -Duser.language=en -Duser.country=US so easily.\nI am ok -Dfile.encoding=UTF-8 \nI might be ok with extra maven profiles to activate on windows only when encoding is not UTF-8.  . if problems in code, it should be fixed in code, but not in configuration for all OSs.. comment above should be fixed.. comment above should be fixed. @timurt , please explain this update. Original version were more strict. updated version will match to everything.. \"any additional\". \"No matter what code\"\nthere are not only classes in java.. \"less obvious\" -> verbose.. I am not sure that usage of value is good in whole file.\nIt is better to change it to text, we take text from Ast, with almost no changes, we should not make new term for this.\nif you agree, please make sure there is not word \"value\" at all in this file.. value attribute ?? do you mean \"text atttribute\"\nplease review my comment below.. I do not see suppression for IDEA inspection, I do not see TC failure, please explain this comment.. \"value\" -> \"text value\"\n\"variable value\" -> \"variable name\"\n\"annotation value\" -> annotation name. \"These token types were selected because only their text values are different in content from token type and represent text value from file and can be used\". in different ways. @value ? do you mean @text. \" by its value\" -> by its name and element value. can we have xpath, like https://stackoverflow.com/a/5818966/1015848 ?. I am not sure what you changed....\nin this file/class should be no \"value\" word at all. We work with text. Lets not do any confusion.\nPlease make a comment in javadoc that STRING_LITERAL are returned without braces.. > //*\nplease update example and put in Generated annotation a comment with \"second\" value too, https://github.com/javaee/javax.annotation/blob/master/src/main/java/javax/annotation/Generated.java, so xpath should be more strict and points only to value (not a comment) element of annotation . continued at https://github.com/checkstyle/checkstyle/pull/6357#discussion_r266878094. Let's move this to separate issue, and proceed with the javadoc sync. ",
    "apennebaker": "My project is organized in a Maven structure, so my Java code refers to code in various dependency libraries, which only get onto the CLASSPATH with Maven's help.\nI can successfully integrate Checkstyle with Maven using a Maven plugin, so mvn checkstyle:checkstyle works well. But I'd like to be able to use raw Checkstyle, as checkstyle -c ... -r ., and I'd like Checkstyle to hide errors relating to things it can't find, such as Unable to get class information for TException..\n. @romani It's not open source.\nWhat I can say is that raw CLI checkstyle has trouble loading classes, where mvn checkstyle:checkstyle does not. That's not a problem, but it would be nice if Checkstyle simply ignored class-not-found sort of errors:\n~/Desktop/src/checkstyle$ grep \"Unable to get class information for\" -r .\n./src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/messages.properties:redundant.throws.classInfo=Unable to get class information for {0}.\n./src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/messages.properties:javadoc.classInfo=Unable to get class information for {0} tag ''{1}''.\n./src/tests/com/puppycrawl/tools/checkstyle/checks/coding/RedundantThrowsCheckTest.java://             \"35:27: Unable to get class information for WrongException.\",\n. I have an idea -- is there a config.xml setting I can write to hide these? I'd be happy with that.\n. @romani Thank you so much for taking the time to help reproduce this!\nI'm using the checkstyle 5.6 package from Homebrew, as I'm on a Mac, not Ubuntu. I apologize for not providing the version earlier; I didn't know how to check it (speaking of which, https://github.com/checkstyle/checkstyle/issues/9).\n. Mine says:\nManifest-Version: 1.0\nImplementation-Title: checkstyle\nImplementation-Version: 5.6\nImplementation-Vendor-Id: com.puppycrawl.tools\nBuild-Jdk: 1.7.0_07\nBuilt-By: oliver\nSpecification-Title: checkstyle\nCreated-By: Apache Maven\nSpecification-Version: 5.6\nMain-Class: com.puppycrawl.tools.checkstyle.Main\nArchiver-Version: Plexus Archiver\n. @isopov Sure thing!\nTrace:\n$ cat Test.java \nimport org.apache.thrift.TException;\npublic class Test{\n  public void foo() throws TException{\n  }\n}\n$ wget http://downloads.sourceforge.net/project/checkstyle/checkstyle/5.6/checkstyle-5.6-bin.tar.gz\n$ tar xvf checkstyle-5.6-bin.tar.gz\n$ cd checkstyle-5.6/\n$ grep Double sun_checks.xml \n        <!-- module name=\"DoubleCheckedLocking\"/ -->    <!-- MY FAVOURITE -->\n$ java -jar checkstyle-5.6-all.jar -c sun_checks.xml ../Test.java | grep Unable\n/Users/apennebaker/Downloads/checkstyle-5.6/../Test.java:3:28: Unable to get class information for TException.\nSystem:\n```\n$ specs java os\nSpecs:\nspecs 0.4\nhttps://github.com/mcandre/specs#readme\nmvn --version\nApache Maven 3.0.4 (r1232337; 2012-01-17 03:44:56-0500)\nMaven home: /usr/share/maven\nJava version: 1.6.0_51, vendor: Apple Inc.\nJava home: /System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home\nDefault locale: en_US, platform encoding: MacRoman\nOS name: \"mac os x\", version: \"10.8.5\", arch: \"x86_64\", family: \"mac\"\necho $CLASSPATH\necho $JAVA_HOME\n/Library/Java/Home\njava -version\njava version \"1.6.0_51\"\nJava(TM) SE Runtime Environment (build 1.6.0_51-b11-457-11M4509)\nJava HotSpot(TM) 64-Bit Server VM (build 20.51-b01-457, mixed mode)\nsystem_profiler SPSoftwareDataType | grep 'System Version'\n      System Version: OS X 10.8.5 (12F37)\n```\n. ",
    "isopov": "I have reproduced the issue:\n1. Download checkstyle-5.6-bin.tar.gz distribution.\n2. Extract it.\n3. In bundled sun_checks.xml comment DoubleCheckedLocking (with this check turned on checkstyle will not start at all)\n4. Create file Test.java\nimport org.apache.thrift.TException;\npublic class Test{\n    public void foo() throws TException{\n    }\n}\n1. Run checkstyle with:\n```\n$java -jar checkstyle-5.6-all.jar -c sun_checks.xml Test.java | grep \"Unable\"\n/home/isopov/Documents/Downloads/checkstyle-5.6/Test.java:4:34: Unable to get class information for TException.\n```\n. 788f87d - makes sense. I was really surprised that most of files were executable.\n4fdc97c 5e7b73e connected commits. if you are using maven - there is no need in some build instructions. Everything is standard. Actually the only projects that I saw maintaining several build scripts at once were examples for various frameworks. Anyway - this is the first time in my life i see anyone using java libraries from the linux distro packages. I see several drawbacks of such usage - the build become non-repeatable since versions of libraries can change. Moreover - versions are different already comparing to the maven build. This may lead to increased difficulty in issues investigation and issues specific to the versions built in one way or the other.\nAny other thoughts?\n. Have you noticed that build failed?\nhttps://travis-ci.org/checkstyle/checkstyle/jobs/12318554\n. http://en.wikipedia.org/wiki/.properties\n\" \" (white space) and \":\" can be used instead of \"=\", that is not supported.\nComments starting with \"!\" are not supported.\nSupporting white space instead of \"=\" is not a trivial task. Maybe it is worth to use solution like this (http://stackoverflow.com/a/18796846/222892) to reuse code for actual properties parsing.\n. Why catching both FileNotFoundException and IOException? \"FileNotFoundException extends IOException\", so you can catch only the latter one.\n. Only minor stylish comments:\n1. When creating UniqueProperties instance and its field mDuplicatedStrings we already know the maximum possible size of this map (and in most cases that will be very close to the actual size of the map). So maybe it is worth using Maps.newHashMapWithExpectedSize(lines.size()) to avoid rehashes.\n2. Also if using Guava (and Checkstyle does use it) - there is a special class there for counting duplicates - com.google.common.collect.Multiset (https://code.google.com/p/guava-libraries/wiki/NewCollectionTypesExplained). Maybe for better readability and to better serve as an example of the good code style it is worth using it. Again maybe using \"HashMultiset.create(int)\" method supplying expected size of the MultiSet.\n. Sorry - yes, first comment is wrong.\nSecond comment about usage of Multiset is still an option.\n. > you know maximal size collection - aLines.size(), so pseudo code is HashMultiset.create(aLines.size());\n@romani that was my mistake also - lines.size() - is the number of all the properties, but in this additional Map/MultiSet only duplicated are stored. So in normal cases (without warning) this collection will be empty.\n. > but how do you get from collection duplicates ?\nif (oldValue != null ... - this is the code for actual duplicates detection. java.util.Properties extends Hashtable and method put returns previous value if one exists.\n\nwhere check for count\n\nduplication.getCount() + 1 - this is the code for getting number of occurrences of the duplicated property.\n. I\\m ok with merge too.\n. My understanding of this specification is different. Your example will never be a false positive since it is a primitive field and being static final will always be a legitimate UPPERCASE_CONSTANT. As far I understand the \"dot rule\" is about referencing this field in expressions using dot. Like\nprivate static final String DOT = \".\";\n...\n//the only usage\nString s = DOT + \"toString()\";\nAnd the following:\nprivate static final String dot = \".\";\n...\nString s = dot.concat(\"toString()\");\nIn the second case the field is used in expression with the dot.\nIn any case this feature requires scanning the whole source of the file for the usages of the static final fields and taking into account all locals of with the same name, so developing in a sandbox project seems a valid idea for this feature.\n. @romani - Personally I use UPPER_CASE for everything that is static final, even for loggers. But the feature request to enforce the official java coding style is valid, nonetheless it is not simple. So lets open an issue for this in sevntu-checkstyle as a sandbox project. At least if this feature will be developed by someone from our team.\nOne thing - I propose to include in this feature a list of classes that should have UPPER_CASE static final field names even for objects - with String being in the default list.\n. Sorry for the time.\nOpened https://github.com/sevntu-checkstyle/sevntu.checkstyle/issues/155\n. Why haven't you included Set in the default included classes? From this point of view is there any difference between Set and Map with List?\n. Usually checkstyle allows users to completely override the default list. But since this particular list is large than usual - maybe this is valid option.\n. This is minor change, but for some reason field, setter for it and getter for it are all named differently:\nmUserIgnoredClassNames\ngetUserExcludedClasses()\nsetExcludedClasses\nSo I suggest to reject this PR and rewrite it with uniform naming for this configuration option.\n. This seems to have lost in numerous PRs for this line of code (we had 4):\nI've tried writing\npublic java.lang.Integer _integer = new java.lang.Integer(1);\nAnd only this line of code prevent it from being reported. So I'm for closing this issue as \"wontfix\" in its current form.\n. Rejecting this issue, since it breaks current functionality.\n. The actual change seems fine to me.\nBut 3 issues + 3 PRs seem strange to me, too. Maybe we should explicitly ask in the contributing guide to make several minor changes to the same line of code in one PR? And if contibutor is going to submit a PR anyway - maybe it is not necessary to open the corresponding issue (EDIT: noticed that is contradicts with practice in #44)?\n. I've tried writing \npublic java.lang.Integer _integer = new java.lang.Integer(1);\nAnd only this line of code prevent it from being reported. So I'm for rejecting this PR based on content. Sorry for not testing it before, when I have already suggested to accept it.\n. My fix is at #42 \n. Nothing with methods - this check just ignores all usages that are parsed before declarations. It seems that this was always handled like that. Some rather large abstraction is used intended to be reused in other checks too, but now it is used only in this particular check. What is especially suspicious is that this abstraction was copy&pasted from the other check and the original check was not updated (maybe for performance reasons). This was done 11 years ago and some commits are not available in the history (for the original check). In particular this exact problem was resolved in the original check 11 years ago judging on the unit test that was added at this time for this problem for the original check. However, using the same logic for fix is not possible, I think.\nIf this fix is applied in this form, maybe we should open a separate task to refactor this abstraction layer either into\n1. Merging with the RequireThis check and removing unused functionality from abstract DeclarationCollector class\n2. Using DeclarationCollector in other checks that require similar functionality (performance penalties may arise)\n. I think we should support this case since it is supported by other javadocs tools.\n. > > Please give me real use case of such style\npublic class Test{\n    /**\n    * Foo Method foobar foobar foobar foobar foobar foobar foobar foobar foobar foobar foobar foobar foobar foobar foobar\n    */\n    //CHECKSTYLE:OFF\n    public void FooBar(){\n    //CHECKSTYLE:ON\n        System.out.println(\"Hello World!\");\n    }\n}\n. About the second case:\n1. There is specific comment in the checkstyle source that this exact case should be reported:\nhttps://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/GenericWhitespaceCheck.java#L89\n2. I use this check to catch files that were not autoformatted. And autoformatter preferences for IDEA at my work (slightly modified defaults) remove this space if it is added.\nSo should we change the second case at all?\n. Done.\n. Can you provide any details? At least the regexp being used? I think it should be in configuration for the RegexpMultilineCheck\n. https://github.com/antlr/grammars-v4/blob/master/java/Java.g4 - that seems to be a java7 grammar\n. Why on screenshot the line is correct 6?\n. equals(null) seems to be a bad style on its own - for me it is better to write \"== null\"\n. Moreover - there is only two possible outcomes of this code - \"equals(null)\" - false and NPE.\n. What bothers me is that we have started from the wrong clause - \"SuppressionsLoader has been rewritten in 5.7\" - but this fucntionality \"SuppressionsLoader.class.getResourceAsStream(aFilename)\" was introduced in https://github.com/checkstyle/checkstyle/commit/be8127a604bfdd91ff7cd32a1f825c9851d791ec (5.4 release). And nothing regarding classloading has essentially changed in commit https://github.com/checkstyle/checkstyle/commit/795234dba5ed1ba32827051748d3c92657ad287d that you referenced ( class.getResourceAsStream seems to use class.getResource internally).\nmaven-checkstyle-plugin contains some some code that seems like a hack to me: http://svn.apache.org/viewvc/maven/plugins/tags/maven-checkstyle-plugin-2.11/src/main/java/org/apache/maven/plugin/checkstyle/DefaultCheckstyleExecutor.java?view=markup (lines 162-165)\n```\n        URLClassLoader projectClassLoader = new URLClassLoader(urls.toArray( new URL[urls.size()] ), null );\n        checker.setClassloader( projectClassLoader );\n    checker.setModuleClassLoader( Thread.currentThread().getContextClassLoader() );\n\n```\nSo in maven one classloader contains project classpath for the RedundantThrowsCheck to work, other class loader (actual plugin classloader) is used for the checks to load. And we have complex classloading hacks in end-user projects only for the two checks to work. (There are classloaders - two! - in com.puppycrawl.tools.checkstyle.Checker, one in com.puppycrawl.tools.checkstyle.api.Check - that is set through some hardcore reflection copy&pasted from the deprecated and abandoned now Avalon framework)\nI expect that other programmatic users of checkstyle may use some classloading hacks too and we may break them.\nSo I'm for holding a bit this issue - since nothing has changed in classloading on our side, it is not clear why this cascade of hacks stopped working.\n. Move from https://sourceforge.net/p/checkstyle/feature-requests/611/\n. Personally, I am against this feature since every assignment inside  try-statement is actually creation of the new Autocloseable resource, it is a separate statement, so it seems to me that OneStatementPerLine enforcement should enforce this case to be like\ntry (Reader xml = toXML(data); \n    Reader xslt = createXSLReader(); \n    WritableByteBuffer out = createOutputBuffer();)    {\n   ...\n} catch (final IOException e) {\n  ...\n}\nWhich is the case currently.\n. Moved from https://sourceforge.net/p/checkstyle/feature-requests/602/\n. Why travis build status is not displaying here? I've made a PR to spring project and travis status is in place.\n. It is there - https://travis-ci.org/checkstyle/checkstyle/pull_requests and https://travis-ci.org/checkstyle/checkstyle/builds/14673416 just is not displayed on this page.\n. The original intent to make a separate list of user-defined excluded classes was to not force users to retype a really long list of classes excluded by default in their configurations. \nAlso the default list is intended to be really \"core\" and \"undisputable\". However it is not really such - so long list of Execeptions (were there before these issues), Locale class that was in the issue and that I have not added to this PR and such classes as SortedMap, Queue and Deque are debatable as the \"core of the language\".\nAbout adding the last three collections - adding LinkedList to the ignored set of classes and not adding Queue and Deque may lead to usage of LinkedList type in too many places to not introduce these two \"additional\" types into the code - however without mentioning them they are really introduced since LinkedList implements both these interfaces.\nAs a side note - I hardly can imagine myself using this check.\n. Amended the changes to the commit. Travis builds - https://travis-ci.org/checkstyle/checkstyle/builds/14805670\n. I usually test any functionality in TDD manner if possible, so I've committed the test that covers this change - https://github.com/checkstyle/checkstyle/commit/503d6babef0d0d85d63b8dec9d7c035a8e807a0f\n. Fixed by the 907a19906f790ce8faea7aa74e12608538dca1b6 but not yet released.\n. #41 - is the duplicate\n. > > does it make sense for such changes\n\n\nI the question is \"does it make sense to make a release\" than the answer is definitely yes! since the last release is broken - DoubleCheckedLocking check that was removed is still in config and checkstyle does not work with the default config in the latest release. So fixing only one this issue is worth releasing, I think.\n. Commited with rebasing  - https://github.com/checkstyle/checkstyle/commit/5980388a3747fbfdfc661dce8967c461a6e0443b seems that github does not recognize it as the close of this PR...\n. Actually this revealed that travis build was not runnning checkstyle itself on the docs. I changed travis build to verify instead of package and fixed errors with trailing spaces.\n. Why PR for such change? Maybe it is better to directly apply such change to master?\n. Commit from this PR is contained in #91\n. Merged and also bumped version of maven-site-plugin - since \"mvn -Pdistro package\" was not working with maven > 3. According to https://cwiki.apache.org/confluence/display/MAVEN/Maven+3.x+and+site+plugin - new version of maven-site-plugin should be backward compatible with older versions of maven.\n. > > The test case is close to minimal -- if I take out any lines, the error stops happening.\n\n\njava\npublic class FooBar {\n    private void fooBar() {\n    loop:\n    while (true) {\n      switch (1) {\n      default:\n      }\n    }\n    }\n}\n``` xml\n<?xml version=\"1.0\"?>\n<!DOCTYPE module PUBLIC \"-//Puppy Crawl//DTD Check Configuration 1.1//EN\" \"http://www.puppycrawl.com/dtds/configuration_1_1.dtd\">\n\n\n\n\n\n```\n. I have written unit test reproducing the problem - https://github.com/isopov/checkstyle/commit/6b23e9305106ab01f8ea8f052cba737f227fbe04\nIt seems to be in our antlr java grammar or somewhere very close to this area. For some element of syntactic tree line and column numbers are not initialized. In GUI viewer of the tree and debugging it seems that these elements are different. In GUI it seems to be empty SLIST inside CASE_GROUP, while in debugging it seems to be LITERAL_WHILE element.\n\nShould I push this branch to checkstyle/checkstyle repo or anyone who will pick it up can take it from my fork?\nP.S. Stack-trace for the exception is easily obtainable, but it has not real value, since the erroneous value comes from the code really far away.\n. There is no problem with contributors credit, as far as I see it. The problem is that there is still no fix - only a Unit Test that reproduces the problem - we can commit it into master with Ignore annotation on in - but it can easily be forgotten. So lets just leave it in the current state and wait for someone (maybe me sometime in the future) to fix it - I assume some changes to antlr java grammar are needed.\nWhat I tried was:\n1. Change the grammar\n2. mvn clean test -Dtest=com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheckTest\nI don't know how development iteration can be speed up, but in this form it seems to be fast enough.\n. Committed with rebasing with no conflicts.\n. For me this update seems logical, but one thing is not clear to me - why do we leave caseIndentationAmount the only configuration that is not influenced by the basicOffset?\n. @scop sorry - my bad. Than this PR seems good. For the rationale:\nbasicOffset configuration influences the indentation for if, for, while, new and other expressions. These expressions cannot be controlled separately and so only this configuration sets their value.\nfor case and throws expressions separate configurations exist. But if they are not set separately it will be perfectly logical if they would be controlled by the configuration that changes the default indentation for all other expressions (if, for, while etc.).\nSo I'm for applying this PR.\n. Sorry, have done something strange with commits for this PR trying to preserve simple history... Any problems leaving this as a monument for my incompetence with git? Alternative seems to be enabling force pushes via github support, rewriting this ugly five commits and disabling force pushes again.\n. Pavel, can you please add email that was used to sign this commit to your github account? This will make link from the commit history to your account.\n. Travis failure can be ignored since build failed only on 1 JDK out of 4 and only one test for remote configuration failed that fail from time to time.\n. This test was broken with my PR #115 - https://travis-ci.org/checkstyle/checkstyle/builds/20407426\nLets handle it separately.\n. BTW, this test could fail before my changes and it can fail after the fix for it. It fails periodically on my local machine. The reason is that we download file from raw.github.com - and if some files are downloaded from this servers multiple times - some invocations will fail - this is done exactly to prevent such kind of automation and to make users to use raw.github.com only for seldom, from-the-browaer access, as far as I understand. So we should move this file to github.io, or sourceforge.net or somewhere else that is suitable for such file storage.\nLets discuss this problem in #117\n. Can you please a give more concrete example?\nI have reproduced the issue for the case of empty method with the closing brace on the same line: void foo(){} - is it this issue?\nEDIT: I looked into the code and found that {} is a special case that is ignored on purpose. So I cannot reproduce the issue.\n. I've tried all the cases and haven't reproduced them. I used unit-tests modification for that. I'll try with other tools also.\n. How about extending unit test for this change?\n. http://eclipse-cs.sourceforge.net/ - is a separate project. Are you sure that this feature is supported and the problem is on the core checkstyle side?\n. The simpliest case reproducing the problem seems to be:\n```\npackage com.puppycrawl.tools.checkstyle;\npublic class Github130Input {\n    public Class<?> foo() {\n        return (byte[].class);\n    }\n}\n```\nNote, that \n```\npackage com.puppycrawl.tools.checkstyle;\npublic class Github130Input {\n    public Class<?> foo() {\n        return byte[].class;\n    }\n}\n```\nHas no such problem.\n. How about applying this just removing TODO? Or maybe some thoughts on some specific changes?\n. About array cloning - as far as I understand this the main change in this PR that leads to reducing garbage pressure for more than ten times and doubling the performance.\nThe question is - how defensive do we want to be in our API for checks. Maybe this is the case when we should relax defensive requirement in favour of performance?\nAbout TODO - there was a bit of a conflict with the original author of this PR - I we will get happy merging  this PR I will remove TODO.\n. To me the problem with this PR is that it contains several independent changes inside it. I have broken it to 6 PRs: #344 #345 #346 #347 #348 #349 I hope it will be quicker to review them separately and apply/reject.\nCan we now close this PR?\nP.S. It is really sad to see that we can not deal with contribution from one the prominent and well-known performance experts in the java world.\n. 1. It is not possible to see what interfaces does a particluar mentioned in the source tyoe implements. So the exact desired feature is not possible.\n2. What can be done - is extending the default list as was already done in #69\n3. Actually some very complex implementation of Collection and Map interfaces exist in 3rd party libraries that should be used only with a good reason - it will be strange to not count them in coupling checks just because they implement these interfaces.\n. Checkstyle itself has a bit strange codestyle requirements. Field should be named \"mBasenameSeparator\", argument - \"aBasenameSeparator\". You can check that everything is fine with \"mvn clean verify\" - that will run both tests and checkstyle on itself.\n. Are you sure that this does not belong to http://jira.codehaus.org/browse/MCHECKSTYLE ? From the stacktrace I don't see checkstyle code involved.\n. So what about this? Checkstyle is barely usable on its own - from the command line - ant task that is supported in the main tree is a bit more sensible, but barely usable too. So I think we should respect such desires of our API consumers.\n. AFAIK it is possible with maven-build-helper-plugin or something like that. But first we need to do something with checks that are themselves about sompilation errors. And corresponding test inputs of these checks.\n. Actually #351 was submitted as an alternative to this PR. Since after it was merged it seems no performance benefit from this one - I suggest rejecting it.\nMaybe in future to preserve code safety and promote good practice of not using array (to be safe it will always be required to clone it and thus generate some garbage) we can switch to some immutable list for storing lines, return this immutable list if some check requires all the lines, and for this one method provide list.toArray() based implementation, marking it as deprecated.\n. Seems like a duplicate of #92\n. OK, I have reproduced \"something\" but with no difference between 5.8 and 6.1. I hope to give it a second try.\n. ",
    "hboutemy": "see http://sourceforge.net/p/checkstyle/bugs/703/\n. ",
    "Philipp91": "This seems to be a pretty important issue to me. Java 8 will be released in a little more than two months and many people will make use of lambdas. So it would be very unfortunate if you had to turn off Checkstyle only because it does not read lambdas. It's not so much about checking the correct use of lambdas (yet), the only urgent issue is not to fail when parsing a file with lambdas and maybe to check the code inside the lambda expression normally.\n. ",
    "nicolaiparlog": "I wanna second this. I just started to use CheckStyle and don't want to give it up already.(Awesome tool - thank you very much!)\nUnfortunately the Expecting-EOF-Exception the TreeWalker throws after each Lambda makes using it impossible. It would suffice if by the time Java 8 is officially released, CheckStyle would simply ignore Lambdas and check the rest of the file as usual.\n.  Hi!\nYeah, sure. This is a very small project in its earliest stages but it\nuses lambdas in its tests:\nhttps://github.com/nicolaiparlog/codefx/tree/feature/nesting\nso long ... Nicolai\nAm 04.05.2014 10:34, schrieb Ilia Dubinin:\n\nHi!\nI work on this problem. Could you please share java 8 projects with me to make me able to do testing on real sources? (if you have open source of course)\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/checkstyle/checkstyle/issues/10#issuecomment-42127662\n. \n",
    "daniilyar": "+1. Java 8 support would be a great feature.\n. Closed as duplicate of issue #63, (pull request #80)\n. I dislike code update below:\npublic String[] toLinesArray()\n{\n- return mLines.clone();\n+ return mLines;\n}\nIt allows any particular check to change an array of code lines for current class is being processed. E.g., with this update, code like below:\nArrays.sort(... .getFileText().toLinesArray());\nwritten in one check will lead to unexpected results of all another FileText-related checks. Please, keep clone array before return in order to let Checkstyle inner structures be immutable as much as possible.\nWe also have some mutability issues with DetailAST (see it's public setters for example), but we hope to get rid of them soon.\nP.S. Please, also remove TODO:\n. Array could be replaced with ImmutableList or we can use second auxiliary array to avoid cloning and reduce garbage pressure.. But, IMHO, API have to be kept as stable as possible (I mean, no check should have an ability to break processing and, probably, we could also keep API unchanged after this performance update).\n. @romani , @oburn I think that term 'Stable API' also means that no check can break it because of critical structures mutability.\nIMHO, mutability of behavior-breaking structures like DetailAST should be fixed before update for API 'convenience'. Otherwise, Checkstyle API will become 'more convenient for participants' but will not become stable == will not become constant in behavior in time. To my mind, this would negate changes done for participants convenience, espessially if that changes are API - breaking.\nLet's create an issue to fix all mutability problems in Checkstyle which lead to unstable API behavior. I am ready to spend my time on that issue and I hope to finish it a bit after GSOC end. After that (and, sure, after GSOC end) would be the best time for 'convenience' API updates.\nPlease, correct me, if I am wrong.\n. @HEm3R, Good update, thank you. If another owners will not have objections to code, tomorrow I'll merge it to main repo.\n. Please, add some UTs which assert that NPE is gone\n. Just hadn't a time to test this update on real sources. I am on it currently\n. Tested, new update works well. Merged into main repo. Thank you for contribution!\n. Could you, please, rebase your code with master to let merge be fast-forward?\nPlease, also move refactoring changes in DeclarationOrderCheck.java and FinalLocalVariableCheck.java to the separate commit.\n. Tested on Spring 3.1.X sources, no problems found.\nMerged to main repo. Good work, thank you!\n. Thank you for editorial changes and good spellchecking! \nBut, please make \"mvn clean verify\" build pass without errors. \nReason of current failure is:\nAll checkstyle sources (except generated / UI code) are checked with checkstyle itself as we are invoking ANT phase-verify.xml phase from every maven build). i.e, all code that violates our checkstyle_for_checkstyle rules will fail Maven build. Please, fix all 4 violations below to let build pass:\n[checkstyle] /home/travis/build/checkstyle/checkstyle/src/xdocs/config_coding.xml:208: Line matches the illegal pattern '\\s+$'.\n[checkstyle] /home/travis/build/checkstyle/checkstyle/src/xdocs/config_coding.xml:210: Line matches the illegal pattern '\\s+$'.\n[checkstyle] /home/travis/build/checkstyle/checkstyle/src/xdocs/config_coding.xml:1382: Line matches the illegal pattern '\\s+$'.\n[checkstyle] /home/travis/build/checkstyle/checkstyle/src/xdocs/config_coding.xml:1522: Line matches the illegal pattern '\\s+$'.\nI have also put some comments on your commit, please, resolve them.\n. Merged. Thank you a lot for your contribution!\n. Your commit message in unacceptable. Commit message should contain the 'quick words' changes explanation.\n. There was already a discussion about multithreading support in checkstyle in https://github.com/checkstyle/checkstyle/issues/138 (just linked all this together).\nThank you for the 1st step (we'll check / apply it a bit later), but please note that complete multithreading support in Checkstyle is not expected to be implemented for nearest months (or more) as it is not a first priority task for our small team.\nOur current 'first priority' tasks are Java 8 and comments support (both are expected to be implemented till Sept, 2014).\nSomewhen (I hope) we will make Checkstyle parallel out-the-box, but currently our team does not have a time to do this. So, it seems that https://jira.codehaus.org/browse/MCHECKSTYLE-138 will be postponed for months (or until somebody agree to fork our project and help us with non-API-breaking multithreading implementation).\n. Multithreading in Checkstyle seems to be a long and hard discussion ) I just linked multithreading - related pull-request to your thread to let you and another people see what opinion do Checkstyle admins already have for all this.\nI've merged your code to main repo, thank you a lot for contribution! \n. Please update PR to pass build without errors\n. Please fix code formatting to match our codestyle requirements\n. Great work, Ilja! Thank you a lot =)\n. I've tested this, fix looks good and really reduces garbage overhead.\n. Done, thanks!. @romani sure. I have already prepared the code change that runs multiple commands in multiple Hyper.sh containers in parallel (multiple commands per container, multiple parallel containers per build), but I need this PR to be merged first :). Fixed, thanks a lot!. @romani, sure this is already supported :) \nTo re-start the PR build, there are 2 options:\n1. Repo team member writes a key phrase 'test this please' in PR's 'conversation' chat\n2. PR author can do 'git commit --amend'. Even without any changes, '--amend' updates the commit hash, so the build will be re-triggered regardless the fact that there are no actual code changes\nThere are also some other options to re-trigger the failed build, but I decided to not implement them for now to not overcomplicate.. You are right, the type should be immutable so there can not be a possibility for human mistake in type string. Yes, most of meaningful builds require m1 type, but for some m2 will be required. So for now I will support following:\n1. runOnHyper(\"package\", \"mvn -B package\") --> runs on m1 type\n2. runOnHyper(HyperType.M1, \"package\", \"mvn -B package\") --> runs on the type selected. Done. Fixed. ",
    "dlopatin": "We are planing to move our project to java 8 in one year, so this would be great to add its support to Check Style project. \n. ",
    "eskatos": "Using 5.7 every file that contains a lambda expression get the expecting EOF, found '}' error and is not checked further.\nI understand that supporting the whole Java 8 syntax and coming up with checks for new idioms is a big task.\nLike @nicolaiparlog suggested, shouldn't it be possible to make a first step that simply gracefully ignore Java 8 peculiarities so we all get a checkstyle version that is usable with Java 8 sooner, even if it is not full-featured?\nI have the gut feeling that that's what you're after with Java 8 ANTLR support. If this is the case, please tell us :-)\nCheers\n. Default methods cause the very same issue: expecting EOF, found '}' and whole file unchecked.\n. :+1: \n. ",
    "cbanack": "@romani: Thanks for the update!  \nIf you guys can find a way to make Checkstyle ignore lambda expressions (i.e. no error), I think that would be a really useful first step.  Once that problem is solved, developers won't have to choose between using Checkstyle or using lambda expressions.   At that point, it's no big deal if it takes a long time to do the rest of the Java 8 support.\n. When I try to build @sabaka 's clone (gsoc branch) with mvn -Pdistro clean package, I get exactly the same build error that @brutall got a few comments back, i.e. this one:  \nhttps://gist.github.com/brutall/f6594b1986011ace76b9\nIs there something I'm missing here?  I bypassed the problem by commenting out the entire maven-site-plugin plugin section of the distro profile in pom.xml.  I have no idea what I just removed, but the build finishes now and the plugin seems to work.\n. When I use my @sabaka clone (master branch), it still fails in the same spot, but with a slightly different error:\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD FAILURE\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 01:38 min\n[INFO] Finished at: 2014-08-21T17:57:00-06:00\n[INFO] Final Memory: 62M/262M\n[INFO] ------------------------------------------------------------------------\n[ERROR] Failed to execute goal org.apache.maven.plugins:maven-site-plugin:3.3:site (gen-site) on project checkstyle: Error during page generation: Error rendering Maven report:\n[ERROR] Exit code: 1 - K:\\GitHub\\checkstyle\\src\\main\\java\\com\\puppycrawl\\tools\\checkstyle\\api\\Check.java:29: error:\n invalid uri: \"./{@docRoot}/../writingchecks.html\"\n[ERROR] * see <a href=\"./{@docRoot}/../writingchecks.html\" target=\"_top\">Writing\n[ERROR] ^\n[ERROR] K:\\GitHub\\checkstyle\\src\\main\\java\\com\\puppycrawl\\tools\\checkstyle\\api\\TokenTypes.java:2283: error: bad HTM\nL entity\n[ERROR] * The <code>&</code> (bitwise AND) operator.\n[ERROR] ^\n[ERROR] K:\\GitHub\\checkstyle\\src\\main\\java\\com\\puppycrawl\\tools\\checkstyle\\api\\TokenTypes.java:2283: warning: empty\n <code> tag\n[ERROR] * The <code>&</code> (bitwise AND) operator.\n[ERROR] ^\netc, etc, etc...\n. @romani, thanks, I'll do that.\nI recommend 'ignore', that way it behaves like Java 7.   -Xdoclint SHOULD be set to none by default in Java 8.   But it is not.  This has introduced this exact same problem for nearly everyone else's projects, too.   :(\n. ",
    "Zlika": "Hi there!\nStill no workaround for this issue? I don't want to choose between using Java 8 and using checkstyle! :-(\n. Hello Roman,\nYou would have more feedbacks if you would provide a binary test package (something like a version 6.0rc0 release).\n. ",
    "ghost": "@Zlika I here ya. I'm working on project right now with the best opportunity to utilize java 8's features like the default interface methods for instance and I don't know what to do. Everyone on my team is relatively new to team projects with code and just getting rid of checkstyle just seems like such a bad idea!\nI do hope that they update checkstyle soon to support java 8.\n. Thanks! Fixed\n. ",
    "sabaka": "Hi!\nI work on this problem. Could you please share java 8 projects with me to make me able to do testing on real sources? (if you have open source of course)\n. Thanks a lot!\n. Hi!\nIt is my GSOC issue. It has to be done till 18th of August, but I'm going to finish in July.\nAlso, after discuss with team, we decide, that implementation of ignoring option for Java 8 features is painful, and may break grammar. Unfortunately community has to wait for full implementation of Java 8 features.\n. Hi!\nNow I implemented support of default methods, method references (::) and almost finished with lambdas.\n. Hi all!\nI rebased my branch against checkstyle master. It has to work now.\nAlso thanks a lot for help with testing :)\n. @cbanack why do you use master branch? It doesn't support Java 8 syntax. Please use gsoc branch.\nAs for failure, I'll check what's wrong asap.\n. Hi all!\nMy gsoc branch has been updated (Java 8 annotation here)\n. @T3rm1 almost. I'm cleaning build output, but it will not bring new changes into Java 8 support.\n. Real stacktrace:\nexpecting '5', found '2'\n    at com.puppycrawl.tools.checkstyle.grammars.GeneratedJavaLexer.nextToken(GeneratedJavaLexer.java:407)\n    at antlr.TokenStreamHiddenTokenFilter.consume(TokenStreamHiddenTokenFilter.java:38)\n    at antlr.TokenStreamHiddenTokenFilter.nextToken(TokenStreamHiddenTokenFilter.java:134)\n    at antlr.TokenBuffer.fill(TokenBuffer.java:69)\n    at antlr.TokenBuffer.LA(TokenBuffer.java:80)\n    at antlr.LLkParser.LA(LLkParser.java:52)\n    at com.puppycrawl.tools.checkstyle.grammars.GeneratedJavaRecognizer.classOrInterfaceType(GeneratedJavaRecognizer.java:950)\n    at com.puppycrawl.tools.checkstyle.grammars.GeneratedJavaRecognizer.classTypeSpec(GeneratedJavaRecognizer.java:811)\n    at com.puppycrawl.tools.checkstyle.grammars.GeneratedJavaRecognizer.typeSpec(GeneratedJavaRecognizer.java:773)\n    at com.puppycrawl.tools.checkstyle.grammars.GeneratedJavaRecognizer.declaration(GeneratedJavaRecognizer.java:1539)\n    at com.puppycrawl.tools.checkstyle.grammars.GeneratedJavaRecognizer.traditionalStatement(GeneratedJavaRecognizer.java:5318)\n    at com.puppycrawl.tools.checkstyle.grammars.GeneratedJavaRecognizer.statement(GeneratedJavaRecognizer.java:4244)\n    at com.puppycrawl.tools.checkstyle.grammars.GeneratedJavaRecognizer.compoundStatement(GeneratedJavaRecognizer.java:3910)\n    at com.puppycrawl.tools.checkstyle.grammars.GeneratedJavaRecognizer.field(GeneratedJavaRecognizer.java:3388)\n    at com.puppycrawl.tools.checkstyle.grammars.GeneratedJavaRecognizer.classBlock(GeneratedJavaRecognizer.java:2534)\n    at com.puppycrawl.tools.checkstyle.grammars.GeneratedJavaRecognizer.classDefinition(GeneratedJavaRecognizer.java:627)\n    at com.puppycrawl.tools.checkstyle.grammars.GeneratedJavaRecognizer.typeDefinitionInternal(GeneratedJavaRecognizer.java:549)\n    at com.puppycrawl.tools.checkstyle.grammars.GeneratedJavaRecognizer.typeDefinition(GeneratedJavaRecognizer.java:382)\n    at com.puppycrawl.tools.checkstyle.grammars.GeneratedJavaRecognizer.compilationUnit(GeneratedJavaRecognizer.java:195)\n    at com.puppycrawl.tools.checkstyle.TreeWalker.parse(TreeWalker.java:513)\n    at com.puppycrawl.tools.checkstyle.gui.ParseTreeInfoPanel.parseFile(ParseTreeInfoPanel.java:254)\n    at com.puppycrawl.tools.checkstyle.gui.ParseTreeInfoPanel.openFile(ParseTreeInfoPanel.java:185)\n    at com.puppycrawl.tools.checkstyle.gui.Main.main(Main.java:42)\n. Swallowing here:\nParseTreeInfoPanel.java line 222:\ncatch (final ANTLRException ex) {\n                showErrorDialog(\n                        aParent,\n                        \"Could not parse \" + aFile + \": \" + ex.getMessage());\n            }\nAnd ANTLR sources (origin exception type):\npublic class TokenStreamRecognitionException extends TokenStreamException {\n    public RecognitionException recog;\n```\npublic TokenStreamRecognitionException(RecognitionException re) {\n    super(re.getMessage());\n    this.recog = re;\n}\npublic String toString() {\n    return recog.toString();\n}\n```\n}\n. This is what we can see in debug. Expected LT(1)=\"(\" and LT(2)=\"'\\u005C\\u0027'\"\n\n. @romani, fixed.\n. @romani now it seems good for me.\nI have second option, but this more useful.\nfirst:\n\nsecond (brutall):\n\n. It's not antlr problem\n\n. @ikabiljo I couldn't reproduce it.\nDo you have personal config?\nMy commit:\nhttps://github.com/sabaka/checkstyle/commit/788e5895b12af7f6f2a2c506d7072976853e341c\n. @ikabiljo I have same results with this checks. What about config?\n. @ikabiljo done\n. https://github.com/sabaka/checkstyle/commit/ac4e5447a26b70c12c5b6c07097331d4046976bc\nFixed.\n. https://github.com/sabaka/checkstyle/commit/343e946b076a5344e380c76e5b3ea23438b6fc93\n. Hello @aunkrig,\nDo you use values of constants instead of names?\n. Hi @aunkrig .\nI have bad news for you.\nAfter some investigation we realized the reason of this problem.\nUnfortunately it's impossible to revert TokenTypes like it was in v5.7.\nThis changes are related to grammar changes, which make checkstyle support Java 8 syntax and comments. Similar changes had to appear when checkstyle began support Java 7 (Sep 2011).\nAfter discussion we decide to do massive changes of TokenTypes in next release, which allow us to avoid same problem every new grammar release in future.\n. @aunkrig \nLooks like I've found another way to resolve this problem.\nPlease test changes from branch in my fork: https://github.com/sabaka/checkstyle/tree/iss505\nand write here about result\nThanks\n. Violation will be displayed on the next line. Violation will be displayed on the next line. Remove trailing space. I don't like this comments.\nIt was ok for shared inputs, but now they should be fixed to represent current purpose or removed. Same as above. @rnveach , ok, makes sense.\n@samuel-gu , no, don't do them.. Same problem with weird new name. Strange name. I'm sure it should be InputWhitespaceAroundSwitch.java. Hm. Whitespace around whitespace... Strange meaning. Maybe another postfix, as we already have \"InputWhitespaceAround\"?. Name \"NoWhitespaceAfterWhitespace\" is confusing to me.\nWe don't have InputNoWhitespaceAfter.java in this folder yet. Please rename file.\nOther changes looks good for me. Please revert this formatting changes. Despite type named MultiThreadModeConfiguration I would prefer singleThreadModeConfiguration for variable, as in fact you have single thread mode here.. Are you going to have only buildOptions when we release MT options to public?. Check IDE formatter. @Vladlis , I have created one: #4547 . Why \\r disappeared here (and everywhere)?. Sorry, I'm a little out of scope, but where can I see results of this change?. As for me, interfaces are ok for this purpose.\n@rnveach , what is your opinion?. Don't we need to call writeFileClosingTag in this method?\nOr message without file closing tag should mean, that something went wrong during file processing?. Move ev closer to usage. @soon , agree. Now it looks weird.\nWait for admin's confirmation.. This is not annotation. ",
    "T3rm1": "How long will it take? Any ETA? :)\n. So, it's finished?\n. ",
    "mritun": "+1\n. ",
    "wendigo": ":+1: \n. ",
    "gredler": "Sabaka: In terms of sample code, you may want to consider testing against the OpenJDK 8 codebase, which already has many examples of default methods on interfaces, lambdas, etc.\nFor example, these tests use lambdas extensively:\nhttp://hg.openjdk.java.net/jdk8/jdk8/jdk/file/687fd7c7986d/test/java/util/stream/test/org/openjdk/tests/java/util/stream\n. I also think that this option would be useful.\n. ",
    "tnn": "+1 This is blocking us also.\n. ",
    "satoshi-kimura": ":+1: \n. 'Multiple Catch' changed?\nex : catch(NullPointerException | IllegalArgumentException e)\nver5.7 :\nLITERAL_CATCH(catch)\n  LPAREN(()\n   PARAMETER_DEF(PARAMETER_DEF)\n   MODIFIERS(MODIFIERS)\n   TYPE(TYPE)\n   IDENT(NullPointerException)\n   IDENT(IllegalArgumentException)\n   IDENT(e)\n  RPAREN())\n...\nver5.8-gsoc : \nLITERAL_CATCH(catch)\n  LPAREN(()\n    PARAMETER_DEF(PARAMETER_DEF)\n    MODIFIERS(MODIFIERS)\n    TYPE(TYPE)\n    BOR(|)\n    IDENT(NullPointerException)\n    IDENT(IllegalArgumentException)\n    IDENT(e)\n  RPAREN())\n...\n. @romani ,  thanks!\n. ",
    "zaskar9": "+1 Support for Java 8 (in particular Lambda expressions) would be awesome!\n. ",
    "devacto": "+1 for Java 8 support. Thanks!\n. ",
    "LorenzSchumann": "+1 for Java 8 Support.\nWhat is the state of your development, sabaka?\n. ",
    "khozzy": "+1 We also need it. Thanks in advance.\n. @romani, when we might expect it in maven repositories?\n. ",
    "offbynull": "+1\n. ",
    "mariuszluciow": "+1 high demand indeed :)\n. ",
    "adrianchung": "+1\n. ",
    "brutall": "+1\n. @romani \nThere is one advantage in uploading a binary, even built by yourself - it will probably work. Building from sources is always tricky and many weird things may happen - even in Java and if you use Maven, Gradle, etc.: https://gist.github.com/brutall/f6594b1986011ace76b9\n. @romani @sabaka \nI have found an issue and sent a pull request to @sabaka . Other than that it seems to work perfectly! Thanks a lot!\n. @romani \nI have run checkstyle on one of my projects to check it for Java8 support and I found such a weird case in one of my files ;-) Checkstyle has crashed on this file, so I started debugging. No, I don't watch your development, just Issue 10 ;-D\n. ",
    "tuan-pham": "+15 for my whole team :)\n. Hi guys, \nIs there anyone try to run this release in Gradle. \nI tried but couldn't run the Checkstyle.SNAPSHOT.jar with Checkstyle plugin in Gradle. Any ideas?\n. ",
    "henrik242": "@romani Why did you close this issue?\n. @romani Thanks :)\n. I get unexpected token: > on age -> !isNumeric(age) with the latest HEAD (a123763).  Here's the full code:\nList<String> invalidAges = Stream.of(childAges.get(0).split(\",\"))\n            .filter(age -> !isNumeric(age) || valueOf(age) < MIN_CHILD_AGE || valueOf(age) > MAX_CHILD_AGE)\n            .collect(Collectors.toList());\n. @zapodot Ahh, of course. Thanks :)\n. .. or rather 6.1.1 which is the latest version\n. I still have some problems regarding the default keyword and java 8, see issue #297\n. @romani It looks good now.  Go ahead with the release.\n. ",
    "ikabiljo": "@romani - will there be a build on maven before the actual release - like SNAPSHOT or release candidate?\nIt is much easier to run, test and report issues that way, and to always pick up latest changes that happen.\n. Two issues thus far with current code on gsoc branch:\nIndentation properties don't seem to be applied properly to lambdas. For example, if I change indentation to 2, with: \n<module name=\"Indentation\">\n      <property name=\"caseIndent\" value=\"0\"/>\n      <property name=\"basicOffset\" value=\"2\"/>\n      <property name=\"braceAdjustment\" value=\"0\"/>\n   </module>\nIt complains for the following code:\npublic class A {\n  void function(Runnable x) {\n    Runnable r = () -> {\n      x.run();\n      x.run();\n    };\n  }\n}\nwanting lambda to be 4 spaces indented:\nblock child at indentation level 6 not at correct indentation, 8\nblock child at indentation level 6 not at correct indentation, 8\nblock rcurly at indentation level 4 not at correct indentation, 6\nAlso static interface methods are not recognized properly:\npublic interface B {\n  static int f() {\n    int someName = 5;\n    return someName;\n  }\n}\ncomplains with:\nRedundant 'static' modifier.\nName 'someName' must match pattern '^[A-Z][A-Z0-9]([A-Z0-9]+)_$'.\n. Do you have an estimate when do you expect to be able to release it?\nIs it in plan to fix most of outstanding issues with Java 8 support (like #281, #282, #284) before the release?\n. Issues are these two checks: RedundantModifier and ConstantName\nnot MemberNameCheck.\n. I rebased, rebuilt, just to confirm issue is still there.\n@sabaka - I am running it through maven, let me know if you can repro with this config:\nhttps://gist.github.com/ikabiljo/ccff4ceff3a5d0a46711\nIf you cannot repro with that, I'll try to run it directly - outside of maven, and provide more details.\n. Shouldn't \"default\" be added to that list? Currently, no order of modifiers on default method passes that check?\nJLS for default methods:\nhttp://docs.oracle.com/javase/specs/jls/se8/html/jls-9.html#jls-9.4\n. ",
    "zapodot": "@henrik242 the pull request #226 has not been merged into upstream yet. You may want to try with your own build of @sabaka 's clone at https://github.com/sabaka/checkstyle \n. ",
    "ttjordan": "Is there any timeline for this issue? \n. ",
    "GreyTeardrop": "I have faced the same issue with mvn -Pdistro package build of gsoc branch as reported above (my build log). The issue should be reproducible by building Checkstyle with JDK 8 (I've used 1.8.0_20, Windows x64 version), as JDK 8 enables Javadoc linter by default.\nThe workaround is to add -Xdoclint:none to Java commandline arguments via top-level pom.xml:\nxml\n<properties>\n    \u2026\n    <additionalparam>-Xdoclint:none</additionalparam>\n</properties>\n. ",
    "Pinny3": "+1\n. ",
    "leocomelli": ":+1: \n. ",
    "benkiefer": "If anyone is facing this issue on gradle, you can bump the default version of checkstyle from 5.7 to 5.9 with the following config.\napply plugin: 'checkstyle'\ncheckstyle {\n    toolVersion = \"5.9\"\n}\nYou can see that config in the source here\n. ",
    "picomancer": "I've been using Java since the 1.2 days in the late 1990's.  The only Maven projects I've ever built have been ones that come with instructions.  There might be a Maven equivalent of \"./configure && make && make install\" but it's not obvious to me from the project or the Maven website, and I don't want to learn the intracacies of Maven just to turn this project's sources into a jar.\nI just want to check my code style with the latest and greatest checkstyle features!  (In particular, sudo apt-get install checkstyle gives me a version of checkstyle where RequireThis isn't aware of static fields.)\nHere's my response to the specific objections you've raised, and some thoughts on Maven.\n\nEverything is standard.\n\nFor me, a \"standard\" build process is either running a script called build.sh, or ./configure && make && make install.  Anything more complicated than that -- Ant, Maven, whatever -- requires instructions!\n\nthis is the first time in my life i see anyone using java libraries from the linux distro packages\n\nThis objection doesn't even make sense.  Yesterday was the first time in my life I used checkstyle!  Do you live in some alternate universe where the only purpose of distro packages is to take up unused space on hard disks?  The only reason those packages exist is so people can use them!\n\nthe build become non-repeatable\n\nThis objection, coming from a Maven user?  One of my major objections to Maven is that it makes builds non-repeatable!  Every time I've used Maven, it insists on downloading hundreds of megabytes of who-knows-what from who-knows-where!  Do you really think that a build tool that needs to go out to various Internet servers in the cloud to download stuff has any place at all in any build system whose goal is repeatability?\nWith Ant, you download or build the dependencies yourself, then shove them in the /dep folder.  If you want a repeatable build, you're in control -- just use the same jar file you used before!  Or build it from the same source tarball / commit!\nContrast this with \"the Maven way\":  Maven will change versions of things from under you when some random guy you don't know somewhere on the Internet who maintains the Maven server for the Foo library decides it's time to upgrade Foo.  Or your build'll start breaking when he goes out of business and the Foo server 404's!\nIn my experience, using Maven generally involves downloading hundreds of megabytes of who-knows-what from who-knows-where.  Good luck ever building anything with Maven if you don't have a network connection.  Maven's \"Convention over configuration\" philosophy means there's so much automatic magic going on that, when anything breaks, you have to spend hours figuring out exactly what Maven is trying to do, let alone the proper fix for the problem.  (And anyone who's ever used any build system knows that the build always breaks.)  This is why I prefer Ant -- while it's a little more verbose and requires a little more work than Maven, you can understand what the tool is trying to do without spending hours reading its documentation and sources, and your builds don't break or change based on the state of your network connection or random internet servers somewhere in the cloud.\nI'm not alone in hating Maven.  See the references.\n[1] http://stackoverflow.com/questions/861382/why-does-maven-have-such-a-bad-rep\n[2] http://kent.spillner.org/blog/work/2009/11/14/java-build-tools.html\n[3] http://ignorancecompounded.blogspot.com/2008/10/maven-sucks.html\n. Sorry if I was a bit harsh.  It's just that I don't see the benefits of Maven even in theory, and in practice every experience I've ever had with Maven has been extremely negative.  I've never really understood why everyone uses it -- I'm probably missing some key details somewhere.  But I guess this pull request isn't exactly the best forum to have this debate, maybe I'll write a blog post or something.\n\nYour INSTALL.md will contain only: \"mvn -Pdistro package\"\n\nYeah, it's fine if you don't want to include the Ant script.  I realize that a lot of people disagree with me -- TBH I was sort-of half-expecting it to be rejected.  Switching build systems is a big step -- as much as I hate Maven, I realize it's working today and even if you accepted my patch entirely I'd still recommend to keep the Maven build file around until the Ant build can do everything the Maven build does.\nAnd Ant has its wrinkles too.  So I'm thinking of writing my own build system someday, maybe you can switch to it when I do :)\nAs long as you accept the chmod patch and write some installation instructions for people who aren't Maven gurus (Maven mavens?), I'll be happy enough with the result.\nHeck, even if you reject this whole pull request, it makes no real difference to me -- on my machine I have it building the way I want, with the tools I want, and the only benefit of accepting the pull is everyone else being able to easily do the same.\n. Let's go with option (1).  I've reset the pull request branch to include the first commit only (changing the file perms).\n. ",
    "dharkness": "To clarify, when static imports are grouped into a single block of text without any empty lines between them, I want them to be sorted alphabetically rather than in the package order. In the example above, java comes before org in the static import group even though regular imports are grouped with org before java due to the package ordering rules.\nRight now Checkstyle wants this:\n```\nimport static org.foo.Bar.*;\nimport static java.Math.abs;\nimport org.foo.Foo;\nimport java.util.Set;\n```\nbut I want it to match Eclipse (above)--or better an option because I think others may want the current behavior.\n. ",
    "radai-rosenblatt": "just found this issue after failing to reconcile checkstyle and eclipse and wanted to say \"me too\"\n. ",
    "flatiron32": "Is it acceptable to enhance the check to skip RCURLY and LCURLY for \nTokenTypes.ANNOTATION_ARRAY_INIT and there is for TokenTypes.ARRAY_INIT? It seem like this is just an oversight to allow no space if the parent is Array Init and not Annotation Array Init.\nIf this is an acceptable solution, I have made the changes locally with tests. I can submit a pull request.\n. https://github.com/checkstyle/checkstyle/pull/111\n. Thanks for letting me know. I will gladly integrate any comments.\u00a0\nJacob\n\u2014\nSent from Mailbox for iPhone\nOn Fri, Feb 21, 2014 at 2:33 PM, Ivan Sopov notifications@github.com\nwrote:\n\nTravis failure can be ignored since build failed only on 1 JDK out of 4 and only one test for remote configuration failed that fail from time to time.\nReply to this email directly or view it on GitHub:\nhttps://github.com/checkstyle/checkstyle/pull/111#issuecomment-35770560\n. Great! What is the roadmap for releasing a new version?\n. \n",
    "gaul": "The original commit lacked documentation, which made this functionality undiscoverable.\n. @romani this commit documents an existing feature that was committed in 2011.  My commit merely documents this functionality.  Please read the referenced commit from my commit message.\n. @romani Opened #44.\n. ",
    "pbaranchikov": "Already fixed in master by commit e76ae6ed8d34160d87b490f5f3ee92f7ba74f5aa\n. Already fixed in master branch by commit e76ae6ed8d34160d87b490f5f3ee92f7ba74f5aa\n. In case of inheriting from java.util.Properties, we lose line number (where key appears). Line number of a property can be detected only parsing .properties file by ourselves.\nAlternative way to detect line of a property is to go through all the lines and detect lines, that matches \n^name[\\s=;]+\nDo you think this approach is correct or we should get rid of line numbers at all?\n. Please, review new changes.\n. Redundant catch removed. Please, review.\n. > can you please be either Pavel or maednoldor :)\nRenamed. There may be some problems with Travis CI due to user rename.\n\nIt should have one \"return\" from method.\n\nChanged. There is a special check in Checkstyle, forcing maximum return count :)\n. Fixed, Please, review.\n\nI need to see why Travis CI, did not catch that, as checkstyle should recheck his own code by his checks.\n\nReturnCount check is absent in checkstyle_checks.xml at all.\n. My approach is not to store non-duplicated properties at all.\nfinal Object oldValue = super.put(aKey, aValue);::\nif (oldValue != null && aKey instanceof String) {::\nSo, only the values, already existing in inner Property's hashTable should go to mDuplicatedStrings.\n. Switched to use of Miltiset. Please, review changes\n. > Did you checked Test coverage \"mvn cobertura:cobertura\"?\nYes, Reportt says, all code is coverted except\n65     0          catch (IOException e) {::\n 66     0         log(0, \"unable.open.cause\", aFile.getPath(),::\n 67     0                e.getLocalizedMessage());::\nand \n104    12    if (lineNumber > aLines.size()) {\n105    0         lineNumber = 0;\n106            }\n. I've added 2 additional tests to test the uncovered lines. Please, review.\n. Newlines have been added. Please, review.\n. Seems like the introduced check is completely overlapped by the one implemented within sevntu-checkstyle.\n. ",
    "ychulovskyy": "I would like to work on the issue.\nLet's clarify requirements.\nI assume that:\n1. license header starts from the first line of a class and may start from /, /* or //\n2. all the comments should be ignored until package declaration (yep, it's possible that the class is in default package but it's the case we can ignore since it should not appear)\nAre you OK with the assertions? They will help to use simple text parsing instead of TreeWalker.\nQuestion: should we add \"ignoreHeader\" property to StrictDuplicateCodeCheck?\nIf yes, should it be set to true by default?\n. @romani The issue can be closed since #473 has been fixed.\n. Fixed. Could you close it?\n. Ok, will squash and create new pull request soon.\n. Just run IntelliJIdea checkstyle plugin\n. Is updated documentation OK? Is it enough to merge the changes?\n. Maybe I did wrong assumption. Let me explain the situation.\n1. http://checkstyle.sourceforge.net/config_design.html states \"Check nested (inner) classes/interfaces are declared at the bottom of the class after all method and field declarations.\"\nSo, we want to use the rule only inside a class but not inside a method.\n2. https://github.com/checkstyle/checkstyle/issues/6 states that we cannot force the rule in method because \"not even possible to declare the variable before the inner class\".\nI came up with a solution to use the rule inside class but not inside a code block (method or {}).\nPlease correct me if you have another solution in your mind. \n. Looks like encoding issue in IntelliJ Idea. I had ISO-8859-1 as default encoding. And differences window doesn't show any issues :(\n. 1. ParameterNumberCheck JavaDoc and config_sizes.xml have been updated. Please let me know if I missed something.\n2. Will update visitToken soon.\n. Done.\n. @romani Will have free time tomorrow.\n. @romani Is it better now?\n. ",
    "mkordas": "StrictDuplicateCode has been removed from Checkstyle\n. I don't see any Stack implementation in Guava. In standard Java we have ArrayDeque (doesn't handle nulls...) and LinkedList (a little bit slower). Which one should I use?\nNote that Deque does not have method peek(int i) which is provided in FastStack. In a few places I would need to use List interface and method get(int i) instead.\n. Should I describe reason, when the only reason is to be up-to-date and enable people to use new features introduced?\n. Build green, commits squashed.\n. @romani - WhitespaceAfter can't be used - set of tokens is limited. Moreover, we can't say that after RBRACE there must be space - it multiple other contexts there should be no space.\nWhitespaceAround does not apply too. What we want is WhitespaceBeforeArrayInitializer check.\nAs there is no clear requirement for that in Google Java Style, let's treat it as our own check.\nIn Guava library in 95% cases there is whitespace before, in 5% cases there is no whitespace.\n. please add better description and some samples to documentation\n. throws NullPointerException doesn't make sense to me - every method in Java can potentially throw NPE\n. what if aFile currently is null? Then we'll have NPE out of NPE\n. I would use message like Exception occurred during the analysis of file\n. Javadocs should begin with capital letter and end with full stop.\n. add space between . and It\n. I think we always can check this. The question is if we should :) Rename method and Javadoc to shouldCheckEnhancedForLoopVariable.\n. Please remove obsolete spaces from link. Change > enhanced for-loop < to >enhanced for-loop< and put spaces outside.\n. Maybe it would be better to give link to Java 8 JLS?\n. Change to would be suppressed\n. This link doesn't work - please recheck all.\n. I think the better name would be hasNotAllowedTwoEmptyLinesBefore()\n. Change there is not allowed multiple empty lines to multiple empty lines are not allowed\n. Shouldn't we replace it somehow? Stacktraces may be useful for users and us.\n. Would be good to have some idents for readablity\nxml\n<p>\n  Examples:\n</p>\n<p>\n  Check's config:\n</p>\n<p>\n  <code>\n    &lt;module name=&quot;CommentsIndentation&quot;/&gt;\n  </code>\n</p>\nbut it would cause this check to fail on itself. Just a thing to consider.\n. Are we sure that indentation level applies to this context? Usually indentation level means just a level with configurable number of spaces/tabs. Here level=one space.\n. what does is not indented from the beginning mean here?\n. Why on new line? LineLength check should not apply to imports\n. Actually it's first time I see something like that, I think we should follow principle of least astonishment here. Moreover, such line breaks needs to be done manually while imports should generally be managed by IDE only.\n. Thanks. Actually this is a problem with practicing our own preach... We already have check  NoLineWrap, but it isn't enabled for Checkstyle codebase :disappointed: \n. This check would fail on itself here, am I right?\n. Just one-line Key pointing to the warning message text in \"messages.properties\" file. would be enough. Do the same for all other Javadocs.\n. Wouldn't it be better?\njava\nif (commentAst.getType() == TokenTypes.SINGLE_LINE_COMMENT) {\n    ...\n} else if (commentAst.getType() == TokenTypes.BLOCK_COMMENT_BEGIN) {\n   ... \n}\n. Typo: There're\n. Please wrap the code wragments with <tt> as it is done in e.g. http://checkstyle.sourceforge.net/config_blocks.html#RightCurly\n. Thanks Damian, I'll try that.\n. Hmm... in this case I don't know what should I merge.\n. :100:\n. Obsolete constructor - let's remove it\n. Instead of comments, I'd prefer separate test method with meaningful name for each case\n. Test(expected = ...) would do the same with less code\n. We have util for exactly this code - please check in Utils\n. Can you tell me what is the difference in logs between expected and try-catch? Both fail with one line of message and one stacktrace, when they pass both log nothing.\n. Removed this line because final field cannot be reassigned.\n. For me it was obsolete field.\n. obsolete method\n. fix typo :)\n. To achieve 100% code coverage method had to be invoked also through interface to cover bridge method: http://codeidol.com/java/javagenerics/Comparison-and-Bounds/Bridges/\n. static cache is not multithreading-friendly...\n. This is controversial, but what else can we do if user suppresses warnings using something like @SuppressWarnings((1 != 1) ? \"\" : \"unused\")?\n. this line was added for regression purposes\n. even git mv doesn't preserve history here, I'm not sure why\n. From http://sourceware.org/ml/frysk/2008-q1/msg00004.html:\n\ngit-mv does not do anything special, in fact.  GIT's support for file\nrenaming is just implicit detection, not explicit markers from user action.\nSo, what matters is doing a commit that removes file A and adds file B,\nwhere A and B have completely identical contents (matching sha1sum).\nTo preserve history, you have to carefully do a commit that only renames,\nand then a commit that touches the contents of the file.\n\nSo I need to make two commits\n. at this point vwhitespace.getType() == JavadocTokenTypes.WS always returns true\n. this is just a setter, why we need to update it?\n. @baratali, why can't we use just Guava? http://docs.guava-libraries.googlecode.com/git/javadoc/com/google/common/io/Closeables.html\nI don't think we want any additional dependency in Checkstyle.\n. but why you want to log it instead of rethrowing? If file that we are writing to won't close properly, it will be corrupted\n. why can't we use http://docs.guava-libraries.googlecode.com/git/javadoc/com/google/common/io/Closeables.html#close(java.io.Closeable,%20boolean) ?\n. I don't think that throwing an exception is necessary. In majority of other places I think we have just empty private constructor.\n. can you provide some reliable sources explaining why names like jTreeTable are invalid?\n. @romani, do you know why compilation fails after removing java.lang here?\n/home/travis/build/checkstyle/checkstyle/src/it/java/com/google/checkstyle/test/chapter4formatting/rule461verticalwhitespace/EmptyLineSeparatorTest.java:[27,14] type com.google.checkstyle.test.chapter4formatting.rule461verticalwhitespace.Class does not take parameters\n. OK, I'll try to isolate the problem and I'll ask the question on\nStackOverflow.\n. Issue solved - we need to remember that Maven has different classpath than IDE - it's extended with compilable inputs - in this case EmptyLineSeparatorInput.java.\n. Why have you moved <element> two spaces back here?\n. This one was fine I believe. We use 2-space indentation in pom.xml\n. I think this row can be entirely removed - rule will be enabled with default config anyway.\n. I don't think we should use anywhere any tabs. Let's use spaces instead :)\n. This has introduced new violation:\n\nUnnecessaryLocalVariable\nReports unnecessary local variables, which add nothing to the comprehensibility of a method. Variables caught include local variables which are immediately returned, local variables that are immediately assigned to another variable and then not used, and local variables which always have the same value as another local variable or parameter.\n. more common is to say lambda expressions instead of lambda statements\n. Comment The start of the lambda isn't the first element on the line is contradicting with comment above: If the start of the lambda isn't the first element on the line. What about the case when lambda is the first element on the line?\n. Can you explain why do we need this change?\n. we should also add more tests for more unusual cases like below:\n\n``` java\nRunnable r7 = ()\n     ->\n    {\n    }\nRunnable r8 =\n    ()\n     ->\n    {}\n``\n. I don't see any declaration ofSomeInterface- please make input compilable in Java 8.\n. Aligning method parameters and Javadoc looks nice, but whenever any name or modifier will be changed, all the lines must be changed instead of one affected. I would go without any alignment.\n. we recently changed empty array initalizers toArrayUtils.EMPTY_STRING_ARRAY. let's keep our lines shorter\n. I know it's probably copy&paste, but these empty lines are not needed here\n. I don't thinks some of this settings matter for our case. For sure we're not testing anything related tothrows, so we can rely on defaults if possible.\n. This input is aboutAnnotationClosingBracketEndInSameIndentationAsOpening`. For sure we can think of some more annotations for this file proving that functionality works correctly, e.g. something like that:\njava\n@SimpleType( value = Boolean.class\n)\n. we can use here {@code } syntax\n. IDEA Inspections have just detected problem in this line - there's no TokenTypes.INDENT available: https://teamcity.jetbrains.com/viewLog.html?buildId=563116&tab=Inspection&buildTypeId=Checkstyle_IdeaInspectionsPullRequest\n. Should be \"to instantiate it as\"\n. typo: chack\n. Just ... should be sufficient instead of , .... .\n. IMO we should break long lines also in properties if it's above 120 chars\n. typo: lates\n. TC says: Variable named c doesn't have type 'char' or 'java.lang.Character'\nJust rename it to checker.\n. please remove commented out code\n. please fix indentation from this point on\n. is there any reason for it to be in non-compilable resources?\n. then -> than\n. I think here we should use ordered list (<ol>)\n. I believe that we should keep space between * and contents in Javadoc\n. please do not use numbered tests - each test should have its own name telling the exact thing it's going to check\n. can we use some more meaningful pattern here than myO?\n. groups) - why do we need closing parenthesis here?\n. If you'll set it like here, will the check also accept other translations? Please clarify in docs.\nAlso, what about ROOT translation (no code in file name)?\n. Can we create here just empty set?\n. Maybe we can inline this variable? Type for it is quite complex :)\n. Can you explain why we need to create one more set here? Can't it be proper TreeSet from the very beginning?\n. We need to escape # here, because otherwise it starts comment. Please also recheck other property files\n. > testDefault()\nI would make it more descriptive like testWithDefaultConfiguration\n. 1) I think usually we put space after //\n2) sequences -> sequence\n3) We have multiple same comments here... My proposition is to create two input files, but one with spaces only (lines 27-39) and second with others (40-94). If they have proper test names, comments will become redundant.\n. > {27, 28, 29, 38, 39, 40, 76, 77, 78, 79, 80, 81, 90, 91, 92, 93, 94}\nCan we do something about it? Looks like duplication - any change in input file would force us to update line numbers in two places.\n. What do you mean by {} here? It is neither empty string nor empty set.\n. Why do we have this test in MainTest? It should belong to TranslationCheckTest\n. You can use String.format here to not repeat File.separator so many times\n. Missin -> Missing\n. 1)\n\n// Does it shadow a field?\n\nIs this a comment to line final String name = firstChild.getText();?\n2) Maybe we can extend Javadoc instead of putting so long comments in method body?\n3) parces -> parses\n. lamda -> lambda\n. can we use here some simple words like variable, parameter, instead of cryptic lc1?\n. @ivanov-alex sorry, maybe I'm missing something, but why do we need non-existing import for that test? Can't we create file that uses only existing imports?\n. let's try, I don't mind even if method name will be 80 characters\n. Use entrySet instead keyset to iterate over map\n. Yes, I think it's good idea\n. very minor: missing dot at the end of sentence\n. minor: testTranslationFilesAreMissing\n. this test could include more complicated string set like ,ja,de,, ja, just to have full functionality coverage\n. looks like unnecessary changes in scope of this PR\n. isMissing is more common I think\n.  Issue found: The method getImportGroup() has an NPath complexity of 120\n.  Issue found: Use equals() to compare object references.\n. LITERAL_DO is here on 4th position, but in previous column it's on first. Shouldn't it be unified?\n. Can you correct this Javadoc? It doesn't contain 'key'.\n. Such assertion doesn't check the place where exception was thrown. We need to use try-catch here.\n. It's a bit confusing: getURI returning String used in testUrl test.\n. @ivanov-alex you can make assertion on ex.getCause()\n.  Issue found: The method defAndInitInDifferentLoop() has an NPath complexity of 48\n.  Issue found: Use equals() to compare object references.\n.  Issue found: Use equals() to compare object references.\n.  Issue found: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.\n.  Issue found: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.\n.  Issue found: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.\n.  Issue found: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.\n.  Issue found: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.\n.  Issue found: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.\n.  Issue found: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.\n.  Issue found: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.\n.  Issue found: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.\n.  Issue found: Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.\n.  Issue found: Avoid long parameter lists.\n. No need to catch checked exceptions here, RuntimeException is enough. \n. I would propose Exception was thrown while processing\n. I think we should be a bit more descriptive here - what does format mean in context of ReturnCountCheck?\n. @fabotronix \nCan you explain why we need to assign null here? Doesn't it work without this line?\n. What is the reason for this change?\n. Thanks for spotting, I will fix it.\n. @Bhavik3 I don't think we should have empty space here, as It should be as close to case as possible\n. @Bhavik3 typo: weather :)\n. @rnveach we shouldn't ignore any exceptions unless absolutely necessary. What are cases when absolute path works but canonical path fails?\n. @rnveach We need to explain default behaviour also in first sentences\n. @rnveach is it really null here?\n. @rnveach It could be named testDefaultConfigurationOnValidInput\n. @rnveach can you explain reason of that change?\n. @rnveach Instead of To configure the check to only allow java or xml files in your folders: let's use To configure the check to only allow Java or XML files in your folders use the below., because there's also note before the example.\n. @MEZk sentence needs rewording\n. @rnveach I think here we should have different name for parent and child to not confuse them\n. test\n. test2\n. ",
    "markuswustenberg": "Hmm. It might not be as straightforward as I initially thought. Perhaps I'll stick to my log pattern described in the original post.\nThanks for your comments!\n. ",
    "vmassol": "This is what I did and the exact reason you're seeing several references on this page... ;)  Did you check the PR (https://github.com/checkstyle/checkstyle/pull/34)?\n. Closing, will reopen, I made the mistake of creating the PR on master...\n. Please read the PR instead of just looking at the issue....\n. Please read the PRs and stop relying on the issues... I spent a lot of times doing this cleanly so at least do a little effort on your side and click on the PR to view them...\n. I created one issue per problem because that's how I ask all contributors on my projects to do. I sent 3 PRs because they concern different topics and you may not even agree to apply all of them. In that manner you can quickly review and apply them.\n. ",
    "krzyk": "According to checkstyle documentation (at http://checkstyle.sourceforge.net/config_coding.html#RequireThis) it should already handle both fields and methods, I assume that at some point it did but later it just broke.\nSo no need to create a seperate check, just a fix to the current one (or a fix to documentation to remove the checkMethods    whether we should check methods usage or not text)\n. The problem was actually in my configuration, please ignore and sorry for the confusion.\n. The second option is more appropriate.\n. ",
    "dmzimmerman": "Hmm. So there's no way to change the regexp so that it also matches comments after the Javadoc comment? That's unfortunate. \n. It seems that Javadoc comments are found by calling getJavadocBefore() in com.puppycrawl.tools.checkstyle.api.FileContents, and that in turn explicitly skips over single line comments but not multi-line comments. Making it skip over multi-line comments as well would probably not be too difficult (I could take a stab at it but I'm pretty unfamiliar with the codebase).\n. In fact, it seems that there is a map in FileContents from line numbers to C comments; finding all the the C comments that are not possible Javadoc comments and that occur above the line number of the top of the method would probably work, with the possible exception of the degenerate case where the code looks like this:\n/**\n * A Javadoc comment.\n */ /* A C comment\n     * \n     */\nI suspect such degenerate cases are exceptionally uncommon.\n. Yes, Checkstyle is modular... but this particular check is not, since it explicitly relies, as I said, on that FileContents class to properly find the Javadoc comment before a particular point and it's the finding of the Javadoc that's a problem. I'll take a look at the FileContents class and see if I can convince it to do something more intelligent.\n. I believe that this diff on com.puppycrawl.tools.checkstyle.api.FileContents should fix it: instead of checking only for a line being blank or a single-line comment before moving to the previous line, it checks that the line isn't blank, doesn't intersect any comment (using existing intersection check functionality), and isn't the end of a Javadoc comment before moving to the previous line.\n```\nindex 6014aac..77a3a74 100644\n--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/api/FileContents.java\n+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/api/FileContents.java\n@@ -213,8 +213,12 @@ public final class FileContents implements CommentListener\n         // Lines start at 1 to the callers perspective, so need to take off 2\n         int lineNo = aLineNo - 2;\n\n// skip blank lines\nwhile ((lineNo > 0) && (lineIsBlank(lineNo) || lineIsComment(lineNo))) {\n// skip blank lines and comments\n// we skip comments by checking to see if any part of the\n// current line intersects one.\nwhile ((lineNo > 0) && mJavadocComments.get(lineNo) == null && \n(lineIsBlank(lineNo) || \nhasIntersectionWithComment(lineNo, 0, lineNo, Integer.MAX_VALUE))) {\n             lineNo--;\n         }\n```\n. \"It is wrong usage of comments in Java and bad practice to my mind\" is an odd judgement call to make on your part, especially since Checkstyle currently explicitly supports the syntax you just wrote in your comment, while disallowing other forms of comments between Javadoc and a method declaration. Plus, there really is no such thing as \"wrong usage of comments in Java\"; comments are allowed anywhere and I'm not aware of any well-respected coding standards that say otherwise.\n\nThe placement of comments between Javadoc and a method declaration is understood perfectly by both the official Javadoc tool's standard doclet and by Eclipse's Javadoc parser. Whether non-Javadoc comments should be placed either above or below the Javadoc comments seems to me to be a personal preference issue, along the lines of whether braces should be placed at the ends of lines or on new lines, and as such - like the brace placement issue - is probably not a judgement that Checkstyle should be making for all its users. \nPut another way: it seems to me that either Checkstyle should allow no comments between a Javadoc comment and a method declaration, or it should allow any comments between a Javadoc comment and a method declaration; it should not do something in between solely because of lazy coding.\n. You say \"Please give me real use case of such style, out of JML\" as though JML is some fly-by-night project that I just made up rather than a decade-old de facto standard for formal specification of Java programs, used both by actual developers and in educational contexts, which is understood by many Java specification, testing and verification tools and has inspired multiple other formal specification languages (including the commercial Frama-C for C programs). \nStill, as an example of how the current implementation is broken, even outside the presence of JML, consider these two examples where a developer wants to explain why he used a particular Java annotation:\n/**\n * A Javadoc comment.\n */\n@SuppressWarnings(\"unchecked\")\n/* generic type warnings are suppressed for this method \n   because of reason xyz */\npublic void method() {}\n/**\n * A Javadoc comment.\n */\n/* generic type warnings are suppressed for this method \n   because of reason xyz */\n@SuppressWarnings(\"unchecked\")\npublic void method() {}\nYou'd expect those to have the same result in Checkstyle, right? But they don't. The first one, surprisingly enough, checks fine. The second one causes Checkstyle to complain about missing Javadoc. Of course if the comments were single-line comments, neither would cause Checkstyle to complain; but does it really make any sense at all to force developers to choose between single-line and multi-line comments based on how broken Checkstyle's Javadoc recognition is?\nPerhaps you would prefer for the comment to appear above the Javadoc, like this:\n/* generic type warnings are suppressed for this method \n   because of reason xyz */\n/**\n * A Javadoc comment.\n */\n@SuppressWarnings(\"unchecked\")\npublic void method() {}\nI think that looks ridiculous, and that it makes far more sense to place a comment about an annotation adjacent to that annotation - not inside the method, and not above the Javadoc; moreover, there's no legitimate reason for that comment to be restricted to be of the single-line variety.\nEssentially, what you have here is a situation where a method has legal Javadoc, the Javadoc tool says the method has legal Javadoc, every other current Javadoc parser says the method has legal Javadoc, and Checkstyle is the only tool that complains. Morever, when Checkstyle complains, it doesn't say \"the method has Javadoc in a location we don't like\", but rather, \"the method is missing Javadoc.\" Checkstyle is lying to me when it checks my code and says this. It shouldn't matter to Checkstyle whether I'm writing JML comments above my methods or whether I'm writing short stories above them; what should matter to Checkstyle is whether Javadoc for the method exists, since that is what it is claiming to check. To boil it down to its essence: this check as currently implemented is fundamentally broken because it disagrees with both the authoritative tools and the Javadoc specification about when a Javadoc comment for a method exists.\nAll that aside, though; I would be thrilled with the method Javadoc check having an option to allow or disallow comments in between, if it were possible, and I wouldn't even care if you chose the wrong default (hint: the correct default is the one that agrees with standard Javadoc parsers). I'd gladly implement it myself, and if you didn't want to include it in Checkstyle I'd distribute it both to my students and with the JML tools. However, the way Javadoc identification is currently implemented, it seems like it's not actually possible to do that simply by changing the check; the method Javadoc check relies on Checkstyle's FileContents API to tell it where Javadoc comments are, and the way Checkstyle searches for Javadoc comments above a particular line is undeniably broken. If that search were fixed (this is what the patch I wrote attempts to do), it would be relatively straightforward to also implement logic in the Javadoc check that says \"ok, now that you've found the Javadoc for this method, was there any other comment in between?\". \n. ",
    "SergeyMakarenko": "My checkstyle.xml contains the following settings:\n<module name=\"RegexpMultiline\">\n        <property name=\"format\" value=\"\\r\"/>\n        <property name=\"message\" value=\"No windows newlines\"/>\n    </module>\nThis problem happens in Eclipse only (I updated it so I have recent version of plugin(s)). And it looks like it happens for some non Java file (some html template file).\n. ",
    "bentatham": "+1.  Definitely an annoying issue (eg, java.util.Timer and com.codahale.metrics.Timer)\n. ",
    "the-lay": "Added pull request #122 to fix this. \nSorry for the mess above :)\n. Thanks, updated documentation in commit 76b1dcb.\n. ",
    "aunkrig": "Sorry folks, I didn't get around to provide a fix myself - however thank you very much for your invitation and your support!\nGreetings from beautiful Munich,\nArno\n. The reason being is sad, but true: Somewhere between versions 5.7 and 6.1, the constants declared in \"TokenTypes\" were shifted by one position. Hence, if you compile your CS extension against one version, and run it with the other, then your extension will almost certainly crash.\nIt is impossible to write a CS extension that is compatible with both CS 5.X and 6.X. (unless you use REFLECTION to obtain the constants from TokenTypes).\nI wonder if there's any documentation about this version incompatibility.\n. I created a new issue for the version compatibility problem:\nhttps://github.com/checkstyle/checkstyle/issues/505\n. 5.6:\n``` java\npackage com.puppycrawl.tools.checkstyle.grammars;\npublic abstract interface GeneratedJavaTokenTypes\n{\n  public static final int EOF = 1;\n  public static final int NULL_TREE_LOOKAHEAD = 3;\n  public static final int BLOCK = 4;\n  public static final int MODIFIERS = 5;\n  public static final int OBJBLOCK = 6;\n  public static final int SLIST = 7;\n  public static final int CTOR_DEF = 8;\n  public static final int METHOD_DEF = 9;\n  public static final int VARIABLE_DEF = 10;\n  public static final int INSTANCE_INIT = 11;\n  public static final int STATIC_INIT = 12;\n  public static final int TYPE = 13;\n  public static final int CLASS_DEF = 14;\n  public static final int INTERFACE_DEF = 15;\n  public static final int PACKAGE_DEF = 16;\n  public static final int ARRAY_DECLARATOR = 17;\n  public static final int EXTENDS_CLAUSE = 18;\n  public static final int IMPLEMENTS_CLAUSE = 19;\n  public static final int PARAMETERS = 20;\n  public static final int PARAMETER_DEF = 21;\n  public static final int LABELED_STAT = 22;\n  public static final int TYPECAST = 23;\n  public static final int INDEX_OP = 24;\n  public static final int POST_INC = 25;\n  public static final int POST_DEC = 26;\n  public static final int METHOD_CALL = 27;\n  public static final int EXPR = 28;\n  public static final int ARRAY_INIT = 29;\n  public static final int IMPORT = 30;\n  public static final int UNARY_MINUS = 31;\n  public static final int UNARY_PLUS = 32;\n  public static final int CASE_GROUP = 33;\n  public static final int ELIST = 34;\n  public static final int FOR_INIT = 35;\n  public static final int FOR_CONDITION = 36;\n  public static final int FOR_ITERATOR = 37;\n  public static final int EMPTY_STAT = 38;\n  public static final int FINAL = 39;\n  public static final int ABSTRACT = 40;\n  public static final int STRICTFP = 41;\n  public static final int SUPER_CTOR_CALL = 42;\n  public static final int CTOR_CALL = 43;\n  public static final int LITERAL_package = 44;\n  public static final int SEMI = 45;\n  public static final int LITERAL_import = 46;\n  public static final int LBRACK = 47;\n  public static final int RBRACK = 48;\n  public static final int LITERAL_void = 49;\n  public static final int LITERAL_boolean = 50;\n  public static final int LITERAL_byte = 51;\n  public static final int LITERAL_char = 52;\n  public static final int LITERAL_short = 53;\n  public static final int LITERAL_int = 54;\n  public static final int LITERAL_float = 55;\n  public static final int LITERAL_long = 56;\n  public static final int LITERAL_double = 57;\n  public static final int IDENT = 58;\n  public static final int DOT = 59;\n  public static final int STAR = 60;\n  public static final int LITERAL_private = 61;\n  public static final int LITERAL_public = 62;\n  public static final int LITERAL_protected = 63;\n  public static final int LITERAL_static = 64;\n  public static final int LITERAL_transient = 65;\n  public static final int LITERAL_native = 66;\n  public static final int LITERAL_synchronized = 67;\n  public static final int LITERAL_volatile = 68;\n  public static final int LITERAL_class = 69;\n  public static final int LITERAL_extends = 70;\n  public static final int LITERAL_interface = 71;\n  public static final int LCURLY = 72;\n  public static final int RCURLY = 73;\n  public static final int COMMA = 74;\n  public static final int LITERAL_implements = 75;\n  public static final int LPAREN = 76;\n  public static final int RPAREN = 77;\n  public static final int LITERAL_this = 78;\n  public static final int LITERAL_super = 79;\n  public static final int ASSIGN = 80;\n  public static final int LITERAL_throws = 81;\n  public static final int COLON = 82;\n  public static final int LITERAL_if = 83;\n  public static final int LITERAL_while = 84;\n  public static final int LITERAL_do = 85;\n  public static final int LITERAL_break = 86;\n  public static final int LITERAL_continue = 87;\n  public static final int LITERAL_return = 88;\n  public static final int LITERAL_switch = 89;\n  public static final int LITERAL_throw = 90;\n  public static final int LITERAL_for = 91;\n  public static final int LITERAL_else = 92;\n  public static final int LITERAL_case = 93;\n  public static final int LITERAL_default = 94;\n  public static final int LITERAL_try = 95;\n  public static final int LITERAL_catch = 96;\n  public static final int LITERAL_finally = 97;\n  public static final int PLUS_ASSIGN = 98;\n  public static final int MINUS_ASSIGN = 99;\n  public static final int STAR_ASSIGN = 100;\n  public static final int DIV_ASSIGN = 101;\n  public static final int MOD_ASSIGN = 102;\n  public static final int SR_ASSIGN = 103;\n  public static final int BSR_ASSIGN = 104;\n  public static final int SL_ASSIGN = 105;\n  public static final int BAND_ASSIGN = 106;\n  public static final int BXOR_ASSIGN = 107;\n  public static final int BOR_ASSIGN = 108;\n  public static final int QUESTION = 109;\n  public static final int LOR = 110;\n  public static final int LAND = 111;\n  public static final int BOR = 112;\n  public static final int BXOR = 113;\n  public static final int BAND = 114;\n  public static final int NOT_EQUAL = 115;\n  public static final int EQUAL = 116;\n  public static final int LT = 117;\n  public static final int GT = 118;\n  public static final int LE = 119;\n  public static final int GE = 120;\n  public static final int LITERAL_instanceof = 121;\n  public static final int SL = 122;\n  public static final int SR = 123;\n  public static final int BSR = 124;\n  public static final int PLUS = 125;\n  public static final int MINUS = 126;\n  public static final int DIV = 127;\n  public static final int MOD = 128;\n  public static final int INC = 129;\n  public static final int DEC = 130;\n  public static final int BNOT = 131;\n  public static final int LNOT = 132;\n  public static final int LITERAL_true = 133;\n  public static final int LITERAL_false = 134;\n  public static final int LITERAL_null = 135;\n  public static final int LITERAL_new = 136;\n  public static final int NUM_INT = 137;\n  public static final int CHAR_LITERAL = 138;\n  public static final int STRING_LITERAL = 139;\n  public static final int NUM_FLOAT = 140;\n  public static final int NUM_LONG = 141;\n  public static final int NUM_DOUBLE = 142;\n  public static final int WS = 143;\n  public static final int SL_COMMENT = 144;\n  public static final int ML_COMMENT = 145;\n  public static final int ESC = 146;\n  public static final int HEX_DIGIT = 147;\n  public static final int VOCAB = 148;\n  public static final int EXPONENT = 149;\n  public static final int FLOAT_SUFFIX = 150;\n  public static final int ASSERT = 151;\n  public static final int STATIC_IMPORT = 152;\n  public static final int ENUM = 153;\n  public static final int ENUM_DEF = 154;\n  public static final int ENUM_CONSTANT_DEF = 155;\n  public static final int FOR_EACH_CLAUSE = 156;\n  public static final int ANNOTATION_DEF = 157;\n  public static final int ANNOTATIONS = 158;\n  public static final int ANNOTATION = 159;\n  public static final int ANNOTATION_MEMBER_VALUE_PAIR = 160;\n  public static final int ANNOTATION_FIELD_DEF = 161;\n  public static final int ANNOTATION_ARRAY_INIT = 162;\n  public static final int TYPE_ARGUMENTS = 163;\n  public static final int TYPE_ARGUMENT = 164;\n  public static final int TYPE_PARAMETERS = 165;\n  public static final int TYPE_PARAMETER = 166;\n  public static final int WILDCARD_TYPE = 167;\n  public static final int TYPE_UPPER_BOUNDS = 168;\n  public static final int TYPE_LOWER_BOUNDS = 169;\n  public static final int AT = 170;\n  public static final int ELLIPSIS = 171;\n  public static final int GENERIC_START = 172;\n  public static final int GENERIC_END = 173;\n  public static final int TYPE_EXTENSION_AND = 174;\n  public static final int DO_WHILE = 175;\n  public static final int RESOURCE_SPECIFICATION = 176;\n  public static final int RESOURCES = 177;\n  public static final int RESOURCE = 178;\n  public static final int STD_ESC = 179;\n  public static final int BINARY_DIGIT = 180;\n  public static final int ID_START = 181;\n  public static final int ID_PART = 182;\n  public static final int INT_LITERAL = 183;\n  public static final int LONG_LITERAL = 184;\n  public static final int FLOAT_LITERAL = 185;\n  public static final int DOUBLE_LITERAL = 186;\n  public static final int HEX_FLOAT_LITERAL = 187;\n  public static final int HEX_DOUBLE_LITERAL = 188;\n  public static final int SIGNED_INTEGER = 189;\n  public static final int BINARY_EXPONENT = 190;\n}\n```\n. 5.7:\n``` java\npackage com.puppycrawl.tools.checkstyle.grammars;\npublic abstract interface GeneratedJavaTokenTypes\n{\n  public static final int EOF = 1;\n  public static final int NULL_TREE_LOOKAHEAD = 3;\n  public static final int BLOCK = 4;\n  public static final int MODIFIERS = 5;\n  public static final int OBJBLOCK = 6;\n  public static final int SLIST = 7;\n  public static final int CTOR_DEF = 8;\n  public static final int METHOD_DEF = 9;\n  public static final int VARIABLE_DEF = 10;\n  public static final int INSTANCE_INIT = 11;\n  public static final int STATIC_INIT = 12;\n  public static final int TYPE = 13;\n  public static final int CLASS_DEF = 14;\n  public static final int INTERFACE_DEF = 15;\n  public static final int PACKAGE_DEF = 16;\n  public static final int ARRAY_DECLARATOR = 17;\n  public static final int EXTENDS_CLAUSE = 18;\n  public static final int IMPLEMENTS_CLAUSE = 19;\n  public static final int PARAMETERS = 20;\n  public static final int PARAMETER_DEF = 21;\n  public static final int LABELED_STAT = 22;\n  public static final int TYPECAST = 23;\n  public static final int INDEX_OP = 24;\n  public static final int POST_INC = 25;\n  public static final int POST_DEC = 26;\n  public static final int METHOD_CALL = 27;\n  public static final int EXPR = 28;\n  public static final int ARRAY_INIT = 29;\n  public static final int IMPORT = 30;\n  public static final int UNARY_MINUS = 31;\n  public static final int UNARY_PLUS = 32;\n  public static final int CASE_GROUP = 33;\n  public static final int ELIST = 34;\n  public static final int FOR_INIT = 35;\n  public static final int FOR_CONDITION = 36;\n  public static final int FOR_ITERATOR = 37;\n  public static final int EMPTY_STAT = 38;\n  public static final int FINAL = 39;\n  public static final int ABSTRACT = 40;\n  public static final int STRICTFP = 41;\n  public static final int SUPER_CTOR_CALL = 42;\n  public static final int CTOR_CALL = 43;\n  public static final int LITERAL_package = 44;\n  public static final int SEMI = 45;\n  public static final int LITERAL_import = 46;\n  public static final int LBRACK = 47;\n  public static final int RBRACK = 48;\n  public static final int LITERAL_void = 49;\n  public static final int LITERAL_boolean = 50;\n  public static final int LITERAL_byte = 51;\n  public static final int LITERAL_char = 52;\n  public static final int LITERAL_short = 53;\n  public static final int LITERAL_int = 54;\n  public static final int LITERAL_float = 55;\n  public static final int LITERAL_long = 56;\n  public static final int LITERAL_double = 57;\n  public static final int IDENT = 58;\n  public static final int DOT = 59;\n  public static final int STAR = 60;\n  public static final int LITERAL_private = 61;\n  public static final int LITERAL_public = 62;\n  public static final int LITERAL_protected = 63;\n  public static final int LITERAL_static = 64;\n  public static final int LITERAL_transient = 65;\n  public static final int LITERAL_native = 66;\n  public static final int LITERAL_synchronized = 67;\n  public static final int LITERAL_volatile = 68;\n  public static final int LITERAL_class = 69;\n  public static final int LITERAL_extends = 70;\n  public static final int LITERAL_interface = 71;\n  public static final int LCURLY = 72;\n  public static final int RCURLY = 73;\n  public static final int COMMA = 74;\n  public static final int LITERAL_implements = 75;\n  public static final int LPAREN = 76;\n  public static final int RPAREN = 77;\n  public static final int LITERAL_this = 78;\n  public static final int LITERAL_super = 79;\n  public static final int ASSIGN = 80;\n  public static final int LITERAL_throws = 81;\n  public static final int COLON = 82;\n  public static final int LITERAL_if = 83;\n  public static final int LITERAL_while = 84;\n  public static final int LITERAL_do = 85;\n  public static final int LITERAL_break = 86;\n  public static final int LITERAL_continue = 87;\n  public static final int LITERAL_return = 88;\n  public static final int LITERAL_switch = 89;\n  public static final int LITERAL_throw = 90;\n  public static final int LITERAL_for = 91;\n  public static final int LITERAL_else = 92;\n  public static final int LITERAL_case = 93;\n  public static final int LITERAL_default = 94;\n  public static final int LITERAL_try = 95;\n  public static final int LITERAL_catch = 96;\n  public static final int LITERAL_finally = 97;\n  public static final int PLUS_ASSIGN = 98;\n  public static final int MINUS_ASSIGN = 99;\n  public static final int STAR_ASSIGN = 100;\n  public static final int DIV_ASSIGN = 101;\n  public static final int MOD_ASSIGN = 102;\n  public static final int SR_ASSIGN = 103;\n  public static final int BSR_ASSIGN = 104;\n  public static final int SL_ASSIGN = 105;\n  public static final int BAND_ASSIGN = 106;\n  public static final int BXOR_ASSIGN = 107;\n  public static final int BOR_ASSIGN = 108;\n  public static final int QUESTION = 109;\n  public static final int LOR = 110;\n  public static final int LAND = 111;\n  public static final int BOR = 112;\n  public static final int BXOR = 113;\n  public static final int BAND = 114;\n  public static final int NOT_EQUAL = 115;\n  public static final int EQUAL = 116;\n  public static final int LT = 117;\n  public static final int GT = 118;\n  public static final int LE = 119;\n  public static final int GE = 120;\n  public static final int LITERAL_instanceof = 121;\n  public static final int SL = 122;\n  public static final int SR = 123;\n  public static final int BSR = 124;\n  public static final int PLUS = 125;\n  public static final int MINUS = 126;\n  public static final int DIV = 127;\n  public static final int MOD = 128;\n  public static final int INC = 129;\n  public static final int DEC = 130;\n  public static final int BNOT = 131;\n  public static final int LNOT = 132;\n  public static final int LITERAL_true = 133;\n  public static final int LITERAL_false = 134;\n  public static final int LITERAL_null = 135;\n  public static final int LITERAL_new = 136;\n  public static final int NUM_INT = 137;\n  public static final int CHAR_LITERAL = 138;\n  public static final int STRING_LITERAL = 139;\n  public static final int NUM_FLOAT = 140;\n  public static final int NUM_LONG = 141;\n  public static final int NUM_DOUBLE = 142;\n  public static final int WS = 143;\n  public static final int SL_COMMENT = 144;\n  public static final int ML_COMMENT = 145;\n  public static final int ESC = 146;\n  public static final int HEX_DIGIT = 147;\n  public static final int VOCAB = 148;\n  public static final int EXPONENT = 149;\n  public static final int FLOAT_SUFFIX = 150;\n  public static final int ASSERT = 151;\n  public static final int STATIC_IMPORT = 152;\n  public static final int ENUM = 153;\n  public static final int ENUM_DEF = 154;\n  public static final int ENUM_CONSTANT_DEF = 155;\n  public static final int FOR_EACH_CLAUSE = 156;\n  public static final int ANNOTATION_DEF = 157;\n  public static final int ANNOTATIONS = 158;\n  public static final int ANNOTATION = 159;\n  public static final int ANNOTATION_MEMBER_VALUE_PAIR = 160;\n  public static final int ANNOTATION_FIELD_DEF = 161;\n  public static final int ANNOTATION_ARRAY_INIT = 162;\n  public static final int TYPE_ARGUMENTS = 163;\n  public static final int TYPE_ARGUMENT = 164;\n  public static final int TYPE_PARAMETERS = 165;\n  public static final int TYPE_PARAMETER = 166;\n  public static final int WILDCARD_TYPE = 167;\n  public static final int TYPE_UPPER_BOUNDS = 168;\n  public static final int TYPE_LOWER_BOUNDS = 169;\n  public static final int AT = 170;\n  public static final int ELLIPSIS = 171;\n  public static final int GENERIC_START = 172;\n  public static final int GENERIC_END = 173;\n  public static final int TYPE_EXTENSION_AND = 174;\n  public static final int DO_WHILE = 175;\n  public static final int RESOURCE_SPECIFICATION = 176;\n  public static final int RESOURCES = 177;\n  public static final int RESOURCE = 178;\n  public static final int STD_ESC = 179;\n  public static final int BINARY_DIGIT = 180;\n  public static final int ID_START = 181;\n  public static final int ID_PART = 182;\n  public static final int INT_LITERAL = 183;\n  public static final int LONG_LITERAL = 184;\n  public static final int FLOAT_LITERAL = 185;\n  public static final int DOUBLE_LITERAL = 186;\n  public static final int HEX_FLOAT_LITERAL = 187;\n  public static final int HEX_DOUBLE_LITERAL = 188;\n  public static final int SIGNED_INTEGER = 189;\n  public static final int BINARY_EXPONENT = 190;\n}\n```\n. 5.8:\n``` java\npackage com.puppycrawl.tools.checkstyle.grammars;\npublic abstract interface GeneratedJavaTokenTypes\n{\n  public static final int EOF = 1;\n  public static final int NULL_TREE_LOOKAHEAD = 3;\n  public static final int BLOCK = 4;\n  public static final int MODIFIERS = 5;\n  public static final int OBJBLOCK = 6;\n  public static final int SLIST = 7;\n  public static final int CTOR_DEF = 8;\n  public static final int METHOD_DEF = 9;\n  public static final int VARIABLE_DEF = 10;\n  public static final int INSTANCE_INIT = 11;\n  public static final int STATIC_INIT = 12;\n  public static final int TYPE = 13;\n  public static final int CLASS_DEF = 14;\n  public static final int INTERFACE_DEF = 15;\n  public static final int PACKAGE_DEF = 16;\n  public static final int ARRAY_DECLARATOR = 17;\n  public static final int EXTENDS_CLAUSE = 18;\n  public static final int IMPLEMENTS_CLAUSE = 19;\n  public static final int PARAMETERS = 20;\n  public static final int PARAMETER_DEF = 21;\n  public static final int LABELED_STAT = 22;\n  public static final int TYPECAST = 23;\n  public static final int INDEX_OP = 24;\n  public static final int POST_INC = 25;\n  public static final int POST_DEC = 26;\n  public static final int METHOD_CALL = 27;\n  public static final int EXPR = 28;\n  public static final int ARRAY_INIT = 29;\n  public static final int IMPORT = 30;\n  public static final int UNARY_MINUS = 31;\n  public static final int UNARY_PLUS = 32;\n  public static final int CASE_GROUP = 33;\n  public static final int ELIST = 34;\n  public static final int FOR_INIT = 35;\n  public static final int FOR_CONDITION = 36;\n  public static final int FOR_ITERATOR = 37;\n  public static final int EMPTY_STAT = 38;\n  public static final int FINAL = 39;\n  public static final int ABSTRACT = 40;\n  public static final int STRICTFP = 41;\n  public static final int SUPER_CTOR_CALL = 42;\n  public static final int CTOR_CALL = 43;\n  public static final int LITERAL_package = 44;\n  public static final int SEMI = 45;\n  public static final int LITERAL_import = 46;\n  public static final int LBRACK = 47;\n  public static final int RBRACK = 48;\n  public static final int LITERAL_void = 49;\n  public static final int LITERAL_boolean = 50;\n  public static final int LITERAL_byte = 51;\n  public static final int LITERAL_char = 52;\n  public static final int LITERAL_short = 53;\n  public static final int LITERAL_int = 54;\n  public static final int LITERAL_float = 55;\n  public static final int LITERAL_long = 56;\n  public static final int LITERAL_double = 57;\n  public static final int IDENT = 58;\n  public static final int DOT = 59;\n  public static final int STAR = 60;\n  public static final int LITERAL_private = 61;\n  public static final int LITERAL_public = 62;\n  public static final int LITERAL_protected = 63;\n  public static final int LITERAL_static = 64;\n  public static final int LITERAL_transient = 65;\n  public static final int LITERAL_native = 66;\n  public static final int LITERAL_synchronized = 67;\n  public static final int LITERAL_volatile = 68;\n  public static final int LITERAL_class = 69;\n  public static final int LITERAL_extends = 70;\n  public static final int LITERAL_interface = 71;\n  public static final int LCURLY = 72;\n  public static final int RCURLY = 73;\n  public static final int COMMA = 74;\n  public static final int LITERAL_implements = 75;\n  public static final int LPAREN = 76;\n  public static final int RPAREN = 77;\n  public static final int LITERAL_this = 78;\n  public static final int LITERAL_super = 79;\n  public static final int ASSIGN = 80;\n  public static final int LITERAL_throws = 81;\n  public static final int COLON = 82;\n  public static final int LITERAL_if = 83;\n  public static final int LITERAL_while = 84;\n  public static final int LITERAL_do = 85;\n  public static final int LITERAL_break = 86;\n  public static final int LITERAL_continue = 87;\n  public static final int LITERAL_return = 88;\n  public static final int LITERAL_switch = 89;\n  public static final int LITERAL_throw = 90;\n  public static final int LITERAL_for = 91;\n  public static final int LITERAL_else = 92;\n  public static final int LITERAL_case = 93;\n  public static final int LITERAL_default = 94;\n  public static final int LITERAL_try = 95;\n  public static final int LITERAL_catch = 96;\n  public static final int LITERAL_finally = 97;\n  public static final int PLUS_ASSIGN = 98;\n  public static final int MINUS_ASSIGN = 99;\n  public static final int STAR_ASSIGN = 100;\n  public static final int DIV_ASSIGN = 101;\n  public static final int MOD_ASSIGN = 102;\n  public static final int SR_ASSIGN = 103;\n  public static final int BSR_ASSIGN = 104;\n  public static final int SL_ASSIGN = 105;\n  public static final int BAND_ASSIGN = 106;\n  public static final int BXOR_ASSIGN = 107;\n  public static final int BOR_ASSIGN = 108;\n  public static final int QUESTION = 109;\n  public static final int LOR = 110;\n  public static final int LAND = 111;\n  public static final int BOR = 112;\n  public static final int BXOR = 113;\n  public static final int BAND = 114;\n  public static final int NOT_EQUAL = 115;\n  public static final int EQUAL = 116;\n  public static final int LT = 117;\n  public static final int GT = 118;\n  public static final int LE = 119;\n  public static final int GE = 120;\n  public static final int LITERAL_instanceof = 121;\n  public static final int SL = 122;\n  public static final int SR = 123;\n  public static final int BSR = 124;\n  public static final int PLUS = 125;\n  public static final int MINUS = 126;\n  public static final int DIV = 127;\n  public static final int MOD = 128;\n  public static final int INC = 129;\n  public static final int DEC = 130;\n  public static final int BNOT = 131;\n  public static final int LNOT = 132;\n  public static final int LITERAL_true = 133;\n  public static final int LITERAL_false = 134;\n  public static final int LITERAL_null = 135;\n  public static final int LITERAL_new = 136;\n  public static final int NUM_INT = 137;\n  public static final int CHAR_LITERAL = 138;\n  public static final int STRING_LITERAL = 139;\n  public static final int NUM_FLOAT = 140;\n  public static final int NUM_LONG = 141;\n  public static final int NUM_DOUBLE = 142;\n  public static final int WS = 143;\n  public static final int SL_COMMENT = 144;\n  public static final int ML_COMMENT = 145;\n  public static final int ESC = 146;\n  public static final int HEX_DIGIT = 147;\n  public static final int VOCAB = 148;\n  public static final int EXPONENT = 149;\n  public static final int FLOAT_SUFFIX = 150;\n  public static final int ASSERT = 151;\n  public static final int STATIC_IMPORT = 152;\n  public static final int ENUM = 153;\n  public static final int ENUM_DEF = 154;\n  public static final int ENUM_CONSTANT_DEF = 155;\n  public static final int FOR_EACH_CLAUSE = 156;\n  public static final int ANNOTATION_DEF = 157;\n  public static final int ANNOTATIONS = 158;\n  public static final int ANNOTATION = 159;\n  public static final int ANNOTATION_MEMBER_VALUE_PAIR = 160;\n  public static final int ANNOTATION_FIELD_DEF = 161;\n  public static final int ANNOTATION_ARRAY_INIT = 162;\n  public static final int TYPE_ARGUMENTS = 163;\n  public static final int TYPE_ARGUMENT = 164;\n  public static final int TYPE_PARAMETERS = 165;\n  public static final int TYPE_PARAMETER = 166;\n  public static final int WILDCARD_TYPE = 167;\n  public static final int TYPE_UPPER_BOUNDS = 168;\n  public static final int TYPE_LOWER_BOUNDS = 169;\n  public static final int AT = 170;\n  public static final int ELLIPSIS = 171;\n  public static final int GENERIC_START = 172;\n  public static final int GENERIC_END = 173;\n  public static final int TYPE_EXTENSION_AND = 174;\n  public static final int DO_WHILE = 175;\n  public static final int RESOURCE_SPECIFICATION = 176;\n  public static final int RESOURCES = 177;\n  public static final int RESOURCE = 178;\n  public static final int STD_ESC = 179;\n  public static final int BINARY_DIGIT = 180;\n  public static final int ID_START = 181;\n  public static final int ID_PART = 182;\n  public static final int INT_LITERAL = 183;\n  public static final int LONG_LITERAL = 184;\n  public static final int FLOAT_LITERAL = 185;\n  public static final int DOUBLE_LITERAL = 186;\n  public static final int HEX_FLOAT_LITERAL = 187;\n  public static final int HEX_DOUBLE_LITERAL = 188;\n  public static final int SIGNED_INTEGER = 189;\n  public static final int BINARY_EXPONENT = 190;\n}\n```\n. 5.9:\n``` java\npackage com.puppycrawl.tools.checkstyle.grammars;\npublic abstract interface GeneratedJavaTokenTypes\n{\n  public static final int EOF = 1;\n  public static final int NULL_TREE_LOOKAHEAD = 3;\n  public static final int BLOCK = 4;\n  public static final int MODIFIERS = 5;\n  public static final int OBJBLOCK = 6;\n  public static final int SLIST = 7;\n  public static final int CTOR_DEF = 8;\n  public static final int METHOD_DEF = 9;\n  public static final int VARIABLE_DEF = 10;\n  public static final int INSTANCE_INIT = 11;\n  public static final int STATIC_INIT = 12;\n  public static final int TYPE = 13;\n  public static final int CLASS_DEF = 14;\n  public static final int INTERFACE_DEF = 15;\n  public static final int PACKAGE_DEF = 16;\n  public static final int ARRAY_DECLARATOR = 17;\n  public static final int EXTENDS_CLAUSE = 18;\n  public static final int IMPLEMENTS_CLAUSE = 19;\n  public static final int PARAMETERS = 20;\n  public static final int PARAMETER_DEF = 21;\n  public static final int LABELED_STAT = 22;\n  public static final int TYPECAST = 23;\n  public static final int INDEX_OP = 24;\n  public static final int POST_INC = 25;\n  public static final int POST_DEC = 26;\n  public static final int METHOD_CALL = 27;\n  public static final int METHOD_REF = 28;\n  public static final int EXPR = 29;\n  public static final int ARRAY_INIT = 30;\n  public static final int IMPORT = 31;\n  public static final int UNARY_MINUS = 32;\n  public static final int UNARY_PLUS = 33;\n  public static final int CASE_GROUP = 34;\n  public static final int ELIST = 35;\n  public static final int FOR_INIT = 36;\n  public static final int FOR_CONDITION = 37;\n  public static final int FOR_ITERATOR = 38;\n  public static final int EMPTY_STAT = 39;\n  public static final int FINAL = 40;\n  public static final int ABSTRACT = 41;\n  public static final int STRICTFP = 42;\n  public static final int SUPER_CTOR_CALL = 43;\n  public static final int CTOR_CALL = 44;\n  public static final int LITERAL_package = 45;\n  public static final int SEMI = 46;\n  public static final int LITERAL_import = 47;\n  public static final int LBRACK = 48;\n  public static final int RBRACK = 49;\n  public static final int LITERAL_void = 50;\n  public static final int LITERAL_boolean = 51;\n  public static final int LITERAL_byte = 52;\n  public static final int LITERAL_char = 53;\n  public static final int LITERAL_short = 54;\n  public static final int LITERAL_int = 55;\n  public static final int LITERAL_float = 56;\n  public static final int LITERAL_long = 57;\n  public static final int LITERAL_double = 58;\n  public static final int IDENT = 59;\n  public static final int DOT = 60;\n  public static final int STAR = 61;\n  public static final int LITERAL_private = 62;\n  public static final int LITERAL_public = 63;\n  public static final int LITERAL_protected = 64;\n  public static final int LITERAL_static = 65;\n  public static final int LITERAL_transient = 66;\n  public static final int LITERAL_native = 67;\n  public static final int LITERAL_synchronized = 68;\n  public static final int LITERAL_volatile = 69;\n  public static final int LITERAL_class = 70;\n  public static final int LITERAL_extends = 71;\n  public static final int LITERAL_interface = 72;\n  public static final int LCURLY = 73;\n  public static final int RCURLY = 74;\n  public static final int COMMA = 75;\n  public static final int LITERAL_implements = 76;\n  public static final int LPAREN = 77;\n  public static final int RPAREN = 78;\n  public static final int LITERAL_this = 79;\n  public static final int LITERAL_super = 80;\n  public static final int ASSIGN = 81;\n  public static final int LITERAL_throws = 82;\n  public static final int COLON = 83;\n  public static final int DOUBLE_COLON = 84;\n  public static final int LITERAL_if = 85;\n  public static final int LITERAL_while = 86;\n  public static final int LITERAL_do = 87;\n  public static final int LITERAL_break = 88;\n  public static final int LITERAL_continue = 89;\n  public static final int LITERAL_return = 90;\n  public static final int LITERAL_switch = 91;\n  public static final int LITERAL_throw = 92;\n  public static final int LITERAL_for = 93;\n  public static final int LITERAL_else = 94;\n  public static final int LITERAL_case = 95;\n  public static final int LITERAL_default = 96;\n  public static final int LITERAL_try = 97;\n  public static final int LITERAL_catch = 98;\n  public static final int LITERAL_finally = 99;\n  public static final int PLUS_ASSIGN = 100;\n  public static final int MINUS_ASSIGN = 101;\n  public static final int STAR_ASSIGN = 102;\n  public static final int DIV_ASSIGN = 103;\n  public static final int MOD_ASSIGN = 104;\n  public static final int SR_ASSIGN = 105;\n  public static final int BSR_ASSIGN = 106;\n  public static final int SL_ASSIGN = 107;\n  public static final int BAND_ASSIGN = 108;\n  public static final int BXOR_ASSIGN = 109;\n  public static final int BOR_ASSIGN = 110;\n  public static final int QUESTION = 111;\n  public static final int LOR = 112;\n  public static final int LAND = 113;\n  public static final int BOR = 114;\n  public static final int BXOR = 115;\n  public static final int BAND = 116;\n  public static final int NOT_EQUAL = 117;\n  public static final int EQUAL = 118;\n  public static final int LT = 119;\n  public static final int GT = 120;\n  public static final int LE = 121;\n  public static final int GE = 122;\n  public static final int LITERAL_instanceof = 123;\n  public static final int SL = 124;\n  public static final int SR = 125;\n  public static final int BSR = 126;\n  public static final int PLUS = 127;\n  public static final int MINUS = 128;\n  public static final int DIV = 129;\n  public static final int MOD = 130;\n  public static final int INC = 131;\n  public static final int DEC = 132;\n  public static final int BNOT = 133;\n  public static final int LNOT = 134;\n  public static final int LITERAL_true = 135;\n  public static final int LITERAL_false = 136;\n  public static final int LITERAL_null = 137;\n  public static final int LITERAL_new = 138;\n  public static final int NUM_INT = 139;\n  public static final int CHAR_LITERAL = 140;\n  public static final int STRING_LITERAL = 141;\n  public static final int NUM_FLOAT = 142;\n  public static final int NUM_LONG = 143;\n  public static final int NUM_DOUBLE = 144;\n  public static final int WS = 145;\n  public static final int SL_COMMENT = 146;\n  public static final int ML_COMMENT = 147;\n  public static final int ESC = 148;\n  public static final int HEX_DIGIT = 149;\n  public static final int VOCAB = 150;\n  public static final int EXPONENT = 151;\n  public static final int FLOAT_SUFFIX = 152;\n  public static final int ASSERT = 153;\n  public static final int STATIC_IMPORT = 154;\n  public static final int ENUM = 155;\n  public static final int ENUM_DEF = 156;\n  public static final int ENUM_CONSTANT_DEF = 157;\n  public static final int FOR_EACH_CLAUSE = 158;\n  public static final int ANNOTATION_DEF = 159;\n  public static final int ANNOTATIONS = 160;\n  public static final int ANNOTATION = 161;\n  public static final int ANNOTATION_MEMBER_VALUE_PAIR = 162;\n  public static final int ANNOTATION_FIELD_DEF = 163;\n  public static final int ANNOTATION_ARRAY_INIT = 164;\n  public static final int TYPE_ARGUMENTS = 165;\n  public static final int TYPE_ARGUMENT = 166;\n  public static final int TYPE_PARAMETERS = 167;\n  public static final int TYPE_PARAMETER = 168;\n  public static final int WILDCARD_TYPE = 169;\n  public static final int TYPE_UPPER_BOUNDS = 170;\n  public static final int TYPE_LOWER_BOUNDS = 171;\n  public static final int AT = 172;\n  public static final int ELLIPSIS = 173;\n  public static final int GENERIC_START = 174;\n  public static final int GENERIC_END = 175;\n  public static final int TYPE_EXTENSION_AND = 176;\n  public static final int DO_WHILE = 177;\n  public static final int RESOURCE_SPECIFICATION = 178;\n  public static final int RESOURCES = 179;\n  public static final int RESOURCE = 180;\n  public static final int LAMBDA = 181;\n  public static final int STD_ESC = 182;\n  public static final int BINARY_DIGIT = 183;\n  public static final int ID_START = 184;\n  public static final int ID_PART = 185;\n  public static final int INT_LITERAL = 186;\n  public static final int LONG_LITERAL = 187;\n  public static final int FLOAT_LITERAL = 188;\n  public static final int DOUBLE_LITERAL = 189;\n  public static final int HEX_FLOAT_LITERAL = 190;\n  public static final int HEX_DOUBLE_LITERAL = 191;\n  public static final int SIGNED_INTEGER = 192;\n  public static final int BINARY_EXPONENT = 193;\n}\n```\n. 6.0:\n``` java\npackage com.puppycrawl.tools.checkstyle.grammars;\npublic abstract interface GeneratedJavaTokenTypes\n{\n  public static final int EOF = 1;\n  public static final int NULL_TREE_LOOKAHEAD = 3;\n  public static final int BLOCK = 4;\n  public static final int MODIFIERS = 5;\n  public static final int OBJBLOCK = 6;\n  public static final int SLIST = 7;\n  public static final int CTOR_DEF = 8;\n  public static final int METHOD_DEF = 9;\n  public static final int VARIABLE_DEF = 10;\n  public static final int INSTANCE_INIT = 11;\n  public static final int STATIC_INIT = 12;\n  public static final int TYPE = 13;\n  public static final int CLASS_DEF = 14;\n  public static final int INTERFACE_DEF = 15;\n  public static final int PACKAGE_DEF = 16;\n  public static final int ARRAY_DECLARATOR = 17;\n  public static final int EXTENDS_CLAUSE = 18;\n  public static final int IMPLEMENTS_CLAUSE = 19;\n  public static final int PARAMETERS = 20;\n  public static final int PARAMETER_DEF = 21;\n  public static final int LABELED_STAT = 22;\n  public static final int TYPECAST = 23;\n  public static final int INDEX_OP = 24;\n  public static final int POST_INC = 25;\n  public static final int POST_DEC = 26;\n  public static final int METHOD_CALL = 27;\n  public static final int METHOD_REF = 28;\n  public static final int EXPR = 29;\n  public static final int ARRAY_INIT = 30;\n  public static final int IMPORT = 31;\n  public static final int UNARY_MINUS = 32;\n  public static final int UNARY_PLUS = 33;\n  public static final int CASE_GROUP = 34;\n  public static final int ELIST = 35;\n  public static final int FOR_INIT = 36;\n  public static final int FOR_CONDITION = 37;\n  public static final int FOR_ITERATOR = 38;\n  public static final int EMPTY_STAT = 39;\n  public static final int FINAL = 40;\n  public static final int ABSTRACT = 41;\n  public static final int STRICTFP = 42;\n  public static final int SUPER_CTOR_CALL = 43;\n  public static final int CTOR_CALL = 44;\n  public static final int LITERAL_package = 45;\n  public static final int SEMI = 46;\n  public static final int LITERAL_import = 47;\n  public static final int LBRACK = 48;\n  public static final int RBRACK = 49;\n  public static final int LITERAL_void = 50;\n  public static final int LITERAL_boolean = 51;\n  public static final int LITERAL_byte = 52;\n  public static final int LITERAL_char = 53;\n  public static final int LITERAL_short = 54;\n  public static final int LITERAL_int = 55;\n  public static final int LITERAL_float = 56;\n  public static final int LITERAL_long = 57;\n  public static final int LITERAL_double = 58;\n  public static final int IDENT = 59;\n  public static final int DOT = 60;\n  public static final int STAR = 61;\n  public static final int LITERAL_private = 62;\n  public static final int LITERAL_public = 63;\n  public static final int LITERAL_protected = 64;\n  public static final int LITERAL_static = 65;\n  public static final int LITERAL_transient = 66;\n  public static final int LITERAL_native = 67;\n  public static final int LITERAL_synchronized = 68;\n  public static final int LITERAL_volatile = 69;\n  public static final int LITERAL_class = 70;\n  public static final int LITERAL_extends = 71;\n  public static final int LITERAL_interface = 72;\n  public static final int LCURLY = 73;\n  public static final int RCURLY = 74;\n  public static final int COMMA = 75;\n  public static final int LITERAL_implements = 76;\n  public static final int LPAREN = 77;\n  public static final int RPAREN = 78;\n  public static final int LITERAL_this = 79;\n  public static final int LITERAL_super = 80;\n  public static final int ASSIGN = 81;\n  public static final int LITERAL_throws = 82;\n  public static final int COLON = 83;\n  public static final int DOUBLE_COLON = 84;\n  public static final int LITERAL_if = 85;\n  public static final int LITERAL_while = 86;\n  public static final int LITERAL_do = 87;\n  public static final int LITERAL_break = 88;\n  public static final int LITERAL_continue = 89;\n  public static final int LITERAL_return = 90;\n  public static final int LITERAL_switch = 91;\n  public static final int LITERAL_throw = 92;\n  public static final int LITERAL_for = 93;\n  public static final int LITERAL_else = 94;\n  public static final int LITERAL_case = 95;\n  public static final int LITERAL_default = 96;\n  public static final int LITERAL_try = 97;\n  public static final int LITERAL_catch = 98;\n  public static final int LITERAL_finally = 99;\n  public static final int PLUS_ASSIGN = 100;\n  public static final int MINUS_ASSIGN = 101;\n  public static final int STAR_ASSIGN = 102;\n  public static final int DIV_ASSIGN = 103;\n  public static final int MOD_ASSIGN = 104;\n  public static final int SR_ASSIGN = 105;\n  public static final int BSR_ASSIGN = 106;\n  public static final int SL_ASSIGN = 107;\n  public static final int BAND_ASSIGN = 108;\n  public static final int BXOR_ASSIGN = 109;\n  public static final int BOR_ASSIGN = 110;\n  public static final int QUESTION = 111;\n  public static final int LOR = 112;\n  public static final int LAND = 113;\n  public static final int BOR = 114;\n  public static final int BXOR = 115;\n  public static final int BAND = 116;\n  public static final int NOT_EQUAL = 117;\n  public static final int EQUAL = 118;\n  public static final int LT = 119;\n  public static final int GT = 120;\n  public static final int LE = 121;\n  public static final int GE = 122;\n  public static final int LITERAL_instanceof = 123;\n  public static final int SL = 124;\n  public static final int SR = 125;\n  public static final int BSR = 126;\n  public static final int PLUS = 127;\n  public static final int MINUS = 128;\n  public static final int DIV = 129;\n  public static final int MOD = 130;\n  public static final int INC = 131;\n  public static final int DEC = 132;\n  public static final int BNOT = 133;\n  public static final int LNOT = 134;\n  public static final int LITERAL_true = 135;\n  public static final int LITERAL_false = 136;\n  public static final int LITERAL_null = 137;\n  public static final int LITERAL_new = 138;\n  public static final int NUM_INT = 139;\n  public static final int CHAR_LITERAL = 140;\n  public static final int STRING_LITERAL = 141;\n  public static final int NUM_FLOAT = 142;\n  public static final int NUM_LONG = 143;\n  public static final int NUM_DOUBLE = 144;\n  public static final int WS = 145;\n  public static final int ESC = 146;\n  public static final int HEX_DIGIT = 147;\n  public static final int VOCAB = 148;\n  public static final int EXPONENT = 149;\n  public static final int FLOAT_SUFFIX = 150;\n  public static final int SINGLE_LINE_COMMENT = 151;\n  public static final int BLOCK_COMMENT_BEGIN = 152;\n  public static final int BLOCK_COMMENT_END = 153;\n  public static final int COMMENT_CONTENT = 154;\n  public static final int ASSERT = 155;\n  public static final int STATIC_IMPORT = 156;\n  public static final int ENUM = 157;\n  public static final int ENUM_DEF = 158;\n  public static final int ENUM_CONSTANT_DEF = 159;\n  public static final int FOR_EACH_CLAUSE = 160;\n  public static final int ANNOTATION_DEF = 161;\n  public static final int ANNOTATIONS = 162;\n  public static final int ANNOTATION = 163;\n  public static final int ANNOTATION_MEMBER_VALUE_PAIR = 164;\n  public static final int ANNOTATION_FIELD_DEF = 165;\n  public static final int ANNOTATION_ARRAY_INIT = 166;\n  public static final int TYPE_ARGUMENTS = 167;\n  public static final int TYPE_ARGUMENT = 168;\n  public static final int TYPE_PARAMETERS = 169;\n  public static final int TYPE_PARAMETER = 170;\n  public static final int WILDCARD_TYPE = 171;\n  public static final int TYPE_UPPER_BOUNDS = 172;\n  public static final int TYPE_LOWER_BOUNDS = 173;\n  public static final int AT = 174;\n  public static final int ELLIPSIS = 175;\n  public static final int GENERIC_START = 176;\n  public static final int GENERIC_END = 177;\n  public static final int TYPE_EXTENSION_AND = 178;\n  public static final int DO_WHILE = 179;\n  public static final int RESOURCE_SPECIFICATION = 180;\n  public static final int RESOURCES = 181;\n  public static final int RESOURCE = 182;\n  public static final int LAMBDA = 183;\n  public static final int SINGLE_LINE_COMMENT_CONTENT = 184;\n  public static final int BLOCK_COMMENT_CONTENT = 185;\n  public static final int STD_ESC = 186;\n  public static final int BINARY_DIGIT = 187;\n  public static final int ID_START = 188;\n  public static final int ID_PART = 189;\n  public static final int INT_LITERAL = 190;\n  public static final int LONG_LITERAL = 191;\n  public static final int FLOAT_LITERAL = 192;\n  public static final int DOUBLE_LITERAL = 193;\n  public static final int HEX_FLOAT_LITERAL = 194;\n  public static final int HEX_DOUBLE_LITERAL = 195;\n  public static final int SIGNED_INTEGER = 196;\n  public static final int BINARY_EXPONENT = 197;\n}\n```\n. 6.1:\n``` java\npackage com.puppycrawl.tools.checkstyle.grammars;\npublic abstract interface GeneratedJavaTokenTypes\n{\n  public static final int EOF = 1;\n  public static final int NULL_TREE_LOOKAHEAD = 3;\n  public static final int BLOCK = 4;\n  public static final int MODIFIERS = 5;\n  public static final int OBJBLOCK = 6;\n  public static final int SLIST = 7;\n  public static final int CTOR_DEF = 8;\n  public static final int METHOD_DEF = 9;\n  public static final int VARIABLE_DEF = 10;\n  public static final int INSTANCE_INIT = 11;\n  public static final int STATIC_INIT = 12;\n  public static final int TYPE = 13;\n  public static final int CLASS_DEF = 14;\n  public static final int INTERFACE_DEF = 15;\n  public static final int PACKAGE_DEF = 16;\n  public static final int ARRAY_DECLARATOR = 17;\n  public static final int EXTENDS_CLAUSE = 18;\n  public static final int IMPLEMENTS_CLAUSE = 19;\n  public static final int PARAMETERS = 20;\n  public static final int PARAMETER_DEF = 21;\n  public static final int LABELED_STAT = 22;\n  public static final int TYPECAST = 23;\n  public static final int INDEX_OP = 24;\n  public static final int POST_INC = 25;\n  public static final int POST_DEC = 26;\n  public static final int METHOD_CALL = 27;\n  public static final int METHOD_REF = 28;\n  public static final int EXPR = 29;\n  public static final int ARRAY_INIT = 30;\n  public static final int IMPORT = 31;\n  public static final int UNARY_MINUS = 32;\n  public static final int UNARY_PLUS = 33;\n  public static final int CASE_GROUP = 34;\n  public static final int ELIST = 35;\n  public static final int FOR_INIT = 36;\n  public static final int FOR_CONDITION = 37;\n  public static final int FOR_ITERATOR = 38;\n  public static final int EMPTY_STAT = 39;\n  public static final int FINAL = 40;\n  public static final int ABSTRACT = 41;\n  public static final int STRICTFP = 42;\n  public static final int SUPER_CTOR_CALL = 43;\n  public static final int CTOR_CALL = 44;\n  public static final int LITERAL_package = 45;\n  public static final int SEMI = 46;\n  public static final int LITERAL_import = 47;\n  public static final int LBRACK = 48;\n  public static final int RBRACK = 49;\n  public static final int LITERAL_void = 50;\n  public static final int LITERAL_boolean = 51;\n  public static final int LITERAL_byte = 52;\n  public static final int LITERAL_char = 53;\n  public static final int LITERAL_short = 54;\n  public static final int LITERAL_int = 55;\n  public static final int LITERAL_float = 56;\n  public static final int LITERAL_long = 57;\n  public static final int LITERAL_double = 58;\n  public static final int IDENT = 59;\n  public static final int DOT = 60;\n  public static final int STAR = 61;\n  public static final int LITERAL_private = 62;\n  public static final int LITERAL_public = 63;\n  public static final int LITERAL_protected = 64;\n  public static final int LITERAL_static = 65;\n  public static final int LITERAL_transient = 66;\n  public static final int LITERAL_native = 67;\n  public static final int LITERAL_synchronized = 68;\n  public static final int LITERAL_volatile = 69;\n  public static final int LITERAL_class = 70;\n  public static final int LITERAL_extends = 71;\n  public static final int LITERAL_interface = 72;\n  public static final int LCURLY = 73;\n  public static final int RCURLY = 74;\n  public static final int COMMA = 75;\n  public static final int LITERAL_implements = 76;\n  public static final int LPAREN = 77;\n  public static final int RPAREN = 78;\n  public static final int LITERAL_this = 79;\n  public static final int LITERAL_super = 80;\n  public static final int ASSIGN = 81;\n  public static final int LITERAL_throws = 82;\n  public static final int COLON = 83;\n  public static final int DOUBLE_COLON = 84;\n  public static final int LITERAL_if = 85;\n  public static final int LITERAL_while = 86;\n  public static final int LITERAL_do = 87;\n  public static final int LITERAL_break = 88;\n  public static final int LITERAL_continue = 89;\n  public static final int LITERAL_return = 90;\n  public static final int LITERAL_switch = 91;\n  public static final int LITERAL_throw = 92;\n  public static final int LITERAL_for = 93;\n  public static final int LITERAL_else = 94;\n  public static final int LITERAL_case = 95;\n  public static final int LITERAL_default = 96;\n  public static final int LITERAL_try = 97;\n  public static final int LITERAL_catch = 98;\n  public static final int LITERAL_finally = 99;\n  public static final int PLUS_ASSIGN = 100;\n  public static final int MINUS_ASSIGN = 101;\n  public static final int STAR_ASSIGN = 102;\n  public static final int DIV_ASSIGN = 103;\n  public static final int MOD_ASSIGN = 104;\n  public static final int SR_ASSIGN = 105;\n  public static final int BSR_ASSIGN = 106;\n  public static final int SL_ASSIGN = 107;\n  public static final int BAND_ASSIGN = 108;\n  public static final int BXOR_ASSIGN = 109;\n  public static final int BOR_ASSIGN = 110;\n  public static final int QUESTION = 111;\n  public static final int LOR = 112;\n  public static final int LAND = 113;\n  public static final int BOR = 114;\n  public static final int BXOR = 115;\n  public static final int BAND = 116;\n  public static final int NOT_EQUAL = 117;\n  public static final int EQUAL = 118;\n  public static final int LT = 119;\n  public static final int GT = 120;\n  public static final int LE = 121;\n  public static final int GE = 122;\n  public static final int LITERAL_instanceof = 123;\n  public static final int SL = 124;\n  public static final int SR = 125;\n  public static final int BSR = 126;\n  public static final int PLUS = 127;\n  public static final int MINUS = 128;\n  public static final int DIV = 129;\n  public static final int MOD = 130;\n  public static final int INC = 131;\n  public static final int DEC = 132;\n  public static final int BNOT = 133;\n  public static final int LNOT = 134;\n  public static final int LITERAL_true = 135;\n  public static final int LITERAL_false = 136;\n  public static final int LITERAL_null = 137;\n  public static final int LITERAL_new = 138;\n  public static final int NUM_INT = 139;\n  public static final int CHAR_LITERAL = 140;\n  public static final int STRING_LITERAL = 141;\n  public static final int NUM_FLOAT = 142;\n  public static final int NUM_LONG = 143;\n  public static final int NUM_DOUBLE = 144;\n  public static final int WS = 145;\n  public static final int ESC = 146;\n  public static final int HEX_DIGIT = 147;\n  public static final int VOCAB = 148;\n  public static final int EXPONENT = 149;\n  public static final int FLOAT_SUFFIX = 150;\n  public static final int SINGLE_LINE_COMMENT = 151;\n  public static final int BLOCK_COMMENT_BEGIN = 152;\n  public static final int BLOCK_COMMENT_END = 153;\n  public static final int COMMENT_CONTENT = 154;\n  public static final int ASSERT = 155;\n  public static final int STATIC_IMPORT = 156;\n  public static final int ENUM = 157;\n  public static final int ENUM_DEF = 158;\n  public static final int ENUM_CONSTANT_DEF = 159;\n  public static final int FOR_EACH_CLAUSE = 160;\n  public static final int ANNOTATION_DEF = 161;\n  public static final int ANNOTATIONS = 162;\n  public static final int ANNOTATION = 163;\n  public static final int ANNOTATION_MEMBER_VALUE_PAIR = 164;\n  public static final int ANNOTATION_FIELD_DEF = 165;\n  public static final int ANNOTATION_ARRAY_INIT = 166;\n  public static final int TYPE_ARGUMENTS = 167;\n  public static final int TYPE_ARGUMENT = 168;\n  public static final int TYPE_PARAMETERS = 169;\n  public static final int TYPE_PARAMETER = 170;\n  public static final int WILDCARD_TYPE = 171;\n  public static final int TYPE_UPPER_BOUNDS = 172;\n  public static final int TYPE_LOWER_BOUNDS = 173;\n  public static final int AT = 174;\n  public static final int ELLIPSIS = 175;\n  public static final int GENERIC_START = 176;\n  public static final int GENERIC_END = 177;\n  public static final int TYPE_EXTENSION_AND = 178;\n  public static final int DO_WHILE = 179;\n  public static final int RESOURCE_SPECIFICATION = 180;\n  public static final int RESOURCES = 181;\n  public static final int RESOURCE = 182;\n  public static final int LAMBDA = 183;\n  public static final int SINGLE_LINE_COMMENT_CONTENT = 184;\n  public static final int BLOCK_COMMENT_CONTENT = 185;\n  public static final int STD_ESC = 186;\n  public static final int BINARY_DIGIT = 187;\n  public static final int ID_START = 188;\n  public static final int ID_PART = 189;\n  public static final int INT_LITERAL = 190;\n  public static final int LONG_LITERAL = 191;\n  public static final int FLOAT_LITERAL = 192;\n  public static final int DOUBLE_LITERAL = 193;\n  public static final int HEX_FLOAT_LITERAL = 194;\n  public static final int HEX_DOUBLE_LITERAL = 195;\n  public static final int SIGNED_INTEGER = 196;\n  public static final int BINARY_EXPONENT = 197;\n}\n```\n. The problem described in https://github.com/sevntu-checkstyle/sevntu.checkstyle/issues/272 obviously originates in this issue. Yet another reason to get this issue fixed!\n. For the sake of completeness:\nVersion 6.1.1 of \"GeneratedJavaTokenTypes\" is identical with version 6.1.\n. Again for reference, the history of \"broken\" CS versions:\n| Version | Release date | Constant values |\n| --- | --- | --- |\n| 5.6 | 2012-09-18 | OK |\n| 5.7 | 2014-10-16 | OK |\n| 5.8 | 2014-10-08 | OK |\n| 5.9 | 2014-10-17 | 3 new tokens - not OK |\n| 6.0 | 2014-10-23 | More new tokens - not OK |\n| 6.1 | 2014-11-14 | (unchanged) - still not OK |\n| 6.1.1 | 2014-11-27 | (unchanged) - still not OK |\nSo the \"dark age\" begins with CS version 5.9 and lasts until a decision has been made whether to return to the \"old \" token types, or to continue with the 6.0 token codes.\nMy recommendation for the company I work for is to absolutely stay with version 5.7 until the issue will be resolved.\n. Hello Romani,\nIMHO the real problem is that the ANTLR-generated token type constants are exposed on the CS extension API. I propose to take yet another major version step, and change \"TokenTypes\" from CLASS to ENUM (and \"DetailAST.getType()\" from INT to \"TokenTypes()\"). That way, extension programmer need to make very little changes to their code (unless they did \"arithmetics\" with the integer values).\nCU\nArno\n. The CS extension I'm working on is\nhttp://cs-contrib.unkrig.de/\nI don't want to spread too much personal data over the web, but you can check my profile on xing.com.\n. If I would, I'd be version dependent - I retrieve the constant values through REFLECTION.\nhttps://svn.code.sf.net/p/loggifier/code/trunk/de.unkrig.cs-contrib.core/src/de/unkrig/cscontrib/LocalTokenType.java\n. Hi @sabaka,\nwouldn't it be possible to re-arrange the token types so that the numbering of the 5.7 token types remains the same?\n. I'd appreciate that!\n. By the way, is there a catalog of globally available checks? Or is the concept to \"embrace\" other projects and encourage them to integrate their checks into github checkstyle?\nHowever I feel that there must be a lot of \"specific\" checks that are totally generic, but still useful for evenly \"specific\" audiences, an be it only as an inspiration for one's own checks.\n. ",
    "uralovs": "+1\n. ",
    "grumpyjames": "+1\n. ",
    "jdalbey": "I completely agree with the concept.\nI wonder if the requirement \"known to be immutable\" may be too vague to be implementable.\nHere's a suggestion of how to implement this enhancement. In VisibilityModifierCheck.java, line 151,\nChange:\n|| (mods.contains(\"static\") && mods.contains(\"final\"))\nto:\n|| mods.contains(\"final\"))\nObviously this is not as rigorous the OP suggests, but it is very easy to implement.\n. ",
    "moldowan": "Well, it's pretty straight forward:\nMaven 3.0.4 with maven-checkstyle-plugin 2.10 (and checkstyle 5.6).\n<plugin>\n        <groupId>org.apache.maven.plugins</groupId>\n        <artifactId>maven-checkstyle-plugin</artifactId>\n        <version>2.10</version>\n        <configuration>\n            <encoding>${project.build.sourceEncoding}</encoding>\n            <failOnViolation>${failCheckstyleOnBuild}</failOnViolation>\n            <violationSeverity>warning</violationSeverity>\n            <logViolationsToConsole>true</logViolationsToConsole>\n            <configLocation>checkstyle-teflos.xml</configLocation>\n            <suppressionsLocation>checkstyle-suppressions.xml</suppressionsLocation>\n            <suppressionsFileExpression>checkstyle.suppressions.file</suppressionsFileExpression>\n            <aggregate>false</aggregate>\n            <linkXRef>false</linkXRef>\n        </configuration>\n        <executions>\n            <execution>\n                <id>check</id>\n                <phase>verify</phase>\n                <goals>\n                    <goal>check</goal>\n                </goals>\n                <configuration>\n                    <skip>${skipCheckstyleOnBuild}</skip>\n                </configuration>\n            </execution>\n        </executions>\n        <dependencies>\n            <dependency>\n                <groupId>de.dlh.lrs.teflos</groupId>\n                <artifactId>teflos.buildmgr.checkstyle</artifactId>\n                <version>${version.teflos.buildmgr.checkstyle}</version>\n            </dependency>\n        </dependencies>\n    </plugin>\nNote: The two referenced xml files are contained in the teflos.buildmgr.checkstyle dependency!\nWith this configuration, checkstyle was running fine with maven and within eclipse 4.2. In eclipse, m2e (Maven Integration for Eclipse 1.2.0) and the \"Checkstyle configuration plugin for M2Eclipse\" 1.0.0 automatically pulled the configuration file from the dependency and auto-configured the Eclipse Checkstyle Plug-in (5.6.0).\nThe classloader problem popped up when I realized that the suppressions file was not evaluated in eclipse.\nI tried to use the ${config_loc} property which is set by the Eclipse Checkstyle Plug-in, see:\nhttp://rolf-engelhard.de/2011/04/using-the-same-suppression-filter-for-checkstyle-in-eclipse-and-maven/\nI added to checkstyle-teflos.xml:\n<module name=\"SuppressionFilter\">\n        <!-- config_loc value is\n             - within eclipse: the full jar file url (same location where this file is located)\n             - within maven: blank, checkstyle-suppressions.xml can be loaded from classpath right away -->\n        <property name=\"file\" value=\"${config_loc}checkstyle-suppressions.xml\"/>\n    </module>\nAnd to pom.xml:\n<!-- config_loc is set by eclipse checkstyle plugin, for the maven execution it needs to be blank -->\n    <propertyExpansion>config_loc=</propertyExpansion>\nThis yielded two problems:\n1. Eclipse was complaining that it could not find the suppressions file although the file was there. ${config_loc} evaluates to the correct jar file URL but loading supressions files from jar file URLs is broken in checkstyle 5.6 but has been fixed in 5.7-SNAPSHOT.\n2. Checkstyle executed by maven from the command line could not find checkstyle-suppressions.xml anymore. As long as the suppressions file was looked up by maven, it was found successfully but now as checkstyle itself had to look it up from the classpath, it failed! It now works for me as I have patched SuppressionsLoader to use the thread context classloader.\nIf you need more details please let me know. :) \n. For the sake of correctness (and to prevent leading others astray):\nThe propertyExpansion does not work as intended as config_loc will be overwritten with an empty string in eclipse which is not what I wanted. I ended up with a gmaven workaround to set config_loc to an emtpy string for maven only.\n. With \"rewritten\" I meant that the loading via URL has been corrected (not loading from classpath!).\nCompare: http://sourceforge.net/p/checkstyle/code/ci/release5_6/tree/src/checkstyle/com/puppycrawl/tools/checkstyle/filters/SuppressionsLoader.java\nWith: https://github.com/checkstyle/checkstyle/blob/master/src/checkstyle/com/puppycrawl/tools/checkstyle/filters/SuppressionsLoader.java\nAs far as the loading from classpath is concerned, I can only say that using the thread context classloader fixed my problem.\n. ",
    "benjaminhawkeslewis": "Still experiencing this with 2.12.1 of the plugin.\nAttempted to raise this issue with Maven Checkstyle plugin maintainers at:\nhttp://jira.codehaus.org/browse/MCHECKSTYLE-228\n. ",
    "kosta": "Are you sure tabWidth of 8 produces the expected result? \nNote that throws is indented at 8 characters, but return false at 4. This is on purpose, so that there is a visual distinction between the throws and the method body.\nI think this is in spirit of the Java code conventions: http://www.oracle.com/technetwork/java/javase/documentation/codeconventions-136091.html#248\n. ",
    "ksclarke": "How about this approach:\nhttps://github.com/maikelsteneker/checkstyle-throwsIndent\nI'm not sure what is meant \"experimental project\" but perhaps the above would qualify?\nNote that the above is not my project but I use it to get the desired functionality.\n. Great.  I'm not sure where you mean to fix the JavaDoc though.  Do you mean to add something to the below?\n* <p>\n* The basic idea behind this is that while\n* pretty printers are sometimes convenient for bulk reformats of\n* legacy code, they often either aren't configurable enough or\n* just can't anticipate how format should be done.  Sometimes this is\n* personal preference, other times it is practical experience.  In any\n* case, this check should just ensure that a minimal set of indentation\n* rules are followed.\n* </p>\nThe field has a javadoc:\n/** how far throws should be indented when on next line */\nprivate int mThrowsIndentationAmount = DEFAULT_INDENTATION;\nThanks for clarifying.\n. ",
    "richarddbarnett": "Patch (based on 5.3) that unfortunately breaks many unit tests:\ndiff\ndiff -r 1b7a252d5e1e src/checkstyle/com/puppycrawl/tools/checkstyle/DefaultLogger.java\n--- a/src/checkstyle/com/puppycrawl/tools/checkstyle/DefaultLogger.java Tue Oct 19 18:56:17 2010 +1000\n+++ b/src/checkstyle/com/puppycrawl/tools/checkstyle/DefaultLogger.java Wed Feb 22 11:38:12 2012 +1100\n@@ -109,9 +109,7 @@\n             if (aEvt.getColumn() > 0) {\n                 sb.append(':').append(aEvt.getColumn());\n             }\n-            if (SeverityLevel.WARNING.equals(severityLevel)) {\n-                sb.append(\": warning\");\n-            }\n+            sb.append(\": \").append(severityLevel.getName());\n             sb.append(\": \").append(message);\n             mErrorWriter.println(sb.toString());\n         }\n. ",
    "juanchosaravia": "Is there any workaround for this issue? Thanks in advance!\n. ",
    "Splaktar": "Is this fix in 5.7?\n. Yep, I just tested the upgrade from 4.2 to 5.7 with the GWT project and SuppressionCommentFilter no longer works the same way.  The release notes say that there was a fix, but the fix doesn't seem to work the same way.\nRemoving the \"messageFormat\" also fixes the problem for us.\n. ",
    "maikelsteneker": "Thank you both for your efforts. I've been using my own build of checkstyle to be able to use this little extra, but it would be great to get it in the main release.\n. ",
    "pavel-sakun": "@ksclarke Thank you! Found reports on this dated 2008 :)\n. It's already there https://github.com/checkstyle/checkstyle/pull/80. Doc is here http://checkstyle.sourceforge.net/config_misc.html#Indentation\n. Just in case: checkstyle-idea and eclipse-cs added support for version 5.7 yesterday.\n. ",
    "Boberski": "Thank you for following up. Below is the requested information. If any additional information is needed, please let me know.\nBelow are two sample code snippets, Example 1 and 2.\n//EXAMPLE 1\nString userURL = request.getParameter( \"userURL\" )\n               <a href=\"<%=userURL%>\">link</a>\n//EXAMPLE 2\nString userURL = request.getParameter( \"userURL\" )\n boolean isValidURL = ESAPI.validator().isValidInput(\"URLContext\", userURL, \"URL\", 255, false); \n if (isValidURL) {  \n     <a href=\"<%=encoder.encodeForHTMLAttribute(userURL)%>\">link</a>\n }\nAt present, I can write a regular expression check as follows:\n<module name=\"RegexpMultiline\">\n  <property name=\"severity\" value=\"info\"/>\n  <property name=\"format\" value='String +(\\w+) += +request\\.getParameter ?\\(.*\\)[\\s\\S]*?\\1'/>\n  <property name=\"ignoreCase\" value=\"false\"/>\n  <property name=\"message\" value=\"Test result finding\"/>\n  <property name=\"fileExtensions\" value=\"java\"/>\n</module>\nHowever, in actuality I wish to exclude Example 2 from matching this check. Since, the above check matches both Example 1 and 2. And, this example scenario represents code before and after a fix. Note that while there may be other ways to accomplish this with Checkstyle for Java, I wish to be able to do this for many different file types for which there does not exist that type of potentially built-in functionality.\nSo for example if I were able to write a RegexpMultiline that included something like an \"exclude\" parameter (which is currently not supported by Checkstyle) as follows, on the fourth line of the check below:\n<module name=\"RegexpMultiline\">\n  <property name=\"severity\" value=\"info\"/>\n  <property name=\"format\" value='String +(\\w+) += +request\\.getParameter ?\\(.*\\)[\\s\\S]*?\\1'/>\n  <property name=\"exclude\" value='ESAPI\\.validator'/>\n  <property name=\"ignoreCase\" value=\"false\"/>\n  <property name=\"message\" value=\"Test result finding\"/>\n  <property name=\"fileExtensions\" value=\"java\"/>\n</module>\n... Then the hope would be that Example 1 would match but Example 2 would not, since Example 2 while it would initially match using the \"format\" pattern, it would subsequently be excluded based on matching the \"exclude\" pattern. Note, I also would propose equivalent enhancement for RegexpSingleline.\nLooking a little bit at the Checkstyle code, to make this enhancement, it seems like the following changes would need to be made:\n1. Add something like a new exclude property to DetectorOptions.java, e.g. add \"private String mExclude\", then add corresponding setExclude and getExclude\n2. Add a new utility method to DetectorOptions.java similar to how is done for \"format\", e.g.:\npublic Pattern getTrimPattern()\n    {\n        final int options = (mIgnoreCase) ? mCompileFlags\n                | Pattern.CASE_INSENSITIVE : mCompileFlags;\n        return Utils.getPattern(mExclude, options);\n    }\n1. Add a new corresponding setExclude to RegexpMultilineCheck.java e.g. insert after line 69:\nmTrimmer = mOptions.getTrimPattern().matcher(mText.getFullText());\n1. Add a new property to MultilineDetector.java, e.g.\nprivate Matcher mTrimmer\n1. Add in processLines() in MultilineDetector.java e.g.\nmTrimmer = mOptions.getTrimPattern().matcher(mText.getFullText());\n1. Add under \"final boolean foundMatch = mMatcher.find();\" before the comparison in findMatch() in MultilineDetector.java e.g.\nfinal boolean foundTrim = mTrimmer.find();\n1. Replace the \"if (!foundMatch)\" comparison in findMatch() in MultilineDetector.java on with e.g.:\nif ((!foundMatch)||(foundMatch && foundTrim)) {\n            return;\n        }\nThere may be additional or different changes that are needed, but hopefully the above clarifies the new functionality that I am proposing. Thanks again for your consideration.\n. Roman, any thoughts?\n. No problem. Thank you for taking the time to work with me on this. \nFor the first item: for name, how about \"trim\" instead of \"exclude\"?\n. Roman, thank you for continuing to work with me on this.\nFor example, Checkstyle using its regular expression functionality can be\nused to enforce not only additional Java language coding standards (and to\ndo so more easily and quickly than otherwise using built-in Checkstyle\nfunctionality), but other programming language coding standards as well.\nThe regular expression functionality extends Checkstyle's capabilities\nbeyond Java (and thus also extending Checkstyle's user base beyond Java\nprogrammers), and the proposed enhancement further refines this capability.\nAn example of not only Java but additional language coding standard are\nthese:\nhttps://www.securecoding.cert.org/confluence/display/java/The+CERT+Oracle+Secure+Coding+Standard+for+Java\nExamples of Java, C/C++, and PHP sample code where these types of coding\nstandards are used can be downloaded from here, these would be\nfreely-shareable examples of code that I would be trying to validate in\nother applications against a set of custom Checkstyle regular expression\nchecks: http://samate.nist.gov/SRD/testsuite.php\nI can envision for example people and organizations such as OWASP\npublishing different programming language checks using Checkstyle, just as\nis done at present by Sun/Oracle. The proposed enhancement provides the\nnecessary capability to make Checkstyle useful particularly in these cases,\nto minimize false results.\nPlease let me know if this answers the question, I can provide additional\ndetails or explanation. Thank you again\nOn Mon, Jan 27, 2014 at 1:25 AM, Roman Ivanov notifications@github.comwrote:\n\nplease provide more real examples with details to prove reason of your\nfeature request.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/checkstyle/checkstyle/issues/81#issuecomment-33344486\n.\n. I suppose it then boils down to: this would make writing complex regular\nexpressions much, much easier. Forward references, back references, so on\nand so forth can make writing regular expressions very challenging. To be\nable to with the first pattern do a broader pattern, then to be able to\nnarrow the results with a separate simple pattern, would directly address\nthis challenge. Examples of use cases where these types of complex\nexpressions are used (in Java) include those having to do with security, as\nper the various examples provided in the links above.\n\nOn Thu, Jan 30, 2014 at 12:01 PM, Roman Ivanov notifications@github.comwrote:\n\nand thus also extending Checkstyle's user base beyond Java\nprogrammers\nCheckstyle is only for Java, all other usages is a hack that possibly\nworks but it will never be maintained and considered as feature extension.\nTill I see real benefit for Java, nothing will be added. You always have a\nchoice to keep your changes in fork and use/change Checkstyle up to your\nneeds and wish. Or write RegExp Checkstyle for your language - checkstyle\nidea is applicable to all languages, but realization is completely\ndifferent as problems are different.\nI still waiting for prove of benefits for Java.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/checkstyle/checkstyle/issues/81#issuecomment-33708165\n.\n. \n",
    "gunnarmorling": "Thanks, @romani!\n. ",
    "julianhyde": "Romani, there is a \"git way\" to achieve that. Merge the pull request manually, using \"git rebase\" rather than \"git merge\". You'll have a nice linear history in master, but contributors will still get credit. \n. Yes. In 043cd90, I just added a test case that verifies. Feel free to squash it into the previous commit.. ",
    "wstomv": "I support this request. A check where you can configure which additional (non-standard) block tags to allow, or even require, on what elements (class, method, variable).\n. Done. Thanks.\nOn Fri, Feb 14, 2014 at 10:48 PM, Roman Ivanov notifications@github.comwrote:\n\n@wstomv https://github.com/wstomv , please share your support at your\nsurvey - https://www.surveymonkey.com/s/MNFHYSJ .\n\nReply to this email directly or view it on GitHubhttps://github.com/checkstyle/checkstyle/issues/100#issuecomment-35128131\n.\n. \n",
    "carthagian": "I want to fix this bug, but I will need some help\n. Did this fix your issue ?\n. Hi Roman,\nI have a problem with the compilation of my UT, I get 7 Failures Actually,\nthey were 5 Failures but now I'm getting 7 ..\nI'm actually trying and looking how to compile from the Eclipse IDE rather\nthan the Shell.\nOn Sun, Mar 9, 2014 at 8:00 PM, Roman Ivanov notifications@github.comwrote:\n\nUT is required, to be quickly merged and be available in next release.\n\nReply to this email directly or view it on GitHubhttps://github.com/checkstyle/checkstyle/pull/114#issuecomment-37135141\n.\n. I pushed a new Commit to the Branch fix_105_anonymous_inner_class, It builds Successfully but the problem is that I'm getting 5 Failures instead of 0.\n. \n",
    "scop": "Hopefully fixed in the updated revision fe64c0e -- I cannot actually test the build myself because it always fails for me due to some doclet errors in ant-phase-compile.xml no matter what JDK I try it with.\nThe reason to use Integer internally like this is that doing so we can use null to indicate a \"not set\" value.\n. If this feature had been in checkstyle 5.7, I know it would have solved a configuration issue in HornetQ where the majority of developers run checkstyle 5.6 for the time being and some others run 5.7. https://github.com/hornetq/hornetq/pull/1538\n. I'm not sure I follow -- my change makes both caseIndent and throwsIndent default to basicOffset (and I would recommend to do so for any possible future added indents too).\n. ",
    "nator": "I'm seeing it pass for something as simple as:\npublic class TestClass\n{\n    public int testMethod() {\n        return 0;\n    }\n}\nHowever, it does complain about the brace if I pull the code back from the indent:\npublic class TestClass\n{\npublic int testMethod() {\n    return 0;\n}\n}\n. ... and this fails for the second method only, not the first:\n```\npublic class TestClass\n{\n    public int testMethod() {\n        return 0;\n    }\npublic int testMethod2() {\n    return 1;\n}\n\n}\n```\n. ... finally, i'm using the IntelliJ Idea plugin if that might matter? Doesn't seem to.\n. Thanks for testing. I'll try to clone the project in a bit and run some tests without the Idea plugin. Seems at this point that might be part of the issue...\n. I'm going to close this and reopen in the Idea plugin (jshiell/checkstyle-idea). I can't repro from the latest stable jars on the command line, but reliably in Idea. Sorry for the false alarm!\n. ",
    "theqaguy": "What I forgot to mention: This issue & fix are related to the released 5.7 version.\n. Thanks for your feedback. I created a pull request now.\n. I'd really love to do this but I'm facing two problems:\n1. I don't know how to do it (which is a weak excuse, Google will probably tell me)\n2. I'm doing all these changes from the Github web UI since I can't install git on my office computer and I can't work on this at home.\nSo: Do you know any way to squash the commits in the Github UI? If not - how much of a blocker is this?\nI'm really sorry for any inconveniences this may cause.\n. Head -> Desk.\nSorry, my fault.\nYoure absolutely right, that's a eclipse-cs issue.\n. ",
    "lfbayer": "It appears that the issue is that we were specifying a \"messageFormat\" that isn't matching the actual format of the message. Removing the \"messageFormat\" fixes the problem.\nI'm guessing that the original writer of this rule thought that the \"messageFormat\" was actually a log message to output, rather than an message to match against.\nIt is strange to me that this ever worked. Did something recently change so that in earlier versions the \"messageFormat\" was ignored?\n. ",
    "rwoo": "My workaround: Load import-control.xml from the classpath, then write it to a temporary file. The ImportControl in the configuration.xml should use a property for the filepath, see http://checkstyle.sourceforge.net/config.html#Properties. Set this property when you use the ConfigurationLoader to initialize Checkstyle.\n. ",
    "jirutka": "I have the same problem\u2026\n. ",
    "s-edwards": "I spent a little time trying to track this one down (since I've been bit by it as well).  The bug is still present in 5.8.  I traced it down into the AssignHandler's suggestedChildLevel() method (com.puppycrawl.tools.checkstyle.checks.indentation.AssignHandler).  Lines 88-92 are:\nif (child == assign.getFirstChild()) {\n    // left side of assignment should have the same\n    // indentation as \"assignment\"\n    return getLevel();\n}\nThe problem is that left sides that have deeper ASTs may ask for a suggested child level that is deeper in the left side, rather than an immediate child of the assign node.  I replaced this with code to check for more deeply nested child nodes:\nDetailAST childParent = child;\nwhile (childParent != assign && childParent != null)\n{\n    if (childParent == assign.getFirstChild()) {\n        return getLevel();\n    }\n    childParent = childParent.getParent();\n}\nThis fixed the problem for me.\n. ",
    "vlsi": "Here is the top contributor:\n\nAfter removing clone in FileText.toLinesArray (see https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/api/FileText.java#L288 ) and some more tweaks it becomes as follows:\n\n. That is out of the box JDK. To be more specific, it is Java Mission Control\nIt is free for non-production environments.\nTo enable profiling, you need to add FlightRecorder startup options (e.g. to MAVEN_OPTS)\nexport MAVEN_OPTS='-Xmx2048M -XX:MaxPermSize=512m -XX:+UnlockCommercialFeatures -XX:+FlightRecorder -XX:StartFlightRecording=duration=1800s,settings=profile,stackdepth=2000,filename=target/recording.jfr'\nTo analyze the generated recording.jfr, lauch jmc\n. I'm fine with keeping aString.charAt(idx) == '\\t' as in the pull request\n. > - How to maintain consistent error reporting, if multiple threads are producing errors\nWhat's the problem? Just collect all the errors, merge in the final stage and print all the errors in final step.\n\n\nDealing with checks that need to process all files before producing a report. E.g. the copy/paste detector\n\n\nI see no problem here as well.\nThe particular check is quite easy to rewrite in multithreaded way:\n step1 compute file hashes (should scale perfectly, since computation of hash requires just a single file)\n step2 try to find duplicates in each file (should scale perfectly since duplicates can be detected file by file)\n. > Re collecting all the errors and merging at the end. How will this scale\n\nwith thousands of files being checked, and potentially millions of errors\nmessages?\n\nTypical solutions are:\n- Hard stop after specified number of errors (say you blow fatal error after 100K errors). Do you really care to print the million errors? What is use of that?\n- Allocate more memory. Seriously. Multithreading does not make things worse than they currently are.\n- Spill the findings to disk (e.g. use database to cope with large amount of findings)\n\nRe checks that need to see all files - I gave but one example. And I would\nbelieve that the framework should provide support/rules for how to write a\ncheck that needs to see all files.\n\nI would go for fork-join style processing.\nI am not familiar with checkstyle codebase to propose specific solutions.\nI guess an interface can be added to mark MultiThreadAware checks, so all the multithread-aware checks go multithread, while the rest are performed in a single thread.\nThen the checks can be migrated to parallel mode one-by-one.\n. I've looked into the code a bit.\nIt looks like the most complex is to support  AuditListener while still multithreading.\nI suggest the following:\n  Split Checker in two flavors:\n   1) Top level Checker would just aggregate results from downstream Checkers and pass the results to AuditListeners\n   2) Downstream Checkers would not call listeners, but pass the results to top-level checker (so it can invoke listeners as required).\nThe tricky part is to batch listener invocations from downstream Checkers file-by-file. In other words, deny execution of interleaved fireFileStarted events from different downstream Checkers.\nWhat do you think?\nPS. implementing multithread-aware Checks is a bit tricky question.\nAt least, we can identify Checks that perform global analysis verifying if the class overrides finishProcessing.\n. > Suggest you have a got at what you are suggesting, and see how it pans out.\nI'm sorry I cannot understand Suggest you have a got at what you are suggesting part. Can you please rephrase?\nWhat I want is to have some high level confirmation before I come up with pull request.\nI do not want spending time implementing stuff that is not going to be committed.\n\nThis is an impossible task, as there are many third party checks out there,\nHow do you think those checks can be implemented?\n\nI believe the only sensible way implementing a global check is to override finishProcessing, or implementing an AuditListener.auditFinished.\nThat is easy to identify at run time, so the implementation can fall-back to singlethread processing if \"non-multithread-aware check or listener\" is identified: see (Class#getDeclaredMethod)[http://docs.oracle.com/javase/1.5.0/docs/api/java/lang/Class.html#getDeclaredMethod(java.lang.String, java.lang.Class...)] .\nDo you know other ways to implement global analysis check?\n\nFinally IMHO, any solution should be backwardly compatible with the current Check API.\n\nI guess we can still improve API for those who want multithreaded stuff.\n. Dears, I stop progress on this issue.\nFeel free to pick it up.\n\nAPI changes is possible if reasonable\n\nThis turns out to be false. Even minuscule change \"expose arguments of LocalizedMessage\" faces enormous resistance: https://groups.google.com/forum/#!topic/checkstyle-devel/ln3rJd5_gbI\n\nWell said Roman!\n\nThis is indeed well said, except \"WE DO NOT PROMISE THAT ANY CHANGES WILL BE APPLIED TO MAIN REPO\" part that basically says \"we have no guidelines on what is committable and what is not, thus the probability of committing is 0.5 no matter what results you achieve\".\nThis phrase alone is reasonable, however when it is reinforced by \"LocalizedMessage.getArguments is absolute no-no\", I understand that the only sane way of improving checkstyle is making a fork.\nI do not have enough time and passion for support a checkstyle fork, thus I would just try to minimize usage of checkstyle in the projects I am involved in.\n. @romani, I see no way to satisfy checkstyle here.\nIt complains either array initialization child at indentation level 12 not at correct indentation, 16 or array initialization child at indentation level 16 not at correct indentation, 12.\nIn other words it does not allow neither 12 nor 16 level.\nI can just suppress this error (checkstyle bug?), however I believe you know better how to deal with the error.\n. Finally I've figured out the correct indentation. I wish there were an option \"show me the correct identation\".\n. ",
    "oburn": "+1 - Well put!\nOn Tue, Jul 29, 2014 at 5:13 AM, Roman Ivanov notifications@github.com\nwrote:\n\nThe question is - how defensive do we want to be in our API for checks.\nMaybe this is the case when we should relax defensive requirement in favour\nof performance?\nWe need to review Checkstyle API after GSoC to see how it should be\nchanged to not let custom Checks change parse Tree and other hack presence\nin API. I am not ready to discuss that right now.\nWe could live with that performance problem for a log time, but without\njava8 support we become obsolete project very soon.\nSo lets postpone that change for till we have enough time for API changes.\nBut, IMHO, API have to be kept as stable as possible\nstable usually mean dead. We do not need stable API, we need api that do\nmake sense for all participants. So changes in API is unavoidable, but\nshould be thoroughly designed.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/checkstyle/checkstyle/pull/136#issuecomment-50384587.\n. I looked into doing this before, but gave up on the idea. The problems\ninclude:\n- How to maintain consistent error reporting, if multiple threads are\n  producing errors\n- Dealing with checks that need to process all files before producing a\n  report. E.g. the copy/paste detector\n\nIt gets hard very quickly.\nOn Thu, Apr 24, 2014 at 12:55 PM, Roman Ivanov notifications@github.comwrote:\n\none day we will do this, but priority is minimal as static code analysis\ncould have performance inefficiencies.\nPerformance problems is less painful as functional problems and\nfalse-positives.\nBut thanks to reporting that, to let us not forget :).\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/checkstyle/checkstyle/issues/138#issuecomment-41237970\n.\n. Got for it - you seem to have it solved :-)\n\nRe collecting all the errors and merging at the end. How will this scale\nwith thousands of files being checked, and potentially millions of errors\nmessages?\nRe checks that need to see all files - I gave but one example. And I would\nbelieve that the framework should provide support/rules for how to write a\ncheck that needs to see all files.\nOn Thu, Apr 24, 2014 at 7:44 PM, Vladimir Sitnikov <notifications@github.com\n\nwrote:\n-\nHow to maintain consistent error reporting, if multiple threads are\n   producing errors\n   What's the problem? Just collect all the errors, merge in the final\n   stage and print all the errors in final step.\n   -\nDealing with checks that need to process all files before producing a\n   report. E.g. the copy/paste detector\n   I see no problem here as well.\n   The particular check is quite easy to rewrite in multithreaded way:\n   step1 compute file hashes (should scale perfectly, since computation\n   of hash requires just a single file)\n   step2 try to find duplicates in each file (should scale perfectly\n   since duplicates can be detected file by file)\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/checkstyle/checkstyle/issues/138#issuecomment-41261604\n.\n. Bear in mind that checkstyle is designed to be embedded, which is there are\nso many plugins.\n\nSolutions involving databases, writing to external files, more memory,\ncreating threads etc may or may not be valid or possible in the host\nenvironments. Currently checkstyle does not place any requirements on the\nhost environment.\nAnyway, just some more thoughts.\nOliver\n On 24 Apr 2014 21:43, \"Vladimir Sitnikov\" notifications@github.com wrote:\n\nRe collecting all the errors and merging at the end. How will this scale\nwith thousands of files being checked, and potentially millions of errors\nmessages?\nTypical solutions are:\n- Hard stop after specified number of errors (say you blow fatal error\n  after 100K errors). Do you really care to print the million errors? What is\n  use of that?\n- Allocate more memory. Seriously. Multithreading does not make things\n  worse than they currently are.\n- Spill the findings to disk (e.g. use database to cope with large\n  amount of findings)\nRe checks that need to see all files - I gave but one example. And I would\nbelieve that the framework should provide support/rules for how to write a\ncheck that needs to see all files.\nI would go for fork-join style processing.\nI am not familiar with checkstyle codebase to propose specific solutions.\nI guess an interface can be added to mark MultiThreadAware checks, so all\nthe all the multithread-aware checks go multithread, while the rest is\nperformed one-by-one.\nThen the checks can be migrated to parallel mode one-by-one.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/checkstyle/checkstyle/issues/138#issuecomment-41270420\n.\n. As I said before, I looked into this before and it got hard very quickly.\nSuggest you have a got at what you are suggesting, and see how it pans out.\n\nBTW - you mentioned identifying the checks that perform global analysis.\nThis is an impossible task, as there are many third party checks out there,\nthat we have no visibility to. For example, I know that at least one team\nat Google has custom Checkstyle checks.\nFinally IMHO, any solution should be backwardly compatible with the current\nCheck API.\nOn Fri, Apr 25, 2014 at 7:41 PM, Vladimir Sitnikov <notifications@github.com\n\nwrote:\nI've looked into the code a bit.\nIt looks like the most complex is to support AuditListener while still\nmultithreading.\nI suggest the following:\nSplit Checker in two flavors:\n1) Top level Checker would just aggregate results from downstream Checkersand pass the results to\nAuditListeners\n2) Downstream Checkers would not call listeners, but pass the results to\ntop-level checker (so it can invoke listeners as required).\nThe tricky part is to batch listener invocations from downstream Checkersfile-by-file. In other words, deny execution of interleaved\nfireFileStarted events from different downstream Checkers.\nWhat do you think?\nPS. implementing multithread-aware Checks is a bit tricky question.\nAt least, we can identify Checks that perform global analysis verifying\nif the class overrides finishProcessing.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/checkstyle/checkstyle/issues/138#issuecomment-41375468\n.\n. Sorry for the bad words, I meant to say:\n\nSuggest you have a go at what you are suggesting, and see how it pans out.\nBy which I mean, please try to implement your idea. Writing some code is\nthe best way to try out your ideas.\nRe changing the API - I am absolutely all for improving the API, just that\nbackwards compatibility is important.\nI will be interested to see how you go.\nRegards,\nOliver\nOn Fri, Apr 25, 2014 at 9:47 PM, Vladimir Sitnikov <notifications@github.com\n\nwrote:\nSuggest you have a got at what you are suggesting, and see how it pans out.\nI'm sorry I cannot understand Suggest you have a got at what you are\nsuggesting part. Can you please rephrase?\nWhat I want is to have some high level confirmation before I come up with\npull request.\nI do not want spending time implementing stuff that is not going to be\ncommitted.\nThis is an impossible task, as there are many third party checks out there,\nHow do you think those checks can be implemented?\nI believe the only sensible way implementing a global check is to override\nfinishProcessing, or implementing an AuditListener.auditFinished.\nThat is easy to identify at run time, so the implementation can fall-back\nto singlethread processing if \"non-multithread-aware check or listener\" is\nidentified: see [Class#getDeclaredMethod](\nhttp://docs.oracle.com/javase/1.5.0/docs/api/java/lang/Class.html#getDeclaredMethod(java.lang.String,\njava.lang.Class...) .\nDo you know other ways to implement global analysis check?\nFinally IMHO, any solution should be backwardly compatible with the\ncurrent Check API.\nI guess we can still improve API for those who want multithreaded stuff.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/checkstyle/checkstyle/issues/138#issuecomment-41384071\n.\n. Well said Roman!\n\nOn Sat, Apr 26, 2014 at 2:23 AM, Roman Ivanov notifications@github.comwrote:\n\nto avoid any misunderstanding before development.\n1) Right now whole team is focused on\nhttps://github.com/checkstyle/checkstyle/wiki/Checkstyle-GSoC-2014-Project-Ideas, this is highest priority for a team and high demand from community.\nShould be finished at the beginning of September 2014.\n2) Multi thread update require, serious code review, and extended testing,\nand testing in major plugins - maven, eclipse, idea, netbeans, sonar. Sorry\nbut I very sceptical that we will have time for this , see \"1)\".\nWe already have a lot of problems with correct parsing of some java files,\nso testing will become even more complicated as we need to distinguish new\nand existed problems.\n3) API changes is possible if reasonable. we could create Checkstyle 6.X\nversion for this case. I am ok to brake backward compatibility if we let\nour users option to stay at 5.X version.\nBut it give us extra work to support our project. But our team is tiny. So\nI doubt that we could afford this now.\nI do not want to forbid you make Checkstyle better, I just want to warn\nyou that stability for our project is in more priority then performance. I\nwill not allow to do some changes in expense of stability. As example take\na look at our experimental pool of Checks -\nhttps://github.com/sevntu-checkstyle/sevntu.checkstyle. There we do\ntesting of Checks before introducing it to main project. Nobody like\ncrashes of Checkstyle, that usually result in switching OFF Checkstyle at\nall.\nSummary: if you still want to continue, please:\n- do fork,\n- do investigation, prepare a plan of changes and how you will do\n  testing to ensure stability,\n- do draft update to estimate performance improvement\n- provide results/benefits of your implementation\nWE DO NOT PROMISE THAT ANY CHANGES WILL BE APPLIED TO MAIN REPO, even you\nhave some results, and spend a lot of time.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/checkstyle/checkstyle/issues/138#issuecomment-41411612\n.\n. \n",
    "hklene": "\nYou intended to say: Of course it's possible, but the current implementation does not easily allow for an inheritance check. So therefore you cannot promise this will ever be implemented neither if it would ever run performantly :-)\nGreat, I suggest adding LinkedHashMap and LinkedHashSet. BTW where would I see the list:\n   a) my currently running checkstyle version uses?\n   b) the head revision will use in future releases?\n\nc) Is there a way to customize this list e.g. by adding to / removing from the default list for project specific demands?\n1. I disagree, especially in cases where I only call the constructor to initialize a variable of some basic interface type. Yes, I might \"depend\" on some complex code, but it's all hidden away behind an interface of the pretty well understood collections framework. So I do not interact with this class in a more complex way than with any other Collection, as my handle only allows what's defined in the interface. Calling get(0) on a List should not secretly remove the element. So if I trust the other class to be sound and adhere to the contract introduced by inheriting from that interface, I am safe.\nExchanging the underlying class by calling a different constructor allows me to finetune soft requirements like retaining an insert order in case of the LinkedHashSet for the GUI not to jump around and resorting everything randomly as the users adds an element. Other implementations might add thread synchronization or in memory compression of the stored values to reduce my memory footprint. Still from the point of view of my class, I just need a Set or a List. This single word change in the code does not influence how tightly I couple with that class, as I don't access additional methods or member-variables.\n. ",
    "HEm3R": "@romani, commit updated - added documentation for new 'arrayInitIndent' param.\n. +1\n. ",
    "tsjensen": "Very useful suggestion!\n. OK - please close this PR then.\n. ",
    "pulse00": "@isopov fixed.\n. ",
    "alexkravin": "Please provide your Checkstyle configuration, as I tried to reproduce your problem and no such warnings were occurred with default configuration. \n. @romani,\n$ cat checkstyle.xml\n``` xml\n\n\n\n\n\n\n$ cat src/Test.java\npublic class JNIFoo {  \n    @OneToMany(cascade = {CascadeType.ALL}, orphanRemoval = true)\n    public void print () {\n    String str = nativeFoo();\n    System.out.println(str);\n    }\n}\n5.7:\n$ java -jar checkstyle-5.7-all.jar -c checkstyle.xml src/Test.java\nStarting audit...\n/home/asus/Downloads/suptest/src/Test.java:2:42: '}' is not preceded with whitespace.\nAudit done.\n6.2-SNAPSHOT:\n$ java -jar checkstyle-6.2-SNAPSHOT-all.jar -c checkstyle.xml src/Test.java\nStarting audit...\nAudit done.\nYes, I found several commits according to this Check in log in last 6 months, so it was fixed in 6.1.1\n```\n. Moved to proper folder\n. I added pom changes to all branches, where input have to be in new folder, now, after pom is merged, this folder exists and changes look good.\n. Rewrote in another way, anyway there can't be 3 such exceptions in multi-catch as they have to be thrown and there's no need to write complex logic in each try-block as UT checks throwing RuntimeException, this case is saved, notice UT didn't change.\n. Implemented method which throws several exception in this UT, no problems\n. now looks good\n. now it agrees)\n. But test covers case which will never happen, nobody will use Check for checking noncompilable code, lack of package declaration = compiler's error, so, what's the reason?\n. Ok, moved this input to resources-noncompilable\n. There's missing of \"methods extends from TestCase\" in javadoc, it breaks understanding.\nSo, this Check:\nEnsures that the setUp(), tearDown()methods are named correctly,\n- have no arguments, return void and are either public or protected.\n- Also ensures that suite() is named correctly, has no arguments, returns\n- junit.framework.Test, and is public and static.\n  *\n- Rationale: Developers will often misname one or more of these\n- methods and not realise that the method is not being called.\nThere're 3 constants:\n/* setUp() method name. /\n    private static final String SET_UP_METHOD_NAME = \"setUp\";\n    /* tearDown() method name. /\n    private static final String TEAR_DOWN_METHOD_NAME = \"tearDown\";\n    /* suite() method name. /\n    private static final String SUITE_METHOD_NAME = \"suite\";\nCheck subscribes on METHOD_DEF and checks each of 3 methods for public, public and static, return type, number of args.\n. Done in #435 \n. moved to resources-noncompilable folder\n. Also added to commit SemicolonBetweenImports and UT for it\n. I have read, sure my answer will be \"Compiler puts violation\" - Syntax error on token \"Invalid Character\", delete this token.\n. asus@asus-X551MA:~$ cat file.java \npackage com.puppycrawl.tools.checkstyle.grammars;\n/*\n- Input for grammar test.\n  /\n  public class InputGrammar\n  {\n  int \u00c3\u00a9= 1; // illegal, unless UTF-8\n  }\nasus@asus-X551MA:~$ javac file.java \nfile.java:8: error: illegal character: \\169\n    int \u00c3\u00a9= 1; // illegal, unless UTF-8\n           ^\n1 error\nasus@asus-X551MA:~$ java -version\njava version \"1.7.0_65\"\nJava(TM) SE Runtime Environment (build 1.7.0_65-b17)\nJava HotSpot(TM) 64-Bit Server VM (build 24.65-b04, mixed mode)\nfile.java is from UT input\n. your input is compilable\n. Addition about semicolon between imports:\nhttps://bugs.eclipse.org/bugs/show_bug.cgi?id=425140\n. Updated InputGrammar, now compilable\n. Investigated the occurring problem, changed input's encoding to UTF-8 and got rid of errors\n. Moved java8 inputs to resources-noncompilable folder\n. Done\n. Condition moved to else-if clause instead of separate if ( ... ) return;\n. Done, rewrote with simple analyzing on accessory to member of Interface or Annotation def, it's more general\n. Removed ScopeUtils.inInterfaceOrAnnotationBlock(aAST)\n. This PR will be non-compilable until #468 would be merged\n. Pulled changes from master and fixed several compilation and UT problems, most of them was in same naming of types.\n. In this UT every expected line was increased by 1\n. Expected lines shifted by one, as usual\n. Made reports, compared:\n51/guava$ cat current\n[ERROR] ImmutableMultimap.java271:31 GenericWhitespace: '<' is preceded with whitespace.\n[ERROR] ListTestSuiteBuilder.java118:76 GenericWhitespace: '>' is followed by an illegal character.\n[ERROR] MultimapTestSuiteBuilder.java79:59 GenericWhitespace: '>' is followed by whitespace.\n[ERROR] MultimapTestSuiteBuilder.java266:32 GenericWhitespace: '>' is followed by whitespace.\n[ERROR] MultisetTestSuiteBuilder.java256:84 GenericWhitespace: '>' is followed by an illegal character.\n[ERROR] SetTestSuiteBuilder.java88:74 GenericWhitespace: '>' is followed by an illegal character.\n51/guava$ cat update\n[ERROR] ImmutableMultimap.java271:31 GenericWhitespace: '<' is preceded with whitespace.\n[ERROR] ListTestSuiteBuilder.java118:76 GenericWhitespace: '>' is followed by an illegal character.\n[ERROR] MultimapTestSuiteBuilder.java79:59 GenericWhitespace: '>' is followed by whitespace.\n[ERROR] MultimapTestSuiteBuilder.java266:32 GenericWhitespace: '>' is followed by whitespace.\n[ERROR] MultisetTestSuiteBuilder.java256:84 GenericWhitespace: '>' is followed by an illegal character.\n[ERROR] SetTestSuiteBuilder.java88:74 GenericWhitespace: '>' is followed by an illegal character.\n51/guava$ grep -Fxvf current update\n51/guava$\nSo, no diffs here and no violations in both cases on checkstyle project.\nAlso ran google-style-config-test, no diffs from master build were found.\n. Done\n. if I do it - Checkstyle puts violations on each indentation, so such indentation of \"case\" is set by Checkstyle\n. I have found no violations in both cases on Guava & Checkstyle projects.\nAlso ran google-style-config-test, no diffs from master build were found.\n. Updated, now no merging problems\n. Made reports, compared:\n68/guava$ cat current\n[ERROR] Reflection.java92:25 NoWhitespaceAfter: '{' is followed by whitespace.\n[ERROR] Types.java156:27 NoWhitespaceAfter: '{' is followed by whitespace.\n[ERROR] Types.java162:58 NoWhitespaceAfter: '{' is followed by whitespace.\n[ERROR] Types.java167:45 NoWhitespaceAfter: '{' is followed by whitespace.\n[ERROR] Types.java167:72 NoWhitespaceAfter: '{' is followed by whitespace.\n[ERROR] PercentEscaper.java62:44 NoWhitespaceAfter: '{' is followed by whitespace.\n[ERROR] HostAndPort.java225:28 NoWhitespaceAfter: '{' is followed by whitespace.\n[ERROR] HostAndPort.java233:28 NoWhitespaceAfter: '{' is followed by whitespace.\n[ERROR] SimpleTimeLimiter.java192:25 NoWhitespaceAfter: '{' is followed by whitespace.\n[ERROR] ArrayTable.java359:32 NoWhitespaceAfter: '{' is followed by whitespace.\n[ERROR] MapMakerInternalMap.java471:8 NoWhitespaceAfter: '{' is followed by whitespace.\n[ERROR] MapMakerInternalMap.java473:8 NoWhitespaceAfter: '{' is followed by whitespace.\n[ERROR] Files.java236:31 NoWhitespaceAfter: '{' is followed by whitespace.\n68/guava$ cat update\n[ERROR] Reflection.java92:25 NoWhitespaceAfter: '{' is followed by whitespace.\n[ERROR] Types.java156:27 NoWhitespaceAfter: '{' is followed by whitespace.\n[ERROR] Types.java162:58 NoWhitespaceAfter: '{' is followed by whitespace.\n[ERROR] Types.java167:45 NoWhitespaceAfter: '{' is followed by whitespace.\n[ERROR] Types.java167:72 NoWhitespaceAfter: '{' is followed by whitespace.\n[ERROR] PercentEscaper.java62:44 NoWhitespaceAfter: '{' is followed by whitespace.\n[ERROR] HostAndPort.java225:28 NoWhitespaceAfter: '{' is followed by whitespace.\n[ERROR] HostAndPort.java233:28 NoWhitespaceAfter: '{' is followed by whitespace.\n[ERROR] SimpleTimeLimiter.java192:25 NoWhitespaceAfter: '{' is followed by whitespace.\n[ERROR] ArrayTable.java359:32 NoWhitespaceAfter: '{' is followed by whitespace.\n[ERROR] MapMakerInternalMap.java471:8 NoWhitespaceAfter: '{' is followed by whitespace.\n[ERROR] MapMakerInternalMap.java473:8 NoWhitespaceAfter: '{' is followed by whitespace.\n[ERROR] Files.java236:31 NoWhitespaceAfter: '{' is followed by whitespace.\n68/guava$ grep -Fxvf current update\n68/guava$\nNo diffs here and no violations in both cases on checkstyle project.\nAlso ran google-style-config-test, no diffs from master build were found.\n. 1. Done\n2. I have introduced these variables to ease readability, removed now.\n3. I see no need to put comments on blocks such as: \n   if (targetAST.getType() == TokenTypes.TYPECAST) ....\n   if (targetAST.getType() == TokenTypes.ARRAY_DECLARATOR)\nThey describe theirselves\nAdded comment on non-obvious block which analyzes case if possible redundant return is in method def.\nThis block was introduced due to cases, such as:\nint [] getSome() { ... }\nint getSome(params) [] { ... }\nNow Check warns on these cases too\n. Done\n. Oh, didn't notice this block, done\n. 1) Done\n2) Properties table is already updated according to the new option:\nhtml\n<p>\n          To configure the check for files with user-set name separator:\n        </p>\n        <source>\n&lt;module name=&quot;Translation&quot;&gt;\n    &lt;property name=&quot;basenameSeparator&quot; value=&quot;IDENT&quot;/&gt;\n&lt;/module&gt;\n        </source>\n      </subsection>\n. Done\n. 1) Done.\n2) Yes, sure.\n3) Package member it the most suitable: https://docs.oracle.com/javase/tutorial/java/package/usepkgs.html\n4) I have just forgotten about them, added support in code and added UT, sure Check can't warn on defined member of class:\n//mIllegalClassNames = { \"java.util.\" }\nimport java.util.; //violation here\n.\n.\n.\nList<?> list = new LinkedList<>(); // no violation here\n5) If illegal class was imported, I add it's simple name to collection, e.g.:\nimport java.awt.List;\nillegalClasses: \"java.util.List\"\nList l = null; //there will be no violation\n6) Done.\n7) No storing at all now \n. Tried to reimplement JavadocMethodCheck, but there're lots of stuff connected to AbstractTypeAwareCheck (based on it's fields and many methods), as I see no reason to copy-paste source of AbstractTypeAware to JavadocMethod, firstly I marked it with Deprecated annotation.\n. Hope now Travis will be happy.\nCan you be more concrete with \"That implementation is completely inaccurate\"?\n. I receive this message \"/home/travis/build/checkstyle/checkstyle/src/main/java/com/puppycrawl/tools/checkstyle/checks/FinalParametersCheck.java:73:39: Name 'mPrimitiveDataTypes' must match pattern '^[A-Z][A-Z0-9]([A-Z0-9]+)_$'.\" when checkstyle is running on sources on Travis and my local.\n. Updated, removed isArray() checking, but strange problems while report generation, i have configuration:\n``` xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE module PUBLIC \"-//Puppy Crawl//DTD Check Configuration 1.3//EN\" \"http://www.puppycrawl.com/dtds/configuration_1_3.dtd\">\n\n\n\n\n\n\n\n\nBut when I'm doing mvn checkstyle:checkstyle I receive:\ncannot initialize module TreeWalker - Property 'ignorePrimitiveTypes' in module FinalParameters does not exist, please check the documentation\n```\n. report on guava: http://alexkravin.github.io/finalparams/guava/checkstyle.html\nconfiguration:\nxml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE module PUBLIC \"-//Puppy Crawl//DTD Check Configuration 1.3//EN\" \"http://www.puppycrawl.com/dtds/configuration_1_3.dtd\">\n<module name=\"Checker\">\n  <property name=\"charset\" value=\"UTF-8\"/>\n  <module name=\"TreeWalker\">\n    <module name=\"FinalParameters\">\n    <property name=\"ignorePrimitiveTypes\" value=\"true\"/>\n  </module>\n</module>\n</module>\nReport looks bare (without images), but contains lots of information\n. No problems:\nGuava: http://alexkravin.github.io/finalparams/guava/checkstyle.html\nCheckstyle: http://alexkravin.github.io/finalparams/checkstyle/checkstyle.html\nSpring-core: http://alexkravin.github.io/finalparams/Spring-core/checkstyle.html\nAll of them with \"ignorePrimitiveTypes=true\" option\n. As it is unchecked exception.. yes, you're right.. It makes sense to catch it in one place\n. thanks, updated message and removed odd throwing of NPEs.\nAbout 'if aFile is currently null' - I think current condition in 'catch' block covers such possible case\n. This was done according to https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/api/Utils.java#L56\n. See the opened issue.\nIn this example message's text will be shown in any case\n. It's a javadoc, in other Checks there's no such formatting\n. Check does not take care about javadoc\n. Yes, it does not, but to make code more readable I think such wrapping is justified, more convenient than scrolling\n. Ok, you've persuaded me) removed this wrapping\n. Yes, you're right, I think it will be justified to introduce boolean option like ignoreJavadoc\n. I prefer using switch in such cases than else-if\n. Ok, thanks\n. ",
    "glts": ":+1: @kasperhirvikoski, you saved me time.\n. ",
    "softarn": "Root pom\nxml\n                                <plugin>\n                    <artifactId>maven-checkstyle-plugin</artifactId>\n                    <version>2.12.1</version>\n                    <dependencies>\n                        <dependency>\n                            <groupId>com.company</groupId>\n                            <artifactId>build-tools</artifactId>\n                            <version>1.0</version>\n                        </dependency>\n                    </dependencies>\n                    <executions>\n                        <execution>\n                            <id>validate</id>\n                            <phase>install</phase>\n                            <goals>\n                                <goal>checkstyle</goal>\n                            </goals>\n                            <configuration>\n                                <includeTestSourceDirectory>false</includeTestSourceDirectory>\n                                <failsOnError>true</failsOnError>\n                                <consoleOutput>true</consoleOutput>\n                                <configLocation>${project.parent.basedir}/company-build-tools/src/main/resources/checkstyle/checkstyle.xml</configLocation>\n                                <linkXRef>false</linkXRef>\n                                <propertyExpansion>checkstyle-suppression-file=${project.basedir}/checkstyle-suppression.xml</propertyExpansion>\n                            </configuration>\n                        </execution>\n                    </executions>\n                </plugin>\nSubmodule pom\n<profile>\n            <id>all</id>\n            <build>\n                <plugins>\n                    <plugin>\n                        <artifactId>maven-checkstyle-plugin</artifactId>\n                        <executions>\n                            <execution>\n                                <configuration>\n                                    <propertyExpansion>projectDir=${project.basedir </propertyExpansion>\n                                </configuration>\n                                <id>validate</id>\n                                <goals>\n                                    <goal>checkstyle</goal>\n                                </goals>\n                            </execution>\n                        </executions>\n                    </plugin>\n                </plugins>\n            </build>\n        </profile>\n. org.apache.maven.plugins:maven-checkstyle-plugin:2.12.1\norg.apache.maven.lifecycle.LifecycleExecutionException: Failed to execute goal org.apache.maven.plugins:maven-checkstyle-plugin:2.12.1:checkstyle (validate) on project x: An error has occurred in Checkstyle report generation.\n    at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:216)\n    at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153)\n    at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145)\n    at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:108)\n    at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:76)\n    at org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build(SingleThreadedBuilder.java:51)\n    at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:116)\n    at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:361)\n    at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:155)\n    at org.apache.maven.cli.MavenCli.execute(MavenCli.java:584)\n    at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:213)\n    at org.apache.maven.cli.MavenCli.main(MavenCli.java:157)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:606)\n    at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:289)\n    at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:229)\n    at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:415)\n    at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:356)\nCaused by: org.apache.maven.plugin.MojoExecutionException: An error has occurred in Checkstyle report generation.\n    at org.apache.maven.reporting.AbstractMavenReport.execute(AbstractMavenReport.java:131)\n    at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:133)\n    at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:208)\n    ... 19 more\nCaused by: org.apache.maven.reporting.MavenReportException: Failed during checkstyle execution\n    at org.apache.maven.plugin.checkstyle.AbstractCheckstyleReport.executeReport(AbstractCheckstyleReport.java:507)\n    at org.apache.maven.plugin.checkstyle.CheckstyleReport.executeReport(CheckstyleReport.java:156)\n    at org.apache.maven.reporting.AbstractMavenReport.generate(AbstractMavenReport.java:196)\n    at org.apache.maven.reporting.AbstractMavenReport.execute(AbstractMavenReport.java:104)\n    ... 21 more\nCaused by: org.apache.maven.plugin.checkstyle.CheckstyleExecutorException: There are 1 checkstyle errors.\n    at org.apache.maven.plugin.checkstyle.DefaultCheckstyleExecutor.executeCheckstyle(DefaultCheckstyleExecutor.java:245)\n    at org.apache.maven.plugin.checkstyle.AbstractCheckstyleReport.executeReport(AbstractCheckstyleReport.java:488)\n    ... 24 more\n. ",
    "sdumitriu": "Fix available in #274 \n. ",
    "kasper": "Especially useful when providing a dynamic UI for Checkstyle errors.\n. @romani Thanks for the timely response!\n1. We have a custom Test My Code-platform at the Computer Science Department in Helsinki. The platform is a fundamental part of how programming is taught \u2014 it provides students course exercises, tests their implementations and grades their work.\n2. In addition to providing JUnit-test results, we are now integrating code style validations for Java-projects with Checkstyle. We want to be able to change the locale of the validation messages dynamically without the need of restarting the plugin, which requires us to flush the bundle cache.\n3. Check out https://github.com/kesapojat/tmc-checkstyle-runner/blob/master/src/main/java/fi/helsinki/cs/tmc/stylerunner/CheckstyleRunner.java#L61. CheckstyleRunner is called multiple times during the runtime in the Test My Code-plugin for Netbeans (see https://github.com/kesapojat/tmc-netbeans/blob/master/tmc-plugin/src/fi/helsinki/cs/tmc/runners/CheckstyleRunHandler.java#L67).\nAlso the initialisation for the BUNDLE_CACHE states in LocalizedMessage the following:\njava\n/**\n * A cache that maps bundle names to RessourceBundles.\n * Avoids repetitive calls to ResourceBundle.getBundle().\n * TODO: The cache should be cleared at some point.\n */\n. @romani Thanks for the timely response!\n1. We have a custom Test My Code-platform at the Computer Science Department in Helsinki. The platform is a fundamental part of how programming is taught \u2014 it provides students course exercises, tests their implementations and grades their work.\n2. In addition to providing JUnit-test results, we are now integrating code style validations for Java-projects with Checkstyle. We want to be able to change the locale of the validation messages dynamically without the need of restarting the plugin, which requires us to flush the bundle cache.\n3. Check out https://github.com/kesapojat/tmc-checkstyle-runner/blob/master/src/main/java/fi/helsinki/cs/tmc/stylerunner/CheckstyleRunner.java#L61. CheckstyleRunner is called multiple times during the runtime in the Test My Code-plugin for Netbeans (see https://github.com/kesapojat/tmc-netbeans/blob/master/tmc-plugin/src/fi/helsinki/cs/tmc/runners/CheckstyleRunHandler.java#L67).\nAlso the initialisation for the BUNDLE_CACHE states in LocalizedMessage the following:\njava\n/**\n * A cache that maps bundle names to RessourceBundles.\n * Avoids repetitive calls to ResourceBundle.getBundle().\n * TODO: The cache should be cleared at some point.\n */\n. Changing the locale could also clear the bundle as a hook.\n. ",
    "ctmc": ":+1: \n. ",
    "kennyhei": "This is genius, you have my support.\n. ",
    "daveagp": "Thanks for the quick reply!\nI'll see if they can accommodate this although I think it may cause false positives since what it compiles to looks the same as sum = (int)(sum + 4.2);\n. ",
    "jakubneubauer": "I found something that looks similar in Sonar: https://jira.codehaus.org/browse/SONAR-1115\nHere is how they solved it: http://grepcode.com/file/repo1.maven.org/maven2/org.codehaus.sonar.plugins/sonar-core-plugin/2.4.1/org/sonar/plugins/core/batch/ExcludedResourceFilter.java#ExcludedResourceFilter.isIgnored%28org.sonar.api.resources.Resource%29\n. ",
    "coveralls": "\nCoverage remained the same when pulling fcb47f13dc5876474d9cbf9c3f5e8949b0d67887 on isopov:compilable-inputs into 3994e36e8d25c3e5bc8570d371fc73b1467cf80c on checkstyle:master.\n. \nCoverage increased (+0.0%) when pulling d07e82b253b8df1cc74e8e334d08522f8ed0791f on isopov:gh-47 into 7614f726f9fc398468be154d1d8a3f61ea833728 on checkstyle:master.\n. \nCoverage decreased (-0.01%) when pulling dcd4e9148cb143f9c4143cd1c5f72d70ef86c681 on isopov:gh-47 into 6cd89ebebaec931a33ffde42b295eb6a20dc07e1 on checkstyle:master.\n. \nCoverage increased (+0.06%) when pulling 5757534831dcb08d7d124b92eb31ab81bd6261ea on vlsi:import_order_improvements into 6cd89ebebaec931a33ffde42b295eb6a20dc07e1 on checkstyle:master.\n. \nCoverage increased (+0.02%) when pulling b8fd37660bbd3a9a0be5f8ed0c05c8a093e58f87 on maxvetrenko:WhitespaceAroundUpdate into dcd4e9148cb143f9c4143cd1c5f72d70ef86c681 on checkstyle:master.\n. \nCoverage increased (+0.02%) when pulling b8fd37660bbd3a9a0be5f8ed0c05c8a093e58f87 on maxvetrenko:WhitespaceAroundUpdate into dcd4e9148cb143f9c4143cd1c5f72d70ef86c681 on checkstyle:master.\n. \nCoverage remained the same when pulling f0f5f643b2e2a07f6367eeffd2fcf5913e4a45bb on dominic-jones:suppress-on-annotation-def into dcd4e9148cb143f9c4143cd1c5f72d70ef86c681 on checkstyle:master.\n. \nCoverage increased (+0.04%) when pulling e5257777e8d9095fca3b225753fc213ea66977f4 on dominic-jones:suppress-on-annotation-def into dcd4e9148cb143f9c4143cd1c5f72d70ef86c681 on checkstyle:master.\n. \nCoverage increased (+0.02%) when pulling 03683a794777ed30076faa683fb899bdf601f3c4 on maroontress:master into dcd4e9148cb143f9c4143cd1c5f72d70ef86c681 on checkstyle:master.\n. \nCoverage increased (+0.02%) when pulling 8c1b62313ffba68c246e61820a904edbf3c61335 on maroontress:master into ca378826ea19eca07fcaa554ec17fe703e146936 on checkstyle:master.\n. \nCoverage increased (+0.02%) when pulling b8fd37660bbd3a9a0be5f8ed0c05c8a093e58f87 on maxvetrenko:WhitespaceAroundUpdate into dcd4e9148cb143f9c4143cd1c5f72d70ef86c681 on checkstyle:master.\n. \nCoverage increased (+0.02%) when pulling 02f2313262631bca13251e586666ae2db5d1ee31 on maxvetrenko:WhitespaceAroundUpdate into dcd4e9148cb143f9c4143cd1c5f72d70ef86c681 on checkstyle:master.\n. \nCoverage increased (+0.01%) when pulling 27442c37bedc44d7c22a73b1a78c8f56ae919d89 on maxvetrenko:LineWrap into dcd4e9148cb143f9c4143cd1c5f72d70ef86c681 on checkstyle:master.\n. \nCoverage increased (+0.0%) when pulling 7dc94ba7ab9a4e330c088e0fbbd441f78628edb0 on tobiasbaum:master into 55c2560774f0624afeae9e6c29fd19ae59e8c24b on checkstyle:master.\n. \nCoverage increased (+0.01%) when pulling a839e2a2fefc4564d08407eece6ffec75d339ed4 on maxvetrenko:SeparatorWrap into ca378826ea19eca07fcaa554ec17fe703e146936 on checkstyle:master.\n. \nCoverage increased (+0.01%) when pulling b3f8d9ba97b9f2f3e61a18443bbd14405a3730b5 on maxvetrenko:SeparatorWrap into 8c1b62313ffba68c246e61820a904edbf3c61335 on checkstyle:master.\n. \nCoverage increased (+0.02%) when pulling d8d6ed2fdf709a1d794c7a7edfcc88f51ef8bfd2 on peteroupc:master into ca378826ea19eca07fcaa554ec17fe703e146936 on checkstyle:master.\n. \nCoverage increased (+0.02%) when pulling 5091339d8fa0445135448e98bcf5f782e053f572 on peteroupc:master into ca378826ea19eca07fcaa554ec17fe703e146936 on checkstyle:master.\n. \nCoverage increased (+0.01%) when pulling f5e3577d44773f974a5a90b9a72e62471476fe0f on maxvetrenko:RightCurlyUpdate into ca378826ea19eca07fcaa554ec17fe703e146936 on checkstyle:master.\n. \nCoverage increased (+0.01%) when pulling 2280c715479276a7348bb11132a569f3c4117590 on maxvetrenko:RightCurlyUpdate into 8c1b62313ffba68c246e61820a904edbf3c61335 on checkstyle:master.\n. \nCoverage increased (+0.01%) when pulling a9dc70d7e22c059100ed98f00e437b4f78e17697 on maxvetrenko:RightCurlyUpdate into 8c1b62313ffba68c246e61820a904edbf3c61335 on checkstyle:master.\n. \nCoverage increased (+0.01%) when pulling d355bb838fe80cdbcdcea4adea8b5780ce313ad6 on maxvetrenko:RightCurlyUpdate into d9452c8d5e2cffcad33fbf763db8473fcbb42eab on checkstyle:master.\n. \nCoverage increased (+0.0%) when pulling 902fa7302c8c2316908273a14c0bd4f1ca60b5d6 on kutzi:Utils-threadSafe into 8c1b62313ffba68c246e61820a904edbf3c61335 on checkstyle:master.\n. \nCoverage increased (+0.01%) when pulling 1cf5a7fce7d72737a624752bd2108645d9d17b13 on maroontress:enhance-enumconstantnamecheck into 8c1b62313ffba68c246e61820a904edbf3c61335 on checkstyle:master.\n. \nCoverage increased (+0.02%) when pulling 5a3c61fadbc867ca3063e9099a1c4bbd7047d2da on maxvetrenko:EmptyLineSeparatorCheck into 8c1b62313ffba68c246e61820a904edbf3c61335 on checkstyle:master.\n. \nCoverage increased (+0.19%) when pulling f7894086962ca658d44ddb62cae0cfcbaf9ac5e4 on baratali:phase1 into 8c1b62313ffba68c246e61820a904edbf3c61335 on checkstyle:master.\n. \nCoverage increased (+0.19%) when pulling f4cfaa346fb010220f3b62bd28a948194889b4a7 on baratali:phase1 into d9452c8d5e2cffcad33fbf763db8473fcbb42eab on checkstyle:master.\n. \nCoverage increased (+0.19%) when pulling fe7c76b30bff0b8750e316b58495be479dd5fdb0 on baratali:phase1 into d9452c8d5e2cffcad33fbf763db8473fcbb42eab on checkstyle:master.\n. \nCoverage increased (+0.19%) when pulling 4584f48e6904590ec2322222fcec13071cccf9bd on baratali:phase1 into a0012d03eb6a7ebc42f1986f09a8fe698c09eeb0 on checkstyle:master.\n. \nCoverage increased (+0.17%) when pulling 0d7814b53e9b201f68707a59b5db7a2dc760580f on baratali:phase1 into a4ff027c9cd0a6467884a9599d3839fda580d23f on checkstyle:master.\n. \nCoverage remained the same when pulling af8d57317fd308e72ab9041200df10506b96870f on maxvetrenko:EmptyBlockUpdate into d9452c8d5e2cffcad33fbf763db8473fcbb42eab on checkstyle:master.\n. \nCoverage increased (+0.01%) when pulling 42e5bd27142c0e6dd6aabcecedfd732407e61c77 on maxvetrenko:LocalVariableNameUpdate into d9452c8d5e2cffcad33fbf763db8473fcbb42eab on checkstyle:master.\n. \nCoverage increased (+0.01%) when pulling 42e5bd27142c0e6dd6aabcecedfd732407e61c77 on maxvetrenko:LocalVariableNameUpdate into d9452c8d5e2cffcad33fbf763db8473fcbb42eab on checkstyle:master.\n. \nCoverage increased (+0.04%) when pulling 5bc4b3a8e76cd64cd0c070d1cc7297b5a14fccb0 on maxvetrenko:ForbidEscapedUnicodeCharactersCheck into 32ca737edcd6f6a2a1e55f0b4ffcef6cce511812 on checkstyle:master.\n. \nCoverage remained the same when pulling b095a6066f23dd8b44a9d10f2282e8ccc8fec984 on maxvetrenko:WhitespaceAroundBug into 244d240507a6edd77a3462d99d932d8b1b72c660 on checkstyle:master.\n. \nCoverage remained the same when pulling dfb851e673a879120c80caca7167de3e5c3aa662 on baratali:fixJavadoc into f80a6c9d893087f57845a60f423964950bccedbf on checkstyle:master.\n. \nCoverage remained the same when pulling 522a6b31b62d65bf5f8eb051107bbf3223fa32c5 on maxvetrenko:WhitespaceAroundAnonymous into dfb851e673a879120c80caca7167de3e5c3aa662 on checkstyle:master.\n. \nCoverage increased (+0.01%) when pulling 023b564417ff157c7333acc2f04b6ddba289c463 on sabaka:iss165 into 522a6b31b62d65bf5f8eb051107bbf3223fa32c5 on checkstyle:master.\n. \nCoverage increased (+0.05%) when pulling 4fdb129f6b7e83ab2c5ee8954bcebc3a748c6138 on maxvetrenko:AvoidUnicodeUpdate into f84b3c3495c6de14eb0b99de1eeecbb74a4da2b1 on checkstyle:master.\n. \nCoverage increased (+0.07%) when pulling 1dfafcd19d7ec6e0f8c0e7df943474ee9d8a291b on maxvetrenko:AvoidUnicodeUpdate into f84b3c3495c6de14eb0b99de1eeecbb74a4da2b1 on checkstyle:master.\n. \nCoverage increased (+0.02%) when pulling a10a2e534ffa23a8075beaa62712fc0b50a06c33 on maxvetrenko:AvoidUnicodeUpdate into 001d9cc2131faaadb4e6fd13e2bb8fef6be09f60 on checkstyle:master.\n. \nCoverage increased (+0.02%) when pulling 0d941d1599ef2ea8eb9b37c2e48c69005505b0c1 on maxvetrenko:AvoidUnicodeUpdate into 592d5d86b9cedfa04ad9990d23b244414aaad685 on checkstyle:master.\n. \nCoverage increased (+0.02%) when pulling 828f648d7ce46df750bc4872f13d130aa3872a20 on maxvetrenko:AvoidUnicodeUpdate into 592d5d86b9cedfa04ad9990d23b244414aaad685 on checkstyle:master.\n. \nCoverage increased (+0.02%) when pulling 1f2a4a5c24992048a29fe69afef129e15b85d1bf on maxvetrenko:AvoidUnicodeUpdate into c4e886312aae13b6cfadceed25b1b8aec18d4a96 on checkstyle:master.\n. \nCoverage increased (+0.02%) when pulling 2012b91708b024afdc3e784f5cf3014c3134537f on maxvetrenko:AvoidUnicodeUpdate into c4e886312aae13b6cfadceed25b1b8aec18d4a96 on checkstyle:master.\n. \nCoverage increased (+0.02%) when pulling 536aa163ffe1ec0350b36b03675650cd4e053735 on maxvetrenko:AvoidUnicodeUpdate into 3a51c61b4aa4b8feaa7eae8648a28d94d62bab0c on checkstyle:master.\n. \nCoverage increased (+0.07%) when pulling 1d77f65b287dd4f2c94a101a18a2275364ad8b29 on yudindi:master into f84b3c3495c6de14eb0b99de1eeecbb74a4da2b1 on checkstyle:master.\n. \nCoverage increased (+0.07%) when pulling a6d5a19084d469264253f1b6ceb6919db579237c on yudindi:master into f84b3c3495c6de14eb0b99de1eeecbb74a4da2b1 on checkstyle:master.\n. \nCoverage increased (+0.0%) when pulling f75b9bfab0aa902e810238e892c6fa397e97f836 on maxvetrenko:EmptyLineSeparatorUpdate into 001d9cc2131faaadb4e6fd13e2bb8fef6be09f60 on checkstyle:master.\n. \nCoverage increased (+0.19%) when pulling 39fc7b7a8715bb8ea5cbcbe93d46ad0cd294f15b on maxvetrenko:VariableDeclarationUsageDistanceCheck into 592d5d86b9cedfa04ad9990d23b244414aaad685 on checkstyle:master.\n. \nCoverage increased (+0.0%) when pulling 03f180c9f2a0350a9851d449af550dd50c3d95fa on maxvetrenko:OverrideMethodsDeclarationOrder into 592d5d86b9cedfa04ad9990d23b244414aaad685 on checkstyle:master.\n. \nCoverage increased (+0.0%) when pulling 03f180c9f2a0350a9851d449af550dd50c3d95fa on maxvetrenko:OverrideMethodsDeclarationOrder into 592d5d86b9cedfa04ad9990d23b244414aaad685 on checkstyle:master.\n. \nCoverage increased (+0.01%) when pulling 3a51c61b4aa4b8feaa7eae8648a28d94d62bab0c on maxvetrenko:OverrideMethodsDeclarationOrder into c4e886312aae13b6cfadceed25b1b8aec18d4a96 on checkstyle:master.\n. \nCoverage remained the same when pulling 2a883201d43660034888d5b8a164de4689d398e5 on sabaka:gsoc into 3a51c61b4aa4b8feaa7eae8648a28d94d62bab0c on checkstyle:master.\n. \nCoverage remained the same when pulling 2a883201d43660034888d5b8a164de4689d398e5 on sabaka:gsoc into 3a51c61b4aa4b8feaa7eae8648a28d94d62bab0c on checkstyle:master.\n. \nCoverage decreased (-0.06%) when pulling 33bdc2b14f10410a2647751c2047b1ed83174d8e on sabaka:gsoc into 4e213f5a0d153f694f4ebc028dcd8e80dbdbfd13 on checkstyle:master.\n. \nCoverage decreased (-0.06%) when pulling 6bbb2838ca3a634bbd39fc5260cf7b73478dcefe on sabaka:gsoc into f43e7ca4cad1a299768742ff895a0547344e4ab1 on checkstyle:master.\n. \nCoverage decreased (-0.06%) when pulling 1333765b04e138bdbc394aa30f04b8f08ee8fb17 on sabaka:gsoc into f43e7ca4cad1a299768742ff895a0547344e4ab1 on checkstyle:master.\n. \nCoverage decreased (-0.06%) when pulling ad0df4d315131c977e4a4bf1e2edf02cd3a191f5 on sabaka:gsoc into a4e79cf45cf1c2cdf6d598e475f22e4967029d77 on checkstyle:master.\n. \nCoverage remained the same when pulling f2ccdda72dc90eab9935bf09cf3122421cc8f1cf on sabaka:gsoc into a4e79cf45cf1c2cdf6d598e475f22e4967029d77 on checkstyle:master.\n. \nCoverage increased (+0.0%) when pulling 2685c8ecd5ab4b53d3e9477763e6986eea3ea389 on sabaka:gsoc into a4e79cf45cf1c2cdf6d598e475f22e4967029d77 on checkstyle:master.\n. \nCoverage decreased (-0.01%) when pulling 90c392d6da6c697001ff970bb5a2d6a8ab8367dc on sabaka:gsoc into a4e79cf45cf1c2cdf6d598e475f22e4967029d77 on checkstyle:master.\n. \nCoverage decreased (-0.01%) when pulling 90c392d6da6c697001ff970bb5a2d6a8ab8367dc on sabaka:gsoc into a4e79cf45cf1c2cdf6d598e475f22e4967029d77 on checkstyle:master.\n. \nCoverage decreased (-0.01%) when pulling 29fd271ecbaee684662d40dc06ba408b76c58402 on sabaka:gsoc into a4e79cf45cf1c2cdf6d598e475f22e4967029d77 on checkstyle:master.\n. \nCoverage increased (+0.0%) when pulling dcef0fe5cba9a51905cc5f674dee25d1a2e7f56d on sabaka:gsoc into 06874619ba1883d0dc56a8106e27d8ed84c37935 on checkstyle:master.\n. \nCoverage increased (+0.03%) when pulling cec50f8c7054af6f8aaa89a2a619cfc438ac9063 on sabaka:gsoc into 95f3a800716d3820e82fee59fc77eb47afca08e2 on checkstyle:master.\n. \nCoverage remained the same when pulling 5bacc8c703d4c3230288c7da0aff586b20323e98 on tsjensen:master into 39f40e57858c8a5c6310bf35e6649b03188b6996 on checkstyle:master.\n. \nCoverage remained the same when pulling d974beda9ab4ef02b9c577595107d4879fd2ec17 on tsjensen:master into 39f40e57858c8a5c6310bf35e6649b03188b6996 on checkstyle:master.\n. \nCoverage increased (+0.01%) when pulling cddb98c773674500354c8ae32ecda9cd92167c40 on maxvetrenko:EmptyLineSeparatorUpdate into 39f40e57858c8a5c6310bf35e6649b03188b6996 on checkstyle:master.\n. \nCoverage increased (+0.01%) when pulling 8b687f4d4712b44d445a68fb70d8dc75d18ab2cc on maxvetrenko:EmptyLineSeparatorUpdate into 39f40e57858c8a5c6310bf35e6649b03188b6996 on checkstyle:master.\n. \nCoverage remained the same when pulling 9df793347fdd91c00e774d510b3f5cdedc196292 on brutall:master into dba14abb63aaee2405d2c1f2ab0f54aed95b89b8 on checkstyle:master.\n. \nCoverage increased (+0.1%) when pulling 921a4ccdda05e965c5e620217ad44cc918d411d0 on maxvetrenko:CustomImportOrder into ce01a253b036bc00d1849ce4bda304c7e5c7a341 on checkstyle:master.\n. \nCoverage increased (+0.1%) when pulling 2a3be6769c4a97d090970ed52ca2333cb9aea706 on maxvetrenko:CustomImportOrder into ce01a253b036bc00d1849ce4bda304c7e5c7a341 on checkstyle:master.\n. \nCoverage increased (+0.1%) when pulling 2a3be6769c4a97d090970ed52ca2333cb9aea706 on maxvetrenko:CustomImportOrder into ce01a253b036bc00d1849ce4bda304c7e5c7a341 on checkstyle:master.\n. \nCoverage remained the same when pulling 91e7df2c4b5c5488f853713c21371094c20ccdbf on brutall:master into ce01a253b036bc00d1849ce4bda304c7e5c7a341 on checkstyle:master.\n. \nCoverage increased (+0.15%) when pulling 91e7df2c4b5c5488f853713c21371094c20ccdbf on brutall:master into ce01a253b036bc00d1849ce4bda304c7e5c7a341 on checkstyle:master.\n. \nCoverage increased (+0.02%) when pulling d1650f2270b3154ad78289d696bdb831e0d8d50c on maxvetrenko:EmptyBlockUpdate into ce01a253b036bc00d1849ce4bda304c7e5c7a341 on checkstyle:master.\n. \nCoverage increased (+0.02%) when pulling dee147ac85a7db90dcc84c3895b78115c7012e6a on maxvetrenko:EmptyBlockUpdate into 2a3be6769c4a97d090970ed52ca2333cb9aea706 on checkstyle:master.\n. \nCoverage remained the same when pulling b253c1167bed538e4ec5b9d9172da3b30651f262 on maxvetrenko:WhitespaceAroundUpdate into 2a3be6769c4a97d090970ed52ca2333cb9aea706 on checkstyle:master.\n. \nCoverage increased (+0.0%) when pulling 6735d248e4e0151500b4255978aeaa048353fb83 on maxvetrenko:VariableDeclarationUsageDistanceUpdate into 2a3be6769c4a97d090970ed52ca2333cb9aea706 on checkstyle:master.\n. \nCoverage increased (+0.0%) when pulling 6735d248e4e0151500b4255978aeaa048353fb83 on maxvetrenko:VariableDeclarationUsageDistanceUpdate into 2a3be6769c4a97d090970ed52ca2333cb9aea706 on checkstyle:master.\n. \nCoverage decreased (-0.0%) when pulling fba5f1c3a62d149ca8bae6de546089d2c9468a44 on maxvetrenko:AbbreviationAsWordInNameFix into 2a3be6769c4a97d090970ed52ca2333cb9aea706 on checkstyle:master.\n. \nCoverage decreased (-0.0%) when pulling fb1407c204a960223f78ec8429a5581773e5578b on maxvetrenko:AbbreviationAsWordInNameFix into 2a3be6769c4a97d090970ed52ca2333cb9aea706 on checkstyle:master.\n. \nCoverage decreased (-0.0%) when pulling fb1407c204a960223f78ec8429a5581773e5578b on maxvetrenko:AbbreviationAsWordInNameFix into 2a3be6769c4a97d090970ed52ca2333cb9aea706 on checkstyle:master.\n. \nCoverage increased (+0.01%) when pulling 78ccdd54ce953c433981052246e95008531f21d2 on baratali:fixJavadocComments into a0012d03eb6a7ebc42f1986f09a8fe698c09eeb0 on checkstyle:master.\n. \nCoverage increased (+0.02%) when pulling 57def8f2beea03f896ceff0d57b72f4a5355a2a2 on maxvetrenko:MemberNameCheck into a0012d03eb6a7ebc42f1986f09a8fe698c09eeb0 on checkstyle:master.\n. \nCoverage increased (+0.0%) when pulling 6f6179fb52b2a104adc1c60bf92f8bdf3818255a on maxvetrenko:OuterTypeFilenameCheckUpdate into 2628fc197d9b12bb03324c46478ef840166cc075 on checkstyle:master.\n. \nCoverage increased (+0.02%) when pulling 74fb2348caae2be134a87cfb540aec0f4db496d8 on maxvetrenko:LeftCurlyUpdate into 2628fc197d9b12bb03324c46478ef840166cc075 on checkstyle:master.\n. \nCoverage increased (+0.02%) when pulling 7172bdf9067793582f4a8041033f471c01e53070 on maxvetrenko:RightCurlyUpdate into a123763c92761d644fed6010c05ff01cece025ae on checkstyle:master.\n. \nCoverage increased (+0.01%) when pulling cbfaf4458aae17df622422c2d03b679dfdf170dc on maxvetrenko:RightCurlyUpdate into a123763c92761d644fed6010c05ff01cece025ae on checkstyle:master.\n. \nCoverage increased (+0.01%) when pulling a9a352417566cd44e8b3186af1ea3d0e27652cbd on maxvetrenko:RightCurlyUpdate into a123763c92761d644fed6010c05ff01cece025ae on checkstyle:master.\n. \nCoverage increased (+0.01%) when pulling 29c7d5916101179a0016ab14ffc97b8bc518de74 on maxvetrenko:RightCurlyUpdate into a123763c92761d644fed6010c05ff01cece025ae on checkstyle:master.\n. \nCoverage increased (+0.02%) when pulling 12a1aec08012575b94c262d2b825a439bd69fde3 on maxvetrenko:RightCurlyUpdate into a123763c92761d644fed6010c05ff01cece025ae on checkstyle:master.\n. \nCoverage remained the same when pulling c2eca334ea68d9445d20264c9ea3c641d29124bc on tsjensen:dox2 into a123763c92761d644fed6010c05ff01cece025ae on checkstyle:master.\n. \nCoverage increased (+0.02%) when pulling f28353dd163d1720046e3bc558a3a835e0708c0a on tsjensen:fnregex into 4e213f5a0d153f694f4ebc028dcd8e80dbdbfd13 on checkstyle:master.\n. \nCoverage remained the same when pulling fc3c0b6df3e8d6e40399b53f77eb9eeb637904bc on tsjensen:dox3 into 4e213f5a0d153f694f4ebc028dcd8e80dbdbfd13 on checkstyle:master.\n. \nCoverage increased (+0.01%) when pulling 1432d3a5d03392aa098679fe39fd3ea057496e24 on wigbam:master into fc3c0b6df3e8d6e40399b53f77eb9eeb637904bc on checkstyle:master.\n. \nCoverage increased (+0.01%) when pulling 396d950b797a865df020751480fc72c95b056591 on wigbam:master into fc3c0b6df3e8d6e40399b53f77eb9eeb637904bc on checkstyle:master.\n. \nCoverage increased (+0.01%) when pulling bd972977415103a7a8e25e5764f02d5527f4079b on wigbam:master into fc3c0b6df3e8d6e40399b53f77eb9eeb637904bc on checkstyle:master.\n. \nCoverage remained the same when pulling 037470c856101bc06158d1af0a5fb1d1ec4816dd on maxvetrenko:GoogleJavaStyleConfig into fc3c0b6df3e8d6e40399b53f77eb9eeb637904bc on checkstyle:master.\n. \nCoverage remained the same when pulling 92a85d0df4cb106d1db8efb63ba07ad9b73af035 on maxvetrenko:GoogleJavaStyleConfig into f632a5e318684b222cff546e84ca0bb7b474187d on checkstyle:master.\n. \nCoverage remained the same when pulling 00a07be60f7c1ff992ff610d5ffd1e81cea3d600 on maxvetrenko:GenericWhitespaceUpdate into fc3c0b6df3e8d6e40399b53f77eb9eeb637904bc on checkstyle:master.\n. \nCoverage remained the same when pulling d62cc1b847d058b5418c0c50e10310ea8dfed64e on maxvetrenko:GenericWhitespaceUpdate into fc3c0b6df3e8d6e40399b53f77eb9eeb637904bc on checkstyle:master.\n. \nCoverage remained the same when pulling 46befb02d93e15f9b53e26483cb8354e9053aaec on maxvetrenko:GenericWhitespaceUpdate into fc3c0b6df3e8d6e40399b53f77eb9eeb637904bc on checkstyle:master.\n. \nCoverage remained the same when pulling f632a5e318684b222cff546e84ca0bb7b474187d on maxvetrenko:GenericWhitespaceUpdate into fc3c0b6df3e8d6e40399b53f77eb9eeb637904bc on checkstyle:master.\n. \nCoverage remained the same when pulling 64668f891c2de7644db3b46ee2e9e75787b2d55f on maxvetrenko:wikiUpdate into 68e25e0ef90d07b70939e3f721d1995c73c9fd5c on checkstyle:master.\n. \nCoverage decreased (-0.02%) when pulling 66c017820a4bc10d3f2a6d30b4fec00c2567b030 on maxvetrenko:wikiUpdate into 68e25e0ef90d07b70939e3f721d1995c73c9fd5c on checkstyle:master.\n. \nCoverage remained the same when pulling 66c017820a4bc10d3f2a6d30b4fec00c2567b030 on maxvetrenko:wikiUpdate into 68e25e0ef90d07b70939e3f721d1995c73c9fd5c on checkstyle:master.\n. \nCoverage remained the same when pulling 9e14ce3c3014b02aa45f8fd25a8375642ef2e1aa on maxvetrenko:wikiPage into 68e25e0ef90d07b70939e3f721d1995c73c9fd5c on checkstyle:master.\n. \nCoverage remained the same when pulling a14db39aab7e9ed5017cd6f979ddd5e8f469a663 on maxvetrenko:wikiPage into 8a918c58310cca1e591f442f249eb85c27adf46f on checkstyle:master.\n. \nCoverage decreased (-0.08%) when pulling bb43ff2afd51d0cb90af12ae17825ba312e83ce4 on maxvetrenko:wikiPage into 8a918c58310cca1e591f442f249eb85c27adf46f on checkstyle:master.\n. \nCoverage remained the same when pulling d875f973c330769bfba82438a0b8f1b5762f6788 on ychulovskyy:master into f768a8f8cca599d460e3c2da5369add062b6ead0 on checkstyle:master.\n. \nCoverage increased (+0.01%) when pulling 937cc9d7295797827e072a570dbafdd8c00d52b4 on sdumitriu:issue-155 into 08ea556aed8265d64a5dd93963b1ce4587cc48b4 on checkstyle:master.\n. \nCoverage increased (+0.0%) when pulling 648535be82dea008d2b164936223304ae9dc4287 on sdumitriu:issue-155 into 08ea556aed8265d64a5dd93963b1ce4587cc48b4 on checkstyle:master.\n. \nCoverage increased (+0.0%) when pulling ced7c17e6e61507584e0d903152fcc514d2e7b86 on sdumitriu:issue-155 into 08ea556aed8265d64a5dd93963b1ce4587cc48b4 on checkstyle:master.\n. \nCoverage decreased (-0.01%) when pulling 6b1c3e4236cee99404967d46604ef51e9ef97cb6 on sdumitriu:issue-278 into 08ea556aed8265d64a5dd93963b1ce4587cc48b4 on checkstyle:master.\n. \nCoverage increased (+0.0%) when pulling 8f965b91451e990c2a7848aef8c9dd318fd950a8 on ychulovskyy:issue-29 into 08ea556aed8265d64a5dd93963b1ce4587cc48b4 on checkstyle:master.\n. \nCoverage decreased (-0.02%) when pulling ca67f27777fb1ccb866d1d86f064d11df973912a on ychulovskyy:issue-98 into 288eeab70caad503016924442fc9f7261fd258cb on checkstyle:master.\n. \nCoverage decreased (-0.01%) when pulling 0b65922853dd24191ee7e15d48bf44734f65b1c3 on ychulovskyy:issue-98 into 288eeab70caad503016924442fc9f7261fd258cb on checkstyle:master.\n. \nCoverage remained the same when pulling 615c6f26cd0e2d9b9fc87c5be869b1a88943af85 on ychulovskyy:fixed-javadoc-issues into f43e7ca4cad1a299768742ff895a0547344e4ab1 on checkstyle:master.\n. \nCoverage remained the same when pulling 615c6f26cd0e2d9b9fc87c5be869b1a88943af85 on ychulovskyy:fixed-javadoc-issues into f43e7ca4cad1a299768742ff895a0547344e4ab1 on checkstyle:master.\n. \nCoverage decreased (-0.01%) when pulling 7ed40712524e077caac2f7fcfc6cba94bbd13b40 on ychulovskyy:issue-98-squashed into a4e79cf45cf1c2cdf6d598e475f22e4967029d77 on checkstyle:master.\n. \nCoverage decreased (-0.01%) when pulling 4a5a26b5ae38f8623d4c0845c0c577468d0ee3d7 on ychulovskyy:issue-98-squashed into a4e79cf45cf1c2cdf6d598e475f22e4967029d77 on checkstyle:master.\n. \nCoverage remained the same when pulling 482a1069995346f46dc4308765b60c7289628cd4 on janschaefer:master into 58e1308caa82ff911d28b4c7471278cdca8c2d43 on checkstyle:master.\n. \nCoverage decreased (-0.04%) when pulling 50cb3099f0a12f2141d7c12971394e3a93342b9e on maxvetrenko:AnnotationLocation into 3bd25d71c993420cfeb4782530882d1cdb620fca on checkstyle:master.\n. ",
    "maxvetrenko": "@romani All is well \n. @romani , was updated Javadoc, xdoc.\n. @romani I don't see any reason in this option. Why anonymous classes are so specific? Why we have to make one option for all types (classes, enums, interfaces etc) allowEmptyTypes and single option allowEmptyAnonymousClasses for anonymous classes? I don't agree with it. Let's have a Skype call. \n. @romani https://sourceforge.net/p/checkstyle/feature-requests/528/ done\n. https://github.com/checkstyle/checkstyle/commit/d4c8bd11ed1f32078a49cd3750fb81df21a17f40 \nAlready resolved. \n. This bug is already resolved. Please, close it on SF. \n. @romani , I don't understand why build failed. On my PC all successfully passed. \n. @romani fixed. \n. @romani \n\n\nI do not understand why that check do violation on that line.\n\n\nit's not a control char, so it's incorrect case. \n\n\nwhat is a reason for calling method \"countMatches\" and ignoring it's return value.\n\n\nFixed\n. > > http://en.wiktionary.org/wiki/Appendix:Control_characters search for \"85\" (second occurrence)\n\n\nfrom Check code \"...|00[8-9][0-1A-Fa-f]|..\" =???= \"0085\"\ncall me in skype.\n\n\nIt's my fault. Fixed. \n. @rdiachenko \n\n\nI don't understand your logic. Why do you give a warning if there is an empty line before the package declaration? It should be vice versa.\n\n\nFixed\n\n\nPlease add a test case if a class is in the default package and it has a header:\n\n\nDone\n\n\nChecks if a token has a blank line before.\n\n\nDone\n\n\na) magic number\nb) are there any other way to get a previous line?\n\n\na) I can't invent any name for this number. \nb) There is no other way to get previous empty line. \n. @romani Done\n. @romani done\n. @romani fixed.\n. @romani \n\n\nplease fix broken indentation in examples, comments should be on the same position to ease reading\n\n\nDone. \n. @rdiachenko \nThese rules doesn't use in Guava lib. They count indentation form the first node on the line, for example: \nhttp://maxvetrenko.github.io/xref/com/google/common/collect/ImmutableSet.html#L393\nFrom Guava: \nif (object == this) {\n  return true;\n} else if (object instanceof ImmutableSet\n    && isHashCodeFast()\n    && ((ImmutableSet) object).isHashCodeFast()\n    && hashCode() != object.hashCode()) {\n  return false;\n}\ncommand line to detect:\nguava-libraries-17-0/guava/src [master|\u2714] $ grep -R \"} else if (\" . | grep -Ev \"{$\"\n. @romani \n\n\nplease rename to allowSamelineMultipleAnnotations\n\n\nFixed\n\n\nfix typo , should be \".....Parameterless....\"\n\n\nFixed\nAdded Javadoc, xdoc, updated google_style.xml.\n. Fixed. Updated config_javadoc.xml, coverage, google_checks.xml.\nHTML: http://maxvetrenko.github.io/singleline.html\n. @romani , I think,that it might be more resonable to implement a new Check, because now IndentationCheck is extremly hard module with a lot of validations and I don't like an idea to make it more difficult. Let's discuss it today via Skype. \n. Fixed. Report: http://maxvetrenko.github.io/paragraph.html\n. @asheldon, fixed. Thank you for being so attentive. \n. @liutikas, your note is in progress and it will be resolved asap.\n. @alexkravin , such package is called unnamed package or default package. You can read about it in Oracle docs.\n. @romani, my fault, fixed: https://github.com/checkstyle/checkstyle/pull/445\n. @romani , conflict resolved, .checkstyle removed. \n. ",
    "dominic-jones": "No additional unit tests added. The existing test appears to be one mega test that hits all the cases in one go. Test data has been updated for this check so as to reveal the NPE (if executed without the fix). \nThe test itself hardwires several expected line locations to be reported for various existing checkstyle failures. These have been updated to reflect their new location in the file.\n. Any further movement on this? Is there more required, or lost in the busy pile? :)\n. ",
    "maroontress-tomohisa": "Thank you for your quick reply.\nI rebased my code, and moved the changes for passing mvn verify to the separate commit.\n. I'm sorry. I didn't know the EnumValueNameCheck within sevntu-checkstyle. Please reject my request.\n. Thank you for the information. I'm looking forward to it.\n. ",
    "tobiasbaum": "Adding checks to FindBugs is much harder, and some checks (like Javadoc) are not possible because FindBugs relies on the bytecode only. I have no experience with PMD because so far the combination of FindBugs and Checkstyle satisfied my needs.\nI always thought the \"syntax tree + bytecode for type infos\" idea of Checkstyle was a quite elegant solution for writing powerful checks without the need to re-implement too much of the compiler's workings. Why has it become too complicated? Are some new features in Java 8 causing problems?\n. ",
    "peteroupc": "Yes, in a way.  Although I may suggest further editorial changes in the future, there is nothing more I want to do here at this time, so this issue can be closed.\n. ",
    "kutzi": "Thanks for the feedback.\nNote that https://jira.codehaus.org/browse/MCHECKSTYLE-138 and #138 are IMO 2 separate (but obviously somehow related issues):\nMCHECKSTYLE-138 is about @threadSafe support in Maven, Means: different modules can be checked in parallel in the same VM. Still each module for itself can be checked single-threaded (if you need to).\n138 is - AFAI understand it - about making the check in a single module multi-threaded.\nMCHECKSTYLE-138 is surely a precondition for #138, but I don't need to implement #138 completely to have MCHECKSTYLE-138\n. ",
    "baratali": "@romani , done.\n. @romani , fixed\n. added UT\n. Everything is ok\n. I used this input file for TreeBuilder. It is useless.  I forgot to remove it :)\n. Three if statements are squashed into one\n. weird method name. it checks that method has parameters\n. Variables renaming; Removed nameSibling != null condition\n. ignoring exception is not good, and pmd tells it.\n@romani, is there a logger in checkstyle to log this exception?\n. thanks, I'll fix that\n. Test was introduced to satisfy IDEA and Eclipse.\nTestBean's fields are not used. It produces warnings 'field is never used...' and they are cannot be suppressed because of IDEA's violations about SuppressWarnings usage. Details https://github.com/checkstyle/checkstyle/pull/1823. \n. @romani , getIndentation() processes only DetailAST nodes and it cannot calculate indentation for javadoc tree nodes because Main Tree (DetailAST) and Javadoc tree (DetailNode) are two different trees with no references between them. That's why we calculate prefixes for inner javadoc tree manualy (there was also a hack before: final String prefix = rootPrefix.substring(0, rootPrefix.length() - 2) + \"   \";).\nHowever, I also don't like these hardcoded prefixes :)  I'm thinking how to change this...\n. typo: baseIndentation\n. ",
    "rdiachenko": "1)\n\n\nif (aAST.getLineNo() > 1 && hasEmptyLineBefore(aAST)) {\n-                    log(aAST.getLineNo(),\n-                            \"empty.line.separator\", aAST.getText());\n-                }\n\n\nI don't understand your logic. Why do you give a warning if there is an empty line before the package declaration? It should be vice versa.\n2)\nPlease add a test case if a class is in the default package and it has a header:\n//header\nimport ...\nclass ...\n3)\n\n\nChecks if token have blank line before.\n\n\nChecks if a token has a blank line before.\n4)\n\n\ngetLines()[lineNo - 2];\n\n\na) magic number\nb) are there any other way to get a previous line?\n. 1)\n\n\na) I can't invent any name for this number. \n\n\nMax, how do you program if you can't even invent a name for the variable?\n2)\n\n\nb) There is no other way to get previous empty line.\n\n\nThere is! You've already used it. Look at \"hasBlankLineAfter\" method\n3)\n\n\nhasBlankLineAfter\nhasEmptyLineBefore\n\n\nPlease stop at a single definition: \"blank\" or \"empty\" and correct everything in your check according to your choice.\n. Roman, I'm fine with the changes. Ok for PR\n. > > ```\n\n\nif (leftCurly.getType() == TokenTypes.LCURLY) {\n+                    emptyBlock = leftCurly.getNextSibling().getType() != TokenTypes.CASE_GROUP;\n+                }\n```\n\n\nUpdate your tests with the following test case:\nswitch(...) { default: ... }\nI think it will give a false positive here.\n. @romani commented on Jun 7\nByte order mark is not requirement for files - http://en.wikipedia.org/wiki/Byte-order_mark#UTF-8\n23:11 ~/java/git-others/checkstyle/checkstyle [master|\u2714] $ sudo apt-get install moreutils\n.....\n23:11 ~/java/git-others/checkstyle/checkstyle [master|\u2714] $ file -i pom.xml \npom.xml: application/xml; charset=utf-8\n23:11 ~/java/git-others/checkstyle/checkstyle [master|\u2714] $ file -i import-control.xml \nimport-control.xml: application/xml; charset=us-ascii\n23:12 ~/java/git-others/checkstyle/checkstyle [master|\u2714] $ isutf8 pom.xml \n23:12 ~/java/git-others/checkstyle/checkstyle [master|\u2714] $ isutf8 import-control.xml \n23:12 ~/java/git-others/checkstyle/checkstyle [master|\u2714] $ xxd pom.xml | head -2 \n0000000: 3c3f 786d 6c20 7665 7273 696f 6e3d 2231  <?xml version=\"1\n0000010: 2e30 2220 656e 636f 6469 6e67 3d22 5554  .0\" encoding=\"UT\n23:13 ~/java/git-others/checkstyle/checkstyle [master|\u2714] $ xxd import-control.xml | head -2 \n0000000: 3c3f 786d 6c20 7665 7273 696f 6e3d 2231  <?xml version=\"1\n0000010: 2e30 223f 3e0a 3c21 444f 4354 5950 4520  .0\"?>.<!DOCTYPE\nWe might need to port \"isutf8\" application from C++ to Java, sources https://joeyh.name/code/moreutils/ , file \"isutf8.c\".\nAttention: we cannot force to use only utf-8!!!, any ascii is more preferable and should be accepted, see my example above.\nWe might need to use - http://jchardet.sourceforge.net/ , that could give us full functional support for most of encoding detection (not only utf-8).\n. @maxvetrenko commented on Aug 31\nI read that InputStream uses operation system encoding. All libs read bytes from InputStream, so all already bytes encoded in  operation system encoding. \nI ran into the same problem: http://stackoverflow.com/questions/8305635/javahow-can-i-get-the-encoding-from-inputstream\n. Here's my investigation of encoding detection by:\n1. linux command \"find -ib file\"\n2. juniversalchardet (https://code.google.com/p/juniversalchardet/)\n3. jChardet (http://jchardet.sourceforge.net/)\n| Actual encoding | $find -ib file | juniversalchardet | jChardet |\n| --- | --- | --- | --- |\n| Windows-1250 | charset=unknown-8bit | WINDOWS-1252 | windows-1252 |\n| ISO8859-2 | charset=iso-8859-1 | ISO-8859-7 | ISO-8859-7 |\n| CP866 | charset=iso-8859-1 | ISO-8859-5 | windows-1252 |\n| KOI8-R | charset=utf-8 | UTF-8 | UTF-8 |\n| GBK | charset=iso-8859-1 | IBM866 | [UTF-16BE, Big5, GB18030, UTF-16LE] |\n| SHIFT_JIS | charset=utf-8 | UTF-8 | UTF-8 |\n| ISO2022-KR | charset=utf-8 | UTF-8 | UTF-8 |\n| UTF-8 | charset=us-ascii | No encoding detected | ASCII |\nI used files of different encoding types with the corresponding content as input on Linux OS (Fedora). The output may be different on Windows OS.\nWe can't say for sure what is the file's encoding. It is not the task for Checkstyle\n. Won't fix\n. The two more examples with syntactically parallel elements:\n1)\nif (node != null\n    && distance > node.rect.distanceTo(queryPoint)\n    && (newDistance < currentDistance\n        || (node.depth % 2 == 0\n            && queryPoint.x() < node.point.x()\n            && queryPoint.y() > node.point.y())\n        || node.depth == -1)\n    && isValid(node,\n               newDistance,\n               currentDistance)) {\n  final int firstLine = getFirstLine(Integer.MAX_VALUE, getListChild());\n} else if (node == null\n           && distance == currentDistance\n           && (node.depth % 3 == 0\n               || node.depth % 5 == 0)) {\n  final IndentLevel level = new IndentLevel(getLevel(), getBraceAdjustement());\n}\n2)\nprivate <T extends Object \n    & Comparable<? super T>\n    & Something<? super Comparable<? super Number>,\n                ? extends Other<Long,\n                                Comparable<? super T>>,\n                ? super int[]>\n    & Serializable> T max(Collection<? extends T> coll){...}\n. ",
    "yudindi": "hi @romani, I added negative UT.\nProblem: whenever one writes something like\ngetMyArray()[1] = some_value;\ncheckstyle reports a problem like \"Indentation: method call child at indentation level 8 not at correct indentation, 12\"\nThere is no workaround to reformat such a code so that checkstyle gives no error. I understand that this code smells, but still it is valid from the indentation point of view.\nThis is a long-running issue reported at\nhttps://github.com/checkstyle/checkstyle/issues/129\nhttp://sourceforge.net/p/checkstyle/bugs/518/\nTechnically, MethodCallHandler fails to check if it is the leftmost part of the assignment expression at AssignHandler.java:88 (the ast has method call --> index op --> assignment hierarchy, but no handler is designed for index op, so MethodHandler uses AssignHandler as a direct parent). \nI implemented IndexHandler for INDEX_OP which is inserted (in this particular case) between MethodHandler and AssignHandler. \n. ",
    "pilhuhn": "I have meanwhile had a closer look and it seems that the existing filter is still an exclude one. For my project I have meanwhile implemented inclusion. See https://github.com/rhq-project/misc/blob/master/cs-stuff/src/main/java/org/rhq/misc/checkstyle/InclusionFilter.java#L30\nI think the good part of an inclusion filter is to allow to easily match \"*.Remote.java\" classes or such, that as being part of an external API, probably need much more strict rules, than some \"random\" internal class.\n. ",
    "tonyghita": "Any word on when this will be released? It's a highly anticipated feature for me :)\n. :+1: \n. I'm so excited for this release :+1: :100: \n. I'd like to second @daniilyar, great work! Thank you so much\n. ",
    "ayadav77": "I tried this pull request locally against my code base. It seems to handle the Java 8 features like lambda expressions correctly now. But It is failing on recognizing custom annotations. I get the following exception for all custom annotations that i have defined in my codebase:\nMyCustomAnnotation.java:0: Got an exception - java.lang.StringIndexOutOfBoundsException: String index out of range: -1\n. Please ignore the above comment. The exception java.lang.StringIndexOutOfBoundsException: String index out of range: -1 is occurring in one of the custom Checks that exists in our codebase. I will troubleshoot further and provide any additional information that may be relevant here.\n. My testing of this pull request has been successful. I had to ensure that my custom checks were compiled against the new checkstyle jar (of course). I successfully was able to have checkstyle perform the analysis on my java 8 codebase.\n. ",
    "wigbam": "updated the main pull request top comment\n. Ok, to have more flexibility over the configuration only makes sense. But a bit more work will be required then.\nBefore I move further and outline the proposed changes and in order to avoid possible confusion, I would like to clarify that in the mentioned Hibernate's Criteria class, method add(Restriction) is not a valid setter method, while setMaxResults(int) is.\nNow, in order to accommodate the required features, instead of a newignoreBuilderSetter property several other properties could be added:\n| Property Name | Description | Default Value | Example Setting |\n| --- | --- | --- | --- |\n| setterPrefixRegex | The regular expression defining acceptable prefixes for setter methods. The method will considered to be a valid setter method if its name matches the regular expression ^<setterPrefixRegex><cFieldName>$, where cFieldName is the capitalized name of the variable being set | set | (set|with) |\n| setterCanReturnItsTypeIn (or suggest an alternative name) | The regular expression defining what type names are allowed to have setter methods return their defining type. | ^$ | .*Builder |\nLet me know what you think.\n. @romani, not really, the original problem was to do with Checkstyle's expectation for setters to return void. Therefore, simply implementing setterPrefixRegex would not be enough for builders where, typically, setter methods return themselves.\nThe existing logic could be amended to ignore return types of setters, but that would be a breaking change, which is bad for obvious reasons. The proposal I made earlier would allow us to keep current functionality, while adding the new features on top.\n. ",
    "priimak": "Hi All.\nBut isn't it is common to have setters in the form\nFoo setX(int x) {\n    this.x = x;\n    return this;\n}\nin classes that do not nessesaerly named \".*Builder$\"?\nI would say that if method satisfy following rules:\nIt is named (using perl regex) /set(.*)\\([^\\S,]\\s+\\1\\)/ and it returns either void \nor class is in which it is defined or its parent class ( assuming that @override is set )\nThen such method should be considered a setter. However in order to maintain backward \ncompatibily we need to keep meaning of ignoreSetter property intact. Therefore, I would propose \nthat we call such setters \"Exetended Setter\" and add following property \n<property name=\"ignoreExtectedSetter\" value=\"true\"/>\nto the HiddenField module.\n. ",
    "tymieniecki": "Hi Roman,\nDone as instructed, issue was closed by the time I logged in.\nMark Zaremba-Tymieniecki\nManaging Director\nSoftQuaTra Ltd.\n+44 0789 420 8834\nwww.softquatra.co.uk http://www.softquatra.co.uk/ \na passion for software quality\nFrom: Roman Ivanov [mailto:notifications@github.com] \nSent: 08 September 2014 18:56\nTo: checkstyle/checkstyle\nCc: Mark Tymieniecki\nSubject: Re: [checkstyle] Check for Logger to be declared as a static final class attribute (#272)\nplease switch to mail list for discussions https://groups.google.com/forum/#!forum/checkstyle-devel\nand close that issue.\nPlease share your Check sources to let us see full context of your problem.\n\u2014\nReply to this email directly or view it on GitHub https://github.com/checkstyle/checkstyle/issues/272#issuecomment-54860370 .  https://github.com/notifications/beacon/8698818__eyJzY29wZSI6Ik5ld3NpZXM6QmVhY29uIiwiZXhwaXJlcyI6MTcyNTgxODE2MiwiZGF0YSI6eyJpZCI6NDE4NjQwNzh9fQ==--0950314c5126097bba3d019f0142fe98617080e8.gif \n. ",
    "tomdcc": "(tested with 5.9)\nThis gets worse if you have chained lamdas too, as each chaining requires another level of indentation\n. ",
    "ldaley": "+1\n. ",
    "bellorap": "+1\n. ",
    "netmikey": "+1\nNew projects rely on lambdas heavily, so I will have to disable indentation checks completely until this is fixed.\n. ",
    "janschaefer": "np :-)\n. ",
    "lkoe": "```\nGiven your tight release schedule for\n  the coming weeks I think backporting the fix to 5.8 will not be\n  necessary.\n  I will postpone offering the google_checks.xml as a built-in\n  configuration in eclipse-cs for now.\nCheers,\n  Lars\nAm 14.10.2014 02:19, schrieb Roman Ivanov:\nmerged to master will be release in 5.9 in few days.\n  @lkoe, do we need backport it to 5.8\n    or you can drop that config out Eclipse-CS for that release ?\n  \u2014\n    Reply to this email directly or view\n      it on GitHub.\n  {\"@context\":\"http://schema.org\",\"@type\":\"EmailMessage\",\"description\":\"View this Issue on GitHub\",\"action\":{\"@type\":\"ViewAction\",\"url\":\"https://github.com/checkstyle/checkstyle/issues/296#issuecomment-58973560\",\"name\":\"View Issue\"}}\n```\n. Regarding 1) I was confused, since the check implementation itself resides in the javadoc sub-package. Up until now implementation package and documentation section correlated. Is this not true anymore? Or should the check implementation rather be moved to the annotations package?\n. Another issue with AnnotationLocationCheck docs:\nThe impl states the default value for property \"allowSameLineSingleParametterlessAnnotation\" to be \"true\", the documentations states \"false\" as the default value.\n. Simple test class (can't attache a file here):\n```\n@SuppressWarnings(\"filetabcharacter\")\npublic class ABCFClass {\n    /*\n     * Hugo.\n     * \n     /\n    public void aaa() {\n    if (true) \n        return;\n\n}\n\n\n\npublic void bbb() {\n    if (false)\n        return;\n}\n\npublic void ccc() {\n\n}\n\n}\n```\n. Hmm, strange. Now it's not reproducible anymore...\n. ",
    "seanf": "This custom rule might be helpful to someone: http://stackoverflow.com/a/6155496/14379\n. I do agree that it would be good to have the rule built in.  Also, I'm not sure if the rule I linked is checking exactly the same thing (ie whether it's the same line or not).\n. ",
    "liutikas": "I saw that, however ideally Checkstyle would have it built in.\n. Description updated.\n. That sounds good. This new additional option is exactly what we want.\n. ",
    "jOlliv": "reproducible also with checkstyle 6.0\n. ",
    "ben-manes": ":+1: \nI just encountered this too when trying to get Gradle to consume the google_checks.xml. Please include the configurations in the Maven Central distribution as well.\n. Sorry. I meant the checkstyle-6.1.1.jar already on maven should include it, in addition to the -all that you referenced in the issue.\n. Oh, and I guess I didn't answer your second question,\n\nplease describe how you are going to use it, I am just curious.\n\nIf the official style configurations were available, I could configure checkstyle's in Gradle by reading the dependency archive. By setting the toolVersion and dependency to the same version, the cache should avoid a duplicate download. Potentially Gradle could update its plugin to make using an official configuration even easier.\n``` gradle\napply plugin: 'checkstyle'\nconfigurations {\n  checkstyleConfig\n}\ndef versions = [\n  checkstyle: '6.1.1',\n]\ndependencies {\n  checkstyleConfig \"com.puppycrawl.tools:checkstyle:${versions.checkstyle}\"\n}\ncheckstyle {\n  toolVersion = \"${versions.checkstyle}\"\n  config = resources.text.fromArchiveEntry(configurations.checkstyleConfig, 'google_checks.xml')\n}\n```\n. ",
    "nixx": "This is critical for us as well. A lot of code uses Swagger annotations, and we need to disable indentation check on Checkstyle 5.9 and 6.0. \n. ",
    "dmlloyd": "Hmm, for some reason when I used 6.0, the import plugin option to inspect JavaDoc didn't work.  But it may well have been PEBCAK*.  Thanks for responding though.\n- PEBCAK = Problem Exists Between Chair And Keyboard\n. It appears that 5.9 and 6.0 are not in Maven though...\n. Never mind, found it!\n. ",
    "erikringsmuth": "+1 MyClass<T>::myMethod should be valid syntax.\n. ",
    "subes": "The problem occurs with checkstyle-cs plugin. Maybe the cause is not\ndirectly in checkstyle but between checkstyle and eclipse?\nAm 21.11.2014 21:42 schrieb \"Ivan Sopov\" notifications@github.com:\n\nOK, I have reproduced \"something\" but with no difference between 5.8 and\n6.1. I hope to give it a second try.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/checkstyle/checkstyle/issues/378#issuecomment-64034528\n.\n. \n",
    "teaplanet": "I use Checkstyle 6.1.1.\ncheck.xml\n<module name=\"SummaryJavadocCheck\"/>\nThe setting module \"SummaryJavadocCheck\" has no children.\nBut, Checkstyle checks some codes, and don't set letter for end of sentence.\nThe target source is SummaryJavadocCheck.java lines 79-82.\nfinal int endOfSentence = firstSentence.lastIndexOf(\".\");\n    if (endOfSentence == -1) {\n    log(aAst.getLineNumber(), \"summary.first.sentence\");\n}\n. I understood the rule was created for Google's style.\nI tried to skip the check, but I could not disable.\nFor example, this Javadoc is written by Japanese.\nhttps://github.com/HirokiMiyaoka/Amanatsu/blob/master/Amanatsu/src/net/azulite/Amanatsu/Amanatsu.java\n/**\n * Amanatsu\u306e\u751f\u6210\u3002\n * @param context Amanatsu\u3092\u4f7f\u7528\u3059\u308bActivity\u3002\n * @param gview GameView\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3092\u7d99\u627f\u3057\u305f\u30af\u30e9\u30b9\u3002\n */\nWe use \"\u3002\" instead of \".\", and sometimes do not write \"\u3002\".\n(\"Amanatsu\u306e\u751f\u6210\u3002\" is \"Create Amanatsu\" (Create instance of Amanatsu))\n. I'm glad to you, become clear!\nI think, not use japan-period is absence.\nBecause, first sentence of Javadoc need overview sentence(, not title).\n(And, I will demand to write japan-period.)\nI want to replace period.\nFor example, change period to other letter(japanese-period).\nAnd, I want to enable/disable setting to it.\n(I remove a line() from check.xml, but this check is enabled.)\n. Thanks a lot !!!\n. ",
    "ppalaga": "Thanks!\n. ",
    "damianszczepanik": "By merging those two blocks you can increase code coverage and (based on cobertura output) cover this fully.\n. ",
    "ivanov-alex": "This UT was removed as it is covered by new UTs (testSamePackageDepth2, testSamePackageDepth3, ...)\n. @mkordas Will it compile with non-existing \"import org.myOrgorgan.Test;\"?\nIf I remember correctly (I had similar issues in previous PRs), it will compile in Maven, but will fail (or show warning) in Idea.\n. @mkordas This test covers one of the options of \"overlapping patterns\": patterns of the same length, where match for second pattern on a configuration goes first on input file. Adding meaningful abbreviation of that to method name is not that simple.\n. @mkordas changed to \".my\". Is it good enough or you mean some scenario that could be closer to real life (it will be more difficult to find one comparing to synthetic test above)?\n. In this particular case the best solution I see is:\njava\n        try {\n            verify(checkConfig, getPath(\"imports\" + File.separator\n                    + \"InputImportControl.java\"), expected);\n        }\n        catch (final CheckstyleException ex) {\n            return;\n        }\n        fail();\nBasically, it only narrows error scope to verify method, it doesn't guarantee that we have caught correct exception. \nI have two tests for two different situations. In both cases error is re-thrown with message similar to cannot initialize module com.puppycrawl.tools.checkstyle.TreeWalker - Cannot set property 'url' to 'https://{WrongCharsInURL}' in module com.puppycrawl.tools.checkstyle.checks.imports.ImportControlCheck.\nThis message doesn't contain anything from original error message and doesn't allow us to identify if we caught correct exception.\n. Yes, this code is a bit better, but the main problem still the same: analysis of exception message doesn't makes sense, it has no context of original problem. I receive two identical messages for two different problems.\nBasically, in this particular case, it is not much better then (expected = CheckstyleException.class)\n. ",
    "Godin": "since this version number is duplicated in multiple locations, IMO would be better to extract it into property and this also should simplify testing of updates\n. also I suspect that number of duplicates can be reduced from 3 to 2 by declaring plugin in pluginManagement section\n. after substitution value is equal to default, which is ${project.build.directory}/jacoco.exec, so can be omitted and also last one is IMO better\n. IMO there is change of behaviour - tag properties relates to TestNG.\n. seems completely useless\n. either this haltOnFailure is useless or one in execution with id default-check\n. addition of this profile is not validated by Travis for this PR, while IMO would be really nice, especially that execution with id default-check currently fails in MEZk#1\n. @MEZk IMO anyway ${project.build.directory} is better than ${basedir}/target\n. @MEZk you misunderstood this statement - in context of this statement properties refers to project properties and not to http://maven.apache.org/surefire/maven-surefire-plugin/test-mojo.html#properties \n. ",
    "MEZk": "@Godin \nExtracted into property, thanks for advice.\n. @Godin \nForgot to change data file location to ${basedir}/target/jacoco/jacoco.exec \nThanks for comment)\n. @Godin \nAccording to JaCoCo's documentation:\n\nIf your project already uses the argLine to configure the surefire-maven-plugin, be sure that argLine defined as a property, rather than as part of the plugin configuration.\n\nBut it is for prepare-agent, and now we use offline instrumentation, so, we do not need properties)\n. I agree, thanks for comment.\n. I agree, default value is true. \n. We are going to use jacoco profile in Travis CI config as an addition check, and I think we will migrate to JaCoCo completely. \n. @mkordas \nYou are right, we have complete design ruleset here, except excludes.\n. @mkordas \nForgot to use IDEA inspection profile. Fixed.\n. @mkordas \nIf I make it like this:\njava\nprivate void checkExistenceOfTranslationFiles(Map<String, SortedSet<File>> translationFilesMap) {\n    for (String baseName : translationFilesMap.keySet()) {\n        final SortedSet<File> filesInResourceBundle = translationFilesMap.get(baseName);\n    checkExistenceOfTranslationFilesInResourceBundle(filesInResourceBundle);\n    }\n}\nthen findbugs will rise violation.\n[INFO] com.puppycrawl.tools.checkstyle.checks.TranslationCheck.checkExistenceOfTranslationFiles(Map) makes inefficient use of keySet iterator instead of entrySet iterator [com.puppycrawl.tools.checkstyle.checks.TranslationCheck] At TranslationCheck.java:[line 164]\nI don't sure how to make it simpler.\n. @mkordas \nIs it a good idea to change\nMap<String, Set<File>> translationFilesMap to Map<String, SortedSet<File>> translationFilesMap and use it in the whole TranslationCheck class?\n. @mkordas \nYes. why not? Sets.newTreeSet() returns a new, empty set. By default we cannot imagine what kind translations are needed.\nCollections.EMPTY_SORTED_SET is not supported in Java 1.7 (marked as since 1.8).\n. @mkordas \nCorrected javadoc/xdoc. Added check for default translation.\nThe name of default translation file begins with the base name of the ResourceBundle and ends with the .properties suffix.\nFYI: https://docs.oracle.com/javase/tutorial/i18n/resbundle/propfile.html\n. @mkordas \nDone.\n. @mkordas \nDone.\n. @mkordas \nDone.\n. @mkordas \nI mean empty string set. Corrected javadoc/xdoc.\n. @mkordas \nMovet to TranslationCheckTest.\nCorrected typo.\n. @mkordas \n1,2) Extended javadoc.\n3) Corrected typo.\n. @mkordas \nRemoved, since Javadoc was extended.\n. @mkordas \nCorrected names.\n. @mkordas \nCorrected.\n. Default is ^(e|t|ex|[a-z][a-z][a-zA-Z0-9]+)$ .\n. The method returns a value. Its name should start with 'get' prefix.. Magic number should be avoided.. Can we inline if condition inside while-loop conditional block?. Why cannot we use DISTANCE_TO_PREVIOUS_LINE as a constant name?. Can be moved closer to https://github.com/checkstyle/checkstyle/blob/dd178c43a1bc6bee90081db7aa595cb0c51974b7/src/it/java/com/google/checkstyle/test/base/BaseCheckTestSupport.java#L116. multiple instances of the same Check are detected. Is it a dead code? (msgLocationAlone is not used). I don't like this name and the logic inside 'shouldBeAlone'. I agree that adding additional boolean conditions into shouldBeAloneOnLine will make the method too big and hard to understand, but maybe it is a reason to split it or refactor.. Logic is OK, but the name looks a bit strange to me.. This is the variable which is not used in code.. Sorry, wrong line number. See line 77.. @romani @rnveach \nWhat do you think about this change? There is no need in using excludeScope property anymore.. @romani \nDone. Fixed. excludeAccessModifiers was removed. Added public, package, private, protected modifiers into accessModifiers default values.. Fixed. Fixed. Fixed. excludeAccessModifiers was removed. Restored. Extended example.. Fixed. There is no need in making it final.. @romani \nWhy do we need final there? . @romani \nDone. @rnveach \nYou are right, but I'm not really sure whether it has to be changed.\nFrom check's documentation\n\nThe algorithm does not support wild-card imports like import java.io.*;. Most IDE's provide very sophisticated checks for imports that handle wild-card imports.\n\n@romani \nDo you remember why the author decided to skip imports with wildcards?. @rnveach \nIMO it is an overengineering. I understand if a top level class has final modifier but in these case it is unnecessary. . Done. Done. @rnveach \nI agree. java.lang.* may be treated as unused import. It imports everything in java.lang and nothing in its sub-packages.. shouldHaveLineBreakBefore is better name as for me.. I do not understand the name at all.. What does 'other' mean?. Method name is very controversial. I try to read javadoc comment but it has nothing in common with the name.. The test name should explain what it tests. Maybe test can be named as 'testRightCurlyIsAloneInLambda' Sometimes I read the names of such tests and I cannot understand what do they really test without debugging the code. Good test names are very valuable especially when the check logic is so hard and there are so many test cases to cover. . @romani \nGoogle Style Guide prohibits one-character parameter names for public methods and allows them for non-public methods. \nSee https://google.github.io/styleguide/javaguide.html#s5.2.6-parameter-names (the second sentence).\nThat is why we have 2 different regexpses. I read the thread and I don't know whether it is OK that they do not follow their own guide.. @romani \nDone.. @romani @rnveach \nI opened the issue: https://github.com/google/styleguide/issues/226\nPR: https://github.com/google/styleguide/pull/227. @rnveach \nDone.. @romani \nDone. Done. No, it is related only to interfaces in the package.. 1) There should be a comma after the word \"\u041f\u043e\u0436\u0430\u043b\u0443\u0439\u0441\u0442\u0430\". \n2) There should be a comma before the word \"\u0447\u0442\u043e\". . 1) There should be a comma after the word \"\u041f\u043e\u0436\u0430\u043b\u0443\u0439\u0441\u0442\u0430\".\n2) There should be a comma before the word \"\u0447\u0442\u043e\".. Removed semi-colon and faced the same problem.\nhttps://github.com/checkstyle/checkstyle/pull/3853/files#diff-1625ee7bf90900416b7d197caa88c370R185\n@romani \nCan you help us?. Done. There should be a world 'to' after the word 'only'.. As you can see ... will be better as for me.. @romani @rnveach \nThis example of xml config is invalid.\nSee http://rveach.no-ip.org/checkstyle/checkstyle.php?action=view&config=abeb8b079dd5d1ed2d2c10f81fc65d12&code=0db8c02c469b9086140536de29d1f527&checkstyle=checkstyle-7.6-all.jar&printTree=\nShould be\nxml\n<module name=\"SummaryJavadocCheck\">\n    <property name=\"period\" value=\".\"/>\n</module>\nLooks like a copy-paste error.\n@sagar-shah94 \nPlease, fix the example.. Package name should be lowercase.. Do not make input file names cryptic. Please rename the file to clearly state its purpose.. Separate file for each test. Rename it to avoid misunderstanding. File name should contain short information about its purpose. . Separate file. Rename it to avoid misunderstanding. File name should contain short information about its purpose.. @sagar-shah94 \nWhy you cannot rename the interfaces? You are free to rename any inner language structures. The main idea is to make it easy for future contributor and for you too to add new tests and understand your tests. That is why it is better to split input files to shorten the context of the test.. Is commit better than the method with a good name?. In Java world it is better to have the whole package name in lowercase.\nhttps://docs.oracle.com/javase/tutorial/java/package/namingpkgs.html. InputSeparatorWrapForTestDot does not need to contain examples for COMMA. Only for DOTS as specified in tokens set.. InputSeparatorWrapForTestComma does not need to contain examples for DOT. Only for COMMAS as specified in tokens set.. InputSeparatorWrapForInvalidOption can contain an empty class. The main purpose of the test is to check that passing ivalid option will throw exception.. > Also just to be clear what exactly do you mean by \"UTs\" ? unit tests, right !\nYes. As you added a new logic, you also should have implemented UTs to cover the changes. Our CIs control coverage rate and will not allow you to decrease its level. To generate coverage report you can use mvn clean cobertura:cobertura. Coverage report will be located at target/site/cobertura/ . To check whether the coverage rate is satisfied run mvn clean cobertura:check.. Try to avoid comments. Nobody will read them, nobody will trust them. Method with a clear name is much more better than comment. As you are trying to get directory name (lines 107 - 109) why don't you introduce a new method?. What does lastPos mean? Last position of what? Try to be more specific in names.. Remove comment. Add new method.. What does expected mean? Why full.getText().replace('.', File.separatorChar); is expected? \nRename the variable. It should be as verbose as possible.. If you name variables clearly, the comment will not be necessary. . @rnveach \nIs the message clear to you? Do we need to add placeholders (package name and directory name) ?. test name shoudl explain its purpose. You are testing ignoreMismatch options which is set to true.. @rnveach \nOh, yes. You are right. My fault.\n@sagar-shah94 \n SeparatorWrap is a part of the checks which are in whitespace group.\nhttp://checkstyle.sourceforge.net/config_whitespace.html. yes as in @rnveach's example. @rnveach \nInput was not copied. It should have been changed in order to become more specific to test content. For example, if we test NL option the input file should contain positive and negative test cases with comments for new line. This will make the input file shorter and it content will become more readable. We already have input files which are hard to read because they contain to many unrelated code examples. I think that each input file should be as short as possible, each UT too. Having too many UTs and input files is better than big UTs and big input files as for me. In addition I would suggest adding new UT each time we fix an issue, because sometimes contributors add new code and test cases into existing input files and tests. If it makes sense to you I would like to create an issue to review existing input files and split them into small, same for big UTs.. @sagar-shah94 \nAs was discussed above (https://github.com/checkstyle/checkstyle/pull/3915#discussion_r104325446)  it is better to make changes to input files with small steps. So, for this issue just copy-pasting input files will be enough. Sorry, that I forced you to make unnecessary changes.. @rnveach \nAgree. Lest postpone my idea till we resolve all issues related to splitting of input files.. Method name should be a verb.. Same, method name should be a verb.. Rephrase. This method is not helper. It is a part of logic. It does not help in checking, it checks sth.. Method name should be a verb.. helps -> checks.. test name starts with the word test in general. Please make separate input file for each test.. Please make separate input file for each test.. Please make separate input file for each test.. Please make separate input file for each test.. Yes. It can be static as it implements the pure algorithm.. Ok. Long names are better than cryptic short.. Yes. You should use appropriate name for the test. Think what it does, what its purpose is.. @rnveach \nThat will work. I fetched @sagar-shah94's branch and made changes in my local repo. Diff reports will be OK. Checkstyle will not rise CC violation.\n@sagar-shah94 \nPlease, make changes suggested by @rnveach .. @kukreja-vikramaditya \nI do not  understand your problem too. Checkstyle does not validate test input files.\nIn your case, for example, for InputNoLineWrapGood this works fine:\n```java\nimport static java.math.BigInteger.ZERO;\nimport com.puppycrawl.tools.checkstyle.TreeWalker;\nimport javax.accessibility.AccessibleAttributeSequence;\nimport java.util.concurrent.atomic.AtomicIntegerFieldUpdater;\npublic class InputNoLineWrapGood {\n```\nAs you can see, I just added new static import and did not touch any other imports in the file.\nPlease, do not do any unnecessary changes in input files. Do not change existing imports order.. @sagar-shah94\nInputSeparatorWrapDotAndNewLineOption\nInputSeparatorWrapCommaAndEndOfLineOption\nInputSeparatorWrapInvalidOption\n. The name of the method which returns a boolean value should start with is, can, has, contain, etc.. The name of the method which returns a boolean value should start with is, can, has, contain, etc.. you do not test all cases, you set the block option to STMT. It should be in the test name.. The name of the check is NoLineWrap. Why did you lowercase check's name?. InputWhitespaceAfterTypecast. InputWhitespaceAfterDefaultConfig. @kukreja-vikramaditya \nDo not see all changes. . testDefaultNoPackage. testDefaultWithPackage. @divsidhu-26 \nIt is not correct. Check name part in input file name should be in camel case.. @divsidhu-26 \nThe line should be less than 100 chars.\nhttps://travis-ci.org/checkstyle/checkstyle/jobs/209401534#L358\nThere should be a whitespace after each concatenation operator.. Please, add period at the end of the sentence.. Please, add a new line after '}'.. Tests which are located at it folder should have names that end with test.. Why does the method have protected modifier? Make it private and static.\n@romani \nSomething wrong with the name. In addition, I do not like the purpose of this method and isCaseHavingText. Both of them should be changed, but now I cannot imagine how it should be done.. Make it private and static.. @ps-sp \nSorry, I need more time to decide what we can do here.. This will compile regexp each time the execution process enters the method. In order to avoid this you need to compile regexp in setter. A good example is https://github.com/checkstyle/checkstyle/blob/b4a337a599e853cdc44b19a76da28fcfab2956cd/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/EmptyCatchBlockCheck.java#L172.. You did not set default value of excludeClassesRegexp in the code. Why do you state that it is ^[A-Z]$ here? Why the default value should be ^[A-Z]$ ?. @rnveach \nMaybe it is better to create an issue and perform a small refactoring of the code, because annotation level is not a correct term. The term is present in methods names and the check logic. I will changes this PR and bind it with the issue.. @rnveach \nDone.. @rnveach \nDone.. @rnveach \nDone.. Done.. Done.. Done.. Done.. Is is not correct. find() attempts to find the next subsequence of the input sequence that matches the pattern. You need to use matches(). Check doc: https://docs.oracle.com/javase/7/docs/api/java/util/regex/Matcher.html .. @romani \nAre we OK to update both ClassDataAbstractionCouplingCheck and ClassFanOutComplexityCheck ? The initial issue says that update should be done only for ClassDataAbstractionCouplingCheck. Both checks extend AbstractClassCouplingCheck.. empty -> ^$ as for LineLength, for example.. empty -> ^$ as for LineLength, for example.. empty -> ^$. @rnveach \nDone. Confused with other javadoc.. Done.. Done.. Why do we need the condition? Please, prove the necessity.\nI think that if you change regexp to ^$ there will be no need in checking whether regexp is empty.. Can we use TokenUtils#findFirstTokenByPredicate here?\nJust think what predicate do you need for this.. Can we use TokenUtils#findFirstTokenByPredicate here too?. @timurt \nFYI: https://github.com/checkstyle/checkstyle/blob/ce21086e087661553f3a774c38362327ee88996a/src/main/java/com/puppycrawl/tools/checkstyle/api/AutomaticBean.java#L279-L279. @ps-sp \n@romani's approach will work. I think that you need to find a right curly in visit token in separate method. The same as you do in findRightCurly. The argument of hasText is incorrect to my mind. We analyze code block, not just SLIST, so we need to find the block boundaries (left curly and right curly). hasText should receive two parameters: left curly which opens a block and right curly which closes the bock. When you find both right curly and left curly you will be able to check whether they are null and pass them into hasText.\n@romani \nWhat is your opinion?\n. @ps-sp \nAccording to the tree structure which was given in @romani's comment it is OK. . This can be replaced with TokenUtils#findFirstTokenByPredicate, but it is up to you to decide.. The name of the test means that we test caching functionality for the check which does not hold external resources.. Done.. Renamed to testClearCacheWhenCacheFileIsNotSet as testClearCacheWithNoCache is a bit confusing due to Cache...NoCache.. Done.. I cannot figure out how to intersect the exception. I could generate md5 of expected exception manually and assert that actual md5s after first and second runs are equal to expected, however, if we change the line of verify method invocation the md5 will be changed.\nDo you mean that we should make sure that getting non_existing_external_resource.xml before the invocation of verify method in the loop throws an exception?. Done. The test was moved to testPutNonExsistingExternalResourceDifferentExceptionsBetweenRuns.. Done.. Removed.. Renamed to testCheckWhichDoesNotImplementExternalResourceHolderInterface. . Done. The test was moved to PropertyCacheFile. See testPutNonExsistingExternalResourceSameExceptionBetweenRuns.. Please, split the condition.\njava\nif (condition1\n    || condition2) {\n}\nit will ease resolving the coverage problem for you and for the future contributors.. no need. We already have the converter.  Just use boolean argument.\nFYI: https://github.com/checkstyle/checkstyle/blob/ce21086e087661553f3a774c38362327ee88996a/src/main/java/com/puppycrawl/tools/checkstyle/api/AutomaticBean.java#L89-L89. put comments // violation on the lines where the violations should appear.. please, make it as:\njava\nif (condition1\n    && condition2\n    && condition3) {\n}\nit will help the future contributor to analyze coverage reports.. No. This is not a good approach. This is an anti-pattern. This method has the side-effect. It modifies the parameter inside. The name says nothing about this fact. . Get rid of the side-effect.. We can use Stream API here.. The description does not match the method name.. Can we use Stream API here?\n1) Filter by predicate\n2) Map the filter result to the string (use getQualifiedClassName as the lambda for the map). shouldDeclaredAsFinal -> shouldBeDeclaredAsFinal. Checks. Registers. Registers. Use CommonUtils.EMPTY_STRING_ARRAY. >  Is this how all out future conditions should be?\nI think that it should. When I started my contribution to Checkstyle project @romani usually asked to do this.  Usually it really helps to see where there is a missing branch in the coverage report. It is easy to decide what should be covered if there are two branches in the condition, however when it comes to more than two branches.... Please, put the comment on the line where the violation is actually happens.. It is not a general bad practice. User is able to decide whether he/she wants to configure the check to rise the violation if :: is on the next line after line break. Please remove breaking after method reference is bad practice.\nPlease, add an example of check's configuration for the given example as METHOD_REF is not in the set of default tokens.. you cannot update the version just to satisfy Reflections needs. It should be a reasonable decision. Each version update should be a separate commit.. @romani @Luolc \nPersonally, I don't like this approach. We add so many conditions and new logic just for one thing. What are the benefits? We do not introduce new checks very frequently, so we can simply add the new checks into the map.. Once again, new conditions will result in bugs in future.. @sagar-shah94 \nThe logic in this method is not correct.\nHint: use JavadocUtils.findFirstToken. Done. You are right. Added \njava\n// invoke destroy to persist cache\nchecker.destroy();\nto persist cache. Changed asserts.. Removed verify.. Done. Done.. why do we need separate array list for concreteFiles? just for the log purposes?. can we add file into allFiles?. What is the purpose of the test? It asserts nothing.\nCan we use scanPaths and/or getFilesToCheck and make the assertion?. Same here. Add the assertion.. the method name is isLambdaParameter, but the return variable is returnValue. . There is no need in comparison of the text. AST is static and generated at once. You can just use\njava\nparent.getFirstChild().equals(ast)\nThe equals method will be invoked from BaseAST:\njava\n    public boolean equals(AST var1) {\n        return var1 == null?false:(this.getText() == null && var1.getText() != null || this.getText() != null && var1.getText() == null?false:(this.getText() == null && var1.getText() == null?this.getType() == var1.getType():this.getText().equals(var1.getText()) && this.getType() == var1.getType()));\n    }\n@romani \nAm I right?. same here. @romani @rnveach \nI think this is OK too, otherwise ; should be on a new line and that will be weird.. @romani @rnveach \nI think this is OK. Do you agree?. @romani @rnveach \nFrom my point of view this is not OK. There should be a violation.. @romani @rnveach \nThis is a controversial example. What do you think?. @rnveach \nDo we really need the list just for logging?. @ps-sp \n\nWhy don't you remove concreteFiles, add everything to allFiles, and use a primitive int variable to count what you add under if (file.isFile()) { for logging.\n\nThis will be a right decision. There is no need in allocating the memory for that list.. @ps-sp \nWhy do we need to pass  targetSrcLine through all methods? Just to make the methods static?\nWe have all information in details to get the source line.. @romani \nIf this becomes a violation, then what option should we use to avoid violations for double brace map initializes? I guess there will be no way to do this. Such initializes are evil as for me, however legacy code contains these language structures.. Why is this a violation for ALONE_OR_SINGLELINE? What option should I use to allow such singleline lambda bodies ?. Add 4 spaces for indentation to separate conditions from the next part of the login (throw new BuildException).\nExample:\njava\nif (condition1\n        && condition2) {\n    throw new Exception();\n}. Am fine with the tests.. @ps-sp \nJudging by your UTs and your investigation, the patch is correct. The problem I faced was with the lambda parameters which were not enclosed in braces. From my point of view, your patch fixes the problem.. @ps-sp \n\nShould I revert this ? Should xdoc be updated to mention this exception ?\n\nI think, yes. However, lets wait for @romani comments as I remember that we decided to avoid the violation in that case intentionally.. @ps-sp \nI'm not sure that such cases are frequent, however, if this syntax is allowed, we need to support it.\n@rnveach @romani \nWhat do you think?. @romani \n\nWe just need change files and copy them to new location.\n\nSo what do we need to change? Only comments in dtd schemes? Do you plan to upload 1_0 - 1_X schemes to sourceforge too? \n\nFiles that we are packing and hosting should use new location.\n\nDo we need to change test resources to point to the new schemes location?\nFrom your comment: \n\nall schemes are stored in git, all we need is to change them as described , bump their versions (for all except for schema that is changed at #2999). @romani \nWe enforce all files to have newline at the end\n\nNo, we do not. See https://github.com/MEZk/checkstyle/blob/52d1237a32dd1ddd6ea4697643534f59d8bebb64/config/checkstyle_checks.xml#L21-L21 .\nThe documentation of NewLineAtEndOfFile is not correct. If we do not set fileExtensions property of AbstractFileSetCheck (NewLineAtEndOfFile extends AbstractFileSetCheck) Checker uses its own property fileExtensions. \n. Fixed. @romani \nIt is the config for Catalog Files feature of maven xml plugin.\nSee http://www.mojohaus.org/xml-maven-plugin/examples/catalog.html. @romani \nI made it as a separate commit and checked that this approach really works without Internet connection.. You will not need null-check if you change\nstrategyOnMismatch.equals(ImportControlOption.ALLOWED) -> ImportControlOption.ALLOWED.equals(strategyOnMismatch). The reason the enum constant should be on the left side of the equals comparison is to avoid the possibility of an exception if the enum constant being compared to it is null.. if the value arg is either null, or empty, or .... > if the value is empty\nThis is a lie!. testIsOnlyWhitespaceOrEmptyWhitespaceOutside > testIsOnlyWhitespaceOrEmptyWithWhitespacesAround. testIsOnlyWhitespaceOrEmptyEmptyString -> testIsOnlyWhitespaceOrEmptyWithEmptyString. testIsOnlyWhitespaceOrEmptyWhitespaceString -> testIsOnlyWhitespaceOrEmptyWithWhitespacesOnly. if I pass a null string as a parameter it will also return true. This is a util method, it will be used by the future contributors. The documentation and the name should be correct, otherwise this method may cause problems in the future. Its name already describes that the method does more than one action. \n@romani \nThe method which does exactly the same check is called 'isBlank' in Apache Commons, but its name puzzles me as I always should check the implementation to make sure that null and empty strings are checked. Thus, I cannot get along with the name of the method (isOnlyWhitespacesOrEmpty). \nMy proposals:\n1) isNullOrBlank\n2) isNullOrEmptyOrWhitespacesOnly\nAs it is a static util method it is not a good idea to give it a long name, however, the client of the class API should know that null strings are also taken into account. I would opt for the long name rather than for the name which is lying to me.. @Kietzmann \nExtra dependency on Guava is undesirable. Please, remove com.google.common.base.CharMatcher from the CommonUtils and use your implementation of isBlank method.. There is no need in regular expression. @romani is right. Lets keep 'allow' elements for each import.. @rnveach @romani \nCan we use MismatchStrategy enum constant here instead of the sting (STRATEGY_ON_MISMATCH_ALLOWED_VALUE) ?. You did not mention null. @rnveach I'm ok with your proposal. It is clear to me.. @ps-sp \nRead @romani's comment once again. The main point is that the AST is immutable. Once it is created, it is not modified. Thus, you can compare references as they always point to the same AST nodes.. Does the option have agrs? Do we need <arg>. Should the option have a short name?. Why do we need Objects? Can we use just modifierGroupRegex.toString? It is the same, but more appropriate as for me.. @rnveach \n\nIf we want to change this to no argument, what should it's name be? We are omitting modules by default.\n\n\nexecuteIgnoredModules, short: eim\nrunIgnoredModules, short: rim\nprocessIgnoredModules, short: pim\n\nIn general boolean options should not have arguments in CLI.. Lets drop the idea of having a short name for the option. I'm ok.. should be final. add final modifier. final. all local variables should be final. move the assert statement to the catch block and add fail() after catch. indentation is incorrect, as for me. add a new line at the end of the file. same. assertTrue(readerLines.isEmpty())?. final. Why do you continue avoiding final modifiers?) Please, run mvn clean verify before sending PR.. The first word after dot should start with a capital letter. . You have to assert that parse and walk methods are not invoked. Use Mockito to verify this fact.. @ps-sp \nI have already created one issue for Checker https://github.com/checkstyle/checkstyle/issues/4128.\nPlease, create the issue for TreeWalker.. Why do we need id?. Forgot about the fact that we can have multiple modules configured.\n@timurt \nIgnore my comment. Ca we use findFirstTokenByPredicate instead to avoid recuresion?. why do we need one more util class? We already have TokenUtils class.. Ok, lets stay with ASTUtils located in the test folder. However, ASTUtils should be in camel case.. Ok, please, re-implement it to avoid recursion . @rnveach @romani \nCan we put the util-methods implemented by @Nimfadora  to TestUtils, as I don't think that it is a good idea to populate and support multiple util classes for test purposes? We already have multiple util-classes in main area and usually contributors reinvent the wheel and do not use what is already implemented.. why package is missing?. Renaming will be done in #4465 when we introduce CheckstyleViolation as a part of our model.. > Why don't we just keep the same name here then and rename only once in other issue?\nOk, done.. file processing results. Please, change javadoc. method javadoc should be corrected. javadoc is not correct. Should be fixed.. The name of the method is cryptic. What does 'text' mean?. extract the version to a property. why do we need to extend BaseCheckTestSupport?. this javadoc should be avoided. The information is present in git.. the name of the test should explain its purpose. the name of the test should explain its purpose. the name of the test should explain its purpose. the name of the test should explain its purpose. why is the input file a part of api package?. The class ElementNode should have an overloaded constructor which allows to create an object of the class without DetailNode (if there is a suppression for the check which validates javadoc tree) or DetailAST.. Do we really need this interface? Can AbstractNode implement both VirtualNod and SiblingCountingNode directly?. The description says nothing about the interface purpose.. looks like a hack. How are you going to support other tokens?. 'imageis not a correct name to represent a node type. PMD uses that name due to the fact that their API work with that name, and that is a historical problem of their design.. what doess1mean? Why it is so special? What is the difference betweensands1? \nThe names of the parameters should be changed to explain their purposes. . @romani @rnveach @timurt \nI'm not OK with the name of the attribute. What does it mean? DetailAST has nothing in common with Image. It is not the class field or getter/setter. If we want to refer to a class with the nameTestAst` the xpath-query should be:\n//CLASS_DEF[@Name='TestAst']\nor\n//CLASS_DEF[@Text='TestAst']\nas actually we refer to the field with the name text which is a part of CommonAST class.. No, it is not allowed to change the config. There should be good reasons to change the config for all project. Please, revert. . The test should have its own input file.. @rnveach \nYes, it is OK. \n@timurt \nPlease, fix.. Please, extract fileProcessingResult.getMessages() to the local variable. @timurt \nPlease, create an issue. Explain, what your problem is there. Make a suppression, put a link to the issue into suppression file.. 1) remove final modifier\n2) rename element to something more appropriate. You do not assert the content of the file directly in the test. Do we really need a separate file? Can we use temp folder and create the empty file there it it satisfied coverage threshold?. as we need to pass null as the constructor parameter it means that this is a problem in the design. Please, create one more constructor which receives one parameter and sets fileText to null. The constructor can be reused in the FileProcessingResult itself.. Reuse this constructor in the previous one. Rename element to errorMessage, errors to errorMessages.  We loop over messages, not audit events. Why is it public?. We do not need this file anymore, please remove. The filed should have been final. Now, I'm OK with the change.. @rnveach \nYes, we can get the name of the file from FileText which will become part of FileProcessingResult. Thus, we do not need the first parameter of fireErrors at all. \n@timurt \nPlease, change the signature of fireErrors to\njava\nvoid fireErrors(FileProcessingResult fileProcessingResult) . @rnveach \nMaybe, but this should not be done in this PR. I'll think about it.. @rnveach \nYes, you are right. We always can instantiate FileText based on the file name and pass error messages and FileText to the constructor with two parameters. I did not see this fact. Hovewer, it will require to catch IOException from FileText constructor.\n@timurt \nPlease, remove the constructor with one parameter. You always have the file path (file name) to instantiate FileText object and pass it to the constructor. So, both FileText object and the sorted set of localized messages can be instantiated.. @rnveach \nYou are right. AuditEvent should receive FileProcessingResult. Changed the plan.\nhttps://github.com/checkstyle/checkstyle/issues/3573#issuecomment-308438894. > Both constructors don't have an IOException being thrown right now\nFileText constructor throws IOException.\nWe will need to create FileText here. The constructor of FileText which receives the File object throws IOException.. @rnveach \nDO we need 'file' as the first parameter of the process method? We already have the reference to the file in FileText.. Please, correct javadoc. It should not mention List interface.. Why do we need this change?. a list of all lines of the file. See @rnveach's comment. Please fix.. Use  StandardCharsets.ISO_8859_1.name()\n. @rnveach\nI think, that there was sense in static factory method before @timurt's changes, but you are right, we do not need the method anymore.\n@timurt\nPlease, remove the method and replace its usage with direct constructor call.. @rnveach\nThere is no need in copying the file text instance, as I see it.\n@timurt\nPlease, explain or remove the line.. The new issue was created https://github.com/checkstyle/checkstyle/issues/4527.\n\nrelated to the input and output of the process method\n\nWhy do we need to include the output of the process method into CheckstyleFile? Can you explain in the issue ?\n FileProcessingResult represents results (localized messages and information about the processed file). It can include CheckstyleFile which can be an argument of the process method. . @rnveach \nCreated the issue https://github.com/checkstyle/checkstyle/issues/4545 .\n@romani \nPlease, take a look and approve. . Make sense. Moved check.clearMessages() to notifyBegin right before the call to beginTree.. changed to protected. @rnveach @timurt \nWe have this example of the similar case.. @timurt \nThis point is not addressed. . Can we use just assertNotNull(processingResult.getFileText()) ?. Why do we need \njava\nassertEquals(charsetName, processingResult.getFileText().getCharset().name());. @timurt \nPlease, remove. It is unnecessary. Judging by the name of the test the main idea is to check that FileText is not null when it is passed to FileProcessingResult.. Why was the scope changed?. You can use scope for the certain option to make less changes to the config.\nSee https://github.com/timurt/checkstyle/blob/d8b5b759e859f66c8c5e932bce7eb5906e626912/config/intellij-idea-inspections.xml#L967. @romani \n1) AstFilter should be outside API package.\n2) If somebody implements the check which is able to work with AST like TreeWalker, the filter will be available to use in that check. Why should we name it TreeWalker* ?. > I dislike Ast slightly as Javadoc is a form of AST even though we call it Node. If Java upgrades to ANTLR4, will we rename these classes accordingly too and break previous compatibility? And how will we name them differently so not to confuse with Javadoc as both will be nodes?\nOk, lets name them as TreeWalkerFilter and TreeWalkerAuditEvent. \n@timurt \nPlease, do.. Please, don't do unrelated changes at all. This makes the review process more difficult.. This is mess in code. Use the same approach as in Checker. It is easier to read and understand.\n```java\nif (module instanceof AutomaticBean) {\n    final AutomaticBean bean = (AutomaticBean) module;\n    bean.contextualize(childContext);\n    bean.configure(childConf);\n}\nif (module instanceof AbstractCheck) {\n   final AbstractCheck check = (AbstractCheck) module;\n   check.init();\n   registerCheck(check);\n}\nelse if (module instanceof TreeWalkerFilter) {\n    filters.add((TreeWalkerFilter) module);\n}\nelse {\n    throw new CheckstyleException(\n. if ordinaryChecks and  commentChecks are empty we should not do filtering as there will be no messages. Filtering should be inside if block.. a bit weird formatting. Please drop the line after=. Remove final modifier here.. Remove final.. @romani \nShould we add a note that FileContentsHolder is not required any more to prepare users for next step: removal of FileContentsHolder ?. @romani \nSame here. @timurt \nWhy do we need to treat AbstractCheck as AutomaticBean directly?  Please, restore original actions:java\n        final AbstractCheck check = (AbstractCheck) module;\n        check.contextualize(childContext);\n        check.configure(childConf);\n        check.init();\n    registerCheck(check);\n\n```. @timurt \nDo not ignore this point. @timurt \nSo, FileContext holder position should be restored. It should be closer to its first usage.. Use getCheckMessage, do not hardcode violation message in the test.. You declare functional interface. but do not use lambdas. Please, remove. It is not necessary. Future contributor will not understand your intention.. @rnveach\nPlease explain why do we need the annotation ?. @rnveach\nPlease explain why do we need the annotation ?\n. Please explain why do we need the annotation ?. Can we reuse this constructor inside this one ?. @romani \nIt might be reasonable to move it to TokenUtils or XpathUtils.. @romani \nYes, should be made immutable.\n@timurt \nPlease, do for all similar cases. Remove as much setXXX methods as possible. Try to make all nodes immutable and fully initialize them via constructor. So fields should become final if possible. By the way, method count violation may disappear. . @romani \nIt is an incorrect implementation of overridden method.\n@timurt \nPlease, use varargs as Checkstyle suggests. @romani \nThis will increase the amount of copy-pasted code as all subclasses which extends AbstractNode have to implement the methods defined in NodeInfo interface.. @romani \nLooks like the feature request already opened,but is not implemented.\n@timurt \nPlease, add a link to the issue to all suppression comments.. @romani \nWe do the same for AbstractCheck, AbstractViolationReporter, AbstractFileSetCheck, AbstractLoader to satisfy coverage rate. \nIf it should be tested though the concreate implementation, then we need to move the unsupported methods to the concrete classes and copy-paste them to all subclasses.\nSee https://github.com/checkstyle/checkstyle/pull/4815#discussion_r130214936. @romani \n\ndoes it make sense to have util method getRootNode\n\nYes.\n@timurt \nPlease, do.. @timurt \nThe name of the test class should be changed to AbstractNodeTest to follow the general naming convention: NameOfTheClassTest. You do not have class XpathAbstractNode.. @romani \n\nIf any of our Check requires a lot of supression is sign that there is problem in its design\n\nI do not agree. Our checks do not rise violations because they do not extend or implement foreign interfaces which have hardcoded abbreviations in method names. In the case of AbstractNode we implement the interface with abbreviations. We cannot change it, but we rely on it. Thus, from my point of view we should use ignoreOverriddenMethods option of the check.\n\nwe need to have issue on this and define it as a reason of suppress or it is misconfigration.\n\nI think that we need to open an issue and set ignoreOverriddenMethods to true after the merge of this PR.. @timurt \nPlease, do. @romani \nIt is not a bug.\n@timurt \nYour code passes Checkstyle validation without -@cs[AbbreviationAsWordInName] suppressions (ran Checkstyle on my local PC against your branch). Remove them.. @timurt \nDo as @rnveach suggested.. @timurt \nSee https://github.com/checkstyle/checkstyle/pull/4815#discussion_r130232639 and move UTs to the appropriate classes after.. @timurt \nYou are able to get the DetailAST via getUnderlyingNode from RootNode. Please, do as @romani suggested.. invalid token type?. invalid token type?. @rnveach @timurt \nLooks identical. I think we can use TokenUtils.getTokenName. @timurt \nIs is not necessary. To make the class pure util we need to mark it as final, make private constructor, and change all methods to static. . move all private methods down. They should be after public methods.. Write appropriate documentation. Describe the purpose of generator. Add small example of input and result.. Can we avoid recursion and generate xpath query in place, while traversing the tree from the root?. Explain what lineNumber and columnNumber mean in this context. Do the same for constructor parameters.. uses DetailAST traversal. DetailAST means detail abstract syntax tree.. make getMatchingAstElements static. rootAst, lineNumber, columnNumber should become parameters.. generated size is equal to matchingAstElements size. Why should we extend the array size in the loop? Set the size of generated array via its constructor.. Please, explain what you check here. This method can be static. can be static. Replace with while loop. IDEA says that the string should be replaced with StringBuilder as you concatenate string in the loop. Use insert method of StringBuilder to insert the string in the 0 position. Describe all algorithm of the method in the documentation. I do not really understand the purpose of the method without debugging it. Why do we need this field? Why cannot we instantiate xpathExpression in the constructor without storing xpathQuery to the field?. @timurt \nOk, looks like any of XPathExpression implementations do not override hashCode and equals so we cannot rely on them. My original idea was to use XPathExpression in equals, but now I see that it was wrong.. try to use\nfinal XpathFilter nullRef = null;\nassertFalse(\"Filters are not equal\", xpathFilter.equals(nullRef));\nto avoid codacy violation. @timurt \n\nDetailAST means detail abstract syntax tree.\n\nIt is not necessary, please remove. I meant that DetailAST already contains the word tree.. WHy do we need this builder? We will create the new instances of StringBuilder each iteration in the loop. StringBuilder should be used for the cases when you concatenate strings in the loop in order to get the final string result. For example, as in getXpathQuery where you declare StringBuilder outside the loop, but here you create a string and add it to the list. String object is more lightweight than StringBuilder.  . Here you check the siblings. So you can extract the code to the method and give it the user-friendly name to increase the readability of your algorithm.. Please, extract this code to the method. Give it an appropriate name. Think carefully what you do here. The future contributor should understand your current intention easily! Do not afraid to split the logic to the methods, even tiny methods will help to understand your idea in the code. Usually nobody reads comments and documentation. The tend to become out of date. The only real source of the documentation is the code. So be sure that you describe all actions in the code.. Why don't you use StringBuilder in the loop for string concatenation? . It is a bad practice to have \"no\", \"not\" and other negative words in names. Rename it to hasAtLeasOnetSiblingWithSameTokenType.  \nWe do not need firstSibling as a parameter. Call getNextSibling on ast to get the first sibling. Remove getFirstSibling, call getNextSibling, your tests will pass.\njava\nprivate static boolean hasAtLeastOneSiblingWithSameTokenType(DetailAST ast) {\n        DetailAST cur = ast.getNextSibling();\n        boolean result = false;\n        while (cur != null) {\n            if (cur.getType() == ast.getType()) {\n                result = true;\n                break;\n            }\n            cur = cur.getNextSibling();\n        }\n        return result;\n    }. Why do we need this? We can use ast.getNextSibling(). Remove the method.\nDo not create unnecessary local variable identAst.\njava\n    private static boolean isUniqueAst(DetailAST ast) {\n        return ast.findFirstToken(TokenTypes.IDENT) != null\n            || !hasAtLeastOneSiblingWithSameTokenType(ast);\n    }\nAfter refactoring, the name of the method will be inappropriate. Rename the method.. Can be replaced with\njava\n    private static DetailAST findChildWithIdent(DetailAST root) {\n        return TokenUtils.findFirstTokenByPredicate(root, cur ->\n            cur.findFirstToken(TokenTypes.IDENT) != null).orElse(null);\n    }. Can be replaced:\njava\n    public List<String> generate() {\n        return getMatchingAstElements(rootAst, lineNumber, columnNumber)\n            .stream()\n            .map(XpathQueryGenerator::generateXpathQuery)\n            .collect(Collectors.toList());\n    }. remove this method. Reformat\njava\nif (curNode.getLineNo() == lineNumber \n    && curNode.getColumnNo() == columnNumber\n    && curNode.getType() != TokenTypes.IDENT) {\n...\n}. You should explain in the comment this change. We do not need to loop over the set of localized messages in case the filters set is empty. Add the check. If filters set is empty, we should not invoke getFilteredMessages.. What does the final mean in this context? Do we need this in comment?. @timurt \nYour current tests do not prove your idea.\n\nIdea was to iterate all nodes on the same level\n\nThey are siblings.. remove return. It is not necessary.. This is a synthetic example. If you can not prove that we need getFirstSibling with a real compilable code in input file, then you should remove the method.. should be\njava\nif (curNode.getLineNo() == lineNumber\n        && curNode.getColumnNo() == columnNumber\n        && curNode.getType() != TokenTypes.IDENT) {\n    result.add(curNode);\n}. Why is it required to compare cur != ast ? Just for testNotUniqueDetailAst? If yes, it is incorrect, as you cheat manually creating the tree in test.. So, if the xpath query matches event than this method will return true, right? Than the event will be propagated to TreeWalker. \nThis \njava\nif (!filter.accept(event)) {\nwill be evaluated to false and the message will not be removed from the set. Thus, what is the sense of the suppression? What do you filter?\nLook at testMatching. The user writes the query /CLASS_DEF[@text='InputSuppressByXpath'] in order to suppress the violation, the filter should deny the event, but your filter will accept it.. ok. @timurt \nExamples are good.. @timurt \nTests are OK.. @timurt \nGood. @timurt \nYour changes are not correct.\njava\nisMatching = abstractNode.getTokenType() != event.getTokenType()\n                        || abstractNode.getLineNumber() != event.getLine()\n                        || abstractNode.getColumnNumber() != event.getColumn();\nThe name of the method is isXpathQueryMatching. It means that if line, column number, and token type in audit event match those which are received from xpath, then the method should return true. Your implementation will return false. The inversion should have been done in accept method.\nfileNameAndModuleAndCheckNameMismatches should also be renamed to isFileNameAndModuleAndCheckNameMatchig. If isFileNameAndModuleAndCheckNameMatchig returns true, than the event should not be accepted.. If both moduleId and checkRegexp are set to some value such that\n1) moduleId.equals(event.getModuleId() is false.\n2) checkRegexp.matcher(event.getSourceName()).find() is true or vise versa\nthan your filter implementation will accept the event. I think that it is incorrect behavior. We should check moduleId or checkRegexp. If either moduleId or checkRegexp match the event's module id or check, than the audit event should be denied.\nI think, that is should be:\njava\nevent.getFileName() != null\n    && fileRegexp.matcher(event.getFileName()).find()\n    && event.getLocalizedMessage() != null\n    && (Objects.equals(moduleId, event.getModuleId())\n    || checkRegexp != null && checkRegexp.matcher(event.getSourceName()).find())\nIf moduleId is null or does not equal to event,getModuleId() we should go further and check whether the checkRegexp matches event.getSourceName().\nSuppressionLoader will guarantee that both moduleId and checkRegexp will not be null simultaneously.  Either moduleId, or checkRegexp will be set to non-null value. By the way, user is able to set both options. We need to check them all.\nIn my exmaple I use java Objects.equals. It performs null-check inside. \n@romani @rnveach \nDo I understand correctly?. Remove this as it is unnecessary, I guess.. comment out all documentation in xdocs as we cannot show it to users, because the whole model is not ready. We will uncomment the documentation in the future.. boolean methods should be prefixed with 'is', 'has', or 'should'\n@romani @rnveach \nShould this method be part of util class, or should it stay in the filter? I'm not sure now. It is used by both SuppressionFilter and SuppressionXpathFIlter.. the test should fail if the exception is not thrown. Add fail() after  SuppressionsLoader.loadXpathSuppressions(fn);. same. input should be in the package suppressionxpathfilter. Use StandardCharset.UTF-8. javadoc is incorrect. Can we use lengthExpandedTabs to have the logic which is similar to AbstractCheck#log?\nFYI:\njava\nlen = (len / tabWidth + 1) * tabWidth;\nis equal to\njava\nlen = len + tabWith;\nwhich is equal to\njava\nlen += tabWith. I think that we should add 1 as in AbstractCheck#log.\njava\n1 + CommonUtils.lengthCompressedTabs(fileText.get(lineNumber - 1) .... extract all conditions to a method. The condition block became difficult to read and understand. Why the columnNo is 12? It should be 13, I guess as public token starts in column 13. extract the magic number 4 to the local variable. Think about the person who will support your code.. add more exaples with tabs between, after tokens, with tabs which end the line, etc. (Separate tests please). can we use BeforeClass annotation?. be more descriptive. I/O exception occurred when reading file 'filename'. @romani \nYes, I noticed that many contributors do not know StandardCharsets.\nCreated the issue https://github.com/checkstyle/checkstyle/issues/5023. > This is because len and tabWidth are integers.\nIt does not mean that we cannot apply maths rules to simplify fractions. The problem is that the expression is incorrect and confusing. It should be\nlen = Math.floor(len / tabWidth + 1) * tabWidth\nas you said. \n@timurt \nStill do not see problems to use the existing method with rewritten expression to count len.. @timurt \nNo, it is unrelated to CommonUtils.lengthCompressedTabs logic. We add 1 because the column number starts with 0 in DetailAST.. Ok, forgot that we make getPath method related to the object.. @rnveach \nWhat should we do if user does not specify tabWidth? We need to check this outside the class and pass some default value to the constructor. The default value will be stored outside the class. I do not think that it is a good idea, if the class from the outside knows the default value.. @rnveach \nYes, it will be better. @timurt, please do for this method.. OK\n@timurt \nPlease, remove the constructor. len = (len / tabWidth + 1) * tabWidth\nThis expression still looks confusing.. @timurt \nCan you prove that we cannot use the existing method (lengthExpandedTabs)?. OK, lets stay on Before. @rnveach \nNo. The generator will be invoked by Main. Main has the File instance in config, so it can pass File to the generator.\n@timurt \nPlease, fix.. @timurt \nThis line\njava\nast.getColumnNo(), tabWidth) == columnNumber. @timurt \nBe more descriptive in names. The test name should have the short description of its purpose in it.. Comment out the documentation as we are not ready to make it public available. version is not correct. It should be equal to https://github.com/checkstyle/checkstyle/pull/4992/files#diff-7d423a3c3d58607e2748c950c04d32d4R638. Same is for other properties.. @rnveach \nCan we exclude the module from UT till we finally release the whole model and make it public available?. @rnveach \nI do not understand your question. What should be done in the different issue? SuppressionXpathFilter is not ready to be used in our config, so it is removed from validation. We will activate it when the model is ready and available to be configured and used in our code.. @rnveach \nSo, your idea is to copy paste this logic in each test method. Why should I do this? I need to extract the logic which adds multiple children to Checker to separate method. I'm against copy-pasted logic in tests. Test should be as clean and easy to read as possible. Ideally they should consist of 3 parts: arrange, act, verify. If you have more convenient reasons to have the code copy-pasted, please, prove your idea.. @rnveach \ncreateRootConfig  is declared as protected in master. Protected, public methods are supposed to be overridden. The method in AbstractModuleTestSupport does not have any documentation which explains why it is prohibited to be overridden. createRootConfig is not marked with final modifier. Thus, it means that if the developer is not satisfied with the logic, provided by the abstract (parent) class, he has the right to override the method. The last but not the least, once again, what is the reason to copy paste the code which creates the root config with multiple children in the loop in each test?\nJudging by the comment \n\n\nSome UTs don't use createModuleConfig\n\n\nWhy is it so special? If it is required for the regression tool, I still do not see any final modifier to think of the method as forbidden to be overridden.\n. Done. In addition, I added the warning for the users.. @rnveach \n\nIf you have need for multiple tests to use alot of common children configurations, you can move all out into a custom verify method.\n\n1). Explain what is the difference between the method which creates custom checker configuration with multiple children and custom verify method which will contain the logic which creates the checker with multiple children? What is the point? \n2). I still need the checker instance which configuration consists of more than one child. I do not want to use createChecker methods, as they do not correspond to my needs. verifySuppressed uses createModuleConfig method which creates TreeWalker configuration. If I use the similar method to create Checker configuration it will be the same logic as in the createCustomChecker now. \n3). Did you mean that the verifySuppressed method should become:\n```java\n    private void verifySuppressed(String filename, String[] violationMessages, \n                                  Configuration... checksConfig) throws Exception {\n        final DefaultConfiguration checkerCfg = createModuleConfig(Checker.class);\n        Arrays.stream(checksConfig).forEach(checkerCfg::addChild);\n    final Checker checker = createChecker(checkerCfg);\n\n    verify(checker, getPath(filename), violationMessages);\n}\n\n```\nIt is not a solution, because in some tests I need the Checker to be configured to check only JavaScript, properties files, etc. If we extract the logic of creating Checker configuration to verifySuppressed, we will need to extract the extensions config property to the method parameter.\n. @rnveach \nOk, I got it. I refactored my code. Please, review once again.. @rnveach \nUser is still able to use the filter to filter AuditEvents from FileSetChecks. FileSetChecks can see the java code as plain text too. The author of the issue has problem running checkstyle against java code.. I cannot do this, because SinglelineDetector is package-private.. Done. Done. Ok. Done. Add non-java examples. \nSee https://mezk.github.io/i4841-SuppressWithPlainTextCommentFilter/site/config_filters.html#SuppressWithPlainTextCommentFilter. Rebased. Done. Done. Done. Done. Done. Done. Done. The class prints xpath suppressions. The name should contain this fact.\nFYI:\nCheckstyle has classes which 'prints' the content of AST tree or its parts. Truth be told, these classes designed incorrectly, as for me. They do not print objects, they construct strings. From my point of view, the correct pattern for printers is to print something to the stream (OutputStream, File, etc). The printer should know nothing about the stream which receives the information except its interface. So the printer is similar to the formatter. It prepares and formats the information for the output stream. For more information see http://www.yegor256.com/2016/04/05/printers-instead-of-getters.html. It is not the case of this PR, lets do not break the current Checkstyle printers model, it is just something for you to think about.. The description should contain the information about xpath.. Please, print to the user the valid format.. Can we use Stream API from Java 8 here and Collectors.joining as a terminator for the stream? Stream API allows you to simplify the logic and get rid of the conditions. The code without conditions (linear) is easier to read and support.. @rnveach \nI remember. My request was to use stream() -> map -> collect. This pipeline does not require imports from forbidden sources.. > arg is the line and column number (separated by a : ) in the file that the suppression should be generated for\nGood example. Easy to understand as for me.. Can we use AbstractNode instead of ElementNode? We need to use iterfaces or abstract classes where possible.. use System.lineSeparator() instead of \"\\n\" where possible. The name of the method is not good. It checks whether the class is anonymous and if not, it returns default Details object (a king of null object). Thus, the method returns details for both anonymous class and simple object instantiation. . Not errors. Usually we call them 'violations' throughout the Checkstyle documentation. Please rephrase to avoid misunderstanding . Yes, we need to test generated queries one by one.. I agree with @rnveach . Method parameters usually have broader scope then lambda parameters. For example, I want to disallow single character names for method parameters and allow them for lambdas, because lambda block usually contains small number of lines, and it is easy to hold the context of it in mind.. @romani \nAs far as I remember. you are against negative words in the method names.. Maybe it will be better to rename to \"shouldCheckGroupsNeedSeparation, etc. Method names which return boolean usually start with \"is\", \"should\", \"can\", \"exist\", ..... ",
    "pietern": "You're right, I started out with a copy of one of the other handlers.\n. The second command should be negated, because it's when the lambda IS the first element.\n. It's needed because a lambda body is an SLIST, which needs to be captured by the line wrapper.\n. Sounds good, I'll add a few more.\n. I honestly don't remember, it's been about 2 years since I last used checkstyle :). ",
    "liscju": "Fixed, uses equals() now\n. DONE. I added this because of @romani suggestion:\n\n\nRemoving catch token from list of tokens does not help, because problem with SLIST persist. Thats why EmptyCatchBlock has nothing to do with this case.\n\nplease add this to xdoc to deliver that nuance to user. It will be useful.\n\nIn my view parameter is so self explanatory it does not need an example, and issue with SLIST is a subset of general problem with empty catch blocks in WhitespaceAround check.. Ok. This is incorrect, the comment stated why. This is wrong, token.getLineNo() returns lines in range <1, N>, getLines operates in lines in range <0, N-1>. So the line returned by token.getLineNo() is in getLines(token.getLineNo() - 1), previous line in getLines(token.getLineNo() - 2). Did you read the comment with understanding?. You extracted the variable result, assigned it to false then returned it so why did you create it in the first place?. You added checking if lastToken is not null but few lines after this lastToken is used to calculate currentEnd:\njava\n          if (lastToken != null && isComment(nextToken)) {\n                     final int currentEnd = lastToken.getLineNo(); \n                     nextToken = nextToken.getNextSibling();\n          }\n          // Start of the next token\n         final int nextBegin = nextToken.getLineNo();\n         // End of current token.\n         final int currentEnd = lastToken.getLineNo();\n         return hasEmptyLine(currentEnd + 1, nextBegin - 1);\n     }\nThis does not make you suspicious that something is clearly wrong?. Why did you exclude endLine from checking? This is wrong.. ",
    "Vladlis": "{@code catch} can be used here\n. Thanks, that's a good point.\n. Done. @rnveach, thanks! Done.. @rnveach, good point, I've left getContents() and marked it Deprecated. Done. Done. Done. not actual. I've moved checkstyle_packages.xml to test resources as we don't need it anymore, but it is still used in test: https://github.com/checkstyle/checkstyle/blob/master/src/test/java/com/puppycrawl/tools/checkstyle/PackageNamesLoaderTest.java#L64. @romani \nOK, xml is kept. Some canonical names do not fit in a single line, so they need to be split - that is where the first part is the same String literal. If name fits line, then BASE_PACKAGE is not used to avoid creating extra Strings.. Thanks, didn't see it, done. Thanks, done. rebased. I believe there also should be a comma after \"\u0432\u0435\u0440\u043d\u043e\". Please take a look at wikipedia.. @romani , because this exception is not declared in the method signature. Done. Why not move this to validate(...), why we need a separate method?. I'd pass there something like a line number. @rnveach \nThis makes perfect sense, you look farther, than I do :). There's no need for braces, use else if { construction as it is done above in this method.. It is not clear how overlapping is different from overshadowing. This should be explained somewhere like in check's javadoc.. Don't try to fool an idea inspection - if it is wrong then it should be suppressed.. https://github.com/checkstyle/checkstyle/search?utf8=\u2713&q=noinspection&type=Code. annotation -> the annotation or an annotation\nI am not sure, @rnveach can you take a look please?. @rnveach, why? I guess !str.isEmpty() is simple enough. Do not change this line. I did think about it, but\n1) it is actually better to see all the logic in one place - it becomes clearer\n2) the best option of splitting I could imagine was smth like:\njava\nreturn shouldBeAloneOnLineWithAloneOption(details)\n               && bracePolicy == RightCurlyOption.ALONE\n           || shouldBeAloneOnLineWithAloneOrSingleLineOption(details)\n               && bracePolicy == RightCurlyOption.ALONE_OR_SINGLELINE\n           || details.shouldCheckLastRcurly\n               && details.rcurly.getLineNo() == details.nextToken.getLineNo();. yes, fixed. ok, done. Please rename this test to smth meaningful, at least \"testDefault\". > except for \".git\" folder\nmaybe also exclude everything mentioned in .gitignore?. checkstyle.iml isn't right, actually name of an .iml file depends on how you call your project in IDEA. Checks -> Check. DeprecatedIsStillUsed - this rule might not be enabled in our TC config. I am not sure how TC is configured. This configuration might not be related to TC build.\nWARNING would be reported as warning in TC as well I guess.. Violation is reported for line which contains right curly of the inspected array, therefore an exception is expected on line 37.. @rnveach \nThis change seems valid and do not see a reason to introduce one more input with a wrong package.. This is how check behaves currently, check out this example.. Done. Done. Fixed. Fixed. Not sure if I understood your comment right but explanation is extended.. Done. Done. Done. @romani why are these cases violations?  Both arrays have trailing commas.. 1. I think this would require a new message.\n2. Why don't we violate this case then?\njava\nint[] a2= new int[] {\n        1,\n        2,};\nWe could require } to be on a new line. BTW we have RightCurlyCheck which is responsible for such logic.. Done. Done: examples are added to Input file and xdoc.. Done. Done. Javadoc should be updated as you have changed method's purpose. I think hasWhitespaceBefore should be renamed to hasOnlyWhitespaceBefore in a separate commit. Please increase offset here. in this and other similar comments - iff -> if ?. No. While it is a separate module we can suppress violations in some files for max=1, but still enforce max=2 in the same files. If the modules are combined we will suppress violations of ReturnCount completely.. We cannot move classInfo inside else as it is used in if condition.. moved fixedPath one line up. I guess so, but let's wait until @romani or @rnveach confirms. ok, let's stay with the existing algorithm. Done. Done. Done. Fixed. Done. Done. I'd use == for enum values. Please, increase indentation here.. line 176. a). @Kietzmann \nLook like this method does the same, but depends on Guava.\nAs we do not plan getting rid of Guava I'd use the existing method as it is shorter.. Please move left curly to the previous line. Please move left curly to the previous line. Please rename in something more meaningful like treeLeadingAsterisksExtended (the same for the input file). Please move throws to the previous line.. Strange way of verification. Can't something like this be used?. Still the test will be clearer. I think this option will be closer to BDD.. Please use never() instead of times(0). @ps-sp \nI am aware it is the same functionally, but it improves readability, like assertEquals(a, b) vs assertTrue(a.equals(b)). The issue description says\n\nall after tagname should be TEXT\n\nBut you allow a other tokens too. I think only text should stay.. I am not sure whether the block tag should be affected by this issue.\n@romani , please share your opinion.. Again, as @romani says in the issue description - we cannot know how a custom tag should behave - it might not recognize HTML or other javadoc tags inside as well as {@code } for example. So we should allow only text.. @sharang108\nIt must start with InputRegexpHeader, so you can append anything appropriate.. This statement is about block tags. Please provide a link for inline tags.\nAlso I don't see anything about interpreting HTML.. I think when someone adds a custom inline javadoc tag - the aim is to add a custom processing of the text inside this tag and since we cannot know what kind of processing it is we should treat it as just text.. I don't like output as files in this folder are not something we produce. I propose using tree or trees as a folder name and <input file name>Tree for files inside.. printFileAst().replaceAll() and getFileContent().replaceAll() look like pieces of code which should be extracted to private methods, as well as \"\\\\\\\\r\\\\\\\\n\" and \"\\\\\\\\n\" to constants. Please add inputs with whitespaces and tabs after \\r and before *. ok. ok. Isn't condition on this line covered by the previous one?. Why do we need this method?. Please make \"\\\\\\\\r\\\\\\\\n\" and \"\\\\\\\\n\" constants.. It would be better to have a separate commit for refactoring/extending of BaseCheckTestSupport. @soon, please create an issue to add properties to documentation later in order not to forget to do this. It is not a minor for sure - it is a bug. And I think it's ok to keep this change in the same commit..  Do these changes with WS block current issue? If they don't then please open a new issue and move changes with WS in tags there.. Please add inputs with htmlElement in @see. I am interested in case when htmlElement is followed by some text without a WS between them.. You completely remove CLASS from reference, but we still should be able to determine CLASS if we have HASH.\npackage.foo#method\nIn this case foo can only be a class, isn't it?. @romani \nyou said that they should be affected https://github.com/checkstyle/checkstyle/pull/4423#discussion_r120632674\n@ps-sp I don't think a new issue is needed. Please split changes for inline tags and block tags in separate PRs to speed up acceptance.. There is no such class. A thread mode settings -> Thread mode settings\n(A cannot be used with plural). Same here. Please add this example as input. @romani, title is changed. I do not understand why _input.LA(1) == '}' is here? Is there a test input for this case?. Please move changes with WS to a separate commit.. it's ok to have a separate input file. I'm not sure whether this change is suitable in current PR. @romani @rnveach please share your opinion. Ok, I see the reason, but which tag in the provided example covers the case when } goes right after PACKAGE_CLASS?. indentation changes are not expected in this PR. Why do you add a NEWLINE here?. {@value lang.Integer#MAX_VALUE} - here } goes after MAX_VALUE\nPlease add the following input {@value lang.Integer}. could possibly be responsibe - I don't like this wording, as it sounds too uncertain.. javadoc says that method searches for a tag, but method name says that it generates a message.. Try to avoid negation where possible. Please extract this condition:\nif (token.getType() == JavadocTokenTypes.HTML_TAG_NAME) {\n// everything else here\n}. [ is missed. I see test which check messages for containing no viable alternative, but do they also cover FailedPredicateException?. No need for wrapping line here. ok. What's the reason for usage of iterator? Why not simple for loop?. Please increase indentation here.. Does impractical mean impossible? Because if EOF is possible there I think we should support it.. Please move declaration of these two variables to the place of their initialization.. Same here, please do not split initialization from declaration. Please, use interface Deque for variable declaration instead of implementation.. @romani, this change looks good to me\n@rnveach , please share your opinion. I think it's ok. Please do not use arrays, just do put as many times as needed.. I think this change is fine, but it should be done in a separate commit.. hasUnclosedTags -> hasUnclosedTag. unclosedTag -> isUnclosedTag. all tags are going to be nested as a result of #3810, aren't they?. after move to JavadocUtils method createFakeBlockComment can be called directly. every case has to be added in test input. why do we need (WS | NEWLINE)* here?. Changes in NEWLINE are not expected. ok, thanks. What tool has reported this violation? I do not think it is correct. ok, I think percentage should be decreased in config\n@romani @Nimfadora is it correct?. ok. @romani \n@see something won't match in this case: something matches reference? and then goes NEWLINE which doesn't match neither (WS | NEWLINE)+ STRING | htmlElement) because after (WS | NEWLINE)+ must be STRING | htmlElement nor ((WS | NEWLINE)+ description) because after (WS | NEWLINE)+ must be description. In this case /**@see something*/ won't match: @see something matches SEE_LITERAL (WS | NEWLINE)+ reference? and then goes EOF but suggested regexp requires at least two matches to (WS | NEWLINE). Please also remove exclusions from cobertura. ok, after searching a bit on the web - looks like it's a widely used practice, let's leave unclosedTag. Even if follow this rule it is unclear why field name says whether tags are present, and method name says only about one tag. Let's be consistent.. ok. Done. Can't we just extract all NESTED_HTML_CHILD_PARENT_MAPPINGS.put(...) to a method with a name like fillMap()?. I don't like MAPPINGS, please use just MAP. It isn't obvious here why nested != unclosed even though it is explained in javadoc of getParentTypeWhenNested(). Actually the main reason of getParentTypeWhenNested() is to get parent type when a tag is unclosed, so I think that getParentTypeWhenUnclosed() is a better name.. I think every case should be in a separate test. Thanks, good point.\n@romani, do you agree?. Please explain how is this related.. @ps-sp \nPlease remove this property.\n@rnveach @romani \nI thought we have some inspection to detect unused properties. If not - should we add one?. @romani \nDo you mean smth like:\njava\nif (!doesCheckAcceptJavadocWithUnclosedHtmlTag()\n        && JavadocUtils.hasUnclosedTag(javadocTree)) {\n    if (violateNonTightJavadocHtml) {\n        // log violation\n    }\n}\nelse {\n    processTree(javadocTree);\n}\nor\njava\nboolean hasUnclosedTag = JavadocUtils.hasUnclosedTag(javadocTree);\nif (violateNonTightJavadocHtml\n        && hasUnclosedTag) {\n    // log violation\n}\nif (doesCheckAcceptJavadocWithUnclosedHtmlTag()\n        && !hasUnclosedTag) {\n    processTree(javadocTree);\n}. @romani , I think current solution is less complicated and modifying grammar might slow parser down. here and in the whole file: unclosed -> nonTight , I suppose. a new tag can be missed in grammar as well, but yes possibility is lower\n@ps-sp , sorry for misleading by my comment, please follow Roman's request. @romani , does this look like a utility method? https://github.com/checkstyle/checkstyle/blob/46fa8090954480eecdeb6e7367f0e30655853f42/src/main/java/com/puppycrawl/tools/checkstyle/DetailNodeTreeStringPrinter.java#L91-L101\nI think it does. If you agree we should make it public and move to JavadocUtils.\nOtherwise reflection usage is reasonable.. @ps-sp , Holder class... doesn't sound good\n@romani , can you please remind what is wrong in keeping flag in DetailNode ?. (WS | NEWLINE)+ - will this work for /** @exception*/ ? Please add such inputs in UTs for every tag. @romani , Please address. @ps-sp , as discussed with @romani - we definitely shouldn't use Holder\nI guess using some structure to transfer DetailNode, flag and all additional info for violation message would be OK.. Please extract violateExecutionOnNonTightHtml || !doesCheckAcceptJavadocWithNonTightHtml() to a local variable.. here and after please put whitespaces around ==. @ps-sp , Please address @rnveach comment. I think this assert should be in a separate UT with a separate input.. Same here. can we avoid using a global variable?. Please use constant instead of \"javadoc.unclosedHtml\". I don't understand !looseHtmlInJavadoc part, please explain. yes, I think it would be better. ok. @ps-sp , I am not sure...\n@romani , Please take a look. let's use Enum. > Also commenting just the statement for noinspection seems better than noinspection for the entire method, doesn't it ?\nI think it helps to keep code less polluted.\n\nI wonder why was teamcity check for this PR failing then\n\nI have no idea, @Nimfadora can you take a look?. this looks better. @ps-sp , yes, it is a typo, there should be !result.isTightHtml()\nJust add fields to ParseStatus instead of using error listener. @ps-sp please also rename enum as Roman suggests. @ps-sp \nwe need smth like\njava\nif (result.getParseErrorMessage() == null){ \n    if (!result.isTight() && violateNonTight) {\n        log();\n    }\n    if (result.isTight() || doesAcceptNonTight()) {\n         processTree(result.getTree()); \n    }\n} else {.... I don't like it, we should not pass an object to a method to modify it inside. But I don't see what to do instead.\n@rnveach @romani please help. 1. Maybe.\n\nI guess, It will not be thread-safe as long we use one instance of JavadocDetailNodeParser in AbstractJavadocCheck.\nStrange that JavadocDetailNodeParser has other class members: blockCommentLineNumber and errorListener. And even stranger why do we use only one instance of JavadocDetailNodeParser in AbstractJavadocCheck.\n\n@romani, please share your thoughts. This property should be documented in xdoc as well as the other properties.. I am ok with the current option. No hack is needed, right now XDoc test ignores this property. \nCreated #5002. @rnveach \nI asked @ps-sp to have only one assert per UT to make them as independent as possible. Since verify verify() is meant to assert smth we cannot use it in this case.. OK, my bad, I didn't take into account that specific checks are used and they only count calls and don't log violations.\n@ps-sp, please use verify.. wait, AbstractJavadocCheck can log violations and it is a parent of the used check, so I still think we should not mix assertions:\ntestNonTightHtmlTagIntolerantCheckReportingNoViolation - to assert no violations\ntestVisitCountForCheckAcceptingJavadocWithNonTightHtml - to assert method calls number\n@romani, what is your position?. yes, please open an issue. @ps-sp \nas discussed with @romani: lets just use a general exception message key\nhttps://github.com/checkstyle/checkstyle/blob/master/src/main/resources/com/puppycrawl/tools/checkstyle/messages.properties#L4\n. Please also add more complicated examples like int a = new int[][]{{1}, {2}}[0][0]. Please move all to getIndexOpPreviousElement. please use new int[]{1}[0] as new int[]{1}[] is not compilable. To be added:\nnew int[][]{{1},{2}} [0][0]\nnew int[][]{{1},{2}}[ 0][0]\nnew int[][]{{1},{2}}[0 ][0]\nnew int[][]{{1},{2}}[0][ 0]\nnew int[][]{{1},{2}}[0][0 ]. Ok. Why add LEADING_ASTERISK here? Is there a corresponding tets case?\nIf LEADING_ASTERISK is needed I think it should be a separate issue.. htmlElement allows any element while it should only be  tag, please open a new issue. Ok. @romani @rnveach \nI propose to stay with current test in this PR and discuss this problem in details in a separate PR or issue. Please add also test with checkConfig.addAttribute(\"reportVisitJavadocToken\", \"true\"); and checkConfig.addAttribute(\"violateExecutionOnNonTightHtml\", \"true\");\n. > This needs to be looked into further\nPlease open an issue. @sergileon \nnot fixed, please read attentively - you need to keep only one example:\njava\npublic void a(final char @NotNull [] a) {} // No violation. Why do we need isArrayDeclare and all those additional methods like createFullIdentMaybeArrayDeclare and createFullIdentMaybeArrayDeclare? Do we even need extracting FullIdent without arrays?. please revert superfluous changes. I think here https://github.com/checkstyle/checkstyle/blob/66cc9d43c9620678078d2716308ee61916227fcb/src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/AbstractClassCouplingCheck.java#L213\nwe just need to use https://github.com/checkstyle/checkstyle/blob/1d9b547ac98d69166db532a7cb275080206ff097/src/main/java/com/puppycrawl/tools/checkstyle/utils/CheckUtils.java#L159\nthat has to resolve problems of ClassFanOutComplexityCheck. The second example looks better\n@romani , please take a look. Why paragraph is being tested in this PR?. That has to be at least a separate commit referring \"increase coverage\" issue. @ps-sp, please also share cobertura report to support you comment. Do not change checkstyle config because of one file, please use suppressions.xml. Also when you add smth in suppressions you have to explain in comment why it cannot/should not be fixed.. Please do not mix inputs, there should be one input per new token to make test cases clear.. as you add default value please also add it to xdoc. one dimensional -> one-dimensional. When I read this comment I start thinking that only multi-dimensional arrays are ignored. Please make it just ignore array part of type.. This comment explains nothing, it should say why can't we just make complexity 25 or lower. As we discussed privately: it is OK to reuse an existing comment if it fits, so you can just add new suppression to the same group without an additional comment.\n. Why do we ignore annotations under ANNOTATION_DEF?. I think both @Target and ElementType should be counted, as they are not excluded. yes. If we have TYPE_UPPER_BOUNDS, then don't we need TYPE_LOWER_BOUNDS here too?. I suspect this can result in violation message duplication in a case like Foo<? extends Foo>. Please add this case as an input.. Please add also input with super. http://checkstyle.sourceforge.net/config_coding.html#IllegalType\nPlease see properties ignoredMethodNames and memberModifiers - they have to be applied when any TYPE is used, that is why I think we check TYPE only at this point and do not add it to acceptable tokens. The same goes for generics. So please:\n1) remove new TokenTypes from getAcceptableTokens and modify checkClassName method\n2) add new UTs: generics + ignoredMethodNames and generics + memberModifiers. 2 WARNING -> 2 WARNINGS. Good question raised: https://github.com/xwiki/xwiki-commons/pull/20#discussion_r140438164\nI think we should always exclude these annotations like we do for imports with java.lang. @romani \nPlease confirm that we want these new tokens to be in getRequiredTokens, we might only need them in getAcceptableTokens and getDefaultTokens. Actually I find this strange - if user needs to add one more class to excludes he also has to duplicate all our defaults which I guess are usually excluded by everyone, so this leads to a huge list of classes in config.. Please remove superflous changes. As method became public there is no need in reflection.. Both moved methods seem to have the same purpose, but different parameters - can we use overloading here?. Please put a comment with explanation why this suppression is needed.\nYou can reuse https://github.com/checkstyle/checkstyle/blob/master/config/pmd-test.xml#L59. Please add javadoc similar to GeneratedJavaTokenTypesTest. Please add suppresion for TC like we one have in GeneratedJavaTokenTypesTest. Please remove this comment. Please don't just throw an exception when getCanonicalFile() is called, but reproduce a situation(s) when this exception can be thrown.. Can we reproduce exception from the issue?. One more indentation change to be removed. Method is in CommonUtils now, so it is meant to be used anywhere, not only in Javadoc parser. Please update javadoc for this method.. Why we need spy here?. ok. This javadoc makes me feel like if isVoidContext is true then context returns something, but it should have an oppposite meaning. Please a change to Identifies if context is void. - I think that is enough clear enough.. Please use context instead of method. Please use Identifies if context is void.. for void methods/constructors/lambdas methods is - word methods is repeated twice, please fix here and in all translations.. Why do you set property to the outer class field? Please refer directly to isVoidContext from inside the same object:\njava\nisVoidContext = voidReturn;. Same here, please use isVoidContext instead of context.isVoidContext. m\u00e9todos is used twice, please recheck all translations for duplicating methods. Such changes in test are hard to validate, please make a separate test with a separate input for new test cases.. I think we also need to start validating default block in scope of this issue. Please add test cases for default too.. Do we have test cases with { which do not produce violations. If no please add.. @rnveach done.\nThere is even a comment I didn't notice at first :)\nhttps://github.com/checkstyle/checkstyle/issues/5207#issuecomment-345484643. @romani\nThere is an issue for this:\nhttps://github.com/checkstyle/checkstyle/issues/5450. @rnveach done\n@romani I was only able to make it work this way. Without cd I was getting \n\nGoal requires a project to execute but there is no POM in this directory (/home/ubuntu).\n\nlike here: https://circleci.com/gh/Vladlis/checkstyle/324. well, CI was green only due to a missed cd and now this doesn't work either. ",
    "rnveach": "@mkordas \nRegexpOnFilenameCheckTest.testException showcases when this happens.\nTruthfully, I don't think this exception can be reached normally since we have already read the file by this point. The main reason for the catch is because we can't throw the IOException as is, and like I said I just used the original implementation's logic for that.\n. @mkordas \nWe don't set the pattern fields when the class is created. They are only filled in once the init method is called if the fields are still null, meaning the user didn't specify any properties. This is by design so when the users specify atleast one property, all the matching are under their control for full customization and not defaulting to the 'no-space' version.\n. @mkordas \nThe new check was added to XDocsPagesTest.XML_FILESET_LIST for proper validation during the XDoc tests, like the other Regexp checks listed there. The suppression is there because one of the methods in the class was never fixed for how complicated it is.\n. Fixed.\n. @robertpainsi Thanks, I will update it.\n. > Why not simple boolean accept(String uri); ?\nAgain, another copy/paste from FilterSet/SuppressionFilter.\n\nWhat else xxxxxxxxxxxFileFilter could care about ?\n\nDon't forget the event also has the source, though we don't use it even in AuditEvents. I assume there is a reason we went with it originally.\nDone.\n. Again, another copy/paste from FilterSet/SuppressionFilter.\nDone.\n. Again, another copy/paste from FilterSet/SuppressionFilter.\nDone.\n. > the whole reason of the issue was to customize NonEmptyAtclauseDescription \nI took your reply here to mean there were no optional tokens for any checks.\n\n\nWas that documentation valid where the 2 tokens are optional?\n\nI doubt it was valid. It was imaginary config. \n\nAre there any other optional tokens for the javadoc checks?\n\nWe do not have.\n\nDone in next update.\n. Is there a reason for this? getAcceptable's default implementation copies getDefault, so in the end it is the same.\n. Done.\n. Why lambda and not field definition? Are all lambdas considered a code block from the perspective of this utility?\nThere is no removal of violation in report for this line which is still a lambda: https://mezk.github.io/i1254-JavadocVariable/xref/home/aselkin/IDEA_Projects/contribution/checkstyle-tester/src/main/java/openjdk8/src/share/classes/java/time/temporal/TemporalQueries.java.html#L381\nMakes me think lambda isn't the direct issue.\nEither way, how about we add the change to the method javadoc? It wasn't updated.\n. @agcuda The examples you added went in the description where as we have a sub-section specifically for example configurations. Please move your examples to that sub-section and give each one a brief 1 liner to describe what the example accomplishes.\n. I also like the idea of null being the default and it means all scopes. Until I looked at the Scope class, I didn't understand how ANONINNER played in to the check. We should add to description and example that null for scope means all.\n. Examples must be in <source> tag, not <pre>, to be validated by our unit tests.\n. Example of validation not being run against this example. Line is missing end quote to value attribute.\n. @agcuda yes that is my suggestion. Otherwise I would think you would have to explain ANONINNER to the users. Explaining null seems easier to understand imo.\n. @agcuda After talking with romani, we decided to leave it as ANONINNER so we can get this PR finished sooner. I will add this as a note to the referenced issue so it can be fixed there when we remove the enum.\n. Done.\n. Done, was a copy/paste of the one above it which I also changed.\n. Done.\n. I see tests for while, if, else, for but not for do. Can you please add something for do.\n. I think we have to add the token DO_WHILE.\nWHILE = while (true) { }\nDO_WHILE =\ndo { // this is DO\nwhile (true); // this is DO_WHILE\nIt could have been overlooked if external users though WHILE and DO_WHILE were the same token.\n@romani Do you agree?\n. This code isn't easy to read and confused me at first.\nWhy are we using the same input file with different configurations? Why can't we use different input files and make test simple without conditional removes?\nIf we have to update input file, this kind of removal might go missed and hide issues in the file.\n. @romani How is this report generated?\nCurrent link isn't valid. Is that something that has to be updated in this PR or does this file create that report and the link will be valid on merge?\n. @romani We don't guarantee order of checks will be the same order as configuration file, right? (see #3340)\nRight now this code passes, but it depends on order being the same as XML file.\nCurrent holder in TreeWalker is HashSet which means its order could be unpredictable since we don't override hashCode for checks (same as issue).\nShould we change this to prevent relying on order? Shame nondex doesn't catch something like this, maybe I'll make an issue for it with them.\n. This can be ignored. getCheckConfig calls DefaultConfiguration.getChildren which is an array list, not a hashset like other areas. Order is guaranteed here since array list is insertion order and XML parser guarantees order too.\n. @agcuda I think this can be ignored, unless romani disagrees. I thought underlying list we were retrieving the checks from was another hash collection but after looking closer it is coming from somewhere else that is an array list. Order is being maintained for this instance.\nSorry for the confusion.\n. Done.\n. @romani This can't be done without an API change to MessageDispatcher or a temporary field variable.\ncache.put requires the timestamp of the file and the method signature doesn't receive that variable. This method is being overriden from MessageDispatcher.\nMethod signature only gives us fileName and it seems like a hack to use that to re-retrieve the file's timestamp.\n. I changed this to a normal FileSet with just a log in processFiltered and no finishProcessing or fireErrors.\nIs this ok? Or do you still want AbstractCheck?\n. Done.\n. @romani OneTopLevelClass was not added a few lines down from here. (around 121).\nShould it be added even though the class is mentioned elsewhere? We mention some checks multiple times.\n. @romani I don't think we support a single blank line separates the two blocks. There are no other blank lines between import statements. yet.\nSee top of https://github.com/checkstyle/checkstyle/pull/3519#issue-186128820 .\n. @romani They added lambda to the examples.  We specify LeftCurly and RightCurly but it doesn't look like RightCurly supports lambdas as a token. Shouldn't we require this in the check?\nLeftCurly also has alot more tokens than right. Will this cause us to validate one brace and not the other?\n. Just noting that we changed from 80 or 100 to just 100.\nWe support this.\n. Grouping enums was 4.8.1. This line is for 4.7, grouping parenthesis. Nothing changed here.\n@romani 4.8.1 lists no check. Should it say EmptyLineSeparator?\n@agcuda between enum values You mean the token ENUM_CONSTANT_DEF? If so check doesn't accept that token, so it is not looking at them. \n. Just a note. Document removed initialized as soon as possible just from the header, but still discusses it in the actual text.\n. I created an example in #3546.\nDo we want another issue to make Left and Right curly accept the same tokens? Unless they are equal, or you can explain why they shouldn't be 100% equal, we will have other areas were one validates the opening brace and the other one doesn't validate the closing brace.\n. Done with #3547\n. How does predicted fit into what this method does?\nI think the correct word here is preceded since we are checking if the javadoc comes before (precedes) the token.\nPlease update name and javadoc.\n. Can we get a slightly better description than just duplicating the parameter name?\n. why not just make lineIndex the value of lineNo - 2 and decrement each loop. This will save us from having to redo this calculation each time through, twice.\nAlso please stash the result of getLines as we do a clone on the values each call.\n. What if the user has a space/tab before the *?\n. If we know the result is true, then why don't we break out now?\n. This was moved to the class that called it, JavadocDetailNodeParser.\n. Taken from: http://docs.oracle.com/javase/7/docs/technotes/tools/solaris/javadoc.html#packagecomment\nNote that while the comment separators /** and /* must be present, the leading asterisks\non the intermediate lines can be omitted.\nTaken from: http://docs.oracle.com/javase/7/docs/technotes/tools/solaris/javadoc.html#leadingasterisks\nLeading asterisks - When javadoc parses a doc comment, leading asterisk (*) characters on\neach line are discarded; blanks and tabs preceding the initial asterisk (*) characters are also\ndiscarded. Starting with 1.4, if you omit the leading asterisk on a line, the leading white\nspace is no longer removed. This enables you to paste code examples directly into a doc\ncomment inside a <PRE> tag, and its indentation will be honored. Spaces are generally\ninterpreted by browsers more uniformly than tabs. Indentation is relative to the left\nmargin (rather than the separator /** or <PRE> tag).\nWe should accept Javadocs with no leading asterisks. If they omit the leading asterisk, your current code will fail thinking it is not part of the Javadoc as your lineBefore.charAt(0) != '*' is looking for the leading asterisk.\nSince we are looking above the package it can't be another node as there are no valid nodes that go above the package. We can only run into Javadocs or Comments.\nI think we should change the leading asterisk check to a leading comment check (// or /*).\nWe should also have a test for this.\n@romani Do you agree?\n. You missed renaming to preceded.\n. it is LITERAL_DO instead of DO_WHILE. Please fix.\n. Same here.\n. Done.. Done. Wording updated and added example.. @Vladlis The test @romani is talking about is SuppressionCommentFilterTest.testAcceptNullFileContents.. @romani Isn't this breaking backwards compatibility renaming this public static method? Are we ok with this for a minor release?. Why we declare full path when you created the method getResourcePath to make this simple?\nLets change this to use the new method.. Why public? I prefer to be very strict with modifiers.\nUnless there is some reason, which I don't see, this should be private.. @romani Since this is test, there is no javadoc. Do you want me to create one just to add this annotation?. I can make this scope if you wish.\nI think I added policy because other enumerations said policy like \"left curly brace policy\" and \"block policy\" and \"closing parens\" (notice type doesn't say policy but description does).. Because of pitest separation, we will most likely need to write a junit to verify we always have all packages added to pitest. We should rename this to follow \"pitest-\" plus the package name. I think we should rename this to pitest-sizes (missing the s on end) or pitest-checks-sizes depending on if we are going to run this on non-check classes like API, Main, etc.. Since we will have multiple profiles for each run, lets make this version number a property so we only have to define it once.. failWhenNoMutations: Whether to throw error when no mutations found.\nIs there a reason why we don't set this to true?. That is fine.. @Efremenkov for the out of bounds exception, did you try the workaround listed in https://github.com/checkstyle/checkstyle/issues/3271#issuecomment-255500681 ?\nThat fixed the problem for me. I'm not sure how to connect it to just a profile as it requires changes to what is compilable.\nGrammar might be picking up our antlr grammar tests, which might explain the extra time. Those files are generated and shouldn't be in pitest.\nThe only true class in grammar package is CommentListener and it is an interface, so really there is nothing to test in grammar package.. when you say custom you mean any that I have been adding recently?\nSo that would only be: Pattern, SeverityLevel, Scope, URI. Done.. Done.. What is this node we are getting and why this specific node and not some random other node? If test fails, we need some way to understand what went wrong, test or main code, and what expected test behavior is if input or grammar changes.\nPlease add some comments to describe what this node should be.\nAlso add an assertion to verify we are getting the correct node and not a wrong one (like node type, children, etc).\nhttps://github.com/checkstyle/checkstyle/commit/19ffe1bb1bf4e19b71a49bf0fb61e04ca1bc812a#diff-838995e5ea7cebf1b5b78eefda0f2e50\nWas a good example of how a change in grammar caused an issue with CodeSelectorPModelTest and it was not very clear on original behavior of expected nodes.. Same comment as below on 180. I assume this really is just picking a random node.. Just confirming, 2 is because we called getNextSibling() twice? If so, maybe add a comment to note that.. Same as line 180. If this truly is a comment node, lets assert just to verify it is.\nDoes it need to be a specific comment (// or /*)?. Why 231? Would 230 or 232 cause the same issue?. Would this work the same if we used parseTree.getColumnCount() instead of 67? That might make more sense then seeing some random number here.. I agree, looks like it is meant to be the child.. Other getValueAt used  parseTree.getColumnCount() should this be the same instead of 6?. you could use TokenTypes.IDENT instead of TokenUtils.getTokenId(\"IDENT\").. we are already in .ci/travis. Shouldn't we not need path again?. It should be documented somewhere that this script can't be run directly from .ci/travis as its working directory.\nIt can only be run from checkstyle base directory.. Can be ignored, we aren't switching directories so its not an issue\nthis enforces my other comment. I think the best way might be a readme in the folder. Otherwise we have to put comment in all SH files. To me, I think it makes more sense for this to be a new method in Configuration.. atteribute -> attribute. modeul -> module. @romani Just to confirm, we will not support brute-force loading of 3rd party checks defined using CS packages by default? they will have to define their own checkstyle_packages.xml file?. Why can't we use CheckUtil.getCheckstyleModules instead of adding this new dependency?\nEverything we use is a module, so everything should be returned from that method.. Why do we define BASE_PACKAGE and only use it for some checks? Why not all of them?. CheckUtil.getCheckstyleModules needs to be fixed as defined in #3667. There are some modules its not returning.. CheckUtil.getCheckstyleModules is fixed in latest master. It should return all modules now.. To me, it seems that if we use this field some of the time, we should use it all of the time. It looks odd to see it switch back and forth.\nIt is sorta similar to MultipleStringLiteralsCheck except the whole string is a sub-string of another instead of an exact duplicate.\n@romani What do you think?. As an extra note, the compiler will inline static final Strings, and for 2 that are added together, it will combine them and write them out as 1 String as if they were written that way.\nhttp://stackoverflow.com/a/29881552/1016482. Technically it is still a check by inheritance. Test method uses getCheckstyleChecks. I think we will confuse ourselves if we say these are \"Non-Checks\", so I am leaning more to \"Holder Checks\" for now since all of them end with holder.. Done.. Done. Just grabbed short description from module.. I think we expect no change in this file for column numbers.\nIf you look at test and input that uses this file, the actual input is just pure Javadoc (no /** or */). The column/line numbers should match up to it exactly, imo.\nWe could correct DetailNodeTreeStringPrinter.createFakeBlockComment for this change by hacking their column numbers to -3 and -1 so input starts exactly at 0.\n@romani You agree?. Why do we have \\r\\n -> \\n change? Input file that this is generated from has no changes here, right?. Test and travis passes because it not only replaces text \\r\\n to \\n in input, but also replaces it in expected output. It fixes the files on both sides so they can compared successfully on any OS.\n@kazachka probably copied expected output after running test to file not realizing there was this small difference.. breack -> break\nAdd a after be. should be a linebreak.. breack -> break\nAdd a after be. should be a linebreak.. breack -> break. tocken -> token. tocken -> token. tocken -> token\nAlso there is a double space between alone and on.. There is a double space between curly and is.. Where did 100 characters come from? I don't see any mention of this in the original check.\nShouldBeAloneSLine = shouldBeAloneOrSingleLine\nIf you have to explain what your method name means, then you should just give the method a better name.. @romani \n|--BLOCK_COMMENT_BEGIN -> /* [1:0]\n |   |--COMMENT_CONTENT -> *\\n* class javadoc\\n [1:2]\nFirst * in COMMENT_CONTENT is leading asterisk. AST splits * from /* in javadoc start (/**).\nYes, Javadoc Identificator in documentation.. If we are changing this, we also don't need the one use variable. Just inline it.. Duplicate so comment content, on start of this line and end of last line. Remove one.. @romani Shouldn't AbbreviationAsWordInName have picked it up?\nIt seems the check must be set to 0 to pick this type of name up. It is currently set to 1.. Will we get NPE if braces are empty but not on the same line because previousSibling returns null?\nExample:\nstatic Runnable r7 = () -> {\n    };\nIf so, this code looks similar to hasLineBreakBefore but it has null protection. Maybe we should use that instead.. Method has no lambda specific code. Lets make it generic method so we can use it for anything in the future.. Did the best I could.\nUnless I knew a reason, or could find one through violations, I just put a dummy comment in saying this what the config was like when the test was made. We should consider adding those tokens.. This is shown as outdated, but the way you changed it is now leading to a TC failure.\n504: isAloneInLambda() if statement with identical branches. You have to be careful with single words in a regular expression directory name match.\nI did something similar with RegExpOnFileName and all CI worked fine, but it failed locally for @romani because of his specific directory structure naming outside of the checkstyle project. There are no slashes in this name so we could match any full word that happens to have main in it. Ex: maintain, maintenance\nDo we need these MatchPartially tests for coverage? If not, and romani doesn't disagree, I think we should just remove them.. Example should probably be src/main as in romani's case, he wants to control imports in production code, and allow full range in test.. Don't forget to update this too.. File name is better. I think we should still include [\\\\/]. As long as you don't write .* it will still be a find expression, right? So you don't have to completely leave out the folder structure.\nThis is split from my initial comment in https://github.com/checkstyle/checkstyle/pull/3724#pullrequestreview-16694125.\nPlease try to keep all comments together.. you should escape the period, but sounds good to me.. Done, Issue #3729. Done but check is not literally deprecated. If we want to deprecate it, we should make an issue for it.. New Issue is #3730.. Done with slight difference. Method/Ctor isn't a type, so I made a similar but different comment for them.. > LPAREN, RPAREN - are covered by special Checks RightCurly and LeftCurly\nParentheses are not curlies. I don't think that check covers them.\nPlease confirm if this is what you meant.\n\nEven it a weird to write code in other way\n\nUntil someone writes it like that. Atleast we won't have to worry about us missing it.. New Issue is #3731.. Done.. Done. I rewrote but I was referring to enum constants/values. I mentioned EnumValueNameCheck in reason.. Done.. Done.. Done.. Done.. Done.. Not Done. Waiting on confirmation.. Done.\nadding LAMBDA produced some violations. They were fixed. Just wanted to note that this required adding return in most cases.. Done. Reworded to use similar wording as other one about effectively final.. Done.. Done.. > LPAREN looks like should be on \"eol\"\nCan't be done. These 2 tokens definitely need context and can't be applied randomly, which this check seems to do.\nExample:\nDetailAST.java:97:13: '(' should be on the previous line. [SeparatorWrap]\nif (ast != null && parent != null) {\n            ((DetailAST) ast).setParent(parent); // violation on very first `(`\n        }\nMaking change will violate LeftCurly and look ugly.\nPutting it in NL section causes violations on items that span multiple lines like try-with-resource and throwing exceptions.\n@romani I will just leave this disabled with my original comment. If you think we should still add it, say so and I'll move this to a new issue.. @romani JDK terminology is fine with me.\nWhy not just name it just PACKAGE? adding access in an class named access seems redundant. If comment followed pattern it would read Package-access access modifier.. Why compare text instead of token type?. Since we are renaming properties, I say we just drop the exclude since you have to specify all the modifiers you want to be covered in the other property.\nWhy would someone specify to add a property and then at the same time exclude it. You can't exclude a property that wasn't added.. Missing space before was.. same here.. Should be access_modifiers (missing s) as detailed in property_types.xml.. Same here.. it seems to me we are removing the original purpose of this example, which is how to configure this check differently between public and non-public naming conventions.\nI think we should restore it. It should be similar to google config, one should be public alone and the other should have all the other modifiers.. I find adding null/nothing weird. Users cannot specifically set this value, right?\nScope has nothing but like I said, they can't specifically write a nothing value in the configuration.\nEither one should throw an exception that it isn't in the enumeration if users try to use them.\nMy opinion is we just don't list these. Checks have default values, so that should be enough.. Oirignal check looked at all modifers, not just public. I think we should continue this.\nIf we don't specify all, I think more examples in xdoc need to be changed/added.. checkAnnotationIndentations first argument is suppose to to be the annotation's @ sign. node in this case is the ( which is wrong and causing issues further down.\nFirst parameter should probably be node.getParent().getFirstChild().\nPlease confirm, fix, and add example test like linked below with any variations you feel necessary to show this change.\nhttp://rveach.no-ip.org/checkstyle/regression/reports/183/checkstyle/index.html#A5\n. I think you mis-understood what I meant. I meant token type like,\nif (TokenTypes.LITERAL_PUBLIC == token.getType()) {\nI see no reason to compare any type of text, when these tokens have standard integer types that already specify them.. remove the.. Why isn't this a violation? Isn't it importing everything in java.lang and nothing in its sub-packages?\nimport java.lang.*; doesn't import java.lang.reflect.Field right? I tested this out and the compiler couldn't resolve Field.\nThis star import should be no different than importing a lang class like Short.\n. @MEZk Even though class is private, we could still extend it in this same class (RightCurlyCheck) if there was no final.\nI'm not sure which TC violation required the final.. This was the same comment I made before here.. @MEZk Reason was most likely because of lack of context.\nsome.package may have 1 or multiple classes in it. If they just use class name alone, MyClass, we can't tell if it came from some.package or java.lang or another wildcard import. We would have to read the classpath to understand what classes are in the package to tell if it is used or not.\nIn this instance, I don't feel we have to worry about the java.lang one because we are marking everything in just that package as redundant regardless of if it was used or not.\nBut @romani can decide otherwise.. New Issue at #3748. New Issue at #3749. If default and case are staying, I assume their reasoning is google doesn't specifically require or disallow them having braces?. @romani Can you copy lambda definition in 4.5.1, I am not seeing it.\nNeedBraces requires braces all the time, even if block is empty, unless we enable allowSingleLineStatement.\nhttp://checkstyle.sourceforge.net/reports/google-java-style-20160712.html#s4.1.1-braces-always-used Makes it seem like those are the only times braces are required and it doesn't specify lambda. So single line should be acceptable.\nhttp://checkstyle.sourceforge.net/reports/google-java-style-20160712.html#s4.6.2-horizontal-whitespace\nhas the example (String str) -> str.length() where it doesn't use a brace, but this may not be definitive.. @romani Current config for the check has ids based on the tokens inside. https://github.com/checkstyle/checkstyle/blob/master/src/main/resources/google_checks.xml#L87\nSince we are adding more tokens, can that id change or must it remain the same?. new Issue at #3752. New Issue at #3753. Done. Done. Done. Done. Done. @romani Should we re-open issue and request the documentation be changed to prevent any more confusion?\nWe have said before we only go by that documentation like when they requested us to validate against another tool.. One example of a violation isn't much. Can we change or add more examples?. @romani see discussion in https://github.com/checkstyle/checkstyle/issues/2906\nUpdate is because this PR fixes NPath complexity calculation for switches.. @romani I don't know NPath but should try/catch be removed?\nI assume case was converted to case_group as I see it counting cases below.. @romani This is from the last PR.\n\n\nIt doesn't implement NPath calculation for try-catch-finally statements yet. It is a question if we need such calculation. Pmd doesn't implement this calculation and there is no formula in original paper.. Possible calculations:\nhttp://stackoverflow.com/questions/31755570/calculate-npath-complexity-for-try-catch-finally?rq=1 (unanswered)\nhttps://github.com/pdepend/pdepend/blob/master/src/main/php/PDepend/Metrics/Analyzer/NPathComplexityAnalyzer.php#L469-L509 (php way). Looks like COMMA is missing too.. Should example also allow java.util.Map to show that we need 2 entries if both are used since we state earlier are not automatically allowed along with their enclosing class.. . I don't think we should mention SLIST or token types in description documentation. User may not be familiar with our tokens and tree structure. It should just explain java code.\nWe should stick to catch blocks and it's braces.. Reword: \nWith this property turned off, this raises.... This can be ignored then.. Why don't we do <disallow pkg=\"java.util.stream\"> ?\nor <disallow class=\"java\\.util\\.stream\\..*\" regex=\"true\"/>. This line looks like it is missing an \\ on the end signifying it spans to the next line.. should the semi-colon be there? Line 191 below doesn't have it.. Does it make more sense to use java.text.ParseException?. Nevermind, its an overridden method and ParseException isn't a runtime exception.. > Method or constructor call without arguments.\n\n\ncall is incorrect, right? It should be reference. We are not actually calling the methods with this, just referencing it.. We are not expecting this line to be removed.. Please add an error case that spans lines to show it still reports violation correctly.. This section should be for the Java tree only.\nHeader should have Java in it. It should showcase -t and -T options with it's output.\nThis section should have nothing related to Javadoc and it's tree and command line arguments (-J and -j).\nI am expecting something similar to the Javadoc's section, but it needs to be its own thing.. > Why not move this to validate(...)\n\nwhat we will pass at the time of function call \nI'd pass there something like a line number\n\ngetTargetSourceLine is getting it's line number from rcurly which is stored in details, which we are already passing to validate and almost every method in this check.\nIt seems to me we can remove String targetSourceLine parameter from the validate method, remove String targetSourceLine parameter from isOnStartOfLine, and grab and examine the line directly in isOnStartOfLine.\nThis is the only area using this target line currently. So we don't need to pass it around to everyone. If we were using it more, then I would consider moving it into details, but we aren't.\n@Vladlis What do you think?. @sagar-shah94 Please make the changes I described above.\n\nIt seems to me we can remove String targetSourceLine parameter from the validate method, remove String targetSourceLine parameter from isOnStartOfLine, and grab and examine the line directly in isOnStartOfLine.. We need clear identification of which ones are good and bad. Violation just shows the line number and not the column number in the test.\nIt is not clear if all are bad or just one is bad and the others are accidentally good. It won't be clear if we change expression in the future and mess up one of the characters.\n\nInput should also have a comment identifying which are good or bad as a secondary verification.\n@romani Please confirm the range of numbers is ok.\nShould we expand this to every number between 0000 and FFFF or is that too much?. Is there a reason for this change?\nWe don't expect any unnecessary changes.. same as above.. Is there a reason for \\n and \\r and not their unicode equivalent like the others?. Made update to original issue to explain the brackets. They were just for show and should not be in file name. Sorry for any confusion.\nAlso check name should be right after Input so I am expecting names like InputTypecastParenPad.java, InputTypecastParenPadWhitespace.java, InputTypecastParenPadAround.java, etc.\nNaming after InputTypecastParenPad should be similar to original name so it is easier to tell where the file came from if it was copied and not moved.. I think folder names should be in lowercase like all our other package names.. @romani Please confirm this for us.\nAre you ok with code as it is changed now, or should we remove static from methods so targetSourceLine can be moved and called to where it is used, or do you think targetSourceLine should be added to details class which we pass around to all methods.. It is not clear what this option is referring to by name alone. It just says \"mismatch\". Doesn't mention directory structure.\nOriginal property was mIgnoreDirectoryName.\nI am currently thinking something like matchDirectoryStruture. @romani What do you think?. We are missing example example configuration. See a few lines above here.. It is not explained why this is a violation. It is not mentioned what folder this package is in as we expect none if it is in the right folder.\nAlso isn't it weird package name ends with Main and class name is Main too? Please make example realistic that all users can relate to.. See this paragraph section. We explain reasoning for no package defined, shouldn't we extend this for validating the directory structure too?. Description few lines above should be changed to include checking directory structure like xdoc does.\nWould be also good to add the rationale section.. Why did we remove whitespace? Expected directory structure should be .../checks/whitespace/separatorwrap/... not .../checks/separatorwrap/.... @MEZk \nDirectory name is already in violation message, so I don't think adding it to the message is necessary.\nI was contemplating package name to the message, but I am not sure if adds any value and will make the message extra long. @romani What you think?. Please change to: Javadoc Check, you need to only parse the tree\ncomma after Check and to only parse the.. Why did line number change if input was copied? We aren't expecting the input to change except for package.. same here.. Issue says copy. I think we should stick with copy as trimming input requires reviewing what was changed to make sure something necessary wasn't accidentally removed. Violation cases are hard to miss, but good cases are easy to miss as there is no verification in test. Since file is copied and then changed in 1 commit, we can't see in history what was changed.\n@MEZk I am fine with trimming input, but it should be done outside this issue and most likely after the parent issue for this is finished as we have alot of tests to go through.\n@romani can override this, but I stand by that we should only be doing copies for now since we are overloaded with PRs and GSoC.. @divsidhu-26 Inputs don't go in the main folder. They go in the test folder under resources.. You always append DOT but what happens if users accidentally already appended it? Shouldn't we care?. Should we use the DOT variable instead of the constant?. We should also note that classes in the same package can't be excluded either as there is no import statement and Checkstyle can't be sure it is from same package or from java.lang.. Same note here as above.. 2 separate checks shouldn't use the same input. It makes one dependent on the other when we make changes to the input file for one test. We are currently modifying our tests to prevent this.\nInput file should be duplicated with unique name.. So if I say to exclude package a.b and we have an import from a.b.c package, it will be excluded since you use startsWith right?\nIMO, we should only exclude the direct package requested and not its sub-packages but issue seems to say otherwise.\n\nFor example the entire Java SDK packages could be excluded by specifying java. and javax.\n\nIf we did do subpackages too, user couldn't use this option on a common package in their project.\n@romani Please confirm which way you think.\nEither way, we should have a test for this, if we don't already, and some documentation in the xdoc explaining this behavior.. Should we scan the node tree instead of parsing the pure text?\nRegardless, xdoc description should be updated to say we don't require a full summary for {@inheritDoc}.. Will your implementation fail if we add extra lines?\nEx:\n/**\n     * \n     * {@inheritDoc}\n     */. We are not expecting line numbers to change. Files should be like 99% direct copy/move.\nPackage name and class name can be changed if it is not dependent on test. All others should stay as is.. Same.. Same.. Same.. Same.. This is done.. > https://github.com/checkstyle/checkstyle/blob/master/src/test/java/com/puppycrawl/tools/checkstyle/checks/blocks/EmptyCatchBlockCheckTest.java \n@ps-sp That is not an input file unless you are specifying some input inside that test.  That file should have a header.\nThere may be some old bad inputs that have some excess header. That is what the point of this issue is, to fix up our old test cases that were written years ago.. Just to confirm, this change is because if feff is marked as bad in the future, the test won't trigger a violation on this line because it has a comment afterwards, but with a comment before, it will?\nIf so, then I think it is fine and this change can stay.. @Luolc Is there anyway to use the unicode equivalent without a compiler error?\nThe point of this check and this test is verify unicode ranges. We should have all in the range if possible.\nIf it is not possible at all in the source code, then we should probably add a comment so it is clear why they are not in the list in their specific position.. see https://github.com/checkstyle/checkstyle/pull/3894#discussion_r104295197\n\nlets generate new input file with all characters \n\nWe need all unicodes from 0000 to FFFF. No unicode should be missed.\nIf any cause a violation, we need a comment near it saying violation.. We need proof of violation as your changes show none. Please duplicate input file and make every line show a violation.\nAdd comment to violations with text violation in input file that will not suppress the violation like you did up above. \nMake sure you do my other comment first before this one.. Let's add a comment that says it is impossible to add the unicode for these.. I would make this only else if (shouldStartLine) { and move the variable declaration of targetSourceLine to the next line right before if (isOnStartOfLine(.. My bad, never mind this.. We need confirmation that the google style wants EOL for this token. The whole point of this configuration is to show that Checkstyle can be made to follow google's guide as they outline.\nPlease look at http://checkstyle.sourceforge.net/reports/google-java-style-20160712.html and make note if it references method references and how they should wrap. You may have to read between the lines with google's style guide.\nIf it does make reference, point me to the area, if not, I will also confirm, and we will most likely have to remove this from the check and make an override to give a reason why it isn't added.\n. @soon He said he wanted the normal case to be no dot on the end, I am more talking about if user does abnormal case of adding the dot. Should we validate/correct their input or leave it as bad which would result in no violations and maybe confusion on their part. xdocs should have the correct way and they should read their first.\nI'll let @romani answer if we should do this or not.. With enumerations you don't need to use the equals method, you can use the == operator.. Please explain what is unreachable in old code and why so I can verify.\nIf it is the default section, PowerMock can be used to reach it.\nIt should stay so we know new code must be written to accept a new enumeration.\nA test could be written to run this with all enumerations and verify it doesn't end in exception so a test will fail when new enumeration is added.. Please add a test that number of enumerations is 3 so test will fail if we add more. Assertion comment should specify that all enumerations should be written above.. getPath should override and call super.getPath with extra path. See tests for other checks as an example.. See my comment for getPath. This should also be located next to that method and be similar by calling super.getNonCompilablePath.. Should all be in gui directory.. This test is pretty big and not easy to follow. I will try to look at it more but there is no way to split/trim it so it is easier?. You are correct. I am use to working with checks.\nThis can be ignored.. Overriding super can be ignored.\n2 methods should still be next to each other imo.. > that name was already being used \nWe will eventually fix that. As long as file is only one in directory it is fine for now.\nMEZk is correct in that file name, as well as class name, should be camel case like check name.. We are expecting files to be nearly a copy/paste of their original. We are not expecting any changes except package name and class name as long as it is not required by test.. I personally think it should be removed, it doesn't add much benefit.. Check's code uses overlapping at line 480 for a method name.\nWhere did overshadowing come from? We should similar naming conventions between code and documentation. If we don't then, imo, it is clear that one area's convention is wrong and should be changed.. Why are there changes to try? We're expecting only changes for lambdas.. shouldHaveBeLineBreakBefore -> shouldHaveLineBreakBefore. We need confirmation on google style guides requirements for this from http://checkstyle.sourceforge.net/reports/google-java-style-20160712.html or https://google.github.io/styleguide/javaguide.html .\n. Shouldn't this file name change too?. no change is expected in this file like romani said.. Information sent to the method can't be done using the DetailAST methods.\nThe whole point of this test is to verify those exact methods are functioning properly.\nExample: Parameter prev is set to curNode.getPreviousSibling() and inside the method, it is then verified by assertEquals(badPrevMsg, prev, node.getPreviousSibling());.\nAll it is doing now is testing the method against itself. If you change getPreviousSibling() to return an invalid value, test would still pass.\nOriginal test kept track of the parent and previous itself. This is why.. Just some information:\nThis test assumes getFirstChild and getNextSibling are working correctly. We can assume getParent and getPreviousSibling are valid after this check method call.. @romani I thought we should add this so it is clear we should add new enumerations to this method when updates occur.. @xpdavid Please explain not possible.\nI am only asking that you add gui/ onto the end of src/test/resources-noncompilable/com/puppycrawl/tools/checkstyle/. Input files should be in the same package as their test.. @xpdavid Don't use comment, use assertion message.\nSomething like:\nassertEquals(\"New enumerations must have their assertions added to this method above verifying their 'toString()' value and increase this expected count to match\", 3, ParseMode.values().length);\nWhen assertion fails, programmer won't see comment above. They will just see assertion message.. @ps-sp I feel it should be removed. We shouldn't need a 'definition' section.. I assume this is just a code simplification change and not necessary to this issue?. I assume everything in this file is the same, just a code simplification change?. Having issue fix and big code simplification changes in 1 commit may make this too hard to review.\nUnless @romani wants otherwise, I think we should split this into 2 commits.\n1st commit is minor with all code simplifications.\n2nd commit is issue with all code related to issue fix.. @soon it might be better just we can verify issue change is the only one affecting violation changes.\nThen there should only be 1 commit here with just changes to fix issue.. Ignore this then. That file can stay there.. Sorry, I forgot I also wrote that in the issue. that is all I was looking for was the section that specified it.. @ps-sp Why do you say this is what caused wrecker failure?\n@romani It looks like wrecker just timed out.\nhttps://app.wercker.com/checkstyle/checkstyle/runs/build/58c30ebf59aaca0100b35287?step=58c30ed378bfa50001ccd5fb\n\nNoExceptiontest - Checkstyle ,sevntu-checkstyle\nCommand timed out after no response. Look at diff. This line wasn't here before, it got added when resolving the conflicts. We just recently removed this comment from everywhere.\nPlease remove it.. use the word violation instead of failure. same here. why is the line so far to the left? It can't fit on the previous line?. @GitToasterhub Yes.\nIf you look at https://github.com/checkstyle/checkstyle/pull/3983/files , you can see the file header has the -> arrow. This signifies the file moved to a new location.. Class and file name are still incorrect.\nInput should be named after test. Test is named MethodParamPadCheckTest, Input should be named InputMethodParamPad..... > Do you mean InputWhitespaceAround should be named InputMethodParamPadWhitespaceAround?\n\nyes.\n\nthey are in different namespaces\n\nThis is another problem we have. Multiple input files have the exact same name so users get confused and make changes to the wrong file. This is why we want file names to be named after the test and in it's own directory.. We are not expecting any changes under the main folder.. lowercase for package names.. folder should name should be emptyforiteratorpad after test name.. inputs should be named after test. InputEmptyForIteratorPad.... why is there change in property?. please change class to InputFileLength like file name.. @romani To do a 3-way validation for Indentation (expected vs message vs input file), the only way we could get the required indentation levels was to parse the numbers from the message directly. There is no hook in the check that lets us see these values before the message is created.\nHere is the issue: https://github.com/checkstyle/checkstyle/issues/3105\nThe only way we can fix this and get the numbers outside the message is probably to either extend IndentationCheck in test or to try and use powermock to proxy a call to a test method before the check's method. We would have to target IndentationCheck.indentationLog.\nThat is unless we specifically make modifications to the check to gather information without hacks.. Unnecessary change. Please revert.. Can we please try to use original indentation so we don't have this change?. Can we ident these lines the same as the others. 2 spaces instead of 1.. change should to are required to. missing space before but.. Why not just do: new String[] { \"##0##\", .... } ?. Since you already have a loop here, why not loop on properties instead?. what do you think about removing this variable and inlining condition to assertion below?. I didn't realize this, but it still makes this assertion look off.\nThis can be ignored for now.. I am probably biased, as I don't use Java 8 lambdas and think of some of their uses as not easy to read.\nYour original implementation is definitely too complex, imo. I would still prefer the loop on properties.. @sabaka Inputs should be a direct copy or move. We expect no changes to input as this will cause line numbers for violations to change. Plus since this is a new file we will not be able to see what was changed in the input and that it was a valid change.\nAll changes to inputs will be done in another issue.. Same comment as above.. Please change this so there is only 1 return statement in lambda.. Please revert this change. Files should end with atleast 1 new line.. annotation level isn't very clear. Can we expand javadoc to say it is the column position or indentation?. same with level.. Should we expand this to say what we are checking?. a name -> the name.. Should we expand this to what we are checking?. has a node before -> has any node before on the same line. has a node after -> has any node after on the same line\n. jaavdoc -> javadoc. date was not updated. examin -> examine.. @MEZk You said Done but I don't see any change to main description.. package names should be lowercase.. input should be moved, not copied. Only this test is using this file.. same.. please restore removed single space. We don't expect any superfluous changes.. yes, an annotation. There is no specific annotation being mentioned, which is why the isn't appropriate, imo.\nshould also be comma after limitations.. @soon Please make this change.. Title was changed, so this is ok now.. Code seems a little bit weird like this.\nI would rather see !str.isEmpty() as a separate if statement, and charAt(0) part of the for loop. Makes reading easier.. same statement as above, make !str.isEmpty() a separate if statement.. exlcudes -> excludes\nThis appears a few times in your changes. Please fix them all.\nAlso once https://github.com/checkstyle/checkstyle/pull/3924#discussion_r105546397 is changed, this will change as well.. Since we are changing this line, please make it private. We shouldn't have any public methods in check except for overrides and setters unless for some very weird reason/hack.. catch and finally were completely removed unexpectedly. Please explain this reasoning and prove to us why they should remain gone.\nPlease add UTs to showcase too as I am not seeing any changes in tests from this, if you can. You can use any examples found in regression.. > Regrading the test. I don't understand clearly. \n\nThe original code means that if the ast type is not one of the first four (try, catch, finally, else), then it should update. And current code means that if the ast type is not one of try, catch, finally, method def, lambda ... then it should be update.\n\nBefore your change, we had 100% branch and code coverage. So we should have had some test that at least looked at true/false conditions of that method for catch/finally. Since you changed the method to basically allow more tokens, I would expect this to have some type of change on tests. Either violation turning no violation or vice versa. Since there are no changes, it makes me think we are missing more regression cases. What I was asking for was more examples where you change had an impact in violations to show your change is valid and won't lead to more false positives.\nI didn't notice the change in conditions when first looking.\nRegression will help show if there are any differences besides issue's example.. Confirmed.. parametrized -> parameterized. > The isIdentifier variable is a part of the for loop condition.\nIn your code, you will have to execute loop condition even if isIdentifier is false.\nIn @romani 's code, loop condition isn't even executed as first if statement is false and block is skipped.. Please revert all superfluous changes to this input. It is making it hard to to understand what was changed.\nAny new cases you have to add, please add them to the end or in a separate file.. Same here.. And here.. Shouldn't we ignore inheritDoc as it will be covered by PR #4047 ?. Why are we checking these 2?\nIf user supplied custom period we should be using that as the period and nothing else.. input should be named after it's test.\nTest is MethodLengthCheckTest, input should be named InputMethodLength....\nPlease rename class and file.. same.. input should be named after it's test.\nTest is LineLengthCheckTest, input should be named InputLineLength....\nPlease rename class and file.\nPlease do the same for all other inputs in this test.. @soon See my other comment.\n\ncharAt(0) part of the for loop\n\nif statement should be if (!str.isEmpty()) { alone.\nfor loop should be for (int i = 0; i < str.length(); i++) {.. Why do we need excludeClassesRegexp? It is not used in a violation message or computation.\nIt exists just to populate excludeClassesRegexpPattern and nothing else.\nremove excludeClassesRegexp and rename excludeClassesRegexpPattern to excludeClassesRegexp. Properties should be their true type.. Method parameter should be of type Pattern. Utility will do conversion for you.. > I have a resource file - InputSimple.java\nMust be renamed to InputLineLengthSimple.\nMy main point is it needs to start with InputLineLength.. @soon My bad. They looked so similar I didn't notice one was Start and the other was Part.\nYour example at https://github.com/checkstyle/checkstyle/pull/3924#discussion_r107225709 is fine then.. @soon that sounds correct to me.. Please add cacheFile property to this config. See: https://github.com/checkstyle/checkstyle/blob/master/config/checkstyle_checks.xml#L17\nWe should also add SuppressionFilter and suppressions should be in our suppression XML file. See: https://github.com/checkstyle/checkstyle/blob/master/config/checkstyle_checks.xml#L43-L45. exclusions should be in our suppression XML file.\nSee:\nhttps://github.com/checkstyle/checkstyle/blob/master/config/checkstyle_checks.xml#L43-L45\nhttps://github.com/checkstyle/checkstyle/blob/master/config/suppressions.xml\nWe should exclude based on the dir/file name, and the check.. let's remove eol from config name and make it generic. It is my hope that we will add other things to this like excess whitespaces and tabs etc.\nlet's follow pattern of other configs and use checkstyle_resource_checks.xml.. cache file has to be unique to not clash with other configs.\ncheckstyle_checks.xml uses cachefile.\ncheckstyle_sevntu_checks.xml uses cachefile-sevntu.\nlet's name this cachefile-resource to keep naming as others.. needs unique suppression file name.\nlets use resource_suppressions.. remove, unnecessary.. remove, unnecessary.. remove, unnecessary.. Again remove eol and make it more generic.\ninput-resource-verify.. same here.. Please add empty line to end of file.. Issue examples: https://github.com/checkstyle/checkstyle/issues/3839#issuecomment-280785109\n\nThis Check care about block that goes RIGHT AFTER defined token.\n\nyes. This is why a3 has no violation in issue example. Token is case and test() appears right after it, not the block.\n\nThis check should validate only first { } in your case and raise violation.\n\nyes. This is the difference between a2 and a3 in issue example.\n\nThis Check does not validate sequential blocks {}, you make put blocks at any possible place in code.\n\nyes. This is similar to a3 in issue example.\nIf user has code as case 0: {} {}, we only expect 1 violation, not 2.\na5 has 2 violations only because it has 2 separate cases.. This is too hard to read and maintain as one long string. What if we accidentally screw expression somewhere.\nPlease split it up. I am fine with one file/directory per line.. This whole configuration is for test and it folders. So comment is redundant.\nMake comment specify it is for why we can't add newline to end of files or none at all.. > Should I add reasons for all individual suppressions or just a general message at the top\nGeneral message if all of them have identical reasons.\nNewline.*AtEndOfFile\\.java can have its own unique reason which is because the check is dependent on them for violations. I am fine with this staying as one suppression.\n\nImho first approach may be a good practice for future suppressions?\n\nExplain what you mean by first approach.\nIf you mean all on one line in one big expression, then no for the reasons I stated.\nIf you mean in the ant XML file, then no, because it limits the type of suppressions we can do by check.. Yes, I am fine with one comment for all similar types of suppressions. This is how our main suppression file is too.. We do alot of adding but no removes or clears. If we run this on multiple files, this list will become bigger and bigger with no end in sight and probably lead to false handling.\nIt is also not clear why we need this field and just get tokens down below on line 94.. Comments? It should be Summaries.\ncontains -> contain.. InheritDoc -> the <code>{@inheritDoc}</code>. {@inheritDoc} -> <code>{@inheritDoc}</code>. Inputs should be named after the test. Test is SingleSpaceSeparatorCheckTest, so input names should start with InputSingleSpaceSeparator.\nPlease do this for all inputs. Please make class name same as input names.. restore empty line.. Why do we need this set for an almost static list of 2 tokens?\nWould it make more sense if we just moved this and condition on line 89 to a new method? (no set used, return boolean from method). indentation here should increase since we are now wrapping on the (. It shouldn't remain on same level as &&.. same as previous statement.. technically default is at top of group, not between.. technically default is at bottom of group, not between.. there is no new option, just logic change.. please comment this line as // violation.. > i did not get what u suggested\nYou had a list that you keep adding more and more to. You never removed stuff or erased the list, even starting processing a new file. Logic dictates that you will run out of memory if this keeps happening enough. You would also keep using values from old files and this would lead to unexpected results.\n\nnow i am using set within method so issue will not occur.\n\nSee new point raised now.\n. Javadoc description sounds too redundant. A is B, not A is not B.\nPlease make javadoc more meaningful like Examines ast to see if it is surrounded by a 'case' on either side.. if you find yourself assigning a true value to a variable based on the true result of an if statement, then it seems you can just drop the if statement and assign the variable the condition. (this sounds like it should be a check possibly)\nSince the next group does the same thing, this whole method can just be a return statement.. Issue -> issue\nhave -> have the. of -> of the\nreference -> the reference\nto issue -> to a issue. that not -> that are not\nwe help -> we will help. @romani I specifically wanted it to be a general name as I think we should add other checks to the configuration besides NewlineAtEndOfFile.\nThe 2 I would like to add is: package name should be same as folder location, class name should be the same as file name.\nSome others that have confused new users are tabs and trailing spaces.\nAre we specifically not going to add any other checks for resources?. Changes to this file are not expected. Please revert them.. Still should be no changes in this file.\nPlease verify before pushing.. @kukreja-vikramaditya After talking with @romani , he agrees about extending this for more checks in the future.\nOuterTypeFilenameCheck requires TreeWalker which we can't run on non-compilable files, so we will have to examine this in new issue outside this PR. I will make the issue.\nFor now, we will make a generic name for file so it makes sense if and when we extend it.\nConfig file will be named checkstyle_non_main_files_checks.xml. All other names required (suppressions and cachefile) should also be named around the config name.\n. @romani @kukreja-vikramaditya After confirming with cache file from main config run.\nxdoc, site, is controlled by main config, so it shouldn't be scanned by this PR's config.\n.ci folder is ok to add for this PR. file types from folder will need to be added so those files are picked up.\n\nconfig\n\n@romani I will create a new issue for this, but if external resource file is scanned for violations and a violation is found, it will invalidate entire cachefile even if external resource is never changed.\nWe can still add it for now in this PR.. Any folders this config scans, it should pickup all files in them.\nExamining cachefile generated shows what files it is finding.. file was not renamed. It should be InputSingleSpaceSeparatorErrors.\nClass name can't be changed as stated before.. undo unnecessary indentation.. Please remove the extra 2 spaces added to this section so there is no difference and make sure the true changes stay inline.. 2 spaces too many indented.. please indent this +4 as we are wrapping on the (.. add new line to end of file.. @sagar-shah94 Look at romani's post at https://github.com/checkstyle/checkstyle/issues/4078#issuecomment-289211757 .\n\ndefault: // violation !!!! with the new option is expected\n\nThere should be a violation here by his example. default should be requested to be on bottom.\nThe current message may not make sense for this new violation.\n\nDefault should be last label in the switch.\n\nI am thinking it should be: Default should be last label in the case group.\n@romani Please confirm.\nPlease also confirm, logic of check should not change if skipIfLastAndSharedWithCase is turned off? It should behave as it does now.\nOnly changes are what you specified for new property, suppression of one case and new violation in other.. Sentence is not very clear on what property does.\nand not last -> if they are not last. Unless you can come up with a better wording.\nPlease add an xdoc java examples of new violation, and non-violation case.. @romani Why are we checking line number and column numbers here in original logic of check?\nShouldn't we just be checking if defaultGroupAST != lastGroupAST?. @sagar-shah94 \n\nu could check it does not change original logic.\n\nI wanted confirmation from romani as he wants specific logic change to check.\n\nwe can put default anywhere as long as it is surrounded by case.\n\nThis is not true based on post romani made at https://github.com/checkstyle/checkstyle/issues/4078#issuecomment-289211757 .\nswitch (mode) {\n            default: // violation !!!! with the new option is expected\n            case 1:\n                return 1;\n        }\nOriginal check: default should be last group in switch\nNew property: default should be last label in case group of switch, doesn't matter what group it is in.. Done.\nNew issue is at #4107. @sagar-shah94 If we allow default anywhere, then what is the purpose of this check? Won't it be checking nothing then as it can't produce violations?\nCheck is specifically for people who want default to be last in some form.. If @romani is fine with this I'll make the change.. Please restore empty line at end of file.\nI'm surprised github doesn't show red arrow for it on file view.. @wate123 Maybe there is some confusion about what I am asking.\n1) File should be renamed to InputSingleSpaceSeparatorErrors.java.\n2) Class name must remain as InputSingleSpaceErrors.\nMy previous review was only pointing out that the file was not renamed (point 1). I was not asking to change class name too (point 2).\nWhen class name is changed back to InputSingleSpaceErrors, mvn verify should pass.. This seems weird we treat break and return with the same variable as there is a difference between them and how they are handled.\nbreak will exit switch/loop/etc, but continue on logic outside that scope.\nreturn will exit the method completely (besides any finally blocks) and ignore any logic outside scope.\nI am also going to assume that we don't have any handling of continue either since we didn't have break. If so, that can be another issue.\n@Luolc Can you create a some more examples with just break and return by itself, and not intermingled like issue's example, that can probably prove my concern. Don't limit break to just switch statement. Please show some while/for/etc.\nI will review regression shortly.. these 4 lines aren't in issue's example. Is there a reason?. We are not expecting changes to this file.\nChanges for your issue should be in an input file that no other tests uses to avoid this conflict.. Same here.. Same here.. Same here.. Why is this change here? Please revert it.. Why is this change in this file? Please revert it.. Again, we are not expecting changes to this test.\nChanges for your issue should be in an input file that no other tests uses to avoid this conflict.\nSince this feature will increase violations, we are expecting violations for old tests to stay the same or increase. We don't expect any to disappear, or change line number, which is what is happening to 123.. same here.. example.. example.. example.. example.. example.. example.. If we have found the answer we are looking for, then there is no reason to keep going through the loop.\nadd break right after here.. same here.. Check with option on isn't part of the default check. It should be its own sentence, not a continuation of the last.\nChange this to: To configure the check for.... Exampled -> Example. Look at discussion at https://github.com/checkstyle/checkstyle/pull/4084#discussion_r108250066\nWe can't use the same violation message. Current one makes no sense with new option. We need a new message for just this option.\nNew message with new option on should be: Default should be last label in the case group.\nOld message needs to stay with new option off.. > [ERROR] Failed to execute goal org.apache.maven.plugins:maven-compiler-plugin:3.6.1:testCompile (default-testCompile) on project checkstyle: Compilation failure\n[ERROR] /D:/checkstyleWorkspaceEclipse/checkstyle/src/test/resources/com/puppycrawl/tools/checkstyle/checks/whitespace/singlespaceseparator/InputSingleSpaceSeparatorErrors.java:[6,8] class InputSingleSpaceErrors is public, should be declared in a file named InputSingleSpaceErrors.java\nYou are correct. I didn't think the compiler would require this and make it an error.\nI am sorry for the trouble.\n@wate123 Please keep this file's name and it's class as its original name.\n@romani Just so we can get this done, we can change class, file, and violation in new PR when the main issue is closer to being done.. > You are correct. continue should be taken into consideration as well.\nI say let's split this into new issue. This check is already complex enough and let's just get this PR done.\n\nOne thing we need to confirm: should we concern about unreachable statement?\n\nUnreachable statements won't change the fact that a variable can be final or not, right?\nOur main concern is can the variable be declared final if it is compilable.\nIf user has other problems or makes changes to the code after that, it is not our concern.\n\nThe only case I could find it different now is break with a label:\n\nI forgot about this type of break. There will also be continue with a label too.\nUnless @romani specifies otherwise, lets ignore this for now. Labels are bad practice anyways.\n\nI assume the only case we should raise a violation is smth like this ... And the check won't raise that violation\n\nIt is definately weird code.\nI'll this up to @romani if we should fix or make a new issue or ignore.\n\nIs it really necessary to handle such weird cases like that? \n\nFrom our side, it is probably too much work to try and handle every single case imaginable.\nFrom users' side, it would make this check all the more amazing if it could find everything. :)\n\nTo sum up, IMO, we don't need to handle break and return in a different way. Please provide a counterexample if I am wrong.\n\nThanks for all to think about. I will do my own testing and get back to you. I have just one idea I want to test out.\nI didn't see anything stand out in regression report but false negatives wouldn't show there.. Please remove them so we can keep it as issue's example.. @romani Please confirm the violation that should be shown here if new option is enabled.\ndefault is last case in group, but is the only one in the group and that group is not last.\nIMO, the violation should still be Default should be last label in the switch..\nWe should only use the new violation message if the group has a case with the default and that default isn't last in the group.. Please change to:\n}\nelse {\nThis is how we write our if-else statements. Our check isn't correct right in how it validates this.\n@romani ping. Something seems wrong if we let this in.\nEdit: It looks like we never defined LITERAL_IF in our config for RightCurlyCheck. I am thinking my test for adding all tokens to our config is slightly broken. I will make new issue.. Move these 2 variables down closer to where they are used after qualifiedClassName.. It is not clear from name which node ast is referring to. Comment is slightly more confusion as a class doesn't have a package.\nPlease rename this field to something more meaningful and update description.\n. seems odd we are looping on a variable that is not the iterator.\nWhy don't we loop while iterator.hasNext() and break when we assign outerClassQualifiedName?. Why a buildClassDesc and not a registerClassDesc like you did for CTOR_DEF?. Please see how other javadocs are done and follow their pattern.. These 2 clears don't seem needed. We erase these classes on brand new files in beginTree.. Please move new instances to field's declaration.\nChange these 2 lines to clear.. No new issue needed, will update existing one #3730.. new issue at #4121. new issue at #4122. I think we should enable all. It looks like all should be alone.\nEdit: I get the following violations when enabled.\n[ERROR] checkstyle\\src\\main\\java\\com\\puppycrawl\\tools\\checkstyle\\checks\\imports\\ImportControlLoader.java:215:13: '}' at column 13 should be alone on a line. [RightCurly]\n[ERROR] checkstyle\\src\\test\\java\\com\\puppycrawl\\tools\\checkstyle\\api\\DetailASTTest.java:161:13: '}' at column 13 should be alone on a line. [RightCurly]\n[ERROR] checkstyle\\src\\test\\java\\com\\puppycrawl\\tools\\checkstyle\\api\\DetailASTTest.java:167:21: '}' at column 21 should be alone on a line. [RightCurly]\n[ERROR] checkstyle\\src\\test\\java\\com\\puppycrawl\\tools\\checkstyle\\checks\\imports\\ImportControlLoaderTest.java:146:9: '}' at column 9 should be alone on a line. [RightCurly]\n[ERROR] checkstyle\\src\\test\\java\\com\\puppycrawl\\tools\\checkstyle\\checks\\imports\\ImportControlLoaderTest.java:167:9: '}' at column 9 should be alone on a line. [RightCurly]\n[ERROR] checkstyle\\src\\test\\java\\com\\puppycrawl\\tools\\checkstyle\\checks\\indentation\\IndentationCheckTest.java:1886:13: '}' at column 13 should be alone on a line. [RightCurly]\n[ERROR] checkstyle\\src\\test\\java\\com\\puppycrawl\\tools\\checkstyle\\gui\\MainFrameModelTest.java:148:9: '}' at column 9 should be alone on a line. [RightCurly]\n[ERROR] checkstyle\\src\\test\\java\\com\\puppycrawl\\tools\\checkstyle\\gui\\MainFrameModelTest.java:171:9: '}' at column 9 should be alone on a line. [RightCurly]\n[ERROR] checkstyle\\src\\test\\java\\com\\puppycrawl\\tools\\checkstyle\\gui\\MainFrameModelTest.java:188:9: '}' at column 9 should be alone on a line. [RightCurly]. I think we should enable all.\nEdit: No violations on enabled.. http://checkstyle.sourceforge.net/apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#INDEX_OP\nI don't see a reason why we shouldn't enable it.\nEdit: No violations on enabled.. Technically non-existent isn't correct.\nTest doesn't even give cache a file name, so there is nothing to prove it exists or not.\nHow about we name it testClearCacheWithNoCache.. how about md5OfFiles or something similar?\nIt would be weird to update variable name if we had to increase the number of runs.. should we prove/assert that exception will happen before first run?\nassertEquals(md5AfterFirstAndSecondRuns[0], md5AfterFirstAndSecondRuns[1]); will not fail if there is no exception. Run will be valid and MD5 will be still the same.. same comment as previous. This uses assertNotEquals so test should ok from false positives.. So we have multiple checks. What are we gaining by more than 1 check? I assume this is just hitting code coverage?. No external resource means we should have limited files in the cache.\nI think we should also add an assertion for the number of files in the cache.\nCan we also add an assertion that DummyFilter doesn't implement ExternalResourceHolder. It is not clear from name alone that it should be like that for future changes in test tier.. I am not sure what WithoutExternalResources means in terms of the expected code or goal of the test. Can you explain?. Can we add an assertion that we have the same number of properties in the cache?. > we test caching functionality for the check which does not hold external resources.\nSo this is the same as testFilterWhichDoesNotImplementExternalResourceHolderInterface but that is testing a filter and this one is testing a check?. > if we change the line of verify \nNot just verify but anything that is in the stack trace too. So that won't work.\n\nI cannot figure out how to intersect the exception\n\nI can't see anything either unless we use powermock to force a specific exception that we control.\n\nDo you mean that we should make sure that getting non_existing_external_resource.xml before the invocation of verify method in the loop throws an exception\n\nThat sounds like what we will have to do.. Thanks, that clears things up.. Revert all changes that are not in SingleSpaceSeparatorCheckTest or it's inputs.. New example has to be split from old one. Look at other checks in xdoc.. Let's avoid tables in javadoc for now. When we were testing these out, some IDEs didn't make the tables that easy to read.\nUse AnnotationLocationCheck's layout as an example.. Add example of configuration like previous example does.. Referenced issue is to move inputs as is, with very little changes in the file. Only changes allowed are package and class name.\nIf input was moved as is, line number violations wouldn't change.\nAs shown above they changed from 123 to 17, so it looks like we have 100 lines that were removed.. test -> [\\\\/]test[\\\\/].\nAppend [\\\\/] to the beginning of Newline.\nWithout directory slashes, name is too general imo.\nDo similar changes to other suppressions.. checkstyle_non_main_files_cache -> cache_non_main_files. variable is named sourcePath so why is method named Sourcepath? It should be SourcePath to have similar casing.. @MEZk @romani Is this how all out future conditions should be?\nShould we make a new check in sevntu to enforce this behavior?. We use the value of this in the else statement.\nCan we assign this result to a variable and use it in both areas instead of calling it twice?. All descriptions in this file should just be first sentence.\nPlease revert this change.. Why not make this an array like illegalPkgs? It is used in the exact same way.. Should an illegal package search scan the entire import text, which has the class too?. @romani Can confirm this, but if we found a result of true from the previous for-each loop, then we don't need to run the next one, right?. Why is the ending .* needed? None of the violations pick up anything where .* is needed.. So user is required to always add .* on a package search with regular expression?\nOriginal issue had the example like: sun, java\\.awt\nUser shouldn't need to put in .*.\nCan you make an example similar to issue's to show it will work.\n@romani Please confirm I am right with the requirements.. Why is order important? We are looking for forbidden packages/classes. Order doesn't matter if one is found somewhere.\nPlease remove.. Same comment for order.. change packages and class names to their property names. It is unclear you are talking about them.. by default is a little misleading, as you don't specify this is the default of the regexp property.\nPlease use same wording as next sentence: If <b>regexp</b> variable is ..... rename to isInLastCaseGroup.. rename to containsCaseAfter to follow javadoc description.. skip should be capital S. I'm surprised it still recognizes this as a setter.. > > ... but false negatives wouldn't show there.\n\nMaybe I don't understand clearly... Is there anything unexpected in the diff report?\n\nNothing in the diff report.\nI was merely stating the diff report only shows us violations, removed or added. It doesn't tell us cases where we are still missing out on variables that should get a violation.. > If I understood correctly, we don't need to concern about the cases like that since it is not compilable.\nYes.\n\nThis seems weird we treat break and return with the same variable as there is a difference between them and how they are handled.\n\n@Luolc Here is two examples I have created that isn't requested to be final with your code. I got no compile errors making them final.\n````\n    void foo1() throws Exception {\n        Exception e; // violation\n        final int a = (int) Math.random();\n        final int b = (int) Math.random();\n    while (b == 0) {\n        if (a == 0) {\n            e = new Exception();\n            return;\n        }\n    }\n\n    e = new Exception();\n    throw e;\n}\n\nvoid foo2() throws Exception {\n    Exception e; // violation\n    final int a = (int) Math.random();\n    final int b = (int) Math.random();\n\n    switch (a) {\n    case 0:\n        e = new Exception();\n        return;\n    default:\n        break;\n    }\n\n    e = new Exception();\n\n    throw e;\n}\n\n````\nNo violation is correct if return was treated like break, but return and break mean different things.\nRegression doesn't show, this as I mentioned, because it only reports violations (added or removed) and no violations are being reported.. I don't believe we are expecting these hardcoded lists to be removed, but we are still waiting more word from @romani .. Done.. Done.. Done.. Done.. Done.. This actually breaks the test.\nPurpose of variable outside the block was to save it's original state before we start changing it inside the try.\ndefault locale at this point will now always be turkish instead of whatever the original was.. Move variable containsInLastGroup and assignment inside the else directly above.\nWe only use the variable in this area, so it doesn't need farther away from its use.. > default of RightCurly is same.\nI think we should be same \nAm I miss smth ?\nLet's take LITERAL_IF and LITERAL_ELSE as an example from the ones missing.\nIf we switched them to same then we would have to write if/else like this:\nif (condition) {\n       ...\n    } else {\n       ...\n    }\nwhile, as of right now, most of our if/else is written as:\nif (condition) {\n       ...\n    }\n    else {\n       ...\n    }\nViolations for alone are 9. Violations for same are 904.\nWe like writting our curlies alone on the line. \nIf we want to switch, we should make new issue for it because of the number of violations. I believe we write them like this so we can just add new lines for the elses without ifs, instead of having the existing line change.. Please rename class to InputLocalFinalVariableName.. another way of writing it would be:\nif (skipIfLastAndSharedWithCase && containsCaseAfter(ast)) {\n                log(ast, MSG_KEY_SKIP_IF_LAST_AND_SHARED_WITH_CASE);\n            }\n            else {\n                if ((!skipIfLastAndSharedWithCase || ast.getPreviousSibling() == null)\n                        && isInLastCaseGroup(ast.getParent())) {\n                    log(ast, MSG_KEY);\n                }\n            }\nbut it would still have the !skipIfLastAndSharedWithCase because it is tied to ast.getPreviousSibling() == null which is preventing the split.. That is up to @romani , I was showing a simplier form of the current.. put cache in here somewhere since main point is checking cache.. I'm not sure how I didn't notice this before, but this test is a lie.\nPropertyCacheFile can't be instantiated without a configuration, it will throw an exception.\nThe whole reason the cache is empty is because destroy is never called to commit the changes made because we play with Checker directly instead of going through a 'normal' lifecycle.\nWe specifically set the configuration with the line checker.configure(createCheckConfig(TranslationCheck.class));. So it is a lie there is no configuration.\nAlso if there are no violations, cache is still filled with all files checked.\nIs this test relying on some code coverage? If so, let's rework this test around that.\nIf not, let's make this into a more normal workflow and test all contents of cache.. why call verify if we are going to clear cache right after before checking anything?\nSeems to me one or the other should be removed unless some special reason is needed.. Same comment as before, add cache somewhere.. Can't comment on method name, but same comment as others, add cache somewhere to method name.. > The first example is handled by the check just like the one I wrote at #4115 (comment):\nYour example had a break in a while loop. My example has a return instead. It will not produce a compile issue like you were stating for the breaks.\n\nIt is no longer just a \"return\" and \"break\" problem now.\n\nLet's focus on these specific tokens for now. We can create new issue for others.\nIf you find supporting break and return too hard, and if @romani agrees, we can split this into new issues.\nI have only seen false negatives so far with current code, not any false positives.. rise -> raise.. Can we indent instructions of the constructor. It is not clear that they are instructions and not just more fields.. Please add empty space between constructor and fields for easier reading.. We have this new paragraph and then the next paragraph is Examples of how the check works if validateOnlyOverlapping option is set to false:.\nBoth say this is how validateOnlyOverlapping for false behaves.\nIt sounds like we are repeating the same text again, and it is not clear how your paragraph is suppose to be different than the next.. Since you fixed indentation of brace just below this one, this brace should be indented left 2 spaces.. no warning here is definitely wrong.\nCan we fix this in scope of this PR?. I don't see any examples where 2nd variable is lower or higher than expected.\nPlease add them.. remove this comment since it is fixed now.. remove unnecessary changes.. This is a weird place to add the code.\nThis method is getting expected child indent, but you are doing validation on non-children elements and not adding to how the expected child indent should be calculated.\nI think we should move this code to a new method that overrides checkIndentation, still calls the super, and then does your extra validation. This is how MethodDefHandler does it too.\nThis sound more reasonable?. This probably relates directly to my comment about the no warning in the tests.\nYou are just making sure where the resource starts on the line, and not all the lines of the resource.\nIf we call the line wrapping handler here for the entire 1 resource, it would handle the wrapping for us.\nWhat do you think of this?. Done.. Javadoc doesn't look like it was rewritten for how method changed.. Why else { if (...) instead of else if (...)?. same comment as above.. no where in the scope of just this method do you define CASE_GROUP or LITERAL_CASE. result is only based on finding the parameter tokenType.\nJavadocs should be written based on what the method alone does, not what it could do in where it is used. Otherwise it will have to be rewritten everytime we add new calls to it.. Input files should be named after their tests.\nFileTabCharacterCheckTest's inputs should be named InputFileTabCharacter..... We prefer comment suppressions instead.\nEx: // -@cs[CheckName] Reason for suppression. Why not move everything in this block to a new method called validateNonObjects?. @romani We consider all arrays, including primitives, to be objects?\nThis seems slightly weird, but makes sense since it can be assigned null. I'm not sure if issue creator realized this.\nI think we should mention this in the xdoc if we keep this as is.. This seems exactly the same as the property definition below.\nEither make this a real sentence and paragraph, or remove it.. I find explicit null initializations weird as it doesn't reference the property name at all.\nhow about for objects that explicitly initialize to null?. input classes must match file name.. @Kietzmann This is still not done.. @romani Please confirm you are ok with this having no violation, just because default is before case and only default is set for validation.\nThis type of scenario isn't that apparent to me that it will happen.\nWe may need some clarification in xdoc for this.. But the class is still in use. Does TC not care about deprecated classes then?. This input file looks like it is only used by this test.\nWe expect alone files to be moved, not copied, to their new destination.\nPlease confirm for this file, and fix including any other files for this test.. This is still the same issue as before because you have <b>onlyObjectReferences</b> and it is still a re-hash of the properties table with nothing new added.\nI would just remove this.. Please add object to description like we did for the example config below.. Please add Java example below that will show which will be violations and which won't when this config is used.. @Vladlis Weren't you the one who added it and enabled it to our config?\nhttps://github.com/checkstyle/checkstyle/commit/5b16c53a8f769c6b25801ff6833ba2922559a01f#diff-57008d74ef07a22dbce6d6d109834cae\nCould this be because the level is set to WARNING?. not all of these are DEFs. Let's just call this 'Other' or 'Misc'.. I like the separation the new way gives for each method, but I dislike some of the code it has to copy around.\nI am not sure about which of 2 ideas to change this to:\n1)  How about we drop the default constructor and make a new one that takes all fields as arguments, then we could make the fields of the class final and rename getDetails to getInstance. \n2) Why don't we transform getDetails into a constructor, and have all these methods populate the fields directly.\nProblem with point 2 is assignments could be overlooked since they are split into so many methods.\nProblem with point 1 is we are stuck with getDetails as a wrapper for the constructor.\nWhat do you all think?. Should this be a switch since this is probably the most likely spot where we will add missing tokens?. Shouldn't this be a method of Details? It is only used there.\nIf so, move any other methods that only Details uses to inside it.. This change is definitely making the new code hard to review.. Slightly outside the scope, but why isn't there a violation on 36 being requested? Doesn't it meet the requirements to require a trailing comma?\nExample: Why doesn't it require the code to be {5, 6,}, instead of {5, 6,}.. Sorry, I forgot about that.\nThis can be ignored.. I think so but wait for someone else to agree. @romani @MEZk . We are expecting very few changes in inputs.\nOnly allowed changes are package and class name changes. No other changes.\nPlease revert these superfluous changes.\nPlease manually confirm there are no changes like this for other inputs as we can't see differences for new input files.. We are not expecting violation line/column positions to change.\nThis looks like it is because of the class name change.\nTo keep violation line/column numbers the same, we need you to revert the file rename and the class rename. Only change in input should be package name change. We will fix file/class name later.\nPlease do this only for inputs that cause violation positions to change.\nEdit: I updated main Issue with this note for clarification.. @romani Not all acceptable tokens in this check are default.\nIt is ok to have lambda here?\nI believe you said we only add default tokens when token won't do much damage. How did we decide this for lambda in this check?. Why aren't these last 2 lines the same as isAloneOnLineLambda implementation?\nOnly difference is one uses == and the other uses !=.\nBoth methods talk about being alone on line. Shouldn't this one call the other?\nIf they shouldn't be the same, I think the methods or their descriptions need more clarification why they are different.. Why is this a violation? It is a singleline.. It is best to keep all points in first post of issue. No one will read entire issue to find other added points especially if it grows big.. We aren't expecting violations to change.\nPlease verify you can leave package as it originally was, with it still in it's new folder, and not get a build error. I know we have some wrong packages else where.. getPath was changed but getNonCompilablePath was not.\nBoth should be changed.. @romani can decide then, but we didn't want to have violations change just so we didn't have to deeply review the changes to the input file and the behavior of the check to make sure it is not because of something else.. @romani Should we update XDOC with examples for this token and case token? I didn't realize before we didn't add any new examples.. We are not expecting any changes except in StaticVariableName's test and it's inputs.\nPlease remove all these other changes.. We are not expecting any changes to our config in this.\nPlease revert.\nIf you have a violation you can't see how to fix, suppress it and we'll try to either help or keep the suppression.. Why is this needed here? I removed it and got no differences in tests.. When I see AnnotationDefHandler I think of ANNOTATION_DEF token, not the field one.\nPlease rename this to AnnotationFieldDefHandler.. why are we accepting this if it is wrong?. We don't need these WRONG comments if there is a warning/violation on the line.. We can remove anything that isn't helping an annotation with it's test.\nI just added these in issue to showcase we get violations from other block types correctly.. as noted below/before, this is the field defintition, not the annotation definition.. Separate question. For annotation definition you use ClassDefHandler.\nAnnotationDefHandler looks like it is coded like MemberDefHandler.\nWe can't use that handler, or give them common parents, instead? Does it make sense to do this?. @soon I would just fix any tests you wrote, unless you can easily include the others you didn't write.\nThey should be put to a new issue, as we should almost always be testing something in a test.\nAssertions should be meaningful to what the test is trying to accomplish.. remove return from javadoc.. undo superfluous change.. We are not splitting files between individual tests yet.\nPlease remove the duplicated file and have them point to the same one.. @kukreja-vikramaditya Since ClassDefHandler is used by other tokens, not just annotations, I am fine with the fix being inside ClassDefHandler if it is possible and not having a separate handler.\nPlease see if you can fix this as part of this PR.. I still didn't receive an answer or change from my previous comment on this. https://github.com/checkstyle/checkstyle/pull/4217#discussion_r111636791\n\n\nAnnotationDefHandler looks like it is coded like MemberDefHandler.\nWe can't use that handler, or give them common parents, instead? Does it make sense to do this?\n\nYes I based the field checking on member def handler.\n\nThat makes it sound more like they should have common class hierarchy.. Ok, can be ignored then. @MEZk This is probably a question for @romani .\nIssue didn't mention logging anywhere. It is rare we log in rest of CS project as it is too, which we should eventually fix.\n@soon You only use concreteFiles as a count in the logging, not as an actual list of items.\nWhy don't you remove concreteFiles, add everything to allFiles, and use a primitive int variable to count what you add under if (file.isFile()) { for logging.. I am writting up the sevntu issue.. This is ok to me too, lambda didn't require it separated.. Lambda agrees with you.. Lambda gives a violation.. @romani I assume you mean the examples in this post: https://github.com/checkstyle/checkstyle/issues/1509#issuecomment-138005191\nI think it is more than just the code examples, the comments around it explaining the build up of the change history also helps. That's the post that makes the most sense when I was first reading this issue.\nI think we should plagiarize mkordas and describe the rationale in steps like he does.. > . BTW we have RightCurlyCheck which is responsible for such logic.\n@Vladlis Neither RightCurly or LeftCurly support ARRAY_INIT token which is what the brace is. This would have to be a new issue, which it already is.\n\nWe could require } to be on a new line.\n\nWhich would just duplicate work of other checks. Even in issue, original author said this check wasn't suppose to be used alone. https://github.com/checkstyle/checkstyle/issues/1509#issuecomment-139809732\nWhen we add these tokens to the curly checks, we should specify the best configs to use for them with this check in xdoc.. method and method2 are the exact same case. What is the point of having the same case twice?\nPlease change method2 to a good case that won't produce a violation.\nEdit: I see now one has final and the other doesn't. We still need a good case.. undo superfluous change.. same. See my comment at https://github.com/checkstyle/checkstyle/pull/4116#discussion_r108506898 which I asked you to change but you didn't.\n\nWe are not expecting changes to this file.\nChanges for your issue should be in an input file that no other tests uses to avoid this conflict.. try-with-resource isn't a parameter. catch is the parameter.\nchange to <code>catch</code> parameters and resources in <code>try</code> statements.\n\nPlease also make similar change to top of LocalFinalVariableNameCheck's class javadoc.. @Nimfadora I think you are mis-understanding what I am asking here. We need good cases (no violations) and bad cases (violations) involving try-with-resources. They need to be in their own input file and not modifying an existing one.\nUndo the changes to this file. Create a new file like InputLocalFinalVariableNameTryResources.java.\nAdd all your cases to that file and create a test in LocalFinalVariableNameCheckTest to run it.\nThe example above is a good case, no violations.\nThe 2 examples you had before, which are now gone, are bad cases, had violations.\nAll 3 should be in this new input file.. this has nothing to do with try-with-resources so it can be removed.\nIf you need examples, see the first post in the main issue.. >  needed to add a one more test, to use this input file. Hope, now it is ok\nThat is what I stated.\n\nAdd all your cases to that file and create a test in LocalFinalVariableNameCheckTest to run it.. @romani Please confirm you are ok with this token here.. Just put violation, not the line/column position.\nIf input is updated, no one will remember to change these positionings.. considering isn't a sentence. Please place a few words to make it a sentence. Ending period can be dropped for now since it is a list.. Changes to SummaryJavadocCheck shouldn't be in the same commit as fixes for javadoc.\n\n1 commit should be only fixes for javadocs from violations from changes in check.\nOther commit should be only changes to SummaryJavadocCheck, it's tests, and anything else the check needs to function properly.\nPlease name commits so it is clear which one is which.. Please undo superfluous changes in inputs like this and others.. If you fix a 'bad' javadoc in a good 'input' file please make sure to make a copy of it in the bad 'input' file if it isn't already.. don't fix 'bad' javadocs in a 'bad' input file.\nWe expect violations here to make sure your logic is working correctly.. @romani Please confirm you are ok with this token here.. Can't this one and the one above be combined into 1 module?. We could make this final and put current path assignment into else statement.\n@romani Would you prefer it this way?. Same as before, we could make this final.. I prefer empty finals below fully defined finals.\nIt might be because of the length of the lines goes from big to small making it easier to read.\n@romani What about you?. As romani said above, this can be ignored.. Recursive calling will lead to stack overflow errors if tree happens to become deeply nested.\nWe had this problem in another area for one of our java grammar tests. I think we should avoid this.. I am fine with the method rename. It should be a minor commit.\nI don't think it will hurt having it in this PR.. http://checkstyle.sourceforge.net/apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#ANNOTATION_FIELD_DEF\nSince they are more methods than variables, should we base it on MethodDefHandler instead?. why is public added?. please undo superfluous changes.. NoCloneClones sounds a little weird.\nJust name it InputNoClone.. Thanks. I understand.. if we know the result, break out of the loop.. if we know the result, break out of the loop.. same here.. Why is this file deleted?\nWe expect file to be moved/copied, with just changing package and changing class name.. why are there so many changes in this file?\nfile should just be moved/copied. Changes should be minimal.. this is probably reason for weird changes in git history.\nYou changed InputEmptyBlockDefault -> InputEmptyBlockSemantic and then changed InputEmptyDefault to same name InputEmptyBlockDefault.\nLeave InputEmptyBlockDefault as it originally was.\nRename InputEmptyDefault to some other unique name.. @romani We went through this before.\nThis is breaking the test as we have to save defaultLocale before we modify it. By the time finally is called, it is already modified and we don't have the original value.. same here.. if we want final variables closer to where we are used, should we turn this on for our own check?\nhttp://checkstyle.sourceforge.net/config_coding.html#VariableDeclarationUsageDistance\nignoreFinal property.. what is the purpose of changing enabled_by_default?\nIf you are trying to disable it, shouldn't enabled be changed to false?. @romani To follow the rest of the pattern, Assert.assertEquals should be a static import.. @Kietzmann This item is still not done.\nPlease rename file and class to InputNoClone.. I removed this and got no differences in test.\nPlease explain why it is needed and have a example in input to show it.. We should only validate tokens that start the line. You do no verification that this token, and the ones below, starts the line.\nif you debug this, isAcceptable should never be called for non-start tokens, imo.\nCould we use LineWrappingHandler here with a supplied first indent to do this all for us?. undo superfluous change.. @kukreja-vikramaditya I removed all methods from this class except the constructor.\nThe only differences in test I saw was message changing from annotation field def type to annotation field def modifier. There was no differences in requested indentations or missing violations.\nPlease explain why we need all this code if existing code handles everything fine outside of small name difference.. Please rename class to same as file, InputCatchParameterNameSimple.. Can we rename this file/class to just InputConstantName, no s on end.. @Luolc See comments from previous PR.\nhttps://github.com/checkstyle/checkstyle/pull/4152#discussion_r109811131\n\nhardcoded list should stay to avoid bruteforce search\n\nWe only expect changes to 3rd party search, around createObjectWithIgnoringProblems and getAllPossibleNames.\nInstead of doing blind searches using Class.forName, we want to get all modules from defined packages field and see if module's name matches one of those.. See my comments at https://github.com/checkstyle/checkstyle/issues/3607#issuecomment-291342875\n\n\nour naming notation that Check class should be \"*Check\".\n\nWe dropped this convention in test's CheckUtil because it missed out on our own checks that end with Holder instead of Check.\nI think checking the class' inheritance is enough, who cares what it is named especially for 3rd party checks.\n\nPlease change this to do a check on class inheritance instead.\nSince this is for 3rd party checks, we can't assume package or class name will make sense.\nPlease look at test code which does similar at\nhttps://github.com/checkstyle/checkstyle/blob/ed5d4d98da5963b658eafaaa3aaee98ba989db65/src/test/java/com/puppycrawl/tools/checkstyle/internal/CheckUtil.java#L146\nhttps://github.com/checkstyle/checkstyle/blob/ed5d4d98da5963b658eafaaa3aaee98ba989db65/src/test/java/com/puppycrawl/tools/checkstyle/internal/CheckUtil.java#L199\nMaybe we may want to consider moving those utility methods to production, then along with your changes, all 3rd party libraries will be able to recognize and identify our modules by type atleast.. > Would it be best to remove this handler and just work with MethodDefHandler?\nThis is only dependent on if you can prove a worth for the new class. If current code does violations and requested indentation fine, then I see no reason to keep the class unless you can give me one.\nIf message naming convention is only needed change and it makes the specific token easier to identify, then let's find a way to do it in MethodDefHandler.\n\n.AnnotationInnerLineWrap field(); //indent:8 exp:4 or 8? //Error line\n\n8, it is a wrapped line. IntelliJ probably uses 8 for linewrap indentation, which is why it wants a position of 12.\n\nMaybe this is expected behaviour for MethodDefHandler cases?\n\nFor now it is expected.. Why are we mocking AST instead of working with a real java file?. We don't assert anything in this method nor throw any exceptions, which will lead to false security.\nCan we assert something to prove what this test does and make sure we don't break it in the future?. Technically this isn't a range since it only contains end line number and column number. Start would be needed for it to be a range.. start token isn't needed.. There is no range, it is checking if token is past previous end.. createObjectFromMap(name, NAME_TO_FULL_MODULE_NAME); should be the first thing we try. It will be the fastest and the most common scenario.\npure createObject(name) should probably be used last when user supplies full package as name.\nOrder of finding module should be, imo: \n1) our module map test\n2) 3rd party map test\n3) full package (or raw) test\n4) fail.\nWe can probably discuss skipping 1-2 if given name has a period in it.\n3 is only really needed if we don't examine maps for the full package. I don't really see a benefit from doing this.. We should describe method as what it does, not what it does where it is called, otherwise we will have to update this for every new call that is added.\nimo: Checkstyle NAME_TO_FULL_MODULE_NAME map or third party map -> the supplied map.. same here.. This looks very complicated to review easily. Can we simplify it?. Third party check can be anything of ours that can in configuration file.\nThis includes FileSets, BeforeExecutionFileFilters, RootModules, etc. which you don't list.\nThis should almost mimic CheckUtil.isCheckstyleModule which is why I mentioned why I think we should move it from test to production.. Please explain this change to me.. Why is there 2 of these? Do we get something more from not doing just 1?. what is g? Test methods should be named after what they are testing.. This can be ignored if fix won't be easy/quick.. This can be ignored if fix won't be easy/quick.. Please update class name too.. Class name should be the same as file name, so yes, InputEmptyBlockSemantic2.. > in most UTs the name is a full qualified one\nUTs are specific just to our tests. Users mostly use the configuration file and our examples in XDOCs which just specify check name alone.\nSee:\nhttps://github.com/checkstyle/checkstyle/blob/master/config/checkstyle_checks.xml\nhttps://github.com/checkstyle/checkstyle/blob/master/src/main/resources/google_checks.xml\nThe names inside the module tag is what eventually gets called in this method to create the class instance.\n\nIf we use your order without skipping, then we would do step 1, 2, 3 each time and it slows down test quite a lot.\n\n1 and 2 should be pretty fast after the first run. They are only looking up names in the map and it should never cleared.. > Do you have any suggestions how to manage isCheckstyleModule and its related methods? They are in two files now and it is not good to keep them in different place imo\nWill be in my next review.. > IMO, it doesn't make sense to have a filter for non-null check here.\nI don't know the original reason. Could be that they didn't want to modify the variable coming in the constructor?\nI am now curious if we have any current tests using a null package.\n@romani Do you know the reason for this null check?\nCan we remove it and assert the list must never have a null item?. My opinion is these should be in their own utility class, and public, so 3rd parties can use it for their own needs.\nWe are already copying/pasting this same code in sevntu and sonar.\nWe should remove the methods we copied from test so there is no duplication. I think the utility class should be named something like CheckstyleReflectionUtil or ModuleReflectionUtil.\nIt probably should be in the api package.\n@romani Are you ok with this?. IMO, I think we should allow access to the results of 3rd party scanning.\nAgain we use similar code in sevntu and sonar.\n@romani Are you ok with this?. @Luolc Is this an issue with PackageNamesLoader.getPackageName? Should we change it there to drop or not add the last period?\nSee example test: https://github.com/checkstyle/checkstyle/blob/b4a337a599e853cdc44b19a76da28fcfab2956cd/src/test/java/com/puppycrawl/tools/checkstyle/PackageNamesLoaderTest.java#L66\n@romani Is there any reason for the last period? class is not api.. > They are only looking up names in the map and it should never cleared.\nI see now that the list isn't static. I was thinking it was but it can't be static since it is based on the values being sent to the constructor.\nI'm not sure we can do anything about this.. Map isn't static because we are relying on values from the constructor. This will cause us to always re-scan the classpath for more checks in our tests only.\nShould we be concerned?. > I don't know the situation in production, but in most UTs the name is a full qualified one. And thats why I put the \"full package test\" at first in my previous commit.\nThis might be because of https://github.com/checkstyle/checkstyle/blob/b4a337a599e853cdc44b19a76da28fcfab2956cd/src/test/java/com/puppycrawl/tools/checkstyle/BaseCheckTestSupport.java#L54 where we call clazz.getName() instead of getSimpleName.\nI don't know of a reason for this nor can I see one.. Range still in javadoc.. same.. why can't we keep ${project.basedir}?\nThe other one, checkstyle_checks.xml, has all its. If we want to run this config on external projects like sevntu, we probably need it.. It is missing the standalone fileName too. Please add.. If we are following how we are organizing checks in other areas in #3891, these should be in sub-folder checkstyleanttask not inputs.. @romani Shouldn't each attribute be it's own separate row like we do for checks?\nIt is not like I can declare paths through the file attribute.\nWe should put this ant section under the control of our tests like we do for checks.. The other ant task has the same filename for toFiles. Shouldn't they be unique to prevent clashing?\nWe should name this cs_non_main_files_errors.xml.. am I missing something? aren't these the 3 folders we wanted them to run on? This whole configuration is for checking our inputs.\nPlease remove these 3 excludes.. @romani I want to share the results of generateThirdPartyNameToFullModuleName through the field thirdPartyNameToFullModuleName. This is all modules we recognize in the classpath.\nWe are doing similar scanning at sevntu and sonar. We could swap out the scans there and use PackageObjectFactory directly.\nThis would remove reliance on guava in other projects, but we would still use guava in CS for this scan.. Number of files scanned went from 147 to 1152.. How can we move an input file and not have to change any tests?\nIf a test was using this file, it would be complaining about it not being able to find it now.\nIf no tests are failing from missing this file, then it was never used by any tests.\nPlease confirm and delete file if so.. >  InputOperatorWrap we use inner declared interfaces in InputSeparatorWrap\nSo we are only keeping this file because it has 2 interfaces used in another input? It also has 4 classes, which we don't even care about or use in any other tests?\nThis is another problem with our inputs.\nIf @romani is ok with this, we should move these 2 interfaces to InputOperatorWrap (as long as it doesn't hurt the test) and remove InputSeparatorWrap completely.. @Kietzmann Please show us where.\nhttps://github.com/checkstyle/checkstyle/search?utf8=%E2%9C%93&q=InputDesignForExtension&type=\nIt doesn't show up on a search.. Yes, I am not sure about \"closest\" and \"current\" here.\nI assume this is trying to reference https://github.com/checkstyle/checkstyle/blob/ce21086e087661553f3a774c38362327ee88996a/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportControl.java#L195 .\nInstead of closest why don't we go with \"longest matching sub-package\"?. \"current package\" ==> \"current subpackage\" \n\"up to the parent \" ==> \"up to the next parent\"\n\"then checks goes up to the parent and continues checking.\" ==> \", then it continues checking in the parent sub-package.\". How about:\nIf there is no matching allow/disallow rule in any of the sub-packages, including the root level, then the import is disallowed by default.. I am not sure what is meant by \"bigger\".. Put example classes in parenthesis after java.util package.. java.util is not the package of java.util.stream.Stream. java.util.stream is.\nI am not sure if this was the purpose of this example or not.\n\"every import is allowed \" seems like too broad a statement to make.\nOnly all java.util package imports are allowed.. @romani Like I asked in a similar PR, should we keep this file just for its public interfaces used in another input, or should we merge it so our inputs are completely standalone?. This type of change must be reverted. We already have no package usage above. This is here for a specific test.. same here.. I don't see this input being used anywhere, so why are we copying it over?. ok. Ok, we will leave these for now and get them later.. This class should start with InputAnnotationUseStyle.... It has an s after Annotation.. I question if we should have this method.\ngetCheckstyleModulesRecursive already returns everything, users could just trim down the list themselves if they need too.\nWe don't do this for any other modules, but checks is an important aspect of CS.\nI'll let @romani decide.. I feel we are not gaining anything but having harder to read tests by having this utility method, assertException, and doing weird exception checks.\nremove assertException and split these into 2 different tests. Hard code the assertException into each test, and catch the desired exception.. same here. (see below). > it is already cached in field\nMy question is not about it being a cached field. I am specifically asking if we can have a public getter for thirdPartyNameToFullModuleName or the results of generateThirdPartyNameToFullModuleName.\nEverything else except what i mentioned below is what I expected.. This can probably be ignored now.\nThe method just calls ModuleReflectionUtils.getCheckstyleModules which is public so 3rd parties can access this.. Input is missing tthe t.. @romani getCheckstyleChecksRecursive served our needs in test.\nMy question is do we need this method in production. Currently no other production code calls this method so we are including it only for 3rd party use. It does the same thing as getCheckstyleModulesRecursive but restricts results to only checks.. We can't upgrade PMD until all issues are resolved.. Your code is not null safe.. If your going to say it is more efficient, please put reason why.. isn't String in method name redundant? We only take a string as a parameter.\nI would say just name it isEmpty.. If we know the result, then break out of the loop as soon as it is set.. space between level and (import-control).. example every imports is allowed except classes => example, all imports are allowed except the classes:. Ignore this for romani's.. @romani There are valid uses of final on parameters or for-loop variables. If it is used in an anonymous class, it must be declared final or it can't be referenced directly inside the anonymous class.\nThat said, we should have a check that produces a violation if it isn't used in an anonymous class.. @Kietzmann substring line only.. I use isEmpty for all my projects.\nI am fine with isBlank.. > 3. Please do not optimize our config by regexp. No need to keep it compact. A little of verbosity is good there.\nI thought we were removing regular expressions?. Don't you have the ending swapped for each value?\n\ndisallowed ... then the import is allowed.\nallowed ... then the import is disallowed\n\nShouldn't disallowed say \"then the import is disallowed\"?\nThe next section doesn't have this issue.. > As we do not plan getting rid of Guava\nBut we are trying to reduce it's usage.\nSee https://github.com/checkstyle/checkstyle/issues/3484 . And the use of CharMatcher is specifically referenced there.. > What problem with have with \"Input\"s ?\n@romani \nThis has been there since the beginning at https://github.com/checkstyle/checkstyle/commit/34c2bf22b7566494743d92aa61f2f81eb325319d#diff-77bfd3865009a55956759f167933c352R91 .\nI assume the reason was that some check in 'test' was being picked up, or was added to prevent this from possibly happening. When we run this from the test side, it doesn't know the difference between main and test, so it will pick up anything it finds.\nI removed this and got no junit errors. So it is not a current issue.\nI am fine with removing it.\nEdit:\nI checked out the commit and removed the Input condition and the test failed.\nCheckstyleException: cannot initialize module com.puppycrawl.tools.checkstyle.whitespace.InputGenericWhitespaceCheck\nIt seems the Input check was added before we made sure the class extended the AbstractCheck (or at the time, Check).\nThis is why it isn't an issue currently.. @Kietzmann He is talking about the bottom line, 513. The bottom one is always the one we pick in the review.\n@MEZk If we add everything to it, the return tag will be the same as main description, which to me seems repetitive and makes the Javadoc less helpful in fully reading it.\nWhat about rewriting the main description's first sentence to Checks if the value arg is blank by either being null, empty, or contains only whitespace characters. and rewrite the return tag to true if the arg is blank.?. > Variables names are being compared \n@ps-sp If you are comparing text, than make that clear by using param.getText().equals(ast.getText()).\nIt is unclear from our standpoint if you are looking for the exact same node or just want to see if the text is the same. Nodes are immutable, so you can use == for the same instance.\nast can't be null here as you are using it in a previous condition, so the use of DetailAST.equals seems unnecessary.. I would have to sit down and look at the code in more detail to tell, but IMO, it comes down to if you are comparing the same node or are comparing the same text.\nIf you are looking for the same node every single time, which might be a rare occurrence in CS, than you should use ==.\nIf you are looking for the same text, than you should use getText().equals(...).\nDetailAST.equals is actually coming from antlr.BaseAST which I would say is not safe for usage in CS since we don't override it in our DetailAST class and may miss out on DetailAST's custom fields.\n@romani What do you feel about overriding DetailAST's equals and hashCode to work with our implementation?. Use full words.\nress => resources. res => resource. expRes => expectedResource. resSpec => resourceSpec. Done.. It has an argument. true/false. I wanted to make it follow like Ant and specify true/false.\nI couldn't think of a short name. o is already taken and I'm not sure i would fit. I questioned adding oim.\nIf we want to change this to no argument, what should it's name be? We are omitting modules by default.. @MEZk ping. undo superfluous change.. @romani We should remove this way of validation and switch to verifying via AstTreeStringPrinter like we do with verifyAst. Reading, understanding, and modifying custom written trees is not easy.\nI will make an issue for this.. LeftCurlyCheck isn't picking this up because we are suppressing everything for these files at https://github.com/checkstyle/checkstyle/blob/master/config/suppressions.xml#L56-L57 .\nI will make new issue.. @ilanKeshet null can't be achieved through a property in our configuration file and passed to the setter. Please show me example where it can be otherwise.. I am leaning towards executeIgnoredModules. @romani Are you ok with this?\nI don't see a reason for short form right now.. Please explain this change.\nWhat does it do and what would happen if we didn't put it in?. > it wasn't recognizing leading asterisks after a newline \nYou mean outside the \\r new line change? If so, can you make a report to show this issue?. I didn't realize _tokenStartCharPositionInLine is a field that came from ANTLR itself.\nIt is populated via _tokenStartCharPositionInLine = getInterpreter().getCharPositionInLine(); which is defined at https://github.com/antlr/antlr4/blob/master/runtime/Java/src/org/antlr/v4/runtime/atn/LexerATNSimulator.java#L736-L746 .\nIt is only reset to 0 on \\n so this is why the fix with \\r doesn't work the same. It doesn't see it as a new line.\nI question why we had this special code before if it was never really needed.\n@ps-sp If you print the ANTLR tree with lines only as \\r does it display the line numbers the same as if you were using \\n?\nI can't really read your test to tell if this is the case.. @ps-sp Your tests also fail to display any line/column numbers as I can't find any of your print out numbers in it.\n\nShould we create an issue for ANTLR project ?\n\nYes, please create an issue with them and give us the link here.. @romani Please weigh in on this issue. Antlr has said it will never support \\r alone as a new line.\nThey recommend converting \\r alone to \\n before parsing.\nShould we do this?. Would removing this exclude cause an issue or lower our mutation threshold?\nClass has absolutely no methods or fields, so I can't see how mutation wouldn't be 100% for it.\nIn other pitests, deprecated classes did have fields/methods and caused a lower score for missing tests on them.. Done.. Done.. I didn't think maven would work with dependency that defines itself if said dependency hasn't been installed yet as it gets all dependencies from the maven cache folder.\nCan someone confirm it isn't using the previously installed SNAPSHOT version? (I believe this is what is happening)\nIf this does work as intended than https://github.com/checkstyle/checkstyle/pull/4403 isn't needed.. It looks like it does work. I can run the checkstyle phase without the dependency installed.\nIf a dependency is already installed, it still seems to use the current project and not the installed one.\nI'm still looking if maven documents this behavior somewhere.. > Maven release plugin is failing if any snapshot version is found\n@Luolc So we can't keep this change. We will get around limitation by using #4403 then.\nPassing CI is still a good sign that the fix will work.. Please add some good cases where no violation is produced.\nAlso add one with line breaks after instead of space.. @romani Please confirm it is ok to be default.\nI don't see anything wrong as most people don't write with space after.. below example => the example below. First sentence should say what the method does, not any of it's internal workings.\nPlease change it to something like Returns the current tree's ClassResolver. or something else that doesn't imitate the return description so much.. Again, describe what the method does. What you have written could just go directly in the @return description.\nChange to something like Checks if the given class name can be loaded... Same here as previous.. is default in annotation => is the default token of an annotation field. Remove second sentence that just duplicates @return.\nFinds => Checks\nFind methods usually return position or Object being looked for. This method returns boolean.. remove 2nd sentence.. acceptableTokens => acceptable tokens. Can we keep original line separation between statements?\nSo empty line before and after here.. Same here, just empty line before.. Done.. Done.. Done.. testleading => testLeading. 'Catch-fail' is not needed. If any exception is thrown outside method, junit will fail as default and give the user the full stack trace.\nCatch is only needed to verify exception occurs and the message/trace it gives.\nremove try/catch.. Go through and undo superfluous changes like these. We need to make PR as concise and easy to review.. SortedSet => SortedSet<LocalizedMessage>\nPlease always add template type to classes.\nSome IDEs will give warnings/errors on this.. You can't use Whitebox.getInternalState(LocalizedMessage.class,?. Rename to DummyFileSet.\nI thought this was an AbstractCheck when reading it before looking at it's declaration.. Rename checks in this method to fileSets and anywhere else it happens in this class when the topic is really file sets.. This is a weird method name for a getter. getMessageDispatcher is final and protected which is why we can't override it.\nHow about we name it getInternalMessageDispatcher?. Listener => AuditListener. I am not familar with the utility, so you can ignore this then. I just thought since we used it once, we could do it again.. @Nimfadora Since this item isn't being shown as outdated, it isn't done. :)\nHint:\n\ntestCheckerProcessCallAllNeededMethodsOfChecks. Inputs must be named after their tests. Test is RegexpHeaderCheckTest so inputs' name must start with InputRegexpHeader.\nPlease also keep class name the same as file name.\n\nPlease also do the same with the regexp.header files.. @ps-sp How does Javadoc tool react to custom tag with html element(s) inside, like a href?\nDoes it leave it as pure text or convert it to a link?\nDoes it support other custom Javadoc tags too?. Why don't we use getNode?. same here. same here (using getNode). testis => testIs. testis => testIs. Could we make this getNode(int... nodeTypes) and use it in more places?. In every other test, you name variables ast, ast2, etc. and you put them in order of variable names. This is the only one that breaks that pattern.\nCan we make the layout here similar?\n. Please separate assert from previous statements like you did for other tests.\nSome separation helps make reading easier.. same here.. same here.. imo, this should be a common method, like in BaseCheckTestSupport like we do for Java grammar.\nWe already know one other class will be using this.. @Vladlis Folder names should be how we define our standard pattern in https://github.com/checkstyle/checkstyle/issues/3891 .\nIn AstRegressionTest, as a similar example, we name text tree files with the postfix Ast.txt.. Test is named ModifierOrderCheckTest so files must start with InputModifierOrder.\nPlease change.\nAll inputs for this class should follow the pattern. I see others that aren't.\nClass names of inputs should also be the same as file name.. Undo superfluous change.. why not assertEquals(classpathExpected, classpath1);?. empty line before assert.\nI would like to see more line separations and not one big chunk of code. Separation makes clear distinctions between different groups of code like varaibles, manipulation, assertions, etc.. There shouldn't be any other code after assert.. Yes.. Yes, it looks like you may have to switch all _tokenStartCharPositionInLine == 0 to _tokenStartCharPositionInLine == 0 || previousTokenType == NEWLINE, but it may fail anyways if there are any whitespaces before.\nPlease add many examples of this with \\r, with no whitespaces and with whitespaces before and after and confirm.. How else are you going to distinguish suppressing a specific check when multiple instances of the check are defined?. @ps-sp It is probably best for your UT that you make an exact duplicate of InputLeadingAsterisksExtended.txt but change all \\n to \\r.\nThen it will be easy to compare that the 2 UTs produce the same results.. As I understand it, this issue is about replacing written paragraph text inside this file, not about changing the printed tree structure.\nThis tree item is a SINGLETON_TAG, so the change is incorrect.. What prevents this loop from going beyond the root node into it's siblings if predicate never returns true?. See https://github.com/checkstyle/checkstyle/issues/3891 for the naming convention of directories for inputs.. Please change to getPath to follow the pattern of our other tests.. Why did we remove all the periods in these tags?. Please undo superfluous changes.. Please undo superfluous changes.. AST is singleton. Don't use equals* but ==.. You fixed if current node goes to parent, but what about if it goes to the next sibling of root?. checkutils/ should be part of getPath. One test should never go outside it's folder.. AST in findTokenInASTByPredicate should be camel case.\nAst.. There is nothing asserting that map has any keys/values. This test will pass if map is completely empty.. > see there are no period in other javadoc tag in PackageObjectFactory\nI see them in a few places like PackageObjectFactory.joinPackageNamesWithClassName. \nAlso looking at the history, you added the map parameter and the period on the end of that one. :)\nSeeing as we have no styles placed on the Javadocs, I don't see removing the periods as necessary and just superfluous as someone else will come around and add them back in.\nPlease just add the periods back for now. Sometime we will enforce this through a Javadoc style guide.. This is not a true test.\nAstRegressionTest just calls AstTreeStringPrinter.printFileAst which just calls the Java grammar.\nOnly AstTreeStringPrinter.printJavaAndJavadocTree will parse javadoc comments.\nThis test should pass with or without your other changes.\nI also don't believe this test, related to Javadoc, should be in the AstRegressionTest which is more concerned with Java grammar.. Input files should have package and they should be correct unless it is for testing something specific.\nEclipse gives me errors on this because we set inputs to be compilable.\nAll our other inputs follow this pattern.. You said why you removed Main but why do we need to add all these checks?\nShouldn't all TreeWalker tests be in TreeWalkerTest?. @romani Should we just remove this line if it is not really needed?. This test looks oddly similar to testParseFile except for getAbsoluteFile and system's file.encoding, yet the test name doesn't describe this any by testPrintAst. Other test is named testParseFile.\nCan we name this test something more distinct to describe what it is doing and how it is different than the other test?. We can't call this method through the normal process instead of invoking it via reflection?. You are correct. This was a detail hard to see.\nThis can be ignored.. I understand a little bit better why this is.\nJavadocDetailNodeParser.parseJavadocAsDetailNode calls JavadocUtils.getJavadocCommentContent which doesn't check the node's type.\nWe can ignore this than.. @romani can decide, but since we are splitting things by profiles which is almost by folders, I think a class' tests should be in it's own test instead of someone elses.. Why did this change? How was previous method call not ok?\nIt is only a javadoc comment if it is in the correct position. I assume some UTs were failing?. Layout and methods are almost similar to BaseCheckTestSupport except for the addition of verifyJavaAndJavadocAst.\nWhy don't we just use BaseCheckTestSupport instead?. > I created the PR anyways thinking that we can discuss this in PR\nIf you want to discuss something, please mention it in first post otherwise we may overlook something in review.\nCorrect me if I am wrong, but the UT and Input you pointed to isn't even a javadoc. It only has 1 * instead of 2 so it shouldn't even pass as a javadoc in a wrong position.. > CheckTest support class\nIt sorta is, but can be used for other things too. For example, AbstractViolationReporterTest uses it.\nAlso, if another test extends BaseCheckTestSupport and it needs this method, we now have a conflict as 1 class can't extend 2 others.\nCurrent BaseCheckTestSupport also already does Java grammar verification, so it seems ok to use it for Javadoc. So I still think we should use BaseCheckTestSupport over a new class.. 2nd PR I have seen creating this new file. It is also at https://github.com/checkstyle/checkstyle/pull/4451#discussion_r122080072 . I had other review items on this class in the other PR.\nIf we really want this class' methods in, why don't we do #4381 which could be merged first as it is just a test change and won't need regression.. Discussion made at https://groups.google.com/forum/?hl=en#!topic/checkstyle-devel/cRw80h4Q73o so it is in a clear place instead of spread among many PRs. It makes sense, but it shouldn't be done in this PR.\nFeel free to make a new issue for it.. To me this method seems too specific. It searches current node and it's future siblings. It's main purpose is only to avoid previous siblings.\nI can't imagine this being used very often.\n@romani What is your opinion?. I think numbers should be replaced with Project.XXXX to make it more human friendly.. Missed the full file name.\nInputRegexp.invalid.header => InputRegexpHeader.invalid.header. why rename this to errorMessages (specifically error) when you want it to be violation at #4465 ?. So we are going to rename once here and then rename again in another issue?\nWhy don't we just keep the same name here then and rename only once in other issue?. This is not done.. Taken from romani's comments at https://github.com/checkstyle/checkstyle/issues/4369#issuecomment-307098907,\n\nIt should be //CLASS_DEF[@text='TestClass'] . @romani It is still an input file. If test doesn't rely on requiring a specific file name, why must we keep it like that?. Class name was not changed.. Too many ts.\nAbsttract => Abstract. Please remove these empty lines before closing }. There are a few in tests you have made.. DetailNode is for Javadoc ANTLR. DetailAST is for Java ANTLR.. Can we sort these. Leave utils on top since it is the main target.. Method should start with a verb that describes the action the method is doing.\nHow about verifyJavaDocsCount?. I think this line should be inside foundJavaDocsCount. I don't think the method needs to return anything.. We should use JavadocTokenTypes.JAVADOC instead of hardcoded number.. 184 = largest token + 1\nWhat was wrong with old value? I don't see right now how this survived at https://nimfadora.github.io/com.puppycrawl.tools.checkstyle.utils/TokenUtils.java.html#org.pitest.mutationtest.report.html.SourceFile@27461fd5_129. Should this be TokenTypes.COMMENT_CONTENT instead?. Replace 1 with TokenTypes.EOF.. Should we verify a specific value?. remove excess empty lines. Only 1 needed.. Please rename configLocation to config so it is seen as a bean.\nWe are already starting to do this with checks, so reflection utilities will recognize them and tie them together.. @timurt \nThis line: for (final LocalizedMessage element : messages) {. This can be ignored as @romani wants the method removed.. This can be ignored as @romani wants the method removed.. methods should start with a verb.\nRename to getSingleThreadMode.. Why do we name this MultiThreadModeConfiguration if it doesn't extend Configuration?\nDoesn't this make the class a little confusing?. This allows a default value. Why don't we just assign it \"1\"?. Same here.. Javadoc doesn't use Java file. Please change this to Javadoc file.. Same as other comment, change this to actualJavadocFileName.. same as other, supplied java file -> supplied javadoc file.. Technically javadoc doesn't have ast it has node.\nI think it should be changed to tree. Please update method's javadoc and assertion message.. I was also referring to class names.\nJava: https://github.com/checkstyle/checkstyle/blob/4a087c020c2b97130e94f9292b94cb4bc1f6ed93/src/main/java/com/puppycrawl/tools/checkstyle/api/DetailAST.java\nJavadoc: https://github.com/checkstyle/checkstyle/blob/b4a337a599e853cdc44b19a76da28fcfab2956cd/src/main/java/com/puppycrawl/tools/checkstyle/api/DetailNode.java\n\nNaming is because old ANTLR built AST nodes, as we extend CommonASTWithHiddenTokens, but ANTLR4 doesn't support AST nodes of old ANTLR, hence why it isn't called AST.. Why do we need a new instance? FileText is almost immutable except for lineBreaks, which is just populated on demand.\nCan't we return the field as is?. > Step 2\n\n\nAdd FileContents to audit event to make it available for filters. We will add AST root to FileContents later \n\n\n@MEZk Shouldn't the event eventually accept FileProcessingResult?. @MEZk I think we should eventually remove this constructor as it doesn't contain the file contents. We are always working with a file, so I can't see why it shouldn't be populated (aside from any exception on file).. @MEZk Should fileName be in FileProcessingResult?\nIt seems like they are fully conntected. FileText can also retrieve the File object, which can get it's name too.. > it will require to catch IOException from FileText constructor.\n@MEZk I'm not sure where you think IOException is coming from. Both constructors don't have an IOException being thrown right now and I am not talking about creating FileText in the constructor.\nFileText is already created in TreeWalker https://github.com/checkstyle/checkstyle/pull/4468/files#diff-503cc093d3169abd5697cc8189f27f32R319 and passed around. We should be using that FileText everywhere somehow.. @timurt Please explain how cobertura is failing with just return fileText;.\nThere are no branches or such, and we know the method is already being executed.\nIs coverage failing in another class?. ok.. Please add either node that failed the test, or it's position in list, to the exception so we know which one it is.. @MEZk We pass FileText to all FileSets at https://github.com/checkstyle/checkstyle/pull/4468/files/8da878eaf14710f1d578ecadfa1caafe94512dc3#diff-503cc093d3169abd5697cc8189f27f32R321 . So TreeWalker should be able to hand it over to AbstractCheck without having to create a new one.\nSince the class is still List<String> outside Checker, it depends on https://github.com/checkstyle/checkstyle/issues/3034 being done first.. > If FileText object is null then we will not be able to extract fileName, absolutePath and etc.\nfileName will be a separate field inside FileProcessingResult, imo. Then we won't have to worry when FileText is null.. @MEZk No we don't need it, but to accomplish this we would have to send the direct class FileText to all parties as they only receive List<String> as described in #3034.\nIt also seems slightly weird we would go to FileText for the file's name. we will soon also have FileProcessingResult with a lot of file related stuff.\nShould we create a single class like CheckstyleFile. It will contain the file name, FileProcessingResult, FileText, and everything else related to the input and output of the process method? We could move the unnecessary fields from FileText into CheckstyleFile.\nIf so, let's create another issue on this.. Why do we need a new instance of the same class?\nIs this the for the test testFileTextRecreation you mentioned in issue?. It looks like all this does is call class constructor. Should we remove this and just call constructor directly?. calling getLines in a loop looks very bad. We are creating new instances each loop.\nPlease make a temporary variable before entering the loop.\nYou could use temporary variable for previous call to getLines above a few lines.. Same here.. same here.. What is purpose of interface when only one class implements it? ConfigurationLoader uses null to control default value.\nIf we still keep MultiThreadModuleResolver, I think we should remove this interface and rename MultiThreadModuleResolver to ModuleResolver. If number of threads is 1, it will always return normal checker/treewalker names anyways.\nSee https://github.com/checkstyle/checkstyle/pull/4420#discussion_r123918516 .. What is reason for this to be serializable?. When are we going to have 2 instances to compare?\nLet's remove equals and hash if we aren't going to have multiple instances we need to sort or find difference between.\nIt is rare we implement these for classes in Checkstyle.. Should start with verb, getSingleThreadMode.. ModuleResolver seems slightly misleading as it doesn't resolve and return the instance of the module, but it just resolves it's name.\nIf it stays, should we call this something like ModuleNameResolver and make method just resolve?\nSee https://github.com/checkstyle/checkstyle/pull/4420#discussion_r123918516 .. So ant will never be allowed to multi-thread? This doesn't seem right.\nIf we don't want to do this now, we need to have an issue to expand it later.. I dislike this class and variable name because it makes the reader assume multi-threading is always involved. This is not the case since we have methods like getSingleThreadMode where the instance can be a single thread setting.\nHow about we rename it to something like ThreadModeSettings?. MultiThreadModeSettings and ModuleResolver almost go hand in hand. When you have one, you almost very likely have the other. They are also similar in which instance it relies on the number of threads set.\nShould MultiThreadModeSettings just have a method for resolveModuleName and we do away with MultiThreadModuleResolver and interface completely?. @ps-sp Please post failure without change.. multi-thread is still in javadoc. I see this in other places too.. Talked about at https://github.com/checkstyle/checkstyle/pull/4420#discussion_r123916782 .\nnull was still left in. This field shouldn't be null IMO unless you can point to a specific reason that we can't remove null.. Taken from https://github.com/checkstyle/checkstyle/pull/4420#discussion_r123917161 .\n\n\nWhat is reason for this to be serializable?\n\nIt is a part of DefaultConfiguration, which is serializable and therefore it also should be serializable\n\nWhy does DefaultConfiguration or any of it's parents need to be serializable?\nThis will be another issue if a good reason can't be found.. Taken from https://github.com/checkstyle/checkstyle/pull/4420#discussion_r123917283 .\n\n\nWhen are we going to have 2 instances to compare?\n\nA test is using PowerMock to mock a constructor (https://github.com/checkstyle/checkstyle/pull/4420/files#diff-06fde9f319ac6e31f8a808d413fe1f8eR593) and it is using equals to compare arguments\n\nIf you assign ThreadModeSettings.getSingleThreadMode() to a variable for all uses in that test, would that then alleviate the need for an equals method?\nIf not, I will need to debug the specific case to see what is the reason for this.\nWe shouldn't have this kind of production code just for a weird test.. New properties also need to be added to http://checkstyle.sourceforge.net/anttask.html#Parameters .. > This process ... should therefore be avoided.\nOutside the scope of this Issue/PR.\n@MEZk @romani Should this constructor eventually be deprecated or removed?. It can stay Serializable. I don't know the reason PropertyCacheFile requires it.. IMO, this shouldn't be the expected way to build tests.\nExceptions should be thrown up past the method to the runner so it can display the full stacktrace to the user for debugging if it is not expected.\nWe shouldn't catch and fail with a simple message.\nWe should be asserting some actual result in this test.. @romani Why do we have this single test not even testing the specific class it is named after? It is testing Indentation.\nHaving this test indentation outside of IndentationCheckTest means it is bypassing all the extra checks we added to the Indentation tests. (IE: all files have comments on expected/actual indentation level)\nIMO, we should delete this class and move the only method to IndentationCheckTest.\nI'm also not sure why this test is called label as input has nothing to do with label:.. @romani Should this be attached to this issue or should it be a minor?\n@subkrish Please prepare the changes we are suggesting.\nThis test and it's inputs should move to IndentationCheckTest and this whole NewHandlerTest should be deleted.. @subkrish You can use same PR for the fixes we asked for.. @romani I agree.\nisInt should be in CommonUtils with other similar methods.. @romani See my comment at https://github.com/checkstyle/checkstyle/pull/4420#issuecomment-306282276 and https://github.com/checkstyle/checkstyle/pull/4420#issuecomment-307835884.\nOriginal code change removed all methods in TreeWalker and moved them to AbstractTreeWalker which is a huge and meaningless change as we have no implementation yet for MultiThreadTreeWalker and aren't sure what methods will be in it or which will be truly abstract.\nI feel we should hold off on this until we have concrete design of multi-threading.. Was based on my original review: https://github.com/checkstyle/checkstyle/pull/4420#discussion_r123917558. @romani This is a test only method, so I see no reason we even need it.\nNo production code calls it, only tests do to access the private field.. Indentation is very special as it does alot of extra checks and balances because of it's complexity.\nPlease change verify to verifyWarns to turn these checks on.\nYou should be asked to change the input file with this..  >LocalizedMessage.class\nAlso class defined in 2nd to last parameter should be the class creating the message, not the message class itself.\nExample: https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/Checker.java#L323. Instead of recreating the whole argLine, can we have a new property like argLineExtra and in the POM, append it to argLine?. Should these be final like getDefaultTokens?. Done.. These reasons should be in the configuration, not this test.. These tokens in this test need a reason why they are staying as ignored.. All error message keys should be their own field, similar to check tests.. @romani Like I said below at https://github.com/checkstyle/checkstyle/pull/4553#discussion_r125308406 ,\nThese keys should be fields like we do for checks and their tests. I am fine with this being a public field in the Main class. This is similar and follows the pattern on how the checks are done.. @subkrish Please us Luolc's changes.. @romani If any check has exception in finishTree or visitToken, messages will never be cleared and appear in the next file run. We saw something like this in sevntu. https://github.com/sevntu-checkstyle/sevntu.checkstyle/issues/589 .\nIMO, we should clear messages right before beginTree.\nWe are already doing this in AbstractFileSetCheck in this PR.. Why public? I don't see any external calls in this PR.. We said before catching an exception and just failing is bad practice.\nException should be populated to junit runner to display to user.. Make an issue for it otherwise we will forget.. @romani I advise against assigning these to a class field. These classes are based on static variable locale at https://github.com/checkstyle/checkstyle/blob/4a087c020c2b97130e94f9292b94cb4bc1f6ed93/src/main/java/com/puppycrawl/tools/checkstyle/api/LocalizedMessage.java#L64 .\nIf we are changing it's values in a test's lifecycle, having it as a field will make it's values based on the time the class is instantiated and not when the test is run. If another test is manipulating any values, we could be stuck with improper values when the class is finally instantiated/run.. @sagar-shah94 Please just use Collections.unmodifiableSet.. Same as https://github.com/checkstyle/checkstyle/pull/4580#discussion_r125167696.\nThese tokens in this test need a reason why they are staying as ignored.. Only 1 extra line is required.. Why are we removing this code? Who is going to call destroy for the checks?. @subkrish Continue on as romani has requested.. > AbstractCheck#destroy is empty \nDid you read the comment there?\nhttps://github.com/checkstyle/checkstyle/blob/ab548244eda102c5dc39cf0fc34e6803be192ba7/src/main/java/com/puppycrawl/tools/checkstyle/api/AbstractCheck.java#L135\nhttps://github.com/checkstyle/checkstyle/blob/ab548244eda102c5dc39cf0fc34e6803be192ba7/src/main/java/com/puppycrawl/tools/checkstyle/api/AbstractFileSetCheck.java#L65\n\nshould be overridden only by demand at subclasses\n\nI assuming these methods were added incase module had a file open and it needed to close it or free up other resources before ending.\nIf we are removing this destroy we would have to remove all of them as they are chained together.. Like I mentioned to others, try-catch-fail is not a good option.\nJUnit automatically populates exception to user and fails the test. If exception occurs, user will now get a bland message and not the stack trace of the problem.\nThere is nothing we can assert here?. @MEZk That area looks like it is where exception is expected. This test is verifying no exceptions occur.\nAlso that example is missing a fail in the try if no exception occurs.\nI still don't recommend that too if it is no exception test as now it may allow one kind of exception through.. @romani No tests failed when chaining of destroy in TreeWalker to checks was removed. Only code coverage failed.\nWe should atleast add a test to verify the chaining happens and isn't accidentally removed in the future.. > If incompatible file comes toTreeWalker#processFiltered nothing happens. Is it ok?\nyes it is ok.\nTreeWalker only handles java files. If it is given an XML file, it just ignores it.\nFiltering of files only happens in processFiltered and not call to it.. > Check tests are failing\nBefore his latest push, there were no failing tests just code coverage.\n\nproblem that super implementation is empty so it will do no effect on test.\n\nYes, so add a child to TreeWalker and verify the check's destroy is called.\nWith TreeWalker 'destroy' removed, check's destroy will never get called.. @subkrish Try making this abstract to remove TC error.\nI assume it is complaining because you made an empty class.. @subkrish to keep history of this file split this into 2 commits.\n1st commit renames old class to new class.\n2nd commit adds old class back, but just empty and deprecated.. @romani Shouldn't this class be abstract? It will probably cause other issues because of it's naming.. @subkrish just suppress TC than.. @subkrish if @romani agrees, we can rename this to AbstractTestSupport.. https://github.com/checkstyle/checkstyle/blob/master/shippable.yml\nThis file must be updated if you are changing pitest.. Same here.. I can't comment on the specific line, but shouldn't targetTests also remove filters and filefilters?\nPlease verify if any other target tests can be removed without lowering mutation coverage.. please change package to correct location for input.. same here.. IntelliJ says IOException isn't needed and I agree. It is just returning strings.. We already have an checkstyleanttask folder inside ant, so this package location should be: com/puppycrawl/tools/checkstyle/ant/checkstyleanttask.. This input is only used by this test. It should be moved, not copied.. File name didn't change so this line change is completely unnecessary.\nPlease undo change.. same here.. Please rename class name to follow input's file name.. These changes look superflorous. You just indented code over and I don't see a reason for it.\nPlease undo.. @sagar-shah94 Why don't you want to match against token? it is the most precise way to find a specific thing like the inherit doc literal.\nMatch text is slower and not as accurate. Some tokens like descriptions could have same text as inherit doc but not be true inherit docs.\nWe use parsers for a reason, you should rely on them more.. Why do we need FileText on the end of test name?. There is also a method public void processLines(List<String> lines).\nWhy is the other method remaining? Shouldn't it be swapped for this new method instead of keeping both?. @subkrish I thought ant package was re-organized because some are in special folder. This isn't the case.\nYou can ignore this comment as it will be handled as part of #3891 .. Can you explain these changes and why we need special Java code instead of grammar fixes?. Can we make these all InputCheckstyleAntTask...?. Same.. Same.. Same.. This type of method should be avoided. It is going against the organization we are trying to do.. We should be able to use input directory of MainTest for this as there is more than 1 file in it.. input and expected output should be copied to test's input folder.. same.. same.. same.. same as checks/metrics. mycheckstyle.properties should be name after test and start with Input.. Same as checks/metrics.. Same as checks/metrics.. Same as checks/metrics.. In latest master, only MainTest uses this file, so it should be moved not copied.\nPlease rebase on latest master if you aren't already.. @Kietzmann Every comment I made below discusses that. These files shouldn't be in outer scope but be in MainTest's input folder.. So did I. For checks/metrics see https://github.com/checkstyle/checkstyle/pull/4697#discussion_r126657978.\nWe should use MainTest's input folder, not someone elses.. we should remove try-catch-fail.. same.. same.. inputheader => InputHeader.. same.. same.. same.. same.. same.. same.. same.. @subkrish This is your issue. Original code was directory, not file.\n@romani This is another bad sign when tests pass but it is code coverage that tells us there is a problem.. @subkrish If you can modify test to fail with your incorrect changes after the call of antTask.execute, that would be great.. I like we increase number of files, so file won't be a problem again.\nHowever I am very concerned about using direct index 5 to find this specific input.\nDo we actually sort the files list result? nondex should fail if we don't.. @romani What is your thoughts?\n@subkrish Does pitest depend on this assertion?. @subkrish Thats just the profile. It is similar to code coverage in that you will get a build failure if you don't have the right percentage of coverage, but pitest isn't set to 100% yet.. getNonPackagePath(\"checks/metrics\")); => getPath(\"\")\nWe should use input directory, main, just like we require all input files in that directory.. @romani Should we just suppress all javadoc files?\nIE: files=\"[\\\\/]test[\\\\/].*\\.javadoc\". Why do we add comment here but no where else in this file?. @romani Please review these removals.. Can we add an assertion right before this that messages' size isn't 0?. We can't do more than notSame? It makes this a vague test.. Non-test methods shouldn't start with test. Rename test to validate.\nAlso romani doesn't like assertions outside of test method.. @Nimfadora This is not true. Look at blame for these lines and associated issue.\nhttps://github.com/checkstyle/checkstyle/blame/154f120d7b71c30ec64f3ef801fb080a24a21c4a/src/main/java/com/puppycrawl/tools/checkstyle/api/AbstractLoader.java#L52\nhttps://github.com/checkstyle/checkstyle/issues/3605\nThis removal must be reversed.. Then please remove.. Can we then assert the resulting values are the same?\nNotSame atleast verifies instance is different.. Tests shouldn't have logs.. This is almost similar to a try-catch-fail but worse. If method can't be found, you are logging the exception and the JUnit will still appear to pass. No one will look at logs for a failure, they only see success and don't care.\nIf method can't be found throw the exception out of the method to the runner so it will fail and display failure and stack trace to user. There should be no try-catch.. same.. same.. @romani let's do this, please start an issue.. I feel we should an assertNotNull before this line for getLineNumber.. same since lineNumber is a class.. Shouldn't this still start with {@inheritDoc} since it is an overridden method and you are not re-defining the description?. my -> by?. @romani @Nimfadora Is this something our check, FinalLocalVariable, missed?\nIf so, we should make an issue on it.. replce com/puppycrawl... with getPackageLocation().. Why did we change the configuration? This is not expected.. @subkrish This is the purpose of getPackageLocation being abstract. All get*Path methods should be concrete and final and use that method, as all inputs should be in the exact same folder path.. @sagar-shah94 I assume you are referring to this.\nIt looks like you indented this code over to the right 4 spaces.\nI don't see a reason why we need to make this change, so I was asking you to undo the indent and move them to the left 4 spaces.. @romani @sagar-shah94 Are we going to fix this?. Suppressions in tests is fine for me. Indentation is a monster anyways.. needs to be final.. Replace com/puppycrawl... with getPackageLocation().\nThis method should also be final.. I only see tests referrencing this method.\nWe should not loosen modifiers just for easier testing. Use reflection to grab method.. Since we are changing this, can we use the new AbstractTreeTestSupport class instead? We are switching over everything to these new classes.\nSee commits under #4592 .. This should not be acceptable.\nWhy do we need root? We are basically disabling foreign message testing with this.\n. same.. @romani Should we enforce no usage of Locale.ROOT through a check?. @romani Why is this class public?. > surviving mutation is same between master pit-test reports and patch pit test reports and all the new mutations are being killed\n\n100% 211/212\n\nIssue is utility rounds up. 211/212 does not equal 100%. It should have calculated it as 99%.\nDecrease in config is ok in this situation, IMO.\n\n4643#discussion\n\n@ps-sp Thanks for pointing this out, I didn't see my name referenced.\nYes, this looks like the same as the other issue, but with the addition of moving the method to a different class.\nI am more ok with this change than previous because you made it a utility method and it sort of looks like one. I dislike the fact that we need it as a utility method with only one production code call to it.\nIf we are going to keep this, can another place call this method. What about TreeWalker#createBlockCommentNode?\nSince this is off topic, if we are going to keep it as a utility method with the change I asked about, it should probably be in another PR.. These are filters not annotations as the header on line 122 suggest.\nMake a new header for filters inside TreeWalker and move these lines right under it.. restore empty line.. Please make simple overridable methods like this near the top like https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/api/AbstractCheck.java#L89 . No one will find it on the bottom.. Please also make sure all headers are in alphabetical order.. If I have to choose between the 2, I currently like TreeWalker* better since it is connected with that module and Java compiling.\nI dislike Ast slightly as Javadoc is a form of AST even though we call it Node. If Java upgrades to ANTLR4, will we rename these classes accordingly too and break previous compatibility? And how will we name them differently so not to confuse with Javadoc as both will be nodes?. Please restore the Examples section, just remove the part about SuppressionCommentFilter and SuppressWithNearbyCommentFilter, but still state that it is 'to be used in conjuction with other checks'.\nMaybe add something that nothing in checkstyle uses these currently.. @sagar-shah94 One example in your current code is: https://github.com/checkstyle/checkstyle/pull/4047/files#diff-0bacc6c5fac536bdd9bde091d0bb53beR171\nThis will be part of new issue.. @romani Looks like we had a bug with hibernate. Taken from https://github.com/checkstyle/checkstyle/pull/4755#discussion_r128911185 ,\nremove suppression and add annotation.. Why do we need this suppression here when Checker, which has similar code doesn't need it?\nhttps://github.com/rnveach/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/Checker.java#L436. Should this be surrounded by a try/catch like Checker?\nhttps://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/Checker.java#L450-L462. Suppression comment should be on why you can't comply with check, not what violation was.\nExample: https://github.com/checkstyle/checkstyle/blob/master/config/suppressions.xml#L74-L75. Sorry, I used the wrong link to my own fork.\nYou are correct and can ignore this.. It was a question to more to the others. It may be helpful to let the user know their module cant initialize versus some other exception that can happen around there.\n@MEZk @romani . @MEZk See issue https://github.com/checkstyle/checkstyle/issues/3435 .\nWe added annotation to all interfaces and did no suppressions.. missing end ) and space before ). extra space before ==.. also remove final from parameter.. Why isn't this in an input file? Why do we have to create it at runtime?. > but I need only first level children\nIsn't this just DetailAST.findFirstToken?\nhttps://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/api/DetailAST.java#L384. Size doesn't matter for inputs. Please move this to input file.\nCode and inputs should be separated. Inputs are in files so they can be verified that they compile fine. We don't deal with non-compilable files.. Should we be seeing the question marks here?. I think this should just be a single dash (can't make the character in github).\nThe double '' was because properties will convert it to a single ' when displaying.. same.. I sort-of dislike this as we are completely skipping javadoc if it has an unclosed tag and check doesn't accept it.\nIf this was completely unintentional by the user especially in big javadocs, they will never know there is a problem or what javadocs we are skipping. The amount of false positive reports to us will increase once we start using this more and more.\nShould we instead print a violation on the javadoc saying it can't be processed because of an unclosed tag and maybe have a separate severity field or boolean field to turn that specific violation on/off?. @romani I am currently thinking along a similar pattern for my other recommendation.\nThe name of the enum should be LineWrappingOptions and the values should be IGNORE_FIRST_LINE and NONE.\n\nUse\nIgnore\n\nI feel this is so similar to the current TRUE/FALSE that it won't give us much room to add a 3rd option that has nothing to do with the first line if we require it in the future.. Why did comment text change so much in this file? All you changed was package name on first line, right?. shouldn't we change the first suppression instead of adding a 2nd?. > Old: /*0*//*1*/package/*2*/ com/*3*/./*4*/puppycrawl/*5*/./*6*/tools/*7*/./*8*/checkstyle.grammars/*9*/./*10*/comments/*11*/;/*12*/\n\nNew: /*0*//*1*/package/*2*/ com/*3*/./*4*/puppycrawl/*5*/./*6*/tools/*7*/./*8*/checkstyle.astprinter/*9*/;/*10*/\n\nPlease change so numbering remains constant.\nExample: /*0*//*1*/package/*2*/ com/*3*/./*4*/puppycrawl/*5*/./*6*/tools/*7*/./*8*/checkstyle/*9*/./*10*/astprinter/*11*/;/*12*/. I see now, the name of the files were starting to confuse me.\nWe can ignore this.. Why was this changed?. And it fails if the class is left private?. Is this message no longer possible to receive? If so, shouldn't we remove the field and properties message?. I still think it should be removed. We will still have it's code in history if we need it again.\n@romani You agree?. @Vladlis It is a public property, so it probably can't tell the difference between something we give to the users and something we just use for ourselves. Had it been private, it probably would have thrown up a flag.. Why did we change this value?\nChanging the configuration isn't an acceptable way to deal with a violation.. Why don't we just make 2 methods?\nassertUtilsClassHasPrivateConstructor and assertUtilsClassHasNonPrivateConstructor?\nI dislike enums with values TRUE/FALSE. You might as well use Boolean.. Since this is becomming connected to SummaryJavadoc, please add a UT to SummaryJavadoc so we can have some regression of this later on.\n@ps-sp A change in grammar almost got by unnoticed on changes in checks. Nothing picked this up but this one little example and it wasn't obvious at all.\nI suggest you do regression on all javadoc checks with any ANTLR changes from now on to make sure this doesn't happen anywhere else.. Yes, but it still isn't acceptable.\nMake a suppression instead.. > PrintOptions.WITHOUT_COMMENTS\nImagine we add a 3rd option, WITH_CODE.\nWhat does WITHOUT_COMMENTS mean alongside other options like WITH_COMMENTS and WITH_CODE? It is not very clear if WITHOUT_COMMENTS means it also enables or disables WITH_CODE.\nThis is why I chose the naming scheme NONE, to signify no other positive options are applied.\nIMO, i think we should stay with this scheme.\n\nComments has NOT be printed.\n\nThis wording looks directly related to old TRUE/FALSE values.\nA better wording would be something along the lines No extra print options activated.. @romani This just shows our naming scheme is off.\nAbstractModuleTestSupport is defined as module and means it should handle anything related to checks, filesets, filters, etc.\nBecause we still need BaseFileSetCheckTestSupport, this shows that the ModuleTestSupport is actually a CheckTestSupport and it doesn't support parents of the Check.\nWe need to find a solution to this problem. @romani Yes.. @romani This removal is because the new createChecker method will handle checks as well as filesets.\nHowever, this test is slightly broken. Even though it checks for AbstractChecks versus FileSets, CheckUtil.getCheckstyleChecks only returns AbstractChecks, so we are ignoring all FileSets.\nOnce this PR is merged I will look at fixing this test.. Please move this closer to the other 2 filters.\nAlso please update javadoc to include the new module.. move this closer to other filters.. https://github.com/checkstyle/checkstyle/pull/4854#discussion_r130225527\n\nAlso please update javadoc to include the new module.\n\nThis point was not done.. @romani Do you know what is wrong with this suppression?. @subkrish I think it is because it is not allowed via https://github.com/checkstyle/checkstyle/blob/master/config/intellij-idea-inspections.xml#L2082 .\nPlease try adding it there.. >  interface with implementations(java8)\nWe might want to confirm that code coverage will show on these. In regression tool, we saw no coverage on these type of methods and switched to abstract classes.\n\n\"copy-paste\" is better than dependency between two classes\n\nI agree with romani.\nIf atleast one class implements this method but others don't, we should just copy/paste the throw exceptions to the non-abstract classes.\nHowever, if no classes implement the method at all, I think we should just leave it in the abstract class and make it final so it is clear no one uses it.. @romani Suppression still isn't working.. This is the culprit.\nMessages aren't very clear in TC, but if you expand them all messages_tr.properties says the unique message:\n\n1: Properties file is alphabetically unsorted. remove these from the input, we don't deal with uncompilable code.. can we put everything after && on the next line and be contained to just 1 line instead of split between 2?. We shouldn't be using equalsTree as it comes from base ANTLR and we are trying to avoid these as it is not based on our implementation. We have an issue to break our AST away from ANTLR more.\n\nCan we rewrite this line? I believe it is just recursively checking if the 2 ASTs are similar (same children, same types, same text, etc).. > override the implementation in DetailAST\nWe tried overriding equals method in that class and it lead to failures everywhere else.\nI don't know what will happen if we try to override this method too.\nI would just keep implementation in this class.. What does this do exactly?\nIs there a reason we don't checkout a tag like 1.7.0?. @AustinShalit You removed alot of code in this check from it's original at https://github.com/sevntu-checkstyle/sevntu.checkstyle/blob/master/sevntu-checks/src/main/java/com/github/sevntu/checkstyle/checks/coding/DiamondOperatorForVariableDefinitionCheck.java.\nWe can't rely on new token as not all removals are valid and compilable by the VM. I don't remember all specifics, but this check is named ForVariableDefinition because we can only do this for when we know the type of the variable along with it's assignment. This is why we checked if the 2 were equal using equalsTree.\nThe issue for https://github.com/sevntu-checkstyle/sevntu.checkstyle/issues/458 wasn't updated with this from my previous post.\nPlease restore original code. It may be better we get this check in and then move issues over to here and fix in another PR.. I'm sorry, I missed the fact that this is a no error test. I didn't realize this since it isn't inside wercker, where all our other regressions are.\nWe use master on purpose so we can stay up to date with their latest code.\n@romani Do you know what is wrong with their master build?. Please undo superfluous change.. same.. same.. same.. same.. same.. @romani This noinspection was added because changes for test PR haven't been finalized.\nWe can add it to that issue, or wait for that PR to be merged and I will fix it here.. @romani This configuration item is what gave me the error: https://github.com/checkstyle/checkstyle/blob/master/config/checkstyle_sevntu_checks.xml#L120-L127\nIt is because I have to use an AbstractCheck to force Java grammar to run on file.\nThere is no way to modify check as we can't identify what folder we are in using check, or identify what file we are in.\nBesides suppression, the only other way is to change the test to not use the full verify.. Done.. In your before example you had an empty javadoc. In this after example, there is no javadoc.\nIt is slightly misleading in that it makes it sound like you are forcing users to remove javadoc.\nEither\n restore javadoc in after example with empty line after package, \n or remove it in before example so that package and public are on consecutive lines.. Done.. > {@inheritDoc} mm\n\nmm{@inheritDoc}\n\nalready exists.\nThe other cases were added.. Done.. @romani \n\nNonTightHtml\n\nWhat is non-tight html? this code here is referring to unclosed tags and has other methods already named around that. IE: AbstractJavadocCheck.doesCheckAcceptJavadocWithUnclosedHtmlTag.\nIf it is referring to unclosed tags why isn't it named that too?. Isn't annotation name Annotation and not SomeClass?\nIf I wrote out java.lang.Override, annotation name isn't java, it is Override.\nPlease add java.lang.Override as an example too.. should be 8.2 too.. @romani \n\nClasses which are missed in Cobertura coverage report:\ncom/puppycrawl/tools/checkstyle/api/LocalizedMessage\n\nIt looks like either Comparator.nullsFirst or Comparator.naturalOrder forces cobertura to ignore the entire class like we have seen with streams.\n@Luolc Please rewrite this class not using those 2 methods and figure out which is causing the problem.. @romani \n\nIf it is referring to unclosed tags why isn't it named that too?\n\nShouldn't doesCheckAcceptJavadocWithUnclosedHtmlTag be renamed to be something like doesCheckAcceptJavadocWithNonTightHtml?. @ps-sp Please make the requested changes in this thread.\ndoesCheckAcceptJavadocWithUnclosedHtmlTag => doesCheckAcceptJavadocWithNonTightHtml\nNew property violateExecutionOnNonTightHtml that will give violation when a check that doesn't execute non-tight html comes into contact with one. Default should be false.\n@romani Feel free to edit this post if I missed something.. Done.. Done.. > t1 -> t2 -> apply(t1, t2);\nI am not able to make a copy of this and need some help.\n\nsingleline-nested lambdas\n\nDo you mean lambdas that are nested inside expressions?. > unclosed html tags\nPlease make sure all javadocs are updated to non-tight.. https://github.com/checkstyle/checkstyle/pull/4751#discussion_r131523877\n\nNew property violateExecutionOnNonTightHtml\n\nThis is suppose to be a property, not an overridable method.\nPurpose of property is to allow users to specify if they want an error that a html is non-tight so they can fix it if it is unintentional.. Why is variable on 2 separate lines?\nMerge them together.. move if after variable assignment.. Make this a MSG_ field.\nAlso it should be non-tight not unclosed.. Remove this and static import from class.. Inputs should be named after their test.\nIt should start with InputAbstractJavadoc.... Marking abstract classes is a risky business.\nOneModuleInstancePerApplication is the weakest type to apply to a module. What if a module that implements this abstract class requires the strongest type, like OneModuleInstancePerThread.\nYou will now have a conflict and the module will implement both interfaces.\nIMO, we either shouldn't mark abstract classes or if the define both, OneModuleInstancePerThread takes precedence.. @ps-sp I am talking about overriding the value of the property in the configuration, not the code.\nAny non-static field that has a setter in a module is a property in the configuration that can be set, like tokens, etc.... > This property already existed in the message.properties, I didn't add it\nIt should still be in a static field regardless. No one will see it inlined there.\n\nbut it doesn't make sense to add that error to other checks since they will never violate non tight HTML and hence never throw this error.\n\nAll other javadocs will now violate this error since you are putting this log into the abstract class.\nHowever this will now produce the problem of getting different results in different runs which is what https://github.com/checkstyle/checkstyle/issues/3340 is about.\n@romani We need to rethink this error message as it will be under all javadoc checks and expand on the issue referenced.\nShould we reconsider making this a new check instead, NonTightJavadocCheck and only violate javadocs that have non-tight HTML? It would make it clearer if user wants this functionality or not and easier to use since it will be in a single place instead under all javadoc checks.. Also why didn't you mark AbstractCheck and AbstractFileSetCheck but AbstractJavadocCheck. Once you mark the base, all checks are now forced under that if it is the strongest type.\nIf they are marked strong, we need to rethink how they are coded as they will bring down all the other checks.. shouldn't this be in a property file?. Nothing here says Check and you even use this on FileSets.\nPlease rename to module.. The only difference between this method and cloneCheck is in OneCheckInstancePerThread were it calls clone.finishCloning.\nCan we merge these 2 methods together, call it cloneModule and make the parameter take Configurable & Contextualizable like doCloneCheck.. Shouldn't the default clone be the strongest cloning, which is OneCheckInstancePerThread and not OneCheckInstancePerApplication? This would cause the least amount of trobules for 3rd party checks who have not upgraded.. why is this comment here outside method between javadoc?\nIs it talking about the class as a whole or just this specific method?. This should be in a property file.. @romani I am not sure about this new field. Can you review?. can we expand documentation to state what 1 thread is doing.\nI am still unsure on this point and think maybe name of interface should change too.. Please also state that a single instance will be used for all files, etc.... expand on what stateless is.. Please point me to code where this class is used in production code so I can examine it in it's lifecycle.. I'm not familiar with this inspection, what is it asking to do?. Completely empty class is not acceptable.\nIf we override methods in MT Checker, than those methods should be abstract in AbstractChecker, and their implementation moved to non-MT Checker.. Expand documentation.\nChecker calls filesets, not checks. So shouldn't this be called CheckerExecutionResults?. Shouldn't this section be a call to something in AbstractChecker as it's code looks similar?. Why do we recieve messages when we don't use them?. Do we really need these methods for such simple actions?. @romani This is the only way to intercept detailed communications in Checkstyle.\nI wrote a custom listener and expanded what communications it receives to gather and print metrics on it's execution time and number of times areas were called to produce reports and examine slow down areas, like modules and javadoc. You have seen these reports before. FileSets and Checks cannot receive the detailed information that a listener can as it is the most global thing we have in Checkstyle.\nThis is my branch: https://github.com/rnveach/checkstyle/commits/more_audits\nI also have a private listener which is basically an implementation of https://github.com/checkstyle/checkstyle/issues/3242 , where on auditFinished it examines the list of defined suppressions and prints violations on any that were not used.\nI have to use a listener as it is the only customizable area that is called at the end once all other modules, filters, and such are done.\n\nListener is not a module \n\nYet it can be defined in the configuration.. > Should I replace interfaces with annotations here?\nI assume the inspection is asking you to change these to annotations. Like I said, I am unfamiliar with it.\nI am fine with the interface as we usually use interfaces over anything else.\n@romani Are you ok with this?\nIntelliJ inspection has been on for 2 years and no one has used it before this. Issue that turned it on made no specific comments on it. If you are ok, can we turn inspection off?. @romani We just upped this number because we couldn't find a way to suppress it for a specific file, and here we are upping it again.\nShould we just turn it off and report problem to IntelliJ?. Why is this surrounded by an if if the attributes for both are different. We can have both in XML file if we wish.\nSince we are completely overriding the source in the CLI output to only show the ID, we should do the exact same in the XML.\nMake this attribute name source and not id.. @romani I don't see us comparing non-id sources of message. (IE: module name)\nIf 2 different modules print the exact same message on the same line/column, we will have the same issue as before where we had different ids.\nShould this be a new issue where we add module name if id is not specified to the compare?. Why is this a mock? Why can't we instantiate AuditEvent and LocalizedMessage?\nMocks should be a last resort when deep code can be done normally.\nYou were able to get by without a mock in XMLLoggerTest.. From here until the end, why can't we call verify(Checker checker, String fileName, String... expected)?\nDuplicating all this code isn't acceptable.. It's hard to follow what is the difference between these 3.\nRename message3 to message2 and rename current message2 to messageNull.. I'm also hesitant to say we should put the strings into local final variables to make reading slightly easier.. I don't know why this is, but since ever test is like this, we'll just leave it as is.. @Luolc Can't we modify existing code in AbstractModuleTestSupport to supply an optional different Logger, one that prints full original message?. Why isn't this ThreadLocal instead of a field inside CheckContextHolder? Wouldn't that remove the need for a wrapper like CheckContextHolder and we could use Context directly?. Also since it contains contents of a file, file violations and file contents, shouldn't it be named something like FileContextHolder?\nAlso what about AbstractFileSets, does it require a ThreadLocal like this? It contains file information too.. Do we really need this throw inside the private constructor? None of our other private constructors do this.. How is this different from TokenUtils.getTokenName?. @romani I can hook in to most of the verify but there is some obstacles and weird things preventing a full hook because of the custom AuditEventUtFormatter instead of using the real AuditEventDefaultFormatter.\nIf you agree this should be fixed, lets move it to another issue. We should have to rewrite AuditEventDefaultFormatter so we can pick and choose what is displayed for UTs, instead of a custom implementation which is not really regressing full message displays.. https://github.com/checkstyle/checkstyle/pull/4909#discussion_r131708441\n\nAlso since it contains contents of a file, file violations and file contents, shouldn't it be named something like FileContextHolder?\nAlso what about AbstractFileSets, does it require a ThreadLocal like this? It contains file information too.\n\nThese questions weren't answered.. @soon It is not very clear at all that comments are for the noinspection.\nLooking at other noinspections I don't think we ever documented them, unlike our own Checkstyle violations and I am not sure if it is allowed.\nI would just remove the comments.. Instead of a new interface since it should apply to all modules, should it be in something  central to all like AutomaticBean or Configurable?\n@romani Share your thoughts.. @soon Yes, use google translate.. I'm not sure if I saw this inspection in other PR, please explain why this can't be static?\nFrom IntelliJ:\n\nA non-static non-final\njava.lang.ThreadLocal field associates state with\nan instance-thread combination. This is seldom necessary and often a bug\nwhich can cause memory leaks and possibly incorrect behavior.. Same inspection here as in other thread.. It doesn't sound like it is expected behavior since the original field wasn't static either which would have produced the same effect.\n\nBut I don't see any negative side effects changing this to have all messages in a single place.\n@romani What do you think about this in a new issue?. Please add newline to end of file.. missing break after assignment.. Shouldn't file open tag be on the same level as file close tag?\nIf errorEvents is null, you will write a close tag without any open tag.. I don't see what the problem is without diving more into the code.\nTests can be rewritten if it is wrong.\n@romani ping. Shouldn't wrongSingletonTag always be last?. @romani Please see discussion, it is hidden now.. Yes, regression showed no problems, so it is more a readability thing for me.. Why is it redundant when we were required to make this change in test?\nI even made a comment about this in https://github.com/checkstyle/checkstyle/issues/4857#issuecomment-320938777 .. @ps-sp This is a new option that was enabled in TC.\nWe aren't changing booleans for values in properties, but for internal use right now. You can see quite a few setters with this suppressed.. Master TC is passing, so you shouldn't have any errors.. could be or should be?\nBe more direct in what this interface allows or doesn't allow.. could be or should be?. > processed only once at the end of application lifetime.\nBesides TranslationCheck, all others don't wait to the end of the application right?\nSo this statement is really true. The check may produce violations before the end, if it so chooses.. just the methods? Why no the fields too?. from the separate threads => from separate threads. You go into detail on the others, but this one only gets one sentence.\nCan you expand on mutable state?. @romani Why wasn't this com.puppycrawl.tools.checkstyle.checks.annotation.*?. This should be a NOT of https://github.com/checkstyle/checkstyle/blob/f244f7f1e2fe49d2fcda9cd5c901d751769f73e8/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressElement.java#L111-L112 .\nNOT(isFileNameAndModuleNotMatching(event) || isLineAndColumnMatch(event)) => isFileNameAndModuleMatching(event) && !isLineAndColumnMatch(event) => isFileNameAndModuleAndCheckNameMatching(event) && !isXpathQueryMatching(event)\nSo to me, it seems this method isn't coded correctly.. This should be a NOT of https://github.com/checkstyle/checkstyle/blob/f244f7f1e2fe49d2fcda9cd5c901d751769f73e8/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressElement.java#L120-L125 .\nIt looks coded correctly to me.\n\nIf either moduleId or checkRegexp match the event's module id or check, than the audit event should be denied.\n\nThis doesn't sound correct to me. Each element of a suppression is an AND not an OR.\nIf you supply module id and check regexp, the event shouldn't be suppressed if only one matches. It should only be suppressed if both match.\n\nI think, that is should be:\n|| checkRegexp != null && checkRegexp.matcher(event.getSourceName()).find())\n\nThis doesn't seem right to me.\nAs I mentioned before, it should be a complete NOT of https://github.com/checkstyle/checkstyle/blob/f244f7f1e2fe49d2fcda9cd5c901d751769f73e8/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressElement.java#L120-L125 .\nWhat I have seen so far, only accept method isn't coded correctly.. Edit: Nevermind.\nSubtraction, so it means 1 is probably >0 and the other is ==0,\nCan't we get a test where commentChecksResources is greater than 0?. > But what the reason to change these methods\nI wasn't specifying to change this method.\nLook at my comment in https://github.com/checkstyle/checkstyle/pull/4923#discussion_r134127552 :\n\nIt looks coded correctly to me.. >  if file name and module and checs are not matching and xpath query is not matching it means TreeWalkerAuditEvent does satisfy suppression properties, it means event should not be suppressed\n\nYes, this is true.\nI think all these NOTs are confusing the entire situation.\nI think isLineAndColumnMatch in SuppressElement is actually named incorrectly and should be named isLineAndColumnNotMatch as it returns false in https://github.com/checkstyle/checkstyle/blob/f244f7f1e2fe49d2fcda9cd5c901d751769f73e8/src/test/java/com/puppycrawl/tools/checkstyle/filters/SuppressElementTest.java#L72 which is a match.\nSo shouldn't your method be like:\n!isFileNameAndModuleAndCheckNameMatching(event) && !isXpathQueryMatching(event);\nIf file name matches and xpath doesn't match we should accept the event as the entire record must match to suppress the violation.\n@timurt This make more sense?. Ok, I see my mistake. You are not NOTing the entire expression, just the individual sides of the ||.\nYes, this looks coded correctly too.. Class should extend AbstractPathTestSupport and directory path should only be defined in getPath.. Same.. Also, why couldn't you use the same file as all the other tests?. What if the parameter startIndent isn't -1? Shouldn't you switch between it's value too?\nSee line 153, https://github.com/checkstyle/checkstyle/pull/4936/files#diff-1ab987049997f8605718e00e9fe92d25R153 .. this doesn't fit on 1 line?. package location should have name of test in it.\ncom/puppycrawl/tools/checkstyle/filters/xpathfilter. Also package location should have name of test in it.\ncom/puppycrawl/tools/checkstyle/xpath/xpathquerygenerator. > Change parseJavadocAsParseTree to createJavadocParser and ...\nMove firstNonTightHtmlTag to a new method getFirstNonTightHtmlTag(parser) and do all other work inside parseJavadocAsDetailNode.\nI like this the best.. Superfluous change. Please undo.. Same.. Same.. Same.. Same.. > Let's make a method resetCheckInternalState and such non required cleanup in it, additionally configure pitest to skip such method at all.\nSince the methods are public why can we do something like:\nDetailAST METHOD_DEF = {create ast};\nExecutableStatementCountCheck instance = new ExecutableStatementCountCheck();\ninstance.visitToken(METHOD_DEF);\ninstance.beginTree(null);\n// verify contextStack in instance is cleared\nSince these methods are default for all AbstractChecks, you might be able to make a test utility out of this to test these weird conditions on all file state fields that must be reset with each new file.\nEx: testCheckFileStatefulFieldOnBeginTree(visitAst, \"fieldName\");. Current XDoc verification won't allow this as we ignore all properties inside the base classes by default.\nhttps://github.com/checkstyle/checkstyle/blob/master/src/test/java/com/puppycrawl/tools/checkstyle/internal/XdocsPagesTest.java#L447-L449\nYou will need to add an override like AbstractFileSets.\nhttps://github.com/checkstyle/checkstyle/blob/master/src/test/java/com/puppycrawl/tools/checkstyle/internal/XdocsPagesTest.java#L457-L458. brase => brace.. check#beginTree => {@link AbstractCheck#beginTree} in check\nSound good?. ehich => which?. Why can't this be a verify() method call? Why do we have to manually do all this?. thrice <> 5. Also since you are asserting equality, it is is called exactly 5 times and not just more than.. Wouldn't it make more sense for these resets to be in the constructor of NonTightHtmlTagIntolerantCheck?. You should be asserting that the check runs like normal and prints no violations as check has no log calls, which is what verify is for.\nMaking multiple new lines of code that we have to maintain just to avoid a simple assertion doesn't make sense to me.. @ps-sp I see, just revert the code unless you see a way to fix it. I thought we had other examples of doing similar things.\nPlease run verify before pushing new changes to make sure it passes. Even I don't know all the checks we have enabled.. @ps-sp You could do the reset in beginTree instead, right?. I am fine with it being in the util class.\nI think it should be renamed to a more generic isFileExists as it isn't doing anything specific with suppressions.. All your other forms of writing this was writing the assignment with the standard one, and than change it's assignment if it was null. Why did you change it here?\nDetailAST nextNode = node.getNextSibling();\nif (nextNode == null) {\n    nextNode = node.getParent().getNextSibling();\n}. Why isn't this the same text as in the check in config_annotation or in the main Javadoc for the check?. Please make this description the same the check's javadoc.. Make sure this note is in the check's Javadoc.. @romani If I understood correctly, you want me to convert void registerCustomTypes(ConvertUtilsBean) to Converter[] getTypeConverters() and only do registration in AutomaticBean?\nThis is fine, but it will have to be a HashMap as register takes Converter as well as the class that is being converted. So the method will be Map<Class, Converter> getTypeConverters().. One last comment, should  we name the method getPropertyTypeConverters or getBeanTypeConverters so it is clear this only for property beans?. Done.. Please explain this change and why users need this method public?\n@romani What is your thoughts?\nWhy isn't writer final? I don't see a reason why users would swap output streams in the middle of execution.. @MEZk Do we really need a constructor without the tabWidth?. @MEZk @timurt Shouldn't we just remove the static and use the class fields directly?\nWhy do we drop the instance and pass all the class fields as parameters like this?. Should we mention the instance somewhere in this along with the thread?\nEach file gets a brand new instance, right?\n. accross => across\nupdated across all the application lifetime => updated across the entire application's lifetime. Same thing here, should we mention that it is one and only one instance.. missing period on end.. > across the application lifetime\nShould say against all files too.\nWe might need to mention somewhere at the end this is similar to multi-file validation which we don't fully support yet.. Same thing, with the same instance, right?. does not change fields value => does not change any field values, right?. So this marker has a catch about the initialization stage which I didn't see on any of the other javadocs.\nShould we include that notice in the others too?. mitable => mutable ?. mmutable => immutable ???. while => whole?. Should this be the 1st or 2nd sentence of the javadoc?\nThis way we have simple documentation first, followed by all guarantees.. Since this is a guarantee, should this be moved to the 2nd to last paragraph of the javadoc right before the multi-file validation comment.. Since this is a guarantee, should it move to the bottom of the javadoc?. > GlobalStatefulModule\nIt sounds fine that it doesn't include any information on the initialization stage.. > len = (len / tabWidth + 1) * tabWidth is not same as len += tabWith\nThis because simplification expects real numbers with decimal.\nCode is secretly written/compiled like len = Math.floor(len / tabWidth + 1) * tabWidth which drops the decimal after the division. This is because len and tabWidth are integers.. Why do we have an empty p tag? If this is to enforce new lines in html/report, shouldn't we use <br /> or surround whole text in <p>.\nIn this case, I think we should surround <b>Tree for example:</b> with <p>.\n=> <p><b>Tree for example:</b></p>. @MEZk As I also stated, the code written is already like that as integers don't have decimals. Since len and tabWidth are integers, there will never be a decimal from division so Math.floor is completely unnecessary.\nEven implementation of method won't accept integers: https://docs.oracle.com/javase/7/docs/api/java/lang/Math.html#floor(double). @romani Can confirm, but in xdocs we write paragraphs surrounding the entire text. I feel we should follow suite in the Javadocs.\nEx: https://github.com/checkstyle/checkstyle/blob/fd7fb45d409a2de0dead15f907e69b330dbaa5dc/src/xdocs/config_blocks.xml#L26-L38\n\nHere it is said that we should separate paragraphs with <p> tag.\n\nTo me this also looks like the old way of writing HTML before XHTML came and standardized the layout. A new PR will also prevent some Javadoc checks from analyzing on unstructured Javadocs so this is another reason why should avoid this way of writing.. @MEZk If this generator will be called from Main, than Main should give a default value for tab width. I don't expect you would make 2 different constructor calls based on if tab width was supplied or not.\nI expect call to be something similar to:\nhttps://github.com/checkstyle/checkstyle/blob/2a5654734a64c5459819c5ced97bdacd0285ccc7/src/main/java/com/puppycrawl/tools/checkstyle/Main.java#L496-L506. @romani Doesn't it seem weird we are duplicating and then documenting code in Javadoc?\njavadoc should be user friendly description of method and nuances. If code in method changes, I'm sure no one will remember to update this specific javadoc.\nTo me it seems this documentation should be comments on the actual code inside the method.. remove unnecessary empty lines.. As I stated in previous review, I think this comment should be an in-method comment.\nFrom Javadoc view, there is no CommonUtils.lengthExpandedTabs in method definition, so this only makes sense if user reads source code too.. Description also includes htmlElement so is the htmlElement outside description needed?. Why do we need STRING when description should fill this void, right?\nWhy is STRING not a description?. a* (a b)?\nCan't this be rewritten as (a+ b?)? ?\nWould that be better performance? The original one might not know when whitespaces stop and description begins since it appears twice, so it might require additional look aheads.\nSEE_LITERAL might be similar too, maybe some of the others around it.. @ps-sp \n\nIs this intended ?\n\nYes. We use a tool the encourages you to write code that doesn't depend on order when implementations don't specify an order. The tool is called NonDex.\nBecause of this we automatically sort things, like expected UT results. Sorting happens after run of Checkstyle, so it is only on the UT side and not in production code.. I see, new issue will require description. So really it should be like: | RETURN_LITERAL (WS | NEWLINE)+ description (no ? on end like romani had).. >  description is not allowed as html tags are not allowed in see\n@romani Look at current grammar definition for see, it has description in it.\n\n  | SEE_LITERAL (WS | NEWLINE | {!isNextJavadocTag()}? LEADING_ASTERISK)* reference?\n      (STRING | htmlElement)* (WS | NEWLINE)* ((WS | NEWLINE) description)?\n\nit is @see \"string\"\n\ndescription already supports \"string\".\nSee: \n|  |  |  |      |--JAVADOC_TAG -> JAVADOC_TAG [2:4]\n    |  |  |  |      |  |--PARAM_LITERAL -> @param [2:4]\n    |  |  |  |      |  |--WS ->  [2:10]\n    |  |  |  |      |  |--PARAMETER_NAME -> a [2:11]\n    |  |  |  |      |  |--WS ->  [2:12]\n    |  |  |  |      |  `--DESCRIPTION -> DESCRIPTION [2:13]\n    |  |  |  |      |      `--TEXT -> \"string\"  [2:13]. I am starting to finish up an issue that re-organized our inputs.\nPlease rename new input files to InputTranslation.... If file can't be renamed, please give us a reason why.. @Nimfadora TranslationCheck is our one and only multi-file validation check. So it is very \"special\".\nI believe it does need these fires of started and finished.\nPlease can confirm by running CLI using -f xml for XML output.\nThe reason why this option is important as fireFileStarted and such control the XML layout and before recent changes, specifically printed out the file start/end tags for the output.\nThe layout of the XML file should not have changed between PR and master for your changes to be valid.\nYou can see the code https://github.com/checkstyle/checkstyle/blob/07a730c0d1b89593e17fa8920faf9c226200e7b5/src/main/java/com/puppycrawl/tools/checkstyle/XMLLogger.java#L131\nand https://github.com/checkstyle/checkstyle/blob/07a730c0d1b89593e17fa8920faf9c226200e7b5/src/main/java/com/puppycrawl/tools/checkstyle/XMLLogger.java#L140. Ok, I was expecting either an <error> tags without a corresponding <file> tag or no errors at all, but after looking deeper I see why this doesn't happen and it runs correctly.\nAfter the check destroy executes from the violation, we run fireAuditFinished\nhttps://github.com/checkstyle/checkstyle/blob/07a730c0d1b89593e17fa8920faf9c226200e7b5/src/main/java/com/puppycrawl/tools/checkstyle/Checker.java#L219-L223\nand the XML logger clears out it's file cache if it hadn't before.\nhttps://github.com/checkstyle/checkstyle/blob/07a730c0d1b89593e17fa8920faf9c226200e7b5/src/main/java/com/puppycrawl/tools/checkstyle/XMLLogger.java#L117-L118\nSo correct output is still here only because XML logger was extra careful in clearing out it's cache.\nDefaultLogger doesn't care about files starting or finishing really.\nhttps://github.com/checkstyle/checkstyle/blob/07a730c0d1b89593e17fa8920faf9c226200e7b5/src/main/java/com/puppycrawl/tools/checkstyle/DefaultLogger.java#L241-L248\n@romani Should this behavior stay. It is weird we fire errors without a start/end file, but this check is already 'special'. We can't assume any new listener made will know this weird behavior.\nI assume removing the fileMessages.forEach(this::writeFileMessages); in XMLLogger would solve the pitest issue in this check and require the removed code to stay.\n\nor maybe it is the right way of displaying this\n\nWe shouldn't display duplicates, but this is going to be the limitation of multi-file validation. Multi-file modules require to print violations after all other modules have executed. Unless, we keep all violations in memory, we will possibly have duplicate file tags between multi-file modules and normal modules.. Input files should be named after test.\nIt should start with InputXpathQueryGenerator.. All new inputs should be named after their tests.\nThe file name should start with InputSuppressionsLoader.\nPlease do this for all new inputs.. Issue is at #5057 .. @romani Wouldn't this break the current behavior if there was more than 1 top level class in a single file?\nWe couldn't reset currentClass back to null without knowing the AST of the top level when we called leaveToken.. reading file :\" => reading file: \" (space after : not before). indent this by 4.. We can't name these methods something better than 1,2,3,4 ?. @MEZk any reason why we need file name versus file or file text?\nEvent AstTreeStringPrinter and DetailNodeTreeStringPrinter take File as an argument.. why don't we exit with failure if this is not set?\n````\nM:\\checkstyleWorkspace\\checkstyle>SET IDEA_HOME=\nM:\\checkstyleWorkspace\\checkstyle>idea_inspection.bat\nIDEA_HOME variable not found.\nINFO: Could not find files for the given pattern(s).\nIntelliJ IDEA was not found in path.\n```. Why can't we useIDEA_HOMEdirectly?. If there is a newline, doesn't it require a check forLEADING_ASTERISK?\nSome of the others follow the same.. @Nimfadora You are removing this because we add on a visit and remove on a leave, right?\nWe talked about special circumstance with haltOnException off and an exception happening between the 2.\nPlease confirm this behavior and that clear is needed..initialisation=>initialization. Javadoc still saysstatic or instancebut code is only dealing with instances..getCurrentVariables()=>currentVariables`. We don't need a new dependency just for a test.\nPlease remove this.. Implement your own private interface into this input.\nExample: https://github.com/checkstyle/checkstyle/blob/4d1d39f6db117665ec5210e9f885bd2c197f4313/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/java8/InputAnnotations3.java#L15. @timurt Are we going to do this?. This is not a valid reason why google doesn't want these enabled. This is like saying we disable these tokens because we have them disabled.\nPlease update to similar reason we have in our own config: google uses GenericWhitespace for this behavior. Please try to avoid importing checkstyle production code into it's unit tests. This creates an unnecessary coupling between the 2 and forces the input to change if the main code changes.\nUse something similar to the junit static import.. Simple boolean variables should come before complex conditions like (option == ImportOrderOption.TOP || option == ImportOrderOption.BOTTOM).. Just a question, why did you separate this into 2 methods instead of combining them into 1?\nThey are both named similarly and both take similar parameters. Some conditions between the 2 are the same too.. We can't use Character.isJavaIdentifierStart and Character.isJavaIdentifierPart like we do in the Java grammar? And would that be better?\nhttps://github.com/checkstyle/checkstyle/blob/25a37e5049b7816b34c552899841a978efc37a63/src/main/resources/com/puppycrawl/tools/checkstyle/grammars/java.g#L1878-L1935. Please keep line numbers ordered.. Please keep line numbers ordered.. variable name seems weird as it gets it's values from nothing related to static import groups.\nIs there a better name or just inline it in inSameGroup?. @romani was there any benefit on why we did this in the Java grammar?. @romani Are you ok with adding all these properties to existing configs? There are quite a few that were changed.\nIt seems like we are losing tests for separated set to false.. As you add this to google config, please also add it to google's tests under /src/it.\nYou can just copy/paste the same tests in /src/test. 8.2 has already come and gone. Update to expected release.. what is command? The only thing allowed between imports is more imports and comments. I'm not sure if annotations can be added.. @djydewang Did you see my top level comment in the previous review? https://github.com/checkstyle/checkstyle/pull/5091#pullrequestreview-62893844\n\nIn InputImportOrderStaticGroupSeperated please add another group of imports with a comment between 2 imports with no blank lines between them.\n. > \u0438 \n\nShould this be and?. > why his types \nshould his be this?. change to just */.. @romani Does this warrant a new issue to add it?. Sorry I missed this ping before.\nhttps://github.com/timurt/checkstyle/blob/4421/src/test/java/com/puppycrawl/tools/checkstyle/internal/AllChecksTest.java#L422-L424\nJust add the module to this list with it's own comment above.\nMake sure there is an issue attached to this.. @romani Are you ok to adding this test to pitest-checkstyle-tree-walker?. https://github.com/checkstyle/checkstyle/pull/4992#discussion_r137084218\nThis change must be made.. What is this change for?. I see it now. Thanks.. Why do we need the text (JavadocLexer token)? None of the others above it have it.. If this variable is named correctly, what if the last import is static and it still has a non-static before it?\nExample:\n```\nimport a.*;\nimport static b.f1;\nimport static c.f2;\nimport d.*;\nimport static e.f3;\n``\nWill your new code still produce a violation onimport d.*?. You addedOverride` annotation, but what about others? Should we add them?\nhttps://docs.oracle.com/javase/8/docs/api/java/lang/package-summary.html\n\nDeprecated, SafeVarargs, SuppressWarnings. I assume since this is in the configuration, we now have XPath filter support?\nIf so, can you make atleast 1 modification to the suppression file to show it works?. I assume this may require changing the DTD.\n@romani I assume this is ok? Or do we want to hold off on this until a new issue?. Just to confirm, so we are doing this in the same issue not a different one?. This option in Eclipse is \"Ignore Exception and Throwable\".. This option in Eclipse is \"Ignore exceptions documented with '@throws' or '@exception' tags\".. This option in Eclipse is \"Ignore in overriding and implementing methods\".. > We will activate it when the model is ready and available to be configured and used in our code.\n\nMy point is that we can't close the current issue then until we put the filter in our config as the comment says until this issue.\nIf this PR is merged, are we going to start working on this next? If so, then that is fine with me.\nIf we have to do other things before we can put this in our  config, then I think it should be a separate issue so we can close the current one after this PR.\nWe don't usually like to leave issues with partial work done open for long.. @romani Please examine this line and help me understand why I had to change it so much.\nOriginal Code:\ngetPath(\"\"), Collections.singletonList(line + firstErrorMessage), // line = \"0: \";\nExpected replacement code:\n\"\", Collections.singletonList(line + firstErrorMessage),\nActual replacement code:\n\":0\", Collections.singletonList(\" \" + firstErrorMessage),\nI was required to make file name be \":0\" and add a space before firstErrorMessage otherwise the test would fail.\nI haven't looked into this deeply, but it seems a weird change but I assume it is required because I added checker.setBasedir(getPath(\"\"));.\nBut why \":0\"?. I think I understand once I printed out the display.\n:0: Properties file 'InputTranslationCheckFireErrors_ja.properties' is missing.\nInputTranslationCheckFireErrors_de.properties:0: Key 'anotherKey' missing.\nAudit done.\nhttps://github.com/checkstyle/checkstyle/blob/3c1ddf428d9ddecaff63986007b4f5ff0593c098/src/test/java/com/puppycrawl/tools/checkstyle/AbstractModuleTestSupport.java#L352-L354\nIt doesn't realize that :0 is the line number and incorrectly assumes it is part of the file name because we have to support windows and it's drive letters like C:\\.\nSo that explains it.. > attribute value for 'message' should match: /#document/checkstyle/file/error/ expected: but was:<Properties[-Datei 'InputTranslationCheckFireErrors_ja.properties' fehlt].\nI forgot about this. XmlLogger doesn't have this issue since it controls what messages it prints.\n@romani Is it ok if I just use Locale.ROOT or should I make a replace routine like the original test had?. @romani You are mistaken the content is not escaped.\nThe text on the left is just that, pure text, which just happens to look like already escaped HTML.\nIf I wrote Java code like: System.out.println(\"5 &lt; 7\") (as an example) we should still print it to the reports as 5 &lt; 7 but we need to escape it as 5 &amp;lt; 7 since this is written to XML and to prevent it from thinking this text is anything else.\nIf we skip over escaping it, the reports will print 5 < 7 as the text which is not what the original message was.\nWe deal only with pure text as our violations. Everything in it should be escaped no matter what.\nSkipping over not sanitizing stuff is what got us in trouble in the first place.. please undo line split.. Why did invalid javadocs number only increase by 4 when you added 10 invalid nope javadoc comments?. @romani I made it plural as files and checks is plural and they both do the same thing, a regular expression match. I assume they were made plural because you can do multiple files/matches in a single expression.\nEven lines and columns is plural. Only id is currently single but I don't know why.\nDo you still want messages singular?. Done.. @AADudkin Please see this issue, https://github.com/checkstyle/checkstyle/issues/4970 , if you continue to use powermock in this test.\nThe test must explain why it uses powermock as it is a hack.. As discussed at https://github.com/checkstyle/checkstyle/pull/5245#issuecomment-343007369 , this property should be in PackageObjectFactory and not in Checker.. move comment to getRequiredTokens.\nI see no other issues.. ident this line left 4 spaces. It should align with the final.. sort => Sort\nCasing should be camel case.. same for test name.. same for test name.. does it make more sense to change this from do {} while() to while () {}?\nif seems weird to see if (sibling != null) { followed by } while (sibling != null);.. @MEZk creating custom root configurations is now forbidden. These methods make test confusing as we aren't expecting these methods to be overridden. I'll probably make them final in another PR.\nPlease see https://github.com/checkstyle/checkstyle/pull/5277 for similar tests from where this was copied.. @MEZk Similar here. Can we work around this?. I know these examples were copied/paste, but should we change these to non-java sources so it is clear this filter isn't recommended for Java code anymore?. don't => doesn't\nsoring => sorting. => Attention: It is applied to all static imports as one group.. don't => doesn't\nThis was not done from a previous item.. > If true \nThere is no true/false. Javadoc needs to be updated.. > checkstyle packages\nThis makes it sound like we are only searching checkstyle's packages. We are actually searching packages defined in packages field supplied through constructor, which is none by default.\nPlease update so it is clearer.. @kazachka This item wasn't done. See https://github.com/checkstyle/checkstyle/pull/5245#discussion_r153035407 . Text is still the same.. > only the nearest on top (above) multiline comment\nThis sounds funny.\nI assume you are trying to say only the one closest to the definition, right above it, with the javadoc identifier will be used.. Javadoc comment contains of: => Javadoc comments contain:\nclear and punchy, short and ended by => clear, punchy, short, and is ended by\ndot symbol => period symbol\n\nJavadoc comments contain\n\nShould this be should contain? These areas aren't really required otherwise we wouldn't need the JavadocMethod check. Tag section is completely optional if there are no parameters/returns/throws.. > The tag section starts with \nAs mentioned in previous item, tag section is technically optional.. @ps-sp @Vladlis If an option doesn't present itself, I recommend posting to ANTLR group who may know more.. > Only [the last] one\nWhat is the [] suppose to mean here? If you are trying to specify 'the last comment' along with the 'only one', why don't we put it on the end of the sentence.\nEx: Only one documentation comment per declaration statement is recognized by the Javadoc tool. If there are many comments, it will only recognize the last one.. This sentence hasn't changed since I pointed it out at https://github.com/checkstyle/checkstyle/pull/5252#discussion_r153624465 .. @romani This is issue #4979 . Please review the issue when you get a chance.. This input is the exact same as InputRedundantModifierFinalInEnumMethodsInFinalClass and it is expecting the exact same results.\nWe don't need a duplicated test with no differences. It adds no value.\nEither make the tests different or remove one of them.. @djydewang I see, I missed this one detail.\nWhy does the final class matter when it doesn't produce a different violation? Was this required for code coverage or pitest or another CI? \nOnly if it is required, is there a way you can show how the final in the class matters in the UT somehow?. > InputRedundantModifierFinalInEnumStaticMethods \nYes, what but what about InputRedundantModifierFinalInEnumMethodsInFinalClass.java? I don't see anything in regression yet that said final in class with nested enum caused a difference.\n. @djydewang Since we have InputRedundantModifierFinalInEnumStaticMethods which closely matches the issue and definitely matches regression, I think we can remove InputRedundantModifierFinalInEnumMethodsInFinalClass.\nUnless it is for some failing CI or regression I don't see any added value in it.. Fixed. thanks @pbludov  .. @pietern all the other checks are verifying that we are validating the annotation, || parentNode.getType() == TokenTypes.MODIFIERS by itself is just saying we should work if it is the modifiers, regardless of annotations or not.\nThe whole method is annotation related, shouldn't this check be verifying a annotation somehow? Isn't this validating more than it should?. removed because we are replacing an empty array with an empty array. No way to confirm the change.. Regression will confirm as I don't see how to create a violation on >= and a count of 0 will never happen.. Regression: http://rveach.no-ip.org/checkstyle/regression/reports/138/\nIt found EXACTLY 1 case, so I am updating the check and the UTs for this.. sorry, I pinged the wrong person. Don't know how auto-complete picked you. Sorry.\n@djydewang I was directing this at you.. > Protected, public methods are supposed to be overridden.\n\nI still do not see any final modifier to think of the method as forbidden to be overridden.\n\nYes, this was never done. I will make a new PR with this change so this is clear from now on.\n\nTest should be as clean and easy to read as possible.\n\nSeeing a common method like createRootConfig and finding out it does alot of extra stuff does not make the test easier imo. We should create a tool that all tests will use and not re-inventing things.\n\nwhat is the reason to copy paste the code which creates the root config with multiple children in the loop in each test?\n\nRegression tool will only look at the methods marked with @Test to prevent false positives, so the heart of what we pick up must be in the main test.\nForcing us to use the methods we have defined already also prevents us from copying/pasting it's code. We removed a few instances where old tests did just that.\nIf you have need for multiple tests to use alot of common children configurations, you can move all out into a custom verify method. See https://github.com/checkstyle/checkstyle/blob/8441fcac4471d499fff0b5bf9141175b78fdb4d7/src/test/java/com/puppycrawl/tools/checkstyle/filters/SuppressionCommentFilterTest.java#L268 which is similar to the area you copied your tests from.\nYou just can't move the test subject of the class outside the method as this will hide it's property values from the regression tool.. By name alone, EMPTY_LINE_ALLOWED and EMPTY_LINE, mean the same thing.\nI think this should be renamed to NONE to clearly state no validation will happen as the doc suggests.\n\nan empty string is allowed\n\nI don't understand what an empty string means. We actually require an empty string (\"\")?. I don't see this option being used anywhere in tests. Please add some to show how it works compared to the others.. our other checks use underscores or camel case. I think we should stick to one or the other.. > I think default option should be to enforce top empty line\n@romani By default, I am fine with the check doing no validation. If we specify values for top/bottom, then we always have to clear those values out whenever we want to add a new instance. If we keep them by default to NONE, then you don't need to always define a value over it if you want to keep it as NONE.\n\nwe need to make Check doing smth in code in other case user will be in illusion that activated check just did not found any violation\n\nI believe we have some checks that actually do nothing unless configured otherwise.. >  top and bottom empty lines for Class/Interface\nI am fine with this even though this is not usually my preference.\n\n\"no-empty-line\" for IF, While, .....\n\nThis is ok.\n\n\"EMPTY_LINE_ALLOWED\" - for the rest - method,ladba,.....\n\nI disagree with this. We should enforce some type of style for ALL tokens. There are too many cases where people do one way or the other, either on purpose or accident. When you see them next to each other, it looks odd. I believe I have seen this for lambdas.\nMy suggestion is \"no-empty-line\" for the 'rest' to keep code condensed.\nIMO, If code looks too packed together, it is because user isn't putting any blank line space between instructions and are crowding them together.. > EmptyLineWrappingInBlock \n\nWrappingInBlock \n\nLineBreakForBlock? I don't have a better name right now.\nI don't like 'wrapping' as it is subjective what type of wrapping you are talking about, like instruction wrapping or the definition line's wrapping.\n\ntopSeparator \ntopWrapping\ntopOption\n\nleftBrace and rightBrace or openingBrace and closingBrace.\nWe have used left/right in other places, so it would be consistent. http://checkstyle.sourceforge.net/property_types.html#lcurly. > \"because it is API\" ?\nYes.\n\nshould we make AbstractAutomaicBean ? and deprecate AutomaticBean ?\n\nI am fine with this change.\nSince we are changing name, do we still want to keep AutomaticBean?. This case proves why lineNo == endLineNo can't be removed.. Comment explains why we must use reflection.. It makes sense but I don't really think it needs to be split into 2 right now. The check is pretty simple and this will also make configurations more complex splitting by left and right curlies.. > Explain what is the difference between the method which creates custom checker configuration with multiple children and custom verify method which will contain the logic which creates the checker with multiple children? \nAssignment to Configuration or DefaultConfiguration is locked to specific methods as we need to know which module we are instantiating and how. Adding a custom create method will hide what check and properties are being created in a separate method as we aren't traversing methods and following variable/parameter assignments.\nverify method isn't as strictly checked, but we verify it exists so we know we are dealing with regression area.\n\nI still need the checker instance which configuration consists of more than one child.\n\nYou don't need the instance for this.\nCall createRootConfig with the parameter of the first child (or null if no child is needed), then call addChild for each extra child you wish to add.\nExample: https://github.com/checkstyle/checkstyle/blob/ccd0421da49f4884afd576d31365ddc649218e9c/src/test/java/com/puppycrawl/tools/checkstyle/filters/SuppressWarningsFilterTest.java#L165-L169\nWe don't restrict working with Checker directly now, but it shouldn't be often you work with Checker directly unless it is for a Checker specific test.\n\ncreateModuleConfig(Checker.class);\n\nYou should use createRootConfig instead of Checker.class as we have special code to recognize the Checker module if you pass the verify method the Configuration.\n\nDid you mean that the verifySuppressed method should become:\n\nIt should become what you need, that is one example. SuppressWarningsFilterTest was able to use the same modules for each test as it was able to keep all messages in ALL_MESSAGES and then remove ones that were being suppressed in the verifySuppressed method.. This was fixed.. @romani #5338 will not do anything with the suppression. The suppression is because AbstractLoader extends a concrete class. \n5338 is just renaming and moving the class. It has nothing to do with it's inheritance and so suppression is still needed once #5338 is done.\nThe only way to remove this suppression is to rework the inheritance and implement our own EntityResolver but you didn't want that. See https://github.com/checkstyle/checkstyle/pull/5322#issuecomment-349348936 and https://github.com/checkstyle/checkstyle/pull/5322#pullrequestreview-82182260. Nevermind my deleted post, i forgot one class must be abstract.\nWe can make it non-abstract, I don't see a problem with that.. Updated issue and updated PR.. Fix was added to option bottom. Does top have a similar issue as their code looks similar?. This is a new filter so all versions should say 8.6 .. Please import or use the Check's message and not re-create a new one.\nThis way we have a connection between the check and it's message.. This should be configured the same as SuppressionCommentFilter.. Previous comment at https://github.com/checkstyle/checkstyle/pull/5213#discussion_r152163093 .\nThere are still a few Java examples.. Yes, but only one example is not Java. I count 5 that are Java. I thought we would lean more to non-Java examples since this is made more for non-Java files and SuppressionCommentFilter should be for Java.. coverage only looks decreased but this is because I removed excess tests.\nWithout extra tests I added, coverage would have been alot less as described above.\nSo from one view, coverage has increased.\n\nPlease see post processing commands.\n\nI will wait until line coverage is enforced as I will need to account for that too in post processing.. https://djydewang.github.io/diffReport_Issue5154/checkstyle/xref/home/bbg/project/contribution/checkstyle-tester/repositories/checkstyle/src/test/resources/com/puppycrawl/tools/checkstyle/checks/annotation/annotationlocation/InputAnnotationLocationIncorrect.java.html#L7\nTest case we mentioned before had annotation on top class. Can you replicate it in this input file. You may leave the annotation on the nested class as an additional case.. Ok to ignore.. Can you explain why this change is needed for pitest?\nreport didn't mention anything about this, only the if condition. \nIf it is not needed, please restore the original.. If we allow this, then imports with un-even lengths will be an issue, right?\nOne example is java.util.Map and java.util.Map.Entry.\nThe 2 are equal in every position, except one has .Entry on the end, which makes it have 1 greater length then the other.\nThe method will see the 2 imports as completely equal which is incorrect.\nCan we add something after the for loop like:\nif (result == 0 && import1Tokens.length != import2Tokens.length) {\n    result = Integer.compare(import1Tokens.length, import2Tokens.length);\n}. Example case:\n````\n$ cat TestClass.java\nimport java.util.Map.Entry;\nimport java.util.Map;\nimport com.B;\nimport com.A;\npublic class TestClass {\n    void method() {\n    }\n}\n$ cat TestConfig.xml\n<?xml version=\"1.0\"?>\n<!DOCTYPE module PUBLIC\n          \"-//Puppy Crawl//DTD Check Configuration 1.3//EN\"\n          \"http://www.puppycrawl.com/dtds/configuration_1_3.dtd\">\n\n\n<module name=\"TreeWalker\">\n\n\n\n\n\n\n\n\n$ java -jar checkstyle-8.5-all.jar -c TestConfig.xml TestClass.java\nStarting audit...\n[ERROR] TestClass.java:5: Wrong lexicographical order for 'com.A' import. Should be before 'com.B'. [CustomImportOrder]\nAudit done.\nCheckstyle ends with 1 errors.\n````\nNo violation on java.util.Map.Entry.. > the if condition can't be omitted\n\nwhen we negate ... method works right with SPECIAL_IMPORTS_RULE_GROUP para\uff4deter\n\nThere is no other way around this, like with a custom specialImportsRegExp?\nSTANDARD_JAVA_PACKAGE_RULE_GROUP doesn't have this issue and it has very similar code.. @romani What is your opinion?. usually accessing a field directly is frowned upon.\nWe have the visit method call right below the hasVoidReturn, so we should pass the value to that method instead.. same here.. @Vladlis This makes sense.\nSince you are expanding the case of the issue, please update original issue with this too.\nRelease notes only go by issue title, so if we don't update it users won't know about us including default too.. nonexisting should be a real word. I am fine with nonexistent but you didn't change the method name which has the same word in it.\nPlease verify there are no other instances of this that we can change in this scope.. Why are there changes inside here unrelated to empty line before/after brace?\nWe should only be changing spacing related to curlies, not anything else.. same with these lines.. This code is for NPE noticied in regression. I will need to see if catch frames should be added to this as well.. this looks like an unnecessary change. please undo.. remove excess space.\nKeep an eye for changes coming in https://github.com/checkstyle/checkstyle/pull/5312 .. same.. add empty line after.. add empty line after.. add empty line after.. remove empty line.. @romani This is not Nearby because it defines start and end areas where checkstyle violations are suppressed.\nNearby looks for a comment +/- X lines from violation to know to suppress it.\nI don't feel this should be named Nearby as it will confuse people with the real nearby.\nMy opinion is we should fix all filter names to be a bit clearer now that we have Java and non-Java ones.. Why do these need to be switched? We just converted these to this type of doc.\nSee https://github.com/checkstyle/checkstyle/commit/70786709d4f735b9123159a86a752789855af34a#diff-d9a48e7d8e8fa192ed23a1af1597506dR483. We should not name this Main as it will confuse people with our JAR entry Main.. Why internal and not doclets?. Why the &nbsp;? It is between 2 printable characters so it shouldn't be needed. You usually only need it for multiple spaces in a row.\nShouldn't the brackets be ok since they inside the {@code tag?. Why can't this remain as *?. Why is this needed now? We didn't make any changes to this class, except documentation.. If we are going through the hassle of using our Grammar, why do we need a RegExp parser for the javadocs and can't just use our Javadoc grammar?\nRegular expressions are known to be bad for javadocs which is why we use the grammar.. Shouldn't the exception be passed all the way up?\nWe need a build failure to happen if an exception occurs. No one will be looking at the console for a stack trace unless there is a build failure.. same here.. I see now, thanks.\nThis can be ignored.. @pbludov See SummaryJavadocCheck. It does the same thing and uses our Javadoc parser.\n\nThe javadoc parser is designed for other purpose\n\nThe parser is designed for all our Javadoc needs. There is no other purpose for it then that.. ok. This is a weird violation where other classes cause a violation in the main class.\n. > The code you are complain about was taken exactly from this class.\nIt extends AbstractJavadocCheck which means it does use the Javadoc parser not regular expressions.. Why not use DetailNodeTreeStringPrinter.parseJavadocAsDetailNode instead of basically duplicating the code?. Would it make more sense to just make AstTreeStringPrinter.parseFile public instead of duplicating it?. Inputs should not rely on our own code. See #4845. same.. > both \"<\" and \"<\" are present.\nI see the issue now, thanks. This can be ignored.. Why do inputs need to change?  Nothing hurts from leaving them in since check won't process them.\nPlrease revert this change. This will fix the changes to line numbers too in the test.. Same.. I think we should remove this method.\nIf we leave these in, what is the point of making parseFile(File file, Options withComments) public? We have a method for both options.. I think we should remove this method.. I'm not sure why we have to create the FileContents when the parse really cares about the stuff in the FileText.\nI think we should change parse to take FileText instead. We seem to always have FileText in these calls.. I know this isn't your doing, but shouldn't this parameter be named options and only talk about JavaParser.Options and not it's direct fields. If they need to know what options are available they can just look inside the enum's javadoc.\n  . same.. same.. I question the removal of this try/catch. What if exception is somewhere else in TreeWalker besides parsing and we need to add more catch clauses here. Also now that try/catch is in Parser, everything that calls it will override original exception like Main and AstTreeStringPrinter which are only working with 1 file anyways.\nI think we should restore this try/catch here and remove it from parser.. remove this change.. This seems like another possible bug, we don't verify it is a javdoc comment just a block comment. I don't see any extra calls to JavadocUtils.isJavadocComment to confirm and we shouldn't be using branchContains anyways. See https://github.com/checkstyle/checkstyle/issues/5124 .\nBlock comment = /* text */, Javadoc comment = /** text */.\n@RoMaNiAsHkA Please confirm my findings and create a new issue on this. This code will have to be fixed.. methods should begin with the verb.\nhasJavadocCommentOnToken. Please make all lines 100 characters or less.. Why did we remove section?. Thanks I didn't see this.. log a violation upon finding a non-tight HTML tag => log violations upon finding any non-tight HTML tags\nIt will log all, not just 1.. this section looks like it is indented too much over from last </p>.. > weren't removed\n@pbludov I meant it was removed from TreeWalker which is what I am questioning.\nAs I stated, I think this should stay in TreeWalker. All other classes calling JavaParser is only dealing with a single file anyways. It doesn't really need the try/catch there.\n  . > Only two exceptions per method are allowed for the CS code.\nWhat if we turn antlr exceptions into checkstyle exceptions in parser, and change TreeWalker catch to catch checkstyle exception.\n@romani What do you think of this change or are you fine with the way it is coded now?\n  . When I was talking about this at https://github.com/checkstyle/checkstyle/pull/5437#discussion_r160051077 I didn't mean to throw the same exception as TreeWalker. Please wait for @romani to respond to discussion.\nI don't think there is a check that will be against throw new CheckstyleException(ex);. It is only because we can't throw the many exceptions from antlr that I think we should only have this wrap here.\n  . I think this should be a new issue so the fixes are kept separated. It will make regression easier too. You are free to work on it after this PR.. We could wrap this around ParseException.. Based on discussion at https://github.com/checkstyle/checkstyle/pull/5101#issuecomment-355977976 :\nSince antlr does not provide us a way to override token numbering, I think we should look into a more long term solution instead of string of if-else changes.\nWe will continue to add and re-arrange tokens, so eventually this conversion list will grow.\nI think we should have either a map or array of Checkstyle tokens mapped to Antlr tokens, and use this map to replace one for the other.\nCheckstyle tokens will never change values, while Antlr tokens will keep the same name while the numbering changes.\nI think we should move our discussion to antlr to a issue on their tracker since they haven't answered our google doc question.\nDoes this sound like a solution?. > <tr> Zero </p> nesting despitetris closed </tr>\n</p> breaks apart HTML_ELEMENT into a separate open and tag close.\nThis is similar to another issue, but I don't remember the number.. Found the issue. https://github.com/checkstyle/checkstyle/issues/3570. ok, we can wait then. I thought this would happen more often.. It was my original intention that we use java.text.ParseException and not create a new one.. clear can't be removed here.\ncurrent may be completely empty after a file's good run, but if an exception happens and haltOnException is off, it will keep contents from previous file's run.\nSee https://github.com/checkstyle/checkstyle/issues/2939#issuecomment-304343092 as an example.. This is an unnecessary indentation change. Please restore it.. @romani We moved it to another issue to keep this PR simple.. I feel we need a better description here instead of a != A, see issue.\nIt is not clear in the issue why this remains.. Same here.\nAlso why is this using parser and not the token types? Is this method called before getTokenType and thats why?\nWon't this get confusing as we need to swap tokens in 2 places instead of 1?\nIs there anyway we can make it swap only in one place and assume the token types are correct everywhere else?. Last question then,\n\ntoken is the token object form ANTLR\nlike since JavadocTokenTypes.HTML_TAG_NAME == JavadocParser.HTML_TAG_NAME we were previously able to use JavadocTokenTypes.HTML_TAG_NAME, but now since those two values have changed, we are forced to use value directly from the JavadocParser.\n\nWhat if we move this to a single method for both places so this is clearer when we are dealing with antlr tokens and when we are dealing with token types?\nExample:\n`````\ngetAntlrTokenType(int antlrTokenType) {\nfinal int tokenType;\n            if (antlrTokenType == JavadocTokenTypes.HTML_TAG_NAME) {\n                tokenType = JavadocTokenTypes.EMBED_HTML_TAG_NAME;\n            }\n            else if (antlrTokenType == JavadocTokenTypes.EMBED_HTML_TAG_NAME) {\n                tokenType = JavadocTokenTypes.HTML_TAG_NAME;\n            }\n            else {\n                tokenType = antlrTokenType;\n            }\nreturn tokenType;\n}\n`````\nThis would prevent us from duplicating the same conversion in 2 places, and if we decide to move forward with a map conversion, it will be a simplier replacement.\nNote: instead of int antlrTokenType, it also could be Token token because ((TerminalNode) node).getSymbol() returns Token and token in the other section is already of type Token.. Shouldn't tokens be capital T?\nAlmost all of these follow this pattern.. > getAntlrTokenType\nName is just an example but maybe getTokenType or getJavadocTokenType would make more sense.\n\nDo you intend to call \"getAntlrTokenType\" in place of token.getType() at JavadocDetailNodeParser.java#L505 so that we can use JavadocTokenTypes.HTML_TAG_NAME instead of JavadocParser.HTML_TAG_NAME \n\nYes, 505 and 424 would be replaced with these calls.\n\nMay be I am wrong but I can't see any need for such a method.\n\nTo simplify the process of converting antlr token to token type and to maintain a consistency  we only use token types in all our code. To me it is not clear, when we are dealing with one versus the other. I thought it would make more sense we stick to using token types, since this what will be found in all our checks that use the Javadoc parser. We then isolate all JavadocParser uses to a single method.\nSo 424 would become: tokenType = getAntlrTokenType(((TerminalNode) node).getSymbol());\nand 505 would be final int type = getAntlrTokenType(tokenList.get(i)); and every if statement following it would continue to use JavadocTokenTypes.\nIf we keep things as they are and don't make this method, shouldn't START at 506 be JavadocParser and not JavadocTokenTypes?\n@romani Please share your thoughts.. Don't forget stream classes are forbidden because of issues with code coverage.\nhttps://github.com/checkstyle/checkstyle/blob/master/config/import-control.xml#L19-L29. swap with TestUtil.getClassDeclaredField.. why can't we do new String[]{\"Aa\", \"Bb\" etc... instead of creating the string and then splitting it?. Please look at getClassDeclaredField method. It is already specifying setAccessible so this line isn't needed.\nRemove it.. @varunu28 I believe he just wants the excess indentation inside the source tag removed.\nSo this:\n<source>\n&lt;module name=&quot;RegexpSinglelineJava&quot;&gt;\n  &lt;property name=&quot;format&quot; value=&quot;debug&quot;/&gt;\n  &lt;property name=&quot;ignoreCase&quot; value=&quot;true&quot;/&gt;\n&lt;/module&gt;\n        </source>\nThis is because users see whats in the source tag, including the excess indentation, but they don't see the outer tags.. @varunu28 This is still not done.. > else if (filesToProcess.size() > 1) {\nresult.add(\"Printing AST is allowed for only one file.\");\nThis error doesn't make sense to me with option S as we are not printing an AST tree.. The other similar options say \"Print ....\".\nThis description should follow suite.\n\"Print xpath suppressions at the file's line and column position\". Just like the f option, we should print the default.. Why are we extracting the numbers manually? We did a regular expression match. Why don't we use that to our advantage to get the numbers for us.. Do we really need a 1 line method wrap?\nWhy don't we inline this method?. @romani It is not clear from this output what the argument is suppose to be.\nShouldn't we extend the description to specify the format(s) we are expecting?. First sentence suggestion is at https://github.com/checkstyle/checkstyle/pull/5464#discussion_r165853342 .\nThis line was more about adding a description to describe what arg is.\nThere are no examples to go by as other arguments are self-explanator.\nMy idea right now is: arg is the line and column number (separated by a : ) in the file that the suppression should be generated for.\nPlease provide any better suggestions.\n. Line must remain under 100 characters.\nWe don't have this rule integrated by CI yet.\nPlease ensure all lines you change remain under 100.. Jinx. :). Default open should be an argument with value being passed in from DEFAULT_TAB_WIDTH .\nNo one will remember to update documentation if default is changed.\nThis is how option f is done.. Missing 2nd sentence described at https://github.com/checkstyle/checkstyle/pull/5464#discussion_r166167549. Keep all new xdoc lines under 100 characters.. -s is missing the argument after it, and you must describe the format of the argument in detail.. Missing argument after it.. Aren't we swapping cobertura entirely for jacoco? I don't see why we would keep the cobertura since it is abandoned.\nWhy does this need a profile? cobertura didn't have a profile.. > We need to keep the cobratura for a while.\nWhy?. @romani Then please review the PR and specify what you want done in it.. Only 2 spaces indent.. same.. same and so on.. @varunu28 My comment is on the comment inside the catch block. It is indented 4 spaces over from the catch, which is where the throw was originally.\nSo move //This is expected left 2 spaces.. @timurt Yes.. Why do we need this quote?\nI see it is in the original cobertura, but why do we need it in either places?. Is this class truly not 100%, along with the others below?\nEverything but the ANTLR should be 100%. Why isn't cobertura reporting these missing coverages?. > why it's impossible to get 100% coverage for the ANTRL generated classes\nI don't see how this comment does that. It just says how the class is generated.. Thanks, I thought I saw the reason somewhere but I couldn't remember.\n\nthe Jacoco heuristics does not detect methods that never return\n\nHas Jacoco stated if they will ever change this?\nEdit: nevermind they probably don't intend to.\nhttps://github.com/jacoco/jacoco/issues/370. shouldn't this be indented +2?. &lt;property is indented to position 2, so value=&quot; should be indented to position 4.. @romani Shouldn't we have a issue for this similar to https://github.com/checkstyle/checkstyle/issues/4605 ?\nWe shouldn't be pulling in random tests and create new tests specifically for api under it's package.. Please move this to javadoc like we define in https://github.com/checkstyle/checkstyle/issues/4970 and add a breif description of what the issue is in jacoco in the first sentence.. > This test verifies nothing.\n\nverifyStatic(System.class, times(1));\n\nThis statement looks false.. Please undo unnecessary indentation change.. Since you are rewriting this with new mocking, please add a javadoc explaining why we need mocking. See https://github.com/checkstyle/checkstyle/issues/4970 .. @romani Why do we have line numbers on these examples?\nShould they be removed in another issue?. @varunu28 This may be true, but I don't remember any of our other examples having line numbers.\nAlso none of the descriptions reference the line numbers, so it is kinda pointless.. @varunu28 @romani I just noticed this file is for indentation so it has to be examined harder.\nThis line is incorrect. It should be in the same position as CheckUtils.\n@romani Please examine these cases a bit harder.\nI will re-review.. This should be at the same position as case on next line.. This should be indented between try and int a position.. int k should be indented +2, but the original comment was at the same indentation as the case.\nIf you compare the original indentation for case 1 and 2, it is showing that the comment is acceptable at either the same level as the case, or at the same level as the int k. Your code as it is now is just showing the same example twice.\nThis specific line should be:\ncase \"2\":\n  int k = 7;\n// it is OK. @pbludov My original comment wasn't for removing the verify in the method.\nI also mentioned that the reason for the mocking should be the first sentence.\nWhy can't we verify some type of result?\nCan we atleast verify System.exit was called?. These 3 lines should be indented. It was only the comment that was suppose to move.. > This should be indented between try and int a\nThis is not done.\nComment should be like:\n+10    try {\n+11      int a;\n+12     // Why do we catch exception here? - violation (should have the same indentation as line 11)\nLike in original code.. I don't understand why System.exit is inside the test.. @pbludov I am even more confused.\nThe point of the System.exit verify was to verify the call to that method in production code.\nIf we are verifying the call in test code, then it is completely pointless and should probably just be removed. The point of tests is to verify production code, not test code.\nThere is no way to verify System.exit is called in production?. We do use line positions inside the code for some comments, but I didn't see any that couldn't just be swapped with above or below wording.. So why is this needed in test code then?. Please add comma after day.. Is this like a configuration file for powermock?\nIf so can we place it under config directory and not in source.. It seems this sentence is not a complete thought. You also shouldn't start the next sentence with But.\nWhy don't we combine the 2, and explain what we are not putting in checkstyle_packages.xml.\nHow about something like this for the 3 sentences:\nThis test needs mocking, as XXX would have to be placed in {@literal checkstyle_packages.xml}, but this will affect every test, which is undesired.\nReplace XXX with whatever we are mocking into the file.. @pbludov This has still not been resolved.. These lines were changed just to ignore configuration.properties.\nI would rather see us continue to validate all folders and in this case ignore this specific file.\nPlease add location and reason to \nhttps://github.com/Softus/checkstyle/blob/e9f358c9d72e9898753dbca0c1cf6b865ce26158/src/test/java/com/puppycrawl/tools/checkstyle/internal/AllTestsTest.java#L251-L258\nand revert these lines to what they were before.. They specifically use the classloader, so it must be on the classpath.\nSee https://github.com/powermock/powermock/blob/4f34a0899446e0a7f5fa5f6f336aa4ab388461ea/powermock-core/src/main/java/org/powermock/configuration/support/PropertiesLoader.java#L36\nand https://github.com/powermock/powermock/blob/4f34a0899446e0a7f5fa5f6f336aa4ab388461ea/powermock-core/src/main/java/org/powermock/configuration/support/PropertiesFinder.java#L20. Do we really need the : on the end of the text?\nMost assertion text don't end this way.. This is named testAttribute and tests getAttribute.\ntestGetAttributeNames tests getAttributeNames.\ntestGetName tests getName.\nWhy does this one break consistency of method names?\nEither this should be testGetAttribute or others should be named testName, etc.... same.. Can we replace these 2 lines with createTreeWalkerConfig?. This line isn't necessary, createRootConfig already adds the child you give.\nSee https://github.com/checkstyle/checkstyle/blob/master/src/test/java/com/puppycrawl/tools/checkstyle/AbstractModuleTestSupport.java#L176 .. Why aren't we calling createChecker?. @romani Did you read https://github.com/checkstyle/checkstyle/pull/5455#discussion_r161795115  about this area? He explained why it had to be like this.. pull request => Pull Request\nadd comma after description.\nadd explanation => add any explanations. add comma before etc.. blank => space?. remove some.. add comma after Therefore.\nafter issues on the end, I think we should add with your changes.. > please fix them\nThis should be expanded on by saying to amend the previous commit. Lots of people give us fixes just by adding a second commit.. add the after read.. pull request => Pull Request. Has the issue been reported to Jacoco? Do we have an issue number?. why the change?. https://github.com/checkstyle/checkstyle/pull/5602#discussion_r174334339\nexplanation => explanations. Thanks.. Violations shouldn't really be changing.\nAlso since you remove all checks of sun for IllegalImportCheck, I think pitest will complain about no coverage for https://github.com/checkstyle/checkstyle/blob/90f20e09869c71eb22190ad9c1d46d5deec324a5/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/IllegalImportCheck.java#L98 .\nMost likely this will have to be reverted to go to the non-compilable folder.\nSorry for the back and forth.. Since this is the import order check, can we find a replacement import to go in it's place?. Pitest did fail.\nhttps://app.shippable.com/github/checkstyle/checkstyle/runs/6448/4/console. @romani ping. @pbludov This removed line doesn't have anything to do with #4845 .\ncom.sun. is not checkstyle production code or other checkstyle inputs. That issue was about directly connecting inputs of 2 different checks together.\nIf we did create a com.sun package, each one would be named different for each input that needs it.. this is the line pitest is complaining about. we should break out of the for loop as soon as we hit a result we are looking for.\nthere is nothing in this loop that will turn it back to false.. shouldn't this be an else if?. Why are we parsing the Java source? It seems like you are attempting a crude attempt at understanding the source code when we have the ANTLR to do this for us.\nWhy can't we use the AST to understand the source?. > empty lines were detected by checking the lines with CommonUtils.isBlank, not by analysing the AST\nAny empty line is an empty line. The util method is fine for this case. Emptyness could also be determined by looking for holes in the AST where nothing is on a specific line.\n\nAST didn't have understanding of whitespace, JavaDoc, comments, and empty lines\n\nThis check is comment aware, so it knows about comments and javadocs. Comments aren't part of the getAcceptableTokens list, so visitToken won't stop on them by default but they are still in the tree.\nEmpty lines can be determined using CommonUtils.isBlank. The AST contains the line number.\nWhitespace would have to be determined by looking at the line's column position and checking what comes before/after it.\n\nWould you be able to point me in the right direction?\n\nI can but you would need to ask a more specific question.\nBe aware, that comments are placed in weird locations sometimes, so it might be best that you add comments to the acceptable list to stop on them and track them that way.\nExample from issue:\n````\n    // Method 2 must fail\n    public static final void method2() { }\n|--METHOD_DEF -> METHOD_DEF [8:4]\n|  |--MODIFIERS -> MODIFIERS [8:4]\n|  |  |--SINGLE_LINE_COMMENT -> // [7:4]\n|  |  |  `--COMMENT_CONTENT ->  Method 2 must fail\\n [7:6]\n|  |  |--LITERAL_PUBLIC -> public [8:4]\n|  |  |--LITERAL_STATIC -> static [8:11]\n\n````\nYou can use http://checkstyle.sourceforge.net/cmdline.html#Command_line_usage option -T to print the AST with the comments to under the tree more.. Is this executed as part of the verify phase?\nIf so, do we need to add something for the profile no-validation?. > 0)Before we merge this can you reckeck history of this line.\nThe code has been here since the beginning since the check was made.\nhttps://github.com/checkstyle/checkstyle/commit/1951594e90a04aa2f2b14021ce3318604218ba19#diff-7749ecc84be7ad0bb709565b05a8e0ccR75\nOriginal XDoc did not specify anything.\nTest setup does write classes in reverse alphabetical order, but it is not fully clear if it is done on purpose or if there was a reason.\nhttps://github.com/checkstyle/checkstyle/commit/1951594e90a04aa2f2b14021ce3318604218ba19#diff-bd322f2d6a0a3503dee0f734956cd24fR16\n\nThis line mean that enforcing sequence is the most last rule wins.\n\nIncorrect. We are still enforcing first rule wins, we are just not reversing the order of the rules anymore.\nLook at my UT as an example. If last rule wins was the case, it would have allowed the import and printed no violation as the package is allowed.\nAs the code is now before my PR, we are enforcing last case wins. This is why there is no violation in issue example.. @romani Issue title was user made and they didn't know the underlying issue.\nI have corrected the issue title. Feel free to modify it if you need more.. > You did mention unrelated stuff too much.\n@romani If you are referring to me, I only changed the title, not the description of the issue.. will we ask users for this when they modify gui?. Why do we even run pitest for gui then?. @romani \n\nwe need to document sequence of applying in xdoc\nwe need example in xdoc, as it is far from abvioous,\n\nDone.. http://checkstyle.sourceforge.net/config_blocks.html#EmptyCatchBlock could have caught this.. All that is needed to is to disable the comment check, or make it impossible to match. If this is an issue for production, then the check could be split into 2.\n````\n$ cat TestClass.java\npublic class TestClass {\n    void method() {\ntry {\n} catch (Exception e) {\n// test\n}\n    }\n}\n$ cat TestConfig.xml\n<?xml version=\"1.0\"?>\n<!DOCTYPE module PUBLIC\n          \"-//Puppy Crawl//DTD Check Configuration 1.3//EN\"\n          \"http://www.puppycrawl.com/dtds/configuration_1_3.dtd\">\n\n\n<module name=\"TreeWalker\">\n\n\n\n\n\n\n$ java -jar checkstyle-8.8-all.jar -c TestConfig.xml TestClass.java\nStarting audit...\n[ERROR] TestClass.java:4: Empty catch block. [EmptyCatchBlock]\nAudit done.\nCheckstyle ends with 1 errors.\n````\n. @romani What is your thoughts?. Sounds fine to me.. @romani \n\nReplacement to unix style mean that code that generate output does not consider OS difference,\n\nWe do this for alot of tests like this. See AbstractPathTestSupport and MainTest. I prefer we keep 1 file and not duplicate the file between each OS line separator.\nIf we inline the files to strings, this won't be an issue since we can use System's line separator.\nIf this remains as a file, we should use AbstractPathTestSupport.readFile and not duplicate the code.. treeInfo could be final if constructor was made to accept it as a parameter, then all sub-classes would just have to give it through super call.. Positions of --END -> > and --SLASH_END -> /> have to be increased.\nYou changed the exact character position of > and /> for the line by increasing/decreasing the length of someotherting.. I am generally fine with spelling fixes, but be careful changing input files.\nSome tests could require could have an invalid/weird name for a reason. This should be a very rare occurrence though.. The example was empty.\n\n<!-- almost all should be allowed -->\n\nIf we move all current allows to inside the class, we get 79 violations because not all classes are handled (BaseCellEditor, CodeSelector, etc...) and the parent doesn't have allows for them since your example removed strategyOnMismatch=\"disallowed\".\nIf we are not moving, but duplicating the allows, then .*(Panel|View|Dialog) serves no purpose as it will have the same allows.. What classes/packages do you want to disallow in those classes? awt and swing?. > *Presentation classes \nI missed that you said presentation and not panel/view/dialog. Your example at the bottom of https://github.com/checkstyle/checkstyle/issues/3492#issuecomment-376301219 had nothing with presentation.. The mis-spelling here is on purpose. Look at the regular expression at https://github.com/checkstyle/checkstyle/blob/master/src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportControlTest.java#L40 .\nIt is m+ meaning it can be comon, common, commmon, etc.... if this stays, please also put&&betweencdcommand groovycommand so it is clear where thecdcommand stops and and thegroovy` command begins. I mistakenly thought you were cding into a groovy directory.. > NcssCount \n\nThe rule has no property to configure the minimal amount of lines of the code per method.\n\nhttps://pmd.github.io/pmd-6.0.1/pmd_rules_java_design.html#ncsscount\nWhat about methodReportLevel, which has a default value of 12?. If we can verify that a test method calls a specific method, should we give these nested methods a special name to show they do assertions? Something like like {testName}Assert(...).\nI'm not sure if suppression model can do a regexp match.. I assume there is no way to match all test classes? We will never break any test apart.. @pbludov What happens if they add a new rule to those packages? We will not be aware of them.\n\nDue to bug in the PMD it can not be excluded\n\nIs there an issue number associated to this bug? If so we should place it in the file and say something like \"Manually adding these rules until ... fixes logging-jakarta-commons and logging-java. @romani I see no block indentation for rule 4.2 on google's style. http://checkstyle.sourceforge.net/google_style.html#a4.2\nCurrent 4.2 is Indentation and test link point to 4.8.4.1.\nThere is no 4.2 tests under https://github.com/checkstyle/checkstyle/tree/master/src/it/java/com/google/checkstyle/test/chapter4formatting/ .. We might not be able to fix this as I assume the rule is part of the tree.\n@romani Can you confirm this rule?. @pbludov This was more a future item, hence why I said give these secondary methods the nameAssert. If you want to undo it and make an issue, it is ok.. You are changing existing tests that were probably testing something specific.\nCan you create new constructors instead?. how come this wants 12 (+2) but other modified test case wants 14 (+4)?. Also I see no new test cases that produce a violation.. Done.. @romani Please specify what imports you want me allow/disallow forPresentationModel, Model, PM, Pm. Is it the exact same as https://github.com/checkstyle/checkstyle/pull/5641#discussion_r177435751 ?\nWhat about(Panel|View|Dialog)`?\n. > > Please specify what imports you want me allow/disallow for PresentationModel, Model, PM, Pm. Is it the exact same as #5641 (comment) ?\n\nyes, disallow \"java.swing.J*\" (all visual/rendering classes)\n\nThis is already being done in .*Model which includes .*PresentationModel.\n\n\nWhat about *(Panel|View|Dialog)?\n\nWe can allow from checkstyle only import com.puppycrawl.tools.checkstyle.api.DetailAST;\nand import com.puppycrawl.tools.checkstyle.api.DetailNode;. All other should be delegated to Presentation class.\n\nMoving allow pkg=\"com.puppycrawl.tools.checkstyle.api\" from whole package to class results in 12 violations. Other classes use these imports: CodeSelector, CodeSelectorPresentation, MainFrame, MainFrameModel, ParseTreeTableModel, ParseTreeTablePresentation\n\nSo we allow all, except for some known odd imports (from \"checks\", from \"ant\", ... )\n\nWe already have this on the package level.\nDo you want me to move this to the class? There is no point duplicating it for the class when the package already does this.. Why does allchecks have to be here? This isn't a 'word' by itself.\nI assume original place had it in camel case like AllChecks?. ok, it is because of the package name, which is not in camel case.. @pbludov @romani jacoco/jacoco#660 is now closed and has a milestone of 0.8.2 .. > no \"swing.J\" at \"Presentation\" classes\n\nStandardCharsets, JavadocDetailNodeParser, JavaParser, checkstyle.utils - should be allowed only in Models&Presentations \n\nDone.\n\nyou can create separate issue for refactoring of UI to move even this imports to model only.\n\nYou would need to create such issue as I don't know what imports or classes you are referring to.. @romani Imports in classes are disallowed, package delegates to the parent, and default strategy is to disallow any unknown imports which seems weird as there are no allows defined.\nI made the default to allow any unknown imports in gui package unless you specify otherwise.. non => none\nof rules => of the rules plus space before (.\n. @jsotuyod There is nothing wrong with PMD's version of the rule since it was the one who caught this area.\nThe issue was our own check didn't catch it, but it is because it is set to ignore the exception if it has no statements and has a comment in it.. http://pmd.sourceforge.net/pmd-4.3.0/rules/junit.html#JUnitAssertionsShouldIncludeMessage\n\nJUnit assertions should include a message - i.e., use the three argument version of assertEquals(), not the two argument version. \n\nhttp://pmd.sourceforge.net/pmd-4.3.0/xref/net/sourceforge/pmd/rules/junit/JUnitAssertionsShouldIncludeMessage.html#45\n\nnode.getArgumentCount() == args \n\n@pbludov Most likely this isn't a bug because PMD is just counting method arguments. You could file an issue with them for a feature to examine the first argument and not allow a only variable for it.\n. please restore this, \"/> being alone on the next line, separate from the other suppressions.. Sorry, I didn't realize the version number in the link.. @pbludov \n\nhttps://github.com/pmd/pmd/blob/master/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/bestpractices/JUnitAssertionsShouldIncludeMessageRule.java#L69\n\nThe code was added just 12 days ago. It might not be released yet.\nSee commit at https://github.com/pmd/pmd/commit/c1306659fbdda79215ad313363028b78d9eadcc8#diff-4bf27602ce65ea2002635e71144eabbeR68. https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/CustomImportOrderCheck.java#L495\nhttps://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/CustomImportOrderCheck.java#L615\nhttps://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/Checker.java#L276\nhttps://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/utils/CheckUtils.java#L161. Method name should start with a verb.\nheader => getHeaderLine. Class and Package both have a name field. My original intention was to make AbstractImportControl house the name field, but because of the complex computations done to create the names for normal and regexp, they must remain in their respected classes. Leaving both as name instead of package/class is a leftover result of that.\nI will fix up the naming some.. > but should we change DTD in such a way to allow extending logic without DTD changes. \nFor me, right now I would say no. Having the type in the tag name really distinguishes it from others around it and it helps shrink the size of the import control file. My project has 620 lines because I build a whitelist for all packages.\n\nIt is only for top level public classes ?\nWhat about Interfaces, Enums (all other top level types) ?\n\nyes to both. Top level only and allows all types of classes (interface, enum, etc...). You can see the tests for them.\nI will update the documentation.. Done.. Done.. ???s have not been resolved. @romani Compilation Units refers to package and imports too, not just the classes alone. See https://docs.oracle.com/javase/specs/jls/se7/html/jls-7.html#jls-7.3 .\n\nA compilation unit consists of three parts, each of which is optional:\n    A package declaration (\u00a77.4)\n    import declarations (\u00a77.5)\n    Top level type declarations (\u00a77.6)\n\nClasses, interfaces, etc... are called type declarations. see \nhttps://docs.oracle.com/javase/specs/jls/se7/html/jls-7.html#jls-7.6\nhttps://docs.oracle.com/javase/specs/jls/se7/html/jls-8.html#jls-8.1 and https://docs.oracle.com/javase/specs/jls/se7/html/jls-9.html#jls-9.1 .\n\nA top level type declaration declares a top level class type (\u00a78) or a top level interface type (\u00a79). \n\nTo be accurate with JLS, we would have to call it typeName or typeDeclarationName or some variant as we already have package defined as a node and this new node is specific to classes. We could go on with naming to include top level since that is the most accurate, so like topLevelTypeName.\nI still think class should be used as I don't see people understanding what is meant by type.\nPlease tell me which name you want me to use.. Please indent this line by +4.\n@romani I'm surprised JavadocTagContinuationIndentation didn't flag this. . @romani Are we sue we want to allow the whole java.nio instead of the java.nio.charset and java.nio.files separately?. blacklist of java.io.* must go before whitelisting whole package of java.io.. Why did we remove all the code above?. Why did this change?. Javadoc should change. FileNotFound exception is not generated anymore.. Done.. > Build log https://gist.github.com/pbludov/1a3683deb52a1ba97cb268e026f224a8\nIs this all the ones you couldn't fix?\n\n\nERROR in /home/travis/build/checkstyle/checkstyle/src/main/java/com/puppycrawl/tools/checkstyle/api/LocalizedMessage.java (at line 525)\n\n\nWhy isn't eclipse right?\nShouldn't this be the try-with-resource ?\nif (stream != null) {\n    try (Reader streamReader = new InputStreamReader(stream, StandardCharsets.UTF_8.name())) {. @romani If we do this, then the term unit name is wrong and it is file name. We specifically documented unit name is first compilation unit found. It is possible for file name and first unit name to be different. See http://checkstyle.sourceforge.net/config_misc.html#OuterTypeFilename .\nIf we are going with file name then unit should be changed to file. I did unit as this is what you suggested at https://github.com/checkstyle/checkstyle/pull/5641#discussion_r180937874 .\n\nI just have more preference to unit, as we skipp non Java compiled files(properties or ...). So 'file' term is not very good for us here.. > do we really need \"ic\"(import control) prefix ?\n\nI was just following pattern of original test as package and units are similar. See https://github.com/checkstyle/checkstyle/blob/90f20e09869c71eb22190ad9c1d46d5deec324a5/src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportControlTest.java#L30. Same discussion as https://github.com/checkstyle/checkstyle/pull/5641#discussion_r181582833 .. @pbludov Don't forget to update the comment since you converted the one that the comment says can't be.. Can't @RunWith(PowerMockRunner.class) @PrepareForTest(Closeables.class) be removed from this test too? I don't see any other mocks.. This test doesn't need a javadoc anymore since powermock is removed.. Is this the same here or do we need the class annotations because of Whitebox?. Same here.. Same here.. Do we still need Closeables in PrepareForTest?. > We have this Check because it was not and error for all java compilers.\nIt is not an error on maven as it will compile successfully files under src/test/resources when the first unit name isn't the same as the file name.\nSee \nhttps://github.com/checkstyle/checkstyle/blob/53d8e10fd3d049457f7aa3da503d48faef6264aa/src/test/resources/com/puppycrawl/tools/checkstyle/checks/indentation/indentation/InputIndentationAndroidStyle.java#L17\nas one example of 64 I have found in our repository when scanning.\n\nFile is too wide term - it ieverything\n\nSince this is a TreeWalker check, it doesn't mean everything as TreeWalker makes sure only Java files are processed by it.\nhttps://github.com/checkstyle/checkstyle/blob/53d8e10fd3d049457f7aa3da503d48faef6264aa/src/main/java/com/puppycrawl/tools/checkstyle/TreeWalker.java#L93-L94. This item is obsolete now.. Name doesn't specifically matter. I just named it so to follow some example and such that you might see in some type of demo. I renamed it to MyClass like in the other import control test.. Changed to file.. This was a mistake to leave it in as this was a copy/paste.\nlocal-only still has the same meaning here. Package must match exactly. File name matching is such that you can match a class that is in a sub-package.\nThere is nothing wrong with combining file and local-only in this way.. Done.. @jsoref Can you explain the benefit of having uppercase words in whitelist if we have to eventually replace them with lowercase when they are used in that form?\nWhy not make the whole file lowercase?. Why should this be public?\nNow anyone can instantiate this class as the class is public and the constructor is public.. > for this use case, that's probably correct.\nIs there some use case where this behavior is preferred?. Type changed because there is no ImportControl anymore. It was renamed to AbstractImportControl and pieces split apart into PkgImportControl.\nImportControlLoader returns what is on the top of it's stack, which is a list of AbstractImportControl because it needs to handle both node types. The stack can't be changed PkgImportControl.\nWe can cast the return to PkgImportControl but why don't we leave it as abstract incase we add new root nodes?. @pbludov Not all defaults are removed.. here. @pbludov Eclipse is telling me the enum constructor has to be private, but we mark this as redundant through our checks\n[ERROR] M:\\checkstyleWorkspace\\checkstyle\\src\\main\\java\\com\\puppycrawl\\tools\\checkstyle\\gui\\MainFrameModel.java:66:9: Redundant 'private' modifier. [RedundantModifier]\nI think this has to be default no matter what.\nhttps://docs.oracle.com/javase/specs/jls/se7/html/jls-8.html#jls-8.9.2\n\nIt is a compile-time error if a constructor declaration of an enum type is public or protected. \nIf an enum type has no constructor declarations, then a private constructor that takes no parameters (to match the implicit empty argument list) is automatically provided. . @romani See above.. How can resourceBundle which is returned from this method, work when the streamReader is closed once it leaves this try-with-resource?. > Two import-control nodes in one file is separate discussion/issue.\nAs term is root - it is possible to have only one root element.\n\nI was never advocating 2 root elements. root right now is PkgImportControl. I was saying in the future we could have XyzImportControl and it could be the root over PkgImportControl through user config.\nIf you look at ImportControlLoader, it gets root from the field named stack. That is what I was referring to.. Done.. > src/main/java/com/puppycrawl/tools/checkstyle/utils/CommonUtils.java\nThis is java.io.Closeable not com.google.common.io.Closeables.\nPropertyCacheFile was done.. > in private inner classes, it is ok to make public ctors.\nif class is private, inner ctor needs to also be private/protected.\nclass can't leave itself since it is private. only reason a ctor should be public is if reflection is used somehow.. @romani He is saying we should change links from http://checkstyle.sourceforge.net to http://checkstyle.org which I agree with. Code of PR was started long ago, hence why it is coded like this.\nI am waiting on Issue approval before fixing as CI will still fail since it isn't approved.. Done.. The original reason was to clearly state in code and javadoc that this is the setter for a check property. We need some sentence starter for the javadoc and can't just run right into property definition, which is what the rest is.\nGoogle group never clarified a layout so I am forcing the issue with this PR.. Sorry, I didn't see your message till now. I will undo.. We do the same thing for properties themselves if you missed it.. Like I said so it is clear incase we have some module where setter is not associated to property. Checker.setModuleFactory is one example.\n\nbe reasonable to use our special annotation over the field to make it clear that it is part of configuration.\n\nYes, but this is another issue. This issue is mostly just about controlling the Javadocs for a module. We can either enforce them to be something specific from xdoc, or let it be completely free-formed.\nWill a annotation show up when the Javadocs are converted to HTML? If not, this is a reason to have the Javadoc text.\nIf they are not to be free-formed, I need to know what you want them to be forced to.\nI thought it better to enforce them, and this what I came up with at the time.. > html of javadoc - no\n\nif you against of java anotation\n\nI am not against java annotation, my concern was the HTML version of the javadoc. When we started, we were concerned with how it would look, and I was just making a comment that you can't tell the difference between a property and a normal setter in HTML display. This is why I noted it in the Javadoc, so it would appear on the HTML display.\n\n+    /** @see #setIgnoreFinal() */\n\nThis is not possible as Javadoc is missing summary and our checks will complain.\n\n+    /** Allow to skip variables with {@code final} modifier. */\n+     * Setter to allow to skip variables with {@code final} modifier.\n\nI will give this a try.. This fixed idea violation in other area. I'm not sure why it didn't complain about this line too.. Because we are storing an Integer inside a Map and must update this value everytime we find a duplicate.\nSee https://github.com/checkstyle/checkstyle/pull/5774/files#diff-f13b332fc53d1bcce711a654be80a108L155. @romani if you look at AbstractMapBasedMultiset which is what guava's HashMultiset extends, it also uses AtomicInteger inside a Map which is what I replaced it with.\nSee http://grepcode.com/file/repo1.maven.org/maven2/com.google.guava/guava/r09/com/google/common/collect/AbstractMapBasedMultiset.java#55. not notifiers => no modifiers. @romani Should it be possible to specify different naming conventions between parameters and lambdas?\nIf so, this shouldn't be a required field, but be acceptable and default.. > The latest version of AbstractMapBasedMultiset doesn't use AtomicInteger\nIt uses Count which looks virtually like AtomicInteger.\nhttps://github.com/google/guava/blob/master/guava/src/com/google/common/collect/Count.java\n\nHave you checked that replacing it with plain Integer works?\n\nBoth ways work, but you cannot modify an Integer. To update the map with the new value you would have to create a new Integer and put that into the map and replace the old value. With the AtomicInteger, I don't have put the value back into the map since I can just update the instance directly.. If you want me to swap it, then I am fine with that.. @kazachka Nothing should be listed in required as we need to be able to turn on each one individually. Acceptable/default should return both token types.. I'm not sure where you are seeing wrap.\nI understood you want me to change option to property, but you formed it as a question so I wasn't sure you wanted me to make the change. I agree that property is probably better, so I will make the change.. Done.. Done.. @romani I went the way I did because the old SKIP_CI is used in 3 different places. \nThis line here is a simple single if statement which would have been an easy inclusion.\nThe other 2 are complicated if statements which would require something like && (SKIP_CI == false || FORCE_CI).\nExample: if [[ -n $CMD_AFTER_SUCCESS && $SKIP_CI == 'false' ]];\nI specifically merged FORCE_CI into SKIP_CI to avoid this as it would make those conditions too complex.\nSince we can't UT this code, I would like to avoid making complicated if statements.\n. do we want to keep the rename if we keep the FORCE_CI in here?\nI can make another line say SKIP_CI = !FORCE_CI || SKIP_BY_FILES.. Done. I went with the first approach.\nI also fixed a bug where FORCE_CI wasn't being set.. Done.. incorrect indentation, -1 space. can we split all new lines so they are less than 100 characters where possible?. same.. isn't this assertion unnecessary since eventually we will hit fail below? Also when can a new instance return null?. same.. same. Why is this documentation needed when no code was changed? This is a test area.. Just curious, why are we adding these IAEs and do we need them in other areas?. Main config says Line should not be longer then 100 symbols\nhttps://github.com/checkstyle/checkstyle/blob/master/config/checkstyle_checks.xml#L97. Hasn't this become a duplicate of https://github.com/checkstyle/checkstyle/issues/5291 ? can the other issue be closed?. Also do we need the same check in the main configuration file?. doesn't this need something like \\ to say it is a line continuation?. I am fine with either way you want to go.. can we only split on the words or blank space instead of the comma?. This sounds familiar which we had to do with other tests.. unless you are going to fix them in this issue, you should probably create a new issue and comment until .... Can we make description unique? it is the same as the previous one.. Are we sure this test wasn't testing a call on a full classpath?\nDo we have another test case that does use the full classpath?\nWhy can't we just split the line up to keep the test case the same?. I see some other test cases where we kept the full classpath, so this should be ok.. See comment at https://github.com/checkstyle/checkstyle/pull/5869#issuecomment-392934305 .\nIf we are dropping old name, then this means we won't support old DTD names which would be forcing users to redo their configuration.. We have 100+ checks. If we put all in one file we will have ~300+ tests. We should put each check in it's own file. If multiple tests need common code, you can create something like an AbstractXpathModuleSupport (or should it be ...FilterSupport?) to house it.. See https://github.com/checkstyle/checkstyle/pull/5857#issuecomment-392784899 on example on how to create a patch. These can be removed.. Because it is an audit listener and don't have the AST, we have to re-parse the Java file again.\nThere isn't even any check to see if file was already reparsed in case the same file generated multiple violations.. Undo unnecessary change.. @subkrish There are alot of unnecessary changes like this.. Here.. here.. here.. here.. here.. This is a mult-file check and as such it must annotate GlobalStateful and have all threads use the same instance. Multi-threads cannot modify the same hashset at the same time. It must have ConcurrentHashMap. Check cannot be the same as before since multiple threads are working with it now.. > I did not found any update of our Check to make them thread-safe\nThis kind of mean that users might not implement Checks that have statics field.\nImplementation never got underway or fully implemented, so I wouldn't take no updates as a sign there are no other trouble spots.\n\nWe do not consider right now ability to reuse same Check instance by multiple threads, but we ill discuss this during TreeWalker execution parallelization.\n\nAs you have said before, this is only a FileSet issue, so how will this come up in TreeWalker discussion?\n\nWe have modules that cooperate between each other by means of static fields \nWe should think that it does not exists. \nwe will not support such design of Checks/Modules/Filters.\nEven they have them, such Checks will not work. Sorry.\n\nIs this documented in our xdocs or somewhere that we don't support these type of modules anymore? We have said they are a bad design, but not that they should be banned.\nSo we supported them before, but no longer. We are fine breaking this and forcing contributors to change their implementation but not for other types of breaks?. Don't duplicate tokens, just re-call getRequiredTokens.. Same.. https://github.com/checkstyle/checkstyle/blob/641b6b2c0689fc35d6a3d77a7215fd1d9ce2a2b8/src/test/java/com/puppycrawl/tools/checkstyle/internal/XdocsJavaDocsTest.java#L107\nAdd your check name to the list and fix all violations the test produce. It will align your Javadoc based on what is supplied in the XDoc.\nLet us know if you run into any issues or have questions.. why are we removing catch from description? it still validates catch parameter names, just not by default.. Why wasn't this detected earlier? Like a junit or something?. Addition of catch in javadoc: https://github.com/checkstyle/checkstyle/commit/ac8daf291b44166b386f97f176dd9c5820fabcdd\nSplit, removing catch from check and making it solo check: https://github.com/checkstyle/checkstyle/issues/2616/\nYou are correct. I assumed javadoc was written correctly.. Why do we need Example of Usage override?\nURLs generated by junit are good and point right to the line.. Shouldn't we move this line to comment can be in different orders, and completely optional which is right below this?. @romani I didn't even know this location existed in metadata. Is this the one that is global for the entire workspace?\nIf so, I don't recommend this location and use the project specific location, especially if you have different projects in your workspace. Original comment said this too.\nExample for checkstyle: ${YOUR_WORKSPACE}\\checkstyle\\.settings.. @romani I don't agree with changing our inputs just to satisfy eclipse's issue which isn't even an issue for me.\nThese are weird cases and we should keep them.. together => Together. And change previous comma to period.. Same here. , you => . You.. result on non-desireable => result in undesirable.\nsuppress another issues => suppress other issues. in => on the. I can't tell for sure from web GUI. Does this file still end with an empty line?. Whole line is singleline, and option is set to alone or singleline. I don't expect a violation.. @romani It sounds like you are agreeing with my comment at https://github.com/checkstyle/checkstyle/issues/4057#issuecomment-398785395 ?. Discussion is in other issue.\n\nallow only mode {{ }} when braces on STATIC_INIT \n\nThis scenario is INSTANCE_INIT, not STATIC_INIT.. @romani Do we really need message override for google? Should this just be the default message?. ok.. I shared my position in issue. If someone likes writting {{ }} in anonymous class but {\\n}\\n in class they will come and say so when check changes. So you can go forward with how you want it.. If you don't want to move this to CommonUtil, why don't we move it to AbstractNode so all classes can use it?. please order the checks alphabetically.. https://github.com/checkstyle/checkstyle/blob/641b6b2c0689fc35d6a3d77a7215fd1d9ce2a2b8/src/test/java/com/puppycrawl/tools/checkstyle/internal/XdocsJavaDocsTest.java#L107\nAdd your check name to the list and fix all violations the test produce. It will align your Javadoc based on what is supplied in the XDoc.\nLet us know if you run into any issues or have questions.. I don't think we should have these \\u in the property files. Is there a reason you can't enter the actual characters into the file? Do the same for the other property files.. You should be able create a valid Java 9 file and place it in non-compilable folder and put a marker on it that it should be compiled by Java 9.\nExample: https://github.com/checkstyle/checkstyle/blob/master/src/test/resources-noncompilable/com/puppycrawl/tools/checkstyle/grammars/java9/InputJava9TryWithResources.java#L1. Shouldn't this be a switch?. Please undo unnecessary change.. Method was not changed so why are we changing the javadoc?. Unnecessary change. Please undo.. Please restore empty line before }.. This list isn't needed and will be a pain to maintain while we work on support. It is already a pain to update list of checks supported in xdoc.\nSince we are dealing with TreeWalkerAuditEvent, all you need to check is event.getLocalizedMessage().getColumnCharIndex() != 0 or event.getLocalizedMessage().getTokenType() != 0.. This check is internally only to us and tab width is always supplied, so I question if this is needed.. Remove extra blank line.. Yes, use tokenType. If it is still an issue, we will need to re-evaluate our default values in LocalizedMessage when we aren't given a value for it. We shouldn't be using a possible valid value for field that wasn't given us a value.. Can we expand the description? Something like Generates to output a suppression.xml to use to suppress all violations from user's config.\nI want to make it clear we display the generation and don't save it to a file or such.. Should EVENTS and QUERIES be a single map?\nShould we be using the LocalizedMessage instead of the event? Message should be same instance between TreeWalker and Checker violations. Event will be different as one is TreeWalkerAuditEvent instance, and other is AuditEvent instance.. Should XpathQueryGenerator have a new constructor that just takes TreeWalkerAuditEvent (plus tabWidth)? We are generating the instance for the violation after all.. If instances are the same, then it should be the same file. We don't re-use a LocalizedMessage for different files.\nAlso you won't compare LocalizedMessage to AuditEvent. All audit events hold a LocalizedMessage.. this should be added to the first source tag(line 37) in this section as it is a display of all the possible parameters users can give.. This is not a grammar test, so it shouldn't be here.. Please make other filter a link.\n<a href=\"config_filters.html#SuppressWithPlainTextCommentFilter\">SuppressWithPlainTextCommentFilter</a>. Double same.. filter is an alternative. => or similar filter must be used.\nYou make it sound like this filter works, but you can also use this other filter, which isn't the case. It must be one or the other.. > alone and alone_or_singleline were moved on top without changes\nWhy? Issue states this is just for same/alone_or_singleline.\nIf we should order the values, we should order the types too.\nShouldn't this be a separate issue?. Work as => Works the same as.. I think we should expand description to say what will happen if there is no multi-block statement as example shows on line 412.\nThis should also include line 419 to say that we consider end semicolons, parenthesis, etc... as part of the multi-block statement.. Yes, but shouldn't this be a separate issue and re-order everything?. ok.. This is fine.. https://github.com/checkstyle/checkstyle/pull/5987#discussion_r199563745\n\nchanged both lines.\n\nI don't really see any updates to explain behavior for no multi-block.. > > This should also include line 419 to say that we consider end semicolons, parenthesis, etc... as part of the multi-block statement.\n\nthis case is out of scope of RightCurly Check \n\nShould we be saying OK or should we say something like this is ignored or some such?\nWe say possible violation case is OK, seems to me we should use different wording for area that check won't even look at.. same as xdoc.. same as xdoc.. Spellchecker violation.\nfolllow => follow.. I find making the tests smaller makes it easier to read and understand. Also helps us going over the 100 char limit.\nI will make the changes.. Done.. Methods on interfaces => Methods in interfaces\nThese things are in the interface, not on top of them.\nlater on you use within. that is acceptable too for all these.. methods on interfaces => methods in interfaces. Fields on interfaces => Fields in interfaces. these checks? plural? You never specify more than this check, so I think the rationale should only pertain to this check.. which are implicit => which are implied\nimplicit is an adjective and you are using it as a verb in this scenario.. specified on interfaces => specified inside interfaces\n. Check method on interface => Checks method in interface. Check field on interface => Checks field in interface. method AST => field AST. Check nested types on interface => Checks nested type in interface. Does it matter that we are printing double spaces for no version?\nRunning Checkstyle  on X files (2 spaces)\nRunning Checkstyle on X files (1 space). This method should be in AbstractModuleTestSupport.. This is only defined once and is set based on the property option which also doesn't change.\nIs there a reason this should stay as a field? If yes, then what do you mean by independent?. I specifically said AbstractModuleTestSupport.\nModules are what requires code to be compilable. Paths are mostly for non-module tests, like CLI output.\nIT should mirror test tier as much as possible, eventually they may become the same. This method in the test tier is in AbstractModuleTestSupport.. It may be simplier to read, but it still doesn't tell me the meaning behind the variable and why these 2 options are targeted. I don't know this code that well so I can't say what a better name would be.\n\nWhat about staticImportsApart?\n\nNo matter what name is used, the javadoc has to be updated to explain it a bit more.. I don't see 1.1 . Just 1.0.. Why remove the this? Rest of the section shows our other DTDs.\nIf we keep this, we have to add xpath suppression dtd.. Why can't we leave the old section and just add this link in that section?. \" => &quot;\n1.1 => 1.2. be used to => can rename the module name to be a name defined by the user. This is used to. Replace last sentence with:\nThis is custom name is required to be able to suppress violations of 1 of the checks in specific scenarios, while leaving the other unaffected. Without the custom module name, it is harder to differentiate one module's violations from the other.. After Check.\nThis custom module name should be unique for the entire configuration to prevent accidental overlapping.. Clone service will be in this package, so the imports need to stay.\nSee https://github.com/checkstyle/checkstyle/pull/4882/files#diff-404a4bfa3acb4cbc7635f4b2f27435b1. unused and class only in one package should go away, right?. For GlobalStateful it should be fine, but I don't remember how we are going to handle beginProcessing for other types of checks.\nEach thread will have to create a new instance, so we will have to recall beginProcessing each instance?\nMy own implementation made a true, deep clone before passing it to the thread, so it was never an issue.. Linking to DTD should be enough.. This was because the section explained the DTD. I am fine to keep documentation for it here since we removed the old one, and with new section, discussed below, we could just link to that instead.. You are right, should be no is.. Yes, I am just thinking out loud.. validates a package names => validates the package names\nXML document => XML document structure. I think this should be Configuration XML Structure\nYou are saying the XML structure of the configuration file, so it would be Configuration XML Structure.. to validate => to validate the. validates a configuration XML document => validates the configuration XML document\nXML document => XML document structure.. Shouldn't this and the next paragraph be merged? They are talking about the same thing.. To validate against => To validate against the. Shouldn't we use a similar search as on modules links so if we move the file we won't have to remember to update the links?\nhttps://github.com/search?q=path%3Asrc%2Fmain%2Fresources+filename%3Asun_checks.xml+repo%3Acheckstyle%2Fcheckstyle. Same.. please move this code to mustCheckName.\nIf you look at https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbstractNameCheck.java#L73 they are the same AST.. same note here as @romani 's. should we just point them to https://github.com/checkstyle/checkstyle/wiki/PR-rules instead of rewriting what should be the same rules?. shouldn't this be main/master?. same.. @romani I don't see the added anywhere.. @romani Same here.. @romani same here.. Why is it using local master? no one will update local master and they may not even keep it.. Please move this line closer to TokenTypes.LITERAL_CATCH.\nRecheck code coverage after this move.. Please move these to the field declaration and make them static.. Should this be BeforeClass? Why do we need to run this before every test?. I was just saying to recheck that coverage will still pass once you fix the initial problem. Sometimes changing conditional orders changes code coverage too.. This doesn't need to be full path. cmdline.html should be fine.. input class file => input files.. found => find. same.. @romani Should we still print check name if module id is populated?\nWe don't even display check name in violation if id is given.. @timurt Please don't print module name if id is supplied.. This method doesn't check anything.\nA more appropriate verb would be retrieve, get, find, etc.... what about if {} is first, followed by x++? it should be treated as a standalone block.\nplease add it to all options.. @romani it is directly related to how the check handles this issue. We should only be processing {}s that take up the entire case group.\nWe stated at https://github.com/checkstyle/checkstyle/pull/5376#issuecomment-368540777\n\nwe only be validating brace in case/default if it spans the entire case and nothing comes before or after it\n\nSo to me, it is all the same issue. I thought it should be added to all options so its other similar form is in other options too.\nadding\ncase 5:\n                {\n                }\n                x++;\n                break;\nto InputLeftCurlyEolSwitch causes a violation when it shouldn't (based on my statement from the previous PR. The {} doesn't span the entire case.. @romani please confirm you agree, there should be no violation unless brace spans the entire case.. wercker isn't failing and this PR was merged. We don't need these CI modifications anymore.. <>s should be sanitized since this in javadoc.\nAlso why tt instead of pre?. Yes, was failing because it was an old version and someone was using the new module we released.. https://github.com/hibernate/hibernate-search/pull/1703 was merged too.. I'm surprised nothing is complaining that these fields can be static.. Formatting of this line looks off. I thought you split it by periods, but this whole sentence could fit on 1 line, up to the period.\nCan you move numerous violations on purpose. to this line.\nMake Our shared all one 1 line too.. All the other getters in src/test return a constant too.. > I do not see it in UT expected results\nIt is there.\n+            \"148:9: \" + getCheckMessage(MSG_KEY_LINE_ALONE, \"}\", 9),\n+            \"148:13: \" + getCheckMessage(MSG_KEY_LINE_ALONE, \"}\", 13),. It is a violation and looks correct to me.\n\"141:9: \" + getCheckMessage(MSG_KEY_LINE_ALONE, \"}\", 9),. The difference is at line 108 the 2nd } is alone on the line. Line 141 has a ) after it and since the setting is alone or singleline, the ) should be on a different line.. which annotations are you talking about? I can't think of any others but these.\nI don't really like class coupling checks, so I am fine with what you want to do with it.. @romani Ordering in xdoc tests are based on ordering of the values in the class fields. This verification doesn't examine the source code so we are wholely dependent on how the class specifies the ordering.\nDEFAULT_EXCLUDED_CLASSES in AbstractClassCouplingCheck creates a hashset that is based on the list given to the arrays stream class. Ordering is not being maintained in this conversion.\nI don't know the specific rules on how it creates the order, but the order is deterministic, so there is some pattern.\nYou can see the previous ordering doesn't match either.\n\nDEFAULT_EXCLUDED_CLASSES\n \"boolean\", \"byte\", \"char\", \"double\", \"float\", \"int\", ....\nxdoc\nIllegalStateException, Set, StringBuilder, HashMap, ArrayList, ..... > I think I need to pull request again, right? \n\nNo, no new PR is needed. See my comment at https://github.com/checkstyle/checkstyle/pull/6063#issuecomment-411907254 .. Suorce => Source. Just asking, is it possible to keep this helper class and not move all fields to parent?. This is not always required.\nExample: http://checkstyle.sourceforge.net/writingchecks.html#Tool_to_print_Java_tree_structure. @li-boxuan Please run pitest and upload the html file for the class. It specifies the mutations done and which ones are surviving. With that report, we can see where the problem area is and how to best help.\nThe command given above should generate the html report in target folder automatically.. It could be the < 222 and it is changing it to >= 222 and no tests are failing.\nIt could be the +1 and it is changing it to -1.\nI could be wrong since we can't see the report.. @romani ping. minor change should be lowercase. @romani The description of the configuration is right above. Aren't we just restating the same thing?. remove the empty line. We already have AnnotationUtil so I think this method should be in there. I don't think we need this extra class for a single method.. This should probably use AnnotationUtil#getAnnotationHolder.. @romani We are adding this Configuration label to all our examples?\nSome checks already say An example of how to configure the check is:. http://checkstyle.sourceforge.net/config_naming.html#CatchParameterName_Examples\nWill we be changing the wording there too?. @ngeor Please see https://github.com/checkstyle/checkstyle/blob/master/src/test/java/com/puppycrawl/tools/checkstyle/internal/utils/TestUtil.java#L51 and how it is used in other tests.\nprivate means nothing for tests.. @kazachka Yes, make this change in the xdoc so we don't have to remember to keep the list of tokens up to date.\nSo swap all of this: https://github.com/checkstyle/checkstyle/blob/master/src/xdocs/config_metrics.xml#L177-L203\nwith the following:\nIterates over the list of tokens defined in\n<a href=\"https://github.com/search?l=&q=path%3Asrc%2Fmain%2Fjava%2Fcom%2Fpuppycrawl%2Ftools%2Fcheckstyle%2Fchecks%2Fmetrics+filename%3AClassFanOutComplexityCheck.java+repo%3Acheckstyle%2Fcheckstyle+%22getRequiredTokens%22&type=Code\">ClassFanOutComplexityCheck's source</a>.. remove unnecessary extra line.. This formatting looks weird imo.\n@romani Whats your opinion?. > annotationNode.getType() == TokenTypes.ANNOTATION\nI don't think you can have this here, since Javadocs/comments sometimes get placed inside the modifiers section next to annotations.\nAdd some javadocs to your tests to confirm.. Along with the above change, this could become a for loop similar to https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/utils/AnnotationUtil.java#L153-L167. This is a utility method, so there should be no connection to javadocs.. Same as above.. Same as above.. Since this is a utility method, it should be named something common to everything it can be used for.\nhasAllowedAnnotations => hasAnnotation.\nallowedAnnotations => list (or if someone has a better name). Yes I agree, but as checkstyle doesn't catch them currently, I have to keep pointing them out. We don't really use alot of checks on inputs which is why there is no violation.\nBesides this new line was the only change to the file which was odd by itself.. See https://github.com/checkstyle/checkstyle/pull/6090#discussion_r215400501. Why is this lambda's logic so much different then getAnnotation's lambda?\nI would think the difference should only be with the return (equals versus contains).. @romani We don't have a check that verifies tests start with the word test?\n@ngeor You are doing a bunch of changes that are unrelated to this PR. I would consider moving them to a different PR.. another unnecessary change.. @romani ping. See https://github.com/checkstyle/checkstyle/pull/6052#discussion_r215399379 on what we wanted it to be changed to.. This should follow the pattern of the other PRs and be Example.. Same here, should be just Example.. same.. This seems like a mouth full.\nHow about:\nTo configure to check all variables and identifiers (including ones with the static modifier) and enforce no abbreviations (essentially camel case) except for words like 'XML' and 'URL'.. How about:\nTo configure to check variables, excluding fields with the static modifier, and allow abbreviations up to 2 consecutive capital letters ignoring the longer word 'CSV'.. are allowed => is allowed\n2 instances. same as above. 2 instances. same as above, 2 instances.. are allowed => is allowed\n2 instances. Boolean creates a violation in other places, why not here? Is it we just do methods and not class definitions?. Violation is on Class portion. Why isn't there a violation on default? Is this just outside the scope of the check?. shouldn't this also include type parameters of fields?. @jodastephen ping\n\nI will update the code and rebase.. The main issue doesn't state that this is only for special parents. It is just saying where it is nested and it is implied static.\nI would say anywhere there is a nested interface/enum should be violated on then that meet the implied definition. If user wants to restrict between class/eunm parent, they can use xpath suppression.. > not enums at the top level\n\nNothing top level can be implied static, so that is the reason why there should be no violation.\nhttps://docs.oracle.com/javase/specs/jls/se10/html/jls-8.html#jls-ClassModifier\n\nThe modifier static pertains only to member classes (\u00a78.5.1), not to top level or local or anonymous classes. . Sorry I missed it.. Yes, but it only violates on Class<? extends Boolean> while not on default Boolean.class.\nIf you did public Class<?>[] value() default Boolean.class; there would be no violation.\n\nI think its just another case of something outside the scope of this method.. ok, we can ignore this item then. @romani If nothing is to be done here, try marking this as resolved right below. I assume it will hide the conversation so it doesn't look like its still open.\nIf there is still something to be changed, please point back to so it is clear what it is.. I think we should maintain camel case for variable name.\ndetailAST => detailAst.. same.. This doesn't seem like a very detailed test unless we have one that is more complex than this.\nCan we have a test with more then 1 AST to show we stick with only the first one even if there is more.. As another note, I am not sure this method name is detailed enough to know what it is for without looking at javadoc.\n@romani Do you have an opinion?. Since class javadoc was changed dramatically, http://checkstyle.sourceforge.net/checks.html has to be changed too.. @pbludov That check is just enforcing the name of the getter/setter match the field name. If you change the field name, you have to rename the method.. could allow? Are you not sure?\nBe assertive in documentation. Remove the word could.. same.. all these have the same reason and same classes. You should be able to group multiples bugs together, see https://github.com/checkstyle/checkstyle/blob/master/config/spotbugs-exclude.xml#L59. why was this changed?. is there a problem getting this to 100%?. Why were these added?. Please make all annotations on separate line from method definitions.. What was the matter with the original way the filter was done?. I would prefer the return description be something like @return true if .... so it is clear.\n\nabbreviation if bigger \n\nShouldn't then remain as is?. So by inclusive, if I pass 0, 0 does this mean only the character at position 0 is returned? Or is an empty string returned?. > getXMLParser\", 3, 6) returns \"XML\" (not \"XMLP\")\n\nand so does getAbbreviation(\"parseXML\"\n\nparseXML should only return XML but getXMLParser should still return XMLP as this was the old behavior, correct?\nWe are counting consecutive uppercase letters. We can't possibly know if the last letter is part of a next word or not without scanning some type of dictionary.. > allow abbreviations up to 2 consecutive capital letters \nShouldn't this be found \"MYN\" but it is allowed only 2 consecutive capital letters?. Why does this need to be changed? enabled is already set to false so it shouldn't generate any errors.. The original code never caught the exception.\nIs there a reason we should catch it here instead of passing it up the chain?. > I thought @return true if .... sounded like a method that returns a boolean.\nOoops my bad. I too just thought it was a boolean return and forgot the real return type.\nYou can ignore that part of my comment.\n\nWhat about something like @return the abbreviation if it is bigger than required and not in the ignore list, otherwise @{code null}\n\nThis sounds fine to me.\n\n0, 0\n\nTo me allowing -1 could be valid since we don't prevent it or give an error for it.\nMy original train of thought was maybe the inclusive of this parameter was what is causing the extra code in getAbbreviation, specifically the special case of endIndex == str.length() - 1.\nI want to look at the original code some more based on my other comment.. @romani This is an overridden method, so it can't be renamed. The class implements java.util.concurrent.Callable which is forcing the call method name.\nInteger is because Callable has a template and I assume it doesnt accept primitive types.. I don't know the full details, but it seems picocli.CommandLine only works with Runnable/Callable and we are passing it our Main which he changed to implement that.. See MainTest.\n\n\"Usage: checkstyle [-dhjJtTV] [--executeIgnoredModules] [-gxs] [-c=<configuration\". Issue says we are just checking extends and implements. Don't these 2 lines do more than that?\nI see the content of your issue went with Class name too, but the issue title doesn't agree too.\n\n@romani Should IllegalType really extend to defined class names too?. @remkop For your util, you pass in the instance. When would your users use CommandLine with an instance from a non-default constructor? To me, it would seem the majority of main classes would use the default constructor.\nYou could have CommandLine accept Class<?> as well and just call clss.newInstance().. @esilkensen Thanks. I see now. To me it seems slightly odd, but since it is the old behavior it must stay. It slightly does make sense, but can't always be trusted.\nThis section can be ignored for now.. @esilkensen \n\n\nWhat about something like @return the abbreviation if it is bigger than required and not in the ignore list, otherwise @{code null}\n\nThis sounds fine to me.\n\nPlease make this change. I am fine with everything else discussed here.. inclusive for endIndex is wrong.\nIt is only inclusive if endIndex == str.length() - 1 is true.\nLets just drop the wording inclusive and add a comment somewhere that it isn't inclusive because last capital is usually beginning of next word, like what was used for the -1 wording.. same here about inclusive for endIndex.\nIt isn't inclusive since you do endIndex - beginIndex instead of endIndex - beginIndex + 1.. ~~Since end isn't inclusive, shouldn't this be endIndex = str.length()?\nWon't changing this get rid of if (endIndex == str.length() - 1) { in getAbbreviation?~~\n~~If this change goes into effect, we should be able to remove getAbbreviation (inline it instead) and specify all end indexes are non-inclusive.~~\nEDIT: It seems this still takes into account its non-inclusive and so it is really dropping 2 characters off on the end.\nI think what is confusing me is allowedAbbreviationLength is also -2 (specify 5, violations on words 7 or longer).. checkIdent was removed but thisn't going away, I am marking it as resolved.. I believe this has to implement TreeWalkerFilter and not just Filter.. This class is missing fileRegexp and filePattern.. I don't believe this should have any FilterSets. It should be a self-contained filter.. The contents of this method should be the same as https://github.com/checkstyle/checkstyle/blob/6893affeac7285afd16f8a389c7d65023d0c327a/src/main/java/com/puppycrawl/tools/checkstyle/filters/XpathFilter.java#L119-L123 .. @jack870131 Another idea instead of duplicating so much code is to make this class a wrapper of XpathFilter.\nSo in the constructor of this class, instantiate XpathFilter, make all the setters pass their values to the XpathFilter instance, and just have this accept method call XpathFilter's accept.. gxs needs to be removed here and down below.\nPlease verify all commands are correct and no others have been changed/added/removed.\nPlease tell us when both are done individually.. Please move this comment to right above the <property tag.. @romani Do we need to create a section documenting how some arguments changed between the versions?\nSee my next comment on why I am asking.\n@remkop Some other utilities I have created use the CLI as an api to execute checkstyle.\nI know some arguments changed, but I don't know the extent. If any of these are affected, please let me know.\nhttps://github.com/checkstyle/contribution/blob/master/checkstyle-web-tester/checkstyle.php#L136\nhttps://github.com/checkstyle/contribution/blob/master/checkstyle-tester/launch_diff.sh#L208\nhttps://github.com/checkstyle/contribution/blob/master/checkstyle-tester/launch_diff_antlr.sh#L180\nhttps://github.com/checkstyle/contribution/blob/master/checkstyle-tester/sevntu_launch_diff.sh#L208\nThey are mostly -J, -c, -f, -o and return code -2/-1.. @remkop Thanks.. mean of => means of.. library, so our CLI => library. Our CLI. period was forgotten after library. See https://github.com/checkstyle/checkstyle/pull/6180#discussion_r229297295 . We have 2 temporary variables between both continues. The whole point of the fix is to not execute one of the temporary variables in this scenario since it uses disk access. So we can't merge these together.\nThe only other option, besides leaving this as it is, is to move the code after the first  continue into a separate method. If you would rather have that, what would we name the method? processFilesEx?. > method above\nThis isn't an option since we are filtering on a specific file and the previous method has the list of all files. We would have to loop the list twice. Any further back and we are not in Checker.\n\nmake extra filtering statement before this processing loop in this method\n\nYou mean to go through the list twice like the previous one. I dislike looping through lists twice if they can be avoided.. I will see. Issue states it only occurs when non-full path is given. So it should be possible.. It only happens when a file is given and no directory path at all, or the partial directory path given is not part of the suppression directory given.\nIn our case I can't give \"src\" path and suppression text would have to be something that comes before src/.\nThe only way to do this in our setup is verify the / for the directory path appears right before src.\nThis is done.. https://app.codeship.com/projects/124310/builds/d644a269-72c7-4e92-a54a-49a8bd722e8f?line=6a0143be-1ffb-4eab-bf10-42e52eb2bc50&step=parallel_.ci%2Frun-link-check-plugin.sh\n\n<td><i><a class=\"externalLink\" href=\"http://www.antlr.org/antlr4-maven-plugin\">http://www.antlr.org/antlr4-maven-plugin</a>: 404 Not Found</i></td></tr></table></td></tr>. If violation on lambda, then there won't be one anymore as we just removed this. See 32fed6694b84b5773e74dfd07b2b080a8d498128 .. # link is missing the final encoded character that takes user to the specific section. It should be https://checkstyle.org/report_issue.html#How_to_report_a_bug.3F.\nPlease confirm it is not just me who without that final character the link doesn't open to that specific section.. Is there a reason for this item when we have the similar link on line 7?. in format => in the format.\nDETAIL MAKE A HUGE => DETAIL IS A HUGE. I think it would be better to have these in order they will go to them (lifecycle).\nHow to report issue first with issue template, then followed by PR template. Shouldn't PR template go in contributing guide section?\nIt should also be stated that PRs are only looked at for approved issues.. Its weird. It doesn't open to that specific section for me on firefox 63 and internet explorer without it (Windows and Lubuntu).. I installed Chrome on Windows but it still isn't behaving like you said. I still need the .3F. I can't get Chrome to work on lubuntu.\n\n@varunu28 Go on to the others and we can come back to this.\n@romani Which behavior are you seeing?. @varunu28 Still no answer on this.. I will mark this as resolved then.. @romani the link is http://rveach.no-ip.org/checkstyle/checkstyle.php . Link and documentation and source can also be found at https://github.com/checkstyle/contribution/tree/master/checkstyle-web-tester , so it is already public knowledge.\nYou may add it to checkstyle if you wish, just know if I ever lose internet in a storm it will go down too as it is my private server and nothing official.. > multiple copies of the file which will be significantly more confusing to readers/maintainers\nI disagree on this point as file will contain configuration that was used and clearly state what code causes a violation with that specific config. I wouldn't find this confusing, it would just add many more files to keep as each config setup would require a new input.\nWe usually don't maintain these files per say, because they are snapshot in time on what the user gave us in issue. Adding on to the end of the file is ok as long as previous line/column violations don't change so git history will showcase how code change affected violations just like our regression.\nIt is slightly more work to start these files up, but copying pasting the exact same contents and changing comments is basically all it amounts to. Same file with different configurations allows us to show how check can be configured and how it will behave differently with different config.. This will not work as setters will be called after constructor. This type of line will need to be in the accept method.. All your setters in the filter are properties. You will need to add them here and document them similar to the file.\nSee http://checkstyle.sourceforge.net/config_filters.html#SuppressionXpathFilter_Examples for how xpath described the file.. See http://checkstyle.sourceforge.net/config_filters.html#SuppressionXpathFilter and how it is documented. Since all this filter is is a wrapper of the other, documentation may be similar. Big differences would be that this filter needs to describe itself as a single suppression that is written in the configuration, instead of pointing to an external file that supports multiple suppressions.. Again, since this is a wrapper of XpathFilter look to https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/filters/XpathFilter.java for how some basic documentation is done.\nIt will probably be similar but not exactly the same.. Default value will be validated against using UT. You will know if you have the right value.\nFirst write some tests to prove your values are correct and won't cause an exception.. always the next version. 8.15 .. I believe this should include the URL to the page for the javadoc version. IE: https://checkstyle.org/config_modifier.html#RedundantModifier.\nThe xdoc version should say the same. If it is the XDoc/Javadoc verification that isn't allowing this and you can't figure how to modify it, let me know and I will look into.. Sorry, i am still using old URL. I updated the first post.\n\nI do not see any example in existing code base\n\nI missed ParmeterNameCheck when we were re-organizing the Javadoc/XDoc. The reason for this request is the URL will work fine on the XDoc, but when the Javadoc is turned into HTML, there is no anchor named RedundantModifier so it will point to an invalid location and be worthless.\nSee ParameterNameCheck as an example: http://checkstyle.sourceforge.net/apidocs/com/puppycrawl/tools/checkstyle/checks/naming/ParameterNameCheck.html\nThe link to CatchParameterName doesn't do anything.\n\nI do not remember that we agree on changing of this format.\n\n@romani If you want to drop this item since there are other bad ones, then ok.\nIt is not really new. We have working links for other things like TokenTypes.\nSee https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AtclauseOrderCheck.java#L53. Fixing javadoc validator will require fixing the other areas too.\nLets just ignore this and I will fix it after the PR is merged.. We can't have this suppressing anything. Please give files/checks a value such that it will always result in suppressing nothing.\nSee line 342 for a comment to place above this filter so it is clear it isn't to be used in our repo.. We should only create the inner filter once and re-use the same one. Accept is called for every file, so this will cause an unnecessary slowdown just to recreate the instance over and over.\nPlease remove getXpathFilter and move all code to finishLocalSetup and assign it to a field.. https://github.com/checkstyle/checkstyle/pull/6172#issuecomment-441256590\n\nWe should drop the String field forms of the expressions as we don't really use them for anything important, and swap everything that did use them with the Pattern form. They were only really used in equals and hashCode methods.\n\nWas there something preventing you from removing the fields?. increase the version to 8.16 since we have released a new version.. You don't provide any examples. Please provide some examples on how to use this filter. . Please provide us with some description of the filter.\nLook to the original filter for some guidance and it would probably be best to mention that this filter is just a wrapper for the other so it can be used directly in the configuration file.\nI would also specify this filter is for people who want suppressions in their configuration or can't use an external suppression file.. I question using ... here since we are expecting a fixed number of parameters and can't accept any number given.\nI think it would be better to spell out every parameter we need.. original issue:\nCode style issues - 'equals()' called on Enum value (Errors) (3)\n    src/main/java/com/puppycrawl/tools/checkstyle/api\n    LocalizedMessage.java (1)\nInspection description:\nReports calls to equals() on Enum constants. Such calls can be replaced by an identity comparison (==) because two Enum constants are equal only when they have the same identity.\nThis change required by TC now produces this violation:\nLocalizedMessage.java (1)\n296: equals() Overly complex boolean expression (11 terms). I agree. I will suppress it.. It is ok to suppress violations on test code.. >  I cannot use the .pattern() method to get the pattern of it in hashCode and equals methods which will throw the null pointer exception.\nWhy can't you use the Pattern class directly? Objects.hash and Objects.equals will protect you from null variables, and if you give it the pattern class directly, then you won't need to call the pattern method.. Are you saying you want me to enable this but just use noinspection suppressions?. Done.. > PackageObjectFactory\nCode is .get().getKey() so we can't just return null either. Also, this code is wrapped by containsValue of the same list, so I highly doubt an if/else check would pass code coverage.\nI think we should suppress this, you agree?\nOther class was fixed.. Done.. Done.\nI just made it a new sentence. Let me know if you want it documented another way.. Done.. Done.. Done.. Done.. Done.. I can confirm code coverage won't be satisfied, but I think I see a way to rewrite the code.. @romani I rewrote the code. We basically rewrote the containsValue twice by different means, so I removed the main one and now we just rely on the one using optional.. Done.. methid => method. @jack870131 Who was reporting violation? You need to know this in order to suppress because each tool has their own way to suppress.\nCheckstyle uses suppression file. PMD has xpath in one of it's configuration files. TeamCity has @noinspection javadoc.. wont't => won't. > SuppressionXpathSingleFilterTest:281 Rule:UseObjectForClearerAPI Priority:3 Rather than using a lot of String arguments, consider using a container object for those values..\nThis is a PMD violation and must suppressed in https://github.com/checkstyle/checkstyle/blob/master/config/pmd-test.xml . Please put a reason above the suppression.. Based on https://github.com/checkstyle/checkstyle/pull/6172#issuecomment-443866697 , this can't be done because Pattern doesn't implement its own hashCode or equals methods. So it see 2 different objects with the same pattern as different.\nI will mark this as resolved so we can ignore it.. @jack870131 This is still not done. New code just changed query to messages and used .* which means it is still suppressing everything.\nPoint is it shouldn't suppress anything.\nRestore query property and give all properties the following value: IGNORETHIS.\nAlso add the following comment above the filter:\n<!--\n         Use suppressions.xml for suppressions, this is only example.\n         Properties will prevent filter from being valid.\n      -->. Don't use @SuppressWarnings(\"PMD\"). Suppression should be in file I mentioned.\nPlace something like:\n<rule ref=\"category/java/design.xml/UseObjectForClearerAPI\" />\n    <properties>\n            <property name=\"violationSuppressXPath\"\n                      value=\"//ClassOrInterfaceDeclaration[@Image='SuppressionXpathSingleFilterTest']\n                  //MethodDeclarator[@Image='createSuppressionXpathSingleFilter']\"/>\n        </properties>\n    </rule>\nAdd your own comment about property specifying reason for suppression.. Can we delay creating attributes until they are needed to prevent doing excess work?\nMaybe speed should be looked at separately, but this seems like it would create similar problems we are already seeing for stackoverflow on children. See https://github.com/checkstyle/checkstyle/issues/5820 .\nIf attributes are only used when the user specifies them in their XPath query, then it makes more sense to only create them for the nodes users specify them for.. @romani attributes is only really used when getAttributeValue is called.\nSee https://github.com/checkstyle/checkstyle/blob/a39de9bf4c38a0a655d89b87e59045a8eb83d3dc/src/main/java/com/puppycrawl/tools/checkstyle/xpath/ElementNode.java#L106-L107\nIs this method called on every node all the time or is it only called when user specifies specific attribute that tool must look up?\nIf it is only called when user uses attribute, then since we cache the AST along with the node, we can always delay creating attributes until this method is invoked.\nNote: When is iterateAxis(AxisInfo.ATTRIBUTE) called since it too uses attributes?\nSee https://github.com/checkstyle/checkstyle/blob/a39de9bf4c38a0a655d89b87e59045a8eb83d3dc/src/main/java/com/puppycrawl/tools/checkstyle/xpath/ElementNode.java#L188-L189. I debugged getAttributeValue some, and yes, it is only called if the xpath has an attribute. So we don't need to populate it for all nodes if we don't always use it.\nIt seems iterateAxis is used very rarely in our tests (mostly XpathMapperTest). I see it being invoked when * and possibly // is used, but it still shows it doesn't need the attributes for every node depending on the xpath given by the user.. If you want to move it to a new issue that is fine.\ncreateAttributes method is new and it is getting worse with the map of attributes but we had setIdent and text before.. > a lot of wildcards\nthe . before Input ensures Input is the start of the file name.\n\ndo we still have inconveniences in names of input files ?\n\nThis only pertains to the test resource directory and java files.\nI did a search and the only other things showing up was package-info, AAClass, etc. 26 files in all out of 960 don't start with Input.\nThis will atleast help remove the majority of the input files. If you know a way to specify the directory, instead of package/class names, then that would be the better option but I am not seeing an exclude directory option.. You pretty much restate what the xpath suppression says. We want to know reason for suppression, besides \"there was a violation\".\nLets have something like we prefer to be specific in what options are required in test area and have them written out.. same.\nSomething like can't move field since we won't have the values to create the instance until the setters are called.. @jack870131 I am working on new pitests mutations.\nPlease confirm atleast 1 test fails when this line is swapped with either return true; or return false.\nI am not asking this code to be changed in the PR, just that we have a test that truely shows it is well tested.\nIf no tests fail, then you need to add atleast 1 more so it doesn't pass with this mutation.. please add method names used in example in your wording. It helps create a better connection between text and code.. I question everything after which and this being in the first sentence. It seems very technical and not a friendly description of the filter.\nXpathFilter isn't visible to users, SuppressionXpathFilter is so it would make more sense to users to mention that filter instead of internal one.\nPlease also explain that this filter only supports 1 suppression, and will need multiple instance if wants to suppress multiple violations.. Done.. Done. Thanks for the link.. Just a question. What does @default specifically do and why did it cause violations to be missed without it?. Code removed should be valid. Removed code is ast != Class while statement inside method is ast == ..., so it is redundant to have them both.\nisClassMemberBlock mutation is still failing and I want to look into this once more.. IMO, this removal is valid.\nisUtilClass has to be true for a violation, and  all 4 conditions have to be true for isUtilClass to be true.\nIf hasMethodOrField is false, the other 2 has...MethodOrField will also be false (because there is no method/field) and never make isUtilClass true.\nIf hasMethodOrField is true, the other 2  has...MethodOrField can be either true or false (depending on if there are private/static methods/fields).\nSo a violation is always dependent upon the other has...MethodOrField variables and this is why the result of hasMethodOrField doesn't matter and can be removed.. ~I am having issues determining if this mutation is valid or not and how to prove it.~\nI will recheck with regression with validateOnlyOverlapping = false.\nhttp://rveach.no-ip.org/checkstyle/regression/reports/194/openjdk10/index.html#A1\nNew regression shows that this code is needed. I will revert this change and add a test.. Removing this code should be valid.\nWe can't assign null to non-objects, so the check if it is an object is redundant, and null assignment should be enough.. isObjectValid checks if what is being called on is not STRING_LITERAL or NEW. isCalledOnStringFieldOrVariable check if what is being called on is String class.\nSince the latter method declares it must be X, the other method which says it must not be Y is overriden and this is why the mutation survives.. By the time we get here, a javadoc is always found, like the above if portion and I never found an instance where it returned false.\nI will recheck regression with skipNoJavadoc = true.\nhttp://rveach.no-ip.org/checkstyle/regression/reports/194/\nNew regression with skipNoJavadoc = true still shows no differences.. The method call is important but it only really matters when areExternalResourcesChanged is true.\nareExternalResourcesChanged checks if all resources changed or not present in cache. If all resources are there and not changed, then filling cache again with them is pointless. It is only after we call reset that we must re-populate the cache with external resources.. This is only called after areExternalResourcesChanged method and reset. So at this point we already know all resources are not in the cache and must populate all of them. Since this is called after a reset, we always re-populate all resources and so check is not needed.\nMaybe list of resources can have the same file location twice, but then there is no harm in populating it twice. If it was an issue, then maybe the set should be removing the duplicates. It isn't now because ExternalResource is the Check and they don't define hashCode/compareTo.. This has been reverted.. isClassMemberBlock survives because when it returns true instead of false, getEmptyLines(almost) always returns an empty list and never produces a violation.\nast are PACKAGE_DEF, CLASS_DEF and VARIABLE_DEF in tests.\nFor PACKAGE_DEF, getEmptyLines always returns an empty list no matter what.\nFor CLASS_DEF, getEmptyLines can return members and produce violations but if all tokens are set, it just duplicates violations found in METHOD_DEF.\nSo to kill the mutation, we must use only the CLASS_DEF token. I will add this test case. No reversion of code is needed.\nAs a side note, this seems to only happen when allowMultipleEmptyLinesInsideClassMembers is set to false.. First new mutator will be added with https://github.com/checkstyle/checkstyle/pull/6274 .. This change in the check is to ensure that when we give the method with an import star, it returns \"java\" instead of \"java.\" if the import is \"java.*\". This is required to kill the mutation in the \"isStarImport\" method.. This change is so the exception makes it clear which one is the invalid group.. > these lines of comments just for explaining what kinds of CI error it would suppress \nWe already know from the category and xpath the type of violation we are suppressing. We want an overview of why it is being suppressed.\nViolation is in UseObjectForClearerAPI, how do we get a cleaner API from suppressing violation which is meant to do that.\nTake https://github.com/checkstyle/checkstyle/blob/master/config/pmd-test.xml#L25-L27 as an example. Violation is too many methods in class. The reason we suppress this is we prefer to keep all tests related to a single class in a single test so they are all together. It also helps with pitest profiles. By your own example writeup, you would have written something like \"they are too many methods in classes which would cause the warning of rule TooManyMethods\", but it doesn't give users reading this for the first time the background as to why it is disabled. It just basically restates the check gave a violation and we want it suppressed. It needs to go further so users can understand our reasoning and help them going forward in our project.\nDoes this make it clearer?\nThis is why I wrote: \"we prefer to be specific in what options are required in test area and have them written out.\".\nString... parameters would cause confusion going forward in the tests. How many parameters should I give? Is it valid to give 2, 5, or none? The method required a specific number of parameters, but String... doesn't give user this understanding from just the signature. We would have to expand the javadoc, which most people don't read, or have the user always read the code to understand what the method is truely requiring.. You might have noticed some CIs named pitest. It is how we do our mutation testing. http://pitest.org/ \nIt basically mutates the code in bad ways behind the scenes and expects a test to fail. It is proof that you have the needed tests for each line of code.\nYou don't need to add any extra documentation for this. I am just for asking for extra tests if there aren't enough already.\nIn this scenario, the mutator will change the code to return true; or return false; and expect a test to fail. A test failure will show that you have a test that says this return value must be true/false in specific situations. It shows your code is needed as it is written now.\nIf you still don't understand, I can look at it when I get time later.. This change is because picocli never used the original files list.\nfiles is required, so you can't get by with using the empty list. When atleast 1 file is given, picocli overwrites files with a new list using reflection, even though the field was final. It never uses the default value, and thats why it can be removed.. This is basically amounts to a no change as no changing tests show.\nThe exception message generated by AutomaticBean when a conversion fails specifically says what value was trying to be assigned.\nThe trace will change from:\ncom.puppycrawl.tools.checkstyle.api.CheckstyleException: cannot initialize module com.puppycrawl.tools.checkstyle.checks.NewlineAtEndOfFileCheck - Cannot set property 'lineSeparator' to 'ct' in module com.puppycrawl.tools.checkstyle.checks.NewlineAtEndOfFileCheck\n    at com.puppycrawl.tools.checkstyle.Checker.setupChild(Checker.java:463)\n    at com.puppycrawl.tools.checkstyle.api.AutomaticBean.configure(AutomaticBean.java:198)\n    at com.puppycrawl.tools.checkstyle.AbstractModuleTestSupport.createChecker(AbstractModuleTestSupport.java:144)\n    at com.puppycrawl.tools.checkstyle.AbstractModuleTestSupport.createChecker(AbstractModuleTestSupport.java:118)\n    at com.puppycrawl.tools.checkstyle.checks.NewlineAtEndOfFileCheckTest.testSetLineSeparatorFailure(NewlineAtEndOfFileCheckTest.java:149)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:498)\n    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)\n    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)\n    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n    at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)\n    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)\n    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)\n    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)\n    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)\n    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)\n    at org.junit.runners.ParentRunner.run(ParentRunner.java:363)\n    at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)\n    at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\n    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:538)\n    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:760)\n    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:460)\n    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:206)\nCaused by: com.puppycrawl.tools.checkstyle.api.CheckstyleException: Cannot set property 'lineSeparator' to 'ct' in module com.puppycrawl.tools.checkstyle.checks.NewlineAtEndOfFileCheck\n    at com.puppycrawl.tools.checkstyle.api.AutomaticBean.tryCopyProperty(AutomaticBean.java:238)\n    at com.puppycrawl.tools.checkstyle.api.AutomaticBean.configure(AutomaticBean.java:191)\n    at com.puppycrawl.tools.checkstyle.Checker.setupChild(Checker.java:458)\n    ... 27 more\nCaused by: java.lang.reflect.InvocationTargetException\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:498)\n    at org.apache.commons.beanutils.PropertyUtilsBean.invokeMethod(PropertyUtilsBean.java:2127)\n    at org.apache.commons.beanutils.PropertyUtilsBean.setSimpleProperty(PropertyUtilsBean.java:2108)\n    at org.apache.commons.beanutils.BeanUtilsBean.copyProperty(BeanUtilsBean.java:437)\n    at com.puppycrawl.tools.checkstyle.api.AutomaticBean.tryCopyProperty(AutomaticBean.java:228)\n    ... 29 more\nCaused by: java.lang.IllegalArgumentException: unable to parse ct\n    at com.puppycrawl.tools.checkstyle.checks.NewlineAtEndOfFileCheck.setLineSeparator(NewlineAtEndOfFileCheck.java:100)\n    ... 37 more\nCaused by: java.lang.IllegalArgumentException: No enum constant com.puppycrawl.tools.checkstyle.checks.LineSeparatorOption.CT\n    at java.lang.Enum.valueOf(Enum.java:238)\n    at com.puppycrawl.tools.checkstyle.checks.NewlineAtEndOfFileCheck.setLineSeparator(NewlineAtEndOfFileCheck.java:96)\n    ... 37 more\nto\ncom.puppycrawl.tools.checkstyle.api.CheckstyleException: cannot initialize module com.puppycrawl.tools.checkstyle.checks.NewlineAtEndOfFileCheck - Cannot set property 'lineSeparator' to 'ct' in module com.puppycrawl.tools.checkstyle.checks.NewlineAtEndOfFileCheck\n    at com.puppycrawl.tools.checkstyle.Checker.setupChild(Checker.java:463)\n    at com.puppycrawl.tools.checkstyle.api.AutomaticBean.configure(AutomaticBean.java:198)\n    at com.puppycrawl.tools.checkstyle.AbstractModuleTestSupport.createChecker(AbstractModuleTestSupport.java:144)\n    at com.puppycrawl.tools.checkstyle.AbstractModuleTestSupport.createChecker(AbstractModuleTestSupport.java:118)\n    at com.puppycrawl.tools.checkstyle.checks.NewlineAtEndOfFileCheckTest.testSetLineSeparatorFailure(NewlineAtEndOfFileCheckTest.java:149)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:498)\n    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)\n    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)\n    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n    at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)\n    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)\n    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)\n    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)\n    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)\n    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)\n    at org.junit.runners.ParentRunner.run(ParentRunner.java:363)\n    at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)\n    at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\n    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:538)\n    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:760)\n    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:460)\n    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:206)\nCaused by: com.puppycrawl.tools.checkstyle.api.CheckstyleException: Cannot set property 'lineSeparator' to 'ct' in module com.puppycrawl.tools.checkstyle.checks.NewlineAtEndOfFileCheck\n    at com.puppycrawl.tools.checkstyle.api.AutomaticBean.tryCopyProperty(AutomaticBean.java:238)\n    at com.puppycrawl.tools.checkstyle.api.AutomaticBean.configure(AutomaticBean.java:191)\n    at com.puppycrawl.tools.checkstyle.Checker.setupChild(Checker.java:458)\n    ... 27 more\nCaused by: java.lang.reflect.InvocationTargetException\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:498)\n    at org.apache.commons.beanutils.PropertyUtilsBean.invokeMethod(PropertyUtilsBean.java:2127)\n    at org.apache.commons.beanutils.PropertyUtilsBean.setSimpleProperty(PropertyUtilsBean.java:2108)\n    at org.apache.commons.beanutils.BeanUtilsBean.copyProperty(BeanUtilsBean.java:437)\n    at com.puppycrawl.tools.checkstyle.api.AutomaticBean.tryCopyProperty(AutomaticBean.java:228)\n    ... 29 more\nCaused by: java.lang.IllegalArgumentException: No enum constant com.puppycrawl.tools.checkstyle.checks.LineSeparatorOption.CT\n    at java.lang.Enum.valueOf(Enum.java:238)\n    at com.puppycrawl.tools.checkstyle.checks.NewlineAtEndOfFileCheck.setLineSeparator(NewlineAtEndOfFileCheck.java:95)\n    ... 37 more\nNo regression can be given for this type of change.. This has to be reverted.. Done.. @pbludov This won't work.\nFor import java.* FullIdent will return java.* instead of java which is what this change requires. It must also return java.Class for import java.Class.\nWe can't add star checks to this method because we already ensure it is not a star import before calling this method. We probably wouldn't clear code coverage.\nThis section doesn't seem suitable for FullIdent.. This area is weird.\n>= showed no differences in regression.\nIf I removed entire if/else and replaced it with resultNode = tokenAfterLast;, regression showed no differences again.. > you want lazy loading, data is created only when it is needed\nYes that is correct.\n\nI can check these approaches with 5820 \n\nThat is fine.. Verified. You have enough tests. Thanks.. Taken from Javadoc:\n\nThis filter processes {@link TreeWalkerAuditEvent}\nobjects based on the criteria of files, checks, message, module id, xpathQuery.\n\nYou say method or variable when it should be like javadoc, checks, message, module id, and xpath.\nAlso some of my points were missed from https://github.com/checkstyle/checkstyle/pull/6172#discussion_r240048432 .\n\nXpathFilter isn't visible to users, SuppressionXpathFilter is so it would make more sense to users to mention that filter instead of internal one.\n\nMy original complaint was I didn't want the technical text in the first sentence. I didn't mean for it all to be removed. Start the users off slowly with easy talk, then as they grasp a basic understanding start making it more complex.. Based on current code, all fields are optional. This is because you are bypassing the required checks that are in another class and are not in XpathFilter.\n@romani Is this ok, or do we want to enforce required fields?. files isn't a comma separated field, it is a regular expression. Please fix this example.\nI would recommend testing your examples to make sure they are valid if you are unsure.\ninside FileOne ane FileTwo classes => inside FileOne ane FileTwo files.\nI see you copied this from somewhere else, but it is wrong too. Please update it too.. I would be slightly more specific in these situations.\nsuppress checks for package definitions => suppress checks for all package definitions.\nSince there are no files specified, it will suppress all package nodes in all files.. @romani That is correct. Only stack trace.\nIt basically amounts to this section being removed:\nCaused by: java.lang.IllegalArgumentException: unable to parse ct\n    at com.puppycrawl.tools.checkstyle.checks.NewlineAtEndOfFileCheck.setLineSeparator(NewlineAtEndOfFileCheck.java:100)\n    ... 37 more\nWe still have\nIllegalArgumentException: No enum constant com.puppycrawl.tools.checkstyle.checks.LineSeparatorOption.CT\nand\nCaused by: com.puppycrawl.tools.checkstyle.api.CheckstyleException: Cannot set property 'lineSeparator' to 'ct' in module com.puppycrawl.tools.checkstyle.checks.NewlineAtEndOfFileCheck.. I don't see anywhere where we are keeping these rules. If they are important, I feel they shouldn't be removed.. Properties should start with a singular verb. This is because the setter will request the same wording with Setter to  appended to the front.\nSetter to list of order... doesn't sound right.\nExample: Allow to skip... with setter being Setter to allow to skip...\nPlease relook at the other properties.. original had &quot; instead of \" in pre tags. Other checks we have done use &quot; so I think we should stick with it unless you have some complaint.. Same, this looks like a list of rules or notes for the check.. @romani I mean the description of the properties.\nWith the realignment of the javadocs, I also updated the first word of the property's descriptions because we use the same description for the setter.. change Checks violations in the specified file, class, method or variable => Checks violations in the specified file, class, checks, message, module id, and xpath.\nThis is what you wrote in the Javadoc, so it should be the same in the XDoc. There is no property method/variable, so the way the XDoc was written was slightly misleading.. Done.. Done.. @romani If by remove, you mean remove the 1 expression completely and leave the other one alone, then remember our discussion at https://github.com/checkstyle/checkstyle/pull/6067#commitcomment-31612386 . These expressions are double validated and must remain there unless we change test.. @pbludov I didn't notice in the xdoc there was a Rule Description. http://checkstyle.sourceforge.net/config_imports.html#CustomImportOrder_Rule_Description\nTo me, it make sense to have the xdoc/javadoc utility to automatically bring this section in to the javadoc description so we don't lose its separation in the xdoc.\nThis sound ok?. See new comment at https://github.com/checkstyle/checkstyle/pull/6288#discussion_r243068905. @pbludov The description for this property didn't change, nor do I see changes for ones that start with RegExp.\n\nProperties should start with a singular verb. . Somehow this mutation is still suriving.\nhttp://rveach.no-ip.org/checkstyle/regression/pitest-reports/29/coding/com.puppycrawl.tools.checkstyle.checks.coding/EqualsAvoidNullCheck.java.html#org.pitest.mutationtest.report.html.SourceFile@6fd6c5ab_487\n2. Replaced integer addition with subtraction \u2192 SURVIVED. This is removed because the result doesn't matter. With this line removed, the isSamePackage at line 236 would pick it up. Both are almost duplicating the same logic in different ways. The only way this could possible stay is if the class we are looking for is in a different package, but if this was the case, we would need an import statement. This is all about if an import isn't given.\n\nThis also removes the deprecated class loading.. I couldn't find a way to kill this. I believe this is because the check is trying to find a newline all alone, and ending new lines are placed as a child of the last tag.. why isn't li part of list since you made the separation?. I don't see this added in anywhere, is it not needed?. Same here.. > We cannot avoid creating children nodes\nLazy initialization isn't about not creating the nodes, it is about putting the creation at another time. We have stackoverflow because we are doing too may createChildren at once, all chained together. As long as we do 1 create and not chain others in it, then stackoverflow should be resolved. It is the difference between a for loop and a recursive call. We have a recursive call now which I hope we can turn into a for loop of some kind.\nRegardless, this out of the scope of this PR and will be done in the other issue. Lets finish this PR.. while loop was changed to for loop, which is not really a change.\nCondition was removed as we always exit the loop before reaching the end. If this was not the case, we would eventually get an out of index exception.. This was removed and a break was put in instead.. Same.. Same.. Super method did nothing, so calling it isn't needed.. beginProcessing is only called at the start of execution before we even begin processing a file. We only use 1 instance per execution, and create a new instance at the next execution, so there is nothing to clear at the start.. We only care if there is a tag or not and don't do anything special if count is 1 or more, so this was changed to a boolean.. Same.. Inline tags don't contain a text only it's children do, so this check was unnecessary.. We always break before the end, so this check was removed. If this was not the case, we would eventually get an out of index exception.. We clear the cache in the begin tree and the finish tree. I see no reason we need both and it is more important we clear it on the begin. So I removed this.. This code was rechanged due to something found in regression.\nNot sure why it was missed before.. This was changed because of a code style violation.. This was just changed to a for loop and doesn't amount to any change. Pitest sometimes works better with for loops. See https://github.com/checkstyle/checkstyle/issues/5673#issue-310245227 .. The original while loop condition could never be hit, we will always find the end.\nOriginally, this and getMultilineArgTags was very similar code. We could keep the other method the same without changing it because it could accept a javadoc that was only 1 line long and could try to go beyound the lines limit.\nThis one can't do the same because of the regular expression used to match javadocs.\n\n^\\s*(?>\\*|\\/\\*\\*)?\\s*@(return|see)\\s*$\n\nBecause of the $ on the end, this expression guarantees that there will be another line in the javadoc and doesn't end with */. Another expression and method is used if it does end with */, so we can never reach the limit of the lines here.\nIf this was not the case, we would eventually get an out of index exception and regression shows none.. The javadoc:\n/** {@code test} */\nproduces:\n|  |  |--BLOCK_COMMENT_BEGIN -> /* [2:0]\n    |  |  |  |--COMMENT_CONTENT -> * {@code test}  [2:2]\n    |  |  |  |  `--JAVADOC -> JAVADOC [2:3]\n    |  |  |  |      |--TEXT ->  [2:3]\n    |  |  |  |      |--JAVADOC_INLINE_TAG -> JAVADOC_INLINE_TAG [2:4]\n    |  |  |  |      |  |--JAVADOC_INLINE_TAG_START -> { [2:4]\n    |  |  |  |      |  |--CODE_LITERAL -> @code [2:5]\n    |  |  |  |      |  |--WS ->  [2:10]\n    |  |  |  |      |  |--TEXT -> test [2:11]\n    |  |  |  |      |  `--JAVADOC_INLINE_TAG_END -> } [2:16]\n    |  |  |  |      |--TEXT ->  [2:17]\n    |  |  |  |      `--EOF -> <EOF> [2:18]\n    |  |  |  `--BLOCK_COMMENT_END -> */ [2:16]\nAs shown, JAVADOC_INLINE_TAG's text is just JAVADOC_INLINE_TAG and not the text test.. An enum can't be a top class and have static modifier. It won't compile.\nThis check may prevent some excess computations from happening since we know it can't be possible. Should we still remove this check? The only way to kill it would be to use powermock to count calls to checkForRedundantModifier.\n. We are specifically looking for the annotation Override and only want to examine annotations in a list of children from the modifiers. Since modifiers can only contain annotations and modifiers, it is not possible to have a non-annotation with the text Override, so the check isn't necessary.\nAnother case of preventing doing more work then necessary.. Same as Abbreviation's reasoning.. ScopeUtil.isInAnnotationBlock was the one that was surviving, however this is just because the next check was doing InterfaceOrAnnotation which was duplicating the same check. It is basically the same as writting A || (B || A) which just equates to A || B which is what the code was re-written to.. lastNode is only used on the very last node. In our case this is either package or class/enum/interface.\nEvery last node in these cases is always the greatest node, so this is why it can be removed.\nRegression showed no differences.. Originally I thought this couldn't be right, but it does work out.\nif toVisit is null, curNode is always replaced with the parent and the loop goes again.\nif toVisit isn't null, it doesn't matter if curNode is replaced, the loop is broken and curNode is replaced again with toVisit.\nRegression shows no differences and I ran it 3 times.. There is no way to regression on this, so I can't find a case to keep this.. I don't fully agree with this change, but it doesn't harm anything and there is no way to kill it without using a good bit of reflection, as it is in a nested private class.\nThe whole point of this code is get the class name from an import and add it to the map. We want to skip over * imports but not skipping it just adds a star as a class name to the map. Class names can't have a star, so it is never retrieved from the map and we don't do anything with anything left over in the map.. This basically amounts to a no change. The if statement was surviving, removing it meant we always went through the patterns even if we already knew the others already said what the answer is. Moving it to another method and chaining it to the &s allowed it the code to basically stay as it is.\nWe'll see if this comes back in a future check.. If we know the grandparent is an elist, then the parent can only be an expression. So checking for it is pointless and can't be killed.. Inside hasAnnotations the check for having an annotation is redundant as checkAnnotations already has another check for only working on annotations.. This is a minor change splitting the A && B into 2 separate if statements for the next change.. trailingArrayComma == TrailingArrayComma.NEVER was removed because we are already check that the field can only be 2 of 3 possible values (since it is an enumeration) before this method is called. Since we have the check outside this method, this extra one inside was unnecssary and hence why it was removed.. Same.. Same.. Branch contains is very powerful hence why we are trying to remove it.\nWe already know this is an annotation with a parenthesis, and branch contains scans the entire children and sub-children of the annotation so of course the annotation will have an expression if it has a member value pair hence why this is redundant.\nRegression showed no differeces to try and keep this.. If statement wasn't doing much as we have a for loop below on the same tokens and it won't do anything on an empty array, so the only thing we gained by keeping this check was preventing the sorting of the default tokens.. This null check surrounds processIter which has it's own null check too. So the outer one is redundant.. If the map didn't contain the token, it would return null anyways which is the default result of this method, so having the containsKey check doesn't really do us anything.. Same.. Same reason as previous profiles, it doesn't hurt us any to always assign curNode.. This is a partial revert of commit 92470b5ea48181dd1c637a7d382ede3baaf5ed85 .. We need mocking for these call counts. The methods being called are empty list safe and won't do anything on an empty list except waste time going through the entire tree.. Code was originally like:\nif (A) {\n    C\n    while (A && B) {\n        D\n        C' (C prime)\n    }\n}\nand was rewritten to be like:\nwhile (A) {\n    C'' (C double prime)\n    if (!B) break;\n    D' (D prime)\n}\nThe new C and D were reworked to assign the variables used in the original C to remove the need for C' (C prime).. This check is a duplicate of the check AbstractFileSetCheck already does.. This was removed due to a similar reason in a previous PR. This is just checking if an annotation is present before going and finding said annotation. Rest of code already handles if annotation isn't found.. This results in no change really.\nCode was originally:\nif (!A) doC;\nif (A && !B) doD;\nIt was rewritten to take advantage of the fact both use A and was made into an if-else.. Same as before. Is just making sure an annotation is there and code is already safe for if no annotation is found.. Most of this is just re-ordering the code, but some code still couldn't be killed so it was removed. I will point out the part that was removed. I believe the removals is because other methods change their results based on isCanonicalName so this is ends up why they aren't needed in the if statements.. In the original refactoring, this was else if (typeArgs == null) but I couldn't kill this so it was removed.. This change was so the star import could be killed similar to a previous PR.\nThis change ensures a.b is returned when the import is a.b.*.. I couldn't kill these and I am not sure how to best combat them, so I just removed them and regression showed no differences.. This was a check to make sure the parameters has a parameter def before going on, but the rest of the code is already safe that it won't abend if no parameter def is not found so it was removed.. See the comment to understand why CRLF was removed.. validFirst was removed because it is basically the opposite of wrongType so we don't need 2 variables to hold the same value.. Loop is already empty list safe, so the top isEmpty can be removed.. There is no way to keep this check if there is only 1 or 0 files in the bundle as this section is checking for missing keys and nothing can be missing with only 1 file.. It shouldn't matter if we already have a check to ensure missing javadocs. As long it isn't causing a conflict with another rule it should be enabled. Since you didn't mention there is a conflict, I assume this isn't the case.\nAlso as I stated at https://github.com/checkstyle/checkstyle/pull/6331#pullrequestreview-188451359 new ones should be moved below https://github.com/checkstyle/checkstyle/blob/master/config/org.eclipse.jdt.core.prefs#L73 as they will be finished in another issue.. Main shouldn't be needed just the starting # right?. A bunch of mutations couldn't be killed because the result of this method never cares about the column position returned only the line number and the line number for the new tokens returned are the same lines as the old.\nOld was returning the first token starting the line for the method definition, now it is returning the first token found which isn't an annotation.. There are no annotation fields which validate a brace being needed, so checking for default isn't needed and was removed thereby causing a bunch of code to be changed.. We don't care if it has an SLIST or not as we only want ones without SLISTs. This is showing the visitToken has a noSLISTcheck that isn't being checked first and is causing a lot of unnecessary checks in the rest of the code. I will make another PR for this after this is merged.\nThis happens quite a bit in this check.. Same.. Same.. Same.. Same.. Same.. Else and if are handled and computed exactly the same thanks to the already existingnullcheck.. Catch and finally are handled and computed exactly the same thanks to the already existingnullcheck.. This mutation was removed because the inverse is already handled byisAloneOnLine.. This became a new mutation when the other code was removed insideisSingleLineBlock. I am unsure on the exact reasoning but I believe it is because other similar code handles the same thing. I wasn't able to produce anything to keep it and regression showed nothing.\nWith this gone, I felt it best to renameisSingleLineBlocktoisRightCurlyOnSameLineAsNextToken.. I am unsure why this isn't needed and I couldn't find a case through regression.. 5. removed conditional - replaced equality check with true \u2192 SURVIVED. 3. removed conditional - replaced equality check with true \u2192 SURVIVED. 3. removed conditional - replaced equality check with true \u2192 SURVIVED. @romani The reason why I choose IAE is becauseException` is disallowed by our own configuration.\n\nTranslationCheck.java:483:9: Catching 'Exception' is not allowed. [IllegalCatch]\n\nDo you still want to continue with catching Exception and suppress violation?\nIf so, is it better to just disable this in IllegalCatch in our config? We also catch Exception in Checker.. @romani I am slightly confused, what does future else and do_while tokens have to do with determining if the current block is a single line?\nEdit: It is looking for next part of the chain, like if/else and do/while. If this is the case, why isn't try/catch/finally listed here? Also it looks like we are saying the nextToken isn't always correct.\nShouldn't this logic be placed inside getDetails instead of this section? Why is it only an override for isAloneOnLine?. Moving while (nextToken.getType() == TokenTypes.LITERAL_ELSE) { into getDetails only produces 1 test failure.\n\nInputRightCurlyLineBreakBefore.java:22:17: '}' at column 17 should be on the same line as the next part of a multi-block statement (one that directly contains multiple blocks: if/else-if/else, do/while or try/catch/finally). expected:<0> but was:<2>\n\nWhile new violation is wrong, I am not seeing why a full if-else-if-else chain is needed to tell if the first } is alone on the line.. Regression provided no benefits of this line.. Regression provided no benefits of this line.. If the other 2 lines are removed, then this line can stay.. Examining the tests, there are only 2 instances this while loop changes the nextToken.\n1)\nhttps://github.com/checkstyle/checkstyle/blob/ecd1b65bd63546d1245b6415759c3c2d1e2b77a4/src/test/resources/com/puppycrawl/tools/checkstyle/checks/blocks/rightcurly/InputRightCurlyAloneOrSingleline.java#L69\nNext token is changed from else[69x30] to if[70x8]. The option is alone or single line.\nWithout the production code, there will be a violation at 69:29 saying its not alone.\n2)\nhttps://github.com/checkstyle/checkstyle/blob/6a16499e5f5125ca7c6b2d9b554a7a44a65d5a2e/src/test/resources/com/puppycrawl/tools/checkstyle/checks/blocks/rightcurly/InputRightCurlyAloneOrSingleLine2.java#L53\nNext token is changed from else[53x28] to java[55x8]. The option is alone or single line.\nWithout the production code, there will be a violation at 53:27 saying its not alone.. Maybe what is confusing me is that nextToken can be the next part of the chain (if-else) or it can be a separate statement (if (true) { } int a = 0;).\nWith the current code, if (true) { return; } else { } is considered a single line block, but as soon as you add something else to the end if (true) { return; } else { } int a = 0; it isn't a single long block anymore.\nIt seems to me, this checking of something on the end after the chain should be in a separate method check.\n@romani Does this seem right?. > Can we catch all in Checker and continue with next file? \nCurrent catch in checker is during normal processing. Exception in Translation is happening during finishProcessing since it is doing multi-file check work, where there isn't any catch block at all. Even if there was a catch block, it wouldn't tell us the file being processed since Translation is processing its own set of files as a multi-file check.. @romani So I assume you want me to still change to catch Exception and suppressing violation?. Reworked conditionals to kill mutation. Both sections end with rcurly so I put that at front and simplified the allowNoEmptyLineBetweenFields || !allowNoEmptyLineBetweenFields.. Condition was removed because the for loop does the same test before starting the loop.. flag can be killed because we break the loop when it is turned true so this condition is pointless.. If the parent is a default/case then the ast can only be a colon.. If the parent is a default/case then the ast can only be a colon.. This was surviving and regression show no way to keep it so I am removing it. We are trying to remove branchContains anyways, so I see no reason to try and look into it more.. Changing other method for mutation required this to be changed as well when regression was run.. the if statement above the recursive call means either changing this to a do-while or removing the if-siblingCount check.\nI changed this to a do-while.. One condition inside isPrecededBy  and isSpace were doing the same check so I moved the surviving condition out and placed it in this method.. If the parent is instance_init, then the child can only be an slist.. same.. No way to find something that wasn't a rightcurly and the previous sibling was a left curly.. Regression couldn't find me anything to work with.. if main type is rcurly and first child of parent is again said rcurly, then parent has to be slist.. Regression couldn't find me anything to work with.. Conditions inside this if ensures this is the semi without checking for it.\nRegression couldn't find me anything to work with.. Regression couldn't find me anything to work with.. Regression couldn't find me anything to work with.. If we know we are on method/def and current token is generic, then the token inbetween cant be anything other then type parameters.. Same argument here.. This was to kill this mutation: http://rveach.no-ip.org/checkstyle/regression/pitest-reports/30/pitest-whitespace/com.puppycrawl.tools.checkstyle.checks.whitespace/EmptyLineSeparatorCheck.java.html#org.pitest.mutationtest.report.html.SourceFile@7d2fc711_570\nJavadocUtil.isJavadocComment doesn't re-check if the AST given to it is actually a javadoc or not. All the utility does is ensure the text of the AST given to it starts with a *. To kill the mutation, I had to give it a block comment that starts with * in a package-info file to show it that it shouldn't treat everything as a javadoc and kill the mutation.. This was to kill this mutation: http://rveach.no-ip.org/checkstyle/regression/pitest-reports/30/pitest-whitespace/com.puppycrawl.tools.checkstyle.checks.whitespace/EmptyLineSeparatorCheck.java.html#org.pitest.mutationtest.report.html.SourceFile@7d2fc711_422\nBrief: To meet the conditions, we need a package with a annotation that is stored in a file that isn't package-info.java .\nSpecifics: The rest of the conditions in the method have to be met except for the line that is the surviving mutant. Child count of 0 is because there is only 1 annotation, which is the first child of the package definition, and it has no empty line or javadoc before it. Package must also be on line 2+. The mutation's condition has to be it's inverse to satisfy killing the mutation, so it must be a file that isn't package-info.java. This is what came up when I did a regression search as we have a similar file checkstyle elsewhere.\nFile isn't compilable because only package-infos can have annotations and we need this to be a non package-info file.. Done.. Done.. Done.. Done.. I know other Checks catch and log a violation with this, but we should just wrap the exception in a CheckstyleException and re-throw it.\nJust make sure re-throwing it still has the file name in the stack trace when Checker catches it.. Please remove commented code.. How reliable is this at finding the line number?\nWhat if my key was a and I had a bunch of values before a= that had a in it? Is it possible it won't pick the right line?\nCan keys be multi-line like values?\nIf the same key is used twice, it will report the wrong line.\nIf this isn't reliable, we shouldn't use it as people will just complain of false line numbers.. No author tags.\nAlso add your check to https://github.com/checkstyle/checkstyle/blob/master/src/test/java/com/puppycrawl/tools/checkstyle/internal/XdocsJavaDocsTest.java#L70 and align it with the xdoc you have written.. Why are equals and hashcode needed? If there is a violation we can just suppress it like UniquePropertiesCheck does.. I don't think the : is needed. Violation should be a complete sentence and not 2 separate thoughts.\nnot in right order with previous property => not in the right order with the previous property. Tests don't need javadocs.\nI would remove them all except for any reflection that needs to be done.. This test shouldn't be needed since it outside the scope of your class.. Why can't this use an input file instead of hacking the check?. Why can't this use an input file instead of hacking the check?. I assume this can go away if the equals/hashcode method is gone too.. Split this into 2 lines.. Please expand this section with examples of good order and violations.. sorted should be expanded upon.\nDescending order is still sorted, etc.. . This check doesn't care about number of occurrences, right? So this comment seems pointless.. You don't see something wrong with this line?. Which CI gave you the violation that you needed equals/hashcode? Suppression is dependent on who is requiring it.. I don't see any changes yet, but I would start off easy before going into difficult examples. You are trying to introduce users to your check and how violation works.. > update javadoc for this token http://checkstyle.sourceforge.net/apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#TYPE_EXTENSION_AND to have example of AST.\nNo example AST.. Why was ^ removed? I believe this has some effect on the hierarchy of the AST.\nCan you show the difference with the ^ added on InputRegressionJavaTypecastAst before finalizing on making the change.. > & is just a separator for a list of types.\nComma separated lists like arrays and list of implements in class also don't have a hierarchy in AST. so I am fine with leaving it like this.. @pbludov \n\nBy the way, for the extends there is no hierarchy either. \n\nPlease add an example to grammar tests, I am not seeing one.. You don't see something wrong with this line too?. @pbludov You said & is like a list.\nWould this list be T extends c3<T> and i1? Or is it c3<T>  and i1 and both are children of T extends?. This is probably a different issue, but based on my previous question, it seems to me c3 and <T> should all be under 1 node and not combined with the TYPE_EXTENSION_AND.\nI would expect something similar to TYPECAST:\nTYPE_UPPER_BOUNDS -> extends [43:11]\n   |-- TYPE\n   |   |-- IDENT -> c3\n....\n   |-- TYPE_EXTENSION_AND\n   |-- TYPE\n   |   |-- IDENT -> i1. @romani This whole issue is about changing the AST structure. This item is just confirming what is list and what is child/parent relationship.. @pbludov ping. 3 tokens removed are because they technically aren't frames.\nYou can't declare a variable inside an if statement or in an if statement condition.\nWhat starts a new frame is a { and not the if itself.\nRegression shows there are no differences from this action.. This is just a re-ordering of the code so ==s are first and then !=s.. This is again just a re-ordering of old code and moving it to a separate method.. This is needed because the current code needs the class fields and methods on CLASS_DEF frame and not the OBJBLOCK frame.. SLIST is only a new frame if it has the curly. This is because switches have an SLIST with no brace in it and variables declared inside the switch are available to the entire switch, not just 1 case.. This is to prevent some NPEs where parameters had no IDENT but this.\nSee test cases for example.. Since you are changing google_checks, please clarify which item in the google style guide says new tokens are ok.. @pbludov @romani Any reasons why these shouldn't be default?. removed conditional - replaced equality check with true \u2192 SURVIVED. removed call to com/puppycrawl/tools/checkstyle/api/DetailAST::getPreviousSibling \u2192 SURVIVED\nNote: return value is replaced with null in this situation. removed conditional - replaced equality check with true \u2192 SURVIVED. removed call to com/puppycrawl/tools/checkstyle/api/DetailAST::getNextSibling \u2192 SURVIVED\nNote: return value is replaced with null in this situation. > [checkstyle] [ERROR] /home/travis/build/checkstyle/checkstyle/src/xdocs/writingjavadocchecks.xml.vm:101: Line should not be longer then 100 symbols [RegexpSingleline]\nPlease fix this.\nPlease keep number of commits as 1.. @romani These packages aren't set up for these pitest mutators at the moment. I added the mutators locally and ran the report. This specific mutator I am still trying to work through in https://github.com/checkstyle/checkstyle/issues/6320 .\nI specifically asked for help from timurt for this package. See https://github.com/checkstyle/checkstyle/issues/6320#issuecomment-450595470. If you want to do that, I am fine with it.. @jack870131 Yes.. @jack870131 See http://checkstyle.sourceforge.net/config.html#Id . @romani @pbludov Secondary inputs can be placed in a special folder that will be skipped from validation and allowed to be named anything you want.\nSee https://github.com/checkstyle/checkstyle/blob/a73ff0890c27cbe8affc1a55f2710a231687bd85/src/test/java/com/puppycrawl/tools/checkstyle/internal/AllTestsTest.java#L258-L259 .\n@romani Is this acceptable and you want a specific folder name? Other areas have used inputs.. Yes I added this test for pitest. All tokens should be added.. A few lines up has the following text:\n\nNote: a suppression filter is needed because\n IDEA has no blank line between \"javax\" and \"java\".\n\nSince it is converted to SuppressionXpathSingleFilter the text needs to be updated.. This change doesn't make sense. It is modifiers or annotation, yet previous name or new name just picks 1 side.\nCan we just rename this to node?. modifier node => node. The reasons for the new tokens should be the same as https://github.com/checkstyle/checkstyle/pull/6380#discussion_r248938124. @romani This check is in google config and we added them as defaults. Will this cause an issue like in https://github.com/checkstyle/checkstyle/issues/6381#issuecomment-455003077 ?. @timurt I don't think we were expecting a mutator to be added in this PR.\nI am also seeing some other new changes that look like they are connected to this mutator.. >  timurt force-pushed the timurt:6356 branch from a748966 to 7f091d0 8 hours ago\nRootNode changes were added that weren't there before.\nXpathQueryGenerator changes are expected.\nMainTest got a new testNoXpathQuery. not sure if it is related.\nXpathFileGeneratorAuditListenerTest got a new testCloseStream and testNoCloseStream. not sure if they are related.\nElementNodeTestgot a newtestGetAttributeValue,testGetAttributeValueWrongAttribute,testIterateAxisEmptyChildren,testIterateAxisWithChildren`. not sure if they are related.. The enclosing clss name doesn't have numbers or underscores, so I don't see why the original example configuration need to be changed. The new addition of the format property could be removed.. Same here only because it is the counter and it doesn't need excess changes over the original.. If there are no rules pertaining to package then the token can't be added to the required. Default is ok as long as google config doesn't use the default list, which it doesn't.\nFor ENUM_CONSTANT_DEF, should we treat this as a field under the rules? To me it makes sense. @romani Do you agree?\n\nThe google style is very ambiguous:\n\nYep. :). @pbludov This is not done.. I think I am missing your point. The property allowClassName allows the method name to be the same as the class. format is completely ignored in this situation.\nWouldn't a format property that doesn't match the class naming convention show more that allowClassName is overriding the format? Your example says no violation. If allowClassName was off or class name is different, there would be a violation.. Since you won't show other examples of the apply in the configuration, I think we should just expand the code example to all types.\nPlease add a package-private method too.. IMO, this looks too closely to allowClassName since your methods are named similar to the class name. Please choose different names, and maybe something other then 1, 2, 3, ..... member => methods. @pbludov For this item, just add the reasons for not adding the tokens to the google config in the test.. You set assigned, but what about the field alreadyAssigned? Does it matter that this field stays false?. I see, thanks for the explanation.. If you don't want the text on the first page, that is fine with me, but the text in the original place doesn't really make sense for a person who just wants to learn about our tool.\n\nOK, so you have written your first Check, and you have found\n\nSomeone coming from the front page won't have written a check and is just starting to learn about Checkstyle. If put a link on the front page, I think the text should be updated so it can be used by both people who are just learning about Checkstyle and those that are trying to dig deep into it.. This line in pitest report said MEMORY_ERROR for negated conditional.. This throw isn't needed because option can never be set to illegal value as it is controlled by the enum in the setter method.. These cases were relying on the IllegalStateException before. Now that that code is gone they are surviving.. IllegalStateException still occurs if we pass option in as null.. @romani Yes I am ok with it.. I also don't see any examples like Test[][] getNewTest(). Also add one like Test[] getNewTest()[].. Java code with violation and ok messages should be in Examples section.\nYou can view some of our naming checks to see how we are re-building our examples.. the style of => only Java style for.\n: => .\nMake similar update to javadoc.. @romani Please confirm.\n@esilkensen If logic is changing, documentation also needs to be updated again.. full list => the full list of limitations\nI think only the word limitations should be linked.. only few of limits => only a few limits\nCheckStyle => Checkstyle. @esilkensen @romani I am ok. It sounds like we are reverting back to the first instance of this PR where all []s on method name are forbidden.. This can't throw an exception right?\nSince I am moving it out of the try/catch block I just want to be sure it won't cause any problems.. Then I will have to add another try/catch as if any of these exceptions occur file being processed will be hidden.. I looked at the source for file.getAbsolutePath and the security exception does throw the path in it.\n/* Don't disclose the drive's directory in the exception */\n                    throw new SecurityException(\"Cannot resolve path \" + path);\nand even the last resort has:\nthrow new InternalError(\"Unresolvable path: \" + path);\nI moved the method call back in the try/catch and added support for null file names.. These should not be listed here. Most are package-private and they don't extend AutomaticBean.\nI will make another PR after this one to remove them.. Reword to:\nThis check strictly enforces only Java style for method return types regardless of the value for 'javaStyle'.\nPlease also add explanation that this is because C doesn't compile methods with array declarations on the method name.. This goes back to my previous comment at https://github.com/checkstyle/checkstyle/pull/6428#discussion_r257478748 ,\n\nJava code with violation and ok messages should be in Examples section.\n\nI am fine with a small example in this section, not stating violation/ok, like was done above with main method.. > C functions can't return arrays\nWording sounds weird. Functions can return arrays, they just can't be written with the array declaration on the method name.. Make sure this mirrors javadoc completely.. This sounds like this should be in description and not down here in examples. See other note.. This was the reason for the failure.\n~checkAssertionAfterwards must execute before expectSystemExitWithStatus. When checkAssertionAfterwards fails it throws an AssertionException and this probably triggers another System.exit which then expectSystemExitWithStatus catches and tries to match against thinking it came from the main code.~. According to ExpectedSystemExit it checks system exit before the output assertions.. @romani Somehow powermock is again interfering when the junit results in this case. Removing the powermock annotations, I get the following junit failure:\n````\n[INFO] Running com.puppycrawl.tools.checkstyle.MainTest\n[ERROR] Tests run: 73, Failures: 2, Errors: 0, Skipped: 0, Time elapsed: 5.611 s <<< FAILURE! - in com.puppycrawl.tools.checkstyle.MainTest\n[ERROR] testJacocoWorkaround(com.puppycrawl.tools.checkstyle.MainTest)  Time elapsed: 0.035 s  <<< FAILURE!\njava.lang.AssertionError: Unexpected call of System.exit(-1).\n[ERROR] testNonExistentOutputFormat(com.puppycrawl.tools.checkstyle.MainTest)  Time elapsed: 0.25 s  <<< FAILURE!\norg.junit.ComparisonFailure: \nUnexpected system error log expected:<...': expected one of [[xml, plain]] but was 'xmlp'\nUsa...> but was:<...': expected one of [[XML, PLAIN] (case-insensitive)] but was 'xmlp'\nUsa...>\n    at com.puppycrawl.tools.checkstyle.MainTest.lambda$testNonExistentOutputFormat$7(MainTest.java:294)\n```\nI can only assume powermock is trying to take this exception as it's own and mangle it in the process..if (!(keyList.contains(key))) {=>if (!keyList.contains(key)) {.\"\\u00C3\\u00A4\"=>\"\u00c3\u00a4\".properties.keys();=>properties.keySet().iterator(). lowercase@throws`. > 173: keyList Non-serializable field 'keyList' in a Serializable class \nThis inspection may have to be suppressed.. > +OrderedPropertiesCheck.java.html:<td class='covered'><pre><span  class='survived'>        setFileExtensions(&#34;properties&#34;);</span></pre></td></tr>\nThis one is easy. Add a test where the file given has a .java extension and the file contains very basic java class. It should produce no violations/exceptions.. > +OrderedPropertiesCheck.java.html:<td class='covered'><pre><span  class='survived'>            if (!(keyList.contains(key))) {</span></pre></td></tr>\nOne of your tests must have a property file with a key that appears twice in the file. Since you remove duplicate keys, you must show that the 2nd instance of the key won't produce a violation if it is also out of order like the 1st instance.\nLet me know if you need more specific help for this one.. Then you will have to suppress the inspection.. These are ok since they use reflection and not byte code hacking.. Can't tag the class for powermock since it is package private.. Can't tag the class for powermock since it is package private.. @romani For whatever reason, this test doesn't pass when moved. I have no clue what the issue is as the code is exactly the same. It generates in an NPE in picocli when processing OutputFormat format in Main. We may just have to remove this test and lose 1 line of code coverage.\njava.lang.NullPointerException\n    at picocli.CommandLine$Model$ArgSpec.<init>(CommandLine.java:5111)\n    at picocli.CommandLine$Model$ArgSpec.<init>(CommandLine.java:5016)\n    at picocli.CommandLine$Model$OptionSpec.<init>(CommandLine.java:5707)\n    at picocli.CommandLine$Model$OptionSpec.<init>(CommandLine.java:5689)\n    at picocli.CommandLine$Model$OptionSpec$Builder.build(CommandLine.java:5827)\n    at picocli.CommandLine$Model$ArgsReflection.extractOptionSpec(CommandLine.java:6644)\n    at picocli.CommandLine$Model$CommandReflection.initFromAnnotatedTypedMembers(CommandLine.java:6505)\n    at picocli.CommandLine$Model$CommandReflection.initFromAnnotatedFields(CommandLine.java:6483)\n    at picocli.CommandLine$Model$CommandReflection.extractCommandSpec(CommandLine.java:6386)\n    at picocli.CommandLine$Model$CommandSpec.forAnnotatedObject(CommandLine.java:3762)\n    at picocli.CommandLine.<init>(CommandLine.java:185)\n    at picocli.CommandLine.<init>(CommandLine.java:164)\n    at com.puppycrawl.tools.checkstyle.Main.main(Main.java:103)\n    at com.puppycrawl.tools.checkstyle.internal.powermock.MainPowerTest.testJacocoWorkaround(MainPowerTest.java:72)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:498)\n    at org.junit.internal.runners.TestMethod.invoke(TestMethod.java:68)\n    at org.powermock.modules.junit4.internal.impl.PowerMockJUnit44RunnerDelegateImpl$PowerMockJUnit44MethodRunner.runTestMethod(PowerMockJUnit44RunnerDelegateImpl.java:326)\n    at org.junit.internal.runners.MethodRoadie$2.run(MethodRoadie.java:89)\n    at org.junit.internal.runners.MethodRoadie.runBeforesThenTestThenAfters(MethodRoadie.java:97)\n    at org.powermock.modules.junit4.internal.impl.PowerMockJUnit44RunnerDelegateImpl$PowerMockJUnit44MethodRunner.executeTest(PowerMockJUnit44RunnerDelegateImpl.java:310)\n    at org.powermock.modules.junit4.internal.impl.PowerMockJUnit47RunnerDelegateImpl$PowerMockJUnit47MethodRunner.executeTestInSuper(PowerMockJUnit47RunnerDelegateImpl.java:131)\n    at org.powermock.modules.junit4.internal.impl.PowerMockJUnit47RunnerDelegateImpl$PowerMockJUnit47MethodRunner.access$100(PowerMockJUnit47RunnerDelegateImpl.java:59)\n    at org.powermock.modules.junit4.internal.impl.PowerMockJUnit47RunnerDelegateImpl$PowerMockJUnit47MethodRunner$TestExecutorStatement.evaluate(PowerMockJUnit47RunnerDelegateImpl.java:147)\n    at org.junit.contrib.java.lang.system.internal.LogPrintStream$1$1.evaluate(LogPrintStream.java:30)\n    at org.junit.contrib.java.lang.system.internal.PrintStreamHandler$3.evaluate(PrintStreamHandler.java:48)\n    at org.junit.contrib.java.lang.system.internal.LogPrintStream$1.evaluate(LogPrintStream.java:26)\n    at org.junit.contrib.java.lang.system.internal.LogPrintStream$1$1.evaluate(LogPrintStream.java:30)\n    at org.junit.contrib.java.lang.system.internal.PrintStreamHandler$3.evaluate(PrintStreamHandler.java:48)\n    at org.junit.contrib.java.lang.system.internal.LogPrintStream$1.evaluate(LogPrintStream.java:26)\n    at org.powermock.modules.junit4.internal.impl.PowerMockJUnit47RunnerDelegateImpl$PowerMockJUnit47MethodRunner.evaluateStatement(PowerMockJUnit47RunnerDelegateImpl.java:107)\n    at org.powermock.modules.junit4.internal.impl.PowerMockJUnit47RunnerDelegateImpl$PowerMockJUnit47MethodRunner.executeTest(PowerMockJUnit47RunnerDelegateImpl.java:82)\n    at org.powermock.modules.junit4.internal.impl.PowerMockJUnit44RunnerDelegateImpl$PowerMockJUnit44MethodRunner.runBeforesThenTestThenAfters(PowerMockJUnit44RunnerDelegateImpl.java:298)\n    at org.junit.internal.runners.MethodRoadie.runTest(MethodRoadie.java:87)\n    at org.junit.internal.runners.MethodRoadie.run(MethodRoadie.java:50)\n    at org.powermock.modules.junit4.internal.impl.PowerMockJUnit44RunnerDelegateImpl.invokeTestMethod(PowerMockJUnit44RunnerDelegateImpl.java:218)\n    at org.powermock.modules.junit4.internal.impl.PowerMockJUnit44RunnerDelegateImpl.runMethods(PowerMockJUnit44RunnerDelegateImpl.java:160)\n    at org.powermock.modules.junit4.internal.impl.PowerMockJUnit44RunnerDelegateImpl$1.run(PowerMockJUnit44RunnerDelegateImpl.java:134)\n    at org.junit.internal.runners.ClassRoadie.runUnprotected(ClassRoadie.java:34)\n    at org.junit.internal.runners.ClassRoadie.runProtected(ClassRoadie.java:44)\n    at org.powermock.modules.junit4.internal.impl.PowerMockJUnit44RunnerDelegateImpl.run(PowerMockJUnit44RunnerDelegateImpl.java:136)\n    at org.powermock.modules.junit4.common.internal.impl.JUnit4TestSuiteChunkerImpl.run(JUnit4TestSuiteChunkerImpl.java:117)\n    at org.powermock.modules.junit4.common.internal.impl.AbstractCommonPowerMockRunner.run(AbstractCommonPowerMockRunner.java:57)\n    at org.powermock.modules.junit4.PowerMockRunner.run(PowerMockRunner.java:59)\n    at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)\n    at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\n    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:538)\n    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:760)\n    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:460)\n    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:206). It seems picocli knows it is an enum, but can't find any enum constants and that is why it throws the NPE. I don't know what powermock did to the constants.. With powermock gone, the false positives went away too.. I am not getting this anymore. Weird.. Question was never answered at https://github.com/checkstyle/checkstyle/pull/6343#discussion_r245650215.\n\nHow reliable is this at finding the line number?\nWhat if my key was a and I had a bunch of values before a= that had a in it? Is it possible it won't pick the right line?\nCan keys be multi-line like values?\nIf the same key is used twice, it will report the wrong line.\nIf this isn't reliable, we shouldn't use it as people will just complain of false line numbers.. Question wasn't responded to at https://github.com/checkstyle/checkstyle/pull/6343#discussion_r245652053\nWhy can't this use an input file instead of hacking the check?. Question wasn't responded at https://github.com/checkstyle/checkstyle/pull/6343#discussion_r245652527\nWhy can't this use an input file instead of hacking the check?. This item has not been done from https://github.com/checkstyle/checkstyle/pull/6343#discussion_r245649833 .\nPlease remove commented code.. This is not a good test case since this is still a valid properties file on the inside.\nEither make this an invalid properties file or make it out of order so if it was processed there would be a violation.. Constructor isn't private so why is this needed?. Why can't this use an input file instead of hacking the check?. @esilkensen This doesn't look to fully mirror the javadoc.\nThe line above should be swapped with By default the Check enforces Java style... Sorry missed this one.\nRemove extra }.. extrnal => external. Those tests are probably dealing with a private constructor. We are working towards any reflection needs to be documented why it is needed. It is better we try to work without it. We just recently started removing powermock as it is causing issues with other tests and pitest. See https://github.com/checkstyle/checkstyle/issues/6439. This 2nd example is the exact same as the first example. Even though the config changed nothing changed between the 2 except the violation message.\nPlease add another example where with 1 config is a violation and with the other config there is no violation.. This is allowed as I am not finding an easy to use implementation of Base 16 and I am not sure how stable it would be with pitest.. I am not sure on the best way to keep these tests since these are streams we aren't creating and the class doing the flush/close is implementation specific.. Done.. @pbludov \ntoUpperCase();\n\nSince we have to specify the locale, will this cause problems for foreign languages if we specify Locale.ROOT?. @jack870131 It looks like you have an extra space for every line inside the class example.. remove 1 space from this line and every line below include the final }.. I have tracked this isEmptyBody line back to https://github.com/checkstyle/checkstyle/commit/f1dced161ab0c818f0e1e125fc5b88b71f5b171e#diff-9b2a5f9e69b254b923cb4fd7420cb9a4R187\nelse if (getAbstractOption() == RightCurlyOption.ALONE\n-                && rcurly.getLineNo() == nextToken.getLineNo()\n+                && !isAloneOnLine(details)\n+                && !isEmptyBody(lcurly)) {\n@romani It seems this was specifically requested and allowed in https://github.com/checkstyle/checkstyle/issues/1019 .\nPlease review.. Your are correct @fzdy1914 . Looking at the issue more closely, it is just introducing that option and wasn't suppose to be changing alone from what I can see. Changes were noticed in the PR at https://github.com/checkstyle/checkstyle/pull/1259#issuecomment-116502766 but were deemed good and not fully related to this issue.\nI don't see any reason why we shouldn't continue this PR.\n@romani if you are ok with everything, mark this discussion as resolved.. Sorry if my original wording was misleading, please merge these 2 methods together so it is just 1 big example. I didn't mean 2 complete isolated examples.\nExample:\n* class MyClass {\n *   void MyMethod() {\n *     for (int var = 1; var &lt; 10; var++) {} // OK\n *     for (int VAR = 1; VAR &lt; 10; VAR++) {} // violation, name 'VAR' must match\n *                                           // pattern '^[a-z][a-zA-Z0-9]*$'\n *     for (int i = 1; i &lt; 10; i++) {} // OK\n *     for (int var_1 = 0; var_1 &lt; 10; var_1++) {} // violation, name 'var_1' must match\n *                                                    // pattern '^[a-z][a-zA-Z0-9]*$'\n *   }\n * }. Same too.. I just removed the catch that wasn't being covered as it isn't really needed since the calling method also has a catch statement that caught the exception being thrown. There is nothing validating the message of the exception being thrown or anything, so it seems pointless.. Why can't you try and cover this line?\nWe are trying to kill all mutants.. Please explain this change.. This sentence should end with a period.. no indentation is intended.\nThis is the same for all similar to this. This is to help prevent hitting the 100 character line limit.. This is a generated section and cannot be modified easily.\nPlease explain why this change is needed, and if it is valid, it will also have to be updated at https://github.com/checkstyle/contribution/blob/master/releasenotes-builder/src/main/resources/com/github/checkstyle/templates/xdoc_freemarker.template#L2 .. Why the change from <source> to <div><source>?. This looks like it is from &#xa0; which is the same as &nbsp;. We should use &nbsp; since it is already whitelisted.. This is no longer re-ordered so I am assume it was resolved.. Why? Is there some place that states it is not valid? We use it already and have had no issues.. @romani ping\nAre you ok with this?. It may look neater in the source code, but it also carried through to the web page which makes the display weird sometimes if more nesting is needed. And we have add issues with line lengths as stated before.\nSee http://checkstyle.sourceforge.net/version/6.18/config_annotation.html#MissingOverride (Examples section)\nI think we would like to keep them unindented.. > wrap-content which is why it is strangely indented.\n@Vampire I didn't know thats what the wrap-content changes were for.\nHow will it handle consecutive lines? If it removes all indentation then that will cause its own issue.\nInstead of:\n<module name=\"MissingOverride\">\n  <property name=\"javaFiveCompatibility\"\n    value=\"true\"/>\n</module>\nWe will  get:\n<module name=\"MissingOverride\">\n<property name=\"javaFiveCompatibility\"\nvalue=\"true\"/>\n</module>\nWhich is not easy to read.\nIt may also make the display weird if we have a long line that we need to break apart more as it gets deeply nested. It looks like wrap-content still keeps the line breaks, so deeply nested sources will have very short lines in source and display.\nUnless you can provide another alternative, then I think what we had before works better for us.. Can you provide screenshot of how page will look with your changes? If it is no or minor difference, then I am fine.\nI would like @romani to confirm before any changes are made to contribution.. Ok thanks.\nIf there is no or minor change in display because of these 2 line changes then I am fine. Can you provide a screenshot?. Is there a reason imports need to also contain star imports?\nWhy can't line 133 be the else of line 135's if?. Violation should be the AST otherwise xpath will never be able to suppress this violation.\nIs there some way we can give it the AST?. Is there no way to do the same thing without the split and just do lastIndexOf and check for string equality that way.\nWouldn't that be faster especially then the regular expression split?. if  this code stays, you need to break the loop as soon as isEquals is false. If you don't you could have issues.\nExample: Compare a.b.c.d to a.e.c.d.\nPlease try to find a case for this and add it as a test.. Your right, didn't see the && isEquals in the for loop. I was expecting it in the body.\nThis is resolved.. Please align with the throw above.. This section looks out of place when the properties are already described first. By the time we get here, we already know about the properties and what they do.\n. Other places you have captial Check, so why was this one made lowercase? Can we have 1 style throughout the document?. Same.. Same.. Same.. @pbludov ping\nHe recommended the swap at https://github.com/checkstyle/checkstyle/pull/6504#discussion_r261920269 .\nAs long as the same code generates the same hash for the same file all the time, it doesn't matter if the hash between 2 different checkstyle versions is different.\nNo tests were failing which I thought signified it was ok to swap.. Done.. Done.. They are not equivalent hashes.\nExample:\n````\npackage com.puppycrawl.tools.checkstyle;\nimport java.math.BigInteger;\nimport java.security.MessageDigest;\nimport java.util.Locale;\nimport com.google.common.io.BaseEncoding;\npublic class Test {\n    public static void main(String[] args) throws Exception {\n        final String text = \"123456\";\n    final MessageDigest digest = MessageDigest.getInstance(\"SHA-1\");\n    digest.update(text.getBytes());\n    System.out\n            .println(new BigInteger(1, digest.digest()).toString(16).toUpperCase(Locale.ROOT));\n\n    System.out.println(BaseEncoding.base16().upperCase().encode(digest.digest()));\n}\n\n}\n````\nOutput:\n7C4A8D09CA3762AF61E59520943DC26494F8941B\nDA39A3EE5E6B4B0D3255BFEF95601890AFD80709. The hashes are equal to for me (my previous comment must have had bad code):\n````\npackage com.puppycrawl.tools.checkstyle;\nimport java.math.BigInteger;\nimport java.security.MessageDigest;\nimport java.security.NoSuchAlgorithmException;\nimport java.util.Locale;\nimport com.google.common.io.BaseEncoding;\npublic class Test {\n    public static void main(String[] args) throws Exception {\n        print(\"123456\");\n        print(\"abccd\");\n        print(\"abc123\");\n    }\nprivate static void print(String text) throws NoSuchAlgorithmException {\n    final MessageDigest digest = MessageDigest.getInstance(\"SHA-1\");\n    digest.update(text.getBytes());\n\n    final byte[] digestArray = digest.digest();\n\n    System.out.println(new BigInteger(1, digestArray).toString(16).toUpperCase(Locale.ROOT));\n\n    System.out.println(BaseEncoding.base16().upperCase().encode(digestArray));\n    System.out.println();\n}\n\n}\n````\nOutput:\n````\n7C4A8D09CA3762AF61E59520943DC26494F8941B\n7C4A8D09CA3762AF61E59520943DC26494F8941B\nE870F11205FBA85ED5633BDE34E7762DB8EDA8F5\nE870F11205FBA85ED5633BDE34E7762DB8EDA8F5\n6367C48DD193D56EA7B0BAAD25B19455E529F5EE\n6367C48DD193D56EA7B0BAAD25B19455E529F5EE\n````. You indented this line too much.. This could actually be removed. No errors show up with it removed.\nThis check doesn't prevent naming non-abstract classes with abstracting naming convention.. Unfortunately TC doesn't like this.\n\n32: LeftCurlyCheck ...</code> can be replaced with '{@code ...}' \n37: LeftCurlyCheck ...</code> can be replaced with '{@code ...}' \n147: option ...</code> can be replaced with '{@code ...}' \n151: setOption() ...</code> can be replaced with '{@code ...}' \n\nCan we use &lbrace; or &#123; instead inside the {@code }?. ImportControl and Filters are ignored because it requires an external file.. reportError has no throws clause, so we can only throw runtime exceptions here.. Duplicate case statement made unique. OK.. Made value of x unique between cases. OK.. It seems we lost the documentation of if they are the only child of a switch case..\nIt seems to me this piece of information is important looking at the code in visitToken. We should add back in.\nif (parent.getType() == TokenTypes.SLIST\n                && (!allowInSwitchCase\n                    || parent.getNumberOfChildren() != 1)) {. Minor question.\nShould we ensure @noinspection starts the line of the javadoc?. http://rveach.no-ip.org/checkstyle/regression/reports/fix-invalid-doc/releasenotes.html\nOutput looks the same. When PR is ready to be merged, we will have to create PR for other repo.\nI will this as unresolved to remind us.. http://rveach.no-ip.org/checkstyle/regression/reports/fix-invalid-doc/beginning_development.html#Before_development\nThere is a minor change here. Box shrunk compared to original. (I use firefox)\nhttp://checkstyle.sourceforge.net/beginning_development.html#Before_development\nI am ok with the shrinkage. It looks like excess space anyways that we didn't need.\nI will mark this resolved.. @Vampire \n\nBecause  must not have a class attribute.\nWhy? Is there some place that states it is not valid?\nBecause the validation of the maven-site-plugin is disabled \n\nDo you happen to know how maven-site-plugin determines what children are acceptable and which aren't? Is it a fixed list built into it's code?. My original complaint is not valid. I will leave @romani to discuss this indentation usage.\nI will mark this resolved.. I wasn't aware the changes to the styles removed the extra spaces in front.\nI also see now this wasn't done for all sources, just the wrapped content ones.\nI did however like the original no-indentation for these items. It made seeing the internal flow easier as it stood out from the actual xml. It also allowed wraps and non-wraps to have the same indentation make up so you wouldn't accidentally add the indentation to one when it shouldn't have. I also can't say I'm a fan of the &#xa0; just because it isn't a common thing I've seen.\nI will leave this up to @romani to decide on. Issue still isn't approved.. See https://github.com/checkstyle/checkstyle/pull/6530#issuecomment-472410747. @romani I understand and accept the other changes, but why do these fields need to be public now?. Sorry I missed that.. Done.. This file was copied from JavadocTypeCheck from which the check was split from. Since the old check had, I made the new one have it.\nI literally split the check into 2 and duplicated the tests, except for any additions I had to make for pitest. My thought was if the old check had it, why wouldn't the new one have it too?. Done. Missed the 1.. @romani issue created identified the underlying issue, which is an issue with OutputStreamWriter and I think we need to convert it to PrintWriter.\nhttps://github.com/checkstyle/checkstyle/issues/6560#issuecomment-471722744. I agree which is why I dug up the underlying issue. I can fix up the issue to make it clearer.. Done.. Original check verified author which is why this is in the examples. I removed them since this check doesn't mind them/\n\nCan we make inputs in our new Input format ?\n\nI will do the best I can but we use the same input with different configs sometimes, so it is not always cut and dry warn.. Done.. Only 3 files could changed. The rest use the file more then once and have different violations.\nLet me know if there is anything else you want.. This is slightly confusing as we are calling a AloneOrSinglelineOption method when the option is really same. If we are using this method with a new option, then the method name should be renamed.\nAlso this is now the same code as alone_or_singleline so why don't we just merge the 2 sets of code?. Do we have enough examples for same that will show violations for all the items you added in this input?\nNone of the other inputs changed in violations, which makes me think we may not have enough examples.. make boolean final and move false assignment to inside the if.\nThis way it follows the patterns of the other final variables.. @mwkroening Yes it is. You can tell because you have no failing tests.\nSomething else is failing though:\n\n[checkstyle] [ERROR] /home/travis/build/checkstyle/checkstyle/src/main/resources/google_checks.xml:42: Line should not be longer than 100 symbols [RegexpSingleline]\n[checkstyle] [ERROR] /home/travis/build/checkstyle/checkstyle/src/main/resources/google_checks.xml:83: Line should not be longer than 100 symbols [RegexpSingleline]. We had no tests where good code turned into violations or violations turned into no violation.\nAll the cases you added are good code. There is no new violation cases we are missing from your changes?. Description outside the code may mention it but it is still not clear from the code alone.\nI feel we should rename to something like shouldBeAloneOnLineWithNotAloneOption.. Why remove the s from {@code case}s?. Exactly. You placed code before them and so you changed the line numbers of the future text.\nhttps://github.com/checkstyle/checkstyle/blob/4b8e5086a4994f18dff9e0cad874f922f1febd39/config/suppressions.xml#L8-L9. Yes.\nhttps://github.com/checkstyle/checkstyle/blob/master/src/test/java/com/puppycrawl/tools/checkstyle/internal/XdocsJavaDocsTest.java#L366-L380\n\nBasically the tool just sees the visible text and not the whitespaces. So it has to use it's brain to estimate where a space should be and should not be.\nIn this case, it thinks s is another word and is like \"There should be a space splitting these two apart\".. Basically you changed the logic of the check. If you ran regression now, you would see a whole bunch of differences in the report. Seeing no differences in our test suite means we don't have enough examples to replicate a mini-regression, which is what our goal is of having so many test cases. If we only went by test suite instead of regression, we would think this change caused no differences.\nWe are going to ask for regression report for this issue anyways. Why don't you run it, and share it, and if anything is now causing a violation add a mini-version of it to our test suite as an example so we have more examples for next time.. ",
    "vjkoskela": "I think you should set the initial value by subclassing ThreadLocal above; there is an example in the Javadoc:\nhttps://docs.oracle.com/javase/7/docs/api/java/lang/ThreadLocal.html\nIf you set the ThreadLocal value in the static block I believe that it will set the value only for the thread loading the class.\n. ",
    "robertpainsi": "translates to Use a single room without space to separate.. :joy_cat:\nIf it's useful for this PR, use something like Verwenden Sie ein einfaches Leerzeichen um Zeichen zu trennen. Translation from translate.google.com\nedit: native speaker :wink: \n. Fixed and updated.. Thanks for handling this issue :smile_cat: This is just a simple question because I'm not that familiar with Checkstyle.\nIs it possible that the previous sibling is a comment or anything else than a case?. > comments are skipped in AST for java Checks at all, so it should not be a problem.\nGood to know, thanks! Also according to the java syntax, only case and default are siblings.\njava\ncase Expression :\ncase EnumConstantName :\ndefault :\nSo ignore my comment.\n\nif you have code with default not in the end in your project - please share a link to it to let us verify our implementation on real code.\n\nUnfortunately I can't provide the project I'm working on because we are using the DefaultComesLast check as is. :disappointed: . Reviewed the code in my project again which made me think. Since all cases have to be defined and a missing case is an error, the default case should log an error. However, there is still a DEFAULT == -1 case. I guess that's the reason why default has been used not at the end. Because there is a DEFAULT case but it shouldn't be the default case. It's a little complicated to explain without going into detail but in source code, it would look like this:\njava\n// The code we should use in our project instead\nswitch (id):\n    case x:\n    case DEFAULT: // DEFAULT case we should've used\n         show(X);\n         break;\n    case y:\n        show(Y);\n        break;\n    default: // real default case\n        log(error);\n        break;\nSo we have to improve our code instead of using a new option. :flushed:\nThis would've been the real code https://gist.github.com/robertpainsi/259a742c6059394ed6d13cc7cabaf71e. ",
    "codacy-bot": " Issue found: Position literals first in String comparisons\n.  Issue found: Avoid unused imports such as 'java.util.concurrent.atomic.AtomicIntegerFieldUpdater'.  Issue found: Avoid unused imports such as 'com.puppycrawl.tools.checkstyle.TreeWalker'.  Issue found: Package name contains upper case characters.  Issue found: Avoid unused imports such as 'javax.accessibility.AccessibleAttributeSequence'.  Issue found: Avoid unused local variables such as 'foo'..  Issue found: Avoid unused imports such as 'java.util.concurrent.atomic.AtomicIntegerFieldUpdater'.  Issue found: Avoid unused imports such as 'com.puppycrawl.tools.checkstyle.TreeWalker'.  Issue found: Avoid unused imports such as 'javax.accessibility.AccessibleAttributeSequence'.  Issue found: Package name contains upper case characters.  Issue found: Avoid unused local variables such as 'foo'..  Issue found: Avoid unused imports such as 'java.util.concurrent.atomic.AtomicIntegerFieldUpdater'.  Issue found: Avoid unused imports such as 'javax.accessibility.AccessibleAttributeSequence'.  Issue found: Avoid unused imports such as 'com.puppycrawl.tools.checkstyle.TreeWalker'.  Issue found: Avoid unused imports such as 'javax.accessibility.AccessibleAttributeSequence'.  Issue found: Avoid unused imports such as 'com.puppycrawl.tools.checkstyle.TreeWalker'.  Issue found: Avoid unused imports such as 'java.util.concurrent.atomic.AtomicIntegerFieldUpdater'.  Issue found: Avoid unused imports such as 'com.puppycrawl.tools.checkstyle.api.TokenTypes'.  Issue found: Avoid unused imports such as 'com.puppycrawl.tools.checkstyle.utils.CommonUtils'.  Issue found: Position literals first in String comparisons.  Issue found: Avoid throwing raw exception types..  Issue found: Useless parentheses..  Issue found: Avoid unused imports such as 'com.puppycrawl.tools.checkstyle.Definitions'.  Issue found: Avoid unused imports such as 'com.puppycrawl.tools.checkstyle.Definitions'.  Issue found: These nested if statements could be combined.  Issue found: Use one line for each declaration, it enhances code readability..  Issue found: Avoid throwing raw exception types..  Issue found: Avoid throwing raw exception types..  Issue found: Avoid throwing raw exception types..  Issue found: Avoid unused imports such as 'javax.xml.soap.Detail'. ",
    "Dziman": "@romani fixed\n. ",
    "vboerchers": "You can easily test your assumptions: Remove it and you will see which test fails. The alternation can happen in the parent and in the child: (\"org.somewhere|org.somewhereelse\" + \"foo|bar\").\nIt's a matter of taste though where one should handle the grouping. I decided to ensure that fullPackage is always a properly grouped regular expression. The code is correct as the test shows. I'll move the grouping stuff solely to the other constructor and hope that it is easier to understand.\n. ok\n. done\n. Done.\n. hmm, it's a concatenation of regular expression - that is captured by a test of course. The change was necessary after I removed the grouping from the first constructor.\nDone.\n. Done. I also added a subsection on proper regular expression for packages and classes as regular expressions are difficult to many developers.\n. Please make sure you understand what the function is used for before making a proposal to remove it. We have been there before: The user defines matchers for packages step by step and we have to concatenate them while taking care not to break anything. What should the resulting regular expression in the following case be?\n<import-control pkg=\"com.puppycrawl.tools.checkstyle\">\n    <subpackage name=\"filters|checks\" regex=\"true\">\nThe resulting regular expression has to be (?:com\\.puppycrawl\\.tools\\.checkstyle)\\.(?:filters|checks) - note the replacement of . by \\.? It's not the user's duty to care for converting com.puppycrawl.tools.checkstyle into a regular expression. It's checkstyle's duty and I provided everything that is needed to make that work.\n[Edit: protect the backslashes]\n. done\n. Remember your comment 6 days ago that made me introduce this code? I responded\n\nIt's a matter of taste though where one should handle the grouping. I decided to ensure that fullPackage is always a properly grouped regular expression.\n\nSo I gladly reverted that change. - Done\n. done\n. Please re-read the text, I think you misunderstood it. It's a suggestion to the user to improve readability of her configuration. If there is anything I can do to make it easier to understand for you please let me know.\nI'll squash all commits into one once I have an answer to the two open issues.\n. It was one of your first requests that I should introduce a flag field that stores if a PkgControl keeps a regular expression. I did that and it is set like this:\nif (regex || parent.regex) {\n        ...\n        this.regex = true;\n    }\nDue to the recursive nature of PkgControl checks will have regex=true when it comes to import. The recursiveness of PkgControl is natural (and not invented by me).\n. Great. Please keep in mind that this is a section with advices which grew out of my own usage of regular expression in this context and out of attempts to help others.\n. done\n. ",
    "kazachka": "getIdentation returns only identation of DetailAST node. \nDetailNodeTreeStringPrinter needs to root node (JAVADOC) prefix and other nodes prefix to print tree.\n. It was failed because of conversion to DetailAST instead of AST.\nAll of TC failures now resolved.\n. It is similar to hardcode in ASTTreePrinter. AST and javadoc tree are different trees with different classes of nodes. ((DetailAST) parent).getChildCount() returns 0 because COMMENT_CONTENT token hasn't children.\n. Done\n. Updated\n. Updated\n. Updated\n. Updated\n. For this case we use trim:\nlineBefore = lines[lineIndex].trim();\n. This was before my editing:\nhttps://github.com/checkstyle/checkstyle/pull/3554/files/d27161d4491ce0707d93c9d1426dc920ede1c7b6#diff-cf9b6157630180a13db71355b2241bdfL50\nI copy constructor that was before and edit only node name and type\n. I did same method in ParseTreeTablePModelTest. \nhttps://github.com/checkstyle/checkstyle/blob/master/src/test/java/com/puppycrawl/tools/checkstyle/gui/ParseTreeTablePModelTest.java#L45\n. Done\n. Done\n. Done\n. Done\n. Updated. Updated. Updated. For testing isTrailingComment. Case when comment after token isn't trailing.. done. done. done. done. In first test I replaced that import with \"import java.lang.Deprecated\", but in other cases we don't use annotation, so imports can't be meaningful. When deleting import declaration PACKAGE_DEF shouldn't been checked as last token.. done. done. done. done. Done. Added test cases for trailing and not trailing comments.. EmptyLineSeparatorCheck doesn't check last token. I place import after PACKAGE_DEF to make package declaration no last.. Done, but tests aren't compile, it needs to import javax.annotation package in pom.xml. done. done. We also use magic number in this case, for example, there:\nhttps://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/EmptyLineSeparatorCheck.java#L552. updated. updated. updated. updated. updated. updated. updated. duplicated words removed. done. done. Yes, leading asterisk is javadoc identificator. Should I update comment?. comment updated. Added explaining constant to class and updated comment.. that was in https://github.com/checkstyle/checkstyle/pull/2914#issuecomment-185746384\n\nI think we should call getAcceptableTokens from getRequiredTokens.. getDefaultTokens reverted and xdocs changed. \"^\" is bitwise operation. Because NPath value for one expression is small number, unlike NPath value for range of expressions that can be huge.. LOR and LAND are || and && conditional operators, but in TokenTypes javadoc they are called as logical.. renamed to countConditionalOperators, javadoc fixed. updated. I don't know. That test was written by @attatrol at Pull #2914 . same as first. I didn't write this test.. renamed to TokenEnd. deleted. renamed to isAfter. removed. removed. moved to configuration. added test cases for ELLIPSIS and ARRAY_SEPARATOR in SeparatorWrapCheckTest. added links to google style guide and issue #3752 . fixed. done. done. deleted\nnow there is different empty lines in different language files. updated. added cases from issue and for all of tokens except of DOT (i can't find any usage of annotation with this token). Method updated.\nNote that i copy it from AnnotationLocationCheck, so AnnotationLocation can wrote \"SomeClass\" instead \"Annotation\".\nAdded java.lang.Deprecated as example.\n. updated. Note added to both xdocs and javadoc. changed. Updated to javadoc text. Updated to javadoc text. if we do, then here will be violation caused by CyclomaticComplexityCheck. method renamed and comment deleted. renamed. done. updated, please check. That one was from Pull #5073 \nIt has been rewritten with input file parsing by TreeWalker.. But now there is expected violation on that line for new test (IllegalTypeCheckTest.testPlainAndArrayTypes). There are no warnings because file is using in test that check full ident creates properly for array type.. done. done. done. Yes,\nbut using pattern as second parameter of addAtribute causes violation:\nCheckstyleTestMakeup: Unknown property name/value.. It didn't help. Done. Done. Done. Actually there no violations on projects except of Vavr.\nhttps://kazachka.github.io/parameter-name-check-diff/. What should i write in it?. Is it fine that for such annotation:\n@TwoParametersAnnotation(value = value, tokenType = TokenTypes.ANNOTATION)\ncheck counts one class (and doesn't count TokenTypes). Part of tree for that part of code:\n|   |   |--ANNOTATION -> ANNOTATION [65:4]\n    |   |   |   |--AT -> @ [65:4]\n    |   |   |   |--IDENT -> TwoParametersAnnotation [65:5]\n    |   |   |   |--LPAREN -> ( [65:28]\n    |   |   |   |--ANNOTATION_MEMBER_VALUE_PAIR -> ANNOTATION_MEMBER_VALUE_PAIR [65:29]\n    |   |   |   |   |--IDENT -> value [65:29]\n    |   |   |   |   |--ASSIGN -> = [65:35]\n    |   |   |   |   `--EXPR -> EXPR [65:37]\n    |   |   |   |       `--IDENT -> value [65:37]\n    |   |   |   |--COMMA -> , [65:42]\n    |   |   |   |--ANNOTATION_MEMBER_VALUE_PAIR -> ANNOTATION_MEMBER_VALUE_PAIR [65:44]\n    |   |   |   |   |--IDENT -> tokenType [65:44]\n    |   |   |   |   |--ASSIGN -> = [65:54]\n    |   |   |   |   `--EXPR -> EXPR [65:66]\n    |   |   |   |       `--DOT -> . [65:66]\n    |   |   |   |           |--IDENT -> TokenTypes [65:56]\n    |   |   |   |           `--IDENT -> ANNOTATION [65:67]\n    |   |   |   `--RPAREN -> ) [65:77]\nTokenTypes is parsed as IDENT, so I can not see any obvious way to recognize is it class name or just variable. It doesn't.. fixed. test cases added. added. added. I changed order because otherwise I had  XdocsPagesTest.testAllCheckSections test failed. So just rewrite xdocs?. I tried, but it causes spellchecker violation: https://github.com/checkstyle/checkstyle/pull/6052#issuecomment-419714704. \n",
    "agcuda": "Methods are checked if their access modifier is between scope (inclusive) and excludeScope (exclusive). The default is to \"check all\", so scope is set to the lowest visibility level and excludeScope to null, meaning \"higher than public\". \nThe algorithm works because NodeScope.isIn(Scope.ANONINNER) returns true for all the visibility levels. I tried with NodeScope.isIn(Scope.NONE) but it does not. Besides I believe that saying in the documentation that the default scope is NONE to say that by default all the scopes are checked is a bit confusing.\nSetting the default to null would work, of course, because then matchScope would check the specific value. Again, as a user I find a bit confusing that:\n- scope = null means \"all the visibility scopes\"\n- excludeScope = null means \"no visibility scopes\"\nbut if you prefer it this way, it's perfectly fine for me.\n. @romani Given the considerations above, what is the value you'd like to be the default for scope?\n. @romani This is the scope of e.g lambda function parameters. Strictly speaking, the default should have been  'Scope.ANONINNER', however in light of your comments, I chose to use 'Scope.PRIVATE'. Please tell me if that's ok for you.\n. Done\n. Kept code as it is.  I can't remove this reference to ANONINNER and keep the code as it is because if e.g. I choose PRIVATE as the default scope, then anonymous inner functions are not checked. To avoid using this constant I could use null or NONE with the drawbacks I described a few comments above\n. This reference to ANONINNER is necessary to implement your suggestion about not doing anything if the user has not overridden the defaults (the comment disappeared for some reason).\n. Done\n. Done \n. Done \n. @rnveach Let me know if I get it right: is your suggestion to use null as a default both for scope and excludeScope? And the meaning would be:\n- scope=null: check all scopes\n- excludeScope=null: exclude no scopes\n  Is it correct?\n. Ok. Moved examples to that subsection.\n. I agree, I will split it into two input files: one containing only private methods and the other contacting public methods. \n. I did not know the order is not guaranteed, sorry. Then how do I distinguish between the two? One has only the 'excludeScope'  attr, and the other has only 'scope'. Correct me if I am wrong, but there is no 'hasAttribute', and calling 'getAttribute' will result in an exception if the attribute is not present. Of course I could catch it, but it seemed to me that it was not the right way to do it. Would it be acceptable? \n. Split done \n. Clarified that a .java file cannot contain two top-level classes. Check: OneTopLevelClass\n. Clarified that Unicode escapes outside string literals and comments are strongly discouraged\n. Changed import order: addressed by PR #3519, Issue #941.\n. Clarified that not even private members can appear between two overloads. OverloadMethodsDeclarationOrder behaves correctly\n. Added \"only\" to: \"Line break after closing brace only if terminates a statement or terminates the body of a method, constructor or named class\". Editorials and example. I'm not 100% sure how to test that \"only\", however I believe this is already covered.\n. Editorial\n. Column limit set to 100 (it was either 80 or 100). This is the current setting.\n. Added clarification: line-wrapping is allowed also if not necessary.\n. Added method reference (::). Addressed by #3472 and this PR.\n. Editorial + Pointer to section 4.8.1 that describes vertical spacing in enum declarations.\n. Clarified horz spacing for lambda (right and left), method reference (no spaces) and dot separator (no spaces). I checked this cases agains the examples given by Google and WhitespaceAround behaved correctly.\n. Clarified that one blank line can be inserted between two enum values. EmptyLineSeparator allows that. It even allows more than one blank line, but the guide does not forbid it (it only says that it is unusual).\n. Added clarification\n. Clarified that there are no rules on type annotations.\n. Added default modifier to the list: fixed by #3471\n. One-character parameter names are now allowed in non-public methods. Addressed by issue #3473 and this PR.\n. Simplified rule for local variables. They should be lowerCamelCase and obey to no further restrictions. This is exactly what the current check does.\n. Old version: empty catch blocks are no allowed, unless the variable name is expected. New version is that the variable name should start with expected. I did a few tests and it looks like checkstyle already follows the new rule (please confirm that I'm not wrong).\n. Moved specification about Javadoc content to section 7.3.4.\n. This is a new paragraph (funny, there is no 7.3.3): it is a cut and past of the introductory text in 7.3 of the old specs. Additionally, it says the non-Javadocs are free from the formatting rules for Javadocs (though that would be recommended).\n. @rnveach Yes, I attached the comment to the wrong line: this is meant for 4.8.1. Shall I remark this in the coverage report?\n. I'm writing the IT, and I see now that method reference and dot separator are not checked at all. There is even a method (dotTest) that makes sure that no warnings are raised if e.g. it finds a . b(). Similarly, Object :: toString is accepted. Is this an acceptable behaviour? I can't find a way to configure WhitespaceAround to be less permissive.\n. Done\n. (Partially) done, see new test cases: they only work with lambda.\n. Done\n. Done\n. ",
    "MaksimP": "yes, i was doing whith \"while\" too, but no working\n. done\n. done\n. done. done. I agree. I unated their together in a other method because in the method validate() already is immpossible add a new condition by reason of \"cyclomatic complexity\".. done. Done. I removed this line. Without it works well and she decrise coverage. And she does not work if Lambda is argument in method( rightcurly not have the following next semi).. Done.. Done. I rewrote some part of the code.. Done.\nI think that \"...In...\" it will be more logic.\n. done. done. done. done. removed comment . done. done. done. I did two return by reason of NPE in empty lambda () -> {}. Now is ok in lambda of such a type () -> {}, such lambdas are many in openjdk. But in lambda of such a type\n() -> \n{\n}\n check is fail.  Maybe, will find such lambda chance very small and skip this fail.. done. Done. . done. Done. @MEZk without final was TC violations.. @romani done. If  move this check in code that thiss method and to bring back old method shouldBeAloneOnLine()  (i.e delete neew method shoulbeAloneOrSingleLine() ), then this check will be in validate().\nAnd in validate() move another check (token... != ....LAMBDA), then have \"cyclomatic complexity\" in validate(). Move it in shouldBeAloneOnline also can not, is then \"cyclomatic complexity\" in him.. @rnveach  \"It  changed, then the last push returned back.. Now \"isAloneOther\". @romani To skip the check \"cyclomatic complexity\" in all methods, I propose to create a method common to all  methods with the word \"Alone\" in names. \nprivate static boolean shouldBeAloneOnLineGeneral(RightCurlyOption bracePolicy,\n                                                      Details details) {\n        final int tokenLambda = details.lcurly.getParent().getType();\n        return tokenLambda != TokenTypes.LAMBDA\n                && shouldBeAloneOnLine(bracePolicy, details)\n                || tokenLambda == TokenTypes.LAMBDA\n                && shouldBeAloneOther(bracePolicy, details);\n    }\nAnd in validate\nelse if (shouldBeAloneOnLineGeneral(bracePolicy, details)) {\n            violation = MSG_KEY_LINE_ALONE;\n        }\nthis option acceptable?. I will change \"isAloneOtherToken\", it seems more logical. @romani  Now the upper methods further for them is validate(). And bring these checks in it we will get \"cyclomatic complexity\".  Can as I wrote above create a new common further method for them.\nOr so, to do \nprivate static boolean isValidAloneOnLine(RightCurlyOption bracePolicy, Details details) {\n        final int tokenLambda = details.lcurly.getParent().getType();\n        return tokenLambda != TokenTypes.LAMBDA\n                && shouldBeAloneOnLine(bracePolicy, details);                \n    }\nprivate static boolean isValidAloneOnLineOther(RightCurlyOption bracePolicy, Details details) {\n        final int tokenLambda = details.lcurly.getParent().getType();\n        return  tokenLambda == TokenTypes.LAMBDA\n                && shouldBeAloneOther(bracePolicy, details);\n    }\nand in validate()\nelse if (isValidAloneOnLine(bracePolicy, details)\n          && isValidAloneOnLineOther(bracePolicy, details)) {\n            violation = MSG_KEY_LINE_ALONE;\n        }\n. @romani Done.\nI did the new method and  check \"cc\" is ok.. ",
    "jochenvdv": "Done.. Good catch. Done.. I understand. What about using the filename as regexp (InputImportControl.java)? This is unlikely to have collisions.\nI added these tests to test that the regexp would do partial matching (Matcher.find() has to be used, not Matcher.matches()) which is expected behaviour.. Sorry, I was using a buggy GitHub app for Android.\nOk, so I will change the regexp to [\\\\\\\\/]InputImportControl.java?. Good idea. Done.. Done.. Done.. I guess I forgot. Done.. ",
    "linelect": "done. done. done. done. done. I update config_imports.xml, but i don't assured that it's all that need. For new functionality don't need add additional options to examples config.. ",
    "Efremenkov": "We can set it to true. It will fail build if we write wrong path to package for example. I'll change it.. Yes, it is a reasonable remark. I'll do it.. Maybe it will be better to do when I'll add another profile or in that PR?. Actualy we can't add all packages to pites because there are some problems with some packages. For example \"checks.annotation\" failed build with ArrayIndexOutOfBoundsException. Your issue: https://github.com/hcoles/pitest/issues/302.\nTesting \"grammars\" package takes a lot of time (> 15 min) and it write many errors in log but it finished succesfully. I suppose it connected with JDK 8 features.\nI agree with idea of renaming profiles. That's good.     . ",
    "ssdeep": "Without this change ParseTreeTablePModel.isEditable() would always be false.. This is a redundant assertion, given we already do it in line 165. Unless this is meant to be javadocChild?. I was working off of the UI by running Main.java in the gui package. I understand it doesn't translate clearly here.. I have added the requested test logging to indicate the intended nodes within the test file parse tree models. This node will be the child comment node of a /* node, indicating a Javadoc.. will be on it, thanks!. I modified this test, to verify indices of each child of the the tree node. The text would expect the tree to have at least one child.. This is resolved in the new test.. I added Javadoc to this test to better explain the choice of the node. We try to verify the node containing the class name. Since class name follows the Class Def, modifier and class literal and is not expected to change often in the given test file, this test should work.. This is now changed to parseTree.getColumnCount(). Done. Done. Done\n. changed the assertion to javadocChild.. @romani Should I return false here and adjust the test accordingly? Or should getColumnClass for column 0 return ParseTreeTablePModel instead of ParseTreeTableModel. That change breaks the UI as I have tested it.. Changed this to return false.. ",
    "bamapookie": "Added endOfScope boolean and returned that.. Should single return point be a checkstyle check? :). ",
    "Luolc": "Updated. I referred to the expression in the java document by oracle this time. English is not my mother language. I may use some words not appropriately sometimes. If there is still something wrong please point it out. :). Done. BTW I noticed that there are breaks after some definition while no breaks after the others in this file. Is there a specific rule of whether to put a break after a definition?. According to Google Style, characters with a tail comment and non-printable ones are both valid. We cannot determine which configuration plays a role using the original codes. Assuming that Google no longer allows the use of non-printable characters one day in the future (I know the possibility is very low), the test will still pass for the tail comments. In that case, we are missing the validation of non-printable characters in integration test. In other word, if our check of non-printable characters raise a false negative, we are not able to find it via this test.. Answered at above.. The missing unicode above are \\u000a (\\n) and \\u000d (\\r). In Java, unicode escapes are pre-processed before the compiler is run. Therefore, if you put \\u000a in a String literal like \nString someString = \"foo\\u000Abar\";\nIt will be compiled exactly as if you wrote\nString someString = \"foo\nbar\";\nThis can not even be compiled successfully. Unlike other common control characters (i.e. a Greek letter mu), these two may lead to more problems like compilation error. Google Style said The choice depends only on which makes the code easier to read and understand. IMO, we shouldn't allow user to use these two characters. Google Style allows using escaped characters of non-printable ones, but not misleading ones. And in this case the escaped format of line feed and carriage return can be \\n and \\r, instead of \\u000a and \\u000d.. Got it. That make sense.\nI will write a new input file listing all control characters. Is it OK to write a new test method in https://github.com/checkstyle/checkstyle/blob/master/src/test/java/com/puppycrawl/tools/checkstyle/checks/AvoidEscapedUnicodeCharactersCheckTest.java to test all control characters specifically?. I made an update but not not sure if it is a good practice. Need suggestions. Thanks!. Yep. Thats why I make this change. If feff is marked as bad, a violation can be triggered like the line here https://github.com/checkstyle/checkstyle/blob/master/src/it/resources/com/google/checkstyle/test/chapter2filebasic/rule233nonascii/InputAvoidEscapedUnicodeCharacters.java#L15. In some extreme cases.\nFor example,\nString[] strs = new String[] {\"\\u000a\"};\nwill be compiled as if you wrote\nString[] strs = new String[] {\n};\nThere will be no compiler error. But... obviously very misleading.\nShould we take the cases like this into account?. Emm... the example above is not correct. It should be\nString[] strs = new String[] {\"\n\"};\nAnd there will still be a compiler error.\nLet me think again. A sec. It seems that it is impossible to use it in string literal without compiler error. We cannot split a string literal into two lines. It will surely produce an illegal line end in character literal error.\nsmth like\n\\\\ there will be a line feed at the end of this comment. \\u000a\nmay be compiled without error, while we only concern about string literal and char literal in this check (the accepted token types). To sum up, it is impossible.\n. Done.. All unicodes from 0x0000 to 0xffff are included in the input file.. Every line is commented with violation or ok now.. Done.. Done.. Done. I misunderstood the purpose of that test before. Sorry for my careless \ud83d\ude05 . The IndentationCheckTest is quite different from other tests. There are many verifyWarns in test methods. The actual assertion of verifyWarns is at https://github.com/checkstyle/checkstyle/blob/master/src/test/java/com/puppycrawl/tools/checkstyle/checks/indentation/IndentationCheckTest.java#L1785-L1786, that to use an endsWith but not equals to judge the correctness.\nThe getExpectedMessage() is defined here, https://github.com/checkstyle/checkstyle/blob/master/src/test/java/com/puppycrawl/tools/checkstyle/checks/indentation/IndentationCheckTest.java#L1818-L1827\nAnd the error message in English could be one of the followings:\nindentation.error.multi=''{0}'' have incorrect indentation level {1}, expected level should be one of the following: {2}.\nindentation.child.error.multi=''{0}'' child have incorrect indentation level {1}, expected level should be one of the following: {2}.\nindentation.error=''{0}'' have incorrect indentation level {1}, expected level should be {2}.\nindentation.child.error=''{0}'' child have incorrect indentation level {1}, expected level should be {2}.\nThe endWith way could work when the message is in English or Chinese. But in many other languages, it will not work at all. The messages could have different postfixes due to the difference of singular-plural or even pronounce stress.\ni.e. in Finnish\nindentation.error={0} sisennyssyvyydell\u00e4 {1} ei ole oikealla syvyydell\u00e4 {2}.\nindentation.error.multi=''{0}'' on virheellinen sisennystason {1}, odottaa tasolla pit\u00e4isi olla yksi seuraavista: {2}.\nindentation.child.error.multi=''{0}'' lapsi on v\u00e4\u00e4r\u00e4 sisennystason {1}, odottaa tasolla pit\u00e4isi olla yksi seuraavista: {2}.\nindentation.child.error=''{0}'' lapsi on v\u00e4\u00e4r\u00e4 sisennystason {1}, odottaa taso olisi {2}.\nWe can see the messages have totally different postfixes.\nI have logged what information the IndentComment really has and found that it doesn't have the token type info at all.  It only has the actual and expected intent.\nSo we can only know that the message is smth like ''{an unknown token type}'' have incorrect indentation level {actual intent}, expected level should be {expected intent}. I guess it is why the original contributor didn't use equals but endWith.\nTo sum up, I haven't found another way to do the assertion without endWith. And if we are using endWith, it is not able to do the assertion in many non-English languages. Therefore, I use the old/ugly way to enforce the locale in English.. It is a typo. I tried to use endWith way (I describe it at https://github.com/checkstyle/checkstyle/pull/3993#discussion_r105829337) in Chinese at first and found that typo. The endWith way will not work if the message in Chinese has a wrong postfix.. I split it out just for readability. If you think it is clear enough to use inlining condition, I am OK with it.. According to reduce(\"\", (cur, next) -> cur + \"\\\"\" + next + \"\\\", \");, the possibleExceptedMessages should be smth like \"msg0\", \"msg1\",. There is already a space at the end of the variable.. Done.. Done.\nI used new String[] { \"##0##\", .... } when first writing the test. When doing the review myself, I rewrite the code into this. You are right. It seems really redundant. My mind maybe not very clear when I wrote this.. It is a result of rewriting as well...\nActually I wrote smth like this at first:\nfinal boolean isInOrder = Arrays.stream(messages).allMatch(msg -> {\n    return Arrays.stream(properties).mapToInt(msg::indexOf)\n            .reduce(-1, (cur, next) -> {\n                if (cur < next) {\n                    return next;\n                } else {\n                    return Integer.MAX_VALUE;\n                }\n            }) != Integer.MAX_VALUE;\n});\nAnd when doing the review myself, I thought writing in this way might lose some readability to some extent. Then I changed it into what we see now.\nWhich way would you prefer? A loop on properties or my original implementation? Or maybe another better way?. I am OK with the loop. I just used to java 8 style. It seems not appropriate to use lambdas here indeed.. Updated with the loop way.. Done.. It is to verify the properties of error messages is in numerical order, since other tests rely on it. I add this UT as @rnveach suggested in https://github.com/checkstyle/checkstyle/issues/4003#issuecomment-286754290:\n\nLet's make a test that verifies message is in property order. Add assertion that if it fails, message must be changed so properties are in order.\n\nJavadoc added and assertion message updated. Please confirm whether they are clear and appropriate.. @romani Done.. Done.. Done.. Done. \nThe term \"property\" is taken from @rnveach 's https://github.com/checkstyle/checkstyle/issues/4003#issuecomment-286754290\n\n... chop off property 0, and ...\n\nI thought that \"property\" is a proper noun for \"argument\" in this context. Maybe I misunderstood his meaning. Sorry for that. My English is not very good. \ud83d\ude05 . In fact they are not removed, on the contrary the condition exp is extended.\nThe original code used != and && and the new code is using == and ||.\nTo make it clearer, in fact, the possible type of the ast could be one of the following: \n- try\n- else\n- catch\n- finally\n- if\n- method def\n- lambda\n- synchronized\n- for\n- while\n- do\n- case group\n- { (SLIST)\n- constructor def\n- static init\n- instance init\nThe original code means that if the ast type is not one of the first four (try, catch, finally, else), then it should update. And current code means that if the ast type is not one of try, catch, finally, method def, lambda ... then it should be update.\nTo find out the purpose of this method, before fixing this issue, I reviewed PR https://github.com/checkstyle/checkstyle/pull/2814, before which is merged there were no violation and after merged the false positive appears. It is sure there is smth wrong in that commit.\nThat PR is to fix https://github.com/checkstyle/checkstyle/issues/2807, to assert violation on smth like this:\nint a;\nif (true) {\n  a = 1; \n} // (1)\nelse { // (2) \n  a = 2; // (3)\n} // (4)\nIn that PR, method shouldUpdateUninitializedVariables was added to confirm that we will update a into the uninitialized variables list when we leave token at (1), and will not remove a from violation candidates list when we are processing at (3)\nTherefore we should only do the update when we leave a if scope which has an else scope following or a case group witch has another case group following.\nIf we are leaving the scope of smth like try, catch ... we shouldn't do the update at all obviously. But there are many other type like try, catch, finally that is not taken into judgement and that why the false positive occurs.\nActually smth like this can reproduce false positive:\nint a;\nif (true) {}\nelse {\n  a = 1;\n  {} // (5)\n  a = 2; (6)\n}\nIt is because we do the update when leaving (5) and do not remove a from candidates list when processing (6). And actually we shouldn't do the update.\n---\nRegrading the test. I don't understand clearly. I add the code mentioned in the issue into the input file. What kind of UT should I add for my changes? I don't have an idea. Could you please give me some more tips?. Done.. Got it. \n\nwe should have had some test that at least looked at true/false conditions of that method for catch/finally\n\nThat makes sense. In the original code, the method should return false and it is correct. In the new code it still return false when leaving catch/finally. So the tests about catch/finally won't change behaviors. \n\nwe are missing more regression cases\n\nI agree with you. As we can see in the diff report, the diff are all decreasing of violations (false positives). We are not having wrong catch/finally samples but missing method def/lambda/synchronized ... samples.\n\n[x] I will add some of the false positives from diff report into the input of false positives test.\n[x] If it is still missing some specific cases, I will try to write some inputs manually.. @rnveach I add some more samples taken from diff report and write a specific input file for this fix. But to be honest, I am not sure whether it is enough for regression.\n\nIMO, just a suggestion, we need think twice of the whole structure of this check. After investigated on it these days, I have found several part of codes which are much likely to have some unknown problems. The code in some early version (i.e. v6.13) is really clean, but maybe after many patches it is much more complicated now.\nI think I could probably find more false positive bugs if I keep investigating. Maybe in the future we'd better to make a summary of all the conditions we need to concern about, and then refactor some part of this check. But it will need a lot of time and work obviously and not very easy. So maybe it is not necessary.. Done.. Emm... I added smth when I was debugging and forgot to change it back. Sorry for my careless. > I am also going to assume that we don't have any handling of continue\nYou are correct. continue should be taken into consideration as well.\n@rnveach Regrading the break in loops, please correct me if I am wrong...\n1. In most cases, break or return does not have a direct loop parent, they are always wrapped by a if scope (or else scope). In fact, a break or return with a direct loop parent (smth like below) is really weird.\nwhile (...) {\n  // statements...\n  break;\n}\nIn that case we will be sure to break at the first time. If so, why should we use a loop at all? There is no regression problem due to the \"break in loop\" in diff report, I guess it is because no one wrote a break or return like this in the projects.\n2. Actually we don't care about break or return exit what scope.\nint a;\nif (...) {\n  a = 1; // (0)\n  break; // or return, we don't care that\n}\na = 2; // (1)\nThe break or return issue is that we ignore them before and regard them as common statements. And the check will consider that a is possible to be assigned twice at (0) and (1). And what we should do is to let the check know if there is a break or return in the if scope, then it is not possible to reach both (0) and (1). \nIn the example I don't write the enclosing scope at all, it could be a switch, and also for, while etc. It doesn't matter.\n3. One thing we need to confirm: should we concern about unreachable statement?\n\nreturn will exit the method completely and ignore any logic outside scope.\n\nIt is true but return can only be at the end of a if, else scope (or end of a case group, or the end of a method). If there are anything else after the return, like smth below:\nvoid foo() {\n  return;\n  final int a = 1;\n}\nWe would get a compile error.\n---\nTo sum up, IMO, we don't need to handle break and return in a different way. Please provide a counterexample if I am wrong.\nThe only case I could find it different now is break with a label:\nint a;\n// ...\nlabel: {\n  a = 1;\n}\n// ...\nbreak label;\nI haven't try to handle with that yet. It seems really hard to handle with a label. It is smth like a evil goto.\n\nCan you create a some more examples with just break and return by itself\n\nSure. I will make new comment when I complete it sooner.. Some more information.\nWe cannot directly assign a final variable in a loop at all.\nfinal int a;\nwhile (...) {\n  a = 1; // compile error\n}\nWe would get a variable 'a' might be assigned in loop error.\nWe can only assign a final variable (declared outside the loop) in the loop like this:\nfinal int a;\nwhile (...) {\n  if (...) {\n    a = 1;\n    break; // necessary, or there would still be a compile error\n  }\n}\nor this, weird but without compile error:\nfinal int a;\nwhile (...) {\n  a = 1;\n  break; // necessary\n}\nBut if we try to access a outside the loop, we would get a variable 'a' might not have been initialized error.\nSo a must be assigned outside the loop if we want to access it. Then a should not be declared as final.\nI assume the only case we should raise a violation is smth like this:\nint a; // violation\nwhile (...) {\n  if (...) {\n    a = 1;\n    System.out.print(a);\n    break;\n  }\n}\n// never assign or access 'a' again\nAnd the check won't raise that violation by now. In fact we have a judgement here https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FinalLocalVariableCheck.java#L511-L513\n\nif the variable is declared outside the loop and initialized inside\nthe loop, then it cannot be declared final, as it can be initialized\nmore than once in this case\n\nTherefore, whether I handle break in loop or not, no violation would be raised due to that judgement.\nIs it really necessary to handle such weird cases like that? I believe no one would write code in that way.. Done.. @rnveach \n\nI say let's split this into new issue. This check is already complex enough and let's just get this PR done.\n\nSure. When the new issue is created, I am willing to continue to help with that. :)\n\nUnreachable statements won't change the fact that a variable can be final or not, right?\n\nYep.\n\nOur main concern is can the variable be declared final if it is compilable.\n\nBut the point is the unreachable statement would lead to a compile error. smth like this:\nvoid foo() {\n  int a;\n  a = 1;\n  return;\n  a = 2; // compile error\n}\nWe would get an Unreachable statement error. If I understood correctly, we don't need to concern about the cases like that since it is not compilable.\nIn fact, I haven't handle the unreachable cases in this commit by now. I assume it could be not easy if we need to concern about the unreachable statement with return and break.\n\n... but false negatives wouldn't show there.\n\nMaybe I don't understand clearly... Is there anything unexpected in the diff report? If the answer is yes, I will try to fix them, or split it into new issue?\n. Done.. Done.. @rnveach \nThe first example is handled by the check just like the one I wrote at https://github.com/checkstyle/checkstyle/pull/4115#discussion_r108645070:\nint a; // violation\nwhile (...) {\n  if (...) {\n    a = 1;\n    System.out.print(a);\n    break;\n  }\n}\n// never assign or access 'a' again\n\nAnd the check won't raise that violation by now. In fact we have a judgement here https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FinalLocalVariableCheck.java#L511-L513\n\nif the variable is declared outside the loop and initialized inside\nthe loop, then it cannot be declared final, as it can be initialized\nmore than once in this case\n\nTherefore, whether I handle break in loop or not, no violation would be raised due to that judgement.\n\nThis is a complicated problem, due to the code about handling loop I mentioned. I will get back to this later and I am willing to focus on the second example now.\nFor the second one, it is indeed a false negative. You are correct, return and break should be handled differently for case like that.\nI am trying to fix this and find another token we ignored before: throw.\nExample:\nvoid foo3() {\n  int a; // violation\n  int b; // no violation\n  final int random = (int) Math.random();\n  switch (random) {\n    case 0:\n      b = 0;\n    case 1:\n      b = 1;\n      a = 1;\n      throw new RuntimeException();\n    default:\n      a = 2;\n      break;\n  } \n}\nthrow is smth like return if it is not surrounded with try.\nAlso, we didn't handle the fall-through of case before. There could be a false positive of b.\nI am afraid we would find many many bugs of this check during this PR. \ud83d\ude05  It is no longer just a \"return\" and \"break\" problem now.. @rnveach \n\nI have only seen false negatives so far with current code, not any false positives.\n\nIt is a false positive when there is fall-through of case. The bug maybe existed for a long time.\nvoid foo3() {\n        int a; // expect no violation\n        final int random = (int) Math.random();\n        switch (random) {\n            case 0:\n                a = 1;\n            default:\n                a = 2;\n                break;\n        }\n    }\n\nYour example had a break in a while loop. My example has a return instead. It will not produce a compile issue like you were stating for the breaks.\n\nYa. I know that. I mean it is a more complicated problem than the return in catch, since we have special treatment about loop in the current code. I have no problem to handle that, but it might take a bit more time.\n\nLet's focus on these specific tokens for now.\nwe can split this into new issues.\n\nThe problem is when I am fixing bugs about break and return in catch, the regression appears. And the regression is not because of the latest fix, but the bugs (i.e. fall-through case, or throw) in the original code. If I want no regression, then I need to fix the others bugs in the meantime. If we are going to do so, then we would mix too many problems into one PR. We are in a dilemma now. \ud83d\ude1e \n. Done. BTW, why the verification pass when changing the indentation? My Intellij reformat the indentation automatically. There are also many 8 spaces indentation in other lines with assignment like this.. Done.. Done.. Done.. They are equivalent. When writing in the original way, Intellij would raise an inspection error that \"It could be replaced by method reference\". There are no functional difference but only improving readability.\nIMO, it doesn't make sense to have a filter for non-null check here. We have no reason to store any null object in the packages. Why don't we drop the null objects in the constructor (where the packages is assigned) ?. It is for codecov. Around createModule, the lazy init, if (thirdPartyNameToFullModuleName == null) condition will be only touched as one status (null) if we only test once. Maybe the coverage would be solved when re-manage the order of finding modules.. My fault... Seems accidentally delete the characters after \"test\".\nCorrected now.. Currently, I re-manage the order to what you stated and add the skipping when there are periods in the name.\n\npure createObject(name) should probably be used last when user supplies full package as name\n\nI don't know the situation in production, but in most UTs the name is a full qualified one. And thats why I put the \"full package test\" at first in my previous commit. \nIn each UT we would instantiate a new PackageObjectFactory and call createModule with a full qualified name.\nP.S. invoking stack:\n\nfinishLocalSetup:439, Checker\nconfigure:171, AutomaticBean\ncreateChecker:69, BaseCheckTestSupport\n\nThe 3rd party scan is time consuming. If we use your order without skipping, then we would do step 1, 2, 3 each time and it slows down test quite a lot.\nSkipping 1-2 when there are periods in the name could help.. Done.. Done.. Updated.. Updated. Do you have any suggestions how to manage isCheckstyleModule and its related methods? They are in two files now and it is not good to keep them in different place imo. I removed the filter here and add a throwing in the ctors now.. Fixed. Also update the test of PackageNamesLoader. @romani Done.. Done.. Done.. @romani The related code is moved back to CheckUtil now.. Do you mean change it to AbstractCheck.class.isAssignableFrom(clazz) || Check.class.isAssignableFrom(clazz)? Check.class is a sub class of AbstractCheck.class, when Check.class.isAssignableFrom(clazz) is true, AbstractCheck.class.isAssignableFrom(clazz) is always true. So changing this way does not make sense. Please correct me if I am wrong.. @rnveach ya, we did not have AutomaticBean.class.isAssignableFrom(clazz) condition at that time. I also think the \"Input\" prefix condition is not necessary now.\n@romani I will remove that.. @romani Done.. @romani Done.. With version 7.8, this fix won't affect the maven checkstyle check task. CI would still fail. So I change it to 7.9-SNAPSHOT. Is it OK? Why did we use stable version but not current SNAPSHOT version before?. Done.. Done.. Done.. Done.. Done.. This test is removed now as it is covered by testCreateObjectFromFullModuleNamesWithException. I see there are no period in other javadoc tag in PackageObjectFactory, so I change this to keep them in a same style. If you don't agree with it I would change it back.. Sure :)\nDone.. Almost good, expect that Simplified Chinese is more common. So my suggestion:\nMain.errorCounter=Checkstyle\u4ee5 {0} \u4e2a\u9519\u8bef\u7ed3\u675f\u3002\nMain.loadProperties=\u65e0\u6cd5\u4ece\u6587\u4ef6 ''{0}'' \u4e2d\u52a0\u8f7d\u5c5e\u6027\u3002\nMain.createListener=\u975e\u6cd5\u7684\u8f93\u51fa\u683c\u5f0f\u3002\u9884\u671f\u4e3a ''{1}'' \u6216 ''{2}''\uff0c\u4f46\u5b9e\u9645\u4e3a ''{0}''\u3002. I saw every UT in this class used mock. I assumed there could be some reason so I just followed them.\nSo should I avoid using mock in this new UT?. The super class uses BriefUtLogger. And it only print message like /path/to/file.java message. It don't have a module name or id postfix. We need smth like /path/to/file.java message [ModuleName or ModuleId]\nSo I change the logger and rewrite the verify logic. The verify code I wrote has some differences from the exist ones.. Updated. Done.. I was thinking that we only need this kind of verify here. If we don't ever need this anywhere else, is it necessary to modify the base class?\nI could changing this into AbstractModuleTestSupport, but I preferred just write it in CheckerTest.. ",
    "soon": "@rnveach Added error case. I was thinking about moving this case into separate method or file, but then I found a method with whitespace checks for typecasts. Going to move to a separate file.. Done. Done. Fixed. Fixed. Fixed. It has a common base with ClassDataAbstractionCouplingCheck and I decided, that adding exludedPackages to the ClassFanOutComplexityCheck will be a good idea. Should I implement it for the ClassDataAbstractionCouplingCheck only?. Don't understand the question. These classes will be processed as soon as they appear in the ast. I could use a list, but I only need the push / pop methods.  . Thought about it, but @romani said, that the package name should be an identifier (https://github.com/checkstyle/checkstyle/issues/3309#issuecomment-284230528) and I removed checks and tests for the trailing dot. As for me, allowing user to specify a package name with a trailing dot or a star is a good option, but this is only my opinion. I could return a check for a dot, and mention it in the docs. Or, probably, we should add validation and show a warning to the user in case of invalid identifier. . Sure, will fix that. Good point, thank you. Will extend docs . Agreed, will fix that . > So if I say to exclude package a.b and we have an import from a.b.c package, it will be \n\nexcluded since you use startsWith right?\n\nExactly so.\n\nIf we did do subpackages too, user couldn't use this option on a common package in their \nproject.\n\nWe should probably change the format of the excludedPackage element, so that a.b and a.b.* will exclude a.b only (without subpackages) and a.b.** will exclude all packages inside a.b. Or introduce includedPackages (with same problem) with higher priority than exludedPackage.\n\nEither way, we should have a test for this, if we don't already, and some documentation in \nthe xdoc explaining this behavior.\n\nWaiting for the decision and will update.. Fixed. @rnveach  Added, please review. Added test input for each UT. Sure. @rnveach No problem. Should I move simplifications to another PR?. @romani So, what should I do? Should I add a test for a user input with an ending dot to show, that this is an expected behavior? . @romani Added validation. @rnveach Updated docs, added examples with valid and invalid package names.. Do you mean something like:\nfor (int i = 0; isIdentifier && i < str.length(); i++) {\n    if (i == 0) {\n        isIdentifier = Character.isJavaIdentifierStart(str.charAt(0));\n    } else {\n        isIdentifier = Character.isJavaIdentifierPart(str.charAt(i));\n    }\n}\n. Are you asking for:\nboolean isName = true;\nif (str.isEmpty()) {\n    isName = false;\n}\n? . @romani A \"strict match\" - do you mean, that excludedPackages=\"java.util\" will exclude classes from the java.util package but not from the subpackages?. It will. The isIdentifier variable is a part of the for loop condition. . @rnveach, Is the following code appropriate? I wrapped the loop with the if statement and removed isIdentifier from the loop condition. As for me, it is less clear, but If you're fine with the changes, I'll move them into PR.\npublic static boolean isIdentifier(String str) {\n  boolean isIdentifier = false;\n  if (!str.isEmpty() && Character.isJavaIdentifierStart(str.charAt(0))) {\n    isIdentifier = true;\n    for (int i = 1; i < str.length(); i++) {\n      if (!Character.isJavaIdentifierPart(str.charAt(i))) {\n        isIdentifier = false;\n        break;\n      }\n    }\n  }\n  return isIdentifier;\n}\n. @rnveach Have you noted the difference between the 'isJavaIdentifierStart', which is used for the first symbol only and the 'isJavaIdentifierPart', which is used for all other symbols? If so, I already present the example of the loop in the first reply to your comment. Is it ok?. @romani @rnveach Corrected, now the excludedPackages does not exclude classes from the subpackages. @rnveach @romani Fixed. @romani @rnveach Fixed, please review. Fixed. Fixed. Fixed. Fixed. Fixed. Fixed. Sure, in a hour. @romani Done. Yes. Most of the ant tests just executes the task. Should I rewrite them too?. @rnveach @MEZk Fixed. @MEZk Fixed. @MEZk @rnveach @romani I've added a custom RootModuleChecker to the tests and check that is was called with appropriate files. Is it acceptable, or there is better way?. @MEZk Fixed. The class CheckstyleAntTaskStub from the CheckstyleAntTaskTest file overrides this method. Fixed. Fixed. Fixed. Fixed. Fixed. Fixed. Fixed. Added two more rows for fileset and path. Fixed. Fixed. Yes, the buildOptionsExcludeHidden method will be removed. Fixed. Fixed. Renamed to MultiThreadModeSettings. Fixed. Fixed. Fixed. Removed. Removed. It is a part of DefaultConfiguration, which is serializable and therefore it also should be serializable. Renamed. Added method to ThreadModeSettings. A test is using PowerMock to mock a constructor (https://github.com/checkstyle/checkstyle/pull/4420/files#diff-06fde9f319ac6e31f8a808d413fe1f8eR593) and it is using equals to compare arguments. Removed method. Added support to ant task. @romani told that CLI arguments should be hidden during the gsoc (https://github.com/checkstyle/checkstyle/issues/4370#issuecomment-303486328). Shouldn't ant properties also be hidden?. A config instance must be serializable as it used in the PropertyCacheFile (https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/PropertyCacheFile.java#L117). Probably, it should be implemented in the other way.. Moved to CommonUtils. Added to visible CLI parameters and prefixed with (experimental). Removed method from interface. Removed. Removed. Fixed. @romani Created issue: #4577. Added new constructor. Removed. I would also vote for TreeWalkerAuditEvent since it is produced by TreeWalker and, therefore, for TreeWalkerFilter. @rnveach These interfaces are empty. It is impossible to implement polymorphic behavior using these interfaces (only via obj instanceof OneModuleInstancePerApplication). Probably, they should be replaced with annotations. Here is the discussion issue: https://github.com/checkstyle/checkstyle/issues/4473#issuecomment-309869446\nPreviously, there were a reason to implement these markers as interfaces - one of them has a method clearState for clearing the state. Though the CheckCloneService calls finishCloning method, it is defined only for fileSet checks and therefore moved from OneModuleInstancePerThread interface to fileset abstract class.\nShould I replace interfaces with annotations here? . It is used by MultiThreadTreeWalker: https://github.com/checkstyle/checkstyle/pull/4890/files#diff-ed70c03b41fef2d36d983f70d83c36f9R170. @rnveach This comment is about the method. I've tried to disable InstanceofChain inspection and explain the suppression. Should I move this comment to javadoc?. Removed. Fixed. Fixed. Renamed to CheckerExecutionResults.\nExtended docs a bit. Previously this class also holds a file and file messages, but now it indicates only whether the execution successful or not. Probably, we could replace this class with just CheckstyleException. Moved processFilteredFiles and processFile methods to AbstractChecker class.\nNot sure about process, finishFileSetChecksProcessing and destroyFileSetChecks methods - all of them calls appropriate super method. Removed CheckContextHolder, moved Context to the AbstractCheck class. > Also what about AbstractFileSets, does it require a ThreadLocal like this? It contains file information too.\nIt also requires changes, I'll prepare them soon. > Also since it contains contents of a file, file violations and file contents, shouldn't it be named something like FileContextHolder?\nRenamed to FileContext - I'm not sure if Holder adds more information here. They also calls init() method from the different base classes: one from the AbstractCheck and another from FileSetCheck. Should I also create a common interface like Initializable or something like that?. Fixed. Changed check -> module. Removed. @rnveach Moved to the property file. Not sure if I could translate the message to other languages. Should I just translate them via some translation service or there is a translation group which could help with this task?. @rnveach Changed CheckerCloneService, now OneModuleInstancePerThread takes precedence.. > Also why didn't you mark AbstractCheck and AbstractFileSetCheck but AbstractJavadocCheck. Once you mark the base, all checks are now forced under that if it is the strongest type.\nAs far as I remember, there was a problem with blockCommentAst field. I think, it is better to move AbstractJavadocCheck changes to another PR. Suppose we have two instances (named foo and bar) of some FileSet class. We call foo.log(...) and then foo::messageCollector contains one message. However, after calling bar.log(...) the foo::messageCollector will contain two messages, because the field is static and we're inside the same thread. Not sure if this is the expected behavior.. > Suppose we have two instances (named foo and bar) of some FileSet class. We call foo.log(...) and then foo::messageCollector contains one message. However, after calling bar.log(...) the foo::messageCollector will contain two messages, because the field is static and we're inside the same thread. Not sure if this is the expected behavior.\nAgain, not sure if we can use static here. At least, there were some failed tests, when I changed this field to static. Moved to properties file. @sabaka I tried to do so, however, it leads to test failures, e.g https://github.com/checkstyle/checkstyle/blob/master/src/test/java/com/puppycrawl/tools/checkstyle/XMLLoggerTest.java#L136\nI'm not sure, if this is a correct behavior. As for me, we should force closing tag here.\n@rnveach @romani What do you think?. @sabaka done. @rnveach Extended docs. @rnveach Extended doc. @rnveach This is similar to this (https://github.com/checkstyle/checkstyle/pull/4933#discussion_r133356702). Previously, fileStarted prints opening tag, and fileFinished prints closing tag. In case, if a developer forgets to open or close tag, the XMLLogger will not print corresponding.\nProbably, there was a reason for it, that is why I decided not to change existing tests. However, in my opition, XMLLogger should open (or close) missed tags. @romani , please, take a look at my explanations to @rnveach \n\nSuppose we have two instances (named foo and bar) of some FileSet class. We call foo.log(...) and then foo::messageCollector contains one message. However, after calling bar.log(...) the foo::messageCollector will contain two messages, because the field is static and we're inside the same thread. Not sure if this is the expected behavior.\n\nIf we have a static field, then all checks in the same thread will have the same list of messages.. Fixed. Fixed. Fixed. 1) Yes, only TranslationCheck\n2) Extended docs. Fixed. Fixed. Extended docs. @romani here (https://gist.github.com/sabaka/3fa88c9b601c3c8819244834abf1a07f) is a gist from @sabaka, if I understood you correctly. It shows the difference between static thread local and thread local member.. Fixed. Fixed. @romani, replaced reflection with additional audit call. Please note, that XMLLogger prints additional <?xml version..., <checkstyle... and </checkstyle> tags on the second call. The full output for this test is:\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<checkstyle version=\"8.2-SNAPSHOT\">\n  <file name=\"Test.java\">\n    <error line=\"1\" column=\"1\" severity=\"error\" message=\"key\" source=\"com.puppycrawl.tools.checkstyle.XMLLoggerTest\"/>\n  </file>\n</checkstyle>\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<checkstyle version=\"8.2-SNAPSHOT\">\n</checkstyle>\nI am not sure if this is an expected behavior. There are no tests for re-using the same XMLLogger for another audit report. Probably, we could just remove the fileMessages.clear(); line from the XMLLogger. @romani I've added additional output stream, please review. @rnveach I could make it package-private. Previously I have updated outputStream in tests via reflection, but @romani asks me to remove it. > Each file gets a brand new instance, right?\n@rnveach  No, actually, there is only N checks clones, where N is the number of threads.. Added notes about instances. Fixed. Fixed. Added note about files\nAdded note about multi-file validation. Fixed. Fixed. Fixed. Added note to the FileStatefulCheck\nNot sure if we should add this note to GlobalStatefulModule, because it does not force check to be immutable. Fixed. Fixed. mmutable here is mutable. @romani For FileSet and AbstractCheck modules. Is it correct to name them as \"checks\"?\nShould we also rename annotations? They are named [Stateless / FileStateful / GlobalStateful]Module. > we we still do clones? I though we already discussed that this is not requied.\nWe are not cloning them, they are created from the XML configuration, when needed. How they should be named?. Because it is still called from the separate threads. @rnveach asked me to add this note. @rnveach could you please give me the issue link?. > non of Checks is following it and will never do.\nWhy? All Checkstyle checks uses final fields where possible. Or do you mean 3rd party checks?\n\nall Checks properties are fields.\n\nYes, but a check may hold non-property mutable field. This note covers all fields, not only properties. Fixed. Fixed. Fixed. > Checks arguments should be (usually) immutable.\nSure, but there are some properties of type String[]. By equal (but not the same) configuration I mean, that two check instances will not hold the same array. Should I remove this note?. Fixed. Fixed. Fixed. @romani This is not exactly what I mean. A \"field\" does not necessary mean \"property\". E.g. AbstractSuperCheck contains a final field, which holds a check context. \nHere is a check with final property field: IllegalCatchCheck.\nBoth properties are mutable, but they are marked as final. This is what I mean by \"All Checkstyle checks uses final fields where possible. \"\nI could remove the note about \"best practice\" from the javadoc if needed. > What is a point to create thread(s) for this ?\nThreads are created for files, not for checks. Two separate threads, processing two different files might call this check at the same time.\n\nIf there will be two TranslationCheck in config, do you plan to create two threads for them?\n\nIf there are two TranslationCheck in config, there will be 2 instance of this check, each per configuration. Please refer to my previous answer about threads - \"Threads are created for files, not for checks.\". Fixed. Fixed. Fixed. Fixed. ",
    "sagar-shah94": "in if part we are passing targetSourceLine=getLines()[rcurly.getLineNo() - 1 in validate function and in else part we are passing targetSourceLine=\"\" in validate function .what we will pass at the time of function call if we put logic in validate function?. Should i do that way?let me know i will modify code and push that code. @rnveach getLines() method can not be called in validate method because we can not call non static method can not be called from static context.. if i make different files and put those files in same folder so i will not be able to make all interfaces like foo,bar etc in every file. ok sir i will change interfaces name and push code . Are following files names fine?\nInputSeparatorWrapForTestDot.java\nInputSeparatorForTestComma.java\nInputSeparatorWrapForInvalidOption.java\n@MEZk . @romani getLines() function can not be called in validate method because we can not call non static method can not be called from static context.. \nSee this error i am getting.\n@romani . should i move all files in whitespace/separatorwrap?. @rnveach so i should just copy and paste same content in 3 files?. @rnveach @romani what am i supposed to do ?. @MEZk no problem sir .i will copy paste and let u know. This test case is not working .i will fix my code and push again.. Done. Done\n. Done. Done. @MEZk done.. @rnveach fixed this case.. Done. Yeah i was working on that.\nhttps://github.com/checkstyle/checkstyle/pull/3926\nAbove is pull request for that, all asked changes have been done.\nBut until it gets merged i had to handle that case that is why added it.. Done.. Done.. Done.. Done.. Done. @rnveach @romani Done please verify. Done.. Done.. Done.\n. i did not get what u suggested\n@rnveach . now i am using set within method so issue will not occur.\n@rnveach . Done. Done. Done. Done. Done. Done. Done. Done. Done.. Done.. Done.. Done.. Done.. Done.. Done.. Done.. @rnveach \ni have shared diff report ,u could check it does not change original logic.\nit should not show violation with new option because we can put default anywhere as long as it is surrounded by case.\nin below example it should not show error.\nhttps://sagar-shah94.github.io/issue_4078/lombok-ast/xref/home/sagar/IdeaProjects/contribution/checkstyle-tester/repositories/lombok-ast/src/main/lombok/ast/Templates.java.html#L818\n. so whatever done in code is fine @romani ?\npls verify diff report\nhttps://sagar-shah94.github.io/issue_4078/. i also want clarification on that because i think we should allow anywhere as long as surrounded by case. Done.. Done.. Done. Done. Done. Done. Done. @rnveach all changes are done.please verify and approve. link to diff report\nhttps://sagar-shah94.github.io/issue_4078/. Should i create this as issue?. Done.. Done.. Done.. Done.. Done.\n. Done. @romani when i changed my code to above code, test case was failing.. because if skipIfLastAndSharedWithCase is true it will not go to else part but according to logic it should go into if condition only if containsCaseAfter(ast) is also true. \nThis is how i can modify this code to get rid of !skipIfLastAndSharedWithCase.\nIs this fine?\n@romani . so should i implement your code or mine?\n@rnveach. @romani please give your opinion .which of above two should be implemented?. you want me to combine all content wherever wrap content css is used?. @romani removed spaces from all tags on which css is applied.. Done.. Done.. Done.. To handle such case\n        switch (i) {\n            case 1:\n                break;\n            default: // violation Default should be last label in the case group.\n                break;\n            case 2:\n                break;\n        }. Why need to return token ?\n@romani . Done.. Done.. Done.. Done.. Done.. Done.. Done.. Done.. Done.. Done.. Done.. Done.. Done.. Done.. Done.. Done.. @romani \nIt is not allowing me to use ImmutableSet in code. it throws following error.\nDisallowed import - com.google.common.collect.ImmutableSet. [ImportControl]\n. Done.. Done.. Done.. what kind of UT are u talking about?i did not get. Done.. Done.. Done.. Done.. Done.. i dont want to match token i want to match exact string that is why using this.. Done.. @romani\nI will not be able to merge both methods into one because in getSummarySentence i am trying to fetch details upto first period, and in getFirstSentence we will be getting whole first sentence.I have been trying to merge these 2 methods but is not working because purpose of both methods are totally different that is what the reason why i had to introduce my own method.. @rnveach can you please tell me how we can match against token?\ni think we need to use absolute string to match. Let me know if i am wrong.. ",
    "ps-sp": "\nIs commit better than the method with a good name?\n\nYou mean I should have used a new method instead ? And yes I think I should have done that !\nAs far as the other points are concerned, some logical errors arise due to my code which I couldn't foresee. I hope once they are resolved CIs would go green ! Also just to be clear what exactly do you mean by \"UTs\" ? unit tests, right !. Done ! made it checkForEmptyCase. Done. Done. Changed to checkIfCaseHasStmt.\n. Done.\n. Done. changed to checkIfCaseHasText. Done.. There were cyclomatic complexity issues (exceeded the default max by 1 ) even when I used a single separate function. Hence I used 3 separate functions.. Yes I will do that. (Actually I copied it from another test file , you might want to have a look at this: https://github.com/checkstyle/checkstyle/blob/master/src/test/java/com/puppycrawl/tools/checkstyle/checks/blocks/EmptyCatchBlockCheckTest.java ). @rnveach Yeah, I am so sorry. I copied the wrong link. I meant this file: \n\nhttps://github.com/checkstyle/checkstyle/blob/master/src/test/resources/com/puppycrawl/tools/checkstyle/checks/blocks/InputEmptyCatchBlock.java\n\nAnd yes I understand what you mean. I was just trying to point out that we should delete the headers in this input file too.. Done.\n. Done.. Done.\n. using an else if there was giving an idea inspection check error saying something about if statement with identical branches ! And other way that I could think of for getting rid of that error was to merge the conditions of the two last else-ifs but then the boolean condition to be checked for would have gone quite complex hence I resorted to doing this.. @romani\nI am sorry I thought you asked why did I use a separate method. I processed it separately since to check for empty case the slist token which is examined is the next sibling of LITERAL_CASE and hence findFirstToken can't be used there directly ! Also since we are to log for empty case, leftCurly in the visitToken method would have to be made equal to the argument supplied i.e ast. Hence there has to be some amount of separate processing involved I feel and it also helps avoid confusion imho. (In other cases the slist token which should be examined for empty block are generally a child of the argument ast supplied but when the ast argument is of the type LITERAL_CASE then the slist which is to be examined is a sibling and hence one would to either use ast.getNextSibbling() or ast.getParent().findFirstToken(TokenTypes.SLIST) and hence the need for separate processing).. @rnveach  @romani  Yes, you are right ! It is better to remove it. I will remove it.. Ohh I am sorry ! I didn't know if it could be supressed ! would it be done using @supressWarning or something similar ? . I was using overshadow to denote for example when a local var. in a method would have the same name as an instance variable (overshadow it). I was using overlapping only when a local var and an instance var with the same name are there in the same expression (overlapped with each other). But yes you guys are correct it adds confusion to the mix ! Should I remove the word overshadow from everywhere ? or should I somewhere mention the intended difference between overshadowing and overlapping ? \n(I feel it would be alright to remove)\nThanks . Yes you are right ! I will remove it ! \nThanks\n. Thank you :). @romani @Vladlis Is this why the wrecker is failing ? If yes, should I then resort to using \n else {\n        if(...) {\n        }\n}\n\ninstead of the else if I've used at the line 479 ? \nThanks. @rnveach ! I wasn't sure hence I asked ! I am unable to view the wrecker details actually ! It keeps on giving me a \"401 unauthorised\". The wrecker.yml roman pointed me out to had a NoExceptionTest and apart from adding a @noexception all I did was refactor a few things and change a few comments, so I thought  @noexception might be responsible. . Why do you not like the purpose of that method @MEZk  ? Can you please let me know what exactly is wrong with it ! There's even another method hasText which serves a similar purpose ! Please be more specific as to what do you want changed ! And yes I was wrongly under the impression that LITERAL_CASE is a default token. I will regenerate the diff reports.. isCaseHavingText is using the instance method hasText do you think it really is necessary ?. @romani Also since the slist to be analysed for detecting empty case token is its next sibling and not a child (like I've already mentioned) and hence whenever a case token is being checked the program would have to work a bit differently hence there needs to be a little bit of \"separate processing\". (In fact I think there's also similar separate processing invovled for an empty switch, look at line 158). @romani yes the blocks are all identical and if we were just verifying blocks then no special processing would have been necessary. We are investigating empty case. Hence all the blocks inside the case need to be checked. for example:\ncase 1: {  } {//something         //NO violation\n} {System.out.println(); { } }         //NO violation\n\nNow I need to loop through all the blocks in the case to determine if case is empty. (I can't say case is empty looking at just one of the blocks). And that's all I am doing in isCaseEmpty . Done. Done. Done. DONE\n. DONE\n. DONE. DONE\n. @romani yeah ! \nconsider:\ncase 1: ; \ncase 2: { }\n\nIn both examples the case token would have its next sibling as a slist ast. In both examples this slist ast would have it's first child of type slist ast. The first one's child would have : as text. The child of the second slist ast one would have '{'. If I would have used ast.getNextSibling.findFirstToken(TokenTypes.SLIST) here and returned that then later hasText(leftCurly) in visitToken would generate a NullPointerException. \n. @romani \nExactly ! Also, I said \n\ncase token would have its next \"sibling\" as a slist ast... slist ast would have it's first child of type slist ast. \n\nI acknowledge LITERAL_CASE never has SLIST under it.\nThat's what I have been trying to say that to inspect case token we are having to investigate its sibling and not children ! I was also feeling that there's something wrong in the way it is coded. CASE_GROUP should be used. But STILL, like I pointed out if you do ast.findFirstToken(TokenTypes.SLIST) even for a CASE_GROUP, you are bound to get NullPointerException in hasText() one way or the other. \n@MEZk \nYes, hasText seems to have issues because it was giving NullPointerException even for SLIST for which it was designed. But findRcurly seems like extra work (for the program) which can be deferred until some situation makes it absolutely necessary to have findRightCurly because everything else apart from case seems to be working fine. Only case seems to be the only exception as of now which can be handled with just findLeftCurly. \nSo what do you suggest ? . @romani Would it be alright if I redo the logic for hasText ? That's where the problem is I feel and I think @MEZk also feels that way ! \n. @romani  Another option, lemme just confirm if it'd work properly:\nreplace \"{\".equals(ast.getNextSibling().getFirstChild().getText())) by \nast.getNextSibling().getFirstChild().getType() == TokenTypes.SLIST \nWould that be alright ?\nPlease address. \nThanks. yes will do.. yes, will do. . DONE.\n. Done.. Done.. Done.\n. Done. Now everything is in the next paragraph. Renamed the class from 'E' to 'C'.. Done.. ahh ! I am so sorry. I will fix it. Thank you.. done\n. This function was exactly at the thresholds for the complexity checks and statement counts. So, had to restructure it. Also restructuring might prove to be useful in the future when more tokens might need to be added to the check. @rnveach Should I make two commits then ?  One for refactoring one for adding LITERAL_NEW ?. Yeah, but wouldn't the need for switch also depend on how the details get collected. Perhaps we might not need many branches for different tokens that get added ? I feel this can be managed in issue #3547 ? What do you think ?. Agreed. Will do. Yes. will do.. Approach 1. seems better. In my humble opinion, approach 2. would make things more complex than they are.. Done.. @rnveach Done.. Done.. Done.. Done.. @MEZk will do.. @romani  @MEZk \nThe diff reports will never be able to generate many differences. The reason is:\n\nWhen lambdas in java files are parsed and the ast is created, if the lambda has multiple arguments, i.e arguments like (a,b) and so on then they are treated as parameter definitions.\nSince they are treated as parameter definitions beginTree and collectDeclarations end up collecting lambda parameters as local variables. (lambda parameters get collected in the varIdents of the enclosing BlockFrame)\nSince local variables are not to throw any violations unless overlapping (issue #3423  fixed) there won't be any violations in the master for them.\n\nBut my patch actually stops them from getting collected at all and hence again there won't be any violation when there are multiple lambda parameters.\nIN SHORT: lambda parameters enclosed in ( ) are collected as local variables in the block and since issue 3423 there's to be no violation for non-overlapping local variables. Hence only difference will be when there's just a single lambda parameter that too without ( ).\nHave a look at this:\n$ cat TestClass.java \nclass InputAllowLocalVars {\n\n    private String s1 = \"foo1\";\n\n    void foo1() {\n        final java.util.List<String> strings = new java.util.ArrayList<>();\n        strings.add(\"foo1\");\n        strings.stream().filter((s1) -> s1.contains(\"f\"))\n            .collect(java.util.stream.Collectors.toList());\n    }\n}\n\n$ cat TestConfig.xml\n<?xml version=\"1.0\"?>\n<!DOCTYPE module PUBLIC\n    \"-//Puppy Crawl//DTD Check Configuration 1.3//EN\"\n    \"http://www.puppycrawl.com/dtds/configuration_1_3.dtd\">\n<module name=\"Checker\">\n<module name=\"TreeWalker\">\n    <module name=\"RequireThis\">\n        <property name=\"checkMethods\" value=\"false\" />\n        <property name=\"validateOnlyOverlapping\" value=\"false\" />\n    </module>\n</module>\n</module>\n\n$ java -jar checkstyle-7.7-SNAPSHOT-all.jar -c TestConfig.xml TestClass.java\nStarting audit...\nAudit done.\n\nThe jar I've created is using the master branch of course. This is exactly the example using which @MEZk  reported the issue, only difference is I've enclosed the lambda parameter in parenthesis which makes the lambda parameter get collected as a local variable resulting in no violations.\nConclusion: Both the master branch and my patch will not trigger violations when lambda parameters are enclosed in ( ) but for different reasons. And, the master will also trigger violations when there's just a single lambda parameter and is not enclosed in ( ) but my patch will not.. Should I create the commit in this pull request itself ?\n. Thank you for pointing that out. Initially I had used iff (= if and only if) but actually that's a mistake since for some, even option=SAME would result in violation and hence if should be used. I will correct it.. Done.. Done.. Done.. yes ! the methods were previously static so I let them be ! that's the only reason why targetSrcLine is being passed aroung ! Should I make them non-static so that the getLine method be called from them ?. I can try to update the logic and make it to be violation if needed ! I previously felt that it violated the philosophy of ALONE_OR_SINGLELINE ! But now that you have explained why is it so in a comment in 4057, I understand it. Should I revert this ? Should xdoc  be updated to mention this exception ?. Again I used a violation here since lambda wasn't the only thing that was on the line and this to my mind was an not correct for ALONE_OR_SINGLELINE. I feel that no more option should be added, logic can be updated if no violation for ALONE_OR_SINGLELINE is desired and xdoc can be updated then to mention this exception.. Actually, the overridden equals is being utilized here which compares the variable names too. There is no intention of comparing the references.. param == ast won't work for the same reason. There's no intention of comparing references. Variables names are being compared using the overridden equals.. @MEZk @romani \nHere. This is how I'd coded it initially. The intention was to compare the variable names rather than objects/references (ast nodes). So using == wouldn't work. Please correct me if I am wrong.. @rnveach . @rnveach I had actually done that first. But then @MEZk suggested and I too felt that equals would have been better (It's in one of the outdated threads, I've tagged you in it). Now your suggestion makes sense too since it isn't that clear that names are being compared. So what should  I do finally ?. Done. Used parent.getFirstChild().getText().equals(ast.getText())\n. Done. used param.getText().equals(ast.getText()). Done.. DONE. Done.. @rnveach Actaully it wasn't recognizing leading asterisks after a newline so I had two options either to modify the entire rule or add the alternative | '*' {previousTokenType = NEWLINE}?\nI chose the former and just tried to simplify the token def as much as I could based on the basic format of javadoc. Since the UTs seem to be insufficient, I was hoping to realize if there is any problem with this update, with the regression testing tool which is to be developed without which this PR isn't getting merged anyway.. Perhaps if I just added the alternative then regression testing would not have been necessary. Anyway, I felt it was better to simplify things as much as I could.. no only when the newline is with \\r. @rnveach I was also wondering that where exactly would my token def and the present token def would create the differences but couldn't find anything and concluded that I shall make a PR and find if there are going to be problems in regression testing..     JAVADOC -> * Test case for detecting CR newlines.\\r* @author Author Name\\r [0:0]\n    |--LEADING_ASTERISK -> * [0:0]\n    |--TEXT ->  Test case for detecting CR newlines. [0:1]\n    |--NEWLINE -> \\r [0:38]\n    |--LEADING_ASTERISK -> * [0:39]\n    |--WS ->   [0:40]\n    |--JAVADOC_TAG -> @author Author Name\\r [0:41]\n    |   |--AUTHOR_LITERAL -> @author [0:41]\n    |   |--WS ->   [0:48]\n    |   --DESCRIPTION -> Author Name\\r [0:49]\n    |       |--TEXT -> Author Name [0:49]\n    |--NEWLINE -> \\r [0:60]\n    `--EOF ->  [0:61]\nHere is the tree, and yes antlr fails to recognize new lines. Sorry, I didn't realize that part. . Should we create an issue for ANTLR project ?. @rnveach Actually the tests are spit out by this in contribution as you might know. So I was just sticking to it. All this should be resolved in 4381. . Issue created for antlr4.. @MEZk got it. Also, there are some other tests in TreeWalkerTest.java where nothing is asserted. We might need issues for that too perhaps ?. Done. Done. Done.. Done. Yes it can be done like that as well. But again we will have to catch the runtimeexception thrown by the verify method in there and again fail the test !. yeah ok ! It was doing that but I thought that the convention was to use only fail. will do. Done.. Done. Done. There are cases of nested javadoc tags and HTML within javadoc tags. They can't be handled without allowing other tokens. For example look at this:\n* @customTag <a> href=\"https://github.com/checkstyle/chestyle/\"</a> text\nAlso there can be nested javadoc tags.. @romani @Vladlis But then if the user uses known javadoc elements inside a custom tag expecting us to support the known ones ? . @rnveach \nYes it can be made to recognize custom tags using the -tag option. It also interprets the nested HTML and javadoc tags inside the specified custom tags. Have a look at this. Has been stated there that: \n\nLike any block tag, this argument's text can contain inline tags, which are also interpreted.\n\nnested HTML gets interpreted too . I executed javadoc. It interpreted html too. Check it out.. So, here's the thing. The javadoc tool from oracle doesn't seem to support inline custom javadoc tags without writing a taglet/doclet. But if some other tool does or a user utilizes his/her own taglet/doclet, be it a block tag or an inline tag, I suggest that we our ASTs should represent everything that's standard rather than representing everything as text since that's what a user would expect us to do i.e not interpret the standard components as plain text. Perhaps we can just cut out the description node and we can describe all this in checkstyle documentation. What do you think ? . yes a UT was failing. This had to rely on isJavadocComment for the test to pass. I created the PR anyways thinking that we can discuss this in PR. I felt it was CheckTest support class. Also we will need to add a few methods for JPTT  as per #4381 . @rnveach I am so sorry. I pointed to the wrong links. Corrected them now. Please have a look again. And yeah I will make sure to mention whatever I wish to discuss in the first post\n. Ok. Should we consider renaming it to BaseTestSupport ? . ok. got it \ud83d\ude04 . yes. Sorry. Missed that. This one shall be needed in #4451. I didn't realize we won't be needing it here. I shall take it out.. hmm. Would make the commits more readable yes. The perhaps I will clear out #3796 and #4381 first.. I used ast for abstract syntax tree ? So should it still be changed ?. ok. I get it. Sorry. It should be changed since we have units suffixed with AST.. Done\n. Done. Done\n. Done. Done. Done.. Done. Done in PR #4486. Done.\n. Done. Deleted BaseAstTestSupport.     java.lang.AssertionError: unexpected output: F:\\CS\\workspaces\\Git\\checkstyle\\src\\test\\resources\\com\\puppycrawl\\tools\\checkstyle\\checks\\whitespace\\emptylineseparator\\package-info\\test2\\package-info.java:2: 'package' should be separated from previous statement. \n    Expected :0\n    Actual   :1\nThe aforementioned UT was apparently passing on the basis of isPrecededByJavadoc which used this version of the overloaded function isJavadocComment which in turn called this version of isJavadocComment. Both these versions were previously separate from isCorrectJavadocPosition.. Done.. Please confirm if this change is fine here or should we create a separate commit (probably a minor:) for this.. Yes. Will update PR.. Yeah they do, atleast in the way I am trying to solve this, they do. I think we need to have these changes here.. Actually, the javadoc tool is able to recognize package.Class.NestedClassAtDepth1.NestedClassAtDepth2#member kind of constructs. So we can't recognize class.. Done.. Done. These javadoc tress and others alike present in other java files need to be updated to be synchronized with current checkstyle version once the currently prioritized ANTLR issues are resolved.\nIt doesn't seem efficient to update them in this PR and then keep updating them with every other ANTLR issue in line. Will Create an issue for it once done with ANTLR changes. It has happened since I've copied the expected results from idea after executing the tests. It doesn't make any difference anyway since before comparing the trees we replace the CLRF with LF. The UTs mentioned in 4550 comment comment continue to fail because of this change.. Done #4640 \n. Yes, there already are. The only case I've encountered is when javadoc inline tag is closed immediately after the reference. Please have a look at InputAllJavadocInlineTags.javadoc. The last tag in the file I mentioned would be it. This one: {@value lang.Integer#MAX_VALUE}. ok. will do.. Consider this input:\n@see https://www.something.com\nJust for such cases I have been forced to use _input.LA(1) == '.' || ... for PACKAGE token. If I don't do that https gets treated as PACKAGE token. Following is the tree produced by my checkstyle master for the above input:\nJAVADOC -> JAVADOC [0:0]\n|--LEADING_ASTERISK -> * [0:0]\n|--WS ->   [0:1]\n|--JAVADOC_TAG -> JAVADOC_TAG [0:2]\n|   |--SEE_LITERAL -> @see [0:2]\n|   |--WS ->   [0:6]\n|   |--REFERENCE -> REFERENCE [0:7]\n|   |   `--PACKAGE -> https [0:7]\n|   `--DESCRIPTION -> DESCRIPTION [0:13]\n|       `--TEXT -> ://www.something.com [0:13]\n`--EOF -> <EOF> [0:33]\nAlso, please have a look at PR 4550 comment and PR 4550 comment. This because of the predicate (_input.LA(1) == '.' || ...) I've added after PACKAGE token. I haven't added anything like _input.LA(1) == EOF in there since that is an impractical case for actual java files, so I added NEWLINE before EOF there so that never can get recognized as PACKAGE as Character.isWhitespace(_input.LA(1)) in the predicate would pass for NEWLINE. I've explained the reason for adding the predicate below. Sorry. These are the inputs having that test case:\nInputLinkToPackage.javadoc\nInputAsteriskInJavadocInlineTag.javadoc. This input InputWrongHtmlTagOrder.javadoc would result in a FailedPredicateException. Because of entirely removing the alternative which contained notifyErrorListener(...), cases like <tag1> xyz </tag2> were getting parsed, so I had to use predicate {isSameTagNames($htmlElementOpen.ctx, $htmlElementClose.ctx)}? in there. The test which check messages for no viable alternative have nothing to do with this branch.. This else if branch is to be only taken if the one above it wasn't take for sure. To extract it separately would be to increase cyclomatic complexity by 1 as I would have to add one more condition to the extracted branch.. Done. changed to \nMethod to generate an error message about missing HTML tag if the ANTLR error is indeed because of the missing tag.\n. Done.. Done.. Done.. Done.. Done.. Done.. Yes, I think it should be impossible because a java file cannot have EOF following documentation.\nUPDATE: It is possible since the javadocs are fed separately to the javadoc parser . @romani my input lacks quotes. My example isn't parsed without error even from javadoc tool but site is generated nonetheless. Please have a look at [PR 4550 comment] (https://github.com/checkstyle/checkstyle/pull/4550#issuecomment-312521474), it also has a link to javadoc tool execution log for such input.\nWithout context how can string be separated from package ? I @ see https://... will result in treatment of https as package without the predicate I added, since there are no double quotes to tell parser that it is rather a string. I feel this is amongst the most efficient way to distinguish between the two.. That's what I did, in a way. The thing is it will not be efficient to look ahead till the end of input in lexer to find a \"non related symbol\". So I just ensure that the token immediately following package is a related one. Anyway, the right syntax is to use \" to let the lexer know it's a string. Also, our lexer can't identify text, it can just identify one CHAR at a time and the parser builds text out it.. Done.. Done. . @romani I didn't understand why did you insert WS (whitespace) in package token and how is that acceptable for a valid package name to have WS. Can you please explain it to me ?. Done.. Please let me know if you agree.. relocated method to JavadocUtils and made it public, it was needed for UTs added. Would that be bad design ? This method, though currently utilized only by class DetailNodeTreeStringPrinter has a general nature to it as its name suggests and it might be needed for other things too in future whenever someone needs to parse javadoc using JavadocDetailNodeParser#parseJavadocAsDetailNode since it only accepts argument of type DetailAST. Another approach would be to rewrite this logic again for my UT or use \nWhitebox.getMethod(DetailNodeTreeStringPrinter.class, \"createFakeBlockComment\", String.class);. @romani \ndone. #4752 . will create PR in a while. . updated description.. updated description. updated description.. No. 3810 is only to allow javadoc trees to be nested when there is SINGLETON_ELEMENT in tags. For all tags to be nested all tags must be closed, which can't be ensured of course. it was resulting in violation about method with same name as field. I didn't feel that adding an exclusion would be for this class would be appropriate.. In #L882 (WS | NEWLINE)* preceeds ((WS | NEWLINE)+ description)? for cases in which reference in @see tag is followed by just a new line and no description, like in the following tree:\nJAVADOC -> JAVADOC [0:0]\n|--LEADING_ASTERISK -> * [0:0]\n|--WS ->   [0:1]\n|--JAVADOC_TAG -> JAVADOC_TAG [0:2]\n|   |--SEE_LITERAL -> @see [0:2]\n|   |--WS ->   [0:6]\n|   |--REFERENCE -> REFERENCE [0:7]\n|   |   `--PACKAGE -> something [0:7]\n|   `--NEWLINE -> \\r\\n [0:16]\n`--EOF -> <EOF> [1:0]\nwhich was produced for input \n```\n* @see something\n``. It was also resulting in violation about method name and field name being same.. To be done #4785 . will do.. This change results in shippable failure for profile-Ppitest-checkstyle-tree-walker,no-validations. This apparently happens because of decreased line count inDetailNodeTreeStringPrinter` class. As can be seen the surviving mutation is same between master pit-test reports and patch pit test reports and all the new mutations are being killed. pmd if I remember correctly. Will confirm once again.. Looking at comment made by @rnveach at 4643#discussion, it seeems that he might want to revert this change. @rnveach Can you please address this point too. Thanks.. @Vladlis yeah, reverted.. Done. I had to use key at javadoc/messages.properties#L3 here to produce error message. This is the same key that is used to produce the original error at JavadocDetailNodeParser.java#L520. This case is similar to the existing case at AbstractJavadocCheckTest.java#L65, which has been modified in this PR. \nUsage of this key results in no translations for phrase no viable alternative at input which should be encountered by users significant number of times. We can look into improvement of this key and other such cases in another issue perhaps, what do you think ?. Done.. @romani ok.. Done. \n@romani \nI couldn't find any existing public methods to generate an error message from ParseErrorMessage object. Another option would be to rewrite the logic in the method obtained through reflection again for the UTs. And then a ParseErrorMessage object won't even be necessary and we would then use LocalizedMessage object as is used here at DetailNodeTreeStringPrinter.java#L92. @rnveach \nDone.. I agree with @Vladlis .. @rnveach Please address.. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocNodeImpl:79 Rule:AvoidFieldNameMatchingMethodName Priority:3 Field hasUnclosedTag has the same name as a method.\n[INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocNodeImpl:87 Rule:AvoidFieldNameMatchingMethodName Priority:3 Field isUnclosedTag has the same name as a method.. [INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocNodeImpl:79 Rule:AvoidFieldNameMatchingMethodName Priority:3 Field hasUnclosedTag has the same name as a method.\n[INFO] PMD Failure: com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocNodeImpl:87 Rule:AvoidFieldNameMatchingMethodName Priority:3 Field isUnclosedTag has the same name as a method.. fair enough. how about calling the field hasTagUnclosed or containsUnclosedTag . @rnveach \n\nIf we are going to keep this, can another place call this method. What about TreeWalker#createBlockCommentNode?\n\nThe way things are done are similar in both methods and I can't see, not yet at least, why it can't be done.\n\nSince this is off topic, if we are going to keep it as a utility method with the change I asked about, it should probably be in another PR.\n\nYes, rather in another issue. No point holding this PR up unnecessarily as it might take time and also we will need to lower PIT coverage. So, I will create another issue, revert the movement of this method here and will grab the method by reflection for UT in this PR.. New Issue created for this; #4785 \nCHANGE REVERTED. Done. rename to containsUnclosedTag. Another option would be to remove reference at JavadocUtils.java#L113 and directly call JavadocTokenTypes.class.getDeclaredFields() in for loop at JavadocUtils.java#L117. Added this method which can be overriden by extending checks rather than using a field since this looked better. \nIf a field was used then either it would have to be overwritten using constructors in extending subclasses or using instance initialization blocks. Also, there would have been problem making fields public and then we would have required a public getter kind of method.. Moving switch block to another method overshoots the ncss count for that method. Another option would thus be to  split the switch block into two tests which seemed inappropriate to me.. Done.. To make SummaryJavadoc pass. Done.. Done. renamed to getHtmlTagParentTypeWhenClosed. . \nYes it shouldn't be possible any longer. This one at messages.properties#L1 also seems unutilized.\nThe reason I didn't remove unrecognized one is that right now it looks like that report should be called under all circumstances. But it might so happen that under some weird input or for some other reason ANTLR fails to report to listener and then we might again require it. So I thought that after some time of usage when we can be sure that never does ANTLR fail to report to listener, we can remove all the unutilized message keys together in one issue so that all other message.properties get cleaned.. @Vladlis \n\nPlease remove this property.\n\nDone. Checkstyle inspection for checkstyle files was failing. SummaryJavadoc was failing. SummaryJavadoc has ties with htmlElement rule. Structure for this file changed with the update to grammar and SummaryJavadoc was detecting missed period for javadoc paragraph. I will upload regression reports for SummaryJavadoc.. @romani \nYes, that sounds nice. Also, right now checks would be forced to skip javadoc if javadoc node hasUnclosedTag, they can't \" simply remove all tags and keep only their text.\" right ?\n. renamed to getMissedHtmlTag. Also, updated method documentation.. I have added 3 UTs for that method. . @rnveach \nCorrect me if wrong, this is how I have interpreted the proposal:\nif (!doesCheckAcceptJavadocWithUnclosedHtmlTag()\n        && JavadocUtils.hasUnclosedTag(javadocTree)\n        && violateNonTightJavadocHtml) {\n        // log violation\n    }\n}\nelse {\n    processTree(javadocTree);\n}. Done.. @rnveach Please correct me if wrong, but properties aren't supposed to be overridable. They are overshadowed, right. The author of checks will have to change the value of the property in initializer blocks if it is made a property, isn't it ?. This property already existed in the message.properties, I didn't add it, should I update it ? Also, making it a public static final field results in errror from XdocsPagesTest, XdocsPagesTest.java#L776 , UT about missing error in other subclasses of AbstractJavadocCheck, but it doesn't make sense to add that error to other checks since they will never violate non tight HTML and hence never throw this error.. @romani Please have a look at 3311#issuecomment. Also adding unnecessary code to java parser might unpredictably slow it down further, why burden it ? \nAs @baratali has pointed in the issue description, to make the grammar set flag for non tight tags we will need to add code to all type of ...TagStart (...TagOpen) rules. The current PR is much more better and efficient, I feel.. Modified. Please have a look.. Done. Done.. @rnveach ohh ok. Got it.. Done. Tested at AbstractJavadocCheckTest.java#L279. Done.. @romani @Vladlis \nWe can make ANTLR return boolean flag attached to the HTML tag that is nonTight. But that will be attached to ANTLR ParseTree and not our DetailNode tree. So say we set some boolean somewhere to indicate if a javadoc Tree is nonTight, we can do that. But then the only issue will be to log a detailed message about which tag is nonTight. \nSo how to propogate that information ? Create a class to hold all the information about the first nonTight HTML tag encountered and the AbstractJavadocCheck can use that object ?\n@Vladlis  \n\nsorry for misleading by my comment,\n\nI was the one who went in that direction in first place and suggested that we can/should do it the other way, so I am sorry. :). @romani \nPlease address. Thanks.. @Vladlis \nUpdated PR please have a look.\nIMPORTANT: Such javadocs are wrong and should be corrected in #4942 . There is a little problem with this one. Please have a look at 4751#discussion. We can do parameter passing from parseJavadocAsDetailNode to parseJavadocAsParseTree and avoid the global variable ? Would you like it to be done that way ?\n. We are to log violation for non-tight HTML when javadoc.unclosedHtml is the message key and violateExecutionOnNonTightHtml is true. Apart from that we are also to log violation for all other cases when message key is not javadoc.unclosedHtml. \nSo basically this ensures that errors aren't logged when key is javadoc.unclosedHtml and  violateExecutionOnNonTightHtml is false.. Do you say that for the readability of the whole thing or does it have something to do with how ANTLR resolves ambiguities ? If it is the former yeah it can be done, if it is the latter one, then I don't see it conflicting with the other rules below it, so it can be like this too. Also, as the ANTLR report in 4943#issuecomment, there doesn't seem to be any added ambiguities for the parser as the performance times have more less remained the same.. Done\n. Done. Done. Done. Done. Please ensure if violateExecutionOnNonTightHtml and doesCheckAcceptJavadocWithNonTightHtml() can vary independently and violateExecutionOnNonTightHtml = true; and doesCheckAcceptJavadocWithNonTightHtml() returning true for a check is a valid combination. Done. Team city was giving errors about public method with boolean option. Upon looking about it further, using an enum was recommended by the corresponding inspection which also described that public method with boolean option related to the boolean trap thing.. Team city was giving errors about redundant suppression. Don't know why. Perhaps there was no such error from teamcity when this code was merged ? Do we control teamcity config ? Was it changed after this addition was made to the file ?. Do you mean we should suppress it ? enum looks much clearer to me. Plus the user also gets a proper javadoc for enum. Plus ENUM gives us the opportunity to have even more errorlistener options in future.. I wonder why was teamcity check for this PR failing then. Can you please have a look at https://teamcity.jetbrains.com/viewLog.html?buildId=1144804&tab=Inspection&buildTypeId=Checkstyle_IdeaInspectionsPullRequest and tell me what is wrong exatly ?\nAlso commenting just the statement for noinspection  seems better than noinspection for the entire method, doesn't it ? Assuming that the comment over the statement doesn't apply to the whole method anyway.. Updated this. Previously I was directly modifying errorlistener.errorMessage.\n@Vladlis Please have a look. Thank you.. @Vladlis @rnveach I can resolve this indirectly in the following way:\n```\n                 processTree(result.getTree());\n             }\n             else {\n-                final ParseErrorMessage parseErrorMessage = result.getParseErrorMessage();\n-                final boolean looseHtmlInJavadoc = \"javadoc.unclosedHtml\"\n-                        .equals(parseErrorMessage.getMessageKey());\n+                final DetailNode javadocTree = result.getTree();\n\nif (looseHtmlInJavadoc && doesCheckAcceptJavadocWithNonTightHtml()) {\nprocessTree(result.getTree());\nif (javadocTree != null && doesCheckAcceptJavadocWithNonTightHtml()) {\n\nprocessTree(javadocTree);\n                 }\n\n\nif (!looseHtmlInJavadoc || violateExecutionOnNonTightHtml) {\n\nif (javadocTree == null || violateExecutionOnNonTightHtml) {\nfinal ParseErrorMessage parseErrorMessage = result.getParseErrorMessage();\n                     log(parseErrorMessage.getLineNumber(),\n                             parseErrorMessage.getMessageKey(),\n```\n\nPlease confirm if this would be acceptable. Thank you.. I am updating PR with the above changes. We can revert these changes if the approach turns out to be wrong.. Done. @romani \nIt might be so that I didn't properly understand what you meant but I don't understand why do you check result.isTightHtml() && doesCheckAcceptJavadocWithNonTightHtml(). Do you mean to say that we should check !result.isTightHtml() ? Because if the check accepts javadoc with non-tight html it seems unnecessary to check result.isTightHtml.\nAlso in the current design, result.getParseErrorMessage() != null && result.getTree() != null -> javadoc tree has non tight HTML. @romani\nPlease address this and confirm if no design changes are required further so that I can generate the performance report. Thanks\n. @Vladlis \n\nyes, it is a typo, there should be !result.isTightHtml()\n\nYes but condition !result.isTightHtml() && doesCheckAcceptJavadocWithNonTightHtml() seems inappropriate since it requires javadoc to be non-tight and doesCheckAcceptJavadocWithNonTightHtml() to return true. But if doesCheckAcceptJavadocWithNonTightHtml() returns true then there is no point checking if javadoc is non-tight or tight since check is supposed to process all kinds of javadoc.\n\nJust add fields to ParseStatus instead of using error listener\n\nBut we can deduce everything we want from the variables we have at hand. So why add anything else ? \nAlso, you mean to add result.isTightHtml to ParseStatus right ? Because to me, ParserErrorOption should stay with Parser as it looks to be a better design.. Sorry I misinterpreted Roman's comment. Renamed the enum too now.. @Vladlis Done. Please have a look. enum has been removed entirely and now ParseStatus stores everything.. importing from org.antlr.v4.runtime is controlled inside this class and results in an ant-phase-verify failure. It also seems sort of correct to not allow importing parser related units in here.\nIf what I have done is unacceptable too then an alternative would be to use methods like getFirstNonTightTagLineNumber and getFirstNonTightTagText in JavadocDetailNodeParser. \nYet Another alternative would be to return a ParseErrorMessage object itself from JavadocDetailNodeParser which can then be used for logging violation but ParseErrorMessage seems to be specifically for parsing errors so we can create another similar class like NonTightHtmlViolationMessage.. We can\n 1. Change parseJavadocAsParseTree to createJavadocParser and do all other processing in parseJavadocAsDetailNode\n\nMake result or firstNonTightHtmlTagToken a field of the class JavadocDetailNodeParser\n. Done.. Javadoc tool doesn't complain about anything when description is missing but it does give a warning when no argument is supplied at all to @param. Therefore I feel that PARAMETER_NAME should be compulsory but description can be optional. This can be discussed further. . javadoc tool doesn't complain if no args are supplied to @serial @serialData  so I didn't touch them. \n\n@serialField behaves strangely as I wasn't able to get it to show on the site rendered by the javadoc tool even after sticking to the syntax and other requisities. NOTE: javadoc tool still gives a warning if no args are specified for @serialField tag, but since I couldn't get this tag to work properly (or perhaps it was working properly and my expectations of it were wrong), I couldn't figure out what does javadoc tool treat the only argument as by default i.e does it treat it as field-name or field-type or field-description . This needs to be looked into further.. description should not be forced for custom tags I feel.. These input cases should be added in #4980 . . This is because:\n$ cat test.javadoc\n* @exception\n      Exception     Exception-description\n      spanning multiple lines\njava -jar master-8.2-all.jar -j test.javadoc\nJAVADOC -> JAVADOC [0:0]\n|--LEADING_ASTERISK -> * [0:0]\n|--WS ->   [0:1]\n|--JAVADOC_TAG -> JAVADOC_TAG [0:2]\n|   |--EXCEPTION_LITERAL -> @exception [0:2]\n|   |--NEWLINE -> \\r\\n [0:13]\n|   |--WS ->        [1:0]\n|   `--DESCRIPTION -> DESCRIPTION [1:6]\n|       |--TEXT -> Exception     Exception-description [1:6]\n|       |--NEWLINE -> \\r\\n [1:41]\n|       `--TEXT ->       spanning multiple lines [2:0]\n`--EOF -> <EOF> [2:29]\nAs can be seen CLASS_NAME which has been made mandatory for the corresponding javadoc tag is not being recognized in the above example and hence results in parse errors. This should be resolvable by adding NEWLINE to corresponding lexer modes but of course one can't be sure of it until a solution is attempted.. @return should be removed from NonEmptyAtclauseDescriptionCheck. Also @exception which is a synonym for @throws should be added to default tokens for the check since @throws is a default token for it. \nAlso, there's a potential for other tags to be added to this check but that depends on the philosophy of the check. \n@romani @Vladlis @rnveach Please look into this. Should an issue be created for this.. @rnveach PMD violation about assignment of non-final static fields in constructor.  . Done.. beginTree is final in AbstractJavadocCheck and beginJavadocTree is called for each javadoc token to be processed. Neither can be used apparently.. Reverted. \nAn alternative would be to use a static method for clearing the static variable which doesn't seem to do any good. So presently I feel that the current approach is the most efficient one. . @romani I agree with you. Renamed.. @romani Please address the following two things.\n1) What message key should we use to log violation for test checks that are not designed to log violations ? We of course can not create a message key for testing purposed. Say we design the test check to actually check something and log violations for it or we make javadoc wrong so that we can somehow use an exisiting key to log violations just so that we can indirectly assert method call count, wouldn't this make the test misleading  ?\n2) We want to verify calls to visitJavadocToken. If we do that indirectly by using verify we mix violations with method call count. Would that be good ?. @romani After discussion with @Vladlis we can use mockito or we can create verify methods in ...TestSupport to verify calls to visitJavadocToken. Indirectly testing number of times a method has been called by forcefully making it to log some violation and then counting those violations seems to be misleading and to log a violatin we need an appropriate message key and one should not be created just for testing, please correct me if I am wrong on any of the two points. Also, there are other tests which verify call counts to methods in the same way as this test method does. \n@rnveach What's your opinion on this ?. no complain from javadoc tool about @deprecated with no description. Only one form of @see should be used at once and forms shouldn't be combined. That's why (reference | STRING | htmlElement) has been added. @rnveach @romani  @Vladlis\nThat property is not accessible to AbstractJavadocCheck. We have a version of getCheckMessage at AbstractModuleTestSupport.java#L389 which allows one to specify a different class to be used by getMessageBundle but log method has no such overloads, which looks right implementation to me.\nWe can use the version of getCheckMessageAbove and call it the following way in AbstractJavadocCheckTest\ngetCheckMessage(Class.forName(\"com.puppycrawl.tools.checkstyle.Checker\"),\"general.exception\")\nto generate messages like:\nExpected : .....InputAbstractJavadocNonTightHtmlTags.java:41:8: Got an exception - {0}\nOn the other hand we can only log messages like\nActual : .....InputAbstractJavadocNonTightHtmlTags.java:41:8: general.exception\nSo we might want to copy key general.exception to message.properties in javadoc section or do something else.\n. Yes it is needed I will open an issue and add a test case, none verify this currently.\nhttps://4942-single-jcheck.netlify.com/apache-ant/#A18\n. #5035 . While rewriting this test I noticed:\nfinal String[] expected = {\n            \"41:8: \" + getCheckMessage(MSG_SUMMARY_FIRST_SENTENCE),\n            \"62:13: \" + getCheckMessage(MSG_SUMMARY_FIRST_SENTENCE),\n            \"99:8: \" + getCheckMessage(MSG_SUMMARY_FIRST_SENTENCE),\n            \"105:8: \" + getCheckMessage(MSG_SUMMARY_FIRST_SENTENCE),\n            \"109:8: \" + getCheckMessage(MSG_SUMMARY_FIRST_SENTENCE),\n        }; \nand \nfinal String[] expected = {\n            \"41:8: \" + getCheckMessage(MSG_SUMMARY_FIRST_SENTENCE),\n            \"105:8: \" + getCheckMessage(MSG_SUMMARY_FIRST_SENTENCE),\n            \"109:8: \" + getCheckMessage(MSG_SUMMARY_FIRST_SENTENCE),\n            \"62:13: \" + getCheckMessage(MSG_SUMMARY_FIRST_SENTENCE),\n            \"99:8: \" + getCheckMessage(MSG_SUMMARY_FIRST_SENTENCE),\n        };\nboth make the  UT pass. Ordering of expected messages doesn't seem to influence anything. Though I didn't look deeper into this but still. to me it looks like there's something wrong. Is this intended ?. @romani @Vladlis @rnveach Done.. Done.\n. @rnveach \nThank you.. @rnveach \nI don't think that should happen. The performance reports didn't show anything like that. In fact it might be so that ANTLR produces almost similar code for both cases. Though I can't say anthing for sure. WIll have too look deeper. \n@romani \nYes I agree. We are doing this in #4942 . This issue split out from that one in the first place. An issue already has been created for at #5036 . Shall be worked on along with #4942 or after it whichever is suitable.. @rnveach \nI agree with roman. This helps to conform to @see syntax more closely.. yes. Also, still there still shall be some places with construct like a* (a b)? for instance in @deprecated or @customTag. Replacing (WS | NEWLINE)* ((WS | NEWLINE ) description)?\nwith ((WS | NEWLINE )+ description)? first of all will fail to take care of trailing NEWLINES so it will have to be something like ((WS | NEWLINE )+ description)? (WS | NEWLINE)* anyway. \nAlso, is some other construct possible which leads to greater efficiency ? perhaps not, at least the ANTLR report did not hint any performance degradation. We can discuss though if it can be made even better with some other construct.. @rnveach Description shall be removed #4986 . Also having STRING in a parent like description hides away the grammar structure I feel. So even if we kept description, STRINGs should be present separately in the javadoc tree, I feel.\nAlso, you can have a look at 4753#issuecomment. It will go into description.. Done.. Done.. To be certain we will have to have to make some assumption or the other but we shouldn't do that. Please have a look at 4550#discussion. Right now, I am unable to see based on what can we demarcate where does the package part stop and where does the class part begin in the javadoc grammar itself. \nOne way I can think of to this is post process javadoc tree using extra context information about the reference in the javadoc tag.. Same reason as for @see tag. @value reference seems to be same as @see tag reference. \nIn a reference we can't separate a package from a class without extra context about that reference. \nDOT gets recognized in PACKAGE_CLASS itself, so no need to tokenize it separately unless we need to use DOT in parser too, isn't it ?. Also, we can change our approach and make PACKAGE_CLASS a parser rule instead of having it in lexer. That way we can have constructs like the following in javadoc tree:\n--PACKAGE_CLASS -> PACKAGE_CLASS\n    |-- IDENTIFIER -> package\n    |-- DOT -> .\n    |-- IDENTIFIER -> class\n    |-- DOT -> .\n    |-- IDENTIFIER -> nestedClass\n    |-- HASH -> #\n    `-- MEMBER -> someMethod\n. Done.\nAdded this to PACKAGE_CLASS doc in JavadocTokenTypes.java\n* PACKAGE_CLASS represents the package or class which has been referenced in the `@see`,\n     * `@link`, `@linkplain` or `@value` javadoc tags. In the javadoc tree it shall be a child\n     * of {@link #REFERENCE}.\n     * <br>\n     * <strong>IMPORTANT:</strong> Constructs like\n     * {@code package.Class.NestedClassAtDepth1.NestedClassAtDepth2#member} are recognized by\n     * the javadoc tool from oracle, and no assumptions like, package names wouldn't consist of\n     * uppercase characters or class names begin with an uppercase character, are made.\n     * Also, <i>the reference</i> in a javadoc tag can consist just a package name or a\n     * simple class name or even a full class name. Thus, PACKAGE_CLASS can represent a\n     * package name or a simple class name or a full class name i.e checkstyle doesn't\n     * resolve references at present.\nAlso, please have a look at my previous comment, do we want javadoc trees to have reference like:\n|-- PACKAGE_CLASS -> package.class.nestedClass#someMethod\nor\n--PACKAGE_CLASS -> PACKAGE_CLASS\n    |-- IDENTIFIER -> package\n    |-- DOT -> .\n    |-- IDENTIFIER -> class\n    |-- DOT -> .\n    |-- IDENTIFIER -> nestedClass\n    |-- HASH -> #\n    `-- MEMBER -> someMethod\nIn the current design PACKAGE_CLASS doesn't have any children in the javadoc tree and the former representation is the one we are going with. Which one do you think would be better ?. I can not see why we can not use it. But that would add semantic predicates and call to external function in the grammar which seems a bit unnecessary, don't you think ? \nAlso, I feel the more explicit we can be with grammar definitions the better. The way I defined JavaLetter or JavaLetterOrDigit is the way how JLS defines it too.. https://github.com/checkstyle/checkstyle/pull/4550#issuecomment-328360874. master's coverage\nCoverage without testParagraph test in JavadocParseTreeTest. >That has to be at least a separate commit referring \"increase coverage\" issue\nDone. >BUT , .... HASH is already par of REFERENCE ... You probably meant\nTrue. HASH should continue to be part of reference rule.\nIssue created: #5126 . Removed it.. Done.. Done.. Done.. The mode xmlTagDefinition has been split in JavadocLexer. It is important that HTML_TAG_NAME comes after all other particular tag names, like EMBED_HTML_TAG. This is necessitated by the way in which ANTLR resolves ambiguity (the rule encountered first is applied).\nHence the only damage that remains is with respect to HTML_TAG_NAME which currently has a value of 95 compared to 87 in checkstyle-8.1. Accordingly, EMBED_HTML_TAG_NAME gets the value 87. If needed, this can be overcome by hardcoding values of HTML_TAG_NAME and EMBED_HTML_TAG_NAME in JavadocTokenTypes and accordingly modifying methods getType and setType in DetailNode implementation.. @romani OPTGROUP_HTML_TAG_NAME needs to be before HTML_TAG_NAME (at JavadocLexer.g4). Otherwise <OPTGROUP> will get recognized as HTML_TAG_NAME rather than OPTGROUP_HTML_TAG_NAME. ANTLR applies the first rules that matches. Please also have a look at this comment https://github.com/checkstyle/checkstyle/pull/5222#discussion_r146521645. @romani Please let me know if there are any discrepancies in the PR or in the comment. Also, let me know if any other change is to be explained further. . @romani Compatibility damage results only when any rule/token has to be added in between the existing ones. We must add OPTGROUP_HTML_TAG_NAME before HTML_TAG_NAME for the reasons I explained above. We can undo this damage by hardcoding the value for HTML_TAG_NAME.. https://github.com/checkstyle/checkstyle/issues/3311#issuecomment-328093482. Done.. Sorry my bad. Corrected. Thank you.. Corrected. Thanks.. Actually the list shouldn't grow much. This situation has only presented itself because it was necessary to add a a token before another. So if an alternative to a rule in parser grammar or a token is to be added before another only then will we need to go for such an approach. I can add all the remaining tags in #3332 at once and that way only one if-else would be necessary as of now.\nIf and when the list starts growing should we open another issue.. It should be because the production for rule tr in grammar and all other tags for that matter only have ...TagStart rules and no ...TagEnds.. Done.. Done.. Removed.. Removed.. Done.. Done.. Updated.. Actually this is because token is the token object form ANTLR. This method is called for error reporting and there's no DetailNode tree at hand. An ANTLR token would continue to have the token value generated by ANTLR. We wouldn't have to perform updates to this line with addition of tokens for HTML tags in grammar because token.getType() and JavadocParser.HTML_TAG_NAME are both ANTLR units and will be automatically taken care of.. Rather it was like since JavadocTokenTypes.HTML_TAG_NAME == JavadocParser.HTML_TAG_NAME we were previously able to use JavadocTokenTypes.HTML_TAG_NAME, but now since those two values have changed, we are forced to use value directly from the JavadocParser.. Sorry I am unable to get what are you trying to refer to when you say, \"duplicating the same conversion in 2 places\".\nDo you intend to call \"getAntlrTokenType\" in place of token.getType() at JavadocDetailNodeParser.java#L505 so that we can use JavadocTokenTypes.HTML_TAG_NAME instead of JavadocParser.HTML_TAG_NAME ? May be I am wrong but I can't see any need for such a method.. @rnveach Yeah, I agree with the consistency points you made. Okay I will update PR.. @romani Sorry for the long delay. Renamed to mapAntlrTokenTypeToJavadocTokenType.\nDone.. @romani The right mapping happens as the parse tree is constructed. Do you want it to be done after the complete parse tree has been constructed ? That would be inefficient and would require the traversal of almost the entire tree, wouldn't it ?. @MEZk Please suggest a satisfactory name for this method as well. Thanks.. LITERAL_NEW not only represents anonymous classes but also object(OBJECT1 = new Object();) and array instantiations(new String[] {\"br\", } or ar = new int[4];). Hence we first check if a LITERAL_NEW type of AST actually represents an anonymous class and if it does then we return a proper Details object.\nIf it doesn't then we return a dummy Details object without any details to avoid NullPointerException here\nif-else branch can be removed by making the variable details non-final.. @romani @MEZk @rnveach \nThis Point was left out. Regression reports for option alone and alone-or-singleline have been approved. There is still no violation here. Please confirm if a violation is needed here.. @romani @MEZk @rnveach \nThis Point was left out. Regression reports for option alone and alone-or-singleline have been approved. There is still no violation here. Please confirm if a violation is needed here.. @romani \nDone for same and alone. As far as alone_or_singleline goes, isAnonInnerClassInit prevents an error. This method was added in this commit. Done. There is a violation for this now.. >Please remove default c-tor and lets use existing c-tor will all arguments explicitly defined.\nDone.\n\nSo here is point, please name method exactly what it does \n\nDone.\n\nno details should be in this case only, please add it to UT input file that you created.\n\nAdded another test, testBracePolicyAloneForArrayInit. \n\nthis case should do have right curly, and we need to find it and put in Details. This is should be separate processing branch in IF-ELSE.\n\nDone.. This test was redundant. Was previously equivalent to JavadocUtilsTest#testGetTokenNameForId. Hence modified accordingly.. @romani Sorry my bad. Corrected.. This (L#49:17) violation happens for the option alone_or_singleline. This is similar to an existing violation at InputRightCurlyAloneOrSingleline.java#L69:29 and also to InputRightCurlyWithoutShouldStartLine.java#L53:27.\n@romani @rnveach \nPlease confirm if such violations are acceptable.. @romani @rnveach \ncheckstyle master raises a violation for this (L#62:42) under option alone_or_singleline. The same behavior is carried forward by the PR too.\nPlease confirm if this is acceptable.. update: testOptionAloneOrSingleLineWithoutShouldStartLine has been updated to allow such behavior as the master allows this too and to better see the results of the CI (previously it didn't, which led to failing CIs).. @romani @rnveach I also agree that we should validate inner INSTANCE_INIT rcurly in this check itself. The outer rcurly should pertaining to the anon class is the one that gets validated in the new check. So, this violation stays then right ?. Done.. Done.. This violation stays. No changes made.. @romani Do you mean an empty OBJ_BLOCK when you say (without any symbols/spaces/.... in OBJ_BLOCK) ? Can you please give examples in code.. @romani \nYeah I just wasn't so sure about ...completely (without any symbols/spaces/.... OK will do.. Done. Done. There are no tests for option same though.. @rnveach Actually wercker is failing.\nAlso, there's a little issue. There were actually two counts of the same code formatting problem with hibernate. The other one was realized in https://github.com/checkstyle/checkstyle/pull/4247#issuecomment-400529066. My corresponding PR for hibernate was merged before I could have updated it with the second correction. I will have to make one more PR there. Also, wercker was failing when I'd pushed previously, may be since I'd not rebased over the latest master.. Sanitized. \nReplace tt by pre. Used it over pre for no particular reason. Also, pre is better than tt since it preserves whitespaces but tt apparently doesn't.. updated.. Done.. Done.. So, we don't want a violation for alone and alone_or_singleline for such code correct ?. Done. (Removed the comment.). ",
    "kukreja-vikramaditya": "If I do go ahead with matchDirectoryStructure, then in the setter method would be like this - ? \nsetMatchDirectoryStructure. Would this be correct for Javabeans Reflection property?. Done. The method should be placed in this class itself right?. lastPos was for File separator. Will change to lastSeparatorPosition for clarity. Ok will do. packageName should be fine?. Please advice as to what the message should be. I did not understand. Should I remove that line in the testCorrectFile ?. I'll make the changes as you suggested but is it ok to defy the import order as per google's java guidelines here even if it is \"Bad\" example? I reordered the imports as given in the link. Still no worries I'll update as you said. In which case i'll shift the static import after other imports which would keep the line numbers as before. But we do say that, and (optionally) whether\n          the package name matches the directory name for the source file.. @romani There is an issue I face everytime  the order of imports in InputNoLineWrapBad is changed. The travis ci fails at Subtask No. 16, which says that static should be in its own group\nWhat i do to pass the test\n```java\npackage com.puppycrawl.tools.\n    checkstyle.checks.whitespace;\nimport static java.math.\n    BigInteger.ZERO;\nimport com.puppycrawl.tools.checkstyle.TreeWalker;\nimport java.util.concurrent.atomic.AtomicIntegerFieldUpdater;\nimport javax.accessibility.\n        AccessibleAttributeSequence;\npublic class\n    InputNoLineWrapBad {\npublic void\n    fooMethod() {\n    final int\n        foo = 0;\n}\n\n}\nenum\n    FooFoo {\n}\ninterface\n    InterFoo {}\n```\nWhere the imports are in placed as mentioned here - https://google.github.io/styleguide/javaguide.html#s3.3.3-import-ordering-and-spacing\nBut this what you saying i shouldn't do...Please help in this regard. I can push the branch again if you wish to see the failed CI subtask. Done. Done. Done. What name should be used ?. And correct me if I am wrong, by \"same\" you mean package com.puppycrawl.tools.checkstyle.checks;? \n. I'll push again in a few hours. 1. Done\n\nWhat is the new input required for ? Could you explain how is it supposed to be different from InputPackageDiffDirectoryAtParent ? I'll push the branch again in the meantime, with the reports generated by diff.groovy too. @romani \n\nDiff reports here https://kukreja-vikramaditya.github.io/checkstyle/index.html. Done. Done. Done. Done. 2. Not done. Done. Done. Done. Cannot do that as getFileContents() that is used inside the method is not static. java\nfinal DetailAST packageNameAst = ast.getLastChild().getPreviousSibling();\nfinal FullIdent fullIdent = FullIdent.createFullIdent(packageNameAst);\nfinal String packageName = fullIdent.getText().replace('.', File.separatorChar);\nI cannot create a method getPackageName(ast) as I also need fullIdent.getLineNo() .If this is not acceptable to you I'll create a global variable of FulllIdent and update it's object?. Done. Thanks for the clarification. Done.. Done. > please make a changes to this file as min as possible. You add two lines and all other are changed for no reason.\nBy changed do you mean all the lines after that are shifted by 2 or I made some other change i shouldn't have?\nAlso, regarding  @rnveach review, i need to add more tests in the it folder. I was thinking of something like \n1. renaming badLineWrapTest to defaultBadLineWrapTest \n and goodLineWrapTest to defaultGoodLineWrapTest as they only check default tokens\n2. creating new tests called ignoreStaticImportBadLineWrapTest ignoreStaticImportGoodLineWrapTest, but using the Configuration class's object, I can't edit the attributes. Is it ok if I use the DefaultConfiguration class instead?\n. Done. Should I add //ok also for good cases or do that in #3625 ?. I shifted this after all the other import statements and i have this job failing\nhttps://travis-ci.org/checkstyle/checkstyle/jobs/212226897\nThis task fails and the reason mentioned is \nbash\n[WARN] /home/travis/build/checkstyle/checkstyle/src/it/resources/com/google/checkstyle/test/chapter3filestructure/rule332nolinewrap/InputNoLineWrapGood.java:8: Import statement for 'java.math.BigInteger.ZERO' is in the wrong order. Should be in the 'STATIC' group, expecting not assigned imports on this line. [CustomImportOrder]\nHow should I proceed?. Should I add reasons for all individual suppressions or just a general message at the top saying smth like this \"Unit tests that use these files cannot work with a new line at the end\". Imho first approach may be a good practice for future suppressions?. >If you mean all on one line in one big expression, then no for the reasons I stated.\nThe reason for this is clear to me. \nBy first approach I meant that comments for all similar types of suppressions should be added. Eg\n```xml\n Input files for NewlineAtEndOfFileCheckTest\n\n Many files in these folder require no newline at the end and are suppressed by default \n\n\nCI fails on windows system for this file \n\n Some specific javadoc input files fail tests when they end with new line\n\n\n\n\n\nEmpty file cannot have any data  \n\n```\nThis is the sample file i had in mind if comments should explain why a file was added to suppressions list. And some logically grouping would be convenient if this list will get more changes later. Thanks for the heads up. Will make the changes. Is this fine ?\n~~<exclude>src/it/java/**/*</exclude>~~\nxml\n<excludes>\n  <exclude>src/main/**/*</exclude>\n  <exclude>src/test/java/**/*</exclude>\n  <exclude>src/site/resources/images/**/*</exclude>\n  <exclude>target/**/*<exclude>\n  <exclude>bin/**/*</exclude>\n  <exclude>.git/**/*</exclude>\n  <exclude>.idea/**/*</exclude>\n  <exclude>.settings/**/*</exclude>\n  <exclude>.checkstyle/**/*<exclude>\n  <exclude>.DS_Store/**/*</exclude>\n  <exclude>.nondex/**/*</exclude>\n  <exclude>.pmd/**/*</exclude>\n  <exclude>.fbExcludeFilterFile/**/*<exclude>\n  <exclude>.externalToolBuilders/**/*</exclude>\n  <exclude>.pmdruleset.xml</exclude>\n  <exclude>checkstyle.iml</exclude>\n  <exclude>nbactions.xml</exclude>\n  <exclude>nb-configuration.xml</exclude>\n</excludes>\n. Also let me know what exclude should be written for \n```xml\nJava Virtual machine crash logs\nhs_err_pid\nreplay_pid\n```\nRegarding the checkstyle.iml, since it is ignored, I will remove it from my commit message. line wrapping handler for the resource ast is a good idea. I earlier tried resolving this using checkExprSubtree, but to no avail.. >AnnotationDefHandler looks like it is coded like MemberDefHandler.\nYes I based the field checking on member def handler.\nThe only case that the current ClassDefHandler is not solving for Annotation definition is line wrapping as you pointed out it in https://github.com/checkstyle/checkstyle/pull/4217#discussion_r111635354\n. The problem is arising as there is no dedicated handler for theANNOTATION_DEF token. The ClassDefHandler doesn't check for @interface token. Do you think this should be a separate issue if this PR is merged? Or I should fix it with this PR as after all it is a part of the problem?. Yes I think it would best as I only need to modify a few lines and check for @interface. @rnveach \nIt would actually be possible to get rid of AnnotationFieldDefHandler  completely and simply just edit the checkIndentation method of MemberDefHandler (at L69 and L56 ), unless future additions/changes are required.\nI will share my results on the reports soon. Hopefully a better decision can be taken based on the report. @rnveach \nWow! Yes you are right.. i tried the same and except for the subtype name there is absolutely no difference. Would it be best to remove this handler and just work with MethodDefHandler?\nI have one more example I need your help in,\njava\n@ //indent:0 exp:0\n interface //indent:1 exp:0 warn\nMyAnnotationWrapped { //indent:0 exp:0\n    int value() default -1; //indent:4 exp:4\n    AnnotationWithTarget //indent:4 exp:4\n        .AnnotationInnerLineWrap field(); //indent:8 exp:4 or 8? //Error line\n} //indent:0 exp:0\nNote:(these are custom annotations i made)\nWhen I tried that in intellij, it indented it at 12 (8 from ident above) whereas CS expects it to be 4 (0 from ident) (lineWrappingIndentation = 4). A previously used example may be related ?\njava\n    public //indent:4 exp:4\n        String myString() //indent:8 exp:8\n        default \"Hello\"; //indent:8 exp:8\nto the above mentioned example?\nMaybe this is expected behaviour for MethodDefHandler cases?. Also for the 1st example, where it is assumed I am working with only MethodDefHandler,\ntake these 2 cases - \nCase 1 :\njava\n@ //indent:0 exp:0\n interface //indent:1 exp:0 warn\nMyAnnotationWrapped { //indent:0 exp:0\n    int value() default -1; //indent:4 exp:4\n    AnnotationWithTarget //indent:4 exp:4\n        .AnnotationInnerLineWrap field(); //indent:8 exp:8 //LINE IN QUESTION\n} //indent:0 exp:0\nWhen CS runs on this, i get error message that it exp should be 4.\n\nCase 2 : I try to do as suggested\njava\n@ //indent:0 exp:0\n interface //indent:1 exp:0 warn\nMyAnnotationWrapped { //indent:0 exp:0\n    int value() default -1; //indent:4 exp:4\n    AnnotationWithTarget //indent:4 exp:4\n    .AnnotationInnerLineWrap field(); //indent:4 exp:4 //LINE IN QUESTION\n} //indent:0 exp:0\nHere I get the error that exp should be 8\n. Done . Done. Shifted to line wrapping check.. removed.. The tests I added resulted in increase of code lines greater than 2000 in the IndentationCheckTest file.\nShould I instead use suppression?. I just noticed this too, is 8 fine? isn't 4 the default line wrap. The first still needs to be broken.. \n",
    "Pedro12909": "Done.. Done.. Done.. Done.. Done.. Done.. Done.. Done.. Done.. Done. Done. Done. Done. ",
    "xpdavid": "But this is sort of tests belongs to gui package, we should not touch the class in check package to extends BaseCheckTestSupport class.. I will split it.. The changes is not there anymore.\nTechnically, done.. The changes is not there anymore.\nTechnically, done.. Done. Done. The methods are put together now.\nDone.. It is not possible for non-compiable file. Therefore, non-compiable file still comes from non-compialbe folder.. I see. I will do that :). If we add new enum, not only the developer need to update the value. It is also their responsibilities to add a new test case or the test coverage will not be affected (not 100% anymore).\nSo should I write a comment like?\njava\n// If ParseMode enum is changed, the expectedEnumeration, as long as the corresponding test cases, need also to be updated. @rnveach The file InputIncorrectClass doesn't belong to any folders (checks, grammars and etc.) in noncompilable folder, I guess it is like a common file. If we want to make a gui folder, this file will just be copied.. Test cases for filefilters and MainTest.java are use InputIncorrectClass.java.  In noncompilable folder, it doesn't have a separate folder for filters.. ",
    "divsidhu-26": "sir i changed the file's location and to make it look difficult i lowercased it. The upper case name would also work but that name was already being used so to prevent any confusion i decided to do so...................\n. i will just do that\n. @rnveach  could you approve these changes............... i do not understand what you want to say here....could you please elaborate a little......... i had my exams so could not work last week.........will just do these now.............. ",
    "surajumang": "Done. Done. Done. Done. ",
    "GitToasterhub": "You mean that,I should placce in created folder shortcuts only,not the class?. Is it OK now? . Added new line. Do you mean InputWhitespaceAround should be named InputMethodParamPadWhitespaceAround?\nWe split checks into separate files,so even if 2 checks have the same name input file they wouldn't depend on 1 file because they are in different namespaces. Oh.It's a truly new level of development for me.Everything metters even spaces that visually and practically doesn't make a difference actually is important.I should get used to...I spent for task that could be done in 5-10 minutes few days.. xD. ",
    "subkrish": "done.. done.. done.. Done.. Removed the suppression. Done.. Moved to a new method. Done.. Done.. Done.. Done. Done.. Done.\n. Done.. Done.. General validation wouldn't work would it? Because it only will go into the condition if it is a null assignment. It will never check for other explicit initializations.. I will change it accordingly but for very small files the change might result in deletion and creation when I commit and not a rename. Is that ok?\n. Done.\n. Done.. There is no folder yet specifically for CheckerTest. Do just copy the input xml file outside in the 'checks' directory?\n. @romani Right. But should I create it in the scope of this issue or open another PR for creating the folder for Checker? For now I was planning to just move it out to src/test/resources/com/puppycrawl/tools/checkstyle and later make a folder and move it to src/test/resources/com/puppycrawl/tools/checkstyle/checker. What do you suggest?. Done.. Done.. @romani Should I continue with fix in same PR or open a new PR under the issue? Also when I made this fix there was one file left. Should I go ahead and remove that extra file as well under the same fix that would be made?. Done.. Done.. Done.. Should I move it to after antTask.execute();?. Done.\n. Done.. @romani @rnveach Should I move forward with making these changes?. Done.. Done. Done.. @rnveach @romani Should I leave it as is or make the change?. Done.. Done.. Done.. Done.. Done.. Done.. Done.. @rnveach @romani \nBut then I am getting a checkstyle error -> checkstyle/BaseCheckTestSupport.java:26:1: Name 'BaseCheckTestSupport' must match pattern '^Abstract.+$'. [AbstractClassName]. So this means that I would have to name it AbstractBaseCheckTestSupport and that would defeat the purpose to make wercker build pass.. @rnveach Again if I make this abstract the name would change from BaseTestSupport to AbstractBaseTestSupport if that's okay?. @romani I don't think we can make getPath() as abstract because a few classes such as CheckstyleAntTaskTest doesn't override the method anywhere. It uses the default path given in BaseTestSupport.. @rnveach There is an issue here.\nThe moment I change the directory, I am getting errors because few of the xml files that CheckstyleAntTaskTest uses lie outside the folder.\nThey are in com/puppycrawl/tools/checkstyle/ and not com/puppycrawl/tools/checkstyle/ant\nEither we need to work another PR where move them into CheckstyleAntTaskTest or I might have to keep the directory as is.\nFor example in the testFileSet() UT the CUSTOM_ROOT_CONFIG_FILE lies outside the folder for inputs.\n. Done.. Done.. Done.. Done.. @rnveach Done. I found a way so that the test would throw an error and then made the necessary changes for it in the test.. @rnveach I think files are sorted alphabetically so that's why it comes fifth (zero-indexing) in the list.. @rnveach Yes I think it does -> -Ppitest-checkstyle-common,no-validations checks ant.. @rnveach  I ran the test locally and got build success. Done.. @rnveach \nI don't think I can use getPackageLocation() because it overrides the method in the super class and has the path com/puppycrawl/tools/checkstyle/astprinter/ but this path does not exist in resources-noncompilable. There is no astprinter folder. @rnveach I have opened a minor PR so that the input file in resources-noncompilable for AstTreeStringPrinterTest is moved to a folder astprinter. This will allow getPackageLocation() to be used for both getPath() and getNonCompilablePath().\nhttps://github.com/checkstyle/checkstyle/pull/4737. @rnveach I have made the change. Done.. @rnveach Done.. @rnveach Changes have been made. Done.. The reason is AllSinglelineCommentsTest still uses the input file in testAllBlockComments().. That one change resulted in all of the input file to change. It was numbered and the numbering changed.. Okay.. Done.. @romani Updated. Done.. @rnveach Done.. @rnveach Done.. @rnveach Done.. @rnveach Done.. @rnveach Done.. @rnveach Done.. ",
    "anudeepti2004": "@romani Aha. Got it. I executed the first command on all my files. But the second command doesnt seem to be right (I apologize if I am wrong) because command git [oldname] [newname], git assumes [oldname] to be a command.. @romani : In order to move the files wont the first command suffice since git mv oldname newname will rename the files? Almost all the input files are named InputEmptyLineSeparator[].java since the test name is EmptyLineSeparatorCheckTest.java as per the parent Issue #3891 except InputPrePreviousLineEmptiness.java and files in package-info/ So should I just rename those files?. ",
    "johnyleebrown": "@rnveach Done.. ",
    "samuel-gu": "@sabaka Should I still make the requested changes?. I've restored definition of logger in field for all cases. Should I still update the main?. Updating the main class' logger variable has these difficulties.\n1. All the methods in the main that assess the log variable are defined as static\n2. The main class cannot be instantiated to call the non-static log in the methods that call the log.\nAny thought on what to do?. Then there are no other classes with private static final definition for loggers. Looks like there wasn't an issue after all. ",
    "timurt": "Can't we just left it empty? I have condition on it inside class (excludeClassesRegexp.isEmpty()) . I know but I thought it will be useful for both classes as well, because they both extend common class and both work on metrics.\nDo you think this func is not necessary for ClassFanOutComplexityCheck?. Ok I will fix it. done. done. I made it because of @romani comment on previous changes\n\"please make a note in description that all properties for match will be used and describe order of matching to user.\". @romani actually it does not matter, I will edit description. @romani I made both illegalClasses and illegalPkgs regular expressions, so you can use same regular expression for illegalClasses and for illegalPkgs. Is it right?\nAnother way is to add prefix and suffix. User's RE java\\.awt will be converted to ^java\\.awt.*. @rnveach I tried to add additional if statements, but verifcation failed with cyclomatic complexity error, complexity was 12 (limit is 10). Should divide method into smaller methods?. done. done. done. done. done. done. I rephrased it. done. done. @Vladlis @MEZk thanks, done. Done. Done. Done. Done. renamed to MismatchStrategy. done. done. done. fixed. done. done. I made this way because this method can be applied for both \"import-control\" and \"subpackage\" property. So if NULL is not allowed, I will have to make two separate methods for \"import-control\" and \"subpackage\", because they have different default strategies.\nAlso in the beginning of this class I have if condition\nif (strategyOnMismatch == null) {\n                 stack.push(new ImportControl(pkg, regex));\n }\n else {\n                 stack.push(new ImportControl(pkg, regex, strategyOnMismatch));\n}\nand inside ImportControl.java I have constructor\nImportControl(final String pkgName, final boolean regex) {\n        this(pkgName, regex, MismatchStrategy.DISALLOWED);\n}\nAs you can see NULL object will not pass to the ImportControl object and default strategy will be initialized with proper value.\nI can rewrite code, but I don't understand disadvantages of my solution. done. done. rewrote the code. done. done. done. done. we do not have to use this value inside class since default value initialized using Enum. done. done. renamed to fileText. done. I don't really understand how DetailNode relate to DetalAST, is it one of the possible children?. I will move it to another folder. ok, my bad . I think we don't need it. it is not hack, as I understood IDENT is used to identify names of classes, methods, parameters and etc.\nSo this part of code extracts name of the current AST element and make it possible to query like @text = 'SomeName' using getAttribute(namespace, localpart) method\n. but otherwise my PR won't pass CI. @rnveach Does it mean they don't have references to each other and we should be able to create two different XPATH trees one for javadoc and one for java. done, got error. done. done. @MEZk \nDone. 'auditErrors' name is ok?. > remove final modifier\nis it about final SortedSet<LocalizedMessage> messages = fileProcessingResult.getMessages(); ?\nwhen I remove it, verification fails with  Variable 'messages' should be declared final. Done. Done. Done. Not previous constructor in this one?\nLike this or not?\npublic FileProcessingResult(SortedSet<LocalizedMessage> messages) {\n        this(null, messages);\n }. http://junit.org/junit4/javadoc/4.12/org/junit/Rule.html\n\nAnnotates fields that reference rules or methods that return a rule. A field must be public, not static, and a subtype of TestRule (preferred) or MethodRule. A method must be public, not static, and must return a subtype of TestRule (preferred) or MethodRule.\n. Done. done. done. @rnveach\nCobertura fails when I just return value, as the example I took FileContents#getText method. @MEZk @rnveach \nI'm stuck with one thing. Inside Checker#processFile, there is try-catch for IOException in a case specified file does not exist, it means message will be logged, but fileText will be null. If FileText object is null then we will not be able to extract fileName, absolutePath and etc. from it, for example inside Checker#fireErrors it will throw NPE.\nProblem is fileName is used in various places even if the file does not exist\nI can suggest to add additional filePath field to FileProcessingResult or left PRed implementation?. done. done. done. done. done. done. done. done. done. done. @rnveach @MEZk \nI've created this test to cover conditional statement here , otherwise cobertura fails\n\nBut why if (CommonUtils.matchesFileExtension(file, getFileExtensions())) { has no else statement with exception thrown? \nIf incompatible file comes toTreeWalker#processFiltered nothing happens. Is it ok?\n. @rnveach Done. @MEZk \ndone. I inserted this assert before assertEquals(charsetName, processingResult.getFileText().getCharset().name());\nI see no reason to delete previous assert. no actual reason, just to assert charset didn't change\nI can remove it. resolved. yes, you are right, done. @MEZk \nmy previous tries were not successful so I tried to create another scope\nI am just out of ideas\nthis is my previous configuration\n<inspection_tool class=\"SuppressionAnnotation\" enabled=\"true\" level=\"ERROR\" enabled_by_default=\"true\">\n        <option name=\"myAllowedSuppressions\">\n            <list>\n                <option value=\"deprecation\" />\n                <option value=\"unchecked\" />\n                <option value=\"rawtypes\" />\n                <!-- There is no other way to deliver filename that was under processing.\n                     See https://github.com/checkstyle/checkstyle/issues/2285-->\n                <option value=\"ProhibitedExceptionThrown\" />\n                <option value=\"MismatchedQueryAndUpdateOfCollection\" />\n                <!-- Till https://github.com/checkstyle/checkstyle/issues/3066 -->\n                <option value=\"ProhibitedExceptionCaught\" />\n                <!-- No way to split apart huge if/else branches in test. -->\n                <option value=\"IfStatementWithTooManyBranches\" />\n                <!-- we have to catch Exception in Checker and rethrow it -->\n                <option value=\"ProhibitedExceptionThrown\" />\n                <!-- we have to use it when pass null argument in test purporses -->\n                <option value=\"NullArgumentToVariableArgMethod\" />\n <!-- we have to use it because number of dependencies of CheckerTest exceeds 33. -->\n                    <option value=\"ClassWithTooManyDependencies\" />\n            </list>\n        </option>\n    </inspection_tool>. @MEZk \nIs it correct?\n<inspection_tool class=\"ClassWithTooManyDependencies\" enabled=\"true\" level=\"ERROR\" enabled_by_default=\"true\">\n        <scope name=\"Tests\" level=\"ERROR\" enabled=\"true\">\n            <!-- we have to use it because number of dependencies of CheckerTest exceeds 33. -->\n            <option name=\"limit\" value=\"40\" />\n        </scope>\n        <option name=\"limit\" value=\"33\" />\n    </inspection_tool>\n@SuppressWarnings(\"ClassWithTooManyDependencies\")\npublic class CheckerTest extends BaseCheckTestSupport {. scope Production means src/main?\nscope Tests means src/test ?. \nAstFilter\nAstAuditEvent\nMaybe we should call them\nCheckerFilter\nCheckerAuditEvent\nbecause they are children of module Checker, similarly to TreeWalkerFilter. done. done. done. done. done. done. done. done. done. Done, but again this TC violation\n\n175: setupChild() Cast (AutomaticBean) module conflicts with surrounding 'instanceof' check\n\nShould I suppress it?. done. resolved, TeamCity passed. @MEZk \nDone\nAdded noinspection javadoc because TeamCity was failing with violation:\n\n27: TreeWalkerFilter Interface TreeWalkerFilter may be annotated with @FunctionalInterface\n\n. done. @rnveach \nYour example from your forked repo, inside main repo this suppression exists\nhttps://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/Checker.java#L442\nOtherwise TeamCity fails. @rnveach \nI think moduleFactory.createModule(name); is where exception probably could happen, but i was not surrounded by try/catch before. Should I do it now?. done. done. @romani @rnveach @MEZk \nAs I understood, TreeWalker is the child of the Checker. So if any exception occurs inside TreeWalker.setupChild it will be caught inside Checker.setupChild, right?\nIs this try-catch necessary? \nIt will require some tests to be changed, because new thrown exception differs from old one.\nPrevious exception message\n\ncannot initialize module com.puppycrawl.tools.checkstyle.TreeWalker - Cannot set property 'excludedPackages' to 'com.puppycrawl.tools.checkstyle.checks.metrics.inputs.a.' in module com.puppycrawl.tools.checkstyle.checks.metrics.ClassFanOutComplexityCheck\n\nException with try/catch inside TreeWalker.setupChild\n\ncannot initialize module com.puppycrawl.tools.checkstyle.checks.metrics.ClassFanOutComplexityCheck - Cannot set property 'excludedPackages' to 'com.puppycrawl.tools.checkstyle.checks.metrics.inputs.a.' in module com.puppycrawl.tools.checkstyle.checks.metrics.ClassFanOutComplexityCheck\n\nOther moment, if for example TreeWalker.setupChild catches exception and throws CheckstyleException. This thrown exception will be caught by Checker.setupChild and message becomes little bit weird:\n\ncannot initialize module com.puppycrawl.tools.checkstyle.TreeWalker - cannot initialize module com.puppycrawl.tools.checkstyle.checks.blocks.EmptyBlockCheck - Cannot set property 'option' to 'invalid_option' in module com.puppycrawl.tools.checkstyle.checks.blocks.EmptyBlockCheck\n\noriginal message\n\ncannot initialize module com.puppycrawl.tools.checkstyle.TreeWalker - Cannot set property 'option' to 'invalid_option' in module com.puppycrawl.tools.checkstyle.checks.blocks.EmptyBlockCheck\n. DetailAST.findFirstToken finds child node, this function finds sibling node. @rnveach \nbut I need only first level children\n\nSorry, not first level children, same level sibling\n. I thought source is too small to be stored inside separate file. done. done. done. @romani @MEZk \n\nwe looks like always do getRootAst and then new RootNode.\ndoes it make sense to have util method getRootNode.\n\nNo, you can see usage of  rootAst below, I use it to get real, 'expected' DetailAst node. Sorry, done. done. done. done. done. done. done. done. done. done. done. done. done, detalAst is final thats why current order is root, parent, detalAst, attributes, ident, text. done, created separate test classes for each node type. done. done. done, explained in javadocs why it throws exception. done. resolved. done. I took AnnotationUtility class as sample, it has exception thrown inside constructor. done. done. yes we can, I'll rewrite this method. done. done. done. @MEZk \nI use this field inside equals and hashcode functions. @MEZk \nRemember we talked about querying elements using child attribute value. This method will say us if current ast element is needed to be expressed using child value or not. If element has @text attribute or if element has no sibling with the same token type, then we can say that xpath query for this element will return only one required element. Otherwise we should find child element with @text attribute, and express current element using child element.\nImports are not unique, as they do not have ident child and there are many other imports that's why generated query will look like\n/IMPORT[./DOT[@text='File']]. ok. done. done. done. done. done. done. done. done. done. done. done. just mistake. Done. Idea was to iterate all nodes on the same level, and find if there any node with same token type. If we start iterating from next sibling, probably we can miss previous nodes, since it is not surely that DetailAST ast is the first child\nI am trying to generate test to prove my point. done. added test to prove idea. done. done. done. done. But I had violation that there must be {} after ->, I checked other usages of TokenUtils.findFirstTokenByPredicate in source files and every where there are curly brackets with return statement. done. @MEZk \nCorrected, method was returning opposite result. Changed method and created two tests. done. added new tests\n. In defense of the current implementation\nWhat if id attribute of the suppress tag would be responsible for environment. Suppose we have two environments: test and prod. And we want to specify different suppressions for source and test files.\nThe following example illustrates how different suppressions can coexist inside the same file \n```\n\n\n```\n. @rnveach \nBut what the reason to change these methods, we avoided negative pattern in method name (isFileNameAndModuleAndCheckNameMatching) and changed returning result completely using de Morgan's theorem.\n. @rnveach \nWhy should we change this method too. Logically if file name and module and checs are not matching and xpath query is not matching it means TreeWalkerAuditEvent does satisfy suppression properties, it means event should not be suppressed -> should be accepted\nright?. @rnveach \n\nSo shouldn't your method be like:\n!isFileNameAndModuleAndCheckNameMatching(event) && !isXpathQueryMatching(event);\n\nNo, imagine situation when isFileNameAndModuleAndCheckNameMatching(event) returns true and TreeWalker audit event does not match xpath query, so isXpathQueryMatching(event) is false, result expression will be FALSE AND TRUE which is equivalent to FALSE, so message will be removed and event would be suppressed, but it is not correct\nIn my implementation accept will return false only if isFileNameAndModuleAndCheckNameMatching is true  and isXpathQueryMatching is true, otherwise method will return true, which is logically correct I think\nIf you look closer, methodSuppressElement.isLineAndColumnMatch should be renamed \nto isLineAndColumnNotMatch considering its realization. done. done. done. I made it for pitest coverage, I found another way cover the code. done. done. done. done. fixed all. done. done. done. done. done. What if we make +1 inside CommonUtils.lengthCompressedTabs?. yes, you are right. ok. yes, but then we should make init method static, and if it is static then we can not invoke getPath method. > len = (len / tabWidth + 1) * tabWidth;\nlooks like len = (len / tabWidth + 1) * tabWidth is not same as len += tabWith\nyou can see CommonUtilsTest.testLengthExpandedTabs is failing\nexample: len = 2 and tabWidth = 8\nlen = (len / tabWidth + 1) * tabWidth  ==  8\nlen += tabWith  == 10. It looks like if I use \"Before\" annotation instead of \"BeforeClass\", code seems to be cleaner, since I do not have to specify full path explicitly inside init method\nWhich one to use. done. done. done. done. added three more tests. done. done. done. done. @MEZk \nYou are right, I was trying to reimplement the same logic - it is not correct I guess\n@MEZk @rnveach \nBut I do not understand why we have len = Math.floor(len / tabWidth + 1) * tabWidth instead of len += tabWith\nCan you explain?. done. done. done. done. done. done. done. done. done. @rnveach \nsorry totally forgot about it . done. Commenting or removing section gives following message: \n\nAllChecksTest.testAllCheckstyleModulesHaveXdocDocumentation:425->lambda$testAllCheckstyleModulesHaveXdocDocumentation$3:429 Module SuppressionXpathFilter does not have xdoc documentation.. done. Should I rename SuppressionXpathFilter to SuppressionXpathFilterStub to avoid checks for documentation and etc?. done. done. done. done. removed. removed. Otherwise I have following tests failed\nAllChecksTest.testAllCheckstyleModulesInCheckstyleConfig:443 checkstyle_checks.xml is missing module: SuppressionXpathFilter\n[ERROR]   AllChecksTest.testAllModulesAreReferencedInConfigFile:331->lambda$testAllModulesAreReferencedInConfigFile$1:334 SuppressionXpathFilter is not referenced in checkstyle_checks.xml\n\nI can explicitly remove SuppressionXpathFilter from tests. done. Should I specify current issue or issue when it will be resolved?. CLI option will be available after resolving 4530, should I mention this issue in config_filters.html?. <subsection name=\"Example of Usage\">\n        <ul>\n          <li>\n            <a href=\"https://github.com/search?q=path%3Aconfig+filename%3Acheckstyle_checks.xml+repo%3Acheckstyle%2Fcheckstyle+SuppressionXpathFilter\">\n              Checkstyle Style</a>\n          </li>\n          <li>\n            <a href=\"https://github.com/checkstyle/checkstyle/blob/master/config/suppressions-xpath.xml\">\n              Xpath-suppressions config file</a>\n          </li>\n        </ul>\n      </subsection>\nI tried to do this way, but XdocsPagesTest#testAllCheckSections fails, since only Checkstyle Style, Google Style and Sun Style texts are allowed inside Example of Usage subsection.\nShould I modify test to accept SuppressionXpathFilter section?. done. done. done. done. done. done. done. done. done. done. I took as example TreeWalker.DEFAULT_TAB_WIDTH which is 8 by default. Done. Done. Done. Done. Done. Done. @rnveach \nShouldn't it be \"The option cannot be used with other options and requires exactly one file to run on to be specified\"?\n. done. Done. Done. Done. Done. Done. Should It print \"new line\" character in the end?. Done. done. As @rnveach mentioned, if we store in string format and use System's line separator there is no problem with OS. What do you think about w3schools link?. done. done. done. Ok, should I change just my line or all \"errors\" occurrences in this file?\nSee this, \nthis and this\n. > base on #5648 (comment)\nprobably I missed this comment from you\nDo you want me to make separate test classes for each check or it is ok to have one big test file?. done. done. I used //warn, because AbstractModuleTestSupport requires this comment. Because, otherwise it fails with 'Unable to instantiate \"root\" class, it is also not possible to instantiate it as \"rootCheck\" ...'\nThe problem, when you call createRootConfig() method, it creates configuration with name root (new DefaultConfiguration(\"root\")).  And when you call createChecker(Configuration moduleConfig, ModuleCreationOption moduleCreationOption), it goes to else section and creates root configuration with root child. So when this configuration is being passed to Checker object, it fails, because there is no such module called root.\nI took this else if part from original AbstractModuleTestSupport. Yeah, I can revert it, it was one of my tries to fix errors\nBtw, I took it from AbstractModuleTestSupport located in test package, should I revert it? . should I create new AbstractModuleTestSupport?. I probably misunderstood you\nThere are two ways\n1. Create many SuppressionXpathFilter modules with only xpath query\n2. Create one SuppressionXpathFilter with joined xpath query\nMy solution refers to the second way, that is why I use join\nI see no difference between them, the only difference in the second case there is an additional opportunity to test complex, combined queries\n. Done. Because all these queries point to the same line and column number\nHow we know which query is responsible for node we want to suppress, since violation message does not contain token type information, only line and column?\nSo for each test we can manually specify required xpath query, or use one of two approaches I described above. > my experiment:\nFirst of all about different column numbers\nThe reason of this difference, that user messages consider tabs and start with 1, when AstTreeStringPrinter prints 0-based column numbers without calculating tabs.\nSo If you want numbers to be the same, we should pass tabwidth to AstTreeStringPrinter and little change one line and thats all\n\nSo if we force Checks to report issue on AST nodes that have text from file\n\nYou are suggesting to change log() calls inside checks, so Checks will report violation on nearest node that satisfies condition node.getText() not equals string representation of the node.getType().\nif you mean it, it will require a lot of correcting tests. But yes, probably it will work\nAnother way is to print tokenType inside violation messages, for instance\nInputTest.java:2:5:METHOD_DEF: Cyclomatic Complexity is 2 (max allowed is 0). [CyclomaticComplexity]\nAnd make xpath query generator accept tokenType among line and column numbers\nThird approach is very similar to #102\nThis is more natural for me and requires much less pain to make it\nWe could force users to use configuration file alongside with query generator parameter\nSo if you want to generate xpath query will use the following format\njava -jar checkstyle-8.10-all.jar -c checks.xml -s 4:5 TestClass.java\nSince we pass configuration file, we will be able to extract LocalizedMessage from errors list during runtime and generate xpath queries\n. > so it is more reliable to be listener/filter of TreeWalker.\nI didn't understand, do you suggest to replace listener with  TreeWalkerFilter? or there is another special type of AuditListener for TreeWalker events?. what is another way to solve this issue, what can be used instead of audit listener?. I will try. Done. done. done. you mean SuppressionXpathFilter or XpathFilter?. I need i since I extract corresponding xpath query from another list. done. done. done. done. done. done. done. done. done. done. done. Since EVENTS and QUERIES are private static final fields and have no getters, how can I check their values?\n\nDo you have problems to make this Test by some Input file and predictive result ?\n\nI have input and predictive result in XpathFileGeneratorAuditListenerTest, there I check for generated suppressions file, here I wanted to check for generated xpath queries, \nbut I think all functionality of the XpathFileGeneratorAstFilter is covered in XpathFileGeneratorAuditListenerTest and MainTest so I can just remove these reflection test methods. done. done. done, made new public static method to get simple name from full name. done. But if I am not wrong getColumnCharIndex() can be zero \nProbably we can use getTokenType()!=0  . done. done. done. done. done. done. done. LocalizedMessage does not store file name to compare with AuditEvent's file name. done. done. done. done. done. done. done. done. @romani \nIdea inspections were failing with Raw use of Parameterized class violation\nThis all happened because in new version of the library definition of the class net.sf.saxon.om.Item changed from\npublic interface Item extends Sequence\nto\npublic interface Item<T extends Item> extends GroundedValue<T>.\nAnd since we use net.sf.saxon.sxpath.XpathExpression.evaluate() method which returns List<Item>, I didn't find another way to avoid idea inspection violation other than suppressing it\nDo you have any suggestions?. Is it ok if I leave @SuppressWarnings annotation on test classes?. done. @text - about naming \n@value - about value \nAs @lars-sh proposed, we can now use the following queries to get NUM_INT token.\n```\nint abc = 123;\n|--VARIABLE_DEF -> VARIABLE_DEF [2:0]\n|   |--TYPE -> TYPE [2:0]\n|   |   `--LITERAL_INT -> int [2:0]\n|   |--IDENT -> abc [2:4]\n|   |--ASSIGN -> = [2:8]\n|   |   `--EXPR -> EXPR [2:10]\n|   |       `--NUM_INT -> 123 [2:10]\n|   `--SEMI -> ; [2:13]\n\n//VARIABLE_DEF[@text='abc']//NUM_INT\n//VARIABLE_DEF//NUM_INT[@value=123]\n```\nAnother use case, next example demonstrates how we can query same IDENT node\n``\nCLASS_DEF -> CLASS_DEF [1:0]\n|--MODIFIERS -> MODIFIERS [1:0]\n|--LITERAL_PUBLIC -> public [1:0]\n|--LITERAL_CLASS -> class [1:7]\n|--IDENT -> SomeClass [1:13]\n`--OBJBLOCK -> OBJBLOCK [1:23]\n//CLASS_DEF[@text='SomeClass']/IDENT\n//CLASS_DEF/IDENT[@value='SomeClass']\n```\nNow the main reason we created this attribute\nFor example we want to suppress all import statements, which contains java in the path\nimport java.util.*;\nAst tree of this import\nIMPORT -> import [1:0]\n|--DOT -> . [1:16]\n|   |--DOT -> . [1:11]\n|   |   |--IDENT -> java [1:7]\n|   |   `--IDENT -> util [1:12]\n|   `--STAR -> * [1:17]\n`--SEMI -> ; [1:18]\nPrevious implementation didn't allow it, but with current it would smth like \n//IMPORT[.//IDENT[@value='java']]\n@lars-sh please, correct me if I am wrong. done. done. @lars-sh thanks, edited code using your PR. moved all to the map. done. fixed. @romani \nI will add examples to documentation, but what about XpathQueryGenerator should it be changed it this PR as well?. done\n@romani @rnveach \nI updated documentation and XpathQueryGenerator. done. done. done. done. done. I will try my best to explain as clear as possible)\nReasons why I did this limitation:\n1) I think @value should be used for values, not AST token values, but java variable values. I could not find any extra case where I would need this attribute except for querying tokens by value.\n2) The @value attribute takes its value from DetailAst.getText() method. \nSo it is possible that @value attribute will be the same as token name:\n//CLASS_DEF[@value='CLASS_DEF']//MODIFIERS[@value='MODIFIERS']\nOr almost the same:\n//LITERAL_VOID[@value='void']\n//RCURLY[@value='}']\nI think @value attribute is useless for those queries, it does not carry any information, it does not help to get more precise results, it does nothing.\n3) This limitation is used also by XpathQueryGenerator.  With current logic it would generate a very long queries with @value attribute in every node in the path.\nFor example:\n/CLASS_DEF[@text='InputXpathQueryGenerator' and @value='CLASS_DEF']\n/OBJBLOCK[@value='OBJBLOCK']/METHOD_DEF[@text='callSomeMethod' and @value='METHOD_DEF']\n/MODIFIERS[@value='MODIFIERS']/LITERAL_PUBLIC[@value='public']\nWhat do you think?. done. > should be named as createTextAttribute\ndone\n\nWe need to:\n1. rename @text to @firstIdentText in one issue/pr. It is kind of breaking changes, but it better to make it now, before xpath become primary way of suppression.\n2. as second step, make new @text that will be exactly what you make as @value in this PR.\n\nTotally agree. @rnveach @romani \n\nI debugged getAttributeValue some, and yes, it is only called if the xpath has an attribute. So we don't need to populate it for all nodes if we don't always use it.\n\nDidn't really understand, do you suggest to use old setIdent method inside getAttributeValue method and store result for next queries?\n\nIt seems iterateAxis is used very rarely in our tests (mostly XpathMapperTest). I see it being invoked when * and possibly // is used, but it still shows it doesn't need the attributes for every node depending on the xpath given by the user.\n\nAbout iterateAxis, we can create AttributeNode array inside method during runtime\n@rnveach \nIf I understood you correctly, you want lazy loading, data is created only when it is needed?\nI can check these approaches with 5820 issue and see if it will help or not. @rnveach @romani \n\nI can check these approaches with 5820\n\nStackOverflow happens because AST tree of this file has the following AST structure:\nI couldn't even print full AST tree of the file, because it takes a very long time for CMD tool.\n|   |     `--PLUS -> + [3:96]\n    |   |           |--PLUS -> + [3:93]\n    |   |           |   |--PLUS -> + [3:90]\n    |   |           |   |   |--PLUS -> + [3:87]\n    |   |           |   |   |   |--PLUS -> + [3:84]\n    |   |           |   |   |   |   |--PLUS -> + [3:81]\n...\n    |   |           |   |   |   |   |   `--STRING_LITERAL -> \"\" [3:82]\n    |   |           |   |   |   |   `--STRING_LITERAL -> \"\" [3:85]\n    |   |           |   |   |   `--STRING_LITERAL -> \"\" [3:88]\n    |   |           |   |   `--STRING_LITERAL -> \"\" [3:91]\n    |   |           |   `--STRING_LITERAL -> \"\" [3:94]\n    |   |           `--STRING_LITERAL -> \"\" [3:97]\nSee, every PLUS node has two child nodes: PLUS and STRING_LITERAL, \nthe problem we are making a lot of recursive calls (not infinite).\nWe cannot avoid creating children nodes, otherwise we won't be able to query them.\nMaking getAttributeValue lazy does not help - because StackOverflow error appears on Xpath tree initialization phase, not on query phase.\nCurrently I see only one way to solve this problem, switch from DFS to BFS.\nRemove recursive calls and use queues:\n1. Take node from queue\n2. Process it\n3. Put child nodes into the queue\n4. Move queue cursor to the next element\nBtw, if you want I can implement lazy approach, but I am not sure what it will give us. @romani \nThe point is - previous implementation of the XpathQueryGenerator iterated through node's children and checked if child node has IDENT child node.\nThe problem is\n1. It is possible that node with @text attribute will be somewhere in the subtree (may be grand grand child of the current node), so we need to check recursively all subtree, it could take a lot of time resources\n2. Finding node with @text attribute does not guarantee that node is unique among its siblings - simple example is /IMPORT[./DOT[@text='Scanner']] can be applied for both java.util.Scanner and kz.tim.Scanner\nThat's why I think /IMPORT[2] is more strict than /IMPORT[./DOT[@text='Scanner']], because you can have several Scanner imports\nNew implementation of the XpathQueryGenerator works in following way\nif our node \n1. does not support @text attribute\nand\n2. is not unique among siblings\nand \n3. has no child which supports @text attribute\nthen simply find position among siblings\nIf you think we should make xpath query more strict then I can\n1. additionally check grandchildren which support @text attribute\nor\n2. recursively iterate subtree until I find node with @text attribute\n. done. done. done. done. done. Copy pasted from XMLLoggerTest, \nremoved comment. done. done. done. done. done. ",
    "tashish": "Thanks. Added 'final' back to the class declaration. Thanks @Vladlis . ",
    "MikhailovOlegM": "Please explain in more detail\nI have a resource file - InputSimple.java. It must be renamed to InputSimpleLineLength?\nOr it is rename LineLengthCheckTest to rename on InputLineLengthCheckTest?. ",
    "kevinji": "Fixed.. ",
    "wate123": "fixed it!. Ummm. After I did this, It gives me a COMPILATION ERROR and told me to change the file name to InputSingleSpaceErrors.java. What should I do next?. ",
    "unrealwork": "@rnveach It depends on that we never cover the loop in your implementation because we will  never cover both loop's condition. ",
    "Nimfadora": "@rnveach, I moved all test inputs concerning LocalFinalVariableNameCheck, which is the target class for this issue, to separate file, as a part of a tendency in Issue: #3891. I don't understand why it is bad, as you even have a task on moving inputs to separate files.. ok. I will move it as is.. Done. Done. Done. Done. However, not sure, if the new case is good enough. Coudn't imagine anything better.. Done. Done. Done. Done. Done. Done. Done. Done. Done. Oh... Now I see your point. I moved all input for try-with-resorces check to separate file. However, I needed to add a one more test, to use this input file. Hope, now it is ok. Yes, you are right. I'll remove it while increasing coverage for this profile.. fixed. fixed. fixed. fixed. fixed. fixed. fixed. fixed. fixed. fixed. @romani, but it does not lower the coverage, according to recent check. So if needed I can remove this exclude.. Done. Done. Done. Done. Fixed. done.. done.. done.. done.. @rnveach , if I do so, it fails with java.lang.RuntimeException: Unable to get internal state on a private field. Please report to mockito mailing list.. Done. done. done. done. done. Now, really done. Fixed. Fixed. Fixed. Fixed. Fixed. Fixed. Fixed. Fixed. Done. Fixed. Path does not override equals, so it is compared by identity.. Fixed. Fixed. Fixed. Fixed. TokenUtils is the main code utils class, ASTUtils is used just for test purposes, I moved there some logic that I plan to use in several test classes, and it is situated in test folder. I don't see any reason to mix test utils and utils for production code. I can move it to com.puppycrawl.tools.checkstyle.internal.TestUtils if you think it will be better.. No, I can't. This method searches only among 1-level children of the node specified, and I need depth first search or something alike. But I can rewrite it without recursion.. Fixed. Fixed. Fixed. It is a normal case, I will rewrite javadoc. Because if we parse a file all nodes such as imports and class definition are neighboring siblings. So I should rather rewrite javadoc or wrap parsed file by some parent ast.. I have already moved it. Should I revert?. Already, in TestUtils. Fixed. Fixed. Done. I didn't think that it is important for input files. Do you think it is? . @rnveach the thing is the majority of test are written in a functional way. And during execution many of them work with a TreeWalker. Adding check tests to this profile increases mutation coverage on \u00b16%. . @rnveach I had tried, but I didn't manage...  If you take a look at this method in the gist you'll see several survived mutation. The thing is that any code that uses this method does not rely on any values which being set on \"red\" lines. And the output of this method is incapsulated only in local variables. So, I didn't find a way to get it without reflection.\nFrom some perspective, those lines could be successfully removed. But they provide a proper structure of DetailAST object which corresponds to well formatted javadoc, so it may be useful in future.. @rnveach testParseFile calls AstTreeStringPrinter.printFileAst. But this test calls AstTreeStringPrinter.printAst. Without File :) Both methods are quite similar, but printAstwas never called from tests.. Added a package.. Done. Fixed. Removed. Removed. Removed. Fixed. Fixed. One of pitest's mutations is to change \"<\" to \"<=\" and vice versa. In case of Integer.MAX_VALUE-1 it didn't change anything and mutation survived. . One of pitest's mutations is to change \"<\" to \"<=\" and vice versa. In case of Integer.MAX_VALUE-1 it didn't change anything and mutation survived. . This method should return smth, cause it recursive. It walks through AST tree.. I can not inline it, cause this method is recursive. It walks through AST tree. However, I'll change \"assert\" on exception throwing.. Done.. renamed method. I didn't like \"verify\" - it doesn't do any verification, just \"get\" looked better to me. Is it ok?. Done.. I'm not sure, I got what you asked me to do... However, I got rid of 184 hardcode, and added test which checkes token value for each TokenType. Done.. Done.. Done.. Done.. Done. Done. Done. @rnveach, francly , all this \"tets\" were testing nothing, only rasing up coverage by calling not covered methods, I don't understand the purpose of such tests, they are not fair. @romani said I should add the most simple to check asserts. If it is not ok for now, I will rewrite.. @romani, ok, the best choice is to rewrite them. In any case it will help pitest mutation coverage to increase.. Removed, added specific suppressions. Removed. The situation is as follows: method processFiltered if called from BaseCheckTestSupport this condition is not checked as it checks it before here.\nSo I have to call this method on TreeWalker class directly, and check that on the same lines but with different extensions check fails on java file and does not on txt. What should I pass to junit runner and for what purpose, if the cause of test failure is not in the exception but in the fact that it is thrown?. This method doesn't do anything if you look further. AbstractCheck#destroy is empty and AbstractFileSetCheck#destroy is also empty. It just creates pitest issues. If you could say what this method should really do, please say it.. added. excluded destroy from pitest. fixed. fixed. I just forgot to remove this one.. Those features are enabled by default. I moved them to the tests - to always be sure that they are still enabled.. I'm not really sure how. BitSets actually are equals each time. By this test, I wanted to ensure that each call to add/set sibling/child methods force bitset to be recalculated.. @romani  it's kinda troublesome. I can exclude addFeauresForVerySecureJavaInstallations from being mutated, but I cannot suppress mutation of the call to this method. avoidCallTo in PIT config didn't help, cause it allows only class names as params.\nI can pull this method to the separate class, eg AbstractLoaderUtils, and this helps. Is it fine or an overkill?. fixed. Fixed. fixed. fixed. fixed. fixed. fixed. fixed. Closables.close throws IOException and here the logic is build around threw variable. If we remove it and just put RandomAccessFile creation into try with resources - everything is ok, but than we broke the current logic. new RandomAccessFile also throws FileNotFound exception. fixed. fixed. fixed. Closeables.close(OutputStream) throws IO, leaved it as is. fixed. fixed. fixed. I moved method from coding check, to utils class. Utils class is in different pitest profile, so it led to downgrade of pitest coverage. I had to add this line and one extra test, to bring it back to 100%. Confirm. Time of pitest run for utils profile is still around 2-3 mins. fixed. fixed. fixed. done. it contains test methods which are used in this class, so I add them to idea TestMethodWithoutAssertion violations test method list. fixed. work-around to calm down pitest till the issue on pitest  will be resolved. it is linked with work-around caused by pitest strange behavior. @romani I've completely messed up with git...  Pushed right changes. fixed, but may cause problems if merged after BooleanParameter. fixed. fixed. fixed. done. done. It is redundant, and my IDEA shows it as a redundant, why don't we remove it. Fixed. @romani I couldn't find a direct link to place it in wget.... done. done. done. done. fixed. @romani I'm not really familiar with wercker ... I only took a quick look into it.\nAre we going to create a separate wercker.yml which will be based on sonarqube box? (Cause if so, it will have no need to stop container also...). And I think, wercker config will be rather different from this script... May be we leave it more or less as it is, for developer local usage. And basing on it, I will create a wercker config. In a meantime we can review existing violations.. fixed. Fixed. I don't know why it was failing either. I have no access to the commit of that PR, it was not saved on the TC, so I could not see the full context of current situation. Fixing all other violations sometimes helps, so maybe it was just a bug. . yes, it kills this mutation. fixed. fixed. fixed. @romani \"-err\" is used behind the scene in the property file. All inspections are enabled as error or ignore (those ones, that produce some errors). error in property file is the same as err here.\n. @romani I've missed this one. . done. done. @romani the latest 3.13.0 (by the way, do you know why 3.x.x? Currently I used 4.6.1) is not working by default. It says -\nUnable to load annotation processing manager org.eclipse.jdt.internal.compiler.apt.dispatch.BatchAnnotationProcessorManager from classpath.\nI've found the only old issue - https://bugs.eclipse.org/bugs/show_bug.cgi?id=507370 , but it is already fixed.. However, I found way to get 4.7version. I used direct link on one of mirrors - \nhttp://ftp-stud.fht-esslingen.de/pub/Mirrors/eclipse/eclipse/downloads/drops4/R-4.7-201706120950/ecj-4.7.jar\nIs it ok?\n(4.7 works fine). done. done. done. done. As it is CR line separator it could not pass this check, but for testing purpose I need only CR, so we should leave this suppression.. I have tried to launch it on several files, but nothing changed. Maybe they don't suit some condition.... We push and pop context from context stack, so context stack may remain not empty only if visitTocken is called and leaveToken is not called, could you help with a test case where this condition is fulfilled?. Done. @romani explained it above.\nRepeating here:\nthe latest 3.13.0 (by the way, do you know why 3.x.x? Currently I used 4.7.0) is not working by default. It says -\nUnable to load annotation processing manager org.eclipse.jdt.internal.compiler.apt.dispatch.BatchAnnotationProcessorManager from classpath.\nI've found the only old issue - https://bugs.eclipse.org/bugs/show_bug.cgi?id=507370 , but it is already fixed.\nHowever, I found way to get 4.7 version. I used direct link on one of mirrors -\nhttp://ftp-stud.fht-esslingen.de/pub/Mirrors/eclipse/eclipse/downloads/drops4/R-4.7-201706120950/ecj-4.7.jar\nNot sure if it ok... But 4.7 works fine.\n. done. > why so special ? to need \" \"\nremoved quotes. done. both. Some of them have available options - enabled/disabled, some - error/warning/ignore\nFYI, there was a problem with finding this properties namings. \nI mean, it is not \"org.eclipse.jdt.core.compiler.problem.\"+ inspection name from https://help.eclipse.org/neon/index.jsp?topic=%2Forg.eclipse.jdt.doc.user%2Ftasks%2Ftask-using_batch_compiler.htm\nSo, I installed the latest Eclipse, went to the settings and enabled all analysis options. \nAfter that, I just took properties from org.eclipse.jdt.core.prefs file.. done. done. done. done. fixed. fixed. fixed. done. done. done. done. I have made a mutation and do regression as you have said, but everything is okay, nothing breaks. This if close somehow avoids collisions in short class names for such cases as: java.lang.String and com.sun.org.apache.xpath.internal.operations.String. But I cannot find test case for it.. Here it is said that we should separate paragraphs with <p> tag. But if we don't care on this old document, I would rather rewrite it as you have said: <p><b>Tree for example:</b></p>, as <br/> tag is also old-fashioned solution.. fixed. done. done. fixed. There was a comment over the method with short description: \n\nAs we cannot reproduce situation when we set excludes several times during one run\n\nThis method is not used in the project, so it may be reasonable to delete it, so you agree?. This method is used only in tests, so it may be reasonable to delete it, do you agree?. @romani when I call check.configure(checkConfig) two times on different configs it just checks the same input by two different configs and the state is clear when second config check starts, than it aggregates messages from first and second config.. @romani have I understood you right: we delete line excludes.clear() from AvoidStarImportCheck and the same thing with IllegalImportCheck, where we delete line illegalClassesRegexps.clear();. Here are three outputs, without all (fireFileStarted, fireFileFinished), with only (fireFileFinished) and with both (fireFileStarted & fireFileFinished). \nSecond and third are equal. First differs from them like this:\n1) it doesn't have new line in the end of the file\n2) it doesn't have duplicate line with base property file\ntranslation_only_finished.txt\ntranslation_started_finished.txt\ntranslation_without_all.txt\nIf we don't care on duplicate (or maybe it is the right way of displaying this), I will leave only fireFileFinished. fireFileStarted only creates empty FileMessages, but in other methods of the class the putIfAbsent is used, so there is no need of creation empty FileMessages.. set IDEA_HOME environment variable to be equal to the path to the idea.bat/idea.sh file for ex: \nwindows: SET IDEA_HOME=C:\\Program Files\\JetBrains\\IntelliJ IDEA Community Edition 2017.2.1\\bin\\idea.bat \nlinux: export IDEA_JOME=/usr/local/bin/idea\nmac: export IDEA_HOME=\"/Applications/IntelliJ IDEA.app/Contents/MacOS/idea\"\n(directories may be different)\nthan just run idea-inspection.bat/idea-inspection.sh from checkstyle root dir. done. done.         // We should specify columnNo passing condition in such a way, \n        // so that the minimal possible distance between field and objCalledOn\n        // will be the maximal condition to pass this check.\n        // The minimal distance between objCalledOn and field (of type String) initialisation\n        // is calculated as follows: \n        // String(6) + space(1) + variableName(1) + assign(1) + \n        // anotherStringVatiableName(1) + semicolumn(1) = 11\n@romani is it more clear explanation?. Because next we will try to search idea.bat in path. \nSame as below.... done, mixed up checks. removed. removed. fixed. fixed. fixed. done (above one also, cannot comment). done . done. ",
    "izishared": "@Vladlis I've renamed this test and test resource. Please review this changes.. @rnveach I've changed getNonCompilablePath and moved resources to new location.. ",
    "trajano": "Hmm let me check on that one the codehaus.org links should never work.. You had an existing exclusion for github.com already.  Why have a second one here?\nhttps://github.com/checkstyle/checkstyle/pull/4114/files#diff-600376dffeb79835ede4a0b285078036L1181. Are you restoring because it is failing on your end due to old certificates on your build server? . plugins.html shouldn't have been excluded either.  So kind of weird.. So are you suggesting I revert all the \"excludedLink\" to its original state?. Ok so I'll undo all the changes to the exclude links and see how this goes then.. BTW I have rebased again and the codeship you have specified isn't building still.  Also travis seems to fail on one of the tests but I am not sure why since I am not even touching that part of the code.. ",
    "kuri-leo": "@rnveach my code has updated, please check! Thanks! ;). ",
    "Kietzmann": "Recently I made a commit with appropriate changes. @rnveach \nCould you please review it again. \nAt last push, I faced with the problem that TeamCity build and wercker pipeline are not passing. TeamCity arguing on files that I haven't modified and also I haven't access to wercker.\nThanks. @sabaka \nMaybe InputWhitespaceAroundKeywordsAndOperators?. @rnveach \nReverted.\n*PS: for the next similar situations, please write your expectations in the body of related issue(s).. @sabaka \nDone. @rnveach \nDone. @rnveach \nDone. Done. Done. Done. Done. It was added by Intellij auto format tool when renaming using ctrl+f6\nFixed. Fixed. @romani \nShould I remove unnecessary spacing in such way as it was done previously?. Done. Done. Done. To which name I should update?\nInputEmptyBlockSemantic2 or some else?. Fixed. Look\nInputOperatorWrap.java was moved to directory /operatorwrap by person, who was splitting tests for OperatorWrap but he/she didn't modify package in this file from com.puppycrawl.tools.checkstyle.checks.whitespace to com.puppycrawl.tools.checkstyle.checks.whitespace.operatorwrap\nSo javac loocked in com.puppycrawl.tools.checkstyle.checks.whitespace and saw two classes InputOperatorWrap.java and InputSeparatorWrap.java. Because in InputOperatorWrap we use inner declared interfaces in InputSeparatorWrap, we should locate it in same package or import in another. So as package wasn't modified to meet the requirements it wasn't arguing by compiler.\n. If we want all files stored in separated packages for every test, we should move  InputSeparatorWrap.java to appropriate package. I done this in order to meet requirements(not to modify resource class body). It also used in HideUtilityClassConstructor. @rnveach @romani\nIt was used here under its original name here\nHideUtilityClassConstructorCheck\nBefore you merged it few hours earlier.\nI've fixed this already.. @romani \nHave I understood you correctly that I shouldn't modify this file and all should be as is now?. Fixed. Fixed. It don't create new instance of String when trim() does. Fixed. Reverted to previous. Done. Fixed. Fixed. Fixed. Fixed. Fixed. Fixed. Fixed. Fixed. Fixed. Fixed. Fixed. Fixed. At which line exactly or in both?. Variant A sounds good. @romani \nOk\nWorking on it. @romani @Vladlis @rnveach @MEZk \nThis class already has method isBlank(String str)\nhttps://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/utils/CommonUtils.java#L434. I've replaced with CommonUtils.isBlank() in all places where necessary and removed my previous modifications. Where?\nI've mentioned it in the method description\nI can write that if the value does not contain any character except whitespace or it is null\nBut it is obvious that null string is empty by its content. . @rnveach @MEZk \nPlease collect all your wishes to not waste time.\nThanks.. Done. Done. Done. Ok\nHow should I get the path of packages that are in outer scope?. I mentioned package, not file\nMain.main(\"-c\", \"/google_checks.xml\", \"-t\", getPath(\"checks/metrics\"));\nhow should I get path with modified version of getPath method without this getNonPackagePath?. I did not understood. I should provide new method or cope files from those directory?. ",
    "ilanKeshet": "It's the same, with some additional null safety, with the purpose being that null and the empty string, should be treated as being logically identical. . Thanks, you for your review. I didn't know that getting null is impossible, i was just attempting to be careful.\nThe redundant code was removed. . ",
    "sharang108": "So I should name 'InputRegexpSmallHeader' to 'InputRegexpHeader'? that would create a conflict there is already a class named InputRegexpHeader.\n. ",
    "dimo414": "Not clear what you're suggesting - do you want me to use CommonUtils.getUriByFilename() instead, or are you saying setConfigUrl() should simply be:\npublic void setConfigUrl(String url) {\n    setConfigLocation(url);\n}\n?\nI think that the latter would be a breaking change for callers that rely on .toExternalForm() being called, but if that doesn't concern you I can change it to that.. Done and done - I'd used setConfig(String file) since that's what you suggested in https://github.com/checkstyle/checkstyle/issues/4449#issuecomment-310078283, but this certainly makes more sense.. ",
    "silentj": "The fix is here: replacing matchPattern(..) with the same processJavadocTag(tag) that INLINE uses. \nAfter that change, both INLINE and BLOCK used the same .filter and .foreach, so the rest of the diff is to remove the duplication.. If you prefer, I could just add this @see tag to one of the javadoc blocks in InputUnusedImports.java. If I did that, there wouldn't need to be any changes to UnusedImportsCheckTest.java.. Ok, thanks. \nI'm done with this PR. The build is failing because issue #4606 isn't approved, yet. \nLet me know if there's anything I can do to get the issue approved and this PR merged.. ",
    "djydewang": "Fixed it.. Fixed it.. Fixed it.. Fixed it.. Done\n. @romani I use isLoaded for checking whether the class has been loaded.Because some test classes have been loaded and their name are not in the collection.For example,code.And I think it is not a good solution with two points:\n1.Using reflection and hard to pass Coverage check.\n2.It is redundant with Class.forName.\nNow,my idea is:\nRefactoring test case,all test cases should create Object of the Test Class with a standard form and the case is forbidden. \nPlease give me some suggestion.. @romani\nMore examples,\ncase1 case2\nI mean these classes have been loaded to JVM when we want to create objects of them.And they are not in the collection.Because they are not in main code or treated as thirdPartyClasses.So I use isLoaded to predict cases whether have success to load class by reflection at createObject. And the case should be loaded.First the load and the instantiation.. Done. Done.. Done.. Done.. Done.. Done.. Right,my original idea is that this is task of checkSeparatorBetweenGroups.\nDone.. Because I add groups attribute,it was not vaild violation.\nDone.. There is import groups aren't separated internally: ensures that each group aren't separated internally by blank line or comment in documentation.\nShould I update it?. Done.. Done.. @romani  I didn'd add all these properties to existing configs.And there are many configs without attribute 'separated'.So we don't lose tests for sparated set to false.\nFor example,\n```\n     public void testCaseInsensitive() throws Exception {\n          final DefaultConfiguration checkConfig = createModuleConfig(ImportOrderCheck.class);\n          checkConfig.addAttribute(\"caseSensitive\", \"false\");\n @@ -153,6 +174,10 @@ public void testTop() throws Exception {\n          checkConfig.addAttribute(\"option\", \"top\");\n          final String[] expected = {\n              \"4: \" + getCheckMessage(MSG_ORDERING, \"java.awt.Button.ABORT\"),\n +            \"7: \" + getCheckMessage(MSG_SEPARATED_IN_GROUP, \"java.awt.Button\"),\n +            \"12: \" + getCheckMessage(MSG_SEPARATED_IN_GROUP, \"java.io.IOException\"),\n +            \"15: \" + getCheckMessage(MSG_SEPARATED_IN_GROUP, \"javax.swing.JComponent\"),\n +            \"18: \" + getCheckMessage(MSG_SEPARATED_IN_GROUP, \"java.io.File.\"),\n              \"18: \" + getCheckMessage(MSG_ORDERING, \"java.io.File.\"),\n          };\n     verify(checkConfig, getPath(\"InputImportOrder_Top.java\"), expected);\n }\n\n```\nIf I removed such changes,these test cases would caught many MSG_SEPARATED_IN_GROUP exceptions.. Done.. > default value for separated is FALSE \nRight,these UT's task are not to test extra separated,So I make it TRUE.\nSeparated is default value in original UT,and the UT don't check out extra separated casued by Incorrect checkSeparatedInGroup method.. Get it.. RedundantModifier exception is caught when I add final modifier to method.. Inlining this method to doVisitToken directly,value of CyclomaticComplexity is 11.. done. sorry for my carelessness.it is 'comment'.\nDone.\n. @rnveach \nOh,I misunderstood you before.\nIt has been tested by https://github.com/checkstyle/checkstyle/blob/bd1923b0b5768b379ef29db3ff6712e5335b051b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/imports/importorder/InputImportOrder_Top.java#L11. @rnveach  Did you see my last comment?. Done.. Done.. Done.. Done.. Done.. Done.. Should we throw other warning message for repetitive imports or just warning message of import ordering?. > Fact that import is duplicated is not this check business.\nRight, maybe we can add new feature to detect duplicated import in the future. \nBut, I can only cover the red lines by this method now.. Done.. Done.. Done.. Done.. @rnveach \nInputRedundantModifierFinalInEnumMethodsInFinalClass is a final class which lead to this issue.\nInputRedundantModifierFinalInEnumStaticMethods is a class without final modifier test for the new violation.. @rnveach \n\nWhy does the final class matter when it doesn't produce a different violation?\n\nIt does not matter now but it produced a different violation in old version.\n\nWas this required for code coverage or pitest or another CI?\n\nNo.\nYou can see the detail of adding InputRedundantModifierFinalInEnumStaticMethods to UTs at conversation. \n:)\n. InputRedundantModifierFinalInEnumMethodsInFinalClass.java comes from description of this issue:). OK~I get it.\nThanks for your advice.. @rnveach \nDone.. Done.. > report didn't mention anything about this, only the if condition.\nRight, when we negate if condition and group != SPECIAL_IMPORTS_RULE_GROUP, findBetterPatternMatch method works right with SPECIAL_IMPORTS_RULE_GROUP para\uff4deter which means if condition meaningless.\n But, obviously, the if condition can't be omitted. So I do this change.. > There is no other way around this\nI have another way(add some tests) to cover pitest, but I think this code logic is better.\n\nSTANDARD_JAVA_PACKAGE_RULE_GROUP doesn't have this issue and it has very similar code.\n\nSTANDARD_JAVA_PACKAGE_RULE_GROUP is special with default value of  \"^(java|javax)\\.\", which make many tests intangibly on the line you mentioned.. Done.. ",
    "AustinShalit": "Ah. Thank you!. Ok. Ok. Ok.  Will rewrite.. Or should I override the implementation in DetailAST?. ",
    "vivekrao1985": "Makes sense, fixed.. ",
    "sergileon": "I added next tests:\nint in1 = new int[][]{{1},{2}}[ 0][0];//Correct\nint in2 = new int[][]{{1},{2}}[0 ][0];//Correct\nint in3 = new int[][]{{1},{2}}[0][ 0];//Correct\nint in4 = new int[][]{{1},{2}}[0][0 ];//Correct\n. I added next tests:\nint aaa = new int[][]{{1},{2}}[0][0];//Correct\nint bbb = new int [][]{{1},{2}}[0][0];//Incorrect\nint ccc = new int[] []{{1},{2}}[0][0];//Incorrect\nint ddd = new int[][]{{1},{2}} [0][0];//Incorrect\nint eee = new int[][]{{1},{2}}[0] [0];//Incorrect\n. Moved to getIndexOpPreviousElement.  Pitest report. I added examples and link for users. fixed. fixed. fixed. If I change old extractFullIdent on new, then next test crashed:\n\ntestRegularExpression\ntestEmptyRegularExpression\ntest\ntestCreateFullTypeOfArray\nOf course, I can rewrite the tests, but I don't think this is the best solution.. @Vladlis  fixed. fixed. @Vladlis , fixed createFullIdent. But, I can't extract change from FullIdent to CheckUtils, because I can use method append  only inside FullIdent. I can't change private on public, because FullIdentthis is API.. @romani , fixed.. @romani , fixed.. @romani and @rnveach in google_check.xmlis no description module NowhiteSpaceAfter. In /src/itis no the tests for NoWhitespaceAfter. Are you sure what it need for current issue? I think what is task for new issue.. fixed. fixed. fixed. fixed. fixed. fixed. Do you think need counted for TypeAnnotation?. I thought, what need ignore annotation for @interface. But it was wrong. I fixed it.. fixed. fixed. But Target andElementType are ignored, because is contained java.lang.*. Why will be need not duplication for Foo<? extends Foo>?. Fixed, I added TYPE_LOWER_BOUNDS . I added is more tests. In violation message the different position.. fixed, but generics not checked for CLASS_DEF, because in documentation is description:\nChecks that particular classes are never used as types in variable declarations, return values or parameters.. I don't know if I did the right thing.. fixed. @Vladlis, Why we exclude only annotations, but not primitive type, exception and etc. ?\n@romani , What do you think?. I think, need return TokenTypes, because it simplest way for resolve current issue.. ",
    "cushon": "done. done. ",
    "crud3": "Thanks for the feedback, I will get to work on it tomorrow!. ",
    "magicimagination": "fixed. fixed. fixed. fixed. done. ",
    "AADudkin": "Done.. Changed implementation so there is no need in this test now. Deleted it.. This issue is CLI-dependent. If we want to test how checks do behave with different path patterns we should probably create common test method in AbstractModuleTestSupport. Which is out of scope of current task.. Error with somehow invalid path could arise in other checks as well. I decided to remove possibility of such problem. We already read file contents when constructing FileText object. So it seems to me that getting correct file path at the same place would be logical.\n~~As for FileText constructor you mentioned. I marked it as Deprecated because JavaDoc states:~~\n\nThis process does not restore the original line terminators and should therefore be avoided.\n\n~~Also it is used only by deprecated FileContents constructor:~~\nhttps://github.com/checkstyle/checkstyle/blob/b07838ab8dc825e9be86e624e734408d3753ff5c/src/main/java/com/puppycrawl/tools/checkstyle/api/FileContents.java#L77-L81\n~~which in turn is used only by tests so API changes there should not harm anything.~~\nDeprecated annotation was removed.. Added test case to JavadocPackageCheckTest.. In fact, first argument in \"protected void processFiltered(File file, FileText fileText)\" is redundant, see #5196. My idea was to insure that if FileText could have been created it contains full info about file path. And then all checks (assuming #5196 would be approved) would have correct file info by definition.\nIf such assumptions are premature I will just fix this particular Check.. Done. We need real File in order to use\nprotected void verify(Checker checker, File[] processedFiles, String messageFileName, String... expected)\nbecause we open FileInputStream during the process.. @rnveach, thanks for pointing. Added javadoc for test. Done. Made fix for current Check only.. ",
    "pbludov": "You are right - the number should be 61, since I've added three new javadoc comments.\nOne nope, actually, is a javadoc comment. . @rnveach done.. done. done. done. It is a quote from Javadoc util documentation, as written above. See\nhttps://docs.oracle.com/javase/6/docs/technotes/tools/solaris/javadoc.html#documentationcomments\n\nDocumentation comments are recognized only when placed immediately before class, interface, constructor, method, or field declarations -- see the class example, method example, and field example. Documentation comments placed in the body of a method are ignored. Only one documentation comment per declaration statement is recognized by the Javadoc tool.\n\nThe original is not clear. I added an update to the quote. Such additions should be noted to make it clear that this is a modified quote.. I replaced \"tag section\" with \"optional tag section\" as you suggested. Did i miss something?. @rnveach done. The unclear part was extracted from the quote. Now it is a new paragraph.. @rnveach done. Rewritten as \"which may be followed\".\n. Should it be\nreturn Collections.unmodifiableMap(cppComments);\n?. maybe \"topOption\" and \"bottomOption\"?. Consider this config:\ntopSeparator=\"empty-line\"\nbottomSeparator=\"no-empty-line\"\nand this case\n```\nclass Foo {\n}\n```\nShould the check report a violation or not? There is an empty line at the bottom which is forbidden.. My idea is to have a dedicated option for this case. \"emptyBlockOption\" or something like that.\nOf course, this is make sense only if the top and bottom do not match.\nIn other hand, config\ntopSeparator=\"empty-line\"\nbottomSeparator=\"empty-line\"\nemptyBlockSeparator=\"no-empty-line\"\nlooks reasonable to me. Example:\n```\nclass BigClass {\nvoid method() {\n}\n}\ninterface Marker {}\n```\n. This code has already been removed and replaced with a much faster one.. Right now, only 26 classes have en empty line at the bottom:\nhttps://pbludov.github.io/issue-3923/bottom-noel/checkstyle-with-excludes/index.html\nThis will require the refactoring of the whole project. For the top separator, the stats are 50/50 for \"empty-line\" vs \"no-empty-line\".\nAlso, you need to think about nested classes. Should they have be wrapped with empty lines?\nThe Orekit project uses this style:\n```\nclass Foo {\nint wrappedWithEmptyLines;\nclass Inner {\n    int looksMoreLikeAMethod;\n  }\n}\n```. done.. Indeed. The default options must enforce some style. I delayed this issue till we know what options should be by default.. and \"emptyBlockOption\". done.. The execution should be skipped completely only if both separators are optional.\nIn this case the check has no effect at all and should be removed from the config.\nAs you noted before.. Done.. done.. These comments were left here by mistake. The lines to which they were related have been removed earlier.. This file is a subject to change.. They are all inconsistent. The ParenPadCheck has \"nospace\", the LeftCurlyCheck has \"nlow\", ReghtCurlyCheck has \"alone_or_singleline\". It looks odd. I think that all parameter names should follow one style. This is another story, but please share your opinion on the best style of parameter names here. I will do so for this check.. >LineBreakForLeftCurly and LineBreakForRightCurly\nI do not like the idea of splitting the check into two almost identical. But I like those names.\nLet it be \"LineBreakAfterLeftCurly\" and \"LineBreakBeforeRightCurly\".\nOr may be \"EmptyLineAfterLeftCurly\" and \"EmptyLineBeforeRightCurly\" - to put it  much closer to the EmptyLineSeparator check in the documentation.\nIt that case the parameter must be the boolean. Simply \"Need a blank\" vs \"Need no blanks\". \nTo have an enum for the boolean parameter is too overblown.\nPlease, give me a good name to this parameter. . What about\n<module name \"AfterLeftCurly\">\n  <parameter name \"emptyLine\" value \"true\">\n</module>\n<module name \"BeforeRightCurly\">\n  <parameter name \"emptyLine\" value \"false\">\n</module>\n?. done.. done. @rnveach done.. There is one more missing case: LITERAL_NEW.\nnew Runnable() {\n            @Override\n            public void run() {/**/}\n        };. Instead of turning off the check, you need to rewrite the switch.\nTurn the biggest block with many LITERAL_ * cases to \"default:\" and \"default:\" to simple \"case LITERAL_SWITCH:\".\nIn addition, you need to correct the comment near the \"default:\" because it is outdated and erroneous.. The first sentence is really bad. See how it looks in the rendered docs:\nhttp://checkstyle.sourceforge.net/apidocs/com/puppycrawl/tools/checkstyle/checks/blocks/package-summary.html\nPlease fix it.. The first sentence should be short and clear. In this check it should be something like \"Checks the placement of left curly braces.\"\nThe RightCurlyCheck is a good example.. Because the javadoc utility converts all the inline tags to their HTML counterparts.\nIf it's ok to have inline tags in the tokentypes.properties file, I'll revert this.. It was easier for me to refactor it in a separate package. To be sure that nothing is missing.\nI like the idea of returning all the names as they were.. I had two options:\n write a converter from inline tags to html tags\n do it manually\n\"<code>}</code>\" looks better than \"{@code &#125;}\" in my opinion.. done. Just one additional regexp and one line of code.. done.. done. . because this token is '/' not ' /'. . The javadoc parser is designed for other purpose. He does not have the tag \"first sentence\".\nHere is what it looks like:\n|   |   |   |   `--JAVADOC -> JAVADOC [15:7]\n    |   |   |   |       |--NEWLINE -> \\n [15:7]\n    |   |   |   |       |--LEADING_ASTERISK ->      * [16:0]\n    |   |   |   |       |--TEXT ->  '&amp;' symbol when used in a generic upper or lower bounds constrain [16:6]\n    |   |   |   |       |--NEWLINE -> \\n [16:76]\n    |   |   |   |       |--LEADING_ASTERISK ->      * [17:0]\n    |   |   |   |       |--TEXT ->  e.g.&nbsp; [17:6]\n    |   |   |   |       |--JAVADOC_INLINE_TAG -> JAVADOC_INLINE_TAG [17:17]\n    |   |   |   |       |   |--JAVADOC_INLINE_TAG_START -> { [17:17]\n    |   |   |   |       |   |--CODE_LITERAL -> @code [17:18]\n    |   |   |   |       |   |--WS ->   [17:23]\n    |   |   |   |       |   |--TEXT -> Comparable&lt;? extends Serializable, CharSequence&gt; [17:24]\n    |   |   |   |       |   `--JAVADOC_INLINE_TAG_END -> } [17:79]\n    |   |   |   |       |--TEXT -> . [17:80]\n    |   |   |   |       |--NEWLINE -> \\n [17:81]\n    |   |   |   |       |--TEXT ->       [18:0]\n    |   |   |   |       `--EOF -> <EOF> [18:5]\nWe need to do much more then a simple regexp match.\nI'll give it a try, but i'm sceptical about it.. Unfortunately, nothing better can be done. Must be a way to understand where the first sentence ends. For now it is \"any period symbol, followed by a space or EOF\".\nReplacing the nbsp to a space will result the sentence ending in \"e.g.\" which is not correct.. >Shouldn't the brackets be ok since they inside the {@code tag?\nThey are ok. But please pay attention to the whole file uses &lt;/&gt; notation\nThe {@code &lt;&lt;=} (left shift assignment) operator.\nNo reason to have an exception here. Note also, that there is a typo:\nComparable&amp;lt;<\nboth \"&lt;\" and \"<\" are present. This line should be fixed anyway.. Because TokenTypesDoclet depends on TokenTypes.\nAny reference to the TokenTypes class leads to the violation \"TokenTypes class has too many dependencies (301> 300)\".\nRoman suggest to suppress it: https://github.com/checkstyle/checkstyle/pull/5312#issuecomment-349306661. Really? The code you are complain about was taken exactly from this class.\nIt does not use Javdoc parser.. Done. Now the code is more reliable. And slow.. This will result in a horizontal dependency. It's worse than just copying a couple of lines.\nThe right solution, IMHO, is to extract this code into an utility class. May be to the TreeWalker itself. I'll take a close look to it.\n. Thank you! I was looking for something like that, but did not succeeded.\nIf there is a dedicated issue for import tests, then this PR should be split.. Done.. Done.. Done.. Done.. This is an evil change. The method name is \"parseJavadocAsDetailNode\" while return value is \"ParseStatus\".\nI renamed this method to \"parseJavadoc\" and added a new method named \"parseJavadocAsDetailNode\" that really returns the DetailNode.\nI'm guessing possible problems for plugin developers here.. This should be the CheckstyleException. I decided to leave it as it is, maybe there's a reason.. Unfortunately, it turns out that all encoded symbols inside {@code} remain encoded.\nI started a new issue: #5423 . A typo. Should be 'serial'.. These comments are out of date. The code they are referring to was deleted some time ago.. In all the others, the \"initialization\" is used. This sentence is missing in the comment, but present in the xdocs.. @rnveach, in this case JavaParser.parseFile(File, options) will throw too many exceptions.\nNow:\n/**\n     * Parses Java source file.\n     * @param file the file to parse\n     * @param options {@link Options} to control inclusion of comment nodes\n     * @return DetailAST tree\n     * @throws IOException if the file could not be read\n     * @throws CheckstyleException if the file is not a valid Java source file\n     */\n    public static DetailAST parseFile(File file, Options options)\n            throws IOException, CheckstyleException {\n        final FileText text = new FileText(file.getAbsoluteFile(),\n            System.getProperty(\"file.encoding\", StandardCharsets.UTF_8.name()));\n        return parse(new FileContents(text), options);\n    }\nYou want\n/**\n     * Parses Java source file.\n     * @param file the file to parse\n     * @param options {@link Options} to control inclusion of comment nodes\n     * @return DetailAST tree\n     * @throws IOException if the file could not be read\n     * @throws TokenStreamException if lexing failed\n     * @throws RecognitionException if parsing failed\n     */\n    public static DetailAST parseFile(File file, Options options)\n            throws IOException, TokenStreamException, RecognitionException {\n        final FileText text = new FileText(file.getAbsoluteFile(),\n            System.getProperty(\"file.encoding\", StandardCharsets.UTF_8.name()));\n        return parse(new FileContents(text), options);\n    }\nOnly two exceptions per method are allowed for the CS code.\nAlso, this will expose some ANTLR internals out of the JavaParser. Many classes will need to import classes from the ANTLR package. This will create some extra dependencies for no good reason.. This why:\nlexer.setCommentListener(contents);\nThe FileContents is FileText + CommentListener.. >What if we turn antlr exceptions into checkstyle exceptions in parser, and change TreeWalker catch to catch checkstyle exception.\nIt's possible. I will do it this way. But I still do not understand the reason.. done.. done.\n. done.. done.. done.. done.. done.. java.text.ParseException has only one ctor:\npublic ParseException(String message, int offset)\nbut we need something like\npublic ParseException(String message, Throwable cause). If you agree to make DetailNodeTreeStringPrinter::getParseErrorMessage public, this PR can be dropped.. done.. done.. Originally it was. But Richard proposed to get rid of regular expressions. See\nhttps://github.com/checkstyle/checkstyle/pull/5399#discussion_r158961170. done.. done. done. Perhaps this code should be moved to somewhere else. JavadocUtils or something like that.\nThen both the SummaryJavadocCheck and this generator can use it.. By the way, should be there a file generated from the JavadocTokenTypes class also?. done. done. done. done. done. done. done. Note that the loop cannot be removed, since CLASS_DEF is not a child of the PACKAGE_DEF. They are siblings. There is no DetailAST.findFirstSibling(int type) so the loop is needed. But now it is more readable.. new FileOutputStream(outputFile) may throw a FileNotFoundException and PrintWriter::println may throw an IOException.\nSo there must be two nested try blocks or FileOutputStream may be not safely closed.\nBoth cases are prohibited by default, so one of this inspections must be muted.\nActually, the right solution is to use try-with-resource block, but this is not possible for now due to Cobertura limitations.\nIn the future, when the Cobertura will be replaced, we should review every finally block.. done. Actually, JavaParser.parseFile throws both IOException and CheckstyleException.\nIn case of a missing file a FileNotFoundException will be thrown.. done. done. We need to keep the cobratura for a while. But yes, soon it will be replaced. \nNow we need to do some regression tests.. done. done. Note that I've turned to the version with two nested try / finally blocks.\nIt looks ugly, but it is more safe.. done. Done, except for JavadocParser which has too many inner classes.. I'm looking a bit forward. Reverted for now.. same. same. I wish I could write objBlock.stream().filter(Class::isPublicStaticFinalIntField).map(Class::getFirstSentence).filter(Objects::nonNull).forEach(line -> writer.println(ln));\ndone, by the way.. It seems I found how to set it up in the proper way. Instead of disabling \"everything except\", which is a subject to change, all the validation plugins should be disabled. Then the required properties should be reverted back to false. With this approach, it will be much easier to add additional checks later.. I don't like this. If new FileOutputStream(outputFile) throws an exception, there is nothing to close in fos.\nIf not, the writer will be created and after CommonUtils.close(writer) there will be nothing to close either.\nHere's another version. Still not perfect, though.. The quote  explains why it's impossible to get 100% coverage for the ANTRL generated classes. I vote to keep it here. The same message in the Cobertura section should be removed alongside with Cobertura.. In the google groups there is a topic about this:\nhttps://groups.google.com/d/msg/checkstyle-devel/KnPfFZZiumA/mp2pNzFNBwAJ\nIn short, the Jacoco heuristics does not detect methods that never return, while the Cobertura heuristics does it.\nAll of these classes:\nClassResolver,JavadocUtils, PackageNamesLoader,Main, JavadocDetailNodeParser.JavadocParserErrorStrategy can be fixed to get 100% coverage by some hacks and workarounds. But this is beyond the scope of this PR.. You're right. I've read the quote to the end - it does not say \"impossible\", it says \"we do not need it\". Well, it somehow explains why ANTLR classes do not have 100% coverage.. done.. done.. Well, this one can be done without mocking. Put checkstyle_packages.xml in test resources will be sufficient. But this will affect all the test, so the reason why we need mocking is isolation.. done. done. So Powermock does validate calls to static methods.\nA terrible syntax, but there is no alternative.. @rnveach yes it is confusing. The test verifies a call to System.exit in production code.\nTo prove this, just comment out the line https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/Main.java#L241\nThe test will fail. Today i'll send a patch related to the Mockito2 API. You'll se a lot of such code.. done. Thanks for the suggestion.. done. The code reverted to the initial version.. Done. Actually, there is no reason to check the call to System.exit. In other tests, it is already tested with ExpectedSystemExit.. As I understood it, the config file should be embedded as a resource. It must be in the source tree. Anyway, the Powermock vendors are going to fix it:\nhttps://github.com/powermock/powermock/issues/864#issuecomment-343654812\nAs soon as the Powermock issue is fixed, this commit should be reverted.. Actually, this file can be moved to the folder resources-noncompilable.. No. The folder resourrces-noncompilable won't fit. In this case the file will not be included in the checkstyle-test.jar. This may lead to a problem.. Currently, the test AllTestTest can not validate all folders. The method verifyInputFile starts with\n```\n    private static void verifyInputFile(Map> allTests, File file) {\n        if (file.isFile()) {\n            final String path;\n        try {\n            path = getSimplePath(file.getCanonicalPath());\n        }\n        catch (IOException ex) {\n            throw new IllegalStateException(ex);\n        }\n\nand `getSimplePath` is:\n    private static String getSimplePath(String path) {\n        return path.substring(path.lastIndexOf(\"com\" + File.separator + \"puppycrawl\"));\n    }\n```\nIt will throw IndexOutOfRangeException for every path not starting with \"com/puppycrawl\".\n. Please see the whole file AbstractXmlTestSupport.java:\nhttps://github.com/Softus/checkstyle/blob/305722f2e3f42c3a96bb3b182d5255bae7dea53b/src/test/java/com/puppycrawl/tools/checkstyle/AbstractXmlTestSupport.java\nI just follow the style used by all the other checks in this file. If it is wrong, then the entire file should be rewritten.. Because it tests both addAttribute and getAttribute. The name testAddAttributeAndGetAttribute looks worse for me then simple testAttribute.. same. It tests both addMessage and getMessages.. Moreover, since the default value of haltOnException is true both treeWalkerConfig and checkerConfig are unnecessary.. Yes, it is possible. Thank you.. done. done. Sorry, my bad. The rest is in the form \"should be: \" + path. The colon is removed.. ok, 5 sec. done. Me neither. I think the point is that JaCoCo need to make the instumentation, do the tests, then create a report. Here that almost works:\nmvn -e clean test jacoco:instrument@default-instrument jacoco:check@default-check jacoco:report@default-report\nbut this is even worse.. To make sure that all the tests have passed. -Passembly was a workaround at a time when Powermock was incompatible with JDK9. Now it is even possible to build the site phase.\nI'm going to carefully check the compatibility with JDK9, after completing this task.. I dont know. I took the existing commit and developed it a little.\nUsing the default value seems to solve a lot of problems.. done. done. Reverted to original CMD=\"mvn -e package -Passembly\". I've found the minimalistic version:\nmvn clean test jacoco:restore-instrumented-classes jacoco:report@default-report. reverted back to the site phase since verify is no more required to get the JaCoCo report.. Still not ideal. Perhaps some bash script may help.. This may be known issue, I'll take a look.. No, there is no issues like that in the Jacoco tracker.\nThe problem is easy to reproduce, so I created a new task:\nhttps://github.com/jacoco/jacoco/issues/660. I doubt it. Take into account the issue #4845 . Maybe we will add our own packages for import tests? I mean\nsrc\n  |-test\n      |-resources\n          |- com.puppycrowl.tools\n          |- com.special.package.for.import.tests\n          |- org.special.package.for.import.tests\nThis will satisfy #4845. But in the test tree there will be mess.. At this time, it is better to close this issue. This could be a stopper for JDK10, but now this is causing more problems than solves.. This issue is not related to lambda. As Richard said, the problem is that the call to base constructor is simply ignored by the indentation check.\nBut you are right, the harder the tests, the more they will cover.. node. @romani are you waiting from me to improve anything else for this PR?. A comment is enough to pass the check EmptyCatchBlock.\nPMD is more strict in this case.. They moved all the checks. I had to do this file from scratch.. You mean \"removal of UnusedPrivateMethod suppressions\", did you?\nThey were the false-positives and were fixed in PMD6.\nLet me explain how I did this:\n- First I deleted all the rules.\n- Then I added every category entirely, one category by turn. For example:\n<rule ref=\"category/java/bestpractices.xml\"/>\nThis led to some violations. For each violation, I checked the old configuration for appropriate suppression. If the corresponding one was, I copied it. Otherwise, I added a new suppression (there were two of them, see #5638).\nIf a rule does not produce any violations, I did nothing for it. Thats why some suppressions are gone.. Done:\n<!-- Till https://github.com/checkstyle/checkstyle/issues/5638 -->\n     <exclude name=\"AvoidFileStream\"/>\nFor OptimizableToArrayCall: I'm going to leave it suppressed.\nI run the benchmark from the article and on my PC with 1.8.0_151 the fullsized version is faster when zero sized.. Believe me, I did my best. The new rules are so messed that it is not possible to keep the order.\nThey did not just replace ruleset with category, they regrouped all the rules.. There was 5 of them.\nThree in the bestpractices category, all of them were fixed with the issue #5633 \nOne about array::clone() for com.puppycrawl.tools.checkstyle..api.Comment class;\nOne about the loop in com.puppycrawl.tools.checkstyle.JavadocDetailNodeParser\nOne about using Test(expected = ...)\nTwo in the performace category:\nOne about FileInput/OutputStream classes: #5638 \nOne about toArray(new String[0]) \nThere may be some other new rules. But they are not known since they did not report any violation.. I just remembered. There was one more: DataClass which complains on almost every class.\nIt suppressed with comment\n<!-- It produces too much violations, suppressed till we figure out how useful that metrics -->\n(copied from LawOfDemeter rule suppression)\nAlso, some rules were renamed. Rule NcssMethodCount now just NcssCount\nThe full list is here.\nSome new rules are duplicate the CS checks, like the EmptyCatchBlock rule.\nThey should be suppressed too. Just for performance reason. I'll update the PR later.\n. IntelliJ is correct:\nhttps://www.jetbrains.com/idea/. From the original license\n\nWe reserve no legal rights to the ANTLR--it is fully in the public domain. An individual or company may do whatever they wish with source code distributed with ANTLR or the code generated by ANTLR, including the incorporation of ANTLR, or its output, into commerical software. . The folder should be renamed too.. The second asserts becomes meaningless. I think it is possible to replace \"\u0441omon\" with \"other\".. The name of the package can be anything?\nCan it be\ncom.kazgroup.courtlink.bot.api and com.kazgroup.courtlink.boot.api\nAnd the regexp should be \nprivate final ImportControl icCommonRegexpParen = new ImportControl(icRootRegexpParent,\n\"bo+t\", true);\nIn this case both the spelling and the test will be OK.. Please replace\nassertTrue(\"Invalid exception message: \" + ex.getMessage(),\n                    ex.getMessage().endsWith(\":8:41\"));\nwith\nassertTrue(\"Invalid exception message: \" + ex.getMessage(),\n                    ex.getMessage().endsWith(\":8:43\"));\nin the file src/test/java/com/puppycrawl/tools/checkstyle/ConfigurationLoaderTest.java\n:8:41 is the position in the file where the error was encountered.. The rule GuardLogStatement is included in both logging-jakarta-commons and logging-java.\nDue to bug in the PMD it can not be excluded. So, the references to logging-jakarta-commons and logging-java are replaced with their content.. The expression changed to \"any method with a call to method verify(...) or exit.checkAssertionAfterwards(...) or .verify(...).\n\nPackageObjectFactoryTest and XdocsPagesTest do not use any of them, so they are explicit here.. This property was removed from the rule.. Removing the suppression NsccCount lead to  645 PMD violations like this:\n[INFO] PMD Failure: com.puppycrawl.tools.checkstyle.utils.CommonUtilsTest:147 Rule:NcssCount Priority:3 The method 'testFileExtensions()' has a NCSS line count of 12..\n[INFO] PMD Failure: com.puppycrawl.tools.checkstyle.utils.FilterUtilsTest:69 Rule:NcssCount Priority:3 The method 'testExceptionOnClosing()' has a NCSS line count of 12..\n[INFO] PMD Failure: com.puppycrawl.tools.checkstyle.utils.JavadocUtilsTest:108 Rule:NcssCount Priority:3 The method 'testTagPositions()' has a NCSS line count of 13..\n[INFO] PMD Failure: com.puppycrawl.tools.checkstyle.utils.JavadocUtilsTest:167 Rule:NcssCount Priority:3 The method 'testEmptyBlockCommentAst()' has a NCSS line count of 13..\nThe rule has no property to configure the minimal amount of lines of the code per method.\nIt is useless for now.. The problem is still the same: asserts in lambdas are invisible to PMD.. It complains on every non-public non-private method/ctor:\nhttps://gist.github.com/pbludov/01574efeda97b8532cb09db3cf393e86. >please suppress certain cases(not whole rule) for now till new issue.\n@romani Are you seriously? There is 645 \"certain cases\". You want to suppress every class?\nThe output of this rule is here\nhttps://gist.github.com/pbludov/0a62abdce8853aa8e41b85f1687acb2c\nThere is 154 classes that violates this rule in the folder src/main and 63 classes in the folder src/test.. Done https://github.com/checkstyle/checkstyle/issues/5665. Done. Setting methodReportLevel to 32 reduces the list to a HUGE but, at least, maintainable amount.\n. done. Done. Now it looks very funny. The rule named JUnitTestsShouldIncludeAssert is suppressed for any method with a call to assert.. Done. This is a transitional PR. The following PRs remove all obsolete rulesets in favor of categories, so this problem will be gone.. Done. Now all the offenders are listed explicitly.. > What happens if they add a new rule to those packages? We will not be aware of them.\nThese rulesets are deprecated. New rules will be added to a category.\nThere is a new rule available only from the category: AvoidFileStream. See #5638 \nThe CS code violates this rule, but the config has no suppression for it.\nSo, if the PMD team will add new rules we will be not aware of them anyway.. @romani Right here ^^^^\n\nIs it new rule ? I did not find it in config before your changes.\n. Both +2 and +4 are acceptable. The config is\n * basicOffset = 2\n * lineWrappingIndentation = 4\n. Done.. done.. The build will fail with 62 PMD violations in this case. If a rule is included in several sets, it should be excluded in each of them.. This will break the build.. The PMD no more complains about an empty array, so the suppression was removed.. Not sure about this. The code is\npublic void visitJavadocToken(DetailNode ast) {\n            assertEquals(ast.toString(), \"JAVADOC\", ast.getText());\n            final DetailNode text = JavadocUtils.findFirstToken(ast, JavadocTokenTypes.TEXT);\n            Assert.assertNotNull(\"Empty javadoc text at \" + ast, text);\n            assertEquals(ast.toString(), \"Javadoc\", text.getText());\n            javadocsNumber++;\n        }\nast.toString() is not a string, but this code works as it should. This seems to be a PMD bug.. @rnveach the code was changed since PMD 4.3. Now it is\nhttps://github.com/pmd/pmd/blob/master/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/bestpractices/JUnitAssertionsShouldIncludeMessageRule.java#L69\n```\n        checks.add(new AssertionCall(\"assertEquals\", 3) {\n            @Override\n            protected boolean isException(ASTArguments node) {\n                List arguments = node.findDescendantsOfType(ASTExpression.class);\n                boolean isExceptionJunit4 = isStringTypeOrNull(arguments.get(0));\n                boolean isExceptionJunit5 = isStringTypeOrNull(arguments.get(2));\n\n            return isExceptionJunit4 || isExceptionJunit5;\n        }\n    });\n}\n\nprivate boolean isStringTypeOrNull(ASTExpression node) {\n        return node.getType() == String.class || node.getType() == null;\n}\n```\nThe rule wants a string constant now.. This four methods should be refactored. If you now a reason why they shouldn't, please comment.. Here is the version from 4 nov 2017:\nhttps://github.com/pmd/pmd/blob/238494b09253575f341ebaef34aebdca6f1020fc/pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/bestpractices/JUnitAssertionsShouldIncludeMessageRule.java\nchecks.add(new AssertionCall(\"assertEquals\", 3) {\n            @Override\n            protected boolean isException(ASTArguments node) {\n                ASTExpression firstArgument = node.getFirstDescendantOfType(ASTExpression.class);\n                return firstArgument.getType() == null || firstArgument.getType() == String.class;\n            }\n});. > CheckUtils.parseDouble\nThis one is broken:\nassertEquals(\"Invalid parse result\", -2.0,\n                CheckUtils.parseDouble(\"-2\", TokenTypes.NUM_LONG), 0);\nfails with\njava.lang.AssertionError: Invalid parse result \nExpected :-2.0\nActual   :-8.0. A simple return of zero for unexpected input may lead to a hard to find error.\nThe NaN is a bit better for this. An exception is even better.. done. Done. CheckUtils.parseDouble is refactored as #5709 \nCustomImportOrderCheck.finishImportList, CustomImportOrderCheck.getImportGroup and\nChecker.processFiles are good enough. No reason to refactor these methods.. Done. . done. done. We do not need a special hack for windows if a folder name used instead of a file.\nThe exception will be thrown as expected.. The new code is\ninStream = Files.newInputStream(file.toPath());\nIf the file name is empty, the exception will be \"Not a file\". The old code throws \"File not found\", which is explicitly handled by logIoException.\nWith a valid (but not existent) file name the exception is \"File not found\".\n. done. Rebased to 109cdd682dd31b48c3770ba2ebe0eebfafcbf00a. done. Build log https://gist.github.com/pbludov/1a3683deb52a1ba97cb268e026f224a8\nIdea inspection TryFinallyCanBeTryWithResources is more smart.. Yes, this one can be.. Done. The rule produces the warning\n[WARNING] Removed misconfigured rule: LoosePackageCoupling  cause: No packages or classes specified\nSo it must be either configured or excluded.. done. all done. Now only two occurrences of default are left:\nMainFrameModel.ParseMode#ParseMode and JavadocDetailNodeParser.ParseErrorMessage#ParseErrorMessage. Yes. Only top level classes are public now. Should this two be public also?. done. Now it does  not compile. The PMD rule is broken on enum constructors. done. What about\nhttp://checkstyle.org/apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html\n?. To solve warning incorrect classpath: src/checkstyle/target/test-classes on clean environment. I do not think this is a bug. The algorithms that use IDEA and Eclipse are different. And they can behave differently.. all done. Yes, it is related to the ignoreFromMethodCall option.\nBy turning it off the IDEA reports the line\nout = Files.newOutputStream(Paths.get(outputLocation));\nas violation in the same way as Eclipse does. One more: the suppression\n@SuppressWarnings(\"resource\")\nWorks for IDEA in the same way as for Eclipse. So it is possible to set ignoreFromMethodCall to false.. done and thank you.. done. done. done. Your code has been squashed to the PR.. done. Without this assertion, the warning \"The allocated object is never used\" appears. See\nhttps://travis-ci.org/checkstyle/checkstyle/jobs/378234050#L761\nWe need to use the logger somehow to make the eclipse compiler happy.. Pitest. It says \"the result may be replaced with null here\nprivate static AutomaticBean.OutputStreamOptions getOutputStreamOptions(String outputLocation) {\n        final AutomaticBean.OutputStreamOptions result;\n        if (outputLocation == null) {\n            result = AutomaticBean.OutputStreamOptions.NONE;  // THIS line was red\n        }\n        else {\n            result = AutomaticBean.OutputStreamOptions.CLOSE;\n        }\n        return result;\n    }\nThe expression\ncloseStream = outputStreamOptions == OutputStreamOptions.CLOSE;\nwork just fine when the parameter outputStreamOptions is null. \nIt turns out that we can use an enumeration with just one value! The second value will be null.\nThis is logical, but wrong. I explicitly forbid null for these parameters.. done. If the CI fails, i'll revert this.. done. This won't work:\n@Test\n    public void testNullOutputStreamOptions() {\n        try {\n            new XMLLogger(outStream, null);\n            fail(\"Exception was expected\");\n        }\n        catch (IllegalArgumentException exception) {\n            assertEquals(\"Invalid error message\", \"Parameter outputStreamOptions can not be null\",\n                    exception.getMessage());\n        }\n    }\nIf you have any idea how to do it right, let us know.. I believe that there was a suppression. Later, the code was refactored. The comment is removed now.. It fails: https://teamcity.jetbrains.com/viewLog.html?buildId=1439514&tab=Inspection&buildTypeId=Checkstyle_IdeaInspectionsPullRequest\nThe line wrapping reverted.. >What if we will put in assert message \"Null instance; assert required to calm down eclipse's 'The allocated object is never used' violation\" or just make single line comment above assert ?\ndone. done. done. done. done: https://jira.xwiki.org/browse/XCOMMONS-1430. done. >it is better to not invent new terminology\nI didn't invent it, i took it from the previous comment\npolicy on the relative order between regular imports and static imports\nLet's use the term type import. Without the hyphen.. done. done. done. Done: https://pbludov.github.io/issue-5724/index.html. done.. The test input is\nimport static java.lang.Math.*;\nimport static org.antlr.v4.runtime.CommonToken.*;\nimport static org.antlr.v4.runtime.CommonToken.*;  //Repetitive static import\nThe code in the master branch demands a gap between the groups. We do not have the property separatedStaticGroups yet, so this violation is commented out till #5279. done. >So users have to use groupsSeparated={SAME AS GROUPS} and separatedStatic=true to have no violations.\nIndeed.\n\nIf yes - please update IT Inputs to have no violations.\n\ndone. You are right. The property separatedStaticGroups=true is irrelevant here. I need to investigate here.. >separatedStaticGroups=true should have no effect in such mode.\ndone.. done.. if (staticImportsIndependent)\nIt more readable then\nif (option == ImportOrderOption.TOP || option == ImportOrderOption.BOTTOM)\nThat is the only reason.. done. Moved to AbstractPathTestSupport. done. done. done. done. done. done. done. done. done. done. done. done. >what about if {} is first, followed by x++? it should be treated as a standalone block.\nplease add it to all options.\nSounds reasonable to me. What about this case:\ncase 5:  {\n                }\n                break;\nShould it be a standalone block or a case block?\nExample: https://pbludov.github.io/issue-5207/nl/apache-ant/xref/mnt/contribution/checkstyle-tester/repositories/apache-ant/src/main/org/apache/tools/bzip2/CBZip2OutputStream.java.html#L691. Done. After some research, I decided that it makes sense to force users rewrite such blocks as\ncase 5:  {\n                    break;\n                }\nSo, there should be only one child in case or default, and the child must be a SLIST.. done.. Done. Reverted to 01763be62661482889a63ad4f3aeb7d29e58e352 with some additional test cases.. It is already here https://github.com/checkstyle/checkstyle/pull/6025/files/559ebbb959a8b57e33270f0da8555917fa78b0ce#diff-875b646bca178009b84dda15e5efb282R42. done. It is here: https://github.com/checkstyle/checkstyle/pull/6025/files#diff-621e3fe826f56a7dc6de706a178a9365R37. done\n. Indeed. From the docs:\n\nChecks that particular classes are never used as types in variable declarations, one-dimensional and multi-dimensional arrays, return values or parameters.\n\nI think it is a subject to discuss. In a separate issue, maybe.. Everything is OK here. The test is set up as follows:\n* This test-input is intended to be checked using following configuration:\n *\n * illegalClassNames = {Boolean, Foo, Serializable}\n * memberModifiers = {LITERAL_PUBLIC, FINAL}\nSo,\nClass<? extends Boolean>[] nonPublic(); // OK: nonPublic is non public nor final\npublic Class<? extends Boolean>[] value() default Boolean.class; // warn: value() is public, so it should be checked\n . @romani what do you think, should this check also forbid declarations like this:\n// illegalClassNames=\"Boolean, Foo, Serializable\"\nclass Foo<T extends Boolean & Serializable> {}. The name should match SimpleAccessorNameNotationCheck policy.. done. Changed to detailAst. If the CI will be red, i'll change it back.. done. Declaring a class with illegal name is meaningless. It will be impossible to use it.\nBut you are right, the issue should be renamed.. @rnveach The issue renamed. The issue renamed back to original, type name validation was removed.\n. done. done. Done with Collections.singleton. done. done.. All changes to PackageObjectFactory were reverted.. done. done. Actually, this method can be replaced with\nFullIdent.createFullIdentBelow(importAst).getText()\n. This is because xdocs for CustomImportOrderCheck has two custom subsections.\nSolved by merging them to the Description section.. > Please relook at the other properties.\ndone.. done. done. done. done. At first I added the ol tag. Then I noticed that in each case there is \"ul\".equals(name) || \"ol\".equals(name) and I extracted them to a separate flag. \nThe tag li affects only newLineOpenBefore, this behaviour is unchanged.. done. done. done. done.. Interesting that this check was long before R10.\nI suppose we could add it. But we will need to make two different configurations. One for the main code and another for the tests. We usually don't have javadoc comments in tests.. done. done. Actually, there are only two checks:\norg.eclipse.jdt.core.compiler.problem.missingJavadocComments and org.eclipse.jdt.core.compiler.problem.missingJavadocTags\nThe rest are the parameters to these checks. It is better to keep them in one place.. done. Missing javadoc checks have been moved back. Now with proper description.. ^ is removed because there is no need for a hierarchy. & is just a separator for a list of types.\nConsider the following code:\nclass Foo {\n    Object o = (Foo & Cloneable & Cloneable & Cloneable) null;\n}\nFor now the AST is\n--TYPECAST -> ( [2:15]\n   |--BAND -> & [2:44]\n   |   |--BAND -> & [2:32]\n   |   |   |--BAND -> & [2:20]\n   |   |   |   |--TYPE -> TYPE [2:16]\n   |   |   |   |   `--IDENT -> Foo [2:16]\n   |   |   |   `--TYPE -> TYPE [2:22]\n   |   |   |       `--IDENT -> Cloneable [2:22]\n   |   |   `--TYPE -> TYPE [2:34]\n   |   |       `--IDENT -> Cloneable [2:34]\n   |   `--TYPE -> TYPE [2:46]\n   |       `--IDENT -> Cloneable [2:46]\n   |--RPAREN -> ) [2:55]\n   `--LITERAL_NULL -> null [2:57]\nNote for the 'ladder' of BANDs. It is hard to iterate and it just make no sense. \nBy the way, for the extends there is no hierarchy either. For the code:\nclass Foo<T extends Foo & Cloneable & Cloneable & Cloneable> {\n}\nthe AST is\n--TYPE_UPPER_BOUNDS -> extends [1:12]\n   |--IDENT -> Foo [1:20]\n   |--TYPE_EXTENSION_AND -> & [1:24]\n   |--IDENT -> Cloneable [1:26]\n   |--TYPE_EXTENSION_AND -> & [1:36]\n   |--IDENT -> Cloneable [1:38]\n   |--TYPE_EXTENSION_AND -> & [1:48]\n   `--IDENT -> Cloneable [1:50]. done. done. done. done. I agree with @rnveach, there is missing TYPE node under TYPE_UPPER_BOUNDS.\nAnd yes, this should be a separate issue.\n\nI would expect it to be: TYPE_EXTENSION_AND be parent of c3 and i1.\nI think this is how all two argument operation are structured.\n\n@romani What about extends c3 & i1 & i2 & i3? In this case it will be\n--TYPECAST -> (\n   |--TYPE_EXTENSION_AND -> &\n   |   |--TYPE_EXTENSION_AND -> &\n   |   |   |--TYPE_EXTENSION_AND-> &\n   |   |   |   |--TYPE\n   |   |   |   |   `--IDENT -> c3\n   |   |   |   `--TYPE\n   |   |   |       `--IDENT -> i1\n   |   |   `--TYPE\n   |   |       `--IDENT -> i2\n   |   `--TYPE\n   |       `--IDENT -> i3\n   |--RPAREN -> )\nWhy i2 should be sibling to pair of (c3, i1)?\nFor the BAND this makes sense. For TYPECAST it doesn't.. done. http://google.github.io/styleguide/javaguide.html#s4.8.5-annotations\nYou are right. Annotations style for package and enum constants is undefined.\nThe block reverted.. ENUM_CONSTANT_DEF definitely should be.\nFor PACKAGE_DEF I think it is better to add.\n . done. done.\nActually, PACKAGE_DEF is irrelevant here. All package annotations should be in the file package-info.java.. done. done. The google style is very ambiguous:\n\nAnnotations applying to a class, method or constructor appear immediately after the documentation block, and each annotation is listed on a line of its own (that is, one annotation per line). \nException: A single parameterless annotation may instead appear together with the first line of the signature\nAnnotations applying to a field also appear immediately after the documentation block, but in this case, multiple annotations (possibly parametrized) may be listed on the same line\nThere are no specific rules for formatting annotations on parameters, local variables, or types. \n\nThat's all. Even the style for the interface definition is unclear.. done. my bad, now really done.. No. with allowSamelineMultipleAnnotations = true both allowSamelineSingleParameterlessAnnotation and allowSamelineParameterizedAnnotation has no effect. Actually, this means that any combination of annotations is allowed.\nHowever, it is possible to catch a violation by using annotations on different lines.\nThis one: https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/AnnotationLocationCheck.java#L292\nBut this is a different case and should be covered by another set of tests.. BaseEncoding.base16().upperCase().encode(byteArray);\ncan be replaced with\nnew BigInteger(1, byteArray).toString(16).toUpperCase();. yes, it should be toUpperCase(Locale.ROOT);. done.. $ grep -rl \"configure the Check\"\nsrc/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/CommentsIndentationCheck.java\nsrc/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportOrderCheck.java\nsrc/main/java/com/puppycrawl/tools/checkstyle/checks/design/VisibilityModifierCheck.java\nsrc/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/NeedBracesCheck.java\nsrc/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/EmptyCatchBlockCheck.java\nOnly in five files the Check is in uppercase. I'm going to fix all of them.. done. done. done. {@code '{'} won't work here since it requires balanced curly braces. Same as #5423 . Done. These warnings should be suppressed. And the suppression itself should be ignored.. > Can we use &lbrace; or &#123; instead inside the {@code }?\nNo, the javadoc tool will translate them to &amp;lbrace and &amp;#123;. done.. Yes. The code should be compilable.. It's not important, but it makes the code a bit better.. Yes we should. Done.. XdocsJavaDocsTest fails with\nExpected:\nall the {@code case} s\nActual: \nall the {@code case}s\nDo you know where the extra space might come from?. ",
    "vaano94": "corrected. done. done. done. In all further translations it is not repeated.. done. done. done. done. done. done. done. Could you please explain me what's bad in the first sentence? . fixed. returned cases back. I changed class doc a little bit. Now it looks similar to the RightCurlyCheck. done. ",
    "RoMaNiAsHkA": "Got it, I can fix all your findings in this issue, is it OK? . Sorry, it is intellij idea formatting, I will remove it. @rnveach, ok, I will remove blank line in javadoc and rename method in this PR, then I can create new issue for bug with block comment, based on this corrections.\n  . this method doesn't work with javadoc on annotated method... i made some tests on this. ",
    "aneels3": "\nDone formatting and uploaded the required screenshot, please review the changes so that i will commit accordingly later on.. ",
    "varunu28": "@romani Does the source block needs to be shifted to the extreme left?\nCurrent Code (From line 1054) :\n<p>\n          To configure the check to find case-insensitive occurrences of\n          &quot;debug&quot;:\n        </p>\n        <source>\n          &lt;module name=&quot;RegexpSinglelineJava&quot;&gt;\n              &lt;property name=&quot;format&quot; value=&quot;debug&quot;/&gt;\n              &lt;property name=&quot;ignoreCase&quot; value=&quot;true&quot;/&gt;\n          &lt;/module&gt;\n        </source>\nAfter change (According to my understanding)\n<p>\n          To configure the check to find case-insensitive occurrences of\n          &quot;debug&quot;:\n        </p>\n<source>\n  &lt;module name=&quot;RegexpSinglelineJava&quot;&gt;\n      &lt;property name=&quot;format&quot; value=&quot;debug&quot;/&gt;\n      &lt;property name=&quot;ignoreCase&quot; value=&quot;true&quot;/&gt;\n  &lt;/module&gt;\n</source>\nPlease let me know if I am on the right track for this change? Thanks . Done. @rnveach I will do the changes. done. done. I did it based on the existing version (line 913)\n<source>\n&lt;!DOCTYPE checkstyle-packages PUBLIC\n&quot;-//Puppy Crawl//DTD Package Names 1.1//EN&quot;\n&quot;http://checkstyle.sourceforge.net/dtds/packages_1_1.dtd&quot;&gt;\n      </source>\nDoes it needs to be changed to +2 indentation after the DOCTYPE? If yes then I would do the changes at both the places.. done. @romani I changed the '{' after the switch statement by considering the original source code on line 66. So does that also needs to be changed considering this?\nswitch (a)\n{\n    case 0:\n        // Never OK, break outside block\nAlso does the indentation for Java source code should remain to 2 similar to XML?. Ok, thanks for the clarification. Just to reiterate my points of action\n - I would revert back the \"{\" at the places where I have changed it to a new line\n - I would change the indent space to 2 under source blocks. @romani \nDoes the indentation needs to be changed for Java code under source blocks such as given below on line 40\npublic void guessTheOutput()\n{\n    int whichIsWhich = 0;\n    {\n        int whichIsWhich = 2;\n    }\n    System.out.println(\"value = \" + whichIsWhich);\n}. @romani  Done. @romani Done. @rnveach Sorry, I didn't understand your comment clearly. The indentation after try block is 2 (After my changes). What should I change in that?. @rnveach Done. @rnveach So should it come under just the ending of property?. Done. Done. @rnveach I think keeping the line numbers is helpful to a certain extent. It helps in describing the error or warnings regarding the indentation in the code.. @rnveach Shouldn't there be an ident after the case for String \"2\"?\ncase \"2\":\n  int k = 7;\n  // it is OK\ncase \"3\":\n  if (true) {}. @rnveach Done. @rnveach Done. @rnveach Done. Done the change. Done the change. @romani On it. Would do the changes suggested above. Can you please provide the link. I am not aware of it. Done. Done. @rnveach I am able to open the link without that final character. The link I am using is as below\nhttps://checkstyle.org/report_issue.html#How_to_report_a_bug. I am using Chrome on an Ubuntu and it is working. Done. Done. @rnveach I think its the same template on both the links. I can remove the template on Github link and just keep the link to the checkstyle website\n@romani Please confirm. Done. ",
    "SunriseCoder": "Done. ",
    "Bananeweizen": "done and rebased on master. ",
    "jjlharrison": "@rnveach : I think I was doing this in a previous revision, but when I do the build fails with the Checkstyle violation:\nSingleBreakOrContinue: Loops should not contain more than a single \"break\" or \"continue\" statement. I investigated that route, but it seemed to me that the AST didn't have understanding of whitespace, JavaDoc, comments, and empty lines. If it is possible to change the way the AST is built to do this, the I agree, that would be better. Would you be able to point me in the right direction?\nAlso, prior to my changes the empty lines were detected by checking the lines with CommonUtils.isBlank, not by analysing the AST. I assumed this was because it couldn't be done with the AST.. Turned out that I could just remove this conditional all together.. @rnveach: Ok, I can look into this. I wish I had known about that before I had sunk hours into making all the CIs pass.. ",
    "jsoref": "Apparently, changes to this file / its master involve recalculating subsequent lines. I'm trying to figure out what the test wants to do.. I take it that you're ok with this change in general?\nI'll try to do the adjustments tonight.... This might be a license, in which case it should probably be dropped.. I suppose this might be an \"API\" change depending on whether this is consumed outside your system. I'd hope it's acceptable. This is apparently a currently incorrect thing:\nhttps://github.com/SonarSource/sonar-java/blob/688324a3ca31fc1f68fbfc85a008b28dc2c5a415/java-checks/src/main/java/org/sonar/java/checks/ObjectFinalizeOverridenCallsSuperFinalizeCheck.java#L46\nI'll have to split it out (and send them a patch). This is apparently a currently incorrect thing:\nhttps://github.com/SonarSource/sonar-java/blob/572454b93016ec73a53fe0e07b2ffdc356d21ba9/java-checks/src/main/resources/org/sonar/l10n/java/rules/squid/S1113_java.json#L18. I'm really not certain about this. This is intentionally not changed to value. I can't tell if my choice works. I may have to pick something else.. Afaict, these are designed to test the parser, and the typo was unintentional. This is apparently a currently incorrect thing:\nhttps://github.com/sevntu-checkstyle/sevntu.checkstyle/blob/f74b8da56fbd63cbe5b0a2c5db229851c716c015/sevntu-checks/src/main/java/com/github/sevntu/checkstyle/checks/coding/CustomDeclarationOrderCheck.java#L206\nI'll have to split it out (and send them a patch). Oops, will undo that side/fix to consistently use IntelliJ IDEA (and not other capitalization variations, accepting intellij for filenames). I did try to check that (we actually use their software), but apparently my eyes glazed over.. Done, sorry, my tool for renames handles files but didn't consider directories. I'll fix that.... I'm giving up on this change. Figuring out how to write a value that's correctly spelled and makes the test happy / adjusting the test isn't worth it.. Fwiw, tests pass (this pr is green), so there apparently wasn't anything that had an opinion.... fwiw, although GitHub doesn't seem to recognize that this comment chain is obsolete, it is.. I can make that change if requested (it's hard to tell which items are directions and which are just conversations).\nFor the time being, I've dropped this (because it was the simplest path forward).. This is actually an upstream error. https://github.com/joewalnes/idea-community/blob/1fa2c45953ed08667da52b1b83d44c56eb83b043/plugins/groovy/src/org/jetbrains/plugins/groovy/codeInspection/threading/GroovyWhileLoopSpinsOnFieldInspection.java#L41. This is coming from somewhere else, although, I can't figure out where the upstream is. Anyone know?\nhttps://github.com/JetBrains/intellij-community/blob/4fd3db662e99eec9837c6178b77c6800d2dd6dbd/.idea/inspectionProfiles/idea_default_ci.xml#L3703. src/test/java/com/puppycrawl/tools/checkstyle/internal/AllChecksTest.java:        return \"com/puppycrawl/tools/checkstyle/internal/allchecks\";\nsrc/test/resources/com/puppycrawl/tools/checkstyle/internal/allchecks/package-info.java:package com.puppycrawl.tools.checkstyle.internal.allchecks;\nsrc/test/resources/com/puppycrawl/tools/checkstyle/internal/allchecks/InputAllChecksDefaultConfig.java:package com.puppycrawl.tools.checkstyle.internal.allchecks;. It might be best not to call these things \"words\", since they aren't precisely words so much as ... well, something. I'm open to suggestions.. I'm not attached to these filters. I could probably teach w to optionally support them.\nIn principle, something produces a lists of files for w to process, and some exclusions are applied.\nSo, two filters, exclude.pl to skip files that shouldn't be checked, and this stuff to drop large families of words that I think you don't care about. This could be split into a script. For now, it's inline, just to try.\nI tested it here, and it seems to work:\n1. Travis generates the expected output: https://api.travis-ci.org/v3/job/366693457/log.txt\n2. Applying a lazy change to avoid the reset:\n@@ -16,1 +16,1 @@ else\n-  (cd $contrib; git fetch; git reset --hard origin/master)\n+  (cd $contrib; git fetch; echo git reset --hard origin/master)\nAnd applying the patch from the output, and then running it again results in no complaints.\nI'm not sure what's going wrong.. checkstyle/contribution#298 is the fix to the identified exclude.pl bug. Hmm, for this use case, that's probably correct. I might have time tonight (if not, probably Sunday).. JavaScript is a correct spelling, Java is a correct spelling, script is a word, javascript can be a correct thing in circumstances.\nJavascript is actually a misspelling.\nThere are a couple of edges like this, but, in general it probably isn't worth worrying about them. And, since I already cut out the code that shows case variations, you could easily miss them depending on order.. ",
    "jsotuyod": "FYI, PMD's EmptyCachBlock rule does allow to ignore blocks based on the name of the exception (similar to Checkstyle), by setting the property allowExceptionNameRegex. 6.+ versions default to ^(ignored|exception)$. See https://pmd.github.io/pmd/pmd_rules_java_errorprone.html#emptycatchblock. ",
    "kemitix": "@rnveach Done.. Done. Done. Done. Done. Done. ",
    "jbduncan": "I believe that these lines can be shortened to:\njava\ntokenToCommentChecks.computeIfAbsent(token, k -> new HashMap<>()).put(check);. @rnveach The latest version of AbstractMapBasedMultiset doesn't use AtomicInteger, though. :) https://github.com/google/guava/blob/master/guava/src/com/google/common/collect/AbstractMapBasedMultiset.java. @rnveach Have you checked that replacing it with plain Integer works? I'd be surprised if it doesn't work. :thinking: . > It uses Count which looks virtually like AtomicInteger.\nhttps://github.com/google/guava/blob/master/guava/src/com/google/common/collect/Count.java\nOops, okay, thanks for pointing that out for me! :P \n\nBoth ways work, but you cannot modify an Integer. To update the map with the new value you would have to create a new Integer and put that into the map and replace the old value. With the AtomicInteger, I don't have put the value back into the map since I can just update the instance directly.\n\nOkay, true.\nI suppose the only thing that makes me feel iffy about the decision to use AtomicInteger instead of Integer now... is that AtomicInteger is designed for concurrent reads and writes (with the slight performance cost that entails), whereas before the multiset returned by UniquePropertiesCheck.getDuplicatedKeys() was immutable...\n(I don't know if we want the result of getDuplicatedKeys() to be immutable, but if we do, then I believe it would need to return Collections.unmodifiableMap(new HashMap<String, Integer>(duplicatedKeys)) instead.)\nBut I'm happy to let @romani have the final say on this. :). Oh, sorry, not UniquePropertiesCheck.getDuplicatedKeys() - rather, UniquePropertiesCheck.UniqueProperties.getDuplicatedKeys().\nAnd it turns out that UniquePropertiesCheck.UniqueProperties is private anyway, so my last point about immutability is completely and utterly moot. Silly me! :P \nSo no real objections from me anymore. :). ",
    "Apache9": "Sure. Will take a look later today.. The Chinese version is fine, literally translated from the English version. But it is still a bit confusing on how to fix the problem. Maybe this one is better?\n\u5e94\u660e\u786e\u5199\u51fa\u9690\u542b\u7684\u4fee\u9970\u7b26: ''{0}''\nLiterally equals to:\nShould explicitly write out the implicit modifier: ''{0}''. The current one is good enough :). ",
    "Nobuyuki-Inaba": "sure. I'd appreciate if you could give me  a few days to check it.\n I found that existing messages are not unicode-escaped but the added message is unicode-escaped. If not unicode-escaped message allowed to use, I think not unicode-escaped should be used because not unicode-escaped message makes maintenance easy.. The original message is OK but the below message sounds more natural in Japanese.\n\u6697\u9ed9\u7684\u306a ''{0}'' \u4fee\u98fe\u5b50\u306f\u660e\u793a\u7684\u306b\u6307\u5b9a\u3059\u3079\u304d\u3067\u3059\u3002. Hi, sorry for replying a little late.\nThis Japanese translation is really good.. ",
    "victorwss": "I think that O modificador impl\u00edcito deveria ser expl\u00edcito: ''{0}'' is a slightly better translation.. This translation is fine.. ",
    "precoder": "After reading the discussion link at the top of issue, I would suggest something like:\ninterface.implied.modifier=Varsay\u0131lan niteleyici: ''{0}'' a\u00e7\u0131k\u00e7a belirtilmelidir.\n. ",
    "Jajawah": "Yes it is ;). ",
    "jodastephen": "All members of a package scoped interface are still public (output from javap):\n```\nCompiled from \"InputInterfaceMemberImpliedModifierPackageScopeInterface.java\"\ninterface com.puppycrawl.tools.checkstyle.checks.modifier.interfacememberimpliedmodifier.InputInterfaceMemberImpliedModifierPackageScopeInterface {\n  public static final int fieldPublicStaticFinal;\n  public static final int fieldPublicStatic;\n  public static final int fieldPublicFinal;\n  public static final int fieldPublic;\n  public static final int fieldStaticFinal;\n  public static final int fieldStatic;\n  public static final int fieldFinal;\n  public static final int field;\n  public static void methodPublicStatic();\n  public static void methodStatic();\n  public void methodPublicDefault();\n  public void methodDefault();\n  public abstract void methodPublicAbstract();\n  public abstract void methodAbstract();\n  public abstract void methodPublic();\n  public abstract void method();\n}\nCompiled from \"InputInterfaceMemberImpliedModifierPackageScopeInterface.java\"\npublic interface com.puppycrawl.tools.checkstyle.checks.modifier.interfacememberimpliedmodifier.InputInterfaceMemberImpliedModifierPackageScopeInterface$NestedInterface {\n}\n```. Done. ScopeUtil done. Done. Done. Done. Done. Done. Done. Done. Done. Done. Done. Done. Done. Done. Done. Done. Done. Done. Done. Done. Done. Done. Done. Done. Done. Done. Done. Done. Done. Done. Done. When I started on this, I tried to implement the members part, but found it to be complex/confusing as described above. This comment in the code is merely a left over from trying to implement the full original issue. I will update the code and rebase.. The JLS considers enums to be a kind of class. Note also that this check is violated only for enums nested within classes, not enums at the top level,. My test case has a nested enum inside an enum inside a class.\nhttps://github.com/checkstyle/checkstyle/pull/6067/files/5d14b3055a509afd86bb14071eae9a72df1d0ff6#diff-85905f481e3acb7907da4851a6de9d94R28\nI don't think I need any changes from the comments above?. Done. Done. Done. FWIW, I think duplicating the test files (many times) simply to get Javadoc/violation comments is a terrible idea. It will result in multiple copies of the file which will be significantly more confusing to readers/maintainers. The violation text I added refers to the things that the check normally treats as violations - let the each individual test switch them on and off (as any normal test code would do).. Done. Done. ",
    "jack870131": "I found some error in my case. I think I need to pull request again, right? Because the words \n\". . .\" could not be compilable in javac. I think I need to get it with comment line.. Setting the value to 0 to match the description above (camel case phrase).. The original sentence \"...allow no abbreviations (enforce camel case phrase) and allow no abbreviations to use (camel case phrase)...\" was repeating the same statement which need to be improved.. The original sentence \"...allow no abbreviations (enforce camel case phrase) and allow no abbreviations to use (camel case phrase)...\" was repeating the same statement which need to be improved.. I've correct the error. Please have a check. Thanks for your review and suggestion.. I wonder how should I define in the default value field? Could I made whole Regular Expression default in \".\". And String value in \"Null\"?. How should I write the \"since time\" of this filter? Should I write the latest version 8.1? Or just follow the \"SuppressionXpathFilter\" with \"since Checkstyle 3.5\".. I have done this initially. However, CI told me that I got too much string parameters and should consider to create a container to store them. . I am not quite sure what you mean to drop the String field. So should I drop fields such as filePattern and re-write the code in hashCode and equals methods which the filePattern existed?. I tried to do so. However, I found that when the value of fileRegexp comes to null. I cannot use the .pattern() method to get the pattern of it in hashCode and equals methods which will throw the null pointer exception. Unless I add more if statement in these both methods to prevent the null Pattern. Maybe my idea is incorrect. Please give me some instructions, thx.. The other way I think about is always preventing the Pattern value becomes null. When users didn't put any value in these Pattern fields to suppress, it would compile the default value which is \".\" in regexp, which means that I will re-write the if statements of setters in SuppressionXpathSingleFilter. e.g.\njava\npublic void setChecks(String checks) {\n        if (checks == null) {\n            this.checks = Pattern.compile(\".*\");\n        }\n        else {\n            this.checks = Pattern.compile(checks);\n        }\n    }\nPlease give some advices, thx.. How to suppress this kind of violations on test code? Should I add something on it?. Sorry, I cannot quite understand what's the meaning of it. Aren't these lines of comments just for explaining what kinds of CI error it would suppress (I cannot pass the ci test which is because of the methods contain too much String params)? Maybe something like \"There are multiple String params in the createSuppressionXpathSingleFilter method (String files, String checks, String message, String moduleId, String query) which  would cause the warning of rule UseObjectForClearerAPI\". Is that OK?. So should I add the codes in the testing file to show the test fail? Could you please explain more specifically? Thanks a lot. I cannot quite understand what is your meaning with adding mutator. What influence would it be with my codes or tests?. Thx for such a detailed explain. I would correct it.. I am not sure that my test is enough for this. Maybe you should check it, please. Thanks.. > You say method or variable when it should be like javadoc, checks, message, module id, and xpath.\nSorry sir, not quite understanding the meaning of these words. Is it means that to write what javadoc said inside the description?\n. @romani ping.. Sir, sorry for that. I think it is a mistake that I didn't correct in the documentation. It didn't use the suppressions.xml for suppressions in suppressionxpathsinglefilter. It is my fault.. Sir, I cannot think about the more complex text now. I think my original technical words cannot make users understand what exactly this filter could do. I am not sure except of the words above, what else should I put into the description?. @rnveach I removed the whole optional words. Is that OK?. I am not sure how to \"test\" my example. The way I learned to test the example is just use the jar of checkstyle to test on the command line. But now my changes didn't involved inside the jar of checkstyle, so I don't know how could I test it on \"two\" files. Or should I add this inside the testing file?. I have removed these lines of comments.. @romani So what should I do for this? Do I need to make it the same as the description in the documentation of SuppressionXpathSingleFilter?. Sorry sir, I don't quite understand what is the mean of \"append such case to existing group\".. done.. done.. done.. done.. done.. @rnveach @romani Not done yet.. done.. done.. done.. done. See the test below.. done. The \"optional\" words have all been removed.. > please explain what for in real life it might be required ?\nWhich part should this explanation be in?  In the description? Is \"suppresses audit events for\nChecks violations in the specified file, class, checks, message, module id, and xpath\"  not the description in \"real life\"? I cannot understand well, sorry for that.\n\nif no reason please substitude it example of suppression by non-query.\n\nI'm not sure what the \"substitude\" means here? Does it simply means that I should \"add\" an example for suppression with no query?\nThx for your review. I would open up another issue after @rnveach reviews.. > if no reason please substitude it example of suppression by non-query. \ndone.\n\nPlease give code example for each config block, and show by comment when violation placed without suppression.\n\nStill working on it. I would open up another clean pull request for this.. done.. done.. > please move all suppressions from https://github.com/checkstyle/checkstyle/blob/master/config/suppressions.xml that are related to folders and wildcard filename https://github.com/checkstyle/checkstyle/blob/master/config/suppressions.xml#L38\nSir, do you mean by only adding these codes you highlighted to checkstyle_checks file? Anything else should I move from suppressions.xml?. > and forget about depending on message that is problematic with multilanguage mode.\n@romani  I'm confusing about this. So does it mean that I should consider using xpath first rather than using message because message is problematic.. > Ones we merge you, you can send improvements in config for spring formatting.\n@romani Does this mean that sending issues to spring-io to make improvements of this part for them?. @romani Sir, still not quite sure.\nDoes it mean that such as:\n<suppress checks=\"IllegalCatch\" files=\"[\\\\/]internal[\\\\/].*[\\\\/]\\w+Util\\.java\"/>\nand I should change it into:\n<module name=\"SuppressionXpathSingleFilter\">\n  <property name=\"files\" value=\"[\\\\/]internal[\\\\/].*[\\\\/]\\w+Util\\.java\"/>\n  <property name=\"checks\" value=\"IllegalCatch\"/>\n</module>\nand put it into the place that I defined SuppressionXpathSingleFilter?. Sir, I am not sure how to use the id property. message property example has been added,. Done.. Done.. Done.. Done.. Done.. Done.. Done.. Done.. Done.. @romani Isn't this is the example of the spring suppress?\n<p>\n          The following example is an example of what checks would be suppressed\n          while building Spring projects with checkstyle plugin.\n          Please find more information at:\n          <a href=\"https://github.com/spring-io/spring-javaformat\">spring-javaformat</a>\n        </p>\n        <pre>\n&lt;module name=\"SuppressionXpathSingleFilter\"&gt;\n  &lt;property name=\"files\" value=\"[\\\\/]src[\\\\/]test[\\\\/]java[\\\\/]\"/&gt;\n  &lt;property name=\"checks\" value=\"Javadoc*\"/&gt;\n&lt;/module&gt;\n&lt;module name=\"SuppressionXpathSingleFilter\"&gt;\n  &lt;property name=\"files\" value=\".*Tests\\.java\"&gt;\n  &lt;property name=\"checks\" value=\"Javadoc*\"&gt;\n&lt;/module&gt;\n&lt;module name=\"SuppressionXpathSingleFilter\"&gt;\n  &lt;property name=\"files\" value=\"generated-sources\"&gt;\n  &lt;property name=\"checks\" value=\"[a-zA-Z0-9]*\"&gt;\n&lt;/module&gt;\n        </pre>\nOr if my understanding is wrong? Do I need to provide some code examples for it? But I am not sure how to provide an example for spring projects.\nAnd I also have added the description you mentioned.. @rnveach So change the text and the link of suppression filter into the suppressionxpathsinglefilter?. Done.. Done.. @rnveach It is because I wanna show what would happen that if the constructor name is the same as the normal method name. The constructor name need to be the same as the class name, which the first letter should be capitalized). \nIf it follows the original pattern, it would have violation when the normal method name is the same as the constructor name.. @rnveach Well, in a nutshell, it is because I think the class name's first letter should be capitalized. So I changed the format. If you think it doesn't matter, then I just start with the lower case in the class name. format property could be ignored in this situation.. Done.. Done.. Done.. Done.. Done.. Done.. Done.. Done.. @romani Sir, not really sure what the error means in the circleci.. Well, this is why I thought it is weird. Here is the test result:\nJack@Jack MINGW64 ~/Documents/tmp (new-user)\n$ cat TestLocalVariableName.java\nclass MyClass {\n  void MyMethod() {\n    for (int var = 1; var < 10; var++) {} // OK\n    for (int VAR = 1; VAR < 10; VAR++) {} // violation, name 'VAR' must match\n                                          // pattern '^[a-z][a-zA-Z0-9]*$'\n    for (int i = 1; i < 10; i++) {} // OK\n  }\n}\nJack@Jack MINGW64 ~/Documents/tmp (new-user)\n$ cat config.xml\n<!DOCTYPE module PUBLIC\n        \"-//Checkstyle//DTD Checkstyle Configuration 1.3//EN\"\n        \"https://checkstyle.org/dtds/configuration_1_3.dtd\">\n<module name=\"Checker\">\n  <module name=\"TreeWalker\">\n        <module name=\"LocalVariableName\">\n      <property name=\"severity\" value=\"warning\"/>\n    </module>\n  </module>\n</module>\nJack@Jack MINGW64 ~/Documents/tmp (new-user)\n$ java $RUN_LOCALE -jar checkstyle-8.18-all.jar -c config.xml TestLocalVariableName.java\nStarting audit...\n[WARN] C:\\Users\\asus\\Documents\\tmp\\TestLocalVariableName.java:4:14: Name 'VAR' must match pattern '^[a-z][a-zA-Z0-9]*$'. [LocalVariableName]\nAudit done.\nOnly name 'VAR' would have the violation.. Done.. Done. But I am not sure whether the issue's format is right. Please check it. #6489 . @romani @rnveach Not sure how to deal with this kind of error. It seems like I have something wrong in my indent. \nERROR] testAllCheckSectionJavaDocs(com.puppycrawl.tools.checkstyle.internal.XdocsJavaDocsTest)  Time elapsed: 0.797 s  <<< ERROR!\njava.lang.Error: Error was thrown while processing src\\main\\java\\com\\puppycrawl\\tools\\checkstyle\\checks\\naming\\LocalVariableNameCheck.java\n    at com.puppycrawl.tools.checkstyle.internal.XdocsJavaDocsTest.examineCheckSection(XdocsJavaDocsTest.java:171)\n    at com.puppycrawl.tools.checkstyle.internal.XdocsJavaDocsTest.testAllCheckSectionJavaDocs(XdocsJavaDocsTest.java:144)\nCaused by: org.junit.ComparisonFailure: \nLocalVariableName's class-level JavaDoc expected:<...>\nclass MyClass {\n  [ void MyMethod() {\n   for (int var = 1; var < 10; var++) {} // OK\n   for (int VAR = 1; VAR < 10; VAR++) {} // violation, name 'VAR' must match\n                                              // pattern '^[a-z](_?[a-zA-Z0-9]+)*$'\n     for (int i = 1; i < 10; i++) {} // OK\n   }\n ]}\n</pre>\n<pre>\nclass...> but was:<...>\nclass MyClass {\n  [void MyMethod() {\n    for (int var = 1; var < 10; var++) {} // OK\n    for (int VAR = 1; VAR < 10; VAR++) {} // violation, name 'VAR' must match\n                                             // pattern '^[a-z](_?[a-zA-Z0-9]+)*$'\n    for (int i = 1; i < 10; i++) {} // OK\n  }\n]}\n</pre>\n<pre>\nclass...>\n    at com.puppycrawl.tools.checkstyle.internal.XdocsJavaDocsTest.examineCheckSection(XdocsJavaDocsTest.java:171)\n    at com.puppycrawl.tools.checkstyle.internal.XdocsJavaDocsTest.testAllCheckSectionJavaDocs(XdocsJavaDocsTest.java:144). Thanks. Sorry for ignoring such a simple problem.. Done.. Done.. ",
    "remkop": "Thanks for pointing that out! I\u2019ll remove the required attribute and put back the validation logic. . Yes that\u2019s possible. The only consideration is that by implementing Callable we can reduce some boilerplate code, which is nice. We can make CliOptions implement Callable, and move some logic from Main to CliOptions as needed. . @rnveach Question: if we pull all @Option fields into the inner class CliOptions, would you be okay with moving the runCli and validateCli methods to the CliOptions class as well? \nI like the fact that those methods can refer to the fields directly. For example:\nif (filesToProcess.isEmpty()) // can reference fields directly\nIf  the @Option fields are not in the same class as the runCli and validateCli methods, we would need to pass a CliOptions parameter to these methods, so the code would look like this:\nif (options.filesToProcess.isEmpty()) // referencing fields in a different class\nThis becomes a bit repetitive and I would prefer to avoid it. What do you think?. One of the checks (I forgot which one) failed with \"anonymous inner class can be replaced with static inner class\".. Yes, I could not get it to cover the System.exit call.\nThe previous version had a test that mocked the System.exit static method but this test always failed for me.. This was unintentional and should not have been committed.. ok will do. Thank you for the tip! Will do.. Fixed. (Commit amended with force-push to keep history clean. Let me know if you prefer additional commits instead of amending commits.). Good point. I will revert this change.. The reason is that error reporting for invalid user input is much nicer: instead of a stack trace, the user will see an error message indicating what they did wrong and the usage help message showing what options are available.\nYou are correct that this changes the behaviour but I hope you agree this is slightly more user-friendly.\nFor errors other than invalid user input, the exception is passed up the chain as before.. Most unix tools use -V (uppercase) for --version and -v (lowercase) for --verbose. This is not a standard but fairly common usage, as documented here.  Example tools that follow this convention: grep, curl, gzip, ssh.\nBecause of this background, picocli has a shortcut for providing -h, --help for usage help, and -V, --version for version help: these options are \"mixed in\" when the command is defined as @Command(mixinStandardHelpOptions = true). I used this shortcut to avoid the need for defining annotated fields for these standard options.\nUnfortunately the shortcut does not allow customizing the option names. If the name needs to be changed, we need to define an annotated field: @Option(names = \"-v\") boolean isVersionRequested;. I thought it better to use the mixinStandardHelpOptions shortcut. . I will remove the implements Callable, rename call to execute and move the options into an inner class as requested.\n@rnveach @romani  To clarify, picocli does not require client code to be Runnable or Callable. It's just that if your application implements one of these interfaces, you can choose to use one of picocli's convenience methods to run your application in one line of code:\nCommandLine.call(new Main(), args);\nThis one single line takes care of parsing the arguments, validating user input, checking whether the user requested version/usage help, and finally executing the business logic in the call method.\nThis is what I initially tried to achieve. \nHowever, after taking into account the error codes and exception handling, it became a lot less clean and in the end I just used the parseArgs method. In that case, implements Callable is no longer necessary as you pointed out.\n. Will do.. Will do.. Will do.. I will change this to use the ParseResult::isUsageHelpRequested and ParseResult::isVersionHelpRequested methods.. An instance is needed because the annotated fields are injected with the command line option values. This can be an inner class. I will make the change.. When parsing the command line, picocli will convert the command line options to the type of the annotated fields and inject the values into the fields. This is one of the advantages of using picocli vs. Commons CLI: usually you don\u2019t need to inspect a ParseResult, you just use your annotated \u201cbean\u201d directly. \nSo, we want to use the instance to look at the parse results. For example:\n```\nclass CliOptions {\n  @Option(names = \u201c-x\u201d)\n  int x;\n}\nCliOptions options = new CliOptions();\nCommandLine cmd = new CommandLine(options);\nString[] args = { \u201c-x\u201d, \u201c123\u201d };\ncmd.parseArgs(args);\nassert options.x == 123; // use instance\n```\nThis is a common usage pattern. There are variations where you don\u2019t need an instance, for example if the class implements Runnable or Callable. (And to support such use cases it is already possible to pass a Class to the CommandLine constructor and picocli will internally create an instance just like you describe.)\nHowever, this application (Main) has requirements for error handling that means it\u2019s simpler to just use the \u201ccommon usage pattern\u201d. \nI will move the annotated fields into an inner class and update the PR. Let\u2019s discuss further after that. . Will do.. I see your point that it is better to focus on the responsibilities of each class.\nI just submitted a new PR (now going through CI) where responsibilities are divided like this:\nCliOptions responsibilities\n\ndefines the command line options and usage help message descriptions\nvalidating the user input\nlisting the target files (after figuring out regex patterns, exclusions, etc.)\n\nMain responsibilities \n\ndelegate some work to CliOptions\nrun checkstyle\n\n\n. When I tried that, I got some warning that \u201cmethod is only used in static inner class CliOptions\u201d. Or do you propose to move all methods out of CliOptions into Main, including the validateCli method?. Ok, let me take another look. . Done. Done. Done. Done. Done. Done. Done. Done. Done. Done (no longer implements Callable). Done (field removed). Done (field removed). Done. Done. Done. Done. Done (properties tag added). Done: moved methods getFilesToProcess, listFiles and isDirectoryExcluded to Main.\nCliOptions now only has the getExclusions and validateCli methods, which are purely CLI-focused. It makes sense for Main to delegate validation of the CLI options to the CliOptions class, I hope you agree.\nThe alternative is to have a static method in Main, and pass in the CliOptions as a parameter. I don't think that would be a good idea; it seems like a bad smell to have a method in one class (Main) when all that this method does is reference all 20 fields of another class... It seems much more natural OO design to have the validate method on CliOptions IMHO.. Done: Moved HELP_WIDTH to CliOptions also.. Done: moved ATTRIB_TAB_WIDTH_NAME to CliOptions.. Done:\n\nmoved getFilesToProcess to after execute\n\nmoved getVersionString to after main. Good find. Both done:\n\n\n-gxs replaced by -g in synopsis as well as the option description below\n\nverified other options and made two updates to the documentation:\n-tabWidth became --tabWidth as agreed \n-executeIgnoredModules became --executeIgnoredModules as agreed. Done. I updated the PR. Waiting for the CI pipeline to pass now.. I added this comment that summarizes the option name changes: https://github.com/checkstyle/checkstyle/issues/6068#issuecomment-434097233. @rnveach I checked the 4 links above and I believe none of them should be impacted by the changes in this PR. . \n\n\n",
    "ngeor": "Fixed the \"Some javadoc\". Moved implementation to utility class to share it with JavadocTypeCheck. I am not sure what version I should set here. I picked this from the pom.xml.. I see, but this is a private constructor. It's not possible to invoke it, right? I added it to indicate it as a utility class ( HideUtilityClassConstructor in checkstyle rules ). \nI'll try to get rid of this class altogether based on the other comments. Thanks will look into it. I'm however moving the method under the other Util class you mentioned so it won't be necessary :) . Please notice that inlining means I will be repeating the \"allowedAnnotations\" second argument on every inlined call. To avoid repetition, I think it's worth having this extra method. If you insist I will change it.. fixed!. fixed!. fixed!. fixed!. Comments about blank lines and formatting (your next comment), is exactly the value that checkstyle brings. You shouldn't spend your energy on these things, checkstyle should catch them for you. I find it a bit ironic to see this type of comments on a PR on checkstyle itself. You can see how I am using the EmptyLineSeparator rule here https://github.com/ngeor/checkstyle-rules to ensure vertical space inconsistencies break the build (and are not subject to code review).. I moved this code from its original location, so I have not changed this at all.\nCould you please give me an example of what you mean so I can add the test?. I moved this code from its original location, I don't think I should be making more changes to it. What is the benefit of changing a while loop into a for loop?. Good point, I will rephrase the comment and rename the method. I did some refactoring as well. The build will fail due to code coverage but I will deal with that after you've had a chance to see the changes.\n. No that file has almost all the tests starting with test except this one and a few more. I can revert if you like, or I can fix all the tests in this file to start with test. Whatever you want is fine by me.. Very well spotted and this is what I want to discuss.\nThe \"allowedAnnotations\" of JavadocMethodType (which I reused in the first place) works with both \"java.lang.Override\" and \"Override\". So if you specify that your allowedAnnotations is \"Override\", it will happily ignore methods marked with \"@override\" but also their FQN \"@java.lang.Override\".\nThe other method however, which I don't know where it's used, is clearly stating in its documentation that \"Override\" and \"java.lang.Override\" are different things and require an explicit second method call.\nI want your advice on how to proceed here. I don't like the difference in semantics. Obviously, we can't break backwards compatibility with how JavadocMethodCheck works.\nSo we need both styles of matching. The strict style, which demands that you specify the annotation as it is defined. The loose style, which matches \"Override\" and \"java.lang.Override\", which was used in JavadocMethod (which is why that code was different) and which is the one I'm trying to use in JavadocType.\nI hope this makes sense :-). of course!. hm, now that I see it closer, this is an odd number of spaces. Putting the pipe under the 's' gives it 13 spaces indentation. \nHere it is with 4 spaces:\n&& (getMethodsNumberOfLine(ast) <= minLineCount\n    || AnnotationUtil.hasAllowedAnnotations(ast, allowedAnnotations));\n8 spaces:\n&& (getMethodsNumberOfLine(ast) <= minLineCount\n        || AnnotationUtil.hasAllowedAnnotations(ast, allowedAnnotations));\nand 12 spaces:\n&& (getMethodsNumberOfLine(ast) <= minLineCount\n            || AnnotationUtil.hasAllowedAnnotations(ast, allowedAnnotations));\ntake your pick :-)\n. May I suggest to create an issue in the project so that someone eventually will implement this check?. When I run the mutation tests locally on my laptop, I get random failures. I noticed then that in this script you are sorting \"target/actual.txt\" but not \"target/ignored.txt\". After I applied sorting on \"target/ignored.txt\", my problems were gone. To me it felt logical that if you sort one part of the comparison, the other part should also be sorted, it's more symmetrical this way.. Good to know!. @romani I appreciate the time you're taking to review my PR (and the same applies for @rnveach  of course). I do however need to point out that on a few cases your remarks might be rephrased in a friendlier tone, without weakening their objective value.\nExample 1: this is hard to read properly (hard instead of impossible which can be perceived as too negative)\nExample 2: please reply to each comment (each instead of EACH which can be perceived as too angry)\nWritten medium does not allow for carrying over the tone of voice and of course different cultures perceive things differently.\n. fixed. Created issue #6110 . fixed. pending reply from @rnveach . I think this is obsolete because of my refactoring there is no special loop anymore. fixed. fixed. fixed. fixed. fixed. fixed. fixed. Sure thing I will give it a try.. I copy pasted the existing comment from JavadocMethodCheck (which I see was committed 4 years ago).\nI will apply your requested change in both my code and the 4 year old code for consistency. . fixed. fixed. Hi @romani ,\nI did the following changes:\n- changed \"since\" to 8.15 as I see you've already released 8.14\n- made @Generated the default value\n- added an example in the documentation for a few Spring annotations\n- adjusted unit tests to verify the new default behavior regarding @Generated\n- rebased on top of master, squashed in a single commit\n. I think that my example is good enough. It is actually better than the check JavadocMethod (which is what I based my changes on), which doesn't even have an example like mine (and it's already on production) http://checkstyle.sourceforge.net/config_javadoc.html#JavadocMethod . There's already FQN in my unit test.. firstMatchingAnnotation is a better name because it tells the developer who'll read the code that if there are multiple annotations in the annotations list, only the first one will be returned.. fixed. fixed. It was already renamed to findAnnotation as per your earlier comment, I will rename it to findFirstAnnotation. Sorry, you meant in the configuration of the check itself. I did not read your comment correctly.\nI only have the case where the code under inspection defines a FQN for the annotation. I will add the corresponding test where the check defines a FQN and will update the docs.. I'm just wondering if we're falling for the trap of the better being the enemy of the good. As a checkstyle user, I never had a problem understanding the checkstyle documentation. But maybe that's just me.\nI've updated the docs with side by side example of source code and matching checkstyle configuration.. What I would personally like to see is a collection of popular presets and somehow sorted by the number of downloads. I have created my own set of rules, which I don't like doing. I'd rather follow a popular preset, if it's close to my taste. Something like what ESLint is doing.\nThe documentation is great. What I think might improve it is if the core team of checkstyle gets a bit more diverse. I'm always trying to make sure the documentation I write is in proper English. I'm not a native English speaker, so I make mistakes, like everybody. When all developers have the same background, it's difficult for them to recognize their own grammar mistakes, so diversity helps there.\n. fixed. Thank you! I'll try to contribute something else in the future. I think I'd like to do the code cleanup we discussed that all test methods should start with test, which currently isn't the case.. ",
    "li-boxuan": "@rnveach Thanks for the reminder. After some investigation, I find the pitest error is due to these three lines of changes. I notice that there is one VoidMethodCallMutator case that survived, leading to the pitest error. However, I am having some difficulty finding the reason. I just wonder if there is any way to see the actual mutation or any other effective debugging approaches.. Thanks for the hint. The problem is this line https://github.com/checkstyle/checkstyle/pull/6095/files#diff-cbb6a2c93e57326ba07d4d3c84bbcdf7R129. (removed call to com/puppycrawl/tools/checkstyle/api/AbstractViolationReporter::log \u2192 NO_COVERAGE)\nPreviously, we report line number 0 when minimum is not satisfied for RegexpMultilineCheck. However, after my changes, we report line number 1. At the same time, we also have another report message saying that line 1 has matched the regular expression.\nPreviously (223 error messages):\n0: some message\n1: some message\n2: some message\n...\nCurrently (223 error messages):\n1: some message\n1: some message\n2: some message\n...\nThe duplication is somehow removed and only 222 error messages are reported finally in the test. Therefore, removal of https://github.com/checkstyle/checkstyle/pull/6095/files#diff-cbb6a2c93e57326ba07d4d3c84bbcdf7R129 would not affect the test, leading to the pitest error.. I think I\u2019ve fixed the issue, however, Travis is now failing due to some jacoco errors which don\u2019t seem to be related to my pr.\norg.apache.maven.plugin.PluginResolutionException: Plugin org.jacoco:jacoco-maven-plugin:0.8.2 or one of its dependencies could not be resolved: Failed to read artifact descriptor for org.jacoco:jacoco-maven-plugin:jar:0.8.2\nI repushed and triggered another build, which did no help.\n. ",
    "esilkensen": "I agree that we can't know for sure if the last letter is part of a next word or not, but I believe that actually is the old/existing behavior (see the comment at line 347: // -1 as a first capital is usually beginning of next word)\nThe existing tests demonstrate this. For example:\n- testTypeAndVariablesAndMethodNames checks that marazmaticVARIABLEName is flagged as a warning.\n- testTypeAndVariablesAndMethodNamesWithNoIgnores checks the same file but adds VARIABLE as an allowed abbreviation, and then marazmaticVARIABLEName is no longer flagged - even though the \"abbreviation\" is really VARIABLEN.\nWhen I first looked at this in the code I thought, that's kind of strange... but, I guess it's a reasonable heuristic and probably works right most of the time? Like, in getXMLParser the intended abbreviation really is XML and not XMLP.. I thought @return true if .... sounded like a method that returns a boolean.\nWhat about something like @return the abbreviation if it is bigger than required and not in the ignore list, otherwise @{code null}?\nI am happy to change this back, though, if you'd prefer!\n\nA call to getAbbreviationIfIllegal(str, n, n) for a single character abbreviation would return null as long as allowedAbbreviationLength is not a negative number.\nBut thinking about getAbbreviationIfIllegal(\"Name\", 0, 0), I guess the edge cases where this shouldn't return null would be if the user wanted to enforce \"absolutely no capital letters in names\" (i.e. setting allowedAbbreviationLength to -1?), or possibly something like \"the capital letter N cannot be used in a name\"?\nAre those valid use cases? If so, I think I could re-work the code a little with that in mind... I guess my initial feeling is that a single-character abbreviation isn't really an abbreviation / passing 0, 0 could maybe be considered invalid. What do you think?\nTaking a step back, the existing code called this method with different endIndex values depending on whether the abbreviation was at the end of the string or not. My goal was to simplify that by making endIndex always the index of the last character in the abbreviation.. Sounds good. I was thinking about this some more:\nIn the original code, getAbbreviationIfIllegal(String str, int beginIndex, int endIndex) is called with an exclusive endIndex of str.length() when a sequence of upper-case characters stretches to the end of the string, and with an inclusive endIndex of index - 1 otherwise (where index is the index of a terminating non-upper-case character).\nI think this is the source of the bug:\nWhen getAbbreviationIfIllegal checks the length of an abbreviation against allowedAbbreviationLength, in the original code it considers an abbreviation at the end of a string to be one character longer than it does otherwise.\nThis makes it falsely flag names like newCustomerID as invalid, saying it 'must contain no more than ''2'' consecutive capital letters.'. With this PR getAbbreviationIfIllegal(String str, int beginIndex, int endIndex) is always called with inclusive indexes, such that str.substring(beginIndex, endIndex + 1) is the sequence of upper-case characters.\nThis makes it so abbrLength is computed the same regardless of where in a string an abbreviation occurs.\nIf abbrLength > allowedAbbreviationLength, the abbreviation is illegal unless it is included in the set of allowedAbbreviations. (This length check does what we want even when beginIndex == endIndex, if allowedAbbreviationLength == -1.). This method could be responsible for deciding: given a sequence of upper-case characters from str.charAt(beginIndex) to str.charAt(endIndex) (inclusive), what is the abbreviation that should be checked for existence in allowedAbbreviations?\nThe original code truncated the final upper-case character so that for example in \"getXMLParser\" the user could specify \"XML\" as an allowed abbreviation, and it would truncate \"XMLP\" to \"XML\".\nLike you said, that can't always work, but it seems like a reasonable assumption... what do you think? Maybe it just needs to be documented so the user knows what to expect?\nTo your point about handling \"single-character abbreviations\" where beginIndex == endIndex and allowedAbbreviationLength == -1, what if this method did the following:\n// don't truncate final character if it is the last character in the string\n// don't truncate final character if there is only a single upper-case character\nif (endIndex == str.length() - 1 || beginIndex == endIndex) {\n    result = str.substring(beginIndex, endIndex + 1);\n}\nelse {\n    result = str.substring(beginIndex, endIndex);\n}. Good point, I think this can be clearer: beginIndex and endIndex are inclusive in the sense that str.substring(beginIndex, endIndex + 1) is a sequence of upper-case characters ending at / including str.charAt(endIndex) -- but endIndex is usually not inclusive as far as what this method considers the actual abbreviation.. The two calls to getAbbreviationIfIllegal(str, beginIndex, endIndex) ensure that in both cases  str.substring(beginIndex, endIndex + 1) is a complete sequence of consecutive upper-case characters.\nThat method compares endIndex - beginIndex to allowedAbbreviationLength, so it always drops one character off the end when doing this comparison, which I agree is confusing, but my understanding is this matches the existing behavior where allowedAbbreviationLength of n really means n+1 characters are allowed.\nIt looks like a related update to the docs was just added to make things clearer at the top: https://github.com/checkstyle/checkstyle/issues/5832\nI think this is correct at least in the sense that it preserves the existing behavior for abbreviations not at the end of a string, and fixes it for abbreviations at the end of the string (where an additional character was dropped off the end).. The alreadyAssigned field is set to true when a variable is assigned that already has assigned set to true (by determineAssignmentConditions).\nThen final variable candidates with alreadyAssigned set to true are filtered out as no longer being candidates since they have been assigned 2+ times (by shouldRemoveFinalVariableCandidate).\nSo with this change, for-each variables get\nfor (Object o : collection) { // assigned = true, alreadyAssigned = false\n  o = new String(\"other\");    // assigned = true, alreadyAssigned = true\n}. Sounds good. So should we say: method return types are only checked when javaStyle is true? Then if that property is false, either style is OK?. @rnveach I tried to update the documentation to reflect the current logic with my last commit. Is there a spot in particular you think it should be changed?\nAnyway, thank you both for your patience - I am sorry for the churn, I just want to implement the logic that you would like to see for this check.\n\nInitial version of the PR: method return type always checked (and must be \"Java style\")\nCurrent version of the PR: method return type only checked when javaStyle is true\n\nI was interpreting your first comments @romani as agreeing with that first version, then interpreted your most recent comment as saying we should have the second version.\nAny approach is ok with me (or maybe a third one with a separate property configuring the method return check specifically?) - just let me know what you would like and I will make the changes.. Sorry, one more clarification:\n\nvarieble/field type and method type are always checked.\nif javaStyle=\"true\" (default), then \"[]\" should be on type, only.\nif javaStyle=\"false\" then \"[]\" can be at other place.\n\nWith the current logic in the PR: if javaStyle=\"false\", then \"[]\" can be at the other place (for method return types), but it doesn't have to be.\nDo you want it to be: if javaStyle=\"false\" then \"[]\" should be at other place, only?\nThe reason I thought it might make sense to not make char[] toCharArray() a violation when javaStyle=\"false\" is that it isn't really \"C style\" since it is not possible to actually return a [] type in C/C++ -- I don't know where this char toCharArray()[] syntax came from, but it doesn't seem like C/C++.\nI thought it might be likely that a user would want to enforce int nums[]; style while still writing char[] toCharArray() for methods - but, I wonder how many users actually enable this check with javaStyle=\"false\" in the first place - maybe it's no big deal either way.\nAnyway, I am happy to make the change so that javaStyle=\"false\" means char[] toCharArray() is a violation, and will do that now.. Thanks @rnveach , @romani, I have updated the code and documentation with an extra note - let me know any further changes you would like to see. (Also, next time I will ask questions/clarify behavior in the issue first, if unsure about the implementation, hopefully for a smoother PR!). Oh, I should have caught this myself - anyway, got it now - thanks again.. ",
    "IAmPramod": "We should modify it is allowed only 2 consecutive capital letters to only 2 consecutive capital letters are allowed. ",
    "lars-sh": "I'm not sure about the checkstyle's usage of arrays vs. collections. Instead of using attributes, value and ident using Map<String, AbstractNode> attributes should help to simplify (a) access to available attributes at getAttributeValue(...), (b) values can be returned as array inside iterateAxis(...) and (c) allow adding multiple attributes just as needed in this place.. This limits the value attribute to IDENT nodes, solving #6115. Though all nodes contain any kind of text, which might be interesting. Think of XPaths just like //NUM_INT[@value = 123] or //STRING_LITERAL[@value = '\\\"HelloWorld\\\"']. Therefore I suggest leaving away this condition... Following the documentation of getAttributeValue(...) this line should be return null; instead.\nsee http://www.saxonica.com/html/documentation/javadoc/net/sf/saxon/om/NodeInfo.html#getAttributeValue-java.lang.String-java.lang.String-. @romani From my point of view the value attribute technically fulfills all needs, though keeping the text attribute allows to offer backwards compatibility.. ",
    "tmortagne": "@default enable the plugin execution id associated to https://github.com/xwiki/xwiki-commons/blob/master/xwiki-commons-tools/xwiki-commons-tool-verification-resources/src/main/resources/checkstyle.xml. This is the file which contains most of (or all depending how you see it) the checkstyle rules defined for XWiki.\nIf you don't set anything only https://github.com/xwiki/xwiki-commons/blob/master/xwiki-commons-tools/xwiki-commons-tool-verification-resources/src/main/resources/checkstyle-blocker.xml is enabled, this one contains a few things which are not exactly the usual code style and could be seen as compilation error but for XWiki specific stuff.\nI'm not a big fan of the complexity brought to the checkstyle setup in XWiki but that's the current situation.\nThe specific missing violation is a change to IllegalType which started failing when HashMap was extended. According to the changelog this has been done on purpose so it's not some unexpected regression, but since we usually get a nice warning from you guys in cases like this I was surprised and wondered if the XWiki was still building properly on your side :). ",
    "thomassenger": "No, I do not need equals and hashCode. I was not able to suppress it. I have got something, that suppression is not allowed...\nI struggling with the strict rules. It is my first contribution. Please give me some advice here.. I selected the InputOrderedProperties3BinaryOrder.properties example. I removed the : and corrected the missing \"the\"\nThe key name 0 and 1 i kept. I always search for it.\nDone.. Done.. Deleted.\nDone.. JavaDoc updated.. it was spotbugs, EQ_DOESNT_OVERRIDE_EQUALS\nI was able to solve it by editing spotbugs-exclude.xml . If I would do this, than the check will not work. Because keySet() creates a new Set by using new Hashtable.KeySet(). On a Hashtable is the order not guaranteed.. done. I found by studying the PIT problems, that the keyList does not have to be unique. The order is important. So I removed the if complete.. I added an NonSerializableFieldInSerializableClass. I added an test that checks if only \".properties\" is used.. I added in a property file an double key. I removed this if, because it works also if the list is non unique.. suppressed with\n@noinspection EnumerationCanBeIteration. I was looking into  UniquePropertiesCheck. I found also 2 other implementation having the same pattern.\nThis implementation relies on the FileText. It loops and count what this implementation returns. My implementation will stop if the first match was found. (no multi key)\nI can try to implement one more test to prove your concern above. I will try to verify the getKeyPattern() method. Because this seems unclear here.. OK, I will rework this.. I think I did some complicated stuff here to get the test coverage green. I think it is not required any more, because I removed the if from the put method.\nI will rework this.. OK, I will. My plan was to allow case sensitive an case insensitive check. But I think I will postpone it, because this MR getting too long to fulfil.. Because of \"I do not know\". There are 12 other tests doing it in the same way. I was copying it from somewhere.\nI will change it.. Hmmm lets see If I find a better solution. testLineNumbers() is private and my goal was to test the return of this method only. May be that I will keep it like this.. I implemented for getLineNumber two new validations.\n1) check previous property key followed by property key\n2) the starting line number is the line number of the last found problem.\nIn testfile InputOrderedProperties2EmptyValue.properties I inserted repeating keys to verify the implementation.\nThis should help to find the right line number for reporting a problem.. deleted. Done. ",
    "fzdy1914": "I will work on it on weekends.. However, I believe this line is more like a mistake. The goal of that pr is to add a new option ALONE_OR_SINGLELINE, but it modified the behavior of ALONE. So maybe it is indeed a mistake.. This comment is weird also.. This is for the coverage. Previously, isEmptyBody is also used in shouldBeAloneOnLineWithAloneOption, so the coverage is guaranteed. \nNow, it is the only place for this method, so the order is important.\nTo cover one of line in  isEmptyBody, the following line is added.\nclass TestClass4 { }\nHowever, !isSingleLineBlock(details) will return false in the first place,  so this line cannot be passed in the isEmptyBody function anymore.\nLet's reorder them so that such line will be examined in isEmptyBody  in the first place.. OK, I will try to find if there is a test to cover this.. ",
    "Vampire": "Well, with my changes you can indent it or not, it doesn't make any difference in the final result.\nI can of course unindent the parts again, but don't you think it looks cleaner indented?. The change is necessary, because the only valid content of <body> tag is <section>, so the <div> cannot be before the section which is why I put it inside and moved it to the proper place via CSS.\nI was not aware that this file is generated, I now also adapted the freemarker template and the tests, the generation produces the proper result here now, I'll create a PR to the contribution repo when we agreed here.. Because <source> must not have a class attribute.. Unfortunately it does not work, as it is defined for HTML, but not generally for XML. With &nbsp; the validation will fail because of an undeclared entity.. I don't get what you mean.\nThe MissingOverride example is not marked with class wrap-content which is why it is strangely indented.\nIf it were marked with class wrap-content and my changes applied, the leading whitespace is stripped and so it would look proper, no matter whether you indent it in the source or not.\nAgain, with my changes the .wrap-content class changed from white-space: pre-wrap to white-space: pre-line where the leading whitespace is stripped in the display, so it makes absolutely no difference in the end-result whether you indent the example in the source or not.. Just to mention it again, if you are not ok with this, you can never enable the validation option of the maven-site-plugin, as the <div> as child of the <body> is invalid and thus will not validate.\nUp to now the validation option was disabled due to a bug linked in the pom.xml or rather an underlying bug in the maven-xml-plugin that since was fixed.. Because the validation of the maven-site-plugin is disabled because of a bug that is fixed now.\nIf you switch on validation and do not do the changes I made, the pages will not validate.\nI basically mostly did changes that were necessary to make the pages validate properly.\nIt worked until now because validation was turned of because of said bug and browsers are very lenient in parsing HTML and correcting errors in it to have a better experience for users that browse to pages that are acutally not valid.. The .source style for the <source> tags has white-space: nowrap; which means no automatic wrapping is done by the browser.\nThis then caused #3902.\nTo fix this the wrap-content class was introduced which set white-space: pre-wrap !important; for selected cases.\nThis caused the whitespaces to be preserved but if necessary line-wrapping to be done and thus also required all relevant code parts to be unindented.\nAdditionally as it preserves linebreaks, it looks like this (extra line in the end):\n\nI wanted to look nicer, like this:\n\nDue to that part of my changes is to use white-space: pre-line !important; instead for the pre tag. As it strips the whitespace, the strange extra line is gone without the need to always have the </source> tag on the last line of the actual content which would be an alternative. A side-effect of this is, that the code parts can be indented properly in the source, as it causes the whitespaces to be stripped, but newlines to be preserved and still wrap if necessary.\nFor the intentional indenting that you stripped in your \"We will get\" example are the non-breaking spaces.\nAlso, this is only for the parts marked with the wrap-content class.. It will look exactly like currently, one pixel give or take.. It looks the same, screenshot is in the comment above I just made.. Ah, ok, didn't know doc: is only for minor doc changes.\nWell, in effect they actually are minor, but I'll open an issue later, gotta go now.. They are not for nicer look, but to get indentation with the pre-line style which strips leading whitespace.\nFor getting the markup valid I also had to change the styles a bit and tweaked it alongside as described in my other comment. I have the respective PR commit for PR ready already, I could open PR to the other repo as reminder if you want.. > I am ok with the shrinkage. It looks like excess space anyways that we didn't need.\nI will mark this resolved.\nYes, as explained above and in the issue, this was the main intention for changing pre-wrap to pre-line :-)\nIt should be shrunk in any browser.\nIt was an extra newline.. > Do you know how maven-site-plugin determines what children are acceptable and which aren't? Is it a fixed list built into it's code?\nIt is the same children your IDE or any other proper XML editor allows:\n\nIt is defined in the XDoc 2.0 XML schema referenced in the root tag of the file: http://maven.apache.org/xsd/xdoc-2.0.xsd. Basically same reasoning as in #6530.\nThe code in question this time is\njava\nreturn bracePolicy == RightCurlyOption.ALONE\n            && shouldBeAloneOnLineWithAloneOption(details, targetSrcLine)\n        || bracePolicy == RightCurlyOption.ALONE_OR_SINGLELINE\n            && shouldBeAloneOnLineWithAloneOrSinglelineOption(details, targetSrcLine)\n        || bracePolicy == RightCurlyOption.SAME\n            && details.shouldCheckLastRcurly\n            && shouldBeAloneOnLineWithAloneOrSinglelineOption(details, targetSrcLine);\nand while pitest report again reports one line too early, the surviving mutant is replacing bracePolicy == RightCurlyOption.SAME by true.\nThis means to make a difference bracePolicy needs to be either ALONE or ALONE_OR_SINGLELINE, so that in bug-free code the condition would have been false.\nIf the option is ALONE, shouldBeAloneOnLineWithAloneOption has to be false or the third ||-part is not even evaluated.\nIf the option is ALONE_OR_SINGLELINE, shouldBeAloneOnLineWithAloneOrSinglelineOption has to be false or the third ||-part is not even evaluated.\nshouldBeAloneOnLineWithAloneOption is effectively a subset of shouldBeAloneOnLineWithAloneOrSinglelineOption, so if first is false, second is also false.\nThis means again, when the third ||-part is evaluated, its third &&-part is always false and so the first &&-part which is the mutant survivor does not make any difference.\nIt is basically only there for better code readability and stability for further changes, for example if another RightCurlyOption is added.\nSame options as for #6530.. Well, the description of the option same is also in terms of alone-or-singleline. First sentence of the description of same is\n\nWorks like alone_or_singleline but the brace should be on the same line as the next part of a multi-block statement\n\nSo I would say it is arguable to also use that method inside the \"should be alone\" check that is done after the \"should be same\" check.\nBut you are right about merging the options.. I'm not entirely sure what you mean here.\nIn the file are the cases that I reported, that failed without my fixes.. Fixed in what regard?\nThe comment is still valid.\nOnly the length of the enum argument is used, but the value # is ignored.. Fixed in what regard?\nThe comment is still valid.\nThe code still silently assumes that CR and LF are of length 1, we just don't need the sub-array anymore as the pattern is also of length 1 now.. I didn't add new violations, I just removed wrong violations that were not tested, so why should any existing test change? \ud83d\ude15 . ",
    "Vantuz": "\nyou need to break the loop as soon as isEquals is false\n\nActually, that's exactly what happens here. And the test case for it is https://github.com/checkstyle/checkstyle/pull/6461/files#diff-485a605456876d771b8df524551fe298\n(we check that both imports have same amount of parts before this loop is executed and we don't check last part of both imports in the loop). Currently it is used to spot duplicate star imports. But this can be implemented other way. ",
    "mwkroening": "Isn't this the right way to do that?. But I didn't even touch these lines.\nI just put code before them.. Allright, I thought so. Thanks for showing me the right file to edit the suppressions!. "
}