{
    "plusvic": "From plus...@gmail.com on January 11, 2009 10:14:12\nFixed on version 1.1.1\nStatus: Fixed\n. From plus...@gmail.com on January 17, 2009 06:27:20\nStatus: Started\n. From plus...@gmail.com on January 17, 2009 09:42:30\nThe \"doc\" directory was missing from source package. The problem is solved with a new\npackage (yara-1.1a.tar.gz).\nStatus: Fixed\n. From plus...@gmail.com on May 07, 2009 08:39:36\nStatus: Started\n. From akuse...@gmail.com on May 07, 2009 11:03:44\nTested issue with the 1.2.1 win32 binary. Issue appears to be resolved in version 1.2.1.\n. From plus...@gmail.com on May 07, 2009 11:48:37\nYes, it was a bug fixed in version 1.2.1 and included in the ChangeLog as: \"BUGFIX:\nInvoking pcre_compile with non-terminated string\"\nStatus: Done\n. From juliavi...@gmail.com on October 08, 2009 17:40:31\ns/Abiguity/Ambiguity/ \nI was in a rush to save this...\n. From plus...@gmail.com on October 16, 2009 10:49:20\nThe problem was with single-line comments at the end of the file. The parser expected to find a line-break at \nthe end of the comment but it was finding the end of the file instead. Fixed on r43 .\nStatus: Fixed\n. From plus...@gmail.com on March 23, 2010 03:10:40\nYou're running \"./configure\" as root (with sudo), but \"make\" and \"make install\" are being run as a non-root user, \nthat's why you are getting a permission denied error. The steps should be:\n$>./configure\n$>make \n$>sudo make install\nOr simply execute everything with sudo:  sudo ./configure; sudo make; sudo make install.\n. From timothyd...@gmail.com on March 24, 2010 08:54:47\nThis fixed the problem, thanks.\n. From plus...@gmail.com on March 24, 2010 14:14:50\nStatus: Invalid\n. From plus...@gmail.com on March 24, 2010 14:30:43\nYou must install Python development package. In Ubuntu/Debian:\n$>sudo apt-get install python2.5-dev    (or python2.6-dev if you are using Python 2.6)\nI've never used CentOS, but I think that it should be something like:\n$>sudo yum install python2.5-dev\n. From plus...@gmail.com on March 24, 2010 14:34:50\nI've noticed that you are using Python 2.4, you should use:\n$>sudo yum install python2.4-dev\n. From plus...@gmail.com on April 01, 2010 05:55:38\nStatus: Invalid\n. From plus...@gmail.com on May 08, 2010 09:13:58\nThis bug was fixed on r59 . I hope to release version 1.4.0 anytime soon.\nStatus: Done\n. From plus...@gmail.com on June 04, 2010 09:48:31\nYou're right. Thanks for this very detailed bug report. Fixed on r78 .\nStatus: Fixed\n. From plus...@gmail.com on March 08, 2011 12:08:53\nFixed in r94\nStatus: Fixed\n. From plus...@gmail.com on January 12, 2011 05:01:20\nmaybe in some future release if there are enough people interested in this feature.\nLabels: -Type-Defect Type-Enhancement\n. From julia...@gmail.com on January 12, 2011 05:48:11\ni'm testing yara in a lot of malwares, a big quantity of them are unicode strings whose would be enought to classify a malware\nbut, thanks for the answer.\n. From plus...@gmail.com on January 12, 2011 05:52:40\nwell, with \"wide\" strings you can solve the problem in many cases, the problem would be with non-english characters, but in those cases you can use a hex string instead.\n. From josiah.d...@gmail.com on June 09, 2011 15:05:17\nI definitely would like support for unicode.\n. From killbug2...@gmail.com on November 07, 2011 19:09:50\nI  hope that it can support Unicode, now using hex strings instead of non-english characters.\nthank you, sorry for my poor English.\nAttachment: filemap.c\n. From plus...@gmail.com on January 13, 2011 09:47:56\nI think i'm understanding what you're asking for, but could you give an example of something that you would like to express using this feature. I don't find any situation that can't be expressed with  \"$string at expression\" or \"$string in (expression..expresson)\"\nLabels: -Type-Defect Type-Enhancement\n. From plus...@gmail.com on January 13, 2011 10:03:07\nI found a situation where the proposed feature would be more natural than the current solution. For example if you want to guarantee that every occurrence of some string is inside a given offset range you could say:\nfor all ocurrence of $string: (@ > expression1 and @ < expression2)\nThat should be expressed now as:\nnot $string in (0..expression1) and not $string in (expression2..filesize)\nIt works, but is not very readable.\n. From damuhan....@gmail.com on January 13, 2011 10:52:47\nThanks for the feedback. Here is an example of what I am trying to express:\nrule example\n{\n  strings:\n    $guid = { ... } // 16 bytes\ncondition:\n    for any of ($guid) : (int32(@ + 16 + x) < 0) // x being some constant/offset\n}\nI would like the expression to be evaluated for each occurrence of $guid and have the rule fire if expression is true for any occurrence in the \"for any of\" case.\n. From plus...@gmail.com on January 13, 2011 11:04:05\nInteresting, i didn't though about intXX(). People end up using yara in very creative ways :)\nWell, it makes sense, so i'll try to included in next release.\n. From damuhan....@gmail.com on January 13, 2011 11:15:05\nGreat! Thank you!\nIf it would be easier to point me in the right direction, I'd be more than happy to take a crack at it.\nCheers.\n. From plus...@gmail.com on March 22, 2011 07:17:27\nFeature added in version 1.5\nStatus: Fixed\n. From plus...@gmail.com on February 16, 2011 14:54:09\nFixed on r84 .\nStatus: Fixed\n. From plus...@gmail.com on February 16, 2011 14:53:00\nyara-python-1.4 and 1.4a are incompatible in certain aspects (that was my fault). The solution is updating jsunpack to work with version 1.4a.\nJust replace the line:\nmsg.append(match.strings[s])\nwith:\nmsg.append(s[2])\nI've opened an issue in the js-unpack project ( https://code.google.com/p/jsunpack-n/issues/detail?id=10 )\nStatus: Done\n. From plus...@gmail.com on April 06, 2011 13:57:55\nTry running bootstrap.sh before make and tell me if it works.\n. From dgu...@gmail.com on April 06, 2011 14:00:20\nYep, that was it. Thanks.\n. From plus...@gmail.com on April 06, 2011 14:12:09\nGreat. Have fun with YARA.\nStatus: Done\n. From plus...@gmail.com on April 25, 2011 04:06:04\nSeems that PCRE library is not installed. You should install it before building YARA. You can find PCRE here: http://www.pcre.org/\n. From plus...@gmail.com on June 27, 2011 12:05:51\nStatus: Invalid\n. From freem...@gmail.com on June 27, 2011 16:08:31\nI was able to install the package after the PCRE library was installed.\n. From beanofl...@gmail.com on July 06, 2011 21:52:21\nHaving the same problem in CentOS 5.6. Can you please provide a copy of the working exe.c file? I've been trying to add the definition from limits.h to no avail.\n. From plus...@gmail.com on August 04, 2011 04:58:25\nStatus: Fixed\n. From plus...@gmail.com on May 12, 2011 02:38:32\nAre you using a 32-bits version of Python or a 64-bits version? If using 64-bits Python try with 32-bits instead. Because yara-python is a 32-bit extension can work only with 32-bit Python, no matter if your OS is 64 bits.\nI'll try to build a 64-bits version in the future.\n. From plus...@gmail.com on August 04, 2011 04:57:42\nNow we have installers for both 32 and 64 bits versions of Python.\nStatus: Done\n. From ignacio...@gmail.com on August 05, 2011 06:46:23\nGreat. Thank you very much for the effort.\n. From plus...@gmail.com on May 19, 2011 04:35:28\nTry downloading YARA again. During a brief period of time there was a buggy build of YARA 1.5 available for download which had this bug. The version available now should be ok.\n. From NULLphoe...@gmail.com on May 19, 2011 05:12:37\nI downloaded the currently available version (yara-1.5.tar.gz), rebuilt and tested, and the problem has been corrected. Thanks!\nFWIW, the SHA1 of the broken version of the source tarball is 60cbbab7adb2589dabf580dc0d2197fead0eeae6\n. From plus...@gmail.com on May 28, 2011 14:53:02\nStatus: Done\n. From plus...@gmail.com on May 28, 2011 14:52:07\nYARA rules are agnostic about the file path they are analyzing, and should be kept that way because rules can be applied not only to files, but to data buffers and proceses as well. However you can do what you want by writing your own Python script usingthe yara-python extension.\nStatus: WontFix\nLabels: -Type-Defect Type-Enhancement\n. From plus...@gmail.com on June 29, 2011 03:17:06\nFixed in r114\nStatus: Fixed\n. From plus...@gmail.com on June 27, 2011 12:03:01\nImplemented on r113 .\nStatus: Fixed\nLabels: -Type-Defect Type-Enhancement\n. From plus...@gmail.com on June 27, 2011 12:00:59\nFixed on r113\nStatus: Fixed\n. From plus...@gmail.com on July 28, 2011 04:01:26\nIssue 28 has been merged into this issue.\n. From plus...@gmail.com on June 16, 2011 03:01:00\nFast mode stops searching for strings when they were already found. In fast mode you won't see all occurrences of the string in YARA's output when using -s, just the first one will appear. But it shouldn't change the verdict of the rule.\nPlease use our group ( http://groups.google.com/group/yara-project/ ) for this kind of questions, or just drop me an email. ;-)\nStatus: Invalid\n. From plus...@gmail.com on June 21, 2011 04:14:05\nStatus: Fixed\n. From plus...@gmail.com on August 04, 2011 04:59:26\nShould be fixed in version 1.6.\nStatus: Fixed\n. From johnmcca...@gmail.com on October 06, 2011 07:52:48\nMy apologies. I hardly ever check this email account. Just tried to install\nyara-1.6 & discovered that this issue doesn't appear to be fixed. Then I\nwent back and noticed the messages in this account. Please send any followup\nemail to john.mccash@motorolasolutions.com. I applied the same fix as\nbefore, including /usr/include/w32api/windef.h at the beginning of proc.c,\nand this allowed the compilation to complete successfully.\n     John\n. From johnmcca...@gmail.com on April 23, 2013 11:01:47\nIssue still not fixed in yara-1.7. Went back and applied same fix as before, inserting the following line at the beginning of proc.c:\ninclude \"/usr/include/w32api/windef.h\"\nCompilation then proceeds successfuly.\nJohn\n. From johnmcca...@gmail.com on April 24, 2013 09:42:10\nAnother update... I updated to the most recent version of Cygwin, and recompiled yara again yesterday. This time the above include didn't work. However explicitly doing\ndefine WIN32\nat the beginning of proc.c did. I believe this is the key define that wasn't being set before, as well. Mind you, I have no idea where it's really supposed to be getting set. This may really be a cygwin bug. Nonetheless, I wish you guys would put in some code to address it.\nThanks\nJohn\n. From adime...@gmail.com on July 11, 2013 04:58:44\nim trying to compile yara-1.7 and tried with yara-1.6 on cygwin 2.7 and im still getting this same error. i included in the proc.c file the /usr/include/w32api/windef.h\nbut it doesn't seem to work.....any ideas?\n. From plus...@gmail.com on July 02, 2013 09:48:09\nWith changes in API version 2.0 this can't be done anymore, once you have a compiled set of rules you can not add more rules due to restrictions imposed by Aho-Corasick algorithm.\nStatus: WontFix\n. From plus...@gmail.com on July 28, 2011 04:30:35\nFixed in r118\nStatus: Fixed\n. From plus...@gmail.com on July 28, 2011 04:01:26\nStatus: Duplicate\nMergedinto: 22\n. From johnmcca...@gmail.com on October 07, 2011 13:18:54\nWent back to the original rule file & tried commenting out all but one rules that were actually matching my test binary. That caused normal behavior to return as well. doesn't seem to matter which one I leave uncommented. This is a bit of a puzzler.\nJohn\n. From johnmcca...@gmail.com on October 10, 2011 12:00:15\nFor what it's worth, I went into my Ubuntu VM, and tried recompiling everything, and it appears to work correctly there, so I guess there must be something squirrely with my Cygwin environment.\nJohn\n. From plus...@gmail.com on December 17, 2011 05:34:48\nStatus: Invalid\n. From john.mcc...@motorolasolutions.com on July 20, 2012 15:11:53\nNo comment was added when this was closed... Did anybody ever validate that this can be made to work properly in cygwin with very large yara rule sets? I have over 2000, and am wondering whether this may be the cause of the issue.\nThanks\nJohn\n. From plus...@gmail.com on December 17, 2011 03:53:06\nCould you attach the MalwareRules .yara file that you're using?\n. From plus...@gmail.com on February 01, 2012 14:00:52\nStatus: Invalid\n. From rish.tha...@gmail.com on April 17, 2012 17:15:56\nHello. Ive ran into this problem again. \nThe malwarerules.yara file I was using is the one attached.\nAttachment: MalwareRules.yara\n. From rish.tha...@gmail.com on April 17, 2012 17:20:54\nNB \nI am using volatility from SVN 2.1_alpha, Distorm 3.1 Yara 1.4 and Yara 1.4a Python as per installation instructions.\n. From plus...@gmail.com on April 18, 2012 14:11:33\nline 63:  ($a nd $b)\nReplace \"nd\" for \"and\".\n. From plus...@gmail.com on December 17, 2011 05:32:25\nFixed in r132\n. From plus...@gmail.com on December 22, 2011 09:42:47\nFixed in r134\n. From plus...@gmail.com on December 22, 2011 02:06:05\nYARA uses memory-mapped files. If the scanned file is big your virtual memory usage will grow a lot, but that doesn't means that your physical memory usage should be the same, that depends on the available RAM and file size, the operating system will do it's magic to remove from physical memory the portions of the file that are not in use. \nProcess scanning is done in chunks, however the chunks can be big if the target process have big blocks of contiguous memory allocated. I think there is some room for improvement here.\n. This solution is not correct, you are calling yr_rules_scan_mem_blocks\nmultiple times, once for each section. This means that each section is\nhandled as a separate file, with their own set of matches. If you scan a\nprocess with this rule:\nrule test {\n   strings:\n       $a = \"foo\"\n       $b = \"bar\"\n   condition:\n       $a and $b\n}\n...and the strings \"foo\" and \"bar\" appear in different sections within the\nprocess address space, this rule won't match. That's not the expected\nbehavior.\nI think the way to go is replacing the loop in yr_rules_scan_mem_blocks\nfrom this:\nwhile (block != NULL)\n  {\n      .\n      .\nblock = block->next;\n}\nto this:\nblock = _yr_get_first_block(...)\nwhile (block != NULL)\n  {\n      .\n      .\nblock = _yr_get_next_block(...)\n}\nInstead of passing a linked list containing all the blocks to\nyr_rules_scan_mem_blocks, you would pass a callback function responsible of\nreturning one block at a time. _yr_get_first_block() and _yr_get_next_block\nwould call the callback to get the blocks. This way\nyr_rules_scan_mem_blocks don't need to know about how the blocks are\nretrieved, they could be in a linked list built beforehand or they could be\nread on demand. yr_rules_scan_proc would calling  yr_rules_scan_mem_blocks\npassing the appropriate callback for reading blocks from the process\naddress space.\nOn Sun, Feb 21, 2016 at 8:41 AM, Kyle Reed notifications@github.com wrote:\n\nI have a POC that I'd like some feedback on. The gist is that the section\nmaps are loaded all at once and then sections are read and processed one at\na time. I scanned notepad on Windows and the memory usage went from 90MB to\n3MB.\nSection Reader POC\nhttps://github.com/kallanreed/yara/commit/afc866ea8800e994ae5ae65eca13221ff36201f6\nIt's currently only implemented for Windows but I think the pattern will\nwork for BSD/Linux. Error handling isn't all there and the code's not\ncleaned up, but you can get a sense for where it's going.\nConcerns\n- Need to keep a context object between calls to\n  yr_rules_scan_mem_blocks.\n- It looks like Linux and BSD would also benefit from this (I do see\n  yr_malloc for sections in both) but I'm not familiar enough with the\n  platforms to be sure.\n- I didn't see any place that expected all block to be available (the\n  linked list) on the Context type in the case of a process memory scan. I'm\n  not sure if any modules do.\n- I don't know if I like returning an error code on section read\n  completion but I don't like a null check.\n@plusvic https://github.com/plusvic I'd like to know if I should\ncontinue down this path and finish this up.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/plusvic/yara/issues/33#issuecomment-186769042.\n. This is getting better, but still I have a few things to point out. Why not\nsimplifying everything and removing the section reader? I mean, we only\nneed one abstraction, the block reader.  When scanning a process the block\nreader simply fetches chunks of memory from the address space of the\nprocess. Suppose yr_rules_scan_mem_blocks  looks like this:\n\nYR_API int yr_rules_scan_mem_blocks(\n    YR_RULES* rules,\n    YR_BLOCK_ITERATOR* iterator,\n    int flags,\n    YR_CALLBACK_FUNC callback,\n    void* user_data,\n    int timeout)\nAnd YR_BLOCK_ITERATOR looks like this:\ntypedef _YR_BLOCK_ITERATOR {\nvoid* context;\nYR_MEMORY_BLOCK* first(typedef _YR_BLOCK_ITERATOR* _self);   //\nThis is just a simplification, not actual valid C code. This should be\na pointer to a function.\nYR_MEMORY_BLOCK* next(typedef _YR_BLOCK_ITERATOR* _self);    //\nThis is just a simplification, not actual valid C code. This should be\na pointer to a function.\n} YR_BLOCK_ITERATOR;\nyr_rules_scan_mem_blocks receives a pointer to a structure\nencapsulating a block iterator. The iterator structure contains a\npointer to the required context information and to functions \"first\"\nand \"next\" to retrieve the first and next blocks. \"first\" and \"next\"\nreceive and pointer to the iterator itself in order to be able to\naccess the context information. This is just like a emulating a C++\nclass in pure C.\nIn yr_rules_scan_mem_blocks you just do:\nblock = iterator->first(iterator);\nwhile (block != NULL)\n{\n```\n....\nblock = iterator->next(iterator);\n```\n}\nWhile scanning a process you simply create a new iterator with a pair\nof \"first\" and \"next\" functions that reads from the address space of\nthe process. Each block corresponds to a section.\nIt would be very useful to provide a way of iterating over the blocks\nwithout having to bring the actual chunk of data from the other\nprocess. For example:\nblock = iterator->first(iterator);\nwhile (block != NULL)\n{\n```\nvoid* block_data = iterator->fetch_block(iterator, block);\n....\nblock = iterator->next(iterator);\n```\n}\nHere YR_MEMORY_BLOCK doesn't contain a pointer to the data, you retrieve\nthe block's data by calling another function doing the actual reading. This\nway you decouple the block list iteration from the actual data reading.\nThis is useful in modules that iterate the blocks looking for a certain\naddress range, but don't need to bring in all the memory, just the range\nthey want.\nOn Mon, Feb 22, 2016 at 6:38 AM, Kyle Reed notifications@github.com wrote:\n\nPOC with a block iterator concept\nhttps://github.com/kallanreed/yara/commit/f411ef0a8c98f9080b08d1ed6864f1a61c9d6de5\n@plusvic https://github.com/plusvic This is basically the callback\nimplementation - I added a new type BLOCK_READER that tracks the\nadvancement of the pointer in the buffer linked list. This way the section\nreader and the block reader behave basically the same way from the caller\nperspective. Also, it needed to return errors so the callback sets the\nblock through an out param. I wasn't really thrilled about the void* in the\ncallback but I don't know any other polymorphic idioms in C.\nAnyway, the basic concepts are all there - should I spend the time to\nfinish it? Any major concerns about the design or names?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/plusvic/yara/issues/33#issuecomment-187022419.\n. - Part of the idea of the section reader was that it would keep the\n  process open between calls (mainly a problem for Windows I suppose).\n  Opening the process for each block would help detect a closed process\n  better than a failed memory read but it would be called a lot (hundreds to\n  thousands of times) per process. I think attaching once per scan is the\n  right approach here.\n\nYou don't need to open the process for each block, you open the process\nonce in yr_rules_scan_proc and store the handle in some struct pointed by\nthe context pointer un YR_BLOCK_ITERATOR. Each time you call to\niterator->next(iterator) the next function gets the handle from the context\npointer.\n- I'm currently pre-fetching the VM sections into a linked list. This\n  work could be deferred but it means reparsing the map file multiple times\n  in Linux and I haven't looked closely enough at the BSD code to know what\n  the call pattern would look like. Having the section list makes iteration a\n  lot more straightforward.\nYou can do the same thing here, you can pre-fetch the list of VM sections\nand store it in the context, and store a pointer to the current section\ntoo. Calls to iterator->next(iterator) will just return the current section\nand move the current pointer to the next one.\n- In the fetch_block case, does the block need to be passed in? The\n  iterator will have to know which block its pointing at so the parameter\n  seems redundant.\nYes, that's true.\n- I like the signature of fetch_block (returning the pointer) but I'm\n  left with the problem of error codes again. If the signature were int\n  fetch_block(char** data) that would imply that the returned structure be\n  freed by the caller which is not the case in for a linked list. We could\n  simply return null on failure but that hides some potential errors. In\n  the case of the deferred read, there needs to be something that frees the\n  previously allocated block data. Currently blocks are freed by the section\n  reader's read_next_section - this is what keeps memory usage down but it\n  also implies that you cannot hold onto data between calls\n  to next during iteration unless you make a copy.\nWe can use int fetch_block(char** data) this doesn't means that the caller\nis responsible for freeing the data, the caller is just providing a place\nwhere the callee is going to store a pointer to the data. The callee can\nstill be the owner of the data. The previously allocated data can be freed\nin the next call to iterator->next(iterator), just like you do now. As you\nmention, the data returned by fetch_block is only valid until the next call\nto iterator->next(iterator), that's a reasonable behaviour for an iterator,\nonce you move forward to the next element you don't have access to the\nprevious one anymore.\n- If the iteration and fetching are separated, the MEMORY_BLOCK data\n  field will be null in the case of deferred reading, not terrible but maybe\n  warrants a type without the field? No for now.\nYes, the idea is removing the \"data\" field from MEMORY_BLOCK, and accessing\nthe data by calling fetch_block\n-\nPROCESS_ITERATOR_CONTEXT to hold the attached process context, a\n   LIST_ITERATOR_CONTEXT of the sections, and the current data buffer.\nWe need a PROCESS_ITERATOR_CONTEXT for iterating over the process sections,\nbut I don't understand why you need another iterator type for this. Of\ncourse we need another iterator type for scanning files, but those will be\npretty straightforward as they consists of single block, and we don't need\nit for scanning processes.\nOn Mon, Feb 22, 2016 at 4:56 PM, Kyle Reed notifications@github.com wrote:\n\nFew thoughts\n- Part of the idea of the section reader was that it would keep the\n  process open between calls (mainly a problem for Windows I suppose).\n  Opening the process for each block would help detect a closed process\n  better than a failed memory read but it would be called a lot (hundreds to\n  thousands of times) per process. I think attaching once per scan is the\n  right approach here.\n- I'm currently pre-fetching the VM sections into a linked list. This\n  work could be deferred but it means reparsing the map file multiple times\n  in Linux and I haven't looked closely enough at the BSD code to know what\n  the call pattern would look like. Having the section list makes iteration a\n  lot more straightforward.\n- I like the API surface you proposed but I still need to get error\n  codes out if work is deferred. Is result = iterator->next(iterator,\n  &block) reasonable?\n- In the fetch_block case, does the block need to be passed in? The\n  iterator will have to know which block its pointing at so the parameter\n  seems redundant.\n- I like the signature of fetch_block (returning the pointer) but I'm\n  left with the problem of error codes again. If the signature were int\n  fetch_block(char** data) that would imply that the returned structure\n  be freed by the caller which is not the case in for a linked list. We could\n  simply return null on failure but that hides some potential errors. In\n  the case of the deferred read, there needs to be something that frees the\n  previously allocated block data. Currently blocks are freed by the section\n  reader's read_next_section - this is what keeps memory usage down but\n  it also implies that you cannot hold onto data between calls to next\n  during iteration unless you make a copy.\n- If the iteration and fetching are separated, the MEMORY_BLOCK data\n  field will be null in the case of deferred reading, not terrible but maybe\n  warrants a type without the field? No for now.\nGiven the above, we need the following types\n- BLOCK_ITERATOR more or less as you described caveat the error\n  handling\n- ## LIST_ITERATOR_CONTEXT to hold a list head and current pointers\nPROCESS_ITERATOR_CONTEXT to hold the attached process context, a\n## LIST_ITERATOR_CONTEXT of the sections, and the current data buffer.\nThe SECTION_READER and MEMORY_SECTION types would go away.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/plusvic/yara/issues/33#issuecomment-187242350.\n. 3) I didn't realize you wanted to remove the data member from\nYR_MEMORY_BLOCK. That type is used everywhere and I think that would be an\ninvasive change. Also, in order for that to work, everywhere we would\neither need to keep the context in the block as well as the read function\nor update every place a block is used to take an ITERATOR instead.\n\nYes, block->data in some modules, and in exec.c, but in all cases can be\neasily changed to use the iterator and fetch_block. I prefer keeping\neverything coherent and simple even if we have to refactor a few things.\nOn Mon, Feb 22, 2016 at 8:43 PM, Kyle Reed notifications@github.com wrote:\n\nI started a the impl of the design\nhttps://github.com/kallanreed/yara/commit/4b2a8cb36fb8388d4615360939deafb8a8851591?diff=split\nand ran into some issues. Some of which you addressed above, I added some\ncomments in the commit.\n1) re: keeping the process open while iterating - I just wanted to make\nsure we were on the same page.\n2) re: prefetching removes the need for error checking on the block\nfirst/next interface because all of the operations that could fail happen\nwhen the iterator is opened and when it's closed. Fetch could still fail.\n3) I didn't realize you wanted to remove the data member from\nYR_MEMORY_BLOCK. That type is used everywhere and I think that would be\nan invasive change. Also, in order for that to work, everywhere we would\neither need to keep the context in the block as well as the read function\nor update every place a block is used to take an ITERATOR instead.\nI was considering a second type like YR_DEFERRED_BLOCK which is like the\nnormal block without the data field. This way the existing code that\nexpects blocks could be left alone for now.\n4) I see what you mean about the LIST_ITERATOR_CONTEXT I didn't notice\nthat the reason I added it at all was to support the thing I'm removing\n(yr_process_get_memory). I'll still need implementations for\nfirst/next/fetch for a single block but the type can go away.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/plusvic/yara/issues/33#issuecomment-187344694.\n. @kallanreed sorry for not answered before, I've been very busy these days. Yes, I've found a problem that we haven't solved yet. The YR_MATCH structure has a field named data which is a pointer to the matching string and it points into a YR_MEMORY_BLOCK. Clients of libyara use the pointer assuming that it's safe to access that memory, but with the current approach that's no true anymore.\n\nWe need to solve that issue before merging these changes. I haven't thought about the best solution yet, but if you have any proposal please tell me.\n. This issue was solved. See #418.\n. From plus...@gmail.com on January 25, 2012 11:00:26\nBoth forms are prohibited for performance reasons. However I think it's a good idea to allow the user deciding whether they want to use them or not, just issuing a warning when appropriate.\nLabels: -Type-Defect Type-Enhancement\n. From plus...@gmail.com on May 23, 2013 07:08:05\nStatus: WontFix\n. From plus...@gmail.com on January 26, 2012 13:11:20\nThese rules are an example of the worst case scenario for yara. The [0-255] jump is simply too wide, they are allowed but they aren't recommended because they are really slow. If the first part of the strings would be longer, probably that wouldn't be a problem, but these [0-255] jumps are preceded by just two or three bytes. Whenever yara finds a match for those 2-3 bytes (and this should happen a lot), it has to scan the following 255 bytes trying to match the remaining part of the string, that's what make the scanning so slow. The problem is even worse with the string containing two of those jumps with just b801000000 in between, wich his a a very common pattern in executable files because is the Intel's opcode for mov eax,1. So, the problem here is not with some particular file in your dataset, the problem is the rule. \nMy recommendation in this case would be removing the first bytes of the strings including the jump, for example, the string 5657[0-255]b801000000f7d0ffc081c00100000081e889402626 is better written as b801000000f7d0ffc081c00100000081e889402626. The first two bytes don't make a lot of difference in the signature and the remaining string is long enough to be significant. With shorter strings like 505f[0-255]505e81e800764000 this approach imposes a lot more risk.\n. From plus...@gmail.com on January 31, 2012 07:27:21\nAfter testing the given rule file with some files I've noticed that in fact it was taking even longer than I would expect because of the reasons discussed above. Actually the scan was never ending even with small files. So you were right, YARA was not simply taking long, it was completely hang. The issue has been fixed in r136 .\n. From plus...@gmail.com on January 31, 2012 07:27:53\nStatus: Fixed\n. Arbitrary length jumps were introduced in YARA 2.0\n. From juliavi...@gmail.com on May 31, 2012 18:43:47\nOut of curiosity, I decided to test this just now with Yara v1.6\n(Disclaimer: I have nothing to do with Yara, I'm just a regular user.)\nI don't really understand what this bug report is saying, but here are my observations about \" at \": \n2 of ($foo*) will...\n... always be false if you only have one \"$foo1\" defined in the strings section.\n... be true if you repeat your string twice, even if your input only has a single occurrence. So, \n$foo1=\"foo\"\n$foo2=\"foo\"\n2 of ($foo*)\nwill always be true if your input file contains a single \"foo\" string. In general, I don't think anyone is ever going to be writing rules like this.\n... work correctly if you have three strings defined, and any two of them appear at least once, for each string. So,\n$foo1=\"foo\"\n$foo2=\"bar\"\n$foo3=\"buz\"\n2 of ($foo*)\nwill match \"foobar\", but not match \"foofoo\" or \"barbar\"  Is this the issue?\n. From plus...@gmail.com on August 15, 2012 09:02:30\nDuring a brief period of time a buggy version 1.5 having this problem was available to download. The issue was solved short after that this shouldn't be a problem with more recent versions.\nStatus: Done\n. From plus...@gmail.com on August 15, 2012 09:02:32\nDuring a brief period of time a buggy version 1.5 having this problem was available to download. The issue was solved short after that this shouldn't be a problem with more recent versions.\n. Fixed in commit ab2d2dfbf8d4a6e9297c00e9d57765c2c1e4e76e. Will be released in version 3.2.0.\n. From plus...@gmail.com on August 15, 2012 08:36:41\nFixed in r158 . The solution was simply to allow detection of overlapping strings. I avoided overlapping strings before just for performance reasons, but didn't take into account this side-effect.\nStatus: Fixed\n. Implemented in commit 76bfdec7491b859b50dd6827f6facbf9eca11796. Will be released in version 3.2.0.\n. From juliavi...@gmail.com on July 03, 2012 21:18:52\nI've added a patch for this, attached to issue 54 .\n. From plus...@gmail.com on August 15, 2012 08:40:18\nFixed in r154 . See issue 54 .\nStatus: Fixed\n. From vmalva...@virustotal.com on May 22, 2012 05:06:41\nThe issue is not really related to the quote character, the problem was with text strings of length 1. Fixed in r152 .\n. From plus...@gmail.com on May 22, 2012 05:10:22\nStatus: Fixed\n. From juliavi...@gmail.com on July 04, 2012 03:23:55\nJust a guess, but I think it's this code here (from \"lex.c\"):\nifndef YY_EXIT_FAILURE\ndefine YY_EXIT_FAILURE 2\nendif\nstatic void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)\n{\n        (void) fprintf( stderr, \"%s\\n\", msg );\n        exit( YY_EXIT_FAILURE );\n}\n. Fixed in commit 907c469200d3b6f2821e49bc1981689694fd3947. Will be released in version 2.0.\n. From juliavi...@gmail.com on July 04, 2012 03:18:28\nI believe that the attached patch may fix this bug (assuming that this functionality was actually intended, and it's not just an error in the documentation). This patch makes \"@\" syntactically equivalent to \"@[1]\", and it doesn't crash... And a very simple rule works correctly, but I don't know if this is actually fully working yet. \nrule offtest {\n  strings:\n    $a1 = \"foo1\"\n    $a2 = \"foo2\"\n    $b = \"bar1\"\n  condition:\n    for all of ($a*) : ( @ > @b )\n}\n$ echo bar1foo1foo2 > foobar1\n$ echo foo1bar1foo2 > foobar2\n$ yara offset_test.yara foobar1\nofftest foobar1\n$ yara offset_test.yara foobar2\nAttachment: yara_issue46.patch\n. From plus...@gmail.com on August 15, 2012 08:57:59\nPatch applied in r159 .\nStatus: Fixed\n. From plus...@gmail.com on May 11, 2012 05:53:19\nWhen you use the \"entrypoint\" keyword YARA asumes that your rule is targeted to files that do have an entry point. If the file is of a type that doesn't have an entrypoint the rule is ignored and it's result is undefined. The condition \"entrypoint >= 0\" when applied to a non-executable file is neither true or false, and the same goes for \"not entrypoint >= 0\".\nBesides, you shouldn't rely on the \"entrypoint\" keyword to determine if a files is an EXE or DLL, because the \"entrypoint\" keyword also aplies to ELF files and probably other file formats in the future that also have an entry point.\nStatus: WontFix\n. From dar...@kindlund.com on May 11, 2012 06:50:51\nPage 13 of the YARA v1.6 User's Manual.pdf (1st paragraph):\n\"The presence of the entrypoint variable in a rule implies that only PE or ELF files can satisfy that rule. If the file is not a PE or ELF any rule using this variable evaluates to _FALSE_.\"\nEither the documentation needs to be fixed, or this bug is legitimate; it can't be both.  Do you see my point?\nIf you're going to silently fail built-in functions for unsupported file types, that's fine, but at least update the documentation to reflect that nuance.\nFurthermore, it would be exceptionally helpful, if YARA included some sort of \"verbose\" options, where it would spit out warnings, everytime a built-in function failed silently (because it encountered an unsupported file type).\nAs it stands, using these built-in functions is proving difficult to debug at times, because YARA doesn't provide a lot of information about the steps it is performing, during individual rule evaluation.\nLet me know if this makes sense.  Thanks for your time.\n. From plus...@gmail.com on May 11, 2012 15:47:46\nYou're right, the documentation should be fixed because it doesn't reflect the real behavior. Probably it should say \"If the file is not a PE or ELF any rule using this variable is unsatisfiable\". \nI think in this case it's better to think in terms of unsatisfiability, because we keep conceptual coherence. For a text file is not true that it's entrypoint is greater than zero, but the opposite is not true neither. The entry point concept simply doesn't make sense for a text file.\nRegarding a \"verbose\" mode, it makes a lot of sense. It's a good idea to provide some feedback in those cases where keywords like \"entrypoint\" or \"filesize\" are used in the wrong context.\n. From dar...@kindlund.com on May 11, 2012 17:04:18\nOkay, that's fine; I understand if you'd rather update the documentation and provide a higher verbosity level.  In that case, can you change the WontFix status of this issue, then?  Thanks!\n. From plus...@gmail.com on May 11, 2012 05:25:34\nEven if this feature is implemented it won't apply to version 1.6 and lower. I mean, in version 1.7 you will be able to ignore new syntax included in version 1.8, but version 1.6 and lower will fail anyway.\nCould you explain a little more your real-life situation where this feature is needed? Why not keeping your YARA version up to date?\n. From dar...@kindlund.com on May 11, 2012 07:09:37\nSure, I'd be happy to provide more detail:\nAssume you have 1,000's of \"systems\" all with YARA installed.  Do you really think its realistic that you should have to \"upgrade\" those instances of YARA, simultaneously?  If you have a directory containing your \"master YARA rule list\" that is being replicated out to each of these systems, before you upgrade any of those rules to leverage new features, you have to make sure that all versions of YARA across all 1000 systems are updated, accordingly.  Currently, to get around this, you'd have to externally maintain different \"versions\" of the \"master list\" for each version of YARA, which makes overall rule management more painful than it needs to be.\nYes, if v1.7 started implementing this feature, you would still have to deal with this painful setup at least until all your systems are upgraded to v1.7.  But, once that happens, when v1.8 and later is released, the process becomes much more manageable.\nLastly, if you're accepting YARA rules for a third-party, having an option to require min_version on each rule makes it easier to perform initial rule validation back to that third-party.  For example, if you're running YARA v1.4 and the third-party uploads v1.6 YARA rules, we can have YARA output an explicit \"unsupported version\" error message, rather than vague syntax errors, which we then have to decipher and translate as \"unsupported version\", accordingly.\nDoes this make sense?\n. From dar...@kindlund.com on May 11, 2012 07:13:02\nTo clarify further, if YARA v1.7 implemented the \"min_version\" meta tag, you could then provide a command-line options like:\n--enforce_version\nIf (--enforce_version) were present, YARA would explicitly generate errors if it encountered any rule with min_version higher than its current version.\nIf (--enforce_version) were NOT present, then YARA would silently ignore any rules where min_version is higher than its current version.\n. From plus...@gmail.com on May 11, 2012 16:05:50\nOk, I see your point. But I think, I would prefer some kind of preprocesor directives in the style of the C language. For example:\nif yara_version >= 1.7\nsome rules here using new features available in 1.7\nendif\nThat would be more flexible. What do you think?\n. From dar...@kindlund.com on May 11, 2012 17:08:49\nSure, that makes complete sense.  Thanks for your time!\n. From plus...@gmail.com on August 15, 2012 09:11:59\nThis will be solved with a C-style preprocessor with conditionals. See issue 61 .\n. From plus...@gmail.com on August 15, 2012 09:12:16\nStatus: WontFix\n. From Maarten....@gmail.com on May 16, 2012 05:03:34\nSorry issue type should have been \"Enhancement\"\n. From juliavi...@gmail.com on July 03, 2012 22:59:29\nYou might be curious to know... I've been reading through the parser stuff in YARA, and it appears that all integer values are of \"size_t\" type internally. (\"unsigned long\" most of the time.) So just sticking a (+|-)? onto the front of {digit}+ in lex.l doesn't quite fix this, unless you're ok with 'weight = -1' being the same as 'weight = 4294967295'. And I don't want to mess around with too much of YARA's internals until I've understood them yet...\n. Fixed in 5b117b6a83429bcaca15a97bcb4292ac58185ca0\n. From plus...@gmail.com on May 22, 2012 03:17:35\nFixed in r151\nStatus: Fixed\n. From golgotr...@gmail.com on May 22, 2012 05:16:44\nThank you for the very quick fix of the problem :))\n. From Veno...@gmail.com on July 02, 2013 06:14:49\nGood idea ...\n. From plus...@gmail.com on July 02, 2013 09:33:48\nImplemented in r212\nStatus: Fixed\n. From juliavi...@gmail.com on May 31, 2012 17:45:34\n[Disclaimer: I'm not actually involved with the Yara project at all; I'm just a user at present, who has been writing a lot of rules.] \nI have a rather long wishlist of future features I would like for Yara to have. (Some proposals I would like to present soon...) One of the big ones are macros or function definitions. But....\nOne of the nice things about Yara is that it is not too powerful. It's syntax expresses a regular language, which can be evaluated in polynomial time. Introducing loops or recursion would make it possible to write rules which take an almost infinite amount of time to evaluate. Several of the big-name organizations using Yara (VirusTotal, FireEye, etc.) allow users to upload their own Yara rules, to be evaluated on these detection platforms. Being able to upload a Yara rule which pegs the CPU at 100% and uses Gigs and Gigs of memory would be bad.\nAt the same time, having a non-recursive substitution syntax for use in the conditions would greatly aid in maintainability. The C pre-processor is probably a good example of this; it can be evaluated in polynomial time. (I think NASM's macro syntax is another good example, but it's been a while since I thought about it.)\nSo, the ideas I had were either:\n1. Allow (earlier) rule definitions to take an argument. Similar to the global external value you can pass from the command-line... only local. The rule would need to be (re-)evaluated at time of use in the later rule, of course.\n2. Each rule may have an additional section for constants/macro statements. Something like:\nrule example {\n  macros:\n    a($$) = \"uint32($$)|uint32(0)\"\n    b = \"$c at 1234\"\n    number_of_sections = \"uint16(uint32(0x3c)+6)\"\n  strings:\n    $c = \"something\"\n  condition:\n    (%a(42) or %a(56234) or %b)\n    and \n    (number_of_sections == 6)\n}\n... or whatever syntax would be good, use your imagination.\n1. A top-level 'function' keyword, like 'rule' (as proposed). The thing that must be avoided is constructs like these:\nfunction dontdothis {\n   return:\n      dontdothis()\n}\n...or...\nfunction foo { return: bar() }\nfunction bar { return: foo() }\n1. Or something else even more simple yet clever... but not becoming common lisp. (I'm thinking of lazy-evaluation, functions, without side-effects; but I need to do some more research on this stuff.)\n. From juliavi...@gmail.com on May 31, 2012 18:07:07\nOh yeah, I was going to say...\n1. An optimization I've been thinking about, can also be used like a function. Currently, as far as I know, all rules are always evaluated. It would be nice, to skip over some rules, if other rules evaluate to false (don't alert). So you could write a set of fast-path rules, and slow-path rules, where the fast rules are quick and easy, and must always be true for some other rule to be true, but alone, by themselves, will alert way way too much. (False positives.) \nEXE scanning is a good example. You can write a rule which tests for a \"MZ\" and \"PE\\0\\0\" at some offset, very quickly. But if you then had several complicated regular expressions, those would execute slowly, and you wouldn't need to evaluate them at all, if there wasn't already a \"MZ\" and \"PE\\0\\0\". \nAs I currently understand, Yara will always evaluate every statement. And What I'd like is to be able to short-circut some of the tests. I don't think just putting \"rulename and $re\" in the condition section does this.\nA side-effect of this, is that you can use earlier rules like functions which return true or false. Well, actually you can do that now, but I'd rather not have Yara always evaluate everything all the time.\nprivate rule example {\n   strings:\n      $a = \"MZ\"\n   condition:\n      $a at 0\n}\nrule slowness {\n  strings:\n      $a = /aa_b_a*/\n  condition:\n    example and $a\n} \n// I don't want this rule to run, if \"example\" doesn't alert\n. From plus...@gmail.com on June 02, 2012 10:27:40\nIt's great to see in-depth discussions about Yara :-)\nI've been thinking for a while about implementing a preprocessor in Yara, just like the C preprocesor. That would give a lot of flexibility keeping the syntax clean at the same time. I don't really like the idea of including functions or any complex construct in Yara, I prefer to keep it simple.\nRegarding short-circuit evaluation, Yara does short-circuit evaluation of expressions. If the condition is $a and (...whatever...)  the \"whatever\" expression is not evaluated if $a is false, BUT.... that doesn't mean that if the expression is $a and $b, and $b is an slow regular expression, the scanning process will be faster if $a is not present. Keep in mind that Yara scan through the file searching for ALL the strings, and then, after knowing which strings are in the file an which not, it evaluates all rule conditions. It would be pretty slow to search for every string separately as part of the condition evaluation.\n. From plus...@gmail.com on August 15, 2012 09:10:09\nThis will be solved with macros. See issue 61 .\nStatus: WontFix\n. From juliavi...@gmail.com on July 03, 2012 21:17:59\nI've added support for both a bitwise xor operator, and... a modular division operator (see issue 43 ). I've only done limited testing so far, but the modifications seem to work. I've attached a patch (against svn r153 ) which will add these two operators. You will use xor and mod exactly as you would expect to, 'x^y' and 'x%y'.\nPerhaps these changes will be make 'official'...\nAttachment: yara_xor_mod_ops.patch\n. From plus...@gmail.com on July 04, 2012 02:01:15\nHi Julia, your patch is great, I've included it in r154 . Just missed specifying the correct precedence for operators (see r155 )\nStatus: Fixed\n. From juliavi...@gmail.com on June 25, 2012 18:21:17\nJust out of curiosity, I took a look at this. It seems that this is the problem:\n261                 while (mask[m] != MASK_OR && mask[m] != MASK_OR_END)\n262                 {\n263                     if ((buffer[tmp_b] & mask[m]) != pattern[p])\n264                     {\n265                         match = FALSE;\n266                     }\n267                     \n268                     if (match)\n269                     {\n270                         match_length++;\n271                     }\n272                 \n273                     tmp_b++;\n274                     m++;\n275                     p++;                    \n276                 }\nThere's no check that tmp_b is within the bounds of buffer[]. Most of the time, there's just more of the input file after this in memory, so it's not really a problem... until you reach the end of the file... AND... the file is exactly a multiple of your system's PAGE_SIZE in length, so that there's an unallocated page of memory immediately after the file (the buffer). The \"YARACRASH\" file is 278528 bytes in length, which is 17*16384, so any memory allocations which are powers of two up to 2^14, are going to end exactly on the end of this file. There won't be a bunch of NULLs after it in memory. (Which, again, mostly won't cause a crash, it's just like the input file had a bunch of extra zeros at the end...)\nAnyway, breaking the loop if (tmp_b < (size_t) buffer_size) seems to be the fix, and I tested this on just this one sample, and there's no more crash, but I don't know the full consequences of this change. I've uploaded a patch, apparently now called Issue 56 .\nThese are my notes:\nProgram received signal EXC_BAD_ACCESS, Could not access memory.\nReason: KERN_INVALID_ADDRESS at address: 0x00000001000c4000\n0x000000010000afc7 in hex_match (buffer=0x1000c3ffe \", buffer_size=2, pattern=0x1001002a0 \"< iiI IfFrRaAmMeE\", pattern_length=17, mask=0x1001002d0 \"??????????????????????????????????????\") at scan.c:263\n263                         if ((buffer[tmp_b] & mask[m]) != pattern[p])\n(gdb) print m\n$9 = 3\n(gdb) print p\n$10 = 2\n(gdb) print tmp_b\n$11 = 2\n(gdb) print buffer\n$16 = (unsigned char *) 0x1000c3ffe \"\n(gdb) x/16x 0x1000c3ff0\n0x1000c3ff0:    0xfd    0x45    0x9f    0xea    0x24    0x11    0xa9    0x3d\n0x1000c3ff8:    0x89    0xf8    0x18    0x0c    0x8c    0x19    0x3c    0x6d\n(gdb) x/16x buffer\n0x1000c3ffe:    0x3c    0x6d    Cannot access memory at address 0x1000c4000\nhexdump -C YARACRASHER\n00000000  4d 5a 90 00 03 00 00 00  04 00 00 00 ff ff 00 00  |MZ..............|\n[...]\n00043ff0  fd 45 9f ea 24 11 a9 3d  89 f8 18 0c 8c 19 3c 6d  |.E..$..=......<m|\n00044000\n. From juliavi...@gmail.com on June 25, 2012 18:25:56\nOh, and I was also going to say... If you're at all like me, and hate using rapidshare, this was the rule from \"YARACRASH.ZIP\":\nrule yara_crash\n{\n    strings: \n            $a = {3C ( 20 69 |69 | 49 | 20 49) (66 | 46) (72 | 52) (61 | 41) (6D | 4D) (65 | 45)}  //\"<iframe\" nocase\n    condition:\n        $a \n}\nAnd the EXE file... Really is malware: https://www.virustotal.com/file/efdc6f5cb4f867e97f4b2fe437afef8a602455ea756ca67bdea5a3fb9734dd44/analysis/ ... But, as I said, I believe that the bug would be reproducible with any file that is exactly 278528 bytes long.\n. From plus...@gmail.com on June 26, 2012 06:25:50\nThe bug was exactly what Julia described. Fixed in r153 .\n. From plus...@gmail.com on June 26, 2012 06:26:01\nStatus: Fixed\n. From juliavi...@gmail.com on June 26, 2012 17:22:58\nSo... I'm not familiar (yet) with the logic of this function, but should there also be a check for:\n(p < (size_t) pattern_length)\naround the same context as: \np++;\nor is mask[m] always guaranteed to be smaller than pattern[p] ?\n. From plus...@gmail.com on June 27, 2012 00:41:34\npattern and mask are related, they are not necessarily the same length, but the function should not reach the end of mask without reaching the end of pattern at the same time.\n. From golgotr...@gmail.com on June 27, 2012 22:55:04\nThank you very much for the bugfix! :DDDD\n. From plus...@gmail.com on June 26, 2012 06:23:34\nGreat Julia! You've done a good job hunting down this bug. I've included the patch in r153\nStatus: Fixed\n. From plus...@gmail.com on July 03, 2012 09:52:43\nBefore building yara-python extension you need to build and install libyara. You should download yara-1.6.tar.gz and run ./configure && make && make install.\nStatus: Invalid\n. From plus...@gmail.com on August 01, 2012 12:59:49\nYara is a name from a cuban town and also a well-known movie theater in Havana ( http://www.pixelmono.com/?p=391 ), it's an aboriginal name. I choose it because it could also be interpreted as \"\"YARA: Another Recursive Acronym\" or \"Yet Another Ridiculous Acronym\". That's the story.\nStatus: Invalid\nLabels: OpSys-Linux\n. From DBGladia...@gmail.com on August 01, 2012 17:16:51\nThank you for the answer!\n. From golgotr...@gmail.com on August 13, 2012 05:49:42\nHi had the same problem, it will compile if you remove the inline directive from the functions in hash.h and hash.c\nBut I recommend you that change the compiler the current version of mingw for 64bits, works very well, is free and I get better performance than with the VS2008 build.\n. From Leftzh...@gmail.com on October 03, 2012 01:32:45\nremove \u201cinline\u201d works\uff01\n. From plus...@gmail.com on April 04, 2013 07:26:07\nStatus: Fixed\n. From plus...@gmail.com on August 14, 2012 09:59:28\nThe problem was occurring with any kind of strings, not only with regular expressions. It was because the second rule doesn't had the \"strings\" section and strings defined in the previous rule were being used. Fixed in r157 .\nStatus: Fixed\n. From adime...@gmail.com on July 11, 2013 04:37:58\ni get the same error trying to compile yara-1.7\n. I'm closing this issue because it's a bit old and I don't plan to support YARA on Cygwin. If anyone volunteer to make YARA compatible with Cygwin I'm open to merge any patch submitted.\n. From rsimmo...@gmail.com on May 01, 2013 10:33:49\nThis is not a defect in Yara, but rather user error in your OS's package management.\nI'm not sure if this is the same under OpenBSD, but in Ubuntu, you must also install the \"libpcre3-dev\" package in addition to the libraries.  This contains the header files that the configure script is looking for to verify if the libraries are installed.  In this case, it is looking for /usr/include/pcre.h which is part of the libpcre3-dev package not the main libpcre3 package (in Ubuntu).\nThings might be slightly different in OpenBSD.  You may need to make sure that some setting is made in the port to make sure that it installs header files in /usr/include or wherever it keeps those header files.\n. From phatbuck...@gmail.com on May 01, 2013 21:47:54\nYou mean this header file?\n$ pkg_info -L pcre |grep 'pcre.h$'\n/usr/local/include/pcre.h\n$ ls -l /usr/local/include/pcre.h\n-r--r--r--  1 root  bin  23188 Aug  3  2012 /usr/local/include/pcre.h\nSeems kosher.\nOpenBSD does not separate development parts from main parts in their packages. It tends to avoid the issues referred to in comment #1.\n. From phatbuck...@gmail.com on May 02, 2013 01:42:13\nTrying again using yara 1.7 on OpenBSD 5.2 i386.\n$ ./configure\n...\nchecking whether the g++ linker (/usr/bin/ld) supports shared libraries... yes\nchecking dynamic linker characteristics... openbsd5.2 ld.so\nchecking how to hardcode library paths into programs... immediate\nchecking dependency style of g++... gcc3\nchecking for main in -lpcre... no\nconfigure: error: please install PCRE library\n(Exits status 1).\n$ ./configure --with-re2\n...\nchecking whether the g++ linker (/usr/bin/ld) supports shared libraries... yes\nchecking dynamic linker characteristics... openbsd5.2 ld.so\nchecking how to hardcode library paths into programs... immediate\nchecking dependency style of g++... gcc3\nchecking for main in -lre2... no\nconfigure: error: please install RE2 library\n(Exits status 1).\n$ ldconfig -r |grep re2\n        231:-lre2.0.0 => /usr/local/lib/libre2.so.0.0.0\n$ ls -l /usr/local/include/re2/\ntotal 128\n-rw-r--r--  1 root  wheel   3573 May  1 22:48 filtered_re2.h\n-rw-r--r--  1 root  wheel  33985 May  1 22:48 re2.h\n-rw-r--r--  1 root  wheel   1688 May  1 22:48 set.h\n-rw-r--r--  1 root  wheel   5851 May  1 22:48 stringpiece.h\n-rw-r--r--  1 root  wheel  16675 May  1 22:48 variadic_function.h\n$ CPPFLAGS=\"-I /usr/local/include/re2\" LDFLAGS=\"-L /usr/local/lib\" ./configure --with-re2\n...\nchecking if g++ supports -c -o file.o... (cached) yes\nchecking whether the g++ linker (/usr/bin/ld) supports shared libraries... yes\nchecking dynamic linker characteristics... openbsd5.2 ld.so\nchecking how to hardcode library paths into programs... immediate\nchecking dependency style of g++... gcc3\nchecking for main in -lre2... no\nconfigure: error: please install RE2 library\n(Exits status 1).\nIn config.log:\n...\nconfigure:15466: checking for main in -lre2\nconfigure:15485: g++ -o conftest -g -O2 -I/usr/local/include/re2 -L/usr/local/lib conftest.cpp -lre2   >&5\n/usr/local/lib/libre2.so: warning: sprintf() is often misused, please use snprintf()\n/usr/local/lib/libre2.so: undefined reference to pthread_rwlock_rdlock'\n/usr/local/lib/libre2.so: undefined reference topthread_rwlock_init'\n/usr/local/lib/libre2.so: undefined reference to pthread_rwlock_destroy'\n/usr/local/lib/libre2.so: undefined reference topthread_rwlock_unlock'\n/usr/local/lib/libre2.so: undefined reference to pthread_rwlock_wrlock'\n/usr/local/lib/libre2.so: undefined reference topthread_mutex_unlock'\n/usr/local/lib/libre2.so: undefined reference to `pthread_mutex_lock'\ncollect2: ld returned 1 exit status\nconfigure:15485: $? = 1\n$ file /usr/local/lib/libre2.so.0.0.0\n/usr/local/lib/libre2.so.0.0.0: ELF 32-bit LSB shared object, Intel 80386, version 1, for OpenBSD, dynamically linked, not stripped\n$ objdump -t /usr/local/lib/libre2.so.0.0.0 |grep -i pthread\n00000000         UND  00000000 pthread_rwlock_rdlock\n00000000         UND  00000000 pthread_rwlock_init\n00000000  w      UND  00000000 pthread_cancel\n00000000         UND  00000000 pthread_rwlock_destroy\n00000000         UND  00000000 pthread_rwlock_unlock\n00000000         UND  00000000 pthread_rwlock_wrlock\n00000000         UND  00000000 pthread_mutex_unlock\n00000000         UND  00000000 pthread_mutex_lock\nIssue with RE2 library linking against pthread? I don't really understand from here.\n. From rkeq0...@gmail.com on June 27, 2013 09:59:01\nHad the same issue then ran this command:\n sudo apt-get install libpcre3 libpcre3-dev\nMust have been missing a lib.  \nRan ./configure and it worked.\n. From info.var...@gmail.com on October 08, 2013 14:59:32\nFor some reason the below flags are not set correctly. Export before calling configure should work.\n$> export LDFLAGS=\"-L/usr/local/lib\"\n$> export CFLAGS=-I/usr/local/include\n$> ./configure\n. From pierrel...@gmail.com on November 28, 2012 15:12:57\nRemove the inline for hash and hash_update functions.\n. From plus...@gmail.com on April 04, 2013 07:26:31\nStatus: Fixed\n. From golgotr...@gmail.com on October 18, 2012 05:27:42\nI forget to say that the password for the mediafire samples is \"infected\" and please don't execute it because are malware files. :p\n. Fixed long ago.. From golgotr...@gmail.com on January 14, 2013 07:01:43\nI tested it with the latest version and don't get the seg fault.\n. From juliavi...@gmail.com on February 10, 2013 06:58:39\nThis looks very similar to Issue 55 ... The PAGE_SIZE boundary of 4096 is a pretty big clue... I think this is the block of code where the crash is happening in v1.7 (see below). So, when it gets to here, there will be a match on the byte at 4093, and then.. I guess it'll attempt to read 4094, 4095, 4096, and 4097, because the OR mask is four bytes long. (I'm just kinda guessing at the moment, I haven't actually run this test yet...)\n254             while (mask[m] != MASK_OR_END)\n255             {\n256                 tmp_b = b;\n...\n259                 m++;\n260                 \n261                 while (tmp_b < (size_t) buffer_size && \n262                        mask[m] != MASK_OR && \n263                        mask[m] != MASK_OR_END)\n264                 {\n265                     if ((buffer[tmp_b] & mask[m]) != pattern[p])\n266                     {\n...\n268                     }\netc...                \n275                     tmp_b++;\n276                     m++;\n277                     p++;                    \n278                 }\n. This seems to be the same than issue 55 and was solved in commit 28c731583ed0e0b0c3331ed0aaf9338bb3f92947\n. From hrvoje.s...@gmail.com on January 21, 2013 08:21:21\nperhapse more exact case to help reproduce bug/problem\nmkdir -p testcase/lot-of-files\nfor i in {1..50000}; do touch testcase/lot-of-files/empty_${i} ;done\nmkdir -p testcase/lot-of-files/a-malware-dir\necho \"Exploit\" > testcase/lot-of-files/a-malware-dir/sample.malware\ncat simple.yar\nprivate rule SizeLimit250k\n{\n    condition:\n        filesize < 250KB\n}\nrule exploit_string\n{\n    strings:\n        $exploit                    = \"Exploit\"\n    condition:\n        1 of them and SizeLimit250k\n}\nstrace -e open -o dbg ./yara -r -f simple.yar testcase/\ngrep malware dbg\nopen(\"testcase//lot-of-files/a-malware-dir\", O_RDONLY|O_NONBLOCK|O_DIRECTORY|O_CLOEXEC) = -1 EMFILE (Too many open files)\nstrace -e open -o dbg2 ./yara -r -f simple.yar testcase/lot-of-files/a-malware-dir/\nexploit_string testcase/lot-of-files/a-malware-dir//sample.malware\ngrep malware dbg2\nopen(\"testcase/lot-of-files/a-malware-dir/\", O_RDONLY|O_NONBLOCK|O_DIRECTORY|O_CLOEXEC) = 3\nopen(\"testcase/lot-of-files/a-malware-dir//sample.malware\", O_RDONLY) = 4\n./yara -v\nyara 1.6 (rev:129)\nuname -a\nLinux mybox 3.2.6custom #1 SMP Fri Feb 17 13:56:56 CST 2012 x86_64 GNU/Linux\n. From hrvoje.s...@gmail.com on January 21, 2013 08:56:09\nI believe I found problem and fixed it; seems like 0 sized files are not closed. Here is simple patch that fixed problem described above\nyara/yara-1.6/libyara# git diff\ndiff --git a/filemap.c b/filemap.c\nindex 969d884..c044a98 100644\n--- a/filemap.c\n+++ b/filemap.c\n@@ -113,6 +113,7 @@ int map_file(const char* file_path, MAPPED_FILE* pmapped_file)\nif (pmapped_file->size == 0)\n    {\n-               close(pmapped_file->file);\n              return ERROR_ZERO_LENGTH_FILE;\n      }\n. From plus...@gmail.com on July 02, 2013 09:42:53\nFixed in r145\nStatus: Fixed\n. From juliavi...@gmail.com on February 10, 2013 08:05:44\nTaking a quick look at the source code, it's as I suspected... yr_scan_file() basically mmap()'s the entire file first, and then begins to evaluate the rules...\nSpecifically, first it does this:\npmapped_file->size = fstat.st_size;\npmapped_file->data = (unsigned char*) mmap(0, pmapped_file->size, PROT_READ, MAP_PRIVATE, pmapped_file->file, 0);\nAnd then, if that worked OK, it does this:\nresult = yr_scan_mem(mfile.data, mfile.size, context, callback, user_data);             \nyr_scan_mem_blocks() ...\n   [ stuff... ]\n                    /* initialize global rules flag for all namespaces /\n   [ stuff... ]\n                   / evaluate global rules */\n   [ etc. ]\nAnd then the rule actually gets checked in eval.c (or something like that)...\ncase TERM_TYPE_FILESIZE:\n                return context->file_size;\n... And it's kinda too late to check at this point, the file has already been read. (Or at least read as much as you OS Kernel is willing to buffer in advance, which is actually quite a lot.)\n. From plus...@gmail.com on May 23, 2013 07:18:46\nYARA scans the file first looking for all the strings of every rule, and only after the scanning phase has concluded, it proceeds to evaluate the rule conditions. It would be great if YARA were smart enough to realize that in some cases the file doesn't need to be scanned at all, but detecting those situations is not trivial.\nStatus: WontFix\n. From cho...@gmail.com on January 30, 2013 20:07:47\nIt builds OK on Ubuntu 12.04 64bit, which is odd to me since the automake version is still 1.11. See attachment.\nAttachment: yara-built-12_04.txt\n. From dlbenn...@gmail.com on February 06, 2013 18:09:19\nI have the same issue. Exactly. Ubuntu 11.04.\n. From dlbenn...@gmail.com on February 06, 2013 18:22:56\nAlso, Revision 163 builds fine (with bootstrap.sh). But NOT the latest.. (1.7) arrgghh\n. From dlbenn...@gmail.com on February 06, 2013 18:28:10\nAlso, trying to do a ./configure, then ./bootstrap.sh with Yara 1.7 produces the error \"cd: 23 can't cd to libyara\" (the folder exists). Weird! (of course make and make install fail after that).\n. From dlbenn...@gmail.com on February 20, 2013 15:25:28\nNudge.. anything? anyone?\n. From andreas....@gmail.com on February 24, 2013 05:10:56\nSame problem on Apple OSX 10.7. with MacPorts, automake 1.13.1.\nRunning \"autoreconf\" solved this issue for me.\n. From dlbenn...@gmail.com on February 26, 2013 15:25:04\nhttp://rants.effu.se/2013/01/Installing-Latest-Yara-That-Works-With-Automake-1.11 Will build 1.62 still no joy with 1.7.\n. From dlbenn...@gmail.com on February 27, 2013 17:35:06\nOf course, everything works fine with 11.x or higher.\n. From cho...@gmail.com on March 05, 2013 20:24:06\nPossibly relevant (since I'm having similar errors on OSX when trying to run autoreconfig) http://www.flameeyes.eu/autotools-mythbuster/forwardporting/autoconf.html\n. From nathanie...@gmail.com on March 17, 2013 16:52:28\nI have managed to get this to compile successfully under ubuntu 12.10.\nnathaniel@nxps:~/src/yara-project-read-only$ uname -a\nLinux nxps 3.5.0-17-generic #28-Ubuntu SMP Tue Oct 9 19:31:23 UTC 2012 x86_64 x86_64 x86_64 GNU/Linux\nI installed automake1.9 via apt-get and removed the older version.\nChecked out latest SVN:\nnathaniel@nxps:~/src$ svn checkout http://yara-project.googlecode.com/svn/trunk/ yara-project-read-only \nA    yara-project-read-only/force.cpp\nRan ./configure:\nnathaniel@nxps:~/src/yara-project-read-only$ ./configure \nchecking build system type... x86_64-unknown-linux-gnu\nchecking host system type... x86_64-unknown-linux-gnu\nThen ran bootstrap.sh - NOTE THIS STILL ERRORS.\nnathaniel@nxps:~/src/yara-project-read-only$ ./bootstrap.sh \nmkdir: cannot create directory m4': File exists\nmkdir: cannot create directorylibyara/m4': File exists\n./bootstrap.sh: 16: ./bootstrap.sh: libtoolize: not found\n./bootstrap.sh: 11: hash: libtoolize: not found\nCan't exec \"libtoolize\": No such file or directory at /usr/bin/autoreconf line 195.\nUse of uninitialized value in pattern match (m//) at /usr/bin/autoreconf line 195.\nautoreconf: Entering directory `.'\nautoreconf: configure.ac: not using Gettext\nautoreconf: running: aclocal --force -I m4\nautoreconf: configure.ac: tracing\nautoreconf: running: libtoolize --copy --force\nCan't exec \"libtoolize\": No such file or directory at /usr/share/autoconf/Autom4te/FileUtils.pm line 345,  line 6.\nautoreconf: failed to run libtoolize: No such file or directory\nautoreconf: libtoolize is needed because this package uses Libtool\n./bootstrap.sh: 23: cd: can't cd to libyara\nHowever, running aclocal, then autoconf, followed by running make, gives you a working build.\nnathaniel@nxps:~/src/yara-project-read-only$ file yara\nyara: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked (uses shared libs), for GNU/Linux 2.6.24, BuildID[sha1]=0xd0599a714a9e26ea9f2633daeef8f8bda6ef1669, not stripped\nnathaniel@nxps:~/src/yara-project-read-only$ ./yara\nusage:  yara [OPTION]... [RULEFILE]... FILE | PID\noptions:\n  -t                   print rules tagged as  and ignore the rest. Can be used more than once.\n  -i            print rules named  and ignore the rest. Can be used more than once.\n  -n                        print only not satisfied rules (negate).\n  -g                        print tags.\n  -m                        print metadata.\n  -s                        print matching strings.\n  -l                abort scanning after a  of rules matched.\n  -d =   define external variable.\n  -r                        recursively search directories.\n  -f                        fast matching mode.\n  -v                        show version information.\nReport bugs to: vmalvarez@virustotal.com\nnathaniel@nxps:~/src/yara-project-read-only$ ./yara -v\nyara 1.7 (rev:164)\n. From nathanie...@gmail.com on March 17, 2013 17:01:14\nInstalling libtool then generates the 'no-extra-portability' error - removing it removes this (but adds other errors).\nTo build yara-python, you'll have to repeat the similar steps for libyara, then adjust the Makefile for a valid MKDIR_P (mkdir -p), then sudo make install, then build yarapython as normal.\n. From rsimmo...@gmail.com on May 01, 2013 10:56:46\nAfter installing automake, autoconf, and libtool under Ubuntu 13.04, I ran ./bootstrap.sh then ./configure\nAfter the above, I was able to build it with \"make\" \"sudo make install\" just fine.\n. From ch...@smtps.net on May 21, 2013 13:38:11\nBuild also fails on CentOS 5.9.\n. From plus...@gmail.com on May 23, 2013 06:43:27\nI've fixed this issue, at least it works fine in Ubuntu 11.04 and 12.04. Anyone with a different operating system who wants to test it is welcomed.\nsvn co https://yara-project.googlecode.com/svn/branches/yara-1.x cd yara-1.x\n./bootstrap.sh\n./configure\nmake\nPlease notice that these changes are in /svn/branches/yara-1.x, not in /svn/trunk.\n. From ch...@smtps.net on May 23, 2013 13:24:16\nConfirmed the steps in #14 (copied exactly w/ cut & paste) work on Ubuntu 10.04 (YAY!!!). Result:\n$ ./yara -v\nyara 1.7 (rev:179)\nUnfortunately on CentOS 5.9 the bootstrap.sh script fails to produce a configure script:\n$ ./bootstrap.sh \nYou should add the contents of /usr/share/aclocal/libtool.m4' toaclocal.m4'.\nconfigure.ac: installing ./install-sh'\nregex/Makefile.am: installing./depcomp'\naclocal: couldn't open directory m4': No such file or directory\nautoreconf: aclocal failed with exit status: 1\nRemember to addAC_PROG_LIBTOOL' to configure.ac'.\nYou should add the contents of/usr/share/aclocal/libtool.m4' to aclocal.m4'.\nconfigure.ac: installing./install-sh'\nconfigure.ac: installing ./missing'\nMakefile.am: installing./INSTALL'\nMakefile.am: installing ./depcomp'\naclocal: couldn't open directorym4': No such file or directory\nautoreconf: aclocal failed with exit status: 1\n. From plus...@gmail.com on May 24, 2013 02:33:23\nNow it works on CentOS 5.9 as well\n. From plus...@gmail.com on July 02, 2013 09:36:59\nStatus: Fixed\n. From killbug2...@gmail.com on February 04, 2013 04:39:20\nsorry,want to build a version  with /MT\n. From brian@thebaskins.com on July 22, 2013 12:19:03\nTo add onto this issue, YARA appears to be hitting on an ASCII match, but printing the string results as unicode.\ntest file (in ASCII):\nTESTING\nONETWO\nYARATHREE\nRule1:\nrule test\n{\n strings:\n   $s0 = \"test\" nocase ascii wide\n   $s1 = \"yara\" nocase ascii wide\ncondition:\n   $s0 and $s1\n}\nExecution:\nyara -s rule.yara test.txt\ntest test.txt\n0x11:$s1: YR\n0x0:$s0: TS\nChange rule to remove \"wide\" from strings:\nRule1:\nrule test\n{\n strings:\n   $s0 = \"test\" nocase ascii \n   $s1 = \"yara\" nocase ascii \ncondition:\n   $s0 and $s1\n}\nExecution:\nyara -s rule.yara test.txt\ntest test.txt\n0x11:$s1: YARA\n0x0:$s0: TEST\n. Fixed in commit 08913dbfb9a62c08c0596ad2a1661006b135ae0d\n. From plus...@gmail.com on March 26, 2013 02:33:22\nCould you copy&paste here the output of sudo make install ?\n. From plus...@gmail.com on July 02, 2013 09:39:22\nStatus: Invalid\n. From plus...@gmail.com on March 22, 2013 06:35:07\nFixed in r166\nStatus: Fixed\n. From plus...@gmail.com on March 22, 2013 06:35:34\nFixed in r165\nStatus: Fixed\n. From plus...@gmail.com on July 02, 2013 09:53:05\nStatus: Invalid\n. From vmalva...@virustotal.com on April 03, 2013 07:59:04\nI'm suspecting that the missing module is msvcr100.dll, which yara.pyd depends on.  You'll probably need to install Microsoft Visual C++ 2010 Redistributable Package: http://www.microsoft.com/en-us/download/details.aspx?id=5555\n. From crazydah...@gmail.com on April 03, 2013 08:12:04\nThat fixed it.  I had the x64 redistributable installed, but installing the x86 resolved the issue.  Thanks!\n. From plus...@gmail.com on April 04, 2013 07:25:31\nStatus: WontFix\n. From plus...@gmail.com on November 04, 2013 04:58:29\nThe expected behavior is that of version 1.7, and is what you should expect in any future version.\nStatus: WontFix\n. From plus...@gmail.com on May 23, 2013 06:54:59\nCould you tell me the steps you follow to install yara?\n. From upvan...@gmail.com on May 23, 2013 09:09:41\nI followed the steps mentioned in document README  .\n1.downloaded yara 1.7 and untar-ed it \n2. $python setup.py install\n. From vmalva...@virustotal.com on May 23, 2013 13:42:24\nJust untar-ed?  Did you executed ./configure & make?\n. From upvan...@gmail.com on May 23, 2013 20:27:56\n$python setup.py build \ni followed everything mentioned in doc. i got this error at this stage itself. \ni have also mentioned the execution sequence in my previous mails . please tell me what to do to install it, with this \"-lyara missing\"  problem fixed.\nthanks in advance , \nUpvan\n. From plus...@gmail.com on May 23, 2013 07:06:01\nThe problem here is that /\\w+.gif/ makes the rule an order of magnitude slower, is not really an infinite loop, but it takes waaaay more time to scan.\nStatus: Invalid\n. From plus...@gmail.com on May 23, 2013 06:52:35\nStatus: Fixed\n. The issue here is that c_ulong is not a really a Python integer, and the match function doesn't recognize it. You could use:\nfor x in ProcessIds:\n  rules.match(pid = x.value)\n. From johnmcca...@gmail.com on April 24, 2013 09:44:18\nAnother update... I updated to the most recent version of Cygwin, and recompiled yara again yesterday. This time the above include didn't work. However explicitly doing\ndefine WIN32\nat the beginning of proc.c did. I believe this is the key define that wasn't being set before, as well. Mind you, I have no idea where it's really supposed to be getting set. This may really be a cygwin bug. Nonetheless, I wish you guys would put in some code to address it.\nThanks\nJohn\n. I'm closing this issue because it's a bit old and I don't plan to support YARA on Cygwin. If anyone volunteer to make YARA compatible with Cygwin I'm open to merge any patch submitted.\n. The issue here is related with sharing modes as described in http://msdn.microsoft.com/en-us/library/windows/desktop/aa363874(v=vs.85).aspx. The \"match\" functions internally calls CreateFile using FILE_SHARE_READ but not FILE_SHARE_WRITE. This means that we can share the file with other processes trying to read from it, but not with processes trying to write. As those logs files are already open by Windows in write mode, and we are not specifying FILE_SHARE_WRITE, our call to CreateFile fails. The Python's \"open\" in the other hand calls CreateFile with FILE_SHARE_WRITE enabled.\nThe correct behavior for YARA is disallowing scans on files are being written to by other processes, otherwise it can't guarantee a correct result.\n. Fixed in commit 0277aa527ae0b30233bb01144e7ba0fcb0c098e5\n. From plus...@gmail.com on July 01, 2013 16:03:30\nFixed in r211 .\nStatus: Fixed\n. Did you install yara first? Could you paste here the output of the whole process, starting with yara installation?\n. Please paste here the output of the whole installation process to try to identify the problem.\n. From abhishek...@gmail.com on July 14, 2013 16:06:28\nWhat is the expected output? What do you see instead?\nYara should exit graceful with in a time frame. If there is a match it should the match. However the yara gets stuck. Even after 100 seconds there is no output. \nYara 1.7 was used on CentOS.\n. From plus...@gmail.com on July 17, 2013 02:44:29\nThe problem here are the regular expressions.\n$a1 = /(\\x0a)?(public|private|protected|\\s+)static [a-zA-Z0-9]+ +[a-zA-Z0-9]+;/\n$a2 = /(\\x0a)?(public|private|protected|\\s+)[a-zA-Z0-9]+ [a-zA-Z0-9]+;/\nThese regular expressions slow down the scan too much. The new version 2.0 I'm working on will address these cases and also include a time limit to abort the scanning if it's taking too long.\nStatus: WontFix\n. Fixed in commit 0207d9096be1df518d9c059c2b6d00ed8cce536e\n. From whalens...@gmail.com on November 01, 2013 21:28:56\nSame issue\n. From plus...@gmail.com on November 04, 2013 04:49:49\nFixed in r232 .\nStatus: Fixed\n. From plus...@gmail.com on November 04, 2013 04:50:39\nStatus: Fixed\n. From docteur....@gmail.com on October 28, 2013 10:30:17\nPlease, do not take care this question. Sorry I found the solution in the doc.\n. From plus...@gmail.com on November 11, 2013 08:44:50\nStatus: Invalid\n. From plus...@gmail.com on November 11, 2013 08:44:07\nDid you download the source code from the provided tar.gz or checked it out from svn repository?\nCould you try a \"make clean\" and then \"make\" again?\n. From nuf...@gmail.com on November 11, 2013 10:03:52\nDownloaded through the tar.gz. No luck after 'make clean either' \nAttached the log from running make\nAttachment: make.log\n. From plus...@gmail.com on November 11, 2013 10:13:10\nWhich version of gcc do you have?\n. From nuf...@gmail.com on November 11, 2013 10:19:27\n4.2.1, installed via Xcode\n. From plus...@gmail.com on November 11, 2013 10:30:54\nIt seems that somehow your compiler is c99 mode, and the source code doesn't behave well with c99. Try adding -std=gnu89 to CFLAGS in Makefile.am\n. From nuf...@gmail.com on November 11, 2013 10:53:57\nTried both adding through both\nCFLAGS=-std=gnu89\nand:\nCFLAGS+=-std=gnu89\nJuding by the sample-output I guess the compiler doesn't care about CFLAGS(?):\nyara.c:92:9: warning: implicit declaration of function 'isdigit' is invalid in C99 [-Wimplicit-function-declaration]\n    if(!isdigit(*str++))\n        ^\nyara.c:453:47: warning: data argument not used by format string [-Wformat-extra-args]\n                                        fprintf (stderr, \"Not enough memory.\\n\", optopt);\n                                                         ~~~~~~~~~~~~~~~~~~~~~~  ^\nyara.c:473:47: warning: data argument not used by format string [-Wformat-extra-args]\n                                        fprintf (stderr, \"Not enough memory.\\n\", optopt);\n                                                         ~~~~~~~~~~~~~~~~~~~~~~  ^\nyara.c:515:20: warning: implicit declaration of function 'isprint' is invalid in C99 [-Wimplicit-function-declaration]\n                        else if (isprint (optopt))\n. From vmalva...@virustotal.com on November 11, 2013 12:17:55\n$./configure CFLAGS=-std=gnu89\n$make clean\n$make\n. From nuf...@gmail.com on November 11, 2013 12:23:51\nAh, not very used to gcc...\nAll good now, thanks for the help :)\n. From plus...@gmail.com on November 11, 2013 13:35:39\nI'm investigating this issue anyways, it seems related to inline functions in C99 mode. I'm also trying to suppress all those warnings that don't appear in C89.\nStatus: Fixed\n. Fixed in 2d96fdf13448f07299bdd2d608827b0b385bf18d\n. Move issue to https://github.com/VirusTotal/yara-python. Try this:\napt-get install automake\n. What happens is if you type \"aclocal\"? Is the aclocal program in your system?\n. Oh, I see it now. The problem is not with aclocal, but with libtoolize, but the script is printing the wrong message. Installing libtool should solve your problem. \napt-get install libtool\n. Fixed in commit 9dea8c66cf567c74f659798a3cb6844eb6695300\n. Thank you for suggestions Markus!\nOn Fri Dec 27 2013 at 3:30:36 PM, Markus Elfring notifications@github.com\nwrote:\n\nI would like to point out that identifiers like \"_THREADING_Hhttps://github.com/plusvic/yara/blob/7ac4b25d07c082b85e19dca1e6637b8b95f794c8/threading.h#L18\"\nand \"_YARA_Hhttps://github.com/plusvic/yara/blob/d53a2e1d84b371a5b4261a82ca01f7d98b035647/libyara/yara.h#L17\"\ndo not fithttps://www.securecoding.cert.org/confluence/display/seccode/DCL37-C.+Do+not+declare+or+define+a+reserved+identifier#DCL37-C.Donotdeclareordefineareservedidentifier-NoncompliantCodeExample%28HeaderGuard%29to the expected naming convention of the C language standard.\nWould you like to adjust your selection for unique names?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/plusvic/yara/issues/100\n.\n. Fixed in commit ac61dd627ab10f1393c2b15a228134c9dfc5379e\n. Does the header file \"threading.h\" need a similar update?\n\nYes, it was fixed a later commit.\nHow do you think about to make your include guards not only standard-compliant but also really unique by appending a kind of UUID?\nWell, I think there's enough uniqueness now. \n. Sure, I'll take a look. If you prefer, feel free to fork the project, make any change and send me a pull request.\n. I'm not familiar with aspect-oriented software development, but for what I've seen it implies using AspectC++, I'm right?\n. As a paradigm it looks pretty good, but my concern is that it would require\nusing the ACC compiler which is not a very standard tool. Besides, once you\nstart using this approach, the logical step would be refactoring all the\ncode to make use of it, and that would be lot of work.\nOn Sat Dec 28 2013 at 2:56:01 PM, Markus Elfring notifications@github.com\nwrote:\n\nIt depends on the usability of the available tools. How do you think about an\nalternative approach like \"A Reusable Aspect for Memory Allocation Checking\"http://aspectc.net/ac_tutorial.html#reusablemachecking\n?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/plusvic/yara/issues/101#issuecomment-31296974\n.\n. I would prefer to keep using standard C and not forcing people to install another compiler just to build YARA. Besides, when compiling YARA for Windows, I think it would be very hard to get rid of Visual Studio.\n. Oh, sorry, I forgot to push the changes to the repository. It was fixed in commit ce480357eded31db348c7ba52fa889d0d2aa21d8\n. What do you mean with \"update Yara modules\"?\n. I think an auto-update system is out of the scope of this project. YARA is targeted to computer-savvy people, not the general public, I think this would be an overkill.\n. Well, it's just that I don't think this worth the effort (at least for me) because YARA users are used to build their own programs, and YARA doesn't get updates too often. \n\nBut I agree that it would be nice having a binary packages at least for the most common systems and get YARA installed and updated by a simple apt-get, yum, dpgk or whatever is the standard on each system. If you want to volunteer to do that, it will be welcome :)\n. I've never done that neither, but I'll help in whatever I can :)\n. This issue was already fixed in commit b9463a5a4d9a790cb7ab160139c8ff13104fa8fc. Thank you for your feedback.\n. It works with aclocal-1.12? Please try replacing line 37 of bootstrap.sh with this:\nACLOCAL=locate_binary aclocal-1.14 aclocal-1.13 aclocal-1.12 aclocal-1.11 aclocal-1.10 aclocal-1.9 aclocal19 aclocal-1.7 aclocal17 aclocal-1.5 aclocal15 aclocal\n. Fixed in ccee1571bd60b017b53a5947a9a92586ac77eebb\n. I keep config.h under source control because I need while compiling in Windows. I'll merge this manually.\n. Implemented in 38f5f8fbfb6bcac6649c7df93f8ee884b08e4801\n. Could you try with the latest commit (2497e20ba67f4436dfa0d927d05ef143f72034c6)?. I've fixed a bug in semaphore_init which could be related with this issue.\n. Thank you for your collaboration!\n. Well, in YARA 2.0 it works that way precisely to imitate the PCRE behavior. In PCRE, and most regexp engines, the dot (.) doesn't match the new-line character. You have to explicitly declare that you want the dot matching new-lines by using the single line modifier.\nThe problem here is that YARA 2.0 doesn't allow to change that behavior as PCRE does. What I'm going to do is allowing to use the \"s\" modifier in the regexp, like this:\n/\\xaa.{3}\\xbb/s\nThis is another way of declaring the single line modifier also compatible with PCRE.\n. This was already fixed in 31b6c3b236e2bb13d254791827b6407c47902cf9\n. Duplicated #115 \n. Now YARA uses -O3 by default.\n. Seems to be the same issue described in #118. Could you try with the latest source from https://github.com/plusvic/yara/archive/master.zip?\n. Any update in this? Could you provide more details about the steps you're following?\n. Could you provide more details about the crash? Maybe memory dump? I wasn't able to reproduce the bug, I'm running yara32.exe in a Windows 7 x64 and it works fine.\n. I see, the regexp pasted above is different from the one in the file, somehow it lost two asterisks, changing its meaning.\nNow I was able to identify the problem, it's something that was already solved and won't affect version 2.1.\nHere is an up-to-date yara32.exe, could you test with it?\nhttps://www.wetransfer.com/downloads/c79d48741618025b94e7c53e47ecb96220140214135638/891cc9dbdeaf8504e072743d71a5ffe420140214135638/e289ff\n. Gracias!\n. Could you send me some of those Zbot samples? Maybe the md5 is enough, I could search for them in VirusTotal.\n. I've fixed this issue in commit c4091c72de3b097e17610bb85962d7027d2bf5e1. YARA was finding the entry point in the way it was supposed to be done, but the Windows PE loader is very flexible and loads PE files even if the entry point lays outside of any defined section.\n. Could you try with the latest commit and let me know if this still happens? You can find the latest commit at: https://github.com/plusvic/yara/archive/master.zip\nI was trying to reproduce the issue but didn't managed to do it. It's possible for you to login in that system and launch python from the command-line? Maybe that way you could reproduce the issue outside your Celery worker and get a gdb stack trace.\n. I've been testing all these files and none of them actually runs in a Windows system. They seems to be damaged and even the OS is unable to load them. The entry point value returned by YARA is the one appearing in the PE header. That value is supposed to be a RVA, and should be converted to a file offset, but as it points outside any section, it's returned as is, without conversion.\n. That's exactly the cause of the problem, starting with YARA 2.0 conditions are not evaluated in short-circuit mode. YARA 2.0 uses a stack-based machine to evaluate boolean expressions, and short-circuit evaluation is harder to implement on this kind of machines. \nThis complex rule could be replaced in the future with a simpler one, based on built-in functions to inspect PE structures. I'm working on an extensions system for YARA to allow people to write such functions and make YARA more flexible.\n. Fixed in commit 74ca1138719ebb381593a43bd289a4a249d2ad19\n. The cause of this error is that there are too many matches of the string \"ffffffff\" in the file. To avoid YARA using too much memory there's a limit in the number of matches for each string, the limit is pretty high, but you're hitting it in this case. I would recommend you using a less common string in your rule. \nProbably is a good idea to print a more useful error message when this happens.\n. In order to avoid shift/reduce conflicts in the grammar YARA doesn't support an empty pattern as the first item of the alternation, but you can write it as /MSVBVM(D|).DLL/\n. Closing because it's a very old issue. Please re-open if still valid.. Fixed in commit 74a7e4e9c4b914c0f7157e59d1e61cf07a72934e\n. Implemented in 4c08d650b5de926939abaff22c1e2bf1f39bac80\n. The strings part is feasible, but accessing the condition would need important changes in the code base.  That's too much effort for a feature I consider out of the scope of YARA. For anything related to analizing rules or extracting information from them I prefer something like plyara. \n. It would be great if this feature is implemented for Linux and Mac OS X as well, I would prefer to keep the same features in all platforms.\n. Fixed in commit 75139e2fb4f1a025ac2d41c24d6cd5c0964317f5.  Empty files are now treated as normal files and no error is reported. This rule now works fine:\nrule zero_length_file\n{\n   condition:\n       filesize == 0\n}\n. Even if you are looking for the string at a specific offset YARA searches for all occurrences, that's why you end up receiving that error. I plan to handle these cases differently in the future, but for now this is the expected behaviour.\n. In the latest version the rule shown above doesn't cause trouble anymore because the string is at a fixed offset. But it could raise internal error 30 if you remove the \"at 264\" part, like this:\nrule test {\n  strings:\n     $str = { 00000000 }\n  condition:\n    $str\n}\nYou can get rid of those errors by avoiding too short strings or too common strings like { 00 00 00 00 } or \n{ FF FF FF FF}\n. This is really weird, I don't find any reason for this to happen. Let me think what can we do to find the root of the problem.\n. This issue was already fixed in commit 4dc04423311c73243ac0ca54435c0ab911a58289, you can download the latest version from https://github.com/plusvic/yara/archive/master.zip, this version should work fine.\n. Now this can be done with the PE module\nimport \"pe\"\nrule win_trojan_vb_5610 \n{\n   strings:\n      $a = { ... }\n   condition:\n       $a at pe.sections[0].raw_data_offset\n}\n. As explained in http://yara.readthedocs.org/en/latest/gettingstarted.html, this should solve it:\nsudo echo \"/usr/local/lib\" >> /etc/ld.so.conf\nsudo ldconfig\n. A linter for YARA is out the scope of YARA itself. It would be a very nice project, but I think it should be a separate effort.\n. Great! I'll put some reference to it in the documentation.\n. Closing because this issue is out of date. Besides, the official package is yara-python. The yara package is a ctypes interface to libyara implemented by someone else and currently unmaintained.. Fixed in commit 57ef744874c6f1fe05a17ab9ed03dd994ac315fa\n. Fixed in commit 33bd8fdf48698af33b9276103fb42174c495fbf2. \nThis limitation is imposed because yr_compiler_get_rules compiles the rules to binary form the first time it's invoked. New rules can't be appended while in binary form because of the way they are encoded.\n. Yes, that's correct.\n. I suggest using the latest version, the 1.7.7 version is a bit outdated\nright now.\nOn Tue, Aug 12, 2014 at 7:34 AM, Christopher Meng notifications@github.com\nwrote:\n\nHi,\nI'm going to package yara into Fedora, one question I want to ask here:\nI saw python bindings in the sources, and on pypi I saw it again with a\ndifferent version.\nSo should I set the python bindings version to the one on pypi(1.7.7) or\nthe main version(2.1.0)?\nThanks.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/plusvic/yara/issues/149.\n. Yes, its probably better.\n. I've tried to reproduce the bug without success. Could you send me a minidump file for the crash? Are you able to determine if the crash always happens while scanning the same file?\n. I did some tests today passing a file handle, but unfortunately it doesn't work with StringIO objects. StringIO objects behave like files from the Python perspective, but it seems that you can't use them from C with functions like fread.\n\nThe only solution seems to be loading the rules from a memory buffer. That requires a few more changes, but it's in my to-do list.\n. Great! It looks like a good approach, we can have a single implementation of yr_arena_load reading from the YR_STREAM abstraction, and then two implementations of YR_STREAM, one reading from an actual file and the other reading from a buffer. That's what you have in mind? Would you like to keep working on it? I'll happily merge it when you're done.\n.  You had in mind write support too! I should have wait :-)\n. That's good news!\n. Interesting, WIN32 is supposed to be defined when building for 64 bits as well. It works fine with Visual Studio 2010. Which compiler are you using?\n. Could you try with #ifdef _WIN32? \n. I've replaced WIN32 with _WIN32 in commit 3b5ddd067f8360365beccf79646171dba657b184. _WIN32 is defined by the compiler itself, you don't need to define it in your project, this way the source code doesn't depend on the project configuration.\n. Fixed in commit 68d8a49ffb2444826326b0a541e992a74484d03c\n. I'll remove the pip part, because the pip package is for yara-ctypes and hasn't been updated for a while.\n. This issue was already solved.. Fixed in commit 1c5ac31a6ddea2e99f6396decd0063242c824ecb\n. Please try with the latest commit (367b0eab221684d3a818e695c4889193b2c53031). I incorrectly committed a partial changes in the previous one.\n. Could you try with the latest commit in master and tell me how it goes?\n. Andreas is right, YARA doesn't depends on PCRE nor RE2 anymore.\n. Closing as this is a very old issue. Please re-open if still valid.. Yeps, that's the solution, push(UNDEFINED) is conceptually more appropriate, but in practice push(FALSE) is equivalent. I've fixed it in commit 76dee582bf5ba783d5e3897ef430429ac13dfdaf.\nThank you! \n. By the way, any improvement to the PE module is also welcome, if you want to share your code don't hesitate to send me a pull request. I'm right now working on new features for the PE module.\n. I like the idea, this add coherency to YARA. Escape sequence \\x00 is accepted in text stings being matched. For example, this is valid:\nstrings:\n   $a = \"abc\\x00def\"\nIt should be aceptable also in strings variables in modules. That would require some more changes besides using memcmp instead of strcmp, because we need to store the length for every string. Using Pascal's string model (putting the length in front of the string) could be a solution. It's not a very complex change, but requires touching some parts of the code.\nAre you willing to implement this change?\n. Great!\n. Fixed in commit b0b592ded8656037ae05ed671a9d5db988962a18 \n. False alarm?\n. Could you provide more details? Any compiler output or something?\n. This errors happen compiling YARA or compiling your program? How are you linking YARA into your project? Please provide all the the details about your project setup, which step you followed to integrate YARA in your program.\nApparently your trying to use libyara.lib, which was linked against msvcrtd.lib (dynamically linked C runtime library), in a project using libcmtd.lib (statically linked C runtime library). In that case you must recompile libyara.lib to use libcmtd.lib instead of msvcrtd.lib. Or use msvcrtd.lib in your project.\n. Makes sense, when you compile with MFC in a DLL both YARA and your program uses the dynamically linked C runtime library, so there's no conflict.\nMy email is: plusvic (at) gmail\n. You can send it in ZIP file with password, or use https://www.wetransfer.com/\n. Great job!\n. Do you mean using the C API?\n. Fixed in commit 55ee00dc63ff14f615f87ce9f318b55f34ce2463\n. Yes, that's the solution. You can refer to other rules in your condition, but not to strings defined in another rule.\n. Please tell me which BSD version are you using and I'll try to reproduce the issue\n. Could you get the latest version from 'master' and see if the problem was solved for you?\n. Great!\n. I've fixed some issues in commit 3a8bd424df68702b8d51e4c3637a54077cf7dd11. The most important one was using SIZED_STRINGs for all strings, including string literals appearing in conditions. This allows doing things like:\npe.rich_signature.clear_data contains \"\\x42\\x90\\x01\\x00\\x30\\x00\\x00\\x00\"\nor\n\"\\x42\\x90\\x01\\x00\\x30\\x00\\x00\\x00\" == pe.rich_signature.clear_data\nor \npe.rich_signature.clear_data != pe.some_function()\nIn resume, every string literal, string variable or string returned from a function is a SIZED_STRING allowing null-characters.\n. Fixed in 3ea3db2f730ec0a33681015833496cd82970bef9\n. This works fine with the latest YARA version. YARA 1.7 is a bit outdated and is not maintained anymore.\n. I think this was the commit which fixed the problem:\nhttps://github.com/plusvic/yara/commit/f1999cb5795b8a8faddf8c57368dcc37bebd8555\nBy doing the same modifications to the YARA 1.7 code you should be able to fix it. However I encourage you to migrate to the latest version. Your problems with rules hanging infinitely is probably caused by rules containing very long loops, like:\n and for any i in (0..filesize) : ( )\nIn YARA 1.7 if the  part is false the loop won't be executed, but starting with YARA 2.0 boolean expressions are not evaluated in short-circuit anymore. This means that the loop is always executed. If you avoid those long loops YARA 2.x and 3.x should perform faster than YARA 1.7\n. You could use:\nfor any i in (0..) :  ( pe.signature[i].serial ==\n\"00:11:22:33\" or pe.signature[i].issuer contains \"Microsoft\" )\nThe value for  could be stored in some field, like\npe.signature_length, but probably it makes sense to provide a built-in\nmechanism to get the length of an array. I also like the idea of iterators,\nsomething like this will be great:\nfor any signature in pe.signatures : (signature.serial == \"00:11:22:33\" or\nsignature.issuer contains \"Microsoft\")\nI'm going to think about it and evaluate how complex would be implementing\nthis.\nOn Tue, Oct 21, 2014 at 10:56 PM, Wesley Shields notifications@github.com\nwrote:\n\nIn my authenticode branch I've got code that looks like this:\nbegin_struct(\"signature\");\n    declare_string(\"issuer\");\n    declare_string(\"subject\");\n    declare_integer(\"version\");\n    declare_string(\"algorithm\");\n    declare_string(\"serial\");\n    declare_string(\"notBefore\");\n    declare_string(\"notAfter\");\nend_struct(\"signature\");\nThis works well for binaries that are signed only once (the vast majority)\nbut it is possible to have more than one signature on a binary. To deal\nwith this I'm moving my code to look like:\nbegin_struct_array(\"signature\");\n    declare_string(\"issuer\");\n    declare_string(\"subject\");\n    declare_integer(\"version\");\n    declare_string(\"algorithm\");\n    declare_string(\"serial\");\n    declare_string(\"notBefore\");\n    declare_string(\"notAfter\");\nend_struct_array(\"signature\");\nWhere each element in the array is a structure representing the attributes\nof the certificate used in that signature. I'd like to be able to express\nthis logic in a yara rule:\npe.signature.serial == \"00:11:22:33\" or\npe.signature.issuer contains \"Microsoft\"\nI don't particularly care which of the signature array matches, as long as\none of them matches. The best way I can see to do this right now is to\nexpress this via a function which walks the array, like this:\npe.signature.serial_equals(\"00:11:22:33\") or\npe.signature.issuer_contains(\"Microsoft\")\nThese functions would walk each item in the array and return if it\nmatches. This is not how I would like to do it as it's cumbersome and\ndoesn't fit in with the way other things like imphash() work. I suspect\nthis will require some grammar changes to support it, but I think it would\nmake writing and using modules easier.\nAm I incorrect in reading things? Is there something I missed?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/plusvic/yara/issues/190.\n. Well, you don't need to change the grammar, we can add a new module called\n\"date\" for date related functions, including one receiving the hour, minute\nand second and returning a time_t. A time_t is actually an integer, so it\ncan be casted to int64_t. Functions \"not_before\" and \"not_after\" can also\nreceive an int64_t. The condition would be like:\n\npe.signatures.not_before(date.date(2013, 1, 1))\nOn Mon, Oct 27, 2014 at 9:25 PM, Wesley Shields notifications@github.com\nwrote:\n\nI've updated this to keep the ASN1_TIME structures in a list. I'd like to\nbe able to say:\npe.signature.not_before(date('2013')) or pe.signature.not_after(date('2014'))\nThe idea would be that any signature between 2013 and 2014 would be found.\nAt this point I'm not sure how to proceed. I think my next steps are to\nteach the grammar how to parse and understand date(), and to convert the\narguments to a time_t structure. Then I would need to write not_before()\nand not_after() which would both take in a time_t argument and do the\ncomparison across all items in the list. I'm not sure how to proceed with\neither of those though.\nMy thoughts for the second half would be something like this:\ndeclare_function(\"not_before\", \"p\", \"i\", signature_not_before);\nWhere the input argument would be an opaque pointer, which would be casted\nto time_t internally. I think this is the easiest way to go, if I can wrap\nmy head around the grammar changes regarding date(). [image: :smile:]\nI've also got the idea that it would be great to be able to have functions\nthat operate on a given item in an array directly. Kind of like this:\npe.signatures[i].not_before(date('2013')) or pe.signatures[i].not_after(date('2014'))\nUsing this method would allow me to store the ASN1_TIME structures in the\nsignatures array and would make accessing them easy. I suspect this is a\npretty drastic change though, but I wanted to throw it out as it makes\nwriting these kinds of things easier I think.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/plusvic/yara/pull/191#issuecomment-60663018.\n. I've fixed the issue with functions inside an array of structures in commit 3c4b2466b84369b301647cf6499bdc0f9ec11e35. \nIdeally I would just write a function called \"not_before\" and rename the current one to be \n\"not_before_string\".\n\nActually, you don't need to rename it, functions can be overloaded, as long as arguments are different they can both have the same name. For example, this is ok:\ndeclare_function(\"sum\", \"ii\", \"i\", sum_2);\n declare_function(\"sum\", \"iii\", \"i\", sum_3);\n. not_before() and not_after() functions behave differently for string and integer arguments, they just look for exact matches if the argument is a string. I think that's confusing, people will generally expect both versions behaving in the same way, just receiving the input in different formats. \nI find the integer version of both functions the correct approach, people usually want to search for files with certificates valid for a given time frame, not a specific date. With the string version you can only search for specific dates. Do we actually need the string version?\n. I still think that the best idea is making \"not_before\" and \"not_after\" just an integer field containing a time_t. That allows more flexibility because you can compare individual dates, and you can use \"for any\" and \"for all\" to cover a wider range of conditions.\nAs you pointed out the problem is that ASN1_TIME can express a wider date range, but I doubt we'll find dates before 1970 in practice.\nWe can have a \"pe.signatures.valid_on(X)\" function to avoid having to write this:\nfor all i in (pe.number_of_signatures - 1) : (pe.signature[i].not_before < X and pe.signature[i].not_after > X)\nThe current \"not_before()\" and \"not_after()\" functions could renamed to \"valid_after()\" and \"valid_before()\".\nWhat do you think? \n. Great! In this thread http://stackoverflow.com/questions/10975542/asn1-time-conversion they propose the same solution using mktime.\n. A more convoluted one http://cap.potazmo.cz/software/bits_n_pieces/asn1_time_t.c\n. This is already fixed in master branch.\n. This was already fixed in master branch.\n. Most of the times people are going to expect standard C strings. So, instead of string_argument returning a SIZED_STRING, I prefer having a separate sized_string_argument for that, and keep string_argument returning a char_. I've fixed this in ccd52bc627b1828dfd10ab5781ed1e46290e2578.\n. The bug was triggered by a problem in your condition. The loop should go from 0 to pe.number_of_sections - 1, so you were accessing the array out of bounds. The function foo() is undefined for pe.sections[pe.number_of_sections]. So, you were right, the solution is checking for UNDEFINED functions in OP_CALL.\nYou're quickly mastering YARA internals :-)\n. Sorry, but I don't see how https://www.rollbackup.com/ uses YARA in any form.\n. Are you using rules loaded from a binary file?\n. Well, actually I forgot to increment the binary file version number, in order to reject files generated by prior versions of YARA. Just recompile your rules and that's all.\n. Try running autoreconf and then ./configure\n. Could you try with the latest commit?\n. Great!\n. Try: autoreconf and then compile again\n. YARA can be used in other contexts where the file name is not known, it's oriented to detect files based on their content, not in other environmental variables. You could always pass an external variable with the file name and use it from your rules.\n. If using the command-line interface you should use the -d argument. But it doesn't make sense if what you want is scanning a whole directory and match files with a certain name. In that case you could write a python script to traverse the directory and use yara-python to scan each individual file, passing the filename as an external variable with the \"external\" argument in the \"match\" method. \nSee http://yara.readthedocs.org/en/v3.3.0/yarapython.html\n. I was just waiting to have time to look into it. After a quick review I've noticed that there's no implementation for WIN32, do you plan to implement it? I would prefer maintaining the API identical in all platforms.\n. The WIN32 implementation never came and nobody else asked for this feature.. Fixed in 0173d3a925f0c23d36d1912066a2d4d9cfc10ffa\n. Fixed in 2773c9b1aaabc869d7d58154e6176ccb307c026d\n. Fixed in 2524d0c356a6c2756bff39c1a733e979603b8cfc\n. Fixed in a43071876024f24a226df487830970bd86e87b62\n. Fixed in 0434bb955cb7262b3198475f9ad3129ca25b8160\n. Did you solve this issue?\n. Fixed in commit 963f1babc875971dc9a559cdf2f174f857ad7ef8\n. I like it, I'll merge it into the next release. The idea of adding support for floating point numbers is also interesting, it requires some changes in the grammar and some new instructions to operate with floating point numbers, but it can be done. It's also a good opportunity to learn about YARA internals because the task is not trivial, but neither too complex. So, go head!\n. Don't worry I'll add it :)\n. I'm not sure if having a \"data\" attribute for each resource is a good idea, resources can be megabytes long and this implies moving all that data around. Having an \"offset\" attribute is enough, you already have an \"entropy\" function receiving an offset, size pair.\n. Interesting. The downside is that we'll end up having different implementations, and that will be very confusing for people already familiar with totalhash/Viper's one. It's a shame they didn't get right from the beginning. \n. Fixed in version 3.3.0\n. Fixed in commit 161e324fb6c90274f029a1ef5ec74d7662d46b4b\n. Fixed in b90e8b5283b27e1158cf2f59faf15edc4a0d107b\n. Fixed in 4c0cdf96fa84b57b47644ec2bedc61659c4f0c41\n. The development files for libjansson seems to be missing, try:\napt-get install libjansson-dev\n. Fixed in 45352ea0690b380c20e49b79df80f37b1bfc71e0\n. Great, sounds like a very good idea.\n. But why keeping both functions mean_err and mean_deviation? Both functions give a notion about the same thing, how far are the numbers in the data from the given mean. I propose the deviation because is the standard way to do that. Besides, the \"mean_err\" name suggests something related to the standard error of the mean, which is a very different statistical concept. So, my proposal is:\nmath.mean(data): \n  Returns the mean for data\nmath.deviation(data, mean):\n  Returns the mean deviation of data from the provided mean.\nmath.deviation(data, math.mean(data)):\n This would return the standard deviation, which is the deviation from the actual mean.\nTo determine if the deviation is in a range, instead of passing two additional arguments to the function, we can create another function, like:\nmath.in(value, lower_bound, upper_bound)\nSo you can say:\nmath.in(math.deviation(data, mean), 63.9, 64.1)\nWe can even consider changing the grammar to accept expressions, like:\n63.9 < math.deviation(data, mean) < 64.1\nBut I haven't thought about the implications yet, perhaps is not that easy to do. The idea is creating a set of simple functions that can be mixed together in different ways for different purposes, instead of having too specialized  functions. Just like the UNIX philosophy for command-line tools. What do you think?\n. Perfect, if you don't have any pending change I'll merge it.\n. Yes, I agree with that, if they are strings then the integers don't make\nsense.\nOn Wed, Jan 7, 2015 at 10:45 PM, Wesley Shields notifications@github.com\nwrote:\n\nWhat is your opinion on not setting type, name, or id if the\ncorresponding string is not NULL? If the string is not NULL then the\nintegers are meaningless and should probably stay UNDEFINED.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/plusvic/yara/pull/228#issuecomment-69097813.\n. Manually merged in b0d0494dc635e34ea7ad06530f0d156801cf3b50\n. Fixed in 334bd1a671ca7cc7b5efdb7b0a284d19b6ef7135. I haven't tested it, so if you can confirm that it works properly it would be great.\n. I found the cause of this problem. While iterating over a directory YARA ignores files links to avoid entering in link loops. It turns out that the /Volumes directory in Mac OS X contains just links to other directories which are ignored.\n. Great, I like the idea of parsing more PE types. I was conservative and accepted only I386 and AMD64 because I didn't know if other types had differences. But let's open it and accept more platforms.\n. Fixed in eccb4341899226f0670d182d6f0a5f9a55e76ac7\n. At first I though it would be a good idea, then I started to think about implementing a function is_undefined(X) which will return True if X is undefined, it could be useful in other situations too. I didn't take any decisions yet. What do you think about it?\n. Fixed in 7af17060ab516e9af82a69a91715b36080a62472\n. Instead of applying this patch I'll address the root cause of the problem, which is that YARA doesn't validate the strings to make sure they are UTF-8. See issue #248.\n. The same is happening with:\n\nrule R {\n  strings:\n    $a = /a[\\d\\D]b/\n  condition:\n    $a\n}\nfile: \na1b\n. Fixed in b6bccf3c620d126d5f43b7ef4ea93dfe22c2fd00\n. off_t can be 32-bits wide in some systems, so yr_filemap_map_ex should use off_t. \nFrom the error report I don't completely understand why the compiler complains about a redeclaration of int64_t. I'm trying to reproduce the issue but I'm finding other issues with mingw, neither \"log\" or \"log2\" seems to be defined in math.h.\n. Yes, off_t was defined as int64_t because Microsoft compiler doesn't know about off_t. So the problem was that in mingw both off_t and _WIN32 are defined. Your new patch fixed the problem.\nBy the way, did you experienced any problem with \"log\" function?\n. I've merged mortizkroll's patch, so I'm closing this one.\n. Wesley is right, when you use \"any of them\" a reference to each string is pushed in the stack, with that many strings your overflowing the stack. One solution is setting a higher STACK_SIZE as suggested, another one is splitting this huge rule in multiple smaller rules.\nI'm going to mark this as \"won't fix\" because this is not an actual bug. You're just hitting an internal limit. \n. I think it's a good idea to use dynamically allocated memory for the stack. Maintaining the pointer in YR_CONTEXT as ckane suggests seems like a elegant solution.\n. I used to declare loop variables out of the \"for\" statement to comply with ANSI C, but nowadays most compilers (if not all) are supporting C99, so I prefer to use the more convenient C99 style. In fact I've been replacing the old ANSI C style with C99 style whenever I touch old code. I guess we can pass the \n-std=c99 argument somwhere in setup.py\n. Fixed in 4994a2cdff17e54b5e55507e494223abdca441dd\n. Added -std=gnu99 to compiler arguments instead (in commit  4994a2cdff17e54b5e55507e494223abdca441dd)\n. I've renamed min and max to yr_min and yr_max in commit fc4696c8b725be1ac099d340359c8d550d116041. The issue with get_object is still pending.\n. Already fixed\n. Already implemented in 66229acfb7c1baa583b205193ffde7500b7edeeb\n. The command-line tool have the -s option which prints the matching strings and their offsets. Are you suggesting something else besides this option?\n. Fixed in fc704b684b1c678a3c3890421f4e268497eca2b8\n. Fixed in 6bd27e0512634ac373d5f2911837dfe208d472ed\n. Great! I'll just add an initialization to make sure that chain_length doesn't have a random value the first time it gets updated.\n. This change doesn't fix the problem in all cases. \"pointer\" could be greater then pe->data and still overflow if \"size\" is too large. A more comprehensive solution is:\n```\ndefine fits_in_pe(pe, pointer, size) \\\n(size <= pe->data_size && \\\n (uint8_t*)(pointer) >= pe->data && \\\n (uint8_t*)(pointer) + size <= pe->data + pe->data_size)\n\n```\n. Fixed in 223daaf9c4d335b87805654466fba32f3988ad5a\n. Hey Shane, take a look at commit 21e796dfb6e217457de92c9c9b1e526a0f5df11f, the stack wasn't released when function returned early due to a timeout or error in function call. You may want to fix it in your branch too.\n. I've renamed min and max to yr_min and yr_max in commit fc4696c8b725be1ac099d340359c8d550d116041. That's probably the better solution.\n. Implemented in 5921ece7d3fed12587e9772acae72bbff14bf6eb\n. I've applied these improvements in commit 07d9d74c078e8b8890b351c2a0f02ee4ba936a03\n. Fixed in b1106adfa8f891711309f5cb71333aacebcef62a. Large regular expressions cause an error instead crashing the program.\n. This is not actually a bug. All the matches for a given string are always printed, even if they are outside the range specified in the condition, or the condition is not satisfied for any other reason. Think in the condition:  not $a. Should $a be printed if present in the file? \n. Fixed in 85023938793fa658cf8bfffbbc929657f04910ca\n. Sure, I think that a run-time option is a better way to control this feature. Do you plan to implement it?\n. Fixed in aa0f6c43548414c103beac651add0ec23c9e0253\n. What about this?\nfor 5 i in (0..pe.number_of_resources - 1):\n  (\n    hash.md5(pe.resources[i].offset, pe.resources[i].length) == \"foo\" or\n    hash.md5(pe.resources[i].offset, pe.resources[i].length) == \"bar\" or \n    hash.md5(pe.resources[i].offset, pe.resources[i].length) == \"baz\" or\n    hash.md5(pe.resources[i].offset, pe.resources[i].length) == \"pants\" ...\n  ))\nBut it would be great if it could be expressed the way you propose, it's shorter and clearer. I'm going to take this into account as part of future improvements I'm thinking about.\n. Closing, as the downside mentioned by wxsBSD is already fixed too. The hash module caches the latest hash calculated from a given offset,length pair.. Did you follow the instructions at http://yara.readthedocs.org/en/v3.3.0/gettingstarted.html?\n. Fixed in commit d90463455d91855cb040bd1d291fd25ee6aa71cf\n. A simpler solution in commit ef05a686c6962dba1b721535aa06b0a5cb25068e \n. Fixed in 5f02d37a8e50a7f53b09216b08dfc530b7940be7. Didn't included the fprintf statement.\n. In commit 14dbf62b132c1d7294fa3b4a535d5fec3f6246b9 I'm using strncpy as you propose to replace the specific line causing this bug. But I'm maintaining strlcpy_w in the other cases, which are protected against buffer overruns by calls to wide_string_fits_in_pe.\n. What problem?\n. Closing this issue as it's very old and support for Solaris is not priority right now. If someone volunteers to make YARA work on Solaris I would accept patches.. Fixed in 7a4f9f5985d5f64127c2cda179f426751cfe3a0e\n. Please don't mix two unrelated features in the same pull request. This makes hard to merge one feature without merging the other too.\nRegarding the context printing, this solution is quite inefficient. You're mapping and unmapping the file for each match. Besides, this approach doesn't work while scanning process.\n. This is slightly better than the previous commit, but still you are mapping the file or getting the process memory for each matching rule. This can be slow if you have multiple matching rules and large files, while scanning processes is even worse.\nIn order to implement this properly we need to change the way in which data is passed to the callback from YARA.\n. Fixed in c6779bbbf6fcd163f6e34a60000193d40f88729c\n. Fixed in db22ffda588b9b3abc619f8a2f616d0be57e9335\n. Great job!\n. Fixed in 2bd7c65d41944e704b8c16aa06425a859579e9d0\n. Fixed in c666ae1e1a4ecfc1eb536f6aa1b58f3305b6679c\nThe solution consisted in changing the grammar to reject a list of function arguments starting with a comma, which shouldn't be accepted in the first place.\n. Mmm, it seems that you are installing a recent version of yara but yara-ctypes is out of date and expects an older version. Which version of yara are you using?\n. Let me clarify.... there are two different ways of using yara from Python: yara-ctypes and yara-python, and you seem to be mixing them. The official one is yara-python (and I believe that Volatility 2.4 is using it). In the other hand yara-ctypes is not part of the official yara, it's a library created and maintained by someone else. The problem is that they created a PIP package called yara, which install yara-ctypes, and this is probably a source of confusion. Furthermore, yara-ctypes seems to be abandoned because according to their documentation (https://pypi.python.org/pypi/yara) the latest version was created for yara 1.7.7.\nIn resume:\n- Uninstall yara-ctypes with: pip uninstall yara\n- Install yara-python with: \ncd yara-python\npython setup.py build\nsudo python setup.py install\nyara-python comes in the source code tarball.\n. I'm using Visual Studio 2010, and yes, you'll need to rebuild probably both jansson32.lib and libeay32.lib in order to get solve this problem.\n. Fixed in 15d249b4d58b496e485c4f8da5f1b4de799d6608\n. Yes, that's correct, string->string will be NULL for any string containing wildcards. Only fixed strings like {35 A1}, {FA BA DA}, \"foo\", \"bar\", etc will have a non-NULL string field.\n. Those can't be retrieved from the compiled rules, they are stored as opcodes for the regular expression engine.\n. Implemented in commit cbb63eeb025615596c686b7664d5b75056095eae\n. This feature is very interesting, and someone else already asked for it (see issue #71). But I'm thinking about introducing the concept of iterators in YARA, for example to be able to do this: \nfor any section in pe.sections : ( section.name == \".text\")\nThis could change the way in which this feature is implemented, because the \"x of \" could be a general purpose construct where  is an iterator returning boolean values on each iteration. So, I prefer delaying this feature until iterators are implemented.\n. I'm trying to reproduce the issue you mentioned, but everything works fine for me:\ndata = 'rule test { strings: $a = \"dummy\" condition: $a at entrypoint }'\nrules = yara.compile(source=data)\nIn this case I got no exceptions, even if the rule raises a warning.\ndata = 'rule test { strings: $a = \"dummy\" condition: $a at entrypoint }'\nrules = yara.compile(source=data, error_on_warning=True)\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nyara.WarningError: Using deprecated \"entrypoint\" keyword. Use the \"entry_point\" function from PE module instead.\nIn this other case I got the exception as expected. Can you share the rules causing the issue? Maybe it's caused by another kind of warning.\n. Hi Rafael,\nI'm very busy with other projects, but as soon I can I'll take a look your\npull request. I think it would be great to be able to use Yara from Java,\nand many people could benefit from this contribution.\nCheers,\nV\u00edctor\nEl 6/9/2015 7:33 p. m., \"Rafael Ferreira\" notifications@github.com\nescribi\u00f3:\n\nHey folks any chance this PR can get a review?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/plusvic/yara/pull/336#issuecomment-138102897.\n. Hilko is probably right, this could be maintained in a separate repository\ninstead of the main YARA repo. I can put a link to that repository for\npeople to notice that they can use YARA from Java too. Including the Java\nbindings in the YARA repository has the drawback that we are forced to keep\nthem up-to-date whenever we launch a new YARA version, so I think it's\nbetter to keep it as a separate project.\n\nOn Sun, Sep 6, 2015 at 11:42 PM, papostolescu notifications@github.com\nwrote:\n\nThere is only one change required in yara.c to escape rules metadata when\nusing external (out of process) yara execution. Source is built using\nmaven, has only one compile-time dependency and the bindings can be made\navailable on one of the public maven repos (like maven central) so there\nwill be no need for direct compilation.\nIt's up to the maintainer(s) to decide how to handle this, I'll make the\nnecessary changes.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/plusvic/yara/pull/336#issuecomment-138128016.\n. The best idea is probably increasing MAX_PE_IMPORTS to some value unlikely seen in actual PE files. Maybe 16384?\n. Maybe @shanehuntley can provide some problematic PE. I suspect he introduced this limit because of some malformed PEs causing thousands or even millions of iterations on that loop.\n. Already fixed.. Fixed in commit c7efac75c0bf560d237872afa98f657bcbc76bfb\n. The missing DLL is probably MSVCR100.DLL. This should be solved by installing the Visual C++ 2010 redistributable package. You get it here: https://www.microsoft.com/en-us/download/details.aspx?id=14632\n. I'm going to consider this feature. In the meanwhile you can have master file with \"include\" directives to all the other file you have in the directory. You have to create this file, but at least you don't have to merge all your rules together.\n. Since YARA 3.7.0 you can pass multiple files in the command-line. Wildcards are not supported though.. I've used Hillu's implementation in c3e7487738489939213ef82d488c628430bf828e\n. @wxsBSD your solution is correct, submit the PR and I'll merge your patch.\n. You are right, yr_rules_define_*_variable aren't thread-safe. You can't assign a thread-specific value to a given variable, all threads share the same value which should be assigned by a single thread and shared by all threads calling yr_rules_scan_*. \n\nAs you said, the most important limitation here is that you can't pass values that depends on the file being scanned, like filename, or whatever.  This could be solved by providing a separate structure to each thread to store variable values, but that would break existing code that assumes that once the main thread assigns value to a variable all other threads inherit that value.\n. Not a critical issue, but if you don't have those directories you'll get two warnings:\nclang: warning: argument unused during compilation: '-L/usr/local/opt/openssl/lib'\nld: warning: directory not found for option '-L/usr/local/opt/openssl/lib'\n. Great contribution. The only drawback I see is that we are modifying the API by adding a new argument to yr_rules_scan_xxx functions. This would break existing C programs relying on the API. The stack size is something that users won't be changing for individual files, so it probably makes sense to add a new function to set the stack size during YARA's initialization instead of passing the size to each call to yr_rules_scan_xxx.\nThis function could be flexible enough to control more settings in the future, like:\nyr_set_configuration(YR_CONFIG_STACK_SIZE, );\nWith this function we could control any other integer setting, like in:\nyr_set_configuration(YR_CONFIG_MAX_STRING_MATCHES, );\n. Nice feature! I'm thinking about moving this to a separate \"dotnet\" module, given its complexity and because it only applies to a subset of PE files. We would need to move functions and macros like pe_get_directory_entry, pe_rva_to_offset, struct_fits_in_pe to pe_utils.c to use them in both \"pe\" and \"dotnet\" modules. Does it makes sense for you?\nI would also try to simplify the pe_parse_com function by moving some code out of it, specially the big switches.\n. I want to release this in the next version. I didn't include it in version 2.5.0 because its a lot of code and didn't want to compromise stability. Now is a good moment to merge it in the master branch.\n. btw @wxsBSD, no problem with changing the license to BSD, right? \n. Fixed in 86c50347a20f000c46cb3e70d63d38c0584272d1\n. If you're scanning a directory you can try lowering the number of scanning threads with --threads=X command-line argument (the default is 8 threads). With a single thread, even if YARA takes 100% of one CPU core, you should have plenty of processing power with the remaining cores (assuming you have a multi-core CPU, which is the standard nowadays)\n. Fixed in 3f2f291e937178149cb4a8606064a3348c43f158\n. I agree with the intention of this PR but not with the way it was implemented. I think that removing the printing code from the library and allow the client of the library to call yr_object_print_data himself is a good idea, it allows solving multi-threading issues and let the client decide whether he want to actually print module structures and values or do something else with them.\nBut I would completely remove the SCAN_FLAGS_SHOW_MODULE_DATA flag and the yr_modules_print_data function and simply introduce a new CALLBACK_MSG_MODULE_IMPORTED message which would be sent after the module was successfully loaded, and it would have the module structure object as the argument. At this moment the client can call yr_print_object_data or do whatever it wants with the module structure object.\nThis simplify the design even more. Any opinions? \n. Ok, perfect!\n. I'm not sure if this can be considered a YARA issue, it seems more a configuration issue in your machine. Are you able to build any other project which uses automake? \n. Already done in e672cdab54d2484668af7a1387f97322e8f79725\n. Fixed in 18500039fe2246ddfb62a0533b37e2ad12cad9df\n. Take a look at this commit 2fac34b744813465ed39c19452289401f5430e69\nIt should solve this issue and improves the overall legibility of the condition.\n. That's probably because you don't have openssl installed and the hash module depends on openssl. Try this:\n./configure --with-crypto \n. Fixed in 4a532176bd1c973954cf859591b3747f7f76a096\n. Fixed in f867aee70cf52e1ea70ee7b4c2deee09a6cb10b8\n. You're right. I solved this regression in commit 52dd72e05afe4a878f8bd5000e122247058fc751\n. I agree with that too\n. ./configure now warns you when OpenSSL wasn't found in your system.. Yes, if you use the -s command-line option YARA is going to print all occurrences of the strings no matter what the condition says. That's the expected behaviour.\n. Yes, I agree with you. Returning return_float(UNDEFINED) in those cases is the best approach. Submit the PR and I'll merge it.\n. No, the only unit tests are those written in Python.\n. Fixed in 2ca694b1a2c7b9a3a8d51089a2459ade049516e9\n. Fixed in 094309bc06ede17de3c04ca08e01ca2522c8c73b\n. Very good job!\n. Fixed in ba60f4e5edd4d1eca9ba2f1ad6f5543aa4d95153\n. This was a very detailed bug report. Thank you!\nFixed in commit 3c74c9bc3a73de8b09a12ef1c43f7cbe72722c82\n. Thank you for contribution @campt. Would you mind adding this new feature to the documentation before I merge it into the master?\n. The use of \"entrypoint\" keyword in YARA rule is deprecated. This should be implemented in the ELF module (modules/elf.c)\n. @jacob-baines already did some work to solve this issue in #606. The entry point for the provided files are calculated correctly with the latest code.. Thanks for the triage job @hillu. I think we can close this issue.\n. To be honest, I agree that having large binary files in the repo is not a good idea, but I don't like the idea of submodules neither. \nAfter googling a little I found Git LFS (https://git-lfs.github.com/). I haven't tried it yet, but it seems to solve the problem of storing binary files without bloating the repository and without adding more complexity with submodules. So I'm going to give it a try and see how it works. If anyone want to test it and share his experiences, they're welcomed.\n. Assuming that we use LFS for storing the binary files, I would simply create separate directories under yara/windows for VS2010 and VS2015 with their own projects and binaries.\n. Yes sure, go ahead.\n. That's bad news :(\nI haven't used NuGet packages, can't tell if that's the right solution, but according to what I've read we need to have an account nuget.org and install a nuget client, which don't integrate with git. A bit cumbersome. This is why open source development in Windows is a pain. \nTo be honest the Windows project in this repository is here for my own convenience while building the Windows binaries. I never intended to provide any support for them, and given the issues caused by the Windows toolchain I think I'm going to stick to the DYI philosophy for the time being. For users who don't need to build the code themselves we already provide binaries.\n. Plus and minus signs in front of numeric constants can't be handled in the lexer because those signs can be also arithmetic operations. Let's say we have the expression: 1-1==0. You expect that expression to be syntactically valid and true, right? But if you include the minus sign as part of numeric constants this expression will be tokenized as: 1, -1, ==, 0 and the grammar will reject such an token sequence.\nIn fact I made the same mistake before, take a look at this commit when I solving the issue: https://github.com/plusvic/yara/commit/6cd9fad91545e19f3ecdda2f5736971bb715000e  \nThis can be handled either by defining a new token for numeric constants used in meta declarations only, or by accepting the minus sign in the grammar.\n. Did you test YARA extensively on SPARC and ARM? I'm wondering if those are the only places where we have unaligned accesses.\n. There's a test suit in Python, but of course it requires building yara-python too. You can find it here:\nhttps://github.com/plusvic/yara-python/blob/master/tests.py\n. Now we have the same tests in C (https://github.com/plusvic/yara/blob/master/tests/test-rules.c) and you can run them with \"make check\".\nCould you verify if the tests pass in SPARC and ARM?\n. God job!. I wanted to do this since long ago.\n. Don't worry, this is going to be merged in the master branch, it's just that I haven't found the time to do it. That's why I'm only merging simple patches that don't require too much effort.\n. Manually merged.\n. You're right. I forgot that. But now I've fixed this problem in 89a305f91de07ebfbeaf56a228140e10f27a8623\n. Good job!\n. Someone else is experiencing the same problem: https://groups.google.com/forum/#!topic/yara-project/XL91dNpQFd0\n. Fixed in 38566c0a9f8bd1cd5f609482342ffa07aba6d23a. That's probably because you didn't had OpenSSL installed while building YARA. \n. Ok, then I close this issue.\n. Yes, a few test cases would be great too.\n. Fixed in 6bbbdc2a510871534aa0d2860c46f46415642107\n. Could you add this new function to the API documentation?\n. Oh, that's right, ignore the previous comment then.\n. Sorry for not answering before, I missed this PR. This was already fixed in this other commit f38ac770b8e87548623cfbe3a67c6ff1ae68633b. \n. I'm not sure if this fix is correct. A PE could have a RVA higher than it's own raw size for all its sections. That's unusual, but could be possible in theory because the RVA is not related to the file layout, it's related to the in-memory layout.\nCould you provide more details about the circumstances leading to the segmentation fault?\n. I've truncated the tiny.exe file to 1KB and scan it with the provided rule. The pe_rva_to_offset function was called in this line: https://github.com/plusvic/yara/blob/master/libyara/modules/pe.c#L1080. It returned -1 and pe_parse_imports exited in https://github.com/plusvic/yara/blob/master/libyara/modules/pe.c#L1083 without even reaching pe_valid_dll_name.\nHowever, after taking a look at the code I've noticed that pe_rva_to_offset could return a offset larger than the file size in this line: https://github.com/plusvic/yara/blob/master/libyara/modules/pe.c#L442. \nBut the solution you propose seems incorrect to me because its possible for a PE file to have all its sections with a RVA larger than the file size. In that case, when you invoke pe_rva_to_offset with a valid RVA found within one of the the sections, the function is going to incorrectly exit in line 444, because the value for lowest_section_rva would be lower than than the rva passed to pe_rva_to_offset.\n. My proposed solution is replacing:\nif (rva < lowest_section_rva)\n  {\n    return rva;\n  }\nwith:\nif (rva < lowest_section_rva)\n  {\n    section_rva = 0;\n    section_offset = 0;\n    section_raw_size = pe->data_size;\n  }\nIn https://github.com/plusvic/yara/blob/master/libyara/modules/pe.c#L442\nThe subsequent checks are going to make sure that pe_rva_to_offset doesn't return a value larger than the file size. What do you think?\n. Fixed in 1497fbdf39f6db3e44344fffd2cb4b3a89c937c0\n. Good job catching those corner cases.\n. Fixed in c7f00b9a2cb02e0a4e37f718d475c87f8763199e\n. Fixed\n. Your changes are ok, the only improvement I'm considering is moving the definition of SIZED_STRING to the types.h file and use explict packing for that structure (i.e. putting it inside the #pragma pack(8) block)\n. License has been changed to BSD.\n. Fixed in 17e0fc4590a1777fc4fc249ee154def203a56112.. This solution only stores a single hash of each type (sha256/sha1/md5). A solution using a hash table is implemented in 22ce5e09dd49ccfb175524e8c6066984d1ecfb63\n. Done. It has been a great idea. Coverity has detected multiple issues and I'm looking at them.\n. Unfortunately backreferences can't be implemented in an efficient way, that's why YARA doesn't support them. For more details take a look at: http://stackoverflow.com/questions/4076687/regular-expressions-with-on-and-backreferences-support\n. I created a 3.5.0 release for yara-python now.\n. As far as I know when you compile a program with a specific compiler it gets linked against a specific set of runtime libraries. A program compiled in MSC++ 6.0 is not going to use runtime libraries from MSC++ 10. Could you elaborate more on this? Do you have a working proof of concept?\n. I understand what you say, but as soon as you don't access members of the FILE structure in your own code (in YARA's code in this case) you are safe. The only thing YARA does is storing pointers to FILE structures, and passing those pointers to the standard runtime library implementing fopen, fread, fwrite, etc. The FILE structure can change from one version of the runtime to the other, but YARA doesn't mind about that, because the structure is opaque to YARA. A problem could arise if you use the fopen function from one runtime version and the fread function from another version, but that's not case.\n. When you link YARA against a runtime library, both fopen and fread are implemented by the same library, so they are using the same version of the FILE structure. YARA doesn't knows anything about the internal fields of FILE, the fields from that structure are never used within YARA's code, that's what I mean when I say that FILE is opaque to YARA.\n. So, I think your concern is with the function yr_compiler_add_file. You're right about the problem that could arise from mixing two different runtimes (for example by compiling yara.dll with one version of the compiler and your main program with another version). But keep in mind that doing that is very bad idea for a number of reasons not related to YARA. Take a look at this and this. In the later they even mention the problem with the FILE structure.\n. > so you think who using yara.dll should know which compiler the yara.dll was compiled.\n\nbut,may be i only get yara.dll from a ways and i only use it,why should i know how it compiled?\nit's not reasonable.\n\nThat's why YARA is open source after all. You can build yara.dll yourself with the same compiler you are building your program.\n\nas a solution\uff0ci think adding a function like\n      FILE* yara_open_file(char* pszFile,...)\uff1b\ninto yara public functions set is more reasonable.\n\nA function that receives a filename sounds reasonable, but you can also use yr_compiler_add_string, which receives a buffer with the text for the rules. You can read the rules from a file in the way you prefer, and pass the buffer to yr_compiler_add_string. This way you handle all fopen/fread/fclose operations in your program and just pass a buffer to YARA. \n\nand ok,you can say \uff0ci should keep all modules compiled in option /MD\uff0c\nbut why?\nas a public library,why yara should have so many restrictions?\n\nIn fact is the other way around, you should not compile your program with /MD just because some yara.dll is built that way. What you should do is building your own yara.dll in a way which is suitable for your project.\n. Do you mean that Apple's XProtect uses YARA? If that's true I would be surprised. Any evidence? But in any case, I usually don't include companies in the list unless someone representing the company asks to be included.\n. Aha! nice discovery @sierkb  :)\nI have the same file in my Mac OS X. It has 99 rules. I'm not including Apple in the list cause nobody from Apple has asked to be included. But it's good to know.\n. Really weird :(\n. > Should ARENA_FILE_VERSION be increased because of the different SIZED_STRING layout?\nYes, we should\n. No idea, it seems like GitHub is doing something weird when merging branches.\n. You're probably right. As the list is short enough I'm going to ask individual copyright holders their opinion about this change. \n. Accepting ranges at the beginning/end of alternatives introduce a number of edge cases that is difficult to deal with. In the other side that was accepted in version 3.4.0 and prior, and this seems to be breaking some rules. \nI'm not sure how to deal with this, but I'm more inclined to keep rejecting those rules. Most rules making use of this \"feature\" can be rewritten in another way.\n. Fixed in e36464f4a220a94890ebaa8501f6bc5691a5f0c7\n. The latest version returns EXIT_SUCESS when you run it with --help. Are you using the latest one?\n. It's the same bug reported in #324. It's already fixed in the latest version. \n. This issue has been solved in version 3.6.0. Patch already applied.. The VS 2010 project is not supported anymore and the VS 2015 project has been revamped to make use of NuGet. . Same than #481\n. Same than #481\n. And the documentation is at http://yara.readthedocs.io/en/latest/modules/pe.html\n. @wxsBSD Could you add it to the documentation?\n. This is already implemented. It's disabled by default and should be enabled with ./configure --enable-profiling. That will add a member clock_ticks to both YR_RULE and YR_STRING structures that can be used as an indicator of which rules are the slowest. Search for yr_rules_print_profiling_info in rules.c for more details. Please notice that this is not a supported API yet. So, it can change in the future.\nI'm not closing this issue as we probably need to support it officially.. Which version of YARA are you using?\n. Interesting, I tested the rule with the latest version and didn't get a segfault. Can you provide a dump file or any other detail about your system configuration?\n. I can't load the dump file in my system. What operating system are you using?\n. Yes, that's the intended behaviour. Suppose that your condition is \"$a at 0x6\", in this case the rule is expected to match, because the regexp matches at position 0x6 too. YARA reports all the offsets where a regexp/string matches.\n. Could you add this new feature to the documentation in docs/modules/pe.rst?\n. Yes, it will be released in version 3.6.0\n. Fixed in f4b535fa2b8adb73a0494b8f96d16af0c920180d\n. Fixed in 64930a6ea2678e7ce2d1374c984a661eb0d388fa\n. The internal fatal errors are caused by strings like this one:\n$a0 = { 4a4249472333324465636f6465[0-100]73747265616d0a????????(40|41|42|43|44|45|46|47|48|49|4a|4b|4c|4d|4e|4f)(31|30|29|28|27|26|25|24|23|22|21|20|19|18|17|16|15|14|13|12|11|10|09|08|07|06|05|04|03|02|01|00)(8a|8b|8c|8d|8e|8f|90|91|92|93|94|95|96|97|98|99|9a|9b|9c|9d|9e|9f|a0|a1|a2|a3|a4|a5|a6|a7|a8|a9|aa|ab|ac|ad|ae|af|b0|b1|b2|b3|b4|b5|b6|b7|b8|b9|ba|bb|bc|bd|be|bf|c0|c1|c2|c3|c4|c5|c6|c7|c8|c9|ca|cb|cc|cd|ce|cf|d0|d1|d2|d3|d4|d5|d6|d7|d8|d9|da|db|dc|dd|de|df|e0|e1|e2|e3|e4|e5|e6|e7|e8|e9|ea|eb|ec|ed|ee|ef|f0|f1|f2|f3|f4|f5|f6|f7|f8|f9|fa|fb|fc|fd|fe|ff) }\nThose strings contain too many alternative (|) operators. Increasing RE_MAX_SPLIT_ID in re.c:58 mitigates the problem. With RE_MAX_SPLIT_ID = 255 only two rules fail with that error.\nI'm going to close this issue because this is the expected behavior.\n. Very interesting issue. YARA 3.5 improves the scanning time at the cost of spending more time compiling the rules, but you have hit one of the worst cases for the _yr_ac_build_transition_table function. Let me see what can I do to improve the compilation time in these extreme cases.\n. #873 reduces compilation time. In this particular case from ~6 seconds to ~1 second in my machine.. In this particular case YARA 1.7 makes a better job because PCRE is able to realize that the first byte of each regexp is a fixed one. For example, if the regexp starts with [\\x00]{1}... PCRE knows that the first byte must be 00. YARA 2.x in the other hand is unable to extract any atom from those regexps, so its forced to try every single one at every file offset.\nJust by changing the starting of the regexps from [\\x00]{1} to \\x00, [\\x01]{1} to \\x01 and so on, the performance improves an order of magnitude. \nI'll take this case into account for future improvements in the regexp engine, but going back to PCRE/re2 is not an option due to the internal design of YARA 2.x. Besides, cases like this are actually rare, in most cases YARA 2.x is faster than 1.x.\n. Hi @ewil, Coverity found a subtle bug in your commit that I fixed in 89c70ae6e05ddc2d79d7ee0f6a4de10f3cd36539. The tidx < MAX_THREADS check must be executed before YR_BITARRAY_TEST(rules->tidx_mask, tidx) to avoid an out-of-bound access in the tidx_mask array.\nThose bugs are hard to detect by reading the code, I introduced a similar one in the past and spent a few hours pulling out my hair before finding the problem (wasn't using Coverity back then). Fortunately Coverity does a very good job finding those subtle bugs. \n. I'm unable to reproduce this issue. With that rule YARA 3.5 is working fine for me. Are you able to reproduce it with this single rule? Or are you running YARA with more rules besides this one?\n. Still unable to reproduce it. A stack trace would be great.\n. plusvic at gmail\n. Closing because this issue is out of date. Please reopen if still valid.. Fixed in 658aec6227a61b848f66b004ebd16fadcf24b5e7\n. Yes, it was retagged. You can safely update to the new checksum.\n. Yes, I agree with @kallanreed in using the ReadFile instead. All other Windows-specific code interacts with the Windows API directly. \n. I regenerated lexer.c. The problem with removing flex- and bison-generated files from the repository is that Windows users usually don't have flex nor bison, so the files are not auto-generated for them.\n. Actually the solution I have in mind is something similar to @HostageBrain's proposal. Regular expressions already accept case insensitive modifier like this: /foobar/i, that could be extended to the wide modifier, for both regexps and strings. Something like: /foobar/w for regexps and \"foobar\"w for strings, or maybe \"foobar\"/w.\nThe same syntax could be use instead of the existing one in string declarations:\nstrings:\n   $a = \"foobar\"/iw\n   $a = /foobar/iw\nI'm still considering it carefully because I don't want to have too many ways of doing the same thing.\n. That would be a great contribution. Most people don't have a Windows setup\nto test their changes and it would be nice if we can detect this kind of\nissues promptly.\nOn Tue, Sep 20, 2016 at 11:17 PM, Kyle Reed notifications@github.com\nwrote:\n\nThe Windows project is somewhat broken right now - *ix specific code\nintroduced by contributors and it looks like there was an update to OpenSSL\nthat may have caused some import regressions.\nIdeally Windows would be CI, Travis doesn't support Windows. I'm taking a\nlook at AppVeyor which is free for open source projects.\nIf I can get it working on my fork, it would be useful to add AppVeyor CI\nto keep this project from regressing on Windows. Also, AppVeyor could be\nused to build Windows releases and deploy NuGet packages.\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/VirusTotal/yara/issues/523, or mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AALKmYq74uwg_BL7QJn7BgG0wRcmNTu6ks5qsE1bgaJpZM4KCJwX\n.\n. I've created an account but need to take a look on how to configure everything. Do you have any guidelines?\n. Fixed\n. Travis-CI builds are failing after this change.\n\nThis failure is particularly intriguing:\n* Error in `/usr/bin/x86_64-w64-mingw32-ld': free(): invalid pointer: 0x0000000001ec97f8 *\ncollect2: error: ld terminated with signal 6 [Aborted], core dumped\nA core dump in the linker itself?\n. The problem was apparently related to binary files generated by previous builds. A \"make clean\" before \"make\" solved the issue (see cfecd1105394d2697c95911786c947737e477bac). I thought that each build was performed in an isolated and clean environment, but doesn't seem to be the case.\n. Already addressed in other commits.\n. Yes, the plan is merging this module before launching version 3.6.0. I'm\njust merging the low-hanging fruits first.\nOn Tue, Nov 29, 2016 at 9:33 PM, Wesley Shields notifications@github.com\nwrote:\n\nAny plans on merging this? It adds some interesting features for dotnet\nanalysis and will serve as the basis for some other stuff I have in mind.\nIn particular we discussed adding support for wide modifier in conditions\nand I'd also like to explore string deobfuscation techniques in a module.\nFor example, I think it would be great to be able to say:\nfor any i in (0..dotnet.number_of_user_strings):\n(string.incrementing_xor(dotnet.user_strings[i], 0x41) == \"SECRET STRING\"\nwide)\nHaving the user strings parsed out is the first step in this.\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/VirusTotal/yara/pull/531#issuecomment-263690137, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AALKmZZJ96UmufzTlN5Chg-X4uYI70hAks5rDIwAgaJpZM4KNSQV\n.\n. @wxsBSD some test cases for the dotnet module would be great. Can you include a small .NET file in /tests/data and create some simple tests for it? . I've fixed this issue in 2a36c168bb2097c0831d4ddf24a6c04bafe28dca. In this solution the yr_rules_scan_*_e functions completely replace all variable definitions with the ones provided in the external_vars argument. Any variable previously defined at compile time or with yr_rules_define_* is lost. All external variables associated to the YR_RULES struct are completely ignored. I would prefer a solution where each thread could override the value for some external variable, but the variables defined during compile time are still valid.\n\nBesides, having to expose a new structure YR_EXT_VARS in the API seems like unnecessary and confusing. People would ask what's the difference between YR_EXT_VAR* and YR_EXTERNAL_VARIABLE*.\nThe solution I have for this is adding a set of functions yr_rules_define_*_variable_ex that would receive an additional argument indicating whether the variable definition is for all threads using the YR_RULES struct or only of the current thread. The existing  yr_rules_define_*_variable would simply call yr_rules_define_*_variable_ex. That's the only change from the API standpoint, no need to define and document new data structures. \n. What @hillu proposes have one advantage: you can override the variable in one thread and use the overriden value in another thread. The disadvantage is that the user must deal with allocating and de-allocating YR_EXTERNAL_VARIABLE structures, and take care of passing the correct values to\nyr_rules_scan_*  for the slot. It's also harder to understand.\nThe solution proposed by @bmagistro requires that variables are overriden from the thread that is going to use them, but yara takes care of all the allocation/deallocation of  YR_EXTERNAL_VARIABLE structures. The concept is pretty straightforward: you can define variables for all threads using the YR_RULES, or just for the current thread. I'm more inclined towards this approach.\nHowever, what @hillu pointed out is true, as the thread<->tidx association is not done until yr_rules_scan_mem_blocks is called, we can't rely in the tidx. We could use thread local storage (TLS) instead. But where do you store the TLS index? In YR_RULES? In that case you can't free the resources in yr_finalize_thread, you need to get a function called by each thread once they are done with the YR_RULES struct. A sort of per-thread yr_rules_destroy, not very elegant.\nI'll keep thinking about this tomorrow. Any idea is welcomed.\n. @bmagistro the API seems reasonable, but the implementation has a number of issues:\n\n\nThe variable overrides for all threads are mixed in a single list, which means that when a thread wants to override a new variable it needs to spend time iterating a long list where most of the items will belong to another thread. This can be easily avoided by using thread local storage.\n\n\nThe yr_compiler_define_x_variable functions are setting the current thread id to defined variables. This means that the only thread that will see those variables is the one compiling the rules, any other thread won't see those variables as they belong to another thread. The desired behaviour is that any variable defined during compile time are seen by all threads using the rules.\n\n\nFunctions yr_rules_define_local_x_variable are very similar, but the same code is repeated over and over.\n\n\nBesides, I would like to discuss what @hillu mentioned in:\n\n\n\nThe user has to go through extra steps to be able to use the same\nvariable-set from two different threads.\n\n\nYara is commonly used from higher-level languages where the runtime\nmay have abstracted away the concept of threads, e.g. Golang's\ngoroutines. I wrote and maintain a set of Yara bindings for Golang\n(https://github.com/hillu/go-yara) and I do not know if I would be able\nto make thread-bound local variables usable to users of my library at\nall.\n\n\n\nI don't see any issue with point 1. For using the same variable-set in two different threads the only thing you need to do is define the variables in any thread using yr_compiler_define_x_variable functions at compile-time or yr_rules_define_x_variable from any thread.\nBut point 2 is really important, is true that higher-level languages could have a thread-like abstraction not backed by OS threads, it could be an event loop running coroutines. So, probably it makes more sense to use an approach based in passing a set of variable definitions to yr_rules_scan_*\n. @bmagistro you're right, I missed the detail that you are not actually using the thread ids stored in external, I got confused by the unnecessary initialization in yr_rules_define_local_x_variable.\nAt this point the strongest argument against using a per-thread list of variable overrides is @hillu's point 2. That's something I didn't think about when advocating for this solution, but it's a very good point. To fully understand the problem you be familiar with coroutines. Which are basically routines that run independently, with their own execution flow, but not in parallel. In fact they usually run within the same OS thread. Coroutines usually yield the CPU control at certain points in their execution flows to a higher level entity (event loop) which orchestrates all the currently running coroutines, and then regain the CPU control back and keep running at the same point where they yielded before. This is a good read about coroutines: \nhttp://www.dabeaz.com/coroutines/Coroutines.pdf\nEven Windows has a little known feature called fibers which is basically the same concept: functions that run \"concurrently\" by cooperating with each other.\nIn such a context all coroutines would share the same set of variables for a YR_RULES structure, because all coroutines run in the same thread, but conceptually couroutines are independent pieces of code.\nSo, I think I'm going to use #559 as a base for this feature.\n. A solution for #350 was provided in https://github.com/VirusTotal/yara/commit/be0fc3f52f140d38a6a45db006ddc2b71d4de825.. No, modules don't have access to the list of matching strings. What modules do is exposing extra information to YARA that can be used in rules, but they don't have control over the matching strings.. This shouldn't be an issue anymore as we stoped using config.h.. @hillu Could you take a look at this?\nMy guess is that the intention with line 108 is getting the current mask in order to restore it later in line 120. But according to the documentation sigsetjmp saves the current mask if the second argument is non-zero, and the mask should be restored by siglongjmp. So, are the calls to pthread_sigmask actually necessary?\nOr maybe the intention of line 108 is making sure that SIGBUS is unmasked before executing the code in the try clause?\n. Same than #481.. This is worth a separate project and I'll leave it to the community. A previous effort was abandoned long ago. I guess Ruby is not that popular among the anti-malware community and there's no enough demand for this, but if anyone wants to implement Ruby bindings for YARA I'll be happy to support it.. *Why did you choose this value for this constant?\nThe value was chosen arbitrarily, it was supposed to cover the most typical regular expressions, but turned out that people sometimes write pretty complex regular expressions for YARA.\n*Can you increase it? Can you make it a 16 bit integer so it can be increased even further if someone needs it?\nYes, it can be increased. And I'm working on other fixes to this issue in https://github.com/VirusTotal/yara/commits/more_compact_re_code\n*What are the drawbacks of increasing this number?\nThe drawback is a little increase in memory consumption, but that's all.\n*Can you make the error more \"user-friendly\" explaining why it happened?\nSure, but once the new patches are deployed this shouldn't happen that frequently. Idealistically this limit shouldn't be hit for normal use of regular expressions.\n. Version 3.5.0 was prone to reaching the RE_MAX_SPLIT_ID limit, but after fixing some issues causing this problem it shouldn't be an issue anymore.. The reason for not allowing hyphens in identifiers and tags is because it is used as the minus operator. They could be accepted for tags, as tags can't appear in conditions, but for rule identifiers it introduces problems for the parser, you can't tell if foo-bar is a single identifier or if it means foo minus bar. That's why most programming language don't accept hyphens in identifiers.\nIn order to keep things simple and coherent I prefer not allowing hyphens in tags and handle them as standard identifiers. There are also some ideas about allowing tags to be used in conditions, and allowing hyphens in tags could be a problem in the future for implementing such features. \n. Yes, MSDN doesn't mention that InitializeCriticalSection() change last error. Returning 0 should be fine.\n. __try and __except are a Microsoft's extension, gcc doesn't support them. I'll simply return 0 and forget about the exception.\n. A solution for #350 was provided in https://github.com/VirusTotal/yara/commit/be0fc3f52f140d38a6a45db006ddc2b71d4de825.. Fixed in 53ddc4a8f7cf423a53168eefc10ae6c13dba67f8\n. Fixed in bf32e1e27a75459821bb41285517f245875260ba. Implemented in 00f3e1a80876a638ec9288a455c42c441d5a7c37 without changing the API. Already fixed in bf32e1e27a75459821bb41285517f245875260ba. What you need is:\nfor 3 i in (1..#a): (@a[i] >= 50 and @a[i] <= 100). @noxdafox I've merged your PR. The namespace is part of the public attributes of a rule, it just slipped through the cracks while writing the documentation.. I think it's a good idea. I don't have enough time to devote to prepare a v3.5.1 but if someone volunteer it would be great.. We already have a 3.5 branch (https://github.com/VirusTotal/yara/commits/3.5), you can handpick those commits fixing bugs and apply them to the 3.5 branch. We then create a 3.5.1 release based on that branch.. Closing this issue as 3.6.0 is already released.. Fixed in 890c3f850293176c0e996a602ffa88b315f4e98f. Fixed in eb491e03851a11bc811173f5e13c89cefa7257ac. Mmmm, if the regexp is /\\x/ it detects the end of the buffer and returns:\ninvalid regular expression \"$\": unexpected end of buffer\nAre you getting a SEGV with the change in eb491e03851a11bc811173f5e13c89cefa7257ac ?. Can you send a stack trace? I'm trying to reproduce the issue to no avail. . Can you elaborate a little more about what do you want to accomplish? The description of this issue is a bit cryptic.. What's the format of the data you pass to YARA?. So, what about this?\nrule catch_evil_data\n{\n  strings:\n    $evil = /tcp:\\w*evil_data/\n  condition:\n    $evil\n}. That can't be done. What you can do is using as many regexps as you need.. YARA only scans user memory space, not kernel space. Regarding how to create rules for your rookit samples, I'm afraid that's a very specific question out of the scope of this page. But the first step is finding the patterns that those rootkits have in common. . I'm closing this issue because it looks like a problem with the file path. Re-open the issue if you are still getting the same error after escaping backslashes and adding the missing colon.. @chintanhshah I'm doing some spring clean up and came across this issue, sorry for not answering before. \nLook-around features are not implemented in YARA because its regexp engine is not recursive and doesn't do backtracking. The advantage of this approach is that the running time doesn't blow up exponentially with certain regexps, but the drawback is that some features usually implemented by recursive regexp engines can't be implemented or are more complicated to implement.\nRegarding your use case I believe you want to detect dumps where some of the ssdt hooks point to a function not starting with \"nt\" or \"win\".\nWhat about this?\n```\nrule test\n{\n    strings:\n        $a = /(ssdt hooks)([^\\=])0x[a-f0-9]{1,3}\\s0x[a-f0-9]{8}\\s/\n        $b = /(ssdt hooks)([^\\=])0x[a-f0-9]{1,3}\\s0x[a-f0-9]{8}\\s(nt|win)/\ncondition:\n    for any i in (1..#a) : ( @a[i] != @b[i])\n\n}\n``\nThis rule tries to find the regexp with and without the \"nt\" or \"win\" strings, and make sure that both regexp match at the same offsets, if this doesn't happens the rule matches. It solves your problem?\n. Could you try to read the same file with some other program? Like, let's saycat`.. No, wasn't able to reproduce the issue. I set the same permission on a file and it worked fine.  It seems that you are scanning a directory, is that correct? What happens if you scan \"hack.php\" alone?. Like:\nyara rulesfile hack.php. Closing because not enough information was provided.. The division operation in YARA is a backslash () like the integer division in C.. @gwillem YARA 3.5 doesn't cache the hash results, but the latest version in master does it. . Fixed in 7f02eca670f29c00a1d2c305e96febae6ce5d37b. Fixed in ab906da53ff2a68c6fd6d1fa73f2b7c7bf0bc636. @stephenwvickers Great!. Already fixed.. After a loooong wait I finally made some time for addressing this issue. Let me know if #924 works for you. I' m sorry for the delay.. No, haven't include a configuration to build the DLL, but should be easy make one starting from the exiting ones for building the static library. If you want to create one and send a PR I'll be happy to merge it.. In cccfce3f9fb3ea45f3562550e7fc78d5a22f2a56 configure.ac was changed to check for header files too.. A new module for dex files has been already committed in e6e436008b7776a736960c2e53408e24c4323ddb. Hi Matt,\nThat's not possible with text strings, but you have regular expressions for those cases. You could use /UNION .* SELECT/  or /UNION [a-z] SELECT/. Check this: \nhttp://yara.readthedocs.io/en/v3.5.0/writingrules.html#regular-expressions\n. No, YARA doesn't have the notion of \"line\", because it wasn't designed with text files in mind. YARA treats all files as a sequence of raw bytes.. Could you clarify your question? I don't understand what you mean.\nAlso, for this kind of questions about how YARA works please use the forum https://groups.google.com/forum/#!forum/yara-project. This is for bug reports and feature requests.. Test cases for this module are failing when compiled for 32bit with -m32. \nCheck this: https://travis-ci.org/VirusTotal/yara/jobs/208363567. Could you take a look at what's happening?. I just need to make some time for reviewing the PR, I did take a quick look\nand there's something I miss, which is making the inclusion of the\n\"macho\"module configurable at build time, just like \"dotnet\". The idea is\nthat new modules are off by default and once they are tested enough\nin the wild they are enabled by default.\nOn Fri, Aug 11, 2017 at 6:28 PM, Sergi \u00c0lvarez i Capilla \nnotifications@github.com wrote:\n\n@plusvic https://github.com/plusvic ? there are tons of prs that lgtm\nand are green for a long time, anything missing to merge?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/VirusTotal/yara/pull/617#issuecomment-321858721, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AALKmZsxGv94mjYLaR5x3nHu4_F5oBaYks5sXIExgaJpZM4MUuJ8\n.\n. I'm not sure that dynamically loadable modules are worth the effort, at\nleast for the typical use case, and by dynamically loadable modules I mean\na module in compiled form that yara can load on the fly, a dynamic library\nin essence.\n\nHaving the modules in separate self-contained directories would be helpful\nindeed, because that way you can have your module in a separate repository\nand use git submodules to include it into yara's repo.\nOn Fri, Aug 11, 2017 at 6:42 PM, radare notifications@github.com wrote:\n\ni think that modules should change to be correct. there\u2019s no sense to\nmodify a project just to include an extension, those should be self\ncontained in separate directories, without having to patch makefiles and\nthey should be loaded dynamically too. it\u2019s pretty anoying to have\ndifferent forks of yara just for each seaprate module just because its not\nincluded in master or in release or just because of testing.\nthe only reason for not supporting dynamically loaded modules is\nperformance, but that shouldnt be a problem if people just use statically\nlinked modules like they do right now. but this is probably a topic to\ndiscuss in a different thread not here\n\nOn 11 Aug 2017, at 18:39, Victor M. Alvarez notifications@github.com\nwrote:\nI just need to make some time for reviewing the PR, I did take a quick\nlook\nand there's something I miss, which is making the inclusion of the\n\"macho\"module configurable at build time, just like \"dotnet\". The idea is\nthat new modules are off by default with, and once they are tested enough\nin the wild they are enabled by default.\nOn Fri, Aug 11, 2017 at 6:28 PM, Sergi \u00c0lvarez i Capilla \nnotifications@github.com wrote:\n\n@plusvic https://github.com/plusvic ? there are tons of prs that\nlgtm\nand are green for a long time, anything missing to merge?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/VirusTotal/yara/pull/617#issuecomment-321858721,\nor mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/\nAALKmZsxGv94mjYLaR5x3nHu4_F5oBaYks5sXIExgaJpZM4MUuJ8\n.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub https://github.com/\nVirusTotal/yara/pull/617#issuecomment-321861133, or mute the thread <\nhttps://github.com/notifications/unsubscribe-auth/AA3-\nlqh8VgvAEVNNpzbSo2r3ugGs3Bxxks5sXIO8gaJpZM4MUuJ8>.\n\n\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/VirusTotal/yara/pull/617#issuecomment-321861913, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AALKmWOvn8uDJBbB5KCla9-lvzGQ6pxdks5sXIR_gaJpZM4MUuJ8\n.\n. Coverity has found 8 issues with this PR:\n\n```\nHi,\nPlease find the latest report on new defect(s) introduced to plusvic/yara found with Coverity Scan.\n8 new defect(s) introduced to plusvic/yara found with Coverity Scan.\nNew defect(s) Reported-by: Coverity Scan\nShowing 8 of 8 defect(s)\n** CID 179966:  Program hangs  (NEGATIVE_RETURNS)\n/libyara/modules/macho.c: 124 in macho_offset_to_rva()\n\n* CID 179966:  Program hangs  (NEGATIVE_RETURNS)\n/libyara/modules/macho.c: 124 in macho_offset_to_rva()\n118     int macho_offset_to_rva(\n119         uint64_t offset,\n120         uint64_t result,\n121         YR_OBJECT object)\n122     {\n123       uint64_t segment_count = get_integer(object, \"number_of_segments\");\n\n\n\nCID 179966:  Program hangs  (NEGATIVE_RETURNS)\nUsing unsigned variable \"segment_count\" in a loop exit condition.\n\n124       for (uint64_t i = 0; i < segment_count; i++)\n125       {\n126         uint64_t start = get_integer(object, \"segments[%i].fileoff\", i);\n127         uint64_t end = start + get_integer(object, \"segments[%i].filesize\", i);\n128\n129         if (offset >= start && offset < end)\n\n\n\n** CID 179965:  Program hangs  (NEGATIVE_RETURNS)\n/libyara/modules/macho.c: 100 in macho_rva_to_offset()\n\n* CID 179965:  Program hangs  (NEGATIVE_RETURNS)\n/libyara/modules/macho.c: 100 in macho_rva_to_offset()\n94     int macho_rva_to_offset(\n95         uint64_t address,\n96         uint64_t result,\n97         YR_OBJECT object)\n98     {\n99       uint64_t segment_count = get_integer(object, \"number_of_segments\");\n\n\n\nCID 179965:  Program hangs  (NEGATIVE_RETURNS)\nUsing unsigned variable \"segment_count\" in a loop exit condition.\n\n100       for (uint64_t i = 0; i < segment_count; i++)\n101       {\n102         uint64_t start = get_integer(object, \"segments[%i].vmaddr\", i);\n103         uint64_t end = start + get_integer(object, \"segments[%i].vmsize\", i);\n104\n105         if (address >= start && address < end)\n\n\n\n** CID 179964:  Insecure data handling  (TAINTED_SCALAR)\n/libyara/modules/macho.c: 334 in macho_handle_segment_64_be()\n\n*** CID 179964:  Insecure data handling  (TAINTED_SCALAR)\n/libyara/modules/macho.c: 334 in macho_handle_segment_64_be()\n328       }                                                                            \\\n329     }                                                                              \\\n330\n331     MACHO_HANDLE_SEGMENT(32,le)\n332     MACHO_HANDLE_SEGMENT(64,le)\n333     MACHO_HANDLE_SEGMENT(32,be)\n\n\n\nCID 179964:  Insecure data handling  (TAINTED_SCALAR)\nUsing tainted variable \"_yr_bswap32(sg->nsects)\" as a loop boundary.\n\n334     MACHO_HANDLE_SEGMENT(64,be)\n335\n336\n337     // Parse Mach-O file with specific bit-width and byte order.\n338\n339     #define MACHO_PARSE_FILE(bits,bo)                                              \\\n\n\n\n** CID 179963:  Insecure data handling  (TAINTED_SCALAR)\n/libyara/modules/macho.c: 492 in macho_parse_fat_file_32()\n\n* CID 179963:  Insecure data handling  (TAINTED_SCALAR)\n/libyara/modules/macho.c: 492 in macho_parse_fat_file_32()\n486         / Get specific Mach-O file data. /                                       \\\n487         macho_parse_file(data + offset, file_size,                                 \\\n488                          get_object(object, \"file[%i]\", i), context);              \\\n489       }                                                                            \\\n490     }                                                                              \\\n491\n\n\n\nCID 179963:  Insecure data handling  (TAINTED_SCALAR)\nUsing tainted variable \"count\" as a loop boundary.\n\n492     MACHO_PARSE_FAT_FILE(32)\n493     MACHO_PARSE_FAT_FILE(64)\n494\n495\n496     // Parse Mach-O fat file.\n497\n\n\n\n** CID 179962:  Insecure data handling  (TAINTED_SCALAR)\n/libyara/modules/macho.c: 333 in macho_handle_segment_32_be()\n\n*** CID 179962:  Insecure data handling  (TAINTED_SCALAR)\n/libyara/modules/macho.c: 333 in macho_handle_segment_32_be()\n327         }                                                                          \\\n328       }                                                                            \\\n329     }                                                                              \\\n330\n331     MACHO_HANDLE_SEGMENT(32,le)\n332     MACHO_HANDLE_SEGMENT(64,le)\n\n\n\nCID 179962:  Insecure data handling  (TAINTED_SCALAR)\nUsing tainted variable \"_yr_bswap32(sg->nsects)\" as a loop boundary.\n\n333     MACHO_HANDLE_SEGMENT(32,be)\n334     MACHO_HANDLE_SEGMENT(64,be)\n335\n336\n337     // Parse Mach-O file with specific bit-width and byte order.\n338\n\n\n\n** CID 179961:  Insecure data handling  (TAINTED_SCALAR)\n/libyara/modules/macho.c: 493 in macho_parse_fat_file_64()\n\n*** CID 179961:  Insecure data handling  (TAINTED_SCALAR)\n/libyara/modules/macho.c: 493 in macho_parse_fat_file_64()\n487         macho_parse_file(data + offset, file_size,                                 \\\n488                          get_object(object, \"file[%i]\", i), context);              \\\n489       }                                                                            \\\n490     }                                                                              \\\n491\n492     MACHO_PARSE_FAT_FILE(32)\n\n\n\nCID 179961:  Insecure data handling  (TAINTED_SCALAR)\nUsing tainted variable \"count\" as a loop boundary.\n\n493     MACHO_PARSE_FAT_FILE(64)\n494\n495\n496     // Parse Mach-O fat file.\n497\n498     void macho_parse_fat_file(\n\n\n\n** CID 179960:  Insecure data handling  (TAINTED_SCALAR)\n/libyara/modules/macho.c: 405 in macho_parse_file_64_be()\n\n*** CID 179960:  Insecure data handling  (TAINTED_SCALAR)\n/libyara/modules/macho.c: 405 in macho_parse_file_64_be()\n399       set_integer(seg_count, object, \"number_of_segments\");                        \\\n400     }                                                                              \\\n401\n402     MACHO_PARSE_FILE(32,le)\n403     MACHO_PARSE_FILE(64,le)\n404     MACHO_PARSE_FILE(32,be)\n\n\n\nCID 179960:  Insecure data handling  (TAINTED_SCALAR)\nUsing tainted variable \"_yr_bswap32(header->ncmds)\" as a loop boundary.\n\n405     MACHO_PARSE_FILE(64,be)\n406\n407\n408     // Parse Mach-O file.\n409\n410     void macho_parse_file(\n\n\n\n** CID 179959:  Insecure data handling  (TAINTED_SCALAR)\n/libyara/modules/macho.c: 404 in macho_parse_file_32_be()\n\n*** CID 179959:  Insecure data handling  (TAINTED_SCALAR)\n/libyara/modules/macho.c: 404 in macho_parse_file_32_be()\n398                                                                                    \\\n399       set_integer(seg_count, object, \"number_of_segments\");                        \\\n400     }                                                                              \\\n401\n402     MACHO_PARSE_FILE(32,le)\n403     MACHO_PARSE_FILE(64,le)\n\n\n\nCID 179959:  Insecure data handling  (TAINTED_SCALAR)\nUsing tainted variable \"_yr_bswap32(header->ncmds)\" as a loop boundary.\n\n404     MACHO_PARSE_FILE(32,be)\n405     MACHO_PARSE_FILE(64,be)\n406\n407\n408     // Parse Mach-O file.\n409\n\n\n\n``. I'll review the changes inhex_grammar.y`. \nBesides the issues found by Coverity, ASAN found a heap overflow, it may be related, maybe not, I didn't look into the details. I can share the poc file.\n````\nINFO: Seed: 4052154712\nINFO: Loaded 1 modules   (6559 inline 8-bit counters): 6559 [0x99a4c8, 0x99be67), \nINFO: Loaded 1 PC tables (6559 PCs): 6559 [0x707390,0x720d80), \nINFO:       10 files found in /tmp/input\nINFO: -max_len is not provided; libFuzzer will not generate inputs larger than 62032 bytes\nINFO: seed corpus: files: 10 min: 20b max: 62032b total: 165977b rss: 45Mb\n=================================================================\n==10==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x603000005220 at pc 0x00000056d612 bp 0x7fff25eb7d20 sp 0x7fff25eb7d18\nREAD of size 4 at 0x603000005220 thread T0\nSCARINESS: 17 (4-byte-read-heap-buffer-overflow)\n    #0 0x56d611 in macho_parse_file_32_le /src/yara/libyara/modules/macho.c:402:1\n    #1 0x5762e8 in macho__load /src/yara/libyara/modules/macho.c:1150:7\n    #2 0x52af68 in yr_modules_load /src/yara/libyara/modules.c:175:16\n    #3 0x5946e2 in yr_execute_code /src/yara/libyara/exec.c:865:18\n    #4 0x543eba in yr_rules_scan_mem_blocks /src/yara/libyara/rules.c:472:3\n    #5 0x54509e in yr_rules_scan_mem /src/yara/libyara/rules.c:586:10\n    #6 0x51aa28 in LLVMFuzzerTestOneInput /src/yara/tests/oss-fuzz/macho_fuzzer.cc:77:3\n    #7 0x5dc3c0 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const, unsigned long) /src/libfuzzer/FuzzerLoop.cpp:512:13\n    #8 0x5daa76 in fuzzer::Fuzzer::RunOne(unsigned char const, unsigned long, bool, fuzzer::InputInfo) /src/libfuzzer/FuzzerLoop.cpp:440:3\n    #9 0x5df4b2 in fuzzer::Fuzzer::ReadAndExecuteSeedCorpora(std::__1::vector, std::__1::allocator >, fuzzer::fuzzer_allocator, std::__1::allocator > > > const&) /src/libfuzzer/FuzzerLoop.cpp:715:7\n    #10 0x5dfbe8 in fuzzer::Fuzzer::Loop(std::__1::vector, std::__1::allocator >, fuzzer::fuzzer_allocator, std::__1::allocator > > > const&) /src/libfuzzer/FuzzerLoop.cpp:731:3\n    #11 0x5c6c3d in fuzzer::FuzzerDriver(int, char*, int ()(unsigned char const, unsigned long)) /src/libfuzzer/FuzzerDriver.cpp:743:6\n    #12 0x5b9e78 in main /src/libfuzzer/FuzzerMain.cpp:20:10\n    #13 0x7f92f1bec82f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2082f)\n    #14 0x41c638 in _start (/out/macho_fuzzer+0x41c638)\n0x603000005220 is located 4 bytes to the right of 28-byte region [0x603000005200,0x60300000521c)\nallocated by thread T0 here:\n    #0 0x516628 in operator new /src/llvm/projects/compiler-rt/lib/asan/asan_new_delete.cc:95\n    #1 0x5dc1a8 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const, unsigned long) /src/libfuzzer/FuzzerLoop.cpp:503:23\n    #2 0x5daa76 in fuzzer::Fuzzer::RunOne(unsigned char const, unsigned long, bool, fuzzer::InputInfo) /src/libfuzzer/FuzzerLoop.cpp:440:3\n    #3 0x5df4b2 in fuzzer::Fuzzer::ReadAndExecuteSeedCorpora(std::__1::vector, std::__1::allocator >, fuzzer::fuzzer_allocator, std::__1::allocator > > > const&) /src/libfuzzer/FuzzerLoop.cpp:715:7\n    #4 0x5dfbe8 in fuzzer::Fuzzer::Loop(std::__1::vector, std::__1::allocator >, fuzzer::fuzzer_allocator, std::__1::allocator > > > const&) /src/libfuzzer/FuzzerLoop.cpp:731:3\n    #5 0x5c6c3d in fuzzer::FuzzerDriver(int, char*, int ()(unsigned char const, unsigned long)) /src/libfuzzer/FuzzerDriver.cpp:743:6\n    #6 0x5b9e78 in main /src/libfuzzer/FuzzerMain.cpp:20:10\n    #7 0x7f92f1bec82f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2082f)\nSUMMARY: AddressSanitizer: heap-buffer-overflow /src/yara/libyara/modules/macho.c:402:1 in macho_parse_file_32_le\nShadow bytes around the buggy address:\n  0x0c067fff89f0: fa fa fd fd fd fa fa fa fd fd fd fd fa fa fd fd\n  0x0c067fff8a00: fd fd fa fa fd fd fd fa fa fa fd fd fd fa fa fa\n  0x0c067fff8a10: fd fd fd fa fa fa fd fd fd fa fa fa fd fd fd fa\n  0x0c067fff8a20: fa fa fd fd fd fa fa fa fd fd fd fd fa fa fd fd\n  0x0c067fff8a30: fd fa fa fa 00 00 04 fa fa fa 00 00 00 04 fa fa\n=>0x0c067fff8a40: 00 00 00 04[fa]fa 00 00 00 fa fa fa 00 00 00 fa\n  0x0c067fff8a50: fa fa 00 00 00 fa fa fa 00 00 02 fa fa fa 00 00\n  0x0c067fff8a60: 01 fa fa fa 00 00 01 fa fa fa 00 00 01 fa fa fa\n  0x0c067fff8a70: 00 00 01 fa fa fa 00 00 03 fa fa fa 00 00 00 04\n  0x0c067fff8a80: fa fa 00 00 05 fa fa fa 00 00 07 fa fa fa 00 00\n  0x0c067fff8a90: 02 fa fa fa 00 00 01 fa fa fa 00 00 04 fa fa fa\nShadow byte legend (one shadow byte represents 8 application bytes):\n  Addressable:           00\n  Partially addressable: 01 02 03 04 05 06 07 \n  Heap left redzone:       fa\n  Freed heap region:       fd\n  Stack left redzone:      f1\n  Stack mid redzone:       f2\n  Stack right redzone:     f3\n  Stack after return:      f5\n  Stack use after scope:   f8\n  Global redzone:          f9\n  Global init order:       f6\n  Poisoned by user:        f7\n  Container overflow:      fc\n  Array cookie:            ac\n  Intra object redzone:    bb\n  ASan internal:           fe\n  Left alloca redzone:     ca\n  Right alloca redzone:    cb\n==10==ABORTING\nMS: 0 ; base unit: 0000000000000000000000000000000000000000\n0xce,0xfa,0xed,0xfe,0x7,0x0,0x0,0x0,0x3,0x0,0x0,0x0,0x6,0x0,0x0,0x0,0x12,0x0,0x0,0x0,0xfc,0xa,0x0,0x0,0x85,0x0,0x10,0x0,\n\\xce\\xfa\\xed\\xfe\\x07\\x00\\x00\\x00\\x03\\x00\\x00\\x00\\x06\\x00\\x00\\x00\\x12\\x00\\x00\\x00\\xfc\\x0a\\x00\\x00\\x85\\x00\\x10\\x00\nartifact_prefix='./'; Test unit written to ./crash-083a09b7a6b6bc21c1be120b5ae8e3d667cf9db4\nBase64: zvrt/gcAAAADAAAABgAAABIAAAD8CgAAhQAQAA==\n```\n. In 300374fe169ee100320aee70ed9c846650be4b3b I've excluded the macho from the build by default. You need to use ./configure --enable-macho for building the module into YARA. . @wxsBSD would you mind taking a look at this change? I think set_sized_string can be used for setting the \"version\" attribute. The only situation where my change behaves different is if the version string contains a NULL character, is that the reason for doing it like that? or is just that you missed set_sized_string?. Ok. Great!. That's the intended behavior indeed. YARA reports all the offsets within the file where the string or regexp matches, no matter if the matches overlap. Why? Because in YARA you can create conditions like $regexp at 3 which basically means: Does $regexp match at offset 3? In this case the answer is true, the regexp matches at offsets 0 and 3 for the string \"foofoobar\".\nAdding a command-line option for showing only non-overlapping matches is relatively easy, but it introduces further issues, for example suppose that your condition is $regexp at 3, and you run:\n$ yara --print-non-overlapping-matches-only -s rules.yar test.txt\nregex test.txt\n0x0:$regex: foofoobar\\x0A\nYARA will correctly report that the rule is matching, but it will only show the match at offset 0. Users could start wondering why $regexp at 3 is true but they only see the match at offset 0. As the user is explicitly using --print-non-overlapping-matches-only he probably understands what's going on, but unless this option has a really important practical use-case I would prefer not adding it. \nCan you provide more context on why do you miss this feature?\n. The option you are looking for is probably --fast-scan. With this option once YARA finds a match for a particular string it stops looking for more matches for the same string. Notice however that $str1 and $str2 are considered different strings even if they are both \"foo\", so YARA will look for the first match for $str1 and the first match for $str2. Also, not all string are suitable to be optimized with --fast-scan, if the string is used in a condition like #str > 10 (number of occurrences of $str larger than 10) YARA will keep looking for more matches even if you are using --fast-scan, because it needs them in order to verify if the condition is true or not.. Closing as version 3.6 is already out.. yara doesn't force you to use yarac, that's optional. yarac is used mainly when you want to use the same rules over and over again, so you don't need to compile the rules multiple times. If I understood right you have rules in more than one files and you want to be able to scan a file with all the rules contained in those multiple files, right?\n. Implemented in 632a6ab2411ab9e296ce05224199f1e3927f487a.. I'm curious about this too.. Recovering the source rules from compiled ones is unfeasible.. Closing this issue as version 3.6.0 is already out.. @hillu, I think @rspeaker is right, and this issue applies to Linux too. Any thoughts?. Closed in c90cb174f3206c439adc3758309b412eceaaae13.. Already fixed.. What about POSIX systems? I mean, I believe this issue also applies to POSIX. We are setting a signal handler for SIGBUS and SIGSEGV during the duration of the scanning, if another thread causes such a signal our handler is going to be called and the assertion will fail. Am I right?. Fixed as the new documentation was published.. I guess this issue can be closed as all points have been addressed. Right?. @HostageBrain can you share the rules that are triggering this issue?\nAt which point are your page in the state page->size = 0x20000 page->used = 0x1ffff? It's before or after calling yr_parser_emit(yyscanner, OP_AND, &and_addr) ?. If you can enter into our Gitter channel i can help you to debug the issue.. @HostageBrain check out branch issue_654 and let me know if it solved the problem.. The warning has been disabled. The VS2010 project has been completely removed from the repository as it has become a maintenance burden.. This has been a desired feature for a long time (see #61). . Closing is this is a duplicate of #61.. Implemented in #898.. I'm closing this issue as it seems a bit outdated. If this is a still an issue please re-open it.. This is because comments are now allowed inside hex strings (see #455) , and YARA is identifying the sequence { // } as an hex string. Unfortunately this ambiguity doesn't have an easy solution and this is a very uncommon edge-case, so it won't be fixed.. Yes sure, as long as it avoids the stack overflow we should go for the largest number.. @wxsBSD actually I had a similar problem and had to create my own rule to trigger the bug. I just used a very long regexp, like /xxxxxxxxx...{a few thousand more}.....xxxxxxxxxxxx/. Maybe @fumfel has a smaller stack size limit and the bug is triggered in his system but not in yours. Check your stack size limit with ulimit -s. In my case is 8192KB, @fumfel, what's the maximum stack size in your test system?. @marnao a 6000 limit should be safe too. In a 64 bits system my estimation is that each recursive call to _yr_re_emit() consumes around 180 bytes of stack space. So, setting the limit to 10000 will consume around 1.8MB of stack. With the typical 8MB stack space that's less than 25%.\nHowever I wonder what kind of regular expressions are hitting the 2000 limit, I'm afraid that by raising the limit I could be encouraging massive regular expressions that don't actually make sense.. Are you getting the error with latest version? Notice that version 3.5.0 was wasteful with split IDs, but that was improved in version 3.6.0.. Fixed in 11ffa8817fec31021fccc3e22d5a41e8bc968539. Please use the forum for this kind of questions. Let's use this place for bugs, issues and feature requests only.. I'm unable to reproduce this issue with the /usr/bin/strings I have. Can you send me the exact /usr/bin/strings you are using?. Never mind, I've identified the problem.. @fumfel please check with the latest commit, which should solve this problem. By the way you're doing a great job in fuzzing YARA, I would love to hear about your setup.. Cool!. That's intended. The documentation won't be updated for revisions, only for major and minor version increases. New revisions only include bug fixes, no new features that require updating the documentation.. @cobrimusic YARA doesn't need to be installed, you just need to copy the EXE files to some place in your system as you already did.  The fileyara64.exe is YARA's command-line tool, and it receives\ntwo arguments: a file with the yara rules, and the file/folder/process that you want to scan. See this: http://yara.readthedocs.io/en/v3.6.0/commandline.html\nFor this kind of questions please use the forum. Open an issue only for reporting bugs and ask for new features. . Fixed in 41af10045ccc9ffa57954adadcbafed991de28c6. This issue has been fixed in https://github.com/VirusTotal/yara-python/commit/21821a39e8ccd5cfe925156eb6404805cdd5ec54. @fumfel I think this issue should be solved with the latest commit. I'm not able to verify it because MemorySanitizer doesn't seem to work with Mac OS X and I don't have a Linux machine around. Could you check if it works fine now?. @fumfel I think this issue should be solved with the latest commit. I'm not able to verify it because MemorySanitizer doesn't seem to work with Mac OS X and I don't have a Linux machine around. Could you check if it works fine now?. Fixed in af0c74545731d2fecdcb67f4ea338ce9b39bb1db. This is because this other issue https://github.com/VirusTotal/yara/issues/674\nRE_MAX_AST_LEVELS was introduced to avoid stack overflows and it currently has a value of 3000. It can be set to a larger value, maybe 3000 is too low for some existing rules. \nBut I highly discourage the use of such long strings as they are usually unnecessary. A few hundred bytes should be enough, you don't need thousands of bytes for creating a very unique string.. RE_MAX_AST_LEVELS increased to 6000 in 245149182fe8278ae6732c708c0ce0a302846b98. It looks like the JSON file couldn't be loaded for some reason. Can you provide the JSON report?. I found the root cause of this issue. The error is caused by the null characters embedded in the string at line 7254. I've fixed it with this commit a13cf411c1db7858a1886c6d67d0b058891e05f2. As @wxsBSD said this is intentional. Tokens starting with digits are treated as numbers, if we accept identifiers starting with numbers we can not distinguish if 100KB is an identifier or a number (like in filesize > 100KB) . Why would you want to read the reparse point data instead of the file being pointed to? \nWhen you have a symbolic link in a file system and you open it, you usually expect to open the linked file. If the link is broken you expect an error. By adding the FILE_FLAG_OPEN_REPARSE_POINT you won't be able to use symbolic links for scanning the linked file anymore.. In ac368637fa2bdd32614b134ba5236d2717ed1a56 I'm removing MAX_HEX_STRINGS_TOKENS as it is not necessary anymore. A better error message is printed when RE_MAX_AST_TOKENS is reached. I'm not increasing RE_MAX_AST_TOKENS because with a value of 7500 the program overflows the stack when compiled with AddressSanitizer. Let's keep it at 6000, which is enough for reasonably long strings.. This should be fixed with c16c7d90cd31eb7fe73dd7f95bd2518da5c84c89. Any confirmation will be welcomed.. YARA can scan a buffer in memory, in those cases a file name won't be available. Passing a file name as an argument to yr_rules_scan_mem doesn't look like a good API design, and breaks backward compatibility.. The problem with the file you sent is that the size field of ARENA_FILE_HEADER (see: https://github.com/VirusTotal/yara/blob/master/libyara/arena.c#L58) is incorrect. The current value is 0x5CF8 but it should be 0x5CE8. \nYARA compiled files have the following layout:\n<--header--><-- data --><-- relocs -->\nThe size field in the header contains the size of the data section. As it is 16 bytes larger than expected the first 4 relocation offsets are considered part of the data and not processed as they should. This means that there are 4 pointers in YARA data structures that weren't properly relocated and they contain invalid addresses.\nThe right solution for avoiding this kind of issues is implementing some kind of integrity check, like calculating some hash for the file.\nDid you manually changed the header? Or it just happened? . The program doesn't have a way for knowing that those relocations weren't applied, it relies on the value for size to know where the data ends and the relocations begin, if size is modified there's little that the program can do to figure out where the relocations actually begins. As I said before the solution for avoiding this kind of issues is implementing an integrity check and reject any file that has been tampered.\nIf you start fuzzing compiled rules you are going to find a lot of crashes, and that's expected because YARA trusts the content of those files and assume they are correct. For that reason you shouldn't use YARA with a compiled rules file coming from a untrusted source. For using compiled rules coming from the outside world an integrity checking mechanism is a must.\nIf you want to fuzz YARA you should fuzz rules in source form, not in binary form.\nPS: Actually, for using compiled rules coming from untrusted sources an integrity check based on a CRC, MD5 or similar hash function is not enough, because a malicious file could be created with the correct hash to pass the integrity check. A digital signature would be required in that case. \n. An integrity check has been implemented in 361f77457becd4e18136caf7fc46f5b7d52da778. Now YARA does not load any compiled rules that has been corrupted. Notice however that this isn't a security mechanism, a maliciously crafted file can still crash YARA.. I understand your point, but at the end everything depends on which guarantee you are willing to make or where you put the walls for your walled garden. YARA guarantees that it will be safe to compile a rule coming from an untrusted source and that you won't be able to crash or exploit the program by using a malformed/malicious source file. That's a very important guarantee that YARA can't ignore. \nHowever, compiled rules are not necessarily in the same case. The ability to write/read compiled rules to/from a file was put there as a convenience feature intended to avoid compiling the same rules over and over again, it was not designed with the idea of sharing compiled rules with untrusted sources. That's why YARA assumes that the compiled rules are correct and it doesn't defend itself from malformed files. To put it in another way, compiled rules are not considered user input, the actual user input is the source file, compiled rules are just an intermediate representation that you can reuse.\nIf your intention is receiving compiled rules from untrusted sources then additional guarantees should be made, but with the current ones that's a very bad idea.. BTW: If I didn't manage to convince you drop me an email and we can discuss it at length in Spanish ;)\n. I agree on fixing any bug that may cause a buffer overflow, but that's the only guarantee that it can be made when loading compiled rules from untrusted sources. Guaranteeing that YARA won't crash in other forms (like invalid pointer dereferences) is imposible due to the way in which compiled rules are saved. A malicious attacker will always be able to craft a compiled rules file that would make the program crash.\nDistributing rules in compiled form makes sense in certain escenarios, like for example vendors selling appliances or products integrating YARA and providing the rules for them, but they don't want the users to have access to the rules. That's a legit use case, but in those cases the vendors should be implementing a digital signature mechanism in which they can send the rules signed to the appliance/product, so the product is able to verify that the rules are authentic before loading them.\n. Fixed in 9e7390c5756f9af91c1df9f007a24317eddd2b80. If the stack pointer is 0 when a pop(x) is reached either we have a bug in the code generation logic or the compiled code is corrupted. An assert(sp > 0) in the pop(x) macro would make sense to prevent the former case, for the latter case I've already implemented a checksum to ensure that the compiled code is correct.\nI wouldn't treat this as a runtime error because this is not a situation that can be a consequence of user input or other external factors.. I've added the assert in fd1540de0f8c4f0d96b30910cff50a5a9507d8d8. Another alternative for fixing this issue is https://github.com/VirusTotal/yara/pull/759. Are you able to reproduce the issue? Can you verify if this solution works for you?. Closing this PR as it should be solved with #759.. Fixed in #874.. Fixed in 632a6ab2411ab9e296ce05224199f1e3927f487a. Fixed in cb5cb2885e8ecec7c704a3573aee9dbb2b6fc3af. Already merged in c0fa0bf760fe2fe82a7216daed34feb2c4641307. Fixed via #732. I'm not very familiar with emscripten, but given YARA's complexity and it's dependencies on certain libraries I don't think that's possible.. What's exactly your question?. Some variables like \"positives\", \"file_type\", \"signatures\" and so on are supported in VirusTotal's Malware Hunting, but not in VirusTotal's Retrohunt. Also keep in mind that those variables are specific to Malware Hunting, not YARA in general.. But that's exactly what the wide modifier does, right? I mean, these two strings are equivalent:\n```\n$s1 = \"http://\" wide\n$s1 = { 68 00 74 00 74 00 70 00 3a 00 2f 00 2f 00 }\n```. For general questions like this one please use the forum: https://groups.google.com/forum/#!forum/yara-project\nIf your question is which IDE do I use for developing YARA the answer is none. I use a code editor, I started with Sublime Text, tried Atom for a while, and now I'm using Visual Studio Code. I build YARA with a plain make from the command line, and sometimes use XCode for debugging.. Yes, it could be confusing if you haven't seen the rule, but as a soon as\nyou see that the current time is involved in the condition you will\nprobably figure out what's happening. I see a lot of value to this in\nVirusTotal's malware hunting for example, where you could set a rule that\ntriggers only on recently compiled PE files or stuff like that. Without\nhaving to worry about your rule becoming obsolete in the future.\nOn Fri, Sep 29, 2017 at 12:27 AM, Wesley Shields notifications@github.com\nwrote:\n\nI thought about this when I was doing the signatures stuff years ago. I\ndecided against implementing this because it would make rules that use it\ntemporally dependent. I didn\u2019t like the idea of a rule firing one second\nand not the next, for the same file.\nI certainly see value in the idea though. I just couldn\u2019t convince myself\nit was worth the trade off.\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/VirusTotal/yara/issues/743#issuecomment-332981014,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AALKme2vBfuwpIPKkyT6WeJ-Rfrz__WFks5snB03gaJpZM4PnlU3\n.\n. Definitely option 3, much more flexible and doesn't require changes in the language itself.. Can you provide more details about what steps you followed and what rules you used?. It could be related to #699. What version are you using? It's a 32-bit version on a 64-bit Windows?. YARA doesn't accept a directory with multiple files as an input for rules. In version 3.4.0 a single rules file can be used. With the latest version in master you can specify multiple files, like in:\n\n$yara rules_1 rules_2 rules_3 file_to_scan. Fixed in 3879a9546b18343cb751f5a2a091915c6ef021f8. This could be related to #695. I did some experimentation with an ARM CPU and the same test crashed because of a bug in flex (see: https://github.com/VirusTotal/yara/commit/4d3d586adf1ae7856dda4186d812243e0b401dc0). After upgrading to flex 2.6.4 the problem disappeared.\n. Btw, if you can test the latest version in master in AIX/PowerPC it would be great. I want to release version 3.7.0 soon, and it would be great if we confirm that it runs in as many platforms as possible.. By mid November I think.\nOn Thu, Oct 19, 2017 at 11:49 AM, Hilko Bengen notifications@github.com\nwrote:\n\nAll tests run fine. ./configure --disable-shared, with OpenSSL installed.\nWhen do you plan to release 3.7?\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/VirusTotal/yara/issues/762#issuecomment-337857634,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AALKmZIjLka4sFJ4PTmufwdjZUJbUFAmks5stxsNgaJpZM4P-ME9\n.\n. What's your operating system? Windows? Linux?. If you are able to build and install yara with androguard module nebaled then you can use sudo python setup.py build --dynamic-linking for linking yara-python against the library you just built.. Fixed in 554b5df4db9ca41a6cc4f67f9956746430107a01. Do you have files /proc/XX/maps and /proc/XX/mem on AIX? Does they have the same structure than in Linux? If not, we should completely disable process scanning in AIX or implementing something specific for AIX.. If you would like to have support for process scanning on AIX go ahead, that would be a nice addition.. In case you decide to implement it, I think it would be better to split the proc.c file into multiple files (one per platform) under a /proc directory.. Why are you surprised? The PR was good :). Installing flex 2.6.4 is not enough, you must delete libyara/re_lexer.c and re-build. Did you try that?. You are right, the assert can trigger in a low memory condition. Is that what you mean?. In that case I wouldn't bother about implementing process scanning for AIX. If someone actually needs this feature and will be able to support it in the long term I would include it, but if not, I don't think the demand for AIX is high enough to be worth the effort.. Done in #788. Feel free to re-open this issue if it's still a problem, but please provide little more context.. Did you close this PR? Should I merge it?. That won't be possible, the internal structure of compiled rules are not designed with that idea in mind and it would be fairly complicated to do so.. Commit a71b40b1250a39016523eab72977df715da8ab54 should solve this issue.. This is an interesting case. The regular expression is not long enough to reach the limit of 6000\ncharacters (RE_MAX_AST_LEVELS), but it's long enough to exhaust the stack when AddressSanitizer is enabled. This is because AddressSanitizer consumes a lot of stack space, and therefore the number of nested calls the program can do safely is drastically reduced. The same input doesn't cause an stack overflow if AddressSanitizer is disabled as the program has more stack available.\n\nThere has been some back and forth for RE_MAX_AST_LEVELS in the past (see #674) but 5000 some to be the sweet spot.. @trufae can you provide more details about how to reproduce the issue? I did some quick tests both in Mac OS X and Windows and relative path includes are working fine for me in version 3.7.0. There's even a test case for includes that consists in a relative include. So, maybe you hit some particular bug.. Perfect, now I see the problem. It happens when the path in some include directive is not relative to the current path. I'll commit a fix as soon as possible.. If you do that you will have an out-of-bounds access in line 2048. Can you explain more about your case? Can you share the file for which the checksum is calculated wrongly?. Fixed in 21d82ff7ddaf7c01e9b3a7364f4cb3820870bcb2. Which operating system are you using? Is it Windows?. I'm open to start using CMake, in fact I considered it at some point and discarded the idea because I didn't have enough time to get familiarized with CMake.. Fixed in e640f9893a931c100d6c601135b13f533d309a10. ltmain.sh is automatically generated, it's not committed to the repository.\n. I had the same problem with go-yara recently. A nil-pointer dereference caused a SIGSEGV in some other portion of my code totally unrelated to YARA, but the signal was captured by YARA's handler and reached the assert statement. The assertion caused a SIGABRT and as a result Go coredumped the process as expected, but the original cause of the problem was hidden. It wasn't until I changed go-yara to use SCAN_FLAGS_NO_TRYCATCH that I discovered that the issue wasn't related to YARA or go-yara at all.\nSo I'm starting to wonder if it would be better to let the application install the signal handler if needed, or at least make SCAN_FLAGS_NO_TRYCATCH the default option. The signal handler can be problematic when using YARA as a library within a larger program. . I would do both, setting SCAN_FLAGS_NO_TRYCATCH as the default and chaining signal handlers. I have some questions about https://github.com/hillu/yara/tree/chained-signal-handler, I'll comment there.. Implementing \\v is relatively easy, but as @wxsBSD said the regexp would match the file anyways. The character in between \"first\" and \"second\" is a line-feed character, so it should match [^\\v] as it is not a vertical tab.. That seems to be the semantic of \\v as implemented by Perl, but not all regexp engines treat \\v in the same form. In Python for example \\v only matches the 0x0B character. According to this there no agreement on the meaning of \\v. . Good catch @deterb.. Sounds reasonable. Probably the most common scenario is passing the wide character string to some function that does the xoring as it would be a buffer of bytes.. > Would it be better to generate atoms for both ways of doing it? That would cover both possibilities at the expense of more atoms to search for, though I don\u2019t think it would be that bad?\nI don't think so, I would leave it as it is now unless we see some evidence that both ways are equally common.\n. In YARA a value is UNDEFINED when the actual value is known. In this case, if the PE module can't determine the number of imports/exports (because the file is not a PE, or it's an invalid PE) the value for pe.number_of_imports will be UNDEFINED. If you use pe.number_of_imports in your condition (like in pe.number_of_imports == 0) the value of that condition is also UNDEFINED, which means, that YARA can't tell whether is true or false. You can use that condition together with something else, like pe.number_of_imports == 0 or <expr>, In this case if  is true the whole condition is true, no matter if pe.number_of_imports == 0 is UNDEFINED, because YARA can't tell if pe.number_of_imports == 0 is true, but it does can tell that <expr> is true, so the or operation is true, no matter the outcome for pe.number_of_imports == 0.\nWith the and operation it behaves differently, the outcome of pe.number_of_imports == 0 or <expr> will be UNDEFINED if pe.number_of_imports == 0 is UNDEFINED, because no matter what happens with <expr>, we can't tell for sure if the full expression is true or false.\nSo, in general the idea is that you shouldn't explicitly ask whether something is UNDEFINED, you simply use it in your expression, and if its undefined YARA will follow the logic explained above.\nCan you explain a bit more about your case? Why would you want to check for pe.number_of_imports == UNDEFINED?. I'm afraid that won't be possible. Calling Python code from the yara is not in the roadmap as it would introduce a lot of complexity that doesn't actually pay off.. The link has been updated in the documentation for the latest version.. It's #data_format < 10 not #$data_format < 10. Notice that $ is replaced with #.. Can you explain a bit more about what's the issue? What result do you expect?. The rule matches your file, the clause #data_format < 10 is true because the number of matches for $data_format is zero, as the string \"#EXTINF\" doesn't appear in your file.. Duplicate of #844.. The -r option is for scanning directories recursively, but in yara-python you can only scan individual files. If you want to scan a directory using yara-python you must traverse the directories yourself. You can use os.walk() for that.. That's probably because you have rules with the same name. In the best case scenario the duplicated identifiers belong to rules that are exactly the same (two or more vendors can be using rules from a common source).\nYou can not ignore the error, but you can use a different namespace for each vendor. This can't be done with the command-line tool, but you could use yara-python to compile the rules and scan your files. Here you can find how to use namespaces with yara-python.. I believe you posted your issue in the wrong project. How this relate to YARA?. Yes, I think this issue can be closed.. Duplicate of #864.. Just add it to https://github.com/VirusTotal/yara/blob/master/docs/modules/pe.rst as the rest of the fields.. No, you don't need to create a separate thread for scanning each process, you can scan one process at a time with the same scanner on a single thread.\nDoes this happens always with the second process independently of which process it is? Or the second process is always the same one?\nAs the error suggests the problem is that yara couldn't attach to the process for some reason, maybe because it's a system protected process or some reason.. I don't remember any memory leak like that. What version are you using? Are you able to reproduce the issue with a simple program that I can compile and debug?. Fixed by #887. Have you checked this: https://github.com/VirusTotal/yara/blob/master/libyara/modules/macho.c?. It looks like you don't have libmagic installed, try with apt-get install libmagic-dev if you use Debian or Ubuntu. For other distributions you should find which is the name of the package containing libmagic's development headers.. Thanks @bnbdr, the write-up is a nice read, you have explained everything in detail. I've committed a first patch in #892, I'll keep studying other possible mitigations later.. @bnbdr I have a question. In your write-up you say:\n\nThe format, unsurprisingly, starts with a header containing a magic, version and size of the remaining file(kinda). After some basic yet buggy validation yara reads the body of the file and performs relocations. \n\nBut you later don't explain why those validations are buggy. I guess your point is that YARA relies on the value in header.size and doesn't actually check the file's size on disk, is that what you meant or is something else?. The reason for not checking the actual file size is that YR_STREAM is an abstraction for anything that can provide two functions read and write, it could be a file or it could be something else, like a network connection. In practice the only existing implementations for YR_STREAM are file-based, so yes, we could add some function for getting the actual file size, but that would make the abstraction weaker. That would prevent YARA from loading rules from any other sources where you don't know the size in advance. \nThat doesn't mean a security issue by itself, except perhaps for a denial of service by memory exhaustion. If YARA is able to allocate the size specified in the header then it's safe to read that much data from the file, if not, it will fail without reading. But a denial of service will be always possible by corrupting some pointer that make the process crash, so protecting from that is unfeasible and out-of-scope. The only secure solution for that is digitally signing the compiled rules data in order to make sure that no one has tampered with it.\nRegarding the version check, the full snippet is:\nif (header.version != ARENA_FILE_VERSION)\n    return ERROR_UNSUPPORTED_FILE_VERSION;\nWhich is the intended behavior because changes in the structure of compiled rules are neither forward nor backward-compatible. The error message can be misleading certainly, as it could be quite the opposite and the rules could have been compiled with an older version of YARA.\n . In https://github.com/VirusTotal/yara/pull/893 I introduced checks before accessing the scratch memory and some others pointed out by @jbremer. You also propose:\n\nrequire an explicit flag to load and run a compiled rule\ncheck every relocated address is within the loaded file\nmake the loaded file read-only\n\nThe first one is actually a good idea, but I don't want to introduce backward incompatible changes that could break people's scripts out there, at least not for a minor version change. So, that's something for version 4.0 probably. The second one is already done in:\nhttps://github.com/VirusTotal/yara/blob/master/libyara/arena.c#L978\nIt doesn't exactly check that the relocated address is within the file, but within the buffer allocated to hold the compiled rules.\nThe fourth one is unfeasible, the compiled rules has some empty slots that are filled during scanning and must remain writable.. Ok, now I get what you meant. I have a commit ready for fixing that too.. I've merged this PR in the master branch. Besides the changes aimed to fix the issues reported by @bnbdr, additional measures has been taking for mitigating other attack scenarios suggested by @jbremer and involving OP_CALL, could you guy review the changes?\nI haven't assessed the performance impact of these changes but they are probably negligible, however they can't be easily switched-off by setting PARANOID_EXEC to 0.\nStill it's highly discouraged to accept compiled rules from un-trusty third-parties, as they can always hand-craft a rule that can crash YARA.. Closing as this issue is already in yara-python (https://github.com/VirusTotal/yara-python/issues/88). That's controlled with the RE_SCAN_LIMIT macro in libyara/include/yara/limits.h. You can increase that value and rebuild.. The test case added is failing under Windows when compiling with cygwin. See:\nhttps://ci.appveyor.com/project/plusvic/yara/build/3.7.656/job/pnkrc2u8mh292jtk\nIt's strange it works fine in Linux.\nPS: I think I found the problem. It probably has to do with the test case being run if HAVE_WINCRYPT_H is defined, but the thumbprint field is declared only if HAVE_LIBCRYPTO is defined.. > I think a imports_regex(dll_regex, function_regex) would be nice to have. As you have it right now you're only checking if it imports a particular DLL and there's no way to check for functions inside it too. Finding a way to express imports_regex(NULL, function_regex) as a way to say \"I don't care about the DLL, just regex the function names please\" would be awesome too!\nI agree with this too, as is a lot more flexible. You can use it for matching a DLL name, no matter the function, and vice versa. You don't really need to pass a NULL though,  imports_regex(/.*/,  function_regexp) and imports_regex(dll_regexp, /.*/)\n. I think this is ready to be merged, I just miss the documentation for the new features.. Already fixed.. Fixed in cf44d39fe15cae032c096551a0bdbabcd18ffc4b.. You are correct. I've fixed the bug.. Thank you for reporting this issue. In this case it should be setting compiler->last_result = ERROR_INSUFFICIENT_MEMORY, compiler->last_error should be modified only by yyerror. The idea is that compiler->last_result holds the result for that latest operation, no matter if it was an error or not, and compiler->last_error holds the last actual error. \nHowever, looking in retrospective I think this is confusing, I'll see if I can get rid of compiler->last_error altogether.\n\nFor information, I found this inconsistency while analyzing libyara's code with clang's static analyzer.\n\nInteresting, I use coverity and it didn't find this. I'll take a look to clang's static analyzer.\n. Same issue described in  #481.. Good idea, just make sure it will compile with compilers that don't support that.. Good catch! Your fix was correct and you were also right about the value of non-string external variables not being initialized. This passed unnoticed because users usually initialize external variables by calling yr_rules_define_xxx_variable, but the correct behaviour is that yr_compiler_define_xxx_variable sets the initial value for the variable that you can later override with yr_rules_define_xxx_variable.\nI've fixed both issues and added test cases in ef7d5ecb196fdcbed83881d440d127d015d08c5b.. It certainly looks like a memory leak, but it isn't. The hex_lexer.c file is automatically generated by bison and its code is a bit convoluted . In yy_scan_buffer the pointer to the buffer is stored in the YY_BUFFER_STATE structure. See:\nhttps://github.com/VirusTotal/yara/blob/27e385271f9084a2c127f2ca5aaab8e800f6884c/libyara/hex_lexer.c#L2002\nThen yr_scan_bytes takes ownership of the buffer in:\nhttps://github.com/VirusTotal/yara/blob/27e385271f9084a2c127f2ca5aaab8e800f6884c/libyara/hex_lexer.c#L2009\nThe buffer is finally freed in:\nhttps://github.com/VirusTotal/yara/blob/27e385271f9084a2c127f2ca5aaab8e800f6884c/libyara/hex_lexer.c#L1765\n. With the latest fix it returns an error.. My guess is that YARA is that calls to yr_stream_write are failing in:\nhttps://github.com/VirusTotal/yara/blob/master/libyara/arena.c#L1094\nI should check that the number of returned bytes are the expected ones. Can you make sure that those calls to yr_stream_write  are not returning 0?. Please apply these changes and let me know if the problem persists: https://github.com/VirusTotal/yara/commit/fc2e94e51636814f469420b9a4557adc5493f7d6. I stumbled upon this issue long ago, but then forgot about it. Thanks for the detailed report!. This looks like yara-python is not installed. Please try: pip install yara-python. @wxsBSD is this PR ready to be merged?. > I\u2019ve got some more work to do on this. Can you give me a couple of days, please? I\u2019ll dedicate some time to it and hopefully have a better PR by Friday morning!\nSure, no hurries. I was just cleaning up the list of pending PRs a little bit.. The documentation is wrong, yr_stream_write behaves similarly to fwrite.  Fixed in 97ddc18cb23bafa0717eb594e67022ed5dde036e.. The validation was correct, it was the documentation which was wrong. See #943.. This is intended actually, the idea is accumulating the costs while scanning multiple files with the rules object. But having a mechanism for reseting those counters is a good idea.. The dex module is still immature, that's the reason it is not enabled by default nor included in the documentation.. @CaldurG did you test with some other file? The memory leak appears with other files too? Or only with this one?. @CaldurG another relevant test is compiling without HAVE_LIBCRYPTO, I would like to take openssl out  of the equation.\nOne thing that looks strange to me is that _CrtDumpMemoryLeaks should be able to detect memory leaks if you are using CRT functions like malloc, strdup, etc. But in Windows YARA uses its own yr_malloc, yr_strdup, etc, which rely on HeapAlloc, bypassing the CRT (the only exception are the allocations made by yara.c itself). So, any memory leak in libyara should be invisible to _CrtDumpMemoryLeaks. . The problem is that wincrypt doesn't provide all the features that we use from openssl, it provides support for hashing functions when openssl is not around, but some features related to PE signatures are not supported if you don't compile YARA with openssl.\nThere are three possibilities here:\n1. We are using openssl incorrectly and not calling some function that we should be calling for releasing resources.\n2. openssl allocates some global structures from the heap and don't bother to release them when the process exits. Certainly not the best design, but not very critical as they are not actually leaking memory.\n3. openssl is actually leaking memory.\nI think that number 2 is the most likely one, but I'll try to confirm it.. The C API has yr_rules_scan_mem for scanning a memory buffer. In yara-python you can do:\nimport yara\nrules = yara.compile(sources=<string with YARA rules>)\nmatches = rules.match(data=<string with data to be scanned>). Backward compatibility is important, as this module is still used with reports generated by previous cuckoo versions. Would you add this changes in backward-compatible manner?. @wroersma the cuckoo module was written when Cuckoo was still at version 0.1. We expect backward compatibility with that ancient version because at VirusTotal we still have tons of behavior reports in that format. I can share with you some reports in that format if needed. \nI agree with @metthal in keeping a single cuckoo.filesystem.file_access that is able to work with all versions of cuckoo reports. The module's naming is not expected to reflect the path of the JSON fields, they are just like namespaces that group functions together according to their functionality:  filesystem, network, sync and registry. . You are correct, YARA scanner is not re-entrant. This is not specific to version 3.8.0, previous versions work in the same way. I'm afraid that the only solution for that is getting rid of the TLS, which would involve a major redesign for very little gain.  . Agreed, this should be added to the documentation.. Note added to documentation in 93643141f46dbab8e10055a1f859c29c53a0003a.. > The atom list is being built out with new atoms for every possible XOR key for the atom to the entire atom length meaning the entire string.\nThe highlighted assumption is incorrect. If you have a long string (longer than YR_MAX_ATOM_LENGTH) the atoms extracted from the string don't cover the whole string. Suppose your string is \"foobarbaz\", for a plain ascii string the atom will be \"foob\" (assuming the default YR_MAX_ATOM_LENGTH = 4), for a xored string additional atoms will be added with \"foob\" xored with 0x01, up to 0xFF. But those atoms don't cover the \"arbaz\" part of the string. Once you find \"foob\" or any of its xored variants, you need to use the _yr_scan_xor_compare function for making sure that you found a match.. Can you provide more details about what do you want to achieve? Do you want to write modules in other programming languages and link them into YARA?. Duplicate of #970 . yr_finalize_thread is deprecated since version 3.8.0 and is not needed anymore if you are using a recent YARA version.. yr_finalize_thread is deprecated since version 3.8.0 and is not needed anymore if you are using a recent YARA version (see: https://github.com/VirusTotal/yara/commit/6d5c1e682b66d5fca443adb3c219bc3dd90fcf7b). In older versions yr_finalize_thread was required for freeing resources that were allocated in a per-thread basis and stored in a TLS. yr_finalize_thread was usually called when the thread was about to die, like for example at the end of your ThreadFunc. It's safe to call yr_finalize_thread multiple times during the thread life-time, but is not recommended, as that forces the thread to create the resources when they are needed again.. In the function description is marked as deprecated: \nhttps://yara.readthedocs.io/en/v3.8.1/capi.html#c.yr_finalize_thread\nBut yes, those line you mentioned should be removed in order to avoid confusion. Feel free to send a PR for that.. Fixed in #972.. @CaldurG the Windows binaries should be at: https://www.dropbox.com/sh/umip8ndplytwzj1/AADdLRsrpJL1CM1vPVAxc5JZa?dl=0&lst=\nAre you able to download them from there? Check if it crashes with those binaries too?\nI'm traveling now, but I'll try to reproduce the issue when I get back home and have access to a Windows VM.. Unfortunately not :(. Yes, you should build the DLL by adding YR_BUILDING_DLL to libyara.vcxproj, this way all the exported functions are decorated with __attribute_((dllexport)). In the project that uses the DLL you must use YR_IMPORTING_DLL. See the comment for this commit: https://github.com/VirusTotal/yara/commit/39602514e2c7aa990d4d361adbd9a89bdfd147dd\nMore context in https://github.com/VirusTotal/yara/issues/601. What do you mean exactly? Do you want to build yara as a DLL, or your own DLL that uses yara?. You are probably using a bash shell, right?. In that case when you use a wildcard the shell expands the wildcards and pass the actual file names to the program. So, if you have file1.exe, file2.exe and file3.exe when you do yara ../rule.yara *.exe it's exactly like doing: \nyara ../rule.yara file1.exe file2.exe file3.exe\nYARA interprets all the arguments, except the last one, as files containing rules. So, it will try to scan file3.exe with rules contained in rule.yara, file1.exe and file3.exe. YARA doesn't expand wildcards by itself.. Yes, it's supposed to be thread-safe. Can you provide more info about your issues?. That file was put in the repository as part of the starting corpus for oss-fuzz. I'm going to remove it because it seems to be causing trouble.. The offending file has been removed.. I would use yarac for this as @wxsBSD proposes. If you don't want yarac to generate the output file we can add a flag to yarac that prevents the compiled file to be written.. The syntax for yarac is:\nyarac [OPTION]... [NAMESPACE:]SOURCE_FILE... OUTPUT_FILE\nIt accepts multiple source files and uses the last argument as the output file. The output file can't be made optional without changing the arguments format in a backward-incompatible way. Adding a flag for ignoring the output file while being forces to specify a file is a bit weird. Using /dev/null sounds like an acceptable solution (at least in OSes that have it):\nyarac rules.yar /dev/null. YARA's regexps don't support lookaheads because they can be supported only by backtracking. Although YARA doesn't use RE2, this can be applied to YARA too: https://github.com/google/re2/wiki/WhyRE2. Thanks @wesinator!. Maybe related to this:\nhttps://docs.microsoft.com/en-us/windows/desktop/api/winnt/ns-winnt-_large_integer#remarks\nWhich compiler are you using? Are compiling for 32bits or 64bits?. Lo que propones no est\u00e1 soportado, desafortunadamente no queda otra opci\u00f3n que repetir esas expresiones.. This is actually a yara-python which has been fixed in https://github.com/VirusTotal/yara-python/commit/34c581a3b794a1662bc531d966eec60b31479948. \nAdditional measures has been taken in ab6bc59c5bb9591a40fe16092010e10831434a38 in order to prevent NULL pointers from being passed to yr_rules_define_string_variable and yr_compiler_define_string_variable.. Where is that link? I can't find it in the current documentation.. Oh, I see, but that's an old version. The latest one is: https://yara.readthedocs.io/en/v3.8.1/. Fixed in f54b6cac7a988de7ea0a458d0272184b07dc37fb. I more detailed explanation of your exploit would be helpful. I guess your idea is using OP_COUNT to read the objects canary and craft a fake object to execute arbitrary code, is that correct?. Very good job in finding and explaining this issue. You have done an impressive job in understanding YARA's internals. This commit should solve the problem with OP_COUNT: https://github.com/VirusTotal/yara/commit/6acc08d7329413f60e0976be017e18a581450d7a\nRegarding the initialization of vmem, it's now fully explained in your write-up but I guess your point is that you can read values from the the uninitialized vmem that are return addresses left in the stack, and they can be used for determining the base address where the library was loaded. Is that what you meant?. #1001 should solve this issue. @bnbdr, your feedback is welcomed.. Fixed in bbfd3f40d9aa37692a247faebb5bedb61b518da2. OP_LENGTH (and OP_OFFSET with a bit more difficulty) could be used to read the canary provided that you can write a YR_MATCH structure somewhere and get its address in order to push it into the virtual stack. Writing the YR_MATCH structure in the virtual stack is possible, but I didn't find a way of knowing its address.. > It's possible to read the canary value using OP_OFFSET without finding the vstack and faking a YR_MATCH struct on it. I can explain further if needed.\nI'm curious about this.. Any additional info would be helpful. I haven't enough time to look into this in detail. However I'm wondering, given the design of the VM, if is going to be actually possible to close all the holes.. Yes, that's probably not vey hurtful to users and at least prevents using\ncompiled rules inadvertently.\nOn Wed, Jan 23, 2019 at 2:37 PM bnbdr notifications@github.com wrote:\n\nEasiest \"patch\" would be to break compatibility by requiring a\ncommand-line switch to allow running compiled rules together with\nclassifying compiled rules as \"potentially dangerous\".\nThis prevents uninformed users from running possibly malicious rules\nwithout their intention and shifts the responsibility.\nadditional info would be helpful\nI'll see what I can conjure up\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/VirusTotal/yara/pull/1001#issuecomment-456803704, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AALKmUXIf8kF8JQSwBy2X7f3amSzB1OTks5vGGWAgaJpZM4ZRVnG\n.\n. Fixing #1003 is going to be harder than it seemed at first, see #1011. The problem is that flex regexp are greedy, and try to match as much as possible.. Fixed in 5fcbd4a02c139559ff724ab184ac4d337a0f2380.. Oh, you're right. I assumed that #1005 was the cause of this issue because it was very related, but it is not. I've added a test case and will look into it.. Fixed in 017699102d018e858362828895794f2699730220. No, that can't be done, but you can pass a text string like \"\\x32\\x4b\\x2c\", which is equivalent.. I must admit that I thought at first that this regexp was probably failing at some edge case, but it works well. I had to entere it in https://regex101.com/ and study it carefully to actually understand the underlying idea. Good job @josephcsible! \n\nHowever, in the long term I should consider integrating the parsing of hex strings in the main parser, instead of having  a separate one. That would simplify things and avoid hairy regexps which are hard to maintain.. Good catch @deterb, this only happened with nested ranges {x,y} but not for all values of x and y.. Could you please send the full report to vmalvarez@virustotal.com?\nOn Wed, Feb 20, 2019 at 7:07 PM regiwils notifications@github.com wrote:\n\nHello, the Cisco Talos team found a security vulnerability impacting Yara\ncustomers. As this is a sensitive security issue, this submission is to\nrequest a PGP key for further communication. If a key is not received or is\nunavailable, an unencrypted report will be sent to this address in two\nbusiness days. Please acknowledge receipt of this email so we can confirm\nwe have the correct email address for reporting security issues.\nFor further information about the Cisco Vendor Vulnerability Reporting and\nDisclosure Policy please refer to this document which also links to our\npublic PGP key.\nhttps://tools.cisco.com/security/center/resources/vendor_vulnerability_policy.html\nPlease CC vulndev@cisco.com on all correspondence related to this issue.\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/VirusTotal/yara/issues/1023, or mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AALKmboDuCYWlmkc_2bXcUoG5Viqil2Dks5vPY7ogaJpZM4bFzlB\n.\n. Thanks for the heads-up! It consumes memory like crazy, but it looks more related to the use of fields read from the file as loop bounds, specifically here: https://github.com/VirusTotal/yara/blob/master/libyara/modules/dex.c#L1016\n\nBut the there are cases with loops like this one.. I've resorted to your solution again, limiting the loops to 65535 doesn't fix the issue.. Fixed in 46a54d2e404622be79db922f8e80176e356ab13d.. > What do you think about replacing them with a new SET_M which does the equivalent in a single instruction?\nMakes perfect sense, and it's more efficient.\n. @wxsBSD take a look at my latest commits in this branch. If they look good to you we can merge this branch into master.. > I believe the instruction on line 12 is never actually emitted and you just left it in the comment by mistake. Other than that, this looks right to me.\nFixed.\n\nAlso, as I haven't come up with a good way to make sure the optimizations are working as expected I've resorted to modifying jmp_if() in exec.c to print out a message if the condition is true or not. It's a cheap way to tell if any jump is taken. ;)\n\nYes, it's hard to create a test case for that. \n. This is known issue, see #481. For the time being it won't be fixed because it introduces some edge cases and a jump at the end of a string is usually unnecessary.. return ERROR_WRONG_ARGUMENTS instead of printing error\n. Don't need to declare length as unsigned, just use int64_t and avoid the typecast.\n. The logic of this part doesn't seems to be right, \"block_pos\" is incremented but never used, and if \"offset\" lies in the middle of a block, the data from \"offset\" to the end of the block is not taken into account.\nAdditionally, you must take into account the value of block->base. The base for a block is the offset within the file where the block starts. The first block always have block->base == 0, the second block will have block->base >= prev_block->size. For example:\nBlock 1\n[base: 0, size: 1000]\nBlock 2 \n[base: 1000: size: 1000]\nBlock 3\n[base: 2000: size: 1000]\nHere we have three contiguous blocks, each one 1000 bytes long. But blocks not always are contiguous, like in:\nBlock 1\n[base: 0, size: 1000]\nBlock 2 \n[base: 2000: size: 1000]\nHere first block ends at 1000 and the second one starts at 2000, the gap between 1000 and 2000 doesn't contain any data. This doesn't make sense for a file, but it's used while scanning processes.\nSo, you should be comparing \"offset\" with block->base.\n. Instead of changing the behavior of yr_malloc I prefer declaring a new yr_calloc instead. This way you have the option of choosing which function to use, and performance is not affected in other parts of the code where big chunks of memory is allocated with yr_malloc, and don't need to be initialized to zero. \n. Instead of changing set_string, I would add a new \"set_sized_string\". If you have some string potentially containing zeroes you can use \"set_sized_string\" or use \"set_string\" if you are working with C-strings, which is the most common situation. This way existing modules are not affected.\n\"set_string\" can compute the length of the string and use \"set_sized_string\" internally.\n. What about making notBefore and notAfter a numeric timestamp instead of a string? This way we can make comparisons like notBefore < date(2014, 01, 01), assuming we implement a \"date\" function returning the timestamp for a date.\nAdditionally, to keep the naming style I would change them to \"not_before\" and \"not_after\". \n. Use plural for arrays. If we someday implement some kind of iterator, the plural will make the sentence more natural, for example \"for signature in pe.signatures\" is better than \"for signature in pe.signature\".\n. I would rename \"signature_length\" to \"number_of_signatures\", to keep the same naming style already used with \"sections\" and \"number_of_sections\".\n. I find this function confusing, because it's called arithmetic_mean but it actually returns a deviation percentage from the mean. What I propose is creating a function named \"deviation\" receiving the string (or offset, lenght pair) and a number between 0 and 255 which will be the central point. The function will return the deviation defined by:\n\nWhere m(X) is our central point. Use the mean as m(X) and you'll have the standard deviation.\nThis will give you what you want in a more standard way that people familiar with statistical language will recognise. I would also rename \"arithmetic_mean\" to just \"mean\", to keep names as shorter as possible.\n. To be coherent with linker_version, os_version, image_version and subsystem_version, declare an struct \"resource_version\" containing two fields \"major\" and \"minor\".\n. This should appear after the init_count > 0 check\n. Just a small note: I recently started to comply with the C89 standard. Declaring \"i\" in the middle of the function is not accepted by C89, the declaration should be moved to the beginning of the function.\n. I would put this function inside the \"rich_signature\" structure and rename it to just \"version\". The rule would looks like: pe.rich_signature.version(21005).\nAnd what about checking for tool IDs, or IDs/version pairs? Does it makes sense for you?\n. You don't use this pointer in the function. Can be removed.\n. Can be removed too.\n. Yes, a pair of functions like this:\nrich_signature.version(version, toolid [optional])\nrich_signature.toolid(toolid, version [optional])\nThis way you can check for any combination of toolid/version.\nThis would requiere actually four functions, two overloaded \"version\" functions and two overloaded \"toolid\" functions. I suggest writing a single internal function receiving both a toolid and a version and accepting a special value as a wildcard for either toolid or version. The other 4 functions could invoke the internal function.\n. Declaring variable inside switch statements doesn't work in C89. You can use the \"o\" variable.\n. You don't need to initialize array->items here. This should be enough:\nyr_object_copy(((YR_OBJECT_ARRAY*) object)->prototype_item, &o);\n      ((YR_OBJECT_ARRAY*) copy)->prototype_item = o\n. Same thing here, invalid variable declaration in C89. This should work:\nyr_object_copy(((YR_OBJECT_DICTIONARY*) object)->prototype_item, &o);\n      ((YR_OBJECT_DICTIONARY*) copy)->prototype_item = o;\n. To be coherent with the naming schema of the module I would add an underscore: dll_characteristics\n. Make stack size a signed integer. \"sp\" is signed too. I would also renamed it to stack_size. \"sz\" often used for designing null-terminated strings. \n. Just a minor style-related change. Opening curling braces for if, while, switch, etc, are put in the next line in all the codebase, please follow that style.\n. Another minor style-related change: add a space after the comma.\n. I think this introduces a potential buffer overrun in line 1117, where yr_strdup is called with dll_name as its argument. If dll_name is at the end of the file and without a null termination, pe_valid_dll_name will return true and yr_strdup can be invoked with a non-null-terminated string. \n. The returned offset is going to be equal to the passed RVA for any RVA not contained within a section. What if the value passed to pe_rva_to_offset is an offset within the PE overlay? The value is going to be accepted as a valid RVA and is going to be returned as the corresponding offset. But I think the PE overlay is not mapped into memory by the loader? I don't have a Windows machine around to verify it. Can you confirm if that's the intended behavior?\n. In C99 variables can be declared anywhere within a block, but in C89 they must be at the beginning of the block. This has been a source of problems with Visual Studio 2010.\n. Spaces around the *\n. Spaces around the = \n. Spaces around * and +\n. Space after the type cast. e.g: (uint64_t) xxxx\n. Clever use of the switch fall through, but I think a for loop would make the intention more evident.\n. This change breaks backward compatibility with previous Cuckoo report format. Old formats don't have the \"enhanced\" key. What Cuckoo version are you using? Can you share some sample reports?\n. compiler->user_data is being used by the error callback set with yr_compiler_set_callback, you shouldn't modify its value because both callbacks could be used at the same time.. There's no mention to who's responsible for freeing the memory pointed to by the callback's result. I assume that the external code is responsible for doing that, but it's probably a good idea to clearly state it in the documentation. . Here you are passing the pointer received from the callback to yy_scan_string, this is fine as long as it points to memory allocated in the heap (if the callback returns a pointer to it's own stack the memory will be invalid as soon as the callback returns), but this introduces again the question of who's the responsible for freeing the memory and when it's safe to do it. Those question should be addressed in the documentation.\nI'm not sure if the right approach here is making the external code responsible for freeing the memory, forcing the callback to allocate the returned buffer with a specific function provide by YARA (it could be simply yr_malloc), and letting YARA free that buffer when the parsing is done seems like a safer alternative. \nWith the current design is trickier to get everything right. As an example, I think you have a memory leak in the yara-python code that uses this feature (more details in https://github.com/VirusTotal/yara-python/pull/58/). Keep line length under 80 characters.. You don't need to duplicate the string, now it's safe to pass the pointer returned by the callback to yara_yy_scan_string and free it after that function returns.. Instead of exposing all these functions as part of the API I would do something simpler but even more flexible. Add an argument to yr_compiler_set_include_callback which is a pointer to the free function that YARA should use to deallocate the memory returned by the callback. This way the program can use whatever allocator it wants, as long as the program provides the appropriate free function. The program could even use a statically allocated buffer and pass YARA a NULL instead of a pointer to the free function, indicating the buffer don't need to be de-allocated at all. For example:\n```\ntypedef  void (YR_COMPILER_INCLUDE_FREE_FUNC) (void)\nYR_API void yr_compiler_set_include_callback(\n     YR_COMPILER compiler,\n     YR_COMPILER_INCLUDE_CALLBACK_FUNC include_callback,\n     YR_COMPILER_INCLUDE_FREE_FUNC include_free,\n     void user_data)\n``. The elegant way of implementing this is handling all includes with the callback, and providing a default callback that implements the standard includes. That way you don't need thisifstatement here. For the usual includes you can implement a default callback that YARA uses unless some other callback is specified by the user.. There's a memory leak here. If the file can't be fully read for some reasonfile_bufferis never freed. Add ayr_free(file_buffer)before thereturnstatement. A call tofcloseis also required to prevent leaking file handles.. There's a memory leak here,error_bufferis never freed..sizeof(base_err_msg)returns the pointer's size, not the buffer's size..macho_is_file_blockdereferences a pointer touint32_twithout checking if the buffer size is at leastsizeof(uint32_t). No sanity checks for preventing out-of-bounds reads. Ifheader->ncmdsis altered or the file is truncated after the header this will segfault..yr_realloccould return NULL.. This blindly assume thatoffsetanddataare correct and will lay inside the buffer, but these values come from the file header and should be sanitized.. Same problem here, we don't know if the buffer is at leastsizeof(uint32_t).. No sanity checks for preventing out-of-bounds reads. Ifsg->nsectsis altered or the file is truncated after the header this will segfault.. I would call thisentry_point_for_archfor consistency withentry_point.. This is not actually necessary. You can safely assume that a Mach-O file will come in a single block, no matter how big it is. Multiple blocks are mainly for scanning process memory, where each block represents memory region.. Using a global variable for the error code is not thread-safe. It seems that you are trying to follow the convention used by the standard C library, which useserrno, buterrnois stored in thread-local storage. You can simply returnERROR_INSUFICIENT_MEMORYandERROR_SUCCESSif everything went fine.. There's a memory leak here. The memory allocated by thisyr_mallocis never freed. Actually you don't need to do ayr_malloc` at all, you can simply do:\nset_sized_string(dex_header->magic, magic_size, module, \"\"header.magic\"). Same thing with signature you don't need to do a yr_malloc use set_sized_string instead.. This won't do what you intend. It seems that your intention is calculating the size of an array of STRING_ID_ITEM structs with string_ids_size items, but sizeof is a compile-time operation, so you won't get a size based on the value of string_ids_size in the header at runtime. In fact this sizeof will translate to 0, at least with clang.. Why all fields in these structs are 1-sized arrays? O_o \nThis leads to a lot of confusing expressions like *dex_header->string_ids_size where they should be simply dex_header->string_ids_size. In fact I was wondering how *dex_header->string_ids_size compiled at all if dex_header was a pointer to a struct, until I discovered all these 1-element arrays.. Again, sizeof is a compile-time operation.. There's no verification that offset is within buffer boundaries.. This time string_ids_size is calculated right, but this should be done earlier in this function.. There's no need to keep both p and i for controlling this loop. You can use just:\ni < *dex_header->string_ids_size. You don't need to do a yr_malloc use set_sized_string instead.. There's no verification that offset is within buffer boundaries.\n. There's no verification that offset is within buffer boundaries.. user plural number_of_methods, for consistency with the naming used in other modules.. user plural number_of_fields, for consistency with the naming used in other modules.\n. Use 2-space indentation across all this file.. Opening curly braces in the next line, for style consistency within the codebase.. Actually I think we should use another macro name for this, maybe DEX_MODULE_DEBUG. --enable-dex instead of --enable-android.. DEX_MODULE instead of ANDROID_MODULE. It's not clear how xor and wide work together. What happens with the interleaving zeroes? Are they xored too? From the code I see that the current behavior is that the interleaving zeroes are xored too, but I'm curious about what's more practical in real-life cases. Have you found an example of a malware that xor utf-16 strings?. Rename to is_pe for keeping consistency with is_dll.. Instead of defining has_exports I would prefer fixing issue #840 and using pe.number_of_exports > 0 for checking if the PE has exports.. Something like YR_PRINTF_LIKE is more self-explanatory. YR_PRINTF suggests that it's a wrapper around printf similarly as how yr_malloc wraps malloc.. In utils.h we already have the macro YR_PRINTF_LIKE, we should either use that or remove YR_PRINTF_LIKE and use YR_FORMAT everywhere.. get_integer is just a wrapper around yr_object_get_integer which returns an int64. Which warning is this trying to solve?. I see, name_idx is being used as the argument for %i, but we should change the format string instead of the type for the variable, because otherwise we are going to get some other warnings due to loss of precision in the conversion from int64_t to int in 32-bits platforms.. You are probably right about the integer fitting into 31bits, using an int64_t is probably an overkill. We can use int but have an explicit typecast, I think that should be enough for preventing the warnings due to loss of precision.. This is not the only point where block_data is accessed. The call to yr_scan_verify_match can touch that memory too.. I just remembered that YARA already provides a try-catch (see: https://github.com/VirusTotal/yara/blob/master/libyara/scanner.c#L418). In your code, are you calling yr_scan_xxx with the SCAN_FLAGS_NO_TRYCATCH flag?. That's weird, can you verify that the YR_TRYCATCH macro is generating the __try __except when you compile? . Can you try this? https://github.com/VirusTotal/yara/commit/6075d4875fab035704c55f0fdf33af453aea6410\nI think it should solve the problem.. Return ERROR_INVALID_ARGUMENT instead.. This is just avoiding the crash, but is not solving the problem because all calls to yr_stopwatch_elapsed_us are going to return 0. My guess is that this happens with the 32bit YARA, is that correct? Did you reproduce the issue?. From the name RogueKiller64.exe I would say that you are running a 64bit YARA, it would be very useful if you look at sw->frequency and tell me what you see. sw->frequency is a LARGE_INTEGER which is something like: \nC\ntypedef union _LARGE_INTEGER {  \n    struct {\n        DWORD LowPart;  \n        LONG  HighPart; \n    };\n    LONGLONG QuadPart;\n} LARGE_INTEGER;\nIt's very weird that QueryPerformanceFrequency returns 0.. Is yr_stopwatch_start being called?\nI've found one code path where yr_stopwatch_elapsed_us may be called without previously calling yr_stopwatch_start.\nSee: https://github.com/VirusTotal/yara/blob/master/libyara/scanner.c#L479\nIt happens when the function exits in https://github.com/VirusTotal/yara/blob/master/libyara/scanner.c#L381\nor\nhttps://github.com/VirusTotal/yara/blob/master/libyara/scanner.c#L386\nIs this you case?. Here we have a push that didn't exist before and it should be popped somewhere, however for_expression is used in loops of the form for_expression _OF_ string_set for which nothing else has changed. What happens with that extra push in those loops? \nThe test cases run ok, but maybe it's because we are not covering that case.. I didn't notice that OP_ADD_M pops an item from the stack, and the OP_PUSH_M instruction is just to put it back into the stack. So this code doesn't leave an extra item in the stack as I thought at first. However, it adds unnecessary instructions when for_expression is used in for_expression _OF_ string_set and for for_expression _OF_ string_set : statements. For example:\n4 of ($a, $b) \nresults in ...\n01.   OP_INIT_RULE\n02.   OP_PUSH 4      \n03.   OP_CLEAR_M 4\n04.   OP_ADD_M 4\n05.   OP_PUSH_M 4     \n05.   OP_PUSH UNDEF \n06.   OP_PUSH $a   \n07.   OP_PUSH $b\n08.   OP_OF \n09.   OP_MATCH_RULE\nInstructions 3, 4, and 5 are not required at all in this case.\nMy proposal is leaving the for_expression production as:\nfor_expression\n    : primary_expression\n      {\n        $$ = FOR_EXPRESSION_ANY;\n      }\n    | _ALL_\n      {\n        $$ = FOR_EXPRESSION_ALL;\n      }\n    | _ANY_\n      {\n        $$ = FOR_EXPRESSION_ANY;\n      }\n    ;\nAnd emit the required instructions in _FOR_ for_expression _IDENTIFIER_ _IN_.. ",
    "kallanreed": "I want to try a fix for process memory reading. Basically adding a new SectionReader type to keep track of the process handle, the buffer and the last read location of the section. Instead of allocating enough chunks for the whole section, one chunk would be reused.\nThe caller would call OpenReader to get a new reader and call a ReadNext function with the SectionReader which would either read the next chunk of the section or would return null or a failure code if the section is no longer readable. A HasMore flag would indicate that reading is incomplete and could be used in the caller's while condition.\nWhen the caller is done reading the section, it would have to call a CloseReader which would free the internal buffer and detach from the process.\nThe benefit would be much smaller memory footprint during process scanning at the expense of potential memory consistency.\nI need this behavior because the current memory characteristics will not work for the environment we want to use YARA in.\n. Yeah, you don't really want to leak the platform specific code into the rules handler. I'll give my design a try this weekend and see if I can make it work for all three platforms. I don't have a Linux build machine handy so I'll need some help testing once I get a PR ready.\nSent from my iPhone\nOn Feb 18, 2016, at 14:48, Jeremy Humble notifications@github.com<mailto:notifications@github.com> wrote:\nYARA does seem to be using memory mapped files for OSX and Linux, but the Windows implementation using ReadProcessMemory, does result in a a huge increase in physical memory usage if I'm not mistaken.\nGood luck, Kallenreed. This would be hugely helpful for me as well. I had started coding a POC implementation similar to what you've described for Windows.\nSo far, my solution was to no longer read data into each block in yr_process_get_memory and instead just stuff the process handle into the data field in the block structure. Then, when iterating over blocks in yr_rules_scan_mem_blocks I can call ReadProcessMemory to load the data for that one block, scan it, release it, and move onto the next block.\nYour implementation using a SectionReader is much cleaner though, let me know if there is any way I can help!\n\nReply to this email directly or view it on GitHubhttps://github.com/plusvic/yara/issues/33#issuecomment-185966469.\n. I have a POC that I'd like some feedback on. The gist is that the section maps are loaded all at once and then sections are read and processed one at a time. I scanned notepad on Windows and the memory usage went from 90MB to 3MB.\nSection Reader POC\nIt's currently only implemented for Windows but I think the pattern will work for BSD/Linux. Error handling isn't all there and the code's not cleaned up, but you can get a sense for where it's going.\nConcerns\n- Need to keep a context object between calls to yr_rules_scan_mem_blocks.\n- It looks like Linux and BSD would also benefit from this (I do see yr_malloc for sections in both) but I'm not familiar enough with the platforms to be sure.\n- I didn't see any place that expected all block to be available (the linked list) on the Context type in the case of a process memory scan. I'm not sure if any modules do.\n- I don't know if I like returning an error code on section read completion but I don't like a null check.\n@plusvic I'd like to know if I should continue down this path and finish this up.\n. I did point out the context problem in my comment above.\n\nNeed to keep a context object between calls to yr_rules_scan_mem_blocks.\n\nMy initial thought was to move the context into yr_rules_scan_procs and the have a _yr_scan_mem_blocks overload that accepted a context. The only reason I liked this was because I considered it less touch.\nThe block callback is a reasonable approach but it will require updating more callers. I'll see what the code looks like.\nI did have another question re: BSD/Linux. It looks like it does allocate when reading process memory but some of the comments above seemed to indicate otherwise. Is this change needed on those platforms as well?\n. POC with a block iterator concept\n@plusvic This is basically the callback implementation - I added a new type BLOCK_READER that tracks the advancement of the pointer in the buffer linked list. This way the section reader and the block reader behave basically the same way from the caller perspective. Also, it needed to return errors so the callback sets the block through an out param. I wasn't really thrilled about the void* in the callback but I don't know any other polymorphic idioms in C.\nAnyway, the basic concepts are all there - should I spend the time to finish it? Any major concerns about the design or names?\n. Few thoughts\n- Part of the idea of the section reader was that it would keep the process open between calls (mainly a problem for Windows I suppose). Opening the process for each block would help detect a closed process better than a failed memory read but it would be called a lot (hundreds to thousands of times) per process. I think attaching once per scan is the right approach here.\n- I'm currently pre-fetching the VM sections into a linked list. This work could be deferred but it means reparsing the map file multiple times in Linux and I haven't looked closely enough at the BSD code to know what the call pattern would look like. Having the section list makes iteration a lot more straightforward.\n- I like the API surface you proposed but I still need to get error codes out if work is deferred. Is result = iterator->next(iterator, &block) reasonable?\n- In the fetch_block case, does the block need to be passed in? The iterator will have to know which block its pointing at so the parameter seems redundant.\n- I like the signature of fetch_block (returning the pointer) but I'm left with the problem of error codes again. If the signature were int fetch_block(char** data) that would imply that the returned structure be freed by the caller which is not the case in for a linked list. We could simply return null on failure but that hides some potential errors. In the case of the deferred read, there needs to be something that frees the previously allocated block data. Currently blocks are freed by the section reader's read_next_section - this is what keeps memory usage down but it also implies that you cannot hold onto data between calls to next during iteration unless you make a copy.\n- If the iteration and fetching are separated, the MEMORY_BLOCK data field will be null in the case of deferred reading, not terrible but maybe warrants a type without the field? No for now.\nGiven the above, we need the following types\n- BLOCK_ITERATOR more or less as you described caveat the error handling\n- LIST_ITERATOR_CONTEXT to hold a list head and current pointers\n- PROCESS_ITERATOR_CONTEXT to hold the attached process context, a LIST_ITERATOR_CONTEXT of the sections, and the current data buffer.\n- The SECTION_READER and MEMORY_SECTION types would go away.\nEDIT: I think I have an idea that will work. I'll send out an update soon.\n. I started a the impl of the design and ran into some issues. Some of which you addressed above, I added some comments in the commit.\n1) re: keeping the process open while iterating - I just wanted to make sure we were on the same page.\n2) re: prefetching removes the need for error checking on the block first/next interface because all of the operations that could fail happen when the iterator is opened and when it's closed. Fetch could still fail.\n3) I didn't realize you wanted to remove the data member from YR_MEMORY_BLOCK. That type is used everywhere and I think that would be an invasive change. Also, in order for that to work, everywhere we would either need to keep the context in the block as well as the read function or update every place a block is used to take an ITERATOR instead.\nI was considering a second type like YR_DEFERRED_BLOCK which is like the normal block without the data field. This way the existing code that expects blocks could be left alone for now.\n4) I see what you mean about the LIST_ITERATOR_CONTEXT I didn't notice that the reason I added it at all was to support the thing I'm removing (yr_process_get_memory). I'll still need implementations for first/next/fetch for a single block but the type can go away.\n. Sounds good. I'll give that a try.\n. Block iterator everywhere\nHere's what the change to add the block iterator everywhere looks like. I tried to minimize the touch, but I had to add null checks after fetch and (hopefully) do the right thing on failure. This does not include the new process reader yet but you know how that's going to look.\nMy only concern is that before, reading process memory was done once at the expense of memory. Now if there are multiple modules enabled, process memory will be read multiple times - adding to CPU usage. As you mentioned, not all modules actually read all blocks so it may not be that bad.\nI'm concerned by the amount of size of this change. How are big changes normally tested?\nEDIT:\nI haven't dug into how the modules or exec are called but if they reuse the iterator that yr_scan_mem_blocks is using in its while loop from within the loop, the iterator state will be invalid for the top loop. I need to dig in more and figure out if we have to worry about that and if so, we'll need to stick a copy of the iterator on the scan context. We'll just have to be careful not to close the underlying proc handle either with a copy or with the original but before the copy has finished.\n. @plusvic this is working for Windows. I verified that there aren't any cases where the iterator used for a loop is invalidated by a call to a module. Take a look at the diff and let me know what you think. If it looks good I'll finish it for Linux and BSD.\n. @plusvic I submitted PR #418 with this change. Haven't heard anything for a few weeks and wanted to see if there was anything wrong with the change.\n. So I'm clear, the bug is here in scan_mem_blocks:\n```\n  yr_rules_foreach(rules, rule)\n  {\n    int message;\nif (rule->t_flags[tidx] & RULE_TFLAGS_MATCH &&\n    !(rule->ns->t_flags[tidx] & NAMESPACE_TFLAGS_UNSATISFIED_GLOBAL))\n{\n  message = CALLBACK_MSG_RULE_MATCHING;\n}\nelse\n{\n  message = CALLBACK_MSG_RULE_NOT_MATCHING;\n}\n\nif (!RULE_IS_PRIVATE(rule))\n{\n  switch (callback(message, rule, user_data))\n  {\n    case CALLBACK_ABORT:\n      result = ERROR_SUCCESS;\n      goto _exit;\n\n    case CALLBACK_ERROR:\n      result = ERROR_CALLBACK_ERROR;\n      goto _exit;\n  }\n}\n\n}\n```\nThe problem is that the callback is passed a rule which contains a pointer to the freed block. I don't quite understand how the rule references the match (the arena?) but I think I understand the issue. I can repro with -s.\nAre there any other places the callback will be called with match data that I'm missing? I didn't think so after a quick check.\n@plusvic Few top of mind thoughts:\n1. Move all of the actions to take on a block inside of a single loop. It looks like scan and exec would behave the same way but the callback would be called (rules * block) times. This would probably break assumptions made by code using libyara. For file matching there wouldn't be extra callbacks.\n2. Copy matching memory into the YR_MATCH. This would mainly solve the problem but I don't know what \"unconfirmed\" chain_length implies. The downside is that this could potentially use even more memory and certainly would be worse for the file matching case. Obviously there would be more allocations.\n3. Ref count the pointers to the blocks and don't free blocks if they are used in a match. Memory use will be dependent on rule matches. It shouldn't have any impact on libyara users. On the downside, it's would be hand-rolled ref counting.\nI'm assuming there's some reason that C++ isn't used in the code currently, however if there isn't shared_ptr would be helpful instead of hand-rolling ref counting.\n. The VS2010 tool chain is becoming difficult to find; I prefer @keithjjones #377 instead of this PR because of this.\n. +1 on this PR. The VS2010 tool chain is becoming difficult to find not to mention that the 2010 tools are 9 years old.\n. #407 included fixes for the merge conflicts.\n@mrexodia i hear you on the bloat, but tool chain selection should be first based on the quality and safety of the output, second on availability of the tools and then other considerations like bloat.\nThe *ix people have it easy. On Windows the compiler improvements are unfortunately tied to VS and free tool availability is usually limited to Latest - 1. 2013 would work for me, but 2015 CE is really going to be the tool going forward for the next few years.\nAll that said, I mainly care that the project is easily buildable on Windows to encourage contribution. The pthread issue alone was almost enough to turn me away (thanks for the impl).\n. @mrexodia Mainly because I'm curious, how would you prevent the bloat? Submodule a second repo with only the binaries?\n. @keithjjones How would CMake help the problem of checking in the binaries? Wouldn't the libs still be needed to reference on Windows?\nAlso, I'm not entirely sure I understand the problem with the existing libs and VS2015. Is it because the RTL changed between VS versions so the exports are different/missing and linking fails? Where did the new libs come from?\n. I see. Did you compile the new ones you included? I'm just wondering if it's possible to sub module the source and compile it with the build. Maybe not if those projects aren't themselves VS friendly.\n. @keithjjones also, if you want I can merge master again and pull in the changes by hand and submit a new PR.\nIf you want to do it, take a look at #407 because there were some additional changes. Pick an .sln to use because you added a new one and I had modified the existing one.\n. @keithjjones @mrexodia\nSo I'm clear, the bloat that's the problem with this PR is because of the deleted lib files, not because of the newly checked in lib files.\nI'm going to pull master again and then manually repatch the code changes and include the new lib files.\n. VS2010 is great. VS2015 is great. The problem is that getting the 2010 tools is becoming a pain.\nThoughts on pulling out all of the VS stuff into submodules? Would having a submodule for VS2010 and another for VS2015 be terrible? In this project I'd add a readme with commands to fetch the appropriate submodule?\n. Off this topic but related to the change to pthreads, I'm getting an invalid handle exception in the debugger for this call\nint pthread_mutex_destroy(pthread_mutex_t *mutex)\n {\n    return CloseHandle(mutex) == TRUE ? 0 : -1;\n }\nHave you seen this @mrexodia ?\n. The handle looks like a valid handle (pointer with a small value). I'll dig in a little more.\n. I'm going to try this\n1. Re-patch all of the windows changes so they are clean (minus VS changes)\n2. Leave the existing projects in place for VS2010\n3. Add a new repo to hold the VS2015 solution and dependencies\n4. Submodule the VS2015 repo under windows and add a readme there explaining\nWhy add the submodule to yara instead of the other way around? Because I expect yara to update all the time and the actual project file to update infrequently. It's a giant pain to maintain a reference to an active submodule.\nMy goal is to have this compile on Windows without a bunch of messing around trying to find dependencies and build them. I really don't like working on projects that a bunch of hidden setup work. At the very least, a \"building for windows\" readme would go a long way toward making this dev friendly.\n. One downside of having a second project is that it will fall out of sync with the other one. This could be avoided with wildcard file includes so the projects don't need to be touched when new files are added. The makefiles do explicitly list the sources out which makes me wonder if that's a good idea or not.\n. This contains a bunch of deleted files so we're going to make a new PR that's clean.\n. :+1: \n. cc: @keithjjones this is done if you want to give it a try.\n. Are you going to make the change or do you want me to make a new PR with LFS?\nMy only request is that the the VS2015 solution and project files in this PR end up in the repo. I hand edited them to make sure that all build configurations and targets are set up properly. The VS2010 projects are kind of a mess with different settings for every combination of x86/x64/Release/Debug.\n. @plusvic  I started to give the a try and ran into a problem. It doesn't look like LFS can be used on \"public forks\".\n$ git push -u origin lfs\nGit LFS: (0 of 4 files) 0 B / 26.82 MB\nGit LFS objects can not be uploaded to this public fork.\nDocs: https://github.com/contact\nerror: failed to push some refs to 'https://github.com/kallanreed/yara.git'\nThis thread seems to indicate that this expected behavior - at least for now. Effectively, forking is broken.\nAlso the LFS billing page seems to indicate there are storage/bandwidth limits after which things break in unfortunate ways.\nLFS might not be the best solution to this problem given these limitations.\n. What about including the dependencies as NuGet packages. That way they don't have to be included in the repo and they can be updated (for fixes) without needing to push new bits into the repo.\nI could look into building either binary libs or packaging the source so it can be built with yara.\n. FWIW you don't need a nuget account to pull packages and VS has nuget built in. It'll pull packages from nuget during the build.\nI get your point. Are you willing to at least take fixes to make the code compile in newer versions of VS (e.g. #408) if not the project will have to be permenently forked which isn't great.\nAlso, how about a build read me in the Windows folder that talks about what's needed to get up and running? Maybe with a link to the VS project repo if people want it.\nIt's low overhead for you but it helps the Windows devs who are already have a tool chain handicap.\n. @plusvic before you give up on this altogether, let me make a PR with the NuGet idea so you can see what it looks like. It would be really nice to have this building on Windows for other contributors. I was kind of stuck until I found PRs from @keithjjones and @mrexodia unblocking Windows building.\n. @plusvic I made PR #414 that uses NuGet to hold the dependencies which keeps the repo clean and provides a good build experience.\n. cc: @keithjjones\n. Nuget added support for native targets around VS2012. Basically it's just the include headers and the libs packaged up and a targets file that is injected into the projects so that the projects can reference the package files. I linked to the nuget package project above if you're interested in how it's built.\n. Agreed.. You need automake, autoconf, and libtool to build. See #363 \n. @Plusvic this change still had the bug with the bad reads when presenting matches that we never figured out. I thought I had closed this PR.\nI never figured out how to address that problem with the fix without breaking the API for modules or the contract with callers of the library.\n. There was a lot of push back to checking in the new VS2015 binaries. Ended up settling on a nuget package that contained the binaries. See #414 \n. I'm seeing this as well on Windows when trying to use modules (hash specifically) in 3.5.0.\nimport \"hash\" rule test_hash { condition: filesize < 500KB and hash.md5(0, filesize) == \"f4f684066175b77e0c3a000549d2922c\" }\nThis is with my compiled lib version for windows, but it's a regression since 6/24/16 which is when my last known good was built.\nI'll try to dig in a little more, but here's a stack trace:\nucrtbased.dll!_wassert(const wchar_t * expression, const wchar_t * file_name, unsigned int line_number) Line 405    C++\n    YaraNugetTest.exe!yr_execute_code(_YR_RULES * rules, _YR_SCAN_CONTEXT * context, int timeout, __int64 start_time) Line 468  C++\n    YaraNugetTest.exe!yr_rules_scan_mem_blocks(_YR_RULES * rules, _YR_MEMORY_BLOCK_ITERATOR * iterator, int flags, int(*)(int, void *, void *) callback, void * user_data, int timeout) Line 470    C++\n    YaraNugetTest.exe!yr_rules_scan_file(_YR_RULES * rules, const char * filename, int flags, int(*)(int, void *, void *) callback, void * user_data, int timeout) Line 615 C++\n    YaraNugetTest.exe!main() Line 73    C++\n    [External Code]\n. Part of the issue for me is that after 073c7b287f1c0e72d24b602ebdf91a2ae9cd3672 the bits from the 2015 project no longer imports modules properly.\n. @Mccoysc this should be fixed in Master. Can you try rebuilding?\n. Introduced in c48cea7b5363f06f4a87d1524655735ef3699b64\nNeeds a WIN32 version of yr_lex_parse_rules_fd and some _WIN32 guards in lexer.c, lexer.l and test-rules.c\nI'll try to get a PR out.\n. The tests aren't currently built in the Windows projects but unistd.h was also referenced in the test that was added for this.\nSent from my iPhone\nOn Sep 17, 2016, at 05:58, Hilko Bengen notifications@github.com<mailto:notifications@github.com> wrote:\n@Mi4uric3https://github.com/Mi4uric3 Please have a look if PR #520https://github.com/VirusTotal/yara/pull/520 (commit 9a7a1echttps://github.com/VirusTotal/yara/commit/9a7a1ec21c4a0601acc27cf010856d6cf1da8b8c) fixes the issue for you. (I don't have a Visual Studio compiler available.)\n\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHubhttps://github.com/VirusTotal/yara/issues/519#issuecomment-247768088, or mute the threadhttps://github.com/notifications/unsubscribe-auth/ADljbp9K59j_YjFG7qHffA09aPn6N-_kks5qq-P1gaJpZM4J-sdg.\n. I think you still want ReadFile instead of read. ReadFile doesn't require the C runtime library which is why (I think) the rest of the Windows code is using the Win32 APIs. @plusvic is that correct?\nSent from my iPhone\nOn Sep 17, 2016, at 08:57, Hilko Bengen notifications@github.com<mailto:notifications@github.com> wrote:\n- Kyle Reed:\n\nThe tests aren't currently built in the Windows projects but unistd.h\nwas also referenced in the test that was added for this.\n\nRight...\nAfter looking at the libc documentation on MSDN, I found that there are\nopen(), read(), functions after all.\nI'll be updating my patch once more.\nCheers,\n-Hilko\n\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHubhttps://github.com/VirusTotal/yara/issues/519#issuecomment-247784337, or mute the threadhttps://github.com/notifications/unsubscribe-auth/ADljbsAROiM_PEen-DUvpwSnCz_v2Vhtks5qrA3ngaJpZM4J-sdg.\n. This still doesn't work, the lexer.c needs to be regenerated and checked in. @hillu if you can regenerate that would be helpful.\n. @plusvic check out https://ci.appveyor.com/project/kallanreed/yara/history and https://ci.appveyor.com/project/kallanreed/yara/build/1.0.9 (for details) and see if this is sufficient. I'm trying to figure out PR integration, tests and even have it publish binaries to the feed.\nIf you want to integrate, you'll need to set up an account on AppVeyor with an account that can admin the yara repo.\n. I'll send the yaml file from my set up. It's also possible to add a yaml file to the root (like travis) and have it \"just work\" but I haven't tried that yet.\nHere's what the simplest PR integration looks like: https://github.com/kallanreed/yara/pull/1\n. I've added the appveyor.yml to PR #526 with info on getting everything set up.\n. This and #527 will address the assert logged in #514\n. @plusvic, this should also take care of the basic Windows CI #523 as well. AppVeyor supports nicer GitHub integration (like Travis) but that requires tokens and things that I didn't want to bother with. This will simply add a comment to the PR thread indicating if the build passed or failed. Looks like this:\n\nAll you should have to do is create the yara project in AppVeyor. It will pick up the build config from the yml file. Then in the UI you can click \"New Build\" although one should be created automatically when the PR is merged if everything is set up correctly.\nFrom the documentataion:\n\nProject builds can be configured by either appveyor.yml or on the user interface. ...\nIf you have appveyor.yml in your repo it will override all settings made on the UI unless explicitly disabled by Ignore appveyor.yml. The only exceptions are environment variables and notification settings. Environment variables defined on UI are getting merged with those ones defined in appveyor.yml. Variable values with the same names are getting overridden with values from UI.\n. + @plusvic\nRe: the Windows build, it's still pulling in pre-built binaries for openssl and jansson. The eventual long term solution was supposed to be configuring the project to build with CMake so that for Windows builds the latest library source code is used instead.\n\nIt turns out that the friendly vcpkg people have done some of this work for you. \ud83d\udc4d \nhttps://github.com/Microsoft/vcpkg/tree/master/ports/yara\nIt would be great to redo the Windows build with CMake and the CMakeLists.txt from the repo above should have everything you need to get that going.\nFor Windows users: you can leverage vcpkg for building completely from source.\n-Kyle. @metthal What about OpenSSL? That's the big problem on Windows. IIRC, the last time I built it (to compile the static libs used in libyara today) it needed a fair amount of hand holding.\nI'll try building with your CMake tomorrow when I have a Windows machine available.. ",
    "jhumble": "YARA does seem to be using memory mapped files for OSX and Linux, but the Windows implementation using ReadProcessMemory, does result in a a huge increase in physical memory usage if I'm not mistaken. \nGood luck, Kallenreed. This would be hugely helpful for me as well. I had started coding a POC implementation similar to what you've described for Windows. \nSo far, my solution was to no longer read data into each block in yr_process_get_memory and instead just stuff the process handle into the data field in the block structure. Then, when iterating over blocks in yr_rules_scan_mem_blocks I can call ReadProcessMemory to load the data for that one block, scan it, release it, and move onto the next block. \nYour implementation using a SectionReader is much cleaner though, let me know if there is any way I can help!\n. Thanks! I'll be giving this a try as soon as I figure out how to build yara.pyd on Windows\n. ",
    "dkindlund": "Developing a full-fledged rules engine in YARA may cause significant performance/resource issues, long term.  I'd recommend keeping YARA fast/agile.  There are plenty of ways to achieve this type of logic as a post-processing operation (after YARA results are provided).\n. ",
    "adrenaline7": "Hi there, I've got the same problem when trying to install python-yara from yara-2.0.0 packet. \nHere is my error \npython setup.py install\nrunning build\nrunning build_ext\nbuilding 'yara' extension\nx86_64-linux-gnu-gcc -pthread -fno-strict-aliasing -DNDEBUG -g -fwrapv -O2 -Wall -Wstrict-prototypes -fPIC -I../windows/include -I../libyara -I/usr/include/python2.7 -c yara-python.c -o build/temp.linux-x86_64-2.7/yara-python.o\nx86_64-linux-gnu-gcc -pthread -shared -Wl,-O1 -Wl,-Bsymbolic-functions -Wl,-Bsymbolic-functions -Wl,-z,relro -fno-strict-aliasing -DNDEBUG -g -fwrapv -O2 -Wall -Wstrict-prototypes -D_FORTIFY_SOURCE=2 -g -fstack-protector --param=ssp-buffer-size=4 -Wformat -Werror=format-security build/temp.linux-x86_64-2.7/yara-python.o -lyara -o build/lib.linux-x86_64-2.7/yara.so\n/usr/bin/ld: cannot find -lyara\ncollect2: error: ld returned 1 exit status\nerror: command 'x86_64-linux-gnu-gcc' failed with exit status 1\nI have build-essentials and python-dev installed.. \n. yes I did\n. Noooo!!! I forgot to do sudo make install after ./build.sh while installing yara..\nThanks plusvic, sorry\n. ",
    "poxyran": "I did it but I still get the same error:\nblah@fastix:~/yara-2.0.0$ dpkg --get-selections | grep automake\nautomake                    install\n. Yes:\nblah@fastix:~/yara-2.0.0$ aclocal --version\naclocal (GNU automake) 1.11.3\nCopyright (C) 2011 Free Software Foundation, Inc.\nLicense GPLv2+: GNU GPL version 2 or later http://gnu.org/licenses/gpl-2.0.html\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.\nWritten by Tom Tromey tromey@redhat.com\n       and Alexandre Duret-Lutz adl@gnu.org.\n. Thanks!. It works now.\n. Maybe I didn't say it right. I mean, instead of going to download the source code of yara, download dependencies, compile it and install it, you can add an option to do automatically. It is not a critical feature but useful, I think. \n. I just thought that it would be a good idea to have some automatic updates. I like the idea of having a binary packages to download Yara trough a package manager in the most common distros. I offer myself as a volunteer for building those binary packages if you help me during the process :P I've never done that before but count me in :)\n. I'll do my best to acomplish this task :)\n. ",
    "elfring": "Thanks for your addition of a prefix to the include guards.\nDoes the header file \"threading.h\" need a similar update?\n. How do you think about to make your include guards not only standard-compliant but also really unique by appending a kind of UUID?\n. Are you interested to apply aspect-oriented software development?\nHow do you think about to encapsulate error detection and corresponding exception handling as a reusable aspect in your software?\n. It depends on the usability of the available tools. How do you think about an alternative approach like \"A Reusable Aspect for Memory Allocation Checking\"?\n. A dedicated tool will be needed if you would like to achieve benefits from the aspect design dimension. Which one would you like to trust eventually?\n. Why do you close this issue when the reported update candidates were not improved so far?\n- Manual fixes would work as usual.\n- Semantic patches can eventually also be considered.\n. Thanks for your source code improvement.\nWould you like to annotate any function with the attribute \"warn_unused_result\"?\n. ",
    "aschuster99": "poxyran, \nThere are (binary) packages available for several platforms (Debian Linux, BSD, OS X). In addition, this site provides binaries for MS Windows. Updating usually takes only a few keystrokes, because the package managers will fetch prerequisites, invoke the compiler with the right options for your setup, and install the files in their proper locations for you.\nDoes that help you?\nAndreas\n. After further tests I can confirm there is no problem with v1.7, too. So, what has changed between v1.7 and v2.0?\nIs there any difference in how the condition section is evaluated? The first line is meant to filter PE files, the second line ensures that there are named entries to parse. And then the parsing would commence in the following lines. With boolean shortcut evaluation, the first line would prevent parsing of any unrelated files.\nWithout shortcut evaluation, the loop would try to make sense out of gibberish and might loop for a large number of times.\n. Thank you for the confirmation, Victor!\n. The following Portfile works for me (on OS X 10.9.4), even though it is not yet ready for submission to the MacPorts project.\nPlease don't forget to deactivate (not uninstall!) any other version of yara prior to installing v3.1.\nHope this helps!\nAndreas \n```\n-- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4\n$Id$\nPortSystem              1.0\nPortGroup               github 1.0\nname                    yara\nversion                 3.1.0\nrevision                0\ncategories              security\nlicense                 Apache License 2.0 \nplatforms               darwin\nmaintainers             yendor.net:a.schuster \\\n                        openmaintainer\ndescription             The pattern matching swiss knife for malware researchers\nlong_description \\\n    YARA is a tool aimed at helping malware researchers to identify and \\\n    classify malware samples.\nhomepage                http://plusvic.github.io/yara/\ngithub.author                   plusvic\ngithub.project                  yara\ngithub.version                  3.1.0\nmaster_sites            https://github.com/${github.author}/${github.project}/archive/\ndistname                v${github.version}\ndistname                                367b0eab221684d3a818e695c4889193b2c53031\nworksrcdir                              ${github.project}-${distname}\nchecksums                               rmd160  94f8c8e86fab78dded2aa62f6a76d3b66b7e6169 \\\n                        sha256  236222b591304df704cc0cc83d159efe5a3e109f1a617dc63090d129e94d8b37\ndepends_build           port:automake \\\n                        port:libtool\nuse_configure           yes\npre-configure {\n        system -W ${worksrcpath} \"/bin/sh bootstrap.sh\"\n}\nThere are no tests for YARA\ntest.run                no\n``\n. Great Portfile, thanks! One quick thought, though: As far as I understand, YARA v3 comes with its own regex library and hence does neither depend on pcre nor re2. Thereforedepends_lib         port:pcre`should go into the subport for v1.7.\n. One more observation: The +pythonXX variants apparently only declare dependencies, but do not build and install the Python bindings. \nI never figured out how to build the core and bindings from a single Portfile, so I've hacked together a second port (not even using the general Python portgroup, what a shame!). It's so embarrassing that I never submitted it to the MacPorts project. If you want to clean it up, please feel free :)\n```\n-- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4\n$Id$\nPortSystem              1.0\nPortGroup               github 1.0\nPortGroup               python27 1.0\nname                    py27-yara-python\nversion                 3.1.0\nrevision                0\ncategories              security python\nlicense                 Apache License 2.0\nplatforms               darwin\nmaintainers             yendor.net:a.schuster \\\n                        openmaintainer\nsupported_archs         noarch\ndescription             Python bindings for YARA\nlong_description        This module allows you to apply YARA rules to files or strings.\nhomepage                http://plusvic.github.io/yara/\ngithub.setup messes with the name, so define author, project, and version individually.\ngithub.author           plusvic\ngithub.project          yara\ngithub.version          3.1.0\nmaster_sites            https://github.com/${github.author}/${github.project}/archive/\ndistname                v${github.version}\ndistname                367b0eab221684d3a818e695c4889193b2c53031\nworksrcdir              ${github.project}-${distname}/yara-python\nchecksums               rmd160  94f8c8e86fab78dded2aa62f6a76d3b66b7e6169 \\\n                        sha256  236222b591304df704cc0cc83d159efe5a3e109f1a617dc63090d129e94d8b37\ndepends_lib             port:python27 \\\n                        port:yara\ntest.run                yes\ntest.cmd                ${python.bin}\ntest.target             tests.py\n```\n. Try deactivating the old version first (port deactivate yara @). If that helps, than it's likely a problem with the include search path. I guess that -I./include should go in front of -I/opt/local/include. Is this a problem with the Portfile, or with YARA's Makefile?\n. I suggest to calculate the hash (once per sample!) externally and pass it as an external variable to your ruleset.\n$ sha1deep -b sample\nbb1ab80641f80fdd0e6258a032a8e9dd9f2f5ee6 sample\nTest run with 100 hashes:\n$time yara -d ext_hash=\"bb1ab80641f80fdd0e6258a032a8e9dd9f2f5ee6\" ruleset.yar sample\nreal    0m0.005s\nuser    0m0.001s\nsys     0m0.002s\nYour whitelist rule would now look like this:\n$ cat ruleset.yar\nrule whitelist {\ncondition:\n  ext_hash != \"1e6f6dcbc28d0fdcd01d49a71a90d0e2e447c96a\" and\n  ext_hash != \"f0d3ad63910d8d3051bb4dd7af8513652259d796\" and\n  ext_hash != \"47e000551379fe895e4f13a34ea7eb77db5439e2\" and\n...\n. The last element in an alternative must not be a jump. So instead of\n$not_ok_1 = { ( FF 15 [4] | E8 [4] ) 6A 06 6A 01 }\nyou may simply move the jump out of the term in round brackets\n$ok_1 = { ( FF 15 | E8 ) [4] 6A 06 6A 01 }\nThere is another term in your example that needs a slightly different approach:\n$not_ok_2 = { ( FF 15 | E8 [4] ) 8B [2] 8D [3] 6A 04 }\nYou can replace that 4 byte jump with a three byte jump plus a one byte wildcard: \n$ok_2 = { ( FF 15 | E8 [3] ?? ) 8B [2] 8D [3] 6A 04 }\nIt may look strange and is harder to read, but works. So, the problem seems to be somewhere in the grammar.\nTested with version 3.7.1.. ",
    "marnao": "Forgive me I forgot to escape my periods in the regex! :-)\n. Thanks for the quick fix! We'll likely be using this as a patch until the next release.\n. thanks.\n. Why not use an external variable?\n. This isn't a perfect solution because you can't use yara's native recursive feature for multithreading, but you could use parallel instead of xargs here to make this faster.\n$ cat test.yara\nrule testrule\n{\n    condition:\n        not ext_filename matches /log.txt$/i\n}\n$ find testfolder -type f\ntestfolder/testfile2\ntestfolder/testfile1\ntestfolder/log.txt\n$ find testfolder -type f | xargs -I@ yara -d \"ext_filename=@\" test.yara @\ntestrule testfolder/testfile2\ntestrule testfolder/testfile1\n. To your point, I don't think having filename as a native variable is a bad idea either. There might be a good reason why this hasn't been done already. I do believe this is a suitable workaround though.\n. makes sense. thanks for the quick response.. We had many rules break with the 2000 limit. I had to go all the way up to 6000. Is this safe? Just potentially uses more resources? Not sure I understand the implications.. @plusvic thanks for the quick response as always. That's very helpful context.\nI think you have a legitimate concern about encouraging poor use cases. Some of our worst offending rules were externally sourced, i.e. we did not write them. I can't speak for these, but the signatures that we wrote that resulted in lengthy hex strings were either:\n1) automatically generated signatures on PE artifacts\n2) static constants used to identify a particular kind of compression\nHope this helps!. ",
    "Neo23x0": "Please compile a new windows version to fix that issue. \nI eagerly await this bugfix in a compiled release. \nthanks for your great work\n. That's strange, indeed. \nIf I copy the rule code from this post and download the metasploit code it works fine. \nWith my yara file and the metasploit .rb I tested from the Windows Setup Package, yara32.exe crashes. I tested it on Windows 7 x64 in a Virtual Machine with 2,5 GB RAM, no Antivirus installed to avoid access conflicts during scan. \nI packed the files I used:\nhttp://www.sendspace.com/file/a3h6wp\n. \n. Great, thanks! \nI use your python library in a project and cant wait to see a 2.1 version compiled. I had to disable the process checking due to the x64 process checking issue. \nYour work is awesome! \nMe encanta. \n. Ahh - I already noticed that this string is too common. \nI think that my set of over 2400 rules, partly written by myself and copied from others is a good testing ground ;) throwing all possible errors. \n. Hi Scott,\nyou can always pipe the error messages to \"nul\" like this:\nyara32.exe -r rules.yar C:\\Windows 2> nul\nCheers\nOn Fri, Aug 22, 2014 at 12:40 PM, Victor M. Alvarez \nnotifications@github.com wrote:\n\nClosed #135 https://github.com/plusvic/yara/issues/135.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/plusvic/yara/issues/135#event-156011022.\n\n\nSincerely\nSaludos cordiales\nMit freundlichen Gr\u00fc\u00dfen\nFlorian Roth\nPGP Key:\nhttps://www.dropbox.com/sh/lw9ymama8rjukjs/zNQZAujnQM\nKey ID:\nFE04247D50D1ACC855CB FD26 19E9 BF9E 78C1  D582 FE04 247D 50D1 ACC8\n. Ups - sorry. \nI posted the same request in a separate issue. I closed mine and support the request of ricardo. This is something very important to me, as I don't want to create local temporary files on the systems I run my program.\n\"I precompiled, packed and encrypted my yara rules. \nNow I am reading these prepared files from disk, decrypt and decompress them in memory and hold the precompiled rule set data in a variable called \"ruleSet\".\nWhat I would like to do is:\nyara.load(ruleSet)\nBut the method requires a filename to load the precompiled rules from. \nIs there a way to add the option to read the rules from a variable as well? \nI don't' want and can't write the decrypted/decompressed content to disk to read it again via the \"load\" function.\nRegards,\nFlorian\"\n. It would be really helpful if I could at least pass a file handle(!) so that I could use a StringIO object to simulate a file from a string.\n. I'll try to read them from a Ramdisk via (PyFilesystem) MemoryFS() and report back if I found a solution. \n. No luck with that approach and I dont want to use file system drivers. I suppose I'll just wait for a native solution in the module.   \n```\nfrom fs.memoryfs import MemoryFS\nm = MemoryFS()\ntempfile = m.open(\"test.yar\", 'w')\ntempfile.write(u\"rule test { strings: $s1 = \\\"Test\\\" condition: $s1 }\")\ntempfile.close()\nimport yara\nwith m.safeopen('test.yar') as test_file:\n    y = yara.load(test_file)\nTypeError: load() takes 1 argument\n```\n. This .. is .. awesome. \nLet's hope that this feature finds its way into a stable release. We Python programmers need this in order to allow us a secure deployment of rules without writing them to disk before they can be initialized. \n. I support that request. \nThe most important thing for me is the possibility to get the length of the compiled rule list. I precompile them and save them to a file. After a load() of these external files I did not find a way to get the number of rules I've loaded. \n. Awesome!\n. Oh sorry - yes I do. Did I miss a change?\n. Here is a powershell example:\nhttps://www.bsk-consulting.de/2014/08/28/scan-system-files-manipulations-yara-inverse-matching-22/\n. Try:\nimport \"pe\"\nrule test {\ncondition:\npe.characteristics and pe.machine == pe.MACHINE_I386\n}\nOn Tue, Jan 27, 2015 at 2:54 PM, Joe Security notifications@github.com\nwrote:\n\nimport \"pe\"\nrule test {\ncondition:\npe.characteristics & pe.32BIT_MACHINE\n}\n\n\nSincerely\nSaludos cordiales\nMit freundlichen Gr\u00fc\u00dfen\nFlorian Roth\nPGP Key:\nhttps://www.dropbox.com/sh/lw9ymama8rjukjs/zNQZAujnQM\nKey ID:\nFE04247D50D1ACC855CB FD26 19E9 BF9E 78C1  D582 FE04 247D 50D1 ACC8\n. I use the yara-python module in THOR and allow throttling of the scan\nprocess by adding short sleeps every X directory walk elements.\nThis way the scan takes longer but single core CPU systems don't get the\nfull load and other processes can step in and perform their tasks.\nI also set the priority/nice of the scan process to the lowest value\navailable. (depending on Windows/Linux OS)\nOn Fri, Oct 16, 2015 at 8:08 AM, chrisddom notifications@github.com wrote:\n\nHi quick question - apologies if this isn't the correct place-\nIs there a way, or anything on the roadmap, to limit CPU usage with Yara?\nIf not I'll look at wrapping it with something like\nhttp://mion.faireal.net/BES/ before execution.\nThanks!\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/plusvic/yara/issues/358.\n\n\nSincerely\nSaludos cordiales\nMit freundlichen Gr\u00fc\u00dfen\nFlorian Roth\nPGP Key:\nhttps://www.dropbox.com/sh/lw9ymama8rjukjs/zNQZAujnQM\nKey ID:\nFE04247D50D1ACC855CB FD26 19E9 BF9E 78C1  D582 FE04 247D 50D1 ACC8\n. Interesting - I get this error using the prebuilt 3.5.0 package for Windows. (Python 2.7)\nI thought that only the \"cuckoo\" and \"magic\" modules aren't compiled into YARA by default. \nRule that I've tested with\n```\nimport \"pe\"\nrule specific_signature_test {\n  condition:\n    for any i in (0..pe.number_of_signatures - 1):\n      (pe.signatures[i].issuer == \"/C=GB/ST=Greater Manchester/L=Salford/O=COMODO CA Limited/CN=COMODO Code Signing CA 2\" and\n       pe.signatures[i].version == 3 and\n       pe.signatures[i].subject contains \"Athinodorou\" and\n       pe.signatures[i].serial == \"e2:47:ea:06:60:29:b7:05:33:c1:57:92:b6:0e:d4:d8\" and\n       pe.signatures[i].not_before == 1409184000 and\n       pe.signatures[i].not_after == 1440806399)\n}\n```\n . No. It's not. \nI don't know exactly what you mean with \"safe to use\". There are rule sets of higher and lower quality. You should never delete on a YARA rule match unless you are absolutely sure that this is what you want. \nI contrast to common Antivirus solutions, YARA based solutions tend to report on suspicious objects that are neither clean nor malicious. An antivirus has to decide if something is good or bad without any user interaction. \nMany YARA rules that you can find online produce a lot of false positives. \n. It's current in the package index\nhttps://pypi.python.org/pypi/yara-python/3.5.0\nOn Thu, Aug 4, 2016 at 1:06 AM, xambroz notifications@github.com wrote:\n\ni can se that the 3.5.0 was released, but what about the python binding\n(yara-python)?\nIt disappeared from the https://github.com/VirusTotal/yara repository but\nhttps://github.com/VirusTotal/yara-python still not having release.\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/VirusTotal/yara/issues/459#issuecomment-237402470,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ACuCpIPI54NcxWiYHCMw_J0LsHgt03gHks5qcR7vgaJpZM4IztsY\n.\n\n\nSincerely\nSaludos cordiales\nMit freundlichen Gr\u00fc\u00dfen\nFlorian Roth\nKey material (S/MIME, PGP, Threema):\nhttps://www.dropbox.com/sh/lw9ymama8rjukjs/zNQZAujnQM\n. Check https://github.com/Neo23x0/Loki\n. # Option 1\nhttps://yara.readthedocs.io/en/v3.5.0/gettingstarted.html#installing-on-mac-os-x-with-homebrew\nOption 2\nInstall OpenSSL via Homebrew\n$ brew update \n$ which openssl  \n/usr/bin/openssl \n$ brew install openssl\n$ brew link openssl --force \n$ which openssl \n/usr/local/bin/openssl\nOption 3\nDisable OpenSSL.\n./configure --disable-shared --disable-magic --disable-cuckoo --without-crypto. Ah - no. \nlet me explain it differently.\nThe objects are embedded in a hex encoded form. (see the screenshot)\n\nIf you hex decode the strings, you'll get the VBA code in wide formatting. (not sure if this is always the case but I haven't seen ASCII code)\n\nSo, it would be easier for a user to to write \n$vba1 = \"10.24.113.102/office.png\" hex wide\nInstead of \n$vbacode1 = \"00310030002E00320034002E00310033002E003100300032002F006F00660066006900630065002E0070006E0067\"\n(note that this string and no byte chain)\nI propose this feature because\n1. I have seen a lot of malicious scripts and obfuscation stuff for which I wrote rules with strings like $vbacode1recently and the number of malicious embedded content is rising\n2. I though that it wouldn't be that difficult to implement\nPossible problem:\n- The nocase keyword and its application. I see that I made an error in the initial request. I used the { instead of \" symbols. \nMy fault. . I'd like to add that a simple import \"hash\" leads to an error Unknown module \"hash\" with YARA Python 3.6.3.. @hillu who investigated that issue came to the conclusion that this is most likely caused by the high number of magic header checks in my rules, which are often in the form of uint16(0) == 0x5a4d. . I noticed that this only happens if I use wide in combination with nocase . Awesome, thanks. ",
    "awick": "I'm just going to use\nifdef YR_YARA_H\n// 2.0 api\nelse\n// old api\nendif\n. ",
    "joachimmetz": "Related here is that ./bootstrap.sh fails on Fedora 18\naclocal: macro _LT_DECL_SED' required but not defined\naclocal: macro_LT_FUNC_STRIPNAME_CNF' required but not defined\nsince bootstrap tries to use aclocal-1.11 and aclocal-1.12 is available.\n. looking closer at bootstrap not sure why there are 2x configure.ac necessary you can have one. I'll see if I can prep a fix for this.\n. So adding aclocal-1.12 works, but the solution is not very robust.\nAlso I'm wondering why you have 2x configure.ac, you don't really need that.\nYou can have 1 configure.ac for your entire project.\n. Let me prep a CL to show you what I mean.\n. https://github.com/plusvic/yara/pull/109\n. Thx\n. BTW there is no need to keep config.h under source control since it is autogenerated by autoheader.\nI can add the changes for that to this CL if you want.\n. Another point that needs to be addressed is that libyara/Makefile.am contains a reference to rules.h which does not exist.\n. Aha I see. What you could do there is not use the git version but an autotools \"make dist\" package. But that's up to you. The downside of keeping it under version control is that different versions of the autotools will generate different config.h files.\n. ",
    "smutzc": "The question here is does this belong built into yara or something left to the user.\nClearly, it\u2019s pretty trivial to accomplish this using external vars either from the CLI or from any of the APIs. Scope could be an issue, but simply providing the equivalent of time() seems like a very reasonable place to draw a line. The timezone/offset issue is not only something that you have to worry about on the scanner side, but it\u2019s also an issue for many file types which provide a timestamps with no indication of timezone or offset. If this caveat is already necessary for the things being scanned, I don\u2019t see why it hurts to perpetuate this in the scanner also.\nThis should be pretty trivial to implement inside yara and the benefit would be that it would be portable. You could rely on this functionality everywhere yara is used, including places where it\u2019s embedded in a bigger product for which you can\u2019t control external vars: Ex. virustotal intelligence, fireeye, etc.\nAnother downside to this I can see is that yara signatures generally return the same result over time (unless they rely on external vars which can change) when applied to the same file. This proposal intentionally changes this property.\nAgain, the question is whether this merits becoming a portable feature of yara. I think it\u2019s worth considering and it adds value. I understand and respect the principle of minimization though and appreciate that yara has been successful at doing its core functionality well while avoiding getting distracted with other non-core features.\n. ",
    "csmutz": "This enhancement has been implemented. See issue #745 . ",
    "arichardson9": "I agree with this feature request.  It would be extremely helpful to be able to have the length of the matched text available in the conditions section to enable more complex conditions on variable matches, especially regex.  I dont see any progress on this feature request but would love to see an implementation of it.\n. ",
    "ChuckFoo": "Sure...still segfaults.\nThe sem_open, which should be initializing the (un)used_slots pointers appears to be failing w/ a \"permission denied\" (I put a perror() call in there before the return errno).  I noticed that earlier too, but apparently forgot by the time I had something working and wrote the issue above.\nI wasn't able to figure out why the EACCES was coming back earlier, so I switched it to use sem_init and made SEMAPHORE be 'sem_t' instead of 'sem_t*', changed the other sem_ calls to account for that, and things worked.  But your comment in there about using sem_open instead of sem_init due to something in OS X made me think that the \"real fix\" might be different, which is why I didn't provide a patch, just the description.\nI suspect that the EACCES now is because an \"old\" semaphore stuck around after crashing/testing earlier...yup, I see it and can remove it using the ipc cmd line utilities.\nI have to head home now, but I'll try and dig a little deeper tomorrow and see if I can't figure out what the initial crash was again (may not be the EACCES issue I just described but something else) and maybe work around it without switching to sem_init usage.  Worst case, may need some more #ifdef to handle a difference between Linux and OS X.\n. Okay, I started re-investigating this, and on one box of mine (Ubuntu 12.04) it is still segfaulting, but on another (Ubuntu 10.04) it seems to work fine...I'll let you know if I get any more useful data here. :(\n. Okay, there was some stale stuff in /dev/shm/ that didn't get cleaned up from the earlier crashes before I pulled the updates you had committed down to test.  Manually nuking those and trying again made the segfault go a way, so I'm closing this issue.\n. Sounds like a fine way to fix it.  Thanks!\n. ",
    "btwood": "Alternatively you could write your regex to be explicitly inclusive of \"\\x0a\". Instead of using /./ use /[\\x00-\\xFF]/\n. ",
    "chrisddom": "I'm still getting the issue with the latest source. I'll have another look.\n. Steps to reproduce were to compile the yara rule above (works fine)\nThen execute with yara, which leads to the error above.\nI've tried on a few different systems with the same results, and with the current exe and the current source (built with VS 2012) .\nFor now I'm using some code using the Python bindings instead.\n. Thanks for the quick reply - will do\n. ",
    "jcannell": "Hi Victor,\nI just uploaded a couple to VT. Here are the md5 values\n2be483641c087cf5b9994ee509a73be6\n5aa98efb9e1833bee82912490262ec3f\nPlease let me know if you are seeing this behavior as well.\n. I like the \"on demand\" idea. No reason to parse the imports unless it's needed, yes?\nAnd I think it's a good idea to have a limit, even if it seems arbitrary. I'm not real familiar with yara at the source level but I know things tend to get abused when there aren't limits :\\\n. found another one today, still cryptowall:\nhttps://www.virustotal.com/en/file/8a07721864d8bcb92f3c4e78ae5b6e87e60d92930c60a44b019bf09622caca47/analysis/1439301773/\n. And here is a Bunitu Proxy Trojan that doesn't hit on imphash, just uploaded this today.\nhttps://www.virustotal.com/en/file/8aad575ee69620c6f63aa64e394ad30c223c35a4e30d3632605b29eb6b168488/analysis/1439303313/\nTook a closer look at imports. I didn't see any more than 256 functions imported from a single dll. What could be the issues for this imphash not hitting, I wonder?\npe bear: http://imgur.com/HQxq5LM\n. Is this \"strict stance\" really necessary? The reason I ask is, if I can get an impash using pefile and/or VT, then to me this only seems like a shortcoming and not a \"feature\" of yara.\nI would love to see the imphash of these files (and many others that I've recently discovered) hitting with yara if at all possible. It will make it a more viable tool overall.\n. I understand. I hope you guys might be able to improve this whenever time allows.\n. ",
    "crankyflamingo": "Excellent! It doens't seem to happen with this version!\nThanks very much!\n. ",
    "KurtPfeifle": "Forget it. \nUsing git diff I found that my Git clone was different from master/HEAD. \nDunno how this difference came about initially... I'd initially checked out the repo on Dec 05, 2013, and ever since been running git pull from time to time which never caused any problems. But now git diff | wc -l showed 1919 returned lines.\nA completely fresh checkout compiled without any problem. Closing the issue now.\n. ",
    "wxsBSD": "That commit only partially implements rule iterators in Python. You can't access strings or conditions. Should this be reopened?\n. This is possibly related to what I was doing in #132. You can build a linter in python if the rules exposed there.\n. You may want to check this out:\nhttps://github.com/8u1a/plyara\n. I have a branch I can dig out to do this.\n. I had actually thought about this yesterday while looking at something else in this area. This would certainly be a nice feature to have!\n. I have the start of this locally. Just need to attach it to OpenSSL to do the parsing of the certificate for me, and then expose it via the module language.\n. I've got this going in my branch: https://github.com/wxsBSD/yara/tree/authenticode. It seems to work well but needs a little bit more work before I'm comfortable enough with it. I wanted to get it out there to see if anyone wanted to provide feedback.\nI grabbed a bunch of binaries that were tagged as signed from VirusTotal and have been using them as tests. Here's an example of a signature that I wrote for one binary that ended up finding two others!\n```\nwxs@psh yara % ls ~/Desktop/malware/signed_bins/random | wc -l\n     587\nwxs@psh yara % head -12 test.sig                                    \nimport \"pe\"\nrule test {\n  condition:\n    //pe.signature.issuer == \"C=GB, ST=Greater Manchester, L=Salford, O=COMODO CA Limited, CN=COMODO Code Signing CA 2\" and\n    pe.signature.issuer == \"/C=GB/ST=Greater Manchester/L=Salford/O=COMODO CA Limited/CN=COMODO Code Signing CA 2\" and\n    pe.signature.version == 3 and\n    pe.signature.subject contains \"Athinodorou\" and\n    pe.signature.serial == \"e2:47:ea:06:60:29:b7:05:33:c1:57:92:b6:0e:d4:d8\" and\n    pe.signature.notBefore == \"Aug 28 00:00:00 2014 GMT\" and\n    pe.signature.notAfter == \"Aug 28 23:59:59 2015 GMT\"\n}\nwxs@psh yara % ./yara ./test.sig ~/Desktop/malware/signed_bins/random\ntest /Users/wxs/Desktop/malware/signed_bins/random/23940c3f92b787acebcb615275e0e0dd\ntest /Users/wxs/Desktop/malware/signed_bins/random/781bdf55126dc3200308bb01eca2ff97\ntest /Users/wxs/Desktop/malware/signed_bins/random/febc575e925e06f1a5eee23089cd960a\nwxs@psh yara %\n```\nOn my TODO list is work through the issues surrounding binaries with multiple signatures. While they are rare, they do exist. A bunch are available at: https://pjones.fedorapeople.org/shim-archive/ which may or may not completely break my code. I need to test it out. Part of this work is going to require moving from a single structure to an array of structures for storage. One downside to doing this is I haven't found a way to do:\npe.signature.issuer contains \"FOO\"\nAnd have yara walk each structure in the array looking at the issuer element for me. The best way I've found to do this is to expose it via a function that iterates over the array.\nAnother thing on my TODO list is to move away from the slash separators in issuer and subject strings, and go with the more traditional comma separator. This is purely an artifact of the way OpenSSL generates those strings for me.\nLastly, I'd like to explore adding X509 extensions as those may be interesting. I'm open to further suggestions on this.\n. I'm not sure I would care to do validation, to be perfectly honest. I'm mostly interested in getting the ability to hunt for signed binaries by specific attributes of the certificate that was used to sign them.\n. I suspect this can be closed.\n. Wondering if this looks like the right solution? I'll be happy to send a pull request if you think so.\ndiff --git a/libyara/exec.c b/libyara/exec.c\nindex 88f5c19..f3f5321 100644\n--- a/libyara/exec.c\n+++ b/libyara/exec.c\n@@ -661,6 +661,13 @@ int yr_execute_code(\n       case OP_CONTAINS:\n         pop(r2);\n         pop(r1);\n+\n+        if (IS_UNDEFINED(r1) || IS_UNDEFINED(r2))\n+        {\n+          push(FALSE);\n+          break;\n+        }\n+\n         push(strstr(UINT64_TO_PTR(char*, r1),\n                     UINT64_TO_PTR(char*, r2)) != NULL);\n         break;\n. Thanks! I just walked through all that code in a debugger and decided on push(UNDEFINED) and was about to update this pull request. :)\n. My intent is to share it back, but I first have to talk to some people about it. I will get back to you!\n. I actually talked with a co-worker about the need to store the length of the string, and discussed that exact solution.\nI'm willing to implement this change. I've got some other things on my plate right now but will see if I can't come up with something and get back to you. If anyone beats me to implementing this I certainly won't complain!\n. I believe this can be closed now.\n. Given the following rules:\n```\nrule test1 : tag1 tag2 {\n  meta:\n    foo = \"BAR\"\n    baz = \"PANTS\"\n  strings:\n    $a = \"TEST1\"\n  condition:\n    $a at 0\n}\nrule test2 {\n  meta:\n    OMGWTFBBQ = \"BLAH\"\n    bool = true\n    int = 1\n    int2 = 0\n  strings:\n    $a = \"TEST2\"\n  condition:\n    $a at 0\n}\n```\nYou can do the following code:\nrules = yara.compile('./test.sig')\nfor rule in rules:\n    print rule.identifier\n    print rule.tags\n    print rule.meta\nWhich results in this output:\ntest1\n['tag1', 'tag2']\n{'foo': 'BAR', 'baz': 'PANTS'}\ntest2\n[]\n{'int': 1, 'bool': True, 'OMGWTFBBQ': 'BLAH', 'int2': 0}\n. Thanks! I had done this work a while ago (when working on #132) but accidentally deleted it. :(\nI still think #132 is something worth pursuing. Getting strings out of rules is not hard, but getting the condition is going to require a lot more work I suspect.\n. I believe I've address both of your concerns. Thanks again for those!\n. Sorry about the noise, I should have caught this earlier.\n. Thanks!\n. I also added a fix for imphash incorrectly using \"return_integer\" when it should be returning a string.\n. Here's an updated signature to the one I mentioned in #155. The code now uses an array of signature structures.\nrule test {\n  condition:\n    for any i in (0..pe.signature_length):\n      (pe.signature[i].issuer == \"/C=GB/ST=Greater Manchester/L=Salford/O=COMODO CA Limited/CN=COMODO Code Signing CA 2\" and\n       pe.signature[i].version == 3 and\n       pe.signature[i].subject contains \"Athinodorou\" and\n       pe.signature[i].serial == \"e2:47:ea:06:60:29:b7:05:33:c1:57:92:b6:0e:d4:d8\" and\n       pe.signature[i].notBefore == \"Aug 28 00:00:00 2014 GMT\" and\n       pe.signature[i].notAfter == \"Aug 28 23:59:59 2015 GMT\")\n}\nI ran this against 587 signed samples I had laying around and it matched 3.\nwxs@psh yara % ./yara ./test.sig ~/Desktop/malware/signed_bins/random \ntest /Users/wxs/Desktop/malware/signed_bins/random/23940c3f92b787acebcb615275e0e0dd\ntest /Users/wxs/Desktop/malware/signed_bins/random/781bdf55126dc3200308bb01eca2ff97\ntest /Users/wxs/Desktop/malware/signed_bins/random/febc575e925e06f1a5eee23089cd960a\nwxs@psh yara %\nI also ran this signature to test against the collection of binaries with multiple signatures:\nrule authenticode_array_test {\n  condition:\n    for any i in (0..pe.signature_length):\n      (pe.signature[i].issuer == \"/CN=Fedora Secure Boot CA\")\n}\nThe test binaries are available at https://pjones.fedorapeople.org/shim-archive/. This is the result:\nwxs@psh yara % ./yara ./test.sig ~/Desktop/signed-shim/              \nauthenticode_array_test /Users/wxs/Desktop/signed-shim//shim-0.4-1.fc19.x86_64.efi\nauthenticode_array_test /Users/wxs/Desktop/signed-shim//shim-0.5-1.fc20.x86_64.efi\nauthenticode_array_test /Users/wxs/Desktop/signed-shim//shim-0.2-4.4.fc18.x86_64.efi\nauthenticode_array_test /Users/wxs/Desktop/signed-shim//shim-fedora-0.2-3.3.fc18.x86_64.efi\nauthenticode_array_test /Users/wxs/Desktop/signed-shim//shim-fedora-0.2-3.2.fc18.x86_64.efi\nauthenticode_array_test /Users/wxs/Desktop/signed-shim//shim-fedora-0.2-3.fc18.x86_64.efi\nauthenticode_array_test /Users/wxs/Desktop/signed-shim//shim-fedora-0.5-1.fc20.x86_64.efi\nauthenticode_array_test /Users/wxs/Desktop/signed-shim//shim-fedora-0.4-1.fc19.x86_64.efi\nauthenticode_array_test /Users/wxs/Desktop/signed-shim//shim-fedora-0.7-1.fc20.x86_64.efi\nauthenticode_array_test /Users/wxs/Desktop/signed-shim//shim-fedora-0.2-4.4.fc18.x86_64.efi\nauthenticode_array_test /Users/wxs/Desktop/signed-shim//shim-0.2-3.2.fc18.x86_64.efi\nauthenticode_array_test /Users/wxs/Desktop/signed-shim//shim-0.7-1.fc20.x86_64.efi\nauthenticode_array_test /Users/wxs/Desktop/signed-shim//shim-0.2-4.4.fc19.x86_64.efi\nauthenticode_array_test /Users/wxs/Desktop/signed-shim//shim-fedora-0.7-2.fc20.x86_64.efi\nauthenticode_array_test /Users/wxs/Desktop/signed-shim//shim-fedora-0.2-4.4.fc19.x86_64.efi\nwxs@psh yara %\nThat is a total of 17 binaries. Of the 19 total binaries all but 2 are signed by Fedora. The only two which are not signed by Fedora are are shim-msonly-0.4-1.fc19.x86_64.efi and shim-0.7-2.fc20.x86_64.efi, which are the only two not listed above.\nThe one thing I have not done yet is convert from the slash notation for issuer and subject to the more commonly seen comma notation. I figure I can do that once this has got more testing and feedback.\n. I've updated this to keep the ASN1_TIME structures in a list. I'd like to be able to say:\npe.signature.not_before(date('2013')) or pe.signature.not_after(date('2014'))\nThe idea would be that any signature between 2013 and 2014 would be found. At this point I'm not sure how to proceed. I think my next steps are to teach the grammar how to parse and understand date(), and to convert the arguments to a time_t structure. Then I would need to write not_before() and not_after() which would both take in a time_t argument and do the comparison across all items in the list. I'm not sure how to proceed with either of those though.\nMy thoughts for the second half would be something like this:\ndeclare_function(\"not_before\", \"p\", \"i\", signature_not_before);\nWhere the input argument would be an opaque pointer, which would be casted to time_t internally. I think this is the easiest way to go, if I can wrap my head around the grammar changes regarding date(). :smile:  \nI've also got the idea that it would be great to be able to have functions that operate on a given item in an array directly. Kind of like this:\npe.signatures[i].not_before(date('2013')) or pe.signatures[i].not_after(date('2014'))\nUsing this method would allow me to store the ASN1_TIME structures in the signatures array and would make accessing them easy. I suspect this is a pretty drastic change though, but I wanted to throw it out as it makes writing these kinds of things easier I think.\n. Ah, I wasn't sure a module do things like that. That certainly makes things much easier.\nHowever, I'm seeing crashes when putting a function inside an array of structures. This is how I've modified the latest version of my branch:\nbegin_struct_array(\"signatures\");\n    declare_string(\"issuer\");\n    declare_string(\"subject\");\n    declare_integer(\"version\");\n    declare_string(\"algorithm\");\n    declare_string(\"serial\");\n    declare_string(\"not_before\");\n    declare_string(\"not_after\");\n    declare_function(\"testfunc\", \"\", \"i\", testfunc);\n  end_struct_array(\"signatures\");\n  declare_integer(\"number_of_signatures\");\nAnd this is my testfunc.\ndefine_function(testfunc)\n{\n  return_integer(0);\n}\nAnd this is the test sig which causes the crash:\n```\nimport \"pe\"\nrule test {\n  condition:\n    for any i in (0..pe.number_of_signatures):\n      (pe.signatures[i].testfunc() == 0)\n}\n```\nAnd here is the crash:\n* thread #1: tid = 0x32c196, 0x0000000100030edc yara`yr_object_destroy(object=0x0000000000000000) + 12 at object.c:288, queue = 'com.apple.main-thread', stop reason = EXC_BAD_ACCESS (code=1, address=0x0)\n  * frame #0: 0x0000000100030edc yara`yr_object_destroy(object=0x0000000000000000) + 12 at object.c:288\n    frame #1: 0x000000010003115f yara`yr_object_destroy(object=0x000000010010fc90) + 655 at object.c:352\n    frame #2: 0x0000000100030f3a yara`yr_object_destroy(object=0x000000010010fc50) + 106 at object.c:296\n    frame #3: 0x0000000100031026 yara`yr_object_destroy(object=0x0000000100106d30) + 342 at object.c:324\n    frame #4: 0x0000000100030f3a yara`yr_object_destroy(object=0x0000000100105000) + 106 at object.c:296\n    frame #5: 0x000000010002643d yara`yr_hash_table_destroy(table=0x0000000100104df0, free_value=0x0000000100030ed0) + 109 at hash.c:130\n    frame #6: 0x000000010003f8d5 yara`yr_rules_scan_mem_blocks(rules=0x0000000100104ce0, block=0x0000000000000000, flags=0, callback=0x0000000100002050, user_data=0x00007fff5fbffbc1, timeout=0) + 1525 at rules.c:461\n    frame #7: 0x000000010003f994 yara`yr_rules_scan_mem(rules=0x0000000100104ce0, buffer=0x0000000100200000, buffer_size=551680, flags=0, callback=0x0000000100002050, user_data=0x00007fff5fbffbc1, timeout=0) + 100 at rules.c:491\n    frame #8: 0x000000010003fa01 yara`yr_rules_scan_file(rules=0x0000000100104ce0, filename=0x00007fff5fbffbc1, flags=0, callback=0x0000000100002050, user_data=0x00007fff5fbffbc1, timeout=0) + 97 at rules.c:516\n    frame #9: 0x000000010000326f yara`main(argc=3, argv=0x00007fff5fbffa80) + 2063 at yara.c:1119\n    frame #10: 0x00007fff81c595c9 libdyld.dylib`start + 1\nIs it supposed to be possible to call a module function in this way?\nIdeally I would just write a function called \"not_before\" and rename the current one to be \"not_before_string\".\n. The call to yr_execute_code() on line 401 of rules.c returns ERROR_INTERNAL_FATAL_ERROR, and then during the cleanup yr_hash_table_destroy() is called on line 461, which eventually passes a NULL pointer to yr_object_destroy().\nIt appears you can have a function be a member of a structure, but not if that structure is in an array. Is this intentional?\n. Awesome. I'll get this implemented as soon as I get home today! Thanks!\n. I've pushed the latest changes that should cover everything. The integer versions of not_before() and not_after() may be slightly confusing (at least they were to me at first) so I'll try and explain them here. When given an integer not_before() will return 1 if any of the certificates have a notBefore attribute which is an exact match or comes \"after\" the integer argument. When given an integer not_after() will return 1 if any of the certificates have a notAfter attribute which comes \"before\" the integer argument. This is not inclusive. It helped me to draw it out in a picture:\n\nThis allows you to specify signatures that become valid on a specific time and/or expire at a specific time.\n. It's worth noting that the searching is not exactly optimal (but it isn't likely to be a performance problem in the real world). If there is more than one signature on a binary, when you do a not_before() or not_after() you will search all available certificates (first match will return however), because there is no way to tell which certificate I should be searching in. A binary with multiple signatures is rare as far as I can tell, but it is technically possible.\n. I thought the string version was a good idea (in addition to searching for time ranges using the integer method) because sometimes I only have those exact dates when searching through piles of malware. I figure allowing for more general searching based upon time ranges but also very specific searching if you want to narrow things down exactly is good.\n. I'll change not_before and not_after to be integers and rename the current functions to valid_after() and valid_before().\nI'll also implement a valid_on(), which was on my TODO list already. :)\nIt's not going to be pretty converting the ASN1_TIME to time_t though. I've found some stuff in OpenSSL (https://github.com/openssl/openssl/blob/master/crypto/asn1/a_time.c#L200) which I might be able to hack together. I think it would be something like convert the ASN1_TIME to a struct tm, then call mktime(tm) on it.\n. OK, I think what I have now is right. Here's some example rules I've been using to test out this sample: 4d654b567d3f9456707986a58a3ec5bcaf325f6f3313d88158c60c102299f904.\n```\n/\n * Not Before: May 14 12:14:16 2014 GMT == 1400069656\n * Not After : Aug 22 11:08:43 2015 GMT == 1440241723\n /\nrule integer_test {\n  condition:\n    for any i in (0..pe.number_of_signatures):\n      (pe.signatures[i].not_before == 1400069656 and\n       pe.signatures[i].not_after == 1440241723)\n}\nrule valid_test {\n  condition:\n    for any i in (0..pe.number_of_signatures):\n      (pe.signatures[i].valid_after(1400069656) and\n       pe.signatures[i].valid_before(1440241723))\n}\nrule valid_on_test {\n  condition:\n    for any i in (0..pe.number_of_signatures):\n      (pe.signatures[i].valid_on(1440241723))\n}\n```\nThe code which converts ASN1_TIME to time_t uses gmtime(3), because all of test samples specify timestamps in UTC time.\n. Forgot to mention that since ord_lookup can no longer return NULL, there is no point in checking for it, so I removed those checks.\n. I'm opening this up to get some discussion on it. I'd like to know what you think of this before I finish it up.\nHere's an example signature (details have been changed to protect the guilty):\n```\nimport \"pe\"\nimport \"entropy\"\nrule test_entropy {\n  condition:\n    entropy.entropy(0, 100) >= 3 and\n    pe.version_info[\"InternalName\"] == \"FAKE INTERNAL NAME\" and\n    pe.locale(1033) and\n    for any i in (0..pe.number_of_resources - 1):\n      (pe.resources[i].size == 7269 and\n       entropy.entropy(pe.resources[i].data) >= 3) \n} \n```\nThe only thing I have left to do is to make it so the entropy module does not truncate down to an integer. This is going to require that I make double a type that functions can receive and return. I also need to look to see how I make the YARA compiler store things as double properly.\n. I've started to implement the necessary changes, but I've recently become sick and have family in town for the holidays so I may not be able to get to this until next week. I wanted to push what I've been sitting on so you can at least see where I'm heading.\nRight now the grammar is set and I just need to figure out what the new instructions should be so things work properly.\n. I've got all the comparisons working correctly when one of the arguments needs to be converted to a double. I'm going to work on the arithmetic operators tomorrow, which should address all your concerns from the first round of review. Thanks!\n. I'm going to do some more testing and cleanup, but otherwise I think I did this properly.\n. Thanks for merging! One thing I noticed while looking at this is there are a lot of places in grammar.y where yr_parser_emit() is called without checking the return value. Would you like to see those cleaned up?\n. That is probably a better idea. I can add that in an hour or so.\n. It's the other way around, totalhash published it first. And yes, I suspect this can be done. I can probably do it after I finish my current batch of changes.\n. I've got this mostly done. Just need to put it through some more tests.\n. I have to hold off on publishing this work, because it turns out that both the Viper and totalhash implementations are wrong, with respect to the paper, which means I have nothing to test against. I'm working with the author of the paper to ensure my implementation is accurate before I commit it.\nIf you want details of why they are wrong please see https://gist.github.com/wxsBSD/07a5709fdcb59d346e9e.\n. Agreed. Once I have an implementation that is accurate to the paper and produces \"correct\" results according to the author of the paper I will commit it and also fix both Python implementations. I'm not sure when that will be though.\n. Oops, hold on. I never actually removed the \"data\" field. :(\n. Here's an example of it in action, looking for a specific size and entropy value.\nrule test {\n  condition:\n    for any i in (0..pe.number_of_resources - 1):\n      (pe.resources[i].length == 2216 and\n       entropy.entropy(pe.resources[i].offset, pe.resources[i].length) == 3.150425016937155)\n}\n. The monte_carlo_pi functions return the percentage away from pi. Anything less than or equal to 0.06 is random.\nThe serial correlation test returns a value that approaches 0 for random input, and 1 for non-random input. In the case of the result being 0 the function will return -100000, to indicate that all values were equal.\nThe arithmetic mean test returns the percentage away from 127.5.\nThe entropy test returns the entropy value.\nHere are some test rules:\n```\n// Anything below 0.06 is likely random.\n// This rule fires because the string is not highly random.\nrule monte_carlo_pi_test_string {\n  condition:\n    math.monte_carlo_pi(\"foobarbazfooooooooo\") > 0.06\n}\n// Feed this the output of /dev/random and it should fire. Feed it any binary and it likely won't fire.\nrule monte_carlo_pi_test {\n  condition:\n    math.monte_carlo_pi(0, filesize) <= 0.06\n}\n// The closer to 0 the result is, the more random it is. The closer to 1 the less random.\nrule serial_correlation_test {\n  condition:\n    math.serial_correlation(0, filesize) < 0.2\n}\n// This function returns the distance from 127.5. The closer to 127.5 the more random the input.\nrule arithmetic_mean_test {\n  condition:\n    math.arithmetic_mean(0, filesize) < 0.07\n}\n```\nUsing these functions allows you to find potentially encrypted (not poorly obfuscated) files or chunks of files. For example, here's a rule that will look for a resource has a high entropy value and a low monte carlo pi error percentage (and thus likely encrypted):\n// Totally untested...\nrule encrypted_resource {\n  condition:\n    for any i in (0..pe.number_of_resources - 1):\n      (math.entropy(pe.resources[i].offset, pe.resources[i].length) > 7 and\n       math.monte_carlo_pi(pe.resources[i].offset, pe.resources[i].length) <= 0.06)\n}\n. I thought going with just \"deviation\" and \"mean\" is a bit confusing. To make it clear I ended up on mean_err and mean_deviation.\nmean_err takes the mean as an argument (must be a double) and returns the percentage difference between the argument and the calculated mean.\nmean_deviation takes the same argument (again, must be a double) and returns the standard deviation of the input against that value.\nHere's some examples of it in action. I fed the output of /dev/random to a file and then fed that file into YARA with these rules.\n```\nrule mean_err {\n  condition:\n    math.mean_err(0, filesize, math.MEAN_BYTES) < 0.07\n}\n// TODO: Find out a way to say (64 +/- 0.1)\nrule mean_deviation {\n  condition:\n    math.mean_deviation(0, filesize, math.MEAN_BYTES) >= 63.9 and\n    math.mean_deviation(0, filesize, math.MEAN_BYTES) <= 64.1\n}\n```\nYou'll notice that deviation is a bit cumbersome to use right now because it really only works by saying \"the result falls within this range\", which means the deviation is calculated twice. What do you think about  adding another argument which is the +/- value and making the function return 1 or 0. For example:\nrule mean_deviation {\n  condition:\n    math.mean_deviation(0, filesize, math.MEAN_BYTES, 63.9, 64.1) == 1\n}\nThis would calculate the deviation using 127.5 as m(X) and then return 1 if 63.9 <= result <= 64.1.\nEdit: To be clear, I'd make the function return 1.0 or 0.0 so that the return types between the proposed new function and the existing one match. This way you can specify your min and max values if you want, or leave them out if you want the exact value (maybe for a comparison to something else?).\nEdit 2: I went ahead and made 127.5 a constant declared in the module (MEAN_BYTES). I figured it would be easier for people to use that when trying to use these functions, assuming their input is all possible 256 bytes.\n. I agree with everything, and will make these changes. My desire to keep a mean_err is because when I started down this path my discussions with people were all centered around that instead of a standard deviation. I just thought it might be easier for people who already have an understanding of these tests to determine how far they are from the mean of a pseudo-random byte sequence as a percentage rather than have to switch over to using a standard deviation.\nYou are right though that standard deviation is a more widely used and understood mechanism for describing this, so I will make the changes.\nI thought about changing the grammar but decided against it in the interest of time. I'll try and get all these changes done tonight.\n. I think this should address all your concerns. I had to go with in_range as a function name since in is a reserved keyword. Also, in_range is an inclusive check.\nI decided to leave the MEAN_BYTES constant in there (not the best name though) so people can use it as the expected mean for a random distribution of bytes. This way you can do things like:\nrule in_range {\n  condition:\n    math.in_range(math.deviation(0, filesize, math.MEAN_BYTES), 63.9, 64.1)\n}\nTo see if your sample is within +/- 0.1 of one standard deviation of a random distribution, and is thus likely random. I think that's how it works?\n. I don't have anything pending. Thanks for the feedback!\n. Here's a rule that shows how to use this:\n```\nimport \"pe\"\n// Look for a resource named \"SCREEN0\" in Unicode.\nrule name_test {\n  condition:\n    for any i in (0..pe.number_of_resources - 1):\n      (pe.resources[i].name_string == \"S\\x00C\\x00R\\x00E\\x00E\\x00N\\x000\\x00\")\n} \n// Look for FILE in Unicode.\nrule type_test {\n  condition:\n    for any i in (0..pe.number_of_resources - 1):\n      (pe.resources[i].type_string == \"F\\x00I\\x00L\\x00E\\x00\")\n}\n```\nI ran this against 587 random samples I had laying around and it found 19.\nHere's the output (all the samples are on VT):\ntype_test /Users/wxs/Desktop/malware/signed_bins/random/01ee9fa7202c5afa8beff766e4f9d694\nname_test /Users/wxs/Desktop/malware/signed_bins/random/0cfd6bae475be1023f94bd5c0a5b4e6a\nname_test /Users/wxs/Desktop/malware/signed_bins/random/0b1ec85ebb4d23250c70524e135c5732\nname_test /Users/wxs/Desktop/malware/signed_bins/random/303390172ac7ce61dada40a3db768e8f\nname_test /Users/wxs/Desktop/malware/signed_bins/random/446da9bf8a96755887105668e80babca\nname_test /Users/wxs/Desktop/malware/signed_bins/random/5c4d88c4bdb2b61b0ce465f3436dada8\ntype_test /Users/wxs/Desktop/malware/signed_bins/random/688cafaff9f228c41b27422abd7d0d4e\ntype_test /Users/wxs/Desktop/malware/signed_bins/random/715639806101323dec6cfe43a8dd13df\nname_test /Users/wxs/Desktop/malware/signed_bins/random/827ebeac41c19c67ca90651104f73d93\ntype_test /Users/wxs/Desktop/malware/signed_bins/random/93c7f7b610cdced1526370ae3a56cd11\nname_test /Users/wxs/Desktop/malware/signed_bins/random/b8d91db370d21c3bbd4142b0e2c64456\nname_test /Users/wxs/Desktop/malware/signed_bins/random/c8c6e27b1b65c7b65c6c2a0ea98d0afd\ntype_test /Users/wxs/Desktop/malware/signed_bins/random/ca9cac94fe86e93893a0634b18074b8c\nname_test /Users/wxs/Desktop/malware/signed_bins/random/cd7ba9f900389bbc12f2067244576da9\nname_test /Users/wxs/Desktop/malware/signed_bins/random/d1222d6301ed72aa277c5964ce6a8a79\nname_test /Users/wxs/Desktop/malware/signed_bins/random/d61d178ef09bd38e3cab6aefff65a625\nname_test /Users/wxs/Desktop/malware/signed_bins/random/e4f800d88764b928131abc3ed5e5e79a\nname_test /Users/wxs/Desktop/malware/signed_bins/random/e4da47b5d6d24a436531003d1c9967f7\ntype_test /Users/wxs/Desktop/malware/signed_bins/random/e6ff6a9a384b218104b9513a26295bdb\n. Also, if you don't mind I'm willing to quickly add all the resource type constants to this module.\nIt would make checking for specific resource types much easier than having to know the values.\n. What is your opinion on not setting type, name, or id if the corresponding string is not NULL? If the string is not NULL then the integers are meaningless and should probably stay UNDEFINED.\n. I do ally development for YARA on OS X. I can test this out in a few hours.\n. I can't duplicate this on my OS X machine running the latest from master branch.\n. Ok! I'll get a patch ready by the end of today.\n. I need to read the specs again but I think there may have a problem elsewhere when this check is expanded. In particular you seem to use it in a few places which I think may be incorrect now that accepted values are expanded:\nif (pe->header->FileHeader.Machine == IMAGE_FILE_MACHINE_AMD64)\n    result = &((PIMAGE_NT_HEADERS64) pe->header)->\n        OptionalHeader.DataDirectory[entry];\n  else\n    result = &pe->header->OptionalHeader.DataDirectory[entry];\nI'm going to check through things a bit more but I think we should be using IMAGE_NT_OPTIONAL_HDR32_MAGIC and IMAGE_NT_OPTIONAL_HDR64_MAGIC magic. I should be getting my hands on some ARM PE binaries early this week, and I hope at least one of them is PE32+, so I can properly test this.\nFor now, I wouldn't merge this until I can verify that the problem actually exists.\n. I've fixed the incorrect usage of IMAGE_FILE_MACHINE_AMD64 everywhere I could find it. I've tested this by walking through the various checks in a debugger while using an ARM64 file as input. If you would like the file please let me know, I'll be happy to mail it to you.\n. These changes allow you to do things like this:\n// Entry point in .data section, that section is RW and contains initialized data.\nrule section_test {\n  condition:\n    pe.sections[pe.section_index(pe.entry_point)].name == \".data\" and\n    pe.sections[pe.section_index(pe.entry_point)].characteristics & pe.SECTION_CNT_INITIALIZED_DATA | pe.SECTION_MEM_READ | pe.SECTION_MEM_WRITE) == (pe.SECTION_CNT_INITIALIZED_DATA | pe.SECTION_MEM_READ | pe.SECTION_MEM_WRITE)\n}\nWhen combined with hash or math modules it makes for very interesting possibilities.\n. I am not able to test this scanning a process on a windows machine. I don't have a way to build it on windows.\n. I've got a question on section_index functions. Should they return -1 if the index can not be found? This allows you to write rules like this:\n// First match of $b should not be in any section.\nrule test_not_in_2 {\n  strings:\n    $b = \"This program cannot be run in DOS mode\"\n  condition:\n    pe.section_index(@b[1]) < 0\n}\nRight now they return UNDEFINED, which seems like the wrong thing to do if you want to be able to say \"there is no section that contains that address\" or \"there is no section which has that name\".\n. Any thoughts on making section_index return something other than UNDEFINED?\n. I think that would be fine and provide increased flexibility.\n. Are you using the latest release? There is a bug that happened during a refactoring of the imphash code which was fixed after the release was made. See this for more information:\nhttps://github.com/plusvic/yara/pull/199\nEDIT: I should be more clear here. If you are using the latest release you will see this problem. The upcoming release will fix it. Also, the problem is only for certain import hash calculations (those that import by ordinal for the DLLs in the mapping).\n. This can be closed now that 3.3.0 is out.\n. Sadly, Florian I believe your suggestion is, at best, a partial solution. It will not recognize 32bit files for non x86 architectures. I've currently got an open PR that would make this kind of rule very false-negative prone.\nI'm currently digging into why this is not working like I would expect. The pe.32BIT_MACHINE is not being recognized properly by the compiler and I'm not sure why.\n. If all you care about is that the Machine field is pe.MACHINE_I386 you can use that but it will not find 32bit files for other architectures. If you only care that it is a 32bit file but don't care what architecture you should be able to use the bitmask like you are describing, but sadly that is broken and I have figured out why.\nThe name needs to be changed from 32BIT_MACHINE to something else that does not start with a number. I'll get a PR up for Victor to look at.\n. I'd like to see the test file for this. Feel free to drop it to me in an email if you don't want to post a link to it.\n. You're overflowing the stack used by YARA. You can work around it by bumping STACK_SIZE in libyara/exec.c to a much bigger number. I used 85000, just because it was bigger than the number of strings you have. Just a quick read through the code, so I could be completely wrong here, but I think when you use 'any of them' in a condition it will push every non-chained string onto the stack. Since the stack size is much smaller than the number of things being pushed you get the overflow.\nAs to a possible better answer than bumping STACK_SIZE, I really don't know off the top of my head.\n. I know this is a wontfix but there is something about that segfault that is interesting. I went ahead and duplicated this on an OS X (10.10.2) machine. I then went looking for what would cause it and didn't come up with anything in the source code. Stepping through it in a debugger on OS X I noticed this is the start of the disassembly for yr_execute_code:\n(lldb) dis -F intel -c 11\nyara`yr_execute_code at exec.c:130:\n-> 0x10002af60:  push   rbp\n   0x10002af61:  mov    rbp, rsp\n   0x10002af64:  sub    rsp, 0x8005a0\n   0x10002af6b:  mov    rax, qword ptr [rip + 0x2e08e] ; (void *)0x00007fff7ac96070: __stack_chk_guard\n   0x10002af72:  mov    rax, qword ptr [rax]\n   0x10002af75:  mov    qword ptr [rbp - 0x8], rax\n   0x10002af79:  mov    qword ptr [rbp - 0x8004b8], rdi\n   0x10002af80:  mov    qword ptr [rbp - 0x8004c0], rsi\n   0x10002af87:  mov    dword ptr [rbp - 0x8004c4], edx\n   0x10002af8d:  mov    qword ptr [rbp - 0x8004d0], rcx\n   0x10002af94:  mov    dword ptr [rbp - 0x8004d4], 0x0\nThe crash happens executing the instruction at 0x10002af79.\nI then tried to reproduce this on a Linux machine and two FreeBSD machines. The crash did not happen on one of my FreeBSD machines, but did on the Linux and the other FreeBSD machine.\nThis is the disassembly from yr_execute_code on the Linux machine:\n(gdb) disass\nDump of assembler code for function yr_execute_code:\n   0x0000000000430fc8 <+0>: push   rbp\n   0x0000000000430fc9 <+1>: mov    rbp,rsp\n   0x0000000000430fcc <+4>: push   rbx\n   0x0000000000430fcd <+5>: sub    rsp,0x800538\n=> 0x0000000000430fd4 <+12>:    mov    QWORD PTR [rbp-0x800518],rdi\n   0x0000000000430fdb <+19>:    mov    QWORD PTR [rbp-0x800520],rsi\n   0x0000000000430fe2 <+26>:    mov    DWORD PTR [rbp-0x800524],edx\n   0x0000000000430fe8 <+32>:    mov    QWORD PTR [rbp-0x800530],rcx\n   0x0000000000430fef <+39>:    mov    DWORD PTR [rbp-0x800510],0x0\nAnd this is the output from yr_execute_code on the NOT WORKING FreeBSD machine (this one crashes at 0x439333):\n(gdb) disass yr_execute_code\nDump of assembler code for function yr_execute_code:\n0x0000000000439300 <yr_execute_code+0>: push   rbp\n0x0000000000439301 <yr_execute_code+1>: mov    rbp,rsp\n0x0000000000439304 <yr_execute_code+4>: sub    rsp,0x800580\n0x000000000043930b <yr_execute_code+11>:        mov    QWORD PTR [rbp-0x10],rdi\n0x000000000043930f <yr_execute_code+15>:        mov    QWORD PTR [rbp-0x18],rsi\n0x0000000000439313 <yr_execute_code+19>:        mov    DWORD PTR [rbp-0x1c],edx\n0x0000000000439316 <yr_execute_code+22>:        mov    QWORD PTR [rbp-0x28],rcx\n0x000000000043931a <yr_execute_code+26>:        mov    DWORD PTR [rbp-0x4b4],0x0\n0x0000000000439324 <yr_execute_code+36>:        mov    rcx,QWORD PTR [rbp-0x10]\n0x0000000000439328 <yr_execute_code+40>:        mov    rcx,QWORD PTR [rcx+0x8]\n0x000000000043932c <yr_execute_code+44>:        mov    QWORD PTR [rbp-0x4c0],rcx\n0x0000000000439333 <yr_execute_code+51>:        mov    DWORD PTR [rbp-0x800514],0x0\nThe WORKING FreeBSD machine:\n(gdb) disass\nDump of assembler code for function yr_execute_code:\n0x000000000043a320 <yr_execute_code+0>: push   rbp\n0x000000000043a321 <yr_execute_code+1>: mov    rbp,rsp\n0x000000000043a324 <yr_execute_code+4>: sub    rsp,0x800580\n0x000000000043a32b <yr_execute_code+11>:    mov    QWORD PTR [rbp-0x10],rdi\n0x000000000043a32f <yr_execute_code+15>:    mov    QWORD PTR [rbp-0x18],rsi\n0x000000000043a333 <yr_execute_code+19>:    mov    DWORD PTR [rbp-0x1c],edx\n0x000000000043a336 <yr_execute_code+22>:    mov    QWORD PTR [rbp-0x28],rcx\n0x000000000043a33a <yr_execute_code+26>:    mov    DWORD PTR [rbp-0x4b4],0x0\nCould this be some weird compiler issue causing it to incorrectly calculate the offset from rbp? I'm clearly in over my head, but I thought I would at least share what I've found. Here's the information for each machine:\nOS X:\nwxs@psh yara % gcc -v\nConfigured with: --prefix=/Applications/Xcode.app/Contents/Developer/usr --with-gxx-include-dir=/usr/include/c++/4.2.1\nApple LLVM version 6.0 (clang-600.0.56) (based on LLVM 3.5svn)\nTarget: x86_64-apple-darwin14.1.0\nThread model: posix\nwxs@psh yara %\nLinux:\n```\nwxs@foo:~/yara$ lsb_release -a\nNo LSB modules are available.\nDistributor ID: Ubuntu\nDescription:    Ubuntu 14.04.2 LTS\nRelease:    14.04\nCodename:   trusty\nwxs@foo:~/yara$ gcc --version\ngcc (Ubuntu 4.8.2-19ubuntu1) 4.8.2\nCopyright (C) 2013 Free Software Foundation, Inc.\nThis is free software; see the source for copying conditions.  There is NO\nwarranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\nwxs@foo:~/yara$\n```\nFreeBSD (NOT WORKING):\nwxs@syn yara % uname -r\n10.1-RELEASE-p5\nwxs@syn yara % cc -v\nFreeBSD clang version 3.4.1 (tags/RELEASE_34/dot1-final 208032) 20140512\nTarget: x86_64-unknown-freebsd10.1\nThread model: posix\nSelected GCC installation: \nwxs@syn yara %\nFreeBSD (WORKING):\nwxs@ack yara % uname -r \n11.0-CURRENT\nwxs@ack yara % cc -v\nFreeBSD clang version 3.5.1 (tags/RELEASE_351/final 225668) 20150115\nTarget: x86_64-unknown-freebsd11.0\nThread model: posix\nwxs@ack yara %\n. I was thinking something similar (move the stack off the stack). If you are going to send a PR you will want to use yr_alloc and yr_free though. I have no clue what Victor will say about this though.\n. I think it was merged in. You will need to provide more context (preferably in another issue) with what you're seeing. Please include a rule which triggers the problem for you.\nYou may also want to look at the -k argument to yara too, as I think that is directly related to the work @ckane did in this area.. Same here, oddly enough the problem is only a warning on OS X with clang but Ubuntu 14.04 with gcc 4.8.2 is an error.\n. This has been brought up before and there's answers and options presented in #202.\n. Can you share the file? I'll be happy to see if I can fix this.\n. There's at least two things going on, neither of which I can fix right now - though I may be able to in a week or so.\n1. The MIPS binary is big endian so the machine value (and others) is swapped. Should be as simple as forcing them to be little endian.\n2. The ARM binary is little endian but I believe the definition in elf.h is incorrect. It currently uses:\n```\ndefine ELF_EM_ARM      0x0032  // ARM\n```\nAccording to wikipedia (http://en.wikipedia.org/wiki/Executable_and_Linkable_Format) this is for IA-64, and the correct value should be 0x28.\nAlso, might as well expand the machine definitions to include AARCH64 (0xb7).\nHopefully someone else gets to this before I do, otherwise I will try to circle back around the end of this week. Sadly, I'm not as familiar with the ELF specification as other file formats, otherwise I would feel more comfortable about changing these quickly.\n. I've been using a similar-ish patch for the FreeBSD port.\nhttps://svnweb.freebsd.org/ports/head/security/yara/files/patch-libyara__proc.c?revision=379102&view=markup\n. I'm not sure I like this solution much, but it does allow me to build c++ code which includes yara.h by putting a #define NOMINMAX before the include and #undef NOMINMAX after. I wanted to change the macros to be yr_min and yr_max but I'm not sure how accepted that woudl be. If that is the preferred solution just let me know and I will make the change and sweep the tree to clean up any references.\n. This is easily reproducible. A rule as simple as pe.number_of_resources == 5 when run against 0861e9bc073d37f0eeb7a7323553f2ca does not match. I did some light testing with other code that relies upon fits_in_pe() and didn't spot any obvious problems.\n. No clue why I didn't see it earlier but I was looking to see if this existed before I wrote my own implementation, glad I found it. :smile: This is a great feature!\n. I also changed string printing so that non-printable characters are printed in hex form.\n. Would you be open to changing it from a compile-time knob to a run-time option? Having this ability is a great way to debug signatures. I can keep a binary with it turned on around but I suspect making it a run-time option is going to increase usage and by extension the new module features!\n. Yes. I will try and implement it in the next couple of weeks.\n. I believe there is an open PR for this already.\n. That would work, and would no longer require the resources to be in the same order. The downside is that it would have to calculate the hash multiple times until a match was found for that iteration of the loop. Ideally it should calculate the hash once and then iterate through all possible results until a match is found.\nThanks for taking this into consideration!\n. I think @sroberts is responsible for that. May want to bring it up with him.\n. I've tried to do similar in the past, and it requires significant changes. Conditions are compiled down to byte code and the actual \"string\" which is the condition is discarded. You would have to take each token in the condition and operate on that.\n. As I said above, we don't believe this is quite ready to be merged but are trying to circulate the idea and get feedback so we can improve upon it if the feature is deemed useful.\n. Iterators will certainly change everything so I agree on holding off until the iterator work is in. I'll be keeping an eye out for that and submit a new PR once @mgoffin and I have reworked it.\n. I can take a look at this early next week.\n. This was likely broken in https://github.com/plusvic/yara/commit/1cc98f75fa922614aa440ccf9c397d65db7c825c. The file in question imports more than 256 functions from RPCRT4.dll. I checked the PE specification and don't see anywhere that mentions this limit, so it seems both arbitrary and incorrect to have in YARA. I understand the need for it but it does break things in this case and anyone using the imports() function will potentially see incorrect results.\nAdding @shanehuntley since he is the one who made the commit in question.\n. That's reasonable but still arbitrary. When parsing imports there isn't that much data used per import, so what's wrong with having no limit?\nOne other option is to move the import parsing to be an \"on demand\" thing that is done only during a function that requires it (imphash and imports). The trade off would be a longer run time but a lower memory footprint as neither function would allocate anything while parsing the import table. Just an idea...\nUltimately I can see bumping the limit as you suggest but it still seems arbitrary to me. I'd love to find an example that causes \"blow up\".\n. The second file you reference (https://www.virustotal.com/en/file/8aad575ee69620c6f63aa64e394ad30c223c35a4e30d3632605b29eb6b168488/analysis/1439303313/) doesn't hit on imphash because the imports for GDI32.DLL fail to parse. This is because using OriginalFirstThunk for pe_rva_to_offset() (this line: https://github.com/plusvic/yara/blob/master/libyara/modules/pe.c#L827) is returning an offset that is incorrect. This is likely because the import table itself is corrupt and YARA is taking a fairly strict stance on parsing that other tools do not.\nI know using 010 editor and their PE template complains about the corruption. Another parser I sometimes use (https://github.com/trailofbits/pe-parse/) also fails to parse this file correctly. I suspect this is likely a case of a corrupt import table which I'm not sure there is much we can (or should) do.\n. I agree that there may be some wiggle room to be less strict here. Clearly other tools behave differently. Sadly I am tied up with other things for a bit and am unable to dig deeper into what is going on, but will try and keep an eye on this issue if it hasn't moved forward by the time I am able to look into this.\n. I just put up a PR to bump the limit to 16384, as discussed here.\nI also took a deeper look into the secondary issue (8aad575ee69620c6f63aa64e394ad30c223c35a4e30d3632605b29eb6b168488 and not recognizing imports from GDI32.DLL). As I mention above, the call at https://github.com/plusvic/yara/blob/master/libyara/modules/pe.c#L830 is returning 0x9090 which when parsed as an IMAGE_THUNK_DATA32 structure has values which are just plain wrong. The right thing to do for this file is to use import_descriptor->FirstThunk to get the imports. Does it make sense to re-work this function to try using OriginalFirstThunk first and if that fails attempt again with FirstThunk. As things stand right now, we only use FirstThunk if OriginalFirstThunk offset is less than 0, which is not true in this case. I suspect it may be better to attempt parsing and if it fails to attempt again using FirstThunk?\n. I also added an imports_ordinal() which will check ordinal imports. This commit message has more details:\nhttps://github.com/wxsBSD/yara/commit/e301fbcef4a50a962b247c6281e5bc67b76c8f46\n. This is an easy way to trigger this:\n```\nimport \"hash\"\nrule foo {\n  condition:\n    hash.sha256(\"FOO\") == \"BAR\"\n}\n```\nwxs@psh yara % ./yara test.sig /bin/ls\ntest.sig(1): error: unknown module \"hash\"\ntest.sig(5): error: invalid field name \"sha256\"\nwxs@psh yara %\nGiven that other modules don't have this problem I'm slightly concerned that I'm not fixing the root cause. :(\n. I'll shoot you a mail with exact hashes and signatures that reproduce this. My laptop is currently burning through another round of testing but I am fairly confident this fixes the problem.\n. I've got it fixed locally. Will push whenever I'm back on stable wifi, which may be as late as Monday. I'll try to keep this in mind while I work on my next PR. \ud83d\ude1b\n. This fixes one of the issues raised in #337.\n. Looks like yara does this already, but yara-python does not. I've got a branch which should fix it, though I have not tested on anything that scans in more than one block. Would you be willing to try out the add_base branch from https://github.com/wxsBSD/yara-python? If you would rather apply the patch locally for testing it is available here: https://github.com/plusvic/yara-python/compare/master...wxsBSD:add_base\n. In another conversation it was brought to my attention that https://github.com/VirusTotal/yara-python/pull/1 (which I think addresses this, it's been too long to remember exactly) never got merged.\n. I'm not super pleased with this because I hate to hardcode a path like that, even if it is specific to Darwin. I'm not aware of any way to get brew to install an openssl-config binary that we can use to get the proper location for headers and libraries. I'm open to suggestions but this does fix the build with the latest Xcode.\n. For those playing along at home an easy work around was committed to yara-python which exposes module callback data as a dictionary which you can then serialize to json if you want.\n. This is an early version of parsing useful information out of .NET binaries. It's a bit convoluted because of the structure of the tables and their interdependence on each other. I tried to provide pointers to the various documentation used, but if you have any questions please let me know.\nI've run it against a thousand or so .NET binaries I have laying around and it parsed almost all of them. Those that it could not parse correctly were corrupt in one way or another (but YARA did not crash on them). I've got a whole lot more .NET binaries laying around which I will try and make room to extract and test against.\nI will also be updating this PR with the documentation necessary for this, but I wanted to push this now so others could see it.\n. I did the split to a dotnet module. I'm still not 100% sure I got everything correct. I need to review it closer and then go through and split pe_parse_com() into smaller functions where it makes sense.\n. I refactored things so they should be more manageable now. The relevant details are in https://github.com/wxsBSD/yara/commit/c59323e3ee17bd04b933cb770e50dc549b89d260. I've put it through the same light testing as before (only a thousand or so files, including some known problematic ones) and it is looking good.\nOne thing to note is that now that everything is in the dotnet module I removed the dotnet from all the exposed variables. This is now the latest list:\n+  declare_string(\"version\");\n+  declare_string(\"module_name\");\n+  begin_struct_array(\"streams\");\n+    declare_string(\"name\");\n+    declare_integer(\"offset\");\n+    declare_integer(\"size\");\n+  end_struct_array(\"streams\");\n+  declare_integer(\"number_of_streams\");\n+  declare_string_array(\"guids\");\n+  declare_integer(\"number_of_guids\");\n+  begin_struct_array(\"resources\");\n+    declare_integer(\"offset\");\n+    declare_integer(\"length\");\n+    declare_string(\"name\");\n+  end_struct_array(\"resources\");\n+  declare_integer(\"number_of_resources\");\n+  begin_struct(\"assembly\");\n+    begin_struct(\"version\");\n+      declare_integer(\"major\");\n+      declare_integer(\"minor\");\n+      declare_integer(\"build_number\");\n+      declare_integer(\"revision_number\");\n+    end_struct(\"version\");\n+    declare_string(\"name\");\n+    declare_string(\"culture\");\n+  end_struct(\"assembly\");\n+  declare_string_array(\"modulerefs\");\n+  declare_integer(\"number_of_modulerefs\");\n. I'm getting word my usage of strnstr(3) is not portable to most Linux (specifically I've received a report about Ubuntu 14.04). It looks like it may be available via some package, but I will have to investigate more. I really don't want to require another package so it may make sense to just include a strnstr(3) implementation from FreeBSD (https://github.com/freebsd/freebsd/blob/master/lib/libc/string/strnstr.c) for portability. Sadly, I am without a laptop for the next week or so, so I'm not sure when I will be able to address this. I should be able to get back to this sometime after November 16th.\n. I've only been able to put commit d508967 (switching away from strnstr(3)) through very light testing due to not having access to my normal test cases for a while more. I believe this is ready for a merge now, pending any comments from you. :)\n. This had been sitting for a while and was no longer merging cleanly. I've updated it to use the latest stuff from master but I'd appreciate a second look to make sure I didn't screw anything up. In particular I moved pe_rva_to_offset() over to pe_utils.c since it is used by both pe and dotnet module. There have been a number of changes in there fixing corner cases, so I want to make sure I have all those reflected in my latest update. @hillu probably knows best if I got the right version in there. :)\n. No problem. As you might have guessed from my username, it is my preferred license. :)\n. Also, thanks for the merge!\n. I haven't had a chance to look at this, but thanks for submitting it. If I'm understanding your changes correctly this would allow yara-python to do the same thing? There would have to be some massaging of data to get it into an appropriate format for python, and then serialized out to JSON or something else. If so, this is probably something I can look into as I have some experience with python modules.\n. FYI, I'm working on making these available via Python.\n. FYI, my intention is to have a PR up in a week or so that exposes this via Python.\n. I'll take a look after the kids go to bed tonight. :)\n. This fixes it, and I agree that it improves the legibility of the condition. Thanks for the quick fix!\n. A good explanation of this is available here: https://github.com/openssl/openssl/blob/984d6c6052169bcae8010de33f7796e455536d61/crypto/asn1/a_int.c#L93\nAnd i2c_ASN1_INTEGER() is a wrapper around the function linked above.\n. This one is because we can't get the imports from this binary because it is packed. We attempt to get the offset for the first import which is at RVA 0x154, which has no valid offset in the packed binary. Not much we can do here, I think.\n. I've also got this one fixed (same root cause as #399).\n. Can we add constants here to make things nicer? I am guessing 21005 means something specific about a version of VS?\n. It seems reasonable to dump out what will and won't be built after configure finishes detecting things. In your particular case it isn't finding OpenSSL properly.\n. I suspect you wanted to say pe.entry_point == 0x154. The entry point as specified in the file is 0x154 but YARA is unable to find the file offset which contains that RVA.\nI also can not get this sample to execute.\n. I'm wondering if it makes sense to have a pe.raw_entry_point which is the entry point as specified in the file before going through pe_rva_to_offset().\n. This should be merged only if https://github.com/plusvic/yara-python/pull/4 is merged. I put this in a second PR because it shouldn't hold up the other one I just submitted for documenting CALLBACK_MSG_MODULE_IMPORTED.\n. What makes you think this should work? What do you believe the entry_point to be (as an offset into the file, please)? I can't even get the sample to execute.\n. Good point. It is a nice solution!\n. I looked at this a bit tonight and there is what amounts to an off-by-one error in pe_to_rva_offset(). In this particular case the proper entry point is at offset 2 but YARA calculates it to be 3 because section->PointerToRawData (https://github.com/plusvic/yara/blob/master/libyara/modules/pe.c#L396) is 1 which means the calculation done at https://github.com/plusvic/yara/blob/master/libyara/modules/pe.c#L416 is incorrectly adding one (rva - section_rva is 2). I'm going to read the PE specification a bit closer and look for any corner cases which indicate we should ignore (or properly align?) PointerToRawData, but that will have to wait until tomorrow.\n. I've got this one solved. I'll have a PR up shortly, but I want to see if I can quickly solve the other entrypoint bugs you raised.\n. What platform are you building on? Exactly how, and what, did you build? Are you building latest master, and with what configure and make args?\n. How did you build openssl? I built it fine after installing openssl-devel.\n. It is probably picking up whatever version of OpenSSL you installed manually, which may have a problem in it. Which version of OpenSSL did you build and install manually? I'll try and replicate as we will eventually have to fix this if it is indeed a problem.\nYou will want to remove anything you installed manually and then rebuild yara.\n. I'm able to reproduce this if I build with the latest OpenSSL master (not sure if the changes ever made it in a release). The hint came from the fact that the post you mention above includes openssl-29fa0a1 in it, which made me test with the latest master.\nLooks like some of the internal structures I was using are being made opaque (https://github.com/openssl/openssl/commit/a6eb1ce6a989d01bb00e9749789b690744be506c). I should be able to use the new X509_SIG_get0 and #ifdef around this.\n. I don't think you can always rely upon section ordering.\n. Yes, that is what I'm suggesting.\n. I think that is the right way too. I've got some prototype code which does it, but I need to clean it up a bit. Hopefully sometime in the next couple of weeks.\n. I can't find anything public but the 10.12 preview has YARA on it, or so I've been told. I've also heard you can add your own signatures to XProtect, but nothing public I can reference.\n. I thought so too, but I'm also in favor of this change. No need to mail me!\n. IANAL but it\u2019s just 3 clause BSD, which boils down to keep our copyright and license on the files on which they appear in both src and binary form (ie: give us credit for our work) and don\u2019t use our names as endorsements. BSD licenses are considered permissive in that you can incorporate them into a closed source project provided you meet those 3 (in this case) conditions.. Thank you! I started down this path a few months ago but ended up getting sidetracked onto some other things and never got back to this!\n. It was used to convert the internal representation of the serial number to the human readable string form.\nOn a related note, there are a couple of places in that file where i2c_ is mentioned in the comments, you will want to clean those up too.\n. It has been too long and I don't remember the terminology, so I can't say. We want the format that VirusTotal uses, which is also the format most other tolls use. I can double check this patch later today to verify it doesn't break some of my old signatures.\n. Thank you! I was going to look into this today (been backlogged at $job) but you seem to have covered my thoughts well. As long as serials are matching before and after this change I'm happy with it.\n. I haven't tested on an OpenSSL 1.1 system (the VM has gone missing), but I did test on my OS X install running OpenSSL 0.9.8 (plus whatever patches Apple has applied) and tested it against a signed sample I had laying around. No regressions AFAICT. Thanks for looking into this, it would be great to get it into 3.5.0 as we will be seeing these OpenSSL changes become more widespread.\n. The modules are part of YARA, and yara-python is just a python interface to libyara. Just write your rules using the PE module normally and use them in yara-python.\n. Can you share an example file that works and one that doesn't?\n. The warnings are because you are producing strings which cause YARA to slow down. The exact cause is hard to know without an exact reproducible case. The same goes for the error. Can you please share the exact set of inputs here?\n. Yes, that would be fine.\n. I have binaries which have more than one WIN_CERTIFICATE entry in them. These are what YARA calls \"signatures\" despite the fact that they are certificates. I'll have to investigate multiple signatures in a given certificate (which is what it sounds like you're suggesting is a thing), when I get some time on a flight in a few days. For now, I'll drop you at least one binary with multiple WIN_CERTIFICATE entries in it in an email in a little bit. \n. My apologies for the delay. I completely misunderstood what this issue was about, and it wasn't until now that someone on my team found a sample ITW that was triggering this bug. I've put up a PR which fixes this.. Fix is up. I'd be curious if you are able to trigger this any other way, especially via modules parsing files. :)\n. Why is this needed? I don't think I'm using mermen there?\n. Oh, right. I forgot about that. \ud83d\ude09\n. Because YARA already uses the wide modifier in string definitions. I would prefer consistency here.\n. Yeah, I was aiming for consistency here too. I'll be happy to implement whatever you think is the right one.\n. Thanks for writing this! Gloriana asked for something similar yesterday, but I wasn't sure you were going to get to it so fast!\n. Any plans on merging this? It adds some interesting features for dotnet analysis and will serve as the basis for some other stuff I have in mind. In particular we discussed adding support for wide modifier in conditions and I'd also like to explore string deobfuscation techniques in a module. For example, I think it would be great to be able to say:\nfor any i in (0..dotnet.number_of_user_strings):\n  (string.incrementing_xor(dotnet.user_strings[i], 0x41) == \"SECRET STRING\" wide)\nHaving the user strings parsed out is the first step in this.. Awesome! I'll start doing some work on the stuff which is building upon this.. I'll look into the test failures tonight.\n. Ugh, that was a silly bug for me to introduce. I've got a better fix in place that doesn't break the tests (thank you for having them) and also adds a test to ensure we don't regress in the future.\n. Are you sure about that? I just tested with latest master and can not replicate the problem importing an empty string.. Can you do this in python? Compile the rules once then walk the filesystem applying logic you want to each file? You could even distribute this to multiple processes each with their own compiled rule set.. What about this:\nwxs@wxs-mbp yara % cat foo\nFOObarFOO\nwxs@wxs-mbp yara % cat test2.sig\nrule test {\n  strings:\n    $a = \"FOO\"\n  condition:\n    #a == 2 and\n    for all i in (1..#a):\n      (@a[i] >= 0 and @a[i] <= 100)\n}\nwxs@wxs-mbp yara % ./yara test2.sig foo\ntest foo\nwxs@wxs-mbp yara %. I think this does what you want, though I haven't tested it.\n(\n  #a == 2 and\n  for all i in (1..#a):\n    (@a[i] >= 0 and @a[i] <= 100)\n)\nor\n(\n  #a == 3 and\n  for all i in (1..#a):\n    (@a[i] >= 50 and @a[i] <= 100)\n). I think I see now. You don't care how many times the string matches in total. As long as some number of them are in a given range.. I had typed that out in one of my replies but decided against submitting it because I thought you wanted EXACTLY 3 matches in a given range, instead of AT LEAST 3 matches in that range but the rest of the matches could be anywhere. In any case, glad you got it solved and sorry I didn't post that solution. :). Given that the python module uses it, I think it is safe to use in your program. Victor has always been good about giving advance notice when structures are changing.. I would say it isn't internal, given that yara.c uses it.. An example DLL which has 5 exports all of which have an empty string name but different ordinals is e9a1487826889db9be298ca57e8c2c7b. It's worth noting that it looks like this same kind of bug was fixed in IDA in August.. You will need to provide more details here. Can you provide a single rule and input file which exhibits this behavior? What are you expecting to see that isn't there?. I also did a quick sweep over the rest of the dotnet module and this is the only place I missed this check.. I've slowly been working on some of these (and others) but it got put on hold for something else recently. I still intend to finish it though.. This is intentional. What is happening in Test2 is that 0x7de is recognized as a primary expression which results in $ep_data only being searched for at that specific offset. This is an optimization. As soon as you include another rule in that file which has a string of { E9 } without this optimization then you will see it print matches everywhere again in Test2.\nIn the Test1 case pe.entry_point is an identifier (not a primary expression) and while it is recognized as identifying an integer the same optimization is not applied because the value identified by pe.entry_point is not known at rule compilation time.\nIt is possible to get Test2 behavior in Test1 by using the deprecated entrypoint keyword instead of pe.entry_point but I would not recommend that.\nIt may be possible to get this optimization behavior in Test1, but I'm not sure the level of effort required here and if it is even worth the additional complexity.. It could be easy enough to make YARA print the result of any function call, but filesize might be a bit harder as that is a keyword in the language.. Can you give an example set of rules, a file to test against and exactly how you are running YARA?. There is the -l argument to yara for this.. I'm not sure what you're saying. Can you please provide an exact copy and paste of what is happening, and then point out what you expect to happen?. Is using the python module possible?. Along with the coverity findings mentioned above, this PR unintentionally reverts some changes to hex_grammar.y. I may be misreading this but I think it's worth a closer look to make sure those changes are intentional.. I think I just missed it. The documentation says the version is a UTF-8 encoded null-terminated string of a specified length, so I think this change is the right thing.. I don't think YARA has much say in stopping the process or not, unless we change the way ptrace is used. I think this patch makes sense and the report is thorough and detailed.. Can you give an example of the same rule matching multiple times. I haven't read the code in a while but I think this shouldn't happen.. This is not the rule matching twice, but the strings. My opinion is this is not a good idea, because I want to know all the offsets when I ask to see the strings.. I looked into doing this a while ago and a lot of it is easily reversed. The biggest problems I ran into are regex and conditions. The regular expressions compile down to special code for the regex implementation in YARA to run, and conditions are special code running on the YARA virtual machine. The rest of it was easy enough to get back into source form.\nMay I ask why you want this?. Can you share samples which trigger these bugs? I'm happy to address them if I can reproduce them.. Should probably clarify that I can fix the second one without a sample, but having one which triggers it would help.. I think first one you bring up (stream headers without null termination are silently accepted) is within what I would consider a correct implementation. The spec says they must be null-terminated and are limited to 32 characters. With no null terminator I have no other option but to take all 32 bytes.\nAs for issue 2, I'm putting up a pull request right now for those. Thanks again for bringing these to my attention. Very much appreciate them.. I believe this can be closed. Thank you for bringing it up!. I've been thinking about your comment regarding stream names, and your argument makes sense. My concern is if we would be failing to parse an otherwise legitimate file if the stream name is not null terminated when the MSFT handler for it would accept it. If MSFT denies this case then I'm fine with implementing your suggestion, otherwise I think we should accept it since it can be parsed properly by MSFT.\nWould you happen to be able to create an otherwise legitimate binary with this property and send it to me?. OK, I'll see if I can get a diff up for this tonight. Thanks for sending it along!. Sigh, good catch. Hopefully @plusvic merges before he tags 3.6.0!. Sigh... Thank you @flandr!. @flandr - Let me know if this is roughly what you had in mind. I decided to do the check once, early in the process, instead of sprinkling it around at all the places inside the function which handles that stream, which seems more sane to me. We should bail early if we can.... You don't have the various autotools installed. You will need at least autoconf, automake and libtool.. You aren't installing YARA via homebrew, you are building it from source yourself. If you were installing via homebrew and this was happening then the issue is with the homebrew environment. Note, however, that this is not the case here. The documentation you are looking for is here: http://yara.readthedocs.io/en/v3.5.0/gettingstarted.html.. I'm not intimately familiar with homebrew details but it only lists libtool, autoconf and automake as build dependencies which would make sense as they don't have to be there after the installation of YARA is complete.. I just debugged an issue for a friend who had a bunch of rules break due to the limit of 2000. He has some rules which have very long hex strings in them, and bumping the value up works fine for him but I'm curious if you would consider bumping it up to 3000 (that more than covers the one rule I saw from him). I realize arbitrary limits are, by definition, arbitrary but I'm hoping we can bump this as to not break rules that exist.. Just to make sure I could reproduce the problem I checked out cdbacf5 and built with --enable-address-sanitizer --disable-optimization --enable-debug but I'm unable to reproduce it.\nwxs@wxs-mbp yara % ./yara ~/Desktop/yara_so_yr_re_emit.txt /bin/ls\n/Users/wxs/Desktop/yara_so_yr_re_emit.txt(8): error: syntax error, unexpected _IDENTIFIER_, expecting _CONDITION_\nwxs@wxs-mbp yara %\nMy plan was once I knew how to trigger it I would keep find the largest value for RE_MAX_AST_LIMIT which wouldn't crash. Am I just not triggering this correctly?. I forgot about ulimit -s. I think it's probably best to leave it at 3000 for now and see if anyone complains, and if so we can make it runtime dependent or bump it again.. There is no installer for YARA. What you did is actually run the YARA program and are seeing the help message. I think you want to read http://yara.readthedocs.io/en/v3.6.0/gettingstarted.html#running-yara-for-the-first-time for details on how to use YARA.. This is intentional. Tags must be valid identifiers and identifiers can not start with numbers. They follow the same rules for identifiers in C.. I checked into this and it's parsing it right. All the things that virustotal reports as functions from KERNEL32.DLL are actually parsed, as are all the invalid things. :)\nHere's proof:\n```\nwxs@wxs-mbp yara % cat foo.yara\nimport \"pe\"\nrule a {\n  condition:\n    pe.imports(\"KERNEL32.DLL\", \"GetACP\") and\n    pe.imports(\"KERNEL32.DLL\", \"lstrcpynW\") and\n    pe.imports(\"KERNEL32.DLL\", \"GetSystemInfo\") and\n    pe.imports(\"KERNEL32.DLL\", \"GlobalSize\") and\n    pe.imports(\"KERNEL32.DLL\", \"CreateProcessW\") and\n    pe.imports(\"KERNEL32.DLL\", \"FindClose\") and\n    pe.imports(\"KERNEL32.DLL\", \"GetProcAddress\") and\n    pe.imports(\"KERNEL32.DLL\", \"VirtualAlloc\") and\n    pe.imports(\"KERNEL32.DLL\", \"LoadLibraryA\")\n}\nwxs@wxs-mbp yara % ./yara foo.yara ~/Desktop/invalid_imports\na /Users/wxs/Desktop/invalid_imports\nwxs@wxs-mbp yara %\n```\nWhat's misleading here is that number_of_imports is actually the number of DLLs imported, not the total number of functions. One could make an argument for adding a number_of_imported_functions though we may want to consider being slightly more strict in what we consider valid, because the number we would report would be higher than VT.. It's untested but you could try pe.imports(\"\\x41\\x41\\x41\") or whatever the bytes are which make up the DLL you're intersted in. I suspect it's not going to give you much value though.. I know what's going on here. There is an invalid export data somewhere and we are returning early because of it instead of skipping it. I'll debug later today and have a patch up shortly.. Fix is up. I decided it was better to try to continue processing the exports instead of returning early on the first one or break out of the loop.. This seems like an easy fix, but I can\u2019t confirm it without a minimal POC. Can you please share one?. Thanks! Something hung like that is exactly what I had in mind. A quick POC so we can confirm the fix would be ideal!. I thought about this when I was doing the signatures stuff years ago. I decided against implementing this because it would make rules that use it temporally dependent. I didn\u2019t like the idea of a rule firing one second and not the next, for the same file.\nI certainly see value in the idea though. I just couldn\u2019t convince myself it was worth the trade off.. So I\u2019m thinking of three different ways to implement this.\n\n\nMake a reserved word in the language that is converted to the current time in seconds at compile time. This means if the rules are saved and reloaded at a later time the value in the rule won\u2019t change.\n\n\nHave time be a keyword that is converted to the current time at runtime. I\u2019m thinking this would be a new operation in exec.c.\n\n\nHave time be a module with a now() function so it is resolved at runtime. Using a module for this could give us more flexibility in the language, by being able to do things like time.future(3600) which would be logically equivalent to time.now() + 3600.\n\n\nI\u2019m inclined to go with either option 2 for simplicity or option 3 for flexibility.\nWhat\u2019s your opinion?. I have time.now() implemented in a module. It returns the number of seconds since the epoch, using time(3). I don't have a Windows machine to port it over to there, but maybe after I publish the PR I can get around to it.\nOther than time.now() can you think of any other functions involving time that would be useful to have @securitykitten? I'm happy to add them!. The failure presents as:\nchecking for openssl/safestack.h... yes\nchecking for MD5_Init in -lcrypto... no\nchecking for MD5_Update in -lcrypto... no\nchecking for MD5_Final in -lcrypto... no\nchecking for SHA256_Init in -lcrypto... no\nchecking for SHA256_Update in -lcrypto... no\nchecking for SHA256_Final in -lcrypto... no\nApplying this patch and doing the usual autoreconf --force --install will fix it.. Oops, I accidentally based this branch off of the OS X 10.13 fix branch I had. I can split the time stuff into a separate branch if needed.. I'm assuming this, if accepted, will go in 3.7.1 whenever that happens. Please let me know if I should update the docs!. I haven\u2019t tested this, but if your description is indeed accurate then this looks good to me. Thanks for the contribution!. I think this might be the culprit: fcb68b519cd90ca29c9ee0977f7a4e36592af4ce.\nSpecifically this check:\n78     if (data_size < headers_size + sizeof(IMAGE_OPTIONAL_HEADER32))\n79       return NULL;. In order to fix this, we would have to add other checks and remove the one mentioned earlier. I\u2019m not opposed to leaving this regression in the name of a stricter parser.. Do you have a sample which triggers this? There's a comment right near this code which I wrote which says the length is actually for the entire structure, including the certificate itself, which is contradictory to the documentation but matches every sample I've seen. I ran approximately 700 signed binaries through this code and could not hit the condition which would trigger your patch, so it's hard to say if your patch is right or not.. I'm reading the same documentation and I think the documentation is wrong. The length is actually the length of the entry in the directory, not the data directory length as a whole.\nd65071a494726473c6f530e06fe9e211 is an interesting sample to examine because it has multiple entries in the directory. In that sample the certificate directory starts at offset 0x150ae0, and the first entry has a length of 0x2200. If we treat that length as the length of the entire WIN_CERTIFICATE structure (ie: the entire entry, including padding) it should end at offset 0x152ce0 (0x150ae0 + 0x2200). If we look at offset 0x152ce0 we see the start of another WIN_CERTIFICATE structure.\nI'm not opposed to hardening this if it is indeed incorrect memory access, I just want to be sure we aren't going to lower fidelity of the parser to fix a bug which may not actually exist.. Yeah, I'm in agreement that this is a good fix. It's not likely to trigger any bugs but we should be as strict as possible with what we pass into OpenSSL. Thanks for the fix!. The warnings are because the rules you're using are going to slow down scanning. There isn't anything wrong with YARA in this case. It looks like you're using the https://github.com/yara-rules/rules repo. I suggest getting them to update their signatures if possible.. Yes, these are warnings because some of the rules are going to cause the YARA scanning process to perform poorly. The problem is not with YARA but with the rules. It looks like you're using rules from the https://github.com/yara-rules/rules repo, and this should be an issue there. I don't really know what they are going to do, I just know you're not likely to find good support for them here as it isn't really a bug to be addressed.\nAlso, if you're just experimenting with YARA these are likely harmless warnings. You're not going to be running those rules on a large volume of files so the sub-optimal performance those rules cause is not a big deal.\nEdited to say: I noticed you're new to github. Welcome! :). Why would you expect it to not match? \\v is not a recognized character class in YARA.. Thanks! I\u2019ll write up some docs soon and send those in!. I asked this question to someone who reverses a lot of malware, because I wasn\u2019t sure what the right choice was. The behavior I coded up is based upon his response. His response is, and I\u2019m paraphrasing, that the malware he sees most often for which this would be beneficial are just passing a wide character string through a function which does the single byte xor and is not cognizant of wide character strings at all.\nI\u2019m trying to get a hash which shows this, but that might take a bit. In the meantime I\u2019ll update the docs to reflect this interaction more clearly.. Would it be better to generate atoms for both ways of doing it? That would cover both possibilities at the expense of more atoms to search for, though I don\u2019t think it would be that bad?. So go ahead and generate all atoms for both ways of doing it? Or is the current method good enough and just document it only?. Ok, I\u2019ll update this PR to clarify things as soon as i can.. I\u2019ll take a look at this today.. Thanks for bringing this up! This looks like a parser differential. I can't get a copy of dumpbin right now to compare exact output, but between your output and the fact that IDA also recognizes 5 exports by ordinal I think we need to fix this. I'll investigate more deeply, but this is certainly a interesting issue in the parser.. I don't have an answer just yet, since the specification is confusing on this. I'll keep digging, but for now here are my notes...\nHere's what the exports directory entry looks like for 6494f7a6fa5b9d73a7521b823e00c592e83bd4b926e04d4875845e056b17f59c:\n(lldb) p/x *exports\n(_IMAGE_EXPORT_DIRECTORY) $0 = {\n  Characteristics = 0x00000000\n  TimeDateStamp = 0x476699ce\n  MajorVersion = 0x0000\n  MinorVersion = 0x0000\n  Name = 0x0000b39c\n  Base = 0x00000001\n  NumberOfFunctions = 0x00000005\n  NumberOfNames = 0x00000000\n  AddressOfFunctions = 0x0000b388\n  AddressOfNames = 0x0000b39c\n  AddressOfNameOrdinals = 0x0000b39c\n}\n(lldb)\nThe Name, AddressOfNames and AddressOfNameOrdinals RVAs all point to khlp760w.dll. When we walk the number of functions and attempt to get a name or ordinal for each one we end up with completely bogus offsets into the file, because we are using the contents of the Name field as an RVA, which it clearly is not. Because of this we end up skipping all the export information and end up with UNDEFINED (as you mention in #840). \nIn the past I've seen 0bad5ff96477fa009db357c42977ebf91c967d9b1df5d2b2c8f8f942a364960d which has an interesting export directory entry. I'm doing my best to make sure we don't regress when parsing that one, since it is another one I've looked at in the past when dealing with the export parsing code.\nI'm still trying to work out the best way to go about this so our parser more closely matches IDA, GNU objdump and MSFT bindump, but I'm still a bit away from having something that works.. I\u2019ll take a look at this today.. YARA never claims to validate signatures, nor do I think it should. The point is not to say if the signature is valid or not, but to give you the ability to inspect the signature metadata.. Apologies for the whitespace changes in the documentation. My editor silently made those. :(. Is this going to be merged before the pending release?. Ah, thank you for the fix!. I think a imports_regex(dll_regex, function_regex) would be nice to have. As you have it right now you're only checking if it imports a particular DLL and there's no way to check for functions inside it too. Finding a way to express imports_regex(NULL, function_regex) as a way to say \"I don't care about the DLL, just regex the function names please\" would be awesome too!. This is probably related to the work I did in https://github.com/VirusTotal/yara-python/commit/6b7269cf86286b1e27dbc6d4aa8350d80821725c. You can do it with YARA if you need to. https://gist.github.com/wxsBSD/1e518cef545fee7bb991a9dc6c14a0f7. I could be wrong here, as I haven't tested this but I think loops and string sets don't work like you think they do in the first example. In that example you are saying for each string where the identifier starts with $header (so basically just $header) see if $class_file is in a range that starts at the first instance of $header + 30 and goes until the first instance of $header + 30 + uint16(.... Essentially, the @ will only look at the first instance of $header. It would look at the first instance of $header1 if it existed.\nThe proper way to do this is the second example you have. You are confusing a loop over a string set (first example) with a loop over a range (second example).. I plan to implement a limit (16 seems reasonable) and may have uncovered a bug in it. I'll hunt it down and update this PR soon.. I've uncovered a weird case here which I haven't had the time to fully understand, and may not be able to get to it this week. If anyone wants to take a look here's what I know. b605b216588fe454b76c51dbb407cc9e71f7b1932367d5557fcc296bd9f28d34 is a PE with 3 signatures (according to Windows). The three serial numbers are \u200e30 63 b3 a7 40 c1 cd fd f8 bb 9e 6c 33 1a d7 de, \u200e06 and \u200e38 bf a6 1b 82 b8 0f 60 57 15 e4 8a a1 0d e1 53. This pull request is able to find the first two signatures but not the third one.\nI'm hoping to get to this by the end of this week but if someone knows what is going on with this file I'd appreciate a pointer. :). I\u2019ve got some more work to do on this. Can you give me a couple of days, please? I\u2019ll dedicate some time to it and hopefully have a better PR by Friday morning!. Sorry for the force push, but after spending too long fighting with openssl I'm not in the best of moods. ;)\nThis branch is ready to merge. It now parses the files with nested signatures better (tested on d29e93c0fe4f108fa063e1a9692559a4278a0d51ab4feabbb231907dffaeb019) and will stop parsing at 16 nested signatures. I also moved away from using the BIO interface in OpenSSL in favor of d2i_PKCS7 as it's less cumbersome to work with.\nI spent entirely too long trying to get b605b216588fe454b76c51dbb407cc9e71f7b1932367d5557fcc296bd9f28d34 to parse correctly, and I'm giving up on it. As far as I can tell this is not a very common format and was only used by MSFT for a while, but I've been told they are moving away from it in favor of the multiple WIN_CERT format (see https://twitter.com/vathpela/status/1045389079473459200 for details). I'll give a rundown of the file in case anyone wants to pick up where I left off, but I'm not planning on fixing this problem because it's a pain and not likely to be problematic IMO.\nThe start of the WIN_CERT structure is at 0xe3000. The certificate contained in there has serial 30:63:b3:a7:40:c1:cd:fd:f8:bb:9e:6c:33:1a:d7:de and has a nested signature (OID 1.3.6.1.4.1.311.2.4.1). This diff allows parsing of the nested signature, which is actually an ASN1 sequence (basically a list?) of signatures. The sequence starts at 0xe48cc, with the first signature at 0xe48e0. This second signature has a serial of 06 and is parsed correctly with this patch. The problem I'm having is finding a way to parse the rest of the sequence. I can only ever get OpenSSL to recognize the first item in the sequence. The third signature (second in the sequence, the missing one I can't parse) starts at 0xe6000. According to Windows this should have a serial of \u200e38:bf:a6:1b:82:b8:0f:60:57:15:e4:8a:a1:0d:e1:53. If anyone can figure out how to get that to parse I'd love to see how, but as I said above I'm frustrated enough with this and am not going to deal with it. :). Thank you to @recvfrom for showing me how to walk the X509 attributes! I'm able to now parse the 3rd signature from the file in question. This PR is now complete and brings YARA more in line with how MSFT is parsing authenticode signatures.. I've taken another shot at updating this documentation. I try to point out that you should be careful to pass relative addresses here, and that pe.entry_point when scanning a process is not a relative address. I came up with a somewhat contrived example to show how it works too.. I'm not sure I understand your question. The second snippet you mention is during the verification of a string literal match, and we have to do the xor because we do not know what the xor value was for that particular atom which caused the potential match in the first place.. I can not replicate this. Can you please provide more details? What version of YARA are you using?. I've checked this with v3.8.1 on OS X and can not replicate it. I don't have a Windows environment handy to build on, so I can't replicate it there. Would you be able to build this on something other than Windows and test it? I don't see how that can make a difference but it wouldn't hurt to rule it out.... Also, the sha256 of dotnet.av is d4191c3b8e8ebe1ea82590d5db913fe694a4c5b4090e8bff5e6bf9a0e27f3e3c right? Just want to make sure it didn't get mangled on the way down to me.. Yes, I used the rules from the first post. I\u2019m unable to replicate this still. I wonder if anyone else can try this out?. Use yarac for this?. I don't know enough about the dex format to know if this change is even close to correct. I'm hoping the original author (@adesnosgoogle) can provide some guidance.. I just ran this PR on a handful of files which are not obfuscated and the results of the parser from before this PR (using yara -D) exactly match the results generated with this PR. I'm more confident my change is fine, despite the weirdness mentioned above.. I\u2019m assuming you\u2019re talking about hash.sha256(0, file size) == \u201cAABB...\u201d which can\u2019t support what you want. We have to pick one or the other and document it. To change this would alter every other string comparison done by that operator (==), including cases where you want case sensitivity.\nWe should support case insensitive matching for things like pe.imphash() which take a string (specifically a hash) as an argument. I believe this is the case already.\nIt is arguable if we should do this for the various imports() and exports() functions though. I believe I opened an issue on this particular piece recently.. Sigh. Not sure I'll be able to properly fix this anytime soon. I'll see if I can take another shot at it but I've got some other things I want to tackle first. If someone with more knowledge can do it before me I'd love the help! :). The fix in place for this causes a regression. Specifically c8a3172a42cd9270db562b8fd0fddc15d35511483818bfc01c508fdb39f01635 will cause a memory leak when parsed by the dex module. I fixed this in #998.. Thanks!. I'm not happy with the fact I have no tests for this, but I couldn't come up with an easy way to test it. I'm thinking of adding in a \"debug\" option to the VM that will dump the state of memory after it's run so we can use that to write assertions. Thoughts on that?. I knew those instructions were unnecessary but hadn\u2019t decided to fix them yet. I\u2019ll do that shortly. What do you think about replacing them with a new SET_M which does the equivalent in a single instruction?. They look good to me. Thanks!. Actually, the comments are slightly wrong. I\u2019ll have a fix up in a few hours (stuck on mobile right now).. This looks good to me. Thanks for putting these in! :). I haven't looked at this in detail yet, but I like what I've seen as I skimmed through it.. I'm hoping to get to it in the next day or two.. // for all i in (N..M) : (<expr>)\n        //\n        // 1       PUSH UNDEF  ; \"all\"\n        // 2       PUSH UNDEF  ; \"end of list\"\n        // 3       PUSH N      ; integer range lower bound\n        // 4       PUSH M      ; integer range upper bound\n        // 5       POP_M 3     ; store range upper bound\n        // 6       POP_M 0     ; store range lower bound\n        // 7       CLEAR_M 1   ; clear <expr> result accumulator\n        // 8       CLEAR_M 2   ; clear loop iteration counter\n        // 9    .->INCR_M 2    ; increment loop iteration counter\n        //      |  <expr>      ; here goes the code for <expr>, its result will\n        //      |                be at the top of the stack\n        // 10   |  SET_M 4     ; store boolean expression result in memory 4\n        // 11   |  ADD_M 1     ; add boolean_expression result to accumulator\n        // 12   |  INCR_M 2    ; increment loop iteration counter\n        // 13   |  INCR_M 0    ; increment range lower bound (more like current bound)\n        // 14   |  PUSH_M 4    ; boolean expression result\n        // 15 .-+--JFALSE_P    ; jump out of loop if last result is false\n        // 16 | |  PUSH_M 0    ; lower (current) bound\n        // 17 | |  PUSH_M 3    ; upper bound\n        // 18 | `--JLE_P       ; jump to start of loop if we haven't iterated enough\n        // 19 `--->POP         ; pop end of list\n        // 20      SWAPUNDEF 2 ; swap the UNDEF (\"all\") with loop iteration\n        //                       counter (memory 2)\n        // 21      PUSH_M 1    ; push the boolean_expression accumulator\n        // 22      INT_LE      ; compare boolean_expression accumulator to loop\n        //                       iteration counter\nI believe the instruction on line 12 is never actually emitted and you just left it in the comment by mistake. Other than that, this looks right to me.\nAlso, as I haven't come up with a good way to make sure the optimizations are working as expected I've resorted to modifying jmp_if() in exec.c to print out a message if the condition is true or not. It's a cheap way to tell if any jump is taken. ;). I was going to go down this route but the problem is that the ASN1_TIME structure can store more dates than a time_t. See this (specifically the last paragraph) for more information:\nhttp://comments.gmane.org/gmane.comp.encryption.openssl.devel/10524\nI'd have to keep the ASN1_TIME structure as is and then have the date() you are describing convert to time_t, and then call X509_cmp_time() with them both as arguments. By keeping the ASN1_TIME structure around we can also do things like \"pe.signatures[i].has_expired()\" which will call X509_cmp_time(notAfter, NULL) internally.\nLet me see what I can come up with allowing us to do these kinds of things.\n. Fixed! It was a bad merge on my part. Thanks for catching it! :)\n. Probably want to remove this. :)\n. This one is slightly confusing but it's just a special case of _ANY_ below. In the _ANY_ case we have to PUSH 1, but in this case we already have something on the stack from the primary_expression. We want to keep that on the stack, but when we do the ADD_M it is popped off the stack so we have to PUSH_M it back on. We want it on the stack for the final evaluation after the loop is done and we need it in memory so we can easily access it to determine if we want to exit early. I hope that makes sense...\nI thought about adding a SET_M that would reduce all this down to a single instruction and leave the value on the stack but didn't want to add an opcode for this.\nI just tested it with the for_expression _OF_ string_set and it works as before (that is, it doesn't short-circuit the loop evaluation). This is because they work like integer enumerations and I haven't figured out a good way to do those just yet.\nI took the time to put together my notes on this, hopefully it is helpful. https://gist.github.com/wxsBSD/cfea812b96330b685332b61142f51a51. ",
    "edeca": "Sure thing.  This will take a little more testing but I'll update the patch when I get a chance.\nIf we can restrict platforms to Linux and Mac OS X then obtaining PIDs from /proc should be possible.\n. Would you be happy to use procps on Linux to implement this?  It seems like the most sensible way if I can get it to work correctly.\nFor Mac OS X it seems that kvm_getprocs might be the right way forward.\n. I'm closing this because I never received a reply to the query above and the effort required to reconcile code changes is now excessive.. Presumably related to https://github.com/aol/moloch/issues/390\n. I have started refactoring code in this branch but have not addressed multiple signatures yet.\n. Unsure if you also fixed but importing an empty string has the same effect, likely for the same reason.. One thought - if you are calling _parse_pkcs7() recursively you might like to check the value of counter for something sane (e.g. 16) to prevent malicious binaries triggering resource exhaustion.. ",
    "sroberts": "@Neo23x0 Certainly, but the point was less \"can I stand it\" than \"is it working as designed\"?\n@plusvic Could have written he PR, just wanted to make it wasn't by design. :+1:\n. :metal:\n. ",
    "ostraconify": "So what fixes can be applied to rules to deal with this 'expected behaviour'?\n. If you could suggest somewhere to apply a fix, or where to backport the updates from the most recent version, I'd appreciate it. We are tied to 1.x for certain appliances, and have found Yara 2/3 have issues with certain rules that cause yara to hang infinitely on some files, which are as yet unable to diagnose. \n. Thank you. We would like to migrate, but need to figure out how to ensure we have the same coverage, and need to find time to figure out how to convert these expensive rules! Appreciate all the work that's going into new features, etc. in 2.x and 3.x, just need to figure out how we can convert our rulebase!\n. ",
    "muddafugga": "I finally solved this.  I swear I had Command Line Tools installed, but apparently not.  If anyone has the same problem, open a terminal and run this.\nxcode-select --install\n. ",
    "hxnoyd": "solved in v3.0\n. Tested in two w8.1 with the same rule with -n and the problem happens with different files. I've mailed the mini dump.\n. fixed in the latest commit.\n. Thanks for the correction Wesley. Looking forward to try pehash Yara rules.\n. Thanks for the feedback!\n. A similar problem happens in the yara-python modules for windows. For example:\n\nimport \"hash\" \nrule myhash { condition: hash.md5(0, filesize) == \"feba6c919e3797e7778e8f2e85fa033d\" }\n\nreturns:\ninvalid field name \"md5\"\n. ",
    "jody-frankowski": "Thank you for your great support.\nSo there is no way to keep only one YR_RULES? You have to keep a list of them if you add more strings and files rules after?\n. Indeed. Much like rule_tags_foreach.\n. ",
    "cicku": "OK...\nThen I'd recommend that abandon the pypi and let users install yara to obtain python binding, is it feasible?\n. ",
    "rhaist": "+1 from me - would be really helpful to create a secure deployment of the rule set.\n. to be really hip you should also embed one of these in the README with the pull:\nhttps://docs.travis-ci.com/user/status-images/\n. ",
    "hillu": "I have just pushed the C foundation for this feature to https://github.com/hillu/yara/tree/stream and verified that a feature like reading compiled rules from an in-memory buffer or through a HTTP client could be implemented on top of this within go-yara (https://github.com/hillu/go-yara)\nVictor, please tell me if this is what you had in mind and I'll take a stab at enhancing the Python bindings\n. - Victor M. Alvarez:\n\nGreat! It looks like a good approach, we can have a single\nimplementation of yr_arena_load reading from the YR_STREAM\nabstraction, and then two implementations of YR_STREAM, one reading\nfrom an actual file and the other reading from a buffer. \n\nThat was pretty much my idea, yes.\nI have just replaced yr_rules_load (because that's what is exposed to\nthe user) with an implementation that uses a YR_STREAM where the read\nmethod is fread(). See\nhttps://github.com/hillu/yara/commit/9b2debfbf0708a1dc6d0c84f2986a77bd171ce96\nNB: One thing that does not work when working with only an fread()\ninterface is getting the file size to do sanity checks as is currently\ndone in yr_arena_load():\nfseek(fh, 0, SEEK_END);\nfile_size = ftell(fh);\nfseek(fh, 0, SEEK_SET);\nI don't think that this is a bad problem, though: If header.size bytes\ncan't be read into the page, this is detected as an error.\n\nWould you like to keep working on it? I'll happily merge it when\nyou're done.\n\nSure. I'll try to get the C/Python API to play nice, add some tests, and\nlet you know.\nCheers,\n-Hilko\n. I integrated YR_STREAM into the yara.load method -- which now accepts either a filename or a \"file-like object\". Simple test using StringIO included. See https://github.com/hillu/yara/tree/stream\nCheers,\n-Hilko\n. Thank you for your quick reaction. The write support that you added afterwards in ef7da2c is exactly what I had in mind. :-)\nCheers,\n-Hilko\n. I'd like to second this: Without the user_data field, I don't see any (thread-safe) way to get detailed  error information in my go-yara bindings.\n. The specific commit fixing this is https://github.com/hillu/yara/commit/ecb4c3e9d6eb5a250da8ad1ba67f2d13a88fd034\n. The specific commit fixing this is https://github.com/hillu/yara/commit/09e743f473536af3fcdcd8d04c9b4f4e21b76611\n. - Victor M. Alvarez:\n\noff_t can be 32-bits wide in some systems, so yr_filemap_map_ex should use off_t.\n\nAnd yet you define it as a 64 bit type on Windows (commit\na546391e939cb6c6d6d351585c0de8d3d4f0b8d9) which goes against MinGW's\ndefinition (at least for Win32)...\nDid you introduce that #define because the Microsoft compiler doesn't\nknow about off_t? If this is the case, 12f9358d3cd2fba5ee1c88adf835c16b73aa643c shoud be a simpler fix for the problem.\nCheers,\n-Hilko\n. - Victor M. Alvarez:\n\nYes, off_t was defined as int64_t because Microsoft compiler doesn't know about off_t. So the problem was that in mingw\nboth off_t and _WIN32 are defined. Your new patch fixed the problem.\nBy the way, did you experienced any problem with \"log\" function?\n\nNo. For the record, I am using\nmingw-w64-{common,i686-dev,x86-64-dev,tools} 3.2.0-2 and\ngcc-mingw-w64-{i686,x86-64} 4.9.2-10+15 from Debian/unstable.\nCheers,\n-Hilko\n. When trynig to link libyara.a produced using\n./configure --host=i686-w64-mingw32\non a Debian/unstable system, I got this error undefined reference to '_time32'. The mingw-w64 documentation is not very useful, but several mailing list discussions suggested defining __MINGW_USE_VC2005_COMPAT for other linker failures.\nWorks for me and since this is only enabled when building 32-bit MinGW targets, it should not affect anybody else.\n. Looks good to me.\n. A bit of demonstration of strlcpy badness: I can't find the sample that caused an actual crash, but...\nRunning\non yara 3.4 (on an x86_64 Debian/unstable machine) gives me an error: \"Invalid read of size 1\" at strlcpy.\nThe rules file only contains import \"pe\", the sample with md5sum=34209bcf50eaecee0af359c8f397450f is available on VirusTotal.\n. md5sum=1d161d9a10f76acdddf3fa3811e78156 is another sample valgrind gets upset about.\n. In the meantime, I have found a way to reproduce the problem on Windows: If a removable volume (such as a CD-ROM disk) is removed while yara is scanning a large file on that volume, it will crash.\n. This is a fix for #321.\n. Given that this patch does not seem change any YARA core functionality, wouldn't it be a good idea to publish the Java bindings in a separate repository and document the requisites to build from source?\n. I have provided an alternative implementation in https://github.com/hillu/yara/tree/escape-meta.\n. @bmagistro What you describe is pretty much the path I had in mind.\n. For the command line, nice(1) (Unix) and the START built-in (Windows) should be helpful.\nFor using libyara on Windows, I have done this successfully using SetPriorityClass() and/or SetThreadPriority().\n. Ero Carrera's python-pefile sees the three imports:\n\n----------Imported symbols----------\n[IMAGE_IMPORT_DESCRIPTOR]\n0x400      0x0   OriginalFirstThunk:            0x0       \n0x400      0x0   Characteristics:               0x0       \n0x404      0x4   TimeDateStamp:                 0x0        [Thu Jan  1 00:00:00 1970 UTC]\n0x408      0x8   ForwarderChain:                0x0       \n0x40C      0xC   Name:                          0x154     \n0x410      0x10  FirstThunk:                    0x68028   \nKERNEL32.DLL.LoadLibraryA Hint[0]\nKERNEL32.DLL.GetProcAddress Hint[0]\nKERNEL32.DLL.VirtualProtect Hint[0]\n\n. OllyDbg 2 (Windows XP) thinks that the EP is at 0x00400154 which matches 0x154 into the file. Just like in #395, YARA does not assign an entry point because 0x154 is not inside any section.\n. In 933dd39ca42cbe319e49f2dbb2afbdfed426967e I have committed a test program that tries to document the current offsets as produced by gcc 5.3.1 on Debian/unstable for amd64. I'll try to come up iwith an alternative to the pack pragma that does not seem to be able to produce exact alignments.\n. @wxsBSD The sample can be executed on XP, OllyDbg on XP ends up with the EP at 0x00400220 with the same contents as can be found at 0x220 into the file.\nYARA sets pe.entry_point to -1 because offset 0x220 is not inside any of the defined sections. I think that pe_rva_to_offset needs to learn some more tricks. :-)\n. Can you provide an ELF binary with which the fix can be demonstrated? A small sample that could be used in automated tests would be ideal.\n. I can reproduce the segmentation fault with 3.4.0, but not with the current master (a4c614a56b78f20a8841609479ee7892c9b362f7). A quick test with git bisect shows it was fixed in 65a86115524c453f6bc4719781321ae99ac25b0f.\n. Are you seeing something like syntax error, unexpected '-', expecting _NUMBER_ or _TEXT_STRING_ or _TRUE_ or _FALSE_? This looks like an oversight in the lexer to me -- the  underlying datatype in _YR_META is an int64_t.\nCheers,\n-Hilko\n. So it turns out that the feature as implemented so far causes the existing test suite to fail. Good thing I did the porting. ;-)\n. Thanks; Let's see if I can come up with a correct solution then. :-)\n. Meh, for some reason I thought that the problem described in #406 was not limited to meta declarations. So, handling the unary minus in the grammar was actually not that difficult. (Although the near-duplication of code may not be the most elegant solution.)\n. This PR seems to be mostly obsolete with #455 having been merged.\n. Merging 3a91764bc978f5c70171280595f29697b1edd5be (via 4e2e9ec17e5fb37bdf2ff6f39e068f3166fed4c6) breaks this test, though. (Everything passes again after reverting):\nassert_true_rule_blob(\n      \"import \\\"pe\\\" \\\n       rule test { \\\n        strings: $a = { 6a 2a 58 c3 } \\\n        condition: $a in (pe.entry_point .. pe.entry_point + 1) }\",\n      PE32_FILE);\n. What does this commit fix / achieve?\n. @plusvic can you recommend a tool / configuration for automatically checking and/or reformatting source code?\n. @plusvic I think I fixed all the style issue.\nI also did a bit of experimentation to find out if rounding down to FileAlignment is the right thing to do. On a Windows XP VM, I loaded cmd.exe (MD5:6d778e0f95447e6546553eeea709d03c) into OllyDbg. The observed entry point address is 0xd4ad05046.\nStatic information obtained using peinfo.py:\nFileAlignment: 0x200\nAddressOfEntryPoint: 0x5046\nImageBase: 0x4AD00000\nPointerToRawData for .text section: 0x400\nThe following rule matches for this file:\nrule xp_cmd_exe {\nstrings: $ep = { 6a 28 68 68 51 d0 4a }\ncondition: $ep at pe.entry_point\n}\nI then edited PointerToRawData for the .text section to various values and tried loading the resulting file into OllyDbg again. Everything I tried between the original 0x400 and 0x5ff caused OllyDbg to show the same entry point and the patched cmd.exe would still run properly when started without a debugger. (Anything < 0x400 or >= 0x600 would produce a non-working binary.)\nYARA 3.4.0 does not recognize the patched cmd.exe using the above rule. Current master with my  patches from this PR applied does.\n. None of the other yr_filemap_* functions are documented so far, so I'll do a separate PR for that first.\n. The precompiled YARA binaries (both 32 and 64 bit) import the \"ANSI\" variants such as CreateFileA and CreateFileMappingA from KERNEL32.DLL. Those don't accept wide characters. (This should be changed, in my opinion.)\n. I introduced lowest_section_rva in ba60f4e5edd4d1eca9ba2f1ad6f5543aa4d95153 to track the start of the first mapped section in order to catch unmapped data in front of the first section. (pe.c:439). If no valid sections are found lowest_section_rva stays at its initial value, so before this patch any rva would be considered valid and could lead to OOB reads later on.\nYou can reproduce the problem by just taking the first 1024 bytes of tests/data/tiny.exe and scanning them using\n\nimport \"pe\"\nrule t { condition: pe.exports(\"foo\") }\n\n. @plusvic, please ignore the bit about pe_valid_dll_name(). This happened to me with another truncated sample, sorry for the confusion.\nWe seem to agree on the root cause (pe_rva_to_offset returning values that are larger than the file size) and I think your proposed fix is cleaner.\n. Yeah, .I  going to do some experiments.\n. @plusvic I'd love some feedback about these changes.\n. Renaming SIZED_STRING to YR_SIZED_STRING and moving it to the part of types.h where we care about alignment seems sensible to me.\n. Fixed as of a834857e3dbc93963e2bfb67fa608b5d9c6b031a\n. We already have a function yr_rules_scan_fd which takes an integer file descriptor (Unix) or a HANDLE (Windows) -- how about adding a function yr_compiler_add_fd?\n. Must have been a problem on Travis' side. Everything seems to be fine now.\n. Should ARENA_FILE_VERSION be increased because of the different SIZED_STRING layout?\n. ARENA_FILE_VERSION is taken care of in #468\n. How come that the merged commit (685ec9c) has a different author email than the commit I submitted the PR (5afc7c6d63cf9e115332757c21c3b8af1f495924)?\n. @wxsBSD can you shed some light on what i2c_ASN1_INTEGER() is supposed to do here?\n. @wxsBSD I am not even sure if using i2d_ASN1_INTEGER() is the correct replacement -- do we want a hex dump of the DER-encoded INTEGER?\n. Apparently, i2c_ASN1_INTEGER puts the \"raw data\"  into a buffer while i2d_ASN1_INTEGER prefixes that data with DER type and length information. I have updated my patch to use i2d_ASN1_INTEGER. In my tests, I got the same result as before for 4bfe05f182aa273e113db6ed7dae4bb8  (negative serial) and for a legit psexec binary.\nThis change can be merged, as far as I'm concerned.\n. - Marek Milkovi\u010d:\n\nThis should also fix the issues when rules like these weren't matched\nproperly, even though the file clearly contained .data section on\nindex 2.\n\nCan you give an example file to reproduce the issue?\nCheers,\n-Hilko\n. The error message with current master is\ninvalid hex string \"$fail\": syntax error, unexpected ')', expecting _BYTE_ or _MASKED_BYTE_ or '(' or '['\nYARA 3.4.0 does not have this problem. A quick git bisect run shows that this seems to be a regression inadvertently introduced with 30fbe81458512c83912131254f5012140c565c6d (\"Reject hex strings starting or ending with jumps.\").\n. This is not a regression: Yara 3.4.0 also crashes on Debian unstable/powerpc architecture when checking a trivial rule rule test { condition: true }.\n. It looks like something is seriously wrong with encoding/decoding pointers for byteode and with storing pointers on the stack.\ntest-rules:\n\nProgram received signal SIGSEGV, Segmentation fault.\nyr_execute_code (rules=rules@entry=0x1013ea78, \n    context=context@entry=0xfffee7a8, timeout=timeout@entry=0, \n    start_time=start_time@entry=1470348868) at exec.c:448\n448               rule->t_flags[tidx] |= RULE_TFLAGS_MATCH;\n(gdb) bt\n#0  yr_execute_code (rules=rules@entry=0x1013ea78, \n    context=context@entry=0xfffee7a8, timeout=timeout@entry=0, \n    start_time=start_time@entry=1470348868) at exec.c:448\n#1  0x10015c48 in yr_rules_scan_mem_blocks (rules=rules@entry=0x1013ea78, \n    iterator=iterator@entry=0xfffef3d0, flags=flags@entry=0, \n    callback=callback@entry=0x10008aa0 , \n    user_data=user_data@entry=0xfffef408, timeout=timeout@entry=0)\n    at rules.c:470\n#2  0x10015f30 in yr_rules_scan_mem (rules=rules@entry=0x1013ea78, \n    buffer=buffer@entry=0x10045d08 \"dummy\", buffer_size=buffer_size@entry=5, \n    flags=flags@entry=0, callback=callback@entry=0x10008aa0 , \n    user_data=user_data@entry=0xfffef408, timeout=timeout@entry=0)\n    at rules.c:582\n#3  0x10008d2c in matches_blob (\n    rule=0x10042ec4 \"rule test { condition: true }\", blob=, \n    len=) at tests/util.c:119\n#4  0x10001a9c in test_boolean_operators () at tests/test-rules.c:37\n#5  main (argc=, argv=)\n    at tests/test-rules.c:1350\n(gdb) p rule\n$1 = (YR_RULE *) 0x0\n\ntest-pe:\n\nProgram received signal SIGSEGV, Segmentation fault.\n0x0fac2c18 in strlen () from /lib/powerpc-linux-gnu/libc.so.6\n(gdb) bt\n#0  0x0fac2c18 in strlen () from /lib/powerpc-linux-gnu/libc.so.6\n#1  0x10003fa8 in yr_hash_table_lookup (table=0x10126e30, key=key@entry=0x0, \n    ns=ns@entry=0x0) at hash.c:275\n#2  0x10006cd8 in yr_modules_load (module_name=module_name@entry=0x0, \n    context=context@entry=0xfffee7f8) at modules.c:127\n#3  0x1002de28 in yr_execute_code (rules=rules@entry=0x10139928, \n    context=context@entry=0xfffee7f8, timeout=timeout@entry=0, \n    start_time=start_time@entry=1470348906) at exec.c:850\n#4  0x1000ef48 in yr_rules_scan_mem_blocks (rules=rules@entry=0x10139928, \n    iterator=iterator@entry=0xfffef420, flags=flags@entry=0, \n    callback=callback@entry=0x10001da0 , \n    user_data=user_data@entry=0xfffef458, timeout=timeout@entry=0)\n    at rules.c:470\n#5  0x1000f230 in yr_rules_scan_mem (rules=rules@entry=0x10139928, \n    buffer=buffer@entry=0x100703e8 \"MZ\\220\", \n    buffer_size=buffer_size@entry=32768, flags=flags@entry=0, \n    callback=callback@entry=0x10001da0 , \n    user_data=user_data@entry=0xfffef458, timeout=timeout@entry=0)\n    at rules.c:582\n#6  0x1000202c in matches_blob (\n    rule=rule@entry=0x10039b18 \"import \\\"pe\\\" rule test { condition: pe.imports(\\\"KERNEL32.dll\\\", \\\"DeleteCriticalSection\\\") }\", blob=, \n    len=) at tests/util.c:119\n#7  0x10001ab8 in main (argc=, argv=)\n    at tests/test-pe.c:8\n\n. @maxvonhippel no, it did not. As of 6fd48837b98747264e3c1b8476e0b271935aab36, I can still reproduce the segfault on Debian unstable/amd64.. The bug manifests itself in read_escaped_char() where the EOF condition is not triggered.\n... and that is because yy_scan_string is used to process the regex. If yy_scan_bytes were used, the scanner would have the necessary information for signalling EOF.. @Mi4uric3 Please have a look if PR #520 fixes the issue for you. (I don't have a Visual Studio compiler available.)\n. - Kyle Reed:\n\nThe tests aren't currently built in the Windows projects but unistd.h\nwas also referenced in the test that was added for this.\n\nRight...\nAfter looking at the libc documentation on MSDN, I found that there are\nopen(), read(), functions after all.\nI'll be updating my patch once more.\nCheers,\n-Hilko\n. @plusvic The latest incarnation of my PR does use ReadFile both in the\nlexer and in the test code.\n. - Kyle Reed:\n\nThis still doesn't work, the lexer.c needs to be regenerated and checked in. \n@hillu if you can regenerate that would be helpful.\n\nMhm. Would it make sense to remove flex- and bison-genrated files and\nonly include them in release tarballs?\n-Hilko\n. https://github.com/VirusTotal/yara/blob/master/libyara/modules/dotnet.c#L54\n. Related to this: Cross-building using MinGW on Travis. #525\n. This may be the same issue I ran into while cross-compiling with MinGW, PE, IMPORTED_FUNCTION, IMPORTED_DLL are not defined.\n. Strange. It clearly worked before... https://travis-ci.org/VirusTotal/yara/builds/161631311\n. I am not sure what to make of \"clever\" there. ;-)\nAnyway, I have updated my patch.\n. Apparently, the endianess check does not work on Mac OS X.\n. Build and tests pass on OSX now.\n. The idea to have optional thread-specific variable overrides sounds elegant at first, but you can't tie it to tidx because the thread<->tidx association only exists as long as yr_rules_scan_mem_blocks runs.\nHow about this:\n- Add a limited number of slots of YR_EXTERNAL_VARIABLE chains for overriding the globally-set variables.\n- Use some bits of the flags argument to the yr_rules_scan_*  functions to indicate which one of these chains should be used. 0 means that only the global set should be used.\nThis would require no extra data structures, no extra variants of the scan functions, just variants of the yr_rules_define_*_variable that use an extra parameter to specify the slot. And probably functions for allocation and cleanup of the local variable chains.\n. If I understand the patch correctly, the set of local variables is tied\nto the thread from which the yr_rules_scan_* function is called. I think\nthat this approach has at least two problems:\n1. The user has to go through extra steps to be able to use the same\n   variable-set from two different threads.\n2. Yara is commonly used from higher-level languages where the runtime\n   may have abstracted away the concept of threads, e.g. Golang's\n   goroutines. I wrote and maintain a set of Yara bindings for Golang\n   (https://github.com/hillu/go-yara) and I do not know if I would be able\n   to make thread-bound local variables usable to users of my library at\n   all.\nCheers,\n-Hilko\n. - Victor M. Alvarez:\n\n@hillu Could you take a look at this?\nMy guess is that the intention with line 108 is getting the current\nmask in order to restore it later in line 120. \n\nThat's what I must have had in mind. But setting act.sa_mask (the signal\nmask to be used when the handler is run) makes no sense, it should\nprobably be pthread_sigmask(SIG_SETMASK, NULL, &oldmask) as suggested.\n\nBut according to the documentation sigsetjmp saves the current mask if\nthe second argument is non-zero, and the mask should be restored by\nsiglongjmp.  So, are the calls to pthread_sigmask actually necessary?\n\nLooks like it. Let me see if I can come up with a proper test setup for\nthis.\nCheers,\n-Hilko\n. @Professor-plum Are you sure that you noticed a segmentation fault? I can demonstrate that the process is terminated by default action if a signal (e.g. SIGUSR1) is pending, but not actually a segmentation fault.\n. Hi @viper2020,\n\nerror scanning //proc/bus/pci/00/02.0: internal error: 4\nerror scanning //proc/sys/vm/compact_memory: could not open file\nCould somebody help me with this issue?\n\nOn Unix systems, you generally don't want to scan \"special\" files such\nas device nodes or files within the /proc or /sys filesystems, even as\nroot.\nThe \"internal error 4\" stands for ERROR_COULD_NOT_MAP_FILE which likely\nhappens due to SIGBUS being delivered to the yara process.\nCheers,\n-Hilko\n. - viper2020:\n\nThanks for the response,\nWhat if I need to scan the special files too?\n\nNot possible with yara (the command line tool), you'll have to code your\nown logic around libyara.\nBeware, reading from some files in /proc, /sys, or /dev may make your\nsystem unstable.\nCheers,\n-Hilko\n. > I replaced Mutex with CriticalSection object. It could speed up\n\nscanning a tiny bit on Windows.\n\nNice. The use of GetLastError() after InitializeCriticalSection() seems\nwrong, though. Just return 0.\nCheers,\n-Hilko\n. Also, have you done any measurements when performing single threaded and multi-threaded scans?\n. - stefan-baranoff:\n\nI'm a bit concerned about the move away from Yara's memory management\nmodel (arenas and yr_* functions for allocating/freeing) and the use\nof malloc/free directly. There's nothing directly wrong with this\napproach but is in conflict with other similar code. Is there a reason\nyou took this approach?\n\nThere's no specific reason. Thank you for bringing this up.\nWhen looking at how the variables are read in rules.c, it had not\noccured to me at all that all that memory is backed by an arena --\nprobably because malloc is actually used for\n\"EXTERNAL_VARIABLE_TYPE_MALLOC_STRING\" types.\nI could, of course, allocate the memory for local variable sets\non-demand in rules->arena and overwrite the first entry's type field\nwhen freeing the set. @plusvic, what do you think?\nCheers,\n-Hilko\n. @stefan-baranoff I have pushed a new version that allocates local external variable spaces within the arena instead of using malloc().\n. Yeah, both of those files are for big-endian architectures and yara's elf module does not deal with that. Fix coming up.\n. I'd be happy to pull those patches together. FTR, so far the Debian package contains:\n- big-endian fixes: a9a1105d923912a27546e5a8940ec1ddc19cd1be, d272b9c742e15d6767f20a7f1c01579b468cceee, d3b77eb1e9ee4731ea11c39fceb262cf4f2b006f\n- better signal handling: 8b2b6b8f82b8a8a8830bae122474b39ac2814fc6, 0b3d9a93276d3364b2a3561995d27e8b4a137134, ddd5e975f2c36323e408e0eeedd56db59e0148a0\n- sigsegv handling: 35f01653ab162d4302faebcfa36b349b4141344a\nI'd also add fixes for the various parser failures. Just tell me how to proceed.. * Azeem Sajid:\n\nI'm using YARA C API on Windows 7 (32-bit) with Qt 5.7.\nWhen I load a rules files using yr_compiler_add_file(), it crashes with a segmentation fault.\nRules file is okay. I used the yr_compiler_add_string() function instead and it worked fine.\nAnyone experienced the same issue?\n\nJust a guess: If YARA and Qt have been linked against different versions\nof the Microsoft C runtime library, there may be different assumptions\nabout the FILE implementation (i.e. struct layout).\nIn any case, a stack trace of the crash would help in finding out what\nhappened here.\n. @plusvic The issue is identical to #503; I fixed that in #586. (The Travis OSX failures there would be fixed by merging #587.). > when I use yr_rules_scan_file() in my code,it returns \"could not open file\". The file I scan is \"C\\windows\\system32\\\n\nntdll.dll\".Who knows the reason?\n\nIt should be C: (with a colon). Are you escaping the backslash\ncharacters in your string?\n. I notice a plus sign before the user entry which indicates that there are ACLs, Could you run getfacl hack.php to make those visible?. You have a permission problem. The \"other\" ACL does not grant any permission. This is not YARA's fault.. * ATo:\n\nHello hillu,\nI don't think it is related to the group permissions since Yara,\nexecuted as root, is able to read the file:\n\nroot is also able to read files with permissions 000.\nAm I missing something? As what user are you running yara? It's neither\nfakeuser nor a user that belongs to fakegroup, correct?\n. * ATo:\n\nNo issue reading the file using cat, less, tail, vim. This file is a webshell (WSO 2.6) written in PHP.\n\nCan you provide an strace dump of running both cat and yara on the file?\n. * Sangwon Kim:\n\nIs there a way to get \"filesize\" or \"pe.imphash()\" internal values from YARA results?\nOf course, I can extract these values by using third party libraries, but I want to use the values, which makes\nyou not to use additional third party libraries.\n\nI think what you are suggesting would be quite useful for debugging.\n. * Jacob Baines:\n\nLine 167 in elf.c doesn't use an endian function in order to access\nsection->offset. This is problematic when investigating a binary that\nhas a different endianness than the host.\n\nCould you also provide one or two small examples that could be used in\nthe tests?\nCheers,\n-Hilko\n. leXXtoh(0) is still 0, so all those changes for if (... == 0) checks are not really needed. Otherwise, this looks good, though.\nThanks for testing this (so I won't have to deal with it in Debian when I upload the next stable release).. * Jacob Baines:\n\n@hillu You are obviously correct about the == 0. I added the lexxtoh\nthere more for consistency since people like me make silly mistakes by\naccidentally leaving the endian accessors off.\n\nYeah, I see what you mean. People like me make such mistakes, too. :-)\n. YARA really should not stop the process at all -- on Win32 and AFAICS on MacOSX the process is kept running while its memory is inspected.\nptrace(2) mentions that there is a PTRACE_SEIZE request, but that's only available on Linux >= 3.4.. @wxsBSD I agree, the patch makes sense. The problem that I see with keeping processes stopped for the scan duration is different issue. Sorry for the noise. :-). any chance of getting this merged?. @rspeaker Using normal _try/_catch/_finally would have meant breaking building with MinGW. I just took another look at the MSDN documentation on Structured Exception Handling and the semantics of AddVectoredExceptionHandler() and friends regarding multiple threads are not immediately obvious to me.\nRegarding callbacks: I think you are correct in that we should restore the previous behavior for the callback duration. However, it is my opinion that if an application sets up custom exception handler in its callback code, it takes the responsibility to restore the previous state at function exit. (This is something that ought to be mentioned in the documentation.)\n@plusvic The callback issue exists on Unix, too.. @rspeaker Thank for clarifying and for the link. I think I have seen that article before and I wonder if one can get away without having to resort to inline assembly. :-/\nI will look into producing some test cases for multiple threads and exceptions to reproduce the issue and (and find out in which way it exists on Unix...) and then fix it.. @rspeaker Are you using the Microsoft compiler or MinGW? I suppose we could add a simple __try / __except while I keep convincing myself that the frame-based exceptions have in fact been fixed in MinGW in the last few months.. Could you give my attempt at fixing this a try? (I don't have a Windows-based build setup to test this with.). @rspeaker Did you write a small program to test the fix that you can share?. can you describe what effects you were looking for in your existing application? Did you provoke a crash while a different thread was executing one of the yr_rules_scan_* functions?\n. While __try/__except works for MSVC, I haven't gotten __try1/__except1 to work with MinGW so far, even with recent patches. I think I'll keep using AddVectoredExceptionHandler with MinGW but take remove the assert(false).... @rspeaker Sorry to bother you again... Would you mind re-testing with the original code, with the assert(false) simply removed?. Thank you! Now I know what to do. :-). Right. We should get rid of the assert(false) there, too.. Ideally, our exception_handler function should invoke a signal handler that the application may already have installed (or invoke the default action for the signal), but I am not quite sure how to do that.. On Linux, running yara /dev/stdin somefile will do what you want.. yara -r - /foo would try to open a file - to read the rules from, so that would not work. The manpage is clearly wrong.. @JusticeRage The second error message means that you used conditions: where condition: would have been correct.. I can reproduce the error with a hex string describing 3004 or more bytes.. After regenerating re_lexer.c using flex 2.6.1 (instead of 2.6.0) fixes the issue, at least on ppc64el. Spot on! 4d3d586 builds and tests fine on the AIX box, the previous commit crashes test-rules.. All tests run fine. ./configure --disable-shared, with OpenSSL installed.\nWhen do you plan to release 3.7?. This does not seem to be an issue on AIX 7.2.... There is a /proc filesystem, but it is different enough that it would require special support, so I think that disabling it may be a good idea. All the necessary bits seem to be there and instead of parsing lines of data, one can use predefined structs from <sys/procfs.h>, how about that! And it is very well documented.. I don't think I am going to have the time for this in the near future, so it would be better to disable process scanning -- actually for all unrecognized systems.\nI see that there FreeBSD and OpenBSD seem to be explicitly supported (although a later comment only mentions Linux ... https://github.com/VirusTotal/yara/blob/984ee76caba8cff35222fc7b564cdfb19ca457f1/libyara/proc.c#L338\nHas process scanning actually been tested on those systems?. alright, with #776 merged (wich came a bit as a surprise to me), this can be closed, I suppose.. This looks just like #762 and #695. Does upgrading flex to 2.6.4 and regenerating the lexer help?. @rgdoliveira Here's the relevant file for the Debian package. Lexer and parser files are deleted before building, so that they are rebuilt using current bison and flex.. PR has been merged, closing.. @plusvic Please don't merge yet. I need to give it another look.. (This seems to have been the real issue for failures in my FreeBSD code.). I have successfully tested on OpenBSD 6.2 and NetBSD 7.1.. This does not fix the issue if yara is built using MinGW (or any other non-MSVC compiler). See my PR #811.. Mhm. Why does the JVM produce SIGBUS or SIGSEGV?. @wjsl Do you think that it would make sense for exception_handler to call the previously-set signal handler instead?. @plusvic I agree that having the default signal handler may be problematic. And I think we all agree that the abort() at the end of the signal handler does more harm than good, so let's at least remove that, as suggested by @wjsl.\nI wonder if chaining the signal handler (as laid out in https://github.com/hillu/yara/tree/chained-signal-handler) might be a better general answer.. @plusvic Is the last version of my two patches acceptable?. The executables are only simple wrapper programs that are generated by libtool so you can run them from the build directory. (On Unix systems those would be shell scripts.). The actual executables are placed in the .lib subdirectory. Running make install will install the executables and libraries into the prefix you specified when calling configure.. libyara.so.2 suggests that your application was linked against YARA 2.x. You'll have to recompile -- and possibly port.. You're correct, of course. Turns out that the use of a strdup style function is wrong here. But then, we didn't know about the string-at-EOF corner case before...\n. done.\n. Does Visual Studio's C compiler produce a warning or error message here? If so, which message exactly? And please specifiy the version you are using. Thanks.\n. Shouldn't this be waitpid(pid, &status, 0) ?\nThere could be multiple threads using yr_proc_scan_proc concurrently and an application using libyara may have forked other processes.. of course it needs to be a function call.\n. I figured that those loop counters should always fit into 31 bits... The alternative was replacing %d with %\"PRIu64\". Which is fine by me, too.. Okay, sorry about the noise, my brain must be fried. Let's use YR_PRINTF_LIKE.. ",
    "vathpela": "Actual /validation/ is a little difficult to get correct, because there are policies revolving around /why/ something has been signed.  For example, when validating a windows driver, you check the validation dates (not valid before and not valid after dates) in a signature, but a UEFI option ROM that's expressly not okay.\nThat said, some of that policy can be inferred from the signer's CN pretty easily.\n. ",
    "mousehaohao": "i'm using the visual studio 2012 :)\n. ok, i found the root cause, in my own project, i do not define the WIN32 or _WIN32 when compile x64,\nbut i can not just simply add a WIN32 define in my project when in my x64 project,\nso i think it's my own project problem.\nThanks.\n. it seems cause by parse RE_NODE_RANGE\n``` cpp\n      *code_size += branch_size;\n      for (i = 0; i < re_node->start - 1; i++)\n      {\n        // Don't want re_node->forward_code updated in this call\n        // forward_code must remain pointing to the code generated by\n        // by the  _yr_re_emit above. However we want re_node->backward_code\n        // being updated.\n    FAIL_ON_ERROR(_yr_re_emit(\n        re_node->left,\n        arena,\n        flags | EMIT_DONT_SET_FORWARDS_CODE,\n        NULL,\n        &branch_size));\n    //!!!!!!!!!!!!! This size will increase quickly.\n    *code_size += branch_size;\n  }\n\n```\n. i have found a solution myself, although it seems verbose\n```\nprivate rule Str1\n{\nstrings:\n    $a = \"applet\"\ncondition\n    $a\n}\nprivate rule Str2\n{\nstrings:\n    $a = \"applet\"\ncondition\n    $a\n}\nprivate rulr StrN\n....\nrule Mal_xx \n{\nmeta :\nconditon:\n    Str1 and Str2\n}\n```\n. sorry my mistaken\n. ",
    "mhanne0915": "thanks for the fast fix:)\n. ",
    "juju4": "Hello Andreas,\nThanks for the quick answer.\nEasier for you when it seems an intermediate between 3.1.0 and next one :-)\nI submitted a combined Portfile on macports and putting you in copy.\nhttps://trac.macports.org/ticket/44816\nCheers\n. Latest commit is 367b0eab221684d3a818e695c4889193b2c53031, 2d ago, right?\nI already included in the Portfile. It contains 3 subports 1.7, 3.1 and -devel which right now is this one (and devel = 3.1 as we use same version but one from archive and the other fetched by git). All of them compiles. would just need a test.run to be complete :)\n. Ok. fixed.\nPython bindings are valid for all releases? I'm not quiet sur for v1 and is it good for python 2.7, 2.8, 3.3 or others?\n. That was my next point. I asked on trac.macports as I'm unsure what is the policy on that (One archive, not a configure option, 2 Portgroup)\nWhat about compatibility with 3.3/3.4?\n. Hello Andreas,\nlatest Yara and py-yara are submitted here\nhttps://trac.macports.org/ticket/44816\nhttps://trac.macports.org/ticket/45642\nwhat about python33/34 compatibility?\nelse with 3.2, I got a compile issue\n``\n:info:build make[2]: Entering directory/opt/local/var/macports/build/_Users_julien_tmp_myports_security_yara/yara/work/yara-3.2.0/libyara'\n:info:build /bin/sh ../libtool  --tag=CC   --mode=compile /usr/bin/clang -DHAVE_CONFIG_H -I. -I..   -I/opt/local/include -O3 -Wall -std=gnu99 -I./include -pipe -Os -std=gnu89 -Os -std=gnu89 -arch x86_64 -arch x86_64 -D_THREAD_SAFE  -c -o grammar.lo grammar.c\n:info:build /bin/sh ../libtool  --tag=CC   --mode=compile /usr/bin/clang -DHAVE_CONFIG_H -I. -I..   -I/opt/local/include -O3 -Wall -std=gnu99 -I./include -pipe -Os -std=gnu89 -Os -std=gnu89 -arch x86_64 -arch x86_64 -D_THREAD_SAFE  -c -o ahocorasick.lo ahocorasick.c\n:info:build libtool: compile:  /usr/bin/clang -DHAVE_CONFIG_H -I. -I.. -I/opt/local/include -O3 -Wall -std=gnu99 -I./include -pipe -Os -std=gnu89 -Os -std=gnu89 -arch x86_64 -arch x86_64 -D_THREAD_SAFE -c grammar.c  -fno-common -DPIC -o .libs/grammar.o\n:info:build libtool: compile:  /usr/bin/clang -DHAVE_CONFIG_H -I. -I.. -I/opt/local/include -O3 -Wall -std=gnu99 -I./include -pipe -Os -std=gnu89 -Os -std=gnu89 -arch x86_64 -arch x86_64 -D_THREAD_SAFE -c ahocorasick.c  -fno-common -DPIC -o .libs/ahocorasick.o\n:info:build grammar.y:676:76: error: no member named 'prototype_item' in 'struct _YR_OBJECT_ARRAY'\n:info:build           (yyval.object) = ((YR_OBJECT_ARRAY) (yyvsp[(1) - (4)].object))->prototype_item;\n:info:build                            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  ^\n:info:build grammar.y:678:90: error: use of undeclared identifier 'OBJECT_TYPE_DICTIONARY'\n:info:build         else if ((yyvsp[(1) - (4)].object) != NULL && (yyvsp[(1) - (4)].object)->type == OBJECT_TYPE_DICTIONARY)\n:info:build                                                                                          ^ \n:info:build grammar.y:691:15: error: use of undeclared identifier 'OP_LOOKUP_DICT'\n:info:build               OP_LOOKUP_DICT,\n:info:build               ^ \n:info:build grammar.y:694:30: error: use of undeclared identifier 'YR_OBJECT_DICTIONARY'; did you mean 'YR_OBJECT_FUNCTION'?\n:info:build           (yyval.object) = ((YR_OBJECT_DICTIONARY) (yyvsp[(1) - (4)].object))->prototype_item;\n:info:build                              ^ \n:info:build /opt/local/include/yara/types.h:454:3: note: 'YR_OBJECT_FUNCTION' declared here\n:info:build } YR_OBJECT_FUNCTION;\n:info:build   ^ \n:info:build grammar.y:694:51: error: expected expression\n:info:build           (yyval.object) = ((YR_OBJECT_DICTIONARY) (yyvsp[(1) - (4)].object))->prototype_item;\n:info:build                                                   ^ \n:info:build grammar.y:702:35: error: use of undeclared identifier 'ERROR_NOT_INDEXABLE'\n:info:build           compiler->last_result = ERROR_NOT_INDEXABLE;\n:info:build                                   ^ \n:info:build grammar.y:859:15: error: use of undeclared identifier 'OP_STR_TO_BOOL'\n:info:build               OP_STR_TO_BOOL,\n:info:build               ^ \n:info:build grammar.y:922:13: error: use of undeclared identifier 'OP_FOUND'\n:info:build             OP_FOUND,\n:info:build             ^ \n:info:build grammar.y:938:13: error: use of undeclared identifier 'OP_FOUND_AT'\n:info:build             OP_FOUND_AT,\n:info:build             ^ \n:info:build grammar.y:952:13: error: use of undeclared identifier 'OP_FOUND_IN'\n:info:build             OP_FOUND_IN,\n:info:build             ^ \n:info:build grammar.y:1263:15: error: use of undeclared identifier 'OP_STR_EQ'\n:info:build               OP_STR_EQ,\n:info:build               ^ \n:info:build grammar.y:1290:15: error: use of undeclared identifier 'OP_STR_EQ'\n:info:build               OP_STR_EQ,\n:info:build               ^ \n:info:build grammar.y:1317:15: error: use of undeclared identifier 'OP_STR_NEQ'\n:info:build               OP_STR_NEQ,\n:info:build               ^ \n[...]\n:info:build grammar.y:1620:55: error: expected expression\n:info:build         (yyval.expression).value.integer = OPERATION(+, (yyvsp[(1) - (3)].expression).value.integer, (yyvsp[(3) - (3)].expression).value.integer);\n:info:build                                                       ^\n:info:build grammar.y:1630:55: error: expected expression\n:info:build         (yyval.expression).value.integer = OPERATION(-, (yyvsp[(1) - (3)].expression).value.integer, (yyvsp[(3) - (3)].expression).value.integer);\n:info:build                                                       ^\n:info:build fatal error: too many errors emitted, stopping now [-ferror-limit=]\n:info:build libtool: compile:  /usr/bin/clang -DHAVE_CONFIG_H -I. -I.. -I/opt/local/include -O3 -Wall -std=gnu99 -I./include -pipe -Os -std=gnu89 -Os -std=gnu89 -arch x86_64 -arch x86_64 -D_THREAD_SAFE -c ahocorasick.c -o ahocorasick.o >/dev/null 2>&1\n:info:build 1 warning and 20 errors generated.\n:info:build make[2]: ** [grammar.lo] Error 1\n```\nsame with -devel of 20141128 and 3.1 (367b0eab221684d3a818e695c4889193b2c53)\nThat's weird, I was thinking it was good for 3.1\n. ",
    "trendpi": "I found it not hang but loop so long. One match process can take several hours. So i'm not sure it is our rules problem or the yara engine issue.\n------------------ \u539f\u59cb\u90ae\u4ef6 ------------------\n\u53d1\u4ef6\u4eba: \"Victor M. Alvarez\";notifications@github.com;\n\u53d1\u9001\u65f6\u95f4: 2014\u5e749\u670811\u65e5(\u661f\u671f\u56db) \u665a\u4e0a7:44\n\u6536\u4ef6\u4eba: \"plusvic/yara\"yara@noreply.github.com; \n\u6284\u9001: \"Peter\"1638792887@qq.com; \n\u4e3b\u9898: Re: [yara] _yr_re_fiber_exists cause deap loop (#172)\nFalse alarm?\n\u2014\nReply to this email directly or view it on GitHub.\n. ",
    "tuxxon": "1>MSVCRTD.lib(MSVCR110D.dll) : error LNK2005: _tolower already defined in libcmtd.lib(tolower.obj)\n1>MSVCRTD.lib(MSVCR110D.dll) : error LNK2005: _isalnum already defined in libcmtd.lib(_ctype.obj)\n1>MSVCRTD.lib(MSVCR110D.dll) : error LNK2005: _isdigit already defined in libcmtd.lib(_ctype.obj)\n1>MSVCRTD.lib(MSVCR110D.dll) : error LNK2005: _printf already defined in libcmtd.lib(printf.obj)\n1>MSVCRTD.lib(MSVCR110D.dll) : error LNK2005: _fclose already defined in libcmtd.lib(fclose.obj)\n1>MSVCRTD.lib(MSVCR110D.dll) : error LNK2005: _fread already defined in libcmtd.lib(fread.obj)\n1>MSVCRTD.lib(MSVCR110D.dll) : error LNK2005: _fseek already defined in libcmtd.lib(fseek.obj)\n1>MSVCRTD.lib(MSVCR110D.dll) : error LNK2005: _ftell already defined in libcmtd.lib(ftell.obj)\n1>MSVCRTD.lib(MSVCR110D.dll) : error LNK2005: _fwrite already defined in libcmtd.lib(fwrite.obj)\n1>MSVCRTD.lib(MSVCR110D.dll) : error LNK2005: iobfunc already defined in libcmtd.lib(_file.obj)\n1>MSVCRTD.lib(MSVCR110D.dll) : error LNK2005: _clearerr already defined in libcmtd.lib(clearerr.obj)\n1>MSVCRTD.lib(MSVCR110D.dll) : error LNK2005: _ferror already defined in libcmtd.lib(feoferr.obj)\n1>MSVCRTD.lib(MSVCR110D.dll) : error LNK2005: _strchr already defined in libcmtd.lib(strchr.obj)\n1>MSVCRTD.lib(MSVCR110D.dll) : error LNK2005: errno already defined in libcmtd.lib(dosmap.obj)\n1>MSVCRTD.lib(MSVCR110D.dll) : error LNK2005: _exit already defined in libcmtd.lib(crt0dat.obj)\n1>MSVCRTD.lib(MSVCR110D.dll) : error LNK2005: _atoi already defined in libcmtd.lib(atox.obj)\n1>MSVCRTD.lib(MSVCR110D.dll) : error LNK2005: _free already defined in libcmtd.lib(dbgfree.obj)\n1>MSVCRTD.lib(MSVCR110D.dll) : error LNK2005: _malloc already defined in libcmtd.lib(dbgmalloc.obj)\n1>MSVCRTD.lib(MSVCR110D.dll) : error LNK2005: _realloc already defined in libcmtd.lib(dbgrealloc.obj)\n1>MSVCRTD.lib(ti_inst.obj) : error LNK2005: \"private: __thiscall type_info::type_info(class type_info const &)\" (??0type_info@@AAE@ABV0@@Z) already defined in libcmtd.lib(typinfo.obj)\n1>MSVCRTD.lib(ti_inst.obj) : error LNK2005: \"private: class type_info & __thiscall type_info::operator=(class type_info const &)\" (??4type_info@@AAEAAV0@ABV0@@Z) already defined in libcmtd.lib(typinfo.obj)\n1>MSVCRTD.lib(MSVCR110D.dll) : error LNK2005: __fileno already defined in libcmtd.lib(fileno.obj)\n. It happens, when compiling with MFC in a static library\n. It doesn't happen, when compiling with MFC in a DLL..\nI want to send you a project file.\nCan you send me a email address ?\n. When sending my project file to you, I got this message:\n----- The following addresses had permanent fatal errors ----- \n plusvic@gmail.com \n(reason: 552-5.7.0 This message was blocked because its content presents a potential)\nDo you have another email address?\n-- Gordon Ahn.\n. ",
    "Rand1-1000": "Me bad, it's FreeBSD 10\n. Works like a charm, make and install worked perfect. Thanks for the fast patch. I appreciate it a lot\n. ",
    "tedwardia": "Just gave that a try. If I do autoreconf -i on centos 6, I'm able to ./configure and build :)\nSome more error on centos 5, though. I get the same error with or without using -i/-fi:\nbash\n$ autoreconf \nconfigure.ac:84: error: possibly undefined macro: AC_CHECK_FUNCS_ONCE\n      If this token and others are legitimate, please use m4_pattern_allow.\n      See the Autoconf documentation.\nautoreconf: /usr/bin/autoconf failed with exit status: 1\n$ ./configure\nconfigure: error: cannot find install-sh or install.sh in . ./.. ./../..\n. Latest commit is working for me on centos5/6. Thanks!\n@EricSP were you downloading from https://github.com/plusvic/yara/releases/tag/v3.2.0 by chance? That version likely won't have all the latest commits. If you do a \"git clone https://github.com/plusvic/yara.git\" instead, that should have all the latest stuff.\n. ",
    "EricSP": "Same thing here... no progress\n. Thanks!\nFrom: Victor M. Alvarez [mailto:notifications@github.com]\nSent: December-10-14 4:35 AM\nTo: plusvic/yara\nCc: Eric S. Periard\nSubject: Re: [yara] building yara on centos 5/6 (#200)\nClosed #200https://github.com/plusvic/yara/issues/200.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/plusvic/yara/issues/200#event-205395578.\n. ",
    "ximerus": "Yeah, its work. Thanks.\n. ",
    "vanvleet": "Hey Victor, thanks for the reply.  How do you pass an external variable...\nthat's not something I was aware of?  Did I miss it in the documentation\n(if so, just send me a \"RTFM!\")  :o)\nOn Tue, Feb 10, 2015 at 4:21 AM, Victor M. Alvarez <notifications@github.com\n\nwrote:\nYARA can be used in other contexts where the file name is not known, it's\noriented to detect files based on their content, not in other environmental\nvariables. You could always pass an external variable with the file name\nand use it from your rules.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/plusvic/yara/issues/202#issuecomment-73683900.\n. \n",
    "dtilloy": "Is something strange or wrong blocking this request to be merged? Thanks.\n. ",
    "pozdnychev": "Done.  I used ERROR_SUCCESS and ERROR_INSUFICIENT_MEMORY instead of raw 0 and -1.  Thanks for the review.\n. ",
    "bergeret": "thanks :)\n. ",
    "apolkosnik-old": "I don't have any idea why it was failing yesterday, then I've updated byacc to the version from RHEL7, and it was still no-go. Today, it all built without any issues. Since it works fine now, I've closed the issue.\n. I've got another case of this, but this time I looked at the output from configure.\nInstalling flex and bison fixed the issue.\n. Thanks for pointing that out, I misread the code, a bit. Nevertheless\n[code]\n try:\n                rules = yara.compile(source=data)\n            except yara.SyntaxError:\n                message = \"Not a valid yara rules file: %s\" % sigfile\n[/code]\nthrows an exception on a ruleset that produces only warnings when compiled with yarac.\nWhen I changed the code to:\n[code]\nrules = yara.compile(source=data,error_on_warning=True )\n[/code]\nThrows:\nWarningError: Using deprecated \"entrypoint\" keyword. Use the \"entry_point\" function from PE module instead.\n. I mistakenly thought that it was an yara-python issue. Thank you for all your great work!\n. ",
    "0xAli": "I have the exact same issue, updated byacc to 20141128 - still have same error.\nI tried removing that %debug line and/or the lines after/before it and it didn't matter still got the same error.\n\nEdit: I updated byacc (from source), then installed bison, then installed flex, then installed bison++ (all with apt-get) it didn't solve anything (even with make clean && make)\nBut after i deleted the whole yara directory and cloned it again it compiled with no problem!\n. ",
    "jovimon": "Same problem here :(\n. Thank you very much for your comments.\nI'm not a great C coder but made a small PR to make the error more \"user-friendly\".\nHope it's not very bad and you like it.\nIf you want you can close this issue ;)\n. ",
    "bfosterjr": "https://github.com/bfosterjr/yara/commit/dd6d4f1b249ea943dc315a9fc6d6106553f15de1\n. Disregard. Offset is available via the YR_RULE->YR_STRING->YR_MATCHES->YR_MATCH.\n. ",
    "blacktop": "I had to install libjansson from source because the version in debian wheezy's apt-get was old I am assuming.\nThank you!\n. This seems to be a problem with yara-python 1.7 (via pip) and not 3.3.0  Can we get a pip version of that please?\n. Duplicate of #146\n. This was fixed by installing yara from souce, there is something wrong with the brew formula, it is probably storing important files in places where the yara-python code can't find them.\n. This works if I use --system-site-packages when invoking my virtualenv. \n. I am now !!! \ud83d\ude04 thank you for such a great tool !! https://github.com/blacktop/docker-yara\n. ",
    "johnrandomsmith2": "I now think this may be some OS X specific issue, because yara 2.1 on Ubuntu seems to exhibit the correct behavior (On Mac OS X yara just returns immediately)\n. ",
    "joesecurity": "I am using the latest release, thanks for pointing it out!\n. ",
    "a0rtega": "Forget about \"sizeof * 2\" sentence I said, just had a look at strcmp_w.\n. This also affects to jumps inside groups. Also, making a group optional no longer possible, for example:\nConsider the following opcodes:\n[0x0041eeb0]> pd 20\n            ;-- main:\n            ;-- main:\n            0x0041eeb0      4157           push r15\n            0x0041eeb2      4156           push r14\n            0x0041eeb4      4155           push r13\n            0x0041eeb6      4154           push r12\n            0x0041eeb8      55             push rbp\n            0x0041eeb9      53             push rbx\n            0x0041eeba      4881ec380100.  sub rsp, 0x138\nLets say that I want to match the first \"push\" instructions, but in some binaries, one of them is missing. In yara 3.4.0 I would write a signature like:\nrule TestRule\n{\n    strings:\n        $string1 = {41 57 41 56 ( [0] | 41 55 ) 41 54}\n    condition:\n        any of them\n}\nSo the opcodes 41 55 (push r13) are optional. The new restriction in yara 3.5.0 makes this string invalid.. ",
    "moritzkroll": "@a0rtega: You were right about the \"sizeof * 2\", I added it to my version of the fix :) You weren't by chance looking at the same Tinba sample like me?\nBut also the pointer has to be corrected. We have to ensure, that the strcmp_w call on version_info->Key will be valid. Thus the check has to be\nif (!fits_in_pe(pe, version_info->Key, sizeof(\"VS_VERSION_INFO\") * 2))\nSame for the other strcmp_w call, of course.\n. This is a more complete fix for https://github.com/plusvic/yara/pull/254\n. ",
    "ckane": "For my particular application, splitting the strings into separate rules is likely a no-go. I'll try increasing the stack size, as I have \"all the RAM\" on the environment doing the work, and see what that nets me. Just curious however, are you aware as to whether there's a ceiling to the stack size? In one case I am seeing over 200,000+ strings in a single rule.\nFrom your description of the implementation, it sounds to me like this is a per-rule limit, though? Is there perhaps a way to provide a command-line argument to modify this at run-time?\n. Ok I set the stack size to 800000 and that seems to work. However, if I bump it to 1048576 (my first attempt before dropping incrementally to lower sizes), I get a seg fault:\n```\nProgram received signal SIGSEGV, Segmentation fault.\n0x000000000043159b in yr_execute_code (rules=, \n    context=, \n    timeout=, \n    start_time=) at exec.c:130\n130     {\n(gdb) bt\n0  0x000000000043159b in yr_execute_code (rules=,\ncontext=<error reading variable: Cannot access memory at address 0x7fffff7fd590>, \ntimeout=<error reading variable: Cannot access memory at address 0x7fffff7fd58c>, \nstart_time=<error reading variable: Cannot access memory at address 0x7fffff7fd580>) at exec.c:130\n\n1  0x0000000000413f19 in yr_rules_scan_mem_blocks (rules=0x655010, block=0x0, flags=0, callback=0x403c99 , user_data=0x7fffffffe17d, timeout=1000000)\nat rules.c:425\n\n2  0x0000000000414189 in yr_rules_scan_mem (rules=0x655010, buffer=0x7ffff7f2e000 \"\\177ELF\\002\\001\\001\", buffer_size=692295, flags=0,\ncallback=0x403c99 <callback>, user_data=0x7fffffffe17d, timeout=1000000) at rules.c:515\n\n3  0x00000000004141eb in yr_rules_scan_file (rules=0x655010, filename=0x7fffffffe17d \"yara\", flags=0, callback=0x403c99 , user_data=0x7fffffffe17d,\ntimeout=1000000) at rules.c:540\n\n4  0x0000000000404880 in main (argc=2, argv=0x7fffffffde98) at yara.c:1043\n(gdb) \n```\nSo for the time being it would seem that the lower number will work for my purposes, although the size of my dataset only increases with every passing month, so at some point I'll probably end up hitting the wall again.\nThanks for the quick response and work-around.\n. So I suspect this has something to do with how the compiler allocates space on the stack. In the yr_execute_code(...) function, stack is a local stack-allocated array variable sized at STACK_SIZE*sizeof(union STACK_ITEM). I wonder if this is a matter of one of the stack-smashing-protections or event RLIMIT_STACK getting in the way...though it is an odd way to fail.\nI tried -fno-stack-protector and it still failed.\nThen I just converted:\nunion STACK_ITEM stack[STACK_SIZE];\nTo:\nunion STACK_ITEM *stack;\nin order to allocate it on the heap instead, and of course added calloc(STACK_SIZE, sizeof(union STACK_ITEM)) / free(stack) in the places where it belongs in the function. Making that change makes the crash go away, and I doubt that there's any significant performance penalty. On a good note, as well, that change probably could eliminate a potential future (but untested) vulnerability vector for a piece of software that's widely known to be adopted by the world's security community, and who's purpose is to flow \"untrusted\" and \"suspected attack\" data through a complicated pipeline of C code.\n. That would have the additional benefit of enabling the stack-size to be converted into a run-time tunable.\n. ```\n--- libyara/exec.c.old  2015-02-19 23:33:52.494000000 -0500\n+++ libyara/exec.c      2015-02-19 23:34:06.263000000 -0500\n@@ -133,7 +133,7 @@\n   int32_t sp = 0;\n   uint8_t* ip = rules->code_start;\n\nunion STACK_ITEM stack[STACK_SIZE];\n\nunion STACK_ITEM *stack;\n   union STACK_ITEM r1;\n   union STACK_ITEM r2;\n   union STACK_ITEM r3;\n@@ -156,6 +156,8 @@\n   clock_t start = clock();\n   #endif\n\n\nstack = calloc(STACK_SIZE, sizeof(union STACK_ITEM));\n+\n   while(1)\n   {\n     switch(*ip)\n@@ -164,6 +166,7 @@\n         // When the halt instruction is reached the stack\n         // should be empty.\n         assert(sp == 0);\n\n\nfree(stack);\n         return ERROR_SUCCESS;\ncase OP_PUSH:\n@@ -1043,8 +1046,10 @@\nif (++cycle == 10)\n   {\n-        if (difftime(time(NULL), start_time) > timeout)\n+        if (difftime(time(NULL), start_time) > timeout) {\n+          free(stack);\n       return ERROR_SCAN_TIMEOUT;\n+        }\n cycle = 0;\n\n}\n@@ -1056,5 +1061,6 @@\n   // After executing the code the stack should be empty.\n   assert(sp == 0);\n\n\nfree(stack);\n   return ERROR_SUCCESS;\n }\n```\n. Yeah I'll run some tests on my end and use the yr_* versions like you suggested. Might also take a stab at cmdline option... all dependent upon what other work I need to procrastinate on.\n. I'd probably suggest moving stack into the YR_CONTEXT struct, in that event and initialize it in libyara/rules.c where needed, enabling fewer malloc/free cycles and a cleaner approach to memory management than my first version above. Intuitively the \"stack\" following around the execution context would probably be the expected behavior to a new observer.\n. Cool - I'll work on a patch this weekend, time permitting\n. I was concerned about that too, and was thinking maybe it would make sense to put this, as well as the timeout argument into a args/config struct that then has its pointer passed into init and runtime functions that use it to modify behavior.\n. Then this would be a good place to stick future modifications of this nature without breaking API.\n. Ok @plusvic I've rewritten the stack size logic to implement a global config array in libyara.c that could potentially be extended for other purposes in the future, and I implemented the get/set API as described above. Could you take a look and tell me if this new thing is what you had in mind? Hoping to get it considered for inclusion in 3.5.0.\n. This seems ready for review now\n. Sounds good, done!\n. \n\n",
    "ghost": "is the weekend terminated? or this issue is fixed in another way? I still have it today.. I think I'm on the master branch of this repo.\nyara tells: 3.5.0\n. Sorry for the wait. I think I figured out where core dumps are located :)\nI uploaded the core dump on my website: https://echo.rip/downloads/core.yara.1000.b435b42205bb462ca7664b3f07a68e6a.4849.1471359155000000000000.lz4\nPlease notify me when you've obtained the file so I can remove it from my webserver.\n. Arch Linux. Could I help you in any other way?\n. Do you  mean converted Yara rules?\n. It's very big ~30 MB, mega link: https://mega.nz/#!sUB3hAoJ!vT3zGQ17U3MyiM-sNhH19XNINi75wkvrr2EKsX3RcIQ\nYara and yara-python work fine with small amount of rules, if I combine like this one, I'll get errors.\n. Aaha, I think I made mistake, one rule file must contain only one rule. \nOh, sorry. my mistake.\n. yea its possible with CV_INFO_PDB70/20 :(, will someone do it? probs :D . yes, windows 10. It works good on file names, but it stucks on processes and the python CPU usage is always around 25%. ```\nimport yara\nimport sys\nrule = yara.compile(filepath=sys.argv[1])\nm = rule.match(pid=int(sys.argv[2]))\nprint(m)\n```\n```\nrule ExampleRule\n{\n    strings:\n        $my_text_string = \"AAAAAA\"\ncondition:\n    $my_text_string\n\n}\n```\n```\nC:\\Users\\User\\Desktop>python y.py test.yar 7560\nTraceback (most recent call last):\n  File \"y.py\", line 6, in \n    m = rule.match(pid=int(sys.argv[2]))\n  File \"C:\\Users\\User\\AppData\\Roaming\\Python\\Python36\\site-packages\\yara\\rules.py\", line 354, in match\n  File \"C:\\Users\\User\\AppData\\Roaming\\Python\\Python36\\site-packages\\yara\\rules.py\", line 326, in match_proc\n  File \"C:\\Users\\User\\AppData\\Roaming\\Python\\Python36\\site-packages\\yara\\rules.py\", line 179, in match\n    fnc(*args)\n  File \"C:\\Users\\User\\AppData\\Roaming\\Python\\Python36\\site-packages\\yara\\libyara_wrapper.py\", line 570, in yr_scan_proc\nyara.libyara_wrapper.YaraMatchError: Not enough memory\nC:\\Users\\User\\Desktop>pip show yara-python\nName: yara-python\nVersion: 3.7.0\nSummary: Python interface for YARA\nHome-page: https://github.com/VirusTotal/yara-python\nAuthor: Victor M. Alvarez\nAuthor-email: plusvic@gmail.com;vmalvarez@virustotal.com\nLicense: Apache 2.0\nLocation: c:\\users\\user\\appdata\\local\\programs\\python\\python36\\lib\\site-packages\nRequires:\nC:\\Users\\User\\Desktop>python --version\nPython 3.6.3\n```. it is yara-python related, opened there.. ",
    "axqd": "+1. Same here. I have to change the order of '#include' to fix it.\n. console\n$ nm libyara.so | grep -i exit\n                 U exit@@GLIBC_2.2.5\n$ nm libyara.so.latest_stable_flex | grep -i exit\n$\n. Thanks. I just noticed, except for exit() calls, there are also abort() from assert(). Now not sure how to deal with that. I can disable the whole Yara feature instead of crashing the daemon...\n. ",
    "shanehuntley": "+1. I rename to yr_min and yr_max which might be the cleanest solution and will stop the next person trying to link to C++ hitting the same errors.\n. ",
    "radare": "No, that looks good to me. Thanks\n\nOn 06 May 2015, at 13:08, Victor M. Alvarez notifications@github.com wrote:\nThe command-line tool have the -s option which prints the matching strings and their offsets. Are you suggesting something else besides this option?\n\u2014\nReply to this email directly or view it on GitHub.\n. looks good to me for merging!. i think that modules should change to be correct. there\u2019s no sense to modify a project just to include an extension, those should be self contained in separate directories, without having to patch makefiles and they should be loaded dynamically too. it\u2019s pretty anoying to have different forks of yara just for each seaprate module just because its not included in master or in release or just because of testing.\n\nthe only reason for not supporting dynamically loaded modules is performance, but that shouldnt be a problem if people just use statically linked modules like they do right now. but this is probably a topic to discuss in a different thread not here\n\nOn 11 Aug 2017, at 18:39, Victor M. Alvarez notifications@github.com wrote:\nI just need to make some time for reviewing the PR, I did take a quick look\nand there's something I miss, which is making the inclusion of the\n\"macho\"module configurable at build time, just like \"dotnet\". The idea is\nthat new modules are off by default with, and once they are tested enough\nin the wild they are enabled by default.\nOn Fri, Aug 11, 2017 at 6:28 PM, Sergi \u00c0lvarez i Capilla \nnotifications@github.com wrote:\n\n@plusvic https://github.com/plusvic ? there are tons of prs that lgtm\nand are green for a long time, anything missing to merge?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/VirusTotal/yara/pull/617#issuecomment-321858721, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AALKmZsxGv94mjYLaR5x3nHu4_F5oBaYks5sXIExgaJpZM4MUuJ8\n.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub https://github.com/VirusTotal/yara/pull/617#issuecomment-321861133, or mute the thread https://github.com/notifications/unsubscribe-auth/AA3-lqh8VgvAEVNNpzbSo2r3ugGs3Bxxks5sXIO8gaJpZM4MUuJ8.\n\n\n\n. No that doesn't works for me because i have several groups of yara rules and i want the user to use N of them of choice, so if i do what you want i have the following options:\n\ndistribute the sources (not an option)\nbuild all NxN combinations of all rules to match user's choice (impractical)\nrun yara N times (slow)\n\nIn fact r2 yara plugin can do that, i dont see what's the limitation in yara to not do so.. thanks!. here's the code of spp https://github.com/radare/spp\nfeel free to use it and abuse it. If you use Fix # the issue is closed automatically. You should always construct the integer values by applying or operations on the bytes directly. You can ifdef assuming a host and target endian, but compilers should be smart enough to optimize those cases if you use some generic code for this.\nYou can have a look at the r_endian.h we use in radare2, to get an idea about the primitives you'll need and how to use them. it's a good code practice, but consistency across the project makes sense. this change should be proposed across the whole project, so it fits better in a separate PR.. did you tested this code with any mach0 kernel or module which use 64bit addresses to see if it behaves correctly? probably an & -1LL would remove that undefined behaviour. ",
    "vient": "I don't understand how external variable can help here, please explain if you know.\n. Oh, it is a solution of course, but I'm working on Windows from cmd. Maybe it's time to try cygwin or mingw console. Thanks!\n. ",
    "gwillem": "@marnao's solution is not very performant when scanning terabytes of customer files, due to yara startup and compile overhead per file.\n. More profit when filename is available as condition: you can flag files with unexpected content. For example, <?php in an image file.\n. Thanks for the Magick suggestion! Caveat: not all image-disguised PHP malware has an actual image byte header (just plain PHP). \n. @maxvonhippel yes, but at a big performance cost: forking yara, and loading all the rules for every file. Hosting providers usually have billions of (mostly small) files.. Here's a quick benchmark:\n```\n$ time yara -r rules.yar magento-2.1.3\nreal    0m4.946s\nuser    0m3.036s\nsys 0m1.024s\n$ time (find magento-2.1.3 -type f | xargs -n1 yara rules.yar)\nreal    1m16.679s\nuser    0m1.812s\nsys 0m2.624s\n$ yarac rules.yar rules.yarac\n$ time (find magento-2.1.3 -type f | xargs -n1 yara rules.yarac)\nreal    0m41.485s\nuser    0m0.584s\nsys 0m2.072s\n```\nSo even with precompiled yara rules, launching a yara executable per file is still 8x slower on a typical web application (Magento). . @wxsBSD yup! Sample Python scanner:\n```\ntime python3 scan.py -r rules.yar magento-2.1.3\nreal    0m4.104s\nuser    0m3.384s\nsys 0m0.712s\n```\nIt's even faster ;). Use python-yara for that. See also #550 and a sample implementation. Thanks! That's what I do now in Python, but its 25% slower than Yara's built-in hash module (for single hashes, that is).\npython\nwith open(path, 'rb') as fh:\n  data = fh.read()\nhash = hashlib.sha1(data).hexdigest()\nif hash in whitelist:\n return False\nrules.match(data=data)\nSo I was hoping it would be possible that Yara would memoize the results of its hash lookups (or another cache mechanism).. Awesome, thank you!. ",
    "bmagistro": "There is what I would call related work going on in #350.  I tend agree with the points made in #202 in that a filename may not always apply, such as when scanning blocks of memory.\nI would also caution you about relying on the filename to identify what kind of file it is.  Microsoft seems to leverage the extension a lot.  While it may be useful as a user or if doing malware analysis (ex. this one always drops file named Y), I would not depend on it to identify the type of file.  Coming from a primarily *nix environment, file extensions are more of a \"convenience\" than a required item for the system to understand what type of file it is.  If trying to do what you suggest of looking for <?php in an image file, take a look at the Magic Module which you can call with mime_type and say  something like if == /^image\\// && any of $unwanted_vars.\n. I have hit this issue as well and will likely just be making multiple copies of the rules.  Is there any chance the yr_rules_scan_* functions can be extended to include an (optional) variable list?  Under the hood it may be possible to keep the calls the same and point this new argument to the rules/compiler structure's external variable list when it isn't present.  The thinking being this might avoid breaking existing code while allowing an additional path to be added where variables could be defined per scan call.  Yes this means that all variables would need to be defined at all times even if not in use but I see this as a issue for the caller and not an issue for yara to solve.\nThoughts?  If this sounds like a possible approach I'd be willing to try and code some of this up but not sure how successful I'd be.\n. @hillu I think I have something, I'm just now starting to test things using the new functions and providing the vars to the scan function.\nEdit: It doesn't work (yet), it seems to work fine when not trying to pass an ext to the scan function, passing it to the scan function doesn't seem to match/apply.  This is going to take a bit longer, it isn't as straight forward as I thought.\n. We debated trying to do something like this but decided against it on the assumption rules likely wouldn't have that many offset/length variations.  There was also the part of figuring out how to implement the hash table.  Thanks for putting something together and pulling it into the main branch!\n. That is correct about replacing all of them, the case of a union of the two did not occur to me when coming up with this solution.  I don't disagree on the additional structure - it did feel a little clunky, but it was what made sense to me at the time.  In that regard being able to override only select variables does make sense.\nI was under the impression that you could not define a new variable with \"yr_rules_define__\", as it returns \"ERROR_INVALID_ARGUMENT\" today if it doesn't already exist/wasn't added by \"yr_compiler_define___variable\" when building the rule set.\nThe rules structure is still shared by all threads, you would need something else to make that association.  Going off your description, perhaps expanding \"yr_external_variable\" to include \"tidx\" to be -1 or any thread else value of \"tidx\" then when calling scan_mem_blocks the loop could pull in any that are -1 and any that match that thread id.  There would need to be an ordering so that you get all -1 first followed by the overrides. Is that more along the lines of what you were thinking?\n. I was looking at tidx the other day and wanted to wait till someone could chime in.  That is exactly what I thought I saw but wanted confirmation.\nWhat I am thinking about now is adding the actual thread id or -1 for global to YR_EXTERNAL_VARIABLE.  If you call yr_rules_define_*_variable it would set thread to -1.  If you call yr_rules_define_*_variable_override it would use the thread id, this means you can't build up the overrides in a different thread than the one that is going to call scan.  When it goes through yr_rules_scan_mem_blocks it would load all globals then apply any thread specific overrides.  The call to 'yr_finalize_threadwould be updated to include looping through and removing obsolete variables (don't remember if there is/was a lock on rules to support this).  Thoughts?\n. I think I am going to try and start on this using the thread id (posix thread idpthread_self) and see where things go.  I think the two (three?) possible solutions that don't involve a per thread rule set are listed (at least the ones I can think of).\n. Finally getting back to working on this and think I'm missing something withyr_arena_*.  TheYR_EXTERNAL_VARIABLE` starts as an arena and when calling compile, the base address is type casted and stored.  What I was envisioning was being able to append another entry to this structure when doing the override but it's not clear to me how (not sure it's even possible) to append another entry after calling compile without changing what is stored to the arena.\n. I believe I got this working.  If you guys say okay, I'll update the docs and add those into this pr.\n. Any updates/plans on this or #559 being merged in?. @plusvic  regarding the implementation\n\nIf you want to add another variable it does require iterating over a potentially long list of variables.  There was one version committed that allowed each thread to have their own structure but development moved away from that due to it having an additional structure that would need to be in the api and exposed.  See comments around Oct 16, but it had several issues related to its implementation.\nThis point is not correct.  External variables defined either in the compiled rule set or using the yr_compiler_define_x_variable are stored in external.  Variables defined by the yr_rules_define_local_x_variable are stored in external_overrides.  Since they share the same variable structure, and while not required, variables defined with yr_compiler_define_x_variable insert that thread's id but the id is never checked when iterating through.  I do see where having that line in there could cause some confusion.  Reference libyara/rules.c line 401 (original) or 808 (new) in the diff.  You will then see a second section that loads in the overrides on top of the global external variables leaving you with the ability to have a variable shared across all threads.\nI agree the code between yr_rules_define_local_x_variable is very similar, the delta is in the variable types and if a malloc call is needed (strings).  It might be possible to abstract that out a little and make it cleaner.  At the time of writing, I was after function.\n\nRegarding comments from @hillu \n\nI agree with you on point 1.  My thinking was the whole point of creating thread local variables was that you needed unique sets between threads.  For my use case, there is/was never a scenario where I would create one set of variables and use that same set in threads 1 and 2.  There might be some variables shared but they would be defined globally and not be overridden.\nFor point 2, this is one that I struggle with...Yara is a C based library/tool so use of threads and associated ids doesn't seem unreasonable to me.  I guess I would want to know/understand when Yara is being used in Go or Python, are threads even in play?  I know there are wrappers around Yara for various languages but don't know to what extent if any threads are in play when they are being used.  All of my use has been in a C/C++ context.\n\nAnother solution might be to allow the caller to pass in an identifier to the yr_rules_define_local_x_variable and associated scan calls.  Going from memory that would look closer to what @hillu provided in #559 and allow for the same override set to be used in multiple places.  The posix thread id could not be used in that scenario as there is a specific compare function that should be used.  What it doesn't allow for (and neither did this implementation) was variable1 to be used in in contexts 2 and 3 but not 4, you would need to define it in both places.  When using this additional parameter, it would be dependent upon the user to keep these ids used to link variable lists and scans consistent/coordinated.\nMaybe the right answer is a mix of the two approaches.  Expose the option to provide an arbitrary external var index, what @hillu calls a context.  If one isn't provided it defaults to the posix thread id.  On the scan calls if the context isn't provided, it defaults to using the posix thread compare function else it does a numerical compare of the values or skips all override checks if the value is null.   This should allow either approach to work.. I haven't had time to look at coroutines or fibers, but with that aspect being a driving factor I'm okay with closing this one as not compatible with other aspects of the project.\nI guess I'll have to spend a little more time looking at #559.. ",
    "nyx0": "There is the same problem on ARM.\n. Sure -> http://we.tl/8nf2cbyZOD (d188ecabd3219b2df1318f3b0385c20a1569cc77) you will find the yara rules and 3 binaries for MIPS, x86 and ARM (ls binary)\n. @gljiva Can you share the file please?\n. I also add \"new\" architectures to support according to @wxsBSD in #271 (MIPS RS3 LE, PPC, PPC64, AARCH64).\nFor the big endian issue, I wrote the following function but I don't know if it's the best way to do that:\n``` C\nint force_litle(uint8_t elf_machine){\n  elf_ident_t* elf_ident;\nif (elf_ident->data == ELF_DATA_2LSB)\n    return elf_machine;\n  else if (elf_ident->data == ELF_DATA_2MSB)\n    return elf_machine >> 8;\n  else\n    return elf_machine;\n}\n```\n. ",
    "fabaff": "It could be that this is related to #267.\n. ",
    "pertesi": "Ok, thank you so much for the answer.\n2015-03-24 11:00 GMT+01:00 Victor M. Alvarez notifications@github.com:\n\nThis is not actually a bug. All the matches for a given string are always\nprinted, even if they are outside the range specified in the condition, or\nthe condition is not satisfied for any other reason. Think in the\ncondition: not $a. Should $a be printed if present in the file?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/plusvic/yara/issues/290#issuecomment-85428842.\n. \n",
    "JusticeRage": "Great !\nThank you very much!\n. Thanks! I agree completely on the principle,but some of my rules are generated automatically from external sources, so I don't have full control over their quality.\nThis is a case where #645 would be preferable.. ",
    "GumpSun": "I installed moloch,but how to use capture,I am learning moloch.\n. ",
    "Grazfather": "The issue is apparently partially because the yara recipe installs the python module -- Maybe it shouldn't. This is an issue for both people who use venvs and those that use python three.\n. yw\n. ",
    "plutec": "the last commits able to show the context of a match, for instance:\n```\n$ yara -c 3 rule.yar binary \na binary\nShowing 3 lines of context\n0x3:$a: hand\n0x0: 61 73 20 68 61 6E 64 20 6B 6A 6B 73 68 64 66 6B    a s   h a n d   k j k s h d f k \n0x10: 6A 73 68 64 66 6B 73 6A 68 64 66 6B 6A 73 68 64   j s h d f k s j h d f k j s h d \n0x20: 66 6B 6A 73 68 64 66 6B 6A 73 64 68 66 6B 6A 73   f k j s h d f k j s d h f k j s \n0xa2:$a: hand\n0x8c: 6A 64 66 68 6B 6A 73 68 64 66 6B 6A 73 64 68 66   j d f h k j s h d f k j s d h f \n0x9c: 6B 6A 68 73 64 66 68 61 6E 64 6B 6A 68 73 64 66   k j h s d f h a n d k j h s d f \n0xac: 6B 6A 68 73 64 66 6B 6A 68 73 64 66 6B 6A 68 73   k j h s d f k j h s d f k j h s \n0x114:$a: hand\n0xe9: 64 66 6B 6A 68 73 64 66 6B 6A 73 68 64 66 6B 6A   d f k j h s d f k j s h d f k j \n0xf9: 68 73 64 66 6B 6A 68 73 64 66 6B 6A 68 73 64 66   h s d f k j h s d f k j h s d f \n0x109: 6B 6A 68 73 64 66 6B 6A 68 68 20 68 61 6E 64 0A  k j h s d f k j h h   h a n d . \n```\n. I tried to do another pull-requests but I could not in github. maybe I had a mistake, sorry.\nRegarding the context printing, you are right. I'll try to do another thing more efficient. And I'll make tests with processes. Thanks!\n. I fix the problem mapping and unmapping files. Now it only creates a mmap per file.\nFixed the problem for processes, now look for the block and print the context.\nAdded a function to free memory blocks created previously.\n. I think it will be fixed in the next release, when he generates the documentation for the new version.. ",
    "gowenfawr": "Yara is 3.4.0 (and I simply cannot believe I didn't put that in the initial report - sorry!)\nI just re-scanned the install docs and I did miss the step for building and installing the yara-python extension in the 3.4.0 source tree.  I performed those steps, and to be uptight did pip uninstall  yara and pip install yara, and now get a different error:\n$ yara-ctypes\nTraceback (most recent call last):\n  File \"/bin/yara-ctypes\", line 7, in <module>\n    from yara.cli import entry\nImportError: libyara.so.3: cannot open shared object file: No such file or directory\nThis appears to be because the yara-python build creates /usr/lib64/python2.7/site-packages/yara.so but the libraries installed by yara itself are under /usr/lib (non-64).\n$ ll /usr/lib/libyara*\n-rw-r--r--. 1 root root 553186 Jun 30 14:44 /usr/lib/libyara.a\n-rwxr-xr-x. 1 root root    924 Jun 30 14:44 /usr/lib/libyara.la\nlrwxrwxrwx. 1 root root     16 Jun 30 14:44 /usr/lib/libyara.so -> libyara.so.3.4.0\nlrwxrwxrwx. 1 root root     16 Jun 30 14:44 /usr/lib/libyara.so.3 -> libyara.so.3.4.0\n-rwxr-xr-x. 1 root root 318883 Jun 30 14:44 /usr/lib/libyara.so.3.4.0\n$ ll /usr/lib64/libyara*\nls: cannot access /usr/lib64/libyara*: No such file or directory\n$\nstrace output shows that it is indeed enumerating all the lib64 possibilities for finding libyara.so.3 but not the regular lib:\nopen(\"/lib64/tls/x86_64/libyara.so.3\", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)\nopen(\"/lib64/tls/libyara.so.3\", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)\nopen(\"/lib64/x86_64/libyara.so.3\", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)\nopen(\"/lib64/libyara.so.3\", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)\nopen(\"/usr/lib64/tls/x86_64/libyara.so.3\", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)\nopen(\"/usr/lib64/tls/libyara.so.3\", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)\nopen(\"/usr/lib64/x86_64/libyara.so.3\", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)\nopen(\"/usr/lib64/libyara.so.3\", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)\nwrite(2, \"libyara.so.3: cannot open shared\"..., 71) = 71\nDid I do something wrong to end up with the two portions of the install under different lib trees?  The 3.4.0 base build was a simple 'configure --prefix=/usr' and the yara-python build was the simple python setup.py build; sudo python setup.py install described in the documentation\n. Thank you - that resolves the problem.  I'm not sure where I got the idea that yara-ctypes was also required, but that's what was kicking me in the pants.  After following your instructions Volatility is running without errors.\nThank you!!!\n. ",
    "jhere": "Thank you for the prompt response. \n. Sorry, how do we go about retrieving wildcard containing strings in this case?\n. ",
    "radheshkrishnan": "I just complied again, removing old build directory all. The problem is gone now\n. ",
    "mgoffin": "As a side-thing for when iterators are in, is the path we are on a good path to continue? @wxsBSD and I have both discussed potential ways to optimize this, one which revolves around creating a tags arena and putting a hash table in it. Not sure if that's possible or even the right solution. Would you be able to point us in the right direction so we can plan ahead? :)\n. Curious if iterators have made their way into the code base so that we can revisit this feature?\n. ",
    "seanthegeek": "This was a Macports issue. It kept the old headers for some reason. Running `port uninstall yara fixed that. Now to figure out how to prevent that problem... \n. ",
    "rferreira": "Hey folks any chance this PR can get a review? \n. hey folks, for full disclosure that is not my patch, I'm just an interested party in its status :) \n. ",
    "p8a": "There is only one change required in yara.c to escape rules metadata when using external (out of process) yara execution.  Source is built using maven, has only one compile-time dependency and the bindings can be made available on one of the public maven repos (like maven central) so there will be no need for direct compilation.\nIt's up to the maintainer(s) to decide how to handle this, I'll make the necessary changes.\n. I've moved the bindings only into a separate repo here: https://github.com/papostolescu/yara-java\nThere is a separate pull request for the patch required to parse metadata output: https://github.com/plusvic/yara/pull/345\n. ",
    "scudette": "Ok thanks, this solves the issue. A more helpful error message would be good but Im on my way now!\nThanks again.\n. ",
    "shibumi": "awesome thx!\n. ",
    "xdanx": "+1! I was just wondering if there are any updates on this feature? \n. ",
    "mylamour": "You can read dir and use yr_compiler_add_file  to add all rules, finally, you can load the whole dir rules. Also, you can use yara-python to load different  rules.  and this script maybe useful for you. https://github.com/Neo23x0/Loki/blob/master/loki.py. still use gyp, done.. ",
    "DigiAngel": "+1. ",
    "moofusecurity": "+1 for JSON\n. ",
    "79617261": "+1 to JSON too\n. Any idea when this is coming into the main branch?\n. ",
    "msuvajac": "That's right. This is just incremental change that exposes serialized module data in a convenient way. Once exposed, it's up to library user to do something with it. That includes yara-python or any other \"user\" of libyara.\n. I agree that would be even better solution. I've made these changes just now.\n. ",
    "intelemetry": "Please mention: libjansson-dev, libmagic-dev for cuckoo and magic configure.sh flags \nPlease mention: libssl-dev for openssl (--with-crypto) flag \nThis is for debian/ubuntu and derivative systems. \n. Please mention flex as dependency. \n. ",
    "Themercee": "Thanks @intelemetry for talking about these dependencies, I got problem installing it because they were missing\n. ",
    "Dx3webs": "that was my 1st thought.. I reinstalled with the above settings but to no avail\n. recompiling after installing libssl-dev did the trick here also\nthanks\n. ",
    "twpDone": "I had the same problem, installing libssl-dev fixed it for me.\nAs specified in the issue 363\n\nPlease mention: libssl-dev for openssl (--with-crypto) flag\nThis is for debian/ubuntu and derivative systems. \n\nMaybe yara should use the non-dev version or specify  libssl-dev as requirement.\n. ",
    "2xyo": "@plusvic:  does this fix should also complains with anonymous strings?\nBecause there is maybe a regression according to nbs-system/php-malware-finder#14.\n. ",
    "Chandlr": "ah ok\n. Sounds good :)\n. Do you have some antivirus causing issues ?\nMaybe Win10 or something.. dont know why this and DEF should't work.\nYeh i meant to have 0x154\nhere is the sig i use:\nrule FSG200 : bart xt\n{\n    meta:\n        author=\"pusher\"\n        date = \"2015-11\"\n    strings:\n        //if this is modified its not really FSG is it ?\n        $a0 = { 4B 45 52 4E 45 4C 33 32 2E 64 6C 6C 00 }\n    condition:\n                    //Time_Date_Stamp\n        ($a0 at 0x1F2) and (pe.timestamp == 0x21475346) and (pe.entry_point == 0x154)\n}\n. Iam on Win7 Ultimate x64 works fine here\nwell the offset is: 220\nand \n00400220 | BE A8 01 40 00           | mov esi,def.4001A8                      | ;4001A8:\".def\"\nin x64dbg\ni dont know what offset yara gives tho\n. Sorry i noticed with yara gui that they had lower than 7.0 entropy\nthey are vmprotectsdk protected files. So the section itself was higher but \n\"(math.entropy(0, filesize)\" is not\n. ",
    "mrexodia": "hello,\nI recommend doing this again but then without commiting log files and also without changing the existing projects and solution.\n. this should do it, a rules file like this works perfectly!\n```\nimport \"pe\"\nrule MSVC2013\n{\nmeta:\n    author = \"mrexodia\"\ncondition:\n    pe.rich_signature.version(21005) and\n    pe.rich_signature.version(30319, 158) and\n    pe.rich_signature.toolid(225) and\n    pe.rich_signature.toolid(225, 21005)\n}\n```\nPS please also take a look at my pull request #376 I fixed building on Windows with VS2010.\n. @Wesley Shields Not really, it is just part of a version number in\ndevenv.exe or cl.exe (and various other tools). It is very undocumented so\nI'd advise against constants (rule authors should do that).\nOn Fri, 27 Nov 2015 at 21:58, Wesley Shields notifications@github.com\nwrote:\n\nCan we add constants here to make things nicer? I am guessing 21005 means\nsomething specific about a version of VS?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/plusvic/yara/pull/374#issuecomment-160202950.\n. @keithjjones that's why I didn't update the project/solution files (I compile with VS2010 which are supported by the .lib files). This just fixes the code issues for compiling with Visual Studio in general.\n\nBinaries on Git is always controversial but if you have the right visual studio version it is perfect :+1:\n. Oh, I saw you asked my opinion on project files, I believe yara should migrate to CMake (mainly because it is less maintaining with all the different platforms involved) but that decision is up to @plusvic and comes with other problems\n. I disagree with this one mainly because of the bloat but I cheer for a vs13 (v120_xp) one! :+1:\n. Adding and removing binaries in commits is the kind of bloat that I would\nnever accept in open source projects I manage. I understand you need a\nworking tool chain but as a manager I wouldn't accept this pull request :)\nWhen I'm back home I'll manually merge all the things from this (and other)\npull requests related to the Windows tool chain and provide a new pull\nrequest that I would merge myself.\nOn Sun, 21 Feb 2016 at 03:01, Kyle Reed notifications@github.com wrote:\n\n407 https://github.com/plusvic/yara/pull/407 included fixes for the\nmerge conflicts.\n@mrexodia https://github.com/mrexodia i hear you on the bloat, but tool\nchain selection should be first based on the quality and safety of the\noutput, second on availability of the tools and then other considerations\nlike bloat.\nThe *ix people have it easy. On Windows the compiler improvements are\nunfortunately tied to VS and free tool availability is usually limited to\nLatest - 1. 2013 would work for me, but 2015 CE is really going to be the\ntool going forward for the next few years.\nAll that said, I mainly care that the project is easily buildable on\nWindows to encourage contribution. The pthread issue alone was almost\nenough to turn me away (thanks for the impl).\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/plusvic/yara/pull/377#issuecomment-186719480.\n. https://github.com/keithjjones/yara/commit/26ebc379fe235f12daed7d5b114a5563af0901c5\n\nAnd\nhttps://github.com/keithjjones/yara/commit/e2ad6299e8c1e038ca3d293c387932d6977d4b4f\n. You can delete the commits but it's not pretty :) that's why I suggest\nmanually merging these commits and do a new pull request.\nOn Sun, 21 Feb 2016 at 15:50, keithjjones notifications@github.com wrote:\n\n@mrexodia https://github.com/mrexodia Ok, you want to get rid of\ncommits you asked me to do to get rid of files? I don't understand.\nIf there is a way to merge them into a prior commit so the files never\nshow up, please tell me how and I'd be happy to do it. I do not know of a\nway to do it.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/plusvic/yara/pull/377#issuecomment-186834572.\n. I don't know anymore lol... I think visual studio 2010 is a great tool\nchain and it's easy enough to convert the solution and projects to a new\nvisual studio version without having to change anything in the current\nrepository (apart from the few gitignore and compile error changes I did).\n\nAs for the static libraries, just slightly modify the project files to\ninclude those from an external directory no need to delete or replace any\nof the current ones.\nMy suggestion would be if you want to compile this project that you include\nthis repo in a submodule and have your own solution and static libraries in\nthe parent repo.\nOn Sun, 21 Feb 2016 at 18:49, Kyle Reed notifications@github.com wrote:\n\n@keithjjones https://github.com/keithjjones @mrexodia\nhttps://github.com/mrexodia\nSo I'm clear, the bloat that's the problem with this PR is because of the\ndeleted lib files, not because of the newly checked in lib files.\nI'm going to pull master again and then manually repatch the code changes\nand include the new lib files.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/plusvic/yara/pull/377#issuecomment-186871913.\n. I think manually changing paths to a few lib files isn't a great hassle.\nYou just need the compiled files for your favorite visual studio version. I\nwasn't suggesting adding submodules in this repository. I use Yara inside\nthe x64dbg repository and to compile I would have my own vs projects.\nOn Sun, 21 Feb 2016 at 19:03, Kyle Reed notifications@github.com wrote:\nVS2010 is great. VS2015 is great. The problem is that getting the 2010\ntools is becoming a pain.\nThoughts on pulling out all of the VS stuff into submodules? Would having\na submodule for VS2010 and another for VS2015 be terrible? In this project\nI'd add a readme to fetch the appropriate submodule?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/plusvic/yara/pull/377#issuecomment-186875130.\n. To be honest I didn't really test much. You can use GetHandleInformation to\ncheck if the handle is valid before closing it, that should make the\nexceptions go away. Anyways just ignore those exceptions, they only happen\nunder a debugger anyway.\n\nThere might be an invalid call to mutex_destroy see the callstack. Another\nproblem might be that init doesn't return a valid mutex handle somehow.\nOn Sun, 21 Feb 2016 at 19:13, Kyle Reed notifications@github.com wrote:\n\nOff this topic but related to the change to pthreads, I'm getting an\ninvalid handle exception in the debugger for this call\nint pthread_mutex_destroy(pthread_mutex_t *mutex)\n {\n    return CloseHandle(mutex) == TRUE ? 0 : -1;\n }\nHave you seen this @mrexodia https://github.com/mrexodia ?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/plusvic/yara/pull/377#issuecomment-186876051.\n. Possibly close is called multiple times?\nOn Sun, 21 Feb 2016 at 19:20, Kyle Reed notifications@github.com wrote:\nThe handle looks like a valid handle (pointer with a small value). I'll\ndig in a little more.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/plusvic/yara/pull/377#issuecomment-186879168.\n. Fixed the pmutex code:\n\n```\nifndef HAVE_PTHREAD\nifdef _WIN32\ntypedef HANDLE pthread_mutex_t;\nunsigned long pthread_self()\n{\n    return GetCurrentThreadId();\n}\nint pthread_mutex_init(pthread_mutex_t mutex, void attr)\n{\n    mutex = CreateSemaphore(NULL, 1, 1, NULL);\n    return mutex == NULL;\n}\nint pthread_mutex_destroy(pthread_mutex_t *mutex)\n{\n    BOOL result;\nresult = CloseHandle(*mutex);\n*mutex = NULL;\nreturn result == TRUE ? 0 : -1;\n\n}\nint pthread_mutex_lock(pthread_mutex_t mutex)\n{\n    return WaitForSingleObject(mutex, INFINITE) == WAIT_OBJECT_0 ? 0 : -1;\n}\nint pthread_mutex_unlock(pthread_mutex_t mutex)\n{\n    return ReleaseSemaphore(mutex, 1, NULL) == TRUE ? 0 : -1;\n}\nendif\nendif\n```\n. I created a new pull request that can be merged regardless of what will happen with the visual studio projects #408 (basically your step 1)\n. @plusvic please be so kind to merge my pr that addresses compiler errors on Windows. I think once you have those out of the way it becomes a no brainer to slam some libraries in there by yourself. Implementing pthread_mutex all the time is kind of annoying...\n. I think the only way is to keep track of the highest raw offset and determine the location of the overlay that way.\nHere is some code that works for it. https://github.com/x64dbg/GleeBug/blob/master/GleeBug/Static.Pe.cpp#L225\n. I implemented your suggestions and I also added a toolid function. Checking ID/version pairs can also be done, but how would that function look? rich_signature.toolversion maybe? I thought about optional parameters too. Maybe something like rich_signature.version(version, toolid [optional) and rich_signature.toolid(toolid, version [optional]?\n. Alright, I will try to do it later this evening.\nOn Thu, 26 Nov 2015 at 19:43, Victor M. Alvarez notifications@github.com\nwrote:\n\nIn libyara/modules/pe.c\nhttps://github.com/plusvic/yara/pull/374#discussion_r46001914:\n\n@@ -1961,6 +1999,7 @@ begin_declarations;\n   declare_function(\"imports\", \"s\", \"i\", imports_dll);\n   declare_function(\"locale\", \"i\", \"i\", locale);\n   declare_function(\"language\", \"i\", \"i\", language);\n-  declare_function(\"rich_version\", \"i\", \"i\", rich_version);\n\nYes, a pair of functions like this:\nrich_signature.version(version, toolid [optional])\nrich_signature.toolid(toolid, version [optional])\nThis way you can check for any combination of toolid/version.\nThis would requiere actually four functions, two overloaded \"version\"\nfunctions and two overloaded \"toolid\" functions. I suggest writing a single\ninternal function receiving both a toolid and a version and accepting a\nspecial value as a wildcard for either toolid or version. The other 4\nfunctions could invoke the internal function.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/plusvic/yara/pull/374/files#r46001914.\n. \n",
    "keithjjones": "The whole purpose of updating the project to VS2015 changes the existing projects and solutions.  You have to change them to the 2015 tools to compile with VS2015.  How do you propose keeping the projects and solutions the same and being able to compile them in VS2015?\n. I am closing this and sending a new pull request without the logs.  If you want to let me know your ideas about the project and solution files, please do.\n. Pull request #375 has been submitted.\n. @mrexodia are you suggesting my PR has unnecessary bloat in it?  Or that VS2015 has unnecessary bloat?  If you are referring to the bloat regarding the binary libraries in the Yara source code, that was something I pointed out on your pull request, and you agreed, and I suggested that they be removed.  You suggested CMake, and I think that is a good idea.  I only included these libraries to be consistent with the prior code base.  I wouldn't put binary libraries like this in the repositories I manage as well, but I do not manage this repository so I believe I only pushed consistent changes that mirrored the structure of this repository.\n. @mrexodia Ok, you want to get rid of commits where you asked me to do to get rid of files?  I don't understand.\nIf there is a way to merge them into a prior commit so the files never show up, please tell me how and I'd be happy to do it.  I do not know of a way to do it.  I wish I did.\n. @mrexodia What do you mean by \"manually\"?   Is there a way to do that with Git, or do you mean really manually using a text editor?\n. @kallanreed I don't know that CMake would take care of the problem, but it would be easier to reference the external libraries.  \nThe existing libraries were compiled with VS2010, and they don't link with VS2015.\n. @kallanreed If you want to do that, that would be great.  If not, I can look at it later this week.  Thank you sir!\n. @kallanreed Sounds right to me.\n. The same could be said for legacy VS2010 files.  I think we all agree that putting dependency binary lib files in a repository isn't the best solution, but we can to be consistent with the original repository.  Therefore, that is why I included them... so other VS2015 people didn't have to compile them or wonder why they wouldn't link.\nI just simply want to load VS2015 and be able to compile it without a lot of fuss.  If we want it to be compatible and support older VS versions, that could be a different branch  or something.\n. Any way is fine with me as long as I don't have to do a big migration to VS2015 every time I pull from master.  There were more changes than simply changing library paths.  VS2010 won't be compatible with new projects forever, and it will be used less and less, so to me it makes more sense to move the project along as technology changes.  If legacy support is desired, and I'm not knocking the need for it, you could make that support a different part of the project on a case by case basis as needed by the users of that component or project.  This is where CMake would make more sense, because you could specify the version of solution to be created by CMake.  The only problem lies in the required binaries, which to me, should be compiled and linked separately by the developer rather than depending on what is in the repository, but I don't make the decisions here.  You could also just make different solution files for each version in different subdirectories with the required binary libraries.  That is how I have seen other projects deal with the issue.\nSubmodules, Branches, Forks, Subdirectories, whatever.  It all could work.  We just need to pick one and implement it.\n. @kallanreed Sounds like a great plan.  If I have time later this week to lend a hand, let me know if you need help.\n. Thanks\n. +1\nVS2015 community is free, and includes a lot more functionality in the free edition than prior versions.  It makes sense to upgrade.\n. :+1: \n. :+1: I'll give it a try this week.  Nice work!\n. @plusvic I played with LFS some.  It worked as advertised for me.  You shouldn't have too much trouble with it.  Have you thought about how you would like to handle supporting multiple versions of VS?\nThanks for a great tool!\n. @plusvic Sounds great.\n. I thought Nuget was mainly for .NET?  How does it work in this case?\n:+1: \n. That is pretty cool!  Thanks for teaching me something.\n. Apparently this PR has conflicts already.  Something must have changed since last night.\n. I was hoping this would make it into master at some point.\n. ",
    "jxb5151": "Rock on :)\n. ",
    "Northern-Lights": "I'm not able to reproduce this again - I think I made a mistake in what I was scanning.\nDisregard.\n. This should fix it: https://github.com/plusvic/yara/pull/392\n. There was also an issue where if a dict had a nested dict, then looking up a value (for an integer or something within the struct) that had not been set would cause a segfault because r2.o would be UNDEFINED in exec.c.  For example, the following was causing a segfault:\n```\nimport \"demo\"\nrule ddddemo {\ncondition:\n    demo.d1[\"abc\"].i1 == 5 and\n    demo.d2[\"def\"].i2 == 5 and\n    demo.d2[\"def\"].d2_2[\"ghi\"].i3 == 5 and\n    demo.d2[\"xyz\"].d2_2[\"abc\"].i3 > 1\n}\n```\nWhere demo.c had these lines:\nset_integer(5, module_object, \"d1[\\\"abc\\\"].i1\");\nset_integer(5, module_object, \"d2[\\\"def\\\"].i2\");\nset_integer(5, module_object, \"d2[\\\"def\\\"].d2_2[\\\"ghi\\\"].i3\");\nThe yara CLI util would segfault when checking the type of r2.o because was UNDEFINED.\nMy solution: also check for ensure_defined(r2); in exec.c in the OP_LOOKUP_DICT case.\nThe same applies to the array case.\n. Changes implemented.  Thanks for the suggestions!\n. ",
    "pombredanne": "@plusvic Thank you for chiming in. I guess you can close this then, unless a good would come up with some C-level unit tests suite. Thank you for yara and happy new year!\n. ",
    "campt": "Sure.  I\u2019ll post another pull request sometime next week.\n(Tracy) Camp\nBit9+CarbonBlack\nFrom: Victor M. Alvarez [mailto:notifications@github.com] \nSent: Friday, January 29, 2016 5:27 AM\nTo: plusvic/yara yara@noreply.github.com\nCc: Tracy Camp tcamp@bit9.com\nSubject: Re: [yara] DllCharacteristics and subsystem PE flags. (#398)\nThank you for contribution @campt https://github.com/campt . Would you mind adding this new feature to the documentation before I merge it into the master?\n\u2014\nReply to this email directly or view it on GitHub https://github.com/plusvic/yara/pull/398#issuecomment-176683373 .  https://github.com/notifications/beacon/AQIyR_F6Mi79zXkKZ-QOzsFRRqlzeS1Jks5pezYRgaJpZM4HNzaq.gif \n. CI - sure its great...  Anybody got any theories on why yacc would complain about a file not changed by my patch that it didn't complain about in the other 8 builds of the same source....?\nMaking all in libyara\n  YACC     grammar.c\n/Users/travis/build/VirusTotal/yara/libyara/grammar.y:115.14-22: syntax error, unexpected string, expecting =. ",
    "zavrac": "I improve detection of entry point also in ELF module.\n. I have some ELF binaries that contains only segments, not sections. These binaries are available at https://www.dropbox.com/sh/dinavl46emdndko/AACGxMH5blSMDRgW1foiF2nUa?dl=0\n. ",
    "Professor-plum": "Yes, that's exactly the error I'm seeing, I also believe it is an oversight. Thanks for looking up the signedness of the underlying type.\n. I can confirm the latest commit fixes the issue for us,  thank you!\n. ",
    "sebastianas": "clamav in 0.99 is using yara however they pulled a modified version of it into their source. Before the patch clamav's testsuite failed on sparc:\nhttps://buildd.debian.org/status/fetch.php?pkg=clamav&arch=sparc&ver=0.99%2Bdfsg-0%2Bdeb7u1&stamp=1455813120\nAfter the patch, it passed:\nhttps://buildd.debian.org/status/fetch.php?pkg=clamav&arch=sparc&ver=0.99%2Bdfsg-0%2Bdeb7u2&stamp=1456266227\nDebian's ARM buildd are ARM v7 or better so they don't the problem with loading garbage which means I can't tell if the testsuite would fail otherwise.\nIf you have a testsuite or something you want me to run on sparc to verify I would try to give it a try.\n. if fails on the sparc and the arm box. ARM says\n test-rules: arena.c:469: yr_arena_coalesce: Assertion `page != ((void )0)' failed.\nand sparc throws SIGBUS at the earlier reloc_address.\nEven after I fixed those with memcpy() I saw no change in ARM but sparc went segfault in exec.c\nIt completed fine with my addons on x86_64. \nThat is my feedback so far (for the .c testcase).\n. ",
    "jacob-baines": "For what its worth, I've tested/used this successfully and am also looking forward to seeing it merged in.\n. @hillu I did provide a binary for the tests (via blob.h). I also updated the unit tests to test this scenario.\nDid you mean you'd like to test this yourself? If so, I'm happy to provide extra binaries. Attached you'll find a zip called \"test.zip\". It contains three items:\n\nsmall-mips - a big endian executable\nsmall-x64 - a little endian executable\nmatch_section_name.yar - a yara rule\n\ntest.zip\nThe rule is fairly simple. It searches for \".text\" in the section names.\n```sh\nimport \"elf\"\nrule match_section_name\n{\n    condition:\n        for any i in (0..elf.number_of_sections):\n        (\n            elf.sections[i].name == \".text\"\n        )\n}\n```\nQuick examination of both binaries with readelf shows that they each have a section named \".text\":\nsh\nalbinolobster@ubuntu:~/test$ readelf -S ./small-mips | grep text\n  [ 9] .text             PROGBITS        00400600 000600 0002f0 00  AX  0   0 16\nalbinolobster@ubuntu:~/test$ readelf -S ./small-x64 | grep text\n  [ 8] .text             PROGBITS         0000000000400400  00000400\nWhen scanning these files with the section_name_big_endian branch I get the following results:\nsh\nalbinolobster@ubuntu:~/yara$ ./yara ~/test/match_section_name.yar ~/test/\nmatch_section_name /home/albinolobster/test//small-x64\nmatch_section_name /home/albinolobster/test//small-mips\nalbinolobster@ubuntu:~/yara$ \nHowever, scanning with the master branch I get:\nsh\nalbinolobster@ubuntu:~/yara$ ./yara ~/test/match_section_name.yar ~/test/\nmatch_section_name /home/albinolobster/test//small-x64\nalbinolobster@ubuntu:~/yara$\n. @hillu You are obviously correct about the == 0. I added the lexxtoh there more for consistency since people like me make silly mistakes by accidentally leaving the endian accessors off. So its more for consistency of appearance.\nI do appreciate that it is useless though. I'm happy to revert those if you'd like.. You are correct, @hillu.\nMy reading of yara.c indicates that YARA itself doesn't use multiple threads for memory scanning, but anyone using libyara are free to do so. I've updated the patch to use waitpid(pid,...) as you've suggested.. ",
    "botherder": "I just noticed the same behavior. Was there any progress on this or is it a permanent change in OSX?\nIn my case it isn't critical, but it would be annoying not being able to at least scan signed apps.\n. ",
    "knightsc": "I think this issue should probably be closed out. This is going to stay a permanent change in OSX.. ",
    "kloisle": "I am building on rhel 7.1.\nbuilt openssl before doing this.\nRedownloaded the master.zip a short while ago.\nran ./bootstrap.sh\nthen ran ./configure\nthen ran make\nerror message appears.\n. I had not installed openssl-dev. I built openssl from source.\nDo you have any idea how I can resolve the issue? Yum Installed openssl-dev and ran through bootstrap and configure again but unfortunately that did not resolve.\nKanhai Lisle\nLead Linux Engineer\nCtrl-IT Inc.\n13 West Kings House Rd.\nUnit 20\nKingston, JA\nwww.ctrl-it.com.jm\nOffice: 876.631.7554\nCell: 876.997.3716\nCTRL-IT logo_Coloured\n\nFrom: Wesley Shields\nSent: Monday, March 14, 2016 1:06 PM\nTo: plusvic/yara\nCC: \"Kanhai G. Lisle\"\nSubject: Re: [yara] modules/pe.c:1213:44: error: dereferencing pointer to incomplete type (#423)\nHow did you build openssl? I built it fine after installing openssl-devel.\n\nReply to this email directly or view it on GitHubhttps://github.com/plusvic/yara/issues/423#issuecomment-196413237.\nThis message is confidential. It may also be privileged or otherwise protected by work product immunity or other legal rules. If you have received it by mistake, please let us know by e-mail reply and delete it from your system; you may not copy this message or disclose its contents to anyone. Please send us by fax any message containing deadlines as incoming e-mails are not screened for response deadlines. The integrity and security of this message cannot be guaranteed on the Internet.\n. ",
    "blade1989": "@plusvic didn't read the readme properly. As is stated in php-malware-finder bug report,  ...you need yara 3.4.0.... My apologize!\n. ",
    "merces": "Hi @blaquee,\nI recently needed that too. Here is a rule that can tell you whether overlay is present or not:\n```\nimport \"pe\"\nprivate rule has_overlay {\n   condition:\n      filesize > pe.sections[pe.number_of_sections - 1].raw_data_offset + pe.sections[pe.number_of_sections - 1].raw_data_size\n}\nrule my_rule {\n   strings:\n      $mz = \"MZ\" ascii\n   condition:\n      $mz at 0 and\n      has_overlay\n}\n```\nBut I also agree will be nice to have it available in Yara, so I made a patch for this in my fork at https://github.com/merces/yara/commit/566786820036f78d21703ac63e5a59eaec499268 so a rule like this would work:\nrule my_rule {\n    strings:\n        $mz = \"MZ\" ascii\n        $bytes = { 90 90 90 90 90 }\n    condition:\n        $mz at 0 and\n        $bytes at pe.overlay\n}\nNot sure if @plusvic would accept a PR for this though.\nCheers,\nFernando\n. Hi @wxsBSD\nCan you please clarify? I don't really care about section ordering, I just go to the last section header to get its offset and size. Are you suggesting the last section header may not represent the last section on physical file?\nThanks,\nFernando\n\nOn Aug 1, 2016, at 8:28 AM, Wesley Shields notifications@github.com wrote:\nI don't think you can always rely upon section ordering.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Thank you for the ideas. I've updated the patch and now the function consider as last the section that has the highest raw offset. Have a look at  https://github.com/merces/yara/commit/39447516d82454f46988fac7313aebe8ce356f88 please. ;)\n\nI also added a new pe.overlay_size integer with https://github.com/merces/yara/commit/089e8915c1cde8274ab729789a1edc9cc2235b0c\n. Certainly. It is done. I just need to confirm what the new release version is going to be? 3.6.0? I noticed this information is essential in the documentation.\nThanks,\nFernando\n. ",
    "shlomikl": "OK, thank you for your response.\nWith your permission, I have another question...\nAre the rules in Yara Rules repository (http://yararules.com/) are being examined by some qualified Yara developers? \nIn other words, Is it safe to use this repository?\n. OK. Thank you for your answer.\n. ",
    "iangcarroll": "Is this an acceptable solution? Or does it need changes?\n. ",
    "iamkog": "My rule file has some problem.\nI can fix this things.\nThanks.\n. ",
    "XVilka": "Sorry, it was my fault.\n. ",
    "zwayne": "I've dug into this further & it appears to be androguard related. Anything with androguard.permission() seems to segfault.\n. ",
    "weiyiling": "@plusvic Thank you for your reply anyway\uff01I guessed that as your answer, but I still have some strong need to use yara's regular expression with backreferences, I wonder if I can use perl lib or re2 lib or any other lib to implement.If you have some good suggestion, please favour me with your instructions, thank you very much again!\n. ",
    "xambroz": "i can see that the 3.5.0 was released, but what about the python binding (yara-python)?\nIt disappeared from the https://github.com/VirusTotal/yara repository but https://github.com/VirusTotal/yara-python still not having release.\n. Thank you\n. Actually the issue can be much more specified. It is something about the ./malware/MALW_Magento_suspicious.yar ruleset, which makes it crash silently:\n$ cat test1.yara ./malware/MALW_Magento_suspicious.yar test2.yara > ref3.yara\n$ yara ref3.yara test.exe\n. Sorry - seems to be actually error in Yara-Rules.\nThe /malware/MALW_Magento_suspicious.yar contain global private rule - which by the documentation will execute first and all the other rules will be executed only if the condition is satisfied - which is not in this case satisfied = the yara behaves according the specification.\n. ",
    "mccoysc": "some functions about FILE is not work in compiled binary code,but only in source code and when you compile your code ,the source code is compiled JUST-IN-COMPILE-TIME.\nso different c/c++ compiler may has different FILE definetion.\nabout the proof,I have had the real bug case in my project.\nFrom: Victor M. Alvarez\nDate: 2016-06-20 15:52\nTo: VirusTotal/yara\nCC: mccoysc; Author\nSubject: Re: [VirusTotal/yara] some function is not so reasonable (#462)\nAs far as I know when you compile a program with a specific compiler it gets linked against a specific set of runtime libraries. A program compiled in MSC++ 6.0 is not going to use runtime libraries from MSC++ 10. Could you elaborate more on this? Do you have a working proof of concept?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub, or mute the thread.\n. and another way,though the functions about FILE is in binary code as a RUN-TIME mode,the bug would exists.\nfor FILE is a public structure,and the structure would be used in c/c++ run-time dll.and also,if the structure is in wrong definetion,the run-time don't know this different,your program would be crashed.\nfor example,when yara dll compiled,the FILE structure defined like this:\ntypedef structure _FILE\n{\n    int A;\n    char* B;\n}FILE;\nand in your project,your FILE structure is defined by your compiler like this:\ntypedef structure _FILE\n{\n    int A;\n    short X;\n    char* C;\n}FILE;\nwould no crash?\nin these project like yara,public functions should use basic data type but like FILE.\nfor the \"NOT BASIC\" data types ,you can't ensure that the data type's definetion would be all in same definetion for all compilers.\n. the FILE structure is not opaqueb to any but public to all\u3002\nwhen you use FILE in msc 10\uff0cyour FILE definetion is only yours\uff0cnot yara used(may compiled in msc 8).\nsuppose in fread for msc 8\uff0cjust like this:\nint fread(FILE* pFile,...)\n{\n    //maybe, in this version of fread\uff0cneed operate one field like this:\n     pRead->nCount=0\uff1b\n   //do some thing others\n}\nbut in your msc10 project\uff0cyou sure your FILE really has a nCount field?\nyou put your msc10's FILE structure to yara's msc8's fread function\uff0cno bug?\n\u53d1\u81ea\u6211\u7684 iPhone\n\n\u5728 2016\u5e746\u670820\u65e5\uff0c18:53\uff0cVictor M. Alvarez  \u5199\u9053\uff1a\nI understand what you say, but as soon as you don't access members of the FILE structure in your own code (in YARA's code in this case) you are safe. The only thing YARA does is storing pointers to FILE structures, and passing those pointers to the standard runtime library implementing fopen, fread, fwrite, etc. The FILE structure can change from one version of the runtime to the other, but YARA doesn't mind about that, because the structure is opaque to YARA. A problem could arise if you use the fopen function from one runtime version and the fread function from another version, but that's not case.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub, or mute the thread.\n. and i'll give a stack to proof this:\n1,in your project with msc 10\uff0cyou call \n\npFile=fopen()\uff1b//a msc 10 FILE structure is created \n2,you call\nyara_scan_file(pFile,...);\n3,in the inside of yara_scan_file\uff0cfread called:\nfread(pFile,...);\n4,the fread in 3rd step is the runtime of msc 8\uff0cfor example msvcr8.dll\uff0c\nfread in msvc8.dll can use the FILE come from msvc 10 and work well?\n\u53d1\u81ea\u6211\u7684 iPhone\n\n\u5728 2016\u5e746\u670820\u65e5\uff0c18:53\uff0cVictor M. Alvarez notifications@github.com \u5199\u9053\uff1a\nI understand what you say, but as soon as you don't access members of the FILE structure in your own code (in YARA's code in this case) you are safe. The only thing YARA does is storing pointers to FILE structures, and passing those pointers to the standard runtime library implementing fopen, fread, fwrite, etc. The FILE structure can change from one version of the runtime to the other, but YARA doesn't mind about that, because the structure is opaque to YARA. A problem could arise if you use the fopen function from one runtime version and the fread function from another version, but that's not case.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub, or mute the thread.\n. but \uff0cwhen i call yara in my project\uff0cthe FILE is created by my fopen, and then my FILE is been put into yara's fread\uff0cthis is the focus\n\u53d1\u81ea\u6211\u7684 iPhone\n\u5728 2016\u5e746\u670821\u65e5\uff0c00:04\uff0cVictor M. Alvarez notifications@github.com \u5199\u9053\uff1a\nWhen you link YARA against a runtime library, both fopen and fread are implemented by the same library, so they are using the same version of the FILE structure. YARA doesn't knows anything about the internal fields of FILE, the fields from that structure are never used within YARA's code, that's what I mean when I say that FILE is opaque to YARA.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub, or mute the thread.\n. you said my program linked with msc 10 and my program will use msc 10 runtime set:yes\uff0cit's right.\nbut if yara.dll is compiled with msc 6 and yara.dll will use msc 6 runtime\u3002\n\nis that ok?\ni create a FILE USING MSC 10 and put it into yara's MSC 6 fread \uff0cit work well?\n\u53d1\u81ea\u6211\u7684 iPhone\n\n\u5728 2016\u5e746\u670821\u65e5\uff0c00:04\uff0cVictor M. Alvarez notifications@github.com \u5199\u9053\uff1a\nClosed #462.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub, or mute the thread.\n. so you think who using yara.dll should know which compiler the yara.dll was compiled.\n\nbut,may be i only get yara.dll from a ways and i only use it,why should i know how it compiled?\nit's not reasonable.\nas a public yara.dll or yara.so module,it should have less dependcy and work independently with no these special restricts.\nkeeping all modules of a program to use one same run-time set is impossible at some times expecially the project is depend on many  3rd party modules.\nand in fact ,all program run in at least 2 or more different run-time sets.the linux or windows itself also work in this case,but they keep all work well.\n\u53d1\u81ea\u6211\u7684 iPhone\n\n\u5728 2016\u5e746\u670821\u65e5\uff0c01:01\uff0cVictor M. Alvarez notifications@github.com \u5199\u9053\uff1a\nSo, I think your concern is with the function yr_compiler_add_file. You're right about the problem that could arise from mixing two different runtimes (for example by compiling yara.dll with one version of the compiler and your main program with another version). But keep in mind that doing that is very bad idea for a number of reasons not related to YARA. Take a look at this and this. In the later they even mention the problem with the FILE structure.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub, or mute the thread.\n. as a solution\uff0ci think adding a function like \n      FILE* yara_open_file(char* pszFile,...)\uff1b\n\ninto yara public functions set is more reasonable.\nit can give a way to ENSURE all yara use the SAME file structure.\n\u53d1\u81ea\u6211\u7684 iPhone\n\n\u5728 2016\u5e746\u670821\u65e5\uff0c01:01\uff0cVictor M. Alvarez notifications@github.com \u5199\u9053\uff1a\nSo, I think your concern is with the function yr_compiler_add_file. You're right about the problem that could arise from mixing two different runtimes (for example by compiling yara.dll with one version of the compiler and your main program with another version). But keep in mind that doing that is very bad idea for a number of reasons not related to YARA. Take a look at this and this. In the later they even mention the problem with the FILE structure.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub, or mute the thread.\n. and also ,yes ,i compile the all project files in one run-time set including all 3rd party modules and also i have all 3rd party modules' source code.\n\nbut,if the compile options is /MT\uff0cthe bug is still exist.\nthe module compiled with /MT means every dll/exe has its own heap handle,so all memory should keep malloc/free in a same module.malloc in a.exe and free in b.dll is a bug,causing memory destroyed.\nand get back to yara:\ni open file in my a.exe\uff0cand put my FILE* into yara.dll's fread.\nyou're sure no memory free/malloc will be doing in fread of yrara.dll?\nand when i call fclose to the FILE* in my a.exe \uff0cyou are sure no memory pointer from fread in yara.dll would be free?\nand ok,you can say \uff0ci should keep all modules compiled in option /MD\uff0c\nbut why?\nas a public library,why yara should have so many restrictions? \npublic library should keep working well with less dependency and restrictions\uff0cno need user to know how it was compiled .\nis all right?\n\u53d1\u81ea\u6211\u7684 iPhone\n\n\u5728 2016\u5e746\u670821\u65e5\uff0c01:01\uff0cVictor M. Alvarez notifications@github.com \u5199\u9053\uff1a\nSo, I think your concern is with the function yr_compiler_add_file. You're right about the problem that could arise from mixing two different runtimes (for example by compiling yara.dll with one version of the compiler and your main program with another version). But keep in mind that doing that is very bad idea for a number of reasons not related to YARA. Take a look at this and this. In the later they even mention the problem with the FILE structure.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub, or mute the thread.\n. yes,yr_rules_scan_fd is ok!\n generally,i suggest that no any sepcial data type in public functions but only use basic types:int ,void*,char,and so on.\n\nFrom: Hilko Bengen\nDate: 2016-06-21 19:33\nTo: VirusTotal/yara\nCC: mccoysc; Author\nSubject: Re: [VirusTotal/yara] some function is not so reasonable (#462)\nWe already have a function yr_rules_scan_fd which takes an integer file descriptor (Unix) or a HANDLE (Windows) -- how about adding a function yr_compiler_add_fd?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub, or mute the thread.\n. https://github.com/Yara-Rules/rules\n364589886@qq.com\nFrom: Victor M. Alvarez\nDate: 2016-09-07 15:32\nTo: VirusTotal/yara\nCC: mccoysc; Author\nSubject: Re: [VirusTotal/yara] assert failure (#514)\nI'm unable to reproduce this issue. With that rule YARA 3.5 is working fine for me. Are you able to reproduce it with this single rule? Or are you running YARA with more rules besides this one?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub, or mute the thread.\n. https://github.com/Yara-Rules/rules \nall rules dwonload from this URL.\n364589886@qq.com\nFrom: Victor M. Alvarez\nDate: 2016-09-07 15:32\nTo: VirusTotal/yara\nCC: mccoysc; Author\nSubject: Re: [VirusTotal/yara] assert failure (#514)\nI'm unable to reproduce this issue. With that rule YARA 3.5 is working fine for me. Are you able to reproduce it with this single rule? Or are you running YARA with more rules besides this one?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub, or mute the thread.\n. would you give me your email address that can receive big attachment files so that i will send my all project files to you\n364589886@qq.com\nFrom: Victor M. Alvarez\nDate: 2016-09-07 16:08\nTo: VirusTotal/yara\nCC: mccoysc; Author\nSubject: Re: [VirusTotal/yara] assert failure (#514)\nStill unable to reproduce it. A stack trace would be great.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub, or mute the thread.\n. ",
    "sierkb": "@plusvic, @wxsBSD:\nI use most recent OSX El Capitan (10.11.5). I've discoverd it accidentally after receiving the most recent XProtect-Update (20 Jun 2016, Version 2080) via Software-Update and looking into it.\nHave a look at /System/Library/CoreServices/XProtect.bundle/Contents/Resources/\nThere you will find now 3 files since then (instead of 2) including an ASCII file named XProtect.yara (which seems, if you have a look into it, to be the signature list of XProtect.plist written in YARA rules):\n$ ls -la /System/Library/CoreServices/XProtect.bundle/Contents/Resources/\ntotal 40\ndrwxr-xr-x  2 root  wheel    170 21 Jun 05:17 .\ndrwxr-xr-x  4 root  wheel    204 21 Jun 05:17 ..\n-rw-r--r--  1 root  wheel   6126 20 Jun 19:54 XProtect.meta.plist\n-rw-r--r--  1 root  wheel  68346 20 Jun 19:54 XProtect.plist\n-rw-r--r--  1 root  wheel  21545 20 Jun 19:54 XProtect.yara\nMy System:\n$ sw_vers\nProductName:    Mac OS X\nProductVersion: 10.11.5\nBuildVersion:   15F34\n$ uname -a\nDarwin priamos 15.5.0 Darwin Kernel Version 15.5.0: Tue Apr 19 18:36:36 PDT 2016; root:xnu-3248.50.21~8/RELEASE_X86_64 x86_64\n. @plusvic: Please close and remove pull request #464 as well (it's an inadvertently dupe of #463).\n. Please revert/remove #464 because of dupe of  #463.\n. ",
    "NtReleaseEpinephrine": "I use a modified version of YARA in an incredibly large, non-open-source project... but I am unsure of how I'm meant to approach the licensing of it. How would one go about being compliant with YARA's license whilst stating a different license for the non-YARA parts? I've done some research but I'd rather not make a mistake and break the rules, so hopefully someone can provide more insight to help me.. ",
    "metthal": "I cannot simply provide example file because it depends on uninitialized value, so it comes down to whether your system gives you zeroed memory from malloc or not, so any file should be example one. When I was testing this, my system didn't gave me zeroed memory and when I tried to print (const char*)sect->c_string in gdb I've got string .data\\177 instead of just .data.\n. Pardon me my question, but I wonder, what is the use case for this? . Which documentation do you refer to? Because Windows Authenticode Portable Executable Signature Format (http://download.microsoft.com/download/9/c/5/9c5b2167-8017-4bae-9fde-d599bac8184a/Authenticode_PE.docx) which states:\n\ndwLength is set to the length of bCertificate\n\nOr do you mean length as a data directory length?\nI do not have sample which triggers this BUT this is the main reason why I think this pull request should be accepted:\nIt passes either unallocated memory to OpenSSL (if security directory is the last thing in the file) or memory that does not belong to security directory at all (if there is some overlay after security dir) and relies on the fact that PKCS#7 is properly encoded. OpenSSL basically obtains wrong size of the buffer and you can't be sure what exactly it is going to do with it. I may be a little bit paranoid here, but we cannot be sure OpenSSL is not going to access it. I am probably not the first who opened this code and saw that the wrong size is being passed around wondering why. It may not trigger the bug on 99% of files you analyze, but there still may be that 1% of files where this would cause troubles and in that case, I would rather be safe than sorry.. Sorry for misunderstanding, mea culpa. I have been reading that line I quoted wrong the whole time. You are right, it is length of the whole record. I have also fixed the calculation of next signature in that while loop. That - WIN_CERTIFICATE_HEADER_SIZE was meant only for calling BIO_new_mem_buf. I have corrected my mistake and made a new commit.\nThank you for the hash, I will look into it tomorrow. Also thanks for review. :). I am testing it on Windows and Linux simultaneously so it should at least with MSVC. I still haven't tested it with MSYS2, Cygwin or any other \"Linux-like\" environment. I am working on it in my free time so it will take some time since I have a little time to spare right now. . You are right. I did not take that into consideration since I am not using MinGW and often forget that it is a thing. I am for merging your PR.. Let me clear some things up about this whole export directory issue because specification for export directory is indeed confusing.\nHow export directory works\nExport directory points to 3 arrays with RVAs stored in AddressOfFunctions, AddressOfNames and AddressOfNameOrdinals. Let's call them Functions, Names and NameOrdinals. Some facts about these arrays:\n\nLength of array Functions is equal to NumberOfFunctions.\nArrays Names and NameOrdinals should have the same length that is equal to NumberOfNames.\nArrays Names and NameOrdinals can generally be shorter than array Functions in which case some functions do not have a name and are exported purely by ordinal. They can even be empty if all functions are exported by ordinals.\nOrdinal of each exported function is just its index in Functions array (starting from 1).\nAssociation of name and function address is done in NameOrdinals array. Each element in NameOrdinals is index into Functions array (this time starting from 0). Position of the element in NameOrdinals indicates the position of name in Names array with the name of the function. I tried to create small ASCII art which depicts it all:\n\n```\n Functions             NameOrdinals           Names\n######          ##############\nAddr 1  # <------- #     0      # ---> #   Name 1\n######          ##############\nAddr 2  #   +----- #     2      # ---> #   Name 2\n######   |      ##############\nAddr 3  # <-+  +-- #     4      # ---> #   Name 3\n######      |   ##############\nAddr 4  #      |\n######      |\nAddr 5  # <----+\n\n```\nFrom what I understand, YARA now assumes that the length of all three arrays is the same and each exported function also has a name but that's not right at all.\nI already have working patch that parses the export directory the right way but I still need to test it against multiple cases of export directories. I'll post it as soon as I am done with testing.. Supposedly no leaks on Linux. Could you please also provide the log of where the leaks are reported?\n==25277== Memcheck, a memory error detector\n==25277== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.\n==25277== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info\n==25277== Command: ./install/bin/yara /tmp/a.yar d2d781401f83ec81ec5f717f06f3b841be69e0d2848895104c152d67b36b58b6\n==25277== \n==25277== \n==25277== HEAP SUMMARY:\n==25277==     in use at exit: 0 bytes in 0 blocks\n==25277==   total heap usage: 10,014 allocs, 10,014 frees, 2,385,134 bytes allocated\n==25277== \n==25277== All heap blocks were freed -- no leaks are possible\n==25277== \n==25277== For counts of detected and suppressed errors, rerun with: -v\n==25277== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0). I'm not the one who makes calls what to merge and what not, but to give you my feedback. I really think that the interface of cuckoo module you propose is not in a great shape. With your changes, there would be functions cuckoo.filesystem.file_access and then cuckoo.summary.file_access. Both express the same thing but they are looking at different JSON keys. Wouldn't it be possible to have a single cuckoo.filesystem.file_access which would work with both JSONs from cuckoo v1 and v2 simultaneously? It would also make a sense to move all filesystem related functions to cuckoo.filesystem and keep them together (like cuckoo.summary.file_created, ...). I understand why you went with cuckoo.summary, because that's where they are kept in JSON, but we also have mutexes in behavior->summary->mutexes and they have function cuckoo.sync.mutex.\nI don't know if you are willing to change the interface, but I would like to ask you to at least think about what I just wrote.. @kallanreed I started working on CMake build system long time ago but this weekend I was able to get it into the buildable state on Windows, Linux, macOS and even cygwin. You can find it in my fork. It requires you to install jansson youself but at least it is full-fledged CMake build.\nI think it would fix this issue. Before I turn it into pull request, I would like to ask for any kind of feedback because there are many different build environments out there and testing them all is not really feasible for me.. From what I know a lot of people who install OpenSSL on Windows use this to download installer. Even chocolatey OpenSSL package uses it but unfortunately only light version which doesn't contain headers.. ",
    "idiom": "This also affects rules with jumps at the beginning/end of hex strings, not just in alternatives. \nrule hexstring_issue\n{\n  strings:\n    $ok={00 00 00 00 00 00 00 00}\n    $fail={[4] 00 00 00 00}\n    $fail={00 00 00 00 [4]}\n    $ok={00 00 00 00 ?? ?? ?? ??}\n  condition:\n    $any of them\n}\nerror: invalid hex string \"$fail\": syntax error, unexpected '[', expecting _BYTE_ or _MASKED_BYTE_ or '('\nReplacing with the equivalent number of wildcards causes the rule to pass. The issue is not seen with versions (<= 3.4). \n. ",
    "msm-code": "Additionally things like \"short or long push\" won't work, and I'm not sure how to fix it:\n$get_subdomain = {8B 0D [4] (5?|68 [4]) E8}\n\nGenerally matching code is much harder now, but I guess I'll have to think about changing my rules somehow.. ",
    "macourteau": "(closing this, new fix coming soon)\n. ",
    "pilate": "Another minimal example: \n```\nrule example {\n    strings:\n        $a = /(1|2|3|4|5|6|7|8|9|0){8}/\ncondition:\n    $a\n\n}\n```\nChanging {8} to {7} works fine, but anything higher errors out.\n. Err, branch name was in use... will resubmit.\n. ",
    "cgupta6": "I resolved it using and worked for me:\npip install --global-option=\"build\" --global-option=\"--enable-cuckoo\" --global-option=\"--enable-magic\" yara-python. @plusvic @radare @trufae \nIs there a way to recursively pick all the rule-files under specified folder? and create a single compiled yara binary file?. ",
    "maxvonhippel": "The dump url points to a GitHub 404 now.  Did this ever get resolved?. This is easily accomplished in bash, so I see no reason why it should be implemented natively in Yara.  For example, to only scan files with newer ctime:\nBASH\nfind /path/to/dir -type f -print0 | xargs -0 ls -t | while read file\ndo\nif test `find \"$file\" -mmin +120`\nthen\nyara my_rules_file \"$file\"\nfi\ndone \nCode is untested but almost certainly works.  See this and this. I was able to reproduce the error, and moreover, I checked the docs and did not find anything about look-aheads or look-behinds in the regex section.  I think this feature would be worth adding, but lack the coding acumen to do so myself.  That said, I think you could sort of hack it like this:\nRuleOne\nYARA\nrule one {\n    strings:\n        $yay = /baloney[0-9a-z]*/\n    condition:\n        $yay\n}\nRuleTwo\nYARA\nrule two {\n    strings:\n        $nay = /\\s(ns|win){1}/\n    condition:\n        $nay\n}\ntst.txt\nTXT\nbaloney ns\ntoodlesns\n win\n0011uuii win\n9090jjuu\nbaloney\nbaloneywin\nbaloney win\nbaloney092083\n And then in Bash:\nBASH\nyara -s RuleOne tst.txt > outOne\nyara -s -n RuleTwo tst.txt > outTwo\ncomm outOne outTwo\nProduces:\n0x0:$yay: baloney\n0x30:$yay: baloney\n0x38:$yay: baloneywin\n0x43:$yay: baloney\n0x4f:$yay: baloney092083\n(I'm not much of a REGEX whiz and found yours vaguely confusing, hence the stupid baloney example, but I think the idea is more or less the same?)\n. Gotcha.  As I said, my solution was definitely a \"hack\".  In the docs I see that \"not\" is a supported keyword, but I'm not really sure how to use it.  I tried doing:\nYARA\ncondition:\n    $yay and not $nay\n... but it didn't seem to work.  That said, if you can figure out how to use not in the conditional statement, that could possibly solve the problem?  I mean it'd be a bit slow, but wouldn't have the memory issues of my previous hack-y sudo-solution.\nEdit - for some reason not $nay seems to work for me, but $yay and not $nay does not.  It's quite late where I am so I'm going to go sleep, but I think that if you can figure out the negation thing using not, that really could be the solution.  Good luck!\n. Please comment if you figure it out, I would also like to know the answer to this.  If not, I'll try and work on it later this week.\nEDIT: school started.  I still find this problem super interesting, but cannot truthfully say I will likely get to it \"later this week\" :(. ",
    "dcode": "Complete yara noob here, but would it be possible to make the optimization optional at compile time, similar to GCC w/ -O flags? I recompile yara rules often to get latest updates.. ",
    "ewil": "Nice, I should've seen that, thanks!\n. ",
    "fumfel": "Problem still exists, tested repo HEAD: a0bb3836f16e3c5d0c2a1da097a1ebacbebc3a94.\n. Another payload - free() execution with address (0xdeadbeef) located after string name.\nValgrind output - https://gist.github.com/fumfel/2b39eac6ae2ad66fd7c41d87459f6a78\n. Still exist in 890c3f850293176c0e996a602ffa88b315f4e98f\nPayload\n. Yup - with and without ASAN.\nHere's my config:\nUbuntu 16.04 x64\nCC: Clang 3.9 & gcc version 5.4.0 (tested on both) . Slightly different issue in 5e2d2798048dbba3aa8428aa563c0ebfbae37027\nPayload (about 78 kb)\nASAN:\n```\n==28982==ERROR: AddressSanitizer: stack-overflow on address 0x7fff4a83c8ec (pc 0x00000045c45b bp 0x7fff4a83dd00 sp 0x7fff4a83c8e0 T0)\n    #0 0x45c45a in _yr_re_emit XYZ/yara/libyara/re.c:738\n    #1 0x45dba9 in _yr_re_emit XYZ/yara/libyara/re.c:915\n    ---------------------- !SNIP! ----------------------\n    #246 0x45dba9 in _yr_re_emit XYZ/yara/libyara/re.c:915\n    #247 0x45dba9 in _yr_re_emit XYZ/yara/libyara/re.c:915\n    #248 0x45dba9 in _yr_re_emit XYZ/yara/libyara/re.c:915\n    #249 0x45dba9 in _yr_re_emit XYZ/yara/libyara/re.c:915\n    #250 0x45dba9 in _yr_re_emit XYZ/yara/libyara/re.c:915\n    #251 0x45dba9 in _yr_re_emit XYZ/yara/libyara/re.c:915\nSUMMARY: AddressSanitizer: stack-overflow XYZ/yara/libyara/re.c:738 _yr_re_emit\n==28982==ABORTING\n```\n. @plusvic 8192KB, but AFAIR ASAN for their purposes have different stack limits - 2/4 MB.. @plusvic https://github.com/VirusTotal/yara/commit/1aaac7ba91101da0112a7365a05ef6f6281f8739 is fine :+1: \nMy setup is pretty simple: \n1. American Fuzzy Lop (with yara binary) or LLVM Libfuzzer (https://gist.github.com/fumfel/c8b3c7e5be700b2303d2e42d957c5990)\n2. Corpora from https://github.com/fumfel/yara-fuzzing-corpus. @plusvic In a484e862bf404cb785806db8449e87aa39028c11 problem solved :+1: . @plusvic In a484e862bf404cb785806db8449e87aa39028c11 problem solved :+1: . ",
    "psrok1": "It seems that token /[NUL]/ is interpreted by lexer as \"empty regexp\", which is not properly handled. Lexer produces regexp token with yylval from previous token.\nBug appears in this commit:\nhttps://github.com/VirusTotal/yara/commit/11fd5e4784fa135cbdb64906cc628edb9e9d50ee#diff-f33cc51a50dcf0e802a78296718f6b6c\n. ",
    "ilovezfs": "@plusvic thanks for confirming!\n. ",
    "HostageBrain": "Why so strange syntax?\npe.resources[0].name_string == \"BAR\" wide\nusually people used in C/C++ and maybe somewhere elsewhere such syntax:\npe.resources[0].name_string == L\"BAR\"\nI think it's much more common and intuitive syntax\n. I'm not sure if I can share rules or not - but anyway you can't compile them bcs I'm using custom module. But I will try to generate rules which are triggered this assert.\npage->size = 0x20000 page->used = 0x1ffff is after calling yr_parser_emit(yyscanner, OP_AND, &and_addr). the problem is: when you are writing *(void**)(fixup->address) = (void*)(and_addr + 1); - there is no guarantee any data will be located by this address. checked. everything works) problem solved). ",
    "fooinha": "This is a problem to whom wishes to use libyara.\n``` c\n~/yara-3.5.0+dfsg# echo -e \"#include \\nint main(int argc, char **argv) { return 0; }\" > /tmp/foo.c && gcc -E  -c /tmp/foo.c -lyara\n1 \"/tmp/foo.c\"\n1 \"\"\n1 \"\"\n31 \"\"\n1 \"/usr/include/stdc-predef.h\" 1 3 4\n32 \"\" 2\n1 \"/tmp/foo.c\"\n1 \"/usr/include/yara.h\" 1 3 4\n33 \"/usr/include/yara.h\" 3 4\n1 \"/usr/include/yara/utils.h\" 1 3 4\nIn file included from /usr/include/yara.h:33:0,\n                 from /tmp/foo.c:1:\n/usr/include/yara/utils.h:34:20: fatal error: config.h: No such file or directory\n #include \n                    ^\ncompilation terminated.\n```\n. ",
    "fabianfrz": "I wrote a minimalistic one but I don't think it is production ready (It compiles and it can scan a file and returns a Hash, containing the result. Seems to work but crashes on old Ruby versions < 2.4).\nI can give you access if you like.. ",
    "dspruell": "Understood, thanks for the explanation.\n. ",
    "viper2020": "Thanks for the response,\nWhat if I need to scan the special files too?\nIs there any way to do that?\nI just need to check for any false positives.\n. Thanks\n. ",
    "CaldurG": "I fixed return value and used __try __except around critical section in case of STATUS_NO_MEMORY on WinXP. But compiler doesn't seem to recognize __try :(\nAnd here is a performance test someone did on SO http://stackoverflow.com/questions/800383/what-is-the-difference-between-mutex-and-critical-section \nFrom the SO answer: \"On my system for 1,000,000 uncontended acquires and releases, a mutex takes over one second. A critical section takes ~50 ms for 1,000,000 acquires.\"\n. Hi, is this improvement at least considered? :) Btw is there some problem with checks? I can't see how changing the commandline.rst could make the checks to fail if they were successful before.. We are using yara not only to search in executables, but also in malware configs obtained from honeypots and in feed of newly registered certificates. These are all json formatted data so I assumed that maybe this module could also help others.. I dunno if this will help.. But if you open the file in some tool that prints imports, you will see that some import names are not resolved. There is a lot of them and my guess is that they are not freed properly.\n\nDetected memory leaks!\nDumping objects ->\n- {2158} normal block at 0x000000000051F7A0, 8 bytes long.\n Data: <        > 00 00 00 00 01 00 00 00 \n- {2157} normal block at 0x000000000055E410, 24 bytes long.\n Data: <  Y?            > 90 1D 59 3F 01 00 00 00 00 00 00 00 00 00 00 00 \n- {2156} normal block at 0x000000000055E3B0, 24 bytes long.\n Data: <  Y?            > 80 1D 59 3F 01 00 00 00 00 00 00 00 00 00 00 00 \n- {2155} normal block at 0x000000000055E350, 24 bytes long.\n Data:  70 1D 59 3F 01 00 00 00 00 00 00 00 00 00 00 00 \n- {2154} normal block at 0x000000000055E2F0, 24 bytes long.\n Data:  50 1D 59 3F 01 00 00 00 00 00 00 00 00 00 00 00 \n- {2153} normal block at 0x000000000055E290, 24 bytes long.\n Data: <@ Y?            > 40 1D 59 3F 01 00 00 00 00 00 00 00 00 00 00 00 \n- {2152} normal block at 0x000000000055E230, 24 bytes long.\n Data: <  Y?            > F0 1C 59 3F 01 00 00 00 00 00 00 00 00 00 00 00 \n- {2151} normal block at 0x000000000055E1D0, 24 bytes long.\n Data: <  Y?            > E0 1C 59 3F 01 00 00 00 00 00 00 00 00 00 00 00 \n...\n. I compiled it with HAVE_WINCRYPT_H and no memory leaks were detected. Maybe make this default configuration on windows?. I am using latest yara (3.8.1) on windows. It also crashes in latest yara python (pip install yara-python) on windows. Crash is on line 770 in dotnet.c if ((*(WORD*) memberref_row & 0x07) != 0x01). sorry I don't have other environment. Your hash is correct. I wanted to download latest compiled yara binary for windows, but the download is broken :( So I downloaded latest sources from github, placed them to a separate directory and compiled yara from there. Access violation is still there in both 32 and 64bit builds.\nHave you used the rules from the first post? Basically anything that that contains import \"dotnet\" should work, but just in case :). Thx for the download link. I checked with your binaries and it crashed on both 32 and 64bit versions.\nyara64.bat\n```\n@yara64.exe dotnet.yar dotnet.av\n@echo return_value=%errorlevel%\n\nyara64.bat\nreturn_value=-1073741819\n```\n\nyara32.bat\n```\n@yara32.exe dotnet.yar dotnet.av\n@echo return_value=%errorlevel%\n\nyara32.bat\nreturn_value=-1073741819\n```\n\n-1073741819 -> 0xC0000005 should be access violation error. Hi, were you able to reproduce this? Is there some progress?. look at line 746 in dotnet.c\nI added \"if not fits_in_pe then break\" part and it will break on this condition while scanning dotnet.av file. So memberref_row is pointing to memory that is not allocated.\n```\nif (type_index > 0)\n  type_index--;\n// Now follow the Type index into the MemberRef table.\nmemberref_row = memberref_ptr + (memberref_row_size * type_index);\nif (!fits_in_pe(pe, memberref_row, memberref_row_size))\n  break;\nif (index_sizes.memberref == 4)\n```. ",
    "stefan-baranoff": "I'm a bit concerned about the move away from Yara's memory management model (arenas and yr_* functions for allocating/freeing) and the use of malloc/free directly. There's nothing directly wrong with this approach but is in conflict with other similar code. Is there a reason you took this approach?\n. ",
    "StephanTLavavej": "This avoids the conflict, but please note that _YR_CONCAT is still a reserved identifier, because it begins with an underscore and a capital letter. YR_CONCAT_IMPL would be non-reserved.. ",
    "Bi3g0": "I want to do like this: #a == 6 in (0..100). Sorry, my English is not good.I think I may not be clear about my problem. I want to count how many times the string appears in an address range.\nlike this\uff1a#a == 2 in (0..100) or #a==3 in (50..100). I think yara can't meet my condition. \na\uff1a how many times the string appears in the file or process memory . Not  an address range.\n(\n  #a == 3 and\n  for all i in (1..#a):\n    (@a[i] >= 50 and @a[i] <= 100)\n)\nIn this condition, $a cat't appears in the (0..49). I want to count the times that $a appears in only (50..100)\n\n\nAnd of course, yara match nothing.\n\nThank you the same to you.. @plusvic  Thank you\uff0cthis is what I want!\n\n\n\n@wxsBSD Thank you all the same, my english is not good,so I can't express clearly.. How can I get the character which  I can get its virtual address\uff1f\nLike this:\n$a = \"yara\" and @a[1]=0\nhao can I get \"y\" from @a[1]?. I want to kown if there are any other methods like backreferrences.. ",
    "noxdafox": "Is there anyone who can answer?. I can provide a patch for the documentation if needed. I'd like the OK from the developers though to be sure not to document internal logic or non exposed APIs.. This addresses issue #570 . ",
    "iamAzeem": "@hillu \nI think you guessed it right. :)\nYARA C API was built using VS on Windows 7 and I didn't build Qt. I used the binary package for Windows. Unfortunately, stack trace is not available for the crash. Anyway, I'd try to get a stack trace for it and post it here.\nThanks!. ",
    "fgeek": "CVE-2016-10211 has been assigned for this issue.. CVE-2016-10210 has been assigned for this issue.. CVE-2017-5924 has been assigned for this issue.. CVE-2017-5923 has been assigned for this issue.. ",
    "nanshihui": "i got the same problem. rule catch_evil_data: ni\n{\n    meta:\n        description=\"get evil tcp traffic\"\n    strings:\n     $tcp_reaffic = /tcp:.*/\ncondition:\n \"evail_data\" in $tcp_reaffic\n\n}\ni want catch the special data in tcp data, so   i have to get tcp data first, then i want search label in tcp data\n. string  like \n\"tcp:asdasdasdasd\ntcp:asdasdasdsad\ntcp:ssssss\". thanks anyway.    what i want to express is that \n rule catch_evil_data: ni\n{\nmeta:\ndescription=\"get evil tcp traffic\"\nstrings:\n$tcp_traffic = /tcp:.*/\ncondition: \"evail_data\" in $tcp_traffic and $tcp_traffic matches /abc.*bcd/\n},\nwhich means  i will use tcp_traffic several times for different purpose.\n. ",
    "MrJeffyw": "\nI'm closing this issue because it looks like a problem with the file path. Re-open the issue if you are still getting the same error after escaping backslashes and adding the missing colon.\n\nIt is my input error!Do not you see that......\n. ",
    "chintanhshah": "Appreciate the response . \nWe are basically building the bigger Yara rules file with several hunderds of rules in just a single file and scanning all of them at one shot . Doing a Yara -n for a single rule  wont workaround and produce lot of False positives as we are matching on the multiple GBs of Memory dump files ..\n\nImage attached here perhaps might give you a better idea.. Ah ok..I will have to spend some time trying a workaround to this. It would solve quite a bit of FP problems if that works ..\nThanks for your quick suggestion . . Stilll not figured out ..Let me know if anybody had luck with this .. Oh that sounds like a good logic . I will definitely check this out today . Thanks a lot for your response and help ... Ya. that sounds doable ..Thanks ... ",
    "FlorentATo": "getfacl:\n```\nfile: hack.php\nowner: fakeuser\ngroup: fakegroup\nflags: -s-\nuser::rw-\ngroup::r--\nmask::rwx\nother::---\n```\nstat:\nFile: \u00ab hack.php\u00a0\u00bb\nSize: 29918         Blocks: 65         IO Block: 32768  fichier\nDevice: 4dh/77d Inode: 168429581   Links: 1\nAccess: (2640/-rw-r-S---)  Uid: (652994/fakeuser)   Gid: (  100/   fakegroup)\nAccess: 2016-12-20 23:04:15.915811401 +0100\nModify: 2016-12-20 23:04:16.197491998 +0100\nChange: 2016-12-20 23:04:28.701903691 +0100. Hello hillu,\nI don't think it is related to the 'other' permissions since Yara, executed as root, is able to read the file.\nActually, I have tested Yara against several variations of permission set and all of them worked (including chmod 0000, 4640 (SUID), 5640 (SUID + sticky bit)) except the one described above.\nThis was a quick and manual testing, I haven't tried every single combinations by using a script.\n```\nlocalhost /dev/hack # ll\ntotal 70\n-rw-r-----+ 1 fakeuser fakegroup 29918 20 d\u00e9c.  23:04 WSO77.jpg\nlocalhost /dev/hack # yara -p 1 -r /var/yara/malware-database.yarac .\n_HEX_php_cmdshell_unclassed_356 ./WSO77.jpg\n_HEX_php_cmdshell_unclassed_359 ./WSO77.jpg\n_HEX_php_cmdshell_unclassed_360 ./WSO77.jpg\n_HEX_php_cmdshell_unclassed_361 ./WSO77.jpg\n_HEX_php_cmdshell_unclassed_362 ./WSO77.jpg\n_HEX_php_shell_black_id_570 ./WSO77.jpg\n_HEX_php_shell_black_id_585 ./WSO77.jpg\nlocalhost /dev/hack # chmod g+s WSO77.jpg\nlocalhost /dev/hack # ll\ntotal 70\n-rw-r-S---+ 1 fakeuser fakegroup 29918 20 d\u00e9c.  23:04 WSO77.jpg\nlocalhost /dev/hack # yara -p 1 -r /var/yara/malware-database.yarac .\nError scanning ./WSO77.jpg: could not open file\nlocalhost /dev/hack # chmod g-s WSO77.jpg\nlocalhost /dev/hack # ll\ntotal 70\n-rw-r-----+ 1 fakeuser fakegroup 29918 20 d\u00e9c.  23:04 WSO77.jpg\nlocalhost /dev/hack # yara -p 1 -r /var/yara/malware-database.yarac .\n_HEX_php_cmdshell_unclassed_356 ./WSO77.jpg\n_HEX_php_cmdshell_unclassed_359 ./WSO77.jpg\n_HEX_php_cmdshell_unclassed_360 ./WSO77.jpg\n_HEX_php_cmdshell_unclassed_361 ./WSO77.jpg\n_HEX_php_cmdshell_unclassed_362 ./WSO77.jpg\n_HEX_php_shell_black_id_570 ./WSO77.jpg\n_HEX_php_shell_black_id_585 ./WSO77.jpg\n```\nHave you tried to scan files with such permissions on your side ?\nDo you reproduce the issue ?. It's root itself so, yes, it doesn't belong to any group except its own group (0).. Hello Victor and thank you for taking the time to investigate this case.\nI've no issue reading the file using cat, less, vim. This file is a webshell (WSO 2.6) written in PHP.. strace yara:\nexecve(\"/usr/bin/yara\", [\"yara\", \"/var/cache/ovh/yara/malware-data\"..., \".\"], [/* 20 vars */]) = 0\nbrk(0)                                  = 0x6303a8\naccess(\"/etc/ld.so.nohwcap\", F_OK)      = -1 ENOENT (No such file or directory)\nmmap(NULL, 8192, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7f0535d8f000\naccess(\"/etc/ld.so.preload\", R_OK)      = -1 ENOENT (No such file or directory)\nopen(\"/etc/ld.so.cache\", O_RDONLY)      = 3\nfstat(3, {st_mode=S_IFREG|0644, st_size=19746, ...}) = 0\nmmap(NULL, 19746, PROT_READ, MAP_PRIVATE, 3, 0) = 0x7f0535d8a000\nclose(3)                                = 0\naccess(\"/etc/ld.so.nohwcap\", F_OK)      = -1 ENOENT (No such file or directory)\nopen(\"/lib/x86_64-linux-gnu/libpthread.so.0\", O_RDONLY) = 3\nread(3, \"\\177ELF\\2\\1\\1\\0\\0\\0\\0\\0\\0\\0\\0\\0\\3\\0>\\0\\1\\0\\0\\0@\\\\\\0\\0\\0\\0\\0\\0\"..., 832) = 832\nfstat(3, {st_mode=S_IFREG|0755, st_size=131107, ...}) = 0\nmmap(NULL, 2208672, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_DENYWRITE, 3, 0) = 0x7f0535956000\nmprotect(0x7f053596d000, 2093056, PROT_NONE) = 0\nmmap(0x7f0535b6c000, 8192, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x16000) = 0x7f0535b6c000\nmmap(0x7f0535b6e000, 13216, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_ANONYMOUS, -1, 0) = 0x7f0535b6e000\nclose(3)                                = 0\naccess(\"/etc/ld.so.nohwcap\", F_OK)      = -1 ENOENT (No such file or directory)\nopen(\"/usr/lib/x86_64-linux-gnu/libmagic.so.1\", O_RDONLY) = 3\nread(3, \"\\177ELF\\2\\1\\1\\0\\0\\0\\0\\0\\0\\0\\0\\0\\3\\0>\\0\\1\\0\\0\\0000I\\0\\0\\0\\0\\0\\0\"..., 832) = 832\nfstat(3, {st_mode=S_IFREG|0644, st_size=113816, ...}) = 0\nmmap(NULL, 2209648, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_DENYWRITE, 3, 0) = 0x7f053573a000\nmprotect(0x7f0535755000, 2093056, PROT_NONE) = 0\nmmap(0x7f0535954000, 8192, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x1a000) = 0x7f0535954000\nclose(3)                                = 0\naccess(\"/etc/ld.so.nohwcap\", F_OK)      = -1 ENOENT (No such file or directory)\nopen(\"/lib/x86_64-linux-gnu/libc.so.6\", O_RDONLY) = 3\nread(3, \"\\177ELF\\2\\1\\1\\0\\0\\0\\0\\0\\0\\0\\0\\0\\3\\0>\\0\\1\\0\\0\\0\\300\\357\\1\\0\\0\\0\\0\\0\"..., 832) = 832\nfstat(3, {st_mode=S_IFREG|0755, st_size=1607696, ...}) = 0\nmmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7f0535d89000\nmmap(NULL, 3721272, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_DENYWRITE, 3, 0) = 0x7f05353ad000\nmprotect(0x7f0535531000, 2093056, PROT_NONE) = 0\nmmap(0x7f0535730000, 20480, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x183000) = 0x7f0535730000\nmmap(0x7f0535735000, 18488, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_ANONYMOUS, -1, 0) = 0x7f0535735000\nclose(3)                                = 0\naccess(\"/etc/ld.so.nohwcap\", F_OK)      = -1 ENOENT (No such file or directory)\nopen(\"/lib/x86_64-linux-gnu/libz.so.1\", O_RDONLY) = 3\nread(3, \"\\177ELF\\2\\1\\1\\0\\0\\0\\0\\0\\0\\0\\0\\0\\3\\0>\\0\\1\\0\\0\\0\\340#\\0\\0\\0\\0\\0\\0\"..., 832) = 832\nfstat(3, {st_mode=S_IFREG|0644, st_size=92752, ...}) = 0\nmmap(NULL, 2187792, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_DENYWRITE, 3, 0) = 0x7f0535196000\nmprotect(0x7f05351ac000, 2093056, PROT_NONE) = 0\nmmap(0x7f05353ab000, 8192, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x15000) = 0x7f05353ab000\nclose(3)                                = 0\nmmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7f0535d88000\nmmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7f0535d87000\nmmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7f0535d86000\narch_prctl(ARCH_SET_FS, 0x7f0535d87700) = 0\nmprotect(0x7f05353ab000, 4096, PROT_READ) = 0\nmprotect(0x7f0535730000, 16384, PROT_READ) = 0\nmprotect(0x7f0535954000, 4096, PROT_READ) = 0\nmprotect(0x7f0535b6c000, 4096, PROT_READ) = 0\nmprotect(0x7f0535d91000, 4096, PROT_READ) = 0\nmunmap(0x7f0535d8a000, 19746)           = 0\nset_tid_address(0x7f0535d879d0)         = 24945\nset_robust_list(0x7f0535d879e0, 0x18)   = 0\nfutex(0x7ffde86cc5bc, FUTEX_WAIT_BITSET_PRIVATE|FUTEX_CLOCK_REALTIME, 1, NULL, 7f0535d87700) = -1 EAGAIN (Resource temporarily unavailable)\nrt_sigaction(SIGRTMIN, {0x7f053595bad0, [], SA_RESTORER|SA_SIGINFO, 0x7f05359650a0}, NULL, 8) = 0\nrt_sigaction(SIGRT_1, {0x7f053595bb60, [], SA_RESTORER|SA_RESTART|SA_SIGINFO, 0x7f05359650a0}, NULL, 8) = 0\nrt_sigprocmask(SIG_UNBLOCK, [RTMIN RT_1], NULL, 8) = 0\ngetrlimit(RLIMIT_STACK, {rlim_cur=8192*1024, rlim_max=RLIM_INFINITY}) = 0\nbrk(0)                                  = 0x6303a8\nbrk(0x6513a8)                           = 0x6513a8\nbrk(0x652000)                           = 0x652000\nopen(\"/var/cache/yara/ovh/malware-database.yarac\", O_RDONLY) = 3\nfstat(3, {st_mode=S_IFREG|0644, st_size=9736164, ...}) = 0\nmmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7f0535d8e000\nfstat(3, {st_mode=S_IFREG|0644, st_size=9736164, ...}) = 0\nlseek(3, 9732096, SEEK_SET)             = 9732096\nread(3, \"j\\277\\211\\0r\\277\\211\\0\\202\\277\\211\\0\\212\\277\\211\\0\\262\\277\\211\\0\\272\\277\\211\\0\\312\\277\\211\\0\\322\\277\\211\\0\"..., 4068) = 4068\nlseek(3, 0, SEEK_SET)                   = 0\nread(3, \"YARAk\\374\\217\\0\\3\\0\\0\\0\\0\\336,\\r\\0\\0\\0\\0\\0\\356\\365\\206\\0\\0\\0\\0\\0;\\35\\f\"..., 4096) = 4096\nmmap(NULL, 9437184, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7f0534896000\nread(3, \"\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\"..., 9428992) = 9428992\nread(3, \"@(406- 292) & @(761- 729) & @(53\"..., 4096) = 4096\nread(3, \"\\0207\\0\\0\\0327\\0\\0\\\"7\\0\\0*7\\0\\00027\\0\\0<7\\0\\0D7\\0\\0L7\\0\\0\"..., 4096) = 4096\nread(3, \"\\335\\2\\0\\0\\214\\237\\0\\0\\233\\250\\0\\0\\233\\251\\0\\0006\\23\\0\\0\\300h\\0\\0\\276%\\0\\0A\\225\\0\\0\"..., 4096) = 4096\nread(3, \"u>\\1\\0~>\\1\\0\\206>\\1\\0\\217>\\1\\0\\227>\\1\\0\\237>\\1\\0\\250>\\1\\0\\260>\\1\\0\"..., 4096) = 4096\nread(3, \"'`\\1\\0/`\\1\\0007`\\1\\0@`\\1\\0H`\\1\\0P`\\1\\0Y`\\1\\0a`\\1\\0\"..., 4096) = 4096\nbrk(0x673000)                           = 0x673000\nread(3, \"f\\271\\1\\0n\\271\\1\\0x\\271\\1\\0\\200\\271\\1\\0\\210\\271\\1\\0\\220\\271\\1\\0\\231\\271\\1\\0\\241\\271\\1\\0\"..., 4096) = 4096\nread(3, \"\\214:\\2\\0\\224:\\2\\0\\236:\\2\\0\\246:\\2\\0\\256:\\2\\0\\266:\\2\\0\\277:\\2\\0\\307:\\2\\0\"..., 4096) = 4096\nread(3, \"\\2054\\2\\0H\\343\\2\\0P\\343\\2\\0X\\343\\2\\0a\\343\\2\\0i\\343\\2\\0r\\343\\2\\0z\\343\\2\\0\"..., 4096) = 4096\nread(3, \"^z\\3\\0fz\\3\\0nz\\3\\0wz\\3\\0\\177z\\3\\0\\207z\\3\\0\\220z\\3\\0\\230z\\3\\0\"..., 4096) = 4096\nread(3, \"\\311\\333\\3\\0\\321\\333\\3\\0\\333\\333\\3\\0\\343\\333\\3\\0\\353\\333\\3\\0\\363\\333\\3\\0\\375\\333\\3\\0\\5\\334\\3\\0\"..., 4096) = 4096\nbrk(0x694000)                           = 0x694000\nread(3, \"(=\\4\\0000=\\4\\0008=\\4\\0A=\\4\\0I=\\4\\0R=\\4\\0Z=\\4\\0b=\\4\\0\"..., 4096) = 4096\nread(3, \"\\360\\r\\5\\0\\370\\r\\5\\0\\0\\16\\5\\0\\10\\16\\5\\0\\21\\16\\5\\0\\31\\16\\5\\0!\\16\\5\\0\\363_\\3\\0\"..., 4096) = 4096\nread(3, \"a\\346\\5\\0j\\346\\5\\0r\\346\\5\\0z\\346\\5\\0\\203\\346\\5\\0\\213\\346\\5\\0\\224\\346\\5\\0\\234\\346\\5\\0\"..., 4096) = 4096\nread(3, \"\\376\\236\\6\\0\\6\\237\\6\\0\\17\\237\\6\\0\\27\\237\\6\\0!\\237\\6\\0)\\237\\6\\0001\\237\\6\\0009\\237\\6\\0\"..., 4096) = 4096\nbrk(0x6b5000)                           = 0x6b5000\nread(3, \"\\340\\7\\7\\0\\350\\7\\7\\0\\362\\7\\7\\0\\372\\7\\7\\0\\2\\10\\7\\0\\n\\10\\7\\0\\23\\10\\7\\0\\33\\10\\7\\0\"..., 4096) = 4096\nread(3, \"eQ\\7\\0mQ\\7\\0uQ\\7\\0~Q\\7\\0\\206Q\\7\\0\\216Q\\7\\0\\227Q\\7\\0\\237Q\\7\\0\"..., 4096) = 4096\nread(3, \"\\217\\342\\7\\0\\227\\342\\7\\0\\240\\342\\7\\0\\250\\342\\7\\0\\260\\342\\7\\0\\271\\342\\7\\0\\301\\342\\7\\0\\312\\342\\7\\0\"..., 4096) = 4096\nread(3, \"\\207\\223\\10\\0\\220\\223\\10\\0\\230\\223\\10\\0\\240\\223\\10\\0\\251\\223\\10\\0\\261\\223\\10\\0\\272\\223\\10\\0\\302\\223\\10\\0\"..., 4096) = 4096\nbrk(0x6d6000)                           = 0x6d6000\nread(3, \"^<\\t\\0f<\\t\\0!\\\"\\t\\0o<\\t\\0w<\\t\\0\\177<\\t\\0\\210<\\t\\0\\220<\\t\\0\"..., 4096) = 4096\nread(3, \"]}\\t\\0e}\\t\\0m}\\t\\0v}\\t\\0~}\\t\\0\\206}\\t\\0\\217}\\t\\0\\227}\\t\\0\"..., 4096) = 4096\nread(3, \"\\227\\4\\7\\0\\225\\246\\t\\0\\235\\246\\t\\0\\245\\246\\t\\0\\256\\246\\t\\0\\266\\246\\t\\0\\277\\246\\t\\0\\307\\246\\t\\0\"..., 4096) = 4096\nread(3, \"\\255\\357\\t\\0\\265\\357\\t\\0\\277\\357\\t\\0\\307\\357\\t\\0\\317\\357\\t\\0\\327\\357\\t\\0\\340\\357\\t\\0\\350\\357\\t\\0\"..., 4096) = 4096\nbrk(0x6f7000)                           = 0x6f7000\nread(3, \"\\3570\\n\\0\\3700\\n\\0\\0001\\n\\0\\0101\\n\\0\\0211\\n\\0\\0311\\n\\0#1\\n\\0+1\\n\\0\"..., 4096) = 4096\nread(3, \"Gb\\n\\0Ob\\n\\0Wb\\n\\0ab\\n\\0ib\\n\\0qb\\n\\0yb\\n\\0\\203b\\n\\0\"..., 4096) = 4096\nread(3, \"\\356\\203\\n\\0\\366\\203\\n\\0\\377\\203\\n\\0\\7\\204\\n\\0\\20\\204\\n\\0\\30\\204\\n\\0 \\204\\n\\0)\\204\\n\\0\"..., 4096) = 4096\nread(3, \"q\\245\\n\\0z\\245\\n\\0\\202\\245\\n\\0\\214\\245\\n\\0\\224\\245\\n\\0\\234\\245\\n\\0\\244\\245\\n\\0\\255\\245\\n\\0\"..., 4096) = 4096\nbrk(0x718000)                           = 0x718000\nread(3, \"h\\336\\n\\0p\\336\\n\\0x\\336\\n\\0\\201\\336\\n\\0\\211\\336\\n\\0\\221\\336\\n\\0\\232\\336\\n\\0\\242\\336\\n\\0\"..., 4096) = 4096\nread(3, \"\\363\\377\\n\\0\\373\\377\\n\\0\\5\\0\\v\\0\\r\\0\\v\\0\\25\\0\\v\\0\\35\\0\\v\\0'\\0\\v\\0/\\0\\v\\0\"..., 4096) = 4096\nread(3, \"\\274!\\v\\0\\306!\\v\\0\\316!\\v\\0\\326!\\v\\0\\336!\\v\\0\\350!\\v\\0\\360!\\v\\0\\370!\\v\\0\"..., 4096) = 4096\nread(3, \"\\217C\\v\\0\\227C\\v\\0\\237C\\v\\0\\247C\\v\\0\\261C\\v\\0\\271C\\v\\0\\301C\\v\\0\\311C\\v\\0\"..., 4096) = 4096\nbrk(0x739000)                           = 0x739000\nread(3, \"ee\\v\\0me\\v\\0we\\v\\0\\177e\\v\\0\\207e\\v\\0\\217e\\v\\0\\231e\\v\\0\\241e\\v\\0\"..., 4096) = 4096\nread(3, \"5\\207\\v\\0=\\207\\v\\0G\\207\\v\\0O\\207\\v\\0W\\207\\v\\0_\\207\\v\\0i\\207\\v\\0q\\207\\v\\0\"..., 4096) = 4096\nread(3, \"\\374\\250\\v\\0\\4\\251\\v\\0\\f\\251\\v\\0\\26\\251\\v\\0\\36\\251\\v\\0&\\251\\v\\0.\\251\\v\\0008\\251\\v\\0\"..., 4096) = 4096\nread(3, \"\\273\\312\\v\\0\\303\\312\\v\\0\\315\\312\\v\\0\\325\\312\\v\\0\\335\\312\\v\\0\\345\\312\\v\\0\\357\\312\\v\\0\\367\\312\\v\\0\"..., 4096) = 4096\nbrk(0x75a000)                           = 0x75a000\nread(3, \"\\212\\354\\v\\0\\222\\354\\v\\0\\232\\354\\v\\0\\244\\354\\v\\0\\254\\354\\v\\0\\264\\354\\v\\0\\274\\354\\v\\0\\306\\354\\v\\0\"..., 4096) = 4096\nread(3, \"U\\16\\f\\0_\\16\\f\\0g\\16\\f\\0o\\16\\f\\0w\\16\\f\\0\\201\\16\\f\\0\\211\\16\\f\\0\\221\\16\\f\\0\"..., 4096) = 4096\nread(3, \"36\\f\\0=6\\f\\0F6\\f\\0P6\\f\\0Y6\\f\\0c6\\f\\0l6\\f\\0v6\\f\\0\"..., 4096) = 4096\nread(3, \"3\\\\\\f\\0=\\\\\\f\\0F\\\\\\f\\0P\\\\\\f\\0Y\\\\\\f\\0c\\\\\\f\\0l\\\\\\f\\0v\\\\\\f\\0\"..., 4096) = 4096\nbrk(0x77b000)                           = 0x77b000\nread(3, \"3\\202\\f\\0=\\202\\f\\0F\\202\\f\\0P\\202\\f\\0Y\\202\\f\\0c\\202\\f\\0l\\202\\f\\0v\\202\\f\\0\"..., 4096) = 4096\nread(3, \"3\\250\\f\\0=\\250\\f\\0F\\250\\f\\0P\\250\\f\\0Y\\250\\f\\0c\\250\\f\\0l\\250\\f\\0v\\250\\f\\0\"..., 4096) = 4096\nread(3, \"3\\316\\f\\0=\\316\\f\\0F\\316\\f\\0P\\316\\f\\0Y\\316\\f\\0c\\316\\f\\0l\\316\\f\\0v\\316\\f\\0\"..., 4096) = 4096\nread(3, \"z-\\r\\0r-\\r\\0\\202-\\r\\0\\16.\\r\\0\\26.\\r\\0&.\\r\\0\\36.\\r\\0..\\r\\0\"..., 4096) = 4096\nread(3, \"&\\267\\r\\0006\\267\\r\\0.\\267\\r\\0>\\267\\r\\0\\312\\267\\r\\0\\322\\267\\r\\0\\342\\267\\r\\0\\332\\267\\r\\0\"..., 4096) = 4096\nbrk(0x79c000)                           = 0x79c000\nread(3, \"\\332@\\16\\0\\342@\\16\\0\\362@\\16\\0\\352@\\16\\0\\372@\\16\\0\\206A\\16\\0\\216A\\16\\0\\236A\\16\\0\"..., 4096) = 4096\nread(3, \"\\n\\312\\16\\0\\226\\312\\16\\0\\236\\312\\16\\0\\256\\312\\16\\0\\246\\312\\16\\0\\266\\312\\16\\0B\\313\\16\\0J\\313\\16\\0\"..., 4096) = 4096\nread(3, \"\\266S\\17\\0\\306S\\17\\0RT\\17\\0ZT\\17\\0jT\\17\\0bT\\17\\0rT\\17\\0\\376T\\17\\0\"..., 4096) = 4096\nread(3, \"z\\335\\17\\0r\\335\\17\\0\\202\\335\\17\\0\\16\\336\\17\\0\\26\\336\\17\\0&\\336\\17\\0\\36\\336\\17\\0.\\336\\17\\0\"..., 4096) = 4096\nbrk(0x7bd000)                           = 0x7bd000\nread(3, \"&g\\20\\0006g\\20\\0.g\\20\\0>g\\20\\0\\312g\\20\\0\\322g\\20\\0\\342g\\20\\0\\332g\\20\\0\"..., 4096) = 4096\nread(3, \"\\332\\360\\20\\0\\342\\360\\20\\0\\362\\360\\20\\0\\352\\360\\20\\0\\372\\360\\20\\0\\206\\361\\20\\0\\216\\361\\20\\0\\236\\361\\20\\0\"..., 4096) = 4096\nread(3, \"\\nz\\21\\0\\226z\\21\\0\\236z\\21\\0\\256z\\21\\0\\246z\\21\\0\\266z\\21\\0B{\\21\\0J{\\21\\0\"..., 4096) = 4096\nread(3, \"\\266\\3\\22\\0\\306\\3\\22\\0R\\4\\22\\0Z\\4\\22\\0j\\4\\22\\0b\\4\\22\\0r\\4\\22\\0\\376\\4\\22\\0\"..., 4096) = 4096\nbrk(0x7de000)                           = 0x7de000\nread(3, \"z\\215\\22\\0r\\215\\22\\0\\202\\215\\22\\0\\16\\216\\22\\0\\26\\216\\22\\0&\\216\\22\\0\\36\\216\\22\\0.\\216\\22\\0\"..., 4096) = 4096\nread(3, \"&\\27\\23\\0006\\27\\23\\0.\\27\\23\\0>\\27\\23\\0\\312\\27\\23\\0\\322\\27\\23\\0\\342\\27\\23\\0\\332\\27\\23\\0\"..., 4096) = 4096\nread(3, \"\\332\\240\\23\\0\\342\\240\\23\\0\\362\\240\\23\\0\\352\\240\\23\\0\\372\\240\\23\\0\\206\\241\\23\\0\\216\\241\\23\\0\\236\\241\\23\\0\"..., 4096) = 4096\nread(3, \"\\n*\\24\\0\\226*\\24\\0\\236*\\24\\0\\256*\\24\\0\\246*\\24\\0\\266*\\24\\0B+\\24\\0J+\\24\\0\"..., 4096) = 4096\nbrk(0x7ff000)                           = 0x7ff000\nread(3, \"f\\252\\30\\0~\\257\\30\\0\\206\\257\\30\\0\\216\\257\\30\\0\\246\\264\\30\\0\\256\\264\\30\\0\\266\\264\\30\\0\\366\\276\\30\\0\"..., 4096) = 4096\nread(3, \"\\346\\301%\\0\\356\\301%\\0\\366\\301%\\0006\\314%\\0>\\314%\\0F\\314%\\0\\206\\326%\\0\\216\\326%\\0\"..., 4096) = 4096\nread(3, \"~~3\\0\\206~3\\0\\306\\2103\\0\\316\\2103\\0\\326\\2103\\0\\26\\2233\\0\\36\\2233\\0&\\2233\\0\"..., 4096) = 4096\nread(3, \"\\26;A\\0VEA\\0^EA\\0fEA\\0\\246OA\\0\\256OA\\0\\266OA\\0\\366YA\\0\"..., 4096) = 4096\nbrk(0x820000)                           = 0x820000\nread(3, \"\\346\\1O\\0\\356\\1O\\0\\366\\1O\\0006\\fO\\0>\\fO\\0F\\fO\\0\\206\\26O\\0\\216\\26O\\0\"..., 4096) = 4096\nread(3, \"~\\276\\\\\\0\\206\\276\\\\\\0\\306\\310\\\\\\0\\316\\310\\\\\\0\\326\\310\\\\\\0\\26\\323\\\\\\0\\36\\323\\\\\\0&\\323\\\\\\0\"..., 4096) = 4096\nread(3, \"\\26{j\\0V\\205j\\0^\\205j\\0f\\205j\\0\\246\\217j\\0\\256\\217j\\0\\266\\217j\\0\\366\\231j\\0\"..., 4096) = 4096\nread(3, \"\\346Ax\\0\\356Ax\\0\\366Ax\\0006Lx\\0>Lx\\0FLx\\0\\206Vx\\0\\216Vx\\0\"..., 4096) = 4096\nbrk(0x841000)                           = 0x841000\nread(3, \"~\\376\\205\\0\\206\\376\\205\\0\\306\\10\\206\\0\\316\\10\\206\\0\\326\\10\\206\\0\\26\\23\\206\\0\\36\\23\\206\\0&\\23\\206\\0\"..., 4096) = 4096\nread(3, \"j7\\207\\0r7\\207\\0\\2027\\207\\0\\2127\\207\\0\\2627\\207\\0\\2727\\207\\0\\3127\\207\\0\\3227\\207\\0\"..., 4096) = 4096\nread(3, \"j\\177\\207\\0r\\177\\207\\0\\202\\177\\207\\0\\212\\177\\207\\0\\262\\177\\207\\0\\272\\177\\207\\0\\312\\177\\207\\0\\322\\177\\207\\0\"..., 4096) = 4096\nread(3, \"j\\307\\207\\0r\\307\\207\\0\\202\\307\\207\\0\\212\\307\\207\\0\\262\\307\\207\\0\\272\\307\\207\\0\\312\\307\\207\\0\\322\\307\\207\\0\"..., 4096) = 4096\nbrk(0x862000)                           = 0x862000\nread(3, \"j\\17\\210\\0r\\17\\210\\0\\202\\17\\210\\0\\212\\17\\210\\0\\262\\17\\210\\0\\272\\17\\210\\0\\312\\17\\210\\0\\322\\17\\210\\0\"..., 4096) = 4096\nread(3, \"jW\\210\\0rW\\210\\0\\202W\\210\\0\\212W\\210\\0\\262W\\210\\0\\272W\\210\\0\\312W\\210\\0\\322W\\210\\0\"..., 4096) = 4096\nread(3, \"j\\237\\210\\0r\\237\\210\\0\\202\\237\\210\\0\\212\\237\\210\\0\\262\\237\\210\\0\\272\\237\\210\\0\\312\\237\\210\\0\\322\\237\\210\\0\"..., 4096) = 4096\nread(3, \"j\\347\\210\\0r\\347\\210\\0\\202\\347\\210\\0\\212\\347\\210\\0\\262\\347\\210\\0\\272\\347\\210\\0\\312\\347\\210\\0\\322\\347\\210\\0\"..., 4096) = 4096\nbrk(0x883000)                           = 0x883000\nread(3, \"j/\\211\\0r/\\211\\0\\202/\\211\\0\\212/\\211\\0\\262/\\211\\0\\272/\\211\\0\\312/\\211\\0\\322/\\211\\0\"..., 4096) = 4096\nread(3, \"jw\\211\\0rw\\211\\0\\202w\\211\\0\\212w\\211\\0\\262w\\211\\0\\272w\\211\\0\\312w\\211\\0\\322w\\211\\0\"..., 4096) = 4096\nread(3, \"j\\277\\211\\0r\\277\\211\\0\\202\\277\\211\\0\\212\\277\\211\\0\\262\\277\\211\\0\\272\\277\\211\\0\\312\\277\\211\\0\\322\\277\\211\\0\"..., 4096) = 4068\nclose(3)                                = 0\nmunmap(0x7f0535d8e000, 4096)            = 0\nstat(\".\", {st_mode=S_IFDIR|0755, st_size=3, ...}) = 0\nstatfs(\"/dev/shm\", {f_type=0x1021994, f_bsize=4096, f_blocks=842680, f_bfree=842636, f_bavail=842636, f_files=2041047, f_ffree=2041029, f_fsid={0, 0}, f_namelen=255, f_frsize=4096}) = 0\nfutex(0x7f0535b712dc, FUTEX_WAKE_PRIVATE, 2147483647) = 0\nopen(\"/dev/shm/sem.semaphore\", O_RDWR|O_NOFOLLOW) = -1 ENOENT (No such file or directory)\nlstat(\"/dev/shm/sem.2CBC9Y\", 0x7ffde86cc220) = -1 ENOENT (No such file or directory)\nopen(\"/dev/shm/sem.2CBC9Y\", O_RDWR|O_CREAT|O_EXCL, 0400) = 3\nwrite(3, \"\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\", 32) = 32\nmmap(NULL, 32, PROT_READ|PROT_WRITE, MAP_SHARED, 3, 0) = 0x7f0535d8e000\nlink(\"/dev/shm/sem.2CBC9Y\", \"/dev/shm/sem.semaphore\") = 0\nfstat(3, {st_mode=S_IFREG|0400, st_size=32, ...}) = 0\nunlink(\"/dev/shm/sem.2CBC9Y\")           = 0\nclose(3)                                = 0\nunlink(\"/dev/shm/sem.semaphore\")        = 0\nopen(\"/dev/shm/sem.semaphore\", O_RDWR|O_NOFOLLOW) = -1 ENOENT (No such file or directory)\nlstat(\"/dev/shm/sem.Yx510L\", 0x7ffde86cc230) = -1 ENOENT (No such file or directory)\nopen(\"/dev/shm/sem.Yx510L\", O_RDWR|O_CREAT|O_EXCL, 0400) = 3\nwrite(3, \"@\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\", 32) = 32\nmmap(NULL, 32, PROT_READ|PROT_WRITE, MAP_SHARED, 3, 0) = 0x7f0535d8d000\nlink(\"/dev/shm/sem.Yx510L\", \"/dev/shm/sem.semaphore\") = 0\nfstat(3, {st_mode=S_IFREG|0400, st_size=32, ...}) = 0\nunlink(\"/dev/shm/sem.Yx510L\")           = 0\nclose(3)                                = 0\nunlink(\"/dev/shm/sem.semaphore\")        = 0\nmmap(NULL, 8392704, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS|MAP_STACK, -1, 0) = 0x7f0534095000\nmprotect(0x7f0534095000, 4096, PROT_NONE) = 0\nclone(child_stack=0x7f0534894ff0, flags=CLONE_VM|CLONE_FS|CLONE_FILES|CLONE_SIGHAND|CLONE_THREAD|CLONE_SYSVSEM|CLONE_SETTLS|CLONE_PARENT_SETTID|CLONE_CHILD_CLEARTID, parent_tidptr=0x7f05348959d0, tls=0x7f0534895700, child_tidptr=0x7f05348959d0) = 24946\nmmap(NULL, 8392704, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS|MAP_STACK, -1, 0) = 0x7f0533894000\nmprotect(0x7f0533894000, 4096, PROT_NONE) = 0\nclone(child_stack=0x7f0534093ff0, flags=CLONE_VM|CLONE_FS|CLONE_FILES|CLONE_SIGHAND|CLONE_THREAD|CLONE_SYSVSEM|CLONE_SETTLS|CLONE_PARENT_SETTID|CLONE_CHILD_CLEARTID, parent_tidptr=0x7f05340949d0, tls=0x7f0534094700, child_tidptr=0x7f05340949d0) = 24947\nmmap(NULL, 8392704, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS|MAP_STACK, -1, 0) = 0x7f0533093000\nmprotect(0x7f0533093000, 4096, PROT_NONE) = 0\nclone(child_stack=0x7f0533892ff0, flags=CLONE_VM|CLONE_FS|CLONE_FILES|CLONE_SIGHAND|CLONE_THREAD|CLONE_SYSVSEM|CLONE_SETTLS|CLONE_PARENT_SETTID|CLONE_CHILD_CLEARTID, parent_tidptr=0x7f05338939d0, tls=0x7f0533893700, child_tidptr=0x7f05338939d0) = 24948\nmmap(NULL, 8392704, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS|MAP_STACK, -1, 0) = 0x7f0532892000\nmprotect(0x7f0532892000, 4096, PROT_NONE) = 0\nclone(child_stack=0x7f0533091ff0, flags=CLONE_VM|CLONE_FS|CLONE_FILES|CLONE_SIGHAND|CLONE_THREAD|CLONE_SYSVSEM|CLONE_SETTLS|CLONE_PARENT_SETTID|CLONE_CHILD_CLEARTID, parent_tidptr=0x7f05330929d0, tls=0x7f0533092700, child_tidptr=0x7f05330929d0) = 24949\nmmap(NULL, 8392704, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS|MAP_STACK, -1, 0) = 0x7f0532091000\nmprotect(0x7f0532091000, 4096, PROT_NONE) = 0\nclone(child_stack=0x7f0532890ff0, flags=CLONE_VM|CLONE_FS|CLONE_FILES|CLONE_SIGHAND|CLONE_THREAD|CLONE_SYSVSEM|CLONE_SETTLS|CLONE_PARENT_SETTID|CLONE_CHILD_CLEARTID, parent_tidptr=0x7f05328919d0, tls=0x7f0532891700, child_tidptr=0x7f05328919d0) = 24950\nmmap(NULL, 8392704, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS|MAP_STACK, -1, 0) = 0x7f0531890000\nmprotect(0x7f0531890000, 4096, PROT_NONE) = 0\nclone(child_stack=0x7f053208fff0, flags=CLONE_VM|CLONE_FS|CLONE_FILES|CLONE_SIGHAND|CLONE_THREAD|CLONE_SYSVSEM|CLONE_SETTLS|CLONE_PARENT_SETTID|CLONE_CHILD_CLEARTID, parent_tidptr=0x7f05320909d0, tls=0x7f0532090700, child_tidptr=0x7f05320909d0) = 24951\nmmap(NULL, 8392704, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS|MAP_STACK, -1, 0) = 0x7f053108f000\nmprotect(0x7f053108f000, 4096, PROT_NONE) = 0\nclone(child_stack=0x7f053188eff0, flags=CLONE_VM|CLONE_FS|CLONE_FILES|CLONE_SIGHAND|CLONE_THREAD|CLONE_SYSVSEM|CLONE_SETTLS|CLONE_PARENT_SETTID|CLONE_CHILD_CLEARTID, parent_tidptr=0x7f053188f9d0, tls=0x7f053188f700, child_tidptr=0x7f053188f9d0) = 24952\nmmap(NULL, 8392704, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS|MAP_STACK, -1, 0) = 0x7f053088e000\nmprotect(0x7f053088e000, 4096, PROT_NONE) = 0\nclone(child_stack=0x7f053108dff0, flags=CLONE_VM|CLONE_FS|CLONE_FILES|CLONE_SIGHAND|CLONE_THREAD|CLONE_SYSVSEM|CLONE_SETTLS|CLONE_PARENT_SETTID|CLONE_CHILD_CLEARTID, parent_tidptr=0x7f053108e9d0, tls=0x7f053108e700, child_tidptr=0x7f053108e9d0) = 24953\nopen(\".\", O_RDONLY|O_NONBLOCK|O_DIRECTORY|O_CLOEXEC) = 3\ngetdents(3, /* 3 entries */, 32768)     = 80\nlstat(\"./.\", {st_mode=S_IFDIR|0755, st_size=3, ...}) = 0\nlstat(\"./..\", {st_mode=S_IFDIR|0705, st_size=14, ...}) = 0\nlstat(\"./hack.php\", {st_mode=S_IFREG|S_ISGID|0640, st_size=0, ...}) = 0\nfutex(0x7f0535d8e000, FUTEX_WAKE, 1)    = 1\ngetdents(3, /* 0 entries */, 32768)     = 0\nclose(3)                                = 0\nfutex(0x7f0535d8e000, FUTEX_WAKE, 1)    = 1\nfutex(0x7f0535d8e000, FUTEX_WAKE, 1)    = 1\nfutex(0x7f0535d8e000, FUTEX_WAKE, 1)    = 1\nfutex(0x7f0535d8e000, FUTEX_WAKE, 1)    = 1\nfutex(0x7f0535d8e000, FUTEX_WAKE, 1)    = 1\nfutex(0x7f0535d8e000, FUTEX_WAKE, 1)    = 1\nfutex(0x7f0535d8e000, FUTEX_WAKE, 1)    = 1\nfutex(0x7f0535d8e000, FUTEX_WAKE, 1)    = 0\nfutex(0x7f0535d8e000, FUTEX_WAKE, 1)    = 0\nfutex(0x7f0535d8e000, FUTEX_WAKE, 1)    = 0\nfutex(0x7f05348959d0, FUTEX_WAIT, 24946, NULLError scanning ./hack.php: could not open file\n) = 0\nmunmap(0x7f0534095000, 8392704)         = 0\nmunmap(0x7f0533894000, 8392704)         = 0\nmunmap(0x7f0533093000, 8392704)         = 0\nmunmap(0x7f0532892000, 8392704)         = 0\nmunmap(0x7f0535d8d000, 32)              = 0\nmunmap(0x7f0535d8e000, 32)              = 0\nmunmap(0x7f0534896000, 9437184)         = 0\nexit_group(0)                           = ?\nstrace cat:\nexecve(\"/bin/cat\", [\"cat\", \"hack.php\"], [/* 20 vars */]) = 0\nbrk(0)                                  = 0x60cc90\naccess(\"/etc/ld.so.nohwcap\", F_OK)      = -1 ENOENT (No such file or directory)\nmmap(NULL, 8192, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7f7f71510000\naccess(\"/etc/ld.so.preload\", R_OK)      = -1 ENOENT (No such file or directory)\nopen(\"/etc/ld.so.cache\", O_RDONLY)      = 3\nfstat(3, {st_mode=S_IFREG|0644, st_size=19746, ...}) = 0\nmmap(NULL, 19746, PROT_READ, MAP_PRIVATE, 3, 0) = 0x7f7f7150b000\nclose(3)                                = 0\naccess(\"/etc/ld.so.nohwcap\", F_OK)      = -1 ENOENT (No such file or directory)\nopen(\"/lib/x86_64-linux-gnu/libc.so.6\", O_RDONLY) = 3\nread(3, \"\\177ELF\\2\\1\\1\\0\\0\\0\\0\\0\\0\\0\\0\\0\\3\\0>\\0\\1\\0\\0\\0\\300\\357\\1\\0\\0\\0\\0\\0\"..., 832) = 832\nfstat(3, {st_mode=S_IFREG|0755, st_size=1607696, ...}) = 0\nmmap(NULL, 3721272, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_DENYWRITE, 3, 0) = 0x7f7f70f66000\nmprotect(0x7f7f710ea000, 2093056, PROT_NONE) = 0\nmmap(0x7f7f712e9000, 20480, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x183000) = 0x7f7f712e9000\nmmap(0x7f7f712ee000, 18488, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_ANONYMOUS, -1, 0) = 0x7f7f712ee000\nclose(3)                                = 0\nmmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7f7f7150a000\nmmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7f7f71509000\nmmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7f7f71508000\narch_prctl(ARCH_SET_FS, 0x7f7f71509700) = 0\nmprotect(0x7f7f712e9000, 16384, PROT_READ) = 0\nmprotect(0x60b000, 4096, PROT_READ)     = 0\nmprotect(0x7f7f71512000, 4096, PROT_READ) = 0\nmunmap(0x7f7f7150b000, 19746)           = 0\nbrk(0)                                  = 0x60cc90\nbrk(0x62dc90)                           = 0x62dc90\nbrk(0x62e000)                           = 0x62e000\nopen(\"/usr/lib/locale/locale-archive\", O_RDONLY) = -1 ENOENT (No such file or directory)\nopen(\"/usr/share/locale/locale.alias\", O_RDONLY) = 3\nfstat(3, {st_mode=S_IFREG|0644, st_size=2570, ...}) = 0\nmmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7f7f7150f000\nread(3, \"# Locale name alias data base.\\n#\"..., 4096) = 2570\nread(3, \"\", 4096)                       = 0\nclose(3)                                = 0\nmunmap(0x7f7f7150f000, 4096)            = 0\nopen(\"/usr/lib/locale/en_US.UTF-8/LC_IDENTIFICATION\", O_RDONLY) = -1 ENOENT (No such file or directory)\nopen(\"/usr/lib/locale/en_US.utf8/LC_IDENTIFICATION\", O_RDONLY) = 3\nfstat(3, {st_mode=S_IFREG|0644, st_size=373, ...}) = 0\nmmap(NULL, 373, PROT_READ, MAP_PRIVATE, 3, 0) = 0x7f7f7150f000\nclose(3)                                = 0\nopen(\"/usr/lib/x86_64-linux-gnu/gconv/gconv-modules.cache\", O_RDONLY) = 3\nfstat(3, {st_mode=S_IFREG|0644, st_size=26066, ...}) = 0\nmmap(NULL, 26066, PROT_READ, MAP_SHARED, 3, 0) = 0x7f7f71501000\nclose(3)                                = 0\nopen(\"/usr/lib/locale/en_US.UTF-8/LC_MEASUREMENT\", O_RDONLY) = -1 ENOENT (No such file or directory)\nopen(\"/usr/lib/locale/en_US.utf8/LC_MEASUREMENT\", O_RDONLY) = 3\nfstat(3, {st_mode=S_IFREG|0644, st_size=23, ...}) = 0\nmmap(NULL, 23, PROT_READ, MAP_PRIVATE, 3, 0) = 0x7f7f7150e000\nclose(3)                                = 0\nopen(\"/usr/lib/locale/en_US.UTF-8/LC_TELEPHONE\", O_RDONLY) = -1 ENOENT (No such file or directory)\nopen(\"/usr/lib/locale/en_US.utf8/LC_TELEPHONE\", O_RDONLY) = 3\nfstat(3, {st_mode=S_IFREG|0644, st_size=59, ...}) = 0\nmmap(NULL, 59, PROT_READ, MAP_PRIVATE, 3, 0) = 0x7f7f7150d000\nclose(3)                                = 0\nopen(\"/usr/lib/locale/en_US.UTF-8/LC_ADDRESS\", O_RDONLY) = -1 ENOENT (No such file or directory)\nopen(\"/usr/lib/locale/en_US.utf8/LC_ADDRESS\", O_RDONLY) = 3\nfstat(3, {st_mode=S_IFREG|0644, st_size=155, ...}) = 0\nmmap(NULL, 155, PROT_READ, MAP_PRIVATE, 3, 0) = 0x7f7f7150c000\nclose(3)                                = 0\nopen(\"/usr/lib/locale/en_US.UTF-8/LC_NAME\", O_RDONLY) = -1 ENOENT (No such file or directory)\nopen(\"/usr/lib/locale/en_US.utf8/LC_NAME\", O_RDONLY) = 3\nfstat(3, {st_mode=S_IFREG|0644, st_size=77, ...}) = 0\nmmap(NULL, 77, PROT_READ, MAP_PRIVATE, 3, 0) = 0x7f7f7150b000\nclose(3)                                = 0\nopen(\"/usr/lib/locale/en_US.UTF-8/LC_PAPER\", O_RDONLY) = -1 ENOENT (No such file or directory)\nopen(\"/usr/lib/locale/en_US.utf8/LC_PAPER\", O_RDONLY) = 3\nfstat(3, {st_mode=S_IFREG|0644, st_size=34, ...}) = 0\nmmap(NULL, 34, PROT_READ, MAP_PRIVATE, 3, 0) = 0x7f7f71500000\nclose(3)                                = 0\nopen(\"/usr/lib/locale/en_US.UTF-8/LC_MESSAGES\", O_RDONLY) = -1 ENOENT (No such file or directory)\nopen(\"/usr/lib/locale/en_US.utf8/LC_MESSAGES\", O_RDONLY) = 3\nfstat(3, {st_mode=S_IFDIR|0755, st_size=4096, ...}) = 0\nclose(3)                                = 0\nopen(\"/usr/lib/locale/en_US.utf8/LC_MESSAGES/SYS_LC_MESSAGES\", O_RDONLY) = 3\nfstat(3, {st_mode=S_IFREG|0644, st_size=57, ...}) = 0\nmmap(NULL, 57, PROT_READ, MAP_PRIVATE, 3, 0) = 0x7f7f714ff000\nclose(3)                                = 0\nopen(\"/usr/lib/locale/en_US.UTF-8/LC_MONETARY\", O_RDONLY) = -1 ENOENT (No such file or directory)\nopen(\"/usr/lib/locale/en_US.utf8/LC_MONETARY\", O_RDONLY) = 3\nfstat(3, {st_mode=S_IFREG|0644, st_size=286, ...}) = 0\nmmap(NULL, 286, PROT_READ, MAP_PRIVATE, 3, 0) = 0x7f7f714fe000\nclose(3)                                = 0\nopen(\"/usr/lib/locale/en_US.UTF-8/LC_COLLATE\", O_RDONLY) = -1 ENOENT (No such file or directory)\nopen(\"/usr/lib/locale/en_US.utf8/LC_COLLATE\", O_RDONLY) = 3\nfstat(3, {st_mode=S_IFREG|0644, st_size=1170770, ...}) = 0\nmmap(NULL, 1170770, PROT_READ, MAP_PRIVATE, 3, 0) = 0x7f7f713e0000\nclose(3)                                = 0\nopen(\"/usr/lib/locale/en_US.UTF-8/LC_TIME\", O_RDONLY) = -1 ENOENT (No such file or directory)\nopen(\"/usr/lib/locale/en_US.utf8/LC_TIME\", O_RDONLY) = 3\nfstat(3, {st_mode=S_IFREG|0644, st_size=2454, ...}) = 0\nmmap(NULL, 2454, PROT_READ, MAP_PRIVATE, 3, 0) = 0x7f7f713df000\nclose(3)                                = 0\nopen(\"/usr/lib/locale/en_US.UTF-8/LC_NUMERIC\", O_RDONLY) = -1 ENOENT (No such file or directory)\nopen(\"/usr/lib/locale/en_US.utf8/LC_NUMERIC\", O_RDONLY) = 3\nfstat(3, {st_mode=S_IFREG|0644, st_size=54, ...}) = 0\nmmap(NULL, 54, PROT_READ, MAP_PRIVATE, 3, 0) = 0x7f7f713de000\nclose(3)                                = 0\nopen(\"/usr/lib/locale/en_US.UTF-8/LC_CTYPE\", O_RDONLY) = -1 ENOENT (No such file or directory)\nopen(\"/usr/lib/locale/en_US.utf8/LC_CTYPE\", O_RDONLY) = 3\nfstat(3, {st_mode=S_IFREG|0644, st_size=256360, ...}) = 0\nmmap(NULL, 256360, PROT_READ, MAP_PRIVATE, 3, 0) = 0x7f7f7139f000\nclose(3)                                = 0\nfstat(1, {st_mode=S_IFCHR|0600, st_rdev=makedev(136, 0), ...}) = 0\nopen(\"hack.php\", O_RDONLY)              = -1 EACCES (Permission denied)\nwrite(2, \"cat: \", 5cat: )                    = 5\nwrite(2, \"hack.php\", 8hack.php)                 = 8\nopen(\"/usr/share/locale/en_US.UTF-8/LC_MESSAGES/libc.mo\", O_RDONLY) = -1 ENOENT (No such file or directory)\nopen(\"/usr/share/locale/en_US.utf8/LC_MESSAGES/libc.mo\", O_RDONLY) = -1 ENOENT (No such file or directory)\nopen(\"/usr/share/locale/en_US/LC_MESSAGES/libc.mo\", O_RDONLY) = -1 ENOENT (No such file or directory)\nopen(\"/usr/share/locale/en.UTF-8/LC_MESSAGES/libc.mo\", O_RDONLY) = -1 ENOENT (No such file or directory)\nopen(\"/usr/share/locale/en.utf8/LC_MESSAGES/libc.mo\", O_RDONLY) = -1 ENOENT (No such file or directory)\nopen(\"/usr/share/locale/en/LC_MESSAGES/libc.mo\", O_RDONLY) = -1 ENOENT (No such file or directory)\nwrite(2, \": Permission denied\", 19: Permission denied)     = 19\nwrite(2, \"\\n\", 1\n)                       = 1\nclose(1)                                = 0\nclose(2)                                = 0\nexit_group(1)                           = ?\nI'm asking again, have you had a chance to reproduce the issue ?\nWhat happens if you run yara on a file set with these permissions ?. Ok, I think we spotted the issue. The hacked file is actually located on a NFS-mounted storage, which its ACL prevents file read/execution (option \"nosuid\").\nman mount:\nnosuid Do not allow set-user-identifier or set-group-identifier bits to take effect. (This seems safe, but is in fact rather unsafe  if you have suidperl(1) installed.))\nThe fact the file can be scanned when GIUD bit is set to executable (lowercase \"s\") is still a mystery to me...\nFinally, I copied the file to /tmp and was able to run Yara on it so the issue is caused by a conflict with our ACLs, not yara.\nMy apologies for the noise guys =/. ",
    "jvoisin": "Does someone have some benchmark to share about this?\nFor the reccord, the commit implementing this behaviour is 22ce5e09dd49ccfb175524e8c6066984d1ecfb63.. It seems that you screwed the indentation here.. ",
    "diwoky": "Thank you for explanation, I think issue can be closed.. ",
    "stephenwvickers": "Hi @trufae\nI will be looking to do this as an independent npmjs module myself fairly soon.\nIf you have any specific requirements i would.love to hear them.\nSteve. Hi @trufae \nNode.js bindings for YARA are now available at:\nhttps://www.npmjs.com/package/yara\n@plusvic You can probably close this ticket now.\nSteve. Hi @trufae \nSince this is now a node-yara module issue can I please ask you open an issue under that GitLab repo:\nhttps://github.com/stephenwvickers/node-yara\nFor context I will answer here initially.\nThis first version supports Linux platforms only, I have pointed this out in the docs.\nIf you do absolutely need Mac OS support, and you are willing to work with me to test a release once it is implemented, then please open an issue under the node-yara repo given above.\nThanks\nSteve. ",
    "trufae": "npm install yara fails in mac.\n\nOn 29 Apr 2017, at 10:16, Victor M. Alvarez notifications@github.com wrote:\nClosed #598.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. thanks! i have send a PR fixing a bunch of syntax issues and porting it to\nOSX\n\nOn Sat, Apr 29, 2017 at 7:58 PM, Stephen Vickers notifications@github.com\nwrote:\n\nHi @trufae https://github.com/trufae\nSince this is now a node-yara module issue can I please ask you open an\nissue under that GitLab repo:\nhttps://github.com/stephenwvickers/node-yara\nFor context I will answer here initially.\nThis first version supports Linux platforms only, I have pointed this out\nin the docs.\nIf you do absolutely need Mac OS support, and you are willing to work with\nme to test a release once it is implemented, then please open an issue\nunder the node-yara repo given above.\nThanks\nSteve\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/VirusTotal/yara/issues/598#issuecomment-298184349,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AGIjG0JLMyvs_7KS2T-aNynCbFjotlLUks5r03pcgaJpZM4LtuGR\n.\n. Fixed using the 2nd option but setting up the proper CFLAGS/LDFLAGS before running configure in https://github.com/radare/radare2-extras/commit/2c06304977477a94f51a5da092d87cfd754b8ddf\n. this sohuld be checked by configure imho\nOn 06 Feb 2017, at 16:23, Florian Roth notifications@github.com wrote:\nOption 1\nhttps://yara.readthedocs.io/en/v3.5.0/gettingstarted.html#installing-on-mac-os-x-with-homebrew https://yara.readthedocs.io/en/v3.5.0/gettingstarted.html#installing-on-mac-os-x-with-homebrew\nOption 2\nInstall OpenSSL via Homebrew\n$ brew update \n$ which openssl\n/usr/bin/openssl \n$ brew install openssl\n$ brew link openssl --force \n$ which openssl \n/usr/local/bin/openssl\nOption 3\nDisable OpenSSL.\n./configure --disable-shared --disable-magic --disable-cuckoo --without-crypto\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub https://github.com/VirusTotal/yara/issues/603#issuecomment-277714804, or mute the thread https://github.com/notifications/unsubscribe-auth/AGIjG3C--0AoZS0D8cdfi2JtcLDzvz16ks5rZzrVgaJpZM4L4S4q.\n\n\n. Fails to build on windows because of this:\nlibtool: compile:  x86_64-w64-mingw32-gcc -DPACKAGE_NAME=\\\"yara\\\" -DPACKAGE_TARNAME=\\\"yara\\\" -DPACKAGE_VERSION=\\\"3.6.0\\\" \"-DPACKAGE_STRING=\\\"yara 3.6.0\\\"\" -DPACKAGE_BUGREPORT=\\\"vmalvarez@virustotal.com\\\" -DPACKAGE_URL=\\\"\\\" -DPACKAGE=\\\"yara\\\" -DVERSION=\\\"3.6.0\\\" -DSTDC_HEADERS=1 -DHAVE_SYS_TYPES_H=1 -DHAVE_SYS_STAT_H=1 -DHAVE_STDLIB_H=1 -DHAVE_STRING_H=1 -DHAVE_MEMORY_H=1 -DHAVE_STRINGS_H=1 -DHAVE_INTTYPES_H=1 -DHAVE_STDINT_H=1 -DHAVE_UNISTD_H=1 -DLT_OBJDIR=\\\".libs/\\\" -DHAVE_LIBM=1 -DHAVE_LIBM=1 -I. -Wall -Wno-deprecated-declarations -std=gnu99 -I./include -O3 -fvisibility=hidden -MT modules/dex.lo -MD -MP -MF modules/.deps/dex.Tpo -c modules/dex.c  -DDLL_EXPORT -DPIC -o modules/.libs/dex.o\nIn file included from /usr/lib/gcc/x86_64-w64-mingw32/4.8/include/stddef.h:1:0,\n                 from /usr/share/mingw-w64/include/stdint.h:32,\n                 from /usr/lib/gcc/x86_64-w64-mingw32/4.8/include/stdint.h:9,\n                 from modules/dex.c:2:\nmodules/dex.c:203:12: error: static declaration of \u2018_errno\u2019 follows non-static declaration\n static int errno;\n            ^\n/usr/share/mingw-w64/include/stddef.h:18:31: note: previous declaration of \u2018_errno\u2019 was here\n   _CRTIMP extern int *__cdecl _errno(void);\n                               ^\nmodules/dex.c:203:12: warning: \u2018_errno\u2019 used but never defined [enabled by default]\n static int errno;\n            ^\nmake[1]: *** [modules/dex.lo] Error 1\nmake[1]: Leaving directory `/home/travis/build/VirusTotal/yara/libyara'\nmake: *** [all-recursive] Error 1\napart from this it lgtm. use different variable name, errno is suposed to be used by libc not by the library code. that looks red for appveyour and it cant be merged because there are conflicts with master, pls update. lgtm. Looks good to merge for me! cc @plusvic . @plusvic ? there are tons of prs that lgtm and are green for a long time, anything missing to merge?. looks green for travis, but there are still comments from my review that havent been fixed. and cant be merged because of conflicts, pls review. PRs shouldnt take ages to be merged :((. i think its ok to merge as it is, other modules got merged with much less review and those tiny issues only affect when working with kernel mach0s and can be fixed after that with proper tests. ```\n$ ls\nrules.yar test.txt\n$ cat test.txt\nfoofoobar\n$ cat rules.yar\nrule regex : bug {\n    meta:\n        author = \"pancake\"\n    strings:\n        $regex = /foo([^\\ ]*)/\n    condition:\n        all of them\n}\n$ yara -s rules.yar test.txt\nregex test.txt\n0x0:$regex: foofoobar\\x0A\n0x3:$regex: foobar\\x0A\n``. yes, that would be fine for me, in r2 this is done withe search.overlap=false`. i understand that this shouldnt be an option enabled by default. but it makes sense for my use cases where i just want to quickly identify files instead of carving the whole set of matches for all the rules.\n\nOn 23 Mar 2017, at 09:25, Victor M. Alvarez notifications@github.com wrote:\nThat's the intended behavior indeed. YARA reports all the offsets within the file where the string or regexp matches, no matter if the matches overlap. Why? Because in YARA you can create conditions like $regexp at 3 which basically means: Does $regexp match at offset 3? In this case the answer is true, the regexp matches at offsets 0 and 3 for the string \"foofoobar\".\nAdding a command-line option for showing only non-overlapping matches is relatively easy, but it introduces further issues, for example suppose that your condition is $regexp at 3, and you run:\n$ yara --print-non-overlapping-matches-only -s rules.yar test.txt\nregex test.txt\n0x0:$regex: foofoobar\\x0A\nYARA will correctly report that the rule is matching, but it will only show the match at offset 0. Users could start wondering why $regexp at 3 is true but they only see the match at offset 0. As the user is explicitly using --print-non-overlapping-matches-only he probably understands what's going on, but unless this option has a really important practical use-case I would prefer not adding it.\nCan you provide more context on why do you miss this feature?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub https://github.com/VirusTotal/yara/issues/624#issuecomment-288648272, or mute the thread https://github.com/notifications/unsubscribe-auth/AGIjG70rtigRtNhgN9pNhxhAesCyMRtxks5roixjgaJpZM4Ml_Uz.\n\n\n. ```\n$ cat test.txt\nfoofoobar\njeje foo bar foo\nfoo\n$ cat rules.yar\nrule regex : bug {\n    meta:\n        author = \"pancake\"\n    strings:\n        $str = \"foo\"\n        $st2 = /foo/\n        $st3 = \"foo\"\n    condition:\n        all of them\n}\n$ yara -s rules.yar test.txt\nregex test.txt\n0x0:$str: foo\n0x3:$str: foo\n0x10:$str: foo\n0x18:$str: foo\n0x1d:$str: foo\n0x0:$st2: foo\n0x3:$st2: foo\n0x10:$st2: foo\n0x18:$st2: foo\n0x1d:$st2: foo\n0x0:$st3: foo\n0x3:$st3: foo\n0x10:$st3: foo\n0x18:$st3: foo\n0x1d:$st3: foo\n```. yes, i have posted the example of the wrong issue (moved there). check the comment above again, i its now updated.\nthe behaviour im looking for is to stop searching for a rule that matches exactly the same string. This will speedup results and reduce noise in output, because for me in this case i just want to see that this file contains \"foo\" at 0, and i dont care if there's any other foo after that. Yes, the thing is that you cant use the compiled yara files as sources for yarac or even pass more than one rule to yara. I fixed this by running the tool more than once. But this is far from optimal because of the lack of ortogonality\n\nOn 7 Apr 2017, at 17:44, Victor M. Alvarez notifications@github.com wrote:\nyara doesn't force you to use yarac, that's optional. yarac is used mainly when you want to use the same rules over and over again, so you don't need to compile the rules multiple times. If I understood right you have rules in more than one files and you want to be able to scan a file with all the rules contained in those multiple files, right?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub, or mute the thread.\n. It turns out that yarac doesnt verify the source and destination file properly and my wip yara rule got overwritten by the compiled form. Also, there was an error while parsing the stc because of a mistake, so i basicaly lost all the work i did. I didnt filled an issue for that because i had to finish the thing so ill do more testing and report that issue properly. Meanwhile i though that having this tool would helped me.\nOn 7 Apr 2017, at 19:23, Wesley Shields notifications@github.com wrote:\nI looked into doing this a while ago and a lot of it is easily reversed. The biggest problems I ran into are regex and conditions. The regular expressions compile down to special code for the regex implementation in YARA to run, and conditions are special code running on the YARA virtual machine. The rest of it was easy enough to get back into source form.\nMay I ask why you want this?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub, or mute the thread.\n. here's a test case. type make and compare behaviour between 3.6.3 and 3.7.0\n\nyara-bug.tar.gz\n. awesome, thanks!. Better late than never....\n\n. no need to use a 64bit iterator here, the fat counter is ut32, also is better to use i++, because preincrement doesn't gives any benefit here. nfat is uint32_t, there's no need to use 64bit integer here. dont do realloc over the same pointer, use a temporary intermediate one and check if it's returning null. to avoid memory leaks. dont preincrement. don't call yr_be32toh on every iteration, this field is not suposed to change during the loop. use const. use const. that's already in libc and it's called strnlen. but as long as it's from ISO C90, microsoft didn't had time yet to include it in their toolchains, so this strnlen will not work for mingw/msvc builds. But libc version will be more optimal, so it will be good to use it if available. this function should be static, it's not used outside this .c file. input string is const. stdbool is available on all compilers, maybe it will be good to use bool and true / false here. end can be < start because get_integer returns a signed integer.. dont preincrement unless strictly necessary. get_integer returns a signed integer, casting it blindly to unsigned can result on some unexpected behaviour. i cant see any boundary checks, without trying this pr, it feels like this code will crash when parsing truncated files. implicit sign cast. fetch_data should return the amount of data left. check if malloc returns null. macho_parse_file knows the file_data pointer, but doesn't knows the size of it. if dex_header is NULL should not return SUCCESS. static?. use constant define instead of inlined magic. check if allocation != NULL. this is const. check null. check null. missing space. empty line. those vars are initialized twice. this will not work on big endian machines. null check. dont use multiply for sizes, it may overflow size_t. use calloc instead of malloc to handle this properly. null check. scary cast. null check. null chk. null chk. empty line. missing input buffer size which may turn into out of bounds access. this is done by strlen, when working with buffers is usually good to know the size of it to avoid oobs. ",
    "Tigzy": "Up? It's 2018 and I still create the configurations manually. It looks good, thanks. However I don't think I see VS configuration to build the DLL, did I miss it?. Thanks for the change anyway, awesome lib, I love it :). It's probably missing implementation of the yr_rules_scan_fd + CreateFileW ;). It's debugged from my application, give me some time to.. Meantime I can confirm that adding these calls after yr_finalize() fixes the crash on my side. \nCRYPTO_set_id_callback( NULL );\nCRYPTO_set_locking_callback( NULL );. ok I cannot get my PoC compiled (too many deps on libcurl, openssl and libssh2, as well as yara/libjansson etc...). But here's the code: \n```\ninclude \"curl\\curl.h\"\ninclude \"yara.h\"\nint main( int argc, char* argv[] )\n{\n    // Crash test\n    curl_global_init( CURL_GLOBAL_ALL );\n    yr_initialize();\n    yr_finalize();\n    curl_global_cleanup();  //<= Hello, crash.\nreturn 0;\n\n}\n```. When you read the code it looks really logical that it crashes this way; Once the locks array freed, we should prevent fonctions from accessing it by unregistering the callbacks.. https://github.com/VirusTotal/yara/pull/740. The PR has been merged, closing the issue :). ok, thanks for taking the time to answer :). Thanks. Not yet, I'm using an old Yara version (3.7.1 I think) and I'll upgrade first see what happens.\nI just wanted to make sure I don't investigate in the wrong direction.... The only thing I know is that it randomly crashes on memory access around a yr_rules_scan_fd call. Is this guaranteed that the context pointer passed when calling multiple yr_rules_scan_fd from different threads will not be mixed and uses a different storage per call?. Ok closing for now. I've updated to the latest and I have less crashes. But still some that I'll submit in another topic.. I cannot reproduce the crash myself, it's a dump uploaded from a client.. Just to add a little bit of context, and I think this might be useful, at the moment of the crash I have 2 other worker threads: \n- One iterating strings (yr_rule_strings_foreach)\n- Another one blocked the EXACT SAME line as the crashing one, so I'm pretty sure it's a thread-safety issue. Another weird thing, the i variable has the same value (even though the block_data (mapped file pointer) is different:\n0x000001724f8f0000 + x2600\n0x000001724f9e0000 + x2600\n\n. Up? I've dozens of dumps with the same pattern. \ni grows up until a value where the memory cannot be read. I suspect the boundaries in the block struct are wrong, or badly calculated. . > Wait, so you are getting multiple dumps with the same pattern? Like from different people/clients? Something really weird has recently been going on. People just found malware in some big repositories. I wonder if something is preventing YARA from working. Maybe I am overthinking this but so much weird stuff has just been going on\nNa I don't think so. It looks really typical of a thread-safety issue. I think there's some shared variable being corrupted and not guarded because the crash context is very similar everytime, with 2 threads entering the same code area at the same time . Adding some more context: \nI see the callback is called just after that problematic block, with RULE as parameter. The rule pointer appears to be some block from the shared RULES pointer, and is not guarded. \nIf it was read only that would be fine but I can see it has a list of strings (OK) having a list of matches (NOK). Those matches are likely to change at every different scanned object right? Should I guard the whole matches read while in the callback? . TLDR; Is RULES* pointer sent in callback thread safe ?. I think I found the issue, this isn't about thread safety after all. \nThe file Yara is trying to map at the moment of the crash is driver-protected and cannot be read. \nI'll try to get the error code returned by the file mapping API.\nScreenshot is when I try to manually copy the whole directory where it fails.\n\n. ReadFile fails with DEVICE DATA ERROR. Since we are using a file mapping here, how can we avoid this? Can we check buffer access before reading?\n\n. So the idea is that NVIDIA driver is preventing yara from reading certain blocks inside the file. How can this be catched?. OK so it's obvious the culprit line is: \nindex = block_data[i++] + 1; (scanner.c / line 86)\nWhen I read the documentation about file mapping read, it says: \nhttps://msdn.microsoft.com/en-us/library/windows/desktop/aa366761(v=vs.85).aspx\n\"To guard against EXCEPTION_IN_PAGE_ERROR exceptions, use structured exception handling to protect any code that writes to or reads from a memory mapped view of a file other than the page file. For more information, see Reading and Writing From a File View.\"\nHere: https://docs.microsoft.com/fr-fr/windows/desktop/Memory/reading-and-writing-from-a-file-view\nThis is how we should read from the mapped file. \n```\nDWORD dwLength;\n__try\n  {\n    dwLength = *((LPDWORD) lpMapAddress);\n  }\n  __except(GetExceptionCode()==EXCEPTION_IN_PAGE_ERROR ?\n    EXCEPTION_EXECUTE_HANDLER : EXCEPTION_CONTINUE_SEARCH)\n  {\n    // Failed to read from the view.\n  }\n```\n. I'll build a modified Yara version to test it on crashing machine, if it works I'll submit a PR.. I can CONFIRM the guard fixes the issue. \nI've made a PR: https://github.com/VirusTotal/yara/pull/991. I realize I made this PR like a Windows barbarian \ud83d\udde1 Feel free to adapt for linux with preprocessor directives.... Compiling for VS2015, in that case I don't remember if the dump is for x86 or x64 sorry. \nHowever the crash is on line 51 in my screen, when inspecting the variable I can see sw->frequency.QuadPart is 0.. Ok thanks. It should be much less critical cause I haven't seen any crash dump so far since the fix I made (local fork). Do you want me to fix or do you want to fix in your own branch?. Nope, I didn't even know about this flag.. I'm afraid that exception handler isn't called in that case.... It does, that weird. However I can confirm I haven't had any single crash dump since the fix, whereas I had at least 5-6 of them every single day. There must be something we don't see. It's hard to \"try\", since I'd need to retrieve a customer's machine having that very specific driver-locking mechanism (it's tied to hardware AFAIR). \nBut yeah I think you found it, EXCEPTION_CONTINUE_SEARCH will try to find a try/catch block in the frames above and probably crash if none is found. I'll let you know if I get the problem again after a new Yara update in our product.. Thanks for looking at it :). Just so you know I found a crash dump failing for the same reason but this time in yr_get_pe_header. I think it's crashing when accessing the casted PE header members. It should be covered by your fix though. \n. Done, I was unsure this would have side effect since it's a failure code. . Here's full context: \n\n. ",
    "wesinator": "@cybext This usually means that the file you are scanning does not exist, or your user doesn't have the permissions to open and read it.\nTry rechecking your file argument and make sure your user has read access to the files.. Merged into #703. Ah, ok. Yes, this is in bash. @plusvic That sounds good, thanks.. ",
    "CalebFenton": "Thanks for the detailed CR @trufae. I really appreciate it. This is, in fact, my first real CR for C code. I'll push a new commit when I get home. Sorry it took so long!. Thanks for the review @plusvic. I look forward to incorporating the changes.. Could you help me figure out why this is? I'm not sure how to fix it.. It looks like pe.c and dotnet.c will fail gracefully by returning SUCCESS if the header's can't be parsed. I'm just trying to simulate this. If I don't do this and return INVALID_FILE or something, any rule which imports dex and doesn't explicitly check the dex magic itself will error out. Am I misreading how pe.c and other modules are supposed to work?. ",
    "strazzere": "@trufae Done - tested on my Windows 7 machine as well, though might be good to triple check as that build environment isn't often up to date (analysis vm mainly). ",
    "bestksw": "I think printing the result of function call is enough. The filesize value is easy to get than others.. ",
    "Z000000": "example      rule  test   string  $1 =\u201ca\u201d \n                      rule test2  string $2=\"b\"\nfile stream    can match rule test test 1    i want it just return rule test then   break     argv just -r . but  it matches  less than without it  when i test . ",
    "mbandzi": "I managed to fix 32-bit build error. I will need help with rest of the build issues as I do not have neither Windows nor OS X machine. . with friend's help I managed to fix rest of the build issues on Windows and OS X. Module should be ready for review.. In declaration section, part of declaration is duplicated due to fat-files that are basically containers of normal mach-o files. What would be the best avoid to avoid this? (e.g. somehow with preprocessor or?)\n. Another question: can more memory blocks happen when scanning file (not memory of running process)? I tried to force it somehow to test multiple block feature with ulimit (5GB) and big file (10GB), but it just won't load the file at all. If it is not possible then I will remove that from macho-o module as fat mach-o  files are not loaded in memory.. Added support for 64-bit fat Mach-O file format.. I was working on other task at work and it is middle of midterm exams season too, I will take look at it asap - probably end of this week or next one.\n. Most problems should be fixed.\nThere are two problems remaining:\n1) int64_t to uint64_t cast mentioned by trufae. I believe it should be OK but I am not sure. In C++ I would just use reinterpret_cast, no idea what is C alternative for this.\n2) Making macho module optional. In this case I am not sure if Travis and AppVeyor will work after doing this so this should be probably done right after PR merge and not before. . After looking into closed issues, this is probably duplicate of #688, so I can cut strings in my rules.\nI do not know what exactly limit mentioned in #688 does, but if long hex strings are discouraged, maybe\n#define MAX_HEX_STRING_TOKENS           10000  should be adjusted aswell. Also printed error message should be better.. I am not sure about this. It is not used anywhere in the project. Maybe I would prefer consistency here.. Replaced with strnlen - seems OK according to build tests.. Is this problem even with exact-wide types (has to be exactly wide and in 2's complement)? If so, how to go around this? Via pointers - *(uint64_t*)&value? Because I need it to be unsigned (e.g. offset in file bigger that 2^32 - unlikely but possible).. ",
    "bartblaze": "@trufae How I solve this is to merge the rules I create into one 'superrule', not sure if that would fit your needs however.. ",
    "jbgalet": "A few months ago I wrote this (https://github.com/jbgalet/yaradec). As said before, it has some limitations regarding regex and conditions. Hope this helps.. ",
    "rspeaker": "@hillu and @plusvic  First thank you for your responses and looking into the issue.\nI agree the msdn documentation is not very clear but I can confirm that the vectored exception handlers apply to the entire process and not just the thread that added the handler.   The reason I know this is that the problem I ran into that got me looking at this was that some other thread in my process was doing memory mapped I/O and triggering EXCEPTION_IN_PAGE_ERROR exceptions.  Those exceptions were being caught by yara's exception_handler and were hitting the assert(false) in that handler since the \"if (tidx != -1 && exc_jmp_buf[tidx] != NULL)\" clause returns false given that it wasn't a yara thread that tripped the exception.  In release builds this wasn't a problem but in debug builds the assert(false) aborts the process.  So minimally I think the assert needs to be adjusted since any other thread that raises those two exception codes while the vectored exception handler is active will trip the assert.  This wouldn't happen every time one of those exceptions occurred since the exception handlers were added/removed so t he assert only gets tripped when the other thread happened to trip one of those exceptions while yara was in the middle of scanning a buffer.   Ideally yara wouldn't install any process wide exception handlers and instead just wrap the scan portions in individual exception blocks so that they only apply to the current thread.\nWith respect to MinGw, it looks like this blog has some useful  macros that can be adapted to mimic the Microsoft compilers _try/_catch logic which might be able to be leveraged if the native _try/_catch can't be used:\nhttp://www.programmingunlimited.net/siteexec/content.cgi?page=mingw-seh. Yes I'm using Visual Studio 2015 to compile. Sure.  I'm a bit swamped at the moment but will give it a shot sometime later today.. Changes look good.  I did have to make one small tweak to your code to get it to compile GetExceptionInformation is a function and your code was missing the () to invoke it.  I am no longer seeing the exception_handler get invoked for non-yara exceptions.\nThanks for looking into this.. Sorry for delayed response.   I did not write a test program for this but was using my existing application to verify your changes.. Yes I was triggering exceptions from other threads that had their own exception handler defined while yara was scanning files and with a breakpoint on yara's exception handler to make sure it was not invoked.  Prior to your changes yara's exception handler was being called and it was tripping the assert(false) which killed the process.. That was actually how I worked around the issue to begin with so I know that works as a work around.. I believe this needs to be \"GetExceptionInformation()\" since GetExceptionInformation is a function that you need to invoke in order to get the _EXCEPTION_POINTERS*\nAfter making that change I can confirm the code compiles on VS2015.  Will look at testing the actual exception handling later today.. ",
    "abulhol": "+1. ",
    "carnil": "This issue has been assigned CVE-2017-8294. ",
    "flandr": "Sure, I emailed you a sample that exercises 1 & 2. I'll send a pull request for 3 in a moment.. Sorry for my delayed response; I was busy this weekend.\n\nI think first one you bring up (stream headers without null termination are silently accepted) is within what I would consider a correct implementation. The spec says they must be null-terminated and are limited to 32 characters. With no null terminator I have no other option but to take all 32 bytes.\n\nThe spec is poorly worded but I disagree:\n\nName of the stream as null-terminated variable length array\nof ASCII characters, padded to the next 4-byte boundary\nwith \\0 characters. The name is limited to 32 characters.\n\nThe primary property of the stream name array is that it is null-terminated; the fact that it is limited to 32 characters is a secondary property. When parsing, the absence of a null character within the 32 byte array should mean that the stream header is malformed.\nThere are other sanity checks that could be useful when validating these variable-length headers, e.g.\n\nthe parsed stream offsets fall within sane ranges of the file (don't overlap other sections, e.g.)\nfixed value fields in the streams have expected values (versions in #~, e.g.).\n\n. I prepared a trivial .net console app to test the loader's behavior. The executable and its modified version can be found at https://storage.cloud.google.com/named-lane-4580/blah.zip; the original version prints a message to the console, but the modified version (null terminator and padding bytes replaced with 'a' in stream headers fails to load):\n\nI don't claim that this is a complete test of the behavior of the .net loader, but it suggests that malformed streams headers will be rejected in at least one case.\n. Sorry, public link is https://storage.googleapis.com/named-lane-4580/blah.zip. Misread set_integer; this is just a dereference of uninitialized pointer. Still a bug, but less severe. . LGTM. Years of GCC use have lulled me into a false sense of void*-arithmetic security \ud83d\ude22 . ",
    "MatthewHannigan": "The man page says this works:\n`$ cat /foo/bar/rules | yara -r /foo\n          Scan all files in the /foo directory and its subdirectories. Rules are read from standard input.`\n\nBut it doesn't.  Perhaps support '-' to indicate stdin?. Yes, I know; I was suggesting a change.  Sorry for not being clearer.\nHyphen is a common convention to indicate stdin for a file.\nThe current man page (3.7.0) does not use hyphen.\n. FWIW, you can also do (in bash)\n yara <(cat malware/*.yar) thisdir\nAt least it seems to mostly work.  One file indicated a syntax error.. ",
    "cblichmann": "Indeed, the 128 default seems to be enough now. Closing.. ",
    "graz68a": "ok thank you ( and sorry !) . ",
    "cobrimusic": "Hi wxsBSD. I've read the docs, but I don't understand how install Yara in Windows, in the Windows part there is a link with the binaries files for Yara in a Zip File and I thought that I need to run for the terminal windows. . ",
    "Kolano": "Same error with yara_python-3.6.0, but yara_python-3.5.0 seems to work.. ",
    "FluffyAlpaca": "Yes sure, thank you for your answer. Here it is.\nreport1.zip\n. I thought that my problem was perhaps because my file is too heavy... Or is it a normal sized report ? How can I get more information about this error ?. Thank you, it worked ! . ",
    "lgsonic": "In our case, we'd like to skip any symbolic link whose target doesn't exist and won't want to get any error. Perhaps this is a bit special other than normal case. \nJust ignore this issue please.. ",
    "JMThinix": "Having the same issue.. ",
    "fyrestone": "It seems that x32 libyara scan a x64 process will run into dead loop, the address is overflowed.. Sorry for my late response. My system has updated from Windows 7 to 10, and I transferred to a new project, so I am afraid that I can't reproduce this issue.. ",
    "alvarofe": "The patch is wrong because it does not protect in the following iteration of the loop so is incomplete. I will wait until you take a look to come up with the right solution.. I discovered this while fuzzing yara and I have a few more but I would like to fix them step by step and avoid extra burden\nIf at some point the code interprets that there is more data that it should, shouldn't be this propagated throughout the code base to avoid use those relocs that have not been initialized? I've might understand it wrong, I didn't spend enough time with the code.. I think this is a dangerous statement\n\"If you start fuzzing compiled rules you are going to find a lot of crashes, and that's expected because YARA trusts the content of those files and assume they are correct. For that reason you shouldn't use YARA with a compiled rules file coming from a untrusted source\"\nGiven the popularity and nature of Yara, trust is something can't be always assured. Therefore, I think security measures should be taken. Independently, file integrity is a step forward.. As long as there is not decompiler for yara rules (correct me if I am wrong) there would be an scenario where the shared rules could be compiled ones instead of sources files due to commercial reasons (I don't know if this a common scenario or if it does make sense at all tbh). But given that scenario,  an user unwittingly could get tricked and make use of a compiled yara which could lead to a crash/exploit yara somehow. \nI agree with you that after all this is about design and what you can guarantee. However, about don't run untrusted compiled rules, is like the trust with TLS and the certificates where there have been examples where were totally broken for different reasons. \nWhat I am raising here is a shifting on the rationale, in order to provide the same strength against compiled rules. If this project wouldn't be used or popular I wouldn't mind, but the reality is quite the opposite. \nIndependently is up to you ;) I will report and try to fix them as I find them so we can discuss it one by one. After all I am neither familiar with the code nor YARA's design.. This crash was obtained after the checksum so if you prefer assert I can go with that.\nHere we have the same discussion again whether compiled rules should be considered as external factor ;). ",
    "cneberg": "Would you consider adding some json list operations?    like \"len\" for lengths of json lists and \"contains\"  for whether a certain string is a json list?. ",
    "edhoedt": "Any comments @plusvic ? Anything I should improve to have it merged?. Thanks for the feedback @plusvic , I believe I fixed everything accordingly. Could you please tell me if you see any other issues? If everything is OK, I will proceed with the corresponding fixes in yara-python.. @plusvic I followed your suggestion but I changed the free function signature a little bit:\nvoid include_free_func (char* callback_return_ptr, void* user_data)\ncallback_return_ptr is a pointer to the value returned by the callback. user_data is the same as passed to the callback.\nI also updated yara-python: https://github.com/VirusTotal/yara-python/pull/58\nAny other issue?. ",
    "adulau": "The patch is quite neat and nifty for https://github.com/CIRCL/yara-validator. Will you plan to merge it soon? Thank you.. ",
    "securitykitten": "Thanks for the information @wxsBSD it sounds like everything is working as intended.  \nI like your idea of number_of_imported_functions.  \nGiven the current implementation of imports and the PE module I'm not sure the best way to search for the mangled names in the import table, but I suppose that is a conversation for a different day.\nThanks again.. Wow, thanks for the quick turn around on the module.  I'd imagine that having simple numerical operations available (which they already are) should be enough for most use cases.. Perfect @wxsBSD that's what I was guessing.  Thanks for the clarification and comments.  I can close this as it's a non-issue and intended behaviour. . ",
    "silascutler": "I'd like to see this also. ",
    "kevien": "thanks. @metthal does it work on windows?. ",
    "GREEKYnikhilsharma": "i was playing with Loki IOC scanner's yara rules https://github.com/Neo23x0/signature-base/tree/master/yara i compiled thor-webshells yara file and then matched rules with command line process ID (at last moments i saw an exponential increase in RAM Memory via Task Manager) . I think its 64 bit yara (python) version 3.6.3 on 64 bit windows, this is case for only certain rules like thor-webshell.yar (big set of rules) . for my case hash module is working well in python yara 3.6.3 on Ubuntu but not on windows (No module named hash -_-). Same here ( why is this case for windows ......) . ",
    "jane567": "Same issue. ",
    "garanews": "Any news about this issue?. ",
    "Maxou56800": "Same issue :/. ",
    "LianlianMao": "Mac OS X.. ",
    "rgdoliveira": "Flex wasn't listed in Alpine make depends of Yara package, so I added it there but it doesn't solve the problem. \nAlpine currently has flex 2.6.4, so it should work as it is described in #762 and #695 . Thanks @plusvic and @hillu , this solved the build problem in Alpine.\nI'm going to close this issue.. ",
    "Woniuke": "@plusvic Whether you should consider returning ERROR_INSUFFICIENT_MEMORY to replace assert, because the probability of encountering insufficient memory when scanning a large number of samples is high and assert will cause the process to coredump. @plusvic GoodJob\uff01Thx~. ",
    "krytarowski": "What are you going to achieve? Get something comparable to /proc/pid/maps? Or copy the content of process mapped memory?. On NetBSD if you want to get information comparable to /proc/pid/maps you can call kinfo_getvmmap(3) from libutil or call directly the sysctl(2) calls that are under the neath. If you need to read process memory, you need ptrace(2).. ",
    "bradanfearna": "Hi,\nYou're right that is not a proper fix. \nI replicated the issue however, the following file is consent.exe in the windows directory:\nSha1 - d90de430940f1afd9d9a26a1b14b67289e0b095c\nDumpbin /headers tells me the checksum is 0x1e51f\nUsing the python pefile library to generate the checksum also returns 0x1e51f\nHowever in Yara the generated checksum is 0x1e435\n. Great! Thanks for fixing it so quickly.. ",
    "highanglecav": "This is really the first time I've used Yara is there a better repo to get that might correct these issues?. Thank you. Didn't need an account until now.\n. ",
    "wjsl": "See this. SIGBUS and SIGSEGV are used internally for generating things like NullPointerExceptions. They're intercepted here and the entire thing aborts.\nI have a test case that involves reloading Yara rules on the fly and scanning some byte arrays. After upgrading to Yara 3.5.0 and newer, I had to do some hacking to get things to work. Part of the puzzle was removing the assertion here, the other part was using libjsig.so via LD_PRELOAD to allow the JVM to correctly route the signals. . It could. What would it look like?\nBefore I noticed the test case, I hacked up a little program that simulates how many threads I'm using that can be found here. Using gdb I can set a breakpoint in exception.h and find myself in the exception handler once that Segfaulter function runs.\nEven from a non-Java environment, what I think the issue is that a signal handler is really set for just the process, but the signal handler assumes the signal is delivered to the thread that caused the signal in the first place.\nI'm starting to think that removing the assert(false) is not what I want. A work around for me could be to scan with SCAN_FLAGS_NO_TRYCATCH turned on.. Thanks for the merge! I didn't realize there was a whole other discussion under another PR. Apologies for the radio silence.\n. ",
    "8u1a": "Thanks Wesley, Victor.  Fair enough, I see \\v is not a supported escape sequence according to docs.  If it were though, I'd expect it to match vertical tab, carriage return, line feed, and others typically grouped in this set (by PCRE for example).  It's easy enough to just use byte sequences, e.g. x0D without \\v.  I guess I expected it to fail otherwise as invalid syntax, but it seems it just matches the character v.. Makes sense.  FWIW I no longer think this is an issue, which is where I think you guys are at.. ",
    "deterb": "Correction - the case without the [] doesn't make a difference.  I had a chance to pair up with someone else, and were able to simplify to a test case which we verified doesn't pass:\nassert_false_regexp(\"ba{3}b\", \"baaaab\"). ",
    "ilaidlaw": "Just came across this issue, I am hitting the assert in the exception handler, eventually traced it down to the case where multiple YR_RULES are concurrently in use.  The exc_jmp_buf array is indexed via tidx, yet tidx is specific to an instance of YR_RULES. . ",
    "russianfool": "The assert has been removed in 9c62bc71c8f44bec9ca80e19fa2ca5ea691ce823, which probably makes this section way more dangerous in a mutlithreaded environment (and maybe this is just user error here).\nSpecifically:\n1. Yara supports up to 32 threads running on a rules structure at the moment.\n2. Those threads grab a tid when starting a scan, cache the \"old\" signal handlers, and install the Yara one.\n3. The threads reinstall the \"old\" signal handler back after the scan is done.\nWhen multiple threads are running, you very quickly end up in a situation where the \"old\" cache is a cache of another thread installing the Yara signal handlers. The whole process ends up with the Yara signal handler installed outside Yara scan context.\nWith the missing abort()/assert(), this is dangerous since SIGSEGVs outside Yara scan get ignored. I've reintroduced the assert() as an abort(); my local behavior is then:\n1. SIGSEGV from another thread might still get ignored. T1 is running Yara scan, T2 is not, T2 SIGSEGV. There's no guarantee which thread will run signal handler (EDIT: Actually, maybe this isn't true (https://stackoverflow.com/a/6533431); if Yara is only interested in SIGBUS/SIGSEGV and the \"thread directed signals\" hold true, then just the signal handler installation doesn't work).\n2. T1 runs signal handler. If Yara scan is ongoing, tidx is retrieved; we assume Yara scan failed and cancel it by jumping. T2 is resumed, and SIGSEGVs again, hopefully not hitting T1.\n3. T2 runs signal handler. No Yara scan is ongoing, tidx is -1. Before assert/abort, we would swallow the SIGSEGV. T2 operation resumes, SIGSEGV again, infinite \"loop\" (SIGSEGV -> ignore signal -> SIGSEGV). With patch, at least we crash.. ",
    "adesnosgoogle": "Ok I remove finally the debug information, it is not super useful or I will add it more interesting later, and I added the necessary files for oss-fuzz. ok it is done too. ",
    "ladislav-zezula": "Thank you for your answer.\nIn my particular case, I originally wanted to check the number of imports in the sample 00131d62f4c27788da7a5e1a324b82aab61fe32442b1ceb649ab76626209db4e. Other tools, like Dependency Walker or Cerbero PE insider show no import directory. In that case, it would be more logical that YARA shows number_of_exports = 0 instead of number_of_exports = UNDEFINED.\nNote that this issue will be solved if https://github.com/VirusTotal/yara/issues/868 gets implemented. In that case, I would simply use a condition like pe.data_directories[1].virtual_address == 0.. @wxsBSD: yeah parsing an export directory could be a complete mess. Here's a code that I use:\n```\nLPBYTE MapFileAsImage(LPCTSTR szFileName)\n{\n    HANDLE hFile;\n    HANDLE hMap = NULL;\n    LPBYTE pbMap = NULL;\nhFile = CreateFile(szFileName, FILE_READ_DATA, FILE_SHARE_READ, NULL, OPEN_EXISTING, 0, NULL);\nif(hFile != NULL)\n{\n    NtCreateSection(&hMap, SECTION_ALL_ACCESS, NULL, NULL, PAGE_READONLY, SEC_IMAGE, hFile);\n    if(hMap != NULL)\n    {\n        pbMap = (LPBYTE)MapViewOfFile(hMap, FILE_MAP_READ, 0, 0, 0);\n        CloseHandle(hMap);\n    }\n\n    CloseHandle(hFile);\n}\n\nreturn pbMap;\n\n}\nint _tmain(void)\n{\n    LPBYTE pbImageBase;\n    LPBYTE pbImageEnd;\nif(__argc < 2 || __targv[1] == NULL)\n{\n    printf(\"No parameters given. Syntax: Test.exe DllName\\n\");\n    return 3;\n}\n\n// Map the file as image.\npbImageBase = MapFileAsImage(__targv[1]);\nif(pbImageBase != NULL)\n{\n    PIMAGE_EXPORT_DIRECTORY pExportDir;\n    PIMAGE_NT_HEADERS64 pNtHdrs64;\n    PIMAGE_NT_HEADERS32 pNtHdrs32;\n    PIMAGE_DOS_HEADER pDosHdr = (PIMAGE_DOS_HEADER)pbImageBase;\n    ULONG SizeOfImage = 0;\n    ULONG ExportEnd = 0;\n    ULONG ExportVA = 0;\n\n    pNtHdrs64 = (PIMAGE_NT_HEADERS64)(pbImageBase + pDosHdr->e_lfanew);\n    if(pNtHdrs64->FileHeader.Machine == IMAGE_FILE_MACHINE_AMD64 || pNtHdrs64->FileHeader.Machine == IMAGE_FILE_MACHINE_IA64)\n    {\n        if(pNtHdrs64->OptionalHeader.NumberOfRvaAndSizes >= IMAGE_DIRECTORY_ENTRY_EXPORT)\n        {\n            SizeOfImage = pNtHdrs64->OptionalHeader.SizeOfImage;\n            ExportVA = pNtHdrs64->OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_EXPORT].VirtualAddress;\n            ExportEnd = ExportVA + pNtHdrs64->OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_EXPORT].Size;\n        }\n    }\n\n    pNtHdrs32 = (PIMAGE_NT_HEADERS32)(pbImageBase + pDosHdr->e_lfanew);\n    if(pNtHdrs32->FileHeader.Machine == IMAGE_FILE_MACHINE_I386)\n    {\n        if(pNtHdrs32->OptionalHeader.NumberOfRvaAndSizes >= IMAGE_DIRECTORY_ENTRY_EXPORT)\n        {\n            SizeOfImage = pNtHdrs32->OptionalHeader.SizeOfImage;\n            ExportVA = pNtHdrs32->OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_EXPORT].VirtualAddress;\n            ExportEnd = ExportVA + pNtHdrs32->OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_EXPORT].Size;\n        }\n    }\n\n    // Set the size of image\n    pbImageEnd = pbImageBase + SizeOfImage;\n\n    // Check whether the image export directory is valid\n    if(0 < ExportVA && ExportVA < SizeOfImage)\n    {\n        // Get the export directory range\n        pExportDir = (PIMAGE_EXPORT_DIRECTORY)(pbImageBase + ExportVA);\n        if(pExportDir->AddressOfNameOrdinals && pExportDir->AddressOfNames)\n        {\n            PUSHORT AddressOfNameOrdinals = (PUSHORT)(pbImageBase + pExportDir->AddressOfNameOrdinals);\n            PULONG AddressOfNamesIndexed;\n            PULONG AddressOfFunctions = (PULONG)(pbImageBase + pExportDir->AddressOfFunctions);\n            PULONG AddressOfNames = (PULONG)(pbImageBase + pExportDir->AddressOfNames);\n            ULONG NumberOfFunctions = pExportDir->NumberOfFunctions;\n\n            // Allocate indexed array of names to translate ordinal -> function name\n            AddressOfNamesIndexed = new ULONG[NumberOfFunctions];\n            if(AddressOfNamesIndexed != NULL)\n            {\n                // Convert the AddressOfNameOrdinals to AddressOfNameIndexed\n                memset(AddressOfNamesIndexed, 0, NumberOfFunctions * sizeof(ULONG));\n                for(ULONG i = 0; i < pExportDir->NumberOfNames; i++)\n                {\n                    USHORT NameOrdinal = AddressOfNameOrdinals[i];\n\n                    // Make sure that the index doesn't go out of bounds.\n                    if(NameOrdinal < pExportDir->NumberOfFunctions)\n                        AddressOfNamesIndexed[NameOrdinal] = AddressOfNames[i];\n                }\n\n                // Dump all exports\n                for(ULONG i = 0; i < NumberOfFunctions; i++)\n                {\n                    LPCSTR szForwardedExport = NULL;\n                    LPCSTR szExportName = \"\";\n                    LPCSTR szFormat = \" %4u  %4u  %08p  %s\\n\";\n                    ULONG_PTR NameAddr = AddressOfNamesIndexed[i] ? AddressOfNamesIndexed[i] : 0;\n                    ULONG_PTR ProcAddr = AddressOfFunctions[i] ? AddressOfFunctions[i] : 0;\n\n                    // Get the export name\n                    if(NameAddr != 0)\n                        szExportName = (LPCSTR)(pbImageBase + NameAddr);\n\n                    // Forwarded export: If the function address is within the export directory\n                    if(ExportVA <= ProcAddr && ProcAddr < ExportEnd)\n                    {\n                        szForwardedExport = (LPCSTR)(pbImageBase + ProcAddr);\n                        szFormat = \" %4u  %4u  %08p  %s --> %s\\n\";\n                    }\n\n                    // Show the export\n                    printf(szFormat, pExportDir->Base + i, i, ProcAddr, szExportName, szForwardedExport);\n                }\n\n                // Free the array\n                delete [] AddressOfNamesIndexed;\n            }\n        }\n    }\n    else\n    {\n        printf(\"Export directory outside the image\\n\");\n    }\n\n    UnmapViewOfFile(pbImageBase);\n}\n\n}\n```. Oh ok. Would there be a chance of adding a function that would actually verify the signature?. Pull request to fix this:\nhttps://github.com/VirusTotal/yara/pull/866. Sure thing. Let me know what form do you want me to write it and you get it. . Done. The source branch now contains documentation of all new fields and integer values. I also added missing \"IMAGE_FILE_HEADER::SizeOfOptionalHeader\" to the PE module.. ",
    "droe": "The Travis failure seems to be unrelated to the content of this pull request.. ",
    "H1-N1": "man have you tray it befor closing this issue ???\ni now its # without $ it just a mistak in writing hear .....\npleas reopen the issue\nthx. this is resulte of  the scan \n0x146:$data_format1: alt.qt-btc@yopmail.com\n0x149:$data_format1: .qt-btc@yopmail.com\n0x14a:$data_format1: qt-btc@yopmail.com\n0x14c:$data_format1: -btc@yopmail.com\n0x14d:$data_format1: btc@yopmail.com\n0x0:$data_format2: https://pastebin.com/PLpKtX9V\n0xf7:$data_format2: address: 1ionChGCZkjP4xSSYqn6HcQEkHBpJtv6W\u0000\n. thx for your replay \nthe resule shoulde be null \nbecose none of thos rule has bean found \ni have the same issue with other rule  when i add the 3 condition (first ) or (two) or (this spoil all scan )\nim using the yara for windos by the way\nthx. yes ofcorse..!!  my bad \ncan i ask you : \nis there a trick to privilege a condition on other conditions??\nand also if  wee can recheck the result of the condition !! \n. ",
    "stellarbear": "Was wrapper failure. It will be updated soon to correctly support external variables. ",
    "ohanaali": "sorry for the mistake\n. ",
    "cheezypoofs": "I think possibly #989 makes this obsolete. . There is an interesting related discussion in #622 about how SIGSTOP is undesirable. No conclusion derived in the discussion, but it was once brought up.. Maybe #989 now solves this?. ",
    "jemik": "Thanks for the second set of eyes:)\nMade me realize that I exit the program, when an error occurs. \nTotal brain fart on my behalf. \nThanks . ",
    "johnmccash": "Issue likely related to: https://github.com/openssl/openssl/issues/1157. ",
    "maikgreubel": "Here is a patch:\n```diff\ndiff --git a/libyara/libyara.c b/libyara/libyara.c\nindex e74bd00..60e3c7b 100644\n--- a/libyara/libyara.c\n+++ b/libyara/libyara.c\n@@ -38,6 +38,14 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n #include \n#ifdef HAVE_LIBCRYPTO\n+#if defined(_WIN32) || defined(CYGWIN)\n+// Name clashes between windows.h and openssl\n+#undef X509_NAME\n+#undef X509_CERT_PAIR\n+#undef X509_EXTENSIONS\n+#undef OCSP_REQUEST\n+#undef OCSP_RESPONSE\n+#endif\n #include \n #endif\n```\n. ",
    "unixfreaxjp": "I missed it, will check. So the documents are \"behind\" the codes. Canceling this proposal.. ",
    "bnbdr": "@plusvic basically, yeah. \nYARA will try to allocate and read header.size bytes from the file without checking the actual size in:\nyr_arena_load_stream, yr_arena_create -> _yr_arena_new_page. \nMight be nitpicking but the version check header.version != ARENA_FILE_VERSION will print rules were compiled with a newer version of YARA even if the arena version is older. \nI didn't elaborate on this since It felt like bashing the code and the write-up was extremely long as is.. Regarding the size in the header- maybe check the value doesn't exceed some hard-coded allocation limit?\nI meant the error message should fit the check, not the other way round. I said this was nitpicky ;)\nBoth of these are more quality of life improvements in error reporting and validation rather than security issues.\n. > https://github.com/VirusTotal/yara/blob/master/libyara/arena.c#L978\n\nIt doesn't exactly check that the relocated address is within the file, but within the buffer allocated to hold the compiled rules.\n\nYou misunderstood. YARA indeed only relocates offset within the loaded buffer, however, reloc_address itself can point anywhere after the relocation:\nhttps://github.com/VirusTotal/yara/blob/master/libyara/arena.c#L990\n. > using OP_COUNT to read the objects canary\nYes. My PoC uses a fake function object and then executes code using OP_CALL.  \n\nmore detailed explanation of your exploit would be helpful.\n\nI have written a technical write-up that delves into the VM architecture and explains said PoC. I can publish it shortly.\n. @plusvic \nthe write-up is here: https://bnbdr.github.io/posts/extracheese/\nthe PoC is here: https://github.com/bnbdr/swisscheese. Thanks.\n\n...from the the uninitialized vmem that are return addresses left in the stack, and they can be used for determining the base address where the library was loaded \n\nYeah, among other things.. I would make sure all other opcodes don't suffer from similar issues.. >...I didn't find a way of knowing its address.\nFaking YR_MATCH structure is possible because the bytecode can still infer the location of the vstack as I showed with the PoC and the function object.\nRegardless, I did find the following:\n\n\nIt's possible to read the canary value using OP_OFFSET without finding the vstack and faking a YR_MATCH struct on it.  I can explain further if needed.\n\n\nOP_MATCH_RULE could theoretically be used to set the LSB of any address.\n\n\nThe canary value is limited to a 15-bit unsigned value (at least on windows):\n```C\n// stdlib.h\n\n\ndefine RAND_MAX 0x7fff\n``. Basically pushing a shifted pointer to a **real**YR_OBJECTbefore issuingOP_OFFSET` can cause the VM to read that object's parent's identifier and canary and put the addition of those on the virtual stack.\nThen it's a matter of doing some calculations to reach the original canary value.\nI've written a rule (yarasm, compiled) that compares the canary using both methods (OP_OFFSET and OP_COUNT). \nIt should exit cleanly if they match (i.e. no assertions).. @plusvic I can elaborate if necessary. . Easiest \"patch\" would be to break compatibility by requiring a command-line switch to allow running compiled rules together with classifying compiled rules as \"potentially dangerous\".\nThis prevents uninformed users from running possibly malicious rules without their intention and shifts the responsibility. \n\nadditional info would be helpful\n\nI'll see what I can conjure up\n. ",
    "sgact": "Thank you (\u0e51\u2022\u0300\u3142\u2022\u0301)\u0648\u2727. ",
    "vadim015": "Andreas,\nThank you so much for the quick answer! Your suggested changes worked! The modified string below compiles without a problem using yara-3.7.0 compiler:\n$connect = {\nC7 [3] 01 00 00 00 8B [6] C7 [3] 00 00 20 03 5? 89 [3] ( FF 15 | E8 ) [4] 6A 06 6A 01 6A 02 66 [4] 66 [4] 02 00 ( FF 15 | E8 ) [4] 83 F8 FF 89 [2] 0F 84 [4] [0-7] 8D [3] 6A 04 5? 68 02 10 00 00 68 FF FF 00 00 5? ( FF D? | E8 [3] ??) 8B [2] 8D [3] 6A 04 5? 68 01 10 00 00 68 FF FF 00 00 5? ( FF D? | E8 [3] ??)\n}\nI wonder though why the jump can't be the last element of the alternative (I don't believe I've seen that restriction in the documentation), and why it was okay in the previous versions of yara (I have tested it with yara-3.1.0 and yara-3.3.0). In my case,it does cause problems after the upgrade from 3.3.0 to 3.7.0.. ",
    "fishilico": "Thanks for your review. I have updated my commit.. ",
    "reijin90": "@fishilico If I may ask, how did you compile it? I'm failing to get a working build with:\nFLAGS=\"-O1 -g -fsanitize=fuzzer-no-link,address\"\nCC=~/llvm-install/bin/clang CXX=~/llvm-install/bin/clang++ LD=~/llvm-install/bin/clang CFLAGS=\"$FLAGS\" CXXFLAGS=\"$FLAGS\" ./configure. ",
    "teoring": "Sorry for the late response, I will apply the patch and will provide the result as soon as will find the time.. Issue can be closed. I confirm valgrind do not report any issue with the mentioned patch.. ",
    "chenzhongxiang": "Thank you for your help, I did not solve this issue. but based on the latest version 3.8.1 I used the mingw-w64 carried by msys2 to successfully compile the correct executable file and libs in Windows 7 x64. So I closed this issue.. ",
    "zeffy": "I also just happened to notice there was a typo(?) in the same file. It had __attribute_ with one _ at the end, where there should be two __.. ",
    "sulabhjain": "Does someone know how I can fix the failing build on this change ? Appreciate the help.. ",
    "wroersma": "I would recommend checking out volatility as it sounds like this is what you're looking for https://github.com/volatilityfoundation/volatility/wiki/Command-Reference-Mal#yarascan. I will get that added in. Is there any list of versions it's intended to support? I couldn't find anything on the wiki but I could just not be able to read :0. So it's updated and retains the old style while adding a new cuckoo.summary path that supports key_access,file_access,file_created,file_recreated,file_failed,mutex,dll_loaded,directory_created,command_line,regkey_opened,file_written,file_deleted,file_exists,regkey_read,directory_enumerated,regkey_written and file_read. If this is something that is useful I'd be happy to add the rest of the options in summary and support things like process list options and more. . I'm pretty happy to really do about anything that the project would rather\nhave for sure! One thing is I still don't know what version this was built\non. I should get that up or at least a sample report from it.\nFor me it was very confusing with the other syntax because it doesn't\nfollow the path of what it actually is in the report. The actual cuckoo\nreport itself should be more flat as well and not have so many nested\ndictionary objects.\nI'll try to play around with seeing if I could somehow also support the\nolder format as well as using the newer format. I'm not amazing with C so\nif I'm doing anything wrong or stupid just let me know. I didn't want to\nsubmit something totally radically different in my first PR to this project.\nPlease let me know if anyone else has any other thoughts or suggestions!\nOn Wed, Oct 24, 2018, 3:54 PM Marek Milkovi\u010d notifications@github.com\nwrote:\n\nI'm not the one who makes calls what to merge and what not, but to give\nyou my feedback. I really think that the interface of cuckoo module you\npropose is not in a great shape. With your changes, there would be\nfunctions cuckoo.filesystem.file_access and then\ncuckoo.summary.file_access. Both express the same thing but they are\nlooking at different JSON keys. Wouldn't it be possible to have a single\ncuckoo.filesystem.file_access which would work with both JSONs from\ncuckoo v1 and v2 simultaneously? It would also make a sense to move all\nfilesystem related functions to cuckoo.filesystem and keep them together\n(like cuckoo.summary.file_created, ...). I understand why you went with\ncuckoo.summary, because that's where they are kept in JSON, but we also\nhave mutexes in behavior->summary->mutexes and they have function\ncuckoo.sync.mutex.\nI don't know if you are willing to change the interface, but I would like\nto ask you to at least think about what I just wrote.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/VirusTotal/yara/pull/958#issuecomment-432805148, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AE1YIgzlv2hsP757CyG8h97w_x-_CgCiks5uoMWDgaJpZM4W9Io9\n.\n. Thanks for the information! I'll get it updated tonight and get that pushed\nout. It would definitely help if I could get some of the older reports to\ntest against and ensure everything works. I have access to full file\nreports of anything in the past couple years but nothing much older than\nthat.\n\nOn Wed, Oct 24, 2018, 6:01 PM Victor M. Alvarez notifications@github.com\nwrote:\n\n@wroersma https://github.com/wroersma the cuckoo module was written\nwhen Cuckoo was still at version 0.1. We expect backward compatibility with\nthat ancient version because at VirusTotal we still have tons of behavior\nreports in that format. I can share with you some reports in that format if\nneeded.\nI agree with @metthal https://github.com/metthal in keeping a single\ncuckoo.filesystem.file_access that is able to work with all versions of\ncuckoo reports. The module's naming is not expected to reflect the path of\nthe JSON fields, they are just like namespaces that group functions\ntogether according to their functionality: filesystem, network, sync and\nregistry.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/VirusTotal/yara/pull/958#issuecomment-432843366, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AE1YIuD2Iini2M_wbiOb0w4OfX-xZsyqks5uoOMogaJpZM4W9Io9\n.\n. \n",
    "icedevml": "Our work-around PoC for now:\n````python\nimport yara\nwith open('sample', 'r') as f:\n    sample = f.read()\ndeferred_cb = []\ndef yara_cb(*args):\n    global deferred_cb\n    # simply don't do any significant job here\n    deferred_cb.append(args)\nreturn yara.CALLBACK_CONTINUE\n\ndef actual_cb(*args):\n    patt = 'rule ann { strings: $a={%s} condition: $a }' % 'fe fa fe fa'\n    y = yara.compile(source=patt)\nfor m in y.match(data=sample):\n    pass\n\ny = yara.compile(source=\"\"\"\nrule sth1 { strings: $a = { 00 } condition: all of them }\nrule sth2 { strings: $b = { B3 04 8D 7D FC [1094795585-1094795585] BA 03 00 00 00 [1-2] 47 FE CB } condition: all of them }\n\"\"\")\ny.match(data=sample, callback=yara_cb)\nfor args in deferred_cb:\n    actual_cb(*args)\n````\nThis way one could untangle nested calls and thus avoid bug.\nIf the bug is not easy to fix, then it would be satisfactory to at least have it docummented that scanner is not re-entrant (or maybe even some runtime check?) so others won't run into the same trouble.. ",
    "sysopfb": "Ah I missed the short circuit logic, thanks Victor!. ",
    "emiloo": "Oops sorry meant to put on yara-python repo. ",
    "DaniCybereason": "sorry, double post because of the github event.. it showed as if issue was not opened.. in that case may I suggest we remove the lines:\n\nIn a multi-threaded program only the main thread must call yr_initialize() and yr_finalize(), but any additional thread using the library must call yr_finalize_thread() before exiting.\n\nfrom the documentation?\nEven 3.8.1 docs still mention this API:\nhttps://yara.readthedocs.io/en/v3.8.1/capi.html. I'm willing to make the PR myself of course if it helps :). What I've managed to find out so far is if I add a preprocessor definition of YR_BUILDING_DLL into the libyara.vcxproj itself, it helps.\nBut isn't libyara supposed to follow export directives of projects linking with it?\nFrom I've heard .lib file supplies symbols, the project compiling decides what is exported and what is not.\nIt seems the declaration in libyara takes precedence over my project - I even eliminated the definition completely from my project and still the symbols were exported from the final DLL.... it leaves a strange situation, in order to export symbols from libyara.lib I have to add preprocessor\nYR_BUILDING_DLL\nto the libyara.vcxproj itself, instead of the actual project building the DLL and including the headers..\nThis doesn't seem to follow posts I find such as:\nhttps://stackoverflow.com/questions/47791319/can-i-export-function-from-static-library-which-used-in-a-dynamic-library\nWhich says as long as the symbol is declared __declspec(dllexport) it should be exported.\nAnd once again. under v3.7.1 it worked just fine, I think something in between broke it and made the static library somehow take precedence over the symbol definitions the \"dependent\" project actually defines.... I think I figured out what happened, before the change that added YR_BUILDING_DLL, the symbols were by default compiled with __declspec(dllexport), whereas now they are defined without it.\nThis seems to cause the compiler to use the declaration in the obj files that are in libyara.lib instead of treating the other obj files also and deciding to export.\nI'm still not sure why this is a problem, will update if I have time to figure out.\nFor now I will just compile the whole thing with libyara.vcxproj having preprocessor YR_BUILDING_DLL to save the whole trouble.... Is it not possible to use the same lib for both building a dll and a static\nexe? It used to work both ways..\nOn Tue, 23 Oct 2018, 20:08 Victor M. Alvarez, notifications@github.com\nwrote:\n\nYes, you should build the DLL by adding YR_BUILDING_DLL to\nlibyara.vcxproj, this way all the exported functions are decorated with\n__attribute_((dllexport)). In the project that uses the DLL you must use\nYR_IMPORTING_DLL. See the comment for this commit: 3960251\nhttps://github.com/VirusTotal/yara/commit/39602514e2c7aa990d4d361adbd9a89bdfd147dd\nMore context in #601 https://github.com/VirusTotal/yara/issues/601\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/VirusTotal/yara/issues/971#issuecomment-432333886,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AdBzCGc0Biw7_hgUrXGO-yVpV3FPzS-9ks5un0zvgaJpZM4X1zhj\n.\n. I want the libyara to be possible to be used as a static lib and when I\nwant to use it to export from a dll all the symbols.\nOn 3.7.1 I had the libyara compiled to a lib, then any project linking with\nit could decide whether to statically link or dll export, or dll import.\nAll depending on the project settings.\n\nIt's very strange that the libyara is the one who defines whether symbols\nare exported since dll export should be possible to add later too, and it\nworked on 3.7.1. Very strange..\nOn Tue, 23 Oct 2018, 20:26 Victor M. Alvarez, notifications@github.com\nwrote:\n\nWhat do you mean exactly? Do you want to build yara as a DLL, or your own\nDLL that uses yara?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/VirusTotal/yara/issues/971#issuecomment-432341035,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AdBzCHLD2Xemd_MuCX2uwgdRWC4QljK1ks5un1FHgaJpZM4X1zhj\n.\n. \n",
    "packetzero": "Addresses #978 . ",
    "Joseph-Tortorelli": "Wait, so you are getting multiple dumps with the same pattern? Like from different people/clients? Something really weird has recently been going on. People just found malware in some big repositories. I wonder if something is preventing YARA from working. Maybe I am overthinking this but so much weird stuff has just been going on. SNORT was recently blocked from me for some reason. I was getting just about the same message. This is weird. Is there something malicious in the repository you think.\nEdit: Its this commit. Does anyone know how this works? Clems1 is a trusted engineer from Google as far as I can see. Do fuzzers usually scan as malicious because they did on my system? Its a false positive I believe. ",
    "LloydLabs": "@Joseph-Tortorelli seems as if it's the foo.exe within that file triggering all of the false positives for this. Very strange behaviour, but seems to be associated with a multitude of malware families so makes sense.  . ",
    "CmdrBurrito": "\nWhere is that link? I can't find it in the current documentation.\n\nhttps://yara.readthedocs.io/en/v3.4.0/gettingstarted.html#installing-on-windows\nThere's a link there in the \"Installing on Windows\" section named \"Download Windows binaries\".  When you click on it, you get directed to the URL listed above which generates a 404 error.  Thanks!. > Oh, I see, but that's an old version. The latest one is: https://yara.readthedocs.io/en/v3.8.1/\nAh, I see.  Got it.  Thanks!. ",
    "davehull": "I was referring specifically to creating yara rules that match files based on MD5 hashes. If a user puts in an uppercased MD5 hash, they won't get matches. Again the docs point out that hashes returned will be lowercase, but users and docs don't always mix. If it is not possible to tolower() hashes in user's yara rules, then close this issue. Thanks and cheers!. ",
    "josephcsible": "fe7d09e does not seem to have fixed this, and it re-broke #1003. Can it either be reinstated, or #1003 reopened?. #1016. ",
    "jhyeom26": "thank you for your answer!. ",
    "sbruno": "AppVeyor build failed\n/cygdrive/c/projects/yara/build-aux/missing: line 81: flex: command not found\nI don't think that was my fault :/. ",
    "nikkej": "Closing, not a bug, just misunderstanding of option '-s' meaning. ",
    "chaplja": "Looks like trailing ?? is not handled well. Ruleset is properly matched if you remove the ?? on the end.. ",
    "Tim-Sobolev": "Adding one more actual byte (E8) after trailing ?? does not change Yara behavior.. ",
    "aprokofiev": "Trailing masks do not match alright but at least it could be considered logical, since a trailing ?? does not add much precision anyway...\nyara\nrule trailing_1 {strings: $a = { 0f 95 ?? a2 fd e3 ?? } condition: $a}\nrule trailing_2 {strings: $a = { 0f 95 ?? ?2 fd e3 ?? } condition: $a}\n...notice however that these two will work nevertheless:\nyara\nrule valid_example_1 {strings: $a = { 0f 95 c0 a2 fd e3 ?? } condition: $a}\nrule valid_example_2 {strings: $a = { 0f 9? c? a? f? ?? ?? } condition: $a}\nSadly enough partial masks are broken too:\nyara\nrule partial_1 {strings: $a = { 0f ?5 ?? a2 fd ?? ?1 } condition: $a}\nrule partial_2 {strings: $a = { 0f ?5 ?? a2 fd ?? 4? } condition: $a}\nBut the most important thing is - these rules are also do not match:\nyara\nrule character_1 {strings: $a = { 0f ?? c0 a2 fd ?? 41 } condition: $a}\nrule character_2 {strings: $a = { 0f ?? c0 ?2 fd ?? 41 } condition: $a}\nrule character_3 {strings: $a = { 0f ?? c0 a? fd ?? 41 } condition: $a}\nNotice that there are no masks at the end whatsoever.\nLooks like the whole deal was broken with this 5f1912fb2b6c0c0c4246d30d216a7b49bbf1f2d3 commit by @plusvic (I built it on Linux using ./configure --disable-shared --enable-static) - the previous one (cf1d767184f7f6ce8a00fbfdde5866418f3a4628) is working just fine.\nP.S. I used the very same test.bin file @Tim-Sobolev attached to his initial message, but you could easily truncate it to first 7 bytes and the whole thing will still remain valid: 0f 95 c0 a2 fd e3 41.. ",
    "cgrahamseven": "Is it possible to just include the Visual Studio solution you guys used to build jansson so that users can build the library themselves with the appropriate runtime?. ",
    "wbenny": "Actually, the VS projects provided have the \"/TP\" switch enabled (Configuration -> C/C++ -> Advanced -> Compile As), which forces the C files to be compiled as C++ files. So the error is:\n......\\libyara\\modules\\pe.c(1307): error C2440: 'initializing': cannot convert from 'void ' to 'unsigned char '\nIf the files are compiled as a C, it compiles fine.\nI'm using VS2015 with Update 3.\n. Uh, I'm sorry, I realised my changes are for this fork: https://github.com/spender-sandbox/cuckoo-modified , and not for vanilla cuckoo. Therefore feel free to ignore this pull request. However I made similar changes which support vanilla cuckoo 2 and I'm planning to submit the pull request soon.\n. "
}