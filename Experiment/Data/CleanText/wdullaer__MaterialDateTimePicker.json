{
    "wdullaer": "Zero based indexing is the default in java.\nThis library uses the same API on its callback as other pickers in Android.\nSee: http://developer.android.com/reference/android/widget/DatePicker.OnDateChangedListener.html\nIt is using zero based indexing for compatibility with the Calendar class. \nI'll see if I can update the docs to make this more clear. \n. I can't reproduce it here.\nAre you seeing this on devices as well?\n. RadialSelectorView would be the place to look.\nIf you have an issue, you should create a new issue and not use an existing one.\nFor questions, like this one, I think stackexchange is your best bet.\n. Because I plan to replace that done button with a material themed \"OK\" button at some point, I'll close the issue for now. If someone encounters this on a device, please reopen.\n@josh7up Thanks for the praise :-)\n. Something must have gone wrong when I published on maven Central . I'll\ntake a look at it.\nOp za 21 feb. 2015 10:47 schreef Jeroe notifications@github.com:\n\nI can only find this version: compile\n'com.wdullaer:materialdatetimepicker:1.0.0'\nNot the 1.0.1 you listed in the docs.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/wdullaer/MaterialDateTimePicker/issues/3.\n. It is working fine for me here.\nI also just checked maven.org and version 1.0.1 is properly listed.\nMaybe it wasn't available yet when you tried (it takes some time after I publish before it is available), or it's some sort of cache issue.\n\n\n. It could be, but I doubt it is worth the effort.\nThe year selector is actually pretty well hidden, the day and month selector are combined in a calendar view. I think you'd need to change the entire design to create a decent month/year selector.\nIn any case, the code is open source, so you're free to give it a shot :-)\n. @Vipul12Thawre please create a new separate issue instead of poluting existing ones.\nYou can find more information on android library modules here and here\n. Thanks for the tip.\nIt looks promising on first sight.\n. Hi, the month number is by design. The standard datepicker in Android uses zero based indexing for the month. I decided to stick to that convention, to keep the API similar.\nDo you have screenshots of the first issue? I can't seem to reproduce it here.\n. It looks like this is a bug in the underlying system libraries.\nTime is represented as a long: the number of milliseconds since the epoch, which somewhere in the 1970s. Dates before that are negative. It looks like the internal representation overflows and wraps around.\nI'll see if I can find some bug reports on this and figure out in which version of android this could have been fixed.\nI cannot reproduce it on Android 4.4\n. The picker in the android calendar app (on which this one is based), just limits the year selection to the range where the rendering actually works (1970 - 2036).\nYou can use the setMinDate(Calendar c)and setMaxDate(Calendar c) values to accomplish this.\nI'm going to close this as a wontfix for the moment, but feel free to re-open it if you've found a good solution.\n. There are two issues with this pull request:\n1. You only modified the date picker, you should modify the timepicker as well\n2. I don't intend to support versions before Android 4.0. Versions of Android that do not support Fragments account for about 7% of the entire market and are on decline. If you set your minimum level sufficiently high, the Activity object will support getFragmentManager() regardless of whether you use AppCompat or not.\nThis is less intrusive than the other way around: people not using AppCompat do not have getSupportFragmentManager() on their Activity and will not be able to use the library.\n. I'm using the normal FragmentManager just fine in an ActionBarActivity in one of my apps.\nThis library is working just fine in that app as well.\nProvided the minAPI of your project is high enough, it will support getFragmentManager()\nI do not intend to support pre-ICS versions of android. It's a negligible part of the market.\n. I need to check, but I don't think I use getSupportFragmentManager() at all. I set the Toolbar in the ActionBarActivity and then just call getActionBar() in regular Fragments.\nIf I remember correctly the support library implementation falls back to the native implementation if it is present on the system, so I think you're safe.\n. I know, it's on the todo list (as you can see in the readme)\nIt is not trivial however: the selector in the time pickers can partially cover a number. Do I keep it white, or black or do I try to figure out the bits that are covered and render those white?\nI haven't found an elegant solution yet, which is why I've settled for keeping everything black at the moment.\n. Can you post a screenshot on how you'd like it to be, compared to how it is now?\nI'm happy with the current font sizes, but it might all render slightly different on different devices.\n. I'm not sure I agree with the premise that everything should be a parameter. Especially not if it's an open source project. If your change is too niche, you should fork rather than make it a parameter.\nThat said: the things you are looking for are already parameters. Take a look at /res/values/colors.xml and /res/values/dimens.xml\nYou can overwrite any of those values in your project style file.\n. Rather than changing the colour, you might want to change the opacity of the selector (like the original google picker).\nThis is currently a hardcoded value.\nI'll see if I can add both of those as an xml parameter next time I revisit this.\nI also think I've found a way to make the text white when you exactly select the value. This should make things work for hours and most of the common minutes use cases. It requires a bit of work though, and I'm short on time at the moment, but I'll get around to it eventually.\n. I'm not sure I fully understand: are you talking about the labels of the day in DatePickerDialog above the calendar?\n. I'm substringing those to 1 character. That gives something like: M T W T F S S in English\nI suppose that the first character is identical across the days of the week in Chinese.\nWhat would you expect to see there?\n. The callback of the TimePickerDialog returns an int not a String\nIt's your responsibility to format that.\n``` java\n    /*\n     * The callback interface used to indicate the user is done filling in\n     * the time (they clicked on the 'Set' button).\n     /\n    public interface OnTimeSetListener {\n    /**\n     * @param view The view associated with this listener.\n     * @param hourOfDay The hour that was set.\n     * @param minute The minute that was set.\n     */\n    void onTimeSet(RadialPickerLayout view, int hourOfDay, int minute);\n}\n\n```\n. Good catch.\n. How about now? ;-)\nI've noticed it can take a few hours before it becomes available on Maven Central after I've completed all the steps.\n. I can see how setting the accent color from code can be useful. I'll see if I can add this in the next version.\nJust on the side: it sounds like you're theming your entire app in code, which is a major horrorshow.\nIt is possible to switch themes at runtime, you just need to make sure you restart the current activity for the changes to take effect.\nTake a look at this stackoverflow entry for some information on how to achieve that: http://stackoverflow.com/questions/18301554/android-change-app-theme-onclick\n. This change is not as easy as it looks.\nI have an idea on how to do this, but I estimate the work at about 2 days, aka a full weekend.\nI don't think I'll be able to dedicate that amount of time to this until somewhere in August.\n. Added in v1.5.0\n. I hope that's a mock and not a screenshot of this library with the dark theme. If it is, I'll need to clean that up a bit!\nI can see the usefulness, but it should fit the overall design. Unfortunately I'm not a good graphic designer, so this might take some time.\nAlternatively, you might try extending the pickers. In onCreateView call the super method first, which gives you the current picker view and embed that in your own custom layout which has the title.\njava\n@Override\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n            Bundle savedInstanceState) {\n    // Have the library create the View with the picker\n    View pickerView = super(inflater, container, savedInstanceState);\n    // Inflate your own view which contains the title and room for the picker\n    View parentView = inflater.inflate(R.layout.dialog_parent, container, false);\n    // Add the picker to your layout\n    ViewGroup container = (ViewGroup)parentView.find(R.id.container);\n    container.addChild(pickerView);\n    // Return your custom layout with the picker in\n    return parentView;\n}\nThis is just some code on top of my head, it will need some tweaking probably.\n. I was just going to suggest that :-)\nThe screenshot looks nice.\nThe material design spec suggests that you align the title of a dialog left.\nAdding this to the timepicker will be easy.\nAdding it to the datepicker will require some thinking: it's already close to the max length. There's hardly any room for a title.\n. The landscape versions have the same problem as the DatePicker: there is not enough space left to fit a title at the top.\nAdding this will require more redesign than just adding an additional TextView at the top.\nIt'll take some time before I get around to working on this.\n. I haven't had a lot of spare time lately, so I didn't start working on this yet.\nLike I mentioned: it will require some redesign of most of the components, because they're close to max height already see #17 .\nIf you need it urgent, it's probably best to give it a shot yourself.\n. Judging by the screenshot, there is enough place on the gnex for the full datepicker.\nI'm guessing some xml value is specified in pixels instead of dp.\nI could probably shrink the entire size of the picker by reducing the margins on the top bit.\nI'll have to experiment a bit here.\n. I just dusted off my gnex running 4.3 and I can't reproduce this.\n. Can you test v1.2.2\nI can't reproduce it, so I'm not 100% sure it's fixed.\n. This is a similar issue to the one I just solved in portrait.\nAgain, it doesn't happen on my gnex on 4.3\nI have the impression that android resolves match_parent to something slightly larger than the actual screen on lollipop. At least for a gnex.\n. Do you have that same issue in landscape on your phone?\n. Release 1.3.1 should fix this.\nCan you let me know if this is the case?\n. Great news.\nI'm going to close this issue for now.\n. This should be possible. I'll add it to the list.\nEven if you set it to 15 minutes, it kind of makes sense to show the in between numbers for reference.\n. It is not a one line hack, or I would have done it already.\nThe current logic is contained partly in snapPrefer30s() in RadialPickerLayout.java\nThat function makes sure you can only select hours (every 30 degrees). It's not really written in an extensible way at the moment, but it should be possible to make it happen.\nI'm a bit low on time at the moment, but I'm always open to pull requests.\n. This will be possible in the next release using the setSelectableTimes function.\nIt requires an array of Timepoints to configure the selectable times, which is a bit cumbersome to set up for this usecase, but it does the trick.\nI might add some sugar function around this later.\n. The buttons should use your accent_color by default.\nHowever, I noticed I didn't properly namespaced the theme used for the buttons.\nAre you by any chance using this library (https://github.com/afollestad/material-dialogs) in your project as well? \nSome style definitions might clash with the ones in this library.\n. The problem was that my library was overwriting them :-)\n. I am not calling any callbacks when you click cancel, just dismissing the dialog.\nI'll try to add this in.\n. Just on the side: the date and time which are picked are delivered through a separate interface which doesn't expose an onCancel() callback. Neither do the built-in date and time pickers.\nThis would make this an API breaking change, and I also try to keep the API of this library as close as possible to the built-in date and time pickers.\n. Ok, I found an elegant workaround.\nI'll try to publish the changes today.\nbtw: you are using that onCancel() method incorrectly.\n. Fixed in 0ef38ff22334cb244f4703367733f2f7bc4409b1\n. The dark mode is very much \"try at your own risk\".\nIt's a remnant from the original google code, I'm amazed that it still looks as good as it does.\nThis should be relatively easy to fix though.\n. You can add this in your app: have a button to select today or make it the default value, and then have a button to pick a specific date, which shows the datepicker.\nI'm trying to stick as close to the material design example as possible.\n. I've been very busy the last two weeks. But this will be one of the next features I add.\nAlso: please just keep the original issue #15 open.\n. Something is still wrong with the spacing in some cases. See also #17 \nI'm still experimenting to see how I can resolve this.\n. Release 1.3.1 should fix this.\nCan you let me know if this is the case?\n. It doesn't look like it has improved a single pixel, even though I reduced some of the spacings.\nCan you give me some more information:\n- What device are you testing this on?\n- What resolution does the device have?\n- Are you overwriting some default margins/dimensions?\nI really can't reproduce this behavior here\n. I test on exactly the same device (among others) and don't have this issue.\nI think that you might (not deliberately) be overwriting some layout parameter in your parent app.\nCould you compile the sample app include with this repository and let me know if the year layout issue is still present?\n. Can you show me how the date picker in google calendar looks on this device?\nOn a first look, I doubt I'll be able to squeeze in all the content on a screen this size. I don't think there are a lot of devices with this screensize out there anymore.\n. I'll see what I can do.\nI do not intend to support resolutions not even Google supports.\nI do need to tweak the current design to support smaller resolutions though. I estimate this will be 1 to 2 days of full time work, which I currently don't have actually. \nI'll take this into consideration then.\n. I've reduced the size of the DatePicker in recent versions. I'm going to assume that this resolves this issue in all practical cases.\nFeel free to reopen if that's not the case\n. The medium one looks very close to the new design on the material design reference, and it was posted here before that was out: kudos.\nI might implement the new reference designs as separate widgets, I haven't decided yet.\nA lot will depend on how much work this will be.\n. It's been nearly done for a while now.\nUnfortunately work/life balance has taken a massive swing to the work side lately, which didn't leave any time to work on this library in the last 2 months.\nI need one or two full time days to wrap it up. I'm gunning for early June now.\n. It's not possible to select just a month.\nThe design doesn't make sense for that use case.\n. Fixed in version 3.0.0\n. The static nested class is fine.\nI'm not a big fine of inlining boolean expressions like that. I know you saved 2 LOC, it's arguably even more elegant, but in it's original form it's much easier to grasp what's going on.\nFurthermore, it's easier to see how you could extend if you'd like to listen to other keycodes.\n. This library only supports Android 4.0 and up (in fact I think I'll need to bump the min SDK version even higher). Fragments are available here.\nEven if you are using the SupportFragment manager in other places you can show this dialog using the standard FragmentManager. The call will work. This is in fact what I am doing in my own app without issues.\nMoving the SupportFragmentManager is actually more annoying, because that would mean everyone who'd want to use this library needed to use support classes, while with the current setup it's optional.\nCheck #8 for more info\n. I'm sorry, but I'm not going to break the API for everyone using this.\nWhile the code change is minor, the impact on the apps using the library is big.\nIt should be fairly straightforward to maintain a fork with just that change though.\n. As mentioned in the FAQ and numerous other issues, I do not intend to change this.\nRegardless of your stance on the use of support fragments, changing this now would be a breaking API change. It would force everyone to use an old version or do a sizeable refactoring, for a change which is at best a step sideways.\nIf you really feel so strongly about this, feel free to maintain a fork (or take a look in the network, some people already do just this). It's just a tiny change to the code and would be easy to keep up to date with the upstream.\n. The substring(0,1) is by design. Check the material design guidelines for date pickers.\n. Well, this is working just fine for me.\nSo unless you can give me more information on how to exactly reproduce this, I'm going to have to assume that this is a problem with your code.\n. It works just the same as in an Activity.\nWithout any code or instructions on how to reproduce, there is not much I can do.\nGeneral coding questions are also much better off on stackexchange rather than this issue tracker.\n. #29 is supposed to fix this.\nI don't speak nor read Chinese so it's hard to judge for me, but comparing that pull request with your comment, it looks like it will do the job.\nPlease reopen this if the next release doesn't solve the issue.\n. This one shouldn't be too hard. I'll try to get it in for the next release\n. I misjudged this one.\n?attr/colorPrimary and ?attr/colorPrimaryDark are defined by AppCompat, which this library actually doesn't use. You can also define an attribute just once, so defining them in this library will give compilation errors when using AppCompat in your application.\nI currently don't see an elegant way of doing this.\nIs the following not working for you guys?\nxml\n<color name=\"mdtp_accent_color\">?attr/colorPrimary</color>\n<color name=\"mdtp_accent_color_dark\">?attr/colorPrimaryDark</color>\n. I don't want to pull in AppCompat unless I absolutely need to.\nI'm going to take a closer look at why the workaround of assigning ?attr/colorPrimary to the colours crashes though.\n. Library will use colorAccent as of v1.5.0\n. Overwrite mtdp_okand mdtp_cancel in your application as of v1.3.1\n. I don't think this will lead to a pleasant design, but you can always just overwrite the onClickListener of your EditText and display the DatePicker from there.\n. The library uses the locale of the current device. I don't see any problem with that.\n. I think you better try to set the locale globally and rely on the android framework to recreate all your activities in the new locale.\nHere's a stackexchange post that explains how you could go about this. Like the author of that post I would recommend against this though.\nhttp://stackoverflow.com/questions/2900023/change-language-programatically-in-android\n. I think the functionality you're looking for is setMinDate() and setMaxDate()\nHowever, if you swap the year it will still allow you to select an unacceptable date.\nI've changed the input validation on setYearRange() to allow setYearRange(curYear,curYear).\nThis won't disable the year picker, but will solve your issue.\nShould be available in the next release.\n. SimpleArrayMap is a more lightweight drop in replacement for HashMap.\nIt's part of the v4 support library, so it shouldn't be causing any issues on Android 4.0\nWere you using the version from Maven central or did you build it yourself?\nIn case you've build it yourself, a clean build might help to resolve all the dependencies properly.\nAlso the exception you're showing is related to creating the typeface, rather than an operation on the SimpleArrayMap.\nRather than changing the container, I think the rebuild that it triggered fixed your issue.\nCan you roll back your change and verify this?\n. Modern IDEs aggressively cache build results.\nIn any case, I'm happy it's resolved :-)\n. This looks just fine.\nCan you show me the stacktrace of the exception?\n. I'm glad you sorted it out. :-)\nI don't intend to convert these to support fragments. That would break the API for all users and would require everyone to use support Fragments. Android versions prior 4.0 make up a marginal part of the market and I don't intend to support them with this library.\nYou can take a look at #8 for more information.\n. See #451 . 1. Make sure you have the latest version (it contains some fixes for this)\n2. Use setYearRange to restrict the selection of the year to maximum the current year.\n. I'm aware of it, it's a bug that present in the original code from google's.\nit's not easy to fix and the workaround I posted before prevents people from selecting a year outside your acceptable date range, effectively fixing the problem.\nThanks for pointing it out though :-)\n. I need some code to reproduce this.\nWhat locale is your device in?\nWhat is the date that's returned when you press ok (does it return May or June in the above example)?\n. No worries.\nThanks for reporting it.\nI'll close the issue for now. If you manage to reproduce this, please post a code sample and reopen the ticket.\n. Be that as it may, I cannot reproduce this.\nI need a code sample that reliably reproduces this issue on any device, otherwise I can't figure out what is going on.\n. It might take a few days until I can check this in detail.\nDo you have a screenshot of what the end result would look like?\n. You're using the disabled color for the not highlighted days.\nIs the goal of the highlight that these are the only possible selections, or to indicate that something else is already happening on these days?\nI was thinking of refactoring this in two methods:\n1. setSelectableDates()\nThis would visualise like your example, but make the grey dates non selectable\n2. setHighlightedDates()\nThis would make the highlighted dates bold, and keep the normal dates \"normal\". Any date would be selectable\nAny thoughts?\n. I quite like the patch, but the way you've set the default colors suggests that the days are not selectable, while they are.\nI probably have to go into the touch code anyway, because setMaxDate() and setMinDate() stop working after an orientation change.\nI also don't like the fact that you've changed the signature of DatePickerDialog.newInstance(). This breaks the API (easy to fix with an overloaded version).\nI'll probably tweak your code a bit before merging.\n. I heavily refactored your code.\nThere is now a setSelectableDays and setHighlightedDays.\nBoth take an array of Calendar objects.\nHighlighted days will render in bold. If you want to have it render like your example, you can overwrite mdtp_date_picker_text_normal and mdtp_date_picker_text_highlighted\nI will release a new version to Maven Central later this week.\n. I just tried out a few different cases here and it works just fine on all my test devices.\nAre you certain you did a full rebuild and pulled in the latest version?\n. Nice :-)\nI'll try to free up some time this weekend to treat all the pull requests and do a new release.\nI'm also sorry I didn't take a look at this sooner. This is literally a side project of a side project.\n. I'd like this to have the same design as the weekday name on the datepicker.\nThis will make your title smaller and all caps. Does that work for you?\nI also think that the reason google doesn't include a title in their picker designs is because the context from where you launch the picker should make it obvious what the picker is for.\n. I'll push a new branch with my proposal to github in a minute. Let me know what you think.\nI'm also looking at getting dark theme support in the date picker.\n. It keeps things consistent between both pickers, although it de-emphasizes your title.\n. If the uppercase really doesn't work out for you, let me know and I'll see if I can refactor it into a theme you can override.\n. You should read your stacktrace:\njava.lang.IllegalStateException: You need to use a Theme.AppCompat theme (or descendant) with this activity.\nThis is not in the slightest related to this library, so I'm closing the issue.\n. There really is no issue here, from the perspective of this library.\nThis library does not depend on AppCompat, but is fully compatible with it (I know because I'm using it that way myself).\n. This sounds very similar to #44 \nA build clean seems to have fixed it for that person.\nI cannot reproduce this issue myself. If you can provide me with a code snippet that reliably reproduces the issue, please reopen this issue.\n. You'll have to fork it, I'm afraid.\nIt's a Datepicker. The design doesn't make sense if you're not picking dates.\nI don't intend to add this.\n. @enriqif is right, you are probably using AppCompatActivity.\nThis library explicitly does not depend on AppCompat for this reason.\nI'm closing this as it is not a bug in this library.\n. For some reason the vibrate duration was set to 5 ms which is too short to trigger a vibrate it seems. I increased the duration. I'll release a version with the bugfix soon\n. Which gives me about 85 years (80 if you're working in the automotive sector) to fix this right ;-)\nI'll squeeze something in the next time I work on the library.\n. I'm not sure what you want me to do here.\nI do not know this calendar system, or how it is visualised. This library is relying on the built-in java Calendar classes. If they do not have support for this calendar system, then it will be hard to add support. If they do, then the native android localisation should take care of it mostly.\n. I don't know this calendar system, nor how it is visualised, so I have no idea what you need to change.\nThe library relies heavily on the default java calendar classes, so unless those offer out of the box support, I'm afraid this will be a large undertaking.\n. If you can make it a pull request, I can try to incorporate this into the library.\n. That depends on how you've done it I guess.\nIn any case, I'm happy people are getting good use out of this :-)\n. I should have seen this one coming.\nI'll add it to the list\n. Duplicate of #44 \nI can't reproduce this, so a code sample or instructions on how to reliably trigger this behaviour are much appreciated.\n. Thanks for the pointer. This allowed me to reproduce the issue and fix it. It turned out to be a one liner.\n. Duplicate of #8 \nThis library does not support pre ice-cream sandwich android versions, so all of those have fragments. You can use the normal fragmentManager even if you use SupportFragments.\n. Can you show me a screenshot and let me know the resolution and physical size of the display?\nI'm testing this on a 10 inch tablet and everything looks fine.\n. I'll experiment a bit. It doesn't look too different than on my 10 inch tablet here, but I can see why you'd like it a bit bigger.\nI'm happy to see you using the dark layout, I didn't know how much demand there was for that.\n. Copyright issues on a screenshot of my library, there's something new.\nI don't think I'm going to increase the font size, I'm pretty happy the way it is. If you absolutely want to you can overwrite mdtp_day_number_size. The default value is 12sp\n. Not immediately.\nI'll keep it in the back of my head should I revisit that bit of the code\n. This request is similar to #27 \nGoogle updated the design of both the portrait and landscape pickers. I haven't had time yet to implement them.\nI'm not sure if I'll make these an option on the current one's or separate widgets.\nGoogle also hasn't updated the design of the pickers in android to this design yet. So using these now will actually make your pickers feel out of place.\nThis will rank higher on the priority ladder once google implements it themselves in some app.\n. I think I've figured out how to support both versions of the picker layout without too much hassle.\nIt should also solve something which has bugged me for a long time in the landscape timepicker.\nNow I just need to find myself some time to do it.\n. Can you create a new issue for this?\nThe wrong coloring seems like a bug.\nThe vertical spacing, I'll need to take a closer look at.\n. yes that one.\nIf you've overwritten it, then well, it's by design I guess :-)\n. Fixed in version 3.0.0\n. duplicate of #62 \n. It does: you pass in the default selection in the newInstance method.\nYou can also limit year and date choices.\n. Which version are you using?\nAlso: did you force kill the app after changing the timezone on your device? \nThe top view and calendar view have different caching strategies for the locale.\n. As copy pasted from the readme\nsetSelectableDays(Calendar[] days) You can pass a Calendar[] to the DatePickerDialog. This values in this list are the only acceptable dates for the picker. It takes precedence over setMinDate(Calendar day) and setMaxDate(Calendar day)\n. Do you have the latest version?\nOp ma 27 jul. 2015 00:12 schreef neonankiti notifications@github.com:\n\nIs it a bug? When I create a instance of DatePickerDialog and pass month =\n6(July) to the constructor of it, the results shows as the picture below.\nthe calendar month is strange(June should be July)\n[image: image]\nhttps://cloud.githubusercontent.com/assets/6552589/8896170/a0525a46-342e-11e5-9452-40dc7e3719ef.png\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/wdullaer/MaterialDateTimePicker/issues/69.\n. I tried for a few minutes and couldn't pull this off, but I'll take you on your word and put this in for the next release.\n. You're going to have to do better than this, for example a screenshot of the issue would be nice.\n\nI would also dim the attitude if you want people to solve your problems for free ...\n. I don't think this is due to this library.\nI test this on two separate pre-lollipop devices and it renders just fine.\nMy guess is that this is due to the theme your manufacturer applies to the device.\nDo other Dialogs on the device have those insets as well?\n. I don't think I can help you here a lot.\nThis library started as a fork from the open source google date and timepicker. I have never touched that part of the code.\nBoth the time pickerviews are instances of the same class. The picker figures out what exact values to draw based on an index. Most likely you messed up the index somewhere, passing in HOUR_INDEX instead of TIME_INDEX.\nThe best you can do is set a breakpoint in setCurrentItemShowing() in the RadialPickerLayout and step through the code to see what exactly is going on.\n. Please read some of the older issues on this to find out why:\na) Your statement is incorrect and this library can be used with AppCompatActivity\nb) I'm not going to change it\n. I'm not sure what you're trying to say here.\nThe dialogs retain their state on rotation changes just fine.\nThey do lose their pointers to the callbacks though. There is no way for me to retain them in the dialogs because they might not implement Parcelable.\nYou should set them again in the onResume() callback of your activity. See the second answer here http://stackoverflow.com/questions/12822250/dialogfragment-callback-on-orientation-change\nI could add this to the sample and make this more clear in the documentation.\n. Losing min max dates was a bug in a previous version. Ensure you've got the latest one in your project.\nLosing the listener connections is indeed an issue, but it can't be resolved from the library, because the listeners might not implement parcelable.\nYou should set your listeners again in the onResume() of your custom fragment which calls the dialog. The stackoverflow link I've posted contains some more information on how this is done.\n. v1.4.2 is the latest one. This version is available on maven.\nMake sure your build.gradle dependencies are up to date.\nIf they are you can try to do a build clean.\n. This is the same request as #15 \nIt's somewhere on the todo list, but I'll probably not get around to it in the near term.\n. This is either an RTL issue or a truncate issue.\nI truncated the name of the day to the first letter. I should check whether I account for RTL (I think I do). If all the names of the day start with the same character in hebrew, this is what it would look like.\n(Imagine truncating to the last character in english, they'd all say 'y')\nI do not speak nor read Hebrew, so there is no way for me to devise a workaround for this, without some external input. (I have merged a pull request which solves a similar issue in Chinese in the past)\n. This is useful information.\nI suppose I'll have to make a separate case if the locale is set to hebrew.\n@siiie would you be ok in testing out a feature branch of this? (once I get around to taking a look at it, which might take a few days)\n. Your code didn't exactly yield the results you said, but they did put me on the right track.\nI managed to make the labels look like on the imgur example.\n. It is currently not possible to select multiple dates.\nI suppose it is possible to add this feature to the library, but like with most other features requests: I currently don't have a lot of time to work on this, so it's unlikely to happen soon.\n. This library started as a fork of the google picker library used in one of the last open source versions of the calendar app. It contains a lot of legacy stuff like this.\nOver time I've done cleanup in places, but the state of the code is still deplorable to be honest.\nNice catch :-)\n. Awesome pull request!\nThis is exactly what I had in mind, I just didn't have the time to do it yet. (Including the cleanup of unused statements leftover from the original google code)\nI'll probably merge this in this weekend along with some other minor changes I have done in the mean time.\nA few nitpicks:\n- It probably makes more sense to default to colorPrimary rather than colorAccent (I misnamed the attributes in this library, hindsight is 20/20)\n- The new icon looks great, but maybe a clock or calendar icon is more appropriate than a person icon?\nNow that the icon looks good, maybe I can put the sample app on google play.\n. I've already merged this in a local copy.\nI'm fixing some other bugs right now.\nIf all goes well, a new release should be out today.\nI'm also thinking about externalising all the state that every component in the picker needs to know in a separate class. So rather than passing the accentColor or themeDark through the hierarchy, just pass that state object and have everything reference it. But that will probably be for a future release.\n. I've used Material Dialogs as a source of inspiration before.\nI should see how they handle retaining the callbacks on an orientation change. I haven't figured out a good way to do this in the library itself. The only way I know how to do it now is via the onResume() of the parent Activity.\n. Were you by any chance testing this on a device with a resolution like the Nexus S or Nexus One?\n. I already fixed the issue, I just need to release it.\nIt has to do with your screen resolution.\n. Is that because the dialog itself scrolls? (I recently added some scrollviews around the content)\n. @PavelSynek That is exactly what I thought, but I can't reproduce the behaviour on my devices, which is why I was still asking some questions.\nI'll release a new version this evening.\n. As mentioned in the documentation (and in the Java Calendar system in general), month numbers are zero-based: January is 0, December is 11 \n. Setting time up to seconds is not supported by this library.\nThe scope of the library is to implement the Date and Time Pickers as shown in the material design guidelines. Picking seconds is not included, so I probably won't be adding this feature.\n. If it's well done and easily supportable, sure.\n. I'm reluctant to merge this one in.\nIt's not part of the material design pickers specification. In general I think the audience for this is very small.\nEvery feature I put in, I need to explicitly support. Not only in testing when I do changes, but also in answering support questions for people who have absolutely no clue on how to use it.\n. I'm going to close this pull request.\nThe goal of the library is to offer a picker in line with the material design specs, this feature violates that.\nIf you like to use this you can always fork the library, nothing wrong with that. In fact it's the beauty of open source that I don't need to add configuration options for everything.\nI like this library to remain at least a bit focussed. I don't want it to turn  into all things for all men.\n. This is a duplicate of #27 \nI intend to implement the new design at some point, but due to time constraints it won't be any time soon.\n. Currently not, but it's something I can add.\n. should be up on maven central soon\n. While I appreciate your effort by creating a pull request, I have discussed my reasonings for this choice at length in previous issues and pull requests.\nI will not change the base class. You can either maintain your own fork (as you have seen the change is minimal so it should be easy to track the upstream version) or use getFragmentManager() rather than getSupportFragmentManager() (the amount of devices not natively supporting fragments in the android market is negligible by now)\n. This is by design. See the newly added FAQ in the documentation (or the previous github issues on this subject) for more information.\n. I'm sorry, there's not much I can do here.\nI test this on 4 devices.\nIf you can give me detailed steps on how to reproduce this, eg on the emulator, I can take a look at it.\n. Thanks for the heads up. Fixed now.\n. What you're saying is that if you instantiate the dialog from within the onClickListener, the text color is fine?\n. I think I understand why this is happening, I'll probably solve it when I implement #90 \nMight I ask why you want to avoid instantiating the picker? I understand that instantiating a Fragment is rather resource intensive, but that's actually a reason to lazy load it in the onClickListener rather than upfront.\n. A look at the code in the example, or the spec for the TimePickerDialog.newInstance method would have shown you the path to enlightenment:\njava\npublic static TimePickerDialog newInstance(OnTimeSetListener callback,\n            int hourOfDay, int minute, boolean is24HourMode) {}\nI should update the docs to document the full API in more detail at some point.\n. Fixed in version 3.0.0\n. Thanks.\nI'll have a look at this shortly\n. Not yet. I haven't had enough time yet to look at the bigger chunks of work for this project.\nI hope to get around to it somewhere this week/weekend.\n. Just some update on this.\nI have been busy implementing this feature based on your pull request.\nBecause I had refactored some of the library before you did the pull request, and because I needed to foresee compatibility with #104 I thought it was better not to merge and resolve conflicts, but to use your PR as inspiration.\nI'm now crushing the last bugs on this, so expect it in master somewhere this week.\n. Thanks for the offer.\nI'm thinking about setting up a gitter channel.\nThis should make support easier, keeping questions out of the bug tracker, but it should also make it easier for people to help me out with coding. Tighter feedback loop.\n. As always: try upgrading to the latest version.\nSecondly: can you make this happen with the demo app rather than in your own code?\nThird: does the same code exhibit the same behaviour on other devices?\n. Does it happen with the timepicker as well?\n. Could you try the latest version in master?\nI pushed some changes which hopefully rectify this.\nI don't exactly know what's causing this, and I can't reproduce it, which is why you'll have to help me test if you want this resolved.\n. Here's some things I've seen in the wild:\n- Show the timepicker after a data has been selected\n- Use two buttons: one to pick the time and one to pick the date\n- Show a tabbed dialog with each picker in a tab\nIn short: be creative! ;-)\n. I'm aware that the current design on lower resolution screens is not perfect.\n. One way is to use anonymous inner classes\n. You've hit the bug I spotted earlier.\nYour code is now in the case where it no longer uses mdtp_accent_color, but uses either android.R.attr.colorAccent (lollipop+) or R.attr.colorAccent (support library).\nThere's a bug where it will apply colorAccent rather than the programmatically darkened version of it.\nI'll try to release a new version today or tomorrow\n. If you have a problem, please create a new issue rather than trying to resurrect ancient ones.\nAs far as I can tell this functionality is working just fine in the latest version . Yes, this will make it in.\nI haven't had the time yet to properly review it and merge with some refactoring I've done.\nI unfortunately haven't had massive amounts of time to spend on this recently.\n. I really appreciate the effort you made.\nI have just been extremely low on time.\nI'm gradually working my way through the bugs reports, feature requests and pull requests.\nThis one will definitely make it in, but I need a block of a few hours.\n. Can you show me a screenshot and a code snippet?\nI have very little to go on here.\n. I think this is due to your theme setup.\n1. Are you sure your titles are gone and not just white?\n2. We removed some dummy themes from this library. They weren't used, but they were defined and could mess with the overwrite order of the themes in your app.\nTry to remove the @style/viewPagerTitle in the xml and see if they reappear. (I know that is not a proper solution, but it should give you something to work with)\n. This is the commit which I think is causing your issue:\nhttps://github.com/wdullaer/MaterialDateTimePicker/commit/dd313b65d8eb72582fa312918c5b828e479eee34\nI can't think of anything else which could have system wide impact.\n. Do they show when you swipe to another page?\nI found this bug: https://code.google.com/p/android/issues/detail?id=183127 which seems to be related.\nI bumped the version of the support library to 23.0.0 for the 1.5 releases\n. Do please read through that android bug report.\nMost people seem to report that they are gone, but get added when you swipe to another page in your viewpager.\nIt is a bug in the support-v4 library this library depends on. v1.4.x uses an older version of that library which doesn't have this bug.\nAll in all, this makes me about 85% certain that this is your issue. (which I won't be able to solve until google fixes the support library)\n. I'm not depending on any new features of the support library.\nYou could fork it, just change the version in the dependencies back to 22.0.1 and depend on that version in your app for now.\nI'll follow the bug report and close this one when google fixes it\n. I saw that this was fixed in v23.1.0 of the support library\nUnfortunately I just released a new version of this library before I noticed.\nI will be included in the next release (early next week if nobody eats my time this weekend)\n. Good catch.\nI already fixed some edge cases in the original code when I updated this a while ago, but this one is new.\nJust a quick question: what would you expect to happen when you select a higher year in the year picker?\nDo I discard your date selection and set it to the maxDate?\nOr do I not render the next year when it would push the currently selected date beyond the maxDate? (That would lead to situations where 2015 would render if you currently have 01-Oct selected, but not if you have 02-Oct selected and the maxDate is 01-Oct-2015)\n. I'll probably go for 2.\nAnimating this is a nice idea, but I have no idea how hard that would be to do.\nThanks for the input!\n. Not yet.\nI'll try to publish the latest version today or tomorrow.\n. Sounds like something wrong with your build really. I don't really know what you expect from me here ...\n. I don't understand the question.\nAs far as I'm aware, there are no from/to tabs in the pickers.\nCan you illustrate with a screenshot?\n. I fixed it in master, which is why the issue is closed.\nI have yet to release a new version to maven central.\nYou can wait for that or check out the code in master\n. Can you check the latest version from master? I was refactoring this and I\nvaguely remember fixing this while looking through that piece of the code.\nOp di 13 okt. 2015 00:37 schreef John notifications@github.com:\n\nUpdate: this only occurs if you call setAccentColor on the dialog\nmanually.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/wdullaer/MaterialDateTimePicker/issues/110#issuecomment-147541074\n.\n. I just reviewed my changes, this should be fixed in master. Can you confirm that? \n. I'm sorry, but I really don't understand the question\n. Can you show me the code you are using to generate this dialog.\nI have no idea how you make those From and To tabs appear to be honest. Seems like there is a hidden feature :-)\n. Try a build clean first\n. What resolution is that?\nI remark that even the original dialog doesn't show properly here.\n. I aim for the nexus one screen resolution as the minimum supported (480\u00d7800 px 254 ppi)\n\nEspecially the date picker had some issues on smaller resolutions, but they should now be useful on the nexus one / nexus S resolution.\nIt's still my intention to make the buttons always show on top, but I didn't get around to that yet.\n. I try to accommodate it all as best as possible.\nOnce I get around to implementing the new material design pickers (which google seems to have tried to put in android M) things should improve even more. The design is less hungry in vertical space compared to the one I currently have in this library.\n. Do you have the latest version?\nI fixed this big a few releases ago.\nOp di 27 okt. 2015 14:24 schreef Pavel Synek notifications@github.com:\n\nIt is possible to bypass setMaxDate by going one year back, selecting a\nday after max date and switching back to the current year. It may be\npossible to do that with setMinDate too, haven't checked.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/wdullaer/MaterialDateTimePicker/issues/113.\n. What's the advantage?\n\nI can't say I've had good experiences with gradle updates. I typically means I get to spend an evening getting the build to work again, which is time I'd rather spend developing new features.\nThis means I've taken a \"if it aint broke don't fix it\" stance when it comes to gradle.\n. If you really don't want the vibrate permission you can the following to the manifest of your application\nxml\n<uses-permission android:name=\"android.permission.VIBRATE\" \n  tools:node=\"remove\" />\nIt's all about setting good defaults: if I don't add the permission to this library I will be closing two tickets a day on why the vibrate function doesn't work.\n. You live and you learn right ;-)\n. Th error says you don't have the correct version of the support library\ninstalled. Click on the link in the error to make android studio download\nthe required library.\nLet me know if that doesn't fix your error or if the error changes.\nOp wo 4 nov. 2015 23:28 schreef Mitchell Lustig notifications@github.com:\n\nTo reproduce:\n1) add \"compile 'com.wdullaer:materialdatetimepicker:2.0.0'\" to your\nproject\n2) press the gradle sync button\n3) see error\nError:(123, 13) Failed to resolve: com.android.support:support-v4:23.1.0\nInstall Repository and sync project http://install.m2.repo\nShow in File\nShow in Project Structure dialog\nhttp://open.dependency.in.project.structure\nDisclaimer:\nThis is my first time trying the project, literally just started following\nthe instructions 5 min ago (Ok, maybe i spent an hour or two trying to\nfigure out why gradle couldn't find packages i have installed, and\ndownloading updates to arbitrary things), but 1.5.4 seems to work fine, and\n2.0.0 fails.\nCheers!\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/wdullaer/MaterialDateTimePicker/issues/117.\n. I tested this on 3 different machines, including a fresh VM, and I cannot reproduce this. The dependencies are resolved correctly on all of them.\nVersion 2.0.0 uses the exact same build chain as all the previous versions.\n\nI really suggest you take a closer look at your build environment (try a build clean or start from a fresh environment).\n. No worries, these things happen with java ...\n. Except that the design makes absolutely no sense if you only want to select year and month, or day and month.\nI would essentially be building completely new pickers for both these scenarios.\nI'm strapped enough for time as it is maintaining this library, so I don't think I'll be doing this anytime soon.\n. Someone proposed to create a PR for this, so it might happen soonish\n. This is in the pipeline.\nI'm not pinning myself down on any dates (life's been extremely busy lately), but you should see some code appear in a branch soonish.\n. Still no ETA.\nIf you need this in the short term, you will most likely have to do it yourself.. Great stuff, I'll review this when I have a bit of time.\nI was going to point you to this library initially https://github.com/borax12/MaterialDateRangePicker\nBut I'm more than happy to add this functionality to this library as well. It seems like a common enough use case.\nRe timepoint: I have fixed this before, but for some reason git reverts this every time I do a merge commit. :(\n. You will have to provide the whole array. setSelectableTime does what the name says, it sets the times which are valid.\nI might add some syntactic sugar around this to make it easier to set intervals, but in the current version this is it.\n. I'm aware that the current implementation doesn't work in all locales.\nThere are two ways to solve this: \n1. find a way to have the java Calendar class return a locale adjust single letter for a day (or two in the cases of Catalan or Chinese). Unfortunately I haven't figured this out yet.\n2. build exceptions for locales where the current implementation breaks down. This is what I've done so far. Unfortunately I don't speak all languages in the world, so I rely on people like you to report these and let me know how it should be done.\n. I'll add special cases for Catalan and Spanish.\n. I figured out the proper way to do this :-)\n. This is an android version issue.\nI'll have to treat API level < 18 seperately\n. You can only fix this in the source code.\nThe single character day labels are the intended design\nThe dialog on tablets follows the material design specs, but I'll review it.\n. dpd.setMaxDate(now.getInstance()); should be dpd.setMaxDate(now);\n. Not really.\nThe current design wouldn't make sense with just a year picker.\nYou could use a number spinner in a dialog. Or a simple dropdown.\n. I don't fully understand what you mean with \"reopened\".\nWhen you just do an orientation change, and you set the picker up as in the example app, it will remember the selected date.\nIf you mean someone selecting a date, hitting ok and then reopening the dialog, your app will be responsible to save the user selection and set it as the new default selection when reopening it.\n. I still do not understand your usecase.\nIf the dialog gets recreated due to an orientation/configuration change, it will properly restore it's current state.\nIf the user dismisses/cancels/oks the dialog it'll call the respective callback and then ceases to exist.\nThere is nothing which save or restore the state.\nIt's the job of your application to make sure the next dialog gets initialised to the correct date.\nIn short: I don't properly understand your usecase and hence can't really see where the limitation / issue lies.\n. You should not try to reuse a previous instance of the Dialog after it has been dismissed.\nIt is nearly impossible for the library to keep its state when it's not shown without additional action by the application developer, at which point you could just well create a new instance each time you need to show the dialog.\n. Can you let me know what is not working right now?\n. I'll see what I can do, but the backlog is rather big, so don't expect anything soon.\n. Great PR!\nKeeping a boolean to see whether the user has manually set the dark theme annoys me a bit though. \nI was thinking about maybe converting isDarkTheme to an int and use the same method as accentColor (although saving what is essentially a boolean as an int is also not really elegant) \nWhat do you think? \n. Me being anal about it really ;-)\nI'll try to merge this somewhere this week, along with some other changes I have been making.\n. java\n public static TimePickerDialog newInstance(OnTimeSetListener callback,\n            int hourOfDay, int minute, int second, boolean is24HourMode)\n. Such as?\nThe library supports some 60 different locales, inherited from the google project I forked it from.\nIf you feel some translations are missing or inaccurate, feel free to propose a pull request.\n. Don't feel like that.\nIt is a genuine request: if you have any specific remarks or requests for localisation, please share.\n. That doesn't make any sense to me.\nThe default date is specified in the newInstance() method\njava\n//datepicker dialog\nCalendar now = Calendar.getInstance();\nDatePickerDialog dpd = DatePickerDialog.newInstance(\n    MainActivity.this,\n    now.get(Calendar.YEAR),\n    now.get(Calendar.MONTH),\n    now.get(Calendar.DAY_OF_MONTH)\n);\nThe now.get statements are your default selection.\nYou are not supposed to call the initialize method. I should check whether I can make that protected.\nFetching the dialog in onResume is required to reset the callbacks after the activity is recreated. If you remove it you'll notice that your callbacks no longer get called after an orientation change.\n. I'm not sure I understand your problem.\nThe datepicker needs a default selection. The example set this to the current date, but you can set it to anything you like by passing the correct parameters.\nHow does the user define the initial date?\n. initialize was never meant to be public, but I wasn't paying attention when I initially released this and so it is. It's hard to turn this back (but maybe I should just bite the bullet).\nThe library assumes that you do create a new instance every time you need a picker.\nI doubt this will have much performance impact (how many pickers do you need to show in a second?). \nI don't think there's anything you can do to make this work with the current API of the library. If you manage to get it to work, I'm happy to take a PR though.. I'll try to make this assumption more clear in the Readme.\nMaybe I'll spend some time on making sure reusing works in the future. Every now and then someone asks questions about this and it might just be less work to implement it than handle the issues \u263a\ufe0f. There is no way to programatically update the selection once the Dialog is shown. Its purpose is for the user to select a date, you do not want to mess with that.\nI recently made a few changes which should allow you to reuse picker instances, but it's not a scenario I'm actively trying to support.\nThe recommended way is to create a new picker every time you need to show one.. Please do not put new questions or issues in old ones. I can't easily find them here.\n@zkurbonov this is just the way java Calendars work. Not an issue with this library. I suggest you read a book on java programming or try stackoverflow.\n@PrasadModi21 try using setHighlighted days. Can you be a bit more specific about what is not clear?\nThere's a section in the README on how this library works and a demo app you can inspect as well.\n. While this library is similar to the official pickers, they are not API compatible. This means you can't expect the documentation of the SDK pickers to work without change for this library.\nThe Picker classes in this library are already DialogFragments.\nThis means you do not need to implement a DialogFragment yourself.\nJust call tpd = TimePickerDialog.newInstance(...)\nand then tpd.show(getFragmentManager(), \"sometag\");\nAlso note that the Pickers inherit from normal Fragments, rather than support library Fragments, so you'll need to use getFragmentManager().\nGo through the README and take a look at the included sample app for inspiration.\nUnfortunately android development is not very forgiving for newcomers :(\n. This library uses a lot calls which are not available on API level 9.\nJust changing the meta data property, doesn't make it magically compatible with lower api versions.\n. This looks great!\nI'm going to try to test and merge this, this weekend.\n. Create a Calendar object with the output from the picker and read the day of the week from that\nIn the callback:\n``` java\nCalendar selection = Calendar.newInstance();\nselection.set(Calendar.YEAR, year);\nselection.set(Calendar.MONTH, month);\nselection.set(Calendar.DAY_OF_MONTH, day);\nLog.debug(\"The user selected the following day of the week: \" + selection.get(Calendar.DAY_OF_WEEK));\n```\nOr use a SimpleDateFormatter to render the Calendar object to a localised string\n. Can you provide some code that fails?\nAlso: on which version is it failing?\n. I can't reproduce this behaviour based on your feedback.\nYou'll need so supply some code that reliably reproduces the issue if you want me to look into it.\n. I'd prefer that you help me solve this, but it's your call I guess.\n. The Datepicker on Lollipop devices doesn't have any ripple effects on the selected date, nor in the calendar view as far as I'm aware.\nCan you be a bit more specific?\n. I think your second suggestion is the proper way to handle this: convert the text size to dp.\n. why the switch to sp at w560?\ni'm starting to think that me using sp at all for these big texts was the wrong choice. \n. The more I think about it, the more I'm convinced it should be dp across the board for the selected time and date in the pickers.\nThey're big enough and there's no real reason to scale them up more along with the rest of the text.\n. I probably have a few hours to work on this over Christmas. I'll do the swap to dp and try to make a new release.\n. Currently they can't be hidden.\nI'm not sure if hiding the months leads to a good user experience, but I'll think about it (maybe as a separate flag)\n. This is indeed an issue with pre 1970 dates.\nIt's a bug / limitation in the android framework Calendar implementation.\nThey fixed it in android 4.3 IIRC.\nThe only way properly fix it is to remove all dependencies of Calendar and plug in a 3rd party library which accounts for this.\nGoogle's own apps often work around this by setting the minYear to 1970.\n. The header (which looks ok in your examples) is formatted using SimpleDateFormatter.\nIf you swap out the line you highlighted for a SimpleDateFormatter you should probably be able to fix it I think.\n. If you fix this, by all means send a PR.\nI'm not always the fastest to integrate them, but I appreciate each and every one :-)\n. I've done some investigation and changing to SimpleDateFormatter will remove some localisation.\neg in Spanish it will currently display \"deciembre de 2015\", after changing to SimpleDateFormat it would just be \"deciembre 2015\".\nThere is a utility method which generates proper localised patterns for SimpleDateFormat but it's only available in API level 18+\nCurrent versions of Android also do not exhibit this bug. (I'm willing to bet it was fixed in API level 18).\nThe only decent way to fix this, is to enumerate all possible languages, generate the proper pattern for them, save those as a localised string in the app and have SimpleDateFormat reference that.\nThis will take a bit of time though.\n. I'll probably add the localised patterns in the library.\nI need to do a similar hack to support the current reference design of the pickers anyway.\n. Not on the short term.\nI am experimenting with a version 2 design, but figuring out how I can avoid having 2 separate code bases is taking some time.\n. This has been added in the v3 release (with a change to RecyclerView). It seems this got stuck in a feature branch I forgot to merge.\nWill do that shortly. because it hasn't been merged.\nThe branch contains some unrelated code that I don't want to release yet, so I either have to spend some time splitting it out or finishing it.\nThis will be next thing I work on, hopefully I find some time over the christmas holidays.. java\ndpd.setMinDate(Calendar.getInstance());\n. I'm running under the assumption that you create a new instance each time you need to show a date picker and manage the state in the application in the mean time.\nI'll keep this open. If it turns out to be sufficiently easy to fix I'll add it in, but it's not a scenario I'm actively testing.\n. I don't think I can make this work the way you like.\nIf the dialog is not shown, Android will not call its onSaveInstanceState callback. This means that you as the application developer will always be responsible for saving the Dialog state when configuration changes happen in case it is not shown.\nAt that point you can just as well save the output of the dialog and create a new instance.\nI'm going to put this as a wontfix and add some explanation to the FAQ\n. I recently received an android tv device on a loaner.\nI'll see what I can do.\nThe usual disclaimer applies though: time for this project is on the low side at the moment, so everything might take a while.\n. I'll need some more information.\nAre you trying to set a title on the TimePickerDialog. Is it happening on a tablet?\nIs this happening on a real device or in the emulator?\nThe best would be if you can share me a full code snippet which reliable reproduces the issue (on the emulator and a device).\n. would you happen to have an item in your layout with the id time_picker_header?\n. This is helpful and should help me triage the issue\n. Is this on top of the current version in master (which includes part of your other PR)?\n. This change won't totally fix your problem I think.\nIf you enable the seconds picker it still won't fit.\nWouldn't it be better to just use a separate layout for small devices?\nReduce the font size maybe? See if the vertical space can be exploited a bit more?\nI also changed the font sizes back to dp, so the system setting should affect the scaling anymore.\n. This change is better than nothing.\nI'll add it in, but with a selector on the screen resolution. If you can tell me from which screensize this becomes necessary?\nI don't have devices small enough to test with.\nI'll add something on the backlog to work on an improved design for smaller screens\n. I think you are referring to this library:\nhttps://github.com/borax12/MaterialDateRangePicker\n. This is currently the way to do it.\nI might add this code in and expose some sugar method.\n. The dialogs can be used as plain fragments.\nYou can then use the child fragment manager to inflate them side by side in your Dialog (this puts restrictions on the API level)\nAlternatively, someone made a range picker based off this library: https://github.com/borax12/MaterialDateRangePicker\n. Take a look at the included sample application.\nAre you getting any specific errors?\n. I can't reproduce this issue, and none of the posts contain any relevant information.\nUnless one of you stops complaining and actually answers the questions I've asked or comes up with a reliable way to reproduce this issue, I will close it again in 5 days.\n. Use something like (pseudocode):\njava\nif(Build.VERSION.SDK_INT < 14) StandardPicker.inflate();\nelse MaterialDateTimePicker.inflate();\n. What does this do?\nIt seems like it adds just ad additional callback method (which btw has a typo in its name).\nWhat does this buy you that you can't accomplish with the standard Dialog callbacks or say a button in your app?\n. This is really too specific functionality for a generic date / timepicker.\nIf you don't feel comfortable maintaining your own changes, you could use a remove button in your app (see google keep for how they do it), or for example do swipe to remove on the reminder entries (which is what I do in an app).\n. try\njava\npicker.getDialog().setCanceledOnTouchOutside(false);\n. It doesn't. I haven't released a new version since I added that feature.\nI have been away from computers for a while. I'll try to release a new version this weekend\n. I have released a version containing this feature. It should be available on Nexus in a few hours.\n. Do you by any chance redefine some fonts in your theme?\nSee #149 \n. This is probably the same thing.\nTry the version I released yesterday (v2.2.0) and let me know if that fixes your issue.\n. I need to think about this.\nIt deviates from the google reference design and I'm not sure how many people would use this.\n. I've thought about this and I don't think I'll merge this.\nHiding the header and title makes it look like a calendar widget, which means people will start to use it as such.\nThis will in turn lead to a whole lot of issues because it wasn't designed to be used that way.\nFor these kind of changes it's probably best just to fork the library. Nothing wrong with that.\nPlease don't take it the wrong way. I really appreciate your effort and contribution, and in general deciding what to support is a very grey zone.\n. I don't think you will have any issues in your use case.\nAs long as you use it as a datepicker it should all just be fine. The changes you've done are fairly minimal, so you should have no issues keeping them in sync with this library.\nI'm reluctant to merge it in, because I don't want to have to support the feature. I'm thinking someone will start using it as part of a calendar app and come up with all sorts of feature requests and issues because I'm not testing for that use case.\nEveryone is free, and even encouraged, to fork the code and use it for whatever they like, but my time to work on this is limited so I like to keep the use cases I support fairly focussed.\n. I did think of a drawback with hiding the header: you will no longer have access to the year picker (which you get to by tapping the year in the header)\n. I don't understand what you mean.\nCan you show a screenshot and highlight what you think is wrong?\n. Disable 24hour mode.\nThe entire point of 24 hour mode is to show 13h, 14h etc.\n. There is no such parameter.\nThe design of the dialog is meant to select days. It doesn't make a lot of sense when selecting just a month and a year.\nYou can easily use dropdowns for this.\n. Take a look at the sample app code in this repository.\nYou need to pass a Calendar[], there's nothing stopping you from doing that.\n. I think this is an issue with your code: the error says that some class cannot be cast to an OnDateSetListener.\nSo I think the thing you're passing in as the callback is not an implementation of the OnDateSetListener.\n. The dialogs extend from normal Fragment, not the support Fragments.\nIn any case: the code excerpt you've given me is too short to debug this. For now everything points into the direction of an issue with your code rather than the library.\n. This is to save some vertical space of really small devices.\nI think it's going to start clipping if you just add it in without modifying some of the other dimensions.\n. Well your note does say why this happens.\nThe library assumes you create a new instance every time.\n. Because they different on the inside.\nI'm not saying this cannot be done, I'm saying I'm not supporting it right now.\nI don't test the cases where you reuse the instances. There might a number of other subtle issues.\nI don't test them because I don't know why you would keep them around. Why not just create a new instance every time? Lazy loading results in much better performance generally.\n. I don't really understand what you are trying to do.\nYou can restrict the valid selections using the following methods:\n- setYearRange\n- setMinDate\n- setMaxDate\n- setSelectableDays\n. Very strange.\nI can't reproduce this here.\nWhich version of the library are you running?\n. Can you reproduce this by modifying the sample app?\nThe code snippits you've shown don't really show anything wrong.\n. I'll check that out and see where I get.\nThanks for taking the time to create this!\n. @vikramkakkar thanks a lot for going through this! I've been lacking the time recently.\nI think I'll add an overloaded function which takes in a String and parses the color for the user. This should hopefully make this easier for people to use.\nAlternatively/additionally I can force the alpha bits in setColor\n. You are still trying to instantiate the default Datepicker.\nYou need to change your import statements from\njava\nimport android.app.DatePickerDialog;\nto\njava\ncom.wdullaer.materialdatetimepicker.date.DatePickerDialog;\n. Glad you figured it out.\nJava forces everything through a object oriented inheritance model which has lead to weird development patterns like anonymous inner classes etc.\nJava 8 lambda's makes this a lot easier, but Android doesn't support that yet.\nIf you're new to Java, then you'll be in for quite the ride, because Android uses about every trick in the book, making it rather unintuitive unless you have a ton of Java experience (IMHO).\n. Tap/click on the year in the header to show the year picker\n. I don't understand what you're referring to.\nThe pickers implement onTouch where required and react just snappy to touches over here.\n. I see what you mean now.\nI never really considered it a bug, but I'll see what I can do about it.\n. Because you shouldn't use an editText as a button?\nYou can use a regular TextView and then set the contents in the callback.\n. Great that you found a solution :-)\n. Something like an actual problem statement would be nice. I can't work with this.\nGiven the other issue you've just created, I think you're not using the components properly.\nPlease take a look at the included sample app first.\n. The library implements the spec: the selected day is highlighted using the accentColor.\nIt'll take the accentColor from your theme, or you can set it in code.\n. Indeed, because the spec has them in the same color.\nYou can mod this in, but I'm not going to support it.\nIt doesn't need to expose every option under the sun, that's what forking is for.\n. No worries, all questions and requests are welcome, provided I'm allowed to say no too ;-)\n. You'll need to explicitly specify the namespace in your cast.\nThere shouldn't be any issues using both in your project.\n. What is the actual issue here?\nYou are constructing an Array of TimePoints that doesn't contain 12:00. This does not seem to be related to the library.\n. Ok, I get it now.\nI'll have a closer look.\n. This is a known limitation.\nsetInterval is sugar around setSelectableTimes, which takes precedence over setMinTime.\nProbably this behaviour could be improved.\n. It would be helpful if you could show me the code snippet where you actually set the color and how the color value is computed.\nGiven that the method just takes an int which in android can be any number of things, I'm thinking that the colors are not supplied correctly.\nOnce I know how it's failing, I can add some additional input validation or better documentation.\n. That was the plan: annotate in the code and improve the docs.\nI'd like to be sure that this is indeed the cause for everyone's issues though (there's a lot of issues around this)\n. Nice pull request.\nI was gunning for an exclusive type behaviour when I initially implemented this, but I can't really think of any drawbacks with having minTime and maxTime affect selectableTimes.\nI'll merge and release this when I find a spare hour to work on the library.\n. What would you like to be cleared exactly?\nThere is always a selection in the datepicker.\nIf you need to clear an alarm in your app, try adding it to your app UI with a seperate button, or a swipe to dismiss action\n. Check PR #156 \nI currently don't really plan to add this functionality, the goal is to stick to the guidelines, but I can always be convinced by compelling arguments.\n. Great stuff.\nI'll turn that in a gist and add it to the FAQ of the project.\nIt shows how you can extend this without me having to support a thousand different rarely used options :-)\n. The pickers extend DialogFragment, so you can create your own Dialog and use them as the content for that.\nWhen not creating their own Dialog, the pickers do not render the OK and Cancel buttons, so this should allow you to create a buttonless dialog.\n. Can you please create a new issue, rather than commenting in totally unrelated ones?\nI will also need more info on this: at least a stacktrace, the library version and the api version of the device on which the error occurred.. DAY_OF_MONTH is zero base indexed in the java Calendar API.\nI'm sticking to android/java convention here.\n. It returns the RadialTimePickerLayout which is a child of the TimePickerDialog, probably you can figure it out that way.\nTo be honest I've never really had a use for these parameters. I just left them in, because the original google library had them.\n. Screenshot and screen size would be helpful.\n. Not really.\nIt is very hungry in vertical size and not really optimised for small screens.\nI'm in the process of implementing the current marshmallow design which is much less demanding on vertical pixels and should render properly on this device.\nI hope to find some time to continue working on this in the coming days.\n. Fork it and take a look at res/layout/mdtp_datepicker_dialog\nShould be fairly easy to figure out which dimension you need to tweak from there.\nYou might not need to fork and could probably just overwrite the right mdtp_* prefixed dimension in your application\n. It depends on your android version.\nGoogle made some big changes/improvements in api version 16 (IIRC)\n. There is a method to limit the options to a specific set of days, but no method to exclude a set.\nWhat you can do is extend DatePickerDialog and override isOutOfRange with the logic you need.\n. Is that a screenshot from the tablet?\nThe library includes separate styling for sw600 which should account for most things.\nIn case you really want to tweak it, you can override mdtp_day_number_size\n. I'm not going to create a method to set this text size.\nI'm on the hook to make sure that such a method works and gives sensible results with every future version of the application. This is a burden I don't want.\nAs I mentioned earlier, nothing prevents you from overwriting mdtp_day_number_size with a value you like more in your own application.\n. Just for the aesthetics you might want to increase the label size as well\n. I'll need to shrink the font size on smaller displays.\nThanks for bringing this to my attention.\n. Read the docs, look at the sample, etc ...\n- setMinTime(Timepoint time)\n  Set the minimum valid time to be selected. Time values earlier in the day will be deactivated\n- setMinDate(Calendar date)\n  Set the minimum valid date to be selected. Earlier dates will be deactivated\n- Timepicker Constructor:\njava\nTimePickerDialog tpd = TimePickerDialog.newInstance(\n  MainActivity.this,\n  now.get(Calendar.HOUR_OF_DAY),\n  now.get(Calendar.MINUTE),\n  mode24Hours.isChecked()\n);\n. Hey Jerry,\nI agree that returning the time picker fragment makes more sense.\nThe library is a fork from a google library and this was the signature they used.\nI'm considering changing the signature of the callback to include the fragment, similar to the dateset callback, in the next big version.\nThe RadialPickerLayout is a child of the Time Fragment, so maybe getParent() can help you out in the mean time.\n. Thanks for the contribution :-)\nIt looks like a massive PR, so I'm going to need some time to review this.\n. Can you supply some additional information:\n- Does this happen on multiple devices?\n- Can you show some of the code that generates the picker? (the year picker should always be visible, there's no way to hide it in this library)\n. Duplicate of #5 \nThe design of the daypicker doesn't lend itself to just month and years, it's not a usecase I intend to support right now.\n. There's no way to enforce a certain locale. It uses the default locale of the device it's running on.\nIt probably is possible to make this configurable, but it's not on my short list of things to add.\n. Not yet.\nDuplicate of #144 \n. You're going to need to give some more background.\nPreferably also show the snippet of code where you initialize the dialog.\n. That's not supported.\nIt's a small enough change if you fork the library.\n. You shouldn't use an EditText as a Button.\nIt clashes with the built-in event listeners.. Can you be a bit more specific?\n. The accentColor drives the entire color scheme of the pickers.\nIf you really want to start messing with font colors, you can override the actual color definitions in your app.\n. Reply to the title:\njava\ndpd.setMinDate(Calendar.getInstance());\nI don't undertand the question you're asking in the body of the issue.\n. You initialize and show the second picker in the callback of the first one.\nThis sort of question is more suited for stackexchange than here. It is not an issue with this library.\n. It uses the language of the device where possible. No need to set anything up.\n. They are DialogFragments, which is a class that extends Fragment\nSo technically they should be usable in an Activity.\nThat being said, I never tested this. Let me know how it goes :-)\n. In that case it's not supported right now.\nI don't have a lot of time to work on this at the moment, and still a lot of things that are higher up on the priority list.\nYou'll find most of the components you want in separate classes. If you can manage to integrate it in a transparent matter to the current functionality, I'm more than happy to take a pull request :-)\n. Had a quick look, looks OK to me.\nOnce I can test it out locally I'll merge it.\n. This is because the callback doesn't return the TimePickerDialog but a child View.\nIt's a leftover from the google code that I forked and not very intuitive.\nYou're not the first to complain about this and I intend to change this behaviour in the next major release.\n. I can't reproduce this, and I can't really see anything wrong at the code positions mentioned in the stacktrace.\nYou're going to have to give me some more information\n. By fixing your dependencies and actually using this library rather than https://github.com/borax12/MaterialDateRangePicker\nDuplicate of #151 \n. It's more or less the first thing in the README on the homepage of this github project:\ngradle\ndependencies {\n  compile 'com.wdullaer:materialdatetimepicker:2.3.0'\n}\n. Can you be a bit more specific?\nPerhaps indicate on a screenshot what is wrong or make a mockup of how you'd like things to be displayed.\n. Repeating your original question is not being more specific\n. It is compatible, in the sense that you need to use the regular FragmentManager to display the dialogs, but can use the SupportFragmentManager in other place of your application\nFrom the FAQ\n\nWhy not use SupportDialogFragment?\nNot using the support library versions has been a well considered choice, based on the following considerations:\nLess than 5% of the devices using the android market do not support native Fragments, a number which will decrease even further going forward.\nEven if you use SupportFragments in your application, you can still use the normal FragmentManager\nThis means that in the current setup everyone can use the library: people using the support library and people not using the support library.\nFinally changing to SupportDialogFragment now will break the API for all the people using this library.\nIf you do really need SupportDialogFragment, you should fork the library. It involves changing all of 2 lines of code, so it should be easy enough to keep it up to date with the upstream.\n. Cool\nI added this to the README\n\nYou can use both the regular and support fragment manager side by side in a single app, but for religious people / esoteric use cases, this could be great. There's no way to disable specific days right now.\nYou can set enabled days and min/max dates.\nI'll add this to the (admittedly long) list of things I'll look at.\nRight now, you can extend DatePickerDialog and overwrite isOutOfRange()for custom behaviour. \n. Thanks for the contribution.\nI recently got an Nvidia Shield. I'll see how this behaves shortly :-)\n. You can keep pushing into this pull request.\nI'll go through the other PRs and feature requests while you're hacking away at this one.\n. Cool.\nGive me some time to check this out. I'll hopefully get around to it this weekend.\nReal life has been rather hectic the last few months, so this library hasn't always received the TLC it deserves.\n. > I had to get creative ;)\nThat must be the best single line summary of android development I've seen\n. I have already taken a quick look, but the code is rather dense.\nThere's a whole lot of if/else statements, which on first look feels very brittle, but I haven't grokked it completely, so I can't say how I'd like it done otherwise.\nI also need to look for an additional maintainer for this library. I have long stopped working on the project that spawned this, and my day job + newborn are preventing me from putting in the time and effort that this thing needs.\n. Would you be open to help support this feature?\nDebug issues that are created against this?\nLike I mentioned, I'm pretty low on time, so I'm cautious when adding things, because I'm on the hook to support it indefinitely.\nIf you'd be open to keep looking after this particular feature, that would change things.\n. @digithree congratulations! It can be though at the start, but I guarantee you it's all worth it.\nI'll merge this in over the weekend and do a release.\nI'll also see if I can grant you commit rights, so you can more easily handle any necessary bug fixes.\n. Good catch.\nI was just refactoring this code to implement a new feature.\nI'll just implement the rounding to midnight, to save you the hassle of having to rebase.\nBtw: it would have saved you some effort if you'd just let trimToMidnight() take a Calendar object rather than a Date\n. Services are background processes and don't have a UI. As a consequence they can't render Fragments.\nYou need to launch an Activity using an Intent from your Service and then have the Activity take care of rendering the dialog.\n. You can set the accent colour and chose between a dark and light theme.\nThis is what the material design specs foresee for pickers.\nI don't really want to support any more customizations.\nYou can do a lot by overriding some mdtp_* color definitions in your app. If not, it should be easy enough to change this in a fork.\n. Unless you can give me concrete steps on how to reproduce this, there's not much I can do.\n. Probably something went wrong when installing the module.\nTry a build clean\n. There's a work in progress in the datetimepicker branch.\nFeel free to experiment with that.\n. I'm trying to keep the interface for this library as close to the built-in pickers as possible.\nI probably won't do this.\n. It's a DatePicker, hiding it wouldn't make too much sense.\nThe design just isn't meant to do that.\n. You can try to use just dropdowns.\nThere aren't that many values to display.\nIf you have an idea that closely resembles the datepicker, you can always fork and rip out the bits you don't like, nothing wrong with that :-)\n. Try a build clean\n. This is pretty clearly an issue with your code / build chain, rather than this library.\nJava stacktraces and build time errors are notoriously vague.\n. I don't have any Nougat devices, so I wasn't aware of this one.\nI do not have any version dependent styles, as far as I remember.\nIs this happening in the emulator or on actual devices as well?\n. I see what you mean (I do have marshmellow devices), I'll look into it\n. I don't understand the question. Can you give a bit more detail?\n. From the readme:\njava\nCalendar[] disabledDays = {Calendar.getInstance()};\ndpd.setDisabledDays(disabledDays);\n. I'll have to see how this looks. Based on the code I'm not sure\nYou could also just use a dropdown ;-)\n. Nope, this is not supported.\nThe goal is to stay as close as possible to the Material Design specs as possible.\nIt should be easy enough to change yourself in MonthView.java/drawMonthTitle()\n. This is not supported.\nIt's also trivially easy to circumvent this restriction: select a date around 10 days back and you can then select any dates that were previously disabled.\nYou can disable dates when you initialize the dialog, but not dynamically when it's open.\n. You can attach to some standard Dialog callbacks which are triggered on cancel or dismiss, but there is not callback for a user selection.\n. You are not using the latest version of the library.\n. It happens :-)\n. The library assumes that you're not reusing the dialogs. The overhead of creating a new one is small enough to not be relevant.\nIf you do reuse them, some functions might work, others might not.\n. Fair point.\nI can't remember why I added it (or even if I added it). I'd have to comb through the git history.\nIf the Dialogs were to be reusable, I wouldn't have named it like that. Some people would have expected their old selections to be the default one, others would want to see their init time.\nIf you're really intend on reusing them, you just need to add a method that allows to set the current selected time.\nThe other parts will handle reuse fine, as a side effect of being tolerant to orientation changes.\n. Your initial date needs to be selectable.\nIf it's not, the library will round it to the nearest selectable one. This check is there to ensure that you can't initialize the dialog in an inconsistent state.\n. You'll need to save it in the callback and then use that value when you construct the new Dialog.\nThese pickers are not meant to be reused, you should create a new instance every time you need one.\n. Are you sure the currently saved day is selectable?\n. yes\n. You should try to read the readme, it generally helps.\nTimepickerDialog enableSeconds(boolean enableSconds) and enableMinutes(boolean enableMinutes) Allows you to enable or disable a seconds and minutes picker ont he TimepickerDialog. Enabling the seconds picker, implies enabling the minutes picker. Disabling the minute picker will disable the seconds picker. The last applied setting will be used. By default enableSeconds = false and enableMinutes = true.\n. Yes there is, and it is mentioned in the README.\n. Allow me to copy the relevant section from the README then\nOnDismissListener and OnCancelListener\nBoth pickers can be passed a DialogInterface.OnDismissLisener or DialogInterface.OnCancelListener which allows you to run code when either of these events occur.\njava\ntpd.setOnCancelListener(new DialogInterface.OnCancelListener() {\n    @Override\n    public void onCancel(DialogInterface dialogInterface) {\n      Log.d(\"TimePicker\", \"Dialog was cancelled\");\n    }\n});\n. It shouldn't, and as far as I can see, it doesn't?. That's not implemented yet.\nThere's a pull request that adds this, that I really need to review\n. Yes, it's localised into most languages.\nYou can check that in the code\n. This has been added in the v3 release. It's not a drawable. It is rendered in code directly.\nAs such it's not something you can change easily.\nThe goal of the library is to implement the google references design as good as possible, so I'm probably not going to make this a config option on the library.\n. I don't know.\nMy job and a newborn are keeping from spending much time hacking on this library.\nSimple features/bugfixes I still tend to get done, but larger invasive changes, especially around the design (I'm not a graphical designer) tend to take more time than I have right now.\nThere is a pull request pending for ages, that adds some of these features, and I've got some parts of the redesign done in a separate branch.\nYou can check those out if you are in a hurry.\nI do appreciate contributions and I'm looking for someone extra to maintain this, so pull requests get reviewed in a more timely fashion\n. There shouldn't be any issue with that.\nThe library itself relies on a v23 version of the support library at the moment\nThe error also seems to be more around the fact that maven couldn't get the library from the jcenter server. Maybe you had some network issues when running the build? (not noticing it previously because all dependency results were cached)\n. Does this still happen in version 3.0.0\nI've updated the dependencies, which hopefully resolves conflicts like this\n. The dialog is behaving as expected: render a given date in the timezone of the current device.\nIf you really need to treat some date timezone independent, you'll have to do the timezone conversion up front, before initializing the dialog\n. newInstance always required a callback.\nThe javadoc in the code reflects this, the examples in the README reflect this.\nThe only thing missing in the docs is an explicit description of the signature of newInstance, but I'm not sure how much this would add.\n. This feels like a Nougat specific issue.\nThe state is properly restored, but it's not scrolling the selection into view.\nI think I know how to fix this.\n. I had a look at this and the potential solution I was thinking of, is actually already there.\nIn the mean time I have a device that runs nougat and I can't reproduce this on the master branch.\nI did change the ListView to a RecyclerView there, so maybe that also fixed this.\nCan you try master and report back?. Like I mentioned, I am not able to reproduce this here locally.\nThere is code to restore the state.\nAre you experiencing this on all devices?\nWhich features of the pickers are you using?. Can you try the sample app?\nMaybe set a breakpoint at line 323 and 456 in the onCreateViewView() method of DatePickerDialog to see what the state looks like.\nDoes this also happen with the Timepicker?. I'm aware of this. The pickers are very hungry for vertical space, and if you add all the options, they won't work properly on low res screens.\nThe \"marshmallow\" layout should suffer less from this (whenever I get around to finishing that)\n. Can you check whether the VERSION_2 in the newly released version 3.0.0 fixes this?\n. Great!\n. Can you try 3.1.1?\nI changed the sizes in the header slightly so everything should now render properly. Not related to this library.\nYou have this library in your dependencies: https://github.com/borax12/MaterialDateRangePicker\n. This is not in line with the material design spec.\nAs such I'm not going to officially support it in the library. Development has already massively slowed down due to the large amount of options I do have to support.\nYou are always free to maintain your own fork of course. That's the beauty of open source.\n. Extend DatePickerDialog and override the isOutOfRange method.\nThis one is called for every date the picker wants to render.\nIf it returns false, the date will be disabled.\nIf you override this method, none of the built-in methods to restrict dates will work, all of it is delegated to your logic.\n. The exception tells you everything you need to know: your MainActivity does not implement the OnDateSetListener interface.\nEither pass something in that does implement the interface, or implement it on your main activity.\nThis is clearly an issue with your code and not this library\n. This is due to the fact that it returns the RadialPickerLayout rather than the TimepickerDialog.\nThis is a relic of the google library that I forked to create this.\nUnfortunately changing this touches the public API which makes it a semver major change.\nI have made this change in the branch for the next major release.\n. Fixed in v3\n. Fixed in v3\n. There's no built-in support for that.\nEither create your own Dialog with that option set, and add the TimePickerDialog to it as a DialogFragment.\nOr extend the TimePickerDialog as follows\njava\nclass MyTimePickerDialog extends TimePickerDialog {\n    @Override\n    public Dialog onCreateDialog(Bundle savedInstanceState) {\n        Dialog dialog = super(savedInstanceState);\n        dialog.setCanceledOnTouchOutside(false);\n        return dialog;\n    }\n}\n. Thanks, looks good to me.\nWill try to get this merged and released today.\n. Please read through the readme and take a look at the code of the sample app.\nThis issue tracker is for bugs with the library, it is not a school that will teach you how to write code.\n. The TimePicker has no notion of dates only time.\nYou'll probably have to compute the times which are acceptable depending on your current state and set those using setSelectableTimes(), rather than relying on setMinTime and setMaxTime\n. See #267 \n. https://github.com/wdullaer/MaterialDateTimePicker#additional-options\nsetSelectableDays()\nsetDisabledDays()\nhttps://github.com/wdullaer/MaterialDateTimePicker#how-do-i-use-my-custom-logic-to-enabledisable-dates\n. That's not the purpose of the issue tracker.\nThe information in the readme should allow you to write this code yourself.\nThe issue tracker is for reporting bugs with the library, not a forum for me to help you build your app.\n. You need to create two seperate instances and give them a different tag when showing them using the FragmentManager.\nYou can chose to give them both the same callback, and distinguish by inspecting the tag on the DatePickerDialog argument in the callback, or give them both a separate callback as an anonymous inner class.\n. Can you fetch other libraries from maven central?\n. The idea is that the picker uses the locale of the user/device.\nSo if the device doesn't have a Mexican locale, it probably means the user is not Mexican and should see the picker in a different language, with different abbreviations.\nOverriding the built in logic with a static list throws out all localisation.\nCan you give a bit more detail on your usecase, because right now, I don't see the problem that this is solving.\n. I reread the code and it's explicitly set to English because a Spanish user of the library opened an issue to have it changed that way.\n(I'm not Spanish, so I have to rely on user input).\nIt just checks for the language, not the full locale, so I can set this to es_ES and then it should be fine in es_MX\nThis only applies to API version < 18, as google baked in the single letter weekday into android itself at API version 18.\nI'm closing this PR and I suggest you open an issue so I don't forget to fix this\n. I'm pretty sure google spent some time getting the localisation for Spanish right.\nIf the default android localisation value is 'X' for a Wednesday for es_MX, then I'm going to keep it that way.\n. That's possible, I'll check this out. I will need some sample code to look at, because it is reliably working for me on android 6.0 devices. The pickers will show chinese text if the device locale is set to chinese. The font you are using seems to impact the margins and padding rules.\nYou will have to override the sizes of these pieces of text to fix your issue.\nCheck res/values/dimens in the code to find the value you're looking for.\nOverrides done in your app take precedence over the values in the library.. First: please keep this issue tracker for bugs with the library. General programming questions, like this one, belong more on sites like stackoverflow\nThe parameters you give to the dialog when creating it contain the default date.\nYou'll need to set your Calendar instance to the date you want before querying it for the data given to the datepicker dialog.\nCalendar startDate = Calendar.getInstance();\nstartDate.add(Calendar.DAY_OF_MONTH, 1);\nDatePickerDialog dpd = DatePickerDialog.newInstance(\n    this,\n    startDate.get(Calendar.YEAR),\n    startDate.get(Calendar.MONTH),\n    startDate.get(Calendar.DAY_OF_MONTH)\n);\nI strongly suggest you read some general java programming guides and the documentation for the Calendar class\nhttps://developer.android.com/reference/java/util/Calendar.html. What's wrong with the current setTitle() option?\nhttps://github.com/wdullaer/MaterialDateTimePicker#additional-options. You can tweak these values by overwriting certain mdtp_ prefixed values in your app.\nHowever if you increase the title font size, the vertical space of the pickers and they probably won't work that well anymore on smaller screen sizes (the dialogs are rather big as is). The pickers are also DialogFragments, so they can be embedded in your own Dialog, rather than the built-in logic. This should allow you to create exactly the behaviour you want.. This is currently not possible.\nA month picker without a year would also need some layout tweaking (hide the weekdays, because they are not well defined in such a case). Not any time soon.\nI have only a very limited amount of time to work on this and there are a few more high priority features I'd like to get done. Nope. Updating to the current material design standards and implementing a combined date and time picker will consume all the time I have to work on this for the foreseeable future.. If there is any progress on this, I'll update the issue.\nThis is not something which is high priority at this point.. Not easily.\nThe pickers are DialogFragments, so they can be embedded in your own Dialog, but this doesn't allow them to be embedded in regular Activities if I remember correctly.\nEssentially you'd have to fork the library and adapt the View classes to your needs. This library can kickstart that effort, but won't hand it on a golden plate.\nI'm currently not considering adding this to the library. I barely have enough time to support the existing code as is.. https://github.com/wdullaer/MaterialDateTimePicker#why-does-the-datepickerdialog-return-the-selected-month--1. You need to use the static newInstance() method, not the empty constructor.. You can overwrite the mdtp_* prefixed colour values in your app to achieve this.\nThis isn't part of the \"public API\", so I won't promise that these will never change on a newer version.\nI'm not exactly sure which pieces you want to change the colour of, but you can find the available values in res/values/colors.xml. This is due to how the rounding is down.\nChanging the hour to 10 essentially puts you in an unacceptable time. The system will then round the selection to the nearest acceptable one. Both 10:30 and 9:30 are an equal distance away, so it will round down as a tie breaker.\nI should probably improve this so it first tries to round down without changing the hour.. What's the issue in this video?\nI can't see any problems with the rounding there.\nYou select 10 and it will round to 10h30, rather than 9h30 previously.. Try the current master branch. This should be fixed in the latest master branch, please try that one. Why is this counter intuitive?\nIt is consistent with the behaviour when showing the daypicker first, or the behaviour of the timepicker.\nClicking OK accepts the current selection and closes the dialog.\nSelecting a a year auto advances to the day picker. Just like selecting hours in the timepicker will autoadvance to the minute picker.\nThe thing that bothers me is that it's not really clear how to get to the year picker, unless you make it appear first. (I didn't know there even was a year picker until I discovered it in the code). So here's a suggestion:\nShow a year only picker, and then launch a date only picker from the callback.\nIn this case, you have to always click OK to advance to the next stage. (although there is no obvious way to return back to the year selection)\nThis isn't currently supported by the library, but could quite easily be implemented on the marshmallow layout I think.\nI don't want to change the behaviour that the OK button closes the dialog.. There is no stand alone year picker currently, but it shouldn't be too much work to do.\nEspecially the marshmallow layout is straightforward to adapt.\nThe original layout would require more changes to look nice when used as just a year picker.. I will take well written pull requests ;-)\nThe design I have in mind is making an option enableYearPicker and enableDatePicker (throw if show() is called when both are set to false)\nThen don't render the year / date in the header and put a guard in autoAdvance(). That's the idea yes.\nThe default should be the current behaviour. The picker is not really timezone aware.\nSo if you're using Calendars to pass in date information, they should be in the same timezone as the phone.. Looks good to me, I'll try to merge it in one of these days. The last parameter in the getInstance() toggles 24 hour mode. (you want to set this to false)\njava\nCalendar now = Calendar.getInstance();\nTimePickerDialog tpd = TimePickerDialog.newInstance(\n    TimePickerFragment.this,\n    now.get(Calendar.HOUR_OF_DAY),\n    now.get(Calendar.MINUTE),\n    mode24Hours.isChecked()\n);. The callback always returns 24h values for better compatibility with the java Calendar class.\nIn case you really need to know whether it's am or pm, you can use the calendar class to figure it out\njava\nCalendar someDate = Calendar.getInstance();\nsomeDate.set(Calendar.HOUR_OF_DAY, hourOfDay);\nsomeDate.set(Calendar.MINUTE, minute);\nsomeDate.set(Calendar.SECOND, second);\nif (someDate.get(AM_PM == Calendar.AM) System.println('The selected time is AM');\nelse System.println('The selected time is PM');. I don't understand the request?\nIf you don't intend to open the Dialog, then what's the point of the picker?\nJust use Calendar.getInstance()\nThe Calendar class also includes methods to compare and manipulate dates, so use those. That's functionality that does not belong in a picker.. I'm assuming you're rendering two dialogs here.\nSo that means you're creating the second Dialog in the callback of the first one. You can read the selection made in the first one and use that to manipulate the second one as needed.\nYou probably want to use an anonymous inner class rather than implement the callback interface on your Fragment/Activity. Are you sure you're using the latest version?\nIf you are, I suggest doing a build clean (or whatever forces the library to be redownloaded). It sounds like a corrupted download to me.\nThe library doesn't support picking a date range. You could implement it yourself, or you can take a look at this fork: https://github.com/borax12/MaterialDateRangePicker. Can you show me the code and options you're using to create the dialog?. I can't reproduce that here, so I can't really help.\nI find that gradle introduces just as much problems as it solves (and generally behaves like a big black box when combined with android studio). Did you have to change code in the library to fix this?\nCan you let me know what you did?. Can you give the exact error message you get which points to that line?. There might be a clash on the \"seconds_space\" id somewhere in your project or in one of your dependencies.\nI'm happy you confirmed it works on a blank project, because I couldn't think of any reason that piece would call a compilation failure on its own. I prefixed most color and value resources, but not the id's in layouts.\nI should probably do that as well to reduce the chances of this happening. (although if someone forks this library and doesn't bother to change the resource prefixes, you'll still run into the same issue). Have you taken a look at the new v2 layout?. That's the one.\nThere are still some tweaks left to do on the margins and it still scrolls vertically, but that should eventually look like the current google guidelines. That would be an update to v2. Yes, the left / right buttons are still on the todo list.\nIf it is too confusing, you can configure the calendar to scroll vertically regardless of which layout you are using.. That's not on the road map.\nThe goal is to implement these:\nhttps://material.io/guidelines/components/pickers.html\nI hardly have enough time to keep up with those :-). what's the problem with v25?. I don't think it works that way. If you have build issues (I don't remember all the specifics on how android scopes dependencies when building), you should either update the support library version in your application or fork this one and downgrade the dependency.. Confirmed, will try to get a fix out asap. It seems it is not properly rounding the value when you actually release the touch.\nThis is not this regression, but a different issue. Would be better to track it in a different issue.. #233 . I'm sorry but I do not understand this issue?\nWhat exactly is the problem? Can you elaborate, maybe show a screenshot of the issue and provide some code that reproduces it?. I'm not sure this is linked to my library.\nVersion 3.1 uses v25 of the support library, so try upgrading that dependency and see if the problem persists.\nAlso: the code in that repository doesn't seem to be the code that is giving an error: there is no line 77 in the LoginActivity file (which is where your stacktrace points to). Have you tried using setSelectableDays()?\nOr tried overriding isOutOfRange()?. This is to be expected.\nThe disabled days is stored as an array of calendar objects which need to be iterated over multiple times per date that is rendered.\nIt tries to shortcircuit the comparison, but if the majority of your disabled days is before the rendered date, you will still hit the worst case scenario.\nThe current logic is really not intended for big sets of disabled dates.\nPerformance could probably be improved by saving the disabled dates in a hashmap (or another structure with O(1) lookups), so that we don't need to iterate the full array for every date.\nSimilarly memory usage could be improved by trying to reuse the same Calendar object when comparing, rather than creating a new one each time (I don't think I'm caching).\nIn your case, it seems like you want to disable roughly half a year. I'm guessing you have some logic that drives whether a date is disabled. You could extend the picker in this class and overwrite isOutOfRange() with your logic, rather than exploding the logic into an array of Calendars and using setDisabledDays().. Can you give me some more information on the screen? (resolution, density etc). You can just override the mdtp_ namespaced dimension values in your app to customize all of these values.\nThere's no real need to add a programmatic API for that.. you've already created a PR for the theme improvements, so I'll close this one. I haven't released this to maven central yet.\nIt would be great if you could try with the current master branch.\nIt should no longer crash, but I'm not entirely sure the behaviour will be sane on API 14 and 15 (I no longer have any devices with this API level to test with). If you're not seeing the committed changes, it is to be expected that it will still crash.\nI will release a new version today or tomorrow, so you can pull the updated version from jcenter.. I think you've created an issue for the wrong project. Can you reproduce this on multiple devices?\nThat code looks fine to me, and I've never seen this behaviour myself.. Are both running the same android version?\nCan you create a minimal application that reproduces this issue / does the included sample app exhibit this issue?\nThis library is not doing anything fancy with the Dialog. It's the built-in android framework that shows the Dialog, dims the background and dismisses the Dialog, so I'm a bit at a loss right now.. I checked out your code: you are in fact launching a Dialog in a Dialog.\nClicking the button launches the Dialog you created using the TimePickerFragment.\nIn the TimePickerFragment you launch the actual pickers, which are their own Dialogs.\nAfter selecting the date and time, the inner Dialogs have been dismissed, but the callback in your activity does not dismiss the outer Dialog. Because the outer Dialog does not have any views anymore that are rendered, it just shows the dimmed background.\nThe solution would be to move the code launching the pickers out of a DialogFragment into the Activity, or alternatively calling this.dismiss() in onTimeSet() after you have called the Activity's callback.\n```java\n    @Override\n    public void onTimeSet(TimePickerDialog view, int hourOfDay, int minute, int second) {\n        mCalendar.set(Calendar.HOUR_OF_DAY, hourOfDay);\n        mCalendar.set(Calendar.MINUTE, minute);\n        mCalendar.set(Calendar.SECOND, second);\n    mMillis = mCalendar.getTimeInMillis();\n    mOnDueDateSelectedListenerCallback.onDueDateSelected(mMillis);\n    this.dismiss();\n}\n\n```. This was on my list of things to do.\nI'll definitely be taking a closer look at this.\nI'm not sure I understand what you mean with a formatter. Are you looking for a gradle task that applies a code style?. You're right: having a code style will make contributing easier.\nLet me see if I can make one that more or less matches the current style (it's a bit of a mess already). Definitely. Seems like you have the time I lack at the moment.\nLet me block some time to go through your existing PRs at a high level, and then we can set something up.. I read through the code and this looks good to me.\nI need to find some time to test the result on my test devices, but after that this should be good to go.\nIt will also make implementing horizontal scrolling in the version 2 layout a lot easier \ud83d\udc4d . I'm really interested in this PR, so please update it.\nLet me know when I should take a look at it again. Good stuff. I'm really looking forward to this one.. This could be useful.\nI'll review this, the next time I can spend a day of development time. Cheers!\nI'll try to get this reviewed by the end of the month.\nSorry for the delay.. Could you write a snippet of code for in the README on how devs can create their own themes and apply them?. Not right now\nI want to eventually support this in the version 2 layout, but I haven't had the time recently. Did you resolve this yourself?. The library doesn't take a deep copy of the Calendar you pass in.\nTime is set to midnight to avoid weird rounding errors.\nI'll see if I can improve this behaviour, but it's more an issue with how java (pass by reference) and java Calendar work (mutates internal state), than a bug in this library.. This library contains resources, so it cannot be packaged as a jar.\nYou can always just check out the code and build an aar file yourself if this is how you prefer to include your dependencies.. You can download an aar from the releases tab for the latest release now.. Yes\nhttps://github.com/wdullaer/MaterialDateTimePicker#additional-options. There is no such method right now.\nYou can either explode an Array of TimePoints and use that with setSelectableTimes.\nAlternatively, you can extend this class and override isOutOfRange() with your own logic.. Looks good to me. This isn't possible right now. onDayOfMonthSelected is an internal method.\nYou need to implement the OnDateSetListener interface with the onDateSet method to obtain the selection of the Dialog. There is no need to extend the class.\nPlease go through the README which contains code examples and further information. The picker tries to adapt to the locale of the device.\nI'm amazed that the Month and Week labels do not change (they really should).\nSomeone actually made a fork of this library to support the Persian calendar system, maybe that is useful for you\nhttps://github.com/wdullaer/MaterialDateTimePicker/issues/54. Maybe I can make the locale an option (just like you can specify a TimeZone now).\nI'll put that on the backlog and ping this issue when I get around to implementing it. Can I ask how you did this? Which method did you use to disable the days?\nBecause if you use setMinDate to disable all dates before a given date, the picker will disable all year selections before the current year, and even if you use the trick to roll the year forward and then backward, the selected date will be rounded up to the nearest selectable date.\nThe logic that limits the year selection does not take setDisabledDays into account, because the assumption is that this method will be used to disable a limited selection of days. But even in that event if you change the year selection, the date will be rounded to the nearest date that is selectable according to the setup you have done. In fact overriding isOutOfRange is not sufficient for all functionality to work properly.\nI'm thinking of putting all that logic in an interface, so it's clear which methods need to be implemented to have a custom date range logic.. I try to use appropriate font sizes wherever possible.\nThat said, you can overwrite the font size by setting the correct mdtp_ prefixed dimension in your own app.\nCheck the resource folder in the library to see which dimensions are defined and relevant for you. This can't be done right now. This sounds like a logic bug in your application.\nYou are recycling the datepickerdialog instance and calling build twice on it somehow.. Are you sure you're not holding on to an instance of the Dialog?\nThe HapticfeedbackController has a reference to the Context, but only the dialog has a reference to that. Once the Dialog is dismissed all of this will be freed.. Thanks for getting back on this.\nI'll close this now. If you do manage to reproduce, you can reopen it (or create a new one referencing this). Done in v3.2.0. Are you sure this is linked to this library, because the resources that it's complaining about are android built-in ones.. With the information you've provided, I cannot help you.\nBased on what's in this issue, it's unlikely that this library is the root cause of your issue.\nTry a build clean and look into your build chain.. I think you have an implementation issue, because the callback is not called when you cancel or dismiss the Dialog.\nTry the example app to see this in action. Because the Dialog is built with the assumption that it's going to be used once.\nNot all initialisation happens properly when reused.\nIn general I do not think android Dialogs are meant to be reused.. Create a Calendar instance with the returned data, and roll that one day forward. It will do the necessary work for you.. I changed this because people were using it as a callback to get the date and then opened tickets when it didn't work as expected.\nI think protected should do what you want (it will not prevent people from using it as a callback, but hopefully protected should get the message across that this is an internal method). This project also includes the support library. The versions must match. It looks like you're using an older version.. I need to release a new version with that version. This is really really hard on the jvm.\nI'd have to write a custom class loader, adding significant complexity and brittleness.. I wasn't aware you could do that with gradle.\nBased on the docs this should do the trick.\nOf course this puts the burden on the user to ensure that the version of the support library in the app is compatible with this library, but it will be in the majority of the cases.\nI'll add this to the FAQ in the readme, and if I ever require a particular version the support library I'll try to explicitly mention it.. Adding an overloaded constructor that just takes now and the default selection is a good idea.\nChanging the position of the parameters I'm not a big fan of. It results in a rather confusing API (if I keep both versions) and the gain is not big enough to justify a breaking API change (if I remove the current version). I've added the overloaded now constructor.\nI'll think about deprecating the existing ones, although I'm not sure the friction is worth the benefit still.\nI'll also try to release a new version somewhere this week that has all these changes in it. I forgot about this one.\nLooks good to me :-). I am in the process of adding this.\nThe idea is that you implement an interface where you can use any logic to limit the selectable dates.\nYou can achieve the same thing right now by extending the class and overwriting isOutOfRange, setToNearest, getStartDate and getEndDate\nI hope to release a version with this feature in the next few days. This is in 3.2.0. I do not understand the problem.\nPreferably present a way to reproduce the issue, and clearly highlight the expected behaviour. I am not sure yet.\nIt feels like a micro optimisation. I haven't heard anyone actually bumping into that method restriction.\nFixing it comes at a readability / maintainability cost for me (knowing that some stuff is private makes code easier to reason about), although it's only minor.\nCurrently I'm leaning towards, if it ain't broke, don't fix it.\nBut the entire discussion feels like bikeshedding ...\n. Are you reusing the TimePicker instance or creating a new one when you prompt for the end time?. You happened to catch me when I'm cleaning out my inbox :-)\nWould it be possible to make a small example project that I could use to reproduce the issue with?. The typing is an accessibility feature. You should enable those in the settings on your device (although I don't remember exactly which one, it's been a long while since I used this). A code sample that reproduces this on the emulator is good enough.\nIt'll take a while before I get around to properly investigating this otherwise (I don't have a massive amount of time to work on this library, so if I have a reproducable test case to start from I can get to trying to fix it immediately rather than spend my time budget trying to make the issue appear). Good to hear that you managed to work around.\nFor what it's worth: you are exercising different code paths by testing the radial picker rather than the text input. So it will be a more realistic test.\nI am going to keep this open, but at a low priority. I'm interested in finding out what went wrong. I haven't tested the text input for a while.. Would you be open to share some of your tests with me?\nThis library can use some UI level tests. I haven't had the time to write these.\nI would like to embed some of your tests in the automatic test suite here (which should make the library more reliable for you in the long run). I'm guessing the relevant piece would be in appium for this library.\nI'd have to take a look if they have a free tier for OSS projects. I'll take a look it.\nI was hoping you'd have some AndroidTests as well (those run on the emulator, but are written in java), as they're easy to integrate with travis-ci as well.\nThanks for considering it in any case :-). Thanks for this!\nI'll have a read through the appium docs and see how this burito is rolled ;-). This feature wasn't supposed to be in this release, I must have made a mistake when switching between my different branches.\nSo this is coming up, I'll try and patch it up shortly so it doesn't blow up if you accidentally try to use it.. 1. This is not officially supported (and I don't really want to go to that level of customisation). You can overwrite the relevant color resource in your app, or if you need more control, fork the library\n2. The initial selection is passed when you call DatePickerDialog.newInstance(). https://github.com/wdullaer/MaterialDateTimePicker#why-not-use-supportdialogfragment\nProvided you run on Android 3+ you can just call getActivity().getFragmentManager(), both can exist side by side. That comment is in the FAQ actually ;-). I haven't been able to reproduce this.\nI was planning to implement Parcelable on this class, rather than relying on serializable, which hopefully should make this go away (because it won't be relying on jvm magic that much)\nIf you do manage to reproduce it, please let me know (I'm guessing some special value of minDate triggers this). That reproduces it, thanks.\nI'll look into it!. You can get the same by using dismissOnPause(true)\nEssentially you're avoiding the Exception by preventing the Dialog from saving it's state.. This is fixed in v3.2.1\nThe DefaultDateRangePicker could not be serialized leading to the Exception.\nIf it wouldn't have thrown the Exception this would have introduced a memory leak.\nI decided to change the Interface to require Parcelable rather than Serializable. This is a bit more work if you want to implement it, but will force you to think about which values to save. It would be all too easy to try and serialize the Context in the implementation of this Interface. There's no out of the box solution for this.\nI think most people trigger the TimePickerDialog from the callback of the DatePickerDialog.\nAlternatively you can try to build your own Dialog using the picker as Fragments.\nThere are no plans to change any of this in the near future.. Thanks for the detailed report.\nThis is a duplicate of #349 (I'll close this one in favor of the other)\nI doubt the root cause is the HapticFeedbackController. This started after I introduced the DefaultDateRangeLimiter, so that's a more likely place to start looking.\nIf you have any more information, please share :-). https://github.com/wdullaer/MaterialDateTimePicker#additional-options\nUse setAccentColor. The library is focused on Western date and time formats, because that is what I know.\nAs much as I would love to, I'm not intimately familiar with all cultures and languages around the world.\nSomeone has forked this library to the Persian calendaring system.\nYou are free to do the same.\nIn case it can be trivially extended to support Hijri dates and times, I take pull requests.. You need to implement your own DateRangeLimiter\nhttps://github.com/wdullaer/MaterialDateTimePicker#how-do-i-use-my-custom-logic-to-enabledisable-dates. Take a look at the README and the sample app in this repository.\nIf you have issues, stackoverflow is probably a better place to ask for assistance on how to write code.\nGithub is where I like to track actually bugs in the library.\nIn any case, you will need to share some code if you expect people to help. Your current message does not contain anything of use.. This doesn't surprise me.\nAs the docs state: setTimeInterval() is just some naive sugar around setSelectableTimes().\nThe rounding logic does not scale well as a function of the size of the argument of setSelectableTimes() and setTimeInterval() makes it very easy to create big bit arrays of selectable times when you set the resolution rather fine grained (as you just did in this example).\nI was in the process of revisiting this part of the code, so the next minor release should see some improvement here (but I'm not making any promises yet). I've refactored how this is done internally.\nCould you try your benchmarks again and see if the performance is better.\nIt will never reach the same performance as when you're not limiting any timepoints, but it shouldn't be this bad anymore. I've improved the performance quite a bit, this shouldn't be an issue any more.\nIn case your interval is so fine grained that it's still causing issues (even searching in a big tree isn't totally free), you can implement your own TimeRangeLimiter with something specific for your needs that's lighter on resources than the default implementation.. Duplicate of #349 \nThis has been resolved in the latest version of this library. Duplicate of #325 \nIt's on the backlog, but I have no idea how to properly handle this right now. If you have some time, PR's are always appreciated ;-)\nI was a bit worried about the strings in the xml which are automatically interpolated.\nAnyway, I haven't had a detailed look into this yet.. Are you manually  setting the locale?. Why not let the device select it's own locale?\nAnd are you sure you're using a valid locale string, or that the locale is present / supported on the device you are using?. I'll pick this up next time I revisit this code.. This should be fixed in v3.3.0. This issue isn't very helpful to me.\nThere are absolutely no useful pointers in that stacktrace.\nCan you create a small code sample with just this library that reliably reproduces the issue?. Can you create a code sample that recreates the issue?\nWhich features of the DatePickerDialog are you using?\nDo you have an idea which version introduced this bug?. The idea of the support lib is that it uses the versions shipped with the app, otherwise you can just use the native platform libraries.\nIf you would know which version introduced this crash, I could maybe try to triage the issue.\nI don't like to leave issues like this hanging, but it's though if I don't have a reliable way to reproduce it.\nIn any case: thanks for the time you've spent on this.. Duplicate of #416 \nI'll track progress on this in that issue. https://github.com/wdullaer/MaterialDateTimePicker#why-does-the-datepickerdialog-return-the-selected-month--1. You can override the mdtp_* font size values in your app.\nOn phones the fonts are comparable to the built in date pickers, but the spacing is a bit too tight.\nI intend to improve this, but haven't found the magic incantation yet. https://github.com/wdullaer/MaterialDateTimePicker#why-not-use-supportdialogfragment. That's beyond the scope of this library.\nTake a look at java.util.Calendar and java.text.DateFormat\nhttps://developer.android.com/reference/java/text/DateFormat.html. Duplicate of #349\nThis has been resolved in the latest version of this library. I will take a look. This should be fixed in https://github.com/wdullaer/MaterialDateTimePicker/commit/5fd6bedf46f50de1b8fb97b607f60f70669899b7\nI will try to release a new version shortly. I do not fully understand the question.\nYou are showing 2 pickers?. I don't understand your problem.\n24h is the same as 0h\nMaybe show a screenshot with a code snippet and indicate what the expected outcome is.. The callbacks return Calendar.HOUR_OF_DAY not Calendar.HOUR. Thanks for the contribution.\nUnfortunately the design you've taken doesn't really match with the way the rest of the library is designed.\n\nThe getLocale() method should not be a static method on the Dialog classes. It is not a static thing. Subcomponents communicate with the Dialog through the Controller interfaces. That is where this method should go. The Dialogs should implement it.\nSave the locale as a private variable on the Dialog classes. Have all access go through the getLocale() method. This way you only need to set a default value for the Locale only once.\nI'm not sure if it's the github diff view, but please try to indent the code properly.. Manipulate the Calendar object up front.\njava\nCalendar now = Calendar.getInstance();\nnow.add(Calendar.MINUTE, 30);\ntimePicker.setMinTime(now.get(Calendar.HOUR_OF_DAY, now.get(Calendar.MINUTE), 0);\n\nFor reference: https://developer.android.com/reference/java/util/Calendar.html. Duplicate of #280. Can you give a bit more explanation?\nWhat is the button supposed to do?\nMaybe provide a small mockup.. The pickers can be embedded in a custom dialog, allowing you to show effectively any buttons you want.. Looks good.\nI've got some nitpicks, but it'll be easier to fix them myself when merging. (eg: I think your hashing algorithm has clashes). Because I do not have time to write one at the moment. Duplicate of #79 . Probably just a caching issue.. Updated straight to 26.0.1. https://github.com/wdullaer/MaterialDateTimePicker#why-not-use-supportdialogfragment. https://github.com/wdullaer/MaterialDateTimePicker#why-not-use-supportdialogfragment. I have no plans to use joda-time.\nI haven't needed it so far and I would like to avoid pulling in additional dependencies (version management of the jvm is not really elegant).\nIt would probably also be a serious refactor on a library I have barely enough time for as it is.\nThat said: I am curious about your issue. If you set the picker to UTC and the disabled dates to UTC then things should normally need to work (it is comparing Calendars internally). I will need to review the setTimeZone feature, because I did not write that myself.\nDo you have a small code sample that I can use to reproduce the issue?\nOr can you write a test for the DefaultDateRangeLimiter that exposes this behaviour?. Can you elaborate a bit more?\nAlso: why would you disable all the days? If the user cannot select any days, wouldn't it be better to disable the button that shows the picker, rather than confuse the user with a dialog that is essentially useless?. https://github.com/wdullaer/MaterialDateTimePicker#material-datetime-picker---select-a-timedate-in-style\n3rd line. The information you have supplied in the ticket is not sufficient to properly investigate this issue.\nDepending on your issue can you supply either of:\n A code sample\n A stacktrace of the issue\n* A screenshot highlighting the issue. I'm afraid I don't have a lot of good news for you.\nEmbed calendar into activity or fragment layout\nNo plans at the moment. You can use the code in this library as a starting point though.\nIf you find an easy refactor to make reusing the calendar view easier, do let me know or make a PR.\nI have a feeling this could make this library easier to support.\nShow event markers\nThere is a feature to highlight certain dates. Currently this renders them in bold, but I intend to change that to a circle line around the date.\nI have no plans to turn this into full blown event marker support at the moment.\nIt should be easy enough to extend this, should you decide to fork / base your calendar component off this library\nDate range\nNo support planned. There is a DateRangePicker library (https://github.com/borax12/MaterialDateRangePicker), which forked this one and uses a tabbed layout to allow users to select a start and end date.. When creating this library I had read that Android could optimize enums now. However I cannot find this reference anymore, and the memory section of the official developer guide still recommends against enums, so there you go :-)\nI'll merge this shortly.. And so I found it again.\nHere is Jake Wharton (who essentially wrote the book on Android development) take on it:\nhttps://twitter.com/jakewharton/status/551876948469620737\nHere is a stackoverflow answer from Eliott Hughes, an Android VM developer (at the time), that turning enums into ints gives no measurable difference in performance. The recommendation was therefore removed from the performance tips page (but apparently not from the memory tips page):\nhttps://stackoverflow.com/questions/5143256/why-was-avoid-enums-where-you-only-need-ints-removed-from-androids-performanc\nAnd here's a stackoverflow answer that shows that ProGuard by default does this optimisation for you anyway:\nhttps://stackoverflow.com/questions/32236870/does-proguard-converts-all-enums-to-int-or-needs-to-be-configured-for-this\nSo I can have my nicely readable, typesafe code and you can have any (potential) performance penalty optimised away when you build the production app.\nA cake you can have and eat :D. The current published version of the library depends on an older version of the support library.\nJava cannot use 2 different versions of the same package namespace, so this could generate an error.\nTry adding this clause from the README in your build.gradle\nhttps://github.com/wdullaer/MaterialDateTimePicker#how-do-i-use-a-different-version-of-the-support-library-in-my-app\nThat way, the version of the support library from materialdatetimepicker won't be used.\nAlternatively, you can wait until I publish a version that depends on a newer version of the support library.\n. v3.2.3 uses support library v26.0.1, which should fix your build. That exclude statement should work. Exactly which error are you getting? . Are you sure there are no other dependencies with subdependencies on the support library (such as firebase)?\nAre you explicitly declaring MaterialDateTimePickers support library dependencies in your app? (all of them need to be there). You are not supposed to reuse the DatePickerDialog instances. (but from this code it doesn't look like you do).\nI do see a typo in your code here: you are setting calendar as the maxDate, rather than maxCalendar. You should not return null from getStartDate() and getEndDate().\nThe implementations in DefaultDateRangeLimiter are even annotated @NonNull\nI should move those annotations to the interface. I understand what you're saying, but this is already an 'expert' feature.\nI might do it if I have some time, but it's not a massive priority right now.. I've added annotations to the interface in v26.0.1, making it more clear that getStartDate() and getEndDate() cannot return null. Make sure getStartdate() / getEndDate() and getMinYear() / getMaxYear() return consistent results.\nYou are returning 0 for getMinYear(), but that should probably be 1990 (which is the value you have hardcoded in getStartDate()\nI could probably improve the API there (derive minYear from startDate). The current one has some legacy warts.. https://github.com/wdullaer/MaterialDateTimePicker#why-not-use-supportdialogfragment. This will not be easy to achieve with the current code.\nVarious widths are hardcoded right now. You can try to override them in your application.\nWhat you want should be easy enough to achieve if you fork the library.. There is a setTimeZone() method. This will also set the TimeZone of the internal Calendar that keeps track of the state.\nHowever, the initial date is passed in through the newInstance method, so it might be off unless you do some compensation for it.\nWould it solve your issue if I made an extra newInstance method which takes a Calendar?\nThis would then initialize the first selection and the timezone based on that Calendar instance.. This hasn't been solved yet, but I have been thinking about it.\nI am wondering how much of an issue this is. The callback returns integers and not Calendar objects. So in theory the picker could be blissfully unaware of the mess that is timezones, and you can apply the correct timezone when you construct a Calendar from the result of the callback.\nSimilarly when initializing, if you get the initial date as a Calendar, you can set the timezone to the correct location before extracting the values.\nIt then won't really matter what timezone the picker itself is operating in.\nDoes this look reasonable to you? What did I miss?. I'm thinking of just completely removing the setTimeZone method.\nI need to review the code, but if I can make the picker completely unaware of the timezone's that would be ideal.\nYou can then do the proper conversions in the initialization and callback code.\nI just need to think about how I handle the range limiting options as those take Calendar objects, which might have a Timezone different than the default one.. duplicate of #233 . As of v26.x.x, the support library is no longer supplied as a download in android studio, but made available through a google hosted maven repository.\nhttps://developer.android.com/topic/libraries/support-library/setup.html#add-library\nYou'll need to add the following to your application's build.gradle file\ngroovy\nallprojects {\n    repositories {\n        jcenter()\n        maven {\n            url \"https://maven.google.com\"\n        }\n    }\n}. Good, it is now loading the support library from the google maven repository.\nIf you read the error message, you'll see that it says that you are trying to load two different versions of the support library (and therefore, it doesn't know which one to pick).\nIf you look in the FAQ of this library, you'll see how to fix that:\nhttps://github.com/wdullaer/MaterialDateTimePicker#how-do-i-use-a-different-version-of-the-support-library-in-my-app. This library also depends on support.design which you have not declared in your top level dependencies.\nPlease take a closer look at how gradle version management works\nhttps://docs.gradle.org/current/userguide/dependency_management.html#sub:version_conflicts. When you select a different year, it should round the selection to the nearest acceptable one. (31st of march most likely in this case)\nIf it doesn't do that, it's a bug.. The year cannot be hidden. Not out of the box.\nYou can pass in your own implementation of DateRangeLimiter easily though.\nDo please take a look at the annotation on the interface definitions. You are also on the hook to make sure the different methods there are internally consistent.. Like I said, this is not supported out of the box.\nThe way to go is to override the default implementation of DateRangeLimiter by supplying a class that implements the interface\nhttps://github.com/wdullaer/MaterialDateTimePicker/blob/master/library/src/main/java/com/wdullaer/materialdatetimepicker/date/DateRangeLimiter.java\nThe names of the methods should be self explanatory (but I'll write some additional comments nonetheless)\nYou then set your implementation to the DatePicker. Pseudocode:\n```java\nCalendar now = Calendar.getInstance();\nDatePickerDialog dpd = DatePickerDialog.newInstance(\n    new DatePickerDialog.OnSelectedListener() {},\n    now.get(Calendar.YEAR),\n    now.get(Calendar.MONTH),\n    now.get(Calendar.DAY_OF_MONTH)\n);\ndpd.setDateRangeLimiter(new DateRangeLimiter() {\n     int getMinYear() {\n         // Your implementation here\n     };\nint getMaxYear(){\n    // Your implementation here\n};\n\n@NonNull Calendar getStartDate() {/*Your implementation here*/};\n\n@NonNull Calendar getEndDate() {/*Your implementation here*/};\n\nboolean isOutOfRange(int year, int month, int day) {\n    // Check if it's a Wednesday here and return false if so (you might want to keep a instance level calendar and recycle that for performance)\n};\n\n@NonNull Calendar setToNearestDate(@NonNull Calendar day) {\n    // Decide what happens if a user does select a Wednesday (eg changing the year). You could for example round down and return the nearest Tuesday\n};\n\n});\n``\nYou can look at theDefaultDateRangeLimiter` class for inspiration.\nIt's a semi advanced feature, so I expect people to know enough java to implement an interface.. I can't reproduce this on the emulator.\nWhat language is the device on which this happened using?. You can't encounter this message on a device running android N and then claim that it only occurs on M and below.\nCan you reproduce the error with just the sample app?. I will look at this shortly. I've got this fixed locally.\nWill try to make a release somewhere this week. If you want to use a different version of the support library, you need to tell gradle not to download the one referred by this library\nhttps://github.com/wdullaer/MaterialDateTimePicker#how-do-i-use-a-different-version-of-the-support-library-in-my-app. This library loads roboto-medium for the buttons, but this is handled transparently. It doesn't override anything.\nI do not understand your second post.. Are you using gradle?. Do you have some special rules set?\nThe libraries build.gradle loads values from a gradle.properties file. That's where the ANDROID_BUILD_SDK_VERSION property lives. It seems like this variable is not initialized when you try to build.\nMy guess (and I'm absolutely no gradle expert) is that you're excluding this gradle.properties file somehow.. I'm sorry, I'm not going to debug your project. I just don't have the time.\nThe cheapo solution (most likely) is to just define the variable in your gradle.properties.\nI'm no gradle expert. I dread upgrading it, because each time any component anywhere changes my build blows up.\nI suggest reading up on how gradle handles inheriting properties from dependencies to get to the bottom of this.. The callback returns the individual pieces of the date and time, not a Calendar, so you can easily handle this in your application no?. I don't see how you expect this picker to do that.\nI mean, the datepicker just selects a date, it by design does not give you any time information.\nIf you need these to be UTC, then you make these UTC. It's your UI that should make this clear.. Thanks for the PR!\nI can see how the getter to retrieve the callback is useful.\nThe other ones I'm not sure I want to support. It seems very niche and has a lot of potential to just break the dialogs (you should see the support issues I get even now).\nYou will need to convince me that this is general enough to include in the library. How do you intend to use this yourself?. I'm not going to add that in then. I can see them being a huge support burden.\nIf I'd add something like this I'd rather use an event system, which would notify a client of something but does not allow modifying the basic functionality.\nI will implement the getter. . This is not supported at the moment. I'll see if this can be added to the version 2 layout at some point. As it says in the exception: your minimum year is above your maximum year, so there is no valid selection possible.. The callback always returns time in 24 hour format, you are responsible for figuring out whether it's AM or PM. I don't understand this. Please provide a decent description of your issue or request . Does version 1 work on the old device?\nI get these issues every now and then, but I can never reproduce them on the emulator. . This is exactly the same stacktrace that the other issue had.\nAs I said I haven't been able to reproduce this on the emulator. I'll try again, but if it still fails are you up for helping me debug this?\nI'll let you what exactly I'd like you to test later this week. . I think I have the stacktrace on the v2 layout traced down.\nThe one on the TextView I'm the v1 layout still eludes me. . I haven't had any time over the weekend to look at this. It's still the first thing on the list . I've pushed the potential fix for the v2 layout into the branch issue-416-inflate-error\nI really can't spot anything wrong with the v1 error (at least not at the place indicated by the stacktrace)\nI tried on a few different emulator images to reproduce this, but I've had no luck.\nCan you check out this branch and try the sample app on the device that has the issue.\nSecondly, could you attach the debugger to the sample app for this device and try to figure out what the actual error is (the inflate exception generally masks an underlying other exception)? You could do this by enabling \"break on exception\" in android studio. If I know what the underlying exception is, I'll have a shot at properly debugging this.. Thanks for the heads up.\nI'll be closing this because it was easier to add the required changes locally rather than merging the PR.\nI've got one additional feature I'd like to finish, but if that doesn't progress fast enough I'll try to make a new release this week.. Not at the moment.\nThere's an open PR for it, but it's trickier than I would like.. You should first start with using the latest version.\nIt would also useful if you could post a complete stacktrace.. Either you upgrade the support library to the latest version as well, or you exclude the support library transitive dependency from this library as explained in the FAQ.\n. Are you using gradle / android studio to build your app?\nThis is necessary for the assets of a library to be packaged into your app (otherwise you'll have to include the font in your application assets rather than relying on the version shipped with this library)\nhttps://stackoverflow.com/questions/5583608/difference-between-res-and-assets-directories. Were you getting the same stack trace?\nAre you using gradle to build?\nWhich library version were you using? \nCan you supply a bit more information in general? . This is indeed weird.\nThe library does not use support fragments, but it does use the support library for some other features.\nMy current guess is that you are using a different version of the support library in your app. You could try to exclude compiling the transitive support library dependency (this is explained in the Readme)\nDo any of these fragments create pickers? . If you ever find out, please let me know. I'm happy things started working for you \ud83d\ude0e. That's an internal callback. I should reduce e its visibility.\nIt assumes the picker is visible which in your case it isn't, hence the npe.\nYou shouldn't be using this method. . As parameters of the newInstance method. Look at the example in the Readme. . The picker callbacks return time in 24 hour format. It's your responsibility to render this appropriately in your application.. Please try to reproduce this on the latest version. This is not related to this library. You're better off trying stackexchange for these type of questions.. Sounds like a problem with your imports or maven dependency resolution.\nHave you tried a clean build?\nIf that does not resolve it, can you post a full stacktrace?. You need to add the google maven repository to your build.gradle so that it can fetch the support library.\nhttps://developer.android.com/topic/libraries/support-library/setup.html#add-library. I can't really help you any further without additional information.\nThe error messages you've posted literally tell you what's wrong and how to fix it. . I'll try to review this over the weekend, but on first inspection this looks good.. This looks good.\nWould you be able to give the TimePickerDialog a similar treatment?. I'll try to make a new release somewhere this week with these changes. My apologies for the delay, but I have finally gotten around to releasing this.. This is highly unlikely.\nThe callbacks return plain integers of the components that were selected. The Timepicker is internally not even aware of time as such.\nI did merge some features which allow you set a Timezone on the Datepicker, but I'm starting to believe that was a mistake.\nI'd like to keep these Dialogs as dumb as possible. If special timezone requirements are needed, you can use these classes outside of the pickers. As I mentioned, the callbacks just give you integers, which you can then use to construct the proper objects (taking into account your apps context).\nThe problem is just too hard, so as a proper engineer I'm going to try to design it such that I don't need to solve it ;-)\nI hope my reasoning makes sense. I'll mark this as a potential enhancement.\nIf you can't really wait for me to try and get this implemented, I know there are people who forked this and added support for locale's I'm not familiar with, such as Farsi https://github.com/mohamad-amin/PersianMaterialDateTimePicker. It's possible, but a lot of work.\nI have to create completely new layouts for that device class (I'm assuming you have something like a pixel, which has a very high dpi). This renders just fine on both API 26 and 27 in the emulator.\nIt looks like the device you tested this on has a heavily modified system theme, I can't really take all those possibilities into account.. I released those changes over the weekend\nOp di 19 dec. 2017 09:53 schreef Taras Melko notifications@github.com:\n\n@wdullaer https://github.com/wdullaer already fixed within last commits\n(dat for background I think so).\nJust need to deploy.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/wdullaer/MaterialDateTimePicker/issues/436#issuecomment-352678813,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AGA1xZzCMQ_KDumG9DtfjBauf-5AI2NJks5tB3lrgaJpZM4RA3Kl\n.\n. This has been answered a lot times in the past.\nThe design of the picker does not make sense for this usecase, so it won't be added.\nI'll add a section to the FAQ. Use setYearRange(minYear, maxYear). Thanks for the contribution!\nI was literally fixing that when the github reminder mail came in :D\n\nI also added some tests for this case, so I'll be closing this rather than merging, it's just less hassle that way.\n. Can you give me a bit more information on what doesn't work with the title?\nYou also want to check out the latest version, it contains some localisation fixes specifically for arabic.. I think this is due to the font that you are forcing on it.\nThe character spacing and baseline seem off to me.\nIf you're overwriting the fonts or otherwise messing with internal constants for spacing, you're on your own, there's no way I can make that generic enough that it works in all circumstances.. Good catch.\nI am already doing this in most other places, but seem to have forgotten in the most important one . You can still use the regular FragmentManager to render this Dialog\nhttps://github.com/wdullaer/MaterialDateTimePicker#why-not-use-supportdialogfragment. Taking over the world, 1 PR at the time.\nThanks for the contribution!. This behavior is detailed in the FAQ:\nhttps://github.com/wdullaer/MaterialDateTimePicker#why-are-my-callbacks-lost-when-the-device-changes-orientation. Are you using the latest version?\n. Judging by the background theme, it also looks like you've been overriding some padding / margins in system themes.\nI am only testing this against the default themes. If you change system themes or force the picker to use a specific theme, there's not much I can do if it looks weird.. There is no picker which shows Date and Time simultaneously. When it's officially deprecated, I'll do a semver major and change this.. I have already done most of the changes.\nI am waiting for a few things at this point:\n Google to release actual API 28 SDKs, so I can use a linter to find any potential other depreciations (I have to read through the API diff right now)\n I want to still add the arrows in the datepicker for the 3.x.x series\n* I might potentially remove the version 1 layout for v4, I haven't decided yet. (It would grealy simplify the codebase)\nEssentially I want to make the most of the semver major update. I am aware and tracking that.\nIt is not something that should cause issues. It does not modify the api in any way, so it can be done at any point in time.\nHopefully I can do this together with a v4 release, but if that doesn't work out, it'll happen later, but will be transparent for most / all users of the library . Fixed in v4.0.0. You can't, the purpose of the library is to provide this specific calendar based DatePicker. You will have to look somewhere else.. The artifact is properly available on maven central.\nhttps://search.maven.org/#search%7Cga%7C1%7Cmaterialdatetimepicker\nThere's not much more I can do here.. You are effectively disabling all dates. When you perform all 3 steps there are no acceptable selections the user can make. The behaviour of the picker is undefined in this case.\nWhat do you expect to happen in this case?\nIf the purpose is not that the user selects a date, you should probably be using a calendar widget rather than these pickers.. Which parts aren't properly translated into Spanish?\nI'm open to PRs. Like  I said, I'll except decent PRs :-). Thanks for the headsup.\nUnfortunately the min API level is 14, and even the support library version of this has min level 16.\nThis makes it a breaking change.\nI'll keep this on the list and evaluate it when I do the next semver major release. If google doesn't mark it as compatible with API 14, it is essentially undocumented behaviour that can change at any point in time.\nI prefer to be conservative for this library, which is more popular than I ever anticipated.\nGiven that there are strong indications that google will deprecate framework fragments in android P, a semver major upgrade to this library isn't that far out anyway.. This is not a bug with this library. I just don't have the time to debug everybody's code just because they happened to use this library.\nI suggest attaching a debugger and looking at the state of your class when onDateSet gets triggered.. Don't worry about the CI. 50% of the time it fails because travis doesn't properly save the android sdk license agreement. There's no consistency to it.\nI'm trying to figure out a workaround.. README looks good (as far as my tourist Spanish goes)\nI'll link to this one from the mail README. No, you shouldn't translate the license.\nThe wording in these is very specific and vetted by lawyers. The apache license is a very commonly used license, I think it's safe to assume that people can figure out how to comply with it.. There is no combined picker, so this is not supported out of the box . Confirmed, I'll get on it asap . From the screenshot, it seems like you are using this library: https://github.com/borax12/MaterialDateRangePicker. No worries, you're not the first, and I doubt you'll be the last :-)\n. What device are you testing this on? Can you show a screen shot? \nThis is working just fine for me here.. Ok cheers, I reproduced it.. If all goes well, I'll be able to release a version with a fix for this over the weekend. . The API has not changed, the README is still correct. Can you show a screenshot, and give more background on how you are using the picker?. The goal of this library is provide a date picker on par with the framework supplied one.\nAllowing a user to select multiple dates is not on the list of features I wish to support right now.. First things first: thanks for the contribution. I really appreciate people taking the time to make a PR :-)\nMaking OnDateChangedListener protected was a deliberate choice. (see 10281117e9e9cfbd56d01ffae3eb5f231fafc37d)\nI was getting a lot of issues from people who were trying to use this as the callback for the picker.\nThe fact that DatePickerController is public is also an accident of history. It really is just an implementation detail. I will probably make this protected in the next semver major release as well.\nIt should still be possible to change the internals by subclassing or forking the library.\nTake a look through the closed issues to get a feel for why I want to minimize the amount of rope I give people.. Good idea, I should probably make those views protected at some point.\nI think what you want to do should be possible by subclassing the pickers rather than maintaining a full blown fork. It should make keeping in sync with upstream easier.\nAnyway I'm happy my work is useful for you \ud83d\ude00. https://github.com/wdullaer/MaterialDateTimePicker#additional-options\nsetMinTime() and setMaxTime() are what you are looking for.. The borax daterangepicker is a fork of this library. There's little I can do with the incompatibilities that causes.\nAre you sure you're using the latest version of both libraries?. There isn't much I can do here\nOther than using the latest versions, doing a clean build, I don't really have any other advice. I created this PR https://github.com/borax12/MaterialDateRangePicker/pull/99 on MaterialDateRangePicker which resolves the incompatibility.\nIf the owner does not merge it, I will probably publish a wdullaer:MaterialDateRangePicker that can be used instead.. This is being tracked in #451. This is already mentioned in the FAQ\nhttps://github.com/wdullaer/MaterialDateTimePicker#how-do-i-use-a-different-version-of-the-support-library-in-my-app. Thanks for the PR.\nI tried defining the version number in a variable, but when I do this intellij no longer highlights them if they are out of date (which is how I mostly discover this). I therefore prefer to keep it as is.\n(support lib version will be bumped in 3.6.0). The first argument of newInstance is a reference to an object that implements OnDateSetListener\nI suggest you take a look at how the sample app works.. There is no API specific logic in the DateLimiter.\nHowever looking at your code, it seems that you are parsing the dates from Strings using SimpleDateFormat. There were quite some changes in that class in Lollipop.\nUse a debugger to check the actual content of the input to setSelectableDays, I'm pretty sure the parser is not returning the results you expect.. I'm glad you figured it out \u263a\ufe0f. I'm not sure I understand your question.\nBy default the resolution is a single minute of the selection.. setTimeInterval\nhttps://github.com/wdullaer/MaterialDateTimePicker#additional-options. Please read the documentation: There is a method literally called setHighlightedDays()\nhttps://github.com/wdullaer/MaterialDateTimePicker#additional-options\nYou can't select multiple days, so clearing and unselecting do not make any sense.\nAnd I do not intend to offer more customization options for the highlighted days. If you have advanced features it should be easy enough to customize the SimpleMonthView class yourself with the behaviour you want.. If you hide the OK button there is no way for the callback to get triggered and the user selection to passed on to your application.\nIf you use the pickers as Fragments, the dialog buttons will not be shown, but this well require subclassing to ensure that the selection is accessible to your application logic.. The library will use whatever fonts are set as default.\nOn older API versions it will load roboto medium for buttons. The font which is loaded is configured through a resource which you could overwrite in your app.\nI do not intend to make any changes to this.. This is not possible with this library.\nYou might want to take a look at: https://github.com/borax12/MaterialDateRangePicker. Are you sure you're using the latest version.\nI fixed #461 in the latest release. There are a few issues in 3.5.2 as well.\nI should have 3.6.0 out by the end of the month with fixes and some other goodies.\nI'm happy you find this useful :-). Thanks for the contribution!\nBecause this is a breaking change to a certain extend, I've added this to the v4 branch.\nThat one will be released when the android P APIs are final.. Thanks \ud83d\ude0a. Thanks :-). Can you explain why you want this functionality?\nThe contract of the picker is that it notifies you when the user has selected a full date.\nThere are some internal callbacks which fire when UI elements change, but I hope to make these protected in the future as I don't intend to support that level of granularity. This is not a generic calendar widget.. This functionality has been coded with the assumption that these dates are stable once you call show.\nI would have to reread the code (and have a look at when a recyclerview renders / refreshes what) to see if it would actually lead to weird stuff, but I'm afraid that trying to replace these arrays at the time this callback fires can lead to strange race conditions.\nI think a better approach would be to implement your own DateRangeLimiter(https://github.com/wdullaer/MaterialDateTimePicker/blob/master/library/src/main/java/com/wdullaer/materialdatetimepicker/date/DateRangeLimiter.java). The isOutOfRange method will be called when the picker is trying to render a particular date.\nYou could lazily load your disabled dates in your implementation of this interface and be sure that everything works as expected.\nUsing a custom DateRangeLimiter will disable the built-in one, but the code is available.. I'm happy you got it to work :-)\nI do prefer a solution which doesn't increase the API surface of the library though.\nI'm quite convinced you can obtain the same result by implementing your own DateRangeLimiter.\ni'm going to close the PR, not because I don't like the contribution (I really do), but because I'm very cautious about increasing the things I have to support.. You are making this way too hard on yourself.\nThe initial selection is passed in as an argument to the newInstance() method.\nSo you when the user clicks the edit button, you parse the time and create a new instance.\nIf you wish to reuse the picker instance you can call the initialize method on it.\nTake a look at the included sample app: https://github.com/wdullaer/MaterialDateTimePicker/blob/master/sample/src/main/java/com/wdullaer/datetimepickerexample/TimePickerFragment.java. I'm sorry, but this does not look related to this library at all.. Glad you figured it out . The stacktrace as such doesn't help much.\nCan you paste the code where you are configuring the picker?. I don't need more information on the device.\nThere is nothing particularly wrong with the code pointed at by the stacktrace, and there's even a reasonable test suite backing up that claim.\nAs I mentioned earlier: I'll need to see the code where you are configuring the picker and preferably also some information on how you are constructing the inputs for setSelectableTimes and setDisabledTimes to be able to help you debug this.. This should not be possible: all these calls have NonNull annotations and setTimeInterval cannot produce null objects. So the compiler should enforce that neither part of the comparison can be null.\nHow many reports do you have like this?. Please reopen this, or create a new issue if the problem reappears. . Duplicate of #451 . https://github.com/wdullaer/MaterialDateTimePicker#additional-options\nLook at setDisabledDays and setDateRangeLimiter\n. I don't see anything wrong with that snippet.\nMaybe try to ensure the Calendar used in the initialization is in the correct timezone?. As mentioned in the FAQ, this is not in scope of this library:\nhttps://github.com/wdullaer/MaterialDateTimePicker#how-do-i-turn-this-into-a-year-and-month-picker. I have to draw the line somewhere.\nYou can just use a regular dropdown for the year and the library is open source, so feel free to steal the pieces you need / want :-). Are you running the latest version?. Confirmed.\nI fixed this a few releases ago, but I must have made a mistake rebasing some v4 changes into the master branch.\nWill fix shortly. I'll take a look at this, hopefully the race condition can be removed.\nWould you be open to incorporating the unit tests in this repository?\nI haven't been able to find the time to add UI based tests myself.. I think I managed to resolve this issue.\nI would still be very interested in adding some of your test suite to this library to help me confirm that it's fixed and prevent future regressions :-). The first one can be changed with a method call (which I seem to have not detailed in the README yet). See the sample app for some code examples.\nThe second one is a bug I've solved this morning.\nI'll try to publish a release this evening.. I can't immediately reproduce this. setAccentColor should do the job.\nKeep in mind that you need to give it an actual color, not a resource.\ndpd.setAccentColor(Color.parseColor(\"#9C27B0\"));\nor if you have the color in a resource\ndpd.setAccentColor(ContextCompat.getColor(getActivity, R.color.my_accent_color));. I'm using the built in formatter, which should return a string that makes sense in all supported locales.\n(For example in Dutch it returns a string of length 4 rather than 3 when using MMM)\nI'm reluctant to add this option, because it's an option I can't test myself. I will have no idea that a layout change I will do will actually make sense or end up in weird truncation errors in different locales / for different string patterns.\nPeople have forked this library to support different locales which had requirements that were hard to elegantly support with the current codebase (either because they were technically hard, or because I lack the cultural knowledge to properly assess them).\nI am more than happy to point to any such forks from the README.. I seemed to have missed this when tweaking the padding.. The goal is to emulate the material design pickers.\nThat said, you can probably get this look by overriding some default android resources so that dialogs use rounded corners in general.. Try using setTimeInterval(1, 30, 60)\nInternally it always uses seconds. I should probably change the default values of seconds and minutes to 60 rather than 1.. \ud83d\udc4d . Nice PR, thanks for taking the time to contribute.\nDid you try this with the version 2 layout as well?. You cannot add this picker to your project through XML.\nIt is supposed to be instantiated in your code (it is a modal Dialog popup, not a plain View).\nPlease take a look at the README.\nIf you really want to reuse the Views individually, you are in not supported territory.. This is out of scope for this library.\nI would require too much changes to the interface of the DatePicker\nI've added a section to the README to clarify this.. Thanks for taking the time to contribute!\nI don't have a lot of time at the moment to go through this in detail.\nCould you maybe provide a screenshot of the result.\nIf I am going to merge this, your version will need to support all the options the regular pickers support. It will lead to a lot of issues from confused people otherwise.. As stated in the Readme and clearly visible in the sample app: the default selection is passed in as an argument to the newInstance method . Nice catch, I'll add some guard rails on onClick . I can reproduce this, but don't understand it yet.. This is now properly fixed in 4.0.1\nSorry for the inconvenience.. The assumption that the pickers will be shown as Dialogs is pretty baked in.\nThe current design is not far off from this, but it would still require a bit of refactoring to support both this type of full screen and a Dialog.\nI won't be spending any time trying to support this in the near future, but I will consider a PR that elegantly adds this.. I don't really understand the question / problem.\nCan you explain a bit more, or provide an image / video of your issue?. I'm not sure if this is something I want to fix.\nI quite like the fact that you can scroll quickly through a lot of months if you want to.. Does this happen with the included sample app as well?\nHave you overwritten any specific values?. Glad it all worked out :-). https://github.com/wdullaer/MaterialDateTimePicker#why-not-use-supportdialogfragment\nhttps://github.com/wdullaer/MaterialDateTimePicker/issues/451. You can always just ignore the year in the callback.\nThe design shows weekdays, which means it needs a year to properly resolve those.\nThe amount of days also depends on the year (Feb 29th).\nIt is also possible to limit the year range to a single year.\nIf that doesn't work for you, the design of this picker is probably not right for your usecase.. Are you using the latest version?\nCan you show how you're initializing and configuring the picker?. I'm guessing the following is happening:\n The parsing of your date is failing, setting the Calendar to EPOCH 0 (which is Jan 1st in 1970)\n The start time and end time of that structure are the same, making it the only viable selection in the Timepicker.\nI suggest you inspect the content of the arrays with a debugger to see that the values in there are what you expect.\nAlternatively, try to isolate the problem by passing some known good Calendars and Timepoints into the pickers.. I'm happy you sorted it out.\nI'm sorry for the late reply. This is a spare time project, and spare time is eternally scarce unfortunately.. I regularly tweak the layout for various reasons. Often this is to bring it closer in line with the official picker, or to better support a new feature.\nYou can override dimensions in your app by setting a different value for the relevant mdtp_ prefixed resource.\nThis is not \"supported\" however. I won't consider any layouting or usability issues resulting from this as bugs.. Are you just worried about the log statement, or is there actual broken functionality?. That error is related to the option to type the current time rather than selecting it by tapping the screen.\nIn the locale of the device you are testing on there seems to be no difference between the text representing AM and PM.\nThe visual picker will work as expected. The typing functionality will also work fine in most western locales (which are the ones I know and can test for).\nI'm guessing the locale you are testing your app in does not have a notion of AM and PM, making it rather hard to implement.\nThat said, the part you are most likely interested in: the picker you tap on the screen will work as you expect it to. If it is not, you're going to have to be much more specific about what is broken.. I think this issue is similar to #499 \nI thought I had released the fix for this one already, but that appears not to be the case.\nI'll try to get that sorted soon\n. This looks like a strange one.\nI'm going to assume you're running the latest version.\nIf you're running api-version >= 21, the background of the buttons is set with ?android:colorButtonNormal (or at least that's the only place it's using a platform resource)\nSo either you are overwriting this attribute somewhere in your app, or there is a framework customization in place.\nAre you having this issue in the emulator as well?. So it was related to a library overwriting some values. Thanks for looking into this some more!\nIssue #524 is similar but worse: it leads to an exception when changing the theme.\nI will try to phase out the usage of these framework attributes to avoid these kind of issues.\nI will track that progress in #524 and close this one.. So this really is not my problem.\nIf you take a look here https://github.com/material-components/material-components-android/blob/master/docs/getting-started.md#material-components-themes, you can see that the material-components library is using a custom layout inflater which replaces Button with instances MaterialButton. From the perspective of my library that is the client application rewriting the code on the fly, I can't possibly be expected to support any random code transformation.\nThis is also why that library provides the bridge themes which are much less invasive (and why their docs mention mention at least ten times that you should double check everything after changing the theme because weird stuff might occur).\nAs an additional workaround you can also add the following line to your own application theme\nxml\n<item name=\"viewInflaterClass\">androidx.appcompat.app.AppCompatViewInflater</item>\nThis will disable the custom LayoutInflater (it's only used to replace buttons according to the docs). You should probably replace all instances of Button in your app with MaterialButton (in my book it's always better to be explicit about the things you want rather than rely on some magic pixie dust behind the scenes)\nOther than depending on this library, there are no other fixes for this that I can see.\nI specifically vendored the material button at the time to avoid having a garbled design each time the dependency changes.. Thanks for investigating this a bit more.\nThere was another issue recently which caused confusion for a user because I was using theme attributes.\nI should try to phase these out.. This is fixed in the latest version, you should use that one.\nYour solution is only valid on API 21+, the attribute ?android:attr/selectableItemBackgroundBorderless does not exist on older versions.. Duplicate of #451 . That's the way the design is for now.\nFeel free to fork it, so you can tailor it completely to your specific needs.. I'll add an mdtp_ scoped bool attribute which will set the textAllCaps.\nYou can overwrite this in your app or add it to a theme.. Duplicate of #451 . As you have figured out, setMinDate() is the correct way to do this.\nIf you use any decent IDE, it'll show you this method with some docs as well. I will upgrade the support library versions shortly.\nPlease also take a look at this FAQ entry: https://github.com/wdullaer/MaterialDateTimePicker#how-do-i-use-a-different-version-of-the-support-library-in-my-app. It is part of the newInstance() method\nhttps://github.com/wdullaer/MaterialDateTimePicker/blob/cbcdf543d16dc800610a44dc1825de836b69a593/library/src/main/java/com/wdullaer/materialdatetimepicker/time/TimePickerDialog.java#L188. I only support com.wdullaer:materialdatetimepicker any other issues should be logged at their respective repositories.\nhttps://github.com/wdullaer/MaterialDateTimePicker#setup\n. It looks like you are not using the latest version of this library, please upgrade it first.\nI also recommend trying to do a clean build after upgrading.. All id's have been changed to have an mdtp_ prefix a few releases ago. These strings don't appear anywhere in the code.. Duplicate of #451 \nI would also like to point out that you can still use any native fragment APIs in android P. They have been deprecated, not been removed.. Use the latest version.\nOlder versions use the framework fragmentManager. You can set an initial selection through the newInstance() method, but there is no method to update the selection after you're showing the Dialog.\nI haven't added this, because I don't really see a usecase for it: if you update the selection after the Dialog is shown, you risk overwriting a user's selection, which is rather bad UX in my book.\nI would need to have some more information on your usecase to see whether that's the case here.. I assume that means you have a fork of the library, so you can do what you want ;-)\nThat's a good solution, it'll do what you want.\nI don't consider that callback to be part of the \"public API\", but it's also highly unlikely to change. It will be easy enough to keep tracking this repository should you want to.\nAdding an additional button is something I don't intend on supporting anyway. There are way too many things people would like to do with that. And once I add in a third customizable button, someone is going to turn up wanting a fourth etc.. I'm happy it was useful to you. Good luck!. Looking at that error, the build system is complaining that it can't find API 28 platform resources.\nI am guessing your app is not using API level 28 as its target API?. I don't think there's any harm targeting API 28.\nIn fact I think google requires this now for new apps or updates to existing ones.\nIn any case, I'm happy this resolved the issue.. Please create a new issue, rather than commenting on old closed ones.\nBased on that comment, there's not much I can do.. Are you using the latest version and is your target API level 28?. That is an unsupported version from a few years ago. That is probably not what you should do to fix this.\nThe latest version of the library uses a new way of loading fonts, which requires build tool support.\nYou should update android studio to the latest version, or at least use version 3 of the android gradle plugin.\nFor more information, take a look at this stackoverflow post: https://stackoverflow.com/questions/44560908/font-in-xml-with-android-o#44801233. It can't find API 28 resources.\nVersion 4+ requires you to target API level 28 or higher (as does the google play store if you want to upload an app or update). I'm going to assume that @TylerMcCraw comment solved the issue and close this :-). There are arabic translations. So if the local is set to arabic, text should render in arabic script.\nI don't speak or read arabic, so I can't guarantee that all design choices make perfect sense.\nIf something is off, please report.. Are you using the latest version?. I don't do a lot of testing with the accessibility features.\nWhile it looks similar to #512 it's probably not the same issue.\nI'll take a closer look at this.. Fixed in v4.1.0. This looks good!\nI think we can simplify performAccessibilityAction while we are at it, I've left a comment on the code.. You can keep working on it if you want to. I'll be around to answer any questions you might have and give feedback.\nIf you don't really have time to take this forward, I'll finish it myself, but I won't have time for that until later this week most likely.. This looks really good!\nThe accessibility features is an area that I haven't given the attention it deserves, so your contribution is greatly appreciated.\nLet me know when you are finished, and I will merge and release this.. I think this is more robust than the previous code.\nIt's relying mostly on the built-in accessibility features of RecyclerView now.\nI'll test it a bit just to be sure and release tomorrow.\nThe lack of automated UI level tests hurts when making changes like this, but I haven't found the energy to write any yet.. As of version 4, the library uses Androidx rather than the old support libraries.\nIf you cannot upgrade yet, you should stick with the last 3.x.x release.. Thanks, I have an open call for help in #542, because I don't speak all the languages ;-). I haven't tested the accessibility features on the TimePicker in a while, so it's very possible they're broken right now.\nI'll take a closer look. So I have been messing around with this and it kind of works.\nIt announces the elements properly. It is kind of hard to use, in that you need to perform a two finger scroll on the circle and it will announce a lot of entries (maybe adding a small delay there would be better), but it never gets stuck for me.\nCan you make a small video of the issue you are encountering? This might help me reproduce it.. This looks like a bug.\nI'll look into it.. The fix @ricardorover applied will work, but it is sort of a symptom patch, rather than a root cause fix.\nI've already spent a few hours hunting for the actual problem and made some progress, but it's not done yet.\nI should have some time in the next week to look at this more.. I have pushed some code that should resolve this. (I can no longer reproduce it locally)\nThe core of the issue was that I was trying to measure a View because it was fully drawn. Reshuffling some code ensures that it should be visible now before the code trying to measure it gets called.\nIt would be great if one or two of the people affected can try the current master branch and confirm that the issue is indeed resolved, before I publish this as a new release.. That's a git mistake from a feature branch I tried a while ago.\nI'll remove that.\nThanks for reporting your feedback!\nI'll release this shortly. The latest version is 4.1.0, not 4.0.1, can you try with that one.\nThis sounds like you have something configuration issue in your build tbh. There's not enough information in this issue to help you. . Judging by this https://stackoverflow.com/questions/25145539/android-studio-compile-error-content-is-not-allowed-in-prolog, it is complaining about the res/font folder.\nThis is a feature that has been added in API level 26.\nI am guessing you are using a build toolchain that doesn't support this yet. Upgrading to the latest build toolchain and targeting the latest API version should resolve this.. https://github.com/wdullaer/MaterialDateTimePicker#why-does-the-datepickerdialog-return-the-selected-month--1. Looks like you are not targeting API level 28. API 28 is required as of v4. Older versions target older APIs.\nI don't think you can submit apps or app updates to the play store unless you target that API level, so it's probably worth updating.. As long as your minimum api level is <= 24 your app will be fully backwards compatible if the target API is 28.. What's the point of having a picker when a user can't actually pick a date?\nThat said, you can implement your own DateRangeLimiter and do whatever you want if it isn't supported out of the box.. I would just prevent a user from showing the picker if there are no valid selections, but that's your call of course.\nIt will allow you to use the functionality of the built-in DateRangeLimiter.\nGood luck with the app!. I strongly suggest you take a closer look at the Android docs.\nVersions < 4 use regular Fragments, and hence require you to use the regular FragmentManager\nAs of version 4 this library uses support fragments.\nI don't maintain the support libraries themselves.. Are you using the latest version?. There's already a PR for this (see #564 )\nI need some time to do actually merge and release everything.. If setSelectableDays does not do what you want, you can implement your own DateRangeLimiter with custom logic.\nThere is no callback in the public API to listen to a user click. There is an internal one, but it's use at your own risk. . As of version 4, this library uses Androidx rather than the deprecated support library. You should upgrade the dependency to androidx in your own application.. Versions are never retracted.\nYou are free to use an old version by specifying it in your build.gradle. Check the releases tab to see which ones exist. Did you observe this with the latest version (4.1.1)?\nI've spent quite some time analyzing flows and fixed all cases I could find where we are announcing before the layout is properly initialized.. That's most unfortunate.\nIt's also annoying that the post() eats half the stacktrace, so we can't see which call lead to the announce.\nMaybe we should log a warning for now when this happens?\nI'll spend an hour more analyzing the code, but I'll probably end up merging this. You're right that eating an announcement is preferable over crashing the app.. I'm sorry I seem to have offended you with my free labour.\nThis library predates support for material design in the framework and support library. This happens to be one of the areas where that shows. At the time, I had to have a fallback attribute for backwards compatibility.\nThe util code will try to pick up the accent color from the framework first android.R.attr.colorAccent, if that doesn't exist, it'll try to pick the one from the support lib R.attr.colorAccent and if that doesn't work, it'll pick the mdtp scoped value.\nNow that the library uses support lib fragments, that last case probably can't happen anymore.\nI will need to research whether it still makes sense to prioritize the framework colorAccent over the support lib one, now that we're no longer using native fragments.. Implementing your own TimepointLimiter is considered an expert feature. It's an escape valve, because I can't possible support all use cases.\nI haven't spent a lot of time on documentation for this, because of this.\nThat said, we can always do better. I'll try to add some comments on the interface definition that provides some more information.. Sorry for the late reply.\nAs you correctly found out: you need to use Androidx rather than the old support library to use v4+ of this library.\nIf you really can't migrate yet, you can use the last v3 release, which does not depend on Androidx.\nIf you do this, keep in mind that I do not backport anything, so that version will never receive any bugfixes or new features (judging by download stats, it does seem to be stable for a lot of people).. There's 2 options:\n1. You use the latest 3.x release\n2. ~~Exclude this libraries androidx dependencies from your build, as described here: https://github.com/wdullaer/MaterialDateTimePicker#how-do-i-use-a-different-version-of-a-support-library-in-my-app~~\nEdit: I was wrong. Excluding the androidx dependencies won't allow you to use this, since androidx uses a different package name. This means that the method signatures in the 4.X releases are not compatible with the deprecated support library. I can't find a reason why this is happening. Nothing in that view is conditional on isThemeDark (it is effectively the same in either mode).\nBased on the screenshots it looks you have been tinkering with the default fonts, maybe something in your code is not properly applying that font override in the dark theme path. The hour and minute views are framework TextViews, rather than AppCompatTextViews. I intend to rectify that shortly, but it might help in your search.. The library relies on androidx, not the support library.\nYou'll have to migrate to androidx, or use the last 3.x release (which doesn't use support fragments). Looks like you are not targeting API level 28.\nPlease try to make a more readable issue next time. There's not even a question in there, making it hard for me to figure out what it is you want.. @cromwel please create a new issue for new questions\nSupport for API 14 and 15 was dropped in v4.\nAny version before that should work on the API levels.\nPlease refer to the release section for more information.. I know you added this to test it, but can you revert it to the original state. I'd like the sample app to reflect the recommended configuration.\n. Rather than removing these views, set their visibility to GONE. \nThis avoids potential NullPointerExceptions when other pieces of the code try to fetch them\n. This will fail if someone later set showYearPickerFirst to false\nYou'll have to change the setter for showYearPickerFirst too\njava\nmShowYearFirst = yearOnly || showYearFirst;\nYou'll also have to add some logic to the sample app that takes this paired logic into account. (would be great if android had some nice way to do reactive UIs, but there you go)\n. What's the purpose of this force flag here?\n. shouldn't this be wrapped in Utils.isTv(getContext());?\n. If this code is not necessary, it should probably be removed\n. Did you try the sample app on an Android TV box? This should allow you to try out this test case\n(it's what I hope to do this afternoon)\n. Can you update the copyright here?. So this looks like it'll work, but I think we can simplify the entire function.\nThis accessibility code still dates from when the DayPickerView was a ListView rather than a RecyclerView.\nIn fact these two accessibility events need to have the same effect as the arrow buttons in the DayPickerGroup.\nOver there I'm just manipulating the RecyclerView position rather than a Date, which is simpler IMO.\nSee: https://github.com/wdullaer/MaterialDateTimePicker/blob/cc53bb190046b301a1ff31f320b69c742ec9ec2a/library/src/main/java/com/wdullaer/materialdatetimepicker/date/DayPickerGroup.java#L168\nWhat do you think?. ",
    "karima-mzoughi": "I want to set the minutes only each 15 min and even the movement of the selector so should I modify only RadialPickerLayout ?\n. ",
    "josh7up": "So far, I have only seen this issue on the emulator and not on devices. I wouldn't consider this critical by any means, but I just wanted to point out that this exists for me on the emulator. Great library!\n. ",
    "Vipul12Thawre": "How to use this lib in eclipse ?\n. ",
    "nikhil8500": "In a calendar pick i would selected all dates but i want to display only month and year in a Textview. plzz help me. ",
    "AngleV": "So for the month we are ok since Android uses zero based indexing.\nAs for the second issue \nSteps to reproduce.\n1. Tap Year\n2. Scroll down to year 2050\n3. Notice the year below in the Calendar\n\nit goes like this until year 2036. The same goes also if i choose year below 1902.\nThe issue seams to appear in Jellybean 4.1.1 since i tested in  4.4.4  and it works fine\n. Yes \u03bfn Android 4.4 and above it seems to work fine. \n. ",
    "MaciejCzekanski": "\nIf you want use Toolbar API before 5.0, you have to use ActionBarActivity (from appcompat lib) and v4 Fragments. I hate that, but I don't see any way around. Therefore, I think your dialogs should work with and without support lib.\n. Yeah, this is how I fixed the problem. I tried to use get(Support)FragmentManager in v4 Fragment, but types were incompatible. getActivity().getFragmentManager() did the trick though.\n\nI just wonder if it is safe to mix usage of both native and support FragmentManagers.\n. According to the manual (http://developer.android.com/reference/android/support/v4/app/Fragment.html), v4 Fragment is used even above Android 3.0. But so far it seems to work just fine :)\n. Yes, it's an unofficial build, but its based on AOSP, with very little modifications, so I guess the bug will occur also on different devices.\n. Hi,\nit still happens on my phone. Here's fresh screenshot:\n\nComparing side by side, I can't see any difference.\n. Sorry, it looks like the new version wasn't used. I cleand the project and it looks better now:\n\n. Looks much better now, both in portrait&landscape. Thanks.\n. ",
    "anthonynosek": "Good point, I guess we could introduce another color parameter which specifies the circle fill. At the moment, if a slightly darker color scheme is used the number becomes harder to read. A specific color just for the circle would allow a user to adopt a light color which will no longer require a change of text color. This is a tidy (and easy) solution. \nThoughts?\n. Parameters, it's all about parameters. We could introduce a font size (and color) parameter for the calendar. And whilst we're adding parameters a string for the \"Done\" button text!\nBut let me have a think about exact changes. I know it was my initial thought upon seeing the picker. If I still think it requires a change after a couple of days I'll let you know and will provide more information. \n. Given that I'd be looking to override the time_picker_selector?\nI am aware of the color parameters, they simply aren't extensive enough.\n. Thanks, I look forward to any future updates.\nIf I have time (limited also at the moment) I'll fork the project.\n. ",
    "wangxin05": "\n. ",
    "geecko86": "Thanks! When do you plan on pushing it to Maven Central?\n. No it's not from this library. it's from Talon for Twitter and the dev says he coded it himself.\nThe problem with just overriding onCreateView is that calling your static newInstance method will create a TimePickerDialog (without the overridden methods) no matter what.\nEdit: Well, silly me. Overriding the static method as well works. Screenshot\n. Problem is that it only looks nice in portrait. For now it's really \"hack\"-y. Looking forward to a proper implementation. :) \n. Hey walt,\nI actually really need this feature. Do you want a pull request or are you already working on it? :)\n. @wdullaer: I managed to reproduce this on an emulator. It happens with 1.2.+, not before.\n. That's because he's running an unofficial/unstable 5.1 rom. However it's\nunrelated to the rom, since the emulator has the issue as well.\nOn Mon, Apr 13, 2015 at 8:23 PM wdullaer notifications@github.com wrote:\n\nI just dusted off my gnex running 4.3 and I can't reproduce this.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/wdullaer/MaterialDateTimePicker/issues/17#issuecomment-92451431\n.\n. Looks like it is! \n\nHowever I noticed that in lanscape, the OK button was a bit off. It looks like the bottom is cut off. Don't know if this is new.\n\n. Here's how it looks\n\n. It's definitely not something that's needed in all cases. In my case it's simply because I need the user to input two separate hours in order to define when to start/stop using the night theme, similar to what you can see in the first screenshot ~~above~~ inside issue 16. So yes, it's already obvious what each one is for but it'd be somewhat clearer with a title.\nI'll have a look. \n. Mh, not too sure about the upper case..\n. ",
    "JZDevelopers": "Thanks for the suggestion. Helped me a lot :)\n. Please can you add changing the accent color by code soon I've been waiting since April it will be the icing on the cake for this library since I absolutely love what you have done thus far\n. I understand it's difficult thank you for the eta and all the work you have\nput into this library. What you have done is amazing and I hope some day I\ncan be as good as a coder as you.\nOn Thu, Jul 9, 2015, 12:06 PM wdullaer notifications@github.com wrote:\n\nThis change is not as easy as it looks.\nI have an idea on how to do this, but I estimate the work at about 2 days,\naka a full weekend.\nI don't think I'll be able to dedicate that amount of time to this until\nsomewhere in August.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/wdullaer/MaterialDateTimePicker/issues/15#issuecomment-120050529\n.\n. Thank you so much!\n\nOn Sun, Aug 30, 2015, 10:21 AM wdullaer notifications@github.com wrote:\n\nClosed #15 https://github.com/wdullaer/MaterialDateTimePicker/issues/15.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/wdullaer/MaterialDateTimePicker/issues/15#event-396049576\n.\n. Thank you sounds great. Sorry didn't know if I commented again on that\nissue, if you would receive a notification or not. Next time I won't make a\nnew one.\n\nThanks for all your awesome work,\nJordan\nOn Wed, May 6, 2015, 1:19 PM wdullaer notifications@github.com wrote:\n\nI've been very busy the last two weeks. But this will be one of the next\nfeatures I add.\nAlso: please just keep the original issue #15\nhttps://github.com/wdullaer/MaterialDateTimePicker/issues/15 open.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/wdullaer/MaterialDateTimePicker/issues/23#issuecomment-99542752\n.\n. \n",
    "ConorOD": "I'm looking for something similar on 30 minute intervals. Is this possible to do myself as the code is at the moment? I only want people to select and see certain intervals\n. ",
    "firoze": "Hmm you are right, we are using the Material Dialogs library in this project as well, although I didn't override any of the styles from that library, the way I wanted to specify the colors in your MDP library.\n. ",
    "1hsyn1": "is it possible for you to add this dismiss and cancel callbacks soon? \n. thanks for the quick response which I was not expecting.  By the way library is a great work of art, another thanks for your effort.\n. ",
    "Jdruwe": "Sorry for my late answer! I updated the gradle lib version but I am still experiencing the issue:\n\n. Device: OnePlus One\nResolution: 1080 x 1920 pixels (~401 ppi pixel density)\nThis is the code that gets called when clicking on the edittext to open the date picker:\n``` java\n    private void openDatePickerDialog() {\n        Calendar now = Calendar.getInstance();\n        if (selectedBirthDate != null) {\n            now.setTime(selectedBirthDate);\n        }\n    DatePickerDialog dpd = DatePickerDialog.newInstance(\n            this,\n            now.get(Calendar.YEAR),\n            now.get(Calendar.MONTH),\n            now.get(Calendar.DAY_OF_MONTH)\n    );\n\n    Calendar cal = Calendar.getInstance();\n    dpd.setMaxDate(cal);\n    dpd.show(getActivity().getFragmentManager(), \"Datepickerdialog\");\n}\n\n```\n. ",
    "Iggy82": "Hello,\nSorry for the late reply. I didn't get a reminder about your answer :(\nOf course this is an extreme sample but it could be on some devices and there are still a lot old devices or cheap devices. I have tested it on an emulator. Here are 2 screenshots of the datepicker dialog in the API demo app. The button bar is always overlapping the content area. You can see it at best in the time picker from Google. I think overlapping the content area is better than not be able to choose a date :)\nWhat do you think?\n\n\n. Thank you. It would be great if you could find the time in a future version.\n. ",
    "andremacpereira": "Support\n. [img removed due copyright issues]\nThis is how it looks like on a 7 inch landscape screen. It's awesome, but the day to select is so tiny!\n. Just imagine old people using it.. they would probably find it difficult. Most of DatePickers work this way around. I wish I knew how to increase it's size.\nI'm not using the Dark Layout for now but yes, it could be useful in the future. :-)\nExcellent job, by the way!\n. ",
    "dimsuz": "Hello! Any news on this issue, do you still plan to implement a new design, or is the decision still pending?\n. It's great news, thank you for working on this!\n. Hmm. Is there a way I could get it to look correct and be able to select the date pre 1970?\n. Actually I just found that sometimes dates pre-1970 are handled nicely. On the screen below you can see that it starts \"messing up\" at year 1902:\n\n. Also it seems to affect only month names rendering. Choosing date and clicking OK produces the correct Calendar instance.\nI suspect the following line is in charge (which converts date to millis prior to rendering it), but will need to clone and debug locally to be sure:\nhttps://github.com/wdullaer/MaterialDateTimePicker/blob/master/library/src/main/java/com/wdullaer/materialdatetimepicker/date/MonthView.java#L456\n. Thanks, I will try it. Should I send PR if I succeed? Or do you prefer this to be a known limitation?\n. Interesting! So do you think that this issue is better to be dealt with on a per-application basis? I mean putting all those patterns into this library's resources might not be the best idea... Or it maybe the best in current circumstances, but not a very clean one (it's how it usually goes when fixing an unavoidable bug)...\n. That would be really great! I am not sure when I will have time to try to do it myself, but in case I will, I'll make a PR if you won't beat me to it :) Probably you'll make a greater thing here, knowing library internals and this much about localization, I have less experience in working with it...\n. Great! Many thanks!\n. It's a bit counterintuitive if I want to leave the year unchanged and change only month. Or day. In this case some users just click OK on year picker, waiting to be taken to the month view which is next. But instead the dialog closes. I observed it on several people in our office :)\nI.e. if a user needs to select a different year, he would surely tap on it. But if year stays the same it is not obvious if tapping is needed (it's already highlighted) or if just OK can be clicked.. And yes, almost all notice that picking year is not that obvious. Not all figure out that it can be tapped to bring up a year picker. There are even reviews in Google Play that mention that they are quite bored to have to swipe all the way up/down only to choose a date from another year (in case it is +-5 or more years). This crossed my mind, but I didn't know that a stand alone year picker exists in this library.\nHow would I launch it?\nI see only YearPickerView in my completion...\nIf you suggest to use showYearPickerFirst option and react on OK to show a non-showYearPickerFirst version, then I already tried that and it is not possible, because imagine these cases:\n\nShow 1st dialog with year picker. User clicks OK. He proceeds to 2nd non-year-first dialog with a month view by following my custom logic. He clicks OK => all good\nShow 1st dialog with year picker. User selects a year by touching it in list. He proceeds to month view automatically (still in 1st dialog). He clicks OK => second dialog is shown as per logic above\n\nCurrently there's no way to distinguish if user has tapped a year in year picker, or pressed OK there.... I.e. in second case user will see a month view twice which is not what was intended.. I see! OK, thanks for clarification, good that I asked beforehand :) Will try to implement this customization locally.. I'll do one if I come up with a meaningful implementation.\nAnd if both flags are 'true' - behavior is identical to a current version?. ",
    "paskuale75": "Is it possible to select only a month in calendar control ? Thanks\n. ",
    "vanniktech": "Fair enough. I've removed the commit for simplifying the boolean logic.\n. ping @wdullaer \n. Advantage would be up to date version with some more features and performance improvements. In any case I'll close it.\n. Okay understandable. I did not know that you can remove permissions. Thanks for that!\n. ",
    "Leandros": "Even while it only supports 4.0 and up, it's actually encouraged by Google to use the v4.FragmentManager (unless you're only targeting the latest and greatest OS, but in this case you don't need this library anyway) instead of the native.\nIt's especially the case, when you're using AppCompat for backported Material UI elements, which, I guess, is a common used library for users of this library.\n. ",
    "KlausConrado": "Another good reason is that Fragment.getChildFragmentManager() is from API 17 and i use the support library version just because of that (my app is also 4.0 and up).\nI want to use your lib but i can't stop using ChildFragmentManager. So please, change the fragments to the support library API.\nThanks\n. I agree with this feature request, it would be much more simpler just use colorPrimary and colorPrimaryDark.\nI don't see any problem in this lib start using AppCompat. Most apps already use it.\nThanks.\n. ",
    "chanakin": "Humbly going to submit that updating the library to a version that uses support fragments isn't going to hurt anyone using the old version of the library. It's industry standard for Android developers to use the support library for fragments, even for those of us who are supporting only OS versions that support native fragments. \nAnd I'd be shocked if there were developers out there with apps that don't use the support library in some way or another. That would be a very limited use case app indeed....\n. I'm aware of your stance, and I'm saying that I don't believe your arguments are sufficient justification to not change. It's, as you say, two lines of code to move over to use the support library. All of the existing consumers of this library will have to update to the new library consciously at some point anyways, and there's absolutely no benefit to using native fragments over the support library ones; it's also minimal change on the consumers' part to move to support fragments, and I daresay might actually simplify many developers' lives because they don't have to do potentially dangerous workarounds like combining support and native fragments in their apps. If anything, I'd say there's a definite disadvantage, because any bugs that are found in the native Fragment class won't get repaired for any devices that are running the buggy version of the OS with that particular implementation. Not to mention the fact that support fragments include the ability to nest fragments with getChildFragmentManager(), which is not available until API 17, and this library is reported to support 4.0+, so you've already crippled some developers who have architecture that involves nesting fragments and forced them to branch.\nFor the record, I've already branched it on my own. I'm merely making the argument that this shouldn't be a branch feature. This should be a part of the library itself.\n. ",
    "osrl": "@chanakin explained it all. I'm also going to insist on that. ",
    "SangeetaSoni": "Can you please provide the example of using it in fragment.\n. ",
    "jakebonk": "I agree this would be a very nice touch to make the Picker seamlessly flow with many app designs!\n. ",
    "fmeneuhe": "The first thing I tried was the solution you say, but it gives a crash inflating XML, at least with AppCompat, in both pre and Lollipop devices.\nSo, in my App, I color backgrounds using \"?attr/colorPrimary\" on \"background\" views attribute because if you use the attribute either in a \"color\" label or \"drawable\" the code crashes. \nIf the library does not use AppCompat I will have to modify the library into my project to fit my requirments, because my app, the material theme can be changed at runtime. \nAny other idea is welcomed.\n. ",
    "Spiderbezno": "I have application where I can change the language of it, the calendar would changed? \nEl 4/6/2015 20:48, wdullaer notifications@github.com escribi\u00f3:The library uses the locale of the current device. I don't see any problem with that.\n\u2014Reply to this email directly or view it on GitHub.\n. Thx \nEl 6/6/2015 11:39, wdullaer notifications@github.com escribi\u00f3:I think you better try to set the locale globally and rely on the android framework to recreate all your activities in the new locale.\nHere's a stackexchange post that explains how you could go about this. Like the author of that post I would recommend against this though.\nhttp://stackoverflow.com/questions/2900023/change-language-programatically-in-android\n\u2014Reply to this email directly or view it on GitHub.\n. In the realese note has an erro the right code is com.wdullaer:materialdatetimepicker:1.5.2\n. ",
    "HelloSpoon": "Ok, I just solved it by modifying the TypefaceHelper.java file.\nChanged the SimpleArrayMap structure by a Hastable structure.\nHere is the new TypefaceHelper.java:\n```\npublic class TypefaceHelper{\n    private static final Hashtable cache = new Hashtable();\npublic static Typeface get(Context c, String assetPath){\n    synchronized (cache){\n        if(!cache.containsKey(assetPath)){\n            try{\n                Typeface t = Typeface.createFromAsset(c.getAssets(), String.format(\"fonts/%.ttf\", assetPath));\n                cache.put(assetPath, t);\n            } catch(Exception e){\n                return null;\n            }\n        }\n        return cache.get(assetPath);\n    }\n}\n\n}\n```\n. Hi, yes I can take a look to it in a couple days. \nI'll post the result of changing Hashtable to SimpleArrayMap again :-).\n. Hi, \nI changed the structure from Hashtable to SimpleArrayMap and it didn't crashed but when I changed my modified code for yours it crashed again with the same error. So, I just re-wrote the one you code and it worked as you said (kind of weird if you ask me).\nThanks!\n. ",
    "kukiss": "i think i found the answer , the method getFragmentManager() in v4.app.Fragment returns v4.app.FragmentManager, but the MaterialDateTimePicker view extends app.DialogFragment.\n i replaced it with \"dpd.show(getActivity().getFragmentManager(), \"dialog\");\" and it works ^.^\nbut i think it'll be better if there is a view that extends v4.app.DialaogFragment.\ncause i have to use support-v4 to adapter android2.3\n. ",
    "elhamzaouiaymen": "@kukiss u made it man , thanks \n. ",
    "demonsantosh": "its still not working  after updating compile version to 26 in android studio 3.1 what could be solution ..\nI followed this answer still not working \nhttps://stackoverflow.com/questions/27225815/android-how-to-show-datepicker-in-fragment. ",
    "metrel": "Fragments are deprecated as of API 28.  Support Fragments are not. Do you plan on changing the Fragment type in the near future?. ",
    "gorevev": "Yes, i have latest version and i use setYearRange, but i think method setMaxDate work not correct :)\n\u0421\u0440\u0435\u0434\u0430, 10 \u0438\u044e\u043d\u044f 2015, 1:53 -07:00 \u043e\u0442 wdullaer notifications@github.com:\n\n\nMake sure you have the latest version (it contains some fixes for this)\nUse setYearRange to restrict the selection of the year to maximum the current year.\n  \u2014\n  Reply to this email directly or  view it on GitHub .\n. \n\n",
    "narendrakothamire": "serMaxDate does not work\n. ",
    "TakumaMochizuki": "I retry one more time, and now is correct. But I don't change anything.\nThe code is from sample code, and my locale on emulator and zh-TW, and they are the same problem, but now all clear......\nAnd I can't reappear the same situation now......sorry...\nand the code \nCalendar now = Calendar.getInstance();\n        DatePickerDialog datePickerDialog = DatePickerDialog.newInstance(this,\n                now.get(Calendar.YEAR),\n                now.get(Calendar.MONTH),\n                now.get(Calendar.DAY_OF_MONTH));\n        datePickerDialog.show(getActivity().getFragmentManager(), \"DPD\");\n. I found this issue occurred in debug mode in my case.\nAnd stop debugging, it will be correct.\n. ",
    "nodegin": "I got the same issue..\n\n. My code is same as example\nOn Jul 8, 2015 2:33 AM, \"wdullaer\" notifications@github.com wrote:\n\nBe that as it may, I cannot reproduce this.\nI need a code sample that reliably reproduces this issue on any device,\notherwise I can't figure out what is going on.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/wdullaer/MaterialDateTimePicker/issues/44#issuecomment-119294966\n.\n. \n",
    "enyciaa": "\n. My goal was to highlight the days that contained saved data. So highlighted days took the standard text color (mdtp_date_picker_text_normal) and non-highlighted days took a new color I added in color.xml (mdtp_date_picker_text_not_highlighted - which uses #ccc, the same as disabled text) - Both colors can be overridden..\nThe original code has an implementation for setting selectable dates in isOutOfRange(), which disables all the days outside the min and max dates (which can be set in DatePickerDialog.java) - but doesn't allow disabling individual dates. \nMy thoughts are that creating a setSelectableDates() function to make individual dates un-selectable could prove problamatic, as you'd also need to make it so the days can't be selected when touched, which would require more changes. Depends if you can see an easy way to achieve that?\nLet me know if you have any other questions\n. Great! I look forward to using it!\n. ",
    "jssingh": "Thanks for attempt to fix this issue, unfortunately it hasn't been fixed. As an example, if the current date is what is set as max (so future dates can't be selected), open the calendar and rotate the screen. All dates are now clickable, including the ones in the future. Using 1.4.1. \n. ",
    "chongivan": "I think @DennyCai's talking about this issue\nhttps://github.com/flavienlaurent/datetimepicker/issues/82\n. Thanks @wdullaer =)\nLove the work!\n. It works well, @wdullaer. Appreciate your efforts =)\n. Hey @CoolMind,\nThe vibrations can be turned off in code as per the README.md, found under section Additional Options:\n\n. ",
    "DennyCai": "@chongivan Thank you so much!\n. ",
    "sanif": "Late but may help someone. I had also faced the same issue. It is because the library uses the names \"AppTheme\"  and \"AppBaseTheme\" as its internal theme names. So there will be conflict between those names in your project and in library. The solution is to rename your theme to  something like \"AppBaseTheme2\". Hope it will help.\n. ",
    "LOG-TAG": "Thanks will do that, there is up to know there in no Month picker available, best place to contribute :+1:  !! \n. ",
    "enriqif": "hey yanbing177 recently I had the same problem and I resolve changing the theme in the styles.xml file in your project, I guess that you activity extends from AppCompatActivity.., try  to change that with another theme like Theme.AppCompat in my file i have right now this lines..\n<style name=\"AppTheme\" parent=\"Theme.AppCompat.Light.NoActionBar\">\n<item name=\"colorPrimary\">@color/colorPrimary</item>\n<item name=\"colorPrimaryDark\">@color/colorPrimaryDark</item>\n<item name=\"windowActionBar\">false</item>\n<item name=\"windowNoTitle\">true</item>\n</style>\nand in your AndroidiManifest.xml you have to reference to that style declared\n<application\nandroid:allowBackup=\"true\"\nandroid:icon=\"@drawable/ic_launcher\"\nandroid:label=\"@string/app_name\"\nandroid:theme=\"@style/AppTheme\">\nhope you be useful.. \n. ",
    "jnordstrom90": "Cheers :)\n. ",
    "felixrindt": "cool! I was just thinking that when people are selecting dates in the distand past / future they might stumble upon this :D\n. ",
    "FarajiMehrdad": "I write jalali calendar  and I know how is work,\nbut I don't know which class and which function in MaterialDateTimePicker should change?!\nif you pleasure and guide me how can change calendar , I can do this.\nthank you \n. YA , tanks Saull , I do it\n. ",
    "Suall1969": "@FarajiMehrdad There is really not much @wdullaer can do about it.\nIt is simple, You just need to import the module into your Android Studio project, and change the Month strings to \"Farvardin\", \"Ordibehesht\", ... then, make use of the JDF class to convert Julian dates to Persian dates as described here: http://stackoverflow.com/a/18076919\nBTW, you can just use the https://github.com/alirezaafkar/SunDate_Picker if you want to preserve your time.\n@wdullaer Thanks for the great design of pickers.\nUPDATE:\nRecently, Mohamad Amin ported this library to Shamsi and ended up with this:\nhttps://github.com/mohamad-amin/PersianMaterialDateTimePicker\n. Pleasure, but then it would not support Julian dates anymore.\n. It is only happening on API 10 and lower.\nAs you said, I'll have to do more debugging.\nThanks for the tip.\n. Thank's @Thore1954 \nit worked!\n. ",
    "CoolMind": "Hello!\nThanks for a DateTimePicker!\nWhy is your component vibrate? How can I turn it off?\nIn https://github.com/wdullaer/MaterialDateTimePicker/issues/116 it is written that a VIBRATION permission should be removed. It is not a good solution.\n. So, I removed that permission from Manifest and also wrote:\ndialog.vibrate(false);\n. Hello!\nI also use support fragments and want to re-set callbacks on orientation change. Reading https://android-arsenal.com/details/1/3779 I write:\nDatePickerDialog dpd = (DatePickerDialog) getFragmentManager().findFragmentByTag(\"Datepickerdialog\");\nand receive this error: \"Inconvertible types cannot cast android.support.v4.app.fragment to 'com.wdullaer... DatePickerDialog'\".\nI see that findFragmentByTag returns Fragment of support library.\n. Solution is simple. Because I invoked a DatePickerDialog from support fragment, I have to write: \"getActivity()\":\nDatePickerDialog dpd = (DatePickerDialog) getActivity().getFragmentManager().findFragmentByTag(\"Datepickerdialog\");.\nIf you wish, you can write this in README.\n. ",
    "hearsilent": "I found the bug is  occurred by timezone.\nIf I set the timezone is +8, then it will show the wrong month.\n. https://github.com/wdullaer/MaterialDateTimePicker/pull/58\n. Fix https://github.com/wdullaer/MaterialDateTimePicker/issues/57\n. ",
    "TheFinestArtist": "@wdullaer If you want to recreate the wrong month issue, you can just test the sample app in different time. In South Korea, datepicker works fine in day time, but not in the 12AM~6AM!\n. ",
    "markmooibroek": "+1 =)\n. ",
    "mafiu": "+1\n. ",
    "kenumir": "+1\n. +1\n. ",
    "emilianobonassi": "+1\n. You're welcome.\n. @wdullaer , did you have time to look the changes?\n. :+1: , I thought you had issues with my changes.\n. Thanks @wdullaer for your update, you are very kind.\nAnyway, it's a PR not an order to merge :smile: , I'm glad that you are using this as inspiration.\nLet me know if you need help to reduce your load.\n. ",
    "masztalski": "I tested corrected landscape mode of calendar on Lenovo A800 and although it is better than in 1.3.0 still doesn't fully correct. I attach view in portrait and in landscape mode:\n\n\n. ok, Issue created. I don't know what you mean about wrong coloring, because I have overwrite some settings. Or do you mean wrong background for day of week in landscape layout?\n. I have overwrriten:\nmdtp_accent_color\nmdtp_button_color\nbackground of day of week wasn't touched(sincerely I have no idea which parameter this could be ;) )\n. ",
    "Blackhex": "Ah, didnt notice that, sorry.\n. ",
    "GuillaumeDelente": "@wdullaer looks like it's a caching issue indeed - force stop did the trick.\n. ",
    "mohamad-amin": "@wdullaer Should the mdtp_done_button.xml layout be placed below the mdtp_date_picker_selected_date.xml or it's a bug?\n. ",
    "neonankiti": "oh, my version was 1.3.1. updated and fixed. thank you!\n. ",
    "mauriDantonio": "I know, it's not easy to reproduce, but if you try a few times you'll get the crash :)\nBtw, you library it's awesome!\n. ",
    "Rainer-Lang": "+1\n. Button color is in accent color (guidelines). \n. Wow - that would be really awesome because I need a datetimepicker in one picker.\n. Great - thanks for the update. \n. +1\n. ",
    "americosfacebook": "Hi wdullaer,\nYes, surly  do other people to solve the issue and here are the screen shots of the issue:\nBorder/Outline Issue in Android OS Version : 4.3,4.1.2\n\nWorking fine in Android OS Version: 5.0\n\nThanks for your positive reply.\nRegards,\nAndroid Team\n. ",
    "Thore1954": "The problem is with the getDisappearAnimator & getReappearAnimator in RadialTextsView class.\nYou'll need to wrap your view with an AnimatorProxy if the running platform needs to be proxied.\nso use:\nmDisappearAnimator = ObjectAnimator.ofPropertyValuesHolder(\n                AnimatorProxy.NEEDS_PROXY ? AnimatorProxy.wrap(this) : this, radiusDisappear, fadeOut)\n                .setDuration(duration);\ninstead of:\nmDisappearAnimator = ObjectAnimator.ofPropertyValuesHolder(\n                this, radiusDisappear, fadeOut).setDuration(duration);\n. ",
    "jgall": "if the view were passed in to the onDateChaged() interface method, I could potentially work around this myself by using getSelectedDay(). \n. I am not the most experienced with Android development, but perhaps my issue stems from the fact that I am creating the DatePicker from within another custom Fragment? For whatever reason, when I rotate the device I lose both the min and max dates within the DatePicker as well as my listener connections to my custom Fragment.\n. I am simply using the maven repository but do not have the update with the bug fix. Is the maven one outdated? Should I use the source instead? \nThanks so much for your time!\n(EDIT - you are correct, I was using an outdated version, thanks!)\n. ",
    "Jawnnypoo": "I am looking into it. \n. Hey, I agree. I changed the calendar icon. I just went and generated it here:\nhttp://romannurik.github.io/AndroidAssetStudio/icons-launcher.html\nAs to the note about accent, the if you look at the Google apps that use the same calendar and time pickers, they all use the themes accent color to color the dialogs (see the settings app on Android 5.0+ when you go to change your time, or the Clock app on 5.0+). Therefore I think it does make sense to keep it pulling from the themes colorAccent. As for the name of the method, yeah maybe it would make more sense (since it is the primary color of the dialog) but I could see it working either way. \nHope to see this merged in soon with another release, I am looking forward to using it in a few of my apps!\n. Yeah that would make things much easier. It did feel weird having to add setAccentColor to so many places in the code.\nIt would be nice to have it all centralized (which I guess is really what the purpose of a context theme would be, but I understand your desire to avoid including appcompat in the library to support using the colorAccent from the theme). Regardless, I think there will always be times where the user would want to set the color programatically without using the theme, so its a good thing to support. \nI looked at Material Dialogs as an inspiration for how some of these things should work. Its a great library to reference for a lot of things like this. Anyhow, thanks for all that you are doing and keep it up!\n. Update: this only occurs if you call setAccentColor on the dialog manually. \n. Hmm yeah I believe you are correct. Disregard then! Looking forward to the next release!\n. I would say it is worthwhile to do this now, so that others have time to migrate over to 4.0.0 of this lib before Android P is actually in public hands. Would you like me to make a PR @wdullaer ? I probably will have some time this week.. ",
    "siiie": "I believe it's not a truncate issue:\n- On my nexus 7, it looks the same\n- Saturday appears correctly\n- The other days do not use a letter char that belong to the name of the day (not the first letter)\n- In Hebrew we do not use the first letter for days Sunday-Friday, we use the first six letters of the Hebrew language (ref image http://imgur.com/zGhqQnp)\n. @wdullaer No problem, i'll be glad to help\n. After some tests, I think the char we actually see is ' .\nTake a look at this code:\n```\nCalendar calSet = Calendar.getInstance();\ncalSet.set(Calendar.DAY_OF_WEEK, 1);\nSimpleDateFormat formatLetterDay = new SimpleDateFormat(\"EEEEE\",new Locale(\"he-IL\"));\nString letter = formatLetterDay.format(calSet.getTime());\n```\nThat would show the short day of the week (Sunday) like that: '\u05d0\nHope that could help you solve it\n. ",
    "ponnex": "pretty please :D\n. ",
    "DavidMont": "+1 \n. ",
    "alxhotel": "+1. ",
    "ChairfaceChippendale": "+1. ",
    "ninovanhooff": "Another project seems to wrap this library in a From/To Tabbed layout:\nhttps://github.com/borax12/MaterialDateRangePicker\nMaybe that is suitable for your usecase?. ",
    "Ghostish": "Here is the log \nAndroidRuntime\ufe55 FATAL EXCEPTION: main\n    java.lang.NullPointerException\n            at com.wdullaer.materialdatetimepicker.date.DatePickerDialog.onCreateView(DatePickerDialog.java:316)\n            at android.app.FragmentManagerImpl.moveToState(FragmentManager.java:829)\n            at android.app.FragmentManagerImpl.moveToState(FragmentManager.java:1035)\n            at android.app.BackStackRecord.run(BackStackRecord.java:635)\n            at android.app.FragmentManagerImpl.execPendingActions(FragmentManager.java:1397)\n            at android.app.FragmentManagerImpl$1.run(FragmentManager.java:426)\n            at android.os.Handler.handleCallback(Handler.java:615)\n            at android.os.Handler.dispatchMessage(Handler.java:92)\n            at android.os.Looper.loop(Looper.java:137)\n            at android.app.ActivityThread.main(ActivityThread.java:5012)\n            at java.lang.reflect.Method.invokeNative(Native Method)\n            at java.lang.reflect.Method.invoke(Method.java:511)\n            at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:791)\n            at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:558)\n            at dalvik.system.NativeStart.main(Native Method)\n. @wdullaer I then tested it on a Genymotion virtual device whose version is 4.1.1 .  No crash happened.\nSeems that it is not a problem about OS version.\n. @wdullaer Waiting for the fix haha\n. @wdullaer  Unfortunately no, the dialog doesn't scroll and the content in the dialog doesn't scroll either.\n. @wdullaer Maybe this time it's a OS problem ? I then tested it on a virtual device with a 720 * 1280 screen on Android 4.1.1 (in fact it's a virtual Galaxy Nexus) . The problem still exist . Then I tested it on a virtual Moto X whose screen size is also 720 * 1280 on Android 4.4.4 , the picker worked as expected.\n. @wdullaer  I've found that even though I can't scroll the picker with finger swiping ,  I can scroll it with the mouse wheel when using a virtual device\n. ",
    "PavelSynek": "I have the same problem on physical Android 4.1.1 480x800 device. Everything was ok in 1.4.2, so it looks like this commit caused it.\n. Looks like he's using https://github.com/borax12/MaterialDateRangePicker :)\n. Oh it was fixed in the 1.5.4 release, I didn't get to update it yet, thanks!\n. ",
    "petrica5800": "I found same problem on Android 4.2.2 device, i can't scroll to select next month or next year.\n. ",
    "mertserimer": "getActivity().getFragmentManager() solved the issue, nevermind\n. ",
    "freezy": "Would you accept a PR for this as an opt-in feature?\n. There you go :)\n. @wdullaer: Do you think that this is going upstream at some point? We have a release of our app coming up and if not I'm going to have to build it differently. Thanks in advance.\n. Good news, thanks for the heads up. Cheers!\n. I've resolved merge conflicts of your recent changes. Please take a minute to review, I won't have the time to keep it up forever.\n. Yeah I know how that feels.\nThanks for the update anyway!\n. ",
    "skywall": "+1\n. ",
    "adolfdsilva": "It'll be really intuitive for using the date picker as DOB picker.\n. Thanks!!!\n. ",
    "Dellkan": "Hi @wdullaer. Thanks for adding this, I need this as well.\nWould you mind releasing another version on bintray with this feature?\n. ",
    "MrBrightside29": "Yes, that's right. I want to avoid instantiating every time I show the picker.\n. Well, in my case it won't make too much difference from instantiating inside the onClickListener to outside, so I guess I could change the code. Anyway, thanks for your fast reply.\n. ",
    "Mandeep221": "Thanks alot!\n. ",
    "tuxmobil": "To my eyes, and compared to the stock TimePicker, the stroke width in RadialSelectorView:308 looks a bit thin.\n. ",
    "mshearer123": "Any idea if the new design will be used at some stage?\n. thanks for the response.  I  have fixed this locally by adding the ability to set the timezone.\nI've also created a PR incase you think this may be functionality others may use.. Calendar set to different timezone displays incorrect Month above day view.\n\n. ",
    "mohican": "try last version 1.5.3, demo app and own code - same result gray strike only on lenovo s960s\n. yes\n. latest version in master - same result\n. ",
    "dgadelha": "Probably the solution is #228. I was just browsing the web looking for this, and as I already use this library, came to see if it supports this feature. Would be a nice addition.. ",
    "alexxxdev": "I have the same problem on lenovo s960s, android 4.4.2, maybe problem in screen size?. ",
    "maelfosso": "I also want the same thing\nPlease How to realise the third option @wdullaer with this library ?. ",
    "wserpas": "Can you give me an example??\n. ",
    "varadmondkar": "@wdullaer anonymous inner class worked thank you :+1: \n. ",
    "Aryan-mor": "Please bug fix.\nTimePickerDialog does not support setAccentColor function.. ",
    "nomanr": "Okay. \nOnly here I've used the library \njava\n    public static DatePickerDialog buildDatePickerDialog(Context context, final TextView\n            textView, int color) {\n           Calendar now = Calendar.getInstance();\n           DatePickerDialog dialog = DatePickerDialog\n                .newInstance((DatePickerDialog.OnDateSetListener) context,\n                        now.get(Calendar.YEAR),\n                        now.get(Calendar.MONTH),\n                        now.get(Calendar.DAY_OF_MONTH));\n           dialog.setOnDateSetListener(new DatePickerDialog.OnDateSetListener() {\n               @Override\n               public void onDateSet(DatePickerDialog datePickerDialog, int year, int month, int\n                    date) {\n                   textView.setText(parseDate(date + \"/\" + (month + 1) + \"/\" + year));\n               }\n           });\n      //  dialog.setAccentColor(context.getResources().getColor(color));\n           return dialog;\n   }\nI compile this version \njava\n     compile 'com.wdullaer:materialdatetimepicker:1.4.1'\nI get this result on my screen.\n\nAs you can see Titles are visible. Everything is fine. \nBut later I wanted the multiple theme support, I can change accent color. I used this version.\njava\n      compile 'com.wdullaer:materialdatetimepicker:1.5.2'\nAnd the titles were gone. Result is shown below.\n\nI dont know why this is effecting my ViewPager. \nIn case you are interested in ViewPager XML.\n``` xml\n  \n    <android.support.v4.view.PagerTitleStrip\n        android:id=\"@+id/pager_title_strip\"\n        style=\"@style/ViewPagerTitle\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:layout_gravity=\"top\"\n        />\n</android.support.v4.view.ViewPager>\n\n``\n. Yes I am sure they are gone. As you can see in screenshots. The layout below titles moved a bit up when titles are invisible.\nOkay let me try.\n. Nope it doesn't. I think I've to stick with the old version of the library , sad unable to use the theme feature. \n. I didn't get it how this could have effected the whole app. \nI created a new project and implemented aViewPager` with titles. Right when I compiled your library again titles were gone. \n. Nope they don't show at all. Titles are not invisible, they are just gone.\n. Okay thanks. I'll look into it and will let you know.\n. Yep you are right. The bug is in support library.\n. Okay no problem. I'll wait for the fix unless there is no fix when I am going to release my app then I'll fork it and will make changes accordingly. Thanks.\n. ",
    "digithree": "Indeed! The options seem to be:\n1. Disable year picker if current date + 1 year is > max date\n2. Allow year picker for current date year + 1 but set date to max date if current date + year > max date\n3. Allow year picker for current date year + 1, set date to current date + 1 year but disable OK button.\nNone of them seems ideal to me however. A compromise might be to do 2 but animate setting the date backwards to max date from current date + 1 year to emphasise that it is beyond max date. So process could be:\n- Select year picker\n- Pick next year\n- Date is set to current date + 1 year, shown briefly to user\n- Animate scrolling back to max date if max date < current date + 1 year\nWhat do you think?\n. Thanks, is this available on Maven-central yet?\n. No problem, actually have improve it a lot and currently working on the time picker now, you'll get another pull request later today :D\n. Ah of course, cool will do\n. @wdullaer okay this should be good to go, added time picker support and just finished today with something I'd missed, support for selectable dates / times\n. That's cool, labour of love :D let me know what you think, I had to get creative ;)\n. Bump\n. It's true, there's a lot of conditional logic.\nIn MonthView.java, there is a key handler which mainly processes the up, down, left and right keypresses to support keyboard and D-pad navigation. At about 160 lines, it's a lot, and looks a bit spaghetti. I'd defend it's usage on the grounds of keeping the TV code as a separate block away from the standard handlers, and if you read through the algorithm, there's quite a lot of messing about to moving through dates, especially between months. I felt I had to do this because the code is bound in with the month view. Obviously this is not ideal but due to the existing code structures, the view knows quite a lot about the month workings and so I proceeded with this compromise. Most of the code here deals with the difficulty of moving the day selection in a way that corresponds with how the user would expect visually.\nThe other large clunk is in RadialPickerLayout.java, where there is again a long key handler, about the same length as for the month. It mostly deals with making sure that the hours, minutes and seconds are incremented / decremented correctly, with respect to the various conditions, such as 24 hour view, selectable times, and the fact that a minute or second change can affect the hour, etc.\nOther than that there are some small enough supporting changes.\n. Yes I would be open to it. I think it would be great to have a material time / date picker which works with TV, certainly handy to me. I'm in :D\n. BTW newborn on the way for me too in the new year :)\n. (deleted comment from wrong account)\nThank you @wdullaer ! It's exciting times.\nLet me know how you get on then\n. ",
    "krishnameena": "Thanks but that is not reflected in the gradle file. I think for that you\nhave to increase gradle version.\nThanks & Regards,\nKrishna Meena\nOn Fri, Oct 30, 2015 at 2:05 AM, wdullaer notifications@github.com wrote:\n\nClosed #109\nhttps://github.com/wdullaer/MaterialDateTimePicker/issues/109 via\n8f6b1cf\nhttps://github.com/wdullaer/MaterialDateTimePicker/commit/8f6b1cff619d1a186c29dd81f08971aeab685142\n.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/wdullaer/MaterialDateTimePicker/issues/109#event-449710688\n.\n. Ok thanks.\n\nThanks & Regards,\nKrishna Meena\nOn 30-Oct-2015 6:24 PM, \"wdullaer\" notifications@github.com wrote:\n\nI fixed it in master, which is why the issue is closed.\nI have yet to release a new version to maven central.\nYou can wait for that or check out the code in master\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/wdullaer/MaterialDateTimePicker/issues/109#issuecomment-152515841\n.\n. \n",
    "Nikhil-z": "\nI think now you understood my point . i want the user to select only a single date instead of FROM date and TO date . All i wanted is to avoid that FROM and TO\n. Sorry Guys . It was all my mistake . Hey PavelSynek thanks for the light (Now a days Im messing up with lots of libs , thats why ) and thank you  wdullaer .  I tried both lib in same project but ended up like these \njava.lang.ClassCastException: com.borax12.materialdaterangepicker.date.AccessibleDateAnimator cannot be cast to com.wdullaer.materialdatetimepicker.date.AccessibleDateAnimator\n                                                              at com.wdullaer.materialdatetimepicker.date.DatePickerDialog.onCreateView(DatePickerDialog.java:274)\n                                                              at android.app.Fragment.performCreateView(Fragment.java:2114)\n. ",
    "phylypp": "Android 6.0 (API level 23), 3.2'' QVGA (ADP2), 320x480px mdpi, 160dpi\nAndroid 6.0 (API level 23), 2.7'' QVGA, 240x320px ldpi, 120dpi\nI tried with emulators. Do you think these screen sizes do not exist? I am worried, since with older versions of your lib some people were not able to see the OK button.\n. Thanks for your help! I think I will just fall back to the old pickers for small screens. The poor guys with small devices will have to live with it...\n. ",
    "Mitchlol": "Clicking the error gives another error, as it wont install a package i already have installed. I believe your aar needs to include its dependancies.\n. Deleted my entire SDK folder, re-downloaded everything from scratch. Fixed the issue!\nSorry for the waste of time. slithers into a dark corner\n. I would like this as well, the native implementation does this on new devices.\n. ",
    "silviahisham": "+1  would be great if I can select both date and time together in one dialog\n. ",
    "milaptank": "please have look into this may be get some idea from this \nhttp://stackoverflow.com/a/22626706/1293313 \n. ",
    "mikemike396": "Any update on this?. ",
    "unxavi": "Adding more information to this... the day\u2019s labels in google calendar, in Spanish is the follow when using one letter:\n\nThe \"Wednesday\" day label is represented by \"X\" when the actual name is \"Miercoles\" that's because that's the correct representation of the day in Spanish.\nIn the date picker, because it use the first letter, the day is represented as \"M\" the same as the one before \"Martes\" that would be \"Tuesday\".\n\n. is cool, the library is very cool. \nWhat about an option to load into de dialog a char array for the week days label per locale. I mean, like i pass as a parameter the way is going to render in catalan or spanish when i create the dialog. At least it could be a workaround :cry: \n. will you update the app with using the chars for catalan and spanish as described in the second option?\n. @wdullaer sweet mate :+1: :dancer: \n. thanks, thats a very good line of code...love the deleted code. :+1: \n. ",
    "ghost": "Tks for your reply.  How can I fix it without pulling your source code. On api > 18, the name of day only displays as the first letter. \nAnd by the way, there's onething I would like to improve is font size on large and x-large screen. The button Ok and Cancel look quite thin and small. Here is screenshot\n\nI love your project so much. It's beautiful.\n. Try to use separate instance calendar of max date and min date. Those must be different.\n. ",
    "shireen028": "@wdullaer That worked like a magic. Thanks a lot.\n. So I tried this  dpd.initialize(mCallBack,dyear,dmonth,dday);\nIt works but now I can't select any other date. please help\n. I fixed it. I had to remove this line \nDatePickerDialog dpd = (DatePickerDialog)getFragmentManager().findFragmentByTag(\"Datepickerdialog\")\nfrom onResume()\n. OK but how am I supposed to get my user defined initial date if I don't use initialize method. The now.get statements won't allow me\n. ",
    "jintoga": "Thank you for the quick answer. Just letting you know your work helps a lot! :+1: \n. ",
    "hitchan": "Why don't you just store a Calendar instance with the selected date and set it to that when you go to open it again?\n. ",
    "mmounirf": "Simply, don't use this line\nCalendar now = Calendar.getInstance();\nevery time you want to set time or date. You can define now as a public variable and reuse it whenever you want to get date/time from calendar.\n. ",
    "D40298008": "Sorry for the delay.  If you launch either of the pickers from an activity that does NOT re-create itself via the Android lifecycle (pause/stop/destroy/create/start/resume), the picker-dialogs will not rotate correctly.\nSome activities are better to handle the rotation change themselves instead of destroying and re-creating themselves (commonly web-browsers or video players). This is done by implementing onConfigurationChanged():\nhttp://developer.android.com/guide/topics/resources/runtime-changes.html#HandlingTheChange\n. ",
    "Nakrul": "add something like this:\n@Override\n    public void onConfigurationChanged(final Configuration newConfig) {\n        super.onConfigurationChanged(newConfig);\n        ViewGroup viewGroup = (ViewGroup) getView();\n        if (viewGroup != null) {\n            viewGroup.removeAllViewsInLayout();\n            View view = onCreateView(getActivity().getLayoutInflater(), viewGroup, null);\n            viewGroup.addView(view);\n        }\n    }\nfor testing add in manifest:\nandroid:configChanges=\"orientation|screenSize\"\n. ",
    "emitchel": "Would be awesome to see @Nakrul 's fix in there.\n. Anyone find a way to get the tag? .getParent() returns null for .getTag() as well as the next several .getParent().getParent().getParent()... views returned. A static placeholder can solve this problem on the high level, but I feel as though this tag should persist somewhere in the view. \n. Updated @wdullaer \n. ",
    "AndreAle94": "Why do you think that keeping a boolean should be wrong?\n. ",
    "SteveCampos": "Sorry, i am a dumb!\n. ",
    "mintheinwin": "how to setTypeFace font on the Title Text ?\npickerDialog.setTitle(mText);. ",
    "maxbaldrighi": "This is a pretty old thread...\nCurrently, as of version 3.4.0, method initialize() is still accessible.\nI would like to instantiate the picker dialogs only once (I think it's better if we think about performance) and not to keep creating new instances every time a user wants to open the picker...\nSo I was looking for a method that allowed me just to reset values, and I found initialize().\nWhile it seems to work with dates, on the contrary it won't reset the TimePicker at the wanted time.\nI realized this, because (this is to me the more important issue) if I tap on cancel after setting the selector on a new time and I reopen the dialog, from the UI point of view the time displayed is the last selected, while the picker's mInitialTime value is correctly the one that we'd like...\nDo you have any idea on how to solve this incongruence?. Thank you so much for your reply.\nNow I have the whole picture, and yes, at least for now, I will instantiate every time the pickers.\nPS. I've just submitted an issue related to this library about an odd behavior I'm experiencing. Thank you!. Thank you for your reply!\nNo, the only pickers are created in my main Activity that has no fragments in it.. I definitely should have read your explanations more carefully and try to exclude support dependencies in the first place... IT WORKED!\nNow that fragment behaves exactly like the others. It still bothers me, though, why it was just that fragment, while the same pattern of replacing-and-back used for many other fragments kept working fine...\nIf I ever have some news about this, I will report here!\nThanks again for your help!. ",
    "VyMajoris": "So, in order for me to pragmatically change the current selected date I must call newInstance and instantiate a new DatePicker?. Understood.. ",
    "zkurbonov": "Hello wdullaer, I have tried much about still no result in changing format of \"MONTH\" in DataPicker. When I select for example, 21 December 2017 it shows in my Edittext as 21 November 2017!! Searched from Stackoverflow, and there is written to add +1 (now.get(Calendar.MONTH) + 1), but it didnt help.  I understand that java.util.Calendar works with 0 index for months, but dont know how to change it to adapt to my case! \nNeed your help!!!\n. ",
    "Karan197": "@wdullaer Please let me know if there is any way to Show year selection first.. Like there is an option in Android widget https://stackoverflow.com/questions/38477118/show-year-selection-first-in-android-calendar-view/46223200#46223200. Ahh!!! There is a method right there. Sorry for the silly query.. ",
    "thinkpozzitive": "So if you've got a fragment like (taken from the afficial documentation: http://developer.android.com/guide/topics/ui/controls/pickers.html#TimePickerFragment):\npublic static class TimePickerFragment extends DialogFragment\n                            implements TimePickerDialog.OnTimeSetListener {\n```\n@Override\npublic Dialog onCreateDialog(Bundle savedInstanceState) {\n    // Use the current time as the default values for the picker\n    final Calendar c = Calendar.getInstance();\n    int hour = c.get(Calendar.HOUR_OF_DAY);\n    int minute = c.get(Calendar.MINUTE);\n// Create a new instance of TimePickerDialog and return it\nreturn new TimePickerDialog(getActivity(), this, hour, minute,\n        DateFormat.is24HourFormat(getActivity()));\n\n}\npublic void onTimeSet(TimePicker view, int hourOfDay, int minute) {\n    // Do something with the time chosen by the user\n}\n```\n}\nAnd in an activity:\npublic void showTimePickerDialog(View v) {\nDialogFragment newFragment = new TimePickerFragment();\nnewFragment.show(getSupportFragmentManager(), \"timePicker\");\n}\nyou cannot modify the fragment to return \nreturn TimePickerDialog.newInstance(this, hour, minute,\n            DateFormat.is24HourFormat(getActivity()));\nbecause it expects the type to be returned a DialogFragment not a com.wdullaer.materialdatetimepicker.time.TimePickerDialog.\nNote: I should note I'm a beginner at this, and I'm sure the answer is simple but...\n. Thanks for the quick reply. \n\"Just call tpd = TimePickerDialog.newInstance(...)\" is what I ended up doing and got it working.\n. ",
    "kongminghan": "Hi, may i know how to implement this datepicker inside my dialog fragment?\n. ",
    "danielgindi": "Actually - false alarm. I found out that:\n1. Only the core library is packaged for gradle\n2. The only provider in the app comes from google play services \"measurement\", and says ${applicationId}.google_measurement_service\n3. There's an issue about it: https://code.google.com/p/android/issues/detail?id=193567&q=label%3AType-Defect&colspec=ID%20Type%20Status%20Owner%20Summary%20Stars\nSo sorry for the false alarm!\nJust putting the information here if anyone comes through google etc...\n. ",
    "dbikic": "The newest, i reverted to 1.4.2. and it works fine. It could be a clash with some other lib.\n. The older version of the lib is good enough for me. I'm closing this one, sorry for your trouble.\n. ",
    "goraga1": "Overriding colors not work , after changing gradle version  from 1.4.5 to 2.2\n. ",
    "paulblessing": "Updated as suggested. The base size for the time label is now 60dp, but changes over to 60sp at -w560dp-land where there is enough room to allow the text size to grow. The existing sizes (76sp at -sw600dp and 64sp at -sw600dp-land are still intact.\n. > why the switch to sp at w560?\nWas trying to make the text changes only where needed, and nowhere else. At w560 there is enough room to allow the text size to grow without a problem.\n. @wdullaer If it's alright with you, I'd like to keep the scope of this pull request small and limited to just the mdtp_time_label_size since that's the only one causing any real trouble (at least for me).\nI can either\nA. Remove the w560 variant and leave everything else in this pull request as-is\nB. Remove the w560 variant and update the other existing variants of mdtp_time_label_size to use dp rather than sp\nC. Come back at some time in the future (though I won't have much time to get to it soon) and go through and update the dimensions of all the appropriate text size dimension resources. That's not something I'd like to do in a hurry in case there are some subtle nuances.\n. Yes, this is a fix that I had in #141 but did not make it in.\n. I agree that it's possible there may be more extensive changes needed to support the seconds picker. I'm sure it could be solved by reducing the font size or trying to go vertical somehow for small devices as you suggest.\nThis change does address the problem for just an hours/minutes picker which is all my company uses. I can close this pull request if you'd like to take it a different direction. It does solve the problem for me in my fork in the meantime.\n. > If you can tell me from which screensize this becomes necessary?\nI can reproduce this on a Nexus S emulator (480x800 at 240dpi) in landscape, which I think if my math is right, ends up being 533dp.\n\nI'll add it in, but with a selector on the screen resolution.\n\nIt's already being selected by resolution. At values-w560dp-land the mdtp_left_side_width value is set at 270dip already. This change will only impact resolutions smaller than that.\n. ",
    "GauthierChan": "This feature would be amazing :+1: \n. ",
    "fangzb": "All right , thanks always :)\n. ",
    "livotov": "Probably this could be supported transparently after migrating from ListView to RecyclerView by just swapping horizontal/vertical layout managers.\n. ",
    "bernaferrari": "Where? @wdullaer . ",
    "ChillingVan": "Hi, I download the code and use setScrollOrientation(int orientation) of DayPickerView. It seems that it works well. Could you expose this method?. ",
    "Flo354": "Hi @wdullaer, I still don't find the method. Where is it?. Hi,\nYes, you are right, I am on a samsung galaxy s8. . ",
    "marinaguimaraes": "Hi @wdullaer, I would like to use this version, but I can't find it. Was it merged already?. ",
    "karandeep26": "I cant also find the same.. ",
    "aman-jham": "thanks\n. ",
    "kim-montano": "To solve my problem, I used:\ndatePickerDialog.registerOnDateChangedListener(new DatePickerDialog.OnDateChangedListener() {\n            @Override\n            public void onDateChanged() {\n                dpd.notifyOnDateListener();\n                dpd.dismiss();\n            }\n        });\nIt would be nice to have a boolean function to have the datepicker dialog automatic close feature.\n. Yes it's from a tablet. \n\nIn case you really want to tweak it, you can override mdtp_day_number_size\n\nWill you be able to create a method that sets the text size for day number display?\nAlso, thank you so much for creating this library, and thank God that you're replying to inquiries such as mine.\n. Okay in case someone else would want want a bigger text, I was able to increase the text size by declaring the mdtp_day_number_size on my values folder, dimen.xml and on sw600dp/dimens.xml with 12sp, and 18sp respectively for the sizes.\nNormal Text Size on tablet:\n[http://prntscr.com/anunf3]\nLarger Text Size on tablet:\n[http://prntscr.com/anunpd]\nThank you so much for this library, wduallaer.\n. Already did. Thank you very much!\n. ",
    "alicanhaman": "Hey op, could you send me a message if you have found any datepicker that supports the dpad, I have been looking all around for such a feature.\n. ",
    "Fleker": "I haven't seen one yet, but I'm wondering how hard it'd be to integrate\nthis one. It shouldn't be hard to tie keys to moving up and down.\n. ",
    "bomiyr": "+1 for this feature\n. ",
    "FranclisJunior": "Hello, it happens in the Xperia Z1 and Emulator Nexus 5.\nAre you trying to set a title on the TimePickerDialog? No;\nIs it happening on a tablet? No.\nIs this happening on a real device or in the emulator? Two.\n```\npublic class ShowElements {\n      public static void showTimePickerDialog(FragmentManager fragmentManager, final Button button) {\n          TimePickerDialog.OnTimeSetListener listener = new TimePickerDialog.OnTimeSetListener() {\n              @Override\n              public void onTimeSet(RadialPickerLayout view, int hourOfDay, int minute, int second) {\n                  button.setText(Masks.hourIntToString(hourOfDay, minute));\n              }\n          };\n\n          Calendar now = Calendar.getInstance();\n          TimePickerDialog timePickerDialog = TimePickerDialog.newInstance(\n                    listenner,\n                    now.get(Calendar.HOUR_OF_DAY),\n                    now.get(Calendar.MINUTE),\n                    true;\n            );\n          timePickerDialog.show(fragmentManager, TIME_PICKER);\n   }\n\n}\n```\nUsage :\nShowElements.showTimePickerDialog(getActivity().getFragmentManager(), btTime)\n\nPS: I use the same scheme for the datepicker, and works\n. No :/\n. @epetrenko  Thank you, worked perfectly, just removed the\n <item name =\" android: fontFamily \"> sans-serif </ item> of my theme.\n. \n",
    "epetrenko": "Hello, guys.\nIt seems that I have exactly the same issue both on my Nexus 7 2012 tablet and on Nexus 9 emulator. I use a custom theme in my application, where parameter <item name=\"android:fontFamily\">sans-serif</item> is set for whole app (root theme, which extends Theme.AppCompat.Light.DarkActionBar). But if I remove that line, problem disappear.\n\nAs @FranclisJunior mentioned, issue is present only for TimePickerDialog. DatePickerDialog works properly without exception.\n\n@wdullaer I hope that my comment will be useful and maybe help you fix this issue.\n. ",
    "mikeee324": "I had to do this and came up with this:  \n```\npublic static Timepoint[] generateTimepoints(int minutesInterval) {\n    List timepoints = new ArrayList<>();\nfor (int minute = 0; minute<=1440; minute += minutesInterval) {\n    int currentHour = minute / 60;\n    int currentMinute = minute - (currentHour > 0 ? (currentHour * 60) : 0);\n    if (currentHour == 24)\n        continue;\n    timepoints.add(new Timepoint(currentHour, currentMinute));\n}\nreturn timepoints.toArray(new Timepoint[timepoints.size()]);\n\n}\n```\nIt's probably not the best way of doing it, but it does what I need.\nTo use it just do:\ntimePicker.setSelectableTimes(generateTimepoints(5)); // 5 Min interval\ntimePicker.setSelectableTimes(generateTimepoints(10)); // 10 Min interval\ntimePicker.setSelectableTimes(generateTimepoints(15));  // 15 Min interval\nI've tried it with 5 and 15 minute intervals and it just greys out the ones inbetween.\n. ",
    "AamirAbro": "@mikeee324 thanks,\nyah there does not seems to be any other way :( I ended up doing something like this with minTime checks.\n. ",
    "amineghabi": "me too I have problem in my my fragment !! how to solve it ?\n. that's not proffesionnal , try to fix the problem !! why you close this issue ?\n. ",
    "ismdcf": "Having the same problem, Why is the issue closed without resolving it\n. ",
    "dalwadi2": "Okay, no problem .\nI changed picker because I had urgent requirement so.\nyou can stay on this issue .\n@wdullaer please help to solve this issue ASAP .\n. @amineghabi @ismdcf when you get answer close this issue or tell to close !\n. ",
    "putraxor": "You have to change your code to:\nDatePickerDialog dpd = DatePickerDialog.newInstance(\n                ACTIVITY_OR_FRAGMENT_THAT_IMPLEMENTS_DatePickerDialog.OnDateSetListener,\n                now.get(Calendar.YEAR),\n                now.get(Calendar.MONTH),\n                now.get(Calendar.DAY_OF_MONTH)\n        );\n. ",
    "ajaygolu94": "Try this code, it is worked for me...  \n```\n                    Calendar now = Calendar.getInstance();\n                    DatePickerDialog dpd = DatePickerDialog.newInstance(\n                            new DatePickerDialog.OnDateSetListener() {\n                                @Override\n                                public void onDateSet(DatePickerDialog view, int year, int monthOfYear, int                               dayOfMonth) {\n                            }\n                        },\n                        now.get(Calendar.YEAR),\n                        now.get(Calendar.MONTH),\n                        now.get(Calendar.DAY_OF_MONTH)\n                );\n\n                /* Convert you context to an activity to get Fragment Manager */\n\n                try {\n                    final Activity activity = (Activity) context;\n                    dpd.show(activity.getFragmentManager(), \"Datepickerdialog\");\n                }\n                catch (Exception e)\n                {\n                    Toast.makeText(con, \"\"+e.toString(), Toast.LENGTH_LONG).show();\n                }\n\n```\n. ",
    "samk17cmutpm": "You can directly call\ngetFragmentManager() \nto get the fragment manager.\nor\nIn your fragment,\nCreate field :\nprivate FragmentActivity myContext;\noverride onAttach method of your fragment :\n@Override \npublic void onAttach(Activity activity) {\n    myContext=(FragmentActivity) activity;\n    super.onAttach(activity);\n} \nWhen you need to get Support fragment manager call :\nFragmentManager fragManager = myContext.getSupportFragmentManager(); //If using fragments from support v4\nor\nFragmentManager fragManager = myContext.getFragmentManager();\nhttp://stackoverflow.com/questions/20237531/how-can-i-access-getsupportfragmentmanager-in-a-fragment\n. ",
    "SilentThunder89": "dpd.show(getActivity().getFragmentManager(), \"tag\");\nworks for me\nto reproduce have your fragment class import android.support.v4.app.Fragment instead of android.app.Fragment. ",
    "nevermoresss": "i think that if someone like me  wants to clear a task's  duedate than  he needs to add a clear button. actually, the button is  gone  if  you don't set the clearListener. waiting  for your reply \uff1a\uff09\n. ok,thanks for your advice\n. ",
    "denversc": "FYI, I just documented a slightly hacky, but elegant and fully functional, way to add a \"Clear\" button into DatePickerDialog in issue #183\n. FWIW, here is a way that you can add a \"Clear\" button (or any other button for that matter) into DatePickerDialog using version 2.2.0 of MaterialDateTimePicker.\nClearableDatePickerDialog.java:\n``` java\npublic class ClearableDatePickerDialog extends DatePickerDialog {\nprivate OnDateClearedListener mOnDateClearedListener;\n\n@Override\npublic View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle state) {\n    View view = super.onCreateView(inflater, container, state);\n    LinearLayout buttonContainer = (LinearLayout) view.findViewById(\n        com.wdullaer.materialdatetimepicker.R.id.done_background);\n    View clearButton = inflater.inflate(R.layout.date_picker_dialog_clear_button,\n        buttonContainer, false);\n    clearButton.setOnClickListener(new ClearClickListener());\n    buttonContainer.addView(clearButton, 0);\n\n    return view;\n}\n\npublic void setOnDateClearedListener(OnDateClearedListener listener) {\n    mOnDateClearedListener = listener;\n}\n\npublic OnDateClearedListener getOnDateClearedListener() {\n    return mOnDateClearedListener;\n}\n\npublic interface OnDateClearedListener {\n\n    /**\n     * @param view The view associated with this listener.\n     */\n    void onDateCleared(ClearableDatePickerDialog view);\n\n}\n\nprivate class ClearClickListener implements View.OnClickListener {\n\n    @Override\n    public void onClick(View view) {\n        tryVibrate();\n\n        OnDateClearedListener listener = getOnDateClearedListener();\n        if (listener != null) {\n            listener.onDateCleared(ClearableDatePickerDialog.this);\n        }\n\n        dismiss();\n    }\n\n}\n\n}\n```\ndate_picker_dialog_clear_button.xml:\n``` xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\nThis button is based on\nhttps://github.com/wdullaer/MaterialDateTimePicker/blob/master/library/src/main/res/layout/mdtp_done_button.xml\n\n\n```\nScreenshot of DatePickerDialog with \"Clear\" button:\n\n. ",
    "Anupriya25": "@denversc can you please tell how to then use ClearableDatePickerDialog to create a dialog.\nDatePickerDialog dpd = DatePickerDialog.newInstance(\n  MainActivity.this,\n  now.get(Calendar.YEAR),\n  now.get(Calendar.MONTH),\n  now.get(Calendar.DAY_OF_MONTH)\n);\ninstead of datepickerdialog. ",
    "evalincius": "Thank you, great job by the way, I really like your library, it's easy to integrate, it's robust and looks good on all screen sizes I have tried.\n. ",
    "MerliEsc": "I redifine my fonts in some styles (Textview and TextView_Title) but not in main theme. If you need more information advice me. Thanks in advance!\n. Problem solved, thanks a lot!\n. ",
    "kombadzomba": "Can not survive orientation change. Will send another pull request. Closing this one.\n. Ok, no problem. Thanks for reply. Can you specify what issues may occur\nsince we plan to use it without header.\nHeader is fine but we like it more without it - it's minimalistic, not\noverwhelming the user by repeating information.\nOn Feb 14, 2016 11:21 AM, \"wdullaer\" notifications@github.com wrote:\n\nI've thought about this and I don't think I'll merge this.\nHiding the header and title makes it look like a calendar widget, which\nmeans people will start to use it as such.\nThis will in turn lead to a whole lot of issues because it wasn't designed\nto be used that way.\nFor these kind of changes it's probably best just to fork the library.\nNothing wrong with that.\nPlease don't take it the wrong way. I really appreciate your effort and\ncontribution, and in general deciding what to support is a very grey zone.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/wdullaer/MaterialDateTimePicker/pull/161#issuecomment-183865614\n.\n. Ok, no problem at all. Thanks for your time and for sharing your code with\ncommunity!\nOn Feb 14, 2016 9:53 PM, \"wdullaer\" notifications@github.com wrote:\nI don't think you will have any issues in your use case.\nAs long as you use it as a datepicker it should all just be fine. The\nchanges you've done are fairly minimal, so you should have no issues\nkeeping them in sync with this library.\nI'm reluctant to merge it in, because I don't want to have to support the\nfeature. I'm thinking someone will start using it as part of a calendar app\nand come up with all sorts of feature requests and issues because I'm not\ntesting for that use case.\nEveryone is free, and even encouraged, to fork the code and use it for\nwhatever they like, but my time to work on this is limited so I like to\nkeep the use cases I support fairly focussed.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/wdullaer/MaterialDateTimePicker/pull/161#issuecomment-183974878\n.\n. \n",
    "MustafaAdil": "Here is the attached screenshot:\n\nHow to hide the outer circle of hours(13,14,15 etc) ?\n. ",
    "HyruleMaster5": "I get your point, the thing is, I can select months for a big range of years and having dropdown for that with my UI doesn't work well.. I'll find something else, thanks.\n. ",
    "Haraprasad": "Thank You,\nActually this error comes when I extends android.support.v4.app.Fragment\n. ",
    "udand": "hm. I tested on 4 inch screen doesn't see any clipping. will check out more thanks.\n. ",
    "thejonamreddy": "But, why does this work in the DatePicker?\n. Thanks wdullaer. It's just for consistency. Having the DatePicker supports this and the TimePicker not supporting, I thought it was something to be fixed.\nRecreating instance each time and using the selected time for initialization. Works like a charm!\nThanks!\n. ",
    "hvsimon": "i got it \njust setMinDate \nthis is my logic mistake haha\nty : ))\n. ",
    "vincekennedy": "Version 2.2\nThe style for that activity is\n<style name=\"AppTheme\" parent=\"Theme.AppCompat.NoActionBar\">\n        <!-- Customize your theme here. -->\n        <item name=\"colorPrimary\">@color/colorPrimary</item>\n        <item name=\"colorPrimaryDark\">@color/colorPrimaryDark</item>\n        <item name=\"android:dropDownListViewStyle\">@style/SpinnerStyle</item>\n    </style>\nAnd the colors\n<color name=\"colorPrimary\">#46A4C3</color>\n    <color name=\"colorPrimaryDark\">#206980</color>\n    <color name=\"colorAccent\">#FF4081</color>\nMaybe one of those is causing an issue.\n. I created this simple project https://github.com/vincekennedy/datepickertest with the issue.\nIt appears to happen no matter what the base theme is.\n. Thanks for the help with this. I never thought about the Alpha bits. \n. ",
    "vikramkakkar": "The issue here is that you are not supplying the alpha bits. Check this:\n```\n// Accent color, as you're supplying\nint colorAsItIs = 0x46A4C3;\nLog.i(\"TAG\", \"Color as it is: \" + colorAsItIs);                                     // 4629699\n// Accent color, with alpha bits set\nint colorWithAlphaSet = 0xFF46A4C3;\nLog.i(\"TAG\", \"Color with alpha bits set: \" + colorWithAlphaSet);        //-12147517\n// Accent color, when parsed\nint parsedColor = Color.parseColor(\"#46A4C3\");\nLog.i(\"TAG\", \"Parsed color value is: \" + parsedColor);                      // -12147517\n```\nSo, either use Color.parseColor(String), or supply the FF alpha bits.\nNote: The color shows up in mDayOfWeekView since the color is preprocessed by Utils.darkenColor(int) ==> Color.colorToHSV(...) extracts RGB components.\n. @wdullaer Not a problem. I'm happy to help.\n@vanniktech You're welcome :)\n. > Given that the method just takes an int which in android can be any number of things, I'm thinking that the colors are not supplied correctly.\nYou can use annotations to make the argument(s) values quite specific:\n/**\n * Set the accent color of this dialog\n * @param accentColor the accent color you want\n */\npublic void setAccentColor(@ColorInt accentColor) {\n    mAccentColor = accentColor;\n}\nFor most, this confusion will be resolved by looking at the source code, for example, this line:\n// confirms that mAccentColor is @ColorInt\nview.findViewById(R.id.day_picker_selected_date_layout).setBackgroundColor(mAccentColor);\nBut, for the rest (dare I say, uninitiated), annotations help clear things up.\n. @Vojtas87 Consider posting a screenshot, and the values set by you. \n170 has been resolved. But, I doubt that you're having the same issue (awesome, if you are :) ).\n. ",
    "PrafullaKumarSahu": "thank you so much @wdullaer , now I am getting method does not override method from its super class for onDateSet and onTimeSet methods, I am trying to solve this, but still if you are reading this please reply . \n\nif I will try to extract any of those option I am getting error \"Directory ... already contains class Main Activity\"\n. I implemented OnDateSetListener and OnTimeSetListener interfaces on MainActivity\npublic class MainActivity extends AppCompatActivity implements\n        DatePickerDialog.OnDateSetListener, TimePickerDialog.OnTimeSetListener\non MainActivity class, the error gone . thank you :)\n. @wdullaer  thank you , I had learned java before 3 years and never worked, I started learning it again from a week now, if you can suggest some resources that will be great : thank you for your time +1:\n. I solved it using\n```\n        dateOfPayment.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                DatePickerDialog dpd = DatePickerDialog.newInstance(\n                        MainActivity.this,\n                        year_x,\n                        month_x,\n                        day_x\n            );\n            datePickerInput = v.getId();\n            dpd.show(getFragmentManager(), \"DatePickerDialog\");\n        }\n\n    });\n\n```\nand same for the second one\n```\ncheckDate.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                DatePickerDialog dpd2 = DatePickerDialog.newInstance(\n                        MainActivity.this,\n                        year_x,\n                        month_x,\n                        day_x\n            );\n            datePickerInput = v.getId();\n            dpd2.show(getFragmentManager(), \"DatePickerDialog\");\n        }\n\n    });\n\n```\nand then\n```\n    @Override\n    public void onDateSet (DatePickerDialog view,int year, int monthOfYear, int dayOfMonth){\n    String date = dayOfMonth + \"/\" + (monthOfYear + 1) + \"/\" + year;\n\n    switch( datePickerInput ) {\n        case R.id.check_date:\n            checkDate.setText(date);\n            break;\n        case R.id.payment_date:\n            dateOfPayment.setText(date);\n            break;\n        default:\n            break;\n    }\n}\n\n}\n```\nIf there is any better idea please let me know.\n. Adding \nandroid:focusableInTouchMode=\"false\"\nto my EditText view solved my problem.\n. :+1: \n. Thank you @wdullaer  for replying me every time , I am facing problem.\nAdding \nandroid:focusableInTouchMode=\"false\"\nto my EditText view solved my problem.\nYou can cast it as duplicate of that.\n. ",
    "Chozzle": "Hi,\u00a0I've attached a video. https://drive.google.com/file/d/0Bz1RCbiDchq6LTRVbjlXTDZydkU/view?usp=sharing \nWhen I rest my finer in the same place for a moment before moving it, it works. However if I touch with a swiping action, the top clock doesn't update as I move my finger (only once I release my finger) and there's no vibration.\u00a0Carson\u00a0\n. I tried it on both my phone and emulator. Can you reproduce it too? My app is very simple so I don't think it would be anything specific to my app.\n. ",
    "KuldipsinhParmar": "Thanks @PrafullaKumarSahu . ",
    "Jo3101": "Thansks @PrafullaKumarSahu . ",
    "formakidov": "I know, but library can't draw header and circle in two different colors at the same time\n. Ok. Sorry for bothering you:)\n. ",
    "Lecraver": "Well, i did it but it doesn't works. May be because i try to use both in the same fragment, i'm giving up. \nThanks\n. ",
    "alokomkar": "Its not just an issue with 12:00, any slot which is available from 12 to 1 wouldn't render 12 as selected in time picker. This is the screen shot : \n\nTime slots from Log : \n[10:00, 10:20, 10:40, 11:00, 11:20, 11:40, 12:00, 12:20, 12:40, 14:00, 14:20, 14:40, 15:00, 15:20, 15:40, 16:00, 16:20, 16:40, 17:00, 17:20, 17:40, 18:00, 18:20, 18:40, 19:00, 19:20, 19:40, 20:00, 20:20, 20:40]\n. ",
    "aldefy": "To add : The setMinTime and setSelectable times , when used - the TPD does not show 12 as highlighted white (selectable color) , one can select 12 and its minute slots but not see the 12 as highlighted as seen above.\n. ",
    "Johnsonmaung": "me too. My custom color is also pale blue..\n. \nCorrect or not.. I got with this. =D\ndpd.setAccentColor(ContextCompat.getColor(mActivity, R.color.primary));\n. ",
    "Vojtas87": "I tried some other ways and this (deprecated) representation works for me:\ndpd.setAccentColor(getResources().getColor(R.color.mdtp_accent_color));\n. \nIt appears on Samsung Galaxy S7. January 2017 is at my Czech locale. Sorry for partial informations. At English locale it is for example December 2017. See an attachement, please.. ",
    "ferdy182": "A better solution would be to rely only on selectableTimes and remove those out of the minTime and maxTime from the list instead of using comparators. That would allow enabling specific times out of range, specially the case when someone wants to select 12am as midnight instead of morning (rare corner case but apparently some people want to be able to do that)\n. ",
    "anepsha": "Hi, thank you for your reply. I have a clickable text field, when user clicks on it date picker dialog shows up. Then user selects a date and date value sets to that textview. The problem is that I don't have a lot of space in that textview and clear button looks terrible there. Is there a way to add an extra button to datepicker dialog such as \"Clear\"?\n. ",
    "androidneha": "Is there any possiblity to remove all button..... just by clicking on date...Date will be set to your textview.\nplease send me the code 4 that . \nThanx in Advance....!!!!\n. ",
    "Meggi07": "in datepickerdialog show me this type error java.lang.RuntimeException: Font asset not found fonts/Roboto-Medium.ttf sometime please give me solution how to fix that?. How to create new issue?. I am putting latest version but it not support design24.4.0 gradle  what I\nam doing?\nOn 04-Nov-2017 12:50 am, \"wdullaer\" notifications@github.com wrote:\nYou should first start with using the latest version.\nIt would also useful if you could post a complete stacktrace.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/wdullaer/MaterialDateTimePicker/issues/420#issuecomment-341801756,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ARo2m4l6VqhxPUCePkgn6gJxKtBNCy_uks5sy2dqgaJpZM4QRHPE\n.\n. I am adding latest version then show me error like this \nError:(15, 21) No resource found that matches the given name: attr 'android:keyboardNavigationCluster'.\nafter solve this error again same error occurs \nFATAL EXCEPTION:Process: com.anandniketan.skool360teacher, PID: 6524\n java.lang.RuntimeException: Font asset not found fonts/Roboto-Medium.ttf\nat android.graphics.Typeface.createFromAsset(Typeface.java:297)\nat com.wdullaer.materialdatetimepicker.TypefaceHelper.get(TypefaceHelper.java:31)\n at com.wdullaer.materialdatetimepicker.date.DatePickerDialog.onCreateView(DatePickerDialog.java:371)\nat android.app.Fragment.performCreateView(Fragment.java:2069)\n at android.app.FragmentManagerImpl.moveToState(FragmentManager.java:899)\nat android.app.FragmentManagerImpl.moveToState(FragmentManager.java:1072)\nat android.app.BackStackRecord.run(BackStackRecord.java:852)\nat android.app.FragmentManagerImpl.execPendingActions(FragmentManager.java:1478)\nat android.app.FragmentManagerImpl$1.run(FragmentManager.java:452)\nat android.os.Handler.handleCallback(Handler.java:815)\nat android.os.Handler.dispatchMessage(Handler.java:104)\nat android.os.Looper.loop(Looper.java:214)\nat android.app.ActivityThread.main(ActivityThread.java:6102)\nat java.lang.reflect.Method.invoke(Native Method)\nat java.lang.reflect.Method.invoke(Method.java:372)\nat com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:1028)\nat com.android.internal.os.ZygoteInit.main(ZygoteInit.java:823). Thank you so much but problem solve another way\nOn Tue, Nov 7, 2017 at 7:29 PM, wdullaer notifications@github.com wrote:\n\nAre you using gradle / android studio to build your app?\nThis is necessary for the assets of a library to be packaged into your app\n(otherwise you'll have to include the font in your application assets\nrather than relying on the version shipped with this library)\nhttps://stackoverflow.com/questions/5583608/difference-\nbetween-res-and-assets-directories\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/wdullaer/MaterialDateTimePicker/issues/420#issuecomment-342490118,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ARo2mz_tgMr1S0Nd9bRaYHWKdaTLTOOJks5s0GJJgaJpZM4QRHPE\n.\n\n\n-- \nGood Morning mam/sir,\n                                        Thanks&Regards,\n\n                                          Megha Shah\n\n                                         (8672952197)\n\n. you can check date format if you set date format like-15-11-2017 then change to 15/11/2017 and try . you can check date format if you set date format like-15-11-2017 then\nchange to 15/11/2017 and try\nOn Wed, Nov 15, 2017 at 4:35 PM, Luca notifications@github.com wrote:\n\nhey @Meggi07 https://github.com/meggi07 how did you solved the problem?\nI am using lastest version of everything and is still crashing\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/wdullaer/MaterialDateTimePicker/issues/420#issuecomment-344560066,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ARo2m1oAj9f2vNoA3Z8q4vdmCY3AD7dyks5s2sWJgaJpZM4QRHPE\n.\n\n\n-- \nGood Morning mam/sir,\n                                        Thanks&Regards,\n\n                                          Megha Shah\n\n                                         (8672952197)\n\n. ",
    "Andecy": "@wdullaer thank you,I find Calendar.DATE is matching your \"dayOfMonth\" but Calendar.DAY_OF_MONTH\n. @wdullaer It's me again.when onDateSet be called,I can get the DatePickerDialog from the first parma,so it's easy to make which tag is mine DatePickerDialog,but in onTimeSet,how to know which TimePickerDialog that called the method?\n. ",
    "jay-parapps": "[(http://postimg.org/image/h3owp2ao9/)]\n240 x 320 pixels (~121 ppi pixel density)\nWhat about this question: is there is a way to control the size by myself? \n. I see. Well if only there was a way to set the size of the big day font at the top, that by itself would free up a big chunck of space (assuming the container height definition is \"wrap_content\"). How would I go about implementing it myself?\n. ",
    "Panthaaaa": "Just use setMaxDate(Calendar calendar).\n. ",
    "KoenPu": "I resolved, because my project used support v4 22+, v7 22+, This project is used v7:23.1.1, So I modify my project v4 23+, v7 23+, It can be used\n. ",
    "youw3": "java\nbtn_begin_time.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                Calendar now = Calendar.getInstance();\n                begin_tpd = TimePickerDialog.newInstance(CreatItemActivity.this,now.get(Calendar.HOUR_OF_DAY),now.get(Calendar.MINUTE),false);\n                begin_tpd.show(getFragmentManager(), \"Timepickerdialog\");\n                begin_tpd.setOnTimeSetListener(new TimePickerDialog.OnTimeSetListener() {\n                    @Override\n                    public void onTimeSet(RadialPickerLayout view, int hourOfDay, int minute, int second) {\n                               begin_time_tv.setText(s+\"/\"+hourOfDay+\"/\"+minute+\"/\"+second);               \n                    }\n                });\n            }\n        });\n. ",
    "layerlre": "I have the same problem in Huawei P9.\nYear is not appear.\n. I decrease text size for date. Now year is appear.\n. ",
    "JandyCindy": "okay, I understand.\nThen I will try to find other way by my self.\nThank you for the answer.\n. ",
    "szhupeng": "thank you\n. ",
    "khawars": "@bapu-nawaz I am also facing this issue. How did you fix that?. ",
    "wendeljardel": "I solved \nfinal Calendar minDate = Calendar.getInstance(TimeZone.getDefault());\ndpd.setMinDate(minDate);\n. ",
    "NeoLSN": "If you use a DialogFragment in activity layout, it will jump out a dialog after activity created.\nWhat I want is to use a View class in the layout.\n. ",
    "chylek": "I have successfully embedded the TimePickerDialog into Activity, just like it says in DialogFragment documentation.\nIn the Activity's layout there is a view with id embedded. Only the OnTimeSetListener is useless, you have to check the time manually with getSelectedTime()\nIs this not the behaviour you wanted?\nFragmentTransaction ft = getFragmentManager().beginTransaction();\nDialogFragment newFragment = TimePickerDialog.newInstance(null, 0, 0, 0, true);\nft.add(R.id.embedded, newFragment);\nft.commit();\n\n. ",
    "andriodteam": "how can i use the hourly selected in time?\n. how can i pull it please can u tell me how to do it\n. Permission denied (publickey). its giving me this issue\n. hello sir, it giving this error fatal: Not a git repository (or any of the parent directories): .git\n. ",
    "jdegroot": "@andriodteam call setHourOnlyPicker(true) on your TimePickerDialog, then it won't auto advance to minute selection. (note: this is not merged/published yet, so you'll have to pull from my fork)\n. @andriodteam \n- git clone git@github.com:jdegroot/MaterialDateTimePicker.git\n- git checkout feature_hour_only\n- Build the library with Gradle and move the aar your project\n. @andriodteam try https (https://github.com/jdegroot/MaterialDateTimePicker.git)\n. @andriodteam What did you do exactly? You should just replace the url after clone with the https one:\ngit clone https://github.com/jdegroot/MaterialDateTimePicker.git\nThen navigate to the folder where it was cloned and checkout the feature_hour_only branch. You might want to consider doing some git tutorials, Github has a guides page\n. ",
    "UdayKumarNayak": "Thanks for replay.\n. ",
    "MahdiPishguy": "@wdullaer Thanks, but whats dependency? i'm using compile 'com.borax12.materialdaterangepicker:library:1.6'\n. ",
    "asad1492": "Oh my bad. I was using DatePickerDialog of another library. \n. ",
    "IomarSantos": "only day of the week dialog\n. ",
    "reisub": "Hi @wdullaer,\nthanks for the great work on the lib!\nI just wanted to let you know that I forked the lib because I need support for fragments from support lib:\nhttps://github.com/infinum/MaterialDateTimePicker\nI don't plan to add any new features, but I do plan to keep the fork up-to-date with your changes. It's also published to jcenter.. @wdullaer Hi again! Just wanted to point out that now seems like a good time to revisit the decision to not support fragments from the support lib.\nPlease take a look at this answer from a google engineer explaining that platform fragments will be deprecated in the next version of Android:\nhttps://github.com/android/android-ktx/pull/161#issuecomment-363270555. ",
    "JeffreyCA": "Alright, thanks!\n. It's not updated on Maven Central yet, it's still v2.4.0. Will you be updating it soon?\n. ",
    "MaximilianKeppeler": "Okay, thank you for your reply. In quite new in all this things here. I will check if overriding does work as I want. Otherwise I will fork it, if I'm allowed to do that. Thanks for your help.\n. ",
    "PrabhatPandey": "Ignore this. I solved it. \nhttp://stackoverflow.com/questions/34658871/how-to-set-time-to-materialdatetimepicker-with-espresso/39290303#39290303\n. ",
    "cyrilnoah1": "Is there any possibility to only allow Month and Year input, by hiding the DatePicker?\n. Sorry I asked for that feature. I knew the purpose of the library, but, I badly needed a Month-Year picker. \nAnyway, Thank you for replying. :) \n. ",
    "egemendurmus": "I found cause it is crashed with com.facebook.android:facebook-android-sdk:4.15.0 why give this error ?\n. ",
    "Senth": "This was tested on emulators. I don't have access to a phone with Nougat, but I noticed the same thing on Marshmallow when I tested.\nAlso I noticed that the first one isn't from Kitkat but Jelly Beans (API 16), I got them mixed up somehow.\n. ",
    "Neil1484": "i am just want to current date also disable. no one can select today date\n. ",
    "anastr": "MonthView.java/#getMonthAndYearString()\npattern = \"MM yyyy\" ... \nthis should work.\nthanks.\n. ",
    "raviteja83": "can you provide a listener when user selects a date other than dateselectedlistener which is currently called on dialog ok button?\n. ",
    "TormundsMember": "Well, I feel stupid now. Sorry for bothering\n. ",
    "Lazza": "I see. Then it is not clear to me what setStartTime is supposed to do. Is it for using it before displaying the dialog?\nAnyway thank you for your reply, I have changed my app to re-create dialogs each time.\n. ",
    "anaszakariyah": "Another example would be after I select the one of the selectabledays. How can I open new dialog with the date that just selected? I get the date from OnDateSet Listener but I can't seem to recover the dialog with selected date. I am using the above code.\n. I am creating new Instance every time I make the dialog. It works fine without selectabledays and it shows the saved date, But using the selectableDays wont do. It just select the very first selectableday available.\n. Hi. I finally solved this issue. Sorry for long reply because I've been working on project (including this library too *big thanks to you wdullaer :) ) almost non stop and got no time to check github.\nI dont know how the rounding of selectableDays works. But I've got no issues if I use the exact date (minimal in days, without the hours, minutes or so). Before I got the initial calendar from new Date(), so obviously it will have the current hours, minutes, etc and thats how the date wont have the exact match. So I use Simple Date format for this issue in example like dd/mm/yyyy then I get the calendar from that and voila the selectableDays work and it can save the state too.\nThank you for this wonderful library wdullaer :)\n. ",
    "xiaogu-space": "but I can't find how to pick second\n. OK \uff0cI know thanks\n. ",
    "Shayne3000": "What I meant was currently we have onDateSet call back which gets called when the user clicks \"OK\". What I wanted to ask was if we could attach our own listeners to the buttons such as Android has in the current AlertDialog specification i.e. builder.setPositiveButton(positiveText,\n                        new DialogInterface.OnClickListener() {\n                            @Override\n                            public void onClick(DialogInterface dialog, int which) {\n}\n                    });\nIt seems as the positive and negavtive button clicks are locked to specific callbacks and not customisable. Hence the question.\n. ",
    "MichaelJokAr": "why dismiss also go to this method 'setOnCancelListener'. so, how do I set the default choose date or time? thanks!. thanks!. ",
    "farkerhaiku": "That's covered on the FAQ section of the readme.\n. ",
    "Poonjaroen": "Thank you for informaton, and I have one question.\n- This library provide set Locale (localization such as France) or not ?\nThank you again.\n. ",
    "robotsquidward": "Understood, I had a look at the source and found where they're doing it in there and I agree.\nHas there been progress on other issues to more closely replicate the Material date/time picker styles (side scrolling, left aligned titles, horizontal view, etc.)?\n. ",
    "spartacus777": "The same error. Anyone managed to fix it?\n. ",
    "nikolleto": "Yep, I've downloaded the project and manually changed few lines in build.gradle\n. ",
    "aanchalharit": "Sorry for raising this incorrectly due to new to programming.. Actually I missed the Activity implements DatePickerDialog.OnDateSetListener part and that was causing the issue, closing this one now, thanks for quick reply.\n. ",
    "meddd": "any solution of this bug.. I  have samsung s7 with android 7.0\nyesterday I have download your master project and import to AndroidStudio,\nI send you Logcat : start when pick date, and start rotate begin from time 04-20 16:02:47.895\n04-20 16:02:43.733 11082-11082/com.wdullaer.materialdatetimepicker.sample D/ViewRootImpl@e1184d[MainActivity]: ViewPostImeInputStage processPointer 0\n04-20 16:02:43.805 11082-11082/com.wdullaer.materialdatetimepicker.sample D/ViewRootImpl@e1184d[MainActivity]: ViewPostImeInputStage processPointer 1\n04-20 16:02:43.844 11082-11082/com.wdullaer.materialdatetimepicker.sample D/AbsListView: Get MotionRecognitionManager\n04-20 16:02:43.846 11082-11082/com.wdullaer.materialdatetimepicker.sample D/MotionRecognitionManager: mSContextService = com.samsung.android.hardware.context.ISemContextService$Stub$Proxy@bbe5550\n04-20 16:02:43.848 11082-11082/com.wdullaer.materialdatetimepicker.sample D/MotionRecognitionManager: motionService = com.samsung.android.gesture.IMotionRecognitionService$Stub$Proxy@9e8e349\n04-20 16:02:43.848 11082-11082/com.wdullaer.materialdatetimepicker.sample D/MotionRecognitionManager: motionService = com.samsung.android.gesture.IMotionRecognitionService$Stub$Proxy@9e8e349\n04-20 16:02:43.850 11082-11087/com.wdullaer.materialdatetimepicker.sample I/art: Do full code cache collection, code=114KB, data=122KB\n04-20 16:02:43.853 11082-11087/com.wdullaer.materialdatetimepicker.sample I/art: After code cache collection, code=114KB, data=96KB\n04-20 16:02:43.885 11082-11082/com.wdullaer.materialdatetimepicker.sample D/InputTransport: Input channel constructed: fd=86\n04-20 16:02:43.885 11082-11082/com.wdullaer.materialdatetimepicker.sample D/ViewRootImpl@f24b281[MainActivity]: setView = DecorView@1c97f26[] touchMode=true\n04-20 16:02:43.952 11082-11103/com.wdullaer.materialdatetimepicker.sample D/mali_winsys: EGLint new_window_surface(egl_winsys_display, void, EGLSurface, EGLConfig, egl_winsys_surface, egl_color_buffer_format, EGLBoolean) returns 0x3000,  [1098x1872]-format:1\n04-20 16:02:43.966 11082-11082/com.wdullaer.materialdatetimepicker.sample D/ViewRootImpl@f24b281[MainActivity]: MSG_WINDOW_FOCUS_CHANGED 1\n04-20 16:02:43.967 11082-11082/com.wdullaer.materialdatetimepicker.sample I/InputMethodManager: [IMM] startInputInner - mService.startInputOrWindowGainedFocus\n04-20 16:02:43.970 11082-11082/com.wdullaer.materialdatetimepicker.sample D/InputTransport: Input channel constructed: fd=89\n04-20 16:02:43.970 11082-11082/com.wdullaer.materialdatetimepicker.sample D/InputTransport: Input channel destroyed: fd=84\n04-20 16:02:44.007 11082-11082/com.wdullaer.materialdatetimepicker.sample D/ViewRootImpl@f24b281[MainActivity]: MSG_RESIZED_REPORT: ci=Rect(0, 0 - 0, 0) vi=Rect(0, 0 - 0, 0) or=1\n04-20 16:02:44.082 11082-11082/com.wdullaer.materialdatetimepicker.sample D/ViewRootImpl@e1184d[MainActivity]: MSG_WINDOW_FOCUS_CHANGED 0\n04-20 16:02:47.895 11082-11082/com.wdullaer.materialdatetimepicker.sample D/AbsListView: Get MotionRecognitionManager\n04-20 16:02:47.979 11082-11103/com.wdullaer.materialdatetimepicker.sample D/mali_winsys: EGLint new_window_surface(egl_winsys_display, void*, EGLSurface, EGLConfig, egl_winsys_surface, egl_color_buffer_format, EGLBoolean) returns 0x3000,  [1908x1200]-format:1\n04-20 16:02:48.002 11082-11082/com.wdullaer.materialdatetimepicker.sample D/ViewRootImpl@f24b281[MainActivity]: dispatchDetachedFromWindow\n04-20 16:02:48.008 11082-11082/com.wdullaer.materialdatetimepicker.sample D/InputTransport: Input channel destroyed: fd=86\n04-20 16:02:48.010 11082-11082/com.wdullaer.materialdatetimepicker.sample D/ViewRootImpl@e1184d[MainActivity]: dispatchDetachedFromWindow\n04-20 16:02:48.014 11082-11082/com.wdullaer.materialdatetimepicker.sample D/InputTransport: Input channel destroyed: fd=81\n04-20 16:02:48.079 11082-11082/com.wdullaer.materialdatetimepicker.sample D/AbsListView: Get MotionRecognitionManager\n04-20 16:02:48.080 11082-11082/com.wdullaer.materialdatetimepicker.sample D/MotionRecognitionManager: mSContextService = com.samsung.android.hardware.context.ISemContextService$Stub$Proxy@4bfb6e5\n04-20 16:02:48.081 11082-11082/com.wdullaer.materialdatetimepicker.sample D/MotionRecognitionManager: motionService = com.samsung.android.gesture.IMotionRecognitionService$Stub$Proxy@978d5ba\n04-20 16:02:48.081 11082-11082/com.wdullaer.materialdatetimepicker.sample D/MotionRecognitionManager: motionService = com.samsung.android.gesture.IMotionRecognitionService$Stub$Proxy@978d5ba\n04-20 16:02:48.094 11082-11082/com.wdullaer.materialdatetimepicker.sample D/InputTransport: Input channel constructed: fd=81\n04-20 16:02:48.094 11082-11082/com.wdullaer.materialdatetimepicker.sample D/ViewRootImpl@f706212[MainActivity]: setView = DecorView@ca76de3[] touchMode=true\n04-20 16:02:48.102 11082-11082/com.wdullaer.materialdatetimepicker.sample D/InputTransport: Input channel constructed: fd=82\n04-20 16:02:48.102 11082-11082/com.wdullaer.materialdatetimepicker.sample D/ViewRootImpl@75723e0[MainActivity]: setView = DecorView@c48b699[MainActivity] touchMode=true\n04-20 16:02:48.130 11082-11103/com.wdullaer.materialdatetimepicker.sample D/mali_winsys: EGLint new_window_surface(egl_winsys_display, void, EGLSurface, EGLConfig, egl_winsys_surface, egl_color_buffer_format, EGLBoolean) returns 0x3000,  [1908x1200]-format:1\n04-20 16:02:48.151 11082-11103/com.wdullaer.materialdatetimepicker.sample D/mali_winsys: EGLint new_window_surface(egl_winsys_display, void*, EGLSurface, EGLConfig, egl_winsys_surface, egl_color_buffer_format, EGLBoolean) returns 0x3000,  [1920x1080]-format:1\n04-20 16:02:48.152 11082-11082/com.wdullaer.materialdatetimepicker.sample E/ViewRootImpl: sendUserActionEvent() mView == null\n04-20 16:02:48.153 11082-11082/com.wdullaer.materialdatetimepicker.sample D/ViewRootImpl@f706212[MainActivity]: MSG_WINDOW_FOCUS_CHANGED 1\n04-20 16:02:48.153 11082-11082/com.wdullaer.materialdatetimepicker.sample I/InputMethodManager: [IMM] startInputInner - mService.startInputOrWindowGainedFocus\n04-20 16:02:48.154 11082-11082/com.wdullaer.materialdatetimepicker.sample D/InputTransport: Input channel constructed: fd=85\n04-20 16:02:48.154 11082-11082/com.wdullaer.materialdatetimepicker.sample D/InputTransport: Input channel destroyed: fd=89\n04-20 16:02:48.185 11082-11082/com.wdullaer.materialdatetimepicker.sample D/ViewRootImpl@f706212[MainActivity]: MSG_RESIZED_REPORT: ci=Rect(0, 0 - 0, 0) vi=Rect(0, 0 - 0, 0) or=2\n04-20 16:02:48.186 11082-11082/com.wdullaer.materialdatetimepicker.sample D/ViewRootImpl@75723e0[MainActivity]: MSG_RESIZED_REPORT: ci=Rect(0, 72 - 0, 0) vi=Rect(0, 72 - 0, 0) or=2\n. 04-20 16:02:43.850 11082-11087/com.wdullaer.materialdatetimepicker.sample I/art: Do full code cache collection, code=114KB, data=122KB\n04-20 16:02:43.853 11082-11087/com.wdullaer.materialdatetimepicker.sample I/art: After code cache collection, code=114KB, data=96KB\n04-20 16:02:43.967 11082-11082/com.wdullaer.materialdatetimepicker.sample I/InputMethodManager: [IMM] startInputInner - mService.startInputOrWindowGainedFocus\n04-20 16:02:48.152 11082-11082/com.wdullaer.materialdatetimepicker.sample E/ViewRootImpl: sendUserActionEvent() mView == null\n04-20 16:02:48.153 11082-11082/com.wdullaer.materialdatetimepicker.sample I/InputMethodManager: [IMM] startInputInner - mService.startInputOrWindowGainedFocus\n04-20 16:02:52.992 11082-11082/com.wdullaer.materialdatetimepicker.sample W/IInputConnectionWrapper: reportFullscreenMode on inexistent InputConnection\nand \n04-20 16:02:48.152 11082-11082/com.wdullaer.materialdatetimepicker.sample E/ViewRootImpl: sendUserActionEvent() mView == null\n04-20 16:02:52.992 11082-11082/com.wdullaer.materialdatetimepicker.sample W/IInputConnectionWrapper: reportFullscreenMode on inexistent InputConnection\nand ERROR:\n04-20 16:02:48.152 11082-11082/com.wdullaer.materialdatetimepicker.sample E/ViewRootImpl: sendUserActionEvent() mView == null\n. when in sample (without any change, i get today and try) of  https://github.com/borax12/MaterialDateRangePicker add in build.gradle compile 'com.wdullaer:materialdatetimepicker:3.0.0', there is compile error describe in first post.\nSO it is error of borax12 library or error in MaterialDateTimePicker ?\n. ",
    "SkyGanfor": "Has there been any solution to this bug? I'm still having this issue as of version 4.1.0.. Looks like this is only happening on my Moto X Pure test device. Any other device I try works just fine.. \n\n\n. Here are some screenshots of the states. I can also confirm this does NOT happen with time picker.. ",
    "kuba14": "Update: This issue is caused by title. In case I remove it, buttons are displayed correctly.\n\n. Yes, this version fixed the problem. Thanks.\n. Unfortunately, the problem still exists, also in 3.1.2. Hours are missing. I used VERSION_2 as you said.\n\n. ",
    "marekfri": "Hi wdullaer, this fix isn't working 100%. Time picker is displayed well on portrait orientation, but there is an issue when I switch to landscape mode. Title is displayed well, however hours are missing.\n\n. ",
    "beingentangled": "Pls Implement the Fragment with the Date listener and override the OnDateSet\n@Override\n    public void onDateSet (DatePickerDialog view, int year, int monthOfYear, int dayOfMonth) {\n}\n. ",
    "veeranath": "yes i had tried that way but it giving me the same error \nCalendar now = Calendar.getInstance();\n        DatePickerDialog dpd = DatePickerDialog.newInstance(Doc_Amount_Billed.this,\n                now.get(Calendar.YEAR),\n                now.get(Calendar.MONTH),\n                now.get(Calendar.DAY_OF_MONTH)\n        );\n        dpd.setOnDateSetListener(this);\n        dpd.show(getFragmentManager(), \"startbill\");\n. i havnt got the solution for so i had used the interfaces i had done it\n. ",
    "alhazmy13": "fixed with pull request number #262 \n. ",
    "zohabAli": "Pass \"true\" in last argument while creating newInstance. Just like this\nTimePickerDialog time = TimePickerDialog.newInstance(yourListener,hour,minute,second,true);\nLast argument is actually \"is24HourMode\"......... and if you pass true then time will be in 24 Hour mode and if you pass false then time will be in 12 hour mode.\n. ",
    "sunil-singh-chaudhary": "ya i already did this but i want only 24 hour format not 12 hour format\nwith it\nOn Tue, Nov 1, 2016 at 7:14 PM, wdullaer notifications@github.com wrote:\n\nClosed #263\nhttps://github.com/wdullaer/MaterialDateTimePicker/issues/263.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/wdullaer/MaterialDateTimePicker/issues/263#event-843360074,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AJuPK2QU4Wh5qFvhmNY78m3VI5G94w5dks5q50IggaJpZM4KiQ9E\n.\n\n\nPlease consider environment before printing this email !\nThanks and Regards :\nSunil Singh\nSenior Android Developer\nDroidshift IT solution\nPatparganj Industrial Area\n+91 8882091501\n. ",
    "azaabudeen": "@wdullaer  can you provide a sample code?\n. ",
    "ngThu": "me too :(\n. ",
    "omarzl": "That sounds logic.\nI made a little more of debug and I tell you whats my problem.\nI used your library for an app in english and mexican spanish, and in the simulator and my physical device it shows correctly an \"M\" for wednesday.\nBut in some devices it shows an \"X\" for wednesday, and I though that it was because maybe the device doesn't have the locale \"es_MX\" as I pointed up in my first comment.\nI tested in a \"Moto G\" and it shows correctly, then I get a \"Samsung Galaxy Note 2\" and in that device it shows wrong, I checked and the Build.VERSION.SDK_INT is 22 (Lollipop) so it means it doesn\u00b4t fall in the code:\nif (locale.getLanguage().equals(\"es\") && day.get(Calendar.DAY_OF_WEEK) == Calendar.WEDNESDAY)\n                dayLabel = \"X\";\nSo my conclusion was that the native format \"EEEEE\" was giving me the \"X\" in this part of the code:\nreturn new SimpleDateFormat(\"EEEEE\", locale).format(day.getTime());\nWhat I did is to log the locales and print the initial of the day using the format \"EEEEE\" and I send you the screenshots.\n\n\nIt results that indeed the \"Samsung Galaxy Note 2\" has the locale \"es_MX\" but for any variations of spanish it will always use an \"X\" as you can see in the log.\nMeanwhile the \"Moto G\" has the correct abbreviations.\nI ask some friends to test it and they found out that this also occurs in a \"LG K10\", but the problem is only in some devices, most of them shows correctly and none of them were rooted.\nSo I think that the solution could be to override the abbreviations to force that the day abbreviation shows correctly for wednesday in locale \"es_MX\".\nWhat do you think?\nI dont get why some devices give me the \"X\" but it ocurrs /:\n. I thought it was because of the API version < 18, but the error happens in a device with API version 22 (Lollipop), the error is not there, the native format \"EEEEE\" of the locale is what gives me wrong the abbreviation.\n. ",
    "saibbyweb": "I used version two of material date picker, looks better. And no margin issues.. ",
    "aga8541": "```java\nCalendar now = Calendar.getInstance();\n        dateButton.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                DatePickerDialog datePickerDialog ;\n                datePickerDialog = DatePickerDialog.newInstance(LoginSuccess.this,  now.get(Calendar.YEAR),\n                        now.get(Calendar.MONTH),\n                        now.get(Calendar.DAY_OF_MONTH));\n                datePickerDialog.setThemeDark(false);\n                datePickerDialog.showYearPickerFirst(false);\n                datePickerDialog.setAccentColor(Color.parseColor(\"#009688\"));\n                datePickerDialog.setTitle(\"Select Date From DatePickerDialog\");\nCalendar cMin=Calendar.getInstance();\n                cMin.add(now.DAY_OF_MONTH, 1);\nnow.add(Calendar.DAY_OF_MONTH, 30);\nList dayslist= new LinkedList();\n                Calendar[] daysArray;\n                Calendar cAux = Calendar.getInstance();\n                while ( cAux.getTimeInMillis() <= now.getTimeInMillis())\n                {\n                    if (cAux.get(Calendar.DAY_OF_WEEK)!=1)\n                    {\n                        Calendar c = Calendar.getInstance();\n                        c.setTimeInMillis(cAux.getTimeInMillis());\n                        dayslist.add(c);\n                    }\n                    cAux.setTimeInMillis(cAux.getTimeInMillis()+(246060*1000));\n                }\n                daysArray = new Calendar[dayslist.size()];\n                for (int i = 0; i<daysArray.length;i++)\n                {\n                    daysArray[i]=dayslist.get(i);\n                }\n            datePickerDialog.setMinDate(cMin);\n            datePickerDialog.setMaxDate(now);\n            datePickerDialog.show(getFragmentManager(), \"DatePickerDialog\");\n             datePickerDialog.setSelectableDays(daysArray);\n        }\n    });\n}\n\n```. ",
    "barkov00": "I'm sorry for the delay!\nThe current title is very small. \nUsers sometimes can not find a title. Is it possible to customize the header font size?\nThanks!. ",
    "manikavi": "Could you please add this request to your library. ",
    "luna-vulpo": "Still no hope?. ",
    "hasnain-ahmad": "@wdullaer Did you add functionality of only show the both of month and year in the MaterialDateTimePicker?. ",
    "illia-kramarenko": "+1. ",
    "yaytul": "+1. ",
    "Gamaley": "+1. ",
    "denispo3": "+1. ",
    "bodyasakalo": "+1. ",
    "ykharyt": "+1. ",
    "zetokz": "+1. ",
    "omysh": "+1. ",
    "ydvornyk": "+1. ",
    "deniszink": "+1. ",
    "Sander1992": "+1. ",
    "fueg0": "+1. ",
    "mobimaks": "+1. ",
    "AndriyBilyak": "+1. ",
    "akbuffalo1": "+1. ",
    "pro100svitlo": "please, add this really useful methods!. thanks for reply!\nok, maybe you are right...\none more question: what about change current date programmatically without recreating dialog?\nfor example startDate was changed by user, and after that i need to change endDate before dialog will be open?. ",
    "ivl": "+1. ",
    "jacobminer": "@wdullaer I can still reproduce this on 3.1.1, although I couldn't on 3.1.0.\nscreencapture-1485796448231.mp4.zip\n\n. @wdullaer I cannot select 10:30 when my current selection is 11:00, despite 10:30 being a selectable candidate. I can only select 10:30 when my current selection is 9:30 or 11:30. Same issue as before.. Now it looks like if I attempt to select 10:30 with 9:00 or 11:00 selected, it auto-selects 9:30, instead of just selecting 10:30. \nThe current functionality is\n\n9:00, 9:30, 10:30, 11:00, and 11:30 are selectable times\nIf I have 30 minutes selected, I can select any available hour\nIf I have 00 minutes selected, when I touch 10:00, it will auto select 9:30, but otherwise I can select the available hours.\n\nThe functionality I'm looking for is this:\n\n9:00, 9:30, 10:30, 11:00, and 11:30 are selectable times\nI can touch 9, 10, or 11, regardless of what the minutes are set to\nThe minutes will update to the first available time upon choosing an hour\n\nscreencapture-1485911917380.mp4.zip\n. Looks good! Thanks!. ",
    "focusteck": "yeah i got that but how do i get the AM PM values after time is selected? \nIn listener onTimeSet only returns below params\nnew TimePickerDialog.OnTimeSetListener() {\n                    @Override\n                    public void onTimeSet(TimePickerDialog view, int hourOfDay, int minute, int second) {\n                        tvTimeLastInspected.setText(hourOfDay + \" : \" + minute);\n                    }\n                }. Thanks (y). ",
    "Lithium-HD": "I have done clean & rebuild several times but the error's not fixed. I don't know why. And about picking a range I will implement it on this lib. Thanks. I get the error on gradle sync process and can't go farther than that. it's ok. I imported the library and fixed the problem manually\nthanks anyway :). in this layout file: \"land\\mdtp_time_header_label.xml\", I just removed the line containing this: \" android:layout_above=@id/seconds_space\".\nedit: btw I didn't edit any codes. just removed the line from xml file. that was all. I wasn't able to test that with gradle on my current project so I made a new project and tested your library with gradle. I got no error. I don't know why but it is fixed. yes you're right. I just found out that this library (PersianMaterialDateTimePicker) is using your classes and the name of resources are exactly the same. I refactored that library to have both libraries in my project. thanks for your time. I'm still involved with the designation problems. trying to fix them.... thanks for your reply, I have already mixed your library with a PersianCalendar. the reason that the month and week labels are changed is that I have set every textView's font-Family to sans-serif. maybe that's why :) I also tried to change day numbers too but I couldn't do that. anyway I used a dirty way to get over this issue (I set the locale to \"en\" before opening the calendar, and set it back to what is was after dismissing it)\nI am in a rush, maybe I find a better way for this later.. I'd be grateful. thanks for your support (y). ",
    "Kamil-Kaminski": "I have the same issue, when I try to use this library with that: https://github.com/borax12/MaterialDateRangePicker. ",
    "roman-ku": "Also the following apps use that implementation:\n\nGoogle Keep\nGoogle Maps\nTransit. Are you referring to this? This is the v2 layout I see.\n\n. OK cool! Looking forward to using it. The Google Calendar picker is pretty slick.\nBy the way will this be v2 updated or a new v3 layout?. ",
    "nizamsp": "right and left buttons near month is missing. I have seen users trying to scroll vertical in the calendar since a wall hanging calendar should be scrolled up. at least it should have a button indicator for left and right i think.. ",
    "chrisonline": "OK thanks for the info.. ",
    "podurets-ruslan": "Nothing, but using v24 in app and don't want use v25 too. Can I exclude v25 via gradle and use v24?. Thanx). ",
    "jkmckay": "This issue still persists on version 3.2.1:\nThe user can select a non-selectable time if they touch a hour/minute that is selectable and they drag their finger to a non-selectable hour/minute.. ",
    "ruhaly": "when i load this library \n\nthis problem has emerged,this is code:\n\n\nWhen I don't use it, it's perfect,I can't understand why\n. please switch to    the branch: water-os\nand  add a snackbar in loginActivity. I gave a complete code, please update\nswitch to the branch: water-os. Can you help me see. ",
    "CollinDai": "Hi @wdullaer thanks for the detailed answer. Overwriting isOutOfRange() works great to me.\nThe 150 disabled days are not all from the same year. And they are returned from the server so it's a static list of dates. I ended up creating a HashSet to avoid iterating the list. And if it contains the customized date object then isOutOfRange() returns true. So performance is not too bad.. ",
    "carlonzo": "hi @wdullaer your suggestion about override the \"mdtp_ namespaced dimension values\" does not work for me. I have tried to create dimensions and colors with the same name it does not work. Is it supposed to work still?\nUPDATE: sorry my bad. it is working fine. may I suggest to create an attribute for every value and resolve attributes from a theme? it would make everything easier to customise. (would you be interested on a PR for that?). I'm glad you will consider it. \nas you can see the codestyles in my AndroidStudio have changed everything. . sounds great!\nalso I have other big changes I have done on this code, (like I have extracted the controller from the Dialog, so the DayPickerView is now independent, or I have profiled and optimised some parts), and I would like to discuss with you if you are interested in receiving PRs like that. I was about to send you a message. this code is not ready yet (the scrolling is not very natural). On a separate implementation I have replaced the RecyclerView with this PagerView implementation using a RecyclerView (https://github.com/lsjwzh/RecyclerViewPager/blob/master/lib/src/main/java/com/lsjwzh/widget/recyclerviewpager/RecyclerViewPager.java) an it looks much more natural and smooth. I may consider to copy the logic for the scrolling and add it here. I totally forgot to fix my PR. I have also realised that in support library 24.2.0 they have released a SnapHelper (https://rubensousa.github.io/2016/08/recyclerviewsnap) which can be helpful here. I need to find some time to fix it. sorry!. I still have problems with the formatter. May get some help on that?. @wdullaer conflicts solved. only the design library is used here. by default it uses MonthView style if it cannot find a style applied with attribute mdtp_monthViewTheme. base theme applied from the sample app. The dark theme, its an actual theme now. ",
    "nyayadhish20": "Its still crashing on API 14 (4.0.1) with same errors. Do I have to change other implementation? . I tried to update library in my android project but didn't see the committed changes in it.\nI tested with on devices of API 14 its still crash when I select the time.  . thank you very much...\nI will check it on tomorrow.\nWill let you know...\nOn Fri, Feb 17, 2017 at 3:55 PM, wdullaer notifications@github.com wrote:\n\nIf you're not seeing the committed changes, it is to be expected that it\nwill still crash.\nI will release a new version today or tomorrow, so you can pull the\nupdated version from jcenter.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/wdullaer/MaterialDateTimePicker/issues/307#issuecomment-280613295,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AP_srRfihLNh3FTKJrZf9FQ7DkvG1izyks5rdXWWgaJpZM4Lzlvp\n.\n. I am using 25.1.0 support library version. I got that crash on API 16. \n",
    "NCrouther": "I am seeing a crash with 3.1.2 when running on an Android 4.0 emulator:\n02-20 12:12:54.674 1584-1584/com.freestylelibre.app.gb.debug E/RadialTextsView: RadialTextView was not ready for animation.\n02-20 12:12:54.674 1584-1584/com.freestylelibre.app.gb.debug E/RadialSelectorView: RadialSelectorView was not ready for animation.\n02-20 12:12:54.684 1584-1584/com.freestylelibre.app.gb.debug D/AndroidRuntime: Shutting down VM\n02-20 12:12:54.694 1584-1584/com.freestylelibre.app.gb.debug W/dalvikvm: threadid=1: thread exiting with uncaught exception (group=0x409961f8)\n02-20 12:12:54.724 1584-1584/com.freestylelibre.app.gb.debug E/AndroidRuntime: FATAL EXCEPTION: main\n                                                                               java.lang.IllegalStateException: Circular dependencies cannot exist in AnimatorSet\n                                                                                   at android.animation.AnimatorSet.sortNodes(AnimatorSet.java:816)\n                                                                                   at android.animation.AnimatorSet.start(AnimatorSet.java:454)\n                                                                                   at com.wdullaer.materialdatetimepicker.time.RadialPickerLayout.setCurrentItemShowing(RadialPickerLayout.java:682)\n                                                                                   at com.wdullaer.materialdatetimepicker.time.TimePickerDialog.setCurrentItemShowing(TimePickerDialog.java:1191)\n                                                                                   at com.wdullaer.materialdatetimepicker.time.TimePickerDialog.advancePicker(TimePickerDialog.java:1010)\n                                                                                   at com.wdullaer.materialdatetimepicker.time.RadialPickerLayout.onTouch(RadialPickerLayout.java:873)\n                                                                                   at android.view.View.dispatchTouchEvent(View.java:5481)\n                                                                                   at android.view.ViewGroup.dispatchTransformedTouchEvent(ViewGroup.java:1953)\n                                                                                   at android.view.ViewGroup.dispatchTouchEvent(ViewGroup.java:1714)\n                                                                                   at android.view.ViewGroup.dispatchTransformedTouchEvent(ViewGroup.java:1959)\n                                                                                   at android.view.ViewGroup.dispatchTouchEvent(ViewGroup.java:1728)\n                                                                                   at android.view.ViewGroup.dispatchTransformedTouchEvent(ViewGroup.java:1959)\n                                                                                   at android.view.ViewGroup.dispatchTouchEvent(ViewGroup.java:1728)\n                                                                                   at android.view.ViewGroup.dispatchTransformedTouchEvent(ViewGroup.java:1959)\n                                                                                   at android.view.ViewGroup.dispatchTouchEvent(ViewGroup.java:1728)\n                                                                                   at android.view.ViewGroup.dispatchTransformedTouchEvent(ViewGroup.java:1959)\n                                                                                   at android.view.ViewGroup.dispatchTouchEvent(ViewGroup.java:1728)\n                                                                                   at android.view.ViewGroup.dispatchTransformedTouchEvent(ViewGroup.java:1959)\n                                                                                   at android.view.ViewGroup.dispatchTouchEvent(ViewGroup.java:1728)\n                                                                                   at com.android.internal.policy.impl.PhoneWindow$DecorView.superDispatchTouchEvent(PhoneWindow.java:1892)\n                                                                                   at com.android.internal.policy.impl.PhoneWindow.superDispatchTouchEvent(PhoneWindow.java:1371)\n                                                                                   at android.app.Dialog.dispatchTouchEvent(Dialog.java:725)\n                                                                                   at com.android.internal.policy.impl.PhoneWindow$DecorView.dispatchTouchEvent(PhoneWindow.java:1840)\n                                                                                   at android.view.View.dispatchPointerEvent(View.java:5662)\n                                                                                   at android.view.ViewRootImpl.deliverPointerEvent(ViewRootImpl.java:2863)\n                                                                                   at android.view.ViewRootImpl.handleMessage(ViewRootImpl.java:2442)\n                                                                                   at android.os.Handler.dispatchMessage(Handler.java:99)\n                                                                                   at android.os.Looper.loop(Looper.java:137)\n                                                                                   at android.app.ActivityThread.main(ActivityThread.java:4340)\n                                                                                   at java.lang.reflect.Method.invokeNative(Native Method)\n                                                                                   at java.lang.reflect.Method.invoke(Method.java:511)\n                                                                                   at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:784)\n                                                                                   at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:551)\n                                                                                   at dalvik.system.NativeStart.main(Native Method)\nI can launch the TimePickerDialog, but when I change the hour by tapping one of the numbers in the circle, I get the above crash.. I think this is similar to https://github.com/code-troopers/android-betterpickers/issues/96\nWhen I step through the code in RadialPickerLayout.java, anims[2] and anims[3] are null when running on the 4.0 emulator (which crashes) and are nonnull when running on a 5.1 emulator (which doesn't crash).. This fixes the crash I reported in https://github.com/wdullaer/MaterialDateTimePicker/issues/307. ",
    "ilumer": "I am sorry to add this issue , but when I add this date picker in app.build , it Will show this errors.I am sorry for my English. I should more careful on this issue.. ",
    "NickalasB": "Yes issue is present on both Nexus 5 and Pixel. After setting time- screen\nstays dim and seems as if activity is paused. Thank you for responding\nOn Fri, Feb 17, 2017, 2:11 AM wdullaer notifications@github.com wrote:\n\nCan you reproduce this on multiple devices?\nThat code looks fine to me, and I've never seen this behaviour myself.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/wdullaer/MaterialDateTimePicker/issues/311#issuecomment-280610180,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AQLuV2bCpQjBQeJfL-X-8McVRCUZiJeBks5rdXJCgaJpZM4L8LGx\n.\n. One is on Marshmallow and one is on Nougat\n\nI created a small sample app that reproduces the same issue. Again- I'm sure it's something simple but I haven't been able to figure it out so thank you.\nHere's the app\n https://@bitbucket.org/nick_bradshaw/materialdatetimepickersample.git. Thank you very much. I figured it would be something simple I was overlooking.. ",
    "ZaighamRaza": "yes\nthank you\nOn Fri, Feb 17, 2017 at 3:19 PM, wdullaer notifications@github.com wrote:\n\nDid you resolve this yourself?\n\u2014\nYou are receiving this because you modified the open/close state.\nReply to this email directly, view it on GitHub\nhttps://github.com/wdullaer/MaterialDateTimePicker/issues/315#issuecomment-280612028,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AWKMqz5Rbp_11PN0C6hAwDA5CU3-bX15ks5rdXQ8gaJpZM4MAI8X\n.\n\n\n-- \nThanks,\nRegards:\nZaigham Raza\n+923136101493\n. ",
    "devious33": "Okay thanks alot man. I'll give it a shot. ",
    "DummyCo": "Would be nice to implement this enhancement. ",
    "adolgiy": "Here is logs:\n03-03 00:19:36.410 E/EventFilterFragment: 20.03.2017 02:00\n03-03 00:19:39.713 E/EventFilterFragment: 20.03.2017 14:00. sorry, my mistake.. ",
    "Jesusrz001": "This works as intended with setDisabledDays.. ",
    "wuyingtong": "Thank you for your reply\uff01. ",
    "DigitalChip": "\nHow i can receive like this datetime format FRI.FEB 2017?\n\n```Java\n       Calendar time = Calendar.getInstance();\n       time.set(Calendar.HOUR_OF_DAY,hourOfDay);\n       time.set(Calendar.MINUTE,minute);\n       time.set(Calendar.SECOND,second);\n   SimpleDateFormat sdfDate = new SimpleDateFormat(\"E.MMM yyyy\");  // FRI.FEB 2017\n   String strDate = sdfDate.format(time.getTimeInMillis());\n\n```\nstrDate is you need format.\n. @Bekakk This is part of my project, so there is a setting of minutes. I was inattentive when answering.... ",
    "Bekakk": "@DigitalChip  in onDateSet method does not has minute or second option\nthere two lines  are not necessary.Working perfect.Thanks. \n. ",
    "yezishu": "find this bug by compatibility test \uff0cand repeat in AndroidStudio debug pattern. ",
    "bartoszbialecki": "@wdullaer I have instance variable to my datepickerdialog but I tried with such instance and without. I changed some things since I posted and actually I cannot reproduce problem so I hope it work now :).. ",
    "Surjit4048": "you can up the version to 25.3.1. ",
    "jainMadhur42": "Can yoy help me on this. Bcz i am getting this error only after adding this\ndependency in my gradle.\nOn Fri, Mar 31, 2017, 5:13 PM wdullaer notifications@github.com wrote:\nAre you sure this is linked to this library, because the resources that\nit's complaining about are android built-in ones.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/wdullaer/MaterialDateTimePicker/issues/333#issuecomment-290690687,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ARx2PO7c7j52Dngjhsiqn5A03SW3DaSmks5rrObMgaJpZM4MuF5-\n.\n. ",
    "jemshit": "In the sample project, you create DatePickerDialog from scratch every time, but i create it once and reuse it (why not?). I do reuse AlertDialogs actually (for showing error or loading state), but anyway. I am creating new instance everytime now.. ",
    "alinavoronkova": "Thanks, I'll be waiting for the update.. ",
    "kshitij-sminq": "I am using v25.3.1 which is the latest stable release at this time. Can you make it such that your library dependencies don't affect the projects that use your library?. ",
    "DAltena": "@kshitij-sminq you can actually avoid this issue by excluding the support libraries in your application's gradle file, like so:\ngroovy\ncompile ('com.wdullaer:materialdatetimepicker:3.2.2') {\n        exclude group: 'com.android.support'\n}\n@wdullaer  do you foresee any issues doing this, or would this maybe be worth including in the readme? It seems to fix the issue on my end.. ",
    "tir38": "You could always mark the old one as @Deprecated and add a note that it'll be removed in future versions...\n... either way I'll see what I can cook up w.r.t. the overloaded constructor for now.. great thx.. @wdullaer Anything blocking this PR? Anything I can add?. I'm no longer working on the project that uses this library so you'll have to test yourself, but it should be pretty straight forward. Feel free to close this issue if you've fixed the problem.. ",
    "NightlyNexus": "@wdullaer bump. thoughts here?\nis this something you would consider fixing in the project, or should i close this?. >It feels like a micro optimization.\nSure it is a small problem but an even easier fix.\n\nI haven't heard anyone actually bumping into that method restriction.\n\nDo you mean the 65K method limit? Almost all modern apps are fighting (or have given up fighting) it.\n\nreadability / maintainability cost\n\nIn Java, package-private and private are the same for focused libraries and feature packages. The code in a package knows the intention.\nMajor Java projects including the Android support libraries, OkHttp, Okio, Retrotfit, Gson, and Moshi removed the extra methods because the methods add up over so many apps.\nAnyway, that's my take, not arguing. I'm not invested here and will close it. Thanks!. ",
    "johnson55110": "Wow, what a fast response!\nOur developer says a new instance is created for the end time.\nSara Johnson\nSenior QA Engineer\nM - 651.792.5004\nwheniwork.com\n420 North 5th Street, Suite 500, Minneapolis, MN 55401\n\nOn Apr 25, 2017, at 9:58 AM, wdullaer notifications@github.com wrote:\nAre you reusing the TimePicker instance or creating a new one when you prompt for the end time?\n\n. That\u2019s not something I know how to provide, but I\u2019ll see what I can do.\nSara Johnson\nSenior QA Engineer\nM - 651.792.5004\nwheniwork.com\n420 North 5th Street, Suite 500, Minneapolis, MN 55401\n\nOn Apr 25, 2017, at 10:07 AM, wdullaer notifications@github.com wrote:\nYou happened to catch me when I'm cleaning out my inbox :-)\nWould it be possible to make a small example project that I could use to reproduce the issue with?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub https://github.com/wdullaer/MaterialDateTimePicker/issues/344#issuecomment-297060716, or mute the thread https://github.com/notifications/unsubscribe-auth/AM8YJYc2Bc6WZpGt44TYG47l5lLZH1-5ks5rzgw2gaJpZM4NHm7G.\n\n\n. Part of the difficulty in reproducing the issue is that it only applies when the app is run on an emulator. Physical devices don\u2019t seem to allow typing.\nSara Johnson\nSenior QA Engineer\nM - 651.792.5004\nwheniwork.com\n420 North 5th Street, Suite 500, Minneapolis, MN 55401\n\nOn Apr 25, 2017, at 10:07 AM, wdullaer notifications@github.com wrote:\nYou happened to catch me when I'm cleaning out my inbox :-)\nWould it be possible to make a small example project that I could use to reproduce the issue with?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub https://github.com/wdullaer/MaterialDateTimePicker/issues/344#issuecomment-297060716, or mute the thread https://github.com/notifications/unsubscribe-auth/AM8YJYc2Bc6WZpGt44TYG47l5lLZH1-5ks5rzgw2gaJpZM4NHm7G.\n\n\n. Actually, Appium testing is only possible by using accessibility hooks, so that\u2019s already set up as it should be.\nSara Johnson\nSenior QA Engineer\nM - 651.792.5004\nwheniwork.com\n420 North 5th Street, Suite 500, Minneapolis, MN 55401\n\nOn Apr 25, 2017, at 10:07 AM, wdullaer notifications@github.com wrote:\nYou happened to catch me when I'm cleaning out my inbox :-)\nWould it be possible to make a small example project that I could use to reproduce the issue with?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub https://github.com/wdullaer/MaterialDateTimePicker/issues/344#issuecomment-297060716, or mute the thread https://github.com/notifications/unsubscribe-auth/AM8YJYc2Bc6WZpGt44TYG47l5lLZH1-5ks5rzgw2gaJpZM4NHm7G.\n\n\n. I haven\u2019t been able to come up with a code sample that you can use, but I\u2019ve coded around the problem using geometry after finding the center of the clock face. I\u2019m ok with withdrawing the issue.\nSara Johnson\nSenior QA Engineer\nM - 651.792.5004\nwheniwork.com\n420 North 5th Street, Suite 500, Minneapolis, MN 55401\n\nOn Apr 25, 2017, at 1:49 PM, wdullaer notifications@github.com wrote:\nA code sample that reproduces this on the emulator is good enough.\nIt'll take a while before I get around to properly investigating this otherwise (I don't have a massive amount of time to work on this library, so if I have a reproducable test case to start from I can get to trying to fix it immediately rather than spend my time budget trying to make the issue appear)\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub https://github.com/wdullaer/MaterialDateTimePicker/issues/344#issuecomment-297128907, or mute the thread https://github.com/notifications/unsubscribe-auth/AM8YJREII2YuW-1FxctIMB30jkooj_VBks5rzkBQgaJpZM4NHm7G.\n\n\n. Possibly. I\u2019d have to get the OK from the company first. We use a ruby/selenium/appium/watir environment, would that be useful?\nSara Johnson\nSenior QA Engineer\nM - 651.792.5004\nwheniwork.com\n420 North 5th Street, Suite 500, Minneapolis, MN 55401\n\nOn May 8, 2017, at 7:36 AM, wdullaer notifications@github.com wrote:\nWould you be open to share some of your tests with me?\nThis library can use some UI level tests. I haven't had the time to write these.\nI would like to embed some of your tests in the automatic test suite here (which should make the library more reliable for you in the long run)\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub https://github.com/wdullaer/MaterialDateTimePicker/issues/344#issuecomment-299854838, or mute the thread https://github.com/notifications/unsubscribe-auth/AM8YJT5qL_awotlqwoUODT_pGsSSWUjaks5r3ww6gaJpZM4NHm7G.\n\n\n. I definitely have nothing written in Java, more\u2019s the pity. Although we do use Appium, everything is wrapped a multi-layered burrito of test code.\nSara Johnson\nSenior QA Engineer\nM - 651.792.5004\nwheniwork.com\n420 North 5th Street, Suite 500, Minneapolis, MN 55401\n\nOn May 8, 2017, at 7:40 AM, wdullaer notifications@github.com wrote:\nI'm guessing the relevant piece would be in appium for this library.\nI'd have to take a look if they have a free tier for OSS projects. I'll take a look it.\nI was hoping you'd have some AndroidTests as well (those run on the emulator, but are written in java), as they're easy to integrate with travis-ci as well.\nThanks for considering it in any case :-)\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub https://github.com/wdullaer/MaterialDateTimePicker/issues/344#issuecomment-299855675, or mute the thread https://github.com/notifications/unsubscribe-auth/AM8YJahPh1wWC_413KT0qaqczl1566jWks5r3w08gaJpZM4NHm7G.\n\n\n. I\u2019ve gotten permission to share my time picker code with you. The following methods appear in an android_methods.rb file and are called on request. The method requires the name of the field that launches the picker, and the desired time to pick. I didn\u2019t feel like getting the minute selector any more accurate than 5 minutes, so that\u2019s as specific as we get. Also, there are some comments about the behavior of the am/pm toggle in the picker, which isn\u2019t ideal for my uses but is probably totally fine for everybody else. :-)\nSpecify minutes divisible by 5!!!\ndef set_time(field,time)\n  field_text = field.text\n  field.click\n  # If the time field has text that includes an a or p, then the time picker's am/pm setting will match the field.\n  # If the field text letter doesn't match the desired time, click to change to required setting.\n  # If the field doesn't contain either a or p, then mismatches can still occur as there's no way to determine\n  # if the time picker's am or pm is selected.\n  # The time picker's default behavior is to toggle the setting you click. So, if it's already on pm and you\n  # click pm, then it switches to am. The am/pm elements' attributes won't help you decide which is selected.\n  if time.include?('p') && field_text.downcase.include?('a')\n    id('mdtp_pm_label').click\n    sleep 1\n  elsif time.include?('a') && field_text.downcase.include?('p')\n    id('mdtp_am_label').click\n  else\n  end\n  #enter_text(time, id('mdtp_time_display'))\n  hr_min = time.split(':')\n  click_hour_or_minute('hour ' + hr_min[0])\n  sleep 0.5\n  click_hour_or_minute('minute' + hr_min[1][/(\\d*)/])\n  sleep 0.5\n  button('OK').click\nend\nis only precise to the 5 minute mark!!!\ndef click_hour_or_minute(time)\n  window_size = $driver.window_size.to_s[/width=(\\d), height=(\\d)/].gsub!('width=','').gsub!('height=','').to_s.split(', ')\n  #puts \"Window size is \" << window_size.to_s\n  center_x = (window_size[0].to_i/2)\n  #puts \"Clock center X is \" << center_x.to_s\n  dialog_size = id('mdtp_time_picker_dialog').location\n  bounds = id('mdtp_time_picker').location.to_s[/x=(\\d), y=(\\d)/].gsub!('x=','').gsub!('y=','').split(', ')\n  #puts \"Bounds: \" << bounds.to_s\n  square_edge = (center_x - bounds[0].to_i).to_i\n  #puts \"Square edge is \" << square_edge.to_s\n  center_y = (bounds[1].to_i + square_edge)\n  #puts \"Clock center Y is \" << center_y.to_s\n  hyp = (square_edge2/3).to_i\n  #puts \"Hyp is \" << hyp.to_s\n  short_side = (hyp/2).to_i\n  #puts \"Short side is \" << short_side.to_s\n  #puts \"Sqrt of 3 is \" << Math.sqrt(3).to_f.to_s\n  long_side = (short_side(Math.sqrt(3).to_f)).to_i\n  #puts \"Long side is \" << long_side.to_s\n  case time\n    when 'hour 12', 'minute 00'\n      x = center_x.to_i\n      y = (center_y.to_i - hyp.to_i)\n    when 'hour 1', 'minute 05'\n      x = (center_x.to_i + short_side.to_i)\n      y = (center_y.to_i - long_side.to_i)\n    when 'hour 2', 'minute 10'\n      x = (center_x.to_i + long_side.to_i)\n      y = (center_y.to_i - short_side.to_i)\n    when 'hour 3', 'minute 15'\n      x = (center_x.to_i + hyp.to_i)\n      y = (center_y.to_i)\n    when 'hour 4', 'minute 20'\n      x = (center_x.to_i + long_side.to_i)\n      y = (center_y.to_i + short_side.to_i)\n    when 'hour 5', 'minute 25'\n      x = (center_x.to_i + short_side.to_i)\n      y = (center_y.to_i + long_side.to_i)\n    when 'hour 6', 'minute 30'\n      x = center_x.to_i\n      y = (center_y.to_i + hyp.to_i)\n    when 'hour 7', 'minute 35'\n      x = (center_x.to_i - short_side.to_i)\n      y = (center_y.to_i + long_side.to_i)\n    when 'hour 8', 'minute 40'\n      x = (center_x.to_i - long_side.to_i)\n      y = (center_y.to_i + short_side.to_i)\n    when 'hour 9', 'minute 45'\n      x = (center_x.to_i - hyp.to_i)\n      y = center_y.to_i\n    when 'hour 10', 'minute 50'\n      x = (center_x.to_i - long_side.to_i)\n      y = (center_y.to_i - short_side.to_i)\n    when 'hour 11', 'minute 55'\n      x = (center_x.to_i - short_side.to_i)\n      y = (center_y.to_i - long_side.to_i)\n  end\n  Appium::TouchAction.new.tap( x: x, y: y, count: 1).release.perform\nend\nSara Johnson\nSenior QA Engineer\nM - 651.792.5004\nwheniwork.com\n420 North 5th Street, Suite 500, Minneapolis, MN 55401\n\nOn May 11, 2017, at 11:26 AM, Sara Johnson sara.johnson@wheniwork.com wrote:\nI definitely have nothing written in Java, more\u2019s the pity. Although we do use Appium, everything is wrapped a multi-layered burrito of test code.\nSara Johnson\nSenior QA Engineer\nM - 651.792.5004\nwheniwork.com http://wheniwork.com/\n420 North 5th Street, Suite 500, Minneapolis, MN 55401\n\nOn May 8, 2017, at 7:40 AM, wdullaer notifications@github.com> wrote:\nI'm guessing the relevant piece would be in appium for this library.\nI'd have to take a look if they have a free tier for OSS projects. I'll take a look it.\nI was hoping you'd have some AndroidTests as well (those run on the emulator, but are written in java), as they're easy to integrate with travis-ci as well.\nThanks for considering it in any case :-)\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub https://github.com/wdullaer/MaterialDateTimePicker/issues/344#issuecomment-299855675, or mute the thread https://github.com/notifications/unsubscribe-auth/AM8YJahPh1wWC_413KT0qaqczl1566jWks5r3w08gaJpZM4NHm7G.\n\n\n. :-D\nAppium requires a virtual android device (or a real one connected to the computer) so it can execute the tests. Genymotion works pretty well, and I think the emulator in Android Studio works as well.\nSara Johnson\nSenior QA Engineer\nM - 651.792.5004\nwheniwork.com\n420 North 5th Street, Suite 500, Minneapolis, MN 55401\n\nOn May 19, 2017, at 8:52 AM, wdullaer notifications@github.com wrote:\nThanks for this!\nI'll have a read through the appium docs and see how this burito is rolled ;-)\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub https://github.com/wdullaer/MaterialDateTimePicker/issues/344#issuecomment-302708664, or mute the thread https://github.com/notifications/unsubscribe-auth/AM8YJetofWzPDJ7rq0b4ar9u9PsGcZBIks5r7Z63gaJpZM4NHm7G.\n\n\n. ",
    "InfoAndroid": "you can override color \n\"color name=\"mdtp_date_picker_selector\"# your color \"  add this in your app color.xml. ",
    "ericmguimaraes": "would'n be a good idea to add that comment to the docs?. ",
    "aryono01": "Thank you for quick reply. I'm still investigating this issue and will post here when i found something. Thank you for creating and sharing this great library!. ",
    "moniriItani": "Hello,\nthis happens anytime the app pauses (ex: pressing home button, or moving to another app) while the date dialog is showing.\n. ",
    "laalto": "Here's a workaround I applied to the codebase I was working on - basically dismiss the datepicker dialog if the activity hosting the dialogfragment is paused. There's a side effect that the dialog is not restored but that is acceptable for UX in this case.\n```\n        final Application.ActivityLifecycleCallbacks callbacks = new Application.ActivityLifecycleCallbacks() {\n            @Override\n            public void onActivityCreated(Activity activity, Bundle savedInstanceState) {\n            }\n        @Override\n        public void onActivityStarted(Activity activity) {\n        }\n\n        @Override\n        public void onActivityResumed(Activity activity) {\n        }\n\n        @Override\n        public void onActivityPaused(Activity activity) {\n            datePickerDialog.dismiss();\n        }\n\n        @Override\n        public void onActivityStopped(Activity activity) {\n        }\n\n        @Override\n        public void onActivitySaveInstanceState(Activity activity, Bundle outState) {\n        }\n\n        @Override\n        public void onActivityDestroyed(Activity activity) {\n        }\n    };\n    activity.getApplication().registerActivityLifecycleCallbacks(callbacks);\n    datePickerDialog.setOnDismissListener((dialog) -> activity.getApplication().unregisterActivityLifecycleCallbacks(callbacks));\n\n    datePickerDialog.show(activity.getFragmentManager(), \"Datepickerdialog\");\n\n```. Thanks, that's a simpler (less code fat) way to achieve the same workaround.. Thanks, tried looking up for existing bug report but the IOException did not seem relevant :). Yes it's the DefaultDateRangeLimiter that causes this stacktrace but might get another crash for the other field that seemed to be non-transient and non-serializable. Did not spend too much time reading the code though.. Looks like this problem is still there. Can repro this issue on an app with MDTP 3.6.4 with the following stacktrace:\nFatal Exception: java.lang.IllegalArgumentException: Invalid target position\n       at android.support.v7.widget.RecyclerView$LayoutManager.android.support.v7.widget.RecyclerView$SmoothScroller.start(SourceFile:14534)\n       at android.support.v7.widget.LinearLayoutManager.smoothScrollToPosition$7d69765f(SourceFile:451)\n       at android.support.v7.widget.RecyclerView.smoothScrollToPosition(SourceFile:1781)\n       at com.wdullaer.materialdatetimepicker.date.DayPickerGroup.onClick(SourceFile:183). I did some experimentation with this and submitted a PR that fixes the issue at least for our case. Not too familiar with the codebase so might have overlooked something but hope it's helpful anyway.. Yes - I agree while this works, it does not help reduce technical debt here. Even sensing the smell of legacy but not knowing the constraints the original code was written with, I wanted to refrain from any large changes and just do the minimum to get the issue fixed.\nDo you want to take it from here?. Ok, I'll have a closer look at this. It's not the highest prio issue for us but I think I can put in some more effort to this.. Ok, with your comments I was more encouraged to touch existing code and get rid of some stuff that looked obsolete to me. While there, tried to make an improvement sweep around date picker talkback accessibility. In my testing it seems to work much better now and the crash is not there anymore either.. I don't have any open issues with this anymore. But now knowing the codebase there's a good chance I've broken something.. Excellent, thanks \ud83d\udc4d . Yes, this is from an app that uses 4.1.1. ",
    "burugular": "Dismissing the Dialog in the Fragment OnPause resolved the crash.\n```\nprivate DatePickerDialog datePickerDialog;\n@Override\n    public void onPause() {\n        super.onPause();\n        datePickerDialog.dismiss();\n    }\n```. ",
    "Samadhan-Medge": "Thanks @wdullaer its working fine. ",
    "joanvilab": "Is this solved??. I've missed to add the seconds interval and now it works perfect, thanks!. ",
    "davidvavra": "I have looked into the code, it shouldn't be too hard. Just replace Locale.getDefault() in the code with a variable which is customisable (default locale by default).. ",
    "parthvora112": "Yes, because my application support multiple language. . I got solution, Thanks for your support \nSolution :+1: \nLocale locale = new Locale(\"en_us\");\n       Locale.setDefault(locale );\n       Configuration config = new Configuration();\n       config.locale = locale;\n       mContext.getResources().updateConfiguration(config, mContext.getResources().getDisplayMetrics());. ",
    "asknask": "Just faced this very issue on a 5.1.1 Samsung Galaxy Grand Prime. Exact same stack trace.\nIssue isn't produced on a 6.0.1 Galaxy Note 4. What kinda details do you need? The stacktrace mentions DatePickerDialog Line 318 (which is the inflate line).. I used the same version in another app and now it is crashing on the 6.0.1 Galaxy Note 4 as well. Only happens for the Date picker.. After some investigation, it has become apparent that this isn't an issue with the library but with a few specific Samsung phones. The crash on my Note 4 wasn't due to the same issue.\nThere has only been 1 phone that shows the behavior mentioned here (in my case) and that was a 5.0.1 Samsung Galaxy Grand Prime. I haven't been able to reproduce it on any other platforms, but I also haven't been able to find a workaround for it.\nI believe it has something to do with Samsung using obsolete built-in support libs.. In my app I'm on 25.3.1. But that might be irrelevant if the system is using some older Samsung-provided version.\nHow do I check which version my widget is using?. exclude group: 'com.android.support', module: 'support-v13'\nThis is what's needed.. ",
    "christianCallelero": "ok thank you.. ",
    "hemanthkaipaa": "Right now for Temporary I'm simply modifying my code to\n Calendar calendar = Calendar.getInstance();\n            calendar.set(Calendar.HOUR,hourOfDay);\n            calendar.set(Calendar.MINUTE,minute);\n            calendar.set(Calendar.SECOND,second);\n            if (calendar.get(Calendar.AM_PM)!=0){\n                calendar.set(Calendar.AM_PM,0);\n            }else{\n                calendar.set(Calendar.AM_PM,1);\n            }\n            textViewStartTime.setText(startTimeFormat().format(calendar.getTime()));\n            System.out.println(\"ampm \"+calendar.get(Calendar.AM_PM)); . Yeah,..!. that's why I've closed this. ",
    "PedroBarbosaPT": "Updated version of the answer:\nCalendar now = Calendar.getInstance();\nnow.add(Calendar.MINUTE, 30);\nTimepoint timePoint = new Timepoint(now.get(Calendar.HOUR_OF_DAY), now.get(Calendar.MINUTE), 0);\ntpd.setMinTime(timePoint);. https://developer.android.com/jetpack/androidx/migrate\nRead this\n(Specially the refactor part). ",
    "mcxinyu": "This is what I use android.app.DatePickerDialog implementation:\n`DatePickerDialog dialog = new DatePickerDialog(this, new DatePickerDialog.OnDateSetListener() {\n        @Override\n        public void onDateSet(DatePicker view, int year, int month, int dayOfMonth) {\n                calendar.set(year, month, dayOfMonth);\n                Date date = calendar.getTime();\n                startActivity(SingleNewsListActivity.newIntent(MainActivity.this, date));\n                }\n        }, mYear, mMonth, mDay);\n        dialog.setButton(BUTTON_NEUTRAL, getString(R.string.ramdom_data), new DialogInterface.OnClickListener() {\n                @Override\n                public void onClick(DialogInterface dialog, int which) {\n                startActivity(SingleNewsListActivity.newIntent(MainActivity.this, getRandomDate()));\n                }\n        });\n    dialog.show();`. How to do it?.\n",
    "dangaffey": "Looks like you might need to tinker with Travis CI or manually grab the latest Android Support Repository.. ",
    "Pennan": "?. ",
    "aiynmm": "The part of FAQ ,have you seen Why not use SupportDialogFragment?Maybe it can help you!@Pennan . ",
    "ridcully99": "Thanks for your answer and the hints on how to proceed. Will give it a shot and provide a PR if I manage to get somewhere.. ",
    "yaseen-homage": "Can you update it to 26.1.0. I still have issues even after addding \ncompile ('com.wdullaer:materialdatetimepicker:3.3.1') {\n        exclude group: 'com.android.support'\n} in gradle. . I'm getting the foolowing error in console Error:Execution failed for task ':app:processDebugManifest'.\n\nManifest merger failed : Attribute meta-data#android.support.VERSION@value value=(26.0.1) from [com.android.support:support-v13:26.0.1] AndroidManifest.xml:28:13-35\n    is also present at [com.android.support:customtabs:26.1.0] AndroidManifest.xml:25:13-35 value=(26.1.0).\n    Suggestion: add 'tools:replace=\"android:value\"' to  element at AndroidManifest.xml:26:9-28:38 to override.. \n",
    "vandanabpatel": "I have resolved it if i am calling this function again on click of Textview it doesn't raised issue related to DatePickerDialog  instance it, seems working fine thank you.. ",
    "s3r6": "I think there should be an abstract DateRangeLimiter implementation to extend for those who does not need all restrictions.. ",
    "johnmarktagle": "That would be perfect. I am working on an app that needs to be fixed for a certain timezone, irregardless of the device timezone. . ",
    "jerry33": "Is this already solved? I'm working on an app that allows user to pick a date for a trip (from array of specific days) but with time zone belonging to the place where the trip actually is, not what default settings user has in his device. For example, if the trip is in Japan, and it's on November 28 in the morning in Japan, I will only be able to pick November 27, because currently I'm in Europe and so is my device set up. I tried to use setTimeZone() method, but it doesn't have any effect. Thanks for the reply.. I found a workaround for this. I was using setTimeZone() for DatePickerDialog. My idea was to set information about time zone to DatePickerDialog when initializing it and then retrieve it in callback using getTimeZone(). The problem appeared when I tried to use it together with setSelectableDays(). I don't know what exactly the problem was, but it caused a very strange behavior, for example if I put two days as selectable ones, I could only pick one of them. Or I couldn't even pick any if using this method. So I completely get rid of this method and put this information about time zone right into the Fragment bundle using setArguments() method. Now, Dialog has no clue about time zone used when adding selectable days (Calendar is being created from year, month and day without any time zone added) and I'm passing this information over Bundle.\nAnyway, you might investigate what exactly the problem is with setTimeZone() method as it clearly doesn't work properly with setSelectableDays().. \n\nAs you can see in these screenshots. I used method datePickerDialog.setTimeZone(java.util.TimeZone.getTimeZone(\"America/Los_Angeles\")); (living in Europe) and passed three Calendar objects as selectable days (day 2, 6 and 8). As you can see, after opening Dialog, day 8 is selected by default (but it's grey, not black), but when you change it, you can't pick it again. After removing this line of code, everything works fine, but you don't have a clue what time zone you want to use in onDateSet() callback. That's why I used Fragment arguments.\n. ",
    "Farhad2015": "maven {\n     url \"https://maven.google.com\"\n }\nafter add this line of code, I get this error- \n\n(I am using Clean Project and Rebuild Project - but nothing happen). I create a brand new project and add this library according to FAQ. I appear new problem now. (In version 2.3.0 it's works fine it happen in version 3.3.0)\n\n. Thank you @wdullaer  for your answer. I resolve that error just change compile 'com.android.support:appcompat-v7:26.0.1' instead of compile 'com.android.support:appcompat-v7:26.+'. . ",
    "NeerajaReddyKomma": "How to set that can u let me know.. I dnt want to display the year itself. ",
    "perrygarg": "Hi @wdullaer ,\nThanks for response. I was not able to disable recurring days. However, I am able to disable specific days in coming 2 months/3 months but not all days in future. Can you please demonstrate by giving an code snippet example? Thanks in advance.. ",
    "SantiDev": "Android OS: N\nDevice: Galaxy S7\nLanguage: English\n. ",
    "JorgeCastilloPrz": "Feels like a quite important issue to fix. +1!. ",
    "felipezf": "+1 here. ",
    "forfiter9": "I found that \nmaven {\n            url \"https://maven.google.com\"\n        } is fould\nHave you idea how to fix it?\n. ",
    "Birdielove": "yes. Asa i know i don't have any specific rules and gradle.properties file is included, btw you have a look at my project here https://github.com/Birdielove/To-Do.git, thanks for your help really appreciated. . I found a workaround.. ",
    "zeeshansardar61": "I need to send the selected time and date from UTC +5:00 to UTC 0:00, how do I achieve this for selected? for time it is a piece of cake, but for date it is not returning time with it that i can identify rather I have to change the selected date to (date-1) or (date+1). ",
    "jonathanrandev": "@wdullaer The biggest requirement for me was to get an instance of the callback. The rest i added as a general thought, so that custom functionality can be provided for each of those operations. I've not used them, just thought they'd be some useful extension points \ud83d\udc83 . ",
    "jbollacke": "This issue is fixed in v3.3.1. See  https://github.com/wdullaer/MaterialDateTimePicker/issues/404 and 1b2830eb1217d70c29ac6a03d50aae7585602149\nPlease update.. ",
    "bagi-code": "i am just add public variable int for view edittext.. ",
    "jirevwe": "Still crashes but with a different error...\nI can't seem to figure out why some widget are not inflated though...\nIt works on android 4.4.4 \nFatal Exception: android.view.InflateException: Binary XML file line #37: Error inflating class TextView\n       at android.view.LayoutInflater.createViewFromTag(LayoutInflater.java:713)\n       at android.view.LayoutInflater.rInflate(LayoutInflater.java:755)\n       at android.view.LayoutInflater.rInflate(LayoutInflater.java:758)\n       at android.view.LayoutInflater.parseInclude(LayoutInflater.java:839)\n       at android.view.LayoutInflater.rInflate(LayoutInflater.java:745)\n       at android.view.LayoutInflater.rInflate(LayoutInflater.java:758)\n       at android.view.LayoutInflater.inflate(LayoutInflater.java:492)\n       at android.view.LayoutInflater.inflate(LayoutInflater.java:397)\n       at com.wdullaer.materialdatetimepicker.date.DatePickerDialog.onCreateView(DatePickerDialog.java:318)\n       at android.app.Fragment.performCreateView(Fragment.java:1700)\n       at android.app.FragmentManagerImpl.moveToState(FragmentManager.java:890)\n       at android.app.FragmentManagerImpl.moveToState(FragmentManager.java:1062)\n       at android.app.BackStackRecord.run(BackStackRecord.java:698)\n       at android.app.FragmentManagerImpl.execPendingActions(FragmentManager.java:1447)\n       at android.app.FragmentManagerImpl$1.run(FragmentManager.java:443)\n       at android.os.Handler.handleCallback(Handler.java:808)\n       at android.os.Handler.dispatchMessage(Handler.java:103)\n       at android.os.Looper.loop(Looper.java:193)\n       at android.app.ActivityThread.main(ActivityThread.java:5323)\n       at java.lang.reflect.Method.invokeNative(Method.java)\n       at java.lang.reflect.Method.invoke(Method.java:515)\n       at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:824)\n       at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:640)\n       at dalvik.system.NativeStart.main(NativeStart.java)\nCaused by java.lang.ArrayIndexOutOfBoundsException: length=23; index=5877\n       at android.content.res.StringBlock.get(StringBlock.java:65)\n       at android.content.res.XmlBlock$Parser.getPooledString(XmlBlock.java:458)\n       at android.content.res.TypedArray.loadStringValueAt(TypedArray.java:721)\n       at android.content.res.TypedArray.getString(TypedArray.java:125)\n       at android.widget.TextView.<init>(TextView.java:1002)\n       at android.support.v7.widget.AppCompatTextView.<init>(AppCompatTextView.java:75)\n       at android.support.v7.widget.AppCompatTextView.<init>(AppCompatTextView.java:71)\n       at android.support.v7.app.AppCompatViewInflater.createView(AppCompatViewInflater.java:103)\n       at android.support.v7.app.AppCompatDelegateImplV9.createView(AppCompatDelegateImplV9.java:1024)\n       at android.support.v7.app.AppCompatDelegateImplV9.onCreateView(AppCompatDelegateImplV9.java:1081)\n       at android.view.LayoutInflater.createViewFromTag(LayoutInflater.java:684)\n       at android.view.LayoutInflater.rInflate(LayoutInflater.java:755)\n       at android.view.LayoutInflater.rInflate(LayoutInflater.java:758)\n       at android.view.LayoutInflater.parseInclude(LayoutInflater.java:839)\n       at android.view.LayoutInflater.rInflate(LayoutInflater.java:745)\n       at android.view.LayoutInflater.rInflate(LayoutInflater.java:758)\n       at android.view.LayoutInflater.inflate(LayoutInflater.java:492)\n       at android.view.LayoutInflater.inflate(LayoutInflater.java:397)\n       at com.wdullaer.materialdatetimepicker.date.DatePickerDialog.onCreateView(DatePickerDialog.java:318)\n       at android.app.Fragment.performCreateView(Fragment.java:1700)\n       at android.app.FragmentManagerImpl.moveToState(FragmentManager.java:890)\n       at android.app.FragmentManagerImpl.moveToState(FragmentManager.java:1062)\n       at android.app.BackStackRecord.run(BackStackRecord.java:698)\n       at android.app.FragmentManagerImpl.execPendingActions(FragmentManager.java:1447)\n       at android.app.FragmentManagerImpl$1.run(FragmentManager.java:443)\n       at android.os.Handler.handleCallback(Handler.java:808)\n       at android.os.Handler.dispatchMessage(Handler.java:103)\n       at android.os.Looper.loop(Looper.java:193)\n       at android.app.ActivityThread.main(ActivityThread.java:5323)\n       at java.lang.reflect.Method.invokeNative(Method.java)\n       at java.lang.reflect.Method.invoke(Method.java:515)\n       at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:824)\n       at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:640)\n       at dalvik.system.NativeStart.main(NativeStart.java). Yeah sure.... Any luck on this issue?. ",
    "DaRolla": "Well, I found a workaround which works for me. Maybe you need to restore your old locale in the demiss listener.\nI only set the locale before calling show().\nSetting the locale is kind of compicated, but this code helped me (https://gunhansancar.com/change-language-programmatically-in-android/):\npublic Context setLocale(Context context, String language) {\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {\n        return updateResources(context, language);\n    }\n\n    return updateResourcesLegacy(context, language);\n}\n\n@TargetApi(Build.VERSION_CODES.N)\nprivate Context updateResources(Context context, String language) {\n    Locale locale = new Locale(language);\n    Locale.setDefault(locale);\n\n    Configuration configuration = context.getResources().getConfiguration();\n    configuration.setLocale(locale);\n    configuration.setLayoutDirection(locale);\n\n    return context.createConfigurationContext(configuration);\n}\n\n@SuppressWarnings(\"deprecation\")\nprivate Context updateResourcesLegacy(Context context, String language) {\n    Locale locale = new Locale(language);\n    Locale.setDefault(locale);\n\n    Resources resources = context.getResources();\n\n    Configuration configuration = resources.getConfiguration();\n    configuration.locale = locale;\n    configuration.setLayoutDirection(locale);\n\n    resources.updateConfiguration(configuration, resources.getDisplayMetrics());\n\n    return context;\n}\n\n. ",
    "luckpizza": "hey @Meggi07 how did you solved the problem?\nI am using lastest version of everything and is still crashing. I was having the problem with the font. I could not solve it, but anyway I needed the \"Spinner\" like picker, so I went for a different lib :(. Hi @wdullaer I have quite and updated configuration:\nbuildscript {\n    ext.kotlin_version = '1.1.51'\n    ext.google_support_version = '27.0.1'\n    ext.firebase_version = '11.6.0'\n    ext.min_sdk = 16\n    ext.target_sdk = 26\ndependencies {\n    classpath 'com.android.tools.build:gradle:3.0.0'\n    classpath ':dexguard:'\n    classpath \"org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version\"\n    classpath 'com.google.firebase:firebase-plugins:1.1.4'\n}\n\n}\nI was having the same problem initializing Roboto-Medium.ttf, I now switched to another library that actually provided the \"spinner\" look I was looking for, that's why I can't help u much :(\nif someone is interested here is it: https://github.com/luckpizza/SpinnerDatePicker (I made it compatible with android >= 16). ",
    "cromwel": "Which version works of this library works with API 15?\nTechnically this is my issue:\n03-11 17:31:03.604 31974-31974/org.development.aihd.app E/AndroidRuntime: FATAL EXCEPTION: main\n    Process: org.development.aihd.app, PID: 31974\n    java.lang.IllegalStateException: Could not find a method dob(View) in the activity class android.support.v7.widget.TintContextWrapper for onClick handler on view class customfonts.EditText_Roboto_Regular with id 'birthdate'\n        at android.view.View$1.onClick(View.java:3847)\n        at android.view.View.performClick(View.java:4508)\n        at android.view.View$PerformClick.run(View.java:18675)\n        at android.os.Handler.handleCallback(Handler.java:733)\n        at android.os.Handler.dispatchMessage(Handler.java:95)\n        at android.os.Looper.loop(Looper.java:136)\n        at android.app.ActivityThread.main(ActivityThread.java:5590)\n        at java.lang.reflect.Method.invokeNative(Native Method)\n        at java.lang.reflect.Method.invoke(Method.java:515)\n        at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:1280)\n        at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:1096)\n        at dalvik.system.NativeStart.main(Native Method)\n     Caused by: java.lang.NoSuchMethodException: dob [class android.view.View]\n        at java.lang.Class.getConstructorOrMethod(Class.java:472)\n        at java.lang.Class.getMethod(Class.java:857). ",
    "rddewan": "thanks i got it. ",
    "gssinghgautam": "Sorry I was using older version . ",
    "faelchristofano": "I followed your orientation e the issue persists\n\n\n. ",
    "gmlymayday": "ok \uff0ci update 3.2.2 is support. ",
    "nzakharchenko": "Actually if you not selecting Use marshmallow layout it will look also broken:\n\n. @wdullaer actually I've done changes for TimePickerDialog as well, and it should work well.. @wdullaer nice!! \n. ",
    "tmelko": "@wdullaer  already fixed within last commits (dat for background I think so).\nAnd deployed in 3.4.1 as well. Thanks!. ",
    "awazgyawali": "Fixed by Restarting android Studio. ",
    "mikica1986vee": "Fixes my use case and I suppose it fixes issue #383  \nP.S. Thanks for the awesome lib! :). ",
    "oNguyenHuuTho": "Thanks for replied\nI'm changed my font and it's working, thanks again <3. ",
    "yedajiang44": "change the code like this\n\n. ",
    "sunit09": "Yes, its 3.5.0. ",
    "dimeilof": "Since the Android P preview announcement, framework Fragments and Loaders have been officially deprecated.\nFramework Fragments and Loaders have been officially deprecated in Android P.. ",
    "joshfriend": "\nI am waiting for a few things at this point: Google to release actual API 28 SDKs\n\nFantastic plan, thats really all I was suggesting :+1: \nAndroid P APIs wont be final and you wont be able to submit apps compiled against it to the store until DP3 in June anyways.\n@Jawnnypoo if you (or anyone else) need to test with support fragments before P is final, there's already a really good fork here (also mentioned in the README).. @DagobertDokate just use the support library fork I mentioned in the comment immediately above yours.\nThe Android P APIs are not finalized yet, so I can guarantee you that nothing will happen here until the SDK is final.. ",
    "DagobertDokate": "Some news? Need it^^\n. I have already looked at these. Unfortunately, this version does not support 27.1.1.\nNow i use this with mixed v4 and nativ Fragments. Hope i can change it befor release =). ",
    "yanniks": "Another problem is that Google moves all Support Libraries to the new Android extension library (AndroidX) packages.\nSo before moving everything to com.android.support, please consider solutions that don't break AndroidX support. With release of beta01, the public API is considered stable.. I would not say that this problem is resolved.\nWhen using Theme.MaterialComponents.Light.NoActionBar, I'm still running into the background color issue and I would prefer sticking to the default themes instead of compatibility ones.\nAlso, it seems like the bridge themes match the \"old\" Material design guidelines while Theme.MaterialComponents.Light.NoActionBar uses the new ones. A good example is the Snackbar which looks different depending on which theme you're using.. ",
    "eugeneroz": "Do you have any progress?. ",
    "ad3bay0": "ok thanks. ",
    "LuigiBaute": "I'm talking about the readme.md files I don't see any translated file to spanish if so that's ok, if you're interested in my contribution let me know.. @wdullaer check it out :+1: . @wdullaer Hi, do you have an idea of what went wrong with the file? so I can change it... I've been reviewing it and can't tell what happened.... Can I translate the license?  @wdullaer  btw. I'm so glad the pr worked out nice for you! :+1: CHEERS!. ",
    "plastiv": "I think documentation is misleading. I have checked support fonts in xml the week before and it is working on api 14. Plus Downloadable fonts https://developer.android.com/guide/topics/ui/look-and-feel/downloadable-fonts.html don't have minSdk=16 restriction and practically is calling same ResourcesCompat.getFont implementation. . ",
    "uaziz2014": "ok then let me debug it now and then i will tell you about status. ",
    "neri4488": "Thanks so much,, I didn't double check to which page to post. . ",
    "ZeevoX": "I assume I cannot pick April 30th 2018 because of this issue, and it isn't the app developer's code but instead this library that is causing the problem.. ",
    "tristanvda": "Thank you for the fast reply!\nOk, I understand why you made 'OnDateChangedListener' protected. Maybe you could consider making the Views protected then as well (because now they are public and take 'DatePickerController' as a parameter, which makes it a bit confusing). Anyway not a big issue :)\nI'll continue using the forked library. In case you are interested why I'm using the Views: In the project I'm working on, we're using both your DatePickerDialog and an input View (that's not in a dialog) for entering the date. We want the input view to have the same look and feel as the Dialog. That's why the Views being public was very convenient.. ",
    "federicoteddy": "using borax daterangepicker \ncompile 'com.borax12.materialdaterangepicker:library:1.9'\nusing datetimepicker\ncompile 'com.wdullaer:materialdatetimepicker:3.5.1'\nit is last version?. ",
    "Krohajah": "Seems like there are some changes in TimeZone on post lollipop OS. Taking instance without TimeZone fix the problem.. ",
    "mobilegeekkk": "@wdullaer I need 15,30,45 minutes interval in my application. Does this lib supports minutes interval ?. @wdullaer  Thanks man, I'll follow your guidelines.. ",
    "kientux": "Sorry I knew why. Because I used newInstance to create dialog, so it won't return my subclass, actually it still returns DatePickerDialog, and then never use my overrided initialize. I need to create my own static method to create new instance.. ",
    "yusufaw": "Thank you.\nI've just forked this and added some my own code to hide ok cancel button when auto dismiss is true.\nview.findViewById(R.id.mdtp_done_background).setVisibility(mAutoDismiss ? View.GONE : View.VISIBLE);\nhttps://github.com/skyshi-labs/MaterialDateTimePicker/commit/016a6825fc9466ef327c7c600d49200df007942f. ",
    "MaciekZ-NHM": "I used version 3.5.1\nin 3.5.2 buttons are now correctly displayed\nthe Setup section introduced me in error, there is 3.5.1\nthanks for quick reply\nby the way: good job :). ",
    "wail1994": "ok what about ok button\n. ",
    "hishamtbox": "Sorry the issue was at my end so i am going close this. ",
    "gilcunningham": "Firstly, this is a great library, looks great, easy to use.  I chose it primarily for the selectable and unselectable dates functionality.  My use case for the \"on month changed\" feature is that the server I work with provides a months worth of available (selectable) dates.  I could make a 12 calls and load a years worth, buts that wasteful.  If I had some callback to when the next month was selected, I could load the next + 1 month available days to buffer.  . FYI, got it all working with minimal effort by using swapAdapter() instead of setAdapter() in DayPickerView#refreshAdapter() and removing the setSelectedDay().  Working nicely now. . ",
    "ShengjieGeng": "I got the log\n\n. thanks all the same.\nActually,it was my faults that I added the <item name=\"android:fontFamily\">sans-serif</item> in my AppTheme. it could run normally after I deleted the item.I donot know why..... ",
    "leventepal": "This is a crash reported by crashlytics, it has crashed for one of the users having:\nSM-G955U, Android O.\nThis is the only stacktrace that the website it's offering to me.. Called from activity:\n```\n@OnClick(R.id.textView_hour)\npublic void onClick(View view) {\n   int hourOfDay = getHourOfDay(); // 0 - 23\n   int min = getMin(); // 0 - 59\npickTime(hourOfDay, min);\n}\nprivate void pickTime(int hourOfDay, int min, 0) {\n   boolean is24HourFormat = App.is24HourFormat();\nTimePickerDialog dialog = TimePickerDialog.newInstance(this, hourOfDay, min, 0, is24HourFormat);\n   dialog.setTimeInterval(1, 5);\n   dialog.show(getFragmentManager(), \"\");\n}\n@Override\npublic void onTimeSet(TimePickerDialog dialog, int hour, int minute, int second) {\n   // Set calendar time settings\n   Calendar calendar .....\n}\n```. Sorry for late response, I've had 2 reports but it's look like it's working. I don't know what caused the problem.. ",
    "deepbhavsar": "@wdullaer \nHi, I have tried couple of hours and after I got the solution. May be it was silly mistake\nit is working fine with calendar.get(Calendar.HOUR_OF_DAY). ",
    "erlangp": "ow.. thanks for your information sir :). ",
    "tpmt": "Yes.. ",
    "Mahtalitet": "I have the same issue (31 January):\n( api 'com.wdullaer:materialdatetimepicker:3.6.0')\n\n\n. ",
    "thalles89": "Hi brother, i've couldn't use the .setDisabledDays and .setDisabledTime, so, how can i do to use this?. ",
    "pranavagiligar": "I understood. Thanks for the reply.. ",
    "LaserStony": "Interesting... @wdullaer, can you shine some light on that?. @wdullaer Yes, I am using the Latest version and Here: I have pasted the implementation to both the setSelectableDays and setSelectableTimePoints.\nInitializing Both Pickers as:\nmDatePicker = DatePickerDialog.newInstance(this);\nmTimePicker = TimePickerDialog.newInstance(this, true);\nThen Setting the Selectable Days and TimePoints\n```\nArrayList selectableDays = new ArrayList<>();\nArrayList selectableTimePoints = new ArrayList<>();\nfor (ConsultantDaysItem cdi : consultantTimings.getConsultantDays()) \n{\n              try {\n                            SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd\");\n                            Calendar cal = Calendar.getInstance();\n                            cal.setTime(sdf.parse(cdi.getDate()));\n                        selectableDays.add(cal);\n\n                        SimpleDateFormat format = new SimpleDateFormat(\"HH:mm:ss\");\n                        Calendar cal1 = Calendar.getInstance();\n                        cal.setTime(format.parse(cdi.getStartTime()));\n                        Timepoint t = new Timepoint(cal1.get(Calendar.HOUR), cal1.get(Calendar.MINUTE));\n\n                        Calendar cal2 = Calendar.getInstance();\n                        cal.setTime(format.parse(cdi.getEndTime()));\n                        Timepoint t2 = new Timepoint(cal1.get(Calendar.HOUR), cal2.get(Calendar.MINUTE));\n\n                        selectableTimePoints.add(t);\n                        selectableTimePoints.add(t2);\n         } catch (java.text.ParseException e1) {\n                        e1.printStackTrace();\n         }\n\n}\nCalendar[] selectableDaysArr = new Calendar[selectableDays.size()];\nTimepoint[] selectableTimePointArr = new Timepoint[selectableTimePoints.size()];\nmDatePicker.setSelectableDays(selectableDays.toArray(selectableDaysArr));\nselectableDays.toArray(selectableDaysArr);\nselectableTimePoints.toArray(selectableTimePointArr);\nmDatePicker.setHighlightedDays(selectableDaysArr);\nmDatePicker.setSelectableDays(selectableDaysArr);\nmTimePicker.setSelectableTimes(selectableTimePointArr);\n```\nFinally Showing it Using:\nmDatePicker.show(getFragmentManager(), \"DPD_FragmentTag\");\nmTimePicker.show(getFragmentManager(), \"Fragment_TIME_PICKER\");\nImportant Note:\nI checked the Output of both the selectableTimePointsand selectableDays over and over and they are never Null. They are simplified and always there. But the Result is always the Same: No Selectable Date and the Default date set to 1st January 19** (something) and The Time being unchangeable as well.... As you weren't replying and the deadline was getting near so I went into it full on with a clread mindset and pretty much did what ypu implied up above... And finally found the solution... Thanks for this Amazing Lib.... As you weren't replying and the deadline was getting near so I went into it full on with a clread mindset and pretty much did what ypu implied up above... And finally found the solution... Thanks for this Amazing Lib.... Yeah... I know what its Like.. No Worries... And Thanks again for this great Lib.... ",
    "bnkhoi": "It worked. Thank you so much.. ",
    "KishanViramgama": "solve issue import java.util.Calendar;. ",
    "adrcotfas": "I think that he wanted to say that the date picker horizontal scroll doesn't behave like the default implementation of the date picker. Swiping harder left/ right will result in an accelerated scroll over several months instead of a single month.. I think it's more about keeping the fidelity of the default dialog behavior and consistency with the Material Design since it's named \"MaterialDateTimePicker\".. ",
    "maxim-pandra": "I also think that scroll should be the same as default one. Several month swipe should be an option, imo.\nThanks for the lib.. ",
    "nibblesoftworks": "It works perfectly on sample. \nMy bad not to check the sample first. Lol\nTy for ur reply. . ",
    "itning": "I use this code\nTimePickerDialog.newInstance(this, now.get(Calendar.HOUR_OF_DAY), now.get(Calendar.MINUTE), true );\nNo errors\nBut I want use 12 hour mode.. > Are you just worried about the log statement, or is there actual broken functionality?\nI want to use the 12 hour mode and there will be no error log.. ",
    "OneManStudioDotSe": "Also, for some very strange reason, I cannot set the color of the text at either the 'ok' or 'cancel' button to be white. Not with Color.parse(\"#FFFFFF), not with Color.parse(\"white\"), not with a color from colors.xml. No damn way to do that!\nCould there be a collision with some other library or id of color?\nSome other idea that comes to mind regarding this. It is fine if the buttons are getting the color of the accent color but I would like the text to be white to make the contrast better.\n. Here is my project's setup:\ncompileSdkVersion 28\nbuildToolsVersion '28.0.2'\nminSdkVersion 16\ntargetSdkVersion 28\nAlso, I am using version 3.6.3 of the library, AndroidX (v. 1.0.0-rc02) and Material Components (v. 1.0.0-rc02).\nThe previous screenshots were from the emulator. On my phone (Google Nexus 5X with Android 8.0) I get the same result.\nNo matter if I set the color of the ok button with\ndpd.setOkColor(ContextCompat.getColor(getActivity(), R.color.white));\nor \ntpd.setOkColor(Color.parseColor(\"#ffffff\"));\nit is always not visible. I can see though that when it is pressed, the color of the text is pink (the accent color).\nThere is no direct or indirect assignment of the android:colorButtonNormal anywhere in my code. I have removed questionable libraries to remove the risk of them fiddling around but still no result :(\nAny suggestions what else to try or look at?\n. Answering my own questions, the problem was caused from the use of Theme.MaterialComponents.Light.NoActionBar.\nIt was fixed when I reverted to the use of Theme.MaterialComponents.Light.NoActionBar.Bridge which uses the new Material Components a bit more careful when playing with previous app compat elements.\nIn a nutshell, for future generations, use 'Theme.MaterialComponents.Light.NoActionBar.Bridge' as your theme when using this library.\n@wdullaer Feel free to close this issue.\n. ",
    "DennyWeinberg": "+1! The button text color and the button background color are both using the accent color. So we can't see the button text.. ",
    "ezet": "Another workaround is to overwrite the button layout. \nCopy https://github.com/wdullaer/MaterialDateTimePicker/blob/master/library/src/main/res/layout/mdtp_done_button.xml, replace Button with com.google.android.material.button.MaterialButton and replace the style with style=\"@style/Widget.MaterialComponents.Button.TextButton\".\nIn fact, it would be enough to just set the style, as the Button is being replaced with MaterialButton regardless, which causes the issue in the first place.\nThis will apply the new default text button style to the buttons.. ",
    "TurKurT656": "@ezet yes i think this is better than replacing the whole LayoutInflater. . ",
    "chdh": "I have exactly the same error in a normal Java Android app (without Cordova):\n```\nandroid.view.InflateException: Binary XML file line #4: Binary XML file line #4: Error inflating class android.widget.ImageButton\nCaused by: android.view.InflateException: Binary XML file line #4: Error inflating class android.widget.ImageButton\nCaused by: java.lang.reflect.InvocationTargetException\n    at java.lang.reflect.Constructor.newInstance0(Native Method)\n    at java.lang.reflect.Constructor.newInstance(Constructor.java:334)\n    at android.view.LayoutInflater.createView(LayoutInflater.java:647)\n    at com.android.internal.policy.PhoneLayoutInflater.onCreateView(PhoneLayoutInflater.java:58)\n    at android.view.LayoutInflater.onCreateView(LayoutInflater.java:720)\n    at android.view.LayoutInflater.createViewFromTag(LayoutInflater.java:788)\n    at android.view.LayoutInflater.createViewFromTag(LayoutInflater.java:730)\n    at android.view.LayoutInflater.rInflate(LayoutInflater.java:863)\n    at android.view.LayoutInflater.rInflateChildren(LayoutInflater.java:824)\n    at android.view.LayoutInflater.inflate(LayoutInflater.java:515)\n    at android.view.LayoutInflater.inflate(LayoutInflater.java:423)\n    at com.wdullaer.materialdatetimepicker.date.DayPickerGroup.init(DayPickerGroup.java:50)\n    at com.wdullaer.materialdatetimepicker.date.DayPickerGroup.(DayPickerGroup.java:32)\n    at com.wdullaer.materialdatetimepicker.date.DatePickerDialog.onCreateView(DatePickerDialog.java:370)\n    at android.app.Fragment.performCreateView(Fragment.java:2508)\n    at android.app.FragmentManagerImpl.moveToState(FragmentManager.java:1279)\n    at android.app.FragmentManagerImpl.moveFragmentToExpectedState(FragmentManager.java:1557)\n    at android.app.FragmentManagerImpl.moveToState(FragmentManager.java:1618)\n    at android.app.BackStackRecord.executeOps(BackStackRecord.java:807)\n    at android.app.FragmentManagerImpl.executeOps(FragmentManager.java:2386)\n    at android.app.FragmentManagerImpl.executeOpsTogether(FragmentManager.java:2181)\n    at android.app.FragmentManagerImpl.removeRedundantOperationsAndExecute(FragmentManager.java:2136)\n    at android.app.FragmentManagerImpl.execPendingActions(FragmentManager.java:2043)\n    at android.app.FragmentManagerImpl$1.run(FragmentManager.java:719)\n    at android.os.Handler.handleCallback(Handler.java:790)\n    at android.os.Handler.dispatchMessage(Handler.java:99)\n    at android.os.Looper.loop(Looper.java:164)\n    at android.app.ActivityThread.main(ActivityThread.java:6494)\n    at java.lang.reflect.Method.invoke(Native Method)\n    at com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:438)\n    at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:807)\n Caused by: java.lang.UnsupportedOperationException: Failed to resolve attribute at index 13: TypedValue{t=0x2/d=0x7f030136 a=-1}\n    at android.content.res.TypedArray.getDrawableForDensity(TypedArray.java:944)\n    at android.content.res.TypedArray.getDrawable(TypedArray.java:928)\n    at android.view.View.(View.java:4768)\n    at android.widget.ImageView.(ImageView.java:176)\n    at android.widget.ImageButton.(ImageButton.java:86)\n    at android.widget.ImageButton.(ImageButton.java:82)\n    at android.widget.ImageButton.(ImageButton.java:78)\n    at java.lang.reflect.Constructor.newInstance0(Native Method)\u00a0\n    at java.lang.reflect.Constructor.newInstance(Constructor.java:334)\u00a0\n    at android.view.LayoutInflater.createView(LayoutInflater.java:647)\u00a0\n    at com.android.internal.policy.PhoneLayoutInflater.onCreateView(PhoneLayoutInflater.java:58)\u00a0\n    at android.view.LayoutInflater.onCreateView(LayoutInflater.java:720)\u00a0\n    at android.view.LayoutInflater.createViewFromTag(LayoutInflater.java:788)\u00a0\n    at android.view.LayoutInflater.createViewFromTag(LayoutInflater.java:730)\u00a0\n    at android.view.LayoutInflater.rInflate(LayoutInflater.java:863)\u00a0\n    at android.view.LayoutInflater.rInflateChildren(LayoutInflater.java:824)\u00a0\n    at android.view.LayoutInflater.inflate(LayoutInflater.java:515)\u00a0\n    at android.view.LayoutInflater.inflate(LayoutInflater.java:423)\u00a0\n    at com.wdullaer.materialdatetimepicker.date.DayPickerGroup.init(DayPickerGroup.java:50)\u00a0\n    at com.wdullaer.materialdatetimepicker.date.DayPickerGroup.(DayPickerGroup.java:32)\u00a0\n    at com.wdullaer.materialdatetimepicker.date.DatePickerDialog.onCreateView(DatePickerDialog.java:370)\u00a0\n    at android.app.Fragment.performCreateView(Fragment.java:2508)\u00a0\n    at android.app.FragmentManagerImpl.moveToState(FragmentManager.java:1279)\u00a0\n    at android.app.FragmentManagerImpl.moveFragmentToExpectedState(FragmentManager.java:1557)\u00a0\n    at android.app.FragmentManagerImpl.moveToState(FragmentManager.java:1618)\u00a0\n    at android.app.BackStackRecord.executeOps(BackStackRecord.java:807)\u00a0\n    at android.app.FragmentManagerImpl.executeOps(FragmentManager.java:2386)\u00a0\n    at android.app.FragmentManagerImpl.executeOpsTogether(FragmentManager.java:2181)\u00a0\n    at android.app.FragmentManagerImpl.removeRedundantOperationsAndExecute(FragmentManager.java:2136)\u00a0\n    at android.app.FragmentManagerImpl.execPendingActions(FragmentManager.java:2043)\u00a0\n    at android.app.FragmentManagerImpl$1.run(FragmentManager.java:719)\u00a0\n    at android.os.Handler.handleCallback(Handler.java:790)\u00a0\n    at android.os.Handler.dispatchMessage(Handler.java:99)\u00a0\n    at android.os.Looper.loop(Looper.java:164)\u00a0\n    at android.app.ActivityThread.main(ActivityThread.java:6494)\u00a0\n    at java.lang.reflect.Method.invoke(Native Method)\u00a0\n    at com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:438)\u00a0\n    at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:807)\u00a0\n``. The error occurs because theImageButton`s in mdtp_daypicker_group.xml have the following attribute reference:\nandroid:background=\"?attr/selectableItemBackgroundBorderless\"`\nThis works when the style theme of the activity is Theme.AppCompat.Light.NoActionBar, but not with e.g. @android:style/Theme.Material.Light.\nAs a workaround, you can add the follwing definition to your AppTheme:\n<item name=\"selectableItemBackgroundBorderless\">?android:attr/selectableItemBackgroundBorderless</item>. @wdullaer Thanks for your work.\nThe workaround did not work with Android 4.1. I had to set the selectableItemBackgroundBorderless item to a color.. The problem is that it's done with a toUpperCase() hard-coded in Java and not with textAllCaps=true in the styles definition, like for mdtp_ActionButton.Text. The best solution would be to use a variable (attribute reference) in the styles for all occurences of textAllCaps.. @wdullaer Thanks, I will use that.. ",
    "moda20": "I did find a way to make it work, by changing \nandroid:background=\"?attr/selectableItemBackgroundBorderless\"\nto \nandroid:background=\"?android:attr/selectableItemBackgroundBorderless\"\non mdtp_daypicker_group in the two ImageButton. ",
    "albka1986": "@wdullaer please look at the issue. I use the latest version (3.6.4) of your library and I cleaned/rebuilt my project. Maybe these properties from another 3rd part library.  I will investigate it but looks like from yours.. @wdullaer I've found. It's problem in another library - Android-RecurrencePicker.\nYou can close this ticket. Thanks). @kapparition \nYou can find the solution here and see other details about the issue:\nhttps://stackoverflow.com/a/52757373/6799504. ",
    "kapparition": "\n@wdullaer I've found. It's problem in another library - Android-RecurrencePicker.\nYou can close this ticket. Thanks)\n\nwhats the problem was, i am facing the same problem. ",
    "Shouheng88": "I agree. \nBut my product manager wants to add a third button to the bottom witch is used to navigate to today. I noticed that the onDayOfMonthSelected(int,int,int) method was called in onDayTapped(CalendarDay), witch is used to update the selection UI. I added a third button into the bottom layout and called the onDayOfMonthSelected(int,int,int) method when the click event is invoked, then the problem was solved.. I agree with you. This an awesome project and it helped me a lot. \nThanks again.. ",
    "bagus-setyawan": "Thanks for your reply and your beautiful project, so this is a compatibility issue. I am targeting sdkVersion 27 and i am using the 3.6.4 release, its work. Will be using the latest for next project. Cheers... !. ",
    "roakoth": "I am also experiencing the same error. I have minSdkversion 15. And am using 'com.wdullaer:materialdatetimepicker:3.6.4' it builds well but whenever i run the project i get error of android resource linking failed.\nHow do i solve this?. I was experiencing the same problem yesterday.\nIts okay\nOn Tue, Mar 12, 2019, 11:44 AM wdullaer notifications@github.com wrote:\n\nPlease create a new issue, rather than commenting on old closed ones.\nBased on that comment, there's not much I can do.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/wdullaer/MaterialDateTimePicker/issues/538#issuecomment-471906156,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ARYgXFbcWZwDCoQdA7nRsndDCYokMMlaks5vV2j6gaJpZM4Xe3KY\n.\n. \n",
    "ArmanRey": "Hey! I was facing the same issue. Use compile'com.wdullaer:materialdatetimepicker:1.4.2' instead of latest version.. ",
    "zacader": "What should I do with it?. thank u. ",
    "TylerMcCraw": "You need to move the compileOptions block to the inside of your android block.\nAlso, do you have the following options set in your gradle.properties file?\nandroid.useAndroidX=true\nandroid.enableJetifier=true. ",
    "MinaWadee": "i want to know if this library support arabic or not \nlike time and date written with arabic . ",
    "ricardorover": "Hi guys, I was having the same problem, did a quick look into it. Looks like getMostVisibleMonth() is returning null in some scenarios, probably only before view layout.\nNot sure what is the correct fix, but to keep my app from crashing I did the small fix referenced above, in my fork. Probably some other errors may still appear, because getMostVisiblePosition() (at DayPickerView:259) also uses getMostVisibleMonth() and I think it does not expect null as well.\nHope it helps somehow.. Looks nice @wdullaer. I did a little bit of tests on Android 8.1 and Android 4.1 (devices), and on Android 9 (emulator), the crash did not happen in my test using master branch (commit 0c31fd1).\nThanks for the fix, and thanks for the useful lib.. ",
    "steve-the-edwards": "Upvote this as I'm having the same issue.. Yes, thanks @ricardorover , but any update here @wdullaer ?  Would be great to remain using your maven release version.. Working for me as well.\nTo build the release version of the .aar from master I had to remove two lines from layout/mdtp_date_time_picker_dialog.xml  (is it used?)\nlayout_scrollPages from TabLayout\nand the scrollBehaviour string from the ViewPager. +1 this is happening in my application as well with showYearPickerFirst(true) on latest version 4.1.1.  Not every time, but it has come through from user reports.. To me - it looks the same as https://github.com/wdullaer/MaterialDateTimePicker/issues/554.  Can you add the null check to prevent this while we continue to track down the root?. ",
    "weiwenhuaming01": "Thank's a lot,@ricardorover . same question. ",
    "sootood": "i tried to use 4.1.0 but it dosent work \nwhat information do you need to help i can send you ,\nabout build configuration i can share my gradle build app\n. ",
    "sajjadjaved01": "Thanks man i have used month + 1 \ud83d\ude0a. ",
    "no-body": "Oh yes, it's certainly the reason.. So this library can't be used on lower API level ?\n(I tried wdullaer:materialdatetimepicker:3.6.8 but I have different error too). I know, but I'm not working on a play store app and the device I'm using is on Android 7, so API 24... ",
    "1715": "Yeah, I will be happy to implement my own, I just wanted to check with you if it's possible with your out of the box solution.\nI think that there is a point in having such a functionality. In my case, I am allowing user to move around his notebook sorted by date. But the datepicker might be used as well. So in a state where the user made no notes yet the datepicker window will be inactive. Of course, you might just prevent the user from accessing datepicker when no dates are available, you are right.\nThanks for quick reply. ",
    "balajikarthiq": "But supporting androidx and not android.support.v4 ?. ",
    "him2016": "I have added this in the gradle file:\nimplementation 'com.wdullaer:materialdatetimepicker:4.1.1'\nI guess it is the latest version..\nSame error is thrown:\nhttps://github.com/wdullaer/MaterialDateTimePicker/issues/554. @wdullaer Did you get time to have a look?. Issue resolved now.. thanks.. keep up the good work.. . ",
    "ersps25": "Can you please share the old version, so that I can use it with support library.. ",
    "AbdelfettahBentaleb": "I find some solutions on Stack overflow say that i have a migration conflicts between Androidx and support library. \nmanifest merger failed\nshould I Migrate all my app to Androidx to use Material DateTime Picker Library ?\n. I solve the issue by Migrate my app to AndroidX Library.\nMigrate to AndroidX\nMaybe is a tough decision, but as mentioned in the documentation:\n\"The support library artifacts are being deprecated and all future development is going into AndroidX, so there's no avoiding this migration\".. ",
    "ItzNotABug": "I ended up tweaking the Time Label TextView's style..\nAlso, thanks for the great library.. :D. "
}