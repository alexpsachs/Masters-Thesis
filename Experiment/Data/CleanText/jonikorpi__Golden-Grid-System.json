{
    "jonikorpi": "Heh, good point. I'll take a look at removing the extra elements. Removed the double \"menu\". Thanks for the heads up!\n. Removed most of the elements you listed. Left the HTML5 elements in because I don't trust browser vendors to not muck around with them in the future.\nhttps://github.com/jonikorpi/Golden-Grid-System/commit/2fd13e8bb5eb8b1fdcad1602c05ca098fabc4235\n. And an awesome version it is. Merged!\n. Oh. You're awesome. Merging this and adding it to the site when I get the time!\n. Removed the font-family declaration altogether. https://github.com/jonikorpi/Golden-Grid-System/commit/20cf643087c765af69680a72c06c2a8ce38351ba\n. Right, forgot about that. Cheers.\n. Thanks for pointing this out!\nI don't currently use SASS myself, so I can't test this out properly. I'll make a note to convert all the \"LESS mixins\" into proper SCSS mixins when I get the chance to do so.\n. Welp, that certainly isn't right. Was due to a missing @ from the LESS source. Thanks.\nFixed in https://github.com/jonikorpi/Golden-Grid-System/commit/60710710a2cacc52b1762568f4666d9170917abc\n. The problem with \"none\" is that it disables text-size changing entirely in, for example, desktop Safari. \"100%\" also fixes the iOS text-size problem, but doesn't disable text-size changing in desktop browsers.\nAs far as I can tell from using \"100%\" for the past few months, it fixes the issue just fine. Is it not working for you then?\n. Oh. You mean the zooming bug? That's entirely different from the text-size scaling behaviour: without -webkit-text-size-adjust: 100% (or none) Mobile Safari also increases the font-size of the page a little bit in landscape. http://www.456bereastreet.com/archive/201012/controlling_text_size_in_safari_for_ios_without_disabling_user_zoom/\nThe zooming bug has no real fix, since it's an actual bug. There's a hacky workaround available here: http://adactio.com/journal/4470/\n. I use zooming all the time myself, even on mobile sites, usually to zoom in on images or other small details. Sites that disable zooming piss me off like nothing else. I have perfectly normal eyesight, mind you. Can't even imagine how annoyed people with bad eyesight must get.\n. Oh, heh, I actually read your question wrong there, sorry.\nThe reason I don't use the hack is that it's hacky and makes zooming feel weird. It usually makes my first pinch-to-zoom gesture get ignored somehow, and only kicks in on the second try.\n. Cool. Good work. :)\n. ",
    "mikker": "I have made a .scss version that will fit perfectly into Rails :)\nhttps://github.com/mikker/Golden-Grid-System\n. :)\n. ",
    "frankpf": "Mixins lead to duplicated code easily, while @extend directives do it all in a DRY approach. It's better for performance, file size and maintenance.\nThe compiled CSS will be different, but I think it would be better if GGS used the best features of each preprocessor.\nExample:\nSASS with mixins (@include and @mixin):\n``` css\n/ Source /\n@mixin huge {\n    font-size: 100px;\n}\n.ie h1 {\n     @include huge;\n}\n/ Compiled CSS /\nhuge {\n    font-size: 100px;\n}\n.ie h1 {\n    font-size: 100px;\n}\n```\n\nSASS with @extend directives:\n``` css\n/ Source /\n.huge {\n    font-size: 100px;\n}\n.ie h1 {\n    @extend .huge\n}\n/ Compiled CSS /\n.huge, .ie h1 {\n    font-size: 100px\n}\n```\nAs you can see, in this example the filesize is almost insignificant, but in real CSS files mixins compile to a lot bigger and unperformant files.\n. ",
    "mysterycommand": "Yeah, using mixing produces more code \u2026 more CSS declarations, that's true. I was simply pointing out that this in Less:\ncss\n.huge {\n    /* 42px / 48px */\n    font-size: 42 / @em;\n    line-height: (@line*2) / 42 * 1em;\n}\n/* ... */\n.ie h1 {\n    .huge();\n    margin: (48/42*1em) 0 (24/42*1em);\n}\n\u2026 is equivalent to this in Sass:\ncss\n@mixin huge {\n    /* 42px / 48px  */\n    font-size: #{42 / $em}em;\n    line-height: ($line *2) / 42  * 1em;\n}\n/* ... */\n.ie h1 {\n    @include huge;\n    margin: (48/42*1em) 0 (24/42*1em);\n}\n\u2026 I know mixins produce more code, but they also produce different code than @extend, and in this particular case, using @extend .huge; inside a media query pulls the h1 declaration out of the media query \u2026\u00a0which could have unexpected/unwanted consequences.\n. ",
    "xtalx": "With sass you don't HAVE to compile mixins to CSS. The sass implementation of GGS should convert all of the classes like .huge, .massive, .wrapper etc. to mixins in a partial. If you aren't going to use those classes in your markup there is no need to define them as classes.\nA simple example would be to create a directory called \"partials\" add a file called _type-presets.sass (or scss) where you define the type preset mixins.\n``` sass\n=huge \n    / 42px / 48px  /\n    font-size: #{42 / $em}em\n    line-height: ($line *2) / 42  * 1em\n...\n```\nThen you can @import \"partials/type-presets\"\nand use \n``` sass\nMyOwnMarkup\n+huge\n\n```\nThen your actual CSS file won't have a bunch of unused classes.\nMaybe it's out of scope for this project or repo but the current GGS.scss file, although helpful and appreciated, isn't that much of a value add as it doesn't really leverage sass/scss as much as it could. It would be nice to have something like the\ncompass-less-plugin for GGS. I will try to get the ball rolling on that and do it without making it a compass plugin (just sass/scss).\n. ",
    "jayf": "Having slept on this, I've forked and am going to create several mixins to add 2-3 higher levels of abstraction for defining how chunks sit as rows or columns on each 4/8/16 grid. I'd like to see if I can create and use a very high, design-oriented, level of abstraction, like \"guides\" and/or \"zones,\" but know I'll also need some not quite as high-level mixins for rows and columns, too.\nSo, not sure yet if these are going to be anywhere near boilerplate-worthy, or just specific to how I work!\n. ",
    "tatygrassini": "I was just trying to fix the weird mobile iOS bug when you view the site on landscape mode. Of course, \"maximum-scale=1\" is not an option. I was thinking about a CSS workaround. \nHow about applying the \"none\" declaration to something like @media screen and (min-width: 20em) ?\n. Great hack right there! Bookmarked to use it with GGS. \nAfter some reading, I wonder: if a designer starts a project using a mobile-first approach, when a mobile user change the device orientation, why would the user have the need to zoom in? (Assuming the design is perfectly readable and clear) I see some sort of dilemma here, more common sense related than technical.\nYou must have your reasons to exclude Shi Chuan's hack from your project, mind sharing why?\n. I use zooming the same way, except when designs have good and clear font size, 100%-wide images, etc. The hack you mentioned before supports zooming and fixes the landscape orientation bug.\nThanks a lot for the feedback and for the GGS project ;)\n. Oh yeah, I'm aware of the \"first pinch\" bug, I appended Jeremy Keith's version (http://principiagastronomica.com/scripts/global.js) to the GGS.js file and it worked like a charm, no 2nd pinch needed. I'm testing this with an iPod Touch 2G, running iOS 4.2.1.\n. ",
    "paulburgess": "Yes, this part is confusing me a tad... any help on how you calculate that margin would be great!\nI understand the target / context formula but can't see how it applies here.\n. Ah yes indeed, once I got into the SASS file it made more sense. Your comment helps too - thanks very much.\n. ",
    "torkiljohnsen": "The calculations can be seen in the LESS and SASS stylesheet variants. I /think/ Joni uses LESS in his work, and that CSS files in this project are compiled LESS files. LESS and SASS are great tools, because they allow you to use all kinds of simplifying helpers in CSS, like functions, variables, mixins and more :)\nRegarding how he ends up with the value 27.7777777778%:\nIf you check out GGS.less, you'll see that 1 column width is calculated as 100%/18 (\u2248\u00a05.55555556%)\nThen, in the 87em media query, this is added:\nheader, #twoway {\n    margin: 0 @column*5;\n}\n5.55555556% * 5 \u2248 27.7777778%\n. Sorry, got a bit eager there :) \n. ",
    "Zearin": "Ooooh, good stuff!   \n@jonikorpi , You up for this?\n. Ping.  \nYou around, @jonikorpi ?\n. ping!  Calling @jonikorpi \n. @jonikorpi ping\n. (Was just reviewing old Pull Requests on GitHub.  Came across this one.)\n\nHmm, I was quite interested in this project until I noticed it hasn't been updated in over a year.. and there are helpful pull requests being ignored. That's a shame : \\\n\n@benjibee Agreed!\n. ",
    "rahearn": "+1\n. ",
    "benjibee": "Hmm, I was quite interested in this project until I noticed it hasn't been updated in over a year.. and there are helpful pull requests being ignored. That's a shame : \\\n. @barraq this looks great, actually. Thanks for the suggestion!\n. ",
    "barraq": "I personally started using Susy 2 which lets you generate the type of grid you want. With Susy2 you can easily generate the equivalent of GGS ;)\n. ",
    "aripalo": "phew... luckily I found this bug & fix. Thanks @hunterman! I already started to think that I don't somehow grok the box-sizing after all these years :D\n. "
}