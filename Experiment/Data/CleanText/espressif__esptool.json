{
    "themadinventor": "I can't say I have seen this error before but I'll look into it. There's some changes in the pipeline that I'll try to publish soon :)\n. merged #5 \n. I have tested it with a simple assembly routine:\n0c62                    movi.n  a2, 6\n        402201                  slli    a2, a2, 28\n1:      4c03                    movi.n  a3, 64\n        324200                  s8i     a3, a2, 0\n        c6fdff                  j       1b\nThat routine will continously write 0x40 to the UART TX register, and that works.\nIt is much harder to run a complex (real) application, because the binary you download to RAM must link to the correct symbols in the irom0 blob in flash. And even then, I'm not sure that the bootloader actually enables that magic flash memory controller (that maps irom0 to 0x4020xxxx), when you boot into UART mode.\nI think there's more to discover about the chip and what the bootloader actually does.\n. Nice that you got it working!\nActually, I dumped the ROM three weeks ago (http://www.esp8266.com/viewtopic.php?f=6&t=39&hilit=dump&start=10#p327) and then wrote an processor plugin for IDA to disassemble it (https://github.com/themadinventor/ida-xtensa), but it still takes some time and effort to analyze :)\n. merged #5 \n. morganrallen: Are you sure you are providing valid addresses for the read_mem command?\nIt appears to me that stblassitude tried to use flash memory offsets, whereas read_mem expects system memory addresses. Commanding the bootloader to read or write to some invalid memory ranges will raise an exception and hang the device.\nAnyway, the firmware image stored at offset 0x0 in flash will be loaded to RAM at 0x40100000 by the bootloader, while the \"extended firmware data\" at flash offset 0x40000 will be accessed through a shadowing mechanism at address 0x40240000.\n(Some info on the ESP8266 memory map and flash layout: https://github.com/esp8266/esp8266-wiki/wiki/Memory-Map)\nN.B read_mem, write_mem and load_ram are not very useful unless you are doing low-level hacking :)\nPlease also note that the flash shadowing mechanism isn't enabled when in the bootloader, that is, reading at 0x4024.... will return 0.\n. Great work, thanks! I can't help but think that \\x01\\x06 is an (seemingly non-critical) error state that should be avoided, but accepting it (as flashing succeeds anyway) is probably a valid pragmatic solution :)\n. Sweet! I began on a solution using the elffile library, but I think everyone that'll use this feature will have the toolchain installed anyway :)\n. Should be fixed by e1abbf64abe76513ad6e66bb34b7b55229198355. Pads writes to the nearest multiple of 256.\n. What was your command line?\n. Okay, I've got Mac OS X 10.9 here for testing. But what was the complete command line (with arguments) you used for invoking esptool? write_flash expects tuples of address, filename. On a side note, the readme is not really up to date; I'm about to fix that. \n. Yeah, the syntax is write_flash [address] [filename] (repeated for each blob), as in\n./esptool.py write_flash 0x00000 my_app.elf-0x00000.bin\nor\n./esptool.py write_flash 0x00000 my_app.elf-0x00000.bin 0x40000 my_app.elf-0x40000.bin\nThe assertion failure is not very user-friendly, though :)\nPlease reopen if it still doesn't work.\n. Espressif forked esptool for their python-based flashing tool. I haven't checked what changes they have done to the protocol code, but they are of course in a much better position of fixing bugs as they have the source of the bootloader ROM. I don't have a 64Mbit module at hand but I'll have a close look at what  Espressif have done when I'm back from my vacation.\n. Status update: I've ordered an Olimex board to test on. Hopefully I'll figure this out by the end of the week or so. (PR:s are of course appreciated if anyone have solved it already ;) )\n. Sorry about the delay.\nI believe this bug is now completely fixed by 41dba2047d97b036f406f8561fd082465c4cfefb. The trick is apparently to update the header in the binary blob that specifies the flash chip size.\nPrevious versions of esptool only set this field in elf2image, whereas Espressif's fork updated the binary on the fly when flashing. This behaviour is now also implemented in esptool.\nThe user-facing change is to specify the -fs [size] option when running write_flash. Note that the flash size is specified in Mbits, so flashing NodeMCU to a 2 MiB Olimex module is\nesptool.py write_flash -fs 16m 0 nodemcu_20150127.bin\nAlso, it might perhaps help the NodeMCU firmware to perform a chip erase (esptool.py erase_flash) before flashing, and/or do a file.format in the lua shell.\nI'll add all this to the readme asap.\nThank you for your feedback and patience and for your interest in esptool! :)\n. I'll close this for now; just write a note if you experience any problems.\n. Fixed by 285ec621ff94c47d1cffa241a09902f35a9c0baf (reverting shebang line) and e20cc5e8c61dcd94b4ea0b331761632957c0c1fc (support for xt toolchain). esptool.py has always been executable in this repo ;)\n. (Hopefully) fixed by\n7468a170290cd56a592a6f408f9d926447d07773\n. Fixed by\n939712ae5511eaae8b8021d68376f71a464c723e\nThanks!\n. @InnovativeIdeas :\n\nI modified esptools to cut down on the sync and also to scan for header rather then just expect it.\n\nNice tweak. Scanning for 0xc0 only works during the connect phase; if we lose sync later during a session we'll probably discard the response.\nYou wouldn't mind sending a PR? Otherwise I'll implement something similar when I get time.\n. @alesrebec: Good to hear that you solved it!\nIt isn't possible*, as far as I can tell, to completely brick the ESP8266. The bootloader resides in ROM and executes before the SPI flash is even initialized.\n(The attentive hacker would point out that one could flash an image that specifies an invalid SPI flash clock rate and/or interface width, but looking at the routine at 0x40004644 in ROM, it looks like it'll still use a hard coded configuration 0x5 when booting from UART.)\n(* Yeah, it might be possible to trash the OTP ROM containing the MAC address, but not using esptool.)\n. @Jeshwanth Did you find a solution? I think I saw you on #esp8266, though a couple of hours too late...\n. Been there, reverted that (285ec621ff94c47d1cffa241a09902f35a9c0baf). It'll always break on some platforms. There is, as far as I can tell, no completely platform independent way of solving this in the shebang line. There are Arch specific fixes available though (https://wiki.archlinux.org/index.php/python).\nI'll try to implement it inside the script when I have time. PRs are of course welcome, as are convincing arguments that I'm wrong :)\n. @pfalcon Sorry about that, fixed in themadinventor/ida-xtensa@345236bac33f193a6ae67328e49c828af8d80eb9.\n. The shebang line stuff is a clusterfsck. /usr/bin/env python2 does not work out of the box on f.ex. Mac OS 10.9 (at least on my system). Specifying python2 is of course correct, but it'll always break on some systems, and still, citing PEP394:\n\nfor the time being, all distributions should ensure that python refers to the same target as python2\n\nI guess the best solution is to make esptool compatible with both Python 2 and 3, keeping it python, and if not possible, switch to python3 and force users to install it.\n. Seems to me that the stack trace is just longer because esptool is invoked through a stub generated by setuptools; the last two rows or so in the trace are the same. It is perhaps time to implement proper error messages... ;)\n. Most if not all issues reported around this error have turned out to be about bad wiring and/or power supply.\nHowever, letting esptool control the reset and boot mode pins through RTS/CTS might not work on some platforms, so controlling those pins \"in hardware\" is probably a good troubleshooting step, but it sounds to me that you're already doing that.\n. I wouldn't recommend using a voltage regulator for level translation, it is probably to slow and has a high forward voltage. If you don't have a 3.3v FTDI cable/module or level translation chip at hand, try making a voltage divider from two resistors.\nTry loopbacking your serial interface by shorting Tx ro Rx, connecting with a terminal emulator (at 115kbaud) and see if you can receive the characters you type ungarbled.\nI don't actually own an arduino, otherwise I would have tried to reproduce your setup :/\nHope this helps :)\n. Great, thanks!\n. Hi d-a-v,\nI myself wrote a simple/stupid terminal app in Python that sets the status lines. A side effect is that it allows arbitraty baudrates (e.g 74400 used by the bootloader), which picocom (my otherwise preferred serial app) doesn't.\nI must admit that the pin assignment is also arbitrary (actually inherited from the serial adapter I happened to have at hand) so I guess this scheme should be deprecated. The NodeMCU team have another solution for which support in esptool will be implemented/merged.\n. The schematic is in their repo https://github.com/nodemcu/nodemcu-devkit/blob/master/Documents/NODEMCU_ESP12.PDF\nIt shows both the discrete logic and the corresponding truth table.\n. Great work @projectgus, thanks!\nSeems like my reference hardware setup is bad; it is too forgiving, I usually can't reproduce the connectivity problems ;)\nI feel a little bad about not being able to test all module/adapter/os permutations atm, I'm thinking about setting up some kind of multi-platform CI. It would require a few boxes and modules though.\n. oh, good catch! thanks!\n. Cool! I haven't kept up with the sdk releases (too little free time to play with the esp atm) so I can't test this, but it looks innocent enough :)\n. The call_user_start symbol is missing; either it has been renamed in the SDK, or it is missing due to an incorrect link. See also #24.\nI'm thinking of adding a command line argument to specify the entry point name and/or adding a list of entry point names to look for.\n. What kind of chip id? esptool have been able of reading both the OTP MAC address and the SPI flash manufacturer id for some time :)\n. Thanks! I've been inexcusably absent for a while now...\n. ",
    "0ff": "Exactly the same thing also happens for me. The update always runs smoothly, but I get this error.\nMaybe this is related to the fact that I'm using an esp8266EX instead of the non-EX variant?\n. Oh, you have to write both the .output/eagle/debug/image/eagle.app.v6.flash.bin (dest=0x0) AND the .output/eagle/debug/image/eagle.app.v6.irom0text.bin (dest=0x40000) to the module, then it works fine :)\nYou might need to reboot the module between the two files.\n. I think there's more to discover about the chip and what the bootloader actually does.\nAnd now you can :-)\nI was in fact able to compile a binary so that it would run from RAM (by stripping out all the espressif libs) and use that to dump the boot loader.\nFor details and files see: http://www.esp8266.com/viewtopic.php?f=13&t=214\n. ",
    "zarya": "0ff i am able to upload the wi07c.rom to a EX without issues but the stuff coming from the compiler in the vm i am not able to upload\n. check\n. oke i can indeed confirm that it work\n. ",
    "i7sid": "I can confirm this issue.\nJust recently installed the SDK using this tutorial: https://github.com/esp8266/esp8266-wiki/wiki\nWithin the Makefile the code is as follows:\nflash: firmware/0x00000.bin firmware/0x40000.bin\n        -$(ESPTOOL) --port $(ESPPORT) write_flash 0x00000 firmware/0x00000.bin\n        sleep 3\n        -$(ESPTOOL) --port $(ESPPORT) write_flash 0x40000 firmware/0x40000.bin\nmake flash has the following output (always, not from time to time):\n```\n/home/sid/esp8266/esptool/esptool.py --port /dev/ttyUSB0 write_flash 0x00000 firmware/0x00000.bin\nConnecting...\nErasing flash...\nWriting at 0x00000000... (0 %) \nWriting at 0x00000400... (3 %) \n[...]\nWriting at 0x00007800... (93 %) \nWriting at 0x00007c00... (96 %) \nLeaving...\nTraceback (most recent call last):\n  File \"/home/sid/esp8266/esptool/esptool.py\", line 351, in \n    esp.flash_finish(False)\n  File \"/home/sid/esp8266/esptool/esptool.py\", line 188, in flash_finish\n    raise Exception('Failed to leave Flash mode')\nException: Failed to leave Flash mode\nmake: [flash] Error 1 (ignored)\nsleep 3\n/home/sid/esp8266/esptool/esptool.py --port /dev/ttyUSB0 write_flash 0x40000 firmware/0x40000.bin\nTraceback (most recent call last):\nConnecting...\n  File \"/home/sid/esp8266/esptool/esptool.py\", line 299, in \n    esp.connect()\n  File \"/home/sid/esp8266/esptool/esptool.py\", line 136, in connect\n    raise Exception('Failed to connect')\nException: Failed to connect\nmake: [flash] Error 1 (ignored)\n```\nIt does not seem to leave the flash mode correctly. From that point on, I can not upload code anymore until the next power circle (or reset I suppose).\nHowever, there is a trick: If I manage to do a power circle within the 3 second sleep then the program uploads fine (although the errors appear) and the program works.\nAny ideas how I can circumvent this hack?\nNote that, I also got the EX version of the chip. And I also tried to upload the original firmware, resulting in the same issue.\n. ",
    "sej7278": "i have this exact same problem on a v1 (00160901) board, it was running ok accepting AT commands until i used esptool.py, now it seems stuck in flash mode as it won't accept AT commands and returns gibberish and then \"ready\" on boot.\npower cycling makes no difference and the only way to get to the 2nd flash is to power cycle in the sleep(3) bit, but it still doesn't actually complete:\n$ esptool.py --port /dev/ttyUSB0 write_flash 0x00000 firmware/0x00000.bin\nConnecting...\nErasing flash...\nWriting at 0x00008400... (97 %) \nLeaving...\nTraceback (most recent call last):\n  File \"esptool.py\", line 351, in <module>\n    esp.flash_finish(False)\n  File \"esptool.py\", line 188, in flash_finish\n    raise Exception('Failed to leave Flash mode')\nException: Failed to leave Flash mode\nMakefile:139: recipe for target 'flash' failed\nmake: [flash] Error 1 (ignored)\nsleep 3\nesptool.py --port /dev/ttyUSB0 write_flash 0x40000 firmware/0x40000.bin\nConnecting...\nErasing flash...\nWriting at 0x00063c00... (99 %) \nLeaving...\nTraceback (most recent call last):\n  File \"esptool.py\", line 351, in <module>\n    esp.flash_finish(False)\n  File \"esptool.py\", line 188, in flash_finish\n    raise Exception('Failed to leave Flash mode')\nException: Failed to leave Flash mode\nMakefile:139: recipe for target 'flash' failed\nmake: [flash] Error 1 (ignored)\n. ",
    "3s1d": "Hi,\nI forked the project and extended it so that you do not need to power cycle manually. No more reset and bootloader buttons are required. U only need two more wires.\nCheck it out: https://github.com/3s1d/esp_prog\nJuergen\n. As a side note: I was only able to verify that for a 32Mbit flash size. The \"original\" tool only gives size options of up to 32Mbit.\nThanks for investigating that.\n. ",
    "JoanPeturPetersen": "I experienced the same problem. \nErasing flash...\nWriting at 0x00008400... (97 %)\nLeaving...\nTraceback (most recent call last):\n  File \"esptool.py\", line 353, in <module>\n    esp.flash_finish(False)\n  File \"esptool.py\", line 190, in flash_finish\n    raise Exception('Failed to leave Flash mode')\nException: Failed to leave Flash mode\nPut a print statement in the code, and the command(ESPROM.ESP_FLASH_END, ...) method returned:\n(538052359, '\\x01\\x06')\n. ",
    "pfalcon": "5 fixes this properly (based on several independent reports of '\\x01\\x06' being returned).\n. #5 fixed this for me.\n. Thanks!\nYeah, I guess keeping dependencies low and reusing existing well-known tools makes sense. But it's encapsulated in a class, so alternative implementations can be provided, if needed.\nBtw, if you think that a command should be named a bit differently, feel free to rename it - just would be nice to do that soon, and not break peoples' usage of it.\n. >  I might put some time into investigating how messy this option would be...\nPlease start with converting the source to use standard Python 4-space indent instead of tabs.\n. Oops, sorry, I believe at one time there were, and in another @themadinventor's project, ida-xtensa, they're still there. False alarm, anyway.\n. @themadinventor : Thanks!\n. Well, if you look at that code, call_user_start is a special, magic function, the real start address (aka entry point) to which the vendor bootloader jumps to start the app. So, it's not recommended to get rid of the standard implementation of that function (you may need to pull it in explicitly using appropriate linker switch). And if you did get rid of it, and are sure you're right with that, that I suggest to just call you own entrypoint (or its wrap) such to avoid confusion. (I myself would love to get rid of all that vendor mess and have just normal  \"main\", but as you know, there's rather long way to that, so if we can't do it right, let's stick to vendor's stuff, and not invent something 3rd yet).\n. Ah, I see. I'd still wonder why --gc-sections removes symbols information - symbols are not in a section, it is separate structure in ELF file, right? But if you say it does, then well, something needs to be done for sure.\nI'd suggest starting with ability to override entry point address - \"make_image\" already takes --entrypoint, there it's required param, \"elf2image\" can take it optional, as override. Then look if it's possible to have sed one-liner to extract it from a map file, if not, add optional ability to parse map file to esptool indeed. My 2 cents ;-).\n. See #24 which touches this somehow.\n. My overall stats is that 2 out of 3 modules I used have this issue.\n. I'm on ubuntu and I already turned off all the serial port plug&play crap - at least there're no syslog messages that something pokes into newly connected /dev/ttyUSB* device.\n. Ok, test 1:\nesptool.py --port /dev/ttyUSB0 erase_flash\n[power cycle board]\nesptool.py --port /dev/ttyUSB0 write_flash 0 build/firmware.elf-0x00000.bin 0x10000 build/firmware.elf-0x10000.bin\nConnecting...\nErasing flash...\nWriting at 0x0000d400... (100 %) \nWritten 55296 bytes in 60.85 seconds (7.27 kbit/s)...\n. Test 2:\n```\nKnown good, ~complete firmware dump\n$ ls -l wi07c.rom \n-rw-rw-r-- 1 pfalcon pfalcon 524288 Sep  6  2014 wi07c.rom\ntime esptool.py --port /dev/ttyUSB0 write_flash 0 wi07c.rom\n...\nreal    9m35.625s\n[power cycle board]\ntime esptool.py --port /dev/ttyUSB0 write_flash 0 build/firmware.elf-0x00000.bin 0x10000 build/firmware.elf-0x10000.bin\nConnecting...\nErasing flash...\nWriting at 0x0000d400... (100 %) \nWritten 55296 bytes in 60.85 seconds (7.27 kbit/s)...\n```\nSo, no, erasing flash or flashing in its entirety with a known good firmware doesn't help.\n. Thanks.\nSo, I diconnect builtin CH341 adapter via jumpers, and connect \"known good\" (used with a 1 of 3 modules with which I didn't have problems) PL2303 adapter:\n```\ntime esptool.py --port /dev/ttyUSB0 write_flash 0 build/firmware.elf-0x00000.bin 0x10000 build/firmware.elf-0x10000.bin\nConnecting...\nErasing flash...\nWriting at 0x0000d400... (100 %) \nWritten 55296 bytes in 5.35 seconds (82.61 kbit/s)...\nErasing flash...\nWriting at 0x0004f000... (100 %) \nWritten 259072 bytes in 25.21 seconds (82.20 kbit/s)...\nLeaving...\n0.25user 0.06system 0:33.16elapsed 0%CPU (0avgtext+0avgdata 9220maxresident)k\n```\nSo, some USB-UART chips don't play well with esp8266 auto-bauding. I invited @projectgus to comment on this issues, as he contributed some patches to esptool to workaround ch340 issues.\n. For completeness, going higher-baud (with the same PL2303 adapter):\n```\ntime esptool.py -b230400 --port /dev/ttyUSB0 write_flash 0 build/firmware.elf-0x00000.bin 0x10000 build/firmware.elf-0x10000.bin\nConnecting...\nErasing flash...\nWriting at 0x0000d400... (100 %) \nWritten 55296 bytes in 2.84 seconds (155.95 kbit/s)...\nErasing flash...\nWriting at 0x0004f000... (100 %) \nWritten 259072 bytes in 13.34 seconds (155.37 kbit/s)...\nLeaving...\n0.26user 0.04system 0:19.35elapsed 1%CPU (0avgtext+0avgdata 9224maxresident)k\n```\n```\ntime esptool.py -b460800 --port /dev/ttyUSB0 write_flash 0 build/firmware.elf-0x00000.bin 0x10000 build/firmware.elf-0x10000.bin\nConnecting...\nErasing flash...\nWriting at 0x0000d400... (100 %) \nWritten 55296 bytes in 1.53 seconds (288.97 kbit/s)...\nErasing flash...\nWriting at 0x0004f000... (100 %) \nWritten 259072 bytes in 7.23 seconds (286.70 kbit/s)...\nLeaving...\n0.18user 0.06system 0:11.88elapsed 2%CPU (0avgtext+0avgdata 9224maxresident)k\n```\n```\ntime esptool.py -b921600 --port /dev/ttyUSB0 write_flash 0 build/firmware.elf-0x00000.bin 0x10000 build/firmware.elf-0x10000.bin\nConnecting...\nErasing flash...\nWriting at 0x0000d400... (100 %) \nWritten 55296 bytes in 0.91 seconds (486.47 kbit/s)...\nErasing flash...\nWriting at 0x0004f000... (100 %) \nWritten 259072 bytes in 4.29 seconds (483.37 kbit/s)...\nLeaving...\n0.20user 0.04system 0:08.33elapsed 2%CPU (0avgtext+0avgdata 9224maxresident)k\n```\nBtw, I surely tested 921600 before, possibly with another adapter and certainly with another module and it simply didn't work at all (wires are longer than minimal).\n. Oh right, https://github.com/IIJ-NetBSD/netbsd-src/blob/8e3b562e96a8d7cde901515dda64c1a2d7d68cdb/sys/dev/usb/uchcom.c#L36\nWill try to get that module built separately, otherwise running stock 3.13 of ubuntu 14.04. Thanks for the hint!\n. @projectgus: Right at time, I just finished unpacking ubuntu kernel tree to build it ;-). And yes, that was it! With your patch applied, and -b921600, I get consistent 200kbit/s, tried 3 times. Btw, I found another adapter and turn out it is also CH341! I used it with another esp8266 module which had this programming speed problems. So, for me the mystery is solved, thanks everyone for help! I'll let @themadinventor close it if he didn't receive similar mystery reports.\n@projectgus , so please submit a PR with this patch, btw, the link in your comment shows for me as\nhttps://github.com/themadinventor/esptool/commit/1a9b16f63a8338c067b663e42bcbe2af98c68ba5, so I wondered if you have commit access to @themadinventor's repo and already pushed it, but I didn't find it there and figured it's https://github.com/projectgus/esptool/commit/1a9b16f63a8338c067b663e42bcbe2af98c68ba5\n. Ok, for this to be ultimate benchmarking thread: The above \"-b921600 / 200kbit/s\" report was with external CH341. With board builtin, 921600 doesn't work, 460800 is highest, but with it it gets up to 290 kbit/s.\n. And to add a bit of gossip, at another place (no access now) I had another USB-UART adapter, and I cannot be sure, but it likely was CP2102 (at least I had it in my collection). With it, ecp8266 didn't work well either - it booted, but as soon as intensive WiFi task was started, like scanning, it simply hanged. CP2102 is generally considered a good chip, but builtin 3.3 LDO might be a bit weak to power ESP8266 completely. (Again, information by memory, just to give some hints to a desperate googler).\n. See e.g. https://github.com/themadinventor/esptool/issues/44\n. Updated to apply cleanly on the current master.\n. This patch is now available in https://github.com/pfalcon/esptool/tree/esp-open-sdk , to be used by https://github.com/pfalcon/esp-open-sdk\n. Any response to this patch?\n. Thanks!\n. +1, this patch is tested well by me.\n@themadinventor: ping.\n. ping\n. This patch is now available in https://github.com/pfalcon/esptool/tree/esp-open-sdk , to be used by https://github.com/pfalcon/esp-open-sdk\n. This was also discussed in #24.\n. Squash these 2 commits?\n. What about this for example: https://github.com/SuperHouse/esp-open-rtos/blob/master/lib/symbols_norename.txt#L1 ?\n. Nope, I meant to leave it here - I believed that issue was fixed, but as I was found to mix up things, I'd let you to confirm it (before publishing to pypi without that patch possibly merged).\n\nshould have been removed\n\nCool, one issue confirmed fixed, another is fixed. ;-)\n. > would be to make the script be called esptool after installation, rather than esptool.py\nKeep in mind that there's another \"esptool\". I believe it's not even maintained by the original author, but it was picked up by folks who like to ship binaries in peoples' faces. Then more community-concious of them call it \"esptool-ck\", but I'm not sure if everyone does. And then the best thing this project can do keep people from confusion is to continue being called esptool.py .\n. > Not sure how it worked on Linux like it did.\nWell, on unix, text mode == binary mode.\n\nCan you explain the intention of the disconnect method to me, please?\n\nI believe it's artifact of not creating a topic branch. When I looked at this PR in the morning, it contained just one commit.\n. I don't know if anybody else just shy to give -1 here, I'm for sure do. But now people asking why esp-open-sdk uses a fork of this repo, and not this repo directly, and it's because of the fact that such patches are not rejected right away (and thus, have non-zero probability to be actually merged). And then I need a place to have them reverted.\nSo, let's see - it doesn't make sense to \"reset by the end of flashing\". Perhaps, in niche cases, it may make sense, and may warrant an optional flag to do that. But generally, there's nothing wrong to flash a dozen of binary files at different locations one by one. There's no need to reset between them. There's no need to wait 3 seconds between them.\n. > Would you please consider tracking this upstream esptool.py but raising issues if you see any breaking changes?\nSure, that's what I do of course.\n\nI promise that anything that turns out to be a regression or breaks backwards compatibility will be addressed.\n\nThanks, good to know. Because lately there were few things merged which I personally wouldn't merge (note: I don't say they shouldn't have been merged, just I wouldn't), so I wondered if it'll end up with any  patch submitted being merged. It would be nice to know that esptool.py will keep adhering to unix tradition of providing orthogonal set of tools which can be combined per user needs instead of simplifying particular workflow while making other harder.\n\nIf you run the current esptool.py multiple times in sequence then there will be soft resets to the firmware each time as the flash ends and then esptool.py re-runs (for this reason the esptool 'write_flash' command includes a provision to write multiple images in one pass.)\n\nWell, maybe you're right and what I'm actually making noise of is sleep(3) and perceived uncontrolled merging. I do remember however that I had a workflow when I had a module hardwired to boot in bootloader mode, then was able to flash thing multiple times, and when I needed to run user firmware, I used esptool.py run. It might have been with esptool.py patched to not bootloader-reset after write_flash. I generally have had a lot of local patches which I'm too shy to submit, because I'm not sure if they're my whim or generally useful, or if their changing existing behavior is acceptable. I hope a similar conservative attitude will be used by maintainers too.\n. @projectgus : Btw, when using write_flash --verify with latest master, device remains in bootloader mode, and I need to execute esptool.py run manually.\n. Ack, thanks.\n. This appears to be fixed by https://github.com/themadinventor/esptool/commit/0d6556136338387f2e0790407d7c792c452ce2b1 .\n. > \"BTW, CFI isn't supported for SPI memory, and there probably won't be any standard for it in the future either\"\nThere's a standard (because world needs more). Some expensive vendors (e.g. Winbond) even implement it. The rest of the industry doesn't care as usual... https://www.jedec.org/news/pressreleases/jedec-publishes-new-standard-serial-nor-flash . Original standard was publicly available, but now behind login wall. Still googlable, or here's random appnote: http://www.macronix.com/Lists/ApplicationNote/Attachments/1105/AN114v1-SFDP%20Introduction.pdf .\nAnyway, my conclusion about JEDEC ID is the same as @foogod's - there's no standard. Actually, if you read vendor datasheets without trying to find meaning implied by yourself, you may imagine how it actually was. Quote from Winbond datasheet: \"The JEDEC assigned Manufacturer ID byte for Winbond (EFh) and two Device ID bytes, Memory Type (ID15-ID8) and Capacity (ID7-ID0).\" So, long-long ago, before internets were invented, JEDEC called up vendors and told: you do mess, time to standard up. 3 bytes. First, we control, you can't abuse it. 2nd, we recommend being 'memory type', 3rd - 'capacity'. Did you hear us telling that you can't abuse these last 2 bytes?\"\nRandom example of a chip not conforming to common conventions: https://www.sos.sk/productdata/10/21/03/102103/AT25FS010.pdf .\nThat said, at this age, we can do as bad as Google does: https://chromium.googlesource.com/chromiumos/platform/ec/+/master/include/spi_flash.h\n. > to read the existing value of the size (and speed, DIO/QIO, etc) fields, and if set to reasonable values, make sure they stay the same\nI'd rather have auto-detect, at least of flash size.\n\nThat way, once set for a particular ESP8266 module, it won't change (which since the hardware won't be changing, seems appropriate).\n\nThis assumes that it was set right in the first place, which is rather optimistic.\n. @foogod : Sure, I agree, the question is how to do it in the simplest yet useful way, as there're to many things to work on anyway... I'll look into adding auto-detection support when I have a chance.\n. Of course it's 0d65561, affecting many people. When I spotted that, I prepared to write an angry bugreport, but investigating a bit more, I figured that for boards where max connection speed dropped, actual flashing speed in kbit/s didn't really dropped much. So the only thing I could report \"you added new sub-tested feature, at the expense of a well-known working one!!!11\". But saying such things to IT professionals is getting old, especially to such nice folks as Angus.\n. > Do you have any basis for \"many people\"? \nI saw it at try no.1. I saw 2-3 reports from esp-open-sdk, and I didn't really look hard. Neither me nor they reported it, so yep, pure projections on how many may be stumped by it.\n\nPR #96 was merged to master 3 months ago, went into a stable release 2 months ago. This is the first bug report regarding it.\n\nI see issues with Apache server which were investigated in 2008 and thought to be fixed then. The software unicorn-land.\n\nthe process around this change was quite careful to minimise the impact of regressions.\n\nSure, I know, great work!\n\nBug reports that include facts are welcome. Code review is very welcome. If you want to grumble about other people's professionalism then please find somewhere else to do this.\n\nYeah, I knew it would be hard to stay within bounds of cozy \"code of conducts\" while discussing this, especially that we aren't medics whose code of conduct for millennia was \"do good, don't do harm\" - that's why I skipped reporting it. So, all the above doesn't explain why widely (like, really widely, as widely as possible for such thing) tested, well understood, simple things was removed in favor of a complex, merely month or two tested by few people, thing. Actually, \"well tested\" vs \"not well enough tested\" can be skipped, simple and well-known vs complex and esoteric should give enough criteria whether it's worth to replace one with the other. YMMV\n. > The v1.0 stable release came out before PR #96 was merged, to minimise the impact on anyone who hit a regression (this timing was not a coincidence). The v1.1 release (which included #96) came out a month later after no bugs were reported in master.\nSpeaking of this, I don't see v1.0 on PyPI, so there's no easy fallback for people who hit issues with v1.1+. Can 1.0 be released there?\n. Thanks!\n. There're now off-shelf modules with more than 4MB of flash. I'm in particular concerned with how auto-detection works on them - it's rather unpleasant (for a user) when his 16MB device treated as 0.5MB. That's why implemented auto-detection the I did originally, so any unknown flash ID leads to error with all info which a user can report and get resolution. The way you requested it to be changed, auto-detection is not reliable and can give a user headache, as well as anyone who supports software on wide variety of modules.\nI'm going to look into this, but it probably will take as much time as between auto-detection RFC and actual implementation.\n. Wemos Pro or how they called it. It now lies in my board dump along with dozens of other boards and in few months I'll get to power it up and read the ID.\n. There're definitely weird modules around. For example, one of my modules started (??) to exhibit behavior that after few resets (e.g. because of flashing), it's stuck after printing \"ets Jan.....\" line. Pressing reset doesn't help. The module needs to disconnected from USB and reconnected again. With increasing chance, single reconnect doesn't help. This module uses CH341 USB converter.\n. This implements https://github.com/themadinventor/esptool/issues/105.\n. Updated based on the comments above.\n. Thanks for merging. Any chance this can be released on PyPI sooner rather than later?\n. Thanks.\n. I'm hitting the issue regularly, the forgetting about it, then wondering\nwhat's wrong. Wonder, how many people hit the same.\nI submitted this earlier online via github's edit feature, wonder if it didn't work.\n. Great, thanks!\n. I can reproduce this with ubuntu 14.04. The problem isn't with git repo, but with Python wheel published on PyPI. It has 2 esptool.py files inside: one at the root of .whl, having good shebang, another in esptool-1.2.data/scripts/ with that @projectgus' adhoc shebang.\nDidn't look into 1.1. It's distro on PyPI in particular has a normal source package besides .whl.\n. > At least there's an easy enough workaround to always post source packages and never post wheels from now on...\nThanks for that, Angus. Wheels where pretty distant in my backlog of things to look at, and now move to the end of it at all...\n. @projectgus : I hope you don't want to say that you did espressif-way: released the new package with different content under the same version number?\n. Perhaps you have too old esptool.py.\n$ esptool.py version\nesptool.py v1.2-dev\n1.2-dev\n. @projectgus : Maybe after all analyze address passed to verify_flash, and skip bytes at addresses 2, 3.\nI'd also recommend to remove over-careless note from write_flash's --verify:\n~~~\n  --verify              Verify just-written data (only necessary if very\n                        cautious, data is already CRCed\n~~~\nI'd suggest \"(only necessary if very cautious, data is already CRCed\" (note - missing closing parens) to be removed - the presupposition that \"data is CRCed\" will save from broken flash or random error in it is misguided, and there are cases of mis-flashes. (One particular I had yesterday was done without  --verify, so I can't say how much it's helpful (== implemented well to catch the errors), so I'd actually recommend to make --verify the default, and add --no-verify). Thanks.\n. > I have no clue as to what bytes 0 and 1 are. I guessed magic numbers and skipped all 4.\nThey are static signature and number of \"segments\" to load into RAM. Skipping all 4 bytes would qualify as a quick solution. But fairly speaking, as they come from user image (not changed by esptool) and there mismatch is fatal, then checking them would be right way to achieve 100% verification.\nI suggest waiting for @projectgus feedback though before making further changes.\n. Or more specifically, esptool may adjust them based on command line args (or their defaults).. > I'd prefer to add the --flash_size and -flash_mode parameters to the verify_flash command. Essentially have it work the same way as when calling write_flash.\nPlease mind that users are not expected to pass those params to write_flash. Well, maybe you expect them, but I personally don't, nor do that myself.\n. You have some other issue in your serial communication chain. esptool.py can perfectly flash a chip stuck in no matter what. However, not every serial adapter, and even not every host-site driver for one, can handle any of possible weird conditions easily.\n(That's mostly for @projectgus to confirm there's nothing wrong with esptool.py per se, though I myself reported various weird cases.)\n. > CH340G\nSomehow, I'm not surprised - the usual suspect.\n. > the usual suspect.\nE.g., this module is also CH340 based: https://github.com/pfalcon/yaota8266/issues/7. @jrobeson : You're welcome to rewrite it like you think will be better, while keeping it coherent, and submit new patch, I'll close this one then.\n. ",
    "morganrallen": "I am still seeing this issue in master.\n. Appears I can read a single address. 0x40000000\n. ",
    "tprochazka": "Why this pull request was not merged?\n. ",
    "jaseg": "I suppose it pretty radically breaks with the old tool's semantics that are replicated over the entire \"maker\" blogosphere, and there are people who don't like that. Feel free to use my fork (called flashi for disambiguation). I did not put a lot maintenance into it during the last few months since I did not work on the esp8266. If you are missing any functionality, feel free to send a pull request.\n. ",
    "projectgus": "I'm going to close this PR as it seems like the two tools have sufficiently diverged for now. Flashing directly from ELF without an interim step still sounds like a useful addition, but I think it will need substantial reworking against the updated esptool.py - and it seems like you've moved on from this now anyhow. Sorry!\n. I'm going to close this as esptool has changed a lot since it was opened. It'd still be nice to dump WiFi AP & STA MAC addresses, but I think it will need to be written again against the new code structure.. Closing this issue as the README now covers most of the likely problems.\nPlease open a new issue if you've tried the troubleshooting steps in the README and nothing works.\n. Thanks for reporting your bug and providing so much detail.\nYou didn't make a mistake, there's a known bug with esptool.py when using an Arduino as the serial converter (see #82) and I think you've hit on the same issue.\nThere's no problem commenting on closed issues, however I think #82 is the correct issue in this case. If you don't mind, please subscribe to that issue (there's a button in the right-hand column) and you'll be notified once there's any update including a fix to test out (hopefully soon.)\n. @BlackHALk , please go through the troubleshooting suggestions here: https://github.com/themadinventor/esptool#troubleshooting\n. @brynnb : nfriedly's problem turned out to be the ground connection from the USB/serial converter. How are you connecting the ESP-12-E now if you don't have a USB/TTL converter on hand?\nThe README has sections on what connections need to be made, and some steps to follow if things aren't working correctly: https://github.com/themadinventor/esptool#entering-the-bootloader\n. I've tried to find a definitive summary of \"what you should put in the shebang\", but I can't. which surprised me because Python is normally pretty good at definitive summaries that say \"just do it this way\"!\nFrom what I can tell:\n- Python docs recommend using /usr/bin/env python with 2.7 on Unix, and /usr/bin/env python3 with 3.x on unix.\n- /usr/bin/env python2.7 may break bash under some circumstances, I think.\n- Windows needs the Python launcher for Windows (PEP-397), but once it has that then any of the above will work.\n- Aside from Arch, no other OSes have dared to change default python from 2.x. (I could be wrong about that.)\nSo, the solution offered here - using python2 not python2.7 - might work on all platforms...\nAnother, better but harder, solution might be to support both Python 2.7 and 3.x. That way it won't matter which version people have installed or set as default. On the downside, there'd be a new scope for bugs that only appear on one version. #8 looks like it did some of this work, but only to support Python 3.x not 2.7 & 3.x. I might put some time into investigating how messy this option would be...\n. Oops, I just found the discussion of this at #21 also. Comment there explains that 'python2' breaks on OS X 10.9.\nI'm going to close this in favour of the discussion in #21 for now, as it does seem like there's no easy fix. Sorry!\n. > Please start with converting the source to use standard Python 4-space indent instead of tabs.\nI don't think there are any tabs in the esptool.py source...?\n. I've pushed an experimental branch that runs on Python 2 and 3.\nhttps://github.com/themadinventor/esptool/compare/python2_and_3\nI'm not 100% convinced this isn't making a maintenance trap for down the road, but the differences weren't too terrible. I haven't tested all operations, some things probably still don't work.\nAny suggestions or testing is welcome, though.\n. I recently became an Arch user myself, so I wrote up some tips/workarounds here:\nhttps://github.com/themadinventor/esptool/wiki/Arch-Linux-Tips\n(I'm using pip 'development mode' myself now.)\n. @jrobeson that's a good idea! The python2_and_3 branch is probably so out of date it'll need to be started from scratch again, anyhow.\n. Current master branch now supports Python 2.7 & Python 3.4+. This will be in the forthcoming v1.3 release. Please report any bugs as new issues.\nThanks to @jeremyherbert for getting the ball rolling. Hurrah for closing issues before they reach their second birthday.. Closing this issue as the README now covers most of the likely problems.\nPlease open a new issue if you've tried the troubleshooting steps in the README and nothing works.\n. Can you give any more details about the setup (module/wiring) that requires GPIO0 to stay low? The ESP only checks GPIO0 when the initial reset occurs, and some wiring combinations may have problems if GPIO0 gets held low.\n. I'm going to close this as it's been a while, but if you have any more details about what you think was unique with your wiring setup, please reopen.\n. I think this is fixed since a0c18eac57f, now that the entry point is read from the ELF. I'm able to compile esp-open-rtos images with -ffunction-sections/-gc-sections, and also different entry point names, and it all seems happy.\nSo I'm closing this for now, please reopen if you think there's still an issue here.\n. Sorry we never got back to you. I'm going to close this issue because it's been so long between comments.\nThere's now a list of troubleshooting suggestions in the README, please run through these if you're still having this problem:\nhttps://github.com/themadinventor/esptool#troubleshooting\nIf it's still not working, please reopen the issue with some details about the esp8266 hardware configuration you're using, and output from a current version of esptool.py.\n. I'm going to close this as I think it should be fixed as of #30. Please reopen if the nodemcu 0.9 still doesn't seem to work.\n. This seems like a really interesting idea, but I'm not sure exactly how it would work.\nDo you mean we scan the output for the ROM boot mode string, and then if we see it then we can parse out and give an intelligent \"your GPIO0 line is high\" type error message?\nThe only problem I see is that esptool.py doesn't usually operate at the oddball 74800 baud rate, the default is 115200 and most people run even faster than this. In fact only about 30% of the adapters I have at hand can even use that baud rate (FT2232R can but cp2102, ch341 and avr usbserial all can't.)\nSo I think it would be tricky to parse this out while also trying to operate at a higher rate. Or am I misunderstanding how it would work?\n. @mzcs, did you figure this one out? The schematic looks right, often the problem is found by fiddling with wiring though.\nIt also may be worth trying (oddly) a higher baud rate, the default 115200 should be fine unless your wiring is particularly long, noisy or complex.\n. Closing this issue as the README now covers most of the likely problems.\nPlease open a new issue if you've tried the troubleshooting steps in the README and nothing works.\n. Thanks @igrr for the heads-up on this. Have merged a fix just now as #53, is equivalent (I'm fairly sure) but cleaner code contributed by @jkent.\n. It'd be hard to cover everything I think. The other factor is host OS, especially for the CH340 adapters where the drivers are a bit flaky and probably different platform to platform (especially on Linux I think as they're developed from looking at the behaviour of the Windows drivers!)\nI think you're doing a solid job, there are worse problems than having to rerun the flashing tool every now and then. :+1:\n. (Oops, I mean \"worse potential problems\" - didn't mean to suggest there are worse problems currently in esptool - it works great!!) :)\n. This has been reported in a couple of places (like #67), but it seems like a side effect of power problems - the ESP8266 is browning out during flashing, by sending less data in a single packet then the brownout effect becomes less severe.\nIf you're sure that your ESP-01 is powered properly (for instance, it runs 100% stable while connected to WiFi) and you still need this modification in order to flash it, please reopen the issue.\n. There are reports in the nodemcu thread that getting the latest CH341 OS X driver fixes this problem.\nIs anyone still seeing this problem with the latest CH341 drivers and the latest esptool.py?\n. I'm going to close this issue as I think #65 fixed this sync issue among others.\nIf you're still seeing sync errors with current esptool.py, please open another issue with the details.\n. Hi Jon,\nI think you probably got bit by the long-running \"SPIEraseFlash\" bug (in ESP ROM), that only just got worked around in esptool.py #53. The command line you wrote looks otherwise good.\nI'm going to close the issue, but if you try this again with the latest esptool.py and it still breaks then please reopen.\nAngus\n. You're correct that this boot mode (that also uses a binary bootloader image in the flash, or an open source bootloader like rboot) is not supported yet.\nI'm going to mark this as an enhancement request and keep it open. PRs welcome!\n. I'm not sure there's anything we can do about this from the esptool end, unfortunately. It seems like a really unusual bug.\nI tried reproducing the problem with a Freetronics USBSerial adapter, which runs basically the same atmega16u2-based firmware as the Due, but it worked OK at 9600bps for me. I'm on Linux though, so probably very similar driver to the RPi.\nThe default flashing baud rate for esptool.py is 115200, and I use the 16u2 USBSerial successfully at 230400 usually. So I guess the only reason to drop right down to 9600 would be if you didn't trust your signal integrity and wanted a really slow, stable signal.\nSo it could be an OS X driver issue with 9600bps, I guess? Or maybe a clock stability issue with the particular 16u2 you have, although I would expect that to be a bigger problem at the higher baud rates.\nPlease reopen the issue if you think there's something we can do from the esptool.py end to fix this.\n. I think the entry symbol name issue is fixed as of a0c18eac57f, so I'm going to close this issue. If you think I missed something then please reopen it.\n. Had an \"a-ha\" moment when I saw @atalax's comment! Can you see if the commit 1a9b16f fixes the problem?\nI think the kernel doesn't send a new baud rate in set_termios if it thinks the baud rate hasn't changed from what was last set. Combined with the \"default to 9600 on open()\" bug means that the device can be set to 9600 but the kernel thinks it's still set at the higher speed, so doesn't change it.\n(I think when I \"fixed\" it before what I was doing was changing the baud rate a lot when testing, so it kept re-setting it correctly!)\nOn my NodeMCU board (the rev 1 one) I seem to be able to reliably upload repeatedly at 230400, 460800 and mostly-reliably at similar speeds (400000, 500000). At the higher speeds it does seem to take a little longer (1-2 seconds) to sync correctly, maybe some tweaking of the timeouts for retries might help with that (try more times, more frequently?) but it's pretty good.\n. (For completeness - I'm on Debian Jessie 3.16.7 so I definitely have the kernel bug mentioned above, too.)\n. Yes indeed! Merged with a couple of minor tweaks in 765cf23f8.\n. That's a good idea to just read the start address from the ELF header. I'll close this and resubmit using that approach.\n. I think the changes here are covered by #53 and 96e3386.\nThe only functionality that is unmerged from here is ignoring zero-length sections in firmware image files. If the image file has zero-length sections in it already, commands like image_info should display that. OTOH if generating a firmware image from an ELF file, it makes sense not to bother adding zero-length sections to the new image.\n. I'm going to close this PR as I think it's more or less covered by a0c18eac57 which just got merged.\nThis version did some refactoring and used objdump instead of readelf, but they're basically the same thing.\nThanks @themadinventor & other contributors for continuing to improve esptool.py. :)\nPS You can probably close #24 now.\n. I don't see why not. PRs would be welcome!\n. There's a 4 byte (from memory) unique(?) ID that isn't part of either MAC address, as far I know.\nIn esp-open-rtos we call it the OTP_CHIPID register (I can't remember how to access it from the Espressif SDK, but there's a way to do that as well):\nhttps://github.com/SuperHouse/esp-open-rtos/blob/master/core/include/esp/dport_regs.h#L46\n. This is closed by #85.\nMy comment about the OTP_CHIPID register @ 0x3ff00058 seems to be wrong, that address is some other internal chip identity information of some kind (qv http://esp8266-re.foogod.com/wiki/System_get_chip_id_%28IoT_RTOS_SDK_0.9.9%29 / http://esp8266-re.foogod.com/wiki/Get_chip_version_%28IoT_RTOS_SDK_0.9.9%29 ) but it's not an serial number type ID.\n. Hey,\nSorry for ignoring this for so long. Turns out I just found out (yesterday) that pyserial packages a quite flexible serial program called miniterm.py, so everyone with esptool.py already has a terminal program!\nI've linked that from the README and I think that solves the immediate need for this, so I'm going to close the issue. Sorry it dragged on for so long though.\nAngus\n. I generally have good luck chaining esptool.py and a serial program together on the command line - I've found the OS layer and the USB/serial layer cache enough data that you don't lose anything in the short gap between esptool.py exiting and the next program starting.\nIf you do the same, do you lose data?\n. Hi gh2o,\nThanks for this. I think this is the same issue as #20. There is some discussion in there about the possibilities, would appreciate your input there if you have any other thoughts.\n. Hi Erik,\nBy this do you mean creating an image for the SDK bootloader v1.2+ (or other bootloaders) where the irom section is included in the image?\n. I would find this useful as well. I'm going to merge this issue with #39 and put some more thoughts there, please feel free to continue discussion there. :)\n. A fix for this should now be merged via PR #53.\n. Hi Martin,\nThanks for reporting this. I think it was fixed just now in #53, the longstanding SPI erase bug.\nI'm going to close the issue but please reopen if you get the latest esptool.py and it's still broken.\nAngus\n. These are great clarifications, thanks!\n. Hmm, it looks like the fix for the flash erase issue might have caused this regression. It's actually surprising flashing all four images worked with the old revision, most people have encountered the flash erase issue when flashing that much.\nCan you please post the sizes (in bytes) of the four files you are flashing? That should make it easy to reproduce the exact problem, by creating dummy binary files.\n. I think this should fix the underlying bug, please let me know if it doesn't.\nTurned out it wasn't multiple files, it was that flashing the last file near the end of the flash exposed a bug.\n. Hi,\nThanks for sending this. It's hard to test with all combinations of OSes and adapters, so seeing fixes for other combinations is super helpful. :)\npySerial has a built-in timeout feature that I think we can leverage to get the same result you're seeing here. I have a few questions to help me understand the problem, though:\n- I saw you said you're on Linux, what kernel version are you on? (The output from uname -a will tell you.)\n- Which serial adapter?\n- What Python and pySerial version?\n- Can you please post the output from a failing operation, including the command line and the full trace of the serialPortException?\nThe other thing that surprised me in the patch is the very high timeouts - up to 2.25 seconds for one operation. Did you really find that waiting this long was necessary? Having a high timeout means that if an operation really does fail (bad serial connection, for example), the software won't respond quickly with an error.\nThanks. :)\nAngus\n. Thanks for the details, St\u00e9phane. Much appreciated. :)\n\nThe serial adapter is a chinese USB/RS232 model.\n\nDo you know exactly what type? If it's unclear then you can find out by looking at the output from dmesg | tail just after you plug in the adapter.\nHow are you wiring the reset & GPIO0 lines on the ESP8266?\nCheers,\nAngus\n. There's been some interesting PR just merged (#65) that fixes some bugs with synchronisation on reset. Can you try with the latest 'master' and see if the problem is fixed without these commits?\n. I'm going to close this for now, but if you're still seeing the problem with the latest esptool.py then please re-open it and we'll work through the issue.\n. Unfortunately there's no easy solution to this that works on all platforms, apart from having esptool support both Python 2 & 3.\nPlease have a look through the discussion in #21. If you have a chance to test the python2_and_3 branch that's mentioned there, I'd really appreciate any feedback.\nThanks!\n. This sounds like a great idea.\nI have never uploaded anything to PyPI before. Are you in a position to give any advice about whether esptool is ready for submission in its current state, or should other checks be done?\nAngus\n. > What about this for example: https://github.com/SuperHouse/esp-open-rtos/blob/master/lib/symbols_norename.txt#L1 ?\nHi @pfalcon,\nSorry, did you mean to leave this comment somewhere else? It's not clear to me how it relates to PyPI submission.\nHowever, thanks for pointing that line in esp-open-rtos out. esptool.py no longer hardcodes the entry point name, as of #52 it's loaded from the ELF file. In esp-open-rtos that symbols_norename.txt file is also no longer used and should have been removed, all the symbols it lists are found in either our own source or newlib.\n. Good suggestions, thanks @skorokithakis.\n\nThen again, that might be more because I don't really know what it does or how, rather than a failure in the documentation.\n\nI think that's a failure in documentation, in either case. :)\n. Are you setting the baud rate in your code? During a post-reset execute, the default baud rate is the same as the uploading baud rate (so 9600 in your case). But after a hard reset it's the default 76800bps again, until you set it in your code.\nOther than that and checking the pin connections are correct, running from a hard reset should be the same as running immediately after an upload.\nIf you connect your ESP-01 and set the baud rate to 76800 then you should see some bootloader messages before your firmware runs (or fails to run), as well.\n. Closing as it's been a year with no response, but feel free to reopen if you still think there's an issue here.\n. This looks like a good fix, thanks for sending the PR!\nI have a couple of minor stylistic requests before merging. Could you please change the new functions to use lowercase_underscore style names instead of camel case, as this is the style used in the rest of the class? Could you please squash your commits? (you can force push a squashed commit to the branch and it'll update the PR.)\n. I was doing some other work on esptool so ended up merging this myself, too useful to wait around for. :) Thanks again!\n. Thanks for mentioning this, alex. I actually have a fix for this (and a few other errors) in a branch. I'll test it some more and commit ASAP. :)\n. Hi crushedice,\nI've seen some other people reporting that shrinking the block sizes works for them as well.\nHave you tested with the very latest esptool.py? Some fixes got merged recently that might also help this situation.\nIf it still fails with the very latest, could please you also post an example full esptool.py command line and the full output from a failing command (with the default ESP_RAM_BLOCK/ESP_FLASH_BLOCK sizes)?\nWe can add a flag to use smaller transfer blocks, but I'd like to absolutely rule out any other kind of bug first.\nCheers,\nAngus\n. Thanks for all this, especially appreciate the asciinema recording - I hadn't seen that before, very cool!\nI would like to try to reproduce this... What kind of FT232R adapter board are you using, and where did you get it? Do you think it's more likely to be genuine or fake?\n. > Can be a problem of the mA that the FTDI can deliver for power? I don't know\nI missed this comment the first time around. This is the problem, FTDI chips' internal 3.3V regulator is not enough to power an ESP8266 - it will brown out during flashing but it will really brown out when you try to use the ESP8266 and the WiFi starts up. You need an external power supply.\nThe trick mentioned in the first post of using smaller blocks probably worked around the brownout by using power in smaller hits, but it's not a solution - just a bandaid.\nI've heard elsewhere as well that powering with 5V doesn't immediately \"let the magic smoke out\", but if your ESP8266 goes pop later then you'll know why!\n(I was coming here to post that I found an FT232R here, exact same markings as the photo @crushedice2000 posted - same date code, same product number... they're either genuine chips from the same batch,or fake chips that copied the same batch. It works every time.)\nI'm going to close this issue. The front page README now stresses that power power stability problems can cause flashing to fail part-way through:\nhttps://github.com/themadinventor/esptool#write_flash-operation-fails-part-way-through\nSorry it took us so long to resolve it with certainty!\n. Hi!\nWhat command line arguments did you use with esptool.py? And what module/device are you flashing?\nThe flash size & type arguments in particular may be important, depending on what kind of module you are flashing.\n. The default flash size & speed settings should work with that board.\nThe only other suggestion I have is to run an \"esptool.py --port /dev/ttyUSB0 erase_flash\" before the write_flash command you're using. Does that help?\n. If the erase_flash step doesn't work, can you paste the output of \"esptool.py --port /dev/ttyUSB0 flash_id\" please?\n. Thanks for posting that. Really strange behaviour!\nHow about the other command I mentioned:\n\nIf the erase_flash step doesn't work, can you paste the output of \"esptool.py --port /dev/ttyUSB0 flash_id\" please?\n. Closing as -fm dio was the missing parameter here, and this is now documented in the README.\n. I can't really explain that either off the top of my head.\n\nAre you able to send me an example ELF (and ideally a .map file as well), please? Can attach it to the Issue or email it to me privately. OK if not.\nAngus\n. @raburton, can you post the linked .elf file as well please?\nI think what's probably happening is Sming is compiling with -ffunction-sections or -fdata-sections, but then linking without --gc-sections. This means there are unused symbols in the ELF file, brought in by other symbols in the same source file. These are what causes esptool.py to fail, as usually this indicates an unlinked ELF file. However those unused symbols also happen to be in unused sections so it doesn't really matter and objcopy can still extract a binary.\nThe \"proper\" fix is probably to link with --gc-sections. But we should handle this case properly in esptool.py as well.\nThat's all a guess at this stage, though. It'd be good to confirm it from the ELF file if possible.\n. Thanks for sending that, very helpful.\nShort answer: Looks like you can have undefined symbols in fully linked binaries, as long as they never get referenced. So I've downgraded that fatal error to a warning.\nLong answer:\n@zardam's diagnosis in SmingHub/Sming#450 seems to be correct, and I probably should have looked at that Issue before spelunking in the ELF file myself! After reproducing the build steps, I don't quite see how Sming ever uses the esp_microc header files based on the default install steps for Linux - they don't show up anywhere in the source tree. I guess there must be some step I missed.\nIt's not clear to me why this seemed to break when upgrading to Espressif SDK v1.4.0. None of the Espressif SDKs ship an errno.h header. Or did you mean Sming v1.4.0?\nAnyhow, although it's really a bug in the compiled source code I think it makes sense for esptool.py to do the best it can with the ELF it gets - if the linker succeeded then all of the symbols actually needed in the binary are there, and that's all that matters in the end.\nOTOH, if the binary turns out to have actually invalid contents then esptool.py will now print a warning, and then fail outright when objcopy fails to extract the raw binary data.\n. Hi,\nI'm going to close this one because I think with the flasher stub added in v1.2, it's no longer really necessary.\nMost problems with bad flashes or failing flash operation seem to be serial connectivity problems, or problems with inadequate power. We can patch around these in esptool.py, but ultimately if you don't have reliable serial and power then the ESP8266/32 will never work reliably (in particular, once the WiFi stack starts up the power spikes are significantly bigger and you'll get brownouts and really weird crashes much more readily than during the flashing stage.) Reliable hardware is always going to be a prerequisite.\nAngus\n. Sorry for the slow reply.\nThis is a really strange problem! I think if the checksum that the serial bootloader calculates matches what esptool expects, and the serial protocol otherwise succeeds, then I'm not sure if there's anything we can do from the esptool end.\nDo you have multiple modules that all display the same problem? I guess otherwise my money would be on faulty SPI flash before anything else.\nAngus\n. I'm going to close this issue now, but please reopen if you think esptool.py is doing something wrong.\n. Hi,\nThe serial port bootloader on the ESP8266 is flashed into the ROM. It's not sent to the device by the upload tool.\nThe communication protocol is pretty much undocumented. All that we know is from reverse engineering the binary-only upload tool supplied by Espressif. There's some information here: https://github.com/themadinventor/esptool#protocol\n... or you can read the esptool.py source code to see how it behaves.\nI'm going to close this Issue now as it doesn't seem to be an ongoing problem with esptool.py.\n. Thanks for reporting this.\nI'm not against exposing the tmpdir option, but I'd also like to see if we can fix the problem so it \"just works\" for cygwin users - fixing the problem via the command line option means all cygwin users will have to know that this is a problem, then find the option, then choose a suitable local/relative path.\nIt looks like the only foolproof way to translate cygwin paths to Windows this is to run the cygpath command line tool, but I think that might be a better long term solution (change cygwin-specific paths into Windows paths transparently, when we run objcopy).\nWhat do you think?\n. @m-bruck, can you please try checking out the fix/cygwin branch on your system and let me know if it fixes the problem? It should ensure any path that goes to binutils is a Windows native path not a Cygwin path (which should work even if the toolchain is compiled against Cygwin, as Cygwin knows how to open either kind of path.)\n. Thanks! I amended the commit with the stripped newline. Let me know if that doesn't fix the problem somehow. :)\n. Thanks, you reported in the right place. Looks like pyserial moved home page recently.\nLinks now updated.\n. Great, thanks!\n. Hey,\nGreat addition. It only failed to build because pep8 (the Python style guide) requires type=str.lower (no spaces around the equals).\nCould you please amend the commit and force push? The Pull Request will update automatically.\nAngus\n. Thanks! :)\n. Is it possible you have 'dio' (as opposed to 'qio') flash? If you add -fm dio to the command line options, does it start correctly without needing a re-upload?\n. Glad to hear!\nJust out of curiosity, what's the output of 'esptool.py flash_id' on this board? And what kind of device is it?\nCheers,\nAngus\n. Thanks for the update. That's really odd! Glad it's working now.\n. mkspiffs is usually included as part of the software framework that you're using to program the ESP8266. Consult their documentation find out how they integrate SPIFFS, and how to use those tools.. Thanks for this, very useful feature!\nA couple of minor comments:\n- Could you please squash these commits in your branch and re-push (force push) as a single commit?\n- Is it possibe please to print out the address of the first different byte, to help people diagnose problems as being invalid flash as opposed to just bad serial comms or something else?\n. Thanks for that! Sorry for the delay in updating.\nHave merged, plus some additions and refactoring to add a couple of other options I had mind.\n. I saw on the parent issue that someone commented that the user1.bin offset is 0x1000 not 0x10000. I think this accounts for the different write address ranges in the output as well.\nCan you confirm that changing the user1.bin offset fixes the problem?\n. Thanks for this! Sorry for the mixup with the file modes, I should have caught that when refactoring myself. Not sure how it worked on Linux like it did.\nI've pushed that fix already as 74112b05053 (I edited the commit message as 'update esptool.py' is a little generic for our tool.)\nCan you explain the intention of the disconnect method to me, please? You're looking to issue a hardware reset (if possible) whenever esptool finishes its operations?\n. >  Well, on unix, text mode == binary mode.\nAh, of course. I'm too used to Python 3!\n\nI believe it's artifact of not creating a topic branch. When I looked at this PR in the morning, it contained just one commit.\n\nSame. I get that this is probably unrelated to the binary file problem, but I'd still like to understand it.\n. esptool v2.0 changes the default to perform a hard reset after the operation is complete.\nMore details/options: \nhttps://github.com/espressif/esptool#reset-modes. Thanks!\nSix months ago I made a branch with concurrent 2 & 3 support as well. I hadn't kept it up to date, but I'd be very happy to merge your PR if you can confirm all esptool.py's commands work OK on both versions.\nThe old branch is here, I don't know how useful it is now that six months' additional changes have gone into master though:\nhttps://github.com/themadinventor/esptool/tree/python2_and_3\nIf you're able, please also edit the .travis.yml file to run the Travis pep8 & pyflakes tests against both 2 & 3. This should be a pretty small change in the file, let me know if you have any trouble.\n. I agree this should be able to work.\nDoes it change anything if you replace the two while statements in the relay code with if statements?\n. Good suggestion, we should have a flag controlling the desired reset behaviour.\n. esptool.py v2.0 (current master branch) has a --before no_reset option which will keep DTR/RTS at default values and should fix this problem when using Arduino boards as serial interfaces.\nPlease reopen this issue if you find this isn't the case.. Thanks for the patch. Interesting situation, I wonder if that means Espressif have sold their first 32 million chips, exhausting the other two OUIs.\n. Absolutely, go for it!\n. I just didn't think of it. Pull requests welcome! :)\n. Merged as 10a3c9c (I tweaked the commit to add a link to the esp8266-re wiki.) github hasn't picked up the relationship somehow.\nThanks for this! Interestingly, when I was testing I noticed the top 8 bits are zero on a lot of my chips, and (as we know) the bottom 24 match the MAC. That's both using esptool.py and the SDK system_get_chip_id() function. Do you see that as well?\n. Looks great, thank you!\n. This looks great, thanks!\nCould you document the environment variables in the README as well, please?\n. Beautiful, thank you!\n. Thanks for submitting this, it's a great addition.\nAre you able to squash those two commits and re-push, please?\n. Thanks!\n. Hi @pfalcon,\nI'm sorry to hear that you feel this way.\n\nnow people asking why esp-open-sdk uses a fork of this repo, and not this repo directly, and it's because of the fact that such patches are not rejected right away (and thus, have non-zero probability to be actually merged).\n\nThis patch is not going to be merged, at least in its current form. At minimum it breaks our automated coding standard check, but I also agree it needs work and some discussion. We just haven't had that discussion yet.\nWould you please consider tracking this upstream esptool.py but raising issues if you see any breaking changes? You still have full control over when you update the submodule commit in esp-open-sdk. I promise that anything that turns out to be a regression or breaks backwards compatibility will be addressed.\nThis reduces duplication of effort, and potential confusion over there being a parallel-developed fork of this project.\n\nIt doesn't make sense to \"reset by the end of flashing\". Perhaps, in niche cases, it may make sense, and may warrant an optional flag to do that.\n\nI think there are reasons to discuss the need for an option of this kind, although neither of the current patches addressing this (here and #80) are ready for merging.\nThe bootloader \"flash finish\" command in ROM runs the firmware image, so the current write_flash behaviour includes a \"soft reset\" at the end.\nIf you run the current esptool.py multiple times in sequence then there will be soft resets to the firmware each time as the flash ends and then esptool.py re-runs (for this reason the esptool 'write_flash' command includes a provision to write multiple images in one pass.)\nAfter the bootloader soft resets, the ESP's state is different to under a hard reset - baud rate remains set as per esptool, SPI registers remain set as per esptool. Most noticeably if the firmware issues a reset itself (for example following a fatal exception, watchdog timeout, or after an OTA upload) then it resets directly to the bootloader again.\nSometimes this behaviour is desirable, but sometimes it isn't.\n@igrowing, thanks for the patch and apologies for hijacking your PR. Are you able to make this hard reset feature into an option rather than the default? Is there a reason you found that you needed a 3 second delay after the final reset? The Travis report (linked above) has some small changes for PEP8 compliance. If you update the PR can you please squash your commits into a single commit, as per the link? Thanks!\n. Thanks for the bug report, I've opened an issue to track it. Thank you also for resetting your fork to track the upstream branch.\nIf you have private patches that you find useful then I would be very interested to see them, please consider submitting them as PRs even if you don't think they're suitable for merging yet. Knowing how various people use esptool is an essential step to making sure it remains useful. Also, it may happen that other people find those patches useful too - and through that broader discussion we may be able to find ways to adapt esptool in the long run.\nRegarding the overall philosophy of esptool, without more specifics I don't really understand what you're driving at. If you have particular concerns then please open a fresh issue or email me.\n. esptool.py v2.0 adds hard reset after flash by default, with option to fall back to \"soft reset\" (ie run program) or disable resetting entirely.\nDetails:\nhttps://github.com/espressif/esptool#reset-modes. Are you powering your ESP8266 via the FTDI chip's internal 3.3V regulator? Other people have found this leads to brownouts (FT232 can't supply enough current at 3.3V to power the ESP8266).\nReducing the flash block size can work around this but it's not a good long term solution.\n. Hi,\nI left a comment on #90, I'll repeat it here though:\n\nAre you powering your ESP8266 via the FTDI chip's internal 3.3V regulator? Other people have\nfound this leads to brownouts (FT232 can't supply enough current at 3.3V to power the ESP8266).\nReducing the flash block size is confirmed to work around this but it's not a good long term solution.\n. I'm going to close this PR because I think the power issue will have fixed it ,but please reopen if you find that's not the case.\n. Thanks for this! It'd been on my mind as well since I added the --verify option, much appreciate you fixing it.\n\nI merged it as ee00b3f3, plus a modification  c219fd02 to not store state in args.\n. No worries. The \"magically call the module function with the same name as the command\" functionality is a big weird as well, makes that part non-intuitive (and I had to change it before I could do it this way, anyhow).\n. Thanks!\n. Sorry, but esp8266_flasher.py is not this program - esptool.py is different. You'll need to talk to whoever you got this software from.\n(Even though it's a different program, I'd suggest that you might need to right-click on the program and Run As Administrator in order to get permissions to access the COM port. Hope you get it sorted!)\n. This comes up a lot, but unfortunately it doesn't work on all platforms either. Issue #21 goes over the whole sad story.\nAre you an Arch user? It seems like Arch is the distro that went against the advice in PEP394, so for now Arch users miss out :(. (I personally find this extra annoying because I'm thinking about becoming an Arch user myself!!)\nThe only effective long term solution that we can find is to support 2 & 3 simultaneously in the same Python file. I pushed up a branch that does this (python2_and_3) last year but it's very out of date now, would probably need someone to recreate it with recent changes before it could be merged.\nThere's more discussion of all this in #21.\n. I am very interested! Very nice work. :) Would be very interested to have this in esptool.py :)\nI had been thinking some vague ideas along the same lines, also possibly compressing the payload in some way.\nAre you thinking of sending a PR? (It would be very welcome!)\n. Hi rojer,\nAre you able to relicense your C flasher stub code as GPL or another GPL-compatible OSS license, please? The stub source files are marked Copyright Cesanta \"All Rights Reserved\", which makes them incompatible with GPL (and esptool.py is GPL licensed).\n\nwould you like to expose all of {wrap,run}_stub or take just enough to run it?\n\nI'm guessing the wrap_stub/run_stub functions were added to aid with stub development and integrate with FNC? Do I have that right?\nI'm more inclined to just add a flasher stub, rather than add a generic stub framework. But maybe there are uses for those commands that I haven't thought of?\n. Closing in favour of #103.\n. Hi Adam,\nSorry I never got back to you on this. This change, #80 & #89 all demonstrate that esptool.py needs to be more flexible about how it handles reset configurations in general - there are a few different permutations out there.\nI have some ideas about doing this in a unified way, I'm hoping to submit a possible PR for consideration soon. :)\n. esptool v2.0 adds the ability to disable reset-on-connect, and should preserve DTR & RTS for boards which require it.\nDetails:\nhttps://github.com/espressif/esptool#reset-modes. Neat!\nSo, just to make sure I understand what you did here - this is putting a DIO SPI flash chip on the HSPI bus and then using the \"swap\" feature in the ESP hardware to configure that as the primary SPI flash?\nAngus\n. esptool.py v2.0 now supports a command line argument to configure the SPI connection parameters on ESP32. The --spi-connection HSPI option does not work on ESP8266, but it could probably be made to work by making register writes as shown above.. Agreed, thanks. Closing.\n. That is a weird error, especially given the fix!\nCould you please let me see an ELF file that triggers the crash? You can attach it here, or if you prefer to keep it between us then you can email me - gus at projectgus dot com.\nIt's OK if you can't share the file.\nAngus\n. Thanks for sending that through. This was a silly bug where a checksum of zero was being accidentally interpreted as \"no checksum\" so the calculation was failing. Explains why changing absolutely anything in the ELF file would have fixed it (ie the checksum changed to something other than zero.) Should be fixed now.\n. What OS are you using and which serial adapter?\n. The adapter can go that high, maybe the OS X driver can't.\nCan you please post the full output from esptool.py, including the exception stack trace?\n. Hi @rojer,\nThis looks really exciting. I've left a few minor comments inline, but generally I think this is a good development - more stable and faster are both big pluses.\nBecause it's a large change I'd also like to test and review it a bit longer before merging. I'm about to cut a 1.0 release and I think it's sensible to put this in after that, so there's a well-tested stable release to fall back on. But generally I'm looking forward to it. :)\nThanks very much!\nAngus\n. I played around with the flasher stub a bit over the past couple of days, and pushed some minor changes here:\nhttps://github.com/themadinventor/esptool/commits/stub_loader\n(The SLIP syncing change also cleaned up some of the tolerance for baud rate changes, the NodeMCU I have here now flashes at 1.5Mbaud which is nice!)\nWould appreciate any comments you have on those changes, if you have the time. :)\nThere's one more thing I was thinking about before merging, which is the --baud option. It seem fairly redundant now compared to --flash_baud. Apart from throughput performance, the only reason I know of to change it is a bad serial connection that needs to sync at less than 115200.\nI'm thinking of just using --baud for everything, but only syncing & performing any ROM operations at max 115200bps - so higher rates only ever get used by the flasher. It seems a bit odd, but it's fully backwards compatible and I can't think of any reason someone would want different behaviour. What do you think?\n. Oops, I think we doubled up - I just pushed 8031ecee90. Do you want to try to squash that commit into this PR, too? Otherwise I'll rebase that branch after this PR goes in, I agree it makes sense to split it out.\n. Thank you,  merged! \nRegarding the message, no problem. I'm very happy to acknowledge Cesanta's contribution including a link on the Readme, etc. I will probably remove the name from the status message eventually, I'm mostly concerned from a usability perspective -  it'll be a new word for most users, and it's the kind of thing they're likely to Google when looking up error messages, and that may just cause further confusion. But I'm fine to keep it for now, at least - as you suggest - until the stub starts evolving. \nCheers \n. This is fixed as part of the new reset behaviour in esptool.py v2.0 (--after soft_reset should also work with --mode dio on esptool v2.0). I've noticed and thought about this problem as well. I have a couple of other things to add:\n- Many ESP modules and boards are advertised with their size in megabits, not megabytes (it sounds larger and I think this appeals to some sellers). So some users will be starting from a megabit value not a megabyte value, even though megabits is a much less familiar term.\n- It should be possible to detect flash size in most cases. One possible method is via the flash_id command and a lookup table. @foogod has mentioned another method but I've @-mentioned him because I'm not sure exactly how that works, Alex can you give us any pointers?\nOne possible solution would be to change the default --flash-size argument to \"autodetect\", and have it print a warning message if detection is not possible. The message could suggest a more destructive detection method (ie esptool.py detect_flashsize) - and that detection command could in turn suggest the user submits new flash size mappings back to esptool.py for inclusion.\n. ESP31/32 specifies its flash sizes across the range 1MB - 16MB, so the megabit/megabyte thing is going to get especially confusing soon!\nFor the experimental ESP31 support in #111 I've changed --flash_size to be specified in megabytes as KB/MB. Specifying in megabits still works but prints a deprecation warning, may be removed in a future v2.0.\nAuto-detection of flash size code would still be a welcome addition, though.\n. Resolved since #131 (now in the current stable release.)\n. @rojer , @jmattsson - if either of you have any time I'd be really keen to hear what you think of these changes.\nBefore merging I'd like to confirm confirm that this does what I think it should do on low-powered systems (there is some additional Python-side overhead from using a generator, that might cancel the benefit out!)\n. >  don't see any problem with using a generator, imho it's used exactly as intended.\nI agree from a code style point of view, I was just more suspect about the performance implications. Worried I'd \"fix\" a performance regression by introducing a different kind of performance regression!\n\nperhaps the only minor thing i'd change is the name of the variable - _slip_reader instead of just\n_reader. other than that, LGTM\n\nDone!\n\nwent to test on my RPi and found that there is, unfortunately, a compatibility problem: it looks like \nin_waiting is not available in PySerial that comes with Raspbian (jessie, the latest one):\n'Serial' object has no attribute 'in_waiting'\n\nAh, right. Try it now. The in_waiting property is new in pyserial 3, I swapped back to the (now deprecated) inWaiting() function call.\nAngus\n. Thanks @rojer. I forgot I hadn't merged this yet.\n. Hi oczkers,\nThat's very odd, the bootloader stub is flashed and running but it can't run the user code for some reason.\nMost ESP-12Es have 32mbit flash, do you get different results if you pass that as the size? (I can't think of a reason why 8mbit wouldn't work as well, but I figured it's worth a try.)\nDoes it work if you use Espressif's official flash download tool?\nAngus\n. It isn't possible to damage the ESP via the software bootloader, once you erase the chip and re-flash it should be as good as new.\nIt could be a hardware problem, either something that's connected to the ESP or maybe you have a defective ESP-12E.\nPlease try the other items mentioned here:\nhttps://github.com/themadinventor/esptool#write_flash-succeeds-but-esp8266-doesnt-run\n(I just added a new item there mentioning GPIO connections for the SPI flash, although I don't think that's your particular problem.)\nAnother thing to try is to download the stable 1.0.1 release and try it. You can get it here:\nhttps://github.com/themadinventor/esptool/releases/tag/v1.0.1\n. Did you have any luck with this?\n. I'm going to close this, but feel free to reopen if the problem isn't gone.\n. Hi,\nThanks for sending the PR. This actually comes up once every few months, which inspired me to add the comment in the commit above.\nI'm very sympathetic to this problem (I started using Arch Linux recently and they mapped python->python3 some years ago). However as discussed in #21 there are no universal solutions apart from rewriting esptool.py to support both 2 & 3.\nI put some tips for Arch users here: https://github.com/themadinventor/esptool/wiki/Arch-Linux-Tips\n(also linked in the other issue.)\nPlease let me know if more distros other than Arch (& Arch-derived) have also changed their default Python. It'd be helpful to know if it's starting to become more common.\nAngus\n. I'm not sure exactly why you're getting the SandboxViolation here. It looks like it happens while setuptools is trying to install flake8, which is listed under setup_requires (so it's installed as part of the setup.py build process, but not included in the final package.)\nI can't reproduce this, though. I just ran these commands to create a clean virtualenv (no pre-existing packages) and install esptool.py into it:\nvirtualenv2 ./testenv\nsource testenv/bin/activate\ngit clone https://github.com/themadinventor/esptool.git\ncd esptool\npython2.7 setup.py build\n... completes as expected.\nIt looks like you're running a Gentoo ebuild environment? Any other clues you can provide?\n. Weird. I'm not familiar with Gentoo, but can you explain the process (what commands were run) that got you to this point? I'm suspecting it's a problem with Gentoo's packaging process and setup_requires clauses in the setup.py, but I don't know enough either way to be sure.\nAngus\n. @Quarky9 & @l29ah , are you still working on this? Any clues about ways to fix it in esptool.py's setup.py ?\n. I'm going to close this, esptool.py v2.0 has a lot of changes and you may have more luck re-running under Python 3. However feel free to reopen if you have any additional information that can help us solve this from the esptool side.. It's a good suggestion. Catch is, I don't fully understand these options either. They were added a long time ago, before I had anything to do with this project.\nI believe they're used with OTA updates to save a region at the end of flash for user information, while the previous space is used for two program slots.\nI believe 16m-c1 is what Espressif calls \"512KB + 512KB\", which means the 2MB of flash is split up as 512KB for one OTA slot, 512KB for another OTA slot, then 1MB for user data.\n32m-c1 and 32m-c2 are for similar partitionings. I'm not entirely sure which one is which.\nThe whole thing is explained a bit in Espressif's PDF here:  http://bbs.espressif.com/download/file.php?id=1368\nIf someone figures this out, a pull request which adds the relevant lines to the README would be welcome!\n. Turns out supporting ESP31 is a significant amount of work compared to ESP32, so it will not be supported in future versions. See #121 for ESP32 support.\n. Hi,\nThanks for the pointer about slip_reader(port). You're right this should be self._port, and I've pushed a fix. However, as it happens the connect() method replaces self.slip_reader each time it makes a connection attempt, and it's initialised correctly there, so I don't know if this is the exact problem you're seeing in this case.\nI don't know exactly what an \"Arduino uno wifi\" is, are you able to explain the hardware configuration a bit more please? It might be something special with the way the serial port is wired through.\nAngus\n. Hi Rob,\nI see, thanks for explaining.\nWhen you say that you think slip_reader caused the problem, do you mean that older versions of esptool.py (like v1.0) work with the EspRecovery sketch?\nAngus\n. Hi Rob,\nGlad you got it sorted, these things can be finickity.\nIt sounds like I can close this issue now, but please let me know if that's not the case.\nAngus\n. Hi @Aizenko,\nThat's strange. I'm not sure what it could be, but maybe it has to do with buffering the output from stdout?\nIf you comment out the print statement print ('\\rWrote %d bytes at 0x%x in %.1f seconds ... so it doesn't print as much status output, does it complete OK?\nAngus\n. > I don't know how the arduino API detect the end of upload.\nI expect it just waits for esptool.py (or whatever tool) to exit and checks the return code. I'm not sure I understand what you mean about the \"default esptools\", do you mean the esptool-ck tool that ships with Arduino for ESP8266?\n. @Aizenko , I'm going to close this because it's been a while and your last post suggests it may not be an esptool.py-specific problem. But feel free to reopen if you think esptool.py is misbehaving here.\n. Hi @cnlohr,\nThanks for reporting this. It's the first I've heard of problems at higher speeds and I really appreciate you bringing it up. I have some ideas for debugging & resolving it.\nPrior to #96, the ESP8266 autobauding feature was used to sync the baud rate to the device. This is often unreliable at higher speeds (in testing I found it was often off by a few percent), so since #96 an explicit baud rate is passed to the stub which then sets that. This reduced my incidence of occasional failures to zero, although it's less good that it raised yours to 100%!\nOff the top of my head, the most likely problem I can think of is a race condition when changing rates. After it is executed, the flasher waits 11ms and then sends a greeting (\"OHAI\") at the new baud rate. This is what is coming over corrupted. At minimum, this delay should probably be higher to allow the host to set the baud rate on the adapter.\n(Actually, come to think of it, the greeting should probably go the other way first - because the ESP8266's timing is reliable, but the host's is unreliable. So the ESP8266 should wait until it sees the host using the new baud rate, and then reply. I'll get you a change to test along these lines, ASAP.)\nI also don't have any PL2303 hardware here, which might be the deciding factor. I'll try to get some over the next few days. Can you give a few more details about your setup, please?\n- What host OS are you on?\n- Do you know much about the source of the PL2303 you have (ie is it more likely to be genuine or fake?)\n- What ESP8266 configuration/board? Anything unusual about it?\n  I'll aim to get a setup that resembles yours as closely as I can.\n@pfalcon wrote:\n\nOf course it's 0d65561, affecting many people.\n\nDo you have any basis for \"many people\"? PR #96 was merged to master 3 months ago, went into a stable release 2 months ago. This is the first bug report regarding it.\n\nI prepared to write an angry bugreport, \n\nBug reports are very welcome. Angry bug reports are not welcome.\n\n\"you added new sub-tested feature, at the expense of a well-known working one!!!11\". \n\nI added the feature because what I saw in testing (and what Cesanta saw in testing) was to go from flashing 90% reliably at 460800 or 70% at 960800 to flashing 100% reliably at 1500000.\nFor the record (and given I feel the need to defend myself), the process around this change was quite careful to minimise the impact of regressions. The PR was open for a month and was updated several times based on testing and discussion.. The v1.0 stable release came out before PR #96 was merged, to minimise the impact on anyone who hit a regression (this timing was not a coincidence). The v1.1 release (which included #96) came out a month later after no bugs were reported in master.\n\nsaying such things to IT professionals is getting old,\n\nBug reports that include facts are welcome. Code review is very welcome. If you want to grumble about other people's professionalism then please find somewhere else to do this.\n@cnlohr , sorry to digress - thank you again for the bug report, and I'm sure we can resolve this. I'll be in touch with a change that reverses the greeting direction, I have a suspicion this will solve it given the \"sometimes works\" nature of the bug. Otherwise I can hopefully reproduce it once I have similar hardware.\nAngus\n. @cnlohr:\nIf you get a chance can you please try the fix/bad_hispeed_sync branch. I don't know if this will make a difference, because I haven't reproduced the bug yet. But it seems like a promising fix. I also added some documentation for the stub build/test process, to try and make it easier if you want to try anything with it.\nAlthough the stub is a change, it's a change in the direction of more documented and debuggable flashing process and it removes the need to workaround bugs in the binary ROM loader. Once this bug is fixed I don't expect anyone to see performance regressions as a result of the change, quite the opposite.\n. Hi @cnlohr, glad to hear you're up and running again at an OK speed. Sounds to me more and more like a race condition when the adapter changes speed (it's receiving some bytes at the old baud rate, or at least before it settles at the new rate.) \nVery curious to hear if the branch I linked above makes a difference. \nI also ordered some px2303 adapters from taobao. When they get here I can try to reproduce.\nAngus\nPS Great project write up in IEEE Spectrum. Nice work!\n. Interesting results. It is entirely possible that v1.0.1 wasn't checking some interim result, but I still suspect it's related to something lower in the stack.\nMy PL2303s turned up and they seem to be the design as the ones you have, only the PCB colour is different from the Electrodragon photo.\nI only had time to do a quick test so far, but on my Linux system the one I tested works. With v1.1 I can reliably flash up to 2.5Mbit serial rate (a new personal best actually!). With older v1.0.1 I got 80% success rate at 1Mbit but at higher speeds it fails to sync (which is similar to the performance on other adapters, that limit appears to be at the ESP8266 auto-baud-sync end).\nA log of the session, although there's not much extra detail there:\nhttps://gist.github.com/projectgus/f589448bed6cccb70d5cdc5ca6065360\nSome photos of my setup - TX/RX/GND from PL2303 to a NodeMCU board, NodeMCU connected to USB power only so its onboard USB/serial adapter won't enumerate. Manually resetting each time via GPIO0/RST.\n\n\n(Please excuse black wire used for serial signal, running out of jumper leads at my desk!)\nIf nothing in the hardware setup grabs you as significantly different (power availability, maybe?), then I suspect drivers... What host OS are you using?\n\nI'm also really hoping to get more people on board with some of the ESP8266 stuff I do. I.e. high speed ADC access, my brand of webserver. Etc... We'll see though.\n\nI've been meaning to take a close look through your repos for a while. The details of the analog-TV-over-I2S hack in particular was something I'm keen to get my head around.\n. I just realised from the code you posted that your failure may be happening earlier than when I expected it to be. So this may be before the stub is even running!\nCan you please post a log of the output from a failed session, with unmodified v1.1 (or current master, which is basically v1.1)?\n. OK, I'm glad you've got it working but that's weird that it seems baud rate dependent.\nThe esptool stuff uses pyserial to set baud, which is platform-specific from there on down. On Linux there are two different ioctls, an older one for \"standard\" POSIX baud rates and a newer one that can handle arbitrary rates. IIRC pyserial chooses the ioctl based on the baud rate. On Windows from what I remember it's an arbitrary rate in the API call. I don't know about OS X.\nWhat OS are you using?\n. Interesting.. Weird I can't reproduce, I just re-ran some flashes at high POSIX baud rates and I still can't get any failures. Maybe my PL2303 is different, or I got lucky with it somehow...\nAnything unusual about your hardware? (is it Raspberry Pi, or something else slower than a modern PC?) What kernel version (uname -a)?\nIf you have time, could you please send me some dumps of the output of \"strace -tt -e read=3 -e write=3 esptool.py write_flash\"? Ideally a couple where it succeeds and a couple where it fails, maybe at 1Mbit and also at a reliably bad baud rate?\nI'd also be interested to see your Salae dumps if you're able to post them somewhere.\nThanks!\n. Thanks for posting those captures, @cnlohr . Glad things aren't as broken as we feared, although something really odd is still going on here.\nThat capture is with an unmodified copy of current git master, yes?\n- In the strace, I see /dev/ttyUSB0 opened at 1000000bps. Sync bytes are sent but garbage is received back.\n- In the Saleae capture I see sync bytes going out at 1000000 but replies coming back at approx 8333333 baud rate. Which implies the ESP's auto bauding has failed to lock onto the 1Mbit sync.\nThis is not really unexpected, this happened a lot in v1.0 and is the reason why we should only \"sync\" (using the autobaud) at max 115200bps from now on. If a higher baud rate is specified with -b, the rate is set by the flasher stub in a more predictable way before flashing starts. This way we get both more reliable syncing and higher throughput.\nBut... I don't actually understand how the code from current git can be opening the serial port at a higher speed. Did you modify something in the code? What command line are you passing in?\n. Ah! Try using the -b parameter or setting the ESPBAUD environment variable.\n. With added complexity comes reduced quick-hackability ;)\n. @pfalcon:\nThe actual v1.0 release was v1.0.1, because I some metadata was missing in setup.py for the v1.0 upload.\nhttps://pypi.python.org/pypi/esptool/1.0.1\nhttps://github.com/themadinventor/esptool/releases/\n. If they were generate correctly, the binary files have the offsets that they should be flashed in the file names. So you can do write_flash 0x00000 my_app.elf-0x00000.bin 0x01010.bin my_app.elf-0x01010.bin\nHowever, exactly what you flash where depends on what you used to build the ELF file in the first place. The project you used for building (was it Espressif's SDK or something else?) may have some instructions about flashing.\nIt's likely they want you to run \"elf2image --version=2\" instead, which will produce a single file instead of two files (which you then would usaully flash as write_image 0x1000 my_app.bin The warning about --version=2 is because esptool.py saw that the way the ELF file was structured internally (addresses of sections) implied that it may have been linked in a way to \n. Oh, right. Yes, I gave you bad advice - you almost certainly want to use elf2image --version=2 to create a single image to flash. You can only flash at addresses which are multiples of 0x1000.\nThe software environment that produced the ELF binary should have more instructions about what address they expect you to flash it at.\n. Hi,\nI''ve suggested this twice already, but the software project that created the ELF file should have instructions about where you should flash it.\nYou'll need to flash some other bootloader binary at offset 0x0000, and then probably flash my_app-ota.bin at 0x1000. But I can't tell you this for sure, you need to go back to the project where you compiled your program from. Depending if it was Espressif's SDK or something else, it will have different requirements.\nAngus\n. I'm honestly not 100% sure because I don't really use Arduino.\nOne thing is definite - if you use the .bin file from Arduino (esptool-ck) then you can flash it at offset 0x0 in the same way (esptool.py --port port --baud baud write_flash 0 myapp.cpp.bin).\nBut \"generate binary files\" is a different problem. Do you want to go from an Arduuino .elf file to a .bin file without using esptool-ck?\n. Hi @romuye123 ,\nDid you make any more progress with this issue?\nAngus\n. Closing, but feel free to reopen if you think there's an esptool.py issue here.\n. This assertion was removed in v2.0 release. write_flash can now write at non-sector-aligned boundaries, an error will only occur if two image files are written to an overlapping sector in the same command.. @PeterQFR: fair point that a lot of these options were probably necessary but buried further down in the README. I've added some text near the top to draw attention to them. PRs that further clarify the README would be welcome.\n@romuye123: Please go over the Troubleshooting steps listed in the README here: https://github.com/themadinventor/esptool#troubleshooting. If you still see errors then please open a new issue and explain your hardware setup and the steps you have tried.\n. Hi pieman64,\nShould be possible, after the Arduino binary is generated it's no different from any other ESP8266 binary image.\nCan you please post the command line you're using to flash, and some sample output? Have you been over the Troubleshooting list in the README?\n. It does sound like some of your hardware is faulty.\nYou can try a lower baud rate, maybe 9600 (as suggest in the troubleshooting), to rule out any intermittent serial comms problems. I'd also double-check I was supplying adequate power to the modules, and double check all connections.\n. Closing this as it's been a while. If you think there's still an esptool.py issue here, please reopen.\n. Hi,\nThanks for your concern with improving esptool.py. Unfortunately, this problem is complex. Please read the comment on the line directly under the line you changed.\nAngus\n. Thanks for posting an update. The circuit used on the D1 is very common on ESP8266 dev boards, so I think maybe Q1 or R7 on your board may not be soldered right.\nHowever, if anyone else also runs across this problem on OS X then it could still be a timing issue from esptool.py, so feel free to comment.\n. > when I try to read the flash_id it seems to return a wrong value: Manufacturer: 00, Device: 0000, Detected flash size: Unknown \nThis indicates the flash chip (inside the metal can on the board) isn't responding at all to the ESP chip.\nTry removing your development board from the breadboard. Sometimes breadboards can short the SPI flash pins on the board and cause this kind of problem.\nIf it's the same with the board totally disconnected from the breadboard then you have a faulty development board. The quickest solution is probably to replace it.. > Is it still possible to rely on non-vendored versions of those modules third party modules?\nYes, at least this is intended (and I should explain this in the README, once I get around to updating it!)\nThe third-party modules are named in setup.py install_requires, with the idea being that if you install via pip, or setup.py install, then you can use Python \"system\" modules for these. If you run esptool by cloning the repo (which a lot of people do, and it's currently how we include it in esp-idf) then you use the vendored copies.\nWith Python 3 support coming, we may be able to some day reasonably expect that everyone has pip (hooray!) so it may be enough to have a requirements.txt and a note in the README. That would be nice.. Thanks for reporting this with so many details. The Troubleshooting section for this problem gives two possibilities, one of which is power and the other one is to lower the baud rate. So it seems like you've gone over these already!\nDo you get the exact same behaviour with the CP2102 as you do with the CH340? Is the ESP-12F on a breakout of some kind, or is it wired directly in? Any capacitors on/near the ESP-12F?\n. @KaDw I missed this until roger commented before, but -fs 8m specifies a 1MB flash chip. If the image you're flashing is large, it may be that you're running out of flash. ESP-12Fs all have 4MB (32mbit) flash chips so you can use -fs 32m as a size argument.\n. Did you figure anything else out with this, @KaDw ? I'm tempted to think it's still a hardware issue of some kind (either power or USB/serial chip/drivers).\n. Good to hear, glad it's behaving now.\n. @ouaibsky I think everyone who reported this problem here found that it had something to do with power stability. Suggest going through the list of suggestions here: https://github.com/espressif/esptool/#troubleshooting. It does seem like MacBooks are the common factor here. @ouaibsky @KaVo194 can you also please let me know:\n\nWhat ESP32 board/hardware do you have?\nIf your board has a \"BOOT\" button, what happens if you hold this down while the flashing process starts?\n. @Apaezmx, that's a very interesting result! I think the bad news will be if you try to boot the ESP8266 and actually do anything (like connect to WiFi), it will immediately brown out and result or end up in a bad state.. @Apaezmx Flashing uses a small amount of power, but enabling the WiFi radio and transmitting uses a much larger amount of power.\n\nIf it's working for you then that's great.. Hi stephane,\nInteresting hack!\nI think from the esptool.py side it should more or less \"just work\" as a 32mbit chip. The flash-size parameter is for the software & ROM routines on the ESP to know how large the flash chip is. 32mbit (-fs 32m) is the largest supported by the Espressif SDK (and possibly also the the ROM bootloader will check this value). There are no other constant values supported by the SDK to indicate larger flash sizes.\nSo, to begin with, I'd suggest just flashing with -fs 32m and make sure it works that much.\nRegarding actually using the extra 96Mbits of flash, I believe all of the ROM SPIErase/SPIWrite/etc routines check a data structure in RAM called \"flashchip\" (initialised by the ROM) to determine the flash size and whether an operation is out of bounds. You could try overriding this value to trick the ROM routines into letting you attempt operations on higher offsets.\nHowever, I also suspect (I don't know for sure) that the SPI hardware may not support addressing beyond the number of address bits required for 32Mbit. So requesting past this address may just wrap the actual SPI operation, so it returns back to the beginning.\nIf this turns out to be the case, you could always write your own SPI access routines that talk to the hardware directly instead of via the ROM functions...\nIf you have a logic analyzer, tracing the SPI flash commands while messing with the bootloader stub is probably a place to start. That way you can see exactly what is going out to the chip each time.\nGood luck! :)\nAngus\n. Hi @stephaneAG ,\nHow did you go with this? Is there anything you think we can/should add in esptool.py to support oversize flash of this kind? Otherwise I might close this issue.\nAngus\n. Do you have some URLs or flash ids for the modules which are shipping with 16MB?\n. > Any chance this will be included in 2.0?\nSure. If the ESP8266 ROM bootloader is happy with these new flash size header values (0x80 and 0x90) then we can add these as well. If that's the case, could you please send a pull request which adds these same values as used in nodemcu's fork?. Hi @marcelstoer & @capedra ,\nThe ESP8266 non-OS SDK with support for 8MB & 16MB flash sizes is being tested now, ahead of a release. esptool.py support for these sizes should be available in the master branch shortly.\nAngus. Hi everyone,\nThanks for bearing with us, I know this process has been a bit slow.\nChanges for 8MB & 16MB flash sizes are in d2f35670, ready to merge. @marcelstoer (and anyone else), can you please confirm that all works for you? There's a new note in the README about the 4MB-c2 configuration, which I think was added for NodeMCU some years ago (it's not supported in Espressif's SDKs) - is that correct?\nCheers,\nAngus\n(The 2.1.0 ESP8266 non-OS SDK to support these flash sizes will be released shortly.). > Looking forward to it. Will you make a 1.3.1 release that contains this fix or will we have to wait for\n\n2.0-final? Reason for asking: my policy for the PyFlasher is that I only incorporate final esptool.py releases.\n\nA reasonable policy! I'm hoping to only do bugfix releases to v1.x from now on. However, what I can do is fast-track v2.0 final. It's been a stable beta for a while now and the amount of remaining tidy-up work is small (mostly testing the new espefuse/espsecure command line tools work fully with Python 3.)\n\n\n4MB-c2 configuration, which I think was added for NodeMCU some years ago\nI wouldn't know, sorry.\n\n\nOK, no problems. Looking at the history of this again, looks like it was added in #42, and the PR contributor mentioned Espressif SDK v1.0.2. However support for this size appears to have never been added to the SDK build tools back then, which is very odd. So I'll mark it as fully unsupported.\n\n\nThe 2.1.0 ESP8266 non-OS SDK to support these flash sizes will be released shortly.\nWill we see that on https://github.com/espressif/ESP8266_NONOS_SDK?\n\n\nYes, the SDK release has been delayed due to final testing of some changes (unrelated to this change), but as soon as that testing is complete it will be released - and appear on github.. Thanks, this looks like a good addition. I had something similar on the checklist for v2.0 #121 . v2.0 will probably fail in this case, but warning like this is a good stop-gap.\n. Hi folks,\nThanks for getting in touch. I agree the permissions issue on Linux is a tricky one. At the very least I guess it should be mentioned in the README for esptool.py as well.\nIs there a downside of telling users about the dialout group? I guess if it's incorporated in the package then it's seamless rather than requiring a manual command & a re-login.\nMy concern with collecting udev rules is that all of the esp8266 hardware I know about uses generic USB/serial adapter chip USB PIDs/VIDs - the common chips are FT232R, CP2102, CH340G but more or less every USB/TTL adapter is being used sometimes. So a comprehensive set of udev rules to cover all of these would amount to covering all current generation USB/serial adapters. Which seems fairly close to what the \"dialout\" group is designed to handle - \"on this system, can this user access serial ports?\"\nThat said, if you were to submit a PR with a set of udev rules like that then I'd be happy to host them in this repo and mention them as an option in the README. I'm guessing they'd work with any systemd-enabled distro (the uaccess tag is a udev-systemd thing, yes?)\nBTW, it's awesome you're packaging esptool into Fedora. Much appreciated! :)\n. OK @frenzymadness,, sounds good\nIf it's OK with you, I'm going to leave this issue open as a reminder that the esptool README should mention permissions on Linux.\n. Hey,\nSorry I never got back to you on this. This is really cool, I had not noticed pyserial can do this!\nHappy to merge, the only thing I noticed is that serial_for_url was new pyserial 2.5. Previously I think older versions would work.\nVersion 2.5 is 6 years old (in Debian since Wheezy, in Ubuntu since Precise) so I'm happy to add this requireut. But could you please also add a note to the existing README section about pyserial, mentioning 2.5 or newer? Thanks.\n. Hi @jeremyherbert & @jrobeson,\nThis looks like good work, thanks for sending it! There are a couple of thoughts I have on this:\n- Re: unicode literals, what's the upside to using them? Just that it forces us to never assume any non-byte-string is 8 bits wide?\n- I have a Work-In-Progress v2.0 PR open in #121. This adds some very major refactors, including ESP32 support. It also adds automated tests, similar to the set of tests you ran above. So although we can't run those on-device tests via Travis, we can run them manually (and eventually I'd like to integrate them with github via an external CI tool).\nWhich means there are two possible avenues here:\n- Do a V1.2 release which supports Python 2 & 3, followed closely by a v2.0 release which will also support both.\n- Roll up the Python 2 & 3 support as yet another V2.0 feature.\nIf we put it into V2.0 and run automated tests on both Py2 & 3, I think we can probably live without unicode literals - the tests should \"keep us honest\". :)\nI'm leaning towards the second option but I could be convinced to do a V1.2 release as well.\n. Hi everyone,\nDiscussed this with @jrobeson last week on IRC. Forgot to update here.\n- For V1.2 release, I think it's easiest to not use u\"\" or unicode_literals, and have strings be their \"native\" type on py2 or py3.\n- For the future V2.0 releases, \"subprocess\" is removed so it should be much easier to use unicode_literals from there on forward.\nRegarding moving Python 3 only, V2.0 was probably the perfect release to do this in, but we're already shipping esp-idf to people with Python 2 & the V2.0 development version. So Python 2 support is probably going to stick around for a while longer. :( \nFor V2.0 I will update all the relevant documentation to encourage everyone to use the Py 3 version, and see how things go from there I guess...\n. Yes, I think that & resolving the merge conflict is all that's needed.\nI'll probably do some of my own tests locally before merging (I can backport the test script I use in v2.0), but I expect it'll be good to go.\n. Thanks @jeremyherbert , much appreciated. :)\n. @jeremyherbert , I snuck in a couple of other v1.2 commits before this one. If you get a chance to unpick the merge conflict that would be great, thank you. Let me know if you don't.\nOnce this is merged I'll run some more tests and make the v1.2 release on pypi.\n. Bumped this to a new v1.3 milestone. If anyone here has the time to resolve the merge conflict, that would be great. Otherwise I'll try to make time soon.\n. @jrobeson I have not yet decided. The v2.0-dev interface is still compatible at the moment, but there are some things I'd like to change in it. I'll keep it fully backwards compatible if it's not too awkward, though.\nI am still committed to doing a v1.3 release with Python 3 support but without the ESP32 changes/features. \n. Closing this in favour of #150. Comments/review/additions on that PR welcome!. Thanks @jimparis, this looks great. We have this feature in the v2.0 development branch (#121), but it's good to have it in master as well.\n. It's a good request. The esptool.py for ESP32 is still a work-in-progress, the full documentation for its status is here:\nhttps://github.com/themadinventor/esptool/pull/121\nOne of the \"TODOs\" in the back of my mind was to finish cleaning up the output (which includes some debug strings like this one.) I'll put it on the official todo list, as well.\n. This is now fixed in the esp32 branch (ref #121):\nesptool.py v2.0-dev\nConnecting...\nUploading stub...\nRunning stub...\nStub running...\nAttaching SPI flash...\nConfiguring flash size...\nCompressed 282836 bytes to 123726...\nWrote 282836 bytes (123726 compressed) at 0x00010000 in 10.9 seconds (effective 207.8 kbit/s)...\nHash of data verified.\nCompressed 3140 bytes to 149...\nWrote 3140 bytes (149 compressed) at 0x00008000 in 0.0 seconds (effective 1418.6 kbit/s)...\nHash of data verified.\n. How is your ESP-12F wired to the Raspberry Pi serial port (ie which pins are wired up)?\n. In addition to the diagram you posted, you also need a way to reset the chip into the bootloader (by toggling RST or CH_PD low then high.)\nSuggest trying the following steps:\n- Tie GPIO0 to ground permanently\n- Open a serial terminal at 74880 bps (Not all serial programs can do 74880. You can run miniterm.py /dev/ttySx 74880.) and leave that running.\n- Pull CH_PD low and then release to let the pull-up pull it back to VCC.\nYou should see some output printed on the miniterm console. If you don't, it indicates you still have a wiring problem.\nIf the above works, quit miniterm.py and run esptool.py (don't touch the ESP module wiring in between these two steps), and see if that works.\nAngus\n. (@serus22, I think @bvernoux's post is intended for the other issue regarding ESP32+Windows, not this issue. You can probably skip it.)\nets Jan 8 2013,rst cause:2, boot mode:(5,5) waiting for host\nboot mode:(5, and waiting for host indicate the ESP8266 has gone into SDIO boot mode. You need to pull GPIO15 low to avoid this mode. There's a full description of the pin configuration needed here:\nhttps://github.com/themadinventor/esptool#required-pins\n. @serus22, are you closing because you got this working or did you give up?\n. No worries. It does sound like a hardware-specific problem. Good luck figuring it out!\n. Hi @pfalcon,\nThis looks great, thanks. A big usability improvement.\nThe only thing I'm unsure about is throwing a fatal error if the flash size can't be detected. I'd prefer printing a warning and falling back to the old default. This way if anyone is using the default flash_size successfully now with unusual flash, an update won't change their behaviour.\nAngus\n. One other thing, the README needs updating to mention the new argument value & default as well. We can probably remove --flash_size from the \"default\" write_flash example as well, which is great.\n. Awesome, thanks!\n. I'm planning a v1.2 release, there's one remaining PR assigned to this release (link: https://github.com/themadinventor/esptool/milestone/1 ). So sooner seems likely.\n. That's odd! Can you post the output of python -V, please?\n. (FWIW, the argument that should be recognised from the ones you posted is esptool.py -h. Also esptool.py --help - with a double dash.)\n. Hi,\nSorry I never got back to you, to be honest this behaviour has me a bit stumped - the argument parsing functionality built into Python, and your Python installation looks correct to me.\nOne more thing to try if you're still trying to figure this out, use a text editor to add two lines in esptool.py after the first line, like this:\n```\n!/usr/bin/env python\nimport sys                                                                                                                                                                 \nprint (sys.argv, sys.platform, sys.version_info)                                                                                                                             \nNB: Before sending a PR to change the above line to '#!/usr/bin/env python2', please read https://github.com/espressif/esptool/issues/21\n\nESP8266 ROM Bootloader Utility\n```\nAnd run esptool.py -h again, you should get a line with some more details about the current running Python environment (and what it thinks the command line arguments were.). @screig , did you have any luck following @visasimbu's suggestion?. Closing due to lack of updates. Feel free to reopen if this is still an issue.. ESP_FLASH_BLOCK doesn't get used for very much now that the flasher stub is used since esptool v1.1. Do you have some more rationale for why it should be higher?\n. Ah, I see. The \"block\" referred to by ESP_FLASH_BLOCK is part of the serial protocol of the ROM bootloader (data gets sent as \"blocks\" in the protocol). It's not related to the block erase command of the SPI flash.\n. Good catch, thanks. I'm guessing you're seeing this on some version of Windows?\nI think time.clock() is only useful on Windows, it's process CPU time on macOS & Linux. In Python 3.3 they added time.perf_counter() to work around this.\nIn any case, we can fix the divide by zero error.\n. This is fixed in the v2.0 ESP32 development branch. I haven't backported the fix to master as I think it's probably only a problem with compressed upload turned on, but I'll close this once it's merged there.\n. esptool.py v2.0 is now merged to master, so this fix is also in master.. Please try these suggestions in the troubleshooting guide:\nhttps://github.com/themadinventor/esptool#write_flash-succeeds-but-esp8266-doesnt-run\n. Did you make any progress with this?\n. I'm going to close this as it seems like it's not an esptool.py issue, but feel free to reopen if you have some information.\n. Thanks @negativekelvin. I don't know if you're following the forum thread, but I'm guessing you are. \nhttp://esp32.com/viewtopic.php?f=2&t=334&p=1503#p1497\nI considered this solution as well (although I didn't test it either.) The problem is, I'm not comfortable relying on the private interface of pyserial. At minimum, it's necessary to check it hasn't changed over any previous supported pyserial versions. But even if it works with all those, if the private interface changes in the future then it could break esptool without warning.\nA hacky but somewhat safer way would be to check all these properties exist with hasattr() before calling them, and fail back to the public API instead. But this is still super hacky.\nThe safest, most maintainable, fix that I can think of is probably to call the win32 GetCommState/SetCommState API functions directly. This is a stable public API, and the only private part of pyserial it needs to touch is the port handle. I still don't like that idea, but it seems least likely to suddenly break.\n. Or to submit a patch to pyserial, some variant of the existing apply_settings() that applies all settings as an \"atomic\" operation.\n. I just tried a different fix for this issue (1f5d9d2) which should be equivalent to calling _reconfigure_port, and I thought would definitely correct the issue.\nUnfortunately the timing seems to be the same (trace attached), even when both DTR & RTS are set in the same Windows API call. Which I think means the CP2102 Windows driver is doing this, and there's no way to change that pulse in software.\n\n. > > we are lucky that we have a reset by watchdog after 0.385s\n\n\nWhat is the cause of this?\n\n\nIt's a silicon bug, that will be fixed at some point.\nA solution that seems to work reliably is to add a ~2.2uF capacitor (I think 470nF-2.2uF range should be suitable) to the EN pin (between EN and GND), so it rises slower (there is a ~12K pullup on this pin.) This is not super desirable, as it requires a hardware change, but it works.\n. Hi @bvernoux,\n\nFor information it is already fixed in actual branch even without the capacitor\n\nI don't believe this is fixed in any branch at the moment, without adding either a capacitor or the time.sleep(0.5) modification that @ladyada mentions.\nHi @ladyada,\n\nplz re-consider the wontfix? there's a lot of those DevKitC's in the world now :)\n\nThe problem I see is because the 0.5s delay happens to rely on a silicon bug, which is already fixed in the forthcoming chip revision. When the updated chips come out, the bug will bite everyone again (if the capacitor on EN hasn't been changed in the board design) and it will also take longer any time esptool.py fails to connect, due to the extra delays.\nThere are perhaps some other ways to work around this, either a command line option like --variant or --board to let people specify they have the gen1 silicon, or a long-standing suggestion (#27) to read back the \"header\" message that the chip prints in order to detect boot mode failures earlier.\n. > yah ok - i didn't realize it was a silicon issue on the esp32 (thought it was cp210x) in which case... i agree y'all should keep as wontfix.\nJust to be sure we're on the same page, the silicon issue on esp32 is what allows the extra time.sleep(0.5) delay to work as a workaround (the chip resets twice due to an unexpected WDT), rather than the cause of this bug. The cause of this bug is an interaction between the reset circuit timing and Windows driver behaviour (probably CP210x-specific but I haven't confirmed this.)\n\ni will update the devkitc product page to tell people to add a capacitor if they're having upload probs on windows\n\nThat would be awesome, thanks very much. :)\n. Yes, newer Espressif DevKits will fix this issue via increased capacitance on the EN pin.. esptool v2.0 (current master, and the version in esp-idf) has a new --after esp32r0 option which will work around this issue for ESP32 original revision chips.\nThe option can also be selected under \"make menuconfig\" in esp-idf.. Thanks to @MartyMacGyver and everyone else who helped diagnose this, we seem to have a reliable fix now which doesn't require any special command line arguments.\nThis fix should propagate to the ESP-IDF & Arduino esptool.py versions, soon.\nAlso, new development board hardware should no longer exhibit the underlying bug in the first place (provided 100nF or more of capacitance is present on the EN pin, with a 10K or higher pullup on that pin).\nPlease open an issue if this fix doesn't appear to fix auto-reset on your board (either reopen this issue, or if you have more specifics to provide then please open a new one instead.) Thanks.. Hi,\nThanks for the comprehensive explanation of what you're seeing.\nIt sounds like there's something unusual about the USB CDC firmware you have. In TTL serial, both RTS and DTR are \"active-low\" signals.\nThis means, when the signal is asserted (logic 1 ie True) the voltage on the pin is pulled to 0V. When the signal is de-asserted (logic 0 ie False) the voltage on the pin is 3.3V.\nTTL Serial is not codified in a standard (I think it derives from the EIA-232/RS-232 standard, where 0=\"space\"=+12V and 1=\"mark\"=-12V, and the RS-232 hardware control signals are also inverted from these bit signalling levels). However you'll find the same \"data signals are active high, control signals are active low\" scheme is used across almost all hardware TTL serial peripherals, and definitely all common hardware USB/TTL adapters (FTDI, Cypress, Prolific, CH3xx, Microchip, etc.).\nThe reset sequence code looks funny at first, and could probably be commented better, but it is:\n- setDTR(False) - deassert DTR - 3.3V on pin - GPIO0 goes high\n- setRTS(True) - assert RTS - 0V on pin - chip pulled into reset\n- delay (ensure chip is actually in reset)\n- setDTR(True) - assert DTR - 0V on pin - GPIO0 pulled low (to select UART bootloader)\n- setRTS(False) - deassert RTS - 3.3V on pin - chip let out of reset\n- delay (allow the chip initialisation to read the GPIO0 signal and select the UART bootloader)\n- setDTR(False) - deassert DTR - 3.3V on pin - GPIO0 goes back to 3.3V, same as initial state\nThe reason for the unnecessary-seeming additional DTR transitions is that some ESP hardware uses a reset circuit originally designed into the nodemcu dev boards where a pair of transistors are used to keep GPIO0 & RST as-is when both RTS=True && DTR=True, so that \"normal\" serial programs (that assert both control lines by default) won't hold the chip in reset. These transitions aren't strictly necessary for the simpler \"wire RTS to RST & DTR to GPIO0\" scheme, but they don't hurt.\nI'm not entirely opposed to adding reset configuration options, but in this case it sounds to me like Microchip got their PIC USB-CDC firmware wrong (even their MCP2xxxx series of USB/TTL adapters use active low control signalling). So probably better to fix it in the firmware.\n. @jrobeson , are you planning to rewrite or should I merge this as-is?\n. I think this is a good suggestion, I'll cut a v1.2 release today or tomorrow.\nAngus\n. Thanks for reporting this. Looks like I got bit by this bug building the wheel:\nhttps://bitbucket.org/pypa/wheel/issues/135/bad-interpreter-lines-can-sneak-into\nI'm away from my computer today but I'll fix this asap. Building the package on Travis might be a reliable solution. \n. Please try again, I've deleted the wheel package from pypi and uploaded a plain source package.\nThe bug seems to be triggered when you have a shebang line, a virtualenv activated, and try to build a wheel:\nhttp://stackoverflow.com/questions/33792696/how-to-prevent-python-wheel-from-expanding-shebang/33808977\nAn odd thing is v1.1's wheel file contents also include the second esptool.py with a wrong shebang line generated into it also, but noone seems to have a problem there. Possibly pip has been installing the source package instead.\n. Even weirder, \"pip install\" with 1.2 now downloads the source package tarball, builds a wheel from it, and then installs the wheel. Even when this process happens inside a virtualenv, that wheel ends up OK:\n$ unzip -l /home/gus/.cache/pip/wheels/f1/70/54/a5b96d296178d2496518cf3be381e583d1d6bdd1981bfd5c19/esptool-1.2-cp27-none-any.whl\nArchive:  /home/gus/.cache/pip/wheels/f1/70/54/a5b96d296178d2496518cf3be381e583d1d6bdd1981bfd5c19/esptool-1.2-cp27-none-any.whl\n  Length      Date    Time    Name\n---------  ---------- -----   ----\n    53947  2016-11-04 22:15   esptool.py\n    53934  2016-11-06 12:03   esptool-1.2.data/scripts/esptool.py\n      906  2016-11-06 12:03   esptool-1.2.dist-info/DESCRIPTION.rst\n     1018  2016-11-06 12:03   esptool-1.2.dist-info/metadata.json\n        8  2016-11-06 12:03   esptool-1.2.dist-info/top_level.txt\n       96  2016-11-06 12:03   esptool-1.2.dist-info/WHEEL\n     1772  2016-11-06 12:03   esptool-1.2.dist-info/METADATA\n      643  2016-11-06 12:03   esptool-1.2.dist-info/RECORD\n---------                     -------\n   112324                     8 files\nHead of esptool-12.data/scripts/esptool.py:\n```\n!python\nNB: Before sending a PR to change the above line to '#!/usr/bin/env python2', please read https://github.com/themadinventor/esptool/issues/21\n\n```\n(Which is correct, pip translates this to the correct shebang line during installation of the wheel.)\nAt least there's an easy enough workaround to always post source packages and never post wheels from now on...\n. Thanks for providing a detailed report, @jmai444 .\nesptool v1.1 doesn't wait for flash erase completion, so there's no way to know if the erase operation is done. If you install v1.2.1 (the current stable release) then it has an updated erase_flash routine that waits until completion before exiting.\nA couple of things to keep in mind:\n- The erase_flash operation can take a long time (I have some flash chips where it's upwards of 25 seconds.)\n- You don't usually need to erase_flash before write_flash, esptool.py will erase each sector before it writes it.\n. I'm sorry but I don't know anything about platform.io, so you may have more success looking for documentation or help with their flashing process so you can reproduce it (or fish around in their code/output to figure out what files it's flashing where).\nIt sounds like at mimimum the firmware.bin file is flashing correctly, or your program wouldn't be running.\nMy guess is that there's a second SPIFFS image file that is generated as part of the build process and needs to be flashed at a certain address in the flash, so that SPIFFs.begin() will find it. You can add additional address(es) and filename(s) to the esptool.py write_flash command line that you posted.\nSorry I can't be more helpful, but this is really outside the scope of esptool.py's functionality.\n. Hi Shodan,\nI think something else is happening in the build process. If you look at the output of \"xtensa-esp32-elf-objdump -h\" for both ELF files, you'll see that the section sizes are quite different.\nThe esp-idf default linker script (under components/esp32/ld/esp32.common.ld) puts certain libraries into IRAM. The relevant section is here:\n.iram0.text :\n  {\n    /* Code marked as runnning out of IRAM */\n    _iram_text_start = ABSOLUTE(.);\n    *(.iram1 .iram1.*)\n    *libfreertos.a:(.literal .text .literal.* .text.*)\n    *libesp32.a:panic.o(.literal .text .literal.* .text.*)\n    *libphy.a:(.literal .text .literal.* .text.*)\n    *librtc.a:(.literal .text .literal.* .text.*)\n    *libpp.a:(.literal .text .literal.* .text.*)\n    *libhal.a:(.literal .text .literal.* .text.*)\n    _iram_text_end = ABSOLUTE(.);\n  } > iram0_0_seg\nSo libfreertos.a will be linked into IRAM (and therefore can be used when flash caching is disabled), whereas libIDFComponents_freertos.a will not be unless you've modified the linker script to match the new name.\nThe firmware is crashing because at some point during startup it's accessing FreeRTOS code while flash is unmapped.\n(The .bin files are slightly different lengths because irom/drom sections on esp32 must be padded to 64KB boundaries, so the padding will be different for different section sizes.)\n. I've closed the issue as I'm fairly sure this will solve it, but feel free to reopen if you're not sure or if there's something else not right here.\n. Hi @sheinz ,\nThat's interesting, if another serial program works then it does sound like it could be a pyserial or an esptool bug.\nI don't have an OS X box on hand to test with. Is it possible to get some traces of the serial interaction? On Linux I'd use strace for this, I believe OS X has DTrace/dtruss but I don't know anything else about those tools.\nOr alternatively a logic analyzer capture on the serial pins could be useful, just to confirm the baud rate change and look at what traffic is received there.\nAngus. Hi @sheinz,\nThat's interesting. Here's what I see in the capture:\n\nThe initial negotiation all happens at 115942bps (according to the Salae.) This is nominally 115200bps according to esptool.py (that's the configured baud rate for initial negotiation.)\nesptool.py sends sync packets (0x55) a couple of times, the esp8266 locks onto the \"115200bps\" (actually 115942bps) signal with it's auto-baud hardware and talks back at approximately 115942bps also.\nesptool uploads the stub code at 115942bps. The stub includes a \"parameters\" section with the baud rate to switch to, which is 230400bps.\nThe baud mismatch between the driver requesting 115200bps and getting 115942bps (+0.6%) implies either a minor driver problem (wrong clock divider), a slightly out-of-spec crystal on the CH340 board, or that the master clock + divider on the CH340 can't get any closer than this target rate.\nAt 1.453s in the capture, the stub starts running and sends a SLIP frame with its  'OHAI' greeting at exactly 230400bps (this is the 0xc0, 0x4f, 0x48, 0x41, 0x49, 0xc0) above.\nHowever, the CH340 is listening at nominal \"230400bps\" which we can predict is going to be really 231782bps. And I suspect this causes it to see a corrupted frame header of 0xBC instead of 0xC0. And it all falls apart.\n\nSo...\nThe reason the stub uses a fixed baud rate of this kind rather than auto-bauding is that for higher baud rates this is normally more accurate, the ESP8266 auto-bauding is often off by a small amount and this causes errors at higher baud rates (one megabit and up.)\n\n\nYou can confirm this theory by modifying the line in esptool.py:565 here:\nesp.run_stub(json.loads(_CESANTA_FLASHER_STUB), [baud_rate], read_output=False)\nto\nesp.run_stub(json.loads(_CESANTA_FLASHER_STUB), [int(baud_rate * 1.006)], read_output=False)\n... and see if it suddenly works\n\n\n0.6% bit rate mismatch is actually not that bad. I would expect a hardware UART receiver to be able to deal with this. There's no standard for TTL serial, but AFAIK the generally accepted limit is a few percent mismatch. This implies either the CH340G is really intolerant of bit rate mismatch, the signal is bad in some other way, or I've misdiagnosed the underlying cause...\n\n\nIf you transmit data from the CH340G from a different serial program at nominal 230400bps, what baud rate does the Salae see?\n\n\nIf you use different baud rates with esptool.py that might be easier to divide from the CH340G master clock (maybe 250000, 300000, 500000), does it suddenly work?\n\n\nIf you use a different OS (maybe run a Linux VM with USB passthrough), is the baud rate still off by the same amount?\n\n\nAngus. Another thought: maybe the OS X driver isn't changing the baud rate in time, so it's not a clock mismatch but just that it's still listening at 115200bps at that point (or is in the process of changing rates)? The gap between the last 115200bps interaction and the 230400bps OHAI is only 16.8ms.\nIf this is the bug, something you can try is checkout the feature/esp32_v20_refactor branch (flashing works on ESP8266 and ESP32). This branch does baud rate setting in a different way, and the 230400bps interaction is initiated by the host not the ESP.. #102 looks like a different issue, in that case the driver is rejecting the baud rate and refusing to set it (generating the OSError exception). The bug in that case is that esptool doesn't report the driver failure to the user in a clear way.\nIn this issue, the driver is accepting the baud rate but then something is going wonky at the hardware level shortly after that. . Closing this issue as I think it's probably fixed now, and if not fixed then very old.\nThe problem using macOS with CH340G and high baud rates should be fixed in the latest release & master branch, as of 2ec0bc0d58.\nThere was also some discussion about this problem in the PR #247, and another possible (unconfirmed) fix here: https://github.com/espressif/esptool/tree/experiment/ch340_timeout_bug - although I think the  commit linked above was enough to resolve the problem.\nIf you have current esptool.py and are still getting failures then please open a new issue with the details rather than commenting on this one.. This is a bad error message, so it's absolutely not your fault that it doesn't make sense. The esptool options have to passed in a certain order - a small number apply to \"esptool\" and some apply to the \"write_flash\" subcommand.\nThis is annoying, and I've been trying to think of a good way to fix it but at the moment esptool relies fairly heavily on python's built-in argument parsing support which is what does this.\nYou should find this argument order works (-b before write_flash, -p goes before write_flash also.)\nesptool.py -b 74880 write_flash -fm dio -fs 4m -ff 80m 0x0 nodemcu-dev-13-modules-2016-11-24-01-56-58-integer.bin\n(BTW, -fs 4m is only 4 megabits which is half a megabyte. If you have a huzzah you probably want -fs 32m for 32 megabits ie 4 megabytes. Or with esptool v1.2 or newer you can leave it blank and esptool will detect the actual flash size.)\nPlease let me know if this works for you. In any case, I'd like to keep this issue open as a reminder that the underly argument order problem needs to be taken care of (ideally, you should be able to put -b anywhere you like. Or, at minimum, the error message you should tell you what you did wrong.). Do you have the blue (V1) DevKitC and/or are you running Windows?\nFor V2 DevKitC on Windows (known issue here), you can hold down the \"BOOT\" button while you run esptool.py. I'm not sure if this also works on the V1 DevKitC.\nIf this isn't helpful then we can look at adding an additional command line option for timeout.. That's unusual. So, Windows is your host OS? If you hold down \"BOOT\" when running esptool.py, does it work first time?. Wow, that's a complex fix!\n\nAre you passing through the DevKitC as a raw USB device (under USB in VirtualBox Settings) or a serial port (under Serial Ports)?\n\nIf you hold down \"BOOT\" when running esptool.py (without Raspberry Pi in the loop), does it work first time?. Thanks, and no need to apologise.. but could you answer the other question I asked you in my most recent post, please?. Thanks. Most functions should be compatible (there's an automated test suite in v2.0 that runs against esp8266 & esp32), but it obviously doesn't test read_mac! Will fix ASAP.. Unfortunately, the datasheet for the SST26VF032 suggests it's probably not compatible with all of the SPI flash command set used by ESP8266.\n\n\nFrom \"Device Operation\" section: \"To provide backward compatibility to traditional SPI\nSerial Flash devices, the device\u2019s initial state after a power-on reset is SPI bus protocol supporting only\nRead, High Speed Read, and JEDEC-ID Read instructions. A command instruction configures the\ndevice to Serial Quad I/O bus protocol\"\n\nDoes the \"esptool.py flash_id\" command work? This uses the JEDEC-ID read instruction, so it should work according to the datasheet.\nThe documentation for the \"Page Program\" command (02h) seems to indicate that on this chip this is a Quad I/O programming operation using 4 data pins. ESP8266 writes to flash using this command as a standard SPI operation (single data pins, pins 4.). Most Quad I/O SPI Flash chips support Page Program (02h) as a standard (1 pin) SPI operation, and have a separate command Quad Page Program (32h) for quad I/O programming, but it seems that this chip does not do it that way.\nSimilarly, the sector erase command seems to expect quad I/O addressing whereas most chips use a single address pin for this command.\n\nThe only solution may be to find a different chip that supports more of the common SPI flash commands.. It looks like the command that Arduino IDE is using to invoke esptool.py is wrong. If you turn on \"Verbose Upload\" in Arduino Preferences then it may give more details to debug this.\nHow did you modify Arduino IDE in order to use esptool.py?. I'm going to close this, but feel free to reopen if you have some more information about the command that the Arduino IDE is using.. Thanks for sending this, @tai. I agree it's a useful feature. It's actually present in the v2.0 development version (the branch corresponding to #121) as the commmand \"erase_region\".\nAt the moment I'm trying to finalise a v1.3 stable release and then merge v2.0 to master to get past the current split development state, which is a bad situation (not least because it leads to doublings-up of effort like this!)\nAt the moment my preference is not to merge this, in order to make it easier to get v1.3 released and then merge v2.0 to master - at which point the functionality will be available via erase_region. This should happen in the next week or two. I'm really sorry for the hassle.. The master branch is now esptool v2.0, which has the new \"erase_region\" command.\nIf you think any functionality is missing from this command, please let me know (or feel free to send another PR).. I don't know how the NodeMCU docs came to that conclusion, it doesn't make a lot of sense to me.\nOne thing that is true is that any flash configuration which works in Quad I/O mode (QIO) should also work in Dual I/O mode (DIO), although not necessarily the other way around. Read performance will be sub-optimal running a QIO-supported flash in DIO mode (reads use two I/O lines instead of four, so the data transfer rate is halved).\nWe could maybe change the default mode in esptool.py v2.0 to the safer-but-slower 'dio'.\nIt is also theoretically possible for stub code (or a software bootloader) to auto-detect flash mode in most cases, via a combination of factors:\n Some flash IDs can be recognised as requiring a particular read mode.\n Read some data in QIO mode and compare it to the same data read in DIO mode. Most modules that are wired in DIO-only mode will give junk reads for half the bits in QIO mode. This is not foolproof, it will give a false-positive if the SPI flash is wired up in quad mode but the additional data pins are also connected to something else (like reused for external peripherals). Also you need a way to ensure that the flash contains \"varied\" enough data that you can be sure the reads will find any unconnected data lines. But it could be useful in a lot of cases.\nWould require someone to do the work to support such a detection mode, though.. Thanks for reminding me about this, printing these interim errors was added in #127 and I meant to do something about it as it's a bit confusing. The previous versions are also seeing a timeout and then retrying, but they don't print anything.. Sorry for the slow reply. Calling esp.connect() in between is probably the best workaround.\nThere's a half-realised intention that the \"ESPROM\" objects can be used as a generic Python API, however - as I'm sure you've noticed - at the moment too much functionality is in the module-level functions (which are intended for use from the command line.)\nThis is getting a bit better in esptool v2.0, as more functionality is being moved into the objects and less in the top-level functions. But there's probably still some work before it gets to what I'd like, which is something like:\nesp = esptool.ESP8266ROM(\"/dev/serial\")\nesp.connect()\nesp.erase_flash()\nesp.write_flash(0, \"image.bin\"). BTW, are you building a more complex script or do you just need to erase_flash and write_flash in the same pass? It would be feasible to add a --erase_flash option to the write_flash command, for the latter case.. Neat!\nI'll let you know if/when I make any progress towards the kind of Python API mentioned in the previous comment. Until then, I think using esp.connect() twice is the best workaround.. Thanks @marcelstoer . I'll close this, but I've opened another to keep track of work needed so esptool.py can be better used as Python module.\nIf you have additional suggestions for changes which would help, please feel free to comment there.. Thanks for this, @thespooler .\nThis PR seems to have been targeted at the python2_and_3 branch, however this branch is merged (as of a couple of weeks ago) - can you re-target to master please? I'll delete the branch (should have done so when support was merged.). Ah, deleting the python2_and_3 branch deleted this pull request. That makes sense I guess, sorry for the hassle though! Please reopen against master when you can.. The flash size & mode are recorded in the 8 byte header at offset 0. When writing to flash at this offset, esptool will change the flash size and mode to match the --flash_mode and --flash_size parameters (or default mode/size). The initial verify knows this, and can account for it.\nThe second verify command doesn't know this, and because these bytes are different verification fails.\nThis is not ideal, but I'm not sure what the best way around it is.. Thanks @pfalcon, @thespooler for the suggestion & PR.\nAfter thinking about it some more, I'd prefer to add the --flash_size and -flash_mode parameters to the verify_flash command, and expect the correct bytes when verifying at offset 0x0. Essentially have it work the same way as when calling write_flash. Most of the code for dealing with this is already in esptool.py and it may even simplify some of the logic. @thespooler , are you interested in sending a PR of this kind?\nBTW, the overall write-verification approach is getting better in esptool v2.0. The v1.x stub code calculates MD5 of the data sent over serial when writing flash, so serial corruption is detected but not flash corruption. The v2.0 code calculates MD5 of the data read back from flash after writing, so it will detect both kinds of corruption.. > Please mind that users are not expected to pass those params to write_flash\nI guess that's a sign we have sensible defaults, at least now that the detection behaviour is in. :)\nThis still gives consistent behaviour if they are added to verify_flash - provided the same defaults apply to both commands, the same values will be expected when verifying.. When you get a chance, please try the latest master branch. As long as the same --flash_size and --flash_mode arguments (if any) are passed to verify_flash as were used for write_flash, the verification result will be the same.. Implemented in bbdeb6683428368bd8d0f83f2d3f593f1cf1f221 using a different approach.. Thanks for pointing this out. Plan was to release v1.3 soon after merging to master, but this got delayed. Will aim to release very soon, otherwise will update README until v1.3 release happens.. esptool v1.3 is now released, and on pypi https://github.com/espressif/esptool/releases/tag/v1.3. Thanks for reporting this. It seems like there's two bugs here, esptool shouldn't be printing such an enormous stack trace for \"IOError: [Errno 2] No such file or directory: '/home/michal/esp32/myapp/build/app-template.elf\"\nThen there's what looks like it might be an esp-idf bug, the ELF file doesn't exist at the time elf2image is being called.\nCan you please run 'make V=1' and attach the output as a log file to a comment here (or post it on gist.github.com or another service)?. Thanks. I didn't think through my request properly, you can do a 'make clean' and then 'make V=1' and update the log with that output? Thanks.\n. Something very odd is happening here:\nThis line should link a bootloader ELF, output to /home/michal/esp32/myapp/build/bootloader/bootloader.elf\nxtensa-esp32-elf-gcc -nostdlib -L/home/michal/esp32/myapp/build/bootloader/esptool_py -L/home/michal/esp32/myapp/build/bootloader/bootloader -L/home/michal/esp32/myapp/build/bootloader/bootloader_support -L/home/michal/esp32/myapp/build/bootloader/log -L/home/michal/esp32/myapp/build/bootloader/spi_flash -L/home/michal/esp32/myapp/build/bootloader/micro-ecc -L/home/michal/esp32/myapp/build/bootloader/main -u call_user_start_cpu0  -Wl,--gc-sections -Wl,-static -Wl,--start-group  -lbootloader_support -llog -lspi_flash -lmicro-ecc -L /home/michal/esp32/esp-idf/components/bootloader/src/main -lmain -T esp32.bootloader.ld -T /home/michal/esp32/esp-idf/components/esp32/ld/esp32.rom.ld -lgcc -Wl,--end-group -Wl,-EL -o /home/michal/esp32/myapp/build/bootloader/bootloader.elf -Wl,-Map=/home/michal/esp32/myapp/build/bootloader/bootloader.map\nIt seems to succeed, and then the very next line refers to the same ELF file path:\npython /home/michal/esp32/esp-idf/components/esptool_py/esptool/esptool.py --chip esp32 elf2image --flash_mode \"dio\" --flash_freq \"40m\" --flash_size \"16MB\"  -o /home/michal/esp32/myapp/build/bootloader/bootloader.bin /home/michal/esp32/myapp/build/bootloader/bootloader.elf\nWhich causes an error because the file doesn't exist.\n\nDoes the build/bootloader directory exist?\nCan you find a bootloader.elf anywhere in your build directory?\nWhat toolchain are you using and how did you compile/install it?\nIs there anything in /home/michal/esp32/myapp/build/bootloader/bootloader.map\n. Very unusual, but I'm glad you got it working OK.. It's possible the flash is damaged or has somehow become write-protected.\n\nIs it also possible it's not really an 8Mbit flash chip. What is the output of esptool.py flash_id?\nCan you read the flash chip model silkscreen from your ESP-01? (This is useful for checking potential write protection modes, as well as confirming the size is what it says it is.). Thanks for these details. How are you powering your ESP-01?. It doesn't seem to be that the flash has accidentally had write protection turned on, as Berg B25Q80 doesn't have a write protection option which would start at the 256KB boundary.\nThe 3.3V regulators on TTL serial adapters may not provide enough current to reliably power the ESP8266. When the flash chip performs a block erase, it and/or the ESP8266 may be glitching the 3.3V power line. Over long periods, the DC current is relative low but the consumption is spiky - it can be hard to see these spikes using \"slow\" current monitoring devices.\nThere's a blog post here that talks about changing the ESP_FLASH_BLOCK value in order to successfully flash an ESP-01 with this flash chip. This change has been suggested by people multiple times, but so far on investigation it's always turned out to be working around a power problem (writing in smaller chunks smooths out the power draw), so even if flashing succeeds this way it's likely that further operations will fail (WiFi causes even larger spikes of current consumption.)\nTry powering the ESP-01 from a different 3.3V power source. There are some tips in the README here:\nhttps://github.com/espressif/esptool#insufficient-power. Hi @Endothelium,\nThe error implies that one of the files you are flashing has length 0. Probably \"boot_v1.4.bin_rep\". Can you verify the file lengths?\n(This is still a bug, esptool shouldn't crash when if a file has length 0.)\nAngus. These options are replaced with documented options as of  6e5d0d37. Yes, esptool.py v2.0 (the current master branch) has this feature. You can use erase_region to erase a region with a specified start point and size:\nSo, to leave the first sector (0x1000 bytes) in place for the bootloader and erase up to the 1Mb boundary:\nesptool.py erase_region 0x1000 0xff000\nNote that esptool.py write_flash will automatically erase any sectors before writing to them, so you may not need to erase this entire region. However if there is any data that you need erased but are not about to overwrite with new data via write_flash, you can use the erase_region command to erase it.\n. Did you follow the ESP-IDF Windows Setup Guide from the docs? http://esp-idf.readthedocs.io/en/latest/windows-setup.html\n Which option from there are you using, the prebuilt & downloaded MSYS2 environment or one where MSYS is installed manually?\n How are you launching the shell which you're using to run make?\nThe version of Python that comes in the prebuilt environment has pyserial installed already. However if you have another copy of Python installed system-wide then this may be the version which is being run. If you're using a different shell, rather than the msys_cmd shell link mentioned in the Windows docs, then this can lead to a different Python being run (depending on your Windows path.)\nAn easy fix is to install pyserial manually into your system Python - you can try running python -m pip install pyserial.\nYou may run into other problems in esp-idf if your system Python is Python 3 not Python 2.x. Running \"make menuconfig\" -> \"SDK Tool Configuration\" and setting \"Python 2 interpreter\" to python2 may help.\n. Hi Kent,\nDo I understand correctly that you're not using the downloaded pre-configured environment, but following the \"Alternative Step 1\" with windows_install_prerequisites.sh?\nThere is a bug in this script regarding Python installation, so this is probably the problem you are seeing. Running python -m pip install pyserial should solve the problem.\nThere's a fix pending for this underlying problem with the setup script. (espressif/esp-idf#264).. > it didnt work for me\nYou will need to provide more information so someone can help you. Please supply some more details about what OS/environment you're using, what the full output from each command you tried was, what else you've already tried, etc.\nThanks,\nAngus. > As uploads are never a problem on the ESP-WROOM-KIT I think this is technically more of a board capacitance delay workaround than an r0 thing in particular.\nI think you probably already understand this, but I'm going to repeat it in case I've explained it poorly: The cause of the bug is definitely insufficient capacitance on the EN line. This workaround in software will only ever work on esp32r0, because it exploits a silicon bug (the board resets twice during a normal boot, once when EN goes high and then ~350ms later when a spurious watchdog reset occurs.) By holding the GPIO0 line low for 400ms we make sure that even if the ESP32 misses the initial pull of GPIO0 low it will pick it up on the spurious watchdog reset.\nOnce esp32r1 comes out, the capacitance on EN will still be a factor but the extra 400ms delays won't do anything apart from delay inevitable failure. However hopefully all boards with insufficient capacitance on EN also have revision 0 chips - Espressif has already updated its designs (as you've noticed with ESP-WROVER-KIT v2, still esp32r0 but sufficient capacitance) and I believe most third parties also have sufficient capacitance in their current designs.\nNo doubt someone will miss this bug, copy an older ref design and release an incompatible board with revision 1 ESP32 - but unfortunately there's no possible fix for that apart from manually pressing reset.\n\nI'd prefer to remove the option either now or in a future PR, which would deprecate ESPTOOL_BEFORE as well as the --before option - only those who explicitly use --before esp32r0 would be affected,\n\nFair enough, let's remove \"esp32r0\" before v2.0 final release. The --before/ESPTOOL_BEFORE has to stay because it also has the --before no_reset option to disable any auto-reset functionality. This is useful for other configurations.\nI can make those changes separately to this MR, if you prefer.. > I have a longer reply but first a question: between the current ESP32-DevKitC and ESP-WROVER-KIT, the latest schematics show the same capacitors\nMy mistake, I guess the updated capacitor is coming in ESP-WROVER-KIT V3. There are some circuit differences, but I expect the rise time on EN is the same on both (sorry I don't have time to confirm on an oscilloscope right now.)\nI think the reason you don't see the bug on ESP-WROVER-KIT may come down to FTDI driver behaviour. That's the other factor in this bug - there's a race between when DTR is asserted (GPIO->LOW) and when RTS is released (EN->HIGH) - if these happen close enough in time then everything is fine, because GPIO0 is already low when the ESP32 starts up. However if there's a gap between the two, the nature of the \"auto reset circuit\" is that while DTR & RTS are asserted, both lines go high - and if this window overlaps the ESP32 reading GPIO0, you get the bug. Increasing capacitance on EN means that the line stays low for longer when released, which covers this gap.\nThe CP2102 drivers on Windows always seem consistently introduce enough of a delay for this to be a problem. Similarly, in VM environments the extra latency over virtualised USB seems to trigger it. However, on my development Linux machine I almost never see any kind of problem - it only seems to occur if there happens to be an OS context switch between setDTR(True) and setRTS(False), and when that does occur it's usually correct on the next retry rather than failing outright.\nMaybe the FTDI drivers on Windows don't have the same behaviour (they may batch both of the control line operations into a single USB request, in which case both lines will change simultaneously. Or maybe the change just usually happens close enough in time that it doesn't trigger the bug.)\nIf I get a chance then I'll try and get some scope captures for this behaviour on various OSes & boards.. >  it was more of whether the extra delay I've added is so much about triggering the watchdog as it is about compensating for the circuit difference.\nI honestly doubt this, but without putting on the scope/LA I can't say for sure.\nI had some speculation about the limited effect of the different base resistor on Q1/Q2, but I can't explain the need to hold the board in reset for so long. So it's probably safest that I'll put both boards on the scope in the next couple of days and double check everything.. Hi @MartyMacGyver,\nSorry for the extended silence regarding this.\nI've run about half the tests I wanted to tun - on the WROVER board, I measure that fall time on GPIO0 is a bit slow (~15ms to reach 0V, less to cross the \"low\" threshold). However that's not enough to explain why you need such a long additional delay. \nHere's a couple of scope captures - yellow trace is EN, blue trace is GPIO0.\nFirst capture is of a \"correct\" reset (EN goes high before GPIO0 goes high):\n\nSecond capture shows \"incorrect\" timing on Linux (USB on host delays EN so both EN & GPIO0 transition at the same time).\n\nNext step is to run some digital logic analyzer captures from Linux & Windows on both board types and try to figure out exactly what's different. I suspect maybe the Windows FTDI driver is delaying control line transitions until some internal timer expires. I've done a few of these captures, but haven't had time to do them all yet.. > As an aside, running certain code - particularly code with interrupts (all via Arduino-ESP32) can make it difficult to get to the boot loader even using the buttons.\nThat shouldn't be technically possible. When the EN line gets pulled low (via DTR), the entire chip should go into a reset state regardless of what the CPU is doing.\nIs the chip outputting a lot of serial data at the same time it's failing to go into bootloader mode? Maybe we're not flushing the serial buffers aggressively enough so esptool is reading old/garbage output and assuming the reset failed.\nIf you have some code that seems to manifest this problem, could you please post here or email it to me? angus at espressif. Thanks!. Hi Marty,\nSorry again for the extended silence. Thanks for the rebase. I like the new factoring of latency_delay and esp32r0_delay.\nRegarding esp32r0_delay, I'm happy to merge this more or less now as I understand the mechanics of it, and it fixes the problem nicely.\nRegarding latency_delay, I honestly didn't believe this was a thing until I tested it. And you're right, this helps - although on ESP-WROVER-KIT only. I have some theories about why, but I'd rather not post more details until I'm sure. However as it's a flaw in a single revision of a single dev board on a single platform, I'm hesitant to bake it into the default behaviour of esptool - at least until we understand the mechanics of it better.\nIf you want to split the PR, I'm happy to merge the first part now. Otherwise I'm actively looking into the latency_delay behaviour today, so we'll hopefully get a firm picture of what's going on.. > Is there anything that running code can do that would influence what happens during the next reset, or which would confuse the bootloader?\nSorry, I missed this question. No, this shouldn't ever happen.. > Let me know what you learn about latency_delay - because that's what helps on the Core Board v2 (without it I must manually intervene) (I've been using that board more than the ESP-WROVER-KIT lately, for reasons of form factor).\nOh, OK. That's interesting. I don't find this makes any difference on the Core V2 boards I've tested, but it does seem necessary on my ESP-WROVER-KIT.. An extra 1.2 seconds is fairly significant, as these things go. On Linux & OS X the initial reset fails sometimes as well, so other platforms are getting this additional delay even though it doesn't seem like they need them (and I still don't understand what's special about Windows in this particular case of latency_delay.)\nMore generally, from a maintainer's perspective it's problematic to merge fixes for problems when we don't fully understand what the problem is, or how we're fixing it. esptool.py probably has many more years of life ahead of it, and many more chips and revisions of chips. Without fully understanding them, these fixes tend to end up as the kind of magic code that is viewed as \"don't touch that, it might be important\". I'd rather understand why this works so we can document it properly.\nI'm guessing you don't have access to a logic analyzer? I'd be very interested to see your Core Board's behaviour with and without the latency_delay change.. > on-flakey boards, failed boots that will recover before hitting fallback are very rare events which means this would cost them almost nothing.\nOn my system it's more than 50% of the time that a second reset is needed, no matter which board. Flashing a 400KB image compressed takes 5 seconds at 921600bps, so an extra 1.2 seconds compared to 0.2 seconds is a measurable difference.\nThat said, I totally agree that making esptool.py stable and reliable is the number one priority. Making it fast is a secondary priority.\n\nI will see what kind of data I can get,\n\nThanks. I appreciate that you think this is not particularly useful but I would be very grateful for any data you can dig up. I've figured out a fairly simple test (no extra hardware required) that will confirm my hypothesis (see below).\n\nI'm actively looking into the latency_delay behaviour today, so we'll hopefully get a firm picture of what's going on.\n\nI've now compared six boards across three computers.\nOn Windows, Core boards always require the esp32r0_delay fix. For ESP-WROVER-KIT, my dedicated Windows PC doesn't require any fixes but Windows VM requires esp32r0_delay. On the Windows VM, one particular WROVER-KIT board sometimes also requires latency_delay (works approx 75% of the time with esp32r0_delay only).\nHere's what I think is happening, based on some LA captures and experimenting:\n\nThe esp32r0 silicon bug where an extra RTCWDT_RTC_RESET happens ~300ms after the first reset doesn't happen consistently on all chips. On my \"problem\" board, it only happens sometimes.\nHolding the problem board ESP32 in reset for longer than a second seems to cause the extra\n RTCWDT_RTC_RESET to trigger.\nTherefore, this board is immune to the esp32r0 workaround unless it's held in reset for the extra time.\n\nI only have one data point though. If you could please take your Core board and a serial terminal, this should be straightforward to compare:\n\nWhen you press and release the EN button quickly, you should see something like\n```\nets Jun  8 2016 00:22:57\n\nrst:0x1 (POWERON_RESET),boot:0x16 (SPI_FAST_FLASH_BOOT)\nconfigsip: 0, SPIWP:0x00\nclk_drv:0x00,q_drv:0x00,d_drv:0x00,cs0_drv:0x00,hd_drv:0x00,wp_drv:0x00\nmode:DIO, clock div:2\nload:0x3fff0008,len:8\nload:0x3fff0010,len:3488\n(etc, etc.)\n```\n\nBut if you hold the EN button for a couple of seconds then release, you get something like:\n```\nrst:0x1 (POWERON_RESET),boot:0x13 (SPI_FAST_FLASH_BOOT)\nets Jun  8 2016 00:22:57\n\nrst:0x10 (RTCWDT_RTC_RESET),boot:0x13 (SPI_FAST_FLASH_BOOT)\nconfigsip: 0, SPIWP:0x00\nclk_drv:0x00,q_drv:0x00,d_drv:0x00,cs0_drv:0x00,hd_drv:0x00,wp_drv:0x00\nmode:DIO, clock div:2\nload:0x3fff0008,len:8\n(etc, etc.)\n```\nKeen to find out if this is the same for your problem board.\nThanks.. Thanks for all that investigation and analysis, @MartyMacGyver. I appreciate it.\n\nThe behaviour you're seeing with DTR/RTS is by design on the development boards. If you look at the schematics for the Core Board & ESP-WROVER-KIT then the same truth table that you derived is shown there.\nThe reason for that behaviour is that most serial programs assert both DTR & RTS when the port is opened. Early ESP8266 dev board setups wired DTR & RTS directly to IO0 & EN, but this means that a standard serial program will hold the board in reset until you de-assert RTS. The \"truth table\" circuit was first used in NodeMCU's ESP8266 boards, and has become popular.\nYou are correct that the glitch where GPIO0 goes high for a short period is a result of the truth table and the order of setting DTR & RTS. ESP8266 takes a short time longer to read its strapping pins, so this is rarely a problem there. ESP32 is a little faster, so the pulse and the reading of strapping pins coincide sometimes. This happens occasionally on OS X & Linux (due to OS scheduling, USB delays) but it happens a lot on Windows, at least with CP2102 driver (Core), seems to happen less with the FTDI driver (ESP-WROVER-KIT). Running any OS inside a VM is also enough to trigger the problem sometimes, when USB is virtualised the timing tends to spread out a bit.\nIt may look like the GPIO0 glitch is just a result of pyserial's API (one pin per function call) and can be fixed by changing the way DTR/RTS are set. At least on Windows with CP2102 this doesn't work, I tried setting both in a single Windows API call and the driver still makes two separate USB transfers to set the pins.\nInstead, the long-term fix for this problem is to increase the capacitance on the EN pin from 1nF to 100nF or more, so that the EN pin rise time (after RTS is released) becomes extended and the chip starts up approx 1ms later, which is enough to miss the GPIO0 pulse. This is a confirmed solution, newer Espressif dev boards will have this capacitor and many third party vendors already include it.\nWhat to do on the existing boards? The trick here is that esp32r0 has the \"extra WDT reset\" bug where a RTCWDT_RTC_RESET happens 300ms after a power on reset. This is a silicon bug, but in this case we can use it to work around the error. The additional 400ms delay (esp32r0_delay) leveragfes this, we sit around with GPIO0 low (and EN high) until this WDT reset occurs and the ESP32 re-reads the strapping pins. Bingo!\nOnce esp32r1 comes out, the silicon bug is fixed and this reset won't happen any more so this workaround will no longer be effective. But we're relying on everyone increasing EN pin capacitance on their dev boards by this point (Espressif boards will, most third party vendors either already have or hopefully will), so the default reset will work.\n\nThe above is pretty well understood (at least by me, and there are some other Github Issues and forum threads that go over it) and I more or less trust it as being correct. That said: If anything there that doesn't match what you've seen, please let me know.\n\nAll of that explains esp32r0_delay, but the case for latency_delay is the more unusual situation.\n\na brief tap on EN usually gives me a POWERON_RESET with a flash read err, 1000 followed by a RTCWDT_RTC_RESET\n\nThis is Core board V2, yes?\nI actually get the \"flash read err\" as well. In the second log I posted above I took it out because I thought it was a separate issue with my board (sorry), but if you're seeing it as well then it's related.\nThis is different to what I see though, I only get this \"flash read err\" if I hold the EN button for 1-2 seconds, not if I just tap it.\n\nVariant 1:\nVariant 2:\n\nI'm not sure what this means, what is Variant 1 and Variant 2? These logs match what I see for \"short EN press\" (Variant 1) and \"long EN press\" (Variant 2). However that's at odds with your statement about \"a brief tap on EN\".\nMy hypothesis was: On some (one in six that I have) ESP32s, if EN is not held low for a long time then the extra RTCWDT_RTC_RESET bug doesn't happen so there's no way for the esp32r0_delay work around to be effective. However if EN is held a bit longer, the RTCWDT_RTC_RESET does happen so esp32r0_delay can work around the problem. But I've only seen this behaviour on one ESP32, and what you've posted above may not quite fit that hypothesis.\n. > Variant 1 and Variant 2 are just the two things that happen - sometimes one, sometimes the other. It isn't strongly dependent on how long I press the button.\nThat's very odd, because if the button press time isn't a factor then I can't see how this relates to the legacy_delay fix. Even though it seems to clearly relate on my board.\nIf you have time, there's another debugging step that may help:\nDo you have a second USB/serial adapter of some kind? If you wire it to the TX0 pin of the Core Board, you can use a second serial program to monitor the output from the Core Board UART as it is reset by esptool.py.\nIf you capture the reset sequence with and without legacy_delay, you should be able to see whether or not legacy_delay causes the RTCWDT_RTC_RESET to trigger more reliably. (I recommend using a command like 'esptool.py flash_id' to minimise the amount of other traffic sent over serial.)\nIt's also possible to do this with the logic analyzer (monitor the TX pin), although I find some logic analyzer programs don't make viewing a long serial stream particularly easy.. > With the fixed code, I get the same failure when it tries the quick default pass, followed by success when it uses the latency delay pass:\nOK, great. This is what I see.\nIt's weird that you can't reproduce this by pressing the EN button in the same way I can. All I can think is that it might be a button debouncing issue, so if you looked at the EN trace on a scope when releasing the button then it might toggle high and low a few times, and this is either enough to either get things going properly or to confuse the SPI flash chip into yielding the read error.\nBased on your results I think I have a solid picture of what's happening here. Thanks.. Confirmed with some colleagues who are able to reproduce the bugs discussed above.\nMerged this PR with a few tweaks, as it seems clear latency_delay is a way to trigger the esp32r0_delay more clearly on some chips.\nThanks @MartyMacGyver for figuring this out and sending it in the first place, and bearing with me through the review process. :). Ouch, I'm sorry @solemnwarning ! Thanks for the fix.\nThere's another open issue, #146, for removing this arbitrary ordering requirement. Unfortunately Python's built-in argparse library doesn't make this easy, at least not that I can find. But will figure out a way.. Hi @slaff,\nThanks for submitting this. This seems like a good thing to check for.\nIs there a use case for writing overlapping data in a single write_flash command? I'd be happy to have this check always fail write_flash, no additional command line option required. If people really need to flash overlapping data, they can do it by running esptool.py write_flash multiple times.\n. Looks good to me. Just have the one addition above about sector alignment.\nAlso, could you please write a couple of tests for these in tests/test_esptool.py? A test case for the correct error directly overlapping images, and maybe one where they don't overlap but land in the same sector, would be fantastic.\n. Sector size is 4096 bytes (hex 0x1000), so 0x3fe000 and 0x3fc000 are two sectors apart.\n(There is also a larger block erase command, but the minimum erase size is one sector ie 0x1000 bytes.). Sorry for the delay @slaff. Need some small changes (run_esptool_error) before one of the tests passed, but squashed and merged as 3fb8eb7a (that commit mentions the wrong PR number by mistake).\nThanks!. 3445360 bytes is over 3 megabytes. So it can't fit into a 1 megabyte (8 megabit) flash chip. This causes the MD5 error when it comes to verify what it wrote.\nIf you leave off the --flash-size 4MB argument then esptool.py will autodetect the flash size and give an error when it sees the firmware won't fit.\nTo make this less confusing, it's probably best if esptool.py runs auto-detection even when a flash-size argument is provided, and prints a warning if the flashing will exceed the detected size.. I don't understand where you got the file \"ESP8266_NONOS_SDK_V1-3.bin\" from? Is this a file you compiled from the SDK?\nInside the zip file \"ESP8266_NONOS_SDK_V1.5.4_16_05_20.zip\", the bin/at/512+512 directory contains a prebuilt firmware image with an AT firmware binary. The bin/at/README.md file has lists of filenames and offsets - under the first heading \"Flash size 8Mbit\" is the list you need. If you pass those offsets and file names to esptool.py write_flash, it should flash the firmware correctly.\n. (BTW, there is a difference between Ai-Thinker's AT firmware and the AT firmware produced by Espressif. Even though the Ai-Thinker firmware was compiled with SDK 1.5.4, I think Ai-Thinker modify it a bit from the original AT firmware. I don't know what the specific differences are, though, you'd have to ask Ai-Thinker.). Oops, above commit references wrong PR number.\nThis looks good, thanks @danicampora . Will merge.. Thanks for posting the updated information. I'm glad you got things working.\nTo clarify, the GUI-based Espressif Flash Tool is a different tool to the command line esptool.py which is hosted in this repo. Support for the GUI flash tool (and the ESP8266 SDK) is provided via http://bbs.espressif.com/ .\nIf you're using the ESP8266 with Arduino, you may also be interested to look into ESP8266 Arduino support:\nhttps://github.com/esp8266/arduino\n(This allows you to program the ESP8266 directly with an Arduino sketch written to execute on it, no need for AT commands or similar.)\n. This is correct. elf2image works on both architectures, but make_image only works on ESP8266.\nmake_image is fairly limited command, and even on ESP8266 the images it generates are not always very useful. I'd recommend generating the ELF file you need (via some combination of linker arguments and objcopy commands) and then using elf2image to convert this to a binary.\nIs there a particular use case you have in mind that requires make_image?\n. Sorry I didn't write back to you before, I thought I had.\nIf you're using ESP-IDF then one other way to make this work is to use the \"embedding\" feature in the IDF build system:\nhttp://esp-idf.readthedocs.io/en/latest/build-system.html#embedding-binary-data\nThis will allow you to embed the file into the ELF, it'll be mapped to flash cache in .rodata, and you can access it directly as a large read-only buffer in read-only memory.\nIf you're using a different build system then you can still use the same approach as esp-idf does, using objcopy to embed the file.\nI'll keep this feature request open in order to expand make_image, although because the ESP32 has a more complex flash cache it may be harder to implement a useful command.. The old SDKs worked this way,the ROM bootloader would boot the firmware from offset 0x0 directly instead of booting a software bootloader which then loaded the app. elf2image --version=1 (the default version) creates images suitable for flashing in this way - the result is in two parts, data loaded into IRAM & DRAM goes at offset 0x0 and the data mapped to flash (IROM) is in a separate file flashed at a set offset.\nRecent versions of the Espressif SDK may not support images that were created this way, it may depend on which features you use. Answering that question is outside the scope of esptool, sorry, however you may find answers at http://bbs.espressif.com/. Arduino's USB/Serial firmware is fussy about the DTR & RTS control lines, which are also used by default to signal automatic reset on many ESP8266 development boards.\nTo use an Arduino Uno or similar as the interface, run esptool.py as follows: \npython esptool.py --before no_reset -p /dev/cu.usbport write_flash 0x000000 \"nodemcu.bin\"\nA note about this is is mentioned in the README.\n. It's hard to tell without more details, but I suggest working through the list of troubleshooting possibilities here: https://github.com/espressif/esptool#write_flash-succeeds-but-program-doesnt-run. The stackexchange post doesn't address any of the items listed at the troubleshooting link above. To begin with:\n How is the ESP-01 powered?\n Have you tried passing the -fm dio argument to flash in dual I/O mode instead of QIO?\n. Also, what is the full command line you're passing to esptool.py? The command line in the first post is flashing NodeMCU, but it seems this is Arduino IDE output.. @grcasanova did you make any progress with this issue?. I see, glad you resolved it.\nI'm going to close this issue, but please reopen if you think there's an esptool issue here.. > The boon is the .exe wrapper will always execute with the right version of Python (consider if you had two copies of Python and esptool.py in your path).\nFWIW, I think installing via the existing scripts directive will do this as well. If you install via setup.py install or pip, then the actual esptool.py file is a thin wrapper that calls the correct verison of Python and sources the script. At least that's the case on POSIX, I'd expect the same on Windows but maybe not.\n(Of course this isn't the case if you run esptool.py as-is in the git repository or another standalone place. Which is one of the reason why the docs encourage a pip install.)\nIn any case, thanks for sending the PR. I have some more specific thoughts there, will comment there instead.. > I'd expect the same on Windows but maybe not.\nAh, I remember now. Windows won't execute a .py file properly at all, will it? You have to invoke python each time. Hmm.\n(Left more specific comments on the PR.). Thanks for reporting this. It seems like the timeout is not long enough for very large compressible files, where the ESP does a long decompression operation on the remote side. I'm able to reproduce by generating an all-zeroes file of 2MB or larger.\nIn the case of the file you are flashing, I'm guessing most of the data is at the beginning and then the very end, with a gap in the middle of a repeating byte or pattern? \nWill work on a fix for this, but I expect you can work around the issue for now by adding -u (for uncompressed flashing) to the write_flash arguments (ie write_flash -u --flash_freq , etc). This will be slower, but it will flash successfully.\n. Thanks. Glad this fixed the problem. In most cases esptool.py wants a shorter timeout than this (so you don't have to wait 25 seconds to find out something has gone wrong), so the long term fix will probably be detecting how much uncompressed data was sent in each block, and adjusting the timeout to match (more uncompressed data = longer timeout.). Thanks for sending this. I wasn't actually aware this feature existed!\nThis seems like the right way to do things, but I have one major concern around backwards compatibility. Essentially every guide, howto, makefile, script, etc. that runs esptool.py runs it as esptool.py not esptool.  This PR will change that naming. Also, there's at least one other active project, and I think at least one older project, that called itself esptool. Up until now it was possible to have both installed simultaneously without a conflict.\nV2.0 changes some other behaviour of esptool.py v1.x, but it hasn't made any major breaking changes of this kind. This would be the first.\nA partial workaround may be to install as scripts and as console_scripts, so both forms (esptool and esptool.py) will work. Or to at least do that on Windows, where the downsides of naming the script esptool.py are more obvious.\nThis might be too out there, but installing esptool.py.exe and friends on Windows might also keep things fully backwards compatible... But seems a bit icky.. Actually, the more I think about it specifying the console_scripts names as esptool.py, etc. might be the best compromise. Keen to know what you think.. Sorry for the long delay, got busy with other things and couldn't get back to esptool. This looks great, cheers.. No problems, happens to everyone sometimes. :). Thanks for pointing this out. The README doesn't properly describe the current behaviour, which is that the command line arguments (whether defaults or not) are used to update the .bin file when it is flashed.\nA better behaviour might be to do would be what the README describes, ie don't touch the header unless some arguments are supplied. Except for maybe flash size, where the default behaviour is \"detect\".\n. Only bugfixes are going into 1.x now, so that's not a concern.\n\nSo please make the change now before 2 goes into GA and it's too late to make a behavioral change....\n\nThis was on my original list for things to change in v2, but in the end it seemed like it might mess up people's existing esptool workflows a bit. I'll think it through again.. Sorry for the delay in getting back to you.\nThanks for reporting this. I haven't started a maintenance branch for v1.x yet, but when I do I'll commit a fix for this. I'm not sure if there will be another v1.x release, it will depend if any other bugs show up.\nAngus\n. This is fixed in the new stable v2.0 release. If there is a bugfix v1.x release then I'll also revisit it there, but for now this is not planned (will only be if a major bug appears.). Are you able to attach the ELF file to this issue? If it's sensitive then perhaps you can email it to me - angus at espressif.\nDid you make any modifications to the build process apart from compiling with -fexceptions?. Hi,\nSorry for the slow reply, I think this is the same cause as this issue:\nhttps://github.com/espressif/esp-idf/issues/459\nAs modifications will be required on the IDF side, I'm going to close this issue in favour of the linked one. Please feel free to add more details/comments there.. Hi Andre,\nI think this bug probably belongs at the IDF repo: https://github.com/espressif/esp-idf/issues\nAngus. What esptool.exe are you referring to?. I'm sorry but I don't understand the problem you are having at all, I need more details.\n\nAre you using Arduino for ESP32 to install esptool.exe?\nWhat device is connected to the STM32 CDC firmware?\nWhere does the CDC firmware source code from?\nWhat host OS are you on?\nCan you post the output from a failed flash with esptool?. Closing due  to a lack of information to follow up, but feel free to reopen if you have more information.. Can you supply the full command line and output from esptool.py, please?. Also the serial output from when it returns \"qio mode issue\" at boot would be useful if you have it. Thank you.. It would have been helpful if in the beginning you had mentioned you were using Micropython on ESP32.\n\nThis seems like it comes from the Micropython ESP32 support behaviour. The flash mode is set on the bootloader binary image, and is set when the bootloader binary image is generated. esptool.py can also override this when flashing the bootloader, but only if it is flashed at offset 0x1000 (bootloader offset on ESP32.) Micropython takes all the .bin images and creates one large image which is flashed it at offset 0x0, so esptool doesn't detect that it can/should override the flash mode on the fly.\nIf you run make clean to remove bootloader.bin and then re-run make deploy then you should get the correct flash mode.\nIf you think this behaviour should be fixed, please open a bug on the Micropython ESP32 repository: https://github.com/micropython/micropython-esp32/issues and link to this issue. We can possibly detect this situation in esptool.py (flashing at 0x0 with a bootloader image embedded in the binary) but I'd rather not if this can be fixed some other way.. Hi @CodeFreak604,\nI don't think this is related to the issue @moxy-bc linked, that failure happens at a later stage than this.\nA couple of questions/suggestions:\n Can you verify COM5 exists and is shown in Windows Device Manager? Are there are warnings shown for COM5 in Device Manager?\n Is the serial port shared from the host to the guest at the serial port level, or as a USB device? If shared as a serial port, we have had reports of problems with VM serial port emulation before - try sharing the entire USB device from the host to the guest.\n. @CodeFreak604 , did you make any more progress with this issue?. Closing due to a lack of information to follow up, but feel free to reopen if you have more information.. Hi @zgoda,\nI have a few questions:\n What ESP8266 board are you using?\n Does it have the serial RTS/DTR connections for esptool.py to reset the board into the correct mode?\n* Does esptool.py work correctly when the firmware is not stuck in the WDT reset loop?\nIf it's not a premade USB dev board (ESP8266 + CH340 in a single device) then could you please supply a photo of the hardware setup?\nAngus. The same firmware fails on all this different hardware? That's interesting, as far as I know it shouldn't be possible to end up in a reset loop which can't be stopped via the hardware RST or EN line. Which the NodeMCU & WeMos D1 definitely have.\nIs there any chance you could please send me the faulty firmware, in a way that I can trigger the bug to test? You can email me it directly (angus at espressif) if you don't want to post it publically.\n. @zgoda Did you make any progress with this? Any chance you can (publically or privately) share the wdt-loop-inducing firmware or an esptool.py read_flash dump of the faulty chip?. It seems like #213 may be a symptom of the same kind of problem (I suggested a possible workaround there as well.)\nIf the reset-inducing timeout is delayed enough that esptool.py can take control of the chip, then we can probably make the correct register writes to disable it. Otherwise we may need to try and recover immediatelyt from the WDT-induced reset, hoping that the ESP8266 comes out of this into bootloader mode so we can then take control.. I think this is probably fixed in esptool.py v2.6 with the fix for #351 and related issues. The version at the time also used the stub loader, and esptool-ck (working) does not use a stub loader, and this is probably at the root of the problem.\nPlease reopen if you still see this happening on v2.6.. Thanks for the detailed report @soswow.\nAs you've found, this was a regression in #184 on POSIX platforms. Testing a fix now.\n. Can you supply some more details, please?\n\nWhat output do you get when it fails?\nWhat driver are you using, the built-in Linux driver or have you installed a driver from Cypress?\nWhat chip (ESP8266 & ESP32), and what development board (if any)?\n. Thanks for the additional details.\n\nDo you get the same failure for both the Espressif ESP32-DevKitC and for the Widora Air board? Or only for the Widora Air board?\nIs Ubuntu running in a VM or on real hardware?. I'm not able to reproduce this with a clean Ubuntu 16.04 VM and an Espressif Core Board V2 (CP2102).\n\nAfter testing this I noticed that you have quite an old version of esptool.py (it doesn't print the version number.) If you try with the latest version then it will hopefully work.\n. I'm going to close this (I assume that's what \"Wrong repo\" means).. Hi @SivaNallamalli ,\nThanks for reporting this. Could you attach the ELF file to a comment on this issue, please?\nAngus. Thanks @SivaNallamalli , @Shai1436 . These ELF files were very helpful (their layout is different to the ELF files I'd previously seen.)\nThis is issue should be fixed in the esptool.py master branch now. I was able to run elf2image on both your supplied ELF files, and the output looks correct. Please reopen if that's not the case.. Hi @Shai1436 sorry, because the issue was still closed I missed your reply.\nThe esptool.py version with the fix was 2.0-beta3, the log you postedis beta2 so I think you still had an older version without the fix.\nI tested with esptool.py v2.0 final and your ELF file is processed correctly. If you're still getting errors with v2.0 final, please reopen this issue.. Please don't post the same issue in multiple places, we're a small team here and it creates unnecessary confusion and overlap. In future, please open a new issue for each distinct question/problem and choose the repository where you think the question is most appropriate. It's always possible to move to a new repository if it turns out you've asked in the wrong place. :)\n\nConcerning my flashing issue, I don't understand why my dev module can be successfully programmed by using the Makefile from within Eclipse/esp-idf, while it ends-up with a timeout from within ArduinoIDE/ESP32-Arduino toolchain.\n\nThis is indeed odd. Both Arduino and ESP-IDF use esptool.py, but they may use slightly different versions. I have a question & a couple of suggestions:\n\n\nDo you need to manually press any buttons when flashing from Eclipse? Looking at the dev board you have, I would guess it should not require any manual button pressing (the Espressif Core Board doesn't, and it looks similar to a Core Board). But I don't know anything about this manufacturer, it's always possible the design is different.\n\n\nIf you hold down the BOOT button (no other button pressing needed) and then start the flash from Arduino, does flashing start correctly? If it starts OK then you can release the BOOT button once it's started.\n\nIf that doesn't work, if you hold down BOOT Button, start the flash in Arduino, and then wait for a fraction of a second before pressing and releasing the RST button a single time (while continuing to hold BOOT), does this work?. Hi @architmuchhal12,\n\nLooking at the schematic for the LOLIN32, it is designed to reset automatically into flashing mode without any manual button presses. What version of esptool.py are you using (it should be printed out when you run it), and what OS are you running on?\nAnother thing you could try it using a jumper wire to bridge IO0 to GND before flashing and removing it to run the firmware normally, although this is obviously not an ideal long-term solution.\nYou may need to raise this issue with WeMos. It could be hardware-related.\nAngus. This seems to me like it's probably a hardware problem, esptool.py is able to talk to the ESP32 but as it starts the flashing process something goes wrong and communications are lost/corrupted.\nEither the particular board you have, or the USB cable, may be at fault. It may also be worth trying on a different computer, if you have access to one.. Hi @GwynMunich ,\n\nMy conclusion is that there is some low level embedded firmware in the ESP32 that needs to be updated. What Do You Think?\n\nThere's nothing inside the ESP32 that can be updated in this way, for compatibility with esptool.py (esptool.py only talks to the hardware and the ROM code, and these are both immutable). There are some small differences between revision 0 and revision 1 silicon versions (recent versions of esptool will print which silicon version is present when they connect), but I don't think that's the root cause here.\nIf I had to guess, i would say these boards have a faulty or incorrect version of the automatic reset circuit on them. One common error is not placing a capacitor on the EN pin, try placing a capacitor (in the 100nF-2uF range) between the EN and GND pins and see if automatic reset becomes more reliable.\n. @GwynMunich These are actually all revision 1 chips. The revision 0xa is because the version of esptool shipped in Arduino is older than the chip, if you install a newer version from this repo (or pip) then it'll print the correct revision. The message is harmless in Arduino, though.\n(The difference in these newer 0xa chips is not due to a new silicon revision, only that the production team started setting some bits in the internal efuse OTP memory that weren't being set in earlier production runs - to indicate things like \"Dual Core\").\n\nI'm wondering if the issue is do do with floating pins needing to float to ground and holding the BOOT button simply extends the period the pins are given to reach ground. I'll look at this and let you know.\n\nQuite likely something like this, with the board design or an assembly problem.\nDid you try placing the capacitor, as suggested in previous comment?\n. Thanks @magore . I agree it would be useful to have a command that prints the detected flash size. How about outputting this information as part of the existing flash_id command?\n\nI understand that the flash_id could also be used, for example in Makefile , but would require duplicate code in every Makefile to map to size.\n\nAre you specifically interested in scraping the output of esptool.py into a Makefile, or is this just an example for discussion purposes?\nWould you consider sending your change as a Github Pull Request? https://help.github.com/articles/creating-a-pull-request/\n. (The link I supplied about creating Github Pull Requests may not be the best resource. There's some more here https://help.github.com/articles/about-pull-requests/ - or lots of other blog posts/etc online.). Hi @pacm93,\nThanks for pointing this out. Looking at the ansible code, it looks like it parses 'pip list' output and possibly this is where things go wrong, as the esptool package has a version but it doesn't match anything in PyPI. I'm a little confused given how many examples in the docs show non-PyPI URLs, though.\nOut of curiosity, does specifying the name as \"https://github.com/espressif/esptool/archive/515adee.zip\" change anything (this is the current master branch commit SHA).\n\nCould you fix this or make a 2.0 beta release available (but non-default) on PyPI, so it is easier to automate the esptool installation?\n\nAs soon as I have some time I plan to finalise the last small issues holding back a 2.0 final release, at which point it will appear on PyPI by default. Hopefully very soon!\n. Thanks for your patience while this release was finalised. esptool.py v2.0 is now available on pypi.. This sounds like a hardware problem.\n\nFlashID=0xffffff, SizeID=0xff\n\nThis output suggests that the ESP8266 tried to talk to the NodeMCU flash chip on the board, but the flash chip didn't reply. Given you've tried different ways of powering it, I'm guessing you have a faulty flash chip (or bad solder joint on either the ESP8266 end or the flash chip end.)\n. I'm going to close this, but feel free to reopen if you think there's something else going on here.. You haven't specified, but it looks like you're flashing MicroPython. Is that right?\nSupport for 8MB and 16MB flash on ESP8266 depends on support inside the firmware which is being flashed. The official ESP8266 SDK only added support for these flash sizes in the recent V2.1.0 release. Until Micropython on ESP8266 also supports these sizes then it won't be able to boot.\nThis is noted in the esptool README (under the table here) but it's pretty buried, maybe esptool should print a warning when flashing 8MB & 16MB flash sizes to ESP8266.. Closing this as it's not an esptool.py issue at this point. If you haven't already, clicking \"Subscribe\" on the linked micropython issue will let you follow progress over there.. Hi @fwndz ,\nSorry for the slow reply. Does flashing always fail at the same offset (88064 / 20%)?\nWhat hardware setup do you have?\nAngus\n. Hi @ESP32DE,\nWith the current esptool.py master branch (and also the version in IDF master branch), this should be supported. esptool reads the efuse information about the flash configuration, and accesses flash accordingly.\nAre you getting an error when trying to flash a ESP32-D2WD?\n. Hi @ESP32DE,\n\nthe practical comes from forum:\nthe windows pc tool newest version 3.4.8 ( 2017-May-19 ) that use the last base of esptool.py\ncan not successful read eMbeddedFlash infos\ncan not flash firmware\n\nThanks for clarifying. The Windows flashing tool is maintained separately from esptool.py. @costaud is probably the best person to answer this question.\n\ni saw your PR / merge for support D2 - but have you tested it with an ESP32-D2WDQ5?\n\nYes, I've been using one most days as a development device for over a month now. If using esptool.py on the command line or via IDF makefiles, ESP32-D2WD should be fully supported. Please raise an issue on this repo if anything doesn't work as expected when using these environments.\n. > can you share the info, does ESP32-D2WD be rev0 or rev1 silicon\nMy ESP32-D2WD has revision 0 silicon. I don't know what chips you've received, I am guessing also revision 0 but you may wish to double-check with your contact at Espressif sales or to run the IDF \"hello world\" example which prints the chip's silicon revision.\n. > but i have the issues, that i can not read from command line the slicon rev id :)\n\ncan you support this \"future\"?\n\nThis is actually possible now, although only the numeric efuse values are displayed. We will add a feature to make this information more user-friendly.\nThe command you can use now is espefuse.py -p PORT summary. The output has a lot of information, but if you look down in the list there are two efuses CHIP_VERSION and CHIP_PACKAGE:\nESP32-D0WDQ6 silicon revision 0:\nCHIP_VERSION           Chip version                                      = 0 R/W (0x0)\nCHIP_PACKAGE           Chip package identifier                           = 0 R/W (0x0)\nESP32-D0WDQ6 silicon revision 1:\nCHIP_VERSION           Chip version                                      = 8 R/W (0x8)\nCHIP_PACKAGE           Chip package identifier                           = 0 R/W (0x0)\nESP32-D2WD silicon revision 0:\nCHIP_VERSION           Chip version                                      = 0 R/W (0x0)\nCHIP_PACKAGE           Chip package identifier                           = 2 R/W (0x2)\n\ncan we read perhabs the ID from the ESP-PSRAM32 ic?\n\nI'm going to open a second issue for this, as it's a separate (bigger) task.\n. Thanks for showing that. I guess I'm not super surprised, given the number of additional features in 2.0. But in both cases you essentially have to \"mock up\" a command line, and that shouldn't be necessary. I'll use your code as an example when it comes to designing a more useful Python API.\n. One more requirement (noted in #407) is for the ESPLoader object to be able to track something about the state of the chip (ie has bootloader connection been established). But still allow for case where serial port is connected to bootloader before the ESPLoader function is even called (this can probably be done because the bootloader will respond to SYNC packets at any time, I think.)\n. Version 2.2 now has --trace, which may be sufficient for these use cases. . Oops, thank you!. Looks great, thank you @hroncok !\n. It does seem likely that the RTC alarm is starting and is not being disabled when esptool.py resets the board, so when it fires 10 seconds into flashing the whole thing blows up.\nThis is a bug we should fix, but I think you can un-brick your module right now as well:\n Disconnect the USB cable, depowering the NodeMCU board.\n Hold down the FLASH button while keeping the board unpowered.\n Plug in USB power while continuing to hold down the FLASH button.\n Run esptool.py while continuing to hold FLASH.\n* Once esptool.py starts the operation, you can release FLASH.\nHolding FLASH down from initial power-on keeps the ESP8266 in bootloader mode, so it never runs the program which sets the RTC timer.. @rmokerone Thanks for sending this information. I'm not sure the root cause is the same as the issue you are commenting on, but it's still useful to look into. I have some questions:\n\nWhat host OS are you using?\n\n\nIf you want to solve this problem, you can try to add the following code\n\n\nDoes this solve the problem for you?\n\n\nCP2102 immediately returned a, but CH340 can not return anything.So, the error appeared!\n\nAt the time that the detect_port() read is happening, the serial port timeout should be set to 3.0 seconds - so it should wait 3 seconds before returning 0 bytes. But maybe the CH340 driver on your system is returning early? Can you please add the following print statements to your test:\nwhile True:\n        waiting = port.inWaiting()\n        start = time.time()\n        print(\"waiting = %d @ %.3f\" % (waiting, start))\n        read_bytes = port.read(1 if waiting == 0 else waiting)\n        print(\"returned %d bytes @ %.3f (%.3fs)\" % (len(read_bytes), time.time(), time.time() - start)). @rmokerone That is indeed strange! It looks like a bug in the CH340 macOS driver. Can you tell me what version of the CH340 driver you have? I will try to report it to WCH.\nWe can probably work around this by subclassing pyserial.Serial and implementing a read() which breaks up long timeouts into a sequence of shorter ones, so it polls more often. But we should also try to get the driver fixed!. > implementing a read() which breaks up long timeouts into a sequence of shorter ones, so it polls more often\nActually, to confirm that workaround can be effective, could you please try:\nwhile True:\n        waiting = port.inWaiting()\n        start = time.time()\n        print(\"waiting = %d @ %.3f\" % (waiting, start))\n        read_bytes = port.read(1 if waiting == 0 else waiting)\n        print(\"returned %d bytes @ %.3f (%.3fs)\" % (len(read_bytes), time.time(), time.time() - start))\n        if len(read_bytes) == 0:\n                read_bytes = port.read(1 if waiting == 0 else waiting)\n                print(\"returned %d bytes @ %.3f (%.3fs)\" % (len(read_bytes), time.time(), time.time() - start)). > I used the driver as follows:\nOK, thanks (for benefit of anyone who finds this later, this is V1.4 of the driver.)\n. ```\nDetecting chip type...waiting = 0 @ 1499054081.548\nreturned 0 bytes @ 1499054084.551 (3.004s)\nreturned 0 bytes @ 1499054087.556 (6.009s)\nA fatal error occurred: Timed out waiting for packet header\n```\nUrgh, that's annoying! So the bytes are lost forever somehow.\nWe can do the delay(0.1) type workaround, the only problem is this slows down every read operation by 100ms - and there are a lot of these.\nOne more thing to try (sorry, I don't have an OS X machine or I'd try some of these myself):\nNear the top of the file:\nDEFAULT_TIMEOUT = 0.5       # timeout for most flash operations\n. OK. I was thinking there might be a limit or an overflow for the timeout, but it doesn't seem like it. Thanks.. Thanks for being patient with this issue.\nI think esptool v2.6 and the fix for #351 will include a fix for this. If setting RTC.ALARM0 still doesn't work with esptool v2.6, please reopen this issue.. This style of board usually works without any manual intervention. It's possible the board is different or faulty in some way, though.\n\nIf you open a serial terminal program and connect to the ESP8266 do you see any output? The blue light blinking should indicate serial TX. You can try pressing the \"reset\" button while connecting. Try baud rates 74880 and 115200.\nIf you hold down the FLASH button while running esptool.py, does it successfully connect?\nIf you hold down the FLASH button, then run esptool.py and press then release the \"RST\" button while it says \"Connecting...\", without releasing FLASH, does it succesfully connect?\n\nThere are some other troubleshooting steps listed here:\nhttps://github.com/espressif/esptool/#bootloader-wont-respond. Thanks for the update @vincegre . Sorry to hear that it's probably defective.\nI'm going to close this issue, but feel free to reopen if you think esptool is doing the wrong thing here.. Thanks @daniel-leonard-robinson !. Hi @jaanh ,\nThanks for reporting this. It's a bug and we will add a fix. The workaround you should have sounds like a good one until then.\nAngus. If you hold the FLASH button down while tapping RST, do you get a different result?\nYou can also try running esptool.py while holding FLASH, and/or tapping the RST button as you run esptool.py.\nIf either of these attempts work, the hardware may be partly faulty (the automatic reset to bootloader mode is not working coorrectly.). If you set the baud rate to 74880bps, do you get anything meaningful in the serial terminal?\nIn all likelihood the module hardware is faulty in some way.. If you have esptool then you have miniterm (it's bundled with pyserial, which is a dependency of esptool):\nTry something like miniterm.py --raw /dev/ttyUSBx 74880.\nSome more information can be found via https://github.com/espressif/esptool#serial-terminal-programs. It looks like it's booting normally (garbage happens when it changes baud rate again.) If you hold down the FLASH button at the same time, is the output different?. Sorry, I missed your last reply.\n\"boot mode:(1, x)\" suggests that it's going into the UART bootloader mode. I don't know why it's not responding to esptool.py at this point (maybe the TX side of UART communication is broken so it's read-only?)\nIt might be repairable but trashing the module is probably the most efficient use of your time.\n. Hi @vincegre,\nSorry for the slow reply. The detected flash size is based on the Flash ID conforming to a convention where the last byte of the ID (0x15 in this case) is proportional to the flash size as \"two to the power of that value\" (in this case 2 ^ 0x15 bytes ie 2 megabytes).\nThis is only a convention so there's no guarantee any particular manufacturer has followed it (although most seem to). Some thoughts & questions:\n\n2 megabytes (MB) is 16 megabits (Mb). So it's possible the module vendor is messing with you and has quoted you a megabit spec where you expected megabytes. Genuine Wemos D1 Mini Pros should have 16MB of flash, though (is it possible these are knockoffs?)\nCan you read the part number markings from the physical flash chip itself?\nYou can manually configure the flash size running a command line like esptool.py write_flash --flash_size 16MB .... This will override the detected size, but if the flash is really only 2MB then it will probably not work (most flashes \"wrap around\" to the beginning once you write past the end.)\n. Glad you got it working.\n\nJust for the record, --flash_size 16m is the old size format which is megabits ie 2 megabytes. You need to pass --flash_size 16MB if you really have 16 megabytes of flash (ie 128 megabits) and want the ESP to use it all.\n. Hi @Navis-Raven ,\nSorry for the slow reply. Looking at the parent issue, it looks like you've since got this working OK. Please reopen if you think there is something esptool can do differently here.\nAngus. Hi @lukeweston ,\nAs discussed elsewhere, this looks like it was probably a power stability issue with the flash VCC. Can we close this issue on that basis?\nThanks,\nAngus. Hi @abhayghatpande ,\nDo you get the same \"flash md5\" value each time, or a different value each time?\nAngus. There have been some rare instances where the flash chip accidentally sets one or more write protection bits. This leads to some sectors not updating each time a new binary is flashed - so the incorrect flash MD5 value is always the same, but always wrong (in extreme cases it can lead to the chip staying fully erased with all bytes 0xFF - this is why esptool prints the MD5 of all-0xFFs)\nIf the flash MD5 changes each time, it usually indicates a signal integrity problem - most likely with the ESP32's connection to the SPI flash. If something has been connected to the ESP32 GPIOs which are shared with the SPI flash, it can cause this. Or it can sometimes be a power problem causing the flash chip to glitch out.. Hi @RicardoDanielSimoes,\nThe ESP32 has a bootloader in ROM, which can't be replaced or updated. This bootloader loads a second software bootloader from flash which then boots the app.\nThe bootloader is compiled as part of the firmware you run on the device. So if you use ESP-IDF then there is a bootloader compiled as part of IDF, Arduino for ESP32 has its own version of this bootloader, and Micropython also compiles a version of this bootloader. So reflashing from any of these environments (or any other ESP32 environment) should replace the bootloader as part of the flash.\nThere isn't really a \"standard firmware\" in this sense, just a variety of different options for running code on the ESP32. You should be able to switch between all of them interchangeably.\nI'm going to close this issue as it doesn't require any changes in esptool. If you have further questions then the http://esp32.com/ is a great place to post them.\nCheers,\nAngus. Hi @stevekramer99,\nIt's a little confusing, the esptool.exe included in the ESP8266 Arduino IDE is a different tool to this Python-based esptool.\nYou can open issues regarding the tool you are using here: https://github.com/igrr/esptool-ck/issues\n. That's a good point. \"Chip type\" for now is ESP8266/ESP32 only, it's more the \"device family\" than the specific model number.\nI'll see what we can do to detect ESP8285 specifically.\nDoes it work properly apart from mis-detecting it as an ESP8266?\n. @marcelstoer Good to hear. Sorry I forgot to ping you about the v2.2 release.. Hi @Ryojikn ,\nThis is the github repository for esptool.py, the Python-based command line tool for flashing ESP8266 and ESP32.\nFor questions about the GUI flash download tool, please post on the Espressif BBS: http://bbs.espressif.com/\nYou may want to try installing esptool.py and flashing from the command line to see if you get a different result.\nSorry I can't be of more assistance,\nAngus. Hi @mallareddy63  & @tehniq3 ,\nThis problem is to do with communications between Arduino (running esptool.py) and the board, rather than anything to do with your code.\nCan you please tell us:\n What hardware (ie what development board) are you using? Where did you buy it from?\n What Windows version are you using?\nMost likely the development board you have is faulty or has a design flaw which means it won't reset into bootloader mode automatically.\nTo make it work:\nYou can try holding down the button marked \"BOOT\" or \"FLASH\" while esptool.py is \"Connecting...\". If you see esptool.py connect then you can release this button.\nIf this doesn't work, try also pressing and then releasing the button marked \"EN\" or \"RST\" while esptool.py is \"Connecting...\" (keeping the first button held down the whole time).\nThis may take a few tries to get right.\n. Thanks everyone for the updates.\nGoing to close this as it seems like most people find solutions using the flash and boot buttons. If you have a development board which doesn't automatically reset reliably, make sure to ask the manufacturer to improve their board design! :). @nageshu Testing power, as @MikeA1s suggests, and also check any connections to bootstrapping GPIOs (GPIO numbers 0, 2, 12, 15) on the board. See these two headings on the wiki: https://github.com/espressif/esptool/wiki/ESP32-Boot-Mode-Selection#select-bootloader-mode \nA full list of troubleshooting steps can be found here:\nhttps://github.com/espressif/esptool/#troubleshooting. Hi @RussBar,\nIf you add a capacitor between the EN pin and GND (in the 1uF-10uF range) then automatic reset into flashing mode will probably become more reliable. Not all development boards have enough capacitance on this pin.\nIf esptool is flashing the binary successfully but it doesn't run then this is probably an issue to open with ESP-IDF or the arduino-esp32 project. If you're not sure of the specific problem then it might also be useful to post on the https://esp32.com discussion forum. When posting in any of those places, please include as many details as possible (for example, what exactly is the log output when the sketch fails to run).. @sravanth005 The ESP32 doesn't seem to be responding to serial commands. Usually this means it is not in the \"bootloader\" mode. You'll need to connect pin IO0 to GND as shown in the \"Connections\" diagram at the link you posted. After IO0 is connected to GND, you will need to reset the ESP32 somehow - either by pressing a reset button if there is one, or by cycling the power to the ESP32 (unplug & replug USB, maybe.)\nIf it's still not working, double-check all the other wiring matches what is shown in that diagram.\nIf it's still not working after that, you'll need to ask the manufacturers of that development board for help as this problem is somewhere in the hardware.. Hi @josep112 ,\nWe don't have this feature at the moment, however we're considering how to expose this kind of functionality.\nBecause esptool.py is a command line tool, it's easy to combine it with other tools in order to get this kind of parallel execution, though.\nFor example, as you seem to be on Linux, you can use GNU Parallel:\nparallel --group esptool.py --port '{}' write_flash 0x0 blink.bin ::: /dev/ttyUSB0 /dev/ttyUSB1 /dev/ttyUSB2\nThis will run esptool.py in parallel on the three serial ports named after the :::. The output is grouped per-command, and no output is printed until each esptool.py finishes (otherwise output is interleaved and can be very messy and hard to understand.)\nAdd the --dry-run argument to parallel for easier debugging. Consult the Parallel docs for more details.\nYou can also store the list of serial ports in a file, or pipe them in.. Hmm, you may have an older version of parallel to me.\n$ parallel --version\nGNU parallel 20170322\nCopyright (C) 2007,2008,2009,2010,2011,2012,2013,2014,2015,2016,2017\nWhat version do you have?. Try passing --gnu to parallel in addition to the other arguments. My version no longer has the \"tollef mode\", that I think Debian/Ubuntu turns on by default.. Good catch. I'm surprise PyFlakes didn't see this.\nI think you're right it doesn't change the function behaviour, but still worth fixing.. Thanks for bringing this up. I think I remember struggling with this whenI  was writing setup.py\nI don't want to have everyone using esptool install a package that's only needed for tests. It may be enough to add it to tests_requires instead of install_requires, but IIRC there is some other catch here.... > I'm curious on what the catch is.\nI am curious as well because I can't remember! I'll try and make time to play around with this change before merging and see if I can reproduce anything.\n\nis there a reason that pyaes and ecdsa are bundled AND listed as dependencies?\n\nYeah, it's a bit sub-optimal. The reason is that a lot of people have traditionally run esptool.py by git cloning and running in-place (this is also how we provide it in ESP-IDF). For a long time this was the only way to use esptool.py (now releases are put on pypi). So for now I haven't wanted to break the \"clone the repo and it just works\" method of use.\nHowever, I also think vendoring libraries should be done as a last resort.\nSo, the behaviour is:\n If you \"pip install\" or \"setup.py install\" esptool.py then esptool.py will be on your PATH and will use the versions of pyaes & ecdsa installed via Python's module management system (the vendored libraries are not included in the esptool Python package).\n If you \"git clone\" and run it in place then you'll get the vendored libraries.\nBecause the pyaes & ecdsa versions are not specified in setup.py, there is the possibility that some future version of one of these libraries will break it but only for people who use the packaged version. This is sub-optimal, but I think it's also unlikely as we don't use a lot of the functionality of either library (and both seem to be mature).\n  . >  I'd be curious about the strategy to depreciate that. Maybe make a branch for PyPI without those two packages and then set it to master after some time and warnings. Afterwards maintain a branch specifically for cloning to see how many people actually do that versus pip install?\nThis could work. As a first step we would need to migrate ESP-IDF itself to use 'pip' for Python packages, so we can start to \"take our own medicine\" in this sense. :) . Neat, thanks!. Good catch, thanks! I think I must be relying on PyFlakes too much for catching these.. Thanks for thinking of this cleanup. I appreciate all these PRs!\nThe ecdsa & pyaes subdirectories are \"vendored\" libraries that are copied from their upstream versions. So I'd rather not make any changes there, so that it's easy to pull upstream changes without needing to resolve conflicts. Feel free to submit these cleanups direct to the upstreams, though.\nIf you amend the PR to take out the vendored libraries, I'd be more than happy to merge.. One other addition, if you feel like it, would be to add flake8-import-order to the Flake8 dependencies so Travis can check future import additions remain in order.. Thanks, looks great! Sorry for the slow turnaround on this.. Hi @plerup ,\nCan you please post the full esptool.py command line you're using?\nAngus. No problems, glad you got it figured out.. Hi Akriti,\nWhat ESP8266 board or hardware are you using?\nAlso, what Arduino IDE are you using to upload? I believe the ESP8266 Arduino IDE uses esptool-ck not esptool.py. esptool.py was (I thought) only used in the ESP32 Arduino IDE.\nAngus. Hi @Akriti-S ,\nIt looks like your dev board is failing to auto-reset into bootloader mode. You can try holding down the FLASH button while esptool.py tries to connect. If this doesn't work you can also try trapping RST while holding FLASH, while esptool.py tries to connect.\n\nIf I upload the code without uploading the sketch's data folder then I do not get this error however if I first upload Sketch Data folder and then try uploading the sketch. I get that error. \n\nThat's pretty odd, although it may also be related to auto-reset working once and then failing. Do you know what files are being flashed at which offsets? Is the flash size set correctly for your board?. Closing due to a lack of updates, but feel free to reopen if you'd like to continue the discussion about this configuration.. Hi @lordcrc,\nSorry, I thought someone got back to you about this a while ago.\n\nIROM_MAP_START = 0x400C2000 // was 0x400d0000\n\nThis is a difference between ESP-IDF (which uses 0x400d0000) and the reference manual. I think because of some issue using the first few pages of the IROM space. I have checked with the digital hardware team about the exact reason, and updating either the TRM or the ECO document.\n\nIROM_MAP_END   = 0x40C00000 // was 0x40400000\n\nI think this is a mistake in the TRM. Only 52 64KB pages of flash cache can be mapped concurrently, although possibly it can all be mapped at a higher virtual address (ESP-IDF doesn't do this, the lower end point was taken from the IDF linker script). Will check.\n\nSPI_REG_BASE   = 0x3FF43000 // was 0x60002000\nEFUSE_REG_BASE = 0x3FF5A000 // was 0x6001a000\n\nSome peripheral registers are mapped at two addresses. There's a small note at the top of 29.4 Register Summary in the TRM: \"The base address for registers is 0x60008000 when accessed by AHB, and 0x3FF48000 when accessed by DPORT bus.\" We use the AHB range here (and in ESP-IDF) as a workaround for ECO 3.3 (as documented in the ECO guide).\n. This functionally should be possible now but it's not documented as I haven't thoroughly tested it.\nThe pyserial library which esptool is built on supports RFC2217, which is a standards-compliant way to tunnel serial port traffic over a TCP telnet session. Docs here. If you use the form mentioned there as the port name when running esptool.py (rfc2217://host:port) then it should work, including flow control if DTR & RTS are hooked up at the other end.\nLooks like you're on Windows. A quick search for \"rfc2217 Windows\" shows there are quite a few free options for serial servers on this platform.\npyserial also includes a simple RFC2217 server example:\nhttps://github.com/pyserial/pyserial/blob/master/examples/rfc2217_server.py\nPlease let us know how you get on with this.\nAngus. @me21 did you have any luck with this?. Thanks for the update @me21, no problems. I'm happy to leave this issue open until we have an officially documented way to use RFC2217.. Fantastic, thanks for confirming this @me21. Now documented (with some simple examples) at https://github.com/espressif/esptool/wiki/Remote-Serial-Ports\n. Thanks @milan-kupcevic ! Will also fix the (unrelated) build failure. :). Are you still using your custom modified version of MicroPython?\nAre you able to attach the application.elf and application.map files  to the issue?. Hi @jayadevakash ,\nThis a compiling problem with Arduino for ESP8266, esptool.py is not involved.\nI suggest trying here:\nhttps://github.com/esp8266/arduino\nOr you can try the esp8266 deauther project itself.\nAngus. Hi @Avi-TelnT ,\nSorry, for some reason I never replied to this when you asked it.\nI think doing this with esptool.py may be possible but would require some custon modifications. The main problem I can see is that the initial \"SYNC\" process tends to be a little unpredictable - esptool will keep sending SYNC packets until it gets a valid response, and it may reset the board multiple times during this period. You'll see that even on the same hardware this can take a different number of tries each time.\nThe SYNC process is documented here:\nhttps://github.com/espressif/esptool/wiki/Serial-Protocol#initial-synchronisation\nYou'll probably need to make some tweaks to esptool so that, for example, it sends a maximum number of SYNC packets before it assumes that all of the ESP32s are listening and that it can start flashing. And also make sure you have a reliable way to reset into bootloader mode. Otherwise some still may still not be correctly running the bootloader at the correct baud rate, or not in bootloader mode at all.\nIs this for a factory bulk flashing setup? Most of our customers who have this requirement do their flashing directly to the SPI flash chips using a bulk SPI flasher[*]. If you're ordering a high enough quantity of ESP-WROOM or WROVER modules from Espressif then you can also talk to our sales team about purchasing modules pre-flashed with your firmware.\n[*] This is another thing you could potentially do, build a jig which connects to multiple ESP's SPI flash CS, CLK, and MOSI pins in parallel, and build a tool which sends SPI flash erase and write commands but ignores any read data.. @IIM-Slide You may find the IDF docs for these features useful as well:\nhttp://esp-idf.readthedocs.io/en/latest/security/flash-encryption.html\nhttp://esp-idf.readthedocs.io/en/latest/security/secure-boot.html\nThere are at least two ways of programming multiple boards with secure boot & flash encryption enabled:\n In the recommended production config, keys are generated on the device on first boot. You can flash multiple boards in parallel for this configuration, as everything is flashed in plaintext and then security features are applied by the device on first boot. This is the recommended production configuration in the IDF docs.\n You can pre-calculate the encryption key and pre-flash it into the EFUSE of all devices. This is mentioned in the Chinese doc linked above. In this case, if you can find a way to write efuse in parallel then you can write the same flash encryption and secure boot keys to all devices and then flash. (\"Reflashable\" mode in the docs.) Note that using the same key for all devices in this way means that a compromise of one device's key(s) will compromise all devices.\n. Hi @IIM-Slide ,\nYou understand correctly.\n\nI have no way of re-flashing them if something went wrong.\n\nIn the most common production configurations, there's no provision for physically reflashing devices once they leave the factory (regardless of security requirements). OTA updates are supported with flash encryption enabled, so this is the commonly used way to update the device firmware (the bootloader isn't updateable, but we maintain bootloader backwards compatibility).\nIf you have a different production configuration that we may not have considered, please let us know.\n\nDo you know if this is something doable?\n\nSomething like this is technically possible. If you want to share one UART between all devices then you'll still need to be happy modifying esptool.py & espefuse.py to ignore status responses, etc. If you're happy to have one serial device per ESP then the Flash Download GUI has a batch flashing mode of this kind, already.\nAnother possible solution is to configure an in-factory key server of some kind, so each device comes up on first boot as part of end-of-line testing and downloads its unique keys from the server (who has a database with each key), and then enables the security features at this point. This is not currently supported in ESP-IDF, you'd have to add support yourself. However if you open a feature request on the ESP-IDF repo then we can look into the feasibility of supporting it: https://github.com/espressif/esp-idf/issues\n. It may be a little while before I get to verify this. Do you still see this bug even when the CS pin is set to a lower value? Possible there's a bug translating pin numbers >31.. This should be fixed in esptool.py v2.2, please reopen if you find otherwise.. Hi @liborw ,\nSorry for the slow reply\nWhat hardware (including USB/serial adapter) do you have? Has esptool.py ever worked with this hardware?\nThere isn't anything we can do from esptool.py itself to create this kind of situation, the OS won't allow it. However the USB/serial driver which runs in kernel mode can get the operating system kernel stuck in a way where nothing can kill the process. This is particularly possible if the driver is poorly written or buggy.\nUnfortunately there isn't much we can do from the esptool.py side. Looking for updated versions of the macOS USB/serial driver (or macOS itself) may resolve the issue, though.\nThe other thing which sometimes works is unplugging the device, which causes the operating system kernel to clean up the broken driver.\nAngus. Closingas I don't think there's anything we can do from the esptool.py side, here.. Hi @rmokerone ,\nThis is an interesting fix, thanks for sending it. I have a couple of questions so I can understand this fix properly:\n\nWhat OS are you using?\nIs the CP2102 the only USB/serial adapter adapter where you've seen this fix a problem? Can you please explain what hardware (dev board, etc) you were using where this fixed a problem?\nHow did you come up with the 0.3s (300ms) value? 300ms is quite a long time, especially relevant to USB full speed packet times. Using this delay will slow down some esptool.py operations substantially. Do smaller delays work?\n. > And this time interval is not in every package. Is the time of each command, I think it is acceptable\n\nMultiple calls to command() are made for each invocation of esptool.py, so delaying 300ms each time will have a major performance impact across all platforms and serial devices. I'd prefer to find a better way to fix it if we can.\nI don't have a macOS computer I can try to reproduce this on, but to help us understand the bug can you please use dtruss to capture the OS-level system calls. Something like:\nsudo dtruss esptool.py write_flash (args) 2> esptool_log.txt\nPlease first take a dtruss log without this PR so the bug is triggered, and then a log with this change applied where the bug is fixed.\nAlso, the PR you sent currently won't work due to an invalid name - please check the error shown above and fix the code.. Hi @rmokerone ,\nI had an idea for a (possible) alternative fix for the serial driver issue, that won't reduce performance at all. Can you please try this branch and see if it changes at all:\nhttps://github.com/espressif/esptool/tree/experiment/ch340_timeout_bug\nAlso, there is no a new option esptool.py --trace. If the branch doesn't work, can you please post the esptool.py --trace output when it fails. Thanks.. Hi @rmokerone ,\nI think we've found the underlying issue causing this problem. Can you please try the latest master branch (with commit linked above) and let me know if it fixes the problem.\nAngus. @loadedtech @dehart I don't think this is the same issue addressed in this PR. In your case the timeout is happening much later, and it doesn't fit the \"failing to read after write\" driver bug that @rmokerone is mentioning, as bytes are successfully being read after the command write. I've opened issue #300 to track these cases, please take a look there.\n@rmokerone I'm going to close this as I haven't heard back from you, but if you get a chance to look at this again then please let me know. Thanks.. Hi @tehKaiN ,\nThanks for reminding me about this. Unfortunately that wiki page is quite old. It predates esptool being an official Espressif project and it's based on reverse engineering back when this was a community project.\nI would like to update it with more details, ESP32-specific details, etc. but I haven't had time. As a stop-gap I've added a note to the top directing to this issue.\nReading the esptool source is probably the easiest way to get up to speed with the protocol quickly. Feel free to ask about any particular point which you're stuck on.\nAngus. > after writing to RAM I'm receiving kinda strange packet from ESP. Does it have some meaning or should I just ignore it?\n0x4F, 0x48, 0x41, 0x49 is the stub startup \"OHAI\" sequence. in a SLIP packet (you can search for it in the stub code and esptool.py. It's the first thing the stub sends once it starts running (This is why it comes after the ESP_MEM_END (0x6) command with the entry point address of the stub code.)\nThis is understandably a bit weird, and is mostly for historical reasons. Cesanta wrote the original version of the flasher stub, and their stub wrote OHAI when it started up and then spoke a custom protocol from then on. I rewrote the stub code to use a compatible protocol to the ESP8266 & ESP32 ROM loaders, so we could have the --no-stub option without too much duplicate code. But I kept \"OHAI\", I guess I found it kind of charming...\nIt's also the only thing the stub sends unsolicited. I guess the alternative would be to have the host send commands and poll for a running stub.\n\nI get response packets that have body and no status/error:\nAnd also packets with status/error but no body.\nSo I guess status/error only occurs when no body is present. Am I right? And then there is the MD5 checksum packet, which response doesn't apply to this rule\n\n... Yes. This is (also) for historical reasons due to the way the ROM loader evolved between ESP8266 and ESP32. I won't try to defend it as a coherent design!\n\nESP_MEM_END (0x6) not returning status bytes, I had actually not noticed. The command code in esptool.py doesn't verify the return length at all, it just assumes the last two bytes are status. And as these are always zero, it was happy.\nThe ESP_SPI_FLASH_MD5 (0x13) command is indeed the (very) odd one out here.\n\nIn general, if you can structure parsing of responses in a similar way to esptool.py (read an entire variable-length SLIP packet, then make assumptions based on the structure of the SLIP packet) you'll probably have a better time than trying to parse from the beginning based on the (inconsistent as you've seen) length headers. sorry.\n. Thanks again @tehKaiN for expanding the Wiki page.\nI've been through and expanding it some more, and added some detail about common command flows for flashing, etc.:\nhttps://github.com/espressif/esptool/wiki/Serial-Protocol\nI'm considering that this issue can be closed now. If you find inaccuracies or shortcomings in the wiki protcol description, please open new issues to track this.. I think two different things are happening here:\n\n\nThe adapter you have doesn't seem to have DTR wired up for automatic resetting of the ESP8266. This means that esptool.py is not able to automatically reset the chip during the \"Connecting...\" phase and relies on you having manually done it (via power / unpower). You may have some luck passing --after no_reset on the command line, allowing you to run multiple esptool.py commands in a row, but this may not work correctly either...\n\n\nFlashing multiple files in one pass is not the same as running esptool.py multiple times. So this is something else, maybe to do with the ESP-01 or the usb/serial chip. Some things to try:\n\nLower the baud rate (try the default 115200, perhaps)\nTry esptool.py ... write_flash --no-compress --flash-size=1MB ...\nTry esptool.py --no-stub .. write_flash ...\n\nPlease let us know if any of these options help.\n. > do these issues stay \"up\", in anyway?\nThey do.\n\nthe above works for an Opensmart USB to ESP-01 adaptor.\n\nI'm glad you found a workaround, but I'd like to try and fix this bug as well. Did any of the other suggestions work for you, or only the one you posted about?. It's possible this is the same underlying issue solved by #247.. Closing as this seems to be resolved.. HI @ygator ,\nThanks for reporting this. Can you give any more details about your setup, such as:\nWhat host OS are you using, and which development board? At what point were you getting timeouts? (If you get the latest esptool.py, can you run some commands with esptool.py --trace and let us know the output?)\nThanks,\nAngus\n. This sounds very similar to the issues fixes in #247, although without more details I'm guessing.... Thanks for providing all these details. We use CP2102 in the official Espressif dev boards (the DOIT boards are a very similar design) with no issues. I wonder what the difference is, I have heard of fake CP2102s so this is a possibility.\nSleep 0.010 will have a lot less of an impact than 0.25, which makes it a more viable fix (I'm reluctant to impact performance of all chips on all platforms because of bugs that only effect a small subset).\nI'm also curious if the fix in this branch helps, if you have time to try it out:\nhttps://github.com/espressif/esptool/tree/experiment/ch340_timeout_bug\n(This is for the possibility that it's not the write which is lost, but somehow the following read is lost at the driver layer.)\nIf you're feeling particularly adventurous, it would be interesting to see the USB-level behaviour of your chip (which can be captured from inside Arch using usbmon):\nhttps://wiki.wireshark.org/CaptureSetup/USB\n. Thanks for this, @ygator . Any chance you could please post the USB capture as a .pcap or .pcapng file? Easier to follow than plain text.. That's interesting. Here's that same command running successfully on a genuine Core Board:\ncoreboard_sync.zip\nI don't see any particular differences. The response to the sync packet has a different payload, but I think this is mostly a coincidence rather than indicative of any issues with the loader behaviour. And it seems like sometimes your ESP32 responds to the first command after the sync, then stops responding, so that indicates it's not a problem with the sync itself.\nI am inclined to think this is a hardware bug in the \"CP2102N\" rather than anything with the driver or the ESP32... Although it could be power related, with the extra delays smoothing out the power draw a bit.\nCan you try swapping a different USB cable and see if the behaviour changes? I wouldn't expect it to, but still.... Also, do you have a link to the place you bought the DOIT from? I'd like to get one for myself if I can but it seems like there are probably multiple manufacturers (\"DOIT\" and then \"DOIT clones\").. That's interesting. One last question then I promise I'll stop asking you to test things, if you roll back to esptool.py v2.0 (which was the first stable release with ESP32 support), does anything change?\n. (Also, I picked up one DOIT ESP32 board from their official Taobao store, plus two cheaper ones that may be clones from different stores. Will be interested to see how they all behave when they arrive...). >  I don't believe I had any timeout issues when I first was working with it.\n\nNo change. Only thing that works is adding the sleep before the write.\n\nThat seems really strange... What could have changed?\n. I see. I guess on the Linux side there is also kernel version (USB host behaviour & cp2102 driver), although at the usbmon level these seem fairly standard.\nI'm going to wait until my boards turn up and see if I can reproduce this. I'm not ruling out adopting your suggested fix (especially if it's only a 10ms sleep), but I'm wary about merging changes like this before we know what the scope is and what exactly we're fixing (like you said, this may just be your board).\n. Hi @ygator ,\nI got three totally different DOIT boards from three different taobao sellers:\n\n(Pen marked one is official from doit.am, the other two are clones.)\nAll three seem to work fine from my Arch Linux development system. Does yours match any of those?\nIs it possible you have a defective development board?. That's interesting. Your board layout is identical to the middle one in the photo I posted, although my one has an ESP32S module not a genuine ESP-WROOM32. Does yours say \"ESP32 DEVKITV1\" on the bottom?\n(Of interest, this board layout is not by \"DOIT\" but is instead a copy of the doit.am design.)\nIs this the only ESP32 development board you have?\n\nDon't get hung up on Arch has I am just using it now since it is easier to test with. I first encountered the problem on Windows 10 trying to flash from arduino ide.\n\nI'm not, it just happens that's what I use as my development machine. I'm away from my physical Windows 10 computer right now but I can test with it next week.. Hi @ygator,\nHave fixed an issue that might be the same as this one. Can you please try the latest master branch (with commit linked above) and let me know if it fixes the problem.\nAngus. Interesting, thanks for checking. The bug we fixed just now only seems prominent at higher baud rates, and possibly is a race condition with the host computer (for what that's worth.). The only .exe I know of is built as part of arduino-esp32. I'm not sure if @me-no-dev publishes the scripts for this - @me-no-dev can you help us out with that?\nThe difference may be the pyserial version (a pyserial version will be bundled in the .exe)\n. Thanks @me-no-dev & @ygator. In that case I'm going to close this issue, as it seems like this particular case is fixed in v2.2.1.. LGTM, thanks @me21 . Hi @sysprogs ,\nThis seems reasonable as a change. Are you using --before no_reset when seeing this behaviour?\nI'm asking because DTR should already be False due to the reset logic. The only remaining case is when --before no_reset is passed, when DTR looks like it will default to asserted (True) and remains this way. This may also cause a bug with hard_reset on other platforms.\nAngus. Hi,\nI think there is some confusion over the different kinds of binary images.\nmake_image is for making a single .bin file (the .bin files themselves contain segments which are mapped or loaded to particular addresses in RAM, this RAM load address is the meaning of the -a argument).\nMerging multiple binaries into a single file, which can be flashed in one go, is not currently an esptool.py feature. Although I agree it would be good to have. The Windows GUI Flasher Tool can do this.\n. I've marked this an enhancement request for that feature.. No problems. Will keep this open as an enhancement request until esptool.py has this feature.. Thanks for reporting this, @marcelstoer .\nAre you able to please verify something for me? If you check out commit 81e6108f2b2dd840bc649ae92f875d7deebdfa25 and test, and then check out commit b813b373574a6a00092af5a47f4e7d62d4d7d7ae and test, does the former succeed and the latter fail? This will confirm what I suspect caused the regression.\nThat commit is supposed to make baud rate (crystal) inaccuracy in the hardware less of a problem, but it's possible that it's not working as expected (or not for all hardware)...\n. OK, thanks for the update. Recently I've mostly been running the ESP8266 automated tests with CP2102-based boards. CH340Gs have never been very stable for me at higher baud rates. But if they're more stable on the older releases, we should fix this.\n\nI have to confess that I don't fully trust my test bed anymore, though. git checkout v2.0.1 rewinds back to ffde3f0 and all is well. git checkout ffde3f0 is supposed to do the same but flashing is stuck after the compression step.\n\nThat's odd, they should definitely be the same code. You can confirm with md5sum esptool.py or something like that. Is it possible the failures are intermittent in a semi-predictable way (maybe the CH340 needs a hard power cycle before it comes back)? Or something heat related (some of the CH340s seem to have fairly substantial clock/baudrate drift compared to the ESP8266)?\nIf you're feeling adventurous, you could try git bisect v2.2 v2.0.1 esptool.py and bisect to look for the commit which reliably starts failing at higher rates.\nOtherwise I'll have access to my collection of ESP8266 boards next week and I'll try to reproduce this with a CH340G.. Hi @marcelstoer,\nHave fixed an issue that may be the same as this one. Can you please try the latest master branch (with commit linked above) and let me know if it fixes the problem.\nAngus. Hi @ifitshow ,\nCan you please try the master branch with the possible fix for this issue and let us know if it works then (see the comment directly above your comment).\nAngus. Hi @baycom,\nIf you try the just relased v2.2.1, does this work (git fetch origin; git checkout v2.2.1)? For more details, please see the comment above yours.\nAngus. Thanks @paulreimer . ESP-IDF should be updated with v2.2.1 shortly.. > , incidentally my FT2232H is ready to go at 5Mbaud, but I've never been able to push that fast to the ESP32 (which I thought could do up to 4Mbaud?) 2Mbaud is the fastest I've been able to go. \nI'm not sure I understand what you're telling me here. There are a few factors for maximum baud rate on ESP32, one of which is board layout. My FTDI-based dev boards flash reliably at 2Mbaud and almost reliably at 4Mbaud. I've been meaning to look into this closer in the future, but even at 2Mbaud most of the flashing time is spent doing things other than serial transfer so I haven't prioritised it too high.\n\nIs this a macOS issue possibly?\n\nThe bug fixed in v2.2.1 (2ec0bc0) was reported (privately) and confirmed fixed on macOS, and everyone else reporting in this issue thread appears to be using macOS (although we don't have confirmation v2.2.1 fixes all these issues, I suspect it does.) It seems like macOS flushes some incoming data if the serial port settings are set (even if they're not changed).. Oh, I see now. I happen to use Linux & Windows (and I'm the main esptool.py developer). A number of the ESP-IDF developers use macOS as their main OS, and @igrr (who uses macOS) noticed this regression shortly after we updated esptool.py there. We worked together to get some dtruss system call traces, which is how we figured out the \"buffer flush on ioctl\" root cause.\nSo you're not at any significant disadvantage by using macOS. I'm also thinking it may be time I get a Mac Mini or something to run the occasional regression test on.\n. Thanks @marcelstoer :). Hi @jnachtigall ,\nLooks like you have a dev board with an SST (now Microchip) flash chip:\nhttps://chromium.googlesource.com/chromiumos/third_party/flashrom/+/master/flashchips.h#697\nhttps://chromium.googlesource.com/chromiumos/third_party/flashrom/+/master/flashchips.h#721\nI haven't heard of ESP8266 boards with these chips before (and they don't follow the more common flash ID numbering scheme, which is why esptool.py can't detect the size).\nTo work around the flash size warning you can pass write_flash -fs 4MB to esptool.py.\nThis won't solve the problem that esptool.py is reading back different data after it's written, though (the MD5 mismatch errors). Looking at the Microchip datasheet for the flash chip, it looks like it should support the standard flash commands which are used by ESP8266.\nDo you get the same incorrect \"Flash md5: \" hash each time? If it's the same each time, this can indicate that some write protection bits are set. What is the output of esptool.py read_flash_status --bytes 1?\n. Hi,\nYou understood correctly. The diffrentiator is that for random data corruption (maybe one of the SPI data lines is faulty) the same \"File md5\" will read back a different \"Flash md5\" each time. For consistent corruption (write protection, problems erasing, command compatibility problems with the flash chip) the same \"File md5\" will read back the same \"Flash md5\" each time.\nLooks like you have consistent corruption of some kind.\nMoving to a new development board with a known-compatible flash chip is probably the best option at this stage. You could try to diagnose what specifically is incompatible with the Microchip flash chip, but probably it won't be a problem which is easy to fix (even if esptool.py can be made compatible, the ESP8266 ROM routines and SDK probably won't be.). The error is being raised here:\nhttps://github.com/espressif/esptool/blob/master/esptool.py#L2456\nBecause the \"esptool.py write_flash\" command expects pairs of flash addresses and the filenames to flash to that address, in a sequence on the command line. Like this:\nhttps://github.com/espressif/esptool#writing-binaries-to-flash\nSeems that PlatformIO's build system (or maybe VSCode) is generating an esptool.py command line that includes the word \"Controller\" where a numeric address should be.\nAlso the fact that esptool is printing a \"usage:\" help statement suggests that there may be other invalid parts of the command line which is being generated.\nUnfortunately you'll have to ask the PlatformIO developers about this, as it's not a problem with esptool.py itself.\nIf you have the .bin files building correctly with PlatformIO/VSCode, then you may find that you can flash them to the chip manually by following the steps at the link above.\nSorry I can't be of more assistance.. (The workaround is to pass --chip esp32 to esptool.py). Hi @karenYerevan ,\nTry adding esptool.py --before no_reset, I think the Arduino USB/serial interface can be confused by the automatic reset DTR/RTS operations.\nIf this doesn't work, can you please paste the full output from esptool.py not just the error?\nAngus. Do you get anything if you add esptool.py --trace --before no_reset ...?\nIf you don't get any trace output, triple-check all the pin connections (TX/RX aren't swapped, ESP8266 has been reset manually with GPIO0=GND, etc.)\n. Do you see any lines saying \"Read\"? You may see something useful in the output when you get \"invalid head of packet\", ie some input from the ESP8266.. It looks like the serial data is being corrupted, maybe by the Arduino USB/serial somehow.\nYou can try lowering the baud rate (try really low like -b 9600). If this doesn't work then you may need to seek out a different USB/serial interface.\nMake sure you reset (or power off and then back on) the ESP8266 between each connection attempt.\n  . Almost any 3.3V \"low voltage TTL\" serial adapter should work. I have some based on FTDI chips and some based on Cypress chips, but they're all very similar. :)\nIf you want an ESP8266 development board, you might also consider something like \"NodeMCU\" where the USB/serial is integrated on the development board.\n. I'm going to close this as I think it's a hardware issue. However please reopen if you think esptool.py is doing the wrong thing here.. Hi @nikyc ,\nIt looks like your ESP8266 is never sending any serial data. If you open a normal serial connection to the ESP8266 and 74880bps and reset the board (with GPIO0 high or low), do you see any output at all on the serial link? If not, this is a hardware issue of some kind - either the ESP8266 isn't enabling correctly or the USB/serial chip is not correctly relaying the serial output.\n. > As you can see the signal is a lot noisier when trying to boot (GPIO0 low) and the TX of ESP module doesn't work. it seems like it can't be pulled low.\nThe noise is a little odd, but it doesn't look like enough to cause any permanent problems.\nI think you're not seeing anything on U0TX with GPIO0 low because the ESP8266 isn't sending any response (after all, it works with GPIO0 high). This is normal in bootloader mode, until a command is successfully received - so it could be a boot mode issue, or it could be that the U0RX pin is open circuit at the ESP8266 pad (cold joint?) so no command is getting through.\nTo check the boot mode, measure the voltages of the EN, RESET, GPIO0, GPIO15, GPIO2 at the module and consult this documentation: https://github.com/espressif/esptool/wiki/ESP8266-Boot-Mode-Selection\nTo check the U0RX signal is getting through, do a visual inspection and also make sure you're probing the signal at the ESP12 module pad itself.\nYou may also discover something interesting by using miniterm.py to read the full bootloader output when GPIO0 is high: miniterm.py COMx 74880. Glad you got it sorted.\nBTW, one thing that might explain this, the ground plane under the module in the first revision doesn't have a clear path to the the rest of the ground or the decoupling caps (only the small notch back at the GND pin). This may cause it to couple high frequencies, kind of like an antenna. Adding some stitching vias into the bottom ground plane, and making sure you have a short straight (as possible) path back to the decoupling caps, may also help.\nBut removing it entirely sounds like it worked, too. :)\n. Hmm, that's odd! I've not seen a \"write timeout\" before.\n\n\nFor your \"not IDF\" environment, can you please post the output of \"python -v\"?\n\n\nIn the IDF environment, can you confirm you're using mingw32.exe (ie the prompt should say MINGW32 in large letters). If you specify the port as --port COM7 inside IDF as well, does this make any difference?\n. Hi @ftoyon,\n\n\nSorry for the slow reply. I got the -v argument wrong, sorry!\nCan you please run this comand from a standard Windows terminal and post the output:\npython -c \"import serial, sys; print(sys.platform, serial.VERSION)\"\n(no need to run esptool for this.). Closing due to a lack of information. Feel free to reopen if you have some more details to help debug this.. I agree this will be a nice feature to have.\nThe plan is to add this to the partition table tool, not esptool.py. esptool.py currently knows nothing about the partition table. This is by design (as partition tables are not part of the ESP32 hardware but part of ESP-IDF).\nSome discussion on a similar ESP-IDF feature PR:\nhttps://github.com/espressif/esp-idf/pull/612#issuecomment-302270524\nI'm going to close this but feel free to reopen the request on the IDF repo (or Watch the linked PR, as we'll probably deal with both of these shortcomings at the same time.)\n. > I am attempting to divorce the flashing of arbitrary data from the build system\nThe plan is to build a tool that doesn't depend from the ESP-IDF build system (the current gen_esp32part.py partition table tool can be run standalone as well).\nOn the other hand, the ESP-IDF build system will depend on this tool to run checks as part of the build system.\nDoes that make sense?. > A real world example is the case of a SPIFFS filesystem partition. In the case where only the filesystem is to be updated, the offset where it resides needs to found and may vary across different builds and/or app revisions. It is not possible to OTA update in all environments where an ESP32 may be deployed.\nWe can build a tool for this, but it still makes more sense in a standalone tool that's part of ESP-IDF than having ESP-IDF's software design bleed into this tool.. BTW, feel free to open a ticket on the ESP-IDF repo with this request and the use case.. Hi @Electromania ,\nThanks for reporting this. You're seeing some very unusual behaviour, different to other reports despite the similar final error. These two messages:\n\nChip is unknown ESP32 (revision (unknown 0xe))\n...\nWarning: Could not auto-detect Flash size (FlashID=0xffffff, SizeID=0xff), defaulting to 4MB\n\nIndicate some kind of low-level hardware problem. The chip is reporting an invalid/corrupt silicon revision, and then it's failing to talk to the attached flash chip at all.\n\nCould it be that since i was writing to SPIFFS memory (unfortunately in infinite loop - accidentally) it might have just filled up whole memory ?\n\nNo, this is a lower level problem than anything related to SPIFFS.\nIs it possible the ESP32 was running outside of its specified temperature or voltage range for a period? (for example more than 3.3V applied to the chip, or running in extreme heat?)\nCan you please run the following two commands (you'll find espefuse.py in the components/esptool_py/esptool directory) and post the output?\nespefuse.py --port COMx summary\nespefuse.py --port COMx dump\nThanks,\nAngus. (BTW, I deleted your duplicate post on #226 as I think this is a different issue - they're getting a failure to Connect and in your case it's connecting fine and then falling apart later. For future reference, please don't post duplicate information in multiple places - it can be very confusing for us.). Hi @csann,\nThanks for posting all these details. Your problem looks a little different, because the chip identifier (ESP32D0WDQ6) is read successfully (this is stored in efuse) but then esptool.py fails to talk to the flash chip. The efuse values you have look normal for a factory fresh chip.[*]\nThis is probably a hardware failure (dead flash chip on the board, or a bad soldering joint), unless there is something connected to the WeMos board which might be interfering with the SPI flash pins in some way.\nAngus\n[*] The reason I asked for an efuse dump when the chip identifier was invalid in @Electromania's case is because efuse settings can also change the SPI flash pin assignments, so if some efuses have been set somehow to corrupt the chip identifier then they may also have been set in a way which changes the SPI flash pin configuration to use the wrong pins.\n. Hi @Electromania,\nSorry, I wrote a reply to you yesterday but it must have not sent. My apologies for that, will reply in a second.\n\nthis kind of error - irrespective of cause, seems quite often by espxxx users\n\nWe need to improve the esptool.py error handling because \"A fatal occured: Timed out waiting for packet content\" is the last line of output for a lot of totally different errors. 99% of the time this is problems with the serial interface or power poorly supplied to the module in a DIY way, and can be rectified without replacing the chip. It's the output that comes before this error that determines what's actually going wrong. I realise this is misleading and we need to improve it.\nThe issue @Electromania saw, with an invalid ESP32 chip ID in the log output, I have literally never seen reported before. If I google for the first part of the error message then the only other link I find is to the duplicate forum post. So this seems like something quite unique so far.\nIssues with invalid flash chips (FlashID=0xffffff, SizeID=0xff) do happen on occasion. Quite often a SPI flash pin of the ESP chip has been connected to some other device and removing this connection fixes it. Sometimes the flash chip is faulty. Unfortunately we're not responsible for sourcing board manufacturer's flash chips, this is a third party part.\nGoing back to yesterday''s post:\n\nSince i had to continue with project, i somehow managed to remove the ESP Wroom-32 board from my main Wemos board. I replaced it with spare ESP Wroom-32 bare board i had, now i can program that. \n\nOK, good to hear you found a way to keep working. The efuse output from the new board looks normal, but this makes sense as it's programming correctly.\n\nBut now i have new problem, i am getting following error for SPIFFS_Test program for all boards i have. i also tried ESP32-pico sent by espressif. i can upload all sketches and those are running fine. The SPIFFS_Test.ino gives me following message on serial port, and attached images are screenshots of commands you suggested. i have just erased mac address. (since this is slightly different issue than original , if you want i can make new thread.\n\nSPIFFS is fundamentally a software construct, a way of taking a region of the flash and using it as a filesystem for data storage. esptool.py only sees the ESP32's flash as a range of bytes it can read/erase/write. Putting things like a partition table and a SPIFFS partition onto this happens entirely in software, in this case it's done by esp32-arduino. esptool.py doesn't know anything about SPIFFS, apart from seeing it as some bytes written to some range of addresses in the flash.\nThe E (53) SPIFFS: mount failed, -10025 error suggests that when the running Arduino sketch tried to mount the SPIFFS filesystem, it found something invalid.\nDid you flash an initial SPIFFS image to the ESP32's flash? If you didn't, it's failing because it didn't find an existing SPIFFS filesystem formatted in the SPIFFS partition. One solution is to call SPIFFS.begin(true) which sets format-on-fail.\nMore details can be found here: https://github.com/espressif/arduino-esp32/issues/638\n\ni have question - does the spiffs memory keep overwriting if its limit is full ? or we need to manually check how much memory is left, and clear before it gets full .\n\nJust like a filesystem on a hard disk partition, there is a certain amount of space assigned for a SPIFFS partition and it will fill up if you keep writing to it. I believe the default Arduino-ESP32 partition table gives a 1.5MB SPIFFS partition.\n. Hi @csann,\n\nThen I set all GPIO to pull-down and I put 3V3 on each pin to detect a 1. I did not put GND or 3V3 on the six SPI pins, but I did configure them as inputs and set PU and PD resistors. Could this fry the SPI?\n\nNo, it should be fine (at worst, needs a power cycle to come good).\nMy guess is bad soldering or a bad chip. If you have access to a hot air rework station, you might be able to sort it out. Otherwise asking the seller you bought it from for a refund/replacement is probably easiest.\n\nI wish the manufacturers would not even bring out the 6 SPI flash pins to the edge connectors. Why do they do this? If the pins are unusable for anything, why bring them out?\n\nThis is a good question. There are circumstances under which you can use most of these pins, with varying degrees of complexity. But at minimum it'd be good if they were marked \"handle with care\", I agree.\n\nthe Wemos board is totally undocumented...no pictures or schematics on their web site. From looking at their web site you wouldn't even know the board exists.\n\nThere are a lot of \"Wemos\" clones that aren't actually made by Wemos, which might also explain the poor quality. This is the Wemos \"Pro\" ESP32 board I'm aware of, Lolin32 Pro: https://wiki.wemos.cc/products:lolin32:lolin32_pro. > one thing that springs to my mind is- could it be because of the low power of battery ?\nThis is possible. Do you know how low the battery voltage got? A protected Lithium cell should only go as low as ~3.0V before it cuts off entirely. This is safe and within specifications for the ESP32, but an unprotected cell can discharge much further (to the point where the cell itself may be damaged and unsafe to recharge, as well).\nMost of the rectangular lithium batteries with JST-style connectors integrate a small protection circuit in-battery. Most 18650 cells don't integrate anything unless specifically marketed as \"protected\". I don't know if any Wemos boards have an onboard protection chip.\nThe Arduino configuration sets the brownout detector at the lowest value, ~2.43V. So if the voltage got this low it may have started triggering and ended up in a reset loop. If an unprotected battery continued to drain then this may push it below the rated safe minimum voltage for the ESP32, and this could possibly have corrupted the internal efuses (I don't know). I'll check with my hardware colleagues about this possibility.\n\n** \"I believe the default Arduino-ESP32 partition table gives a 1.5MB SPIFFS partition.\"\nIf i use esptool or eclipse or platformio - using esp-idf then how much is the SPIFFS partition ? can we change modify it as per our need ?\n\nDo you mean ESP-IDF rather than esptool? esptool doesn't know anything about partitions or SPIFFS. It just reads & writes bytes from the raw flash.\nPartition tables in IDF are documented here: http://esp-idf.readthedocs.io/en/latest/api-guides/partition-tables.html\nThe default partition table layout file for Arduino is here:\nhttps://github.com/espressif/arduino-esp32/blob/master/tools/partitions/default.csv\n\ncan we change modify it as per our need ? or can we add another external flash e.g. 32Mb using SPI pins ? will it interfere with onboard flash ? may be we can address it differently or reassign spi pin nos to other pins ??\n\nYou can add a second SPI flash chip on different pins, although I don't think either ESP-IDF or Arduino have existing software support for mounting SPIFFS on such a chip.\nProbably the easiest thing you can do is to find a board with 16MB of flash (or swap flash chips on your board) and then change the partition table to expand the SPIFFS partition to use the additional 12MB.\nThe other option is to add an SD card slot, which gives you at least an order of magnitude more storage very cheaply.\nIf you have more questions about SPIFFS or data storage, the best place to ask is the esp32.com forum - either the Arduino subforum or the SDK subforum depending on if you want to use Arduino or not.\n. Oops, I missed a part:\n\nseems now board is completely dead. i tested with several different ways - esp programming module, us-uart adapters, conneting rx tx of other board etc. none works anymore.\n\nIf you want to keep debugging this, start with the troubleshooting steps here: https://github.com/espressif/esptool/#bootloader-wont-respond\n. (Edit: Removed my original comment which was wrong.)\nIt looks like your efuses have corrupted in a similar way to @Electromania's. Is it possible the ESP32 was running on batteries which significantly discharged to a very low operating voltage? Any other unusual operating conditions?\nWhat software environment were you using for the code you successfully programmed?. @cslehel Unfortunately there's no way to un-set efuses once they've become set. I've been talking to my colleagues about the root cause of this issue, but the best workaround is to use a \"protected\" lithium battery type where the protection circuit automatically cuts the battery off if it discharges to 3.0V. This is also important for safety, as recharging a lithium battery which has been over-discharged can cause it to swell up or explode.\nHi @Salty-Doug ,\nThanks for supplying these details. I'm not sure why you're seeing \"SyntaxError\" from espefuse.py, as this usually indicates a Python syntax error (in the code) rather than anything with the command line. However esptool.py is tested on both Python 2 & 3 so I'm not quite sure what's going on there. Is there any other output printed when you run espefuse.py?\nIt seems like the issue you're seeing may be different, as you say you're not running on battery. Is it possible something is connected to or shorting GPIOs 6-11? (These GPIOs are connected to the onboard SPI flash pins.). @Salty-Doug That's quite strange. GPIO2 needs to be low on reset (it's a strapping pin, see datasheet Section 2.4) but I'm not aware of any problems like this which would case it to fail during flashing. I'm glad you resolved the issue, though.. Closing as this issue went in a variety of directions but seemed like they were all hardware issues (connections to the board, problems resolved by swapping modules, etc.)\nIf anyone still experiences issues of this kind, please open a new issue with full details.. Hi @voloviq,\nESP8266 and ESP8089 have no internal flash. They can be used with an external SPI flash chip (which is usally pre-flashed by the module/board manufacturer, not Espressif) or they can be used in SDIO Slave mode (ie as an external WiFi interface for Linux, etc.) The chips do have an internal mask ROM which contains some utility functions, etc. However this mask ROM is not progammable or intended for direct user access.\nHope that helps. If you have more general questions about ESP8266 or ESP8089, the best place to post is http://bbs.espressif.com/\nAngus. No problems. :)\nIf you're using ESP8089/ESP8266 from Linux then no flash is involved. The driver pushes a small firmware into the ESP's IRAM over the SDIO interface, and it calls ROM routines for the rest.\nI believe the same kernel driver should work for both, although this is not my area of expertise.\nBest of luck!\nAngus. Hi @hsiboy,\nAs of esptool.py v2.0, the default values for -fm and -ff are keep, so the values in the bootloader header at 0x1000 should be kept unless a different value is specified on the command line.\nThe default value for -fs is detect, which means esptool.py will try to detect the flash size and set the size value accordingly. This is intended to make it easier to distribute precompiled binaries (projects like MicroPython and Arduino do this) and have things \"just work\".\nMost of this is documented in the README here:\nhttps://github.com/espressif/esptool/#flash-modes\nAlthough I noticed -fs keep is not. Will fix this.\nIt seems like WeMos flashed their factory bootloader with -fs 4MB despite having a 16MB flash chip. Which is still valid, but a little odd.\nIf you run esptool.py -fs keep write_flash 0x0 my.bin then the binary on flash will always be byte-identical to the image (even if the \"real\" chip size is different and possibly set to a value which will fail to work correctly on that device, ie the header says 16MB and the flash is really 4MB then usually writes after the 4MB boundary will wrap around to the beginning again.) \nI believe the bug here is that verification is failing. If you flash an image at 0x1000 (the bootloader offset) then the verification should automatically account for any changed bytes. But it seems like flashing at an earlier offset updates the header bytes but doesn't account for this when digesting. Will fix this.\n. This is actually possible now, although it doesn't appear to be documented in the README so that should be fixed:\n$ esptool.py erase_region --help\nusage: esptool erase_region [-h] [--spi-connection SPI_CONNECTION]\n                            address size\n. I agree this is a desirable feature, but it will be added to ESP-IDF not esptool.py. There's nothing software-specific about esptool.py, it's a hardware level tool. The ota_data partition (and the partition table concept underlying it) are an ESP-IDF software feature.\nWe can still add this functionality to a command line tool so it's easy to integrate IDF partition operations into other software environments.\nPlease consider opening this as a feature request on the ESP-IDF repository.. I'm not sure why the original command didn't work, but I'm glad you found a method which does.. Hi,\nCan you please give some details about what OS you are using?\nAlso, the error you posted in the title of the issue and the error in the body of the issue are different, although looks like they're in a related part of esptool.py. Can you please clarify what the full output from esptool.py is?. Thanks for clarifying with these extra details. It's odd, serial_for_url has been part of pyserial since version 2.5 so 3.4 (latest) should definitely have it.\nInteresting that you seem to have esptool 2.2.1 installed via pip, but you're running esptool.py in place from the command line somewhere else and getting v2.3-dev. If you change directories and try to run version 2.2.1 as installed via pip (probably on your PATH), does this version run correctly?\nFinally, can you please double-check pyserial by running this in the exact same command line, virtualenv, & directory that you run the broken esptool.py from:\n/usr/bin/env python -c \"import serial; print serial.VERSION; print serial.__dict__.keys()\"\nand post the output? Thanks.. Maybe this as well:\n/usr/bin/env python -c \"import serial; print serial.__file__\"\n. Thanks for that. I'm not sure what's happened, but there's something very wrong with your pyserial installation - it doesn't seem to have any of the pyserial API exposed in the module. Maybe try reinstalling pyserial via pip and see if the problem goes away?\n(BTW, if you use triple-backticks before and after blocks of text like this, they will be quoted as code without the weird formatting.). Hi shirish47,\nIf you're using Python 3 then please try this:\npython -c \"import serial; print(serial.VERSION); print(serial.__dict__.keys()); print(serial.__file__)\". Hi @shirish47 ,\nThanks for the update. Maybe you have a file called \"serial.py\" somewhere in your path so Python is importing this is instead of Pyserial.\nCan you please try this shorter line as well:\npython -c \"import serial; print(serial.__dict__.keys()); print(serial.__file__)\". Hi @curusarn ,\nAre you also using MacOS? How did you install esptool, via pip or via some other method?\nAre either of you using a \"virtualenv\" like @alessss was? (if you don't know if you were using a virtualenv, you probably weren't).\nIf either of you run \"sudo pip install pyserial\" (to re-install pyserial into the system packages), does this help?\n. Hi @curusarn ,\nAh... I had not noticed that a package called serial now exists on pypi. That explains a lot, thanks!\nI'll see if there's any way to programmatically identify that this is package is installed, so esptool.py can provide a better error message.. The underlying issue is here: https://github.com/pyserial/pyserial/issues/319\n~~Seems like 'serial' is a dependency of the popular 'requests' library, which explains how it can be installed unexpectedly.~~ EDIT: This doesn't appear to be true, see https://libraries.io/pypi/serial/usage. For now, I've added a note so esptool.py prints a better error message if 'serial' is installed. The error notes that these commands may work around the problem:\npip uninstall serial\npip install pyserial\nThe catch is that this may break other Python software which requires 'serial'.\nThere's no great fix for this right now, apart from setting up a separate virtualenv for each use. I'll try and make contact with the serial & pyserial maintainers, see if there's a better fix that can be implemented.. Thanks @davebelais :) Have adapted your approach into a similar one for pyserial, submitted as a PR here: https://github.com/pyserial/pyserial/pull/340\n. I'm going to close this as the specific error has been resolved (since 5988e03). 'serial' and 'pyserial' are still incompatible, but there's nothing esptool can do about this - except for print a more helpful error (which it now does).\n. @answerquest You should be able to access the port even when pyserial itself is in the \"user\"/virtualenv install, but your user has to be in the dialout group. See last paragraph here:\nhttps://github.com/espressif/esptool#serial-port\n\nall the more case for the module to have its main name equal to the module's name\n\nI generally agree, although pyserial has been around for a very long time now as serial (a good deal longer than the package called \"serial\"), it may be possible for it to register two package names (I think) and slowly deprecate import serial. But this is a matter to discuss with the pyserial maintainers, there's nothing esptool can do about it.. Hi @jeffsf ,\nThanks for the excellent comprehensive bug report. Much appreciated.\nIn IDF v2.0 we added hard vs soft reset after flashing (as soft reset has some faults of its own, and doesn't work quite right on ESP32). The default option is hard reset, but this requires RTS to be connected.\nIf you pass --after soft_reset before the write_flash option then you should get the old behaviour back.\nSeeing this bug report I realise that the only documentation for this is buried a bit in the Advanced Options section:\nhttps://github.com/espressif/esptool/wiki/Advanced-Options#reset-modes\nNot sure if the solution is to add a mention for this somewhere in the README, or maybe add some kind of default \"--after hard_first\" which tries a hard reset and falls back on a soft reset as a fallback. Or maybe it'd be enough to say \"Hard resetting via DTR\" in the log message, so it's clearer what esptool.py is doing here.\n. Thanks @jeffsf . :)\nIt should be RTS, you're right (I remembered it wrong when I was replying). There's some documentation about it here:\nhttps://github.com/espressif/esptool/wiki/ESP8266-Boot-Mode-Selection#automatic-bootloader\nWill change the message as suggested.\nAm toying with the idea of sending a \"soft reset\" command during the hard_reset sequence while RTS is asserted, anyhow, as in the case of a board with RTS connected the chip will be held in reset so it won't even see the command. Can't think of a downside, but am worried it's too clever...\n. Hi,\nCan you please give some details about your hardware configuration? (ie what development board or other hardware). The USB ID only gives us the USB/serial chip model.\nDo you know if the device you have works on any of the supported OSes?\nCan you please post the output of esptool.py --trace --port /dev/ttyU0 flash_id?\nThanks,\nAngus. It looks like absolutely nothing is being read from the serial port.\nMy best guess is that this is a problem with the CH340G driver on FreeBSD, or maybe with the pyserial support for FreeBSD.\nYou can test the CH340G driver on FreeBSD by using any serial port program to connect to the ESP8266 and 74880 bps, pressing reset, and looking for any serial output at all. You can test the pyserial support for this by running miniterm.py /dev/ttyU0 74880, pressing reset, and looking for any serial output at all.\nI don't think there is anything we can do about this from the esptool side, though, if the underlying support isn't sending us any bytes. Sorry!. Can you please try\nesptool.py verify_flash --diff yes 0x0 sonoff.bin\n(May produce a lot of output if there are a lot of differences...). Are you sure the external power is connected correctly and can supply enough? These kind of failures are often due to power stability problems. We recently had issue #273 on Sonoff which was resolved by connecting power correctly.\n\nEDIT: Ok I don't know why but I can upload my backup of the original sonoff bin file with :\nesptool.py --port COM7 --baud 115200 write_flash -fs 1MB -fm dio 0x00000 sonoff-backup.bin\n\nDoes this work every time?\nTry passing the write_flash --no-compress, and maybe turning baud rate all the way down to 9600, then flashing your new image. If this works, it's almost certainly a power issue.. FWIW, you can probably use the Arduino usb/serial if you pass --before none to disable the automatic reset behaviour. The Arduino serial firmware doesn't seem to work well with this option.\n. Thanks for pointing this out, will add documentation for this command.\nwrite_mem is for writing into the RAM of the device. It's mostly useful for loading small pieces of code that you want to run directly from IRAM. Not useful for general purposes.\nwrite_flash writes to the attached SPI flash, which is what most people want. The ESP doesn't really have a \"filesystem\" as such, esptool.py just sees the flash as a big range of binary data that it can read & write to. Some development environments may emulate filesystems on top of regions of the flash, but this is one layer higher than esptool's abstraction layer.\n. This is now documented in the \"Advanced Commands\" section of the wiki:\nhttps://github.com/espressif/esptool/wiki/Advanced-Commands#read_mem--write_mem\nThe documentation for write_flash has also been expanded:\nhttps://github.com/espressif/esptool#write-binary-data-to-flash-write_flash. Hi @ShakataGaNai ,\nSorry for the very slow reply. I've not heard of this WeMos hardware feature. Do you have any more information about it?\nThe schematic here https://wiki.wemos.cc/products:d1:d1_mini only shows one solder jumper which is RST<->GPIO16 (which is required for deep sleep to work).\nIf the jumper does bridge RST to GPIO0, this will prevent the ESP8266 from ever correctly entering the bootloader mode for use with esptool.py. This is because to do so RST needs to transition LOW->HIGH while GPIO0 is kept held low. You can read more about this here: https://github.com/espressif/esptool/wiki/ESP8266-Boot-Mode-Selection\n. Ah, my mistake I forgot that WeMos use their own numbering scheme so their \"D0\" is ESP8266 GPIO16. Sorry.\nLooking more closely at the trace data you provided, it looks like the device is going into bootloader mode correctly but the first byte of the response is being corrupted.\nI'll try to get hold of a WeMos D1 Mini to attempt to reproduce this myself.\n. Closing as this seems to be resolved.. It looks like your board is resetting into a normal boot mode, not the UART bootloader. There were some differences in power on reset between ESP32 r0 and r1.\nHow are you pulling GPIO0 low on reset? If you are using an automatic reset circuit, try adding some capacitance to the EN pin (so it rises slower when released by the serial control lines).\n. Yes, something like should help. Recent Espressif dev boards use a 100nF capacitor with a 10K pullup. Not in parallel, but both attached to the pin (capacitor is EN<->GND, Pullup is EN<->VCC).\nYou can find schematics on the Getting Started guides in the ESP-IDF docs: http://esp-idf.readthedocs.io/en/latest/hw-reference/modules-and-boards.html\nIn the past we've recommended higher value capacitors. There's no harm in having the EN pin rise more slowly, at least in the realm of a few extra milliseconds it won't make any difference.\n. Hi @CEStanley58 ,\nSorry for the slow response, I've been on leave.\nUsually these kind of intermittent problems point to hardware signal integrity or other issues.\nThe fact that it fails after setting 512000bps makes me think there may be a baud rate mismatch betwen the ESP32 and the USB/serial chip on the device. The WeMOS board probably has a CP2104 serial chip, which divides its baud rate from 48MHz. If you try 400000bps (an integer divisor of both 40MHz and 48MHz),  or the default 115200, does the problem go away?. Hi @CEStanley58 ,\nGood to hear, thanks. You may also want to try some lower multiples of 115200 - 230400, 460800 - and see if these still work reliably. There's a strong chance multiples of 100,000 will work with this particular board as well (maybe up to 900000 or more, depending on the hardware quality.). Hi @emeyedeejay,\nThanks for reporting this. The device is  suddenly failing while uploading the \"stub loader\" code into its IRAM. Usually this suggests a power supply problem or a signal integrity problem with the USB/serial connections.\nCheck all power and signal/ground connections to the device. You could try setting a lower baud rate (for example -b 9600) and see if the problem improves at all.\nAngus. Thanks for the update. Feel free to reopen if you think there's something esptool should be doing differently here.. Hi @sajink ,\nThanks for thinking of this point, I agree it's a good place to mention the need for drivers.\nI'm not sure about linking directly to SiLabs, because there are at least 4-5 different USB/serial vendors who make drivers for common chipsets. Maybe the README could suggest users check the Windows Device Manager for any devices with missing drivers, or something like this? \nAngus. Hi @stefaanv ,\nNot at the moment. However, you can emulate what ESP-IDF does by running miniterm.py immediately after esptool.py. For Linux & OS X this looks something like:\nesptool.py -p PORT -b 921600 write_flash (flash args) && miniterm.py -p PORT -b 115200\nFor Windows command prompt I think you should use & instead of &&.\n. Closing this as it's unlikely esptool.py will be extended will serial monitor functionality, rather than using miniterm.py directly.\nIf there's something which doesn't work with this usage pattern, please let us know and I'll reopen.. Hi @tim-nordell-nimbelink ,\nThis looks good. Adding --baud to espefuse.py seems fine, there are other conceivable (if rare) reasons someone may find a use for this, such as having a serial link which is unreliable at high baud rates.\nDo you need --before no_sync_no_reset to work in espefuse.py as well? If so, it might be time to refactor some of these common arguments out into a utility function in esptool.py, for espefuse to import.\nOne minor nitpack, I think I prefer no_reset_no_sync to the other way around, as the order of operations is reset-then-sync.\nThe only other thing is the CI PEP8 failures, from running the flake8 tool. You can click on the link above to see details.\n. Hi @tim-nordell-nimbelink ,\nSorry, I missed that you'd already made the change to espefuse.py in the commits before you left the comment. Will merge now.\nAngus. For the benefit of anyone reading this, there's a workaround to convert to hex documented on the wiki page:\nhttps://github.com/espressif/esptool/wiki/Serial-Protocol#tracing-esptoolpy-serial-communications\nBut I agree this would be a good feature to have in the dump output.. I've modified the wiki to say \"Response value used by READ_REG command (see below). Zero otherwise.\" for this field.\nI think the confusion about offets has been resolved as well (for those following at home: the Value field is always present, it's just zero most of the time. But #294 compounds this issue of knowing what is present in the Response packet.). Hi @nkolban,\nThanks for pointing this out. I've updated the wiki Response section to explain the difference:\nhttps://github.com/espressif/esptool/wiki/Serial-Protocol#response\n(Short version: status bytes are always two bytes when the software stub loader is running, only the ESP32 ROM sends 4 bytes of status.). Hi @Reiner1210,\nI agree this would be a good option for ESP-IDF \"make flash\". We would need to add this information to ESP-IDF, not esptool.py, because esptool.py doesn't know anything about partitions or OTA.\nI'm going to close this request, but please open it as a request on the esp-idf repo instead:\nhttps://github.com/espressif/esp-idf/issues\n. Hi @devanlai ,\nThanks for sending this. I ran the test suite on Linux and it also runs fine (I can't think of a way this would break something, but as we've seen here hardware driver behaviour can be deceptive...)\nBTW, if you're feeling enthusiastic then it would also be nice to add this workaround upstream in pyserial, it's probably the more appropriate place. Looks like a pretty straightforward change, here:\nhttps://github.com/pyserial/pyserial/blob/master/serial/serialwin32.py#L373\nBut I'm happy to merge this now. If a fix goes upstream and becomes available in a release of pyserial, we can roll this back then.\nAngus. Who knows, maybe Microsoft will fix it in the driver one day... :D. Closing as there doesn't seem to be an issue report here, just the template text.. Hi @JKTrowling ,\nThanks for providing those details. The trace indicates that no data at all was received from the ESP8266. Please check the following:\n\nCorrect serial connections https://github.com/espressif/esptool#serial-connections\nCorrect boot mode selection (see https://github.com/espressif/esptool/wiki/ESP8266-Boot-Mode-Selection) - you'll need to hold GPIO0 while pressing and releasing Reset, and then run esptool.py.\nTry the troubleshooting issues mentioned in the README: https://github.com/espressif/esptool#bootloader-wont-respond\n\nIf none of this works, it may be a hardware issue - I suggest talking to Adafruit.. Hi @PabloF7 ,\nIt looks like your serial stream may be being corrupted, probably due to some hardware problem. The \"full packet\" for a sync response normally looks like this: '\\x01\\x08\\x04\\x00\\x07\\x12 U\\x00\\x00\\x00\\x00' (ESP32) or this '\\x01\\x08\\x02\\x00\\x07\\x07\\x12 \\x00\\x00' (ESP8266).\nYour board seems to be replying with ''\\x08$\\x00\\x00\\x00\\x00\\x00\\x07\\x07\\x12 ' and then '\\x00\\x08$\\x00\\x00\\x00\\x00\\x00\\x07\\x07\\x12 UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU' which is similar but not the same...?. Hi @PabloF7 @coffee-cup \nIf you run esptool.py --baud 9600 ... to sync at a very low baudrate, does it start working? (If it does, this implies a physical signal integrity limitation with your serial connection.)\nAngus. Hi @theproxy ,\nYou have some different symptoms here to @JKTrowling , because it looks like some data is being read from your ESP8266 - it's just not what esptool is expecting to see.\nUsually this means the chip is not resetting into bootloader mode correctly. See here: https://github.com/espressif/esptool/#entering-the-bootloader\nAngus. Hi @RockfordWei ,\nThis looks like a different issue again, maybe something with the USB to Serial driver on your Mac. WriteTimeoutError means that the adapter hasn't allowed serial data to be written to it for longer than the timeout period (10 seconds). This basically never happens under normal conditions, the problem is either the OS-level driver is buggy or there's some problem with the USB connection to the device.\nAngus. @ice2hu Possibly also the device is not in the correct boot mode. Check the wiki at https://github.com/espressif/esptool/wiki/ESP8266-Boot-Mode-Selection about entering bootloader mode.\nI'm going to close this issue because the original reporter never provided any follow-up details, and the other traces posted here do not seem to be the same.\nEveryone: If you're having trouble connecting to your ESP8266 or ESP32, please check the troubleshooting list here. If it still doesn't work, and you can't find a 100% exact match for your situation in the open issues, then please open a new issue and provide all of the details asked for in the issue template. Thanks!. Thanks @andrewwakeling !. Hi @anupamb062 ,\nYou can use the read_flash command to read the flash contents, ie\nesptool.py -p PORT -b 921600 read_flash 0 0x400000 flash_dump.bin\nReplace 0x400000 above with the size of your flash, if different to 4MB.\nThis will read the entire contents of the flash. Use the write_flash command to write it back.\nTo read just a single partition (like the factory image), you'll need to determine the partition offset and size and pass these to read_flash instead. Usually this information is printed to the serial console by the bootloader.\n. If the device is running something based on ESP-IDF (AFAIK all ESP32 software environments are based on ESP-IDF in some way), it will have an ESP-IDF partition table on it:\nhttps://esp-idf.readthedocs.io/en/latest/api-guides/partition-tables.html\nesptool.py doesn't know about partitioning (it just sees the flash as a big array of bytes), but there is a tool in ESP-IDF that you can use to convert the binary partition data to a text-based summary (documented at the above link).. @anupamb062 If you miss one of these arguments then esptool.py will error out. Here it is on my computer:\n$ esptool.py -p /dev/ttyUSB0 -b 115200 read_flash 0x400000 flash_dump.bin\nusage: esptool read_flash [-h] [--spi-connection SPI_CONNECTION]\n                          [--no-progress]\n                          address size filename\nesptool read_flash: error: argument size: invalid arg_auto_int value: 'flash_dump.bin'. Hi @bootrino,\nThis is probably better asked over at https://github.com/espressif/arduino-esp32/issues/\nThis information is printed by esptool.py when any command is run, so you can probably see it in the Arduino IDE now when flashing an ESP32 (maybe you need to turn on Verbose Upload, I'm not sure?)\nIt's also printed when non-invasive commands like flash_id are run, so it should be possible to parse that output into Arduino IDE - but that work is outside the scope of esptool.py.\nAngus\n. Hi folks,\nI think the issue here may be that the flash is taking more than 120 seconds to erase. Some flash chips can take a while, we've had reports of a few models of \"ultra low power\" flash where erase & write operations are very slow.\nThe erase is probably completing OK, it's just that esptool.py has timed out waiting for it to happen.\n\nIf you re-run the same command on the same chip, does it pass then? (Usually the length of time needed for a chip erase is proportional to the number of unerased blocks in the chip).\nWhat hardware (dev board, module, etc) do you each have?\nCan you please post the output of esptool.py flash_id? If the flash chip is exposed on the board (not under an RF shielding can) then can you please read the part number off the top of it?\n\nThanks,\nAngus. Hi @dehart,\nThanks for the update. Reporting 0xFF for manufacturer & device id is an indication that the ESP8266 can't talk to the attached flash chip at all, it's sending commands and getting garbage back. Sometimes this can be because of power issues or because something is connected to the ESP8266 pins which are also wired to the flash chip (GPIOs 6-11).\nIf your development board is inserted in a breadboard or similar then you can remove it and see if anything changes.\nOtherwise, the hardware is probably faulty (flash chip is defective or not soldered correctly). Replacing is the best option if you don't feel like rework soldering it yourself.\nAngus. Hi @dehart ,\nOut of curiosity, when you read_flash do you get all 0xFF or 0x00 in the output, or is it correct data?\nThe top bridge in your photo looks like the WP and CS pins to the SPI flash chip, so this would explain flash interaction problems.\n(The bottom bridge in the photo is two 3.3V power pins so that's likely harmless.)\nIf you're going to scrap this anyway and you have some liquid flux and a soldering iron then you may be able to unbridge by applying some liquid flux to the bridge and then popping the iron on it (tinned but with no liquid solder on the tip) for 5 or so seconds. Those little bridges will sometimes pop right off with a bit of flux!\n. Good luck @dehart. :)\n@loadedtech do you think the issue you've reported may have the same root cause?. Hi @vinifr ,\nUnfortunately this is is an operating system level restriction. Linux doesn't reliably allow multiple programs to access the same serial port - in this case it's returning a \"Resource temporarily unavailable\" error when esptool tries to read from it.\nThere isn't anything we can do about this, except for request exclusive access to the serial port (which would mean esptool errors out earlier if minicom is open, but still wouldn't allow them both to use it at once). The configuration we have now does allow people to (sometimes) share the serial port successfully under some (poorly understood or defined) conditions, though.\n\nMinicom is open in /dev/ttyUSB0 as well for Debug.\n\nAre you looking to debug the program after it's flashed? You can write a command line like this for that:\nesptool.py -p /dev/ttyUSB0 write_flash (...) && minicom -D /dev/ttyUSB0 (...)\nWhich will flash and then run minicom immediately if flashing was successful.\nI'm a fan of \"miniterm.py\", which is bundled with the pyserial library that esptool uses. Miniterm doesn't open its own window when it runs:\nesptool.py -p /dev/ttyUSB0 write_flash blah && miniterm.py /dev/ttyUSB0 115200\n(To exit miniterm, type Ctrl-].)\n. What programs are you using to flash those two micros over serial?. Thanks for the update. It turns out neither of these configurations are flashing via the serial port itself. The programmer software is talking to a different programmer/debugger interface on the chip (STLINK for STM32 and ICDI for the TI chip) via a lower-level USB interface. The USB devices on the boards are \"Composite\", so they have the serial interface and the programmer interface in the same device.\nOn the other hand, esptool.py uses the serial port and nothing else to communicate.\nIt is possible to have a separate programmer for ESP32 as well, we have this on the ESP-WROVER-KIT and there are some third-party boards which also integrate JTAG adapters. However unfortunately we don't yet have support for flashing ESP32 via JTAG, only debugging. The flashing support is a work in progress.. Hi @jgehlsen ,\n\nGPIO4-11: output signal\nDoes this have anything to do with the GPIOs we are using or do I just have a bad board?\n\nYes. GPIOs 6-11 are all used for SPI flash connections. If your board is using a WROOM module then these connections are made internally to the on-module SPI flash. You can check the ESP32 Hardware Design Guidelines or ESP-WROOM-32 reference design for the details. (Both can be found here).\nIf nothing is connected to these pins but they are broken out on the board, check for shorts where the module or chip is soldered to the board.. Hi @max3l,\nIt looks like the flash chip connected to your ESP32 (inside the WROOM module) is no longer responding. This is usually because of a short or an external connection to GPIOs 6-11 (the SPI flash pins). Or possibly something is connected to GPIO12 and is pulling it high on reset. This sets 1.8V mode which will cause the WROOM internal flash to brown out.\nYour schematic doesn't show any connections to these pins, but maybe check the breakout PCB soldering for any shorts (they may not be visible if they're under the module, but a multimeter should be able to detect them). If the WROOM breakout is in a breadboard then try removing it from the breadboard, as breadboards can add a lot of capacitance to the signalling pins.\nBTW, the breakout adapter PCB you linked may cause problems with your ESP32 as it doesn't integrate any external power capacitors. The ESP-WROOM-32 module datasheet recommends 10uF + 0.1uF on a breakout board such as this (section Peripheral Schematics), but the breakout designers chose to leave this off.\nAngus. Hi Max,\nYou can take the RF can off the WROOM module and attach a SPI flash programming clip, while holding the WROOM module EN line low to keep the ESP32 from starting up. This is probably more trouble than it's worth, compared to swapping in a new WROOM and seeing if this fixes the problem!\nUnfortunately the usual way to check the flash chip via the ESP32 itself is to use esptool.py... and esptool.py indicates the ESP32 can't talk to it.\n. Hi @max3l ,\nDid you make any progress with this problem?\nAngus. Hi @FriendlyScientist,\nThanks for contributing this, this does sound like a very plausible cause.\nThese voltage efuses can be burned from the command line with the espefuse tool:\nhttps://github.com/espressif/esptool/wiki/espefuse#setting-flash-voltage-vdd_sdio\n. Closing due to inactivity.. Hi @Callahan93 ,\nThanks for the additional changes. I rebased your changes on master (to resolve the conflict) and squashed commits. The result has been cherry-picked as 6575a49.\nAngus. I know this wasn't your request, but I've added equivalent explanations for ESP32 here:\nhttps://github.com/espressif/esptool/wiki/ESP32-Boot-Mode-Selection#boot-mode-message\nESP8266 will be coming soon. :). Good idea, thanks!. Hi @MatthiasJentsch ,\nThanks for being patient while I got back to you.\nI think the underlying problem is that the stub loader doesn't respond to either autobauding or the sync packet which is used to establish the connection. Can fix the second thing but the first thing is tricky. \nYou should be able to use the new (in v2.4.0) --before no_reset_no_sync option, though. This option (with a matching baud rate) should just keep sending commands to the stub loader, as if esptool never left.\nAngus. Hi @bardhandebashree ,\n\nFull output from esptool.py (please copy and paste all lines of output)\nA fatal error occurred: Failed to connect to Espressif device: Invalid head of packet (0xF0)\n\nPlease copy and paste all lines of output from esptool.py.\n\nesptool.py v1.2.1Connecting\u2026Running Cesanta flasher stub\u2026Erasing flash (this may take a while)\u2026Erase took 0.9 seconds\n\nIt's not entirely clear to me what's happening here. Do you have a piece of hardware where esptool.py v1.2.1 currently works to erase but the esptool master branch is failing?\nThanks,\nAngus\n. Thanks for verifying that the Flash Download Tool doesn't work correctly either. This is useful information.\nHowever:\n\nPlease copy and paste all lines of output from esptool.py.. Hi @bardhandebashree ,\n\nHave you made any progress with this? If not, are you able to provide the information that I asked for in the comments above?\nAngus. Closing due to a lack of information.. Hi @abdollahpour ,\nJust to be sure I understand you correctly, the feature request is to be able to do something like:\nesptool.py -p PORT - b BAUD write_flash 0x0 https://some.web.site/someurl/image.bin\nIs that correct?\n. Thanks @cefn . Fixed via PR in master & the v2.4.0 release.. Hi @cefn ,\nThanks for sending this change. I hadn't really considered that someone might automate esptool by calling main() in a sequence, but until we have better API support I'm sure this allows some things which are not otherwise possible.\nThe only request I have is to move the .close() inside the check of if operation_args[0] == 'esp'. esp is not bound in the other path (this is why the pyflakes checks are failing in CI).. Hi @Cicero-MF ,\nSorry for the slow reply.\nThere is some info about flash options like size here:\nhttps://github.com/espressif/esptool#flash-modes\nWhen flashing to offset 0x0, the 8 byte header at the beginning of the image file is updated with some binary values depending on the flash size/mode/etc arguments (although the default is not to change them).\nSo if you flash with --flash-size 1MB and read back the flash, you'll see a different byte in the header near offset 0x0 compared to --flash-size 8MB.\nIf your OTA update is able to rewrite the binary at offset 0x0, you can write with --flash-size 4MB and then write the RF cal data as if it was a 4MB flash size.\nIf your OTA update is not able to rewrite the binary at offset 0x0, this header won't be changed and calibration will always look for the RF cal data as if it was a 512KB flash size.\n. Thanks @cefn :). Thanks @ildar , have updated the requirement.. Hi @ZoltanSzilagyiCse ,\nSorry, I'm not sure I understand the issue with esptool here.\nESP8285 is an Espressif WiFi MCU chip (first announced in 2016) and is supported by esptool.py.\n\nI flashed both version (the 1.0 and the 2.0 too)\n\nI'm not sure what this means. Espressif can't provide support for a third party's hardware design using Espressif chips. You'll need to talk to whoever produces the Magic Home product or firmware to get support - or maybe reverse engineer it yourself if no support is available.\nIf you think that esptool.py is not flashing the ESP8285 chip correctly, please let me know and I can reopen this issue. But this sounds like a firmware problem with this particular device's firmware (maybe the firmware you flashed is not compatible with ESP8285). I'm sorry but I can't help you with this.. Hi @papahabla ,\nThanks for reporting this.\nI think this may be same underlying cause as #320, the port argument being ignored (esptool v2.4.0 actually tries last serial port which is found, and aborts if this connection is unsuccessful - so in this case it may have been trying to sync with some other serial port). The only other difference in connection behaviour was number of connection attempts (2.3.1 made 10, 2.4.0 makes 7), but the log shows 2.3.1 succeeding on the second attempt.\nCould you please try the current master branch (v2.4.1-dev) and let me know if it fixes the problem? You can install via pip with pip install https://github.com/espressif/esptool.git.\n(If updating to v2.4.1-dev doesn't fix the issue, please re-run esptool.py v2.4.1-dev with --trace and post the log output.)\nAngus. (Note: V2.4.1 has been released so you can also update to the stable release via pip to check the behaviour.). Great to hear!. Thanks @nopdotcom . Looks like this did become broken in refactoring while reviewing the detection PR. Have committed a fix. If no further issues are seen then I'll release a v2.4.1 before end of the day.. (V2.4.1 has been released with this fix.). Hi,\nI think it should be possible to keep DTR asserted for the whole time while flashing, this only pulls IO0 low which shouldn't change anything in the flashing process. This long-standing behaviour though, so there might be some side effects I'm not thinking of right now.\nAngus\n. HI @qwerty12345asdf ,\nThanks for the comprehensive bug report and sorry for the inconvenience. There was a bug in v2.4.0 with port selection, fixed in v2.4.1 which was released on Monday. If you update to this release then it should work.\nIf you're still seeing problems with v2.4.1, please let me know and I'll reopen the issue.\n(See #320 for more details)\nAngus\n. Hi @qwerty12345asdf,\nThat's interesting, thanks. What's connected to COM7? If you run esptool.py --trace flash_id, what output do you get?\nAngus. > I noticed that the process is not complete as the cursor keeps blinking after executing the command.\nThanks. What I would expect to see here is some more ...___... type output, and then esptool moves to the next port after a few seconds.\n\nWhat driver/device is COM7 (internal motherboard COM, usb/serial adapter, something else?)\nIf you run esptool.py --port COM7 flash_id, is the behaviour any different?\n\nThanks again for the additional info,\nAngus\n. Ah OK, this is useful.\nI'm guessing the BT connection was stuck in some way (so the write to the serial port was hanging while the driver tried to establish the connection to the BT device) and now it's timed out or something and realised the connection is permanently down.\nI think two things need to happen here:\n Allow for serial port exceptions (like access denied) while scanning, so the scan continues.\n See if timeouts can be applied when writing to Windows serial ports (it's possible the driver is hanging internally, in which case we can't time out from the esptool end, but I'll take a look).\nThanks!. Hi @qwerty12345asdf ,\nThanks for your patience while I looked into this.\nSetting a write timeout on the serial port was added in #326 and is part of esptool v2.5.0.\nCorrectly handling serial port OSErrors while scanning has been added to master branch now, and will be in the next release.\nAngus. @marcelstoer Sorry for the slow reply. This should be fixed in v2.5.1 (just released).. Hi @jeremyherbert ,\nThanks for the detailed report. This looks like a variation on #136, where USB host stack timing and the \"auto reset circuit\" creates this short glitch on the IO0 line (when both DTR & RTS are momentarily asserted) which can trick an ESP32 into not booting into the bootloader correctly.\nWe fixed this on Espressif development boards by adding a capacitor to the EN line, so it rises slightly slower. The D32 Pro schematic indicates it also has such a capacitor (C4), but you could try increasing capacitance on this pin and see if it works around the issue. It may also be that the VMWare USB 2.0 host introduces enough additional USB latency that it's not possible to work around it with capacitance only.\nI'm going to close this as I don't think there's anything we can do about in esptool itself, but please let me know if you think there is something.. Hi @gojimmypi ,\nI'm glad you found a solution. The other way to do this is to create a virtualenv (dedicated Python install with only the modules you need), which can be separate from the OS Python.\nYou can read about virtualenvs here: https://virtualenv.pypa.io/en/stable/userguide/\nI personally use a lot of virtualenvs with a tool called direnv, which lets me automatically activate/deactivate each virtualenv depending on which directory I'm in.\n. Hi @Easydo1 ,\nDo you have any more details about the dev board you're using? Does it have a way to pull IO0 low (often a button labelled BOOT or similar?) If you hold this down, does it work?\nAngus. Hi @Easydo1 ,\n\nThe problem is that even reading the flash ID or the mac adres is not working. So the probkem must be more fundamental.\n\nThat's right. esptool is failing to connect to the ESP32 at all. It's trying to reset it into bootloader mode so it can talk to it, but it's failing to do so. Nothing will work if there's no communications channel to the chip.\nTry running esptool while holding down the \"IO0\" button and then press and release the \"EN\" button while esptool says \"Connecting...\" (continuing to hold down IO0 until a connection is made). This shouldn't be necessary if the automatic reset circuit is working properly, but this looks like an older unbranded development board so it may have some hardware issues.\nHi @aLoneStrider ,\n\nSame Problem here, working on ESP32 and getting exact same messages as @Easydo1 . @projectgus , there is no such button on the board.\n\nThe error itself is quite generic, it means that esptool is failing to get an initial response from the ESP32. The root cause may be different or the same. I'd need more details to give any other suggestions.\nPlease also take a look at the Troubleshooting section of the README: https://github.com/espressif/esptool#bootloader-wont-respond. @aLoneStrider What hardware are you using?.  @aLoneStrider The issue was closed by @Easydo1 as they got their board working.\nI think that despite similar symptoms the issue you're seeing is different and any fix will be different. The best thing to do is to open a new issue and provide more details there. If you can please provide the full output from --trace in a failing connection (rather than a screenshot of the top lines), this would be very helpful.. Thanks @heyinling !. Hi @markaaronky,\nThanks for contacting us, sorry esptool isn't working for you.\n\nNo matching distribution found for esptool\n\nThat's unusual. esptool certainly should be available in a default pip install (the project is here). Was your internet connection maybe down or misbehaving at the time you were running pip?\nIf you try pip install esptool again and it's still not working, can you please try running pip -v install esptool and then copy-paste the entire output from pip into this issue.\n\nThe original error message complained that the requirement \"pyserial>=3\" wasn't met. I'm on an older Mac, I assume this is referring to the type/speed of the USB port I'm using. I changed the requirement from 3 to 2; still get a failure.\n\nNot exactly. There's a Python library called pyserial that esptool relies on, and it needs version 3.0 or newer of this library. The pyserial version numbers don't relate to USB 2.0 vs USB 3.0 at all, that's an (unfortunate) coincidence.\nesptool won't correctly if pyserial isn't version 3.0 or newer.\n(pip install esptool should automatically fetch the dependencies of esptool from pypi, notice that esptool requires pyserial 3.x, and then download and install pyserial from pypi. But if the pyserial install fails due to the same pip issue, you might get an error that the install couldn't proceed.)\n. @markaaronky Did you make any progress with this issue?. @SabeehY Glad you found a resolution.\nClosing due to a lack of replies from the original reporter.. > You are using pip version 6.1.1, however version 18.1 is available.\nI think you probably have the same issue as SabeehY (above) where the version of pip is so old it can't verify the pypi archive server TLS certificate is valid any more.\nSuggest trying the command posted by SabeehY above, or research another way to update pip on Yosemite.. You seem to maybe have a local pip install in your user directory, and a system-wide one. You can confirm by running which pip.\nTry pip --user --upgrade (no sudo) to upgrade the user-specific one.. If you type which pip, you'll probably find that there is a system-wide pip which is being run before the local one you just installed.\nTo preference the local one, put it first in the PATH list - ie:\nexport PATH=/Users/vincentnicolas/Library/Python/2.7/bin:$PATH. Hi @shivam5594,\nCan you give some more details about your custom hardware setup, please? A schematic and/or a photo would be the best.\nTo reword what you have given above in terms of the \"--trace\" log, a correct sync response from an ESP32 should look like this:\nTRACE +0.000 Full packet: b'\\x01\\x08\\x04\\x00\\x07\\x12 U\\x00\\x00\\x00\\x00'\nThe responses in the attached trace log are varied, but the longest is this:\nTRACE +0.000 Full packet: b'\\x01\\x08\\x04\\x07\\x07\\x12 '\nWith lots of variations where some other bytes in that sequence are randomly missing. This makes me think there is one of:\n\nPhysical signal integrity problem with the connection between the USB/serial chip and the ESP32, causing it to see framing errors (corrupt data on the wire) and drop those bytes.\nYou can try passing esptool.py -b 9600 ... to sync at a much lower baud rate, and see if this helps.\nDoes the Saleae logic analyzer software report any framing errors?\nDo you have an oscilloscope you can use to look at the serial traffic as an analog signal?\nSome driver problem is causing the USB/serial chip to drop bytes. I've never seen this before, but you haven't said what hardware you're using - if it's something very unusual then this might explain it.\n\nBTW, small tip, if you update esptool to v2.4.1 then the --trace output is much more readable in this newest version. :)\n. Hi @shivam5594 ,\nIt seems like the unusual factor is the USB/serial converter.\nIf you check the logic analyzer captures, do you see the exact same bytes for RX/TX that you see in the trace log from esptool?\n. >     I think it is same but still I have attached both files here.\nIt's hard to read in a PDF format, but it seems like a lot of data is being lost in the conversion to USB.\nie the sync response on the \"TX\" capture in op_analyzer_tx.pdf is this:\n'192' (0xc0)\n'1'\n'8'\n'4'\n'0'\n'7'\n'7'\n'18' (0x12)\nU (0x55)\n'0'\n'0'\n'0'\n'0'\n'192' (0xc0)\n(Hex annotations by me)\nAnd all of the responses in the \"TX\" side of the capture seem to be this exact sequence of bytes, repeated. This is a correct sync response from the ESP32.\nHowever, the esptool.py trace output in op.txt says it receives the following bytes over USB:\nTRACE +0.000 Read 1 bytes: b'\\xc0'\nTRACE +0.000 Read 1 bytes: b'\\x01'\nTRACE +0.000 Read 1 bytes: b'\\x07'\nTRACE +0.000 Read 1 bytes: b'\\x07'\nTRACE +0.000 Read 1 bytes: b'\\x12'\nTRACE +0.000 Read 1 bytes: b'\\xc0'\nTRACE +0.000 Full packet: b'\\x01\\x07\\x07\\x12'\n(And different random variations of this.)\nThis is not the same sequence of bytes. All of these individual single bytes are present in the TX capture, but a lot of other bytes have been lost somewhere. Hence, esptool can't parse the response.\nI'm going to close this as it seems to be a bug in the PSoC5 USB to UART firmware running on the chip. Suggest connecting the PSoC5 to something else (like a different USB/serial chip) and doing some tests in a serial program until it can loop data back without dropping bytes. (Note that manually typing characters in a terminal program may not be enough to test it, you need to try and send bytes via the interface at the maximum speed allowed by the baud rate.)\nAngus. Thanks @ekiro!. That is an ESP-IDF ESP32 bootloader. The test/images/ directory contains binaries for running esptool.py tests, they are not suitable for any other purpose.\nThere are different flash-resident bootloaders for different ESP8266 SDK environments. Suggest looking for the bootloader which is bundled with whatever SDK you are using for your firmware.. Hi @c1r2t3,\nThanks for bringing this up. This is deliberate use of the line-feed character so that the \"Writing...\" line will keep overwriting itself on the same line, rather than producing many lines of output.\nHere's an example of it working as expected: https://asciinema.org/a/QTCOOaKnAKYkJ2vuo6CZifi2a\nIs there a platform where this doesn't work as expected?\n(I have noticed it can cause some funny output when esptool is redirected to a file. It may be possible to disable it when output is not a TTY, although I don't know how this behaves on Windows.). Hi @amitkray31 ,\nWhat USB/serial interface chip are you using? It seems like the Linux driver doesn't support setting DTR.\nIf you try esptool.py --before no_reset --after no_reset ..., is the output any different?. This might be a bug due to the high compression ratio it's timing out waiting for the ESP to finish:\n\nDid the flash succeed despite the error?\nTry adding the --no-compress option after write_flash\n. HI @XiaofanLii,\n\nThis is an operating system level error that indicates some problem with the driver talking to the chip. It may indicate a problem with the USB connection, the port is resetting or otherwise failing to communicate. Suggest double checking the port name is correct, and swapping the USB cable and port to see if either of these are faulty.\nAre you using a development board? If not, how is everything wired up?\n. Hi @XiaofanLii ,\nAre you closing because you resolved this problem? CP2102 & CH340 should both work with esptool.py on Mac OS.. Hi,\nThe \"EEPROM\" library in Arduino uses the SPI flash contents, but it reads the SPI flash via the flash access cache (MMU) which maps a chunk of flash into the address space, where it can be read like RAM. This is where this memory address 0x405fb000 comes from.\nWhen esptool.py runs it doesn't use the flash cache, so you can't read flash by doing simple memory reads.\nThe flash cache maps the physical flash into the address space at offset 0x40200000. So you can find the physical address in the flash chip via (0x405fb000 - 0x40200000 = 0x3fb000).\nYou should be able to dump this physical address from the chip to a file using the read_flash command:\nesptool.py -p PORT -b 230400 read_flash 0x3fb000 0x1000 eeprom.bin\n(Note I used 0x1000 as an arbitrary size to read, you'll have to check the ESP8266 Arduino library to know how large the EEPROM region actually is, the storage on the flash may be different to the storage size specified in EEPROM.begin(), to account for the flash needing to be erased each time it is changed.)\n. Closing due to inactivity, and as this does not appear to be an esptool issue.. Hi @defworx ,\nUnfortunately it sounds like you may have faulty hardware. To be extra sure, please double-check the serial port and then run esptool.py -p (port) --trace flash_id. Try pressing and holding the FLASH button then pressing and releasing the RST button while it is trying to connect (keep the FLASH button held down the whole time). Then copy and paste the output into this issue.. Thanks @orangecms ! :). Hi @loader-bsd ,\nThanks for getting in touch. I deliberately left this out because most users (rather than developers) of esptool won't need to use it, and it significantly increases the size of the package (because of all the binary images). May I ask why you need it in the package?\n. Hi @borro0 ,\nThis seems like quite a common use case for people using esptool (which is reasonable, as the other classes exposed in the esptool module don't offer the full functionality et.)\nWould you be able to send a GitHub pull request with your modifications, please?\n. Sorry for the long time addressing this. Cherry-picked with commits linked above, with some minor tweaks:\n\nChanged the way address/offset pairs are cleaned up, so it's done from main() only. If callers of specific module functions have opened these files, they're responsible for closing them (and they may not want to, for example if the file is an IOStream).\nChanged main() so it can still be called as main() (to use sys.argv) or main(xyz) (to use xyz)\n\nStill want to devote some time to improving the Python-level API. Maybe for v3.0 (as may will break some of the people relying on the current not-very-nice API.). Hi @sachin0x18 ,\nI think this is a signal integrity issue (although it might be something with the FTDI chip or the driver). I'm able to reproduce this on Linux with a WROVER-KIT at 5Mbaud but not 2Mbaud - writing small amounts of data works at 5Mbaud speed but reading fails.\nThe symptom shown in the trace above is that the ESP32 sends a 0x1000 byte SLIP frame but esptool.py only reads 0xfc8 (0x38 bytes are lost somewhere in transit). As I said, I think this is most likely a signal integrity issue, some bytes are invalid on the wire and the FTDI chip is dropping them.\nI've added an immediate error in the case where the SLIP frame length looks wrong when received, so it will error out if this happens. I don't think there's any viable way to work around this in esptool.py.\n. Closing as it seems like this a hardware-level issue, and the best thing esptool can do for now is error out.. Hi @gitAnuj1234 ,\nThanks for reporting this issue. I think this might be a PATH issue with your install.\nIf you run \"pip\" as a normal user on Linux (ie pip install esptool rather than sudo pip install esptool then the esptool.py executable is installed to the directory ~/local/.bin directory (ie the hidden .local/bin directory inside your home directory).\nIn a default Ubuntu install, this directory is normally part of your user's PATH (there's a line in .profile which adds it).  Maybe the .profile file or the PATH has been modified on your install.\nSome workarounds, either of which should which should work:\n\nRun esptool.py as ~/.local/bin/esptool.py -p /dev/ttyUSB0 ...\nEdit the .profile file in your home directory and look for a line like this:\n```\n\nset PATH so it includes user's private bin directories\nPATH=\"$HOME/bin:$HOME/.local/bin:$PATH\"\n``\n   ... and add it if it's not already there (note you have to log out of your session and back in before changes to .profile take effect).\n. Great to hear @gitAnuj1234, thanks for the update.. @marcelstoer You're too quick for me. It can indeed, cherry-picked as 822112b (small tweak: used a hyphen instead of an underscore for--erase-all`. Eventually I want to standardize on hyphens for all commands and options, probably as a breaking change in v3.0).\nThere are probably some optimisations possible with this option, at least with the stub, because sending \"Sector Erase\"/\"Block Erase\" commands are redundant if we know the whole chip is already erased. But this is fine for now (and sector erases take less time when the chip is erased, so the performance hit is not as bad as it could be!).. Hi @rakean989,\nIf you don't want to reset via RTS then pass the option esptool.py --after none ....\nDoes that answer your question? If not, please provide some details.\n. Closing as it seems the question was answered.. Looks like you posted the same question on the ESP32 forums:\nhttps://esp32.com/viewtopic.php?f=13&t=6809\nI've replied to you there, so I'm going to close this issue (as it's more related to ESP-IDF & ESP32 than to esptool).. Hi @fejess ,\nThis seems like maybe it's an Issue with platform.io rather than an Issue with esptool.py? The \"How to Solve this Problem\" is given as pip install esptool, which is also how the esptool.py README recommends to install esptool.\nI'm going to close this as, despite containing a lot of good advice, it seems like nothing specific which needs fixing in esptool.py itself or the esptool.py docs. If you think there is something which needs fixing here, please let me know.\nIf platform.io isn't telling users to install pyserial 3.0 or newer (the root cause of the \"serial.tools.list_ports ImportError discussed in #350), then please report this to platform.io project as a bug.\n. > > If platform.io isn't telling users to install pyserial 3.0\n\n@projectgus should we do that?\nPlatformIO is a 1-click solution, no need to install make, cmake, Python packages or other extra tools.\n\n@ivankravets I don't know specifically how you manage dependencies internally to platform.io, but to work correctly you'll need to make sure users get pyserial>=3.0 The pyserial>=3.0 requirement is part of the esptool package metadata:\nhttps://github.com/espressif/esptool/blob/master/setup.py#L109\nAnd it's explicitly mentioned in the (legacy) manual install instructions.\nesptool.py will not work properly with pyserial 2.x.. Hi @nixmeer @eliyastein ,\nThanks for being patient while someone got back to you.\nI think in both cases the version of pyserial which is installed is too old, and doesn't have serial.tools.list_ports module.\nYou should be able to fix this by running pip install pyserial, or re-installing esptool with pip install esptool.\nI'll add a version check in the top of esptool.py, so the error is clearer.. Hi @vinayprydotinfotech,\n(For the record: NodeMCU ships quite an old version of esptool (v1.2-dev) plus some custom modifications.)\nIf you run /usr/bin/env python (which is the Python interpreter used by the esptool.py script in NodeMCU), is it version 3.6? (Use control-d to exit.)\nAs it's ubuntu, installing the native PySerial with sudo apt-get install python3-serial may help.. > Anaconda 4.3.\nYou seem to have Python installed via \"Anaconda\" in addition to (or instead of) the system Python. This is why 'pip' and system Python packages aren't working. You can try something like this to install pyserial under the \"conda\" package manager for Anaconda:\nhttps://pyserial.readthedocs.io/en/latest/pyserial.html#from-conda\n. @marcelstoer Thanks for being patient while one of us got to this.\nI was able to reproduce and create a test case (see commit) so I'm pretty sure this is fixed now, but please ping if you're still experiencing problems.. @marcelstoer Awesome! This week, I hope.. Hi @vgonet ,\nThanks for being patient while someone got back to you.\nThe error indicates that the ESP32 thought the memory write packet was malformed in some way. The fact that it reads back one byte at a time (different to all previous responses) seems to indicate some unusual timing with the USB/serial interface, is it possible the STM32F0 might be introducing some delays?\nAngus. @adamglowacki  https://github.com/espressif/esptool/wiki/Serial-Protocol#rom-loader-error-codes\n. Hi @vel2000 ,\nThanks for being patient while I got back to you. Can you please try adding the --trace argument, ie:\nesptool.py --trace --port COM5 -b 115200 read_flash 0 0x100000 firmware.bin. Thanks for the update, @lev2k.\n. What ESP8266 based piece of hardware are you using?. Yes, FTDI chips' onboard regulators do not provide enough current to power an ESP8266. This is mentioned in the troubleshooting guide: https://github.com/espressif/esptool/#power-supply-rating. Hi @Bigun ,\nESP8266 doesn't have user-settable efuses, so it's simpler in this case.\nThe symptoms you have indicate that the ESP8266 can't communicate with its attached SPI flash chip. The fix may be as simple as resoldering the chip on board, or finding a short on the GPIOs which are attached to the flash chip on the board. If it's an ESP-12E module and it's previously worked then I would suggest checking the pads of the module for shorts or unexpected connections.\nOr you can purchase a new ESP-12E module (Espressif don't make these, but they're available from many online electronics vendors.)\nAs this is not an issue with esptool itself, I'm going to close this issue.\nAngus. HI @GPL71 ,\nI'm not sure I understand the question.\nIf you place all the .bin files in the same directory and run esptool.py while in this directory, then you can flash.\n. Hi @GPL71 ,\nThanks for being patient while I got back to you.\nIf you install esptool.py via pip then it should already be on your PATH. So you can run it from any directory. You just have to use the terminal to change directory into the directory which contains your .bin files.\nAs this is a question rather than an issue with esptool, I'm going to close it. A good place to ask this kind of question is https://bbs.espressif.com or the https://esp8266.com community forum.. Closing as it seems like this is resolved.. Hi @cyberman54 ,\nInteresting suggestion. Do you have any technical information on how this works?\nAngus. Hi @CaptainMiddle,\nSorry for the delayed response. This looks like a bug in the ESP8266 AT firmware that you're using, rather than esptool. esptool seems to be reading the hardware's MAC correctly.\nThe MAC address burned into hardware (which is read by esptool) cannot be changed. However, firmware can allow overriding this MAC with any other value, so if the AT command is reporting an incorrect value then this is probably why.\nSome ideas:\n There is a newer version of the ESP8266 AT firmware (1.7.0) available here.\n You can try doing esptool.py erase_flash before re-flashing the firmware, in case there is some other old \ndata in the flash somewhere which is causing the AT firmware to read invalid data.\n* If it's still not working, suggest asking for assistance on the ESP8266 forum: https://bbs.espressif.com/\n. Hi @mimansamaheshwari ,\nSorry for the slow response.\nIt looks like the serial connection to the CH340G is corrupt or noisy. I'd suggest checking the U0TXD pin of the ESP32 with an oscilloscope. And also making sure both chips are correctly powered and well connected to a common ground.\nThis output is all printed by ESP32 ROM code, so there's nothing that esptool or any other software tool can do to remove the corruption.\nAngus. OK, I'm going to close this issue then.\n. Hi @Ralim,\nTo make sure I understand your post: you're not using esptool.py at all but you've written some microcontroller firmware to speak the flashing protocol?\nThe esptool.py source code (including the flasher stub source) and this wiki page are the best resources to refer to. Have you read the checksum section on that page?\nIs the length field being set correctly?\nProbably the best advice I can give is to find a way to have your code produce the same data packet as esptool.py (maybe flash the same data?), and then compare the protocol level output.\n\nNon-stub also gives an error, but you still have not uploaded the ROM error codes so this is of little help.\n\nHonestly, I haven't done this because the ROM codes are not really very informative, I can't remember ever looking them up.\nBut I've just put them up here: https://github.com/espressif/esptool/wiki/Serial-Protocol#rom-loader-error-codes\nAngus. > I've also found that changing the baud rate is very sensitive (cant seem to go higher than 115200) without the ESP stopping responding to packets entirely, is there an interaction between using two ESP32's that I could be missing here ? (the flasher is set to fixed cpu frequency, without dynamic scaling).\nUsing uart1 with ref_tick so I thought that the baud rate should be fairly accurate?\nThis implies maybe there's some signal integrity or baudrate mismatch problem, which could explain the checksum problem as well.\n\nDo you see framing errors in the logic analyzer?\nIf you look on oscilloscope, do you see any noise in the UART signal?\nHow are you synchronizing baud rate between the two, does your code send the same SYNC packets as esptool.py (which triggers auto-bauding behaviour in the ROM loader)? Do you send the \"Set baud rate\" command to the stub, like esptool.py does? (this should set a new baud rate, based on the previously automatic synced rate as a calibration factor.)\nIf you drop the baud rate to something very low like 9600bps, does anything start succeeding?. That all sounds pretty reasonable to me... Have you checked the logic analyzer captures matches byte for byte what the firmware is sending?. > I have checked, and as far as I could spot it seemed to match (Hard to check all 16kb, but the first and last 512 definitely matched).\n\nIf you shrink the minimum data size, you can check the first flash data command at least?\nActually, that's something: Does the flashing fail on the first flash data command, or some later command? Does it always fail at the same place.\n\nAny idea how accurate the ESP32 UART is when in the bootloader ?\n\nShort answer: pretty accurate.\nAuto-bauding works pretty reliably at low speeds (less than 230400 or 460800). It's a little less reliable at very high speeds, which is why esptool.py autobauds at 115200 and then scales up.\nThe ESP32 ROM code estimates the crystal frequency using an internal RC oscillator, so it can sometimes set the wrong baud rate if the \"set baud rate\" command is sent to ROM code. This is not really a problem for low speeds either, but it can be flaky in the >1Mbaud range.\nTo get around this, the software loader assumes auto-baud is more reliable than crystal baud rate detection so it scales up the new baud rate based on whatever clock divider is currently in use for 115200 (based on auto-bauding). This is generally more reliable at higher baud rates.\nBut any of these approaches should be sufficient at the baud rates you're talking about.\n. @Ralim Glad you figured out the missing detail.\n\nfound that when flashing from the ESP32, had to have dynamic power control disabled at core at 160MHz for it to maintain the baud rate correctly.\n\nDo you mean dynamic frequency scaling? When this is enabled, the UART source clock is changed to REF_TICK which is a constant 1MHz clock, so baud rates will be divided from that master frequency rather than APB frequency ( which is 80MHz when DFS is not enabled, and variable when DFS is enabled).\nUsing REF_TICK can limit the full range of available baud rates. What were the baud rate(s) with problems? Still anything higher than 115200?. Good to hear you found the root cause.. Hi @Andermutu,\nGPIOs 6-11 are shared with the internal SPI flash of the module. Consult the ESP32-WROOM datasheet for more details.\nThere are also some strapping pins which can control the boot mode. Although from the UART log, it looks like the boot mode was correctly selected. For more details on strapping pins, see ESP32 Datasheet section \"Strapping Pins\" or this wiki page.\nI can't explain why any of these would cause the module to boot into UART download mode and then produce noise output - maybe this is actually an electrical problem of some kind? Is the power supply stable and correct power supply capacitors are in place on the PCB?\nIt doesn't seem like the underlying issue is a problem with esptool.py, so I'm going to close this issue. If you have more questions about wiring up a WROOM module, the https://esp32.com forums are a great place to ask questions.\n. Merged as 0e26346.. Hi @mau-lopez ,\nThanks for being patient while someone looked into this. The root cause was Python 3 compatibility, and it should be fixed in master branch now. Release ot come soon.\nAngus. Hi @LaurentLouf ,\nSorry for the slow response to your suggestion.\nI think there's no reason this couldn't work. The thing to establish is how useful such a feature would be. Every new option makes esptool.py a bit harder to use, and every new feature makes the codebase a little bit more complex to maintain. So before adding a feature it's important to establish how useful it will be, to how many people - and then decide if this tradeoff is beneficial.\nI'm a little surprised that the time esptool needs to compress the binary image is a significant performance hit on Raspberry Pi. Do you have any benchmarks for the performance of zlib compression on a Pi?\nThanks,\nAngus. Thinking about this some more, esptool currently uses the slowest (max compression) option of zlib (level 9) because of an assumption that serial transfer will always be more expensive than compression/decompression.\nIf you have a Pi handy, can you please run the following commands in a terminal and post the output:\n```\ntime dd if=/dev/zero bs=4M count=1 | gzip -9 -c | dd of=/dev/null\ntime dd if=/dev/urandom bs=4M count=1 | gzip -9 -c | dd of=/dev/null\ntime dd if=/dev/zero bs=4M count=1 | gzip -6 -c | dd of=/dev/null\ntime dd if=/dev/urandom bs=4M count=1 | gzip -6 -c | dd of=/dev/null\ntime dd if=/dev/zero bs=4M count=1 | gzip -3 -c | dd of=/dev/null\ntime dd if=/dev/urandom bs=4M count=1 | gzip -3 -c | dd of=/dev/null\n```. OK, I hope you figure out what the bottleneck is/was.. Thanks for reporting this, @sbertrand-witekio , so I didn't reply earlier. Issue was in Python 3 compatibility and should be fixed now.. Hi @jegajith ,\nesptool is a serial flashing tool, so it can't do any kind of OTA updating.\nYou haven't said what chip (ESP8266 or ESP32) you are using and which software framework, but in general this is not supported - there's only copy of the bootloader, and updating the bootloader requires erasing and then re-writing it. If a power failure or a crash occurs in the middle of this process, the device will be bricked until a physical reflash (with esptool.py or similar) can be done.\nIf you have more questions about this, good places to post are https://esp32.com (for ESP-IDF and ESP32 Arduino) and https://bbs.espressif.com (for ESP8266 official SDKs). If you're using a different SDK, they probably have a discussion forum as well.\nAngus. Hi @DinoMesina ,\nIt looks like the ESP32 is failing part way through the flash for some reason. Looking at the photos of the PCB on Tindie, it looks like the creator hasn't followed the ESP32-WROVER guidelines (from the ESP32-WROVER datasheet) regarding placement of capacitors for the power supply. It's possible the ESP32 is browning out during the flash. Or it could be some other issue with the power supply (USB cable, USB port, etc.)\nYou could try flashing at a lower baud rate (maybe 115200bps) and see if things succeed then.\n@EsdrasXavier Your log shows the same final error message, but the ESP32 is failing at a different stage of flashing. Suggest following each of the steps here - https://github.com/espressif/esptool/#bootloader-wont-respond - if you still get this error afterwards then please open a new issue.\nAngus. Great, good to hear @DinoMesina ! Suggest forwarding this feedback to the board designer, as well.\n. Hi @snahmad,\nI think this is the forum issue you posted here:\nhttps://esp32.com/viewtopic.php?f=13&t=8119\nand the same root cause as here:\nhttps://github.com/espressif/esp-idf/issues/2727\nThe root cause is not in esptool (and seems to be fixed), although the bad error message is coming from esptool (fixed in 8a288e27c71868e9f18979ad428a954df582838d).\n. Hi @ForceFedDSM ,\n\nImportError: No module named serial.tools.list_ports\nWhen running \u201cpython -m serial.tools.list_ports\u201d , I get a response of COM5, 1 ports found\n\nIs it possible a different Python interpreter is running when you run esptool.py, compared to running python directly?\nYou can check this by trying python esptool.py -p PORT erase_flash which will should use the same interpreter as python -m serial.tools.list_ports.\nThe root case is a pyserial version earlier than v3.0, which shouldn't be there if esptool is installed via pip but might be the case if there is a second python installation hiding somewhere, which is running sometimes. See also #350, #348.\n. Hi @davydnorris ,\nIt looks like what happened in the first case is that flashing failed part way through. The \"bricking\"/garbage in this case is probably the partially flashed binary loading and then crashing in some unexpected way.\nI noticed that you had baud rate 230400 set with esptool.py. If you flash with -b 115200 or even -b 9600, do you have a higher success rate?\nAngus. Thanks for the update. I must say I don't really have any idea what's going on with your board, this all seems weird.\nOne thing to note is that is really shouldn't be technically possible to \"brick\" an ESP8266 in a way which esptool can't recover from - esptool starts by talking to mask ROM code, nothing in the flash at reset-time can change this.\nThere is an uncommon but known bug (#193, #351) where if the RTC WDT period is set to too short of a timeout, or the device is in deep sleep, this isn't cleared by a normal reset and can require a power cycle to restore it. Maybe this is a case of this (if the NodeMCU firmware sets the RTC WDT or is going to deep sleep for some reason).\nTo test this theory:\n\nRemove USB power entirely (ie unplug the cable) for a second or two\nHold down the FLASH button on the NodeMCU board while power is disconnected.\nReconnect USB power while still holding the FLASH button down.\nRun an esptool.py command. You can release the FLASH button after the \"Connecting...\" stage is finished.\n\n. The flash chip info is read from the hardware (by sending SPI flash commands to the chip), so nothing in the flash will affect this.\nWhen you say \"hard reset\", did you power cycle the chip while holding the FLASH button, as described? This is the only way to be sure it doesn't run any code from flash after power is re-established.\nIs anything connected to the module which could be interfering with the SPI flash signals (GPIOs 6-11)? \n. Can you please try the power cycle steps with FLASH held down with one of the boards on your bench? I understand that you're no longer going into deep sleep from your firmware, but it would be good to absolutely rule out any code in the flash from having a bearing on the problem.\nAlso, do you have any other computers you can test esptool.py on?. If you use the --no-stub option to esptool.py does the problem go away? This was reported as a workaround for other deep sleep issues.. The --baud option should still work for --no-stub, it just works in a different way (the initial sync happens at the target baud rate, whereas with the stub the initial sync happens at 115200bps and then the stub changes the baud rate after it's running. This is more reliable at higher baud rates.)\n(If you don't use the --baud option then the baud rate will be 115200, regardless of other OS-level settings.)\nThe ROM flasher is slower than the stub flasher in a number of ways, so this may explain the overall reduced performance.. @davydnorris I'm pretty sure the fix for the deep sleep issue will also fix the problems you're seeing. Could you please pull the latest master branch and try to reproduce? Thanks.. PS Yes sorry I was wrong about the baud rate behaviour with --no-stub - on ESP8266 it's always 115200 if --no-stub is set.. Hi @lemonbuzz @gbdb ,\nThanks for the comprehensive bug report and details.\nThe log shows that esptool is sending a lot of \"sync\" messages to the ESP32, but absolutely no response is received in the opposite direction.\nGiven you can see the \"waiting for download\" message, we know the correct download mode is being established and that communication from the ESP32 to the FT232R is working correctly.\nThe most likely explanation I can come up with is that communication in the opposite direction is not getting through, so the messages sent by esptool are never being received.\nThis may be because of a connection issue (short, cold solder joint) with the U0RXD pin of the module. If you put an oscilloscope probe on this pad of the WROOM, do you see the serial communications received correctly? (There will be a lot of square waves because of the 0x55 'U' being sent).\n. Great to hear :). Thanks for the heads-up, @markfink . I've transferred this over to the esptool repo as it'll be fixed here.\nAngus. Thanks for posintg all this detail. I see the problem and the (reasonable) desire for a solution. Unfortunately I don't believe there's any clean way to fix this.\nIt is possible, I think, to comply to the RFC2217 spec by sending multiple \"Set DTR Signal State\" or \"Set RTS Signal State\" commands in a sequence without waiting for RFC2217 layer ACKs for each one (or at least, deferring the ACK check until after a sequence of requests have been sent). But this isn't how the pyserial library does this now, and it's not an easy modification to make.\nEven batching commands like this still doesn't guarantee they are processed on the server in a short enough time window for auto-reset to work. There's potential latency is introduced by the TCP layer, which could fragment the request - although it probably won't. Plus the RFC server  will introduce latency (processing each command in sequence, sending an ACK, any logging, etc.)\nI don't see an RFC2217 command which can set DTR & RTS in a single command, which is what would be best.\nThere's also no way in the pyserial API to set DTR & RTS in a single function call, they have to be set independently in two calls. This is already a limitation on some Windows systems and VMs where the latency between the two function calls can be too high for correct auto-reset timing, that's on a fully local system with no network processing overhead.\nForking pyserial into esptool to add these kind of features is not really viable.\nThe one method which is guaranteed to work, even with the current latency-rich processing setup, is to remove the auto-reset circuit from the target board and wire RTS & DTR directly to EN & GPIO0. (Normal serial programs will then hold the board in reset unless RTS is disabled, but auto-flashing will work.). Nice, I'm glad you got this to work!\nProbably this is a not a solution we can adopt in esptool.py, but having it out there may come in very useful for others.. Hi @RockfordWei ,\nWhat USB/serial hardware do you have?\nThe write timeout is set at 10 seconds to detect stuck or misbehaving OS-level drivers. (The command is only writing 6547 bytes which should take less than half a second at 115200bps, so a ten second timeout indicates something went badly wrong and it would have hung forever otherwise.)\nSuggest checking if there is an update available for the macOS serial driver of whatever USB/serial chip is in use.\nAngus. @RockfordWei If you connect the USB device via the VM then it uses the VM guest's USB to serial driver (Windows driver for Windows guest, Linux driver for Ubuntu guest.) So I would suggest the problem is the interaction between the macOS USB serial driver and the USB device.\nAn EFM32 microcontroller CDC device is not something I've come across before. As this is a microcontroller, there may be a bug in the EFM32 firmware which is triggered by the USB CDC driver in macOS (USB CDC is a common standard, so there's one driver for all CDC devices. The EFM32 will be running a firmware which causes it to be a USB CDC device. It's hard to tell who wrote this firmware and if it has any bugs.)\nWhat hardware is this that uses the EFM32 as a serial interface?. USB CDC is a common standard so there's no alternative driver for a given platform.\nIf the micro is running your own custom firmware, I'm afraid you'll need to debug this yourself - something the firmware is doing is probably causing the macOS CDC driver to think the port is unavailable, and stalling the write at the OS level. There's nothing that can be done about this from the esptool or pyserial side.. This is the flash protocol:\nhttps://github.com/espressif/esptool/wiki/Serial-Protocol\nYou can use the \"--trace\" option with a working board to see what is sent/received as well.\nKeep in mind the \"write timeout\" is not related to the flashing protocol at all, this is at the lower async serial layer sending/receiving raw bytes. The application is waiting for the OS to say \"you can write some bytes to this serial port now\", and for some reason the OS never says that the port is available for writing.\nhttps://github.com/pyserial/pyserial/blob/master/serial/serialposix.py#L560\nI'm going to close this issue as I don't think there's anything we can do about this in esptool itself.. > I didn't find self._port.open() in the source code)\nThe port is already open when it's returned by serial.serial_from_url().\n\ncould be either a known pyserial issue or an improper usage between each write-read session.\n\nIf an additional close/open cycle fixes an issue for your particular USB/serial firmware, but this isn't required on any other hardware, then this still indicates that there's a problem with that particular USB/serial firmware. However now you've found a workaround for that problem.\n\nthe chip immediately came back with the sync frames:\n\nI don't really understand why responding to the sync indicates a change of behaviour - the original log you posted also has the chip responding to the sync but then failing part way through a flash. Does that failure no longer happen?\nCan you post the full output when you run the same command that's given in the original issue report, with your patched esptool.py? Also please post the output of git diff to show the exact changes.. > And this is the output (dead loop)\nDo you mean it hangs after the last line of output?\nIf so, all that closing and reopening the port has done is reset the write timeout. So instead of hanging for 10 seconds and then failing due to the timeout, it's hanging forever.. I'm not sure what your modification has done, then. I also don't see how this is progress towards solving your original problem, where sync succeeded but the flashing process failed randomly later on.. The linked stackoverflow post talks about a readline() timeout, not a write timeout, and doesn't include any specifics about hardware, drivers, or the behaviour of the device at the other end - so I think it's pretty unlikely these two issues are related.\nDo you have a friend or a colleague who has more experience with operating systems programming or USB-CDC, and can help you debug this?. If the initial connect attempt fails, the connect attempt starts again which means it calls slip_reader() again. If your board uses RTS/DTR to reset then possibly closing and reopening the port is causing the RTS pin to toggle and resetting the board, probably into the wrong mode, setting it up for a subsequent failure to read SLIP data and the whole process starts again.\nI would be surprised if it's really in an infinite loop. After a certain number of tries esptool will fail the connection.. Hi @veiico ,\nThe trace you posted seems to indicate that nothing is being received from the ESP8266 over serial.\nHow are you resetting the ESP8266 into bootloader mode? This has to be done with either GPIOs or RTS/DTR signals, and I don't think using an Arduino as a usb/serial adapter allows for this. See https://github.com/espressif/esptool/wiki/ESP8266-Boot-Mode-Selection\nAre you disabling the Arduino's AVR microcontroller as well, or using it as a serial relay using a sketch?\nIf you can, try to get hold of dedicated 3.3V USB/serial adapter board or cable to flash with.\nAngus. Closing due to a lack of updates.. Hi @grandcat ,\nThanks for sending the patch for this. I think I also sent some earlier comments on this approach via email, which hopefully got back to you.\nRather than adding a new option for this, I'd like to improve the heuristic for \"is this an image?\" by using esptool's existing capability to parse an ESP32 binary image and verify it (using CRC and optionally an appended SHA hash). If there's an error in the binary image when parsed this way, it can be treated it in the way that \"raw\" mode works in this PR. This should remove false-positives for encrypted binaries that happen to start with the \"magic\" byte.\nThe other thing that can be done is to add a --flash-size keep value to write_flash. There are already --flash-mode keep and --flash-speed keep options (which are the defaults), and if all these options are set then the header also won't be touched during flashing.\nIf you're interested in working on either of these approaches then that would be great. Otherwise I can probably make the changes soon.. > However, it obfuscates the issue in this tool imo.\nThat's fair criticism. It's not exactly obvious behaviour. Ideally, I'd like to remove the \"modify header when flashing\" option entirely and replace with a separate esptool command that just modified the file and didn't talk to the device at all. However this will have to wait until esptool v3.0 at earliest, as it's a breaking change.\n\nFor your first approach about parsing the ESP32 binary image. This would mean that the flash tool is aware of the encryption key, isn't it? Otherwise, the byte sequence is still just random.\n\nNo, what I mean is for the heuristic to change from the current \"does the binary start with the magic byte 0xE9?\" to \"is the binary a fully valid plaintext ESP binary image?\". This will avoid accidentally munging ciphertext.\nI am hoping to look into that over the next couple of weeks, sorry for the slow delay from my end as well.. Hi @aaronleung ,\nIf Ubuntu is a virtual machine, this is usually caused by timing problems introduced by the VM environment.\n\nIf possible, try sharing the DevKit C into the VM as a USB device not a serial port.\nTry holding down the BOOT button while running esptool.py, don't release it until a connection has been made.\nIf neither of these suggestions help, please post the full output from esptool.py. @aaronleung OK, thanks for clarifying, I was confusing by the \"Ubuntu/Windows\" description in the issue report (could read this as a \"Ubuntu running on Windows\")\n\nis --port /dev/ttyS0 the real port you were using? This is not usually a USB serial port address on Linux (it could have been a virtual serial port address, hence further assumption about VMs), and it's not a Windows serial port at all (unless you're using Cygwin).\nIf you're happy to move to ESP32 then that's fine as well, of course.. Hi @nandohdc ,\n\n\nThe .bin format is an Espressif-only format so the toolchain objdump/objcopy tools don't know how to parse it, there's no tool which allows you to go from a .bin back to an .elf\n\n\nIn your read_flash command you're starting from address 0x0 but when writing flash you flash bootloader.bin at offset 0x1000, partitions.bin at 0x8000 and finally hello-world.bin at offset 0x10000. If you read_flash starting from 0x10000 instead, does the output match hello-world.bin?\n. > I tried to use read_flash and the output didn't match hello-world.bin.\n\nesptool.py -p /dev/ttyUSB0 -b 115200 read_flash 0 0x10000 flash_contents.bin\n\n\n\nThe syntax of read_flash is address size filename. So you dumped 64KB of data from offset 0x0.\nTo read back hello world, run read_flash 0x10000 <length of hello-world.bin>.\nAngus. Hi @flywire ,\nFor erasing the entire flash as part of the write_flash command (instead of just erasing sectors which are going to be written, which is what happens now), there is an open pull request in #344 - I just need to get around to reviewing it (thanks for the reminder).\nverify_flash command is not really needed in recent versions of esptool.py when using the stub (default behaviour) - the stub automatically reads back the flash after writing and compares the MD5 of the result. This is good enough for almost all practical purposes (except for the capability that verify_flash has to print the byte offsets that are different, this can be useful sometimes.)\n. Hi @lordneon,\nIt looks like PUYA flash chips have some unusual behaviours when erased/written. compared to most SPI NOR flash chips. The Arduino ESP8266 project has already added a \"quirk\" to deal with them in particular:\nhttps://github.com/esp8266/Arduino/issues/5493\nIf you try either one of these commands, do you have any further success:\n\nesptool.py ... write_flash --no-compress ...\nesptool.py .. --no-stub write_flash ..\n\n(For the no-stub option, you'll need to run the verify_flash command afterwards to check the flash succeeded as only the stub reads back the contents and checks the MD5Sum).\nI'll try to get hold of an ESP-01 module with a PUYA flash chip myself, for further testing.. Hi @vijayprakash1 ,\nThanks for being patient while someone got back to you.\nIt looks like the flash chip in the PICO-D4 is not responding at all. Usually this indicates a hardware design issue or a board assembly problem.\nSuggest checking the QFN is reflowed properly with no cold joints.\nThe schematic snippet you posted is unfortunately too small to read, so I wasn't able to check it over. However from what I can see, it looks like the bypass capacitors may have an inductor placed between them and the VCC pins. This is not correct - any added inductance for filtering should be on the incoming side of VCC, not between the bypass capacitors and the pins. This may cause power stability problems with explain the failure to flash.\n. I see. Thanks for updating and I'm glad you found the solution.. esptool.py uses simple single SPI for all of its operations. The flash mode argument for write_flash is to configure the binary boot mode for when the ESP8266 runs the firmware.\nFor this reason the read_flash command has no -fm argument, and doesn't need one. It should work without it.\nThe write_flash command does use this option. It must be placed after write_flash on the command line. If it's not working, can you please post the full esptool.py command line that was run?. Usually receiving less bytes than expected (in this case 1 less) means there is some problem with the serial link. You could try lowering the baud rate, and check all of the items in the Troubleshooting section.. I agree that looks strange. Most ESP8266 development boards should sync down to 9600 if not lower baud rates.\nIs it possible there's an electrical problem with the serial connection or power connections, or some issue with the USB/serial interface? Check all wires, especially grounds are tightly connected.\nHow are you powering the ESP-01?\n. Hi @renegat56 ,\nThanks for updating. Sorry for the long delay in replying.\nIt seems like probably something about the serial link hardware or the ESP-01 module is a little unreliable when sending a lot of data. esptool.py read_flash sends the data at a high rate, for maximum throughput. Maybe this other tool you found performs the read in a slower fashion.\nI'm going to close this because I think it's hardware specific in some way, and I don't think there is anything we can do in esptool.py to fix it.. Hi @AlwinCrysta,\n\nWarning: Could not auto-detect Flash size (FlashID=0xffffff, SizeID=0xff), defaulting to 4MB\n\nThis message normally means that the ESP32 can't talk to its attached flash chip (the flash chip may be in the module). Check the GPIO pins 6,7,8,9,10 & 11 (which are shared with the flash chip) are not connected to anything external or shorted together, etc.\n. What USB to serial adapter chip do you have? If it's CP2102N, then you may be running into this issue: https://github.com/espressif/esptool/issues/399\nIf a different chip, are you able to share the relevant parts of the schematic?. Hi @mreutman ,\nSorry for the slow reply.\n\nThis is being run in a QEMU/KVM virtual machine, so timing is probably way worse than if I was running this on a native Linux box.\n\nThis is the root cause here. Unfortunately the RTS & DTR timing for the GPIO0 & EN pins, combined with the automatic reset circuit, require quite tight timing. esptool.py has to send two separate commands - one to assert DTR (GPIO0 low) and one to release RTS (EN high) to boot the chip in download mode. If there is too long of a delay between them, the automatic reset circuit sees DTR & RTS asserted together and boots the ESP32 into normal running mode.\nThere's some more discussion of the overall issue here:\nhttps://esp32.com/viewtopic.php?t=8219\nhttps://github.com/espressif/esptool/issues/383\nIncluding some workarounds for different platforms (to udpate DTR & RTS simultaneously). However there's nothing which doesn't require significant modifications of pyserial.\nAnother workaround that will work is to hold down the BOOT button on Dev Kit C when flashing.. Hi @CurryGuy ,\nThanks for being patient while someone got back to you.\nThis is indeed very strange. It does seem like the the ESP8266 got damaged somehow and has lost its internal configuration including the MAC address bits. (The chip id is the last 3 bytes of the MAC.) \nCan you give any details about where you bought this module from? Do you have a photo of the module, ideally showing the ESP8266EX chip?. Thanks @CurryGuy . So this is the exact chip? The date code suggests it was manufactured in late 2016.\nOne more favour, could you please run this command esptool.py --no-stub --trace read_mac and post the full output? (Will be a few dozen lines.). My colleagues have asked for a few more details:\n\nDo you have a photo of the whole module, please?\nAre you able to get the name of the distributor?\nIs this faulty module one from a larger lot/package you're using?\n. Oops, thanks for the heads-up @loader-bsd . Sorry for the inconvenience.. Unfortunately there seems to be an issue with CP2102N if the port is closed while serial data is still being received. The CP2102N (or the driver) goes into some bad state and stops sending any more data to the computer until it's power cycled.\n\nWhen an ESP32 comes out of reset (self._setRTS(False)) it immediately starts outputting some data (the ROM boot code messages, etc.) It looks like adding the 2 second sleep gets past this point and starts running your just-flashed firmware, but this workaround will only work as long as the chip doesn't output anything on the serial at that exact moment (two seconds after reset).\nI reported this to Silicon Labs last year, there's a thread here:\nhttps://www.silabs.com/community/interface/forum.topic.html/cp2102n_stops_receiv-GeH2\nThey recently updated this thread saying that their VCP drivers were updated. It looks like the fix is in the Windows driver (marked MCUSW-134 in the release notes). I'm not sure if there is any equivalent fix for MacOS or Linux users, yet.\nAn alternative workaround is probably to pass --after no_reset to esptool.py, so it keeps the bootloader running when it exits. The ESP32 will probably reset the next time a serial program connects to it.. Have you tried the Troubleshooting steps written here?\nhttps://github.com/espressif/esptool#troubleshooting\nAlso, if the board you have has a \"PROG\" or \"MODE\" button. try holding it down while flashing starts.\nAlso, I don't know exactly what \"nodemcu\" is (there are dozens of boards marked \"nodemcu\" for both ESP8266 and ESP32), but this is probably a problem with the particular board you have. It may be faulty.. erase-all isn't a valid Python token (Python would parse it as \"erase minus all\"). The argparse module converts symbols like - in command line arguments to _, internally when building the Python representation.\n(I realise this is confusing right now because esptool.py arguments use a mixture of hyphens and underscores in different commands, an inconsistency dating back to pre-v1.0. I'm trying to standardize on hyphens so eventually we can remove the underscores from command line arguments, hopefully in a backwards compatible way.). Do you have a reason to pick underscores over hyphens?. Look again:\nhttps://github.com/espressif/esptool/blob/master/esptool.py#L2453\nhttps://github.com/espressif/esptool/blob/master/esptool.py#L2443\nhttps://github.com/espressif/esptool/blob/master/esptool.py#L2433\nOK, this one is an odd one out:\nhttps://github.com/espressif/esptool/blob/master/esptool.py#L2492. Maybe I misunderstood what you're asking for and you'd like all these options to be changed to underscores, the same as flash_size currently is.  This isn't a likely change, because hyphens in command line options are a more common convention and most esptool.py users will be use the command line rather than Python.\nSorry for the inconvenience of having most options in two forms (at least soon they'll probably all be consistently in two forms!). Hi @nobody102 ,\nWhat USB/serial interface chip does this nodemcu board have?\nIf the board has a BOOT button and you hold it down while running esptool, does anything different happen?. No problems, glad you found a solution. You should be able to release BOOT once the flashing process is underway.\n(Normally development boards will automatically go into bootloader mode, but on some combinations of hardware and host computer the automatic reset circuit doesn't work so this kind of workaround is required.). Hi @marcelstoer ,\nDo you have an example of how exactly you are calling main()?\nRegarding the \"big picture\" for this, I consider calling esptool.main() under any circumstances a hack around esptool's poor Python API. I accepted PR #341 because this change makes it less of a terrible hack than the previous hack of editing the sys.argv list and then calling esptool.main().\nThe real problem (imo) is tracked in the venerable #208. I am hoping that before esptool v3.0 I get a chance to actually look into this, and we can have a proper story for how to use esptool from Python, can generate API docs, etc.. (On the same note, I haven't looked closely at #402 yet but it looks like a good first set of steps on the path to breaking out main() into a set of callable module functions.). >  Why is this the case? Why is .connect() needed before running .get_chip_description()?\nconnect() is required because this is the function which actually resets the chip into the bootloader mode and establishes bootloader communications.\nA shortcoming of the Python API (to add to notes in in #208) is that the class itself doesn't track the connection state, so there's no software-side indication that it won't respond to the caller at all.\n(Although I suppose in some cases it may be desirable to do this from code, for example if you know for a fact that some other piece of code has established bootloader mode already, and you just need to pass control a new ESPLoader new object instance.)\n\nI also encountered the same Timeout fatal error during the .slip_reader() function when the .write_flash() function is executed. May I know what is causing the Timeout error and how to overcome it?\n\nWithout seeing that code that you're calling to make this printout I really can't tell anything.\n. @sunbearc22 SLIP is https://en.wikipedia.org/wiki/Serial_Line_Internet_Protocol\n\n\\xc0 is the packet delimiter.\n\\xdb\\xdc is how you represent a literal \\xc0 in the stream\n\\xdb\\xdd is how you represent a literal \\xdb in the stream\nall other bytes are represented as themselves in the stream\n\nThe slip_reader() function is a Python generator that tries to read a full SLIP packet from the input serial stream, decode it, and then yield it to the caller.\nAs a next step, I suggest you try to enable the equivalent of the --trace option in your code and look for differences in the serial traffic between esptool.py --trace --no-stub write_flash ... and what your code is doing.. Hi @sunbearc22 ,\nGlad you sorted out the code.\nFlashing the bootloader image with the QIO flash mode set doesn't work, they need to be flashed in DIO mode.\nThe clue is here:\nmode:QIO, clock div:2\nload:0x3fff0018,len:4\nload:0xcdc72100,len:687535457\n1162 mmu set 00010000, pos 00010000\nThe second load address and length are garbage, because of QIO mode.\nA general guide to the messages printed by the bootloader during a (normal) boot can be found here: https://github.com/espressif/esptool/wiki/ESP32-Boot-Mode-Selection#later-boot-messages\n. > 1. This occurs because args.no_stub=False by default.\n\n  When writing to flash, can `args.no_stub=True` be used instead? When should one use > `args.no_stub=True`?\n\n\nThere are some operations which are only supported by the stub loader. But you can write flash with or without using the stub loader. The stub loader is faster, though.\n\n\nWhat does b'\\x07\\x07\\x12\\x20' + 32 * b'\\x55' do in the .syn() method?\n\n\nI'm actually not sure what the first 4 bytes signify, I think the chip will echo them back (although I think esptool doesn't actually check what gets echoed back).\nThe 0x55s are useful for auto-bauding (the sync packets are dual purpose: the ROM in the chip will use the chip UART auto-baud feature to sync with whatever the incoming baud rate is, and then after this happens it will try to receive a sync packet). 0x55 is close to a square wave in terms of alternating bits.\n\n\nAm I correct to say that \"The ESP chip is reset into UART bootloader mode.\" is achieved during ._connect_attempt() method via Line 418 to 434?\n\n\nYes.\n\nIs the UART bootloader the same as the ROM bootloader mention in the quote in question 1? If not, then can you explain what is \"UART bootloader mode\"?\n\nYes, this is sloppy terminology. The bootloader mode is implemented in mask ROM and communicates using the UART, so it gets called both things.\n\n\nAm I correct to say that the rest of the above quote describes what the .syn() method do?\n\n\nYes.\n\n* Am I correct to say that the above description occurs when [.run_stub() method](https://github.com/espressif/esptool/blob/master/esptool.py#L576) is activated and not during the [.connect() method](https://github.com/espressif/esptool/blob/master/esptool.py#L452)?\n\n\nYes.\n\n\nduring the .connect() method?\n\n\n\nI am confuse with which device does the input and output in lines 438 and 439 refer to. Can you help clarify? Does input refers to the ESP32 device UART buffer and output refers to the computer(i.e. host) UART buffer? Or is it the other way round?\n\nThese are from the point of view of the computer's serial interface.\nInput = bytes received on serial interface (sent from the ESP32, we hope).\nOutput = bytes sent on the serial interface (received by the ESP32, we hope).\nHope this helps clarify some things. :)\n. It does look like some kind of Python path issue.\nI take it you installed esptool using pip install esptool, is that right?\nIs the Python installed into E:\\Programs_7\\Python\\ the only Python on your system?\nIf you run python esptool.py -b 115200 -port COM15 read_flash 0x000000 0x100000 flash_1M.bin, does it work then?. Good to hear that you've found a solution that does work.\nWhen you run a .py file directly in Windows, it looks up some associations about how to run that file. Essentially, Windows does some lookups and then decides \"I should run this with the python interpreter\" and then it internally runs python esptool.py ....\nThere's a description of this process here: https://stackoverflow.com/a/1936078 - suggest checking that all these associations match the same command which is run when you do python esptool.py ... on the command line.\n. I agree that pyserial should probably throw a SerialException here, but this code is part of pyserial not part of esptool. esptool doesn't currently do any filtering of pyserial errors. Suggest sending the pyserial maintainers a PR.\nIn the meantime, you can import termios and except termios.error: in the calling code as a workaround.. Hi @scottpage ,\nJust to make I understand, you mean the list of pins in the GPIO_STRAP register given on the wiki here, yes? \n\n1. The datasheet does not mention GPIO4 as a strapping pin.\n\n\nYou're right, GPIO4 is part of the GPIO_STRAP register but it's not used to select any of the documented boot modes. I've added a note on the wiki clarifying that this pin can be either high or low for all documented boot modes.\n\n2. The datasheet does not contain a section 2.4.  Instead, strapping pins are in 2.3.\n\n\nWhat version of the datasheet do you have? Current version is 2.8 and it has Section 2.4 \"Strapping Pins\". This section was also numbered 2.4 in datasheet 1.0 (October 2016). Perhaps there is some interim version where it was changed?\n. Hi @Fivefold ,\nThanks for the comprehensive set of details. A couple of additional questions:\n\nWhat version of esptool.py do you have? It seemed to get trimmed from the debug log.\nIf you flash with esptool.py --no-stub ..., does this work?\nIf you run esptool.py -p PORT flash_id, what does it say?\n\nThanks,\nAngus. Hi,\nThanks for the extra details. The behaviour you have is consistent with bad power, a bad serial link, or a bad flash chip (or flash chip connection) on the module.\n\nWhat's connected to the module? Is it possible something is connected to one of the module pins which is shared with the flash chip?\n\n\n4. I would rule out power as an issue (like with most others that are getting this error). I use a Manson NRP-2050 lab supply to drive the ESP module that can deliver up to 5 A\n\nThis is one of the factors for ensuring the module gets stable power. Is the module installed on a PCB or a development board of some kind? Is there a low ESR capacitor placed close to the module on the PCB? (ie a 10uF ceramic cap or something of this kind).\nIf you have a photo of your setup, that would be ideal.\n\nOne thing I forgot to mention ealier: When esptool says Connecting... I have to manually reset the module by pulling down the RST pin shortly. I suppose this is correct procedure?\n\nThis is the case if you're not using a dev board with an automatic reset circuit. More details here: https://github.com/espressif/esptool/wiki/ESP8266-Boot-Mode-Selection\n. Yes, I agree that the root cause is probably lack of capacitance (or possibly bad breadboard connection or solder connection somewhere - what's under the hot glue?) If you can get a larger value cap (maybe even in parallel with the 100nF cap) and solder it directly to the module, you should find things come good.\nIf you're just starting out, I really recommend getting one of the little development boards with integrated USB/serial as a first step, and migrating to custom wiring once you're comfortable with that.\n\nresetting I now get ets Jan 8 2013,rst cause:2, boot mode:(1,7) (before it was (1,6)). I am not sure if this is relevant.\n\nThe second number is a bitmask indicating which strapping GPIO pins were high/low on reset, probably one of them is floating. Provided the first number after \"boot mode:\" is a 1, serial flashing should work. Some more details here.\nI'm going to close this issue as it seems like this is a hardware issue, not a bug in esptool. For more pointers on wiring up an ESP8266 module on a breadboard, suggest posting on the http://bbs.espressif.com or http://esp8266.com forums.\n. Hi @alessss ,\nThis looks like a MicroPython problem not an esptool problem, especially if the ESP8266 was working properly with MicroPython 1.7. All esptool does is writes the .bin file to the ESP8266 flash, everything else happens once MicroPython boots. And the esptool output suggests that the .bin file was written successfully to the flash.\nOnly one additional suggestion. Try removing this command line argument: --flash_size=4MB entirely and run esptool.py without it. If your flash is actually a different size to 4MB, esptool will detect this and it may help the firmware boot. If the flash size is actually 4MB, removing this argument will make no difference.\nThe other thing you can try is to run a serial monitor at 74880bps to watch the early ESP8266 boot messages. This may give you some clue.\nHowever, probably the solution to this problem will be found somewhere on the MicroPython side, not the esptool side.. Good to hear!. This additional sleep behaviour was merged as the esp32r0_delay option, which happens automatically if the initial connections fail:\nhttps://github.com/espressif/esptool/blob/master/esptool.py#L462\nAn explanation and a link to the same issue 136 is here:\nhttps://github.com/espressif/esptool/blob/master/esptool.py#L398\nesptool tries a \"normal\" connection first then switches over to the \"esp32 r0 workaround\".\nThis reason this isn't done always is that it adds a minimum of 1.6 seconds to the sync time, and is not necessary on ESP8266 at all or on ESP32 silicon revision 1, or on ESP32 revision 0 boards with enough capacitance on the EN line. I've also never heard of it helping on a non-Windows platform, although you're saying something different here.\n\nesp32 DevKit-V1 \n\nDo you have a photo of this board? Is it ESP32 silicon revision 0? (esptool.py will print the silicon revision when it syncs).\n. So the board is \"DOIT ESP32 DEVKITV1\"? Including the manufacturer in the name is useful. :)\nTry adding a capacitor between the EN and GND pins of your dev board. At least 100nF is good, up to 10uF should be fine. A lot of third party dev board manufacturers seem to leave this off and it makes automatic reset unreliable. Without this capacitor, parasitic capacitance can make a difference which may be why it randomly starts/stops working.\nThe workaround is to hold down the BOOT button, as you're doing now.\nDifferent OSes have different timing around USB interactions, so the automatic reset can behave differently depending on OS and even specific host hardware.\n\nCan you point me to the literature explaining line 403-404? What is this \"silicon bug\"?\n\nSee ECO and workarounds for bugs in ESP32 item V3.1. Basically, the r0 silicon resets twice so we get two chances for it to pick up the correct bootstrapping mode.. > prints \"ESP32 DEVKITV1\" w/o the \"DOIT\" label. Any difference?\n\nMac: 24:0a:c4:xx:xx:xx, Manufacturer: ff, Device:fff\nAny issue with this device?\n\nI guess one issue is that the board manufacturer (whoever it is) is bad at labelling their product. :)\nThe flash manufacturer and device IDs shouldn't be all-FF, but this isn't causing problems with the serial link.\n\nAccording to this pic, you mean to connect pins 2 and 15 (left side) with at least 100nF to 10uF?\n\nYes, looks like it.\n\nesptool.ESPLoader._connect_attempt() method should include a condition check for platform types and correspondingly implement appropriate esp32r0_delay workaround? Or is this something espressif want esptool.py users to do?\n\nThere is no way to 100% solve this problem in software, because of the way the \"automatic reset circuit\" works and the fact we have to set RTS and DTR separately in two separate commands.\nThere is a brief window of time after setDTR(True) and before setRTS(False), when both pins are asserted (both True) and the \"automatic reset circuit\" tries to boot the chip into the normal running mode. If the chip comes out of reset during this time window, it will boot into the wrong mode.\nAll of the timing that happens between setDTR(True) and setRTS(False) is out of esptool.py's control (part is pyserial, part is Python runtime, part is Operating System, part is hardware drivers, part is development board hardware).\nHaving the capacitor between EN & GND means that the chip takes longer to come out of reset, so the window of time can be longer. This is the only reliable fix.\nIf you want to know more, there are a ton of details here: https://github.com/espressif/esptool/issues/136. > Funny how this all came full circle\nThe part I find funny is that it's over 2.5 years since Espressif (and reputable dev board vendors) started adding this $0.02 part to their ESP32 boards to fix the problem, and we updated the reference designs, but there are still bargain basement dev board vendors who haven't changed anything...\nMaybe everyone makes bug reports to esptool.py and noone tells the vendors to fix their board designs... :laughing:. Hi @sunbearc22 ,\nIt's not your fault some boards are poorly designed, I didn't mean to blame you for reporting the issue - apologies.\n\nFor the same device, I noticed that the voltage performance at the EN and GND Pins when connected to Linux can be far superior than what Windows 10 gives. I have evidenced my observations here \n\nI am not sure what you're seeing here, but I think it's probably to do with different hardware? Is the USB power cleaner from the Linux computer, or grounding relative to the scope is different, or something like this?. To get clean signals on an oscilloscope, you always need to put the ground clip close as possible to the thing you're probing. If you happened to get a clean signal with the ground clip anywhere other than GND on the ESP32 board then this is due to luck, or some electrical property of the thing you're probing (ie the computer's USB port).\n\nGiven that the ESP32DevKitV1 has this design flaw that can be fixed by connecting the EN pin and the GND pin with a capitor, why is this solution only needed when Windows OS is used and not when Linux OS is used? \n\nBecause Windows is a different operating system it has different OS-level timing and serial APIs, the drivers have different timing, the USB stack has different timing. All of these can result in small changes to the timing that USB commands packets are sent to the CP2102, which results in small changes to the timing that the RTS & DTR pins change levels. See comments and linked discussion above for more details, it's all explained there.\n. RTC_GPIO0 != GPIO0\nGPIO0 doesn't seem to be on a dev board pin. Consult the ESP-WROOM32 datasheet or the schematics at the link you posted to find which pin on the ESP32 module is GPIO0.\nDTR & RTS are pins on the CP2102 serial chip.\nDTR & RTS are not wired directly to GPIO0 & EN, there is an automatic reset circuit in between. Some high level description is here: https://github.com/espressif/esptool/wiki/ESP8266-Boot-Mode-Selection#automatic-bootloader . The circuit is shown in the schematic of the page you linked to.\n. Yes, the schematic shows GPIO0 is pin 25 of the ESP32-WROOM module (the big metal can - not the \"chip's internal flash\".)\nIt is possible to probe GPIO0, but you have to probe the pad on the ESP32-WROOM module (or one of the other connections on the circuit board) as it's not on any of your development board's external pins. This is what I was trying to indicate in the previous comment.\nThis discussion has strayed a long way from any issue in esptool.py. If you want to get more electronics diagnostics help with this project then it may be worth starting a thread over on https://esp32.com/\n. Hi @Darkblade48 ,\n\nESP hardware in use: ESP8266(EX) \n\nExactly what hardware are you flashing, a Sonoff or something else?\nIf you're using a bare module on a breadboard, you probably need to add more capacitance to the module itself - a lot of vendors seem to ship modules that don't integrate enough power capacitance and it causes brownouts during flashing and during Wi-Fi operation as well.\nIf your setup is something unusual, do you have a photo of it?. > It is a Sonoff S31\nWas the Sonoff working before you went to flash it?\nIF yes, my guess is that the 3.3V power supply either can't supply enough current, or there's a resistive drop in the cables you're using for power. Try using the shortest cables with the most copper (thickest copper section) for the 3.3V and GND connections in particular. A lot of cheap breadboard wires only have a tiny amount of copper, so it may be 3.3V at the power supply end and much lower at the ESP8266 end when it's drawing current.\n. If the same setup works for other S20s then a bad device does seem likely, unless it's some small hardware revision change that means less capacitance or higher power draw in this one.. Yes, thicker/shorter wires are probably worth a try. You could try soldering an additional capacitor between VCC & GND on the board. (Remember it'll need to still be safe once mains voltage is reattached.)\nYou could also try esptool.py -b 9600 --no-stub -p PORT write_flash ... and see if this helps. This flashes slowly and with compression disabled, so flashing will be less \"bursty\" on power.\nAngus. You could soldering the 50V 1uF capacitor between VCC and GND, can't hurt. Ideally get a ceramic cap with a voltage rating at least 6V, and the highest capacitance you can find.\n(If soldering electrolytics, make sure to check the polarity - electrolytics only work one way and will go \"pop\" otherwise.). @YuchiRoo yes, this is mentioned in the release notes:\nhttps://github.com/espressif/esptool/releases/tag/v2.6\nThe commit, with some explanation, is here:\nhttps://github.com/espressif/esptool/commit/fde8dd2bcf6a081bdb6cce78a76a917568088968\n\nReformat espefuse.py summary output (includes: read-only efuses now display value ? not 0, byte order of keys shown for BLK1,BLK2 are now shown in software order not the reversed byte order used by hardware cryptographical modules.)\n\nThe reason is that the old ordering only makes sense when storing data for the hardware cryptographic modules, and usually when using these modules the efuse block is made read-protected.\nHowever, I don't think that the order should be exactly what you give above. If you have this in V2.5:\n= 00 00 00 00 00 00 00 44 33 4a 33 45 43 32 42 31 42 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 R/W\n(This is last word of efuse first, with MSB of each word printed first.)\nThen you should see this in V2.6:\n= 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 42 31 42 32 43 45 33 4a 33 44 00 00 00 00 00 00 00 R/W\n(This is first word of efuse first, with LSB of each efuse printed first - ie same layout as software sees in the registers, if they were copied to a byte array)\nIf you see something different, it may be a bug.\nespefuse.py dump output should be the same between both versions (it prints each 4 bytes of efuse as a word.). This looks like it reverts #93, which was apparently a big performance boost on slower platforms like Raspberry Pi\n. ... maybe it's possible to use io.BufferedReader to keep this code simple, while keeping overhead low on slow platforms?\n. Could the stub hex data be put at the very end of the file, please? I think that's the best compromise between readability and keeping everything in one source file.\n. You can achieve this by passing \"default=0\" to the parser.add_argument() call\n. This is a nice trick :)\n. Because of the commento in line 35, it's probably worth commenting here that some commands are stub-only rather than in the ROM\n. Do you think it would be viable to include enough additional files to compile the stub in-tree here? (Except for the 3 small SDK header files, at least.)\n. Thank you. I had a mental blank on what this header was called!\n. The commit seems to have accidentally reverted a bunch of recent unrelated changes on master. Suggest doing something like a git reset HEAD^, then git add -p and stage only the relevant changes, then redo the commit as git commit --reuse-message=2b4bd and force push. . I see why you called this parameter \"legacy\" (and \"legacy\" in the comment) but I think it's better named specifically as the esp32r0_workaround or something like that. It's not really clear what a \"legacy\" device is in the esptool context (ESP8266s are arguably a legacy device, but they are still fully supported.). Agree with your decision to keep the esp32r0 mode here. I don't think it will be necessary to use it after this change lands, but it does make the successful reset happen slightly faster and it also keeps the door open for removing the automatic retry behaviour in some future release, maybe in a year or two when the vast majority of ESP32s are r1 or newer (and hopefully on dev boards where more capacitance is added to the EN pin.). Two things:\n If the mode isn't esp32r0/legacy, then this changes removes the sleep while EN=LOW. Probably this won't matter because Python+OS+USB creates enough latency to create a meaningful reset period, but I'd prefer to at least keep the old 50ms sleep here.\n Does the esp32r0 really need to be held in reset for a whole 2 seconds? That is very unexpected!\nI'd prefer to remove the if and slightly increase the sleep time for all modes, maybe to 100ms, provided this works OK in your testing.. Yes, the only esp32 revision released so far is esp32r0. Revision 1 (\"esp32r1\") is coming in a month or two.\nThis \"workaround\" for these reset problems (waiting an extra 400ms for a second reset due to a spurious watchdog timeout) will only ever work on esp32r0, as it's actually a silicon bug. However provided dev board manufacturers increase the capacitance on the EN pin for subsequent board designs, no workaround should be needed for future revisions.\nI'm still in favour of keeping the --before esp32r0 option in the command line interface, though, I think. Although maybe it's easier to remove it entirely for now.. Because esptool erases entire sectors, the address & size can be aligned to 4096-byte boundaries when checking for overlaps - even regions which don't obviously overlap can cause data loss if they land on the same sector.\nSomething like:\nnext_end = (address + size + FLASH_SECTOR_SIZE-1) & ~(FLASH_SECTOR_SIZE-1)\naddress = address & ~(FLASH_SECTOR_SIZE-1)\n... # if end > address, etc.\nend = next_end\n. Rather than indenting all the sync logic, how about returning here if no_sync is set?. I'm not sure this low of a timeout will work for all cases. We may need to increase this number a bit - some older ESP32 boards on Windows can require a lot of retries before they sync.. pyserial actually has an API for this - http://pyserial.readthedocs.io/en/latest/tools.html#serial.tools.list_ports.comports - do you think it could be suitable?. ESPLoader.DEFAULT_PORT is /dev/ttyUSB0 so this will prevent Linux users from specifying this port!\nHow about removing DEFAULT_PORT entirely and have args.port default to None instead.?. Is this some debugging that stuck around?. This block appears twice now. Is it possible to factor this so that there's less duplicate code?. This looks like an unrelated change that snuck in? (I'm not against reading the MAC each time, but would prefer in a separate commit/PR for clarity.). Hi @Callahan93 ,\nThanks for being patient while I got back to you.\nI prefer the pyserial method. The code at the linked StackOverflow issue works fine for me also (Windows & Linux), so I suspect any underlying bug in pyserial is long fixed. If it's possible not to reinvent a wheel, then better not to.. This is a bit of an awkward way to check if you're out of options, and also it swallows the exception object details (stack trace, etc) for a failed connection (which may make debugging harder for a specified port). How about something like:\nexcept FatalError as err:\n   if args.port is not None:\n       raise\n   print(\"%s failed to connect: %s\" % (each_port, err))\n   esp = None\nthen, outside the loop...\nif esp is None:\n   raise FatalError(\"None of %d available serial ports could connect.\" % len(ser_list))\n. I think this function can be replaced with list(sorted(list_ports.comports())) ) or possibly just sorted(list_ports.comports()).\nPlease move the import to the import block at the top of the file.. This variable is no longer used for anything. Setting the same as the command timeout means that some commands (like erase) will have very long write timeouts (120 seconds).\nI think it's probably safe to set write_timeout when the port is opened and not change it again. The most data esptool sends in a single command is 16KB (writing flash to ESP32). This can take a long time at a low baud rate, but looking at the pyserial code it looks like the write timeout is only until the OS buffers the write, and I think all OSes will buffer more than 16KB. So the write command itself should always return almost instantly, if the port is available and working correctly. Maybe the write timeout could be something like 3 seconds, to give some headroom?. Because we have the \"scan\" feature if no port is given, it's useful to have esptool move on to a new port if it can't write to one for some reason. Maybe 10 seconds? . split(' ') will work until there's a space in one of the pathnames :)\nWhat do you think about command = [ '--baud', '460800', 'read_flash', '0', '0x200000', 'flash_contents.bin']\nIt's less readable but it doesn't contain any traps for the unsuspecting. :). This looks like it's probably relatively expensive. Is there a way to take it out of the loop?. ",
    "george-hopkins": "Thank you!\n. ",
    "dpgeorge": "I can happily write binary files which are not a multiple of 1024.  I have tested files which are multiples of 8 and 32 and they flash fine.  Maybe it needs to be at least a multiple of 2?  What program generates your binary?\n. > I guess the best solution is to make esptool compatible with both Python 2 and 3\n+1\n. I have a board with an FTDI USB-UART converter.  Running under Arch Linux.  I get:\n```\nConnecting...\nErasing flash...\nWriting at 0x0000d000... (100 %) \nWritten 54272 bytes in 5.26 seconds (82.61 kbit/s)...\nErasing flash...\nWriting at 0x0004e800... (100 %) \nWritten 257024 bytes in 24.97 seconds (82.35 kbit/s)...\nLeaving...\n```\nThat seems about right for 115200 baud with overhead.\n. Wow, it really can go up to large speeds (eg using 921600 baud):\n```\nConnecting...\nErasing flash...\nWriting at 0x0000d000... (100 %) \nWritten 54272 bytes in 0.91 seconds (479.13 kbit/s)...\nErasing flash...\nWriting at 0x0004e800... (100 %) \nWritten 257024 bytes in 4.29 seconds (479.36 kbit/s)...\nLeaving...\n```\nSo I guess the bootloader autodetects the baud rate, and it's slow with the CH341 because that chipset for some reason decides to do 9600 baud.\n. ",
    "joostn": "The file is here:\nhttp://ge.tt/6yfpSP62/v/0?c\nIt's 164931 bytes, not a multiple of 2 or 4 so I guess that's the problem, and padding to 2 or 4 bytes would probably sufficient. Can't test that right now though.\nIt's generated by esptool (not .py) from a gcc linked binary, nothing special, so apparently this may happen under certain circumstances.\n. ",
    "eliabieri": "I use the default Terminal.app on Mac OSX 10.10\n. I used this:\npython esptool.py write_flash antares.rom\n. btw. I tried your new version of esptool.py and I still have the same error\n. The command: ./esptool.py dump_mem 0x40000000 65536 iram0.bin works without problems\n. ",
    "layerzerolabs": "I've also had the problem of not being able to successfully flash firmware onto my olimex board - I needed to use the nodemcu-flasher tool to do this. It would be great if this tool was able to deal with other flash sizes so that I could use a fully linux-based toolchain. Keep up the good inventing!\n. ",
    "hamishcunningham": "That would be great, thanks!\n. That worked for me -- thanks!\nH\n. you can just about see the wiring you need here:\nhttps://pi.gate.ac.uk/images/esp/olimex-plus-dil-switch.jpg\nand there's a bit of explanation here:\nhttps://github.com/hamishcunningham/fishy-wifi#develop\nhth\nh\nOn 10 February 2015 at 00:12, kfricke notifications@github.com wrote:\n\n@themadinventor https://github.com/themadinventor , just an off-topic\nquestion: I am having problems to boot the ESP board you mentioned from\nOlimex into UART mode. Could you try to describe what you did in a few\nwords? Thanks!\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/themadinventor/esptool/issues/14#issuecomment-73619251\n.\n\n\nHamish Cunningham\nProfessor of Computer Science, University of Sheffield, UK\n+44 7920 765 455  http://twitter.com/@HCunningham  hamish@gate.ac.uk\nhttp://pi.gate.ac.uk    http://hamish.gate.ac.uk   http://gate.ac.uk\n. ",
    "kfricke": "@themadinventor , just an off-topic question: I am having problems to boot the ESP board you mentioned from Olimex into UART mode. Could you try to describe what you did in a few words? Thanks!\n. I have followed the instructions and schematics by Olimex already which make most parts you mention obvious. So i am just searching for reasons why my flashing attempt to the Olimex board does fail.\nRegarding your documentation there, i did comment on it. Some things are a not that well described imho.\n. I have been successful flashing my Olimex board. My FTDI programmer was the fault. \n. ",
    "dkuku": "NVM - I found out that the pullup resistor wasn't connected - please close this issue\n. ",
    "pihomeserver": "Same issue here. Can't get it work :-(\n./esptool.py  -p /dev/cu.usbserial write_flash 0x000000 AI-v0.9.5.0\\ AT\\ Firmware.bin\nConnecting...\nTraceback (most recent call last):\n  File \"./esptool.py\", line 408, in <module>\n    esp.connect()\n  File \"./esptool.py\", line 143, in connect\n    raise Exception('Failed to connect')\nException: Failed to connect\n. GPIO0 is Linked to the ground\n. Thanks that's usefull\n\nLe 27 janv. 2015 \u00e0 14:28, Innovative Ideas notifications@github.com a \u00e9crit :\nI think everyone on the planet knows about Gpio0 at this stage !\n\u2014\nReply to this email directly or view it on GitHub.\n. That is really usefull. I will try this way and check if it works\nLe 27 janv. 2015 \u00e0 14:31, Mohammad Elahi notifications@github.com a \u00e9crit :\nYeah, but I had the same problem and it turns out that after connecting GPIO0 to ground you must restart the ESP. I mean just unplug it from the power and plug it again.\n\u2014\nReply to this email directly or view it on GitHub.\n. \n",
    "mizdler": "Make sure that you put your device in flash mode.\n. Yeah, but I had the same problem and it turns out that after connecting GPIO0 to ground you must restart the ESP. I mean just unplug it from the power and plug it again.\n. ",
    "InnovativeIdeas": "No, theres several issues with esptools/ESP. Ive gone through the software and a logic analyser\nThe first is that esptools  always expects a perfectly formed packet, i.e. it does not throw away characters  until it reaches the \\0C, hence on some versions , the ESP does not auto baud perfectly and returns a junk character. This gives the an esptools error .  \nIN other cases the ESP  actually boot up in  funny baud rate approx 74K.  if it doesn't auto baud properly,  you will get fail to connect messages,\nThe ESP boot loader isn't well implemented \n. I think everyone on the planet knows about Gpio0 at this stage !\n. Thats what I do all the time, but occasionally I find the ESP does not auto baud correctly and generates framing errors on the serial line, this confuses ESPtools.  \nI have it working reasonably reliably , I modified esptools to cut down on the sync and also to scan for header rather then just expect it. I'll  tidy the code when I get a chance  and maybe post it for others, but Im actually writing a native Os/x flash utility at the moment .\n. I revisited the  python code  because using OS X and a new ESP-12 module, esptool.py repeatedly  couldn't connect.  Im using a cheapo Profilic usb to TTL\nThe esptool suffers from a MAJOR flaw in the sync code, because it makes no allowances for ;\n(a) The first SYNC command, will result in junk  being sent to the serial port as the ESP autobauds, Hence  esptool will never see a valid Header byte, and will constantly fail . The second SYNC command will be at the correct baud rate  ( Theres no need  for the  multiple SYNC after that )\nAT least if you persist, without resetting the ESP, and try esptool again, it will connect as long as you dont change the baud rate.  but its a pain with the current Git code. My feedback was that users were  resetting the ESP as esptool fails to connect and this just continually exposes the flaw.\n( The solution is to generate one or two dummy SYNC commands and not look for responses ) \n(b) certainly on my ESP-12 out of the box, the response to the SYNC command is a series of  SLIP packet not one, i.e. about a dozen response commands. This confuses  esptools \n( The solution is to clear the input buffer on a successful SYNC to remove the trailing packets )\nThese I fixed  by various hacks , ( Im not proud )\nI also found that with a 2 wire TTL , no handshake, that a small time.sleep(0.01) delay had to be placed before any command write to the serial port.  It looks like pyserial gets corrupted if you make back to back command writes and the second and subsequent commands never get sent.\nmy version , running under OS X now runs upto  115200, and connects first time , every time.\njust be aware, that the existing code simply cannot function reliably as written, certainly under OS X ( 10.9 etc ) \nother then that , its fine \n. ",
    "alesrebec": "Same issue for me.\nCurrently my ESP8266 is bricked.\nsudo ./esptool.py -p /dev/ttyUSB0 write_flash 0x000000 ../lua/0x00000.bin \nConnecting...\nTraceback (most recent call last):\n  File \"./esptool.py\", line 471, in <module>\n    esp.connect()\n  File \"./esptool.py\", line 149, in connect\n    raise Exception('Failed to connect')\nException: Failed to connect\nTried with different baud settings too - all returning exception. \nGPIO0 on GND. After reset.\nAny clues how I can re-flash my ESP?\n. Ok, found out my problem. Maybe it could solve yours too.\nSo I tried with a fresh new ESP8266 (they are so cheap that you gotta have at least 5 of them at home) and the new esp was getting the same error. \nWell, the problem was in USB UART's GND. I have a different power source for esp's 3.3V and was using only TX/RX for flashing. Forgot to plug UART's GNT on the same GND as esp's.\n. I'm having the same issue with ESP8266-01.\nIf I power on the ESP8266 the blue light is solid ON. In the monitor I get constant garbage.\nAll connections are fine because I'm reading and flashing other ESPs !! \nI may only bricked this one after a wrong connection or some corruption in code.\nIf I boot it up (GPIO0 LOW + RESET - like I do with other where it works) and try to flash it I get the same error.\nIt cannot talk with ESP.\nA fatal error occurred: Failed to connect to Espressif device: Timed out waiting for packet header\nIs it dead or can I somehow unbrick it?. The error says it failed to connect to Espressif device: Invalid head of packet.\nTwo things look weird in your esptool.py call:\nesptool.py --port /dev/tty.usbserial-00000000 --baud 74880 --trace read_mac\nCheck if the device name is valid and baud rate which looks wrong.. ",
    "nfriedly": "@alesrebec Thanks! I've been trying to get this to work for like 3 hours before I found that - connecting my ftdi chip's ground to my external power supply's ground fixed it perfectly.\n. I'm on a new module (the custom ESP-12E one from electrodragon) and running into this again. It has the Ai Thinker AT command set preinstalled and that works fine; I can interact with it in esplorer and such. But, I can't flash anything new to it.\nThis build spits out a bit of debug info at 74880 baud when it first boots up and then it switches to 115200 for the \"regular\" command set. I'm suspecting that this switchover is what's making esptool choke - it fails to connect regardless of what baud I set it to:\n```\nNathans-MBP:esptool nfriedly$ ./esptool.py  -p /dev/cu.SLAB_USBtoUART write_flash 0x00000  ~/Downloads/nodemcu-master-16-modules-2015-07-30-19-07-36-integer.bin \nConnecting...\nTraceback (most recent call last):\n  File \"./esptool.py\", line 505, in \n    esp.connect()\n  File \"./esptool.py\", line 158, in connect\n    raise Exception('Failed to connect')\nException: Failed to connect\nNathans-MBP:esptool nfriedly$ ./esptool.py -b 74880 -p /dev/cu.SLAB_USBtoUART write_flash 0x00000  ~/Downloads/nodemcu-master-16-modules-2015-07-30-19-07-36-integer.bin \nConnecting...\nTraceback (most recent call last):\n  File \"./esptool.py\", line 505, in \n    esp.connect()\n  File \"./esptool.py\", line 158, in connect\n    raise Exception('Failed to connect')\nException: Failed to connect\nNathans-MBP:esptool nfriedly$ ./esptool.py -b 115200 -p /dev/cu.SLAB_USBtoUART write_flash 0x00000  ~/Downloads/nodemcu-master-16-modules-2015-07-30-19-07-36-integer.bin \nConnecting...\nTraceback (most recent call last):\n  File \"./esptool.py\", line 505, in \n    esp.connect()\n  File \"./esptool.py\", line 158, in connect\n    raise Exception('Failed to connect')\nException: Failed to connect\nNathans-MBP:esptool nfriedly$ ./esptool.py -b 9600 -p /dev/cu.SLAB_USBtoUART write_flash 0x00000  ~/Downloads/nodemcu-master-16-modules-2015-07-30-19-07-36-integer.bin \nConnecting...\nTraceback (most recent call last):\n  File \"./esptool.py\", line 505, in \n    esp.connect()\n  File \"./esptool.py\", line 158, in connect\n    raise Exception('Failed to connect')\nException: Failed to connect\nNathans-MBP:esptool nfriedly$ ./esptool.py -b 1200 -p /dev/cu.SLAB_USBtoUART write_flash 0x00000  ~/Downloads/nodemcu-master-16-modules-2015-07-30-19-07-36-integer.bin \nConnecting...\nTraceback (most recent call last):\n  File \"./esptool.py\", line 505, in \n    esp.connect()\n  File \"./esptool.py\", line 158, in connect\n    raise Exception('Failed to connect')\nException: Failed to connect\n```\nI tried both connection the DTR/RST pins, just pressing the RST/PROG buttons, doing both, etc. Nothing seems to work. Ground is connected correctly and I'm powering the module directly from my USB's 5v line (it has an onboard regulator).\nBut, like I said, I think the issue is the sudden baud rate switch - @InnovativeIdeas touched on it, but I don't think anyone's explicitly mentioned that it starts at one baud and then switches to another within a second or so.\nIf it helps, here's what the initial output at 74880 baud looks like:\n```\n ets Jan  8 2013,rst cause:2, boot mode:(3,7)\nload 0x40100000, len 1396, room 16 \ntail 4\nchksum 0x89\nload 0x3ffe8000, len 776, room 4 \ntail 4\nchksum 0xe8\nload 0x3ffe8308, len 540, room 4 \ntail 8\nchksum 0xc0\ncsum 0xc0\n2nd boot version : 1.4(b1)\n  SPI Speed      : 40MHz\n  SPI Mode       : QIO\n  SPI Flash Size & Map: 8Mbit(512KB+512KB)\njump to run user1 @ 1000\n```\nand then it switches to 115200 and outputs something along these lines:\n```\nAi-Thinker Technology Co. Ltd.\nready\nWIFI CONNECTED\nWIFI GOT IP\n```\nUpdate: I found a workaround:  use https://github.com/nodemcu/nodemcu-flasher to flash NodeMCU onto the module (once) and then it plays nice with esptool.py after that so you can flash anything you want. \nThe only catch is that it's windows-only for the moment. But, you can use one of the windows 30-day trial vms that MS provides for testing websites in IE. (Believe it or, not, this actually works: I'm on a mac and used a virtualbox image just now. You just have to give the VM access to your usb-uart or whatever you're using.)\nUpdate 2: I think I've just dis-proven my theory about the baud rate switching being the source of the issue. I had a different module, and esp-01 also from electrodragon, with the same build of the Ai Thinker firmware - it gives the exact same output at 74800 and then at 115200, but esptool.py can write to it just fine. So I'm out of ideas about the cause. I'll leave this here since at least the workaround is useful.\n. ",
    "duslabo": "Hi,\nSame issue here... Can anybody fixed this issue ? I tried a lot of times, but no luck.\n. @themadinventor yes found solution.. Thats was the mistake in my circuit :). Forgot to update here... Thank you :)\n. ",
    "jlz3008": "I solved the problem with a lower speed\n```\njlz@isengard:~$ cp ../../firmware/AI-v0.9.5.0\\ AT\\ Firmware.bin f.bin\njlz@isengard:~$ ./esptool.py --baud 115200 --port /dev/ttyUSB0 write_flash 0x000000 f.bin \nConnecting...\nTraceback (most recent call last):\n  File \"./esptool.py\", line 377, in \n    esp.connect()\n  File \"./esptool.py\", line 151, in connect\n    raise Exception('Failed to connect')\nException: Failed to connect\njlz@isengard:~$ ./esptool.py --baud 9600 --port /dev/ttyUSB0 write_flash 0x000000 f.bin \nConnecting...\nErasing flash...\nWriting at 0x0007ef00... (100 %)\nLeaving...\njlz@isengard:~$\n```\n. ",
    "gSTP": "thanks all, problem solved.\nall hardware wired up nicely still produced the ugly \"failed to connect\" error. Just cranked up the external power for arduino nano breakout board to 10V, and that was it:\nConnecting...\nErasing flash...\nWriting at 0x00000400... (100 %)\nCheers all around  :-)\n. ",
    "ColinMiles": "@alesrebec old discussion just just have to thank you for suggesting connecting the ground of the FTDI to ground of ESP!  THANK YOU!!  Nowhere had I seen that suggestion other than here.\n. ",
    "bislinux": "Just few bullet points to sum up\n1. Connect EN to 3.3v\n2. Connect GPIO0 to GND\n3. Connect GPIO15 to GND to flash\n4. Remember to connect the reference GND to the GND of esp8266 \n5.Lastly correctly match the tx and rx lines\nTo flash the firmware\n./esptool.py --baud 115200 --port /dev/ttyUSB0 write_flash 0x000000 ../nodemcu-flasher-master/Resources/Binaries/nodemcu_integer_0.9.5_20150318.bin\nhope it helps\n. ",
    "minouye": "@nfriedly Thanks for the workaround! Using NodeMCU Flasher inside a Windows VM worked for me as well--played nice with esptool after that.\n. ",
    "ToM-Korn": "I had the same problem...\nI had a LED at GPIO2 (with a 1k Resistor) just for testing.\nOne problem seems to be, that if GPIO2 is not high at the moment of programming it does not work. \nHaving GPIO2 floating (not connected to anything) solved it. But as some docs say it would be better to have it high (3.3V) -> see here: \nhttp://www.esp8266.com/wiki/doku.php?id=esp8266_gpio_pin_allocations\nNote :- GPIO2 It is considered safer to pull it high with a resistor on boot rather than leave it floating to avoid possible chip damage if pin is pulled high by your program but also see http://www.esp8266.com/viewtopic.php?f=6&t=3862&p=22524#p22524. \nSo I'd recommend:\n1) check if your pins are set like in the table \n2) check if the GND of your FTDI is connected to GND of ESP8266 (otherwise the would have different potentials)\n3) set your baudrate to 115200 (worked fine for me all the time)\n. ",
    "iitca": "Hi!\nI had the same problem. But I solved it by also connecting CH_PD pin to the VCC\n. ",
    "angelvil": "Hi. I have the same problem, but after to connect gnd to ftdi say: faled to connect. any opinion?\n\n. ",
    "MuhsinFatih": "I had been trying to fix this problem with my esp8266 12e for days. I tried a lot of solutions to fix it. Tried esptool, arduino ide, different baud options etc all kinds of stuff. Just now figured out that it was very stupidly simple solution for me. Just plugged it into a windows machine (I had been using a macbook) and it worked with arduino ide with no change on the default esp programming options. In case it helps, i will tell a little about my setup: I have arduino with the processor removed so I use it for its serial pins. esp's rx goes to arduino's rx (with a voltage divider of course) and tx to tx (no divider). I have the reset line of esp connected to 3.3v and a button to short it to gnd (apologies for ignorance, is this called a pullup resistor?). I guess you know the rest of the connections if you're at this stage anyways.\n(btw, how did I comment a closed issue? Is this normally allowed? Apologies if I made a mistake)\n. Thanks! I subscribed. I will be waiting for the solution. Good luck!\n. @ukrsms off topic: man any doesn't mean none. This is mistaught by english teachers 99.999% of the time :D Just as a friendly reminder ;)\n. ",
    "julr08": "Thanks a lot, my problem was the Ground must be the same. the solution for me.\n. ",
    "gourabdg47": "My blue light wont get off and random characters are showing in the serial monitor, need help ...\n. ",
    "ukrsms": "reading these issues I hoped I'd find the one which help me, but unfortunately any of them was the one. \nBut today I returned again to my ESp-12 module and decided to verify signals at RX and TX with oscilloscope. I was surprised to see that at RX pin there was voltage only near 10V for HIGH state. as a result i found that voltage drop is caused by finite input impedance of the RX pin of ESP. The matter is that I used 5V logic USB-UART so I used a resistor divider with two resistor (10k and 20k [see below)]\n\nIn such a case signal at RX input was very small and ESP didn't response it.\nAfter I replace the bigger resistor with 6.8k and replace the resistors vice versa I forced the ESp to response!\nAlso I want to add that at the beginning the Module work Ok but stopped to react after an unsuccessful flashing\n. ",
    "brynnb": "Having the same issue as @nfriedly - I have an ESP-12-E and communicating with minicom is working fine, but esptools won't connect. Unfortunately I'm still waiting on my USB/TTL converter so using the NodeMCU flasher isn't an option. \n. @projectgus I have it wired directly to the GPIO pins of my Raspberry Pi. \nFairly sure I have wiring correct, I will double check in the future using that guide since I didn't see it before. But at a glance it looks to be the same advice I found/followed elsewhere. \n. ",
    "ReinVelt": "I had the same problems, tried everything and nothing worked.\nAfter i replaced the USB cable everything worked perfectly!. ",
    "SteveBaker": "I've been spending the last 24 hours fighting a \"Failed to connect\" problem - I had a new batch of ESP 12F's arrive - and when I tried to program one, I got the error.  According to the AT-GBV command, it has a newer version of the boot loader than any of my older ESP chips (Dated Dec 2nd 2016!) - and of course I naturally assumed that they broke something!  But after trying my best to diagnose it by hacking around in esptools.py (and my Python skills seem to have rusted rather badly - so that didn't go well) - I eventually gave up and decided to try a second board from the same batch...lo and behold, it worked perfectly...so it looks like I had a bad ESP board.  Fortunately, at $2 - who gives a damn!\nGood news!   The Dec 2nd build works OK!\nMoral of the story: Before assuming the worst - try another ESP board!  :-)\n. ",
    "gdamjan": "The other approach is to make esptool a proper package/module and register an console_scripts entry-point [1]. This way, when setup.py install it, it will create a proper script with the correct shebang for the installed python. \n[1] http://www.scotttorborg.com/python-packaging/command-line-scripts.html#the-console-scripts-entry-point\n. ",
    "jiegec": "Or consider using #!/use/bin/env python2.7 ? Tested on Mac and Arch Linux\n. I also agree with @gdamjan \n. ",
    "dbrgn": "Python 2/3 support would be great :)\n. ",
    "jrobeson": "@projectgus : I took a look at the branch.  I think it should start a little smaller.  Can we adapt the coding standards (defacto or otherwise) so that all byte literals are marked up with b'?  That'd go a long way to making 2/3 work and stay working.\n. did you try 74880 as baud rate?\n. Is it still possible to rely on non-vendored versions of those modules third party modules?\nThe vendored modules are going to make it difficult to properly package esptool for various linux distributions like Debian, Ubuntu,and Fedora.   . it's just gonna get rotten again if the maintainers don't commit to always using b' on byte strings\nEDIT: and requiring them to be in all accepted PRs.\n. I didn't do anything, but I am against unicode_literals. I'd rather see explicit u' where unicode is allowed.\n. I don't like using the explicit u' either, but it's the only reasonable way forward (imo) if 2/3 support is to be kept.  \n@projectgus doesn't just have to worry about about folks who use esptool directly, but also downstreams that might have built on top of it.  It's not a decision to make lightly.\nEDIT: I mean reasonably if a library like python-future isn't used. It offers a py3 like string type.\n. so would this PR be merged if unicode_literals was removed?\n. @projectgus : so we talked about whether the interface would be compatible between esptool 1.x and 2.x.   Did you decide against doing so?\n. merge it. I now think that just the bit about permissions needs to go on its own line, thus keeping the wording of @pfalcon's patch intact.  I'll do that after this is merged.\n. I'm not so sure about unicode literals. I don't know the codebase well enough, but in a previous 2/3 compat project, we ran into issues with lots of os level APis not accepting unicode, so I'd be careful with it.  Some more discussion is here: https://github.com/PythonCharmers/python-future/issues/22\n. If future is going to be required, then it should be part of the flake8 configuration too, so it'll reject any new files without these future headers.\n. if we'd like be sure that it works out of the box on current debian stable and up, then 3.4 should be added too.\n. is there a 32bit version of this toolchain? If so, might wanna condtionally use it.\n. oh, i didn't realize i was commenting on the .travis.yml file, so ignore that!\n. i think this deserves its own bullet point.\n. to clarify, I run into this so often, that I think it deserves its own bullet point :)\n. ",
    "jeremyherbert": "I've just opened a pull request of this tool to which works on python2 and python3. I'd like to use micropython, and my feeble mind cannot handle running a script in python2 to install a python3 interpreter ;) It's here: https://github.com/themadinventor/esptool/pull/127\nThis should fix this issue.\nQuestions/comments/suggestions welcome.\n. Also: I've only tested this on my mac. Python 2 was the system install, python 3 was an anaconda install. Any other operating system testing would be appreciated.\n. @projectgus here is my opinion on these things, but ultimately it's not my project :)\nI think there should be a v1.2 with only Python 2/3 support. I think that releases should be as small as possible, and adding esp32 at the same time makes it hard to work out where something went wrong in the past. \nOn the Unicode literals, I think they should stay. I think that people should get used to all strings being Unicode in Python, and everything should be designed with Python3 as the primary target, with python2 added in a secondary fashion. Most of the PyCon talks by core developers in the last few years seem to have one slide where they just beg people to stop using Python2. Some Linux distributions don't even ship python2 anymore (and others are trying to join them). Adding the u'' everywhere is redundant and unnecessary in Python3, so I wouldn't want to add it in. \nThe only people who should be actively using python2 still are perhaps those with old, large codebases and complex C extensions. This project targets modern chips (esp32 is barely out yet!), has a very small code base and no compiled extensions, so I don't think it makes sense to go out of the way to keep it. \nFrankly, if it was up to me I would just drop python2 altogether ;)\n. Again, this is just my opinion, but I would say release 1.2 with python 2/3 support, and say that it is the last version with python 2 support. Other large projects like scons are taking this approach. People can still use the version if they want python 2 for whatever reason. \nThen, add the esp32 support to the python3-only version (v2 onwards). You won't break any existing tools, because there aren't any yet :)\n. Ok, I will try to get on to changing this on the weekend (unless someone else beats me to it)\n. I don't think it will be an issue\n. Hi again folks, \nSorry for the delay on my end. I've been a bit stuck with real life at the moment (in the middle of writing up my phd thesis). I will get to it as soon as I can, but don't wait up for me if you think you can do it yourself. Sorry.\n. Actually, looking at it now, I have my labels the wrong way around; the glitch is on the IO0 line, not the RESET line. But everything else stands.. done. thanks.\n. added to the flake8 config. As for whether to use unicode_literals or not, I will defer to the big boss @themadinventor as to what he thinks\n. ",
    "jqdoumen": "Does this mean you suspect that it is not the code but something with the ESP8266 or the board is wrong?\nSome extended error messages might help indeed ... :-)\n. Been revising the whole setup ... I was using the 3.3 V output of the Arduino Uno, which seemed to work even though a lot of people claim it doesn't. But just to make sure, I got it now on 5V converted tot 3.3 through an L78L33 converter. The result is:\nVCC: 3.3V\nReset: left open\nCH_PD: 3.3V\nTX: directly to RX pin on Arduino\nGND: to -\nGPIO2: 3.3V\nGPIO0: to -\nRX: to TX of Arduino through another L78L33\nWith the GPIO2 and GPIO0 left open, I got the blue flashing. With both connected as explained above, not blue flashing, so I guess correctly configured. \nStill, the errors I get with the esptool remain the same ... \n:-(\n. Hi themadinventor and a-pedde, thanks for you giving a helping hand, even though this is most likely not the proper place for it ...\nI'll possibly pose some more novice questions ... \nI've tried to create the voltage dividers, both for the RX-TX line, and the power. Before, when using the pure 3.3V of the Arduino, or the L78L33, the ESP8266 was functional, for several days (OK, it restarted a couple of times, but most of the time was working properly). After I screwed up with the on-line firmware flash, the chip still had the red light on (in firmware upgrade modus) or the red light on and the blue light flashing (in normal modus). With the voltage divider setup now, there is nothing, not lights whatsoever. \nSetup is : grnd - 2KO - split off - 1KO - 5V (from the Arduino). \nWhat I couldn't find out is wether the split off can contain only one connection or more. That is, should I create separate voltage dividers for VCC, GPIO2 and CH_PD?\nYes, I'm using the Uno, with the atmega328p chip. I actually don't feel comfortable removing that chip, so if the flashing should be done without, then I'd rather go for a seperate FTDI cable.\nRegarding the L78L33, no idea what the brand name is ..\n/Users/jandoumen/Downloads/IMG_0168-1.jpg\n. ",
    "a-pedde": "qdoumen each L78L33 (like most other Low Dropout regulator) needs 2 capacitors (e.g. http://www.st.com/web/en/resource/technical/document/datasheet/CD00000446.pdf Page 4 test circuits).\nOutput current up to 100 mA is not enough to power the esp8266 (maybe your L78L33 is from an other vendor then ST, please check the datasheet if you will get 200+ mA output).\ndon't use the L78L33 for the RX: to TX line, better use a voltage divider from two resistors.\narduino-resistor-example:\nhttp://www.instructables.com/id/Cheap-2-Way-Bluetooth-Connection-Between-Arduino-a/?ALLSTEPS\nDon't use the 5V like shown in the example ;) \n1. Which arduino board do you use ( i guess arduino uno with(out) atmega328p?)\n2. Do you use the arduino board just like a FTDI-replacement?\n3. Is the atmega328p disconnected from the board? (This should be done if you only use the arduino-board as an FTDI-replacement)\n. you shouldn't use the resistors to get 3,3v for VCC!\nits only for the tx/rx lines.\nyou can't use the arduino-board to programm the ESP without disconnecting the atmega-chip.\ntry to get a proper LDO (LM 1117 T3,3, TS 2940 CZ33, maybe your L78L33 is ok if it has more then 200mA output current) + 2 caps shown in the datasheets of the LDO you get.\ni dont think the 3,3v from arduino would be enough to connect to wifi (maybe this was the reason for the brick while you tried to flash your module via WiFi?)\nThe 3,3v out of the cheap FTDI/SILABS/... USB2UART adapters aren't enough for proper usage with the esp8266, too\n. ",
    "zendes": "I'm a big fan of eBay for these kind of parts if you don't want to make them yourself. Something like www.ebay.com/itm/291156034828 coupled with a 1A usb phone/tablet charger will get you a stable power souce.\n. ",
    "Baael": "Had similar problems with UART. \nI needed to connect reset pin to reset on UART - it solved that problem. \nFor one of three same modules I had to add additional power source, two of them work nice with Arduino/UART only (ESP8266 esp-01)\n. ",
    "nekromant": "@pfalcon If I'm not mistaken, you are the one who implemented the magic required to generate rom images?\n. @pfalcon I know that and I did NOT get rid of call_user_start, it's there. The problem is that after stripping the elf file is missing symbol information. e.g. call_user_start is there, but you can't find it by symbol name.\nAs of an even better option I've just noticed - it looks like ELF entry point IS the address of call_user_start, so using elf entry point would be an even cleaner approach, rather than generating a map file and reading an address from it.\n-gc-sections comes very handy in terms of reducing code size.\n. If what I remember about ELF format, symbols are stored in .symtab/.dynsym sections. Since they are not referenced by any code in the actual firmware (why should they?) they get ditched by -gc-sections, which looks kind of sane and expected.\nUsing ELF entry point instead of embedding sed onliners into python code looks like the best solution so far. I think I'll throw up a patch as soon as I get a spare minute. \n. ",
    "icnagy": "Got the same problem on 10.10.3.\n. ",
    "abl": "Relying on USB for power, and connecting a different serial device, I boot in to (1,7) and was able to reflash without any issues. Even more mystified now...\n. @MacDada I connected a 3.3V FTDI USB->UART to the RX/TX lines and held down the flash button as I connected the onboard USB for power.\n. ",
    "MacDada": "\nI've had AT commands working, but it stopped when I did AT+CIUPDATE.\nI can't get any CH340G driver to work on Yosemite.\nI installed ubuntu with vagrant+virtualbox to make sure there are no OSX\u2013specific software problems.\nI power NodeMcu from Mac using built in USB.\nI \"talk\" with NodeMcu through Arduino Mega serial with its Atmega chip shut down \u2013 it speaks \"garbage\" (because of AT+CIUPDATE).\nFlashing with esptool doesn't work.\nI've tried flashing with and without the voltage divider.\n\nI show my setup plus what works and what doesn't here (sorry for my bad english :P): https://www.youtube.com/watch?v=AibvuZ4YB7Y\n@abl How exctly did you make it work?\n. Check this out: https://github.com/themadinventor/esptool/issues/22\nI'm also having the \"failed to connect\" error, but might not be for the same reason (gonna explain after I make a diagram with my configuration).\n. ",
    "0x2b3bfa0": "@projectgus I think that he suggest to open the connection at 74800 and once it gets the bootloader response, change the speed to 115200 (or whatever speed you want)\n. Hi Angus,\nI'm using the latest version (I've issued git clone {awfullylongurl} command yesterday).\nI've read on the ESP forum that this may be because the FTDI skips packets, but I thing that it may be software-releated,\nOk, I'll send you all the material in a while.\nCheers,\nHelio (formerly crushedice2000 ;-)\n. I'm really confused. Now it works with the default parameters. :confused:\nI don't made any special thing. The only thing that changes is that now I'm flashing Basic instead of NodeMCU Lua\n. Huh!? It flashes well the esp8266basic firmware but stops at random percentage with NodeMCU. NodeMCU flashes well at low speed.\n. Here you're a asciinema recording of my session: https://asciinema.org/a/3tdlyhhbvqo996ospmc72hkwi\nI attach here both firmwares in a zip file (renamed as TXT because GitHub doesn't allow me to upload ZIP)\nZipped firmwares (please rename extension to zip).txt\n. If you need to have straced :laughing: ssh access to my computer to try things on the ESP8266, feel free to request it me.\n. Asciinema is handy for these things ;-)\n\nAbout the FTDI board, I'll try to answer all your questions:\n\nWhat kind of FT232R adapter board are you using?\n\nA cheap one, bought in China (as all are made in China, even the ones I can buy in the local hardware store).\n\nWhere did you get it?\n\nhttp://www.aliexpress.com/item/FT232-Brush-USB-To-TTL-Serial-Cable-Line-Electric-Adapter-FTDI-Chipset-Computer-FT232RL/2026090019.html\n\n\nDo you think it's more likely to be genuine or fake?\n\nI don't know how to test it. I can't try to \"brick\" it with the latest FTDI driver because I don't use Windows, but only OS X/Ubuntu.\nHowever I think that it's fake, because the reference isn't laser etched, but printed with some white ink.\nI've found on Google this picture to determine if the FTDI is original:\n\nSource: http://hackaday.com/2014/02/19/ft232rl-real-or-fake/\n\nI also attach some photos of my FTDI chip (I've removed the USB plastic shield and I've found a pretty small and smartly made board that allows me with a soldering iron to change the voltage between 5v, 3v3 and VIN)\n\n\n\n\nWhat I consider a strange thing is that, with the default parameters (0x400 and 0x1800), the ESP8266Basic can flash correctly, but the NodeMCU Lua firmware stops. This remembers me to this\n. The asciinema was recorded on a late 2013 iMac with OS X 10.11, Now I've reproduced the problem on a Dell Vostro 3750 laptop with Ubuntu 14.04 with the same results\n. In Ubuntu it even fails with the ESP8266Basic firmware. Here you\u0155e the asciinema.\nhttps://asciinema.org/a/9jp4dpcr02q7vfw2gke1b17a5\nHowever this is another problem that should be in another issue.\n. @projectgus now arrived a NodeMCU (or something like from Ali) and it works correctly. The USB->Serial adapter is a CP2102. I believe that is a FTDI-specific issue.\n. @themadinventor @projectgus: What can happen?\n. @bobek: This is really strange... Now I have 5 NodeMCU (one fried when I used a GPIO for input at 220V AC logic level). And they don't do anything bad. Flashing works fast. The chip that NoceMCU uses is CP2102. However, I can't imagine that the FTDI is \"worse than others\".\nIs not good if more people has my problem. However, I'm happy to find a issue companion :smile_cat:\nMaybe we can solve the issue.\nCan be a problem of the mA that the FTDI can deliver for power? I don't know. Now I'm flashing with the slow method and connecting the ESP to V\u1d62\u2099 (5V) and it's alive. :smile:. Children, don't do this at home! :smiling_imp: \n. @projectgus: Thanks! \n. ",
    "julianh2o": "Actually.. hmm, it seems like this may have changed recently in the esp8266/Arduino code... I was perhaps running an older version, in the latest version of the esp8266/Arduino it seems that there is agreement with esptool.\n. ",
    "GeorgeHahn": "Do you know where the NodeMCU solution is documented?\n. ",
    "scargill": "That is very informative. I've been having trouble with this since version 1.0 of the SDK and reversing the flashing order sorts it - but it would be nice if it worked properly...  unfortunately the code above... I have no idea where that goes, using Windows Eclipse and Makefile. Any idea?\n. ",
    "markusgritsch": "@themadinventor\n\nSeems like my reference hardware setup is bad; it is too forgiving,\nI usually can't reproduce the connectivity problems ;)\n\nFor me at 115200 baud it also works reliably every first time. However, I prefer to upload at 500000 baud, which dramatically shortenes the waiting time, and at those high baud rates, I failes sometimes. Therefore the second outer reset loop from @projectgus is very welcomed :)\n. ",
    "pietrushnic": "+1\nThanks for this hint.\n. ",
    "ceremcem": "I got the same error just because I left /dev/ttyUSB0 port open in another process accidentally. Returning users may want to check this parameter too. \n. ",
    "Trospector": "+1 ceremcem, I had the same problem and closing Arduino IDE which had the port open solved the problem.\nThis problem also occurs if your power supply is not ok. \nSo, two independent causes for this problem:\n- /dev/ttyUSB0 port is simultaneously open by some other process/application\n- power supply is flakey.. ",
    "jeremywho": "I'm having the same problem.  On OS X, I get the failed to connect error.  On Windows I can use nodemcu flasher no problem.\n. ",
    "stheophil": "I\u2019ve traced some information from the esptool.py tool today. It seems upon sending the sync message, I get no response at all. I can see the bootloader message at 75000 baud, so again, wiring etc are fine. \nI\u2019ve read elsewhere of problems with CH340 serial chips, Mac OS X and esptool that simply went away when using another serial adaptor. I\u2019ve ordered an FT232-based adapter and will report back with the results. \n\nAm 11.05.2015 um 22:57 schrieb jeremy notifications@github.com:\nI'm having the same problem. On OS X, I get the failed to connect error. On Windows I can use nodemcu flasher no problem.\n\u2014\nReply to this email directly or view it on GitHub https://github.com/themadinventor/esptool/issues/36#issuecomment-101044614.\n. The problem seems to be the CH341 chipset or the Repleo driver. I\u2019ve bought the adafruit FTDI friend and it works without any issues. \nAm 11.05.2015 um 22:57 schrieb jeremy notifications@github.com:\nI'm having the same problem. On OS X, I get the failed to connect error. On Windows I can use nodemcu flasher no problem.\n\u2014\nReply to this email directly or view it on GitHub https://github.com/themadinventor/esptool/issues/36#issuecomment-101044614.\n. \n",
    "LucasG2000": "Just a note, commenting the Exception in the connect method of esptool.py is enough for me for burning the firmware with a CH341 chipset under OS X using Repleo driver. Leave like this https://github.com/themadinventor/esptool/blob/master/esptool.py (line 157):\n```\n    def connect(self):\n        print 'Connecting...'\n    for _ in xrange(4):\n        # issue reset-to-bootloader:\n        # RTS = either CH_PD or nRESET (both active low = chip in reset)\n        # DTR = GPIO0 (active low = boot to flasher)\n        self._port.setDTR(False)\n        self._port.setRTS(True)\n        time.sleep(0.05)\n        self._port.setDTR(True)\n        self._port.setRTS(False)\n        time.sleep(0.05)\n        self._port.setDTR(False)\n\n        self._port.timeout = 0.3 # worst-case latency timer should be 255ms (probably <20ms)\n        for _ in xrange(4):\n            try:\n                self._port.flushInput()\n                self._port.flushOutput()\n                self.sync()\n                self._port.timeout = 5\n                return\n            except:\n                time.sleep(0.05)\n        # this is a workaround for the CH340 serial driver on current versions of Linux,\n        # which seems to sometimes set the serial port up with wrong parameters\n        self._port.close()\n        self._port.open()\n\n    #Comment this line (157)\n    #raise Exception('Failed to connect')\n\n```\n. ",
    "sguilly": "After an update of my linux distribution, esptool stop to work well.\nTo fix it, my esptool check number of available bytes before process read bytes and add some sleep if necessary.\nI pull a request : https://github.com/themadinventor/esptool/pull/61\nSt\u00e9phane\n. Previously, the original file works fine but after an (OS) update, i had this issue.\nNom : Linux sguilly-Z97X 3.13.0-64-generic #104-Ubuntu SMP Wed Sep 9 12:36:12 UTC 2015 x86_64 x86_64 x86_64 GNU/Linux\nPython 2.7.6\nThe serial adapter is a chinese USB/RS232 model.\nI will try to take time later to report serialPortException.\nBR/\nSt\u00e9phane\n. ",
    "vowstar": "DIO write data 01 FF FF FF AA 55 AA 55 01 00 00 00 FF FF FF FF 1C 00 00 00 FF FF FF FF F2 00 00 00 FF FF FF FF to header of last 1024Bytes of flash(If using 1MBytes flash it is 0xFF000). \nIt seems very strange and I don't know why.\n\nI'm sorry, it's my mistake. DIO seems no problem, but the SDK really strange.\n. ",
    "creationix": "Is someone working on this?  I don't quite understand @vowstar's comments, but I would love a working way to build nodemcu in linux and then flash to my nodemcu devkit on the same device.  It's a pain to transfer the build files to windows every time I want to flash.\n. Awesome work everyone!\n. ",
    "squix78": "I have two notes to your point @creationix: \n1. a Linux user could most probably use the espressif tool together with wine. It worked for me under Mac OS X and I don't see why it shouldn't under Linux (see http://blog.squix.ch/2015/05/esp8266-flashing-nodemcu-v10-on-mac-os.html)\n2. The Arduino IDE for ESP8266 seems to be fixed. Their bult-in esptool for upload works now for the NodeMCU V1.0. I tested it yesterday...\n. ",
    "vcarriere": "I have found that the problems seems to be in the flash_begin function.\nThe problem seems to be at the line 197 in esptool.py\nEspressif : \nstruct.pack('<IIII', size, 0x200, 0x400, offset))[1] != \"\\0\\0\":\nEsptool : \nstruct.pack('<IIII', size, num_blocks, ESPROM.ESP_FLASH_BLOCK, offset))[1] != \"\\0\\0\":\nIn the esptool.py from themadinventor the 0x200 is replaced with num_blocks and it causes it not to work.\nAm I missing something here? I\u2019ve been trying to make this work for a week (first time working with ESP).\nPlease just let me know if this is the problem and explain.\n. ",
    "marcoskirsch": "I have successfully flashed ESP01 from OS X using a FT232R USB UART adapter I bought at Fry's.\n. ",
    "tuanpmt": "this is my try (line 352)\ntry:            \n    self.symbols[fields[2]] = int(fields[0], 16)\nexcept ValueError:    \n    print fields\nand the output:\n['U', 'os_intr_lock']\n['U', 'os_intr_unlock']\n``\n. It's working now, thanks \n. ",
    "cal101": "I found thats not necessarily the \"call_user_start\" symbols thats missing but \nsometimes missing symbols didn't make the linker fail.\nYou see that is the case here, too: os_intr_lock is missing here\nCan't see a pattern when they get through the linker.\nWhen doing an \"nm\" on the image you see the unresolved symbols.\nIn this case I guess I know the reason for the problem.\nUnfortunately nodemcu stuff does not compile with -Wall and so it does not warn on missing prototypes but just guesses one. \nSDK 1.0.1 has defines for os_intr_lock etc. that map to (from memory) ets_intr_lock.\nThose defines are gone for SDK 1.1.0 and so the linker looks for the functions os_intr_lock.\nI added a compat header that has those defines.\n. ",
    "atx": "\nBut what's most annoying is \"persistent sticky\" nature of the problem.\n\nDoes reflashing esp_init_data_default.bin (or as a next step, flashing an entire flash image from a correcly working board) at least temporarily reset this? \n. @pfalcon which kernel version do you use?\nSee http://lxr.free-electrons.com/source/drivers/usb/serial/ch341.c?v=3.18#L312\nThis line has been removed in 4.0\n. ",
    "urmilparikh": "Added a pull request #85 \n. Thanks for merging.\nYes, I have noticed that top 8 bits are always zero in all ESPs that I have come across.\nBut that may change any day!\n. ",
    "kanflo": "@themadinventor, please merge\n\"workaround for bug in SPIEraseArea\" is needed when firmware/0x40000.bin grows larger than 0x30000 bytes and will save lots of headache as people move up the ESP IOT SDK versions as 0x40000.bin shows steady growth :)\nThis can easily be tested with dd:\n```\nesptool.py --port /dev/USB0 --baud 921600 write_flash 0x00000 firmware/0x00000.bin\nesptool.py --port /dev/USB0 read_flash 0 0x2000 0x0.bin\nhexdump -C 0x0.bin | head -1\n00000000  e9 03 00 00 04 00 10 40  00 00 10 40 88 71 00 00  |.......@...@.q..|\ndd if=/dev/zero of=firmware/0x40000.bin bs=1 count=0x30000\nesptool.py --port /dev/USB0 write_flash 0x40000 firmware/0x40000.bin\nesptool.py --port /dev/USB0 read_flash 0 0x2000 0x0.bin\nhexdump -C 0x0.bin | head -1\n00000000  e9 03 00 00 04 00 10 40  00 00 10 40 88 71 00 00  |.......@...@.q..|\ndd if=/dev/zero of=firmware/0x40000.bin bs=1 count=0x30001\nesptool.py --port /dev/USB0 write_flash 0x40000 firmware/0x40000.bin\nesptool.py --port /dev/USB0 read_flash 0 0x2000 0x0.bin\nhexdump -C 0x0.bin | head -1\n00000000  ff ff ff ff ff ff ff ff  ff ff ff ff ff ff ff ff  |................|\n```\n. You might have run into this bug:\nhttps://github.com/themadinventor/esptool/issues/33\nTry flashing the binaries in reverse order:\nhttps://github.com/kanflo/esp-open-rtos/commit/d4873379a927eb28692a03509fad74d5ce4fe5f6\n. ",
    "jkent": "I'm closing this to reopen as two separate pull requests shortly.\n. I'm curious if the behavior for DIO from #52 should actually be used as the default?\n. @themadinventor poke\n. Neat, I didn't know about it either.  There is one problem it doesn't solve though:  getting boot messages immediately after your flashed firmware runs.  Maybe miniterm.py can be imported to do this?\n. I haven't tried chaining to be honest.  I'll give it a shot.  Thanks!\n. ",
    "omerk": "@jmattsson Thanks for this fix, I can verify that it solves the filesystem issues I've been having on the new NodeMCU boards.\n@themadinventor esptool, without this fix, is currently broken for all NodeMCU R2 board users. Please consider merging this PR.\n. ",
    "thehose": "Hey folks,\nI have a NodeMCU V2 board (from China) which came pre-loaded with Lua. I actually want to use Micropython, so I setup a build environment (OSX), built and loaded uPy on the board and while I get a prompt, it's really disabled. I get a memory check error.\n\nAfter a lot of google, I came across this issue with esptool.py and thought I'd found the problem. Got the latest version of the tool and changed the defaults for -fm/DIO and -fs/32m in the tool. \nSame results.. I thought maybe it's a uPy issue, so to test I tried to load the latest Lua 0.9.6 using the tool as ( esptool.py --port=/dev/tty.SLAB_USBtoUART write_flash 0 ~/Desktop/nodemcu_integer_0.9.6-dev_20150704.bin -fs 32m -fm dio -ff 40m) and same type of issue..\n\nAny advise would be appreciated.....\n. I have a Nodemcu V2 development board and this only happens when I depress the \"RST\" button, which I have to do when I upload any firmware. Is this what you refer to as a reboot ?\n. ",
    "jmattsson": "The MEM CHECK FAIL!!! is actually completely(?) harmless, though it doesn't sound like it. During boot-up the system looks for various saved values (calibration etc) in RTC system memory. On a cold-boot (either power-on or releasing CH_PD line) the RTC memory is uninitialised, and this message gets printed. On a reboot you would not get it.\n. Ah, even nicer, thanks! I couldn't get the parser stuff to be happy when I simply passed the block0 in as another parameter to verify_flash (can you tell I'm not a Python person? :laughing: )\n. ",
    "gelraen": "FYI, I did some analysis on how and why this fix works: https://cesanta.com/blog/esp8266-flash-erasing-issue.shtml\n. ",
    "flyashi": "After debugging for hours, this solved my issue. Please accept this pull request and save future me's the hassle!\n. ",
    "eriksl": "Something like that.\nI now do it explicitly, I take the iram section (the 0x00000 file), I pad it to 0x10000 and then append the irom section (0x10000 file) to it. Not really rocket science ;-) It would be nice if esptool could do that itself. It may need an extra option to specify where the irom section starts.\n. ",
    "amalashin": "@kanflo Yep, I faced exactly with this bug! Thank you very much for help. Files order switch resolved my problems.\n. ",
    "martinayotte": "Yes, it seems to work now !\nThanks !\n. ",
    "nqd": "Sure, this is the 4 files https://www.dropbox.com/sh/8nszizvwose778r/AAD-yMjdXGPnBTh9SblIlXBma?dl=0\nThanks.\n. Great thanks. Will check next day when I touch the esp again.\n. Confirmed. Thanks again!\n. ",
    "skorokithakis": "What I would change before submitting to PyPI would be to make the script be called esptool after installation, rather than esptool.py, and to improve the documentation a bit. As a complete newbie to the ESP8266, I'm not very clear on how to use esptool. Then again, that might be more because I don't really know what it does or how, rather than a failure in the documentation.\n. Haha, possibly, but it may be out of scope for esptool.\n. Sure, that's up to you. All I have is this esptool, but if you guys think that a collision has a reasonable chance of occurring, esptool.py is fine.\n. ",
    "egueli": "Sorry for the delay... glad to help! Keep up the good work :)\n. ",
    "hosaka": "Great! Thank you for such a quick reply!\n. ",
    "bobek": "I have very same issue. I am on Debian sid, tested with kernel 4.3.0 as well as 4.4.0. No difference. I have tried to flash using Windows machine and was not successful. My FTDI adapter is using the same chip as @crushedice2000 \nInterestingly, whole flow was working last week. I am not aware of any real change in the setup.\nAnyway :+1: to @crushedice2000 as I have been able to flash firmware after 2h of fiddling with caps and pullup resistors ;) I was able to do all read ops, like dump_mem only flashing was failing.\n. ",
    "BG2BKK": "Hi!\nThank you for your reply.\nMy device is nodemcu DEVKIT 0.9, this one : http://nodemcu.com/index_en.html#fr_54747661d775ef1a3600009e.\nI am newbie to eps8266 so that I get the the flash size & type by default. I type \"make flash\" under directory nodemcu-firmware. The cmd \"../tools/esptool.py --port /dev/ttyUSB0 write_flash 0x00000 ../bin/0x00000.bin 0x10000 ../bin/0x10000.bin\" is executed in fact.   The size of 0x00000.bin is 35KB(35024)  and the 0x10000.bin is 395kb(395588).\n. Hi! Here is the output of the cmd\n$ sudo python ./esptool.py --port /dev/ttyUSB0 erase_flash\nConnecting...\n$ sudo python ./esptool.py --port /dev/ttyUSB0 write_flash 0x00000 ../nodemcu-firmware/bin/0x00000.bin 0x10000 ../nodemcu-firmware/bin/0x10000.bin \nConnecting...\nErasing flash...\nWrote 35840 bytes at 0x00000000 in 3.5 seconds (82.7 kbit/s)...\nErasing flash...\nWrote 396288 bytes at 0x00010000 in 38.4 seconds (82.5 kbit/s)...\nLeaving...\nIt doesn't work again :D\n. Thank you for your effort!\nThis is my output:\n``` lua\n$ sudo ./esptool.py --port /dev/ttyUSB0 flash_id\nConnecting...\nManufacturer: e0\nDevice: 4016\n$ sudo ./esptool.py --port /dev/ttyUSB0 read_mac\nConnecting...\nMAC: 18:fe:34:00:d2:9a\n```\nIt's weird that the nodemcu-flasher on Windows could work, using the same 0x00000.bin and 0x10000.bin. \nI can send you the two bin files by email.\n. Hi~\nHere is my current station:\nI download the bin-file and src-file of v0.9.6 firmware  frome https://github.com/nodemcu/nodemcu-firmware/releases/. I burnt the bin-file with esptool as the  https://github.com/themadinventor/esptool writes, and it succeed to enter the lua environment after restart. Now the problem is, when I compile the nodemcu-firmware and get 0x00000.bin and 0x10000.bin, I succeed to burn them, but the nodemcu doesn't work. So what next?\n. Hi guys~\nMaybe we all ignore something important such as boot mode or flash mode of esp8266, for example https://zoetrope.io/tech-blog/esp8266-bootloader-modes-and-gpio-state-startup. @projectgus Could you teach us something about the boot mode :D\n. Hi guys~\nMaybe I solved this issue. Here is my solution\nbash\n sudo esptool.py --port /dev/ttyUSB0 write_flash -fm dio -fs 32m -ff 40m 0x00000 0x00000.bin 0x10000 0x10000.bin\nIt is clearly confirmed that args such as -fm, -fs and -ff  should be specified. \nIf it still doesn't work, try to do sth before you burn your bin-file:\n1. press the FLASH button (don't release)\n2. press the RST button and release\n3. release FLASH button\nThen it should work correctly.\ngood luck~\n. ",
    "bolsunovskyi": "Same behavior :(\n. I resolve the issue. I'm change baud rate for esptool to 9600. And It work!\n./esptool.py --baud 9600  write_flash 0x00000 ../nodemcu-firmware/bin/0x00000.bin 0x10000 ../nodemcu-firmware/bin/0x10000.bin\n. And after flashing nechesarili plug out and plug in the cable.\n. As I understood if you have nodemcu development kit, you don't need to worry about this.\n. ",
    "asimzeeshan": "I had the same issue, I just changed my cable and flashed it. It worked\nSomething was wrong with my other cable although it was charging well\n. ",
    "marcelstoer": "\n...args such as -fm, -fs and -ff should be specified\n\nWhat a pity that SPI flash info args are not documented anywhere here (I expected that in README.md).\n. > go for it!\nMe? I don't know all those parameters (except for the 3 I dug up elsewhere).\n. Thanks. Is there a reason you didn't document the short forms (i.e. -fm -fs -ff)?\n. Will do.\n. So does 921'760 and 460'800.. no clue.\n. I'm on OS X and I tested flashing a WeMos D1 mini which uses a CH340 adapter from Winchiphead. 230'400 is the highest I can go. I wouldn't expect esptool to throw \"Invalid argument\" if a baud value is simply too high for the serial adapter.\n. At this point it makes more sense to track this as an issue.\n. No, I live with it.\n. > 32mbit is the largest supported by the Espressif SDK\nI was told that according to the ESP8266EX data sheet it supports max 128mbit. The advent of those 16MB WeMos modules kind-of proves that.\nThe NodeMCU firmware project still hosts its own copy of esptool.py (don't ask, I don't like it). It has had partial support for 64m and 128m since June: \nhttps://github.com/nodemcu/nodemcu-firmware/pull/1367/commits/7ecd625db6c21b2ce4122adcb0993d677ccd9877#diff-e6e8c9cf42985f99554a22a8a34b90e4 I say partial because I don't see how that quick-fix would play nice with auto-size detection.. Any chance this will be included in 2.0? . If you replace \"Android\" with \"Arduino\" (my guess) then this sounds reasonable \ud83d\ude06.\n\nturn the error-and-abort condition when >4MB is detected into a warning and set the flash size to e.g. 1MB automatically\n\nHow likely is it that this would upset some firmwares? Do you know if there are cases where a firmware would fail if esptool.py used 1MB instead of 4MB (or vice versa)?. > how to deal with a hardware configuration that's not specified by Espressif and thus isn't backed by consistent SDK support.\nIt is specified, chapter 3.1.3 specifies 16 MB max, even though it says \"theoretically\": http://espressif.com/sites/default/files/documentation/0a-esp8266ex_datasheet_en.pdf#page=12 . @igrr out of curiosity...how are things developing wrt that next release?. > Changes for 8MB & 16MB flash sizes are in d2f3567, ready to merge.\nLooking forward to it. Will you make a 1.3.1 release that contains this fix or will we have to wait for 2.0-final? Reason for asking: my policy for the PyFlasher is that I only incorporate final esptool.py releases.\n\n4MB-c2 configuration, which I think was added for NodeMCU some years ago\n\nI wouldn't know, sorry.\n\nThe 2.1.0 ESP8266 non-OS SDK to support these flash sizes will be released shortly.\n\nWill we see that on https://github.com/espressif/ESP8266_NONOS_SDK?. Two down (SDK release, esptool commit), one more to go. Any idea when v2.0 is gonna be released? . I thought about this but I've always used the latest from the master branch.\n/Applications/esptool (master) > git branch --all\n  dev\n* master\n  remotes/origin/HEAD -> origin/master\n...\nvim esptool.py opens a file that says __version__ = \"1.3-dev\"on line 34 which is identical to what I see here on GitHub.\nEXCEPT that I forgot to install the latest. So, esptool.py xxx actually ran the system-wide but old script even though there is an updated script in the current directory. All good now.\n. I observed similar issues with that chip on OS X, see #102.. Likely related to #148?. Thanks Angus.. I'm working on a wxPython GUI for esptool: https://github.com/marcelstoer/nodemcu-pyflasher\nThe intention is for this to be packaged with PyInstaller into a self-contained binary for all the NodeMCU Windows users who work on a platform that a) doesn't come with Python and b) doesn't treat the CLI as a first-class citizen.. > Neat!\nThanks, it's all give and take \ud83d\ude04 \nYou provide a great flashing tool, I build a GUI for it, I run the NodeMCU cloud builder, you build firmware with it to improve esptool (https://github.com/espressif/esptool/commit/c9cb4da7bedcf48060acd2dc9af2d74e9e83622c), to be continued.... If you want you may now close this. It works fine with chip == 'auto'.\nESPLoader.detect_chip calls connect() internally. Only if you manually select the chip you also need to manually connect.\npython\ninitial_baud = min(ESPLoader.ESP_ROM_BAUD, my_baud)\nesp = ESPLoader.detect_chip(self._config.port, initial_baud)\nesp = esp.run_stub()\nif my_baud > initial_baud:\n    try:\n        esp.change_baud(my_baud)\n    except NotImplementedInROMError:\n        print(\"WARNING: ROM doesn't support changing baud rate. Keeping initial baud rate %d\" % initial_baud)\nargs = Namespace()\nargs.flash_size = \"detect\"\nargs.flash_mode = \"dio\"\nargs.flash_freq = \"40m\"\nargs.no_progress = False\nargs.no_stub = False\nargs.verify = False  # TRUE is deprecated\nargs.compress = True\nargs.addr_filename = [[int(\"0x00000\", 0), open(\"/Users/marcelstoer/Downloads/nodemcu.bin\", 'rb')]]\nesptool.erase_flash(esp, args)\nesptool.write_flash(esp, args). That other issue is #208 for those who missed the issue reference above.\n\nIf you have additional suggestions\n\nAll is good for now. The latest snippet above is a slightly modified version of what went into my PyFlasher. Please have a look at  https://github.com/marcelstoer/nodemcu-pyflasher/blob/master/Main.py#L46 to see how esptool.py is integrated in the flasher thread.\nThe only pain is redirecting the console output to the GUI component. I have a custom component for that at https://github.com/marcelstoer/nodemcu-pyflasher/blob/master/Main.py#L24 that I had to rewrite for the 2.0 upgrade to accommodate for the modified progress monitor (backspaces vs. carriage return). You addressed this in the description of #209.. This is most welcome. It's actually gotten worse since 1.3. Below is a comparison of the code I had to write for marcelstoer/nodemcu-pyflasher to get the same results (incl. console output) as what esptool.py produces.\n\nIt even got worse (i.e. more code that I had to write) between the latest beta and the final 2.0.. @Pimmetje for my PyFlasher I had to redirect stdout for that: https://github.com/marcelstoer/nodemcu-pyflasher/blob/master/Main.py#L165. I recently got an issue about exactly that: https://github.com/marcelstoer/nodemcu-pyflasher/issues/37. Yep, has worked just fine for as long as I had this chip. ESP8285 requires dout, though. . I finally got around to verifying the fix - all good.. No worries, I've kept coming back here to check every other week or so \ud83d\ude09 . > If you check out commit 81e6108 and test,\nThat one seems already \"broken\":\n```\nesptool.py v2.2-dev\nConnecting....\nDetecting chip type... ESP8266\nChip is ESP8266EX\nUploading stub...\nRunning stub...\nStub running...\nChanging baud rate to 921600\nChanged.\nConfiguring flash size...\nA fatal error occurred: Invalid head of packet ('\\xf4')\n```\nTurns out even v2.1 suffers from this. The behavior is different though:\nesptool.py v2.1\nConnecting....\nDetecting chip type... ESP8266\nChip is ESP8266\nUploading stub...\nRunning stub...\nStub running...\nChanging baud rate to 921600\nChanged.\nConfiguring flash size...\nAuto-detected Flash size: 4MB\nFlash params set to 0x0240\nCompressed 472084 bytes to 305673...\n^CTraceback (most recent call last):\n  File \"esptool.py\", line 2524, in <module>\n    _main()\n  File \"esptool.py\", line 2517, in _main\n    main()\n  File \"esptool.py\", line 2276, in main\n    operation_func(esp, args)\n  File \"esptool.py\", line 1791, in write_flash\n    blocks = esp.flash_defl_begin(uncsize, len(image), address)\n  File \"esptool.py\", line 63, in inner\n    return func(*args, **kwargs)\n  File \"esptool.py\", line 498, in flash_defl_begin\n    struct.pack('<IIII', write_size, num_blocks, self.FLASH_WRITE_SIZE, offset))\n  File \"esptool.py\", line 273, in check_command\n    val, data = self.command(op, data, chk)\n  File \"esptool.py\", line 254, in command\n    p = self.read()\n  File \"esptool.py\", line 220, in read\n    return next(self._slip_reader)\n  File \"esptool.py\", line 1560, in slip_reader\n    read_bytes = port.read(1 if waiting == 0 else waiting)\n  File \"/usr/local/lib/python2.7/site-packages/serial/serialposix.py\", line 472, in read\n    ready, _, _ = select.select([self.fd, self.pipe_abort_read_r], [], [], timeout.time_left())\nKeyboardInterrupt\nIt was stuck after \"Compressed 472084 bytes to 305673...\" until I killed it. Looks like 2.0.1 is the last release that works in my setup.\nI have to confess that I don't fully trust my test bed anymore, though. git checkout v2.0.1 rewinds back to ffde3f0 and all is well. git checkout ffde3f0 is supposed to do the same but flashing is stuck after the compression step.. I finally found the time to confirm that this is fixed with 2.2.1 - at least for me.. Any chance we can get this as a Christmas present \ud83c\udf84?. Angus, I tried the auto-port feature on 2.5 for the first time today. What I got was this:\n```\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.6/site-packages/serial/serialposix.py\", line 265, in open\n    self.fd = os.open(self.portstr, os.O_RDWR | os.O_NOCTTY | os.O_NONBLOCK)\nOSError: [Errno 16] Resource busy: '/dev/cu.nuraphone392-CSRGAIA-2'\nDuring handling of the above exception, another exception occurred:\nTraceback (most recent call last):\n  File \"/usr/local/bin/esptool.py\", line 2849, in \n    _main()\n  File \"/usr/local/bin/esptool.py\", line 2842, in _main\n    main()\n  File \"/usr/local/bin/esptool.py\", line 2543, in main\n    esp = ESPLoader.detect_chip(each_port, initial_baud, args.before, args.trace)\n  File \"/usr/local/bin/esptool.py\", line 244, in detect_chip\n    detect_port = ESPLoader(port, baud, trace_enabled=trace_enabled)\n  File \"/usr/local/bin/esptool.py\", line 213, in init\n    self._port = serial.serial_for_url(port)\n  File \"/usr/local/lib/python3.6/site-packages/serial/init.py\", line 88, in serial_for_url\n    instance.open()\n  File \"/usr/local/lib/python3.6/site-packages/serial/serialposix.py\", line 268, in open\n    raise SerialException(msg.errno, \"could not open port {}: {}\".format(self._port, msg))\nserial.serialutil.SerialException: [Errno 16] could not open port /dev/cu.nuraphone392-CSRGAIA-2: [Errno 16] Resource busy: '/dev/cu.nuraphone392-CSRGAIA-2'\n```\nThe OSError there at the beginning looks like what you fixed in cac97e1d64f8de22e673e3d943e976b28b0d3b12, is that right? Hence, in the upcoming 2.5.1 or 2.6 this will be fixed?. Since v2.6 is out now this could be closed I guess.. Thanks for this great improvement anyhow. Can't wait to integrate it into my GUI tool.. Anyone coming across this issue pls take note of #406.. Since v2.6 is out now this could be closed I guess.. @igrr Ivan, maybe you can help Angus with this by bringing in the expertise of the esptool-ck maintainer.. That was next on my list anyhow but yes, I can reproduce this on a NodeMCU V2/1.0.. @igrr / @projectgus is there anything I can do to make your life easier in reproducing and fixing this? Is there any further information I could provide? Any chance to get a fix for this soonish?. The few tests were successful, thanks. Do you have an ETA for the upcoming release?. Try with --no-stub. I also suggest you increase the baud rate to at least 115'200.. > Do you have an example of how exactly you are calling main()?\nDuh, I haven't actually studied how argparse.py works and simply assumed I can pass a string to main(). The absence of declared types in Python makes it a bit tough to read someone else's code for a non-Pythonista like me. Should have noted the code documentation mentions \"...a list of ... strings\"\n```python\ncommand = \"\"\nif not self._config.port.startswith(auto_select):\n    command += \"--port %s \" % self._config.port\ncommand += \"--baud %s --after no_reset write_flash --flash_mode %s 0x00000 %s\" % \\\n           (self._config.baud, self._config.mode, self._config.firmware_path)\nif self._config.erase_before_flash:\n    command += \" --erase-all \"\nprint(\"Command: %s\\n\" % command)\nesptool.main(command)\n``\nI should be able to replace this withesptool.main(command.split(\" \"))`.. > Most likely this approach will remain compatible for all future versions though\nIt's a relief to hear that! For my use case that \"API\" is perfect. However, I do understand that any other application that integrates esptool to use only individual functions needs something else.. > split(' ') will work until there's a space in one of the pathnames :)\nArgghh, you're right, thanks. I hardly ever think of that because using spaces feels like such a weird thing to do \ud83d\ude09. ",
    "raburton": "I've put the files on dropbox, it won't let me attach them here. These were built with Sming (c++), but the error only appeared when I moved to sdk v1.4. I had to update esptool.py as well, initially with sdk v1.4 it couldn't handle the U type symbol, after updating it handled it (by throwing an error). I assume this means other people have started to get these undefined symbol errors too, since there was a recent change to handle them.\nhttps://dl.dropboxusercontent.com/u/5500141/app.a\nhttps://dl.dropboxusercontent.com/u/5500141/app.map\n. > This is not related to esptool.py, see SmingHub/Sming#450 In fact, I think esptool.py is handling the situation correctly by throwing an error.\nThat isn't the question, the question is what is the significance of this. Undefined symbols should be an error at the linker stage, so what does it mean to get through the linker fine and only complain at esptool.\n. Sorry, should have included that last time.\nhttps://dl.dropboxusercontent.com/u/5500141/app.out\nIt's been rebuilt in the mean time, so in case it's critical that the others files (linked above) match for what you want to look at I've updated them too.\nSming is linking with --gc-sections already.\n. Thank you for looking at this.\nRichard.\n. ",
    "zardam": "This is not related to esptool.py, see SmingHub/Sming#450 In fact, I think esptool.py is handling the situation correctly by throwing an error.\n. It seems to be related to the --gc-sections linker flag. Without it, I have a linker error.\n. ",
    "m-bruck": "cygpath emits a newline so after adding .rstrip it works:\nreturn subprocess.check_output([\"cygpath\", \"-w\", p]).rstrip('\\n')\nI agree that --tmpdir would have been more of a hack. I had issues with windows paths on cygwin tools in the past, I think with make, so I try to give tools their native paths. But a quick test shows that cygwin's native binutils and gcc seem to take all versions of cygpath's output.\n. ",
    "gregersrygg": "Whoops, I didn't see that. Fixed :)\n. ",
    "wellrats": "Yes, with -fm dio it worked.\nThanks !!!\nClosing the issue.\n. Manufacturer: e0\nDevice: 4016\nI don't know what happened but it's working now even if i don't use -fm dio.\nCheers,\nWellRats\n. ",
    "dnnagy": "I'm having a similar problem. First how do I download mkspiffs ?\nThen how do I find out the correct address to flash the filesystem next to the firmware?. ",
    "newinnovations": "I have squashed the commits and added some more information when verify fails: number of differences and first failed address. Furthermore there is now an option to dump all failed locations: --diff=yes. Default is no.\n. ",
    "gozotto": "Some console logs from both tools:\nespressif flash tool:\nget flash id : 0x401640c8\n manufacturer_id: 0xc8\n device_id: 0x4016\nvendor: 200\nmode: 64\nsize: 22\nfilename:  D:\\Data\\Projects\\ESP8266\\Tools\\FLASH_DOWNLOAD_TOOLS_v2.3_150916\\bin_tmp\\downloadPanel1\\user1.bin\noffset :  4096\nErasing flash...\nhead:  15 ;total: 74\nerase size :  241664\nWriting at 0x00001000... (0 %) \nWriting at 0x00001400... (0 %) \nWriting at 0x00001800... (0 %) \nWriting at 0x00001c00... (1 %) \nWriting at 0x00002000... (1 %) \n...\nWriting at 0x00049400... (98 %) \nWriting at 0x00049800... (98 %) \nWriting at 0x00049c00... (99 %) \nWriting at 0x0004a000... (99 %) \nesptool.py:\nWriting at 0x00010000... (0 %) \nWriting at 0x00010400... (0 %) \nWriting at 0x00010800... (1 %) \nWriting at 0x00010c00... (1 %)\n...\nWriting at 0x00058000... (98 %) \nWriting at 0x00058400... (98 %) \nWriting at 0x00058800... (99 %) \nWriting at 0x00058c00... (99 %) \nWriting at 0x00059000... (100 %)  \nSo the esptool.py writes more flash than espressif tool.\n. Thank's a lot... that's the missing link. \n. ",
    "fdivitto": "After flashing the ESP boots normally. Anyway resetting the device by software (for example. reset due watchdog or calling system_restart() function) the device turns back to programming mode.\nI experienced this behavior with nodemcu platform (which has builtin serial<->usb converted) and also using my own ESP configurations, with external serial<->usb converters.\nAs you know to enter in boot mode (not programming mode) CH_PD and GPIO0 should be High.\nFabrizio\n\nIl giorno 28 gen 2016, alle ore 23:43, Angus Gratton notifications@github.com ha scritto:\nThanks for this! Sorry for the mixup with the file modes, I should have caught that when refactoring myself. Not sure how it worked on Linux like it did.\nI've pushed that fix already as 74112b0 https://github.com/themadinventor/esptool/commit/74112b05053f1fc05965591565e192956434c168 (I edited the commit message as 'update esptool.py' is a little generic for our tool.)\nCan you explain the intention of the disconnect method to me, please? You're looking to issue a hardware reset (if possible) whenever esptool finishes its operations?\n\u2014\nReply to this email directly or view it on GitHub https://github.com/themadinventor/esptool/pull/80#issuecomment-176460874.\n. After flashing the ESP boots normally. Anyway resetting the device by software (for example. reset due watchdog or calling system_restart() function) the device turns back to programming mode.\nI experienced this behavior with nodemcu platform (which has builtin serial<->usb converted) and also using my own ESP configurations, with external serial<->usb converters.\n\nAs you know to enter in boot mode (not programming mode) CH_PD and GPIO0 should be High.\nFabrizio\n\nIl giorno 28 gen 2016, alle ore 23:58, Paul Sokolovsky notifications@github.com ha scritto:\nNot sure how it worked on Linux like it did.\nWell, on unix, text mode == binary mode.\nCan you explain the intention of the disconnect method to me, please?\nI believe it's artifact of not creating a topic branch. When I looked at this PR in the morning, it contained just one commit.\n\u2014\nReply to this email directly or view it on GitHub https://github.com/themadinventor/esptool/pull/80#issuecomment-176471537.\n. \n",
    "devkral": "I see some crashes, I fix them then reopen\n. ",
    "shayo": "FYI, I'm not the only person who encountered this:\nhttp://secretsciencelab.com/how-to-flash-espduino-firmware-on-cactus-micro-esp8266-rev1/\n. No. It doesn't matter. It also doesn't matter if I switch their position (i.e., trying to read from Serial first).\nHow can we debug this further?\n. Works!\nThank you Chrismerck!\nIt might be a good idea to add this as a flag that can be controlled from the command line arguments (or add this to the documentation somewhere).\n. ",
    "chrismerck": "I also have this issue. If I manually run a python interpreter and write/read from serial, I can read back the response from the esp. However, when using esptool, we get \"Invalid head of packet\" exception from receive_response function. (The exception is caught and ultimately manifests as the \"failed to connect\" error.)\nWhat is odd is, the self._port.read(1) call in receive_response is returning immediately, rather than waiting for the timeout of 300ms. So it appears to be a serial configuration issue.\n. This worked for me:\nComment-out the \"issue reset-to-bootloader\" commands in esptool.py. Apparently this puts the serial port in a bad state:\n162         for _ in xrange(4):\n163             # issue reset-to-bootloader:\n164             # RTS = either CH_PD or nRESET (both active low = chip in reset)\n165             # DTR = GPIO0 (active low = boot to flasher)\n166             \"\"\"self._port.setDTR(False)\n167             self._port.setRTS(True)\n168             time.sleep(0.05)\n169             self._port.setDTR(True)\n170             self._port.setRTS(False)\n171             time.sleep(0.05)\n172             self._port.setDTR(False)\"\"\"\n. ",
    "babs": "Here it is :)\n. Squashed (nice command I wasn't aware of this one :) )\n. ",
    "jandelgado": "Thanks for the hint. Indeed I was powering the ESP8266 with the FTDI board. I'll check if the problem persists with an external power supply.\n. ",
    "rojer": "yeah, why not. some additional clean up may be needed, but otherwise write_flash is already done - https://github.com/cesanta/fnc/blob/master/common/platforms/esp8266/stubs/esptool.py#L819\nverify can be re-implemented to use on-device digest, that makes sense.\nwould you like to expose all of {wrap,run}_stub or take just enough to run it?\n. as stated in the top-level LICENSE file, all the code is already licensed under GPL.\nyes, wrap/run_stub commands are there to aid stub development. ok, i'll take just the necessary part of run_stub.\n. yes, makes sense. i cherry-picked the stub makefile and progress changes into this PR and got rid of --flash_baud in favor of --baud.\ni think the other two changes should better be made separately so as not to increase the size of this PR, which is big enough already.\nplease take another look.\n. cherry-picked and squashed.\ncan you please keep the \"Cesanta\" name in the message about stub? at least until it's substantially rewritten. a little bit of PR for us :)\n. +1 for detecting flash size. you don't even need a lookup table as such, JEDEC ID contains the power of 2 as the 3rd byte, it can be used directly - perhaps with a sanity check.\nthe following code has been working pretty well for us in F&C:\nc++\n      qInfo() << \"Detecting flash size...\";\n      auto flashChipIDRes = flasher_client.getFlashChipID();\n      if (flashChipIDRes.ok()) {\n        quint32 mfg = (flashChipIDRes.ValueOrDie() & 0xff000000) >> 24;\n        quint32 type = (flashChipIDRes.ValueOrDie() & 0x00ff0000) >> 16;\n        quint32 capacity = (flashChipIDRes.ValueOrDie() & 0x0000ff00) >> 8;\n        qInfo() << \"Flash chip ID:\" << hex << showbase << mfg << type\n                << capacity;\n        if (mfg != 0 && capacity >= 0x13 && capacity < 0x20) {\n          // Capacity is the power of two.\n          flashSize_ = 1 << capacity;\n        }\n      }\n. do you have counter-examples of chips that do not follow this format?\nthe datasheets i checked all document the format and go to some lengths to maintain this compatibility - like implementing the command with a particular opcode. i have certainly observed it to work across manufacturers. while not used as widely as esptool, F&C has a user base too and we haven't received any complaints. in my book, it's better than just assuming 512K. my code checks if the value is in the \"sane\" range and uses it if it is. i think it's a reasonable starting point. for chips/vendors that do not follow this convention, a lookup table/blacklist can be maintained. do you have entries to contribute to it?\n. i really like the idea. i don't see any problem with using a generator, imho it's used exactly as intended.\nperhaps the only minor thing i'd change is the name of the variable - _slip_reader instead of just _reader. other than that, LGTM.\n. went to test on my RPi and found that there is, unfortunately, a compatibility problem: it looks like in_waiting is not available in PySerial that comes with Raspbian (jessie, the latest one):\n'Serial' object has no attribute 'in_waiting'\n. FWIW \"before\" looks like this:\n```root@shepetovka:~/qq/esptool# time ./esptool.py -b 1500000 -p /dev/ttyN21 read_flash 0x20000 393307 0x20000-readback.bin\nesptool.py v1.0.2-dev\nConnecting...\nRunning Cesanta flasher stub...\nReading 393307 @ 0x20000... 393307 (100 %)\nRead 393307 bytes at 0x20000 in 15.0 seconds (210.0 kbit/s)...\nreal    0m16.039s\nuser    0m8.520s\nsys 0m3.510s\n\n. quite a bit faster:\n```\nroot@shepetovka:~/qq/esptool# time ./esptool.py -b 1500000 -p /dev/ttyN21 read_flash 0x20000 393307 0x20000-readback.bin\nesptool.py v1.0.2-dev\nConnecting...\nRunning Cesanta flasher stub...\nReading 393307 @ 0x20000... 393307 (100 %)\nRead 393307 bytes at 0x20000 in 9.3 seconds (339.3 kbit/s)...\nreal    0m10.312s\nuser    0m1.970s\nsys 0m0.670s\n```\n. just found my way to this issue. not before spending some time banging my head against the wall, though :)\nthe workaround seems fine, i just want to confirm: devkit hardware will be revised to increase the capacitor value, right? hopefully, in time for new chip revision which fixes the glitch.. so, it's tricky. we don't know upfront how much data stub is going to send, and pyserial (at least the posix implementation) is bent on reading at least as many bytes as instructed.\neven timeout stops working once at least one byte has been read.\nwhat they do there (in PosixPollSerial.read) doesn't make sense to me and seems like a bug, but it is what it is.\nhowever, since with this change verification does not require reading out all the bytes and performs on-device digest, the impact of going back to reading byte by byte is reduced substantially.\n. done\n. good point, done\n. ok, done.\nit still depends o docker image, but it shouldn't be a problem to remove that by adding a SDK_PATH variable or some such. i do not actually have the toolchain installed to test w/o docker, so i'll leave it to you. should be trivial.\n. ",
    "toashwin": "@projectgus Not sure where to request for help on esptool.py.\nI wanted to erase my esp8266. I used the following command: \nesptool.py -p COM5 --baud 115200 erase_flash\nBelow is the response: \nesptool.py v1.2-dev\nConnecting...\nErasing flash (this may take a while)...\nIt was actually very fast. It did not take a while.  But now, when I am trying to reflash.. I get error.  I tried various baud rates.. Nothing worked. I tried replacing with a different part. That one was OK.  Did I damage the device? Any way to salvage?\nesptool.py -p COM5 --baud 9600 erase_flash\nesptool.py v1.2-dev\nConnecting...\nA fatal error occurred: Failed to connect to ESP8266\n. ",
    "sskylark": "You got it right. The other accesses just set up HSPI on IOMUX and control SPI clocks.\nAlso, flashing does work with no other changes, and I can boot firmware (though this needs a few tweaks... by default, AT firmware will assign some of the HSPI pins to UART0).\n. ",
    "st0ff3r": "yes, just tested - it works. Would it be possible with an option to do it?\n. at least it worked for NAND with 24 bit address, but not for my FeRAM with only 16 bits for address :-/\n. ",
    "rzajac": "Hey,\nI have sent it to your email. \n. ",
    "gecgooden": "I'm having the same problem. Did you work out a solution to this?\n. ",
    "mcauser": "I believe it is a problem with the OS X CH340G driver.\nBaud 230400 and 115200 work for me on Yosemite and El Capitan.\nAnything faster does not work, eg. 460800, 921600.\nhttp://kig.re/2014/12/31/how-to-use-arduino-nano-mini-pro-with-CH340G-on-mac-osx-yosemite.html\nSigned CH340G driver can be found here: https://www.wemos.cc/downloads\nThe new WeMos D1 Mini Pro replaced the CH340G with a CP2104.\nhttps://www.wemos.cc/product/d1-mini-pro.html\nDriver linked at the bottom of the page (windows, mac, linux).\n. I noticed this too on a WeMos D1 mini\n. WeMos D1 Mini Pro:\nhttps://www.wemos.cc/product/d1-mini-pro.html\nFeatures a WinBond W25Q128FVSG.\n$ esptool.py --port /dev/tty.SLAB_USBtoUART -b 115200 flash_id\nesptool.py v1.2.1\nConnecting...\nManufacturer: ef\nDevice: 4018\n. ",
    "foogod": "To be clear, interpreting the JEDEC ID that way is actually an ugly hack and subject to break without warning at any time.\nThe fact that there is some size information extractable from the third byte of the JEDEC ID is entirely a quirk of how the particular manufacturer has decided to identify particular flash devices and is not a standard in any way.  It's entirely possible for Espressif (or anybody else) to start producing ESP8266 modules with chips from a different manufacturer (or even a different model/line from the same manufacturer) which use those bits for something completely different.\nThis is actually why back in 1999 a bunch of the JEDEC members got together and actually created a device-independent standard for this stuff so that people like us wouldn't have to do this sort of guessing in the first place.  It's called the Common Flash Interface (http://www.jedec.org/standards-documents/docs/jesd-6801).\nJESD-6801 defines the \"Query\" command, which returns all kinds of information about (among other things) the size and geometry of the flash device being used (including things like erase sector size, too).  I still don't understand why Espressif didn't bother to use this command to just ask the chip what size it is, instead of doing this clumsy hack with encoding it into the flashed image header so it can easily be accidentally mismatched, etc.\nOf course, since Espressif only implemented a function for the much less useful \"Get ID\" command and didn't bother to create one for \"Query\", accessing this information would require coding a custom low-level routine to send the query command via the SPI interface and interpret the results.  (My plan has been for a while to write just such a routine so that esp-open-rtos could automatically detect the flash size correctly and just ignore the value in the header entirely, but I haven't had time.)  It would potentially be possible to have esptool.py send that custom code over to the ESP8266 and run it to do that operation, though..\n. Sigh.. nevermind.. when digging around more to figure out how to implement this stuff, I stumbled across a tiny footnote on a manufacturer's application note (since found a couple of other places), that says basicallly \"BTW, CFI isn't supported for SPI memory, and there probably won't be any standard for it in the future either\".. grumble.\nSo I guess we're stuck with using the JEDEC ID and hoping everybody \"plays nice\" by always encoding the capacity in the same way in the ID field..\n. Getting back to the original issue, it occurs to me that maybe a good solution for esptool would be (prior to flashing/erasing/etc) to read the existing value of the size (and speed, DIO/QIO, etc) fields, and if set to reasonable values, make sure they stay the same when writing the new image, ignoring the values in the image file (if set to 0xff or some other unreasonable value, try to determine a correct value from the chip ID or something).  That way, once set for a particular ESP8266 module, it won't change (which since the hardware won't be changing, seems appropriate).\nThere should, of course, be some separate command to explicitly change the value if desired, but under normal circumstances, it should get set once to reflect the actual hardware, and then not touched again..\n. Ah, thanks @pfalcon..  Yes, the SFDP stuff does appear to be the equivalent in the SPI flash world.  For auto-detection, we should probably use that if it's supported, and if not maybe fall back to trying to interpret the ID bytes (though I wouldn't be surprised if the vendors who don't implement SFDP are also the most likely to not follow Winbond's convention for ID bytes as well, so that may not be that useful)..\n\nI'd rather have auto-detect, at least of flash size.\n\nWell, I could see both being useful.. The \"keep it like it was\" approach allows somebody to set a particular module the way they want it, and then future flashing will use the same settings (so, for example, the SDK parameter tables in the upper sectors will still be in the same place after flashing, even if the image has a wrong \"flash size\" setting).  The risk with this, of course, is that it could get set differently than the actual hardware, and then esptool.py wouldn't fix it (unless told to)..  Maybe it should be a command-line option when flashing which approach to use..\n\nThis assumes that it was set right in the first place, which is rather optimistic.\n\nWell, what I was figuring was that any time you do a full-erase or it finds something obviously not valid, it would reset it based on auto-detected values, so all you'd need to do is do an initial erase with esptool.py and you should have the correct value going forward..\n. ",
    "jonshouse1": "Cant we just have a \"probe_flash\" feature that reads a block (and keeps it in RAM) - tries to erase that block, if it erases ok it then writes the block back. Do this for each boundary and you now know the size of the flash chip fitted ?\n. ",
    "deshipu": "Maybe you could do both things -- leave the old values on the chip, but also do an autodetection, and issue a warning (suggesting to run a command fixing it) if the current values don't match the hardware?\n. esptool.py:836:74: E227 missing whitespace around bitwise or shift operator\n. ",
    "oczkers": "It doesn't meter what soft or settings (tried 32mb, 8mb, old firmware that fits 4mb) i use to flash, efect is always the same.\nIs it possible that i have made a typo in address and overwrote some restricted area or damaged chip somehow?\n. Sorry for delay. I tried stable esptool but effect was exactly the same so i gave up, there is no need to reopen because it's not related to Your great soft.\n. ",
    "l29ah": "I don't really know how setuptools work. If you have a gentoo nearby, you can try installing dev-embedded/esptool::booboo; it used to work some time ago. Otherwise i can bisect it if it helps.\n\n()  ascii ribbon campaign - against html mail\n/\\  http://arc.pasp.de/   - against proprietary attachments\n. ",
    "Quarky9": "Same here on Gentoo:\nsetup.py build\nerrors out but builds up massive memory footprint and CPU load while doing so...\nPID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND\n25927 portage   30  10 18.158g 0.017t   8332 R 100.0 55.4   0:35.09 python2.7\nManual git clone / setup.py build works like a charm in pristine virtual env on the same machine btw.\n```\n USE:        abi_x86_64 amd64 elibc_glibc kernel_linux python_targets_python2_7 userland_GNU\n FEATURES:   preserve-libs sandbox userpriv usersandbox\n\n\n\nUnpacking source...\n Fetching https://github.com/themadinventor/esptool ...\ngit fetch https://github.com/themadinventor/esptool +HEAD:refs/git-r3/HEAD\ngit symbolic-ref refs/git-r3/dev-embedded/esptool/0/main refs/heads/master\n Checking out https://github.com/themadinventor/esptool to /tmp/portage/dev-embedded/esptool-9999/work/esptool-9999 ...\ngit checkout --quiet master\nGIT update -->\n   repository:               https://github.com/themadinventor/esptool\n   at the commit:            56224490d8e37875a893a7c4ebb0f9a59b1e5548\nSource unpacked in /tmp/portage/dev-embedded/esptool-9999/work\nPreparing source in /tmp/portage/dev-embedded/esptool-9999/work/esptool-9999 ...\nSource prepared.\nConfiguring source in /tmp/portage/dev-embedded/esptool-9999/work/esptool-9999 ...\nSource configured.\nCompiling source in /tmp/portage/dev-embedded/esptool-9999/work/esptool-9999 ...\n python2_7: running distutils-r1_run_phase distutils-r1_python_compile\n/usr/bin/python2.7 setup.py build\nTraceback (most recent call last):\n  File \"setup.py\", line 90, in \n    'esptool.py',\n  File \"/usr/lib64/python2.7/distutils/core.py\", line 111, in setup\n    _setup_distribution = dist = klass(attrs)\n  File \"/usr/lib64/python2.7/site-packages/setuptools/dist.py\", line 268, in init\n    self.fetch_build_eggs(attrs['setup_requires'])\n  File \"/usr/lib64/python2.7/site-packages/setuptools/dist.py\", line 313, in fetch_build_eggs\n    replace_conflicting=True,\n  File \"/usr/lib64/python2.7/site-packages/pkg_resources/init.py\", line 836, in resolve\n    dist = best[req.key] = env.best_match(req, ws, installer)\n  File \"/usr/lib64/python2.7/site-packages/pkg_resources/init.py\", line 1081, in best_match\n    return self.obtain(req, installer)\n  File \"/usr/lib64/python2.7/site-packages/pkg_resources/init.py\", line 1093, in obtain\n    return installer(requirement)\n  File \"/usr/lib64/python2.7/site-packages/setuptools/dist.py\", line 380, in fetch_build_egg\n    return cmd.easy_install(req)\n  File \"/usr/lib64/python2.7/site-packages/setuptools/command/easy_install.py\", line 638, in easy_install\n    return self.install_item(spec, dist.location, tmpdir, deps)\n  File \"/usr/lib64/python2.7/site-packages/setuptools/command/easy_install.py\", line 668, in install_item\n    dists = self.install_eggs(spec, download, tmpdir)\n  File \"/usr/lib64/python2.7/site-packages/setuptools/command/easy_install.py\", line 851, in install_eggs\n    return self.build_and_install(setup_script, setup_base)\n  File \"/usr/lib64/python2.7/site-packages/setuptools/command/easy_install.py\", line 1079, in build_and_install\n    self.run_setup(setup_script, setup_base, args)\n  File \"/usr/lib64/python2.7/site-packages/setuptools/command/easy_install.py\", line 1065, in run_setup\n    run_setup(setup_script, args)\n  File \"/usr/lib64/python2.7/site-packages/setuptools/sandbox.py\", line 240, in run_setup\n    raise\n  File \"/usr/lib64/python2.7/contextlib.py\", line 35, in exit\n    self.gen.throw(type, value, traceback)\n  File \"/usr/lib64/python2.7/site-packages/setuptools/sandbox.py\", line 193, in setup_context\n    yield\n  File \"/usr/lib64/python2.7/contextlib.py\", line 35, in exit\n    self.gen.throw(type, value, traceback)\n  File \"/usr/lib64/python2.7/site-packages/setuptools/sandbox.py\", line 152, in save_modules\n    yield saved\n  File \"/usr/lib64/python2.7/site-packages/setuptools/sandbox.py\", line 126, in exit\n    self._saved = UnpickleableException.dump(type, exc)\n  File \"/usr/lib64/python2.7/site-packages/setuptools/sandbox.py\", line 110, in dump\n    return cls.dump(cls, cls(repr(exc)))\n  File \"/usr/lib64/python2.7/site-packages/setuptools/sandbox.py\", line 110, in dump\n    return cls.dump(cls, cls(repr(exc)))\n  File \"/usr/lib64/python2.7/site-packages/setuptools/sandbox.py\", line 110, in dump\n    return cls.dump(cls, cls(repr(exc)))\n  File \"/usr/lib64/python2.7/site-packages/setuptools/sandbox.py\", line 110, in dump\n    return cls.dump(cls, cls(repr(exc)))\n  File \"/usr/lib64/python2.7/site-packages/setuptools/sandbox.py\", line 110, in dump\n    return cls.dump(cls, cls(repr(exc)))\n  File \"/usr/lib64/python2.7/site-packages/setuptools/sandbox.py\", line 110, in dump\n    return cls.dump(cls, cls(repr(exc)))\n  File \"/usr/lib64/python2.7/site-packages/setuptools/sandbox.py\", line 110, in dump\n    return cls.dump(cls, cls(repr(exc)))\n  File \"/usr/lib64/python2.7/site-packages/setuptools/sandbox.py\", line 110, in dump\n    return cls.dump(cls, cls(repr(exc)))\n  File \"/usr/lib64/python2.7/site-packages/setuptools/sandbox.py\", line 110, in dump\n    return cls.dump(cls, cls(repr(exc)))\n  File \"/usr/lib64/python2.7/site-packages/setuptools/sandbox.py\", line 110, in dump\n    return cls.dump(cls, cls(repr(exc)))\n  File \"/usr/lib64/python2.7/site-packages/setuptools/sandbox.py\", line 110, in dump\n    return cls.dump(cls, cls(repr(exc)))\n  File \"/usr/lib64/python2.7/site-packages/setuptools/sandbox.py\", line 110, in dump\n    return cls.dump(cls, cls(repr(exc)))\n  File \"/usr/lib64/python2.7/site-packages/setuptools/sandbox.py\", line 110, in dump\n    return cls.dump(cls, cls(repr(exc)))\n  File \"/usr/lib64/python2.7/site-packages/setuptools/sandbox.py\", line 110, in dump\n    return cls.dump(cls, cls(repr(exc)))\n  File \"/usr/lib64/python2.7/site-packages/setuptools/sandbox.py\", line 110, in dump\n    return cls.dump(cls, cls(repr(exc)))\n  File \"/usr/lib64/python2.7/site-packages/setuptools/sandbox.py\", line 110, in dump\n    return cls.dump(cls, cls(repr(exc)))\n  File \"/usr/lib64/python2.7/site-packages/setuptools/sandbox.py\", line 110, in dump\n    return cls.dump(cls, cls(repr(exc)))\n  File \"/usr/lib64/python2.7/site-packages/setuptools/sandbox.py\", line 110, in dump\n    return cls.dump(cls, cls(repr(exc)))\n  File \"/usr/lib64/python2.7/site-packages/setuptools/sandbox.py\", line 110, in dump\n    return cls.dump(cls, cls(repr(exc)))\n  File \"/usr/lib64/python2.7/site-packages/setuptools/sandbox.py\", line 110, in dump\n    return cls.dump(cls, cls(repr(exc)))\n  File \"/usr/lib64/python2.7/site-packages/setuptools/sandbox.py\", line 110, in dump\n    return cls.dump(cls, cls(repr(exc)))\n  File \"/usr/lib64/python2.7/site-packages/setuptools/sandbox.py\", line 110, in dump\n    return cls.dump(cls, cls(repr(exc)))\n  File \"/usr/lib64/python2.7/site-packages/setuptools/sandbox.py\", line 110, in dump\n    return cls.dump(cls, cls(repr(exc)))\n  File \"/usr/lib64/python2.7/site-packages/setuptools/sandbox.py\", line 110, in dump\n    return cls.dump(cls, cls(repr(exc)))\n  File \"/usr/lib64/python2.7/site-packages/setuptools/sandbox.py\", line 110, in dump\n    return cls.dump(cls, cls(repr(exc)))\n  File \"/usr/lib64/python2.7/site-packages/setuptools/sandbox.py\", line 110, in dump\n    return cls.dump(cls, cls(repr(exc)))\n  File \"/usr/lib64/python2.7/site-packages/setuptools/sandbox.py\", line 110, in dump\n    return cls.dump(cls, cls(repr(exc)))\n  File \"/usr/lib64/python2.7/site-packages/setuptools/sandbox.py\", line 110, in dump\n    return cls.dump(cls, cls(repr(exc)))\n  File \"/usr/lib64/python2.7/site-packages/setuptools/sandbox.py\", line 110, in dump\n    return cls.dump(cls, cls(repr(exc)))\n  File \"/usr/lib64/python2.7/site-packages/setuptools/sandbox.py\", line 110, in dump\n    return cls.dump(cls, cls(repr(exc)))\n  File \"/usr/lib64/python2.7/site-packages/setuptools/sandbox.py\", line 110, in dump\n    return cls.dump(cls, cls(repr(exc)))\n  File \"/usr/lib64/python2.7/site-packages/setuptools/sandbox.py\", line 110, in dump\n    return cls.dump(cls, cls(repr(exc)))\n  File \"/usr/lib64/python2.7/site-packages/setuptools/sandbox.py\", line 110, in dump\n    return cls.dump(cls, cls(repr(exc)))\nMemoryError\n * ERROR: dev-embedded/esptool-9999::quarks failed (compile phase):\n *   (no error message)\n * \n * Call stack:\n *     ebuild.sh, line  133:  Called src_compile\n *   environment, line 4094:  Called distutils-r1_src_compile\n *   environment, line 1089:  Called _distutils-r1_run_foreach_impl 'distutils-r1_python_compile'\n *   environment, line  313:  Called python_foreach_impl 'distutils-r1_run_phase' 'distutils-r1_python_compile'\n *   environment, line 3638:  Called multibuild_foreach_variant '_python_multibuild_wrapper' 'distutils-r1_run_phase' 'distutils-r1_python_compile'\n *   environment, line 2743:  Called _multibuild_run '_python_multibuild_wrapper' 'distutils-r1_run_phase' 'distutils-r1_python_compile'\n *   environment, line 2741:  Called _python_multibuild_wrapper 'distutils-r1_run_phase' 'distutils-r1_python_compile'\n *   environment, line  774:  Called distutils-r1_run_phase 'distutils-r1_python_compile'\n *   environment, line 1080:  Called distutils-r1_python_compile\n *   environment, line  954:  Called esetup.py 'build'\n *   environment, line 1580:  Called die\n * The specific snippet of code:\n *       \"${@}\" || die \"${die_args[@]}\" || return ${?}\n * \n * If you need support, post the output of emerge --info '=dev-embedded/esptool-9999::quarks',\n * the complete build log and the output of emerge -pqv '=dev-embedded/esptool-9999::quarks'.\n * The complete build log is located at '/var/log/portage/dev-embedded:esptool-9999:20160526-041403.log'.\n * The ebuild environment file is located at '/tmp/portage/dev-embedded/esptool-9999/temp/environment'.\n * Working directory: '/tmp/portage/dev-embedded/esptool-9999/work/esptool-9999'\n * S: '/tmp/portage/dev-embedded/esptool-9999/work/esptool-9999'\n```\n. \n\n\n",
    "vshymanskyy": "+1\n. This can be so useful for auto-selecting the firmware that needs to be uploaded to a particular board. Voting for this!. ",
    "simonliu009": "Below is my understanding:\n1. When using spi_size_map=4 for compilation,  Flash size: 32Mbit for downloading should be used,  the flash map is  32Mbit: 512KB+512KB,\nuser2.bin will use address 0x81000\uff0cthe parameter for esptool.py is -fs 32m.\n2. When using spi_size_map=6 for compilation,  Flash size: 32Mbit-C1  for downloading should be used,  the flash map is 1024KB+1024KB\nuser2.bin will use address 0x101000, the parameter for esptool.py is -fs 32m-c1.\nI don't see the option of 32Mbit-C2 now.. ",
    "kruhly": "Hi Angus,\nIt is an Arduino Uno with integrated ESP8266 wifi that my son received for his birthday. I don't know much about the architecture but there are tecnical spec's at http://www.arduino.org/products/boards/arduino-uno-wifi\nThanks,\nRob \n. Hi Angus,\nI have not used v1.0 so no. \nThe esp8266 was in a strange state due to an error when I tried to  change the static IP address in the Arduino Uno Wifi configuration. I was trying to recover it using the EspRecovery sketch in Arduino and esptool.py.\nI was thinking it was the specific call to slip_reader in init because I had seen the call in connect() -- possibly due to the board not being ready. For some reason when I dropped the call to slip_reader in init read_mac and other read functions started working.\nHowever, I have now had some time to rerun  esptool.py with the esp8266 functioning normally. read_mem works as expected with the fixed call in init, without any call, and the bad call slip_reader(port). So it seems like it was a coincidence and  resetting the arduino board, finding the correct baud and/or  re-uploading the EspRecovery sketch  helped kick the esp8266 into normal operation again. \nThanks for pushing the fix. \nRob\n. ",
    "Aizenko": "I, You mean the lijne \nsys.stdout.write(progress + '\\b' * len(progress))\nI replace it by only a dot and got the same problem. But maybe the it's to long too.\nSeem that the problem i got with the default esptools could be the same as it write dot, the something like \"(37%) then a new line and dots (one third of the previous line, and the status bar shows \"done uploading\"... so it's may stop around 48% too.\nI don't know how the arduino API detect the end of upload.\n. ",
    "cnlohr": "Definitely in 0d65561 - I had a bit of a hard time since it /sometimes/ does seem to work now, just very, very rarely and fails with \nA fatal error occurred: Failed to connect to the flasher (got CF48C1C9)\nI have no idea how I would debug such a significant sudden change.\n. Gah!! I am so sorry, I will read everything above and try it soon, but, I wanted to report something.  I ended up modifying the code to \"keep trying\" even after an error, like reconnecting, etc.  When I did that, it looks like it always fails the first time and usually succeeds the second or third times.  Flashes great after that.   I will do the best I can to hit this up tonight.\n. I am using the $1 adapter from electrodragon.  This is my standard adapter and they are like guitar picks for me.  I believe I have about 20 or 30 now... So if there really is such a thing as a fake pl2303, then I have it!\nThe branch does not appear to effect the problem very much.  I am still getting around a 50?% failure rate. I have modified my code to keep re-initializing and trying several times.  Now, with a single burn command it always succeeds - just have to reset it a bunch.   Though this is an ugly solution.\nmaxtries = 100\n        for tries in range(0, maxtries):\n            try:\n                esp.connect()\n                operation_func(esp, args)\n                break\n            except Exception as e:\n                print str( e )\n                if tries == maxtries-1:\n                    raise \"Too many attempts.\"\nI've tried a couple things and nothing seems to make it sync any better.\nI currently have logic analyzer dumps of the new version working, not working and the old version working.  I am going bleary-eyed trying to find the differences, but indeed, I do see a difference.  It does seem that when it fails, the chip is auto-adjusting to a lower baud than the specified baud rate.  This also appears to happen on the older software, yet somehow is not an issue.\nIs it possible the old software wasn't checking the response codes sometimes and just getting by anyway?\nRe: The IEEE Article:  Thanks!  I didn't realize they were going to publish it so soon.  I am going to try to make a video explaining the ins and outs of ColorChord.\nI'm also really hoping to get more people on board with some of the ESP8266 stuff I do.  I.e. high speed ADC access, my brand of webserver.  Etc...  We'll see though.\n. Just flashed many times with the old code (pre Cesanta), everything went off without a hitch.  New code:  Failing a lot.  \nJust wondering how are you setting your baud rates?  I always use STTY and it doesn't seem to let me select anything other than multiples of 115200.  I could imagine 500k multiple bauds might happen to work much better with these adapters.\nI am not sure what you mean by logs, though.  It literally says:\nesptool.py v1.2-dev\nConnecting...\nRunning Cesanta flasher stub...\nFailed to ping the running flasher stub (got CF48C1C9). Try lower baud rate?\nI could attach a comparison of good/bad Saleae logic analyser dumps if you needed, though it's free, I'm not sure if you would want to deal with getting the software to read them.\n. GOOD GRIEF.  1 Megabit does work extremely well!!!  I hate to just ignore the bug, considering it \"feels\" like it should work, but setting baud rate to 1,000,000 seems to work just about every time and I do <3 the added speed.  Ok, maybe like 60% of the time, but I don't have any of the CF84 failures.  It feels about as reliable as the old version.\n. I am Linux. \nAlso, someday I might try to debug the not even getting to the point of getting an error error, where it just waits.  This happens frequently (maybe ~40% of the time).  But at least now it's a lot less inconvenient.\n. No, everything is standard desktop PC.  \nuname -a\nLinux aspire 3.19.0-59-lowlatency #66~14.04.1-Ubuntu SMP PREEMPT Fri May 13 18:44:44 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux\nI will try to get the dumps this weekend.\nP.S. I am now starting to want to solve the \"doesn't connect\" thing I have been seeing since forever.  MAN it would be cool to have the thing program every time.\n. I AM A TERRIBLE PERSON.\nAn old vestige of my build systems was to send the 'reboot' command at 115,200.  The ESP sometimes locked onto this and thereby prevented programming.  I literally spent an hour or so getting all my captures and dumps together before I realized this.  Now everything works every time at every baud rate.\n~~ALL of the problems are gone.~~\n. Never mind. I spoke too soon.  The 1M baud bug is still there sometimes. Collecting new dumps now.\n. Post_strace_fail_At_1M.txt\nPost_Fail_At1M.logicdata.zip\n. OH! I am sorry, I should have clarified. I did modify the baud rate constant at the top of the current code.  Should I not be doing that?  I had no idea they were different!\n. Sorry, I should have responded sooner.\nSo, using it that way does seem to increase its reliability, however, on a crash/reboot with GPIO0 low (Without depower, or hitting reset line) it seems to say \"Loading Cesanta ...\" but not get any further, ever.   I suppose I need to just give up and wire in the reset line instead of operating in a perpetual GPIO low dev case.  We can close the ticket now, and if I ever get any further, I will re-open it, but for now reliability is up.\nFor any other souls seeing this thread: tl;dr:  Always keep the baud rate in the .py at 115200, but use -b on the command-line to increase baud rate.\n. ",
    "romuye123": "Thanks for your reply @projectgus \nTried executing the command \n$ sudo esptool.py --port /dev/cu.SLAB_USBtoUART --baud 115200 write_flash 0x00000 my_app.cpp.elf-0x00000.bin 0x01010 my_app.cpp.elf-0x01010.bin\nand facing issues while uploading. Sometimes get time out and sometimes get assertion error. Following is the serial output:\nesptool.py v1.2-dev\nConnecting...\nRunning Cesanta flasher stub...\nA fatal error occurred: Timed out waiting for packet content\nOR\nAssertionError: Address must be sector-aligned\n. @projectgus : thanks for your reply.\nI used the verison 2 command and the esptool created a single bin file. So it has created a bin file named my_app-ota.bin\nSo which address should i use to upload this bin file ?\n$ sudo esptool.py --port /dev/cu.SLAB_USBtoUART --baud 115200 write_flash 0x00000 my_app-ota.bin\nIs this correct ?\n. @projectgus \nI am using Arduino IDE for normal program upload,which works fine.\nThe arduino ide shows following \nUploading 365200 bytes from /Hexfiles/myapp.cpp.bin to flash at 0x00000000\nI believe arduino ide internally uses esptool-ck tool. \nI am confused on how to generate binary files using arduino ide and on which memory location the binary file should be uploaded using esptool.py?\n. Agree with @PeterQFR \neven i am unable to flash correctly. many of the times i get following error:\n$ sudo esptool.py --baud 115200 --port /dev/cu.SLAB_USBtoUART write_flash 0x00000 testapp.bin --flash_mode dio --flash_size 32m --flash_freq 40m\nesptool.py v1.2-dev\nConnecting...\nA fatal error occurred: Failed to connect to ESP8266\n. ",
    "pieman64": "@projectgus thanks for your feedback and I have looked through the troubleshooting guide at length.\nThe device is an ESP07 and I'm using this comand:\npython esptool.py -p COM5 write_flash -fm dio -fs 8m 0x0000 Thermov3.0.0.bin\nesptool.py v1.2-dev\nConnecting...\nRunning Cesanta flasher stub...\nFlash params set to 0x0220\nWriting 360448 @ 0x0... 0 (0 %)\nA fatal error occurred: Timed out waiting for packet header\nJust tried it with another ESP07 and it works fine as shown below:\npython esptool.py -p COM5 write_flash -fm dio -fs 8m 0x0000 Thermov3.0.0.bin\nesptool.py v1.2-dev\nConnecting...\nRunning Cesanta flasher stub...\nFlash params set to 0x0220\nWriting 360448 @ 0x0... 360448 (100 %)\nWrote 360448 bytes at 0x0 in 31.7 seconds (90.9 kbit/s)...\nLeaving...\nSo it looks like the first ESP07 is faulty. Tried to erase the flash as shown below but no joy. Is there anything else I can try?\n```\npython esptool.py -p COM5 erase_flash\nesptool.py v1.2-dev\nConnecting...\nErasing flash (this may take a while)...\nA fatal error occurred: Timed out waiting for packet header\n```\n. @projectgus the 8MB and 16MB update was committed 18 days ago but are you saying it's not been merged yet and therefore not available? Is there any way we can start using this now and if so how?\nWe want to use it from the Arduino IDE.. ",
    "OrganicIrradiation": "Fixed by putting a 10 Ohm resistor between pins D3 (DIO 0) and GND! Seems as though the reset & programming circuit's pull-down timing is off (see right side of USB to UART section of the Wemos D1 mini schematic)\n$ esptool.py --port /dev/tty.wchusbserial1410 --baud 115200 write_flash --flash_size=32m -fm dio 0 esp8266-20160823-v1.8.3-41-g253e1a6.bin\nesptool.py v1.1\nConnecting...\nRunning Cesanta flasher stub...\nFlash params set to 0x0240\nWriting 532480 @ 0x0... 532480 (100 %)\nWrote 532480 bytes at 0x0 in 46.1 seconds (92.4 kbit/s)...\nLeaving...\n. I believe flashing v1.8.3 of micropython introduced the issue (from the binary on micropython.org).\nI was able to clear up lingering issues and can now re-upload Arduino without the additional resistor (between GND and DIO 0) by clearing the flash, re-uploading the boot binary (not sure if this matters), and then doing an initial upload with the Arduino IDE:\n```\nFor each run of esptool.py, make sure 10 Ohm resistor is between DIO 0 and\nGND and unplug/reattach after each successful completion:\n$ esptool.py --port /dev/tty.wchusbserial1420 erase_flash\nGet blank_1MB.bin from http://www.pratikpanda.com/completely-format-erase-esp8266-flash-memory/\n$ esptool.py --port /dev/tty.wchusbserial1420 --baud 115200 write_flash --verify --flash_mode=dio --flash_size=32m 0x00000 blank_1MB.bin 0x10000 blank_1MB.bin 0x20000 blank_1MB.bin 0x30000 blank_1MB.bin\n$ esptool.py --port /dev/tty.wchusbserial1420 erase_flash\nGet boot_v1.6.bin from https://github.com/tommie/esp8266_nonos_sdk\n$ esptool.py --port /dev/tty.wchusbserial1420 --baud 115200 write_flash --verify --flash_mode=dio --flash_size=32m 0x00000 boot_v1.6.bin\nFlash with Arduino IDE, then unplug and remove resistor.\nShould be able to reflash without using the programming resistor.\n```\n. ",
    "dgonzalez870": "I have same problem with a lolin V3 board. I can read chip_Id, MAC, flash, when I try to read the flash_id  it seems to return a wrong value: Manufacturer: 00, Device: 0000, Detected flash size: Unknown  and when i try to write a binary of Nodemcu generated from the cloud build service produces A fatal error occurred: Timed out waiting for packet content\n\nI have the following results:\n\nRead mac\n\n```\n\npy .\\esptool.py -p com4 -b 9600 read_mac\nesptool.py v2.3-dev\nConnecting....\nDetecting chip type... ESP8266\nChip is ESP8266EX\nUploading stub...\nRunning stub...\nStub running...\nMAC: 5c:cf:7f:13:34:8e\nHard resetting...\n```\n\n\nRead Chip ID\n\n```\n\npy .\\esptool.py -p com4 -b 9600 chip_id\nesptool.py v2.3-dev\nConnecting....\nDetecting chip type... ESP8266\nChip is ESP8266EX\nUploading stub...\nRunning stub...\nStub running...\nChip ID: 0x0013348e\nHard resetting...\n```\n3. Read Flash ID\n\n```\n\npy .\\esptool.py -p com4 -b 9600 flash_id\nesptool.py v2.3-dev\nConnecting....\nDetecting chip type... ESP8266\nChip is ESP8266EX\nUploading stub...\nRunning stub...\nStub running...\nManufacturer: 00\nDevice: 0000\nDetected flash size: Unknown\nHard resetting...\n```\n4. Read Flash\n\n```\n\npy .\\esptool.py -p com4 -b 9600 read_flash 0 16777216 esp_flash_content.txt\n\nesptool.py v2.3-dev\nConnecting....\nDetecting chip type... ESP8266\nChip is ESP8266EX\nUploading stub...\nRunning stub...\nStub running...\n16777216 (100 %)\n16777216 (100 %)\nRead 16777216 bytes at 0x0 in 1528.4 seconds (87.8 kbit/s)...\nHard resetting...\n```\n5. Write flas\n```\n\npy .\\esptool.py -p com4 -b 9600 write_flash 0 nodemcu.bin\nesptool.py v2.3-dev\nConnecting....\nDetecting chip type... ESP8266\nChip is ESP8266EX\nUploading stub...\nRunning stub...\nStub running...\nConfiguring flash size...\nWarning: Could not auto-detect Flash size (FlashID=0x0, SizeID=0x0), defaulting to 4MB\nFlash params set to 0x0240\nCompressed 401328 bytes to 258738...\n\nA fatal error occurred: Timed out waiting for packet content\n```\n. ",
    "KaDw": "The problem is on both, CP2102 and CH340. I'm using this breakout. Also there is 100nF cap on the back, close to ESP. Breakout board is connected via 10cm wires to UART adapter.\n. @roger-zacharczyk I used another power supply. I guess something happened to one that I used before.\n@projectgus Yes, thats my bad, there should be -fs 32m. Today after a long break I tried again on another  power supply and it worked. As you mentioned, it is probably hardware issue. Now even on 256000 baudrade it works like charm.\n. ",
    "roger-zacharczyk": "@KaDw Have you been able to fix the problem?\n. In my case it was a huge voltage drop between the left side and right side of the power lines in my breadboard. I switched to wires.. @CaptClaude \nInteresting. Out of curiosity: is there any difference between these two ports? Like USB 2.0 vs 3.0? Did you measure the voltage/current in both these ports?. ",
    "manchmal2": "Hey man. \nIm new to this and everytime i try to flash the nodemcu i get this: \nConnecting........_\nDetecting chip type... ESP8266\nChip is ESP8266\nUploading stub...\nRunning stub...\nStub running...\nConfiguring flash size...\nWarning: Could not auto-detect Flash size (FlashID=0x0, SizeID=0x0), defaulting to 4MB\nFlash params set to 0x0040\nCompressed 461984 bytes to 298188...\nA fatal error occurred: Timed out waiting for packet content\nIm connecting it with a micro usb. Can you help me out?. Okay, i just connect it with the micro usb cable to my pc. Im not even able to use esplorer to communicate with it. How can i fix it?. ",
    "ouaibsky": "Hi got exactly same issue with my ESP32 dev board\nSomeone do some progress ?\nRegards\nChris. I check all things listed on troubleshooting page.\nI'm using a macbook pro with usb - uart driver provided by https://www.silabs.com/products/development-tools/software/usb-to-uart-bridge-vcp-drivers\nI plug USB from my macbook, voltage is qui stable: around 3.32 - 3.33V\nWhen I push the \"BOOT\" Button on my dev board, I monitor GPIO0 and its becoming LOW (0.05V).\nThe strange things is I didn't get same output when trying to flash with Arduino or running esptool in a command line.\noutput from Arduino\n```\nesptool.py v2.1-beta1\nConnecting....\nChip is ESP32D0WDQ6 (revision 0)\nUploading stub...\nRunning stub...\nStub running...\nConfiguring flash size...\nWarning: Could not auto-detect Flash size (FlashID=0xffffff, SizeID=0xff), defaulting to 4MB\nCompressed 8192 bytes to 47...\nA fatal error occurred: Timed out waiting for packet content\nA fatal error occurred: Timed out waiting for packet content\n```\ncommand line, it's worst, impossible to connect\n```\ne clalleme  \u2387  master  ~/Documents/Arduino/hardware/espressif/esp32/tools  2   ./esptool.py --port /dev/cu.SLAB_USBtoUART -b 9600 flash_id\nsptool.py v2.1-beta1\nConnecting........_..............._..............._..........__....._____\nA fatal error occurred: Failed to connect to Espressif device: Timed out waiting for packet header\n. Correction, with command line I success to get flash_id\n./esptool.py --port /dev/cu.SLAB_USBtoUART flash_id\nesptool.py v2.1-beta1\nConnecting........__\nDetecting chip type... ESP32\nChip is ESP32D0WDQ6 (revision 0)\nUploading stub...\nRunning stub...\nStub running...\nManufacturer: ff\nDevice: ffff\nDetected flash size: Unknown\nHard resetting...\n```. Same result to me when using different port on my MacBook ( Think it's all USB3.0). I have issue with this one: https://www.aliexpress.com/item/ESP32-Development-Board-WiFi-Bluetooth-Ultra-Low-Power-Consumption-Dual-Cores-ESP-32-ESP-32S-Board/32802136026.html\nJust received this one and works like a charm: https://www.aliexpress.com/item/WEMOS-LOLIN32-V1-0-0-wifi-bluetooth-board-based-ESP-32-esp32-4MB-FLASH/32808551116.html\n. ",
    "CaptClaude": "Here's another data point on flashing, ports and (perhaps) power.\nI have a Mid-2014 MacBook Pro and was having trouble flashing MicroPython.\nI did the normal thing, plugged my D1 Mini into a breadboard (with a blue power LED attached through a 220Ohm resistor), hooked up the USB cable to the USB port on the left side of my computer, entered\n$ esptool.py --port /dev/tty.SLAB_USBtoUART --baud 460800 write_flash --flash_size=detect -fm dio 0 esp8266-20170823-v1.9.2.bin\nesptool.py v2.1\nand got the dreaded Connecting........_____.....(etc.) then ...Timed out waiting for packet header. \nLowered eventually down to 9600 with no success. I took the ESP off the breadboard and tried again with the 9600.  Nothing.  Then I deleted the --baud and it worked.  Tried the USB port on the right side: worked.  Plugged the ESP back into the breadboard (still right USB port) and it worked. \n$ esptool.py --port /dev/tty.SLAB_USBtoUART  write_flash --flash_size=detect -fm dio 0 esp8266-20170823-v1.9.2.bin\nesptool.py v2.1\nConnecting........_\nDetecting chip type... ESP8266\nChip is ESP8266\nUploading stub...\nRunning stub...\nStub running...\nConfiguring flash size...\nAuto-detected Flash size: 4MB\nFlash params set to 0x0240\nCompressed 601136 bytes to 392067...\nWrote 601136 bytes (392067 compressed) at 0x00000000 in 34.6 seconds (effective 138.9 kbit/s)...\nHash of data verified.\nLeaving...\nHard resetting...\nWith the ESP in the breadboard (with only one blue LED) I cannot flash with the left port, but I can with the right. I think a powered hub might help too.\n1) Don't use the baud parameter\n2) Different USB ports perform differently. I recall a long time ago reading that one port worked better for things like this but I can't find the reference anywhere.  A quick Google search shows that there is and has always been differences between the USB ports on Macs.  Why this would be true is anyone's guess.\nI just tried reflashing with my little USB volt-ammeter plugged in and it won't flash from the right port with that in the circuit.  There was nothing unusual about the voltage or current (5.01V 89mA) while it was trying to get connected though.\nI put down my ESPs for a while and picked them up again just recently so it's that old slow learning curve again.. ",
    "fluentart": "I'm having this issue. It was able to upload to the board yesterday and this morning. When I tried to blink LED and add an interrupt function the board stopped responding to uploads with this same error. \n\nBuild options changed, rebuilding all\n.........._.....Archiving built core (caching) in: /var/folders/mm/x6q_vdnn7gz82s5n8dyj_kgm0000gn/T/arduino_cache_53890/core/core_espressif_esp32_esp32_FlashMode_qio,FlashFreq_80,FlashSize_4M,UploadSpeed_921600,DebugLevel_none_21ef24fb8df1668ae86005e61e51fea4.a\n_Sketch uses 277607 bytes (21%) of program storage space. Maximum is 1310720 bytes.\nGlobal variables use 26736 bytes (9%) of dynamic memory, leaving 268176 bytes for local variables. Maximum is 294912 bytes.\nAn error occurred while uploading the sketch\n_java.io.IOException: Stream closed\n  at java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:170)\n  at java.io.BufferedInputStream.read(BufferedInputStream.java:336)\n  at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)\n  at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)\n  at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)\n  at sun.nio.cs.StreamDecoder.read0(StreamDecoder.java:127)\n  at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:112)\n  at java.io.InputStreamReader.read(InputStreamReader.java:168)\n  at processing.app.debug.MessageSiphon.run(MessageSiphon.java:81)\n  at java.lang.Thread.run(Thread.java:745)\nesptool.py v2.1-beta1\nConnecting.................._..............._..........__....._.....___\nA fatal error occurred: Failed to connect to ESP32: Timed out waiting for packet header\nA fatal error occurred: Failed to connect to ESP32: Timed out waiting for packet header\n\nI'm on Mac Book Pro, with Arduino 1.8.3. And ESP-WROOM-32 by DOIT.AM (ESP32 DEVKIT V1). ",
    "KaVo194": "Same issue with MacBook Pro 2017 via USB-C. Any update available?. ",
    "TrigerxD": "Hey all. I had the same problem \"Timed out...\" In my case some of straping pins had wrong logic state. Take multimeter and try that you have on gpio2 \"0\" gpio0 \"0\" and gpio12 \"0\". That last decide that at '0' memory is at 3.3V (what we want) and at '1' at 1.8V what causes many problems.\nHere is great explanation how it should be \nhttps://github.com/espressif/esptool/wiki/ESP32-Boot-Mode-Selection. ",
    "racielrod": "If you are using a MacBook - as some of you have reported - make sure your charger is plugged in. After connecting the charger to the macbook I was able to flash w/o issues. . ",
    "Apaezmx": "While waiting for my external 3.3v power supply to arrive, I played around with esptool timeouts. Seems if you extend the timeout constants within the py file, and set a low baud (4800) it works with Arduino UNO 3.3v supply. The only downside is that it takes longer to do stuff.. Hmm... why?\nIt has worked so far. I've been using my modified esptool.py to program my ESP8266 for a few days now. No issues other than flashing takes 1-2 minutes.\n. @projectgus I see. Then I guess my issue was not with the power supply :).. ",
    "sandmarq": "I have the same WeMos d1 mini pro and I was wondering if anyone had any plan to look at this issue.\n\n./esptool.py --port /dev/ttyUSB0 -b 115200 flash_id\nesptool.py v2.0-beta1\nConnecting....\nDetecting chip type... ESP8266\nUploading stub...\nRunning stub...\nStub running...\nManufacturer: ef\nDevice: 4018\nHard resetting...\n\nI was able to flash it by forcing it to use only 4M of the 16M.\n. ",
    "devsaurus": "Current master correctly detects the 16MB flash but aborts with an error message that this size isn't supported by the chip. This seems to be too restrictive, but are these new flash size values (0x80 and 0x90) supported by the SDK? IMO there's not much use in introducing new values if the SDK can't determine the location of the init data from them.\nAFAIK the existing solutions for Arduino and NodeMCU apply some kind of tweak to use the module in a \"known good\" configuration like 4MB or 1MB. Guess a 100% clean approach needs support from the SDK for 8/16MB, anything else is a workaround.\nMy proposal for \"8/16MB support by esptool.py on ESP8266\" is to turn the error-and-abort condition when >4MB is detected into a warning and set the flash size to e.g. 1MB automatically. Any tweaks in the firmware are still required for sure - just the flash autodetection shouldn't block downloading anymore.\nAny objections / additions? I'd come up with a respective PR.\n. > If you replace \"Android\" with \"Arduino\"\n\ud83d\ude0a \n\nHow likely is it that this would upset some firmwares?\n\nDon't know, this depends on the specific firmware. If a FW relies exclusively on the flash size header it should adapt correctly. If it tries to be smart and inspects the true physical size of the flash it might get into trouble.\nThis all boils down to the question how to deal with a hardware configuration that's not specified by Espressif and thus isn't backed by consistent SDK support.\nCurrent esptool.py takes the safe route and rejects >4MB: No service for an unspec'd HW configuration. The user can always override this with the -fs option, though. If he knows what he does.\n. Right, the hardware is able to deal with 16MB.\nDifferent for the software: Chapter 4 in http://espressif.com/sites/default/files/documentation/2a-esp8266-sdk_getting_started_guide_en.pdf doesn't specify flash maps for >4MB.. ",
    "igrr": "We'll update the ESP8266 non-OS SDK to support 16MB flash size in the next release (roughly in a month).. @pieman64 @capedra To get 8MB and 16MB working properly in Arduino, esptool.py update is not necessary, as we are using a different tool to generate images and do flashing. But we do need an update to the non-OS SDK, which will soon be released.\nOnce the updated SDK is available, I will implement 8/16MB support in the Arduino core. Then the hack mentioned in that platformio discussion will not be needed.. @capedra you can go to https://github.com/esp8266/Arduino/issues/3215 and click \"Subscribe\" to get updates :). @marcelstoer do you see this behavior with any common board, e.g. NodeMCU?. Hi @Ralim, could you please post the configuration you are passing to esp_pm_configure? Thanks.. #include <stddef.h>?\n. ",
    "dwery": "FYI, https://github.com/igrr/esptool-ck was able to flash my D1 pro correctly . ",
    "capedra": "@igrr Hello Ivan. Any news about supporting the 16 MB flash size from WeMos D1 Mini Pro? Thanks!. @igrr @projectgus \neveryone, please, help us on here\n. @igrr Hello Ivan, thanks a lot for your support. I can see that several people do not only want but they actually need this 16MB support as soon as possible. Thousands of people who buy WeMos D1 mini Pro.. @igrr @projectgus Hello software engineers! As the updated SDK became available earlier today, can the colleagues please implement 8/16MB support in the Arduino core? Thank you very much!!. @igrr Any news about your implementation?. ",
    "hroncok": "See https://github.com/hroncok/3dprinter-udev-rules/blob/master/66-3dprinter.rules as an example how this could be achieved. It requires gathering PIDs and VIDs of the devices. \n. Will send fix.. ",
    "encukou": "I guess the question is: Could such rules be part of the esptool repo, where all Linux distros/users can take advantage of them?\n. ",
    "frenzymadness": "Hello.\nThe downside of a dialout group is that to add yourself to it, you need to run a command and then log out & in. We're trying to streamline the experience for newcomers.\nYour argument about dialout is fair. We'll investigate adding users there automatically. If that doesn't work out, we'll send a pull request. Thanks for your willingness to accept it!\nThe linked rules are systemd-specific, yes.\nThanks for writing esptool!\n. ok, thank you\n. ",
    "serus22": "same as https://ae01.alicdn.com/kf/HTB114xvJFXXXXcDXFXXq6xXFXXXj/120336020/HTB114xvJFXXXXcDXFXXq6xXFXXXj.jpg but i tryied to connect gpio0 to gnd/uart-rts/+3.3  and its still not working, also external esp power source with connected gnds.\n. Srorry for late reply, here its result of miniterm.py followed by 2 attempts of flash by esptool\nhttp://prnt.sc/cvy7gb\n\nets Jan  8 2013,rst cause:2, boot mode:(5,5) waiting for host\n\nwas printed to console when i push reset button\n. today i tryed this converter\nhttp://www.ebay.com/itm/121697917486?_trksid=p2057872.m2749.l2649&ssPageName=STRK%3AMEBIDX%3AIT\nwired as here \nhttp://prnt.sc/cwfnbx\nso the result is: flashing is finished successfully (by esp flasher), but if i reset module, open esplorer and push connect button, module start sending infinity unknown data stream, and led its blinking, if i reset r power of module and start again, esp continue in sending unknown data and blinking, i can stop it by pressing Flash button and pressing rst or enable pulldown button. If im doing whatever, its stil just in these 2 states. i think flashing isnt working bcs if i connect via putty with 74880 baudrate, there is always same message \"ets Jan.....\" \nim rly confused.\ni tryed a lot of combinations but nothing works\n. sorry for no comment, i am closing it because i do not think it is general problem but its not resolved\n. ",
    "bvernoux": "I have moved my comment to https://github.com/themadinventor/esptool/issues/136 as it was not linked to this issue \n. For full details on this issue I have done a full analysis of the problem on Win7 see\nhttp://esp32.com/viewtopic.php?f=2&p=1511#p1511\nI also confirm that by modifying esptool.py\nfrom\nself._port.setDTR(False)\n            self._port.setRTS(True)\n            time.sleep(0.05)\n            self._port.setDTR(True)\n            self._port.setRTS(False)\n            time.sleep(0.05)\n            self._port.setDTR(False)\nto\nself._port.setDTR(False)    # GPIO0 -> 1\n            self._port.setRTS(True  )   # RST -> 0\n            self._port.setDTR(True  )   # GPIO0 -> 0\n            time.sleep(0.05)\n            self._port.setRTS(False )   # RST -> 1\n            time.sleep(0.1)\nThat fix the problem on win7 (thanks to rudi post http://esp32.com/viewtopic.php?f=13&p=1512#p1512)\n. In fact after analysis of rudi patch it is pure luck (thanks to watchdog and glitch on EN signal) \nFor more details on Rudi patch see Saleae Logic  1.2.10 capture:\n- RudiPatch Saleae Capture\n- See screenshot:\n  \nI have simplified it like that\nesptool.py modifications (MyPatch):\nfrom\nself._port.setRTS(True)\n            time.sleep(0.05)\n            self._port.setDTR(True)\n            self._port.setRTS(False)\n            time.sleep(0.05)\n            self._port.setDTR(False)\nto\nself._port.setDTR(False) # EN=0 and IO0=0\n            time.sleep(0.05)\n            self._port.setRTS(False) # EN=1 and IO0=1(glitch on IO0 during 1ms)\n            self._port.setDTR(True)  # EN=1 and IO0=0\nThe main problem is the glitch on IO0 during 1.1ms which does not allow to enter download mode as IO0 is sampled by ESP32 during this glitch but we are lucky that we have a reset by watchdog after 0.385s (with message RTCWDT_RTC_RESET) which then boot in download mode because EN=1 and IO0=0\nFor more details see Saleae Logic  1.2.10 capture of MyPatch:\n- MyPatch Saleae Capture\n- See screenshot:\n  \nFor information MyPatch is a bit faster (300ms) compared to Rudi version and keep EN to 0 during at least 50ms(and not 3.5ms like Rudi which in fact is a glitch) and after multiple test my patch never fail with Win7 64bits and also under VirtualBox with Xubuntu 14.04\nIf other can give feedback it will be great\n. I confirm adding a 2.2uF capacitor on EN (connected between EN and GND) fix the problem\n\n. For information it is already fixed in actual branch even without the capacitor => thanks to an ESP32 silicon bug with reset by watchdog after 0.385s\nI do not see why this modification will improve anything.\nDo you have a sigrok capture to show the difference with this patch ?\n. I have done some reverse engineering on that if you are interested\nhttps://gist.github.com/bvernoux/6ddc02ed157417a4df37861488357c5a\nFeel free to update the Serial protocol wiki with those informations. ",
    "screig": "```\nC:\\WINDOWS\\system32>python -v\ninstalling zipimport hook\nimport zipimport # builtin\ninstalled zipimport hook\nC:\\tools\\python2\\lib\\site.pyc matches C:\\tools\\python2\\lib\\site.py\nimport site # precompiled from C:\\tools\\python2\\lib\\site.pyc\nC:\\tools\\python2\\lib\\os.pyc matches C:\\tools\\python2\\lib\\os.py\nimport os # precompiled from C:\\tools\\python2\\lib\\os.pyc\nimport errno # builtin\nimport nt # builtin\nC:\\tools\\python2\\lib\\ntpath.pyc matches C:\\tools\\python2\\lib\\ntpath.py\nimport ntpath # precompiled from C:\\tools\\python2\\lib\\ntpath.pyc\nC:\\tools\\python2\\lib\\stat.pyc matches C:\\tools\\python2\\lib\\stat.py\nimport stat # precompiled from C:\\tools\\python2\\lib\\stat.pyc\nC:\\tools\\python2\\lib\\genericpath.pyc matches C:\\tools\\python2\\lib\\genericpath.py\nimport genericpath # precompiled from C:\\tools\\python2\\lib\\genericpath.pyc\nC:\\tools\\python2\\lib\\warnings.pyc matches C:\\tools\\python2\\lib\\warnings.py\nimport warnings # precompiled from C:\\tools\\python2\\lib\\warnings.pyc\nC:\\tools\\python2\\lib\\linecache.pyc matches C:\\tools\\python2\\lib\\linecache.py\nimport linecache # precompiled from C:\\tools\\python2\\lib\\linecache.pyc\nC:\\tools\\python2\\lib\\types.pyc matches C:\\tools\\python2\\lib\\types.py\nimport types # precompiled from C:\\tools\\python2\\lib\\types.pyc\nC:\\tools\\python2\\lib\\UserDict.pyc matches C:\\tools\\python2\\lib\\UserDict.py\nimport UserDict # precompiled from C:\\tools\\python2\\lib\\UserDict.pyc\nC:\\tools\\python2\\lib_abcoll.pyc matches C:\\tools\\python2\\lib_abcoll.py\nimport _abcoll # precompiled from C:\\tools\\python2\\lib_abcoll.pyc\nC:\\tools\\python2\\lib\\abc.pyc matches C:\\tools\\python2\\lib\\abc.py\nimport abc # precompiled from C:\\tools\\python2\\lib\\abc.pyc\nC:\\tools\\python2\\lib_weakrefset.pyc matches C:\\tools\\python2\\lib_weakrefset.py\nimport _weakrefset # precompiled from C:\\tools\\python2\\lib_weakrefset.pyc\nimport _weakref # builtin\nC:\\tools\\python2\\lib\\copy_reg.pyc matches C:\\tools\\python2\\lib\\copy_reg.py\nimport copy_reg # precompiled from C:\\tools\\python2\\lib\\copy_reg.pyc\nC:\\tools\\python2\\lib\\traceback.pyc matches C:\\tools\\python2\\lib\\traceback.py\nimport traceback # precompiled from C:\\tools\\python2\\lib\\traceback.pyc\nC:\\tools\\python2\\lib\\sysconfig.pyc matches C:\\tools\\python2\\lib\\sysconfig.py\nimport sysconfig # precompiled from C:\\tools\\python2\\lib\\sysconfig.pyc\nC:\\tools\\python2\\lib\\re.pyc matches C:\\tools\\python2\\lib\\re.py\nimport re # precompiled from C:\\tools\\python2\\lib\\re.pyc\nC:\\tools\\python2\\lib\\sre_compile.pyc matches C:\\tools\\python2\\lib\\sre_compile.py\nimport sre_compile # precompiled from C:\\tools\\python2\\lib\\sre_compile.pyc\nimport _sre # builtin\nC:\\tools\\python2\\lib\\sre_parse.pyc matches C:\\tools\\python2\\lib\\sre_parse.py\nimport sre_parse # precompiled from C:\\tools\\python2\\lib\\sre_parse.pyc\nC:\\tools\\python2\\lib\\sre_constants.pyc matches C:\\tools\\python2\\lib\\sre_constants.py\nimport sre_constants # precompiled from C:\\tools\\python2\\lib\\sre_constants.pyc\nimport _locale # builtin\nC:\\tools\\python2\\lib\\locale.pyc matches C:\\tools\\python2\\lib\\locale.py\nimport locale # precompiled from C:\\tools\\python2\\lib\\locale.pyc\nimport encodings # directory C:\\tools\\python2\\lib\\encodings\nC:\\tools\\python2\\lib\\encodings__init__.pyc matches C:\\tools\\python2\\lib\\encodings__init__.py\nimport encodings # precompiled from C:\\tools\\python2\\lib\\encodings__init__.pyc\nC:\\tools\\python2\\lib\\codecs.pyc matches C:\\tools\\python2\\lib\\codecs.py\nimport codecs # precompiled from C:\\tools\\python2\\lib\\codecs.pyc\nimport _codecs # builtin\nC:\\tools\\python2\\lib\\encodings\\aliases.pyc matches C:\\tools\\python2\\lib\\encodings\\aliases.py\nimport encodings.aliases # precompiled from C:\\tools\\python2\\lib\\encodings\\aliases.pyc\nimport operator # builtin\nC:\\tools\\python2\\lib\\functools.pyc matches C:\\tools\\python2\\lib\\functools.py\nimport functools # precompiled from C:\\tools\\python2\\lib\\functools.pyc\nimport _functools # builtin\nC:\\tools\\python2\\lib\\encodings\\cp1252.pyc matches C:\\tools\\python2\\lib\\encodings\\cp1252.py\nimport encodings.cp1252 # precompiled from C:\\tools\\python2\\lib\\encodings\\cp1252.pyc\nzipimport: found 132 names in C:\\tools\\python2\\lib\\site-packages\\setuptools-26.1.1-py2.7.egg\nPython 2.7.10 (default, May 23 2015, 09:44:00) [MSC v.1500 64 bit (AMD64)] on win32\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n\n\n\n```\n. \n\n\n",
    "visasimbu": "Include python word in front of your command. So your command should something like below.\nC:\\WINDOWS\\system32>python esptool.py --version. ",
    "YorkJong": "I don't know why the value of ESP_FLASH_BLOCK is 0x400. As I known, almost all serial (NOR) flashes support 64k  block size (the erasure unit), some serial flashes also support 32k block size, and a few serial flashes additionally support 4k erasure unit, so called sector. None of them support 0x400 (1k) erasure unit.\n. ",
    "negativekelvin": "Yes this was on windows 7 with esp32, compressed uploads, and 921600 baud.  All those factors can lead to t <10ms which results in zero value.\n. Yes, that makes sense.  I don't know if those properties and methods are very likely to change, so yes I like the check and fall back strategy until pyserial can support it.\n. However it also looks like _reconfigure_port() only updates the RTS/DTR lines on windows, not other platforms.  So would have to add a platform check before calling.\n. @bvernoux are you able to capture the waveforms for the method using reconfigure_port in the first post on windows?\n. That is disappointing.  Time to ask silicon labs?\n. > we are lucky that we have a reset by watchdog after 0.385s\nWhat is the cause of this?\n. Bad prototype?\nhttps://github.com/espressif/esptool/blob/b8f67930c2f32c1a0ca856ce392dd96ad880ef19/flasher_stub/rom_functions.h#L47. It should be void spi_flash_attach(uint32_t ishspi, bool legacy); but I don't know if that is enough to cause the failure due to the assembler/linker not having enough information about the calling convention.  It is the only reason I could see that the call might succeed from rom but fail from stub.\n. ",
    "krzychb": "@projectgus and all - thank you guys!\nNo more fiddling with EN / Boot buttons.\nLife is much easier with this simple hack :smile: \nKrzysztof\n\n. ",
    "ladyada": "hiya - got bit by this bug, and found a few things helped. capacitor helps but easier to change the second time.sleep(0.05) to time.sleep(0.5) e.g. https://github.com/adafruit/arduino-esp32/blob/master/tools/esptool.py#L279\nthat along with a formal 'reset' procedure to swat the ESP32 back into 'user mode'\nhttps://github.com/adafruit/arduino-esp32/blob/master/tools/esptool.py#L296\nhas made developing code work great on win7 + CP210x... plz re-consider the wontfix? there's a lot of those DevKitC's in the world now :) i can test on mac/linux too\n. yah ok - i didn't realize it was a silicon issue on the esp32 (thought it was cp210x) in which case... i agree y'all should keep as wontfix.\ni will update the devkitc product page to tell people to add a capacitor if they're having upload probs on windows\n. ahh ok yes reading thru more carefully i understand the double-bug interaction! too funny - ok thanks!\n. ",
    "MartyMacGyver": "I've been investigating this and I think there's a more permanent solution that'd be effective and not too burdensome. Interestingly, the esp32r0 workaround doesn't seem to help at all for this yet it sounds like a similar issue if not the same one.\nA long discussion follows with technical details I've gleaned, but the bottom line is that holding the chip in reset longer does the trick. The code change to esptool.py is a one-liner:\n...\nself._port.setDTR(False)  # IO0=HIGH\nself._port.setRTS(True)   # EN=LOW, chip in reset\ntime.sleep(2.0)  # Sleep longer\nself._port.setDTR(True)   # IO0=LOW\nself._port.setRTS(False)  # EN=HIGH, chip out of reset\ntime.sleep(0.5)  # Sleep longer\n...\n\nThis has the advantage of working on both current boards (and 2 seconds isn't long to wait relative to everything else). If it were a default it'd work smoothly with the Arduino-ESP32 as well - not sure how one is supposed to get --before esp32r0 to work there - is it a config option there (the reset-on-disconnect thing is of related interest but for other discussions).\nNote: for the hard-reset bit, while I see the --before esp32r0 option, I don't see it in --after. Not sure if there is any problem with board reset (as long as DTS is in the right state) so maybe that was a typo?\n\nThe Core Board v2 and ESP-WROVER-KIT act differently upon serial disconnect, and downloads negotiation works slightly differently for each. \nPrevious discussions about this include:\nhttps://github.com/espressif/esp-idf/issues/59\nhttps://github.com/espressif/esptool/issues/136\nhttps://github.com/espressif/arduino-esp32/issues/127#issuecomment-274368250\nhttp://esp32.com/viewtopic.php?f=13&t=334\nTested on Windows with the latest serial drivers via RealTerm:\nSi Labs CP210x driver v6.7.4.261 (non-enumerating) for the Core Board v2\nFTDI driver v2.12.24.0 (enumeration disabled) for the ESP-WROVER-KIT\nNote: interestingly, clear/set can be positive logic (clear = 0/low/false, set = 1/high/true), or the inverse (active low). In esptool.py the active low mode is used - here, I used active high notation.\nFor the ESP-WROVER-KIT, to get to download mode, it's pretty simple:\n  - Start with RTS and DTR set\n  - Do the following in quick succession (no long pause between the steps):\n      - clear DTR (holds reset low)\n      - set DTR\n      - clear RTS (enters download mode)\n      - set RTS (can immediately do this)\n      - toggle DTR clear+set to reset in run mode\nThe Core Board v2 is different though - it needs about 2 seconds delay between clearing DTR and setting it:\n  - Start with RTS and DTR set\n  - Do the following in quick succession (except as noted):\n      - clear DTR (holds reset low)\n      - wait 2 seconds\n      - set DTR\n      - clear RTS (enters download mode)\n      - set RTS (can immediately do this)\n      - toggle DTR clear+set to reset in run mode\nThe boot up sequence differs slightly too - on the Core Board v2 that long pause causes a flash error.\nESP-WROVER-KIT\nets Jun  8 2016 00:22:57\n\nrst:0x1 (POWERON_RESET),boot:0x16 (SPI_FAST_FLASH_BOOT)\nets Jun  8 2016 00:22:57\n\nrst:0x10 (RTCWDT_RTC_RESET),boot:0x6 (DOWNLOAD_BOOT(UART0/UART1/SDIO_REI_FEO_V2))\nwaiting for download\n\nCore Board v2\nets Jun  8 2016 00:22:57\n\nrst:0x1 (POWERON_RESET),boot:0x13 (SPI_FAST_FLASH_BOOT)\nflash read err, 1000\nFalling back to built-in command interpreter.\nOK\n>ets Jun  8 2016 00:22:57\n\nrst:0x10 (RTCWDT_RTC_RESET),boot:0x3 (DOWNLOAD_BOOT(UART0/UART1/SDIO_REI_REO_V2))\nwaiting for download\n\nAlso peculiar: if DTR and RTS are both cleared, the EN switch on the ESP-WROVER-KIT won't work at all (this is not the case on the Core Board v2).\n(As an aside, on both devices, if RTS is set, setting DTR (from cleared) resets the board. If DTR is clear, clearing RTS (from set) also resets the board.)\nThe only obvious difference between the two RTS/DTR circuits in the corresponding schematics is that the Core Board v2 specs 12kohm resistors between the CP2102 bridge and the bases of the S8050 transistors, while the ESP-WROVER-KIT specs 1kohm resistors between the FT2232HL bridge and the bases of the S8050 transistors. (The BOOT and EN switch circuits appear to be identical on both.) \nNote: I have no shunts bridging the CTS/RTS headers on the WROVER board. It doesn't appear it would have a positive effect.\n. One other thing... I'm using non-enumerating drivers here. I strongly recommend people stay far away from the enumerating drivers (or disable enumeration for the ports using it), particularly in Windows, if they don't have a reason to be using it (typically emulating a mouse).\nIf the mouse filter gets spurious data (as is quite likely even from a factory fresh device during reset/boot-up) you could get a blue screen. Longer discussion here.\nThe default driver Windows installs for the CP2102 is enumerating - the one I used to test all this is the same one but non-enumerating. That alone could compound everything above as there is that extra layer of introspection for enumeration purposes (and they do act differently... it's annoying. My fix above should work in either case, though the risk of BSOD would remain with enumeration).\n. Note: I didn't pull out the previous workaround because it's not quite clear what it works for, if it worked right / reliably at all (I don't have a Core Board v1 to test against but it's quite possible that that specific code and command line option for that is superseded by this). I know esp32r0 did not help with the Core Board v1.\n. I've made the requested changes (and fixed the earlier merge problem).\nAs uploads are never a problem on the ESP-WROOM-KIT I think this is technically more of a board capacitance delay workaround than an r0 thing in particular.\nEither way, it doesn't hurt to have the fallback mode (the ESP-WROOM-KIT doesn't end up falling back to it, only the Core Board v2 does (and consistently). If someone is using a esp32r0 in some other configuration they will get a fractionally longer delay to connect (and if they used the same reference design, then they're likely going to have the same capacitance issue).\nI'll be curious to see how this works for you against various boards. Note that '_' during connect signifies attempts using this or the explicit esp32r0 workaround.. I have a longer reply but first a question: between the current ESP32-DevKitC and ESP-WROVER-KIT, the latest schematics show the same capacitors... The base resistors though are quite a bit different. Is there a capacitor I'm missing here or is this down to the resistors and their effect on that circuit?. All that is just an effort to better characterize this fix and what it's accomplishing.\nAs for the general fact that the two board have something different about the reset circuit, I do get that... it was more of whether the extra delay I've added is so much about triggering the watchdog as it is about compensating for the circuit difference.\nThe ESP-WROVER-KIT has 12x less resistance in that RC loop, which says to me it's got a shorter time constant when you trigger EN. Interestingly, simply pressing EN on that board can often lead into the boot loader multiple times... so from that perspective I wonder if the current circuit isn't too sensitive (whereas the Core Board V2 is so insensitive that it needs the extra time I added there). Perhaps the extra capacitance in v3 deals with all that.\nGiven that everything we're dealing with here is for r0, I was wondering about nomenclature - what I'm adding isn't so much more of the same r0 workaround as it is a workaround for slower reset circuits in general (and specifically, as they differ between the Core and WROVER boards). The two timeouts seem to do two somewhat different things that together make the Core Board v2 work reliably.\nAnd yes, I meant removing the particular --before esp32r0 selection, not that whole switch. I can make that change later tonight.\nOn nomenclature (for within the code), let me look at the schematics and the serial protocol a bit too tonight - I want to be very clear in the code what's doing what in this alternate reset regime (one thing is an explicit r0 WDT delay that was already there as part of the old option, while what I've added is more of a \"longer reset\" thing to compensate for a slow EN or race condition. The fallback code will still do the same steps but it'll be clear what the new step actually accomplishes.\nNaming suggestions for this are welcome. And again thanks for taking the time to look at this and explain what needed explaining! :+1: \nEdit: \"latency workaround\" has a nice ring to it, for the new delay.... I'm going to call out my extra delay as a latency workaround if that's ok. That and I will get rid of the argument to --board as above.. - Code and code comments clarified\n- Latency delay increased a bit (it wasn't triggering reliably at 0.8s and even 1.0s was somewhat unreliable)\n- Removed --before esp32r0 option\n- Updated README\n- Updated merge comments. As an aside, running certain code - particularly code with interrupts (all via Arduino-ESP32) can make it difficult to get to the boot loader even using the buttons. The fact that that varies at all suggests to me that the code you run matters here.\nThat said, it might be a weird edge case.... it's just interesting that code would have an effect on this response time at all.. ~~It definitely goes into the reset state... but even with the BOOT button it becomes challenging to get into the boot loader state (ready to download). Right now that's the only circumstance when I've seen that happen, and I'm not sure why it happens. If I can reproduce (I'm hopeful it wasn't just a transient problem) it I'll ping you with the details.~~\nEDIT: It's operator error apparently.\nI have a device under test (a TCS34725) that was feeding in periodic interrupts (about two per second) to... GPIO2. Evidently that's a particularly problematic situation during boot. My handy pinout chart didn't call that out as particularly special, except for the pullup/downs which except for BOOT and RESET seemed noteworthy but not exceptional. It's much more explicit in the docs I dug up:\nhttps://www.espressif.com/sites/default/files/documentation/esp32_chip_pin_list_en.pdf\nThat said, I wonder how often the strapping pins are leading to unexpected behavior for people, particularly those using them as inputs?\nNote: I normally wasn't using these special pins, until this device arrived... I picked the wrong pin to try HW interrupts on one of them.. Well, FWIW it still happens occasionally that the Core Board won't go into bootloader mode without a LOT of button pressing, even when I'm carefully avoiding the strapping pins. However, this is not happening in a consistent way so for now I cannot pinpoint it or accurately reproduce it. Is there anything that running code can do that would influence what happens during the next reset, or which would confuse the bootloader?. Just rebased and squashed. If you require further edits let me know - it'd be nice to see this merged when possible.. Let me know what you learn about latency_delay - because that's what helps on the Core Board v2 (without it I must manually intervene) (I've been using that board more than the ESP-WROVER-KIT lately, for reasons of form factor). The cost of having this workaround baked in is virtually negligible since it's only active after the primary attempt fails (though I personally think as long as people are using any of these r0 boards these will be useful to have in the code).. And as for my other question, that was the strapping pins' fault - if you wire them up and they get non-default levels during boot-up, things get screwy. (I thought at first it was the code somehow, unlikely as it was, because I didn't realize what all the strapping pins were.). Then it's safe to say that this has its uses for both production dev boards, while not adding any significant cycle time and eliminating the need for special toggles (which are not easily made when using things like Arduino-ESP32).\n. I'm not sure what you want to see - it seems to me there is no small amount of variability between boards and components, otherwise your WROVER-KIT board would work fine, whereas my Core Board unfailingly requires an extended hold of the boot button to get it into the bootloader during a codeload with the non-revised code (and the defunct esp32r0 option has no effect whatsoever on that). The only thing that actually helps reliably and doesn't require manual intervention or hacking the Arduino-ESP32 codebase is the automatic fallback.\nSpecific to the occasional spurious failure as you noted on certain OSes and configs, it's already a given that that's going to be a bit costly in terms of times spent retrying even with the current code. As a fraction of the flash time it's barely noticeable, and as a fraction of the time spent having to re-run the flash manually it's negligible (and adding to that, make flash is not at all speedy, assuming you've already built the code... and the time spent unfolding and starting the executable version of esptool is itself quite long when that's in play).\nIn summary, occasionally adding a second or even two to a spuriously failed boot - let alone one that will fully fail every time because of component and design variances - is still a tiny price to pay for boards to consistently boot without the need to press buttons on it manually. (And with non-flakey boards, failed boots that will recover before hitting fallback are very rare events which means this would cost them almost nothing.) The extra time isn't anywhere near a long straw in any of these cases - and given the architecture and constraints I can't see flash time getting faster, nor do I see make flash or the executable itself getting noticeably faster either. It's a very small price to pay for consistency.. I will see what kind of data I can get, if I can get anything useful given my setup here. I can tell you that on two different computers, using the latest Si Labs CP210x driver (6.7.4) without enumeration, the need for that delay is constant (that is, a shorter delay becomes marginal, and as stated previously it's the Core Board v2 that has the most noticeable problems - the WROVER-KIT is generally ok).. The logic analyzer does show some interesting behavior.\nFor one thing, if RTS and DTR are both high, toggling RTS toggles both.\nSimilarly if both are low, toggling DTR toggles both.\nThis may or may not be normal, but that may have something to do with the odd little pulse I see below. In turn, that pulse may or may not be significant... I kind of think it isn't since it's present on both traces.\nAnalog wasn't terribly noteworthy, but it's hard to tell how much the probes might affect capacitance falloff (I suspect a combination of issues, as you may be noticing in your followup note above).\nUsing the original esptool, and starting with DTR and RTS high:\n\n0.0ms - RTS goes low\n1.0ms - DTR goes low\n49.5ms - RTS goes high and stays that way\n49.7ms - DTR goes high\n50.0ms - DTR goes low once again (ending a short but very repeatable pulse)\n99.5ms - DTR goes high and stays that way\n\n(Always, about 4ms before the very first connect attempt, we see a 0.5ms low pulse on RTS. I presume this is when serial is connected to the script in the first place.)\nBootloader is not entered.\nUsing the new method, we see the same initial attempt as above, with newer timings:\n\n0.0ms - RTS goes low\n1.1ms - DTR goes low\n99.7ms - RTS goes high and stays that way\n99.9ms - DTR goes high\n100.3ms - DTR goes low once again (ending a short but very repeatable pulse)\n149.6ms - DTR goes high and stays that way\n\nAfter 0.9s we see the first fallback attempt:\n\n0.0ms - RTS goes low\n1.1ms - DTR goes low\n1299.5ms - RTS goes high and stays that way\n1299.7ms - DTR goes high\n1300.0ms - DTR goes low once again (ending a short but very repeatable pulse)\n1749.5ms - DTR goes high and stays that way\n\nThis tends to work on the first fallback try for the Core Board. (The WROVER-KIT never seems to have these problems, but occasionally it's tricky to keep it out of bootload mode - that's beyond the scope of this fix though.)\nAs for booting, I'm not seeing what you're seeing... a brief tap on EN usually gives me a POWERON_RESET with a flash read err, 1000 followed by a RTCWDT_RTC_RESET. This is with an Arduino program loaded onto it - similar results with native code.\nVariant 1:\n    ets Jun 8 2016 00:22:57\nrst:0x1 (POWERON_RESET),boot:0x13 (SPI_FAST_FLASH_BOOT)\nconfigsip: 0, SPIWP:0x00\nclk_drv:0x00,q_drv:0x00,d_drv:0x00,cs0_drv:0x00,hd_drv:0x00,wp_drv:0x00\nmode:DIO, clock div:1\nload:0x3fff0008,len:8\n... and it's running\n\nVariant 2:\nrst:0x1 (POWERON_RESET),boot:0x13 (SPI_FAST_FLASH_BOOT)\nflash read err, 1000\nFalling back to built-in command interpreter.\nOK\n>ets Jun 8 2016 00:22:57\n\nrst:0x10 (RTCWDT_RTC_RESET),boot:0x13 (SPI_FAST_FLASH_BOOT)\nconfigsip: 0, SPIWP:0x00\nclk_drv:0x00,q_drv:0x00,d_drv:0x00,cs0_drv:0x00,hd_drv:0x00,wp_drv:0x00\nmode:DIO, clock div:1\nload:0x3fff0008,len:8\n... and it's running\n\nIf you in turn press BOOT at just the right time after EN and are lucky and get into boot mode:\nets Jun  8 2016 00:22:57\n\nrst:0x1 (POWERON_RESET),boot:0x3 (DOWNLOAD_BOOT(UART0/UART1/SDIO_REI_REO_V2))\nwaiting for download\n\nAnd finally, if you're doing this manually, it seems a whole lot faster than a second when you press the buttons - but very tricky to get the timing just right. Perhaps the latency I'm fixing is all in the serial stack on the given host, and not so much a matter of the board itself. Whatever the source, it's real and repeatable during software-commanded DTR/RTS controls over USB using the SI Labs drivers, et al. on other platforms.\n. Further info - in steady state (DTR and RTS are normally high):\n\nIf I press EN, both go low\nIf I press BOOT, only DTR goes low\nIf I manage to press EN and then BOOT, then release EN, I get the bootloader\n\nThis isn't necessarily interesting behavior in itself, but I'm not seeing the watchdog timeout in that short sequence, and it's pretty fast. The logic when entering the bootloader using the buttons alone is a lot cleaner too:\n\n0.0ms - RTS goes low\n1.0ms - DTR goes low\n~400ms - RTS goes high and stays that way (varies widely as to how fast I press buttons)\n~650ms - DTR goes high and stays that way (varies widely as to how fast I press buttons)\n\nThe weird but persistent DTR pulse seen with the software is nowhere to be found when doing it this way.\nI'm thinking about rigging up something in python that can test this more expediently, and which would actually log the states it sees as it tries this - a test rig, basically. Probably won't have further info until tomorrow evening at earliest though... it may just be that there are certain quirks between pyserial and/or the driver and/or the USB hardware subsystem and/or even the USB UART on the board that in aggregate make this fix necessary. . Here's a little truth table for RTS and DTR:\nDTR (IO0) RTS (EN)  DTR (IO0) RTS (EN)\n setting   setting   actual    actual \n--------------------------------------\n True      True      High      High\n False     False     High      High\n True      False     Low       High\n False     True      Low       Low\n\nThere is no stable state where IO0 is High while EN is low, only transient states ~0.5ms long.\nIs this an effect of the CP2102 alone, or is it an interaction with the reset circuit? \nTo find out, I've ordered a CP2102 breakout board that should arrive later today (a little expensive but worth it). It breaks out ALL the signals for the chip, so it should be enlightening to see how it differs, if at all.\n. Variant 1 and Variant 2 are just the two things that happen - sometimes one, sometimes the other. It isn't strongly dependent on how long I press the button.. Well, at least overnighting the CP2102 breakout came in handy after all! :100:  It didn't occur to me to monitor the TX pin this way.\nWithout the latency fix, I just get the following every time it tries to flash (using the normal process):\nrst:0x1 (POWERON_RESET),boot:0x13 (SPI_FAST_FLASH_BOOT)\nconfigsip: 0, SPIWP:0x00\nclk_drv:0x00,q_drv:0x00,d_drv:0x00,cs0_drv:0x00,hd_drv:0x00,wp_drv:0x00\nmode:DIO, clock div:1\nload:0x3fff0008,len:8\n...\n\nWith the fixed code, I get the same failure when it tries the quick default pass, followed by success when it uses the latency delay pass:\nrst:0x1 (POWERON_RESET),boot:0x13 (SPI_FAST_FLASH_BOOT)\nconfigsip: 0, SPIWP:0x00\nclk_drv:0x00,q_drv:0x00,d_drv:0x00,cs0_drv:0x00,hd_drv:0x00,wp_drv:0x00\nmode:DIO, clock div:1\nload:0x3fff0008,len:8\n...\n\nets Jun  8 2016 00:22:57\n\nrst:0x1 (POWERON_RESET),boot:0x13 (SPI_FAST_FLASH_BOOT)\nflash read err, 1000\nFalling back to built-in command interpreter.\nOK\n>ets Jun  8 2016 00:22:57\n\nrst:0x10 (RTCWDT_RTC_RESET),boot:0x3 (DOWNLOAD_BOOT(UART0/UART1/SDIO_REI_REO_V2))\nwaiting for download\n...\n\n. To be honest, maybe it's got something to do with that extra, short DTR pulse I described above after all. I'm really not sure, but that's of course absent when doing this via the buttons. Just a thought - whatever the case the delay required when commanding this via DTR/RTS is what it is, and it's far greater than is needed to perform a clean EN/IO0 boot sequence bia buttons.. Thank you!. Funny how this all came full circle to #136. :-D\nNo, I wouldn't expect parallel processes to help -  even then you're still going to end up single-threading into the same driver/chipset to command to RTS and DTR.\nI'd make the hardware mod @projectgus suggested and be done with it. That's the effective solution.. Or they'd be playing a futile game of \"contact the vendor\"... sadly, most vendors aren't responsive at all, or the true vendor is one or more steps removed from the vendor. \ud83d\ude1e \nMy original devices were direct from Espressif though, so I knew who to bug about... bugs. \ud83d\ude04 . Question: is what's on the Core Board V2 the esp32r0? Either way, yes, easily renamed... but if this is the same problem esp32r0 solves then I may be able to simplify this a bit further so it's cleaner.. I will look into restoring that delay.\nAs for the two seconds, even then it sometimes misses on the first pass (but rarely). I can try some different values and see what happens with that, though I don't believe it can be much less.\nAs for the if itself, it'll still need to be there since that mediates whether the extra delay is present for older devices. Or do you mean the other if that's potentially obsoleted by this?. I'm thinking of how to converge this a bit if what's on a Core Board v2 is esp32r0 (as it seems might be the case). What's on the ESP-WROOM-KIT currently (r0 or r1)?. Will definitely fix that - not sure what happened there. :-/. I see the problem now - esp-idf is using an older version (e9e917) so I didn't see that master here has something newer. Will get it straight with the rest of the fixes here.. Also, for older boards esp32r0 mode as an option only saves a fraction of a second (the default attempt is very quick). Given all the info I have now, it would be more maintainable to eliminate this named mode now or eventually.. I'd prefer to remove the option either now or in a future PR, which would deprecate ESPTOOL_BEFORE as well as the --before option - only those who explicitly use --before esp32r0 would be affected, and only to the extent that they'd just need to not use the option.. ",
    "grisevg": "This is not windows specific. Same issue on macOS with cp210x drivers: https://github.com/espressif/esp-idf/issues/305. ",
    "crasu": "Works for me now - thank you\n. ",
    "shodan8192": "Thank you - this is a explanation which I needed - I saw those mappings before, but I completely forgot about them.\n. ",
    "sheinz": "Hi Angus,\nI captured the communication with logic analyzer.\nThe final data from the device is \n\nSpeed: 230400\nThe data captured with saleae logic analyzer:\nesp8266_230400.tar.gz\n. Hi Angus,\nWow! Thanks for such thorough analysis!\n\nYou can confirm this theory by modifying the line in esptool.py:565 here:\nesp.run_stub(json.loads(_CESANTA_FLASHER_STUB), [baud_rate], read_output=False)\nto\nesp.run_stub(json.loads(_CESANTA_FLASHER_STUB), [int(baud_rate * 1.006)], read_output=False)\n\nThat didn't help.\n\nIf you use different baud rates with esptool.py that might be easier to divide from the CH340G master clock (maybe 250000, 300000, 500000), does it suddenly work?\n\nNope. Doesn't work.\n\nIf you transmit data from the CH340G from a different serial program at nominal 230400bps, what baud rate does the Salae see?\n\nI will check that. Haven't tried it yet.\n\nIf you use a different OS (maybe run a Linux VM with USB passthrough), is the baud rate still off by the same amount?\n\nI will also check that later.\n\nIf this is the bug, something you can try is checkout the feature/esp32_v20_refactor branch (flashing works on ESP8266 and ESP32). This branch does baud rate setting in a different way, and the 230400bps interaction is initiated by the host not the ESP.\n\nI tried this branch and it works with 230400bps but not higher.\n```\n$ esptool.py -p /dev/tty.wchusbserial1420 --baud 460800 write_flash -fs 4MB -fm qio -ff 40m\n   0x0 ../../bootloader/firmware_prebuilt/rboot.bin 0x1000 ../../bootloader/firmware_prebuilt/blank_config.bin 0x2000 ./firmware/simple.bin\nesptool.py v2.0-dev\nConnecting...\nDetecting chip type... ESP8266\nUploading stub...\nRunning stub...\nStub running...\nChanging baud rate to 460800\nChanged.\nAttaching SPI flash...\nConfiguring flash size...\nA fatal error occurred: Timed out waiting for packet header\n```\nI lean towards your last idea regarding slow OSX driver. As the same hardware works fine in other OSs and baud rate mismatch is not that great.. ",
    "diimdeep": "I have board with CH340G (Esp8266 NodeMCU clone from Lolin vendor)\nOnly 115200 works.\nusing this driver in macOS Sierra https://github.com/adrianmihalko/ch340g-ch34g-ch34x-mac-os-x-driver\n```\nMacBook-Pro:src_esp8266_lolin_nodemcu_v3 wolf$ esptool.py --port /dev/cu.wchusbserial1410 --baud 230400 write_flash --flash_size=detect -fm dio 0 .pioenvs/nodemcuv2/firmware.bin\nesptool.py v1.3\nConnecting....\nAuto-detected Flash size: 32m\nRunning Cesanta flasher stub...\nA fatal error occurred: Invalid head of packet ('\\xbc')\nMacBook-Pro:src_esp8266_lolin_nodemcu_v3 wolf$ esptool.py --port /dev/cu.wchusbserial1410 --baud 460800 write_flash --flash_size=detect -fm dio 0 .pioenvs/nodemcuv2/firmware.bin\nesptool.py v1.3\nConnecting....\nAuto-detected Flash size: 32m\nRunning Cesanta flasher stub...\nA fatal error occurred: Invalid head of packet ('\\x04')\nMacBook-Pro:src_esp8266_lolin_nodemcu_v3 wolf$ esptool.py --port /dev/cu.wchusbserial1410 --baud 921600 write_flash --flash_size=detect -fm dio 0 .pioenvs/nodemcuv2/firmware.bin\nesptool.py v1.3\nConnecting....\nAuto-detected Flash size: 32m\nRunning Cesanta flasher stub...\nA fatal error occurred: Invalid head of packet ('\\xcd')\nMacBook-Pro:src_esp8266_lolin_nodemcu_v3 wolf$ esptool.py --port /dev/cu.wchusbserial1410 --baud 1500000 write_flash --flash_size=detect -fm dio 0 .pioenvs/nodemcuv2/firmware.bin\nesptool.py v1.3\nConnecting....\nAuto-detected Flash size: 32m\nRunning Cesanta flasher stub...\nA fatal error occurred: Invalid head of packet ('\\xfd')\nMacBook-Pro:src_esp8266_lolin_nodemcu_v3 wolf$ esptool.py --port /dev/cu.wchusbserial1410 --baud 115200 write_flash --flash_size=detect -fm dio 0 .pioenvs/nodemcuv2/firmware.bin\nesptool.py v1.3\nConnecting....\nAuto-detected Flash size: 32m\nRunning Cesanta flasher stub...\nFlash params set to 0x0240\nWrote 360448 bytes at 0x0 in 31.3 seconds (92.2 kbit/s)...\n```. ",
    "forrestfiller": "@projectgus Thanks very much, I was able to flash the unit correctly thanks to your thoughtful and helpful reply. \nThe reason I elect to flash with the minimal -fs 4m in lieu of your above recommendation (-fs 32m) is that I am attempting to follow along with this LoRaWanGateway repository.  The author recommends keeping the image as small as possible: \"...The LoRaWanGateway needs quite some RAM and processing power, so it it necessary to flash firmware that uses as little resources as possible. \"\nI wanted to share a little bit more about some of the issues I struggled with during my final attempts to flash the ESP8266:\n\n\nOnce I followed your above recommendations for syntax, etc., the flash command appeared to be successful. However, when I went to my serial monitor at the debug logging baud 74880, I found that I was getting gibberish (less responsive to my attempts to communicate via terminal, and a higher volume of gibberish than normal). I tried to do a reset with the buttons on the breakout board, and from that point forward I noted that the blue LED flashed nonstop whenever the ESP8266 was powered on. After doing a little research, it looked like perhaps when you are flashing a new version of the nodemcu, residual data from the previous version of nodemcu might be interfering. So I decided to start with a clean slate and I ran: sudo python esptool.py erase_flash and I was successful in erasing my board. It took me several attempts, with timeout errors, etc., but eventually (with some connecting/reconnecting of my USB/TTL cable and restarting my VM) I was successful.\n\n\nWhen I went to reflash with your recommended syntax (thank you once again!), I kept having timeout and connection errors. I ended up removing the baud speed altogether (I had originally selected to use the debug log flash speed 74880) and went with the default (which I believe is specified at 115200). After several \nsudo python esptool.py write_flash -fm dio -fs 4m -ff 80m 0x0 nodemcu-dev-13-modules-2016-11-24-01-56-58-integer.bin later, the process flashed successfully. I was able to confirm it worked by logging onto my wifi and printing out a confirmation in my terminal.\n\n\nThanks so much for all of ongoing your support which was invaluable.\nBest regards,\nForrest\n. Thank you for your efforts!. ",
    "tablatronix": "So annoying, i get bit by this everytime I use it.\n. ",
    "nkolban": "I am using DevKitC V2 (Black) and couldn't get the reboot recipes to work ... neither changing script nor adding a 2.2uF capacitor.. Sorry ... I should have answered more of the original question ...\nIn my environment, I am running a Windows 10 server ... however ... on top of that, I am running latest Ubuntu using latest VirtualBox.  The DevKitC V2 is connected via USB to the Windows 10 machine which is then passed through to Ubuntu on virtual box.  To workaround the problem (which I had forever), I have a raspberry PI driving the EN and GPIO pins running a Node.js script that causes a flash boot of the ESP32 when I send the PI a REST request through a web page.. Wow ... I'm inept today at answering support questions properly ... sorry my friend.\nPhysically holding down the BOOT button found on the DevKitC V2 board and, while held, running \"make flash\" causes an immediate working flash without having to toggle any physical pins.. Dear gosh ... I did it again didn't I!!   ... For the connection, in my VirtualBox settings, I am passing through the USB->UART via a USB device and NOT through Serial ports.  To be honest, I didn't know serial port connectivity was an option.. @tehKaiN  @bvernoux \nI find myself in need for a C library that is a functional equivalent for the esptool.py.  To that end I started reverse engineering the code.  However, I'd like to try and practice what I preach relating to open source and not attempt to re-invent the wheel for the sake of it.  Is there a project or repository that maybe y'all have started that we could use as the basis for a common/shared piece of work?  If not, would there be interest in starting one in the belief that there may be value if we all pulled together to compare notes and collaborate on such a task?. @ygator Please and thank you sir!!. The issue has been found and resolved.  The problem was simply a coding error on my part.  I create a record that I send over UART.  In this record, I need to send 4 bytes address, 4 bytes size, and 8 bytes of 0.\nI had coded the following:\nvar buf = Buffer.allocUnsafe(4 * 4);\n        buf.writeUInt32LE(address, 0);\n        buf.writeUInt32LE(size,    0);\n        buf.writeUInt32LE(0,       0);\n        buf.writeUInt32LE(0,       0);\nWhen what I should have coded was:\nvar buf = Buffer.allocUnsafe(4 * 4);\n        buf.writeUInt32LE(address, 0);\n        buf.writeUInt32LE(size,    4);\n        buf.writeUInt32LE(0,       8);\n        buf.writeUInt32LE(0,       12);\nThe error was gross and caused the size and zero fields not to be correctly populated.  There is/was nothing wrong with the flash stub.  All is well.. Closing after reading and understanding ... https://github.com/espressif/esptool#verifying-flash. ",
    "lukeweston": "Is there any documentation out there in the community with \"known good\" (and known bad) specific Flash silicon tested with the ESP8266 (and ESP32)? There do seem to be a couple of quirky ones out there.. I recently got a batch of Winbond 25Q32FVSIG and they don't work. (On ESP8266 not the '32.)\nMaybe I just got a bad batch of silicon. (They are cheap AliExpress ones.)\nI didn't have any other chips in stock, so I popped the can off an ESP12 and removed the BergMicro 25Q32ASSIG and swapped it onto one of my boards - and this works fine.\nBut without a datasheet for the latter it's hard to say if there are differences.. ",
    "hm2dev": "Surprisingly I ran into the same problem as Testi89 at about the same time, as I was unable to obtain the W25Q32 from my suppliers.\nI'm now testing an ISSI IS25WP032 as replacement for the in the Espressif reference schematics. \nThis chip is also mentioned here https://esp32.com/viewtopic.php?f=2&t=826 as having been spotted on an ESP32 module.\nAnother option seems to be the GigaDevice GD25Q32, as mentioned here http://www.lucadentella.it/en/2016/12/22/esp32-4-flash-bootloader-e-freertos/\nI' not sure which flash_chips.h Testi89 is referring to, the only one I can find is from coreboot.\nhttps://code.coreboot.org/p/flashrom/source/tree/HEAD/tags/0.9.8/flashchips.h\nIf it is the right one, that might be a source for more compatible types.. ",
    "sarnold": "Like I said, 1.2.1 looks fine:\n$ esptool.py --port /dev/ttyUSB1 flash_id\nesptool.py v1.2.1\nConnecting...\nManufacturer: ef\nDevice: 4016. NonFatalError?  ;). ",
    "sopi": "Have the same. ",
    "thespooler": "Tested under Gentoo with utf8 locale\n```\nlocale\nLANG=en_US.utf8\nLC_CTYPE=\"en_US.utf8\"\nLC_NUMERIC=\"en_US.utf8\"\nLC_TIME=\"en_US.utf8\"\nLC_COLLATE=\"en_US.utf8\"\nLC_MONETARY=\"en_US.utf8\"\nLC_MESSAGES=\"en_US.utf8\"\nLC_PAPER=\"en_US.utf8\"\nLC_NAME=\"en_US.utf8\"\nLC_ADDRESS=\"en_US.utf8\"\nLC_TELEPHONE=\"en_US.utf8\"\nLC_MEASUREMENT=\"en_US.utf8\"\nLC_IDENTIFICATION=\"en_US.utf8\"\nLC_ALL=\n. Done in #159. \n@projectgus should be good to merge.. To default to --verify seems sane.\nAs for skipping the header, the code seems to indicate that the first two bytes should be skipped, that is, offset 0 and 1.\nSo this code https://github.com/espressif/esptool/blob/master/esptool.py#L1022-L1023:\nif address == 0 and (image[0] == b'\\xe9' or image[0] == 0xE9) and flash_params is not None:\n            image = image[0:2] + flash_params + image[4:]\n```\nCould just be replaced with a simpler skip.\nI'll whip a PR soon.. #162 should be good. \n@projectgus, I just skipped the first four bytes, not sure if it would be a good idea to add more checks since I have no clue as to what bytes 0 and 1 are. I guessed magic numbers and skipped all 4. If I'm wrong on that and they should be hashed, I'll need to rework to copy the whole image array, zero the flash_params bytes and rehash that, same with image.\nAlso, as @pfalcon mentioned, I made --verify the default, with a new switch for --no-verify.. So only the flash_params are not present in the image file?. I will take a look at it in the next few days, just don't expect anything before friday.\nBut from a user standpoint, it seems more complex. \nMore options I'm required to provide correctly to get a pass/fail. \nBut maybe correctness is more important than simplicity in this case, dunno really.. Looks good. \nWould you like me to submit a separate PR for the --verify as default and --no-verify?\nAlso, it's quite good you took this, as my NodeMCU just went out in magic black smoke, I'll have to wait for a new one to test anything.. ",
    "michal037": "Try to run esptool under Python version 2.x. Python 2.x and 3.5.2 versions aren't compatible.. Sorry for this, https://github.com/michal037/esptool-log/blob/master/esptool.log\nYou can see some Polish words, If you will need, I can translate into English. Or I can change the system language.. output: https://github.com/michal037/esptool-log/blob/master/esptool_log2.log. All after type make app command.\n1) bootloader directory exist: only a few directores named: \nmichal@debian:~/esp32/myapp/build/bootloader$ ls\nbootloader_support  log  main  micro-ecc  spi_flash\n2) He's nowhere, nothing has been compiled.\n3) I used last toolchain, installing step by step from:\nhttps://github.com/espressif/esp-idf/blob/master/docs/linux-setup.rst\nI decided to not compile xtensa-esp32-elf, I downloaded ready for use binaries.\n4) bootloader.map don't exist.\n\nI perform all the steps in Oracle Virtual Box. Where I install clearly debian from file named: debian-8.6.0-amd64-CD-1.iso. \nStep by step using Set up of Toolchain for Linux guide, I trying to prepare this toolchain.\nI decided to pack this files and upload it on dropbox for You.\nhttps://www.dropbox.com/s/8m6nuxfzcvjf02r/esp32.tar.gz?dl=0\nI using this files, with this commands in ~/.bashrc file:\nexport PATH=$PATH:$HOME/esp32/xtensa-esp32-elf/bin\nexport IDF_PATH=~/esp32/esp-idf\nNothing more than that.\n. I was able to do everything correctly, very strange error. Again I downloaded all over again + I do system upgrade. Now it works properly.. ",
    "aaronshim": "Dear @michal037\nThank you for your response! Yes, that is certainly a solution to get the tool to run, but it does not address the bug I intended to file, which is the inconsistency of the information on the README.\nIn order to fix this problem, I see one of two solutions that can be implemented.\n1. Get version 1.3 on PyPi\n2. Change the text of the README to make it clear that the PyPi install method will not work for Python 3.5 yet\nWhich one of these seems more amenable?. ",
    "jpenner64": "Here is more specifically what I have:\nOnly silkscreen on PCB is the \u201cAi-Cloud inside\u201d. On the module ICs the etchings are both:\n\u2022   Controler IC    Espressif ESP8266EX, 322015, P3PU84     (COM7 & COM9 for reference)\n\u2022   Flash ROM IC    BergMicro 25O80ASSIG                    (COM7 & COM9 for reference)\nTTLs currently are\n\u2022   Silicon Labs CP210x USB to UART Bridge (COM7)\n\u2022   USB-SERIAL CH340 (COM9)\nFlash IDs as follows:\n\u2022   C:\\Users\\jpenner>esptool.py -p COM7 flash_id\no   esptool.py v1.2.1\no   Connecting...\no   Manufacturer: e0\no   Device: 4014\n\u2022   C:\\Users\\jpenner>esptool.py -p COM9 flash_id\no   esptool.py v1.2.1\no   Connecting...\no   Manufacturer: e0\no   Device: 4014\nSize interpretation:\n\u2022   Although 25O80ASSIG is not listed in a flashchips.h reference I am taking the 80 as part of IC etching and the 4014 as signs this is the 8m I know it to be. \n\u2022   Newer modules purchased as 8m, and prior versions owned were not below 4m\n. With your question, I thought I should also run through some examples. All of these results netted nothing new/positive, but it was a good try and run through:\n\u2022   Normally, powered from USB 3.0 port on Windows 10\n\u2022   Initially, powered LaptopUSB>TTL>ESP-01. Later, introduced a USB2 MultiPort extension;  LaptopUSB>Multi port(USB2)>TTL>ESP-01. Both results the same; negative flashes up to 262144\nIntroducing a V/A detection device (keweisi) the connection is as follows, and results below:\n\u2022   Multiport - LaptopUSB3>Multi port(USB2)>keweisi>TTL>ESP-01:\no   ESP-01 #1 \u2013 TTL CH340   4.77v/0.04-0.05A(Connected/Flashing)\no   ESP-01 #2 \u2013 TTL CP210x  4.78v/0.04-0.05A(Initial connection/Flashing), 4.84v/0.02A(TTL-Idle)\n\u2022   Direct - LaptopUSB3>keweisi>TTL>ESP-01\n1.  ESP-01 #1 \u2013 TTL CH340   4.97v/0.04-0.05A(Connected/Flashing)\n2.  ESP-01 #2 \u2013 TTL CP210x  4.97v/0.04-0.05A(Initial connection/Flashing), 0.02A(TTL-Idle)\n\u2022   No V/A monitoring - LaptopUSB3>TTL>ESP-01\n1.  ESP-01 #1 \u2013 TTL CH340   Power consumption unknown\n2.  ESP-01 #2 \u2013 TTL CP210x  Power consumption unknown\n\u2022   All cases results are the same. Flash will process up to 262144 and stop; \u201cA fatal error occurred: Timed out waiting for packet header\u201d\nUsing an older laptop; (does not have Python on, but) tested Ai-Thinker flash. This process will not give me a byte count, and attempts an erase before flash.\n\u2022   Erase/Flash and Power recorded as follows:\n1.  ESP-01 #1 \u2013 TTL CH340   Invalid head of packet, 4.88v/0.04-0.05A(Connected/Flashing)\n2.  ESP-01 #2 \u2013 TTL CP210x  Invalid head of packet, 4.97v/0.04-0.05A(Initial connection/Flashing), 0.02A(TTL-Idle)\n. Thanks for the suggestions here....\nMods to the ESP_RAM_BLOCK and ESP_FLASH_BLOCK can be helpful and I have made necessary changes to allow flashing of other boards successfully. Regardless, playing around with the numbers further is something to try here. Also, powering via a dedicated source to support amp draw spikes is something else to try. I know have had problems with operating the WiFi successfully when powered through other modules; but never on just flashing.\nMy suspicions is now at the point I believe I somehow damaged these 2 modules, but cannot recall how. Regardless, I will go through these suggestions and bring back findings. Fingers crossed.\n. Follow-up: After a break, I ran through a number of scenarios, which I will not detail here. However, I did double check settings in pytool.py and to ensure ability to flash other identical boards with same ICs have no issue; (Other flash attempts successful), Operationally, I do use ESP-01 with external power for the same reason mentioned.\nSo I then turned back to these 2 specific boards and last suggestions.: Experimented some more with changing values of ESP_RAM_BLOCK and ESP_FLASH_BLOCK and powered ESP externally to accommodate potential spikes. Same results; fails to continue flashing beyond 256k.\nSummary: This chain is centered on issues with two (2) specific boards which could have been damaged. It is not taken as an issue with the pytool.py or in general any ESP-01 8m module. I will continue a little more with testing these 2 modules, but just might write them off as damaged and move on.\nThanks for your help. Much appreciated\n. ",
    "r44083": "I subscribe to the issue. It would be very convenient, because regular erasing erases too much.. ",
    "ksmith9109": "Dear Angus,\nTo focus on \n\u201cThe version of Python that comes in the prebuilt environment has pyserial installed already. However if you have another copy of Python installed system-wide then this may be the version which is being run.\u201d\nI have installed, renamed the msys32 root directory, and re-installed the software components several times.\nMy current system seems to work but I have noticed the Windows essentials script assumes that python is installed but fails when it tries to run a python script.\nAlso, the Windows essentials script may not work to refresh an existing install.  \nGeneral PATH problems  mixing the Windows path and the path  environment within msys32 can cause many problems.\nI am proposing a standalone confirmation  script that enumerates both environments and warns of any general environment mis-configurations.\nThanks for your hard work.  I will try and work on the problem myself in future days.\nRegards\nKent Smith\nFrom: Angus Gratton [mailto:notifications@github.com] \nSent: Sunday, January 29, 2017 6:09 PM\nTo: espressif/esptool\nCc: Kent Smith; Author\nSubject: Re: [espressif/esptool] Make All error \"No module named serial\" for ESP32 Wrover (#171)\nDid you follow the ESP-IDF Windows Setup Guide from the docs? http://esp-idf.readthedocs.io/en/latest/windows-setup.html Which option from there are you using, the prebuilt & downloaded MSYS2 environment or one where MSYS is installed manually? How are you launching the shell which you're using to run make?\nThe version of Python that comes in the prebuilt environment has pyserial installed already. However if you have another copy of Python installed system-wide then this may be the version which is being run. If you're using a different shell, rather than the msys_cmd shell link mentioned in the Windows docs, then this can lead to a different Python being run (depending on your Windows path.)\nAn easy fix is to install pyserial manually into your system Python - you can try running python -m pip install pyserial.\nYou may run into other problems in esp-idf if your system Python is Python 3 not Python 2.x. Running \"make menuconfig\" -> \"SDK Tool Configuration\" and setting \"Python 2 interpreter\" to python2 may help.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub https://github.com/espressif/esptool/issues/171#issuecomment-275957722 , or mute the thread https://github.com/notifications/unsubscribe-auth/AASITexrFlGgXuhVqAQ6e9Q1DIcVmMFEks5rXSovgaJpZM4LlKQt .  https://github.com/notifications/beacon/AASITQh9Mfwzw-3oQ0SZd7pHANnizRJSks5rXSovgaJpZM4LlKQt.gif \n. Yes, that is the general nature of the problem I was having.   Eventually figured a work around involving getting the windows and msys32 environments to match properly.\nA great tool that has helped me a lot is  at  http://www.esp32.com/viewtopic.php?f=13&t=1050\n\nIt allows me to navigate using familiar windows explorer tool but drop into and execute bash commands in various folders.    A well designed aid...\n. ",
    "szundi": "python -m pip install pyserial\nit was the key for me, thank you.. ",
    "phoolchandra": "python -m pip install pyserial\nworked for me also.. ",
    "ahmedawais": "it didnt work for me . windows 10\neclipse oxygen \nesp32 tool chain installed \nrunning a blink code from example project but facing the following error \nTraceback (most recent call last):\n  File \"C:/esp32/esp-idf/components/esptool_py/esptool/esptool.py\", line 34, in \n    import serial\nImportError: No module named serial\nmake[1]:  [/c/esp32/esp-idf/components/esptool_py/Makefile.projbuild:51: /c/esp32/esp-idf/examples/get-started/blink/build/bootloader/bootloader.bin] Error 1\nmake[2]: Leaving directory 'C:/esp32/esp-idf/examples/get-started/blink/build/bootloader/soc'\nmake:  [/c/esp32/esp-idf/components/bootloader/Makefile.projbuild:40: /c/esp32/esp-idf/examples/get-started/blink/build/bootloader/bootloader.bin] Error 2\nplease help . issue resolved i was running this command python -m pip install pyserial   in msys2\ni again ran this into cmd and now its working fine . ",
    "slaff": "\nIs there a use case for writing overlapping data in a single write_flash command?\n\nProbably not. I added it as an option to not break immediately the build of projects using esptool. If you want I can change the PR to enforce overlap detection?\n. @projectgus Check the latest version of this PR.. >  Just have the one addition above about sector alignment.\nI am not sure that this should be the case. Look at the following example: AI-Thinker are suggesting in their AT software (http://bbs.espressif.com/download/file.php?id=1470) to initialize the flash memory with the following setup for 4MB flash \n0x3fc000 esp_init_data_default.bin \n0x3fe000 blank.bin\nThe second address is in the same sector as the first address.\nSo I guess that the sector is erased once per session and esptool.py allows writes in that sector. As long as a BIN file does not overlap another bin file, that should be fine.\nI do not know if that is plain wrong, but maybe you can throw some light :)\nhexdump -C esp_init_data_default.bin\n00000000  05 00 04 02 05 05 05 02  05 00 04 05 05 04 05 05  |................|\n00000010  04 fe fd ff f0 f0 f0 e0  e0 e0 e1 0a ff ff f8 00  |................|\n00000020  f8 f8 52 4e 4a 44 40 38  00 00 01 01 02 03 04 05  |..RNJD@8........|\n00000030  01 00 00 00 00 00 02 00  00 00 00 00 00 00 00 00  |................|\n00000040  e1 0a 00 00 00 00 00 00  00 00 01 93 43 00 00 00  |............C...|\n00000050  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|\n*\n00000070  03 00 01 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|\n00000080\nand \nhexdump -C blank.bin \n00000000  ff ff ff ff ff ff ff ff  ff ff ff ff ff ff ff ff  |................|\n*\n00001000. @projectgus Angus, did you have to look over the changes? It there something more that is needed for the PR to be merged?. @projectgus Great, thanks!. Sorry, my bad. The calculation should be better now and there are two small unit tests related to overlapping.. ",
    "darcode1": "Okay that does make sense. but the problem is my ESP8266 came with the same firmware loaded that i am trying to load on it now. here have a look (old picture).\n\nI was just playing around with the ESP8266, downgraded the firmware and, worked like a charm but when I tried to upload the version above, this happened. Is there any other work around ? \n. YES, thank you for your prompt reply. really appreciate it. After sending you that message I was able to figure this out. Spent 6 hours figuring that out. New to ESP8266, so getting used to it.\nThanks. ",
    "billiho": "It worked on one so far! Yeah!\nI was able to do the nonboot stuff. I tried a ton of times and sometimes it would get up to 99% then say invalid packet. Finally I took the transmit from the rs232 and reran it on my board which didn't make much difference, but I thought it may picking up some stray noise. Then I tried and tried. with little success. GRRRR!!!!\nI finally decided\"screw it, I'm gonna increase the speed and see if that works.\" My thinking was the usb interface was able to transmit faster so why not see if the chip could receive as fast. \nSlowly I increased the transmit rate on the 3.4.4 flasher and I had some success as it got faster, I even got the user1.bin file to upload 100% once, and that was the one I was having the biggest issue with. I ended up at 1500000.\nI was unable to do all the files at once so I decided I would do them one at a time. It took many tries but slowly one by one they uploaded 100%, then I went onto the next. Finally I uploaded all the files 100%.  I rebooted and tried an AT command and it replied with an OK, my new favorite 2 letters! . Yahoo!\nI did them in this order and the location. I didn't put anything in the DeviceMasterKey section.\neagle.flash.bin 0x0\neagle.irom0text.bin 0x40000\nblank.bin 0xFE000\nesp_init_data_default.bin 0xFC000\nResults:\nAT+GMR\nAT version:0.51.0.0(Nov 27 2015 13:37:21)\nSDK version:1.5.0\ncompile time:Nov 27 2015 13:57:56\nOK\nHere's the sdk version I got and the location. The download is at the bottom of the page.\nAT_v0.50_on_esp_iot_sdk_v1.4.0_150918\nhttp://bbs.espressif.com/viewtopic.php?f=46&t=1442\nHere's a screenshot of what worked. My esp is a 1mb version.\n\nJust tried the second one. It was also brought back from the dead. \nI think the key is persistence. keep trying and trying. They seem to be finicky. Building a permanent setup for flashing/upgrading may have also helped as I think the original breadboard I was using may have been part of the problem.\nI sincerely hope this helps someone avoid the countless cycles of searching, reading, and trying until your brain finally implodes.\n. ",
    "young-mu": "OK, this is my scenario. I want to make a binary file to an image and map it to an specified address (like 0x3FFE0000). So in application, I can access these data of binary file by address 0x3FFE0000.. Ok, thank you. Now I use spi_flash_mmap API to achieve my goal.. The chip is ESP32. I have tested two development boards. One is official ESP32 board by Espressif link, its USB-to-UART chip is CP2102. The other one is issued by 3rd party link, its USB-to-UART chip is CP2104.\nThe driver is built-in Linux driver cp210x. \nshell\n$ lsmod | grep cp210x\ncp210x                 24576  0\nusbserial              53248  1 cp210x\nHere are the outputs when I try to get mac address by using esptool.py.\n```shell\n$ sudo esptool.py --chip esp32 --port /dev/ttyUSB0 --baud 115200 read_mac\nConnecting...........................................\nA fatal error occurred: Failed to connect to ESP32: Timed out waiting for packet header\n```\nHere is my test environment:\n\nUbuntu 16.04.1 LTS\n4.4.0-72-generic\n\n. Yes, the failure is the same for two boards. And I have tested it for both VM and real hardware.. OK, I have tried again on my PC using the latest version esptool. It works well.\nThank you very much. I'll close this ticket.. ",
    "grcasanova": "Ok thanks, the sketches are now uploaded fine but unfortunately they don't run. I tried a bare minimum sketch with just serial ping and another blinking the built-in led but they don't seem to work. Regarding the wiring, the GPIO0 is now on Vcc.. Here is a full description http://arduino.stackexchange.com/questions/35150/esp01-unsuccessful-code-execution. Hi, yes it seems my breadboard resistance was too high and the ESP-01 wasn't booting properly. I had to skip breadboard prototyping and connect the Arduino directly to the ESP and things seemed to work.. ",
    "CharlesScoville": "Eh... exactly why would an .exe be more convenient than a .py if you already have Python installed? \nIt's not like it's a graphics or cryptography primitive that needs to be optimized for speed. Nor is there a compatibility issue since this runs on (the platform independent) Python interpreter. \nEsptool is a command-line utility. Performance is bound by the embedded devices themselves and cross compatibility is ensured by Python.  It doesn't make sense to burden the developers with an extra step for no gain.\n. . .\nOn the other hand, if you're asking for the total package to be a simple/single .exe, then you should know it's already been done... and then some. Check out nodemcu-pyflasher. You can get said .exe here.\nhttps://github.com/marcelstoer/nodemcu-pyflasher/releases. ",
    "hickford": "Hi. Pardon me, I haven't explained well. The boon is the .exe wrapper will always execute with the right version of Python (consider if you had two copies of Python and esptool.py in your path). More at https://setuptools.readthedocs.io/en/latest/setuptools.html#automatic-script-creation\nThe change is as simple as one line to setup.py, setuptools creates the .exe wrapper at install time https://packaging.python.org/distributing/#scripts . Let me prepare a pull request.\nThere might be other benefits on other platforms, I don't know\n. Right on my computer esptool.py opens a text editor. The workaround is to run python -m esptool. I understand your concern about backwards compatibility.\nJust tried out your suggestion esptool.py=esptool:_main that solves my problems on Windows. Let me update the pull request.. Updated pull request. How about that?. ",
    "flywire": "I thoroughly support this request, other projects do it. It is much more convenient to just run a .exe in windows rather than trying to figure out which python to install and how it is configured. The file could be generated as part of a new release.\nhttps://www.esp32.com/viewtopic.php?t=1029\n\nExample in Windows cmd shell:\nrmdir /s /q build_tmp\nmkdir build_tmp\nC:\\Python35\\scripts\\pyinstaller ^\n    --onefile ^\n    --specpath build_tmp ^\n    --workpath build_tmp\\build ^\n    --distpath build_tmp\\dist ^\n    C:\\esp-idf\\components\\esptool_py\\esptool\\esptool.py. \n",
    "rspenc29": "I am also having this issue very frequently. Baud rate doesn't seem to affect it. I've tried many common baud rates in the range of 9600 - 115200 and it happens on all of them. Sometimes I have to reflash like 10 times before it's finally successful. I've checked all the voltages as well and they are all what they should be.\nAlthough I don't think this is the problem, I should also mention that I'm flashing it through a teensy 3.2 using the following code.\n```\ndefine ESP8266 Serial1\ndefine ESP_RESET 4\ndefine ESP_FLASH 6\ndefine ESP_FLASHING true\nvoid setup() {\n    pinMode(ESP_RESET, OUTPUT);\n    pinMode(ESP_FLASH, OUTPUT);\n    Serial.begin(115200);\n    ESP8266.begin(115200);\nif (ESP_FLASHING) {\n    digitalWrite(ESP_FLASH, LOW);\n    digitalWrite(ESP_RESET, LOW);\n    delay(1000);\n    digitalWrite(ESP_RESET, HIGH);\n} else {\n    digitalWrite(ESP_FLASH, HIGH);\n    digitalWrite(ESP_RESET, HIGH);\n}\n\n}\nvoid loop() {\n    if (ESP8266.available()) {\n         Serial.write(ESP8266.read());\n    }\nif (Serial.available()) {\n    ESP8266.write(Serial.read());\n}\n\n}\n```. ",
    "adamglowacki": "I am in a situation similar to @rspenc29. I need to be able flash ESP-WROOM-02 via another device. But sometimes a single byte gets lost (every ~10kB or even less often) and it stops the flashing operation. I tried to slightly modify the application to retry if a command failed but it's not as easy as I hoped.  During stub uploading (cmd=0x07) a single byte got lost. ESP module responded with 0x0107 status bytes. So esptool.py (modified by me) sent the same packet again. This time no byte got lost. But the ESP module keeps responding with 0x0105 status. Could you tell me what these status bytes mean? I would also be very thankful for any hints/suggestions on how to make esptool.py retry some of the commands if they failed.. I modified the \"bridge device\" to interpret the bootloader packets as they go from the PC to the ESP module and drop those that are too short. And I made my fork of esptool.py retry the commands if they failed. It is a temporary solution for me and I hope that soon we can have esptool.py recover from errors autonomously. The modification of esptool.py is available here: adamglowacki/esptool@440828a3e9e91f9218609ef3647f9207cbe0f4ca. It's great that the problem of @vgonet was finally solved. But could somebody publish/point to a full list of bootloader error codes? At times it could be really helpful to know what they mean.. ",
    "SmartArduino": "Thanks for u advice.\nMof the data is at the beginning and then the very end, with a gap in the middle of a repeating byte  in the file bin.\nThe bin may be download from the attached file:\nt.zip\n. I change \n  for _ in range(5):\n            try:\n                self.flush_input()\n                self._port.flushOutput()\n                self.sync()\n                self._port.timeout = 25\nThat is ok for 4M bin.. ",
    "bubba198": "So sorry I wish there was a way to delete a stupid stuff like the issue I just posted. My bad. ",
    "SmallRoomLabs": "Changing the current behavior in the 1.x might not be a good idea.  But as long as 2 is in beta I think it's fair game to make the change.  \nCommand line arguments (if supplied) should override the settings in the file. But having default values override the file settings is not so good.   \nSo please make the change now before 2 goes into GA and it's too late to make a behavioral change..... ",
    "benariamir": "For some reason I'm failing to recreate this with a simple \"hello world\" program.\nWhat I'm currently managing is pin pointing it to a certain line in code of the wifi scan example (https://github.com/platformio/platformio-examples/blob/develop/espressif/esp32-arduino-wifiscan/src/WiFiScan.ino).\nLine 36 is causing this. Once commented problem goes away.\nYou can find the source files and elf here.\nIf this is somehow related to the WiFi library please feel free to close this and point me to the project it comes from.. ",
    "ammaree": "Apologies, I must have gotten lost somewhere. Have re-logged at esp-idf\nFrom: Angus Gratton notifications@github.com\nReply-To: espressif/esptool reply@reply.github.com\nDate: Thursday, 30 March 2017 at 05:18\nTo: espressif/esptool esptool@noreply.github.com\nCc: Andr\u00e9 Maree andrem@kss.co.za, Author author@noreply.github.com\nSubject: Re: [espressif/esptool] uxTaskGetSystemState() returns incorrect task info (#189)\nHi Andre,\nI think this bug probably belongs at the IDF repo: https://github.com/espressif/esp-idf/issues\nAngus\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHubhttps://github.com/espressif/esptool/issues/189#issuecomment-290290720, or mute the threadhttps://github.com/notifications/unsubscribe-auth/ADE_mLaWrJamBVKsaVEAur9FvCbRKY-Pks5rqx77gaJpZM4MoZyh.\n. ",
    "ouki-wang": "can you enable RTS control\uff1f. will esptool.exe source code be opened?. @projectgus run get.exe. I can get a esptool.exe. I have found a project source https://github.com/igrr/esptool-ck\nIs it an official release version?\nI modify this source code and it can work for me. But I expect an offical version.. ",
    "YanMinge": "Thanks for you quickly reply.\nwhen reset\uff0cthe issue is:\nrst:0x10 (RTCWDT_RTC_RESET),boot:0x13 (SPI_FAST_FLASH_BOOT)\nconfigsip: 0, SPIWP:0x00\nclk_drv:0x00,q_drv:0x00,d_drv:0x00,cs0_drv:0x00,hd_drv:0x00,wp_drv:0x00\nmode:QIO, clock div:2\nload:0x3fff0008,len:8\nload:0xffffffff,len:-1\nbut if I used ESPFlashDownloadTool_v3.4.4.exe and select dio mode to download the firmware, it will successfully burn and run, So I think my firmware is no problem\u3002\nAnd I sure the config is dio mode, here is esptool download log:\n\n. The full command for esptool is: \n$(Q)$(ESPTOOL) --chip esp32 --port $(PORT) --baud $(BAUD) write_flash -z --flash_mode $(FLASH_MODE) --flash_freq $(FLASH_FREQ) --flash_size $(FLASH_SIZE) 0 $^\nand the flash_mode is setting to dio mode. And if the esp32 module support qio mode, It also will successfully burn and run. So seems the esptool only support qio mode.\nand I put the args log here in esptool.py\n\nIf you have some more suggestions, I can add log for debug it.\n. Your answer is professional and effective, Thanks for you help.. Yes, I need my own version, I have lots of my own code(https://github.com/YanMinge/esp32_pro). \nand sometimes I hope to be able to use the latest esp-idf features, I have also updated several times before, but this time more problems encountered. \nHere is my files:\nhttp://oss-yanminge.oss-cn-beijing.aliyuncs.com/shareFromYan/application.elf\nhttp://oss-yanminge.oss-cn-beijing.aliyuncs.com/shareFromYan/application.map. Compared with the normal log, it seems that more of these things:\n```\n.gcc_except_table._Znaj\n                0x40170290       0x16\n .gcc_except_table._Znaj\n                0x40170290       0x16 c:/msys32/opt/xtensa-esp32-elf/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/lib/\\libstdc++.a(new_opv.o)\n.gcc_except_table.__gxx_personality_v0\n                0x401702a8       0x1c\n .gcc_except_table.__gxx_personality_v0\n                0x401702a8       0x1c c:/msys32/opt/xtensa-esp32-elf/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/lib/\\libstdc++.a(eh_personality.o)\n.gcc_except_table.__cxa_call_unexpected\n                0x401702c4       0x18\n .gcc_except_table.__cxa_call_unexpected\n                0x401702c4       0x18 c:/msys32/opt/xtensa-esp32-elf/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/lib/\\libstdc++.a(eh_personality.o)\n.gcc_except_table.__cxa_get_globals_fast\n                0x401702dc       0x11\n .gcc_except_table.__cxa_get_globals_fast\n                0x401702dc       0x11 c:/msys32/opt/xtensa-esp32-elf/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/lib/\\libstdc++.a(eh_globals.o)\n.gcc_except_table._ZN10__cxxabiv111__terminateEPFvvE\n                0x401702f0       0x1d\n .gcc_except_table._ZN10__cxxabiv111__terminateEPFvvE\n                0x401702f0       0x1d c:/msys32/opt/xtensa-esp32-elf/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/lib/\\libstdc++.a(eh_terminate.o)\n``. The toolchain I'm currently using isesp32_win32_msys2_environment_and_toolchain-20170918and I replaced libstdc ++.a of toolchain versionesp32_win32_msys2_environment_and_toolchain-20170111in pathxtensa-esp32-elf / lib / libstdc ++. a`\nand this error does not happen again. I can successfully compile the fireware.bin file and download it to ESP32, but this will lead to some run-time error. \nI hope you can give me some possible direction to solve this problem,  I can go to try\n. I have determined that this issue is caused by esp32_win32_msys2_environment_and_toolchain, so the issue can be closed. ",
    "moxy-bc": "Not sure if this is related to this, or not...\nhttps://github.com/espressif/esptool/issues/136#issuecomment-274413187\n. ",
    "zgoda": "In both cases this is CH340G on Linux. Same board, same linux laptop.. You might try esptool-ck, it is possible it will work in your case too.. Tried couple of other options so to recap:\n\n2 boards with onboard CH340G do not flash (WeMos D1 mini clone and LoLin NodeMCU V3)\nboard with onboard CP2102 does not flash (Amica NodeMCU V2)\nESP-01 with PL2303 based USB-UART adapter does not flash\nESP-01 with FT232R based USB-UART adapter does not flash\n\nOther than in this particular case esptool.py works fine. ESP-01 does not have reset connection, 3 other boards reset fine after flashing.. I will try to reproduce this. The bug in Sming that was the cause of this issue is long gone. Inducing WDT reset by simple long sleep does not produce this effect and firmware can be safely flashed. My guess is this should be very tight loop, when reset happens very early.. ",
    "sampreetg66": "can anyone give me a software link so as to flash a 8266. ",
    "SivaNallamalli": "I created a zip file, that contains all the source, Makefiles & binaries that are generated after compilation. I am unable to attach my app.out binary that was generted.\nAll the binaries that are generated are available  in build folder.\nbasic_example.zip\n. ",
    "Shai1436": "Hi, @projectgus  I am facing the same \"struct.error\" while making binary files for my ELF file.\n\nesptool.py elf2image build/kaa_demo\n\nLink for ELF file. Thanks @projectgus  for the fix, but the problem exists in my case. It's still giving the same error.\n esptool.py v2.0-beta2\n\nWARNING: Unexpected ELF section header length f4e0 is not mod-28\n\nTraceback (most recent call last):\n\nFile \"/usr/local/bin/esptool.py\", line 9, in <module>\n\nload_entry_point('esptool==2.0-beta2',` 'console_scripts', 'esptool.py')()\n\nFile \"build/bdist.linux-x86_64/egg/esptool.py\", line 2294, in _main\n\nFile \"build/bdist.linux-x86_64/egg/esptool.py\", line 2096, in main\n\nFile \"build/bdist.linux-x86_64/egg/esptool.py\", line 1713, in elf2image\n\nFile \"build/bdist.linux-x86_64/egg/esptool.py\", line 1326, in __init__\nif __name__ == '__main__':\nFile \"build/bdist.linux-x86_64/egg/esptool.py\", line 1349, in _read_elf_file\n\nFile \"build/bdist.linux-x86_64/egg/esptool.py\", line 1366, in _read_sections\n\nFile \"build/bdist.linux-x86_64/egg/esptool.py\", line 1364, in read_section_header\n\nstruct.error: unpack_from requires a buffer of at least 24 bytes\n\nI have downloaded the files from the master branch. I have also tried deleting the previous corresponding python packages and rebooting the device.. ",
    "croisez": "I apologize for any inconvenient. I will pay attention in the future.\nConcerning your questions:\n- yes I must push on GPIO0+RST buttons for ESP32 to enter Download mode, although there is two mosfets on the boards, which if I understand right, are driven by RTS/DTS signals from the RS232 SLA chip. But ok, this is another problem. Perhaps the driver installed on my OSX is filtering those signals, or perhaps these signals are not handled by the board I choose (I am choosing the first entry \"ESP32 dev module\" because I don't found my board reference in the menu).\n- from inside Eclipse, yes, the flashing starts correctly when I hold down the BOOT button, but only when I do a RST as well. I never tried with BOOT button only. You mean that the RST should be driven by software? BTW I remarked that my board never reboots after a successfully flash, although it is written on screen that esptool is rebooting the board.\n- As already said, the combination of BOOT and RST pushes allows me to flash the board with success, but not from within Arduino IDE, but from Eclipse, yes. OK. Arduino is actually able to program my board when I manually push on BOOT button before flashing process begins. No need to push on RST button. There is still a problem with the Arduino sketch which does not start upon reset of the board.  But this is not related to esptool. So I can close this issue. Thanks for support. ",
    "architmuchhal12": "I am facing the same issue with the WEMOS LOLIN 32 v1.0.0. It doesn't has a BOOT button though, only the RESET button. What should I do?\n(https://forum.wemos.cc/topic/334/lolin32-v1-0-0-is-release) . Hey Angus,\nBy the looks of it, I think I'm using esptool.py v2.0. I am not sure if this is the version to be used. \nAlso, I am running the Windows 7 OS.\nYou can check the screenshot attached.\n\nError:\n``Sketch uses 108830 bytes (10%) of program storage space. Maximum is 1044464 bytes.\nGlobal variables use 9616 bytes (3%) of dynamic memory, leaving 285296 bytes for local variables. Maximum is 294912 bytes.\nesptool.py v2.0-beta3\nConnecting....\nUploading stub...\nA fatal error occurred: Response doesn't match request\nA fatal error occurred: Response doesn't match request\n`\n```. I pretty much believe that it is a hardware issue. I had the ESP32 from WEMOS and it did have issues. Later on, I ordered one from Sparkfun and since then, I haven't;t faced this issue even once.\nI would recommend to change your ESP32 and then try.. ",
    "PRosenb": "What worked for me all times (on Mac) is the following:\n- unplug ESP32\n- start to hold the BOOT button\n- plug ESP in\n- execute: make flash monitor\n- release the BOOT button when it tries to connect\nI hope it helps.. ",
    "tehniq3": "I have same problems... i try in Arduino IDE and PlatformIO-Atom, same errro message: A fatal error occurred: Failed to connect to ESP32: Timed out waiting for packet header. I have same problem... see in my movie: from https://youtu.be/eRF4IqNOw_s\nESP32 board enter in upload mode but ... same error . my board: DOIT ESP32 ESPDEVKIT v1\nwindows 10\nsee https://youtu.be/eRF4IqNOw_s\nalso, I try it to push and hold buttons after enter un uploade mode :((( \nPS: a friend have 2 identical board and same problem... GNT or GND ???/ GND to 3V3 blow up the chip...\n..............................................................................................................\nhttp://www.arduinotehniq.com/\n&\nhttp://nicuflorica.blogspot.ro/\n&\nhttp://arduinotehniq.blogspot.com/\n2018-07-05 22:22 GMT+03:00 marisancans notifications@github.com:\n\nIn my case I had somewhere seen that you need to connect GNT to 3V3, so I\ndid, and that caused me problems. Spent hours of my stupidity. Sometimes,\nlook for different angles of attack or even go do something else for a\nchange\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/espressif/esptool/issues/226#issuecomment-402826947,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AEt-duuUmcGPgZLtVs8BnLFtwqpUeRIMks5uDmd6gaJpZM4O_58S\n.\n. \n",
    "tjm-": "Hi\n     I'm having a similar problem.   I bought a ESP-32 ESP-32S Development Board WiFi Bluetooth Ultra-Low Power Consumption Dual Cores ESP32 Board, installed the IDF on Ubuntu in a Virtual Box, built the hello_world example and it flashed fine with the monitor showing the message and restarts.  I then tried another app but got the message\n esptool.py v2.1-beta1\nConnecting.....\nChip is ESP32D0WDQ6 (revision 0)\nUploading stub...\nA fatal error occurred: Timed out waiting for packet header\nI tried the hello_world again and got the same message.   I've since tried re-installing the IDF on my Windows 10 host and re-building hello_world but got the same message.  I've tried the various button holdings as suggested here and elsewhere but to no avail and I also tried a different version of esptool (v2.0.1) with the same results.\nAny help would be appreciated\nThanks\nTom\n. Success, of a sort!  I connected another usb->uart to tx0 and rx0 and tried flashing; after manually resetting and pressing boot (after the connect message) everything worked as expected - stub uploaded, run, etc all the way to hash verified hard reset (which didn't work).  Manual reset and app running.  \nI'm not sure what isn't actually working with the on-board usb->uart but this seems to work for now\n. ",
    "GwynMunich": "I have 10 boards from one supplier and 10 boards from another. They are both labelled \"NODEMCU ESP-32S V1.1 101010 the only discernible difference is that the good batch doesn't have text legible on the on-board USB-Serial. The batch with an issue has SiLabs CP2102 written on it.\nOne batch has an issue and the other one doesn't. My conclusion is that there is some low level embedded firmware in the ESP32 that needs to be updated. What Do You Think?, This is what I did:\nISSUE: some boards need the BOOT Button pressing for ~1 second while ...._......_ is being displayed (during download) and some boards don't\nI get the above issue while downloading any Arduino Sketch.\nIf I run this from the command prompt on windows 10:\nC:\\Python27\\python C:\\Projects\\ESP32\\Python\\esptool.py --port com9  erase_flash\nI still need to hold the BOOT and it erases the flash.\nBUT the next time I run the command I don't need to hold the BOOT, neither do I need to hold the BOOT to download a sketch.\nHOWEVER the next time I try to download a Sketch I have the same issue. Even it the Sketch I download is a basic simple- do nothing Sketch.\n. This is the message from the Arduino firmware flasher, just after connection is made:\nChip is ESP32D0WDQ6 (revision (unknown 0xa)) ------ FAULTY UNIT\nChip is ESP32D0WDQ6 (revision 1) ------ WORKING UNIT\nIt would appear that I have been shipped some older ESP-32 modules with the ESP-WROOM-32 modules that contain older silicone.\nThe ODD thing is the fact that they work after flash is erased.\nI'm noticing that if I touch some of the GPIO pins that are connected to the internal Flash it will occasionally boot without the BOOT button being pushed. Also, if I probe these pins they appear to be floating during the boot process.\nI'm wondering if the issue is do do with floating pins needing to float to ground and holding the BOOT button simply extends the period the pins are given to reach ground. I'll look at this and let you know.\nin another twist I also have a small batch Mini ESP32 from WeMos; no Boot button and always downloads. and displays:\nChip is ESP32D0WDQ6 (revision (unknown 0xa)) ----- WORKING UNIT (WeMos MINI). I'm new to github and this sort of environment in general I seem to be caught up in two separate threads on the same subject.. @projectgus,\nThanks for your comments. I'm duplicating what I have written on two threads, its my fault. I'll learn.\nI have made some progress in that area.\nI'm happy to hear the comment about the 0xa in the chip ID, the whole situation would make less sense if one chip was older and the other newer. \n@cimba007 sent me this picture from the board he was working on, the cap is a 0.1uF\nhttps://user-images.githubusercontent.com/3453121/47588736-730eaa80-d967-11e8-9ef3-e005cf8062bd.jpg\nI made a test on my faulty units and had a similar result with a 0.1uF cap as shown in this Pic:\n\n. As an interesting side note:\nThe reason deleting the flash using a python command works is that (as I noted earlier):\nIt puts the unit into a looped reset sequence. Which can be seen with Realterm at 115200.\nEffectively modifying the timing of the whole reset / boot mode sequence thus allowing the unit into boot mode without the need for the BOOT key \n. ",
    "g-sam": "That's right.\nThanks for the info...Got my eyes on this: https://github.com/micropython/micropython/issues/2335. ",
    "coderfox": "Yes, I am running into the same issue.\nFlashing always fail at the same offset when using a same firmware.\nFirmware A:\nWriting at 0x00008000... (27 %)\nA fatal error occurred: Timed out waiting for packet header\nFirmware B:\nWriting at 0x00008000... (17 %)\nA fatal error occurred: Timed out waiting for packet header. ",
    "ESP32DE": "@projectgus \njust in time this is tested - i get on weekend the revised revision PCB of D2 and D0 with pSRAM for solder.\nthe practical comes from forum:\nthe windows pc tool newest version 3.4.8 ( 2017-May-19 ) that use the last base of esptool.py\ncan not successful read eMbeddedFlash infos\ncan not flash firmware\ni saw your PR / merge for support D2 -( i can not believe that works with the Stub Code :)   )\nhave you tested it with an ESP32-D2WDQ5?\nthere is 1.8V VDD_SDIO need ( bootstrap GPIO12 high ) \nhave you successful test the Firmware Flash Download?\n. @costaud\nsame in your last version.\nbtw: can you please provide the src for windows pc version ( 3.4.8 2017-May-19)\ntxs\nbest wishes\nrudi ;-)\n. @projectgus \ntxs - i can test earliest this on weekend after soldering itself - will inform you asap.\ni will use command line and eclipse for this.\n@costaud what version of  \"magic stub\" you use for D2 ? ;-) \ntxs!. @projectgus \n\nYes, I've been using one most days as a development device for over a month now. \nIf using esptool.py on the command line or via IDF makefiles, ESP32-D2WD should be fully supported. \n\nnice - \ncan you share the info, does ESP32-D2WD be rev0 or rev1 silicon\nand can ESP32-D2WD support pSRAM on this way\nso we can save our time to make the PCB here final if ESP32-D2WD is not rev1 and can not support pSRAM,  and put back the chips to packages ..  thank you.\n@costaud\nping\n. @projectgus \ntxs angus! - please can you say, have you use special bootstrap pins for flash the embeddedflash and then later for boot from it?\nwe can just in time not go on here \nhttps://www.esp32.com/viewtopic.php?f=12&t=1682&p=9712#p9709  \nthank you angus! \nbest wishes \nrudi ;-). @projectgus \nwell done! flash download was ok now.\nhttps://esp32.com/viewtopic.php?f=12&t=1682&p=9720#p9719\nthink can be closed - \n. ",
    "murilopolese": "This would be indeed much appreciated! I have been trying to avoid \"mocking up\" a command line but I wasn't able to find my way through the code on how to do it (I'm just starting with Python). Thanks @marcelstoer for the snippet! This is great!\nBefore finding this solution I was fiddling around with a local copy of esptool.py where the main() function accepts a non required Namespace as argument. In case I called main() with this argument I would use it instead of the result of parser.parse_args(). It worked pretty well as I could perform all the actions I needed with a fairly small amount of code.\nMy instincts tell me that is not a very good idea but I can't reason exactly why. Could you help me understanding why the main() function shouldn't accept an optional Namespace argument? Or maybe it could but what problems that wouldn't solve and which new problems that would create?. > @Pimmetje for my PyFlasher I had to redirect stdout for that: https://github.com/marcelstoer/nodemcu-pyflasher/blob/master/Main.py#L165\nJust to update it as it's now pointing to an unrelated line of code: https://github.com/marcelstoer/nodemcu-pyflasher/blob/861f75415c3874e7e2f1000e8ea419da70f6fd19/Main.py#L188. ",
    "Pimmetje": "It would also be nice to be able to catch the print output (callback). But i guess that would require a lot of refactoring on the esptool. Thx @marcelstoer your code gave me a clue on how to make it work. I can now get my compiled projects from my CI server and upload them to a ESP with a few clicks :). I wished arduino had a python version of AVRdude. Remark i had to hack the code a bit because the Serial port was not closed after a upload. . Thx, i already found that one. I also updated the esptool but no joy on that end. ",
    "matthewbryancurtis": "Thank you for responding so quickly. Your suggestion allowed me to flash both of the ESP8266s that I had been having trouble with.\nOne is back in perfect condition, the other is no longer responding to ampy/screen after flashing MicroPython. However I have no reason to believe this is an issue with esptool as I'm not running into any errors when flashing.\nThank you for your help!. ",
    "rmokerone": "I also encountered the same problem.When I debug, I found the problem in the slip_reader function.\n```python\ndef slip_reader(port):\n    \"\"\"Generator to read SLIP packets from a serial port.\n    Yields one full SLIP packet at a time, raises exception on timeout or invalid data.\nDesigned to avoid too many calls to serial.read(1), which can bog\ndown on slow systems.\n\"\"\"\npartial_packet = None\nin_escape = False\nwhile True:\n    waiting = port.inWaiting()\n    read_bytes = port.read(1 if waiting == 0 else waiting)\n    if read_bytes == b'':\n        raise FatalError(\"Timed out waiting for packet %s\" % (\"header\" if partial_packet is None else \"content\"))\n    for b in read_bytes:\n\n        if type(b) is int:\n            b = bytes([b])  # python 2/3 compat\n\n        if partial_packet is None:  # waiting for packet header\n            if b == b'\\xc0':\n                partial_packet = b\"\"\n            else:\n                raise FatalError('Invalid head of packet (%r)' % b)\n        elif in_escape:  # part-way through escape sequence\n            in_escape = False\n            if b == b'\\xdc':\n                partial_packet += b'\\xc0'\n            elif b == b'\\xdd':\n                partial_packet += b'\\xdb'\n            else:\n                raise FatalError('Invalid SLIP escape (%r%r)' % (b'\\xdb', b))\n        elif b == b'\\xdb':  # start of escape sequence\n            in_escape = True\n        elif b == b'\\xc0':  # end of packet\n            yield partial_packet\n            partial_packet = None\n        else:  # normal byte in packet\n            partial_packet += b\n\n`\nI think the reason is as follows\uff1aCh43x chip can not return data immediately.``\nWhen I use CH340 chip to read chip_id, log as follows:\n```\nesptool.py v2.0.1\nset baudrate ...\nConnecting...#### Enter slip_reader function ####\nwaiting =  0\nread_bytes =  b''\nhave one error\nFatalError log\n.#### Enter slip_reader function ####\nwaiting =  0\nread_bytes =  b'\\xc0'\nwaiting =  31\nread_bytes =  b'\\x01\\x08\\x02\\x00\\x07\\x07\\x12 \\x00\\x00\\xc0\\xc0\\x01\\x08\\x02\\x00\\x07\\x07\\x12 \\x00\\x00\\xc0\\xc0\\x01\\x08\\x02\\x00\\x07\\x07\\x12'\nOut from slip_reader function\nBack to slip_reader function\nOut from slip_reader function\nBack to slip_reader function\nwaiting =  0\nread_bytes =  b' '\nwaiting =  31\nread_bytes =  b'\\x00\\x00\\xc0\\xc0\\x01\\x08\\x02\\x00\\x07\\x07\\x12 \\x00\\x00\\xc0\\xc0\\x01\\x08\\x02\\x00\\x07\\x07\\x12 \\x00\\x00\\xc0\\xc0\\x01\\x08\\x02'\nOut from slip_reader function\nBack to slip_reader function\nOut from slip_reader function\nBack to slip_reader function\nOut from slip_reader function\nBack to slip_reader function\nwaiting =  0\nread_bytes =  b'\\x00'\nwaiting =  31\nread_bytes =  b'\\x07\\x07\\x12 \\x00\\x00\\xc0\\xc0\\x01\\x08\\x02\\x00\\x07\\x07\\x12 \\x00\\x00\\xc0\\xc0\\x01\\x08\\x02\\x00\\x07\\x07\\x12 \\x00\\x00\\xc0'\nOut from slip_reader function\nBack to slip_reader function\nOut from slip_reader function\nBack to slip_reader function\nOut from slip_reader function\nDetecting chip type...###### Back to slip_reader function #####\nwaiting =  0\nread_bytes =  b''\nhave one error\nFatalError log\nA fatal error occurred: Timed out waiting for packet header\n```\nBut when I use cp2102 chips, log is as follows\uff1a\n```bash\nesptool.py v2.0.1\nset baudrate ...\nConnecting...#### Enter slip_reader function ####\nwaiting =  0\nread_bytes =  b''\nhave one error\nFatalError log\n.#### Enter slip_reader function ####\nwaiting =  0\nread_bytes =  b'\\xc0'\nwaiting =  95\nread_bytes =  b'\\x01\\x08\\x02\\x00\\x07\\x07\\x12 \\x00\\x00\\xc0\\xc0\\x01\\x08\\x02\\x00\\x07\\x07\\x12 \\x00\\x00\\xc0\\xc0\\x01\\x08\\x02\\x00\\x07\\x07\\x12 \\x00\\x00\\xc0\\xc0\\x01\\x08\\x02\\x00\\x07\\x07\\x12 \\x00\\x00\\xc0\\xc0\\x01\\x08\\x02\\x00\\x07\\x07\\x12 \\x00\\x00\\xc0\\xc0\\x01\\x08\\x02\\x00\\x07\\x07\\x12 \\x00\\x00\\xc0\\xc0\\x01\\x08\\x02\\x00\\x07\\x07\\x12 \\x00\\x00\\xc0\\xc0\\x01\\x08\\x02\\x00\\x07\\x07\\x12 \\x00\\x00\\xc0'\nOut from slip_reader function\nBack to slip_reader function\nOut from slip_reader function\nBack to slip_reader function\nOut from slip_reader function\nBack to slip_reader function\nOut from slip_reader function\nBack to slip_reader function\nOut from slip_reader function\nBack to slip_reader function\nOut from slip_reader function\nBack to slip_reader function\nOut from slip_reader function\nBack to slip_reader function\nOut from slip_reader function\nDetecting chip type...###### Back to slip_reader function #####\nwaiting =  0\nread_bytes =  b'\\xc0'\nwaiting =  11\nread_bytes =  b'\\x01\\n\\x02\\x00\\x00 \\x06\\x00\\x00\\x00\\xc0'\nOut from slip_reader function\nset baudrate ...\n ESP8266\nChip is ESP8266\n```\nYou can see that after printing out Detecting chip type... line.  ch340and cp2102also output waiting =  0. But, read_bytes = port.read(1 if waiting == 0 else waiting) still try to read 1 byte. CP2102 immediately returned a, but CH340 can not return anything.So, the error appeared!\nSolution\nIf you want to solve this problem, you can try to add the following code above the waiting = port.inWaiting() line.\npython\ntime.sleep(0.1)\nGood luck~. @projectgus thank you for your reply\uff01\n\nWhat host OS are you using?\n\nmacOS Sierra 10.12.5\n\nDoes this solve the problem for you?\n\nVery perfect solution to my problem.\nCH340 OUTPUT\n```\n\u279c  esptool git:(reading) \u2717 python3 esptool.py -p /dev/tty.wchusbserial1420 chip_id\nesptool.py v2.0.1\nConnecting...waiting = 0 @ 1499052157.410\nreturned 0 bytes @ 1499052157.515 (0.104s)\n.waiting = 0 @ 1499052157.567\nreturned 1 bytes @ 1499052157.574 (0.007s)\nwaiting = 31 @ 1499052157.575\nreturned 31 bytes @ 1499052157.575 (0.000s)\nwaiting = 0 @ 1499052157.575\nreturned 1 bytes @ 1499052157.577 (0.002s)\nwaiting = 31 @ 1499052157.577\nreturned 31 bytes @ 1499052157.578 (0.000s)\nwaiting = 0 @ 1499052157.578\nreturned 1 bytes @ 1499052157.580 (0.002s)\nwaiting = 31 @ 1499052157.580\nreturned 31 bytes @ 1499052157.580 (0.000s)\nDetecting chip type...waiting = 0 @ 1499052157.581\nreturned 0 bytes @ 1499052160.584 (3.003s)\nA fatal error occurred: Timed out waiting for packet header\n```\nCP2102 OUTPUT\n```\n\u279c  esptool git:(reading) \u2717 python3 esptool.py -p /dev/tty.SLAB_USBtoUART chip_id\nesptool.py v2.0.1\nConnecting...waiting = 0 @ 1499052253.016\nreturned 0 bytes @ 1499052253.120 (0.105s)\n.waiting = 0 @ 1499052253.174\nreturned 1 bytes @ 1499052253.188 (0.013s)\nwaiting = 95 @ 1499052253.188\nreturned 95 bytes @ 1499052253.188 (0.000s)\nDetecting chip type...waiting = 0 @ 1499052253.189\nreturned 1 bytes @ 1499052253.191 (0.002s)\nwaiting = 11 @ 1499052253.191\nreturned 11 bytes @ 1499052253.191 (0.000s)\n ESP8266\nChip is ESP8266\nUploading stub...\nwaiting = 0 @ 1499052253.191\nreturned 1 bytes @ 1499052253.195 (0.004s)\nwaiting = 11 @ 1499052253.195\nreturned 11 bytes @ 1499052253.196 (0.000s)\nwaiting = 0 @ 1499052253.198\nreturned 1 bytes @ 1499052253.743 (0.546s)\nwaiting = 11 @ 1499052253.743\nreturned 11 bytes @ 1499052253.743 (0.000s)\nwaiting = 0 @ 1499052253.744\nreturned 1 bytes @ 1499052253.913 (0.169s)\nwaiting = 11 @ 1499052253.913\nreturned 11 bytes @ 1499052253.913 (0.000s)\nwaiting = 0 @ 1499052253.913\nreturned 1 bytes @ 1499052253.917 (0.004s)\nwaiting = 11 @ 1499052253.917\nreturned 11 bytes @ 1499052253.917 (0.000s)\nwaiting = 0 @ 1499052253.917\nreturned 1 bytes @ 1499052253.988 (0.070s)\nwaiting = 11 @ 1499052253.988\nreturned 11 bytes @ 1499052253.988 (0.000s)\nRunning stub...\nwaiting = 0 @ 1499052253.988\nreturned 1 bytes @ 1499052253.991 (0.003s)\nwaiting = 11 @ 1499052253.992\nreturned 11 bytes @ 1499052253.992 (0.000s)\nwaiting = 0 @ 1499052253.992\nreturned 1 bytes @ 1499052253.994 (0.002s)\nwaiting = 5 @ 1499052253.994\nreturned 5 bytes @ 1499052253.994 (0.000s)\nStub running...\nwaiting = 0 @ 1499052253.995\nreturned 1 bytes @ 1499052253.997 (0.003s)\nwaiting = 11 @ 1499052253.997\nreturned 11 bytes @ 1499052253.997 (0.000s)\nwaiting = 0 @ 1499052253.998\nreturned 1 bytes @ 1499052254.001 (0.003s)\nwaiting = 11 @ 1499052254.001\nreturned 11 bytes @ 1499052254.001 (0.000s)\nChip ID: 0x0081ab16\nHard resetting...\n```\nCH340 after add 0.1s delay.\n```bash\n\u279c  esptool git:(reading) \u2717 python3 esptool.py -p /dev/tty.wchusbserial1420 chip_id\nesptool.py v2.0.1\nConnecting...waiting = 0 @ 1499052416.299\nreturned 0 bytes @ 1499052416.402 (0.103s)\n.waiting = 96 @ 1499052416.560\nreturned 96 bytes @ 1499052416.560 (0.000s)\nDetecting chip type...waiting = 12 @ 1499052416.665\nreturned 12 bytes @ 1499052416.665 (0.000s)\n ESP8266\nChip is ESP8266\nUploading stub...\nwaiting = 12 @ 1499052416.769\nreturned 12 bytes @ 1499052416.769 (0.000s)\nwaiting = 12 @ 1499052417.381\nreturned 12 bytes @ 1499052417.381 (0.000s)\nwaiting = 12 @ 1499052417.632\nreturned 12 bytes @ 1499052417.632 (0.000s)\nwaiting = 12 @ 1499052417.737\nreturned 12 bytes @ 1499052417.737 (0.000s)\nwaiting = 12 @ 1499052417.899\nreturned 12 bytes @ 1499052417.899 (0.000s)\nRunning stub...\nwaiting = 18 @ 1499052418.000\nreturned 18 bytes @ 1499052418.000 (0.000s)\nStub running...\nwaiting = 12 @ 1499052418.105\nreturned 12 bytes @ 1499052418.105 (0.000s)\nwaiting = 12 @ 1499052418.209\nreturned 12 bytes @ 1499052418.209 (0.000s)\nChip ID: 0x0080dd2d\nHard resetting...\n```\nVery strange\uff01\uff01\uff01. @projectgus \nI used the driver as follows:\n\nhttp://www.wch.cn/download/CH341SER_MAC_ZIP.html\n\nThank you for your hard work:-D. ### CH340 OUTPUT\n```bash\n\u279c  esptool git:(reading) \u2717 python3 esptool.py -p /dev/tty.wchusbserial1420 chip_id\nesptool.py v2.0.1\nConnecting...waiting = 0 @ 1499054081.272\nreturned 0 bytes @ 1499054081.375 (0.103s)\nreturned 0 bytes @ 1499054081.480 (0.208s)\n.waiting = 0 @ 1499054081.534\nreturned 1 bytes @ 1499054081.542 (0.007s)\nwaiting = 31 @ 1499054081.542\nreturned 31 bytes @ 1499054081.542 (0.000s)\nwaiting = 0 @ 1499054081.542\nreturned 1 bytes @ 1499054081.544 (0.002s)\nwaiting = 31 @ 1499054081.544\nreturned 31 bytes @ 1499054081.544 (0.000s)\nwaiting = 0 @ 1499054081.545\nreturned 1 bytes @ 1499054081.547 (0.003s)\nwaiting = 31 @ 1499054081.547\nreturned 31 bytes @ 1499054081.547 (0.000s)\nDetecting chip type...waiting = 0 @ 1499054081.548\nreturned 0 bytes @ 1499054084.551 (3.004s)\nreturned 0 bytes @ 1499054087.556 (6.009s)\nA fatal error occurred: Timed out waiting for packet header\n```\nCP2102 OUTPUT\n```bash\n\u279c  esptool git:(reading) \u2717 python3 esptool.py -p /dev/tty.SLAB_USBtoUART chip_id\nesptool.py v2.0.1\nConnecting...waiting = 0 @ 1499057248.235\nreturned 0 bytes @ 1499057248.340 (0.105s)\nreturned 0 bytes @ 1499057248.444 (0.209s)\n.waiting = 0 @ 1499057248.498\nreturned 1 bytes @ 1499057248.512 (0.013s)\nwaiting = 95 @ 1499057248.512\nreturned 95 bytes @ 1499057248.512 (0.000s)\nDetecting chip type...waiting = 0 @ 1499057248.512\nreturned 1 bytes @ 1499057248.515 (0.003s)\nwaiting = 11 @ 1499057248.515\nreturned 11 bytes @ 1499057248.515 (0.000s)\n ESP8266\nChip is ESP8266\nUploading stub...\nwaiting = 0 @ 1499057248.515\nreturned 1 bytes @ 1499057248.519 (0.004s)\nwaiting = 11 @ 1499057248.519\nreturned 11 bytes @ 1499057248.519 (0.000s)\nwaiting = 0 @ 1499057248.521\nreturned 1 bytes @ 1499057249.067 (0.546s)\nwaiting = 11 @ 1499057249.067\nreturned 11 bytes @ 1499057249.067 (0.000s)\nwaiting = 0 @ 1499057249.068\nreturned 1 bytes @ 1499057249.237 (0.169s)\nwaiting = 11 @ 1499057249.237\nreturned 11 bytes @ 1499057249.237 (0.000s)\nwaiting = 0 @ 1499057249.237\nreturned 1 bytes @ 1499057249.241 (0.004s)\nwaiting = 11 @ 1499057249.241\nreturned 11 bytes @ 1499057249.241 (0.000s)\nwaiting = 0 @ 1499057249.242\nreturned 1 bytes @ 1499057249.313 (0.071s)\nwaiting = 11 @ 1499057249.313\nreturned 11 bytes @ 1499057249.313 (0.000s)\nRunning stub...\nwaiting = 0 @ 1499057249.314\nreturned 1 bytes @ 1499057249.316 (0.003s)\nwaiting = 11 @ 1499057249.317\nreturned 11 bytes @ 1499057249.317 (0.000s)\nwaiting = 0 @ 1499057249.317\nreturned 1 bytes @ 1499057249.319 (0.002s)\nwaiting = 5 @ 1499057249.319\nreturned 5 bytes @ 1499057249.319 (0.000s)\nStub running...\nwaiting = 0 @ 1499057249.320\nreturned 1 bytes @ 1499057249.322 (0.003s)\nwaiting = 11 @ 1499057249.323\nreturned 11 bytes @ 1499057249.323 (0.000s)\nwaiting = 0 @ 1499057249.323\nreturned 1 bytes @ 1499057249.326 (0.002s)\nwaiting = 11 @ 1499057249.326\nreturned 11 bytes @ 1499057249.326 (0.000s)\nChip ID: 0x0081ab16\nHard resetting...\n```\nCH340 ADD 0.1 SECOND DELAY.\n```bash\n\u279c  esptool git:(reading) \u2717 python3 esptool.py -p /dev/tty.wchusbserial1420 chip_id\nesptool.py v2.0.1\nConnecting...waiting = 0 @ 1499056576.133\nreturned 0 bytes @ 1499056576.238 (0.105s)\nreturned 0 bytes @ 1499056576.343 (0.209s)\n.waiting = 96 @ 1499056576.498\nreturned 96 bytes @ 1499056576.498 (0.000s)\nDetecting chip type...waiting = 12 @ 1499056576.604\nreturned 12 bytes @ 1499056576.604 (0.000s)\n ESP8266\nChip is ESP8266\nUploading stub...\nwaiting = 12 @ 1499056576.707\nreturned 12 bytes @ 1499056576.707 (0.000s)\nwaiting = 12 @ 1499056577.318\nreturned 12 bytes @ 1499056577.318 (0.000s)\nwaiting = 12 @ 1499056577.573\nreturned 12 bytes @ 1499056577.573 (0.000s)\nwaiting = 12 @ 1499056577.678\nreturned 12 bytes @ 1499056577.678 (0.000s)\nwaiting = 12 @ 1499056577.844\nreturned 12 bytes @ 1499056577.844 (0.000s)\nRunning stub...\nwaiting = 18 @ 1499056577.947\nreturned 18 bytes @ 1499056577.947 (0.000s)\nStub running...\nwaiting = 12 @ 1499056578.052\nreturned 12 bytes @ 1499056578.052 (0.000s)\nwaiting = 12 @ 1499056578.157\nreturned 12 bytes @ 1499056578.157 (0.000s)\nChip ID: 0x0080dd2d\nHard resetting...\n```. It does not matter, I am happy to solve this problem.\nCH340 OUTPUT\n``` bash\n\u279c  esptool git:(reading) \u2717 python3 esptool.py -p /dev/tty.wchusbserial1420 chip_id\nesptool.py v2.0.1\nConnecting...waiting = 0 @ 1499055848.235\nreturned 1 bytes @ 1499055848.242 (0.007s)\nwaiting = 31 @ 1499055848.242\nreturned 31 bytes @ 1499055848.242 (0.000s)\nwaiting = 0 @ 1499055848.242\nreturned 1 bytes @ 1499055848.245 (0.003s)\nwaiting = 31 @ 1499055848.245\nreturned 31 bytes @ 1499055848.245 (0.000s)\nwaiting = 0 @ 1499055848.245\nreturned 1 bytes @ 1499055848.247 (0.003s)\nwaiting = 31 @ 1499055848.247\nreturned 31 bytes @ 1499055848.248 (0.000s)\nDetecting chip type...waiting = 0 @ 1499055848.248\nreturned 0 bytes @ 1499055848.753 (0.505s)\nreturned 0 bytes @ 1499055849.255 (1.007s)\nA fatal error occurred: Timed out waiting for packet header\n```\nCP2102 modified output correctly.\nCP2102\n```\n\u279c  esptool git:(reading) \u2717 python3 esptool.py -p /dev/tty.SLAB_USBtoUART chip_id\nesptool.py v2.0.1\nConnecting...waiting = 0 @ 1499055917.411\nreturned 0 bytes @ 1499055917.514 (0.103s)\nreturned 0 bytes @ 1499055917.617 (0.206s)\n.waiting = 0 @ 1499055917.672\nreturned 1 bytes @ 1499055917.685 (0.013s)\nwaiting = 95 @ 1499055917.685\nreturned 95 bytes @ 1499055917.685 (0.000s)\nDetecting chip type...waiting = 0 @ 1499055917.686\nreturned 1 bytes @ 1499055917.688 (0.003s)\nwaiting = 11 @ 1499055917.688\nreturned 11 bytes @ 1499055917.688 (0.000s)\n ESP8266\nChip is ESP8266\nUploading stub...\nwaiting = 0 @ 1499055917.689\nreturned 1 bytes @ 1499055917.693 (0.004s)\nwaiting = 11 @ 1499055917.693\nreturned 11 bytes @ 1499055917.693 (0.000s)\nwaiting = 0 @ 1499055917.695\nreturned 0 bytes @ 1499055918.199 (0.504s)\nreturned 1 bytes @ 1499055918.240 (0.545s)\nwaiting = 11 @ 1499055918.240\nreturned 11 bytes @ 1499055918.240 (0.000s)\nwaiting = 0 @ 1499055918.241\nreturned 1 bytes @ 1499055918.410 (0.169s)\nwaiting = 11 @ 1499055918.410\nreturned 11 bytes @ 1499055918.410 (0.000s)\nwaiting = 0 @ 1499055918.410\nreturned 1 bytes @ 1499055918.414 (0.004s)\nwaiting = 11 @ 1499055918.414\nreturned 11 bytes @ 1499055918.414 (0.000s)\nwaiting = 0 @ 1499055918.415\nreturned 1 bytes @ 1499055918.485 (0.070s)\nwaiting = 11 @ 1499055918.485\nreturned 11 bytes @ 1499055918.485 (0.000s)\nRunning stub...\nwaiting = 0 @ 1499055918.486\nreturned 1 bytes @ 1499055918.489 (0.003s)\nwaiting = 11 @ 1499055918.489\nreturned 11 bytes @ 1499055918.489 (0.000s)\nwaiting = 0 @ 1499055918.489\nreturned 1 bytes @ 1499055918.491 (0.002s)\nwaiting = 5 @ 1499055918.491\nreturned 5 bytes @ 1499055918.491 (0.000s)\nStub running...\nwaiting = 0 @ 1499055918.491\nreturned 1 bytes @ 1499055918.494 (0.003s)\nwaiting = 11 @ 1499055918.494\nreturned 11 bytes @ 1499055918.494 (0.000s)\nwaiting = 0 @ 1499055918.494\nreturned 1 bytes @ 1499055918.497 (0.003s)\nwaiting = 11 @ 1499055918.497\nreturned 11 bytes @ 1499055918.497 (0.000s)\nChip ID: 0x0081ab16\nHard resetting...\n```\nCH340 ADD 0.1 SECOND DELAY.\n```bash\n\u279c  esptool git:(reading) \u2717 python3 esptool.py -p /dev/tty.wchusbserial1420 chip_id\nesptool.py v2.0.1\nConnecting...waiting = 0 @ 1499057906.657\nreturned 0 bytes @ 1499057906.762 (0.105s)\nreturned 0 bytes @ 1499057906.867 (0.210s)\n.waiting = 96 @ 1499057907.025\nreturned 96 bytes @ 1499057907.025 (0.000s)\nDetecting chip type...waiting = 12 @ 1499057907.129\nreturned 12 bytes @ 1499057907.129 (0.000s)\n ESP8266\nChip is ESP8266\nUploading stub...\nwaiting = 12 @ 1499057907.232\nreturned 12 bytes @ 1499057907.232 (0.000s)\nwaiting = 12 @ 1499057907.844\nreturned 12 bytes @ 1499057907.844 (0.000s)\nwaiting = 12 @ 1499057908.097\nreturned 12 bytes @ 1499057908.097 (0.000s)\nwaiting = 12 @ 1499057908.202\nreturned 12 bytes @ 1499057908.202 (0.000s)\nwaiting = 12 @ 1499057908.368\nreturned 12 bytes @ 1499057908.368 (0.000s)\nRunning stub...\nwaiting = 18 @ 1499057908.472\nreturned 18 bytes @ 1499057908.472 (0.000s)\nStub running...\nwaiting = 12 @ 1499057908.576\nreturned 12 bytes @ 1499057908.576 (0.000s)\nwaiting = 12 @ 1499057908.681\nreturned 12 bytes @ 1499057908.681 (0.000s)\nChip ID: 0x0080dd2d\nHard resetting...\n```\nCP2102 ADD 0.1 SECOND DELAY.\n```bash\n\u279c  esptool git:(reading) \u2717 python3 esptool.py -p /dev/tty.SLAB_USBtoUART chip_id\nesptool.py v2.0.1\nConnecting...waiting = 0 @ 1499058005.165\nreturned 0 bytes @ 1499058005.269 (0.104s)\nreturned 0 bytes @ 1499058005.371 (0.206s)\n.waiting = 96 @ 1499058005.532\nreturned 96 bytes @ 1499058005.532 (0.000s)\nDetecting chip type...waiting = 12 @ 1499058005.636\nreturned 12 bytes @ 1499058005.636 (0.000s)\n ESP8266\nChip is ESP8266\nUploading stub...\nwaiting = 12 @ 1499058005.741\nreturned 12 bytes @ 1499058005.741 (0.000s)\nwaiting = 0 @ 1499058005.844\nreturned 1 bytes @ 1499058006.288 (0.445s)\nwaiting = 11 @ 1499058006.393\nreturned 11 bytes @ 1499058006.393 (0.000s)\nwaiting = 0 @ 1499058006.498\nreturned 1 bytes @ 1499058006.563 (0.065s)\nwaiting = 11 @ 1499058006.665\nreturned 11 bytes @ 1499058006.665 (0.000s)\nwaiting = 12 @ 1499058006.770\nreturned 12 bytes @ 1499058006.770 (0.000s)\nwaiting = 12 @ 1499058006.875\nreturned 12 bytes @ 1499058006.875 (0.000s)\nRunning stub...\nwaiting = 18 @ 1499058006.980\nreturned 18 bytes @ 1499058006.980 (0.000s)\nStub running...\nwaiting = 12 @ 1499058007.084\nreturned 12 bytes @ 1499058007.084 (0.000s)\nwaiting = 12 @ 1499058007.186\nreturned 12 bytes @ 1499058007.186 (0.000s)\nChip ID: 0x0081ab16\nHard resetting...\n```. - macOS 10.12.6\n- My English is not good, in addition to cp2102 did not encounter this problem, other chips, such as CH340g, HT42B534 have encountered this problem.A lot of boards are from Taobao.\n- 0.3s is what I actually tested out.And this time interval is not in every package. Is the time of each command, I think it is acceptable.Smaller time will also be an error.\n```python\ndef slip_reader(port):\n    \"\"\"Generator to read SLIP packets from a serial port.\n    Yields one full SLIP packet at a time, raises exception on timeout or invalid data.\nDesigned to avoid too many calls to serial.read(1), which can bog\ndown on slow systems.\n\"\"\"\npartial_packet = None\nin_escape = False\nwhile True:\n    waiting = port.inWaiting()\n    read_bytes = port.read(1 if waiting == 0 else waiting)\n    print('read_bytes = ', read_bytes)\n    if read_bytes == b'':\n        raise FatalError(\"Timed out waiting for packet %s\" % (\"header\" if partial_packet is None else \"content\"))\n    for b in read_bytes:\n\n        if type(b) is int:\n            b = bytes([b])  # python 2/3 compat\n\n        if partial_packet is None:  # waiting for packet header\n            if b == b'\\xc0':\n                partial_packet = b\"\"\n            else:\n                raise FatalError('Invalid head of packet (%r)' % b)\n        elif in_escape:  # part-way through escape sequence\n            in_escape = False\n            if b == b'\\xdc':\n                partial_packet += b'\\xc0'\n            elif b == b'\\xdd':\n                partial_packet += b'\\xdb'\n            else:\n                raise FatalError('Invalid SLIP escape (%r%r)' % (b'\\xdb', b))\n        elif b == b'\\xdb':  # start of escape sequence\n            in_escape = True\n        elif b == b'\\xc0':  # end of packet\n            yield partial_packet\n            partial_packet = None\n        else:  # normal byte in packet\n            partial_packet += b\n\nWhen I printed read_bytes in the slip_reader () function.Then try to read chip_id.\nThe normal chip is like this.\n\u279c  esptool git:(master) \u2717 python esptool.py -p /dev/tty.usbmodem0001 chip_id\nesptool.py v2.2-dev\nbefore connect function\nConnecting...before enter self.read() function\nread_bytes =  b'\\xc0'\ntimeout =  0.1\nread_bytes =  b'\\x01\\x08\\x02\\x00\\x07\\x07\\x12 \\x00\\x00\\xc0\\xc0\\x01\\x08\\x02\\x00\\x07\\x07\\x12 \\x00\\x00\\xc0\\xc0\\x01\\x08\\x02\\x00\\x07\\x07\\x12 \\x00\\x00\\xc0\\xc0\\x01\\x08\\x02\\x00\\x07\\x07\\x12 \\x00\\x00\\xc0\\xc0\\x01\\x08\\x02\\x00\\x07\\x07\\x12 \\x00\\x00\\xc0\\xc0\\x01\\x08\\x02\\x00\\x07\\x07\\x12 \\x00\\x00\\xc0\\xc0\\x01\\x08\\x02\\x00\\x07\\x07\\x12 \\x00\\x00\\xc0\\xc0\\x01\\x08\\x02\\x00\\x07\\x07\\x12 \\x00\\x00\\xc0'\ntimeout =  0.1\nafter enter self.read() function\nbefore enter self.read() function\nafter enter self.read() function\nbefore enter self.read() function\nafter enter self.read() function\nbefore enter self.read() function\nafter enter self.read() function\nbefore enter self.read() function\nafter enter self.read() function\nbefore enter self.read() function\nafter enter self.read() function\nbefore enter self.read() function\nafter enter self.read() function\nbefore enter self.read() function\nafter enter self.read() function\nDetecting chip type...before enter self.read() function\nread_bytes =  b'\\xc0'\ntimeout =  3\nread_bytes =  b'\\x01\\n\\x02\\x00\\x00 \\x06\\x00\\x00\\x00\\xc0'\nAbnormal chip is like this.\nbefore enter self.read() function\nread_bytes =  b'\\xc0'\ntimeout =  0.1\nread_bytes =  b'\\x01'\ntimeout =  0.1\nread_bytes =  b'\\x08'\ntimeout =  0.1\nread_bytes =  b'\\x02'\ntimeout =  0.1\nread_bytes =  b'\\x00\\x07'\ntimeout =  0.1\nread_bytes =  b'\\x07'\ntimeout =  0.1\nread_bytes =  b'\\x12'\ntimeout =  0.1\nread_bytes =  b' '\ntimeout =  0.1\nread_bytes =  b'\\x00'\ntimeout =  0.1\nread_bytes =  b'\\x00'\ntimeout =  0.1\nread_bytes =  b'\\xc0'\ntimeout =  0.1\nafter enter self.read() function\nDetecting chip type...before enter self.read() function\nread_bytes =  b'' \ntimeout =  3\nA fatal error occurred: Timed out waiting for packet header\n`\nThe same before printingDetecting chip type...``.But not the same after printing.Abnormal chip can not receive data until the timeout.\nI think the chip may not receive the order in time, or did not receive completely, and therefore can not respond.So I try to add a delay after the command has been sent and everything is OK.\nHowever, what the specific problems are caused by, I am still not very understanding, hoping to be helpful.Thank you.\n. ",
    "jtbasb": "I have the same problem, I can not flash the firmware. The board is new, unused. I bought it yesterday. I want to rule out this failure. please help. Thank you.. ",
    "yangbo1979": "I'v got the same problem after I upgraded my usb-to-ttl(cp210x) drivers.\nand I solved this problem by change my usb-to-ttl device,I'v connected 5v,gnd,tx,rx to nodemcu dev board directly and I can download/upload firmware without problem.\nhere is my device without problem:\nhttps://item.taobao.com/item.htm?spm=a1z09.2.0.0.37ca0ed35nLF2r&id=544540189717&_u=qk521h2f93\nfyi.. ",
    "vincegre": "@projectgus Thanks for your help and yep first one I was able to flash it without using Flash and Rst buttons !!\nIt looks like I have a defective one :( I tried in same way with an other board and it worked directly !!\nHolding Flash button with running esptool or Flash + Rst as you described, none of them worked :(\nI tried also to flash it with NodeMCU tool but same it doesn't succeed to connect !. @projectgus  If I hold flash button while tapping RST, I get a string of garbage characters (different each time) displayed in terminal !\nFor trying to run esptool while holding flash and/or tapping rst button, no luck at all :(\nI guess I can throw away that module at recycle bin no ?. @projectgus thanks for your answer but unhappy I have no program compatible with that terminal speed to check it out :( Minicom doesn't handle that speed and looks it's pretty tricky to get that speed on Linux system :( Any suggestions how to do that easily in Linux (Ubuntu 16.04 by the way) ? ;). @projectgus  thanks for info ;) was not aware of that :(\nHere is result I get when I push rst button on module:\n```\nvincen@Fixe-Ubuntu:~$ miniterm.py --raw /dev/ttyUSB0 74880\n--- Miniterm on /dev/ttyUSB0  74880,8,N,1 ---\n--- Quit: Ctrl+] | Menu: Ctrl+T | Help: Ctrl+T followed by Ctrl+H ---\nets Jan  8 2013,rst cause:2, boot mode:(3,6)\nload 0x40100000, len 29796, room 16 \ntail 4\nchksum 0xf7\nload 0x3ffe8000, len 2268, room 4 \ntail 8\nchksum 0x5d\nload 0x3ffe88dc, len 8, room 0 \ntail 8\nchksum 0x60\ncsum 0x60\n\ufffd\ufffd+\n   \u056d\ufffd-+PUUP\u0015\ufffdTT\n\u04c0\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\n```\nDoes it make any sense ?. @projectgus If I push and hold down flash button while pushing rst, I get only that:\nets Jan  8 2013,rst cause:2, boot mode:(1,6). @projectgus some news after my last test ?\u00a0or trash that module ?? Thanks. @projectgus Thanks for explanation and yep I guess it's better to trash it directly instead of trying to fix such thing ;). @projectgus sorry for late answer as I was away and had no time to check on that so you were right and I could flash it successfully with that command:\nesptool.py -p /dev/ttyUSB0 write_flash --flash_size 16m 0x0 ESPEasy_v2.0.0-dev11_test_1024.bin\nThanks :+1: . ",
    "jaanh": "Worked around the problem by adding the following on line 316:\nif args.new_value not in [32, 33]:. Has the issue been fixed?. ",
    "Navis-Raven": "PS: I'm talking about this blinky example available here, not another one: https://github.com/pfalcon/esp-open-sdk/tree/master/examples. ",
    "abhayghatpande": "@projectgus \nwe are facing a similar md5 issue on esp32devkit. is this an esp32 issue or is it specific to the board? could you give me some references for the VCC problem and how to resolve it? we only had this problem recently appear after being able to flash several tens of times before.\n$ esptool.py flash_id\nesptool.py v2.5.1\nFound 3 serial ports\nSerial port /dev/cu.SLAB_USBtoUART\nConnecting........_\nDetecting chip type... ESP32\nChip is ESP32D0WDQ6 (revision 0)\nFeatures: WiFi, BT, Dual Core\nMAC: 30:ae:a4:00:38:9c\nUploading stub...\nRunning stub...\nStub running...\nManufacturer: ef\nDevice: 4018\nDetected flash size: 16MB\nHard resetting via RTS pin...\n. @projectgus \nUnfortunately, I did not make a note of that. But if you ask me to take a best guess, I would say that the md5 was different each time. The error has automagically disappeared now. It is annoying not to be able to reproduce it.\nIf you don't mind me asking, what is the significance of getting the same versus different md5?. Thank you for that explanation, @projectgus. Appreciate it.\nThe one thing we did notice was that the chip appeared not to be erasing the flash, but moved directly to writing it, even though we explicitly set it to do so.\nWill definitely keep an eye out and report on the md5 value if the issue occurs again.. ",
    "barbiani": "I am having the same problem on WSL Kali Linux. When the MD5 check starts failing I have to disconnect the esp-wrover-kit and close/reopen the WSL window.\nStarting over gives me a few more successful flashes.\nUbuntu on Oracle VM never had any troubles.. ",
    "mallareddy63": "Thanks dude @projectgus , its working\nmy board: nodemcu 32s\nwindows: 10\nArduino: latest one \ninitially i upload the code to the board and hold down boot button  while esptool.py is \"Connecting...\"\nmy emulator was able to send parameters through rf\n. Bro initially I click upload option in Arduino IDE to upload the code to the board ,\nMake sure you select the correct board and port\nOnce the ide displays text \"connecting ....\" I just press and hold the \"BOOT \" button for some time until connection is finished and it displays \"downloading.........\" At that time I release the button \nAfter that it displays some text and in the last it displays \"Hard resetting\" , then I open serial monitor and found it working \nIf possible send me code bro I will try it . press BOOT button or EN button on esp32s when it shows connecting on\nArduino compiler\nOn Tue, Mar 19, 2019 at 8:09 AM wang notifications@github.com wrote:\n\n\u6211\u7528\u7684ESP32-S\u88f8\u677f\u5916\u63a5USB TTL\uff08PL2303\uff09\uff0c\u5c1d\u8bd5\u5f88\u591a\u65b9\u6cd5\u4ecd\u7136\u662f\u201cconnecting ....\u201d\u3002\u540e\u66f4\u6362USB\nTTL\uff08PL2303\uff09\u540e\u70e7\u5199\u6b63\u5e38\u3002\u6211\u662f\u5916\u63a5\u76843.3\u7535\u6e90\u53ef\u80fd\u662f\u67d0\u79cd\u60c5\u51b5\u5c06USB TTL\uff08PL2303\uff09\u70e7\u6bc1\u4e86\n\u5bfc\u81f4\u65e0\u6cd5\u8fde\u63a5\u3002\u6211\u89c9\u5f97\u5982\u679c\u5f00\u53d1\u7248\u9047\u5230\u6b64\u60c5\u51b5\u53ef\u5c1d\u8bd5\u76f4\u63a5\u4f7f\u7528USB TTL \u8fdb\u884c\u70e7\u5f55\u3002\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/espressif/esptool/issues/226#issuecomment-474175714,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AT_qAVdHzl0okMPn21-EWHEy6kj7xQ_Zks5vYE3ggaJpZM4O_58S\n.\n\n\n-- \nMallaReddy.Mettu\n. ",
    "MikeA1s": "For me it was a power issue, I am using a EzSBC esp32 dev board. Interesting it happens when I upload a sketch that requires a lot of pin usage. The way I \"fixed\" the situation was to apply 3v  2amp external supply to the 3v pin on esp32, plus an external ftdi to rx/tx, with common ground. \n***Applying 5v 2amps to Vin on module did not solve the problem.. When I had the error and after investigating and researching I came to conclusion that it was a power supply issue. When there are multiple events taking place on esp32 plus WiFi on and maybe Bluetooth, even if you have disconnected all the peripheries, the sketch is still running on esp32, so when you connect esp32 to your computer and try to upload new sketch there is not enough power from computer to place esp32 into flash mode. Plus, I feel the 5v step down is weak on some esp32 jigs, so I went straight for 3.3v to esp32, plus RX/TX through ftdi (of course 3.3v on ftdi).  That was it for me.. You say fix it, but what have you tried and what are you trying to do we don't know. Have you done a google search and read what is written above? There is a lot of information already just on this page alone.. ",
    "ben34": "I got very often the same kind of issue when uploading code with ESP32 left on breadboard. Upload works fine when removing the ESP32 from breadboad during the upload operation. ",
    "KargJonas": "For me spamming the flash and boot buttons worked out. Not at first but you gotta try it a few times .... ",
    "nageshu": "hey @projectgus \nActually I am facing same problem. sorry to open this again i found your guidance useful.\nI am using ESP32 loRa board which have inbuilt loRa module sx1278.\nBefore showing the error i have interfaced accelerometer and rtc ds1307. but then after that i am getting error that unable to connect esp32 and timeout waiting for packet error. i have tried all method you discribed but it is not working.\ncan you please tell what is exact reason behind this error?\nor any other method by which can get rid of this error.\nPlease help !!\nthanks in advance!!!!!!. ",
    "FrancescoSaverioZuppichini": "I have the same error, somebody fix it?. ",
    "yasheena": "I solved this problem by attaching a 100nF capacitor  from EN to GND.\n(I use a pure ESP-WROOM-32 with an FTDI board and the 2 transistors between DTR/RTS/EN/GPIO0).\n. ",
    "xyybob": "The cap trick also worked for me! Keeping EN low while GPIO0 is toggled seems to do the trick. )I just grabbed the first cap that came to hand - it's a 22uF)\nI'm probably misguided here but it appears the timing of esptool.py tries to accomodate bugs in earlier versions of Esp32 (I'm using v1.1 here, NodeMCU: Esp-32S with eclipse(sloeber) and esptool.py on Windows10) - I would attempt a code change but I'm not clever enough. ",
    "mrfaptastic": "The only way I have managed to get a LOLIN D32 to flash in Arduino using windows, is by jumpering D0 to GND (Ground) just before I click 'upload'.\nI then need to remove this jumpering in order to test the sketch. Very annoying.\nhttps://github.com/espressif/esptool/wiki/ESP32-Boot-Mode-Selection#select-bootloader-mode. Hi,\nThis problem also occurs when using a LOLIN D32. Manually shorting D0 to GND resolves it, but I thought the boot mode could be changed via ESPtool?\n```\nArchiving built core (caching) in: C:\\Users\\Test\\AppData\\Local\\Temp\\arduino_cache_186141\\core\\core_esp32_esp32_d32_PartitionScheme_default,FlashFreq_80,UploadSpeed_115200,DebugLevel_debug_50838b78f9e89f0aaa3fdf6739a756ca.a\nSketch uses 177136 bytes (13%) of program storage space. Maximum is 1310720 bytes.\nGlobal variables use 13884 bytes (4%) of dynamic memory, leaving 313796 bytes for local variables. Maximum is 327680 bytes.\nC:\\Users\\Test\\AppData\\Local\\Arduino15\\packages\\esp32\\tools\\esptool\\2.3.1/esptool.exe --chip esp32 --port COM5 --baud 115200 --before default_reset --after hard_reset write_flash -z --flash_mode dio --flash_freq 80m --flash_size detect 0xe000 C:\\Users\\Test\\AppData\\Local\\Arduino15\\packages\\esp32\\hardware\\esp32\\1.0.0/tools/partitions/boot_app0.bin 0x1000 C:\\Users\\Test\\AppData\\Local\\Arduino15\\packages\\esp32\\hardware\\esp32\\1.0.0/tools/sdk/bin/bootloader_dio_80m.bin 0x10000 C:\\Users\\ANONYM~1\\AppData\\Local\\Temp\\arduino_build_769288/Blink.ino.bin 0x8000 C:\\Users\\Test\\AppData\\Local\\Temp\\arduino_build_769288/Blink.ino.partitions.bin \nesptool.py v2.3.1\nConnecting........_..............._..............._..........__....._____\nA fatal error occurred: Failed to connect to ESP32: Timed out waiting for packet header\nA fatal error occurred: Failed to connect to ESP32: Timed out waiting for packet header\n```\n. ",
    "aledaluz": "Hold Boot for a seconds, when appear Connecting.....____.....,\nIt works!. ",
    "andro78": "Thanks a lot.\nHold Boot button!!\n. ",
    "briangerez": "@MikeA1s Excellent contribution!\nI disconnected some sensors that were consuming energy. Then the code was loaded without problems!. ",
    "RussBarr": "I did not have this issue until I downloaded the latest version. I an using the ESP32THING from sparkfun. Sometime it connects without holding down the BOOT LOAD button (GPIO0). Other time I must press the BOOT button during the connect. This happens on three different computers running win10 and win7. I am able to build and load BLINK but when I try to run my old code that uses RTOS, I2S, DMA, RMT, and interupts it builds and loads but does not run. The old version from a year ago works fine.\nws2812_1024FFT_real_imag_OK.zip\n. ",
    "richard-ubi": "\n\u563f@projectgus\n\u5176\u5b9e\u6211\u9762\u4e34\u540c\u6837\u7684\u95ee\u9898\u3002\u5f88\u62b1\u6b49\u518d\u6b21\u6253\u5f00\u6b64\u5904\uff0c\u6211\u53d1\u73b0\u60a8\u7684\u6307\u5bfc\u5f88\u6709\u7528\u3002\n\u6211\u6b63\u5728\u4f7f\u7528\u5185\u7f6eloRa\u6a21\u5757sx1278\u7684ESP32 loRa\u677f\u3002\n\u5728\u663e\u793a\u9519\u8bef\u4e4b\u524d\uff0c\u6211\u5df2\u7ecf\u8fde\u63a5\u4e86\u52a0\u901f\u5ea6\u8ba1\u548crtc ds1307\u3002\u4f46\u4e4b\u540e\u6211\u5f97\u5230\u9519\u8bef\uff0c\u65e0\u6cd5\u8fde\u63a5esp32\u548c\u8d85\u65f6\u7b49\u5f85\u6570\u636e\u5305\u9519\u8bef\u3002\u6211\u5df2\u7ecf\u5c1d\u8bd5\u4e86\u4f60\u63cf\u8ff0\u7684\u6240\u6709\u65b9\u6cd5\uff0c\u4f46\u5b83\u6ca1\u6709\u7528\u3002\n\u4f60\u80fd\u544a\u8bc9\u6211\u8fd9\u4e2a\u9519\u8bef\u80cc\u540e\u7684\u786e\u5207\u539f\u56e0\u5417\uff1f\n\u6216\u4efb\u4f55\u5176\u4ed6\u65b9\u6cd5\u53ef\u4ee5\u6446\u8131\u8fd9\u4e2a\u9519\u8bef\u3002\n\u8bf7\u5e2e\u5fd9 \uff01\uff01\n\u63d0\u524d\u81f4\u8c22\uff01\uff01\uff01\uff01\uff01\uff01\n\nIn fact, I would like to ask blind where can live ESP32 loRa board which have inbuilt loRa module sx1278.. ",
    "Alvin1Zhang": "\u60a8\u73b0\u5728\u7528\u54ea\u4e2a \bGPIO  \u7ba1\u811a\u8fde\u63a5\u52a0\u901f\u5ea6\u8ba1\u548c RTC \u5462\uff1fESP32 \u6709\u4e00\u4e9b Strapping \u7ba1\u811a\u914d\u7f6e\uff0c\u8be6\u60c5\u8bf7\u67e5\u770b \u300aESP32 \u6280\u672f\u89c4\u683c\u4e66\u300b \u4e2d\u7684 2.4 \u7ae0\u8282\u300aStrapping \u7ba1\u811a\u300b\uff0c\u60a8\u4e5f\u53ef\u53c2\u8003\u5982\u4e0b\u94fe\u63a5 https://github.com/espressif/esptool/wiki/ESP32-Boot-Mode-Selection#select-bootloader-mode \u3002\u8c22\u8c22\u3002. ",
    "dialvessilva": "Solu\u00e7\u00e3o do problemas de todos... ou melhor para mim funcionou e muito\nhttps://randomnerdtutorials.com/solved-failed-to-connect-to-esp32-timed-out-waiting-for-packet-header/?unapproved=357864&moderation-hash=65b6814463675f72f8fe34a0a4da3cec#comment-357864\nAbra\u00e7o a todos\n. ",
    "sravanth005": "Hi all,\n**the Os i use UBUNTU 16.04 in which,i work on a project esp32-cam (https://robotzero.one/esp32-camera-module/#comment-3073) refer the link.\ni followed the link above though it scripted foe windows OS for some commands i went through (https://docs.espressif.com/projects/esp-idf/en/latest/get-started/linux-setup.html#) link and i installed.but after flashing at the end i get error like this\nmy board:ESP32-cam (AI thinker board)\nOS: UBUNTU 16.04\nconnector(board to laptop): CP2102\nfor more information about the board refer the first link**\nGenerating libtcpip_adapter.a.sections_info\nGenerating libulp.a.sections_info\nGenerating libunity.a.sections_info\nGenerating libvfs.a.sections_info\nGenerating libwear_levelling.a.sections_info\nGenerating libwifi_provisioning.a.sections_info\nGenerating libwpa_supplicant.a.sections_info\nGenerating libxtensa-debug-module.a.sections_info\nGenerating esp32.common.ld\nLD build/camera_web_server.elf\nesptool.py v2.6\nFlashing binaries to serial port /dev/ttyUSB0 (app at offset 0x10000)...\nesptool.py v2.6\nSerial port /dev/ttyUSB0\nConnecting......................................_____\nA fatal error occurred: Failed to connect to ESP32: Timed out waiting for packet header\n/home/admin-unizen/esp/esp-idf/components/esptool_py/Makefile.projbuild:64: recipe for target 'flash' failed\nmake: *** [flash] Error 2\ni dont know how to solve.can you explain me fully why this happening and will you say the commands from first to last to solve this issue****\nThanks in advance. ",
    "SecturityException": "\u6211\u7528\u7684ESP32-S\u88f8\u677f\u5916\u63a5USB TTL\uff08PL2303\uff09\uff0c\u5c1d\u8bd5\u5f88\u591a\u65b9\u6cd5\u4ecd\u7136\u662f\u201cconnecting ....\u201d\u3002\u540e\u66f4\u6362USB TTL\uff08PL2303\uff09\u540e\u70e7\u5199\u6b63\u5e38\u3002\u6211\u662f\u5916\u63a5\u76843.3\u7535\u6e90\u53ef\u80fd\u662f\u67d0\u79cd\u60c5\u51b5\u5c06USB TTL\uff08PL2303\uff09\u70e7\u6bc1\u4e86 \u5bfc\u81f4\u65e0\u6cd5\u8fde\u63a5\u3002\u6211\u89c9\u5f97\u5982\u679c\u5f00\u53d1\u7248\u9047\u5230\u6b64\u60c5\u51b5\u53ef\u5c1d\u8bd5\u76f4\u63a5\u4f7f\u7528USB TTL \u8fdb\u884c\u70e7\u5f55\u3002. ",
    "josep112": "Hi, projectgus\nThanks for the help, it did not work.\nparallel -d ' ' --group esptool.py --port '{}' write_flash 0x00000 /usr/src/serial/Blink.ino.bin ::: /dev/ttyUSB0 /dev/ttyUSB1\nparallel: Input is read from the terminal. Only experts do this on purpose. Press CTRL-D to exit.. parallel --version\nWARNING: YOU ARE USING --tollef. USE --gnu FOR GNU PARALLEL\nGNU parallel 20120422\nCopyright (C) 2007,2008,2009,2010,2011,2012 Ole Tange and Free Software Foundation, Inc.\nMy version seems to be old. ",
    "Cabalist": "Oops.  I had meant to add that to tests_require instead of install_requires.    I'm curious on what the catch is. I've recently been diving more into packaging and it can be hard to isolate edge cases unless you run into them face first.  \ud83d\ude03 \nUnrelated but is there a reason that pyaes and ecdsa are bundled AND listed as dependencies?  Seems like it would be possible to have multiple versions installed in an environment.. Deps:\nVery curious here.  I wonder if it is Setuptools version dependent.  Or possibly interface dependent.  It's only setuptools' built-in test command that does anything explicitly with the test_requires setup argument. (i.e. python setup.py test)\nBundling:\nMakes sense!\nI'd be curious about the strategy to depreciate that.  Maybe make a branch for PyPI without those two packages and then set it to master after some time and warnings.  Afterwards maintain a branch specifically for cloning to see how many people actually do that versus pip install?  \n. I didn't realize they were upstream.  Oops!  \nThe changes to upstream have been reverted and the flake8-import-order has been added.  :). No worries.  Thanks for accepting.  :). ",
    "Ivoz": "How does ESP-IDF obtain pySerial?. ",
    "plerup": "Hi,\nSeems like there was something wrong with my FTDI-chip\nSorry about this :blush: \nBR\n/Peter\n. ",
    "Akriti-S": "Hi, I am using Arduino 1.8.4. I am using nodemcu 1.0 ESP-12E. I upload the code by using esptool.py generally. ",
    "lordcrc": "I've now successfully flashed my Lolin32 Lite, turns out the main culprit was the baud rate. After reducing it to 115200 it worked like a charm. \nHowever, I'm still confused by the above discrepancy between code and documentation.. ",
    "me21": "Although something similar can be implemented using https://freevirtualserialports.com/ (it can create virtual serial port connected to named pipe), but it requires another piece of software to be installed.\nBut it can be used as temporary workaround.. I haven't tested yet, but when I have, I'll let you know.. Now I can confirm it works with RFC2217 ports with small PR #251.. Clone repo locally and check out the corresponding tag. You'll see it in git log.. ",
    "IIM-Slide": "Did you find your answer @Avi-TelnT ? I am curioous. Thank you for the answers @projectgus. One precision though: does these solutions support flash encryption and Secure Boot? The way I understand these features, they need hardware to do so. \nThe doc I found (and ggl translated) implies that there is a way to program several boards in parallel with encryption, am I correct?. So if I understand correctly I have two options which allow me to\n1) fully encrypt the firmware with simultaneous flashing but is time-expensive (on-device encryption) and I have no way of re-flashing them if something went wrong. \n2) re-flash with full encryption but  is extremely time-expensive (per-device programming) or extremely unsecure \nThis is a real dilemma...  \nThe option I wish I had is to have a reflashable, uniquely fully-encrypted firmware that I could program in parallel. Even better would be to be able to program it using the Espressif Download tool. \nI guess sharing the encryption key with 10 devices (meaning I would change the key every time the download tool is done) is acceptable. \nDo you know if this is something doable? . Thank you @projectgus for the detailed answer. \nI'll stop my questions here because they will be off-topic. \nWill definitely open a feature request soon, very interested. \n. ",
    "Avi-TelnT": "No. I have no answer. \nCan you help @IIM-Slide ?. Thank you, Mr. Angus Gratton, for the detailed replay. . ",
    "OtherCrashOverride": "I tested 16, 17,  19, and 33.  All resulted in the internal flash being used.. I am attempting to divorce the flashing of arbitrary data from the build system.  This functionality needs to be available in the absence of any source code or build tools or dependencies thereof.\nI do not believe this concept is aligned with the goals of espressif/esp-idf#612.. A real world example is the case of a SPIFFS filesystem partition.  In the case where only the filesystem is to be updated, the offset where it resides needs to found and may vary across different builds and/or app revisions.  It is not possible to OTA update in all environments where an ESP32 may be deployed.. ",
    "Buckler89": "Hi,\nI'm using esptool.py v2.2.1.\nI have the same problem. Moreover not only the CS pin appears to be ignored but also all other except for the Q PIN. My external 16MB flash is connected to \nCLK = GPIO 6\nQ = GPIO 7\nD = GPIO 8\nHD = GPIO 9\nCS = GPIO 5 (11 is the default 4MB flash)\nI have tried change all the pin ( also randomly) and if I keep the Q  = 7 I get the output related to the standard 4MB flash: \n```\nesptool.py --port /dev/ttyUSB1 flash_id --spi-connection ,7,,,\nDetecting chip type... ESP32\nChip is ESP32D0WDQ6 (revision 1)\nUploading stub...\nRunning stub...\nStub running...\nConfiguring SPI flash mode...\nManufacturer: c8\nDevice: 4016\nDetected flash size: 4MB\n```\nwhile unknow data if Q != 7 ( independently of the value of the other pins):\n```\nesptool.py --port /dev/ttyUSB1 flash_id --spi-connection ,,,,\nDetecting chip type... ESP32\nChip is ESP32D0WDQ6 (revision 1)\nUploading stub...\nRunning stub...\nStub running...\nConfiguring SPI flash mode...\nManufacturer: ff\nDevice: ffff\nDetected flash size: Unknown\n```\ndoes anyone have any updates on this?\n. @negativekelvin What do you mean?. ",
    "vccground": "Doesn't work for me too, I tried 6,7,8,9,23 but the tool ignores and uses the internal flash.\nIs this fixed, any updates?. ",
    "mribble": "After digging through the source for esptool.py I found the issue.  By default this python script resets the esp8266 over the ftdi cable.  This obviously isn't going to work when going through the emulated SerialUSB driver since the reset wires don't exist and in fact what happens there causes the serial port to stop working.\nI can fix my problem by adding --before no_reset --after no_reset\n. ",
    "loadedtech": "I'm having problems with one of my devboards -- most work fine but after one flash it now doesn't work -- keep getting a timeout.\nhere's the trace using the branch above from the command ./esptool.py --port /dev/cu.wchusbserial1450 erase_flash\n\nTRACE +0.095 Read 1 bytes: b'\\xc0'\nTRACE +0.000 Read 11 bytes: b'\\x01\\x07\\x02\\x00\\x00\\x00;\\x86\\x00\\x00\\xc0'\nTRACE +0.000 Full packet: b'\\x01\\x07\\x02\\x00\\x00\\x00;\\x86\\x00\\x00'\nRunning stub...\nTRACE +0.000 command op=0x06 data len=8 wait_response=1 timeout=3.000 data=b'\\x00\\x00\\x00\\x00\\x04\\x00\\x10@'\nTRACE +0.000 Write 18 bytes: b'\\xc0\\x00\\x06\\x08\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x04\\x00\\x10@\\xc0'\nTRACE +0.027 Read 1 bytes: b'\\xc0'\nTRACE +0.000 Read 17 bytes: b'\\x01\\x06\\x02\\x00\\x00\\x00;\\x86\\x00\\x00\\xc0\\xc0OHAI\\xc0'\nTRACE +0.000 Full packet: b'\\x01\\x06\\x02\\x00\\x00\\x00;\\x86\\x00\\x00'\nTRACE +0.000 Full packet: b'OHAI'\nStub running...\nErasing flash (this may take a while)...\nTRACE +0.000 command op=0xd0 data len=0 wait_response=1 timeout=120.000 data=b''\nTRACE +0.000 Write 10 bytes: b'\\xc0\\x00\\xd0\\x00\\x00\\x00\\x00\\x00\\x00\\xc0'\nTRACE +0.024 Read 1 bytes: b'\\xc0'\nTRACE +0.000 Read 8 bytes: b'\\x01\\xd0\\x00\\x00\\x00\\x00\\x00\\x00'\n^@TRACE +120.301 Timed out waiting for packet content\nA fatal error occurred: Timed out waiting for packet content\n\nAny tips appreciated. ",
    "dehart": "I've just tried master on MacOS got same result as @loadedtech\npython esptool.py --trace --baud 115200 -p /dev/cu.wchusbserial1420 erase_flash\nOutput\n```\n......\nTRACE +0.000 Full packet: 'OHAI'\nStub running...\nErasing flash (this may take a while)...\nTRACE +0.000 command op=0xd0 data len=0 wait_response=1 timeout=120.000 data=''\nTRACE +0.000 Write 10 bytes: '\\xc0\\x00\\xd0\\x00\\x00\\x00\\x00\\x00\\x00\\xc0'\nTRACE +0.024 Read 1 bytes: '\\xc0'\nTRACE +0.000 Read 8 bytes: '\\x01\\xd0\\x00\\x00\\x00\\x00\\x00\\x00'\nTRACE +120.007 Timed out waiting for packet content\nA fatal error occurred: Timed out waiting for packet content\nLed is no longer blinking when at \"Read 8 bytes\".\nNot sure if this is normal.. - The same command has been executed multiple times. I've tried raising the CHIP_ERASE_TIMEOUT timeout to 520. The outcome is the same\n- Lolin v3 NodeMcu. ESP8266\n- flash_id output:\nConnecting....\nDetecting chip type... ESP8266\nChip is ESP8266EX\nFeatures: WiFi\nUploading stub...\nRunning stub...\nStub running...\nManufacturer: ff\nDevice: ffff\nDetected flash size: Unknown\nHard resetting via RTS pin...\nI've just read your last comment here: https://github.com/espressif/esptool/issues/120\nI think my only option is to replace it.. I should add that `esptool.py read_flash` does compleet.\nAnd `esptool.py flash_id` sometimes outputs\nManufacturer: 00\nDevice: 0000\n```\nAfter power on and off a few times pressing the flash and reset buttons,\nI am going to try soldering but I've ordered another board because this usualy doesn't end well for me \ud83e\udd15 \nEDIT: I've opened up the metal shield... and damaged it. I found that there were 2 bridged pins on the ESP8266 which I would be unable to solder anyway. The flash chip looks soldered Ok\n\nAnyway it wasn't a software issue. Thanks for your input Angus. read_flash got nothing but 0x00\nI've ordered some liquid flux because I wanted to find out. \nIf I can unbridge it I'll try to flash again. Fingers crossed \ud83e\udd10 \n. Worked like a charm, Thanks again @projectgus \n\npython esptool.py -p /dev/cu.wchusbserial1420 -b 115200 erase_flash\nesptool.py v2.3.2-dev\nConnecting....\nDetecting chip type... ESP8266\nChip is ESP8266EX\nFeatures: WiFi\nUploading stub...\nRunning stub...\nStub running...\nErasing flash (this may take a while)...\nChip erase completed successfully in 9.7s\nHard resetting via RTS pin...\n. ",
    "tehKaiN": "Hi there,\nI've expanded some info about serial protocol on the wiki. I'm almost ready to implement everything, but my logic analyzer tells me that after writing to RAM I'm receiving kinda strange packet from ESP. Does it have some meaning or should I just ignore it?\n```\ntx:\n0xC0\n0x00\n0x06\n0x08 0x00\n0x00 0x00 0x00 0x00\n0x00 0x00 0x00 0x00 0x60 0x05 0x09 0x40\n0xC0\nrx:\n0xC0\n0x01\n0x06\n0x04 0x00\n0x00 0x00 0x00 0x00\n0x00 0x00 0x00 0x00\n0xC0\nrx:\n0xC0\n0x4F\n0x48\n0x41\n0x49\n0xC0\nAlso, in responses I get some problem understanding status/error code fields. I get response packets that have body and no status/error:\n0xC0\n0x01\n0x06\n0x04 0x00 <- body size 4\n0x00 0x00 0x00 0x00 <- value\n0x00 0x00 0x00 0x00 <- body, status/error missing\n0xC0\nAnd also packets with status/error but no body.\n0xC0\n0x01\n0x0A\n0x00 0x00 <- size 0, so no body\n0x40 0x00 0x00 0x80 <- value\n0x00 0x00 <- status/error\n0xC0\nSo I guess status/error only occurs when no body is present. Am I right? And then there is the MD5 checksum packet, which response doesn't apply to this rule, so I guess I'll have to hardcode it:\n0xC0\n0x01\n0x13\n0x00 0x00 <- size: 0\n0x00 0x00 0x00 0x00 <- value\n0x7D 0x99 0xD0 0xB3 0x48 0xF2 0xC8 0xD1 0xEC 0x9E 0xB4 0x0F 0x89 0x84 0x86 0x06 <- md5\n0x00 0x00 <-status/error\n0xC0\n```\nI'm using ESP-WROOM32. Nothing to sorry about. ;) I'd also keep OHAI, but I guess this should be documented somewhere. So on wiki I've added new paragraph called \"protocol flow\" and added info there. Also, there was no info that sync packet should be repeated until one gets response, so I've added that too.\nI guess that after my struggle, docs will be as complete as necessary to implement new solution from scratch. ;). I guess it's a good idea. My code is unfortunately closed source since it's for commercial project of my company and I really can't do anything about it. Also it's not that generic since it's tailored to run on one specific microcontroller.\nI've tried to leave as much clues as possible on esptool protocol wiki page, feel free to expand it if needed. Also, reading esptool's sources isn't that painful once you get used to python syntax.\nAlso, I'm going to use esp32 as part of my hobby projects so you can count me in for such rewrite, because having reasonably licensed open source tool written in C would be great.. ",
    "ygator": "@nkolban \nI have a simple C program I threw together to test my problem related to #250.\nIf you are interested in starting with it then I can make it available.. \nesp.zip\n. This was on both Windows 10 and Arch linux.  I was getting timeouts on the early stuff and was not able to get to the real stuff such as flashing.  Timeout on sync, detecting chip, stub, etc...  The board I have is a DOIT ESP32 DEVKIT V1.  I manually wrote a little vb6 serial port program and was following what the esptool was doing.  Other then having to send sync multiple times to get a response the other commands I tried worked fine every time.  So I figured the board is fine and it is something with the esptool.  Of course running it myself there was a lot of time between the commands and so I tried the sleep before the write and it worked great.\nBelow is a trace I still had.  Good sync, good UART_DATA_REG_ADDR read, timeout on efuse(3) read.  The failure on it is just the normal timeout waiting for a reply from a command.  Since the ESP32 never gets (or only partially gets) the command nothing is returned and hence the timeout.\nDetecting chip type...\nTRACE +0.001 command op=0x0a data len=4 wait_response=1 timeout=3.000 data=b'x\\x00\\x00'\nTRACE +0.000 Write 14 bytes: b'\\xc0\\x00\\n\\x04\\x00\\x00\\x00\\x00\\x00x\\x00\\x00\\xc0'\nTRACE +0.004 Read 1 bytes: b'\\xc0'\nTRACE +0.000 Read 13 bytes: b'\\x01\\n\\x04\\x00\\x00%\\x12\\x15\\x00\\x00\\x00\\x00\\xc0'\nTRACE +0.000 Full packet: b'\\x01\\n\\x04\\x00\\x00%\\x12\\x15\\x00\\x00\\x00\\x00'\n ESP32\nTRACE +0.000 command op=0x0a data len=4 wait_response=1 timeout=3.000 data=b'\\x0c\\xa0\\x01'\nTRACE +0.000 Write 14 bytes: b'\\xc0\\x00\\n\\x04\\x00\\x00\\x00\\x00\\x00\\x0c\\xa0\\x01\\xc0'\nTRACE +3.004 Timed out waiting for packet header\nA fatal error occurred: Timed out waiting for packet header. In regards to #247, my sleep is before the write with no change when reading and the driver is for CP210X, but on both Windows and Linux.  @rmokerone may want to revert back and try this fix to see if it works.. By the way the 0.25 sleep was just something I found worked.  I just did some more testing and it appears that sleeping for 0.01 is working as well.  Though, anything smaller and I am getting timeouts again or maybe the resolution of sleep is only 0.01.  I'll do some more testing tomorrow.. python esptool.py --trace --port /dev/ttyUSB0 --baud 115200 --before no_reset --after no_reset read_mac\nesptool.py v2.3-dev\nConnecting...TRACE +0.000 command op=0x08 data len=36 wait_response=1 timeout=0.100 data=b'\\x07\\x07\\x12 UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU'\nTRACE +0.000 Write 46 bytes: b'\\xc0\\x00\\x08$\\x00\\x00\\x00\\x00\\x00\\x07\\x07\\x12 UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU\\xc0'\nTRACE +0.015 Read 1 bytes: b'\\xc0'\nTRACE +0.000 Read 111 bytes: b'\\x01\\x08\\x04\\x00\\x07\\x07\\x12 \\x00\\x00\\x00\\x00\\xc0\\xc0\\x01\\x08\\x04\\x00\\x07\\x07\\x12 \\x00\\x00\\x00\\x00\\xc0\\xc0\\x01\\x08\\x04\\x00\\x07\\x07\\x12 \\x00\\x00\\x00\\x00\\xc0\\xc0\\x01\\x08\\x04\\x00\\x07\\x07\\x12 \\x00\\x00\\x00\\x00\\xc0\\xc0\\x01\\x08\\x04\\x00\\x07\\x07\\x12 \\x00\\x00\\x00\\x00\\xc0\\xc0\\x01\\x08\\x04\\x00\\x07\\x07\\x12 \\x00\\x00\\x00\\x00\\xc0\\xc0\\x01\\x08\\x04\\x00\\x07\\x07\\x12 \\x00\\x00\\x00\\x00\\xc0\\xc0\\x01\\x08\\x04\\x00\\x07\\x07\\x12 \\x00\\x00\\x00\\x00\\xc0'\nTRACE +0.000 Full packet: b'\\x01\\x08\\x04\\x00\\x07\\x07\\x12 \\x00\\x00\\x00\\x00'\nTRACE +0.000 Full packet: b'\\x01\\x08\\x04\\x00\\x07\\x07\\x12 \\x00\\x00\\x00\\x00'\nTRACE +0.000 Full packet: b'\\x01\\x08\\x04\\x00\\x07\\x07\\x12 \\x00\\x00\\x00\\x00'\nTRACE +0.000 Full packet: b'\\x01\\x08\\x04\\x00\\x07\\x07\\x12 \\x00\\x00\\x00\\x00'\nTRACE +0.000 Full packet: b'\\x01\\x08\\x04\\x00\\x07\\x07\\x12 \\x00\\x00\\x00\\x00'\nTRACE +0.000 Full packet: b'\\x01\\x08\\x04\\x00\\x07\\x07\\x12 \\x00\\x00\\x00\\x00'\nTRACE +0.000 Full packet: b'\\x01\\x08\\x04\\x00\\x07\\x07\\x12 \\x00\\x00\\x00\\x00'\nTRACE +0.000 Full packet: b'\\x01\\x08\\x04\\x00\\x07\\x07\\x12 \\x00\\x00\\x00\\x00'\nDetecting chip type...TRACE +0.000 command op=0x0a data len=4 wait_response=1 timeout=3.000 data=b'x\\x00\\x00'\nTRACE +0.000 Write 14 bytes: b'\\xc0\\x00\\n\\x04\\x00\\x00\\x00\\x00\\x00x\\x00\\x00\\xc0'\nTRACE +3.005 Timed out waiting for packet header\nA fatal error occurred: Timed out waiting for packet header\n. So as you can see the v2.3-dev still gives timeout.  The usb capture shows nothing returned for the UART_DATA_REG_ADDR register read command.. usb.zip\n. I purchased it on aliexpress back in June, but the store does not exist any more.  The product title was \"Official DOIT ESP32 Development Board WiFi+Bluetooth Ultra-Low Power Consumption Dual Core ESP-32 ESP-32S ESP 32 Similar ESP8266\".  I don't believe I had any timeout issues when I first was working with it.  I then flashed it and it was in place and any updates were flashed OTA.\nI tried several different usb cables with no changes.. No change.  Only thing that works is adding the sleep before the write.. A lot has changed for me.  I recently upgraded to Windows 10 Fall Creator Update.  I have gone through many versions of the Arduino IDE and each time I installed the ESP32 and ESP8266 boards.  When I was getting the timeouts I read about the older CP210X might be the issue so I updated those to the latest.  Also maybe python and/or python-serial changed during the past 6 months as well.\nMost of that is ruled out since it happens the same when just using esptool on arch.\nSo that would leave python and/or python-serial.\nOr of course it could just be my ESP32 board.  It would be interesting to know if all the other timeouts people are seeing (which are not related to not being in programming mode) can be remedied by the sleep.\n. \nIn a C program I got the wait time down to usleep(5000) = 5ms, 4ms is not enough.  The board works fine otherwise.\nDon't get hung up on Arch has I am just using it now since it is easier to test with.  I first encountered the problem on Windows 10 trying to flash from arduino ide.. The bottom has:\ndoit logo\nESP32 DEVKIT V1\nwww.doit.am\nI do have another board I just got in November, but there is something wrong with it as I cannot send to the board.  I can receive, but just cannot send to it.  So I think there is something wrong with the rx line.  I was able to get a credit for it.  Btw, it was the same seller as the other board.  The ESP32 writing is a little different.  It just has a bigger CE marking without the 1313 after it.\n. It does work, but unfortunately the other versions are working as well.  I'll try on my windows computer and let you know.. It worked, but unfortunately so did the older versions.  On Windows manually running the installed esptool.exe times out, but running esptool.py works.  Also running the esptool.py v.2.3dev works as well.  How do I get the .py version into an .exe version to try?. @me-no-dev  Thanks\n@projectgus It is working on windows.. You can try lowering the baud rate or if you look at #250 you might want to try adding time.sleep(0.01) right before the self._port.write(buf) in the write function.. See if #250 solves it.. @kaybee335 I was just wondering if you did #250 if you could get 460800 baud to work.. ",
    "ctshh": "Thank you!!\n$ esptool.py --port /dev/tty.wchusbserial1410 --baud 115200  write_flash --no-compress --flash_size=1MB 0 esp8266-20171101-v1.9.3.bin worked like a charm.\nSo, for future generations of knowledge seekers (do these issues stay \"up\", in anyway?), the above works for an Opensmart USB to ESP-01 adaptor.. The --no-stub option worked, too:\n```\n$ esptool.py --port=/dev/tty.wchusbserial1410 --baud 115200 --no-stub write_flash --flash_size=1MB 0 Downloads/esp8266-20171101-v1.9.3.bin\nesptool.py v2.1\nConnecting....\nDetecting chip type... ESP8266\nChip is ESP8266\nEnabling default SPI flash mode...\nConfiguring flash size...\nErasing flash...\nFlash params set to 0x0020\nTook 2.63s to erase flash block\nWrote 601088 bytes at 0x00000000 in 71.1 seconds (67.6 kbit/s)...\nLeaving...\nHard resetting...\n$\n```\n->\n```\nets_task(40100130, 3, 3fff837c, 4)\nOSError: [Errno 2] ENOENT\nMicroPython v1.9.3-8-g63826ac5c on 2017-11-01; ESP module with ESP8266\nType \"help()\" for more information.\n\n\n\n```\n\n\n\n\ud83d\udc4d \ud83d\ude04 \n. ",
    "KaranArora1": "Thank you so much! Ran into the same issue (and my ESP wouldn't flash) and after hours of googling and wasting time, this solved it. . ",
    "me-no-dev": "Compilation is done really easy. I have python2 installed on a windows machine, also the pyinstaller module. For easier command prompt, I use gitbash that is bundled with GitHub Desktop for Windows and have enabled in the right click menu. From then on I open the folder that contains esptool.py => rightclick =>open git bash in that folder => execute pyinstaller --distpath . -F esptool.py =>exe is in that folder :). @ivankravets my update build is stuck on PIO test. We have a \"new\" lib called \"libsodium\" but it looks like PIO's parser removes the \"lib\" prefix and causes \"/home/travis/.platformio/packages/toolchain-xtensa32/bin/../lib/gcc/xtensa-esp32-elf/5.2.0/../../../../xtensa-esp32-elf/bin/ld: cannot find -lsodium\"\nPing me when you fix it :). @ivankravets while I could have done many things to overcome this, all of them require adding a custom case for that lib on my end. Sure, it's a few lines, but I do think that it's something that should be fixed on your end, rather than mine. I don't think this case is so special, so you might benefit in the future for not having to deal with it again :). well, the lib name itself starts with \"lib\", which results in lib archive named \"liblib.a\" and \"-llib*\" in build. Why SCons stripped it, I do not know :). I'll disable PIO builds in Master so I can get the update in and get on with release. Let me know when we should try again and I will enable them (you can do too). it should not strip \"lib\" unless a file extension is provided. I will add the \"-l\", but IMHO this should be fixed in SCons. ",
    "mkingdom": "@ygator You are a star. Thanks. Reduced baud rate 230400 and problem solved. . ",
    "sysprogs": "Hi,\nNope, this happens without the \"--before\" argument. Maybe the stub closes and reopens the port at some point (resetting DTR under Cygwin and keeping it off under Linux)?\nIf this helps, you can get a full Cygwin environment where this can be reproduced here: http://sysprogs.com/files/gnutoolchains/esp32/esp32-gcc5.2.0-r7.exe. ",
    "earlt": "Thanks for clearing up the confusion and marking it an enhancement. That will ge GREAT!. ",
    "kaybee335": "I have exactly the same problem as described with 8266 FeatherWing but with an interesting twist.\nUnder Win10 with esptool running in a python3 virtual environment I can program the 8266 at the baud rate of 460800.\nThen again Win10 but under the Ubuntu Windows Subsystem for Linux and an identical python3 virtual environment it fails at 460800 when configuring the flash size but succeeds at 230400.\nSame laptop, same USB cable, same 8266 for both configurations. \nSo apparently it's not just the ESP board but also how you get to it that affects the issue.  There's something subtle on the timing there :-)\nBTW - Thank you for the Xmas present of making esptool.py python3 compatible.  Not sure when it happened but I just got rid of the last legacy python environment on my development PC!!!. @ygator - not sure if that suggestion was for me but just reducing the baud rate to 230400 works for me and I can just set that using the esptool command line flags.. > @kaybee335 I was just wondering if you did #250 if you could get 460800 baud to work.\nI'll give it a try when I get a chance.  I now have a working build configuration so I can get back to the micropython stuff I am actually supposed to be doing.  I don't use esptool all that often (only for updating micropython from pre-built binaries).  I use adafruit-ampy to upload my actual micropython code and it seems to run just fine at the default baud rate so my primary use case is using adafruit-ampy with just occasional use of esptool so I can live with the slower baud rate solution.\nI will get to it in the next couple of days and post results once I figure out how to do it without borking my existing working configuration (looks like the change is pretty straightforward so I'm not too worried).  \nI'll also check what happens with an ESP32 Feather Huzzah32 to see if it exhibits the same behaviour as the ESP8266 Feather Huzzah (with and without mod).. ",
    "ifitshow": "Hi @projectgus \n23:00:54 * Build of configuration Default for project FitShow *\nmake flash \nFlashing binaries to serial port /dev/tty.SLAB_USBtoUART (app at offset 0x10000)...\nesptool.py v2.2\nConnecting........_\nChip is ESP32D0WDQ6 (revision 1)\nUploading stub...\nRunning stub...\nStub running...\nChanging baud rate to 921600\nChanged.\nConfiguring flash size...\nCompressed 21424 bytes to 12580...\nWriting at 0x00001000... (100 %)\nA fatal error occurred: Failed to write compressed data to flash after seq 0 (result was C100)\nmake: *** [flash] Error 2\n23:01:00 Build Finished (took 5s.710ms)\n=====================================================================\n23:02:17 * Build of configuration Default for project FitShow *\nmake flash \nFlashing binaries to serial port /dev/tty.SLAB_USBtoUART (app at offset 0x10000)...\nesptool.py v2.1\nConnecting........__\nChip is ESP32D0WDQ6 (revision 1)\nUploading stub...\nRunning stub...\nStub running...\nChanging baud rate to 921600\nChanged.\nConfiguring flash size...\nCompressed 21424 bytes to 12580...\nWriting at 0x00001000... (100 %)\nWrote 21424 bytes (12580 compressed) at 0x00001000 in 0.2 seconds (effective 1128.5 kbit/s)...\nHash of data verified.\nCompressed 1230544 bytes to 715055...\nWriting at 0x000bc000... (100 %)\nWrote 1230544 bytes (715055 compressed) at 0x00010000 in 11.2 seconds (effective 879.5 kbit/s)...\nHash of data verified.\nCompressed 3072 bytes to 97...\nWriting at 0x00008000... (100 %)\nWrote 3072 bytes (97 compressed) at 0x00008000 in 0.0 seconds (effective 2980.0 kbit/s)...\nHash of data verified.\nLeaving...\nHard resetting...\n23:02:36 Build Finished (took 19s.234ms)\n. ",
    "baycom": "Same problem under MacOS X:\n`Flashing binaries to serial port /dev/tty.SLAB_USBtoUART (app at offset 0x30000)...\nesptool.py v2.2\nConnecting........___\nChip is ESP32D0WDQ6 (revision 1)\nUploading stub...\nRunning stub...\nStub running...\nChanging baud rate to 921600\nChanged.\nConfiguring flash size...\nAuto-detected Flash size: 4MB\nFlash params set to 0x0221\nCompressed 17536 bytes to 10504...\nWriting at 0x00001000... (100 %)\nA fatal error occurred: Failed to write compressed data to flash after seq 0 (result was C100)\nmake: *** [flash] Error 2`\nIt does not make any difference if data is compressed or not.\nReverting back to the old version by\ngit checkout 754f81aa35a76421f9726b74af7ca2d9313b6230 esptool.py\nfixes the problem.. ",
    "paulreimer": "I just tried the latest esp-idf master (2a10ffce5fd17761c420012bf1a53c84194febfb) and I have the same problem with my board.\nI am also using macOS, and I was also programming my board at 921600. It has a CP2102 but not the faster CP2102n. I also have a dev board using FT2232H at 2MBaud and the latest esptool update in esp-idf broke that also.\nI can confirm that the esptool v2.2.1 tag works for both boards!\n:shipit: \u2757\ufe0f . Also, incidentally my FT2232H is ready to go at 5Mbaud, but I've never been able to push that fast to the ESP32 (which I thought could do up to 4Mbaud?) 2Mbaud is the fastest I've been able to go. Is this a macOS issue possibly?. I guess I'm wondering why there was a macOS-specific regression (related to a high baud rate), and so I thought then, maybe you guys are all using Linux (or Windows)? So maybe that could explain some of my other serial issues I've encountered along the way, such as why I can't hit the baud rates I wanted to. macOS has been fine so far, but if I'm at a disadvantage e.g. from not having a linux box, then I'd like to know! At least it might be closer to your CI environment.\nSorry for the confusion, I don't think it is related to this specific issue. I put those things together in my head and it wasn't really clear.. ",
    "jnachtigall": "FWIW, same error when flashing with -b 9600. @projectgus, Thanks for the quick reply \ud83d\udc4d \nAdding fs 4MB I get:\n```\n$ esptool.py --port /dev/ttyUSB0 write_flash -fs 4MB 0x00000 ~/Downloads/nodemcu-master-4-modules-2017-12-27-22-09-15-integer.bin \nesptool.py v2.2\nConnecting....\nDetecting chip type... ESP8266\nChip is ESP8266EX\nUploading stub...\nRunning stub...\nStub running...\nConfiguring flash size...\nFlash params set to 0x0240\nCompressed 389344 bytes to 251389...\nWrote 389344 bytes (251389 compressed) at 0x00000000 in 22.3 seconds (effective 139.9 kbit/s)...\nFile  md5: 1d2be650c78635463e5d1fe9551121df\nFlash md5: d5a03ae3037154fe9bb5f6155f3974fe\nMD5 of 0xFF is 04139a8f075f846eaa8362e20893563e\nA fatal error occurred: MD5 of file does not match data in flash!\n```\n\nDo you get the same incorrect \"Flash md5: \" hash each time?\n\nYes, it is always the same.\n\nIf it's the same each time, this can indicate that some write protection bits are set. \n\nI don't know if related but I also tried to flash using the Arduino IDE (after following various tutorials on how to set it up for the NodeMCU). This also always ends up with the following in the console which seems strange as I have seen screenshots where this did not end up so quickly:\n```\nArchiving built core (caching) in: /tmp/arduino_cache_876296/core/core_esp8266_esp8266_nodemcuv2_CpuFrequency_80,UploadSpeed_115200,FlashSize_4M3M_12d2032a6629f55d6f3287f8fcf91765.a\nSketch uses 226617 bytes (21%) of program storage space. Maximum is 1044464 bytes.\nGlobal variables use 31824 bytes (38%) of dynamic memory, leaving 50096 bytes for local variables. Maximum is 81920 bytes.\nUploading 230768 bytes from /tmp/arduino_build_349017/TestEspApi.ino.bin to flash at 0x00000000\n................................................................................ [ 35% ]\n................................................................................ [ 70% ]\n..................................................................               [ 100% ]\n```\nSo this also looks kind of \"hanging\" at 100%. As said I do not know if this is related but maybe writing here also does not work, because even the simplest Hello-Worlds via Serial.println does not work.\n\nWhat is the output of esptool.py read_flash_status --bytes 1?\n\n$ esptool.py read_flash_status --bytes 1\nesptool.py v2.2\nConnecting....\nDetecting chip type... ESP8266\nChip is ESP8266EX\nUploading stub...\nRunning stub...\nStub running...\nStatus value: 0x0000\nHard resetting...\n. Uh, sorry, I might have misunderstood your question about the same incorrect \"Flash md5: \" hash each time. It is the same incorrect Flash md5 for the same image file. However, it is different if the image file is different. For instance, for the 7-module flash image it is Flash md5: b3c0b4a6c6a4253b3ea94a506b2248c7 whereas it was Flash md5: d5a03ae3037154fe9bb5f6155f3974fe for the 4-modules flash image from above.\nSee here:\n```\n$ esptool.py --port /dev/ttyUSB0 write_flash 0x00000 ~/Downloads/nodemcu-master-7-modules-2017-12-27-21-32-40-float.bin esptool.py v2.2\nConnecting....\nDetecting chip type... ESP8266\nChip is ESP8266EX\nUploading stub...\nRunning stub...\nStub running...\nConfiguring flash size...\nWarning: Could not auto-detect Flash size (FlashID=0x4a25bf, SizeID=0x4a), defaulting to 4MB\nFlash params set to 0x0240\nCompressed 415552 bytes to 267685...\nWrote 415552 bytes (267685 compressed) at 0x00000000 in 23.7 seconds (effective 140.1 kbit/s)...\nFile  md5: 689366eca7ddf796aba779d732beda0f\nFlash md5: b3c0b4a6c6a4253b3ea94a506b2248c7\nMD5 of 0xFF is fe640e2d5882be7a50cde1238b6da159\n```\nAnyway, I've ordered a NodeMCU board from another vendor on amazon now, hopefully this will work. \nBut let me know if I can add any other info here or should any other test.. Thanks for the follow-up. The new board I ordered works flawlessly. Hence, I am closing since there's nothing actionable for esptool that could be done as far as I see it.\nThanks again very much for the answers and help. Very much appreciated!. ",
    "karenYerevan": "Thank you for attention\n\n. ohhhh\ni get this ((((\n\n. sometimes i have error like this \nA fatal error occurred: Invalid head of packet ('\\x01'). Unfortunately there is no line Read,\nThere is only this lines is repeat many time \n\n_TRACE +0.063 command op=0x08 data len=36 wait_response=1 timeout=0.100 data='\\x07\\x07\\x12 UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU'\nTRACE +0.000 Write 46 bytes: '\\xc0\\x00\\x08$\\x00\\x00\\x00\\x00\\x00\\x07\\x07\\x12 UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU\\xc0'\nTRACE +0.109 Timed out waiting for packet header. now i see Read lines\n\n\n. bound doesn't work for me ((((\nwhich usb serial you advice ?. ",
    "nikyc": "Hello\nIt looks like I have exactly the same problem. I'm using a self-made board with ESP12-F and FT231X. The hardware is triple-checked and everything looks fine, this being the reason I write here.\nEvery time I use esptool, I get back the following:\n```\nPS H:> esptool.py -p COM5 -t  --chip esp8266 erase_flash\nesptool.py v2.2\nConnecting...TRACE +0.000 command op=0x08 data len=36 wait_response=1 timeout=0.100 data=b'\\x07\\x07\\x12 UUUUUUUUUUUUUUUUUUUUUUUUUUU\nTRACE +0.000 Write 46 bytes: b'\\xc0\\x00\\x08$\\x00\\x00\\x00\\x00\\x00\\x07\\x07\\x12 UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU\\xc0'\nTRACE +0.106 Timed out waiting for packet header\n.TRACE +0.055 command op=0x08 data len=36 wait_response=1 timeout=0.100 data=b'\\x07\\x07\\x12 UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU'\nTRACE +0.000 Write 46 bytes: b'\\xc0\\x00\\x08$\\x00\\x00\\x00\\x00\\x00\\x07\\x07\\x12 UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU\\xc0'\nTRACE +0.106 Timed out waiting for packet header\n.TRACE +0.053 command op=0x08 data len=36 wait_response=1 timeout=0.100 data=b'\\x07\\x07\\x12 UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU'\nTRACE +0.000 Write 46 bytes: b'\\xc0\\x00\\x08$\\x00\\x00\\x00\\x00\\x00\\x07\\x07\\x12 UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU\\xc0'\nTRACE +0.106 Timed out waiting for packet header\n_\nA fatal error occurred: Failed to connect to ESP8266: Timed out waiting for packet header\n```\nI saw the FT231X being used in a couple of projects, successfully. \n@karenYerevan did you had any results with another USB-to-Serial converter?. Thanks for your answer @projectgus !\nLet's start by saying that my board has the following schematic:\n\nI did what you asked for in the last message. I also changed both the ESP module and the FT231. The results were the same as before. Below you can see the trace output and some scope captures done on the RX and TX pins of the ESP module:\nGPIO0 high @ reset:\n```\nPS H:> esptool.py -p COM9 -t -b 74880 --before no_reset --after no_reset erase_flash\nesptool.py v2.2\nConnecting...TRACE +0.000 command op=0x08 data len=36 wait_response=1 timeout=0.100 data=b'\\x07\\x07\\x12 UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU'\nTRACE +0.000 Write 46 bytes: b'\\xc0\\x00\\x08$\\x00\\x00\\x00\\x00\\x00\\x07\\x07\\x12 UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU\\xc0'\nTRACE +0.010 Read 1 bytes: b'('\nTRACE +0.000 Read invalid data: b'('\nTRACE +0.001 Remaining data in serial buffer: b''\n.TRACE +0.052 command op=0x08 data len=36 wait_response=1 timeout=0.100 data=b'\\x07\\x07\\x12 UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU'\nTRACE +0.000 Write 46 bytes: b'\\xc0\\x00\\x08$\\x00\\x00\\x00\\x00\\x00\\x07\\x07\\x12 UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU\\xc0'\nTRACE +0.010 Read 1 bytes: b'('\nTRACE +0.001 Read invalid data: b'('\nTRACE +0.001 Remaining data in serial buffer: b''\n.TRACE +0.057 command op=0x08 data len=36 wait_response=1 timeout=0.100 data=b'\\x07\\x07\\x12 UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU'\nTRACE +0.000 Write 46 bytes: b'\\xc0\\x00\\x08$\\x00\\x00\\x00\\x00\\x00\\x07\\x07\\x12 UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU\\xc0'\nTRACE +0.010 Read 1 bytes: b'('\nTRACE +0.000 Read invalid data: b'('\nTRACE +0.006 Remaining data in serial buffer: b''\n.TRACE +0.054 command op=0x08 data len=36 wait_response=1 timeout=0.100 data=b'\\x07\\x07\\x12 UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU'\nTRACE +0.000 Write 46 bytes: b'\\xc0\\x00\\x08$\\x00\\x00\\x00\\x00\\x00\\x07\\x07\\x12 UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU\\xc0'\nTRACE +0.011 Read 1 bytes: b'('\nTRACE +0.000 Read invalid data: b'('\nTRACE +0.001 Remaining data in serial buffer: b''\n_\nA fatal error occurred: Failed to connect to Espressif device: Invalid head of packet (b'(')\n```\n\nGPIO low @ reset:\n```\nPS H:> esptool.py -p COM9 -t -b 74880 --before no_reset --after no_reset erase_flash\nesptool.py v2.2\nConnecting...TRACE +0.000 command op=0x08 data len=36 wait_response=1 timeout=0.100 data=b'\\x07\\x07\\x12 UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU'\nTRACE +0.000 Write 46 bytes: b'\\xc0\\x00\\x08$\\x00\\x00\\x00\\x00\\x00\\x07\\x07\\x12 UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU\\xc0'\nTRACE +0.102 Timed out waiting for packet header\n.TRACE +0.052 command op=0x08 data len=36 wait_response=1 timeout=0.100 data=b'\\x07\\x07\\x12 UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU'\nTRACE +0.000 Write 46 bytes: b'\\xc0\\x00\\x08$\\x00\\x00\\x00\\x00\\x00\\x07\\x07\\x12 UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU\\xc0'\nTRACE +0.102 Timed out waiting for packet header\n.TRACE +0.051 command op=0x08 data len=36 wait_response=1 timeout=0.100 data=b'\\x07\\x07\\x12 UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU'\nTRACE +0.000 Write 46 bytes: b'\\xc0\\x00\\x08$\\x00\\x00\\x00\\x00\\x00\\x07\\x07\\x12 UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU\\xc0'\nTRACE +0.103 Timed out waiting for packet header\n.TRACE +0.052 command op=0x08 data len=36 wait_response=1 timeout=0.100 data=b'\\x07\\x07\\x12 UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU'\nTRACE +0.000 Write 46 bytes: b'\\xc0\\x00\\x08$\\x00\\x00\\x00\\x00\\x00\\x07\\x07\\x12 UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU\\xc0'\nTRACE +0.102 Timed out waiting for packet header\n.TRACE +0.051 command op=0x08 data len=36 wait_response=1 timeout=0.100 data=b'\\x07\\x07\\x12 UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU'\nTRACE +0.000 Write 46 bytes: b'\\xc0\\x00\\x08$\\x00\\x00\\x00\\x00\\x00\\x07\\x07\\x12 UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU\\xc0'\nTRACE +0.103 Timed out waiting for packet header\n.TRACE +0.053 command op=0x08 data len=36 wait_response=1 timeout=0.100 data=b'\\x07\\x07\\x12 UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU'\nTRACE +0.000 Write 46 bytes: b'\\xc0\\x00\\x08$\\x00\\x00\\x00\\x00\\x00\\x07\\x07\\x12 UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU\\xc0'\nTRACE +0.106 Timed out waiting for packet header\n_\nA fatal error occurred: Failed to connect to Espressif device: Timed out waiting for packet header\n```\n\nAs you can see the signal is a lot noisier when trying to boot (GPIO0 low) and the TX of ESP module doesn't work. it seems like it can't be pulled low.\nI think that the last thing I can do is to change the FT231 with another converter and see what happens.. Hello again,\nIt seems that, in my case, the problem was a weird one. I have used a ground plane under the ESP module which, for some reason, was messing with the whole memory communication process.\nThis is the layout before, at the time I was unable to talk with the ESP:\n\nThis is the layout now when everything goes fine, even at 460800 baud:\n\nNothing else changed and now both the manual and auto-reset procedures are working. Maybe someone can find this useful in the future.\n@projectgus, thanks for your guidance!. ",
    "ftoyon": "For esp-idf environment I'm using the mingw32.exe and it's working fine.\nThe result of python -v under windows command line\n```\nc:...>python -v C:\\msys32\\home\\Frederic\\esp\\esp-idf-v3.0-rc1\\components\\esptool_py\\esptool\\esptool.py --chip esp32 --port COM7 --baud 921600 read_mac\nimport _frozen_importlib # frozen\nimport _imp # builtin\nimport sys # builtin\nimport '_warnings' # \nimport '_thread' # \nimport '_weakref' # \nimport '_frozen_importlib_external' # \nimport '_io' # \nimport 'marshal' # \nimport 'nt' # \nimport _thread # previously loaded ('_thread')\nimport '_thread' # \nimport _weakref # previously loaded ('_weakref')\nimport '_weakref' # \nimport 'winreg' # \ninstalling zipimport hook\nimport 'zipimport' # \ninstalled zipimport hook\nC:\\Python36\\lib\\encodings__pycache____init__.cpython-36.pyc matches C:\\Python36\\lib\\encodings__init__.py\ncode object from 'C:\\Python36\\lib\\encodings\\pycache\\init.cpython-36.pyc'\nC:\\Python36\\lib__pycache__\\codecs.cpython-36.pyc matches C:\\Python36\\lib\\codecs.py\ncode object from 'C:\\Python36\\lib\\pycache\\codecs.cpython-36.pyc'\nimport '_codecs' # \nimport 'codecs' # <_frozen_importlib_external.SourceFileLoader object at 0x000001A69A4299E8>\nC:\\Python36\\lib\\encodings__pycache__\\aliases.cpython-36.pyc matches C:\\Python36\\lib\\encodings\\aliases.py\ncode object from 'C:\\Python36\\lib\\encodings\\pycache\\aliases.cpython-36.pyc'\nimport 'encodings.aliases' # <_frozen_importlib_external.SourceFileLoader object at 0x000001A69A5A2630>\nimport 'encodings' # <_frozen_importlib_external.SourceFileLoader object at 0x000001A69A41EF28>\nC:\\Python36\\lib\\encodings__pycache__\\utf_8.cpython-36.pyc matches C:\\Python36\\lib\\encodings\\utf_8.py\ncode object from 'C:\\Python36\\lib\\encodings\\pycache\\utf_8.cpython-36.pyc'\nimport 'encodings.utf_8' # <_frozen_importlib_external.SourceFileLoader object at 0x000001A69A5B36A0>\nimport '_signal' # \nC:\\Python36\\lib\\encodings__pycache__\\latin_1.cpython-36.pyc matches C:\\Python36\\lib\\encodings\\latin_1.py\ncode object from 'C:\\Python36\\lib\\encodings\\pycache\\latin_1.cpython-36.pyc'\nimport 'encodings.latin_1' # <_frozen_importlib_external.SourceFileLoader object at 0x000001A69A5B3B00>\nC:\\Python36\\lib__pycache__\\io.cpython-36.pyc matches C:\\Python36\\lib\\io.py\ncode object from 'C:\\Python36\\lib\\pycache\\io.cpython-36.pyc'\nC:\\Python36\\lib__pycache__\\abc.cpython-36.pyc matches C:\\Python36\\lib\\abc.py\ncode object from 'C:\\Python36\\lib\\pycache\\abc.cpython-36.pyc'\nC:\\Python36\\lib__pycache___weakrefset.cpython-36.pyc matches C:\\Python36\\lib_weakrefset.py\ncode object from 'C:\\Python36\\lib\\pycache\\_weakrefset.cpython-36.pyc'\nimport '_weakrefset' # <_frozen_importlib_external.SourceFileLoader object at 0x000001A69A5BA9E8>\nimport 'abc' # <_frozen_importlib_external.SourceFileLoader object at 0x000001A69A5BA0B8>\nimport 'io' # <_frozen_importlib_external.SourceFileLoader object at 0x000001A69A5B3CC0>\nC:\\Python36\\lib__pycache__\\site.cpython-36.pyc matches C:\\Python36\\lib\\site.py\ncode object from 'C:\\Python36\\lib\\pycache\\site.cpython-36.pyc'\nC:\\Python36\\lib__pycache__\\os.cpython-36.pyc matches C:\\Python36\\lib\\os.py\ncode object from 'C:\\Python36\\lib\\pycache\\os.cpython-36.pyc'\nimport 'errno' # \nC:\\Python36\\lib__pycache__\\stat.cpython-36.pyc matches C:\\Python36\\lib\\stat.py\ncode object from 'C:\\Python36\\lib\\pycache\\stat.cpython-36.pyc'\nimport '_stat' # \nimport 'stat' # <_frozen_importlib_external.SourceFileLoader object at 0x000001A69A5E1630>\nC:\\Python36\\lib__pycache__\\ntpath.cpython-36.pyc matches C:\\Python36\\lib\\ntpath.py\ncode object from 'C:\\Python36\\lib\\pycache\\ntpath.cpython-36.pyc'\nC:\\Python36\\lib__pycache__\\genericpath.cpython-36.pyc matches C:\\Python36\\lib\\genericpath.py\ncode object from 'C:\\Python36\\lib\\pycache\\genericpath.cpython-36.pyc'\nimport 'genericpath' # <_frozen_importlib_external.SourceFileLoader object at 0x000001A69A5ED588>\nimport 'ntpath' # <_frozen_importlib_external.SourceFileLoader object at 0x000001A69A5E1CF8>\nC:\\Python36\\lib__pycache___collections_abc.cpython-36.pyc matches C:\\Python36\\lib_collections_abc.py\ncode object from 'C:\\Python36\\lib\\pycache\\_collections_abc.cpython-36.pyc'\nimport '_collections_abc' # <_frozen_importlib_external.SourceFileLoader object at 0x000001A69A5EDB38>\nimport 'os' # <_frozen_importlib_external.SourceFileLoader object at 0x000001A69A5D05C0>\nC:\\Python36\\lib__pycache___sitebuiltins.cpython-36.pyc matches C:\\Python36\\lib_sitebuiltins.py\ncode object from 'C:\\Python36\\lib\\pycache\\_sitebuiltins.cpython-36.pyc'\nimport '_sitebuiltins' # <_frozen_importlib_external.SourceFileLoader object at 0x000001A69A5D09B0>\nC:\\Python36\\lib__pycache__\\sysconfig.cpython-36.pyc matches C:\\Python36\\lib\\sysconfig.py\ncode object from 'C:\\Python36\\lib\\pycache\\sysconfig.cpython-36.pyc'\nimport 'sysconfig' # <_frozen_importlib_external.SourceFileLoader object at 0x000001A69A5D0E48>\nC:\\Python36\\lib__pycache___bootlocale.cpython-36.pyc matches C:\\Python36\\lib_bootlocale.py\ncode object from 'C:\\Python36\\lib\\pycache\\_bootlocale.cpython-36.pyc'\nimport '_locale' # \nimport '_bootlocale' # <_frozen_importlib_external.SourceFileLoader object at 0x000001A69A7582E8>\nC:\\Python36\\lib\\encodings__pycache__\\cp1252.cpython-36.pyc matches C:\\Python36\\lib\\encodings\\cp1252.py\ncode object from 'C:\\Python36\\lib\\encodings\\pycache\\cp1252.cpython-36.pyc'\nimport 'encodings.cp1252' # <_frozen_importlib_external.SourceFileLoader object at 0x000001A69A7587F0>\nimport 'site' # <_frozen_importlib_external.SourceFileLoader object at 0x000001A69A5CA278>\nPython 3.6.4 (v3.6.4:d48eceb, Dec 19 2017, 06:54:40) [MSC v.1900 64 bit (AMD64)] on win32\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\nC:\\Python36\\lib__pycache____future__.cpython-36.pyc matches C:\\Python36\\lib__future__.py\ncode object from 'C:\\Python36\\lib\\pycache\\future.cpython-36.pyc'\nimport 'future' # <_frozen_importlib_external.SourceFileLoader object at 0x000001A69AC73C18>\nC:\\Python36\\lib__pycache__\\argparse.cpython-36.pyc matches C:\\Python36\\lib\\argparse.py\ncode object from 'C:\\Python36\\lib\\pycache\\argparse.cpython-36.pyc'\nC:\\Python36\\lib\\collections__pycache____init__.cpython-36.pyc matches C:\\Python36\\lib\\collections__init__.py\ncode object from 'C:\\Python36\\lib\\collections\\pycache\\init.cpython-36.pyc'\nC:\\Python36\\lib__pycache__\\operator.cpython-36.pyc matches C:\\Python36\\lib\\operator.py\ncode object from 'C:\\Python36\\lib\\pycache\\operator.cpython-36.pyc'\nimport '_operator' # \nimport 'operator' # <_frozen_importlib_external.SourceFileLoader object at 0x000001A69ACA30B8>\nC:\\Python36\\lib__pycache__\\keyword.cpython-36.pyc matches C:\\Python36\\lib\\keyword.py\ncode object from 'C:\\Python36\\lib\\pycache\\keyword.cpython-36.pyc'\nimport 'keyword' # <_frozen_importlib_external.SourceFileLoader object at 0x000001A69ACAD400>\nC:\\Python36\\lib__pycache__\\heapq.cpython-36.pyc matches C:\\Python36\\lib\\heapq.py\ncode object from 'C:\\Python36\\lib\\pycache\\heapq.cpython-36.pyc'\nimport '_heapq' # \nimport 'heapq' # <_frozen_importlib_external.SourceFileLoader object at 0x000001A69ACADBA8>\nimport 'itertools' # \nC:\\Python36\\lib__pycache__\\reprlib.cpython-36.pyc matches C:\\Python36\\lib\\reprlib.py\ncode object from 'C:\\Python36\\lib\\pycache\\reprlib.cpython-36.pyc'\nimport 'reprlib' # <_frozen_importlib_external.SourceFileLoader object at 0x000001A69ACA5BA8>\nimport '_collections' # \nimport 'collections' # <_frozen_importlib_external.SourceFileLoader object at 0x000001A69AC857F0>\nC:\\Python36\\lib__pycache__\\copy.cpython-36.pyc matches C:\\Python36\\lib\\copy.py\ncode object from 'C:\\Python36\\lib\\pycache\\copy.cpython-36.pyc'\nC:\\Python36\\lib__pycache__\\types.cpython-36.pyc matches C:\\Python36\\lib\\types.py\ncode object from 'C:\\Python36\\lib\\pycache\\types.cpython-36.pyc'\nC:\\Python36\\lib__pycache__\\functools.cpython-36.pyc matches C:\\Python36\\lib\\functools.py\ncode object from 'C:\\Python36\\lib\\pycache\\functools.cpython-36.pyc'\nimport '_functools' # \nC:\\Python36\\lib__pycache__\\weakref.cpython-36.pyc matches C:\\Python36\\lib\\weakref.py\ncode object from 'C:\\Python36\\lib\\pycache\\weakref.cpython-36.pyc'\nimport 'weakref' # <_frozen_importlib_external.SourceFileLoader object at 0x000001A69A9D0A20>\nimport 'functools' # <_frozen_importlib_external.SourceFileLoader object at 0x000001A69A9CAB70>\nC:\\Python36\\lib\\collections__pycache__\\abc.cpython-36.pyc matches C:\\Python36\\lib\\collections\\abc.py\ncode object from 'C:\\Python36\\lib\\collections\\pycache\\abc.cpython-36.pyc'\nimport 'collections.abc' # <_frozen_importlib_external.SourceFileLoader object at 0x000001A69A9CD940>\nimport 'types' # <_frozen_importlib_external.SourceFileLoader object at 0x000001A69A9B1F60>\nC:\\Python36\\lib__pycache__\\copyreg.cpython-36.pyc matches C:\\Python36\\lib\\copyreg.py\ncode object from 'C:\\Python36\\lib\\pycache\\copyreg.cpython-36.pyc'\nimport 'copyreg' # <_frozen_importlib_external.SourceFileLoader object at 0x000001A69A9CA128>\nimport 'copy' # <_frozen_importlib_external.SourceFileLoader object at 0x000001A69AC85BE0>\nC:\\Python36\\lib__pycache__\\re.cpython-36.pyc matches C:\\Python36\\lib\\re.py\ncode object from 'C:\\Python36\\lib\\pycache\\re.cpython-36.pyc'\nC:\\Python36\\lib__pycache__\\enum.cpython-36.pyc matches C:\\Python36\\lib\\enum.py\ncode object from 'C:\\Python36\\lib\\pycache\\enum.cpython-36.pyc'\nimport 'enum' # <_frozen_importlib_external.SourceFileLoader object at 0x000001A69A9EE550>\nC:\\Python36\\lib__pycache__\\sre_compile.cpython-36.pyc matches C:\\Python36\\lib\\sre_compile.py\ncode object from 'C:\\Python36\\lib\\pycache\\sre_compile.cpython-36.pyc'\nimport '_sre' # \nC:\\Python36\\lib__pycache__\\sre_parse.cpython-36.pyc matches C:\\Python36\\lib\\sre_parse.py\ncode object from 'C:\\Python36\\lib\\pycache\\sre_parse.cpython-36.pyc'\nC:\\Python36\\lib__pycache__\\sre_constants.cpython-36.pyc matches C:\\Python36\\lib\\sre_constants.py\ncode object from 'C:\\Python36\\lib\\pycache\\sre_constants.cpython-36.pyc'\nimport 'sre_constants' # <_frozen_importlib_external.SourceFileLoader object at 0x000001A69A946B70>\nimport 'sre_parse' # <_frozen_importlib_external.SourceFileLoader object at 0x000001A69A940278>\nimport 'sre_compile' # <_frozen_importlib_external.SourceFileLoader object at 0x000001A69A93A518>\nimport 're' # <_frozen_importlib_external.SourceFileLoader object at 0x000001A69A9CDF28>\nC:\\Python36\\lib__pycache__\\textwrap.cpython-36.pyc matches C:\\Python36\\lib\\textwrap.py\ncode object from 'C:\\Python36\\lib\\pycache\\textwrap.cpython-36.pyc'\nimport 'textwrap' # <_frozen_importlib_external.SourceFileLoader object at 0x000001A69A93AF98>\nC:\\Python36\\lib__pycache__\\gettext.cpython-36.pyc matches C:\\Python36\\lib\\gettext.py\ncode object from 'C:\\Python36\\lib\\pycache\\gettext.cpython-36.pyc'\nC:\\Python36\\lib__pycache__\\locale.cpython-36.pyc matches C:\\Python36\\lib\\locale.py\ncode object from 'C:\\Python36\\lib\\pycache\\locale.cpython-36.pyc'\nimport 'locale' # <_frozen_importlib_external.SourceFileLoader object at 0x000001A69A96AEF0>\nC:\\Python36\\lib__pycache__\\struct.cpython-36.pyc matches C:\\Python36\\lib\\struct.py\ncode object from 'C:\\Python36\\lib\\pycache\\struct.cpython-36.pyc'\nimport '_struct' # \nimport 'struct' # <_frozen_importlib_external.SourceFileLoader object at 0x000001A69AAC6F98>\nimport 'gettext' # <_frozen_importlib_external.SourceFileLoader object at 0x000001A69A950BA8>\nimport 'argparse' # <_frozen_importlib_external.SourceFileLoader object at 0x000001A69A76F2E8>\nC:\\Python36\\lib__pycache__\\hashlib.cpython-36.pyc matches C:\\Python36\\lib\\hashlib.py\ncode object from 'C:\\Python36\\lib\\pycache\\hashlib.cpython-36.pyc'\nextension module '_hashlib' loaded from 'C:\\Python36\\DLLs\\_hashlib.pyd'\nextension module '_hashlib' executed from 'C:\\Python36\\DLLs\\_hashlib.pyd'\nimport '_hashlib' # <_frozen_importlib_external.ExtensionFileLoader object at 0x000001A69AADB128>\nimport '_blake2' # \nimport '_sha3' # \nimport 'hashlib' # <_frozen_importlib_external.SourceFileLoader object at 0x000001A69AACB860>\nC:\\Python36\\lib__pycache__\\inspect.cpython-36.pyc matches C:\\Python36\\lib\\inspect.py\ncode object from 'C:\\Python36\\lib\\pycache\\inspect.cpython-36.pyc'\nC:\\Python36\\lib__pycache__\\ast.cpython-36.pyc matches C:\\Python36\\lib\\ast.py\ncode object from 'C:\\Python36\\lib\\pycache\\ast.cpython-36.pyc'\nimport '_ast' # \nimport 'ast' # <_frozen_importlib_external.SourceFileLoader object at 0x000001A69A779D30>\nC:\\Python36\\lib__pycache__\\dis.cpython-36.pyc matches C:\\Python36\\lib\\dis.py\ncode object from 'C:\\Python36\\lib\\pycache\\dis.cpython-36.pyc'\nC:\\Python36\\lib__pycache__\\opcode.cpython-36.pyc matches C:\\Python36\\lib\\opcode.py\ncode object from 'C:\\Python36\\lib\\pycache\\opcode.cpython-36.pyc'\nimport '_opcode' # \nimport 'opcode' # <_frozen_importlib_external.SourceFileLoader object at 0x000001A69A7A5DD8>\nimport 'dis' # <_frozen_importlib_external.SourceFileLoader object at 0x000001A69A79FCF8>\nC:\\Python36\\lib\\importlib__pycache____init__.cpython-36.pyc matches C:\\Python36\\lib\\importlib__init__.py\ncode object from 'C:\\Python36\\lib\\importlib\\pycache\\init.cpython-36.pyc'\nC:\\Python36\\lib__pycache__\\warnings.cpython-36.pyc matches C:\\Python36\\lib\\warnings.py\ncode object from 'C:\\Python36\\lib\\pycache\\warnings.cpython-36.pyc'\nimport 'warnings' # <_frozen_importlib_external.SourceFileLoader object at 0x000001A69A7B3EB8>\nimport 'importlib' # <_frozen_importlib_external.SourceFileLoader object at 0x000001A69A7B4710>\nC:\\Python36\\lib\\importlib__pycache__\\machinery.cpython-36.pyc matches C:\\Python36\\lib\\importlib\\machinery.py\ncode object from 'C:\\Python36\\lib\\importlib\\pycache\\machinery.cpython-36.pyc'\nimport 'importlib.machinery' # <_frozen_importlib_external.SourceFileLoader object at 0x000001A69A7B3AC8>\nC:\\Python36\\lib__pycache__\\linecache.cpython-36.pyc matches C:\\Python36\\lib\\linecache.py\ncode object from 'C:\\Python36\\lib\\pycache\\linecache.cpython-36.pyc'\nC:\\Python36\\lib__pycache__\\tokenize.cpython-36.pyc matches C:\\Python36\\lib\\tokenize.py\ncode object from 'C:\\Python36\\lib\\pycache\\tokenize.cpython-36.pyc'\nC:\\Python36\\lib__pycache__\\token.cpython-36.pyc matches C:\\Python36\\lib\\token.py\ncode object from 'C:\\Python36\\lib\\pycache\\token.cpython-36.pyc'\nimport 'token' # <_frozen_importlib_external.SourceFileLoader object at 0x000001A69A7C67B8>\nimport 'tokenize' # <_frozen_importlib_external.SourceFileLoader object at 0x000001A69A7B32B0>\nimport 'linecache' # <_frozen_importlib_external.SourceFileLoader object at 0x000001A69A7B3470>\nimport 'inspect' # <_frozen_importlib_external.SourceFileLoader object at 0x000001A69AACBCC0>\nC:\\Python36\\lib\\site-packages\\serial__pycache____init__.cpython-36.pyc matches C:\\Python36\\lib\\site-packages\\serial__init__.py\ncode object from 'C:\\Python36\\lib\\site-packages\\serial\\pycache\\init.cpython-36.pyc'\nC:\\Python36\\lib\\site-packages\\serial__pycache__\\serialutil.cpython-36.pyc matches C:\\Python36\\lib\\site-packages\\serial\\serialutil.py\ncode object from 'C:\\Python36\\lib\\site-packages\\serial\\pycache\\serialutil.cpython-36.pyc'\nimport 'time' # \nimport 'serial.serialutil' # <_frozen_importlib_external.SourceFileLoader object at 0x000001A69A7E3B00>\nC:\\Python36\\lib\\site-packages\\serial__pycache__\\serialwin32.cpython-36.pyc matches C:\\Python36\\lib\\site-packages\\serial\\serialwin32.py\ncode object from 'C:\\Python36\\lib\\site-packages\\serial\\pycache\\serialwin32.cpython-36.pyc'\nC:\\Python36\\lib\\ctypes__pycache____init__.cpython-36.pyc matches C:\\Python36\\lib\\ctypes__init__.py\ncode object from 'C:\\Python36\\lib\\ctypes\\pycache\\init.cpython-36.pyc'\nextension module '_ctypes' loaded from 'C:\\Python36\\DLLs\\_ctypes.pyd'\nextension module '_ctypes' executed from 'C:\\Python36\\DLLs\\_ctypes.pyd'\nimport '_ctypes' # <_frozen_importlib_external.ExtensionFileLoader object at 0x000001A69A8104E0>\nC:\\Python36\\lib\\ctypes__pycache___endian.cpython-36.pyc matches C:\\Python36\\lib\\ctypes_endian.py\ncode object from 'C:\\Python36\\lib\\ctypes\\pycache\\_endian.cpython-36.pyc'\nimport 'ctypes._endian' # <_frozen_importlib_external.SourceFileLoader object at 0x000001A69A820668>\nimport 'ctypes' # <_frozen_importlib_external.SourceFileLoader object at 0x000001A69A801828>\nC:\\Python36\\lib\\site-packages\\serial__pycache__\\win32.cpython-36.pyc matches C:\\Python36\\lib\\site-packages\\serial\\win32.py\ncode object from 'C:\\Python36\\lib\\site-packages\\serial\\pycache\\win32.cpython-36.pyc'\nC:\\Python36\\lib\\ctypes__pycache__\\wintypes.cpython-36.pyc matches C:\\Python36\\lib\\ctypes\\wintypes.py\ncode object from 'C:\\Python36\\lib\\ctypes\\pycache\\wintypes.cpython-36.pyc'\nimport 'ctypes.wintypes' # <_frozen_importlib_external.SourceFileLoader object at 0x000001A69A820E10>\nimport 'serial.win32' # <_frozen_importlib_external.SourceFileLoader object at 0x000001A69A801F98>\nimport 'serial.serialwin32' # <_frozen_importlib_external.SourceFileLoader object at 0x000001A69A7F0978>\nimport 'serial' # <_frozen_importlib_external.SourceFileLoader object at 0x000001A69A770F60>\nC:\\Python36\\lib__pycache__\\base64.cpython-36.pyc matches C:\\Python36\\lib\\base64.py\ncode object from 'C:\\Python36\\lib\\pycache\\base64.cpython-36.pyc'\nimport 'binascii' # \nimport 'base64' # <_frozen_importlib_external.SourceFileLoader object at 0x000001A69A7E3FD0>\nimport 'zlib' # \nC:\\Python36\\lib__pycache__\\shlex.cpython-36.pyc matches C:\\Python36\\lib\\shlex.py\ncode object from 'C:\\Python36\\lib\\pycache\\shlex.cpython-36.pyc'\nimport 'shlex' # <_frozen_importlib_external.SourceFileLoader object at 0x000001A69A858940>\nesptool.py v2.1\nConnecting...\nTraceback (most recent call last):\n  File \"C:\\msys32\\home\\Frederic\\esp\\esp-idf-v3.0-rc1\\components\\esptool_py\\esptool\\esptool.py\", line 2524, in \n    _main()\n  File \"C:\\msys32\\home\\Frederic\\esp\\esp-idf-v3.0-rc1\\components\\esptool_py\\esptool\\esptool.py\", line 2517, in _main\n    main()\n  File \"C:\\msys32\\home\\Frederic\\esp\\esp-idf-v3.0-rc1\\components\\esptool_py\\esptool\\esptool.py\", line 2247, in main\n    esp.connect(args.before)\n  File \"C:\\msys32\\home\\Frederic\\esp\\esp-idf-v3.0-rc1\\components\\esptool_py\\esptool\\esptool.py\", line 365, in connect\n    last_error = self._connect_attempt(mode=mode, esp32r0_delay=False)\n  File \"C:\\msys32\\home\\Frederic\\esp\\esp-idf-v3.0-rc1\\components\\esptool_py\\esptool\\esptool.py\", line 344, in _connect_attempt\n    self.sync()\n  File \"C:\\msys32\\home\\Frederic\\esp\\esp-idf-v3.0-rc1\\components\\esptool_py\\esptool\\esptool.py\", line 297, in sync\n    self.command(self.ESP_SYNC, b'\\x07\\x07\\x12\\x20' + 32 * b'\\x55')\n  File \"C:\\msys32\\home\\Frederic\\esp\\esp-idf-v3.0-rc1\\components\\esptool_py\\esptool\\esptool.py\", line 244, in command\n    self.write(pkt)\n  File \"C:\\msys32\\home\\Frederic\\esp\\esp-idf-v3.0-rc1\\components\\esptool_py\\esptool\\esptool.py\", line 227, in write\n    self._port.write(buf)\n  File \"C:\\Python36\\lib\\site-packages\\serial\\serialwin32.py\", line 323, in write\n    raise writeTimeoutError\nserial.serialutil.SerialTimeoutException: Write timeout\nclear builtins._\nclear sys.path\nclear sys.argv\nclear sys.ps1\nclear sys.ps2\nclear sys.last_type\nclear sys.last_value\nclear sys.last_traceback\nclear sys.path_hooks\nclear sys.path_importer_cache\nclear sys.meta_path\nclear sys.interactivehook\nclear sys.flags\nclear sys.float_info\nrestore sys.stdin\nrestore sys.stdout\nrestore sys.stderr\ncleanup[2] removing builtins\ncleanup[2] removing sys\ncleanup[2] removing _frozen_importlib\ncleanup[2] removing _imp\ncleanup[2] removing _warnings\ncleanup[2] removing _thread\ncleanup[2] removing _weakref\ncleanup[2] removing _frozen_importlib_external\ncleanup[2] removing _io\ncleanup[2] removing marshal\ncleanup[2] removing nt\ncleanup[2] removing winreg\ncleanup[2] removing zipimport\ncleanup[2] removing encodings\ncleanup[2] removing codecs\ncleanup[2] removing _codecs\ncleanup[2] removing encodings.aliases\ncleanup[2] removing encodings.utf_8\ncleanup[2] removing _signal\ncleanup[2] removing main\ndestroy main\ncleanup[2] removing encodings.latin_1\ncleanup[2] removing io\ncleanup[2] removing abc\ncleanup[2] removing _weakrefset\ndestroy _weakrefset\ncleanup[2] removing site\ndestroy site\ncleanup[2] removing os\ncleanup[2] removing errno\ncleanup[2] removing stat\ncleanup[2] removing _stat\ncleanup[2] removing ntpath\ncleanup[2] removing genericpath\ncleanup[2] removing os.path\ncleanup[2] removing _collections_abc\ncleanup[2] removing _sitebuiltins\ncleanup[2] removing sysconfig\ndestroy sysconfig\ncleanup[2] removing _bootlocale\ndestroy _bootlocale\ncleanup[2] removing _locale\ncleanup[2] removing encodings.cp1252\ncleanup[2] removing future\ndestroy future\ncleanup[2] removing argparse\ncleanup[2] removing collections\ncleanup[2] removing operator\ndestroy operator\ncleanup[2] removing _operator\ncleanup[2] removing keyword\ndestroy keyword\ncleanup[2] removing heapq\ncleanup[2] removing _heapq\ncleanup[2] removing itertools\ncleanup[2] removing reprlib\ndestroy reprlib\ncleanup[2] removing _collections\ncleanup[2] removing copy\ncleanup[2] removing types\ncleanup[2] removing functools\ncleanup[2] removing _functools\ncleanup[2] removing weakref\ndestroy weakref\ncleanup[2] removing collections.abc\ncleanup[2] removing copyreg\ncleanup[2] removing re\ncleanup[2] removing enum\ncleanup[2] removing sre_compile\ncleanup[2] removing _sre\ncleanup[2] removing sre_parse\ncleanup[2] removing sre_constants\ndestroy sre_constants\ncleanup[2] removing textwrap\ncleanup[2] removing gettext\ndestroy gettext\ncleanup[2] removing locale\ncleanup[2] removing struct\ncleanup[2] removing _struct\ncleanup[2] removing hashlib\ncleanup[2] removing _hashlib\ncleanup[2] removing _blake2\ncleanup[2] removing _sha3\ncleanup[2] removing inspect\ncleanup[2] removing ast\ncleanup[2] removing _ast\ncleanup[2] removing dis\ncleanup[2] removing opcode\ndestroy opcode\ncleanup[2] removing _opcode\ncleanup[2] removing importlib\ncleanup[2] removing importlib._bootstrap\ncleanup[2] removing importlib._bootstrap_external\ncleanup[2] removing warnings\ncleanup[2] removing importlib.machinery\ncleanup[2] removing linecache\ncleanup[2] removing tokenize\ncleanup[2] removing token\ncleanup[2] removing serial\ncleanup[2] removing serial.serialutil\ncleanup[2] removing time\ncleanup[2] removing serial.serialwin32\ncleanup[2] removing ctypes\ncleanup[2] removing _ctypes\ncleanup[2] removing ctypes._endian\ncleanup[2] removing serial.win32\ncleanup[2] removing ctypes.wintypes\ncleanup[2] removing base64\ncleanup[2] removing binascii\ncleanup[2] removing zlib\ncleanup[2] removing shlex\ndestroy _ast\ndestroy _sha3\ndestroy _blake2\ndestroy zipimport\ndestroy _signal\ndestroy argparse\ndestroy hashlib\ndestroy inspect\ndestroy base64\ndestroy shlex\ndestroy _sitebuiltins\ndestroy textwrap\ndestroy _collections_abc\ndestroy heapq\ndestroy _heapq\ndestroy _collections\ndestroy collections.abc\ndestroy sre_compile\ndestroy copyreg\ndestroy _functools\ndestroy _operator\ndestroy sre_parse\ndestroy _sre\ndestroy locale\ndestroy copy\ndestroy encodings\ndestroy _locale\ndestroy _hashlib\ndestroy ast\ndestroy dis\ndestroy enum\ndestroy linecache\ndestroy token\ndestroy _opcode\ndestroy types\ndestroy warnings\ndestroy importlib.machinery\ndestroy functools\ndestroy tokenize\ndestroy collections\ndestroy itertools\ndestroy importlib\ndestroy serial.serialutil\ndestroy serial.serialwin32\ndestroy io\ndestroy time\ndestroy serial.win32\ndestroy serial\ndestroy struct\ndestroy binascii\ndestroy zlib\ndestroy re\ncleanup[3] wiping _frozen_importlib\ndestroy _frozen_importlib_external\ncleanup[3] wiping _imp\ncleanup[3] wiping _warnings\ncleanup[3] wiping _thread\ncleanup[3] wiping _weakref\ncleanup[3] wiping _io\ncleanup[3] wiping marshal\ncleanup[3] wiping nt\ncleanup[3] wiping winreg\ncleanup[3] wiping codecs\ncleanup[3] wiping _codecs\ncleanup[3] wiping encodings.aliases\ncleanup[3] wiping encodings.utf_8\ncleanup[3] wiping encodings.latin_1\ncleanup[3] wiping abc\ncleanup[3] wiping os\ndestroy abc\ndestroy errno\ndestroy ntpath\ncleanup[3] wiping stat\ncleanup[3] wiping _stat\ndestroy _stat\ncleanup[3] wiping genericpath\ncleanup[3] wiping encodings.cp1252\ncleanup[3] wiping _struct\ncleanup[3] wiping importlib._bootstrap\ncleanup[3] wiping ctypes\ndestroy _struct\ndestroy ctypes._endian\ndestroy ctypes.wintypes\ncleanup[3] wiping _ctypes\ncleanup[3] wiping sys\ncleanup[3] wiping builtins\ndestroy ctypes\ndestroy os\ndestroy stat\ndestroy genericpath\n```. ",
    "Electromania": "Thanks for quick reply and removing other post. I had posted there first and then realized, as you mentioned, it had slightly different problem. \nSince i had to continue with project, i somehow managed to remove the ESP Wroom-32 board from my main Wemos board. I replaced it with spare ESP Wroom-32 bare board i had, now i can program that. But i have tried the old Wroom-32 board to program with USB-TTL converter and also other esp boards, unfortunately now i cannot get anyresponse. i will check tomorrow if i can get it running.\nBut now i have new problem, i am getting following error for SPIFFS_Test program for all boards i have. i also tried ESP32-pico sent by espressif.  i can upload all sketches and those are running fine. The SPIFFS_Test.ino gives me following message on serial port, and attached images are screenshots of commands you suggested. i have just erased mac address.  (since this is slightly different issue than original , if you want i can make new thread.\nerror i am getting is. ..............................................\nrst:0x1 (POWERON_RESET),boot:0x13 (SPI_FAST_FLASH_BOOT)\nflash read err, 1000\nets_main.c 371 \nets Jun  8 2016 00:22:57\nrst:0x10 (RTCWDT_RTC_RESET),boot:0x13 (SPI_FAST_FLASH_BOOT)\nconfigsip: 0, SPIWP:0xee\nclk_drv:0x00,q_drv:0x00,d_drv:0x00,cs0_drv:0x00,hd_drv:0x00,wp_drv:0x00\nmode:DIO, clock div:1\nload:0x3fff0018,len:4\nload:0x3fff001c,len:956\nload:0x40078000,len:0\nload:0x40078000,len:13076\nentry 0x40078ad0\nE (53) SPIFFS: mount failed, -10025\nSPIFFS Mount Failed\n\nespefuse.py --port COMx summary\n\n\n\nespefuse.py --port COMx dump\n\nthanks \n. Sorry i forgot to answer your other questions.\n1) i kept it running with wemos module having 18650 battery, it must be in around 26-27 deg and humidity varied from 35 to 70 % RH. the entire system was kept in closed small plastic box.\n2) i do not think it was being run on higher than 3.3V.\nthe previous night i had kept it running in same conditions, but i was sampling only max 100-200 data points. this time accidently it was sampling every few seconds, so it must have taken few thousand data points. \n\ni have question - does the spiffs memory keep overwriting if its limit is full ?  or we need to manually check how much memory is left, and clear before it gets full .. Thanks csann and projectgus, i have been scanning through several forums and blogs, this kind of error - irrespective of cause, seems quite often by espxxx users. i am not sure if this is getting into hardware or firmware issue. but needs to be addressed quickly so that the makers, enthusiasts and professional OEMs do not end up with product that - literally needs to be scrapped because of this issue. because, i had to completely remove the wemos board and replace with new one - and finally again stuck with SPIFFS not working so far.\n. thanks a lot for detailed reply.\n**  \" I realise this is misleading and we need to improve it.\"\nI am glad this issue might help improving esptool.py. \n\n** \"So this seems like something quite unique so far.\"\nTo be honest, even i am surprised and really want to know what wrong i might have done for this to happen. so that community learns and even i can save my remaining board from getting bricked ;).\nif you want i send you the sketch i used, so as to know if - any software bug caused it or any hardware issue.\none thing that springs to my mind is- could it be because of the low power of battery ? because i had kept it running on 18650 battery module. when i saw the oled screen forzen, the brightness was too low, so i suspected battery might have gone down. can this cause failure of flash ? \n** i have tried to test your suggestions with my 'damaged' board with external usb-ttl adapter, unfortunately now it only shows following thing... seems now board is completely dead. i tested with several different ways - esp programming module, us-uart adapters, conneting rx tx of other board etc. none works anymore.\n\n** GOOD NEWS - thanks for your suggestion -   SPIFFS.begin(true); worked. now i can read and write to other esp32 board. if you want this issue could be closed now. but since original issue remains lingering - i.e. cause of failure of first board; may be we can keep it open until someone finds similar problem or a solution. i leave it to you.\n** \"I believe the default Arduino-ESP32 partition table gives a 1.5MB SPIFFS partition.\"\nIf i use esptool   or eclipse or platformio - using esp-idf then how much is the SPIFFS partition ? can we change modify it as per our need ? or can we add another external flash e.g. 32Mb using SPI pins ? will it interfere with onboard flash ? may be we can address it differently or reassign spi pin nos to other pins ??\n--sorry for so many questions, i want to log sensor data at every few seconds for very long period, a year or so. hence worried about space and performance both.\nthanks for help... at least i can now continue with project. and as i get time, i will keep playing with old damaged board, just to know what might have gone wrong there.\n. ",
    "csann": "I am having a similar problem. I have two Wemos ESP32 Pro boards. Both of these boards use to flash and work properly. Now neither board will flash. Both boards produce the following log on the monitor during flashing. \n```\nesptool.py v2.1\nFlashing binaries to serial port /dev/cu.usbserial-DN03FT1D (app at offset 0x10000)...\nesptool.py v2.1\nConnecting........__\nChip is ESP32D0WDQ6 (revision 1)\nUploading stub...\nRunning stub...\nStub running...\nConfiguring flash size...\nWarning: Could not auto-detect Flash size (FlashID=0xffffff, SizeID=0xff), defaulting to 4MB\nCompressed 19408 bytes to 11444...\nA fatal error occurred: Timed out waiting for packet content\nmake: *** [flash] Error 2\n```\nThe problem seemed to start after I wrote a small program to set all GPIO to inputs (except the flash related GPIO). When one board quit flashing, I moved to my other Wemos board. After that I could no longer get either Wemos board to flash. I can successfully flash every other manufacturers board I have tested using any of my programs. \nBecause both boards are messed up, I wonder if I have set something wrong in menuconfig. Here are some of my settings:\nSerial Flasher: baud rate: 115200, Flash SPI Mode: DIO, Flash SPI speed: 40 MHz, Flash Size: 4 MB, Detect flash size\nESP32 specific component config - CPU Freq: 160 MHz, Main xtal freq: 26 MHz.\nI think this is the last Wemos boards I will used. I already don't like it because their XTAL Freq is non- standard. That caused me a lot of lost time. Now the boards appear to be damaging the processor.\nI ran the two espefuse commands you wanted. Here are my results\n```\nClarks-iMac-2:esptool clark$ python espefuse.py --port /dev/cu.usbserial-DN03EVHD summary\nespefuse.py v2.1\nConnecting........___\nSecurity fuses:\nFLASH_CRYPT_CNT        Flash encryption mode counter                     = 0 R/W (0x0)\nFLASH_CRYPT_CONFIG     Flash encryption config (key tweak bits)          = 0 R/W (0x0)\nCONSOLE_DEBUG_DISABLE  Disable ROM BASIC interpreter fallback            = 0 R/W (0x0)\nABS_DONE_0             secure boot enabled for bootloader                = 0 R/W (0x0)\nABS_DONE_1             secure boot abstract 1 locked                     = 0 R/W (0x0)\nJTAG_DISABLE           Disable JTAG                                      = 0 R/W (0x0)\nDISABLE_DL_ENCRYPT     Disable flash encryption in UART bootloader       = 0 R/W (0x0)\nDISABLE_DL_DECRYPT     Disable flash decryption in UART bootloader       = 0 R/W (0x0)\nDISABLE_DL_CACHE       Disable flash cache in UART bootloader            = 0 R/W (0x0)\nBLK1                   Flash encryption key                            \n  = 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 R/W \nBLK2                   Secure boot key                                 \n  = 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 R/W \nBLK3                   Variable Block 3                                \n  = 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 R/W \nEfuse fuses:\nWR_DIS                 Efuse write disable mask                          = 0 R/W (0x0)\nRD_DIS                 Efuse read disablemask                            = 0 R/W (0x0)\nCODING_SCHEME          Efuse variable block length scheme                = 0 R/W (0x0)\nKEY_STATUS             Usage of efuse block 3 (reserved)                 = 0 R/W (0x0)\nConfig fuses:\nXPD_SDIO_FORCE         Ignore MTDI pin (GPIO12) for VDD_SDIO on reset    = 0 R/W (0x0)\nXPD_SDIO_REG           If XPD_SDIO_FORCE, enable VDD_SDIO reg on reset   = 0 R/W (0x0)\nXPD_SDIO_TIEH          If XPD_SDIO_FORCE & XPD_SDIO_REG, 1=3.3V 0=1.8V   = 0 R/W (0x0)\nSPI_PAD_CONFIG_CLK     Override SD_CLK pad (GPIO6/SPICLK)                = 0 R/W (0x0)\nSPI_PAD_CONFIG_Q       Override SD_DATA_0 pad (GPIO7/SPIQ)               = 0 R/W (0x0)\nSPI_PAD_CONFIG_D       Override SD_DATA_1 pad (GPIO8/SPID)               = 0 R/W (0x0)\nSPI_PAD_CONFIG_HD      Override SD_DATA_2 pad (GPIO9/SPIHD)              = 0 R/W (0x0)\nSPI_PAD_CONFIG_CS0     Override SD_CMD pad (GPIO11/SPICS0)               = 0 R/W (0x0)\nDISABLE_SDIO_HOST      Disable SDIO host                                 = 0 R/W (0x0)\nIdentity fuses:\nMAC                    MAC Address                                       =xx:xx:xx:xx:xx:xx R/W \nCHIP_VERSION           Chip version                                      = 8 R/W (0x8)\nCHIP_PACKAGE           Chip package identifier                           = 0 R/W (0x0)\nFlash voltage (VDD_SDIO) determined by GPIO12 on reset (High for 1.8V, Low/NC for 3.3V).\n```\nClarks-iMac-2:esptool clark$ python espefuse.py --port /dev/cu.usbserial-DN03EVHD dump\nespefuse.py v2.1\nConnecting........_\nEFUSE block 0:\n00000000 a4181fe0 00a930ae 00008000 00000036 00000000 00000000\nEFUSE block 1:\n00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000\nEFUSE block 2:\n00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000\nEFUSE block 3:\n00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000\n. Hi @projectgus and @Electromania \nI believe this problem is related to some design problem with the Wemos board. I am experimenting with several different manufacturers boards and I have this problem only with Wemos. And I have I will all of my Wemos boards (two of them). I won't buy another one. Plus the Wemos board is totally undocumented...no pictures or schematics on their web site. From looking at their web site you wouldn't even know the board exists.  \nAngus mentioned it might be something attached to the SPI flash pins. I doubt it. One of my failed boards has no IO connected to it. Never has.\nHmmmm....just thought of something.  I did use that board for my IO test. In my IO test I looped from GPIO0 to GPIO39, setting the GPIO to input and setting pull-up and pull-down. I first set all GPIO to pull-up, then I grounded the GPIO to detect a 0. Then I set all GPIO to pull-down and I put 3V3 on each pin to detect a 1. I did not put GND or 3V3 on the six SPI pins, but I did configure them as inputs and set PU and PD resistors. Could this fry the SPI?\nNote: I did this to another manufacturers board and it still works fine. Could the other boards have a more robust design that protects against what I did?\nI wish the manufacturers would not even bring out the 6 SPI flash pins to the edge connectors. Why do they do this? If the pins are unusable for anything, why bring them out?\nThe same goes with GPIO pins 0, 1, 2, and 3. As far as I can tell, these pins should not be used for general purpose GPIO. If you use 0 or 2 I understand you risk screwing up the boot of the board. (I suppose you could use them for output after the board is booted. And I suppose you could use them for input, but you better not have anything connected before the processor boots.) If you use 1 or 3, you screw up the UART and you cannot monitor the board. (I suppose there is a use case where you don't need to monitor the board....probably after the board goes into production....if you trust never being able to monitor a board once the design has gone into production and the UART pins are used as GPIO.)\nClark\n. ",
    "cslehel": "Hello projectgus, \ni have the same problem like Electromania. \nI have the following board: \nhttps://www.aliexpress.com/item/TTGO-WiFi-Bluetooth-Battery-ESP32-0-96-inch-OLED-development-tool/32827879503.html\nIn Arduino IDE i am unable to upload any sketch. I am getting the following error in Arduino: \nesptool.py v2.1\nConnecting........__\nChip is unknown ESP32 (revision (unknown 0xe))\nUploading stub...\nRunning stub...\nStub running...\nChanging baud rate to 921600\nChanged.\nConfiguring flash size...\nA fatal error occurred: Timed out waiting for packet header\nIn the serial monitor i am getting this message after i press the EN button: \nrst:0x1 (POWERON_RESET),boot:0x17 (SPI_FAST_FLASH_BOOT)\nflash read err,1000\nets_main.c371ets Jun  8 201600:22:57\nrst:0x10 (RTCWDT_RTC_RESET),boot:0x17 (SPI_FAST_FLASH_BOOT)\nflashread err, 1000\nets_main.c 371 \nets Jun 8 2016 00:22:57\nAfter i press the BOOT button i get the following message:\nrst:0x10(RTCWDT_RTC_RESET),boot:0x7 (DOWNLOAD_BOOT(UART0/UART1/SDIO_REI_REO_V2))\nwaiting fordownload\nFor espefuse.py --port COMx summary : \nespefuse.py v2.3.1\nConnecting........__\nIdentity fuses:\nMAC                    MAC Address\n  = XX:XX:XX:XX:XX:XX (CRC 6e invalid - calculated 0xd5) R/W\nCHIP_VER_REV1          Silicon Revision 1                                = 1 R/W (0x1)\nCHIP_VERSION           Reserved for future chip versions                 = 2 R/W (0x2)\nCHIP_PACKAGE           Chip package identifier                           = 3 R/W (0x3)\nConfig fuses:\nXPD_SDIO_FORCE         Ignore MTDI pin (GPIO12) for VDD_SDIO on reset    = 0 R/- (0x0)\nXPD_SDIO_REG           If XPD_SDIO_FORCE, enable VDD_SDIO reg on reset   = 1 R/- (0x1)\nXPD_SDIO_TIEH          If XPD_SDIO_FORCE & XPD_SDIO_REG, 1=3.3V 0=1.8V   = 0 R/- (0x0)\nSPI_PAD_CONFIG_CLK     Override SD_CLK pad (GPIO6/SPICLK)                = 6 R/- (0x6)\nSPI_PAD_CONFIG_Q       Override SD_DATA_0 pad (GPIO7/SPIQ)               = 19 R/- (0x13)\nSPI_PAD_CONFIG_D       Override SD_DATA_1 pad (GPIO8/SPID)               = 25 R/- (0x19)\nSPI_PAD_CONFIG_HD      Override SD_DATA_2 pad (GPIO9/SPIHD)              = 6 R/W (0x6)\nSPI_PAD_CONFIG_CS0     Override SD_CMD pad (GPIO11/SPICS0)               = 12 R/- (0xc)\nDISABLE_SDIO_HOST      Disable SDIO host                                 = 0 R/W (0x0)\nCalibration fuses:\nBLK3_PART_RESERVE      BLOCK3 partially served for ADC calibration data  = 1 R/W (0x1)\nADC_VREF               Voltage reference calibration                     = 1142 R/W (0x6)\nADC1_TP_LOW            ADC1 150mV reading                                = 278 -/- (0x0)\nADC1_TP_HIGH           ADC1 850mV reading                                = 3265 -/- (0x0)\nADC2_TP_LOW            ADC2 150mV reading                                = 421 -/- (0x0)\nADC2_TP_HIGH           ADC2 850mV reading                                = 3406 -/- (0x0)\nEfuse fuses:\nWR_DIS                 Efuse write disable mask                          = 26214 R/- (0x6666)\nRD_DIS                 Efuse read disablemask                            = 6 R/W (0x6)\nCODING_SCHEME          Efuse variable block length scheme                = 2 R/- (0x2)\nKEY_STATUS             Usage of efuse block 3 (reserved)                 = 1 R/- (0x1)\nSecurity fuses:\nFLASH_CRYPT_CNT        Flash encryption mode counter                     = 102 R/- (0x66)\nFLASH_CRYPT_CONFIG     Flash encryption config (key tweak bits)          = 6 R/- (0x6)\nCONSOLE_DEBUG_DISABLE  Disable ROM BASIC interpreter fallback            = 1 R/W (0x1)\nABS_DONE_0             secure boot enabled for bootloader                = 0 R/W (0x0)\nABS_DONE_1             secure boot abstract 1 locked                     = 1 R/- (0x1)\nJTAG_DISABLE           Disable JTAG                                      = 1 R/- (0x1)\nDISABLE_DL_ENCRYPT     Disable flash encryption in UART bootloader       = 0 R/W (0x0)\nDISABLE_DL_DECRYPT     Disable flash decryption in UART bootloader       = 0 R/W (0x0)\nDISABLE_DL_CACHE       Disable flash cache in UART bootloader            = 1 R/W (0x1)\nBLK1                   Flash encryption key\n  = 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 66 66 66 66 66 66 66 66 66 66 66 66 66 66 66 66 R/W\nBLK2                   Secure boot key\n  = 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 -/W\nBLK3                   Variable Block 3\n  = 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 -/-\nFlash voltage (VDD_SDIO) determined by GPIO12 on reset (High for 1.8V, Low/NC for 3.3V).\nFor espefuse.py --port COMx dump : \nespefuse.py v2.3.1\nConnecting........__\nEFUSE block 0:\n06666666 e666feee 006e76ee 0000e666 00006676 66666666 00000666\nEFUSE block 1:\n66666666 66666666 66666666 66666666 00000000 00000000 00000000 00000000\nEFUSE block 2:\n00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000\nEFUSE block 3:\n00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000\nI ran this board two times on brand new 18650 batteries then one time on a battery i got from a laptop.\nDo you have any suggestions i can try ?\nThank you.. Yes you are right, the ESP32 was running on a battery and discharged completely. \nI am using the Arduino IDE. \nDo i have any chance to restore the efuses ?\nThank you for your response.. Thank you for the answer projectgus. \nI will be more careful in the future.. ",
    "Salty-Doug": "Hi projectgus,\nI am having a similar problem with an ESP32 board. I have been successful at uploading Arduino sketches on this ESP32 dev board for a week; until this afternoon, when I discovered a bug in a new sketch. The Message is:\nChip is ESP32D0WDQ6 (revision 1)\nUploading stub...\nRunning stub...\nStub running...\nConfiguring flash size...\nWarning: Could not auto-detect Flash size (FlashID=0x0, SizeID=0x0), defaulting to 4MB\nCompressed 8192 bytes to 47...\nWriting at 0x0000e000... (100 %)\nWrote 8192 bytes (47 compressed) at 0x0000e000 in 0.0 seconds (effective 7609.7 kbit/s)...\nA fatal error occurred: Timed out waiting for packet header\nA fatal error occurred: Timed out waiting for packet header\nI am running Arduino 1.8.5 on a MAC OS x 10.13. the board is connected to the computer for power. It is a board I purchased from Xiuxin on Amazon. The board is running a sketch that reads a DHT22 sensor, sends data out on the USB port, and runs a WiFi server with Temperature data and links to turn on and off two outputs. The sketch has a bug so that the board will hang in a \"while\" statement after the temperature goes out of equality and an output 2 goes low. The sketch would upload fine before I added the bug! ;^)\nI can reset the board and have it run fine when the temperature is equal to the setpoint, as confirmed by data on the serial port. \nWhen I upload any sketch to the board, output 2 will go low when the flash query starts. \nI have tried your espfuse.py script but it doesn't like the unix port name.\n\n\n\nespefuse.py --port /dev/cu.SLAB_USBtoUART summary\nSyntaxError: invalid syntax\n\n\n\nI have a Parallels Windows VM and I am using ESPFlashDownloadTool_v3.6.4 to try to erase the flash drive with empty 1MB .bin files. This program fails while communicating with esp32 board also.. Thanks for the reply Angus.\nI did figure out the problem but not the root cause. \nI had put an LED and a 220 ohm resistor in GPIO2. Since that output also drives the onboard LED, I guess the additional 20 milliamps overloaded the circuit. \nThat would indicate to me that GPIO2 is not usable as an output.\nUsing GPIO15 works fine.\nDoug\n. ",
    "erkki": "I'm having similar issues with a TTGO board. For what it's worth, it has \"fixed\" itself a couple of times, I'm presuming either due to emptying of the internal battery and coming out of a reset loop or conversely, charging of the battery and getting stable power.. ",
    "vanilla-thunder": "I had same issues with wemos lolin32 board with integrated OLED display, but I could finally flash it after disconnecting all sensors from the board. . ",
    "spike7638": "For others with this same problem: after swapping through about 8 different USB cables (no help), putting in a large electrolytic between Vcc and Gnd (no help), disconnecting everything else on the breadboard around the ESP 32 (no help), I finally removed the ESP32 from the breadboard entirely, so that it was hooked only to the USB cable during programming. That seems to have done the trick, and better still, now that I've successfully downloaded one program, I can download more with the ESP32 actually plugged INTO the breadboard. \nThis worked both on an NodeMCU ESP-32S AND on a Geekworm ESP32 WROVER IPEX, neither of which worked when plugged into the breadboard; that suggests to me that this might be a general solution.  Best of luck to one and all.. ",
    "Netoperz": "Confirmed. @spike7638 \nI have M5Stack core, and had the same (in common) error\nA fatal error occurred: Timed out waiting for packet content\nA fatal error occurred: Timed out waiting for packet content\nI have had protoboard  2.54 with voltage step down regulator that was not powered (board powered 5v using usb, and level shifters module , and when i have removed the protoboard, the M5stack could be flashed without problem over usb.\nlater i'll check if there is a problem with ota also when externals are connected  and i'll post here.\n@spike7638 thanks a lot for your post, saved me a lot of debugging :). ",
    "voloviq": "Sorry for question here, I do not known where shall I ask. You gave me exactly such kind of information I looking for. In meantime I was able to run esp8266 on Linux, I hope esp8089 will be work as esp8266 in Linux using the same driver.\nThanks\nBest Regards. I run it with succes for am3352. Probably for stm32 should work as well.\nWhat kind of help You need?\nwt., 11 gru 2018, 19:59: Nima Askari ----- \u0646\u06cc\u0645\u0627 \u0639\u0633\u06a9\u0631\u06cc \nnotifications@github.com napisa\u0142(a):\n\nHave you any example sdio\nI want drive it by stm32\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/espressif/esptool/issues/264#issuecomment-446320093,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AHcbPjlo3ObOg06q9iV4XXYZm-Z6zHR6ks5u4ACugaJpZM4RjD0r\n.\n. \n",
    "nimaltd": "Have you any example sdio \nI want drive it by stm32. I need an example, Library , schematic or any document. I drive sd card( sdio mode ) by stm32.\nBut I don't know how can i drive esp8266\n. ",
    "hsiboy": "ok, just read this:\n\nesptool overrides the 2nd and 3rd (start from 0) bytes according to the SPI flash info provided through command line option\n\nhere https://github.com/espressif/esptool/wiki/Firmware-Image-Format\nusing the command:\nroot@9VW0BW1:~# esptool.py --port /dev/ttyS8 write_flash -fm dio -fs 4MB -ff 40m 0x00000 backup.img\nfixes the broken header issue.\nSo how does write_flash choose the value 0x90 when it isn't supplied, and if its going to write some arbitrary value, why no warning?\n. Thanks for the full reply @projectgus , appreciated \ud83d\udc4d  (btw i didn't see a tip jar anywhere).\nI'll try the -fs keep write_flash 0x0 my.bin now, though i may poke about in the wemos image a little more, to see if i can work out the memory map. I suspect its a standard lua image.\nupdate\ngetting:\nesptool write_flash: error: argument --flash_size/-fs: keep is not a known flash size. Known sizes: 16MB, detect, 256KB, 2MB-c1, 8MB, 2MB, 4MB, 512KB, 1MB, 4MB-c1\nI wondered if you meant -fs keep  or -fm keep ?? so i looked in the source:\nNow, python isnt my thing (i dont jive the white space), but...\nknown_sizes = dict(ESP8266ROM.FLASH_SIZES)\n        known_sizes.update(ESP32ROM.FLASH_SIZES)\n        if self._auto_detect:\n            known_sizes['detect'] = 'detect'\n        if value not in known_sizes:\n            raise argparse.ArgumentError(self, '%s is not a known flash size. Known sizes: %s' % (value, \", \".join(known_sizes.keys())))\n        setattr(namespace, self.dest, value)\nHmm, do we test for keep\nflash_size = flash_size_freq & 0xF0\n    if args.flash_size != 'keep':\n        flash_size = esp.parse_flash_size_arg(args.flash_size)\nyes, but \nFLASH_SIZES = {\n        '512KB':0x00,\n        '256KB':0x10,\n        '1MB':0x20,\n        '2MB':0x30,\n        '4MB':0x40,\n        '2MB-c1': 0x50,\n        '4MB-c1':0x60,\n        '8MB':0x80,\n        '16MB':0x90,\n    }\nso how is keep specified?\n. ",
    "ds2k5": "Solution:  pip3 install --upgrade esptool\nrun esptool.py insted esptool\nesptool.py v2.2.1 looks like it work. Hi Angus,\nsorry for the delay\nBoard: ESP8266, NodeMcu V3\n```\nesptool.py --trace --port /dev/ttyU0 flash_id\nesptool.py v2.2.1\nConnecting...TRACE +0.000 command op=0x08 data len=36 wait_response=1 timeout=0.100 data='\\x07\\x07\\x12 UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU'\nTRACE +0.000 Write 46 bytes: '\\xc0\\x00\\x08$\\x00\\x00\\x00\\x00\\x00\\x07\\x07\\x12 UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU\\xc0'\nTRACE +0.107 Timed out waiting for packet header\n.TRACE +0.054 command op=0x08 data len=36 wait_response=1 timeout=0.100 data='\\x07\\x07\\x12 UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU'\nTRACE +0.000 Write 46 bytes: '\\xc0\\x00\\x08$\\x00\\x00\\x00\\x00\\x00\\x07\\x07\\x12 UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU\\xc0'\nTRACE +0.107 Timed out waiting for packet header\n.TRACE +0.054 command op=0x08 data len=36 wait_response=1 timeout=0.100 data='\\x07\\x07\\x12 UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU'\nTRACE +0.000 Write 46 bytes: '\\xc0\\x00\\x08$\\x00\\x00\\x00\\x00\\x00\\x07\\x07\\x12 UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU\\xc0'\nTRACE +0.107 Timed out waiting for packet header\n.TRACE +0.054 command op=0x08 data len=36 wait_response=1 timeout=0.100 data='\\x07\\x07\\x12 UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU'\nTRACE +0.000 Write 46 bytes: '\\xc0\\x00\\x08$\\x00\\x00\\x00\\x00\\x00\\x07\\x07\\x12 UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU\\xc0'\nTRACE +0.107 Timed out waiting for packet header\n.TRACE +0.053 command op=0x08 data len=36 wait_response=1 timeout=0.100 data='\\x07\\x07\\x12 UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU'\nTRACE +0.000 Write 46 bytes: '\\xc0\\x00\\x08$\\x00\\x00\\x00\\x00\\x00\\x07\\x07\\x12 UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU\\xc0'\nTRACE +0.107 Timed out waiting for packet header\n.TRACE +1.863 command op=0x08 data len=36 wait_response=1 timeout=0.100 data='\\x07\\x07\\x12 UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU'\nTRACE +0.000 Write 46 bytes: '\\xc0\\x00\\x08$\\x00\\x00\\x00\\x00\\x00\\x07\\x07\\x12 UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU\\xc0'\nTRACE +0.106 Timed out waiting for packet header\nTRACE +0.054 command op=0x08 data len=36 wait_response=1 timeout=0.100 data='\\x07\\x07\\x12 UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU'\nTRACE +0.000 Write 46 bytes: '\\xc0\\x00\\x08$\\x00\\x00\\x00\\x00\\x00\\x07\\x07\\x12 UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU\\xc0'\nTRACE +0.102 Timed out waiting for packet header\n_TRACE +0.052 command op=0x08 data len=36 wait_response=1 timeout=0.100 data='\\x07\\x07\\x12 UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU'\nTRACE +0.000 Write 46 bytes: '\\xc0\\x00\\x08$\\x00\\x00\\x00\\x00\\x00\\x07\\x07\\x12 UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU\\xc0'\n...\n....\n..... \nTRACE +0.000 Write 46 bytes: '\\xc0\\x00\\x08$\\x00\\x00\\x00\\x00\\x00\\x07\\x07\\x12 UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU\\xc0'\nTRACE +0.107 Timed out waiting for packet header\n\nA fatal error occurred: Failed to connect to Espressif device: Timed out waiting for packet header\n```\n\nDo you know if the device you have works on any of the supported OSes?\n\nYes on Linux it works.\ntrace.txt\n. Thanks, but i am sure the is installed.\nI but will check . tryed to install on a fresh freeBSD insalled system\nroot@freeBSD11:~ # pip install esptool\nCollecting esptool\n  Downloading esptool-2.2.1.tar.gz (70kB)\n    100% |################################| 71kB 2.2MB/s \nCollecting pyserial>=2.5 (from esptool)\n  Downloading pyserial-3.4-py2.py3-none-any.whl (193kB)\n    100% |################################| 194kB 2.9MB/s \nCollecting pyaes (from esptool)\n  Downloading pyaes-1.6.1.tar.gz\nCollecting ecdsa (from esptool)\n  Downloading ecdsa-0.13-py2.py3-none-any.whl (86kB)\n    100% |################################| 92kB 5.2MB/s \nInstalling collected packages: pyserial, pyaes, ecdsa, esptool\n  Running setup.py install for pyaes ... done\n  Running setup.py install for esptool ... done\nSuccessfully installed ecdsa-0.13 esptool-2.2.1 pyaes-1.6.1 pyserial-3.4\n. ",
    "alessss": "Sorry, trace in previous comment appeared after an attempt to fix the issue.\nCorrect trace is:\npython esptool.py chip_id\nesptool.py v2.3-dev\nTraceback (most recent call last):\n  File \"esptool.py\", line 2605, in <module>\n    _main()\n  File \"esptool.py\", line 2598, in _main\n    main()\n  File \"esptool.py\", line 2319, in main\n    esp = ESPLoader.detect_chip(args.port, initial_baud, args.before, args.trace)\n  File \"esptool.py\", line 222, in detect_chip\n    detect_port = ESPLoader(port, baud, trace_enabled=trace_enabled)\n  File \"esptool.py\", line 193, in __init__\n    self._port = serial.serial_for_url(port)\nAttributeError: 'module' object has no attribute 'serial_for_url'\nOS: MacOS sierra 10.12.6\nScript was run in Python venv (Python 2.7.10)\npip list\necdsa (0.13)\nesptool (2.2.1)\nfuture (0.16.0)\niso8601 (0.1.12)\npip (9.0.1)\npyaes (1.6.1)\npyserial (3.4)\nPyYAML (3.12)\nserial (0.0.38)\nsetuptools (38.4.0)\nwheel (0.30.0). >>> print serial.VERSION\nTraceback (most recent call last):\n  File \"\", line 1, in \nAttributeError: 'module' object has no attribute 'VERSION'\n\n\n\nprint serial.dict.keys()\n['bytearray', 'IndexError', 'all', 'help', 'vars', 'hooks', 'SyntaxError', 'absolute_import', 'path', 'unicode', 'UnicodeDecodeError', 'memoryview', 'isinstance', 'copyright', 'NameError', 'abs', 'generators', 'input', 'oct', 'bin', 'SystemExit', 'StandardError', 'format', 'file', 'repr', 'sorted', 'False', 'RuntimeWarning', 'list', 'iter', 'reload', 'Warning', 'round', 'dir', 'cmp', 'set', 'bytes', 'with_statement', 'intern', 'meta', 'issubclass', 'Ellipsis', 'EOFError', 'locals', 'BufferError', 'slice', 'FloatingPointError', 'sum', 'getattr', 'BytesWarning', 'exit', 'print', 'True', 'FutureWarning', 'ImportWarning', 'model', 'None', 'hash', 'any', 'builtins', 'ReferenceError', 'len', 'credits', 'frozenset', 'name', 'ord', 'super', 'properties', 'print_function', 'sys', 'TypeError', 'license', 'KeyboardInterrupt', 'UserWarning', 'filter', 'range', 'staticmethod', 'SystemError', 'BaseException', 'pow', 'RuntimeError', 'float', 'MemoryError', 'StopIteration', 'globals', 'divmod', 'enumerate', 'apply', 'LookupError', 'open', 'quit', 'basestring', 'UnicodeError', 'zip', 'hex', 'long', 'next', 'int', 'chr', 'dict', 'type', 'doc', 'Exception', 'nested_scopes', 'tuple', 'reduce', 'reversed', 'UnicodeTranslateError', 'UnicodeEncodeError', 'IOError', 'hasattr', 'delattr', 'setattr', 'raw_input', 'SyntaxWarning', 'compile', 'ArithmeticError', 'str', 'property', 'GeneratorExit', 'division', 'unicode_literals', 'xrange', 'standard_library', 'KeyError', 'coerce', 'PendingDeprecationWarning', 'file', 'EnvironmentError', 'unichr', 'ascii', 'id', 'OSError', 'DeprecationWarning', 'min', 'UnicodeWarning', 'execfile', 'package', 'complex', 'bool', 'test', 'ValueError', 'NotImplemented', 'map', 'buffer', 'max', 'object', 'utilities', 'TabError', 'callable', 'ZeroDivisionError', 'errors', 'eval', 'IndentationError', 'AssertionError', 'classmethod', 'request', 'UnboundLocalError', 'ImportError', 'native_str', 'NotImplementedError', 'AttributeError', 'OverflowError']\nprint serial.file\n/*/*/.venvs/esp8266/lib/python2.7/site-packages/serial/init.pyc - this is the venv path.. Thanks. Recreating venv fixed the trace. I don't have esp module currently at the office, but it seems the problrm is fixed.. Fixed using --flash-mode dio. Thanks.. \n\n\n",
    "shirish47": "I am also having this issue. Recently I was learning python I don't know I installed python3 and now when I try to flash my esp32 I get exact same error \nI tired the command above \n```\nShirishs-MacBook-Pro:gatt_client shirishbytelens$ /usr/bin/env python -c \"import serial; print serial.VERSION; print serial.dict.keys()\"\n  File \"\", line 1\n    import serial; print serial.VERSION; print serial.dict.keys()\n                              ^\nSyntaxError: invalid syntax\nand this too\nShirishs-MacBook-Pro:gatt_client shirishbytelens$ /usr/bin/env python -c \"import serial; print serial.file\"\n  File \"\", line 1\n    import serial; print serial.file\n                              ^\nSyntaxError: invalid syntax\n```\n. here is the out put ..\n```\npython -c \"import serial; print(serial.VERSION); print(serial.__dict__.keys()); print(serial.__file__)\"\nTraceback (most recent call last):\n  File \"<string>\", line 1, in <module>\nAttributeError: module 'serial' has no attribute 'VERSION'. YA I tried it I get this : \npython -c \"import serial; print(serial.__dict__.keys()); print(serial.__file__)\"\ndict_keys(['__name__', '__doc__', '__package__', '__loader__', '__spec__', '__path__', '__file__', '__cached__', '__builtins__', 'absolute_import', 'division', 'generators', 'nested_scopes', 'print_function', 'unicode_literals', 'with_statement', 'standard_library', 'abs', 'all', 'any', 'ascii', 'bin', 'callable', 'chr', 'compile', 'delattr', 'dir', 'divmod', 'eval', 'exec', 'format', 'getattr', 'globals', 'hasattr', 'hash', 'hex', 'id', 'input', 'isinstance', 'issubclass', 'iter', 'len', 'locals', 'max', 'min', 'next', 'oct', 'ord', 'pow', 'print', 'repr', 'round', 'setattr', 'sorted', 'sum', 'vars', 'None', 'Ellipsis', 'NotImplemented', 'False', 'True', 'bool', 'memoryview', 'bytearray', 'bytes', 'classmethod', 'complex', 'dict', 'enumerate', 'filter', 'float', 'frozenset', 'property', 'int', 'list', 'map', 'object', 'range', 'reversed', 'set', 'slice', 'staticmethod', 'str', 'super', 'tuple', 'type', 'zip', 'BaseException', 'Exception', 'TypeError', 'StopAsyncIteration', 'StopIteration', 'GeneratorExit', 'SystemExit', 'KeyboardInterrupt', 'ImportError', 'ModuleNotFoundError', 'OSError', 'EnvironmentError', 'IOError', 'EOFError', 'RuntimeError', 'RecursionError', 'NotImplementedError', 'NameError', 'UnboundLocalError', 'AttributeError', 'SyntaxError', 'IndentationError', 'TabError', 'LookupError', 'IndexError', 'KeyError', 'ValueError', 'UnicodeError', 'UnicodeEncodeError', 'UnicodeDecodeError', 'UnicodeTranslateError', 'AssertionError', 'ArithmeticError', 'FloatingPointError', 'OverflowError', 'ZeroDivisionError', 'SystemError', 'ReferenceError', 'BufferError', 'MemoryError', 'Warning', 'UserWarning', 'DeprecationWarning', 'PendingDeprecationWarning', 'SyntaxWarning', 'RuntimeWarning', 'FutureWarning', 'ImportWarning', 'UnicodeWarning', 'BytesWarning', 'ResourceWarning', 'ConnectionError', 'BlockingIOError', 'BrokenPipeError', 'ChildProcessError', 'ConnectionAbortedError', 'ConnectionRefusedError', 'ConnectionResetError', 'FileExistsError', 'FileNotFoundError', 'IsADirectoryError', 'NotADirectoryError', 'InterruptedError', 'PermissionError', 'ProcessLookupError', 'TimeoutError', 'open', 'quit', 'exit', 'copyright', 'credits', 'license', 'help', 'native_str', 'errors', 'utilities', 'properties', 'meta', 'model', 'hooks', 'test', 'request'])\n/usr/local/lib/python3.6/site-packages/serial/__init__.py. ",
    "curusarn": "Same problem as @shirish47:\npython -c \"import serial; print(serial.__dict__.keys()); print(serial.__file__)\" gives me:\ndict_keys(['__name__', '__doc__', '__package__', '__loader__', '__spec__', '__path__', '__file__', '__cached__', '__builtins__', 'absolute_import', 'division', 'generators', 'nested_scopes', 'print_function', 'unicode_literals', 'with_statement', 'standard_library', 'abs', 'all', 'any', 'ascii', 'bin', 'callable', 'chr', 'compile', 'delattr', 'dir', 'divmod', 'eval', 'exec', 'format', 'getattr', 'globals', 'hasattr', 'hash', 'hex', 'id', 'input', 'isinstance', 'issubclass', 'iter', 'len', 'locals', 'max', 'min', 'next', 'oct', 'ord', 'pow', 'print', 'repr', 'round', 'setattr', 'sorted', 'sum', 'vars', 'None', 'Ellipsis', 'NotImplemented', 'False', 'True', 'bool', 'memoryview', 'bytearray', 'bytes', 'classmethod', 'complex', 'dict', 'enumerate', 'filter', 'float', 'frozenset', 'property', 'int', 'list', 'map', 'object', 'range', 'reversed', 'set', 'slice', 'staticmethod', 'str', 'super', 'tuple', 'type', 'zip', 'BaseException', 'Exception', 'TypeError', 'StopAsyncIteration', 'StopIteration', 'GeneratorExit', 'SystemExit', 'KeyboardInterrupt', 'ImportError', 'ModuleNotFoundError', 'OSError', 'EnvironmentError', 'IOError', 'EOFError', 'RuntimeError', 'RecursionError', 'NotImplementedError', 'NameError', 'UnboundLocalError', 'AttributeError', 'SyntaxError', 'IndentationError', 'TabError', 'LookupError', 'IndexError', 'KeyError', 'ValueError', 'UnicodeError', 'UnicodeEncodeError', 'UnicodeDecodeError', 'UnicodeTranslateError', 'AssertionError', 'ArithmeticError', 'FloatingPointError', 'OverflowError', 'ZeroDivisionError', 'SystemError', 'ReferenceError', 'BufferError', 'MemoryError', 'Warning', 'UserWarning', 'DeprecationWarning', 'PendingDeprecationWarning', 'SyntaxWarning', 'RuntimeWarning', 'FutureWarning', 'ImportWarning', 'UnicodeWarning', 'BytesWarning', 'ResourceWarning', 'ConnectionError', 'BlockingIOError', 'BrokenPipeError', 'ChildProcessError', 'ConnectionAbortedError', 'ConnectionRefusedError', 'ConnectionResetError', 'FileExistsError', 'FileNotFoundError', 'IsADirectoryError', 'NotADirectoryError', 'InterruptedError', 'PermissionError', 'ProcessLookupError', 'TimeoutError', 'open', 'quit', 'exit', 'copyright', 'credits', 'license', 'help', 'native_str', 'errors', 'utilities', 'properties', 'meta', 'model', 'hooks', 'test', 'request'])\n/usr/lib/python3.6/site-packages/serial/__init__.py\n. Hi,\nI'm using Linux. I have installed pyserial via pip. I'm not using virtualenv. I think pyserial was clashing with serial package which I have installed earlier (via pip). Uninstalling serial and reinstalling pyserial fixed my issue. I tried to reproduce it afterwards but I didn't manage to.\nThanks for your response.. ",
    "davebelais": "I added a check for the pyserial package in the setup script for serial\u2014to prevent users from accidentally installing serial when intending to upgrade a version of pyserial. If there is anyone using pyserial with a use case for having both installed\u2014please feel free to raise this topic on bitbucket (https://bitbucket.org/davebelais/serial/issues).. ",
    "p0we7": "I uninstall serial and reinstall pyserial, esptool is not any error now.. ",
    "gojimmypi": "esptool.py used to work well for me. I've not used it in some time, as I've been using C/C++ in Visual Studio with the Visual Micro add-in. Recently I was revisiting MicroPython, which builds in Linux and uploads to the ESP8266 with esptool.py - however I now get the ImportError: No module named tools.list_ports error.\nI've read a variety of resources online, none of which have helped, including this one from stackoverflow that sounded promising:\nhttps://stackoverflow.com/questions/14108428/pyserial-no-module-named-tools\nI tried installing these, but it did not help:\nsudo apt-get install python-serial\nsudo apt-get install pyflakes\nsudo apt-get install python-pip\nsudo pip install pyserial\nsudo apt-get install python3-pyqt5\nAlso tried the pip uninstall:\n0 $ pip uninstall serial\nCannot uninstall requirement serial, not installed\nStoring complete log in /home/pi/.pip/pip.log\npyserial is installed:\n```\n0 $ pip install pyserial\nRequirement already satisfied (use --upgrade to upgrade): pyserial in /usr/lib/python2.7/dist-packages\nCleaning up...\n```\nlatest version of  pyserial is installed:\n0 $ pip install pyserial --upgrade\nCannot fetch index base URL http://pypi.python.org/simple/\nCould not find any downloads that satisfy the requirement pyserial in /usr/lib/python2.7/dist-packages\nNo distributions at all found for pyserial in /usr/lib/python2.7/dist-packages\nStoring complete log in /home/pi/.pip/pip.log\nbut the latest esptool.py is failing:\n0 $ sudo ~/workspace/esptool/esptool.py\nTraceback (most recent call last):\n  File \"/home/pi/workspace/esptool/esptool.py\", line 35, in <module>\n    import serial.tools.list_ports as list_ports\nImportError: No module named tools.list_ports\nmy esptool.py is dates 6/27/2018 and 125,993 bytes, (__version__ = \"2.4.1\")\nany suggestion what I might be doing wrong? This is on a Raspberry Pi (wheezy) with latest upgrade / updates applied.\n. The problem here for me was due to the new requirement of pyserial 3, and upgrades to it being ignored since an older version was \"Owned by OS\". Newer versions (in my case at least Jesse for Raspberry Pi) can be forcibly upgraded. Older ones - (in my case wheezy for Raspberry Pi) appear to have no options, not even apt-get dist-ugrade.  I was also able to get this working working with Debian 8; no problems there.\nSee this similar issue where I have more details: https://github.com/espressif/esptool/issues/324#issuecomment-401504758\nspecifically the ignore-installed option:\nsudo apt-get update\nsudo apt-get upgrade\nsudo pip install esptool\nsudo pip install --ignore-installed pyserial\nsudo esptool.py --port /dev/ttyUSB0 --baud 115200 flash_id\nSee also my project for building MicroPython for the ESP8266, which got me started on this whole path when it stopped working with the latest esptool:\nhttps://github.com/gojimmypi/build_esp8266\n. The solution was found in the https://github.com/espressif/esptool#manual-installation instructions:\n\nesptool.py depends on pySerial version 3.0 or newer for serial communication with the target device.\n\ndespite a fresh apt-get update/upgrade, I found my version reported was still old (2.6.1):\n~$ apt-cache policy python-serial\npython-serial:\n  Installed: 2.6-1.1\n  Candidate: 2.6-1.1\n  Version table:\n *** 2.6-1.1 0\n        500 http://ftp.us.debian.org/debian/ jessie/main amd64 Packages\n        100 /var/lib/dpkg/status\nSo to fix, ensure pip is installed:\nsudo apt-get install python-pip\nTry to upgrade python-serial:\nsudo pip install --upgrade pyserial\nNote results show pyserial-3-4 found, but IGNORED since existing version is \"owned by OS\":\nDownloading/unpacking pyserial from https://files.pythonhosted.org/packages/0d/e4/2a744dd9e3be04a0c0907414e2a01a7c88bb3915cbe3c8cc06e209f59c30/pyserial-3.4-py2.py3-none-any.whl#sha256=e0770fadba80c31013896c7e6ef703f72e7834965954a78e71a3049488d4d7d8\n  Downloading pyserial-3.4-py2.py3-none-any.whl (193kB): 193kB downloaded\nInstalling collected packages: pyserial\n  Found existing installation: pyserial 2.6\n    Not uninstalling pyserial at /usr/lib/python2.7/dist-packages, owned by OS\nSuccessfully installed pyserial\nCleaning up...\njscarletta@ha-vm-debian:~$ apt-cache policy python-serial\npython-serial:\n  Installed: 2.6-1.1\n  Candidate: 2.6-1.1\n  Version table:\n *** 2.6-1.1 0\n        500 http://ftp.us.debian.org/debian/ jessie/main amd64 Packages\n        100 /var/lib/dpkg/status\nSo the issue needs to be forced:\npip install --ignore-installed pyserial\nThen... tada!  esptool.py --port /dev/ttyUSB0 --baud 115200 flash_id results in:\nesptool.py v2.4.1\nSerial port /dev/ttyUSB0\nConnecting....\nDetecting chip type... ESP8266\nChip is ESP8266EX\nFeatures: WiFi\nMAC: 5c:cf:7f:xx:xx:xx\nUploading stub...\nRunning stub...\nStub running...\nManufacturer: ef\nDevice: 4016\nDetected flash size: 4MB\nHard resetting via RTS pin...\nUnfortunately this solution does not work on an older RaspberryPi:\n```\n$ sudo apt-get install python-serial\n$ sudo pip install --upgrade pyserial\nsudo pip install --upgrade pyserial\nCannot fetch index base URL http://pypi.python.org/simple/\nCould not find any downloads that satisfy the requirement pyserial in /usr/lib/python2.7/dist-packages\nNo distributions at all found for pyserial in /usr/lib/python2.7/dist-packages\nStoring complete log in /root/.pip/pip.log\n$ pip install --ignore-installed pyserial\nDownloading/unpacking pyserial\n  Cannot fetch index base URL http://pypi.python.org/simple/\n  Could not find any downloads that satisfy the requirement pyserial\nNo distributions at all found for pyserial\nStoring complete log in /home/pi/.pip/pip.log\n$ apt-cache policy python-serial\npython-serial:\n  Installed: (none)\n  Candidate: 2.5-2.1\n  Version table:\n     2.5-2.1 0\n        500 http://mirrordirector.raspbian.org/raspbian/ wheezy/main armhf Packages\n```\nSo epstool.py on the Raspberry Pi still returns an error since the serial library is pre-3.0:\n```\n ~/workspace/esptool/esptool.py -p /dev/ttyUSB0\nTraceback (most recent call last):\n  File \"/home/pi/workspace/esptool/esptool.py\", line 35, in \n    import serial.tools.list_ports as list_ports\nImportError: No module named tools.list_ports\n```\nedit: It appears if the latest version of Raspbian is installed, this does work. \npi@raspberrypi:~$ cat /etc/os-release\nPRETTY_NAME=\"Raspbian GNU/Linux 8 (jessie)\"\nNAME=\"Raspbian GNU/Linux\"\nVERSION_ID=\"8\"\nVERSION=\"8 (jessie)\"\nID=raspbian\nID_LIKE=debian\nHOME_URL=\"http://www.raspbian.org/\"\nSUPPORT_URL=\"http://www.raspbian.org/RaspbianForums\"\nBUG_REPORT_URL=\"http://www.raspbian.org/RaspbianBugs\"\nin summary:\nsudo apt-get update\nsudo apt-get upgrade\nsudo pip install esptool\nsudo pip install --ignore-installed pyserial\nsudo esptool.py --port /dev/ttyUSB0 --baud 115200 flash_id\nif you want to do an in-place upgrade of Raspbian, see my gist\nEssentially just sudo nano /etc/apt/sources.list and change wheezy to jessie, then repeat for jessie to stretch\n. ",
    "liuzfesp": "Hi @gojimmypi, I also met similar problem.  \nI have solved this issue with following method:\nI have fix this issue with following steps:\n\nDownload the pyserial package from: https://pypi.python.org/pypi/pyserial/\ntar zxvf pyserial-3.0.tar.gz\ncd pyserial\nsudo python setup.py install\n\nThen everything is OK now. Moreover, my ubuntu version is 12.0.4 LTS, my python version is 2.7.3.\nAlso I have tried following methods, but none of them work for me:\nMethod#1:\npip uninstall serial\npip install pyserial\nMethod#2:\nsudo apt-get uninstall pyserial\nsudo apt-get install pyserial\n. ",
    "answerquest": "Just chipping in with what worked at my end: I had to uninstall both serrial and pyserial, then install pyserial again. And because by ubuntu 18.04 system didn't allow python to access the port when on simple user or from inside a virtual environment, I had to install pyserial on the main system. The --user flage helps though.\npip3 install --user pyserial\nI had to run my program with a sudo prefix. Wishing there was a way around that.\nIf the \"serial\" namespace is contended by two separate packages, then it's all the more case for the module to have its main name equal to the module's name. ie, if it's pyserial, then it's better to just keep the import line in the program as import pyserial and get on with the show instead of coveting serial.. ",
    "jeffsf": "Yes, the unpredictable reset behavior of the board I work with has been challenging. A couple of revs of firmware ago I could \"trust\" that calling sdk_system_restart_in_nmi() would reboot the chip to the bootloader, well, at least if it had just been flashed and run. I'm going to have to solder a line to the back of the USB-serial adapter so I can get both DTR and RTS so I don't have to fiddle with the board's switches during development and test. \nThanks for the explanation and how to move ahead. Knowing that it is related to the lack of DTR reset explains the \"Works for me\" responses I got. \nFor me, the \"Hard resetting via DTR\" message would have immediately identified the problem (or is it RTS?). I'm not a big fan of too many options, especially when there are enough already to accomplish the task.. ",
    "tyjtyj": "The device still boot to sonoff original firmware. I am pretty sure it does not write anything\nToo much different... already out of screen buffer \nNot sure if I run this correct time \nI run this after i flash. reenter flash mode \n```\n   00076ced ff 87\n   00076cee ff 14\n   00076cef ff 07\n   00076cf0 ff 51\n   00076cf1 ff 55\n   00076cf2 ff fe\n   00076cf3 ff c0\n   00076cf4 ff 20\n   00076cf5 ff 00\n   00076cf6 ff 49\n   00076cf7 ff 05\n   00076cf8 ff 07\n   00076cf9 ff 73\n   00076cfa ff 09\n   00076cfb ff 31\n   00076cfc ff 70\n   00076cfe ff 0c\n   00076cff ff 04\n   00076d00 ff c0\n   00076d01 ff 20\n   00076d02 ff 00\n   00076d03 ff 49\n   00076d04 ff 03\n   00076d05 ff 1b\n   00076d06 ff 66\n   00076d07 ff 62\n   00076d08 ff 47\n   00076d09 ff 00\n   00076d0a ff 86\n   00076d0b ff 13\n   00076d0c ff 00\n   00076d0d ff 82\n   00076d0e ff 45\n   00076d0f ff 00\n   00076d10 ff 58\n   00076d11 ff 03\n   00076d12 ff cc\n   00076d13 ff 35\n   00076d14 ff 52\n   00076d15 ff 42\n   00076d16 ff 00\n   00076d17 ff 0d\n   00076d18 ff f0\n   00076d19 ff 50\n   00076d1a ff 50\n   00076d1b ff f4\n   00076d1c ff 8c\n   00076d1d ff 65\n   00076d1e ff 61\n   00076d1f ff 48\n   00076d20 ff fe\n   00076d21 ff c0\n   00076d22 ff 20\n   00076d23 ff 00\n   00076d24 ff 59\n   00076d25 ff 06\n   00076d26 ff 38\n   00076d27 ff 03\n   00076d28 ff 07\n   00076d29 ff 73\n   00076d2a ff 09\n   00076d2b ff 31\n   00076d2c ff 64\n   00076d2e ff 0c\n   00076d2f ff 15\n   00076d30 ff c0\n   00076d31 ff 20\n   00076d32 ff 00\n   00076d33 ff 59\n   00076d34 ff 03\n   00076d35 ff 51\n   00076d36 ff d9\n   00076d38 ff 32\n   00076d39 ff 05\n   00076d3a ff 00\n   00076d3b ff 9c\n   00076d3c ff d3\n   00076d3d ff 32\n   00076d3e ff 04\n   00076d3f ff d0\n   00076d40 ff 0c\n   00076d41 ff 06\n   00076d42 ff 0c\n   00076d43 ff 12\n   00076d44 ff 30\n   00076d45 ff 26\n   00076d46 ff 93\n   00076d47 ff 20\n   00076d48 ff 30\n   00076d49 ff 74\n   00076d4a ff f0\n   00076d4b ff 23\n   00076d4c ff 11\n   00076d4d ff 30\n   00076d4e ff 22\n   00076d4f ff 80\n   00076d50 ff 30\n   00076d51 ff 22\n   00076d52 ff a0\n   00076d53 ff 32\n   00076d54 ff 44\n   00076d55 ff d0\n   00076d56 ff 40\n   00076d57 ff 22\n   00076d58 ff b0\n   00076d59 ff 62\n   00076d5a ff 45\n   00076d5b ff 00\n   00076d5c ff 32\n   00076d5d ff 07\n   00076d5e ff 00\n   00076d5f ff 20\n   00076d60 ff 23\n   00076d61 ff 90\n   00076d62 ff 32\n   00076d63 ff 12\n   00076d64 ff 01\n   00076d65 ff 21\n   00076d66 ff ce\n   00076d68 ff 28\n   00076d69 ff 02\n   00076d6a ff 20\n   00076d6b ff 33\n   00076d6c ff 82\n   00076d6d ff 21\n   00076d6e ff 24\n   00076d6f ff e2\n   00076d70 ff c0\n   00076d71 ff 20\n   00076d72 ff 00\n   00076d73 ff 39\n   00076d74 ff 02\n   00076d75 ff 21\n   00076d76 ff cb\n   00076d77 ff fe\n   00076d78 ff 0c\n   00076d79 ff 23\n   00076d7a ff c0\n   00076d7b ff 20\n   00076d7c ff 00\n   00076d7d ff 48\n   00076d7e ff 02\n   00076d7f ff 30\n   00076d80 ff 34\n   00076d81 ff 20\n   00076d82 ff c0\n   00076d83 ff 20\n   00076d84 ff 00\n   00076d85 ff 39\n   00076d86 ff 02\n   00076d87 ff 0d\n   00076d88 ff f0\n   00076d89 ff 00\n   00076d8a ff 00\n   00076d8b ff 00\n   00076d8c ff 31\n   00076d8d ff c3\n   00076d8f ff 12\n   00076d90 ff c1\n   00076d91 ff f0\n   00076d92 ff 42\n   00076d93 ff 23\n   00076d94 ff 00\n   00076d95 ff 09\n   00076d96 ff 31\n   00076d97 ff 20\n   00076d98 ff 20\n   00076d99 ff 74\n   00076d9a ff 9c\n   00076d9b ff 64\n   00076d9c ff 7c\n   00076d9d ff e5\n   00076d9e ff 00\n   00076d9f ff 12\n   00076da0 ff 40\n   00076da1 ff 50\n   00076da2 ff 25\n   00076da3 ff 81\n   00076da4 ff 40\n   00076da5 ff 22\n   00076da6 ff 10\n   00076da7 ff 29\n   00076da8 ff 03\n   00076da9 ff cc\n   00076daa ff 72\n   00076dab ff 45\n   00076dac ff 32\n   00076dad ff fc\n   00076dae ff 45\n   00076daf ff c1\n   00076db1 ff c5\n   00076db2 ff b8\n   00076db4 ff 08\n   00076db5 ff 31\n   00076db6 ff 12\n   00076db7 ff c1\n   00076db8 ff 10\n   00076db9 ff 0d\n   00076dba ff f0\n   00076dbb ff 00\n   00076dbc ff 2d\n   00076dbd ff 02\n   00076dbf ff 3f\n   00076dc0 ff 24\n   00076dc1 ff 02\n   00076dc3 ff 3f\n   00076dc4 ff 28\n   00076dc5 ff 02\n   00076dc7 ff 3f\n   00076dc8 ff 08\n   00076dc9 ff 02\n   00076dcb ff 3f\n   00076dcc ff 12\n   00076dcd ff c1\n   00076dce ff f0\n   00076dcf ff 09\n   00076dd0 ff 31\n   00076dd1 ff 45\n   00076dd2 ff 6c\n   00076dd4 ff 41\n   00076dd5 ff fa\n   00076dd7 ff 31\n   00076dd8 ff fa\n   00076dda ff 52\n   00076ddb ff 04\n   00076ddc ff 00\n   00076ddd ff 8c\n   00076dde ff 85\n   00076ddf ff 29\n   00076de0 ff 03\n   00076de1 ff 0c\n   00076de2 ff 02\n   00076de3 ff 22\n   00076de4 ff 44\n   00076de5 ff 00\n   00076de6 ff 06\n   00076de7 ff 05\n   00076de8 ff 00\n   00076de9 ff 58\n   00076dea ff 03\n   00076deb ff 29\n   00076dec ff 03\n   00076ded ff 50\n   00076dee ff 52\n   00076def ff c0\n   00076df0 ff 21\n   00076df1 ff f6\n   00076df3 ff 41\n   00076df4 ff f4\n   00076df6 ff 38\n   00076df7 ff 02\n   00076df8 ff 59\n   00076df9 ff 04\n   00076dfa ff 1b\n   00076dfb ff 33\n   00076dfc ff 39\n   00076dfd ff 02\n   00076dfe ff 08\n   00076dff ff 31\n   00076e00 ff 12\n   00076e01 ff c1\n   00076e02 ff 10\n   00076e03 ff 0d\n   00076e04 ff f0\n   00076e05 ff 00\n   00076e06 ff 00\n   00076e07 ff 00\n   00076e08 ff 1c\n   00076e09 ff 02\n   00076e0b ff 3f\n   00076e0c ff 20\n   00076e0d ff 02\n   00076e0f ff 3f\n   00076e10 ff 2c\n   00076e11 ff 02\n   00076e13 ff 3f\n   00076e14 ff 18\n   00076e15 ff 02\n   00076e17 ff 3f\n   00076e18 ff 14\n   00076e19 ff 02\n   00076e1b ff 3f\n   00076e1c ff 12\n   00076e1d ff c1\n   00076e1e ff f0\n   00076e1f ff 09\n   00076e20 ff 31\n   00076e21 ff 45\n   00076e22 ff 67\n   00076e24 ff 31\n   00076e25 ff f9\n   00076e27 ff 51\n   00076e28 ff f9\n   00076e2a ff 48\n   00076e2b ff 03\n   00076e2c ff 29\n   00076e2d ff 03\n   00076e2e ff 40\n   00076e2f ff 42\n   00076e30 ff c0\n   00076e31 ff 21\n   00076e32 ff f7\n   00076e34 ff 49\n   00076e35 ff 05\n   00076e36 ff 32\n   00076e37 ff 02\n   00076e38 ff 00\n   00076e39 ff 32\n   00076e3a ff c3\n   00076e3b ff fd\n   00076e3c ff 30\n   00076e3d ff 30\n   00076e3e ff 74\n   00076e3f ff f6\n   00076e40 ff 53\n   00076e41 ff 19\n   00076e42 ff 31\n   00076e43 ff f4\n   00076e45 ff 58\n   00076e46 ff 03\n   00076e47 ff 5a\n   00076e48 ff 44\n   00076e49 ff 49\n   00076e4a ff 03\n   00076e4b ff 41\n   00076e4c ff f3\n   00076e4e ff 38\n   00076e4f ff 04\n   00076e50 ff 1b\n   00076e51 ff 33\n   00076e52 ff 39\n   00076e53 ff 04\n   00076e54 ff 66\n   00076e55 ff 93\n   00076e56 ff 04\n   00076e57 ff 0c\n   00076e58 ff 83\n   00076e59 ff 32\n   00076e5a ff 42\n   00076e5b ff 00\n   00076e5c ff 08\n   00076e5d ff 31\n   00076e5e ff 12\n   00076e5f ff c1\n   00076e60 ff 10\n   00076e61 ff 0d\n   00076e62 ff f0\n   00076e63 ff 00\n   00076e64 ff 00\n   00076e65 ff 80\n   00076e66 ff fe\n   00076e67 ff 3f\n   00076e68 ff d0\n   00076e69 ff 05\n   00076e6a ff 00\n   00076e6b ff 00\n   00076e6c ff 00\n   00076e6d ff 6a\n   00076e6e ff 18\n   00076e6f ff 00\n   00076e70 ff 64\n   00076e71 ff 00\n   00076e72 ff 17\n   00076e73 ff 00\n   00076e74 ff c0\n   00076e75 ff 27\n   00076e76 ff 09\n   00076e77 ff 00\n   00076e78 ff f0\n   00076e79 ff 00\n   00076e7a ff 00\n   00076e7b ff 00\n   00076e7c ff ac\n   00076e7d ff a2\n   00076e7e ff fe\n   00076e7f ff 3f\n   00076e80 ff 01\n   00076e81 ff 00\n   00076e82 ff 00\n   00076e83 ff 00\n   00076e84 ff b0\n   00076e85 ff dc\n   00076e87 ff 3f\n   00076e88 ff 00\n   00076e89 ff 00\n   00076e8a ff 00\n   00076e8b ff 00\n   00076e8c ff 3a\n   00076e8d ff 01\n   00076e8e ff 02\n   00076e8f ff 01\n   00076e90 ff df\n   00076e91 ff 00\n   00076e92 ff d5\n   00076e93 ff 00\n   00076e94 ff 3a\n   00076e95 ff 01\n   00076e96 ff a2\n   00076e97 ff 00\n   00076e98 ff 7f\n   00076e99 ff 00\n   00076e9a ff 75\n   00076e9b ff 00\n   00076e9c ff 2c\n   00076e9d ff 00\n   00076e9e ff 2c\n   00076e9f ff 00\n   00076ea0 ff 30\n   00076ea1 ff 00\n   00076ea2 ff 3c\n   00076ea3 ff 00\n   00076ea4 ff 2c\n   00076ea5 ff 00\n   00076ea6 ff 2c\n   00076ea7 ff 00\n   00076ea8 ff 30\n   00076ea9 ff 00\n   00076eaa ff 3c\n   00076eab ff 00\n   00076eac ff 3c\n   00076ead ff 00\n   00076eae ff 30\n   00076eaf ff 00\n   00076eb0 ff 30\n   00076eb1 ff 00\n   00076eb2 ff 2c\n   00076eb3 ff 00\n   00076eb4 ff 2c\n   00076eb5 ff 00\n   00076eb6 ff 2c\n   00076eb7 ff 00\n   00076eb8 ff 2c\n   00076eb9 ff 00\n   00076eba ff 2c\n   00076ebb ff 00\n   00076ebc ff 3c\n   00076ebd ff 00\n   00076ebe ff 30\n   00076ebf ff 00\n   00076ec0 ff 30\n   00076ec1 ff 00\n   00076ec2 ff 2c\n   00076ec3 ff 00\n   00076ec4 ff 2c\n   00076ec5 ff 00\n   00076ec6 ff 2c\n   00076ec7 ff 00\n   00076ec8 ff 2c\n   00076ec9 ff 00\n   00076eca ff 2c\n   00076ecb ff 00\n   00076ecc ff 0b\n   00076ecd ff 02\n   00076ece ff 0b\n   00076ecf ff 02\n   00076ed0 ff 0b\n   00076ed1 ff 02\n   00076ed2 ff 00\n   00076ed3 ff 05\n   00076ed4 ff 0b\n   00076ed5 ff 00\n   00076ed6 ff 00\n   00076ed7 ff 00\n   00076ed8 ff 00\n   00076ed9 ff 00\n   00076eda ff 00\n   00076edb ff 00\n   00076edc ff 00\n   00076edd ff 03\n   00076ede ff 00\n   00076edf ff 03\n   00076ee0 ff 00\n   00076ee1 ff 0a\n   00076ee2 ff 00\n   00076ee3 ff 0a\n   00076ee4 ff 00\n   00076ee5 ff 0b\n   00076ee6 ff 00\n   00076ee7 ff 0b\n   00076ee8 ff 00\n   00076ee9 ff 07\n   00076eea ff 00\n   00076eeb ff 07\n   00076eec ff 00\n   00076eed ff 08\n   00076eee ff 00\n   00076eef ff 08\n   00076ef0 ff 00\n   00076ef1 ff 00\n   00076ef2 ff 00\n   00076ef3 ff 00\n   00076ef4 ff 00\n   00076ef5 ff 00\n   00076ef6 ff 00\n   00076ef7 ff 00\n   00076ef8 ff 00\n   00076ef9 ff 00\n   00076efa ff 00\n   00076efb ff 00\n   00076efc ff 0c\n   00076efd ff 02\n   00076efe ff 08\n   00076eff ff 02\n   00076f00 ff 0b\n   00076f01 ff 02\n   00076f02 ff 00\n   00076f03 ff 05\n   00076f04 ff 0b\n   00076f05 ff 72\n   00076f06 ff 00\n   00076f07 ff 00\n   00076f08 ff 08\n   00076f09 ff 02\n   00076f0a ff 0d\n   00076f0b ff 02\n   00076f0c ff 0b\n   00076f0d ff 02\n   00076f0e ff 00\n   00076f0f ff 05\n   00076f10 ff 0b\n   00076f11 ff 65\n   00076f12 ff 00\n   00076f13 ff 00\n   00076f14 ff 0d\n   00076f15 ff 02\n   00076f16 ff 09\n   00076f17 ff 02\n   00076f18 ff 0b\n   00076f19 ff 02\n   00076f1a ff 00\n   00076f1b ff 05\n   00076f1c ff 0b\n   00076f1d ff 5c\n   00076f1e ff 00\n   00076f1f ff 00\n   00076f20 ff 09\n   00076f21 ff 02\n   00076f22 ff 0e\n   00076f23 ff 02\n   00076f24 ff 0b\n   00076f25 ff 02\n   00076f26 ff 00\n   00076f27 ff 05\n   00076f28 ff 0b\n   00076f29 ff 58\n   00076f2a ff 00\n   00076f2b ff 00\n   00076f2c ff 0e\n   00076f2d ff 02\n   00076f2e ff 0a\n   00076f2f ff 02\n   00076f30 ff 0b\n   00076f31 ff 02\n   00076f32 ff 00\n   00076f33 ff 05\n   00076f34 ff 0b\n   00076f35 ff 52\n   00076f36 ff 00\n   00076f37 ff 00\n   00076f38 ff 0a\n   00076f39 ff 02\n   00076f3a ff 0f\n   00076f3b ff 02\n   00076f3c ff 0b\n   00076f3d ff 02\n   00076f3e ff 0b\n   00076f3f ff 05\n   00076f40 ff 0b\n   00076f41 ff 4b\n   00076f42 ff 00\n   00076f43 ff 00\n   00076f44 ff 0f\n   00076f45 ff 02\n   00076f46 ff 0b\n   00076f47 ff 02\n   00076f48 ff 0b\n   00076f49 ff 02\n   00076f4a ff 0b\n   00076f4b ff 05\n   00076f4c ff 0b\n   00076f4d ff 38\n   00076f4e ff 00\n   00076f4f ff 00\n   00076f50 ff 0b\n   00076f51 ff 02\n   00076f52 ff 0b\n   00076f53 ff 02\n   00076f54 ff 0b\n   00076f55 ff 02\n   00076f56 ff 0b\n   00076f57 ff 05\n   00076f58 ff 0b\n   00076f59 ff 40\n   00076f5a ff 00\n   00076f5b ff 00\n   00076f5c ff 0c\n   00076f5d ff 02\n   00076f5e ff 08\n   00076f5f ff 02\n   00076f60 ff 0b\n   00076f61 ff 02\n   00076f62 ff 00\n   00076f63 ff 05\n   00076f64 ff 0b\n   00076f65 ff 72\n   00076f66 ff 00\n   00076f67 ff 00\n   00076f68 ff 08\n   00076f69 ff 02\n   00076f6a ff 0d\n   00076f6b ff 02\n   00076f6c ff 0b\n   00076f6d ff 02\n   00076f6e ff 00\n   00076f6f ff 05\n   00076f70 ff 0b\n   00076f71 ff 65\n   00076f72 ff 00\n   00076f73 ff 00\n   00076f74 ff 0d\n   00076f75 ff 02\n   00076f76 ff 09\n   00076f77 ff 02\n   00076f78 ff 0b\n   00076f79 ff 02\n   00076f7a ff 00\n   00076f7b ff 05\n   00076f7c ff 0b\n   00076f7d ff 5c\n   00076f7e ff 00\n   00076f7f ff 00\n   00076f80 ff 09\n   00076f81 ff 02\n   00076f82 ff 0e\n   00076f83 ff 02\n   00076f84 ff 0b\n   00076f85 ff 02\n   00076f86 ff 00\n   00076f87 ff 05\n   00076f88 ff 0b\n   00076f89 ff 58\n   00076f8a ff 00\n   00076f8b ff 00\n   00076f8c ff 0e\n   00076f8d ff 02\n   00076f8e ff 0a\n   00076f8f ff 02\n   00076f90 ff 0b\n   00076f91 ff 02\n   00076f92 ff 00\n   00076f93 ff 05\n   00076f94 ff 0b\n   00076f95 ff 52\n   00076f96 ff 00\n   00076f97 ff 00\n   00076f98 ff 0a\n   00076f99 ff 02\n   00076f9a ff 0b\n   00076f9b ff 02\n   00076f9c ff 05\n   00076f9d ff 02\n   00076f9e ff 00\n   00076f9f ff 05\n   00076fa0 ff 0b\n   00076fa1 ff 4b\n   00076fa2 ff 00\n   00076fa3 ff 00\n   00076fa4 ff 0f\n   00076fa5 ff 02\n   00076fa6 ff 0b\n   00076fa7 ff 02\n   00076fa8 ff 05\n   00076fa9 ff 02\n   00076faa ff 00\n   00076fab ff 05\n   00076fac ff 0b\n   00076fad ff 38\n   00076fae ff 00\n   00076faf ff 00\n   00076fb0 ff 0b\n   00076fb1 ff 02\n   00076fb2 ff 05\n   00076fb3 ff 02\n   00076fb4 ff 00\n   00076fb5 ff 02\n   00076fb6 ff 00\n   00076fb7 ff 05\n   00076fb8 ff 0b\n   00076fb9 ff 40\n   00076fba ff 00\n   00076fbb ff 00\n   00076fbc ff 06\n   00076fbd ff 02\n   00076fbe ff 05\n   00076fbf ff 02\n   00076fc0 ff 00\n   00076fc1 ff 02\n   00076fc2 ff 00\n   00076fc3 ff 05\n   00076fc4 ff 0b\n   00076fc5 ff 39\n   00076fc6 ff 00\n   00076fc7 ff 00\n   00076fc8 ff 05\n   00076fc9 ff 02\n   00076fca ff 00\n   00076fcb ff 02\n   00076fcc ff 00\n   00076fcd ff 02\n   00076fce ff 00\n   00076fcf ff 05\n   00076fd0 ff 0b\n   00076fd1 ff 39\n   00076fd2 ff 00\n   00076fd3 ff 00\n   00076fd4 ff 00\n   00076fd5 ff 02\n   00076fd6 ff 00\n   00076fd7 ff 02\n   00076fd8 ff 00\n   00076fd9 ff 02\n   00076fda ff 00\n   00076fdb ff 05\n   00076fdc ff 0b\n   00076fdd ff 00\n   00076fde ff 00\n   00076fdf ff 00\n   00076fe0 ff 00\n   00076fe1 ff 00\n   00076fe2 ff 00\n   00076fe3 ff 00\n   00076fe4 ff 00\n   00076fe5 ff 00\n   00076fe6 ff 00\n   00076fe7 ff 00\n   00076fe8 ff 00\n   00076fe9 ff 00\n   00076fea ff 00\n   00076feb ff 00\n   00076fec ff 07\n   00076fed ff 02\n   00076fee ff 06\n   00076fef ff 02\n   00076ff0 ff 05\n   00076ff1 ff 02\n   00076ff2 ff 00\n   00076ff3 ff 05\n   00076ff4 ff 0b\n   00076ff5 ff 40\n   00076ff6 ff 00\n   00076ff7 ff 00\n   00076ff8 ff 06\n   00076ff9 ff 02\n   00076ffa ff 05\n   00076ffb ff 02\n   00076ffc ff 00\n   00076ffd ff 02\n   00076ffe ff 00\n   00076fff ff 05\n   00077000 ff 0b\n   00077001 ff 39\n   00077002 ff 00\n   00077003 ff 00\n   00077004 ff 05\n   00077005 ff 02\n   00077006 ff 00\n   00077007 ff 02\n   00077008 ff 00\n   00077009 ff 02\n   0007700a ff 00\n   0007700b ff 05\n   0007700c ff 0b\n   0007700d ff 39\n   0007700e ff 00\n   0007700f ff 00\n   00077010 ff 00\n   00077011 ff 02\n   00077012 ff 00\n   00077013 ff 02\n   00077014 ff 00\n   00077015 ff 02\n   00077016 ff 00\n   00077017 ff 05\n   00077018 ff 0b\n   00077019 ff 00\n   0007701a ff 00\n   0007701b ff 00\n   0007701c ff 1f\n   0007701d ff 02\n   0007701e ff 16\n   0007701f ff 02\n   00077020 ff 0b\n   00077021 ff 02\n   00077022 ff 00\n   00077023 ff 05\n   00077024 ff 0b\n   00077025 ff 72\n   00077026 ff 00\n   00077027 ff 00\n   00077028 ff 17\n   00077029 ff 02\n   0007702a ff 15\n   0007702b ff 02\n   0007702c ff 0b\n   0007702d ff 02\n   0007702e ff 00\n   0007702f ff 05\n   00077030 ff 0b\n   00077031 ff 72\n   00077032 ff 00\n   00077033 ff 00\n   00077034 ff 16\n   00077035 ff 02\n   00077036 ff 14\n   00077037 ff 02\n   00077038 ff 0b\n   00077039 ff 02\n   0007703a ff 00\n   0007703b ff 05\n   0007703c ff 0b\n   0007703d ff 72\n   0007703e ff 00\n   0007703f ff 00\n   00077040 ff 15\n   00077041 ff 02\n   00077042 ff 13\n   00077043 ff 02\n   00077044 ff 0b\n   00077045 ff 02\n   00077046 ff 00\n   00077047 ff 05\n   00077048 ff 0b\n   00077049 ff 60\n   0007704a ff 00\n   0007704b ff 00\n   0007704c ff 14\n   0007704d ff 02\n   0007704e ff 12\n   0007704f ff 02\n   00077050 ff 0b\n   00077051 ff 02\n   00077052 ff 00\n   00077053 ff 05\n   00077054 ff 0b\n   00077055 ff 55\n   00077056 ff 00\n   00077057 ff 00\n   00077058 ff 13\n   00077059 ff 02\n   0007705a ff 12\n   0007705b ff 02\n   0007705c ff 0b\n   0007705d ff 02\n   0007705e ff 00\n   0007705f ff 05\n   00077060 ff 0b\n   00077061 ff 4b\n   00077062 ff 00\n   00077063 ff 00\n   00077064 ff 12\n   00077065 ff 02\n   00077066 ff 11\n   00077067 ff 02\n   00077068 ff 0b\n   00077069 ff 02\n   0007706a ff 00\n   0007706b ff 05\n   0007706c ff 0b\n   0007706d ff 40\n   0007706e ff 00\n   0007706f ff 00\n   00077070 ff 11\n   00077071 ff 02\n   00077072 ff 0b\n   00077073 ff 02\n   00077074 ff 05\n   00077075 ff 02\n   00077076 ff 00\n   00077077 ff 05\n   00077078 ff 0b\n   00077079 ff 3b\n   0007707a ff 00\n   0007707b ff 00\n   0007707c ff 10\n   0007707d ff 02\n   0007707e ff 0b\n   0007707f ff 02\n   00077080 ff 05\n   00077081 ff 02\n   00077082 ff 00\n   00077083 ff 05\n   00077084 ff 0b\n   00077085 ff 32\n   00077086 ff 00\n   00077087 ff 00\n   00077088 ff 06\n   00077089 ff 02\n   0007708a ff 05\n   0007708b ff 02\n   0007708c ff 00\n   0007708d ff 02\n   0007708e ff 00\n   0007708f ff 05\n   00077090 ff 0b\n   00077091 ff 39\n   00077092 ff 00\n   00077093 ff 00\n   00077094 ff 05\n   00077095 ff 02\n   00077096 ff 00\n   00077097 ff 02\n   00077098 ff 00\n   00077099 ff 02\n   0007709a ff 00\n   0007709b ff 05\n   0007709c ff 0b\n   0007709d ff 39\n   0007709e ff 00\n   0007709f ff 00\n   000770a0 ff 00\n   000770a1 ff 02\n   000770a2 ff 00\n   000770a3 ff 02\n   000770a4 ff 00\n   000770a5 ff 02\n   000770a6 ff 00\n   000770a7 ff 05\n   000770a8 ff 0b\n   000770a9 ff 00\n   000770aa ff 00\n   000770ab ff 00\n   000770ac ff 1f\n   000770ad ff 02\n   000770ae ff 16\n   000770af ff 02\n   000770b0 ff 0b\n   000770b1 ff 02\n   000770b2 ff 00\n   000770b3 ff 05\n   000770b4 ff 0b\n   000770b5 ff 72\n   000770b6 ff 00\n   000770b7 ff 00\n   000770b8 ff 17\n   000770b9 ff 02\n   000770ba ff 15\n   000770bb ff 02\n   000770bc ff 0b\n   000770bd ff 02\n   000770be ff 00\n   000770bf ff 05\n   000770c0 ff 0b\n   000770c1 ff 72\n   000770c2 ff 00\n   000770c3 ff 00\n   000770c4 ff 16\n   000770c5 ff 02\n   000770c6 ff 14\n   000770c7 ff 02\n   000770c8 ff 0b\n   000770c9 ff 02\n   000770ca ff 00\n   000770cb ff 05\n   000770cc ff 0b\n   000770cd ff 72\n   000770ce ff 00\n   000770cf ff 00\n   000770d0 ff 15\n   000770d1 ff 02\n   000770d2 ff 13\n   000770d3 ff 02\n   000770d4 ff 0b\n   000770d5 ff 02\n   000770d6 ff 00\n   000770d7 ff 05\n   000770d8 ff 0b\n   000770d9 ff 60\n   000770da ff 00\n   000770db ff 00\n   000770dc ff 14\n   000770dd ff 02\n   000770de ff 12\n   000770df ff 02\n   000770e0 ff 0b\n   000770e1 ff 02\n   000770e2 ff 00\n   000770e3 ff 05\n   000770e4 ff 0b\n   000770e5 ff 55\n   000770e6 ff 00\n   000770e7 ff 00\n   000770e8 ff 13\n   000770e9 ff 02\n   000770ea ff 12\n   000770eb ff 02\n   000770ec ff 0b\n   000770ed ff 02\n   000770ee ff 00\n   000770ef ff 05\n   000770f0 ff 0b\n   000770f1 ff 4b\n   000770f2 ff 00\n   000770f3 ff 00\n   000770f4 ff 12\n   000770f5 ff 02\n   000770f6 ff 11\n   000770f7 ff 02\n   000770f8 ff 10\n   000770f9 ff 02\n   000770fa ff 0b\n   000770fb ff 05\n   000770fc ff 0b\n   000770fd ff 40\n   000770fe ff 00\n   000770ff ff 00\n   00077100 ff 11\n   00077101 ff 02\n   00077102 ff 10\n   00077103 ff 02\n   00077104 ff 0b\n   00077105 ff 02\n   00077106 ff 0b\n   00077107 ff 05\n   00077108 ff 0b\n   00077109 ff 3b\n   0007710a ff 00\n   0007710b ff 00\n   0007710c ff 10\n   0007710d ff 02\n   0007710e ff 0b\n   0007710f ff 02\n   00077110 ff 0b\n   00077111 ff 02\n   00077112 ff 0b\n   00077113 ff 05\n   00077114 ff 0b\n   00077115 ff 32\n   00077116 ff 00\n   00077117 ff 00\n   00077118 ff f0\n   00077119 ff aa\n   0007711a ff fe\n   0007711b ff 3f\n   0007711c ff 00\n   0007711d ff 90\n   0007711e ff 01\n   0007711f ff 00\n   00077120 ff 02\n   00077121 ff 00\n   00077122 ff 00\n   00077123 ff 00\n   00077124 ff 02\n   00077125 ff 00\n   00077126 ff 00\n   00077127 ff 00\n   00077129 ff 00\n   0007712a ff 00\n   0007712b ff 00\n   0007712c ff 01\n   0007712d ff 01\n   0007712e ff 01\n   0007712f ff 01\n   00077130 ff 01\n   00077131 ff 01\n   00077132 ff 00\n   00077133 ff 00\n   00077134 ff 00\n   00077135 ff 00\n   00077136 ff 00\n   00077137 ff 00\n   00077138 ff 01\n   00077139 ff 00\n   0007713a ff 00\n   0007713b ff 00\n   0007713c ff 01\n   0007713d ff 00\n   0007713e ff 00\n   0007713f ff 00\n   00077140 ff 04\n   00077141 ff 00\n   00077142 ff 00\n   00077143 ff 00\n   00077144 ff 10\n   00077145 ff 5f\n   00077146 ff 24\n   00077147 ff 40\n   00077148 ff 10\n   00077149 ff 5f\n   0007714a ff 24\n   0007714b ff 40\n   0007714c ff 10\n   0007714d ff 5f\n   0007714e ff 24\n   0007714f ff 40\n   00077150 ff 10\n   00077151 ff 5f\n   00077152 ff 24\n   00077153 ff 40\n   00077154 ff c4\n   00077155 ff 5f\n   00077156 ff 24\n   00077157 ff 40\n   00077158 ff c4\n   00077159 ff 5f\n   0007715a ff 24\n   0007715b ff 40\n   0007715c ff c4\n   0007715d ff 5f\n   0007715e ff 24\n   0007715f ff 40\n   00077160 ff 00\n   00077161 ff 00\n   00077162 ff 00\n   00077163 ff 00\n   00077164 ff 00\n   00077165 ff 00\n   00077166 ff 00\n   00077167 ff 00\n   00077168 ff 00\n   00077169 ff 00\n   0007716a ff 00\n   0007716b ff 00\n   0007716c ff 05\n   0007716d ff 00\n   0007716e ff 00\n   0007716f ff 00\n   00077170 ff b0\n   00077171 ff 86\n   00077172 ff fe\n   00077173 ff 3f\n   00077174 ff 01\n   00077175 ff 00\n   00077176 ff 00\n   00077177 ff 00\n   00077178 ff c0\n   00077179 ff 86\n   0007717a ff fe\n   0007717b ff 3f\n   0007717c ff c0\n   0007717d ff 00\n   0007717e ff 00\n   0007717f ff 00\n   00077180 ff 00\n   00077181 ff 00\n   00077182 ff 00\n   00077183 ff 00\n   00077184 ff 00\n   00077185 ff 00\n   00077186 ff 00\n   00077187 ff 00\n   00077188 ff 00\n   00077189 ff 00\n   0007718a ff 00\n   0007718b ff 00\n   0007718c ff 55\n   0007718d ff 00\n   0007718e ff f0\n   0007718f ff 03\n   00077190 ff c8\n   00077191 ff 39\n   00077192 ff 25\n   00077193 ff 40\n   00077194 ff a8\n   00077195 ff 4b\n   00077196 ff 25\n   00077197 ff 40\n   00077198 ff a0\n   00077199 ff 38\n   0007719a ff 25\n   0007719b ff 40\n   0007719c ff 3c\n   0007719d ff da\n   0007719e ff 26\n   0007719f ff 40\n   000771a0 ff ec\n   000771a1 ff 60\n   000771a2 ff 00\n   000771a3 ff 40\n   000771a4 ff d0\n   000771a5 ff 60\n   000771a6 ff 00\n   000771a7 ff 40\n   000771a8 ff 84\n   000771a9 ff 6b\n   000771aa ff 25\n   000771ab ff 40\n   000771ac ff 34\n   000771ad ff da\n   000771ae ff 26\n   000771af ff 40\n   000771b0 ff 00\n   000771b1 ff 00\n   000771b2 ff 00\n   000771b3 ff 00\n   000771b4 ff 00\n   000771b5 ff 00\n   000771b6 ff 00\n   000771b7 ff 00\n   000771b8 ff 00\n   000771b9 ff 00\n   000771ba ff 00\n   000771bb ff 00\n   000771bc ff 00\n   000771bd ff 00\n   000771be ff 00\n   000771bf ff 04\n   000771c0 ff 00\n   000771c1 ff 20\n   000771c2 ff 00\n   000771c3 ff 24\n   000771c4 ff 00\n   000771c5 ff 28\n   000771c6 ff 00\n   000771c7 ff 2c\n   000771c8 ff 00\n   000771c9 ff 30\n   000771ca ff 00\n   000771cb ff 34\n   000771cc ff 00\n   000771cd ff 40\n   000771ce ff 00\n   000771cf ff 60\n   000771d0 ff 00\n   000771d1 ff 64\n   000771d2 ff 00\n   000771d3 ff 68\n   000771d4 ff 00\n   000771d5 ff 70\n   000771d6 ff 00\n   000771d7 ff 74\n   000771d8 ff 00\n   000771d9 ff 78\n   000771da ff 00\n   000771db ff 7c\n   000771dc ff 07\n   000771dd ff 03\n   000771de ff 03\n   000771df ff 00\n   000771e0 ff 3c\n   000771e1 ff 00\n   000771e2 ff 00\n   000771e3 ff 00\n   000771e8 ff 00\n   000771e9 ff 00\n   000771ea ff 00\n   000771eb ff 00\n   000771ec ff 02\n   000771ed ff 00\n   000771ee ff 00\n   000771ef ff 00\n   000771f0 ff 01\n   000771f1 ff 02\n   000771f2 ff 00\n   000771f3 ff 00\n   000771f4 ff 01\n   000771f5 ff 00\n   000771f6 ff 5e\n   000771f7 ff 13\n   000771f8 ff 13\n   000771f9 ff 13\n   000771fa ff 00\n   000771fb ff 00\n   00077202 ff 00\n   00077203 ff 00\n   00077204 ff 2e\n   00077205 ff 34\n   00077206 ff 18\n   00077207 ff 38\n   00077208 ff 14\n   00077209 ff 3c\n   0007720a ff 40\n   0007720b ff 1c\n   0007720c ff 20\n   0007720d ff 24\n   0007720e ff 28\n   0007720f ff 2c\n   00077210 ff 30\n   00077211 ff 04\n   00077212 ff 08\n   00077213 ff 0c\n   00077214 ff 10\n   00077215 ff 00\n   00077216 ff 00\n   00077217 ff 00\n   00077219 ff 03\n   0007721a ff 00\n   0007721b ff 00\n   0007721c ff e8\n   0007721d ff 03\n   0007721e ff 00\n   0007721f ff 00\n   00077220 ff 01\n   00077221 ff 08\n   00077222 ff 01\n   00077223 ff 02\n   00077224 ff 01\n   00077225 ff 44\n   00077226 ff 45\n   00077227 ff 23\n   00077228 ff 5c\n   00077229 ff 77\n   0007722a ff 76\n   0007722b ff 32\n   0007722c ff 01\n   0007722d ff 08\n   0007722e ff 06\n   0007722f ff 04\n   00077230 ff 02\n   00077231 ff 01\n   00077232 ff 01\n   00077233 ff 02\n   00077234 ff 04\n   00077235 ff 08\n   00077237 ff 00\n   00077238 ff 40\n   00077239 ff 84\n   0007723a ff fe\n   0007723b ff 3f\n   0007723c ff 02\n   0007723d ff 00\n   0007723e ff 00\n   0007723f ff 00\n   00077240 ff 37\n   00077241 ff 84\n   00077242 ff fe\n   00077243 ff 3f\n   00077244 ff 03\n   00077245 ff 00\n   00077246 ff 00\n   00077247 ff 00\n   00077248 ff 31\n   00077249 ff 84\n   0007724a ff fe\n   0007724b ff 3f\n   0007724c ff 02\n   0007724d ff 00\n   0007724e ff 00\n   0007724f ff 00\n   00077250 ff 2b\n   00077251 ff 84\n   00077252 ff fe\n   00077253 ff 3f\n   00077254 ff 02\n   00077255 ff 00\n   00077256 ff 00\n   00077257 ff 00\n   00077258 ff 22\n   00077259 ff 84\n   0007725a ff fe\n   0007725b ff 3f\n   0007725c ff 03\n   0007725d ff 00\n   0007725e ff 00\n   0007725f ff 00\n   00077260 ff 0d\n   00077261 ff 84\n   00077262 ff fe\n   00077263 ff 3f\n   00077264 ff 07\n   00077265 ff 00\n   00077266 ff 00\n   00077267 ff 00\n   00077268 ff 04\n   00077269 ff 84\n   0007726a ff fe\n   0007726b ff 3f\n   0007726c ff 03\n   0007726d ff 00\n   0007726e ff 00\n   0007726f ff 00\n   00077271 ff 00\n   00077272 ff 00\n   00077274 ff 66\n   00077275 ff 00\n   00077277 ff c0\n   00077278 ff 00\n   0007727a ff 00\n   0007727b ff 00\n   0007727d ff 80\n   0007727e ff 00\n   00077281 ff 00\n   00077282 ff 00\n   00077284 ff 00\n   00077285 ff 00\n   00077286 ff 00\n   00077288 ff 80\n   00077289 ff 00\n   0007728c ff 00\n   0007728f ff 00\n   00077290 ff 00\n   00077291 ff 00\n   00077292 ff 00\n   00077293 ff 00\n   00077294 ff 00\n   00077296 ff 00\n   00077297 ff 00\n   00077298 ff 00\n   0007729e ff 00\n   0007729f ff 00\n   000772a0 ff 00\n   000772a2 ff 00\n   000772a4 ff 00\n   000772a5 ff 00\n   000772a6 ff 00\n   000772a8 ff 00\n   000772a9 ff 00\n   000772aa ff 00\n   000772ad ff 8c\n   000772ae ff 14\n   000772af ff 00\n   000772b0 ff 00\n   000772b1 ff 00\n   000772b2 ff 00\n   000772b3 ff 00\n   000772b4 ff 6c\n   000772b5 ff 07\n   000772b6 ff 00\n   000772b7 ff 00\n   000772b8 ff 01\n   000772b9 ff 64\n   000772ba ff 6f\n   000772bb ff 6d\n   000772bc ff 6f\n   000772bd ff 74\n   000772be ff 69\n   000772bf ff 63\n   000772c0 ff 7a\n   000772c1 ff 2f\n   000772c2 ff 6f\n   000772c3 ff 75\n   000772c4 ff 74\n   000772c5 ff 00\n   000772c6 ff 64\n   000772c7 ff 6f\n   000772c8 ff 6d\n   000772c9 ff 6f\n   000772ca ff 74\n   000772cb ff 69\n   000772cc ff 63\n   000772cd ff 7a\n   000772ce ff 2f\n   000772cf ff 69\n   000772d0 ff 6e\n   000772d1 ff 00\n   000772d2 ff 01\n   000772d3 ff 01\n   000772d4 ff 08\n   000772d5 ff 01\n   000772d6 ff 01\n   000772d7 ff 00\n   000772d8 ff 01\n   000772d9 ff 01\n   000772da ff 01\n   000772db ff 01\n   000772dc ff 01\n   000772dd ff 01\n   000772de ff 01\n   000772df ff 01\n   000772e0 ff 01\n   000772e1 ff 01\n   000772e2 ff 01\n   000772e3 ff 01\n   000772e4 ff 01\n   000772e5 ff 01\n   000772e6 ff 01\n   000772e7 ff 01\n   000772e8 ff 01\n   000772e9 ff 01\n   000772ea ff 01\n   000772eb ff 01\n   000772ec ff 01\n   000772ed ff 01\n   000772ee ff 01\n   000772ef ff 01\n   000772f0 ff 01\n   000772f1 ff 01\n   000772f2 ff 01\n   000772f3 ff 01\n   000772f4 ff 01\n   000772f5 ff 01\n   000772f6 ff 01\n   000772f7 ff 01\n   000772f8 ff 02\n   000772f9 ff 02\n   000772fa ff 02\n   000772fb ff 02\n   000772fc ff 02\n   000772fd ff 02\n   000772fe ff 02\n   000772ff ff 02\n   00077300 ff 03\n   00077301 ff 03\n   00077302 ff 03\n   00077303 ff 03\n   00077304 ff 03\n   00077305 ff 04\n   00077306 ff 04\n   00077307 ff 04\n   00077308 ff 04\n   00077309 ff 04\n   0007730a ff 05\n   0007730b ff 05\n   0007730c ff 05\n   0007730d ff 05\n   0007730e ff 06\n   0007730f ff 06\n   00077310 ff 06\n   00077311 ff 06\n   00077312 ff 07\n   00077313 ff 07\n   00077314 ff 07\n   00077315 ff 07\n   00077316 ff 08\n   00077317 ff 08\n   00077318 ff 08\n   00077319 ff 09\n   0007731a ff 09\n   0007731b ff 09\n   0007731c ff 0a\n   0007731d ff 0a\n   0007731e ff 0a\n   0007731f ff 0b\n   00077320 ff 0b\n   00077321 ff 0c\n   00077322 ff 0c\n   00077323 ff 0c\n   00077324 ff 0d\n   00077325 ff 0d\n   00077326 ff 0e\n   00077327 ff 0e\n   00077328 ff 0f\n   00077329 ff 0f\n   0007732a ff 0f\n   0007732b ff 10\n   0007732c ff 10\n   0007732d ff 11\n   0007732e ff 11\n   0007732f ff 12\n   00077330 ff 12\n   00077331 ff 13\n   00077332 ff 13\n   00077333 ff 14\n   00077334 ff 14\n   00077335 ff 15\n   00077336 ff 16\n   00077337 ff 16\n   00077338 ff 17\n   00077339 ff 17\n   0007733a ff 18\n   0007733b ff 19\n   0007733c ff 19\n   0007733d ff 1a\n   0007733e ff 1a\n   0007733f ff 1b\n   00077340 ff 1c\n   00077341 ff 1c\n   00077342 ff 1d\n   00077343 ff 1e\n   00077344 ff 1e\n   00077345 ff 1f\n   00077346 ff 20\n   00077347 ff 21\n   00077348 ff 21\n   00077349 ff 22\n   0007734a ff 23\n   0007734b ff 24\n   0007734c ff 24\n   0007734d ff 25\n   0007734e ff 26\n   0007734f ff 27\n   00077350 ff 28\n   00077351 ff 28\n   00077352 ff 29\n   00077353 ff 2a\n   00077354 ff 2b\n   00077355 ff 2c\n   00077356 ff 2d\n   00077357 ff 2e\n   00077358 ff 2e\n   00077359 ff 2f\n   0007735a ff 30\n   0007735b ff 31\n   0007735c ff 32\n   0007735d ff 33\n   0007735e ff 34\n   0007735f ff 35\n   00077360 ff 36\n   00077361 ff 37\n   00077362 ff 38\n   00077363 ff 39\n   00077364 ff 3a\n   00077365 ff 3b\n   00077366 ff 3c\n   00077367 ff 3d\n   00077368 ff 3e\n   00077369 ff 3f\n   0007736a ff 40\n   0007736b ff 41\n   0007736c ff 43\n   0007736d ff 44\n   0007736e ff 45\n   0007736f ff 46\n   00077370 ff 47\n   00077371 ff 48\n   00077372 ff 49\n   00077373 ff 4b\n   00077374 ff 4c\n   00077375 ff 4d\n   00077376 ff 4e\n   00077377 ff 50\n   00077378 ff 51\n   00077379 ff 52\n   0007737a ff 53\n   0007737b ff 55\n   0007737c ff 56\n   0007737d ff 57\n   0007737e ff 59\n   0007737f ff 5a\n   00077380 ff 5b\n   00077381 ff 5d\n   00077382 ff 5e\n   00077383 ff 5f\n   00077384 ff 61\n   00077385 ff 62\n   00077386 ff 63\n   00077387 ff 65\n   00077388 ff 66\n   00077389 ff 68\n   0007738a ff 69\n   0007738b ff 6b\n   0007738c ff 6c\n   0007738d ff 6e\n   0007738e ff 6f\n   0007738f ff 71\n   00077390 ff 72\n   00077391 ff 74\n   00077392 ff 75\n   00077393 ff 77\n   00077394 ff 79\n   00077395 ff 7a\n   00077396 ff 7c\n   00077397 ff 7d\n   00077398 ff 7f\n   00077399 ff 81\n   0007739a ff 82\n   0007739b ff 84\n   0007739c ff 86\n   0007739d ff 87\n   0007739e ff 89\n   0007739f ff 8b\n   000773a0 ff 8d\n   000773a1 ff 8e\n   000773a2 ff 90\n   000773a3 ff 92\n   000773a4 ff 94\n   000773a5 ff 96\n   000773a6 ff 97\n   000773a7 ff 99\n   000773a8 ff 9b\n   000773a9 ff 9d\n   000773aa ff 9f\n   000773ab ff a1\n   000773ac ff a3\n   000773ad ff a5\n   000773ae ff a6\n   000773af ff a8\n   000773b0 ff aa\n   000773b1 ff ac\n   000773b2 ff ae\n   000773b3 ff b0\n   000773b4 ff b2\n   000773b5 ff b4\n   000773b6 ff b6\n   000773b7 ff b8\n   000773b8 ff ba\n   000773b9 ff bd\n   000773ba ff bf\n   000773bb ff c1\n   000773bc ff c3\n   000773bd ff c5\n   000773be ff c7\n   000773bf ff c9\n   000773c0 ff cc\n   000773c1 ff ce\n   000773c2 ff d0\n   000773c3 ff d2\n   000773c4 ff d4\n   000773c5 ff d7\n   000773c6 ff d9\n   000773c7 ff db\n   000773c8 ff dd\n   000773c9 ff e0\n   000773ca ff e2\n   000773cb ff e4\n   000773cc ff e7\n   000773cd ff e9\n   000773ce ff eb\n   000773cf ff ee\n   000773d0 ff f0\n   000773d1 ff f3\n   000773d2 ff f5\n   000773d3 ff f8\n   000773d4 ff fa\n   000773d5 ff fd\n   000773d7 ff 00\n   000773dc ff 01\n   000773dd ff 00\n   000773de ff 00\n   000773df ff 00\n   000773e0 ff 70\n   000773e1 ff b3\n   000773e2 ff 85\n   000773e3 ff 56\n   000773e4 ff 01\n   000773e5 ff 01\n   000773e6 ff 01\n   000773e7 ff 01\n   000773e8 ff 01\n   000773e9 ff 04\n   000773ea ff 00\n   000773eb ff 00\n   000773ec ff c9\n   000773ed ff 00\n   000773ee ff 00\n   000773ef ff 00\n   000773f0 ff 01\n   000773f1 ff 0a\n   000773f2 ff 00\n   000773f3 ff 00\n   000773f4 ff 02\n   000773f5 ff 00\n   000773f6 ff 00\n   000773f7 ff 00\n   000773f8 ff 00\n   000773f9 ff c2\n   000773fa ff 01\n   000773fb ff 00\n   000773fc ff 00\n   000773fd ff 00\n   000773fe ff 01\n   000773ff ff 0a\n   00077400 ff 03\n   00077401 ff 00\n   00077402 ff 00\n   00077403 ff 00\n   00077404 ff 3c\n   00077405 ff 00\n   00077406 ff 00\n   00077407 ff 00\n   00077408 ff 00\n   00077409 ff 00\n   0007740a ff 01\n   0007740b ff 03\n   0007740c ff 02\n   0007740d ff 00\n   0007740e ff 00\n   0007740f ff 00\n   00077410 ff 78\n   00077411 ff 00\n   00077412 ff 00\n   00077413 ff 00\n   00077414 ff 78\n   00077415 ff 00\n   00077416 ff 00\n   00077417 ff 00\n   00077419 ff 00\n   0007741a ff 00\n   0007741b ff 00\n   0007741c ff 00\n   0007741d ff 00\n   0007741e ff cd\n   0007741f ff ab\n   00077420 ff 08\n   00077421 ff 00\n   00077422 ff 00\n   00077423 ff 00\n   00077424 ff 6e\n   00077425 ff 19\n   00077426 ff 00\n   00077427 ff 00\n   00077428 ff 00\n   00077429 ff 04\n   0007742a ff 01\n   0007742b ff 00\n   0007742c ff 05\n   0007742d ff 00\n   0007742e ff 00\n   0007742f ff 00\n   00077430 ff 04\n   00077431 ff 00\n   00077432 ff 00\n   00077433 ff 00\n   00077434 ff 6d\n   00077435 ff 9f\n   00077436 ff fe\n   00077437 ff 3f\n   00077438 ff 12\n   00077439 ff 00\n   0007743a ff 00\n   0007743b ff 00\n   0007743c ff d0\n   0007743d ff 85\n   0007743e ff fe\n   0007743f ff 3f\n   00077440 ff 78\n   00077441 ff 1c\n   00077442 ff 00\n   00077443 ff 00\n   00077444 ff 31\n   00077445 ff 2e\n   00077446 ff 35\n   00077447 ff 2e\n   00077448 ff 33\n   00077449 ff 28\n   0007744a ff 61\n   0007744b ff 65\n   0007744c ff 63\n   0007744d ff 32\n   0007744e ff 34\n   0007744f ff 61\n   00077450 ff 63\n   00077451 ff 39\n   00077452 ff 29\n   00077453 ff 00\n   00077454 ff 04\n   00077455 ff 06\n   00077456 ff 00\n   00077457 ff 00\n   00077458 ff 38\n   00077459 ff 45\n   0007745a ff 21\n   0007745b ff 40\n   0007745c ff 4c\n   0007745d ff 45\n   0007745e ff 21\n   0007745f ff 40\n   00077460 ff 60\n   00077461 ff 45\n   00077462 ff 21\n   00077463 ff 40\n   00077464 ff 74\n   00077465 ff 45\n   00077466 ff 21\n   00077467 ff 40\n   00077468 ff 04\n   00077469 ff 08\n   0007746a ff 10\n   0007746b ff 0c\n   0007746c ff 00\n   0007746d ff 2d\n   0007746e ff 23\n   0007746f ff 40\n   00077470 ff 08\n   00077471 ff 2d\n   00077472 ff 23\n   00077473 ff 40\n   00077474 ff c0\n   00077475 ff 2c\n   00077476 ff 23\n   00077477 ff 40\n   00077478 ff 08\n   00077479 ff 2d\n   0007747a ff 23\n   0007747b ff 40\n   0007747c ff d6\n   0007747d ff 2c\n   0007747e ff 23\n   0007747f ff 40\n   00077480 ff ed\n   00077481 ff 2c\n   00077482 ff 23\n   00077483 ff 40\n   00077484 ff fb\n   00077485 ff 2c\n   00077486 ff 23\n   00077487 ff 40\n   00077488 ff 91\n   00077489 ff 2d\n   0007748a ff 23\n   0007748b ff 40\n   0007748c ff 9c\n   0007748d ff 2d\n   0007748e ff 23\n   0007748f ff 40\n   00077490 ff 9c\n   00077491 ff 2d\n   00077492 ff 23\n   00077493 ff 40\n   00077494 ff 53\n   00077495 ff 2d\n   00077496 ff 23\n   00077497 ff 40\n   00077498 ff 69\n   00077499 ff 2d\n   0007749a ff 23\n   0007749b ff 40\n   0007749c ff 9c\n   0007749d ff 2d\n   0007749e ff 23\n   0007749f ff 40\n   000774a0 ff 9c\n   000774a1 ff 2d\n   000774a2 ff 23\n   000774a3 ff 40\n   000774a4 ff 7c\n   000774a5 ff 2d\n   000774a6 ff 23\n   000774a7 ff 40\n   000774a8 ff 9c\n   000774a9 ff 2d\n   000774aa ff 23\n   000774ab ff 40\n   000774ac ff 8a\n   000774ad ff 2d\n   000774ae ff 23\n   000774af ff 40\n   000774b0 ff 25\n   000774b1 ff 5c\n   000774b2 ff 23\n   000774b3 ff 40\n   000774b4 ff 61\n   000774b5 ff 5c\n   000774b6 ff 23\n   000774b7 ff 40\n   000774b8 ff 61\n   000774b9 ff 5c\n   000774ba ff 23\n   000774bb ff 40\n   000774bc ff 76\n   000774bd ff 5b\n   000774be ff 23\n   000774bf ff 40\n   000774c0 ff 61\n   000774c1 ff 5c\n   000774c2 ff 23\n   000774c3 ff 40\n   000774c4 ff eb\n   000774c5 ff c7\n   000774c6 ff 23\n   000774c7 ff 40\n   000774c8 ff 1e\n   000774c9 ff c9\n   000774ca ff 23\n   000774cb ff 40\n   000774cc ff e3\n   000774cd ff c9\n   000774ce ff 23\n   000774cf ff 40\n   000774d0 ff 03\n   000774d1 ff ca\n   000774d2 ff 23\n   000774d3 ff 40\n   000774d4 ff 83\n   000774d5 ff ca\n   000774d6 ff 23\n   000774d7 ff 40\n   000774d8 ff e3\n   000774d9 ff c9\n   000774da ff 23\n   000774db ff 40\n   000774dc ff c8\n   000774dd ff ca\n   000774de ff 23\n   000774df ff 40\n   000774e0 ff 2f\n   000774e1 ff cb\n   000774e2 ff 23\n   000774e3 ff 40\n   000774e4 ff 64\n   000774e5 ff 00\n   000774e6 ff 00\n   000774e7 ff 00\n   000774e8 ff 14\n   000774e9 ff 08\n   000774ea ff 40\n   000774eb ff 00\n   000774ec ff dd\n   000774ed ff 07\n   000774ee ff 00\n   000774ef ff 50\n   000774f0 ff f2\n   000774f1 ff 02\n   000774f2 ff 00\n   000774f3 ff 01\n   000774f4 ff 00\n   000774f5 ff 00\n   000774f6 ff 00\n   000774f7 ff 00\n   000774f8 ff 00\n   000774f9 ff 00\n   000774fa ff 00\n   000774fb ff 00\n   00077502 ff 00\n   00077503 ff 00\n   00077504 ff 52\n   00077505 ff 64\n   00077506 ff 80\n   00077507 ff f8\n   00077508 ff c9\n   00077509 ff 9b\n   0007750a ff 4b\n   0007750b ff e5\n   0007750c ff a6\n   0007750d ff 55\n   0007750e ff 58\n   0007750f ff ed\n   00077510 ff 5f\n   00077511 ff 5d\n   00077512 ff 60\n   00077513 ff 84\n   0007751a ff 00\n   0007751b ff 00\n   0007751c ff dd\n   0007751d ff 05\n   0007751e ff 00\n   0007751f ff 50\n   00077520 ff f2\n   00077521 ff 05\n   00077522 ff 00\n   00077523 ff 00\n   00077524 ff 02\n   00077525 ff 00\n   00077526 ff 00\n   00077527 ff 00\n   00077528 ff 00\n   00077529 ff 00\n   0007752a ff 00\n   0007752b ff 00\n   0007752c ff 00\n   0007752d ff 00\n   0007752e ff 00\n   0007752f ff 00\n   00077530 ff 00\n   00077531 ff 00\n   00077532 ff 00\n   00077533 ff 00\n   0007753c ff c9\n   0007753d ff 0f\n   0007753e ff da\n   0007753f ff a2\n   00077540 ff 21\n   00077541 ff 68\n   00077542 ff c2\n   00077543 ff 34\n   00077544 ff c4\n   00077545 ff c6\n   00077546 ff 62\n   00077547 ff 8b\n   00077548 ff 80\n   00077549 ff dc\n   0007754a ff 1c\n   0007754b ff d1\n   0007754c ff 29\n   0007754d ff 02\n   0007754e ff 4e\n   0007754f ff 08\n   00077550 ff 8a\n   00077551 ff 67\n   00077552 ff cc\n   00077553 ff 74\n   00077554 ff 02\n   00077555 ff 0b\n   00077556 ff be\n   00077557 ff a6\n   00077558 ff 3b\n   00077559 ff 13\n   0007755a ff 9b\n   0007755b ff 22\n   0007755c ff 51\n   0007755d ff 4a\n   0007755e ff 08\n   0007755f ff 79\n   00077560 ff 8e\n   00077561 ff 34\n   00077562 ff 04\n   00077563 ff dd\n   00077564 ff ef\n   00077565 ff 95\n   00077566 ff 19\n   00077567 ff b3\n   00077568 ff cd\n   00077569 ff 3a\n   0007756a ff 43\n   0007756b ff 1b\n   0007756c ff 30\n   0007756d ff 2b\n   0007756e ff 0a\n   0007756f ff 6d\n   00077570 ff f2\n   00077571 ff 5f\n   00077572 ff 14\n   00077573 ff 37\n   00077574 ff 4f\n   00077575 ff e1\n   00077576 ff 35\n   00077577 ff 6d\n   00077578 ff 6d\n   00077579 ff 51\n   0007757a ff c2\n   0007757b ff 45\n   0007757c ff e4\n   0007757d ff 85\n   0007757e ff b5\n   0007757f ff 76\n   00077580 ff 62\n   00077581 ff 5e\n   00077582 ff 7e\n   00077583 ff c6\n   00077584 ff f4\n   00077585 ff 4c\n   00077586 ff 42\n   00077587 ff e9\n   00077588 ff a6\n   00077589 ff 37\n   0007758a ff ed\n   0007758b ff 6b\n   0007758c ff 0b\n   0007758e ff 5c\n   0007758f ff b6\n   00077590 ff f4\n   00077591 ff 06\n   00077592 ff b7\n   00077593 ff ed\n   00077594 ff ee\n   00077595 ff 38\n   00077596 ff 6b\n   00077597 ff fb\n   00077598 ff 5a\n   00077599 ff 89\n   0007759a ff 9f\n   0007759b ff a5\n   0007759c ff ae\n   0007759d ff 9f\n   0007759e ff 24\n   0007759f ff 11\n   000775a0 ff 7c\n   000775a1 ff 4b\n   000775a2 ff 1f\n   000775a3 ff e6\n   000775a4 ff 49\n   000775a5 ff 28\n   000775a6 ff 66\n   000775a7 ff 51\n   000775a8 ff ec\n   000775a9 ff e4\n   000775aa ff 5b\n   000775ab ff 3d\n   000775ac ff c2\n   000775ad ff 00\n   000775ae ff 7c\n   000775af ff b8\n   000775b0 ff a1\n   000775b1 ff 63\n   000775b2 ff bf\n   000775b3 ff 05\n   000775b4 ff 98\n   000775b5 ff da\n   000775b6 ff 48\n   000775b7 ff 36\n   000775b8 ff 1c\n   000775b9 ff 55\n   000775ba ff d3\n   000775bb ff 9a\n   000775bc ff 69\n   000775bd ff 16\n   000775be ff 3f\n   000775bf ff a8\n   000775c0 ff fd\n   000775c1 ff 24\n   000775c2 ff cf\n   000775c3 ff 5f\n   000775c4 ff 83\n   000775c5 ff 65\n   000775c6 ff 5d\n   000775c7 ff 23\n   000775c8 ff dc\n   000775c9 ff a3\n   000775ca ff ad\n   000775cb ff 96\n   000775cc ff 1c\n   000775cd ff 62\n   000775ce ff f3\n   000775cf ff 56\n   000775d0 ff 20\n   000775d1 ff 85\n   000775d2 ff 52\n   000775d3 ff bb\n   000775d4 ff 9e\n   000775d5 ff d5\n   000775d6 ff 29\n   000775d7 ff 07\n   000775d8 ff 70\n   000775d9 ff 96\n   000775da ff 96\n   000775db ff 6d\n   000775dc ff 67\n   000775dd ff 0c\n   000775de ff 35\n   000775df ff 4e\n   000775e0 ff 4a\n   000775e1 ff bc\n   000775e2 ff 98\n   000775e3 ff 04\n   000775e4 ff f1\n   000775e5 ff 74\n   000775e6 ff 6c\n   000775e7 ff 08\n   000775e8 ff ca\n   000775e9 ff 23\n   000775ea ff 73\n   000775eb ff 27\n   000775f4 ff 98\n   000775f5 ff 2f\n   000775f6 ff 8a\n   000775f7 ff 42\n   000775f8 ff 91\n   000775f9 ff 44\n   000775fa ff 37\n   000775fb ff 71\n   000775fc ff cf\n   000775fd ff fb\n   000775fe ff c0\n   000775ff ff b5\n   00077600 ff a5\n   00077601 ff db\n   00077602 ff b5\n   00077603 ff e9\n   00077604 ff 5b\n   00077605 ff c2\n   00077606 ff 56\n   00077607 ff 39\n   00077608 ff f1\n   00077609 ff 11\n   0007760a ff f1\n   0007760b ff 59\n   0007760c ff a4\n   0007760d ff 82\n   0007760e ff 3f\n   0007760f ff 92\n   00077610 ff d5\n   00077611 ff 5e\n   00077612 ff 1c\n   00077613 ff ab\n   00077614 ff 98\n   00077615 ff aa\n   00077616 ff 07\n   00077617 ff d8\n   00077618 ff 01\n   00077619 ff 5b\n   0007761a ff 83\n   0007761b ff 12\n   0007761c ff be\n   0007761d ff 85\n   0007761e ff 31\n   0007761f ff 24\n   00077620 ff c3\n   00077621 ff 7d\n   00077622 ff 0c\n   00077623 ff 55\n   00077624 ff 74\n   00077625 ff 5d\n   00077626 ff be\n   00077627 ff 72\n   00077628 ff fe\n   00077629 ff b1\n   0007762a ff de\n   0007762b ff 80\n   0007762c ff a7\n   0007762d ff 06\n   0007762e ff dc\n   0007762f ff 9b\n   00077630 ff 74\n   00077631 ff f1\n   00077632 ff 9b\n   00077633 ff c1\n   00077634 ff c1\n   00077635 ff 69\n   00077636 ff 9b\n   00077637 ff e4\n   00077638 ff 86\n   00077639 ff 47\n   0007763a ff be\n   0007763b ff ef\n   0007763c ff c6\n   0007763d ff 9d\n   0007763e ff c1\n   0007763f ff 0f\n   00077640 ff cc\n   00077641 ff a1\n   00077642 ff 0c\n   00077643 ff 24\n   00077644 ff 6f\n   00077645 ff 2c\n   00077646 ff e9\n   00077647 ff 2d\n   00077648 ff aa\n   00077649 ff 84\n   0007764a ff 74\n   0007764b ff 4a\n   0007764c ff dc\n   0007764d ff a9\n   0007764e ff b0\n   0007764f ff 5c\n   00077650 ff da\n   00077651 ff 88\n   00077652 ff f9\n   00077653 ff 76\n   00077654 ff 52\n   00077655 ff 51\n   00077656 ff 3e\n   00077657 ff 98\n   00077658 ff 6d\n   00077659 ff c6\n   0007765a ff 31\n   0007765b ff a8\n   0007765c ff c8\n   0007765d ff 27\n   0007765e ff 03\n   0007765f ff b0\n   00077660 ff c7\n   00077661 ff 7f\n   00077662 ff 59\n   00077663 ff bf\n   00077664 ff f3\n   00077665 ff 0b\n   00077666 ff e0\n   00077667 ff c6\n   00077668 ff 47\n   00077669 ff 91\n   0007766a ff a7\n   0007766b ff d5\n   0007766c ff 51\n   0007766d ff 63\n   0007766e ff ca\n   0007766f ff 06\n   00077670 ff 67\n   00077671 ff 29\n   00077672 ff 29\n   00077673 ff 14\n   00077674 ff 85\n   00077675 ff 0a\n   00077676 ff b7\n   00077677 ff 27\n   00077678 ff 38\n   00077679 ff 21\n   0007767a ff 1b\n   0007767b ff 2e\n   0007767c ff fc\n   0007767d ff 6d\n   0007767e ff 2c\n   0007767f ff 4d\n   00077680 ff 13\n   00077681 ff 0d\n   00077682 ff 38\n   00077683 ff 53\n   00077684 ff 54\n   00077685 ff 73\n   00077686 ff 0a\n   00077687 ff 65\n   00077688 ff bb\n   00077689 ff 0a\n   0007768a ff 6a\n   0007768b ff 76\n   0007768c ff 2e\n   0007768d ff c9\n   0007768e ff c2\n   0007768f ff 81\n   00077690 ff 85\n   00077691 ff 2c\n   00077692 ff 72\n   00077693 ff 92\n   00077694 ff a1\n   00077695 ff e8\n   00077696 ff bf\n   00077697 ff a2\n   00077698 ff 4b\n   00077699 ff 66\n   0007769a ff 1a\n   0007769b ff a8\n   0007769c ff 70\n   0007769d ff 8b\n   0007769e ff 4b\n   0007769f ff c2\n   000776a0 ff a3\n   000776a1 ff 51\n   000776a2 ff 6c\n   000776a3 ff c7\n   000776a4 ff 19\n   000776a5 ff e8\n   000776a6 ff 92\n   000776a7 ff d1\n   000776a8 ff 24\n   000776a9 ff 06\n   000776aa ff 99\n   000776ab ff d6\n   000776ac ff 85\n   000776ad ff 35\n   000776ae ff 0e\n   000776af ff f4\n   000776b0 ff 70\n   000776b1 ff a0\n   000776b2 ff 6a\n   000776b3 ff 10\n   000776b4 ff 16\n   000776b5 ff c1\n   000776b6 ff a4\n   000776b7 ff 19\n   000776b8 ff 08\n   000776b9 ff 6c\n   000776ba ff 37\n   000776bb ff 1e\n   000776bc ff 4c\n   000776bd ff 77\n   000776be ff 48\n   000776bf ff 27\n   000776c0 ff b5\n   000776c1 ff bc\n   000776c2 ff b0\n   000776c3 ff 34\n   000776c4 ff b3\n   000776c5 ff 0c\n   000776c6 ff 1c\n   000776c7 ff 39\n   000776c8 ff 4a\n   000776c9 ff aa\n   000776ca ff d8\n   000776cb ff 4e\n   000776cc ff 4f\n   000776cd ff ca\n   000776ce ff 9c\n   000776cf ff 5b\n   000776d0 ff f3\n   000776d1 ff 6f\n   000776d2 ff 2e\n   000776d3 ff 68\n   000776d4 ff ee\n   000776d5 ff 82\n   000776d6 ff 8f\n   000776d7 ff 74\n   000776d8 ff 6f\n   000776d9 ff 63\n   000776da ff a5\n   000776db ff 78\n   000776dc ff 14\n   000776dd ff 78\n   000776de ff c8\n   000776df ff 84\n   000776e0 ff 08\n   000776e1 ff 02\n   000776e2 ff c7\n   000776e3 ff 8c\n   000776e4 ff fa\n   000776e6 ff be\n   000776e7 ff 90\n   000776e8 ff eb\n   000776e9 ff 6c\n   000776ea ff 50\n   000776eb ff a4\n   000776ec ff f7\n   000776ed ff a3\n   000776ee ff f9\n   000776ef ff be\n   000776f0 ff f2\n   000776f1 ff 78\n   000776f2 ff 71\n   000776f3 ff c6\n   000776f4 ff 00\n   000776f5 ff 00\n   000776f6 ff 00\n   000776f7 ff 00\n   000776f8 ff 00\n   000776f9 ff 00\n   000776fa ff 20\n   000776fb ff 41\n   000776fc ff 00\n   000776fd ff 04\n   000776fe ff 4d\n   000776ff ff 51\n   00077700 ff 54\n   00077701 ff 54\n   00077702 ff 04\n   00077703 ff 00\n   00077704 ff 00\n   00077705 ff 00\n   00077706 ff 0c\n   00077707 ff 00\n   00077708 ff 01\n   00077709 ff 00\n   0007770a ff 01\n   0007770b ff 80\n   0007770c ff 01\n   0007770d ff 00\n   0007770e ff 00\n   0007770f ff 00\n   00077710 ff 78\n   00077711 ff 00\n   00077712 ff 04\n   00077713 ff 00\n   00077714 ff 56\n   00077715 ff 32\n   00077716 ff 2e\n   00077717 ff 35\n   00077718 ff 2e\n   00077719 ff 34\n   0007771a ff 00\n   0007771b ff 00\n   0007771c ff ab\n   0007771d ff 12\n   0007771e ff 12\n   0007771f ff 00\n   00077724 ff 30\n   00077725 ff 2e\n   00077726 ff 6e\n   00077727 ff 6c\n   00077728 ff 2e\n   00077729 ff 70\n   0007772a ff 6f\n   0007772b ff 6f\n   0007772c ff 6c\n   0007772d ff 2e\n   0007772e ff 6e\n   0007772f ff 74\n   00077730 ff 70\n   00077731 ff 2e\n   00077732 ff 6f\n   00077733 ff 72\n   00077734 ff 67\n   00077735 ff 00\n   00077736 ff 4f\n   00077737 ff 46\n   00077738 ff 46\n   00077739 ff 00\n   0007773a ff 54\n   0007773b ff 4f\n   0007773c ff 47\n   0007773d ff 47\n   0007773e ff 4c\n   0007773f ff 45\n   00077740 ff 00\n   00077741 ff 48\n   00077742 ff 4f\n   00077743 ff 4c\n   00077744 ff 44\n   00077745 ff 00\n   00077746 ff 63\n   00077747 ff 6d\n   00077748 ff 6e\n   00077749 ff 64\n   0007774a ff 00\n   0007774b ff 73\n   0007774c ff 74\n   0007774d ff 61\n   0007774e ff 74\n   0007774f ff 00\n   00077750 ff 74\n   00077751 ff 65\n   00077752 ff 6c\n   00077753 ff 65\n   00077754 ff 00\n   00077755 ff 30\n   00077756 ff 2e\n   00077757 ff 30\n   00077758 ff 2e\n   00077759 ff 30\n   0007775a ff 2e\n   0007775b ff 30\n   0007775c ff 00\n   0007775d ff 31\n   0007775e ff 39\n   0007775f ff 32\n   00077760 ff 2e\n   00077761 ff 31\n   00077762 ff 36\n   00077763 ff 38\n   00077764 ff 2e\n   00077765 ff 32\n   00077766 ff 2e\n   00077767 ff 32\n   00077768 ff 35\n   00077769 ff 34\n   0007776a ff 00\n   0007776b ff 32\n   0007776c ff 35\n   0007776d ff 35\n   0007776e ff 2e\n   0007776f ff 32\n   00077770 ff 35\n   00077771 ff 35\n   00077772 ff 2e\n   00077773 ff 32\n   00077774 ff 35\n   00077775 ff 35\n   00077776 ff 2e\n   00077777 ff 30\n   00077778 ff 00\n   00077779 ff 31\n   0007777a ff 39\n   0007777b ff 32\n   0007777c ff 2e\n   0007777d ff 31\n   0007777e ff 36\n   0007777f ff 38\n   00077780 ff 2e\n   00077781 ff 32\n   00077782 ff 2e\n   00077783 ff 32\n   00077784 ff 37\n   00077785 ff 00\n   00077786 ff 68\n   00077787 ff 74\n   00077788 ff 74\n   00077789 ff 70\n   0007778a ff 3a\n   0007778b ff 2f\n   0007778c ff 2f\n   0007778d ff 64\n   0007778e ff 6f\n   0007778f ff 6d\n   00077790 ff 75\n   00077791 ff 73\n   00077792 ff 31\n   00077793 ff 3a\n   00077794 ff 38\n   00077795 ff 30\n   00077796 ff 2f\n   00077797 ff 61\n   00077798 ff 70\n   00077799 ff 69\n   0007779a ff 2f\n   0007779b ff 61\n   0007779c ff 72\n   0007779d ff 64\n   0007779e ff 75\n   0007779f ff 69\n   000777a0 ff 6e\n   000777a1 ff 6f\n   000777a2 ff 2f\n   000777a3 ff 73\n   000777a4 ff 6f\n   000777a5 ff 6e\n   000777a6 ff 6f\n   000777a7 ff 66\n   000777a8 ff 66\n   000777a9 ff 2e\n   000777aa ff 69\n   000777ab ff 6e\n   000777ac ff 6f\n   000777ad ff 2e\n   000777ae ff 62\n   000777af ff 69\n   000777b0 ff 6e\n   000777b1 ff 00\n   000777b2 ff 69\n   000777b3 ff 6e\n   000777b4 ff 64\n   000777b5 ff 65\n   000777b6 ff 62\n   000777b7 ff 75\n   000777b8 ff 75\n   000777b9 ff 72\n   000777ba ff 74\n   000777bb ff 31\n   000777bc ff 00\n   000777bd ff 56\n   000777be ff 6e\n   000777bf ff 73\n   000777c0 ff 71\n   000777c1 ff 72\n   000777c2 ff 74\n   000777c3 ff 6e\n   000777c4 ff 72\n   000777c5 ff 73\n   000777c6 ff 64\n   000777c7 ff 64\n   000777c8 ff 62\n   000777c9 ff 72\n   000777ca ff 4e\n   000777cb ff 00\n   000777cc ff 69\n   000777cd ff 6e\n   000777ce ff 64\n   000777cf ff 65\n   000777d0 ff 62\n   000777d1 ff 75\n   000777d2 ff 75\n   000777d3 ff 72\n   000777d4 ff 74\n   000777d5 ff 32\n   000777d6 ff 00\n   000777d7 ff 25\n   000777d8 ff 73\n   000777d9 ff 2d\n   000777da ff 25\n   000777db ff 30\n   000777dc ff 34\n   000777dd ff 64\n   000777de ff 00\n   000777df ff 64\n   000777e0 ff 6f\n   000777e1 ff 6d\n   000777e2 ff 75\n   000777e3 ff 73\n   000777e4 ff 31\n   000777e5 ff 00\n   000777e6 ff 41\n   000777e7 ff 35\n   000777e8 ff 20\n   000777e9 ff 30\n   000777ea ff 32\n   000777eb ff 20\n   000777ec ff 46\n   000777ed ff 46\n   000777ee ff 20\n   000777ef ff 31\n   000777f0 ff 33\n   000777f1 ff 20\n   000777f2 ff 39\n   000777f3 ff 39\n   000777f4 ff 20\n   000777f5 ff 39\n   000777f6 ff 46\n   000777f7 ff 20\n   000777f8 ff 38\n   000777f9 ff 42\n   000777fa ff 20\n   000777fb ff 33\n   000777fc ff 39\n   000777fd ff 20\n   000777fe ff 38\n   000777ff ff 45\n   00077800 ff 20\n   00077801 ff 46\n   00077802 ff 31\n   00077803 ff 20\n   00077804 ff 38\n   00077805 ff 33\n   00077806 ff 20\n   00077807 ff 34\n   00077808 ff 46\n   00077809 ff 20\n   0007780a ff 31\n   0007780b ff 31\n   0007780c ff 20\n   0007780d ff 32\n   0007780e ff 33\n   0007780f ff 20\n   00077810 ff 36\n   00077811 ff 35\n   00077812 ff 20\n   00077813 ff 30\n   00077814 ff 42\n   00077815 ff 20\n   00077816 ff 33\n   00077817 ff 32\n   00077818 ff 20\n   00077819 ff 33\n   0007781a ff 36\n   0007781b ff 20\n   0007781c ff 46\n   0007781d ff 43\n   0007781e ff 20\n   0007781f ff 30\n   00077820 ff 37\n   00077821 ff 00\n   00077822 ff 44\n   00077823 ff 56\n   00077824 ff 45\n   00077825 ff 53\n   00077826 ff 5f\n   00077827 ff 25\n   00077828 ff 30\n   00077829 ff 36\n   0007782a ff 58\n   0007782b ff 00\n   0007782c ff 44\n   0007782d ff 56\n   0007782e ff 45\n   0007782f ff 53\n   00077830 ff 5f\n   00077831 ff 55\n   00077832 ff 53\n   00077833 ff 45\n   00077834 ff 52\n   00077835 ff 00\n   00077836 ff 44\n   00077837 ff 56\n   00077838 ff 45\n   00077839 ff 53\n   0007783a ff 5f\n   0007783b ff 50\n   0007783c ff 41\n   0007783d ff 53\n   0007783e ff 53\n   0007783f ff 00\n   00077840 ff 73\n   00077841 ff 6f\n   00077842 ff 6e\n   00077843 ff 6f\n   00077844 ff 66\n   00077845 ff 66\n   00077846 ff 00\n   00077847 ff 73\n   00077848 ff 6f\n   00077849 ff 6e\n   0007784a ff 6f\n   0007784b ff 66\n   0007784c ff 66\n   0007784d ff 73\n   0007784e ff 00\n   0007784f ff 53\n   00077850 ff 6f\n   00077851 ff 6e\n   00077852 ff 6f\n   00077853 ff 66\n   00077854 ff 66\n   00077855 ff 00\n   00077856 ff 53\n   00077857 ff 6f\n   00077858 ff 6e\n   00077859 ff 6f\n   0007785a ff 66\n   0007785b ff 66\n   0007785c ff 32\n   0007785d ff 00\n   0007785e ff 53\n   0007785f ff 6f\n   00077860 ff 6e\n   00077861 ff 6f\n   00077862 ff 66\n   00077863 ff 66\n   00077864 ff 33\n   00077865 ff 00\n   00077866 ff 53\n   00077867 ff 6f\n   00077868 ff 6e\n   00077869 ff 6f\n   0007786a ff 66\n   0007786b ff 66\n   0007786c ff 34\n   0007786d ff 00\n   0007786e ff 25\n   0007786f ff 70\n   00077870 ff 72\n   00077871 ff 65\n   00077872 ff 66\n   00077873 ff 69\n   00077874 ff 78\n   00077875 ff 25\n   00077876 ff 2f\n   00077877 ff 25\n   00077878 ff 74\n   00077879 ff 6f\n   0007787a ff 70\n   0007787b ff 69\n   0007787c ff 63\n   0007787d ff 25\n   0007787e ff 2f\n   0007787f ff 00\n   00077880 ff 32\n   00077881 ff 31\n   00077882 ff 3a\n   00077883 ff 35\n   00077884 ff 31\n   00077885 ff 3a\n   00077886 ff 30\n   00077887 ff 39\n   00077888 ff 00\n   00077889 ff 4a\n   0007788a ff 61\n   0007788b ff 6e\n   0007788c ff 20\n   0007788d ff 20\n   0007788e ff 37\n   0007788f ff 20\n   00077890 ff 32\n   00077891 ff 30\n   00077892 ff 31\n   00077893 ff 38\n   00077894 ff 00\n   00077895 ff 61\n   00077896 ff 64\n   00077897 ff 6d\n   00077898 ff 69\n   00077899 ff 6e\n   0007789a ff 00\n   0007789b ff 7b\n   0007789c ff 68\n   0007789d ff 7d\n   0007789e ff 00\n   0007789f ff 7b\n   000778a0 ff 73\n   000778a1 ff 7d\n   000778a2 ff 00\n   000778a3 ff 7b\n   000778a4 ff 62\n   000778a5 ff 7d\n   000778a6 ff 00\n   000778a7 ff 53\n   000778a8 ff 74\n   000778a9 ff 61\n   000778aa ff 72\n   000778ab ff 74\n   000778ac ff 20\n   000778ad ff 6c\n   000778ae ff 65\n   000778af ff 61\n   000778b0 ff 72\n   000778b1 ff 6e\n   000778b2 ff 69\n   000778b3 ff 6e\n   000778b4 ff 67\n   000778b5 ff 00\n   000778b6 ff 53\n   000778b7 ff 65\n   000778b8 ff 74\n   000778b9 ff 20\n   000778ba ff 74\n   000778bb ff 6f\n   000778bc ff 20\n   000778bd ff 64\n   000778be ff 65\n   000778bf ff 66\n   000778c0 ff 61\n   000778c1 ff 75\n   000778c2 ff 6c\n   000778c3 ff 74\n   000778c4 ff 00\n   000778c5 ff 53\n   000778c6 ff 61\n   000778c7 ff 76\n   000778c8 ff 65\n   000778c9 ff 64\n   000778ca ff 00\n   000778cb ff 44\n   000778cc ff 65\n   000778cd ff 66\n   000778ce ff 61\n   000778cf ff 75\n   000778d0 ff 6c\n   000778d1 ff 74\n   000778d2 ff 20\n   000778d3 ff 73\n   000778d4 ff 65\n   000778d5 ff 6e\n   000778d6 ff 74\n   000778d7 ff 00\n   000778d8 ff 4c\n   000778d9 ff 65\n   000778da ff 61\n   000778db ff 72\n   000778dc ff 6e\n   000778dd ff 65\n   000778de ff 64\n   000778df ff 20\n   000778e0 ff 73\n   000778e1 ff 65\n   000778e2 ff 6e\n   000778e3 ff 74\n   000778e4 ff 00\n   000778e5 ff 4c\n   000778e6 ff 65\n   000778e7 ff 61\n   000778e8 ff 72\n   000778e9 ff 6e\n   000778ea ff 69\n   000778eb ff 6e\n   000778ec ff 67\n   000778ed ff 20\n   000778ee ff 61\n   000778ef ff 63\n   000778f0 ff 74\n   000778f1 ff 69\n   000778f2 ff 76\n   000778f3 ff 65\n   000778f4 ff 00\n   000778f5 ff 3a\n   000778f6 ff 00\n   000778f7 ff 46\n   000778f8 ff 46\n   000778f9 ff 46\n   000778fa ff 45\n   000778fb ff 00\n   000778fc ff 7b\n   000778fd ff 6d\n   000778fe ff 61\n   000778ff ff 00\n   00077900 ff 7b\n   00077901 ff 69\n   00077902 ff 70\n   00077903 ff 00\n   00077904 ff 7b\n   00077905 ff 6d\n   00077906 ff 73\n   00077907 ff 00\n   00077908 ff 7b\n   00077909 ff 67\n   0007790a ff 77\n   0007790b ff 00\n   0007790c ff 7b\n   0007790d ff 62\n   0007790e ff 72\n   0007790f ff 00\n   00077910 ff 7b\n   00077911 ff 64\n   00077912 ff 74\n   00077913 ff 00\n   00077914 ff 7b\n   00077915 ff 69\n   00077916 ff 64\n   00077917 ff 00\n   00077918 ff 74\n   00077919 ff 72\n   0007791a ff 75\n   0007791b ff 65\n   0007791c ff 00\n   0007791d ff 66\n   0007791e ff 61\n   0007791f ff 6c\n   00077920 ff 73\n   00077921 ff 65\n   00077922 ff 00\n   00077923 ff 7b\n   00077924 ff 73\n   00077925 ff 74\n   00077926 ff 61\n   00077927 ff 74\n   00077928 ff 65\n   00077929 ff 7d\n   0007792a ff 00\n   0007792b ff 7d\n   0007792c ff 2c\n   0007792d ff 00\n   0007792e ff 7b\n   0007792f ff 6a\n   00077930 ff 31\n   00077931 ff 00\n   00077932 ff 7b\n   00077933 ff 6a\n   00077934 ff 32\n   00077935 ff 00\n   00077936 ff 2c\n   00077937 ff 22\n   00077938 ff 00\n   00077939 ff 7b\n   0007793a ff 7d\n   0007793b ff 00\n   0007793c ff 2f\n   0007793d ff 30\n   0007793e ff 00\n   0007793f ff 7b\n   00077940 ff 6c\n   00077941 ff 31\n   00077942 ff 00\n   00077943 ff 22\n   00077944 ff 22\n   00077945 ff 5c\n   00077946 ff 5c\n   00077947 ff 62\n   00077948 ff 08\n   00077949 ff 66\n   0007794a ff 0c\n   0007794b ff 6e\n   0007794c ff 0a\n   0007794d ff 72\n   0007794e ff 0d\n   0007794f ff 74\n   00077950 ff 09\n   00077951 ff 00\n   00077952 ff 50\n   00077953 ff 52\n   00077954 ff 4f\n   00077955 ff 54\n   00077956 ff 4f\n   00077957 ff 43\n   00077958 ff 4f\n   00077959 ff 4c\n   0007795a ff 00\n   0007795b ff 6e\n   0007795c ff 75\n   0007795d ff 6c\n   0007795e ff 6c\n   0007795f ff 00\n   00077960 ff 42\n   00077961 ff 49\n   00077962 ff 54\n   00077963 ff 53\n   00077964 ff 00\n   00077965 ff 44\n   00077966 ff 41\n   00077967 ff 54\n   00077968 ff 41\n   00077969 ff 00\n   0007796a ff 25\n   0007796b ff 73\n   0007796c ff 20\n   0007796d ff 25\n   0007796e ff 73\n   0007796f ff 0a\n   00077970 ff 00\n   00077971 ff 20\n   00077972 ff 28\n   00077973 ff 72\n   00077974 ff 65\n   00077975 ff 74\n   00077976 ff 61\n   00077977 ff 69\n   00077978 ff 6e\n   00077979 ff 65\n   0007797a ff 64\n   0007797b ff 29\n   0007797c ff 00\n   0007797d ff 4f\n   0007797e ff 6e\n   0007797f ff 00\n   00077980 ff 4f\n   00077981 ff 66\n   00077982 ff 66\n   00077983 ff 00\n   00077984 ff 54\n   00077985 ff 6f\n   00077986 ff 67\n   00077987 ff 67\n   00077988 ff 6c\n   00077989 ff 65\n   0007798a ff 00\n   0007798b ff 20\n   0007798c ff 73\n   0007798d ff 65\n   0007798e ff 63\n   0007798f ff 00\n   00077990 ff 53\n   00077991 ff 48\n   00077992 ff 54\n   00077993 ff 33\n   00077994 ff 58\n   00077995 ff 00\n   00077996 ff 41\n   00077997 ff 64\n   00077998 ff 6d\n   00077999 ff 69\n   0007799a ff 6e\n   0007799b ff 00\n   0007799c ff 55\n   0007799d ff 73\n   0007799e ff 65\n   0007799f ff 72\n   000779a0 ff 00\n   000779a1 ff 25\n   000779a2 ff 74\n   000779a3 ff 6f\n   000779a4 ff 70\n   000779a5 ff 69\n   000779a6 ff 63\n   000779a7 ff 25\n   000779a8 ff 00\n   000779a9 ff 45\n   000779aa ff 78\n   000779ab ff 63\n   000779ac ff 65\n   000779ad ff 70\n   000779ae ff 74\n   000779af ff 69\n   000779b0 ff 6f\n   000779b1 ff 6e\n   000779b2 ff 00\n   000779b3 ff 52\n   000779b4 ff 66\n   000779b5 ff 4b\n   000779b6 ff 65\n   000779b7 ff 79\n   000779b8 ff 00\n   000779b9 ff 4c\n   000779ba ff 65\n   000779bb ff 61\n   000779bc ff 72\n   000779bd ff 6e\n   000779be ff 20\n   000779bf ff 66\n   000779c0 ff 61\n   000779c1 ff 69\n   000779c2 ff 6c\n   000779c3 ff 65\n   000779c4 ff 64\n   000779c5 ff 00\n   000779c6 ff 53\n   000779c7 ff 74\n   000779c8 ff 61\n   000779c9 ff 72\n   000779ca ff 74\n   000779cb ff 65\n   000779cc ff 64\n   000779cd ff 00\n   000779ce ff 20\n   000779cf ff 57\n   000779d0 ff 00\n   000779d1 ff 20\n   000779d2 ff 6b\n   000779d3 ff 57\n   000779d4 ff 68\n   000779d5 ff 00\n   000779d6 ff 2f\n   000779d7 ff 6c\n   000779d8 ff 69\n   000779d9 ff 67\n   000779da ff 68\n   000779db ff 74\n   000779dc ff 73\n   000779dd ff 00\n   000779de ff 7b\n   000779df ff 22\n   000779e0 ff 00\n   000779e1 ff 2f\n   000779e2 ff 73\n   000779e3 ff 74\n   000779e4 ff 61\n   000779e5 ff 74\n   000779e6 ff 65\n   000779e7 ff 00\n   000779e8 ff 5b\n   000779e9 ff 00\n   000779ea ff 7b\n   000779eb ff 63\n   000779ec ff 6d\n   000779ed ff 00\n   000779ee ff 7b\n   000779ef ff 72\n   000779f0 ff 65\n   000779f1 ff 00\n   000779f2 ff 62\n   000779f3 ff 72\n   000779f4 ff 69\n   000779f5 ff 00\n   000779f6 ff 68\n   000779f7 ff 75\n   000779f8 ff 65\n   000779f9 ff 00\n   000779fa ff 73\n   000779fb ff 61\n   000779fc ff 74\n   000779fd ff 00\n   000779fe ff 5d\n   000779ff ff 00\n   00077a00 ff 2f\n   00077a01 ff 6c\n   00077a02 ff 69\n   00077a03 ff 67\n   00077a04 ff 68\n   00077a05 ff 74\n   00077a06 ff 73\n   00077a07 ff 2f\n   00077a08 ff 00\n   00077a09 ff 6d\n   00077a0a ff 71\n   00077a0b ff 74\n   00077a0c ff 74\n   00077a0d ff 00\n   00077a0e ff 74\n   00077a0f ff 63\n   00077a10 ff 70\n   00077a11 ff 00\n   00077a12 ff 44\n   00077a13 ff 53\n   00077a14 ff 31\n   00077a15 ff 38\n   00077a16 ff 42\n   00077a17 ff 32\n   00077a18 ff 30\n   00077a19 ff 00\n   00077a1a ff 53\n   00077a1b ff 48\n   00077a1c ff 54\n   00077a1d ff 31\n   00077a1e ff 58\n   00077a1f ff 00\n   00077a20 ff 45\n   00077a21 ff 6d\n   00077a22 ff 70\n   00077a23 ff 74\n   00077a24 ff 79\n   00077a25 ff 00\n   00077a26 ff 41\n   00077a27 ff 62\n   00077a28 ff 6f\n   00077a29 ff 72\n   00077a2a ff 74\n   00077a2b ff 65\n   00077a2c ff 64\n   00077a2d ff 00\n   00077a2e ff 20\n   00077a2f ff 6d\n   00077a30 ff 73\n   00077a31 ff 00\n   00077a32 ff 3b\n   00077a33 ff 00\n   00077a34 ff 41\n   00077a35 ff 70\n   00077a36 ff 70\n   00077a37 ff 65\n   00077a38 ff 6e\n   00077a39 ff 64\n   00077a3a ff 65\n   00077a3b ff 64\n   00077a3c ff 00\n   00077a3d ff 4e\n   00077a3e ff 6f\n   00077a3f ff 74\n   00077a40 ff 20\n   00077a41 ff 73\n   00077a42 ff 75\n   00077a43 ff 70\n   00077a44 ff 70\n   00077a45 ff 6f\n   00077a46 ff 72\n   00077a47 ff 74\n   00077a48 ff 65\n   00077a49 ff 64\n   00077a4a ff 00\n   00077a4b ff 31\n   00077a4c ff 20\n   00077a4d ff 74\n   00077a4e ff 6f\n   00077a4f ff 20\n   00077a50 ff 72\n   00077a51 ff 65\n   00077a52 ff 73\n   00077a53 ff 74\n   00077a54 ff 61\n   00077a55 ff 72\n   00077a56 ff 74\n   00077a57 ff 00\n   00077a58 ff 52\n   00077a59 ff 65\n   00077a5a ff 73\n   00077a5b ff 65\n   00077a5c ff 74\n   00077a5d ff 20\n   00077a5e ff 61\n   00077a5f ff 6e\n   00077a60 ff 64\n   00077a61 ff 20\n   00077a62 ff 52\n   00077a63 ff 65\n   00077a64 ff 73\n   00077a65 ff 74\n   00077a66 ff 61\n   00077a67 ff 72\n   00077a68 ff 74\n   00077a69 ff 69\n   00077a6a ff 6e\n   00077a6b ff 67\n   00077a6c ff 00\n   00077a6d ff 31\n   00077a6e ff 20\n   00077a6f ff 74\n   00077a70 ff 6f\n   00077a71 ff 20\n   00077a72 ff 72\n   00077a73 ff 65\n   00077a74 ff 73\n   00077a75 ff 65\n   00077a76 ff 74\n   00077a77 ff 00\n   00077a78 ff 44\n   00077a79 ff 6f\n   00077a7a ff 6e\n   00077a7b ff 65\n   00077a7c ff 00\n   00077a7d ff 7b\n   00077a7e ff 22\n   00077a7f ff 25\n   00077a80 ff 73\n   00077a81 ff 22\n   00077a82 ff 3a\n   00077a83 ff 22\n   00077a84 ff 56\n   00077a85 ff 65\n   00077a86 ff 72\n   00077a87 ff 73\n   00077a88 ff 69\n   00077a89 ff 6f\n   00077a8a ff 6e\n   00077a8b ff 20\n   00077a8c ff 35\n   00077a8d ff 2e\n   00077a8e ff 31\n   00077a8f ff 31\n   00077a90 ff 2e\n   00077a91 ff 31\n   00077a92 ff 20\n   00077a93 ff 66\n   00077a94 ff 72\n   00077a95 ff 6f\n   00077a96 ff 6d\n   00077a97 ff 20\n   00077a98 ff 25\n   00077a99 ff 73\n   00077a9a ff 22\n   00077a9b ff 7d\n   00077a9c ff 00\n   00077a9d ff 7b\n   00077a9e ff 22\n   00077a9f ff 25\n   00077aa0 ff 73\n   00077aa1 ff 22\n   00077aa2 ff 3a\n   00077aa3 ff 22\n   00077aa4 ff 31\n   00077aa5 ff 20\n   00077aa6 ff 6f\n   00077aa7 ff 72\n   00077aa8 ff 20\n   00077aa9 ff 3e\n   00077aaa ff 25\n   00077aab ff 73\n   00077aac ff 20\n   00077aad ff 74\n   00077aae ff 6f\n   00077aaf ff 20\n   00077ab0 ff 75\n   00077ab1 ff 70\n   00077ab2 ff 67\n   00077ab3 ff 72\n   00077ab4 ff 61\n   00077ab5 ff 64\n   00077ab6 ff 65\n   00077ab7 ff 22\n   00077ab8 ff 7d\n   00077ab9 ff 00\n   00077aba ff 35\n   00077abb ff 2e\n   00077abc ff 31\n   00077abd ff 31\n   00077abe ff 2e\n   00077abf ff 31\n   00077ac0 ff 00\n   00077ac1 ff 62\n   00077ac2 ff 6f\n   00077ac3 ff 6c\n   00077ac4 ff 64\n   00077ac5 ff 00\n   00077ac6 ff 6e\n   00077ac7 ff 6f\n   00077ac8 ff 72\n   00077ac9 ff 6d\n   00077aca ff 61\n   00077acb ff 6c\n   00077acc ff 00\n   00077acd ff 75\n   00077ace ff 73\n   00077acf ff 65\n   00077ad0 ff 72\n   00077ad1 ff 00\n   00077ad2 ff 70\n   00077ad3 ff 61\n   00077ad4 ff 73\n   00077ad5 ff 73\n   00077ad6 ff 77\n   00077ad7 ff 6f\n   00077ad8 ff 72\n   00077ad9 ff 64\n   00077ada ff 00\n   00077adb ff 7b\n   00077adc ff 00\n   00077add ff 7b\n   00077ade ff 78\n   00077adf ff 31\n   00077ae0 ff 00\n   00077ae1 ff 7b\n   00077ae2 ff 78\n   00077ae3 ff 32\n   00077ae4 ff 00\n   00077ae5 ff 7b\n   00077ae6 ff 78\n   00077ae7 ff 33\n   00077ae8 ff 00\n   00077ae9 ff 42\n   00077aea ff 75\n   00077aeb ff 74\n   00077aec ff 74\n   00077aed ff 6f\n   00077aee ff 6e\n   00077aef ff 31\n   00077af0 ff 00\n   00077af1 ff 53\n   00077af2 ff 65\n   00077af3 ff 72\n   00077af4 ff 69\n   00077af5 ff 61\n   00077af6 ff 6c\n   00077af7 ff 20\n   00077af8 ff 4f\n   00077af9 ff 75\n   00077afa ff 74\n   00077afb ff 00\n   00077afc ff 53\n   00077afd ff 65\n   00077afe ff 72\n   00077aff ff 69\n   00077b00 ff 61\n   00077b01 ff 6c\n   00077b02 ff 20\n   00077b03 ff 49\n   00077b04 ff 6e\n   00077b05 ff 00\n   00077b06 ff 52\n   00077b07 ff 65\n   00077b08 ff 6c\n   00077b09 ff 61\n   00077b0a ff 79\n   00077b0b ff 31\n   00077b0c ff 00\n   00077b0d ff 4c\n   00077b0e ff 65\n   00077b0f ff 64\n   00077b10 ff 31\n   00077b11 ff 69\n   00077b12 ff 00\n   00077b13 ff 53\n   00077b14 ff 65\n   00077b15 ff 6e\n   00077b16 ff 73\n   00077b17 ff 6f\n   00077b18 ff 72\n   00077b19 ff 00\n   00077b1a ff 4c\n   00077b1b ff 4f\n   00077b1c ff 47\n   00077b1d ff 5f\n   00077b1e ff 4c\n   00077b1f ff 45\n   00077b20 ff 56\n   00077b21 ff 45\n   00077b22 ff 4c\n   00077b23 ff 5f\n   00077b24 ff 49\n   00077b25 ff 4e\n   00077b26 ff 46\n   00077b27 ff 4f\n   00077b28 ff 00\n   00077b29 ff 7b\n   00077b2a ff 61\n   00077b2b ff 00\n   00077b2c ff 4c\n   00077b2d ff 4f\n   00077b2e ff 47\n   00077b2f ff 5f\n   00077b30 ff 4c\n   00077b31 ff 45\n   00077b32 ff 56\n   00077b33 ff 45\n   00077b34 ff 4c\n   00077b35 ff 5f\n   00077b36 ff 4e\n   00077b37 ff 4f\n   00077b38 ff 4e\n   00077b39 ff 45\n   00077b3a ff 00\n   00077b3b ff 20\n   00077b3c ff 42\n   00077b3d ff 47\n   00077b3e ff 4e\n   00077b3f ff 00\n   00077b40 ff 2e\n   00077b41 ff 6c\n   00077b42 ff 6f\n   00077b43 ff 63\n   00077b44 ff 61\n   00077b45 ff 6c\n   00077b46 ff 00\n   00077b47 ff 2f\n   00077b48 ff 63\n   00077b49 ff 6e\n   00077b4a ff 00\n   00077b4b ff 2f\n   00077b4c ff 6d\n   00077b4d ff 64\n   00077b4e ff 00\n   00077b4f ff 2f\n   00077b50 ff 77\n   00077b51 ff 31\n   00077b52 ff 00\n   00077b53 ff 2f\n   00077b54 ff 77\n   00077b55 ff 30\n   00077b56 ff 00\n   00077b57 ff 2f\n   00077b58 ff 6d\n   00077b59 ff 71\n   00077b5a ff 00\n   00077b5b ff 2f\n   00077b5c ff 64\n   00077b5d ff 6d\n   00077b5e ff 00\n   00077b5f ff 2f\n   00077b60 ff 6c\n   00077b61 ff 67\n   00077b62 ff 00\n   00077b63 ff 2f\n   00077b64 ff 63\n   00077b65 ff 6f\n   00077b66 ff 00\n   00077b67 ff 2f\n   00077b68 ff 64\n   00077b69 ff 6c\n   00077b6a ff 00\n   00077b6b ff 2f\n   00077b6c ff 73\n   00077b6d ff 76\n   00077b6e ff 00\n   00077b6f ff 2f\n   00077b70 ff 72\n   00077b71 ff 73\n   00077b72 ff 00\n   00077b73 ff 2f\n   00077b74 ff 72\n   00077b75 ff 74\n   00077b76 ff 00\n   00077b77 ff 2f\n   00077b78 ff 75\n   00077b79 ff 70\n   00077b7a ff 00\n   00077b7b ff 2f\n   00077b7c ff 75\n   00077b7d ff 31\n   00077b7e ff 00\n   00077b7f ff 2f\n   00077b80 ff 75\n   00077b81 ff 32\n   00077b82 ff 00\n   00077b83 ff 2f\n   00077b84 ff 63\n   00077b85 ff 6d\n   00077b86 ff 00\n   00077b87 ff 2f\n   00077b88 ff 63\n   00077b89 ff 73\n   00077b8a ff 00\n   00077b8b ff 2f\n   00077b8c ff 61\n   00077b8d ff 78\n   00077b8e ff 00\n   00077b8f ff 2f\n   00077b90 ff 61\n   00077b91 ff 79\n   00077b92 ff 00\n   00077b93 ff 2f\n   00077b94 ff 69\n   00077b95 ff 6e\n   00077b96 ff 00\n   00077b97 ff 2f\n   00077b98 ff 72\n   00077b99 ff 62\n   00077b9a ff 00\n   00077b9b ff 2f\n   00077b9c ff 66\n   00077b9d ff 77\n   00077b9e ff 6c\n   00077b9f ff 69\n   00077ba0 ff 6e\n   00077ba1 ff 6b\n   00077ba2 ff 00\n   00077ba3 ff 2f\n   00077ba4 ff 75\n   00077ba5 ff 70\n   00077ba6 ff 6e\n   00077ba7 ff 70\n   00077ba8 ff 2f\n   00077ba9 ff 63\n   00077baa ff 6f\n   00077bab ff 6e\n   00077bac ff 74\n   00077bad ff 72\n   00077bae ff 6f\n   00077baf ff 6c\n   00077bb0 ff 2f\n   00077bb1 ff 62\n   00077bb2 ff 61\n   00077bb3 ff 73\n   00077bb4 ff 69\n   00077bb5 ff 63\n   00077bb6 ff 65\n   00077bb7 ff 76\n   00077bb8 ff 65\n   00077bb9 ff 6e\n   00077bba ff 74\n   00077bbb ff 31\n   00077bbc ff 00\n   00077bbd ff 2f\n   00077bbe ff 65\n   00077bbf ff 76\n   00077bc0 ff 65\n   00077bc1 ff 6e\n   00077bc2 ff 74\n   00077bc3 ff 73\n   00077bc4 ff 65\n   00077bc5 ff 72\n   00077bc6 ff 76\n   00077bc7 ff 69\n   00077bc8 ff 63\n   00077bc9 ff 65\n   00077bca ff 2e\n   00077bcb ff 78\n   00077bcc ff 6d\n   00077bcd ff 6c\n   00077bce ff 00\n   00077bcf ff 2f\n   00077bd0 ff 6d\n   00077bd1 ff 65\n   00077bd2 ff 74\n   00077bd3 ff 61\n   00077bd4 ff 69\n   00077bd5 ff 6e\n   00077bd6 ff 66\n   00077bd7 ff 6f\n   00077bd8 ff 73\n   00077bd9 ff 65\n   00077bda ff 72\n   00077bdb ff 76\n   00077bdc ff 69\n   00077bdd ff 63\n   00077bde ff 65\n   00077bdf ff 2e\n   00077be0 ff 78\n   00077be1 ff 6d\n   00077be2 ff 6c\n   00077be3 ff 00\n   00077be4 ff 2f\n   00077be5 ff 73\n   00077be6 ff 65\n   00077be7 ff 74\n   00077be8 ff 75\n   00077be9 ff 70\n   00077bea ff 2e\n   00077beb ff 78\n   00077bec ff 6d\n   00077bed ff 6c\n   00077bee ff 00\n   00077bef ff 2f\n   00077bf0 ff 64\n   00077bf1 ff 65\n   00077bf2 ff 73\n   00077bf3 ff 63\n   00077bf4 ff 72\n   00077bf5 ff 69\n   00077bf6 ff 70\n   00077bf7 ff 74\n   00077bf8 ff 69\n   00077bf9 ff 6f\n   00077bfa ff 6e\n   00077bfb ff 2e\n   00077bfc ff 78\n   00077bfd ff 6d\n   00077bfe ff 6c\n   00077bff ff 00\n   00077c00 ff 2a\n   00077c01 ff 00\n   00077c02 ff 49\n   00077c03 ff 6e\n   00077c04 ff 69\n   00077c05 ff 74\n   00077c06 ff 69\n   00077c07 ff 61\n   00077c08 ff 6c\n   00077c09 ff 69\n   00077c0a ff 7a\n   00077c0b ff 65\n   00077c0c ff 64\n   00077c0d ff 00\n   00077c0e ff 68\n   00077c0f ff 74\n   00077c10 ff 74\n   00077c11 ff 70\n   00077c12 ff 00\n   00077c13 ff 4c\n   00077c14 ff 65\n   00077c15 ff 61\n   00077c16 ff 72\n   00077c17 ff 6e\n   00077c18 ff 65\n   00077c19 ff 64\n   00077c1a ff 00\n   00077c1b ff 69\n   00077c1c ff 64\n   00077c1d ff 78\n   00077c1e ff 00\n   00077c1f ff 6e\n   00077c20 ff 76\n   00077c21 ff 61\n   00077c22 ff 6c\n   00077c23 ff 75\n   00077c24 ff 65\n   00077c25 ff 00\n   00077c26 ff 73\n   00077c27 ff 76\n   00077c28 ff 61\n   00077c29 ff 6c\n   00077c2a ff 75\n   00077c2b ff 65\n   00077c2c ff 31\n   00077c2d ff 00\n   00077c2e ff 2f\n   00077c2f ff 69\n   00077c30 ff 6e\n   00077c31 ff 76\n   00077c32 ff 61\n   00077c33 ff 6c\n   00077c34 ff 69\n   00077c35 ff 64\n   00077c36 ff 2f\n   00077c37 ff 00\n   00077c38 ff 2f\n   00077c39 ff 63\n   00077c3a ff 6f\n   00077c3b ff 6e\n   00077c3c ff 66\n   00077c3d ff 69\n   00077c3e ff 67\n   00077c3f ff 00\n   00077c40 ff 2f\n   00077c41 ff 67\n   00077c42 ff 72\n   00077c43 ff 6f\n   00077c44 ff 75\n   00077c45 ff 70\n   00077c46 ff 73\n   00077c47 ff 00\n   00077c48 ff 2f\n   00077c49 ff 73\n   00077c4a ff 63\n   00077c4b ff 68\n   00077c4c ff 65\n   00077c4d ff 64\n   00077c4e ff 75\n   00077c4f ff 6c\n   00077c50 ff 65\n   00077c51 ff 73\n   00077c52 ff 00\n   00077c53 ff 2f\n   00077c54 ff 73\n   00077c55 ff 65\n   00077c56 ff 6e\n   00077c57 ff 73\n   00077c58 ff 6f\n   00077c59 ff 72\n   00077c5a ff 73\n   00077c5b ff 00\n   00077c5c ff 2f\n   00077c5d ff 73\n   00077c5e ff 63\n   00077c5f ff 65\n   00077c60 ff 6e\n   00077c61 ff 65\n   00077c62 ff 73\n   00077c63 ff 00\n   00077c64 ff 2f\n   00077c65 ff 72\n   00077c66 ff 75\n   00077c67 ff 6c\n   00077c68 ff 65\n   00077c69 ff 73\n   00077c6a ff 00\n   00077c6b ff 41\n   00077c6c ff 54\n   00077c6d ff 2b\n   00077c6e ff 53\n   00077c6f ff 54\n   00077c70 ff 41\n   00077c71 ff 52\n   00077c72 ff 54\n   00077c73 ff 00\n   00077c74 ff 41\n   00077c75 ff 54\n   00077c76 ff 2b\n   00077c77 ff 53\n   00077c78 ff 45\n   00077c79 ff 4e\n   00077c7a ff 44\n   00077c7b ff 3d\n   00077c7c ff 6f\n   00077c7d ff 6b\n   00077c7e ff 00\n   00077c7f ff 41\n   00077c80 ff 54\n   00077c81 ff 2b\n   00077c82 ff 53\n   00077c83 ff 45\n   00077c84 ff 4e\n   00077c85 ff 44\n   00077c86 ff 3d\n   00077c87 ff 66\n   00077c88 ff 61\n   00077c89 ff 69\n   00077c8a ff 6c\n   00077c8b ff 00\n   00077c8c ff 41\n   00077c8d ff 54\n   00077c8e ff 2b\n   00077c8f ff 53\n   00077c90 ff 54\n   00077c91 ff 41\n   00077c92 ff 54\n   00077c93 ff 55\n   00077c94 ff 53\n   00077c95 ff 3d\n   00077c96 ff 34\n   00077c97 ff 00\n   00077c98 ff 42\n   00077c99 ff 48\n   00077c9a ff 31\n   00077c9b ff 37\n   00077c9c ff 35\n   00077c9d ff 30\n   00077c9e ff 00\n   00077c9f ff 3c\n   00077ca0 ff 62\n   00077ca1 ff 72\n   00077ca2 ff 2f\n   00077ca3 ff 3e\n   00077ca4 ff 00\n   00077ca5 ff 63\n   00077ca6 ff 31\n   00077ca7 ff 00\n   00077ca8 ff 63\n   00077ca9 ff 32\n   00077caa ff 00\n   00077cab ff 7b\n   00077cac ff 72\n   00077cad ff 31\n   00077cae ff 00\n   00077caf ff 7b\n   00077cb0 ff 72\n   00077cb1 ff 32\n   00077cb2 ff 00\n   00077cb3 ff 7b\n   00077cb4 ff 72\n   00077cb5 ff 33\n   00077cb6 ff 00\n   00077cb7 ff 68\n   00077cb8 ff 74\n   00077cb9 ff 74\n   00077cba ff 70\n   00077cbb ff 3a\n   00077cbc ff 2f\n   00077cbd ff 2f\n   00077cbe ff 00\n   00077cbf ff 70\n   00077cc0 ff 31\n   00077cc1 ff 00\n   00077cc2 ff 73\n   00077cc3 ff 32\n   00077cc4 ff 00\n   00077cc5 ff 70\n   00077cc6 ff 32\n   00077cc7 ff 00\n   00077cc8 ff 6d\n   00077cc9 ff 74\n   00077cca ff 00\n   00077ccb ff 6d\n   00077ccc ff 66\n   00077ccd ff 00\n   00077cce ff 6d\n   00077ccf ff 68\n   00077cd0 ff 00\n   00077cd1 ff 6d\n   00077cd2 ff 63\n   00077cd3 ff 00\n   00077cd4 ff 6d\n   00077cd5 ff 75\n   00077cd6 ff 00\n   00077cd7 ff 6d\n   00077cd8 ff 70\n   00077cd9 ff 00\n   00077cda ff 6c\n   00077cdb ff 73\n   00077cdc ff 00\n   00077cdd ff 6c\n   00077cde ff 77\n   00077cdf ff 00\n   00077ce0 ff 6c\n   00077ce1 ff 68\n   00077ce2 ff 00\n   00077ce3 ff 6c\n   00077ce4 ff 70\n   00077ce5 ff 00\n   00077ce6 ff 62\n   00077ce7 ff 31\n   00077ce8 ff 00\n   00077ce9 ff 62\n   00077cea ff 32\n   00077ceb ff 00\n   00077cec ff 61\n   00077ced ff 31\n   00077cee ff 00\n   00077cef ff 61\n   00077cf0 ff 32\n   00077cf1 ff 00\n   00077cf2 ff 61\n   00077cf3 ff 33\n   00077cf4 ff 00\n   00077cf5 ff 61\n   00077cf6 ff 34\n   00077cf7 ff 00\n   00077cf8 ff 67\n   00077cf9 ff 39\n   00077cfa ff 39\n   00077cfb ff 00\n   00077cfc ff 7b\n   00077cfd ff 32\n   00077cfe ff 00\n   00077cff ff 7b\n   00077d00 ff 33\n   00077d01 ff 00\n   00077d02 ff 7b\n   00077d03 ff 34\n   00077d04 ff 00\n   00077d05 ff 7b\n   00077d06 ff 31\n   00077d07 ff 00\n   00077d08 ff 7b\n   00077d09 ff 35\n   00077d0a ff 00\n   00077d0b ff 7b\n   00077d0c ff 36\n   00077d0d ff 00\n   00077d0e ff 2f\n   00077d0f ff 61\n   00077d10 ff 70\n   00077d11 ff 69\n   00077d12 ff 00\n   00077d13 ff 4d\n   00077d14 ff 2d\n   00077d15 ff 53\n   00077d16 ff 45\n   00077d17 ff 41\n   00077d18 ff 52\n   00077d19 ff 43\n   00077d1a ff 48\n   00077d1b ff 00\n   00077d1c ff 4c\n   00077d1d ff 21\n   00077d1e ff 21\n   00077d1f ff 40\n   00077d20 ff 7e\n   00077d21 ff 21\n   00077d22 ff 21\n   00077d23 ff 40\n   00077d24 ff 51\n   00077d25 ff 21\n   00077d26 ff 21\n   00077d27 ff 40\n   00077d28 ff 58\n   00077d29 ff 21\n   00077d2a ff 21\n   00077d2b ff 40\n   00077d2c ff 63\n   00077d2d ff 21\n   00077d2e ff 21\n   00077d2f ff 40\n   00077d30 ff d4\n   00077d31 ff 62\n   00077d32 ff 21\n   00077d33 ff 40\n   00077d34 ff 78\n   00077d35 ff 62\n   00077d36 ff 21\n   00077d37 ff 40\n   00077d38 ff 78\n   00077d39 ff 62\n   00077d3a ff 21\n   00077d3b ff 40\n   00077d3c ff 6b\n   00077d3d ff 62\n   00077d3e ff 21\n   00077d3f ff 40\n   00077d40 ff 6b\n   00077d41 ff 62\n   00077d42 ff 21\n   00077d43 ff 40\n   00077d44 ff 70\n   00077d45 ff 62\n   00077d46 ff 21\n   00077d47 ff 40\n   00077d48 ff 7a\n   00077d49 ff 63\n   00077d4a ff 21\n   00077d4b ff 40\n   00077d4c ff 11\n   00077d4d ff 63\n   00077d4e ff 21\n   00077d4f ff 40\n   00077d50 ff 11\n   00077d51 ff 63\n   00077d52 ff 21\n   00077d53 ff 40\n   00077d54 ff 06\n   00077d55 ff 63\n   00077d56 ff 21\n   00077d57 ff 40\n   00077d58 ff 06\n   00077d59 ff 63\n   00077d5a ff 21\n   00077d5b ff 40\n   00077d5c ff 0c\n   00077d5d ff 63\n   00077d5e ff 21\n   00077d5f ff 40\n   00077d60 ff 4a\n   00077d61 ff 65\n   00077d62 ff 21\n   00077d63 ff 40\n   00077d64 ff f4\n   00077d65 ff 64\n   00077d66 ff 21\n   00077d67 ff 40\n   00077d68 ff f4\n   00077d69 ff 64\n   00077d6a ff 21\n   00077d6b ff 40\n   00077d6c ff e7\n   00077d6d ff 64\n   00077d6e ff 21\n   00077d6f ff 40\n   00077d70 ff e7\n   00077d71 ff 64\n   00077d72 ff 21\n   00077d73 ff 40\n   00077d74 ff ec\n   00077d75 ff 64\n   00077d76 ff 21\n   00077d77 ff 40\n   00077d78 ff f4\n   00077d79 ff 65\n   00077d7a ff 21\n   00077d7b ff 40\n   00077d7c ff 8d\n   00077d7d ff 65\n   00077d7e ff 21\n   00077d7f ff 40\n   00077d80 ff 8d\n   00077d81 ff 65\n   00077d82 ff 21\n   00077d83 ff 40\n   00077d84 ff 82\n   00077d85 ff 65\n   00077d86 ff 21\n   00077d87 ff 40\n   00077d88 ff 82\n   00077d89 ff 65\n   00077d8a ff 21\n   00077d8b ff 40\n   00077d8c ff 88\n   00077d8d ff 65\n   00077d8e ff 21\n   00077d8f ff 40\n   00077d90 ff cb\n   00077d91 ff 69\n   00077d92 ff 21\n   00077d93 ff 40\n   00077d94 ff df\n   00077d95 ff 69\n   00077d96 ff 21\n   00077d97 ff 40\n   00077d98 ff a3\n   00077d99 ff 69\n   00077d9a ff 21\n   00077d9b ff 40\n   00077d9c ff b7\n   00077d9d ff 69\n   00077d9e ff 21\n   00077d9f ff 40\n   00077da0 ff 2f\n   00077da1 ff 6a\n   00077da2 ff 21\n   00077da3 ff 40\n   00077da4 ff 07\n   00077da5 ff 6a\n   00077da6 ff 21\n   00077da7 ff 40\n   00077da8 ff 1b\n   00077da9 ff 6a\n   00077daa ff 21\n   00077dab ff 40\n   00077dac ff 44\n   00077dad ff 6a\n   00077dae ff 21\n   00077daf ff 40\n   00077db0 ff 44\n   00077db1 ff 6a\n   00077db2 ff 21\n   00077db3 ff 40\n   00077db4 ff 44\n   00077db5 ff 6a\n   00077db6 ff 21\n   00077db7 ff 40\n   00077db8 ff 44\n   00077db9 ff 6a\n   00077dba ff 21\n   00077dbb ff 40\n   00077dbc ff 44\n   00077dbd ff 6a\n   00077dbe ff 21\n   00077dbf ff 40\n   00077dc0 ff f3\n   00077dc1 ff 69\n   00077dc2 ff 21\n   00077dc3 ff 40\n   00077dc4 ff 37\n   00077dc5 ff 95\n   00077dc6 ff 21\n   00077dc7 ff 40\n   00077dc8 ff 43\n   00077dc9 ff 95\n   00077dca ff 21\n   00077dcb ff 40\n   00077dcc ff 0f\n   00077dcd ff 96\n   00077dce ff 21\n   00077dcf ff 40\n   00077dd0 ff 14\n   00077dd1 ff 96\n   00077dd2 ff 21\n   00077dd3 ff 40\n   00077dd4 ff 1f\n   00077dd5 ff 96\n   00077dd6 ff 21\n   00077dd7 ff 40\n   00077dd8 ff ba\n   00077dd9 ff a7\n   00077dda ff 21\n   00077ddb ff 40\n   00077ddc ff e2\n   00077ddd ff a7\n   00077dde ff 21\n   00077ddf ff 40\n   00077de0 ff c3\n   00077de1 ff a7\n   00077de2 ff 21\n   00077de3 ff 40\n   00077de4 ff e2\n   00077de5 ff a7\n   00077de6 ff 21\n   00077de7 ff 40\n   00077de8 ff cc\n   00077de9 ff a7\n   00077dea ff 21\n   00077deb ff 40\n   00077dec ff d1\n   00077ded ff a7\n   00077dee ff 21\n   00077def ff 40\n   00077df0 ff dc\n   00077df1 ff a7\n   00077df2 ff 21\n   00077df3 ff 40\n   00077df4 ff 01\n   00077df5 ff b9\n   00077df6 ff 21\n   00077df7 ff 40\n   00077df8 ff 85\n   00077df9 ff b8\n   00077dfa ff 21\n   00077dfb ff 40\n   00077dfc ff 8b\n   00077dfd ff b8\n   00077dfe ff 21\n   00077dff ff 40\n   00077e00 ff 96\n   00077e01 ff b8\n   00077e02 ff 21\n   00077e03 ff 40\n   00077e04 ff 9f\n   00077e05 ff b8\n   00077e06 ff 21\n   00077e07 ff 40\n   00077e08 ff a8\n   00077e09 ff b8\n   00077e0a ff 21\n   00077e0b ff 40\n   00077e0c ff c0\n   00077e0d ff b8\n   00077e0e ff 21\n   00077e0f ff 40\n   00077e10 ff 01\n   00077e11 ff b9\n   00077e12 ff 21\n   00077e13 ff 40\n   00077e14 ff b1\n   00077e15 ff 21\n   00077e16 ff 22\n   00077e17 ff 40\n   00077e18 ff c4\n   00077e19 ff 21\n   00077e1a ff 22\n   00077e1b ff 40\n   00077e1c ff b1\n   00077e1d ff 21\n   00077e1e ff 22\n   00077e1f ff 40\n   00077e20 ff e1\n   00077e21 ff 21\n   00077e22 ff 22\n   00077e23 ff 40\n   00077e24 ff ed\n   00077e25 ff 21\n   00077e26 ff 22\n   00077e27 ff 40\n   00077e28 ff f9\n   00077e29 ff 21\n   00077e2a ff 22\n   00077e2b ff 40\n   00077e2c ff ac\n   00077e2d ff 21\n   00077e2e ff 22\n   00077e2f ff 40\n   00077e30 ff a7\n   00077e31 ff 21\n   00077e32 ff 22\n   00077e33 ff 40\n   00077e34 ff a2\n   00077e35 ff 21\n   00077e36 ff 22\n   00077e37 ff 40\n   00077e38 ff a8\n   00077e39 ff 27\n   00077e3a ff 22\n   00077e3b ff 40\n   00077e3c ff 4c\n   00077e3d ff 27\n   00077e3e ff 22\n   00077e3f ff 40\n   00077e40 ff 4c\n   00077e41 ff 27\n   00077e42 ff 22\n   00077e43 ff 40\n   00077e44 ff 3f\n   00077e45 ff 27\n   00077e46 ff 22\n   00077e47 ff 40\n   00077e48 ff 3f\n   00077e49 ff 27\n   00077e4a ff 22\n   00077e4b ff 40\n   00077e4c ff 44\n   00077e4d ff 27\n   00077e4e ff 22\n   00077e4f ff 40\n   00077e50 ff 87\n   00077e51 ff 3a\n   00077e52 ff 22\n   00077e53 ff 40\n   00077e54 ff 98\n   00077e55 ff 3a\n   00077e56 ff 22\n   00077e57 ff 40\n   00077e58 ff a8\n   00077e59 ff 3a\n   00077e5a ff 22\n   00077e5b ff 40\n   00077e5c ff bc\n   00077e5d ff 3a\n   00077e5e ff 22\n   00077e5f ff 40\n   00077e60 ff d9\n   00077e61 ff 3a\n   00077e62 ff 22\n   00077e63 ff 40\n   00077e64 ff f2\n   00077e65 ff 3a\n   00077e66 ff 22\n   00077e67 ff 40\n   00077e68 ff 01\n   00077e69 ff 3b\n   00077e6a ff 22\n   00077e6b ff 40\n   00077e6c ff 28\n   00077e6d ff 4e\n   00077e6e ff 22\n   00077e6f ff 40\n   00077e70 ff ec\n   00077e71 ff 50\n   00077e72 ff 22\n   00077e73 ff 40\n   00077e74 ff 94\n   00077e75 ff 56\n   00077e76 ff 22\n   00077e77 ff 40\n   00077e78 ff db\n   00077e79 ff 59\n   00077e7a ff 22\n   00077e7b ff 40\n   00077e7c ff e4\n   00077e7d ff 59\n   00077e7e ff 22\n   00077e7f ff 40\n   00077e80 ff a8\n   00077e81 ff 5d\n   00077e82 ff 22\n   00077e83 ff 40\n   00077e84 ff e2\n   00077e85 ff 65\n   00077e86 ff 22\n   00077e87 ff 40\n   00077e88 ff ea\n   00077e89 ff 65\n   00077e8a ff 22\n   00077e8b ff 40\n   00077e8c ff fb\n   00077e8d ff 65\n   00077e8e ff 22\n   00077e8f ff 40\n   00077e90 ff 03\n   00077e91 ff 66\n   00077e92 ff 22\n   00077e93 ff 40\n   00077e94 ff 0b\n   00077e95 ff 66\n   00077e96 ff 22\n   00077e97 ff 40\n   00077e98 ff 13\n   00077e99 ff 66\n   00077e9a ff 22\n   00077e9b ff 40\n   00077e9c ff 1c\n   00077e9d ff 66\n   00077e9e ff 22\n   00077e9f ff 40\n   00077ea0 ff 24\n   00077ea1 ff 66\n   00077ea2 ff 22\n   00077ea3 ff 40\n   00077ea4 ff 2c\n   00077ea5 ff 66\n   00077ea6 ff 22\n   00077ea7 ff 40\n   00077ea8 ff 05\n   00077ea9 ff 37\n   00077eaa ff 41\n   00077eab ff 0a\n   00077eac ff 1a\n   00077ead ff 00\n   00077eae ff 03\n   00077eaf ff 04\n   00077eb0 ff 05\n   00077eb1 ff 1c\n   00077eb2 ff 0a\n   00077eb4 ff 01\n   00077eb5 ff 79\n   00077eb6 ff 00\n   00077eb7 ff 00\n   00077eb8 ff 00\n   00077eb9 ff 00\n   00077eba ff 00\n   00077ebb ff 86\n   00077ebd ff 01\n   00077ebe ff 79\n   00077ebf ff a0\n   00077ec0 ff 00\n   00077ec1 ff 00\n   00077ec2 ff 00\n   00077ec3 ff 00\n   00077ec4 ff e6\n   00077ec6 ff 01\n   00077ec7 ff 86\n   00077ec8 ff 00\n   00077ec9 ff 00\n   00077eca ff 00\n   00077ecb ff 00\n   00077ecc ff 00\n   00077ecd ff 79\n   00077ece ff a4\n   00077ecf ff a0\n   00077ed0 ff a1\n   00077ed1 ff a2\n   00077ed2 ff a3\n   00077ed3 ff b4\n   00077ed4 ff b0\n   00077ed5 ff b1\n   00077ed6 ff b2\n   00077ed7 ff b3\n   00077ed8 ff 4a\n   00077ed9 ff 61\n   00077eda ff 6e\n   00077edb ff 46\n   00077edc ff 65\n   00077edd ff 62\n   00077ede ff 4d\n   00077edf ff 61\n   00077ee0 ff 72\n   00077ee1 ff 41\n   00077ee2 ff 70\n   00077ee3 ff 72\n   00077ee4 ff 4d\n   00077ee5 ff 61\n   00077ee6 ff 79\n   00077ee7 ff 4a\n   00077ee8 ff 75\n   00077ee9 ff 6e\n   00077eea ff 4a\n   00077eeb ff 75\n   00077eec ff 6c\n   00077eed ff 41\n   00077eee ff 75\n   00077eef ff 67\n   00077ef0 ff 53\n   00077ef1 ff 65\n   00077ef2 ff 70\n   00077ef3 ff 4f\n   00077ef4 ff 63\n   00077ef5 ff 74\n   00077ef6 ff 4e\n   00077ef7 ff 6f\n   00077ef8 ff 76\n   00077ef9 ff 44\n   00077efa ff 65\n   00077efb ff 63\n   00077efc ff 00\n   00077efd ff 1f\n   00077efe ff 1c\n   00077eff ff 1f\n   00077f00 ff 1e\n   00077f01 ff 1f\n   00077f02 ff 1e\n   00077f03 ff 1f\n   00077f04 ff 1f\n   00077f05 ff 1e\n   00077f06 ff 1f\n   00077f07 ff 1e\n   00077f08 ff 1f\n   00077f09 ff 4a\n   00077f0a ff 61\n   00077f0b ff 6e\n   00077f0c ff 46\n   00077f0d ff 65\n   00077f0e ff 62\n   00077f0f ff 4d\n   00077f10 ff 61\n   00077f11 ff 72\n   00077f12 ff 41\n   00077f13 ff 70\n   00077f14 ff 72\n   00077f15 ff 4d\n   00077f16 ff 61\n   00077f17 ff 79\n   00077f18 ff 4a\n   00077f19 ff 75\n   00077f1a ff 6e\n   00077f1b ff 4a\n   00077f1c ff 75\n   00077f1d ff 6c\n   00077f1e ff 41\n   00077f1f ff 75\n   00077f20 ff 67\n   00077f21 ff 53\n   00077f22 ff 65\n   00077f23 ff 70\n   00077f24 ff 4f\n   00077f25 ff 63\n   00077f26 ff 74\n   00077f27 ff 4e\n   00077f28 ff 6f\n   00077f29 ff 76\n   00077f2a ff 44\n   00077f2b ff 65\n   00077f2c ff 63\n   00077f2d ff 00\n   00077f2e ff 00\n   00077f2f ff 00\n   00077f30 ff 00\n   00077f31 ff 00\n   00077f32 ff 00\n   00077f33 ff 00\n   00077f34 ff 00\n   00077f35 ff 00\n   00077f36 ff 00\n   00077f37 ff 00\n   00077f38 ff 00\n   00077f39 ff 00\n   00077f3a ff 00\n   00077f3b ff 00\n   00077f3c ff b8\n   00077f3d ff 70\n   00077f3e ff 22\n   00077f3f ff 40\n   00077f40 ff 00\n   00077f41 ff 00\n   00077f42 ff 00\n   00077f43 ff 00\n   00077f44 ff 00\n   00077f45 ff 00\n   00077f46 ff 00\n   00077f47 ff 00\n   00077f48 ff 00\n   00077f49 ff 00\n   00077f4a ff 00\n   00077f4b ff 00\n   00077f4c ff b8\n   00077f4d ff 70\n   00077f4e ff 22\n   00077f4f ff 40\n   00077f50 ff 45\n   00077f51 ff 58\n   00077f52 ff 54\n   00077f53 ff 5f\n   00077f54 ff 53\n   00077f55 ff 59\n   00077f56 ff 53\n   00077f57 ff 5f\n   00077f58 ff 52\n   00077f59 ff 53\n   00077f5a ff 54\n   00077f5b ff 00\n   00077f5c ff 45\n   00077f5d ff 58\n   00077f5e ff 43\n   00077f5f ff 45\n   00077f60 ff 50\n   00077f61 ff 54\n   00077f62 ff 49\n   00077f63 ff 4f\n   00077f64 ff 4e\n   00077f65 ff 00\n   00077f66 ff 53\n   00077f67 ff 4f\n   00077f68 ff 46\n   00077f69 ff 54\n   00077f6a ff 5f\n   00077f6b ff 57\n   00077f6c ff 44\n   00077f6d ff 54\n   00077f6e ff 00\n   00077f6f ff 53\n   00077f70 ff 4f\n   00077f71 ff 46\n   00077f72 ff 54\n   00077f73 ff 5f\n   00077f74 ff 52\n   00077f75 ff 45\n   00077f76 ff 53\n   00077f77 ff 54\n   00077f78 ff 41\n   00077f79 ff 52\n   00077f7a ff 54\n   00077f7b ff 00\n   00077f7c ff 44\n   00077f7d ff 45\n   00077f7e ff 45\n   00077f7f ff 50\n   00077f80 ff 5f\n   00077f81 ff 53\n   00077f82 ff 4c\n   00077f83 ff 45\n   00077f84 ff 45\n   00077f85 ff 50\n   00077f86 ff 5f\n   00077f87 ff 41\n   00077f88 ff 57\n   00077f89 ff 41\n   00077f8a ff 4b\n   00077f8b ff 45\n   00077f8c ff 00\n   00077f8d ff 3f\n   00077f8e ff 3f\n   00077f8f ff 3f\n   00077f90 ff 00\n   00077f91 ff 46\n   00077f92 ff 61\n   00077f93 ff 74\n   00077f94 ff 61\n   00077f95 ff 6c\n   00077f96 ff 20\n   00077f97 ff 65\n   00077f98 ff 78\n   00077f99 ff 63\n   00077f9a ff 65\n   00077f9b ff 70\n   00077f9c ff 74\n   00077f9d ff 69\n   00077f9e ff 6f\n   00077f9f ff 6e\n   00077fa0 ff 3a\n   00077fa1 ff 25\n   00077fa2 ff 64\n   00077fa3 ff 20\n   00077fa4 ff 66\n   00077fa5 ff 6c\n   00077fa6 ff 61\n   00077fa7 ff 67\n   00077fa8 ff 3a\n   00077fa9 ff 25\n   00077faa ff 64\n   00077fab ff 20\n   00077fac ff 28\n   00077fad ff 25\n   00077fae ff 73\n   00077faf ff 29\n   00077fb0 ff 20\n   00077fb1 ff 65\n   00077fb2 ff 70\n   00077fb3 ff 63\n   00077fb4 ff 31\n   00077fb5 ff 3a\n   00077fb6 ff 30\n   00077fb7 ff 78\n   00077fb8 ff 25\n   00077fb9 ff 30\n   00077fba ff 38\n   00077fbb ff 78\n   00077fbc ff 20\n   00077fbd ff 65\n   00077fbe ff 70\n   00077fbf ff 63\n   00077fc0 ff 32\n   00077fc1 ff 3a\n   00077fc2 ff 30\n   00077fc3 ff 78\n   00077fc4 ff 25\n   00077fc5 ff 30\n   00077fc6 ff 38\n   00077fc7 ff 78\n   00077fc8 ff 20\n   00077fc9 ff 65\n   00077fca ff 70\n   00077fcb ff 63\n   00077fcc ff 33\n   00077fcd ff 3a\n   00077fce ff 30\n   00077fcf ff 78\n   00077fd0 ff 25\n   00077fd1 ff 30\n   00077fd2 ff 38\n   00077fd3 ff 78\n   00077fd4 ff 20\n   00077fd5 ff 65\n   00077fd6 ff 78\n   00077fd7 ff 63\n   00077fd8 ff 76\n   00077fd9 ff 61\n   00077fda ff 64\n   00077fdb ff 64\n   00077fdc ff 72\n   00077fdd ff 3a\n   00077fde ff 30\n   00077fdf ff 78\n   00077fe0 ff 25\n   00077fe1 ff 30\n   00077fe2 ff 38\n   00077fe3 ff 78\n   00077fe4 ff 20\n   00077fe5 ff 64\n   00077fe6 ff 65\n   00077fe7 ff 70\n   00077fe8 ff 63\n   00077fe9 ff 3a\n   00077fea ff 30\n   00077feb ff 78\n   00077fec ff 25\n   00077fed ff 30\n   00077fee ff 38\n   00077fef ff 78\n   00077ff0 ff 00\n   00077ff1 ff 66\n   00077ff2 ff 6c\n   00077ff3 ff 61\n   00077ff4 ff 67\n   00077ff5 ff 3a\n   00077ff6 ff 20\n   00077ff7 ff 30\n   00077ff8 ff 00\n   00077ff9 ff 00\n   00077ffa ff 00\n   00077ffb ff 00\n   00077ffc ff 00\n   00077ffd ff 00\n   00077ffe ff 08\n   00077fff ff 00\n   00078000 4a 00\n   00078001 20 00\n   00078002 6e 04\n   00078003 20 00\n   00078004 4a 00\n   00078006 00 10\n   0007800a 00 20\n   0007800e 00 40\n   00078012 00 80\n   00078017 00 01\n   0007801b 00 02\n   00078020 6a 00\n   00078021 75 00\n   00078022 73 00\n   00078023 74 00\n   00078024 69 20\n   00078025 6e 15\n   00078026 6a 20\n   00078027 6f 40\n   00078028 79 14\n   00078029 63 e7\n   0007802a 65 20\n   0007802b 31 40\n   0007802c 32 5c\n   0007802d 00 15\n   0007802e 00 20\n   0007802f 00 40\n   00078030 00 d4\n   00078031 00 15\n   00078032 00 20\n   00078033 00 40\n   00078034 00 b0\n   00078035 00 15\n   00078036 00 20\n   00078037 00 40\n   00078038 00 fc\n   00078039 00 14\n   0007803a 00 20\n   0007803b 00 40\n   0007803c 00 08\n   0007803d 00 1b\n   0007803e 00 20\n   0007803f 00 40\n   00078040 00 9c\n   00078041 00 e6\n   00078042 00 20\n   00078043 00 40\n   00078044 00 dc\n   00078045 00 14\n   00078046 00 20\n   00078047 00 40\n   00078048 00 e4\n   00078049 00 14\n   0007804a 00 20\n   0007804b 00 40\n   0007804c 00 25\n   0007804d 00 75\n   0007804e 00 2e\n   0007804f 00 25\n   00078050 00 75\n   00078051 00 2e\n   00078052 00 25\n   00078053 00 75\n   00078054 00 2e\n   00078055 00 25\n   00078056 00 75\n   00078060 01 00\n   00078061 60 00\n   00078062 45 00\n   00078063 cb 00\n   00078064 b1 f4\n   00078065 f0 16\n   00078066 e0 20\n   00078067 50 40\n   00078068 53 25\n   00078069 46 30\n   0007806a 2d 32\n   0007806b 42 78\n   0007806c 52 00\n   0007806d 41 0d\n   0007806e 2d 0a\n   0007806f 47 00\n   00078070 4c 6e\n   00078071 00 61\n   00078072 00 6e\n   00078074 00 69\n   00078075 00 6e\n   00078076 00 66\n   00078078 00 6f\n   00078079 00 76\n   0007807a 00 66\n   0007807c 31 00\n   0007807d 30 00\n   0007807e 30 00\n   0007807f 30 00\n   00078080 32 00\n   00078081 36 00\n   00078082 31 00\n   00078083 35 00\n   00078084 37 b8\n   00078085 31 2d\n   00078086 00 20\n   00078087 30 40\n   00078088 34 14\n   00078089 62 e7\n   0007808a 35 20\n   0007808b 66 40\n   0007808c 36 b8\n   0007808d 31 2d\n   0007808e 66 20\n   0007808f 2d 40\n   00078090 65 b8\n   00078091 38 2d\n   00078092 61 20\n   00078093 34 40\n   00078094 2d b8\n   00078095 34 2d\n   00078096 37 20\n   00078097 66 40\n   00078098 61 b8\n   0007809a 62 20\n   0007809b 66 40\n   0007809c 62 08\n   0007809d 32 1b\n   0007809e 2d 20\n   0007809f 32 40\n   000780a0 37 9c\n   000780a1 64 e6\n   000780a2 32 20\n   000780a3 34 40\n   000780a4 36 45\n   000780a5 65 52\n   000780a6 62 52\n   000780a7 39 4f\n   000780a8 35 52\n   000780a9 32 5b\n   000780aa 30 25\n   000780ab 00 75\n   000780ac d0 5d\n   000780ad 27 3a\n   000780ae 00 20\n   000780af 4c 00\n   000780b0 28 4e\n   000780b1 32 6f\n   000780b2 d0 20\n   000780b3 27 45\n   000780b4 00 72\n   000780b5 4c 72\n   000780b6 28 6f\n   000780b7 33 72\n   000780b8 0a 00\n   000780b9 0a 46\n   000780ba 07 6c\n   000780bb 01 61\n   000780bc ff 73\n   000780bd ff 68\n   000780be ff 20\n   000780bf 00 57\n   000780c0 0a 72\n   000780c1 0a 69\n   000780c2 07 74\n   000780c3 01 65\n   000780c4 49 20\n   000780c5 54 46\n   000780c6 45 61\n   000780c7 41 69\n   000780c8 44 6c\n   000780c9 2d 65\n   000780ca 31 64\n   000780cb 30 00\n   000780cc 30 46\n   000780cd 30 6c\n   000780ce 32 61\n   000780cf 36 73\n   000780d0 31 68\n   000780d1 35 20\n   000780d2 37 45\n   000780d3 31 72\n   000780d4 00 61\n   000780d5 00 73\n   000780d6 00 65\n   000780d7 00 20\n   000780d8 00 46\n   000780d9 00 61\n   000780da 00 69\n   000780db 00 6c\n   000780dc 00 65\n   000780dd 00 64\n   000780df 00 46\n   000780e0 00 6c\n   000780e1 00 61\n   000780e2 00 73\n   000780e3 00 68\n   000780e4 31 20\n   000780e5 32 52\n   000780e6 33 65\n   000780e7 34 61\n   000780e8 35 64\n   000780e9 36 20\n   000780ea 37 46\n   000780eb 38 61\n   000780ec 00 69\n   000780ed 00 6c\n   000780ee 00 65\n   000780ef 00 64\n   000780f1 00 4e\n   000780f2 00 6f\n   000780f3 00 74\n   000780f4 00 20\n   000780f5 00 45\n   000780f6 00 6e\n   000780f7 00 6f\n   000780f8 00 75\n   000780f9 00 67\n   000780fa 00 68\n   000780fb 00 20\n   000780fc 00 53\n   000780fd 00 70\n   000780fe 00 61\n   000780ff 00 63\n   00078100 00 65\n   00078102 00 42\n   00078103 00 61\n   00078104 00 64\n   00078105 00 20\n   00078106 00 53\n   00078107 00 69\n   00078108 00 7a\n   00078109 00 65\n   0007810a 00 20\n   0007810b 00 47\n   0007810c 00 69\n   0007810d 00 76\n   0007810e 00 65\n   0007810f 00 6e\n   00078111 00 53\n   00078112 00 74\n   00078113 00 72\n   00078114 00 65\n   00078115 00 61\n   00078116 00 6d\n   00078117 00 20\n   00078118 00 52\n   00078119 00 65\n   0007811a 00 61\n   0007811b 00 64\n   0007811c 00 20\n   0007811d 00 54\n   0007811e 00 69\n   0007811f 00 6d\n   00078120 00 65\n   00078121 00 6f\n   00078122 00 75\n   00078123 00 74\n   00078124 10 00\n   00078125 07 4d\n   00078126 00 44\n   00078127 00 35\n   00078128 04 20\n   00078129 00 43\n   0007812a 00 68\n   0007812b 00 65\n   0007812c 00 63\n   0007812d 04 6b\n   0007812e 00 20\n   0007812f 00 46\n   00078130 00 61\n   00078131 d0 69\n   00078132 ea 6c\n   00078133 17 65\n   00078134 63 64\n   00078135 6e 00\n   00078136 2d 46\n   00078137 64 6c\n   00078138 69 61\n   0007813a 70 68\n   0007813b 2e 20\n   0007813e 6f 6e\n   0007813f 6c 66\n   00078140 6b 69\n   00078141 69 67\n   00078142 74 20\n   00078143 2e 77\n   00078144 63 72\n   00078145 63 6f\n   00078146 00 6e\n   00078147 00 67\n   00078148 00 20\n   00078149 00 72\n   0007814a 00 65\n   0007814b 00 61\n   0007814c 00 6c\n   0007814d 00 3a\n   0007814e 00 20\n   0007814f 00 25\n   00078150 00 64\n   00078151 00 20\n   00078152 00 49\n   00078153 00 44\n   00078154 00 45\n   00078155 00 3a\n   00078156 00 20\n   00078157 00 25\n   00078158 00 64\n   00078159 00 0a\n   0007815b 00 6e\n   0007815c 00 65\n   0007815d 00 77\n   0007815e 00 20\n   0007815f 00 46\n   00078160 00 6c\n   00078161 00 61\n   00078162 00 73\n   00078163 00 68\n   00078164 00 20\n   00078165 00 63\n   00078166 00 6f\n   00078167 00 6e\n   00078168 bb 66\n   00078169 01 69\n   0007816a 00 67\n   0007816b 00 20\n   0007816c 34 77\n   0007816d 50 72\n   0007816e 34 6f\n   0007816f cd 6e\n   00078170 00 67\n   00078171 00 20\n   00078172 00 72\n   00078173 00 65\n   00078174 ff 61\n   00078175 ff 6c\n   00078176 ff 3a\n   00078177 ff 20\n   00078178 ff 25\n   00078179 ff 64\n   0007817a ff 0a\n   0007817b ff 00\n   0007817c ff 4d\n   0007817d ff 61\n   0007817e ff 67\n   0007817f ff 69\n   00078180 ff 63\n   00078181 ff 20\n   00078182 ff 62\n   00078183 ff 79\n   00078184 ff 74\n   00078185 ff 65\n   00078186 ff 20\n   00078187 ff 69\n   00078188 ff 73\n   00078189 ff 20\n   0007818a ff 77\n   0007818b ff 72\n   0007818c ff 6f\n   0007818d ff 6e\n   0007818e ff 67\n   0007818f ff 2c\n   00078190 ff 20\n   00078191 ff 6e\n   00078192 ff 6f\n   00078193 ff 74\n   00078194 ff 20\n   00078195 ff 30\n   00078196 ff 78\n   00078197 ff 45\n   00078198 ff 39\n   00078199 ff 00\n   0007819a ff 55\n   0007819b ff 4e\n   0007819c ff 4b\n   0007819d ff 4e\n   0007819e ff 4f\n   0007819f ff 57\n   000781a0 ff 4e\n   000781a1 ff 00\n   000781a2 ff 2f\n   000781a3 ff 68\n   000781a4 ff 6f\n   000781a5 ff 6d\n   000781a6 ff 65\n   000781a7 ff 2f\n   000781a8 ff 74\n   000781a9 ff 72\n   000781aa ff 61\n   000781ab ff 76\n   000781ac ff 69\n   000781ad ff 73\n   000781ae ff 2f\n   000781af ff 2e\n   000781b0 ff 70\n   000781b1 ff 6c\n   000781b2 ff 61\n   000781b3 ff 74\n   000781b4 ff 66\n   000781b5 ff 6f\n   000781b6 ff 72\n   000781b7 ff 6d\n   000781b8 ff 69\n   000781b9 ff 6f\n   000781ba ff 2f\n   000781bb ff 70\n   000781bc ff 61\n   000781bd ff 63\n   000781be ff 6b\n   000781bf ff 61\n   000781c0 ff 67\n   000781c1 ff 65\n   000781c2 ff 73\n   000781c3 ff 2f\n   000781c4 ff 66\n   000781c5 ff 72\n   000781c6 ff 61\n   000781c7 ff 6d\n   000781c8 ff 65\n   000781c9 ff 77\n   000781ca ff 6f\n   000781cb ff 72\n   000781cc ff 6b\n   000781cd ff 2d\n   000781ce ff 61\n   000781cf ff 72\n   000781d0 ff 64\n   000781d1 ff 75\n   000781d2 ff 69\n   000781d3 ff 6e\n   000781d4 ff 6f\n   000781d5 ff 65\n   000781d6 ff 73\n   000781d7 ff 70\n   000781d8 ff 72\n   000781d9 ff 65\n   000781da ff 73\n   000781db ff 73\n   000781dc ff 69\n   000781dd ff 66\n   000781de ff 38\n   000781df ff 32\n   000781e0 ff 36\n   000781e1 ff 36\n   000781e2 ff 2f\n   000781e3 ff 63\n   000781e4 ff 6f\n   000781e5 ff 72\n   000781e6 ff 65\n   000781e7 ff 73\n   000781e8 ff 2f\n   000781e9 ff 65\n   000781ea ff 73\n   000781eb ff 70\n   000781ec ff 38\n   000781ed ff 32\n   000781ee ff 36\n   000781ef ff 36\n   000781f0 ff 2f\n   000781f1 ff 61\n   000781f2 ff 62\n   000781f3 ff 69\n   000781f4 ff 2e\n   000781f5 ff 63\n   000781f6 ff 70\n   000781f7 ff 70\n   000781f8 ff 00\n   000781f9 ff 5f\n   000781fa ff 5f\n   000781fb ff 74\n   000781fc ff 68\n   000781fd ff 72\n   000781fe ff 6f\n   000781ff ff 77\n   00078200 ff 5f\n   00078201 ff 62\n   00078202 ff 61\n   00078203 ff 64\n   00078204 ff 5f\n   00078205 ff 66\n   00078206 ff 75\n   00078207 ff 6e\n   00078208 ff 63\n   00078209 ff 74\n   0007820a ff 69\n   0007820b ff 6f\n   0007820c ff 6e\n   0007820d ff 5f\n   0007820e ff 63\n   0007820f ff 61\n   00078210 ff 6c\n   00078211 ff 6c\n   00078212 ff 00\n   00078213 ff 5f\n   00078214 ff 5f\n   00078215 ff 63\n   00078216 ff 78\n   00078217 ff 61\n   00078218 ff 5f\n   00078219 ff 70\n   0007821a ff 75\n   0007821b ff 72\n   0007821c ff 65\n   0007821d ff 5f\n   0007821e ff 76\n   0007821f ff 69\n   00078220 ff 72\n   00078221 ff 74\n   00078222 ff 75\n   00078223 ff 61\n   00078224 ff 6c\n   00078225 ff 00\n   00078226 ff 2f\n   00078227 ff 68\n   00078228 ff 6f\n   00078229 ff 6d\n   0007822a ff 65\n   0007822b ff 2f\n   0007822c ff 74\n   0007822d ff 72\n   0007822e ff 61\n   0007822f ff 76\n   00078230 ff 69\n   00078231 ff 73\n   00078232 ff 2f\n   00078233 ff 2e\n   00078234 ff 70\n   00078235 ff 6c\n   00078236 ff 61\n   00078237 ff 74\n   00078238 ff 66\n   00078239 ff 6f\n   0007823a ff 72\n   0007823b ff 6d\n   0007823c ff 69\n   0007823d ff 6f\n   0007823e ff 2f\n   0007823f ff 70\n   00078240 ff 61\n   00078241 ff 63\n   00078242 ff 6b\n   00078243 ff 61\n   00078244 ff 67\n   00078245 ff 65\n   00078246 ff 73\n   00078247 ff 2f\n   00078248 ff 66\n   00078249 ff 72\n   0007824a ff 61\n   0007824b ff 6d\n   0007824c ff 65\n   0007824d ff 77\n   0007824e ff 6f\n   0007824f ff 72\n   00078250 ff 6b\n   00078251 ff 2d\n   00078252 ff 61\n   00078253 ff 72\n   00078254 ff 64\n   00078255 ff 75\n   00078256 ff 69\n   00078257 ff 6e\n   00078258 ff 6f\n   00078259 ff 65\n   0007825a ff 73\n   0007825b ff 70\n   0007825c ff 72\n   0007825d ff 65\n   0007825e ff 73\n   0007825f ff 73\n   00078260 ff 69\n   00078261 ff 66\n   00078262 ff 38\n   00078263 ff 32\n   00078264 ff 36\n   00078265 ff 36\n   00078266 ff 2f\n   00078267 ff 63\n   00078268 ff 6f\n   00078269 ff 72\n   0007826a ff 65\n   0007826b ff 73\n   0007826c ff 2f\n   0007826d ff 65\n   0007826e ff 73\n   0007826f ff 70\n   00078270 ff 38\n   00078271 ff 32\n   00078272 ff 36\n   00078273 ff 36\n   00078274 ff 2f\n   00078275 ff 63\n   00078276 ff 6f\n   00078277 ff 72\n   00078278 ff 65\n   00078279 ff 5f\n   0007827a ff 65\n   0007827b ff 73\n   0007827c ff 70\n   0007827d ff 38\n   0007827e ff 32\n   0007827f ff 36\n   00078280 ff 36\n   00078281 ff 5f\n   00078282 ff 6d\n   00078283 ff 61\n   00078284 ff 69\n   00078285 ff 6e\n   00078286 ff 2e\n   00078287 ff 63\n   00078288 ff 70\n   00078289 ff 70\n   0007828a ff 00\n   0007828b ff 0a\n   0007828c ff 25\n   0007828d ff 30\n   0007828e ff 38\n   0007828f ff 78\n   00078290 ff 0a\n   00078291 ff 00\n   00078292 ff 32\n   00078293 ff 5f\n   00078294 ff 33\n   00078295 ff 5f\n   00078296 ff 30\n   00078297 ff 00\n   00078298 ff 6c\n   00078299 ff 6f\n   0007829a ff 6f\n   0007829b ff 70\n   0007829c ff 5f\n   0007829d ff 74\n   0007829e ff 61\n   0007829f ff 73\n   000782a0 ff 6b\n   000782a1 ff 00\n   000782a2 ff 5f\n   000782a3 ff 5f\n   000782a4 ff 79\n   000782a5 ff 69\n   000782a6 ff 65\n   000782a7 ff 6c\n   000782a8 ff 64\n   000782a9 ff 00\n   000782aa ff 30\n   000782ab ff 31\n   000782ac ff 32\n   000782ad ff 33\n   000782ae ff 34\n   000782af ff 35\n   000782b0 ff 36\n   000782b1 ff 37\n   000782b2 ff 38\n   000782b3 ff 39\n   000782b4 ff 61\n   000782b5 ff 62\n   000782b6 ff 63\n   000782b7 ff 64\n   000782b8 ff 65\n   000782b9 ff 66\n   000782ba ff 00\n   000782bb ff 0a\n   000782bc ff 50\n   000782bd ff 61\n   000782be ff 6e\n   000782bf ff 69\n   000782c0 ff 63\n   000782c1 ff 20\n   000782c2 ff 25\n   000782c3 ff 73\n   000782c4 ff 3a\n   000782c5 ff 25\n   000782c6 ff 64\n   000782c7 ff 20\n   000782c8 ff 25\n   000782c9 ff 73\n   000782ca ff 0a\n   000782cb ff 00\n   000782cc ff 41\n   000782cd ff 62\n   000782ce ff 6f\n   000782cf ff 72\n   000782d0 ff 74\n   000782d1 ff 20\n   000782d2 ff 63\n   000782d3 ff 61\n   000782d4 ff 6c\n   000782d5 ff 6c\n   000782d6 ff 65\n   000782d7 ff 64\n   000782d8 ff 0a\n   000782d9 ff 00\n   000782da ff 0a\n   000782db ff 45\n   000782dc ff 78\n   000782dd ff 63\n   000782de ff 65\n   000782df ff 70\n   000782e0 ff 74\n   000782e1 ff 69\n   000782e2 ff 6f\n   000782e3 ff 6e\n   000782e4 ff 20\n   000782e5 ff 28\n   000782e6 ff 25\n   000782e7 ff 64\n   000782e8 ff 29\n   000782e9 ff 3a\n   000782ea ff 0a\n   000782eb ff 65\n   000782ec ff 70\n   000782ed ff 63\n   000782ee ff 31\n   000782ef ff 3d\n   000782f0 ff 30\n   000782f1 ff 78\n   000782f2 ff 25\n   000782f3 ff 30\n   000782f4 ff 38\n   000782f5 ff 78\n   000782f6 ff 20\n   000782f7 ff 65\n   000782f8 ff 70\n   000782f9 ff 63\n   000782fa ff 32\n   000782fb ff 3d\n   000782fc ff 30\n   000782fd ff 78\n   000782fe ff 25\n   000782ff ff 30\n   00078300 ff 38\n   00078301 ff 78\n   00078302 ff 20\n   00078303 ff 65\n   00078304 ff 70\n   00078305 ff 63\n   00078306 ff 33\n   00078307 ff 3d\n   00078308 ff 30\n   00078309 ff 78\n   0007830a ff 25\n   0007830b ff 30\n   0007830c ff 38\n   0007830d ff 78\n   0007830e ff 20\n   0007830f ff 65\n   00078310 ff 78\n   00078311 ff 63\n   00078312 ff 76\n   00078313 ff 61\n   00078314 ff 64\n   00078315 ff 64\n   00078316 ff 72\n   00078317 ff 3d\n   00078318 ff 30\n   00078319 ff 78\n   0007831a ff 25\n   0007831b ff 30\n   0007831c ff 38\n   0007831d ff 78\n   0007831e ff 20\n   0007831f ff 64\n   00078320 ff 65\n   00078321 ff 70\n   00078322 ff 63\n   00078323 ff 3d\n   00078324 ff 30\n   00078325 ff 78\n   00078326 ff 25\n   00078327 ff 30\n   00078328 ff 38\n   00078329 ff 78\n   0007832a ff 0a\n   0007832b ff 00\n   0007832c ff 0a\n   0007832d ff 53\n   0007832e ff 6f\n   0007832f ff 66\n   00078330 ff 74\n   00078331 ff 20\n   00078332 ff 57\n   00078333 ff 44\n   00078334 ff 54\n   00078335 ff 20\n   00078336 ff 72\n   00078337 ff 65\n   00078338 ff 73\n   00078339 ff 65\n   0007833a ff 74\n   0007833b ff 0a\n   0007833c ff 00\n   0007833d ff 0a\n   0007833e ff 63\n   0007833f ff 74\n   00078340 ff 78\n   00078341 ff 3a\n   00078342 ff 20\n   00078343 ff 63\n   00078344 ff 6f\n   00078345 ff 6e\n   00078346 ff 74\n   00078347 ff 20\n   00078348 ff 0a\n   00078349 ff 00\n   0007834a ff 0a\n   0007834b ff 63\n   0007834c ff 74\n   0007834d ff 78\n   0007834e ff 3a\n   0007834f ff 20\n   00078350 ff 73\n   00078351 ff 79\n   00078352 ff 73\n   00078353 ff 20\n   00078354 ff 0a\n   00078355 ff 00\n   00078356 ff 73\n   00078357 ff 70\n   00078358 ff 3a\n   00078359 ff 20\n   0007835a ff 25\n   0007835b ff 30\n   0007835c ff 38\n   0007835d ff 78\n   0007835e ff 20\n   0007835f ff 65\n   00078360 ff 6e\n   00078361 ff 64\n   00078362 ff 3a\n   00078363 ff 20\n   00078364 ff 25\n   00078365 ff 30\n   00078366 ff 38\n   00078367 ff 78\n   00078368 ff 20\n   00078369 ff 6f\n   0007836a ff 66\n   0007836b ff 66\n   0007836c ff 73\n   0007836d ff 65\n   0007836e ff 74\n   0007836f ff 3a\n   00078370 ff 20\n   00078371 ff 25\n   00078372 ff 30\n   00078373 ff 34\n   00078374 ff 78\n   00078375 ff 0a\n   00078376 ff 00\n   00078377 ff 0a\n   00078378 ff 3e\n   00078379 ff 3e\n   0007837a ff 3e\n   0007837b ff 73\n   0007837c ff 74\n   0007837d ff 61\n   0007837e ff 63\n   0007837f ff 6b\n   00078380 ff 3e\n   00078381 ff 3e\n   00078382 ff 3e\n   00078383 ff 0a\n   00078384 ff 00\n   00078385 ff 25\n   00078386 ff 30\n   00078387 ff 38\n   00078388 ff 78\n   00078389 ff 3a\n   0007838a ff 20\n   0007838b ff 20\n   0007838c ff 25\n   0007838d ff 30\n   0007838e ff 38\n   0007838f ff 78\n   00078390 ff 20\n   00078391 ff 25\n   00078392 ff 30\n   00078393 ff 38\n   00078394 ff 78\n   00078395 ff 20\n   00078396 ff 25\n   00078397 ff 30\n   00078398 ff 38\n   00078399 ff 78\n   0007839a ff 20\n   0007839b ff 25\n   0007839c ff 30\n   0007839d ff 38\n   0007839e ff 78\n   0007839f ff 20\n   000783a0 ff 25\n   000783a1 ff 63\n   000783a2 ff 0a\n   000783a3 ff 00\n   000783a4 ff 3c\n   000783a5 ff 3c\n   000783a6 ff 3c\n   000783a7 ff 73\n   000783a8 ff 74\n   000783a9 ff 61\n   000783aa ff 63\n   000783ab ff 6b\n   000783ac ff 3c\n   000783ad ff 3c\n   000783ae ff 3c\n   000783af ff 0a\n   000783b0 ff 00\n   000783b1 ff 0a\n   000783b2 ff 0a\n   000783b3 ff 44\n   000783b4 ff 75\n   000783b5 ff 6d\n   000783b6 ff 70\n   000783b7 ff 69\n   000783b8 ff 6e\n   000783b9 ff 67\n   000783ba ff 20\n   000783bb ff 74\n   000783bc ff 68\n   000783bd ff 65\n   000783be ff 20\n   000783bf ff 75\n   000783c0 ff 6d\n   000783c1 ff 6d\n   000783c2 ff 5f\n   000783c3 ff 68\n   000783c4 ff 65\n   000783c5 ff 61\n   000783c6 ff 70\n   000783c7 ff 2e\n   000783c8 ff 2e\n   000783c9 ff 2e\n   000783ca ff 00\n   000783cb ff 7c\n   000783cc ff 30\n   000783cd ff 78\n   000783ce ff 25\n   000783cf ff 30\n   000783d0 ff 38\n   000783d1 ff 6c\n   000783d2 ff 78\n   000783d3 ff 7c\n   000783d4 ff 42\n   000783d5 ff 20\n   000783d6 ff 25\n   000783d7 ff 35\n   000783d8 ff 64\n   000783d9 ff 7c\n   000783da ff 4e\n   000783db ff 42\n   000783dc ff 20\n   000783dd ff 25\n   000783de ff 35\n   000783df ff 64\n   000783e0 ff 7c\n   000783e1 ff 50\n   000783e2 ff 42\n   000783e3 ff 20\n   000783e4 ff 25\n   000783e5 ff 35\n   000783e6 ff 64\n   000783e7 ff 7c\n   000783e8 ff 5a\n   000783e9 ff 20\n   000783ea ff 25\n   000783eb ff 35\n   000783ec ff 64\n   000783ed ff 7c\n   000783ee ff 4e\n   000783ef ff 46\n   000783f0 ff 20\n   000783f1 ff 25\n   000783f2 ff 35\n   000783f3 ff 64\n   000783f4 ff 7c\n   000783f5 ff 50\n   000783f6 ff 46\n   000783f7 ff 20\n   000783f8 ff 25\n   000783f9 ff 35\n   000783fa ff 64\n   000783fb ff 7c\n   000783fc ff 0a\n   000783fd ff 00\n   000783fe ff 7c\n   000783ff ff 30\n   00078400 ff 78\n   00078401 ff 25\n   00078402 ff 30\n   00078403 ff 38\n   00078404 ff 6c\n   00078405 ff 78\n   00078406 ff 7c\n   00078407 ff 42\n   00078408 ff 20\n   00078409 ff 25\n   0007840a ff 35\n   0007840b ff 64\n   0007840c ff 7c\n   0007840d ff 4e\n   0007840e ff 42\n   0007840f ff 20\n   00078410 ff 25\n   00078411 ff 35\n   00078412 ff 64\n   00078413 ff 7c\n   00078414 ff 50\n   00078415 ff 42\n   00078416 ff 20\n   00078417 ff 25\n   00078418 ff 35\n   00078419 ff 64\n   0007841a ff 7c\n   0007841b ff 5a\n   0007841c ff 20\n   0007841d ff 25\n   0007841e ff 35\n   0007841f ff 75\n   00078420 ff 7c\n   00078421 ff 4e\n   00078422 ff 46\n   00078423 ff 20\n   00078424 ff 25\n   00078425 ff 35\n   00078426 ff 64\n   00078427 ff 7c\n   00078428 ff 50\n   00078429 ff 46\n   0007842a ff 20\n   0007842b ff 25\n   0007842c ff 35\n   0007842d ff 64\n   0007842e ff 7c\n   0007842f ff 0a\n   00078430 ff 00\n   00078431 ff 7c\n   00078432 ff 30\n   00078433 ff 78\n   00078434 ff 25\n   00078435 ff 30\n   00078436 ff 38\n   00078437 ff 6c\n   00078438 ff 78\n   00078439 ff 7c\n   0007843a ff 42\n   0007843b ff 20\n   0007843c ff 25\n   0007843d ff 35\n   0007843e ff 64\n   0007843f ff 7c\n   00078440 ff 4e\n   00078441 ff 42\n   00078442 ff 20\n   00078443 ff 25\n   00078444 ff 35\n   00078445 ff 64\n   00078446 ff 7c\n   00078447 ff 50\n   00078448 ff 42\n   00078449 ff 20\n   0007844a ff 25\n   0007844b ff 35\n   0007844c ff 64\n   0007844d ff 7c\n   0007844e ff 5a\n   0007844f ff 20\n   00078450 ff 25\n   00078451 ff 35\n   00078452 ff 75\n   00078453 ff 7c\n   00078454 ff 0a\n   00078455 ff 00\n   00078456 ff 54\n   00078457 ff 6f\n   00078458 ff 74\n   00078459 ff 61\n   0007845a ff 6c\n   0007845b ff 20\n   0007845c ff 45\n   0007845d ff 6e\n   0007845e ff 74\n   0007845f ff 72\n   00078460 ff 69\n   00078461 ff 65\n   00078462 ff 73\n   00078463 ff 20\n   00078464 ff 25\n   00078465 ff 35\n   00078466 ff 64\n   00078467 ff 20\n   00078468 ff 20\n   00078469 ff 20\n   0007846a ff 20\n   0007846b ff 55\n   0007846c ff 73\n   0007846d ff 65\n   0007846e ff 64\n   0007846f ff 20\n   00078470 ff 45\n   00078471 ff 6e\n   00078472 ff 74\n   00078473 ff 72\n   00078474 ff 69\n   00078475 ff 65\n   00078476 ff 73\n   00078477 ff 20\n   00078478 ff 25\n   00078479 ff 35\n   0007847a ff 64\n   0007847b ff 20\n   0007847c ff 20\n   0007847d ff 20\n   0007847e ff 20\n   0007847f ff 46\n   00078480 ff 72\n   00078481 ff 65\n   00078482 ff 65\n   00078483 ff 20\n   00078484 ff 45\n   00078485 ff 6e\n   00078486 ff 74\n   00078487 ff 72\n   00078488 ff 69\n   00078489 ff 65\n   0007848a ff 73\n   0007848b ff 20\n   0007848c ff 25\n   0007848d ff 35\n   0007848e ff 64\n   0007848f ff 0a\n   00078490 ff 00\n   00078491 ff 54\n   00078492 ff 6f\n   00078493 ff 74\n   00078494 ff 61\n   00078495 ff 6c\n   00078496 ff 20\n   00078497 ff 42\n   00078498 ff 6c\n   00078499 ff 6f\n   0007849a ff 63\n   0007849b ff 6b\n   0007849c ff 73\n   0007849d ff 20\n   0007849e ff 20\n   0007849f ff 25\n   000784a0 ff 35\n   000784a1 ff 64\n   000784a2 ff 20\n   000784a3 ff 20\n   000784a4 ff 20\n   000784a5 ff 20\n   000784a6 ff 55\n   000784a7 ff 73\n   000784a8 ff 65\n   000784a9 ff 64\n   000784aa ff 20\n   000784ab ff 42\n   000784ac ff 6c\n   000784ad ff 6f\n   000784ae ff 63\n   000784af ff 6b\n   000784b0 ff 73\n   000784b1 ff 20\n   000784b2 ff 20\n   000784b3 ff 25\n   000784b4 ff 35\n   000784b5 ff 64\n   000784b6 ff 20\n   000784b7 ff 20\n   000784b8 ff 20\n   000784b9 ff 20\n   000784ba ff 46\n   000784bb ff 72\n   000784bc ff 65\n   000784bd ff 65\n   000784be ff 20\n   000784bf ff 42\n   000784c0 ff 6c\n   000784c1 ff 6f\n   000784c2 ff 63\n   000784c3 ff 6b\n   000784c4 ff 73\n   000784c5 ff 20\n   000784c6 ff 20\n   000784c7 ff 25\n   000784c8 ff 35\n   000784c9 ff 64\n   000784ca ff 0a\n   000784cb ff 00\n   000784cc ff 25\n   000784cd ff 73\n   000784ce ff 20\n   000784cf ff 25\n   000784d0 ff 75\n   000784d1 ff 0a\n   000784d2 ff 00\n   000784d3 ff 00\n   000784d4 ff 70\n   000784d5 ff 70\n   000784d6 ff 00\n   000784d7 ff 00\n   000784d8 ff 18\n   000784d9 ff fe\n   000784da ff 34\n   000784db ff 00\n   000784dc ff 64\n   000784dd ff 65\n   000784de ff 76\n   000784df ff 00\n   000784e0 ff 6d\n   000784e1 ff 61\n   000784e2 ff 63\n   000784e3 ff 00\n   000784e4 ff 70\n   000784e5 ff 6d\n   000784e6 ff 32\n   000784e7 ff 00\n   000784e8 ff 6d\n   000784e9 ff 61\n   000784ea ff 69\n   000784eb ff 00\n   000784ec ff 74\n   000784ed ff 69\n   000784ee ff 6d\n   000784ef ff 00\n   000784f0 ff 64\n   000784f1 ff 68\n   000784f2 ff 63\n   000784f3 ff 70\n   000784f4 ff 73\n   000784f5 ff 5f\n   000784f6 ff 73\n   000784f7 ff 74\n   000784f8 ff 61\n   000784f9 ff 72\n   000784fa ff 74\n   000784fb ff 28\n   000784fc ff 29\n   000784fd ff 3a\n   000784fe ff 20\n   000784ff ff 63\n   00078500 ff 6f\n   00078501 ff 75\n   00078502 ff 6c\n   00078503 ff 64\n   00078504 ff 20\n   00078505 ff 6e\n   00078506 ff 6f\n   00078507 ff 74\n   00078508 ff 20\n   00078509 ff 6f\n   0007850a ff 62\n   0007850b ff 74\n   0007850c ff 61\n   0007850d ff 69\n   0007850e ff 6e\n   0007850f ff 20\n   00078510 ff 70\n   00078511 ff 63\n   00078512 ff 62\n   00078513 ff 0a\n   00078514 ff 00\n   00078515 ff 65\n   00078516 ff 72\n   00078517 ff 72\n   00078518 ff 20\n   00078519 ff 69\n   0007851a ff 6e\n   0007851b ff 20\n   0007851c ff 68\n   0007851d ff 6f\n   0007851e ff 73\n   0007851f ff 74\n   00078520 ff 20\n   00078521 ff 63\n   00078522 ff 6f\n   00078523 ff 6e\n   00078524 ff 6e\n   00078525 ff 65\n   00078526 ff 63\n   00078527 ff 74\n   00078528 ff 65\n   00078529 ff 64\n   0007852a ff 20\n   0007852b ff 28\n   0007852c ff 25\n   0007852d ff 73\n   0007852e ff 29\n   0007852f ff 0a\n   00078530 ff 00\n   00078531 ff 52\n   00078532 ff 65\n   00078533 ff 63\n   00078534 ff 76\n   00078535 ff 48\n   00078536 ff 6f\n   00078537 ff 6c\n   00078538 ff 64\n   00078539 ff 2c\n   0007853a ff 20\n   0007853b ff 42\n   0007853c ff 79\n   0007853d ff 20\n   0007853e ff 70\n   0007853f ff 65\n   00078540 ff 73\n   00078541 ff 70\n   00078542 ff 63\n   00078543 ff 6f\n   00078544 ff 6e\n   00078545 ff 6e\n   00078546 ff 2c\n   00078547 ff 66\n   00078548 ff 69\n   00078549 ff 6e\n   0007854a ff 64\n   0007854b ff 20\n   0007854c ff 63\n   0007854d ff 6f\n   0007854e ff 6e\n   0007854f ff 6e\n   00078550 ff 5f\n   00078551 ff 6d\n   00078552 ff 73\n   00078553 ff 67\n   00078554 ff 20\n   00078555 ff 66\n   00078556 ff 61\n   00078557 ff 69\n   00078558 ff 6c\n   00078559 ff 0a\n   0007855a ff 00\n   0007855b ff 65\n   0007855c ff 73\n   0007855d ff 70\n   0007855e ff 63\n   0007855f ff 6f\n   00078560 ff 6e\n   00078561 ff 6e\n   00078562 ff 5f\n   00078563 ff 74\n   00078564 ff 63\n   00078565 ff 70\n   00078566 ff 5f\n   00078567 ff 64\n   00078568 ff 65\n   00078569 ff 6c\n   0007856a ff 65\n   0007856b ff 74\n   0007856c ff 65\n   0007856d ff 20\n   0007856e ff 25\n   0007856f ff 64\n   00078570 ff 2c\n   00078571 ff 20\n   00078572 ff 25\n   00078573 ff 64\n   00078574 ff 0a\n   00078575 ff 00\n   00078576 ff 44\n   00078577 ff 48\n   00078578 ff 43\n   00078579 ff 50\n   0007857a ff 20\n   0007857b ff 74\n   0007857c ff 69\n   0007857d ff 6d\n   0007857e ff 65\n   0007857f ff 6f\n   00078580 ff 75\n   00078581 ff 74\n   00078582 ff 0a\n   00078583 ff 00\n   00078584 ff 25\n   00078585 ff 73\n   00078586 ff 20\n   00078587 ff 25\n   00078588 ff 73\n   00078589 ff 20\n   0007858a ff 25\n   0007858b ff 30\n   0007858c ff 32\n   0007858d ff 64\n   0007858e ff 20\n   0007858f ff 25\n   00078590 ff 30\n   00078591 ff 32\n   00078592 ff 64\n   00078593 ff 3a\n   00078594 ff 25\n   00078595 ff 30\n   00078596 ff 32\n   00078597 ff 64\n   00078598 ff 3a\n   00078599 ff 25\n   0007859a ff 30\n   0007859b ff 32\n   0007859c ff 64\n   0007859d ff 20\n   0007859e ff 25\n   0007859f ff 30\n   000785a0 ff 32\n   000785a1 ff 64\n   000785a2 ff 0a\n   000785a3 ff 00\n   000785a4 ff 70\n   000785a5 ff 6c\n   000785a6 ff 65\n   000785a7 ff 61\n   000785a8 ff 73\n   000785a9 ff 65\n   000785aa ff 20\n   000785ab ff 73\n   000785ac ff 74\n   000785ad ff 61\n   000785ae ff 72\n   000785af ff 74\n   000785b0 ff 20\n   000785b1 ff 73\n   000785b2 ff 6e\n   000785b3 ff 74\n   000785b4 ff 70\n   000785b5 ff 20\n   000785b6 ff 66\n   000785b7 ff 69\n   000785b8 ff 72\n   000785b9 ff 73\n   000785ba ff 74\n   000785bb ff 20\n   000785bc ff 21\n   000785bd ff 0a\n   000785be ff 00\n   000785bf ff 4a\n   000785c0 ff 61\n   000785c1 ff 6e\n   000785c2 ff 00\n   000785c3 ff 46\n   000785c4 ff 65\n   000785c5 ff 62\n   000785c6 ff 00\n   000785c7 ff 4d\n   000785c8 ff 61\n   000785c9 ff 72\n   000785ca ff 00\n   000785cb ff 41\n   000785cc ff 70\n   000785cd ff 72\n   000785ce ff 00\n   000785cf ff 4d\n   000785d0 ff 61\n   000785d1 ff 79\n   000785d2 ff 00\n   000785d3 ff 4a\n   000785d4 ff 75\n   000785d5 ff 6e\n   000785d6 ff 00\n   000785d7 ff 4a\n   000785d8 ff 75\n   000785d9 ff 6c\n   000785da ff 00\n   000785db ff 41\n   000785dc ff 75\n   000785dd ff 67\n   000785de ff 00\n   000785df ff 53\n   000785e0 ff 65\n   000785e1 ff 70\n   000785e2 ff 00\n   000785e3 ff 4f\n   000785e4 ff 63\n   000785e5 ff 74\n   000785e6 ff 00\n   000785e7 ff 4e\n   000785e8 ff 6f\n   000785e9 ff 76\n   000785ea ff 00\n   000785eb ff 44\n   000785ec ff 65\n   000785ed ff 63\n   000785ee ff 00\n   000785ef ff 53\n   000785f0 ff 75\n   000785f1 ff 6e\n   000785f2 ff 00\n   000785f3 ff 4d\n   000785f4 ff 6f\n   000785f5 ff 6e\n   000785f6 ff 00\n   000785f7 ff 54\n   000785f8 ff 75\n   000785f9 ff 65\n   000785fa ff 00\n   000785fb ff 57\n   000785fc ff 65\n   000785fd ff 64\n   000785fe ff 00\n   000785ff ff 54\n   00078600 ff 68\n   00078601 ff 75\n   00078602 ff 00\n   00078603 ff 46\n   00078604 ff 72\n   00078605 ff 69\n   00078606 ff 00\n   00078607 ff 53\n   00078608 ff 61\n   00078609 ff 74\n   0007860a ff 00\n   0007860b ff 00\n   0007860c ff 6d\n   0007860d ff 01\n   0007860e ff 00\n   0007860f ff 00\n   00078610 ff 6e\n   00078611 ff 01\n   00078612 ff 00\n   00078613 ff 00\n   00078614 ff 1f\n   00078615 ff 00\n   00078616 ff 00\n   00078617 ff 00\n   00078618 ff 1c\n   00078619 ff 00\n   0007861a ff 00\n   0007861b ff 00\n   0007861c ff 1f\n   0007861d ff 00\n   0007861e ff 00\n   0007861f ff 00\n   00078620 ff 1e\n   00078621 ff 00\n   00078622 ff 00\n   00078623 ff 00\n   00078624 ff 1f\n   00078625 ff 00\n   00078626 ff 00\n   00078627 ff 00\n   00078628 ff 1e\n   00078629 ff 00\n   0007862a ff 00\n   0007862b ff 00\n   0007862c ff 1f\n   0007862d ff 00\n   0007862e ff 00\n   0007862f ff 00\n   00078630 ff 1f\n   00078631 ff 00\n   00078632 ff 00\n   00078633 ff 00\n   00078634 ff 1e\n   00078635 ff 00\n   00078636 ff 00\n   00078637 ff 00\n   00078638 ff 1f\n   00078639 ff 00\n   0007863a ff 00\n   0007863b ff 00\n   0007863c ff 1e\n   0007863d ff 00\n   0007863e ff 00\n   0007863f ff 00\n   00078640 ff 1f\n   00078641 ff 00\n   00078642 ff 00\n   00078643 ff 00\n   00078644 ff 1f\n   00078645 ff 00\n   00078646 ff 00\n   00078647 ff 00\n   00078648 ff 1d\n   00078649 ff 00\n   0007864a ff 00\n   0007864b ff 00\n   0007864c ff 1f\n   0007864d ff 00\n   0007864e ff 00\n   0007864f ff 00\n   00078650 ff 1e\n   00078651 ff 00\n   00078652 ff 00\n   00078653 ff 00\n   00078654 ff 1f\n   00078655 ff 00\n   00078656 ff 00\n   00078657 ff 00\n   00078658 ff 1e\n   00078659 ff 00\n   0007865a ff 00\n   0007865b ff 00\n   0007865c ff 1f\n   0007865d ff 00\n   0007865e ff 00\n   0007865f ff 00\n   00078660 ff 1f\n   00078661 ff 00\n   00078662 ff 00\n   00078663 ff 00\n   00078664 ff 1e\n   00078665 ff 00\n   00078666 ff 00\n   00078667 ff 00\n   00078668 ff 1f\n   00078669 ff 00\n   0007866a ff 00\n   0007866b ff 00\n   0007866c ff 1e\n   0007866d ff 00\n   0007866e ff 00\n   0007866f ff 00\n   00078670 ff 1f\n   00078671 ff 00\n   00078672 ff 00\n   00078673 ff 00\n   00078674 ff 36\n   00078675 ff 56\n   00078676 ff 10\n   00078677 ff 40\n   00078678 ff 6d\n   00078679 ff 56\n   0007867a ff 10\n   0007867b ff 40\n   0007867c ff 8e\n   0007867d ff 56\n   0007867e ff 10\n   0007867f ff 40\n   00078680 ff 94\n   00078681 ff 56\n   00078682 ff 10\n   00078683 ff 40\n   00078684 ff 94\n   00078685 ff 56\n   00078686 ff 10\n   00078687 ff 40\n   00078688 ff be\n   00078689 ff 56\n   0007868a ff 10\n   0007868b ff 40\n   0007868c ff be\n   0007868d ff 56\n   0007868e ff 10\n   0007868f ff 40\n   00078690 ff a9\n   00078691 ff 56\n   00078692 ff 10\n   00078693 ff 40\n   00078694 ff 00\n   00078695 ff 00\n   00078696 ff 00\n   00078697 ff 00\n   00078698 ff 00\n   00078699 ff 00\n   000786a0 ff 69\n   000786a1 ff 70\n   000786a2 ff 5f\n   000786a3 ff 72\n   000786a4 ff 6f\n   000786a5 ff 75\n   000786a6 ff 74\n   000786a7 ff 65\n   000786a8 ff 72\n   000786a9 ff 20\n   000786aa ff 25\n   000786ab ff 64\n   000786ac ff 20\n   000786ad ff 25\n   000786ae ff 70\n   000786af ff 0a\n   000786b0 ff 00\n   000786b1 ff 00\n   000786b2 ff 00\n   000786b3 ff 00\n   000786b4 ff 2c\n   000786b5 ff 01\n   000786b6 ff 00\n   000786b7 ff 00\n   000786be ff 00\n   000786bf ff 00\n   000786c0 ff 25\n   000786c1 ff 30\n   000786c2 ff 38\n   000786c3 ff 64\n   000786c4 ff 00\n   000786c5 ff 00\n   000786c6 ff 00\n   000786c7 ff 00\n   000786c8 ff 30\n   000786c9 ff 30\n   000786ca ff 30\n   000786cb ff 30\n   000786cc ff 30\n   000786cd ff 30\n   000786ce ff 30\n   000786cf ff 30\n   000786d0 ff 00\n   000786d1 ff 00\n   000786d2 ff 00\n   000786d3 ff 00\n   000786d4 ff 77\n   000786d5 ff 70\n   000786d6 ff 73\n   000786d7 ff 5f\n   000786d8 ff 73\n   000786d9 ff 74\n   000786da ff 61\n   000786db ff 74\n   000786dc ff 65\n   000786dd ff 3d\n   000786de ff 75\n   000786df ff 6e\n   000786e0 ff 63\n   000786e1 ff 6f\n   000786e2 ff 6e\n   000786e3 ff 66\n   000786e4 ff 69\n   000786e5 ff 67\n   000786e6 ff 75\n   000786e7 ff 72\n   000786e8 ff 65\n   000786e9 ff 64\n   000786ea ff 0a\n   000786eb ff 00\n   000786ec ff 77\n   000786ed ff 70\n   000786ee ff 73\n   000786ef ff 5f\n   000786f0 ff 73\n   000786f1 ff 74\n   000786f2 ff 61\n   000786f3 ff 74\n   000786f4 ff 65\n   000786f5 ff 3d\n   000786f6 ff 63\n   000786f7 ff 6f\n   000786f8 ff 6e\n   000786f9 ff 66\n   000786fa ff 69\n   000786fb ff 67\n   000786fc ff 75\n   000786fd ff 72\n   000786fe ff 65\n   000786ff ff 64\n   00078700 ff 0a\n   00078701 ff 00\n   00078702 ff 00\n   00078703 ff 00\n   00078704 ff 77\n   00078705 ff 70\n   00078706 ff 73\n   00078707 ff 5f\n   00078708 ff 61\n   00078709 ff 70\n   0007870a ff 5f\n   0007870b ff 73\n   0007870c ff 65\n   0007870d ff 74\n   0007870e ff 75\n   0007870f ff 70\n   00078710 ff 5f\n   00078711 ff 6c\n   00078712 ff 6f\n   00078713 ff 63\n   00078714 ff 6b\n   00078715 ff 65\n   00078716 ff 64\n   00078717 ff 3d\n   00078718 ff 31\n   00078719 ff 0a\n   0007871a ff 00\n   0007871b ff 00\n   0007871c ff 77\n   0007871d ff 70\n   0007871e ff 73\n   0007871f ff 5f\n   00078720 ff 73\n   00078721 ff 65\n   00078722 ff 6c\n   00078723 ff 65\n   00078724 ff 63\n   00078725 ff 74\n   00078726 ff 65\n   00078727 ff 64\n   00078728 ff 5f\n   00078729 ff 72\n   0007872a ff 65\n   0007872b ff 67\n   0007872c ff 69\n   0007872d ff 73\n   0007872e ff 74\n   0007872f ff 72\n   00078730 ff 61\n   00078731 ff 72\n   00078732 ff 3d\n   00078733 ff 31\n   00078734 ff 0a\n   00078735 ff 00\n   00078736 ff 00\n   00078737 ff 00\n   00078738 ff 77\n   00078739 ff 70\n   0007873a ff 73\n   0007873b ff 5f\n   0007873c ff 64\n   0007873d ff 65\n   0007873e ff 76\n   0007873f ff 69\n   00078740 ff 63\n   00078741 ff 65\n   00078742 ff 5f\n   00078743 ff 70\n   00078744 ff 61\n   00078745 ff 73\n   00078746 ff 73\n   00078747 ff 77\n   00078748 ff 6f\n   00078749 ff 72\n   0007874a ff 64\n   0007874b ff 5f\n   0007874c ff 69\n   0007874d ff 64\n   0007874e ff 3d\n   0007874f ff 25\n   00078750 ff 75\n   00078751 ff 0a\n   00078752 ff 00\n   00078753 ff 00\n   00078754 ff 77\n   00078755 ff 70\n   00078756 ff 73\n   00078757 ff 5f\n   00078758 ff 73\n   00078759 ff 65\n   0007875a ff 6c\n   0007875b ff 65\n   0007875c ff 63\n   0007875d ff 74\n   0007875e ff 65\n   0007875f ff 64\n   00078760 ff 5f\n   00078761 ff 72\n   00078762 ff 65\n   00078763 ff 67\n   00078764 ff 69\n   00078765 ff 73\n   00078766 ff 74\n   00078767 ff 72\n   00078768 ff 61\n   00078769 ff 72\n   0007876a ff 5f\n   0007876b ff 63\n   0007876c ff 6f\n   0007876d ff 6e\n   0007876e ff 66\n   0007876f ff 69\n   00078770 ff 67\n   00078771 ff 5f\n   00078772 ff 6d\n   00078773 ff 65\n   00078774 ff 74\n   00078775 ff 68\n   00078776 ff 6f\n   00078777 ff 64\n   00078778 ff 73\n   00078779 ff 3d\n   0007877a ff 30\n   0007877b ff 78\n   0007877c ff 25\n   0007877d ff 30\n   0007877e ff 34\n   0007877f ff 78\n   00078780 ff 0a\n   00078781 ff 00\n   00078782 ff 00\n   00078783 ff 00\n   00078784 ff 77\n   00078785 ff 70\n   00078786 ff 73\n   00078787 ff 5f\n   00078788 ff 70\n   00078789 ff 72\n   0007878a ff 69\n   0007878b ff 6d\n   0007878c ff 61\n   0007878d ff 72\n   0007878e ff 79\n   0007878f ff 5f\n   00078790 ff 64\n   00078791 ff 65\n   00078792 ff 76\n   00078793 ff 69\n   00078794 ff 63\n   00078795 ff 65\n   00078796 ff 5f\n   00078797 ff 74\n   00078798 ff 79\n   00078799 ff 70\n   0007879a ff 65\n   0007879b ff 3d\n   0007879c ff 25\n   0007879d ff 73\n   0007879e ff 0a\n   0007879f ff 00\n   000787a0 ff 77\n   000787a1 ff 70\n   000787a2 ff 73\n   000787a3 ff 5f\n   000787a4 ff 64\n   000787a5 ff 65\n   000787a6 ff 76\n   000787a7 ff 69\n   000787a8 ff 63\n   000787a9 ff 65\n   000787aa ff 5f\n   000787ab ff 6e\n   000787ac ff 61\n   000787ad ff 6d\n   000787ae ff 65\n   000787af ff 3d\n   000787b0 ff 25\n   000787b1 ff 73\n   000787b2 ff 0a\n   000787b3 ff 00\n   000787b4 ff 77\n   000787b5 ff 70\n   000787b6 ff 73\n   000787b7 ff 5f\n   000787b8 ff 63\n   000787b9 ff 6f\n   000787ba ff 6e\n   000787bb ff 66\n   000787bc ff 69\n   000787bd ff 67\n   000787be ff 5f\n   000787bf ff 6d\n   000787c0 ff 65\n   000787c1 ff 74\n   000787c2 ff 68\n   000787c3 ff 6f\n   000787c4 ff 64\n   000787c5 ff 73\n   000787c6 ff 3d\n   000787c7 ff 30\n   000787c8 ff 78\n   000787c9 ff 25\n   000787ca ff 30\n   000787cb ff 34\n   000787cc ff 78\n   000787cd ff 0a\n   000787ce ff 00\n   000787cf ff 00\n   000787d0 ff 65\n   000787d1 ff 73\n   000787d2 ff 70\n   000787d3 ff 72\n   000787d4 ff 65\n   000787d5 ff 73\n   000787d6 ff 73\n   000787d7 ff 69\n   000787d8 ff 66\n   000787d9 ff 00\n   000787da ff 00\n   000787db ff 00\n   000787dc ff 65\n   000787dd ff 73\n   000787de ff 70\n   000787df ff 38\n   000787e0 ff 32\n   000787e1 ff 36\n   000787e2 ff 36\n   000787e3 ff 00\n   000787e4 ff 31\n   000787e5 ff 32\n   000787e6 ff 33\n   000787e7 ff 34\n   000787e8 ff 00\n   000787e9 ff 00\n   000787ea ff 00\n   000787eb ff 00\n   000787ec ff 69\n   000787ed ff 6f\n   000787ee ff 74\n   000787ef ff 20\n   000787f0 ff 64\n   000787f1 ff 65\n   000787f2 ff 76\n   000787f3 ff 69\n   000787f4 ff 63\n   000787f5 ff 65\n   000787f6 ff 00\n   000787f7 ff 00\n   000787f8 ff 57\n   000787f9 ff 46\n   000787fa ff 41\n   000787fb ff 2d\n   000787fc ff 53\n   000787fd ff 69\n   000787fe ff 6d\n   000787ff ff 70\n   00078800 ff 6c\n   00078801 ff 65\n   00078802 ff 43\n   00078803 ff 6f\n   00078804 ff 6e\n   00078805 ff 66\n   00078806 ff 69\n   00078807 ff 67\n   00078808 ff 2d\n   00078809 ff 45\n   0007880a ff 6e\n   0007880b ff 72\n   0007880c ff 6f\n   0007880d ff 6c\n   0007880e ff 6c\n   0007880f ff 65\n   00078810 ff 65\n   00078811 ff 2d\n   00078812 ff 31\n   00078813 ff 2d\n   00078814 ff 30\n   00078815 ff 00\n   00078816 ff 00\n   00078817 ff 00\n   00078818 ff 57\n   00078819 ff 69\n   0007881a ff 2d\n   0007881b ff 46\n   0007881c ff 69\n   0007881d ff 20\n   0007881e ff 45\n   0007881f ff 61\n   00078820 ff 73\n   00078821 ff 79\n   00078822 ff 20\n   00078823 ff 61\n   00078824 ff 6e\n   00078825 ff 64\n   00078826 ff 20\n   00078827 ff 53\n   00078828 ff 65\n   00078829 ff 63\n   0007882a ff 75\n   0007882b ff 72\n   0007882c ff 65\n   0007882d ff 20\n   0007882e ff 4b\n   0007882f ff 65\n   00078830 ff 79\n   00078831 ff 20\n   00078832 ff 44\n   00078833 ff 65\n   00078834 ff 72\n   00078835 ff 69\n   00078836 ff 76\n   00078837 ff 61\n   00078838 ff 74\n   00078839 ff 69\n   0007883a ff 6f\n   0007883b ff 6e\n   0007883c ff 00\n   0007883d ff 00\n   0007883e ff 00\n   0007883f ff 00\n   00078840 ff 25\n   00078841 ff 75\n   00078842 ff 2d\n   00078843 ff 25\n   00078844 ff 30\n   00078845 ff 38\n   00078846 ff 58\n   00078847 ff 2d\n   00078848 ff 25\n   00078849 ff 75\n   0007884a ff 00\n   0007884b ff 00\n   0007884c ff 65\n   0007884d ff 74\n   0007884e ff 68\n   0007884f ff 65\n   00078850 ff 72\n   00078851 ff 6e\n   00078852 ff 65\n   00078853 ff 74\n   00078854 ff 00\n   00078855 ff 00\n   00078856 ff 00\n   00078857 ff 00\n   00078858 ff 6c\n   00078859 ff 61\n   0007885a ff 62\n   0007885b ff 65\n   0007885c ff 6c\n   0007885d ff 00\n   0007885e ff 00\n   0007885f ff 00\n   00078860 ff 65\n   00078861 ff 78\n   00078862 ff 74\n   00078863 ff 5f\n   00078864 ff 6e\n   00078865 ff 66\n   00078866 ff 63\n   00078867 ff 5f\n   00078868 ff 74\n   00078869 ff 6f\n   0007886a ff 6b\n   0007886b ff 65\n   0007886c ff 6e\n   0007886d ff 00\n   0007886e ff 00\n   0007886f ff 00\n   00078870 ff 69\n   00078871 ff 6e\n   00078872 ff 74\n   00078873 ff 5f\n   00078874 ff 6e\n   00078875 ff 66\n   00078876 ff 63\n   00078877 ff 5f\n   00078878 ff 74\n   00078879 ff 6f\n   0007887a ff 6b\n   0007887b ff 65\n   0007887c ff 6e\n   0007887d ff 00\n   0007887e ff 00\n   0007887f ff 00\n   00078880 ff 6e\n   00078881 ff 66\n   00078882 ff 63\n   00078883 ff 5f\n   00078884 ff 69\n   00078885 ff 6e\n   00078886 ff 74\n   00078887 ff 65\n   00078888 ff 72\n   00078889 ff 66\n   0007888a ff 61\n   0007888b ff 63\n   0007888c ff 65\n   0007888d ff 00\n   0007888e ff 00\n   0007888f ff 00\n   00078890 ff 6b\n   00078891 ff 65\n   00078892 ff 79\n   00078893 ff 70\n   00078894 ff 61\n   00078895 ff 64\n   00078896 ff 00\n   00078897 ff 00\n   00078898 ff 76\n   00078899 ff 69\n   0007889a ff 72\n   0007889b ff 74\n   0007889c ff 75\n   0007889d ff 61\n   0007889e ff 6c\n   0007889f ff 5f\n   000788a0 ff 64\n   000788a1 ff 69\n   000788a2 ff 73\n   000788a3 ff 70\n   000788a4 ff 6c\n   000788a5 ff 61\n   000788a6 ff 79\n   000788a7 ff 00\n   000788a8 ff 70\n   000788a9 ff 68\n   000788aa ff 79\n   000788ab ff 73\n   000788ac ff 69\n   000788ad ff 63\n   000788ae ff 61\n   000788af ff 6c\n   000788b0 ff 5f\n   000788b1 ff 64\n   000788b2 ff 69\n   000788b3 ff 73\n   000788b4 ff 70\n   000788b5 ff 6c\n   000788b6 ff 61\n   000788b7 ff 79\n   000788b8 ff 00\n   000788b9 ff 00\n   000788ba ff 00\n   000788bb ff 00\n   000788bc ff 76\n   000788bd ff 69\n   000788be ff 72\n   000788bf ff 74\n   000788c0 ff 75\n   000788c1 ff 61\n   000788c2 ff 6c\n   000788c3 ff 5f\n   000788c4 ff 70\n   000788c5 ff 75\n   000788c6 ff 73\n   000788c7 ff 68\n   000788c8 ff 5f\n   000788c9 ff 62\n   000788ca ff 75\n   000788cb ff 74\n   000788cc ff 74\n   000788cd ff 6f\n   000788ce ff 6e\n   000788cf ff 00\n   000788d0 ff 70\n   000788d1 ff 68\n   000788d2 ff 79\n   000788d3 ff 73\n   000788d4 ff 69\n   000788d5 ff 63\n   000788d6 ff 61\n   000788d7 ff 6c\n   000788d8 ff 5f\n   000788d9 ff 70\n   000788da ff 75\n   000788db ff 73\n   000788dc ff 68\n   000788dd ff 5f\n   000788de ff 62\n   000788df ff 75\n   000788e0 ff 74\n   000788e1 ff 74\n   000788e2 ff 6f\n   000788e3 ff 6e\n   000788e4 ff 00\n   000788e5 ff 00\n   000788e6 ff 00\n   000788e7 ff 00\n   000788e8 ff 77\n   000788e9 ff 70\n   000788ea ff 73\n   000788eb ff 55\n   000788ec ff 75\n   000788ed ff 69\n   000788ee ff 64\n   000788ef ff 3d\n   000788f0 ff 25\n   000788f1 ff 73\n   000788f2 ff 0a\n   000788f3 ff 77\n   000788f4 ff 70\n   000788f5 ff 73\n   000788f6 ff 50\n   000788f7 ff 72\n   000788f8 ff 69\n   000788f9 ff 6d\n   000788fa ff 61\n   000788fb ff 72\n   000788fc ff 79\n   000788fd ff 44\n   000788fe ff 65\n   000788ff ff 76\n   00078900 ff 69\n   00078901 ff 63\n   00078902 ff 65\n   00078903 ff 54\n   00078904 ff 79\n   00078905 ff 70\n   00078906 ff 65\n   00078907 ff 3d\n   00078908 ff 25\n   00078909 ff 73\n   0007890a ff 0a\n   0007890b ff 77\n   0007890c ff 70\n   0007890d ff 73\n   0007890e ff 44\n   0007890f ff 65\n   00078910 ff 76\n   00078911 ff 69\n   00078912 ff 63\n   00078913 ff 65\n   00078914 ff 4e\n   00078915 ff 61\n   00078916 ff 6d\n   00078917 ff 65\n   00078918 ff 3d\n   00078919 ff 25\n   0007891a ff 73\n   0007891b ff 0a\n   0007891c ff 77\n   0007891d ff 70\n   0007891e ff 73\n   0007891f ff 4d\n   00078920 ff 61\n   00078921 ff 6e\n   00078922 ff 75\n   00078923 ff 66\n   00078924 ff 61\n   00078925 ff 63\n   00078926 ff 74\n   00078927 ff 75\n   00078928 ff 72\n   00078929 ff 65\n   0007892a ff 72\n   0007892b ff 3d\n   0007892c ff 25\n   0007892d ff 73\n   0007892e ff 0a\n   0007892f ff 77\n   00078930 ff 70\n   00078931 ff 73\n   00078932 ff 4d\n   00078933 ff 6f\n   00078934 ff 64\n   00078935 ff 65\n   00078936 ff 6c\n   00078937 ff 4e\n   00078938 ff 61\n   00078939 ff 6d\n   0007893a ff 65\n   0007893b ff 3d\n   0007893c ff 25\n   0007893d ff 73\n   0007893e ff 0a\n   0007893f ff 77\n   00078940 ff 70\n   00078941 ff 73\n   00078942 ff 4d\n   00078943 ff 6f\n   00078944 ff 64\n   00078945 ff 65\n   00078946 ff 6c\n   00078947 ff 4e\n   00078948 ff 75\n   00078949 ff 6d\n   0007894a ff 62\n   0007894b ff 65\n   0007894c ff 72\n   0007894d ff 3d\n   0007894e ff 25\n   0007894f ff 73\n   00078950 ff 0a\n   00078951 ff 77\n   00078952 ff 70\n   00078953 ff 73\n   00078954 ff 53\n   00078955 ff 65\n   00078956 ff 72\n   00078957 ff 69\n   00078958 ff 61\n   00078959 ff 6c\n   0007895a ff 4e\n   0007895b ff 75\n   0007895c ff 6d\n   0007895d ff 62\n   0007895e ff 65\n   0007895f ff 72\n   00078960 ff 3d\n   00078961 ff 25\n   00078962 ff 73\n   00078963 ff 0a\n   00078964 ff 00\n   00078965 ff 00\n   00078966 ff 00\n   00078967 ff 00\n   00078968 ff 25\n   00078969 ff 30\n   0007896a ff 32\n   0007896b ff 78\n   0007896c ff 25\n   0007896d ff 30\n   0007896e ff 32\n   0007896f ff 78\n   00078970 ff 25\n   00078971 ff 30\n   00078972 ff 32\n   00078973 ff 78\n   00078974 ff 25\n   00078975 ff 30\n   00078976 ff 32\n   00078977 ff 78\n   00078978 ff 2d\n   00078979 ff 25\n   0007897a ff 30\n   0007897b ff 32\n   0007897c ff 78\n   0007897d ff 25\n   0007897e ff 30\n   0007897f ff 32\n   00078980 ff 78\n   00078981 ff 2d\n   00078982 ff 25\n   00078983 ff 30\n   00078984 ff 32\n   00078985 ff 78\n   00078986 ff 25\n   00078987 ff 30\n   00078988 ff 32\n   00078989 ff 78\n   0007898a ff 2d\n   0007898b ff 25\n   0007898c ff 30\n   0007898d ff 32\n   0007898e ff 78\n   0007898f ff 25\n   00078990 ff 30\n   00078991 ff 32\n   00078992 ff 78\n   00078993 ff 2d\n   00078994 ff 25\n   00078995 ff 30\n   00078996 ff 32\n   00078997 ff 78\n   00078998 ff 25\n   00078999 ff 30\n   0007899a ff 32\n   0007899b ff 78\n   0007899c ff 25\n   0007899d ff 30\n   0007899e ff 32\n   0007899f ff 78\n   000789a0 ff 25\n   000789a1 ff 30\n   000789a2 ff 32\n   000789a3 ff 78\n   000789a4 ff 25\n   000789a5 ff 30\n   000789a6 ff 32\n   000789a7 ff 78\n   000789a8 ff 25\n   000789a9 ff 30\n   000789aa ff 32\n   000789ab ff 78\n   000789ac ff 00\n   000789ad ff 25\n   000789ae ff 30\n   000789af ff 32\n   000789b0 ff 58\n   000789b1 ff 3a\n   000789b2 ff 25\n   000789b3 ff 30\n   000789b4 ff 32\n   000789b5 ff 58\n   000789b6 ff 3a\n   000789b7 ff 25\n   000789b8 ff 30\n   000789b9 ff 32\n   000789ba ff 58\n   000789bb ff 3a\n   000789bc ff 25\n   000789bd ff 30\n   000789be ff 32\n   000789bf ff 58\n   000789c0 ff 3a\n   000789c1 ff 25\n   000789c2 ff 30\n   000789c3 ff 32\n   000789c4 ff 58\n   000789c5 ff 3a\n   000789c6 ff 25\n   000789c7 ff 30\n   000789c8 ff 32\n   000789c9 ff 58\n   000789ca ff 00\n   000789cb ff 00\n   000789cc ff 00\n   000789cd ff 00\n   000789ce ff 00\n   000789cf ff 00\n   000789d0 ff 00\n   000789d1 ff 00\n   000789d2 ff 00\n   000789d3 ff 00\n   000789d4 ff 08\n   000789d5 ff 69\n   000789d6 ff 20\n   000789d7 ff 40\n   000789d8 ff 18\n   000789d9 ff 69\n   000789da ff 20\n   000789db ff 40\n   000789dc ff b8\n   000789dd ff 2d\n   000789de ff 20\n   000789df ff 40\n   000789e0 ff ec\n   000789e1 ff eb\n   000789e2 ff 20\n   000789e3 ff 40\n   000789e4 ff b8\n   000789e5 ff 2d\n   000789e6 ff 20\n   000789e7 ff 40\n   000789e8 ff 00\n   000789e9 ff 00\n   000789ea ff 00\n   000789eb ff 00\n   000789ec ff 00\n   000789ed ff 00\n   000789ee ff 00\n   000789ef ff 00\n   000789f0 ff 00\n   000789f1 ff 00\n   000789f2 ff 00\n   000789f3 ff 00\n   000789f4 ff 10\n   000789f5 ff 69\n   000789f6 ff 20\n   000789f7 ff 40\n   000789f8 ff 30\n   000789f9 ff 69\n   000789fa ff 20\n   000789fb ff 40\n   000789fc ff 34\n   000789fd ff 6a\n   000789fe ff 20\n   000789ff ff 40\n   00078a00 ff 48\n   00078a01 ff 69\n   00078a02 ff 20\n   00078a03 ff 40\n   00078a04 ff 04\n   00078a05 ff ec\n   00078a06 ff 20\n   00078a07 ff 40\n   00078a08 ff 00\n   00078a09 ff 06\n   00078a0a ff 04\n   00078a0b ff 01\n   00078a0c ff 04\n   00078a0d ff 03\n   00078a0e ff 07\n   00078a0f ff 05\n   00078a10 ff 02\n   00078a11 ff 04\n   00078a12 ff 08\n   00078a13 ff 00\n   00078a14 ff 00\n   00078a15 ff 00\n   00078a16 ff 00\n   00078a17 ff 00\n   00078a18 ff 00\n   00078a19 ff 00\n   00078a1a ff 00\n   00078a1b ff 00\n   00078a1c ff ec\n   00078a1d ff ec\n   00078a1e ff 20\n   00078a1f ff 40\n   00078a20 ff 0c\n   00078a21 ff 7c\n   00078a22 ff 20\n   00078a23 ff 40\n   00078a24 ff bc\n   00078a25 ff 78\n   00078a26 ff 20\n   00078a27 ff 40\n   00078a28 ff 98\n   00078a29 ff 7c\n   00078a2a ff 20\n   00078a2b ff 40\n   00078a2c ff 08\n   00078a2d ff ed\n   00078a2e ff 20\n   00078a2f ff 40\n   00078a30 ff 9c\n   00078a31 ff 7b\n   00078a32 ff 20\n   00078a33 ff 40\n   00078a34 ff 08\n   00078a35 ff 1b\n   00078a36 ff 20\n   00078a37 ff 40\n   00078a38 ff 9c\n   00078a39 ff e6\n   00078a3a ff 20\n   00078a3b ff 40\n   00078a3c ff 2c\n   00078a3d ff 78\n   00078a3e ff 20\n   00078a3f ff 40\n   00078a40 ff dc\n   00078a41 ff 77\n   00078a42 ff 20\n   00078a43 ff 40\n   00078a44 ff d8\n   00078a45 ff 7c\n   00078a46 ff 20\n   00078a47 ff 40\n   00078a48 ff 0c\n   00078a49 ff 7b\n   00078a4a ff 20\n   00078a4b ff 40\n   00078a4c ff 3c\n   00078a4d ff ed\n   00078a4e ff 20\n   00078a4f ff 40\n   00078a50 ff 6c\n   00078a51 ff ed\n   00078a52 ff 20\n   00078a53 ff 40\n   00078a54 ff 38\n   00078a55 ff 7b\n   00078a56 ff 20\n   00078a57 ff 40\n   00078a58 ff 7c\n   00078a59 ff 7b\n   00078a5a ff 20\n   00078a5b ff 40\n   00078a5c ff e8\n   00078a5d ff 78\n   00078a5e ff 20\n   00078a5f ff 40\n   00078a60 ff 00\n   00078a61 ff 00\n   00078a62 ff 00\n   00078a63 ff 00\n   00078a64 ff 00\n   00078a65 ff 00\n   00078a66 ff 00\n   00078a67 ff 00\n   00078a68 ff 00\n   00078a69 ff 00\n   00078a6a ff 00\n   00078a6b ff 00\n   00078a6c ff b0\n   00078a6d ff ed\n   00078a6e ff 20\n   00078a6f ff 40\n   00078a70 ff 74\n   00078a71 ff 7f\n   00078a72 ff 20\n   00078a73 ff 40\n   00078a74 ff 08\n   00078a75 ff 7f\n   00078a76 ff 20\n   00078a77 ff 40\n   00078a78 ff cc\n   00078a79 ff ed\n   00078a7a ff 20\n   00078a7b ff 40\n   00078a7c ff f0\n   00078a7d ff ed\n   00078a7e ff 20\n   00078a7f ff 40\n   00078a80 ff 10\n   00078a81 ff ee\n   00078a82 ff 20\n   00078a83 ff 40\n   00078a84 ff 08\n   00078a85 ff 1b\n   00078a86 ff 20\n   00078a87 ff 40\n   00078a88 ff 9c\n   00078a89 ff e6\n   00078a8a ff 20\n   00078a8b ff 40\n   00078a8c ff a8\n   00078a8d ff 83\n   00078a8e ff 20\n   00078a8f ff 40\n   00078a90 ff 7c\n   00078a91 ff 83\n   00078a92 ff 20\n   00078a93 ff 40\n   00078a94 ff 7c\n   00078a95 ff 82\n   00078a96 ff 20\n   00078a97 ff 40\n   00078a98 ff 30\n   00078a99 ff 7f\n   00078a9a ff 20\n   00078a9b ff 40\n   00078a9c ff 98\n   00078a9d ff 80\n   00078a9e ff 20\n   00078a9f ff 40\n   00078aa0 ff d0\n   00078aa1 ff 81\n   00078aa2 ff 20\n   00078aa3 ff 40\n   00078aa4 ff 50\n   00078aa5 ff 80\n   00078aa6 ff 20\n   00078aa7 ff 40\n   00078aa8 ff 9c\n   00078aa9 ff ed\n   00078aaa ff 20\n   00078aab ff 40\n   00078aac ff 4c\n   00078aad ff 81\n   00078aae ff 20\n   00078aaf ff 40\n   00078ab0 ff 20\n   00078ab1 ff ee\n   00078ab2 ff 20\n   00078ab3 ff 40\n   00078ab4 ff c0\n   00078ab5 ff 82\n   00078ab6 ff 20\n   00078ab7 ff 40\n   00078ab8 ff 00\n   00078ab9 ff 00\n   00078aba ff 00\n   00078abb ff 00\n   00078abc ff 00\n   00078abd ff 00\n   00078abe ff 00\n   00078abf ff 00\n   00078ac0 ff 00\n   00078ac1 ff 00\n   00078ac2 ff 00\n   00078ac3 ff 00\n   00078ac4 ff 20\n   00078ac5 ff 86\n   00078ac6 ff 20\n   00078ac7 ff 40\n   00078ac8 ff 2c\n   00078ac9 ff 85\n   00078aca ff 20\n   00078acb ff 40\n   00078acc ff f0\n   00078acd ff 85\n   00078ace ff 20\n   00078acf ff 40\n   00078ad0 ff 88\n   00078ad1 ff 85\n   00078ad2 ff 20\n   00078ad3 ff 40\n   00078ad4 ff ac\n   00078ad5 ff 85\n   00078ad6 ff 20\n   00078ad7 ff 40\n   00078ad8 ff d4\n   00078ad9 ff 85\n   00078ada ff 20\n   00078adb ff 40\n   00078adc ff 08\n   00078add ff 1b\n   00078ade ff 20\n   00078adf ff 40\n   00078ae0 ff 9c\n   00078ae1 ff e6\n   00078ae2 ff 20\n   00078ae3 ff 40\n   00078ae4 ff 79\n   00078ae5 ff 65\n   00078ae6 ff 73\n   00078ae7 ff 00\n   00078ae8 ff 61\n   00078ae9 ff 72\n   00078aea ff 64\n   00078aeb ff 75\n   00078aec ff 69\n   00078aed ff 6e\n   00078aee ff 6f\n   00078aef ff 00\n   00078af0 ff 74\n   00078af1 ff 63\n   00078af2 ff 70\n   00078af3 ff 5f\n   00078af4 ff 63\n   00078af5 ff 68\n   00078af6 ff 65\n   00078af7 ff 63\n   00078af8 ff 6b\n   00078af9 ff 00\n   00078afa ff 73\n   00078afb ff 73\n   00078afc ff 68\n   00078afd ff 5f\n   00078afe ff 75\n   00078aff ff 70\n   00078b00 ff 6c\n   00078b01 ff 6f\n   00078b02 ff 61\n   00078b03 ff 64\n   00078b04 ff 00\n   00078b05 ff 62\n   00078b06 ff 6f\n   00078b07 ff 61\n   00078b08 ff 72\n   00078b09 ff 64\n   00078b0a ff 00\n   00078b0b ff 67\n   00078b0c ff 65\n   00078b0d ff 6e\n   00078b0e ff 65\n   00078b0f ff 72\n   00078b10 ff 69\n   00078b11 ff 63\n   00078b12 ff 00\n   00078b13 ff 61\n   00078b14 ff 75\n   00078b15 ff 74\n   00078b16 ff 68\n   00078b17 ff 5f\n   00078b18 ff 75\n   00078b19 ff 70\n   00078b1a ff 6c\n   00078b1b ff 6f\n   00078b1c ff 61\n   00078b1d ff 64\n   00078b1e ff 00\n   00078b1f ff 53\n   00078b20 ff 6b\n   00078b21 ff 69\n   00078b22 ff 70\n   00078b23 ff 70\n   00078b24 ff 69\n   00078b25 ff 6e\n   00078b26 ff 67\n   00078b27 ff 20\n   00078b28 ff 63\n   00078b29 ff 6f\n   00078b2a ff 6d\n   00078b2b ff 70\n   00078b2c ff 72\n   00078b2d ff 65\n   00078b2e ff 73\n   00078b2f ff 73\n   00078b30 ff 65\n   00078b31 ff 64\n   00078b32 ff 20\n   00078b33 ff 70\n   00078b34 ff 6f\n   00078b35 ff 69\n   00078b36 ff 6e\n   00078b37 ff 74\n   00078b38 ff 65\n   00078b39 ff 72\n   00078b3a ff 00\n   00078b3b ff 73\n   00078b3c ff 65\n   00078b3d ff 72\n   00078b3e ff 76\n   00078b3f ff 69\n   00078b40 ff 63\n   00078b41 ff 65\n   00078b42 ff 73\n   00078b43 ff 00\n   00078b44 ff 5f\n   00078b45 ff 64\n   00078b46 ff 6e\n   00078b47 ff 73\n   00078b48 ff 2d\n   00078b49 ff 73\n   00078b4a ff 64\n   00078b4b ff 00\n   00078b4c ff 2e\n   00078b4d ff 68\n   00078b4e ff 74\n   00078b4f ff 6d\n   00078b50 ff 6c\n   00078b51 ff 00\n   00078b52 ff 74\n   00078b53 ff 65\n   00078b54 ff 78\n   00078b55 ff 74\n   00078b56 ff 2f\n   00078b57 ff 68\n   00078b58 ff 74\n   00078b59 ff 6d\n   00078b5a ff 6c\n   00078b5b ff 00\n   00078b5c ff 2e\n   00078b5d ff 63\n   00078b5e ff 73\n   00078b5f ff 73\n   00078b60 ff 00\n   00078b61 ff 74\n   00078b62 ff 65\n   00078b63 ff 78\n   00078b64 ff 74\n   00078b65 ff 2f\n   00078b66 ff 63\n   00078b67 ff 73\n   00078b68 ff 73\n   00078b69 ff 00\n   00078b6a ff 2e\n   00078b6b ff 74\n   00078b6c ff 78\n   00078b6d ff 74\n   00078b6e ff 00\n   00078b6f ff 74\n   00078b70 ff 65\n   00078b71 ff 78\n   00078b72 ff 74\n   00078b73 ff 2f\n   00078b74 ff 70\n   00078b75 ff 6c\n   00078b76 ff 61\n   00078b77 ff 69\n   00078b78 ff 6e\n   00078b79 ff 00\n   00078b7a ff 2e\n   00078b7b ff 6a\n   00078b7c ff 73\n   00078b7d ff 00\n   00078b7e ff 61\n   00078b7f ff 70\n   00078b80 ff 70\n   00078b81 ff 6c\n   00078b82 ff 69\n   00078b83 ff 63\n   00078b84 ff 61\n   00078b85 ff 74\n   00078b86 ff 69\n   00078b87 ff 6f\n   00078b88 ff 6e\n   00078b89 ff 2f\n   00078b8a ff 6a\n   00078b8b ff 61\n   00078b8c ff 76\n   00078b8d ff 61\n   00078b8e ff 73\n   00078b8f ff 63\n   00078b90 ff 72\n   00078b91 ff 69\n   00078b92 ff 70\n   00078b93 ff 74\n   00078b94 ff 00\n   00078b95 ff 2e\n   00078b96 ff 70\n   00078b97 ff 6e\n   00078b98 ff 67\n   00078b99 ff 00\n   00078b9a ff 69\n   00078b9b ff 6d\n   00078b9c ff 61\n   00078b9d ff 67\n   00078b9e ff 65\n   00078b9f ff 2f\n   00078ba0 ff 70\n   00078ba1 ff 6e\n   00078ba2 ff 67\n   00078ba3 ff 00\n   00078ba4 ff 2e\n   00078ba5 ff 67\n   00078ba6 ff 69\n   00078ba7 ff 66\n   00078ba8 ff 00\n   00078ba9 ff 69\n   00078baa ff 6d\n   00078bab ff 61\n   00078bac ff 67\n   00078bad ff 65\n   00078bae ff 2f\n   00078baf ff 67\n   00078bb0 ff 69\n   00078bb1 ff 66\n   00078bb2 ff 00\n   00078bb3 ff 2e\n   00078bb4 ff 6a\n   00078bb5 ff 70\n   00078bb6 ff 67\n   00078bb7 ff 00\n   00078bb8 ff 69\n   00078bb9 ff 6d\n   00078bba ff 61\n   00078bbb ff 67\n   00078bbc ff 65\n   00078bbd ff 2f\n   00078bbe ff 6a\n   00078bbf ff 70\n   00078bc0 ff 65\n   00078bc1 ff 67\n   00078bc2 ff 00\n   00078bc3 ff 2e\n   00078bc4 ff 69\n   00078bc5 ff 63\n   00078bc6 ff 6f\n   00078bc7 ff 00\n   00078bc8 ff 69\n   00078bc9 ff 6d\n   00078bca ff 61\n   00078bcb ff 67\n   00078bcc ff 65\n   00078bcd ff 2f\n   00078bce ff 78\n   00078bcf ff 2d\n   00078bd0 ff 69\n   00078bd1 ff 63\n   00078bd2 ff 6f\n   00078bd3 ff 6e\n   00078bd4 ff 00\n   00078bd5 ff 2e\n   00078bd6 ff 73\n   00078bd7 ff 76\n   00078bd8 ff 67\n   00078bd9 ff 00\n   00078bda ff 69\n   00078bdb ff 6d\n   00078bdc ff 61\n   00078bdd ff 67\n   00078bde ff 65\n   00078bdf ff 2f\n   00078be0 ff 73\n   00078be1 ff 76\n   00078be2 ff 67\n   00078be3 ff 2b\n   00078be4 ff 78\n   00078be5 ff 6d\n   00078be6 ff 6c\n   00078be7 ff 00\n   00078be8 ff 2e\n   00078be9 ff 74\n   00078bea ff 74\n   00078beb ff 66\n   00078bec ff 00\n   00078bed ff 61\n   00078bee ff 70\n   00078bef ff 70\n   00078bf0 ff 6c\n   00078bf1 ff 69\n   00078bf2 ff 63\n   00078bf3 ff 61\n   00078bf4 ff 74\n   00078bf5 ff 69\n   00078bf6 ff 6f\n   00078bf7 ff 6e\n   00078bf8 ff 2f\n   00078bf9 ff 78\n   00078bfa ff 2d\n   00078bfb ff 66\n   00078bfc ff 6f\n   00078bfd ff 6e\n   00078bfe ff 74\n   00078bff ff 2d\n   00078c00 ff 74\n   00078c01 ff 74\n   00078c02 ff 66\n   00078c03 ff 00\n   00078c04 ff 2e\n   00078c05 ff 6f\n   00078c06 ff 74\n   00078c07 ff 66\n   00078c08 ff 00\n   00078c09 ff 61\n   00078c0a ff 70\n   00078c0b ff 70\n   00078c0c ff 6c\n   00078c0d ff 69\n   00078c0e ff 63\n   00078c0f ff 61\n   00078c10 ff 74\n   00078c11 ff 69\n   00078c12 ff 6f\n   00078c13 ff 6e\n   00078c14 ff 2f\n   00078c15 ff 78\n   00078c16 ff 2d\n   00078c17 ff 66\n   00078c18 ff 6f\n   00078c19 ff 6e\n   00078c1a ff 74\n   00078c1b ff 2d\n   00078c1c ff 6f\n   00078c1d ff 70\n   00078c1e ff 65\n   00078c1f ff 6e\n   00078c20 ff 74\n   00078c21 ff 79\n   00078c22 ff 70\n   00078c23 ff 65\n   00078c24 ff 00\n   00078c25 ff 2e\n   00078c26 ff 77\n   00078c27 ff 6f\n   00078c28 ff 66\n   00078c29 ff 66\n   00078c2a ff 00\n   00078c2b ff 61\n   00078c2c ff 70\n   00078c2d ff 70\n   00078c2e ff 6c\n   00078c2f ff 69\n   00078c30 ff 63\n   00078c31 ff 61\n   00078c32 ff 74\n   00078c33 ff 69\n   00078c34 ff 6f\n   00078c35 ff 6e\n   00078c36 ff 2f\n   00078c37 ff 66\n   00078c38 ff 6f\n   00078c39 ff 6e\n   00078c3a ff 74\n   00078c3b ff 2d\n   00078c3c ff 77\n   00078c3d ff 6f\n   00078c3e ff 66\n   00078c3f ff 66\n   00078c40 ff 00\n   00078c41 ff 2e\n   00078c42 ff 77\n   00078c43 ff 6f\n   00078c44 ff 66\n   00078c45 ff 66\n   00078c46 ff 32\n   00078c47 ff 00\n   00078c48 ff 61\n   00078c49 ff 70\n   00078c4a ff 70\n   00078c4b ff 6c\n   00078c4c ff 69\n   00078c4d ff 63\n   00078c4e ff 61\n   00078c4f ff 74\n   00078c50 ff 69\n   00078c51 ff 6f\n   00078c52 ff 6e\n   00078c53 ff 2f\n   00078c54 ff 66\n   00078c55 ff 6f\n   00078c56 ff 6e\n   00078c57 ff 74\n   00078c58 ff 2d\n   00078c59 ff 77\n   00078c5a ff 6f\n   00078c5b ff 66\n   00078c5c ff 66\n   00078c5d ff 32\n   00078c5e ff 00\n   00078c5f ff 2e\n   00078c60 ff 65\n   00078c61 ff 6f\n   00078c62 ff 74\n   00078c63 ff 00\n   00078c64 ff 61\n   00078c65 ff 70\n   00078c66 ff 70\n   00078c67 ff 6c\n   00078c68 ff 69\n   00078c69 ff 63\n   00078c6a ff 61\n   00078c6b ff 74\n   00078c6c ff 69\n   00078c6d ff 6f\n   00078c6e ff 6e\n   00078c6f ff 2f\n   00078c70 ff 76\n   00078c71 ff 6e\n   00078c72 ff 64\n   00078c73 ff 2e\n   00078c74 ff 6d\n   00078c75 ff 73\n   00078c76 ff 2d\n   00078c77 ff 66\n   00078c78 ff 6f\n   00078c79 ff 6e\n   00078c7a ff 74\n   00078c7b ff 6f\n   00078c7c ff 62\n   00078c7d ff 6a\n   00078c7e ff 65\n   00078c7f ff 63\n   00078c80 ff 74\n   00078c81 ff 00\n   00078c82 ff 2e\n   00078c83 ff 73\n   00078c84 ff 66\n   00078c85 ff 6e\n   00078c86 ff 74\n   00078c87 ff 00\n   00078c88 ff 61\n   00078c89 ff 70\n   00078c8a ff 70\n   00078c8b ff 6c\n   00078c8c ff 69\n   00078c8d ff 63\n   00078c8e ff 61\n   00078c8f ff 74\n   00078c90 ff 69\n   00078c91 ff 6f\n   00078c92 ff 6e\n   00078c93 ff 2f\n   00078c94 ff 66\n   00078c95 ff 6f\n   00078c96 ff 6e\n   00078c97 ff 74\n   00078c98 ff 2d\n   00078c99 ff 73\n   00078c9a ff 66\n   00078c9b ff 6e\n   00078c9c ff 74\n   00078c9d ff 00\n   00078c9e ff 74\n   00078c9f ff 65\n   00078ca0 ff 78\n   00078ca1 ff 74\n   00078ca2 ff 2f\n   00078ca3 ff 78\n   00078ca4 ff 6d\n   00078ca5 ff 6c\n   00078ca6 ff 00\n   00078ca7 ff 2e\n   00078ca8 ff 70\n   00078ca9 ff 64\n   00078caa ff 66\n   00078cab ff 00\n   00078cac ff 61\n   00078cad ff 70\n   00078cae ff 70\n   00078caf ff 6c\n   00078cb0 ff 69\n   00078cb1 ff 63\n   00078cb2 ff 61\n   00078cb3 ff 74\n   00078cb4 ff 69\n   00078cb5 ff 6f\n   00078cb6 ff 6e\n   00078cb7 ff 2f\n   00078cb8 ff 70\n   00078cb9 ff 64\n   00078cba ff 66\n   00078cbb ff 00\n   00078cbc ff 2e\n   00078cbd ff 7a\n   00078cbe ff 69\n   00078cbf ff 70\n   00078cc0 ff 00\n   00078cc1 ff 61\n   00078cc2 ff 70\n   00078cc3 ff 70\n   00078cc4 ff 6c\n   00078cc5 ff 69\n   00078cc6 ff 63\n   00078cc7 ff 61\n   00078cc8 ff 74\n   00078cc9 ff 69\n   00078cca ff 6f\n   00078ccb ff 6e\n   00078ccc ff 2f\n   00078ccd ff 7a\n   00078cce ff 69\n   00078ccf ff 70\n   00078cd0 ff 00\n   00078cd1 ff 2e\n   00078cd2 ff 67\n   00078cd3 ff 7a\n   00078cd4 ff 00\n   00078cd5 ff 61\n   00078cd6 ff 70\n   00078cd7 ff 70\n   00078cd8 ff 6c\n   00078cd9 ff 69\n   00078cda ff 63\n   00078cdb ff 61\n   00078cdc ff 74\n   00078cdd ff 69\n   00078cde ff 6f\n   00078cdf ff 6e\n   00078ce0 ff 2f\n   00078ce1 ff 78\n   00078ce2 ff 2d\n   00078ce3 ff 67\n   00078ce4 ff 7a\n   00078ce5 ff 69\n   00078ce6 ff 70\n   00078ce7 ff 00\n   00078ce8 ff 2e\n   00078ce9 ff 61\n   00078cea ff 70\n   00078ceb ff 70\n   00078cec ff 63\n   00078ced ff 61\n   00078cee ff 63\n   00078cef ff 68\n   00078cf0 ff 65\n   00078cf1 ff 00\n   00078cf2 ff 74\n   00078cf3 ff 65\n   00078cf4 ff 78\n   00078cf5 ff 74\n   00078cf6 ff 2f\n   00078cf7 ff 63\n   00078cf8 ff 61\n   00078cf9 ff 63\n   00078cfa ff 68\n   00078cfb ff 65\n   00078cfc ff 2d\n   00078cfd ff 6d\n   00078cfe ff 61\n   00078cff ff 6e\n   00078d00 ff 69\n   00078d01 ff 66\n   00078d02 ff 65\n   00078d03 ff 73\n   00078d04 ff 74\n   00078d05 ff 00\n   00078d06 ff 61\n   00078d07 ff 70\n   00078d08 ff 70\n   00078d09 ff 6c\n   00078d0a ff 69\n   00078d0b ff 63\n   00078d0c ff 61\n   00078d0d ff 74\n   00078d0e ff 69\n   00078d0f ff 6f\n   00078d10 ff 6e\n   00078d11 ff 2f\n   00078d12 ff 6f\n   00078d13 ff 63\n   00078d14 ff 74\n   00078d15 ff 65\n   00078d16 ff 74\n   00078d17 ff 2d\n   00078d18 ff 73\n   00078d19 ff 74\n   00078d1a ff 72\n   00078d1b ff 65\n   00078d1c ff 61\n   00078d1d ff 6d\n   00078d1e ff 00\n   00078d1f ff 42\n   00078d20 ff 61\n   00078d21 ff 73\n   00078d22 ff 69\n   00078d23 ff 63\n   00078d24 ff 00\n   00078d25 ff 25\n   00078d26 ff 73\n   00078d27 ff 3a\n   00078d28 ff 25\n   00078d29 ff 73\n   00078d2a ff 00\n   00078d2b ff 48\n   00078d2c ff 54\n   00078d2d ff 54\n   00078d2e ff 50\n   00078d2f ff 2f\n   00078d30 ff 31\n   00078d31 ff 2e\n   00078d32 ff 31\n   00078d33 ff 20\n   00078d34 ff 00\n   00078d35 ff 43\n   00078d36 ff 6f\n   00078d37 ff 6e\n   00078d38 ff 74\n   00078d39 ff 65\n   00078d3a ff 6e\n   00078d3b ff 74\n   00078d3c ff 2d\n   00078d3d ff 54\n   00078d3e ff 79\n   00078d3f ff 70\n   00078d40 ff 65\n   00078d41 ff 00\n   00078d42 ff 43\n   00078d43 ff 6f\n   00078d44 ff 6e\n   00078d45 ff 74\n   00078d46 ff 65\n   00078d47 ff 6e\n   00078d48 ff 74\n   00078d49 ff 2d\n   00078d4a ff 4c\n   00078d4b ff 65\n   00078d4c ff 6e\n   00078d4d ff 67\n   00078d4e ff 74\n   00078d4f ff 68\n   00078d50 ff 00\n   00078d51 ff 43\n   00078d52 ff 6f\n   00078d53 ff 6e\n   00078d54 ff 6e\n   00078d55 ff 65\n   00078d56 ff 63\n   00078d57 ff 74\n   00078d58 ff 69\n   00078d59 ff 6f\n   00078d5a ff 6e\n   00078d5b ff 00\n   00078d5c ff 63\n   00078d5d ff 6c\n   00078d5e ff 6f\n   00078d5f ff 73\n   00078d60 ff 65\n   00078d61 ff 00\n   00078d62 ff 41\n   00078d63 ff 63\n   00078d64 ff 63\n   00078d65 ff 65\n   00078d66 ff 73\n   00078d67 ff 73\n   00078d68 ff 2d\n   00078d69 ff 43\n   00078d6a ff 6f\n   00078d6b ff 6e\n   00078d6c ff 74\n   00078d6d ff 72\n   00078d6e ff 6f\n   00078d6f ff 6c\n   00078d70 ff 2d\n   00078d71 ff 41\n   00078d72 ff 6c\n   00078d73 ff 6c\n   00078d74 ff 6f\n   00078d75 ff 77\n   00078d76 ff 2d\n   00078d77 ff 4f\n   00078d78 ff 72\n   00078d79 ff 69\n   00078d7a ff 67\n   00078d7b ff 69\n   00078d7c ff 6e\n   00078d7d ff 00\n   00078d7e ff 57\n   00078d7f ff 57\n   00078d80 ff 57\n   00078d81 ff 2d\n   00078d82 ff 41\n   00078d83 ff 75\n   00078d84 ff 74\n   00078d85 ff 68\n   00078d86 ff 65\n   00078d87 ff 6e\n   00078d88 ff 74\n   00078d89 ff 69\n   00078d8a ff 63\n   00078d8b ff 61\n   00078d8c ff 74\n   00078d8d ff 65\n   00078d8e ff 00\n   00078d8f ff 42\n   00078d90 ff 61\n   00078d91 ff 73\n   00078d92 ff 69\n   00078d93 ff 63\n   00078d94 ff 20\n   00078d95 ff 72\n   00078d96 ff 65\n   00078d97 ff 61\n   00078d98 ff 6c\n   00078d99 ff 6d\n   00078d9a ff 3d\n   00078d9b ff 22\n   00078d9c ff 4c\n   00078d9d ff 6f\n   00078d9e ff 67\n   00078d9f ff 69\n   00078da0 ff 6e\n   00078da1 ff 20\n   00078da2 ff 52\n   00078da3 ff 65\n   00078da4 ff 71\n   00078da5 ff 75\n   00078da6 ff 69\n   00078da7 ff 72\n   00078da8 ff 65\n   00078da9 ff 64\n   00078daa ff 22\n   00078dab ff 00\n   00078dac ff 4e\n   00078dad ff 6f\n   00078dae ff 74\n   00078daf ff 20\n   00078db0 ff 66\n   00078db1 ff 6f\n   00078db2 ff 75\n   00078db3 ff 6e\n   00078db4 ff 64\n   00078db5 ff 3a\n   00078db6 ff 20\n   00078db7 ff 00\n   00078db8 ff 43\n   00078db9 ff 6f\n   00078dba ff 6e\n   00078dbb ff 74\n   00078dbc ff 65\n   00078dbd ff 6e\n   00078dbe ff 74\n   00078dbf ff 2d\n   00078dc0 ff 45\n   00078dc1 ff 6e\n   00078dc2 ff 63\n   00078dc3 ff 6f\n   00078dc4 ff 64\n   00078dc5 ff 69\n   00078dc6 ff 6e\n   00078dc7 ff 67\n   00078dc8 ff 00\n   00078dc9 ff 69\n   00078dca ff 6e\n   00078dcb ff 64\n   00078dcc ff 65\n   00078dcd ff 78\n   00078dce ff 2e\n   00078dcf ff 68\n   00078dd0 ff 74\n   00078dd1 ff 6d\n   00078dd2 ff 00\n   00078dd3 ff 43\n   00078dd4 ff 61\n   00078dd5 ff 63\n   00078dd6 ff 68\n   00078dd7 ff 65\n   00078dd8 ff 2d\n   00078dd9 ff 43\n   00078dda ff 6f\n   00078ddb ff 6e\n   00078ddc ff 74\n   00078ddd ff 72\n   00078dde ff 6f\n   00078ddf ff 6c\n   00078de0 ff 00\n   00078de1 ff 41\n   00078de2 ff 75\n   00078de3 ff 74\n   00078de4 ff 68\n   00078de5 ff 6f\n   00078de6 ff 72\n   00078de7 ff 69\n   00078de8 ff 7a\n   00078de9 ff 61\n   00078dea ff 74\n   00078deb ff 69\n   00078dec ff 6f\n   00078ded ff 6e\n   00078dee ff 00\n   00078def ff 00\n   00078df0 ff 00\n   00078df1 ff 00\n   00078df2 ff 00\n   00078df3 ff 00\n   00078df4 ff 00\n   00078df5 ff 00\n   00078df6 ff 00\n   00078df7 ff 00\n   00078df8 ff 00\n   00078df9 ff 00\n   00078dfa ff 00\n   00078dfb ff 00\n   00078dfc ff 34\n   00078dfd ff 9d\n   00078dfe ff 20\n   00078dff ff 40\n   00078e00 ff 3c\n   00078e01 ff 9d\n   00078e02 ff 20\n   00078e03 ff 40\n   00078e04 ff cc\n   00078e05 ff ee\n   00078e06 ff 20\n   00078e07 ff 40\n   00078e08 ff d0\n   00078e09 ff ee\n   00078e0a ff 20\n   00078e0b ff 40\n   00078e0c ff d4\n   00078e0d ff ee\n   00078e0e ff 20\n   00078e0f ff 40\n   00078e10 ff d8\n   00078e11 ff ee\n   00078e12 ff 20\n   00078e13 ff 40\n   00078e14 ff 00\n   00078e15 ff 00\n   00078e16 ff 00\n   00078e17 ff 00\n   00078e18 ff 00\n   00078e19 ff 00\n   00078e1a ff 00\n   00078e1b ff 00\n   00078e1c ff 04\n   00078e1d ff 9e\n   00078e1e ff 20\n   00078e1f ff 40\n   00078e20 ff 34\n   00078e21 ff 9e\n   00078e22 ff 20\n   00078e23 ff 40\n   00078e24 ff d0\n   00078e25 ff 9d\n   00078e26 ff 20\n   00078e27 ff 40\n   00078e28 ff 54\n   00078e29 ff 9d\n   00078e2a ff 20\n   00078e2b ff 40\n   00078e2c ff 58\n   00078e2d ff ab\n   00078e2e ff 20\n   00078e2f ff 40\n   00078e30 ff 9c\n   00078e31 ff ab\n   00078e32 ff 20\n   00078e33 ff 40\n   00078e34 ff 30\n   00078e35 ff 78\n   00078e36 ff 30\n   00078e37 ff 30\n   00078e38 ff 00\n   00078e39 ff 43\n   00078e3a ff 6f\n   00078e3b ff 6e\n   00078e3c ff 74\n   00078e3d ff 65\n   00078e3e ff 6e\n   00078e3f ff 74\n   00078e40 ff 2d\n   00078e41 ff 44\n   00078e42 ff 69\n   00078e43 ff 73\n   00078e44 ff 70\n   00078e45 ff 6f\n   00078e46 ff 73\n   00078e47 ff 69\n   00078e48 ff 74\n   00078e49 ff 69\n   00078e4a ff 6f\n   00078e4b ff 6e\n   00078e4c ff 00\n   00078e4d ff 62\n   00078e4e ff 6c\n   00078e4f ff 6f\n   00078e50 ff 62\n   00078e51 ff 00\n   00078e52 ff 66\n   00078e53 ff 69\n   00078e54 ff 6c\n   00078e55 ff 65\n   00078e56 ff 6e\n   00078e57 ff 61\n   00078e58 ff 6d\n   00078e59 ff 65\n   00078e5a ff 00\n   00078e5b ff 2d\n   00078e5c ff 2d\n   00078e5d ff 00\n   00078e5e ff 50\n   00078e5f ff 4f\n   00078e60 ff 53\n   00078e61 ff 54\n   00078e62 ff 00\n   00078e63 ff 44\n   00078e64 ff 45\n   00078e65 ff 4c\n   00078e66 ff 45\n   00078e67 ff 54\n   00078e68 ff 45\n   00078e69 ff 00\n   00078e6a ff 4f\n   00078e6b ff 50\n   00078e6c ff 54\n   00078e6d ff 49\n   00078e6e ff 4f\n   00078e6f ff 4e\n   00078e70 ff 53\n   00078e71 ff 00\n   00078e72 ff 50\n   00078e73 ff 55\n   00078e74 ff 54\n   00078e75 ff 00\n   00078e76 ff 50\n   00078e77 ff 41\n   00078e78 ff 54\n   00078e79 ff 43\n   00078e7a ff 48\n   00078e7b ff 00\n   00078e7c ff 6d\n   00078e7d ff 75\n   00078e7e ff 6c\n   00078e7f ff 74\n   00078e80 ff 69\n   00078e81 ff 70\n   00078e82 ff 61\n   00078e83 ff 72\n   00078e84 ff 74\n   00078e85 ff 2f\n   00078e86 ff 66\n   00078e87 ff 6f\n   00078e88 ff 72\n   00078e89 ff 6d\n   00078e8a ff 2d\n   00078e8b ff 64\n   00078e8c ff 61\n   00078e8d ff 74\n   00078e8e ff 61\n   00078e8f ff 00\n   00078e90 ff 48\n   00078e91 ff 6f\n   00078e92 ff 73\n   00078e93 ff 74\n   00078e94 ff 00\n   00078e95 ff 70\n   00078e96 ff 6c\n   00078e97 ff 61\n   00078e98 ff 69\n   00078e99 ff 6e\n   00078e9a ff 3d\n   00078e9b ff 00\n   00078e9c ff 77\n   00078e9d ff 77\n   00078e9e ff 77\n   00078e9f ff 2e\n   00078ea0 ff 00\n   00078ea1 ff 78\n   00078ea2 ff 2d\n   00078ea3 ff 4d\n   00078ea4 ff 44\n   00078ea5 ff 35\n   00078ea6 ff 00\n   00078ea7 ff 00\n   00078ea8 ff 9e\n   00078ea9 ff c5\n   00078eaa ff 20\n   00078eab ff 40\n   00078eac ff 96\n   00078ead ff c5\n   00078eae ff 20\n   00078eaf ff 40\n   00078eb0 ff 8e\n   00078eb1 ff c5\n   00078eb2 ff 20\n   00078eb3 ff 40\n   00078eb4 ff 86\n   00078eb5 ff c5\n   00078eb6 ff 20\n   00078eb7 ff 40\n   00078eb8 ff 7e\n   00078eb9 ff c5\n   00078eba ff 20\n   00078ebb ff 40\n   00078ebc ff 76\n   00078ebd ff c5\n   00078ebe ff 20\n   00078ebf ff 40\n   00078ec0 ff 6e\n   00078ec1 ff c5\n   00078ec2 ff 20\n   00078ec3 ff 40\n   00078ec4 ff 66\n   00078ec5 ff c5\n   00078ec6 ff 20\n   00078ec7 ff 40\n   00078ec8 ff 20\n   00078ec9 ff cd\n   00078eca ff 20\n   00078ecb ff 40\n   00078ecc ff 38\n   00078ecd ff cd\n   00078ece ff 20\n   00078ecf ff 40\n   00078ed0 ff 50\n   00078ed1 ff cd\n   00078ed2 ff 20\n   00078ed3 ff 40\n   00078ed4 ff 68\n   00078ed5 ff cd\n   00078ed6 ff 20\n   00078ed7 ff 40\n   00078ed8 ff 80\n   00078ed9 ff cd\n   00078eda ff 20\n   00078edb ff 40\n   00078edc ff 98\n   00078edd ff cd\n   00078ede ff 20\n   00078edf ff 40\n   00078ee0 ff 00\n   00078ee1 ff 00\n   00078ee2 ff 00\n   00078ee3 ff 00\n   00078ee4 ff 00\n   00078ee5 ff 00\n   00078ee6 ff 00\n   00078ee7 ff 00\n   00078ee8 ff 00\n   00078ee9 ff 00\n   00078eea ff 00\n   00078eeb ff 00\n   00078eec ff 00\n   00078eed ff 00\n   00078eee ff 00\n   00078eef ff 00\n   00078ef0 ff 00\n   00078ef1 ff 00\n   00078ef2 ff 00\n   00078ef3 ff 00\n   00078ef4 ff 00\n   00078ef5 ff 00\n   00078ef6 ff 00\n   00078ef7 ff 00\n   00078ef8 ff b0\n   00078ef9 ff cd\n   00078efa ff 20\n   00078efb ff 40\n   00078efc ff c8\n   00078efd ff cd\n   00078efe ff 20\n   00078eff ff 40\n   00078f00 ff e0\n   00078f01 ff cd\n   00078f02 ff 20\n   00078f03 ff 40\n   00078f04 ff f8\n   00078f05 ff cd\n   00078f06 ff 20\n   00078f07 ff 40\n   00078f08 ff 00\n   00078f09 ff 00\n   00078f0a ff 00\n   00078f0b ff 00\n   00078f0c ff 00\n   00078f0d ff 00\n   00078f0e ff 00\n   00078f0f ff 00\n   00078f10 ff 00\n   00078f11 ff 00\n   00078f12 ff 00\n   00078f13 ff 00\n   00078f14 ff 10\n   00078f15 ff ce\n   00078f16 ff 20\n   00078f17 ff 40\n   00078f18 ff 94\n   00078f19 ff ce\n   00078f1a ff 20\n   00078f1b ff 40\n   00078f1c ff 68\n   00078f1d ff ef\n   00078f1e ff 20\n   00078f1f ff 40\n   00078f20 ff 54\n   00078f21 ff ce\n   00078f22 ff 20\n   00078f23 ff 40\n   00078f24 ff 28\n   00078f25 ff ce\n   00078f26 ff 20\n   00078f27 ff 40\n   00078f28 ff 74\n   00078f29 ff ef\n   00078f2a ff 20\n   00078f2b ff 40\n   00078f2c ff 08\n   00078f2d ff 1b\n   00078f2e ff 20\n   00078f2f ff 40\n   00078f30 ff 9c\n   00078f31 ff e6\n   00078f32 ff 20\n   00078f33 ff 40\n   00078f34 ff 41\n   00078f35 ff 42\n   00078f36 ff 43\n   00078f37 ff 44\n   00078f38 ff 45\n   00078f39 ff 46\n   00078f3a ff 47\n   00078f3b ff 48\n   00078f3c ff 49\n   00078f3d ff 4a\n   00078f3e ff 4b\n   00078f3f ff 4c\n   00078f40 ff 4d\n   00078f41 ff 4e\n   00078f42 ff 4f\n   00078f43 ff 50\n   00078f44 ff 51\n   00078f45 ff 52\n   00078f46 ff 53\n   00078f47 ff 54\n   00078f48 ff 55\n   00078f49 ff 56\n   00078f4a ff 57\n   00078f4b ff 58\n   00078f4c ff 59\n   00078f4d ff 5a\n   00078f4e ff 61\n   00078f4f ff 62\n   00078f50 ff 63\n   00078f51 ff 64\n   00078f52 ff 65\n   00078f53 ff 66\n   00078f54 ff 67\n   00078f55 ff 68\n   00078f56 ff 69\n   00078f57 ff 6a\n   00078f58 ff 6b\n   00078f59 ff 6c\n   00078f5a ff 6d\n   00078f5b ff 6e\n   00078f5c ff 6f\n   00078f5d ff 70\n   00078f5e ff 71\n   00078f5f ff 72\n   00078f60 ff 73\n   00078f61 ff 74\n   00078f62 ff 75\n   00078f63 ff 76\n   00078f64 ff 77\n   00078f65 ff 78\n   00078f66 ff 79\n   00078f67 ff 7a\n   00078f68 ff 30\n   00078f69 ff 31\n   00078f6a ff 32\n   00078f6b ff 33\n   00078f6c ff 34\n   00078f6d ff 35\n   00078f6e ff 36\n   00078f6f ff 37\n   00078f70 ff 38\n   00078f71 ff 39\n   00078f72 ff 2b\n   00078f73 ff 2f\n   00078f74 ff 00\n   00078f75 ff 00\n   00078f76 ff 00\n   00078f77 ff 00\n   00078f78 ff 73\n   00078f79 ff 63\n   00078f7a ff 5f\n   00078f7b ff 73\n   00078f7c ff 6e\n   00078f7d ff 69\n   00078f7e ff 66\n   00078f7f ff 66\n   00078f80 ff 65\n   00078f81 ff 72\n   00078f82 ff 2e\n   00078f83 ff 63\n   00078f84 ff 00\n   00078f85 ff 00\n   00078f86 ff 00\n   00078f87 ff 00\n   00078f88 ff 73\n   00078f89 ff 63\n   00078f8a ff 5f\n   00078f8b ff 61\n   00078f8c ff 69\n   00078f8d ff 72\n   00078f8e ff 6b\n   00078f8f ff 69\n   00078f90 ff 73\n   00078f91 ff 73\n   00078f92 ff 2e\n   00078f93 ff 63\n   00078f94 ff 00\n   00078f95 ff 00\n   00078f96 ff 00\n   00078f97 ff 00\n   00078f98 ff 73\n   00078f99 ff 63\n   00078f9a ff 5f\n   00078f9b ff 65\n   00078f9c ff 73\n   00078f9d ff 70\n   00078f9e ff 74\n   00078f9f ff 6f\n   00078fa0 ff 75\n   00078fa1 ff 63\n   00078fa2 ff 68\n   00078fa3 ff 2e\n   00078fa4 ff 63\n   00078fa5 ff 00\n   00078fa6 ff 00\n   00078fa7 ff 00\n   00078fa8 ff 77\n   00078fa9 ff 70\n   00078faa ff 61\n   00078fab ff 62\n   00078fac ff 75\n   00078fad ff 66\n   00078fae ff 20\n   00078faf ff 6f\n   00078fb0 ff 76\n   00078fb1 ff 65\n   00078fb2 ff 72\n   00078fb3 ff 66\n   00078fb4 ff 6c\n   00078fb5 ff 6f\n   00078fb6 ff 77\n   00078fb7 ff 00\n   00078fb8 ff 25\n   00078fb9 ff 30\n   00078fba ff 32\n   00078fbb ff 58\n   00078fbc ff 00\n   00078fbd ff 00\n   00078fbe ff 00\n   00078fbf ff 00\n   00078fc0 ff 00\n   00078fc1 ff 00\n   00078fc2 ff 00\n   00078fc3 ff 00\n   00078fc4 ff 00\n   00078fc5 ff 00\n   00078fc6 ff 00\n   00078fc7 ff 00\n   00078fc8 ff 00\n   00078fc9 ff 00\n   00078fca ff 00\n   00078fcb ff 00\n   00078fcc ff 8c\n   00078fcd ff ef\n   00078fce ff 20\n   00078fcf ff 40\n   00078fd0 ff a8\n   00078fd1 ff ef\n   00078fd2 ff 20\n   00078fd3 ff 40\n   00078fd4 ff 48\n   00078fd5 ff d6\n   00078fd6 ff 20\n   00078fd7 ff 40\n   00078fd8 ff c8\n   00078fd9 ff d5\n   00078fda ff 20\n   00078fdb ff 40\n   00078fdc ff d0\n   00078fdd ff d5\n   00078fde ff 20\n   00078fdf ff 40\n   00078fe0 ff 45\n   00078fe1 ff 53\n   00078fe2 ff 50\n   00078fe3 ff 38\n   00078fe4 ff 32\n   00078fe5 ff 36\n   00078fe6 ff 36\n   00078fe7 ff 48\n   00078fe8 ff 54\n   00078fe9 ff 54\n   00078fea ff 50\n   00078feb ff 43\n   00078fec ff 6c\n   00078fed ff 69\n   00078fee ff 65\n   00078fef ff 6e\n   00078ff0 ff 74\n   00078ff1 ff 00\n   00078ff2 ff 48\n   00078ff3 ff 54\n   00078ff4 ff 54\n   00078ff5 ff 50\n   00078ff6 ff 2f\n   00078ff7 ff 31\n   00078ff8 ff 2e\n   00078ff9 ff 00\n   00078ffa ff 6b\n   00078ffb ff 65\n   00078ffc ff 65\n   00078ffd ff 70\n   00078ffe ff 2d\n   00078fff ff 61\n   00079000 4a 6c\n   00079001 20 69\n   00079002 6e 76\n   00079003 20 65\n   00079004 4a 00\n   00079005 00 54\n   00079006 00 72\n   00079007 00 61\n   00079008 00 6e\n   00079009 00 73\n   0007900a 00 66\n   0007900b 00 65\n   0007900c 00 72\n   0007900d 00 2d\n   0007900e 00 45\n   0007900f 00 6e\n   00079010 00 63\n   00079011 00 6f\n   00079012 00 64\n   00079013 00 69\n   00079014 00 6e\n   00079015 00 67\n   00079017 00 63\n   00079018 00 68\n   00079019 00 75\n   0007901a 00 6e\n   0007901b 00 6b\n   0007901c 00 65\n   0007901d 00 64\n   0007901f 00 47\n   00079020 6a 45\n   00079021 75 54\n   00079022 73 00\n   00079023 74 68\n   00079024 69 74\n   00079025 6e 74\n   00079026 6a 70\n   00079027 6f 73\n   00079028 79 00\n   00079029 63 00\n   0007902a 65 00\n   0007902b 31 00\n   0007902c 32 35\n   0007902d 00 db\n   0007902e 00 20\n   0007902f 00 40\n   00079030 00 2d\n   00079031 00 db\n   00079032 00 20\n   00079033 00 40\n   00079034 00 25\n   00079035 00 db\n   00079036 00 20\n   00079037 00 40\n   00079038 00 1b\n   00079039 00 db\n   0007903a 00 20\n   0007903b 00 40\n   0007903c 00 13\n   0007903d 00 db\n   0007903e 00 20\n   0007903f 00 40\n   00079040 00 0b\n   00079041 00 db\n   00079042 00 20\n   00079043 00 40\n   00079044 00 03\n   00079045 00 db\n   00079046 00 20\n   00079047 00 40\n   00079048 00 fb\n   00079049 00 da\n   0007904a 00 20\n   0007904b 00 40\n   0007904c 00 f3\n   0007904d 00 da\n   0007904e 00 20\n   0007904f 00 40\n   00079050 00 eb\n   00079051 00 da\n   00079052 00 20\n   00079053 00 40\n   00079054 00 e3\n   00079055 00 da\n   00079056 00 20\n   00079057 00 40\n   00079060 01 00\n   00079061 60 00\n   00079062 45 00\n   00079063 cb 00\n   00079064 b1 ac\n   00079065 f0 d7\n   00079066 e0 20\n   00079067 50 40\n   00079068 53 b4\n   00079069 46 d7\n   0007906a 2d 20\n   0007906b 42 40\n   0007906c 52 cc\n   0007906d 41 d7\n   0007906e 2d 20\n   0007906f 47 40\n   00079070 4c b0\n   00079071 00 ef\n   00079072 00 20\n   00079073 00 40\n   00079074 00 2d\n   00079075 00 46\n   00079076 00 41\n   00079077 00 49\n   00079078 00 4c\n   00079079 00 2d\n   0007907c 31 18\n   0007907d 30 47\n   0007907e 30 22\n   0007907f 30 40\n   00079080 32 c4\n   00079081 36 16\n   00079082 31 20\n   00079083 35 40\n   00079084 37 dc\n   00079085 31 17\n   00079086 00 20\n   00079087 30 40\n   00079088 34 9c\n   00079089 62 21\n   0007908a 35 20\n   0007908b 66 40\n   0007908c 36 08\n   0007908d 31 66\n   0007908e 66 20\n   0007908f 2d 40\n   00079090 65 98\n   00079091 38 6f\n   00079092 61 20\n   00079093 34 40\n   00079094 2d ac\n   00079095 34 87\n   00079096 37 20\n   00079097 66 40\n   00079098 61 f4\n   00079099 2d 9c\n   0007909a 62 20\n   0007909b 66 40\n   0007909c 62 90\n   0007909d 32 ca\n   0007909e 2d 20\n   0007909f 32 40\n   000790a0 37 ec\n   000790a1 64 47\n   000790a2 32 22\n   000790a3 34 40\n   000790a4 36 e4\n   000790a5 65 16\n   000790a6 62 20\n   000790a7 39 40\n   000790a8 35 b8\n   000790a9 32 21\n   000790aa 30 20\n   000790ab 00 40\n   000790ac d0 a4\n   000790ad 27 6f\n   000790ae 00 20\n   000790af 4c 40\n   000790b0 28 18\n   000790b1 32 9d\n   000790b2 d0 20\n   000790b3 27 40\n   000790b4 00 48\n   000790b5 4c a2\n   000790b6 28 fe\n   000790b7 33 3f\n   000790b8 0a 18\n   000790b9 0a 31\n   000790ba 07 ff\n   000790bb 01 3f\n   000790bc ff 00\n   000790bd ff 00\n   000790be ff 00\n   000790bf 00 e5\nA fatal error occurred: Verify failed.\n```. power issue... need to connect to USB vcc instead of 3.3v. ",
    "SaimenSays": "How is your Sonoff supplied during flashing?\nI had some trouble using supply from USB-serial adapter. After using an external 3,3V supply it worked for me. . ",
    "lyghtnox": "I tried to supplied it with an arduino uno but I got the same issue. And I'm unable to connect to the esp if I supply it with a power module. . I tried with a lower baudrate (38400) and I got the same error but this time at 0x00018000.. So, flashing my backup works almost every time.\n\nTry passing the write_flash --no-compress, and maybe turning baud rate all the way down to 9600, then flashing your new image.\n\nThis doesn't work at all I get the same error (crash at 0x00018000).\nHere start the strange part:\nI restored my backup and I supplied my sonoff with a power supply module without entering in flash mode. The led started blinking that means the sonoff is powered on.\nBut when I enter in flash mode (with the same supply), I can't connect to it and I get:\n```\nConnecting........_..............._...............\n.........._.....___\nA fatal error occurred: Failed to connect to Espressif device: Timed out waiting\n for packet header\n```\nHowever I still can connect to the sonoff if I supply it with my USB-serial adapter (but I get into the error).. That was a firmware problem. I tried another firmware and it worked perfectly. Thanks for the answers! . ",
    "dynek": "OK guessing it's because of the atmega chip in between. Used an \"old\" CP2102 and it works.. I have seen this when googling for this problem, tried it without success :-|\nThanks for your answer.. ",
    "ShakataGaNai": "It's a long shot, but I appreciate it! The answer for anyone else running across this issue, especially in the near term, is to simply make the Deep Sleep connection something that can be disabled. Either by switch, jumper or using headers and pulling the D1 during programming.. ",
    "030jmk": "I ran into the same issue but fixed it with a slower baud rate. 115200 led to the same fatal error but 57600 ran just fine.. ",
    "brendonshaw": "We go through a transistor on the GPIO 0 pin, is there any recommendation on the enable line i.e. 100 nF from the enable line to the supply voltage with a pull up resistor in parallel?. Found the problem to be with pin IO2 (24) needed to be unconnected and left floating. I had it connected to a transitor and for some odd reason it was holding the pin in a state. \nI understand this pin controls the flash programming voltage and cannot be tied/connected to any voltage.\nThe odd thing is I have other boards with the same circuit and they program correctly.\nMany thanks for your help and support . ",
    "CEStanley58": "Really, No response?. Hi projectsgus,\n  I found on a different thread that lowering the baud from 921600 to anything else might be the ticket. I did change it to 115400 and, while it takes much longer,  it loads everytime.\n  Thanks,. Oops, 115200... . Hi Angus,\n230400 baud works but 512000 did not. So there is a timing issue between PC and ESP32 that is not there with ESP8266. In Arduino, I am only able to select set baud rates. Seems 230400 is the fastest reliable connection on ESP32 and my system.\nCharles Stanley\nFrom: Angus Gratton notifications@github.com \nSent: Monday, March 12, 2018 6:56 PM\nTo: espressif/esptool esptool@noreply.github.com\nCc: CEStanley58 CEStanley58@gmail.com; Mention mention@noreply.github.com\nSubject: Re: [espressif/esptool] A fatal error occurred: Timed out waiting for packet header from Configuring flash size... (#279)\nHi @CEStanley58 https://github.com/cestanley58  ,\nGood to hear, thanks. You may also want to try some lower multiples of 115200 - 230400, 460800 - and see if these still work reliably. There's a strong chance multiples of 100,000 will work with this particular board as well (maybe up to 900000 or more, depending on the hardware quality.)\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub https://github.com/espressif/esptool/issues/279#issuecomment-372520312 , or mute the thread https://github.com/notifications/unsubscribe-auth/AUSB1NpIq8I6UNMbedTJu-T_cGiRjstDks5tdyctgaJpZM4SY5_G .  https://github.com/notifications/beacon/AUSB1GOYCMoBYEBlQo6eT1TQLpQWHaZOks5tdyctgaJpZM4SY5_G.gif \n. ",
    "congkeodhbk": "Pull IO12 LOW. ",
    "emeyedeejay": "Many thanks for the feedback/input.\nI tried another actual FTDI USB->serial cable and was successful so it looks like it was my Chinese \"ftdi\" and USB-> serial components that are causing the issue here. It; odd though, they have never given me any issues with anything else I have ever used them for (Arduino based activity).\nI'll try again with these devices to confirm them as the problem but it looks like you can close this issue.\nIf there is any additional info you want form me, please let me know...\nBest,\nMike. ",
    "vgonet": "Hello,\nI've the same problem than emeyedeejay. I'm trying to program the ESP32 through a STM32. I convert the USB frames to USART (and USART to USB). The information sent by the ESP32 are OK until the Uploading stub. Do you know what is the problem ?\nThank you\nBest\nVincent\nFlashing binaries to serial port COM14 (app at offset 0x10000 )...\nesptool.py v2.5.0\nSerial port COM14\nConnecting.....\nChip is ESP32D0WDQ6 (revision 1)\nFeatures: WiFi, BT, Dual Core\nMAC: xx:xx:xx:xx:xx:xx\nUploading stub...\nA fatal error occurred: Failed to write to target RAM (result was 01050000)\nmake: *** [/home/Vincent/esp/esp-idf/components/esptool_py/Makefile.projbuild:63: flash] Error 2\n. Hi Angus,\nThank you for your answer. You're right, it was a problem of delay. I've\nsolved the problem by sending the USB frames to the PC directly after\nreceiving an UART packet. I've used the DMA and the interrupts on the STM32\nto be more efficient.\nBest regards\nVincent\n2018-09-19 9:48 GMT+02:00 Angus Gratton notifications@github.com:\n\nHi @vgonet https://github.com/vgonet ,\nThanks for being patient while someone got back to you.\nThe error indicates that the ESP32 thought the memory write packet was\nmalformed in some way. The fact that it reads back one byte at a time\n(different to all previous responses) seems to indicate some unusual timing\nwith the USB/serial interface, is it possible the STM32F0 might be\nintroducing some delays?\nAngus\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/espressif/esptool/issues/352#issuecomment-422695348,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/Al-lnYNlVTMqnGORNDHkCTjdtheUG2Pkks5ucfbdgaJpZM4WThnn\n.\n. \n",
    "stigok": "FWIW: If using esptool on a Raspberry Pi using the GPIO serial interface at /dev/serial0 you have to disable the login shell being available on that device. You can disable this in the interface options in raspi-config.\nThis produced some different errors throughout 50 attempts, amongst them, the A fatal error occurred: Failed to write to target RAM (result was 0107), or a waiting for header timeout.. ",
    "SteveOfTheStow": "Just read that esptool is meant to be source-compatible with 2 and 3!. ",
    "tim-nordell-nimbelink": "Would the --baud setting for the espefuse.py be confusing for users that don't have the middleman pass through?. Hi @projectgus ,\nNo, the no_sync_no_reset for espefuse.py isn't needed - not sure why and I haven't dug into it.  I'll add it in for consistency though.  (Maybe because it wasn't trying to change the baud rate?)\n\nTim. Hi @projectgus ,\n\nNo worries!  It just means I can use the vanilla repository now instead of my own modifications locally. :)\n-- Tim. Noted.. ",
    "devanlai": "Thanks for merging this.\nFor fixing it upstream, I'll do some research to see if it's possible to reliably determine when the serial port driver is using usbser.sys so that the workaround is applied as narrowly as possible.. ",
    "nhondong": "Hi,\nI decided to test it with 5 Volt on the 3.3V connector.\nIt works.\nKind regards, Nils. ",
    "doquen": "Hi,\nI have a similar error,\nesptool.py v2.3.1\nConnecting...TRACE +0.000 command op=0x08 data len=36 wait_response=1 timeout=0.100 data='\\x07\\x07\\x12 UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU'\nTRACE +0.000 Write 46 bytes: '\\xc0\\x00\\x08$\\x00\\x00\\x00\\x00\\x00\\x07\\x07\\x12 UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU\\xc0'\nTRACE +0.001 Read 1 bytes: '\\xc0'\nTRACE +0.001 Read 1 bytes: '\\x00'\nTRACE +0.000 Read 11 bytes: '\\x08$\\x00\\x00\\x00\\x00\\x00\\x07\\x07\\x12 '\nTRACE +0.001 Read 1 bytes: 'U'\nTRACE +0.000 Read 10 bytes: 'UUUUUUUUUU'\nTRACE +0.001 Read 1 bytes: 'U'\nTRACE +0.000 Read 10 bytes: 'UUUUUUUUUU'\nTRACE +0.001 Read 1 bytes: 'U'\nTRACE +0.000 Read 10 bytes: 'UUUUUUUUU\\xc0'\nTRACE +0.000 Full packet: '\\x00\\x08$\\x00\\x00\\x00\\x00\\x00\\x07\\x07\\x12 UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU'\nTRACE +0.100 Timed out waiting for packet header\nIn my case, apparently the bytes are read, but it times out anyway. I tryed all links in previous post without any success.. Is this hardware problem?. ",
    "coffee-cup": "I seem to be having a similar problem. My trace is\nesptool.py v2.3.1\nConnecting...TRACE +0.000 command op=0x08 data len=36 wait_response=1 timeout=0.100 data=b'\\x07\\x07\\x12 UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU'\nTRACE +0.003 Write 46 bytes: b'\\xc0\\x00\\x08$\\x00\\x00\\x00\\x00\\x00\\x07\\x07\\x12 UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU\\xc0'\nTRACE +0.100 Timed out waiting for packet header\n.TRACE +0.057 command op=0x08 data len=36 wait_response=1 timeout=0.100 data=b'\\x07\\x07\\x12 UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU'\nTRACE +0.000 Write 46 bytes: b'\\xc0\\x00\\x08$\\x00\\x00\\x00\\x00\\x00\\x07\\x07\\x12 UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU\\xc0'\nTRACE +0.103 Timed out waiting for packet header\n.TRACE +0.056 command op=0x08 data len=36 wait_response=1 timeout=0.100 data=b'\\x07\\x07\\x12 UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU'\nTRACE +0.000 Write 46 bytes: b'\\xc0\\x00\\x08$\\x00\\x00\\x00\\x00\\x00\\x07\\x07\\x12 UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU\\xc0'\nTRACE +0.104 Timed out waiting for packet header\n.TRACE +0.056 command op=0x08 data len=36 wait_response=1 timeout=0.100 data=b'\\x07\\x07\\x12 UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU'\nTRACE +0.000 Write 46 bytes: b'\\xc0\\x00\\x08$\\x00\\x00\\x00\\x00\\x00\\x07\\x07\\x12 UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU\\xc0'\nTRACE +0.101 Timed out waiting for packet header\n.TRACE +0.056 command op=0x08 data len=36 wait_response=1 timeout=0.100 data=b'\\x07\\x07\\x12 UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU'\nTRACE +0.000 Write 46 bytes: b'\\xc0\\x00\\x08$\\x00\\x00\\x00\\x00\\x00\\x07\\x07\\x12 UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU\\xc0'\nTRACE +0.105 Timed out waiting for packet header\nI can successfully view the boot messages over serial with a baud rate of 74880, but am unable to get esptool to connect. I was also able to successfully send AT commands before I bricked it with the wrong baud rate command. Another module I bought at the same time works without issue using the same setup. I am using a 3.3V breadboard power supply and have grounded GPIO0. The Rx and Tx are 5V this doesn't seem to be a problem for the other esp8266 module.. Unfortunately not :( It does not work at any baud rate. ",
    "theproxy": "Are you on a Ryzen chipset? I was going to submit a same issue but I am trying same with esptool 2.4.1 on a Dell Inspiron 13 7000 2-in-1. Windows 10 reports Processor is \"AMD Ryzen 5 2500U with Radeon Vega Mobile Gfx\".\nI tried running esptool --chip esp32 --port COM3 --baud 9600 read_mac and get same results. \nI am successful talking to the device using TeraTerm so I believe it's not a serial terminal issue.. My data: \nTRACE +0.110 Timed out waiting for packet header\n.TRACE +0.078 command op=0x08 data len=36 wait_response=1 timeout=0.100 data=\n    0707122055555555 5555555555555555 | ... UUUUUUUUUUUU\n    5555555555555555 5555555555555555 | UUUUUUUUUUUUUUUU\n    55555555                          | UUUU\nTRACE +0.000 Write 46 bytes:\n    c000082400000000 0007071220555555 | ...$........ UUU\n    5555555555555555 5555555555555555 | UUUUUUUUUUUUUUUU\n    5555555555555555 5555555555c0     | UUUUUUUUUUUUU.\nTRACE +0.063 Read 1 bytes: 5b\nTRACE +0.000 Read invalid data: 5b\nTRACE +0.000 Remaining data in serial buffer:\n    494e464f5d205265 6164696e6720616c | INFO] Reading al\n    61726d2066696c65 0d0a             | arm file..\n.TRACE +0.109 command op=0x08 data len=36 wait_response=1 timeout=0.100 data=\n    0707122055555555 5555555555555555 | ... UUUUUUUUUUUU\n    5555555555555555 5555555555555555 | UUUUUUUUUUUUUUUU\n    55555555                          | UUUU. ",
    "backpacked": "\nMy data:\nTRACE +0.110 Timed out waiting for packet header\n.TRACE +0.078 command op=0x08 data len=36 wait_response=1 timeout=0.100 data=\n0707122055555555 5555555555555555 | ... UUUUUUUUUUUU\n5555555555555555 5555555555555555 | UUUUUUUUUUUUUUUU\n55555555 | UUUU\nTRACE +0.000 Write 46 bytes:\nc000082400000000 0007071220555555 | ...$........ UUU\n5555555555555555 5555555555555555 | UUUUUUUUUUUUUUUU\n5555555555555555 5555555555c0 | UUUUUUUUUUUUU.\nTRACE +0.063 Read 1 bytes: 5b\nTRACE +0.000 Read invalid data: 5b\nTRACE +0.000 Remaining data in serial buffer:\n494e464f5d205265 6164696e6720616c | INFO] Reading al\n61726d2066696c65 0d0a | arm file..\n.TRACE +0.109 command op=0x08 data len=36 wait_response=1 timeout=0.100 data=\n0707122055555555 5555555555555555 | ... UUUUUUUUUUUU\n5555555555555555 5555555555555555 | UUUUUUUUUUUUUUUU\n55555555 | UUUU\n\nI see similar output on my Sonoff Basic 2017-10-11. Have not been able to flash it yet. @theproxy, did you have any success? If so, what did you do?. I installed the CP210 USB to TTL drivers and I was able to read the falsh and now I am working on flashing my device. I guess my problem was not having verified the drivers for the USB device. :). ",
    "RockfordWei": "I have a similar issue but I am not sure if the problem is the command line parameters.\nMy win7 VM works well for flashing as the screenshot.\n\nHowever, my mac with sudo pip install esptool doesn't work at all:\n$ esptool.py --port /dev/tty.usbmodem1411 --baud 115200 --trace \\\n    write_flash \\\n    --flash_freq=40m \\\n    --flash_mode=dio \\\n    --flash_size=1MB  \\\n    0x00000 boot_v1.6.bin \\\n    0x01000 build/qbiq_esp_app.user1.1024.0x01000.bin \\\n    0x81000 build/qbiq_esp_app.user2.1024.0x81000.bin \\\n    0xFC000 esp_init_data_default.bin \\\n    0x7E000 blank.bin\nwill cause this:\nUploading stub...\nTraceback (most recent call last):\n  File \"/usr/local/bin/esptool.py\", line 2853, in <module>\n    _main()\n  File \"/usr/local/bin/esptool.py\", line 2846, in _main\n    main()\n  File \"/usr/local/bin/esptool.py\", line 2571, in main\n    esp = esp.run_stub()\n  File \"/usr/local/bin/esptool.py\", line 579, in run_stub\n    self.mem_block(stub[field][from_offs:to_offs], seq)\n  File \"/usr/local/bin/esptool.py\", line 492, in mem_block\n    self.checksum(data))\n  File \"/usr/local/bin/esptool.py\", line 340, in check_command\n    val, data = self.command(op, data, chk, timeout=timeout)\n  File \"/usr/local/bin/esptool.py\", line 308, in command\n    self.write(pkt)\n  File \"/usr/local/bin/esptool.py\", line 271, in write\n    self._port.write(buf)\n  File \"/Library/Python/2.7/site-packages/serial/serialposix.py\", line 552, in write\n    raise writeTimeoutError\nserial.serialutil.SerialTimeoutException: Write timeout\nThe full trace looks like this:\n```\nesptool.py v2.5.1\nSerial port /dev/tty.usbmodem1411\nConnecting...TRACE +0.000 command op=0x08 data len=36 wait_response=1 timeout=0.100 data=\n    0707122055555555 5555555555555555 | ... UUUUUUUUUUUU\n    5555555555555555 5555555555555555 | UUUUUUUUUUUUUUUU\n    55555555                          | UUUU\nTRACE +0.001 Write 46 bytes: \n    c000082400000000 0007071220555555 | ...$........ UUU\n    5555555555555555 5555555555555555 | UUUUUUUUUUUUUUUU\n    5555555555555555 5555555555c0     | UUUUUUUUUUUUU.\nTRACE +0.106 Timed out waiting for packet header\n.TRACE +0.058 command op=0x08 data len=36 wait_response=1 timeout=0.100 data=\n    0707122055555555 5555555555555555 | ... UUUUUUUUUUUU\n    5555555555555555 5555555555555555 | UUUUUUUUUUUUUUUU\n    55555555                          | UUUU\nTRACE +0.000 Write 46 bytes: \n    c000082400000000 0007071220555555 | ...$........ UUU\n    5555555555555555 5555555555555555 | UUUUUUUUUUUUUUUU\n    5555555555555555 5555555555c0     | UUUUUUUUUUUUU.\nTRACE +0.027 Read 1 bytes: c0\nTRACE +0.000 Read 95 bytes: \n    0108020007071220 0000c0c001080200 | ....... ........\n    070712200000c0c0 0108020007071220 | ... ........... \n    0000c0c001080200 070712200000c0c0 | ........... ....\n    0108020007071220 0000c0c001080200 | ....... ........\n    070712200000c0c0 0108020007071220 | ... ........... \n    0000c0c001080200 070712200000c0   | ........... ...\nTRACE +0.001 Received full packet: 01080200070712200000\nTRACE +0.004 Received full packet: 01080200070712200000\nTRACE +0.003 Received full packet: 01080200070712200000\nTRACE +0.003 Received full packet: 01080200070712200000\nTRACE +0.002 Received full packet: 01080200070712200000\nTRACE +0.002 Received full packet: 01080200070712200000\nTRACE +0.002 Received full packet: 01080200070712200000\nTRACE +0.002 Received full packet: 01080200070712200000\nDetecting chip type...TRACE +0.002 command op=0x0a data len=4 wait_response=1 timeout=3.000 data=78000060\nTRACE +0.000 Write 14 bytes: c0000a04000000000078000060c0\nTRACE +0.018 Read 1 bytes: c0\nTRACE +0.000 Read 11 bytes: 010a0200002006000000c0\nTRACE +0.000 Received full packet: 010a0200002006000000\n ESP8266\nTRACE +0.000 command op=0x0a data len=4 wait_response=1 timeout=3.000 data=5c00f03f\nTRACE +0.000 Write 14 bytes: c0000a0400000000005c00f03fc0\nTRACE +0.013 Read 1 bytes: c0\nTRACE +0.000 Read 11 bytes: 010a02007fcf5c000000c0\nTRACE +0.000 Received full packet: 010a02007fcf5c000000\nTRACE +0.003 command op=0x0a data len=4 wait_response=1 timeout=3.000 data=5800f03f\nTRACE +0.000 Write 14 bytes: c0000a0400000000005800f03fc0\nTRACE +0.016 Read 1 bytes: c0\nTRACE +0.000 Read 11 bytes: 010a020000b000640000c0\nTRACE +0.000 Received full packet: 010a020000b000640000\nTRACE +0.004 command op=0x0a data len=4 wait_response=1 timeout=3.000 data=5400f03f\nTRACE +0.000 Write 14 bytes: c0000a0400000000005400f03fc0\nTRACE +0.016 Read 1 bytes: c0\nTRACE +0.000 Read 11 bytes: 010a0200cdc800020000c0\nTRACE +0.000 Received full packet: 010a0200cdc800020000\nTRACE +0.003 command op=0x0a data len=4 wait_response=1 timeout=3.000 data=5000f03f\nTRACE +0.000 Write 14 bytes: c0000a0400000000005000f03fc0\nTRACE +0.017 Read 1 bytes: c0\nTRACE +0.000 Read 11 bytes: 010a02000000c58d0000c0\nTRACE +0.000 Received full packet: 010a02000000c58d0000\nChip is ESP8266EX\nTRACE +0.003 command op=0x0a data len=4 wait_response=1 timeout=3.000 data=5c00f03f\nTRACE +0.000 Write 14 bytes: c0000a0400000000005c00f03fc0\nTRACE +0.016 Read 1 bytes: c0\nTRACE +0.000 Read 11 bytes: 010a02007fcf5c000000c0\nTRACE +0.000 Received full packet: 010a02007fcf5c000000\nTRACE +0.002 command op=0x0a data len=4 wait_response=1 timeout=3.000 data=5800f03f\nTRACE +0.000 Write 14 bytes: c0000a0400000000005800f03fc0\nTRACE +0.017 Read 1 bytes: c0\nTRACE +0.000 Read 11 bytes: 010a020000b000640000c0\nTRACE +0.000 Received full packet: 010a020000b000640000\nTRACE +0.004 command op=0x0a data len=4 wait_response=1 timeout=3.000 data=5400f03f\nTRACE +0.000 Write 14 bytes: c0000a0400000000005400f03fc0\nTRACE +0.016 Read 1 bytes: c0\nTRACE +0.000 Read 11 bytes: 010a0200cdc800020000c0\nTRACE +0.000 Received full packet: 010a0200cdc800020000\nTRACE +0.003 command op=0x0a data len=4 wait_response=1 timeout=3.000 data=5000f03f\nTRACE +0.000 Write 14 bytes: c0000a0400000000005000f03fc0\nTRACE +0.017 Read 1 bytes: c0\nTRACE +0.000 Read 11 bytes: 010a02000000c58d0000c0\nTRACE +0.000 Received full packet: 010a02000000c58d0000\nFeatures: WiFi\nTRACE +0.004 command op=0x0a data len=4 wait_response=1 timeout=3.000 data=5000f03f\nTRACE +0.000 Write 14 bytes: c0000a0400000000005000f03fc0\nTRACE +0.016 Read 1 bytes: c0\nTRACE +0.000 Read 11 bytes: 010a02000000c58d0000c0\nTRACE +0.000 Received full packet: 010a02000000c58d0000\nTRACE +0.003 command op=0x0a data len=4 wait_response=1 timeout=3.000 data=5400f03f\nTRACE +0.000 Write 14 bytes: c0000a0400000000005400f03fc0\nTRACE +0.017 Read 1 bytes: c0\nTRACE +0.000 Read 11 bytes: 010a0200cdc800020000c0\nTRACE +0.000 Received full packet: 010a0200cdc800020000\nTRACE +0.004 command op=0x0a data len=4 wait_response=1 timeout=3.000 data=5c00f03f\nTRACE +0.000 Write 14 bytes: c0000a0400000000005c00f03fc0\nTRACE +0.016 Read 1 bytes: c0\nTRACE +0.000 Read 11 bytes: 010a02007fcf5c000000c0\nTRACE +0.000 Received full packet: 010a02007fcf5c000000\nMAC: 5c:cf:7f:c8:cd:8d\nUploading stub...\nTRACE +0.003 command op=0x05 data len=16 wait_response=1 timeout=3.000 data=601f0000020000000018000000e01040\nTRACE +0.000 Write 26 bytes: \n    c000051000000000 00601f0000020000 | ...............\n    000018000000e010 40c0             | ........@.\nTRACE +0.017 Read 1 bytes: c0\nTRACE +0.000 Read 11 bytes: 010502007fcf5c000000c0\nTRACE +0.000 Received full packet: 010502007fcf5c000000\nTRACE +0.006 command op=0x07 data len=6160 wait_response=1 timeout=3.000 data=\n    0018000000000000 0000000000000000 | ................\n    a810004001ffff46 450000000080fe3f | ...@...FE......?\n    4f484149a4abff3f 0cabfe3f80800000 | OHAI...?...?....\n    e8f910400c000060 0000000100000100 | ...@...........\n    00100000ffff0000 8c80000010400000 | .............@..\n    0000ffff00400000 0080fe3f9c2bff3f | .....@.....?.+.?\n    a02bff3f10270000 14000060ffff0f00 | .+.?.'.........\n    a4abff3fa4abff3f a42bff3fb4abff3f | ...?...?.+.?...?\n    0080000020290000 f88dfe3f5880fe3f | .... ).....?X..?\n    a8abff3f98aeff3f 989bfe3f84aeff3f | ...?...?...?...?\n    801b0000a00d0000 0008000020090000 | ............ ...\n    500e000050120000 acabff3fb0abff3f | P...P......?...?\n    1f2900003ca9fe3f 08aeff3f8cadff3f | .)..<..?...?...?\n    800b00000cadff3f 8cacff3fb0150000 | .......?...?....\n    f1ff000000abfe3f 00a9fe3fbc0f0040 | .......?...?...@\n    880f0040a80f0040 583f00402c4c0040 | ...@...@X?.@,L.@\n    303b004078480040 004a0040b4490040 | 0;.@xH.@.J.@.I.@\n    cc2e00401ce20040 d839004068e20040 | ...@...@.9.@h..@\n    48df004090e10040 4c26004084490040 | H..@...@L&.@.I.@\n    21bcff92a1109011 c022612322a00002 | !........\"a#\"...\n    6143c26142d26141 e26140f2613f01e7 | aC.aB.aA.a@.a?..\n    ffc0000021b2ff31 b3ff0c0406010000 | ....!..1........\n    49024b223732f822 a08c2a210c4345b3 | I.K\"72.\"..*!.CE.\n    0121aeffc1adff31 aeff2a2cc02000c9 | .!.....1..*,. ..\n    0242a00022a00501 daffc0000021a9ff | .B..\"........!..\n    32a101c020004802 303420c020003902 | 2... .H.04 . .9.\n    2c0201d4ffc00000 01d4ffc0000031a2 | ,.............1.\n    ff41a2ff51a3ff71 a3ff0c0262a10001 | .A..Q..q....b...\n    cfffc0000021a0ff 3198ff2a23c02000 | .....!..1..*#. .\n    38021673ffc02000 c8020c03c0200039 | 8..s.. ...... .9\n    020c12224184220c 010c242241854251 | ...\"A.\"...$\"A.BQ\n    433261222692081c 3337121f86080000 | C2a\"&...37......\n    220c03320c028022 1130222066421228 | \"..2...\".0\" fB.(\n    2cc0200028022261 2246010022a01222 | ,. .(.\"a\"F..\"..\"\n    514322a0c001b6ff c0000022a0841022 | QC\"........\"...\"\n    8032a00845a401f2 0c03220c0280ff11 | .2..E.....\".....\n    20ff202182fff7b2 17059e0122a0ee01 |  . !........\"...\n    acffc0000022a0c0 01aaffc00000c6d8 | .....\"..........\n    ff320c010cd22793 02c6850037325166 | .2....'.....72Qf\n    6302869e00f67323 663302465d00f643 | c.....s#f3.F]..C\n    0a662302864c0006 9d00000066430246 | .f#..L......fC.F\n    7100665302c68300 c69800000c922793 | q.fS..........'.\n    02067a0037320866 7302c68000869300 | ..z.72.fs.......\n    6693024678000cb2 279302466d00468f | f..Fx...'..Fm.F.\n    001c32279302c639 0037322866b30286 | ..2'...9.72(f...\n    40001c0237320a0c f2279302062e0006 | @...72...'......\n    87001c1227930246 42001c2227930246 | ....'..FB..\"'..F\n    590046820022a0d1 27132c37320922a0 | Y.F..\"..'.,72.\".\n    d0271318c67d0000 22a0d22793028625 | .'...}..\"..'...%\n    0022a0d327930286 96054678000c1dcc | .\"..'.....Fx....\n    1f86600506740000 668f024661050671 | ....t..f..Fa..q\n    00000174ffc00000 eaed9c12866d0000 | ...t.........m..\n    202c410171ffc000 0056921ad2ddf0d0 |  ,A.q....V......\n    2ec08c4d2030f456 53fedaf2e138ff06 | ...M 0.VS....8..\n    040000002020f501 69ffc00000565218 | ....  ..i....VR.\n    e0ddc0d02fc0d73e eadae20604000000 | ..../..>........\n    202c410161ffc000 00569216d2ddf0d0 |  ,A.a....V......\n    2ec056adfec65700 0c0ed2a0c0268f02 | ..V...W......&..\n    4658008666050000 66bf02866405063b | FX..f...f...d..;\n    0066bf02864305c6 4e000c1d26bf0246 | .f...C..N...&..F\n    4d00384c2124ff0c 0ed2a0c227130286 | M.8L!$......'...\n    4c00463f050c1466 bf12384c211eff0c | L.F?...f..8L!...\n    0ed2a0c227130286 4600c63e05dd0446 | ....'...F..>...F\n    410000002119ff0c 0e320200d2a0c6e7 | A...!....2......\n    9302c63f00382cd8 52f2cff0f033c022 | ...?.8,.R....3.\"\n    a0c030d29332cc18 22a0ef460200ea43 | ..0..2..\"..F...C\n    4204001bee402230 f72ef2520c05620c | B....@\"0...R..b.\n    04420c0680551132 0c07605520004411 | .B...U.2..U .D.\n    5044208033014033 203022c032a0c10c | PD .3.@3 0\".2...\n    0e20d393462b0000 2100ffd2a0c63202 | . ..F+..!.....2.\n    001633093832d2a0 c856b308324200d8 | ..3.82...V..2B..\n    52c620001c82279f 024624050c0e0c1d | R. ...'..F$.....\n    46200000664f0246 2805061a0066bf02 | F ..fO.F(....f..\n    062905c601000000 664f028628050c0e | .)......fO..(...\n    d2a0c08617000000 66bf024626050611 | ........f..F&...\n    0041eafef2cff078 04cc37d2a0c6fc6f | .A.....x..7....o\n    31e8fed2a0c96803 f7362cf02014d2a0 | 1.....h..6,. ...\n    c092cc188c928607 002a8988084b2289 | .........*...K\".\n    052a572086c0f732 ef59048903461005 | .*W ...2.Y...F..\n    668f028618050c1d 0c0ec601000000e2 | f...............\n    a000d2a0ffd02074 057401e02074c573 | ...... t.t.. t.s\n    0122a0c001fbfec0 0000567dca220c01 | .\"........V}.\"..\n    32a00f3712312733 1466420206d20466 | 2..7.1'3.fB....f\n    6202c6d604263202 4622ff461a001c23 | b....&2.F\".F...#\n    37920246cc0432a0 d23712491c133712 | 7..F..2..7.I..7.\n    02061cffc61a0000 21c3fe01edfec000 | ........!.......\n    0021c1fec0200038 0221c0fe20331022 | .!... .8.!.. 3.\"\n    2c03202382322c02 01e7fec000003d02 | ,. #.2,.......=.\n    2d0d01e5fec00000 22a3e801e1fec000 | -.......\".......\n    00060cff0000222c 02322c03422c0458 | ......\",.2,.B,.X\n    5c8576014607ff00 320c03220c028033 | \\.v.F...2..\"...3\n    1120332032c3f022 cc18455b010601ff | . 3 2..\"..E[....\n    000000220c03320c 0280221130222022 | ...\"..2...\".0\" \"\n    c2f0f2cc1822612b 0c1e86950421a4fe | .....\"a+.....!..\n    41c1feb22200d1a3 fe62a00322240272 | A...\"....b..\"$.r\n    212b626125b0ddc0 2737040c18826125 | !+ba%...'7....a%\n    b26135054d01b221 35719bfe92212b70 | .a5.M..!5q...!+p\n    4bc0da440b84da6b 62612982612c4058 | K..D...kba).a,@X\n    109aaf8c15466e04 77bb02c66e0498ec | .....Fn.w...n...\n    722c10822c15286c 9261267261248261 | r,..,.(l.a&ra$.a\n    2a3c53d87ce22c14 68fc27b302061b04 | *<S.|.,.h.'.....\n    318bfe3022a02802 a00200217ffe0c0e | 1..0\".(....!....\n    0c13e992e98239d2 39a2a73f3ae26124 | ......9.9..?:.a$\n    6d0ee26126e0de20 9221250c23303910 | m..a&.. .!%.#09.\n    2176fe9c930c1449 625d0bcd0f860c04 | !v.....Ib]......\n    a7bfe4320f002170 fe1bcf3982060600 | ...2..!p...9....\n    3982cd0f46040000 320f001bcf3982e2 | 9...F...2....9..\n    61246d0ee26126dd 0ea73c2c86000000 | a$m..a&...<,....\n    cd0f7221250c2550 37102163fe9c0359 | ..r!%.%P7.!c...Y\n    625d0bc62e00a7bf e6320f00215ffe1b | b].......2..!_..\n    cf39920603000000 00320c00215bfe1b | .9.......2..![..\n    cc39922159fe1cf3 588268928025116a | .9.!Y...X.h..%.j\n    2242613052613462 612fa26133b26135 | \"Ba0Ra4ba/.a3.a5\n    0183fec000000c13 4221305221346221 | ........B!0R!4b!\n    2fa22133b22135cc e22c02206610cc76 | /.!3.!5..,. f..v\n    50203422c2f82036 835054418b550c12 | P 4\".. 6.PTA.U..\n    7150fe0015400062 a167370f00054040 | qP...@.b.g7...@@\n    40910c0640628330 66209c460c164600 | @...@b.0f .F..F.\n    00cd0f213dfe2c43 39625d0b46d40300 | ...!=.,C9b].F...\n    00005d0bf63d3fa7 3c29c600005d0bcd | ..]..=?.<)...]..\n    0f8221250c222028 109cc20c332132fe | ..!%.\" (....3!2.\n    39620c14c6ca03a7 bfe21bcf220f005d | 9b..........\"..]\n    0b060100220c001b cc001d400022a120 | ....\"......@.\". \n    ee208bdd06efff71 28fee0202429b720 | . .....q(.. $). \n    214129c7e0e341d2 cdfd562223d02024 | !A)...A...V\"#. $\n    27bd3ca73c25c600 005d0bcd0f922125 | '.<.<%...]....!%\n    0c222029100c5356 22fac604000000a7 | .\" )..SV\".......\n    bfe61bcf220f005d 0b060100220c001b | ....\"..]....\"...\n    cc001d400022a120 ee208bdd46efff00 | ...@.\". . ..F...\n    d02024000240e0e0 917c8220dd100c06 | . $..@...|. ....\n    164d05f68d39a73c 23c600005d0bcd0f | .M...9.<#...]...\n    7221250c22202710 0c6356f2f4460400 | r!%.\" '..cV..F..\n    a7bfe81bcf220f00 5d0b060100220c00 | .....\"..]....\"..\n    1bcc001d400022a1 20ee208bdd86f0ff | ....@.\". . .....\n    21fefd3108fe6a22 3a22e24218d2cdf8 | !..1..j\":\".B....\n    e0e8410616000000 a73c41c600005d0b | ..A......<A...].\n    cd0f8221250c2220 281031f3fd9cf20c | ...!%.\" (.1.....\n    722963c6beffa7bf e421effd41fafd32 | r)c......!..A..2\n    0f006a224a221bcf 3242185d0b860700 | ..j\"J\"..2B.]....\n    41f5fd6a334a3322 431846040021e6fd | A..j3J3\"C.F..!..\n    41f1fd320c006a22 4a223242181bcc1b | A..2..j\"J\"2B....\n    66f6460206d2ff91 04fe620939220938 | f.F.......b.9\".8\n    8066112066202209 3b32093a80221130 | .f. f \".;2.:.\".0\n    222031d4fd302230 279606861c005d0b | \" 1..0\"0'.....].\n    cd0f2c7346e20000 f68d3ca73c25c600 | ..,sF.....<.<%..\n    005d0bcd0f722125 0c222027103c3356 | .]...r!%.\" '.<3V\n    a2e6c604000000a7 bfe61bcf220f005d | ............\"..]\n    0b060100220c001b cc001d400022a120 | ....\"......@.\". \n    ee208bdd06f0ff00 e08074826126e0e8 | . ........t.a&..\n    41d2cdf846020000 3c4346f7025d0bcd | A...F...<CF..]..\n    0f92212997b5f072 21260b667245001b | ..!)...r!&.frE..\n    550c020c134d02d0 4393602393278487 | U....M..C.#.'..\n    861d000c9386ec02 5d0bcd0f82212987 | ........]....!).\n    b5f0460700922125 0c222c6327090286 | ..F...!%.\",c'...\n    7affc600005d0bcd 0f2c8386b800005d | z....]...,.....]\n    0bcd0fa7bcde7221 295027c0c07ac077 | ......r!)P'..z.w\n    b2017d0277b6017d 062d053d0c4d0752 | ..}.w..}.-.=.M.R\n    613462612f726132 a26133b2613501d0 | a4ba/ra2.a3.a5..\n    fdc0000072213252 213462212fb22135 | ....r!2R!4b!/.!5\n    a221337acc7a5570 66c056e6f8c6ed02 | .!3z.zUpf.V.....\n    66320d4601000000 5d0bcd0f0ca3c69f | f2.F....].......\n    0026120286210022 a1202267112c0421 | .&...!.\". \"g.,.!\n    9afd42671232a005 52613462612f7261 | ..Bg.2..Ra4ba/ra\n    32a26133b2613501 bbfdc00000722132 | 2.a3.a5......r!2\n    22a0e82a773191fd b22135a221336221 | \"..w1...!5.!3b!\n    2f5221342d0742a0 084243001b337793 | /R!4-.B..BC..3w.\n    f732c2708d030c94 4242001b223792f7 | .2.p....BB..\"7..\n    22a10032a1180c74 c60100004248001b | \"..2...t....BH..\n    221b883792f532ae e83a880c8732a11f | \"..7..2..:...2..\n    2a487244001b2227 b3f5066e01000c06 | HrD..\"'...n....\n    217cfd6a22220200 27bd3ca73c25c600 | !|.j\"\"..'.<.<%..\n    005d0bcd0f822125 0c222028100cb356 | .]....!%.\" (...V\n    a2ccc60400a7bfe8 1bcf220f005d0b86 | ..........\"..]..\n    01000000220c001b cc001d400022a120 | ....\"......@.\". \n    ee208bdd06eeff00 216afd0c136a2222 | . ......!j...j\"\"\n    02004168fd001240 0033a14046a00b33 | ..Ah...@.3.@F..3\n    e0331020ddc00002 40e0e09148042152 | .3. ....@...H.!R\n    fd4a332026a03262 111b66b63681215e | .J3 &.2b..f.6.!^\n    fd0c0342a1205261 34a26133b2613501 | ...B. Ra4.a3.a5.\n    7dfdc000000c0652 2134a22133b22135 | }......R!4.!3.!5\n    06180000f63d3ca7 3c25c600005d0bcd | .....=<.<%...]..\n    0f9221250c222029 100ce356e2c2c604 | ..!%.\" )...V....\n    000000a7bfe61bcf 220f005d0b060100 | ........\"..]....\n    220c001bcc001d40 0022a120ee208bdd | \"......@.\". . ..\n    06f0ff002146fd41 34fd6a22220200e0 | ....!F.A4.j\"\"...\n    30242a244143fdd2 cdfd4a22324218e0 | 0$$AC....J\"2B..\n    e3411b66212dfd32 22133736961c3332 | .A.f!-.2\".76..32\n    6213062801713bfd 0c0370728242a040 | b..(.q;...pr.B.@\n    70788072c75822c1 4452613462612f82 | px.r.X\".DRa4ba/.\n    6131a26133b26135 7261270152fdc000 | a1.a3.a5ra'.R...\n    007221274131fd22 a1202a2732a00001 | .r!'A1.\". '2...\n    4dfdc00000212dfd 9221270c032a2942 | M....!-..!'..)B\n    a4800148fdc00000 82213152213428c8 | ...H.....!1R!4(.\n    62212f8082a08228 1122612d82612e0c | b!/....(.\"a-.a..\n    02a22133b2213586 050000007221272a | ..!3.!5.....r!'\n    373203001b221033 a04223111b444263 | 72...\".3.B#..DBc\n    1182212e8792e40c 02291129014d020c | ..!......).).M..\n    13e0831172c1448a 9798098a819a22f0 | ....r.D.......\".\n    22111b3329189a44 66b3e582a001f624 | \"..3)..Df......$\n    0282a00031f7fc0c 093a220c13209393 | ....1....:\".. ..\n    8099107cf2163911 c600005d0bcd0f2c | ...|..9....]...,\n    3321f1fc3962c689 028221279a388203 | 3!..9b....!'.8..\n    0016580f1038a048 030c074261361b44 | ..X..8.H...Ba6.D\n    4903726138703720 f033113261373221 | I.ra8p7 .3.2a72!\n    3642213730300472 2136326128403320 | 6B!700.r!62a(@3 \n    4221387071411b44 7261364261384798 | B!8pqA.Dra6Ba8G.\n    d60ca78737317048 1190442000441140 | ....71pH..D .D.@\n    40314261280c1400 18400084a1460300 | @1Ba(....@...F..\n    4221274073904221 288a3342579072a3 | B!'@s.B!(.3BW.r.\n    ff37b7eb86200000 4221273070944077 | .7... ..B!'0p.@w\n    9042979056840022 579020422022c2fe | .B..V..\"W. B \"..\n    3039410c07060c00 3221373070047044 | 09A.....2!70p.pD\n    c072afff40473072 212770449042d409 | .r..@G0r!'pD.B..\n    426128429410cca4 4221282254102042 | Ba(B....B!(\"T. B\n    2022c2fe7221361b 7772613672213630 |  \"..r!6.wra6r!60\n    31413261377078c0 0cb33797ba722137 | 1A2a7px...7..r!7\n    7cf87030043034c0 30383042a4907221 | |.p0.04.080B..r!\n    2740338070339092 53001b9982212e87 | '@3.p3..S....!..\n    1902c6bcff92212d 26290286a700868d | ......!-&)......\n    000ce2d7b2028633 00c02ac0a6220286 | .......3....\"..\n    290021bbfce03094 71a4fc2a23702290 | ).!...0.q..#p\".\n    42120c0044114030 319693014049310c | B...D.@01...@I1.\n    1347bd010c030c02 0c17402793370202 | .G........@'.7..\n    062500860b000ca2 d7b22991aefc7cf8 | .%........)...|.\n    000240e040913038 c04040044a339a33 | ..@.@.08.@@.J3.3\n    70339032930cd6e3 061b422b22273d04 | p3.2......B+\"'=.\n    2d0486f6ffa73c24 060100005d0bcd0f | -.....<$....]...\n    7221250c22202710 1c0356f294460400 | r!%.\" '...V..F..\n    a7bfe81bcf220f00 5d0b060100220c00 | .....\"..]....\"..\n    1bcc001d400022a1 20ee208bdd0ce2d7 | ....@.\". . .....\n    320206d7ffc60700 00320c00420c018b | 2........2..B...\n    2d001d400033a100 12400024a1202320 | -..@.3...@.$. # \n    20ee202bccd2cd10 218afce030947172 |  . +....!...0.qr\n    fc2a237022903212 0c00331130203196 | .#p\".2...3.0 1.\n    8200303931202084 060a009182fc0ca4 | ..091  .........\n    7cf81b34000440e0 40912028c0404004 | |..4..@.@. (.@@.\n    4a229a2270229022 920cd662004d03c6 | J\".\"p\".\"...b.M..\n    f7ff000022612682 21260cf2000340e0 | ....\"a&.!&....@.\n    e09130ddc0873213 215cfc3166fc6a22 | ..0...2.!.1f.j\"\n    3a2282421c1b66c6 3b0000009221260c | :\".B..f.;....!&.\n    020c1342c9f07d02 4073836032933707 | ...B..}.@s.2.7.\n    121c086d02826126 c600005d0bcd0f1c | ...m..a&...]....\n    13065bff2165fc92 21269a2222c2f022 | ..[.!e..!&.\"\"..\"\n    020022612427bd3f a73c24c600005d0b | ..\"a$'.?.<$...].\n    cd0f7221250c2220 27101c2356d283c6 | ..r!%.\" '..#V...\n    040000a7bfe71bcf 220f005d0b460100 | ........\"..].F..\n    220c00c2cc018221 24001d400022a1d2 | \"......!$..@.\"..\n    cd0820ee20873dbf 2151fc8221269221 | .. . .=.!Q..!&.!\n    240c178a22001940 0077a122c2f02202 | $...\"..@.w.\"..\".\n    000b77e077102a77 213bfc412ffc2a26 | ..w.w.*w!;.A/.*&\n    4a22000940e0e091 90ddc022c21c0c03 | J\"..@......\"....\n    66b8093143fc6a44 3a4432041c4d0752 | f..1C.jD:D2..M.R\n    613462612f726132 a26133b261350155 | a4ba/ra2.a3.a5.U\n    fcc0000062212f72 21325221347a66a2 | ....b!/r!2R!4zf.\n    2133b22135460000 0c06711bfc422711 | !3.!5F....q..B'.\n    2227122a2427b602 466dff6792060602 | \"'.*$'..Fm.g....\n    005d0bcd0f1c5386 21ff312efc211ffc | .]....S.!.1..!..\n    52613462612fa261 33b2613572613201 | Ra4ba/.a3.a5ra2.\n    40fcc00000722132 2117fc3227114227 | @....r!2!..2'.B'\n    122a337a332114fc 32c31c0139fcc000 | .*3z3!..2...9...\n    00b22135a2213362 212f5221342102fc | ..!5.!3b!/R!4!..\n    38c20b3339c28100 fc28c8d662b58653 | 8..39....(..b..S\n    01c02ac0e642080c e3d7b31306360000 | ..*..B.......6..\n    9221295039c0a623 02064f00c6f9ff00 | .!)P9..#..O.....\n    a6220286280071f4 fbe0209470229042 | .\"..(.q... .p\".B\n    12bc004411403031 9693014049310c13 | ...D.@01...@I1..\n    47bd010c030c020c 1740279337020246 | G........@'.7..F\n    2500860b000ca2d7 b2297cf892a4b000 | %........)|.....\n    0240e040913038c0 4040044a339a3370 | .@.@.08.@@.J3.3p\n    339032930cd6f306 1b422b22273d042d | 3.2......B+\"'=.-\n    0486f6ffa73c25c6 00005d0bcd0f7221 | .....<%...]...r!\n    250c222027101c73 8c12c6a3fd460400 | %.\" '..s.....F..\n    a7bfe61bcf220f00 5d0b060100220c00 | .....\"..]....\"..\n    1bcc001d400022a1 20ee208bdd0ce2d7 | ....@.\". . .....\n    320206d8ffc60700 00320c00420c018b | 2........2..B...\n    2d001d400033a100 12400024a1202320 | -..@.3...@.$. # \n    e0e2202bccd2cd10 41c4fbe020944022 | .. +....A... .@\"\n    902212bc00221120 6031968600202931 | .\"...\".1... )1\n    6060848609000ca3 7cf782a4b01b2300 | ......|.....#.\n    0340e030916067c0 3030043a668a6640 | .@.0.`g.00.:f.f@\n    669062960cd64600 3d02c6f7ff000240 | f.b...F.=......@\n    e0e09120ddc022a0 ff67b20246490006 | ... ..\"..g..FI..\n    02001c83c6e4005d 0bcd0f82212987b5 | .......]....!)..\n    f06245001b5586fd 000ce9d73919320c | .bE..U......9.2.\n    01220c0080331120 2320001d400022a1 | .\"...3. # ..@.\".\n    20ee202bccd2cd10 32a0b0e02094419e |  . +....2... .A.\n    fb3a224022902212 0c00221120303120 | .:\"@\".\"...\". 01 \n    2931d6a3020ca41b 247cf6000440e040 | )1......$|...@.@\n    913036c04040044a 3372a4b09193fb7a | .06.@@.J3r.....z\n    3390339032930cd6 53004d02c6f5ff00 | 3.3.2...S.M.....\n    6d03000240e0e091 20ddc0870302c624 | m...@... ......$\n    000ce2d73219420c 01220c0080441120 | ....2.B..\"...D. \n    2420001d400022a1 20ee202bccd2cd10 | $ ..@.\". . +....\n    42a0b0e020947180 fb4a227022904212 | B... .q..J\"p\".B.\n    0c00441140903192 6127404931d6f902 | ..D.@.1.a'@I1...\n    0ca79221271b477c f2000740e0709190 | ...!'.G|...@.p..\n    22c07070047a2291 74fb72a4b07a2290 | \".pp.z\".t.r..z\".\n    229022920c226127 d642007d0446f4ff | \".\"..\"a'.B.}.F..\n    2221273245000004 40e0e09140ddc087 | \"!'2E...@...@...\n    02061b556d02c602 003221273245012b | ...Um....2!'2E.+\n    550667ff00606084 66f60246ba0022ae | U.g...f..F..\".\n    ff2a66217dfbe066 116a222802226124 | .f!}..f.j\"(.\"a$\n    217bfb6a62280662 212416260667bd44 | !{.jb(.b!$.&.g.D\n    6d02a7bc06460800 5d0bcd0f7221250c | m....F..]...r!%.\n    233037109ca31c93 4620fd0000a7bfe7 | #07.....F ......\n    1bcf320f005d0bc6 0100320c001bcc46 | ..2..]....2....F\n    00002d0682212400 1d400033a18bdd30 | ..-..!$..@.3...0\n    ee20873dba922124 0c130019400033a1 | . .=..!$....@.3.\n    0b33e0331090ddc0 000940e0e0913a22 | .3.3......@...:\"\n    0ce3d7b302c63400 c03ac0a62302c62a | ......4..:..#..\n    00713dfbe0309470 339032d30f62130c | .q=..0.p3.2..b..\n    00661160403196a4 016069310c1467bd | .f.@1...i1..g.\n    0242a0000c030c17 6037934703028626 | .B......7.G...&\n    00c60b000ca3d7b3 2a914dfb7cf80003 | ........*.M.|...\n    40e060914048c060 60046a449a447044 | @..@H..jD.DpD\n    9042940cd644071b 632b33373d053d06 | .B...D..c+37=.=.\n    86f6ff006d02a7bc 06c607005d0bcd0f | ....m.......]...\n    7221250c23303710 9c831ca346ebfca7 | r!%.#07.....F...\n    bfe91bcf320f005d 0bc60100320c001b | ....2..]....2...\n    cc4600002d06001d 400033a130ee208b | .F..-...@.3.0. .\n    dd0ce3d73302c6d5 ffc6070000320c00 | ....3........2..\n    620c018b4d001d40 0033a10014400046 | b...M..@.3...@.F\n    a140332030ee202b ccd2cd10710bfbe0 | .@3 0. +....q...\n    309470339032d30f 42130c0044114030 | 0.p3.2..B...D.@0\n    3196830040493130 30848609009120fb | 1...@I100..... .\n    0ca67cf81b460006 40e060913038c060 | ..|..F..@.`.08.`\n    60046a339a337033 9032930cd643006d | `.j3.3p3.2...C.m\n    04c6f7ff000440e0 e09140ddc04115fb | ......@...@..A..\n    e033113a44480442 61244113fb822124 | .3.:DH.Ba$A...!$\n    3a34380332612616 680687bd426d02a7 | :48.2a&.h...Bm..\n    bc06c607005d0bcd 0f9221250c233039 | .....]....!%.#09\n    109c831cb306b5fc a7bfe91bcf320f00 | .............2..\n    5d0bc60100320c00 1bcc4600002d0662 | ]....2....F..-.b\n    2124001d400033a1 8bdd30ee20673dbc | !$..@.3...0. g=.\n    7221240c13001740 0033a18221260b33 | r!$....@.3..!&.3\n    e033103a88000740 e0e09170ddc08261 | .3.:...@...p...a\n    2691ddfa62212690 95c072212c41dafa | &...b!&...r!,A..\n    6039c07033104a33 92612a30432057b3 | `9.p3.J3.a*0C W.\n    025045208221292a 44473845c6120021 | .PE .!)*DG8E...!\n    cafa2c533962c660 003c5321c7fa0c24 | ..,S9b.`.<S!...$\n    3962465f005d0bcd 0f92212997b5e972 | 9bF_.]....!)...r\n    212a82212692212c 8027c031c7fa9022 | !*.!&.!,.'.1...\"\n    102a232202001b77 22450072612a1b55 | .*#\"...w\"E.ra*.U\n    2d060b625612fd46 0d000042030062c2 | -..bV..F...B..b.\n    fd42450042030142 45014203023b3342 | .BE.B..BE.B..;3B\n    45023b55a636042d 0686f7ffa6161022 | E.;U.6.-.......\"\n    0300224500662605 2203012245016a55 | ..\"E.f&.\"..\"E.jU\n    82a10086aafe0000 21a8fa28b207e202 | ........!..(....\n    066cfcd0202427bd 3da73c2706010000 | .l.. $'.=.<'....\n    5d0bcd0f7221250c 222027102c038c12 | ]...r!%.\" '.,...\n    466afc86040000a7 bfe51bcf220f005d | Fj..........\"..]\n    0b060100220c001b cc001d400022a120 | ....\"......@.\". \n    ee208bddc6eeffd0 2024000240e0e091 | . ...... $..@...\n    7c8220dd100c0616 dd04f68d3ea73c27 | |. .........>.<'\n    060100005d0bcd0f 8221250c22202810 | ....]....!%.\" (.\n    2c938c124655fc86 040000a7bfe51bcf | ,...FU..........\n    220f005d0b060100 220c001bcc001d40 | \"..]....\"......@\n    0022a120ee208bdd 86efff00e02074d2 | .\". . ....... t.\n    cdf8e0e841460b00 a73c25c600005d0b | ....AF...<%...].\n    cd0f9221250c2220 29102ca38c12c642 | ...!%.\" ).,....B\n    fc460400a7bfe61b cf220f005d0b0601 | .F.......\"..]...\n    00220c001bcc3170 fa1b6648a3804411 | .\"....1p..fH..D.\n    40222029a3f64607 c6daff005d0bcd0f | @\" )..F.....]...\n    216afa2c2339620c 04860100005d0bcd | !j.,#9b......]..\n    0f7cf42165fa7221 2682212492212ad9 | .|.!e.r!&.!$.!*.\n    72e2621479e269f2 8262109262157cfe | r.b.y.i..b..b.|.\n    f0dcc0b0c5c0e794 02c6400058d2317b | ..........@.X.1{\n    fa50e0f42d0c5050 f5426130526134b2 | .P..-.PP.Ba0Ra4.\n    61350186fac00000 7d028d0c0c794221 | a5......}....yB!\n    30522134b2213506 2800a20300eaeaa2 | 0R!4.!5.(.......\n    03015a5eaaeea203 02ea55aaeea20303 | ..Z^......U.....\n    ea55aaeea20304ea 55aaeea20305ea55 | .U......U......U\n    aaeea20306ea55aa eea20307ea55aaee | ......U......U..\n    ea558b332aa3773a c0702341b022b0b0 | .U.3*.w:.p#A.\"..\n    a060060200320200 1b223aeeea552a3a | .`...2...\":..U*:\n    20b2207733ee315a fae02e2042613072 |  . w3.1Z... Ba0r\n    613282613192612f b261355261340163 | a2.a1.a/.a5Ra4.c\n    fac0000052213431 52faed022d05015f | ....R!41R...-.._\n    fac0000072213282 2131b221357088c0 | ....r!2.!1.!5p..\n    92212f714afa4221 305d028c683d0bb0 | .!/qJ.B!0]..h=..\n    29c086e3ff005511 2124faea5559d2ed | ).....U.!$..UY..\n    04dcb4e8a27ce2e0 e5c0e08293ed0846 | .....|.........F\n    03000c0c06010000 0000cd05dd0c7cde | ..............|.\n    313dfa62212b2823 d066c0d022c0daff | 1=.b!+(#.f..\"...\n    d11cfa2923380d71 1cfacac3703cc00c | ...)#8.q....p<..\nTRACE +0.025 Write 6269 bytes: \n    c000071018ed0000 0000180000000000 | ................\n    0000000000000000 00a810004001ffff | ............@...\n    46450000000080fe 3f4f484149a4abff | FE......?OHAI...\n    3f0cabfe3f808000 00e8f910400c0000 | ?...?.......@...\n    6000000001000001 0000100000ffff00 | `...............\n    008c800000104000 000000ffff004000 | ......@.......@.\n    000080fe3f9c2bff 3fa02bff3f102700 | ....?.+.?.+.?.'.\n    0014000060ffff0f 00a4abff3fa4abff | ....`.......?...\n    3fa42bff3fb4abff 3f00800000202900 | ?.+.?...?.... ).\n    00f88dfe3f5880fe 3fa8abff3f98aeff | ....?X..?...?...\n    3f989bfe3f84aeff 3f801b0000a00d00 | ?...?...?.......\n    0000080000200900 00500e0000501200 | ..... ...P...P..\n    00acabff3fb0abff 3f1f2900003ca9fe | ....?...?.)..<..\n    3f08aeff3f8cadff 3f800b00000cadff | ?...?...?.......\n    3f8cacff3fb01500 00f1ff000000abfe | ?...?...........\n    3f00a9fe3fbc0f00 40880f0040a80f00 | ?...?...@...@...\n    40583f00402c4c00 40303b0040784800 | @X?.@,L.@0;.@xH.\n    40004a0040b44900 40cc2e00401ce200 | @.J.@.I.@...@...\n    40d839004068e200 4048df004090e100 | @.9.@h..@H..@...\n    404c260040844900 4021bcff92a11090 | @L&.@.I.@!......\n    11dbdc22612322a0 00026143c26142d2 | ...\"a#\"...aC.aB.\n    6141e26140f2613f 01e7ffdbdc000021 | aA.a@.a?.......!\n    b2ff31b3ff0c0406 01000049024b2237 | ..1........I.K\"7\n    32f822a08c2a210c 4345b30121aeffc1 | 2.\"..*!.CE..!...\n    adff31aeff2a2cdb dc2000c90242a000 | ..1..*,.. ...B..\n    22a00501daffdbdc 000021a9ff32a101 | \".........!..2..\n    dbdc200048023034 20dbdc200039022c | .. .H.04 .. .9.,\n    0201d4ffdbdc0000 01d4ffdbdc000031 | ...............1\n    a2ff41a2ff51a3ff 71a3ff0c0262a100 | ..A..Q..q....b..\n    01cfffdbdc000021 a0ff3198ff2a23db | .......!..1..*#.\n    dc200038021673ff dbdc2000c8020c03 | . .8..s... .....\n    dbdc200039020c12 224184220c010c24 | .. .9...\"A.\"...$\n    2241854251433261 222692081c333712 | \"A.BQC2a\"&...37.\n    1f86080000220c03 320c028022113022 | .....\"..2...\".0\"\n    20664212282cdbdc 2000280222612246 |  fB.(,.. .(.\"a\"F\n    010022a012225143 22a0dbdc01b6ffdb | ..\"..\"QC\".......\n    dc000022a0841022 8032a00845a401f2 | ...\"...\".2..E...\n    0c03220c0280ff11 20ff202182fff7b2 | ..\"..... . !....\n    17059e0122a0ee01 acffdbdc000022a0 | ....\".........\".\n    dbdc01aaffdbdc00 00c6d8ff320c010c | ............2...\n    d2279302c6850037 3251666302869e00 | .'.....72Qfc....\n    f67323663302465d 00f6430a66230286 | .s#f3.F]..C.f#..\n    4c00069d00000066 4302467100665302 | L......fC.Fq.fS.\n    c68300c69800000c 92279302067a0037 | .........'...z.7\n    3208667302c68000 8693006693024678 | 2.fs.......f..Fx\n    000cb2279302466d 00468f001c322793 | ...'..Fm.F...2'.\n    02c6390037322866 b3028640001c0237 | ..9.72(f...@...7\n    320a0cf227930206 2e000687001c1227 | 2...'..........'\n    93024642001c2227 9302465900468200 | ..FB..\"'..FY.F..\n    22a0d127132c3732 0922a0d0271318c6 | \"..'.,72.\"..'...\n    7d000022a0d22793 0286250022a0d327 | }..\"..'...%.\"..'\n    9302869605467800 0c1dcc1f86600506 | .....Fx......`..\n    740000668f024661 05067100000174ff | t..f..Fa..q...t.\n    dbdc0000eaed9c12 866d0000202c4101 | .........m.. ,A.\n    71ffdbdc00005692 1ad2ddf0d02edbdc | q.....V.........\n    8c4d2030f45653fe daf2e138ff060400 | .M 0.VS....8....\n    00002020f50169ff dbdc0000565218e0 | ..  ..i.....VR..\n    dddbdcd02fdbdcd7 3eeadae206040000 | ..../...>.......\n    00202c410161ffdb dc0000569216d2dd | . ,A.a.....V....\n    f0d02edbdc56adfe c657000c0ed2a0db | .....V...W......\n    dc268f0246580086 6605000066bf0286 | .&..FX..f...f...\n    6405063b0066bf02 864305c64e000c1d | d..;.f...C..N...\n    26bf02464d00384c 2124ff0c0ed2a0c2 | &..FM.8L!$......\n    271302864c00463f 050c1466bf12384c | '...L.F?...f..8L\n    211eff0c0ed2a0c2 271302864600c63e | !.......'...F..>\n    05dd044641000000 2119ff0c0e320200 | ...FA...!....2..\n    d2a0c6e79302c63f 00382cd852f2cff0 | .......?.8,.R...\n    f033dbdc22a0dbdc 30d29332cc1822a0 | .3..\"...0..2..\".\n    ef460200ea434204 001bee402230f72e | .F...CB....@\"0..\n    f2520c05620c0442 0c06805511320c07 | .R..b..B...U.2..\n    6055200044115044 2080330140332030 | `U .D.PD .3.@3 0\n    22dbdc32a0c10c0e 20d393462b000021 | \"..2.... ..F+..!\n    00ffd2a0c6320200 1633093832d2a0c8 | .....2...3.82...\n    56b308324200d852 c620001c82279f02 | V..2B..R. ...'..\n    4624050c0e0c1d46 200000664f024628 | F$.....F ..fO.F(\n    05061a0066bf0206 2905c60100000066 | ....f...)......f\n    4f028628050c0ed2 a0dbdc8617000000 | O..(............\n    66bf024626050611 0041eafef2cff078 | f..F&....A.....x\n    04cc37d2a0c6fc6f 31e8fed2a0c96803 | ..7....o1.....h.\n    f7362cf02014d2a0 dbdc92cc188c9286 | .6,. ...........\n    07002a8988084b22 89052a572086dbdc | ..*...K\"..*W ...\n    f732ef5904890346 1005668f02861805 | .2.Y...F..f.....\n    0c1d0c0ec6010000 00e2a000d2a0ffd0 | ................\n    2074057401e02074 c5730122a0dbdc01 |  t.t.. t.s.\"....\n    fbfedbdc0000567d ca220c0132a00f37 | ......V}.\"..2..7\n    1231273314664202 06d204666202c6d6 | .1'3.fB....fb...\n    042632024622ff46 1a001c2337920246 | .&2.F\".F...#7..F\n    cc0432a0d2371249 1c13371202061cff | ..2..7.I..7.....\n    c61a000021c3fe01 edfedbdc000021c1 | ....!.........!.\n    fedbdc2000380221 dbdcfe203310222c | ... .8.!... 3.\",\n    03202382322c0201 e7fedbdc00003d02 | . #.2,........=.\n    2d0d01e5fedbdc00 0022a3e801e1fedb | -........\"......\n    dc0000060cff0000 222c02322c03422c | ........\",.2,.B,\n    04585c8576014607 ff00320c03220c02 | .X\\.v.F...2..\"..\n    80331120332032c3 f022cc18455b0106 | .3. 3 2..\"..E[..\n    01ff000000220c03 320c028022113022 | .....\"..2...\".0\"\n    2022c2f0f2cc1822 612b0c1e86950421 |  \".....\"a+.....!\n    a4fe41c1feb22200 d1a3fe62a0032224 | ..A...\"....b..\"$\n    0272212b626125b0 dddbdc2737040c18 | .r!+ba%....'7...\n    826125b26135054d 01b22135719bfe92 | .a%.a5.M..!5q...\n    212b704bdbdcda44 0b84da6b62612982 | !+pK...D...kba).\n    612c4058109aaf8c 15466e0477bb02c6 | a,@X.....Fn.w...\n    6e0498ec722c1082 2c15286c92612672 | n...r,..,.(l.a&r\n    612482612a3c53d8 7ce22c1468fc27b3 | a$.a*<S.|.,.h.'.\n    02061b04318bfe30 22a02802a0020021 | ....1..0\".(....!\n    7ffe0c0e0c13e992 e98239d239a2a73f | ..........9.9..?\n    3ae261246d0ee261 26e0de209221250c | :.a$m..a&.. .!%.\n    233039102176fe9c 930c1449625d0bcd | #09.!v.....Ib]..\n    0f860c04a7bfe432 0f002170fe1bcf39 | .......2..!p...9\n    820606003982cd0f 46040000320f001b | ....9...F...2...\n    cf3982e261246d0e e26126dd0ea73c2c | .9..a$m..a&...<,\n    86000000cd0f7221 250c255037102163 | ......r!%.%P7.!c\n    fe9c0359625d0bc6 2e00a7bfe6320f00 | ...Yb].......2..\n    215ffe1bcf399206 0300000000320c00 | !_...9.......2..\n    215bfe1bcc399221 59fe1cf358826892 | ![...9.!Y...X.h.\n    8025116a22426130 52613462612fa261 | .%.j\"Ba0Ra4ba/.a\n    33b261350183fedb dc00000c13422130 | 3.a5.........B!0\n    52213462212fa221 33b22135cce22c02 | R!4b!/.!3.!5..,.\n    206610cc76502034 22c2f82036835054 |  f..vP 4\".. 6.PT\n    418b550c127150fe 0015400062a16737 | A.U..qP...@.b.g7\n    0f0005404040910c 064062833066209c | ...@@@...@b.0f .\n    460c16460000cd0f 213dfe2c4339625d | F..F....!=.,C9b]\n    0b46d4030000005d 0bf63d3fa73c29c6 | .F.....]..=?.<).\n    00005d0bcd0f8221 250c222028109cc2 | ..]....!%.\" (...\n    0c332132fe39620c 14c6ca03a7bfe21b | .3!2.9b.........\n    cf220f005d0b0601 00220c001bcc001d | .\"..]....\"......\n    400022a120ee208b dd06efff7128fee0 | @.\". . .....q(..\n    202429b720214129 c7e0e341d2cdfd56 |  $). !A)...A...V\n    2223d0202427bd3c a73c25c600005d0b | \"#. $'.<.<%...].\n    cd0f9221250c2220 29100c535622fac6 | ...!%.\" )..SV\"..\n    04000000a7bfe61b cf220f005d0b0601 | .........\"..]...\n    00220c001bcc001d 400022a120ee208b | .\"......@.\". . .\n    dd46efff00d02024 000240e0e0917c82 | .F.... $..@...|.\n    20dd100c06164d05 f68d39a73c23c600 |  .....M...9.<#..\n    005d0bcd0f722125 0c222027100c6356 | .]...r!%.\" '..cV\n    f2f4460400a7bfe8 1bcf220f005d0b06 | ..F.......\"..]..\n    0100220c001bcc00 1d400022a120ee20 | ..\"......@.\". . \n    8bdd86f0ff21fefd 3108fe6a223a22e2 | .....!..1..j\":\".\n    4218d2cdf8e0e841 0616000000a73c41 | B......A......<A\n    c600005d0bcd0f82 21250c2220281031 | ...]....!%.\" (.1\n    f3fd9cf20c722963 c6beffa7bfe421ef | .....r)c......!.\n    fd41fafd320f006a 224a221bcf324218 | .A..2..j\"J\"..2B.\n    5d0b86070041f5fd 6a334a3322431846 | ]....A..j3J3\"C.F\n    040021e6fd41f1fd 320c006a224a2232 | ..!..A..2..j\"J\"2\n    42181bcc1b66f646 0206d2ff9104fe62 | B....f.F.......b\n    0939220938806611 20662022093b3209 | .9\".8.f. f \".;2.\n    3a80221130222031 d4fd302230279606 | :.\".0\" 1..0\"0'..\n    861c005d0bcd0f2c 7346e20000f68d3c | ...]...,sF.....<\n    a73c25c600005d0b cd0f7221250c2220 | .<%...]...r!%.\" \n    27103c3356a2e6c6 04000000a7bfe61b | '.<3V...........\n    cf220f005d0b0601 00220c001bcc001d | .\"..]....\"......\n    400022a120ee208b dd06f0ff00e08074 | @.\". . ........t\n    826126e0e841d2cd f8460200003c4346 | .a&..A...F...<CF\n    f7025d0bcd0f9221 2997b5f07221260b | ..]....!)...r!&.\n    667245001b550c02 0c134d02d0439360 | frE..U....M..C.`\n    2393278487861d00 0c9386ec025d0bcd | #.'..........]..\n    0f82212987b5f046 07009221250c222c | ..!)...F...!%.\",\n    63270902867affc6 00005d0bcd0f2c83 | c'...z....]...,.\n    86b800005d0bcd0f a7bcde7221295027 | ....]......r!)P'\n    dbdcdbdc7adbdc77 b2017d0277b6017d | ....z..w..}.w..}\n    062d053d0c4d0752 613462612f726132 | .-.=.M.Ra4ba/ra2\n    a26133b2613501d0 fddbdc0000722132 | .a3.a5.......r!2\n    52213462212fb221 35a221337acc7a55 | R!4b!/.!5.!3z.zU\n    7066dbdc56e6f8c6 ed0266320d460100 | pf..V.....f2.F..\n    00005d0bcd0f0ca3 c69f002612028621 | ..]........&...!\n    0022a1202267112c 04219afd42671232 | .\". \"g.,.!..Bg.2\n    a00552613462612f 726132a26133b261 | ..Ra4ba/ra2.a3.a\n    3501bbfddbdc0000 72213222a0e82a77 | 5.......r!2\"..*w\n    3191fdb22135a221 3362212f5221342d | 1...!5.!3b!/R!4-\n    0742a0084243001b 337793f732c2708d | .B..BC..3w..2.p.\n    030c944242001b22 3792f722a10032a1 | ...BB..\"7..\"..2.\n    180c74c601000042 48001b221b883792 | ..t....BH..\"..7.\n    f532aee83a880c87 32a11f2a48724400 | .2..:...2..*HrD.\n    1b2227b3f5066e01 000c06217cfd6a22 | .\"'...n....!|.j\"\n    22020027bd3ca73c 25c600005d0bcd0f | \"..'.<.<%...]...\n    8221250c22202810 0cb356a2ccc60400 | .!%.\" (...V.....\n    a7bfe81bcf220f00 5d0b860100000022 | .....\"..]......\"\n    0c001bcc001d4000 22a120ee208bdd06 | ......@.\". . ...\n    eeff00216afd0c13 6a222202004168fd | ...!j...j\"\"..Ah.\n    0012400033a14046 a00b33e0331020dd | ..@.3.@F..3.3. .\n    dbdc000240e0e091 48042152fd4a3320 | ....@...H.!R.J3 \n    26a03262111b66b6 3681215efd0c0342 | &.2b..f.6.!^...B\n    a120526134a26133 b26135017dfddbdc | . Ra4.a3.a5.}...\n    00000c06522134a2 2133b22135061800 | ....R!4.!3.!5...\n    00f63d3ca73c25c6 00005d0bcd0f9221 | ..=<.<%...]....!\n    250c222029100ce3 56e2c2c604000000 | %.\" )...V.......\n    a7bfe61bcf220f00 5d0b060100220c00 | .....\"..]....\"..\n    1bcc001d400022a1 20ee208bdd06f0ff | ....@.\". . .....\n    002146fd4134fd6a 22220200e030242a | .!F.A4.j\"\"...0$*\n    244143fdd2cdfd4a 22324218e0e3411b | $AC....J\"2B...A.\n    66212dfd32221337 36961c3332621306 | f!-.2\".76..32b..\n    2801713bfd0c0370 728242a040707880 | (.q;...pr.B.@px.\n    72c75822c1445261 3462612f826131a2 | r.X\".DRa4ba/.a1.\n    6133b26135726127 0152fddbdc000072 | a3.a5ra'.R.....r\n    21274131fd22a120 2a2732a000014dfd | !'A1.\". *'2...M.\n    dbdc0000212dfd92 21270c032a2942a4 | ....!-..!'..*)B.\n    800148fddbdc0000 82213152213428c8 | ..H......!1R!4(.\n    62212f8082a08228 1122612d82612e0c | b!/....(.\"a-.a..\n    02a22133b2213586 050000007221272a | ..!3.!5.....r!'*\n    373203001b221033 a04223111b444263 | 72...\".3.B#..DBc\n    1182212e8792e40c 02291129014d020c | ..!......).).M..\n    13e0831172c1448a 9798098a819a22f0 | ....r.D.......\".\n    22111b3329189a44 66b3e582a001f624 | \"..3)..Df......$\n    0282a00031f7fc0c 093a220c13209393 | ....1....:\".. ..\n    8099107cf2163911 c600005d0bcd0f2c | ...|..9....]...,\n    3321f1fc3962c689 028221279a388203 | 3!..9b....!'.8..\n    0016580f1038a048 030c074261361b44 | ..X..8.H...Ba6.D\n    4903726138703720 f033113261373221 | I.ra8p7 .3.2a72!\n    3642213730300472 2136326128403320 | 6B!700.r!62a(@3 \n    4221387071411b44 7261364261384798 | B!8pqA.Dra6Ba8G.\n    d60ca78737317048 1190442000441140 | ....71pH..D .D.@\n    40314261280c1400 18400084a1460300 | @1Ba(....@...F..\n    4221274073904221 288a3342579072a3 | B!'@s.B!(.3BW.r.\n    ff37b7eb86200000 4221273070944077 | .7... ..B!'0p.@w\n    9042979056840022 579020422022c2fe | .B..V..\"W. B \"..\n    3039410c07060c00 3221373070047044 | 09A.....2!70p.pD\n    dbdc72afff404730 72212770449042d4 | ..r..@G0r!'pD.B.\n    09426128429410cc a442212822541020 | .Ba(B....B!(\"T. \n    422022c2fe722136 1b77726136722136 | B \"..r!6.wra6r!6\n    3031413261377078 dbdc0cb33797ba72 | 01A2a7px....7..r\n    21377cf870300430 34dbdc30383042a4 | !7|.p0.04..080B.\n    9072212740338070 33909253001b9982 | .r!'@3.p3..S....\n    212e871902c6bcff 92212d26290286a7 | !........!-&)...\n    00868d000ce2d7b2 02863300dbdc2adb | ..........3...*.\n    dca6220286290021 bbfce0309471a4fc | ..\"..).!...0.q..\n    2a2370229042120c 0044114030319693 | *#p\".B...D.@01..\n    014049310c1347bd 010c030c020c1740 | .@I1..G........@\n    2793370202062500 860b000ca2d7b229 | '.7...%........)\n    91aefc7cf8000240 e040913038dbdc40 | ...|...@.@.08..@\n    40044a339a337033 9032930cd6e3061b | @.J3.3p3.2......\n    422b22273d042d04 86f6ffa73c240601 | B+\"'=.-.....<$..\n    00005d0bcd0f7221 250c222027101c03 | ..]...r!%.\" '...\n    56f294460400a7bf e81bcf220f005d0b | V..F.......\"..].\n    060100220c001bcc 001d400022a120ee | ...\"......@.\". .\n    208bdd0ce2d73202 06d7ffc607000032 |  .....2........2\n    0c00420c018b2d00 1d400033a1001240 | ..B...-..@.3...@\n    0024a120232020ee 202bccd2cd10218a | .$. #  . +....!.\n    fce030947172fc2a 2370229032120c00 | ..0.qr.*#p\".2...\n    3311302031968200 303931202084060a | 3.0 1...091  ...\n    009182fc0ca47cf8 1b34000440e04091 | ......|..4..@.@.\n    2028dbdc4040044a 229a227022902292 |  (..@@.J\".\"p\".\".\n    0cd662004d03c6f7 ff00002261268221 | ..b.M......\"a&.!\n    260cf2000340e0e0 9130dddbdc873213 | &....@...0....2.\n    215cfc3166fc6a22 3a2282421c1b66c6 | !\\.1f.j\":\".B..f.\n    3b0000009221260c 020c1342c9f07d02 | ;....!&....B..}.\n    4073836032933707 121c086d02826126 | @s.`2.7....m..a&\n    c600005d0bcd0f1c 13065bff2165fc92 | ...]......[.!e..\n    21269a2222c2f022 020022612427bd3f | !&.\"\"..\"..\"a$'.?\n    a73c24c600005d0b cd0f7221250c2220 | .<$...]...r!%.\" \n    27101c2356d283c6 040000a7bfe71bcf | '..#V...........\n    220f005d0b460100 220c00c2cc018221 | \"..].F..\"......!\n    24001d400022a1d2 cd0820ee20873dbf | $..@.\".... . .=.\n    2151fc8221269221 240c178a22001940 | !Q..!&.!$...\"..@\n    0077a122c2f02202 000b77e077102a77 | .w.\"..\"...w.w.*w\n    213bfc412ffc2a26 4a22000940e0e091 | !;.A/.*&J\"..@...\n    90dddbdc22c21c0c 0366b8093143fc6a | ....\"....f..1C.j\n    443a4432041c4d07 52613462612f7261 | D:D2..M.Ra4ba/ra\n    32a26133b2613501 55fcdbdc00006221 | 2.a3.a5.U.....b!\n    2f7221325221347a 66a22133b2213546 | /r!2R!4zf.!3.!5F\n    00000c06711bfc42 27112227122a2427 | ....q..B'.\"'.*$'\n    b602466dff679206 0602005d0bcd0f1c | ..Fm.g.....]....\n    538621ff312efc21 1ffc52613462612f | S.!.1..!..Ra4ba/\n    a26133b261357261 320140fcdbdc0000 | .a3.a5ra2.@.....\n    7221322117fc3227 114227122a337a33 | r!2!..2'.B'.*3z3\n    2114fc32c31c0139 fcdbdc0000b22135 | !..2...9......!5\n    a2213362212f5221 342102fc38c20b33 | .!3b!/R!4!..8..3\n    39c28100fc28c8d6 62b5865301dbdc2a | 9....(..b..S...*\n    dbdce642080ce3d7 b313063600009221 | ...B.......6...!\n    295039dbdca62302 064f00c6f9ff00a6 | )P9...#..O......\n    220286280071f4fb e020947022904212 | \"..(.q... .p\".B.\n    bc00441140303196 93014049310c1347 | ..D.@01...@I1..G\n    bd010c030c020c17 4027933702024625 | ........@'.7..F%\n    00860b000ca2d7b2 297cf892a4b00002 | ........)|......\n    40e040913038dbdc 4040044a339a3370 | @.@.08..@@.J3.3p\n    339032930cd6f306 1b422b22273d042d | 3.2......B+\"'=.-\n    0486f6ffa73c25c6 00005d0bcd0f7221 | .....<%...]...r!\n    250c222027101c73 8c12c6a3fd460400 | %.\" '..s.....F..\n    a7bfe61bcf220f00 5d0b060100220c00 | .....\"..]....\"..\n    1bcc001d400022a1 20ee208bdd0ce2d7 | ....@.\". . .....\n    320206d8ffc60700 00320c00420c018b | 2........2..B...\n    2d001d400033a100 12400024a1202320 | -..@.3...@.$. # \n    e0e2202bccd2cd10 41c4fbe020944022 | .. +....A... .@\"\n    902212bc00221120 6031968600202931 | .\"...\". `1... )1\n    6060848609000ca3 7cf782a4b01b2300 |......|.....#.\n    0340e030916067db dc3030043a668a66 | .@.0.g..00.:f.f\n    40669062960cd646 003d02c6f7ff0002 | @f.b...F.=......\n    40e0e09120dddbdc 22a0ff67b2024649 | @... ...\"..g..FI\n    000602001c83c6e4 005d0bcd0f822129 | .........]....!)\n    87b5f06245001b55 86fd000ce9d73919 | ...bE..U......9.\n    320c01220c008033 11202320001d4000 | 2..\"...3. # ..@.\n    22a120ee202bccd2 cd1032a0b0e02094 | \". . +....2... .\n    419efb3a22402290 22120c0022112030 | A..:\"@\".\"...\". 0\n    31202931d6a3020c a41b247cf6000440 | 1 )1......$|...@\n    e040913036dbdc40 40044a3372a4b091 | .@.06..@@.J3r...\n    93fb7a3390339032 930cd653004d02c6 | ..z3.3.2...S.M..\n    f5ff006d03000240 e0e09120dddbdc87 | ...m...@... ....\n    0302c624000ce2d7 3219420c01220c00 | ...$....2.B..\"..\n    804411202420001d 400022a120ee202b | .D. $ ..@.\". . +\n    ccd2cd1042a0b0e0 20947180fb4a2270 | ....B... .q..J\"p\n    229042120c004411 4090319261274049 | \".B...D.@.1.a'@I\n    31d6f9020ca79221 271b477cf2000740 | 1......!'.G|...@\n    e070919022dbdc70 70047a229174fb72 | .p..\"..pp.z\".t.r\n    a4b07a2290229022 920c226127d64200 | ..z\".\".\"..\"a'.B.\n    7d0446f4ff222127 324500000440e0e0 | }.F..\"!'2E...@..\n    9140dddbdc870206 1b556d02c6020032 | .@.......Um....2\n    21273245012b5506 67ff0060608466f6 | !'2E.+U.g..``.f.\n    0246ba0022aeff2a 66217dfbe066116a | .F..\"..*f!}..f.j\n    222802226124217b fb6a622806622124 | \"(.\"a$!{.jb(.b!$\n    16260667bd446d02 a7bc064608005d0b | .&.g.Dm....F..].\n    cd0f7221250c2330 37109ca31c934620 | ..r!%.#07.....F \n    fd0000a7bfe71bcf 320f005d0bc60100 | ........2..]....\n    320c001bcc460000 2d06822124001d40 | 2....F..-..!$..@\n    0033a18bdd30ee20 873dba9221240c13 | .3...0. .=..!$..\n    0019400033a10b33 e0331090dddbdc00 | ..@.3..3.3......\n    0940e0e0913a220c e3d7b302c63400db | .@...:\"......4..\n    dc3adbdca62302c6 2a00713dfbe03094 | .:...#..*.q=..0.\n    70339032d30f6213 0c00661160403196 | p3.2..b...f.@1.\n    a4016069310c1467 bd0242a0000c030c | ..i1..g..B.....\n    1760379347030286 2600c60b000ca3d7 | .7.G...&.......\n    b32a914dfb7cf800 0340e060914048db | ..M.|...@..@H.\n    dc6060046a449a44 70449042940cd644 | .``.jD.DpD.B...D\n    071b632b33373d05 3d0686f6ff006d02 | ..c+37=.=.....m.\n    a7bc06c607005d0b cd0f7221250c2330 | ......]...r!%.#0\n    37109c831ca346eb fca7bfe91bcf320f | 7.....F.......2.\n    005d0bc60100320c 001bcc4600002d06 | .]....2....F..-.\n    001d400033a130ee 208bdd0ce3d73302 | ..@.3.0. .....3.\n    c6d5ffc607000032 0c00620c018b4d00 | .......2..b...M.\n    1d400033a1001440 0046a140332030ee | .@.3...@.F.@3 0.\n    202bccd2cd10710b fbe0309470339032 |  +....q...0.p3.2\n    d30f42130c004411 4030319683004049 | ..B...D.@01...@I\n    3130308486090091 20fb0ca67cf81b46 | 100..... ...|..F\n    000640e060913038 dbdc6060046a339a | ..@..08..`.j3.\n    3370339032930cd6 43006d04c6f7ff00 | 3p3.2...C.m.....\n    0440e0e09140dddb dc4115fbe033113a | .@...@...A...3.:\n    4448044261244113 fb8221243a343803 | DH.Ba$A...!$:48.\n    32612616680687bd 426d02a7bc06c607 | 2a&.h...Bm......\n    005d0bcd0f922125 0c233039109c831c | .]....!%.#09....\n    b306b5fca7bfe91b cf320f005d0bc601 | .........2..]...\n    00320c001bcc4600 002d06622124001d | .2....F..-.b!$..\n    400033a18bdd30ee 20673dbc7221240c | @.3...0. g=.r!$.\n    130017400033a182 21260b33e033103a | ...@.3..!&.3.3.:\n    88000740e0e09170 dddbdc82612691dd | ...@...p....a&..\n    fa6221269095dbdc 72212c41dafa6039 | .b!&....r!,A..9\n    dbdc7033104a3392 612a30432057b302 | ..p3.J3.a0C W..\n    5045208221292a44 473845c6120021ca | PE .!)DG8E...!.\n    fa2c533962c66000 3c5321c7fa0c2439 | .,S9b..<S!...$9\n    62465f005d0bcd0f 92212997b5e97221 | bF_.]....!)...r!\n    2a82212692212c80 27dbdc31c7fa9022 | *.!&.!,.'..1...\"\n    102a232202001b77 22450072612a1b55 | .*#\"...w\"E.ra*.U\n    2d060b625612fd46 0d000042030062c2 | -..bV..F...B..b.\n    fd42450042030142 45014203023b3342 | .BE.B..BE.B..;3B\n    45023b55a636042d 0686f7ffa6161022 | E.;U.6.-.......\"\n    0300224500662605 2203012245016a55 | ..\"E.f&.\"..\"E.jU\n    82a10086aafe0000 21a8fa28b207e202 | ........!..(....\n    066cfcd0202427bd 3da73c2706010000 | .l.. $'.=.<'....\n    5d0bcd0f7221250c 222027102c038c12 | ]...r!%.\" '.,...\n    466afc86040000a7 bfe51bcf220f005d | Fj..........\"..]\n    0b060100220c001b cc001d400022a120 | ....\"......@.\". \n    ee208bddc6eeffd0 2024000240e0e091 | . ...... $..@...\n    7c8220dd100c0616 dd04f68d3ea73c27 | |. .........>.<'\n    060100005d0bcd0f 8221250c22202810 | ....]....!%.\" (.\n    2c938c124655fc86 040000a7bfe51bcf | ,...FU..........\n    220f005d0b060100 220c001bcc001d40 | \"..]....\"......@\n    0022a120ee208bdd 86efff00e02074d2 | .\". . ....... t.\n    cdf8e0e841460b00 a73c25c600005d0b | ....AF...<%...].\n    cd0f9221250c2220 29102ca38c12c642 | ...!%.\" ).,....B\n    fc460400a7bfe61b cf220f005d0b0601 | .F.......\"..]...\n    00220c001bcc3170 fa1b6648a3804411 | .\"....1p..fH..D.\n    40222029a3f64607 c6daff005d0bcd0f | @\" )..F.....]...\n    216afa2c2339620c 04860100005d0bcd | !j.,#9b......]..\n    0f7cf42165fa7221 2682212492212ad9 | .|.!e.r!&.!$.!*.\n    72e2621479e269f2 8262109262157cfe | r.b.y.i..b..b.|.\n    f0dcdbdcb0c5dbdc e79402c6400058d2 | ............@.X.\n    317bfa50e0f42d0c 5050f54261305261 | 1{.P..-.PP.Ba0Ra\n    34b261350186fadb dc00007d028d0c0c | 4.a5.......}....\n    79422130522134b2 2135062800a20300 | yB!0R!4.!5.(....\n    eaeaa203015a5eaa eea20302ea55aaee | .....Z^......U..\n    a20303ea55aaeea2 0304ea55aaeea203 | ....U......U....\n    05ea55aaeea20306 ea55aaeea20307ea | ..U......U......\n    55aaeeea558b332a a3773adbdc702341 | U...U.3*.w:..p#A\n    b022b0b0a0600602 003202001b223aee | .\"......2...\":.\n    ea552a3a20b22077 33ee315afae02e20 | .U*: . w3.1Z... \n    4261307261328261 3192612fb2613552 | Ba0ra2.a1.a/.a5R\n    61340163fadbdc00 005221343152faed | a4.c.....R!41R..\n    022d05015ffadbdc 0000722132822131 | .-.._.....r!2.!1\n    b221357088dbdc92 212f714afa422130 | .!5p....!/qJ.B!0\n    5d028c683d0bb029 dbdc86e3ff005511 | ]..h=..)......U.\n    2124faea5559d2ed 04dcb4e8a27ce2e0 | !$..UY.......|..\n    e5dbdce08293ed08 4603000c0c060100 | ........F.......\n    000000cd05dd0c7c de313dfa62212b28 | .......|.1=.b!+(\n    23d066dbdcd022db dcdaffd11cfa2923 | #.f...\".......)#\n    380d711cfacac370 3cdbdc0cc0       | 8.q....p<....\nTraceback (most recent call last):\n  File \"/usr/local/bin/esptool.py\", line 2853, in \n    _main()\n  File \"/usr/local/bin/esptool.py\", line 2846, in _main\n    main()\n  File \"/usr/local/bin/esptool.py\", line 2571, in main\n    esp = esp.run_stub()\n  File \"/usr/local/bin/esptool.py\", line 579, in run_stub\n    self.mem_block(stub[field][from_offs:to_offs], seq)\n  File \"/usr/local/bin/esptool.py\", line 492, in mem_block\n    self.checksum(data))\n  File \"/usr/local/bin/esptool.py\", line 340, in check_command\n    val, data = self.command(op, data, chk, timeout=timeout)\n  File \"/usr/local/bin/esptool.py\", line 308, in command\n    self.write(pkt)\n  File \"/usr/local/bin/esptool.py\", line 271, in write\n    self._port.write(buf)\n  File \"/Library/Python/2.7/site-packages/serial/serialposix.py\", line 552, in write\n    raise writeTimeoutError\nserial.serialutil.SerialTimeoutException: Write timeout\n```. Thanks for asking @projectgus , I am not too sure how to get the hardware information or it is related to the hardware since I am actually using the macOS and found this issue, which windows 7 VM(virtual box) runs well on the same MacBook - if the hardware or USB driver could not run, how could the VM do the same job well? It seems that the only difference may be the implementation of pyserial lib, so generally speaking to me, it is very confusing.\n```\nUSB 3.0 Bus:\nHost Controller Driver:   AppleUSBXHCILPTH\n  PCI Device ID:    0x8c31 \n  PCI Revision ID:  0x0005 \n  PCI Vendor ID:    0x8086 \nEFM32 Happy Gecko USB CDC serial port device:\nProduct ID:   0x0003\n  Vendor ID:    0x10c4  (Silicon Laboratories, Inc.)\n  Version:  0.00\n  Speed:    Up to 12 Mb/sec\n  Manufacturer: Silicon Laboratories Inc.\n  Location ID:  0x14100000 / 5\n  Current Available (mA):   500\n  Current Required (mA):    100\n  Extra Operating Current (mA): 0\n``. Just confirmed that ubuntu 18.04 VM can also run esptool well on the same macOS by the same command line :-( why macOS itself has the issue?. Sounds reasonable. Currently my project is using an EFM32HG310F64 as the micro controller, which allows to boot the ESP to have a direct USB connection, so where can I find a proper driver? all windows and linux VM are using the same CDC driver for different OS actually . although I don't think it is a firmware case, thanks anyway. Before closing this issue, may I ask if there is any document about the write flash protocol between the host machine and ESP? If I had to debug the driver myself, at least I should know what data the host should send and what feedback it expects from ESP.. @projectgus it looks like not as your assumption. After reading [this reference](https://stackoverflow.com/questions/39714730/reading-serial-output-from-pyserial-doesnt-work-reliably), I then had a try to modify esptool.py with the regarded solutionself._port.close(); self._port.open()before the slip_reader() and the chip immediately came back with thesync` frames:\n_TRACE +0.055 command op=0x08 data len=36 wait_response=1 timeout=0.100 data=\n    0707122055555555 5555555555555555 | ... UUUUUUUUUUUU\n    5555555555555555 5555555555555555 | UUUUUUUUUUUUUUUU\n    55555555                          | UUUU\nTRACE +0.000 Write 46 bytes: \n    c000082400000000 0007071220555555 | ...$........ UUU\n    5555555555555555 5555555555555555 | UUUUUUUUUUUUUUUU\n    5555555555555555 5555555555c0     | UUUUUUUUUUUUU.\nTRACE +0.031 Read 1 bytes: c0\nTRACE +0.000 Read 73 bytes: \n    0108020007071220 0000c0c001080200 | ....... ........\n    070712200000c0c0 0108020007071220 | ... ........... \n    0000c0c00108820c 8c20070712200000 | ......... ... ..\n    c0c0010802000707 12200000c0c00108 | ......... ......\n    0200070712200000 c0               | ..... ...\nTRACE +0.000 Received full packet: 01080200070712200000\nTRACE +0.000 Received full packet: 01080200070712200000\nTRACE +0.000 Received full packet: 01080200070712200000\nTRACE +0.000 Received full packet: 0108820c8c20070712200000\nTRACE +0.000 Received full packet: 01080200070712200000\nTRACE +0.000 Received full packet: 01080200070712200000\nSo I think this could be either a known pyserial issue or an improper usage between each write-read session. Could you please suggest the best line to insert the snippet? I am debugging now.\n(To my surprise, I didn't find self._port.open() in the source code). \nThis is what I patched:\ndiff --git a/esptool.py b/esptool.py\nindex b35ab95..99816cd 100755\n--- a/esptool.py\n+++ b/esptool.py\n@@ -1844,6 +1844,8 @@ def slip_reader(port, trace_function):\n     \"\"\"\n     partial_packet = None\n     in_escape = False\n+    port.close()\n+    port.open()\n     while True:\n         waiting = port.inWaiting()\n         read_bytes = port.read(1 if waiting == 0 else waiting)\nThis is the command line:\nesptool.py --trace --port /dev/tty.usbmodem142101 --baud 230400 write_flash --flash_freq 26m --flash_size 1MB --flash_mode dio 0x7E000 7e.bin\nAnd this is the output (dead loop)\nesptool.py v2.6-beta1\nSerial port /dev/tty.usbmodem142101\nConnecting...TRACE +0.000 command op=0x08 data len=36 wait_response=1 timeout=0.100 data=\n    0707122055555555 5555555555555555 | ... UUUUUUUUUUUU\n    5555555555555555 5555555555555555 | UUUUUUUUUUUUUUUU\n    55555555                          | UUUU\nTRACE +0.001 Write 46 bytes: \n    c000082400000000 0007071220555555 | ...$........ UUU\n    5555555555555555 5555555555555555 | UUUUUUUUUUUUUUUU\n    5555555555555555 5555555555c0     | UUUUUUUUUUUUU.\nTRACE +0.116 Timed out waiting for packet header\n.TRACE +0.055 command op=0x08 data len=36 wait_response=1 timeout=0.100 data=\n    0707122055555555 5555555555555555 | ... UUUUUUUUUUUU\n    5555555555555555 5555555555555555 | UUUUUUUUUUUUUUUU\n    55555555                          | UUUU\nTRACE +0.000 Write 46 bytes: \n    c000082400000000 0007071220555555 | ...$........ UUU\n    5555555555555555 5555555555555555 | UUUUUUUUUUUUUUUU\n    5555555555555555 5555555555c0     | UUUUUUUUUUUUU.\nTRACE +0.028 Read 1 bytes: c0\nTRACE +0.000 Read 78 bytes: \n    0108020007071220 0000c0c001080200 | ....... ........\n    070712200000c0c0 0108020007071220 | ... ........... \n    0000c0c001080200 070712200000c0c0 | ........... ....\n    0108020007008201 0802000707122000 | .............. .\n    00c0c00108020007 0712200000c0     | .......... ...\nTRACE +0.001 Received full packet: 01080200070712200000\nTRACE +0.000 Received full packet: 01080200070712200000\nTRACE +0.000 Received full packet: 01080200070712200000\nTRACE +0.000 Received full packet: 01080200070712200000\nTRACE +0.000 Received full packet: \n    0108020007008201 0802000707122000 | .............. .\n    00                                | .\nTRACE +0.000 Received full packet: 01080200070712200000\nTRACE +3.000 Timed out waiting for packet header\n.TRACE +0.056 command op=0x08 data len=36 wait_response=1 timeout=0.100 data=\n    0707122055555555 5555555555555555 | ... UUUUUUUUUUUU\n    5555555555555555 5555555555555555 | UUUUUUUUUUUUUUUU\n    55555555                          | UUUU\nTRACE +0.000 Write 46 bytes: \n    c000082400000000 0007071220555555 | ...$........ UUU\n    5555555555555555 5555555555555555 | UUUUUUUUUUUUUUUU\n    5555555555555555 5555555555c0     | UUUUUUUUUUUUU.\nTRACE +0.028 Read 1 bytes: c0\nTRACE +0.000 Read 80 bytes: \n    0108020007071220 0000c0c001080200 | ....... ........\n    070712200000c0c0 0108020007078480 | ... ............\n    c001080200070712 200000c0c0010802 | ........ .......\n    00070712200000c0 c001080200070712 | .... ...........\n    200000c0c0010802 00070712200000c0 |  ........... ...\nTRACE +0.000 Received full packet: 01080200070712200000\nTRACE +0.000 Received full packet: 01080200070712200000\nTRACE +0.000 Received full packet: 0108020007078480\nTRACE +0.000 Read invalid data: \n    0108020007071220 0000c0c001080200 | ....... ........\n    070712200000c0c0 0108020007078480 | ... ............\n    c001080200070712 200000c0c0010802 | ........ .......\n    00070712200000c0 c001080200070712 | .... ...........\n    200000c0c0010802 00070712200000c0 |  ........... ...\nTRACE +0.000 Remaining data in serial buffer: \n.TRACE +0.051 command op=0x08 data len=36 wait_response=1 timeout=0.100 data=\n    0707122055555555 5555555555555555 | ... UUUUUUUUUUUU\n    5555555555555555 5555555555555555 | UUUUUUUUUUUUUUUU\n    55555555                          | UUUU\nTRACE +0.000 Write 46 bytes: \n    c000082400000000 0007071220555555 | ...$........ UUU\n    5555555555555555 5555555555555555 | UUUUUUUUUUUUUUUU\n    5555555555555555 5555555555c0     | UUUUUUUUUUUUU.\nTRACE +0.028 Read 1 bytes: c0\nTRACE +0.000 Read 81 bytes: \n    0108020007071220 0000c0c001080200 | ....... ........\n    070712200000c0c0 0108020007071220 | ... ........... \n    0000c0c001060707 12200000c0c00108 | ......... ......\n    0200070712200000 c0c0010802000707 | ..... ..........\n    12200000c0c00108 0200070712200000 | . ........... ..\n    c0                                | .\nTRACE +0.000 Received full packet: 01080200070712200000\nTRACE +0.000 Received full packet: 01080200070712200000\nTRACE +0.000 Received full packet: 01080200070712200000\nTRACE +0.000 Received full packet: 0106070712200000\nTRACE +0.000 Received full packet: 01080200070712200000\nTRACE +0.000 Received full packet: 01080200070712200000\nTRACE +0.000 Received full packet: 01080200070712200000. No, dead loop means it is synchronizing back and forth forever, sending sync packets and receiving sync packets back . well, I am already the best man to do this job during the past 20 years of programming :-) I tested esptool.py on linux and windows but it never worked on macOS. I don\u2019t understand this part: why it is sending sync after reopening and why dead loop at this point?. ",
    "ice2hu": "what's wrong with this?\nesptool.py --port /dev/tty.usbserial-00000000 --baud 74880  --trace   read_mac\nwill cause this:\nTRACE +0.055 command op=0x08 data len=36 wait_response=1 timeout=0.100 data=\n    0707122055555555 5555555555555555 | ... UUUUUUUUUUUU\n    5555555555555555 5555555555555555 | UUUUUUUUUUUUUUUU\n    55555555                          | UUUU\nTRACE +0.000 Write 46 bytes: \n    c000082400000000 0007071220555555 | ...$........ UUU\n    5555555555555555 5555555555555555 | UUUUUUUUUUUUUUUU\n    5555555555555555 5555555555c0     | UUUUUUUUUUUUU.\nTRACE +0.007 Read 1 bytes: 08\nTRACE +0.000 Read invalid data: 08\nTRACE +0.000 Remaining data in serial buffer: \n_TRACE +0.056 command op=0x08 data len=36 wait_response=1 timeout=0.100 data=\n    0707122055555555 5555555555555555 | ... UUUUUUUUUUUU\n    5555555555555555 5555555555555555 | UUUUUUUUUUUUUUUU\n    55555555                          | UUUU\nTRACE +0.001 Write 46 bytes: \n    c000082400000000 0007071220555555 | ...$........ UUU\n    5555555555555555 5555555555555555 | UUUUUUUUUUUUUUUU\n    5555555555555555 5555555555c0     | UUUUUUUUUUUUU.\nTRACE +0.008 Read 1 bytes: 28\nTRACE +0.000 Read invalid data: 28\nTRACE +0.000 Remaining data in serial buffer: \n_TRACE +0.055 command op=0x08 data len=36 wait_response=1 timeout=0.100 data=\n    0707122055555555 5555555555555555 | ... UUUUUUUUUUUU\n    5555555555555555 5555555555555555 | UUUUUUUUUUUUUUUU\n    55555555                          | UUUU\nTRACE +0.001 Write 46 bytes: \n    c000082400000000 0007071220555555 | ...$........ UUU\n    5555555555555555 5555555555555555 | UUUUUUUUUUUUUUUU\n    5555555555555555 5555555555c0     | UUUUUUUUUUUUU.\nTRACE +0.008 Read 1 bytes: 28\nTRACE +0.000 Read invalid data: 28\nTRACE +0.000 Remaining data in serial buffer: \n_TRACE +0.055 command op=0x08 data len=36 wait_response=1 timeout=0.100 data=\n    0707122055555555 5555555555555555 | ... UUUUUUUUUUUU\n    5555555555555555 5555555555555555 | UUUUUUUUUUUUUUUU\n    55555555                          | UUUU\nTRACE +0.001 Write 46 bytes: \n    c000082400000000 0007071220555555 | ...$........ UUU\n    5555555555555555 5555555555555555 | UUUUUUUUUUUUUUUU\n    5555555555555555 5555555555c0     | UUUUUUUUUUUUU.\nTRACE +0.008 Read 1 bytes: 08\nTRACE +0.000 Read invalid data: 08\nTRACE +0.000 Remaining data in serial buffer: \n\nA fatal error occurred: Failed to connect to Espressif device: Invalid head of packet (0x08). ",
    "lnietner": "Nevermind, figured it out - wasn't clear before that boot has to be low, and reset has to be low and only released once serial communication has begun. Works now.. ",
    "lemonbuzz": "Hi, I would just like a little clarification on your part regarding your own solution. I seem to be experiencing the same issue you have experienced. I have a custom board, ESP32 TX/RX pins are connected to FTDI serial bridge, I am running macOS and also I have no issues flashing other boards ( ESP-WROOM-32 dev boards with integrated serial over USB ). \nHowever, when I boot with GPIO0 held LOW, I get \"waiting for download\" prompt which tells me the ESP32 actually boots in the correct mode.\nWhen you say \n\nreset has to be low and only released once serial communication has begun\n\nI'm not sure what reset is referring to\nAny help is appreciated :). Hey @projectgus ,\nFirst of all, thank you for your timely response, you are very appreciated!\n@gbdb took a closer look at the circuit this morning and it was indeed a case of cold solder joint on the RX pin!\nNow it works like a charm! :)\nThank you.. ",
    "anupamb062": "Thanks projectgus. Can you suggest some materials to have a rough idea about the flash partitions and offsets?. Hi @projectgus ,\n                           What if I forget to give 0 in the command line to download the bin in the flash? Will it have any effect on the bin file? The command I might have used : esptool.py -p PORT -b 115200 read_flash 0x400000 flash_dump.bin. As you can see I might have missed the zero after the read_flash function call. Cannot re-open the issue but appreciate any sort of help.. ",
    "vinifr": "Well, I can flash and keep console programs opened at the same time on stm32 and tm4c1294x microcontrollers. But I guess this has something to do with hardware capacity?. st-flash for STM32 https://github.com/texane/stlink and lm4flash https://github.com/utzig/lm4tools/tree/master/lm4flash for TM4C129X.. By the way, both the micros, STM32 and TM4C19X, create a USB ACM device instead ttyUSB0.\ncdc_acm 2-1.6:1.2: ttyACM0: USB ACM device\nMaybe this make possible to open console and flash applications at same time?. ",
    "zaphod-42": "Did you manage to get a nodejs version of esptool working without the python dependency? I was hoping to implement the same thing and came across this thread while looking for existing options... thanks!. ",
    "jgehlsen": "Thanks @projectgus.\nThere is circuitry connected to these pins so we are going to have to go back and fix some things.\nThanks for getting back to me so quickly.. ",
    "max3l": "Thank you for your quick reply. \nI checked GPIOs 6-11 for short circuits but there are none. Also there is nothing connected to GPIO 12, which could pull it high. The Board is loose and not connected to a breadboard, only the power pins and the RX/TX pins.\nIs there a way to find out if the flash chip is broken? \nMax. Hi @projectgus,\nNo, I bought a new WROOM module and am waiting for it to arrive.\nMax. ",
    "FriendlyScientist": "Just my 2 Cents: I experienced exactly this issue on a custom hardware. In my case it was triggered by a digital LED-Strip Pin on GPIO12 which was not properly grounded. Resoldering the ground pin did the trick. \nI also found three Config fuses which sounds that they would solve this issue by just ignoring GPIO12:\nXPD_SDIO_FORCE         Ignore MTDI pin (GPIO12) for VDD_SDIO on reset    = 0 R/W (0x0)\nXPD_SDIO_REG           If XPD_SDIO_FORCE, enable VDD_SDIO reg on reset   = 0 R/W (0x0)\nXPD_SDIO_TIEH          If XPD_SDIO_FORCE & XPD_SDIO_REG, 1=3.3V 0=1.8V   = 0 R/W (0x0)\nI never tried it but is probably interesting for erroneous hardware in the field\nGary. ",
    "hal9000-x": "i had the exact same problem. tried a good power supply, no result. but after cleaning and re-soldering the ESP-WROOM-32D module, it's now working.. ",
    "MatthiasJentsch": "Hi @projectgus ,\nI've tested with version 2.4.0 and the --before no_reset_no_sync option. But it's not working at all. Here is the log:\n```\nesptool.py --port COM6 --baud 921600 --chip esp8266   --after no_reset erase_flash\nesptool.py v2.4.0\nConnecting....\nChip is ESP8266EX\nFeatures: WiFi\nMAC: xx:xx:xx:xx:xx:xx\nUploading stub...\nRunning stub...\nStub running...\nChanging baud rate to 921600\nChanged.\nErasing flash (this may take a while)...\nChip erase completed successfully in 0.2s\nStaying in bootloader.\nesptool.py --port COM6 --baud 921600 --chip esp8266  --before no_reset_no_sync --after no_reset write_flash --flash_mode dio --flash_freq 40m --flash_size 512KB 0x0 \"xxx.eagle.flash.0x00000.bin\" 0x10000 \"xxx.eagle.irom0text.bin.0x10000.bin\" 0x7C000 \"esp_init_data_default.bin\" 0x7E000 \"blank.bin\"\nesptool.py v2.4.0\nConnecting...\nA fatal error occurred: Timed out waiting for packet header\n```. Any news for this issue? I'm still looking for a solution or at least a workaround for it.. ",
    "bardhandebashree": "i am not getting why my esptool download tool always fails?\nC:\\Users\\hp\\Downloads\\flash_download_tools_v3.6.4_0 (1)\\FLASH_DOWNLOAD_TOOLS_V3.6.4\\ESPFlashDownloadTool_v3.6.4.exe:96: wxPyDeprecationWarning: Using deprecated class PySimpleApp.\n('self.chip: ', 'ESP8266')\nRF option applied...\nC:\\Users\\hp\\Downloads\\esp_iot_sdk_v1.5.0_15_11_27\\esp_iot_sdk_v1.5.0\\bin\\at\\noboot\\eagle.flash.bin\n1 kill\n1 kill\nC:\\Users\\hp\\Downloads\\esp_iot_sdk_v1.5.0_15_11_27\\esp_iot_sdk_v1.5.0\\bin\\at\\noboot\\eagle.irom0text.bin\n2 kill\nC:\\Users\\hp\\Downloads\\esp_iot_sdk_v1.5.0_15_11_27\\esp_iot_sdk_v1.5.0\\bin\\blank.bin\n3 kill\nC:\\Users\\hp\\Downloads\\esp_iot_sdk_v1.5.0_15_11_27\\esp_iot_sdk_v1.5.0\\bin\\blank.bin\n4 kill\n======\nCONNECT BAUD: 115200\n============\n....._____....._____....._____....._____....._____....._____....._____....._____....._____....._____[2018-05-23 08:37:13,351][ESP8266Loader_spi[1]][espDownloader.pyo][line:351][ERROR]: Chip sync error: Failed to connect to ESP8266: Invalid head of packet ('\\xf0')\n[2018-05-23 08:37:13,352][ESP8266Loader_spi[1]][espDownloader.pyo][line:439][ERROR]: ESP8266 Chip sync error esp_sync_blocking.\nand my esptool.py also doesnot work:\n Failed to connect to Espressif device\n. ",
    "abdollahpour": "Exactly!. ",
    "cefn": "I'm going to try again, as I don't like the diff. Something is screwy. Should only show a couple of lines and my attempt to fix to appease Flake involved copying the latest esptool.py which may have had extra changes in it - effectively going behind the back of the versioning system.. This is now superceded by https://github.com/espressif/esptool/pull/316. OK, this seems like the flake8 checks have passed and it also has the proper history. Hope it is OK.. ",
    "Cicero-MF": "Thanks for getting back to me.  Also found this: https://richard.burtons.org/2015/05/17/esp8266-boot-process/ which further explains what you're saying.\nAppreciate the help.. ",
    "coolineho": "i have the same board too, did you manage to flash this?. i got it to flash ;)\nthanks. ",
    "ZoltanSzilagyiCse": "Yes, need to change some pinout number in the source code. It looks like the board has different layout and pinouts. Just a note: I used the 1.0 version not the newer 2.0. . I uploaded the file here: Google Drive\nJust flash it or upgrade an existing one. ",
    "papahabla": "@projectgus Yes, I used release version v2.4.1 and issue is resolved. Thanks!. ",
    "qwerty12345asdf": "Thanks, the issue has been resolved \ud83d\udc4d . Although i did notice one small issue, when using the auto find feature for port selection it tries to connect to one of the ports and does not go to the next one.\nI have included a screenshot of the same \n\nIn the first command \"esptool.py --port COM4 flash_id\" esptool successfully connects to the device but\nWhen i try \"esptool.py  flash_id\"(the autoconnect feature) it stays on connecting...\n\n. I ran the trace command the output is as shown in the screen-shot also there is nothing connected to any other COM port other than COM4 (my esp8266 nodemcu).\n\n\nI noticed that the process is not complete as the cursor keeps blinking after executing the command.\n. >The COM7 port seems to be a bluetooth link as shown in the device manager\n\n\non running \"esptool.py --port COM7 flash_id\" it is stuck on connecting...  similar to the earlier scenario. \n. Hey, small update\nSince the device was not connecting I to COM7 i decide to try and update the drivers for that port nothing much happened, i.e the driver was already up-to-date \nBut now a new output has cropped up for the same commands as shown in screenshot:\ninputting the command \"esptool.py flash_id\" i.e autoconnect  the tool tries to connect to COM7 fails and stops.\n\nI don't know why is it indicating Access denied because cmd is running on admin mode.\n*Note:\nConnection to COM4 directly has no problem either :\n\n\n*Hope it helps, pls. inform if you require any other info.\n. ",
    "aLoneStrider": "Hi, \nSame Problem here, working on ESP32 and getting exact same messages as @Easydo1 . @projectgus , there is no such button on the board. . Hi @projectgus ,\nThanks for the reply. The problem is that I am able to flash the device without any problem on Linux (Fedora). \n\nThis connection problem only happens on Windows.\n\nI checked all the points in the troubleshooting section but it's not related to any of them. \nTrace option also deployed and did not help as you can see.\n\n. @projectgus , ESP32 board freematics \n\n. Update: Esptool works fine on Windows 7. The issue related only to Windows 10 probably a new security update.. The issue still remains and I don't know why it is now closed. @projectgus , No suggestion from You?\n. ",
    "Easydo1": "@projectgus \nHere is the layout of my board.\n\nI've tried to flash it with pulling down the Io0 pin, meanimg pressing te button during the flashing sequens. but it did not work. Then in the process of finding the problem. I've thougt. I cant write but how about reading? The problem is that even reading the flash ID or the mac adres is not working. So the probkem must be more fundamental.\n. @projectgus \nTHX for the advice. After holding down the \"IO0\" button and than trying to read flash_id. It worked:\n\nI'll now try to flash the ESP32 with micropython\n. It worked thanks for the help. MicroPython v1.9.4-241 is running on t the board. TNX for the great tool. ",
    "SabeehY": "I solved it by running:\ncurl https://bootstrap.pypa.io/get-pip.py | python\nMy error appears to be caused by an outdated version of pip which was not fetching the proper SSL certificates.. ",
    "vincnico": "Hi\nI am totally new here and with esptool.\nI follow some tuto to try to install esptool on my macbook with OS 10.10.5 Yosemite, in order to flash a nodemcu with ESPeasy.\nBut it appears I have the same issue : \n$ pip install esptool\nYou are using pip version 6.1.1, however version 18.1 is available.\nYou should consider upgrading via the 'pip install --upgrade pip' command.\nRequirement already satisfied (use --upgrade to upgrade): esptool in /Library/Python/2.7/site-packages/esptool-2.7_dev-py2.7.egg\nCollecting pyserial>=3.0 (from esptool)\nCould not find a version that satisfies the requirement pyserial>=3.0 (from esptool) (from versions: )\nNo matching distribution found for pyserial>=3.0 (from esptool)\nDoes someone can help me ?\nThank you\n. hello\nI tried : \ncurl https://bootstrap.pypa.io/get-pip.py | python\nbut I have the message :\nCould not install packages due to an EnvironmentError: [Errno 13] Permission denied: '/Library/Python/2.7/site-packages/pip-6.1.1.dist-info/DESCRIPTION.rst'\nConsider using the --user option or check the permissions.\nI have no idea what to do....\nDoes anybody can help ???. I have also tried:\nsudo pip install --upgrade pip\nbut I receive: \nThe directory '/Users/vincentnicolas/Library/Logs/pip' or its parent directory is not owned by the current user and the debug log has been disabled. Please check the permissions and owner of that directory. If executing pip with sudo, you may want sudo's -H flag.\nThe directory '/Users/vincentnicolas/Library/Caches/pip/http' or its parent directory is not owned by the current user and the cache has been disabled. Please check the permissions and owner of that directory. If executing pip with sudo, you may want sudo's -H flag.\nYou are using pip version 6.1.1, however version 18.1 is available.\nYou should consider upgrading via the 'pip install --upgrade pip' command.\nThe directory '/Users/vincentnicolas/Library/Caches/pip/http' or its parent directory is not owned by the current user and the cache has been disabled. Please check the permissions and owner of that directory. If executing pip with sudo, you may want sudo's -H flag.\nRequirement already up-to-date: pip in /Library/Python/2.7/site-packages\n...? ? ? what to do ????? . I also tried:\n$ pip install --upgrade pip\nYou are using pip version 6.1.1, however version 18.1 is available.\nYou should consider upgrading via the 'pip install --upgrade pip' command.\nRequirement already up-to-date: pip in /Library/Python/2.7/site-packages\nwhich doesn't seem consistent to me... any idea ?. Hi\nthis is what I have:\n$ pip --user --upgrade\nUsage: \n  pip  [options]\nno such option: --user\nSorry, but nothing works... or I did it wrong\n. hi\nsomething new ! \nI tried:\n$ python get-pip.py --user\nwhich seems to give something positive, but I received:\nThe script wheel is installed in '/Users/vincentnicolas/Library/Python/2.7/bin' which is not on PATH.\n  Consider adding this directory to PATH or, if you prefer to suppress this warning, use --no-warn-script-location.\nSuccessfully installed pip-18.1 wheel-0.32.3\nso I tried to add to PATH with:\nexport PATH=$PATH:/Users/vincentnicolas/Library/Python/2.7/bin\nand then relaunched the command: pip install esptool\nbut still have:\nYou are using pip version 6.1.1, however version 18.1 is available.\nYou should consider upgrading via the 'pip install --upgrade pip' command.\nRequirement already satisfied (use --upgrade to upgrade): esptool in /Library/Python/2.7/site-packages/esptool-2.7_dev-py2.7.egg\nCollecting pyserial>=3.0 (from esptool)\n  Could not find a version that satisfies the requirement pyserial>=3.0 (from esptool) (from versions: )\n  No matching distribution found for pyserial>=3.0 (from esptool)\nwhat is the problem?. Hi\nThanks for this, it seems I'm doing progress....\nSo did I.\nBut then, I have another one:\n$ pip install esptool\nTraceback (most recent call last):\n  File \"/Users/vincentnicolas/Library/Python/2.7/bin/pip\", line 7, in \n    from pip._internal import main\nImportError: No module named _internal\nany idea ?. ",
    "shivam5594": "I have updated this with trace of flashing op.txt . this has the trace of my setup which is not working. . Hi @projectgus , \n\n\nI have updated my esptool.py to 2.4.1 and python to 2.7.15 . \n\n\nI tried to erase_flash at 9600 baud rate and here its trace output and logic analyzer capture. My logic analyzer isn't giving any framing error at 115200 baud either.\n\n\n---------> op.txt\n\n\n\nI am using PSoC5 in CDC USB mode to convert USB signals to USB. It doesn't give out the DTR and RTS signals as esptool.py should do for automatic bootloading mode, but that part is taken care of by hard coding the GPIO pins.. Hi @projectgus \n\n\nI think it is same but still I have attached both files here. \n\nEven I suspect it is USB/serial converter. Because I am using the original ESP32_core_V2 board (Not a cheaper copy) and also connections and boot mode selection working fine. \n\nOutput Files\n\n\nTrace\nop.txt\n\n\nLogic Analyzer\nop_analyzer_tx.pdf\n\n\n. If anyone has worked with PSoC5 CDC usb to uart and successfully gets esp32 in download mode.. Please let me know. \nTIA . ",
    "jcert": "Had the same problem, your issue saved me a lot of time, thanks.. ",
    "c1r2t3": "So sorry for not being more specific.\nLinux machine\nArduino IDE 1.8.5\nMy problem is that, when compiling  there is a window that shows progress and this line is not overwritten and goes down without effectively auto scrolling .\nAfter the \"\\n\" it is scrolling and I can see what is going on.\nHope I made myself understood :)  . ",
    "amitkray31": "The interfacing chip is CH340G. \n. Ok, after resetting the chip it is working but facing some other problem\nesptool.py v2.5.1-dev\nSerial port /dev/ttyUSB1\nConnecting....\nDetecting chip type... ESP8266\nChip is ESP8266EX\nFeatures: WiFi\nMAC: xxxxxxxxxx\nUploading stub...\nRunning stub...\nStub running...\nConfiguring flash size...\nAuto-detected Flash size: 1MB\nCompressed 1044480 bytes to 204643...\nWrote 1044480 bytes (204643 compressed) at 0x00000000 in 22.0 seconds (effective 379.1 kbit/s)...\nA fatal error occurred: Timed out waiting for packet header\n. Yes, despite of the error message the flash has been successful.\nOutput:-\nesptool.py v2.5.1-dev\nSerial port /dev/ttyUSB0\nConnecting...\nDetecting chip type... ESP8266\nChip is ESP8266EX\nFeatures: WiFi\nMAC: xx:xx:xx:xx:xx:xx\nUploading stub...\nRunning stub...\nStub running...\nConfiguring flash size...\nAuto-detected Flash size: 1MB\nCompressed 1044480 bytes to 204643...\nWrote 1044480 bytes (204643 compressed) at 0x00000000 in 21.3 seconds (effective 392.1 kbit/s)...\nA fatal error occurred: Timed out waiting for packet header. Without compression the flash also succeeded.\noutput(Without compression):-\nesptool.py v2.5.1-dev\nSerial port /dev/ttyUSB0\nConnecting........_\nDetecting chip type... ESP8266\nChip is ESP8266EX\nFeatures: WiFi\nMAC: xx:xx:xx:xx:xx:xx\nUploading stub...\nRunning stub...\nStub running...\nConfiguring flash size...\nWrote 1048576 bytes at 0x00000000 in 92.6 seconds (90.6 kbit/s)...\nHash of data verified.\nLeaving...\nHard resetting via RTS pin.... Thanks a lot  you for your cooperation.. ",
    "XiaofanLii": "@projectgus \nWhen I change the usb chipset to FT232R, all esptool commond work fine.\nI was used ch340 and cp2102, it report same error.\nMaybe ch340 and cp2102 shipset and driver(on macOS) did not support re-configure.\n. @projectgus No, I close this because I found another useful chipset on my macOS. About CP2102 & CH340, I will do more test.. ",
    "mimaamsa": "@projectgus \nThanks a lot for the insight. Will try and update here.. ",
    "loader-bsd": "I was trying to create a FreeBSD port for esptool and PyPI is default site to download source distribution. Users can run unittests by typing the 'make test' command in the port directory.\nhttps://reviews.freebsd.org/D16483#350723\nThanks,\nloader. ",
    "borro0": "Done: #341 . ",
    "gitAnuj1234": "\n. thanks @projectgus  for the help I used sudo pip install esptool instead of pip install esptool as advised by you and it worked ....thanks for the help. ",
    "Stasikiii": "@projectgus thx you!. ",
    "nixmeer": "350 seems to be the same problem, probably just on 10.13.6. For me, flashing doesn't work either. Tried to run pip install esptool in tools folder, didn't change anything. It throws the\nmatplotlib 1.3.1 requires nose, which is not installed.\nmatplotlib 1.3.1 requires tornado, which is not installed.\nmatplotlib 1.3.1 has requirement numpy>=1.5, but you'll have numpy 1.8.0rc1 which is incompatible.\nCan't install either of these packages. \nAnyone any idea?. Oh. I should mention I\u2019m trying to flash an ESP8266 on an sonoff basic. \nAfter upgrading to macOS 10.13, the only working driver would be one called wusbserial.. I took some time and prepared the Arduino IDE so i could compile the firmware myself and upload it. But thanks!\nBtw: I\u2019m using a flasher module for ESP-01 for every ESP8266 and it works perfectly. . I got the same issue. I am running on macOS 10.13.6. Esptool installed with the esp32 core and works fine when flashing the esp32 through Arduino IDE. When trying to flash tasmota firmware to an esp8266, I get the same error. \nPython 2.7 and 3.7 installed.. ",
    "fejess": "I have this setup:\nplease follow the sequence\n1. homebrew\nCMD: /usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\n2. USB serial driver CH4X\nCMD 1: brew tap mengbo/ch340g-ch34g-ch34x-mac-os-x-driver https://github.com/mengbo/ch340g-ch34g-ch34x-mac-os-x-driver\nCMD 2:brew cask install wch-ch34x-usb-serial-driver\n\nThis is neccessary if you use and FTDI flasher\n\n3. USB to UART bridge driver cp210x\nWEB https://www.silabs.com/products/development-tools/software/usb-to-uart-bridge-vcp-drivers\n\nBridge to ESP32 devboard. On link you will find a macOSx compatible file\n\n4. pip\nCMD: sudo easy_install pip\n5. nose\nCMD: sudo easy_install nose\n6. tornado\nCMD: sudo easy_install tornado\n7. platformio\nCMD: pip install -U https://github.com/platformio/platformio-core/archive/develop.zip\n\nfor me the best platform for this things using with Visual Code\n\nDon't forget to set in  FLASH ENABLE mode your ESP32 like this:\n- GPIO00 -> LOW\n- ENABLE -> LOW -> HIGH \nNORMAL MODE\n- GPIO00 -> HIGH or floating (this pin have internal pullup)\n- ENABLE -> LOW -> HIGH \nSimple wiring for development:\nhttps://community.blynk.cc/uploads/default/original/2X/6/6ab1e685d2745ebea13962d421cca404cef59cea.jpg \n. Try this: https://www.ebay.com/itm/FT232RL-3-3V-5-5V-FTDI-USB-to-TTL-Serial-Adapter-Module-for-Arduino-Mini-Port/381374421597?epid=930497168&hash=item58cbafda5d:g:jk8AAOSwrklVMjIp\n\nCH4X driver. Alright, thank you!. \n",
    "ivankravets": "\nIf platform.io isn't telling users to install pyserial 3.0 \n\n@projectgus should we do that? \nPlatformIO is a 1-click solution, no need to install make, cmake, Python packages or other extra tools.\n\n@fejess See https://github.com/platformio/platform-espressif32/issues/127. Please run pio run -t erase with the latest upstream version. The final release of PlatformIO dev/platform is planned when the next release of Arduino core for ESP32 will out. @me-no-dev promised this week.\n. @me-no-dev please change libsodium in this this line to -llibsodium. SCons automatically strips lib prefix and it seems that it has a bug when double lib in the prefix is used.\n... \"core\", \"sdmmc\", \"-llibsodium\", \"coap\", \"tcpip_adapter\" .... @projectgus Thanks! PlatformIO Core depends on PySerial >= 3.0 too. @fejess experienced this issue because called esptool.py outside PlatformIO Core environment where he had the oldest version of PySerial.\nPlease note, that if you call PlatformIO Core directly (pio run -t upload), we will use our internal python packages where PySerial is updated to the latest version. In this case, the user's local version of PySerial will not be used.. @me-no-dev agree with you. I'll report this issue to @scons team. Just curious, why does this lib call liblib*? :). If you pass library name to LIB scope without flag -l prefix, it strips lib. Normally, you do not need lib prefix when passing lib to GCC. It handles this automatically. See verbose output\nxtensa-esp32-elf-g++ -o /tmp/pio-build/019a00f9fc/lolin32/firmware.elf -T esp32_out.ld -nostdlib -Wl,-static -u call_user_start_cpu0 -Wl,--undefined=uxTopUsedPriority -Wl,--gc-sections -Wl,-EL -T esp32.common.ld -T esp32.rom.ld -T esp32.peripherals.ld -T esp32.rom.spiram_incompatible_fns.ld -u ld_include_panic_highint_hdl -u __cxa_guard_dummy -u __cxx_fatal_exception /tmp/pio-build/019a00f9fc/lolin32/src/Blink.cpp.o -L/tmp/pio-build/019a00f9fc/lolin32 -L/Users/ikravets/.platformio/packages/framework-arduinoespressif32/tools/sdk/lib -L/Users/ikravets/.platformio/packages/framework-arduinoespressif32/tools/sdk/ld -Wl,--start-group /tmp/pio-build/019a00f9fc/lolin32/libFrameworkArduinoVariant.a /tmp/pio-build/019a00f9fc/lolin32/libFrameworkArduino.a -lgcc -lopenssl -lbtdm_app -lfatfs -lwps -lcoexist -lwear_levelling -lesp_http_client -lhal -lnewlib -ldriver -lbootloader_support -lpp -lmesh -lsmartconfig -ljsmn -lwpa -lethernet -lphy -lapp_trace -lconsole -lulp -lwpa_supplicant -lfreertos -lbt -lmicro-ecc -lcxx -lxtensa-debug-module -lmdns -lvfs -lsoc -lcore -lsdmmc -lcoap -ltcpip_adapter -lc_nano -lesp-tls -lrtc -lspi_flash -lwpa2 -lesp32 -lapp_update -lnghttp -lspiffs -lespnow -lnvs_flash -lesp_adc_cal -llog -lsmartconfig_ack -lexpat -lm -lc -lheap -lmbedtls -llwip -lnet80211 -lpthread -ljson -lstdc++ -Wl,--end-group\nI think you can just generate -l{NAME} for all libraries. In this case, SCons will not touch library names and do any strips.. ",
    "tomazursic": "Solved\nThe issue was produced on damaged module!\nTested with identical (TTGO v2.1) new module and the process works as expected!. ",
    "jssilva25": "Hello,\nI'm getting the exact same error as the OP, same OS and py27.\nI already did pip install pyserial and pip install esptool and I don't think they are outdated:\n```\n$ pip show pyserial\nName: pyserial\nVersion: 3.4\nSummary: Python Serial Port Extension\nHome-page: https://github.com/pyserial/pyserial\nAuthor: Chris Liechti\nAuthor-email: cliechti@gmx.net\nLicense: BSD\nLocation: /opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages\nRequires: \nRequired-by: esptool\n\n$ pip show esptool\nName: esptool\nVersion: 2.5.1.dev0\nSummary: A serial utility to communicate & flash code to Espressif ESP8266 & ESP32 chips.\nHome-page: https://github.com/espressif/esptool\nAuthor: Fredrik Ahlberg (themadinventor) & Angus Gratton (projectgus)\nAuthor-email: angus@espressif.com\nLicense: GPLv2+\nLocation: /opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/esptool-2.5.1.dev0-py2.7.egg\nRequires: pyserial, pyaes, ecdsa\nRequired-by: \nEDIT: It works on the command line:\n$ python -m serial.tools.list_ports\n/dev/cu.Bluetooth-Incoming-Port\n/dev/cu.usbserial-A9M9DV3R\n2 ports found\nEDIT2: Never mind, I had installed esptool by git clone. Solved it by:\npip uninstall esptool\npip uninstall pyserial\npip uninstall serial # didn't find something to uninstall\npip install esptool\n``\nAnd now I have to call esptool using full path, otherwise esp-open-sdk gets in the way:$ /opt/local/Library/Frameworks/Python.framework/Versions/2.7/bin/esptool.py\n`\nCould you please help?\nTIA\njss. ",
    "vinayprydotinfotech": "Same error\nTraceback (most recent call last):\n  File \"../tools/esptool.py\", line 26, in \n    import serial\nImportError: No module named serial\n../Makefile:202: recipe for target '.output/eagle/debug/bin/eagle.app.v6.bin' failed\nmake[1]:  [.output/eagle/debug/bin/eagle.app.v6.bin] Error 1\nmake[1]: Leaving directory '/home/rydot/Downloads/nodemcu-firmware-2.2.1-master_20181207/app'\nMakefile:292: recipe for target '.subdirs' failed\nmake:  [.subdirs] Error 2\n\nplatform  pyhton 3.6 ,Ubuntu 16.04 LTS, 64bit \ninstalled \n--pip3 install pyserial --user\n--pip3 install serial --user \n--pip3 install esptool --user\nstill not working\nAny more advice ?. i get  when '/usr/bin/env python' is entered in terminal of Linux 16.04 Ubuntu LTS and \n\"\nrydot@rydot-pc:~/Downloads/nodemcu-firmware-2.2.1-master_20181207$\n/usr/bin/env python\nPython 3.6.0 |Anaconda 4.3.0 (64-bit)| (default, Dec 23 2016, 12:22:00)\n[GCC 4.4.7 20120313 (Red Hat 4.4.7-1)] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n\n\n\n\"\nthen followed by \nsudo apt-get install python3-serial but i get still the same error.. \n\n\n",
    "davydnorris": "I think I have pretty much confirmed this is my problem too, but up until a couple of weeks ago I had been flashing deep sleep enabled code with no problem.\nI can also add that the nodemcu flasher also works every time, but the Espressif GUI based flash tool has the same issue as esptool.. I had the same problem with python3 - ended up reinstalling python2.7. Doing further investigation using 2.5.1 I have found that this version will flash the chip and not cause it to brick, but the code will not run.\nI'm loading user1 but it looks like it's jumping straight to user2 and then failing (because there is no user2). There are no error messages during the flash and it appears to complete fine.\nIf I flash the exact same binary using the Espressif supplied tool it works correctly.. Further update - I have found that I can unbrick a device simply by writing a blank.bin with the NodeMCU flasher, it doesn't even have to be the full binary.\nI have also found that it seems to be NonOS v3.0 related - I have just used the 2.5.1 version of esptool to repeatedly flash a v2.2 binary and it worked fine, but have just flashed a v3.0 binary and it's now bricked. I was able to flash and reflash the v3.0 boot and init data, but the moment I flashed the user1 bin it died.. Hi @projectgus \nI've been playing with this all weekend with repeatable results and lack of success. right now I am using the Espressif GUI based flash tool to flash my chips outside of my build process. Here's what I have so far:\n\nNodeMCU flasher works every time, and will unbrick units that have been bricked by esptool. This works at baud rates up to 921600\nthe NodeMCU tool will unbrick a unit just by writing the 4k blank.bin at any position in the flash memory\nthe Espressif GUI based tool will work correctly but not after esptool has been used. It works up to baud rates of 460800 (not bothered to go any higher). If I use this tool from the start it flashes everything. If I use this tool after esptool it will either (esptool 2.5.1 and above) not flash at all and report an unknown flash vendor as shown above, or (esptool 2.5.0) the boot sequence shows the chip trying to boot user2 and getting an invalid magic (there's no user2 loaded), without it ever appearing to try and boot from user1. This is regardless of whether I flash just the user1 bin or the entire boot/user1/defaults. I have to use NodeMCU once to 'reset' the chip and then flash everything and then my binary will boot.\nesptool behaves pretty much exactly the same at baud rates from 32k up to 460800. If I reset the chip using NodeMCU it will say it flashed correctly and will say the checksum is fine, but will not boot, and then it will either (2.5.1 and above) not flash again, or (2.5.0) appear to flash but not boot correctly.\n\nAll these tests were done with the same v3.0 user bin, and the chip plugged into the same USB port. I uninstalled and reinstalled python and pySerial as well with no change. It does tend to point to something weird going on with esptool and the latest v3.0 binaries. Perhaps the other tools are ignoring the v3.0 changes and that's why they are working? I don't know.\nBTW the binary is prepared with gen_appbin.py supplied with the NonOS SDK, not with esptool.py. Yeah I know - it's really weird. And unfortunately I changed two things at the same time - I bounced esptool to the latest and I also moved to NonOS SDK v3.0 with the new partition table structure.\nAnd I should clarify - the ESP modules are not utterly bricked. The esptool establishes comms and gets the chip details as you can see from my comment up the top, and it downloads the helper stub, but then it is unable to actually flash the content.\nAs I look at it, I think perhaps the error message being returned is misleading. I don't think it's actually timing out, I think perhaps the error is actually that the flash chip details have somehow been zapped and it's failing because it can't determine the correct flash info. This is what seems to be the case with the Espressif GUI tool as well. Perhaps the only thing the NodeMCU flash tool is doing is NOT checking and just blasting away at the flash!?\nThis is not limited to one unit - I have 5 Lolin NodeMCU v3 modules and can repeat the behaviour with all of them. I haven't had time to try on my other module from different vendors but I'll try them too - I have about 5 different types, including Espressif WROOM2 modules on my own board.. BTW my code did deep sleep the module, but I have since commented that line out. Hard resets were the first thing I tried because I was indeed using deep sleep and it seemed to make no difference.. That's what I thought too - but you can see the output I get in the comment above after esptool has been used. When the chip is in trouble, it returns zeroes for chip details. When it's working, the GUI version returns:\nflash vendor:\nE0h : N/A\nflash devID:\n4016h\nQUAD;32Mbit\ncrystal:\n26 Mhz\nAnd yes, I did that as well as a bunch of other things. No effect. Worth noting that the deepsleep enabled version of the code flashed fine multiple times with the two other flash apps, and that the deepsleep disabled version made no difference to the behaviour.\nI also thought something might be affecting the SPI pins, as the Lolin unit exposes them on the pin headers. I had the unit in a stripboard test rig that I had made and I double checked that the SPI pins were not connected. I then worried that maybe even the short lengths of copper strip attached to the pins was causing some sort of inductance so removed the module (which meant deep sleep was not going to come back, so that was when I commented out the line in the code). Made no difference.\nI then added a battery socket and boosted the power to the strip board. No diff.\nThen I started randomly grabbing modules from my box - they were not attached to anything and were just on my bench. Same issue.. OK I think we are getting somewhere - I am now pretty sure it's related to the deep sleep issue, but that's raised a few questions...\nI pulled the very latest esptool.py, and went through all the scenarios I described earlier and I found I could actually repeatedly use esptool to flash code that did not deep sleep.\nI then uncommented the deep sleep lines and found it flashed the first time but the module was messed up after that.\nI then went through the process and 'fixed' it with the NodeMCU flasher\nI then did the process all over again and got same results\nI then did the reset as you described and held the flash button while plugging in and kicking off esptool, this time holding it well into the flash process when I was sure it was trying to communicate with the module, and this time the esptool was able to flash the module correctly.\nI then reset and checked the code was running, then tried to flash and got nowhere, then did the hard reset and flashed and it worked fine.\nSo I think you are correct - it's deep sleep related problems, but:\n - I have been flashing this same deep sleep enabled code for the last 6 months and had no problems until the last week or so when I moved to esptool latest and SDK3 latest\n - did something change in SDK v3.1 that has made deep sleep a bigger issue?\n - did something change in esptool that has made deep sleep a problem again?\n - why does the NodeMCU flash tool always work?\n - most importantly can we find out what they are doing and put it in esptool!!!???\nI'm pleased the issue has been narrowed down, but it's still going to cause much annoyance with my development cycle if I have to reset like that every time I want to flash. I guess I can do some things with deep sleep disabled but it would be ideal if that didn't have to happen. I actually built up my test board because in the first revision of my custom PCB I connected the wake pin directly and it stopped me being able to autoflash (I've added a Schottky in rev2), so now I am back to square one.. I saw that comment in #351 and had just tried it when you commented - and yes, I can flash the module without the stub. What is really weird is that I swear I tried all those things before and they didn't work but it's now all lining up the same as the issue above.\nRemoving the stub means that the esptool baud rate is fixed - I've pumped the Windows COM port definition up to 128000, but it appears that the baud rate used is 115200 (which is what my code sets it to, so maybe that's why) so it's still very slow. \nWith the stub, and with the other flash tools I can get > 460800 baud. That doesn't seem to be what it's telling me. This is what I see:\n```\nd:/xtools/bin/esptool.py --no-stub -p /dev/ttyS3 -b 460800 write_flash -ff 40m -fm qio -fs 4MB-c1 0x01000 firmware/upgrade/user1.4096.new.6.bin\nesptool.py v2.6-beta1\nSerial port /dev/ttyS3\nConnecting....\nDetecting chip type... ESP8266\nChip is ESP8266EX\nFeatures: WiFi\nMAC: 5c:cf:7f:02:9a:b7\nWARNING: ROM doesn't support changing baud rate. Keeping initial baud rate 115200\nEnabling default SPI flash mode...\nConfiguring flash size...\nErasing flash...\nTook 1.93s to erase flash block\nWriting at 0x00001000... (0 %)\nWriting at 0x00001400... (0 %)\nWriting at 0x00001800... (1 %)\nWriting at 0x00001c00... (1 %)\nWriting at 0x00002000... (2 %)\n.\n.\n.\nWriting at 0x0003a000... (99 %)\nWriting at 0x0003a400... (99 %)\nWriting at 0x0003a800... (100 %)\nWrote 236544 bytes at 0x00001000 in 24.9 seconds (75.9 kbit/s)...\nLeaving...\nHard resetting via RTS pin...\n```\nWhereas with the stub operating it's:\n```\nd:/xtools/bin/esptool.py -p /dev/ttyS3 -b 460800 write_flash -ff 40m -fm qio -fs 4MB-c1 0x01000 firmware/upgrade/user1.4096.new.6.bin\nesptool.py v2.6-beta1\nSerial port /dev/ttyS3\nConnecting........_\nDetecting chip type... ESP8266\nChip is ESP8266EX\nFeatures: WiFi\nMAC: 5c:cf:7f:02:9a:b7\nUploading stub...\nRunning stub...\nStub running...\nChanging baud rate to 460800\nChanged.\nConfiguring flash size...\nCompressed 235636 bytes to 173363...\nWriting at 0x00001000... (9 %)\nWriting at 0x00005000... (18 %)\nWriting at 0x00009000... (27 %)\nWriting at 0x0000d000... (36 %)\nWriting at 0x00011000... (45 %)\nWriting at 0x00015000... (54 %)\nWriting at 0x00019000... (63 %)\nWriting at 0x0001d000... (72 %)\nWriting at 0x00021000... (81 %)\nWriting at 0x00025000... (90 %)\nWriting at 0x00029000... (100 %)\nWrote 235636 bytes (173363 compressed) at 0x00001000 in 4.5 seconds (effective 417.2 kbit/s)...\nHash of data verified.\nLeaving...\nHard resetting via RTS pin...\n```\nVery big diff. You legend! That's done the trick it seems. What version of esptool are you using? It may be useful to try the Espressif supplied GUI version of the flash tool, as I have also been getting the same errors and corruptions with the latest versions of esptool on an ESP8266 unit. Perhaps they are related?. @reithose said:\n\nSame error here after running:\nesptool.py erase_flash\n```\nesptool.py v2.5.1:\nFound 3 serial ports\nSerial port /dev/cu.wchusbserialfd120\nConnecting....\nDetecting chip type... ESP8266\nChip is ESP8266EX\netc..\nErasing flash (this may take a while)...\nA fatal error occurred: Timed out waiting for packet content\n```\nI have a WEMOS D1 R2.\n\nI think your issue is slightly different, as you're getting an initial response from the unit (the chip type is returning values).\nThere are a series of problems being reported where esptool isn't flashing units that have gone into deep sleep or are stuck in a wdt reset loop (see #193, #351 and #380). In my case I found that the nodemcu flash tool worked all the time, but that I could use esptool by following the hard reset described by @projectgus in #380 \nObviously this is not an ideal approach and it would be great to work out how the nodemcu flash utility is managing to flash every time, but can you try the hard reset and see if that allows you to flash?. ",
    "lev2k": "This \"issue\" can be closed.\nAfter some tests I can confirm, it's a hardware/driver (no official Win10 drivers), issue under Win 10.\nSame device works reliable under Windows 7.. ",
    "geonhong": "Sorry for late reply and now this issue has been resolved.\n\n\nI am using ESP8266 module, which can easily be found on the internet, such as AliExpress.\nI bought one at a local web store:\nhttps://smartstore.naver.com/ic11401/products/548797461?NaPm=ct%3Djo9hjp0z%7Cci%3Dcheckout%7Ctr%3Dppc%7Ctrx%3D%7Chk%3D6a879a99299bc7c313e14e0e0e79c500ffebd72a\n\n\nThe problem mostly regarded to the power source. \nI have been using FTDI232 for flashing an ESP8266 module and 3.3V power source from the FTDI232 was applied to the ESP8266. And it's been connected to my MacBook Pro.\nI have no idea about the reason why it's been resolved after I replaced the power source, anyway, it has been resolved at the moment.. It was another symptom of misuse of the power source.\nResolved.. \n\n",
    "GPL71": "Thank you so much.....\nThis is ok....\nI\u2019m using Terminal on Mac to run esptool\nThen simply:\n1- put all .bin files in the dame directory of esptool\n2- run esptool\n3- flash\nNow.... what\u2019s the path of esptool on Mac?\nI\u2019d installed it by terminal following instructions on GitHub\nThank you so much for your help\nGianluca\nInviato da iPad\n\nIl giorno 19 set 2018, alle ore 09:41, Angus Gratton notifications@github.com ha scritto:\nHI @GPL71 ,\nI'm not sure I understand the question.\nIf you place all the .bin files in the same directory and run esptool.py while in this directory, then you can flash.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. \n",
    "CaptainMiddle": "Hi\nTry to set your flash size to 8MB. I had the same problem and it worked for me. ",
    "atoy100": "This issue can be/was solved by reading the contents of the .bin files using the esptool.py read_flash from the ESPFlashDownloadTool_v3.6.4 flash, and then reflashing with those good .bin files using esptool.py.  It appears the tool changes a couple bits that esptool.py does not.. ",
    "Zeni241": "Thanks a lot for your resonse, I tried --no-stub and it did'nt work either. I bought another exactly same Lolin NodeMCU V3 and it is working fine. That means this particular piece of chip has some hardware problem.  Thanks again.. ",
    "ron4all": "Hi Zeni241 - Thank you for the update, my NodeMCU has the same issue, i can stop troubleshooting now!. ",
    "cyberman54": "@projectgus No, i don't, and unfortunately the pycom expansion boards are not well documented.\nSince the pycom bootloader is able to switch the ESP32 in programming mode, they ultimately must use the same switching mechanism in their software as described here, what means that the hardware on the expansion board must support switching EN and GPIO0 pins. They write that the don't use a typical USB-UART chip like CP210x, but do it with a PIC processor with own firmware on the expansion board. So it should be possible to find out how it works by reverse engineering of the PIC firmware.. ",
    "magnomp": "Sorry, I think I should have posted it on esp-idf. Already reposted there. ",
    "Ralim": "Hi @projectgus, \nYes indeed, I'm attempting to flash an ESP32 from another ESP32.\nMy code for the flashing is based on the code from the flasher stub program, and I'm using the exact same checksum routine etc. The length field is correct as far as I can decipher myself, and also shifting it by 1 either direction throws ESP_BAD_DATA_LEN.\nI've been trying to force the two to upload the same data but manipulating the esptool to match hasn't gone overly well.\nThat's fair enough on the ROM codes, just found it odd that you note that they are different but then never document them.\nI've also found that changing the baud rate is very sensitive (cant seem to go higher than 115200) without the ESP stopping responding to packets entirely, is there an interaction between using two ESP32's that I could be missing here ? (the flasher is set to fixed cpu frequency, without dynamic scaling).\nUsing uart1 with ref_tick so I thought that the baud rate should be fairly accurate?\n. I send the same SYNC pattern as the boot loader until I see a response from the ESP that decodes correctly, (following both esptool and the wiki). I start the connection at 57600 initially and then once the stub boot loader has been uploaded and I have received the OHAI message I then send the spi parameters and then the baud rate change (I think this is the order, I've matched the same order as the esptool).\nI dont see framing errors on the signal analyzer in its decoding of any of the commands that I send at the higher speeds, though it does measure the speed as about 1-2% fast if i let its \"autobaud\" work it out. (But does decode fine if i manually set the baud rate).\nNo discernable noise really on the oscilloscope, but I will confirm and double check this.\nRunning at 9600, 57600,115200 and 230400 all just result in bad checksum errors, anything higher than 230400 results in no response from the ESP at all.\n. I have checked, and as far as I could spot it seemed to match (Hard to check all 16kb, but the first and last 512 definitely matched).\nI'll get more captures on Monday and be back with more information hopefully.\nAny idea how accurate the ESP32 UART is when in the bootloader ?. Thanks for your information, comparing small writes to the esptool gave the necessary insight to find that my inital 0x02 params differed from the esptool. Seems to be working fairly stable now.\nAlso found that when flashing from the ESP32, had to have dynamic power control disabled at core at 160MHz for it to maintain the baud rate correctly.. Sorry, yes I meant dynamic frequency scaling.\nJust 57600 baud and also 115200 baud, nothing too high.\n. I was only using the configuration in the make menu at the moment, and hadn't actually gone any further into the configuration of power management yet. \nI did have uart_config_t use_ref_tick = true in my uart setup however.. ",
    "xshocuspocusxd": "SOLVED\nPins SC and S1 was connected together. Low quality of the soldering \n\n. ",
    "Andermutu": "I have been working a little more and I have noticed that my ESP32 may be corrupted. When I select flash mode I get this message from Minicom.\nrst:0x1 (POWERON_RESET),boot:0x3 (DOWNLOAD_BOOT(UART0/UART1/SDIO_REI_REO_V2))\nwaiting for download\nThen, after a few seconds, I get some trash characters and need to reboot my module:\n\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\nThis happens in flash mode or normal boot mode, after a few seconds I get this trash characters and my ESP32 hangs. \nI have run also this code to check out the state:\nsudo espefuse.py --port /dev/ttyUSB0 summary\nespefuse.py v2.5.0\nConnecting........_.....\nEfuse fuses:\nWR_DIS                 Efuse write disable mask                          = 0 R/W (0x0)\nRD_DIS                 Efuse read disablemask                            = 0 R/W (0x0)\nCODING_SCHEME          Efuse variable block length scheme                = 0 R/W (0x0)\nKEY_STATUS             Usage of efuse block 3 (reserved)                 = 0 R/W (0x0)\nSecurity fuses:\nFLASH_CRYPT_CNT        Flash encryption mode counter                     = 0 R/W (0x0)\nFLASH_CRYPT_CONFIG     Flash encryption config (key tweak bits)          = 0 R/W (0x0)\nCONSOLE_DEBUG_DISABLE  Disable ROM BASIC interpreter fallback            = 1 R/W (0x1)\nABS_DONE_0             secure boot enabled for bootloader                = 0 R/W (0x0)\nABS_DONE_1             secure boot abstract 1 locked                     = 0 R/W (0x0)\nJTAG_DISABLE           Disable JTAG                                      = 0 R/W (0x0)\nDISABLE_DL_ENCRYPT     Disable flash encryption in UART bootloader       = 0 R/W (0x0)\nDISABLE_DL_DECRYPT     Disable flash decryption in UART bootloader       = 0 R/W (0x0)\nDISABLE_DL_CACHE       Disable flash cache in UART bootloader            = 0 R/W (0x0)\nBLK1                   Flash encryption key                            \n  = 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 R/W \nBLK2                   Secure boot key                                 \n  = 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 R/W \nBLK3                   Variable Block 3                                \n  = 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 R/W \nCalibration fuses:\nBLK3_PART_RESERVE      BLOCK3 partially served for ADC calibration data  = 0 R/W (0x0)\nADC_VREF               Voltage reference calibration                     = 1121 R/W (0x3)\nConfig fuses:\nXPD_SDIO_FORCE         Ignore MTDI pin (GPIO12) for VDD_SDIO on reset    = 0 R/W (0x0)\nXPD_SDIO_REG           If XPD_SDIO_FORCE, enable VDD_SDIO reg on reset   = 0 R/W (0x0)\nXPD_SDIO_TIEH          If XPD_SDIO_FORCE & XPD_SDIO_REG, 1=3.3V 0=1.8V   = 0 R/W (0x0)\nSPI_PAD_CONFIG_CLK     Override SD_CLK pad (GPIO6/SPICLK)                = 0 R/W (0x0)\nSPI_PAD_CONFIG_Q       Override SD_DATA_0 pad (GPIO7/SPIQ)               = 0 R/W (0x0)\nSPI_PAD_CONFIG_D       Override SD_DATA_1 pad (GPIO8/SPID)               = 0 R/W (0x0)\nSPI_PAD_CONFIG_HD      Override SD_DATA_2 pad (GPIO9/SPIHD)              = 0 R/W (0x0)\nSPI_PAD_CONFIG_CS0     Override SD_CMD pad (GPIO11/SPICS0)               = 0 R/W (0x0)\nDISABLE_SDIO_HOST      Disable SDIO host                                 = 0 R/W (0x0)\nIdentity fuses:\nMAC                    MAC Address                                     \n  = 24:0a:c4:8a:b2:d4 (CRC 4d OK) R/W \nCHIP_VER_REV1          Silicon Revision 1                                = 1 R/W (0x1)\nCHIP_VERSION           Reserved for future chip versions                 = 0 R/W (0x0)\nCHIP_PACKAGE           Chip package identifier                           = 0 R/W (0x0)\nFlash voltage (VDD_SDIO) determined by GPIO12 on reset (High for 1.8V, Low/NC for 3.3V).\nPlease any help is higly appreciated.\nThanks.\n. Hi, after removing all the GPIO and ADC connections everything works as expected. Can anyone please explain where is the problem with GPIOs? Maybe some of them can not been used?\nThanks again. . ",
    "mau-lopez": "Anyone who has experienced this issue or could help me with it? It would be much appreciated. Thanks. ",
    "p-king": "So sorry, seems that I made a mistake. All works well now. Thanks a lot and best regards, Peter. Unfortunately I can't recall exactly. I've forgotten some important step of the instructions. As I went back to zero, started over again and followed the instructions letter by letter, it worked at the end. If you use a Rasberry Pi for flashing, it's important that you start the ESP inbetween every flash operation once: start in flashing mode to erase, then start again in normal mode, then start again in flashing mode for flashing the new firmware. Hope that helps!. ",
    "sanderveenman": "what did you do wrong and how did you resolve it? im having the same issue. . ",
    "LaurentLouf": "results.txt\nHere they are. That seems pretty fast for random data, so that might be something else that slowed us down quite a lot between flashing with a Pi and flashing with a desktop computer (compression speed was a fair bet though).\nWe'll probably switch to JTAG flashing, so unless you think this is a feature worth spending some time on, I can close the issue.. ",
    "gernoteger": "Workaround: Revert to 2.4.1. ",
    "snahmad": "How we can revert to 2.4.1. ",
    "cranphin": "Ran into the same issue here using the esp32-idf, I guess I can do something with git modules to change the version there?. Hi! Thanks for the speedy and considerate answer :)\nI understand all the points you make, and agree. Trying to do the time sensitive stuff over TCP and RFC2217 is just not a really viable option. At least we can leave this issue for other people so they'll know why :)\nI am still thinking about alternatives.\nThe only thing that doesn't work over RFC2217 is getting the module in flash mode, moving the full dtr/rts juggle into the server would work, it could be triggered by a custom telnet option. But to do that you'd have to call RFC2217 client code directly, instead of wrapped by the pyserial serial interface, and again it would likely need changing of the pyserial parts, unless the RFC2217 parts can be extended somehow (I don't code python, so dunno :) ).\nAnd the other obvious alternative is to just install (only) esptool on the machine with serial port access, and use scp+ssh or such, but downsides are that in my case (Windows) there's no ssh server, and this won't integrate with the esp-idf, you'd have to copy paste the esptool commandline, and monitor won't work :)\n. Has, success! I created a monster! :D\nAdding a custom telopt on both sides, that triggers flash mode, works! :)\nAnd it is doable with overriding classes (Just make sure pyserial is at least 3.1.0, since  there's a 'private' method that got renamed, lots a couple of hours on that.. :) )\nShort.ish story of what I did:\nNew package in a folder named rfc2217esp\ninit.py:\npython\nimport serial\nfrom .portmanager import PortManager\nserial.protocol_handler_packages.append(\"rfc2217esp.urlhandler\")\nportmanager.py:\n```python\nimport serial.rfc2217\nimport time\nPURGE_FLASH = b'\\x07' # Set the ESP in flash mode\nclass PortManager(serial.rfc2217.PortManager):\ndef __init__(self, serial_port, connection, logger=None):\n    super(PortManager, self).__init__(serial_port, connection, logger)\n\ndef _setDTR(self, state):\n    self.serial.setDTR(state)\n\ndef _setRTS(self, state):\n    self.serial.setRTS(state)\n    # Work-around for adapters on Windows using the usbser.sys driver:\n    # generate a dummy change to DTR so that the set-control-line-state\n    # request is sent with the updated RTS state and the same DTR state\n    self.serial.setDTR(self.serial.dtr)\n\ndef _telnet_process_subnegotiation(self, suboption):\n    if suboption[0:1] == serial.rfc2217.COM_PORT_OPTION and suboption[1:2] == serial.rfc2217.PURGE_DATA and suboption[2:3] == PURGE_FLASH:\n        if self.logger:\n            self.logger.info(\"Set ESP to flash mode\")\n\n        self._setDTR(False)  # IO0=HIGH\n        self._setRTS(True)   # EN=LOW, chip in reset\n        time.sleep(0.1)\n        self._setDTR(True)   # IO0=LOW\n        self._setRTS(False)  # EN=HIGH, chip out of reset\n        time.sleep(0.05)\n        self._setDTR(False)  # IO0=HIGH, done\n\n        self.rfc2217_send_subnegotiation(serial.rfc2217.SERVER_PURGE_DATA, PURGE_FLASH)\n\n    else:\n        super(PortManager, self)._telnet_process_subnegotiation(suboption)\n\n```\nAnd then a subfolder called 'urlhandler' with:\nAn empty init.py\nprotocol_rfc2217esp.py:\n```python\nimport serial.rfc2217\nPURGE_FLASH = b'\\x07' # Set the ESP in flash mode\nclass Serial(serial.rfc2217.Serial):\ndef __init__(self, *args, **kwargs):\n    super(Serial, self).__init__(*args, **kwargs)\n\ndef from_url(self, url):\n   return super(Serial, self).from_url(url.replace(\"esp\", \"\"))\n\ndef flash_esp(self):\n    if not self.is_open:\n        raise portNotOpenError\n    self.rfc2217_send_purge(PURGE_FLASH)\n\n```\nThe server needs patching ofcourse:\nhttps://github.com/pyserial/pyserial/blob/master/examples/rfc2217_server.py is patched with:\n```patch\n--- rfc2217_server.py   2018-12-03 21:59:18.797049200 +0100\n+++ rfc2217_server_esp.py       2018-12-03 22:03:02.349956200 +0100\n@@ -13,7 +13,7 @@\n import time\n import threading\n import serial\n-import serial.rfc2217\n+import rfc2217esp\nclass Redirector(object):\n@@ -21,7 +21,7 @@\n         self.serial = serial_instance\n         self.socket = socket\n         self._write_lock = threading.Lock()\n-        self.rfc2217 = serial.rfc2217.PortManager(\n+        self.rfc2217 = rfc2217esp.PortManager(\n             self.serial,\n             self,\n             logger=logging.getLogger('rfc2217.server') if debug else None)\n```\nAnd finally esptool.py, based on 2.4.1 because of the timeout issue.\nThis is the hard coded variety :)\n```patch\n--- esptool.py  2018-12-03 22:05:53.240032500 +0100\n+++ esptool_esp.py      2018-12-03 20:13:13.535194700 +0100\n@@ -33,6 +33,7 @@\n import zlib\n import string\n import serial.tools.list_ports as list_ports\n+import rfc2217esp\nimport serial\n@@ -396,23 +397,24 @@\n         # DTR & RTS are active low signals,\n         # ie True = pin @ 0V, False = pin @ VCC.\n         if mode != 'no_reset':\n-            self._setDTR(False)  # IO0=HIGH\n-            self._setRTS(True)   # EN=LOW, chip in reset\n-            time.sleep(0.1)\n-            if esp32r0_delay:\n-                # Some chips are more likely to trigger the esp32r0\n-                # watchdog reset silicon bug if they're held with EN=LOW\n-                # for a longer period\n-                time.sleep(1.2)\n-            self._setDTR(True)   # IO0=LOW\n-            self._setRTS(False)  # EN=HIGH, chip out of reset\n-            if esp32r0_delay:\n-                # Sleep longer after reset.\n-                # This workaround only works on revision 0 ESP32 chips,\n-                # it exploits a silicon bug spurious watchdog reset.\n-                time.sleep(0.4)  # allow watchdog reset to occur\n-            time.sleep(0.05)\n-            self._setDTR(False)  # IO0=HIGH, done\n+            self._port.flash_esp()\n+#            self._setDTR(False)  # IO0=HIGH\n+#            self._setRTS(True)   # EN=LOW, chip in reset\n+#            time.sleep(0.1)\n+#            if esp32r0_delay:\n+#                # Some chips are more likely to trigger the esp32r0\n+#                # watchdog reset silicon bug if they're held with EN=LOW\n+#                # for a longer period\n+#                time.sleep(1.2)\n+#            self._setDTR(True)   # IO0=LOW\n+#            self._setRTS(False)  # EN=HIGH, chip out of reset\n+#            if esp32r0_delay:\n+#                # Sleep longer after reset.\n+#                # This workaround only works on revision 0 ESP32 chips,\n+#                # it exploits a silicon bug spurious watchdog reset.\n+#                time.sleep(0.4)  # allow watchdog reset to occur\n+#            time.sleep(0.05)\n+#            self._setDTR(False)  # IO0=HIGH, done\n     for _ in range(5):\n         try:\n\n```\nAnd the last ingredient is to use something like the following as URL, in sdkconfig if the idf is used:\nrfc2217esp://host.docker.internal:2217\nIt's only slightly hacky.. :D\nStill, proof of concept, not sure I'd recommend making anything official out of it..\nBut it's a workaround for anyone looking for one I guess :)\n. Oh, and putting that url (rfc2217esp://host.docker.internal:2217) in sdkconfig does break idf monitor, cause it doesn't recognize it..\nHmm, I guess unregistering the existing protocol handlers, and then renaming ours to just rfc2217 would work, you lose the other url/protocols, but we probably don't need those for ESP stuff :)\n. Yep, that worked, you can find it all together with some cmd scripts to run it here: https://github.com/cranphin/Colourful/tree/048781c6354ebbd3b93d1fe18631a1fd642b1fd6. ",
    "jegajith": "@projectgus  Thank you for your answer . ",
    "EsdrasXavier": "Same issue\n\nOperation system:\nNAME=\"Linux Mint\"\nVERSION=\"18.1 (Sonya)\"\nPRETTY_NAME=\"Linux Mint 18.2\"\nVERSION_ID=\"18.2\"\nVERSION_CODENAME=sonya\nUBUNTU_CODENAME=xenial\n\n\nPython version: 2.7.12\nBoard: https://ae01.alicdn.com/kf/HTB1hFoBQXXXXXbhXXXXq6xXFXXXC/Placa-de-Desenvolvimento-ESP32-WiFi-Bluetooth-Ultra-Baixo-Consumo-De-Energia-Dual-N-cleos-ESP-32.jpg_640x640.jpg\n\nI'm trying to upload using arduino IDE and get the output:\n```\nesptool.py v2.5.0\nSerial port /dev/ttyUSB0\nConnecting........_..............._..............._____\nA fatal error occurred: Failed to connect to ESP32: Timed out waiting for packet header\nA fatal error occurred: Failed to connect to ESP32: Timed out waiting for packet header\n```\nI already read few issues and none of then workout for me.. @projectgus Thanks for your help, actually I change the board and worked fine, I think the board I was trying to use had some problem.. ",
    "DinoMesina": "Thank you, very much! \nThe problem is the poor quality of the board, there is no capacitors on power (3.3V), I have added a capacitor of 100nF and one of 22uF on the pins GND and 3v3 and now I can re-flash the ESP32! \nSome time it not start to flash but if retry it go... \nDino. ",
    "romgen": "I had the same problem on Windows 10 with a fresh install of python 3 and pip install esptool.\nIt seems that on windows, you need to specify \"python\" before issueing the command. \nSo instead if esptool.py -p PORT erase_...., you need to use python esptool.py -p PORT erase. ",
    "ForceFedDSM": "Thanks for all the help guys. I used the suggestion from projectgus and it worked fine. I ran the command as python esptool.py -p COM5 erase_flash and that worked. I don\u2019t know how to do the fancy formatting on my phone so sorry for the text only reply and thanks again for all your suggestions. . ",
    "gbdb": "Hi, \nI'm working on this with Lemonbuzz, here is the schematic that we use..\nhere is the main chip decoupling and EN pin https://i.imgur.com/T6Fp3Nm.png\nIO12 is simply for external power button (even if called ResetSwitch) with a pull down.\nhere is our RX/TX header ; https://i.imgur.com/8foyFLr.png\nI do have a onboard battery for RTC clock, (sharing just in case); https://i.imgur.com/Fd07B74.png\npowering from 12volts; https://i.imgur.com/iq2hxK0.png\nthe rest of circuit is specific to our needs... \nthe chip we use is a brand new module from digikey ; 1904-1024-1-ND \nhttps://www.digikey.ca/product-detail/en/espressif-systems/ESP32-WROOM-32D-(8MB)/1904-1024-1-ND/9381733\nwe try to flash using FT232R usb module from sunfounder.. \nplease help us finding the way to flash this board :)\n. ",
    "reithose": "Same error here after running: \nesptool.py erase_flash\n```\nesptool.py v2.5.1:\nFound 3 serial ports\nSerial port /dev/cu.wchusbserialfd120\nConnecting....\nDetecting chip type... ESP8266\nChip is ESP8266EX\netc..\nErasing flash (this may take a while)...\nA fatal error occurred: Timed out waiting for packet content\n```\nI have a WEMOS D1 R2.. ",
    "grandcat": "Thanks for your input and sorry for the late reply.\nI will have a look at the additional --flash-size keep option. However, it obfuscates the issue in this tool imo.\nFor your first approach about parsing the ESP32 binary image. This would mean that the flash tool is aware of the encryption key, isn't it? Otherwise, the byte sequence is still just random.\n. ",
    "aaronleung": "It's not a VM. Seems like a pretty big issue that isn't worth solving. Going to be using ESP32 moving forward since it has better support, documentation and hardware. Closing the issue. . ",
    "nandohdc": "Hi @projectgus ,\nThank you so much for replying this thread.\nI tried to use read_flash and the output didn't match hello-world.bin.\nesptool.py -p /dev/ttyUSB0 -b 115200 read_flash 0 0x10000 flash_contents.bin\nAfter this, I tried to compare both files\nls -all hello-world.bin flash_contents.bin\nResult:\n\nBoth files are different in size and contents, you can see that in print right below.\nvbindiff hello-world.bin flash_contents.bin\nResult:\n\nI don't know if the security configurations would make any difference but I'm post them here.\nResult:\n\n. Hi @projectgus ,\nIt worked just fine. \nSorry for don't know how to read properly, hahaha xD\nThank you so much, Angus!\n. ",
    "lordneon": "Hi @projectgus thanks for your response.\nSo with --no-compress flag I get the same checksum error.\nWith the --no-stub option I get the fatal error: \"A fatal error occurred: Failed to write to target Flash after seq 18 (result was 0108)\"\nThis occurs when I set the baudrate to 9400 as well.\nAnything else I can try?\n```\n$ esptool.py --port /dev/ttyUSB0 -b 9400 --no-stub write_flash -fm dout --flash_size=detect 0 esp8266-20180511-v1.9.4.bin\nesptool.py v2.5.1\nSerial port /dev/ttyUSB0\nConnecting........_.....___.....\nDetecting chip type... ESP8266\nChip is ESP8266EX\nFeatures: WiFi\nMAC: 84:f3:eb:61:6d:f4\nEnabling default SPI flash mode...\nConfiguring flash size...\nAuto-detected Flash size: 1MB\nErasing flash...\nFlash params set to 0x0320\nTook 0.37s to erase flash block\nWriting at 0x00004800... (3 %)\nA fatal error occurred: Failed to write to target Flash after seq 18 (result was 0108)\n```\n. ",
    "vijayprakash1": "Hi @projectgus ,\nThanks for the response. I have solved the problem now my device is working well.\nProblem was from my hardware design side. I have connected GPIO16 and GPIO17 (UART2) to SIM module. When I read datasheet in details its saying these two pins GPIO16 and GPIO17 are connected to SPI Flash so I can't use these two pins as peripheral.\nWhen I disconnected these two pins its started working as expected.\nRegarding the inductor I will correct in my design.\nNote: Earlier I was using ESP32 Wroom for my application thought to replace this by PICO D4 and ESPressif reverse the few connections like (GPIO9 and GPIO10) are connected to SPI Flash in ESP32 Wroom) but In PICO D4 they are using (GPIO16 and GPIO17) or SPI Flash.  . ",
    "renegat56": "Hi Angus,\nthx for the answer. I tried it with the -fm parameter before the write(read)_flash command like -b or -p parameter.\nAnd yes, the reading works without that parameter. Unfortunately if have two different ESP-01 with different flash. One gave the error on the command \"esptool.py -p COM4 -b 115200 read_flash 0 0x100000 test.bin\" :\nA fatal error occurred: Corrupt data, expected 0x1000 bytes but received 0xfff bytes.\nSo I thought this is related with the flash_mode, but it is not. Strange is, that the ESP-01 with the 'only dout' flash can be read, but the other one with the QIO flash gave the above error.\nNevertheless the Arduino sketch on it is working, but I can not make a .bin backup with esptool.\nDo you or anybody else have an explanation for the error message?\nThx!. Hi Angus,\nhere is a result of reading the esp-01 flash with lower baudrate (below 38200 it does not connect at all) \nD:\\Apps\\ProgrammingTools\\ESP8266 Tools\\esptool_for_windows>esptool.py -p COM4 -b 38400 read_flash 0x50 0x10 test.bin\nesptool.py v2.6\nSerial port COM4\nConnecting....\nDetecting chip type... ESP8266\nChip is ESP8266EX\nFeatures: WiFi\nMAC: cc:50:e3:07:d7:7c\nUploading stub...\nRunning stub...\nStub running...\nA fatal error occurred: Corrupt data, expected 0x1000 bytes but received 0xf bytes\nCan I read starting from anywhere (0x50) and can I read less than 4096bytes? The error looks strange to me.\nAny other recommendation?\nRainer\n. Again thx for the reply. Everything else works fine, writing flash with espressif tool, running applications in micropython, lua or arduino. I'm programmimg esp8266 and esp32 since more than a year and have about 20 running as server or clients for my wlan net.\nSo I'm sure that everything is electrically ok. It is powered externally, not by usb. I have another ESP-01 which I can read with esptool.py.\nSo maybe something wrong especially with one board.\nBut now I found another tool, which read the flash correctly (crosschecked by writing back to another esp-01).\nIt's called esp_tool.exe and running under windows 7. Do you know that?\nesp_tool_ReadFlash.zip\n. ",
    "dickyrd": "I too have the same error and I have not connected anything on GPIO pins 6,7,8,9,10,11\nArduino: 1.8.8 (Windows Store 1.8.19.0) (Windows 10), Board: \"ESP32 Dev Module, Disabled, Default, 240MHz (WiFi/BT), QIO, 80MHz, 4MB (32Mb), 921600, None\"\nSketch uses 199796 bytes (15%) of program storage space. Maximum is 1310720 bytes.\nGlobal variables use 12968 bytes (3%) of dynamic memory, leaving 314712 bytes for local variables. Maximum is 327680 bytes.\nesptool.py v2.6-beta1\nSerial port COM9\nTraceback (most recent call last):\n  File \"esptool.py\", line 2865, in \n  File \"esptool.py\", line 2858, in _main\n  File \"esptool.py\", line 2565, in main\n  File \"esptool.py\", line 213, in init\n  File \"site-packages\\serial__init__.py\", line 88, in serial_for_url\n  File \"site-packages\\serial\\serialwin32.py\", line 62, in open\nserial.serialutil.SerialException: could not open port 'COM9': WindowsError(31, 'A device attached to the system is not functioning.')\nFailed to execute script esptool\nthe selected serial port Failed to execute script esptool\n does not exist or your board is not connected\nThis report would have more information with\n\"Show verbose output during compilation\"\noption enabled in File -> Preferences.\n. ",
    "Twistx77": "Sorry, I forgot to respond to this post. Finally we found the solution... it was a mistake in the PCB assembly a 1K pull-up resistor was soldered to the EN pin instead of 10K. We had the correct value in the schematic but there was an error in the assembly process. \nWe are using a CP2102N. I hope this can be useful for someone else.. ",
    "mreutman": "Thanks for the information! I guess with this in mind, I'll go ahead and close the issue. I'll just stick to doing flash operations using the host OS rather than the guest.. ",
    "CurryGuy": "Hi @projectgus,\nThanks for your reply, and sorry for the late response.\nI don't know the origin of the module, our PCB manufacturer got it from a chinese supplier.\nHere's a photo of the module:\n\nThank you for your time.. ",
    "sunbearc22": "Can standardize to using underscore instead? . While reading esptools.py, I noticed most of args attributes requiring spacing btwn words used underscore. E.g. args.override_vddsdio, args.spi_connection, args.no_stub, args.flash_size, args.addr_filename, ... Also the same convention is used on the attributes of esp. the only exception seem to be ersae-all ? I think it can make the code more consistent and easier to read.. Also these:\nhttps://github.com/espressif/esptool/blob/master/esptool.py#L2486\nhttps://github.com/espressif/esptool/blob/master/esptool.py#L2489\nNo issue. I understand from you that for argparse, the options in commandline will appear with hypen. These are then converted to underscore at the backend, hence code-wise attributes of args with more than one word will still be denoted by underscore, e.g. args.override_vddsdio, args.spi_connection, args.no_stub, args.flash_size, args.addr_filename, args.erase_all,...  \nLook forward to finally having a consistent convention.  ;). Below is a section of my code. After introducing the line self.esp.connect() there, my code worked. Why is this the case? Why is .connect() needed before running .get_chip_description()?\n```\n        try:\n            self.esp = esptool.ESP32ROM( self.port.get(), self.baud.get(),  )\n            self.esp.connect()  #I added this line\n        except (esptool.FatalError, OSError) as err:\n            self.esp = None\n            self.detecting = False\n            raise\n            print( \"{} failed to connect to a Espressif device: {}\".format( port, err ) )\n        else:\n            print( 'self.esp = ', self.esp.dict )\n            self.detecting = False\n            self.status.set( 'Detected' )\n```. I also encountered the same Timeout fatal error during the .slip_reader() function when the .write_flash() function is executed. May I know what is causing the Timeout error and how to overcome it? Below is a printout from the .write_flash() function prior to the error.  \n```\nargs.compress =  True\nVerify file sizes fit in flash\nflash_end =  4194304\naddress =  4096\nargfile.tell() =  1087456\nwrite_flash main loop\nErasing flash...\ndef pad_to(data, alignment, pad_character=b'\u00ff'):\nlen(data) =  1087456\npad_mod =  0\nCompleted pad_to\ndef _update_image_flash_params(esp, address, args, image):\nmagic=233, flash_mode=2, flash_size_freq=32\nesp.BOOTLOADER_FLASH_OFFSET=4096, address=4096\nesp.ESP_IMAGE_MAGIC =  233\nflash_mode =  0\nflash_freq =  0\nflash_size =  32\nflash_size =  32\nFlash params set to 0x0020\nuncsize =  1087456\nDownload file to flash Get ratio & block\nparity='N', stopbits=1, timeout=None, xonxoff=False, rtscts=False, dsrdtr=False)\ncompress is True\nesp.FLASH_WRITE_SIZE =  1024\nesp.IS_STUB =  False\nratio =  1.5819658776156227\nnum_blocks =  672\nerase_blocks =  1062\nwrite_size =  1087488\ntimeout =  32.62464\nCompressed 1087456 bytes to 687408...\nException in Tkinter callback\n (most recent call last):\n  File \"~/.pyenv/versions/3.6.7/lib/python3.6/tkinter/init.py\", line 1705, in call\n    return self.func(args)\n  File \"~/project/test.py\", line 451, in _write_flash\n    blocks = esp.flash_defl_begin(uncsize, len(image), address)\n  File \"~/.local/share/virtualenvs/Esp32-zoIgntnu/bin/esptool.py\", line 104, in inner\n    return func(args, **kwargs)\n  File \"~/.local/share/virtualenvs/Esp32-zoIgntnu/bin/esptool.py\", line 630, in flash_defl_begin\n    timeout=timeout)\n  File \"~/.local/share/virtualenvs/Esp32-zoIgntnu/bin/esptool.py\", line 356, in check_command\n    val, data = self.command(op, data, chk, timeout=timeout)\n  File \"~/.local/share/virtualenvs/Esp32-zoIgntnu/bin/esptool.py\", line 334, in command\n    p = self.read()\n  File \"~/.local/share/virtualenvs/Esp32-zoIgntnu/bin/esptool.py\", line 279, in read\n    return next(self._slip_reader)\n  File \"~/.local/share/virtualenvs/Esp32-zoIgntnu/bin/esptool.py\", line 1890, in slip_reader\n    raise FatalError(\"Timed out waiting for packet %s\" % waiting_for)\nesptool.FatalError: Timed out waiting for packet header\n```. @projectgus I have just uploaded my code here. Appreciate your advice on what is causing the timeout fatal error.\nSummarising my issue, I was running esptool.py write_flash() method and encountered the fatal Timeout error. To understand the matter, I replicated the write_flash and a few other relevant esptooly.py functions to my script (see lines 403 to 566) to understand the issue. I traced the issue to originate from line 455. According to python's Exception msgs, the matter is traced to the slip_reader() method.. @projectgus May i know the meaning of the following byte value: b'\\xc0', b'\\xdb', b'\\xdc', b'\\xdd' used in slip_read() function?? Where is the documentation describing these byte values? \n```\n\n\n\nint.from_bytes(b'\\xc0', byteorder='little')\n192\nint.from_bytes(b'\\xdb', byteorder='little')\n219\nint.from_bytes(b'\\xdc', byteorder='little')\n220\nint.from_bytes(b'\\xdd', byteorder='little')\n221\n``\nUpdate:\nI found 2 definitions but could not make out the other 2:b'\\xc0'rep end of packet.b'\\xdb'rep start of escape sequence.b'\\xdc'rep in_escape ???b'\\xdd'rep in_escape ???. @projectgus After activating the equivalent of--no-stubin my code, i.e. by settingself.args.no_stub = FalseinWriteFlash()object, and runningesptool.ESPLoader.run_stub()` before calling the esptool.write_flash(), the fatal timeout error disappeared and my code was able to write to flash. \n\n\n\nHowever, when access the device via $ picocom /dev/ttyUSB0 -b 115200, I end up seeing an endless trial of the same data (see below). In short, I am able to write to flash now but the writing seem erroneous. Can you tell me what is causing these 1162 mmu set 00010000, pos 00010000? Thanks. I have uploaded my revised code for your consideration. . \n```\n$ picocom /dev/ttyUSB0 -b 115200\npicocom v1.7\nport is        : /dev/ttyUSB0\nflowcontrol    : none\nbaudrate is    : 115200\nparity is      : none\ndatabits are   : 8\nescape is      : C-a\nlocal echo is  : no\nnoinit is      : no\nnoreset is     : no\nnolock is      : no\nsend_cmd is    : sz -vv\nreceive_cmd is : rz -vv\nimap is        : \nomap is        : \nemap is        : crcrlf,delbs,\nTerminal ready\n\ufffd0x00,hd_drv:0x00,wp_drv:0x00\nmode:QIO, clock div:2\nload:0x3fff0018,len:4\nload:0xcdc72100,len:687535457\n1162 mmu set 00010000, pos 00010000\n1162 mmu set 00020000, pos 00020000\n1162 mmu set 00030000, pos 00030000\n1162 mmu set 00040000, pos 00040000\n1162 mmu set 00050000, pos 00050000\n1162 mmu set 00060000, pos 00060000\n1162 mmu set 00070000, pos 00070000\n1162 mmu set 00080000, pos 00080000\n1162 mmu set 00090000, pos 00090000\n1162 mmu set 000a0000, pos 000a0000\n1162 mmu set 000b0000, pos 000b0000\n1162 mmu set 000c0000, pos 000c0000\n1162 mmu set 000d0000, pos 000d0000\n1162 mmu set 000e0000, pos 000e0000\n1162 mmu set 000f0000, pos 000f0000\n1162 mmu set 00100000, pos 00100000\n1162 mmu set 00110000, pos 00110000\n1162 mmu set 00120000, pos 00120000\nets Jun  8 2016 00:22:57\nrst:0x10 (RTCWDT_RTC_RESET),boot:0x13 (SPI_FAST_FLASH_BOOT)\nconfigsip: 0, SPIWP:0xee\nclk_drv:0x00,q_drv:0x00,d_drv:0x00,cs0_drv:0x00,hd_drv:0x00,wp_drv:0x00\nmode:QIO, clock div:2\nload:0x3fff0018,len:4\nload:0xcdc72100,len:687535457\n1162 mmu set 00010000, pos 00010000\n1162 mmu set 00020000, pos 00020000\n1162 mmu set 00030000, pos 00030000\n1162 mmu set 00040000, pos 00040000\n1162 mmu set 00050000, pos 00050000\n1162 mmu set 00060000, pos 00060000\n1162 mmu set 00070000, pos 00070000\n1162 mmu set 00080000, pos 00080000\n1162 mmu set 00090000, pos 00090000\n1162 mmu set 000a0000, pos 000a0000\n1162 mmu set 000b0000, pos 000b0000\n1162 mmu set 000c0000, pos 000c0000\n1162 mmu set 000d0000, pos 000d0000\n1162 mmu set 000e0000, pos 000e0000\n1162 mmu set 000f0000, pos 000f0000\n1162 mmu set 00100000, pos 00100000\n1162 mmu set 00110000, pos 00110000\n1162 mmu set 00120000, pos 00120000\nets Jun  8 2016 00:22:57\n.\n.\n.\n```\n. @projectgus Thank you. Flashing in DIO mode worked.\nQuestions: \n1. According to wiki on Serial Protocol:\n\nBy default, esptool.py uploads a stub \"software loader\" to the IRAM of the chip. The software loader then replaces the ROM loader for all future interactions. This standardizes much of the behaviour.\n\nThis occurs because args.no_stub=False by default.\n   When writing to flash, can args.no_stub=True be used instead? When should one use args.no_stub=True?\n\n\nWhat does b'\\x07\\x07\\x12\\x20' + 32 * b'\\x55' do in the .syn() method? \n\n\nIn Wiki's explanation on Initial Synchronization, it writes:\n\nThe ESP chip is reset into UART bootloader mode. The host starts by sending SYNC commands. These commands have a large data payload which is also used by the ESP chip to detect the configured baud rate. The ESP8266 will initialise at 74800bps with a 26MHz crystal and 115200bps with a 40MHz crystal, and ESP32 always initialises at 115200bps. However the sync packets can be sent at any baud rate, and the UART peripheral will detect this.\n\n\nAm I correct to say that \"The ESP chip is reset into UART bootloader mode.\" is achieved during ._connect_attempt() method via Line 418 to 434? Is the UART bootloader the same as the ROM bootloader mention in the quote in question 1? If not, then can you explain what is \"UART bootloader mode\"?\nAm I correct to say that the rest of the above quote describes what the .syn() method do?\n\n\n\n\nesptool.py then (by default) uses the \"RAM Download\" sequence to upload software stub loader code to IRAM of the chip. The MEM_END command contains the entry-point address to run the software loader. The software loader then sends a custom SLIP packet of the sequence OHAI (0xC0 0x4F 0x48 0x41 0x49 0xC0), indicating that it is now running. This is the only unsolicited packet ever sent by the ESP. If the --no-stub argument is supplied to esptool.py, this entire step is skipped.\n   - Am I correct to say that the above description occurs when .run_stub() method is activated and not during the .connect() method?\n\n\nI am confuse with which device does the input and output in lines 438 and 439 refer to. Can you help clarify? Does input refers to the ESP32 device UART buffer and output refers to the computer(i.e. host) UART buffer? Or is it the other way round?\n. @projectgus Thank you for your advices. Here is the link to the GUI application that I have developed. I have mentioned you in my acknowledgement. Can you try it and share with me your comments? Cheers.. Here is the link to my work-in-progress script for Win10. The esptool.FatalError arises from running line L353. I have used the solution by @MartyMacGyver mentioned in Issue #136 to resolve my connection issue. After replacing esptool.py line 425 with time.sleep(2.0)  # Sleep longer and line 432 with time.sleep(0.5)  # Sleep longer, the above mentioned connection issue was resolved. That is,\n...\nself._port.setDTR(False)  # IO0=HIGH\nself._port.setRTS(True)   # EN=LOW, chip in reset\ntime.sleep(2.0)  # Sleep longer\nself._port.setDTR(True)   # IO0=LOW\nself._port.setRTS(False)  # EN=HIGH, chip out of reset\ntime.sleep(0.5)  # Sleep longer\n...\nMay I know why esptool.py default sleep settings for DTR and RTS aren't using the values provided by @MartyMacGyver? ~~I found that these longer sleep settings also benefitted connections between Linux OS to esp32 DevKit-V1 too; they shortened the connection duration.~~ . > Do you have a photo of this board? Is it ESP32 silicon revision 0? (esptool.py will print the silicon revision when it syncs).\n\nI am testing my script using a ESP32 DEVKITV1 that has a ESP32D0WDQ6(revision1). Looks the same as device shown in this site.\n\nI have used the solution by @MartyMacGyver mentioned in Issue #136 to resolve my connection issue. After replacing esptool.py line 425 with time.sleep(2.0) # Sleep longer and line 432 with time.sleep(0.5) # Sleep longer, the above mentioned connection issue was resolved. That is,\n\nWith regards to this observation that I had earlier made, I think it was just fortuitous that there was an improvement. On Windows 10, connection with the DevkitV1 worked well for about an hour of testing. Thereafter, it just could not connect. Puzzling?????? \nThe most reliable solution that I arrived at so far is to manually hold down the BOOT button on the DevKit1 and run ESPLoader.connect() method, or   while ESPLoader.connect() method is running to manually hold down the BOOT button until connection is established. I have hard coded this solution in my GUI app. See esp32flashwriter_v4_2.py which works on both Linux and Window10.\nDon't know why Window 10 is having such a connection issue. hmm....\n. > ESP32 revision 1 can't use this workaround as it relies on a silicon bug.\nCan you point me to the literature explaining line 403-404? What is this \"silicon bug\"?  At least now I know why the \"esp32 r0 workaround\" dont' connect Win10 to ESP32 DEVKITV1 well. \n\nI've also never heard of it helping on a non-Windows platform, although you're saying something different here.\n\nOne of the ESP32 DEVKITV1 I had did seemed to connect better to Linux after the change. Yet, now that I have revert to using the original \"esp32 r0 workaround\", it is connecting very quickly also. Maybe these ESP32 DEVKITV1 can be tempermental. In any case, I will strike out my earlier comment, please disregard it.. > So the board is \"DOIT ESP32 DEVKITV1\"? Including the manufacturer in the name is useful. :)\nOn the back of the board, it prints \"ESP32 DEVKITV1\" w/o the \"DOIT\" label. Any difference?\nMac: 24:0a:c4:xx:xx:xx,  Manufacturer: ff, Device:fff\nAny issue with this device?\n\nTry adding a capacitor between the EN and GND pins of your dev board. \n\nAccording to this pic, you mean to connect pins 2 and 15 (left side) with at least 100nF to 10uF?\n\nDifferent OSes have different timing around USB interactions, so the automatic reset can behave differently depending on OS and even specific host hardware.\n\nIf so, maybe esptool.ESPLoader._connect_attempt() method should include a condition check for platform types and correspondingly implement appropriate esp32r0_delay workaround? Or is this something espressif want esptool.py users to do?\n . Thanks. :)\n\nThere is no way to 100% solve this problem in software, because of the way the \"automatic reset circuit\" works and the fact we have to set RTS and DTR separately in two separate commands.\n\nWould setting RTS and DTR using two separate python threads/processes help?. I am sure I would have gotten a better device if I was more knowledgeable. Unfortunately, I am a newbie and the market seems to be filled with them. :sweat: Still, I greatly appreciate your advices. Will make the hardware changes in due course. :smile:\nFor the same device, I noticed that the voltage performance at the EN and GND Pins when connected to Linux can be far superior than what Windows 10 gives. I have evidenced my observations here to provide a basis to ask you if the issue I am facing is also related to the CP210x USB to UART Bridge Virtual COM Port (VCP) drivers for Winows 10 ? \nSorry to have taken up your bandwidth on this older board that is using the esp32 chip. . > I am not sure what you're seeing here, but I think it's probably to do with different hardware? Is the USB power cleaner from the Linux computer, or grounding relative to the scope is different, or something like this?\nDiscovered that clean voltage signals for the Linux + ESP32DevKitV1 combination could be obtained w/ and w/o connecting the ground on the scope's probe to the GND of the ESP32 board. However, the latter practice cannot be used to measure the voltage signal for the Windows 10 + ESP32DevKitV1 combination. I had to ensure that the ground on the scope probe is connected to the GND of the ESP32 board. Doing so irradicated all the failings that I had observed earlier. I have updated my previous pdf document with a picture of the clean signal from the Windows 10 + ESP32DevKitV1 combination. That said, the connectivity issue between Windows 10 and ESP32DevKitV1 still persists. \nGiven that the ESP32DevKitV1 has this design flaw that can be fixed by connecting the EN pin and the GND pin with a capitor, why is this solution only needed when Windows OS is used and not when Linux OS is used?  :confused: Thinking aloud here..... Thank you. \nI would like to measure the DTR voltages, which is given by GPIO0 pin. However, I dont' seem to be able to locate it in it's layout. Can you tell me which pin it is? I did probe the \"RTC_GPIO0\" at Left Pin 14, but I did not see the DTR voltages as set by esptool.ESPLoader._connect_attempt(). \n. After testing all the board's GPIO Pins, I initially thought Pins GPIO1 (i.e. U0RXD) and GPIO3 (i.e U0TXD) were likely suspects. I found GPIO14  (i.e. EMAC_TXD2) and GPIO15( i.e. EMAC_RXD3) yielded similar signal to EN but noisier. \nI also came across ESP32 Pin List . Found on \n- page 2 that: U0* is for the signals of UART0 module\n- page 6 that a mention of Signal No.: 16, Output Signals: U0DTR_out,  Output enable of output\nsignals: 1'd1,\n- page 9 a mention of \"Debugging Log on U0TXD During Booting\". I suspect it is saying that U0TXD will toggle True during ESP32 booting. Probably, this explains why GPIO1 have two groups of activities that toggles to LOW and HIGH after each time EN returns to HIGH from a LOW (as seen below).\n\nConcluding, I think the ESP32DeviKitV1 board with 30 pins do not have a pin to point to ESP32 GPIO0. However, a ESP32DeviKitV1 board with 36 pins may have such a pin.\n. Referring to the schematics at regions 3B, 2C, and 4C of esp32_Schematic Prints.pdf, I see GPIO0 (i.e. pin 25 of the ESP32 chip) as a connection to the chip's internal flash and the DTR pin of the CP2102 module, which is UART0 of the ESP32DevKitV1 board. GPIO0 appears not to be accessible via any of the GPIO pins of the ESP32DevKitV1 board.... except through the USB...?. Don't think I can probe the GPIO0 voltages. Is this correct?. \nThe satisfaction of finally being able to see esptool.ESPLoader._connect_attempt() in action. :smile:. Hope this image can help other users appreciate esptool.py.\nThank you again. :thumbsup:. ",
    "nobody102": "I got it working now.  Had to hold the button down for a while.  Thansks!. ",
    "mracst": "I have installed the script using pip install esptool command and the Python is the only one installed in my PC.\nIt works using the command python esptool.py -b 115200 --port COM15 read_flash 0x000000 0x100000 flash_1M.bin.\nHave you any suggestion to solve the problem with esptool.py.exe?\n. ",
    "lll000111": "Solved, it has to be /dev/ttyUSB1. ",
    "Fivefold": "Hello @projectgus \nThank you for the fast response.\n\nWhat version of esptool.py do you have? It seemed to get trimmed from the debug log.\n\nMy mistake, forgot to copy that line.\nv2.6\n\nIf you flash with esptool.py --no-stub ..., does this work?\n\nUnfortunately, no.\n```\n\nesptool.py --no-stub --port COM3 --baud 74880 write_flash --verify -fm dio 0x00000 firmware.bin\nesptool.py v2.6\nSerial port COM3\nConnecting....\nDetecting chip type... ESP8266\nChip is ESP8266EX\nFeatures: WiFi\nMAC: 84:f3:eb:b4:5c:d7\nEnabling default SPI flash mode...\n\nA fatal error occurred: Timed out waiting for packet header\n```\nI just realized that dio is an SPI flash mode. I am trying to flash via UART (i.e. the Rx and Tx pins instead of MISO, MOSI and so on). Is this the issue?\n\nIf you run esptool.py -p PORT flash_id, what does it say?\n\n```\n\nesptool.py -p COM3 flash_id\nesptool.py v2.6\nSerial port COM3\nConnecting...\nDetecting chip type... ESP8266\nChip is ESP8266EX\nFeatures: WiFi\nMAC: 84:f3:eb:b4:5c:d7\nUploading stub...\nRunning stub...\nStub running...\n\nA fatal error occurred: Timed out waiting for packet header\n```\nOne thing I forgot to mention ealier: When esptool says Connecting... I have to manually reset the module by pulling down the RST pin shortly. I suppose this is correct procedure?. Sorry for the late response. I was quite busy this week.\n\nWhat's connected to the module? Is it possible something is connected to one of the module pins which is shared with the flash chip?\n\nNothing besides the FTDI USB to Serial Module: image\n\nThis is one of the factors for ensuring the module gets stable power. Is the module installed on a PCB or a development board of some kind? Is there a low ESR capacitor placed close to the module on the PCB? (ie a 10uF ceramic cap or something of this kind).\nIf you have a photo of your setup, that would be ideal.\n\nI soldered the module to a perfboard using small wires (maybe too small for the supply). This is connected to a breadboard via pin headers. Here are two images of the setup. I included a short description to help out.\nFor this image I completely redid the breadboard wiring to get a better image and possibly rule out faulty breadboard contacts in the previous configuration. The error messages stayed the same. When connecting to the module via a serial monitor (in flashing mode) and resetting I now get ets Jan 8 2013,rst cause:2, boot mode:(1,7) (before it was (1,6)). I am not sure if this is relevant.\nThe ceramic cap used is only 100 nF; I don't have any larger ceramics at hand currently. I tried an electrolytic to no avail. Also the comparatively long wires might make the capacitor useless anyway. So if there are no other suggestions the next thing I would try (in this order) is: \n1. Get my hands on a 10 uF cap and solder it directly to the terminals of the module \n1. Redo the soldering and exchange the supply wires for larger ones. ",
    "darkfader": "It's funny how docs tell about \"land mines, dragons, and dinosaurs with laser guns\".\nSo, pycrypto is too old? Look like pycryptodome aims compatibility a bit and adds new stuff but still no optimized signing (isn't the most time consuming though). And cryptography has OpenSSL backend; It feels a bit heavy to me though but it can probably use AES-NI.\nAn alternative would be pyOpenSSL I guess.. int.from_byte and int.to_bytes should be rather quick.\nbigints are stored as an array of uint32_t and all it has to do is copy some bytes. I chose big-endian was chosen because the data bits were in reverse as well (and this made masking/tweaking pattern order looked more logical as well).\nI don't see a faster method for python2 right away. Perhaps suggest users to use python3 with a nice warning or automagically try python3...\nif __name__ == \"__main__\":\n    if sys.version_info[0] == 2:\n        try:\n            exit(os.execv('/usr/bin/env', ['env', 'python3', __file__] + sys.argv[1:]))\n        except OSError:\n            pass\n    main(). well.. big ints are there really, just not the conversion. So it might be easier just to implement these.\nI found functions:\n```\ndef to_bytes(n, length, endianess='big'):\n    h = '%x' % n\n    s = ('0'(len(h) % 2) + h).zfill(length2).decode('hex')\n    return s if endianess == 'big' else s[::-1]\nor a variant\ndef to_bytes(n, length, endianess='big'):\n    h = '%x' % n\n    s = codecs.decode(('0'(len(h) % 2) + h).zfill(length2), \"hex_codec\")\n    return s if endianess == 'big' else s[::-1]\n```\nfor int.to_bytes. Found some other code here https://gemfury.com/agriconnect/python:cryptography/-/content/utils.py\nA slightly modified version here:\n```\nimport binascii\nif hasattr(int, \"from_bytes\"):\n    int_from_bytes = int.from_bytes\nelse:\n    def int_from_bytes(data, byteorder, signed=False):\n        assert byteorder == 'big'\n        assert not signed\n    return int(binascii.hexlify(data), 16)\n\nif hasattr(int, \"to_bytes\"):\n    def int_to_bytes(integer, length=None, byteorder='big', signed=False):\n        return integer.to_bytes(\n            length or (integer.bit_length() + 7) // 8 or 1, byteorder, signed\n        )\nelse:\n    def int_to_bytes(integer, length=None, byteorder='big', signed=False):\n        assert byteorder == 'big'\n        assert not signed\n    hex_string = '%x' % integer\n    if length is None:\n        n = len(hex_string)\n    else:\n        n = length * 2\n    return binascii.unhexlify(hex_string.zfill(n + (n & 1)))\n\n```\nwhich seems to work.. ",
    "Darkblade48": "\nHi @Darkblade48 ,\n\nESP hardware in use: ESP8266(EX)\n\nExactly what hardware are you flashing, a Sonoff or something else?\nIf you're using a bare module on a breadboard, you probably need to add more capacitance to the module itself - a lot of vendors seem to ship modules that don't integrate enough power capacitance and it causes brownouts during flashing and during Wi-Fi operation as well.\nIf your setup is something unusual, do you have a photo of it?\n\nOops, I guess I forgot to mention that in my opening post. It is a Sonoff S31, nothing too unusual.. I didn't think to test the Sonoff before flashing it, since I've flashed several S20s in the past without any problems (using the same setup!).\nThe only other thing I can think of at this point is sagging 3.3V or simply a bad Sonoff?. I didn't think to test the Sonoff before flashing it, since I've flashed several S20s in the past without any problems (using the same setup!).\nThe only other thing I can think of at this point is sagging 3.3V or simply a bad Sonoff?. Oh, that is certainly most disappointing. Is there anyway to trouble shoot capacitance problems (or more directly, is there anyway to add capacitance to a particular pin to prevent brownouts)?\nI checked the spec sheet for the 3.3V power supply I'm using, and it's supposed to be able to output a maximum of 700 mA. I could try changing to thicker wires and give that a shot to troubleshoot potential current issues. . Strangely enough, when I run esptool.py --port COM13 --baud 9600 --no-stub write_flash -fs 1MB -fm dout 0x0 sonoff.bin I end up with the following error:\n```\nesptool.py v2.6\nSerial port COM13\nConnecting........_..............._..............._____\nA fatal error occurred: Failed to connect to Espressif device: Timed out waiting for packet header\n```\nNow interestingly, when I change the baud rate to 19200 and run the following: esptool.py --port COM13 --baud 19200 --no-stub write_flash -fs 1MB -fm dout 0x0 sonoff.bin it seems to detect the chip fine, but then times out with the following error:\n```\nesptool.py v2.6\nSerial port COM13\nConnecting........_..........__.....\nDetecting chip type... ESP8266\nChip is ESP8266EX\nFeatures: WiFi\nMAC: 68:XX:XX:XX:XX:XX\nEnabling default SPI flash mode...\nConfiguring flash size...\nErasing flash...\nA fatal error occurred: Timed out waiting for packet header\n```\nI haven't tried the hardware tweaks yet, but with regards to the capacitor between VCC & GND, I take it that I'm supposed to short the two together, with a capacitor? What voltage/capacitance would be good? I think I have some spare electrolytic 50V 1 uF caps lying around, but they're not exactly ideal as decoupling capacitors, I would assume. . I tried putting a 50V 10 uF capacitor between VCC and GND, and tried esptool.py --port COM13 --baud 115200 write_flash -fs 1MB -fm dout 0x0 sonoff.bin and esptool.py --port COM13 --baud 19200 --no-stub write_flash -fs 1MB -fm dout 0x0 sonoff.bin to the same error messages :(\nAt this point, I'm really at a lost...if it's hardware related, is there any actual way I can test? I can't even seem to load any other precompiled BIN file.. ",
    "YuchiRoo": "yes, we write some information into blk3, when we update the esptool, we found our manufacture tools work fail.. ",
    "Callahan93": "Okay - I happy to put this back to 10 (or maybe a compromise at 7?). I will have a look into this and feedback. Line 2471 - Yes, I will remove this.\nLine 2470 - I  think this is useful information but I am happy to remove it if that's what people would rather.. Will remove this change from this PR. True, I didn't spot this! - Will fix it. Done all_serial_ports_2 with the PySerial method. See https://stackoverflow.com/questions/12090503/listing-available-com-ports-with-python\nthat original method may be more reliable? \nBoth work fine on my machine. What do you prefer?. Done. No problem, all done. Sorted. Will try and look at this today. Put into a single line instead of a function. done. ",
    "heyinling": "I think we can set a long timeout, 30 or 60 seconds for example, when opening the port. It will not affect normal use cases, only make sure esptool will finally exit in the rare scenario I mentioned in commit message.. Sure. I have changed to 10 seconds.. "
}