{
    "saizai": "Yes-but:\na) you should be escaping your flashes at the view level anyway (rather than trusting to do it on every insertion)\nb) h() is easier :-p\nc) is there a situation where someone could insert to another user's flash, given that this gets added to the current session? They'd just attack themselves.\n. Hm, interesting attack scenario. Seems unlikely IMO, but also, everything should be prevented.\nI think this is more an argument for (a) - you should treat the flash as tainted in your view, and escape or whitelist it appropriately.\nHowever, it certainly doesn't hurt to escape it as you suggest. ;-)\n. ",
    "mjc-gh": "Yeah true, using h() would be easier.  I often have my application template display flash error and warn and escaping them wouldn't be an issue.  Some users may not want to escape every flash notice\\warn however.\nThe way I envisioned an attack using this vulnerability was that an attacker would create a special link on some rouge page.  This link would POST to the login page of the vulnerable application.  The login parameter would be some JavaScript, which would in turn, alter the forms actions to point to the attacker's page.  The attacker now can collect credentials and further more devise an attack that does not disrupt service or alert the user in anyway.\n. I just come from the school of thought that it should be default, out of the box secure, with no extra user intervention or anything.  \nIt is an easier enough fix as well, one extra method call the problem is no longer present.\n. ",
    "Sylvain": "Hi, I have exactly the same problem with rails 2.3.2. I can't find any solution on the web for that point.\n. ",
    "technoweenie": "file a busted test that proves what you're trying to say, or even file a fix with it :)\n. Um, sure.  I still don't see why this even needs to be a gem at all.\n. Apparently I let the wrong people work on restful-auth, it doesn't really build properly.\n. I don't use cucumber.  Send a pull request if you have a fix.\n. It sounds like your ruby SAFE level is higher than normal: http://www.cs.auckland.ac.nz/references/ruby/ProgrammingRuby/taint.html\n. Nope, never had it happen.  But anytime you're querying a record by a string field (like remember_token, email, etc), I tend to add a unique constraint and AR validation anyway.\n. It was written with the assumption that you'd review any migrations about to be run on your production database.  Please do submit a better patch to make it better though.  Thanks.\n. Dude, I just saw that earlier tonight.  Hilarious.\n. Ubuntu breaks ruby up into a bunch of smaller packages.  It's likely you don't have the openssl-ruby one or something.  I found this while doing a bit of googling.\n. ",
    "metasoarous": "Okay, I goofed here - sending in %r{#{message}} through hash assignment to the :content key doesn't actually work - that effectively just checks whether or not there is a \"div.#{notice}\" tag somewhere in the returned html. I'm wrestling with a bunch of strange issues and I'll post as I figure more out. \n. I haven't been messing with restful_auth too much lately, but I started a thread related to the weirdness on railsforum and after some time started getting some more information - (see here). It looks like part of the problem has been solved and could potentially be pretty easily merged in, but it also seems that not everything has been fixed yet. \nEven if you are not interested in tracking this down yourself, perhaps you could suggest on that discussion that anyone who fixes some part of the bug can send a pull request. Like I said, I haven't been messing with it lately.\n. ",
    "felixding": "Finally!\nBy changing the line to\nresponse.should have_flash(notice, :content => %r{#{message}})\nThe tests passed!\n. ",
    "tommeier": "I get this on heroku too, when in conjunction with acts_as_state_machine.\n. ",
    "pixeltocode": "in the controller flash[:message] = \"welcome back \", current_user.login\nand in the view <%= flash[:message] %>\n. ",
    "Satish": "plugin compatible with edge available at http://github.com/Satish/restful-authentication\n. ",
    "reggieb": "Sorry - you can close this. Should have restarted my application during testing process. The validation in the model only became effective after the application was restarted. It appears that validation rules set in the model do override those in the plug-in as they should.\n. ",
    "GGCrew": "I am amused that the example email address is not properly parsed by GitHub Flavored Markdown.\n. ",
    "Vanuan": "What a coincidence.\nSo, I've fixed this, but there is a problem with anchors. It seems like Github filters links.\nVanuan/restful-authentication@2b235806d6471f36cfbf9cc75d28d49102e691a8\n. Any chance to pull from me?\n. ",
    "jsanders": "I know this is pretty old, but I'm wondering if anyone can comment on the logic behind listing out all supported tlds with more than 2 characters, rather than using something like \"(?:[A-Z]{2,})\" for the expression. Is there something horrible about that solution that I'm not seeing?\n. ",
    "trejkaz": "I'm not convinced that anyone is looking at the issues on this project, but in case someone does end up here, I raised a very similar ticket on someone else's fork, only I didn't just fix it for .cat - https://github.com/jeremydurham/restful-authentication/pull/1\n. Well, as long as someone makes the obvious alternative improvement of just not restricting the TLD at all, I wouldn't object. (Incidentally, I didn't find it for .cat, there was some other domain a customer was actually using.)\n. ",
    "franciscoj": "I don't think this will get integrated after 3 years, so I'm closing it :P\n. ",
    "shreve": "I had this same problem.\nAll I did was use a different branch\nhttps://github.com/satish/restful-authentication\n. ",
    "Ligator": "Move the restful-authentication folder into vendor/plugins folder.\n. ",
    "ykolt": "I have same error. What happens and our actions?\n. "
}