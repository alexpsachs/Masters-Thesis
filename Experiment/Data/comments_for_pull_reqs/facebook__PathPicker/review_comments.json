[
    {
        "url": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/30004120",
        "pull_request_review_id": null,
        "id": 30004120,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDA0MTIw",
        "diff_hunk": "@@ -31,7 +31,7 @@ def doProgram(stdscr):\n \n def getLineObjs():\n     filePath = os.path.expanduser(PICKLE_FILE)\n-    lineObjs = pickle.load(open(filePath))\n+    lineObjs = pickle.load(open(filePath, 'rb'))\n     matches = [lineObj for i, lineObj in lineObjs.items()\n                if not lineObj.isSimple()]\n     logger.addEvent('total_num_files', len(lineObjs.items()))",
        "path": "src/choose.py",
        "position": 8,
        "original_position": 8,
        "commit_id": "2e6c4068de916fa1c91d22c652e9eec0fb12c9b4",
        "original_commit_id": "2e6c4068de916fa1c91d22c652e9eec0fb12c9b4",
        "user": {
            "login": "pcottle",
            "id": 1135007,
            "node_id": "MDQ6VXNlcjExMzUwMDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1135007?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pcottle",
            "html_url": "https://github.com/pcottle",
            "followers_url": "https://api.github.com/users/pcottle/followers",
            "following_url": "https://api.github.com/users/pcottle/following{/other_user}",
            "gists_url": "https://api.github.com/users/pcottle/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pcottle/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pcottle/subscriptions",
            "organizations_url": "https://api.github.com/users/pcottle/orgs",
            "repos_url": "https://api.github.com/users/pcottle/repos",
            "events_url": "https://api.github.com/users/pcottle/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pcottle/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "i think you also need to change the `pickle.load(open(selectionPath)` down below (github wont let me comment that far down)\n",
        "created_at": "2015-05-10T17:22:18Z",
        "updated_at": "2015-05-10T17:22:18Z",
        "html_url": "https://github.com/facebook/PathPicker/pull/71#discussion_r30004120",
        "pull_request_url": "https://api.github.com/repos/facebook/PathPicker/pulls/71",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/30004120"
            },
            "html": {
                "href": "https://github.com/facebook/PathPicker/pull/71#discussion_r30004120"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/71"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/30004938",
        "pull_request_review_id": null,
        "id": 30004938,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDA0OTM4",
        "diff_hunk": "@@ -375,6 +380,8 @@ def processInput(self, key):\n             # before exiting the program\n             self.getFilesToUse()\n             sys.exit(0)\n+        elif self.mode == X_MODE and key in lbls:",
        "path": "src/screenControl.py",
        "position": 58,
        "original_position": 58,
        "commit_id": "09a29c7449b46a01a2c63f5264a1cef74220a18a",
        "original_commit_id": "09a29c7449b46a01a2c63f5264a1cef74220a18a",
        "user": {
            "login": "pcottle",
            "id": 1135007,
            "node_id": "MDQ6VXNlcjExMzUwMDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1135007?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pcottle",
            "html_url": "https://github.com/pcottle",
            "followers_url": "https://api.github.com/users/pcottle/followers",
            "following_url": "https://api.github.com/users/pcottle/following{/other_user}",
            "gists_url": "https://api.github.com/users/pcottle/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pcottle/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pcottle/subscriptions",
            "organizations_url": "https://api.github.com/users/pcottle/orgs",
            "repos_url": "https://api.github.com/users/pcottle/repos",
            "events_url": "https://api.github.com/users/pcottle/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pcottle/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "we could probably handle this case first and keep the rest of the if/else statement free from checking X_MODE. more future proof probably\n",
        "created_at": "2015-05-10T19:09:09Z",
        "updated_at": "2015-05-10T19:09:09Z",
        "html_url": "https://github.com/facebook/PathPicker/pull/40#discussion_r30004938",
        "pull_request_url": "https://api.github.com/repos/facebook/PathPicker/pulls/40",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/30004938"
            },
            "html": {
                "href": "https://github.com/facebook/PathPicker/pull/40#discussion_r30004938"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/40"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/30004942",
        "pull_request_review_id": null,
        "id": 30004942,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDA0OTQy",
        "diff_hunk": "@@ -115,7 +118,7 @@ def outputBottom(self):\n         (maxy, maxx) = self.screenControl.getScreenDimensions()\n         borderY = maxy - 2\n         # first output text since we might throw an exception during border\n-        usageStr = SHORT_NAV_USAGE if self.mode == SELECT_MODE else SHORT_COMMAND_USAGE\n+        usageStr = SHORT_NAV_USAGE if self.mode == SELECT_MODE or X_MODE else SHORT_COMMAND_USAGE",
        "path": "src/screenControl.py",
        "position": 18,
        "original_position": 18,
        "commit_id": "09a29c7449b46a01a2c63f5264a1cef74220a18a",
        "original_commit_id": "09a29c7449b46a01a2c63f5264a1cef74220a18a",
        "user": {
            "login": "pcottle",
            "id": 1135007,
            "node_id": "MDQ6VXNlcjExMzUwMDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1135007?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pcottle",
            "html_url": "https://github.com/pcottle",
            "followers_url": "https://api.github.com/users/pcottle/followers",
            "following_url": "https://api.github.com/users/pcottle/following{/other_user}",
            "gists_url": "https://api.github.com/users/pcottle/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pcottle/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pcottle/subscriptions",
            "organizations_url": "https://api.github.com/users/pcottle/orgs",
            "repos_url": "https://api.github.com/users/pcottle/repos",
            "events_url": "https://api.github.com/users/pcottle/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pcottle/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "probably will move this to a switch statement\n",
        "created_at": "2015-05-10T19:09:23Z",
        "updated_at": "2015-05-10T19:09:23Z",
        "html_url": "https://github.com/facebook/PathPicker/pull/40#discussion_r30004942",
        "pull_request_url": "https://api.github.com/repos/facebook/PathPicker/pulls/40",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/30004942"
            },
            "html": {
                "href": "https://github.com/facebook/PathPicker/pull/40#discussion_r30004942"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/40"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/30004944",
        "pull_request_review_id": null,
        "id": 30004944,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDA0OTQ0",
        "diff_hunk": "@@ -244,7 +247,7 @@ def getScreenDimensions(self):\n \n     def getChromeBoundaries(self):\n         (maxy, maxx) = self.stdscr.getmaxyx()\n-        minx = CHROME_MIN_X if self.scrollBar.getIsActivated() else 0\n+        minx = CHROME_MIN_X if self.scrollBar.getIsActivated() or self.mode == X_MODE else 0",
        "path": "src/screenControl.py",
        "position": 27,
        "original_position": 27,
        "commit_id": "09a29c7449b46a01a2c63f5264a1cef74220a18a",
        "original_commit_id": "09a29c7449b46a01a2c63f5264a1cef74220a18a",
        "user": {
            "login": "pcottle",
            "id": 1135007,
            "node_id": "MDQ6VXNlcjExMzUwMDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1135007?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pcottle",
            "html_url": "https://github.com/pcottle",
            "followers_url": "https://api.github.com/users/pcottle/followers",
            "following_url": "https://api.github.com/users/pcottle/following{/other_user}",
            "gists_url": "https://api.github.com/users/pcottle/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pcottle/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pcottle/subscriptions",
            "organizations_url": "https://api.github.com/users/pcottle/orgs",
            "repos_url": "https://api.github.com/users/pcottle/repos",
            "events_url": "https://api.github.com/users/pcottle/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pcottle/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "wonder if we could move this inside `scrollBar.getIsActivated()`...\n",
        "created_at": "2015-05-10T19:09:33Z",
        "updated_at": "2015-05-10T19:09:33Z",
        "html_url": "https://github.com/facebook/PathPicker/pull/40#discussion_r30004944",
        "pull_request_url": "https://api.github.com/repos/facebook/PathPicker/pulls/40",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/30004944"
            },
            "html": {
                "href": "https://github.com/facebook/PathPicker/pull/40#discussion_r30004944"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/40"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/30004954",
        "pull_request_review_id": null,
        "id": 30004954,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDA0OTU0",
        "diff_hunk": "@@ -473,8 +480,8 @@ def resetDirty(self):\n         self.linesDirty = False\n         self.dirtyIndexes = []\n \n-    def dirtyHoverIndex(self):\n-        self.dirtyIndexes.append(self.hoverIndex)\n+    def dirtyHoverIndex(self, idx=-1):\n+        self.dirtyIndexes.append(idx if idx > 0 else self.hoverIndex)",
        "path": "src/screenControl.py",
        "position": 70,
        "original_position": 70,
        "commit_id": "09a29c7449b46a01a2c63f5264a1cef74220a18a",
        "original_commit_id": "09a29c7449b46a01a2c63f5264a1cef74220a18a",
        "user": {
            "login": "pcottle",
            "id": 1135007,
            "node_id": "MDQ6VXNlcjExMzUwMDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1135007?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pcottle",
            "html_url": "https://github.com/pcottle",
            "followers_url": "https://api.github.com/users/pcottle/followers",
            "following_url": "https://api.github.com/users/pcottle/following{/other_user}",
            "gists_url": "https://api.github.com/users/pcottle/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pcottle/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pcottle/subscriptions",
            "organizations_url": "https://api.github.com/users/pcottle/orgs",
            "repos_url": "https://api.github.com/users/pcottle/repos",
            "events_url": "https://api.github.com/users/pcottle/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pcottle/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "probably should make this a separate function rather than have the optional negative-default param\n",
        "created_at": "2015-05-10T19:10:20Z",
        "updated_at": "2015-05-10T19:10:24Z",
        "html_url": "https://github.com/facebook/PathPicker/pull/40#discussion_r30004954",
        "pull_request_url": "https://api.github.com/repos/facebook/PathPicker/pulls/40",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/30004954"
            },
            "html": {
                "href": "https://github.com/facebook/PathPicker/pull/40#discussion_r30004954"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/40"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/30004970",
        "pull_request_review_id": null,
        "id": 30004970,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDA0OTcw",
        "diff_hunk": "@@ -514,3 +522,25 @@ def moveCursor(self):\n     def getKey(self):\n         charCode = self.stdscr.getch()\n         return mapping.get(charCode, '')\n+\n+    def toggleXMode(self):\n+        if self.mode != X_MODE:\n+            self.mode = X_MODE\n+        else:\n+            self.mode = SELECT_MODE\n+        self.printAll()\n+\n+    def printXMode(self):\n+        if self.mode == X_MODE:\n+            (maxy, _) = self.scrollBar.screenControl.getScreenDimensions()\n+            topY = maxy - 2\n+            minY = self.scrollBar.getMinY() - (1 if not self.scrollBar.activated else 0)\n+            for i in range(minY, topY + 1):\n+                self.stdscr.addstr(i, 1, lbls[i - minY])\n+\n+    def selectXMode(self, key):\n+        lineObj = self.lineObjs[lbls.index(key) + int(self.scrollBar.activated) - self.scrollOffset]\n+        if hasattr(lineObj, \"toggleSelect\"):",
        "path": "src/screenControl.py",
        "position": 104,
        "original_position": 104,
        "commit_id": "09a29c7449b46a01a2c63f5264a1cef74220a18a",
        "original_commit_id": "09a29c7449b46a01a2c63f5264a1cef74220a18a",
        "user": {
            "login": "pcottle",
            "id": 1135007,
            "node_id": "MDQ6VXNlcjExMzUwMDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1135007?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pcottle",
            "html_url": "https://github.com/pcottle",
            "followers_url": "https://api.github.com/users/pcottle/followers",
            "following_url": "https://api.github.com/users/pcottle/following{/other_user}",
            "gists_url": "https://api.github.com/users/pcottle/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pcottle/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pcottle/subscriptions",
            "organizations_url": "https://api.github.com/users/pcottle/orgs",
            "repos_url": "https://api.github.com/users/pcottle/repos",
            "events_url": "https://api.github.com/users/pcottle/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pcottle/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "probably should assert on the instance being a line match rather than doing the conditional check here\n",
        "created_at": "2015-05-10T19:11:16Z",
        "updated_at": "2015-05-10T19:12:02Z",
        "html_url": "https://github.com/facebook/PathPicker/pull/40#discussion_r30004970",
        "pull_request_url": "https://api.github.com/repos/facebook/PathPicker/pulls/40",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/30004970"
            },
            "html": {
                "href": "https://github.com/facebook/PathPicker/pull/40#discussion_r30004970"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/40"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/30004979",
        "pull_request_review_id": null,
        "id": 30004979,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDA0OTc5",
        "diff_hunk": "@@ -514,3 +522,25 @@ def moveCursor(self):\n     def getKey(self):\n         charCode = self.stdscr.getch()\n         return mapping.get(charCode, '')\n+\n+    def toggleXMode(self):\n+        if self.mode != X_MODE:\n+            self.mode = X_MODE\n+        else:\n+            self.mode = SELECT_MODE\n+        self.printAll()\n+\n+    def printXMode(self):\n+        if self.mode == X_MODE:",
        "path": "src/screenControl.py",
        "position": 95,
        "original_position": 95,
        "commit_id": "09a29c7449b46a01a2c63f5264a1cef74220a18a",
        "original_commit_id": "09a29c7449b46a01a2c63f5264a1cef74220a18a",
        "user": {
            "login": "pcottle",
            "id": 1135007,
            "node_id": "MDQ6VXNlcjExMzUwMDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1135007?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pcottle",
            "html_url": "https://github.com/pcottle",
            "followers_url": "https://api.github.com/users/pcottle/followers",
            "following_url": "https://api.github.com/users/pcottle/following{/other_user}",
            "gists_url": "https://api.github.com/users/pcottle/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pcottle/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pcottle/subscriptions",
            "organizations_url": "https://api.github.com/users/pcottle/orgs",
            "repos_url": "https://api.github.com/users/pcottle/repos",
            "events_url": "https://api.github.com/users/pcottle/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pcottle/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "nit: if `!=` return\n",
        "created_at": "2015-05-10T19:12:10Z",
        "updated_at": "2015-05-10T19:12:10Z",
        "html_url": "https://github.com/facebook/PathPicker/pull/40#discussion_r30004979",
        "pull_request_url": "https://api.github.com/repos/facebook/PathPicker/pulls/40",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/30004979"
            },
            "html": {
                "href": "https://github.com/facebook/PathPicker/pull/40#discussion_r30004979"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/40"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/30004990",
        "pull_request_review_id": null,
        "id": 30004990,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDA0OTkw",
        "diff_hunk": "@@ -514,3 +522,25 @@ def moveCursor(self):\n     def getKey(self):\n         charCode = self.stdscr.getch()\n         return mapping.get(charCode, '')\n+\n+    def toggleXMode(self):\n+        if self.mode != X_MODE:\n+            self.mode = X_MODE\n+        else:\n+            self.mode = SELECT_MODE\n+        self.printAll()\n+\n+    def printXMode(self):\n+        if self.mode == X_MODE:\n+            (maxy, _) = self.scrollBar.screenControl.getScreenDimensions()\n+            topY = maxy - 2\n+            minY = self.scrollBar.getMinY() - (1 if not self.scrollBar.activated else 0)\n+            for i in range(minY, topY + 1):\n+                self.stdscr.addstr(i, 1, lbls[i - minY])",
        "path": "src/screenControl.py",
        "position": 100,
        "original_position": 100,
        "commit_id": "09a29c7449b46a01a2c63f5264a1cef74220a18a",
        "original_commit_id": "09a29c7449b46a01a2c63f5264a1cef74220a18a",
        "user": {
            "login": "pcottle",
            "id": 1135007,
            "node_id": "MDQ6VXNlcjExMzUwMDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1135007?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pcottle",
            "html_url": "https://github.com/pcottle",
            "followers_url": "https://api.github.com/users/pcottle/followers",
            "following_url": "https://api.github.com/users/pcottle/following{/other_user}",
            "gists_url": "https://api.github.com/users/pcottle/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pcottle/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pcottle/subscriptions",
            "organizations_url": "https://api.github.com/users/pcottle/orgs",
            "repos_url": "https://api.github.com/users/pcottle/repos",
            "events_url": "https://api.github.com/users/pcottle/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pcottle/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "what do you think about making the X mode selectors only appear next to lines that are actual matches?\n\nthat would give us more efficient usage of available characters **and** avoid the awkward situation where you hit a key that doesnt correspond to an actual line match\n",
        "created_at": "2015-05-10T19:13:20Z",
        "updated_at": "2015-05-10T19:13:20Z",
        "html_url": "https://github.com/facebook/PathPicker/pull/40#discussion_r30004990",
        "pull_request_url": "https://api.github.com/repos/facebook/PathPicker/pulls/40",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/30004990"
            },
            "html": {
                "href": "https://github.com/facebook/PathPicker/pull/40#discussion_r30004990"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/40"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/30006094",
        "pull_request_review_id": null,
        "id": 30006094,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDA2MDk0",
        "diff_hunk": "@@ -375,6 +380,8 @@ def processInput(self, key):\n             # before exiting the program\n             self.getFilesToUse()\n             sys.exit(0)\n+        elif self.mode == X_MODE and key in lbls:",
        "path": "src/screenControl.py",
        "position": 58,
        "original_position": 58,
        "commit_id": "09a29c7449b46a01a2c63f5264a1cef74220a18a",
        "original_commit_id": "09a29c7449b46a01a2c63f5264a1cef74220a18a",
        "user": {
            "login": "mahamudul007",
            "id": 10070247,
            "node_id": "MDQ6VXNlcjEwMDcwMjQ3",
            "avatar_url": "https://avatars1.githubusercontent.com/u/10070247?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mahamudul007",
            "html_url": "https://github.com/mahamudul007",
            "followers_url": "https://api.github.com/users/mahamudul007/followers",
            "following_url": "https://api.github.com/users/mahamudul007/following{/other_user}",
            "gists_url": "https://api.github.com/users/mahamudul007/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mahamudul007/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mahamudul007/subscriptions",
            "organizations_url": "https://api.github.com/users/mahamudul007/orgs",
            "repos_url": "https://api.github.com/users/mahamudul007/repos",
            "events_url": "https://api.github.com/users/mahamudul007/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mahamudul007/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Duoss4462@gmail.com\n",
        "created_at": "2015-05-10T21:12:45Z",
        "updated_at": "2015-05-10T21:12:45Z",
        "html_url": "https://github.com/facebook/PathPicker/pull/40#discussion_r30006094",
        "pull_request_url": "https://api.github.com/repos/facebook/PathPicker/pulls/40",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/30006094"
            },
            "html": {
                "href": "https://github.com/facebook/PathPicker/pull/40#discussion_r30006094"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/40"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/30003871",
        "pull_request_review_id": null,
        "id": 30003871,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDAzODcx",
        "diff_hunk": "@@ -0,0 +1,40 @@\n+# Copyright (c) 2015-present, Facebook, Inc.\n+# All rights reserved.\n+#\n+# This source code is licensed under the BSD-style license found in the\n+# LICENSE file in the root directory of this source tree. An additional grant\n+# of patent rights can be found in the PATENTS file in the same directory.\n+#\n+# @nolint",
        "path": "src/colorPrinter.py",
        "position": null,
        "original_position": 8,
        "commit_id": "ae78440fc4a8f4b55e374cd5e37c45469884b7d5",
        "original_commit_id": "d6221337bdf0275cf03003f38a82c3c277d303a8",
        "user": {
            "login": "pcottle",
            "id": 1135007,
            "node_id": "MDQ6VXNlcjExMzUwMDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1135007?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pcottle",
            "html_url": "https://github.com/pcottle",
            "followers_url": "https://api.github.com/users/pcottle/followers",
            "following_url": "https://api.github.com/users/pcottle/following{/other_user}",
            "gists_url": "https://api.github.com/users/pcottle/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pcottle/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pcottle/subscriptions",
            "organizations_url": "https://api.github.com/users/pcottle/orgs",
            "repos_url": "https://api.github.com/users/pcottle/repos",
            "events_url": "https://api.github.com/users/pcottle/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pcottle/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "this is actually for FB infra, I can remove it in a followup though\n",
        "created_at": "2015-05-10T16:50:25Z",
        "updated_at": "2015-05-11T07:47:47Z",
        "html_url": "https://github.com/facebook/PathPicker/pull/53#discussion_r30003871",
        "pull_request_url": "https://api.github.com/repos/facebook/PathPicker/pulls/53",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/30003871"
            },
            "html": {
                "href": "https://github.com/facebook/PathPicker/pull/53#discussion_r30003871"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/53"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/30003924",
        "pull_request_review_id": null,
        "id": 30003924,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDAzOTI0",
        "diff_hunk": "@@ -9,33 +9,38 @@\n from __future__ import print_function\n \n import curses\n-\n import parse\n-\n+import copy\n+from formattedText import FormattedText\n \n class SimpleLine(object):\n \n-    def __init__(self, line, index):\n-        self.line = line\n+    def __init__(self, formattedLine, index):\n+        self.formattedLine = formattedLine\n         self.index = index\n \n     def printOut(self):\n         print(str(self))\n \n-    def output(self, stdscr):\n+    def output(self, printer):\n         (minx, miny, maxx, maxy) = self.controller.getChromeBoundaries()\n-        maxLen = maxx - minx\n+        maxLen = min(maxx - minx, len(str(self)))\n         y = miny + self.index + self.controller.getScrollOffset()\n+\n+        if (y < miny or y > maxy):\n+            # wont be displayed!\n+            return\n+\n         try:\n-            stdscr.addstr(y, minx, str(self)[0:maxLen])\n-        except curses.error:\n+            self.formattedLine.printText(y, minx, printer, maxLen)\n+        except curses.error as e:",
        "path": "src/format.py",
        "position": null,
        "original_position": 36,
        "commit_id": "ae78440fc4a8f4b55e374cd5e37c45469884b7d5",
        "original_commit_id": "d6221337bdf0275cf03003f38a82c3c277d303a8",
        "user": {
            "login": "pcottle",
            "id": 1135007,
            "node_id": "MDQ6VXNlcjExMzUwMDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1135007?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pcottle",
            "html_url": "https://github.com/pcottle",
            "followers_url": "https://api.github.com/users/pcottle/followers",
            "following_url": "https://api.github.com/users/pcottle/following{/other_user}",
            "gists_url": "https://api.github.com/users/pcottle/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pcottle/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pcottle/subscriptions",
            "organizations_url": "https://api.github.com/users/pcottle/orgs",
            "repos_url": "https://api.github.com/users/pcottle/repos",
            "events_url": "https://api.github.com/users/pcottle/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pcottle/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "might have to remove this since its different in python 3.0 and we dont use the exception anyways\n",
        "created_at": "2015-05-10T16:56:37Z",
        "updated_at": "2015-05-11T07:47:47Z",
        "html_url": "https://github.com/facebook/PathPicker/pull/53#discussion_r30003924",
        "pull_request_url": "https://api.github.com/repos/facebook/PathPicker/pulls/53",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/30003924"
            },
            "html": {
                "href": "https://github.com/facebook/PathPicker/pull/53#discussion_r30003924"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/53"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/30003935",
        "pull_request_review_id": null,
        "id": 30003935,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDAzOTM1",
        "diff_hunk": "@@ -0,0 +1,40 @@\n+# Copyright (c) 2015-present, Facebook, Inc.\n+# All rights reserved.\n+#\n+# This source code is licensed under the BSD-style license found in the\n+# LICENSE file in the root directory of this source tree. An additional grant\n+# of patent rights can be found in the PATENTS file in the same directory.\n+#\n+# @nolint\n+import curses\n+\n+class ColorPrinter(object):\n+    \"\"\"A thin wrapper over screens in ncurses that caches colors and\n+    attribute state\"\"\"\n+    def __init__(self, screen):\n+        self.colors = {}\n+        self.colors[(0,0)] = 0 #0,0 = white on black is hardcoded\n+        self.screen = screen\n+\n+\n+    def setAttributes(self, foreColor, backColor, other):\n+        colorIndex = -1\n+        colorPair = (foreColor, backColor)\n+        if not colorPair in self.colors:\n+            newIndex = len(self.colors)\n+            if newIndex < curses.COLOR_PAIRS:\n+                curses.init_pair(newIndex, foreColor, backColor)\n+                self.colors[colorPair] = newIndex\n+                colorIndex = newIndex",
        "path": "src/colorPrinter.py",
        "position": 30,
        "original_position": 28,
        "commit_id": "ae78440fc4a8f4b55e374cd5e37c45469884b7d5",
        "original_commit_id": "d6221337bdf0275cf03003f38a82c3c277d303a8",
        "user": {
            "login": "pcottle",
            "id": 1135007,
            "node_id": "MDQ6VXNlcjExMzUwMDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1135007?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pcottle",
            "html_url": "https://github.com/pcottle",
            "followers_url": "https://api.github.com/users/pcottle/followers",
            "following_url": "https://api.github.com/users/pcottle/following{/other_user}",
            "gists_url": "https://api.github.com/users/pcottle/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pcottle/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pcottle/subscriptions",
            "organizations_url": "https://api.github.com/users/pcottle/orgs",
            "repos_url": "https://api.github.com/users/pcottle/repos",
            "events_url": "https://api.github.com/users/pcottle/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pcottle/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "dont think you really need this line if you drop the else case back our\n",
        "created_at": "2015-05-10T16:58:04Z",
        "updated_at": "2015-05-11T07:47:47Z",
        "html_url": "https://github.com/facebook/PathPicker/pull/53#discussion_r30003935",
        "pull_request_url": "https://api.github.com/repos/facebook/PathPicker/pulls/53",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/30003935"
            },
            "html": {
                "href": "https://github.com/facebook/PathPicker/pull/53#discussion_r30003935"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/53"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/30003945",
        "pull_request_review_id": null,
        "id": 30003945,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDAzOTQ1",
        "diff_hunk": "@@ -0,0 +1,40 @@\n+# Copyright (c) 2015-present, Facebook, Inc.\n+# All rights reserved.\n+#\n+# This source code is licensed under the BSD-style license found in the\n+# LICENSE file in the root directory of this source tree. An additional grant\n+# of patent rights can be found in the PATENTS file in the same directory.\n+#\n+# @nolint\n+import curses\n+\n+class ColorPrinter(object):\n+    \"\"\"A thin wrapper over screens in ncurses that caches colors and\n+    attribute state\"\"\"\n+    def __init__(self, screen):\n+        self.colors = {}\n+        self.colors[(0,0)] = 0 #0,0 = white on black is hardcoded\n+        self.screen = screen\n+\n+\n+    def setAttributes(self, foreColor, backColor, other):\n+        colorIndex = -1\n+        colorPair = (foreColor, backColor)\n+        if not colorPair in self.colors:\n+            newIndex = len(self.colors)\n+            if newIndex < curses.COLOR_PAIRS:\n+                curses.init_pair(newIndex, foreColor, backColor)\n+                self.colors[colorPair] = newIndex\n+                colorIndex = newIndex\n+        else:\n+            colorIndex = self.colors[colorPair]\n+\n+        attr = curses.color_pair(colorIndex)\n+        attr = attr | other\n+\n+        self.currentAttributes = attr",
        "path": "src/colorPrinter.py",
        "position": 37,
        "original_position": 35,
        "commit_id": "ae78440fc4a8f4b55e374cd5e37c45469884b7d5",
        "original_commit_id": "d6221337bdf0275cf03003f38a82c3c277d303a8",
        "user": {
            "login": "pcottle",
            "id": 1135007,
            "node_id": "MDQ6VXNlcjExMzUwMDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1135007?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pcottle",
            "html_url": "https://github.com/pcottle",
            "followers_url": "https://api.github.com/users/pcottle/followers",
            "following_url": "https://api.github.com/users/pcottle/following{/other_user}",
            "gists_url": "https://api.github.com/users/pcottle/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pcottle/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pcottle/subscriptions",
            "organizations_url": "https://api.github.com/users/pcottle/orgs",
            "repos_url": "https://api.github.com/users/pcottle/repos",
            "events_url": "https://api.github.com/users/pcottle/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pcottle/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "can we initialize this to something in `__init__`?\n",
        "created_at": "2015-05-10T16:59:00Z",
        "updated_at": "2015-05-11T07:47:47Z",
        "html_url": "https://github.com/facebook/PathPicker/pull/53#discussion_r30003945",
        "pull_request_url": "https://api.github.com/repos/facebook/PathPicker/pulls/53",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/30003945"
            },
            "html": {
                "href": "https://github.com/facebook/PathPicker/pull/53#discussion_r30003945"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/53"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/30003955",
        "pull_request_review_id": null,
        "id": 30003955,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDAzOTU1",
        "diff_hunk": "@@ -121,42 +128,47 @@ def getSelected(self):\n         return self.selected\n \n     def getBefore(self):\n-        return self.line[0:self.start]\n+        return str(self.formattedLine)[0:self.start]\n \n     def getAfter(self):\n-        return self.line[self.end:]\n+        return str(self.formattedLine)[self.end:]\n \n     def getMatch(self):\n         return self.group\n \n     def __str__(self):\n-        return self.getBefore() + '||' + self.getMatch(\n-        ) + '||' + self.getAfter() + '||' + str(self.num)\n-\n-    def getStyleForState(self):\n-        curses.init_pair(1, curses.COLOR_WHITE, curses.COLOR_RED)\n-        curses.init_pair(2, curses.COLOR_WHITE, curses.COLOR_BLUE)\n-        curses.init_pair(3, curses.COLOR_WHITE, curses.COLOR_GREEN)\n+        return (self.getBefore() + '||' + self.getMatch()\n+                + '||' + self.getAfter() + '||' +\n+                str(self.num))\n \n+    def getDecoratorFormatting(self):\n         if self.hovered and self.selected:\n-            return curses.color_pair(3)\n+            attributes = (curses.COLOR_WHITE, curses.COLOR_RED, 0)",
        "path": "src/format.py",
        "position": null,
        "original_position": 97,
        "commit_id": "ae78440fc4a8f4b55e374cd5e37c45469884b7d5",
        "original_commit_id": "d6221337bdf0275cf03003f38a82c3c277d303a8",
        "user": {
            "login": "pcottle",
            "id": 1135007,
            "node_id": "MDQ6VXNlcjExMzUwMDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1135007?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pcottle",
            "html_url": "https://github.com/pcottle",
            "followers_url": "https://api.github.com/users/pcottle/followers",
            "following_url": "https://api.github.com/users/pcottle/following{/other_user}",
            "gists_url": "https://api.github.com/users/pcottle/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pcottle/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pcottle/subscriptions",
            "organizations_url": "https://api.github.com/users/pcottle/orgs",
            "repos_url": "https://api.github.com/users/pcottle/repos",
            "events_url": "https://api.github.com/users/pcottle/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pcottle/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "oooh nice, this is way more straight-forward than the hacky init_pair stuff I was doing :tada: \n",
        "created_at": "2015-05-10T17:00:24Z",
        "updated_at": "2015-05-11T07:47:47Z",
        "html_url": "https://github.com/facebook/PathPicker/pull/53#discussion_r30003955",
        "pull_request_url": "https://api.github.com/repos/facebook/PathPicker/pulls/53",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/30003955"
            },
            "html": {
                "href": "https://github.com/facebook/PathPicker/pull/53#discussion_r30003955"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/53"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/30003968",
        "pull_request_review_id": null,
        "id": 30003968,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDAzOTY4",
        "diff_hunk": "@@ -121,42 +128,47 @@ def getSelected(self):\n         return self.selected\n \n     def getBefore(self):\n-        return self.line[0:self.start]\n+        return str(self.formattedLine)[0:self.start]\n \n     def getAfter(self):\n-        return self.line[self.end:]\n+        return str(self.formattedLine)[self.end:]\n \n     def getMatch(self):\n         return self.group\n \n     def __str__(self):\n-        return self.getBefore() + '||' + self.getMatch(\n-        ) + '||' + self.getAfter() + '||' + str(self.num)\n-\n-    def getStyleForState(self):\n-        curses.init_pair(1, curses.COLOR_WHITE, curses.COLOR_RED)\n-        curses.init_pair(2, curses.COLOR_WHITE, curses.COLOR_BLUE)\n-        curses.init_pair(3, curses.COLOR_WHITE, curses.COLOR_GREEN)\n+        return (self.getBefore() + '||' + self.getMatch()\n+                + '||' + self.getAfter() + '||' +\n+                str(self.num))\n \n+    def getDecoratorFormatting(self):\n         if self.hovered and self.selected:\n-            return curses.color_pair(3)\n+            attributes = (curses.COLOR_WHITE, curses.COLOR_RED, 0)\n         elif self.hovered:\n-            return curses.color_pair(1)\n+            attributes = (curses.COLOR_WHITE, curses.COLOR_BLUE, 0)\n         elif self.selected:\n-            return curses.color_pair(2)\n+            attributes = (curses.COLOR_WHITE, curses.COLOR_GREEN, 0)\n         else:\n-            return curses.A_UNDERLINE\n+            attributes = (0,0,FormattedText.UNDERLINE_ATTRIBUTE)\n+\n+        return FormattedText.getSequenceForAttributes(*attributes)\n \n     def getDecorator(self):\n         if self.selected:\n             return '|===>'\n         return ''\n \n-    def output(self, stdscr):\n+    def output(self, printer):\n         decorator = self.getDecorator()\n-        before = self.getBefore()\n-        after = self.getAfter()\n-        middle = ''.join([decorator, self.getMatch()])\n+        # inject the decorator and decorated style\n+        # into the formatted text and then simply print it out\n+        text = copy.deepcopy(self.formattedLine)",
        "path": "src/format.py",
        "position": null,
        "original_position": 123,
        "commit_id": "ae78440fc4a8f4b55e374cd5e37c45469884b7d5",
        "original_commit_id": "d6221337bdf0275cf03003f38a82c3c277d303a8",
        "user": {
            "login": "pcottle",
            "id": 1135007,
            "node_id": "MDQ6VXNlcjExMzUwMDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1135007?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pcottle",
            "html_url": "https://github.com/pcottle",
            "followers_url": "https://api.github.com/users/pcottle/followers",
            "following_url": "https://api.github.com/users/pcottle/following{/other_user}",
            "gists_url": "https://api.github.com/users/pcottle/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pcottle/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pcottle/subscriptions",
            "organizations_url": "https://api.github.com/users/pcottle/orgs",
            "repos_url": "https://api.github.com/users/pcottle/repos",
            "events_url": "https://api.github.com/users/pcottle/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pcottle/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "is deep copy performant enough to do this on every output?\n",
        "created_at": "2015-05-10T17:01:42Z",
        "updated_at": "2015-05-11T07:47:47Z",
        "html_url": "https://github.com/facebook/PathPicker/pull/53#discussion_r30003968",
        "pull_request_url": "https://api.github.com/repos/facebook/PathPicker/pulls/53",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/30003968"
            },
            "html": {
                "href": "https://github.com/facebook/PathPicker/pull/53#discussion_r30003968"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/53"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/30003991",
        "pull_request_review_id": null,
        "id": 30003991,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDAzOTkx",
        "diff_hunk": "@@ -0,0 +1,127 @@\n+# Copyright (c) 2015-present, Facebook, Inc.\n+# All rights reserved.\n+#\n+# This source code is licensed under the BSD-style license found in the\n+# LICENSE file in the root directory of this source tree. An additional grant\n+# of patent rights can be found in the PATENTS file in the same directory.\n+#\n+# @nolint\n+\n+import re\n+import curses\n+\n+class FormattedText(object):\n+    \"\"\"A piece of ANSI escape formatted text which responds\n+    to str() returning the plain text and knows how to print\n+    itself out using ncurses\"\"\"\n+\n+    ANSI_ESCAPE_FORMATTING = r'\\x1b\\[([^mK]*)[mK]'\n+    BOLD_ATTRIBUTE = 1\n+    UNDERLINE_ATTRIBUTE = 4\n+\n+    def __init__(self, text):\n+        self.text = text\n+\n+        self.segments = re.split(self.ANSI_ESCAPE_FORMATTING, self.text)\n+        #re.split will insert a empty string if there is a match at the beginning\n+        #or it will return [string] if there is no match\n+        #create the invariant that every segment has a formatting segment, e.g\n+        #we will always have FORMAT, TEXT, FORMAT, TEXT\n+        self.segments.insert(0, '')\n+        self.plainText = ''.join(self.segments[1::2])\n+\n+\n+    def __str__(self):\n+        return self.plainText\n+\n+    @classmethod\n+    def parseFormatting(cls, formatting):\n+        \"\"\"Parse ANSI formatting; the formatting passed in should be\n+        stripped of the control characters and ending character\"\"\"\n+        fore = -1 #-1 default means \"use default\", not \"use white/black\"\n+        back = -1\n+        other = 0\n+        intValues = [int(value) for value in formatting.split(';') if value]\n+        for code in intValues:\n+            if code >= 30 and code <= 39:",
        "path": "src/formattedText.py",
        "position": null,
        "original_position": 46,
        "commit_id": "ae78440fc4a8f4b55e374cd5e37c45469884b7d5",
        "original_commit_id": "d6221337bdf0275cf03003f38a82c3c277d303a8",
        "user": {
            "login": "pcottle",
            "id": 1135007,
            "node_id": "MDQ6VXNlcjExMzUwMDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1135007?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pcottle",
            "html_url": "https://github.com/pcottle",
            "followers_url": "https://api.github.com/users/pcottle/followers",
            "following_url": "https://api.github.com/users/pcottle/following{/other_user}",
            "gists_url": "https://api.github.com/users/pcottle/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pcottle/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pcottle/subscriptions",
            "organizations_url": "https://api.github.com/users/pcottle/orgs",
            "repos_url": "https://api.github.com/users/pcottle/repos",
            "events_url": "https://api.github.com/users/pcottle/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pcottle/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "should these `30` and `40`'s be constants in the class? then we could at least explain what they mean and there would be less magic numbers here\n",
        "created_at": "2015-05-10T17:04:19Z",
        "updated_at": "2015-05-11T07:47:47Z",
        "html_url": "https://github.com/facebook/PathPicker/pull/53#discussion_r30003991",
        "pull_request_url": "https://api.github.com/repos/facebook/PathPicker/pulls/53",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/30003991"
            },
            "html": {
                "href": "https://github.com/facebook/PathPicker/pull/53#discussion_r30003991"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/53"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/30003996",
        "pull_request_review_id": null,
        "id": 30003996,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDAzOTk2",
        "diff_hunk": "@@ -135,15 +136,16 @@ def getLineObjs():\n     lineObjs = {}\n     for index, line in enumerate(inputLines):\n         line = line.replace('\\t', '    ')\n-        line = re.sub(r'\\x1b[^mK]*(m|K)', '', line)\n-        result = parse.matchLine(line)\n+        formattedLine = FormattedText(line)\n+        result = parse.matchLine(str(formattedLine))",
        "path": "src/processInput.py",
        "position": 33,
        "original_position": 15,
        "commit_id": "ae78440fc4a8f4b55e374cd5e37c45469884b7d5",
        "original_commit_id": "d6221337bdf0275cf03003f38a82c3c277d303a8",
        "user": {
            "login": "pcottle",
            "id": 1135007,
            "node_id": "MDQ6VXNlcjExMzUwMDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1135007?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pcottle",
            "html_url": "https://github.com/pcottle",
            "followers_url": "https://api.github.com/users/pcottle/followers",
            "following_url": "https://api.github.com/users/pcottle/following{/other_user}",
            "gists_url": "https://api.github.com/users/pcottle/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pcottle/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pcottle/subscriptions",
            "organizations_url": "https://api.github.com/users/pcottle/orgs",
            "repos_url": "https://api.github.com/users/pcottle/repos",
            "events_url": "https://api.github.com/users/pcottle/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pcottle/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "nice, this means our pickle selections are backwards compatibile\n",
        "created_at": "2015-05-10T17:04:55Z",
        "updated_at": "2015-05-11T07:47:47Z",
        "html_url": "https://github.com/facebook/PathPicker/pull/53#discussion_r30003996",
        "pull_request_url": "https://api.github.com/repos/facebook/PathPicker/pulls/53",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/30003996"
            },
            "html": {
                "href": "https://github.com/facebook/PathPicker/pull/53#discussion_r30003996"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/53"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/30004028",
        "pull_request_review_id": null,
        "id": 30004028,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDA0MDI4",
        "diff_hunk": "@@ -105,9 +106,9 @@ def outputSide(self):\n         if self.mode == COMMAND_MODE:\n             usageLines = processInput.USAGE_COMMAND.split('\\n')\n         for index, usageLine in enumerate(usageLines):\n-            self.stdscr.addstr(self.getMinY() + index, borderX + 2, usageLine)\n+            self.stdscr.addstr(self.getMinY() + index, borderX + 2, usageLine, curses.color_pair(0))",
        "path": "src/screenControl.py",
        "position": null,
        "original_position": 13,
        "commit_id": "ae78440fc4a8f4b55e374cd5e37c45469884b7d5",
        "original_commit_id": "d6221337bdf0275cf03003f38a82c3c277d303a8",
        "user": {
            "login": "pcottle",
            "id": 1135007,
            "node_id": "MDQ6VXNlcjExMzUwMDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1135007?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pcottle",
            "html_url": "https://github.com/pcottle",
            "followers_url": "https://api.github.com/users/pcottle/followers",
            "following_url": "https://api.github.com/users/pcottle/following{/other_user}",
            "gists_url": "https://api.github.com/users/pcottle/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pcottle/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pcottle/subscriptions",
            "organizations_url": "https://api.github.com/users/pcottle/orgs",
            "repos_url": "https://api.github.com/users/pcottle/repos",
            "events_url": "https://api.github.com/users/pcottle/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pcottle/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "the `curses.color_pair(0)` here is a lot of copy-pasta, could we consolidate that somehow? maybe a `self.addStrStandard` or something that uses the default formatting?\n",
        "created_at": "2015-05-10T17:08:38Z",
        "updated_at": "2015-05-11T07:47:47Z",
        "html_url": "https://github.com/facebook/PathPicker/pull/53#discussion_r30004028",
        "pull_request_url": "https://api.github.com/repos/facebook/PathPicker/pulls/53",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/30004028"
            },
            "html": {
                "href": "https://github.com/facebook/PathPicker/pull/53#discussion_r30004028"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/53"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/30005852",
        "pull_request_review_id": null,
        "id": 30005852,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDA1ODUy",
        "diff_hunk": "@@ -0,0 +1,40 @@\n+# Copyright (c) 2015-present, Facebook, Inc.\n+# All rights reserved.\n+#\n+# This source code is licensed under the BSD-style license found in the\n+# LICENSE file in the root directory of this source tree. An additional grant\n+# of patent rights can be found in the PATENTS file in the same directory.\n+#\n+# @nolint",
        "path": "src/colorPrinter.py",
        "position": null,
        "original_position": 8,
        "commit_id": "ae78440fc4a8f4b55e374cd5e37c45469884b7d5",
        "original_commit_id": "d6221337bdf0275cf03003f38a82c3c277d303a8",
        "user": {
            "login": "lastquestion",
            "id": 1095956,
            "node_id": "MDQ6VXNlcjEwOTU5NTY=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1095956?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/lastquestion",
            "html_url": "https://github.com/lastquestion",
            "followers_url": "https://api.github.com/users/lastquestion/followers",
            "following_url": "https://api.github.com/users/lastquestion/following{/other_user}",
            "gists_url": "https://api.github.com/users/lastquestion/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/lastquestion/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/lastquestion/subscriptions",
            "organizations_url": "https://api.github.com/users/lastquestion/orgs",
            "repos_url": "https://api.github.com/users/lastquestion/repos",
            "events_url": "https://api.github.com/users/lastquestion/events{/privacy}",
            "received_events_url": "https://api.github.com/users/lastquestion/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Cool. I just copied it over\n",
        "created_at": "2015-05-10T20:44:24Z",
        "updated_at": "2015-05-11T07:47:47Z",
        "html_url": "https://github.com/facebook/PathPicker/pull/53#discussion_r30005852",
        "pull_request_url": "https://api.github.com/repos/facebook/PathPicker/pulls/53",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/30005852"
            },
            "html": {
                "href": "https://github.com/facebook/PathPicker/pull/53#discussion_r30005852"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/53"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/30005890",
        "pull_request_review_id": null,
        "id": 30005890,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDA1ODkw",
        "diff_hunk": "@@ -9,33 +9,38 @@\n from __future__ import print_function\n \n import curses\n-\n import parse\n-\n+import copy\n+from formattedText import FormattedText\n \n class SimpleLine(object):\n \n-    def __init__(self, line, index):\n-        self.line = line\n+    def __init__(self, formattedLine, index):\n+        self.formattedLine = formattedLine\n         self.index = index\n \n     def printOut(self):\n         print(str(self))\n \n-    def output(self, stdscr):\n+    def output(self, printer):\n         (minx, miny, maxx, maxy) = self.controller.getChromeBoundaries()\n-        maxLen = maxx - minx\n+        maxLen = min(maxx - minx, len(str(self)))\n         y = miny + self.index + self.controller.getScrollOffset()\n+\n+        if (y < miny or y > maxy):\n+            # wont be displayed!\n+            return\n+\n         try:\n-            stdscr.addstr(y, minx, str(self)[0:maxLen])\n-        except curses.error:\n+            self.formattedLine.printText(y, minx, printer, maxLen)\n+        except curses.error as e:",
        "path": "src/format.py",
        "position": null,
        "original_position": 36,
        "commit_id": "ae78440fc4a8f4b55e374cd5e37c45469884b7d5",
        "original_commit_id": "d6221337bdf0275cf03003f38a82c3c277d303a8",
        "user": {
            "login": "lastquestion",
            "id": 1095956,
            "node_id": "MDQ6VXNlcjEwOTU5NTY=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1095956?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/lastquestion",
            "html_url": "https://github.com/lastquestion",
            "followers_url": "https://api.github.com/users/lastquestion/followers",
            "following_url": "https://api.github.com/users/lastquestion/following{/other_user}",
            "gists_url": "https://api.github.com/users/lastquestion/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/lastquestion/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/lastquestion/subscriptions",
            "organizations_url": "https://api.github.com/users/lastquestion/orgs",
            "repos_url": "https://api.github.com/users/lastquestion/repos",
            "events_url": "https://api.github.com/users/lastquestion/events{/privacy}",
            "received_events_url": "https://api.github.com/users/lastquestion/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Yeah, so interesting thing: I was getting the exception before because `SimpleLine` didn't have the guard around y height being too big or too small. In current `master` we are actually throwing and catching QUITE A LOT - which might have some perf ramnifications on super big files.\n\nAfter adding the guard check I didn't get any more curses exceptions. Personally I think we should allow those to propogate out and if you agree I will remove on both prints\n",
        "created_at": "2015-05-10T20:46:27Z",
        "updated_at": "2015-05-11T07:47:47Z",
        "html_url": "https://github.com/facebook/PathPicker/pull/53#discussion_r30005890",
        "pull_request_url": "https://api.github.com/repos/facebook/PathPicker/pulls/53",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/30005890"
            },
            "html": {
                "href": "https://github.com/facebook/PathPicker/pull/53#discussion_r30005890"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/53"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/30005931",
        "pull_request_review_id": null,
        "id": 30005931,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDA1OTMx",
        "diff_hunk": "@@ -0,0 +1,40 @@\n+# Copyright (c) 2015-present, Facebook, Inc.\n+# All rights reserved.\n+#\n+# This source code is licensed under the BSD-style license found in the\n+# LICENSE file in the root directory of this source tree. An additional grant\n+# of patent rights can be found in the PATENTS file in the same directory.\n+#\n+# @nolint\n+import curses\n+\n+class ColorPrinter(object):\n+    \"\"\"A thin wrapper over screens in ncurses that caches colors and\n+    attribute state\"\"\"\n+    def __init__(self, screen):\n+        self.colors = {}\n+        self.colors[(0,0)] = 0 #0,0 = white on black is hardcoded\n+        self.screen = screen\n+\n+\n+    def setAttributes(self, foreColor, backColor, other):\n+        colorIndex = -1\n+        colorPair = (foreColor, backColor)\n+        if not colorPair in self.colors:\n+            newIndex = len(self.colors)\n+            if newIndex < curses.COLOR_PAIRS:\n+                curses.init_pair(newIndex, foreColor, backColor)\n+                self.colors[colorPair] = newIndex\n+                colorIndex = newIndex\n+        else:\n+            colorIndex = self.colors[colorPair]\n+\n+        attr = curses.color_pair(colorIndex)\n+        attr = attr | other\n+\n+        self.currentAttributes = attr",
        "path": "src/colorPrinter.py",
        "position": 37,
        "original_position": 35,
        "commit_id": "ae78440fc4a8f4b55e374cd5e37c45469884b7d5",
        "original_commit_id": "d6221337bdf0275cf03003f38a82c3c277d303a8",
        "user": {
            "login": "lastquestion",
            "id": 1095956,
            "node_id": "MDQ6VXNlcjEwOTU5NTY=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1095956?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/lastquestion",
            "html_url": "https://github.com/lastquestion",
            "followers_url": "https://api.github.com/users/lastquestion/followers",
            "following_url": "https://api.github.com/users/lastquestion/following{/other_user}",
            "gists_url": "https://api.github.com/users/lastquestion/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/lastquestion/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/lastquestion/subscriptions",
            "organizations_url": "https://api.github.com/users/lastquestion/orgs",
            "repos_url": "https://api.github.com/users/lastquestion/repos",
            "events_url": "https://api.github.com/users/lastquestion/events{/privacy}",
            "received_events_url": "https://api.github.com/users/lastquestion/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "do you mean `currentAttributes` or the `colors` dict? `colors` is a cache of the set of colors as requested during printing. It could be preinitialized to the 7x7 default colors array, but I don't know if it would improve anything because anything outside that set would still need the code to add a new color pair.\n\nfor `currentAttributes` .. really we shouldn't need it but `curses` doesn't expose `attr_get`. Unless it does. I grepped but didn't see anything. During **init** we know the attribute set to be (0,0) so we could preinitialize to 0. Is that wat you mean?\n",
        "created_at": "2015-05-10T20:49:41Z",
        "updated_at": "2015-05-11T07:47:47Z",
        "html_url": "https://github.com/facebook/PathPicker/pull/53#discussion_r30005931",
        "pull_request_url": "https://api.github.com/repos/facebook/PathPicker/pulls/53",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/30005931"
            },
            "html": {
                "href": "https://github.com/facebook/PathPicker/pull/53#discussion_r30005931"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/53"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/30005958",
        "pull_request_review_id": null,
        "id": 30005958,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDA1OTU4",
        "diff_hunk": "@@ -121,42 +128,47 @@ def getSelected(self):\n         return self.selected\n \n     def getBefore(self):\n-        return self.line[0:self.start]\n+        return str(self.formattedLine)[0:self.start]\n \n     def getAfter(self):\n-        return self.line[self.end:]\n+        return str(self.formattedLine)[self.end:]\n \n     def getMatch(self):\n         return self.group\n \n     def __str__(self):\n-        return self.getBefore() + '||' + self.getMatch(\n-        ) + '||' + self.getAfter() + '||' + str(self.num)\n-\n-    def getStyleForState(self):\n-        curses.init_pair(1, curses.COLOR_WHITE, curses.COLOR_RED)\n-        curses.init_pair(2, curses.COLOR_WHITE, curses.COLOR_BLUE)\n-        curses.init_pair(3, curses.COLOR_WHITE, curses.COLOR_GREEN)\n+        return (self.getBefore() + '||' + self.getMatch()\n+                + '||' + self.getAfter() + '||' +\n+                str(self.num))\n \n+    def getDecoratorFormatting(self):\n         if self.hovered and self.selected:\n-            return curses.color_pair(3)\n+            attributes = (curses.COLOR_WHITE, curses.COLOR_RED, 0)\n         elif self.hovered:\n-            return curses.color_pair(1)\n+            attributes = (curses.COLOR_WHITE, curses.COLOR_BLUE, 0)\n         elif self.selected:\n-            return curses.color_pair(2)\n+            attributes = (curses.COLOR_WHITE, curses.COLOR_GREEN, 0)\n         else:\n-            return curses.A_UNDERLINE\n+            attributes = (0,0,FormattedText.UNDERLINE_ATTRIBUTE)\n+\n+        return FormattedText.getSequenceForAttributes(*attributes)\n \n     def getDecorator(self):\n         if self.selected:\n             return '|===>'\n         return ''\n \n-    def output(self, stdscr):\n+    def output(self, printer):\n         decorator = self.getDecorator()\n-        before = self.getBefore()\n-        after = self.getAfter()\n-        middle = ''.join([decorator, self.getMatch()])\n+        # inject the decorator and decorated style\n+        # into the formatted text and then simply print it out\n+        text = copy.deepcopy(self.formattedLine)",
        "path": "src/format.py",
        "position": null,
        "original_position": 123,
        "commit_id": "ae78440fc4a8f4b55e374cd5e37c45469884b7d5",
        "original_commit_id": "d6221337bdf0275cf03003f38a82c3c277d303a8",
        "user": {
            "login": "lastquestion",
            "id": 1095956,
            "node_id": "MDQ6VXNlcjEwOTU5NTY=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1095956?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/lastquestion",
            "html_url": "https://github.com/lastquestion",
            "followers_url": "https://api.github.com/users/lastquestion/followers",
            "following_url": "https://api.github.com/users/lastquestion/following{/other_user}",
            "gists_url": "https://api.github.com/users/lastquestion/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/lastquestion/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/lastquestion/subscriptions",
            "organizations_url": "https://api.github.com/users/lastquestion/orgs",
            "repos_url": "https://api.github.com/users/lastquestion/repos",
            "events_url": "https://api.github.com/users/lastquestion/events{/privacy}",
            "received_events_url": "https://api.github.com/users/lastquestion/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Actually I don't know. I suppose we don't really need to do a copy at all or inject.\nActually, it's much simpler and I will reimplement it this way:\n1. Break the line at the beginning and end of the match in `__init__`, therefore it will be saved by `pickle`, this will happen during `processInput` once only, and actually just save two lines instead of one. Use existing `breakat` and remove the `replace` function.\n2. When outputting, output each line segment separately, and also, cache the current `formattedText` representing the decorator. \n\nIt removes the alloc on each output and is also cleaner and removes the need for `replace` functionality. Feels good\n",
        "created_at": "2015-05-10T20:53:59Z",
        "updated_at": "2015-05-11T07:47:47Z",
        "html_url": "https://github.com/facebook/PathPicker/pull/53#discussion_r30005958",
        "pull_request_url": "https://api.github.com/repos/facebook/PathPicker/pulls/53",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/30005958"
            },
            "html": {
                "href": "https://github.com/facebook/PathPicker/pull/53#discussion_r30005958"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/53"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/30005964",
        "pull_request_review_id": null,
        "id": 30005964,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDA1OTY0",
        "diff_hunk": "@@ -0,0 +1,127 @@\n+# Copyright (c) 2015-present, Facebook, Inc.\n+# All rights reserved.\n+#\n+# This source code is licensed under the BSD-style license found in the\n+# LICENSE file in the root directory of this source tree. An additional grant\n+# of patent rights can be found in the PATENTS file in the same directory.\n+#\n+# @nolint\n+\n+import re\n+import curses\n+\n+class FormattedText(object):\n+    \"\"\"A piece of ANSI escape formatted text which responds\n+    to str() returning the plain text and knows how to print\n+    itself out using ncurses\"\"\"\n+\n+    ANSI_ESCAPE_FORMATTING = r'\\x1b\\[([^mK]*)[mK]'\n+    BOLD_ATTRIBUTE = 1\n+    UNDERLINE_ATTRIBUTE = 4\n+\n+    def __init__(self, text):\n+        self.text = text\n+\n+        self.segments = re.split(self.ANSI_ESCAPE_FORMATTING, self.text)\n+        #re.split will insert a empty string if there is a match at the beginning\n+        #or it will return [string] if there is no match\n+        #create the invariant that every segment has a formatting segment, e.g\n+        #we will always have FORMAT, TEXT, FORMAT, TEXT\n+        self.segments.insert(0, '')\n+        self.plainText = ''.join(self.segments[1::2])\n+\n+\n+    def __str__(self):\n+        return self.plainText\n+\n+    @classmethod\n+    def parseFormatting(cls, formatting):\n+        \"\"\"Parse ANSI formatting; the formatting passed in should be\n+        stripped of the control characters and ending character\"\"\"\n+        fore = -1 #-1 default means \"use default\", not \"use white/black\"\n+        back = -1\n+        other = 0\n+        intValues = [int(value) for value in formatting.split(';') if value]\n+        for code in intValues:\n+            if code >= 30 and code <= 39:",
        "path": "src/formattedText.py",
        "position": null,
        "original_position": 46,
        "commit_id": "ae78440fc4a8f4b55e374cd5e37c45469884b7d5",
        "original_commit_id": "d6221337bdf0275cf03003f38a82c3c277d303a8",
        "user": {
            "login": "lastquestion",
            "id": 1095956,
            "node_id": "MDQ6VXNlcjEwOTU5NTY=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1095956?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/lastquestion",
            "html_url": "https://github.com/lastquestion",
            "followers_url": "https://api.github.com/users/lastquestion/followers",
            "following_url": "https://api.github.com/users/lastquestion/following{/other_user}",
            "gists_url": "https://api.github.com/users/lastquestion/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/lastquestion/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/lastquestion/subscriptions",
            "organizations_url": "https://api.github.com/users/lastquestion/orgs",
            "repos_url": "https://api.github.com/users/lastquestion/repos",
            "events_url": "https://api.github.com/users/lastquestion/events{/privacy}",
            "received_events_url": "https://api.github.com/users/lastquestion/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Yeah :+1: lets do that\n",
        "created_at": "2015-05-10T20:54:31Z",
        "updated_at": "2015-05-11T07:47:47Z",
        "html_url": "https://github.com/facebook/PathPicker/pull/53#discussion_r30005964",
        "pull_request_url": "https://api.github.com/repos/facebook/PathPicker/pulls/53",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/30005964"
            },
            "html": {
                "href": "https://github.com/facebook/PathPicker/pull/53#discussion_r30005964"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/53"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/30005966",
        "pull_request_review_id": null,
        "id": 30005966,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDA1OTY2",
        "diff_hunk": "@@ -105,9 +106,9 @@ def outputSide(self):\n         if self.mode == COMMAND_MODE:\n             usageLines = processInput.USAGE_COMMAND.split('\\n')\n         for index, usageLine in enumerate(usageLines):\n-            self.stdscr.addstr(self.getMinY() + index, borderX + 2, usageLine)\n+            self.stdscr.addstr(self.getMinY() + index, borderX + 2, usageLine, curses.color_pair(0))",
        "path": "src/screenControl.py",
        "position": null,
        "original_position": 13,
        "commit_id": "ae78440fc4a8f4b55e374cd5e37c45469884b7d5",
        "original_commit_id": "d6221337bdf0275cf03003f38a82c3c277d303a8",
        "user": {
            "login": "lastquestion",
            "id": 1095956,
            "node_id": "MDQ6VXNlcjEwOTU5NTY=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1095956?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/lastquestion",
            "html_url": "https://github.com/lastquestion",
            "followers_url": "https://api.github.com/users/lastquestion/followers",
            "following_url": "https://api.github.com/users/lastquestion/following{/other_user}",
            "gists_url": "https://api.github.com/users/lastquestion/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/lastquestion/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/lastquestion/subscriptions",
            "organizations_url": "https://api.github.com/users/lastquestion/orgs",
            "repos_url": "https://api.github.com/users/lastquestion/repos",
            "events_url": "https://api.github.com/users/lastquestion/events{/privacy}",
            "received_events_url": "https://api.github.com/users/lastquestion/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Yeah, let's do that. Actually we can later make our chrome colored which would be sweet. For later. \n",
        "created_at": "2015-05-10T20:55:00Z",
        "updated_at": "2015-05-11T07:47:47Z",
        "html_url": "https://github.com/facebook/PathPicker/pull/53#discussion_r30005966",
        "pull_request_url": "https://api.github.com/repos/facebook/PathPicker/pulls/53",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/30005966"
            },
            "html": {
                "href": "https://github.com/facebook/PathPicker/pull/53#discussion_r30005966"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/53"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/30066359",
        "pull_request_review_id": null,
        "id": 30066359,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDY2MzU5",
        "diff_hunk": "@@ -0,0 +1,40 @@\n+# Copyright (c) 2015-present, Facebook, Inc.\n+# All rights reserved.\n+#\n+# This source code is licensed under the BSD-style license found in the\n+# LICENSE file in the root directory of this source tree. An additional grant\n+# of patent rights can be found in the PATENTS file in the same directory.\n+#\n+# @nolint\n+import curses\n+\n+class ColorPrinter(object):\n+    \"\"\"A thin wrapper over screens in ncurses that caches colors and\n+    attribute state\"\"\"\n+    def __init__(self, screen):\n+        self.colors = {}\n+        self.colors[(0,0)] = 0 #0,0 = white on black is hardcoded\n+        self.screen = screen\n+\n+\n+    def setAttributes(self, foreColor, backColor, other):\n+        colorIndex = -1\n+        colorPair = (foreColor, backColor)\n+        if not colorPair in self.colors:\n+            newIndex = len(self.colors)\n+            if newIndex < curses.COLOR_PAIRS:\n+                curses.init_pair(newIndex, foreColor, backColor)\n+                self.colors[colorPair] = newIndex\n+                colorIndex = newIndex",
        "path": "src/colorPrinter.py",
        "position": 30,
        "original_position": 28,
        "commit_id": "ae78440fc4a8f4b55e374cd5e37c45469884b7d5",
        "original_commit_id": "d6221337bdf0275cf03003f38a82c3c277d303a8",
        "user": {
            "login": "pcottle",
            "id": 1135007,
            "node_id": "MDQ6VXNlcjExMzUwMDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1135007?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pcottle",
            "html_url": "https://github.com/pcottle",
            "followers_url": "https://api.github.com/users/pcottle/followers",
            "following_url": "https://api.github.com/users/pcottle/following{/other_user}",
            "gists_url": "https://api.github.com/users/pcottle/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pcottle/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pcottle/subscriptions",
            "organizations_url": "https://api.github.com/users/pcottle/orgs",
            "repos_url": "https://api.github.com/users/pcottle/repos",
            "events_url": "https://api.github.com/users/pcottle/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pcottle/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "done\n",
        "created_at": "2015-05-11T18:18:47Z",
        "updated_at": "2015-05-11T18:18:47Z",
        "html_url": "https://github.com/facebook/PathPicker/pull/53#discussion_r30066359",
        "pull_request_url": "https://api.github.com/repos/facebook/PathPicker/pulls/53",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/30066359"
            },
            "html": {
                "href": "https://github.com/facebook/PathPicker/pull/53#discussion_r30066359"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/53"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/30066478",
        "pull_request_review_id": null,
        "id": 30066478,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDY2NDc4",
        "diff_hunk": "@@ -0,0 +1,40 @@\n+# Copyright (c) 2015-present, Facebook, Inc.\n+# All rights reserved.\n+#\n+# This source code is licensed under the BSD-style license found in the\n+# LICENSE file in the root directory of this source tree. An additional grant\n+# of patent rights can be found in the PATENTS file in the same directory.\n+#\n+# @nolint\n+import curses\n+\n+class ColorPrinter(object):\n+    \"\"\"A thin wrapper over screens in ncurses that caches colors and\n+    attribute state\"\"\"\n+    def __init__(self, screen):\n+        self.colors = {}\n+        self.colors[(0,0)] = 0 #0,0 = white on black is hardcoded\n+        self.screen = screen\n+\n+\n+    def setAttributes(self, foreColor, backColor, other):\n+        colorIndex = -1\n+        colorPair = (foreColor, backColor)\n+        if not colorPair in self.colors:\n+            newIndex = len(self.colors)\n+            if newIndex < curses.COLOR_PAIRS:\n+                curses.init_pair(newIndex, foreColor, backColor)\n+                self.colors[colorPair] = newIndex\n+                colorIndex = newIndex\n+        else:\n+            colorIndex = self.colors[colorPair]\n+\n+        attr = curses.color_pair(colorIndex)\n+        attr = attr | other\n+\n+        self.currentAttributes = attr",
        "path": "src/colorPrinter.py",
        "position": 37,
        "original_position": 35,
        "commit_id": "ae78440fc4a8f4b55e374cd5e37c45469884b7d5",
        "original_commit_id": "d6221337bdf0275cf03003f38a82c3c277d303a8",
        "user": {
            "login": "pcottle",
            "id": 1135007,
            "node_id": "MDQ6VXNlcjExMzUwMDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1135007?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pcottle",
            "html_url": "https://github.com/pcottle",
            "followers_url": "https://api.github.com/users/pcottle/followers",
            "following_url": "https://api.github.com/users/pcottle/following{/other_user}",
            "gists_url": "https://api.github.com/users/pcottle/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pcottle/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pcottle/subscriptions",
            "organizations_url": "https://api.github.com/users/pcottle/orgs",
            "repos_url": "https://api.github.com/users/pcottle/repos",
            "events_url": "https://api.github.com/users/pcottle/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pcottle/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "yeah I basically meant just so we know that this instance variable is used elsewhere in code -- aka you can see there are 3 instance variables from looking at init\n",
        "created_at": "2015-05-11T18:20:03Z",
        "updated_at": "2015-05-11T18:20:03Z",
        "html_url": "https://github.com/facebook/PathPicker/pull/53#discussion_r30066478",
        "pull_request_url": "https://api.github.com/repos/facebook/PathPicker/pulls/53",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/30066478"
            },
            "html": {
                "href": "https://github.com/facebook/PathPicker/pull/53#discussion_r30066478"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/53"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/30177329",
        "pull_request_review_id": null,
        "id": 30177329,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMTc3MzI5",
        "diff_hunk": "@@ -192,6 +192,22 @@\n     'match': True,\n     'num': 0,\n     'file': '~/src/categories/NSDate+Category.h'\n+}, {\n+    # Unicode\n+    'input': u'\\xe4.py',\n+    'match': True,\n+    'num': 0,\n+    'file': u'\\xe4.py',\n+}, {\n+    'input': u'test.py\\xe4',\n+    'match': True,\n+    'num': 0,\n+    'file': u'test.py\\xe4',\n+}, {\n+    'input': u'test\\xe4.\\xe42',\n+    'match': False,\n+    'num': 0,\n+    'file': u'test\\xe4.\\xe42',",
        "path": "src/test.py",
        "position": 19,
        "original_position": 19,
        "commit_id": "b9fec4ad3b0f2cfd4cc8f04a208383205dbff4a8",
        "original_commit_id": "b9fec4ad3b0f2cfd4cc8f04a208383205dbff4a8",
        "user": {
            "login": "pcottle",
            "id": 1135007,
            "node_id": "MDQ6VXNlcjExMzUwMDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1135007?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pcottle",
            "html_url": "https://github.com/pcottle",
            "followers_url": "https://api.github.com/users/pcottle/followers",
            "following_url": "https://api.github.com/users/pcottle/following{/other_user}",
            "gists_url": "https://api.github.com/users/pcottle/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pcottle/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pcottle/subscriptions",
            "organizations_url": "https://api.github.com/users/pcottle/orgs",
            "repos_url": "https://api.github.com/users/pcottle/repos",
            "events_url": "https://api.github.com/users/pcottle/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pcottle/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": ":+1: pretty hardcore to have unicode file extensions haha\n",
        "created_at": "2015-05-12T20:36:43Z",
        "updated_at": "2015-05-12T20:36:43Z",
        "html_url": "https://github.com/facebook/PathPicker/pull/90#discussion_r30177329",
        "pull_request_url": "https://api.github.com/repos/facebook/PathPicker/pulls/90",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/30177329"
            },
            "html": {
                "href": "https://github.com/facebook/PathPicker/pull/90#discussion_r30177329"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/90"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/30257616",
        "pull_request_review_id": null,
        "id": 30257616,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMjU3NjE2",
        "diff_hunk": "@@ -24,6 +24,10 @@ def getLineObjs():\n     lineObjs = {}\n     for index, line in enumerate(inputLines):\n         line = line.replace('\\t', '    ')\n+        #remove the new line as we place the cursor ourselves for each\n+        #line. this avoids curses errors when we newline past the end of the",
        "path": "src/processInput.py",
        "position": 5,
        "original_position": 5,
        "commit_id": "3b7811160992d5cab3d8b2169f308b4a825fd78f",
        "original_commit_id": "3b7811160992d5cab3d8b2169f308b4a825fd78f",
        "user": {
            "login": "pcottle",
            "id": 1135007,
            "node_id": "MDQ6VXNlcjExMzUwMDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1135007?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pcottle",
            "html_url": "https://github.com/pcottle",
            "followers_url": "https://api.github.com/users/pcottle/followers",
            "following_url": "https://api.github.com/users/pcottle/following{/other_user}",
            "gists_url": "https://api.github.com/users/pcottle/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pcottle/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pcottle/subscriptions",
            "organizations_url": "https://api.github.com/users/pcottle/orgs",
            "repos_url": "https://api.github.com/users/pcottle/repos",
            "events_url": "https://api.github.com/users/pcottle/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pcottle/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "this will break autopep8 but i can fix in a followup\n",
        "created_at": "2015-05-13T18:02:08Z",
        "updated_at": "2015-05-13T18:02:08Z",
        "html_url": "https://github.com/facebook/PathPicker/pull/92#discussion_r30257616",
        "pull_request_url": "https://api.github.com/repos/facebook/PathPicker/pulls/92",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/30257616"
            },
            "html": {
                "href": "https://github.com/facebook/PathPicker/pull/92#discussion_r30257616"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/92"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/30259943",
        "pull_request_review_id": null,
        "id": 30259943,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMjU5OTQz",
        "diff_hunk": "@@ -24,6 +24,10 @@ def getLineObjs():\n     lineObjs = {}\n     for index, line in enumerate(inputLines):\n         line = line.replace('\\t', '    ')\n+        #remove the new line as we place the cursor ourselves for each\n+        #line. this avoids curses errors when we newline past the end of the",
        "path": "src/processInput.py",
        "position": 5,
        "original_position": 5,
        "commit_id": "3b7811160992d5cab3d8b2169f308b4a825fd78f",
        "original_commit_id": "3b7811160992d5cab3d8b2169f308b4a825fd78f",
        "user": {
            "login": "lastquestion",
            "id": 1095956,
            "node_id": "MDQ6VXNlcjEwOTU5NTY=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1095956?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/lastquestion",
            "html_url": "https://github.com/lastquestion",
            "followers_url": "https://api.github.com/users/lastquestion/followers",
            "following_url": "https://api.github.com/users/lastquestion/following{/other_user}",
            "gists_url": "https://api.github.com/users/lastquestion/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/lastquestion/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/lastquestion/subscriptions",
            "organizations_url": "https://api.github.com/users/lastquestion/orgs",
            "repos_url": "https://api.github.com/users/lastquestion/repos",
            "events_url": "https://api.github.com/users/lastquestion/events{/privacy}",
            "received_events_url": "https://api.github.com/users/lastquestion/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "hm, I ran ./buildandtest I think. Sorry. next time I will make sure to run it \n",
        "created_at": "2015-05-13T18:22:31Z",
        "updated_at": "2015-05-13T18:22:31Z",
        "html_url": "https://github.com/facebook/PathPicker/pull/92#discussion_r30259943",
        "pull_request_url": "https://api.github.com/repos/facebook/PathPicker/pulls/92",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/30259943"
            },
            "html": {
                "href": "https://github.com/facebook/PathPicker/pull/92#discussion_r30259943"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/92"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/30290052",
        "pull_request_review_id": null,
        "id": 30290052,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMjkwMDUy",
        "diff_hunk": "@@ -0,0 +1,30 @@\n+\n+\n+\n+\n+\n+\n+\n+\n+==========================================================\n+Files you have selected:\n+==========================================================\n+./README.md\n+/Users/pcottle/Dropbox (Facebook)/wip/PathPicker/src/__tests__/__init__.py",
        "path": "src/__tests__/expected/selectTwoCommandMode.txt",
        "position": null,
        "original_position": 13,
        "commit_id": "3c0ecccd6eabd067de8c2b6fae153634ff1d7da3",
        "original_commit_id": "10b227d898efdb7b29d1ec6888452287729e0916",
        "user": {
            "login": "pcottle",
            "id": 1135007,
            "node_id": "MDQ6VXNlcjExMzUwMDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1135007?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pcottle",
            "html_url": "https://github.com/pcottle",
            "followers_url": "https://api.github.com/users/pcottle/followers",
            "following_url": "https://api.github.com/users/pcottle/following{/other_user}",
            "gists_url": "https://api.github.com/users/pcottle/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pcottle/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pcottle/subscriptions",
            "organizations_url": "https://api.github.com/users/pcottle/orgs",
            "repos_url": "https://api.github.com/users/pcottle/repos",
            "events_url": "https://api.github.com/users/pcottle/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pcottle/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "oh wait, this wont work outside of my directory because of the relative imports. let me update...\n",
        "created_at": "2015-05-14T00:45:43Z",
        "updated_at": "2015-05-14T00:49:54Z",
        "html_url": "https://github.com/facebook/PathPicker/pull/97#discussion_r30290052",
        "pull_request_url": "https://api.github.com/repos/facebook/PathPicker/pulls/97",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/30290052"
            },
            "html": {
                "href": "https://github.com/facebook/PathPicker/pull/97#discussion_r30290052"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/97"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/30290077",
        "pull_request_review_id": null,
        "id": 30290077,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMjkwMDc3",
        "diff_hunk": "@@ -32,6 +32,10 @@\n }, {\n     'name': 'selectDownSelectInverse',\n     'inputs': ['f', 'j', 'f', 'A'],\n+}, {\n+    'name': 'selectTwoCommandMode',\n+    'inputs': ['f', 'j', 'f', 'c'],\n+    'pastScreen': 1",
        "path": "src/__tests__/testScreen.py",
        "position": null,
        "original_position": 7,
        "commit_id": "3c0ecccd6eabd067de8c2b6fae153634ff1d7da3",
        "original_commit_id": "10b227d898efdb7b29d1ec6888452287729e0916",
        "user": {
            "login": "pcottle",
            "id": 1135007,
            "node_id": "MDQ6VXNlcjExMzUwMDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1135007?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pcottle",
            "html_url": "https://github.com/pcottle",
            "followers_url": "https://api.github.com/users/pcottle/followers",
            "following_url": "https://api.github.com/users/pcottle/following{/other_user}",
            "gists_url": "https://api.github.com/users/pcottle/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pcottle/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pcottle/subscriptions",
            "organizations_url": "https://api.github.com/users/pcottle/orgs",
            "repos_url": "https://api.github.com/users/pcottle/repos",
            "events_url": "https://api.github.com/users/pcottle/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pcottle/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "here we denote we want the second screen we saw -- aka the screen we saw once we entered command mode\n",
        "created_at": "2015-05-14T00:46:21Z",
        "updated_at": "2015-05-14T00:49:54Z",
        "html_url": "https://github.com/facebook/PathPicker/pull/97#discussion_r30290077",
        "pull_request_url": "https://api.github.com/repos/facebook/PathPicker/pulls/97",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/30290077"
            },
            "html": {
                "href": "https://github.com/facebook/PathPicker/pull/97#discussion_r30290077"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/97"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/30290244",
        "pull_request_review_id": null,
        "id": 30290244,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMjkwMjQ0",
        "diff_hunk": "@@ -32,6 +32,11 @@\n }, {\n     'name': 'selectDownSelectInverse',\n     'inputs': ['f', 'j', 'f', 'A'],\n+}, {\n+    'name': 'selectTwoCommandMode',\n+    'input': 'absoluteGitDiff.txt',\n+    'inputs': ['f', 'j', 'f', 'c'],",
        "path": "src/__tests__/testScreen.py",
        "position": 7,
        "original_position": 7,
        "commit_id": "3c0ecccd6eabd067de8c2b6fae153634ff1d7da3",
        "original_commit_id": "3c0ecccd6eabd067de8c2b6fae153634ff1d7da3",
        "user": {
            "login": "pcottle",
            "id": 1135007,
            "node_id": "MDQ6VXNlcjExMzUwMDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1135007?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pcottle",
            "html_url": "https://github.com/pcottle",
            "followers_url": "https://api.github.com/users/pcottle/followers",
            "following_url": "https://api.github.com/users/pcottle/following{/other_user}",
            "gists_url": "https://api.github.com/users/pcottle/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pcottle/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pcottle/subscriptions",
            "organizations_url": "https://api.github.com/users/pcottle/orgs",
            "repos_url": "https://api.github.com/users/pcottle/repos",
            "events_url": "https://api.github.com/users/pcottle/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pcottle/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "and the key sequence we perform\n",
        "created_at": "2015-05-14T00:50:29Z",
        "updated_at": "2015-05-14T00:50:29Z",
        "html_url": "https://github.com/facebook/PathPicker/pull/97#discussion_r30290244",
        "pull_request_url": "https://api.github.com/repos/facebook/PathPicker/pulls/97",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/30290244"
            },
            "html": {
                "href": "https://github.com/facebook/PathPicker/pull/97#discussion_r30290244"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/97"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/30328419",
        "pull_request_review_id": null,
        "id": 30328419,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMzI4NDE5",
        "diff_hunk": "@@ -192,6 +192,22 @@\n     'match': True,\n     'num': 0,\n     'file': '~/src/categories/NSDate+Category.h'\n+}, {\n+    # Unicode\n+    'input': u'\\xe4.py',\n+    'match': True,\n+    'num': 0,\n+    'file': u'\\xe4.py',\n+}, {\n+    'input': u'test.py\\xe4',\n+    'match': True,\n+    'num': 0,\n+    'file': u'test.py\\xe4',\n+}, {\n+    'input': u'test\\xe4.\\xe42',\n+    'match': False,\n+    'num': 0,\n+    'file': u'test\\xe4.\\xe42',",
        "path": "src/test.py",
        "position": 19,
        "original_position": 19,
        "commit_id": "b9fec4ad3b0f2cfd4cc8f04a208383205dbff4a8",
        "original_commit_id": "b9fec4ad3b0f2cfd4cc8f04a208383205dbff4a8",
        "user": {
            "login": "akroxaalyaa",
            "id": 12446795,
            "node_id": "MDQ6VXNlcjEyNDQ2Nzk1",
            "avatar_url": "https://avatars1.githubusercontent.com/u/12446795?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/akroxaalyaa",
            "html_url": "https://github.com/akroxaalyaa",
            "followers_url": "https://api.github.com/users/akroxaalyaa/followers",
            "following_url": "https://api.github.com/users/akroxaalyaa/following{/other_user}",
            "gists_url": "https://api.github.com/users/akroxaalyaa/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/akroxaalyaa/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/akroxaalyaa/subscriptions",
            "organizations_url": "https://api.github.com/users/akroxaalyaa/orgs",
            "repos_url": "https://api.github.com/users/akroxaalyaa/repos",
            "events_url": "https://api.github.com/users/akroxaalyaa/events{/privacy}",
            "received_events_url": "https://api.github.com/users/akroxaalyaa/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "S\n",
        "created_at": "2015-05-14T15:06:39Z",
        "updated_at": "2015-05-14T15:06:39Z",
        "html_url": "https://github.com/facebook/PathPicker/pull/90#discussion_r30328419",
        "pull_request_url": "https://api.github.com/repos/facebook/PathPicker/pulls/90",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/30328419"
            },
            "html": {
                "href": "https://github.com/facebook/PathPicker/pull/90#discussion_r30328419"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/90"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/30340032",
        "pull_request_review_id": null,
        "id": 30340032,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMzQwMDMy",
        "diff_hunk": "@@ -29,19 +32,21 @@ def getLineObjsFromFile(inputFile):\n \n \n def getRowsFromScreenRun(\n-      inputFile,\n-      charInputs,\n-      screenConfig={},\n-      printScreen=True,\n-      pastScreen=None):\n+        inputFile,\n+        charInputs,\n+        screenConfig={},\n+        printScreen=True,\n+        pastScreen=None):\n     lineObjs = getLineObjsFromFile(inputFile)\n     screen = ScreenForTest(\n         charInputs,\n         maxX=screenConfig.get('maxX', 80),\n         maxY=screenConfig.get('maxY', 30),\n     )\n+    # mock our flags with an empty command line for now\n+    flags = ScreenFlags.initFromArgs([])",
        "path": "src/__tests__/screenTestRunner.py",
        "position": 35,
        "original_position": 35,
        "commit_id": "a06c53bf257d3695a120ba5e0a7653005b7c8330",
        "original_commit_id": "a06c53bf257d3695a120ba5e0a7653005b7c8330",
        "user": {
            "login": "pcottle",
            "id": 1135007,
            "node_id": "MDQ6VXNlcjExMzUwMDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1135007?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pcottle",
            "html_url": "https://github.com/pcottle",
            "followers_url": "https://api.github.com/users/pcottle/followers",
            "following_url": "https://api.github.com/users/pcottle/following{/other_user}",
            "gists_url": "https://api.github.com/users/pcottle/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pcottle/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pcottle/subscriptions",
            "organizations_url": "https://api.github.com/users/pcottle/orgs",
            "repos_url": "https://api.github.com/users/pcottle/repos",
            "events_url": "https://api.github.com/users/pcottle/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pcottle/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "ah i didnt realize it was so easy to mock arg-based parsing... aka i didn't realize `argparse` could take in an empty array and not complain\n",
        "created_at": "2015-05-14T17:11:35Z",
        "updated_at": "2015-05-14T17:11:35Z",
        "html_url": "https://github.com/facebook/PathPicker/pull/99#discussion_r30340032",
        "pull_request_url": "https://api.github.com/repos/facebook/PathPicker/pulls/99",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/30340032"
            },
            "html": {
                "href": "https://github.com/facebook/PathPicker/pull/99#discussion_r30340032"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/99"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/30340137",
        "pull_request_review_id": null,
        "id": 30340137,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMzQwMTM3",
        "diff_hunk": "@@ -91,4 +91,8 @@ def setSelectionsFromPickle(selectionPath, lineObjs):\n         output.writeToFile('echo \":D\"')\n         sys.exit(0)\n     output.clearFile()\n-    curses.wrapper(doProgram)\n+    # we initialize our args *before* we curse up\n+    # so we can benefit from the default argparse\n+    # behavior:\n+    flags = ScreenFlags.initFromArgs(sys.argv)\n+    curses.wrapper(functools.partial(doProgram, flags=flags))",
        "path": "src/choose.py",
        "position": 39,
        "original_position": 39,
        "commit_id": "a06c53bf257d3695a120ba5e0a7653005b7c8330",
        "original_commit_id": "a06c53bf257d3695a120ba5e0a7653005b7c8330",
        "user": {
            "login": "pcottle",
            "id": 1135007,
            "node_id": "MDQ6VXNlcjExMzUwMDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1135007?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pcottle",
            "html_url": "https://github.com/pcottle",
            "followers_url": "https://api.github.com/users/pcottle/followers",
            "following_url": "https://api.github.com/users/pcottle/following{/other_user}",
            "gists_url": "https://api.github.com/users/pcottle/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pcottle/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pcottle/subscriptions",
            "organizations_url": "https://api.github.com/users/pcottle/orgs",
            "repos_url": "https://api.github.com/users/pcottle/repos",
            "events_url": "https://api.github.com/users/pcottle/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pcottle/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "you can also do:\n\n```\nlambda x:doProgram(x, flags)\n```\n\ndo avoid the partial bind but nbd\n",
        "created_at": "2015-05-14T17:12:32Z",
        "updated_at": "2015-05-14T17:12:32Z",
        "html_url": "https://github.com/facebook/PathPicker/pull/99#discussion_r30340137",
        "pull_request_url": "https://api.github.com/repos/facebook/PathPicker/pulls/99",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/30340137"
            },
            "html": {
                "href": "https://github.com/facebook/PathPicker/pull/99#discussion_r30340137"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/99"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/30353718",
        "pull_request_review_id": null,
        "id": 30353718,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMzUzNzE4",
        "diff_hunk": "@@ -77,16 +77,16 @@ def compareToExpected(self, testName, actualLines):\n         self.assertEqual(\n             len(actualLines),\n             len(expectedLines),\n-            'Actual lines was %d but expected lines aws %d' % (\n-                len(actualLines), len(expectedLines)),\n+            'In file %s, actual lines was %d but expected lines was %d' % (\n+                testName, len(actualLines), len(expectedLines)),",
        "path": "src/__tests__/testScreen.py",
        "position": 7,
        "original_position": 7,
        "commit_id": "744db944bfdb3b6570fd7237625f3c62ada3d5b8",
        "original_commit_id": "744db944bfdb3b6570fd7237625f3c62ada3d5b8",
        "user": {
            "login": "pcottle",
            "id": 1135007,
            "node_id": "MDQ6VXNlcjExMzUwMDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1135007?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pcottle",
            "html_url": "https://github.com/pcottle",
            "followers_url": "https://api.github.com/users/pcottle/followers",
            "following_url": "https://api.github.com/users/pcottle/following{/other_user}",
            "gists_url": "https://api.github.com/users/pcottle/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pcottle/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pcottle/subscriptions",
            "organizations_url": "https://api.github.com/users/pcottle/orgs",
            "repos_url": "https://api.github.com/users/pcottle/repos",
            "events_url": "https://api.github.com/users/pcottle/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pcottle/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "technically this is the test name and not the filepath, not sure if we want to make that clear\n",
        "created_at": "2015-05-14T19:24:38Z",
        "updated_at": "2015-05-14T19:24:38Z",
        "html_url": "https://github.com/facebook/PathPicker/pull/100#discussion_r30353718",
        "pull_request_url": "https://api.github.com/repos/facebook/PathPicker/pulls/100",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/30353718"
            },
            "html": {
                "href": "https://github.com/facebook/PathPicker/pull/100#discussion_r30353718"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/100"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/30353889",
        "pull_request_review_id": null,
        "id": 30353889,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMzUzODg5",
        "diff_hunk": "@@ -155,15 +156,30 @@ def updateDecoratedMatch(self):\n         else:\n             attributes = (0, 0, FormattedText.UNDERLINE_ATTRIBUTE)\n \n+        decoratorText = self.getDecorator()\n+\n         self.decoratedMatch = FormattedText(\n             FormattedText.getSequenceForAttributes(*attributes) +\n-            self.getDecorator() + self.getMatch())\n+            decoratorText + self.getMatch())\n+\n+        # because decorators add length to the line, when the decorator\n+        # is removed, we need to print blank space (aka \"erase\") the\n+        # part of the line that is stale. calculate how much this is based\n+        # on the max length decorator.\n+        self.endingClearText = FormattedText(\n+            FormattedText.getSequenceForAttributes(\n+                FormattedText.DEFAULT_COLOR_FOREGROUND,\n+                FormattedText.DEFAULT_COLOR_BACKGROUND, 0) +\n+            \" \" * (self.getMaxDecoratorLength() - len(decoratorText)))",
        "path": "src/format.py",
        "position": 27,
        "original_position": 27,
        "commit_id": "744db944bfdb3b6570fd7237625f3c62ada3d5b8",
        "original_commit_id": "744db944bfdb3b6570fd7237625f3c62ada3d5b8",
        "user": {
            "login": "pcottle",
            "id": 1135007,
            "node_id": "MDQ6VXNlcjExMzUwMDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1135007?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pcottle",
            "html_url": "https://github.com/pcottle",
            "followers_url": "https://api.github.com/users/pcottle/followers",
            "following_url": "https://api.github.com/users/pcottle/following{/other_user}",
            "gists_url": "https://api.github.com/users/pcottle/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pcottle/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pcottle/subscriptions",
            "organizations_url": "https://api.github.com/users/pcottle/orgs",
            "repos_url": "https://api.github.com/users/pcottle/repos",
            "events_url": "https://api.github.com/users/pcottle/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pcottle/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "hrm, im not a huge fan of this since then we are starting to print blank spaces after the lines *_regardless_ of whether we just become selected or not. you can see this in all the test input which has a bunch of trailing whitespace :-/\n\ncan we instead just dirty the line completely in screen control and use that to handle the refresh?\n",
        "created_at": "2015-05-14T19:26:42Z",
        "updated_at": "2015-05-14T19:26:42Z",
        "html_url": "https://github.com/facebook/PathPicker/pull/100#discussion_r30353889",
        "pull_request_url": "https://api.github.com/repos/facebook/PathPicker/pulls/100",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/30353889"
            },
            "html": {
                "href": "https://github.com/facebook/PathPicker/pull/100#discussion_r30353889"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/100"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/30353918",
        "pull_request_review_id": null,
        "id": 30353918,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMzUzOTE4",
        "diff_hunk": "@@ -42,8 +45,8 @@ def __str__(self):\n     def parseFormatting(cls, formatting):\n         \"\"\"Parse ANSI formatting; the formatting passed in should be\n         stripped of the control characters and ending character\"\"\"\n-        fore = -1  # -1 default means \"use default\", not \"use white/black\"\n-        back = -1\n+        fore = cls.DEFAULT_COLOR_FOREGROUND\n+        back = cls.DEFAULT_COLOR_BACKGROUND",
        "path": "src/formattedText.py",
        "position": 17,
        "original_position": 17,
        "commit_id": "744db944bfdb3b6570fd7237625f3c62ada3d5b8",
        "original_commit_id": "744db944bfdb3b6570fd7237625f3c62ada3d5b8",
        "user": {
            "login": "pcottle",
            "id": 1135007,
            "node_id": "MDQ6VXNlcjExMzUwMDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1135007?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pcottle",
            "html_url": "https://github.com/pcottle",
            "followers_url": "https://api.github.com/users/pcottle/followers",
            "following_url": "https://api.github.com/users/pcottle/following{/other_user}",
            "gists_url": "https://api.github.com/users/pcottle/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pcottle/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pcottle/subscriptions",
            "organizations_url": "https://api.github.com/users/pcottle/orgs",
            "repos_url": "https://api.github.com/users/pcottle/repos",
            "events_url": "https://api.github.com/users/pcottle/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pcottle/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "i do like these changes and a bunch of the others though!\n",
        "created_at": "2015-05-14T19:26:58Z",
        "updated_at": "2015-05-14T19:26:58Z",
        "html_url": "https://github.com/facebook/PathPicker/pull/100#discussion_r30353918",
        "pull_request_url": "https://api.github.com/repos/facebook/PathPicker/pulls/100",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/30353918"
            },
            "html": {
                "href": "https://github.com/facebook/PathPicker/pull/100#discussion_r30353918"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/100"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/30362937",
        "pull_request_review_id": null,
        "id": 30362937,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMzYyOTM3",
        "diff_hunk": "@@ -155,15 +156,30 @@ def updateDecoratedMatch(self):\n         else:\n             attributes = (0, 0, FormattedText.UNDERLINE_ATTRIBUTE)\n \n+        decoratorText = self.getDecorator()\n+\n         self.decoratedMatch = FormattedText(\n             FormattedText.getSequenceForAttributes(*attributes) +\n-            self.getDecorator() + self.getMatch())\n+            decoratorText + self.getMatch())\n+\n+        # because decorators add length to the line, when the decorator\n+        # is removed, we need to print blank space (aka \"erase\") the\n+        # part of the line that is stale. calculate how much this is based\n+        # on the max length decorator.\n+        self.endingClearText = FormattedText(\n+            FormattedText.getSequenceForAttributes(\n+                FormattedText.DEFAULT_COLOR_FOREGROUND,\n+                FormattedText.DEFAULT_COLOR_BACKGROUND, 0) +\n+            \" \" * (self.getMaxDecoratorLength() - len(decoratorText)))",
        "path": "src/format.py",
        "position": 27,
        "original_position": 27,
        "commit_id": "744db944bfdb3b6570fd7237625f3c62ada3d5b8",
        "original_commit_id": "744db944bfdb3b6570fd7237625f3c62ada3d5b8",
        "user": {
            "login": "lastquestion",
            "id": 1095956,
            "node_id": "MDQ6VXNlcjEwOTU5NTY=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1095956?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/lastquestion",
            "html_url": "https://github.com/lastquestion",
            "followers_url": "https://api.github.com/users/lastquestion/followers",
            "following_url": "https://api.github.com/users/lastquestion/following{/other_user}",
            "gists_url": "https://api.github.com/users/lastquestion/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/lastquestion/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/lastquestion/subscriptions",
            "organizations_url": "https://api.github.com/users/lastquestion/orgs",
            "repos_url": "https://api.github.com/users/lastquestion/repos",
            "events_url": "https://api.github.com/users/lastquestion/events{/privacy}",
            "received_events_url": "https://api.github.com/users/lastquestion/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Yeah, that's a way better approach. I'll redo the PR.\n",
        "created_at": "2015-05-14T21:06:17Z",
        "updated_at": "2015-05-14T21:06:17Z",
        "html_url": "https://github.com/facebook/PathPicker/pull/100#discussion_r30362937",
        "pull_request_url": "https://api.github.com/repos/facebook/PathPicker/pulls/100",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/30362937"
            },
            "html": {
                "href": "https://github.com/facebook/PathPicker/pull/100#discussion_r30362937"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/100"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/30363069",
        "pull_request_review_id": null,
        "id": 30363069,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMzYzMDY5",
        "diff_hunk": "@@ -77,16 +77,16 @@ def compareToExpected(self, testName, actualLines):\n         self.assertEqual(\n             len(actualLines),\n             len(expectedLines),\n-            'Actual lines was %d but expected lines aws %d' % (\n-                len(actualLines), len(expectedLines)),\n+            'In file %s, actual lines was %d but expected lines was %d' % (\n+                testName, len(actualLines), len(expectedLines)),",
        "path": "src/__tests__/testScreen.py",
        "position": 7,
        "original_position": 7,
        "commit_id": "744db944bfdb3b6570fd7237625f3c62ada3d5b8",
        "original_commit_id": "744db944bfdb3b6570fd7237625f3c62ada3d5b8",
        "user": {
            "login": "lastquestion",
            "id": 1095956,
            "node_id": "MDQ6VXNlcjEwOTU5NTY=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1095956?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/lastquestion",
            "html_url": "https://github.com/lastquestion",
            "followers_url": "https://api.github.com/users/lastquestion/followers",
            "following_url": "https://api.github.com/users/lastquestion/following{/other_user}",
            "gists_url": "https://api.github.com/users/lastquestion/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/lastquestion/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/lastquestion/subscriptions",
            "organizations_url": "https://api.github.com/users/lastquestion/orgs",
            "repos_url": "https://api.github.com/users/lastquestion/repos",
            "events_url": "https://api.github.com/users/lastquestion/events{/privacy}",
            "received_events_url": "https://api.github.com/users/lastquestion/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I was kinda lazy. It would be cool if we can build the whole filepath. That way we can use fpp to pick it out. LOL. I'll change it to get the actual filepath.\n",
        "created_at": "2015-05-14T21:07:35Z",
        "updated_at": "2015-05-14T21:07:35Z",
        "html_url": "https://github.com/facebook/PathPicker/pull/100#discussion_r30363069",
        "pull_request_url": "https://api.github.com/repos/facebook/PathPicker/pulls/100",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/30363069"
            },
            "html": {
                "href": "https://github.com/facebook/PathPicker/pull/100#discussion_r30363069"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/100"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/30363507",
        "pull_request_review_id": null,
        "id": 30363507,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMzYzNTA3",
        "diff_hunk": "@@ -91,4 +91,8 @@ def setSelectionsFromPickle(selectionPath, lineObjs):\n         output.writeToFile('echo \":D\"')\n         sys.exit(0)\n     output.clearFile()\n-    curses.wrapper(doProgram)\n+    # we initialize our args *before* we curse up\n+    # so we can benefit from the default argparse\n+    # behavior:\n+    flags = ScreenFlags.initFromArgs(sys.argv)\n+    curses.wrapper(functools.partial(doProgram, flags=flags))",
        "path": "src/choose.py",
        "position": 39,
        "original_position": 39,
        "commit_id": "a06c53bf257d3695a120ba5e0a7653005b7c8330",
        "original_commit_id": "a06c53bf257d3695a120ba5e0a7653005b7c8330",
        "user": {
            "login": "lastquestion",
            "id": 1095956,
            "node_id": "MDQ6VXNlcjEwOTU5NTY=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1095956?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/lastquestion",
            "html_url": "https://github.com/lastquestion",
            "followers_url": "https://api.github.com/users/lastquestion/followers",
            "following_url": "https://api.github.com/users/lastquestion/following{/other_user}",
            "gists_url": "https://api.github.com/users/lastquestion/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/lastquestion/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/lastquestion/subscriptions",
            "organizations_url": "https://api.github.com/users/lastquestion/orgs",
            "repos_url": "https://api.github.com/users/lastquestion/repos",
            "events_url": "https://api.github.com/users/lastquestion/events{/privacy}",
            "received_events_url": "https://api.github.com/users/lastquestion/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "that's cleaner, I was afraid because I didn't know what python level supported what.\n",
        "created_at": "2015-05-14T21:11:49Z",
        "updated_at": "2015-05-14T21:11:49Z",
        "html_url": "https://github.com/facebook/PathPicker/pull/99#discussion_r30363507",
        "pull_request_url": "https://api.github.com/repos/facebook/PathPicker/pulls/99",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/30363507"
            },
            "html": {
                "href": "https://github.com/facebook/PathPicker/pull/99#discussion_r30363507"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/99"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/30377662",
        "pull_request_review_id": null,
        "id": 30377662,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMzc3NjYy",
        "diff_hunk": "@@ -21,20 +21,22 @@ done\n BASEDIR=\"$( cd -P \"$( dirname \"$SOURCE\" )\" && pwd )\"\n \n PYTHONCMD=\"python\"\n+OPTS=\"$@\"\n \n function doProgram {\n   # process input from pipe and store as pickled file\n-  $PYTHONCMD \"$BASEDIR/src/processInput.py\" \"$@\"\n+  $PYTHONCMD \"$BASEDIR/src/processInput.py\" $OPTS\n   # now close stdin and choose input...\n   exec 0<&-\n-  $PYTHONCMD \"$BASEDIR/src/choose.py\" \"$@\" < /dev/tty\n+\n+  $PYTHONCMD \"$BASEDIR/src/choose.py\" $OPTS < /dev/tty\n   # execute the output bash script\n   sh ~/.fpp/.fpp.sh < /dev/tty\n }\n \n # we need to handle the --help option outside the python\n # flow since otherwise we will move into input selection...\n-for opt in \"$@\"; do\n+for opt in OPTS; do",
        "path": "fpp",
        "position": 22,
        "original_position": 22,
        "commit_id": "a06c53bf257d3695a120ba5e0a7653005b7c8330",
        "original_commit_id": "a06c53bf257d3695a120ba5e0a7653005b7c8330",
        "user": {
            "login": "pcottle",
            "id": 1135007,
            "node_id": "MDQ6VXNlcjExMzUwMDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1135007?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pcottle",
            "html_url": "https://github.com/pcottle",
            "followers_url": "https://api.github.com/users/pcottle/followers",
            "following_url": "https://api.github.com/users/pcottle/following{/other_user}",
            "gists_url": "https://api.github.com/users/pcottle/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pcottle/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pcottle/subscriptions",
            "organizations_url": "https://api.github.com/users/pcottle/orgs",
            "repos_url": "https://api.github.com/users/pcottle/repos",
            "events_url": "https://api.github.com/users/pcottle/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pcottle/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "hrm i think this broken the argument parsing in bash, reverting\n",
        "created_at": "2015-05-15T00:43:24Z",
        "updated_at": "2015-05-15T00:43:24Z",
        "html_url": "https://github.com/facebook/PathPicker/pull/99#discussion_r30377662",
        "pull_request_url": "https://api.github.com/repos/facebook/PathPicker/pulls/99",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/30377662"
            },
            "html": {
                "href": "https://github.com/facebook/PathPicker/pull/99#discussion_r30377662"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/99"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/30476952",
        "pull_request_review_id": null,
        "id": 30476952,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwNDc2OTUy",
        "diff_hunk": "@@ -40,6 +40,25 @@\n     # Regardless of the above case, here's how the file name should terminate\n     '(\\s|$|:)+'\n )))\n+MASTER_REGEX_WITH_SPACES = re.compile(''.join((\n+    #begin the capture\n+    '(',\n+    #a leading / for absolute dirs if its there\n+    '\\/?',\n+    # now we look at directories, where we allow either normal chars\n+    # or a single whitespace char followed by legit chars\n+    '(([a-z.A-Z0-9\\-_]|\\s[a-zA-Z0-9\\-_])+\\/)+',",
        "path": "src/parse.py",
        "position": 11,
        "original_position": 11,
        "commit_id": "b8bfcfdfa6c772b410097cea5dd71bf54aefa591",
        "original_commit_id": "b8bfcfdfa6c772b410097cea5dd71bf54aefa591",
        "user": {
            "login": "lastquestion",
            "id": 1095956,
            "node_id": "MDQ6VXNlcjEwOTU5NTY=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1095956?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/lastquestion",
            "html_url": "https://github.com/lastquestion",
            "followers_url": "https://api.github.com/users/lastquestion/followers",
            "following_url": "https://api.github.com/users/lastquestion/following{/other_user}",
            "gists_url": "https://api.github.com/users/lastquestion/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/lastquestion/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/lastquestion/subscriptions",
            "organizations_url": "https://api.github.com/users/lastquestion/orgs",
            "repos_url": "https://api.github.com/users/lastquestion/repos",
            "events_url": "https://api.github.com/users/lastquestion/events{/privacy}",
            "received_events_url": "https://api.github.com/users/lastquestion/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "This is good, but unfortunately real directories can have multiple spaces. I'm not dinging the approach - the regex otherwise would overmatch on everything - and clearly it's an improvement. But '/just for you pcottle/' is a valid directory.  Something to think about.\n",
        "created_at": "2015-05-18T00:43:59Z",
        "updated_at": "2015-05-18T00:43:59Z",
        "html_url": "https://github.com/facebook/PathPicker/pull/116#discussion_r30476952",
        "pull_request_url": "https://api.github.com/repos/facebook/PathPicker/pulls/116",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/30476952"
            },
            "html": {
                "href": "https://github.com/facebook/PathPicker/pull/116#discussion_r30476952"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/116"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/30481430",
        "pull_request_review_id": null,
        "id": 30481430,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwNDgxNDMw",
        "diff_hunk": "@@ -40,6 +40,25 @@\n     # Regardless of the above case, here's how the file name should terminate\n     '(\\s|$|:)+'\n )))\n+MASTER_REGEX_WITH_SPACES = re.compile(''.join((\n+    #begin the capture\n+    '(',\n+    #a leading / for absolute dirs if its there\n+    '\\/?',\n+    # now we look at directories, where we allow either normal chars\n+    # or a single whitespace char followed by legit chars\n+    '(([a-z.A-Z0-9\\-_]|\\s[a-zA-Z0-9\\-_])+\\/)+',",
        "path": "src/parse.py",
        "position": 11,
        "original_position": 11,
        "commit_id": "b8bfcfdfa6c772b410097cea5dd71bf54aefa591",
        "original_commit_id": "b8bfcfdfa6c772b410097cea5dd71bf54aefa591",
        "user": {
            "login": "pcottle",
            "id": 1135007,
            "node_id": "MDQ6VXNlcjExMzUwMDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1135007?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pcottle",
            "html_url": "https://github.com/pcottle",
            "followers_url": "https://api.github.com/users/pcottle/followers",
            "following_url": "https://api.github.com/users/pcottle/following{/other_user}",
            "gists_url": "https://api.github.com/users/pcottle/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pcottle/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pcottle/subscriptions",
            "organizations_url": "https://api.github.com/users/pcottle/orgs",
            "repos_url": "https://api.github.com/users/pcottle/repos",
            "events_url": "https://api.github.com/users/pcottle/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pcottle/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Oh sorry I should clarify -- the normal chars or single white space followed by the normal chars is the **inner match** of the directories, and we allow any number of inner matches for a given directory.\n\nSo you can have multiple spaces per folder name, you just can't end in a space or have two spaces in a row. It was a tricky hack since otherwise we would gobble up white space before any / and consider that a directory >___<\n\nIf you want you could send over a PR that adds testing or I can try to get to it this week!\n",
        "created_at": "2015-05-18T04:43:29Z",
        "updated_at": "2015-05-18T04:43:29Z",
        "html_url": "https://github.com/facebook/PathPicker/pull/116#discussion_r30481430",
        "pull_request_url": "https://api.github.com/repos/facebook/PathPicker/pulls/116",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/30481430"
            },
            "html": {
                "href": "https://github.com/facebook/PathPicker/pull/116#discussion_r30481430"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/116"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/30483286",
        "pull_request_review_id": null,
        "id": 30483286,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwNDgzMjg2",
        "diff_hunk": "@@ -40,6 +40,25 @@\n     # Regardless of the above case, here's how the file name should terminate\n     '(\\s|$|:)+'\n )))\n+MASTER_REGEX_WITH_SPACES = re.compile(''.join((\n+    #begin the capture\n+    '(',\n+    #a leading / for absolute dirs if its there\n+    '\\/?',\n+    # now we look at directories, where we allow either normal chars\n+    # or a single whitespace char followed by legit chars\n+    '(([a-z.A-Z0-9\\-_]|\\s[a-zA-Z0-9\\-_])+\\/)+',",
        "path": "src/parse.py",
        "position": 11,
        "original_position": 11,
        "commit_id": "b8bfcfdfa6c772b410097cea5dd71bf54aefa591",
        "original_commit_id": "b8bfcfdfa6c772b410097cea5dd71bf54aefa591",
        "user": {
            "login": "lastquestion",
            "id": 1095956,
            "node_id": "MDQ6VXNlcjEwOTU5NTY=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1095956?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/lastquestion",
            "html_url": "https://github.com/lastquestion",
            "followers_url": "https://api.github.com/users/lastquestion/followers",
            "following_url": "https://api.github.com/users/lastquestion/following{/other_user}",
            "gists_url": "https://api.github.com/users/lastquestion/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/lastquestion/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/lastquestion/subscriptions",
            "organizations_url": "https://api.github.com/users/lastquestion/orgs",
            "repos_url": "https://api.github.com/users/lastquestion/repos",
            "events_url": "https://api.github.com/users/lastquestion/events{/privacy}",
            "received_events_url": "https://api.github.com/users/lastquestion/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Hey that's my fault, I read the comment but I didn't scroll up again and look at the tests as closely as I should have.\n\nPR incoming to update the comment to explain that's inner matching.\n",
        "created_at": "2015-05-18T06:07:23Z",
        "updated_at": "2015-05-18T06:07:23Z",
        "html_url": "https://github.com/facebook/PathPicker/pull/116#discussion_r30483286",
        "pull_request_url": "https://api.github.com/repos/facebook/PathPicker/pulls/116",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/30483286"
            },
            "html": {
                "href": "https://github.com/facebook/PathPicker/pull/116#discussion_r30483286"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/116"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/30485067",
        "pull_request_review_id": null,
        "id": 30485067,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwNDg1MDY3",
        "diff_hunk": "@@ -173,7 +182,7 @@ def assertEqualLines(self, testName, actualLines, expectedLines):\n             self.assertEqual(\n                 expectedLine,\n                 actualLine,\n-                'Lines did not match for test %s:\\n\\nExpected:%s\\nActual:%s' % (\n+                'Lines did not match for test %s:\\n\\nExpected:%s\\nActual  :%s' % (",
        "path": "src/__tests__/testScreen.py",
        "position": 21,
        "original_position": 21,
        "commit_id": "3106797ae95ea92541840f68ee1a5ad3a64f09fb",
        "original_commit_id": "623cc2f89c5a2870f1350d168b351516da8aa6b2",
        "user": {
            "login": "lastquestion",
            "id": 1095956,
            "node_id": "MDQ6VXNlcjEwOTU5NTY=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1095956?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/lastquestion",
            "html_url": "https://github.com/lastquestion",
            "followers_url": "https://api.github.com/users/lastquestion/followers",
            "following_url": "https://api.github.com/users/lastquestion/following{/other_user}",
            "gists_url": "https://api.github.com/users/lastquestion/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/lastquestion/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/lastquestion/subscriptions",
            "organizations_url": "https://api.github.com/users/lastquestion/orgs",
            "repos_url": "https://api.github.com/users/lastquestion/repos",
            "events_url": "https://api.github.com/users/lastquestion/events{/privacy}",
            "received_events_url": "https://api.github.com/users/lastquestion/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "add some spaces here to line up the expected and actual for easy visual diffing.\n",
        "created_at": "2015-05-18T07:07:00Z",
        "updated_at": "2015-05-18T07:08:30Z",
        "html_url": "https://github.com/facebook/PathPicker/pull/121#discussion_r30485067",
        "pull_request_url": "https://api.github.com/repos/facebook/PathPicker/pulls/121",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/30485067"
            },
            "html": {
                "href": "https://github.com/facebook/PathPicker/pull/121#discussion_r30485067"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/121"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/30614776",
        "pull_request_review_id": null,
        "id": 30614776,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwNjE0Nzc2",
        "diff_hunk": "@@ -45,13 +45,16 @@ class LineMatch(object):\n     ARROW_DECORATOR = '|===>'\n \n     def __init__(self, formattedLine, result, index, validateFileExists=False):\n+        self.controller = None\n+\n         self.formattedLine = formattedLine\n         self.index = index\n \n         (file, num, matches) = result\n \n         self.originalFile = file\n-        self.file = parse.prependDir(file, withFileInspection=validateFileExists)\n+        self.file = parse.prependDir(file,\n+                                     withFileInspection=validateFileExists)",
        "path": "src/format.py",
        "position": 14,
        "original_position": 14,
        "commit_id": "65533b74980cb829837be9647bc47a11a9281d3c",
        "original_commit_id": "65533b74980cb829837be9647bc47a11a9281d3c",
        "user": {
            "login": "pcottle",
            "id": 1135007,
            "node_id": "MDQ6VXNlcjExMzUwMDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1135007?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pcottle",
            "html_url": "https://github.com/pcottle",
            "followers_url": "https://api.github.com/users/pcottle/followers",
            "following_url": "https://api.github.com/users/pcottle/following{/other_user}",
            "gists_url": "https://api.github.com/users/pcottle/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pcottle/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pcottle/subscriptions",
            "organizations_url": "https://api.github.com/users/pcottle/orgs",
            "repos_url": "https://api.github.com/users/pcottle/repos",
            "events_url": "https://api.github.com/users/pcottle/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pcottle/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "why this change? was it over 80char?\n",
        "created_at": "2015-05-19T15:57:58Z",
        "updated_at": "2015-05-19T15:57:58Z",
        "html_url": "https://github.com/facebook/PathPicker/pull/119#discussion_r30614776",
        "pull_request_url": "https://api.github.com/repos/facebook/PathPicker/pulls/119",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/30614776"
            },
            "html": {
                "href": "https://github.com/facebook/PathPicker/pull/119#discussion_r30614776"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/119"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/30614982",
        "pull_request_review_id": null,
        "id": 30614982,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwNjE0OTgy",
        "diff_hunk": "@@ -213,19 +213,20 @@ def __init__(self, flags, stdscr, lineObjs, cursesAPI):\n         (self.oldmaxy, self.oldmaxx) = self.getScreenDimensions()\n         self.mode = SELECT_MODE\n \n-        self.simpleLines = []",
        "path": "src/screenControl.py",
        "position": 4,
        "original_position": 4,
        "commit_id": "65533b74980cb829837be9647bc47a11a9281d3c",
        "original_commit_id": "65533b74980cb829837be9647bc47a11a9281d3c",
        "user": {
            "login": "pcottle",
            "id": 1135007,
            "node_id": "MDQ6VXNlcjExMzUwMDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1135007?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pcottle",
            "html_url": "https://github.com/pcottle",
            "followers_url": "https://api.github.com/users/pcottle/followers",
            "following_url": "https://api.github.com/users/pcottle/following{/other_user}",
            "gists_url": "https://api.github.com/users/pcottle/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pcottle/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pcottle/subscriptions",
            "organizations_url": "https://api.github.com/users/pcottle/orgs",
            "repos_url": "https://api.github.com/users/pcottle/repos",
            "events_url": "https://api.github.com/users/pcottle/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pcottle/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "do we not use this for anything? :O\n",
        "created_at": "2015-05-19T15:59:56Z",
        "updated_at": "2015-05-19T15:59:56Z",
        "html_url": "https://github.com/facebook/PathPicker/pull/119#discussion_r30614982",
        "pull_request_url": "https://api.github.com/repos/facebook/PathPicker/pulls/119",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/30614982"
            },
            "html": {
                "href": "https://github.com/facebook/PathPicker/pull/119#discussion_r30614982"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/119"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/30615134",
        "pull_request_review_id": null,
        "id": 30615134,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwNjE1MTM0",
        "diff_hunk": "@@ -490,27 +486,34 @@ def onEnter(self):\n \n     def resetDirty(self):\n         # reset all dirty state for our components\n-        self.linesDirty = False\n+        self.dirty = False\n         self.dirtyIndexes = []\n \n-    def dirtyHoverIndex(self):\n-        self.dirtyIndexes.append(self.hoverIndex)\n+    def dirtyLine(self, index):\n+        self.dirtyIndexes.append(index)\n \n-    def dirtyLines(self):\n-        self.linesDirty = True\n+    def dirtyAll(self):\n+        self.dirty = True\n \n     def processDirty(self):\n-        if self.linesDirty:\n+        if self.dirty:\n             self.printAll()\n-        for index in self.dirtyIndexes:\n-            self.lineMatches[index].output(self.colorPrinter)\n-        if self.helperChrome.getIsSidebarMode():\n-            # need to output since lines can override\n-            # the sidebar stuff\n-            self.printChrome()\n+        else:",
        "path": "src/screenControl.py",
        "position": 127,
        "original_position": 127,
        "commit_id": "65533b74980cb829837be9647bc47a11a9281d3c",
        "original_commit_id": "65533b74980cb829837be9647bc47a11a9281d3c",
        "user": {
            "login": "pcottle",
            "id": 1135007,
            "node_id": "MDQ6VXNlcjExMzUwMDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1135007?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pcottle",
            "html_url": "https://github.com/pcottle",
            "followers_url": "https://api.github.com/users/pcottle/followers",
            "following_url": "https://api.github.com/users/pcottle/following{/other_user}",
            "gists_url": "https://api.github.com/users/pcottle/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pcottle/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pcottle/subscriptions",
            "organizations_url": "https://api.github.com/users/pcottle/orgs",
            "repos_url": "https://api.github.com/users/pcottle/repos",
            "events_url": "https://api.github.com/users/pcottle/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pcottle/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "nit: the above could just be an early return so we dont indent too much\n",
        "created_at": "2015-05-19T16:01:29Z",
        "updated_at": "2015-05-19T16:01:29Z",
        "html_url": "https://github.com/facebook/PathPicker/pull/119#discussion_r30615134",
        "pull_request_url": "https://api.github.com/repos/facebook/PathPicker/pulls/119",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/30615134"
            },
            "html": {
                "href": "https://github.com/facebook/PathPicker/pull/119#discussion_r30615134"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/119"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/30615169",
        "pull_request_review_id": null,
        "id": 30615169,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwNjE1MTY5",
        "diff_hunk": "@@ -490,27 +486,34 @@ def onEnter(self):\n \n     def resetDirty(self):\n         # reset all dirty state for our components\n-        self.linesDirty = False\n+        self.dirty = False\n         self.dirtyIndexes = []\n \n-    def dirtyHoverIndex(self):\n-        self.dirtyIndexes.append(self.hoverIndex)\n+    def dirtyLine(self, index):\n+        self.dirtyIndexes.append(index)\n \n-    def dirtyLines(self):\n-        self.linesDirty = True\n+    def dirtyAll(self):\n+        self.dirty = True\n \n     def processDirty(self):\n-        if self.linesDirty:\n+        if self.dirty:\n             self.printAll()\n-        for index in self.dirtyIndexes:\n-            self.lineMatches[index].output(self.colorPrinter)\n-        if self.helperChrome.getIsSidebarMode():\n-            # need to output since lines can override\n-            # the sidebar stuff\n-            self.printChrome()\n+        else:\n+            (minx, miny, maxx, maxy) = self.getChromeBoundaries()\n+            for index in self.dirtyIndexes:\n+                y = miny + index + self.getScrollOffset()\n+                if y >= miny or y < maxy:\n+                    self.clearLine(y)\n+                    self.lineObjs[index].output(self.colorPrinter)\n+\n+    def clearLine(self, y):\n+        '''Clear a line of content, excluding the chrome'''\n+        (minx, miny, maxx, maxy) = self.getChromeBoundaries()\n+        for x in range(minx, maxx):\n+            self.stdscr.delch(y, x)",
        "path": "src/screenControl.py",
        "position": 139,
        "original_position": 139,
        "commit_id": "65533b74980cb829837be9647bc47a11a9281d3c",
        "original_commit_id": "65533b74980cb829837be9647bc47a11a9281d3c",
        "user": {
            "login": "pcottle",
            "id": 1135007,
            "node_id": "MDQ6VXNlcjExMzUwMDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1135007?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pcottle",
            "html_url": "https://github.com/pcottle",
            "followers_url": "https://api.github.com/users/pcottle/followers",
            "following_url": "https://api.github.com/users/pcottle/following{/other_user}",
            "gists_url": "https://api.github.com/users/pcottle/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pcottle/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pcottle/subscriptions",
            "organizations_url": "https://api.github.com/users/pcottle/orgs",
            "repos_url": "https://api.github.com/users/pcottle/repos",
            "events_url": "https://api.github.com/users/pcottle/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pcottle/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "ahhhh cool!!!!\n",
        "created_at": "2015-05-19T16:01:45Z",
        "updated_at": "2015-05-19T16:01:45Z",
        "html_url": "https://github.com/facebook/PathPicker/pull/119#discussion_r30615169",
        "pull_request_url": "https://api.github.com/repos/facebook/PathPicker/pulls/119",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/30615169"
            },
            "html": {
                "href": "https://github.com/facebook/PathPicker/pull/119#discussion_r30615169"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/119"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/30616708",
        "pull_request_review_id": null,
        "id": 30616708,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwNjE2NzA4",
        "diff_hunk": "@@ -1,6 +1,6 @@\n- README.md                      |  8 ++++-     \n+ README.md                      |  8 ++++-\n  fpp                            |  6 ++--\n- src/__tests__/__init__.py      |  0     ",
        "path": "src/__tests__/expected/selectDownSelectInverse.txt",
        "position": 4,
        "original_position": 4,
        "commit_id": "65533b74980cb829837be9647bc47a11a9281d3c",
        "original_commit_id": "65533b74980cb829837be9647bc47a11a9281d3c",
        "user": {
            "login": "pcottle",
            "id": 1135007,
            "node_id": "MDQ6VXNlcjExMzUwMDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1135007?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pcottle",
            "html_url": "https://github.com/pcottle",
            "followers_url": "https://api.github.com/users/pcottle/followers",
            "following_url": "https://api.github.com/users/pcottle/following{/other_user}",
            "gists_url": "https://api.github.com/users/pcottle/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pcottle/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pcottle/subscriptions",
            "organizations_url": "https://api.github.com/users/pcottle/orgs",
            "repos_url": "https://api.github.com/users/pcottle/repos",
            "events_url": "https://api.github.com/users/pcottle/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pcottle/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": ":heart_eyes: \n",
        "created_at": "2015-05-19T16:17:00Z",
        "updated_at": "2015-05-19T16:17:00Z",
        "html_url": "https://github.com/facebook/PathPicker/pull/119#discussion_r30616708",
        "pull_request_url": "https://api.github.com/repos/facebook/PathPicker/pulls/119",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/30616708"
            },
            "html": {
                "href": "https://github.com/facebook/PathPicker/pull/119#discussion_r30616708"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/119"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/30616791",
        "pull_request_review_id": null,
        "id": 30616791,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwNjE2Nzkx",
        "diff_hunk": "@@ -0,0 +1,2 @@\n+longfilenamereallylongfilenameitssuperlongareyoutiredoftryingtoreadthisyet",
        "path": "src/__tests__/inputs/longFileNames.txt",
        "position": 1,
        "original_position": 1,
        "commit_id": "3106797ae95ea92541840f68ee1a5ad3a64f09fb",
        "original_commit_id": "3106797ae95ea92541840f68ee1a5ad3a64f09fb",
        "user": {
            "login": "pcottle",
            "id": 1135007,
            "node_id": "MDQ6VXNlcjExMzUwMDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1135007?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pcottle",
            "html_url": "https://github.com/pcottle",
            "followers_url": "https://api.github.com/users/pcottle/followers",
            "following_url": "https://api.github.com/users/pcottle/following{/other_user}",
            "gists_url": "https://api.github.com/users/pcottle/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pcottle/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pcottle/subscriptions",
            "organizations_url": "https://api.github.com/users/pcottle/orgs",
            "repos_url": "https://api.github.com/users/pcottle/repos",
            "events_url": "https://api.github.com/users/pcottle/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pcottle/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "haha\n",
        "created_at": "2015-05-19T16:17:50Z",
        "updated_at": "2015-05-19T16:17:50Z",
        "html_url": "https://github.com/facebook/PathPicker/pull/121#discussion_r30616791",
        "pull_request_url": "https://api.github.com/repos/facebook/PathPicker/pulls/121",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/30616791"
            },
            "html": {
                "href": "https://github.com/facebook/PathPicker/pull/121#discussion_r30616791"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/121"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/30616816",
        "pull_request_review_id": null,
        "id": 30616816,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwNjE2ODE2",
        "diff_hunk": "@@ -83,6 +83,15 @@\n     'input': 'gitDiffSomeExist.txt',\n     'validateFileExists': True,\n     'withAttributes': True,\n+}, {\n+    'name': 'longFileNames',\n+    'input': 'longFileNames.txt',\n+    'validateFileExists': False,\n+    'withAttributes': False,\n+    'screenConfig': {",
        "path": "src/__tests__/testScreen.py",
        "position": 9,
        "original_position": 9,
        "commit_id": "3106797ae95ea92541840f68ee1a5ad3a64f09fb",
        "original_commit_id": "3106797ae95ea92541840f68ee1a5ad3a64f09fb",
        "user": {
            "login": "pcottle",
            "id": 1135007,
            "node_id": "MDQ6VXNlcjExMzUwMDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1135007?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pcottle",
            "html_url": "https://github.com/pcottle",
            "followers_url": "https://api.github.com/users/pcottle/followers",
            "following_url": "https://api.github.com/users/pcottle/following{/other_user}",
            "gists_url": "https://api.github.com/users/pcottle/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pcottle/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pcottle/subscriptions",
            "organizations_url": "https://api.github.com/users/pcottle/orgs",
            "repos_url": "https://api.github.com/users/pcottle/repos",
            "events_url": "https://api.github.com/users/pcottle/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pcottle/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "glad you found the screen config useful\n",
        "created_at": "2015-05-19T16:17:59Z",
        "updated_at": "2015-05-19T16:17:59Z",
        "html_url": "https://github.com/facebook/PathPicker/pull/121#discussion_r30616816",
        "pull_request_url": "https://api.github.com/repos/facebook/PathPicker/pulls/121",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/30616816"
            },
            "html": {
                "href": "https://github.com/facebook/PathPicker/pull/121#discussion_r30616816"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/121"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/30616877",
        "pull_request_review_id": null,
        "id": 30616877,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwNjE2ODc3",
        "diff_hunk": "@@ -173,7 +182,7 @@ def assertEqualLines(self, testName, actualLines, expectedLines):\n             self.assertEqual(\n                 expectedLine,\n                 actualLine,\n-                'Lines did not match for test %s:\\n\\nExpected:%s\\nActual:%s' % (\n+                'Lines did not match for test %s:\\n\\nExpected:%s\\nActual  :%s' % (",
        "path": "src/__tests__/testScreen.py",
        "position": 21,
        "original_position": 21,
        "commit_id": "3106797ae95ea92541840f68ee1a5ad3a64f09fb",
        "original_commit_id": "623cc2f89c5a2870f1350d168b351516da8aa6b2",
        "user": {
            "login": "pcottle",
            "id": 1135007,
            "node_id": "MDQ6VXNlcjExMzUwMDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1135007?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pcottle",
            "html_url": "https://github.com/pcottle",
            "followers_url": "https://api.github.com/users/pcottle/followers",
            "following_url": "https://api.github.com/users/pcottle/following{/other_user}",
            "gists_url": "https://api.github.com/users/pcottle/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pcottle/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pcottle/subscriptions",
            "organizations_url": "https://api.github.com/users/pcottle/orgs",
            "repos_url": "https://api.github.com/users/pcottle/repos",
            "events_url": "https://api.github.com/users/pcottle/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pcottle/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "ah great idea -- hadnt thought about the character differences between the two labels. maybe we should use tabs...\n",
        "created_at": "2015-05-19T16:18:43Z",
        "updated_at": "2015-05-19T16:18:43Z",
        "html_url": "https://github.com/facebook/PathPicker/pull/121#discussion_r30616877",
        "pull_request_url": "https://api.github.com/repos/facebook/PathPicker/pulls/121",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/30616877"
            },
            "html": {
                "href": "https://github.com/facebook/PathPicker/pull/121#discussion_r30616877"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/121"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/30632377",
        "pull_request_review_id": null,
        "id": 30632377,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwNjMyMzc3",
        "diff_hunk": "@@ -45,13 +45,16 @@ class LineMatch(object):\n     ARROW_DECORATOR = '|===>'\n \n     def __init__(self, formattedLine, result, index, validateFileExists=False):\n+        self.controller = None\n+\n         self.formattedLine = formattedLine\n         self.index = index\n \n         (file, num, matches) = result\n \n         self.originalFile = file\n-        self.file = parse.prependDir(file, withFileInspection=validateFileExists)\n+        self.file = parse.prependDir(file,\n+                                     withFileInspection=validateFileExists)",
        "path": "src/format.py",
        "position": 14,
        "original_position": 14,
        "commit_id": "65533b74980cb829837be9647bc47a11a9281d3c",
        "original_commit_id": "65533b74980cb829837be9647bc47a11a9281d3c",
        "user": {
            "login": "lastquestion",
            "id": 1095956,
            "node_id": "MDQ6VXNlcjEwOTU5NTY=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1095956?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/lastquestion",
            "html_url": "https://github.com/lastquestion",
            "followers_url": "https://api.github.com/users/lastquestion/followers",
            "following_url": "https://api.github.com/users/lastquestion/following{/other_user}",
            "gists_url": "https://api.github.com/users/lastquestion/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/lastquestion/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/lastquestion/subscriptions",
            "organizations_url": "https://api.github.com/users/lastquestion/orgs",
            "repos_url": "https://api.github.com/users/lastquestion/repos",
            "events_url": "https://api.github.com/users/lastquestion/events{/privacy}",
            "received_events_url": "https://api.github.com/users/lastquestion/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "My version of pep8 complained and broke the line with `/`, which I didn't like so I used a new line instead. What version do you have installed? \n",
        "created_at": "2015-05-19T18:44:49Z",
        "updated_at": "2015-05-19T18:44:49Z",
        "html_url": "https://github.com/facebook/PathPicker/pull/119#discussion_r30632377",
        "pull_request_url": "https://api.github.com/repos/facebook/PathPicker/pulls/119",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/30632377"
            },
            "html": {
                "href": "https://github.com/facebook/PathPicker/pull/119#discussion_r30632377"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/119"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/30632403",
        "pull_request_review_id": null,
        "id": 30632403,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwNjMyNDAz",
        "diff_hunk": "@@ -213,19 +213,20 @@ def __init__(self, flags, stdscr, lineObjs, cursesAPI):\n         (self.oldmaxy, self.oldmaxx) = self.getScreenDimensions()\n         self.mode = SELECT_MODE\n \n-        self.simpleLines = []",
        "path": "src/screenControl.py",
        "position": 4,
        "original_position": 4,
        "commit_id": "65533b74980cb829837be9647bc47a11a9281d3c",
        "original_commit_id": "65533b74980cb829837be9647bc47a11a9281d3c",
        "user": {
            "login": "lastquestion",
            "id": 1095956,
            "node_id": "MDQ6VXNlcjEwOTU5NTY=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1095956?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/lastquestion",
            "html_url": "https://github.com/lastquestion",
            "followers_url": "https://api.github.com/users/lastquestion/followers",
            "following_url": "https://api.github.com/users/lastquestion/following{/other_user}",
            "gists_url": "https://api.github.com/users/lastquestion/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/lastquestion/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/lastquestion/subscriptions",
            "organizations_url": "https://api.github.com/users/lastquestion/orgs",
            "repos_url": "https://api.github.com/users/lastquestion/repos",
            "events_url": "https://api.github.com/users/lastquestion/events{/privacy}",
            "received_events_url": "https://api.github.com/users/lastquestion/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "haha nah. I was surprised and double-grepped to be sure\n",
        "created_at": "2015-05-19T18:45:03Z",
        "updated_at": "2015-05-19T18:45:03Z",
        "html_url": "https://github.com/facebook/PathPicker/pull/119#discussion_r30632403",
        "pull_request_url": "https://api.github.com/repos/facebook/PathPicker/pulls/119",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/30632403"
            },
            "html": {
                "href": "https://github.com/facebook/PathPicker/pull/119#discussion_r30632403"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/119"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/30632430",
        "pull_request_review_id": null,
        "id": 30632430,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwNjMyNDMw",
        "diff_hunk": "@@ -490,27 +486,34 @@ def onEnter(self):\n \n     def resetDirty(self):\n         # reset all dirty state for our components\n-        self.linesDirty = False\n+        self.dirty = False\n         self.dirtyIndexes = []\n \n-    def dirtyHoverIndex(self):\n-        self.dirtyIndexes.append(self.hoverIndex)\n+    def dirtyLine(self, index):\n+        self.dirtyIndexes.append(index)\n \n-    def dirtyLines(self):\n-        self.linesDirty = True\n+    def dirtyAll(self):\n+        self.dirty = True\n \n     def processDirty(self):\n-        if self.linesDirty:\n+        if self.dirty:\n             self.printAll()\n-        for index in self.dirtyIndexes:\n-            self.lineMatches[index].output(self.colorPrinter)\n-        if self.helperChrome.getIsSidebarMode():\n-            # need to output since lines can override\n-            # the sidebar stuff\n-            self.printChrome()\n+        else:",
        "path": "src/screenControl.py",
        "position": 127,
        "original_position": 127,
        "commit_id": "65533b74980cb829837be9647bc47a11a9281d3c",
        "original_commit_id": "65533b74980cb829837be9647bc47a11a9281d3c",
        "user": {
            "login": "lastquestion",
            "id": 1095956,
            "node_id": "MDQ6VXNlcjEwOTU5NTY=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1095956?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/lastquestion",
            "html_url": "https://github.com/lastquestion",
            "followers_url": "https://api.github.com/users/lastquestion/followers",
            "following_url": "https://api.github.com/users/lastquestion/following{/other_user}",
            "gists_url": "https://api.github.com/users/lastquestion/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/lastquestion/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/lastquestion/subscriptions",
            "organizations_url": "https://api.github.com/users/lastquestion/orgs",
            "repos_url": "https://api.github.com/users/lastquestion/repos",
            "events_url": "https://api.github.com/users/lastquestion/events{/privacy}",
            "received_events_url": "https://api.github.com/users/lastquestion/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Yah. I'll change it around next PR\n",
        "created_at": "2015-05-19T18:45:20Z",
        "updated_at": "2015-05-19T18:45:20Z",
        "html_url": "https://github.com/facebook/PathPicker/pull/119#discussion_r30632430",
        "pull_request_url": "https://api.github.com/repos/facebook/PathPicker/pulls/119",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/30632430"
            },
            "html": {
                "href": "https://github.com/facebook/PathPicker/pull/119#discussion_r30632430"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/119"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/30632506",
        "pull_request_review_id": null,
        "id": 30632506,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwNjMyNTA2",
        "diff_hunk": "@@ -1,6 +1,6 @@\n- README.md                      |  8 ++++-     \n+ README.md                      |  8 ++++-\n  fpp                            |  6 ++--\n- src/__tests__/__init__.py      |  0     ",
        "path": "src/__tests__/expected/selectDownSelectInverse.txt",
        "position": 4,
        "original_position": 4,
        "commit_id": "65533b74980cb829837be9647bc47a11a9281d3c",
        "original_commit_id": "65533b74980cb829837be9647bc47a11a9281d3c",
        "user": {
            "login": "lastquestion",
            "id": 1095956,
            "node_id": "MDQ6VXNlcjEwOTU5NTY=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1095956?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/lastquestion",
            "html_url": "https://github.com/lastquestion",
            "followers_url": "https://api.github.com/users/lastquestion/followers",
            "following_url": "https://api.github.com/users/lastquestion/following{/other_user}",
            "gists_url": "https://api.github.com/users/lastquestion/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/lastquestion/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/lastquestion/subscriptions",
            "organizations_url": "https://api.github.com/users/lastquestion/orgs",
            "repos_url": "https://api.github.com/users/lastquestion/repos",
            "events_url": "https://api.github.com/users/lastquestion/events{/privacy}",
            "received_events_url": "https://api.github.com/users/lastquestion/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "The best. :tada: \n",
        "created_at": "2015-05-19T18:46:05Z",
        "updated_at": "2015-05-19T18:46:05Z",
        "html_url": "https://github.com/facebook/PathPicker/pull/119#discussion_r30632506",
        "pull_request_url": "https://api.github.com/repos/facebook/PathPicker/pulls/119",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/30632506"
            },
            "html": {
                "href": "https://github.com/facebook/PathPicker/pull/119#discussion_r30632506"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/119"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/30660977",
        "pull_request_review_id": null,
        "id": 30660977,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwNjYwOTc3",
        "diff_hunk": "@@ -108,7 +101,16 @@ def getRowsForPastScreen(self, pastScreen):\n         return self.getRows(screen=self.pastScreens[pastScreen])\n \n     def getRowsWithAttributesForPastScreen(self, pastScreen):\n-        return self.getRowsWithAttributes(screen=self.pastScreens[pastScreen])\n+        if pastScreen is None:\n+            pastScreen = [self.getNumPastScreens()]\n+        elif not isinstance(pastScreen, list):\n+            pastScreen = [pastScreen]\n+\n+        pages = map(lambda screenIndex: self.getRowsWithAttributes(",
        "path": "src/__tests__/screenForTest.py",
        "position": 44,
        "original_position": 44,
        "commit_id": "151b381be366beaa641fb9f469fdcac5a30b59db",
        "original_commit_id": "151b381be366beaa641fb9f469fdcac5a30b59db",
        "user": {
            "login": "pcottle",
            "id": 1135007,
            "node_id": "MDQ6VXNlcjExMzUwMDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1135007?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pcottle",
            "html_url": "https://github.com/pcottle",
            "followers_url": "https://api.github.com/users/pcottle/followers",
            "following_url": "https://api.github.com/users/pcottle/following{/other_user}",
            "gists_url": "https://api.github.com/users/pcottle/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pcottle/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pcottle/subscriptions",
            "organizations_url": "https://api.github.com/users/pcottle/orgs",
            "repos_url": "https://api.github.com/users/pcottle/repos",
            "events_url": "https://api.github.com/users/pcottle/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pcottle/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "woof, whats with all this introduced complexity? why is pastScreen now a list? :*(\n",
        "created_at": "2015-05-20T00:04:48Z",
        "updated_at": "2015-05-20T00:04:48Z",
        "html_url": "https://github.com/facebook/PathPicker/pull/122#discussion_r30660977",
        "pull_request_url": "https://api.github.com/repos/facebook/PathPicker/pulls/122",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/30660977"
            },
            "html": {
                "href": "https://github.com/facebook/PathPicker/pull/122#discussion_r30660977"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/122"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/30661052",
        "pull_request_review_id": null,
        "id": 30661052,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwNjYxMDUy",
        "diff_hunk": "@@ -92,6 +92,17 @@\n         'maxX': 20,\n         'maxY': 30,\n     }\n+}, {\n+    'name': 'dontWipeChrome',\n+    'input': 'gitDiffColor.txt',\n+    'withAttributes': True,\n+    'validatesFileExists': False,\n+    'inputs': ['DOWN', 'f', 'f', 'f', 'UP'],\n+    'screenConfig': {\n+        'maxX': 201,\n+        'maxY': 40\n+    },\n+    'pastScreen': [0, 1, 2, 3, 4]",
        "path": "src/__tests__/testScreen.py",
        "position": 23,
        "original_position": 23,
        "commit_id": "151b381be366beaa641fb9f469fdcac5a30b59db",
        "original_commit_id": "151b381be366beaa641fb9f469fdcac5a30b59db",
        "user": {
            "login": "pcottle",
            "id": 1135007,
            "node_id": "MDQ6VXNlcjExMzUwMDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1135007?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pcottle",
            "html_url": "https://github.com/pcottle",
            "followers_url": "https://api.github.com/users/pcottle/followers",
            "following_url": "https://api.github.com/users/pcottle/following{/other_user}",
            "gists_url": "https://api.github.com/users/pcottle/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pcottle/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pcottle/subscriptions",
            "organizations_url": "https://api.github.com/users/pcottle/orgs",
            "repos_url": "https://api.github.com/users/pcottle/repos",
            "events_url": "https://api.github.com/users/pcottle/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pcottle/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "oh I see. I'd rather have this be something like `pastScreens` rather than overloading the type of `pastScreen` and allowing lists as well as single screens.\n\nthat way the test checker can just become a loop of what we had earlier\n",
        "created_at": "2015-05-20T00:06:11Z",
        "updated_at": "2015-05-20T00:06:11Z",
        "html_url": "https://github.com/facebook/PathPicker/pull/122#discussion_r30661052",
        "pull_request_url": "https://api.github.com/repos/facebook/PathPicker/pulls/122",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/30661052"
            },
            "html": {
                "href": "https://github.com/facebook/PathPicker/pull/122#discussion_r30661052"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/122"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/30661135",
        "pull_request_review_id": null,
        "id": 30661135,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwNjYxMTM1",
        "diff_hunk": "@@ -196,4 +207,16 @@ def maybeMakeExpectedDir():\n             os.makedirs(EXPECTED_DIR)\n \n if __name__ == '__main__':\n+    # monkey patch clearLine to clear the input region, not print spaces\n+    # this matches the intent of the function and makes sure we don't\n+    # generate empty spaces in the output for comparing against the expected\n+    # input\n+\n+    def clearLine(self, y):\n+        (minx, miny, maxx, maxy) = self.getChromeBoundaries()\n+        for x in range(minx, maxx):\n+            self.stdscr.output[(x, y)] = ('', 1)\n+\n+    screenTestRunner.choose.screenControl.Controller.clearLine = clearLine",
        "path": "src/__tests__/testScreen.py",
        "position": 41,
        "original_position": 41,
        "commit_id": "151b381be366beaa641fb9f469fdcac5a30b59db",
        "original_commit_id": "151b381be366beaa641fb9f469fdcac5a30b59db",
        "user": {
            "login": "pcottle",
            "id": 1135007,
            "node_id": "MDQ6VXNlcjExMzUwMDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1135007?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pcottle",
            "html_url": "https://github.com/pcottle",
            "followers_url": "https://api.github.com/users/pcottle/followers",
            "following_url": "https://api.github.com/users/pcottle/following{/other_user}",
            "gists_url": "https://api.github.com/users/pcottle/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pcottle/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pcottle/subscriptions",
            "organizations_url": "https://api.github.com/users/pcottle/orgs",
            "repos_url": "https://api.github.com/users/pcottle/repos",
            "events_url": "https://api.github.com/users/pcottle/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pcottle/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": ":see_no_evil: this seems a bit hacky too. I know maybe its valid python but usually some kind of more obvious and more explicit dependency injection is better than overwriting the functionality of the module to be tested\n",
        "created_at": "2015-05-20T00:07:56Z",
        "updated_at": "2015-05-20T00:07:56Z",
        "html_url": "https://github.com/facebook/PathPicker/pull/122#discussion_r30661135",
        "pull_request_url": "https://api.github.com/repos/facebook/PathPicker/pulls/122",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/30661135"
            },
            "html": {
                "href": "https://github.com/facebook/PathPicker/pull/122#discussion_r30661135"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/122"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/30662282",
        "pull_request_review_id": null,
        "id": 30662282,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwNjYyMjgy",
        "diff_hunk": "@@ -196,4 +207,16 @@ def maybeMakeExpectedDir():\n             os.makedirs(EXPECTED_DIR)\n \n if __name__ == '__main__':\n+    # monkey patch clearLine to clear the input region, not print spaces\n+    # this matches the intent of the function and makes sure we don't\n+    # generate empty spaces in the output for comparing against the expected\n+    # input\n+\n+    def clearLine(self, y):\n+        (minx, miny, maxx, maxy) = self.getChromeBoundaries()\n+        for x in range(minx, maxx):\n+            self.stdscr.output[(x, y)] = ('', 1)\n+\n+    screenTestRunner.choose.screenControl.Controller.clearLine = clearLine",
        "path": "src/__tests__/testScreen.py",
        "position": 41,
        "original_position": 41,
        "commit_id": "151b381be366beaa641fb9f469fdcac5a30b59db",
        "original_commit_id": "151b381be366beaa641fb9f469fdcac5a30b59db",
        "user": {
            "login": "lastquestion",
            "id": 1095956,
            "node_id": "MDQ6VXNlcjEwOTU5NTY=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1095956?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/lastquestion",
            "html_url": "https://github.com/lastquestion",
            "followers_url": "https://api.github.com/users/lastquestion/followers",
            "following_url": "https://api.github.com/users/lastquestion/following{/other_user}",
            "gists_url": "https://api.github.com/users/lastquestion/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/lastquestion/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/lastquestion/subscriptions",
            "organizations_url": "https://api.github.com/users/lastquestion/orgs",
            "repos_url": "https://api.github.com/users/lastquestion/repos",
            "events_url": "https://api.github.com/users/lastquestion/events{/privacy}",
            "received_events_url": "https://api.github.com/users/lastquestion/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I'm sort of OK with this specific instance of monkey patching, because I'd rather monkey patch `ncurses` itself. But you can't because it's a compiled module, so I had to replace the function in `screenController`.  If you'd like we can move this function into `cursesAPI`, and provide a wrapper around the existing `cursesAPI` when running against real `ncurses`. \n\nActually this would all be better if the controller was separate from the view code here, but that's another refactor for another day. \n",
        "created_at": "2015-05-20T00:30:33Z",
        "updated_at": "2015-05-20T00:30:33Z",
        "html_url": "https://github.com/facebook/PathPicker/pull/122#discussion_r30662282",
        "pull_request_url": "https://api.github.com/repos/facebook/PathPicker/pulls/122",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/30662282"
            },
            "html": {
                "href": "https://github.com/facebook/PathPicker/pull/122#discussion_r30662282"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/122"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/30662320",
        "pull_request_review_id": null,
        "id": 30662320,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwNjYyMzIw",
        "diff_hunk": "@@ -92,6 +92,17 @@\n         'maxX': 20,\n         'maxY': 30,\n     }\n+}, {\n+    'name': 'dontWipeChrome',\n+    'input': 'gitDiffColor.txt',\n+    'withAttributes': True,\n+    'validatesFileExists': False,\n+    'inputs': ['DOWN', 'f', 'f', 'f', 'UP'],\n+    'screenConfig': {\n+        'maxX': 201,\n+        'maxY': 40\n+    },\n+    'pastScreen': [0, 1, 2, 3, 4]",
        "path": "src/__tests__/testScreen.py",
        "position": 23,
        "original_position": 23,
        "commit_id": "151b381be366beaa641fb9f469fdcac5a30b59db",
        "original_commit_id": "151b381be366beaa641fb9f469fdcac5a30b59db",
        "user": {
            "login": "lastquestion",
            "id": 1095956,
            "node_id": "MDQ6VXNlcjEwOTU5NTY=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1095956?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/lastquestion",
            "html_url": "https://github.com/lastquestion",
            "followers_url": "https://api.github.com/users/lastquestion/followers",
            "following_url": "https://api.github.com/users/lastquestion/following{/other_user}",
            "gists_url": "https://api.github.com/users/lastquestion/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/lastquestion/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/lastquestion/subscriptions",
            "organizations_url": "https://api.github.com/users/lastquestion/orgs",
            "repos_url": "https://api.github.com/users/lastquestion/repos",
            "events_url": "https://api.github.com/users/lastquestion/events{/privacy}",
            "received_events_url": "https://api.github.com/users/lastquestion/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Hm, I'm fine with that.\n",
        "created_at": "2015-05-20T00:31:09Z",
        "updated_at": "2015-05-20T00:31:09Z",
        "html_url": "https://github.com/facebook/PathPicker/pull/122#discussion_r30662320",
        "pull_request_url": "https://api.github.com/repos/facebook/PathPicker/pulls/122",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/30662320"
            },
            "html": {
                "href": "https://github.com/facebook/PathPicker/pull/122#discussion_r30662320"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/122"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/30865570",
        "pull_request_review_id": null,
        "id": 30865570,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwODY1NTcw",
        "diff_hunk": "@@ -513,15 +513,26 @@ def processDirty(self):\n             self.helperChrome.output(self.mode)\n \n     def clearLine(self, y):\n-        '''Clear a line of content, excluding the chrome'''\n-        (minx, _, maxx, _) = self.getChromeBoundaries()\n-        charsToDelete = range(minx, maxx)\n-        # we go in the **reverse** order since the original documentation\n-        # of delchar (http://dell9.ma.utexas.edu/cgi-bin/man-cgi?delch+3)\n-        # mentions that delchar actually moves all the characters to the right\n-        # of the cursor\n-        for x in reversed(charsToDelete):\n-            self.stdscr.delch(y, x)\n+        '''Clear a line of content, including chrome to the right, but not\n+        to the left of the content window'''\n+        # Q. Why do we have to delete the entire line?\n+        # A. Because delchar deletes the character and moves the characters\n+        # left on the line (to the right of the x spot) leftwards.",
        "path": "src/screenControl.py",
        "position": 17,
        "original_position": 17,
        "commit_id": "a85d5043952b462a7d6f999d744790fb53b6f527",
        "original_commit_id": "a85d5043952b462a7d6f999d744790fb53b6f527",
        "user": {
            "login": "pcottle",
            "id": 1135007,
            "node_id": "MDQ6VXNlcjExMzUwMDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1135007?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pcottle",
            "html_url": "https://github.com/pcottle",
            "followers_url": "https://api.github.com/users/pcottle/followers",
            "following_url": "https://api.github.com/users/pcottle/following{/other_user}",
            "gists_url": "https://api.github.com/users/pcottle/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pcottle/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pcottle/subscriptions",
            "organizations_url": "https://api.github.com/users/pcottle/orgs",
            "repos_url": "https://api.github.com/users/pcottle/repos",
            "events_url": "https://api.github.com/users/pcottle/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pcottle/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "`to the right of the cursor` might be better\n",
        "created_at": "2015-05-22T02:22:51Z",
        "updated_at": "2015-05-22T02:22:51Z",
        "html_url": "https://github.com/facebook/PathPicker/pull/127#discussion_r30865570",
        "pull_request_url": "https://api.github.com/repos/facebook/PathPicker/pulls/127",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/30865570"
            },
            "html": {
                "href": "https://github.com/facebook/PathPicker/pull/127#discussion_r30865570"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/127"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/30865839",
        "pull_request_review_id": null,
        "id": 30865839,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwODY1ODM5",
        "diff_hunk": "@@ -36,7 +36,7 @@\n     'name': 'selectTwoCommandMode',\n     'input': 'absoluteGitDiff.txt',\n     'inputs': ['f', 'j', 'f', 'c'],\n-    'pastScreen': 1\n+    'pastScreen': 3",
        "path": "src/__tests__/testScreen.py",
        "position": 5,
        "original_position": 5,
        "commit_id": "eea1f79422332403e6bfa6ea7ed6a1e11bbef7e3",
        "original_commit_id": "eea1f79422332403e6bfa6ea7ed6a1e11bbef7e3",
        "user": {
            "login": "pcottle",
            "id": 1135007,
            "node_id": "MDQ6VXNlcjExMzUwMDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1135007?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pcottle",
            "html_url": "https://github.com/pcottle",
            "followers_url": "https://api.github.com/users/pcottle/followers",
            "following_url": "https://api.github.com/users/pcottle/following{/other_user}",
            "gists_url": "https://api.github.com/users/pcottle/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pcottle/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pcottle/subscriptions",
            "organizations_url": "https://api.github.com/users/pcottle/orgs",
            "repos_url": "https://api.github.com/users/pcottle/repos",
            "events_url": "https://api.github.com/users/pcottle/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pcottle/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "is this change needed because of the change between `erase` and `refresh`?\n",
        "created_at": "2015-05-22T02:31:17Z",
        "updated_at": "2015-05-22T02:31:17Z",
        "html_url": "https://github.com/facebook/PathPicker/pull/126#discussion_r30865839",
        "pull_request_url": "https://api.github.com/repos/facebook/PathPicker/pulls/126",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/30865839"
            },
            "html": {
                "href": "https://github.com/facebook/PathPicker/pull/126#discussion_r30865839"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/126"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/30865851",
        "pull_request_review_id": null,
        "id": 30865851,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwODY1ODUx",
        "diff_hunk": "@@ -92,6 +92,17 @@\n         'maxX': 20,\n         'maxY': 30,\n     }\n+}, {\n+    'name': 'dontWipeChrome',\n+    'input': 'gitDiffColor.txt',\n+    'withAttributes': True,\n+    'validatesFileExists': False,\n+    'inputs': ['DOWN', 'f', 'f', 'f', 'UP'],\n+    'screenConfig': {\n+        'maxX': 201,\n+        'maxY': 40\n+    },\n+    'pastScreens': [0, 1, 2, 3, 4]",
        "path": "src/__tests__/testScreen.py",
        "position": 23,
        "original_position": 23,
        "commit_id": "eea1f79422332403e6bfa6ea7ed6a1e11bbef7e3",
        "original_commit_id": "eea1f79422332403e6bfa6ea7ed6a1e11bbef7e3",
        "user": {
            "login": "pcottle",
            "id": 1135007,
            "node_id": "MDQ6VXNlcjExMzUwMDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1135007?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pcottle",
            "html_url": "https://github.com/pcottle",
            "followers_url": "https://api.github.com/users/pcottle/followers",
            "following_url": "https://api.github.com/users/pcottle/following{/other_user}",
            "gists_url": "https://api.github.com/users/pcottle/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pcottle/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pcottle/subscriptions",
            "organizations_url": "https://api.github.com/users/pcottle/orgs",
            "repos_url": "https://api.github.com/users/pcottle/repos",
            "events_url": "https://api.github.com/users/pcottle/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pcottle/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": ":heart_eyes: \n",
        "created_at": "2015-05-22T02:31:28Z",
        "updated_at": "2015-05-22T02:31:28Z",
        "html_url": "https://github.com/facebook/PathPicker/pull/126#discussion_r30865851",
        "pull_request_url": "https://api.github.com/repos/facebook/PathPicker/pulls/126",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/30865851"
            },
            "html": {
                "href": "https://github.com/facebook/PathPicker/pull/126#discussion_r30865851"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/126"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/30866480",
        "pull_request_review_id": null,
        "id": 30866480,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwODY2NDgw",
        "diff_hunk": "@@ -36,7 +36,7 @@\n     'name': 'selectTwoCommandMode',\n     'input': 'absoluteGitDiff.txt',\n     'inputs': ['f', 'j', 'f', 'c'],\n-    'pastScreen': 1\n+    'pastScreen': 3",
        "path": "src/__tests__/testScreen.py",
        "position": 5,
        "original_position": 5,
        "commit_id": "eea1f79422332403e6bfa6ea7ed6a1e11bbef7e3",
        "original_commit_id": "eea1f79422332403e6bfa6ea7ed6a1e11bbef7e3",
        "user": {
            "login": "lastquestion",
            "id": 1095956,
            "node_id": "MDQ6VXNlcjEwOTU5NTY=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1095956?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/lastquestion",
            "html_url": "https://github.com/lastquestion",
            "followers_url": "https://api.github.com/users/lastquestion/followers",
            "following_url": "https://api.github.com/users/lastquestion/following{/other_user}",
            "gists_url": "https://api.github.com/users/lastquestion/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/lastquestion/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/lastquestion/subscriptions",
            "organizations_url": "https://api.github.com/users/lastquestion/orgs",
            "repos_url": "https://api.github.com/users/lastquestion/repos",
            "events_url": "https://api.github.com/users/lastquestion/events{/privacy}",
            "received_events_url": "https://api.github.com/users/lastquestion/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Yeah -  because we now take the screenshot when you \"refresh\". Before we only did it on erase and we don't always call erase on the entire screen only when we clear the entire screen. When we dirty a line (say from up down or j f) we just call refresh.\n",
        "created_at": "2015-05-22T02:52:56Z",
        "updated_at": "2015-05-22T02:52:56Z",
        "html_url": "https://github.com/facebook/PathPicker/pull/126#discussion_r30866480",
        "pull_request_url": "https://api.github.com/repos/facebook/PathPicker/pulls/126",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/30866480"
            },
            "html": {
                "href": "https://github.com/facebook/PathPicker/pull/126#discussion_r30866480"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/126"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/30867831",
        "pull_request_review_id": null,
        "id": 30867831,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwODY3ODMx",
        "diff_hunk": "@@ -36,7 +36,7 @@\n     'name': 'selectTwoCommandMode',\n     'input': 'absoluteGitDiff.txt',\n     'inputs': ['f', 'j', 'f', 'c'],\n-    'pastScreen': 1\n+    'pastScreen': 3",
        "path": "src/__tests__/testScreen.py",
        "position": 5,
        "original_position": 5,
        "commit_id": "eea1f79422332403e6bfa6ea7ed6a1e11bbef7e3",
        "original_commit_id": "eea1f79422332403e6bfa6ea7ed6a1e11bbef7e3",
        "user": {
            "login": "pcottle",
            "id": 1135007,
            "node_id": "MDQ6VXNlcjExMzUwMDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1135007?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pcottle",
            "html_url": "https://github.com/pcottle",
            "followers_url": "https://api.github.com/users/pcottle/followers",
            "following_url": "https://api.github.com/users/pcottle/following{/other_user}",
            "gists_url": "https://api.github.com/users/pcottle/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pcottle/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pcottle/subscriptions",
            "organizations_url": "https://api.github.com/users/pcottle/orgs",
            "repos_url": "https://api.github.com/users/pcottle/repos",
            "events_url": "https://api.github.com/users/pcottle/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pcottle/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Ah cool! good to know, yeah we can capture more intermediate states this way :+1: \n",
        "created_at": "2015-05-22T03:44:47Z",
        "updated_at": "2015-05-22T03:44:47Z",
        "html_url": "https://github.com/facebook/PathPicker/pull/126#discussion_r30867831",
        "pull_request_url": "https://api.github.com/repos/facebook/PathPicker/pulls/126",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/30867831"
            },
            "html": {
                "href": "https://github.com/facebook/PathPicker/pull/126#discussion_r30867831"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/126"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/30945772",
        "pull_request_review_id": null,
        "id": 30945772,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwOTQ1Nzcy",
        "diff_hunk": "@@ -375,6 +380,8 @@ def processInput(self, key):\n             # before exiting the program\n             self.getFilesToUse()\n             sys.exit(0)\n+        elif self.mode == X_MODE and key in lbls:",
        "path": "src/screenControl.py",
        "position": 58,
        "original_position": 58,
        "commit_id": "09a29c7449b46a01a2c63f5264a1cef74220a18a",
        "original_commit_id": "09a29c7449b46a01a2c63f5264a1cef74220a18a",
        "user": {
            "login": "heyitsxavier",
            "id": 6413422,
            "node_id": "MDQ6VXNlcjY0MTM0MjI=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/6413422?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/heyitsxavier",
            "html_url": "https://github.com/heyitsxavier",
            "followers_url": "https://api.github.com/users/heyitsxavier/followers",
            "following_url": "https://api.github.com/users/heyitsxavier/following{/other_user}",
            "gists_url": "https://api.github.com/users/heyitsxavier/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/heyitsxavier/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/heyitsxavier/subscriptions",
            "organizations_url": "https://api.github.com/users/heyitsxavier/orgs",
            "repos_url": "https://api.github.com/users/heyitsxavier/repos",
            "events_url": "https://api.github.com/users/heyitsxavier/events{/privacy}",
            "received_events_url": "https://api.github.com/users/heyitsxavier/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I think that would be worse.  When X_MODE is on we want to exclude G and A from the keybindings set because they conflict with line letters.  But as of yet we only have an if else block, not a set to subtract from.  There's no case to handle separately.\n",
        "created_at": "2015-05-23T15:37:31Z",
        "updated_at": "2015-05-23T15:37:31Z",
        "html_url": "https://github.com/facebook/PathPicker/pull/40#discussion_r30945772",
        "pull_request_url": "https://api.github.com/repos/facebook/PathPicker/pulls/40",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/30945772"
            },
            "html": {
                "href": "https://github.com/facebook/PathPicker/pull/40#discussion_r30945772"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/40"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/30945803",
        "pull_request_review_id": null,
        "id": 30945803,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwOTQ1ODAz",
        "diff_hunk": "@@ -115,7 +118,7 @@ def outputBottom(self):\n         (maxy, maxx) = self.screenControl.getScreenDimensions()\n         borderY = maxy - 2\n         # first output text since we might throw an exception during border\n-        usageStr = SHORT_NAV_USAGE if self.mode == SELECT_MODE else SHORT_COMMAND_USAGE\n+        usageStr = SHORT_NAV_USAGE if self.mode == SELECT_MODE or X_MODE else SHORT_COMMAND_USAGE",
        "path": "src/screenControl.py",
        "position": 18,
        "original_position": 18,
        "commit_id": "09a29c7449b46a01a2c63f5264a1cef74220a18a",
        "original_commit_id": "09a29c7449b46a01a2c63f5264a1cef74220a18a",
        "user": {
            "login": "heyitsxavier",
            "id": 6413422,
            "node_id": "MDQ6VXNlcjY0MTM0MjI=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/6413422?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/heyitsxavier",
            "html_url": "https://github.com/heyitsxavier",
            "followers_url": "https://api.github.com/users/heyitsxavier/followers",
            "following_url": "https://api.github.com/users/heyitsxavier/following{/other_user}",
            "gists_url": "https://api.github.com/users/heyitsxavier/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/heyitsxavier/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/heyitsxavier/subscriptions",
            "organizations_url": "https://api.github.com/users/heyitsxavier/orgs",
            "repos_url": "https://api.github.com/users/heyitsxavier/repos",
            "events_url": "https://api.github.com/users/heyitsxavier/events{/privacy}",
            "received_events_url": "https://api.github.com/users/heyitsxavier/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "No switch statements in python, so I used the old dictionary select trick.  I agree it makes it cleaner.\n",
        "created_at": "2015-05-23T15:43:40Z",
        "updated_at": "2015-05-23T15:43:40Z",
        "html_url": "https://github.com/facebook/PathPicker/pull/40#discussion_r30945803",
        "pull_request_url": "https://api.github.com/repos/facebook/PathPicker/pulls/40",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/30945803"
            },
            "html": {
                "href": "https://github.com/facebook/PathPicker/pull/40#discussion_r30945803"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/40"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/30945832",
        "pull_request_review_id": null,
        "id": 30945832,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwOTQ1ODMy",
        "diff_hunk": "@@ -244,7 +247,7 @@ def getScreenDimensions(self):\n \n     def getChromeBoundaries(self):\n         (maxy, maxx) = self.stdscr.getmaxyx()\n-        minx = CHROME_MIN_X if self.scrollBar.getIsActivated() else 0\n+        minx = CHROME_MIN_X if self.scrollBar.getIsActivated() or self.mode == X_MODE else 0",
        "path": "src/screenControl.py",
        "position": 27,
        "original_position": 27,
        "commit_id": "09a29c7449b46a01a2c63f5264a1cef74220a18a",
        "original_commit_id": "09a29c7449b46a01a2c63f5264a1cef74220a18a",
        "user": {
            "login": "heyitsxavier",
            "id": 6413422,
            "node_id": "MDQ6VXNlcjY0MTM0MjI=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/6413422?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/heyitsxavier",
            "html_url": "https://github.com/heyitsxavier",
            "followers_url": "https://api.github.com/users/heyitsxavier/followers",
            "following_url": "https://api.github.com/users/heyitsxavier/following{/other_user}",
            "gists_url": "https://api.github.com/users/heyitsxavier/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/heyitsxavier/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/heyitsxavier/subscriptions",
            "organizations_url": "https://api.github.com/users/heyitsxavier/orgs",
            "repos_url": "https://api.github.com/users/heyitsxavier/repos",
            "events_url": "https://api.github.com/users/heyitsxavier/events{/privacy}",
            "received_events_url": "https://api.github.com/users/heyitsxavier/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "That would be mixing purposes.  Just because X_MODE is on doesn't mean the scroll bar is too.  I just want to indent in both cases.\n",
        "created_at": "2015-05-23T15:47:29Z",
        "updated_at": "2015-05-23T15:47:29Z",
        "html_url": "https://github.com/facebook/PathPicker/pull/40#discussion_r30945832",
        "pull_request_url": "https://api.github.com/repos/facebook/PathPicker/pulls/40",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/30945832"
            },
            "html": {
                "href": "https://github.com/facebook/PathPicker/pull/40#discussion_r30945832"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/40"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/30945838",
        "pull_request_review_id": null,
        "id": 30945838,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwOTQ1ODM4",
        "diff_hunk": "@@ -473,8 +480,8 @@ def resetDirty(self):\n         self.linesDirty = False\n         self.dirtyIndexes = []\n \n-    def dirtyHoverIndex(self):\n-        self.dirtyIndexes.append(self.hoverIndex)\n+    def dirtyHoverIndex(self, idx=-1):\n+        self.dirtyIndexes.append(idx if idx > 0 else self.hoverIndex)",
        "path": "src/screenControl.py",
        "position": 70,
        "original_position": 70,
        "commit_id": "09a29c7449b46a01a2c63f5264a1cef74220a18a",
        "original_commit_id": "09a29c7449b46a01a2c63f5264a1cef74220a18a",
        "user": {
            "login": "heyitsxavier",
            "id": 6413422,
            "node_id": "MDQ6VXNlcjY0MTM0MjI=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/6413422?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/heyitsxavier",
            "html_url": "https://github.com/heyitsxavier",
            "followers_url": "https://api.github.com/users/heyitsxavier/followers",
            "following_url": "https://api.github.com/users/heyitsxavier/following{/other_user}",
            "gists_url": "https://api.github.com/users/heyitsxavier/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/heyitsxavier/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/heyitsxavier/subscriptions",
            "organizations_url": "https://api.github.com/users/heyitsxavier/orgs",
            "repos_url": "https://api.github.com/users/heyitsxavier/repos",
            "events_url": "https://api.github.com/users/heyitsxavier/events{/privacy}",
            "received_events_url": "https://api.github.com/users/heyitsxavier/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "This got updated to dirtyLine.\n",
        "created_at": "2015-05-23T15:48:38Z",
        "updated_at": "2015-05-23T15:48:38Z",
        "html_url": "https://github.com/facebook/PathPicker/pull/40#discussion_r30945838",
        "pull_request_url": "https://api.github.com/repos/facebook/PathPicker/pulls/40",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/30945838"
            },
            "html": {
                "href": "https://github.com/facebook/PathPicker/pull/40#discussion_r30945838"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/40"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/30945870",
        "pull_request_review_id": null,
        "id": 30945870,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwOTQ1ODcw",
        "diff_hunk": "@@ -514,3 +522,25 @@ def moveCursor(self):\n     def getKey(self):\n         charCode = self.stdscr.getch()\n         return mapping.get(charCode, '')\n+\n+    def toggleXMode(self):\n+        if self.mode != X_MODE:\n+            self.mode = X_MODE\n+        else:\n+            self.mode = SELECT_MODE\n+        self.printAll()\n+\n+    def printXMode(self):\n+        if self.mode == X_MODE:\n+            (maxy, _) = self.scrollBar.screenControl.getScreenDimensions()\n+            topY = maxy - 2\n+            minY = self.scrollBar.getMinY() - (1 if not self.scrollBar.activated else 0)\n+            for i in range(minY, topY + 1):\n+                self.stdscr.addstr(i, 1, lbls[i - minY])\n+\n+    def selectXMode(self, key):\n+        lineObj = self.lineObjs[lbls.index(key) + int(self.scrollBar.activated) - self.scrollOffset]\n+        if hasattr(lineObj, \"toggleSelect\"):",
        "path": "src/screenControl.py",
        "position": 104,
        "original_position": 104,
        "commit_id": "09a29c7449b46a01a2c63f5264a1cef74220a18a",
        "original_commit_id": "09a29c7449b46a01a2c63f5264a1cef74220a18a",
        "user": {
            "login": "heyitsxavier",
            "id": 6413422,
            "node_id": "MDQ6VXNlcjY0MTM0MjI=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/6413422?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/heyitsxavier",
            "html_url": "https://github.com/heyitsxavier",
            "followers_url": "https://api.github.com/users/heyitsxavier/followers",
            "following_url": "https://api.github.com/users/heyitsxavier/following{/other_user}",
            "gists_url": "https://api.github.com/users/heyitsxavier/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/heyitsxavier/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/heyitsxavier/subscriptions",
            "organizations_url": "https://api.github.com/users/heyitsxavier/orgs",
            "repos_url": "https://api.github.com/users/heyitsxavier/repos",
            "events_url": "https://api.github.com/users/heyitsxavier/events{/privacy}",
            "received_events_url": "https://api.github.com/users/heyitsxavier/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Agreed\n",
        "created_at": "2015-05-23T15:53:26Z",
        "updated_at": "2015-05-23T15:53:26Z",
        "html_url": "https://github.com/facebook/PathPicker/pull/40#discussion_r30945870",
        "pull_request_url": "https://api.github.com/repos/facebook/PathPicker/pulls/40",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/30945870"
            },
            "html": {
                "href": "https://github.com/facebook/PathPicker/pull/40#discussion_r30945870"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/40"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/31057882",
        "pull_request_review_id": null,
        "id": 31057882,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxMDU3ODgy",
        "diff_hunk": "@@ -25,6 +25,9 @@ PYTHONCMD=\"python\"\n function doProgram {\n   # process input from pipe and store as pickled file\n   $PYTHONCMD \"$BASEDIR/src/processInput.py\" \"$@\"\n+  # if it failed, just fail now and exit the script\n+  # this works for the looping -ko case as well\n+  if [[ $? != 0 ]]; then exit $?; fi",
        "path": "fpp",
        "position": 6,
        "original_position": 6,
        "commit_id": "a142d8891035ad1ad6236fdc8eaf94d445902722",
        "original_commit_id": "a142d8891035ad1ad6236fdc8eaf94d445902722",
        "user": {
            "login": "pcottle",
            "id": 1135007,
            "node_id": "MDQ6VXNlcjExMzUwMDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1135007?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pcottle",
            "html_url": "https://github.com/pcottle",
            "followers_url": "https://api.github.com/users/pcottle/followers",
            "following_url": "https://api.github.com/users/pcottle/following{/other_user}",
            "gists_url": "https://api.github.com/users/pcottle/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pcottle/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pcottle/subscriptions",
            "organizations_url": "https://api.github.com/users/pcottle/orgs",
            "repos_url": "https://api.github.com/users/pcottle/repos",
            "events_url": "https://api.github.com/users/pcottle/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pcottle/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "ah nice -- i never figured out how to exit with the same status code as the previous command!\n\nI bet we could probably remove the code that clears out the bash script as well after this change...\n",
        "created_at": "2015-05-26T17:26:26Z",
        "updated_at": "2015-05-26T17:26:26Z",
        "html_url": "https://github.com/facebook/PathPicker/pull/139#discussion_r31057882",
        "pull_request_url": "https://api.github.com/repos/facebook/PathPicker/pulls/139",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/31057882"
            },
            "html": {
                "href": "https://github.com/facebook/PathPicker/pull/139#discussion_r31057882"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/139"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/31057958",
        "pull_request_review_id": null,
        "id": 31057958,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxMDU3OTU4",
        "diff_hunk": "@@ -25,6 +25,9 @@ PYTHONCMD=\"python\"\n function doProgram {\n   # process input from pipe and store as pickled file\n   $PYTHONCMD \"$BASEDIR/src/processInput.py\" \"$@\"\n+  # if it failed, just fail now and exit the script\n+  # this works for the looping -ko case as well\n+  if [[ $? != 0 ]]; then exit $?; fi\n   # now close stdin and choose input...\n   exec 0<&-\n ",
        "path": "fpp",
        "position": 9,
        "original_position": 9,
        "commit_id": "a142d8891035ad1ad6236fdc8eaf94d445902722",
        "original_commit_id": "a142d8891035ad1ad6236fdc8eaf94d445902722",
        "user": {
            "login": "pcottle",
            "id": 1135007,
            "node_id": "MDQ6VXNlcjExMzUwMDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1135007?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pcottle",
            "html_url": "https://github.com/pcottle",
            "followers_url": "https://api.github.com/users/pcottle/followers",
            "following_url": "https://api.github.com/users/pcottle/following{/other_user}",
            "gists_url": "https://api.github.com/users/pcottle/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pcottle/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pcottle/subscriptions",
            "organizations_url": "https://api.github.com/users/pcottle/orgs",
            "repos_url": "https://api.github.com/users/pcottle/repos",
            "events_url": "https://api.github.com/users/pcottle/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pcottle/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "github comments are lame and wont let me write below, but should we also have the same for `$BASEDIR/src/choose.py`? its less likely to fail but it might be handy for things like when the user quits and doesnt want to run the shell script. let me file a followup for that\n",
        "created_at": "2015-05-26T17:27:05Z",
        "updated_at": "2015-05-26T17:27:05Z",
        "html_url": "https://github.com/facebook/PathPicker/pull/139#discussion_r31057958",
        "pull_request_url": "https://api.github.com/repos/facebook/PathPicker/pulls/139",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/31057958"
            },
            "html": {
                "href": "https://github.com/facebook/PathPicker/pull/139#discussion_r31057958"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/139"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/31058165",
        "pull_request_review_id": null,
        "id": 31058165,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxMDU4MTY1",
        "diff_hunk": "@@ -81,7 +81,8 @@ def printText(self, y, x, printer, maxLen):\n             if index % 2 == 1:\n                 # text\n                 toPrint = val[0:maxLen - printedSoFar]\n-                printer.screen.addstr(y, x + printedSoFar, toPrint)\n+                printer.addstr(y, x + printedSoFar, toPrint,\n+                               ColorPrinter.CURRENT_COLORS)",
        "path": "src/formattedText.py",
        "position": 15,
        "original_position": 15,
        "commit_id": "a142d8891035ad1ad6236fdc8eaf94d445902722",
        "original_commit_id": "a142d8891035ad1ad6236fdc8eaf94d445902722",
        "user": {
            "login": "pcottle",
            "id": 1135007,
            "node_id": "MDQ6VXNlcjExMzUwMDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1135007?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pcottle",
            "html_url": "https://github.com/pcottle",
            "followers_url": "https://api.github.com/users/pcottle/followers",
            "following_url": "https://api.github.com/users/pcottle/following{/other_user}",
            "gists_url": "https://api.github.com/users/pcottle/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pcottle/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pcottle/subscriptions",
            "organizations_url": "https://api.github.com/users/pcottle/orgs",
            "repos_url": "https://api.github.com/users/pcottle/repos",
            "events_url": "https://api.github.com/users/pcottle/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pcottle/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "ahh nice. what do you think about a sugar method like `printer.addCurrentColorStr`?\n",
        "created_at": "2015-05-26T17:29:21Z",
        "updated_at": "2015-05-26T17:29:21Z",
        "html_url": "https://github.com/facebook/PathPicker/pull/139#discussion_r31058165",
        "pull_request_url": "https://api.github.com/repos/facebook/PathPicker/pulls/139",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/31058165"
            },
            "html": {
                "href": "https://github.com/facebook/PathPicker/pull/139#discussion_r31058165"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/139"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/31058282",
        "pull_request_review_id": null,
        "id": 31058282,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxMDU4Mjgy",
        "diff_hunk": "@@ -69,7 +68,6 @@ def usage():\n             if os.path.isfile(filePath):\n                 os.remove(filePath)\n         print('Done! Removed %d files ' % len(stateFiles.getAllStateFiles()))\n-        sys.exit(0)",
        "path": "src/processInput.py",
        "position": 14,
        "original_position": 14,
        "commit_id": "a142d8891035ad1ad6236fdc8eaf94d445902722",
        "original_commit_id": "a142d8891035ad1ad6236fdc8eaf94d445902722",
        "user": {
            "login": "pcottle",
            "id": 1135007,
            "node_id": "MDQ6VXNlcjExMzUwMDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1135007?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pcottle",
            "html_url": "https://github.com/pcottle",
            "followers_url": "https://api.github.com/users/pcottle/followers",
            "following_url": "https://api.github.com/users/pcottle/following{/other_user}",
            "gists_url": "https://api.github.com/users/pcottle/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pcottle/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pcottle/subscriptions",
            "organizations_url": "https://api.github.com/users/pcottle/orgs",
            "repos_url": "https://api.github.com/users/pcottle/repos",
            "events_url": "https://api.github.com/users/pcottle/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pcottle/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "why is this gone? i think clean mode was specifically supposed to run separately and then exit early -- its not supposed to continue\n",
        "created_at": "2015-05-26T17:30:33Z",
        "updated_at": "2015-05-26T17:30:33Z",
        "html_url": "https://github.com/facebook/PathPicker/pull/139#discussion_r31058282",
        "pull_request_url": "https://api.github.com/repos/facebook/PathPicker/pulls/139",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/31058282"
            },
            "html": {
                "href": "https://github.com/facebook/PathPicker/pull/139#discussion_r31058282"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/139"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/31058361",
        "pull_request_review_id": null,
        "id": 31058361,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxMDU4MzYx",
        "diff_hunk": "@@ -81,7 +81,8 @@ def printText(self, y, x, printer, maxLen):\n             if index % 2 == 1:\n                 # text\n                 toPrint = val[0:maxLen - printedSoFar]\n-                printer.screen.addstr(y, x + printedSoFar, toPrint)\n+                printer.addstr(y, x + printedSoFar, toPrint,\n+                               ColorPrinter.CURRENT_COLORS)",
        "path": "src/formattedText.py",
        "position": 15,
        "original_position": 15,
        "commit_id": "a142d8891035ad1ad6236fdc8eaf94d445902722",
        "original_commit_id": "a142d8891035ad1ad6236fdc8eaf94d445902722",
        "user": {
            "login": "lastquestion",
            "id": 1095956,
            "node_id": "MDQ6VXNlcjEwOTU5NTY=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1095956?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/lastquestion",
            "html_url": "https://github.com/lastquestion",
            "followers_url": "https://api.github.com/users/lastquestion/followers",
            "following_url": "https://api.github.com/users/lastquestion/following{/other_user}",
            "gists_url": "https://api.github.com/users/lastquestion/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/lastquestion/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/lastquestion/subscriptions",
            "organizations_url": "https://api.github.com/users/lastquestion/orgs",
            "repos_url": "https://api.github.com/users/lastquestion/repos",
            "events_url": "https://api.github.com/users/lastquestion/events{/privacy}",
            "received_events_url": "https://api.github.com/users/lastquestion/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I like it, let's do it\n",
        "created_at": "2015-05-26T17:31:27Z",
        "updated_at": "2015-05-26T17:31:27Z",
        "html_url": "https://github.com/facebook/PathPicker/pull/139#discussion_r31058361",
        "pull_request_url": "https://api.github.com/repos/facebook/PathPicker/pulls/139",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/31058361"
            },
            "html": {
                "href": "https://github.com/facebook/PathPicker/pull/139#discussion_r31058361"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/139"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/31058404",
        "pull_request_review_id": null,
        "id": 31058404,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxMDU4NDA0",
        "diff_hunk": "@@ -25,6 +25,9 @@ PYTHONCMD=\"python\"\n function doProgram {\n   # process input from pipe and store as pickled file\n   $PYTHONCMD \"$BASEDIR/src/processInput.py\" \"$@\"\n+  # if it failed, just fail now and exit the script\n+  # this works for the looping -ko case as well\n+  if [[ $? != 0 ]]; then exit $?; fi\n   # now close stdin and choose input...\n   exec 0<&-\n ",
        "path": "fpp",
        "position": 9,
        "original_position": 9,
        "commit_id": "a142d8891035ad1ad6236fdc8eaf94d445902722",
        "original_commit_id": "a142d8891035ad1ad6236fdc8eaf94d445902722",
        "user": {
            "login": "lastquestion",
            "id": 1095956,
            "node_id": "MDQ6VXNlcjEwOTU5NTY=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1095956?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/lastquestion",
            "html_url": "https://github.com/lastquestion",
            "followers_url": "https://api.github.com/users/lastquestion/followers",
            "following_url": "https://api.github.com/users/lastquestion/following{/other_user}",
            "gists_url": "https://api.github.com/users/lastquestion/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/lastquestion/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/lastquestion/subscriptions",
            "organizations_url": "https://api.github.com/users/lastquestion/orgs",
            "repos_url": "https://api.github.com/users/lastquestion/repos",
            "events_url": "https://api.github.com/users/lastquestion/events{/privacy}",
            "received_events_url": "https://api.github.com/users/lastquestion/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Yeah, that's a great idea. And haha I didn't know either, stackoverflow knows all.\n",
        "created_at": "2015-05-26T17:31:57Z",
        "updated_at": "2015-05-26T17:31:57Z",
        "html_url": "https://github.com/facebook/PathPicker/pull/139#discussion_r31058404",
        "pull_request_url": "https://api.github.com/repos/facebook/PathPicker/pulls/139",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/31058404"
            },
            "html": {
                "href": "https://github.com/facebook/PathPicker/pull/139#discussion_r31058404"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/139"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/31059683",
        "pull_request_review_id": null,
        "id": 31059683,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxMDU5Njgz",
        "diff_hunk": "@@ -69,7 +68,6 @@ def usage():\n             if os.path.isfile(filePath):\n                 os.remove(filePath)\n         print('Done! Removed %d files ' % len(stateFiles.getAllStateFiles()))\n-        sys.exit(0)",
        "path": "src/processInput.py",
        "position": 14,
        "original_position": 14,
        "commit_id": "a142d8891035ad1ad6236fdc8eaf94d445902722",
        "original_commit_id": "a142d8891035ad1ad6236fdc8eaf94d445902722",
        "user": {
            "login": "lastquestion",
            "id": 1095956,
            "node_id": "MDQ6VXNlcjEwOTU5NTY=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1095956?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/lastquestion",
            "html_url": "https://github.com/lastquestion",
            "followers_url": "https://api.github.com/users/lastquestion/followers",
            "following_url": "https://api.github.com/users/lastquestion/following{/other_user}",
            "gists_url": "https://api.github.com/users/lastquestion/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/lastquestion/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/lastquestion/subscriptions",
            "organizations_url": "https://api.github.com/users/lastquestion/orgs",
            "repos_url": "https://api.github.com/users/lastquestion/repos",
            "events_url": "https://api.github.com/users/lastquestion/events{/privacy}",
            "received_events_url": "https://api.github.com/users/lastquestion/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "It's because I suck and I forgot to test it. My bad. thanks for catching it\n",
        "created_at": "2015-05-26T17:45:38Z",
        "updated_at": "2015-05-26T17:45:38Z",
        "html_url": "https://github.com/facebook/PathPicker/pull/139#discussion_r31059683",
        "pull_request_url": "https://api.github.com/repos/facebook/PathPicker/pulls/139",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/31059683"
            },
            "html": {
                "href": "https://github.com/facebook/PathPicker/pull/139#discussion_r31059683"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/139"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/31060531",
        "pull_request_review_id": null,
        "id": 31060531,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxMDYwNTMx",
        "diff_hunk": "@@ -25,6 +25,9 @@ PYTHONCMD=\"python\"\n function doProgram {\n   # process input from pipe and store as pickled file\n   $PYTHONCMD \"$BASEDIR/src/processInput.py\" \"$@\"\n+  # if it failed, just fail now and exit the script\n+  # this works for the looping -ko case as well\n+  if [[ $? != 0 ]]; then exit $?; fi",
        "path": "fpp",
        "position": 6,
        "original_position": 6,
        "commit_id": "a142d8891035ad1ad6236fdc8eaf94d445902722",
        "original_commit_id": "a142d8891035ad1ad6236fdc8eaf94d445902722",
        "user": {
            "login": "pcottle",
            "id": 1135007,
            "node_id": "MDQ6VXNlcjExMzUwMDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1135007?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pcottle",
            "html_url": "https://github.com/pcottle",
            "followers_url": "https://api.github.com/users/pcottle/followers",
            "following_url": "https://api.github.com/users/pcottle/following{/other_user}",
            "gists_url": "https://api.github.com/users/pcottle/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pcottle/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pcottle/subscriptions",
            "organizations_url": "https://api.github.com/users/pcottle/orgs",
            "repos_url": "https://api.github.com/users/pcottle/repos",
            "events_url": "https://api.github.com/users/pcottle/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pcottle/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Followup from #131 -- @lastquestion do you know why this works for `processInput.py` but not `choose.py`? I'm assuming its because we connect to `dev/tty` or from closing stdin or something\n",
        "created_at": "2015-05-26T17:53:42Z",
        "updated_at": "2015-05-26T17:53:42Z",
        "html_url": "https://github.com/facebook/PathPicker/pull/139#discussion_r31060531",
        "pull_request_url": "https://api.github.com/repos/facebook/PathPicker/pulls/139",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/31060531"
            },
            "html": {
                "href": "https://github.com/facebook/PathPicker/pull/139#discussion_r31060531"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/139"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/31061410",
        "pull_request_review_id": null,
        "id": 31061410,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxMDYxNDEw",
        "diff_hunk": "@@ -25,6 +25,9 @@ PYTHONCMD=\"python\"\n function doProgram {\n   # process input from pipe and store as pickled file\n   $PYTHONCMD \"$BASEDIR/src/processInput.py\" \"$@\"\n+  # if it failed, just fail now and exit the script\n+  # this works for the looping -ko case as well\n+  if [[ $? != 0 ]]; then exit $?; fi",
        "path": "fpp",
        "position": 6,
        "original_position": 6,
        "commit_id": "a142d8891035ad1ad6236fdc8eaf94d445902722",
        "original_commit_id": "a142d8891035ad1ad6236fdc8eaf94d445902722",
        "user": {
            "login": "lastquestion",
            "id": 1095956,
            "node_id": "MDQ6VXNlcjEwOTU5NTY=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1095956?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/lastquestion",
            "html_url": "https://github.com/lastquestion",
            "followers_url": "https://api.github.com/users/lastquestion/followers",
            "following_url": "https://api.github.com/users/lastquestion/following{/other_user}",
            "gists_url": "https://api.github.com/users/lastquestion/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/lastquestion/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/lastquestion/subscriptions",
            "organizations_url": "https://api.github.com/users/lastquestion/orgs",
            "repos_url": "https://api.github.com/users/lastquestion/repos",
            "events_url": "https://api.github.com/users/lastquestion/events{/privacy}",
            "received_events_url": "https://api.github.com/users/lastquestion/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Yeah i saw your comment on the other issue. `$?` _should_ work even tho we piping in input. I secretly suspect curses wrapper is maybe catching or rethrowing or something and the exit code is being lost..?\n",
        "created_at": "2015-05-26T18:01:59Z",
        "updated_at": "2015-05-26T18:01:59Z",
        "html_url": "https://github.com/facebook/PathPicker/pull/139#discussion_r31061410",
        "pull_request_url": "https://api.github.com/repos/facebook/PathPicker/pulls/139",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/31061410"
            },
            "html": {
                "href": "https://github.com/facebook/PathPicker/pull/139#discussion_r31061410"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/139"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/31081882",
        "pull_request_review_id": null,
        "id": 31081882,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxMDgxODgy",
        "diff_hunk": "@@ -370,6 +381,8 @@ def processInput(self, key):\n             # before exiting the program\n             self.getFilesToUse()\n             self.cursesAPI.exit()\n+        elif self.mode == X_MODE and key in lbls:",
        "path": "src/screenControl.py",
        "position": 71,
        "original_position": 71,
        "commit_id": "f095482a62321830b8e5cb5cf85b9c4fb2da1305",
        "original_commit_id": "f095482a62321830b8e5cb5cf85b9c4fb2da1305",
        "user": {
            "login": "pcottle",
            "id": 1135007,
            "node_id": "MDQ6VXNlcjExMzUwMDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1135007?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pcottle",
            "html_url": "https://github.com/pcottle",
            "followers_url": "https://api.github.com/users/pcottle/followers",
            "following_url": "https://api.github.com/users/pcottle/following{/other_user}",
            "gists_url": "https://api.github.com/users/pcottle/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pcottle/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pcottle/subscriptions",
            "organizations_url": "https://api.github.com/users/pcottle/orgs",
            "repos_url": "https://api.github.com/users/pcottle/repos",
            "events_url": "https://api.github.com/users/pcottle/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pcottle/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "this might prone to breakage in the future since we might add keys above this statement that are in `lbls` and forget about `X_MODE`. i wonder if we could instead refactor some of this...\n",
        "created_at": "2015-05-26T21:29:37Z",
        "updated_at": "2015-05-26T21:29:37Z",
        "html_url": "https://github.com/facebook/PathPicker/pull/137#discussion_r31081882",
        "pull_request_url": "https://api.github.com/repos/facebook/PathPicker/pulls/137",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/31081882"
            },
            "html": {
                "href": "https://github.com/facebook/PathPicker/pull/137#discussion_r31081882"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/137"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/31081938",
        "pull_request_review_id": null,
        "id": 31081938,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxMDgxOTM4",
        "diff_hunk": "@@ -561,3 +575,23 @@ def moveCursor(self):\n     def getKey(self):\n         charCode = self.stdscr.getch()\n         return CODE_TO_CHAR.get(charCode, '')\n+\n+    def toggleXMode(self):\n+        self.mode = X_MODE if self.mode != X_MODE else SELECT_MODE\n+        self.printAll()\n+\n+    def printXMode(self):\n+        if self.mode == X_MODE:\n+            (maxy, _) = self.scrollBar.screenControl.getScreenDimensions()\n+            topY = maxy - 2\n+            minY = self.scrollBar.getMinY() - 1\n+            for i in range(minY, topY + 1):\n+                self.stdscr.addstr(i, 1, lbls[i - minY])",
        "path": "src/screenControl.py",
        "position": 99,
        "original_position": 99,
        "commit_id": "f095482a62321830b8e5cb5cf85b9c4fb2da1305",
        "original_commit_id": "f095482a62321830b8e5cb5cf85b9c4fb2da1305",
        "user": {
            "login": "pcottle",
            "id": 1135007,
            "node_id": "MDQ6VXNlcjExMzUwMDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1135007?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pcottle",
            "html_url": "https://github.com/pcottle",
            "followers_url": "https://api.github.com/users/pcottle/followers",
            "following_url": "https://api.github.com/users/pcottle/following{/other_user}",
            "gists_url": "https://api.github.com/users/pcottle/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pcottle/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pcottle/subscriptions",
            "organizations_url": "https://api.github.com/users/pcottle/orgs",
            "repos_url": "https://api.github.com/users/pcottle/repos",
            "events_url": "https://api.github.com/users/pcottle/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pcottle/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "yeah using color printer here would be nice\n",
        "created_at": "2015-05-26T21:30:15Z",
        "updated_at": "2015-05-26T21:30:15Z",
        "html_url": "https://github.com/facebook/PathPicker/pull/137#discussion_r31081938",
        "pull_request_url": "https://api.github.com/repos/facebook/PathPicker/pulls/137",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/31081938"
            },
            "html": {
                "href": "https://github.com/facebook/PathPicker/pull/137#discussion_r31081938"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/137"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/31082042",
        "pull_request_review_id": null,
        "id": 31082042,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxMDgyMDQy",
        "diff_hunk": "@@ -87,6 +87,72 @@ def printText(self, y, x, printer, maxLen):\n                 # formatting\n                 printer.setAttributes(*self.parseFormatting(val))\n \n+    def truncateAndPrintText(self, y, x, printer, maxLen, truncation):\n+        \"\"\"Print out the string. If it's too long, truncate at len/2\n+        so that it fits. If we cannot even print the truncation string,\n+        print as much as we can from the end.\"\"\"\n+        excessTextLength = len(self.plainText) - maxLen\n+\n+        if excessTextLength > 0:\n+            amountToSkip = excessTextLength + len(truncation)\n+\n+            if amountToSkip >= len(self.plainText):\n+                # crap, we can't even print the truncation.\n+                # print what we can from the very end and call it a day\n+                skipStartingAt = -1\n+                skipEndingAt = excessTextLength\n+            else:\n+                # snip from the middle\n+                # be careful of integer rounding\n+                skipStartingAt = int((len(self.plainText) - amountToSkip) / 2)\n+                skipEndingAt = skipStartingAt + amountToSkip\n+        else:\n+            # no truncation\n+            self.printText(y, x, printer, maxLen)\n+            return\n+\n+        printedSoFar = 0\n+        xIndex = x\n+\n+        for index, val in enumerate(self.segments):\n+            if index % 2 == 1:",
        "path": "src/formattedText.py",
        "position": 32,
        "original_position": 32,
        "commit_id": "b32456fa62e2cabba1fa808fc6e4f23bcdfed108",
        "original_commit_id": "b32456fa62e2cabba1fa808fc6e4f23bcdfed108",
        "user": {
            "login": "pcottle",
            "id": 1135007,
            "node_id": "MDQ6VXNlcjExMzUwMDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1135007?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pcottle",
            "html_url": "https://github.com/pcottle",
            "followers_url": "https://api.github.com/users/pcottle/followers",
            "following_url": "https://api.github.com/users/pcottle/following{/other_user}",
            "gists_url": "https://api.github.com/users/pcottle/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pcottle/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pcottle/subscriptions",
            "organizations_url": "https://api.github.com/users/pcottle/orgs",
            "repos_url": "https://api.github.com/users/pcottle/repos",
            "events_url": "https://api.github.com/users/pcottle/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pcottle/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "whats this for? why not just do the specific segments we want?\n",
        "created_at": "2015-05-26T21:31:47Z",
        "updated_at": "2015-05-26T21:31:47Z",
        "html_url": "https://github.com/facebook/PathPicker/pull/140#discussion_r31082042",
        "pull_request_url": "https://api.github.com/repos/facebook/PathPicker/pulls/140",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/31082042"
            },
            "html": {
                "href": "https://github.com/facebook/PathPicker/pull/140#discussion_r31082042"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/140"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/31082190",
        "pull_request_review_id": null,
        "id": 31082190,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxMDgyMTkw",
        "diff_hunk": "@@ -87,6 +87,72 @@ def printText(self, y, x, printer, maxLen):\n                 # formatting\n                 printer.setAttributes(*self.parseFormatting(val))\n \n+    def truncateAndPrintText(self, y, x, printer, maxLen, truncation):\n+        \"\"\"Print out the string. If it's too long, truncate at len/2\n+        so that it fits. If we cannot even print the truncation string,\n+        print as much as we can from the end.\"\"\"\n+        excessTextLength = len(self.plainText) - maxLen\n+\n+        if excessTextLength > 0:\n+            amountToSkip = excessTextLength + len(truncation)\n+\n+            if amountToSkip >= len(self.plainText):\n+                # crap, we can't even print the truncation.\n+                # print what we can from the very end and call it a day\n+                skipStartingAt = -1\n+                skipEndingAt = excessTextLength\n+            else:\n+                # snip from the middle\n+                # be careful of integer rounding\n+                skipStartingAt = int((len(self.plainText) - amountToSkip) / 2)\n+                skipEndingAt = skipStartingAt + amountToSkip\n+        else:\n+            # no truncation\n+            self.printText(y, x, printer, maxLen)\n+            return\n+\n+        printedSoFar = 0\n+        xIndex = x\n+\n+        for index, val in enumerate(self.segments):\n+            if index % 2 == 1:",
        "path": "src/formattedText.py",
        "position": 32,
        "original_position": 32,
        "commit_id": "b32456fa62e2cabba1fa808fc6e4f23bcdfed108",
        "original_commit_id": "b32456fa62e2cabba1fa808fc6e4f23bcdfed108",
        "user": {
            "login": "lastquestion",
            "id": 1095956,
            "node_id": "MDQ6VXNlcjEwOTU5NTY=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1095956?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/lastquestion",
            "html_url": "https://github.com/lastquestion",
            "followers_url": "https://api.github.com/users/lastquestion/followers",
            "following_url": "https://api.github.com/users/lastquestion/following{/other_user}",
            "gists_url": "https://api.github.com/users/lastquestion/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/lastquestion/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/lastquestion/subscriptions",
            "organizations_url": "https://api.github.com/users/lastquestion/orgs",
            "repos_url": "https://api.github.com/users/lastquestion/repos",
            "events_url": "https://api.github.com/users/lastquestion/events{/privacy}",
            "received_events_url": "https://api.github.com/users/lastquestion/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "the formatting and text are interleaved like this\n`['formatting', 'text', 'formatting', 'text']`\nso this selects either the formatting or text\n",
        "created_at": "2015-05-26T21:33:29Z",
        "updated_at": "2015-05-26T21:33:29Z",
        "html_url": "https://github.com/facebook/PathPicker/pull/140#discussion_r31082190",
        "pull_request_url": "https://api.github.com/repos/facebook/PathPicker/pulls/140",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/31082190"
            },
            "html": {
                "href": "https://github.com/facebook/PathPicker/pull/140#discussion_r31082190"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/140"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/31202940",
        "pull_request_review_id": null,
        "id": 31202940,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxMjAyOTQw",
        "diff_hunk": "@@ -87,6 +87,72 @@ def printText(self, y, x, printer, maxLen):\n                 # formatting\n                 printer.setAttributes(*self.parseFormatting(val))\n \n+    def truncateAndPrintText(self, y, x, printer, maxLen, truncation):\n+        \"\"\"Print out the string. If it's too long, truncate at len/2\n+        so that it fits. If we cannot even print the truncation string,\n+        print as much as we can from the end.\"\"\"\n+        excessTextLength = len(self.plainText) - maxLen\n+\n+        if excessTextLength > 0:\n+            amountToSkip = excessTextLength + len(truncation)\n+\n+            if amountToSkip >= len(self.plainText):\n+                # crap, we can't even print the truncation.\n+                # print what we can from the very end and call it a day\n+                skipStartingAt = -1\n+                skipEndingAt = excessTextLength\n+            else:\n+                # snip from the middle\n+                # be careful of integer rounding\n+                skipStartingAt = int((len(self.plainText) - amountToSkip) / 2)\n+                skipEndingAt = skipStartingAt + amountToSkip\n+        else:\n+            # no truncation\n+            self.printText(y, x, printer, maxLen)\n+            return\n+\n+        printedSoFar = 0\n+        xIndex = x\n+\n+        for index, val in enumerate(self.segments):\n+            if index % 2 == 1:",
        "path": "src/formattedText.py",
        "position": 32,
        "original_position": 32,
        "commit_id": "b32456fa62e2cabba1fa808fc6e4f23bcdfed108",
        "original_commit_id": "b32456fa62e2cabba1fa808fc6e4f23bcdfed108",
        "user": {
            "login": "pcottle",
            "id": 1135007,
            "node_id": "MDQ6VXNlcjExMzUwMDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1135007?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pcottle",
            "html_url": "https://github.com/pcottle",
            "followers_url": "https://api.github.com/users/pcottle/followers",
            "following_url": "https://api.github.com/users/pcottle/following{/other_user}",
            "gists_url": "https://api.github.com/users/pcottle/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pcottle/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pcottle/subscriptions",
            "organizations_url": "https://api.github.com/users/pcottle/orgs",
            "repos_url": "https://api.github.com/users/pcottle/repos",
            "events_url": "https://api.github.com/users/pcottle/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pcottle/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Ahh yeah forgot. Aight I'll take a closer look at this later -- its a lot of introduced code (that i dont fully grok yet) just to fix the off by one error :P\n\nhow does it handle the screen resizes better? Im actually wondering if its more or less performant, since the version earlier kind of cached whatever mode it was in\n",
        "created_at": "2015-05-28T04:45:00Z",
        "updated_at": "2015-05-28T04:45:00Z",
        "html_url": "https://github.com/facebook/PathPicker/pull/140#discussion_r31202940",
        "pull_request_url": "https://api.github.com/repos/facebook/PathPicker/pulls/140",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/31202940"
            },
            "html": {
                "href": "https://github.com/facebook/PathPicker/pull/140#discussion_r31202940"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/140"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/31740140",
        "pull_request_review_id": null,
        "id": 31740140,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxNzQwMTQw",
        "diff_hunk": "@@ -0,0 +1,10 @@\n+$(window).resize(function() {\n+  console.log('resize called');\n+  if ($(window).width() < 768) {\n+    $(\"nav\").addClass(\"navbar-fixed-top\");\n+  } else {\n+    $(\"nav\").removeClass(\"navbar-fixed-top\");\n+  }\n+});\n+\n+resize();",
        "path": "assets/script.js",
        "position": 10,
        "original_position": 10,
        "commit_id": "a7f29dac371df171a9b8728074408162695d6922",
        "original_commit_id": "a7f29dac371df171a9b8728074408162695d6922",
        "user": {
            "login": "pcottle",
            "id": 1135007,
            "node_id": "MDQ6VXNlcjExMzUwMDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1135007?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pcottle",
            "html_url": "https://github.com/pcottle",
            "followers_url": "https://api.github.com/users/pcottle/followers",
            "following_url": "https://api.github.com/users/pcottle/following{/other_user}",
            "gists_url": "https://api.github.com/users/pcottle/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pcottle/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pcottle/subscriptions",
            "organizations_url": "https://api.github.com/users/pcottle/orgs",
            "repos_url": "https://api.github.com/users/pcottle/repos",
            "events_url": "https://api.github.com/users/pcottle/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pcottle/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "ill probably just inline this JS rather than have a whole separate file (which is another web request)\n",
        "created_at": "2015-06-04T16:51:43Z",
        "updated_at": "2015-06-04T16:51:43Z",
        "html_url": "https://github.com/facebook/PathPicker/pull/151#discussion_r31740140",
        "pull_request_url": "https://api.github.com/repos/facebook/PathPicker/pulls/151",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/31740140"
            },
            "html": {
                "href": "https://github.com/facebook/PathPicker/pull/151#discussion_r31740140"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/151"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/41342219",
        "pull_request_review_id": null,
        "id": 41342219,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQyMjE5",
        "diff_hunk": "@@ -37,8 +37,18 @@ function doProgram {\n   if [ -z \"$VIMRUNTIME\" ]; then\n     IFLAG=\"-i\"\n   fi\n-  # execute the output bash script\n-  $SHELL $IFLAG ~/.fpp/.fpp.sh < /dev/tty\n+  # execute the output bash script. For zsh or bash\n+  # shells, we delegate to $SHELL, but for all others\n+  # (fish, csh, etc) we delegate to bash.\n+  #\n+  # We use the following heuristics from\n+  # http://stackoverflow.com/questions/3327013/\n+  # in order to determine which shell we are on\n+  if [ -n \"$BASH\" -o -n \"$ZSH_NAME\" ]; then\n+    $SHELL $IFLAG ~/.fpp/.fpp.sh < /dev/tty\n+  else\n+    /bin/sh $IFLAG ~/.fpp/.fpp.sh < /dev/tty",
        "path": "fpp",
        "position": 16,
        "original_position": 16,
        "commit_id": "f416e2636816a4e6069661e00fefabf74cd35cd5",
        "original_commit_id": "f416e2636816a4e6069661e00fefabf74cd35cd5",
        "user": {
            "login": "frantic",
            "id": 192222,
            "node_id": "MDQ6VXNlcjE5MjIyMg==",
            "avatar_url": "https://avatars1.githubusercontent.com/u/192222?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/frantic",
            "html_url": "https://github.com/frantic",
            "followers_url": "https://api.github.com/users/frantic/followers",
            "following_url": "https://api.github.com/users/frantic/following{/other_user}",
            "gists_url": "https://api.github.com/users/frantic/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/frantic/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/frantic/subscriptions",
            "organizations_url": "https://api.github.com/users/frantic/orgs",
            "repos_url": "https://api.github.com/users/frantic/repos",
            "events_url": "https://api.github.com/users/frantic/events{/privacy}",
            "received_events_url": "https://api.github.com/users/frantic/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "this might not work on Linux. IIRC on Mac `/bin/sh` is bash.\n",
        "created_at": "2015-10-07T01:10:49Z",
        "updated_at": "2015-10-07T01:10:49Z",
        "html_url": "https://github.com/facebook/PathPicker/pull/197#discussion_r41342219",
        "pull_request_url": "https://api.github.com/repos/facebook/PathPicker/pulls/197",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/41342219"
            },
            "html": {
                "href": "https://github.com/facebook/PathPicker/pull/197#discussion_r41342219"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/197"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/41342386",
        "pull_request_review_id": null,
        "id": 41342386,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQyMzg2",
        "diff_hunk": "@@ -37,8 +37,18 @@ function doProgram {\n   if [ -z \"$VIMRUNTIME\" ]; then\n     IFLAG=\"-i\"\n   fi\n-  # execute the output bash script\n-  $SHELL $IFLAG ~/.fpp/.fpp.sh < /dev/tty\n+  # execute the output bash script. For zsh or bash\n+  # shells, we delegate to $SHELL, but for all others\n+  # (fish, csh, etc) we delegate to bash.\n+  #\n+  # We use the following heuristics from\n+  # http://stackoverflow.com/questions/3327013/\n+  # in order to determine which shell we are on\n+  if [ -n \"$BASH\" -o -n \"$ZSH_NAME\" ]; then\n+    $SHELL $IFLAG ~/.fpp/.fpp.sh < /dev/tty\n+  else\n+    /bin/sh $IFLAG ~/.fpp/.fpp.sh < /dev/tty",
        "path": "fpp",
        "position": 16,
        "original_position": 16,
        "commit_id": "f416e2636816a4e6069661e00fefabf74cd35cd5",
        "original_commit_id": "f416e2636816a4e6069661e00fefabf74cd35cd5",
        "user": {
            "login": "pcottle",
            "id": 1135007,
            "node_id": "MDQ6VXNlcjExMzUwMDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1135007?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pcottle",
            "html_url": "https://github.com/pcottle",
            "followers_url": "https://api.github.com/users/pcottle/followers",
            "following_url": "https://api.github.com/users/pcottle/following{/other_user}",
            "gists_url": "https://api.github.com/users/pcottle/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pcottle/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pcottle/subscriptions",
            "organizations_url": "https://api.github.com/users/pcottle/orgs",
            "repos_url": "https://api.github.com/users/pcottle/repos",
            "events_url": "https://api.github.com/users/pcottle/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pcottle/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "i looked at http://askubuntu.com/questions/141928/what-is-difference-between-bin-sh-and-bin-bash briefly, but yeah now that i look closer apparently `/bin/sh` on some distros is \"dash\" not bash. ill switch :P\n",
        "created_at": "2015-10-07T01:14:03Z",
        "updated_at": "2015-10-07T01:14:03Z",
        "html_url": "https://github.com/facebook/PathPicker/pull/197#discussion_r41342386",
        "pull_request_url": "https://api.github.com/repos/facebook/PathPicker/pulls/197",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/41342386"
            },
            "html": {
                "href": "https://github.com/facebook/PathPicker/pull/197#discussion_r41342386"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/197"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/45692185",
        "pull_request_review_id": null,
        "id": 45692185,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjkyMTg1",
        "diff_hunk": "@@ -92,6 +95,13 @@ def getArgParser():\n of, say, deleted files in git status that you would like to restore to a given\n revision. It enables you to select the deleted files even though they\n do not exist on the system anymore.''')\n+        parser.add_argument('-ai',\n+                            '--all-input',\n+                            default=False,\n+                            action=\"store_true\",\n+                            help='''You may force PathPicker to recognize all\n+lines as acceptible input. Typically, PathPicker will scan the input for references\n+to file paths. Passing this option will disable those scans and the program will assume that every input line is a match.''')",
        "path": "src/screenFlags.py",
        "position": 22,
        "original_position": 22,
        "commit_id": "5413e5640c675de84747deb41ff4f4936dd6c9c5",
        "original_commit_id": "5413e5640c675de84747deb41ff4f4936dd6c9c5",
        "user": {
            "login": "pcottle",
            "id": 1135007,
            "node_id": "MDQ6VXNlcjExMzUwMDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1135007?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pcottle",
            "html_url": "https://github.com/pcottle",
            "followers_url": "https://api.github.com/users/pcottle/followers",
            "following_url": "https://api.github.com/users/pcottle/following{/other_user}",
            "gists_url": "https://api.github.com/users/pcottle/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pcottle/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pcottle/subscriptions",
            "organizations_url": "https://api.github.com/users/pcottle/orgs",
            "repos_url": "https://api.github.com/users/pcottle/repos",
            "events_url": "https://api.github.com/users/pcottle/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pcottle/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "could add an explanation that its helpful for things like git branches, mercurial bookmarks, maybe even directories -- who knows!\n",
        "created_at": "2015-11-24T02:54:29Z",
        "updated_at": "2015-11-24T02:54:29Z",
        "html_url": "https://github.com/facebook/PathPicker/pull/210#discussion_r45692185",
        "pull_request_url": "https://api.github.com/repos/facebook/PathPicker/pulls/210",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/45692185"
            },
            "html": {
                "href": "https://github.com/facebook/PathPicker/pull/210#discussion_r45692185"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/210"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/45693803",
        "pull_request_review_id": null,
        "id": 45693803,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjkzODAz",
        "diff_hunk": "@@ -339,6 +339,32 @@\n         'out': ''\n     }]\n \n+allInputTestCases = [\n+    {\n+        'input': '    ',\n+        'match': None\n+    }, {\n+        'input': ' ',\n+        'match': None\n+    }, {\n+        'input': 'a',\n+        'match': 'a'\n+    }, {\n+        'input': '   a',\n+        'match': 'a'\n+    }, {\n+        'input': 'a    ',\n+        'match': 'a'\n+    }, {\n+        'input': '    foo bar',\n+        'match': 'foo bar'\n+    }, {\n+        'input': 'foo bar    ',\n+        'match': 'foo bar'\n+    }, {\n+        'input': 'foo bar baz',\n+        'match': 'foo bar baz'",
        "path": "src/__tests__/testParsing.py",
        "position": 28,
        "original_position": 28,
        "commit_id": "5413e5640c675de84747deb41ff4f4936dd6c9c5",
        "original_commit_id": "5413e5640c675de84747deb41ff4f4936dd6c9c5",
        "user": {
            "login": "pcottle",
            "id": 1135007,
            "node_id": "MDQ6VXNlcjExMzUwMDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1135007?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pcottle",
            "html_url": "https://github.com/pcottle",
            "followers_url": "https://api.github.com/users/pcottle/followers",
            "following_url": "https://api.github.com/users/pcottle/following{/other_user}",
            "gists_url": "https://api.github.com/users/pcottle/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pcottle/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pcottle/subscriptions",
            "organizations_url": "https://api.github.com/users/pcottle/orgs",
            "repos_url": "https://api.github.com/users/pcottle/repos",
            "events_url": "https://api.github.com/users/pcottle/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pcottle/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "i know this would pass, but maybe add a test case with whitespace on both sides, just for completeness\n\n```\ninput: '   foo bar  ',\nmatch: 'foo bar',\n```\n",
        "created_at": "2015-11-24T03:31:23Z",
        "updated_at": "2015-11-24T03:31:23Z",
        "html_url": "https://github.com/facebook/PathPicker/pull/210#discussion_r45693803",
        "pull_request_url": "https://api.github.com/repos/facebook/PathPicker/pulls/210",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/45693803"
            },
            "html": {
                "href": "https://github.com/facebook/PathPicker/pull/210#discussion_r45693803"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/210"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/45693827",
        "pull_request_review_id": null,
        "id": 45693827,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjkzODI3",
        "diff_hunk": "@@ -398,6 +424,23 @@ def testFileMatch(self):\n             self.checkFileResult(testCase)\n         print('Tested %d cases.' % len(fileTestCases))\n \n+    def testAllInputMatches(self):\n+        for testCase in allInputTestCases:\n+            result = parse.matchLine(testCase['input'], False, True)\n+\n+            if not result:\n+                self.assertTrue(testCase['match'] is None,\n+                                'Expected a match \"%s\" where one did not occur.' %\n+                                testCase['match'])\n+",
        "path": "src/__tests__/testParsing.py",
        "position": 45,
        "original_position": 45,
        "commit_id": "5413e5640c675de84747deb41ff4f4936dd6c9c5",
        "original_commit_id": "5413e5640c675de84747deb41ff4f4936dd6c9c5",
        "user": {
            "login": "pcottle",
            "id": 1135007,
            "node_id": "MDQ6VXNlcjExMzUwMDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1135007?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pcottle",
            "html_url": "https://github.com/pcottle",
            "followers_url": "https://api.github.com/users/pcottle/followers",
            "following_url": "https://api.github.com/users/pcottle/following{/other_user}",
            "gists_url": "https://api.github.com/users/pcottle/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pcottle/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pcottle/subscriptions",
            "organizations_url": "https://api.github.com/users/pcottle/orgs",
            "repos_url": "https://api.github.com/users/pcottle/repos",
            "events_url": "https://api.github.com/users/pcottle/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pcottle/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "nit: rm this line for readability, since its hard to tell what block continue is for\n",
        "created_at": "2015-11-24T03:31:59Z",
        "updated_at": "2015-11-24T03:31:59Z",
        "html_url": "https://github.com/facebook/PathPicker/pull/210#discussion_r45693827",
        "pull_request_url": "https://api.github.com/repos/facebook/PathPicker/pulls/210",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/45693827"
            },
            "html": {
                "href": "https://github.com/facebook/PathPicker/pull/210#discussion_r45693827"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/210"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/45693945",
        "pull_request_review_id": null,
        "id": 45693945,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjkzOTQ1",
        "diff_hunk": "@@ -115,14 +122,27 @@ def outputBottom(self):\n         borderY = maxy - 2\n         # first output text since we might throw an exception during border\n         usageStr = {\n-            SELECT_MODE: SHORT_NAV_USAGE,\n-            X_MODE: SHORT_NAV_USAGE,\n+            SELECT_MODE: self.getShortNavUsageString(),\n+            X_MODE: self.getShortNavUsageString(),\n             COMMAND_MODE: SHORT_COMMAND_USAGE\n         }[self.mode]\n         borderStr = '_' * (maxx - self.getMinX() - 0)\n         self.printer.addstr(borderY, self.getMinX(), borderStr)\n         self.printer.addstr(borderY + 1, self.getMinX(), usageStr)\n \n+    def getShortNavUsageString(self):\n+        navOptions = [SHORT_NAV_OPTION_SELECTION_STR,\n+                      SHORT_NAV_OPTION_NAVIGATION_STR,\n+                      SHORT_NAV_OPTION_QUICK_SELECT_STR,\n+                      SHORT_NAV_OPTION_COMMAND_STR]\n+\n+        # it does not make sense to give the user the option to \"open\" the selection\n+        # in all-input mode",
        "path": "src/screenControl.py",
        "position": 54,
        "original_position": 54,
        "commit_id": "5413e5640c675de84747deb41ff4f4936dd6c9c5",
        "original_commit_id": "5413e5640c675de84747deb41ff4f4936dd6c9c5",
        "user": {
            "login": "pcottle",
            "id": 1135007,
            "node_id": "MDQ6VXNlcjExMzUwMDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1135007?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pcottle",
            "html_url": "https://github.com/pcottle",
            "followers_url": "https://api.github.com/users/pcottle/followers",
            "following_url": "https://api.github.com/users/pcottle/following{/other_user}",
            "gists_url": "https://api.github.com/users/pcottle/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pcottle/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pcottle/subscriptions",
            "organizations_url": "https://api.github.com/users/pcottle/orgs",
            "repos_url": "https://api.github.com/users/pcottle/repos",
            "events_url": "https://api.github.com/users/pcottle/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pcottle/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "ahhh, i see why you factored this out into separate strings now. cool!\n",
        "created_at": "2015-11-24T03:34:48Z",
        "updated_at": "2015-11-24T03:34:48Z",
        "html_url": "https://github.com/facebook/PathPicker/pull/210#discussion_r45693945",
        "pull_request_url": "https://api.github.com/repos/facebook/PathPicker/pulls/210",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/45693945"
            },
            "html": {
                "href": "https://github.com/facebook/PathPicker/pull/210#discussion_r45693945"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/210"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/45694206",
        "pull_request_review_id": null,
        "id": 45694206,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk0MjA2",
        "diff_hunk": "@@ -115,14 +122,27 @@ def outputBottom(self):\n         borderY = maxy - 2\n         # first output text since we might throw an exception during border\n         usageStr = {\n-            SELECT_MODE: SHORT_NAV_USAGE,\n-            X_MODE: SHORT_NAV_USAGE,\n+            SELECT_MODE: self.getShortNavUsageString(),\n+            X_MODE: self.getShortNavUsageString(),\n             COMMAND_MODE: SHORT_COMMAND_USAGE\n         }[self.mode]\n         borderStr = '_' * (maxx - self.getMinX() - 0)\n         self.printer.addstr(borderY, self.getMinX(), borderStr)\n         self.printer.addstr(borderY + 1, self.getMinX(), usageStr)\n \n+    def getShortNavUsageString(self):\n+        navOptions = [SHORT_NAV_OPTION_SELECTION_STR,\n+                      SHORT_NAV_OPTION_NAVIGATION_STR,\n+                      SHORT_NAV_OPTION_QUICK_SELECT_STR,\n+                      SHORT_NAV_OPTION_COMMAND_STR]\n+\n+        # it does not make sense to give the user the option to \"open\" the selection\n+        # in all-input mode\n+        if not self.flags.getAllInput():\n+            navOptions.insert(2, SHORT_NAV_OPTION_OPEN_STR)",
        "path": "src/screenControl.py",
        "position": 56,
        "original_position": 56,
        "commit_id": "5413e5640c675de84747deb41ff4f4936dd6c9c5",
        "original_commit_id": "5413e5640c675de84747deb41ff4f4936dd6c9c5",
        "user": {
            "login": "pcottle",
            "id": 1135007,
            "node_id": "MDQ6VXNlcjExMzUwMDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1135007?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pcottle",
            "html_url": "https://github.com/pcottle",
            "followers_url": "https://api.github.com/users/pcottle/followers",
            "following_url": "https://api.github.com/users/pcottle/following{/other_user}",
            "gists_url": "https://api.github.com/users/pcottle/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pcottle/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pcottle/subscriptions",
            "organizations_url": "https://api.github.com/users/pcottle/orgs",
            "repos_url": "https://api.github.com/users/pcottle/repos",
            "events_url": "https://api.github.com/users/pcottle/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pcottle/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "the insert 2 is weird here, i think you could do something like\n\n```\nreturn ', '.join([\n  SELECT_STR,\n  NAV_STR,\n  # doesnt make sense to give open str if in all input mode\n  None if self.flags.getAllInput() else NAV_OPEN_STR,\n].filter(something()?));\n```\n\nbut thats just me trying to be more functional. dont know how hard that is in practice with the filter, havent written python in a while\n",
        "created_at": "2015-11-24T03:37:17Z",
        "updated_at": "2015-11-24T03:37:40Z",
        "html_url": "https://github.com/facebook/PathPicker/pull/210#discussion_r45694206",
        "pull_request_url": "https://api.github.com/repos/facebook/PathPicker/pulls/210",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/45694206"
            },
            "html": {
                "href": "https://github.com/facebook/PathPicker/pull/210#discussion_r45694206"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/210"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/45829650",
        "pull_request_review_id": null,
        "id": 45829650,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI5NjUw",
        "diff_hunk": "@@ -115,14 +122,27 @@ def outputBottom(self):\n         borderY = maxy - 2\n         # first output text since we might throw an exception during border\n         usageStr = {\n-            SELECT_MODE: SHORT_NAV_USAGE,\n-            X_MODE: SHORT_NAV_USAGE,\n+            SELECT_MODE: self.getShortNavUsageString(),\n+            X_MODE: self.getShortNavUsageString(),\n             COMMAND_MODE: SHORT_COMMAND_USAGE\n         }[self.mode]\n         borderStr = '_' * (maxx - self.getMinX() - 0)\n         self.printer.addstr(borderY, self.getMinX(), borderStr)\n         self.printer.addstr(borderY + 1, self.getMinX(), usageStr)\n \n+    def getShortNavUsageString(self):\n+        navOptions = [SHORT_NAV_OPTION_SELECTION_STR,\n+                      SHORT_NAV_OPTION_NAVIGATION_STR,\n+                      SHORT_NAV_OPTION_QUICK_SELECT_STR,\n+                      SHORT_NAV_OPTION_COMMAND_STR]\n+\n+        # it does not make sense to give the user the option to \"open\" the selection\n+        # in all-input mode\n+        if not self.flags.getAllInput():\n+            navOptions.insert(2, SHORT_NAV_OPTION_OPEN_STR)",
        "path": "src/screenControl.py",
        "position": 56,
        "original_position": 56,
        "commit_id": "5413e5640c675de84747deb41ff4f4936dd6c9c5",
        "original_commit_id": "5413e5640c675de84747deb41ff4f4936dd6c9c5",
        "user": {
            "login": "gsheld",
            "id": 3957980,
            "node_id": "MDQ6VXNlcjM5NTc5ODA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/3957980?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gsheld",
            "html_url": "https://github.com/gsheld",
            "followers_url": "https://api.github.com/users/gsheld/followers",
            "following_url": "https://api.github.com/users/gsheld/following{/other_user}",
            "gists_url": "https://api.github.com/users/gsheld/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/gsheld/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gsheld/subscriptions",
            "organizations_url": "https://api.github.com/users/gsheld/orgs",
            "repos_url": "https://api.github.com/users/gsheld/repos",
            "events_url": "https://api.github.com/users/gsheld/events{/privacy}",
            "received_events_url": "https://api.github.com/users/gsheld/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Yes, its not very intuitive. I think this approach works best; its more or less what you're suggesting.\n\n```\n    def getShortNavUsageString(self):\n        navOptions = [SHORT_NAV_OPTION_SELECTION_STR,\n                      SHORT_NAV_OPTION_NAVIGATION_STR,\n                      SHORT_NAV_OPTION_OPEN_STR,\n                      SHORT_NAV_OPTION_QUICK_SELECT_STR,\n                      SHORT_NAV_OPTION_COMMAND_STR]\n\n        # it does not make sense to give the user the option to \"open\" the selection\n        # in all-input mode\n        if self.flags.getAllInput():\n            navOptions.remove(SHORT_NAV_OPTION_OPEN_STR)\n\n        return ', '.join(navOptions)\n```\n",
        "created_at": "2015-11-25T04:58:40Z",
        "updated_at": "2015-11-25T04:58:40Z",
        "html_url": "https://github.com/facebook/PathPicker/pull/210#discussion_r45829650",
        "pull_request_url": "https://api.github.com/repos/facebook/PathPicker/pulls/210",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/45829650"
            },
            "html": {
                "href": "https://github.com/facebook/PathPicker/pull/210#discussion_r45829650"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/210"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/46056799",
        "pull_request_review_id": null,
        "id": 46056799,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU2Nzk5",
        "diff_hunk": "@@ -115,14 +122,27 @@ def outputBottom(self):\n         borderY = maxy - 2\n         # first output text since we might throw an exception during border\n         usageStr = {\n-            SELECT_MODE: SHORT_NAV_USAGE,\n-            X_MODE: SHORT_NAV_USAGE,\n+            SELECT_MODE: self.getShortNavUsageString(),\n+            X_MODE: self.getShortNavUsageString(),\n             COMMAND_MODE: SHORT_COMMAND_USAGE\n         }[self.mode]\n         borderStr = '_' * (maxx - self.getMinX() - 0)\n         self.printer.addstr(borderY, self.getMinX(), borderStr)\n         self.printer.addstr(borderY + 1, self.getMinX(), usageStr)\n \n+    def getShortNavUsageString(self):\n+        navOptions = [SHORT_NAV_OPTION_SELECTION_STR,\n+                      SHORT_NAV_OPTION_NAVIGATION_STR,\n+                      SHORT_NAV_OPTION_QUICK_SELECT_STR,\n+                      SHORT_NAV_OPTION_COMMAND_STR]\n+\n+        # it does not make sense to give the user the option to \"open\" the selection\n+        # in all-input mode\n+        if not self.flags.getAllInput():\n+            navOptions.insert(2, SHORT_NAV_OPTION_OPEN_STR)",
        "path": "src/screenControl.py",
        "position": 56,
        "original_position": 56,
        "commit_id": "5413e5640c675de84747deb41ff4f4936dd6c9c5",
        "original_commit_id": "5413e5640c675de84747deb41ff4f4936dd6c9c5",
        "user": {
            "login": "pcottle",
            "id": 1135007,
            "node_id": "MDQ6VXNlcjExMzUwMDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1135007?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pcottle",
            "html_url": "https://github.com/pcottle",
            "followers_url": "https://api.github.com/users/pcottle/followers",
            "following_url": "https://api.github.com/users/pcottle/following{/other_user}",
            "gists_url": "https://api.github.com/users/pcottle/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pcottle/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pcottle/subscriptions",
            "organizations_url": "https://api.github.com/users/pcottle/orgs",
            "repos_url": "https://api.github.com/users/pcottle/repos",
            "events_url": "https://api.github.com/users/pcottle/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pcottle/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "ah yeah, removing is a bit cleaner imo. it just felt like happing to map the index with 0-offset back to the original array to figure out where it would be inserted was a bit tough to read. but a super small minor nit of course\n",
        "created_at": "2015-11-27T15:48:25Z",
        "updated_at": "2015-11-27T15:48:25Z",
        "html_url": "https://github.com/facebook/PathPicker/pull/210#discussion_r46056799",
        "pull_request_url": "https://api.github.com/repos/facebook/PathPicker/pulls/210",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/46056799"
            },
            "html": {
                "href": "https://github.com/facebook/PathPicker/pull/210#discussion_r46056799"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/210"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/50172048",
        "pull_request_review_id": null,
        "id": 50172048,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTcyMDQ4",
        "diff_hunk": "@@ -67,6 +68,8 @@ for opt in \"$@\"; do\n     exit 0\n   elif [ \"$opt\" == \"--record\" -o \"$opt\" == \"-r\" ]; then\n     echo \"Recording input and output...\"\n+  elif [ \"$opt\" == \"--non-interactive\" -o \"$opt\" == \"-n\" ]; then",
        "path": "fpp",
        "position": null,
        "original_position": 21,
        "commit_id": "c61192d00add3c533eff51ce434176a890008502",
        "original_commit_id": "2eb7640463e5d052dccfa02ef7a55afc0f056580",
        "user": {
            "login": "pcottle",
            "id": 1135007,
            "node_id": "MDQ6VXNlcjExMzUwMDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1135007?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pcottle",
            "html_url": "https://github.com/pcottle",
            "followers_url": "https://api.github.com/users/pcottle/followers",
            "following_url": "https://api.github.com/users/pcottle/following{/other_user}",
            "gists_url": "https://api.github.com/users/pcottle/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pcottle/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pcottle/subscriptions",
            "organizations_url": "https://api.github.com/users/pcottle/orgs",
            "repos_url": "https://api.github.com/users/pcottle/repos",
            "events_url": "https://api.github.com/users/pcottle/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pcottle/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "i feel like `-n` is a bit short here. `-ni`? just in case we need n for something later\n",
        "created_at": "2016-01-19T20:41:05Z",
        "updated_at": "2016-01-19T20:46:16Z",
        "html_url": "https://github.com/facebook/PathPicker/pull/222#discussion_r50172048",
        "pull_request_url": "https://api.github.com/repos/facebook/PathPicker/pulls/222",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/50172048"
            },
            "html": {
                "href": "https://github.com/facebook/PathPicker/pull/222#discussion_r50172048"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/222"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/50174815",
        "pull_request_review_id": null,
        "id": 50174815,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc0ODE1",
        "diff_hunk": "@@ -45,6 +45,9 @@ def getDisableFileChecks(self):\n     def getAllInput(self):\n         return self.args.all_input\n \n+    def getIsNonInteractive(self):",
        "path": "src/screenFlags.py",
        "position": 4,
        "original_position": 4,
        "commit_id": "c61192d00add3c533eff51ce434176a890008502",
        "original_commit_id": "c61192d00add3c533eff51ce434176a890008502",
        "user": {
            "login": "pcottle",
            "id": 1135007,
            "node_id": "MDQ6VXNlcjExMzUwMDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1135007?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pcottle",
            "html_url": "https://github.com/pcottle",
            "followers_url": "https://api.github.com/users/pcottle/followers",
            "following_url": "https://api.github.com/users/pcottle/following{/other_user}",
            "gists_url": "https://api.github.com/users/pcottle/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pcottle/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pcottle/subscriptions",
            "organizations_url": "https://api.github.com/users/pcottle/orgs",
            "repos_url": "https://api.github.com/users/pcottle/repos",
            "events_url": "https://api.github.com/users/pcottle/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pcottle/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "this is not used but i guess we can keep it here for consistency\n",
        "created_at": "2016-01-19T21:03:18Z",
        "updated_at": "2016-01-19T21:03:18Z",
        "html_url": "https://github.com/facebook/PathPicker/pull/222#discussion_r50174815",
        "pull_request_url": "https://api.github.com/repos/facebook/PathPicker/pulls/222",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/50174815"
            },
            "html": {
                "href": "https://github.com/facebook/PathPicker/pull/222#discussion_r50174815"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/222"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/58435638",
        "pull_request_review_id": null,
        "id": 58435638,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NDM1NjM4",
        "diff_hunk": "@@ -170,7 +170,9 @@ def appendAliasExpansion():\n     # despite documentation hinting otherwise.\n     #\n     # so here we must ask bash to turn on alias expansion.\n-    appendToFile(\"\"\"\n+    shell = os.environ.get('SHELL')\n+    if 'fish' not in shell:",
        "path": "src/output.py",
        "position": 6,
        "original_position": 6,
        "commit_id": "c858efd8333ff46ebf93faccd2b8af2acb005967",
        "original_commit_id": "c858efd8333ff46ebf93faccd2b8af2acb005967",
        "user": {
            "login": "pcottle",
            "id": 1135007,
            "node_id": "MDQ6VXNlcjExMzUwMDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1135007?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pcottle",
            "html_url": "https://github.com/pcottle",
            "followers_url": "https://api.github.com/users/pcottle/followers",
            "following_url": "https://api.github.com/users/pcottle/following{/other_user}",
            "gists_url": "https://api.github.com/users/pcottle/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pcottle/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pcottle/subscriptions",
            "organizations_url": "https://api.github.com/users/pcottle/orgs",
            "repos_url": "https://api.github.com/users/pcottle/repos",
            "events_url": "https://api.github.com/users/pcottle/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pcottle/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "couldhave just done `if fish in shell: return` but nbd\n",
        "created_at": "2016-04-04T19:44:32Z",
        "updated_at": "2016-04-04T19:44:32Z",
        "html_url": "https://github.com/facebook/PathPicker/pull/227#discussion_r58435638",
        "pull_request_url": "https://api.github.com/repos/facebook/PathPicker/pulls/227",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/58435638"
            },
            "html": {
                "href": "https://github.com/facebook/PathPicker/pull/227#discussion_r58435638"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/227"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/58442951",
        "pull_request_review_id": null,
        "id": 58442951,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NDQyOTUx",
        "diff_hunk": "@@ -170,7 +170,9 @@ def appendAliasExpansion():\n     # despite documentation hinting otherwise.\n     #\n     # so here we must ask bash to turn on alias expansion.\n-    appendToFile(\"\"\"\n+    shell = os.environ.get('SHELL')\n+    if 'fish' not in shell:",
        "path": "src/output.py",
        "position": 6,
        "original_position": 6,
        "commit_id": "c858efd8333ff46ebf93faccd2b8af2acb005967",
        "original_commit_id": "c858efd8333ff46ebf93faccd2b8af2acb005967",
        "user": {
            "login": "uri",
            "id": 676443,
            "node_id": "MDQ6VXNlcjY3NjQ0Mw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/676443?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/uri",
            "html_url": "https://github.com/uri",
            "followers_url": "https://api.github.com/users/uri/followers",
            "following_url": "https://api.github.com/users/uri/following{/other_user}",
            "gists_url": "https://api.github.com/users/uri/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/uri/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/uri/subscriptions",
            "organizations_url": "https://api.github.com/users/uri/orgs",
            "repos_url": "https://api.github.com/users/uri/repos",
            "events_url": "https://api.github.com/users/uri/events{/privacy}",
            "received_events_url": "https://api.github.com/users/uri/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Good to know for next time!\n",
        "created_at": "2016-04-04T20:29:38Z",
        "updated_at": "2016-04-04T20:29:38Z",
        "html_url": "https://github.com/facebook/PathPicker/pull/227#discussion_r58442951",
        "pull_request_url": "https://api.github.com/repos/facebook/PathPicker/pulls/227",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/58442951"
            },
            "html": {
                "href": "https://github.com/facebook/PathPicker/pull/227#discussion_r58442951"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/227"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/58568701",
        "pull_request_review_id": null,
        "id": 58568701,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NTY4NzAx",
        "diff_hunk": "@@ -13,8 +13,6 @@\n CODE_TO_CHAR.update((value, name[4:]) for name, value in vars(curses).items()\n                     if name.startswith('KEY_'))\n # special exceptions\n-CODE_TO_CHAR[4] = 'PAGE_DOWN'",
        "path": "src/charCodeMapping.py",
        "position": 4,
        "original_position": 4,
        "commit_id": "6b693b903245b731861123f0cd6d8ab2f0cb1ca3",
        "original_commit_id": "6b693b903245b731861123f0cd6d8ab2f0cb1ca3",
        "user": {
            "login": "pcottle",
            "id": 1135007,
            "node_id": "MDQ6VXNlcjExMzUwMDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1135007?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pcottle",
            "html_url": "https://github.com/pcottle",
            "followers_url": "https://api.github.com/users/pcottle/followers",
            "following_url": "https://api.github.com/users/pcottle/following{/other_user}",
            "gists_url": "https://api.github.com/users/pcottle/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pcottle/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pcottle/subscriptions",
            "organizations_url": "https://api.github.com/users/pcottle/orgs",
            "repos_url": "https://api.github.com/users/pcottle/repos",
            "events_url": "https://api.github.com/users/pcottle/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pcottle/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "do you know what keys these are? been a while since i wrote this\n",
        "created_at": "2016-04-05T16:19:47Z",
        "updated_at": "2016-04-05T16:19:47Z",
        "html_url": "https://github.com/facebook/PathPicker/pull/228#discussion_r58568701",
        "pull_request_url": "https://api.github.com/repos/facebook/PathPicker/pulls/228",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/58568701"
            },
            "html": {
                "href": "https://github.com/facebook/PathPicker/pull/228#discussion_r58568701"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/228"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/58568735",
        "pull_request_review_id": null,
        "id": 58568735,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NTY4NzM1",
        "diff_hunk": "@@ -383,9 +383,9 @@ def processInput(self, key):\n             self.toggleXMode()\n         elif key == 'c':\n             self.beginEnterCommand()\n-        elif key == ' ' or key == 'PAGE_DOWN':",
        "path": "src/screenControl.py",
        "position": 4,
        "original_position": 4,
        "commit_id": "6b693b903245b731861123f0cd6d8ab2f0cb1ca3",
        "original_commit_id": "6b693b903245b731861123f0cd6d8ab2f0cb1ca3",
        "user": {
            "login": "pcottle",
            "id": 1135007,
            "node_id": "MDQ6VXNlcjExMzUwMDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1135007?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pcottle",
            "html_url": "https://github.com/pcottle",
            "followers_url": "https://api.github.com/users/pcottle/followers",
            "following_url": "https://api.github.com/users/pcottle/following{/other_user}",
            "gists_url": "https://api.github.com/users/pcottle/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pcottle/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pcottle/subscriptions",
            "organizations_url": "https://api.github.com/users/pcottle/orgs",
            "repos_url": "https://api.github.com/users/pcottle/repos",
            "events_url": "https://api.github.com/users/pcottle/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pcottle/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "great, i wanted to make sure we kept the space and b keys\n",
        "created_at": "2016-04-05T16:20:02Z",
        "updated_at": "2016-04-05T16:20:02Z",
        "html_url": "https://github.com/facebook/PathPicker/pull/228#discussion_r58568735",
        "pull_request_url": "https://api.github.com/repos/facebook/PathPicker/pulls/228",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/58568735"
            },
            "html": {
                "href": "https://github.com/facebook/PathPicker/pull/228#discussion_r58568735"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/228"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/58574976",
        "pull_request_review_id": null,
        "id": 58574976,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NTc0OTc2",
        "diff_hunk": "@@ -13,8 +13,6 @@\n CODE_TO_CHAR.update((value, name[4:]) for name, value in vars(curses).items()\n                     if name.startswith('KEY_'))\n # special exceptions\n-CODE_TO_CHAR[4] = 'PAGE_DOWN'",
        "path": "src/charCodeMapping.py",
        "position": 4,
        "original_position": 4,
        "commit_id": "6b693b903245b731861123f0cd6d8ab2f0cb1ca3",
        "original_commit_id": "6b693b903245b731861123f0cd6d8ab2f0cb1ca3",
        "user": {
            "login": "robertbachmann",
            "id": 599839,
            "node_id": "MDQ6VXNlcjU5OTgzOQ==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/599839?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/robertbachmann",
            "html_url": "https://github.com/robertbachmann",
            "followers_url": "https://api.github.com/users/robertbachmann/followers",
            "following_url": "https://api.github.com/users/robertbachmann/following{/other_user}",
            "gists_url": "https://api.github.com/users/robertbachmann/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/robertbachmann/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/robertbachmann/subscriptions",
            "organizations_url": "https://api.github.com/users/robertbachmann/orgs",
            "repos_url": "https://api.github.com/users/robertbachmann/repos",
            "events_url": "https://api.github.com/users/robertbachmann/events{/privacy}",
            "received_events_url": "https://api.github.com/users/robertbachmann/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "On Linux 4 seems to be CTRL+D\nDon't know about 20.\n",
        "created_at": "2016-04-05T16:57:03Z",
        "updated_at": "2016-04-05T16:57:03Z",
        "html_url": "https://github.com/facebook/PathPicker/pull/228#discussion_r58574976",
        "pull_request_url": "https://api.github.com/repos/facebook/PathPicker/pulls/228",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/58574976"
            },
            "html": {
                "href": "https://github.com/facebook/PathPicker/pull/228#discussion_r58574976"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/228"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/65613383",
        "pull_request_review_id": null,
        "id": 65613383,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1NjEzMzgz",
        "diff_hunk": "@@ -23,6 +23,10 @@ BASEDIR=\"$( cd -P \"$( dirname \"$SOURCE\" )\" && pwd )\"\n PYTHONCMD=\"python\"\n NONINTERACTIVE=false\n \n+if [ -z \"$FPP_DIR\" ]; then\n+  FPP_DIR=~/.fpp",
        "path": "fpp",
        "position": null,
        "original_position": 5,
        "commit_id": "05b6442900364819d73c00d8578363ab22e293b5",
        "original_commit_id": "0bf2377b92f7c35e7618587dab7f3353a606b9f7",
        "user": {
            "login": "pcottle",
            "id": 1135007,
            "node_id": "MDQ6VXNlcjExMzUwMDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1135007?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pcottle",
            "html_url": "https://github.com/pcottle",
            "followers_url": "https://api.github.com/users/pcottle/followers",
            "following_url": "https://api.github.com/users/pcottle/following{/other_user}",
            "gists_url": "https://api.github.com/users/pcottle/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pcottle/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pcottle/subscriptions",
            "organizations_url": "https://api.github.com/users/pcottle/orgs",
            "repos_url": "https://api.github.com/users/pcottle/repos",
            "events_url": "https://api.github.com/users/pcottle/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pcottle/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "why add this at all? we already have the default down on read (which is the better one imo). then we dont need to have two different sources of truth or places to update it\n",
        "created_at": "2016-06-02T20:34:51Z",
        "updated_at": "2016-06-04T18:53:06Z",
        "html_url": "https://github.com/facebook/PathPicker/pull/231#discussion_r65613383",
        "pull_request_url": "https://api.github.com/repos/facebook/PathPicker/pulls/231",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/65613383"
            },
            "html": {
                "href": "https://github.com/facebook/PathPicker/pull/231#discussion_r65613383"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/231"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/65613402",
        "pull_request_review_id": null,
        "id": 65613402,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1NjEzNDAy",
        "diff_hunk": "@@ -9,7 +9,7 @@\n \n import os\n \n-FPP_DIR = '~/.fpp'\n+FPP_DIR = os.environ.get('FPP_DIR') or '~/.fpp'",
        "path": "src/stateFiles.py",
        "position": 5,
        "original_position": 5,
        "commit_id": "05b6442900364819d73c00d8578363ab22e293b5",
        "original_commit_id": "0bf2377b92f7c35e7618587dab7f3353a606b9f7",
        "user": {
            "login": "pcottle",
            "id": 1135007,
            "node_id": "MDQ6VXNlcjExMzUwMDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1135007?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pcottle",
            "html_url": "https://github.com/pcottle",
            "followers_url": "https://api.github.com/users/pcottle/followers",
            "following_url": "https://api.github.com/users/pcottle/following{/other_user}",
            "gists_url": "https://api.github.com/users/pcottle/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pcottle/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pcottle/subscriptions",
            "organizations_url": "https://api.github.com/users/pcottle/orgs",
            "repos_url": "https://api.github.com/users/pcottle/repos",
            "events_url": "https://api.github.com/users/pcottle/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pcottle/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "\ud83d\udc4d \n",
        "created_at": "2016-06-02T20:34:58Z",
        "updated_at": "2016-06-04T18:53:06Z",
        "html_url": "https://github.com/facebook/PathPicker/pull/231#discussion_r65613402",
        "pull_request_url": "https://api.github.com/repos/facebook/PathPicker/pulls/231",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/65613402"
            },
            "html": {
                "href": "https://github.com/facebook/PathPicker/pull/231#discussion_r65613402"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/231"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/65806097",
        "pull_request_review_id": null,
        "id": 65806097,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1ODA2MDk3",
        "diff_hunk": "@@ -23,6 +23,10 @@ BASEDIR=\"$( cd -P \"$( dirname \"$SOURCE\" )\" && pwd )\"\n PYTHONCMD=\"python\"\n NONINTERACTIVE=false\n \n+if [ -z \"$FPP_DIR\" ]; then\n+  FPP_DIR=~/.fpp",
        "path": "fpp",
        "position": null,
        "original_position": 5,
        "commit_id": "05b6442900364819d73c00d8578363ab22e293b5",
        "original_commit_id": "0bf2377b92f7c35e7618587dab7f3353a606b9f7",
        "user": {
            "login": "zgracem",
            "id": 1896569,
            "node_id": "MDQ6VXNlcjE4OTY1Njk=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1896569?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/zgracem",
            "html_url": "https://github.com/zgracem",
            "followers_url": "https://api.github.com/users/zgracem/followers",
            "following_url": "https://api.github.com/users/zgracem/following{/other_user}",
            "gists_url": "https://api.github.com/users/zgracem/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/zgracem/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/zgracem/subscriptions",
            "organizations_url": "https://api.github.com/users/zgracem/orgs",
            "repos_url": "https://api.github.com/users/zgracem/repos",
            "events_url": "https://api.github.com/users/zgracem/events{/privacy}",
            "received_events_url": "https://api.github.com/users/zgracem/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Probably an overabundance of caution (this is actually my first PR ever). I will add another commit without the shell-script change!\n",
        "created_at": "2016-06-04T18:46:30Z",
        "updated_at": "2016-06-04T18:53:06Z",
        "html_url": "https://github.com/facebook/PathPicker/pull/231#discussion_r65806097",
        "pull_request_url": "https://api.github.com/repos/facebook/PathPicker/pulls/231",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/65806097"
            },
            "html": {
                "href": "https://github.com/facebook/PathPicker/pull/231#discussion_r65806097"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/231"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/71608797",
        "pull_request_review_id": null,
        "id": 71608797,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcxNjA4Nzk3",
        "diff_hunk": "@@ -6,37 +6,37 @@\n  BBBBBB                                                  GR                                                                                                                                              \n  index.html                                         | 11 ++-|    * [A] toggle selection of all (unique) files\n  __________                                              GGR                                                                                                                                             \n- scripts/makeDist.sh                                |  2 +-|    * [down arrow|j] move downward by 1\n+ scripts/makeDist.sh                                |  2 +-|    * [d] describe file\n  ___________________                                     GR                                                                                                                                              \n- .../expected/selectCommandWithPassedCommand.txt    | 30 +++++++|    * [up arrow|k] move upward by 1\n+ .../expected/selectCommandWithPassedCommand.txt    | 30 +++++++|    * [down arrow|j] move downward by 1\n  _______________________________________________         GGGGGGG                                                                                                                                         \n- src/__tests__/expected/selectDownSelectInverse.txt |  4 +-|    * [<space>] page down\n+ src/__tests__/expected/selectDownSelectInverse.txt |  4 +-|    * [up arrow|k] move upward by 1",
        "path": "src/__tests__/expected/dontWipeChrome.txt",
        "position": null,
        "original_position": 11,
        "commit_id": "ee54f65995595588e852f414a5ffad74a008c5b9",
        "original_commit_id": "b36797b0a30ca1a9a6d30f11a7d5c4b837478f22",
        "user": {
            "login": "pcottle",
            "id": 1135007,
            "node_id": "MDQ6VXNlcjExMzUwMDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1135007?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pcottle",
            "html_url": "https://github.com/pcottle",
            "followers_url": "https://api.github.com/users/pcottle/followers",
            "following_url": "https://api.github.com/users/pcottle/following{/other_user}",
            "gists_url": "https://api.github.com/users/pcottle/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pcottle/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pcottle/subscriptions",
            "organizations_url": "https://api.github.com/users/pcottle/orgs",
            "repos_url": "https://api.github.com/users/pcottle/repos",
            "events_url": "https://api.github.com/users/pcottle/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pcottle/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "the diff here probably would have been cleaner if you added this command to the bottom rather than in the middle. you can see the new `X` command was added last which made some of this a bit easer to digest :P\n",
        "created_at": "2016-07-20T21:19:22Z",
        "updated_at": "2016-07-21T04:57:46Z",
        "html_url": "https://github.com/facebook/PathPicker/pull/233#discussion_r71608797",
        "pull_request_url": "https://api.github.com/repos/facebook/PathPicker/pulls/233",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/71608797"
            },
            "html": {
                "href": "https://github.com/facebook/PathPicker/pull/233#discussion_r71608797"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/233"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/71608903",
        "pull_request_review_id": null,
        "id": 71608903,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcxNjA4OTAz",
        "diff_hunk": "@@ -57,3 +57,12 @@ def addstr(self, y, x, text, attr=None):\n             attr = self.currentAttributes\n \n         self.screen.addstr(y, x, text, attr)\n+\n+    # perhaps there's a more elegant way to do this\n+    def clearseg(self, y, startX, endX):",
        "path": "src/colorPrinter.py",
        "position": null,
        "original_position": 6,
        "commit_id": "ee54f65995595588e852f414a5ffad74a008c5b9",
        "original_commit_id": "b36797b0a30ca1a9a6d30f11a7d5c4b837478f22",
        "user": {
            "login": "pcottle",
            "id": 1135007,
            "node_id": "MDQ6VXNlcjExMzUwMDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1135007?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pcottle",
            "html_url": "https://github.com/pcottle",
            "followers_url": "https://api.github.com/users/pcottle/followers",
            "following_url": "https://api.github.com/users/pcottle/following{/other_user}",
            "gists_url": "https://api.github.com/users/pcottle/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pcottle/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pcottle/subscriptions",
            "organizations_url": "https://api.github.com/users/pcottle/orgs",
            "repos_url": "https://api.github.com/users/pcottle/repos",
            "events_url": "https://api.github.com/users/pcottle/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pcottle/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "what is `seg` here? clearSegment? would be down for that\n",
        "created_at": "2016-07-20T21:20:02Z",
        "updated_at": "2016-07-21T04:57:46Z",
        "html_url": "https://github.com/facebook/PathPicker/pull/233#discussion_r71608903",
        "pull_request_url": "https://api.github.com/repos/facebook/PathPicker/pulls/233",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/71608903"
            },
            "html": {
                "href": "https://github.com/facebook/PathPicker/pull/233#discussion_r71608903"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/233"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/71609123",
        "pull_request_review_id": null,
        "id": 71609123,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcxNjA5MTIz",
        "diff_hunk": "@@ -57,3 +57,12 @@ def addstr(self, y, x, text, attr=None):\n             attr = self.currentAttributes\n \n         self.screen.addstr(y, x, text, attr)\n+\n+    # perhaps there's a more elegant way to do this\n+    def clearseg(self, y, startX, endX):\n+        spaceStr = '';\n+        for x in range(startX, endX):\n+            spaceStr += ' '",
        "path": "src/colorPrinter.py",
        "position": null,
        "original_position": 9,
        "commit_id": "ee54f65995595588e852f414a5ffad74a008c5b9",
        "original_commit_id": "b36797b0a30ca1a9a6d30f11a7d5c4b837478f22",
        "user": {
            "login": "pcottle",
            "id": 1135007,
            "node_id": "MDQ6VXNlcjExMzUwMDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1135007?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pcottle",
            "html_url": "https://github.com/pcottle",
            "followers_url": "https://api.github.com/users/pcottle/followers",
            "following_url": "https://api.github.com/users/pcottle/following{/other_user}",
            "gists_url": "https://api.github.com/users/pcottle/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pcottle/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pcottle/subscriptions",
            "organizations_url": "https://api.github.com/users/pcottle/orgs",
            "repos_url": "https://api.github.com/users/pcottle/repos",
            "events_url": "https://api.github.com/users/pcottle/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pcottle/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "repeating strings is actually a nice builtin\n\n```\n>>> ' ' * 10\n'          '\n```\n\nmind using that?|\n\n```\nspaceStr = ' ' * endX - startX\n```\n",
        "created_at": "2016-07-20T21:21:21Z",
        "updated_at": "2016-07-21T04:57:46Z",
        "html_url": "https://github.com/facebook/PathPicker/pull/233#discussion_r71609123",
        "pull_request_url": "https://api.github.com/repos/facebook/PathPicker/pulls/233",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/71609123"
            },
            "html": {
                "href": "https://github.com/facebook/PathPicker/pull/233#discussion_r71609123"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/233"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/71609236",
        "pull_request_review_id": null,
        "id": 71609236,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcxNjA5MjM2",
        "diff_hunk": "@@ -108,6 +110,27 @@ def getScreenIndex(self):\n     def getPath(self):\n         return self.path\n \n+    def getSizeInBytes(self):\n+        size = os.stat(self.path).st_size\n+        return 'size: ' + str(size) + ' bytes'",
        "path": "src/format.py",
        "position": null,
        "original_position": 15,
        "commit_id": "ee54f65995595588e852f414a5ffad74a008c5b9",
        "original_commit_id": "b36797b0a30ca1a9a6d30f11a7d5c4b837478f22",
        "user": {
            "login": "pcottle",
            "id": 1135007,
            "node_id": "MDQ6VXNlcjExMzUwMDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1135007?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pcottle",
            "html_url": "https://github.com/pcottle",
            "followers_url": "https://api.github.com/users/pcottle/followers",
            "following_url": "https://api.github.com/users/pcottle/following{/other_user}",
            "gists_url": "https://api.github.com/users/pcottle/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pcottle/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pcottle/subscriptions",
            "organizations_url": "https://api.github.com/users/pcottle/orgs",
            "repos_url": "https://api.github.com/users/pcottle/repos",
            "events_url": "https://api.github.com/users/pcottle/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pcottle/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "for extra credit credit, itd be cool if this was human readable like x kB, MB, etc\n",
        "created_at": "2016-07-20T21:22:05Z",
        "updated_at": "2016-07-21T04:57:46Z",
        "html_url": "https://github.com/facebook/PathPicker/pull/233#discussion_r71609236",
        "pull_request_url": "https://api.github.com/repos/facebook/PathPicker/pulls/233",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/71609236"
            },
            "html": {
                "href": "https://github.com/facebook/PathPicker/pull/233#discussion_r71609236"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/233"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/71609293",
        "pull_request_review_id": null,
        "id": 71609293,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcxNjA5Mjkz",
        "diff_hunk": "@@ -108,6 +110,27 @@ def getScreenIndex(self):\n     def getPath(self):\n         return self.path\n \n+    def getSizeInBytes(self):\n+        size = os.stat(self.path).st_size\n+        return 'size: ' + str(size) + ' bytes'\n+\n+    def getLengthInLines(self):\n+        num_lines = sum(1 for line in open(self.path))\n+        return 'length: ' + str(num_lines) + ' lines'",
        "path": "src/format.py",
        "position": null,
        "original_position": 19,
        "commit_id": "ee54f65995595588e852f414a5ffad74a008c5b9",
        "original_commit_id": "b36797b0a30ca1a9a6d30f11a7d5c4b837478f22",
        "user": {
            "login": "pcottle",
            "id": 1135007,
            "node_id": "MDQ6VXNlcjExMzUwMDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1135007?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pcottle",
            "html_url": "https://github.com/pcottle",
            "followers_url": "https://api.github.com/users/pcottle/followers",
            "following_url": "https://api.github.com/users/pcottle/following{/other_user}",
            "gists_url": "https://api.github.com/users/pcottle/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pcottle/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pcottle/subscriptions",
            "organizations_url": "https://api.github.com/users/pcottle/orgs",
            "repos_url": "https://api.github.com/users/pcottle/repos",
            "events_url": "https://api.github.com/users/pcottle/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pcottle/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "is it more efficient to do `cat $file | wc -l` via bash? I guess both have to open the whole file, just one is in python\n",
        "created_at": "2016-07-20T21:22:28Z",
        "updated_at": "2016-07-21T04:57:46Z",
        "html_url": "https://github.com/facebook/PathPicker/pull/233#discussion_r71609293",
        "pull_request_url": "https://api.github.com/repos/facebook/PathPicker/pulls/233",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/71609293"
            },
            "html": {
                "href": "https://github.com/facebook/PathPicker/pull/233#discussion_r71609293"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/233"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/71609477",
        "pull_request_review_id": null,
        "id": 71609477,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcxNjA5NDc3",
        "diff_hunk": "@@ -108,6 +110,27 @@ def getScreenIndex(self):\n     def getPath(self):\n         return self.path\n \n+    def getSizeInBytes(self):\n+        size = os.stat(self.path).st_size\n+        return 'size: ' + str(size) + ' bytes'\n+\n+    def getLengthInLines(self):\n+        num_lines = sum(1 for line in open(self.path))\n+        return 'length: ' + str(num_lines) + ' lines'\n+\n+    def getTimeLastAccessed(self):\n+        timeAccessed = time.strftime('%m/%d/%Y %H:%M:%S', time.localtime(os.stat(self.path).st_atime))\n+        return 'last accessed: ' + timeAccessed\n+\n+    def getTimeLastModified(self):\n+        timeModified = time.strftime('%m/%d/%Y %H:%M:%S', time.localtime(os.stat(self.path).st_mtime))\n+        return 'last modified: ' + timeModified\n+\n+    def getOwnerId(self):\n+        userOwnerId = os.stat(self.path).st_uid\n+        groupOwnerId = os.stat(self.path).st_gid\n+        return 'owned by: ' + str(userOwnerId) + ' (user), ' + str(groupOwnerId) + ' (group)'",
        "path": "src/format.py",
        "position": null,
        "original_position": 32,
        "commit_id": "ee54f65995595588e852f414a5ffad74a008c5b9",
        "original_commit_id": "b36797b0a30ca1a9a6d30f11a7d5c4b837478f22",
        "user": {
            "login": "pcottle",
            "id": 1135007,
            "node_id": "MDQ6VXNlcjExMzUwMDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1135007?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pcottle",
            "html_url": "https://github.com/pcottle",
            "followers_url": "https://api.github.com/users/pcottle/followers",
            "following_url": "https://api.github.com/users/pcottle/following{/other_user}",
            "gists_url": "https://api.github.com/users/pcottle/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pcottle/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pcottle/subscriptions",
            "organizations_url": "https://api.github.com/users/pcottle/orgs",
            "repos_url": "https://api.github.com/users/pcottle/repos",
            "events_url": "https://api.github.com/users/pcottle/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pcottle/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "is there a way to get the string of the userOwnerID? that might be nice too\n",
        "created_at": "2016-07-20T21:23:31Z",
        "updated_at": "2016-07-21T04:57:46Z",
        "html_url": "https://github.com/facebook/PathPicker/pull/233#discussion_r71609477",
        "pull_request_url": "https://api.github.com/repos/facebook/PathPicker/pulls/233",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/71609477"
            },
            "html": {
                "href": "https://github.com/facebook/PathPicker/pull/233#discussion_r71609477"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/233"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/71609732",
        "pull_request_review_id": null,
        "id": 71609732,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcxNjA5NzMy",
        "diff_hunk": "@@ -100,6 +105,38 @@ def getIsSidebarMode(self):\n         (maxy, maxx) = self.screenControl.getScreenDimensions()\n         return maxx > 200\n \n+    def outputDescriptionPane(self, lineObj):\n+        if not self.getIsSidebarMode():\n+            return\n+        (maxy, maxx) = self.screenControl.getScreenDimensions()\n+        borderX = maxx - self.WIDTH\n+        startY = self.SIDEBAR_Y + 1\n+        headerLine = 'Description for ' + lineObj.path + ' :'\n+        descLines = [\n+                        lineObj.getTimeLastAccessed(),\n+                        lineObj.getTimeLastModified(),\n+                        lineObj.getOwnerId(),\n+                        lineObj.getSizeInBytes(),\n+                        lineObj.getLengthInLines()\n+                    ]\n+        self.printer.addstr(startY, borderX + 2, headerLine)\n+        y = startY + 2\n+        for descLine in descLines:\n+            self.printer.addstr(y, borderX + 2, '    * ' + descLine)",
        "path": "src/screenControl.py",
        "position": null,
        "original_position": 40,
        "commit_id": "ee54f65995595588e852f414a5ffad74a008c5b9",
        "original_commit_id": "b36797b0a30ca1a9a6d30f11a7d5c4b837478f22",
        "user": {
            "login": "pcottle",
            "id": 1135007,
            "node_id": "MDQ6VXNlcjExMzUwMDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1135007?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pcottle",
            "html_url": "https://github.com/pcottle",
            "followers_url": "https://api.github.com/users/pcottle/followers",
            "following_url": "https://api.github.com/users/pcottle/following{/other_user}",
            "gists_url": "https://api.github.com/users/pcottle/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pcottle/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pcottle/subscriptions",
            "organizations_url": "https://api.github.com/users/pcottle/orgs",
            "repos_url": "https://api.github.com/users/pcottle/repos",
            "events_url": "https://api.github.com/users/pcottle/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pcottle/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "i guess the size of the line is somewhat fixed, but theoretically if we had a SUPER long line it could print off the screen. and i think that results in a fatal but i dont entirely remember.\n\ndo you mind testing and seeing what happens? we might want to add a trim here just in case\n",
        "created_at": "2016-07-20T21:25:18Z",
        "updated_at": "2016-07-21T04:57:46Z",
        "html_url": "https://github.com/facebook/PathPicker/pull/233#discussion_r71609732",
        "pull_request_url": "https://api.github.com/repos/facebook/PathPicker/pulls/233",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/71609732"
            },
            "html": {
                "href": "https://github.com/facebook/PathPicker/pull/233#discussion_r71609732"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/233"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/71609796",
        "pull_request_review_id": null,
        "id": 71609796,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcxNjA5Nzk2",
        "diff_hunk": "@@ -100,6 +105,38 @@ def getIsSidebarMode(self):\n         (maxy, maxx) = self.screenControl.getScreenDimensions()\n         return maxx > 200\n \n+    def outputDescriptionPane(self, lineObj):\n+        if not self.getIsSidebarMode():\n+            return\n+        (maxy, maxx) = self.screenControl.getScreenDimensions()\n+        borderX = maxx - self.WIDTH\n+        startY = self.SIDEBAR_Y + 1\n+        headerLine = 'Description for ' + lineObj.path + ' :'\n+        descLines = [\n+                        lineObj.getTimeLastAccessed(),\n+                        lineObj.getTimeLastModified(),\n+                        lineObj.getOwnerId(),\n+                        lineObj.getSizeInBytes(),\n+                        lineObj.getLengthInLines()\n+                    ]\n+        self.printer.addstr(startY, borderX + 2, headerLine)\n+        y = startY + 2\n+        for descLine in descLines:\n+            self.printer.addstr(y, borderX + 2, '    * ' + descLine)\n+            y = y + 1\n+        self.DESCRIPTION_CLEAR = False\n+\n+    # to fix bug where description pane may not clear on scroll\n+    def clearDescriptionPane(self):\n+        if self.DESCRIPTION_CLEAR:\n+            return\n+        (maxy, maxx) = self.screenControl.getScreenDimensions()\n+        borderX = maxx - self.WIDTH\n+        startY = self.SIDEBAR_Y + 1\n+        for i in range(startY, maxy - 1):\n+            self.printer.clearseg(i, borderX + 2, maxx)",
        "path": "src/screenControl.py",
        "position": null,
        "original_position": 52,
        "commit_id": "ee54f65995595588e852f414a5ffad74a008c5b9",
        "original_commit_id": "b36797b0a30ca1a9a6d30f11a7d5c4b837478f22",
        "user": {
            "login": "pcottle",
            "id": 1135007,
            "node_id": "MDQ6VXNlcjExMzUwMDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1135007?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pcottle",
            "html_url": "https://github.com/pcottle",
            "followers_url": "https://api.github.com/users/pcottle/followers",
            "following_url": "https://api.github.com/users/pcottle/following{/other_user}",
            "gists_url": "https://api.github.com/users/pcottle/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pcottle/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pcottle/subscriptions",
            "organizations_url": "https://api.github.com/users/pcottle/orgs",
            "repos_url": "https://api.github.com/users/pcottle/repos",
            "events_url": "https://api.github.com/users/pcottle/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pcottle/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "maybe it makes sense to do a `clearSquare` method that takes in the corners? since thats how we use it here\n",
        "created_at": "2016-07-20T21:25:42Z",
        "updated_at": "2016-07-21T04:57:46Z",
        "html_url": "https://github.com/facebook/PathPicker/pull/233#discussion_r71609796",
        "pull_request_url": "https://api.github.com/repos/facebook/PathPicker/pulls/233",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/71609796"
            },
            "html": {
                "href": "https://github.com/facebook/PathPicker/pull/233#discussion_r71609796"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/233"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/71644549",
        "pull_request_review_id": null,
        "id": 71644549,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcxNjQ0NTQ5",
        "diff_hunk": "@@ -6,37 +6,37 @@\n  BBBBBB                                                  GR                                                                                                                                              \n  index.html                                         | 11 ++-|    * [A] toggle selection of all (unique) files\n  __________                                              GGR                                                                                                                                             \n- scripts/makeDist.sh                                |  2 +-|    * [down arrow|j] move downward by 1\n+ scripts/makeDist.sh                                |  2 +-|    * [d] describe file\n  ___________________                                     GR                                                                                                                                              \n- .../expected/selectCommandWithPassedCommand.txt    | 30 +++++++|    * [up arrow|k] move upward by 1\n+ .../expected/selectCommandWithPassedCommand.txt    | 30 +++++++|    * [down arrow|j] move downward by 1\n  _______________________________________________         GGGGGGG                                                                                                                                         \n- src/__tests__/expected/selectDownSelectInverse.txt |  4 +-|    * [<space>] page down\n+ src/__tests__/expected/selectDownSelectInverse.txt |  4 +-|    * [up arrow|k] move upward by 1",
        "path": "src/__tests__/expected/dontWipeChrome.txt",
        "position": null,
        "original_position": 11,
        "commit_id": "ee54f65995595588e852f414a5ffad74a008c5b9",
        "original_commit_id": "b36797b0a30ca1a9a6d30f11a7d5c4b837478f22",
        "user": {
            "login": "rjdean123",
            "id": 9645091,
            "node_id": "MDQ6VXNlcjk2NDUwOTE=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/9645091?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rjdean123",
            "html_url": "https://github.com/rjdean123",
            "followers_url": "https://api.github.com/users/rjdean123/followers",
            "following_url": "https://api.github.com/users/rjdean123/following{/other_user}",
            "gists_url": "https://api.github.com/users/rjdean123/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rjdean123/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rjdean123/subscriptions",
            "organizations_url": "https://api.github.com/users/rjdean123/orgs",
            "repos_url": "https://api.github.com/users/rjdean123/repos",
            "events_url": "https://api.github.com/users/rjdean123/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rjdean123/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "done\n",
        "created_at": "2016-07-21T04:10:27Z",
        "updated_at": "2016-07-21T04:57:46Z",
        "html_url": "https://github.com/facebook/PathPicker/pull/233#discussion_r71644549",
        "pull_request_url": "https://api.github.com/repos/facebook/PathPicker/pulls/233",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/71644549"
            },
            "html": {
                "href": "https://github.com/facebook/PathPicker/pull/233#discussion_r71644549"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/233"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/71644552",
        "pull_request_review_id": null,
        "id": 71644552,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcxNjQ0NTUy",
        "diff_hunk": "@@ -57,3 +57,12 @@ def addstr(self, y, x, text, attr=None):\n             attr = self.currentAttributes\n \n         self.screen.addstr(y, x, text, attr)\n+\n+    # perhaps there's a more elegant way to do this\n+    def clearseg(self, y, startX, endX):",
        "path": "src/colorPrinter.py",
        "position": null,
        "original_position": 6,
        "commit_id": "ee54f65995595588e852f414a5ffad74a008c5b9",
        "original_commit_id": "b36797b0a30ca1a9a6d30f11a7d5c4b837478f22",
        "user": {
            "login": "rjdean123",
            "id": 9645091,
            "node_id": "MDQ6VXNlcjk2NDUwOTE=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/9645091?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rjdean123",
            "html_url": "https://github.com/rjdean123",
            "followers_url": "https://api.github.com/users/rjdean123/followers",
            "following_url": "https://api.github.com/users/rjdean123/following{/other_user}",
            "gists_url": "https://api.github.com/users/rjdean123/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rjdean123/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rjdean123/subscriptions",
            "organizations_url": "https://api.github.com/users/rjdean123/orgs",
            "repos_url": "https://api.github.com/users/rjdean123/repos",
            "events_url": "https://api.github.com/users/rjdean123/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rjdean123/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "was torn between camel-case and trying to follow the addstr() styling, switched to clearSegment as I agree clearseg is not clear\n",
        "created_at": "2016-07-21T04:10:31Z",
        "updated_at": "2016-07-21T04:57:46Z",
        "html_url": "https://github.com/facebook/PathPicker/pull/233#discussion_r71644552",
        "pull_request_url": "https://api.github.com/repos/facebook/PathPicker/pulls/233",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/71644552"
            },
            "html": {
                "href": "https://github.com/facebook/PathPicker/pull/233#discussion_r71644552"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/233"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/71644555",
        "pull_request_review_id": null,
        "id": 71644555,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcxNjQ0NTU1",
        "diff_hunk": "@@ -57,3 +57,12 @@ def addstr(self, y, x, text, attr=None):\n             attr = self.currentAttributes\n \n         self.screen.addstr(y, x, text, attr)\n+\n+    # perhaps there's a more elegant way to do this\n+    def clearseg(self, y, startX, endX):\n+        spaceStr = '';\n+        for x in range(startX, endX):\n+            spaceStr += ' '",
        "path": "src/colorPrinter.py",
        "position": null,
        "original_position": 9,
        "commit_id": "ee54f65995595588e852f414a5ffad74a008c5b9",
        "original_commit_id": "b36797b0a30ca1a9a6d30f11a7d5c4b837478f22",
        "user": {
            "login": "rjdean123",
            "id": 9645091,
            "node_id": "MDQ6VXNlcjk2NDUwOTE=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/9645091?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rjdean123",
            "html_url": "https://github.com/rjdean123",
            "followers_url": "https://api.github.com/users/rjdean123/followers",
            "following_url": "https://api.github.com/users/rjdean123/following{/other_user}",
            "gists_url": "https://api.github.com/users/rjdean123/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rjdean123/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rjdean123/subscriptions",
            "organizations_url": "https://api.github.com/users/rjdean123/orgs",
            "repos_url": "https://api.github.com/users/rjdean123/repos",
            "events_url": "https://api.github.com/users/rjdean123/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rjdean123/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I was certain there was a better way--good call, done\n",
        "created_at": "2016-07-21T04:10:36Z",
        "updated_at": "2016-07-21T04:57:46Z",
        "html_url": "https://github.com/facebook/PathPicker/pull/233#discussion_r71644555",
        "pull_request_url": "https://api.github.com/repos/facebook/PathPicker/pulls/233",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/71644555"
            },
            "html": {
                "href": "https://github.com/facebook/PathPicker/pull/233#discussion_r71644555"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/233"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/71644562",
        "pull_request_review_id": null,
        "id": 71644562,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcxNjQ0NTYy",
        "diff_hunk": "@@ -108,6 +110,27 @@ def getScreenIndex(self):\n     def getPath(self):\n         return self.path\n \n+    def getSizeInBytes(self):\n+        size = os.stat(self.path).st_size\n+        return 'size: ' + str(size) + ' bytes'\n+\n+    def getLengthInLines(self):\n+        num_lines = sum(1 for line in open(self.path))\n+        return 'length: ' + str(num_lines) + ' lines'",
        "path": "src/format.py",
        "position": null,
        "original_position": 19,
        "commit_id": "ee54f65995595588e852f414a5ffad74a008c5b9",
        "original_commit_id": "b36797b0a30ca1a9a6d30f11a7d5c4b837478f22",
        "user": {
            "login": "rjdean123",
            "id": 9645091,
            "node_id": "MDQ6VXNlcjk2NDUwOTE=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/9645091?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rjdean123",
            "html_url": "https://github.com/rjdean123",
            "followers_url": "https://api.github.com/users/rjdean123/followers",
            "following_url": "https://api.github.com/users/rjdean123/following{/other_user}",
            "gists_url": "https://api.github.com/users/rjdean123/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rjdean123/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rjdean123/subscriptions",
            "organizations_url": "https://api.github.com/users/rjdean123/orgs",
            "repos_url": "https://api.github.com/users/rjdean123/repos",
            "events_url": "https://api.github.com/users/rjdean123/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rjdean123/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "no noticeable difference for any files I have, not too surprising.\n\nstill gonna assume keeping it at a lower level will be more efficient at some scale--implemented wc -l $filepath\n",
        "created_at": "2016-07-21T04:10:41Z",
        "updated_at": "2016-07-21T04:57:46Z",
        "html_url": "https://github.com/facebook/PathPicker/pull/233#discussion_r71644562",
        "pull_request_url": "https://api.github.com/repos/facebook/PathPicker/pulls/233",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/71644562"
            },
            "html": {
                "href": "https://github.com/facebook/PathPicker/pull/233#discussion_r71644562"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/233"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/71644565",
        "pull_request_review_id": null,
        "id": 71644565,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcxNjQ0NTY1",
        "diff_hunk": "@@ -108,6 +110,27 @@ def getScreenIndex(self):\n     def getPath(self):\n         return self.path\n \n+    def getSizeInBytes(self):\n+        size = os.stat(self.path).st_size\n+        return 'size: ' + str(size) + ' bytes'\n+\n+    def getLengthInLines(self):\n+        num_lines = sum(1 for line in open(self.path))\n+        return 'length: ' + str(num_lines) + ' lines'\n+\n+    def getTimeLastAccessed(self):\n+        timeAccessed = time.strftime('%m/%d/%Y %H:%M:%S', time.localtime(os.stat(self.path).st_atime))\n+        return 'last accessed: ' + timeAccessed\n+\n+    def getTimeLastModified(self):\n+        timeModified = time.strftime('%m/%d/%Y %H:%M:%S', time.localtime(os.stat(self.path).st_mtime))\n+        return 'last modified: ' + timeModified\n+\n+    def getOwnerId(self):\n+        userOwnerId = os.stat(self.path).st_uid\n+        groupOwnerId = os.stat(self.path).st_gid\n+        return 'owned by: ' + str(userOwnerId) + ' (user), ' + str(groupOwnerId) + ' (group)'",
        "path": "src/format.py",
        "position": null,
        "original_position": 32,
        "commit_id": "ee54f65995595588e852f414a5ffad74a008c5b9",
        "original_commit_id": "b36797b0a30ca1a9a6d30f11a7d5c4b837478f22",
        "user": {
            "login": "rjdean123",
            "id": 9645091,
            "node_id": "MDQ6VXNlcjk2NDUwOTE=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/9645091?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rjdean123",
            "html_url": "https://github.com/rjdean123",
            "followers_url": "https://api.github.com/users/rjdean123/followers",
            "following_url": "https://api.github.com/users/rjdean123/following{/other_user}",
            "gists_url": "https://api.github.com/users/rjdean123/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rjdean123/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rjdean123/subscriptions",
            "organizations_url": "https://api.github.com/users/rjdean123/orgs",
            "repos_url": "https://api.github.com/users/rjdean123/repos",
            "events_url": "https://api.github.com/users/rjdean123/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rjdean123/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "done\n",
        "created_at": "2016-07-21T04:10:44Z",
        "updated_at": "2016-07-21T04:57:46Z",
        "html_url": "https://github.com/facebook/PathPicker/pull/233#discussion_r71644565",
        "pull_request_url": "https://api.github.com/repos/facebook/PathPicker/pulls/233",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/71644565"
            },
            "html": {
                "href": "https://github.com/facebook/PathPicker/pull/233#discussion_r71644565"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/233"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/71644569",
        "pull_request_review_id": null,
        "id": 71644569,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcxNjQ0NTY5",
        "diff_hunk": "@@ -100,6 +105,38 @@ def getIsSidebarMode(self):\n         (maxy, maxx) = self.screenControl.getScreenDimensions()\n         return maxx > 200\n \n+    def outputDescriptionPane(self, lineObj):\n+        if not self.getIsSidebarMode():\n+            return\n+        (maxy, maxx) = self.screenControl.getScreenDimensions()\n+        borderX = maxx - self.WIDTH\n+        startY = self.SIDEBAR_Y + 1\n+        headerLine = 'Description for ' + lineObj.path + ' :'\n+        descLines = [\n+                        lineObj.getTimeLastAccessed(),\n+                        lineObj.getTimeLastModified(),\n+                        lineObj.getOwnerId(),\n+                        lineObj.getSizeInBytes(),\n+                        lineObj.getLengthInLines()\n+                    ]\n+        self.printer.addstr(startY, borderX + 2, headerLine)\n+        y = startY + 2\n+        for descLine in descLines:\n+            self.printer.addstr(y, borderX + 2, '    * ' + descLine)",
        "path": "src/screenControl.py",
        "position": null,
        "original_position": 40,
        "commit_id": "ee54f65995595588e852f414a5ffad74a008c5b9",
        "original_commit_id": "b36797b0a30ca1a9a6d30f11a7d5c4b837478f22",
        "user": {
            "login": "rjdean123",
            "id": 9645091,
            "node_id": "MDQ6VXNlcjk2NDUwOTE=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/9645091?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rjdean123",
            "html_url": "https://github.com/rjdean123",
            "followers_url": "https://api.github.com/users/rjdean123/followers",
            "following_url": "https://api.github.com/users/rjdean123/following{/other_user}",
            "gists_url": "https://api.github.com/users/rjdean123/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rjdean123/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rjdean123/subscriptions",
            "organizations_url": "https://api.github.com/users/rjdean123/orgs",
            "repos_url": "https://api.github.com/users/rjdean123/repos",
            "events_url": "https://api.github.com/users/rjdean123/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rjdean123/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "not fatal, it actually wraps around to the other side like an old-school platform game haha.\n\nadded a trimming function.\n",
        "created_at": "2016-07-21T04:10:47Z",
        "updated_at": "2016-07-21T04:57:46Z",
        "html_url": "https://github.com/facebook/PathPicker/pull/233#discussion_r71644569",
        "pull_request_url": "https://api.github.com/repos/facebook/PathPicker/pulls/233",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/71644569"
            },
            "html": {
                "href": "https://github.com/facebook/PathPicker/pull/233#discussion_r71644569"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/233"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/71644575",
        "pull_request_review_id": null,
        "id": 71644575,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcxNjQ0NTc1",
        "diff_hunk": "@@ -100,6 +105,38 @@ def getIsSidebarMode(self):\n         (maxy, maxx) = self.screenControl.getScreenDimensions()\n         return maxx > 200\n \n+    def outputDescriptionPane(self, lineObj):\n+        if not self.getIsSidebarMode():\n+            return\n+        (maxy, maxx) = self.screenControl.getScreenDimensions()\n+        borderX = maxx - self.WIDTH\n+        startY = self.SIDEBAR_Y + 1\n+        headerLine = 'Description for ' + lineObj.path + ' :'\n+        descLines = [\n+                        lineObj.getTimeLastAccessed(),\n+                        lineObj.getTimeLastModified(),\n+                        lineObj.getOwnerId(),\n+                        lineObj.getSizeInBytes(),\n+                        lineObj.getLengthInLines()\n+                    ]\n+        self.printer.addstr(startY, borderX + 2, headerLine)\n+        y = startY + 2\n+        for descLine in descLines:\n+            self.printer.addstr(y, borderX + 2, '    * ' + descLine)\n+            y = y + 1\n+        self.DESCRIPTION_CLEAR = False\n+\n+    # to fix bug where description pane may not clear on scroll\n+    def clearDescriptionPane(self):\n+        if self.DESCRIPTION_CLEAR:\n+            return\n+        (maxy, maxx) = self.screenControl.getScreenDimensions()\n+        borderX = maxx - self.WIDTH\n+        startY = self.SIDEBAR_Y + 1\n+        for i in range(startY, maxy - 1):\n+            self.printer.clearseg(i, borderX + 2, maxx)",
        "path": "src/screenControl.py",
        "position": null,
        "original_position": 52,
        "commit_id": "ee54f65995595588e852f414a5ffad74a008c5b9",
        "original_commit_id": "b36797b0a30ca1a9a6d30f11a7d5c4b837478f22",
        "user": {
            "login": "rjdean123",
            "id": 9645091,
            "node_id": "MDQ6VXNlcjk2NDUwOTE=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/9645091?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rjdean123",
            "html_url": "https://github.com/rjdean123",
            "followers_url": "https://api.github.com/users/rjdean123/followers",
            "following_url": "https://api.github.com/users/rjdean123/following{/other_user}",
            "gists_url": "https://api.github.com/users/rjdean123/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rjdean123/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rjdean123/subscriptions",
            "organizations_url": "https://api.github.com/users/rjdean123/orgs",
            "repos_url": "https://api.github.com/users/rjdean123/repos",
            "events_url": "https://api.github.com/users/rjdean123/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rjdean123/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "done\n",
        "created_at": "2016-07-21T04:10:52Z",
        "updated_at": "2016-07-21T04:57:46Z",
        "html_url": "https://github.com/facebook/PathPicker/pull/233#discussion_r71644575",
        "pull_request_url": "https://api.github.com/repos/facebook/PathPicker/pulls/233",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/71644575"
            },
            "html": {
                "href": "https://github.com/facebook/PathPicker/pull/233#discussion_r71644575"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/233"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/71644558",
        "pull_request_review_id": null,
        "id": 71644558,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcxNjQ0NTU4",
        "diff_hunk": "@@ -108,6 +110,27 @@ def getScreenIndex(self):\n     def getPath(self):\n         return self.path\n \n+    def getSizeInBytes(self):\n+        size = os.stat(self.path).st_size\n+        return 'size: ' + str(size) + ' bytes'",
        "path": "src/format.py",
        "position": null,
        "original_position": 15,
        "commit_id": "ee54f65995595588e852f414a5ffad74a008c5b9",
        "original_commit_id": "b36797b0a30ca1a9a6d30f11a7d5c4b837478f22",
        "user": {
            "login": "rjdean123",
            "id": 9645091,
            "node_id": "MDQ6VXNlcjk2NDUwOTE=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/9645091?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rjdean123",
            "html_url": "https://github.com/rjdean123",
            "followers_url": "https://api.github.com/users/rjdean123/followers",
            "following_url": "https://api.github.com/users/rjdean123/following{/other_user}",
            "gists_url": "https://api.github.com/users/rjdean123/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rjdean123/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rjdean123/subscriptions",
            "organizations_url": "https://api.github.com/users/rjdean123/orgs",
            "repos_url": "https://api.github.com/users/rjdean123/repos",
            "events_url": "https://api.github.com/users/rjdean123/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rjdean123/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "gonna keep looking for a portable way to do this\n\nedit: done\n",
        "created_at": "2016-07-21T04:10:38Z",
        "updated_at": "2016-07-21T04:58:23Z",
        "html_url": "https://github.com/facebook/PathPicker/pull/233#discussion_r71644558",
        "pull_request_url": "https://api.github.com/repos/facebook/PathPicker/pulls/233",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/71644558"
            },
            "html": {
                "href": "https://github.com/facebook/PathPicker/pull/233#discussion_r71644558"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/233"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/71816157",
        "pull_request_review_id": null,
        "id": 71816157,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcxODE2MTU3",
        "diff_hunk": "@@ -57,3 +57,15 @@ def addstr(self, y, x, text, attr=None):\n             attr = self.currentAttributes\n \n         self.screen.addstr(y, x, text, attr)\n+\n+    def clearSquare(self, topY, bottomY, leftX, rightX):",
        "path": "src/colorPrinter.py",
        "position": 5,
        "original_position": 5,
        "commit_id": "ee54f65995595588e852f414a5ffad74a008c5b9",
        "original_commit_id": "ee54f65995595588e852f414a5ffad74a008c5b9",
        "user": {
            "login": "pcottle",
            "id": 1135007,
            "node_id": "MDQ6VXNlcjExMzUwMDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1135007?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pcottle",
            "html_url": "https://github.com/pcottle",
            "followers_url": "https://api.github.com/users/pcottle/followers",
            "following_url": "https://api.github.com/users/pcottle/following{/other_user}",
            "gists_url": "https://api.github.com/users/pcottle/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pcottle/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pcottle/subscriptions",
            "organizations_url": "https://api.github.com/users/pcottle/orgs",
            "repos_url": "https://api.github.com/users/pcottle/repos",
            "events_url": "https://api.github.com/users/pcottle/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pcottle/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "technically this could be a rectangle since we dont enforce that `rightX - leftX == topY - bottomY` :P\n",
        "created_at": "2016-07-22T01:40:30Z",
        "updated_at": "2016-07-22T01:40:30Z",
        "html_url": "https://github.com/facebook/PathPicker/pull/233#discussion_r71816157",
        "pull_request_url": "https://api.github.com/repos/facebook/PathPicker/pulls/233",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/71816157"
            },
            "html": {
                "href": "https://github.com/facebook/PathPicker/pull/233#discussion_r71816157"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/233"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/71816180",
        "pull_request_review_id": null,
        "id": 71816180,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcxODE2MTgw",
        "diff_hunk": "@@ -108,6 +110,39 @@ def getScreenIndex(self):\n     def getPath(self):\n         return self.path\n \n+    def getSizeInBytes(self):\n+        bashCommand = \"ls -lh \" + self.path",
        "path": "src/format.py",
        "position": 14,
        "original_position": 14,
        "commit_id": "ee54f65995595588e852f414a5ffad74a008c5b9",
        "original_commit_id": "ee54f65995595588e852f414a5ffad74a008c5b9",
        "user": {
            "login": "pcottle",
            "id": 1135007,
            "node_id": "MDQ6VXNlcjExMzUwMDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1135007?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pcottle",
            "html_url": "https://github.com/pcottle",
            "followers_url": "https://api.github.com/users/pcottle/followers",
            "following_url": "https://api.github.com/users/pcottle/following{/other_user}",
            "gists_url": "https://api.github.com/users/pcottle/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pcottle/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pcottle/subscriptions",
            "organizations_url": "https://api.github.com/users/pcottle/orgs",
            "repos_url": "https://api.github.com/users/pcottle/repos",
            "events_url": "https://api.github.com/users/pcottle/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pcottle/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "nice!\n",
        "created_at": "2016-07-22T01:40:49Z",
        "updated_at": "2016-07-22T01:40:49Z",
        "html_url": "https://github.com/facebook/PathPicker/pull/233#discussion_r71816180",
        "pull_request_url": "https://api.github.com/repos/facebook/PathPicker/pulls/233",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/71816180"
            },
            "html": {
                "href": "https://github.com/facebook/PathPicker/pull/233#discussion_r71816180"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/233"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/71816217",
        "pull_request_review_id": null,
        "id": 71816217,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcxODE2MjE3",
        "diff_hunk": "@@ -108,6 +110,39 @@ def getScreenIndex(self):\n     def getPath(self):\n         return self.path\n \n+    def getSizeInBytes(self):\n+        bashCommand = \"ls -lh \" + self.path\n+        output = subprocess.check_output(bashCommand.split())\n+        size = output.split()[4]\n+        return 'size: ' + str(size)\n+\n+    def getLengthInLines(self):\n+        bashCommand = \"wc -l \" + self.path\n+        output = subprocess.check_output(bashCommand.split())\n+        return 'length: ' + str(output.strip().split()[0]) + ' lines'\n+\n+    def getTimeLastAccessed(self):\n+        timeAccessed = time.strftime('%m/%d/%Y %H:%M:%S', time.localtime(os.stat(self.path).st_atime))\n+        return 'last accessed: ' + timeAccessed\n+\n+    def getTimeLastModified(self):\n+        timeModified = time.strftime('%m/%d/%Y %H:%M:%S', time.localtime(os.stat(self.path).st_mtime))\n+        return 'last modified: ' + timeModified\n+\n+    def getOwnerUser(self):\n+        bashCommand = \"ls -ld \" + self.path\n+        output = subprocess.check_output(bashCommand.split())\n+        userOwnerName = output.split()[2]",
        "path": "src/format.py",
        "position": 35,
        "original_position": 35,
        "commit_id": "ee54f65995595588e852f414a5ffad74a008c5b9",
        "original_commit_id": "ee54f65995595588e852f414a5ffad74a008c5b9",
        "user": {
            "login": "pcottle",
            "id": 1135007,
            "node_id": "MDQ6VXNlcjExMzUwMDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1135007?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pcottle",
            "html_url": "https://github.com/pcottle",
            "followers_url": "https://api.github.com/users/pcottle/followers",
            "following_url": "https://api.github.com/users/pcottle/following{/other_user}",
            "gists_url": "https://api.github.com/users/pcottle/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pcottle/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pcottle/subscriptions",
            "organizations_url": "https://api.github.com/users/pcottle/orgs",
            "repos_url": "https://api.github.com/users/pcottle/repos",
            "events_url": "https://api.github.com/users/pcottle/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pcottle/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "i guess the format here is always consistent so we are safe to index with confident\n",
        "created_at": "2016-07-22T01:41:49Z",
        "updated_at": "2016-07-22T01:41:49Z",
        "html_url": "https://github.com/facebook/PathPicker/pull/233#discussion_r71816217",
        "pull_request_url": "https://api.github.com/repos/facebook/PathPicker/pulls/233",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/71816217"
            },
            "html": {
                "href": "https://github.com/facebook/PathPicker/pull/233#discussion_r71816217"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/233"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/76542091",
        "pull_request_review_id": null,
        "id": 76542091,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDc2NTQyMDkx",
        "diff_hunk": "@@ -156,7 +156,7 @@ def composeFileCommand(command, lineObjs):\n \n \n def outputNothing():\n-    appendToFile('echo \"nothing to do!\" && exit 1')",
        "path": "src/output.py",
        "position": 4,
        "original_position": 4,
        "commit_id": "93bb63ab1c30c2988d9acdc144927a0f2d42ea74",
        "original_commit_id": "cab65b9cdda6e7fcde0a7779880d2a3f294d79fd",
        "user": {
            "login": "pcottle",
            "id": 1135007,
            "node_id": "MDQ6VXNlcjExMzUwMDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1135007?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pcottle",
            "html_url": "https://github.com/pcottle",
            "followers_url": "https://api.github.com/users/pcottle/followers",
            "following_url": "https://api.github.com/users/pcottle/following{/other_user}",
            "gists_url": "https://api.github.com/users/pcottle/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pcottle/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pcottle/subscriptions",
            "organizations_url": "https://api.github.com/users/pcottle/orgs",
            "repos_url": "https://api.github.com/users/pcottle/repos",
            "events_url": "https://api.github.com/users/pcottle/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pcottle/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "could this echo really ever fail?\n",
        "created_at": "2016-08-29T00:00:10Z",
        "updated_at": "2016-09-03T13:28:27Z",
        "html_url": "https://github.com/facebook/PathPicker/pull/239#discussion_r76542091",
        "pull_request_url": "https://api.github.com/repos/facebook/PathPicker/pulls/239",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/76542091"
            },
            "html": {
                "href": "https://github.com/facebook/PathPicker/pull/239#discussion_r76542091"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/239"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/76542116",
        "pull_request_review_id": null,
        "id": 76542116,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDc2NTQyMTE2",
        "diff_hunk": "@@ -198,7 +198,17 @@ def appendToFile(command):\n \n \n def appendExit():\n-    appendToFile('exit;')\n+    # The `$SHELL` environment variable points to the default shell,\n+    # not the current shell. But they are often the same. And there\n+    # is no other simple and reliable way to detect the current shell.\n+    shell = os.environ['SHELL']\n+    # ``csh``, fish`` and, ``rc`` uses ``$status`` instead of ``$?``.\n+    if shell.endswith('csh') or shell.endswith('fish') or shell.endswith['rc']:\n+        exist_status = '$status'",
        "path": "src/output.py",
        "position": null,
        "original_position": 20,
        "commit_id": "93bb63ab1c30c2988d9acdc144927a0f2d42ea74",
        "original_commit_id": "cab65b9cdda6e7fcde0a7779880d2a3f294d79fd",
        "user": {
            "login": "pcottle",
            "id": 1135007,
            "node_id": "MDQ6VXNlcjExMzUwMDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1135007?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pcottle",
            "html_url": "https://github.com/pcottle",
            "followers_url": "https://api.github.com/users/pcottle/followers",
            "following_url": "https://api.github.com/users/pcottle/following{/other_user}",
            "gists_url": "https://api.github.com/users/pcottle/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pcottle/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pcottle/subscriptions",
            "organizations_url": "https://api.github.com/users/pcottle/orgs",
            "repos_url": "https://api.github.com/users/pcottle/repos",
            "events_url": "https://api.github.com/users/pcottle/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pcottle/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "oooh woah, never knew about the difference between shell being the default versus being the current one.\n\ndo you mean `exit_status` here?\n",
        "created_at": "2016-08-29T00:01:09Z",
        "updated_at": "2016-09-03T13:28:27Z",
        "html_url": "https://github.com/facebook/PathPicker/pull/239#discussion_r76542116",
        "pull_request_url": "https://api.github.com/repos/facebook/PathPicker/pulls/239",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/76542116"
            },
            "html": {
                "href": "https://github.com/facebook/PathPicker/pull/239#discussion_r76542116"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/239"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/76586996",
        "pull_request_review_id": null,
        "id": 76586996,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDc2NTg2OTk2",
        "diff_hunk": "@@ -156,7 +156,7 @@ def composeFileCommand(command, lineObjs):\n \n \n def outputNothing():\n-    appendToFile('echo \"nothing to do!\" && exit 1')",
        "path": "src/output.py",
        "position": 4,
        "original_position": 4,
        "commit_id": "93bb63ab1c30c2988d9acdc144927a0f2d42ea74",
        "original_commit_id": "cab65b9cdda6e7fcde0a7779880d2a3f294d79fd",
        "user": {
            "login": "weakish",
            "id": 114114,
            "node_id": "MDQ6VXNlcjExNDExNA==",
            "avatar_url": "https://avatars1.githubusercontent.com/u/114114?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/weakish",
            "html_url": "https://github.com/weakish",
            "followers_url": "https://api.github.com/users/weakish/followers",
            "following_url": "https://api.github.com/users/weakish/following{/other_user}",
            "gists_url": "https://api.github.com/users/weakish/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/weakish/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/weakish/subscriptions",
            "organizations_url": "https://api.github.com/users/weakish/orgs",
            "repos_url": "https://api.github.com/users/weakish/repos",
            "events_url": "https://api.github.com/users/weakish/events{/privacy}",
            "received_events_url": "https://api.github.com/users/weakish/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "If the shell does not provide a built-in echo function and external `echo` is not in $PATH. Very unlikely. And `fish` does not accept `A && B`. Thus I changed it to simply using `;`.\n",
        "created_at": "2016-08-29T10:40:26Z",
        "updated_at": "2016-09-03T13:28:27Z",
        "html_url": "https://github.com/facebook/PathPicker/pull/239#discussion_r76586996",
        "pull_request_url": "https://api.github.com/repos/facebook/PathPicker/pulls/239",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/76586996"
            },
            "html": {
                "href": "https://github.com/facebook/PathPicker/pull/239#discussion_r76586996"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/239"
            }
        },
        "in_reply_to_id": 76542091
    },
    {
        "url": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/76588474",
        "pull_request_review_id": null,
        "id": 76588474,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDc2NTg4NDc0",
        "diff_hunk": "@@ -198,7 +198,17 @@ def appendToFile(command):\n \n \n def appendExit():\n-    appendToFile('exit;')\n+    # The `$SHELL` environment variable points to the default shell,\n+    # not the current shell. But they are often the same. And there\n+    # is no other simple and reliable way to detect the current shell.\n+    shell = os.environ['SHELL']\n+    # ``csh``, fish`` and, ``rc`` uses ``$status`` instead of ``$?``.\n+    if shell.endswith('csh') or shell.endswith('fish') or shell.endswith['rc']:\n+        exist_status = '$status'",
        "path": "src/output.py",
        "position": null,
        "original_position": 20,
        "commit_id": "93bb63ab1c30c2988d9acdc144927a0f2d42ea74",
        "original_commit_id": "cab65b9cdda6e7fcde0a7779880d2a3f294d79fd",
        "user": {
            "login": "weakish",
            "id": 114114,
            "node_id": "MDQ6VXNlcjExNDExNA==",
            "avatar_url": "https://avatars1.githubusercontent.com/u/114114?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/weakish",
            "html_url": "https://github.com/weakish",
            "followers_url": "https://api.github.com/users/weakish/followers",
            "following_url": "https://api.github.com/users/weakish/following{/other_user}",
            "gists_url": "https://api.github.com/users/weakish/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/weakish/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/weakish/subscriptions",
            "organizations_url": "https://api.github.com/users/weakish/orgs",
            "repos_url": "https://api.github.com/users/weakish/repos",
            "events_url": "https://api.github.com/users/weakish/events{/privacy}",
            "received_events_url": "https://api.github.com/users/weakish/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "> never knew about the difference between shell being the default versus being the current one.\n\nThe default shell is the current shell if current shell set `$SHELL` when it starts, otherwise the default shell is login shell.\n\n> do you mean exit_status here\n\nYes. Previous versions uses `exit $?` and it later changed to `exit;` (for compatibility with csh and fish?).\n",
        "created_at": "2016-08-29T10:54:27Z",
        "updated_at": "2016-09-03T13:28:27Z",
        "html_url": "https://github.com/facebook/PathPicker/pull/239#discussion_r76588474",
        "pull_request_url": "https://api.github.com/repos/facebook/PathPicker/pulls/239",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/76588474"
            },
            "html": {
                "href": "https://github.com/facebook/PathPicker/pull/239#discussion_r76588474"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/239"
            }
        },
        "in_reply_to_id": 76542116
    },
    {
        "url": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/84714777",
        "pull_request_review_id": 5474875,
        "id": 84714777,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg0NzE0Nzc3",
        "diff_hunk": "@@ -1,4 +1,10 @@\n #!/bin/bash\n+\n+if ! type autopep8 > /dev/null; then\n+  echo \"'autopep8' required for build.\"\n+  exit 1;\n+fi\n+\n PEPLINES=$(autopep8 --recursive ./src/ --diff | wc -l)",
        "path": "scripts/buildAndTest.sh",
        "position": 8,
        "original_position": 8,
        "commit_id": "ed1d024a4e179f65411cbb69f17baba0f28ceac7",
        "original_commit_id": "ed1d024a4e179f65411cbb69f17baba0f28ceac7",
        "user": {
            "login": "pcottle",
            "id": 1135007,
            "node_id": "MDQ6VXNlcjExMzUwMDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1135007?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pcottle",
            "html_url": "https://github.com/pcottle",
            "followers_url": "https://api.github.com/users/pcottle/followers",
            "following_url": "https://api.github.com/users/pcottle/following{/other_user}",
            "gists_url": "https://api.github.com/users/pcottle/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pcottle/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pcottle/subscriptions",
            "organizations_url": "https://api.github.com/users/pcottle/orgs",
            "repos_url": "https://api.github.com/users/pcottle/repos",
            "events_url": "https://api.github.com/users/pcottle/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pcottle/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "so with my clowny code beforehand, what did this line do? since autopep8 was missing, it probably just wrote some output to stderr and then the counted lines of stdout was 0, so it skipped?\n\nwow thats lucky :O\n",
        "created_at": "2016-10-24T15:32:52Z",
        "updated_at": "2016-10-24T15:32:52Z",
        "html_url": "https://github.com/facebook/PathPicker/pull/252#discussion_r84714777",
        "pull_request_url": "https://api.github.com/repos/facebook/PathPicker/pulls/252",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/84714777"
            },
            "html": {
                "href": "https://github.com/facebook/PathPicker/pull/252#discussion_r84714777"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/252"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/94351299",
        "pull_request_review_id": 14876998,
        "id": 94351299,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk0MzUxMjk5",
        "diff_hunk": "@@ -2,7 +2,7 @@\n VERSION=\"$(python ./src/version.py)\"\n DEST=\"./dist/fpp.$VERSION.tar.gz\"\n mkdir -p ./dist/\n-tar -cf $DEST src/*.py fpp\n+tar -czf $DEST src/*.py fpp",
        "path": "scripts/makeDist.sh",
        "position": 5,
        "original_position": 5,
        "commit_id": "c39b01c7912aa1c2985e16c3c5bb07edd43b827c",
        "original_commit_id": "c39b01c7912aa1c2985e16c3c5bb07edd43b827c",
        "user": {
            "login": "pcottle",
            "id": 1135007,
            "node_id": "MDQ6VXNlcjExMzUwMDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1135007?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pcottle",
            "html_url": "https://github.com/pcottle",
            "followers_url": "https://api.github.com/users/pcottle/followers",
            "following_url": "https://api.github.com/users/pcottle/following{/other_user}",
            "gists_url": "https://api.github.com/users/pcottle/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pcottle/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pcottle/subscriptions",
            "organizations_url": "https://api.github.com/users/pcottle/orgs",
            "repos_url": "https://api.github.com/users/pcottle/repos",
            "events_url": "https://api.github.com/users/pcottle/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pcottle/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "this is `czf` in trunk and was changed recently. you probably reverted this in some kind of rebase or something -- mind dropping the change to this file?",
        "created_at": "2017-01-02T23:53:40Z",
        "updated_at": "2017-01-02T23:59:00Z",
        "html_url": "https://github.com/facebook/PathPicker/pull/253#discussion_r94351299",
        "pull_request_url": "https://api.github.com/repos/facebook/PathPicker/pulls/253",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/94351299"
            },
            "html": {
                "href": "https://github.com/facebook/PathPicker/pull/253#discussion_r94351299"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/253"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/94351347",
        "pull_request_review_id": 14876998,
        "id": 94351347,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk0MzUxMzQ3",
        "diff_hunk": "@@ -94,33 +92,36 @@ def getEditorAndPath():\n     return 'vim', 'vim'\n \n \n-def getEditFileCommand(filePath, lineNum):\n-    editor, _editor_path = getEditorAndPath()\n-    if editor in ['vim', 'vim -p'] and lineNum != 0:\n-        return '\\'%s\\' +%d' % (filePath, lineNum)\n-    elif editor in ['vi', 'nvim', 'nano', 'joe', 'emacs',\n-                    'emacsclient'] and lineNum != 0:\n-        return '+%d \\'%s\\'' % (lineNum, filePath)\n-    elif editor in ['subl', 'sublime', 'atom'] and lineNum != 0:\n-        return '\\'%s:%d\\'' % (filePath, lineNum)\n-    else:\n-        return \"'%s'\" % filePath\n-\n-\n def expandPath(filePath):\n     # expand ~/ paths\n     filePath = os.path.expanduser(filePath)\n     # and in case of grep, expand ./ as well\n     return os.path.abspath(filePath)\n \n \n-def joinEditCommands(partialCommands):\n+def joinFilesIntoCommand(filesAndLineNumbers):\n     editor, editor_path = getEditorAndPath()\n-    if editor in ['vim', 'mvim'] and \\\n-            not os.environ.get('FPP_DISABLE_SPLIT'):\n-        return editor_path + ' -O ' + ' '.join(partialCommands)\n-    # Assume that all other editors behave like emacs\n-    return editor_path + ' ' + ' '.join(partialCommands)\n+    cmd = editor_path + ' '\n+    if editor == 'vim -p':\n+        firstFilePath, firstLineNum = filesAndLineNumbers[0]\n+        cmd += ' +%d %s' % (firstLineNum, firstFilePath)\n+        for (filePath, lineNum) in filesAndLineNumbers[1:]:\n+            cmd += ' +\"tabnew +%d %s\"' % (lineNum, filePath)\n+    elif editor == 'vim':\n+        firstFilePath, firstLineNum = filesAndLineNumbers[0]\n+        cmd += ' +%d %s' % (firstLineNum, firstFilePath)\n+        for (filePath, lineNum) in filesAndLineNumbers[1:]:\n+            cmd += ' +\"vsp +%d %s\"' % (lineNum, filePath)",
        "path": "src/output.py",
        "position": 58,
        "original_position": 58,
        "commit_id": "c39b01c7912aa1c2985e16c3c5bb07edd43b827c",
        "original_commit_id": "c39b01c7912aa1c2985e16c3c5bb07edd43b827c",
        "user": {
            "login": "pcottle",
            "id": 1135007,
            "node_id": "MDQ6VXNlcjExMzUwMDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1135007?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pcottle",
            "html_url": "https://github.com/pcottle",
            "followers_url": "https://api.github.com/users/pcottle/followers",
            "following_url": "https://api.github.com/users/pcottle/following{/other_user}",
            "gists_url": "https://api.github.com/users/pcottle/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pcottle/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pcottle/subscriptions",
            "organizations_url": "https://api.github.com/users/pcottle/orgs",
            "repos_url": "https://api.github.com/users/pcottle/repos",
            "events_url": "https://api.github.com/users/pcottle/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pcottle/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "woahhh so `vsp` does vertical split like `-O` and allows you to specify the line numbers? very cool!",
        "created_at": "2017-01-02T23:55:25Z",
        "updated_at": "2017-01-02T23:59:00Z",
        "html_url": "https://github.com/facebook/PathPicker/pull/253#discussion_r94351347",
        "pull_request_url": "https://api.github.com/repos/facebook/PathPicker/pulls/253",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/94351347"
            },
            "html": {
                "href": "https://github.com/facebook/PathPicker/pull/253#discussion_r94351347"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/253"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/94351394",
        "pull_request_review_id": 14876998,
        "id": 94351394,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk0MzUxMzk0",
        "diff_hunk": "@@ -94,33 +92,36 @@ def getEditorAndPath():\n     return 'vim', 'vim'\n \n \n-def getEditFileCommand(filePath, lineNum):",
        "path": "src/output.py",
        "position": 20,
        "original_position": 20,
        "commit_id": "c39b01c7912aa1c2985e16c3c5bb07edd43b827c",
        "original_commit_id": "c39b01c7912aa1c2985e16c3c5bb07edd43b827c",
        "user": {
            "login": "pcottle",
            "id": 1135007,
            "node_id": "MDQ6VXNlcjExMzUwMDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1135007?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pcottle",
            "html_url": "https://github.com/pcottle",
            "followers_url": "https://api.github.com/users/pcottle/followers",
            "following_url": "https://api.github.com/users/pcottle/following{/other_user}",
            "gists_url": "https://api.github.com/users/pcottle/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pcottle/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pcottle/subscriptions",
            "organizations_url": "https://api.github.com/users/pcottle/orgs",
            "repos_url": "https://api.github.com/users/pcottle/repos",
            "events_url": "https://api.github.com/users/pcottle/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pcottle/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "ah i see why this had to go -- yeah you didnt have global context when composing these mini-parts. ",
        "created_at": "2017-01-02T23:56:39Z",
        "updated_at": "2017-01-02T23:59:00Z",
        "html_url": "https://github.com/facebook/PathPicker/pull/253#discussion_r94351394",
        "pull_request_url": "https://api.github.com/repos/facebook/PathPicker/pulls/253",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/94351394"
            },
            "html": {
                "href": "https://github.com/facebook/PathPicker/pull/253#discussion_r94351394"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/253"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/94351450",
        "pull_request_review_id": 14876998,
        "id": 94351450,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk0MzUxNDUw",
        "diff_hunk": "@@ -94,33 +92,36 @@ def getEditorAndPath():\n     return 'vim', 'vim'\n \n \n-def getEditFileCommand(filePath, lineNum):\n-    editor, _editor_path = getEditorAndPath()\n-    if editor in ['vim', 'vim -p'] and lineNum != 0:\n-        return '\\'%s\\' +%d' % (filePath, lineNum)\n-    elif editor in ['vi', 'nvim', 'nano', 'joe', 'emacs',\n-                    'emacsclient'] and lineNum != 0:\n-        return '+%d \\'%s\\'' % (lineNum, filePath)\n-    elif editor in ['subl', 'sublime', 'atom'] and lineNum != 0:\n-        return '\\'%s:%d\\'' % (filePath, lineNum)\n-    else:\n-        return \"'%s'\" % filePath\n-\n-\n def expandPath(filePath):\n     # expand ~/ paths\n     filePath = os.path.expanduser(filePath)\n     # and in case of grep, expand ./ as well\n     return os.path.abspath(filePath)\n \n \n-def joinEditCommands(partialCommands):\n+def joinFilesIntoCommand(filesAndLineNumbers):\n     editor, editor_path = getEditorAndPath()\n-    if editor in ['vim', 'mvim'] and \\\n-            not os.environ.get('FPP_DISABLE_SPLIT'):\n-        return editor_path + ' -O ' + ' '.join(partialCommands)\n-    # Assume that all other editors behave like emacs\n-    return editor_path + ' ' + ' '.join(partialCommands)\n+    cmd = editor_path + ' '\n+    if editor == 'vim -p':\n+        firstFilePath, firstLineNum = filesAndLineNumbers[0]\n+        cmd += ' +%d %s' % (firstLineNum, firstFilePath)\n+        for (filePath, lineNum) in filesAndLineNumbers[1:]:\n+            cmd += ' +\"tabnew +%d %s\"' % (lineNum, filePath)\n+    elif editor == 'vim':",
        "path": "src/output.py",
        "position": 54,
        "original_position": 54,
        "commit_id": "c39b01c7912aa1c2985e16c3c5bb07edd43b827c",
        "original_commit_id": "c39b01c7912aa1c2985e16c3c5bb07edd43b827c",
        "user": {
            "login": "pcottle",
            "id": 1135007,
            "node_id": "MDQ6VXNlcjExMzUwMDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1135007?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pcottle",
            "html_url": "https://github.com/pcottle",
            "followers_url": "https://api.github.com/users/pcottle/followers",
            "following_url": "https://api.github.com/users/pcottle/following{/other_user}",
            "gists_url": "https://api.github.com/users/pcottle/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pcottle/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pcottle/subscriptions",
            "organizations_url": "https://api.github.com/users/pcottle/orgs",
            "repos_url": "https://api.github.com/users/pcottle/repos",
            "events_url": "https://api.github.com/users/pcottle/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pcottle/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "note to self -- we lost the `FPP_DISABLE_SPLIT` behavior here so lets add that back",
        "created_at": "2017-01-02T23:58:22Z",
        "updated_at": "2017-01-02T23:59:00Z",
        "html_url": "https://github.com/facebook/PathPicker/pull/253#discussion_r94351450",
        "pull_request_url": "https://api.github.com/repos/facebook/PathPicker/pulls/253",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/94351450"
            },
            "html": {
                "href": "https://github.com/facebook/PathPicker/pull/253#discussion_r94351450"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/253"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/117790117",
        "pull_request_review_id": 39526239,
        "id": 117790117,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNzc5MDExNw==",
        "diff_hunk": "@@ -20,6 +20,7 @@\n \n from screenForTest import ScreenForTest\n from cursesForTest import CursesForTest\n+from keyBindingsForTest import KeyBindingsForTest",
        "path": "src/__tests__/screenTestRunner.py",
        "position": 4,
        "original_position": 4,
        "commit_id": "8d3aa9af9dab44a574bb5db041ca4b5a18215a8e",
        "original_commit_id": "a63083417bd96e73e9f7271dae820004bb167485",
        "user": {
            "login": "pcottle",
            "id": 1135007,
            "node_id": "MDQ6VXNlcjExMzUwMDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1135007?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pcottle",
            "html_url": "https://github.com/pcottle",
            "followers_url": "https://api.github.com/users/pcottle/followers",
            "following_url": "https://api.github.com/users/pcottle/following{/other_user}",
            "gists_url": "https://api.github.com/users/pcottle/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pcottle/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pcottle/subscriptions",
            "organizations_url": "https://api.github.com/users/pcottle/orgs",
            "repos_url": "https://api.github.com/users/pcottle/repos",
            "events_url": "https://api.github.com/users/pcottle/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pcottle/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "glad you found this hacky dependency injection jazz haha",
        "created_at": "2017-05-22T16:32:05Z",
        "updated_at": "2017-06-12T08:20:34Z",
        "html_url": "https://github.com/facebook/PathPicker/pull/262#discussion_r117790117",
        "pull_request_url": "https://api.github.com/repos/facebook/PathPicker/pulls/262",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/117790117"
            },
            "html": {
                "href": "https://github.com/facebook/PathPicker/pull/262#discussion_r117790117"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/262"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/117790308",
        "pull_request_review_id": 39526239,
        "id": 117790308,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNzc5MDMwOA==",
        "diff_hunk": "@@ -29,16 +30,19 @@\n '''\n \n \n-def doProgram(stdscr, flags, cursesAPI=None, lineObjs=None):\n+def doProgram(stdscr, flags, keyBindings=None, cursesAPI=None, lineObjs=None):",
        "path": "src/choose.py",
        "position": 13,
        "original_position": 13,
        "commit_id": "8d3aa9af9dab44a574bb5db041ca4b5a18215a8e",
        "original_commit_id": "a63083417bd96e73e9f7271dae820004bb167485",
        "user": {
            "login": "pcottle",
            "id": 1135007,
            "node_id": "MDQ6VXNlcjExMzUwMDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1135007?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pcottle",
            "html_url": "https://github.com/pcottle",
            "followers_url": "https://api.github.com/users/pcottle/followers",
            "following_url": "https://api.github.com/users/pcottle/following{/other_user}",
            "gists_url": "https://api.github.com/users/pcottle/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pcottle/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pcottle/subscriptions",
            "organizations_url": "https://api.github.com/users/pcottle/orgs",
            "repos_url": "https://api.github.com/users/pcottle/repos",
            "events_url": "https://api.github.com/users/pcottle/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pcottle/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "should we make this required? we pass it in everywhere right?",
        "created_at": "2017-05-22T16:32:57Z",
        "updated_at": "2017-06-12T08:20:34Z",
        "html_url": "https://github.com/facebook/PathPicker/pull/262#discussion_r117790308",
        "pull_request_url": "https://api.github.com/repos/facebook/PathPicker/pulls/262",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/117790308"
            },
            "html": {
                "href": "https://github.com/facebook/PathPicker/pull/262#discussion_r117790308"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/262"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/117790477",
        "pull_request_review_id": 39526239,
        "id": 117790477,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNzc5MDQ3Nw==",
        "diff_hunk": "@@ -0,0 +1,22 @@\n+import os\n+import ConfigParser\n+\n+from stateFiles import FPP_DIR\n+\n+KEY_BINDINGS_FILE = '.fpp.keys'\n+\n+\n+class KeyBindings(object):\n+\n+    bindings = []\n+\n+    def __init__(self):\n+        \"\"\"Returns configured key bindings, in the format [[key, command], ...]\n+        \"\"\"\n+        configFilePath = os.path.expanduser(\n+            os.path.join(FPP_DIR, KEY_BINDINGS_FILE))\n+        parser = ConfigParser.ConfigParser()\n+        parser.read(configFilePath)",
        "path": "src/keyBindings.py",
        "position": null,
        "original_position": 19,
        "commit_id": "8d3aa9af9dab44a574bb5db041ca4b5a18215a8e",
        "original_commit_id": "a63083417bd96e73e9f7271dae820004bb167485",
        "user": {
            "login": "pcottle",
            "id": 1135007,
            "node_id": "MDQ6VXNlcjExMzUwMDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1135007?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pcottle",
            "html_url": "https://github.com/pcottle",
            "followers_url": "https://api.github.com/users/pcottle/followers",
            "following_url": "https://api.github.com/users/pcottle/following{/other_user}",
            "gists_url": "https://api.github.com/users/pcottle/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pcottle/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pcottle/subscriptions",
            "organizations_url": "https://api.github.com/users/pcottle/orgs",
            "repos_url": "https://api.github.com/users/pcottle/repos",
            "events_url": "https://api.github.com/users/pcottle/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pcottle/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "if the file doesnt exist what happens?",
        "created_at": "2017-05-22T16:33:45Z",
        "updated_at": "2017-06-12T08:20:34Z",
        "html_url": "https://github.com/facebook/PathPicker/pull/262#discussion_r117790477",
        "pull_request_url": "https://api.github.com/repos/facebook/PathPicker/pulls/262",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/117790477"
            },
            "html": {
                "href": "https://github.com/facebook/PathPicker/pull/262#discussion_r117790477"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/262"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/118758556",
        "pull_request_review_id": 40584571,
        "id": 118758556,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExODc1ODU1Ng==",
        "diff_hunk": "@@ -29,16 +30,19 @@\n '''\n \n \n-def doProgram(stdscr, flags, cursesAPI=None, lineObjs=None):\n+def doProgram(stdscr, flags, keyBindings=None, cursesAPI=None, lineObjs=None):",
        "path": "src/choose.py",
        "position": 13,
        "original_position": 13,
        "commit_id": "8d3aa9af9dab44a574bb5db041ca4b5a18215a8e",
        "original_commit_id": "a63083417bd96e73e9f7271dae820004bb167485",
        "user": {
            "login": "saveriomiroddi",
            "id": 1595356,
            "node_id": "MDQ6VXNlcjE1OTUzNTY=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/1595356?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/saveriomiroddi",
            "html_url": "https://github.com/saveriomiroddi",
            "followers_url": "https://api.github.com/users/saveriomiroddi/followers",
            "following_url": "https://api.github.com/users/saveriomiroddi/following{/other_user}",
            "gists_url": "https://api.github.com/users/saveriomiroddi/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/saveriomiroddi/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/saveriomiroddi/subscriptions",
            "organizations_url": "https://api.github.com/users/saveriomiroddi/orgs",
            "repos_url": "https://api.github.com/users/saveriomiroddi/repos",
            "events_url": "https://api.github.com/users/saveriomiroddi/events{/privacy}",
            "received_events_url": "https://api.github.com/users/saveriomiroddi/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "If I'm understanding well, this translates to `def doProgram(stdscr, flags, keyBindings, ...)`; I think it's a good idea.\r\n\r\nYes, the Controller (which is the \"center\" class) definitely needs it.\r\n\r\nThere is also the interesting, open, idea that the KeyBindings class (and its backing file) is in reality nothing else than a generic configuration class.\r\nIn the future, it will be very easy to convert it to a more general `Configuration` (or any other name).\r\n\r\nNow, I'm saying this to strenghten the point that it's worth making required, being a configuration.",
        "created_at": "2017-05-26T18:03:40Z",
        "updated_at": "2017-06-12T08:20:34Z",
        "html_url": "https://github.com/facebook/PathPicker/pull/262#discussion_r118758556",
        "pull_request_url": "https://api.github.com/repos/facebook/PathPicker/pulls/262",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/118758556"
            },
            "html": {
                "href": "https://github.com/facebook/PathPicker/pull/262#discussion_r118758556"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/262"
            }
        },
        "in_reply_to_id": 117790308
    },
    {
        "url": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/118758628",
        "pull_request_review_id": 40584666,
        "id": 118758628,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExODc1ODYyOA==",
        "diff_hunk": "@@ -0,0 +1,22 @@\n+import os\n+import ConfigParser\n+\n+from stateFiles import FPP_DIR\n+\n+KEY_BINDINGS_FILE = '.fpp.keys'\n+\n+\n+class KeyBindings(object):\n+\n+    bindings = []\n+\n+    def __init__(self):\n+        \"\"\"Returns configured key bindings, in the format [[key, command], ...]\n+        \"\"\"\n+        configFilePath = os.path.expanduser(\n+            os.path.join(FPP_DIR, KEY_BINDINGS_FILE))\n+        parser = ConfigParser.ConfigParser()\n+        parser.read(configFilePath)",
        "path": "src/keyBindings.py",
        "position": null,
        "original_position": 19,
        "commit_id": "8d3aa9af9dab44a574bb5db041ca4b5a18215a8e",
        "original_commit_id": "a63083417bd96e73e9f7271dae820004bb167485",
        "user": {
            "login": "saveriomiroddi",
            "id": 1595356,
            "node_id": "MDQ6VXNlcjE1OTUzNTY=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/1595356?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/saveriomiroddi",
            "html_url": "https://github.com/saveriomiroddi",
            "followers_url": "https://api.github.com/users/saveriomiroddi/followers",
            "following_url": "https://api.github.com/users/saveriomiroddi/following{/other_user}",
            "gists_url": "https://api.github.com/users/saveriomiroddi/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/saveriomiroddi/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/saveriomiroddi/subscriptions",
            "organizations_url": "https://api.github.com/users/saveriomiroddi/orgs",
            "repos_url": "https://api.github.com/users/saveriomiroddi/repos",
            "events_url": "https://api.github.com/users/saveriomiroddi/events{/privacy}",
            "received_events_url": "https://api.github.com/users/saveriomiroddi/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Nothing, the code is tolerant :-) But it's good practice to add some tests; I will add a test suite.",
        "created_at": "2017-05-26T18:04:03Z",
        "updated_at": "2017-06-12T08:20:34Z",
        "html_url": "https://github.com/facebook/PathPicker/pull/262#discussion_r118758628",
        "pull_request_url": "https://api.github.com/repos/facebook/PathPicker/pulls/262",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/118758628"
            },
            "html": {
                "href": "https://github.com/facebook/PathPicker/pull/262#discussion_r118758628"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/262"
            }
        },
        "in_reply_to_id": 117790477
    },
    {
        "url": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/121455544",
        "pull_request_review_id": 43485040,
        "id": 121455544,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMTQ1NTU0NA==",
        "diff_hunk": "@@ -15,7 +15,7 @@ else\n fi\n \n cd ./src/__tests__/\n-python testParsing.py && python testScreen.py > /dev/null\n+python testParsing.py && python testScreen.py && python testKeyBindingsParsing.py > /dev/null",
        "path": "scripts/buildAndTest.sh",
        "position": 5,
        "original_position": 5,
        "commit_id": "8d3aa9af9dab44a574bb5db041ca4b5a18215a8e",
        "original_commit_id": "8d3aa9af9dab44a574bb5db041ca4b5a18215a8e",
        "user": {
            "login": "pcottle",
            "id": 1135007,
            "node_id": "MDQ6VXNlcjExMzUwMDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1135007?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pcottle",
            "html_url": "https://github.com/pcottle",
            "followers_url": "https://api.github.com/users/pcottle/followers",
            "following_url": "https://api.github.com/users/pcottle/following{/other_user}",
            "gists_url": "https://api.github.com/users/pcottle/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pcottle/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pcottle/subscriptions",
            "organizations_url": "https://api.github.com/users/pcottle/orgs",
            "repos_url": "https://api.github.com/users/pcottle/repos",
            "events_url": "https://api.github.com/users/pcottle/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pcottle/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "we should probably change this to `python test*` but this is ok for now",
        "created_at": "2017-06-12T16:04:42Z",
        "updated_at": "2017-06-12T16:09:35Z",
        "html_url": "https://github.com/facebook/PathPicker/pull/262#discussion_r121455544",
        "pull_request_url": "https://api.github.com/repos/facebook/PathPicker/pulls/262",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/121455544"
            },
            "html": {
                "href": "https://github.com/facebook/PathPicker/pull/262#discussion_r121455544"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/262"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/121455732",
        "pull_request_review_id": 43485040,
        "id": 121455732,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMTQ1NTczMg==",
        "diff_hunk": "@@ -0,0 +1,14 @@\n+# Copyright (c) 2015-present, Facebook, Inc.\n+# All rights reserved.\n+#\n+# This source code is licensed under the BSD-style license found in the\n+# LICENSE file in the root directory of this source tree. An additional grant\n+# of patent rights can be found in the PATENTS file in the same directory.\n+#\n+\n+KEY_BINDINGS_FOR_TEST_CONFIG_CONTENT = \"[bindings]\\nr = rspec\\ns = subl\\n\"",
        "path": "src/__tests__/keyBindingsForTest.py",
        "position": 9,
        "original_position": 9,
        "commit_id": "8d3aa9af9dab44a574bb5db041ca4b5a18215a8e",
        "original_commit_id": "8d3aa9af9dab44a574bb5db041ca4b5a18215a8e",
        "user": {
            "login": "pcottle",
            "id": 1135007,
            "node_id": "MDQ6VXNlcjExMzUwMDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1135007?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pcottle",
            "html_url": "https://github.com/pcottle",
            "followers_url": "https://api.github.com/users/pcottle/followers",
            "following_url": "https://api.github.com/users/pcottle/following{/other_user}",
            "gists_url": "https://api.github.com/users/pcottle/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pcottle/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pcottle/subscriptions",
            "organizations_url": "https://api.github.com/users/pcottle/orgs",
            "repos_url": "https://api.github.com/users/pcottle/repos",
            "events_url": "https://api.github.com/users/pcottle/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pcottle/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "ah interesting so you use this in the testing below but you define it here? guess thats nice to keep it in sync with the mock",
        "created_at": "2017-06-12T16:05:29Z",
        "updated_at": "2017-06-12T16:09:35Z",
        "html_url": "https://github.com/facebook/PathPicker/pull/262#discussion_r121455732",
        "pull_request_url": "https://api.github.com/repos/facebook/PathPicker/pulls/262",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/121455732"
            },
            "html": {
                "href": "https://github.com/facebook/PathPicker/pull/262#discussion_r121455732"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/262"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/121455813",
        "pull_request_review_id": 43485040,
        "id": 121455813,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMTQ1NTgxMw==",
        "diff_hunk": "@@ -0,0 +1,14 @@\n+# Copyright (c) 2015-present, Facebook, Inc.\n+# All rights reserved.\n+#\n+# This source code is licensed under the BSD-style license found in the\n+# LICENSE file in the root directory of this source tree. An additional grant\n+# of patent rights can be found in the PATENTS file in the same directory.\n+#\n+\n+KEY_BINDINGS_FOR_TEST_CONFIG_CONTENT = \"[bindings]\\nr = rspec\\ns = subl\\n\"\n+\n+\n+class KeyBindingsForTest(object):\n+\n+    bindings = [('r', 'rspec'.encode('utf-8')), ('s', 'subl'.encode('utf-8'))]",
        "path": "src/__tests__/keyBindingsForTest.py",
        "position": 14,
        "original_position": 14,
        "commit_id": "8d3aa9af9dab44a574bb5db041ca4b5a18215a8e",
        "original_commit_id": "8d3aa9af9dab44a574bb5db041ca4b5a18215a8e",
        "user": {
            "login": "pcottle",
            "id": 1135007,
            "node_id": "MDQ6VXNlcjExMzUwMDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1135007?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pcottle",
            "html_url": "https://github.com/pcottle",
            "followers_url": "https://api.github.com/users/pcottle/followers",
            "following_url": "https://api.github.com/users/pcottle/following{/other_user}",
            "gists_url": "https://api.github.com/users/pcottle/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pcottle/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pcottle/subscriptions",
            "organizations_url": "https://api.github.com/users/pcottle/orgs",
            "repos_url": "https://api.github.com/users/pcottle/repos",
            "events_url": "https://api.github.com/users/pcottle/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pcottle/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "why do you have to encode to utf8? probably just for equality comparison right?",
        "created_at": "2017-06-12T16:05:47Z",
        "updated_at": "2017-06-12T16:09:36Z",
        "html_url": "https://github.com/facebook/PathPicker/pull/262#discussion_r121455813",
        "pull_request_url": "https://api.github.com/repos/facebook/PathPicker/pulls/262",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/121455813"
            },
            "html": {
                "href": "https://github.com/facebook/PathPicker/pull/262#discussion_r121455813"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/262"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/121456128",
        "pull_request_review_id": 43485040,
        "id": 121456128,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMTQ1NjEyOA==",
        "diff_hunk": "@@ -0,0 +1,42 @@\n+# Copyright (c) 2015-present, Facebook, Inc.\n+# All rights reserved.\n+#\n+# This source code is licensed under the BSD-style license found in the\n+# LICENSE file in the root directory of this source tree. An additional grant\n+# of patent rights can be found in the PATENTS file in the same directory.\n+#\n+import os\n+import sys\n+\n+if sys.version_info[0] < 3:",
        "path": "src/keyBindings.py",
        "position": 11,
        "original_position": 11,
        "commit_id": "8d3aa9af9dab44a574bb5db041ca4b5a18215a8e",
        "original_commit_id": "8d3aa9af9dab44a574bb5db041ca4b5a18215a8e",
        "user": {
            "login": "pcottle",
            "id": 1135007,
            "node_id": "MDQ6VXNlcjExMzUwMDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1135007?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pcottle",
            "html_url": "https://github.com/pcottle",
            "followers_url": "https://api.github.com/users/pcottle/followers",
            "following_url": "https://api.github.com/users/pcottle/following{/other_user}",
            "gists_url": "https://api.github.com/users/pcottle/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pcottle/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pcottle/subscriptions",
            "organizations_url": "https://api.github.com/users/pcottle/orgs",
            "repos_url": "https://api.github.com/users/pcottle/repos",
            "events_url": "https://api.github.com/users/pcottle/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pcottle/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "ah great!",
        "created_at": "2017-06-12T16:07:07Z",
        "updated_at": "2017-06-12T16:09:36Z",
        "html_url": "https://github.com/facebook/PathPicker/pull/262#discussion_r121456128",
        "pull_request_url": "https://api.github.com/repos/facebook/PathPicker/pulls/262",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/121456128"
            },
            "html": {
                "href": "https://github.com/facebook/PathPicker/pull/262#discussion_r121456128"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/262"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/121456381",
        "pull_request_review_id": 43485040,
        "id": 121456381,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMTQ1NjM4MQ==",
        "diff_hunk": "@@ -0,0 +1,42 @@\n+# Copyright (c) 2015-present, Facebook, Inc.\n+# All rights reserved.\n+#\n+# This source code is licensed under the BSD-style license found in the\n+# LICENSE file in the root directory of this source tree. An additional grant\n+# of patent rights can be found in the PATENTS file in the same directory.\n+#\n+import os\n+import sys\n+\n+if sys.version_info[0] < 3:\n+    import ConfigParser\n+    parserModule = ConfigParser\n+else:\n+    import configparser\n+    parserModule = configparser\n+\n+from stateFiles import FPP_DIR\n+\n+KEY_BINDINGS_FILE = os.path.join(FPP_DIR, '.fpp.keys')\n+\n+\n+class KeyBindings(object):\n+\n+    bindings = []\n+\n+    def __init__(self, keyBindingsFile=KEY_BINDINGS_FILE):\n+        \"\"\"Returns configured key bindings, in the format [(key, command), ...].\n+        The ordering of the entries is not guaranteed, although it's irrelevant to the purpose.\n+        \"\"\"\n+        configFilePath = os.path.expanduser(keyBindingsFile)\n+        parser = parserModule.ConfigParser()\n+        parser.read(configFilePath)\n+\n+        # The `executePreconfiguredCommand` underlying APIs use `curses.getstr()`, which returns an",
        "path": "src/keyBindings.py",
        "position": 35,
        "original_position": 35,
        "commit_id": "8d3aa9af9dab44a574bb5db041ca4b5a18215a8e",
        "original_commit_id": "8d3aa9af9dab44a574bb5db041ca4b5a18215a8e",
        "user": {
            "login": "pcottle",
            "id": 1135007,
            "node_id": "MDQ6VXNlcjExMzUwMDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1135007?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pcottle",
            "html_url": "https://github.com/pcottle",
            "followers_url": "https://api.github.com/users/pcottle/followers",
            "following_url": "https://api.github.com/users/pcottle/following{/other_user}",
            "gists_url": "https://api.github.com/users/pcottle/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pcottle/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pcottle/subscriptions",
            "organizations_url": "https://api.github.com/users/pcottle/orgs",
            "repos_url": "https://api.github.com/users/pcottle/repos",
            "events_url": "https://api.github.com/users/pcottle/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pcottle/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "ahh i see, interesting",
        "created_at": "2017-06-12T16:08:12Z",
        "updated_at": "2017-06-12T16:09:36Z",
        "html_url": "https://github.com/facebook/PathPicker/pull/262#discussion_r121456381",
        "pull_request_url": "https://api.github.com/repos/facebook/PathPicker/pulls/262",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/121456381"
            },
            "html": {
                "href": "https://github.com/facebook/PathPicker/pull/262#discussion_r121456381"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/262"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/121456482",
        "pull_request_review_id": 43485040,
        "id": 121456482,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMTQ1NjQ4Mg==",
        "diff_hunk": "@@ -461,7 +462,10 @@ def processInput(self, key):\n             self.cursesAPI.exit()\n         elif self.mode == X_MODE and key in lbls:",
        "path": "src/screenControl.py",
        "position": 17,
        "original_position": 17,
        "commit_id": "8d3aa9af9dab44a574bb5db041ca4b5a18215a8e",
        "original_commit_id": "8d3aa9af9dab44a574bb5db041ca4b5a18215a8e",
        "user": {
            "login": "pcottle",
            "id": 1135007,
            "node_id": "MDQ6VXNlcjExMzUwMDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1135007?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pcottle",
            "html_url": "https://github.com/pcottle",
            "followers_url": "https://api.github.com/users/pcottle/followers",
            "following_url": "https://api.github.com/users/pcottle/following{/other_user}",
            "gists_url": "https://api.github.com/users/pcottle/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pcottle/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pcottle/subscriptions",
            "organizations_url": "https://api.github.com/users/pcottle/orgs",
            "repos_url": "https://api.github.com/users/pcottle/repos",
            "events_url": "https://api.github.com/users/pcottle/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pcottle/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "cool, so X mode is still respected first with priority",
        "created_at": "2017-06-12T16:08:38Z",
        "updated_at": "2017-06-12T16:09:36Z",
        "html_url": "https://github.com/facebook/PathPicker/pull/262#discussion_r121456482",
        "pull_request_url": "https://api.github.com/repos/facebook/PathPicker/pulls/262",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/121456482"
            },
            "html": {
                "href": "https://github.com/facebook/PathPicker/pull/262#discussion_r121456482"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/262"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/121489482",
        "pull_request_review_id": 43522195,
        "id": 121489482,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMTQ4OTQ4Mg==",
        "diff_hunk": "@@ -0,0 +1,14 @@\n+# Copyright (c) 2015-present, Facebook, Inc.\n+# All rights reserved.\n+#\n+# This source code is licensed under the BSD-style license found in the\n+# LICENSE file in the root directory of this source tree. An additional grant\n+# of patent rights can be found in the PATENTS file in the same directory.\n+#\n+\n+KEY_BINDINGS_FOR_TEST_CONFIG_CONTENT = \"[bindings]\\nr = rspec\\ns = subl\\n\"\n+\n+\n+class KeyBindingsForTest(object):\n+\n+    bindings = [('r', 'rspec'.encode('utf-8')), ('s', 'subl'.encode('utf-8'))]",
        "path": "src/__tests__/keyBindingsForTest.py",
        "position": 14,
        "original_position": 14,
        "commit_id": "8d3aa9af9dab44a574bb5db041ca4b5a18215a8e",
        "original_commit_id": "8d3aa9af9dab44a574bb5db041ca4b5a18215a8e",
        "user": {
            "login": "saveriomiroddi",
            "id": 1595356,
            "node_id": "MDQ6VXNlcjE1OTUzNTY=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/1595356?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/saveriomiroddi",
            "html_url": "https://github.com/saveriomiroddi",
            "followers_url": "https://api.github.com/users/saveriomiroddi/followers",
            "following_url": "https://api.github.com/users/saveriomiroddi/following{/other_user}",
            "gists_url": "https://api.github.com/users/saveriomiroddi/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/saveriomiroddi/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/saveriomiroddi/subscriptions",
            "organizations_url": "https://api.github.com/users/saveriomiroddi/orgs",
            "repos_url": "https://api.github.com/users/saveriomiroddi/repos",
            "events_url": "https://api.github.com/users/saveriomiroddi/events{/privacy}",
            "received_events_url": "https://api.github.com/users/saveriomiroddi/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Yes, it's the Python 2+3 compatibility issue. Since KeyBindings returns `encode()`d strings, and  in Python 3, `''.encode('utf-8') != ''`, for an accurate UT, the expected strings needed to be encoded as well.",
        "created_at": "2017-06-12T18:24:28Z",
        "updated_at": "2017-06-12T18:24:28Z",
        "html_url": "https://github.com/facebook/PathPicker/pull/262#discussion_r121489482",
        "pull_request_url": "https://api.github.com/repos/facebook/PathPicker/pulls/262",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/121489482"
            },
            "html": {
                "href": "https://github.com/facebook/PathPicker/pull/262#discussion_r121489482"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/262"
            }
        },
        "in_reply_to_id": 121455813
    },
    {
        "url": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/136707943",
        "pull_request_review_id": 60287677,
        "id": 136707943,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNjcwNzk0Mw==",
        "diff_hunk": "@@ -296,12 +296,15 @@ def __init__(self, flags, keyBindings, stdscr, lineObjs, cursesAPI):\n             if not lineObj.isSimple():\n                 self.lineMatches.append(lineObj)\n \n-        self.numLines = len(lineObjs.keys())\n-        self.numMatches = len(self.lineMatches)",
        "path": "src/screenControl.py",
        "position": 5,
        "original_position": 5,
        "commit_id": "a616520590661978448c190e0b753a67c20287bd",
        "original_commit_id": "a616520590661978448c190e0b753a67c20287bd",
        "user": {
            "login": "bgwines",
            "id": 2442246,
            "node_id": "MDQ6VXNlcjI0NDIyNDY=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/2442246?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bgwines",
            "html_url": "https://github.com/bgwines",
            "followers_url": "https://api.github.com/users/bgwines/followers",
            "following_url": "https://api.github.com/users/bgwines/following{/other_user}",
            "gists_url": "https://api.github.com/users/bgwines/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bgwines/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bgwines/subscriptions",
            "organizations_url": "https://api.github.com/users/bgwines/orgs",
            "repos_url": "https://api.github.com/users/bgwines/repos",
            "events_url": "https://api.github.com/users/bgwines/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bgwines/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "had to move these because we should call `toggleSelectAll()` before assigning these, and need to call `resetDirty()` before calling `toggleSelectAll()`",
        "created_at": "2017-09-03T04:08:33Z",
        "updated_at": "2017-09-03T04:08:34Z",
        "html_url": "https://github.com/facebook/PathPicker/pull/268#discussion_r136707943",
        "pull_request_url": "https://api.github.com/repos/facebook/PathPicker/pulls/268",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/136707943"
            },
            "html": {
                "href": "https://github.com/facebook/PathPicker/pull/268#discussion_r136707943"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/268"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/204123447",
        "pull_request_review_id": 139154296,
        "id": 204123447,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwNDEyMzQ0Nw==",
        "diff_hunk": "@@ -356,12 +356,17 @@ def describeFile(self):\n         self.helperChrome.outputDescription(self.lineMatches[self.hoverIndex])\n \n     def control(self):\n+        executeKeys = self.flags.getExecuteKeys()\n+\n         # we start out by printing everything we need to\n         self.printAll()\n         self.resetDirty()\n         self.moveCursor()\n         while True:\n-            inKey = self.getKey()\n+            if len(executeKeys) > 0:",
        "path": "src/screenControl.py",
        "position": 12,
        "original_position": 12,
        "commit_id": "caf75fc65218dd242edc7b449c774720eb291f77",
        "original_commit_id": "caf75fc65218dd242edc7b449c774720eb291f77",
        "user": {
            "login": "pcottle",
            "id": 1135007,
            "node_id": "MDQ6VXNlcjExMzUwMDc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1135007?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pcottle",
            "html_url": "https://github.com/pcottle",
            "followers_url": "https://api.github.com/users/pcottle/followers",
            "following_url": "https://api.github.com/users/pcottle/following{/other_user}",
            "gists_url": "https://api.github.com/users/pcottle/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pcottle/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pcottle/subscriptions",
            "organizations_url": "https://api.github.com/users/pcottle/orgs",
            "repos_url": "https://api.github.com/users/pcottle/repos",
            "events_url": "https://api.github.com/users/pcottle/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pcottle/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "think\r\n\r\n```\r\nif executeKeys:\r\n```\r\n\r\nshould suffice",
        "created_at": "2018-07-20T17:56:26Z",
        "updated_at": "2018-07-20T17:56:46Z",
        "html_url": "https://github.com/facebook/PathPicker/pull/288#discussion_r204123447",
        "pull_request_url": "https://api.github.com/repos/facebook/PathPicker/pulls/288",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/comments/204123447"
            },
            "html": {
                "href": "https://github.com/facebook/PathPicker/pull/288#discussion_r204123447"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/facebook/PathPicker/pulls/288"
            }
        }
    }
]