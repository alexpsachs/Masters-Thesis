[
    {
        "url": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/16380001",
        "pull_request_review_id": null,
        "id": 16380001,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MzgwMDAx",
        "diff_hunk": "@@ -246,7 +246,13 @@ func (socket *mongoSocket) loginPlain(cred Credential) error {\n }\n \n func (socket *mongoSocket) loginSASL(cred Credential) error {\n-\tsasl, err := saslNew(cred, socket.Server().Addr)\n+\tvar sasl saslStepper;\n+\tvar err error;",
        "path": "auth.go",
        "position": null,
        "original_position": 6,
        "commit_id": "220b5da603537806741b9b6c6fdfa1487e38cde6",
        "original_commit_id": "5b7de8850840cb3a032f67f929315ca1d7acbbb2",
        "user": {
            "login": "niemeyer",
            "id": 378683,
            "node_id": "MDQ6VXNlcjM3ODY4Mw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/378683?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/niemeyer",
            "html_url": "https://github.com/niemeyer",
            "followers_url": "https://api.github.com/users/niemeyer/followers",
            "following_url": "https://api.github.com/users/niemeyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/niemeyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/niemeyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/niemeyer/subscriptions",
            "organizations_url": "https://api.github.com/users/niemeyer/orgs",
            "repos_url": "https://api.github.com/users/niemeyer/repos",
            "events_url": "https://api.github.com/users/niemeyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/niemeyer/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Please drop the commas at the end of the line, and also run go fmt to ensure the code is properly formatted according to the usual conventions. There are spacing issues below.\n",
        "created_at": "2014-08-18T20:36:50Z",
        "updated_at": "2014-08-18T22:25:54Z",
        "html_url": "https://github.com/go-mgo/mgo/pull/10#discussion_r16380001",
        "pull_request_url": "https://api.github.com/repos/go-mgo/mgo/pulls/10",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/16380001"
            },
            "html": {
                "href": "https://github.com/go-mgo/mgo/pull/10#discussion_r16380001"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/10"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/16380097",
        "pull_request_review_id": null,
        "id": 16380097,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MzgwMDk3",
        "diff_hunk": "@@ -936,3 +936,73 @@ func (s *S) TestAuthKerberosURL(c *C) {\n \tc.Assert(err, IsNil)\n \tc.Assert(len(names) > 0, Equals, true)\n }\n+\n+func (s *S) TestAuthKerberosServiceName(c *C) {\n+\tif !*kerberosFlag {\n+                c.Skip(\"no -kerberos\")\n+        }\n+\n+\twrongServiceName := \"wrong\"\n+\trightServiceName := \"mongodb\"\n+\n+        cred := &mgo.Credential{\n+                Username:  kerberosUser,\n+                Mechanism: \"GSSAPI\",\n+                Service: wrongServiceName,\n+        }\n+\n+\tc.Logf(\"Connecting to %s...\", kerberosHost)\n+        session, err := mgo.Dial(kerberosHost)\n+        c.Assert(err, IsNil)\n+        defer session.Close()\n+\n+\tc.Logf(\"Authenticating with incorrect service name...\")\n+        err = session.Login(cred)\n+        c.Assert(err, ErrorMatches,\n+\t\t\".*Server wrong/mmscustmongo.10gen.me@10GEN.ME not found.*\")",
        "path": "auth_test.go",
        "position": null,
        "original_position": 27,
        "commit_id": "220b5da603537806741b9b6c6fdfa1487e38cde6",
        "original_commit_id": "5b7de8850840cb3a032f67f929315ca1d7acbbb2",
        "user": {
            "login": "niemeyer",
            "id": 378683,
            "node_id": "MDQ6VXNlcjM3ODY4Mw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/378683?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/niemeyer",
            "html_url": "https://github.com/niemeyer",
            "followers_url": "https://api.github.com/users/niemeyer/followers",
            "following_url": "https://api.github.com/users/niemeyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/niemeyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/niemeyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/niemeyer/subscriptions",
            "organizations_url": "https://api.github.com/users/niemeyer/orgs",
            "repos_url": "https://api.github.com/users/niemeyer/repos",
            "events_url": "https://api.github.com/users/niemeyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/niemeyer/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Please move it all in a single line here and in the equivalent line in the next test. Given the usual term size these days, we're not following the 80 columns rule.\n",
        "created_at": "2014-08-18T20:38:27Z",
        "updated_at": "2014-08-18T22:25:54Z",
        "html_url": "https://github.com/go-mgo/mgo/pull/10#discussion_r16380097",
        "pull_request_url": "https://api.github.com/repos/go-mgo/mgo/pulls/10",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/16380097"
            },
            "html": {
                "href": "https://github.com/go-mgo/mgo/pull/10#discussion_r16380097"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/10"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/16380213",
        "pull_request_review_id": null,
        "id": 16380213,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2MzgwMjEz",
        "diff_hunk": "@@ -303,6 +303,11 @@ type DialInfo struct {\n \t// mechanism. Defaults to \"mongodb\".\n \tService string\n \n+\t// ServiceHostname defines which hostname to use when authenticating\n+        // with the GSSAPI mechanism. If not specified, defaults to the MongoDB\n+\t// server's address.\n+\tServiceHostname string",
        "path": "session.go",
        "position": null,
        "original_position": 7,
        "commit_id": "220b5da603537806741b9b6c6fdfa1487e38cde6",
        "original_commit_id": "5b7de8850840cb3a032f67f929315ca1d7acbbb2",
        "user": {
            "login": "niemeyer",
            "id": 378683,
            "node_id": "MDQ6VXNlcjM3ODY4Mw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/378683?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/niemeyer",
            "html_url": "https://github.com/niemeyer",
            "followers_url": "https://api.github.com/users/niemeyer/followers",
            "following_url": "https://api.github.com/users/niemeyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/niemeyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/niemeyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/niemeyer/subscriptions",
            "organizations_url": "https://api.github.com/users/niemeyer/orgs",
            "repos_url": "https://api.github.com/users/niemeyer/repos",
            "events_url": "https://api.github.com/users/niemeyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/niemeyer/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Let's please use the field name \"ServiceHost\", to follow usual Go conventions (the \"host\" term is abundant in Go code.. see the standard net package for example).\n",
        "created_at": "2014-08-18T20:40:13Z",
        "updated_at": "2014-08-18T22:25:54Z",
        "html_url": "https://github.com/go-mgo/mgo/pull/10#discussion_r16380213",
        "pull_request_url": "https://api.github.com/repos/go-mgo/mgo/pulls/10",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/16380213"
            },
            "html": {
                "href": "https://github.com/go-mgo/mgo/pull/10#discussion_r16380213"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/10"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/17433665",
        "pull_request_review_id": null,
        "id": 17433665,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NDMzNjY1",
        "diff_hunk": "@@ -159,7 +164,7 @@ func (s *S) pid(host string) int {\n }\n \n func (s *S) Freeze(host string) {\n-\terr := syscall.Kill(s.pid(host), syscall.SIGSTOP)\n+\terr := s.Stop(host)",
        "path": "suite_test.go",
        "position": null,
        "original_position": 40,
        "commit_id": "4dead2a72b94b2a61d68b516cb71ad5e0a38f44d",
        "original_commit_id": "ac370edbf6fc0a11a7b1435cf43d1465b521082b",
        "user": {
            "login": "niemeyer",
            "id": 378683,
            "node_id": "MDQ6VXNlcjM3ODY4Mw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/378683?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/niemeyer",
            "html_url": "https://github.com/niemeyer",
            "followers_url": "https://api.github.com/users/niemeyer/followers",
            "following_url": "https://api.github.com/users/niemeyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/niemeyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/niemeyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/niemeyer/subscriptions",
            "organizations_url": "https://api.github.com/users/niemeyer/orgs",
            "repos_url": "https://api.github.com/users/niemeyer/repos",
            "events_url": "https://api.github.com/users/niemeyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/niemeyer/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "That's bogus. The Stop method does not do what SIGSTOP does. \n",
        "created_at": "2014-09-11T17:13:18Z",
        "updated_at": "2014-09-17T20:49:25Z",
        "html_url": "https://github.com/go-mgo/mgo/pull/12#discussion_r17433665",
        "pull_request_url": "https://api.github.com/repos/go-mgo/mgo/pulls/12",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/17433665"
            },
            "html": {
                "href": "https://github.com/go-mgo/mgo/pull/12#discussion_r17433665"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/12"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/17434000",
        "pull_request_review_id": null,
        "id": 17434000,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NDM0MDAw",
        "diff_hunk": "@@ -0,0 +1,15 @@\n+// +build linux darwin\n+\n+package mgo_test\n+\n+import (\n+\t\"syscall\"\n+)\n+\n+func (s *S) Stop(host string) error {",
        "path": "syscall_test.go",
        "position": null,
        "original_position": 9,
        "commit_id": "4dead2a72b94b2a61d68b516cb71ad5e0a38f44d",
        "original_commit_id": "ac370edbf6fc0a11a7b1435cf43d1465b521082b",
        "user": {
            "login": "niemeyer",
            "id": 378683,
            "node_id": "MDQ6VXNlcjM3ODY4Mw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/378683?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/niemeyer",
            "html_url": "https://github.com/niemeyer",
            "followers_url": "https://api.github.com/users/niemeyer/followers",
            "following_url": "https://api.github.com/users/niemeyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/niemeyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/niemeyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/niemeyer/subscriptions",
            "organizations_url": "https://api.github.com/users/niemeyer/orgs",
            "repos_url": "https://api.github.com/users/niemeyer/repos",
            "events_url": "https://api.github.com/users/niemeyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/niemeyer/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "How does that even compile, when there's a S.Stop method in suite_test.go!?\n\nLet's please have a single function here:\n\n```\nfunc kill(pid int, sig Signal) (err error) {\n        return syscall.Kill(pid, sig)\n}\n```\n\nPlease make sure it works!\n",
        "created_at": "2014-09-11T17:18:31Z",
        "updated_at": "2014-09-17T20:49:25Z",
        "html_url": "https://github.com/go-mgo/mgo/pull/12#discussion_r17434000",
        "pull_request_url": "https://api.github.com/repos/go-mgo/mgo/pulls/12",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/17434000"
            },
            "html": {
                "href": "https://github.com/go-mgo/mgo/pull/12#discussion_r17434000"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/12"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/17690700",
        "pull_request_review_id": null,
        "id": 17690700,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NjkwNzAw",
        "diff_hunk": "@@ -159,7 +164,7 @@ func (s *S) pid(host string) int {\n }\n \n func (s *S) Freeze(host string) {\n-\terr := syscall.Kill(s.pid(host), syscall.SIGSTOP)\n+\terr := s.Stop(host)",
        "path": "suite_test.go",
        "position": null,
        "original_position": 40,
        "commit_id": "4dead2a72b94b2a61d68b516cb71ad5e0a38f44d",
        "original_commit_id": "ac370edbf6fc0a11a7b1435cf43d1465b521082b",
        "user": {
            "login": "vkarpov15",
            "id": 1620265,
            "node_id": "MDQ6VXNlcjE2MjAyNjU=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/1620265?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/vkarpov15",
            "html_url": "https://github.com/vkarpov15",
            "followers_url": "https://api.github.com/users/vkarpov15/followers",
            "following_url": "https://api.github.com/users/vkarpov15/following{/other_user}",
            "gists_url": "https://api.github.com/users/vkarpov15/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/vkarpov15/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/vkarpov15/subscriptions",
            "organizations_url": "https://api.github.com/users/vkarpov15/orgs",
            "repos_url": "https://api.github.com/users/vkarpov15/repos",
            "events_url": "https://api.github.com/users/vkarpov15/events{/privacy}",
            "received_events_url": "https://api.github.com/users/vkarpov15/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Good call, I got lazy and didn't test. Done.\n",
        "created_at": "2014-09-17T20:14:07Z",
        "updated_at": "2014-09-17T20:49:25Z",
        "html_url": "https://github.com/go-mgo/mgo/pull/12#discussion_r17690700",
        "pull_request_url": "https://api.github.com/repos/go-mgo/mgo/pulls/12",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/17690700"
            },
            "html": {
                "href": "https://github.com/go-mgo/mgo/pull/12#discussion_r17690700"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/12"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/17690734",
        "pull_request_review_id": null,
        "id": 17690734,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NjkwNzM0",
        "diff_hunk": "@@ -0,0 +1,15 @@\n+// +build linux darwin\n+\n+package mgo_test\n+\n+import (\n+\t\"syscall\"\n+)\n+\n+func (s *S) Stop(host string) error {",
        "path": "syscall_test.go",
        "position": null,
        "original_position": 9,
        "commit_id": "4dead2a72b94b2a61d68b516cb71ad5e0a38f44d",
        "original_commit_id": "ac370edbf6fc0a11a7b1435cf43d1465b521082b",
        "user": {
            "login": "vkarpov15",
            "id": 1620265,
            "node_id": "MDQ6VXNlcjE2MjAyNjU=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/1620265?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/vkarpov15",
            "html_url": "https://github.com/vkarpov15",
            "followers_url": "https://api.github.com/users/vkarpov15/followers",
            "following_url": "https://api.github.com/users/vkarpov15/following{/other_user}",
            "gists_url": "https://api.github.com/users/vkarpov15/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/vkarpov15/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/vkarpov15/subscriptions",
            "organizations_url": "https://api.github.com/users/vkarpov15/orgs",
            "repos_url": "https://api.github.com/users/vkarpov15/repos",
            "events_url": "https://api.github.com/users/vkarpov15/events{/privacy}",
            "received_events_url": "https://api.github.com/users/vkarpov15/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Can't do that, signal and SIGCONT+SIGSTOP don't exist on windows either. See commit I'm about to push.\n",
        "created_at": "2014-09-17T20:14:40Z",
        "updated_at": "2014-09-17T20:49:25Z",
        "html_url": "https://github.com/go-mgo/mgo/pull/12#discussion_r17690734",
        "pull_request_url": "https://api.github.com/repos/go-mgo/mgo/pulls/12",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/17690734"
            },
            "html": {
                "href": "https://github.com/go-mgo/mgo/pull/12#discussion_r17690734"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/12"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/17691122",
        "pull_request_review_id": null,
        "id": 17691122,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NjkxMTIy",
        "diff_hunk": "@@ -0,0 +1,11 @@\n+// +build windows",
        "path": "syscall_win_test.go",
        "position": null,
        "original_position": 1,
        "commit_id": "4dead2a72b94b2a61d68b516cb71ad5e0a38f44d",
        "original_commit_id": "74139fe9b326201a9a5bb795068ce06fc0caca66",
        "user": {
            "login": "niemeyer",
            "id": 378683,
            "node_id": "MDQ6VXNlcjM3ODY4Mw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/378683?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/niemeyer",
            "html_url": "https://github.com/niemeyer",
            "followers_url": "https://api.github.com/users/niemeyer/followers",
            "following_url": "https://api.github.com/users/niemeyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/niemeyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/niemeyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/niemeyer/subscriptions",
            "organizations_url": "https://api.github.com/users/niemeyer/orgs",
            "repos_url": "https://api.github.com/users/niemeyer/repos",
            "events_url": "https://api.github.com/users/niemeyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/niemeyer/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Please drop this line, and rename this file to syscall_windows_test.go. The go tool understands that convention.\n",
        "created_at": "2014-09-17T20:20:48Z",
        "updated_at": "2014-09-17T20:49:25Z",
        "html_url": "https://github.com/go-mgo/mgo/pull/12#discussion_r17691122",
        "pull_request_url": "https://api.github.com/repos/go-mgo/mgo/pulls/12",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/17691122"
            },
            "html": {
                "href": "https://github.com/go-mgo/mgo/pull/12#discussion_r17691122"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/12"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/17691431",
        "pull_request_review_id": null,
        "id": 17691431,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NjkxNDMx",
        "diff_hunk": "@@ -137,6 +139,9 @@ func (s *S) TearDownTest(c *C) {\n \n func (s *S) Stop(host string) {\n \t// Give a moment for slaves to sync and avoid getting rollback issues.\n+\tif runtime.GOOS == \"windows\" {\n+\t\tpanic(\"Stop() currently unsupported on windows!\")",
        "path": "suite_test.go",
        "position": null,
        "original_position": 30,
        "commit_id": "4dead2a72b94b2a61d68b516cb71ad5e0a38f44d",
        "original_commit_id": "74139fe9b326201a9a5bb795068ce06fc0caca66",
        "user": {
            "login": "niemeyer",
            "id": 378683,
            "node_id": "MDQ6VXNlcjM3ODY4Mw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/378683?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/niemeyer",
            "html_url": "https://github.com/niemeyer",
            "followers_url": "https://api.github.com/users/niemeyer/followers",
            "following_url": "https://api.github.com/users/niemeyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/niemeyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/niemeyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/niemeyer/subscriptions",
            "organizations_url": "https://api.github.com/users/niemeyer/orgs",
            "repos_url": "https://api.github.com/users/niemeyer/repos",
            "events_url": "https://api.github.com/users/niemeyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/niemeyer/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Please define this function:\n\n```\nfunc panicOnWindows() {\n        if runtime.GOOS == \"windows\" {\n                panic(\"the test suite is not yet fully supported on Windows\")\n        }\n}\n```\n\nand change all the panics introduced to call it.\n",
        "created_at": "2014-09-17T20:25:53Z",
        "updated_at": "2014-09-17T20:49:25Z",
        "html_url": "https://github.com/go-mgo/mgo/pull/12#discussion_r17691431",
        "pull_request_url": "https://api.github.com/repos/go-mgo/mgo/pulls/12",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/17691431"
            },
            "html": {
                "href": "https://github.com/go-mgo/mgo/pull/12#discussion_r17691431"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/12"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/17693085",
        "pull_request_review_id": null,
        "id": 17693085,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NjkzMDg1",
        "diff_hunk": "@@ -0,0 +1,11 @@\n+// +build windows",
        "path": "syscall_win_test.go",
        "position": null,
        "original_position": 1,
        "commit_id": "4dead2a72b94b2a61d68b516cb71ad5e0a38f44d",
        "original_commit_id": "74139fe9b326201a9a5bb795068ce06fc0caca66",
        "user": {
            "login": "vkarpov15",
            "id": 1620265,
            "node_id": "MDQ6VXNlcjE2MjAyNjU=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/1620265?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/vkarpov15",
            "html_url": "https://github.com/vkarpov15",
            "followers_url": "https://api.github.com/users/vkarpov15/followers",
            "following_url": "https://api.github.com/users/vkarpov15/following{/other_user}",
            "gists_url": "https://api.github.com/users/vkarpov15/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/vkarpov15/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/vkarpov15/subscriptions",
            "organizations_url": "https://api.github.com/users/vkarpov15/orgs",
            "repos_url": "https://api.github.com/users/vkarpov15/repos",
            "events_url": "https://api.github.com/users/vkarpov15/events{/privacy}",
            "received_events_url": "https://api.github.com/users/vkarpov15/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Done\n",
        "created_at": "2014-09-17T20:49:37Z",
        "updated_at": "2014-09-17T20:49:37Z",
        "html_url": "https://github.com/go-mgo/mgo/pull/12#discussion_r17693085",
        "pull_request_url": "https://api.github.com/repos/go-mgo/mgo/pulls/12",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/17693085"
            },
            "html": {
                "href": "https://github.com/go-mgo/mgo/pull/12#discussion_r17693085"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/12"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/17693096",
        "pull_request_review_id": null,
        "id": 17693096,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NjkzMDk2",
        "diff_hunk": "@@ -137,6 +139,9 @@ func (s *S) TearDownTest(c *C) {\n \n func (s *S) Stop(host string) {\n \t// Give a moment for slaves to sync and avoid getting rollback issues.\n+\tif runtime.GOOS == \"windows\" {\n+\t\tpanic(\"Stop() currently unsupported on windows!\")",
        "path": "suite_test.go",
        "position": null,
        "original_position": 30,
        "commit_id": "4dead2a72b94b2a61d68b516cb71ad5e0a38f44d",
        "original_commit_id": "74139fe9b326201a9a5bb795068ce06fc0caca66",
        "user": {
            "login": "vkarpov15",
            "id": 1620265,
            "node_id": "MDQ6VXNlcjE2MjAyNjU=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/1620265?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/vkarpov15",
            "html_url": "https://github.com/vkarpov15",
            "followers_url": "https://api.github.com/users/vkarpov15/followers",
            "following_url": "https://api.github.com/users/vkarpov15/following{/other_user}",
            "gists_url": "https://api.github.com/users/vkarpov15/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/vkarpov15/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/vkarpov15/subscriptions",
            "organizations_url": "https://api.github.com/users/vkarpov15/orgs",
            "repos_url": "https://api.github.com/users/vkarpov15/repos",
            "events_url": "https://api.github.com/users/vkarpov15/events{/privacy}",
            "received_events_url": "https://api.github.com/users/vkarpov15/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Done\n",
        "created_at": "2014-09-17T20:49:44Z",
        "updated_at": "2014-09-17T20:49:44Z",
        "html_url": "https://github.com/go-mgo/mgo/pull/12#discussion_r17693096",
        "pull_request_url": "https://api.github.com/repos/go-mgo/mgo/pulls/12",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/17693096"
            },
            "html": {
                "href": "https://github.com/go-mgo/mgo/pull/12#discussion_r17693096"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/12"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/17130743",
        "pull_request_review_id": null,
        "id": 17130743,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MTMwNzQz",
        "diff_hunk": "@@ -0,0 +1,144 @@\n+// +build windows\n+\n+package sasl\n+\n+//\n+// #include \"sasl_sspi.h\"\n+//\n+import \"C\"\n+\n+import (\n+\t\"fmt\"\n+\t\"strings\"\n+\t\"sync\"\n+\t\"unsafe\"\n+)\n+\n+type saslStepper interface {\n+\tStep(serverData []byte) (clientData []byte, done bool, err error)\n+\tClose()\n+}\n+\n+type saslSession struct {\n+\t// Credentials\n+\tmech          string\n+\tservice       string\n+\thost          string\n+\tuserPlusRealm string\n+\n+\t// Internal state\n+\tauthComplete bool\n+\terrored      bool\n+\tstep         int\n+\n+\t// C internal state\n+\tcredHandle C.CredHandle\n+\tcontext    C.CtxtHandle\n+\thasContext C.int\n+\n+\t// Keep track of pointers we need to explicitly free\n+\tstringsToFree []*C.char\n+\tbuffersToFree []C.PVOID\n+}\n+\n+var initError error\n+var initOnce sync.Once\n+\n+func initSSPI() {\n+\trc := C.load_library()\n+\tif rc != 0 {\n+\t\tinitError = fmt.Errorf(\"Error loading libraries: %v\", rc)\n+\t}\n+}\n+\n+func New(username, password, mechanism, service, host string) (saslStepper, error) {\n+\tinitOnce.Do(initSSPI)\n+\tss := &saslSession{mech: mechanism, hasContext: 0, userPlusRealm: username}\n+\tif service == \"\" {\n+\t\tservice = \"mongodb\"\n+\t}\n+\tif i := strings.Index(host, \":\"); i >= 0 {\n+\t\thost = host[:i]\n+\t}\n+\tss.service = service\n+\tss.host = host\n+\n+\tusernameComponents := strings.Split(username, \"@\")\n+\tif len(usernameComponents) < 2 {\n+\t\treturn nil, fmt.Errorf(\"Username '%v' doesn't contain a realm!\", username)\n+\t}\n+\tuser := usernameComponents[0]\n+\tdomain := usernameComponents[1]\n+\n+\tvar status C.SECURITY_STATUS\n+\t// Step 0: call AcquireCredentialsHandle to get a nice SSPI CredHandle\n+\tif len(password) > 0 {\n+\t\tstatus = C.sspi_acquire_credentials_handle(&ss.credHandle, ss.cstr(user), ss.cstr(password), ss.cstr(domain))\n+\t} else {\n+\t\tstatus = C.sspi_acquire_credentials_handle(&ss.credHandle, ss.cstr(user), nil, ss.cstr(domain))\n+\t}\n+\n+\tif status != C.SEC_E_OK {\n+\t\tss.errored = true\n+\t\treturn nil, fmt.Errorf(\"Couldn't create new SSPI client, error code %v\", status)\n+\t}\n+\n+\treturn ss, nil\n+}\n+\n+func (ss *saslSession) cstr(s string) *C.char {\n+\tcstr := C.CString(s)\n+\tss.stringsToFree = append(ss.stringsToFree, cstr)\n+\treturn cstr\n+}\n+\n+func (ss *saslSession) Close() {\n+\tfor _, cstr := range ss.stringsToFree {\n+\t\tC.free(unsafe.Pointer(cstr))\n+\t}\n+\n+\t// Make sure we've cleaned up all the buffers we malloced when we're sure we don't need em anymore\n+\tif ss.authComplete || ss.errored {",
        "path": "sasl/sasl_sspi.go",
        "position": 101,
        "original_position": 101,
        "commit_id": "5e6a8540220ed4f0a762c5cef1cf3803dbd132bc",
        "original_commit_id": "9bd76be098b9298f29c42c547d0581bb90f4a41d",
        "user": {
            "login": "niemeyer",
            "id": 378683,
            "node_id": "MDQ6VXNlcjM3ODY4Mw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/378683?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/niemeyer",
            "html_url": "https://github.com/niemeyer",
            "followers_url": "https://api.github.com/users/niemeyer/followers",
            "following_url": "https://api.github.com/users/niemeyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/niemeyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/niemeyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/niemeyer/subscriptions",
            "organizations_url": "https://api.github.com/users/niemeyer/orgs",
            "repos_url": "https://api.github.com/users/niemeyer/repos",
            "events_url": "https://api.github.com/users/niemeyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/niemeyer/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "If this is being closed, why would buffers not be freed? Close should mean \"stop doing everything you are doing and free all resources\".\n",
        "created_at": "2014-09-04T17:59:10Z",
        "updated_at": "2014-09-18T14:26:25Z",
        "html_url": "https://github.com/go-mgo/mgo/pull/20#discussion_r17130743",
        "pull_request_url": "https://api.github.com/repos/go-mgo/mgo/pulls/20",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/17130743"
            },
            "html": {
                "href": "https://github.com/go-mgo/mgo/pull/20#discussion_r17130743"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/20"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/17131043",
        "pull_request_review_id": null,
        "id": 17131043,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MTMxMDQz",
        "diff_hunk": "@@ -0,0 +1,244 @@\n+#include \"kerberos_sspi.h\"",
        "path": "sasl/kerberos_sspi.c",
        "position": 2,
        "original_position": 1,
        "commit_id": "5e6a8540220ed4f0a762c5cef1cf3803dbd132bc",
        "original_commit_id": "9bd76be098b9298f29c42c547d0581bb90f4a41d",
        "user": {
            "login": "niemeyer",
            "id": 378683,
            "node_id": "MDQ6VXNlcjM3ODY4Mw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/378683?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/niemeyer",
            "html_url": "https://github.com/niemeyer",
            "followers_url": "https://api.github.com/users/niemeyer/followers",
            "following_url": "https://api.github.com/users/niemeyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/niemeyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/niemeyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/niemeyer/subscriptions",
            "organizations_url": "https://api.github.com/users/niemeyer/orgs",
            "repos_url": "https://api.github.com/users/niemeyer/repos",
            "events_url": "https://api.github.com/users/niemeyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/niemeyer/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "These files need a header. Where did you get the code from? What's the copyright and the license?\n",
        "created_at": "2014-09-04T18:03:28Z",
        "updated_at": "2014-09-18T14:26:25Z",
        "html_url": "https://github.com/go-mgo/mgo/pull/20#discussion_r17131043",
        "pull_request_url": "https://api.github.com/repos/go-mgo/mgo/pulls/20",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/17131043"
            },
            "html": {
                "href": "https://github.com/go-mgo/mgo/pull/20#discussion_r17131043"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/20"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/17131147",
        "pull_request_review_id": null,
        "id": 17131147,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MTMxMTQ3",
        "diff_hunk": "@@ -0,0 +1,244 @@\n+#include \"kerberos_sspi.h\"\n+#include <stdlib.h>\n+#include <stdio.h>\n+\n+static HINSTANCE _sspi_security_dll = NULL; \n+static HINSTANCE _sspi_secur32_dll = NULL;\n+\n+/**\n+ * Encrypt A Message\n+ */\n+SECURITY_STATUS SEC_ENTRY _sspi_EncryptMessage(PCtxtHandle phContext, unsigned long fQOP, PSecBufferDesc pMessage, unsigned long MessageSeqNo) {\n+  // Create function pointer instance\n+  encryptMessage_fn pfn_encryptMessage = NULL;\n+\n+  // Return error if library not loaded\n+  if(_sspi_security_dll == NULL) return -1;\n+\n+  // Map function to library method\n+  pfn_encryptMessage = (encryptMessage_fn)GetProcAddress(_sspi_security_dll, \"EncryptMessage\");\n+  // Check if the we managed to map function pointer\n+  if(!pfn_encryptMessage) {\n+    printf(\"GetProcAddress failed.\\n\");\n+    return -2;\n+  }\n+\n+  // Call the function\n+  return (*pfn_encryptMessage)(phContext, fQOP, pMessage, MessageSeqNo);\n+}\n+\n+/**\n+ * Acquire Credentials\n+ */\n+SECURITY_STATUS SEC_ENTRY _sspi_AcquireCredentialsHandle(\n+  LPSTR pszPrincipal, LPSTR pszPackage, unsigned long fCredentialUse,\n+  void * pvLogonId, void * pAuthData, SEC_GET_KEY_FN pGetKeyFn, void * pvGetKeyArgument,\n+  PCredHandle phCredential, PTimeStamp ptsExpiry\n+) {\n+  SECURITY_STATUS     status;\n+  // Create function pointer instance\n+  acquireCredentialsHandle_fn pfn_acquireCredentialsHandle = NULL;\n+\n+  // Return error if library not loaded\n+  if(_sspi_security_dll == NULL) return -1;\n+\n+  // Map function\n+  #ifdef _UNICODE\n+      pfn_acquireCredentialsHandle = (acquireCredentialsHandle_fn)GetProcAddress(_sspi_security_dll, \"AcquireCredentialsHandleW\");\n+  #else\n+      pfn_acquireCredentialsHandle = (acquireCredentialsHandle_fn)GetProcAddress(_sspi_security_dll, \"AcquireCredentialsHandleA\");\n+  #endif\n+\n+  // Check if the we managed to map function pointer\n+  if(!pfn_acquireCredentialsHandle) {\n+    printf(\"GetProcAddress failed.\\n\");\n+    return 42;\n+  }\n+\n+  // Status\n+  status = (*pfn_acquireCredentialsHandle)(pszPrincipal, pszPackage, fCredentialUse,\n+      pvLogonId, pAuthData, pGetKeyFn, pvGetKeyArgument, phCredential, ptsExpiry\n+    );\n+\n+  // Call the function\n+  return status;\n+}\n+\n+/**\n+ * Delete Security Context\n+ */\n+SECURITY_STATUS SEC_ENTRY _sspi_DeleteSecurityContext(PCtxtHandle phContext) {\n+  // Create function pointer instance\n+  deleteSecurityContext_fn pfn_deleteSecurityContext = NULL;\n+\n+  // Return error if library not loaded\n+  if(_sspi_security_dll == NULL) return -1;\n+  // Map function\n+  pfn_deleteSecurityContext = (deleteSecurityContext_fn)GetProcAddress(_sspi_security_dll, \"DeleteSecurityContext\");\n+\n+  // Check if the we managed to map function pointer\n+  if(!pfn_deleteSecurityContext) {\n+    printf(\"GetProcAddress failed.\\n\");\n+    return -2;\n+  }\n+\n+  // Call the function\n+  return (*pfn_deleteSecurityContext)(phContext);\n+}\n+\n+/**\n+ * Decrypt Message\n+ */\n+SECURITY_STATUS SEC_ENTRY _sspi_DecryptMessage(PCtxtHandle phContext, PSecBufferDesc pMessage, unsigned long MessageSeqNo, unsigned long pfQOP) {",
        "path": "sasl/kerberos_sspi.c",
        "position": null,
        "original_position": 92,
        "commit_id": "5e6a8540220ed4f0a762c5cef1cf3803dbd132bc",
        "original_commit_id": "9bd76be098b9298f29c42c547d0581bb90f4a41d",
        "user": {
            "login": "niemeyer",
            "id": 378683,
            "node_id": "MDQ6VXNlcjM3ODY4Mw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/378683?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/niemeyer",
            "html_url": "https://github.com/niemeyer",
            "followers_url": "https://api.github.com/users/niemeyer/followers",
            "following_url": "https://api.github.com/users/niemeyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/niemeyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/niemeyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/niemeyer/subscriptions",
            "organizations_url": "https://api.github.com/users/niemeyer/orgs",
            "repos_url": "https://api.github.com/users/niemeyer/repos",
            "events_url": "https://api.github.com/users/niemeyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/niemeyer/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Where is this being used?\n",
        "created_at": "2014-09-04T18:05:10Z",
        "updated_at": "2014-09-18T14:26:25Z",
        "html_url": "https://github.com/go-mgo/mgo/pull/20#discussion_r17131147",
        "pull_request_url": "https://api.github.com/repos/go-mgo/mgo/pulls/20",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/17131147"
            },
            "html": {
                "href": "https://github.com/go-mgo/mgo/pull/20#discussion_r17131147"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/20"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/17131154",
        "pull_request_review_id": null,
        "id": 17131154,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MTMxMTU0",
        "diff_hunk": "@@ -0,0 +1,244 @@\n+#include \"kerberos_sspi.h\"\n+#include <stdlib.h>\n+#include <stdio.h>\n+\n+static HINSTANCE _sspi_security_dll = NULL; \n+static HINSTANCE _sspi_secur32_dll = NULL;\n+\n+/**\n+ * Encrypt A Message\n+ */\n+SECURITY_STATUS SEC_ENTRY _sspi_EncryptMessage(PCtxtHandle phContext, unsigned long fQOP, PSecBufferDesc pMessage, unsigned long MessageSeqNo) {\n+  // Create function pointer instance\n+  encryptMessage_fn pfn_encryptMessage = NULL;\n+\n+  // Return error if library not loaded\n+  if(_sspi_security_dll == NULL) return -1;\n+\n+  // Map function to library method\n+  pfn_encryptMessage = (encryptMessage_fn)GetProcAddress(_sspi_security_dll, \"EncryptMessage\");\n+  // Check if the we managed to map function pointer\n+  if(!pfn_encryptMessage) {\n+    printf(\"GetProcAddress failed.\\n\");\n+    return -2;\n+  }\n+\n+  // Call the function\n+  return (*pfn_encryptMessage)(phContext, fQOP, pMessage, MessageSeqNo);\n+}\n+\n+/**\n+ * Acquire Credentials\n+ */\n+SECURITY_STATUS SEC_ENTRY _sspi_AcquireCredentialsHandle(\n+  LPSTR pszPrincipal, LPSTR pszPackage, unsigned long fCredentialUse,\n+  void * pvLogonId, void * pAuthData, SEC_GET_KEY_FN pGetKeyFn, void * pvGetKeyArgument,\n+  PCredHandle phCredential, PTimeStamp ptsExpiry\n+) {\n+  SECURITY_STATUS     status;\n+  // Create function pointer instance\n+  acquireCredentialsHandle_fn pfn_acquireCredentialsHandle = NULL;\n+\n+  // Return error if library not loaded\n+  if(_sspi_security_dll == NULL) return -1;\n+\n+  // Map function\n+  #ifdef _UNICODE\n+      pfn_acquireCredentialsHandle = (acquireCredentialsHandle_fn)GetProcAddress(_sspi_security_dll, \"AcquireCredentialsHandleW\");\n+  #else\n+      pfn_acquireCredentialsHandle = (acquireCredentialsHandle_fn)GetProcAddress(_sspi_security_dll, \"AcquireCredentialsHandleA\");\n+  #endif\n+\n+  // Check if the we managed to map function pointer\n+  if(!pfn_acquireCredentialsHandle) {\n+    printf(\"GetProcAddress failed.\\n\");\n+    return 42;\n+  }\n+\n+  // Status\n+  status = (*pfn_acquireCredentialsHandle)(pszPrincipal, pszPackage, fCredentialUse,\n+      pvLogonId, pAuthData, pGetKeyFn, pvGetKeyArgument, phCredential, ptsExpiry\n+    );\n+\n+  // Call the function\n+  return status;\n+}\n+\n+/**\n+ * Delete Security Context\n+ */\n+SECURITY_STATUS SEC_ENTRY _sspi_DeleteSecurityContext(PCtxtHandle phContext) {\n+  // Create function pointer instance\n+  deleteSecurityContext_fn pfn_deleteSecurityContext = NULL;\n+\n+  // Return error if library not loaded\n+  if(_sspi_security_dll == NULL) return -1;\n+  // Map function\n+  pfn_deleteSecurityContext = (deleteSecurityContext_fn)GetProcAddress(_sspi_security_dll, \"DeleteSecurityContext\");\n+\n+  // Check if the we managed to map function pointer\n+  if(!pfn_deleteSecurityContext) {\n+    printf(\"GetProcAddress failed.\\n\");\n+    return -2;\n+  }\n+\n+  // Call the function\n+  return (*pfn_deleteSecurityContext)(phContext);\n+}\n+\n+/**\n+ * Decrypt Message\n+ */\n+SECURITY_STATUS SEC_ENTRY _sspi_DecryptMessage(PCtxtHandle phContext, PSecBufferDesc pMessage, unsigned long MessageSeqNo, unsigned long pfQOP) {\n+  // Create function pointer instance\n+  decryptMessage_fn pfn_decryptMessage = NULL;\n+\n+  // Return error if library not loaded\n+  if(_sspi_security_dll == NULL) return -1;\n+  // Map function\n+  pfn_decryptMessage = (decryptMessage_fn)GetProcAddress(_sspi_security_dll, \"DecryptMessage\");\n+\n+  // Check if the we managed to map function pointer\n+  if(!pfn_decryptMessage) {\n+    printf(\"GetProcAddress failed.\\n\");",
        "path": "sasl/kerberos_sspi.c",
        "position": null,
        "original_position": 103,
        "commit_id": "5e6a8540220ed4f0a762c5cef1cf3803dbd132bc",
        "original_commit_id": "9bd76be098b9298f29c42c547d0581bb90f4a41d",
        "user": {
            "login": "niemeyer",
            "id": 378683,
            "node_id": "MDQ6VXNlcjM3ODY4Mw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/378683?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/niemeyer",
            "html_url": "https://github.com/niemeyer",
            "followers_url": "https://api.github.com/users/niemeyer/followers",
            "following_url": "https://api.github.com/users/niemeyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/niemeyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/niemeyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/niemeyer/subscriptions",
            "organizations_url": "https://api.github.com/users/niemeyer/orgs",
            "repos_url": "https://api.github.com/users/niemeyer/repos",
            "events_url": "https://api.github.com/users/niemeyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/niemeyer/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "That's not a good way to convey an error. GetProcAddr of what, from which library, and definitely not to stdout.\n",
        "created_at": "2014-09-04T18:05:16Z",
        "updated_at": "2014-09-18T14:26:25Z",
        "html_url": "https://github.com/go-mgo/mgo/pull/20#discussion_r17131154",
        "pull_request_url": "https://api.github.com/repos/go-mgo/mgo/pulls/20",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/17131154"
            },
            "html": {
                "href": "https://github.com/go-mgo/mgo/pull/20#discussion_r17131154"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/20"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/17131182",
        "pull_request_review_id": null,
        "id": 17131182,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MTMxMTgy",
        "diff_hunk": "@@ -0,0 +1,244 @@\n+#include \"kerberos_sspi.h\"\n+#include <stdlib.h>\n+#include <stdio.h>\n+\n+static HINSTANCE _sspi_security_dll = NULL; \n+static HINSTANCE _sspi_secur32_dll = NULL;\n+\n+/**\n+ * Encrypt A Message\n+ */\n+SECURITY_STATUS SEC_ENTRY _sspi_EncryptMessage(PCtxtHandle phContext, unsigned long fQOP, PSecBufferDesc pMessage, unsigned long MessageSeqNo) {\n+  // Create function pointer instance\n+  encryptMessage_fn pfn_encryptMessage = NULL;\n+\n+  // Return error if library not loaded\n+  if(_sspi_security_dll == NULL) return -1;\n+\n+  // Map function to library method\n+  pfn_encryptMessage = (encryptMessage_fn)GetProcAddress(_sspi_security_dll, \"EncryptMessage\");\n+  // Check if the we managed to map function pointer\n+  if(!pfn_encryptMessage) {\n+    printf(\"GetProcAddress failed.\\n\");\n+    return -2;\n+  }\n+\n+  // Call the function\n+  return (*pfn_encryptMessage)(phContext, fQOP, pMessage, MessageSeqNo);\n+}\n+\n+/**\n+ * Acquire Credentials\n+ */\n+SECURITY_STATUS SEC_ENTRY _sspi_AcquireCredentialsHandle(\n+  LPSTR pszPrincipal, LPSTR pszPackage, unsigned long fCredentialUse,\n+  void * pvLogonId, void * pAuthData, SEC_GET_KEY_FN pGetKeyFn, void * pvGetKeyArgument,\n+  PCredHandle phCredential, PTimeStamp ptsExpiry\n+) {\n+  SECURITY_STATUS     status;\n+  // Create function pointer instance\n+  acquireCredentialsHandle_fn pfn_acquireCredentialsHandle = NULL;\n+\n+  // Return error if library not loaded\n+  if(_sspi_security_dll == NULL) return -1;\n+\n+  // Map function\n+  #ifdef _UNICODE\n+      pfn_acquireCredentialsHandle = (acquireCredentialsHandle_fn)GetProcAddress(_sspi_security_dll, \"AcquireCredentialsHandleW\");\n+  #else\n+      pfn_acquireCredentialsHandle = (acquireCredentialsHandle_fn)GetProcAddress(_sspi_security_dll, \"AcquireCredentialsHandleA\");\n+  #endif\n+\n+  // Check if the we managed to map function pointer\n+  if(!pfn_acquireCredentialsHandle) {\n+    printf(\"GetProcAddress failed.\\n\");\n+    return 42;\n+  }\n+\n+  // Status\n+  status = (*pfn_acquireCredentialsHandle)(pszPrincipal, pszPackage, fCredentialUse,\n+      pvLogonId, pAuthData, pGetKeyFn, pvGetKeyArgument, phCredential, ptsExpiry\n+    );\n+\n+  // Call the function\n+  return status;\n+}\n+\n+/**\n+ * Delete Security Context\n+ */\n+SECURITY_STATUS SEC_ENTRY _sspi_DeleteSecurityContext(PCtxtHandle phContext) {\n+  // Create function pointer instance\n+  deleteSecurityContext_fn pfn_deleteSecurityContext = NULL;\n+\n+  // Return error if library not loaded\n+  if(_sspi_security_dll == NULL) return -1;\n+  // Map function\n+  pfn_deleteSecurityContext = (deleteSecurityContext_fn)GetProcAddress(_sspi_security_dll, \"DeleteSecurityContext\");\n+\n+  // Check if the we managed to map function pointer\n+  if(!pfn_deleteSecurityContext) {\n+    printf(\"GetProcAddress failed.\\n\");",
        "path": "sasl/kerberos_sspi.c",
        "position": null,
        "original_position": 81,
        "commit_id": "5e6a8540220ed4f0a762c5cef1cf3803dbd132bc",
        "original_commit_id": "9bd76be098b9298f29c42c547d0581bb90f4a41d",
        "user": {
            "login": "niemeyer",
            "id": 378683,
            "node_id": "MDQ6VXNlcjM3ODY4Mw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/378683?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/niemeyer",
            "html_url": "https://github.com/niemeyer",
            "followers_url": "https://api.github.com/users/niemeyer/followers",
            "following_url": "https://api.github.com/users/niemeyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/niemeyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/niemeyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/niemeyer/subscriptions",
            "organizations_url": "https://api.github.com/users/niemeyer/orgs",
            "repos_url": "https://api.github.com/users/niemeyer/repos",
            "events_url": "https://api.github.com/users/niemeyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/niemeyer/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "That's not a good way to convey an error. GetProcAddr of what, from which library, and definitely not to stdout.\n",
        "created_at": "2014-09-04T18:05:35Z",
        "updated_at": "2014-09-18T14:26:25Z",
        "html_url": "https://github.com/go-mgo/mgo/pull/20#discussion_r17131182",
        "pull_request_url": "https://api.github.com/repos/go-mgo/mgo/pulls/20",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/17131182"
            },
            "html": {
                "href": "https://github.com/go-mgo/mgo/pull/20#discussion_r17131182"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/20"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/17131205",
        "pull_request_review_id": null,
        "id": 17131205,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MTMxMjA1",
        "diff_hunk": "@@ -0,0 +1,244 @@\n+#include \"kerberos_sspi.h\"\n+#include <stdlib.h>\n+#include <stdio.h>\n+\n+static HINSTANCE _sspi_security_dll = NULL; \n+static HINSTANCE _sspi_secur32_dll = NULL;\n+\n+/**\n+ * Encrypt A Message\n+ */\n+SECURITY_STATUS SEC_ENTRY _sspi_EncryptMessage(PCtxtHandle phContext, unsigned long fQOP, PSecBufferDesc pMessage, unsigned long MessageSeqNo) {\n+  // Create function pointer instance\n+  encryptMessage_fn pfn_encryptMessage = NULL;\n+\n+  // Return error if library not loaded\n+  if(_sspi_security_dll == NULL) return -1;\n+\n+  // Map function to library method\n+  pfn_encryptMessage = (encryptMessage_fn)GetProcAddress(_sspi_security_dll, \"EncryptMessage\");\n+  // Check if the we managed to map function pointer\n+  if(!pfn_encryptMessage) {\n+    printf(\"GetProcAddress failed.\\n\");\n+    return -2;\n+  }\n+\n+  // Call the function\n+  return (*pfn_encryptMessage)(phContext, fQOP, pMessage, MessageSeqNo);\n+}\n+\n+/**\n+ * Acquire Credentials\n+ */\n+SECURITY_STATUS SEC_ENTRY _sspi_AcquireCredentialsHandle(\n+  LPSTR pszPrincipal, LPSTR pszPackage, unsigned long fCredentialUse,\n+  void * pvLogonId, void * pAuthData, SEC_GET_KEY_FN pGetKeyFn, void * pvGetKeyArgument,\n+  PCredHandle phCredential, PTimeStamp ptsExpiry\n+) {\n+  SECURITY_STATUS     status;\n+  // Create function pointer instance\n+  acquireCredentialsHandle_fn pfn_acquireCredentialsHandle = NULL;\n+\n+  // Return error if library not loaded\n+  if(_sspi_security_dll == NULL) return -1;\n+\n+  // Map function\n+  #ifdef _UNICODE\n+      pfn_acquireCredentialsHandle = (acquireCredentialsHandle_fn)GetProcAddress(_sspi_security_dll, \"AcquireCredentialsHandleW\");\n+  #else\n+      pfn_acquireCredentialsHandle = (acquireCredentialsHandle_fn)GetProcAddress(_sspi_security_dll, \"AcquireCredentialsHandleA\");\n+  #endif\n+\n+  // Check if the we managed to map function pointer\n+  if(!pfn_acquireCredentialsHandle) {\n+    printf(\"GetProcAddress failed.\\n\");\n+    return 42;\n+  }\n+\n+  // Status\n+  status = (*pfn_acquireCredentialsHandle)(pszPrincipal, pszPackage, fCredentialUse,\n+      pvLogonId, pAuthData, pGetKeyFn, pvGetKeyArgument, phCredential, ptsExpiry\n+    );\n+\n+  // Call the function\n+  return status;\n+}\n+\n+/**\n+ * Delete Security Context\n+ */\n+SECURITY_STATUS SEC_ENTRY _sspi_DeleteSecurityContext(PCtxtHandle phContext) {",
        "path": "sasl/kerberos_sspi.c",
        "position": null,
        "original_position": 70,
        "commit_id": "5e6a8540220ed4f0a762c5cef1cf3803dbd132bc",
        "original_commit_id": "9bd76be098b9298f29c42c547d0581bb90f4a41d",
        "user": {
            "login": "niemeyer",
            "id": 378683,
            "node_id": "MDQ6VXNlcjM3ODY4Mw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/378683?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/niemeyer",
            "html_url": "https://github.com/niemeyer",
            "followers_url": "https://api.github.com/users/niemeyer/followers",
            "following_url": "https://api.github.com/users/niemeyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/niemeyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/niemeyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/niemeyer/subscriptions",
            "organizations_url": "https://api.github.com/users/niemeyer/orgs",
            "repos_url": "https://api.github.com/users/niemeyer/repos",
            "events_url": "https://api.github.com/users/niemeyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/niemeyer/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Where is this being used?\n",
        "created_at": "2014-09-04T18:05:54Z",
        "updated_at": "2014-09-18T14:26:25Z",
        "html_url": "https://github.com/go-mgo/mgo/pull/20#discussion_r17131205",
        "pull_request_url": "https://api.github.com/repos/go-mgo/mgo/pulls/20",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/17131205"
            },
            "html": {
                "href": "https://github.com/go-mgo/mgo/pull/20#discussion_r17131205"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/20"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/17131228",
        "pull_request_review_id": null,
        "id": 17131228,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MTMxMjI4",
        "diff_hunk": "@@ -0,0 +1,244 @@\n+#include \"kerberos_sspi.h\"\n+#include <stdlib.h>\n+#include <stdio.h>\n+\n+static HINSTANCE _sspi_security_dll = NULL; \n+static HINSTANCE _sspi_secur32_dll = NULL;\n+\n+/**\n+ * Encrypt A Message\n+ */\n+SECURITY_STATUS SEC_ENTRY _sspi_EncryptMessage(PCtxtHandle phContext, unsigned long fQOP, PSecBufferDesc pMessage, unsigned long MessageSeqNo) {\n+  // Create function pointer instance\n+  encryptMessage_fn pfn_encryptMessage = NULL;\n+\n+  // Return error if library not loaded\n+  if(_sspi_security_dll == NULL) return -1;\n+\n+  // Map function to library method\n+  pfn_encryptMessage = (encryptMessage_fn)GetProcAddress(_sspi_security_dll, \"EncryptMessage\");\n+  // Check if the we managed to map function pointer\n+  if(!pfn_encryptMessage) {\n+    printf(\"GetProcAddress failed.\\n\");\n+    return -2;\n+  }\n+\n+  // Call the function\n+  return (*pfn_encryptMessage)(phContext, fQOP, pMessage, MessageSeqNo);\n+}\n+\n+/**\n+ * Acquire Credentials\n+ */\n+SECURITY_STATUS SEC_ENTRY _sspi_AcquireCredentialsHandle(\n+  LPSTR pszPrincipal, LPSTR pszPackage, unsigned long fCredentialUse,\n+  void * pvLogonId, void * pAuthData, SEC_GET_KEY_FN pGetKeyFn, void * pvGetKeyArgument,\n+  PCredHandle phCredential, PTimeStamp ptsExpiry\n+) {\n+  SECURITY_STATUS     status;\n+  // Create function pointer instance\n+  acquireCredentialsHandle_fn pfn_acquireCredentialsHandle = NULL;\n+\n+  // Return error if library not loaded\n+  if(_sspi_security_dll == NULL) return -1;\n+\n+  // Map function\n+  #ifdef _UNICODE\n+      pfn_acquireCredentialsHandle = (acquireCredentialsHandle_fn)GetProcAddress(_sspi_security_dll, \"AcquireCredentialsHandleW\");\n+  #else\n+      pfn_acquireCredentialsHandle = (acquireCredentialsHandle_fn)GetProcAddress(_sspi_security_dll, \"AcquireCredentialsHandleA\");\n+  #endif\n+\n+  // Check if the we managed to map function pointer\n+  if(!pfn_acquireCredentialsHandle) {\n+    printf(\"GetProcAddress failed.\\n\");",
        "path": "sasl/kerberos_sspi.c",
        "position": null,
        "original_position": 54,
        "commit_id": "5e6a8540220ed4f0a762c5cef1cf3803dbd132bc",
        "original_commit_id": "9bd76be098b9298f29c42c547d0581bb90f4a41d",
        "user": {
            "login": "niemeyer",
            "id": 378683,
            "node_id": "MDQ6VXNlcjM3ODY4Mw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/378683?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/niemeyer",
            "html_url": "https://github.com/niemeyer",
            "followers_url": "https://api.github.com/users/niemeyer/followers",
            "following_url": "https://api.github.com/users/niemeyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/niemeyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/niemeyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/niemeyer/subscriptions",
            "organizations_url": "https://api.github.com/users/niemeyer/orgs",
            "repos_url": "https://api.github.com/users/niemeyer/repos",
            "events_url": "https://api.github.com/users/niemeyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/niemeyer/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "That's not a good way to convey an error. GetProcAddr of what, from which library, and definitely not to stdout.\n",
        "created_at": "2014-09-04T18:06:15Z",
        "updated_at": "2014-09-18T14:26:25Z",
        "html_url": "https://github.com/go-mgo/mgo/pull/20#discussion_r17131228",
        "pull_request_url": "https://api.github.com/repos/go-mgo/mgo/pulls/20",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/17131228"
            },
            "html": {
                "href": "https://github.com/go-mgo/mgo/pull/20#discussion_r17131228"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/20"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/17131244",
        "pull_request_review_id": null,
        "id": 17131244,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MTMxMjQ0",
        "diff_hunk": "@@ -0,0 +1,244 @@\n+#include \"kerberos_sspi.h\"\n+#include <stdlib.h>\n+#include <stdio.h>\n+\n+static HINSTANCE _sspi_security_dll = NULL; \n+static HINSTANCE _sspi_secur32_dll = NULL;\n+\n+/**\n+ * Encrypt A Message\n+ */\n+SECURITY_STATUS SEC_ENTRY _sspi_EncryptMessage(PCtxtHandle phContext, unsigned long fQOP, PSecBufferDesc pMessage, unsigned long MessageSeqNo) {\n+  // Create function pointer instance\n+  encryptMessage_fn pfn_encryptMessage = NULL;\n+\n+  // Return error if library not loaded\n+  if(_sspi_security_dll == NULL) return -1;\n+\n+  // Map function to library method\n+  pfn_encryptMessage = (encryptMessage_fn)GetProcAddress(_sspi_security_dll, \"EncryptMessage\");\n+  // Check if the we managed to map function pointer\n+  if(!pfn_encryptMessage) {\n+    printf(\"GetProcAddress failed.\\n\");",
        "path": "sasl/kerberos_sspi.c",
        "position": null,
        "original_position": 22,
        "commit_id": "5e6a8540220ed4f0a762c5cef1cf3803dbd132bc",
        "original_commit_id": "9bd76be098b9298f29c42c547d0581bb90f4a41d",
        "user": {
            "login": "niemeyer",
            "id": 378683,
            "node_id": "MDQ6VXNlcjM3ODY4Mw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/378683?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/niemeyer",
            "html_url": "https://github.com/niemeyer",
            "followers_url": "https://api.github.com/users/niemeyer/followers",
            "following_url": "https://api.github.com/users/niemeyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/niemeyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/niemeyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/niemeyer/subscriptions",
            "organizations_url": "https://api.github.com/users/niemeyer/orgs",
            "repos_url": "https://api.github.com/users/niemeyer/repos",
            "events_url": "https://api.github.com/users/niemeyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/niemeyer/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "That's not a good way to convey an error. GetProcAddr of what, from which library, and definitely not to stdout.\n",
        "created_at": "2014-09-04T18:06:30Z",
        "updated_at": "2014-09-18T14:26:25Z",
        "html_url": "https://github.com/go-mgo/mgo/pull/20#discussion_r17131244",
        "pull_request_url": "https://api.github.com/repos/go-mgo/mgo/pulls/20",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/17131244"
            },
            "html": {
                "href": "https://github.com/go-mgo/mgo/pull/20#discussion_r17131244"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/20"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/17131428",
        "pull_request_review_id": null,
        "id": 17131428,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MTMxNDI4",
        "diff_hunk": "@@ -0,0 +1,244 @@\n+#include \"kerberos_sspi.h\"\n+#include <stdlib.h>\n+#include <stdio.h>\n+\n+static HINSTANCE _sspi_security_dll = NULL; \n+static HINSTANCE _sspi_secur32_dll = NULL;\n+\n+/**\n+ * Encrypt A Message\n+ */\n+SECURITY_STATUS SEC_ENTRY _sspi_EncryptMessage(PCtxtHandle phContext, unsigned long fQOP, PSecBufferDesc pMessage, unsigned long MessageSeqNo) {\n+  // Create function pointer instance\n+  encryptMessage_fn pfn_encryptMessage = NULL;",
        "path": "sasl/kerberos_sspi.c",
        "position": null,
        "original_position": 13,
        "commit_id": "5e6a8540220ed4f0a762c5cef1cf3803dbd132bc",
        "original_commit_id": "9bd76be098b9298f29c42c547d0581bb90f4a41d",
        "user": {
            "login": "niemeyer",
            "id": 378683,
            "node_id": "MDQ6VXNlcjM3ODY4Mw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/378683?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/niemeyer",
            "html_url": "https://github.com/niemeyer",
            "followers_url": "https://api.github.com/users/niemeyer/followers",
            "following_url": "https://api.github.com/users/niemeyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/niemeyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/niemeyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/niemeyer/subscriptions",
            "organizations_url": "https://api.github.com/users/niemeyer/orgs",
            "repos_url": "https://api.github.com/users/niemeyer/repos",
            "events_url": "https://api.github.com/users/niemeyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/niemeyer/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Can we please use the code style (indentation, comment format, etc) as the rest of the code in this package?\n",
        "created_at": "2014-09-04T18:09:20Z",
        "updated_at": "2014-09-18T14:26:25Z",
        "html_url": "https://github.com/go-mgo/mgo/pull/20#discussion_r17131428",
        "pull_request_url": "https://api.github.com/repos/go-mgo/mgo/pulls/20",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/17131428"
            },
            "html": {
                "href": "https://github.com/go-mgo/mgo/pull/20#discussion_r17131428"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/20"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/17131451",
        "pull_request_review_id": null,
        "id": 17131451,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MTMxNDUx",
        "diff_hunk": "@@ -0,0 +1,244 @@\n+#include \"kerberos_sspi.h\"\n+#include <stdlib.h>\n+#include <stdio.h>\n+\n+static HINSTANCE _sspi_security_dll = NULL; \n+static HINSTANCE _sspi_secur32_dll = NULL;\n+\n+/**\n+ * Encrypt A Message\n+ */\n+SECURITY_STATUS SEC_ENTRY _sspi_EncryptMessage(PCtxtHandle phContext, unsigned long fQOP, PSecBufferDesc pMessage, unsigned long MessageSeqNo) {\n+  // Create function pointer instance\n+  encryptMessage_fn pfn_encryptMessage = NULL;\n+\n+  // Return error if library not loaded\n+  if(_sspi_security_dll == NULL) return -1;\n+\n+  // Map function to library method\n+  pfn_encryptMessage = (encryptMessage_fn)GetProcAddress(_sspi_security_dll, \"EncryptMessage\");\n+  // Check if the we managed to map function pointer\n+  if(!pfn_encryptMessage) {\n+    printf(\"GetProcAddress failed.\\n\");\n+    return -2;\n+  }\n+\n+  // Call the function\n+  return (*pfn_encryptMessage)(phContext, fQOP, pMessage, MessageSeqNo);\n+}\n+\n+/**\n+ * Acquire Credentials\n+ */\n+SECURITY_STATUS SEC_ENTRY _sspi_AcquireCredentialsHandle(\n+  LPSTR pszPrincipal, LPSTR pszPackage, unsigned long fCredentialUse,\n+  void * pvLogonId, void * pAuthData, SEC_GET_KEY_FN pGetKeyFn, void * pvGetKeyArgument,\n+  PCredHandle phCredential, PTimeStamp ptsExpiry\n+) {\n+  SECURITY_STATUS     status;\n+  // Create function pointer instance\n+  acquireCredentialsHandle_fn pfn_acquireCredentialsHandle = NULL;\n+\n+  // Return error if library not loaded\n+  if(_sspi_security_dll == NULL) return -1;\n+\n+  // Map function\n+  #ifdef _UNICODE\n+      pfn_acquireCredentialsHandle = (acquireCredentialsHandle_fn)GetProcAddress(_sspi_security_dll, \"AcquireCredentialsHandleW\");\n+  #else\n+      pfn_acquireCredentialsHandle = (acquireCredentialsHandle_fn)GetProcAddress(_sspi_security_dll, \"AcquireCredentialsHandleA\");\n+  #endif\n+\n+  // Check if the we managed to map function pointer\n+  if(!pfn_acquireCredentialsHandle) {\n+    printf(\"GetProcAddress failed.\\n\");\n+    return 42;\n+  }\n+\n+  // Status\n+  status = (*pfn_acquireCredentialsHandle)(pszPrincipal, pszPackage, fCredentialUse,\n+      pvLogonId, pAuthData, pGetKeyFn, pvGetKeyArgument, phCredential, ptsExpiry\n+    );\n+\n+  // Call the function\n+  return status;\n+}\n+\n+/**\n+ * Delete Security Context\n+ */\n+SECURITY_STATUS SEC_ENTRY _sspi_DeleteSecurityContext(PCtxtHandle phContext) {\n+  // Create function pointer instance\n+  deleteSecurityContext_fn pfn_deleteSecurityContext = NULL;\n+\n+  // Return error if library not loaded\n+  if(_sspi_security_dll == NULL) return -1;\n+  // Map function\n+  pfn_deleteSecurityContext = (deleteSecurityContext_fn)GetProcAddress(_sspi_security_dll, \"DeleteSecurityContext\");\n+\n+  // Check if the we managed to map function pointer\n+  if(!pfn_deleteSecurityContext) {\n+    printf(\"GetProcAddress failed.\\n\");\n+    return -2;\n+  }\n+\n+  // Call the function\n+  return (*pfn_deleteSecurityContext)(phContext);\n+}\n+\n+/**\n+ * Decrypt Message\n+ */\n+SECURITY_STATUS SEC_ENTRY _sspi_DecryptMessage(PCtxtHandle phContext, PSecBufferDesc pMessage, unsigned long MessageSeqNo, unsigned long pfQOP) {\n+  // Create function pointer instance\n+  decryptMessage_fn pfn_decryptMessage = NULL;\n+\n+  // Return error if library not loaded\n+  if(_sspi_security_dll == NULL) return -1;\n+  // Map function\n+  pfn_decryptMessage = (decryptMessage_fn)GetProcAddress(_sspi_security_dll, \"DecryptMessage\");\n+\n+  // Check if the we managed to map function pointer\n+  if(!pfn_decryptMessage) {\n+    printf(\"GetProcAddress failed.\\n\");\n+    return -2;\n+  }\n+\n+  // Call the function\n+  return (*pfn_decryptMessage)(phContext, pMessage, MessageSeqNo, pfQOP);\n+}\n+\n+/**\n+ * Initialize Security Context\n+ */\n+SECURITY_STATUS SEC_ENTRY _sspi_initializeSecurityContext(\n+  PCredHandle phCredential, PCtxtHandle phContext,\n+  LPSTR pszTargetName, unsigned long fContextReq, \n+  unsigned long Reserved1, unsigned long TargetDataRep, \n+  PSecBufferDesc pInput, unsigned long Reserved2,\n+  PCtxtHandle phNewContext, PSecBufferDesc pOutput,\n+  unsigned long * pfContextAttr, PTimeStamp ptsExpiry\n+) {\n+  SECURITY_STATUS status;\n+  // Create function pointer instance\n+  initializeSecurityContext_fn pfn_initializeSecurityContext = NULL;\n+\n+  // Return error if library not loaded\n+  if(_sspi_security_dll == NULL) return -1;\n+  \n+  // Map function\n+  #ifdef _UNICODE\n+    pfn_initializeSecurityContext = (initializeSecurityContext_fn)GetProcAddress(_sspi_security_dll, \"InitializeSecurityContextW\");\n+  #else\n+    pfn_initializeSecurityContext = (initializeSecurityContext_fn)GetProcAddress(_sspi_security_dll, \"InitializeSecurityContextA\");\n+  #endif\n+\n+  // Check if the we managed to map function pointer\n+  if(!pfn_initializeSecurityContext) {\n+    printf(\"GetProcAddress failed.\\n\");\n+    return -2;\n+  }\n+\n+  // Execute intialize context\n+  status = (*pfn_initializeSecurityContext)(\n+    phCredential, phContext, pszTargetName, fContextReq, \n+    Reserved1, TargetDataRep, pInput, Reserved2,\n+    phNewContext, pOutput, pfContextAttr, ptsExpiry\n+  );\n+\n+  // Call the function\n+  return status;\n+}\n+/**\n+ * Query Context Attributes\n+ */\n+SECURITY_STATUS SEC_ENTRY _sspi_QueryContextAttributes(\n+  PCtxtHandle phContext, unsigned long ulAttribute, void * pBuffer\n+) {\n+  // Create function pointer instance\n+  queryContextAttributes_fn pfn_queryContextAttributes = NULL;\n+\n+  // Return error if library not loaded\n+  if(_sspi_security_dll == NULL) return 22;\n+\n+  #ifdef _UNICODE\n+    pfn_queryContextAttributes = (queryContextAttributes_fn)GetProcAddress(_sspi_security_dll, \"QueryContextAttributesW\");\n+  #else\n+    pfn_queryContextAttributes = (queryContextAttributes_fn)GetProcAddress(_sspi_security_dll, \"QueryContextAttributesA\");\n+  #endif\n+\n+  // Check if the we managed to map function pointer\n+  if(!pfn_queryContextAttributes) {\n+    printf(\"GetProcAddress failed.\\n\");\n+    return 42;\n+  }\n+\n+  // Call the function\n+  return (*pfn_queryContextAttributes)(\n+    phContext, ulAttribute, pBuffer",
        "path": "sasl/kerberos_sspi.c",
        "position": null,
        "original_position": 178,
        "commit_id": "5e6a8540220ed4f0a762c5cef1cf3803dbd132bc",
        "original_commit_id": "9bd76be098b9298f29c42c547d0581bb90f4a41d",
        "user": {
            "login": "niemeyer",
            "id": 378683,
            "node_id": "MDQ6VXNlcjM3ODY4Mw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/378683?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/niemeyer",
            "html_url": "https://github.com/niemeyer",
            "followers_url": "https://api.github.com/users/niemeyer/followers",
            "following_url": "https://api.github.com/users/niemeyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/niemeyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/niemeyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/niemeyer/subscriptions",
            "organizations_url": "https://api.github.com/users/niemeyer/orgs",
            "repos_url": "https://api.github.com/users/niemeyer/repos",
            "events_url": "https://api.github.com/users/niemeyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/niemeyer/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "We can have it all in a single line.\n",
        "created_at": "2014-09-04T18:09:41Z",
        "updated_at": "2014-09-18T14:26:25Z",
        "html_url": "https://github.com/go-mgo/mgo/pull/20#discussion_r17131451",
        "pull_request_url": "https://api.github.com/repos/go-mgo/mgo/pulls/20",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/17131451"
            },
            "html": {
                "href": "https://github.com/go-mgo/mgo/pull/20#discussion_r17131451"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/20"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/17131486",
        "pull_request_review_id": null,
        "id": 17131486,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MTMxNDg2",
        "diff_hunk": "@@ -0,0 +1,244 @@\n+#include \"kerberos_sspi.h\"\n+#include <stdlib.h>\n+#include <stdio.h>\n+\n+static HINSTANCE _sspi_security_dll = NULL; \n+static HINSTANCE _sspi_secur32_dll = NULL;\n+\n+/**\n+ * Encrypt A Message\n+ */\n+SECURITY_STATUS SEC_ENTRY _sspi_EncryptMessage(PCtxtHandle phContext, unsigned long fQOP, PSecBufferDesc pMessage, unsigned long MessageSeqNo) {\n+  // Create function pointer instance\n+  encryptMessage_fn pfn_encryptMessage = NULL;\n+\n+  // Return error if library not loaded\n+  if(_sspi_security_dll == NULL) return -1;\n+\n+  // Map function to library method\n+  pfn_encryptMessage = (encryptMessage_fn)GetProcAddress(_sspi_security_dll, \"EncryptMessage\");\n+  // Check if the we managed to map function pointer\n+  if(!pfn_encryptMessage) {\n+    printf(\"GetProcAddress failed.\\n\");\n+    return -2;\n+  }\n+\n+  // Call the function\n+  return (*pfn_encryptMessage)(phContext, fQOP, pMessage, MessageSeqNo);\n+}\n+\n+/**\n+ * Acquire Credentials\n+ */\n+SECURITY_STATUS SEC_ENTRY _sspi_AcquireCredentialsHandle(\n+  LPSTR pszPrincipal, LPSTR pszPackage, unsigned long fCredentialUse,\n+  void * pvLogonId, void * pAuthData, SEC_GET_KEY_FN pGetKeyFn, void * pvGetKeyArgument,\n+  PCredHandle phCredential, PTimeStamp ptsExpiry\n+) {\n+  SECURITY_STATUS     status;\n+  // Create function pointer instance\n+  acquireCredentialsHandle_fn pfn_acquireCredentialsHandle = NULL;\n+\n+  // Return error if library not loaded\n+  if(_sspi_security_dll == NULL) return -1;\n+\n+  // Map function\n+  #ifdef _UNICODE\n+      pfn_acquireCredentialsHandle = (acquireCredentialsHandle_fn)GetProcAddress(_sspi_security_dll, \"AcquireCredentialsHandleW\");\n+  #else\n+      pfn_acquireCredentialsHandle = (acquireCredentialsHandle_fn)GetProcAddress(_sspi_security_dll, \"AcquireCredentialsHandleA\");\n+  #endif\n+\n+  // Check if the we managed to map function pointer\n+  if(!pfn_acquireCredentialsHandle) {\n+    printf(\"GetProcAddress failed.\\n\");\n+    return 42;\n+  }\n+\n+  // Status\n+  status = (*pfn_acquireCredentialsHandle)(pszPrincipal, pszPackage, fCredentialUse,\n+      pvLogonId, pAuthData, pGetKeyFn, pvGetKeyArgument, phCredential, ptsExpiry\n+    );\n+\n+  // Call the function\n+  return status;\n+}\n+\n+/**\n+ * Delete Security Context\n+ */\n+SECURITY_STATUS SEC_ENTRY _sspi_DeleteSecurityContext(PCtxtHandle phContext) {\n+  // Create function pointer instance\n+  deleteSecurityContext_fn pfn_deleteSecurityContext = NULL;\n+\n+  // Return error if library not loaded\n+  if(_sspi_security_dll == NULL) return -1;\n+  // Map function\n+  pfn_deleteSecurityContext = (deleteSecurityContext_fn)GetProcAddress(_sspi_security_dll, \"DeleteSecurityContext\");\n+\n+  // Check if the we managed to map function pointer\n+  if(!pfn_deleteSecurityContext) {\n+    printf(\"GetProcAddress failed.\\n\");\n+    return -2;\n+  }\n+\n+  // Call the function\n+  return (*pfn_deleteSecurityContext)(phContext);\n+}\n+\n+/**\n+ * Decrypt Message\n+ */\n+SECURITY_STATUS SEC_ENTRY _sspi_DecryptMessage(PCtxtHandle phContext, PSecBufferDesc pMessage, unsigned long MessageSeqNo, unsigned long pfQOP) {\n+  // Create function pointer instance\n+  decryptMessage_fn pfn_decryptMessage = NULL;\n+\n+  // Return error if library not loaded\n+  if(_sspi_security_dll == NULL) return -1;\n+  // Map function\n+  pfn_decryptMessage = (decryptMessage_fn)GetProcAddress(_sspi_security_dll, \"DecryptMessage\");\n+\n+  // Check if the we managed to map function pointer\n+  if(!pfn_decryptMessage) {\n+    printf(\"GetProcAddress failed.\\n\");\n+    return -2;\n+  }\n+\n+  // Call the function\n+  return (*pfn_decryptMessage)(phContext, pMessage, MessageSeqNo, pfQOP);\n+}\n+\n+/**\n+ * Initialize Security Context\n+ */\n+SECURITY_STATUS SEC_ENTRY _sspi_initializeSecurityContext(\n+  PCredHandle phCredential, PCtxtHandle phContext,\n+  LPSTR pszTargetName, unsigned long fContextReq, \n+  unsigned long Reserved1, unsigned long TargetDataRep, \n+  PSecBufferDesc pInput, unsigned long Reserved2,\n+  PCtxtHandle phNewContext, PSecBufferDesc pOutput,\n+  unsigned long * pfContextAttr, PTimeStamp ptsExpiry\n+) {\n+  SECURITY_STATUS status;\n+  // Create function pointer instance\n+  initializeSecurityContext_fn pfn_initializeSecurityContext = NULL;\n+\n+  // Return error if library not loaded\n+  if(_sspi_security_dll == NULL) return -1;\n+  \n+  // Map function\n+  #ifdef _UNICODE\n+    pfn_initializeSecurityContext = (initializeSecurityContext_fn)GetProcAddress(_sspi_security_dll, \"InitializeSecurityContextW\");\n+  #else\n+    pfn_initializeSecurityContext = (initializeSecurityContext_fn)GetProcAddress(_sspi_security_dll, \"InitializeSecurityContextA\");\n+  #endif\n+\n+  // Check if the we managed to map function pointer\n+  if(!pfn_initializeSecurityContext) {\n+    printf(\"GetProcAddress failed.\\n\");\n+    return -2;\n+  }\n+\n+  // Execute intialize context\n+  status = (*pfn_initializeSecurityContext)(\n+    phCredential, phContext, pszTargetName, fContextReq, \n+    Reserved1, TargetDataRep, pInput, Reserved2,\n+    phNewContext, pOutput, pfContextAttr, ptsExpiry\n+  );\n+\n+  // Call the function\n+  return status;\n+}\n+/**\n+ * Query Context Attributes\n+ */\n+SECURITY_STATUS SEC_ENTRY _sspi_QueryContextAttributes(\n+  PCtxtHandle phContext, unsigned long ulAttribute, void * pBuffer\n+) {\n+  // Create function pointer instance\n+  queryContextAttributes_fn pfn_queryContextAttributes = NULL;\n+\n+  // Return error if library not loaded\n+  if(_sspi_security_dll == NULL) return 22;\n+\n+  #ifdef _UNICODE\n+    pfn_queryContextAttributes = (queryContextAttributes_fn)GetProcAddress(_sspi_security_dll, \"QueryContextAttributesW\");\n+  #else\n+    pfn_queryContextAttributes = (queryContextAttributes_fn)GetProcAddress(_sspi_security_dll, \"QueryContextAttributesA\");\n+  #endif\n+\n+  // Check if the we managed to map function pointer\n+  if(!pfn_queryContextAttributes) {\n+    printf(\"GetProcAddress failed.\\n\");\n+    return 42;\n+  }\n+\n+  // Call the function\n+  return (*pfn_queryContextAttributes)(\n+    phContext, ulAttribute, pBuffer\n+  );\n+}\n+\n+/**\n+ * InitSecurityInterface\n+ */\n+PSecurityFunctionTable _ssip_InitSecurityInterface() {\n+  INIT_SECURITY_INTERFACE InitSecurityInterface;\n+  PSecurityFunctionTable pSecurityInterface = NULL;\n+\n+  // Return error if library not loaded\n+  if(_sspi_security_dll == NULL) return NULL;\n+\n+  #ifdef _UNICODE\n+    // Get the address of the InitSecurityInterface function.\n+    InitSecurityInterface = (INIT_SECURITY_INTERFACE) GetProcAddress (\n+                                          _sspi_secur32_dll, \n+                                          TEXT(\"InitSecurityInterfaceW\"));\n+  #else\n+    // Get the address of the InitSecurityInterface function.\n+    InitSecurityInterface = (INIT_SECURITY_INTERFACE) GetProcAddress (\n+                                          _sspi_secur32_dll, \n+                                          TEXT(\"InitSecurityInterfaceA\"));\n+  #endif\n+\n+  if(!InitSecurityInterface) {\n+    printf (TEXT(\"Failed in getting the function address, Error: %x\"), GetLastError ());",
        "path": "sasl/kerberos_sspi.c",
        "position": null,
        "original_position": 205,
        "commit_id": "5e6a8540220ed4f0a762c5cef1cf3803dbd132bc",
        "original_commit_id": "9bd76be098b9298f29c42c547d0581bb90f4a41d",
        "user": {
            "login": "niemeyer",
            "id": 378683,
            "node_id": "MDQ6VXNlcjM3ODY4Mw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/378683?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/niemeyer",
            "html_url": "https://github.com/niemeyer",
            "followers_url": "https://api.github.com/users/niemeyer/followers",
            "following_url": "https://api.github.com/users/niemeyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/niemeyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/niemeyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/niemeyer/subscriptions",
            "organizations_url": "https://api.github.com/users/niemeyer/orgs",
            "repos_url": "https://api.github.com/users/niemeyer/repos",
            "events_url": "https://api.github.com/users/niemeyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/niemeyer/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "More errors going to stdout. We need a better mechanism for those.\n",
        "created_at": "2014-09-04T18:10:10Z",
        "updated_at": "2014-09-18T14:26:25Z",
        "html_url": "https://github.com/go-mgo/mgo/pull/20#discussion_r17131486",
        "pull_request_url": "https://api.github.com/repos/go-mgo/mgo/pulls/20",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/17131486"
            },
            "html": {
                "href": "https://github.com/go-mgo/mgo/pull/20#discussion_r17131486"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/20"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/17131488",
        "pull_request_review_id": null,
        "id": 17131488,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MTMxNDg4",
        "diff_hunk": "@@ -0,0 +1,244 @@\n+#include \"kerberos_sspi.h\"\n+#include <stdlib.h>\n+#include <stdio.h>\n+\n+static HINSTANCE _sspi_security_dll = NULL; \n+static HINSTANCE _sspi_secur32_dll = NULL;\n+\n+/**\n+ * Encrypt A Message\n+ */\n+SECURITY_STATUS SEC_ENTRY _sspi_EncryptMessage(PCtxtHandle phContext, unsigned long fQOP, PSecBufferDesc pMessage, unsigned long MessageSeqNo) {\n+  // Create function pointer instance\n+  encryptMessage_fn pfn_encryptMessage = NULL;\n+\n+  // Return error if library not loaded\n+  if(_sspi_security_dll == NULL) return -1;\n+\n+  // Map function to library method\n+  pfn_encryptMessage = (encryptMessage_fn)GetProcAddress(_sspi_security_dll, \"EncryptMessage\");\n+  // Check if the we managed to map function pointer\n+  if(!pfn_encryptMessage) {\n+    printf(\"GetProcAddress failed.\\n\");\n+    return -2;\n+  }\n+\n+  // Call the function\n+  return (*pfn_encryptMessage)(phContext, fQOP, pMessage, MessageSeqNo);\n+}\n+\n+/**\n+ * Acquire Credentials\n+ */\n+SECURITY_STATUS SEC_ENTRY _sspi_AcquireCredentialsHandle(\n+  LPSTR pszPrincipal, LPSTR pszPackage, unsigned long fCredentialUse,\n+  void * pvLogonId, void * pAuthData, SEC_GET_KEY_FN pGetKeyFn, void * pvGetKeyArgument,\n+  PCredHandle phCredential, PTimeStamp ptsExpiry\n+) {\n+  SECURITY_STATUS     status;\n+  // Create function pointer instance\n+  acquireCredentialsHandle_fn pfn_acquireCredentialsHandle = NULL;\n+\n+  // Return error if library not loaded\n+  if(_sspi_security_dll == NULL) return -1;\n+\n+  // Map function\n+  #ifdef _UNICODE\n+      pfn_acquireCredentialsHandle = (acquireCredentialsHandle_fn)GetProcAddress(_sspi_security_dll, \"AcquireCredentialsHandleW\");\n+  #else\n+      pfn_acquireCredentialsHandle = (acquireCredentialsHandle_fn)GetProcAddress(_sspi_security_dll, \"AcquireCredentialsHandleA\");\n+  #endif\n+\n+  // Check if the we managed to map function pointer\n+  if(!pfn_acquireCredentialsHandle) {\n+    printf(\"GetProcAddress failed.\\n\");\n+    return 42;\n+  }\n+\n+  // Status\n+  status = (*pfn_acquireCredentialsHandle)(pszPrincipal, pszPackage, fCredentialUse,\n+      pvLogonId, pAuthData, pGetKeyFn, pvGetKeyArgument, phCredential, ptsExpiry\n+    );\n+\n+  // Call the function\n+  return status;\n+}\n+\n+/**\n+ * Delete Security Context\n+ */\n+SECURITY_STATUS SEC_ENTRY _sspi_DeleteSecurityContext(PCtxtHandle phContext) {\n+  // Create function pointer instance\n+  deleteSecurityContext_fn pfn_deleteSecurityContext = NULL;\n+\n+  // Return error if library not loaded\n+  if(_sspi_security_dll == NULL) return -1;\n+  // Map function\n+  pfn_deleteSecurityContext = (deleteSecurityContext_fn)GetProcAddress(_sspi_security_dll, \"DeleteSecurityContext\");\n+\n+  // Check if the we managed to map function pointer\n+  if(!pfn_deleteSecurityContext) {\n+    printf(\"GetProcAddress failed.\\n\");\n+    return -2;\n+  }\n+\n+  // Call the function\n+  return (*pfn_deleteSecurityContext)(phContext);\n+}\n+\n+/**\n+ * Decrypt Message\n+ */\n+SECURITY_STATUS SEC_ENTRY _sspi_DecryptMessage(PCtxtHandle phContext, PSecBufferDesc pMessage, unsigned long MessageSeqNo, unsigned long pfQOP) {\n+  // Create function pointer instance\n+  decryptMessage_fn pfn_decryptMessage = NULL;\n+\n+  // Return error if library not loaded\n+  if(_sspi_security_dll == NULL) return -1;\n+  // Map function\n+  pfn_decryptMessage = (decryptMessage_fn)GetProcAddress(_sspi_security_dll, \"DecryptMessage\");\n+\n+  // Check if the we managed to map function pointer\n+  if(!pfn_decryptMessage) {\n+    printf(\"GetProcAddress failed.\\n\");\n+    return -2;\n+  }\n+\n+  // Call the function\n+  return (*pfn_decryptMessage)(phContext, pMessage, MessageSeqNo, pfQOP);\n+}\n+\n+/**\n+ * Initialize Security Context\n+ */\n+SECURITY_STATUS SEC_ENTRY _sspi_initializeSecurityContext(\n+  PCredHandle phCredential, PCtxtHandle phContext,\n+  LPSTR pszTargetName, unsigned long fContextReq, \n+  unsigned long Reserved1, unsigned long TargetDataRep, \n+  PSecBufferDesc pInput, unsigned long Reserved2,\n+  PCtxtHandle phNewContext, PSecBufferDesc pOutput,\n+  unsigned long * pfContextAttr, PTimeStamp ptsExpiry\n+) {\n+  SECURITY_STATUS status;\n+  // Create function pointer instance\n+  initializeSecurityContext_fn pfn_initializeSecurityContext = NULL;\n+\n+  // Return error if library not loaded\n+  if(_sspi_security_dll == NULL) return -1;\n+  \n+  // Map function\n+  #ifdef _UNICODE\n+    pfn_initializeSecurityContext = (initializeSecurityContext_fn)GetProcAddress(_sspi_security_dll, \"InitializeSecurityContextW\");\n+  #else\n+    pfn_initializeSecurityContext = (initializeSecurityContext_fn)GetProcAddress(_sspi_security_dll, \"InitializeSecurityContextA\");\n+  #endif\n+\n+  // Check if the we managed to map function pointer\n+  if(!pfn_initializeSecurityContext) {\n+    printf(\"GetProcAddress failed.\\n\");\n+    return -2;\n+  }\n+\n+  // Execute intialize context\n+  status = (*pfn_initializeSecurityContext)(\n+    phCredential, phContext, pszTargetName, fContextReq, \n+    Reserved1, TargetDataRep, pInput, Reserved2,\n+    phNewContext, pOutput, pfContextAttr, ptsExpiry\n+  );\n+\n+  // Call the function\n+  return status;\n+}\n+/**\n+ * Query Context Attributes\n+ */\n+SECURITY_STATUS SEC_ENTRY _sspi_QueryContextAttributes(\n+  PCtxtHandle phContext, unsigned long ulAttribute, void * pBuffer\n+) {\n+  // Create function pointer instance\n+  queryContextAttributes_fn pfn_queryContextAttributes = NULL;\n+\n+  // Return error if library not loaded\n+  if(_sspi_security_dll == NULL) return 22;\n+\n+  #ifdef _UNICODE\n+    pfn_queryContextAttributes = (queryContextAttributes_fn)GetProcAddress(_sspi_security_dll, \"QueryContextAttributesW\");\n+  #else\n+    pfn_queryContextAttributes = (queryContextAttributes_fn)GetProcAddress(_sspi_security_dll, \"QueryContextAttributesA\");\n+  #endif\n+\n+  // Check if the we managed to map function pointer\n+  if(!pfn_queryContextAttributes) {\n+    printf(\"GetProcAddress failed.\\n\");\n+    return 42;\n+  }\n+\n+  // Call the function\n+  return (*pfn_queryContextAttributes)(\n+    phContext, ulAttribute, pBuffer\n+  );\n+}\n+\n+/**\n+ * InitSecurityInterface\n+ */\n+PSecurityFunctionTable _ssip_InitSecurityInterface() {\n+  INIT_SECURITY_INTERFACE InitSecurityInterface;\n+  PSecurityFunctionTable pSecurityInterface = NULL;\n+\n+  // Return error if library not loaded\n+  if(_sspi_security_dll == NULL) return NULL;\n+\n+  #ifdef _UNICODE\n+    // Get the address of the InitSecurityInterface function.\n+    InitSecurityInterface = (INIT_SECURITY_INTERFACE) GetProcAddress (\n+                                          _sspi_secur32_dll, \n+                                          TEXT(\"InitSecurityInterfaceW\"));\n+  #else\n+    // Get the address of the InitSecurityInterface function.\n+    InitSecurityInterface = (INIT_SECURITY_INTERFACE) GetProcAddress (\n+                                          _sspi_secur32_dll, \n+                                          TEXT(\"InitSecurityInterfaceA\"));\n+  #endif\n+\n+  if(!InitSecurityInterface) {\n+    printf (TEXT(\"Failed in getting the function address, Error: %x\"), GetLastError ());\n+    return NULL;\n+  }\n+\n+  // Use InitSecurityInterface to get the function table.\n+  pSecurityInterface = (*InitSecurityInterface)();\n+\n+  if(!pSecurityInterface) {\n+    printf (TEXT(\"Failed in getting the function table, Error: %x\"), GetLastError ());",
        "path": "sasl/kerberos_sspi.c",
        "position": null,
        "original_position": 213,
        "commit_id": "5e6a8540220ed4f0a762c5cef1cf3803dbd132bc",
        "original_commit_id": "9bd76be098b9298f29c42c547d0581bb90f4a41d",
        "user": {
            "login": "niemeyer",
            "id": 378683,
            "node_id": "MDQ6VXNlcjM3ODY4Mw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/378683?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/niemeyer",
            "html_url": "https://github.com/niemeyer",
            "followers_url": "https://api.github.com/users/niemeyer/followers",
            "following_url": "https://api.github.com/users/niemeyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/niemeyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/niemeyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/niemeyer/subscriptions",
            "organizations_url": "https://api.github.com/users/niemeyer/orgs",
            "repos_url": "https://api.github.com/users/niemeyer/repos",
            "events_url": "https://api.github.com/users/niemeyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/niemeyer/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Ditto.\n",
        "created_at": "2014-09-04T18:10:14Z",
        "updated_at": "2014-09-18T14:26:25Z",
        "html_url": "https://github.com/go-mgo/mgo/pull/20#discussion_r17131488",
        "pull_request_url": "https://api.github.com/repos/go-mgo/mgo/pulls/20",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/17131488"
            },
            "html": {
                "href": "https://github.com/go-mgo/mgo/pull/20#discussion_r17131488"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/20"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/17131566",
        "pull_request_review_id": null,
        "id": 17131566,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MTMxNTY2",
        "diff_hunk": "@@ -0,0 +1,244 @@\n+#include \"kerberos_sspi.h\"\n+#include <stdlib.h>\n+#include <stdio.h>\n+\n+static HINSTANCE _sspi_security_dll = NULL; \n+static HINSTANCE _sspi_secur32_dll = NULL;\n+\n+/**\n+ * Encrypt A Message\n+ */\n+SECURITY_STATUS SEC_ENTRY _sspi_EncryptMessage(PCtxtHandle phContext, unsigned long fQOP, PSecBufferDesc pMessage, unsigned long MessageSeqNo) {\n+  // Create function pointer instance\n+  encryptMessage_fn pfn_encryptMessage = NULL;\n+\n+  // Return error if library not loaded\n+  if(_sspi_security_dll == NULL) return -1;\n+\n+  // Map function to library method\n+  pfn_encryptMessage = (encryptMessage_fn)GetProcAddress(_sspi_security_dll, \"EncryptMessage\");\n+  // Check if the we managed to map function pointer\n+  if(!pfn_encryptMessage) {\n+    printf(\"GetProcAddress failed.\\n\");\n+    return -2;\n+  }\n+\n+  // Call the function\n+  return (*pfn_encryptMessage)(phContext, fQOP, pMessage, MessageSeqNo);\n+}\n+\n+/**\n+ * Acquire Credentials\n+ */\n+SECURITY_STATUS SEC_ENTRY _sspi_AcquireCredentialsHandle(\n+  LPSTR pszPrincipal, LPSTR pszPackage, unsigned long fCredentialUse,\n+  void * pvLogonId, void * pAuthData, SEC_GET_KEY_FN pGetKeyFn, void * pvGetKeyArgument,\n+  PCredHandle phCredential, PTimeStamp ptsExpiry\n+) {\n+  SECURITY_STATUS     status;\n+  // Create function pointer instance\n+  acquireCredentialsHandle_fn pfn_acquireCredentialsHandle = NULL;\n+\n+  // Return error if library not loaded\n+  if(_sspi_security_dll == NULL) return -1;\n+\n+  // Map function\n+  #ifdef _UNICODE\n+      pfn_acquireCredentialsHandle = (acquireCredentialsHandle_fn)GetProcAddress(_sspi_security_dll, \"AcquireCredentialsHandleW\");\n+  #else\n+      pfn_acquireCredentialsHandle = (acquireCredentialsHandle_fn)GetProcAddress(_sspi_security_dll, \"AcquireCredentialsHandleA\");\n+  #endif\n+\n+  // Check if the we managed to map function pointer\n+  if(!pfn_acquireCredentialsHandle) {\n+    printf(\"GetProcAddress failed.\\n\");\n+    return 42;\n+  }\n+\n+  // Status\n+  status = (*pfn_acquireCredentialsHandle)(pszPrincipal, pszPackage, fCredentialUse,\n+      pvLogonId, pAuthData, pGetKeyFn, pvGetKeyArgument, phCredential, ptsExpiry\n+    );\n+\n+  // Call the function\n+  return status;\n+}\n+\n+/**\n+ * Delete Security Context\n+ */\n+SECURITY_STATUS SEC_ENTRY _sspi_DeleteSecurityContext(PCtxtHandle phContext) {\n+  // Create function pointer instance\n+  deleteSecurityContext_fn pfn_deleteSecurityContext = NULL;\n+\n+  // Return error if library not loaded\n+  if(_sspi_security_dll == NULL) return -1;\n+  // Map function\n+  pfn_deleteSecurityContext = (deleteSecurityContext_fn)GetProcAddress(_sspi_security_dll, \"DeleteSecurityContext\");\n+\n+  // Check if the we managed to map function pointer\n+  if(!pfn_deleteSecurityContext) {\n+    printf(\"GetProcAddress failed.\\n\");\n+    return -2;\n+  }\n+\n+  // Call the function\n+  return (*pfn_deleteSecurityContext)(phContext);\n+}\n+\n+/**\n+ * Decrypt Message\n+ */\n+SECURITY_STATUS SEC_ENTRY _sspi_DecryptMessage(PCtxtHandle phContext, PSecBufferDesc pMessage, unsigned long MessageSeqNo, unsigned long pfQOP) {\n+  // Create function pointer instance\n+  decryptMessage_fn pfn_decryptMessage = NULL;\n+\n+  // Return error if library not loaded\n+  if(_sspi_security_dll == NULL) return -1;\n+  // Map function\n+  pfn_decryptMessage = (decryptMessage_fn)GetProcAddress(_sspi_security_dll, \"DecryptMessage\");\n+\n+  // Check if the we managed to map function pointer\n+  if(!pfn_decryptMessage) {\n+    printf(\"GetProcAddress failed.\\n\");\n+    return -2;\n+  }\n+\n+  // Call the function\n+  return (*pfn_decryptMessage)(phContext, pMessage, MessageSeqNo, pfQOP);\n+}\n+\n+/**\n+ * Initialize Security Context\n+ */\n+SECURITY_STATUS SEC_ENTRY _sspi_initializeSecurityContext(\n+  PCredHandle phCredential, PCtxtHandle phContext,\n+  LPSTR pszTargetName, unsigned long fContextReq, \n+  unsigned long Reserved1, unsigned long TargetDataRep, \n+  PSecBufferDesc pInput, unsigned long Reserved2,\n+  PCtxtHandle phNewContext, PSecBufferDesc pOutput,\n+  unsigned long * pfContextAttr, PTimeStamp ptsExpiry\n+) {\n+  SECURITY_STATUS status;\n+  // Create function pointer instance\n+  initializeSecurityContext_fn pfn_initializeSecurityContext = NULL;\n+\n+  // Return error if library not loaded\n+  if(_sspi_security_dll == NULL) return -1;\n+  \n+  // Map function\n+  #ifdef _UNICODE\n+    pfn_initializeSecurityContext = (initializeSecurityContext_fn)GetProcAddress(_sspi_security_dll, \"InitializeSecurityContextW\");\n+  #else\n+    pfn_initializeSecurityContext = (initializeSecurityContext_fn)GetProcAddress(_sspi_security_dll, \"InitializeSecurityContextA\");\n+  #endif\n+\n+  // Check if the we managed to map function pointer\n+  if(!pfn_initializeSecurityContext) {\n+    printf(\"GetProcAddress failed.\\n\");\n+    return -2;\n+  }\n+\n+  // Execute intialize context\n+  status = (*pfn_initializeSecurityContext)(\n+    phCredential, phContext, pszTargetName, fContextReq, \n+    Reserved1, TargetDataRep, pInput, Reserved2,\n+    phNewContext, pOutput, pfContextAttr, ptsExpiry\n+  );\n+\n+  // Call the function\n+  return status;\n+}\n+/**\n+ * Query Context Attributes\n+ */\n+SECURITY_STATUS SEC_ENTRY _sspi_QueryContextAttributes(\n+  PCtxtHandle phContext, unsigned long ulAttribute, void * pBuffer\n+) {\n+  // Create function pointer instance\n+  queryContextAttributes_fn pfn_queryContextAttributes = NULL;\n+\n+  // Return error if library not loaded\n+  if(_sspi_security_dll == NULL) return 22;\n+\n+  #ifdef _UNICODE\n+    pfn_queryContextAttributes = (queryContextAttributes_fn)GetProcAddress(_sspi_security_dll, \"QueryContextAttributesW\");\n+  #else\n+    pfn_queryContextAttributes = (queryContextAttributes_fn)GetProcAddress(_sspi_security_dll, \"QueryContextAttributesA\");\n+  #endif\n+\n+  // Check if the we managed to map function pointer\n+  if(!pfn_queryContextAttributes) {\n+    printf(\"GetProcAddress failed.\\n\");\n+    return 42;\n+  }\n+\n+  // Call the function\n+  return (*pfn_queryContextAttributes)(\n+    phContext, ulAttribute, pBuffer\n+  );\n+}\n+\n+/**\n+ * InitSecurityInterface\n+ */\n+PSecurityFunctionTable _ssip_InitSecurityInterface() {",
        "path": "sasl/kerberos_sspi.c",
        "position": null,
        "original_position": 185,
        "commit_id": "5e6a8540220ed4f0a762c5cef1cf3803dbd132bc",
        "original_commit_id": "9bd76be098b9298f29c42c547d0581bb90f4a41d",
        "user": {
            "login": "niemeyer",
            "id": 378683,
            "node_id": "MDQ6VXNlcjM3ODY4Mw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/378683?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/niemeyer",
            "html_url": "https://github.com/niemeyer",
            "followers_url": "https://api.github.com/users/niemeyer/followers",
            "following_url": "https://api.github.com/users/niemeyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/niemeyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/niemeyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/niemeyer/subscriptions",
            "organizations_url": "https://api.github.com/users/niemeyer/orgs",
            "repos_url": "https://api.github.com/users/niemeyer/repos",
            "events_url": "https://api.github.com/users/niemeyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/niemeyer/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Typo in _sspi_.. I don't think we need those underlined prefixes, by the way. The symbol namespace in the package is pretty clean, unless I misunderstand some particularity of Windows.\n",
        "created_at": "2014-09-04T18:11:18Z",
        "updated_at": "2014-09-18T14:26:25Z",
        "html_url": "https://github.com/go-mgo/mgo/pull/20#discussion_r17131566",
        "pull_request_url": "https://api.github.com/repos/go-mgo/mgo/pulls/20",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/17131566"
            },
            "html": {
                "href": "https://github.com/go-mgo/mgo/pull/20#discussion_r17131566"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/20"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/17131623",
        "pull_request_review_id": null,
        "id": 17131623,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MTMxNjIz",
        "diff_hunk": "@@ -0,0 +1,244 @@\n+#include \"kerberos_sspi.h\"\n+#include <stdlib.h>\n+#include <stdio.h>\n+\n+static HINSTANCE _sspi_security_dll = NULL; \n+static HINSTANCE _sspi_secur32_dll = NULL;\n+\n+/**\n+ * Encrypt A Message\n+ */\n+SECURITY_STATUS SEC_ENTRY _sspi_EncryptMessage(PCtxtHandle phContext, unsigned long fQOP, PSecBufferDesc pMessage, unsigned long MessageSeqNo) {\n+  // Create function pointer instance\n+  encryptMessage_fn pfn_encryptMessage = NULL;\n+\n+  // Return error if library not loaded\n+  if(_sspi_security_dll == NULL) return -1;\n+\n+  // Map function to library method\n+  pfn_encryptMessage = (encryptMessage_fn)GetProcAddress(_sspi_security_dll, \"EncryptMessage\");\n+  // Check if the we managed to map function pointer\n+  if(!pfn_encryptMessage) {\n+    printf(\"GetProcAddress failed.\\n\");\n+    return -2;\n+  }\n+\n+  // Call the function\n+  return (*pfn_encryptMessage)(phContext, fQOP, pMessage, MessageSeqNo);\n+}\n+\n+/**\n+ * Acquire Credentials\n+ */\n+SECURITY_STATUS SEC_ENTRY _sspi_AcquireCredentialsHandle(\n+  LPSTR pszPrincipal, LPSTR pszPackage, unsigned long fCredentialUse,\n+  void * pvLogonId, void * pAuthData, SEC_GET_KEY_FN pGetKeyFn, void * pvGetKeyArgument,\n+  PCredHandle phCredential, PTimeStamp ptsExpiry\n+) {\n+  SECURITY_STATUS     status;\n+  // Create function pointer instance\n+  acquireCredentialsHandle_fn pfn_acquireCredentialsHandle = NULL;\n+\n+  // Return error if library not loaded\n+  if(_sspi_security_dll == NULL) return -1;\n+\n+  // Map function\n+  #ifdef _UNICODE\n+      pfn_acquireCredentialsHandle = (acquireCredentialsHandle_fn)GetProcAddress(_sspi_security_dll, \"AcquireCredentialsHandleW\");\n+  #else\n+      pfn_acquireCredentialsHandle = (acquireCredentialsHandle_fn)GetProcAddress(_sspi_security_dll, \"AcquireCredentialsHandleA\");\n+  #endif\n+\n+  // Check if the we managed to map function pointer\n+  if(!pfn_acquireCredentialsHandle) {\n+    printf(\"GetProcAddress failed.\\n\");\n+    return 42;\n+  }\n+\n+  // Status\n+  status = (*pfn_acquireCredentialsHandle)(pszPrincipal, pszPackage, fCredentialUse,\n+      pvLogonId, pAuthData, pGetKeyFn, pvGetKeyArgument, phCredential, ptsExpiry\n+    );\n+\n+  // Call the function\n+  return status;\n+}\n+\n+/**\n+ * Delete Security Context\n+ */\n+SECURITY_STATUS SEC_ENTRY _sspi_DeleteSecurityContext(PCtxtHandle phContext) {\n+  // Create function pointer instance\n+  deleteSecurityContext_fn pfn_deleteSecurityContext = NULL;\n+\n+  // Return error if library not loaded\n+  if(_sspi_security_dll == NULL) return -1;\n+  // Map function\n+  pfn_deleteSecurityContext = (deleteSecurityContext_fn)GetProcAddress(_sspi_security_dll, \"DeleteSecurityContext\");\n+\n+  // Check if the we managed to map function pointer\n+  if(!pfn_deleteSecurityContext) {\n+    printf(\"GetProcAddress failed.\\n\");\n+    return -2;\n+  }\n+\n+  // Call the function\n+  return (*pfn_deleteSecurityContext)(phContext);\n+}\n+\n+/**\n+ * Decrypt Message\n+ */\n+SECURITY_STATUS SEC_ENTRY _sspi_DecryptMessage(PCtxtHandle phContext, PSecBufferDesc pMessage, unsigned long MessageSeqNo, unsigned long pfQOP) {\n+  // Create function pointer instance\n+  decryptMessage_fn pfn_decryptMessage = NULL;\n+\n+  // Return error if library not loaded\n+  if(_sspi_security_dll == NULL) return -1;\n+  // Map function\n+  pfn_decryptMessage = (decryptMessage_fn)GetProcAddress(_sspi_security_dll, \"DecryptMessage\");\n+\n+  // Check if the we managed to map function pointer\n+  if(!pfn_decryptMessage) {\n+    printf(\"GetProcAddress failed.\\n\");\n+    return -2;\n+  }\n+\n+  // Call the function\n+  return (*pfn_decryptMessage)(phContext, pMessage, MessageSeqNo, pfQOP);\n+}\n+\n+/**\n+ * Initialize Security Context\n+ */\n+SECURITY_STATUS SEC_ENTRY _sspi_initializeSecurityContext(\n+  PCredHandle phCredential, PCtxtHandle phContext,\n+  LPSTR pszTargetName, unsigned long fContextReq, \n+  unsigned long Reserved1, unsigned long TargetDataRep, \n+  PSecBufferDesc pInput, unsigned long Reserved2,\n+  PCtxtHandle phNewContext, PSecBufferDesc pOutput,\n+  unsigned long * pfContextAttr, PTimeStamp ptsExpiry\n+) {\n+  SECURITY_STATUS status;\n+  // Create function pointer instance\n+  initializeSecurityContext_fn pfn_initializeSecurityContext = NULL;\n+\n+  // Return error if library not loaded\n+  if(_sspi_security_dll == NULL) return -1;\n+  \n+  // Map function\n+  #ifdef _UNICODE\n+    pfn_initializeSecurityContext = (initializeSecurityContext_fn)GetProcAddress(_sspi_security_dll, \"InitializeSecurityContextW\");\n+  #else\n+    pfn_initializeSecurityContext = (initializeSecurityContext_fn)GetProcAddress(_sspi_security_dll, \"InitializeSecurityContextA\");\n+  #endif\n+\n+  // Check if the we managed to map function pointer\n+  if(!pfn_initializeSecurityContext) {\n+    printf(\"GetProcAddress failed.\\n\");\n+    return -2;\n+  }\n+\n+  // Execute intialize context\n+  status = (*pfn_initializeSecurityContext)(\n+    phCredential, phContext, pszTargetName, fContextReq, \n+    Reserved1, TargetDataRep, pInput, Reserved2,\n+    phNewContext, pOutput, pfContextAttr, ptsExpiry\n+  );\n+\n+  // Call the function\n+  return status;\n+}\n+/**\n+ * Query Context Attributes\n+ */\n+SECURITY_STATUS SEC_ENTRY _sspi_QueryContextAttributes(\n+  PCtxtHandle phContext, unsigned long ulAttribute, void * pBuffer\n+) {\n+  // Create function pointer instance\n+  queryContextAttributes_fn pfn_queryContextAttributes = NULL;\n+\n+  // Return error if library not loaded\n+  if(_sspi_security_dll == NULL) return 22;\n+\n+  #ifdef _UNICODE\n+    pfn_queryContextAttributes = (queryContextAttributes_fn)GetProcAddress(_sspi_security_dll, \"QueryContextAttributesW\");\n+  #else\n+    pfn_queryContextAttributes = (queryContextAttributes_fn)GetProcAddress(_sspi_security_dll, \"QueryContextAttributesA\");\n+  #endif\n+\n+  // Check if the we managed to map function pointer\n+  if(!pfn_queryContextAttributes) {\n+    printf(\"GetProcAddress failed.\\n\");\n+    return 42;\n+  }\n+\n+  // Call the function\n+  return (*pfn_queryContextAttributes)(\n+    phContext, ulAttribute, pBuffer\n+  );\n+}\n+\n+/**\n+ * InitSecurityInterface\n+ */\n+PSecurityFunctionTable _ssip_InitSecurityInterface() {",
        "path": "sasl/kerberos_sspi.c",
        "position": null,
        "original_position": 185,
        "commit_id": "5e6a8540220ed4f0a762c5cef1cf3803dbd132bc",
        "original_commit_id": "9bd76be098b9298f29c42c547d0581bb90f4a41d",
        "user": {
            "login": "niemeyer",
            "id": 378683,
            "node_id": "MDQ6VXNlcjM3ODY4Mw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/378683?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/niemeyer",
            "html_url": "https://github.com/niemeyer",
            "followers_url": "https://api.github.com/users/niemeyer/followers",
            "following_url": "https://api.github.com/users/niemeyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/niemeyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/niemeyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/niemeyer/subscriptions",
            "organizations_url": "https://api.github.com/users/niemeyer/orgs",
            "repos_url": "https://api.github.com/users/niemeyer/repos",
            "events_url": "https://api.github.com/users/niemeyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/niemeyer/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "In fact, is that function even being used?\n",
        "created_at": "2014-09-04T18:12:05Z",
        "updated_at": "2014-09-18T14:26:25Z",
        "html_url": "https://github.com/go-mgo/mgo/pull/20#discussion_r17131623",
        "pull_request_url": "https://api.github.com/repos/go-mgo/mgo/pulls/20",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/17131623"
            },
            "html": {
                "href": "https://github.com/go-mgo/mgo/pull/20#discussion_r17131623"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/20"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/17131669",
        "pull_request_review_id": null,
        "id": 17131669,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MTMxNjY5",
        "diff_hunk": "@@ -0,0 +1,144 @@\n+// +build windows",
        "path": "sasl/sasl_sspi.go",
        "position": 1,
        "original_position": 1,
        "commit_id": "5e6a8540220ed4f0a762c5cef1cf3803dbd132bc",
        "original_commit_id": "9bd76be098b9298f29c42c547d0581bb90f4a41d",
        "user": {
            "login": "niemeyer",
            "id": 378683,
            "node_id": "MDQ6VXNlcjM3ODY4Mw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/378683?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/niemeyer",
            "html_url": "https://github.com/niemeyer",
            "followers_url": "https://api.github.com/users/niemeyer/followers",
            "following_url": "https://api.github.com/users/niemeyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/niemeyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/niemeyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/niemeyer/subscriptions",
            "organizations_url": "https://api.github.com/users/niemeyer/orgs",
            "repos_url": "https://api.github.com/users/niemeyer/repos",
            "events_url": "https://api.github.com/users/niemeyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/niemeyer/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Please call these files sasl_windows.go and sasl_windows.h. No need to have the +build instruction with that.\n",
        "created_at": "2014-09-04T18:12:56Z",
        "updated_at": "2014-09-18T14:26:25Z",
        "html_url": "https://github.com/go-mgo/mgo/pull/20#discussion_r17131669",
        "pull_request_url": "https://api.github.com/repos/go-mgo/mgo/pulls/20",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/17131669"
            },
            "html": {
                "href": "https://github.com/go-mgo/mgo/pull/20#discussion_r17131669"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/20"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/17132118",
        "pull_request_review_id": null,
        "id": 17132118,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MTMyMTE4",
        "diff_hunk": "@@ -0,0 +1,244 @@\n+#include \"kerberos_sspi.h\"",
        "path": "sasl/kerberos_sspi.c",
        "position": 2,
        "original_position": 1,
        "commit_id": "5e6a8540220ed4f0a762c5cef1cf3803dbd132bc",
        "original_commit_id": "9bd76be098b9298f29c42c547d0581bb90f4a41d",
        "user": {
            "login": "vkarpov15",
            "id": 1620265,
            "node_id": "MDQ6VXNlcjE2MjAyNjU=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/1620265?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/vkarpov15",
            "html_url": "https://github.com/vkarpov15",
            "followers_url": "https://api.github.com/users/vkarpov15/followers",
            "following_url": "https://api.github.com/users/vkarpov15/following{/other_user}",
            "gists_url": "https://api.github.com/users/vkarpov15/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/vkarpov15/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/vkarpov15/subscriptions",
            "organizations_url": "https://api.github.com/users/vkarpov15/orgs",
            "repos_url": "https://api.github.com/users/vkarpov15/repos",
            "events_url": "https://api.github.com/users/vkarpov15/events{/privacy}",
            "received_events_url": "https://api.github.com/users/vkarpov15/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "https://github.com/christkv/kerberos/tree/master/lib/win32 Christian's node driver kerberos code. Its under Apache 2.0.\n",
        "created_at": "2014-09-04T18:19:57Z",
        "updated_at": "2014-09-18T14:26:25Z",
        "html_url": "https://github.com/go-mgo/mgo/pull/20#discussion_r17132118",
        "pull_request_url": "https://api.github.com/repos/go-mgo/mgo/pulls/20",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/17132118"
            },
            "html": {
                "href": "https://github.com/go-mgo/mgo/pull/20#discussion_r17132118"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/20"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/17132191",
        "pull_request_review_id": null,
        "id": 17132191,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MTMyMTkx",
        "diff_hunk": "@@ -0,0 +1,144 @@\n+// +build windows\n+\n+package sasl\n+\n+//\n+// #include \"sasl_sspi.h\"\n+//\n+import \"C\"\n+\n+import (\n+\t\"fmt\"\n+\t\"strings\"\n+\t\"sync\"\n+\t\"unsafe\"\n+)\n+\n+type saslStepper interface {\n+\tStep(serverData []byte) (clientData []byte, done bool, err error)\n+\tClose()\n+}\n+\n+type saslSession struct {\n+\t// Credentials\n+\tmech          string\n+\tservice       string\n+\thost          string\n+\tuserPlusRealm string\n+\n+\t// Internal state\n+\tauthComplete bool\n+\terrored      bool\n+\tstep         int\n+\n+\t// C internal state\n+\tcredHandle C.CredHandle\n+\tcontext    C.CtxtHandle\n+\thasContext C.int\n+\n+\t// Keep track of pointers we need to explicitly free\n+\tstringsToFree []*C.char\n+\tbuffersToFree []C.PVOID\n+}\n+\n+var initError error\n+var initOnce sync.Once\n+\n+func initSSPI() {\n+\trc := C.load_library()\n+\tif rc != 0 {\n+\t\tinitError = fmt.Errorf(\"Error loading libraries: %v\", rc)\n+\t}\n+}\n+\n+func New(username, password, mechanism, service, host string) (saslStepper, error) {\n+\tinitOnce.Do(initSSPI)\n+\tss := &saslSession{mech: mechanism, hasContext: 0, userPlusRealm: username}\n+\tif service == \"\" {\n+\t\tservice = \"mongodb\"\n+\t}\n+\tif i := strings.Index(host, \":\"); i >= 0 {\n+\t\thost = host[:i]\n+\t}\n+\tss.service = service\n+\tss.host = host\n+\n+\tusernameComponents := strings.Split(username, \"@\")\n+\tif len(usernameComponents) < 2 {\n+\t\treturn nil, fmt.Errorf(\"Username '%v' doesn't contain a realm!\", username)\n+\t}\n+\tuser := usernameComponents[0]\n+\tdomain := usernameComponents[1]\n+\n+\tvar status C.SECURITY_STATUS\n+\t// Step 0: call AcquireCredentialsHandle to get a nice SSPI CredHandle\n+\tif len(password) > 0 {\n+\t\tstatus = C.sspi_acquire_credentials_handle(&ss.credHandle, ss.cstr(user), ss.cstr(password), ss.cstr(domain))\n+\t} else {\n+\t\tstatus = C.sspi_acquire_credentials_handle(&ss.credHandle, ss.cstr(user), nil, ss.cstr(domain))\n+\t}\n+\n+\tif status != C.SEC_E_OK {\n+\t\tss.errored = true\n+\t\treturn nil, fmt.Errorf(\"Couldn't create new SSPI client, error code %v\", status)\n+\t}\n+\n+\treturn ss, nil\n+}\n+\n+func (ss *saslSession) cstr(s string) *C.char {\n+\tcstr := C.CString(s)\n+\tss.stringsToFree = append(ss.stringsToFree, cstr)\n+\treturn cstr\n+}\n+\n+func (ss *saslSession) Close() {\n+\tfor _, cstr := range ss.stringsToFree {\n+\t\tC.free(unsafe.Pointer(cstr))\n+\t}\n+\n+\t// Make sure we've cleaned up all the buffers we malloced when we're sure we don't need em anymore\n+\tif ss.authComplete || ss.errored {",
        "path": "sasl/sasl_sspi.go",
        "position": 101,
        "original_position": 101,
        "commit_id": "5e6a8540220ed4f0a762c5cef1cf3803dbd132bc",
        "original_commit_id": "9bd76be098b9298f29c42c547d0581bb90f4a41d",
        "user": {
            "login": "vkarpov15",
            "id": 1620265,
            "node_id": "MDQ6VXNlcjE2MjAyNjU=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/1620265?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/vkarpov15",
            "html_url": "https://github.com/vkarpov15",
            "followers_url": "https://api.github.com/users/vkarpov15/followers",
            "following_url": "https://api.github.com/users/vkarpov15/following{/other_user}",
            "gists_url": "https://api.github.com/users/vkarpov15/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/vkarpov15/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/vkarpov15/subscriptions",
            "organizations_url": "https://api.github.com/users/vkarpov15/orgs",
            "repos_url": "https://api.github.com/users/vkarpov15/repos",
            "events_url": "https://api.github.com/users/vkarpov15/events{/privacy}",
            "received_events_url": "https://api.github.com/users/vkarpov15/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Got some weird errors because Close gets called after every step. Figured this would be a reasonable way to not dive down the windows rabbit hole while avoiding leaking memory.\n",
        "created_at": "2014-09-04T18:21:08Z",
        "updated_at": "2014-09-18T14:26:25Z",
        "html_url": "https://github.com/go-mgo/mgo/pull/20#discussion_r17132191",
        "pull_request_url": "https://api.github.com/repos/go-mgo/mgo/pulls/20",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/17132191"
            },
            "html": {
                "href": "https://github.com/go-mgo/mgo/pull/20#discussion_r17132191"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/20"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/17132299",
        "pull_request_review_id": null,
        "id": 17132299,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MTMyMjk5",
        "diff_hunk": "@@ -0,0 +1,244 @@\n+#include \"kerberos_sspi.h\"",
        "path": "sasl/kerberos_sspi.c",
        "position": 2,
        "original_position": 1,
        "commit_id": "5e6a8540220ed4f0a762c5cef1cf3803dbd132bc",
        "original_commit_id": "9bd76be098b9298f29c42c547d0581bb90f4a41d",
        "user": {
            "login": "niemeyer",
            "id": 378683,
            "node_id": "MDQ6VXNlcjM3ODY4Mw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/378683?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/niemeyer",
            "html_url": "https://github.com/niemeyer",
            "followers_url": "https://api.github.com/users/niemeyer/followers",
            "following_url": "https://api.github.com/users/niemeyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/niemeyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/niemeyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/niemeyer/subscriptions",
            "organizations_url": "https://api.github.com/users/niemeyer/orgs",
            "repos_url": "https://api.github.com/users/niemeyer/repos",
            "events_url": "https://api.github.com/users/niemeyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/niemeyer/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "We need that information at the top of the file itself. Link to the project, who wrote the particular file, what's its license and copyright.\n",
        "created_at": "2014-09-04T18:23:20Z",
        "updated_at": "2014-09-18T14:26:25Z",
        "html_url": "https://github.com/go-mgo/mgo/pull/20#discussion_r17132299",
        "pull_request_url": "https://api.github.com/repos/go-mgo/mgo/pulls/20",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/17132299"
            },
            "html": {
                "href": "https://github.com/go-mgo/mgo/pull/20#discussion_r17132299"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/20"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/17132526",
        "pull_request_review_id": null,
        "id": 17132526,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MTMyNTI2",
        "diff_hunk": "@@ -0,0 +1,144 @@\n+// +build windows\n+\n+package sasl\n+\n+//\n+// #include \"sasl_sspi.h\"\n+//\n+import \"C\"\n+\n+import (\n+\t\"fmt\"\n+\t\"strings\"\n+\t\"sync\"\n+\t\"unsafe\"\n+)\n+\n+type saslStepper interface {\n+\tStep(serverData []byte) (clientData []byte, done bool, err error)\n+\tClose()\n+}\n+\n+type saslSession struct {\n+\t// Credentials\n+\tmech          string\n+\tservice       string\n+\thost          string\n+\tuserPlusRealm string\n+\n+\t// Internal state\n+\tauthComplete bool\n+\terrored      bool\n+\tstep         int\n+\n+\t// C internal state\n+\tcredHandle C.CredHandle\n+\tcontext    C.CtxtHandle\n+\thasContext C.int\n+\n+\t// Keep track of pointers we need to explicitly free\n+\tstringsToFree []*C.char\n+\tbuffersToFree []C.PVOID\n+}\n+\n+var initError error\n+var initOnce sync.Once\n+\n+func initSSPI() {\n+\trc := C.load_library()\n+\tif rc != 0 {\n+\t\tinitError = fmt.Errorf(\"Error loading libraries: %v\", rc)\n+\t}\n+}\n+\n+func New(username, password, mechanism, service, host string) (saslStepper, error) {\n+\tinitOnce.Do(initSSPI)\n+\tss := &saslSession{mech: mechanism, hasContext: 0, userPlusRealm: username}\n+\tif service == \"\" {\n+\t\tservice = \"mongodb\"\n+\t}\n+\tif i := strings.Index(host, \":\"); i >= 0 {\n+\t\thost = host[:i]\n+\t}\n+\tss.service = service\n+\tss.host = host\n+\n+\tusernameComponents := strings.Split(username, \"@\")\n+\tif len(usernameComponents) < 2 {\n+\t\treturn nil, fmt.Errorf(\"Username '%v' doesn't contain a realm!\", username)\n+\t}\n+\tuser := usernameComponents[0]\n+\tdomain := usernameComponents[1]\n+\n+\tvar status C.SECURITY_STATUS\n+\t// Step 0: call AcquireCredentialsHandle to get a nice SSPI CredHandle\n+\tif len(password) > 0 {\n+\t\tstatus = C.sspi_acquire_credentials_handle(&ss.credHandle, ss.cstr(user), ss.cstr(password), ss.cstr(domain))\n+\t} else {\n+\t\tstatus = C.sspi_acquire_credentials_handle(&ss.credHandle, ss.cstr(user), nil, ss.cstr(domain))\n+\t}\n+\n+\tif status != C.SEC_E_OK {\n+\t\tss.errored = true\n+\t\treturn nil, fmt.Errorf(\"Couldn't create new SSPI client, error code %v\", status)\n+\t}\n+\n+\treturn ss, nil\n+}\n+\n+func (ss *saslSession) cstr(s string) *C.char {\n+\tcstr := C.CString(s)\n+\tss.stringsToFree = append(ss.stringsToFree, cstr)\n+\treturn cstr\n+}\n+\n+func (ss *saslSession) Close() {\n+\tfor _, cstr := range ss.stringsToFree {\n+\t\tC.free(unsafe.Pointer(cstr))\n+\t}\n+\n+\t// Make sure we've cleaned up all the buffers we malloced when we're sure we don't need em anymore\n+\tif ss.authComplete || ss.errored {",
        "path": "sasl/sasl_sspi.go",
        "position": 101,
        "original_position": 101,
        "commit_id": "5e6a8540220ed4f0a762c5cef1cf3803dbd132bc",
        "original_commit_id": "9bd76be098b9298f29c42c547d0581bb90f4a41d",
        "user": {
            "login": "niemeyer",
            "id": 378683,
            "node_id": "MDQ6VXNlcjM3ODY4Mw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/378683?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/niemeyer",
            "html_url": "https://github.com/niemeyer",
            "followers_url": "https://api.github.com/users/niemeyer/followers",
            "following_url": "https://api.github.com/users/niemeyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/niemeyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/niemeyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/niemeyer/subscriptions",
            "organizations_url": "https://api.github.com/users/niemeyer/orgs",
            "repos_url": "https://api.github.com/users/niemeyer/repos",
            "events_url": "https://api.github.com/users/niemeyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/niemeyer/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I don't think I understand the issue. Close cannot be called after a step unless the saslSession is not going to be touched anymore, and if that's the case its resources should be released or we do have leaks. If there are lurking errors, we should understand them as there's likely a fundamental issue in the way we're using the API.\n",
        "created_at": "2014-09-04T18:27:36Z",
        "updated_at": "2014-09-18T14:26:25Z",
        "html_url": "https://github.com/go-mgo/mgo/pull/20#discussion_r17132526",
        "pull_request_url": "https://api.github.com/repos/go-mgo/mgo/pulls/20",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/17132526"
            },
            "html": {
                "href": "https://github.com/go-mgo/mgo/pull/20#discussion_r17132526"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/20"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/17691595",
        "pull_request_review_id": null,
        "id": 17691595,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NjkxNTk1",
        "diff_hunk": "@@ -0,0 +1,144 @@\n+// +build windows\n+\n+package sasl\n+\n+//\n+// #include \"sasl_sspi.h\"\n+//\n+import \"C\"\n+\n+import (\n+\t\"fmt\"\n+\t\"strings\"\n+\t\"sync\"\n+\t\"unsafe\"\n+)\n+\n+type saslStepper interface {\n+\tStep(serverData []byte) (clientData []byte, done bool, err error)\n+\tClose()\n+}\n+\n+type saslSession struct {\n+\t// Credentials\n+\tmech          string\n+\tservice       string\n+\thost          string\n+\tuserPlusRealm string\n+\n+\t// Internal state\n+\tauthComplete bool\n+\terrored      bool\n+\tstep         int\n+\n+\t// C internal state\n+\tcredHandle C.CredHandle\n+\tcontext    C.CtxtHandle\n+\thasContext C.int\n+\n+\t// Keep track of pointers we need to explicitly free\n+\tstringsToFree []*C.char\n+\tbuffersToFree []C.PVOID\n+}\n+\n+var initError error\n+var initOnce sync.Once\n+\n+func initSSPI() {\n+\trc := C.load_library()\n+\tif rc != 0 {\n+\t\tinitError = fmt.Errorf(\"Error loading libraries: %v\", rc)\n+\t}\n+}\n+\n+func New(username, password, mechanism, service, host string) (saslStepper, error) {\n+\tinitOnce.Do(initSSPI)\n+\tss := &saslSession{mech: mechanism, hasContext: 0, userPlusRealm: username}\n+\tif service == \"\" {\n+\t\tservice = \"mongodb\"\n+\t}\n+\tif i := strings.Index(host, \":\"); i >= 0 {\n+\t\thost = host[:i]\n+\t}\n+\tss.service = service\n+\tss.host = host\n+\n+\tusernameComponents := strings.Split(username, \"@\")\n+\tif len(usernameComponents) < 2 {\n+\t\treturn nil, fmt.Errorf(\"Username '%v' doesn't contain a realm!\", username)\n+\t}\n+\tuser := usernameComponents[0]\n+\tdomain := usernameComponents[1]\n+\n+\tvar status C.SECURITY_STATUS\n+\t// Step 0: call AcquireCredentialsHandle to get a nice SSPI CredHandle\n+\tif len(password) > 0 {\n+\t\tstatus = C.sspi_acquire_credentials_handle(&ss.credHandle, ss.cstr(user), ss.cstr(password), ss.cstr(domain))\n+\t} else {\n+\t\tstatus = C.sspi_acquire_credentials_handle(&ss.credHandle, ss.cstr(user), nil, ss.cstr(domain))\n+\t}\n+\n+\tif status != C.SEC_E_OK {\n+\t\tss.errored = true\n+\t\treturn nil, fmt.Errorf(\"Couldn't create new SSPI client, error code %v\", status)\n+\t}\n+\n+\treturn ss, nil\n+}\n+\n+func (ss *saslSession) cstr(s string) *C.char {\n+\tcstr := C.CString(s)\n+\tss.stringsToFree = append(ss.stringsToFree, cstr)\n+\treturn cstr\n+}\n+\n+func (ss *saslSession) Close() {\n+\tfor _, cstr := range ss.stringsToFree {\n+\t\tC.free(unsafe.Pointer(cstr))\n+\t}\n+\n+\t// Make sure we've cleaned up all the buffers we malloced when we're sure we don't need em anymore\n+\tif ss.authComplete || ss.errored {",
        "path": "sasl/sasl_sspi.go",
        "position": 101,
        "original_position": 101,
        "commit_id": "5e6a8540220ed4f0a762c5cef1cf3803dbd132bc",
        "original_commit_id": "9bd76be098b9298f29c42c547d0581bb90f4a41d",
        "user": {
            "login": "vkarpov15",
            "id": 1620265,
            "node_id": "MDQ6VXNlcjE2MjAyNjU=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/1620265?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/vkarpov15",
            "html_url": "https://github.com/vkarpov15",
            "followers_url": "https://api.github.com/users/vkarpov15/followers",
            "following_url": "https://api.github.com/users/vkarpov15/following{/other_user}",
            "gists_url": "https://api.github.com/users/vkarpov15/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/vkarpov15/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/vkarpov15/subscriptions",
            "organizations_url": "https://api.github.com/users/vkarpov15/orgs",
            "repos_url": "https://api.github.com/users/vkarpov15/repos",
            "events_url": "https://api.github.com/users/vkarpov15/events{/privacy}",
            "received_events_url": "https://api.github.com/users/vkarpov15/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Ok done\n",
        "created_at": "2014-09-17T20:28:27Z",
        "updated_at": "2014-09-18T14:26:25Z",
        "html_url": "https://github.com/go-mgo/mgo/pull/20#discussion_r17691595",
        "pull_request_url": "https://api.github.com/repos/go-mgo/mgo/pulls/20",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/17691595"
            },
            "html": {
                "href": "https://github.com/go-mgo/mgo/pull/20#discussion_r17691595"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/20"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/17691876",
        "pull_request_review_id": null,
        "id": 17691876,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NjkxODc2",
        "diff_hunk": "@@ -0,0 +1,244 @@\n+#include \"kerberos_sspi.h\"",
        "path": "sasl/kerberos_sspi.c",
        "position": 2,
        "original_position": 1,
        "commit_id": "5e6a8540220ed4f0a762c5cef1cf3803dbd132bc",
        "original_commit_id": "9bd76be098b9298f29c42c547d0581bb90f4a41d",
        "user": {
            "login": "vkarpov15",
            "id": 1620265,
            "node_id": "MDQ6VXNlcjE2MjAyNjU=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/1620265?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/vkarpov15",
            "html_url": "https://github.com/vkarpov15",
            "followers_url": "https://api.github.com/users/vkarpov15/followers",
            "following_url": "https://api.github.com/users/vkarpov15/following{/other_user}",
            "gists_url": "https://api.github.com/users/vkarpov15/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/vkarpov15/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/vkarpov15/subscriptions",
            "organizations_url": "https://api.github.com/users/vkarpov15/orgs",
            "repos_url": "https://api.github.com/users/vkarpov15/repos",
            "events_url": "https://api.github.com/users/vkarpov15/events{/privacy}",
            "received_events_url": "https://api.github.com/users/vkarpov15/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Done\n",
        "created_at": "2014-09-17T20:33:01Z",
        "updated_at": "2014-09-18T14:26:25Z",
        "html_url": "https://github.com/go-mgo/mgo/pull/20#discussion_r17691876",
        "pull_request_url": "https://api.github.com/repos/go-mgo/mgo/pulls/20",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/17691876"
            },
            "html": {
                "href": "https://github.com/go-mgo/mgo/pull/20#discussion_r17691876"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/20"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/17691990",
        "pull_request_review_id": null,
        "id": 17691990,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NjkxOTkw",
        "diff_hunk": "@@ -0,0 +1,144 @@\n+// +build windows",
        "path": "sasl/sasl_sspi.go",
        "position": 1,
        "original_position": 1,
        "commit_id": "5e6a8540220ed4f0a762c5cef1cf3803dbd132bc",
        "original_commit_id": "9bd76be098b9298f29c42c547d0581bb90f4a41d",
        "user": {
            "login": "vkarpov15",
            "id": 1620265,
            "node_id": "MDQ6VXNlcjE2MjAyNjU=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/1620265?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/vkarpov15",
            "html_url": "https://github.com/vkarpov15",
            "followers_url": "https://api.github.com/users/vkarpov15/followers",
            "following_url": "https://api.github.com/users/vkarpov15/following{/other_user}",
            "gists_url": "https://api.github.com/users/vkarpov15/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/vkarpov15/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/vkarpov15/subscriptions",
            "organizations_url": "https://api.github.com/users/vkarpov15/orgs",
            "repos_url": "https://api.github.com/users/vkarpov15/repos",
            "events_url": "https://api.github.com/users/vkarpov15/events{/privacy}",
            "received_events_url": "https://api.github.com/users/vkarpov15/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Done\n",
        "created_at": "2014-09-17T20:34:23Z",
        "updated_at": "2014-09-18T14:26:25Z",
        "html_url": "https://github.com/go-mgo/mgo/pull/20#discussion_r17691990",
        "pull_request_url": "https://api.github.com/repos/go-mgo/mgo/pulls/20",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/17691990"
            },
            "html": {
                "href": "https://github.com/go-mgo/mgo/pull/20#discussion_r17691990"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/20"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/17730226",
        "pull_request_review_id": null,
        "id": 17730226,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NzMwMjI2",
        "diff_hunk": "@@ -0,0 +1,244 @@\n+#include \"kerberos_sspi.h\"\n+#include <stdlib.h>\n+#include <stdio.h>\n+\n+static HINSTANCE _sspi_security_dll = NULL; \n+static HINSTANCE _sspi_secur32_dll = NULL;\n+\n+/**\n+ * Encrypt A Message\n+ */\n+SECURITY_STATUS SEC_ENTRY _sspi_EncryptMessage(PCtxtHandle phContext, unsigned long fQOP, PSecBufferDesc pMessage, unsigned long MessageSeqNo) {\n+  // Create function pointer instance\n+  encryptMessage_fn pfn_encryptMessage = NULL;",
        "path": "sasl/kerberos_sspi.c",
        "position": null,
        "original_position": 13,
        "commit_id": "5e6a8540220ed4f0a762c5cef1cf3803dbd132bc",
        "original_commit_id": "9bd76be098b9298f29c42c547d0581bb90f4a41d",
        "user": {
            "login": "niemeyer",
            "id": 378683,
            "node_id": "MDQ6VXNlcjM3ODY4Mw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/378683?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/niemeyer",
            "html_url": "https://github.com/niemeyer",
            "followers_url": "https://api.github.com/users/niemeyer/followers",
            "following_url": "https://api.github.com/users/niemeyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/niemeyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/niemeyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/niemeyer/subscriptions",
            "organizations_url": "https://api.github.com/users/niemeyer/orgs",
            "repos_url": "https://api.github.com/users/niemeyer/repos",
            "events_url": "https://api.github.com/users/niemeyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/niemeyer/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "This still needs addressing in #25.\n",
        "created_at": "2014-09-18T14:34:33Z",
        "updated_at": "2014-09-18T14:34:33Z",
        "html_url": "https://github.com/go-mgo/mgo/pull/20#discussion_r17730226",
        "pull_request_url": "https://api.github.com/repos/go-mgo/mgo/pulls/20",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/17730226"
            },
            "html": {
                "href": "https://github.com/go-mgo/mgo/pull/20#discussion_r17730226"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/20"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/17730332",
        "pull_request_review_id": null,
        "id": 17730332,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NzMwMzMy",
        "diff_hunk": "@@ -0,0 +1,244 @@\n+#include \"kerberos_sspi.h\"",
        "path": "sasl/kerberos_sspi.c",
        "position": 2,
        "original_position": 1,
        "commit_id": "5e6a8540220ed4f0a762c5cef1cf3803dbd132bc",
        "original_commit_id": "9bd76be098b9298f29c42c547d0581bb90f4a41d",
        "user": {
            "login": "niemeyer",
            "id": 378683,
            "node_id": "MDQ6VXNlcjM3ODY4Mw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/378683?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/niemeyer",
            "html_url": "https://github.com/niemeyer",
            "followers_url": "https://api.github.com/users/niemeyer/followers",
            "following_url": "https://api.github.com/users/niemeyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/niemeyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/niemeyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/niemeyer/subscriptions",
            "organizations_url": "https://api.github.com/users/niemeyer/orgs",
            "repos_url": "https://api.github.com/users/niemeyer/repos",
            "events_url": "https://api.github.com/users/niemeyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/niemeyer/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Doesn't look done here or in #25.\n",
        "created_at": "2014-09-18T14:35:52Z",
        "updated_at": "2014-09-18T14:35:52Z",
        "html_url": "https://github.com/go-mgo/mgo/pull/20#discussion_r17730332",
        "pull_request_url": "https://api.github.com/repos/go-mgo/mgo/pulls/20",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/17730332"
            },
            "html": {
                "href": "https://github.com/go-mgo/mgo/pull/20#discussion_r17730332"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/20"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/17730535",
        "pull_request_review_id": null,
        "id": 17730535,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NzMwNTM1",
        "diff_hunk": "@@ -0,0 +1,144 @@\n+// +build windows",
        "path": "sasl/sasl_sspi.go",
        "position": 1,
        "original_position": 1,
        "commit_id": "5e6a8540220ed4f0a762c5cef1cf3803dbd132bc",
        "original_commit_id": "9bd76be098b9298f29c42c547d0581bb90f4a41d",
        "user": {
            "login": "niemeyer",
            "id": 378683,
            "node_id": "MDQ6VXNlcjM3ODY4Mw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/378683?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/niemeyer",
            "html_url": "https://github.com/niemeyer",
            "followers_url": "https://api.github.com/users/niemeyer/followers",
            "following_url": "https://api.github.com/users/niemeyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/niemeyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/niemeyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/niemeyer/subscriptions",
            "organizations_url": "https://api.github.com/users/niemeyer/orgs",
            "repos_url": "https://api.github.com/users/niemeyer/repos",
            "events_url": "https://api.github.com/users/niemeyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/niemeyer/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Doesn't look done, here or in #25.\n",
        "created_at": "2014-09-18T14:38:55Z",
        "updated_at": "2014-09-18T14:38:55Z",
        "html_url": "https://github.com/go-mgo/mgo/pull/20#discussion_r17730535",
        "pull_request_url": "https://api.github.com/repos/go-mgo/mgo/pulls/20",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/17730535"
            },
            "html": {
                "href": "https://github.com/go-mgo/mgo/pull/20#discussion_r17730535"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/20"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/17733456",
        "pull_request_review_id": null,
        "id": 17733456,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NzMzNDU2",
        "diff_hunk": "@@ -2,6 +2,9 @@\n //\n // This package is not meant to be used by itself.\n //\n+\n+// +build linux darwin",
        "path": "sasl/sasl.go",
        "position": null,
        "original_position": 5,
        "commit_id": "10ffa59258a3c5e271ca694388f0bcc4a655a5c7",
        "original_commit_id": "5c137f56eb5545db0ffe2f2643e13bf1fa2c6ab8",
        "user": {
            "login": "niemeyer",
            "id": 378683,
            "node_id": "MDQ6VXNlcjM3ODY4Mw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/378683?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/niemeyer",
            "html_url": "https://github.com/niemeyer",
            "followers_url": "https://api.github.com/users/niemeyer/followers",
            "following_url": "https://api.github.com/users/niemeyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/niemeyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/niemeyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/niemeyer/subscriptions",
            "organizations_url": "https://api.github.com/users/niemeyer/orgs",
            "repos_url": "https://api.github.com/users/niemeyer/repos",
            "events_url": "https://api.github.com/users/niemeyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/niemeyer/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "// +build !windows\n",
        "created_at": "2014-09-18T15:18:32Z",
        "updated_at": "2014-09-23T17:19:01Z",
        "html_url": "https://github.com/go-mgo/mgo/pull/25#discussion_r17733456",
        "pull_request_url": "https://api.github.com/repos/go-mgo/mgo/pulls/25",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/17733456"
            },
            "html": {
                "href": "https://github.com/go-mgo/mgo/pull/25#discussion_r17733456"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/25"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/17733561",
        "pull_request_review_id": null,
        "id": 17733561,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NzMzNTYx",
        "diff_hunk": "@@ -0,0 +1,142 @@\n+package sasl\n+\n+//\n+// #include \"sasl_windows.h\"\n+//\n+import \"C\"\n+\n+import (\n+\t\"fmt\"\n+\t\"strings\"\n+\t\"sync\"\n+\t\"unsafe\"\n+)\n+\n+type saslStepper interface {\n+\tStep(serverData []byte) (clientData []byte, done bool, err error)\n+\tClose()\n+}\n+\n+type saslSession struct {\n+\t// Credentials\n+\tmech          string\n+\tservice       string\n+\thost          string\n+\tuserPlusRealm string\n+\n+\t// Internal state\n+\tauthComplete bool\n+\terrored      bool\n+\tstep         int\n+\n+\t// C internal state\n+\tcredHandle C.CredHandle\n+\tcontext    C.CtxtHandle\n+\thasContext C.int\n+\n+\t// Keep track of pointers we need to explicitly free\n+\tstringsToFree []*C.char\n+\tbuffersToFree []C.PVOID\n+}\n+\n+var initError error\n+var initOnce sync.Once\n+\n+func initSSPI() {\n+\trc := C.load_library()\n+\tif rc != 0 {\n+\t\tinitError = fmt.Errorf(\"Error loading libraries: %v\", rc)\n+\t}\n+}\n+\n+func New(username, password, mechanism, service, host string) (saslStepper, error) {\n+\tinitOnce.Do(initSSPI)\n+\tss := &saslSession{mech: mechanism, hasContext: 0, userPlusRealm: username}\n+\tif service == \"\" {\n+\t\tservice = \"mongodb\"\n+\t}\n+\tif i := strings.Index(host, \":\"); i >= 0 {\n+\t\thost = host[:i]\n+\t}\n+\tss.service = service\n+\tss.host = host\n+\n+\tusernameComponents := strings.Split(username, \"@\")\n+\tif len(usernameComponents) < 2 {\n+\t\treturn nil, fmt.Errorf(\"Username '%v' doesn't contain a realm!\", username)\n+\t}\n+\tuser := usernameComponents[0]\n+\tdomain := usernameComponents[1]\n+\n+\tvar status C.SECURITY_STATUS\n+\t// Step 0: call AcquireCredentialsHandle to get a nice SSPI CredHandle\n+\tif len(password) > 0 {\n+\t\tstatus = C.sspi_acquire_credentials_handle(&ss.credHandle, ss.cstr(user), ss.cstr(password), ss.cstr(domain))\n+\t} else {\n+\t\tstatus = C.sspi_acquire_credentials_handle(&ss.credHandle, ss.cstr(user), nil, ss.cstr(domain))\n+\t}\n+\n+\tif status != C.SEC_E_OK {\n+\t\tss.errored = true\n+\t\treturn nil, fmt.Errorf(\"Couldn't create new SSPI client, error code %v\", status)\n+\t}\n+\n+\treturn ss, nil\n+}\n+\n+func (ss *saslSession) cstr(s string) *C.char {\n+\tcstr := C.CString(s)\n+\tss.stringsToFree = append(ss.stringsToFree, cstr)\n+\treturn cstr\n+}\n+\n+func (ss *saslSession) Close() {\n+\tfor _, cstr := range ss.stringsToFree {\n+\t\tC.free(unsafe.Pointer(cstr))\n+\t}\n+\n+\t// Make sure we've cleaned up all the buffers we malloced when we're sure we don't need em anymore\n+\tif ss.authComplete || ss.errored {",
        "path": "sasl/sasl_windows.go",
        "position": null,
        "original_position": 99,
        "commit_id": "10ffa59258a3c5e271ca694388f0bcc4a655a5c7",
        "original_commit_id": "5c137f56eb5545db0ffe2f2643e13bf1fa2c6ab8",
        "user": {
            "login": "niemeyer",
            "id": 378683,
            "node_id": "MDQ6VXNlcjM3ODY4Mw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/378683?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/niemeyer",
            "html_url": "https://github.com/niemeyer",
            "followers_url": "https://api.github.com/users/niemeyer/followers",
            "following_url": "https://api.github.com/users/niemeyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/niemeyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/niemeyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/niemeyer/subscriptions",
            "organizations_url": "https://api.github.com/users/niemeyer/orgs",
            "repos_url": "https://api.github.com/users/niemeyer/repos",
            "events_url": "https://api.github.com/users/niemeyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/niemeyer/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "This was discussed in the prior review, and still looks pending.\n",
        "created_at": "2014-09-18T15:19:44Z",
        "updated_at": "2014-09-23T17:19:01Z",
        "html_url": "https://github.com/go-mgo/mgo/pull/25#discussion_r17733561",
        "pull_request_url": "https://api.github.com/repos/go-mgo/mgo/pulls/25",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/17733561"
            },
            "html": {
                "href": "https://github.com/go-mgo/mgo/pull/25#discussion_r17733561"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/25"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/17733745",
        "pull_request_review_id": null,
        "id": 17733745,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NzMzNzQ1",
        "diff_hunk": "@@ -0,0 +1,126 @@\n+#ifdef _WIN32",
        "path": "sasl/sasl_windows.c",
        "position": null,
        "original_position": 1,
        "commit_id": "10ffa59258a3c5e271ca694388f0bcc4a655a5c7",
        "original_commit_id": "5c137f56eb5545db0ffe2f2643e13bf1fa2c6ab8",
        "user": {
            "login": "niemeyer",
            "id": 378683,
            "node_id": "MDQ6VXNlcjM3ODY4Mw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/378683?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/niemeyer",
            "html_url": "https://github.com/niemeyer",
            "followers_url": "https://api.github.com/users/niemeyer/followers",
            "following_url": "https://api.github.com/users/niemeyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/niemeyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/niemeyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/niemeyer/subscriptions",
            "organizations_url": "https://api.github.com/users/niemeyer/orgs",
            "repos_url": "https://api.github.com/users/niemeyer/repos",
            "events_url": "https://api.github.com/users/niemeyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/niemeyer/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I don't think this file will get built when not on windows, given its name.\n",
        "created_at": "2014-09-18T15:21:58Z",
        "updated_at": "2014-09-23T17:19:01Z",
        "html_url": "https://github.com/go-mgo/mgo/pull/25#discussion_r17733745",
        "pull_request_url": "https://api.github.com/repos/go-mgo/mgo/pulls/25",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/17733745"
            },
            "html": {
                "href": "https://github.com/go-mgo/mgo/pull/25#discussion_r17733745"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/25"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/17733769",
        "pull_request_review_id": null,
        "id": 17733769,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NzMzNzY5",
        "diff_hunk": "@@ -0,0 +1,9 @@\n+#ifdef _WIN32",
        "path": "sasl/sasl_windows.h",
        "position": null,
        "original_position": 1,
        "commit_id": "10ffa59258a3c5e271ca694388f0bcc4a655a5c7",
        "original_commit_id": "5c137f56eb5545db0ffe2f2643e13bf1fa2c6ab8",
        "user": {
            "login": "niemeyer",
            "id": 378683,
            "node_id": "MDQ6VXNlcjM3ODY4Mw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/378683?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/niemeyer",
            "html_url": "https://github.com/niemeyer",
            "followers_url": "https://api.github.com/users/niemeyer/followers",
            "following_url": "https://api.github.com/users/niemeyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/niemeyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/niemeyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/niemeyer/subscriptions",
            "organizations_url": "https://api.github.com/users/niemeyer/orgs",
            "repos_url": "https://api.github.com/users/niemeyer/repos",
            "events_url": "https://api.github.com/users/niemeyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/niemeyer/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I don't think this file will get built when not on windows, given its name.\n",
        "created_at": "2014-09-18T15:22:11Z",
        "updated_at": "2014-09-23T17:19:01Z",
        "html_url": "https://github.com/go-mgo/mgo/pull/25#discussion_r17733769",
        "pull_request_url": "https://api.github.com/repos/go-mgo/mgo/pulls/25",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/17733769"
            },
            "html": {
                "href": "https://github.com/go-mgo/mgo/pull/25#discussion_r17733769"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/25"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/17735687",
        "pull_request_review_id": null,
        "id": 17735687,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NzM1Njg3",
        "diff_hunk": "@@ -0,0 +1,9 @@\n+#ifdef _WIN32",
        "path": "sasl/sasl_windows.h",
        "position": null,
        "original_position": 1,
        "commit_id": "10ffa59258a3c5e271ca694388f0bcc4a655a5c7",
        "original_commit_id": "5c137f56eb5545db0ffe2f2643e13bf1fa2c6ab8",
        "user": {
            "login": "vkarpov15",
            "id": 1620265,
            "node_id": "MDQ6VXNlcjE2MjAyNjU=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/1620265?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/vkarpov15",
            "html_url": "https://github.com/vkarpov15",
            "followers_url": "https://api.github.com/users/vkarpov15/followers",
            "following_url": "https://api.github.com/users/vkarpov15/following{/other_user}",
            "gists_url": "https://api.github.com/users/vkarpov15/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/vkarpov15/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/vkarpov15/subscriptions",
            "organizations_url": "https://api.github.com/users/vkarpov15/orgs",
            "repos_url": "https://api.github.com/users/vkarpov15/repos",
            "events_url": "https://api.github.com/users/vkarpov15/events{/privacy}",
            "received_events_url": "https://api.github.com/users/vkarpov15/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "done\n",
        "created_at": "2014-09-18T15:49:40Z",
        "updated_at": "2014-09-23T17:19:01Z",
        "html_url": "https://github.com/go-mgo/mgo/pull/25#discussion_r17735687",
        "pull_request_url": "https://api.github.com/repos/go-mgo/mgo/pulls/25",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/17735687"
            },
            "html": {
                "href": "https://github.com/go-mgo/mgo/pull/25#discussion_r17735687"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/25"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/17735692",
        "pull_request_review_id": null,
        "id": 17735692,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NzM1Njky",
        "diff_hunk": "@@ -0,0 +1,126 @@\n+#ifdef _WIN32",
        "path": "sasl/sasl_windows.c",
        "position": null,
        "original_position": 1,
        "commit_id": "10ffa59258a3c5e271ca694388f0bcc4a655a5c7",
        "original_commit_id": "5c137f56eb5545db0ffe2f2643e13bf1fa2c6ab8",
        "user": {
            "login": "vkarpov15",
            "id": 1620265,
            "node_id": "MDQ6VXNlcjE2MjAyNjU=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/1620265?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/vkarpov15",
            "html_url": "https://github.com/vkarpov15",
            "followers_url": "https://api.github.com/users/vkarpov15/followers",
            "following_url": "https://api.github.com/users/vkarpov15/following{/other_user}",
            "gists_url": "https://api.github.com/users/vkarpov15/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/vkarpov15/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/vkarpov15/subscriptions",
            "organizations_url": "https://api.github.com/users/vkarpov15/orgs",
            "repos_url": "https://api.github.com/users/vkarpov15/repos",
            "events_url": "https://api.github.com/users/vkarpov15/events{/privacy}",
            "received_events_url": "https://api.github.com/users/vkarpov15/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "done\n",
        "created_at": "2014-09-18T15:49:44Z",
        "updated_at": "2014-09-23T17:19:01Z",
        "html_url": "https://github.com/go-mgo/mgo/pull/25#discussion_r17735692",
        "pull_request_url": "https://api.github.com/repos/go-mgo/mgo/pulls/25",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/17735692"
            },
            "html": {
                "href": "https://github.com/go-mgo/mgo/pull/25#discussion_r17735692"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/25"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/17735697",
        "pull_request_review_id": null,
        "id": 17735697,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NzM1Njk3",
        "diff_hunk": "@@ -0,0 +1,142 @@\n+package sasl\n+\n+//\n+// #include \"sasl_windows.h\"\n+//\n+import \"C\"\n+\n+import (\n+\t\"fmt\"\n+\t\"strings\"\n+\t\"sync\"\n+\t\"unsafe\"\n+)\n+\n+type saslStepper interface {\n+\tStep(serverData []byte) (clientData []byte, done bool, err error)\n+\tClose()\n+}\n+\n+type saslSession struct {\n+\t// Credentials\n+\tmech          string\n+\tservice       string\n+\thost          string\n+\tuserPlusRealm string\n+\n+\t// Internal state\n+\tauthComplete bool\n+\terrored      bool\n+\tstep         int\n+\n+\t// C internal state\n+\tcredHandle C.CredHandle\n+\tcontext    C.CtxtHandle\n+\thasContext C.int\n+\n+\t// Keep track of pointers we need to explicitly free\n+\tstringsToFree []*C.char\n+\tbuffersToFree []C.PVOID\n+}\n+\n+var initError error\n+var initOnce sync.Once\n+\n+func initSSPI() {\n+\trc := C.load_library()\n+\tif rc != 0 {\n+\t\tinitError = fmt.Errorf(\"Error loading libraries: %v\", rc)\n+\t}\n+}\n+\n+func New(username, password, mechanism, service, host string) (saslStepper, error) {\n+\tinitOnce.Do(initSSPI)\n+\tss := &saslSession{mech: mechanism, hasContext: 0, userPlusRealm: username}\n+\tif service == \"\" {\n+\t\tservice = \"mongodb\"\n+\t}\n+\tif i := strings.Index(host, \":\"); i >= 0 {\n+\t\thost = host[:i]\n+\t}\n+\tss.service = service\n+\tss.host = host\n+\n+\tusernameComponents := strings.Split(username, \"@\")\n+\tif len(usernameComponents) < 2 {\n+\t\treturn nil, fmt.Errorf(\"Username '%v' doesn't contain a realm!\", username)\n+\t}\n+\tuser := usernameComponents[0]\n+\tdomain := usernameComponents[1]\n+\n+\tvar status C.SECURITY_STATUS\n+\t// Step 0: call AcquireCredentialsHandle to get a nice SSPI CredHandle\n+\tif len(password) > 0 {\n+\t\tstatus = C.sspi_acquire_credentials_handle(&ss.credHandle, ss.cstr(user), ss.cstr(password), ss.cstr(domain))\n+\t} else {\n+\t\tstatus = C.sspi_acquire_credentials_handle(&ss.credHandle, ss.cstr(user), nil, ss.cstr(domain))\n+\t}\n+\n+\tif status != C.SEC_E_OK {\n+\t\tss.errored = true\n+\t\treturn nil, fmt.Errorf(\"Couldn't create new SSPI client, error code %v\", status)\n+\t}\n+\n+\treturn ss, nil\n+}\n+\n+func (ss *saslSession) cstr(s string) *C.char {\n+\tcstr := C.CString(s)\n+\tss.stringsToFree = append(ss.stringsToFree, cstr)\n+\treturn cstr\n+}\n+\n+func (ss *saslSession) Close() {\n+\tfor _, cstr := range ss.stringsToFree {\n+\t\tC.free(unsafe.Pointer(cstr))\n+\t}\n+\n+\t// Make sure we've cleaned up all the buffers we malloced when we're sure we don't need em anymore\n+\tif ss.authComplete || ss.errored {",
        "path": "sasl/sasl_windows.go",
        "position": null,
        "original_position": 99,
        "commit_id": "10ffa59258a3c5e271ca694388f0bcc4a655a5c7",
        "original_commit_id": "5c137f56eb5545db0ffe2f2643e13bf1fa2c6ab8",
        "user": {
            "login": "vkarpov15",
            "id": 1620265,
            "node_id": "MDQ6VXNlcjE2MjAyNjU=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/1620265?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/vkarpov15",
            "html_url": "https://github.com/vkarpov15",
            "followers_url": "https://api.github.com/users/vkarpov15/followers",
            "following_url": "https://api.github.com/users/vkarpov15/following{/other_user}",
            "gists_url": "https://api.github.com/users/vkarpov15/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/vkarpov15/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/vkarpov15/subscriptions",
            "organizations_url": "https://api.github.com/users/vkarpov15/orgs",
            "repos_url": "https://api.github.com/users/vkarpov15/repos",
            "events_url": "https://api.github.com/users/vkarpov15/events{/privacy}",
            "received_events_url": "https://api.github.com/users/vkarpov15/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "done\n",
        "created_at": "2014-09-18T15:49:49Z",
        "updated_at": "2014-09-23T17:19:01Z",
        "html_url": "https://github.com/go-mgo/mgo/pull/25#discussion_r17735697",
        "pull_request_url": "https://api.github.com/repos/go-mgo/mgo/pulls/25",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/17735697"
            },
            "html": {
                "href": "https://github.com/go-mgo/mgo/pull/25#discussion_r17735697"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/25"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/17746213",
        "pull_request_review_id": null,
        "id": 17746213,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NzQ2MjEz",
        "diff_hunk": "@@ -2,6 +2,9 @@\n //\n // This package is not meant to be used by itself.\n //\n+\n+// +build linux darwin",
        "path": "sasl/sasl.go",
        "position": null,
        "original_position": 5,
        "commit_id": "10ffa59258a3c5e271ca694388f0bcc4a655a5c7",
        "original_commit_id": "5c137f56eb5545db0ffe2f2643e13bf1fa2c6ab8",
        "user": {
            "login": "vkarpov15",
            "id": 1620265,
            "node_id": "MDQ6VXNlcjE2MjAyNjU=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/1620265?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/vkarpov15",
            "html_url": "https://github.com/vkarpov15",
            "followers_url": "https://api.github.com/users/vkarpov15/followers",
            "following_url": "https://api.github.com/users/vkarpov15/following{/other_user}",
            "gists_url": "https://api.github.com/users/vkarpov15/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/vkarpov15/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/vkarpov15/subscriptions",
            "organizations_url": "https://api.github.com/users/vkarpov15/orgs",
            "repos_url": "https://api.github.com/users/vkarpov15/repos",
            "events_url": "https://api.github.com/users/vkarpov15/events{/privacy}",
            "received_events_url": "https://api.github.com/users/vkarpov15/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "done\n",
        "created_at": "2014-09-18T18:39:39Z",
        "updated_at": "2014-09-23T17:19:01Z",
        "html_url": "https://github.com/go-mgo/mgo/pull/25#discussion_r17746213",
        "pull_request_url": "https://api.github.com/repos/go-mgo/mgo/pulls/25",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/17746213"
            },
            "html": {
                "href": "https://github.com/go-mgo/mgo/pull/25#discussion_r17746213"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/25"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/17156393",
        "pull_request_review_id": null,
        "id": 17156393,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MTU2Mzkz",
        "diff_hunk": "@@ -910,14 +910,17 @@ func (db *Database) RemoveUser(user string) error {\n }\n \n type indexSpec struct {\n-\tName, NS       string\n-\tKey            bson.D\n-\tUnique         bool \",omitempty\"\n-\tDropDups       bool \"dropDups,omitempty\"\n-\tBackground     bool \",omitempty\"\n-\tSparse         bool \",omitempty\"\n-\tBits, Min, Max int  \",omitempty\"\n-\tExpireAfter    int  \"expireAfterSeconds,omitempty\"\n+\tName, NS          string\n+\tKey               bson.D\n+\tUnique            bool   \",omitempty\"\n+\tDropDups          bool   \"dropDups,omitempty\"\n+\tBackground        bool   \",omitempty\"\n+\tSparse            bool   \",omitempty\"\n+\tBits, Min, Max    int    \",omitempty\"\n+\tExpireAfter       int    \"expireAfterSeconds,omitempty\"\n+\tWeights           bson.M \",omitempty\"\n+\tDefault_language  string \",omitempty\"\n+\tLanguage_override string \",omitempty\"",
        "path": "session.go",
        "position": null,
        "original_position": 22,
        "commit_id": "beff0a0cc47dfe0e5fd13ae0915f6c1863987325",
        "original_commit_id": "268a9601d13518c2d19c62cec2cfa004df8cc83f",
        "user": {
            "login": "niemeyer",
            "id": 378683,
            "node_id": "MDQ6VXNlcjM3ODY4Mw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/378683?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/niemeyer",
            "html_url": "https://github.com/niemeyer",
            "followers_url": "https://api.github.com/users/niemeyer/followers",
            "following_url": "https://api.github.com/users/niemeyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/niemeyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/niemeyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/niemeyer/subscriptions",
            "organizations_url": "https://api.github.com/users/niemeyer/orgs",
            "repos_url": "https://api.github.com/users/niemeyer/repos",
            "events_url": "https://api.github.com/users/niemeyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/niemeyer/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Please use standard Go names for the fields (e.g. DefaultLanguage) and use the field tag to adjust the name as necessary (see ExpireAfter above). \n",
        "created_at": "2014-09-05T04:15:02Z",
        "updated_at": "2014-10-04T01:25:25Z",
        "html_url": "https://github.com/go-mgo/mgo/pull/16#discussion_r17156393",
        "pull_request_url": "https://api.github.com/repos/go-mgo/mgo/pulls/16",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/17156393"
            },
            "html": {
                "href": "https://github.com/go-mgo/mgo/pull/16#discussion_r17156393"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/16"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/17156456",
        "pull_request_review_id": null,
        "id": 17156456,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MTU2NDU2",
        "diff_hunk": "@@ -932,9 +935,19 @@ type Index struct {\n \tName string // Index name, computed by EnsureIndex\n \n \tBits, Min, Max int // Properties for spatial indexes\n+\n+\t// Properties for text indexes\n+\tWeights          map[string]int\n+\tDefaultLanguage  string\n+\tLanguageOverride string\n }\n \n-func parseIndexKey(key []string) (name string, realKey bson.D, err error) {\n+func parseIndexKey(key []string, weights map[string]int) (name string, realKey bson.D, realWeights bson.M, err error) {\n+\tisText := false\n+\trealWeights = bson.M{}\n+\tfor k, v := range weights { //FIXME: this is uggly",
        "path": "session.go",
        "position": null,
        "original_position": 41,
        "commit_id": "beff0a0cc47dfe0e5fd13ae0915f6c1863987325",
        "original_commit_id": "268a9601d13518c2d19c62cec2cfa004df8cc83f",
        "user": {
            "login": "niemeyer",
            "id": 378683,
            "node_id": "MDQ6VXNlcjM3ODY4Mw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/378683?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/niemeyer",
            "html_url": "https://github.com/niemeyer",
            "followers_url": "https://api.github.com/users/niemeyer/followers",
            "following_url": "https://api.github.com/users/niemeyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/niemeyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/niemeyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/niemeyer/subscriptions",
            "organizations_url": "https://api.github.com/users/niemeyer/orgs",
            "repos_url": "https://api.github.com/users/niemeyer/repos",
            "events_url": "https://api.github.com/users/niemeyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/niemeyer/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "The whole logic around weight is not looking great. Too many result arguments, duplication, etc.\n\nLet's implement this as part of the string itself:\n\n```\n$text,weight=1:foo\n```\n\nThat said, let's please do that in a separate pull request. Just elide all references to weight here, and let's get this merged sooner rather than later.\n",
        "created_at": "2014-09-05T04:19:32Z",
        "updated_at": "2014-10-04T01:25:25Z",
        "html_url": "https://github.com/go-mgo/mgo/pull/16#discussion_r17156456",
        "pull_request_url": "https://api.github.com/repos/go-mgo/mgo/pulls/16",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/17156456"
            },
            "html": {
                "href": "https://github.com/go-mgo/mgo/pull/16#discussion_r17156456"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/16"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/17156565",
        "pull_request_review_id": null,
        "id": 17156565,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MTU2NTY1",
        "diff_hunk": "@@ -2073,6 +2073,56 @@ func (s *S) TestSortWithBadArgs(c *C) {\n \t}\n }\n \n+func (s *S) TestSortScoreText(c *C) {\n+\tsession, err := mgo.Dial(\"localhost:40001\")\n+\tc.Assert(err, IsNil)\n+\tdefer session.Close()\n+\n+\tcoll := session.DB(\"mydb\").C(\"mycoll\")\n+\n+\tcoll.EnsureIndex(mgo.Index{",
        "path": "session_test.go",
        "position": null,
        "original_position": 11,
        "commit_id": "beff0a0cc47dfe0e5fd13ae0915f6c1863987325",
        "original_commit_id": "268a9601d13518c2d19c62cec2cfa004df8cc83f",
        "user": {
            "login": "niemeyer",
            "id": 378683,
            "node_id": "MDQ6VXNlcjM3ODY4Mw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/378683?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/niemeyer",
            "html_url": "https://github.com/niemeyer",
            "followers_url": "https://api.github.com/users/niemeyer/followers",
            "following_url": "https://api.github.com/users/niemeyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/niemeyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/niemeyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/niemeyer/subscriptions",
            "organizations_url": "https://api.github.com/users/niemeyer/orgs",
            "repos_url": "https://api.github.com/users/niemeyer/repos",
            "events_url": "https://api.github.com/users/niemeyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/niemeyer/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Every function that returns an error should have the error checked.\n",
        "created_at": "2014-09-05T04:28:11Z",
        "updated_at": "2014-10-04T01:25:25Z",
        "html_url": "https://github.com/go-mgo/mgo/pull/16#discussion_r17156565",
        "pull_request_url": "https://api.github.com/repos/go-mgo/mgo/pulls/16",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/17156565"
            },
            "html": {
                "href": "https://github.com/go-mgo/mgo/pull/16#discussion_r17156565"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/16"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/17156663",
        "pull_request_review_id": null,
        "id": 17156663,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MTU2NjYz",
        "diff_hunk": "@@ -2073,6 +2073,56 @@ func (s *S) TestSortWithBadArgs(c *C) {\n \t}\n }\n \n+func (s *S) TestSortScoreText(c *C) {\n+\tsession, err := mgo.Dial(\"localhost:40001\")\n+\tc.Assert(err, IsNil)\n+\tdefer session.Close()\n+\n+\tcoll := session.DB(\"mydb\").C(\"mycoll\")\n+\n+\tcoll.EnsureIndex(mgo.Index{\n+\t\tKey:     []string{\"$text:a\", \"$text:b\"},\n+\t\tWeights: map[string]int{\"a\": 5, \"b\": 2},\n+\t})\n+\n+\tcoll.Insert(M{\n+\t\t\"a\": \"new features\",\n+\t\t\"b\": \"MongoDB 2.6 is now available\",\n+\t})\n+\tcoll.Insert(M{\n+\t\t\"a\": \"many\",\n+\t\t\"b\": \"MongoDB MongoDB MongoDB MongoDB\",\n+\t})\n+\tcoll.Insert(M{\n+\t\t\"a\": \"MongoDB Manual\",\n+\t\t\"b\": \"is an open-source document-oriented database\",\n+\t})\n+\n+\tquery := coll.Find(M{\"$text\": M{\"$search\": \"MongoDB\"}})\n+\tquery.Select(M{\"score\": M{\"$meta\": \"textScore\"}})\n+\tquery.Sort(\"$textScore:score\")\n+\titer := query.Iter()\n+\n+\tl := make([]string, 6)\n+\tr := struct{ A, B string }{}\n+\tfor i := 0; i != len(l); i += 2 {\n+\t\tok := iter.Next(&r)",
        "path": "session_test.go",
        "position": null,
        "original_position": 37,
        "commit_id": "beff0a0cc47dfe0e5fd13ae0915f6c1863987325",
        "original_commit_id": "268a9601d13518c2d19c62cec2cfa004df8cc83f",
        "user": {
            "login": "niemeyer",
            "id": 378683,
            "node_id": "MDQ6VXNlcjM3ODY4Mw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/378683?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/niemeyer",
            "html_url": "https://github.com/niemeyer",
            "followers_url": "https://api.github.com/users/niemeyer/followers",
            "following_url": "https://api.github.com/users/niemeyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/niemeyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/niemeyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/niemeyer/subscriptions",
            "organizations_url": "https://api.github.com/users/niemeyer/orgs",
            "repos_url": "https://api.github.com/users/niemeyer/repos",
            "events_url": "https://api.github.com/users/niemeyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/niemeyer/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Rather than guessing the precise response, please exhaust the iterator as usual (`for iter.Next(&r) { ... }`) appending r.A and r.B to a slice that is uninitialized to begin with (`var results []string` and `results = append(results, r.A, r.B)`), and then compare the outcome to the expected value as you're doing below.\n",
        "created_at": "2014-09-05T04:35:47Z",
        "updated_at": "2014-10-04T01:25:25Z",
        "html_url": "https://github.com/go-mgo/mgo/pull/16#discussion_r17156663",
        "pull_request_url": "https://api.github.com/repos/go-mgo/mgo/pulls/16",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/17156663"
            },
            "html": {
                "href": "https://github.com/go-mgo/mgo/pull/16#discussion_r17156663"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/16"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/17156721",
        "pull_request_review_id": null,
        "id": 17156721,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MTU2NzIx",
        "diff_hunk": "@@ -2073,6 +2073,56 @@ func (s *S) TestSortWithBadArgs(c *C) {\n \t}\n }\n \n+func (s *S) TestSortScoreText(c *C) {\n+\tsession, err := mgo.Dial(\"localhost:40001\")\n+\tc.Assert(err, IsNil)\n+\tdefer session.Close()\n+\n+\tcoll := session.DB(\"mydb\").C(\"mycoll\")\n+\n+\tcoll.EnsureIndex(mgo.Index{\n+\t\tKey:     []string{\"$text:a\", \"$text:b\"},\n+\t\tWeights: map[string]int{\"a\": 5, \"b\": 2},\n+\t})\n+\n+\tcoll.Insert(M{\n+\t\t\"a\": \"new features\",\n+\t\t\"b\": \"MongoDB 2.6 is now available\",\n+\t})\n+\tcoll.Insert(M{\n+\t\t\"a\": \"many\",\n+\t\t\"b\": \"MongoDB MongoDB MongoDB MongoDB\",\n+\t})\n+\tcoll.Insert(M{\n+\t\t\"a\": \"MongoDB Manual\",\n+\t\t\"b\": \"is an open-source document-oriented database\",\n+\t})\n+\n+\tquery := coll.Find(M{\"$text\": M{\"$search\": \"MongoDB\"}})\n+\tquery.Select(M{\"score\": M{\"$meta\": \"textScore\"}})\n+\tquery.Sort(\"$textScore:score\")\n+\titer := query.Iter()\n+\n+\tl := make([]string, 6)\n+\tr := struct{ A, B string }{}\n+\tfor i := 0; i != len(l); i += 2 {\n+\t\tok := iter.Next(&r)\n+\t\tc.Assert(ok, Equals, true)\n+\t\tc.Assert(err, IsNil)\n+\t\tl[i] = r.A\n+\t\tl[i+1] = r.B\n+\t}\n+\n+\tc.Assert(l, DeepEquals, []string{\n+\t\t\"many\",\n+\t\t\"MongoDB MongoDB MongoDB MongoDB\",\n+\t\t\"MongoDB Manual\",\n+\t\t\"is an open-source document-oriented database\",\n+\t\t\"new features\",\n+\t\t\"MongoDB 2.6 is now available\",",
        "path": "session_test.go",
        "position": null,
        "original_position": 50,
        "commit_id": "beff0a0cc47dfe0e5fd13ae0915f6c1863987325",
        "original_commit_id": "268a9601d13518c2d19c62cec2cfa004df8cc83f",
        "user": {
            "login": "niemeyer",
            "id": 378683,
            "node_id": "MDQ6VXNlcjM3ODY4Mw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/378683?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/niemeyer",
            "html_url": "https://github.com/niemeyer",
            "followers_url": "https://api.github.com/users/niemeyer/followers",
            "following_url": "https://api.github.com/users/niemeyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/niemeyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/niemeyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/niemeyer/subscriptions",
            "organizations_url": "https://api.github.com/users/niemeyer/orgs",
            "repos_url": "https://api.github.com/users/niemeyer/repos",
            "events_url": "https://api.github.com/users/niemeyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/niemeyer/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "That's every single test value in the test set, and it's also hard to see why they're expected in that order at a glance.\n\nPlease:\n1. Use \"foo\" as the matching string.\n2. Use prefixes that are indicative of the test (`\"just once: foo\"`, `\"many times: foo foo foo\"`, etc).\n3. Add sample values that match only on A and only on B (`\"none\"`)\n4. Add a sample value that does not match at all.\n5. Include in the sample value that does not match a third field `\"c\"` with `\"ignore: foo\"`.\n\nThe hint is that it should be clear at a glance why the order is as suggested.\n",
        "created_at": "2014-09-05T04:40:41Z",
        "updated_at": "2014-10-04T01:25:25Z",
        "html_url": "https://github.com/go-mgo/mgo/pull/16#discussion_r17156721",
        "pull_request_url": "https://api.github.com/repos/go-mgo/mgo/pulls/16",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/17156721"
            },
            "html": {
                "href": "https://github.com/go-mgo/mgo/pull/16#discussion_r17156721"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/16"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/17158111",
        "pull_request_review_id": null,
        "id": 17158111,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MTU4MTEx",
        "diff_hunk": "@@ -932,9 +935,19 @@ type Index struct {\n \tName string // Index name, computed by EnsureIndex\n \n \tBits, Min, Max int // Properties for spatial indexes\n+\n+\t// Properties for text indexes\n+\tWeights          map[string]int\n+\tDefaultLanguage  string\n+\tLanguageOverride string\n }\n \n-func parseIndexKey(key []string) (name string, realKey bson.D, err error) {\n+func parseIndexKey(key []string, weights map[string]int) (name string, realKey bson.D, realWeights bson.M, err error) {\n+\tisText := false\n+\trealWeights = bson.M{}\n+\tfor k, v := range weights { //FIXME: this is uggly",
        "path": "session.go",
        "position": null,
        "original_position": 41,
        "commit_id": "beff0a0cc47dfe0e5fd13ae0915f6c1863987325",
        "original_commit_id": "268a9601d13518c2d19c62cec2cfa004df8cc83f",
        "user": null,
        "body": "I can not remove all support for weights from this pull-request, the weights are needed for the text indexes. The text keys in the index are not in the list of keys, only in the list of weights. I can skip implementing the user input for weights, but I still need to put the weights = 1 in the index.\n\nIt's true that there is too many result arguments. What about returning (indexSpec, error) instead of name, key & weights?\n",
        "created_at": "2014-09-05T06:08:50Z",
        "updated_at": "2014-10-04T01:25:25Z",
        "html_url": "https://github.com/go-mgo/mgo/pull/16#discussion_r17158111",
        "pull_request_url": "https://api.github.com/repos/go-mgo/mgo/pulls/16",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/17158111"
            },
            "html": {
                "href": "https://github.com/go-mgo/mgo/pull/16#discussion_r17158111"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/16"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/17180904",
        "pull_request_review_id": null,
        "id": 17180904,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MTgwOTA0",
        "diff_hunk": "@@ -2073,6 +2073,58 @@ func (s *S) TestSortWithBadArgs(c *C) {\n \t}\n }\n \n+func (s *S) TestSortScoreText(c *C) {\n+\tsession, err := mgo.Dial(\"localhost:40001\")\n+\tc.Assert(err, IsNil)\n+\tdefer session.Close()\n+\n+\tcoll := session.DB(\"mydb\").C(\"mycoll\")\n+\n+\terr = coll.EnsureIndex(mgo.Index{\n+\t\tKey: []string{\"$text:a\", \"$text:b\"},\n+\t})\n+\tc.Assert(err, IsNil)\n+\n+\terr = coll.Insert(M{\n+\t\t\"a\": \"none\",\n+\t\t\"b\": \"twice: foo foo\",\n+\t})\n+\tc.Assert(err, IsNil)\n+\terr = coll.Insert(M{\n+\t\t\"a\": \"just once: foo\",\n+\t\t\"b\": \"none\",\n+\t})\n+\tc.Assert(err, IsNil)\n+\terr = coll.Insert(M{\n+\t\t\"a\": \"many: foo foo foo\",\n+\t\t\"b\": \"none\",\n+\t})\n+\tc.Assert(err, IsNil)\n+\terr = coll.Insert(M{\n+\t\t\"a\": \"none\",\n+\t\t\"b\": \"none\",\n+\t\t\"c\": \"ignore: foo\",\n+\t})\n+\tc.Assert(err, IsNil)\n+\n+\tquery := coll.Find(M{\"$text\": M{\"$search\": \"foo\"}})\n+\tquery.Select(M{\"score\": M{\"$meta\": \"textScore\"}})\n+\tquery.Sort(\"$textScore:score\")\n+\titer := query.Iter()\n+\n+\tvar r struct{ A, B, C string }",
        "path": "session_test.go",
        "position": null,
        "original_position": 43,
        "commit_id": "beff0a0cc47dfe0e5fd13ae0915f6c1863987325",
        "original_commit_id": "9142e26fdd51968a9be781467a597ed21d31455e",
        "user": {
            "login": "niemeyer",
            "id": 378683,
            "node_id": "MDQ6VXNlcjM3ODY4Mw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/378683?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/niemeyer",
            "html_url": "https://github.com/niemeyer",
            "followers_url": "https://api.github.com/users/niemeyer/followers",
            "following_url": "https://api.github.com/users/niemeyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/niemeyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/niemeyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/niemeyer/subscriptions",
            "organizations_url": "https://api.github.com/users/niemeyer/orgs",
            "repos_url": "https://api.github.com/users/niemeyer/repos",
            "events_url": "https://api.github.com/users/niemeyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/niemeyer/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Please drop C from the list.\n",
        "created_at": "2014-09-05T16:05:27Z",
        "updated_at": "2014-10-04T01:25:25Z",
        "html_url": "https://github.com/go-mgo/mgo/pull/16#discussion_r17180904",
        "pull_request_url": "https://api.github.com/repos/go-mgo/mgo/pulls/16",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/17180904"
            },
            "html": {
                "href": "https://github.com/go-mgo/mgo/pull/16#discussion_r17180904"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/16"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/17181047",
        "pull_request_review_id": null,
        "id": 17181047,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MTgxMDQ3",
        "diff_hunk": "@@ -932,9 +935,17 @@ type Index struct {\n \tName string // Index name, computed by EnsureIndex\n \n \tBits, Min, Max int // Properties for spatial indexes\n+\n+\t// Properties for text indexes\n+\tDefaultLanguage  string\n+\tLanguageOverride string\n }\n \n-func parseIndexKey(key []string) (name string, realKey bson.D, err error) {\n+func parseIndexKey(key []string) (spec indexSpec, err error) {\n+\tname := \"\"\n+\trealKey := bson.D{}\n+\tweights := bson.M{}",
        "path": "session.go",
        "position": null,
        "original_position": 40,
        "commit_id": "beff0a0cc47dfe0e5fd13ae0915f6c1863987325",
        "original_commit_id": "9142e26fdd51968a9be781467a597ed21d31455e",
        "user": {
            "login": "niemeyer",
            "id": 378683,
            "node_id": "MDQ6VXNlcjM3ODY4Mw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/378683?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/niemeyer",
            "html_url": "https://github.com/niemeyer",
            "followers_url": "https://api.github.com/users/niemeyer/followers",
            "following_url": "https://api.github.com/users/niemeyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/niemeyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/niemeyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/niemeyer/subscriptions",
            "organizations_url": "https://api.github.com/users/niemeyer/orgs",
            "repos_url": "https://api.github.com/users/niemeyer/repos",
            "events_url": "https://api.github.com/users/niemeyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/niemeyer/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Okay, I see why you want to return weights. Please return (*indexKeyInfo, error) with:\n\n```\ntype indexKeyInfo struct {\n    name string\n    key bson.D\n    weights bson.D\n}\n```\n",
        "created_at": "2014-09-05T16:08:38Z",
        "updated_at": "2014-10-04T01:25:25Z",
        "html_url": "https://github.com/go-mgo/mgo/pull/16#discussion_r17181047",
        "pull_request_url": "https://api.github.com/repos/go-mgo/mgo/pulls/16",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/17181047"
            },
            "html": {
                "href": "https://github.com/go-mgo/mgo/pull/16#discussion_r17181047"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/16"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/17181094",
        "pull_request_review_id": null,
        "id": 17181094,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MTgxMDk0",
        "diff_hunk": "@@ -978,13 +989,25 @@ func parseIndexKey(key []string) (name string, realKey bson.D, err error) {\n \t\t\t}\n \t\t}\n \t\tif field == \"\" || kind != \"\" && order != kind {\n-\t\t\treturn \"\", nil, fmt.Errorf(`invalid index key: want \"[$<kind>:][-]<field name>\", got %q`, raw)\n+\t\t\treturn spec, fmt.Errorf(`invalid index key: want \"[$<kind>:][-]<field name>\", got %q`, raw)\n+\t\t}\n+\t\tif kind == \"text\" {\n+\t\t\tisText = true\n+\t\t\tweights[field] = 1",
        "path": "session.go",
        "position": null,
        "original_position": 54,
        "commit_id": "beff0a0cc47dfe0e5fd13ae0915f6c1863987325",
        "original_commit_id": "9142e26fdd51968a9be781467a597ed21d31455e",
        "user": {
            "login": "niemeyer",
            "id": 378683,
            "node_id": "MDQ6VXNlcjM3ODY4Mw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/378683?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/niemeyer",
            "html_url": "https://github.com/niemeyer",
            "followers_url": "https://api.github.com/users/niemeyer/followers",
            "following_url": "https://api.github.com/users/niemeyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/niemeyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/niemeyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/niemeyer/subscriptions",
            "organizations_url": "https://api.github.com/users/niemeyer/orgs",
            "repos_url": "https://api.github.com/users/niemeyer/repos",
            "events_url": "https://api.github.com/users/niemeyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/niemeyer/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "keyInfo.weights = append(keyInfo.weights, bson.DocElem{field, 1})\n",
        "created_at": "2014-09-05T16:09:36Z",
        "updated_at": "2014-10-04T01:25:25Z",
        "html_url": "https://github.com/go-mgo/mgo/pull/16#discussion_r17181094",
        "pull_request_url": "https://api.github.com/repos/go-mgo/mgo/pulls/16",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/17181094"
            },
            "html": {
                "href": "https://github.com/go-mgo/mgo/pull/16#discussion_r17181094"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/16"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/17251933",
        "pull_request_review_id": null,
        "id": 17251933,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MjUxOTMz",
        "diff_hunk": "@@ -932,14 +935,26 @@ type Index struct {\n \tName string // Index name, computed by EnsureIndex\n \n \tBits, Min, Max int // Properties for spatial indexes\n+\n+\t// Properties for text indexes\n+\tDefaultLanguage  string\n+\tLanguageOverride string\n+}\n+\n+type indexKeyInfo struct {\n+\tname    string\n+\tkey     bson.D\n+\tweights bson.D\n }\n \n-func parseIndexKey(key []string) (name string, realKey bson.D, err error) {\n+func parseIndexKey(key []string) (keyInfo *indexKeyInfo, err error) {",
        "path": "session.go",
        "position": null,
        "original_position": 43,
        "commit_id": "beff0a0cc47dfe0e5fd13ae0915f6c1863987325",
        "original_commit_id": "00bf440dd3d20c7bf7894682e5b7b4f35cd05e03",
        "user": {
            "login": "niemeyer",
            "id": 378683,
            "node_id": "MDQ6VXNlcjM3ODY4Mw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/378683?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/niemeyer",
            "html_url": "https://github.com/niemeyer",
            "followers_url": "https://api.github.com/users/niemeyer/followers",
            "following_url": "https://api.github.com/users/niemeyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/niemeyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/niemeyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/niemeyer/subscriptions",
            "organizations_url": "https://api.github.com/users/niemeyer/orgs",
            "repos_url": "https://api.github.com/users/niemeyer/repos",
            "events_url": "https://api.github.com/users/niemeyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/niemeyer/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Please drop the result names. They are implicit from the types.\n",
        "created_at": "2014-09-08T17:15:34Z",
        "updated_at": "2014-10-04T01:25:25Z",
        "html_url": "https://github.com/go-mgo/mgo/pull/16#discussion_r17251933",
        "pull_request_url": "https://api.github.com/repos/go-mgo/mgo/pulls/16",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/17251933"
            },
            "html": {
                "href": "https://github.com/go-mgo/mgo/pull/16#discussion_r17251933"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/16"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/17251939",
        "pull_request_review_id": null,
        "id": 17251939,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MjUxOTM5",
        "diff_hunk": "@@ -932,14 +935,26 @@ type Index struct {\n \tName string // Index name, computed by EnsureIndex\n \n \tBits, Min, Max int // Properties for spatial indexes\n+\n+\t// Properties for text indexes\n+\tDefaultLanguage  string\n+\tLanguageOverride string\n+}\n+\n+type indexKeyInfo struct {\n+\tname    string\n+\tkey     bson.D\n+\tweights bson.D\n }\n \n-func parseIndexKey(key []string) (name string, realKey bson.D, err error) {\n+func parseIndexKey(key []string) (keyInfo *indexKeyInfo, err error) {\n+\tkeyInfo = &indexKeyInfo{\"\", bson.D{}, bson.D{}}",
        "path": "session.go",
        "position": null,
        "original_position": 44,
        "commit_id": "beff0a0cc47dfe0e5fd13ae0915f6c1863987325",
        "original_commit_id": "00bf440dd3d20c7bf7894682e5b7b4f35cd05e03",
        "user": {
            "login": "niemeyer",
            "id": 378683,
            "node_id": "MDQ6VXNlcjM3ODY4Mw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/378683?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/niemeyer",
            "html_url": "https://github.com/niemeyer",
            "followers_url": "https://api.github.com/users/niemeyer/followers",
            "following_url": "https://api.github.com/users/niemeyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/niemeyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/niemeyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/niemeyer/subscriptions",
            "organizations_url": "https://api.github.com/users/niemeyer/orgs",
            "repos_url": "https://api.github.com/users/niemeyer/repos",
            "events_url": "https://api.github.com/users/niemeyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/niemeyer/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "var keyInfo indexKeyInfo\n",
        "created_at": "2014-09-08T17:15:45Z",
        "updated_at": "2014-10-04T01:25:25Z",
        "html_url": "https://github.com/go-mgo/mgo/pull/16#discussion_r17251939",
        "pull_request_url": "https://api.github.com/repos/go-mgo/mgo/pulls/16",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/17251939"
            },
            "html": {
                "href": "https://github.com/go-mgo/mgo/pull/16#discussion_r17251939"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/16"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/17252500",
        "pull_request_review_id": null,
        "id": 17252500,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MjUyNTAw",
        "diff_hunk": "@@ -960,30 +975,38 @@ func parseIndexKey(key []string) (name string, realKey bson.D, err error) {\n \t\t\t\t// The shell used to render this field as key_ instead of key_2d,\n \t\t\t\t// and mgo followed suit. This has been fixed in recent server\n \t\t\t\t// releases, and mgo followed as well.\n-\t\t\t\tname += field + \"_2d\"\n+\t\t\t\tkeyInfo.name += field + \"_2d\"\n \t\t\tcase '-':\n \t\t\t\torder = -1\n \t\t\t\tfield = field[1:]\n-\t\t\t\tname += field + \"_-1\"\n+\t\t\t\tkeyInfo.name += field + \"_-1\"\n \t\t\tcase '+':\n \t\t\t\tfield = field[1:]\n \t\t\t\tfallthrough\n \t\t\tdefault:\n \t\t\t\tif kind == \"\" {\n \t\t\t\t\torder = 1\n-\t\t\t\t\tname += field + \"_1\"\n+\t\t\t\t\tkeyInfo.name += field + \"_1\"\n \t\t\t\t} else {\n \t\t\t\t\torder = kind\n \t\t\t\t}\n \t\t\t}\n \t\t}\n \t\tif field == \"\" || kind != \"\" && order != kind {\n-\t\t\treturn \"\", nil, fmt.Errorf(`invalid index key: want \"[$<kind>:][-]<field name>\", got %q`, raw)\n+\t\t\treturn nil, fmt.Errorf(`invalid index key: want \"[$<kind>:][-]<field name>\", got %q`, raw)\n+\t\t}\n+\t\tif kind == \"text\" {\n+\t\t\tisText = true\n+\t\t\tkeyInfo.weights = append(keyInfo.weights, bson.DocElem{field, 1})\n+\t\t} else {\n+\t\t\tkeyInfo.key = append(keyInfo.key, bson.DocElem{field, order})\n \t\t}\n-\t\trealKey = append(realKey, bson.DocElem{field, order})\n \t}\n-\tif name == \"\" {\n-\t\treturn \"\", nil, errors.New(\"invalid index key: no fields provided\")\n+\tif keyInfo.name == \"\" {\n+\t\treturn nil, errors.New(\"invalid index key: no fields provided\")\n+\t}\n+\tif isText {\n+\t\tkeyInfo.key = append(keyInfo.key, bson.DocElem{\"_fts\", \"text\"}, bson.DocElem{\"_ftsx\", 1})",
        "path": "session.go",
        "position": null,
        "original_position": 107,
        "commit_id": "beff0a0cc47dfe0e5fd13ae0915f6c1863987325",
        "original_commit_id": "00bf440dd3d20c7bf7894682e5b7b4f35cd05e03",
        "user": {
            "login": "niemeyer",
            "id": 378683,
            "node_id": "MDQ6VXNlcjM3ODY4Mw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/378683?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/niemeyer",
            "html_url": "https://github.com/niemeyer",
            "followers_url": "https://api.github.com/users/niemeyer/followers",
            "following_url": "https://api.github.com/users/niemeyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/niemeyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/niemeyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/niemeyer/subscriptions",
            "organizations_url": "https://api.github.com/users/niemeyer/orgs",
            "repos_url": "https://api.github.com/users/niemeyer/repos",
            "events_url": "https://api.github.com/users/niemeyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/niemeyer/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "This does not match what happens in the shell. For example:\n\nhttp://paste.ubuntu.com/8292084/\n\nThe text index key must be appended when it is seen, together with every other entry above. It can use such a boolean to track whether it has already appended or not, though.\n",
        "created_at": "2014-09-08T17:24:13Z",
        "updated_at": "2014-10-04T01:25:25Z",
        "html_url": "https://github.com/go-mgo/mgo/pull/16#discussion_r17252500",
        "pull_request_url": "https://api.github.com/repos/go-mgo/mgo/pulls/16",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/17252500"
            },
            "html": {
                "href": "https://github.com/go-mgo/mgo/pull/16#discussion_r17252500"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/16"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/17253077",
        "pull_request_review_id": null,
        "id": 17253077,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MjUzMDc3",
        "diff_hunk": "@@ -960,30 +975,38 @@ func parseIndexKey(key []string) (name string, realKey bson.D, err error) {\n \t\t\t\t// The shell used to render this field as key_ instead of key_2d,\n \t\t\t\t// and mgo followed suit. This has been fixed in recent server\n \t\t\t\t// releases, and mgo followed as well.\n-\t\t\t\tname += field + \"_2d\"\n+\t\t\t\tkeyInfo.name += field + \"_2d\"\n \t\t\tcase '-':\n \t\t\t\torder = -1\n \t\t\t\tfield = field[1:]\n-\t\t\t\tname += field + \"_-1\"\n+\t\t\t\tkeyInfo.name += field + \"_-1\"\n \t\t\tcase '+':\n \t\t\t\tfield = field[1:]\n \t\t\t\tfallthrough\n \t\t\tdefault:\n \t\t\t\tif kind == \"\" {\n \t\t\t\t\torder = 1\n-\t\t\t\t\tname += field + \"_1\"\n+\t\t\t\t\tkeyInfo.name += field + \"_1\"\n \t\t\t\t} else {\n \t\t\t\t\torder = kind\n \t\t\t\t}\n \t\t\t}\n \t\t}\n \t\tif field == \"\" || kind != \"\" && order != kind {\n-\t\t\treturn \"\", nil, fmt.Errorf(`invalid index key: want \"[$<kind>:][-]<field name>\", got %q`, raw)\n+\t\t\treturn nil, fmt.Errorf(`invalid index key: want \"[$<kind>:][-]<field name>\", got %q`, raw)\n+\t\t}\n+\t\tif kind == \"text\" {",
        "path": "session.go",
        "position": 93,
        "original_position": 93,
        "commit_id": "beff0a0cc47dfe0e5fd13ae0915f6c1863987325",
        "original_commit_id": "00bf440dd3d20c7bf7894682e5b7b4f35cd05e03",
        "user": {
            "login": "niemeyer",
            "id": 378683,
            "node_id": "MDQ6VXNlcjM3ODY4Mw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/378683?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/niemeyer",
            "html_url": "https://github.com/niemeyer",
            "followers_url": "https://api.github.com/users/niemeyer/followers",
            "following_url": "https://api.github.com/users/niemeyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/niemeyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/niemeyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/niemeyer/subscriptions",
            "organizations_url": "https://api.github.com/users/niemeyer/orgs",
            "repos_url": "https://api.github.com/users/niemeyer/repos",
            "events_url": "https://api.github.com/users/niemeyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/niemeyer/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "The special string is \"textScore\" in Sort and in the MongoDB server. We can as well use it here.\n",
        "created_at": "2014-09-08T17:31:55Z",
        "updated_at": "2014-10-04T01:25:25Z",
        "html_url": "https://github.com/go-mgo/mgo/pull/16#discussion_r17253077",
        "pull_request_url": "https://api.github.com/repos/go-mgo/mgo/pulls/16",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/17253077"
            },
            "html": {
                "href": "https://github.com/go-mgo/mgo/pull/16#discussion_r17253077"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/16"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/17275882",
        "pull_request_review_id": null,
        "id": 17275882,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3Mjc1ODgy",
        "diff_hunk": "@@ -960,30 +975,38 @@ func parseIndexKey(key []string) (name string, realKey bson.D, err error) {\n \t\t\t\t// The shell used to render this field as key_ instead of key_2d,\n \t\t\t\t// and mgo followed suit. This has been fixed in recent server\n \t\t\t\t// releases, and mgo followed as well.\n-\t\t\t\tname += field + \"_2d\"\n+\t\t\t\tkeyInfo.name += field + \"_2d\"\n \t\t\tcase '-':\n \t\t\t\torder = -1\n \t\t\t\tfield = field[1:]\n-\t\t\t\tname += field + \"_-1\"\n+\t\t\t\tkeyInfo.name += field + \"_-1\"\n \t\t\tcase '+':\n \t\t\t\tfield = field[1:]\n \t\t\t\tfallthrough\n \t\t\tdefault:\n \t\t\t\tif kind == \"\" {\n \t\t\t\t\torder = 1\n-\t\t\t\t\tname += field + \"_1\"\n+\t\t\t\t\tkeyInfo.name += field + \"_1\"\n \t\t\t\t} else {\n \t\t\t\t\torder = kind\n \t\t\t\t}\n \t\t\t}\n \t\t}\n \t\tif field == \"\" || kind != \"\" && order != kind {\n-\t\t\treturn \"\", nil, fmt.Errorf(`invalid index key: want \"[$<kind>:][-]<field name>\", got %q`, raw)\n+\t\t\treturn nil, fmt.Errorf(`invalid index key: want \"[$<kind>:][-]<field name>\", got %q`, raw)\n+\t\t}\n+\t\tif kind == \"text\" {\n+\t\t\tisText = true\n+\t\t\tkeyInfo.weights = append(keyInfo.weights, bson.DocElem{field, 1})\n+\t\t} else {\n+\t\t\tkeyInfo.key = append(keyInfo.key, bson.DocElem{field, order})\n \t\t}\n-\t\trealKey = append(realKey, bson.DocElem{field, order})\n \t}\n-\tif name == \"\" {\n-\t\treturn \"\", nil, errors.New(\"invalid index key: no fields provided\")\n+\tif keyInfo.name == \"\" {\n+\t\treturn nil, errors.New(\"invalid index key: no fields provided\")\n+\t}\n+\tif isText {\n+\t\tkeyInfo.key = append(keyInfo.key, bson.DocElem{\"_fts\", \"text\"}, bson.DocElem{\"_ftsx\", 1})",
        "path": "session.go",
        "position": null,
        "original_position": 107,
        "commit_id": "beff0a0cc47dfe0e5fd13ae0915f6c1863987325",
        "original_commit_id": "00bf440dd3d20c7bf7894682e5b7b4f35cd05e03",
        "user": null,
        "body": "mgo's code don't use 'ensureIndex' in the collection, instead of that it insert the index directly on 'system.indexes'. After several tries I found out that this is the syntax expected by the system.indexes collection.\n\nIf you look at the example you just pasted, in the index itself the 'key' list don't include the text keys only 'weights' include them.\n",
        "created_at": "2014-09-09T00:19:52Z",
        "updated_at": "2014-10-04T01:25:25Z",
        "html_url": "https://github.com/go-mgo/mgo/pull/16#discussion_r17275882",
        "pull_request_url": "https://api.github.com/repos/go-mgo/mgo/pulls/16",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/17275882"
            },
            "html": {
                "href": "https://github.com/go-mgo/mgo/pull/16#discussion_r17275882"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/16"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/17275960",
        "pull_request_review_id": null,
        "id": 17275960,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3Mjc1OTYw",
        "diff_hunk": "@@ -960,30 +975,38 @@ func parseIndexKey(key []string) (name string, realKey bson.D, err error) {\n \t\t\t\t// The shell used to render this field as key_ instead of key_2d,\n \t\t\t\t// and mgo followed suit. This has been fixed in recent server\n \t\t\t\t// releases, and mgo followed as well.\n-\t\t\t\tname += field + \"_2d\"\n+\t\t\t\tkeyInfo.name += field + \"_2d\"\n \t\t\tcase '-':\n \t\t\t\torder = -1\n \t\t\t\tfield = field[1:]\n-\t\t\t\tname += field + \"_-1\"\n+\t\t\t\tkeyInfo.name += field + \"_-1\"\n \t\t\tcase '+':\n \t\t\t\tfield = field[1:]\n \t\t\t\tfallthrough\n \t\t\tdefault:\n \t\t\t\tif kind == \"\" {\n \t\t\t\t\torder = 1\n-\t\t\t\t\tname += field + \"_1\"\n+\t\t\t\t\tkeyInfo.name += field + \"_1\"\n \t\t\t\t} else {\n \t\t\t\t\torder = kind\n \t\t\t\t}\n \t\t\t}\n \t\t}\n \t\tif field == \"\" || kind != \"\" && order != kind {\n-\t\t\treturn \"\", nil, fmt.Errorf(`invalid index key: want \"[$<kind>:][-]<field name>\", got %q`, raw)\n+\t\t\treturn nil, fmt.Errorf(`invalid index key: want \"[$<kind>:][-]<field name>\", got %q`, raw)\n+\t\t}\n+\t\tif kind == \"text\" {",
        "path": "session.go",
        "position": 93,
        "original_position": 93,
        "commit_id": "beff0a0cc47dfe0e5fd13ae0915f6c1863987325",
        "original_commit_id": "00bf440dd3d20c7bf7894682e5b7b4f35cd05e03",
        "user": null,
        "body": "MongoDB uses textScore for the sort score, but for the indexes it uses 'text'. I think it's more clear to use the names that MongoDB uses:\n- index -> text\n- sort -> textScore\n\nBut if you prefer it the other way around, I'm ok with it and I'll change it.\n",
        "created_at": "2014-09-09T00:22:37Z",
        "updated_at": "2014-10-04T01:25:25Z",
        "html_url": "https://github.com/go-mgo/mgo/pull/16#discussion_r17275960",
        "pull_request_url": "https://api.github.com/repos/go-mgo/mgo/pulls/16",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/17275960"
            },
            "html": {
                "href": "https://github.com/go-mgo/mgo/pull/16#discussion_r17275960"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/16"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/18166899",
        "pull_request_review_id": null,
        "id": 18166899,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MTY2ODk5",
        "diff_hunk": "@@ -960,30 +975,38 @@ func parseIndexKey(key []string) (name string, realKey bson.D, err error) {\n \t\t\t\t// The shell used to render this field as key_ instead of key_2d,\n \t\t\t\t// and mgo followed suit. This has been fixed in recent server\n \t\t\t\t// releases, and mgo followed as well.\n-\t\t\t\tname += field + \"_2d\"\n+\t\t\t\tkeyInfo.name += field + \"_2d\"\n \t\t\tcase '-':\n \t\t\t\torder = -1\n \t\t\t\tfield = field[1:]\n-\t\t\t\tname += field + \"_-1\"\n+\t\t\t\tkeyInfo.name += field + \"_-1\"\n \t\t\tcase '+':\n \t\t\t\tfield = field[1:]\n \t\t\t\tfallthrough\n \t\t\tdefault:\n \t\t\t\tif kind == \"\" {\n \t\t\t\t\torder = 1\n-\t\t\t\t\tname += field + \"_1\"\n+\t\t\t\t\tkeyInfo.name += field + \"_1\"\n \t\t\t\t} else {\n \t\t\t\t\torder = kind\n \t\t\t\t}\n \t\t\t}\n \t\t}\n \t\tif field == \"\" || kind != \"\" && order != kind {\n-\t\t\treturn \"\", nil, fmt.Errorf(`invalid index key: want \"[$<kind>:][-]<field name>\", got %q`, raw)\n+\t\t\treturn nil, fmt.Errorf(`invalid index key: want \"[$<kind>:][-]<field name>\", got %q`, raw)\n+\t\t}\n+\t\tif kind == \"text\" {\n+\t\t\tisText = true\n+\t\t\tkeyInfo.weights = append(keyInfo.weights, bson.DocElem{field, 1})\n+\t\t} else {\n+\t\t\tkeyInfo.key = append(keyInfo.key, bson.DocElem{field, order})\n \t\t}\n-\t\trealKey = append(realKey, bson.DocElem{field, order})\n \t}\n-\tif name == \"\" {\n-\t\treturn \"\", nil, errors.New(\"invalid index key: no fields provided\")\n+\tif keyInfo.name == \"\" {\n+\t\treturn nil, errors.New(\"invalid index key: no fields provided\")\n+\t}\n+\tif isText {\n+\t\tkeyInfo.key = append(keyInfo.key, bson.DocElem{\"_fts\", \"text\"}, bson.DocElem{\"_ftsx\", 1})",
        "path": "session.go",
        "position": null,
        "original_position": 107,
        "commit_id": "beff0a0cc47dfe0e5fd13ae0915f6c1863987325",
        "original_commit_id": "00bf440dd3d20c7bf7894682e5b7b4f35cd05e03",
        "user": {
            "login": "niemeyer",
            "id": 378683,
            "node_id": "MDQ6VXNlcjM3ODY4Mw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/378683?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/niemeyer",
            "html_url": "https://github.com/niemeyer",
            "followers_url": "https://api.github.com/users/niemeyer/followers",
            "following_url": "https://api.github.com/users/niemeyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/niemeyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/niemeyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/niemeyer/subscriptions",
            "organizations_url": "https://api.github.com/users/niemeyer/orgs",
            "repos_url": "https://api.github.com/users/niemeyer/repos",
            "events_url": "https://api.github.com/users/niemeyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/niemeyer/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "That wasn't the point. Note where \"bar\" ends in the text key. Your logic is always appending the text index at the end, but that's not what the shell does. Maybe it doesn't matter, but there's no reason to depart from that either.\n",
        "created_at": "2014-09-29T16:53:16Z",
        "updated_at": "2014-10-04T01:25:25Z",
        "html_url": "https://github.com/go-mgo/mgo/pull/16#discussion_r18166899",
        "pull_request_url": "https://api.github.com/repos/go-mgo/mgo/pulls/16",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/18166899"
            },
            "html": {
                "href": "https://github.com/go-mgo/mgo/pull/16#discussion_r18166899"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/16"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/18470641",
        "pull_request_review_id": null,
        "id": 18470641,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NDcwNjQx",
        "diff_hunk": "@@ -483,10 +485,25 @@ func (ks docKeys) Less(i, j int) bool {\n \t\treturn av.(float64) < bv.(float64)\n \tcase natureBool:\n \t\treturn !av.(bool) && bv.(bool)\n+\tcase natureStruct:\n+\t\treturn structLess(av, bv)\n \t}\n \tpanic(\"unreachable\")\n }\n \n+func structLess(av, bv interface{}) bool {\n+\tavm, err := bson.Marshal(av)",
        "path": "txn/txn.go",
        "position": 30,
        "original_position": 30,
        "commit_id": "c67a58c8e4f94901727703549b686f90259c0cc7",
        "original_commit_id": "c67a58c8e4f94901727703549b686f90259c0cc7",
        "user": {
            "login": "niemeyer",
            "id": 378683,
            "node_id": "MDQ6VXNlcjM3ODY4Mw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/378683?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/niemeyer",
            "html_url": "https://github.com/niemeyer",
            "followers_url": "https://api.github.com/users/niemeyer/followers",
            "following_url": "https://api.github.com/users/niemeyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/niemeyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/niemeyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/niemeyer/subscriptions",
            "organizations_url": "https://api.github.com/users/niemeyer/orgs",
            "repos_url": "https://api.github.com/users/niemeyer/repos",
            "events_url": "https://api.github.com/users/niemeyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/niemeyer/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "In the worst case of a quicksort that'll be N^2 marshalings, for each struct!\n",
        "created_at": "2014-10-06T17:25:04Z",
        "updated_at": "2014-10-06T17:25:04Z",
        "html_url": "https://github.com/go-mgo/mgo/pull/32#discussion_r18470641",
        "pull_request_url": "https://api.github.com/repos/go-mgo/mgo/pulls/32",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/18470641"
            },
            "html": {
                "href": "https://github.com/go-mgo/mgo/pull/32#discussion_r18470641"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/32"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/18505488",
        "pull_request_review_id": null,
        "id": 18505488,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NTA1NDg4",
        "diff_hunk": "@@ -483,10 +485,25 @@ func (ks docKeys) Less(i, j int) bool {\n \t\treturn av.(float64) < bv.(float64)\n \tcase natureBool:\n \t\treturn !av.(bool) && bv.(bool)\n+\tcase natureStruct:\n+\t\treturn structLess(av, bv)\n \t}\n \tpanic(\"unreachable\")\n }\n \n+func structLess(av, bv interface{}) bool {\n+\tavm, err := bson.Marshal(av)",
        "path": "txn/txn.go",
        "position": 30,
        "original_position": 30,
        "commit_id": "c67a58c8e4f94901727703549b686f90259c0cc7",
        "original_commit_id": "c67a58c8e4f94901727703549b686f90259c0cc7",
        "user": {
            "login": "mjs",
            "id": 14993,
            "node_id": "MDQ6VXNlcjE0OTkz",
            "avatar_url": "https://avatars0.githubusercontent.com/u/14993?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mjs",
            "html_url": "https://github.com/mjs",
            "followers_url": "https://api.github.com/users/mjs/followers",
            "following_url": "https://api.github.com/users/mjs/following{/other_user}",
            "gists_url": "https://api.github.com/users/mjs/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mjs/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mjs/subscriptions",
            "organizations_url": "https://api.github.com/users/mjs/orgs",
            "repos_url": "https://api.github.com/users/mjs/repos",
            "events_url": "https://api.github.com/users/mjs/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mjs/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "You're right - that's not good. See #34 for an alternative approach.\n",
        "created_at": "2014-10-07T08:04:45Z",
        "updated_at": "2014-10-07T08:04:45Z",
        "html_url": "https://github.com/go-mgo/mgo/pull/32#discussion_r18505488",
        "pull_request_url": "https://api.github.com/repos/go-mgo/mgo/pulls/32",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/18505488"
            },
            "html": {
                "href": "https://github.com/go-mgo/mgo/pull/32#discussion_r18505488"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/32"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/18486102",
        "pull_request_review_id": null,
        "id": 18486102,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NDg2MTAy",
        "diff_hunk": "@@ -73,13 +73,14 @@ int sspi_send_client_authz_id(CtxtHandle *context, PVOID *buffer, ULONG *buffer_\n \t\treturn status;\n \t}\n \n-\tint msgSize = 4 + 25;\n+\tsize_t user_plus_realm_length = strlen(user_plus_realm);\n+\tint msgSize = 4 + user_plus_realm_length;\n \tchar *msg = malloc((sizes.cbSecurityTrailer + msgSize + sizes.cbBlockSize) * sizeof(char));",
        "path": "sasl/sasl_windows.c",
        "position": 7,
        "original_position": 7,
        "commit_id": "f1948f69dec6d2ed7f1096386e94d3bb4802900b",
        "original_commit_id": "b4fff88a43aab5645563810fb1050b343372e58c",
        "user": {
            "login": "niemeyer",
            "id": 378683,
            "node_id": "MDQ6VXNlcjM3ODY4Mw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/378683?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/niemeyer",
            "html_url": "https://github.com/niemeyer",
            "followers_url": "https://api.github.com/users/niemeyer/followers",
            "following_url": "https://api.github.com/users/niemeyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/niemeyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/niemeyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/niemeyer/subscriptions",
            "organizations_url": "https://api.github.com/users/niemeyer/orgs",
            "repos_url": "https://api.github.com/users/niemeyer/repos",
            "events_url": "https://api.github.com/users/niemeyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/niemeyer/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "There seems to be a leak of this allocation. I suggest dropping the memcpy below, and instead simply doing:\n\n```\n*buffer = msg;\n*buffer_length = ...\n```\n\nso that you pass the reference back into the Go code rather than losing it.\n\nThen, the Go code that calls this also seems a bit problematic. It should probably do something alone the lines of:\n\n```\nif buffer != C.PVOID(nil) {\n        defer C.free(unsafe.Pointer(buffer))\n}\n```\n\nThis will avoid the need for buffersToFree, and most importantly will not crash the whole process when there are any errors in send_client_authz_id that prevent it from sending a proper buffer. Note the defer.. this allows handling the deallocation early on, and then forgetting about it in a good sense.\n\nNote that GoBytes will copy the data, so it is okay to drop the underlying data.\n",
        "created_at": "2014-10-06T21:14:28Z",
        "updated_at": "2014-10-08T15:46:03Z",
        "html_url": "https://github.com/go-mgo/mgo/pull/33#discussion_r18486102",
        "pull_request_url": "https://api.github.com/repos/go-mgo/mgo/pulls/33",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/18486102"
            },
            "html": {
                "href": "https://github.com/go-mgo/mgo/pull/33#discussion_r18486102"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/33"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/18490173",
        "pull_request_review_id": null,
        "id": 18490173,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NDkwMTcz",
        "diff_hunk": "@@ -73,13 +73,14 @@ int sspi_send_client_authz_id(CtxtHandle *context, PVOID *buffer, ULONG *buffer_\n \t\treturn status;\n \t}\n \n-\tint msgSize = 4 + 25;\n+\tsize_t user_plus_realm_length = strlen(user_plus_realm);\n+\tint msgSize = 4 + user_plus_realm_length;\n \tchar *msg = malloc((sizes.cbSecurityTrailer + msgSize + sizes.cbBlockSize) * sizeof(char));",
        "path": "sasl/sasl_windows.c",
        "position": 7,
        "original_position": 7,
        "commit_id": "f1948f69dec6d2ed7f1096386e94d3bb4802900b",
        "original_commit_id": "b4fff88a43aab5645563810fb1050b343372e58c",
        "user": {
            "login": "vkarpov15",
            "id": 1620265,
            "node_id": "MDQ6VXNlcjE2MjAyNjU=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/1620265?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/vkarpov15",
            "html_url": "https://github.com/vkarpov15",
            "followers_url": "https://api.github.com/users/vkarpov15/followers",
            "following_url": "https://api.github.com/users/vkarpov15/following{/other_user}",
            "gists_url": "https://api.github.com/users/vkarpov15/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/vkarpov15/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/vkarpov15/subscriptions",
            "organizations_url": "https://api.github.com/users/vkarpov15/orgs",
            "repos_url": "https://api.github.com/users/vkarpov15/repos",
            "events_url": "https://api.github.com/users/vkarpov15/events{/privacy}",
            "received_events_url": "https://api.github.com/users/vkarpov15/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "You're right about msg getting leaked, but I think it's simpler to just `free()` it when you're done with it. That way the current structure works as intended.\n",
        "created_at": "2014-10-06T22:25:26Z",
        "updated_at": "2014-10-08T15:46:03Z",
        "html_url": "https://github.com/go-mgo/mgo/pull/33#discussion_r18490173",
        "pull_request_url": "https://api.github.com/repos/go-mgo/mgo/pulls/33",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/18490173"
            },
            "html": {
                "href": "https://github.com/go-mgo/mgo/pull/33#discussion_r18490173"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/33"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/18549035",
        "pull_request_review_id": null,
        "id": 18549035,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NTQ5MDM1",
        "diff_hunk": "@@ -73,13 +73,14 @@ int sspi_send_client_authz_id(CtxtHandle *context, PVOID *buffer, ULONG *buffer_\n \t\treturn status;\n \t}\n \n-\tint msgSize = 4 + 25;\n+\tsize_t user_plus_realm_length = strlen(user_plus_realm);\n+\tint msgSize = 4 + user_plus_realm_length;\n \tchar *msg = malloc((sizes.cbSecurityTrailer + msgSize + sizes.cbBlockSize) * sizeof(char));",
        "path": "sasl/sasl_windows.c",
        "position": 7,
        "original_position": 7,
        "commit_id": "f1948f69dec6d2ed7f1096386e94d3bb4802900b",
        "original_commit_id": "b4fff88a43aab5645563810fb1050b343372e58c",
        "user": {
            "login": "niemeyer",
            "id": 378683,
            "node_id": "MDQ6VXNlcjM3ODY4Mw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/378683?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/niemeyer",
            "html_url": "https://github.com/niemeyer",
            "followers_url": "https://api.github.com/users/niemeyer/followers",
            "following_url": "https://api.github.com/users/niemeyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/niemeyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/niemeyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/niemeyer/subscriptions",
            "organizations_url": "https://api.github.com/users/niemeyer/orgs",
            "repos_url": "https://api.github.com/users/niemeyer/repos",
            "events_url": "https://api.github.com/users/niemeyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/niemeyer/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Sure, the process of re-allocating and re-copying the data looks suspect, but I'll leave that up to you.\n\nThat said, let's please fix the Go side of this. That buffersToFree list is completely unnecessary, as suggested in the comment above, and it's also going to crash the application if there are errors, since the buffer is not allocated. It should be trivial to free with defer as suggested. \n",
        "created_at": "2014-10-07T21:05:18Z",
        "updated_at": "2014-10-08T15:46:03Z",
        "html_url": "https://github.com/go-mgo/mgo/pull/33#discussion_r18549035",
        "pull_request_url": "https://api.github.com/repos/go-mgo/mgo/pulls/33",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/18549035"
            },
            "html": {
                "href": "https://github.com/go-mgo/mgo/pull/33#discussion_r18549035"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/33"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/18591464",
        "pull_request_review_id": null,
        "id": 18591464,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NTkxNDY0",
        "diff_hunk": "@@ -73,13 +73,14 @@ int sspi_send_client_authz_id(CtxtHandle *context, PVOID *buffer, ULONG *buffer_\n \t\treturn status;\n \t}\n \n-\tint msgSize = 4 + 25;\n+\tsize_t user_plus_realm_length = strlen(user_plus_realm);\n+\tint msgSize = 4 + user_plus_realm_length;\n \tchar *msg = malloc((sizes.cbSecurityTrailer + msgSize + sizes.cbBlockSize) * sizeof(char));",
        "path": "sasl/sasl_windows.c",
        "position": 7,
        "original_position": 7,
        "commit_id": "f1948f69dec6d2ed7f1096386e94d3bb4802900b",
        "original_commit_id": "b4fff88a43aab5645563810fb1050b343372e58c",
        "user": {
            "login": "vkarpov15",
            "id": 1620265,
            "node_id": "MDQ6VXNlcjE2MjAyNjU=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/1620265?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/vkarpov15",
            "html_url": "https://github.com/vkarpov15",
            "followers_url": "https://api.github.com/users/vkarpov15/followers",
            "following_url": "https://api.github.com/users/vkarpov15/following{/other_user}",
            "gists_url": "https://api.github.com/users/vkarpov15/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/vkarpov15/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/vkarpov15/subscriptions",
            "organizations_url": "https://api.github.com/users/vkarpov15/orgs",
            "repos_url": "https://api.github.com/users/vkarpov15/repos",
            "events_url": "https://api.github.com/users/vkarpov15/events{/privacy}",
            "received_events_url": "https://api.github.com/users/vkarpov15/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "done\n",
        "created_at": "2014-10-08T15:44:59Z",
        "updated_at": "2014-10-08T15:46:03Z",
        "html_url": "https://github.com/go-mgo/mgo/pull/33#discussion_r18591464",
        "pull_request_url": "https://api.github.com/repos/go-mgo/mgo/pulls/33",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/18591464"
            },
            "html": {
                "href": "https://github.com/go-mgo/mgo/pull/33#discussion_r18591464"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/33"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/18258762",
        "pull_request_review_id": null,
        "id": 18258762,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MjU4NzYy",
        "diff_hunk": "@@ -44,6 +44,12 @@ type authCmd struct {\n \tKey   string\n }\n \n+type authX509Cmd struct {",
        "path": "auth.go",
        "position": null,
        "original_position": 4,
        "commit_id": "bf843b6b9424760c6e6c0014ff8eb6022c868bfc",
        "original_commit_id": "55927f4f2f9dd71cdcd06d95e2197f8a0b367f64",
        "user": {
            "login": "niemeyer",
            "id": 378683,
            "node_id": "MDQ6VXNlcjM3ODY4Mw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/378683?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/niemeyer",
            "html_url": "https://github.com/niemeyer",
            "followers_url": "https://api.github.com/users/niemeyer/followers",
            "following_url": "https://api.github.com/users/niemeyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/niemeyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/niemeyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/niemeyer/subscriptions",
            "organizations_url": "https://api.github.com/users/niemeyer/orgs",
            "repos_url": "https://api.github.com/users/niemeyer/repos",
            "events_url": "https://api.github.com/users/niemeyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/niemeyer/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Would you mind to move this to right above the function where it is used?\n",
        "created_at": "2014-10-01T02:29:23Z",
        "updated_at": "2014-10-08T17:04:14Z",
        "html_url": "https://github.com/go-mgo/mgo/pull/27#discussion_r18258762",
        "pull_request_url": "https://api.github.com/repos/go-mgo/mgo/pulls/27",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/18258762"
            },
            "html": {
                "href": "https://github.com/go-mgo/mgo/pull/27#discussion_r18258762"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/27"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/18574626",
        "pull_request_review_id": null,
        "id": 18574626,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NTc0NjI2",
        "diff_hunk": "@@ -225,10 +224,10 @@ func (f *flusher) prepare(t *transaction, force bool) (revnos []int64, err error\n \t}\n \tf.debugf(\"Preparing %s\", t)\n \n-\t// Iterate in a stable way across all runners. This isn't\n-\t// strictly required, but reduces the chances of cycles.\n+\t// docKeys is sorted to support stable iteration across all",
        "path": "txn/flusher.go",
        "position": null,
        "original_position": 14,
        "commit_id": "1a850554ad40e451d7dc44587710219e85cc0c37",
        "original_commit_id": "b7f60f7f9073f9db3d1c4a9665fcc392e3436eb2",
        "user": {
            "login": "niemeyer",
            "id": 378683,
            "node_id": "MDQ6VXNlcjM3ODY4Mw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/378683?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/niemeyer",
            "html_url": "https://github.com/niemeyer",
            "followers_url": "https://api.github.com/users/niemeyer/followers",
            "following_url": "https://api.github.com/users/niemeyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/niemeyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/niemeyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/niemeyer/subscriptions",
            "organizations_url": "https://api.github.com/users/niemeyer/orgs",
            "repos_url": "https://api.github.com/users/niemeyer/repos",
            "events_url": "https://api.github.com/users/niemeyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/niemeyer/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "s/docKeys is sorted to support/dkeys being sorted means/\n",
        "created_at": "2014-10-08T10:46:39Z",
        "updated_at": "2014-10-10T08:11:51Z",
        "html_url": "https://github.com/go-mgo/mgo/pull/35#discussion_r18574626",
        "pull_request_url": "https://api.github.com/repos/go-mgo/mgo/pulls/35",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/18574626"
            },
            "html": {
                "href": "https://github.com/go-mgo/mgo/pull/35#discussion_r18574626"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/35"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/18574628",
        "pull_request_review_id": null,
        "id": 18574628,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NTc0NjI4",
        "diff_hunk": "@@ -380,10 +379,10 @@ func (f *flusher) rescan(t *transaction, force bool) (revnos []int64, err error)\n \t\tpanic(fmt.Errorf(\"rescanning transaction in invalid state: %q\", t.State))\n \t}\n \n-\t// Iterate in a stable way across all runners. This isn't\n-\t// strictly required, but reduces the chances of cycles.\n+\t// docKeys is sorted to support stable iteration across all",
        "path": "txn/flusher.go",
        "position": null,
        "original_position": 28,
        "commit_id": "1a850554ad40e451d7dc44587710219e85cc0c37",
        "original_commit_id": "b7f60f7f9073f9db3d1c4a9665fcc392e3436eb2",
        "user": {
            "login": "niemeyer",
            "id": 378683,
            "node_id": "MDQ6VXNlcjM3ODY4Mw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/378683?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/niemeyer",
            "html_url": "https://github.com/niemeyer",
            "followers_url": "https://api.github.com/users/niemeyer/followers",
            "following_url": "https://api.github.com/users/niemeyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/niemeyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/niemeyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/niemeyer/subscriptions",
            "organizations_url": "https://api.github.com/users/niemeyer/orgs",
            "repos_url": "https://api.github.com/users/niemeyer/repos",
            "events_url": "https://api.github.com/users/niemeyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/niemeyer/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "s/docKeys is sorted to support/dkeys being sorted means/\n",
        "created_at": "2014-10-08T10:46:46Z",
        "updated_at": "2014-10-10T08:11:51Z",
        "html_url": "https://github.com/go-mgo/mgo/pull/35#discussion_r18574628",
        "pull_request_url": "https://api.github.com/repos/go-mgo/mgo/pulls/35",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/18574628"
            },
            "html": {
                "href": "https://github.com/go-mgo/mgo/pull/35#discussion_r18574628"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/35"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/18574645",
        "pull_request_review_id": null,
        "id": 18574645,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NTc0NjQ1",
        "diff_hunk": "@@ -0,0 +1,114 @@\n+package txn\n+\n+import (\n+\t\"bytes\"\n+\t\"reflect\"\n+\t\"strings\"\n+)\n+\n+type docKey struct {\n+\tC  string\n+\tId interface{}\n+}\n+\n+type docKeys []docKey\n+\n+func (ks docKeys) Len() int      { return len(ks) }\n+func (ks docKeys) Swap(i, j int) { ks[i], ks[j] = ks[j], ks[i] }\n+func (ks docKeys) Less(i, j int) bool {\n+\ta, b := ks[i], ks[j]\n+\tif a.C != b.C {\n+\t\treturn a.C < b.C\n+\t}\n+\treturn valuecmp(a.Id, b.Id) == -1\n+}\n+\n+func valuecmp(a, b interface{}) int {\n+\tav, an := valueNature(a)\n+\tbv, bn := valueNature(b)\n+\tif n := intcmp(int64(an), int64(bn)); n != 0 {",
        "path": "txn/dockey.go",
        "position": null,
        "original_position": 29,
        "commit_id": "1a850554ad40e451d7dc44587710219e85cc0c37",
        "original_commit_id": "b7f60f7f9073f9db3d1c4a9665fcc392e3436eb2",
        "user": {
            "login": "niemeyer",
            "id": 378683,
            "node_id": "MDQ6VXNlcjM3ODY4Mw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/378683?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/niemeyer",
            "html_url": "https://github.com/niemeyer",
            "followers_url": "https://api.github.com/users/niemeyer/followers",
            "following_url": "https://api.github.com/users/niemeyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/niemeyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/niemeyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/niemeyer/subscriptions",
            "organizations_url": "https://api.github.com/users/niemeyer/orgs",
            "repos_url": "https://api.github.com/users/niemeyer/repos",
            "events_url": "https://api.github.com/users/niemeyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/niemeyer/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Many of the changes seem to abstract away what used to be straightforward statements in the original algorithm, without great benefit. The code above, for example, was:\n\n```\nif an != bn { return an < bn }\n```\n\nand we can preserve it pretty much as simple:\n\n```\nif bn > an {\n        return 1\n}\nif an < bn {\n        return -1\n}\n```\n\nthen, we don't need all the sub-functions below either. Instead, we can do:\n\n```\nif av == bn {\n        return 0\n}\nvar less bool\nswitch an {\ncase natureString:\n        less = av.(string) < bv.(string)\n...\n}\nif less {\n        return -1\n}\nreturn 1\n```\n",
        "created_at": "2014-10-08T10:47:10Z",
        "updated_at": "2014-10-10T08:11:51Z",
        "html_url": "https://github.com/go-mgo/mgo/pull/35#discussion_r18574645",
        "pull_request_url": "https://api.github.com/repos/go-mgo/mgo/pulls/35",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/18574645"
            },
            "html": {
                "href": "https://github.com/go-mgo/mgo/pull/35#discussion_r18574645"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/35"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/18574664",
        "pull_request_review_id": null,
        "id": 18574664,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NTc0NjY0",
        "diff_hunk": "@@ -0,0 +1,114 @@\n+package txn\n+\n+import (\n+\t\"bytes\"\n+\t\"reflect\"\n+\t\"strings\"\n+)\n+\n+type docKey struct {\n+\tC  string\n+\tId interface{}\n+}\n+\n+type docKeys []docKey\n+\n+func (ks docKeys) Len() int      { return len(ks) }\n+func (ks docKeys) Swap(i, j int) { ks[i], ks[j] = ks[j], ks[i] }\n+func (ks docKeys) Less(i, j int) bool {\n+\ta, b := ks[i], ks[j]\n+\tif a.C != b.C {\n+\t\treturn a.C < b.C\n+\t}\n+\treturn valuecmp(a.Id, b.Id) == -1\n+}\n+\n+func valuecmp(a, b interface{}) int {\n+\tav, an := valueNature(a)\n+\tbv, bn := valueNature(b)\n+\tif n := intcmp(int64(an), int64(bn)); n != 0 {\n+\t\treturn n\n+\t}\n+\n+\tswitch an {\n+\tcase natureString:\n+\t\treturn strcmp(av.(string), bv.(string))\n+\tcase natureInt:\n+\t\treturn intcmp(av.(int64), bv.(int64))\n+\tcase natureFloat:\n+\t\treturn floatcmp(av.(float64), bv.(float64))\n+\tcase natureBool:\n+\t\treturn boolcmp(av.(bool), bv.(bool))\n+\tcase natureStruct:\n+\t\treturn structcmp(av, bv)\n+\t}\n+\tpanic(\"unreachable\")\n+}\n+\n+func structcmp(a, b interface{}) int {\n+\tat := reflect.TypeOf(a)\n+\tbt := reflect.TypeOf(b)",
        "path": "txn/dockey.go",
        "position": null,
        "original_position": 50,
        "commit_id": "1a850554ad40e451d7dc44587710219e85cc0c37",
        "original_commit_id": "b7f60f7f9073f9db3d1c4a9665fcc392e3436eb2",
        "user": {
            "login": "niemeyer",
            "id": 378683,
            "node_id": "MDQ6VXNlcjM3ODY4Mw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/378683?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/niemeyer",
            "html_url": "https://github.com/niemeyer",
            "followers_url": "https://api.github.com/users/niemeyer/followers",
            "following_url": "https://api.github.com/users/niemeyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/niemeyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/niemeyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/niemeyer/subscriptions",
            "organizations_url": "https://api.github.com/users/niemeyer/orgs",
            "repos_url": "https://api.github.com/users/niemeyer/repos",
            "events_url": "https://api.github.com/users/niemeyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/niemeyer/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Please move these below av/bv, and do:\n\n```\nat := av.Type()\nbt := bv.Type()\n```\n",
        "created_at": "2014-10-08T10:47:46Z",
        "updated_at": "2014-10-10T08:11:51Z",
        "html_url": "https://github.com/go-mgo/mgo/pull/35#discussion_r18574664",
        "pull_request_url": "https://api.github.com/repos/go-mgo/mgo/pulls/35",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/18574664"
            },
            "html": {
                "href": "https://github.com/go-mgo/mgo/pull/35#discussion_r18574664"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/35"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/18574677",
        "pull_request_review_id": null,
        "id": 18574677,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NTc0Njc3",
        "diff_hunk": "@@ -0,0 +1,114 @@\n+package txn\n+\n+import (\n+\t\"bytes\"\n+\t\"reflect\"\n+\t\"strings\"\n+)\n+\n+type docKey struct {\n+\tC  string\n+\tId interface{}\n+}\n+\n+type docKeys []docKey\n+\n+func (ks docKeys) Len() int      { return len(ks) }\n+func (ks docKeys) Swap(i, j int) { ks[i], ks[j] = ks[j], ks[i] }\n+func (ks docKeys) Less(i, j int) bool {\n+\ta, b := ks[i], ks[j]\n+\tif a.C != b.C {\n+\t\treturn a.C < b.C\n+\t}\n+\treturn valuecmp(a.Id, b.Id) == -1\n+}\n+\n+func valuecmp(a, b interface{}) int {\n+\tav, an := valueNature(a)\n+\tbv, bn := valueNature(b)\n+\tif n := intcmp(int64(an), int64(bn)); n != 0 {\n+\t\treturn n\n+\t}\n+\n+\tswitch an {\n+\tcase natureString:\n+\t\treturn strcmp(av.(string), bv.(string))\n+\tcase natureInt:\n+\t\treturn intcmp(av.(int64), bv.(int64))\n+\tcase natureFloat:\n+\t\treturn floatcmp(av.(float64), bv.(float64))\n+\tcase natureBool:\n+\t\treturn boolcmp(av.(bool), bv.(bool))\n+\tcase natureStruct:\n+\t\treturn structcmp(av, bv)\n+\t}\n+\tpanic(\"unreachable\")\n+}\n+\n+func structcmp(a, b interface{}) int {\n+\tat := reflect.TypeOf(a)\n+\tbt := reflect.TypeOf(b)\n+\tav := reflect.ValueOf(a)\n+\tbv := reflect.ValueOf(b)\n+\tif n := intcmp(int64(at.NumField()), int64(bt.NumField())); n != 0 {",
        "path": "txn/dockey.go",
        "position": null,
        "original_position": 53,
        "commit_id": "1a850554ad40e451d7dc44587710219e85cc0c37",
        "original_commit_id": "b7f60f7f9073f9db3d1c4a9665fcc392e3436eb2",
        "user": {
            "login": "niemeyer",
            "id": 378683,
            "node_id": "MDQ6VXNlcjM3ODY4Mw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/378683?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/niemeyer",
            "html_url": "https://github.com/niemeyer",
            "followers_url": "https://api.github.com/users/niemeyer/followers",
            "following_url": "https://api.github.com/users/niemeyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/niemeyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/niemeyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/niemeyer/subscriptions",
            "organizations_url": "https://api.github.com/users/niemeyer/orgs",
            "repos_url": "https://api.github.com/users/niemeyer/repos",
            "events_url": "https://api.github.com/users/niemeyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/niemeyer/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "That's not right. Please drop it.\n",
        "created_at": "2014-10-08T10:47:56Z",
        "updated_at": "2014-10-10T08:11:51Z",
        "html_url": "https://github.com/go-mgo/mgo/pull/35#discussion_r18574677",
        "pull_request_url": "https://api.github.com/repos/go-mgo/mgo/pulls/35",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/18574677"
            },
            "html": {
                "href": "https://github.com/go-mgo/mgo/pull/35#discussion_r18574677"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/35"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/18574687",
        "pull_request_review_id": null,
        "id": 18574687,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NTc0Njg3",
        "diff_hunk": "@@ -0,0 +1,114 @@\n+package txn\n+\n+import (\n+\t\"bytes\"\n+\t\"reflect\"\n+\t\"strings\"\n+)\n+\n+type docKey struct {\n+\tC  string\n+\tId interface{}\n+}\n+\n+type docKeys []docKey\n+\n+func (ks docKeys) Len() int      { return len(ks) }\n+func (ks docKeys) Swap(i, j int) { ks[i], ks[j] = ks[j], ks[i] }\n+func (ks docKeys) Less(i, j int) bool {\n+\ta, b := ks[i], ks[j]\n+\tif a.C != b.C {\n+\t\treturn a.C < b.C\n+\t}\n+\treturn valuecmp(a.Id, b.Id) == -1\n+}\n+\n+func valuecmp(a, b interface{}) int {\n+\tav, an := valueNature(a)\n+\tbv, bn := valueNature(b)\n+\tif n := intcmp(int64(an), int64(bn)); n != 0 {\n+\t\treturn n\n+\t}\n+\n+\tswitch an {\n+\tcase natureString:\n+\t\treturn strcmp(av.(string), bv.(string))\n+\tcase natureInt:\n+\t\treturn intcmp(av.(int64), bv.(int64))\n+\tcase natureFloat:\n+\t\treturn floatcmp(av.(float64), bv.(float64))\n+\tcase natureBool:\n+\t\treturn boolcmp(av.(bool), bv.(bool))\n+\tcase natureStruct:\n+\t\treturn structcmp(av, bv)\n+\t}\n+\tpanic(\"unreachable\")\n+}\n+\n+func structcmp(a, b interface{}) int {\n+\tat := reflect.TypeOf(a)\n+\tbt := reflect.TypeOf(b)\n+\tav := reflect.ValueOf(a)\n+\tbv := reflect.ValueOf(b)\n+\tif n := intcmp(int64(at.NumField()), int64(bt.NumField())); n != 0 {\n+\t\treturn n\n+\t}\n+\tfor i := 0; i < at.NumField(); i++ {",
        "path": "txn/dockey.go",
        "position": null,
        "original_position": 56,
        "commit_id": "1a850554ad40e451d7dc44587710219e85cc0c37",
        "original_commit_id": "b7f60f7f9073f9db3d1c4a9665fcc392e3436eb2",
        "user": {
            "login": "niemeyer",
            "id": 378683,
            "node_id": "MDQ6VXNlcjM3ODY4Mw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/378683?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/niemeyer",
            "html_url": "https://github.com/niemeyer",
            "followers_url": "https://api.github.com/users/niemeyer/followers",
            "following_url": "https://api.github.com/users/niemeyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/niemeyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/niemeyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/niemeyer/subscriptions",
            "organizations_url": "https://api.github.com/users/niemeyer/orgs",
            "repos_url": "https://api.github.com/users/niemeyer/repos",
            "events_url": "https://api.github.com/users/niemeyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/niemeyer/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Needs to take into account whether the field is exported or not.\n",
        "created_at": "2014-10-08T10:48:12Z",
        "updated_at": "2014-10-10T08:11:51Z",
        "html_url": "https://github.com/go-mgo/mgo/pull/35#discussion_r18574687",
        "pull_request_url": "https://api.github.com/repos/go-mgo/mgo/pulls/35",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/18574687"
            },
            "html": {
                "href": "https://github.com/go-mgo/mgo/pull/35#discussion_r18574687"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/35"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/18574689",
        "pull_request_review_id": null,
        "id": 18574689,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NTc0Njg5",
        "diff_hunk": "@@ -0,0 +1,114 @@\n+package txn\n+\n+import (\n+\t\"bytes\"\n+\t\"reflect\"\n+\t\"strings\"\n+)\n+\n+type docKey struct {\n+\tC  string\n+\tId interface{}\n+}\n+\n+type docKeys []docKey\n+\n+func (ks docKeys) Len() int      { return len(ks) }\n+func (ks docKeys) Swap(i, j int) { ks[i], ks[j] = ks[j], ks[i] }\n+func (ks docKeys) Less(i, j int) bool {\n+\ta, b := ks[i], ks[j]\n+\tif a.C != b.C {\n+\t\treturn a.C < b.C\n+\t}\n+\treturn valuecmp(a.Id, b.Id) == -1\n+}\n+\n+func valuecmp(a, b interface{}) int {\n+\tav, an := valueNature(a)\n+\tbv, bn := valueNature(b)\n+\tif n := intcmp(int64(an), int64(bn)); n != 0 {\n+\t\treturn n\n+\t}\n+\n+\tswitch an {\n+\tcase natureString:\n+\t\treturn strcmp(av.(string), bv.(string))\n+\tcase natureInt:\n+\t\treturn intcmp(av.(int64), bv.(int64))\n+\tcase natureFloat:\n+\t\treturn floatcmp(av.(float64), bv.(float64))\n+\tcase natureBool:\n+\t\treturn boolcmp(av.(bool), bv.(bool))\n+\tcase natureStruct:\n+\t\treturn structcmp(av, bv)\n+\t}\n+\tpanic(\"unreachable\")\n+}\n+\n+func structcmp(a, b interface{}) int {\n+\tat := reflect.TypeOf(a)\n+\tbt := reflect.TypeOf(b)\n+\tav := reflect.ValueOf(a)\n+\tbv := reflect.ValueOf(b)\n+\tif n := intcmp(int64(at.NumField()), int64(bt.NumField())); n != 0 {\n+\t\treturn n\n+\t}\n+\tfor i := 0; i < at.NumField(); i++ {\n+\t\tnameA := getFieldName(at.Field(i))\n+\t\tnameB := getFieldName(bt.Field(i))\n+\t\tif n := strcmp(nameA, nameB); n != 0 {\n+\t\t\treturn n\n+\t\t}\n+\t\tif n := valuecmp(av.Field(i).Interface(), bv.Field(i).Interface()); n != 0 {",
        "path": "txn/dockey.go",
        "position": null,
        "original_position": 62,
        "commit_id": "1a850554ad40e451d7dc44587710219e85cc0c37",
        "original_commit_id": "b7f60f7f9073f9db3d1c4a9665fcc392e3436eb2",
        "user": {
            "login": "niemeyer",
            "id": 378683,
            "node_id": "MDQ6VXNlcjM3ODY4Mw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/378683?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/niemeyer",
            "html_url": "https://github.com/niemeyer",
            "followers_url": "https://api.github.com/users/niemeyer/followers",
            "following_url": "https://api.github.com/users/niemeyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/niemeyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/niemeyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/niemeyer/subscriptions",
            "organizations_url": "https://api.github.com/users/niemeyer/orgs",
            "repos_url": "https://api.github.com/users/niemeyer/repos",
            "events_url": "https://api.github.com/users/niemeyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/niemeyer/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Please compare the value first. In the vast majority of cases this will be the delta, and it'll never reach the more complex field-comparing logic.\n",
        "created_at": "2014-10-08T10:48:15Z",
        "updated_at": "2014-10-10T08:11:51Z",
        "html_url": "https://github.com/go-mgo/mgo/pull/35#discussion_r18574689",
        "pull_request_url": "https://api.github.com/repos/go-mgo/mgo/pulls/35",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/18574689"
            },
            "html": {
                "href": "https://github.com/go-mgo/mgo/pull/35#discussion_r18574689"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/35"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/18574692",
        "pull_request_review_id": null,
        "id": 18574692,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NTc0Njky",
        "diff_hunk": "@@ -0,0 +1,114 @@\n+package txn\n+\n+import (\n+\t\"bytes\"\n+\t\"reflect\"\n+\t\"strings\"\n+)\n+\n+type docKey struct {\n+\tC  string\n+\tId interface{}\n+}\n+\n+type docKeys []docKey\n+\n+func (ks docKeys) Len() int      { return len(ks) }\n+func (ks docKeys) Swap(i, j int) { ks[i], ks[j] = ks[j], ks[i] }\n+func (ks docKeys) Less(i, j int) bool {\n+\ta, b := ks[i], ks[j]\n+\tif a.C != b.C {\n+\t\treturn a.C < b.C\n+\t}\n+\treturn valuecmp(a.Id, b.Id) == -1\n+}\n+\n+func valuecmp(a, b interface{}) int {\n+\tav, an := valueNature(a)\n+\tbv, bn := valueNature(b)\n+\tif n := intcmp(int64(an), int64(bn)); n != 0 {\n+\t\treturn n\n+\t}\n+\n+\tswitch an {\n+\tcase natureString:\n+\t\treturn strcmp(av.(string), bv.(string))\n+\tcase natureInt:\n+\t\treturn intcmp(av.(int64), bv.(int64))\n+\tcase natureFloat:\n+\t\treturn floatcmp(av.(float64), bv.(float64))\n+\tcase natureBool:\n+\t\treturn boolcmp(av.(bool), bv.(bool))\n+\tcase natureStruct:\n+\t\treturn structcmp(av, bv)\n+\t}\n+\tpanic(\"unreachable\")\n+}\n+\n+func structcmp(a, b interface{}) int {\n+\tat := reflect.TypeOf(a)\n+\tbt := reflect.TypeOf(b)\n+\tav := reflect.ValueOf(a)\n+\tbv := reflect.ValueOf(b)\n+\tif n := intcmp(int64(at.NumField()), int64(bt.NumField())); n != 0 {\n+\t\treturn n\n+\t}\n+\tfor i := 0; i < at.NumField(); i++ {\n+\t\tnameA := getFieldName(at.Field(i))\n+\t\tnameB := getFieldName(bt.Field(i))\n+\t\tif n := strcmp(nameA, nameB); n != 0 {\n+\t\t\treturn n\n+\t\t}\n+\t\tif n := valuecmp(av.Field(i).Interface(), bv.Field(i).Interface()); n != 0 {\n+\t\t\treturn n\n+\t\t}\n+\t}\n+\treturn 0\n+}\n+\n+func getFieldName(f reflect.StructField) string {\n+\tname := f.Tag.Get(\"bson\")\n+\ts := strings.Split(name, \",\")",
        "path": "txn/dockey.go",
        "position": null,
        "original_position": 71,
        "commit_id": "1a850554ad40e451d7dc44587710219e85cc0c37",
        "original_commit_id": "b7f60f7f9073f9db3d1c4a9665fcc392e3436eb2",
        "user": {
            "login": "niemeyer",
            "id": 378683,
            "node_id": "MDQ6VXNlcjM3ODY4Mw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/378683?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/niemeyer",
            "html_url": "https://github.com/niemeyer",
            "followers_url": "https://api.github.com/users/niemeyer/followers",
            "following_url": "https://api.github.com/users/niemeyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/niemeyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/niemeyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/niemeyer/subscriptions",
            "organizations_url": "https://api.github.com/users/niemeyer/orgs",
            "repos_url": "https://api.github.com/users/niemeyer/repos",
            "events_url": "https://api.github.com/users/niemeyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/niemeyer/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Please find the prefix instead of splitting:\n\n```\nif i := strings.Index(name, \",\"); i >= 0 {\n        name = name[:i]\n}\n```\n\nthat's a trivial, non-allocating, and to-the-point operation compared to splitting.\n",
        "created_at": "2014-10-08T10:48:27Z",
        "updated_at": "2014-10-10T08:11:51Z",
        "html_url": "https://github.com/go-mgo/mgo/pull/35#discussion_r18574692",
        "pull_request_url": "https://api.github.com/repos/go-mgo/mgo/pulls/35",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/18574692"
            },
            "html": {
                "href": "https://github.com/go-mgo/mgo/pull/35#discussion_r18574692"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/35"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/18574697",
        "pull_request_review_id": null,
        "id": 18574697,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NTc0Njk3",
        "diff_hunk": "@@ -0,0 +1,244 @@\n+package txn\n+\n+import (\n+\t\"sort\"\n+\t\"testing\"\n+\n+\t. \"gopkg.in/check.v1\"\n+)\n+\n+func TestAll(t *testing.T) {\n+\tTestingT(t)\n+}\n+\n+type DocKeySuite struct{}\n+\n+var _ = Suite(&DocKeySuite{})\n+\n+func (s *DocKeySuite) TestInt(c *C) {\n+\tcheck(c,\n+\t\tdocKeys{",
        "path": "txn/dockey_test.go",
        "position": null,
        "original_position": 20,
        "commit_id": "1a850554ad40e451d7dc44587710219e85cc0c37",
        "original_commit_id": "b7f60f7f9073f9db3d1c4a9665fcc392e3436eb2",
        "user": {
            "login": "niemeyer",
            "id": 378683,
            "node_id": "MDQ6VXNlcjM3ODY4Mw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/378683?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/niemeyer",
            "html_url": "https://github.com/niemeyer",
            "followers_url": "https://api.github.com/users/niemeyer/followers",
            "following_url": "https://api.github.com/users/niemeyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/niemeyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/niemeyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/niemeyer/subscriptions",
            "organizations_url": "https://api.github.com/users/niemeyer/orgs",
            "repos_url": "https://api.github.com/users/niemeyer/repos",
            "events_url": "https://api.github.com/users/niemeyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/niemeyer/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Thanks for the tests, but please move all of these to a table structure on a single test slice, and run it from a single test function:\n\n```\nvar docKeysTests = [][]docKeys{{\n    {\n        {\"c\", 1},\n        {\"c\", 5},\n        {\"c\", 2}\n    }, {\n        {\"c\", 1},\n        {\"c\", 2},\n        {\"c\", 5}\n    },\n}, {\n     ...\n}}\n```\n",
        "created_at": "2014-10-08T10:48:39Z",
        "updated_at": "2014-10-10T08:11:51Z",
        "html_url": "https://github.com/go-mgo/mgo/pull/35#discussion_r18574697",
        "pull_request_url": "https://api.github.com/repos/go-mgo/mgo/pulls/35",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/18574697"
            },
            "html": {
                "href": "https://github.com/go-mgo/mgo/pull/35#discussion_r18574697"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/35"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/18594350",
        "pull_request_review_id": null,
        "id": 18594350,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NTk0MzUw",
        "diff_hunk": "@@ -0,0 +1,117 @@\n+package txn\n+\n+import (\n+\t\"bytes\"\n+\t\"reflect\"\n+\t\"strings\"\n+)\n+\n+type docKey struct {\n+\tC  string\n+\tId interface{}\n+}\n+\n+type docKeys []docKey\n+\n+func (ks docKeys) Len() int      { return len(ks) }\n+func (ks docKeys) Swap(i, j int) { ks[i], ks[j] = ks[j], ks[i] }\n+func (ks docKeys) Less(i, j int) bool {\n+\ta, b := ks[i], ks[j]\n+\tif a.C != b.C {\n+\t\treturn a.C < b.C\n+\t}\n+\treturn valuecmp(a.Id, b.Id) == -1\n+}\n+\n+func valuecmp(a, b interface{}) int {\n+\tav, an := valueNature(a)\n+\tbv, bn := valueNature(b)\n+\tif an < bn {\n+\t\treturn -1\n+\t}\n+\tif an > bn {\n+\t\treturn 1\n+\t}\n+\n+\tif av == bv {\n+\t\treturn 0\n+\t}\n+\tvar less bool\n+\tswitch an {\n+\tcase natureString:\n+\t\tless = av.(string) < bv.(string)\n+\tcase natureInt:\n+\t\tless = av.(int64) < bv.(int64)\n+\tcase natureFloat:\n+\t\tless = av.(float64) < bv.(float64)\n+\tcase natureBool:\n+\t\tless = !av.(bool) && bv.(bool)\n+\tcase natureStruct:\n+\t\tless = structcmp(av, bv) == -1\n+\tdefault:\n+\t\tpanic(\"unreachable\")\n+\t}\n+\tif less {\n+\t\treturn -1\n+\t}\n+\treturn 1\n+}\n+\n+func structcmp(a, b interface{}) int {\n+\tav := reflect.ValueOf(a)\n+\tbv := reflect.ValueOf(b)\n+\tat := av.Type()\n+\tbt := bv.Type()\n+\taf := numExportedField(at)\n+\tbf := numExportedField(bt)\n+\n+\tvar minField int\n+\tif af < bf {\n+\t\tminField = at.NumField()\n+\t} else {\n+\t\tminField = bt.NumField()\n+\t}\n+\n+\tfor i := 0; i < minField; i++ {\n+\t\tif n := valuecmp(av.Field(i).Interface(), bv.Field(i).Interface()); n != 0 {\n+\t\t\treturn n\n+\t\t}\n+\t\tnameA := getFieldName(at.Field(i))\n+\t\tnameB := getFieldName(bt.Field(i))\n+\t\tif n := bytes.Compare([]byte(nameA), []byte(nameB)); n != 0 {",
        "path": "txn/dockey.go",
        "position": null,
        "original_position": 81,
        "commit_id": "1a850554ad40e451d7dc44587710219e85cc0c37",
        "original_commit_id": "48bb657907d6504916c71b92faca0e442122d367",
        "user": {
            "login": "niemeyer",
            "id": 378683,
            "node_id": "MDQ6VXNlcjM3ODY4Mw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/378683?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/niemeyer",
            "html_url": "https://github.com/niemeyer",
            "followers_url": "https://api.github.com/users/niemeyer/followers",
            "following_url": "https://api.github.com/users/niemeyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/niemeyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/niemeyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/niemeyer/subscriptions",
            "organizations_url": "https://api.github.com/users/niemeyer/orgs",
            "repos_url": "https://api.github.com/users/niemeyer/repos",
            "events_url": "https://api.github.com/users/niemeyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/niemeyer/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "```\nif nameA < nameB {\n        return -1\n}\nif nameA > nameB {\n        return 1\n}\n```\n",
        "created_at": "2014-10-08T16:28:05Z",
        "updated_at": "2014-10-10T08:11:51Z",
        "html_url": "https://github.com/go-mgo/mgo/pull/35#discussion_r18594350",
        "pull_request_url": "https://api.github.com/repos/go-mgo/mgo/pulls/35",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/18594350"
            },
            "html": {
                "href": "https://github.com/go-mgo/mgo/pull/35#discussion_r18594350"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/35"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/18594462",
        "pull_request_review_id": null,
        "id": 18594462,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NTk0NDYy",
        "diff_hunk": "@@ -0,0 +1,117 @@\n+package txn\n+\n+import (\n+\t\"bytes\"\n+\t\"reflect\"\n+\t\"strings\"\n+)\n+\n+type docKey struct {\n+\tC  string\n+\tId interface{}\n+}\n+\n+type docKeys []docKey\n+\n+func (ks docKeys) Len() int      { return len(ks) }\n+func (ks docKeys) Swap(i, j int) { ks[i], ks[j] = ks[j], ks[i] }\n+func (ks docKeys) Less(i, j int) bool {\n+\ta, b := ks[i], ks[j]\n+\tif a.C != b.C {\n+\t\treturn a.C < b.C\n+\t}\n+\treturn valuecmp(a.Id, b.Id) == -1\n+}\n+\n+func valuecmp(a, b interface{}) int {\n+\tav, an := valueNature(a)\n+\tbv, bn := valueNature(b)\n+\tif an < bn {\n+\t\treturn -1\n+\t}\n+\tif an > bn {\n+\t\treturn 1\n+\t}\n+\n+\tif av == bv {\n+\t\treturn 0\n+\t}\n+\tvar less bool\n+\tswitch an {\n+\tcase natureString:\n+\t\tless = av.(string) < bv.(string)\n+\tcase natureInt:\n+\t\tless = av.(int64) < bv.(int64)\n+\tcase natureFloat:\n+\t\tless = av.(float64) < bv.(float64)\n+\tcase natureBool:\n+\t\tless = !av.(bool) && bv.(bool)\n+\tcase natureStruct:\n+\t\tless = structcmp(av, bv) == -1\n+\tdefault:\n+\t\tpanic(\"unreachable\")\n+\t}\n+\tif less {\n+\t\treturn -1\n+\t}\n+\treturn 1\n+}\n+\n+func structcmp(a, b interface{}) int {\n+\tav := reflect.ValueOf(a)\n+\tbv := reflect.ValueOf(b)\n+\tat := av.Type()\n+\tbt := bv.Type()\n+\taf := numExportedField(at)\n+\tbf := numExportedField(bt)\n+\n+\tvar minField int\n+\tif af < bf {\n+\t\tminField = at.NumField()\n+\t} else {\n+\t\tminField = bt.NumField()\n+\t}\n+\n+\tfor i := 0; i < minField; i++ {\n+\t\tif n := valuecmp(av.Field(i).Interface(), bv.Field(i).Interface()); n != 0 {\n+\t\t\treturn n\n+\t\t}\n+\t\tnameA := getFieldName(at.Field(i))\n+\t\tnameB := getFieldName(bt.Field(i))\n+\t\tif n := bytes.Compare([]byte(nameA), []byte(nameB)); n != 0 {\n+\t\t\treturn n\n+\t\t}\n+\t}\n+\tif af < bf {\n+\t\treturn -1\n+\t} else if af > bf {\n+\t\treturn 1\n+\t}",
        "path": "txn/dockey.go",
        "position": null,
        "original_position": 89,
        "commit_id": "1a850554ad40e451d7dc44587710219e85cc0c37",
        "original_commit_id": "48bb657907d6504916c71b92faca0e442122d367",
        "user": {
            "login": "niemeyer",
            "id": 378683,
            "node_id": "MDQ6VXNlcjM3ODY4Mw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/378683?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/niemeyer",
            "html_url": "https://github.com/niemeyer",
            "followers_url": "https://api.github.com/users/niemeyer/followers",
            "following_url": "https://api.github.com/users/niemeyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/niemeyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/niemeyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/niemeyer/subscriptions",
            "organizations_url": "https://api.github.com/users/niemeyer/orgs",
            "repos_url": "https://api.github.com/users/niemeyer/repos",
            "events_url": "https://api.github.com/users/niemeyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/niemeyer/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Consider these two structs:\n\n```\ntype A struct {\n        S string\n}\ntype B struct {\n        p, q, r bool\n        S string\n}\n```\n",
        "created_at": "2014-10-08T16:29:42Z",
        "updated_at": "2014-10-10T08:11:51Z",
        "html_url": "https://github.com/go-mgo/mgo/pull/35#discussion_r18594462",
        "pull_request_url": "https://api.github.com/repos/go-mgo/mgo/pulls/35",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/18594462"
            },
            "html": {
                "href": "https://github.com/go-mgo/mgo/pull/35#discussion_r18594462"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/35"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/18594522",
        "pull_request_review_id": null,
        "id": 18594522,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NTk0NTIy",
        "diff_hunk": "@@ -0,0 +1,117 @@\n+package txn\n+\n+import (\n+\t\"bytes\"\n+\t\"reflect\"\n+\t\"strings\"\n+)\n+\n+type docKey struct {\n+\tC  string\n+\tId interface{}\n+}\n+\n+type docKeys []docKey\n+\n+func (ks docKeys) Len() int      { return len(ks) }\n+func (ks docKeys) Swap(i, j int) { ks[i], ks[j] = ks[j], ks[i] }\n+func (ks docKeys) Less(i, j int) bool {\n+\ta, b := ks[i], ks[j]\n+\tif a.C != b.C {\n+\t\treturn a.C < b.C\n+\t}\n+\treturn valuecmp(a.Id, b.Id) == -1\n+}\n+\n+func valuecmp(a, b interface{}) int {\n+\tav, an := valueNature(a)\n+\tbv, bn := valueNature(b)\n+\tif an < bn {\n+\t\treturn -1\n+\t}\n+\tif an > bn {\n+\t\treturn 1\n+\t}\n+\n+\tif av == bv {\n+\t\treturn 0\n+\t}\n+\tvar less bool\n+\tswitch an {\n+\tcase natureString:\n+\t\tless = av.(string) < bv.(string)\n+\tcase natureInt:\n+\t\tless = av.(int64) < bv.(int64)\n+\tcase natureFloat:\n+\t\tless = av.(float64) < bv.(float64)\n+\tcase natureBool:\n+\t\tless = !av.(bool) && bv.(bool)\n+\tcase natureStruct:\n+\t\tless = structcmp(av, bv) == -1\n+\tdefault:\n+\t\tpanic(\"unreachable\")\n+\t}\n+\tif less {\n+\t\treturn -1\n+\t}\n+\treturn 1\n+}\n+\n+func structcmp(a, b interface{}) int {\n+\tav := reflect.ValueOf(a)\n+\tbv := reflect.ValueOf(b)\n+\tat := av.Type()\n+\tbt := bv.Type()\n+\taf := numExportedField(at)\n+\tbf := numExportedField(bt)\n+\n+\tvar minField int\n+\tif af < bf {\n+\t\tminField = at.NumField()\n+\t} else {\n+\t\tminField = bt.NumField()\n+\t}\n+\n+\tfor i := 0; i < minField; i++ {\n+\t\tif n := valuecmp(av.Field(i).Interface(), bv.Field(i).Interface()); n != 0 {\n+\t\t\treturn n\n+\t\t}\n+\t\tnameA := getFieldName(at.Field(i))\n+\t\tnameB := getFieldName(bt.Field(i))\n+\t\tif n := bytes.Compare([]byte(nameA), []byte(nameB)); n != 0 {\n+\t\t\treturn n\n+\t\t}\n+\t}\n+\tif af < bf {\n+\t\treturn -1\n+\t} else if af > bf {\n+\t\treturn 1\n+\t}\n+\treturn 0\n+}\n+\n+func numExportedField(t reflect.Type) int {",
        "path": "txn/dockey.go",
        "position": null,
        "original_position": 93,
        "commit_id": "1a850554ad40e451d7dc44587710219e85cc0c37",
        "original_commit_id": "48bb657907d6504916c71b92faca0e442122d367",
        "user": {
            "login": "niemeyer",
            "id": 378683,
            "node_id": "MDQ6VXNlcjM3ODY4Mw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/378683?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/niemeyer",
            "html_url": "https://github.com/niemeyer",
            "followers_url": "https://api.github.com/users/niemeyer/followers",
            "following_url": "https://api.github.com/users/niemeyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/niemeyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/niemeyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/niemeyer/subscriptions",
            "organizations_url": "https://api.github.com/users/niemeyer/orgs",
            "repos_url": "https://api.github.com/users/niemeyer/repos",
            "events_url": "https://api.github.com/users/niemeyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/niemeyer/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Please drop this logic. It's not helping. See above.\n",
        "created_at": "2014-10-08T16:30:35Z",
        "updated_at": "2014-10-10T08:11:51Z",
        "html_url": "https://github.com/go-mgo/mgo/pull/35#discussion_r18594522",
        "pull_request_url": "https://api.github.com/repos/go-mgo/mgo/pulls/35",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/18594522"
            },
            "html": {
                "href": "https://github.com/go-mgo/mgo/pull/35#discussion_r18594522"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/35"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/18594641",
        "pull_request_review_id": null,
        "id": 18594641,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NTk0NjQx",
        "diff_hunk": "@@ -0,0 +1,176 @@\n+package txn\n+\n+import (\n+\t\"sort\"\n+\t\"testing\"\n+\n+\t. \"gopkg.in/check.v1\"\n+)\n+\n+func TestAll(t *testing.T) {\n+\tTestingT(t)\n+}\n+\n+type DocKeySuite struct{}\n+\n+var _ = Suite(&DocKeySuite{})\n+\n+func (s *DocKeySuite) TestSort(c *C) {\n+\ttype T struct {\n+\t\tA int\n+\t\tB string\n+\t}\n+\ttype T2 struct {\n+\t\tA int\n+\t\tB string\n+\t}\n+\ttype T3 struct {\n+\t\tA int\n+\t\tB string\n+\t}\n+\ttype T4 struct {\n+\t\tA int\n+\t\tB string\n+\t}\n+\ttype T5 struct {\n+\t\tF int\n+\t\tQ string\n+\t}\n+\ttype T6 struct {\n+\t\tA int\n+\t\tB string\n+\t}\n+\ttype T7 struct {\n+\t\tA bool\n+\t\tB float64\n+\t}\n+\ttype T8 struct {\n+\t\tA int\n+\t\tB string\n+\t}\n+\ttype T9 struct {\n+\t\tA int\n+\t\tB string\n+\t\tC bool\n+\t}\n+\ttype T10 struct {\n+\t\tA int    `bson:\"c\"`\n+\t\tB string `bson:\"d,omitempty\"`\n+\t}\n+\ttype T11 struct {\n+\t\tC int\n+\t\tD string\n+\t}\n+\n+\tfor i, test := range [][]docKeys{{",
        "path": "txn/dockey_test.go",
        "position": null,
        "original_position": 65,
        "commit_id": "1a850554ad40e451d7dc44587710219e85cc0c37",
        "original_commit_id": "48bb657907d6504916c71b92faca0e442122d367",
        "user": {
            "login": "niemeyer",
            "id": 378683,
            "node_id": "MDQ6VXNlcjM3ODY4Mw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/378683?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/niemeyer",
            "html_url": "https://github.com/niemeyer",
            "followers_url": "https://api.github.com/users/niemeyer/followers",
            "following_url": "https://api.github.com/users/niemeyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/niemeyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/niemeyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/niemeyer/subscriptions",
            "organizations_url": "https://api.github.com/users/niemeyer/orgs",
            "repos_url": "https://api.github.com/users/niemeyer/repos",
            "events_url": "https://api.github.com/users/niemeyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/niemeyer/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Please move these out to a top level variable named `docKeysTests`.\n",
        "created_at": "2014-10-08T16:32:50Z",
        "updated_at": "2014-10-10T08:11:51Z",
        "html_url": "https://github.com/go-mgo/mgo/pull/35#discussion_r18594641",
        "pull_request_url": "https://api.github.com/repos/go-mgo/mgo/pulls/35",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/18594641"
            },
            "html": {
                "href": "https://github.com/go-mgo/mgo/pull/35#discussion_r18594641"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/35"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/18636454",
        "pull_request_review_id": null,
        "id": 18636454,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NjM2NDU0",
        "diff_hunk": "@@ -0,0 +1,118 @@\n+package txn\n+\n+import (\n+\t\"reflect\"\n+\t\"strings\"\n+)\n+\n+type docKey struct {\n+\tC  string\n+\tId interface{}\n+}\n+\n+type docKeys []docKey\n+\n+func (ks docKeys) Len() int      { return len(ks) }\n+func (ks docKeys) Swap(i, j int) { ks[i], ks[j] = ks[j], ks[i] }\n+func (ks docKeys) Less(i, j int) bool {\n+\ta, b := ks[i], ks[j]\n+\tif a.C != b.C {\n+\t\treturn a.C < b.C\n+\t}\n+\treturn valuecmp(a.Id, b.Id) == -1\n+}\n+\n+func valuecmp(a, b interface{}) int {\n+\tav, an := valueNature(a)\n+\tbv, bn := valueNature(b)\n+\tif an < bn {\n+\t\treturn -1\n+\t}\n+\tif an > bn {\n+\t\treturn 1\n+\t}\n+\n+\tif av == bv {\n+\t\treturn 0\n+\t}\n+\tvar less bool\n+\tswitch an {\n+\tcase natureString:\n+\t\tless = av.(string) < bv.(string)\n+\tcase natureInt:\n+\t\tless = av.(int64) < bv.(int64)\n+\tcase natureFloat:\n+\t\tless = av.(float64) < bv.(float64)\n+\tcase natureBool:\n+\t\tless = !av.(bool) && bv.(bool)\n+\tcase natureStruct:\n+\t\tless = structcmp(av, bv) == -1\n+\tdefault:\n+\t\tpanic(\"unreachable\")\n+\t}\n+\tif less {\n+\t\treturn -1\n+\t}\n+\treturn 1\n+}\n+\n+func structcmp(a, b interface{}) int {\n+\tav := reflect.ValueOf(a)\n+\tbv := reflect.ValueOf(b)\n+\taf := exportedFields(av)\n+\tbf := exportedFields(bv)\n+\tafl := len(af)\n+\tbfl := len(bf)\n+\n+\tvar minField int\n+\tif afl < bfl {\n+\t\tminField = afl\n+\t} else {\n+\t\tminField = bfl\n+\t}\n+\n+\tfor i := 0; i < minField; i++ {\n+\t\tif n := valuecmp(av.FieldByName(af[i].Name).Interface(), bv.FieldByName(bf[i].Name).Interface()); n != 0 {",
        "path": "txn/dockey.go",
        "position": null,
        "original_position": 75,
        "commit_id": "1a850554ad40e451d7dc44587710219e85cc0c37",
        "original_commit_id": "99f9c3d2e77378d4a1407beaeed7bcba52806a98",
        "user": {
            "login": "niemeyer",
            "id": 378683,
            "node_id": "MDQ6VXNlcjM3ODY4Mw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/378683?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/niemeyer",
            "html_url": "https://github.com/niemeyer",
            "followers_url": "https://api.github.com/users/niemeyer/followers",
            "following_url": "https://api.github.com/users/niemeyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/niemeyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/niemeyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/niemeyer/subscriptions",
            "organizations_url": "https://api.github.com/users/niemeyer/orgs",
            "repos_url": "https://api.github.com/users/niemeyer/repos",
            "events_url": "https://api.github.com/users/niemeyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/niemeyer/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "This builds two lists with all exported fields, potentially not entirely used, and then dispatches a search by name to the reflect machinery on every single field. I think we can do better with an approach along these lines:\n\nhttp://paste.ubuntu.com/8526037/\n\nI coded that blindly (not even compiled). Can you please try to make it work?\n\nIf it does work, we're ready, but before merging, please move the content back where it was. It's just adding a couple of small functions now, and this file does not justify itself anymore.\n",
        "created_at": "2014-10-09T10:05:15Z",
        "updated_at": "2014-10-10T08:11:51Z",
        "html_url": "https://github.com/go-mgo/mgo/pull/35#discussion_r18636454",
        "pull_request_url": "https://api.github.com/repos/go-mgo/mgo/pulls/35",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/18636454"
            },
            "html": {
                "href": "https://github.com/go-mgo/mgo/pull/35#discussion_r18636454"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/35"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/18643562",
        "pull_request_review_id": null,
        "id": 18643562,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4NjQzNTYy",
        "diff_hunk": "@@ -513,6 +484,121 @@ func valueNature(v interface{}) (value interface{}, nature typeNature) {\n \t\treturn rv.Float(), natureFloat\n \tcase reflect.Bool:\n \t\treturn rv.Bool(), natureBool\n+\tcase reflect.Struct:\n+\t\treturn v, natureStruct\n \t}\n \tpanic(\"document id type unsupported by txn: \" + rv.Kind().String())\n }\n+\n+type docKey struct {\n+\tC  string\n+\tId interface{}\n+}\n+\n+type docKeys []docKey\n+\n+func (ks docKeys) Len() int      { return len(ks) }\n+func (ks docKeys) Swap(i, j int) { ks[i], ks[j] = ks[j], ks[i] }\n+func (ks docKeys) Less(i, j int) bool {\n+\ta, b := ks[i], ks[j]\n+\tif a.C != b.C {\n+\t\treturn a.C < b.C\n+\t}\n+\treturn valuecmp(a.Id, b.Id) == -1\n+}\n+\n+func valuecmp(a, b interface{}) int {\n+\tav, an := valueNature(a)\n+\tbv, bn := valueNature(b)\n+\tif an < bn {\n+\t\treturn -1\n+\t}\n+\tif an > bn {\n+\t\treturn 1\n+\t}\n+\n+\tif av == bv {\n+\t\treturn 0\n+\t}\n+\tvar less bool\n+\tswitch an {\n+\tcase natureString:\n+\t\tless = av.(string) < bv.(string)\n+\tcase natureInt:\n+\t\tless = av.(int64) < bv.(int64)\n+\tcase natureFloat:\n+\t\tless = av.(float64) < bv.(float64)\n+\tcase natureBool:\n+\t\tless = !av.(bool) && bv.(bool)\n+\tcase natureStruct:\n+\t\tless = structcmp(av, bv) == -1\n+\tdefault:\n+\t\tpanic(\"unreachable\")\n+\t}\n+\tif less {\n+\t\treturn -1\n+\t}\n+\treturn 1\n+}\n+\n+func structcmp(a, b interface{}) int {\n+\tav := reflect.ValueOf(a)\n+\tbv := reflect.ValueOf(b)\n+\n+\tvar ai, bi = 0, 0\n+\tvar an, bn = av.NumField(), bv.NumField()\n+\tvar af, bf reflect.StructField\n+\tfor {\n+\t\tfor ai < an {\n+\t\t\taf = av.Type().Field(ai)\n+\t\t\tai++",
        "path": "txn/txn.go",
        "position": null,
        "original_position": 135,
        "commit_id": "1a850554ad40e451d7dc44587710219e85cc0c37",
        "original_commit_id": "f51986e40815a61321c63346d4e66da8a98fd322",
        "user": {
            "login": "niemeyer",
            "id": 378683,
            "node_id": "MDQ6VXNlcjM3ODY4Mw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/378683?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/niemeyer",
            "html_url": "https://github.com/niemeyer",
            "followers_url": "https://api.github.com/users/niemeyer/followers",
            "following_url": "https://api.github.com/users/niemeyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/niemeyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/niemeyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/niemeyer/subscriptions",
            "organizations_url": "https://api.github.com/users/niemeyer/orgs",
            "repos_url": "https://api.github.com/users/niemeyer/repos",
            "events_url": "https://api.github.com/users/niemeyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/niemeyer/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "It looks like the logic is now incorrect. Consider that av.Field(ai) below will see something that is not af, and if ai == an below, the loop will leave without ever having looked at af, which means both the comparison is happening across unexpected fields, and that we're missing fields entirely. It's slightly worrying that we have no tests breaking.\n",
        "created_at": "2014-10-09T13:15:13Z",
        "updated_at": "2014-10-10T08:11:51Z",
        "html_url": "https://github.com/go-mgo/mgo/pull/35#discussion_r18643562",
        "pull_request_url": "https://api.github.com/repos/go-mgo/mgo/pulls/35",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/18643562"
            },
            "html": {
                "href": "https://github.com/go-mgo/mgo/pull/35#discussion_r18643562"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/35"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/19538849",
        "pull_request_review_id": null,
        "id": 19538849,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NTM4ODQ5",
        "diff_hunk": "@@ -1872,6 +1881,60 @@ func (c *Collection) Pipe(pipeline interface{}) *Pipe {\n \t}\n }\n \n+func (c *Collection) Repair() *Iter {",
        "path": "session.go",
        "position": null,
        "original_position": 20,
        "commit_id": "3fecc512fe874fa769063e07c0b8407c8d8792ef",
        "original_commit_id": "ed435dfdb740932b5e86e41c6a0383deb80a2d9b",
        "user": {
            "login": "niemeyer",
            "id": 378683,
            "node_id": "MDQ6VXNlcjM3ODY4Mw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/378683?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/niemeyer",
            "html_url": "https://github.com/niemeyer",
            "followers_url": "https://api.github.com/users/niemeyer/followers",
            "following_url": "https://api.github.com/users/niemeyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/niemeyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/niemeyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/niemeyer/subscriptions",
            "organizations_url": "https://api.github.com/users/niemeyer/orgs",
            "repos_url": "https://api.github.com/users/niemeyer/repos",
            "events_url": "https://api.github.com/users/niemeyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/niemeyer/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Please provide user-oriented documentation. The other methods are a good example for the style in which it should be worded.\n\nAlso, is there any documentation at the docs site for what the command does?\n",
        "created_at": "2014-10-29T14:02:54Z",
        "updated_at": "2014-10-29T18:14:34Z",
        "html_url": "https://github.com/go-mgo/mgo/pull/41#discussion_r19538849",
        "pull_request_url": "https://api.github.com/repos/go-mgo/mgo/pulls/41",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/19538849"
            },
            "html": {
                "href": "https://github.com/go-mgo/mgo/pull/41#discussion_r19538849"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/41"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/19539056",
        "pull_request_review_id": null,
        "id": 19539056,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NTM5MDU2",
        "diff_hunk": "@@ -1872,6 +1881,60 @@ func (c *Collection) Pipe(pipeline interface{}) *Pipe {\n \t}\n }\n \n+func (c *Collection) Repair() *Iter {\n+\t// Clone session and set it to strong mode so that the server",
        "path": "session.go",
        "position": null,
        "original_position": 21,
        "commit_id": "3fecc512fe874fa769063e07c0b8407c8d8792ef",
        "original_commit_id": "ed435dfdb740932b5e86e41c6a0383deb80a2d9b",
        "user": {
            "login": "niemeyer",
            "id": 378683,
            "node_id": "MDQ6VXNlcjM3ODY4Mw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/378683?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/niemeyer",
            "html_url": "https://github.com/niemeyer",
            "followers_url": "https://api.github.com/users/niemeyer/followers",
            "following_url": "https://api.github.com/users/niemeyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/niemeyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/niemeyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/niemeyer/subscriptions",
            "organizations_url": "https://api.github.com/users/niemeyer/orgs",
            "repos_url": "https://api.github.com/users/niemeyer/repos",
            "events_url": "https://api.github.com/users/niemeyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/niemeyer/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "The amount of boilerplate in this method, which is a copy of the aggregation equivalent, is unfortunate. Let's move forward with it, though, and I'll refactor into something more appropriate later.\n",
        "created_at": "2014-10-29T14:04:30Z",
        "updated_at": "2014-10-29T18:14:34Z",
        "html_url": "https://github.com/go-mgo/mgo/pull/41#discussion_r19539056",
        "pull_request_url": "https://api.github.com/repos/go-mgo/mgo/pulls/41",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/19539056"
            },
            "html": {
                "href": "https://github.com/go-mgo/mgo/pull/41#discussion_r19539056"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/41"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/19539091",
        "pull_request_review_id": null,
        "id": 19539091,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NTM5MDkx",
        "diff_hunk": "@@ -3192,6 +3192,48 @@ func (s *S) TestFsync(c *C) {\n \tc.Assert(err, IsNil)\n }\n \n+func (s *S) TestRepairCursor(c *C) {\n+\tif !s.versionAtLeast(2, 7) {\n+\t\tc.Skip(\"RepairCursor only works on 2.7+\")\n+\t}\n+\n+\tsession, err := mgo.Dial(\"localhost:40001\")\n+\tc.Assert(err, IsNil)\n+\tdefer session.Close()\n+\tsession.SetBatch(2)\n+\n+\tcoll := session.DB(\"mydb\").C(\"mycoll3\")\n+\terr = coll.DropCollection()\n+\n+\tns := []int{0, 10, 20, 30, 40, 50}\n+\tfor _, n := range ns {\n+\t\tcoll.Insert(M{\"n\": n})\n+\t}\n+\n+\trepairIter := coll.Repair()\n+\n+\tc.Assert(repairIter.Err(), IsNil)\n+\n+\tresult := struct{ N int }{}\n+\tresultCounts := map[int]int{}\n+\tfor repairIter.Next(&result) {\n+\t\tresultCounts[result.N]++\n+\t}\n+\n+\tc.Assert(repairIter.Next(&result), Equals, false)\n+\tc.Assert(repairIter.Err(), IsNil)\n+\tc.Assert(repairIter.Close(), IsNil)\n+\n+\t/* Verify that the results of the repair cursor are valid.",
        "path": "session_test.go",
        "position": null,
        "original_position": 36,
        "commit_id": "3fecc512fe874fa769063e07c0b8407c8d8792ef",
        "original_commit_id": "ed435dfdb740932b5e86e41c6a0383deb80a2d9b",
        "user": {
            "login": "niemeyer",
            "id": 378683,
            "node_id": "MDQ6VXNlcjM3ODY4Mw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/378683?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/niemeyer",
            "html_url": "https://github.com/niemeyer",
            "followers_url": "https://api.github.com/users/niemeyer/followers",
            "following_url": "https://api.github.com/users/niemeyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/niemeyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/niemeyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/niemeyer/subscriptions",
            "organizations_url": "https://api.github.com/users/niemeyer/orgs",
            "repos_url": "https://api.github.com/users/niemeyer/repos",
            "events_url": "https://api.github.com/users/niemeyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/niemeyer/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Please use the // style of comments, per the rest of the code.\n",
        "created_at": "2014-10-29T14:05:04Z",
        "updated_at": "2014-10-29T18:14:34Z",
        "html_url": "https://github.com/go-mgo/mgo/pull/41#discussion_r19539091",
        "pull_request_url": "https://api.github.com/repos/go-mgo/mgo/pulls/41",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/19539091"
            },
            "html": {
                "href": "https://github.com/go-mgo/mgo/pull/41#discussion_r19539091"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/41"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/19540038",
        "pull_request_review_id": null,
        "id": 19540038,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NTQwMDM4",
        "diff_hunk": "@@ -1872,6 +1881,60 @@ func (c *Collection) Pipe(pipeline interface{}) *Pipe {\n \t}\n }\n \n+func (c *Collection) Repair() *Iter {",
        "path": "session.go",
        "position": null,
        "original_position": 20,
        "commit_id": "3fecc512fe874fa769063e07c0b8407c8d8792ef",
        "original_commit_id": "ed435dfdb740932b5e86e41c6a0383deb80a2d9b",
        "user": {
            "login": "mpobrien",
            "id": 96535,
            "node_id": "MDQ6VXNlcjk2NTM1",
            "avatar_url": "https://avatars3.githubusercontent.com/u/96535?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mpobrien",
            "html_url": "https://github.com/mpobrien",
            "followers_url": "https://api.github.com/users/mpobrien/followers",
            "following_url": "https://api.github.com/users/mpobrien/following{/other_user}",
            "gists_url": "https://api.github.com/users/mpobrien/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mpobrien/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mpobrien/subscriptions",
            "organizations_url": "https://api.github.com/users/mpobrien/orgs",
            "repos_url": "https://api.github.com/users/mpobrien/repos",
            "events_url": "https://api.github.com/users/mpobrien/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mpobrien/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "OK - added some docstring info to this method. \nUnfortunately there's no information about this at the docs site since it's new feature, but I can look into getting it added there and then update this section when there's something I can link to.\n",
        "created_at": "2014-10-29T14:18:47Z",
        "updated_at": "2014-10-29T18:14:34Z",
        "html_url": "https://github.com/go-mgo/mgo/pull/41#discussion_r19540038",
        "pull_request_url": "https://api.github.com/repos/go-mgo/mgo/pulls/41",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/19540038"
            },
            "html": {
                "href": "https://github.com/go-mgo/mgo/pull/41#discussion_r19540038"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/41"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/19540067",
        "pull_request_review_id": null,
        "id": 19540067,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NTQwMDY3",
        "diff_hunk": "@@ -3192,6 +3192,48 @@ func (s *S) TestFsync(c *C) {\n \tc.Assert(err, IsNil)\n }\n \n+func (s *S) TestRepairCursor(c *C) {\n+\tif !s.versionAtLeast(2, 7) {\n+\t\tc.Skip(\"RepairCursor only works on 2.7+\")\n+\t}\n+\n+\tsession, err := mgo.Dial(\"localhost:40001\")\n+\tc.Assert(err, IsNil)\n+\tdefer session.Close()\n+\tsession.SetBatch(2)\n+\n+\tcoll := session.DB(\"mydb\").C(\"mycoll3\")\n+\terr = coll.DropCollection()\n+\n+\tns := []int{0, 10, 20, 30, 40, 50}\n+\tfor _, n := range ns {\n+\t\tcoll.Insert(M{\"n\": n})\n+\t}\n+\n+\trepairIter := coll.Repair()\n+\n+\tc.Assert(repairIter.Err(), IsNil)\n+\n+\tresult := struct{ N int }{}\n+\tresultCounts := map[int]int{}\n+\tfor repairIter.Next(&result) {\n+\t\tresultCounts[result.N]++\n+\t}\n+\n+\tc.Assert(repairIter.Next(&result), Equals, false)\n+\tc.Assert(repairIter.Err(), IsNil)\n+\tc.Assert(repairIter.Close(), IsNil)\n+\n+\t/* Verify that the results of the repair cursor are valid.",
        "path": "session_test.go",
        "position": null,
        "original_position": 36,
        "commit_id": "3fecc512fe874fa769063e07c0b8407c8d8792ef",
        "original_commit_id": "ed435dfdb740932b5e86e41c6a0383deb80a2d9b",
        "user": {
            "login": "mpobrien",
            "id": 96535,
            "node_id": "MDQ6VXNlcjk2NTM1",
            "avatar_url": "https://avatars3.githubusercontent.com/u/96535?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mpobrien",
            "html_url": "https://github.com/mpobrien",
            "followers_url": "https://api.github.com/users/mpobrien/followers",
            "following_url": "https://api.github.com/users/mpobrien/following{/other_user}",
            "gists_url": "https://api.github.com/users/mpobrien/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mpobrien/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mpobrien/subscriptions",
            "organizations_url": "https://api.github.com/users/mpobrien/orgs",
            "repos_url": "https://api.github.com/users/mpobrien/repos",
            "events_url": "https://api.github.com/users/mpobrien/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mpobrien/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Done.\n",
        "created_at": "2014-10-29T14:19:02Z",
        "updated_at": "2014-10-29T18:14:34Z",
        "html_url": "https://github.com/go-mgo/mgo/pull/41#discussion_r19540067",
        "pull_request_url": "https://api.github.com/repos/go-mgo/mgo/pulls/41",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/19540067"
            },
            "html": {
                "href": "https://github.com/go-mgo/mgo/pull/41#discussion_r19540067"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/41"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/19540766",
        "pull_request_review_id": null,
        "id": 19540766,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NTQwNzY2",
        "diff_hunk": "@@ -1872,6 +1881,60 @@ func (c *Collection) Pipe(pipeline interface{}) *Pipe {\n \t}\n }\n \n+func (c *Collection) Repair() *Iter {\n+\t// Clone session and set it to strong mode so that the server",
        "path": "session.go",
        "position": null,
        "original_position": 21,
        "commit_id": "3fecc512fe874fa769063e07c0b8407c8d8792ef",
        "original_commit_id": "ed435dfdb740932b5e86e41c6a0383deb80a2d9b",
        "user": {
            "login": "mpobrien",
            "id": 96535,
            "node_id": "MDQ6VXNlcjk2NTM1",
            "avatar_url": "https://avatars3.githubusercontent.com/u/96535?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mpobrien",
            "html_url": "https://github.com/mpobrien",
            "followers_url": "https://api.github.com/users/mpobrien/followers",
            "following_url": "https://api.github.com/users/mpobrien/following{/other_user}",
            "gists_url": "https://api.github.com/users/mpobrien/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mpobrien/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mpobrien/subscriptions",
            "organizations_url": "https://api.github.com/users/mpobrien/orgs",
            "repos_url": "https://api.github.com/users/mpobrien/repos",
            "events_url": "https://api.github.com/users/mpobrien/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mpobrien/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I agree. Refactoring out the boilerplate in a way that also affects the functions for aggregation seemed a bit intrusive for me to attempt within this pull request, so I figured I would defer that piece to you.\nPerhaps a more generic way to run commands that return cursors (which both Pipe() and this command could leverage) would be a good thing to add in the future.\n",
        "created_at": "2014-10-29T14:27:58Z",
        "updated_at": "2014-10-29T18:14:34Z",
        "html_url": "https://github.com/go-mgo/mgo/pull/41#discussion_r19540766",
        "pull_request_url": "https://api.github.com/repos/go-mgo/mgo/pulls/41",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/19540766"
            },
            "html": {
                "href": "https://github.com/go-mgo/mgo/pull/41#discussion_r19540766"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/41"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/19545510",
        "pull_request_review_id": null,
        "id": 19545510,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NTQ1NTEw",
        "diff_hunk": "@@ -1872,6 +1881,65 @@ func (c *Collection) Pipe(pipeline interface{}) *Pipe {\n \t}\n }\n \n+// Repair calls the 'repairCursor' command (supported in mongo 2.7.8 and later)\n+// and returns an iterator to go through the results.",
        "path": "session.go",
        "position": null,
        "original_position": 21,
        "commit_id": "3fecc512fe874fa769063e07c0b8407c8d8792ef",
        "original_commit_id": "338f01b0bbb2f258455a600ecef69f82383b9a7b",
        "user": {
            "login": "niemeyer",
            "id": 378683,
            "node_id": "MDQ6VXNlcjM3ODY4Mw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/378683?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/niemeyer",
            "html_url": "https://github.com/niemeyer",
            "followers_url": "https://api.github.com/users/niemeyer/followers",
            "following_url": "https://api.github.com/users/niemeyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/niemeyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/niemeyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/niemeyer/subscriptions",
            "organizations_url": "https://api.github.com/users/niemeyer/orgs",
            "repos_url": "https://api.github.com/users/niemeyer/repos",
            "events_url": "https://api.github.com/users/niemeyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/niemeyer/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Thanks, but I'd prefer to avoid mentioning implementation details. We don't do that in any other case.\n\nHere is a suggested version, based on yours:\n\n// Repair returns an iterator that goes over all recovered documents in the collection,\n// in a best-effort manner. This is most useful when there are damaged data files.\n// Multiple copies of the same document may be returned by the iterator.\n//\n// Repair is supported in MongoDB 2.7.8 and later.\n\n(update: included the MongoDB version)\n",
        "created_at": "2014-10-29T15:24:15Z",
        "updated_at": "2014-10-29T18:14:34Z",
        "html_url": "https://github.com/go-mgo/mgo/pull/41#discussion_r19545510",
        "pull_request_url": "https://api.github.com/repos/go-mgo/mgo/pulls/41",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/19545510"
            },
            "html": {
                "href": "https://github.com/go-mgo/mgo/pull/41#discussion_r19545510"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/41"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/19559902",
        "pull_request_review_id": null,
        "id": 19559902,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NTU5OTAy",
        "diff_hunk": "@@ -1872,6 +1881,65 @@ func (c *Collection) Pipe(pipeline interface{}) *Pipe {\n \t}\n }\n \n+// Repair calls the 'repairCursor' command (supported in mongo 2.7.8 and later)\n+// and returns an iterator to go through the results.",
        "path": "session.go",
        "position": null,
        "original_position": 21,
        "commit_id": "3fecc512fe874fa769063e07c0b8407c8d8792ef",
        "original_commit_id": "338f01b0bbb2f258455a600ecef69f82383b9a7b",
        "user": {
            "login": "mpobrien",
            "id": 96535,
            "node_id": "MDQ6VXNlcjk2NTM1",
            "avatar_url": "https://avatars3.githubusercontent.com/u/96535?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mpobrien",
            "html_url": "https://github.com/mpobrien",
            "followers_url": "https://api.github.com/users/mpobrien/followers",
            "following_url": "https://api.github.com/users/mpobrien/following{/other_user}",
            "gists_url": "https://api.github.com/users/mpobrien/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mpobrien/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mpobrien/subscriptions",
            "organizations_url": "https://api.github.com/users/mpobrien/orgs",
            "repos_url": "https://api.github.com/users/mpobrien/repos",
            "events_url": "https://api.github.com/users/mpobrien/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mpobrien/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Sounds good. Updated to use your suggested text.\n",
        "created_at": "2014-10-29T18:15:23Z",
        "updated_at": "2014-10-29T18:15:23Z",
        "html_url": "https://github.com/go-mgo/mgo/pull/41#discussion_r19559902",
        "pull_request_url": "https://api.github.com/repos/go-mgo/mgo/pulls/41",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/19559902"
            },
            "html": {
                "href": "https://github.com/go-mgo/mgo/pull/41#discussion_r19559902"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/41"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/21333340",
        "pull_request_review_id": null,
        "id": 21333340,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMzMzMzQw",
        "diff_hunk": "@@ -54,18 +54,25 @@ type mongoCluster struct {\n \tdirect       bool\n \tfailFast     bool\n \tsyncCount    uint\n+\terr          error\n+\tsetName      string\n \tcachedIndex  map[string]bool\n \tsync         chan bool\n \tdial         dialer\n }\n \n-func newCluster(userSeeds []string, direct, failFast bool, dial dialer) *mongoCluster {\n+var (\n+\tErrNoReachableServers = errors.New(\"no reachable servers\")",
        "path": "cluster.go",
        "position": null,
        "original_position": 13,
        "commit_id": "84603f4983eeaf751409ad2620640060714f7a4d",
        "original_commit_id": "4890377a975625a156d530718c118267c5256f4b",
        "user": {
            "login": "niemeyer",
            "id": 378683,
            "node_id": "MDQ6VXNlcjM3ODY4Mw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/378683?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/niemeyer",
            "html_url": "https://github.com/niemeyer",
            "followers_url": "https://api.github.com/users/niemeyer/followers",
            "following_url": "https://api.github.com/users/niemeyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/niemeyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/niemeyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/niemeyer/subscriptions",
            "organizations_url": "https://api.github.com/users/niemeyer/orgs",
            "repos_url": "https://api.github.com/users/niemeyer/repos",
            "events_url": "https://api.github.com/users/niemeyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/niemeyer/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Please do not change that in this branch. See #50 for discussion on it.\n",
        "created_at": "2014-12-04T20:28:40Z",
        "updated_at": "2014-12-15T21:47:21Z",
        "html_url": "https://github.com/go-mgo/mgo/pull/51#discussion_r21333340",
        "pull_request_url": "https://api.github.com/repos/go-mgo/mgo/pulls/51",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/21333340"
            },
            "html": {
                "href": "https://github.com/go-mgo/mgo/pull/51#discussion_r21333340"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/51"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/21333521",
        "pull_request_review_id": null,
        "id": 21333521,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMzMzNTIx",
        "diff_hunk": "@@ -250,7 +265,14 @@ func (cluster *mongoCluster) addServer(server *mongoServer, info *mongoServerInf\n \t\t\tlog(\"SYNC Discarding unknown server \", server.Addr, \" due to partial sync.\")\n \t\t\treturn\n \t\t}\n-\t\tcluster.servers.Add(server)\n+\t\tif cluster.setName != \"\" && info.SetName != cluster.setName {\n+\t\t\tlog(\"SYNC Discarding \", server.Addr, \" not part of \", cluster.setName, \" replica set.\")\n+\t\t\tcluster.Unlock()\n+\t\t\tserver.Close()\n+\t\t\treturn\n+\t\t} else {",
        "path": "cluster.go",
        "position": null,
        "original_position": 68,
        "commit_id": "84603f4983eeaf751409ad2620640060714f7a4d",
        "original_commit_id": "4890377a975625a156d530718c118267c5256f4b",
        "user": {
            "login": "niemeyer",
            "id": 378683,
            "node_id": "MDQ6VXNlcjM3ODY4Mw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/378683?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/niemeyer",
            "html_url": "https://github.com/niemeyer",
            "followers_url": "https://api.github.com/users/niemeyer/followers",
            "following_url": "https://api.github.com/users/niemeyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/niemeyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/niemeyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/niemeyer/subscriptions",
            "organizations_url": "https://api.github.com/users/niemeyer/orgs",
            "repos_url": "https://api.github.com/users/niemeyer/repos",
            "events_url": "https://api.github.com/users/niemeyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/niemeyer/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Please drop the else line. The above statement scope block is returning, so it's unnecessary logic making the code less clear.\n",
        "created_at": "2014-12-04T20:31:35Z",
        "updated_at": "2014-12-15T21:47:21Z",
        "html_url": "https://github.com/go-mgo/mgo/pull/51#discussion_r21333521",
        "pull_request_url": "https://api.github.com/repos/go-mgo/mgo/pulls/51",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/21333521"
            },
            "html": {
                "href": "https://github.com/go-mgo/mgo/pull/51#discussion_r21333521"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/51"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/21333747",
        "pull_request_review_id": null,
        "id": 21333747,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMzMzNzQ3",
        "diff_hunk": "@@ -539,7 +561,10 @@ func (cluster *mongoCluster) AcquireSocket(slaveOk bool, syncTimeout time.Durati\n \t\t\t\tsyncCount = cluster.syncCount\n \t\t\t} else if syncTimeout != 0 && started.Before(time.Now().Add(-syncTimeout)) || cluster.failFast && cluster.syncCount != syncCount {\n \t\t\t\tcluster.RUnlock()\n-\t\t\t\treturn nil, errors.New(\"no reachable servers\")\n+\t\t\t\tif cluster.err != nil {",
        "path": "cluster.go",
        "position": null,
        "original_position": 79,
        "commit_id": "84603f4983eeaf751409ad2620640060714f7a4d",
        "original_commit_id": "4890377a975625a156d530718c118267c5256f4b",
        "user": {
            "login": "niemeyer",
            "id": 378683,
            "node_id": "MDQ6VXNlcjM3ODY4Mw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/378683?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/niemeyer",
            "html_url": "https://github.com/niemeyer",
            "followers_url": "https://api.github.com/users/niemeyer/followers",
            "following_url": "https://api.github.com/users/niemeyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/niemeyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/niemeyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/niemeyer/subscriptions",
            "organizations_url": "https://api.github.com/users/niemeyer/orgs",
            "repos_url": "https://api.github.com/users/niemeyer/repos",
            "events_url": "https://api.github.com/users/niemeyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/niemeyer/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Race condition here. Must be read within the lock.\n",
        "created_at": "2014-12-04T20:34:57Z",
        "updated_at": "2014-12-15T21:47:21Z",
        "html_url": "https://github.com/go-mgo/mgo/pull/51#discussion_r21333747",
        "pull_request_url": "https://api.github.com/repos/go-mgo/mgo/pulls/51",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/21333747"
            },
            "html": {
                "href": "https://github.com/go-mgo/mgo/pull/51#discussion_r21333747"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/51"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/21856790",
        "pull_request_review_id": null,
        "id": 21856790,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxODU2Nzkw",
        "diff_hunk": "@@ -250,6 +259,12 @@ func (cluster *mongoCluster) addServer(server *mongoServer, info *mongoServerInf\n \t\t\tlog(\"SYNC Discarding unknown server \", server.Addr, \" due to partial sync.\")\n \t\t\treturn\n \t\t}\n+\t\tif cluster.setName != \"\" && info.SetName != cluster.setName {",
        "path": "cluster.go",
        "position": null,
        "original_position": 56,
        "commit_id": "84603f4983eeaf751409ad2620640060714f7a4d",
        "original_commit_id": "dcf26a2099d33581eab0b5aca771e5b12fcc9b9f",
        "user": {
            "login": "niemeyer",
            "id": 378683,
            "node_id": "MDQ6VXNlcjM3ODY4Mw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/378683?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/niemeyer",
            "html_url": "https://github.com/niemeyer",
            "followers_url": "https://api.github.com/users/niemeyer/followers",
            "following_url": "https://api.github.com/users/niemeyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/niemeyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/niemeyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/niemeyer/subscriptions",
            "organizations_url": "https://api.github.com/users/niemeyer/orgs",
            "repos_url": "https://api.github.com/users/niemeyer/repos",
            "events_url": "https://api.github.com/users/niemeyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/niemeyer/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Why do we need this test?  It looks like the only way we can possibly add a server is by syncing it, which will error out if the server is not in the valid replica set. What am I missing here?\n",
        "created_at": "2014-12-15T21:08:29Z",
        "updated_at": "2014-12-15T21:47:21Z",
        "html_url": "https://github.com/go-mgo/mgo/pull/51#discussion_r21856790",
        "pull_request_url": "https://api.github.com/repos/go-mgo/mgo/pulls/51",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/21856790"
            },
            "html": {
                "href": "https://github.com/go-mgo/mgo/pull/51#discussion_r21856790"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/51"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/21859575",
        "pull_request_review_id": null,
        "id": 21859575,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxODU5NTc1",
        "diff_hunk": "@@ -250,6 +259,12 @@ func (cluster *mongoCluster) addServer(server *mongoServer, info *mongoServerInf\n \t\t\tlog(\"SYNC Discarding unknown server \", server.Addr, \" due to partial sync.\")\n \t\t\treturn\n \t\t}\n+\t\tif cluster.setName != \"\" && info.SetName != cluster.setName {",
        "path": "cluster.go",
        "position": null,
        "original_position": 56,
        "commit_id": "84603f4983eeaf751409ad2620640060714f7a4d",
        "original_commit_id": "dcf26a2099d33581eab0b5aca771e5b12fcc9b9f",
        "user": {
            "login": "deafgoat",
            "id": 127706,
            "node_id": "MDQ6VXNlcjEyNzcwNg==",
            "avatar_url": "https://avatars0.githubusercontent.com/u/127706?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/deafgoat",
            "html_url": "https://github.com/deafgoat",
            "followers_url": "https://api.github.com/users/deafgoat/followers",
            "following_url": "https://api.github.com/users/deafgoat/following{/other_user}",
            "gists_url": "https://api.github.com/users/deafgoat/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/deafgoat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/deafgoat/subscriptions",
            "organizations_url": "https://api.github.com/users/deafgoat/orgs",
            "repos_url": "https://api.github.com/users/deafgoat/repos",
            "events_url": "https://api.github.com/users/deafgoat/events{/privacy}",
            "received_events_url": "https://api.github.com/users/deafgoat/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "You're right, we'll never get here with a server we shouldn't accept.\n",
        "created_at": "2014-12-15T21:45:13Z",
        "updated_at": "2014-12-15T21:47:21Z",
        "html_url": "https://github.com/go-mgo/mgo/pull/51#discussion_r21859575",
        "pull_request_url": "https://api.github.com/repos/go-mgo/mgo/pulls/51",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/21859575"
            },
            "html": {
                "href": "https://github.com/go-mgo/mgo/pull/51#discussion_r21859575"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/51"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/21919499",
        "pull_request_review_id": null,
        "id": 21919499,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxOTE5NDk5",
        "diff_hunk": "@@ -907,6 +907,230 @@ func (s *S) TestSocketTimeoutOnInactiveSocket(c *C) {\n \tc.Assert(session.Ping(), IsNil)\n }\n \n+func (s *S) TestDialWithKnownReplPrimary(c *C) {\n+\t// port 40011 is used by replica set rs1's primary\n+\tinfo := mgo.DialInfo{\n+\t\tAddrs:          []string{\"localhost:40011\"},\n+\t\tTimeout:        5 * time.Second,\n+\t\tReplicaSetName: \"rs1\",\n+\t}\n+\tconnectionUrl := \"mongodb://localhost:40011/?replicaSet=rs1\"\n+\n+\trunTest := func(session *mgo.Session, err error) {\n+\t\tc.Assert(err, IsNil)\n+\t\tdefer session.Close()\n+\n+\t\tcoll := session.DB(\"mydb\").C(\"mycoll\")\n+\t\tcoll.Insert(M{\"a\": 1, \"b\": 2})\n+\n+\t\tresult := struct{ Ok bool }{}\n+\t\terr = session.Run(\"getLastError\", &result)",
        "path": "cluster_test.go",
        "position": 21,
        "original_position": 21,
        "commit_id": "84603f4983eeaf751409ad2620640060714f7a4d",
        "original_commit_id": "84603f4983eeaf751409ad2620640060714f7a4d",
        "user": {
            "login": "niemeyer",
            "id": 378683,
            "node_id": "MDQ6VXNlcjM3ODY4Mw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/378683?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/niemeyer",
            "html_url": "https://github.com/niemeyer",
            "followers_url": "https://api.github.com/users/niemeyer/followers",
            "following_url": "https://api.github.com/users/niemeyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/niemeyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/niemeyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/niemeyer/subscriptions",
            "organizations_url": "https://api.github.com/users/niemeyer/orgs",
            "repos_url": "https://api.github.com/users/niemeyer/repos",
            "events_url": "https://api.github.com/users/niemeyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/niemeyer/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I'm merging it, and will do the remaining changes, but I'll add a few extra notes here just for awareness.\n\nIn the line above, rather than re-issuing a getLastError, the result of Insert should be checked.\n",
        "created_at": "2014-12-16T18:25:16Z",
        "updated_at": "2014-12-16T18:25:16Z",
        "html_url": "https://github.com/go-mgo/mgo/pull/51#discussion_r21919499",
        "pull_request_url": "https://api.github.com/repos/go-mgo/mgo/pulls/51",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/21919499"
            },
            "html": {
                "href": "https://github.com/go-mgo/mgo/pull/51#discussion_r21919499"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/51"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/21919675",
        "pull_request_review_id": null,
        "id": 21919675,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxOTE5Njc1",
        "diff_hunk": "@@ -907,6 +907,230 @@ func (s *S) TestSocketTimeoutOnInactiveSocket(c *C) {\n \tc.Assert(session.Ping(), IsNil)\n }\n \n+func (s *S) TestDialWithKnownReplPrimary(c *C) {\n+\t// port 40011 is used by replica set rs1's primary\n+\tinfo := mgo.DialInfo{\n+\t\tAddrs:          []string{\"localhost:40011\"},\n+\t\tTimeout:        5 * time.Second,\n+\t\tReplicaSetName: \"rs1\",\n+\t}\n+\tconnectionUrl := \"mongodb://localhost:40011/?replicaSet=rs1\"\n+\n+\trunTest := func(session *mgo.Session, err error) {\n+\t\tc.Assert(err, IsNil)\n+\t\tdefer session.Close()\n+\n+\t\tcoll := session.DB(\"mydb\").C(\"mycoll\")\n+\t\tcoll.Insert(M{\"a\": 1, \"b\": 2})\n+\n+\t\tresult := struct{ Ok bool }{}\n+\t\terr = session.Run(\"getLastError\", &result)\n+\t\tc.Assert(err, IsNil)\n+\t\tc.Assert(result.Ok, Equals, true)\n+\t}\n+\n+\tsession, err := mgo.DialWithInfo(&info)\n+\trunTest(session, err)\n+\tsession, err = mgo.Dial(connectionUrl)\n+\trunTest(session, err)\n+}\n+\n+func (s *S) TestDialWithKnownReplSecondary(c *C) {\n+\t// port 40012 is used by an rs1 replica set secondary\n+\tinfo := mgo.DialInfo{\n+\t\tAddrs:          []string{\"localhost:40012\"},\n+\t\tTimeout:        5 * time.Second,\n+\t\tReplicaSetName: \"rs1\",\n+\t}\n+\tconnectionUrl := \"mongodb://localhost:40012/?replicaSet=rs1\"\n+\n+\trunTest := func(session *mgo.Session, err error) {\n+\t\tc.Assert(err, IsNil)\n+\t\tdefer session.Close()\n+\n+\t\tcoll := session.DB(\"mydb\").C(\"mycoll\")\n+\t\tcoll.Insert(M{\"a\": 1, \"b\": 2})\n+\n+\t\tresult := struct{ Ok bool }{}\n+\t\terr = session.Run(\"getLastError\", &result)\n+\t\tc.Assert(err, IsNil)\n+\t\tc.Assert(result.Ok, Equals, true)\n+\t}\n+\n+\tsession, err := mgo.DialWithInfo(&info)\n+\trunTest(session, err)\n+\tsession, err = mgo.Dial(connectionUrl)\n+\trunTest(session, err)\n+}\n+\n+func (s *S) TestDialWithForeignReplPrimary(c *C) {\n+\tif *fast {\n+\t\tc.Skip(\"-fast\")\n+\t}\n+\n+\t// port 40021 is used by replica set rs2's primary\n+\tinfo := mgo.DialInfo{\n+\t\tAddrs:          []string{\"localhost:40021\"},\n+\t\tTimeout:        5 * time.Second,\n+\t\tReplicaSetName: \"rs1\",\n+\t}\n+\t_, err := mgo.DialWithInfo(&info)\n+\tc.Assert(err, ErrorMatches, \"no reachable servers\")\n+\n+\tinfo.Direct = true\n+\t_, err = mgo.DialWithInfo(&info)\n+\tc.Assert(err, ErrorMatches, \"no reachable servers\")\n+\n+\tconnectionUrl := \"mongodb://localhost:40021/?replicaSet=rs1\"\n+\t_, err = mgo.Dial(connectionUrl)\n+\tc.Assert(err, ErrorMatches, \"no reachable servers\")\n+\n+\tconnectionUrl += \"&connect=direct\"\n+\t_, err = mgo.Dial(connectionUrl)\n+\tc.Assert(err, ErrorMatches, \"no reachable servers\")\n+}\n+\n+func (s *S) TestDialWithForeignReplSecondary(c *C) {\n+\tif *fast {\n+\t\tc.Skip(\"-fast\")\n+\t}\n+\n+\t// port 40022 is used by an rs2 replica set secondary\n+\tinfo := mgo.DialInfo{\n+\t\tAddrs:          []string{\"localhost:40022\"},\n+\t\tTimeout:        5 * time.Second,\n+\t\tReplicaSetName: \"rs1\",\n+\t}\n+\t_, err := mgo.DialWithInfo(&info)\n+\tc.Assert(err, ErrorMatches, \"no reachable servers\")\n+\n+\tinfo.Direct = true\n+\t_, err = mgo.DialWithInfo(&info)\n+\tc.Assert(err, ErrorMatches, \"no reachable servers\")\n+\n+\tconnectionUrl := \"mongodb://localhost:40022/?replicaSet=rs1\"\n+\t_, err = mgo.Dial(connectionUrl)\n+\tc.Assert(err, ErrorMatches, \"no reachable servers\")\n+\n+\tconnectionUrl += \"&connect=direct\"\n+\t_, err = mgo.Dial(connectionUrl)\n+\tc.Assert(err, ErrorMatches, \"no reachable servers\")\n+}\n+\n+func (s *S) TestDialWithMixedSeedList(c *C) {",
        "path": "cluster_test.go",
        "position": 114,
        "original_position": 114,
        "commit_id": "84603f4983eeaf751409ad2620640060714f7a4d",
        "original_commit_id": "84603f4983eeaf751409ad2620640060714f7a4d",
        "user": {
            "login": "niemeyer",
            "id": 378683,
            "node_id": "MDQ6VXNlcjM3ODY4Mw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/378683?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/niemeyer",
            "html_url": "https://github.com/niemeyer",
            "followers_url": "https://api.github.com/users/niemeyer/followers",
            "following_url": "https://api.github.com/users/niemeyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/niemeyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/niemeyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/niemeyer/subscriptions",
            "organizations_url": "https://api.github.com/users/niemeyer/orgs",
            "repos_url": "https://api.github.com/users/niemeyer/repos",
            "events_url": "https://api.github.com/users/niemeyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/niemeyer/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I don't understand the benefit of all the tests above if we have this one. We might even test the log to ensure the proper error was reported, but this makes it clear that the offending servers never get into the live list. We don't need to test again that mgo behaves correctly when no appropriate servers are available, as we have specific tests checking just that.\n",
        "created_at": "2014-12-16T18:27:42Z",
        "updated_at": "2014-12-16T18:27:42Z",
        "html_url": "https://github.com/go-mgo/mgo/pull/51#discussion_r21919675",
        "pull_request_url": "https://api.github.com/repos/go-mgo/mgo/pulls/51",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/21919675"
            },
            "html": {
                "href": "https://github.com/go-mgo/mgo/pull/51#discussion_r21919675"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/51"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/21920157",
        "pull_request_review_id": null,
        "id": 21920157,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxOTIwMTU3",
        "diff_hunk": "@@ -294,9 +298,16 @@ type DialInfo struct {\n \n \t// Database is the default database name used when the Session.DB method\n \t// is called with an empty name, and is also used during the intial\n-\t// authenticatoin if Source is unset.\n+\t// authentication if Source is unset.\n \tDatabase string\n \n+\t// ReplicaSetName defines the name of the replica set to use for cluster\n+\t// discovery and monitoring. If specified, at least one of the seed servers\n+\t// must be a member of the ReplicaSetName replica set - non-members are\n+\t// ignored. If unspecified, the intended connection is assumed to be either",
        "path": "session.go",
        "position": 65,
        "original_position": 65,
        "commit_id": "84603f4983eeaf751409ad2620640060714f7a4d",
        "original_commit_id": "84603f4983eeaf751409ad2620640060714f7a4d",
        "user": {
            "login": "niemeyer",
            "id": 378683,
            "node_id": "MDQ6VXNlcjM3ODY4Mw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/378683?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/niemeyer",
            "html_url": "https://github.com/niemeyer",
            "followers_url": "https://api.github.com/users/niemeyer/followers",
            "following_url": "https://api.github.com/users/niemeyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/niemeyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/niemeyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/niemeyer/subscriptions",
            "organizations_url": "https://api.github.com/users/niemeyer/orgs",
            "repos_url": "https://api.github.com/users/niemeyer/repos",
            "events_url": "https://api.github.com/users/niemeyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/niemeyer/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "That's not true. If unspecified the driver can still speak to a replica set. Again, no need to fix.. I'm merging and doing the needed changes.\n",
        "created_at": "2014-12-16T18:33:52Z",
        "updated_at": "2014-12-16T18:33:52Z",
        "html_url": "https://github.com/go-mgo/mgo/pull/51#discussion_r21920157",
        "pull_request_url": "https://api.github.com/repos/go-mgo/mgo/pulls/51",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/21920157"
            },
            "html": {
                "href": "https://github.com/go-mgo/mgo/pull/51#discussion_r21920157"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/51"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/21929962",
        "pull_request_review_id": null,
        "id": 21929962,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxOTI5OTYy",
        "diff_hunk": "@@ -907,6 +907,230 @@ func (s *S) TestSocketTimeoutOnInactiveSocket(c *C) {\n \tc.Assert(session.Ping(), IsNil)\n }\n \n+func (s *S) TestDialWithKnownReplPrimary(c *C) {\n+\t// port 40011 is used by replica set rs1's primary\n+\tinfo := mgo.DialInfo{\n+\t\tAddrs:          []string{\"localhost:40011\"},\n+\t\tTimeout:        5 * time.Second,\n+\t\tReplicaSetName: \"rs1\",\n+\t}\n+\tconnectionUrl := \"mongodb://localhost:40011/?replicaSet=rs1\"\n+\n+\trunTest := func(session *mgo.Session, err error) {\n+\t\tc.Assert(err, IsNil)\n+\t\tdefer session.Close()\n+\n+\t\tcoll := session.DB(\"mydb\").C(\"mycoll\")\n+\t\tcoll.Insert(M{\"a\": 1, \"b\": 2})\n+\n+\t\tresult := struct{ Ok bool }{}\n+\t\terr = session.Run(\"getLastError\", &result)\n+\t\tc.Assert(err, IsNil)\n+\t\tc.Assert(result.Ok, Equals, true)\n+\t}\n+\n+\tsession, err := mgo.DialWithInfo(&info)\n+\trunTest(session, err)\n+\tsession, err = mgo.Dial(connectionUrl)\n+\trunTest(session, err)\n+}\n+\n+func (s *S) TestDialWithKnownReplSecondary(c *C) {\n+\t// port 40012 is used by an rs1 replica set secondary\n+\tinfo := mgo.DialInfo{\n+\t\tAddrs:          []string{\"localhost:40012\"},\n+\t\tTimeout:        5 * time.Second,\n+\t\tReplicaSetName: \"rs1\",\n+\t}\n+\tconnectionUrl := \"mongodb://localhost:40012/?replicaSet=rs1\"\n+\n+\trunTest := func(session *mgo.Session, err error) {\n+\t\tc.Assert(err, IsNil)\n+\t\tdefer session.Close()\n+\n+\t\tcoll := session.DB(\"mydb\").C(\"mycoll\")\n+\t\tcoll.Insert(M{\"a\": 1, \"b\": 2})\n+\n+\t\tresult := struct{ Ok bool }{}\n+\t\terr = session.Run(\"getLastError\", &result)\n+\t\tc.Assert(err, IsNil)\n+\t\tc.Assert(result.Ok, Equals, true)\n+\t}\n+\n+\tsession, err := mgo.DialWithInfo(&info)\n+\trunTest(session, err)\n+\tsession, err = mgo.Dial(connectionUrl)\n+\trunTest(session, err)\n+}\n+\n+func (s *S) TestDialWithForeignReplPrimary(c *C) {\n+\tif *fast {\n+\t\tc.Skip(\"-fast\")\n+\t}\n+\n+\t// port 40021 is used by replica set rs2's primary\n+\tinfo := mgo.DialInfo{\n+\t\tAddrs:          []string{\"localhost:40021\"},\n+\t\tTimeout:        5 * time.Second,\n+\t\tReplicaSetName: \"rs1\",\n+\t}\n+\t_, err := mgo.DialWithInfo(&info)\n+\tc.Assert(err, ErrorMatches, \"no reachable servers\")\n+\n+\tinfo.Direct = true\n+\t_, err = mgo.DialWithInfo(&info)\n+\tc.Assert(err, ErrorMatches, \"no reachable servers\")\n+\n+\tconnectionUrl := \"mongodb://localhost:40021/?replicaSet=rs1\"\n+\t_, err = mgo.Dial(connectionUrl)\n+\tc.Assert(err, ErrorMatches, \"no reachable servers\")\n+\n+\tconnectionUrl += \"&connect=direct\"\n+\t_, err = mgo.Dial(connectionUrl)\n+\tc.Assert(err, ErrorMatches, \"no reachable servers\")\n+}\n+\n+func (s *S) TestDialWithForeignReplSecondary(c *C) {\n+\tif *fast {\n+\t\tc.Skip(\"-fast\")\n+\t}\n+\n+\t// port 40022 is used by an rs2 replica set secondary\n+\tinfo := mgo.DialInfo{\n+\t\tAddrs:          []string{\"localhost:40022\"},\n+\t\tTimeout:        5 * time.Second,\n+\t\tReplicaSetName: \"rs1\",\n+\t}\n+\t_, err := mgo.DialWithInfo(&info)\n+\tc.Assert(err, ErrorMatches, \"no reachable servers\")\n+\n+\tinfo.Direct = true\n+\t_, err = mgo.DialWithInfo(&info)\n+\tc.Assert(err, ErrorMatches, \"no reachable servers\")\n+\n+\tconnectionUrl := \"mongodb://localhost:40022/?replicaSet=rs1\"\n+\t_, err = mgo.Dial(connectionUrl)\n+\tc.Assert(err, ErrorMatches, \"no reachable servers\")\n+\n+\tconnectionUrl += \"&connect=direct\"\n+\t_, err = mgo.Dial(connectionUrl)\n+\tc.Assert(err, ErrorMatches, \"no reachable servers\")\n+}\n+\n+func (s *S) TestDialWithMixedSeedList(c *C) {",
        "path": "cluster_test.go",
        "position": 114,
        "original_position": 114,
        "commit_id": "84603f4983eeaf751409ad2620640060714f7a4d",
        "original_commit_id": "84603f4983eeaf751409ad2620640060714f7a4d",
        "user": {
            "login": "deafgoat",
            "id": 127706,
            "node_id": "MDQ6VXNlcjEyNzcwNg==",
            "avatar_url": "https://avatars0.githubusercontent.com/u/127706?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/deafgoat",
            "html_url": "https://github.com/deafgoat",
            "followers_url": "https://api.github.com/users/deafgoat/followers",
            "following_url": "https://api.github.com/users/deafgoat/following{/other_user}",
            "gists_url": "https://api.github.com/users/deafgoat/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/deafgoat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/deafgoat/subscriptions",
            "organizations_url": "https://api.github.com/users/deafgoat/orgs",
            "repos_url": "https://api.github.com/users/deafgoat/repos",
            "events_url": "https://api.github.com/users/deafgoat/events{/privacy}",
            "received_events_url": "https://api.github.com/users/deafgoat/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Yup, sounds good to me. Is this eventually going to be in the v2 branch?\n",
        "created_at": "2014-12-16T20:35:30Z",
        "updated_at": "2014-12-16T20:35:30Z",
        "html_url": "https://github.com/go-mgo/mgo/pull/51#discussion_r21929962",
        "pull_request_url": "https://api.github.com/repos/go-mgo/mgo/pulls/51",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/21929962"
            },
            "html": {
                "href": "https://github.com/go-mgo/mgo/pull/51#discussion_r21929962"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/51"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/21930286",
        "pull_request_review_id": null,
        "id": 21930286,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxOTMwMjg2",
        "diff_hunk": "@@ -294,9 +298,16 @@ type DialInfo struct {\n \n \t// Database is the default database name used when the Session.DB method\n \t// is called with an empty name, and is also used during the intial\n-\t// authenticatoin if Source is unset.\n+\t// authentication if Source is unset.\n \tDatabase string\n \n+\t// ReplicaSetName defines the name of the replica set to use for cluster\n+\t// discovery and monitoring. If specified, at least one of the seed servers\n+\t// must be a member of the ReplicaSetName replica set - non-members are\n+\t// ignored. If unspecified, the intended connection is assumed to be either",
        "path": "session.go",
        "position": 65,
        "original_position": 65,
        "commit_id": "84603f4983eeaf751409ad2620640060714f7a4d",
        "original_commit_id": "84603f4983eeaf751409ad2620640060714f7a4d",
        "user": {
            "login": "deafgoat",
            "id": 127706,
            "node_id": "MDQ6VXNlcjEyNzcwNg==",
            "avatar_url": "https://avatars0.githubusercontent.com/u/127706?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/deafgoat",
            "html_url": "https://github.com/deafgoat",
            "followers_url": "https://api.github.com/users/deafgoat/followers",
            "following_url": "https://api.github.com/users/deafgoat/following{/other_user}",
            "gists_url": "https://api.github.com/users/deafgoat/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/deafgoat/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/deafgoat/subscriptions",
            "organizations_url": "https://api.github.com/users/deafgoat/orgs",
            "repos_url": "https://api.github.com/users/deafgoat/repos",
            "events_url": "https://api.github.com/users/deafgoat/events{/privacy}",
            "received_events_url": "https://api.github.com/users/deafgoat/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "You're right, thanks.\n",
        "created_at": "2014-12-16T20:40:49Z",
        "updated_at": "2014-12-16T20:40:49Z",
        "html_url": "https://github.com/go-mgo/mgo/pull/51#discussion_r21930286",
        "pull_request_url": "https://api.github.com/repos/go-mgo/mgo/pulls/51",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/21930286"
            },
            "html": {
                "href": "https://github.com/go-mgo/mgo/pull/51#discussion_r21930286"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/51"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/21997354",
        "pull_request_review_id": null,
        "id": 21997354,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxOTk3MzU0",
        "diff_hunk": "@@ -907,6 +907,230 @@ func (s *S) TestSocketTimeoutOnInactiveSocket(c *C) {\n \tc.Assert(session.Ping(), IsNil)\n }\n \n+func (s *S) TestDialWithKnownReplPrimary(c *C) {\n+\t// port 40011 is used by replica set rs1's primary\n+\tinfo := mgo.DialInfo{\n+\t\tAddrs:          []string{\"localhost:40011\"},\n+\t\tTimeout:        5 * time.Second,\n+\t\tReplicaSetName: \"rs1\",\n+\t}\n+\tconnectionUrl := \"mongodb://localhost:40011/?replicaSet=rs1\"\n+\n+\trunTest := func(session *mgo.Session, err error) {\n+\t\tc.Assert(err, IsNil)\n+\t\tdefer session.Close()\n+\n+\t\tcoll := session.DB(\"mydb\").C(\"mycoll\")\n+\t\tcoll.Insert(M{\"a\": 1, \"b\": 2})\n+\n+\t\tresult := struct{ Ok bool }{}\n+\t\terr = session.Run(\"getLastError\", &result)\n+\t\tc.Assert(err, IsNil)\n+\t\tc.Assert(result.Ok, Equals, true)\n+\t}\n+\n+\tsession, err := mgo.DialWithInfo(&info)\n+\trunTest(session, err)\n+\tsession, err = mgo.Dial(connectionUrl)\n+\trunTest(session, err)\n+}\n+\n+func (s *S) TestDialWithKnownReplSecondary(c *C) {\n+\t// port 40012 is used by an rs1 replica set secondary\n+\tinfo := mgo.DialInfo{\n+\t\tAddrs:          []string{\"localhost:40012\"},\n+\t\tTimeout:        5 * time.Second,\n+\t\tReplicaSetName: \"rs1\",\n+\t}\n+\tconnectionUrl := \"mongodb://localhost:40012/?replicaSet=rs1\"\n+\n+\trunTest := func(session *mgo.Session, err error) {\n+\t\tc.Assert(err, IsNil)\n+\t\tdefer session.Close()\n+\n+\t\tcoll := session.DB(\"mydb\").C(\"mycoll\")\n+\t\tcoll.Insert(M{\"a\": 1, \"b\": 2})\n+\n+\t\tresult := struct{ Ok bool }{}\n+\t\terr = session.Run(\"getLastError\", &result)\n+\t\tc.Assert(err, IsNil)\n+\t\tc.Assert(result.Ok, Equals, true)\n+\t}\n+\n+\tsession, err := mgo.DialWithInfo(&info)\n+\trunTest(session, err)\n+\tsession, err = mgo.Dial(connectionUrl)\n+\trunTest(session, err)\n+}\n+\n+func (s *S) TestDialWithForeignReplPrimary(c *C) {\n+\tif *fast {\n+\t\tc.Skip(\"-fast\")\n+\t}\n+\n+\t// port 40021 is used by replica set rs2's primary\n+\tinfo := mgo.DialInfo{\n+\t\tAddrs:          []string{\"localhost:40021\"},\n+\t\tTimeout:        5 * time.Second,\n+\t\tReplicaSetName: \"rs1\",\n+\t}\n+\t_, err := mgo.DialWithInfo(&info)\n+\tc.Assert(err, ErrorMatches, \"no reachable servers\")\n+\n+\tinfo.Direct = true\n+\t_, err = mgo.DialWithInfo(&info)\n+\tc.Assert(err, ErrorMatches, \"no reachable servers\")\n+\n+\tconnectionUrl := \"mongodb://localhost:40021/?replicaSet=rs1\"\n+\t_, err = mgo.Dial(connectionUrl)\n+\tc.Assert(err, ErrorMatches, \"no reachable servers\")\n+\n+\tconnectionUrl += \"&connect=direct\"\n+\t_, err = mgo.Dial(connectionUrl)\n+\tc.Assert(err, ErrorMatches, \"no reachable servers\")\n+}\n+\n+func (s *S) TestDialWithForeignReplSecondary(c *C) {\n+\tif *fast {\n+\t\tc.Skip(\"-fast\")\n+\t}\n+\n+\t// port 40022 is used by an rs2 replica set secondary\n+\tinfo := mgo.DialInfo{\n+\t\tAddrs:          []string{\"localhost:40022\"},\n+\t\tTimeout:        5 * time.Second,\n+\t\tReplicaSetName: \"rs1\",\n+\t}\n+\t_, err := mgo.DialWithInfo(&info)\n+\tc.Assert(err, ErrorMatches, \"no reachable servers\")\n+\n+\tinfo.Direct = true\n+\t_, err = mgo.DialWithInfo(&info)\n+\tc.Assert(err, ErrorMatches, \"no reachable servers\")\n+\n+\tconnectionUrl := \"mongodb://localhost:40022/?replicaSet=rs1\"\n+\t_, err = mgo.Dial(connectionUrl)\n+\tc.Assert(err, ErrorMatches, \"no reachable servers\")\n+\n+\tconnectionUrl += \"&connect=direct\"\n+\t_, err = mgo.Dial(connectionUrl)\n+\tc.Assert(err, ErrorMatches, \"no reachable servers\")\n+}\n+\n+func (s *S) TestDialWithMixedSeedList(c *C) {",
        "path": "cluster_test.go",
        "position": 114,
        "original_position": 114,
        "commit_id": "84603f4983eeaf751409ad2620640060714f7a4d",
        "original_commit_id": "84603f4983eeaf751409ad2620640060714f7a4d",
        "user": {
            "login": "niemeyer",
            "id": 378683,
            "node_id": "MDQ6VXNlcjM3ODY4Mw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/378683?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/niemeyer",
            "html_url": "https://github.com/niemeyer",
            "followers_url": "https://api.github.com/users/niemeyer/followers",
            "following_url": "https://api.github.com/users/niemeyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/niemeyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/niemeyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/niemeyer/subscriptions",
            "organizations_url": "https://api.github.com/users/niemeyer/orgs",
            "repos_url": "https://api.github.com/users/niemeyer/repos",
            "events_url": "https://api.github.com/users/niemeyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/niemeyer/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Yeah, definitely. v2-dev contains the content that will be the next v2 release.\n",
        "created_at": "2014-12-17T19:34:06Z",
        "updated_at": "2014-12-17T19:34:06Z",
        "html_url": "https://github.com/go-mgo/mgo/pull/51#discussion_r21997354",
        "pull_request_url": "https://api.github.com/repos/go-mgo/mgo/pulls/51",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/21997354"
            },
            "html": {
                "href": "https://github.com/go-mgo/mgo/pull/51#discussion_r21997354"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/51"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/30089352",
        "pull_request_review_id": null,
        "id": 30089352,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDg5MzUy",
        "diff_hunk": "@@ -417,7 +416,9 @@ func (r *Runner) PurgeMissing(collections ...string) error {\n \t\t\t\treturn fmt.Errorf(\"error purging missing transaction %s: %v\", txnId.Hex(), err)\n \t\t\t}\n \t\t}\n-\t\tcolls[collection] = true\n+\t\tif err := iter.Close(); err != nil {\n+\t\t\treturn fmt.Errorf(\"transaction queue iteration error for %s: %v\", collection, err)",
        "path": "txn/txn.go",
        "position": null,
        "original_position": 14,
        "commit_id": "e5d775ad02fa2dfc96d4a4cc91d2938d49bdd4c3",
        "original_commit_id": "54222d9c96c824464b4563606b63f7c8680b9699",
        "user": {
            "login": "niemeyer",
            "id": 378683,
            "node_id": "MDQ6VXNlcjM3ODY4Mw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/378683?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/niemeyer",
            "html_url": "https://github.com/niemeyer",
            "followers_url": "https://api.github.com/users/niemeyer/followers",
            "following_url": "https://api.github.com/users/niemeyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/niemeyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/niemeyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/niemeyer/subscriptions",
            "organizations_url": "https://api.github.com/users/niemeyer/orgs",
            "repos_url": "https://api.github.com/users/niemeyer/repos",
            "events_url": "https://api.github.com/users/niemeyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/niemeyer/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "\"%s\" => \"collection %s\", please.\n",
        "created_at": "2015-05-11T22:33:17Z",
        "updated_at": "2015-05-11T22:58:46Z",
        "html_url": "https://github.com/go-mgo/mgo/pull/99#discussion_r30089352",
        "pull_request_url": "https://api.github.com/repos/go-mgo/mgo/pulls/99",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/30089352"
            },
            "html": {
                "href": "https://github.com/go-mgo/mgo/pull/99#discussion_r30089352"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/99"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/30089367",
        "pull_request_review_id": null,
        "id": 30089367,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDg5MzY3",
        "diff_hunk": "@@ -442,6 +443,9 @@ func (r *Runner) PurgeMissing(collections ...string) error {\n \t\t\treturn fmt.Errorf(\"error purging missing transaction %s: %v\", txnId.Hex(), err)\n \t\t}\n \t}\n+\tif err := iter.Close(); err != nil {\n+\t\treturn fmt.Errorf(\"stash iteration error: %v\", err)",
        "path": "txn/txn.go",
        "position": null,
        "original_position": 24,
        "commit_id": "e5d775ad02fa2dfc96d4a4cc91d2938d49bdd4c3",
        "original_commit_id": "54222d9c96c824464b4563606b63f7c8680b9699",
        "user": {
            "login": "niemeyer",
            "id": 378683,
            "node_id": "MDQ6VXNlcjM3ODY4Mw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/378683?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/niemeyer",
            "html_url": "https://github.com/niemeyer",
            "followers_url": "https://api.github.com/users/niemeyer/followers",
            "following_url": "https://api.github.com/users/niemeyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/niemeyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/niemeyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/niemeyer/subscriptions",
            "organizations_url": "https://api.github.com/users/niemeyer/orgs",
            "repos_url": "https://api.github.com/users/niemeyer/repos",
            "events_url": "https://api.github.com/users/niemeyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/niemeyer/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "s/stash/transaction stash/, please.\n",
        "created_at": "2015-05-11T22:33:35Z",
        "updated_at": "2015-05-11T22:58:46Z",
        "html_url": "https://github.com/go-mgo/mgo/pull/99#discussion_r30089367",
        "pull_request_url": "https://api.github.com/repos/go-mgo/mgo/pulls/99",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/30089367"
            },
            "html": {
                "href": "https://github.com/go-mgo/mgo/pull/99#discussion_r30089367"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/99"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/30091156",
        "pull_request_review_id": null,
        "id": 30091156,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDkxMTU2",
        "diff_hunk": "@@ -442,6 +443,9 @@ func (r *Runner) PurgeMissing(collections ...string) error {\n \t\t\treturn fmt.Errorf(\"error purging missing transaction %s: %v\", txnId.Hex(), err)\n \t\t}\n \t}\n+\tif err := iter.Close(); err != nil {\n+\t\treturn fmt.Errorf(\"stash iteration error: %v\", err)",
        "path": "txn/txn.go",
        "position": null,
        "original_position": 24,
        "commit_id": "e5d775ad02fa2dfc96d4a4cc91d2938d49bdd4c3",
        "original_commit_id": "54222d9c96c824464b4563606b63f7c8680b9699",
        "user": {
            "login": "mjs",
            "id": 14993,
            "node_id": "MDQ6VXNlcjE0OTkz",
            "avatar_url": "https://avatars0.githubusercontent.com/u/14993?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mjs",
            "html_url": "https://github.com/mjs",
            "followers_url": "https://api.github.com/users/mjs/followers",
            "following_url": "https://api.github.com/users/mjs/following{/other_user}",
            "gists_url": "https://api.github.com/users/mjs/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mjs/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mjs/subscriptions",
            "organizations_url": "https://api.github.com/users/mjs/orgs",
            "repos_url": "https://api.github.com/users/mjs/repos",
            "events_url": "https://api.github.com/users/mjs/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mjs/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Ha :) This is what I originally had.\n",
        "created_at": "2015-05-11T23:01:12Z",
        "updated_at": "2015-05-11T23:01:12Z",
        "html_url": "https://github.com/go-mgo/mgo/pull/99#discussion_r30091156",
        "pull_request_url": "https://api.github.com/repos/go-mgo/mgo/pulls/99",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/30091156"
            },
            "html": {
                "href": "https://github.com/go-mgo/mgo/pull/99#discussion_r30091156"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/99"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/50354513",
        "pull_request_review_id": null,
        "id": 50354513,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU0NTEz",
        "diff_hunk": "@@ -352,6 +352,50 @@ func Now() time.Time {\n // strange reason has its own datatype defined in BSON.\n type MongoTimestamp int64\n \n+// Time returns the time part of ts which is stored with second precision.\n+func (ts MongoTimestamp) Time() time.Time {\n+\tb := make([]byte, 8, 8)\n+\tbinary.BigEndian.PutUint64(b, uint64(ts))\n+\treturn time.Unix(int64(binary.BigEndian.Uint32(b[:4])), 0)",
        "path": "bson/bson.go",
        "position": null,
        "original_position": 24,
        "commit_id": "3268f0c4ee5dbdec4cced8bd0ab49a7507be6019",
        "original_commit_id": "ea95356f9d86d3960546c9b0e636535ef5d7f12a",
        "user": {
            "login": "niemeyer",
            "id": 378683,
            "node_id": "MDQ6VXNlcjM3ODY4Mw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/378683?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/niemeyer",
            "html_url": "https://github.com/niemeyer",
            "followers_url": "https://api.github.com/users/niemeyer/followers",
            "following_url": "https://api.github.com/users/niemeyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/niemeyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/niemeyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/niemeyer/subscriptions",
            "organizations_url": "https://api.github.com/users/niemeyer/orgs",
            "repos_url": "https://api.github.com/users/niemeyer/repos",
            "events_url": "https://api.github.com/users/niemeyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/niemeyer/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Isn't that the same as int64(uint64(ts) >> 32)?\n",
        "created_at": "2016-01-21T02:49:29Z",
        "updated_at": "2016-02-02T13:18:49Z",
        "html_url": "https://github.com/go-mgo/mgo/pull/202#discussion_r50354513",
        "pull_request_url": "https://api.github.com/repos/go-mgo/mgo/pulls/202",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/50354513"
            },
            "html": {
                "href": "https://github.com/go-mgo/mgo/pull/202#discussion_r50354513"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/202"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/50354606",
        "pull_request_review_id": null,
        "id": 50354606,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU0NjA2",
        "diff_hunk": "@@ -352,6 +352,50 @@ func Now() time.Time {\n // strange reason has its own datatype defined in BSON.\n type MongoTimestamp int64\n \n+// Time returns the time part of ts which is stored with second precision.\n+func (ts MongoTimestamp) Time() time.Time {\n+\tb := make([]byte, 8, 8)\n+\tbinary.BigEndian.PutUint64(b, uint64(ts))\n+\treturn time.Unix(int64(binary.BigEndian.Uint32(b[:4])), 0)\n+}\n+\n+// Counter returns the counter part of ts.\n+func (ts MongoTimestamp) Counter() uint32 {\n+\tb := make([]byte, 8, 8)\n+\tbinary.BigEndian.PutUint64(b, uint64(ts))\n+\treturn binary.BigEndian.Uint32(b[4:])",
        "path": "bson/bson.go",
        "position": null,
        "original_position": 31,
        "commit_id": "3268f0c4ee5dbdec4cced8bd0ab49a7507be6019",
        "original_commit_id": "ea95356f9d86d3960546c9b0e636535ef5d7f12a",
        "user": {
            "login": "niemeyer",
            "id": 378683,
            "node_id": "MDQ6VXNlcjM3ODY4Mw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/378683?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/niemeyer",
            "html_url": "https://github.com/niemeyer",
            "followers_url": "https://api.github.com/users/niemeyer/followers",
            "following_url": "https://api.github.com/users/niemeyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/niemeyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/niemeyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/niemeyer/subscriptions",
            "organizations_url": "https://api.github.com/users/niemeyer/orgs",
            "repos_url": "https://api.github.com/users/niemeyer/repos",
            "events_url": "https://api.github.com/users/niemeyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/niemeyer/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Isn't that the same as uint32(ts)?\n",
        "created_at": "2016-01-21T02:50:53Z",
        "updated_at": "2016-02-02T13:18:49Z",
        "html_url": "https://github.com/go-mgo/mgo/pull/202#discussion_r50354606",
        "pull_request_url": "https://api.github.com/repos/go-mgo/mgo/pulls/202",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/50354606"
            },
            "html": {
                "href": "https://github.com/go-mgo/mgo/pull/202#discussion_r50354606"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/202"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/51561134",
        "pull_request_review_id": null,
        "id": 51561134,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTYxMTM0",
        "diff_hunk": "@@ -352,6 +352,50 @@ func Now() time.Time {\n // strange reason has its own datatype defined in BSON.\n type MongoTimestamp int64\n \n+// Time returns the time part of ts which is stored with second precision.\n+func (ts MongoTimestamp) Time() time.Time {\n+\tb := make([]byte, 8, 8)\n+\tbinary.BigEndian.PutUint64(b, uint64(ts))\n+\treturn time.Unix(int64(binary.BigEndian.Uint32(b[:4])), 0)",
        "path": "bson/bson.go",
        "position": null,
        "original_position": 24,
        "commit_id": "3268f0c4ee5dbdec4cced8bd0ab49a7507be6019",
        "original_commit_id": "ea95356f9d86d3960546c9b0e636535ef5d7f12a",
        "user": {
            "login": "mwmahlberg",
            "id": 138420,
            "node_id": "MDQ6VXNlcjEzODQyMA==",
            "avatar_url": "https://avatars1.githubusercontent.com/u/138420?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mwmahlberg",
            "html_url": "https://github.com/mwmahlberg",
            "followers_url": "https://api.github.com/users/mwmahlberg/followers",
            "following_url": "https://api.github.com/users/mwmahlberg/following{/other_user}",
            "gists_url": "https://api.github.com/users/mwmahlberg/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mwmahlberg/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mwmahlberg/subscriptions",
            "organizations_url": "https://api.github.com/users/mwmahlberg/orgs",
            "repos_url": "https://api.github.com/users/mwmahlberg/repos",
            "events_url": "https://api.github.com/users/mwmahlberg/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mwmahlberg/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Of course. Doh!\n",
        "created_at": "2016-02-02T12:24:06Z",
        "updated_at": "2016-02-02T13:18:49Z",
        "html_url": "https://github.com/go-mgo/mgo/pull/202#discussion_r51561134",
        "pull_request_url": "https://api.github.com/repos/go-mgo/mgo/pulls/202",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/51561134"
            },
            "html": {
                "href": "https://github.com/go-mgo/mgo/pull/202#discussion_r51561134"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/202"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/66262592",
        "pull_request_review_id": null,
        "id": 66262592,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MjYyNTky",
        "diff_hunk": "@@ -380,15 +381,23 @@ func (r *Runner) ChangeLog(logc *mgo.Collection) {\n // used during the normal operation of an application. Its purpose is to put\n // a system that has seen unavoidable corruption back in a working state.\n func (r *Runner) PurgeMissing(collections ...string) error {\n-\ttype M map[string]interface{}\n-\ttype S []interface{}\n \n \ttype TDoc struct {\n-\t\tId       interface{} \"_id\"\n-\t\tTxnQueue []string    \"txn-queue\"\n+\t\tId       interface{}   \"_id\"\n+\t\tTxnQueue []interface{} \"txn-queue\"",
        "path": "txn/txn.go",
        "position": 19,
        "original_position": 19,
        "commit_id": "294f7fc02490c8f249724b2bcc8c30a7e245e9c1",
        "original_commit_id": "294f7fc02490c8f249724b2bcc8c30a7e245e9c1",
        "user": {
            "login": "niemeyer",
            "id": 378683,
            "node_id": "MDQ6VXNlcjM3ODY4Mw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/378683?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/niemeyer",
            "html_url": "https://github.com/niemeyer",
            "followers_url": "https://api.github.com/users/niemeyer/followers",
            "following_url": "https://api.github.com/users/niemeyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/niemeyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/niemeyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/niemeyer/subscriptions",
            "organizations_url": "https://api.github.com/users/niemeyer/orgs",
            "repos_url": "https://api.github.com/users/niemeyer/repos",
            "events_url": "https://api.github.com/users/niemeyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/niemeyer/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "That looks a bit awkward. Feels a lot like the data was manually modified to be incorrect, which is something we cannot guard against. Do you have more details of the case?\n",
        "created_at": "2016-06-08T14:12:39Z",
        "updated_at": "2016-06-08T14:12:40Z",
        "html_url": "https://github.com/go-mgo/mgo/pull/252#discussion_r66262592",
        "pull_request_url": "https://api.github.com/repos/go-mgo/mgo/pulls/252",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/66262592"
            },
            "html": {
                "href": "https://github.com/go-mgo/mgo/pull/252#discussion_r66262592"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/252"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/66362549",
        "pull_request_review_id": null,
        "id": 66362549,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MzYyNTQ5",
        "diff_hunk": "@@ -380,15 +381,23 @@ func (r *Runner) ChangeLog(logc *mgo.Collection) {\n // used during the normal operation of an application. Its purpose is to put\n // a system that has seen unavoidable corruption back in a working state.\n func (r *Runner) PurgeMissing(collections ...string) error {\n-\ttype M map[string]interface{}\n-\ttype S []interface{}\n \n \ttype TDoc struct {\n-\t\tId       interface{} \"_id\"\n-\t\tTxnQueue []string    \"txn-queue\"\n+\t\tId       interface{}   \"_id\"\n+\t\tTxnQueue []interface{} \"txn-queue\"",
        "path": "txn/txn.go",
        "position": 19,
        "original_position": 19,
        "commit_id": "294f7fc02490c8f249724b2bcc8c30a7e245e9c1",
        "original_commit_id": "294f7fc02490c8f249724b2bcc8c30a7e245e9c1",
        "user": {
            "login": "mjs",
            "id": 14993,
            "node_id": "MDQ6VXNlcjE0OTkz",
            "avatar_url": "https://avatars0.githubusercontent.com/u/14993?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mjs",
            "html_url": "https://github.com/mjs",
            "followers_url": "https://api.github.com/users/mjs/followers",
            "following_url": "https://api.github.com/users/mjs/following{/other_user}",
            "gists_url": "https://api.github.com/users/mjs/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mjs/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mjs/subscriptions",
            "organizations_url": "https://api.github.com/users/mjs/orgs",
            "repos_url": "https://api.github.com/users/mjs/repos",
            "events_url": "https://api.github.com/users/mjs/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mjs/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "It was seen in a production Juju deployment. AFAIK the customer nor the support team didn't manually make changes to the DB (but I can't be sure of course). There were nil entries in the txn-queue field as well as references to txns which didn't exist in the txns collection (as we've seen elsewhere), indicating data corruption.\n\nThis is the only case I know of where we've seen nils in the txn-queue field. I don't have details on what happened to the database or the environment it runs in which might have caused this.\n\nIf you're uncomfortable with the change to PurgeMissing we could shelve it for now and dig it out if the problem happens again elsewhere.\n",
        "created_at": "2016-06-08T23:55:34Z",
        "updated_at": "2016-06-08T23:55:34Z",
        "html_url": "https://github.com/go-mgo/mgo/pull/252#discussion_r66362549",
        "pull_request_url": "https://api.github.com/repos/go-mgo/mgo/pulls/252",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/66362549"
            },
            "html": {
                "href": "https://github.com/go-mgo/mgo/pull/252#discussion_r66362549"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/252"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/70116251",
        "pull_request_review_id": null,
        "id": 70116251,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcwMTE2MjUx",
        "diff_hunk": "@@ -2484,7 +2484,15 @@ func (c *Collection) Upsert(selector interface{}, update interface{}) (info *Cha\n \t\tFlags:      1,\n \t\tUpsert:     true,\n \t}\n-\tlerr, err := c.writeOp(&op, true)\n+\tvar lerr *LastError\n+\tfor {",
        "path": "session.go",
        "position": null,
        "original_position": 6,
        "commit_id": "947661c71c426f4abb837aeab489104e960c88c9",
        "original_commit_id": "e6ca63384574349c21bc815bec3a5cf2797730e1",
        "user": {
            "login": "niemeyer",
            "id": 378683,
            "node_id": "MDQ6VXNlcjM3ODY4Mw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/378683?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/niemeyer",
            "html_url": "https://github.com/niemeyer",
            "followers_url": "https://api.github.com/users/niemeyer/followers",
            "following_url": "https://api.github.com/users/niemeyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/niemeyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/niemeyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/niemeyer/subscriptions",
            "organizations_url": "https://api.github.com/users/niemeyer/orgs",
            "repos_url": "https://api.github.com/users/niemeyer/repos",
            "events_url": "https://api.github.com/users/niemeyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/niemeyer/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Let's please start by retrying at most 5 times here and in the other loop. More than that there's a good chance that there's something else wrong.\n",
        "created_at": "2016-07-08T18:09:19Z",
        "updated_at": "2016-07-14T14:22:22Z",
        "html_url": "https://github.com/go-mgo/mgo/pull/291#discussion_r70116251",
        "pull_request_url": "https://api.github.com/repos/go-mgo/mgo/pulls/291",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/70116251"
            },
            "html": {
                "href": "https://github.com/go-mgo/mgo/pull/291#discussion_r70116251"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/291"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/70116333",
        "pull_request_review_id": null,
        "id": 70116333,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcwMTE2MzMz",
        "diff_hunk": "@@ -4240,12 +4248,20 @@ func (q *Query) Apply(change Change, result interface{}) (info *ChangeInfo, err\n \tsession.SetMode(Strong, false)\n \n \tvar doc valueResult\n-\terr = session.DB(dbname).Run(&cmd, &doc)\n-\tif err != nil {\n-\t\tif qerr, ok := err.(*QueryError); ok && qerr.Message == \"No matching object found\" {\n+\tfor {\n+\t\terr = session.DB(dbname).Run(&cmd, &doc)\n+\n+\t\tif err == nil {\n+\t\t\tbreak\n+\t\t} else if change.Upsert && IsDup(err) {\n+\t\t\t// Retry duplicate key errors on upserts.\n+\t\t\t// https://docs.mongodb.com/v3.2/reference/method/db.collection.update/#use-unique-indexes\n+\t\t\tcontinue\n+\t\t} else if qerr, ok := err.(*QueryError); ok && qerr.Message == \"No matching object found\" {\n \t\t\treturn nil, ErrNotFound\n+\t\t} else {\n+\t\t\treturn nil, err",
        "path": "session.go",
        "position": null,
        "original_position": 36,
        "commit_id": "947661c71c426f4abb837aeab489104e960c88c9",
        "original_commit_id": "e6ca63384574349c21bc815bec3a5cf2797730e1",
        "user": {
            "login": "niemeyer",
            "id": 378683,
            "node_id": "MDQ6VXNlcjM3ODY4Mw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/378683?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/niemeyer",
            "html_url": "https://github.com/niemeyer",
            "followers_url": "https://api.github.com/users/niemeyer/followers",
            "following_url": "https://api.github.com/users/niemeyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/niemeyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/niemeyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/niemeyer/subscriptions",
            "organizations_url": "https://api.github.com/users/niemeyer/orgs",
            "repos_url": "https://api.github.com/users/niemeyer/repos",
            "events_url": "https://api.github.com/users/niemeyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/niemeyer/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Please take this one out of the else and after the if blocks. Makes it more clear that this isn't looping around no matter what.\n",
        "created_at": "2016-07-08T18:09:52Z",
        "updated_at": "2016-07-14T14:22:22Z",
        "html_url": "https://github.com/go-mgo/mgo/pull/291#discussion_r70116333",
        "pull_request_url": "https://api.github.com/repos/go-mgo/mgo/pulls/291",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/70116333"
            },
            "html": {
                "href": "https://github.com/go-mgo/mgo/pull/291#discussion_r70116333"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/291"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/70116423",
        "pull_request_review_id": null,
        "id": 70116423,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcwMTE2NDIz",
        "diff_hunk": "@@ -4240,12 +4248,20 @@ func (q *Query) Apply(change Change, result interface{}) (info *ChangeInfo, err\n \tsession.SetMode(Strong, false)\n \n \tvar doc valueResult\n-\terr = session.DB(dbname).Run(&cmd, &doc)\n-\tif err != nil {\n-\t\tif qerr, ok := err.(*QueryError); ok && qerr.Message == \"No matching object found\" {\n+\tfor {\n+\t\terr = session.DB(dbname).Run(&cmd, &doc)\n+\n+\t\tif err == nil {\n+\t\t\tbreak\n+\t\t} else if change.Upsert && IsDup(err) {\n+\t\t\t// Retry duplicate key errors on upserts.\n+\t\t\t// https://docs.mongodb.com/v3.2/reference/method/db.collection.update/#use-unique-indexes\n+\t\t\tcontinue\n+\t\t} else if qerr, ok := err.(*QueryError); ok && qerr.Message == \"No matching object found\" {",
        "path": "session.go",
        "position": null,
        "original_position": 33,
        "commit_id": "947661c71c426f4abb837aeab489104e960c88c9",
        "original_commit_id": "e6ca63384574349c21bc815bec3a5cf2797730e1",
        "user": {
            "login": "niemeyer",
            "id": 378683,
            "node_id": "MDQ6VXNlcjM3ODY4Mw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/378683?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/niemeyer",
            "html_url": "https://github.com/niemeyer",
            "followers_url": "https://api.github.com/users/niemeyer/followers",
            "following_url": "https://api.github.com/users/niemeyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/niemeyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/niemeyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/niemeyer/subscriptions",
            "organizations_url": "https://api.github.com/users/niemeyer/orgs",
            "repos_url": "https://api.github.com/users/niemeyer/repos",
            "events_url": "https://api.github.com/users/niemeyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/niemeyer/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Not your problem, but the error message comparison here saddens me.\n",
        "created_at": "2016-07-08T18:10:27Z",
        "updated_at": "2016-07-14T14:22:22Z",
        "html_url": "https://github.com/go-mgo/mgo/pull/291#discussion_r70116423",
        "pull_request_url": "https://api.github.com/repos/go-mgo/mgo/pulls/291",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/70116423"
            },
            "html": {
                "href": "https://github.com/go-mgo/mgo/pull/291#discussion_r70116423"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/291"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/70116539",
        "pull_request_review_id": null,
        "id": 70116539,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcwMTE2NTM5",
        "diff_hunk": "@@ -264,8 +264,7 @@ NextDoc:\n \t\t// Document missing. Use stash collection.\n \t\tchange.Upsert = true\n \t\tchaos(\"\")\n-\t\t_, err := f.sc.FindId(dkey).Apply(change, &info)\n-\t\tif err != nil {\n+\t\tif _, err := f.sc.FindId(dkey).Apply(change, &info); err != nil {",
        "path": "txn/flusher.go",
        "position": null,
        "original_position": 6,
        "commit_id": "947661c71c426f4abb837aeab489104e960c88c9",
        "original_commit_id": "e6ca63384574349c21bc815bec3a5cf2797730e1",
        "user": {
            "login": "niemeyer",
            "id": 378683,
            "node_id": "MDQ6VXNlcjM3ODY4Mw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/378683?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/niemeyer",
            "html_url": "https://github.com/niemeyer",
            "followers_url": "https://api.github.com/users/niemeyer/followers",
            "following_url": "https://api.github.com/users/niemeyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/niemeyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/niemeyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/niemeyer/subscriptions",
            "organizations_url": "https://api.github.com/users/niemeyer/orgs",
            "repos_url": "https://api.github.com/users/niemeyer/repos",
            "events_url": "https://api.github.com/users/niemeyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/niemeyer/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Please restore the original form here. No need to touch this file.\n",
        "created_at": "2016-07-08T18:11:08Z",
        "updated_at": "2016-07-14T14:22:22Z",
        "html_url": "https://github.com/go-mgo/mgo/pull/291#discussion_r70116539",
        "pull_request_url": "https://api.github.com/repos/go-mgo/mgo/pulls/291",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/70116539"
            },
            "html": {
                "href": "https://github.com/go-mgo/mgo/pull/291#discussion_r70116539"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/291"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/70117166",
        "pull_request_review_id": null,
        "id": 70117166,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcwMTE3MTY2",
        "diff_hunk": "@@ -17,16 +21,39 @@ type MgoSuite struct {\n \tsession *mgo.Session\n }\n \n-var mgoaddr = \"127.0.0.1:50017\"\n+const mgoip = \"127.0.0.1\"",
        "path": "txn/mgo_test.go",
        "position": null,
        "original_position": 20,
        "commit_id": "947661c71c426f4abb837aeab489104e960c88c9",
        "original_commit_id": "e6ca63384574349c21bc815bec3a5cf2797730e1",
        "user": {
            "login": "niemeyer",
            "id": 378683,
            "node_id": "MDQ6VXNlcjM3ODY4Mw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/378683?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/niemeyer",
            "html_url": "https://github.com/niemeyer",
            "followers_url": "https://api.github.com/users/niemeyer/followers",
            "following_url": "https://api.github.com/users/niemeyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/niemeyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/niemeyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/niemeyer/subscriptions",
            "organizations_url": "https://api.github.com/users/niemeyer/orgs",
            "repos_url": "https://api.github.com/users/niemeyer/repos",
            "events_url": "https://api.github.com/users/niemeyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/niemeyer/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "The changes in this file seem unrelated to the fix. Note that most of the mgo tests use fixed ports for the tests, so we have larger problems if that was an issue.\n\nAlso, we have a test server package nowadays which could handle this logic all by itself, probably. So if we have to fix it, that'd be a better way.\n",
        "created_at": "2016-07-08T18:15:02Z",
        "updated_at": "2016-07-14T14:22:22Z",
        "html_url": "https://github.com/go-mgo/mgo/pull/291#discussion_r70117166",
        "pull_request_url": "https://api.github.com/repos/go-mgo/mgo/pulls/291",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/70117166"
            },
            "html": {
                "href": "https://github.com/go-mgo/mgo/pull/291#discussion_r70117166"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/291"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/70188165",
        "pull_request_review_id": null,
        "id": 70188165,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcwMTg4MTY1",
        "diff_hunk": "@@ -2484,7 +2484,15 @@ func (c *Collection) Upsert(selector interface{}, update interface{}) (info *Cha\n \t\tFlags:      1,\n \t\tUpsert:     true,\n \t}\n-\tlerr, err := c.writeOp(&op, true)\n+\tvar lerr *LastError\n+\tfor {",
        "path": "session.go",
        "position": null,
        "original_position": 6,
        "commit_id": "947661c71c426f4abb837aeab489104e960c88c9",
        "original_commit_id": "e6ca63384574349c21bc815bec3a5cf2797730e1",
        "user": {
            "login": "babbageclunk",
            "id": 563399,
            "node_id": "MDQ6VXNlcjU2MzM5OQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/563399?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/babbageclunk",
            "html_url": "https://github.com/babbageclunk",
            "followers_url": "https://api.github.com/users/babbageclunk/followers",
            "following_url": "https://api.github.com/users/babbageclunk/following{/other_user}",
            "gists_url": "https://api.github.com/users/babbageclunk/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/babbageclunk/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/babbageclunk/subscriptions",
            "organizations_url": "https://api.github.com/users/babbageclunk/orgs",
            "repos_url": "https://api.github.com/users/babbageclunk/repos",
            "events_url": "https://api.github.com/users/babbageclunk/events{/privacy}",
            "received_events_url": "https://api.github.com/users/babbageclunk/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Done\n",
        "created_at": "2016-07-10T20:53:50Z",
        "updated_at": "2016-07-14T14:22:22Z",
        "html_url": "https://github.com/go-mgo/mgo/pull/291#discussion_r70188165",
        "pull_request_url": "https://api.github.com/repos/go-mgo/mgo/pulls/291",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/70188165"
            },
            "html": {
                "href": "https://github.com/go-mgo/mgo/pull/291#discussion_r70188165"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/291"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/70188166",
        "pull_request_review_id": null,
        "id": 70188166,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcwMTg4MTY2",
        "diff_hunk": "@@ -4240,12 +4248,20 @@ func (q *Query) Apply(change Change, result interface{}) (info *ChangeInfo, err\n \tsession.SetMode(Strong, false)\n \n \tvar doc valueResult\n-\terr = session.DB(dbname).Run(&cmd, &doc)\n-\tif err != nil {\n-\t\tif qerr, ok := err.(*QueryError); ok && qerr.Message == \"No matching object found\" {\n+\tfor {\n+\t\terr = session.DB(dbname).Run(&cmd, &doc)\n+\n+\t\tif err == nil {\n+\t\t\tbreak\n+\t\t} else if change.Upsert && IsDup(err) {\n+\t\t\t// Retry duplicate key errors on upserts.\n+\t\t\t// https://docs.mongodb.com/v3.2/reference/method/db.collection.update/#use-unique-indexes\n+\t\t\tcontinue\n+\t\t} else if qerr, ok := err.(*QueryError); ok && qerr.Message == \"No matching object found\" {\n \t\t\treturn nil, ErrNotFound\n+\t\t} else {\n+\t\t\treturn nil, err",
        "path": "session.go",
        "position": null,
        "original_position": 36,
        "commit_id": "947661c71c426f4abb837aeab489104e960c88c9",
        "original_commit_id": "e6ca63384574349c21bc815bec3a5cf2797730e1",
        "user": {
            "login": "babbageclunk",
            "id": 563399,
            "node_id": "MDQ6VXNlcjU2MzM5OQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/563399?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/babbageclunk",
            "html_url": "https://github.com/babbageclunk",
            "followers_url": "https://api.github.com/users/babbageclunk/followers",
            "following_url": "https://api.github.com/users/babbageclunk/following{/other_user}",
            "gists_url": "https://api.github.com/users/babbageclunk/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/babbageclunk/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/babbageclunk/subscriptions",
            "organizations_url": "https://api.github.com/users/babbageclunk/orgs",
            "repos_url": "https://api.github.com/users/babbageclunk/repos",
            "events_url": "https://api.github.com/users/babbageclunk/events{/privacy}",
            "received_events_url": "https://api.github.com/users/babbageclunk/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Done\n",
        "created_at": "2016-07-10T20:54:00Z",
        "updated_at": "2016-07-14T14:22:22Z",
        "html_url": "https://github.com/go-mgo/mgo/pull/291#discussion_r70188166",
        "pull_request_url": "https://api.github.com/repos/go-mgo/mgo/pulls/291",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/70188166"
            },
            "html": {
                "href": "https://github.com/go-mgo/mgo/pull/291#discussion_r70188166"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/291"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/70188184",
        "pull_request_review_id": null,
        "id": 70188184,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcwMTg4MTg0",
        "diff_hunk": "@@ -264,8 +264,7 @@ NextDoc:\n \t\t// Document missing. Use stash collection.\n \t\tchange.Upsert = true\n \t\tchaos(\"\")\n-\t\t_, err := f.sc.FindId(dkey).Apply(change, &info)\n-\t\tif err != nil {\n+\t\tif _, err := f.sc.FindId(dkey).Apply(change, &info); err != nil {",
        "path": "txn/flusher.go",
        "position": null,
        "original_position": 6,
        "commit_id": "947661c71c426f4abb837aeab489104e960c88c9",
        "original_commit_id": "e6ca63384574349c21bc815bec3a5cf2797730e1",
        "user": {
            "login": "babbageclunk",
            "id": 563399,
            "node_id": "MDQ6VXNlcjU2MzM5OQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/563399?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/babbageclunk",
            "html_url": "https://github.com/babbageclunk",
            "followers_url": "https://api.github.com/users/babbageclunk/followers",
            "following_url": "https://api.github.com/users/babbageclunk/following{/other_user}",
            "gists_url": "https://api.github.com/users/babbageclunk/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/babbageclunk/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/babbageclunk/subscriptions",
            "organizations_url": "https://api.github.com/users/babbageclunk/orgs",
            "repos_url": "https://api.github.com/users/babbageclunk/repos",
            "events_url": "https://api.github.com/users/babbageclunk/events{/privacy}",
            "received_events_url": "https://api.github.com/users/babbageclunk/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Oops, that was a holdover from the previous version of the PR. Removed. \n",
        "created_at": "2016-07-10T20:55:06Z",
        "updated_at": "2016-07-14T14:22:22Z",
        "html_url": "https://github.com/go-mgo/mgo/pull/291#discussion_r70188184",
        "pull_request_url": "https://api.github.com/repos/go-mgo/mgo/pulls/291",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/70188184"
            },
            "html": {
                "href": "https://github.com/go-mgo/mgo/pull/291#discussion_r70188184"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/291"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/70188350",
        "pull_request_review_id": null,
        "id": 70188350,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcwMTg4MzUw",
        "diff_hunk": "@@ -17,16 +21,39 @@ type MgoSuite struct {\n \tsession *mgo.Session\n }\n \n-var mgoaddr = \"127.0.0.1:50017\"\n+const mgoip = \"127.0.0.1\"",
        "path": "txn/mgo_test.go",
        "position": null,
        "original_position": 20,
        "commit_id": "947661c71c426f4abb837aeab489104e960c88c9",
        "original_commit_id": "e6ca63384574349c21bc815bec3a5cf2797730e1",
        "user": {
            "login": "babbageclunk",
            "id": 563399,
            "node_id": "MDQ6VXNlcjU2MzM5OQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/563399?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/babbageclunk",
            "html_url": "https://github.com/babbageclunk",
            "followers_url": "https://api.github.com/users/babbageclunk/followers",
            "following_url": "https://api.github.com/users/babbageclunk/following{/other_user}",
            "gists_url": "https://api.github.com/users/babbageclunk/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/babbageclunk/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/babbageclunk/subscriptions",
            "organizations_url": "https://api.github.com/users/babbageclunk/orgs",
            "repos_url": "https://api.github.com/users/babbageclunk/repos",
            "events_url": "https://api.github.com/users/babbageclunk/events{/privacy}",
            "received_events_url": "https://api.github.com/users/babbageclunk/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "You're right - these changes are only tangentially related to the upsert fix. Would you rather I split them (and the travis config change) out into a separate PR? It would need to get merged after this one, otherwise the txn tests will be failing.\n\n D'oh, I hadn't spotted it, dbtest handles this much more nicely. I'll rewrite txn_test.go to use it and remove mgo_tes.go. \n",
        "created_at": "2016-07-10T21:08:26Z",
        "updated_at": "2016-07-14T14:22:22Z",
        "html_url": "https://github.com/go-mgo/mgo/pull/291#discussion_r70188350",
        "pull_request_url": "https://api.github.com/repos/go-mgo/mgo/pulls/291",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/70188350"
            },
            "html": {
                "href": "https://github.com/go-mgo/mgo/pull/291#discussion_r70188350"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/291"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/70443779",
        "pull_request_review_id": null,
        "id": 70443779,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcwNDQzNzc5",
        "diff_hunk": "@@ -4240,9 +4251,16 @@ func (q *Query) Apply(change Change, result interface{}) (info *ChangeInfo, err\n \tsession.SetMode(Strong, false)\n \n \tvar doc valueResult\n-\terr = session.DB(dbname).Run(&cmd, &doc)\n-\tif err != nil {\n-\t\tif qerr, ok := err.(*QueryError); ok && qerr.Message == \"No matching object found\" {\n+\tfor i := 0; i < maxUpsertRetries; i++ {\n+\t\terr = session.DB(dbname).Run(&cmd, &doc)\n+\n+\t\tif err == nil {\n+\t\t\tbreak\n+\t\t} else if change.Upsert && IsDup(err) {",
        "path": "session.go",
        "position": null,
        "original_position": 41,
        "commit_id": "947661c71c426f4abb837aeab489104e960c88c9",
        "original_commit_id": "f253ba238c7692df61ee58905383f2e2c298f526",
        "user": {
            "login": "rogpeppe",
            "id": 66491,
            "node_id": "MDQ6VXNlcjY2NDkx",
            "avatar_url": "https://avatars0.githubusercontent.com/u/66491?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rogpeppe",
            "html_url": "https://github.com/rogpeppe",
            "followers_url": "https://api.github.com/users/rogpeppe/followers",
            "following_url": "https://api.github.com/users/rogpeppe/following{/other_user}",
            "gists_url": "https://api.github.com/users/rogpeppe/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rogpeppe/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rogpeppe/subscriptions",
            "organizations_url": "https://api.github.com/users/rogpeppe/orgs",
            "repos_url": "https://api.github.com/users/rogpeppe/repos",
            "events_url": "https://api.github.com/users/rogpeppe/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rogpeppe/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "given that the else is redundant, perhaps leave it out and put the if on a new line?\n",
        "created_at": "2016-07-12T14:01:35Z",
        "updated_at": "2016-07-14T14:22:22Z",
        "html_url": "https://github.com/go-mgo/mgo/pull/291#discussion_r70443779",
        "pull_request_url": "https://api.github.com/repos/go-mgo/mgo/pulls/291",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/70443779"
            },
            "html": {
                "href": "https://github.com/go-mgo/mgo/pull/291#discussion_r70443779"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/291"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/70443903",
        "pull_request_review_id": null,
        "id": 70443903,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcwNDQzOTAz",
        "diff_hunk": "@@ -4240,12 +4248,20 @@ func (q *Query) Apply(change Change, result interface{}) (info *ChangeInfo, err\n \tsession.SetMode(Strong, false)\n \n \tvar doc valueResult\n-\terr = session.DB(dbname).Run(&cmd, &doc)\n-\tif err != nil {\n-\t\tif qerr, ok := err.(*QueryError); ok && qerr.Message == \"No matching object found\" {\n+\tfor {\n+\t\terr = session.DB(dbname).Run(&cmd, &doc)\n+\n+\t\tif err == nil {\n+\t\t\tbreak\n+\t\t} else if change.Upsert && IsDup(err) {\n+\t\t\t// Retry duplicate key errors on upserts.\n+\t\t\t// https://docs.mongodb.com/v3.2/reference/method/db.collection.update/#use-unique-indexes\n+\t\t\tcontinue\n+\t\t} else if qerr, ok := err.(*QueryError); ok && qerr.Message == \"No matching object found\" {",
        "path": "session.go",
        "position": null,
        "original_position": 33,
        "commit_id": "947661c71c426f4abb837aeab489104e960c88c9",
        "original_commit_id": "e6ca63384574349c21bc815bec3a5cf2797730e1",
        "user": {
            "login": "rogpeppe",
            "id": 66491,
            "node_id": "MDQ6VXNlcjY2NDkx",
            "avatar_url": "https://avatars0.githubusercontent.com/u/66491?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rogpeppe",
            "html_url": "https://github.com/rogpeppe",
            "followers_url": "https://api.github.com/users/rogpeppe/followers",
            "following_url": "https://api.github.com/users/rogpeppe/following{/other_user}",
            "gists_url": "https://api.github.com/users/rogpeppe/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rogpeppe/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rogpeppe/subscriptions",
            "organizations_url": "https://api.github.com/users/rogpeppe/orgs",
            "repos_url": "https://api.github.com/users/rogpeppe/repos",
            "events_url": "https://api.github.com/users/rogpeppe/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rogpeppe/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "ditto about the else.\n",
        "created_at": "2016-07-12T14:02:09Z",
        "updated_at": "2016-07-14T14:22:22Z",
        "html_url": "https://github.com/go-mgo/mgo/pull/291#discussion_r70443903",
        "pull_request_url": "https://api.github.com/repos/go-mgo/mgo/pulls/291",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/70443903"
            },
            "html": {
                "href": "https://github.com/go-mgo/mgo/pull/291#discussion_r70443903"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/291"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/70444719",
        "pull_request_review_id": null,
        "id": 70444719,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcwNDQ0NzE5",
        "diff_hunk": "@@ -689,7 +702,12 @@ func (s *S) TestPurgeMissingPipelineSizeLimit(c *C) {\n \tc.Assert(err, IsNil)\n }\n \n+var flaky = flag.Bool(\"flaky\", false, \"Include flaky tests\")\n+\n func (s *S) TestTxnQueueStressTest(c *C) {\n+\tif !*flaky {",
        "path": "txn/txn_test.go",
        "position": null,
        "original_position": 66,
        "commit_id": "947661c71c426f4abb837aeab489104e960c88c9",
        "original_commit_id": "f253ba238c7692df61ee58905383f2e2c298f526",
        "user": {
            "login": "rogpeppe",
            "id": 66491,
            "node_id": "MDQ6VXNlcjY2NDkx",
            "avatar_url": "https://avatars0.githubusercontent.com/u/66491?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rogpeppe",
            "html_url": "https://github.com/rogpeppe",
            "followers_url": "https://api.github.com/users/rogpeppe/followers",
            "following_url": "https://api.github.com/users/rogpeppe/following{/other_user}",
            "gists_url": "https://api.github.com/users/rogpeppe/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rogpeppe/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rogpeppe/subscriptions",
            "organizations_url": "https://api.github.com/users/rogpeppe/orgs",
            "repos_url": "https://api.github.com/users/rogpeppe/repos",
            "events_url": "https://api.github.com/users/rogpeppe/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rogpeppe/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Perhaps include a comment as to why this test is flaky and how it fails when it flakes out?\n",
        "created_at": "2016-07-12T14:06:09Z",
        "updated_at": "2016-07-14T14:22:22Z",
        "html_url": "https://github.com/go-mgo/mgo/pull/291#discussion_r70444719",
        "pull_request_url": "https://api.github.com/repos/go-mgo/mgo/pulls/291",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/70444719"
            },
            "html": {
                "href": "https://github.com/go-mgo/mgo/pull/291#discussion_r70444719"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/291"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/70450667",
        "pull_request_review_id": null,
        "id": 70450667,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcwNDUwNjY3",
        "diff_hunk": "@@ -4240,9 +4251,16 @@ func (q *Query) Apply(change Change, result interface{}) (info *ChangeInfo, err\n \tsession.SetMode(Strong, false)\n \n \tvar doc valueResult\n-\terr = session.DB(dbname).Run(&cmd, &doc)\n-\tif err != nil {\n-\t\tif qerr, ok := err.(*QueryError); ok && qerr.Message == \"No matching object found\" {\n+\tfor i := 0; i < maxUpsertRetries; i++ {\n+\t\terr = session.DB(dbname).Run(&cmd, &doc)\n+\n+\t\tif err == nil {\n+\t\t\tbreak\n+\t\t} else if change.Upsert && IsDup(err) {",
        "path": "session.go",
        "position": null,
        "original_position": 41,
        "commit_id": "947661c71c426f4abb837aeab489104e960c88c9",
        "original_commit_id": "f253ba238c7692df61ee58905383f2e2c298f526",
        "user": {
            "login": "babbageclunk",
            "id": 563399,
            "node_id": "MDQ6VXNlcjU2MzM5OQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/563399?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/babbageclunk",
            "html_url": "https://github.com/babbageclunk",
            "followers_url": "https://api.github.com/users/babbageclunk/followers",
            "following_url": "https://api.github.com/users/babbageclunk/following{/other_user}",
            "gists_url": "https://api.github.com/users/babbageclunk/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/babbageclunk/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/babbageclunk/subscriptions",
            "organizations_url": "https://api.github.com/users/babbageclunk/orgs",
            "repos_url": "https://api.github.com/users/babbageclunk/repos",
            "events_url": "https://api.github.com/users/babbageclunk/events{/privacy}",
            "received_events_url": "https://api.github.com/users/babbageclunk/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Removing those two elses and making the ifs independent reads much better, thanks\n",
        "created_at": "2016-07-12T14:35:25Z",
        "updated_at": "2016-07-14T14:22:22Z",
        "html_url": "https://github.com/go-mgo/mgo/pull/291#discussion_r70450667",
        "pull_request_url": "https://api.github.com/repos/go-mgo/mgo/pulls/291",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/70450667"
            },
            "html": {
                "href": "https://github.com/go-mgo/mgo/pull/291#discussion_r70450667"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/291"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/70772750",
        "pull_request_review_id": null,
        "id": 70772750,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcwNzcyNzUw",
        "diff_hunk": "@@ -2484,7 +2487,15 @@ func (c *Collection) Upsert(selector interface{}, update interface{}) (info *Cha\n \t\tFlags:      1,\n \t\tUpsert:     true,\n \t}\n-\tlerr, err := c.writeOp(&op, true)\n+\tvar lerr *LastError\n+\tfor i := 0; i < maxUpsertRetries; i++ {",
        "path": "session.go",
        "position": 18,
        "original_position": 18,
        "commit_id": "947661c71c426f4abb837aeab489104e960c88c9",
        "original_commit_id": "bbc34d027a460a8ed9323431b32247adb5afb056",
        "user": {
            "login": "jameinel",
            "id": 202877,
            "node_id": "MDQ6VXNlcjIwMjg3Nw==",
            "avatar_url": "https://avatars0.githubusercontent.com/u/202877?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jameinel",
            "html_url": "https://github.com/jameinel",
            "followers_url": "https://api.github.com/users/jameinel/followers",
            "following_url": "https://api.github.com/users/jameinel/following{/other_user}",
            "gists_url": "https://api.github.com/users/jameinel/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jameinel/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jameinel/subscriptions",
            "organizations_url": "https://api.github.com/users/jameinel/orgs",
            "repos_url": "https://api.github.com/users/jameinel/repos",
            "events_url": "https://api.github.com/users/jameinel/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jameinel/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I believe mgo has an ability to hook in a log function, can we get retries like this into that mechanism so we have an idea how often it might be triggering.\nMaybe something like logging only on success if i > 0 ?\n",
        "created_at": "2016-07-14T09:06:57Z",
        "updated_at": "2016-07-14T14:22:22Z",
        "html_url": "https://github.com/go-mgo/mgo/pull/291#discussion_r70772750",
        "pull_request_url": "https://api.github.com/repos/go-mgo/mgo/pulls/291",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/70772750"
            },
            "html": {
                "href": "https://github.com/go-mgo/mgo/pull/291#discussion_r70772750"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/291"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/70814088",
        "pull_request_review_id": null,
        "id": 70814088,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcwODE0MDg4",
        "diff_hunk": "@@ -2484,7 +2487,15 @@ func (c *Collection) Upsert(selector interface{}, update interface{}) (info *Cha\n \t\tFlags:      1,\n \t\tUpsert:     true,\n \t}\n-\tlerr, err := c.writeOp(&op, true)\n+\tvar lerr *LastError\n+\tfor i := 0; i < maxUpsertRetries; i++ {",
        "path": "session.go",
        "position": 18,
        "original_position": 18,
        "commit_id": "947661c71c426f4abb837aeab489104e960c88c9",
        "original_commit_id": "bbc34d027a460a8ed9323431b32247adb5afb056",
        "user": {
            "login": "babbageclunk",
            "id": 563399,
            "node_id": "MDQ6VXNlcjU2MzM5OQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/563399?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/babbageclunk",
            "html_url": "https://github.com/babbageclunk",
            "followers_url": "https://api.github.com/users/babbageclunk/followers",
            "following_url": "https://api.github.com/users/babbageclunk/following{/other_user}",
            "gists_url": "https://api.github.com/users/babbageclunk/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/babbageclunk/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/babbageclunk/subscriptions",
            "organizations_url": "https://api.github.com/users/babbageclunk/orgs",
            "repos_url": "https://api.github.com/users/babbageclunk/repos",
            "events_url": "https://api.github.com/users/babbageclunk/events{/privacy}",
            "received_events_url": "https://api.github.com/users/babbageclunk/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Done\n",
        "created_at": "2016-07-14T14:22:52Z",
        "updated_at": "2016-07-14T14:22:52Z",
        "html_url": "https://github.com/go-mgo/mgo/pull/291#discussion_r70814088",
        "pull_request_url": "https://api.github.com/repos/go-mgo/mgo/pulls/291",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/70814088"
            },
            "html": {
                "href": "https://github.com/go-mgo/mgo/pull/291#discussion_r70814088"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/291"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/70863486",
        "pull_request_review_id": null,
        "id": 70863486,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcwODYzNDg2",
        "diff_hunk": "@@ -2484,7 +2487,18 @@ func (c *Collection) Upsert(selector interface{}, update interface{}) (info *Cha\n \t\tFlags:      1,\n \t\tUpsert:     true,\n \t}\n-\tlerr, err := c.writeOp(&op, true)\n+\tvar lerr *LastError\n+\tfor i := 0; i < maxUpsertRetries; i++ {\n+\t\tlerr, err = c.writeOp(&op, true)\n+\t\t// Retry duplicate key errors on upserts.\n+\t\t// https://docs.mongodb.com/v3.2/reference/method/db.collection.update/#use-unique-indexes\n+\t\tif !IsDup(err) {\n+\t\t\tif i > 0 {\n+\t\t\t\tdebugf(\"upsert retry succeeded after %d failure(s)\", i)",
        "path": "session.go",
        "position": 24,
        "original_position": 24,
        "commit_id": "947661c71c426f4abb837aeab489104e960c88c9",
        "original_commit_id": "947661c71c426f4abb837aeab489104e960c88c9",
        "user": {
            "login": "niemeyer",
            "id": 378683,
            "node_id": "MDQ6VXNlcjM3ODY4Mw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/378683?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/niemeyer",
            "html_url": "https://github.com/niemeyer",
            "followers_url": "https://api.github.com/users/niemeyer/followers",
            "following_url": "https://api.github.com/users/niemeyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/niemeyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/niemeyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/niemeyer/subscriptions",
            "organizations_url": "https://api.github.com/users/niemeyer/orgs",
            "repos_url": "https://api.github.com/users/niemeyer/repos",
            "events_url": "https://api.github.com/users/niemeyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/niemeyer/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "The error message is bogus. Not having a dup error does not mean the upsert succeeded.\n\nPlease drop the debug message altogether. If we have debug on, we'll see the attempts going through.\n",
        "created_at": "2016-07-14T18:58:23Z",
        "updated_at": "2016-07-14T18:58:23Z",
        "html_url": "https://github.com/go-mgo/mgo/pull/291#discussion_r70863486",
        "pull_request_url": "https://api.github.com/repos/go-mgo/mgo/pulls/291",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/70863486"
            },
            "html": {
                "href": "https://github.com/go-mgo/mgo/pull/291#discussion_r70863486"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/291"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/70863863",
        "pull_request_review_id": null,
        "id": 70863863,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcwODYzODYz",
        "diff_hunk": "@@ -4240,8 +4254,20 @@ func (q *Query) Apply(change Change, result interface{}) (info *ChangeInfo, err\n \tsession.SetMode(Strong, false)\n \n \tvar doc valueResult\n-\terr = session.DB(dbname).Run(&cmd, &doc)\n-\tif err != nil {\n+\tfor i := 0; i < maxUpsertRetries; i++ {\n+\t\terr = session.DB(dbname).Run(&cmd, &doc)\n+\n+\t\tif err == nil {\n+\t\t\tif i > 0 {\n+\t\t\t\tdebugf(\"upsert retry succeeded after %d failure(s)\", i)",
        "path": "session.go",
        "position": 43,
        "original_position": 43,
        "commit_id": "947661c71c426f4abb837aeab489104e960c88c9",
        "original_commit_id": "947661c71c426f4abb837aeab489104e960c88c9",
        "user": {
            "login": "niemeyer",
            "id": 378683,
            "node_id": "MDQ6VXNlcjM3ODY4Mw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/378683?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/niemeyer",
            "html_url": "https://github.com/niemeyer",
            "followers_url": "https://api.github.com/users/niemeyer/followers",
            "following_url": "https://api.github.com/users/niemeyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/niemeyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/niemeyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/niemeyer/subscriptions",
            "organizations_url": "https://api.github.com/users/niemeyer/orgs",
            "repos_url": "https://api.github.com/users/niemeyer/repos",
            "events_url": "https://api.github.com/users/niemeyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/niemeyer/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Same, let's please drop this.\n",
        "created_at": "2016-07-14T19:00:59Z",
        "updated_at": "2016-07-14T19:00:59Z",
        "html_url": "https://github.com/go-mgo/mgo/pull/291#discussion_r70863863",
        "pull_request_url": "https://api.github.com/repos/go-mgo/mgo/pulls/291",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/70863863"
            },
            "html": {
                "href": "https://github.com/go-mgo/mgo/pull/291#discussion_r70863863"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/291"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/75242347",
        "pull_request_review_id": null,
        "id": 75242347,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDc1MjQyMzQ3",
        "diff_hunk": "@@ -380,15 +381,23 @@ func (r *Runner) ChangeLog(logc *mgo.Collection) {\n // used during the normal operation of an application. Its purpose is to put\n // a system that has seen unavoidable corruption back in a working state.\n func (r *Runner) PurgeMissing(collections ...string) error {\n-\ttype M map[string]interface{}\n-\ttype S []interface{}\n \n \ttype TDoc struct {\n-\t\tId       interface{} \"_id\"\n-\t\tTxnQueue []string    \"txn-queue\"\n+\t\tId       interface{}   \"_id\"\n+\t\tTxnQueue []interface{} \"txn-queue\"",
        "path": "txn/txn.go",
        "position": 19,
        "original_position": 19,
        "commit_id": "294f7fc02490c8f249724b2bcc8c30a7e245e9c1",
        "original_commit_id": "294f7fc02490c8f249724b2bcc8c30a7e245e9c1",
        "user": {
            "login": "mjs",
            "id": 14993,
            "node_id": "MDQ6VXNlcjE0OTkz",
            "avatar_url": "https://avatars0.githubusercontent.com/u/14993?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mjs",
            "html_url": "https://github.com/mjs",
            "followers_url": "https://api.github.com/users/mjs/followers",
            "following_url": "https://api.github.com/users/mjs/following{/other_user}",
            "gists_url": "https://api.github.com/users/mjs/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mjs/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mjs/subscriptions",
            "organizations_url": "https://api.github.com/users/mjs/orgs",
            "repos_url": "https://api.github.com/users/mjs/repos",
            "events_url": "https://api.github.com/users/mjs/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mjs/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "For the record, I've now personally seen `nil` values in `txn-queue` fields at 2 customer sites now.\n",
        "created_at": "2016-08-18T03:02:23Z",
        "updated_at": "2016-08-18T03:02:23Z",
        "html_url": "https://github.com/go-mgo/mgo/pull/252#discussion_r75242347",
        "pull_request_url": "https://api.github.com/repos/go-mgo/mgo/pulls/252",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/75242347"
            },
            "html": {
                "href": "https://github.com/go-mgo/mgo/pull/252#discussion_r75242347"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/252"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/92457410",
        "pull_request_review_id": 12973501,
        "id": 92457410,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkyNDU3NDEw",
        "diff_hunk": "@@ -294,6 +295,9 @@ func (e *encoder) addElem(name string, v reflect.Value, minSize bool) {\n \t\t\t}\n \t\tdefault:\n \t\t\te.addElemName(0x02, name)\n+\t\t\tif !utf8.ValidString(s) {\n+\t\t\t\tpanic(\"string value is not valid utf8\")",
        "path": "bson/encode.go",
        "position": 13,
        "original_position": 13,
        "commit_id": "8ef74f8ddf70989a565bea52cbb47a31f2a03f36",
        "original_commit_id": "8ef74f8ddf70989a565bea52cbb47a31f2a03f36",
        "user": {
            "login": "bpot",
            "id": 8415,
            "node_id": "MDQ6VXNlcjg0MTU=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/8415?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bpot",
            "html_url": "https://github.com/bpot",
            "followers_url": "https://api.github.com/users/bpot/followers",
            "following_url": "https://api.github.com/users/bpot/following{/other_user}",
            "gists_url": "https://api.github.com/users/bpot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bpot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bpot/subscriptions",
            "organizations_url": "https://api.github.com/users/bpot/orgs",
            "repos_url": "https://api.github.com/users/bpot/repos",
            "events_url": "https://api.github.com/users/bpot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bpot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "panics are captured and returned as errors from `Marshal`",
        "created_at": "2016-12-14T18:28:37Z",
        "updated_at": "2016-12-14T18:28:37Z",
        "html_url": "https://github.com/go-mgo/mgo/pull/369#discussion_r92457410",
        "pull_request_url": "https://api.github.com/repos/go-mgo/mgo/pulls/369",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/92457410"
            },
            "html": {
                "href": "https://github.com/go-mgo/mgo/pull/369#discussion_r92457410"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/369"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/97392057",
        "pull_request_review_id": 17999949,
        "id": 97392057,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk3MzkyMDU3",
        "diff_hunk": "@@ -352,6 +352,46 @@ func Now() time.Time {\n // strange reason has its own datatype defined in BSON.\n type MongoTimestamp int64\n \n+// Time returns the time part of ts which is stored with second precision.\n+func (ts MongoTimestamp) Time() time.Time {\n+\treturn time.Unix(int64(uint64(ts) >> 32), 0)\n+}\n+\n+// Counter returns the counter part of ts.\n+func (ts MongoTimestamp) Counter() uint32 {\n+\treturn uint32(ts)\n+}\n+\n+// NewMongoTimestamp creates a timestamp using the given date t with second precision\n+// and counter c.\n+//\n+// Returns -1 and en error if time t is earlier than 1970-01-01T00:00:00Z\n+// or later than 2106-02-07T06:28:15Z.\n+//\n+// Note that two timestamps are not allowed to have the same combination of time and counter,\n+// so you have to make sure to increase the counter when creating multiple MongoTimestamps\n+// within one second.\n+func NewMongoTimestamp(t time.Time, c uint32) (MongoTimestamp, error) {\n+\tvar tv uint32\n+\n+\tu := t.Unix()\n+\n+\tif u < 0 || u > math.MaxUint32 {\n+\t\treturn -1, errors.New(\"invalid value for time\")\n+\t} \n+\t\n+\ttv = uint32(u)\n+\n+\tbuf := bytes.Buffer{}\n+\n+\tbinary.Write(&buf, binary.BigEndian, tv)\n+\tbinary.Write(&buf, binary.BigEndian, c)\n+\n+\ti := int64(binary.BigEndian.Uint64(buf.Bytes()))",
        "path": "bson/bson.go",
        "position": 55,
        "original_position": 55,
        "commit_id": "3268f0c4ee5dbdec4cced8bd0ab49a7507be6019",
        "original_commit_id": "3268f0c4ee5dbdec4cced8bd0ab49a7507be6019",
        "user": {
            "login": "zph",
            "id": 1026584,
            "node_id": "MDQ6VXNlcjEwMjY1ODQ=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1026584?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/zph",
            "html_url": "https://github.com/zph",
            "followers_url": "https://api.github.com/users/zph/followers",
            "following_url": "https://api.github.com/users/zph/following{/other_user}",
            "gists_url": "https://api.github.com/users/zph/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/zph/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/zph/subscriptions",
            "organizations_url": "https://api.github.com/users/zph/orgs",
            "repos_url": "https://api.github.com/users/zph/repos",
            "events_url": "https://api.github.com/users/zph/events{/privacy}",
            "received_events_url": "https://api.github.com/users/zph/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@niemeyer Also, should this style be converted to the terse bitshifting syntax?",
        "created_at": "2017-01-23T19:09:19Z",
        "updated_at": "2017-01-23T19:09:19Z",
        "html_url": "https://github.com/go-mgo/mgo/pull/202#discussion_r97392057",
        "pull_request_url": "https://api.github.com/repos/go-mgo/mgo/pulls/202",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/97392057"
            },
            "html": {
                "href": "https://github.com/go-mgo/mgo/pull/202#discussion_r97392057"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/202"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/128389504",
        "pull_request_review_id": 51064748,
        "id": 128389504,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyODM4OTUwNA==",
        "diff_hunk": "@@ -1333,6 +1333,80 @@ NextField:\n \treturn err\n }\n \n+// InstantEnsureIndex is a function for create index from struct schema\n+// Example struct { Color   string     `bson:\"color\" index:\"background,sparse\"` }\n+func (c *Collection)InstantEnsureIndex(s interface{}) (err error) {\n+\tst := reflect.TypeOf(s)\n+\tif st.Kind() != reflect.Struct {\n+\t\treturn errors.New(\"s must be a struct\")\n+\t}\n+\n+\tn := st.NumField()\n+\tindexMap := make(map[string][]string)\n+\n+\tfor i := 0; i != n; i++ {\n+\t\tfield := st.Field(i)\n+\t\tif field.PkgPath != \"\" && !field.Anonymous {\n+\t\t\tcontinue // Private field\n+\t\t}\n+\n+\t\t// Get fields in index tag\n+\t\ttag := field.Tag.Get(\"index\")\n+\t\tif tag == \"\" && strings.Index(string(field.Tag), \":\") < 0 {\n+\t\t\ttag = string(field.Tag)\n+\t\t}\n+\n+\t\tif tag == \"-\" {\n+\t\t\tcontinue\n+\t\t}\n+\n+\t\tfields := strings.Replace(tag, \",\", \"_\", -1)\n+\n+\t\t// Get key in bson tag\n+\t\tkey := field.Tag.Get(\"bson\")\n+\t\tif i := strings.Index(key, \",\"); i >= 0 {\n+\t\t\tkey = key[:i]\n+\t\t}\n+\t\tif key == \"\" {\n+\t\t\tkey = strings.ToLower(field.Name)\n+\t\t}\n+\n+\t\tif v, found := indexMap[fields]; found {\n+\t\t\tv = append(v, key)\n+\t\t\tindexMap[fields] = v\n+\t\t} else {\n+\t\t\tindexMap[fields] = []string{key}\n+\t\t}\n+\n+\t}\n+\n+\tfor k, v := range indexMap {\n+\t\tfields := strings.Split(k, \"_\")\n+\t\tindex := mgo.Index{}",
        "path": "session.go",
        "position": 53,
        "original_position": 53,
        "commit_id": "58d147e170905b7b27b3caf368b3ae62b7f47e59",
        "original_commit_id": "58d147e170905b7b27b3caf368b3ae62b7f47e59",
        "user": {
            "login": "vivace-io",
            "id": 13205294,
            "node_id": "MDQ6VXNlcjEzMjA1Mjk0",
            "avatar_url": "https://avatars2.githubusercontent.com/u/13205294?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/vivace-io",
            "html_url": "https://github.com/vivace-io",
            "followers_url": "https://api.github.com/users/vivace-io/followers",
            "following_url": "https://api.github.com/users/vivace-io/following{/other_user}",
            "gists_url": "https://api.github.com/users/vivace-io/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/vivace-io/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/vivace-io/subscriptions",
            "organizations_url": "https://api.github.com/users/vivace-io/orgs",
            "repos_url": "https://api.github.com/users/vivace-io/repos",
            "events_url": "https://api.github.com/users/vivace-io/events{/privacy}",
            "received_events_url": "https://api.github.com/users/vivace-io/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "This call to package `mgo` is failing the build. Type `Index` already exists in the same package.",
        "created_at": "2017-07-19T23:00:59Z",
        "updated_at": "2017-07-19T23:01:00Z",
        "html_url": "https://github.com/go-mgo/mgo/pull/446#discussion_r128389504",
        "pull_request_url": "https://api.github.com/repos/go-mgo/mgo/pulls/446",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/128389504"
            },
            "html": {
                "href": "https://github.com/go-mgo/mgo/pull/446#discussion_r128389504"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/446"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/131093635",
        "pull_request_review_id": 54038478,
        "id": 131093635,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMTA5MzYzNQ==",
        "diff_hunk": "@@ -1537,8 +1537,21 @@ func simpleIndexKey(realKey bson.D) (key []string) {\n \t\tfield := realKey[i].Name\n \t\tvi, ok := realKey[i].Value.(int)",
        "path": "session.go",
        "position": null,
        "original_position": 2,
        "commit_id": "f46e270ec3c7d9dc7c9c4b6ee68f3c51a4c07acd",
        "original_commit_id": "bdf20174bb16d0a515a4aa007d5d42379766e747",
        "user": {
            "login": "niemeyer",
            "id": 378683,
            "node_id": "MDQ6VXNlcjM3ODY4Mw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/378683?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/niemeyer",
            "html_url": "https://github.com/niemeyer",
            "followers_url": "https://api.github.com/users/niemeyer/followers",
            "following_url": "https://api.github.com/users/niemeyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/niemeyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/niemeyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/niemeyer/subscriptions",
            "organizations_url": "https://api.github.com/users/niemeyer/orgs",
            "repos_url": "https://api.github.com/users/niemeyer/repos",
            "events_url": "https://api.github.com/users/niemeyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/niemeyer/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "This may be included in the type switch as well.",
        "created_at": "2017-08-03T09:26:54Z",
        "updated_at": "2017-08-03T16:06:33Z",
        "html_url": "https://github.com/go-mgo/mgo/pull/476#discussion_r131093635",
        "pull_request_url": "https://api.github.com/repos/go-mgo/mgo/pulls/476",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/131093635"
            },
            "html": {
                "href": "https://github.com/go-mgo/mgo/pull/476#discussion_r131093635"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/476"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/131093786",
        "pull_request_review_id": 54038478,
        "id": 131093786,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMTA5Mzc4Ng==",
        "diff_hunk": "@@ -1537,8 +1537,21 @@ func simpleIndexKey(realKey bson.D) (key []string) {\n \t\tfield := realKey[i].Name\n \t\tvi, ok := realKey[i].Value.(int)\n \t\tif !ok {\n-\t\t\tvf, _ := realKey[i].Value.(float64)\n-\t\t\tvi = int(vf)\n+\t\t\tswitch realKey[i].Value.(type){\n+\t\t\tcase int64:\n+\t\t\t\tvf, _ := realKey[i].Value.(int64)\n+\t\t\t\tvi = int(vf)\n+\t\t\tcase float64:\n+\t\t\t\tvf, _ := realKey[i].Value.(float64)\n+\t\t\t\tvi = int(vf)\n+\t\t\tcase string:\n+\t\t\t\tif vs, ok := realKey[i].Value.(string); ok {\n+\t\t\t\t\tkey = append(key, \"$\"+vs+\":\"+field)\n+\t\t\t\t\tcontinue\n+\t\t\t\t}\n+\t\t\tdefault:\n+\t\t\t\tpanic(\"Got unknown index key type for field \" + field)",
        "path": "session.go",
        "position": null,
        "original_position": 19,
        "commit_id": "f46e270ec3c7d9dc7c9c4b6ee68f3c51a4c07acd",
        "original_commit_id": "bdf20174bb16d0a515a4aa007d5d42379766e747",
        "user": {
            "login": "niemeyer",
            "id": 378683,
            "node_id": "MDQ6VXNlcjM3ODY4Mw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/378683?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/niemeyer",
            "html_url": "https://github.com/niemeyer",
            "followers_url": "https://api.github.com/users/niemeyer/followers",
            "following_url": "https://api.github.com/users/niemeyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/niemeyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/niemeyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/niemeyer/subscriptions",
            "organizations_url": "https://api.github.com/users/niemeyer/orgs",
            "repos_url": "https://api.github.com/users/niemeyer/repos",
            "events_url": "https://api.github.com/users/niemeyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/niemeyer/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "We pretty much never want to panic on bad data. The driver and the code is not at fault when the data is bogus.",
        "created_at": "2017-08-03T09:27:34Z",
        "updated_at": "2017-08-03T16:06:33Z",
        "html_url": "https://github.com/go-mgo/mgo/pull/476#discussion_r131093786",
        "pull_request_url": "https://api.github.com/repos/go-mgo/mgo/pulls/476",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/131093786"
            },
            "html": {
                "href": "https://github.com/go-mgo/mgo/pull/476#discussion_r131093786"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/476"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/131460880",
        "pull_request_review_id": 54448238,
        "id": 131460880,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMTQ2MDg4MA==",
        "diff_hunk": "@@ -1537,8 +1537,21 @@ func simpleIndexKey(realKey bson.D) (key []string) {\n \t\tfield := realKey[i].Name\n \t\tvi, ok := realKey[i].Value.(int)",
        "path": "session.go",
        "position": null,
        "original_position": 2,
        "commit_id": "f46e270ec3c7d9dc7c9c4b6ee68f3c51a4c07acd",
        "original_commit_id": "bdf20174bb16d0a515a4aa007d5d42379766e747",
        "user": {
            "login": "mapete94",
            "id": 13066405,
            "node_id": "MDQ6VXNlcjEzMDY2NDA1",
            "avatar_url": "https://avatars0.githubusercontent.com/u/13066405?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mapete94",
            "html_url": "https://github.com/mapete94",
            "followers_url": "https://api.github.com/users/mapete94/followers",
            "following_url": "https://api.github.com/users/mapete94/following{/other_user}",
            "gists_url": "https://api.github.com/users/mapete94/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mapete94/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mapete94/subscriptions",
            "organizations_url": "https://api.github.com/users/mapete94/orgs",
            "repos_url": "https://api.github.com/users/mapete94/repos",
            "events_url": "https://api.github.com/users/mapete94/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mapete94/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "It's been incorporated into the case statement.",
        "created_at": "2017-08-04T18:49:25Z",
        "updated_at": "2017-08-04T18:49:25Z",
        "html_url": "https://github.com/go-mgo/mgo/pull/476#discussion_r131460880",
        "pull_request_url": "https://api.github.com/repos/go-mgo/mgo/pulls/476",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/131460880"
            },
            "html": {
                "href": "https://github.com/go-mgo/mgo/pull/476#discussion_r131460880"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/476"
            }
        },
        "in_reply_to_id": 131093635
    },
    {
        "url": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/131460989",
        "pull_request_review_id": 54448349,
        "id": 131460989,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzMTQ2MDk4OQ==",
        "diff_hunk": "@@ -1537,8 +1537,21 @@ func simpleIndexKey(realKey bson.D) (key []string) {\n \t\tfield := realKey[i].Name\n \t\tvi, ok := realKey[i].Value.(int)\n \t\tif !ok {\n-\t\t\tvf, _ := realKey[i].Value.(float64)\n-\t\t\tvi = int(vf)\n+\t\t\tswitch realKey[i].Value.(type){\n+\t\t\tcase int64:\n+\t\t\t\tvf, _ := realKey[i].Value.(int64)\n+\t\t\t\tvi = int(vf)\n+\t\t\tcase float64:\n+\t\t\t\tvf, _ := realKey[i].Value.(float64)\n+\t\t\t\tvi = int(vf)\n+\t\t\tcase string:\n+\t\t\t\tif vs, ok := realKey[i].Value.(string); ok {\n+\t\t\t\t\tkey = append(key, \"$\"+vs+\":\"+field)\n+\t\t\t\t\tcontinue\n+\t\t\t\t}\n+\t\t\tdefault:\n+\t\t\t\tpanic(\"Got unknown index key type for field \" + field)",
        "path": "session.go",
        "position": null,
        "original_position": 19,
        "commit_id": "f46e270ec3c7d9dc7c9c4b6ee68f3c51a4c07acd",
        "original_commit_id": "bdf20174bb16d0a515a4aa007d5d42379766e747",
        "user": {
            "login": "mapete94",
            "id": 13066405,
            "node_id": "MDQ6VXNlcjEzMDY2NDA1",
            "avatar_url": "https://avatars0.githubusercontent.com/u/13066405?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mapete94",
            "html_url": "https://github.com/mapete94",
            "followers_url": "https://api.github.com/users/mapete94/followers",
            "following_url": "https://api.github.com/users/mapete94/following{/other_user}",
            "gists_url": "https://api.github.com/users/mapete94/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mapete94/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mapete94/subscriptions",
            "organizations_url": "https://api.github.com/users/mapete94/orgs",
            "repos_url": "https://api.github.com/users/mapete94/repos",
            "events_url": "https://api.github.com/users/mapete94/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mapete94/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I've removed it, but there is a similar panic right below it that was the reason I included it.",
        "created_at": "2017-08-04T18:49:55Z",
        "updated_at": "2017-08-04T18:49:55Z",
        "html_url": "https://github.com/go-mgo/mgo/pull/476#discussion_r131460989",
        "pull_request_url": "https://api.github.com/repos/go-mgo/mgo/pulls/476",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/131460989"
            },
            "html": {
                "href": "https://github.com/go-mgo/mgo/pull/476#discussion_r131460989"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/476"
            }
        },
        "in_reply_to_id": 131093786
    },
    {
        "url": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/125537619",
        "pull_request_review_id": 47934463,
        "id": 125537619,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNTUzNzYxOQ==",
        "diff_hunk": "@@ -244,6 +246,16 @@ NextDoc:\n \t\tchange.Upsert = false\n \t\tchaos(\"\")\n \t\tif _, err := cquery.Apply(change, &info); err == nil {\n+\t\t\tif len(info.Queue) > maxTxnQueueLength {\n+\t\t\t\t// abort with TXN Queue too long, but remove the entry we just added",
        "path": "txn/flusher.go",
        "position": null,
        "original_position": 14,
        "commit_id": "b236303487ddf9bb6ca5d825a83e5fc71ec84979",
        "original_commit_id": "f9d84591dfc2173d1734161ffe823e3bd098fb25",
        "user": {
            "login": "mjs",
            "id": 14993,
            "node_id": "MDQ6VXNlcjE0OTkz",
            "avatar_url": "https://avatars0.githubusercontent.com/u/14993?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mjs",
            "html_url": "https://github.com/mjs",
            "followers_url": "https://api.github.com/users/mjs/followers",
            "following_url": "https://api.github.com/users/mjs/following{/other_user}",
            "gists_url": "https://api.github.com/users/mjs/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mjs/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mjs/subscriptions",
            "organizations_url": "https://api.github.com/users/mjs/orgs",
            "repos_url": "https://api.github.com/users/mjs/repos",
            "events_url": "https://api.github.com/users/mjs/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mjs/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "s/TXN Queue/txn-queue/ ?",
        "created_at": "2017-07-05T00:04:09Z",
        "updated_at": "2017-11-13T17:04:26Z",
        "html_url": "https://github.com/go-mgo/mgo/pull/463#discussion_r125537619",
        "pull_request_url": "https://api.github.com/repos/go-mgo/mgo/pulls/463",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/125537619"
            },
            "html": {
                "href": "https://github.com/go-mgo/mgo/pull/463#discussion_r125537619"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/463"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/125537735",
        "pull_request_review_id": 47934463,
        "id": 125537735,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNTUzNzczNQ==",
        "diff_hunk": "@@ -212,6 +212,8 @@ var txnFields = bson.D{{\"txn-queue\", 1}, {\"txn-revno\", 1}, {\"txn-remove\", 1}, {\"\n \n var errPreReqs = fmt.Errorf(\"transaction has pre-requisites and force is false\")\n \n+const maxTxnQueueLength = 1000",
        "path": "txn/flusher.go",
        "position": null,
        "original_position": 4,
        "commit_id": "b236303487ddf9bb6ca5d825a83e5fc71ec84979",
        "original_commit_id": "f9d84591dfc2173d1734161ffe823e3bd098fb25",
        "user": {
            "login": "mjs",
            "id": 14993,
            "node_id": "MDQ6VXNlcjE0OTkz",
            "avatar_url": "https://avatars0.githubusercontent.com/u/14993?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mjs",
            "html_url": "https://github.com/mjs",
            "followers_url": "https://api.github.com/users/mjs/followers",
            "following_url": "https://api.github.com/users/mjs/following{/other_user}",
            "gists_url": "https://api.github.com/users/mjs/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mjs/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mjs/subscriptions",
            "organizations_url": "https://api.github.com/users/mjs/orgs",
            "repos_url": "https://api.github.com/users/mjs/repos",
            "events_url": "https://api.github.com/users/mjs/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mjs/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "This seems like a sensible default but it might be good to add support for overriding it on a per session basis in case it's required for some application.",
        "created_at": "2017-07-05T00:06:29Z",
        "updated_at": "2017-11-13T17:04:26Z",
        "html_url": "https://github.com/go-mgo/mgo/pull/463#discussion_r125537735",
        "pull_request_url": "https://api.github.com/repos/go-mgo/mgo/pulls/463",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/comments/125537735"
            },
            "html": {
                "href": "https://github.com/go-mgo/mgo/pull/463#discussion_r125537735"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/go-mgo/mgo/pulls/463"
            }
        }
    }
]